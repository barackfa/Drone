
Dipterv_Drone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000141a0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a80  08014330  08014330  00024330  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014db0  08014db0  000301ec  2**0
                  CONTENTS
  4 .ARM          00000008  08014db0  08014db0  00024db0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014db8  08014db8  000301ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014db8  08014db8  00024db8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014dbc  08014dbc  00024dbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  08014dc0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000301ec  2**0
                  CONTENTS
 10 .bss          00006694  200001f0  200001f0  000301f0  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20006884  20006884  000301f0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000301ec  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001f9a5  00000000  00000000  0003021c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000401d  00000000  00000000  0004fbc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001bd0  00000000  00000000  00053be0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001a50  00000000  00000000  000557b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002509f  00000000  00000000  00057200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000201b9  00000000  00000000  0007c29f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000de844  00000000  00000000  0009c458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0017ac9c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008fb8  00000000  00000000  0017acec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f0 	.word	0x200001f0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08014318 	.word	0x08014318

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f4 	.word	0x200001f4
 80001cc:	08014318 	.word	0x08014318

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b974 	b.w	8000f88 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468e      	mov	lr, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14d      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4694      	mov	ip, r2
 8000cca:	d969      	bls.n	8000da0 <__udivmoddi4+0xe8>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b152      	cbz	r2, 8000ce8 <__udivmoddi4+0x30>
 8000cd2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cd6:	f1c2 0120 	rsb	r1, r2, #32
 8000cda:	fa20 f101 	lsr.w	r1, r0, r1
 8000cde:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ce6:	4094      	lsls	r4, r2
 8000ce8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cec:	0c21      	lsrs	r1, r4, #16
 8000cee:	fbbe f6f8 	udiv	r6, lr, r8
 8000cf2:	fa1f f78c 	uxth.w	r7, ip
 8000cf6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cfa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cfe:	fb06 f107 	mul.w	r1, r6, r7
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d0e:	f080 811f 	bcs.w	8000f50 <__udivmoddi4+0x298>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 811c 	bls.w	8000f50 <__udivmoddi4+0x298>
 8000d18:	3e02      	subs	r6, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a5b      	subs	r3, r3, r1
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d24:	fb08 3310 	mls	r3, r8, r0, r3
 8000d28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d2c:	fb00 f707 	mul.w	r7, r0, r7
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	d90a      	bls.n	8000d4a <__udivmoddi4+0x92>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3c:	f080 810a 	bcs.w	8000f54 <__udivmoddi4+0x29c>
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	f240 8107 	bls.w	8000f54 <__udivmoddi4+0x29c>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4e:	1be4      	subs	r4, r4, r7
 8000d50:	2600      	movs	r6, #0
 8000d52:	b11d      	cbz	r5, 8000d5c <__udivmoddi4+0xa4>
 8000d54:	40d4      	lsrs	r4, r2
 8000d56:	2300      	movs	r3, #0
 8000d58:	e9c5 4300 	strd	r4, r3, [r5]
 8000d5c:	4631      	mov	r1, r6
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d909      	bls.n	8000d7a <__udivmoddi4+0xc2>
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	f000 80ef 	beq.w	8000f4a <__udivmoddi4+0x292>
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d72:	4630      	mov	r0, r6
 8000d74:	4631      	mov	r1, r6
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	fab3 f683 	clz	r6, r3
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	d14a      	bne.n	8000e18 <__udivmoddi4+0x160>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0xd4>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 80f9 	bhi.w	8000f7e <__udivmoddi4+0x2c6>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	469e      	mov	lr, r3
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d0e0      	beq.n	8000d5c <__udivmoddi4+0xa4>
 8000d9a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d9e:	e7dd      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000da0:	b902      	cbnz	r2, 8000da4 <__udivmoddi4+0xec>
 8000da2:	deff      	udf	#255	; 0xff
 8000da4:	fab2 f282 	clz	r2, r2
 8000da8:	2a00      	cmp	r2, #0
 8000daa:	f040 8092 	bne.w	8000ed2 <__udivmoddi4+0x21a>
 8000dae:	eba1 010c 	sub.w	r1, r1, ip
 8000db2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db6:	fa1f fe8c 	uxth.w	lr, ip
 8000dba:	2601      	movs	r6, #1
 8000dbc:	0c20      	lsrs	r0, r4, #16
 8000dbe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dc2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dc6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dca:	fb0e f003 	mul.w	r0, lr, r3
 8000dce:	4288      	cmp	r0, r1
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x12c>
 8000dd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x12a>
 8000ddc:	4288      	cmp	r0, r1
 8000dde:	f200 80cb 	bhi.w	8000f78 <__udivmoddi4+0x2c0>
 8000de2:	4643      	mov	r3, r8
 8000de4:	1a09      	subs	r1, r1, r0
 8000de6:	b2a4      	uxth	r4, r4
 8000de8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dec:	fb07 1110 	mls	r1, r7, r0, r1
 8000df0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000df4:	fb0e fe00 	mul.w	lr, lr, r0
 8000df8:	45a6      	cmp	lr, r4
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x156>
 8000dfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000e00:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e04:	d202      	bcs.n	8000e0c <__udivmoddi4+0x154>
 8000e06:	45a6      	cmp	lr, r4
 8000e08:	f200 80bb 	bhi.w	8000f82 <__udivmoddi4+0x2ca>
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	eba4 040e 	sub.w	r4, r4, lr
 8000e12:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e16:	e79c      	b.n	8000d52 <__udivmoddi4+0x9a>
 8000e18:	f1c6 0720 	rsb	r7, r6, #32
 8000e1c:	40b3      	lsls	r3, r6
 8000e1e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e22:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e26:	fa20 f407 	lsr.w	r4, r0, r7
 8000e2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	40f9      	lsrs	r1, r7
 8000e32:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e36:	fa00 f306 	lsl.w	r3, r0, r6
 8000e3a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e3e:	0c20      	lsrs	r0, r4, #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fb09 1118 	mls	r1, r9, r8, r1
 8000e48:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e4c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e50:	4288      	cmp	r0, r1
 8000e52:	fa02 f206 	lsl.w	r2, r2, r6
 8000e56:	d90b      	bls.n	8000e70 <__udivmoddi4+0x1b8>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e60:	f080 8088 	bcs.w	8000f74 <__udivmoddi4+0x2bc>
 8000e64:	4288      	cmp	r0, r1
 8000e66:	f240 8085 	bls.w	8000f74 <__udivmoddi4+0x2bc>
 8000e6a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e78:	fb09 1110 	mls	r1, r9, r0, r1
 8000e7c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e80:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e84:	458e      	cmp	lr, r1
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x1e2>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e90:	d26c      	bcs.n	8000f6c <__udivmoddi4+0x2b4>
 8000e92:	458e      	cmp	lr, r1
 8000e94:	d96a      	bls.n	8000f6c <__udivmoddi4+0x2b4>
 8000e96:	3802      	subs	r0, #2
 8000e98:	4461      	add	r1, ip
 8000e9a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e9e:	fba0 9402 	umull	r9, r4, r0, r2
 8000ea2:	eba1 010e 	sub.w	r1, r1, lr
 8000ea6:	42a1      	cmp	r1, r4
 8000ea8:	46c8      	mov	r8, r9
 8000eaa:	46a6      	mov	lr, r4
 8000eac:	d356      	bcc.n	8000f5c <__udivmoddi4+0x2a4>
 8000eae:	d053      	beq.n	8000f58 <__udivmoddi4+0x2a0>
 8000eb0:	b15d      	cbz	r5, 8000eca <__udivmoddi4+0x212>
 8000eb2:	ebb3 0208 	subs.w	r2, r3, r8
 8000eb6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eba:	fa01 f707 	lsl.w	r7, r1, r7
 8000ebe:	fa22 f306 	lsr.w	r3, r2, r6
 8000ec2:	40f1      	lsrs	r1, r6
 8000ec4:	431f      	orrs	r7, r3
 8000ec6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eca:	2600      	movs	r6, #0
 8000ecc:	4631      	mov	r1, r6
 8000ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed2:	f1c2 0320 	rsb	r3, r2, #32
 8000ed6:	40d8      	lsrs	r0, r3
 8000ed8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000edc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ee0:	4091      	lsls	r1, r2
 8000ee2:	4301      	orrs	r1, r0
 8000ee4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee8:	fa1f fe8c 	uxth.w	lr, ip
 8000eec:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ef0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ef4:	0c0b      	lsrs	r3, r1, #16
 8000ef6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000efa:	fb00 f60e 	mul.w	r6, r0, lr
 8000efe:	429e      	cmp	r6, r3
 8000f00:	fa04 f402 	lsl.w	r4, r4, r2
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x260>
 8000f06:	eb1c 0303 	adds.w	r3, ip, r3
 8000f0a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f0e:	d22f      	bcs.n	8000f70 <__udivmoddi4+0x2b8>
 8000f10:	429e      	cmp	r6, r3
 8000f12:	d92d      	bls.n	8000f70 <__udivmoddi4+0x2b8>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4463      	add	r3, ip
 8000f18:	1b9b      	subs	r3, r3, r6
 8000f1a:	b289      	uxth	r1, r1
 8000f1c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f20:	fb07 3316 	mls	r3, r7, r6, r3
 8000f24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f28:	fb06 f30e 	mul.w	r3, r6, lr
 8000f2c:	428b      	cmp	r3, r1
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x28a>
 8000f30:	eb1c 0101 	adds.w	r1, ip, r1
 8000f34:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f38:	d216      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d914      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3e:	3e02      	subs	r6, #2
 8000f40:	4461      	add	r1, ip
 8000f42:	1ac9      	subs	r1, r1, r3
 8000f44:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f48:	e738      	b.n	8000dbc <__udivmoddi4+0x104>
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e705      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e3      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6f8      	b.n	8000d4a <__udivmoddi4+0x92>
 8000f58:	454b      	cmp	r3, r9
 8000f5a:	d2a9      	bcs.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f5c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f60:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7a3      	b.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f68:	4646      	mov	r6, r8
 8000f6a:	e7ea      	b.n	8000f42 <__udivmoddi4+0x28a>
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	e794      	b.n	8000e9a <__udivmoddi4+0x1e2>
 8000f70:	4640      	mov	r0, r8
 8000f72:	e7d1      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f74:	46d0      	mov	r8, sl
 8000f76:	e77b      	b.n	8000e70 <__udivmoddi4+0x1b8>
 8000f78:	3b02      	subs	r3, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	e732      	b.n	8000de4 <__udivmoddi4+0x12c>
 8000f7e:	4630      	mov	r0, r6
 8000f80:	e709      	b.n	8000d96 <__udivmoddi4+0xde>
 8000f82:	4464      	add	r4, ip
 8000f84:	3802      	subs	r0, #2
 8000f86:	e742      	b.n	8000e0e <__udivmoddi4+0x156>

08000f88 <__aeabi_idiv0>:
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop

08000f8c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b085      	sub	sp, #20
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	60f8      	str	r0, [r7, #12]
 8000f94:	60b9      	str	r1, [r7, #8]
 8000f96:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	4a07      	ldr	r2, [pc, #28]	; (8000fb8 <vApplicationGetIdleTaskMemory+0x2c>)
 8000f9c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000f9e:	68bb      	ldr	r3, [r7, #8]
 8000fa0:	4a06      	ldr	r2, [pc, #24]	; (8000fbc <vApplicationGetIdleTaskMemory+0x30>)
 8000fa2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	2280      	movs	r2, #128	; 0x80
 8000fa8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000faa:	bf00      	nop
 8000fac:	3714      	adds	r7, #20
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	2000020c 	.word	0x2000020c
 8000fbc:	20000260 	.word	0x20000260

08000fc0 <FusionRadiansToDegrees>:
/**
 * @brief Converts radians to degrees.
 * @param radians Radians.
 * @return Degrees.
 */
static inline float FusionRadiansToDegrees(const float radians) {
 8000fc0:	b480      	push	{r7}
 8000fc2:	b083      	sub	sp, #12
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	ed87 0a01 	vstr	s0, [r7, #4]
    return radians * (180.0f / (float) M_PI);
 8000fca:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fce:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8000fe4 <FusionRadiansToDegrees+0x24>
 8000fd2:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8000fd6:	eeb0 0a67 	vmov.f32	s0, s15
 8000fda:	370c      	adds	r7, #12
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr
 8000fe4:	42652ee0 	.word	0x42652ee0

08000fe8 <FusionAsin>:
/**
 * @brief Returns the arc sine of the value.
 * @param value Value.
 * @return Arc sine of the value.
 */
static inline float FusionAsin(const float value) {
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	ed87 0a01 	vstr	s0, [r7, #4]
    if (value <= -1.0f) {
 8000ff2:	edd7 7a01 	vldr	s15, [r7, #4]
 8000ff6:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8000ffa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000ffe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001002:	d802      	bhi.n	800100a <FusionAsin+0x22>
        return (float) M_PI / -2.0f;
 8001004:	eddf 7a0c 	vldr	s15, [pc, #48]	; 8001038 <FusionAsin+0x50>
 8001008:	e011      	b.n	800102e <FusionAsin+0x46>
    }
    if (value >= 1.0f) {
 800100a:	edd7 7a01 	vldr	s15, [r7, #4]
 800100e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001012:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001016:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800101a:	db02      	blt.n	8001022 <FusionAsin+0x3a>
        return (float) M_PI / 2.0f;
 800101c:	eddf 7a07 	vldr	s15, [pc, #28]	; 800103c <FusionAsin+0x54>
 8001020:	e005      	b.n	800102e <FusionAsin+0x46>
    }
    return asinf(value);
 8001022:	ed97 0a01 	vldr	s0, [r7, #4]
 8001026:	f010 ffcf 	bl	8011fc8 <asinf>
 800102a:	eef0 7a40 	vmov.f32	s15, s0
}
 800102e:	eeb0 0a67 	vmov.f32	s0, s15
 8001032:	3708      	adds	r7, #8
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	bfc90fdb 	.word	0xbfc90fdb
 800103c:	3fc90fdb 	.word	0x3fc90fdb

08001040 <FusionVectorSubtract>:
 * @brief Returns vector B subtracted from vector A.
 * @param vectorA Vector A.
 * @param vectorB Vector B.
 * @return Vector B subtracted from vector A.
 */
static inline FusionVector FusionVectorSubtract(const FusionVector vectorA, const FusionVector vectorB) {
 8001040:	b480      	push	{r7}
 8001042:	b091      	sub	sp, #68	; 0x44
 8001044:	af00      	add	r7, sp, #0
 8001046:	eeb0 5a40 	vmov.f32	s10, s0
 800104a:	eef0 5a60 	vmov.f32	s11, s1
 800104e:	eeb0 6a41 	vmov.f32	s12, s2
 8001052:	eef0 6a61 	vmov.f32	s13, s3
 8001056:	eeb0 7a42 	vmov.f32	s14, s4
 800105a:	eef0 7a62 	vmov.f32	s15, s5
 800105e:	ed87 5a07 	vstr	s10, [r7, #28]
 8001062:	edc7 5a08 	vstr	s11, [r7, #32]
 8001066:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 800106a:	edc7 6a04 	vstr	s13, [r7, #16]
 800106e:	ed87 7a05 	vstr	s14, [r7, #20]
 8001072:	edc7 7a06 	vstr	s15, [r7, #24]
    const FusionVector result = {.axis = {
            .x = vectorA.axis.x - vectorB.axis.x,
 8001076:	ed97 7a07 	vldr	s14, [r7, #28]
 800107a:	edd7 7a04 	vldr	s15, [r7, #16]
 800107e:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8001082:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = vectorA.axis.y - vectorB.axis.y,
 8001086:	ed97 7a08 	vldr	s14, [r7, #32]
 800108a:	edd7 7a05 	vldr	s15, [r7, #20]
 800108e:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8001092:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = vectorA.axis.z - vectorB.axis.z,
 8001096:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800109a:	edd7 7a06 	vldr	s15, [r7, #24]
 800109e:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80010a2:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    }};
    return result;
 80010a6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80010aa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80010ae:	ca07      	ldmia	r2, {r0, r1, r2}
 80010b0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80010b4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80010b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80010b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80010ba:	ee06 1a90 	vmov	s13, r1
 80010be:	ee07 2a10 	vmov	s14, r2
 80010c2:	ee07 3a90 	vmov	s15, r3
}
 80010c6:	eeb0 0a66 	vmov.f32	s0, s13
 80010ca:	eef0 0a47 	vmov.f32	s1, s14
 80010ce:	eeb0 1a67 	vmov.f32	s2, s15
 80010d2:	3744      	adds	r7, #68	; 0x44
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr

080010dc <FusionVectorMultiplyScalar>:
 * @brief Returns the multiplication of a vector by a scalar.
 * @param vector Vector.
 * @param scalar Scalar.
 * @return Multiplication of a vector by a scalar.
 */
static inline FusionVector FusionVectorMultiplyScalar(const FusionVector vector, const float scalar) {
 80010dc:	b480      	push	{r7}
 80010de:	b08f      	sub	sp, #60	; 0x3c
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	eef0 6a40 	vmov.f32	s13, s0
 80010e6:	eeb0 7a60 	vmov.f32	s14, s1
 80010ea:	eef0 7a41 	vmov.f32	s15, s2
 80010ee:	edc7 1a04 	vstr	s3, [r7, #16]
 80010f2:	edc7 6a05 	vstr	s13, [r7, #20]
 80010f6:	ed87 7a06 	vstr	s14, [r7, #24]
 80010fa:	edc7 7a07 	vstr	s15, [r7, #28]
    const FusionVector result = {.axis = {
            .x = vector.axis.x * scalar,
 80010fe:	ed97 7a05 	vldr	s14, [r7, #20]
 8001102:	edd7 7a04 	vldr	s15, [r7, #16]
 8001106:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800110a:	edc7 7a08 	vstr	s15, [r7, #32]
            .y = vector.axis.y * scalar,
 800110e:	ed97 7a06 	vldr	s14, [r7, #24]
 8001112:	edd7 7a04 	vldr	s15, [r7, #16]
 8001116:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800111a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            .z = vector.axis.z * scalar,
 800111e:	ed97 7a07 	vldr	s14, [r7, #28]
 8001122:	edd7 7a04 	vldr	s15, [r7, #16]
 8001126:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800112a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    }};
    return result;
 800112e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001132:	f107 0220 	add.w	r2, r7, #32
 8001136:	ca07      	ldmia	r2, {r0, r1, r2}
 8001138:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800113c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800113e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001140:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001142:	ee06 1a90 	vmov	s13, r1
 8001146:	ee07 2a10 	vmov	s14, r2
 800114a:	ee07 3a90 	vmov	s15, r3
}
 800114e:	eeb0 0a66 	vmov.f32	s0, s13
 8001152:	eef0 0a47 	vmov.f32	s1, s14
 8001156:	eeb0 1a67 	vmov.f32	s2, s15
 800115a:	373c      	adds	r7, #60	; 0x3c
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr

08001164 <FusionMatrixMultiplyVector>:
 * @brief Returns the multiplication of a matrix with a vector.
 * @param matrix Matrix.
 * @param vector Vector.
 * @return Multiplication of a matrix with a vector.
 */
static inline FusionVector FusionMatrixMultiplyVector(const FusionMatrix matrix, const FusionVector vector) {
 8001164:	b084      	sub	sp, #16
 8001166:	b480      	push	{r7}
 8001168:	b08f      	sub	sp, #60	; 0x3c
 800116a:	af00      	add	r7, sp, #0
 800116c:	f107 0c40 	add.w	ip, r7, #64	; 0x40
 8001170:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 8001174:	eef0 6a40 	vmov.f32	s13, s0
 8001178:	eeb0 7a60 	vmov.f32	s14, s1
 800117c:	eef0 7a41 	vmov.f32	s15, s2
 8001180:	edc7 6a05 	vstr	s13, [r7, #20]
 8001184:	ed87 7a06 	vstr	s14, [r7, #24]
 8001188:	edc7 7a07 	vstr	s15, [r7, #28]
#define R matrix.element
    const FusionVector result = {.axis = {
            .x = R.xx * vector.axis.x + R.xy * vector.axis.y + R.xz * vector.axis.z,
 800118c:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001190:	edd7 7a05 	vldr	s15, [r7, #20]
 8001194:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001198:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 800119c:	edd7 7a06 	vldr	s15, [r7, #24]
 80011a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011a4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80011a8:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 80011ac:	edd7 7a07 	vldr	s15, [r7, #28]
 80011b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011b4:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80011b8:	edc7 7a08 	vstr	s15, [r7, #32]
            .y = R.yx * vector.axis.x + R.yy * vector.axis.y + R.yz * vector.axis.z,
 80011bc:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80011c0:	edd7 7a05 	vldr	s15, [r7, #20]
 80011c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011c8:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 80011cc:	edd7 7a06 	vldr	s15, [r7, #24]
 80011d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011d4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80011d8:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 80011dc:	edd7 7a07 	vldr	s15, [r7, #28]
 80011e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011e4:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80011e8:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            .z = R.zx * vector.axis.x + R.zy * vector.axis.y + R.zz * vector.axis.z,
 80011ec:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80011f0:	edd7 7a05 	vldr	s15, [r7, #20]
 80011f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011f8:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 80011fc:	edd7 7a06 	vldr	s15, [r7, #24]
 8001200:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001204:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001208:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 800120c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001210:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001214:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8001218:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    }};
    return result;
 800121c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001220:	f107 0220 	add.w	r2, r7, #32
 8001224:	ca07      	ldmia	r2, {r0, r1, r2}
 8001226:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800122a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800122c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800122e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001230:	ee06 1a90 	vmov	s13, r1
 8001234:	ee07 2a10 	vmov	s14, r2
 8001238:	ee07 3a90 	vmov	s15, r3
#undef R
}
 800123c:	eeb0 0a66 	vmov.f32	s0, s13
 8001240:	eef0 0a47 	vmov.f32	s1, s14
 8001244:	eeb0 1a67 	vmov.f32	s2, s15
 8001248:	373c      	adds	r7, #60	; 0x3c
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	b004      	add	sp, #16
 8001252:	4770      	bx	lr

08001254 <FusionQuaternionToMatrix>:
/**
 * @brief Converts a quaternion to a rotation matrix.
 * @param quaternion Quaternion.
 * @return Rotation matrix.
 */
static inline FusionMatrix FusionQuaternionToMatrix(const FusionQuaternion quaternion) {
 8001254:	b4b0      	push	{r4, r5, r7}
 8001256:	b097      	sub	sp, #92	; 0x5c
 8001258:	af00      	add	r7, sp, #0
 800125a:	6178      	str	r0, [r7, #20]
 800125c:	eeb0 6a40 	vmov.f32	s12, s0
 8001260:	eef0 6a60 	vmov.f32	s13, s1
 8001264:	eeb0 7a41 	vmov.f32	s14, s2
 8001268:	eef0 7a61 	vmov.f32	s15, s3
 800126c:	ed87 6a01 	vstr	s12, [r7, #4]
 8001270:	edc7 6a02 	vstr	s13, [r7, #8]
 8001274:	ed87 7a03 	vstr	s14, [r7, #12]
 8001278:	edc7 7a04 	vstr	s15, [r7, #16]
#define Q quaternion.element
    const float qwqw = Q.w * Q.w; // calculate common terms to avoid repeated operations
 800127c:	ed97 7a01 	vldr	s14, [r7, #4]
 8001280:	edd7 7a01 	vldr	s15, [r7, #4]
 8001284:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001288:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    const float qwqx = Q.w * Q.x;
 800128c:	ed97 7a01 	vldr	s14, [r7, #4]
 8001290:	edd7 7a02 	vldr	s15, [r7, #8]
 8001294:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001298:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    const float qwqy = Q.w * Q.y;
 800129c:	ed97 7a01 	vldr	s14, [r7, #4]
 80012a0:	edd7 7a03 	vldr	s15, [r7, #12]
 80012a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012a8:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    const float qwqz = Q.w * Q.z;
 80012ac:	ed97 7a01 	vldr	s14, [r7, #4]
 80012b0:	edd7 7a04 	vldr	s15, [r7, #16]
 80012b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012b8:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    const float qxqy = Q.x * Q.y;
 80012bc:	ed97 7a02 	vldr	s14, [r7, #8]
 80012c0:	edd7 7a03 	vldr	s15, [r7, #12]
 80012c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012c8:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    const float qxqz = Q.x * Q.z;
 80012cc:	ed97 7a02 	vldr	s14, [r7, #8]
 80012d0:	edd7 7a04 	vldr	s15, [r7, #16]
 80012d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012d8:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    const float qyqz = Q.y * Q.z;
 80012dc:	ed97 7a03 	vldr	s14, [r7, #12]
 80012e0:	edd7 7a04 	vldr	s15, [r7, #16]
 80012e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012e8:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    const FusionMatrix matrix = {.element = {
            .xx = 2.0f * (qwqw - 0.5f + Q.x * Q.x),
 80012ec:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80012f0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80012f4:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80012f8:	edd7 6a02 	vldr	s13, [r7, #8]
 80012fc:	edd7 7a02 	vldr	s15, [r7, #8]
 8001300:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001304:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001308:	ee77 7aa7 	vadd.f32	s15, s15, s15
    const FusionMatrix matrix = {.element = {
 800130c:	edc7 7a06 	vstr	s15, [r7, #24]
            .xy = 2.0f * (qxqy - qwqz),
 8001310:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8001314:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001318:	ee77 7a67 	vsub.f32	s15, s14, s15
 800131c:	ee77 7aa7 	vadd.f32	s15, s15, s15
    const FusionMatrix matrix = {.element = {
 8001320:	edc7 7a07 	vstr	s15, [r7, #28]
            .xz = 2.0f * (qxqz + qwqy),
 8001324:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001328:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800132c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001330:	ee77 7aa7 	vadd.f32	s15, s15, s15
    const FusionMatrix matrix = {.element = {
 8001334:	edc7 7a08 	vstr	s15, [r7, #32]
            .yx = 2.0f * (qxqy + qwqz),
 8001338:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 800133c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001340:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001344:	ee77 7aa7 	vadd.f32	s15, s15, s15
    const FusionMatrix matrix = {.element = {
 8001348:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            .yy = 2.0f * (qwqw - 0.5f + Q.y * Q.y),
 800134c:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001350:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001354:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001358:	edd7 6a03 	vldr	s13, [r7, #12]
 800135c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001360:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001364:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001368:	ee77 7aa7 	vadd.f32	s15, s15, s15
    const FusionMatrix matrix = {.element = {
 800136c:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .yz = 2.0f * (qyqz - qwqx),
 8001370:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8001374:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8001378:	ee77 7a67 	vsub.f32	s15, s14, s15
 800137c:	ee77 7aa7 	vadd.f32	s15, s15, s15
    const FusionMatrix matrix = {.element = {
 8001380:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .zx = 2.0f * (qxqz - qwqy),
 8001384:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001388:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800138c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001390:	ee77 7aa7 	vadd.f32	s15, s15, s15
    const FusionMatrix matrix = {.element = {
 8001394:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
            .zy = 2.0f * (qyqz + qwqx),
 8001398:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800139c:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80013a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013a4:	ee77 7aa7 	vadd.f32	s15, s15, s15
    const FusionMatrix matrix = {.element = {
 80013a8:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
            .zz = 2.0f * (qwqw - 0.5f + Q.z * Q.z),
 80013ac:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80013b0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80013b4:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80013b8:	edd7 6a04 	vldr	s13, [r7, #16]
 80013bc:	edd7 7a04 	vldr	s15, [r7, #16]
 80013c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013c8:	ee77 7aa7 	vadd.f32	s15, s15, s15
    const FusionMatrix matrix = {.element = {
 80013cc:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
    }};
    return matrix;
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	461d      	mov	r5, r3
 80013d4:	f107 0418 	add.w	r4, r7, #24
 80013d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013e0:	6823      	ldr	r3, [r4, #0]
 80013e2:	602b      	str	r3, [r5, #0]
#undef Q
}
 80013e4:	6978      	ldr	r0, [r7, #20]
 80013e6:	375c      	adds	r7, #92	; 0x5c
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bcb0      	pop	{r4, r5, r7}
 80013ec:	4770      	bx	lr

080013ee <FusionQuaternionToEuler>:
/**
 * @brief Converts a quaternion to ZYX Euler angles in degrees.
 * @param quaternion Quaternion.
 * @return Euler angles in degrees.
 */
static inline FusionEuler FusionQuaternionToEuler(const FusionQuaternion quaternion) {
 80013ee:	b580      	push	{r7, lr}
 80013f0:	b090      	sub	sp, #64	; 0x40
 80013f2:	af00      	add	r7, sp, #0
 80013f4:	eeb0 6a40 	vmov.f32	s12, s0
 80013f8:	eef0 6a60 	vmov.f32	s13, s1
 80013fc:	eeb0 7a41 	vmov.f32	s14, s2
 8001400:	eef0 7a61 	vmov.f32	s15, s3
 8001404:	ed87 6a04 	vstr	s12, [r7, #16]
 8001408:	edc7 6a05 	vstr	s13, [r7, #20]
 800140c:	ed87 7a06 	vstr	s14, [r7, #24]
 8001410:	edc7 7a07 	vstr	s15, [r7, #28]
#define Q quaternion.element
    const float halfMinusQySquared = 0.5f - Q.y * Q.y; // calculate common terms to avoid repeated operations
 8001414:	ed97 7a06 	vldr	s14, [r7, #24]
 8001418:	edd7 7a06 	vldr	s15, [r7, #24]
 800141c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001420:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001424:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001428:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    const FusionEuler euler = {.angle = {
            .roll = FusionRadiansToDegrees(atan2f(Q.w * Q.x + Q.y * Q.z, halfMinusQySquared - Q.x * Q.x)),
 800142c:	ed97 7a04 	vldr	s14, [r7, #16]
 8001430:	edd7 7a05 	vldr	s15, [r7, #20]
 8001434:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001438:	edd7 6a06 	vldr	s13, [r7, #24]
 800143c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001440:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001444:	ee77 6a27 	vadd.f32	s13, s14, s15
 8001448:	ed97 7a05 	vldr	s14, [r7, #20]
 800144c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001450:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001454:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8001458:	ee77 7a67 	vsub.f32	s15, s14, s15
 800145c:	eef0 0a67 	vmov.f32	s1, s15
 8001460:	eeb0 0a66 	vmov.f32	s0, s13
 8001464:	f010 fddc 	bl	8012020 <atan2f>
 8001468:	eef0 7a40 	vmov.f32	s15, s0
 800146c:	eeb0 0a67 	vmov.f32	s0, s15
 8001470:	f7ff fda6 	bl	8000fc0 <FusionRadiansToDegrees>
 8001474:	eef0 7a40 	vmov.f32	s15, s0
    const FusionEuler euler = {.angle = {
 8001478:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            .pitch = FusionRadiansToDegrees(FusionAsin(2.0f * (Q.w * Q.y - Q.z * Q.x))),
 800147c:	ed97 7a04 	vldr	s14, [r7, #16]
 8001480:	edd7 7a06 	vldr	s15, [r7, #24]
 8001484:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001488:	edd7 6a07 	vldr	s13, [r7, #28]
 800148c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001490:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001494:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001498:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800149c:	eeb0 0a67 	vmov.f32	s0, s15
 80014a0:	f7ff fda2 	bl	8000fe8 <FusionAsin>
 80014a4:	eef0 7a40 	vmov.f32	s15, s0
 80014a8:	eeb0 0a67 	vmov.f32	s0, s15
 80014ac:	f7ff fd88 	bl	8000fc0 <FusionRadiansToDegrees>
 80014b0:	eef0 7a40 	vmov.f32	s15, s0
    const FusionEuler euler = {.angle = {
 80014b4:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .yaw = FusionRadiansToDegrees(atan2f(Q.w * Q.z + Q.x * Q.y, halfMinusQySquared - Q.z * Q.z)),
 80014b8:	ed97 7a04 	vldr	s14, [r7, #16]
 80014bc:	edd7 7a07 	vldr	s15, [r7, #28]
 80014c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014c4:	edd7 6a05 	vldr	s13, [r7, #20]
 80014c8:	edd7 7a06 	vldr	s15, [r7, #24]
 80014cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014d0:	ee77 6a27 	vadd.f32	s13, s14, s15
 80014d4:	ed97 7a07 	vldr	s14, [r7, #28]
 80014d8:	edd7 7a07 	vldr	s15, [r7, #28]
 80014dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014e0:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80014e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014e8:	eef0 0a67 	vmov.f32	s1, s15
 80014ec:	eeb0 0a66 	vmov.f32	s0, s13
 80014f0:	f010 fd96 	bl	8012020 <atan2f>
 80014f4:	eef0 7a40 	vmov.f32	s15, s0
 80014f8:	eeb0 0a67 	vmov.f32	s0, s15
 80014fc:	f7ff fd60 	bl	8000fc0 <FusionRadiansToDegrees>
 8001500:	eef0 7a40 	vmov.f32	s15, s0
    const FusionEuler euler = {.angle = {
 8001504:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    }};
    return euler;
 8001508:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800150c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001510:	ca07      	ldmia	r2, {r0, r1, r2}
 8001512:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001516:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001518:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800151a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800151c:	ee06 1a90 	vmov	s13, r1
 8001520:	ee07 2a10 	vmov	s14, r2
 8001524:	ee07 3a90 	vmov	s15, r3
#undef Q
}
 8001528:	eeb0 0a66 	vmov.f32	s0, s13
 800152c:	eef0 0a47 	vmov.f32	s1, s14
 8001530:	eeb0 1a67 	vmov.f32	s2, s15
 8001534:	3740      	adds	r7, #64	; 0x40
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
	...

0800153c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800153c:	b5b0      	push	{r4, r5, r7, lr}
 800153e:	b096      	sub	sp, #88	; 0x58
 8001540:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001542:	f003 ffb9 	bl	80054b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001546:	f000 f89f 	bl	8001688 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800154a:	f000 fd83 	bl	8002054 <MX_GPIO_Init>
  MX_DMA_Init();
 800154e:	f000 fd61 	bl	8002014 <MX_DMA_Init>
  MX_TIM2_Init();
 8001552:	f000 fab9 	bl	8001ac8 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8001556:	f000 fcdf 	bl	8001f18 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800155a:	f000 f9f5 	bl	8001948 <MX_I2C1_Init>
  MX_I2C2_Init();
 800155e:	f000 fa21 	bl	80019a4 <MX_I2C2_Init>
  MX_I2C3_Init();
 8001562:	f000 fa4d 	bl	8001a00 <MX_I2C3_Init>
  MX_TIM3_Init();
 8001566:	f000 fb1f 	bl	8001ba8 <MX_TIM3_Init>
  MX_TIM4_Init();
 800156a:	f000 fbcb 	bl	8001d04 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 800156e:	f000 fca9 	bl	8001ec4 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8001572:	f000 fcfb 	bl	8001f6c <MX_USART3_UART_Init>
  MX_SPI2_Init();
 8001576:	f000 fa71 	bl	8001a5c <MX_SPI2_Init>
  MX_USART6_UART_Init();
 800157a:	f000 fd21 	bl	8001fc0 <MX_USART6_UART_Init>
  MX_ADC1_Init();
 800157e:	f000 f8ed 	bl	800175c <MX_ADC1_Init>
  MX_ADC2_Init();
 8001582:	f000 f93d 	bl	8001800 <MX_ADC2_Init>
  MX_ADC3_Init();
 8001586:	f000 f98d 	bl	80018a4 <MX_ADC3_Init>
  MX_TIM6_Init();
 800158a:	f000 fc2f 	bl	8001dec <MX_TIM6_Init>
  MX_TIM7_Init();
 800158e:	f000 fc63 	bl	8001e58 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */




  __HAL_SPI_ENABLE(&hspi2);
 8001592:	4b33      	ldr	r3, [pc, #204]	; (8001660 <main+0x124>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	4b31      	ldr	r3, [pc, #196]	; (8001660 <main+0x124>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80015a0:	601a      	str	r2, [r3, #0]
  HAL_TIM_PWM_Start  ( &htim3,  TIM_CHANNEL_1  );
 80015a2:	2100      	movs	r1, #0
 80015a4:	482f      	ldr	r0, [pc, #188]	; (8001664 <main+0x128>)
 80015a6:	f007 fb2d 	bl	8008c04 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start  ( &htim3,  TIM_CHANNEL_2  );
 80015aa:	2104      	movs	r1, #4
 80015ac:	482d      	ldr	r0, [pc, #180]	; (8001664 <main+0x128>)
 80015ae:	f007 fb29 	bl	8008c04 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start  ( &htim3,  TIM_CHANNEL_3  );
 80015b2:	2108      	movs	r1, #8
 80015b4:	482b      	ldr	r0, [pc, #172]	; (8001664 <main+0x128>)
 80015b6:	f007 fb25 	bl	8008c04 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start  ( &htim3,  TIM_CHANNEL_4  );
 80015ba:	210c      	movs	r1, #12
 80015bc:	4829      	ldr	r0, [pc, #164]	; (8001664 <main+0x128>)
 80015be:	f007 fb21 	bl	8008c04 <HAL_TIM_PWM_Start>
  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  telemetria_Queue = xQueueCreate( 19, 19*sizeof( float ) );
 80015c2:	2200      	movs	r2, #0
 80015c4:	214c      	movs	r1, #76	; 0x4c
 80015c6:	2013      	movs	r0, #19
 80015c8:	f00b fdba 	bl	800d140 <xQueueGenericCreate>
 80015cc:	4603      	mov	r3, r0
 80015ce:	4a26      	ldr	r2, [pc, #152]	; (8001668 <main+0x12c>)
 80015d0:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityBelowNormal, 0, 500);
 80015d2:	4b26      	ldr	r3, [pc, #152]	; (800166c <main+0x130>)
 80015d4:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80015d8:	461d      	mov	r5, r3
 80015da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015de:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80015e2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80015e6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80015ea:	2100      	movs	r1, #0
 80015ec:	4618      	mov	r0, r3
 80015ee:	f00b fc2b 	bl	800ce48 <osThreadCreate>
 80015f2:	4603      	mov	r3, r0
 80015f4:	4a1e      	ldr	r2, [pc, #120]	; (8001670 <main+0x134>)
 80015f6:	6013      	str	r3, [r2, #0]
  vTaskSuspend( defaultTaskHandle );
 80015f8:	4b1d      	ldr	r3, [pc, #116]	; (8001670 <main+0x134>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4618      	mov	r0, r3
 80015fe:	f00c faaf 	bl	800db60 <vTaskSuspend>

  /* definition and creation of Data_Reading */
  osThreadDef(Data_Reading, Start_Data_Reading, osPriorityNormal, 0, 600);
 8001602:	4b1c      	ldr	r3, [pc, #112]	; (8001674 <main+0x138>)
 8001604:	f107 0420 	add.w	r4, r7, #32
 8001608:	461d      	mov	r5, r3
 800160a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800160c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800160e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001612:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Data_ReadingHandle = osThreadCreate(osThread(Data_Reading), NULL);
 8001616:	f107 0320 	add.w	r3, r7, #32
 800161a:	2100      	movs	r1, #0
 800161c:	4618      	mov	r0, r3
 800161e:	f00b fc13 	bl	800ce48 <osThreadCreate>
 8001622:	4603      	mov	r3, r0
 8001624:	4a14      	ldr	r2, [pc, #80]	; (8001678 <main+0x13c>)
 8001626:	6013      	str	r3, [r2, #0]

  /* definition and creation of Orientation_cal */
  osThreadDef(Orientation_cal, Start_Orientation, osPriorityBelowNormal, 0, 200);
 8001628:	4b14      	ldr	r3, [pc, #80]	; (800167c <main+0x140>)
 800162a:	1d3c      	adds	r4, r7, #4
 800162c:	461d      	mov	r5, r3
 800162e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001630:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001632:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001636:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Orientation_calHandle = osThreadCreate(osThread(Orientation_cal), NULL);
 800163a:	1d3b      	adds	r3, r7, #4
 800163c:	2100      	movs	r1, #0
 800163e:	4618      	mov	r0, r3
 8001640:	f00b fc02 	bl	800ce48 <osThreadCreate>
 8001644:	4603      	mov	r3, r0
 8001646:	4a0e      	ldr	r2, [pc, #56]	; (8001680 <main+0x144>)
 8001648:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800164a:	f00b fbf6 	bl	800ce3a <osKernelStart>

  while (1)
  {


	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 800164e:	2108      	movs	r1, #8
 8001650:	480c      	ldr	r0, [pc, #48]	; (8001684 <main+0x148>)
 8001652:	f005 f8f2 	bl	800683a <HAL_GPIO_TogglePin>

	  HAL_Delay(3);
 8001656:	2003      	movs	r0, #3
 8001658:	f003 ffa0 	bl	800559c <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 800165c:	e7f7      	b.n	800164e <main+0x112>
 800165e:	bf00      	nop
 8001660:	20000634 	.word	0x20000634
 8001664:	200006d4 	.word	0x200006d4
 8001668:	20002b14 	.word	0x20002b14
 800166c:	0801435c 	.word	0x0801435c
 8001670:	20000964 	.word	0x20000964
 8001674:	08014378 	.word	0x08014378
 8001678:	20000968 	.word	0x20000968
 800167c:	08014394 	.word	0x08014394
 8001680:	2000096c 	.word	0x2000096c
 8001684:	40020400 	.word	0x40020400

08001688 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b094      	sub	sp, #80	; 0x50
 800168c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800168e:	f107 0320 	add.w	r3, r7, #32
 8001692:	2230      	movs	r2, #48	; 0x30
 8001694:	2100      	movs	r1, #0
 8001696:	4618      	mov	r0, r3
 8001698:	f00d fcc0 	bl	800f01c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800169c:	f107 030c 	add.w	r3, r7, #12
 80016a0:	2200      	movs	r2, #0
 80016a2:	601a      	str	r2, [r3, #0]
 80016a4:	605a      	str	r2, [r3, #4]
 80016a6:	609a      	str	r2, [r3, #8]
 80016a8:	60da      	str	r2, [r3, #12]
 80016aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80016ac:	2300      	movs	r3, #0
 80016ae:	60bb      	str	r3, [r7, #8]
 80016b0:	4b28      	ldr	r3, [pc, #160]	; (8001754 <SystemClock_Config+0xcc>)
 80016b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b4:	4a27      	ldr	r2, [pc, #156]	; (8001754 <SystemClock_Config+0xcc>)
 80016b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016ba:	6413      	str	r3, [r2, #64]	; 0x40
 80016bc:	4b25      	ldr	r3, [pc, #148]	; (8001754 <SystemClock_Config+0xcc>)
 80016be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016c4:	60bb      	str	r3, [r7, #8]
 80016c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80016c8:	2300      	movs	r3, #0
 80016ca:	607b      	str	r3, [r7, #4]
 80016cc:	4b22      	ldr	r3, [pc, #136]	; (8001758 <SystemClock_Config+0xd0>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a21      	ldr	r2, [pc, #132]	; (8001758 <SystemClock_Config+0xd0>)
 80016d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016d6:	6013      	str	r3, [r2, #0]
 80016d8:	4b1f      	ldr	r3, [pc, #124]	; (8001758 <SystemClock_Config+0xd0>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016e0:	607b      	str	r3, [r7, #4]
 80016e2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80016e4:	2301      	movs	r3, #1
 80016e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80016e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016ec:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016ee:	2302      	movs	r3, #2
 80016f0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016f2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80016f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80016f8:	2304      	movs	r3, #4
 80016fa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80016fc:	23a8      	movs	r3, #168	; 0xa8
 80016fe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001700:	2302      	movs	r3, #2
 8001702:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001704:	2304      	movs	r3, #4
 8001706:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001708:	f107 0320 	add.w	r3, r7, #32
 800170c:	4618      	mov	r0, r3
 800170e:	f006 f887 	bl	8007820 <HAL_RCC_OscConfig>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d001      	beq.n	800171c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001718:	f002 f928 	bl	800396c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800171c:	230f      	movs	r3, #15
 800171e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001720:	2302      	movs	r3, #2
 8001722:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001724:	2300      	movs	r3, #0
 8001726:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001728:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800172c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800172e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001732:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001734:	f107 030c 	add.w	r3, r7, #12
 8001738:	2105      	movs	r1, #5
 800173a:	4618      	mov	r0, r3
 800173c:	f006 fae8 	bl	8007d10 <HAL_RCC_ClockConfig>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d001      	beq.n	800174a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001746:	f002 f911 	bl	800396c <Error_Handler>
  }
}
 800174a:	bf00      	nop
 800174c:	3750      	adds	r7, #80	; 0x50
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	40023800 	.word	0x40023800
 8001758:	40007000 	.word	0x40007000

0800175c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b084      	sub	sp, #16
 8001760:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001762:	463b      	mov	r3, r7
 8001764:	2200      	movs	r2, #0
 8001766:	601a      	str	r2, [r3, #0]
 8001768:	605a      	str	r2, [r3, #4]
 800176a:	609a      	str	r2, [r3, #8]
 800176c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800176e:	4b21      	ldr	r3, [pc, #132]	; (80017f4 <MX_ADC1_Init+0x98>)
 8001770:	4a21      	ldr	r2, [pc, #132]	; (80017f8 <MX_ADC1_Init+0x9c>)
 8001772:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 8001774:	4b1f      	ldr	r3, [pc, #124]	; (80017f4 <MX_ADC1_Init+0x98>)
 8001776:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800177a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800177c:	4b1d      	ldr	r3, [pc, #116]	; (80017f4 <MX_ADC1_Init+0x98>)
 800177e:	2200      	movs	r2, #0
 8001780:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001782:	4b1c      	ldr	r3, [pc, #112]	; (80017f4 <MX_ADC1_Init+0x98>)
 8001784:	2200      	movs	r2, #0
 8001786:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001788:	4b1a      	ldr	r3, [pc, #104]	; (80017f4 <MX_ADC1_Init+0x98>)
 800178a:	2200      	movs	r2, #0
 800178c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800178e:	4b19      	ldr	r3, [pc, #100]	; (80017f4 <MX_ADC1_Init+0x98>)
 8001790:	2200      	movs	r2, #0
 8001792:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001796:	4b17      	ldr	r3, [pc, #92]	; (80017f4 <MX_ADC1_Init+0x98>)
 8001798:	2200      	movs	r2, #0
 800179a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800179c:	4b15      	ldr	r3, [pc, #84]	; (80017f4 <MX_ADC1_Init+0x98>)
 800179e:	4a17      	ldr	r2, [pc, #92]	; (80017fc <MX_ADC1_Init+0xa0>)
 80017a0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80017a2:	4b14      	ldr	r3, [pc, #80]	; (80017f4 <MX_ADC1_Init+0x98>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80017a8:	4b12      	ldr	r3, [pc, #72]	; (80017f4 <MX_ADC1_Init+0x98>)
 80017aa:	2201      	movs	r2, #1
 80017ac:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80017ae:	4b11      	ldr	r3, [pc, #68]	; (80017f4 <MX_ADC1_Init+0x98>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80017b6:	4b0f      	ldr	r3, [pc, #60]	; (80017f4 <MX_ADC1_Init+0x98>)
 80017b8:	2201      	movs	r2, #1
 80017ba:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80017bc:	480d      	ldr	r0, [pc, #52]	; (80017f4 <MX_ADC1_Init+0x98>)
 80017be:	f003 ff11 	bl	80055e4 <HAL_ADC_Init>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d001      	beq.n	80017cc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80017c8:	f002 f8d0 	bl	800396c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80017cc:	2305      	movs	r3, #5
 80017ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80017d0:	2301      	movs	r3, #1
 80017d2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80017d4:	2300      	movs	r3, #0
 80017d6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017d8:	463b      	mov	r3, r7
 80017da:	4619      	mov	r1, r3
 80017dc:	4805      	ldr	r0, [pc, #20]	; (80017f4 <MX_ADC1_Init+0x98>)
 80017de:	f003 ff45 	bl	800566c <HAL_ADC_ConfigChannel>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d001      	beq.n	80017ec <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80017e8:	f002 f8c0 	bl	800396c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80017ec:	bf00      	nop
 80017ee:	3710      	adds	r7, #16
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	20000460 	.word	0x20000460
 80017f8:	40012000 	.word	0x40012000
 80017fc:	0f000001 	.word	0x0f000001

08001800 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b084      	sub	sp, #16
 8001804:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001806:	463b      	mov	r3, r7
 8001808:	2200      	movs	r2, #0
 800180a:	601a      	str	r2, [r3, #0]
 800180c:	605a      	str	r2, [r3, #4]
 800180e:	609a      	str	r2, [r3, #8]
 8001810:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8001812:	4b21      	ldr	r3, [pc, #132]	; (8001898 <MX_ADC2_Init+0x98>)
 8001814:	4a21      	ldr	r2, [pc, #132]	; (800189c <MX_ADC2_Init+0x9c>)
 8001816:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 8001818:	4b1f      	ldr	r3, [pc, #124]	; (8001898 <MX_ADC2_Init+0x98>)
 800181a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800181e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001820:	4b1d      	ldr	r3, [pc, #116]	; (8001898 <MX_ADC2_Init+0x98>)
 8001822:	2200      	movs	r2, #0
 8001824:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8001826:	4b1c      	ldr	r3, [pc, #112]	; (8001898 <MX_ADC2_Init+0x98>)
 8001828:	2200      	movs	r2, #0
 800182a:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800182c:	4b1a      	ldr	r3, [pc, #104]	; (8001898 <MX_ADC2_Init+0x98>)
 800182e:	2200      	movs	r2, #0
 8001830:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001832:	4b19      	ldr	r3, [pc, #100]	; (8001898 <MX_ADC2_Init+0x98>)
 8001834:	2200      	movs	r2, #0
 8001836:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800183a:	4b17      	ldr	r3, [pc, #92]	; (8001898 <MX_ADC2_Init+0x98>)
 800183c:	2200      	movs	r2, #0
 800183e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001840:	4b15      	ldr	r3, [pc, #84]	; (8001898 <MX_ADC2_Init+0x98>)
 8001842:	4a17      	ldr	r2, [pc, #92]	; (80018a0 <MX_ADC2_Init+0xa0>)
 8001844:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001846:	4b14      	ldr	r3, [pc, #80]	; (8001898 <MX_ADC2_Init+0x98>)
 8001848:	2200      	movs	r2, #0
 800184a:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 800184c:	4b12      	ldr	r3, [pc, #72]	; (8001898 <MX_ADC2_Init+0x98>)
 800184e:	2201      	movs	r2, #1
 8001850:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001852:	4b11      	ldr	r3, [pc, #68]	; (8001898 <MX_ADC2_Init+0x98>)
 8001854:	2200      	movs	r2, #0
 8001856:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800185a:	4b0f      	ldr	r3, [pc, #60]	; (8001898 <MX_ADC2_Init+0x98>)
 800185c:	2201      	movs	r2, #1
 800185e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001860:	480d      	ldr	r0, [pc, #52]	; (8001898 <MX_ADC2_Init+0x98>)
 8001862:	f003 febf 	bl	80055e4 <HAL_ADC_Init>
 8001866:	4603      	mov	r3, r0
 8001868:	2b00      	cmp	r3, #0
 800186a:	d001      	beq.n	8001870 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 800186c:	f002 f87e 	bl	800396c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001870:	2304      	movs	r3, #4
 8001872:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001874:	2301      	movs	r3, #1
 8001876:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001878:	2300      	movs	r3, #0
 800187a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800187c:	463b      	mov	r3, r7
 800187e:	4619      	mov	r1, r3
 8001880:	4805      	ldr	r0, [pc, #20]	; (8001898 <MX_ADC2_Init+0x98>)
 8001882:	f003 fef3 	bl	800566c <HAL_ADC_ConfigChannel>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d001      	beq.n	8001890 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 800188c:	f002 f86e 	bl	800396c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001890:	bf00      	nop
 8001892:	3710      	adds	r7, #16
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}
 8001898:	200004a8 	.word	0x200004a8
 800189c:	40012100 	.word	0x40012100
 80018a0:	0f000001 	.word	0x0f000001

080018a4 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b084      	sub	sp, #16
 80018a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80018aa:	463b      	mov	r3, r7
 80018ac:	2200      	movs	r2, #0
 80018ae:	601a      	str	r2, [r3, #0]
 80018b0:	605a      	str	r2, [r3, #4]
 80018b2:	609a      	str	r2, [r3, #8]
 80018b4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80018b6:	4b21      	ldr	r3, [pc, #132]	; (800193c <MX_ADC3_Init+0x98>)
 80018b8:	4a21      	ldr	r2, [pc, #132]	; (8001940 <MX_ADC3_Init+0x9c>)
 80018ba:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 80018bc:	4b1f      	ldr	r3, [pc, #124]	; (800193c <MX_ADC3_Init+0x98>)
 80018be:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80018c2:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80018c4:	4b1d      	ldr	r3, [pc, #116]	; (800193c <MX_ADC3_Init+0x98>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 80018ca:	4b1c      	ldr	r3, [pc, #112]	; (800193c <MX_ADC3_Init+0x98>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80018d0:	4b1a      	ldr	r3, [pc, #104]	; (800193c <MX_ADC3_Init+0x98>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80018d6:	4b19      	ldr	r3, [pc, #100]	; (800193c <MX_ADC3_Init+0x98>)
 80018d8:	2200      	movs	r2, #0
 80018da:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80018de:	4b17      	ldr	r3, [pc, #92]	; (800193c <MX_ADC3_Init+0x98>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80018e4:	4b15      	ldr	r3, [pc, #84]	; (800193c <MX_ADC3_Init+0x98>)
 80018e6:	4a17      	ldr	r2, [pc, #92]	; (8001944 <MX_ADC3_Init+0xa0>)
 80018e8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80018ea:	4b14      	ldr	r3, [pc, #80]	; (800193c <MX_ADC3_Init+0x98>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 80018f0:	4b12      	ldr	r3, [pc, #72]	; (800193c <MX_ADC3_Init+0x98>)
 80018f2:	2201      	movs	r2, #1
 80018f4:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80018f6:	4b11      	ldr	r3, [pc, #68]	; (800193c <MX_ADC3_Init+0x98>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80018fe:	4b0f      	ldr	r3, [pc, #60]	; (800193c <MX_ADC3_Init+0x98>)
 8001900:	2201      	movs	r2, #1
 8001902:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001904:	480d      	ldr	r0, [pc, #52]	; (800193c <MX_ADC3_Init+0x98>)
 8001906:	f003 fe6d 	bl	80055e4 <HAL_ADC_Init>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d001      	beq.n	8001914 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8001910:	f002 f82c 	bl	800396c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8001914:	230d      	movs	r3, #13
 8001916:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001918:	2301      	movs	r3, #1
 800191a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800191c:	2300      	movs	r3, #0
 800191e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001920:	463b      	mov	r3, r7
 8001922:	4619      	mov	r1, r3
 8001924:	4805      	ldr	r0, [pc, #20]	; (800193c <MX_ADC3_Init+0x98>)
 8001926:	f003 fea1 	bl	800566c <HAL_ADC_ConfigChannel>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d001      	beq.n	8001934 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8001930:	f002 f81c 	bl	800396c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001934:	bf00      	nop
 8001936:	3710      	adds	r7, #16
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}
 800193c:	200004f0 	.word	0x200004f0
 8001940:	40012200 	.word	0x40012200
 8001944:	0f000001 	.word	0x0f000001

08001948 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800194c:	4b12      	ldr	r3, [pc, #72]	; (8001998 <MX_I2C1_Init+0x50>)
 800194e:	4a13      	ldr	r2, [pc, #76]	; (800199c <MX_I2C1_Init+0x54>)
 8001950:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001952:	4b11      	ldr	r3, [pc, #68]	; (8001998 <MX_I2C1_Init+0x50>)
 8001954:	4a12      	ldr	r2, [pc, #72]	; (80019a0 <MX_I2C1_Init+0x58>)
 8001956:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001958:	4b0f      	ldr	r3, [pc, #60]	; (8001998 <MX_I2C1_Init+0x50>)
 800195a:	2200      	movs	r2, #0
 800195c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800195e:	4b0e      	ldr	r3, [pc, #56]	; (8001998 <MX_I2C1_Init+0x50>)
 8001960:	2200      	movs	r2, #0
 8001962:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001964:	4b0c      	ldr	r3, [pc, #48]	; (8001998 <MX_I2C1_Init+0x50>)
 8001966:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800196a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800196c:	4b0a      	ldr	r3, [pc, #40]	; (8001998 <MX_I2C1_Init+0x50>)
 800196e:	2200      	movs	r2, #0
 8001970:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001972:	4b09      	ldr	r3, [pc, #36]	; (8001998 <MX_I2C1_Init+0x50>)
 8001974:	2200      	movs	r2, #0
 8001976:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001978:	4b07      	ldr	r3, [pc, #28]	; (8001998 <MX_I2C1_Init+0x50>)
 800197a:	2200      	movs	r2, #0
 800197c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800197e:	4b06      	ldr	r3, [pc, #24]	; (8001998 <MX_I2C1_Init+0x50>)
 8001980:	2200      	movs	r2, #0
 8001982:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001984:	4804      	ldr	r0, [pc, #16]	; (8001998 <MX_I2C1_Init+0x50>)
 8001986:	f004 ff8b 	bl	80068a0 <HAL_I2C_Init>
 800198a:	4603      	mov	r3, r0
 800198c:	2b00      	cmp	r3, #0
 800198e:	d001      	beq.n	8001994 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001990:	f001 ffec 	bl	800396c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001994:	bf00      	nop
 8001996:	bd80      	pop	{r7, pc}
 8001998:	20000538 	.word	0x20000538
 800199c:	40005400 	.word	0x40005400
 80019a0:	00061a80 	.word	0x00061a80

080019a4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80019a8:	4b12      	ldr	r3, [pc, #72]	; (80019f4 <MX_I2C2_Init+0x50>)
 80019aa:	4a13      	ldr	r2, [pc, #76]	; (80019f8 <MX_I2C2_Init+0x54>)
 80019ac:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 80019ae:	4b11      	ldr	r3, [pc, #68]	; (80019f4 <MX_I2C2_Init+0x50>)
 80019b0:	4a12      	ldr	r2, [pc, #72]	; (80019fc <MX_I2C2_Init+0x58>)
 80019b2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80019b4:	4b0f      	ldr	r3, [pc, #60]	; (80019f4 <MX_I2C2_Init+0x50>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80019ba:	4b0e      	ldr	r3, [pc, #56]	; (80019f4 <MX_I2C2_Init+0x50>)
 80019bc:	2200      	movs	r2, #0
 80019be:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80019c0:	4b0c      	ldr	r3, [pc, #48]	; (80019f4 <MX_I2C2_Init+0x50>)
 80019c2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80019c6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80019c8:	4b0a      	ldr	r3, [pc, #40]	; (80019f4 <MX_I2C2_Init+0x50>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80019ce:	4b09      	ldr	r3, [pc, #36]	; (80019f4 <MX_I2C2_Init+0x50>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80019d4:	4b07      	ldr	r3, [pc, #28]	; (80019f4 <MX_I2C2_Init+0x50>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80019da:	4b06      	ldr	r3, [pc, #24]	; (80019f4 <MX_I2C2_Init+0x50>)
 80019dc:	2200      	movs	r2, #0
 80019de:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80019e0:	4804      	ldr	r0, [pc, #16]	; (80019f4 <MX_I2C2_Init+0x50>)
 80019e2:	f004 ff5d 	bl	80068a0 <HAL_I2C_Init>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d001      	beq.n	80019f0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80019ec:	f001 ffbe 	bl	800396c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80019f0:	bf00      	nop
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	2000058c 	.word	0x2000058c
 80019f8:	40005800 	.word	0x40005800
 80019fc:	00061a80 	.word	0x00061a80

08001a00 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001a04:	4b12      	ldr	r3, [pc, #72]	; (8001a50 <MX_I2C3_Init+0x50>)
 8001a06:	4a13      	ldr	r2, [pc, #76]	; (8001a54 <MX_I2C3_Init+0x54>)
 8001a08:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 8001a0a:	4b11      	ldr	r3, [pc, #68]	; (8001a50 <MX_I2C3_Init+0x50>)
 8001a0c:	4a12      	ldr	r2, [pc, #72]	; (8001a58 <MX_I2C3_Init+0x58>)
 8001a0e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001a10:	4b0f      	ldr	r3, [pc, #60]	; (8001a50 <MX_I2C3_Init+0x50>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001a16:	4b0e      	ldr	r3, [pc, #56]	; (8001a50 <MX_I2C3_Init+0x50>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a1c:	4b0c      	ldr	r3, [pc, #48]	; (8001a50 <MX_I2C3_Init+0x50>)
 8001a1e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a22:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a24:	4b0a      	ldr	r3, [pc, #40]	; (8001a50 <MX_I2C3_Init+0x50>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001a2a:	4b09      	ldr	r3, [pc, #36]	; (8001a50 <MX_I2C3_Init+0x50>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a30:	4b07      	ldr	r3, [pc, #28]	; (8001a50 <MX_I2C3_Init+0x50>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a36:	4b06      	ldr	r3, [pc, #24]	; (8001a50 <MX_I2C3_Init+0x50>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001a3c:	4804      	ldr	r0, [pc, #16]	; (8001a50 <MX_I2C3_Init+0x50>)
 8001a3e:	f004 ff2f 	bl	80068a0 <HAL_I2C_Init>
 8001a42:	4603      	mov	r3, r0
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d001      	beq.n	8001a4c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001a48:	f001 ff90 	bl	800396c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001a4c:	bf00      	nop
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	200005e0 	.word	0x200005e0
 8001a54:	40005c00 	.word	0x40005c00
 8001a58:	00061a80 	.word	0x00061a80

08001a5c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001a60:	4b17      	ldr	r3, [pc, #92]	; (8001ac0 <MX_SPI2_Init+0x64>)
 8001a62:	4a18      	ldr	r2, [pc, #96]	; (8001ac4 <MX_SPI2_Init+0x68>)
 8001a64:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001a66:	4b16      	ldr	r3, [pc, #88]	; (8001ac0 <MX_SPI2_Init+0x64>)
 8001a68:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001a6c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001a6e:	4b14      	ldr	r3, [pc, #80]	; (8001ac0 <MX_SPI2_Init+0x64>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a74:	4b12      	ldr	r3, [pc, #72]	; (8001ac0 <MX_SPI2_Init+0x64>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a7a:	4b11      	ldr	r3, [pc, #68]	; (8001ac0 <MX_SPI2_Init+0x64>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a80:	4b0f      	ldr	r3, [pc, #60]	; (8001ac0 <MX_SPI2_Init+0x64>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001a86:	4b0e      	ldr	r3, [pc, #56]	; (8001ac0 <MX_SPI2_Init+0x64>)
 8001a88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a8c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001a8e:	4b0c      	ldr	r3, [pc, #48]	; (8001ac0 <MX_SPI2_Init+0x64>)
 8001a90:	2220      	movs	r2, #32
 8001a92:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a94:	4b0a      	ldr	r3, [pc, #40]	; (8001ac0 <MX_SPI2_Init+0x64>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a9a:	4b09      	ldr	r3, [pc, #36]	; (8001ac0 <MX_SPI2_Init+0x64>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001aa0:	4b07      	ldr	r3, [pc, #28]	; (8001ac0 <MX_SPI2_Init+0x64>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001aa6:	4b06      	ldr	r3, [pc, #24]	; (8001ac0 <MX_SPI2_Init+0x64>)
 8001aa8:	220a      	movs	r2, #10
 8001aaa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001aac:	4804      	ldr	r0, [pc, #16]	; (8001ac0 <MX_SPI2_Init+0x64>)
 8001aae:	f006 fb4f 	bl	8008150 <HAL_SPI_Init>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d001      	beq.n	8001abc <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001ab8:	f001 ff58 	bl	800396c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001abc:	bf00      	nop
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	20000634 	.word	0x20000634
 8001ac4:	40003800 	.word	0x40003800

08001ac8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b08a      	sub	sp, #40	; 0x28
 8001acc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ace:	f107 0318 	add.w	r3, r7, #24
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	601a      	str	r2, [r3, #0]
 8001ad6:	605a      	str	r2, [r3, #4]
 8001ad8:	609a      	str	r2, [r3, #8]
 8001ada:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001adc:	f107 0310 	add.w	r3, r7, #16
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	601a      	str	r2, [r3, #0]
 8001ae4:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001ae6:	463b      	mov	r3, r7
 8001ae8:	2200      	movs	r2, #0
 8001aea:	601a      	str	r2, [r3, #0]
 8001aec:	605a      	str	r2, [r3, #4]
 8001aee:	609a      	str	r2, [r3, #8]
 8001af0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001af2:	4b2c      	ldr	r3, [pc, #176]	; (8001ba4 <MX_TIM2_Init+0xdc>)
 8001af4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001af8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 8001afa:	4b2a      	ldr	r3, [pc, #168]	; (8001ba4 <MX_TIM2_Init+0xdc>)
 8001afc:	2253      	movs	r2, #83	; 0x53
 8001afe:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b00:	4b28      	ldr	r3, [pc, #160]	; (8001ba4 <MX_TIM2_Init+0xdc>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8001b06:	4b27      	ldr	r3, [pc, #156]	; (8001ba4 <MX_TIM2_Init+0xdc>)
 8001b08:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001b0c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b0e:	4b25      	ldr	r3, [pc, #148]	; (8001ba4 <MX_TIM2_Init+0xdc>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b14:	4b23      	ldr	r3, [pc, #140]	; (8001ba4 <MX_TIM2_Init+0xdc>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001b1a:	4822      	ldr	r0, [pc, #136]	; (8001ba4 <MX_TIM2_Init+0xdc>)
 8001b1c:	f006 ff58 	bl	80089d0 <HAL_TIM_Base_Init>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d001      	beq.n	8001b2a <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 8001b26:	f001 ff21 	bl	800396c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b2e:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001b30:	f107 0318 	add.w	r3, r7, #24
 8001b34:	4619      	mov	r1, r3
 8001b36:	481b      	ldr	r0, [pc, #108]	; (8001ba4 <MX_TIM2_Init+0xdc>)
 8001b38:	f007 fbec 	bl	8009314 <HAL_TIM_ConfigClockSource>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d001      	beq.n	8001b46 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001b42:	f001 ff13 	bl	800396c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001b46:	4817      	ldr	r0, [pc, #92]	; (8001ba4 <MX_TIM2_Init+0xdc>)
 8001b48:	f007 f924 	bl	8008d94 <HAL_TIM_IC_Init>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d001      	beq.n	8001b56 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001b52:	f001 ff0b 	bl	800396c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b56:	2300      	movs	r3, #0
 8001b58:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b5e:	f107 0310 	add.w	r3, r7, #16
 8001b62:	4619      	mov	r1, r3
 8001b64:	480f      	ldr	r0, [pc, #60]	; (8001ba4 <MX_TIM2_Init+0xdc>)
 8001b66:	f008 fa0d 	bl	8009f84 <HAL_TIMEx_MasterConfigSynchronization>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d001      	beq.n	8001b74 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8001b70:	f001 fefc 	bl	800396c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001b74:	2300      	movs	r3, #0
 8001b76:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001b80:	2300      	movs	r3, #0
 8001b82:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001b84:	463b      	mov	r3, r7
 8001b86:	2200      	movs	r2, #0
 8001b88:	4619      	mov	r1, r3
 8001b8a:	4806      	ldr	r0, [pc, #24]	; (8001ba4 <MX_TIM2_Init+0xdc>)
 8001b8c:	f007 fa63 	bl	8009056 <HAL_TIM_IC_ConfigChannel>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d001      	beq.n	8001b9a <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 8001b96:	f001 fee9 	bl	800396c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001b9a:	bf00      	nop
 8001b9c:	3728      	adds	r7, #40	; 0x28
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	2000068c 	.word	0x2000068c

08001ba8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b092      	sub	sp, #72	; 0x48
 8001bac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bae:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	601a      	str	r2, [r3, #0]
 8001bb6:	605a      	str	r2, [r3, #4]
 8001bb8:	609a      	str	r2, [r3, #8]
 8001bba:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001bbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	601a      	str	r2, [r3, #0]
 8001bc4:	605a      	str	r2, [r3, #4]
 8001bc6:	609a      	str	r2, [r3, #8]
 8001bc8:	60da      	str	r2, [r3, #12]
 8001bca:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bcc:	f107 031c 	add.w	r3, r7, #28
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	601a      	str	r2, [r3, #0]
 8001bd4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001bd6:	463b      	mov	r3, r7
 8001bd8:	2200      	movs	r2, #0
 8001bda:	601a      	str	r2, [r3, #0]
 8001bdc:	605a      	str	r2, [r3, #4]
 8001bde:	609a      	str	r2, [r3, #8]
 8001be0:	60da      	str	r2, [r3, #12]
 8001be2:	611a      	str	r2, [r3, #16]
 8001be4:	615a      	str	r2, [r3, #20]
 8001be6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001be8:	4b44      	ldr	r3, [pc, #272]	; (8001cfc <MX_TIM3_Init+0x154>)
 8001bea:	4a45      	ldr	r2, [pc, #276]	; (8001d00 <MX_TIM3_Init+0x158>)
 8001bec:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7-1;
 8001bee:	4b43      	ldr	r3, [pc, #268]	; (8001cfc <MX_TIM3_Init+0x154>)
 8001bf0:	2206      	movs	r2, #6
 8001bf2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bf4:	4b41      	ldr	r3, [pc, #260]	; (8001cfc <MX_TIM3_Init+0x154>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8001bfa:	4b40      	ldr	r3, [pc, #256]	; (8001cfc <MX_TIM3_Init+0x154>)
 8001bfc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001c00:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c02:	4b3e      	ldr	r3, [pc, #248]	; (8001cfc <MX_TIM3_Init+0x154>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c08:	4b3c      	ldr	r3, [pc, #240]	; (8001cfc <MX_TIM3_Init+0x154>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001c0e:	483b      	ldr	r0, [pc, #236]	; (8001cfc <MX_TIM3_Init+0x154>)
 8001c10:	f006 fede 	bl	80089d0 <HAL_TIM_Base_Init>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d001      	beq.n	8001c1e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001c1a:	f001 fea7 	bl	800396c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c22:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001c24:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001c28:	4619      	mov	r1, r3
 8001c2a:	4834      	ldr	r0, [pc, #208]	; (8001cfc <MX_TIM3_Init+0x154>)
 8001c2c:	f007 fb72 	bl	8009314 <HAL_TIM_ConfigClockSource>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d001      	beq.n	8001c3a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001c36:	f001 fe99 	bl	800396c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001c3a:	4830      	ldr	r0, [pc, #192]	; (8001cfc <MX_TIM3_Init+0x154>)
 8001c3c:	f006 ff88 	bl	8008b50 <HAL_TIM_PWM_Init>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d001      	beq.n	8001c4a <MX_TIM3_Init+0xa2>
  {
    Error_Handler();
 8001c46:	f001 fe91 	bl	800396c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.InputTrigger = TIM_TS_ITR3;
 8001c4e:	2330      	movs	r3, #48	; 0x30
 8001c50:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8001c52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c56:	4619      	mov	r1, r3
 8001c58:	4828      	ldr	r0, [pc, #160]	; (8001cfc <MX_TIM3_Init+0x154>)
 8001c5a:	f007 fc22 	bl	80094a2 <HAL_TIM_SlaveConfigSynchro>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d001      	beq.n	8001c68 <MX_TIM3_Init+0xc0>
  {
    Error_Handler();
 8001c64:	f001 fe82 	bl	800396c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001c70:	f107 031c 	add.w	r3, r7, #28
 8001c74:	4619      	mov	r1, r3
 8001c76:	4821      	ldr	r0, [pc, #132]	; (8001cfc <MX_TIM3_Init+0x154>)
 8001c78:	f008 f984 	bl	8009f84 <HAL_TIMEx_MasterConfigSynchronization>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d001      	beq.n	8001c86 <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 8001c82:	f001 fe73 	bl	800396c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c86:	2360      	movs	r3, #96	; 0x60
 8001c88:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c92:	2300      	movs	r3, #0
 8001c94:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c96:	463b      	mov	r3, r7
 8001c98:	2200      	movs	r2, #0
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	4817      	ldr	r0, [pc, #92]	; (8001cfc <MX_TIM3_Init+0x154>)
 8001c9e:	f007 fa77 	bl	8009190 <HAL_TIM_PWM_ConfigChannel>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d001      	beq.n	8001cac <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 8001ca8:	f001 fe60 	bl	800396c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001cac:	463b      	mov	r3, r7
 8001cae:	2204      	movs	r2, #4
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	4812      	ldr	r0, [pc, #72]	; (8001cfc <MX_TIM3_Init+0x154>)
 8001cb4:	f007 fa6c 	bl	8009190 <HAL_TIM_PWM_ConfigChannel>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d001      	beq.n	8001cc2 <MX_TIM3_Init+0x11a>
  {
    Error_Handler();
 8001cbe:	f001 fe55 	bl	800396c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001cc2:	463b      	mov	r3, r7
 8001cc4:	2208      	movs	r2, #8
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	480c      	ldr	r0, [pc, #48]	; (8001cfc <MX_TIM3_Init+0x154>)
 8001cca:	f007 fa61 	bl	8009190 <HAL_TIM_PWM_ConfigChannel>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d001      	beq.n	8001cd8 <MX_TIM3_Init+0x130>
  {
    Error_Handler();
 8001cd4:	f001 fe4a 	bl	800396c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001cd8:	463b      	mov	r3, r7
 8001cda:	220c      	movs	r2, #12
 8001cdc:	4619      	mov	r1, r3
 8001cde:	4807      	ldr	r0, [pc, #28]	; (8001cfc <MX_TIM3_Init+0x154>)
 8001ce0:	f007 fa56 	bl	8009190 <HAL_TIM_PWM_ConfigChannel>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d001      	beq.n	8001cee <MX_TIM3_Init+0x146>
  {
    Error_Handler();
 8001cea:	f001 fe3f 	bl	800396c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001cee:	4803      	ldr	r0, [pc, #12]	; (8001cfc <MX_TIM3_Init+0x154>)
 8001cf0:	f002 f8e8 	bl	8003ec4 <HAL_TIM_MspPostInit>

}
 8001cf4:	bf00      	nop
 8001cf6:	3748      	adds	r7, #72	; 0x48
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	200006d4 	.word	0x200006d4
 8001d00:	40000400 	.word	0x40000400

08001d04 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b08e      	sub	sp, #56	; 0x38
 8001d08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d0a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d0e:	2200      	movs	r2, #0
 8001d10:	601a      	str	r2, [r3, #0]
 8001d12:	605a      	str	r2, [r3, #4]
 8001d14:	609a      	str	r2, [r3, #8]
 8001d16:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d18:	f107 0320 	add.w	r3, r7, #32
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	601a      	str	r2, [r3, #0]
 8001d20:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d22:	1d3b      	adds	r3, r7, #4
 8001d24:	2200      	movs	r2, #0
 8001d26:	601a      	str	r2, [r3, #0]
 8001d28:	605a      	str	r2, [r3, #4]
 8001d2a:	609a      	str	r2, [r3, #8]
 8001d2c:	60da      	str	r2, [r3, #12]
 8001d2e:	611a      	str	r2, [r3, #16]
 8001d30:	615a      	str	r2, [r3, #20]
 8001d32:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001d34:	4b2b      	ldr	r3, [pc, #172]	; (8001de4 <MX_TIM4_Init+0xe0>)
 8001d36:	4a2c      	ldr	r2, [pc, #176]	; (8001de8 <MX_TIM4_Init+0xe4>)
 8001d38:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001d3a:	4b2a      	ldr	r3, [pc, #168]	; (8001de4 <MX_TIM4_Init+0xe0>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d40:	4b28      	ldr	r3, [pc, #160]	; (8001de4 <MX_TIM4_Init+0xe0>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001d46:	4b27      	ldr	r3, [pc, #156]	; (8001de4 <MX_TIM4_Init+0xe0>)
 8001d48:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d4c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d4e:	4b25      	ldr	r3, [pc, #148]	; (8001de4 <MX_TIM4_Init+0xe0>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d54:	4b23      	ldr	r3, [pc, #140]	; (8001de4 <MX_TIM4_Init+0xe0>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001d5a:	4822      	ldr	r0, [pc, #136]	; (8001de4 <MX_TIM4_Init+0xe0>)
 8001d5c:	f006 fe38 	bl	80089d0 <HAL_TIM_Base_Init>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d001      	beq.n	8001d6a <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8001d66:	f001 fe01 	bl	800396c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d6e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001d70:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d74:	4619      	mov	r1, r3
 8001d76:	481b      	ldr	r0, [pc, #108]	; (8001de4 <MX_TIM4_Init+0xe0>)
 8001d78:	f007 facc 	bl	8009314 <HAL_TIM_ConfigClockSource>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d001      	beq.n	8001d86 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8001d82:	f001 fdf3 	bl	800396c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001d86:	4817      	ldr	r0, [pc, #92]	; (8001de4 <MX_TIM4_Init+0xe0>)
 8001d88:	f006 fee2 	bl	8008b50 <HAL_TIM_PWM_Init>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d001      	beq.n	8001d96 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001d92:	f001 fdeb 	bl	800396c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d96:	2300      	movs	r3, #0
 8001d98:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001d9e:	f107 0320 	add.w	r3, r7, #32
 8001da2:	4619      	mov	r1, r3
 8001da4:	480f      	ldr	r0, [pc, #60]	; (8001de4 <MX_TIM4_Init+0xe0>)
 8001da6:	f008 f8ed 	bl	8009f84 <HAL_TIMEx_MasterConfigSynchronization>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d001      	beq.n	8001db4 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001db0:	f001 fddc 	bl	800396c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001db4:	2360      	movs	r3, #96	; 0x60
 8001db6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001db8:	2300      	movs	r3, #0
 8001dba:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001dc4:	1d3b      	adds	r3, r7, #4
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	4619      	mov	r1, r3
 8001dca:	4806      	ldr	r0, [pc, #24]	; (8001de4 <MX_TIM4_Init+0xe0>)
 8001dcc:	f007 f9e0 	bl	8009190 <HAL_TIM_PWM_ConfigChannel>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d001      	beq.n	8001dda <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8001dd6:	f001 fdc9 	bl	800396c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001dda:	bf00      	nop
 8001ddc:	3738      	adds	r7, #56	; 0x38
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	2000071c 	.word	0x2000071c
 8001de8:	40000800 	.word	0x40000800

08001dec <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b082      	sub	sp, #8
 8001df0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001df2:	463b      	mov	r3, r7
 8001df4:	2200      	movs	r2, #0
 8001df6:	601a      	str	r2, [r3, #0]
 8001df8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001dfa:	4b15      	ldr	r3, [pc, #84]	; (8001e50 <MX_TIM6_Init+0x64>)
 8001dfc:	4a15      	ldr	r2, [pc, #84]	; (8001e54 <MX_TIM6_Init+0x68>)
 8001dfe:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 84-1;
 8001e00:	4b13      	ldr	r3, [pc, #76]	; (8001e50 <MX_TIM6_Init+0x64>)
 8001e02:	2253      	movs	r2, #83	; 0x53
 8001e04:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e06:	4b12      	ldr	r3, [pc, #72]	; (8001e50 <MX_TIM6_Init+0x64>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65000;
 8001e0c:	4b10      	ldr	r3, [pc, #64]	; (8001e50 <MX_TIM6_Init+0x64>)
 8001e0e:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 8001e12:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e14:	4b0e      	ldr	r3, [pc, #56]	; (8001e50 <MX_TIM6_Init+0x64>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001e1a:	480d      	ldr	r0, [pc, #52]	; (8001e50 <MX_TIM6_Init+0x64>)
 8001e1c:	f006 fdd8 	bl	80089d0 <HAL_TIM_Base_Init>
 8001e20:	4603      	mov	r3, r0
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d001      	beq.n	8001e2a <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8001e26:	f001 fda1 	bl	800396c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001e32:	463b      	mov	r3, r7
 8001e34:	4619      	mov	r1, r3
 8001e36:	4806      	ldr	r0, [pc, #24]	; (8001e50 <MX_TIM6_Init+0x64>)
 8001e38:	f008 f8a4 	bl	8009f84 <HAL_TIMEx_MasterConfigSynchronization>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d001      	beq.n	8001e46 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8001e42:	f001 fd93 	bl	800396c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001e46:	bf00      	nop
 8001e48:	3708      	adds	r7, #8
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	20000764 	.word	0x20000764
 8001e54:	40001000 	.word	0x40001000

08001e58 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b082      	sub	sp, #8
 8001e5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e5e:	463b      	mov	r3, r7
 8001e60:	2200      	movs	r2, #0
 8001e62:	601a      	str	r2, [r3, #0]
 8001e64:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001e66:	4b15      	ldr	r3, [pc, #84]	; (8001ebc <MX_TIM7_Init+0x64>)
 8001e68:	4a15      	ldr	r2, [pc, #84]	; (8001ec0 <MX_TIM7_Init+0x68>)
 8001e6a:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 85-1;
 8001e6c:	4b13      	ldr	r3, [pc, #76]	; (8001ebc <MX_TIM7_Init+0x64>)
 8001e6e:	2254      	movs	r2, #84	; 0x54
 8001e70:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e72:	4b12      	ldr	r3, [pc, #72]	; (8001ebc <MX_TIM7_Init+0x64>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 10000-1;
 8001e78:	4b10      	ldr	r3, [pc, #64]	; (8001ebc <MX_TIM7_Init+0x64>)
 8001e7a:	f242 720f 	movw	r2, #9999	; 0x270f
 8001e7e:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e80:	4b0e      	ldr	r3, [pc, #56]	; (8001ebc <MX_TIM7_Init+0x64>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001e86:	480d      	ldr	r0, [pc, #52]	; (8001ebc <MX_TIM7_Init+0x64>)
 8001e88:	f006 fda2 	bl	80089d0 <HAL_TIM_Base_Init>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d001      	beq.n	8001e96 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8001e92:	f001 fd6b 	bl	800396c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e96:	2300      	movs	r3, #0
 8001e98:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001e9e:	463b      	mov	r3, r7
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	4806      	ldr	r0, [pc, #24]	; (8001ebc <MX_TIM7_Init+0x64>)
 8001ea4:	f008 f86e 	bl	8009f84 <HAL_TIMEx_MasterConfigSynchronization>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d001      	beq.n	8001eb2 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8001eae:	f001 fd5d 	bl	800396c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001eb2:	bf00      	nop
 8001eb4:	3708      	adds	r7, #8
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	200007ac 	.word	0x200007ac
 8001ec0:	40001400 	.word	0x40001400

08001ec4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001ec8:	4b10      	ldr	r3, [pc, #64]	; (8001f0c <MX_USART1_UART_Init+0x48>)
 8001eca:	4a11      	ldr	r2, [pc, #68]	; (8001f10 <MX_USART1_UART_Init+0x4c>)
 8001ecc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 420000;
 8001ece:	4b0f      	ldr	r3, [pc, #60]	; (8001f0c <MX_USART1_UART_Init+0x48>)
 8001ed0:	4a10      	ldr	r2, [pc, #64]	; (8001f14 <MX_USART1_UART_Init+0x50>)
 8001ed2:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001ed4:	4b0d      	ldr	r3, [pc, #52]	; (8001f0c <MX_USART1_UART_Init+0x48>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001eda:	4b0c      	ldr	r3, [pc, #48]	; (8001f0c <MX_USART1_UART_Init+0x48>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001ee0:	4b0a      	ldr	r3, [pc, #40]	; (8001f0c <MX_USART1_UART_Init+0x48>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001ee6:	4b09      	ldr	r3, [pc, #36]	; (8001f0c <MX_USART1_UART_Init+0x48>)
 8001ee8:	220c      	movs	r2, #12
 8001eea:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001eec:	4b07      	ldr	r3, [pc, #28]	; (8001f0c <MX_USART1_UART_Init+0x48>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ef2:	4b06      	ldr	r3, [pc, #24]	; (8001f0c <MX_USART1_UART_Init+0x48>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001ef8:	4804      	ldr	r0, [pc, #16]	; (8001f0c <MX_USART1_UART_Init+0x48>)
 8001efa:	f008 f8d3 	bl	800a0a4 <HAL_UART_Init>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d001      	beq.n	8001f08 <MX_USART1_UART_Init+0x44>
  {
    Error_Handler();
 8001f04:	f001 fd32 	bl	800396c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001f08:	bf00      	nop
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	200007f4 	.word	0x200007f4
 8001f10:	40011000 	.word	0x40011000
 8001f14:	000668a0 	.word	0x000668a0

08001f18 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001f1c:	4b11      	ldr	r3, [pc, #68]	; (8001f64 <MX_USART2_UART_Init+0x4c>)
 8001f1e:	4a12      	ldr	r2, [pc, #72]	; (8001f68 <MX_USART2_UART_Init+0x50>)
 8001f20:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001f22:	4b10      	ldr	r3, [pc, #64]	; (8001f64 <MX_USART2_UART_Init+0x4c>)
 8001f24:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f28:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001f2a:	4b0e      	ldr	r3, [pc, #56]	; (8001f64 <MX_USART2_UART_Init+0x4c>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001f30:	4b0c      	ldr	r3, [pc, #48]	; (8001f64 <MX_USART2_UART_Init+0x4c>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001f36:	4b0b      	ldr	r3, [pc, #44]	; (8001f64 <MX_USART2_UART_Init+0x4c>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001f3c:	4b09      	ldr	r3, [pc, #36]	; (8001f64 <MX_USART2_UART_Init+0x4c>)
 8001f3e:	220c      	movs	r2, #12
 8001f40:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f42:	4b08      	ldr	r3, [pc, #32]	; (8001f64 <MX_USART2_UART_Init+0x4c>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f48:	4b06      	ldr	r3, [pc, #24]	; (8001f64 <MX_USART2_UART_Init+0x4c>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001f4e:	4805      	ldr	r0, [pc, #20]	; (8001f64 <MX_USART2_UART_Init+0x4c>)
 8001f50:	f008 f8a8 	bl	800a0a4 <HAL_UART_Init>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d001      	beq.n	8001f5e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001f5a:	f001 fd07 	bl	800396c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001f5e:	bf00      	nop
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	20000838 	.word	0x20000838
 8001f68:	40004400 	.word	0x40004400

08001f6c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001f70:	4b11      	ldr	r3, [pc, #68]	; (8001fb8 <MX_USART3_UART_Init+0x4c>)
 8001f72:	4a12      	ldr	r2, [pc, #72]	; (8001fbc <MX_USART3_UART_Init+0x50>)
 8001f74:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001f76:	4b10      	ldr	r3, [pc, #64]	; (8001fb8 <MX_USART3_UART_Init+0x4c>)
 8001f78:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f7c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001f7e:	4b0e      	ldr	r3, [pc, #56]	; (8001fb8 <MX_USART3_UART_Init+0x4c>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001f84:	4b0c      	ldr	r3, [pc, #48]	; (8001fb8 <MX_USART3_UART_Init+0x4c>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001f8a:	4b0b      	ldr	r3, [pc, #44]	; (8001fb8 <MX_USART3_UART_Init+0x4c>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001f90:	4b09      	ldr	r3, [pc, #36]	; (8001fb8 <MX_USART3_UART_Init+0x4c>)
 8001f92:	220c      	movs	r2, #12
 8001f94:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f96:	4b08      	ldr	r3, [pc, #32]	; (8001fb8 <MX_USART3_UART_Init+0x4c>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f9c:	4b06      	ldr	r3, [pc, #24]	; (8001fb8 <MX_USART3_UART_Init+0x4c>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001fa2:	4805      	ldr	r0, [pc, #20]	; (8001fb8 <MX_USART3_UART_Init+0x4c>)
 8001fa4:	f008 f87e 	bl	800a0a4 <HAL_UART_Init>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d001      	beq.n	8001fb2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001fae:	f001 fcdd 	bl	800396c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001fb2:	bf00      	nop
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	2000087c 	.word	0x2000087c
 8001fbc:	40004800 	.word	0x40004800

08001fc0 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001fc4:	4b11      	ldr	r3, [pc, #68]	; (800200c <MX_USART6_UART_Init+0x4c>)
 8001fc6:	4a12      	ldr	r2, [pc, #72]	; (8002010 <MX_USART6_UART_Init+0x50>)
 8001fc8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001fca:	4b10      	ldr	r3, [pc, #64]	; (800200c <MX_USART6_UART_Init+0x4c>)
 8001fcc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001fd0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001fd2:	4b0e      	ldr	r3, [pc, #56]	; (800200c <MX_USART6_UART_Init+0x4c>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001fd8:	4b0c      	ldr	r3, [pc, #48]	; (800200c <MX_USART6_UART_Init+0x4c>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001fde:	4b0b      	ldr	r3, [pc, #44]	; (800200c <MX_USART6_UART_Init+0x4c>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001fe4:	4b09      	ldr	r3, [pc, #36]	; (800200c <MX_USART6_UART_Init+0x4c>)
 8001fe6:	220c      	movs	r2, #12
 8001fe8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fea:	4b08      	ldr	r3, [pc, #32]	; (800200c <MX_USART6_UART_Init+0x4c>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ff0:	4b06      	ldr	r3, [pc, #24]	; (800200c <MX_USART6_UART_Init+0x4c>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001ff6:	4805      	ldr	r0, [pc, #20]	; (800200c <MX_USART6_UART_Init+0x4c>)
 8001ff8:	f008 f854 	bl	800a0a4 <HAL_UART_Init>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d001      	beq.n	8002006 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8002002:	f001 fcb3 	bl	800396c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002006:	bf00      	nop
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	200008c0 	.word	0x200008c0
 8002010:	40011400 	.word	0x40011400

08002014 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b082      	sub	sp, #8
 8002018:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800201a:	2300      	movs	r3, #0
 800201c:	607b      	str	r3, [r7, #4]
 800201e:	4b0c      	ldr	r3, [pc, #48]	; (8002050 <MX_DMA_Init+0x3c>)
 8002020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002022:	4a0b      	ldr	r2, [pc, #44]	; (8002050 <MX_DMA_Init+0x3c>)
 8002024:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002028:	6313      	str	r3, [r2, #48]	; 0x30
 800202a:	4b09      	ldr	r3, [pc, #36]	; (8002050 <MX_DMA_Init+0x3c>)
 800202c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800202e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002032:	607b      	str	r3, [r7, #4]
 8002034:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8002036:	2200      	movs	r2, #0
 8002038:	2105      	movs	r1, #5
 800203a:	203a      	movs	r0, #58	; 0x3a
 800203c:	f003 fe0f 	bl	8005c5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8002040:	203a      	movs	r0, #58	; 0x3a
 8002042:	f003 fe28 	bl	8005c96 <HAL_NVIC_EnableIRQ>

}
 8002046:	bf00      	nop
 8002048:	3708      	adds	r7, #8
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	40023800 	.word	0x40023800

08002054 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b08a      	sub	sp, #40	; 0x28
 8002058:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800205a:	f107 0314 	add.w	r3, r7, #20
 800205e:	2200      	movs	r2, #0
 8002060:	601a      	str	r2, [r3, #0]
 8002062:	605a      	str	r2, [r3, #4]
 8002064:	609a      	str	r2, [r3, #8]
 8002066:	60da      	str	r2, [r3, #12]
 8002068:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800206a:	2300      	movs	r3, #0
 800206c:	613b      	str	r3, [r7, #16]
 800206e:	4b6d      	ldr	r3, [pc, #436]	; (8002224 <MX_GPIO_Init+0x1d0>)
 8002070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002072:	4a6c      	ldr	r2, [pc, #432]	; (8002224 <MX_GPIO_Init+0x1d0>)
 8002074:	f043 0304 	orr.w	r3, r3, #4
 8002078:	6313      	str	r3, [r2, #48]	; 0x30
 800207a:	4b6a      	ldr	r3, [pc, #424]	; (8002224 <MX_GPIO_Init+0x1d0>)
 800207c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800207e:	f003 0304 	and.w	r3, r3, #4
 8002082:	613b      	str	r3, [r7, #16]
 8002084:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002086:	2300      	movs	r3, #0
 8002088:	60fb      	str	r3, [r7, #12]
 800208a:	4b66      	ldr	r3, [pc, #408]	; (8002224 <MX_GPIO_Init+0x1d0>)
 800208c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800208e:	4a65      	ldr	r2, [pc, #404]	; (8002224 <MX_GPIO_Init+0x1d0>)
 8002090:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002094:	6313      	str	r3, [r2, #48]	; 0x30
 8002096:	4b63      	ldr	r3, [pc, #396]	; (8002224 <MX_GPIO_Init+0x1d0>)
 8002098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800209a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800209e:	60fb      	str	r3, [r7, #12]
 80020a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020a2:	2300      	movs	r3, #0
 80020a4:	60bb      	str	r3, [r7, #8]
 80020a6:	4b5f      	ldr	r3, [pc, #380]	; (8002224 <MX_GPIO_Init+0x1d0>)
 80020a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020aa:	4a5e      	ldr	r2, [pc, #376]	; (8002224 <MX_GPIO_Init+0x1d0>)
 80020ac:	f043 0301 	orr.w	r3, r3, #1
 80020b0:	6313      	str	r3, [r2, #48]	; 0x30
 80020b2:	4b5c      	ldr	r3, [pc, #368]	; (8002224 <MX_GPIO_Init+0x1d0>)
 80020b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b6:	f003 0301 	and.w	r3, r3, #1
 80020ba:	60bb      	str	r3, [r7, #8]
 80020bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020be:	2300      	movs	r3, #0
 80020c0:	607b      	str	r3, [r7, #4]
 80020c2:	4b58      	ldr	r3, [pc, #352]	; (8002224 <MX_GPIO_Init+0x1d0>)
 80020c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c6:	4a57      	ldr	r2, [pc, #348]	; (8002224 <MX_GPIO_Init+0x1d0>)
 80020c8:	f043 0302 	orr.w	r3, r3, #2
 80020cc:	6313      	str	r3, [r2, #48]	; 0x30
 80020ce:	4b55      	ldr	r3, [pc, #340]	; (8002224 <MX_GPIO_Init+0x1d0>)
 80020d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d2:	f003 0302 	and.w	r3, r3, #2
 80020d6:	607b      	str	r3, [r7, #4]
 80020d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80020da:	2300      	movs	r3, #0
 80020dc:	603b      	str	r3, [r7, #0]
 80020de:	4b51      	ldr	r3, [pc, #324]	; (8002224 <MX_GPIO_Init+0x1d0>)
 80020e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e2:	4a50      	ldr	r2, [pc, #320]	; (8002224 <MX_GPIO_Init+0x1d0>)
 80020e4:	f043 0308 	orr.w	r3, r3, #8
 80020e8:	6313      	str	r3, [r2, #48]	; 0x30
 80020ea:	4b4e      	ldr	r3, [pc, #312]	; (8002224 <MX_GPIO_Init+0x1d0>)
 80020ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ee:	f003 0308 	and.w	r3, r3, #8
 80020f2:	603b      	str	r3, [r7, #0]
 80020f4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TRIG_Pin|GNSS_RST_Pin, GPIO_PIN_RESET);
 80020f6:	2200      	movs	r2, #0
 80020f8:	f248 0102 	movw	r1, #32770	; 0x8002
 80020fc:	484a      	ldr	r0, [pc, #296]	; (8002228 <MX_GPIO_Init+0x1d4>)
 80020fe:	f004 fb83 	bl	8006808 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CS_GYRO_Pin|GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 8002102:	2200      	movs	r2, #0
 8002104:	f241 0118 	movw	r1, #4120	; 0x1018
 8002108:	4848      	ldr	r0, [pc, #288]	; (800222c <MX_GPIO_Init+0x1d8>)
 800210a:	f004 fb7d 	bl	8006808 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_ACC_GPIO_Port, CS_ACC_Pin, GPIO_PIN_RESET);
 800210e:	2200      	movs	r2, #0
 8002110:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002114:	4846      	ldr	r0, [pc, #280]	; (8002230 <MX_GPIO_Init+0x1dc>)
 8002116:	f004 fb77 	bl	8006808 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 800211a:	2200      	movs	r2, #0
 800211c:	2104      	movs	r1, #4
 800211e:	4845      	ldr	r0, [pc, #276]	; (8002234 <MX_GPIO_Init+0x1e0>)
 8002120:	f004 fb72 	bl	8006808 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : IT_MAGN_Pin BUTTON_Pin */
  GPIO_InitStruct.Pin = IT_MAGN_Pin|BUTTON_Pin;
 8002124:	f242 0301 	movw	r3, #8193	; 0x2001
 8002128:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800212a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800212e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002130:	2300      	movs	r3, #0
 8002132:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002134:	f107 0314 	add.w	r3, r7, #20
 8002138:	4619      	mov	r1, r3
 800213a:	483d      	ldr	r0, [pc, #244]	; (8002230 <MX_GPIO_Init+0x1dc>)
 800213c:	f004 f9c8 	bl	80064d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : TRIG_Pin GNSS_RST_Pin */
  GPIO_InitStruct.Pin = TRIG_Pin|GNSS_RST_Pin;
 8002140:	f248 0302 	movw	r3, #32770	; 0x8002
 8002144:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002146:	2301      	movs	r3, #1
 8002148:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800214a:	2300      	movs	r3, #0
 800214c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800214e:	2300      	movs	r3, #0
 8002150:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002152:	f107 0314 	add.w	r3, r7, #20
 8002156:	4619      	mov	r1, r3
 8002158:	4833      	ldr	r0, [pc, #204]	; (8002228 <MX_GPIO_Init+0x1d4>)
 800215a:	f004 f9b9 	bl	80064d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : IT_PRESS_Pin */
  GPIO_InitStruct.Pin = IT_PRESS_Pin;
 800215e:	2304      	movs	r3, #4
 8002160:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002162:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002166:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002168:	2300      	movs	r3, #0
 800216a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IT_PRESS_GPIO_Port, &GPIO_InitStruct);
 800216c:	f107 0314 	add.w	r3, r7, #20
 8002170:	4619      	mov	r1, r3
 8002172:	482e      	ldr	r0, [pc, #184]	; (800222c <MX_GPIO_Init+0x1d8>)
 8002174:	f004 f9ac 	bl	80064d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_GYRO_Pin PB3 PB4 */
  GPIO_InitStruct.Pin = CS_GYRO_Pin|GPIO_PIN_3|GPIO_PIN_4;
 8002178:	f241 0318 	movw	r3, #4120	; 0x1018
 800217c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800217e:	2301      	movs	r3, #1
 8002180:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002182:	2300      	movs	r3, #0
 8002184:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002186:	2300      	movs	r3, #0
 8002188:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800218a:	f107 0314 	add.w	r3, r7, #20
 800218e:	4619      	mov	r1, r3
 8002190:	4826      	ldr	r0, [pc, #152]	; (800222c <MX_GPIO_Init+0x1d8>)
 8002192:	f004 f99d 	bl	80064d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_ACC_Pin */
  GPIO_InitStruct.Pin = CS_ACC_Pin;
 8002196:	f44f 7380 	mov.w	r3, #256	; 0x100
 800219a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800219c:	2301      	movs	r3, #1
 800219e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a0:	2300      	movs	r3, #0
 80021a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021a4:	2300      	movs	r3, #0
 80021a6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CS_ACC_GPIO_Port, &GPIO_InitStruct);
 80021a8:	f107 0314 	add.w	r3, r7, #20
 80021ac:	4619      	mov	r1, r3
 80021ae:	4820      	ldr	r0, [pc, #128]	; (8002230 <MX_GPIO_Init+0x1dc>)
 80021b0:	f004 f98e 	bl	80064d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : IT_GYRO_Pin IT_ACC_Pin */
  GPIO_InitStruct.Pin = IT_GYRO_Pin|IT_ACC_Pin;
 80021b4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80021b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80021ba:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80021be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c0:	2300      	movs	r3, #0
 80021c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021c4:	f107 0314 	add.w	r3, r7, #20
 80021c8:	4619      	mov	r1, r3
 80021ca:	4817      	ldr	r0, [pc, #92]	; (8002228 <MX_GPIO_Init+0x1d4>)
 80021cc:	f004 f980 	bl	80064d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80021d0:	2304      	movs	r3, #4
 80021d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021d4:	2301      	movs	r3, #1
 80021d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d8:	2300      	movs	r3, #0
 80021da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021dc:	2300      	movs	r3, #0
 80021de:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80021e0:	f107 0314 	add.w	r3, r7, #20
 80021e4:	4619      	mov	r1, r3
 80021e6:	4813      	ldr	r0, [pc, #76]	; (8002234 <MX_GPIO_Init+0x1e0>)
 80021e8:	f004 f972 	bl	80064d0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 80021ec:	2200      	movs	r2, #0
 80021ee:	2105      	movs	r1, #5
 80021f0:	2006      	movs	r0, #6
 80021f2:	f003 fd34 	bl	8005c5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80021f6:	2006      	movs	r0, #6
 80021f8:	f003 fd4d 	bl	8005c96 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 80021fc:	2200      	movs	r2, #0
 80021fe:	2105      	movs	r1, #5
 8002200:	2008      	movs	r0, #8
 8002202:	f003 fd2c 	bl	8005c5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8002206:	2008      	movs	r0, #8
 8002208:	f003 fd45 	bl	8005c96 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800220c:	2200      	movs	r2, #0
 800220e:	2105      	movs	r1, #5
 8002210:	2028      	movs	r0, #40	; 0x28
 8002212:	f003 fd24 	bl	8005c5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002216:	2028      	movs	r0, #40	; 0x28
 8002218:	f003 fd3d 	bl	8005c96 <HAL_NVIC_EnableIRQ>

}
 800221c:	bf00      	nop
 800221e:	3728      	adds	r7, #40	; 0x28
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}
 8002224:	40023800 	.word	0x40023800
 8002228:	40020000 	.word	0x40020000
 800222c:	40020400 	.word	0x40020400
 8002230:	40020800 	.word	0x40020800
 8002234:	40020c00 	.word	0x40020c00

08002238 <HAL_GPIO_EXTI_Callback>:

    return reversed;
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002238:	b480      	push	{r7}
 800223a:	b083      	sub	sp, #12
 800223c:	af00      	add	r7, sp, #0
 800223e:	4603      	mov	r3, r0
 8002240:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == BUTTON_Pin) {
 8002242:	88fb      	ldrh	r3, [r7, #6]
 8002244:	2b01      	cmp	r3, #1
 8002246:	d11c      	bne.n	8002282 <HAL_GPIO_EXTI_Callback+0x4a>
		if(state == 4){state = 5;}
 8002248:	4b1a      	ldr	r3, [pc, #104]	; (80022b4 <HAL_GPIO_EXTI_Callback+0x7c>)
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	2b04      	cmp	r3, #4
 800224e:	d102      	bne.n	8002256 <HAL_GPIO_EXTI_Callback+0x1e>
 8002250:	4b18      	ldr	r3, [pc, #96]	; (80022b4 <HAL_GPIO_EXTI_Callback+0x7c>)
 8002252:	2205      	movs	r2, #5
 8002254:	701a      	strb	r2, [r3, #0]
		if(state == 3){state = 4;}
 8002256:	4b17      	ldr	r3, [pc, #92]	; (80022b4 <HAL_GPIO_EXTI_Callback+0x7c>)
 8002258:	781b      	ldrb	r3, [r3, #0]
 800225a:	2b03      	cmp	r3, #3
 800225c:	d102      	bne.n	8002264 <HAL_GPIO_EXTI_Callback+0x2c>
 800225e:	4b15      	ldr	r3, [pc, #84]	; (80022b4 <HAL_GPIO_EXTI_Callback+0x7c>)
 8002260:	2204      	movs	r2, #4
 8002262:	701a      	strb	r2, [r3, #0]
		if(state == 2){state = 3;}
 8002264:	4b13      	ldr	r3, [pc, #76]	; (80022b4 <HAL_GPIO_EXTI_Callback+0x7c>)
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	2b02      	cmp	r3, #2
 800226a:	d102      	bne.n	8002272 <HAL_GPIO_EXTI_Callback+0x3a>
 800226c:	4b11      	ldr	r3, [pc, #68]	; (80022b4 <HAL_GPIO_EXTI_Callback+0x7c>)
 800226e:	2203      	movs	r2, #3
 8002270:	701a      	strb	r2, [r3, #0]
		if(state == 1){state = 2;}
 8002272:	4b10      	ldr	r3, [pc, #64]	; (80022b4 <HAL_GPIO_EXTI_Callback+0x7c>)
 8002274:	781b      	ldrb	r3, [r3, #0]
 8002276:	2b01      	cmp	r3, #1
 8002278:	d104      	bne.n	8002284 <HAL_GPIO_EXTI_Callback+0x4c>
 800227a:	4b0e      	ldr	r3, [pc, #56]	; (80022b4 <HAL_GPIO_EXTI_Callback+0x7c>)
 800227c:	2202      	movs	r2, #2
 800227e:	701a      	strb	r2, [r3, #0]
 8002280:	e000      	b.n	8002284 <HAL_GPIO_EXTI_Callback+0x4c>
	  } else {
	      __NOP();
 8002282:	bf00      	nop
	  }

	if(GPIO_Pin == IT_ACC_Pin) {
 8002284:	88fb      	ldrh	r3, [r7, #6]
 8002286:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800228a:	d103      	bne.n	8002294 <HAL_GPIO_EXTI_Callback+0x5c>

	 readstart = 1;
 800228c:	4b0a      	ldr	r3, [pc, #40]	; (80022b8 <HAL_GPIO_EXTI_Callback+0x80>)
 800228e:	2201      	movs	r2, #1
 8002290:	701a      	strb	r2, [r3, #0]
 8002292:	e000      	b.n	8002296 <HAL_GPIO_EXTI_Callback+0x5e>
  } else {
      __NOP();
 8002294:	bf00      	nop
  }
  if(GPIO_Pin == IT_MAGN_Pin) {
 8002296:	88fb      	ldrh	r3, [r7, #6]
 8002298:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800229c:	d103      	bne.n	80022a6 <HAL_GPIO_EXTI_Callback+0x6e>
  	 //HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);

  	 billent = 1;
 800229e:	4b07      	ldr	r3, [pc, #28]	; (80022bc <HAL_GPIO_EXTI_Callback+0x84>)
 80022a0:	2201      	movs	r2, #1
 80022a2:	701a      	strb	r2, [r3, #0]
    } else {
        __NOP();
    }
}
 80022a4:	e000      	b.n	80022a8 <HAL_GPIO_EXTI_Callback+0x70>
        __NOP();
 80022a6:	bf00      	nop
}
 80022a8:	bf00      	nop
 80022aa:	370c      	adds	r7, #12
 80022ac:	46bd      	mov	sp, r7
 80022ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b2:	4770      	bx	lr
 80022b4:	20000009 	.word	0x20000009
 80022b8:	20000008 	.word	0x20000008
 80022bc:	20000a0c 	.word	0x20000a0c

080022c0 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b082      	sub	sp, #8
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
	if (htim == &htim2 )
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	4a47      	ldr	r2, [pc, #284]	; (80023e8 <HAL_TIM_IC_CaptureCallback+0x128>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	f040 8083 	bne.w	80023d8 <HAL_TIM_IC_CaptureCallback+0x118>
	  {
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);
 80022d2:	2110      	movs	r1, #16
 80022d4:	4845      	ldr	r0, [pc, #276]	; (80023ec <HAL_TIM_IC_CaptureCallback+0x12c>)
 80022d6:	f004 fab0 	bl	800683a <HAL_GPIO_TogglePin>
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // if the interrupt source is channel1
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	7f1b      	ldrb	r3, [r3, #28]
 80022de:	2b01      	cmp	r3, #1
 80022e0:	d17a      	bne.n	80023d8 <HAL_TIM_IC_CaptureCallback+0x118>
		{
			if (Is_First_Captured==0) // if the first value is not captured
 80022e2:	4b43      	ldr	r3, [pc, #268]	; (80023f0 <HAL_TIM_IC_CaptureCallback+0x130>)
 80022e4:	781b      	ldrb	r3, [r3, #0]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d11a      	bne.n	8002320 <HAL_TIM_IC_CaptureCallback+0x60>
			{
				IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 80022ea:	2100      	movs	r1, #0
 80022ec:	6878      	ldr	r0, [r7, #4]
 80022ee:	f007 f91b 	bl	8009528 <HAL_TIM_ReadCapturedValue>
 80022f2:	4603      	mov	r3, r0
 80022f4:	4a3f      	ldr	r2, [pc, #252]	; (80023f4 <HAL_TIM_IC_CaptureCallback+0x134>)
 80022f6:	6013      	str	r3, [r2, #0]
				Is_First_Captured = 1;  // set the first captured as true
 80022f8:	4b3d      	ldr	r3, [pc, #244]	; (80023f0 <HAL_TIM_IC_CaptureCallback+0x130>)
 80022fa:	2201      	movs	r2, #1
 80022fc:	701a      	strb	r2, [r3, #0]
				// Now change the polarity to falling edge
				__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	6a1a      	ldr	r2, [r3, #32]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f022 020a 	bic.w	r2, r2, #10
 800230c:	621a      	str	r2, [r3, #32]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	6a1a      	ldr	r2, [r3, #32]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f042 0202 	orr.w	r2, r2, #2
 800231c:	621a      	str	r2, [r3, #32]
				__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
				//__HAL_TIM_DISABLE_IT(&htim2, TIM_IT_CC1);
			}
		}
	  }
}
 800231e:	e05b      	b.n	80023d8 <HAL_TIM_IC_CaptureCallback+0x118>
			else if (Is_First_Captured==1)   // if the first is already captured
 8002320:	4b33      	ldr	r3, [pc, #204]	; (80023f0 <HAL_TIM_IC_CaptureCallback+0x130>)
 8002322:	781b      	ldrb	r3, [r3, #0]
 8002324:	2b01      	cmp	r3, #1
 8002326:	d157      	bne.n	80023d8 <HAL_TIM_IC_CaptureCallback+0x118>
				IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
 8002328:	2100      	movs	r1, #0
 800232a:	6878      	ldr	r0, [r7, #4]
 800232c:	f007 f8fc 	bl	8009528 <HAL_TIM_ReadCapturedValue>
 8002330:	4603      	mov	r3, r0
 8002332:	4a31      	ldr	r2, [pc, #196]	; (80023f8 <HAL_TIM_IC_CaptureCallback+0x138>)
 8002334:	6013      	str	r3, [r2, #0]
				__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	2200      	movs	r2, #0
 800233c:	625a      	str	r2, [r3, #36]	; 0x24
				if (IC_Val2 > IC_Val1)
 800233e:	4b2e      	ldr	r3, [pc, #184]	; (80023f8 <HAL_TIM_IC_CaptureCallback+0x138>)
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	4b2c      	ldr	r3, [pc, #176]	; (80023f4 <HAL_TIM_IC_CaptureCallback+0x134>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	429a      	cmp	r2, r3
 8002348:	d907      	bls.n	800235a <HAL_TIM_IC_CaptureCallback+0x9a>
					Difference = IC_Val2-IC_Val1;
 800234a:	4b2b      	ldr	r3, [pc, #172]	; (80023f8 <HAL_TIM_IC_CaptureCallback+0x138>)
 800234c:	681a      	ldr	r2, [r3, #0]
 800234e:	4b29      	ldr	r3, [pc, #164]	; (80023f4 <HAL_TIM_IC_CaptureCallback+0x134>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	1ad3      	subs	r3, r2, r3
 8002354:	4a29      	ldr	r2, [pc, #164]	; (80023fc <HAL_TIM_IC_CaptureCallback+0x13c>)
 8002356:	6013      	str	r3, [r2, #0]
 8002358:	e00f      	b.n	800237a <HAL_TIM_IC_CaptureCallback+0xba>
				else if (IC_Val1 > IC_Val2)
 800235a:	4b26      	ldr	r3, [pc, #152]	; (80023f4 <HAL_TIM_IC_CaptureCallback+0x134>)
 800235c:	681a      	ldr	r2, [r3, #0]
 800235e:	4b26      	ldr	r3, [pc, #152]	; (80023f8 <HAL_TIM_IC_CaptureCallback+0x138>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	429a      	cmp	r2, r3
 8002364:	d909      	bls.n	800237a <HAL_TIM_IC_CaptureCallback+0xba>
					Difference = (0xffff - IC_Val1) + IC_Val2;
 8002366:	4b24      	ldr	r3, [pc, #144]	; (80023f8 <HAL_TIM_IC_CaptureCallback+0x138>)
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	4b22      	ldr	r3, [pc, #136]	; (80023f4 <HAL_TIM_IC_CaptureCallback+0x134>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	1ad3      	subs	r3, r2, r3
 8002370:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8002374:	33ff      	adds	r3, #255	; 0xff
 8002376:	4a21      	ldr	r2, [pc, #132]	; (80023fc <HAL_TIM_IC_CaptureCallback+0x13c>)
 8002378:	6013      	str	r3, [r2, #0]
				Distance = Difference * .34/2;
 800237a:	4b20      	ldr	r3, [pc, #128]	; (80023fc <HAL_TIM_IC_CaptureCallback+0x13c>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4618      	mov	r0, r3
 8002380:	f7fe f8c0 	bl	8000504 <__aeabi_ui2d>
 8002384:	a316      	add	r3, pc, #88	; (adr r3, 80023e0 <HAL_TIM_IC_CaptureCallback+0x120>)
 8002386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800238a:	f7fe f935 	bl	80005f8 <__aeabi_dmul>
 800238e:	4602      	mov	r2, r0
 8002390:	460b      	mov	r3, r1
 8002392:	4610      	mov	r0, r2
 8002394:	4619      	mov	r1, r3
 8002396:	f04f 0200 	mov.w	r2, #0
 800239a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800239e:	f7fe fa55 	bl	800084c <__aeabi_ddiv>
 80023a2:	4602      	mov	r2, r0
 80023a4:	460b      	mov	r3, r1
 80023a6:	4610      	mov	r0, r2
 80023a8:	4619      	mov	r1, r3
 80023aa:	f7fe fbfd 	bl	8000ba8 <__aeabi_d2uiz>
 80023ae:	4603      	mov	r3, r0
 80023b0:	b2da      	uxtb	r2, r3
 80023b2:	4b13      	ldr	r3, [pc, #76]	; (8002400 <HAL_TIM_IC_CaptureCallback+0x140>)
 80023b4:	701a      	strb	r2, [r3, #0]
				Is_First_Captured = 0; // set it back to false
 80023b6:	4b0e      	ldr	r3, [pc, #56]	; (80023f0 <HAL_TIM_IC_CaptureCallback+0x130>)
 80023b8:	2200      	movs	r2, #0
 80023ba:	701a      	strb	r2, [r3, #0]
				__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	6a1a      	ldr	r2, [r3, #32]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f022 020a 	bic.w	r2, r2, #10
 80023ca:	621a      	str	r2, [r3, #32]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	6a12      	ldr	r2, [r2, #32]
 80023d6:	621a      	str	r2, [r3, #32]
}
 80023d8:	bf00      	nop
 80023da:	3708      	adds	r7, #8
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	5c28f5c3 	.word	0x5c28f5c3
 80023e4:	3fd5c28f 	.word	0x3fd5c28f
 80023e8:	2000068c 	.word	0x2000068c
 80023ec:	40020400 	.word	0x40020400
 80023f0:	20000b10 	.word	0x20000b10
 80023f4:	20000b04 	.word	0x20000b04
 80023f8:	20000b08 	.word	0x20000b08
 80023fc:	20000b0c 	.word	0x20000b0c
 8002400:	20000b11 	.word	0x20000b11

08002404 <HAL_TIM_PeriodElapsedCallback>:

// Callback: timer has rolled over
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002404:	b480      	push	{r7}
 8002406:	b083      	sub	sp, #12
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  // Check which version of the timer triggered this callback and toggle LED
  if (htim == &htim6 )
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	4a0b      	ldr	r2, [pc, #44]	; (800243c <HAL_TIM_PeriodElapsedCallback+0x38>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d10d      	bne.n	8002430 <HAL_TIM_PeriodElapsedCallback+0x2c>
  {
	  if(timerse == 1){timerse =0;}
 8002414:	4b0a      	ldr	r3, [pc, #40]	; (8002440 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8002416:	781b      	ldrb	r3, [r3, #0]
 8002418:	2b01      	cmp	r3, #1
 800241a:	d102      	bne.n	8002422 <HAL_TIM_PeriodElapsedCallback+0x1e>
 800241c:	4b08      	ldr	r3, [pc, #32]	; (8002440 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800241e:	2200      	movs	r2, #0
 8002420:	701a      	strb	r2, [r3, #0]
	  if(timerse == 0){timerse =1;}
 8002422:	4b07      	ldr	r3, [pc, #28]	; (8002440 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8002424:	781b      	ldrb	r3, [r3, #0]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d102      	bne.n	8002430 <HAL_TIM_PeriodElapsedCallback+0x2c>
 800242a:	4b05      	ldr	r3, [pc, #20]	; (8002440 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800242c:	2201      	movs	r2, #1
 800242e:	701a      	strb	r2, [r3, #0]
  }
  if(htim == &htim7){

  }
}
 8002430:	bf00      	nop
 8002432:	370c      	adds	r7, #12
 8002434:	46bd      	mov	sp, r7
 8002436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243a:	4770      	bx	lr
 800243c:	20000764 	.word	0x20000764
 8002440:	20000b24 	.word	0x20000b24

08002444 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002444:	b480      	push	{r7}
 8002446:	b083      	sub	sp, #12
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
	if(huart == &huart2){
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	4a06      	ldr	r2, [pc, #24]	; (8002468 <HAL_UART_TxCpltCallback+0x24>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d102      	bne.n	800245a <HAL_UART_TxCpltCallback+0x16>
			telemetria_data_sent = 1;
 8002454:	4b05      	ldr	r3, [pc, #20]	; (800246c <HAL_UART_TxCpltCallback+0x28>)
 8002456:	2201      	movs	r2, #1
 8002458:	701a      	strb	r2, [r3, #0]
	}
}
 800245a:	bf00      	nop
 800245c:	370c      	adds	r7, #12
 800245e:	46bd      	mov	sp, r7
 8002460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002464:	4770      	bx	lr
 8002466:	bf00      	nop
 8002468:	20000838 	.word	0x20000838
 800246c:	20000b13 	.word	0x20000b13

08002470 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002470:	b480      	push	{r7}
 8002472:	b083      	sub	sp, #12
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
	if(huart ==&huart1){
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	4a46      	ldr	r2, [pc, #280]	; (8002594 <HAL_UART_RxCpltCallback+0x124>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d17b      	bne.n	8002578 <HAL_UART_RxCpltCallback+0x108>
		debug_i = __HAL_TIM_GET_COUNTER(&htim6);
 8002480:	4b45      	ldr	r3, [pc, #276]	; (8002598 <HAL_UART_RxCpltCallback+0x128>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002486:	461a      	mov	r2, r3
 8002488:	4b44      	ldr	r3, [pc, #272]	; (800259c <HAL_UART_RxCpltCallback+0x12c>)
 800248a:	601a      	str	r2, [r3, #0]
		if(debug_i < 100){
 800248c:	4b43      	ldr	r3, [pc, #268]	; (800259c <HAL_UART_RxCpltCallback+0x12c>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	2b63      	cmp	r3, #99	; 0x63
 8002492:	dc0d      	bgt.n	80024b0 <HAL_UART_RxCpltCallback+0x40>
			CRSF_debug[CRSF_i] = UART1_rxBuffer[0];
 8002494:	4b42      	ldr	r3, [pc, #264]	; (80025a0 <HAL_UART_RxCpltCallback+0x130>)
 8002496:	781b      	ldrb	r3, [r3, #0]
 8002498:	461a      	mov	r2, r3
 800249a:	4b42      	ldr	r3, [pc, #264]	; (80025a4 <HAL_UART_RxCpltCallback+0x134>)
 800249c:	7819      	ldrb	r1, [r3, #0]
 800249e:	4b42      	ldr	r3, [pc, #264]	; (80025a8 <HAL_UART_RxCpltCallback+0x138>)
 80024a0:	5499      	strb	r1, [r3, r2]
			CRSF_i++;
 80024a2:	4b3f      	ldr	r3, [pc, #252]	; (80025a0 <HAL_UART_RxCpltCallback+0x130>)
 80024a4:	781b      	ldrb	r3, [r3, #0]
 80024a6:	3301      	adds	r3, #1
 80024a8:	b2da      	uxtb	r2, r3
 80024aa:	4b3d      	ldr	r3, [pc, #244]	; (80025a0 <HAL_UART_RxCpltCallback+0x130>)
 80024ac:	701a      	strb	r2, [r3, #0]
 80024ae:	e05f      	b.n	8002570 <HAL_UART_RxCpltCallback+0x100>
		}
		else{
			if(CRSF_debug[2] == 0x16){
 80024b0:	4b3d      	ldr	r3, [pc, #244]	; (80025a8 <HAL_UART_RxCpltCallback+0x138>)
 80024b2:	789b      	ldrb	r3, [r3, #2]
 80024b4:	2b16      	cmp	r3, #22
 80024b6:	d154      	bne.n	8002562 <HAL_UART_RxCpltCallback+0xf2>
				RX_roll = (((uint16_t)(CRSF_debug[4] & 0b00000111)) << 8) + (uint16_t)(CRSF_debug[3]);
 80024b8:	4b3b      	ldr	r3, [pc, #236]	; (80025a8 <HAL_UART_RxCpltCallback+0x138>)
 80024ba:	791b      	ldrb	r3, [r3, #4]
 80024bc:	021b      	lsls	r3, r3, #8
 80024be:	b29b      	uxth	r3, r3
 80024c0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80024c4:	b29a      	uxth	r2, r3
 80024c6:	4b38      	ldr	r3, [pc, #224]	; (80025a8 <HAL_UART_RxCpltCallback+0x138>)
 80024c8:	78db      	ldrb	r3, [r3, #3]
 80024ca:	b29b      	uxth	r3, r3
 80024cc:	4413      	add	r3, r2
 80024ce:	b29a      	uxth	r2, r3
 80024d0:	4b36      	ldr	r3, [pc, #216]	; (80025ac <HAL_UART_RxCpltCallback+0x13c>)
 80024d2:	801a      	strh	r2, [r3, #0]
				RX_pitch = (((uint16_t)(CRSF_debug[5] & 0b00111111)) << 5) + (((uint16_t)(CRSF_debug[4] & 0b11111000)) >> 3);
 80024d4:	4b34      	ldr	r3, [pc, #208]	; (80025a8 <HAL_UART_RxCpltCallback+0x138>)
 80024d6:	795b      	ldrb	r3, [r3, #5]
 80024d8:	015b      	lsls	r3, r3, #5
 80024da:	b29b      	uxth	r3, r3
 80024dc:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80024e0:	b29a      	uxth	r2, r3
 80024e2:	4b31      	ldr	r3, [pc, #196]	; (80025a8 <HAL_UART_RxCpltCallback+0x138>)
 80024e4:	791b      	ldrb	r3, [r3, #4]
 80024e6:	08db      	lsrs	r3, r3, #3
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	b29b      	uxth	r3, r3
 80024ec:	4413      	add	r3, r2
 80024ee:	b29a      	uxth	r2, r3
 80024f0:	4b2f      	ldr	r3, [pc, #188]	; (80025b0 <HAL_UART_RxCpltCallback+0x140>)
 80024f2:	801a      	strh	r2, [r3, #0]
				RX_throttle = (((uint16_t)(CRSF_debug[7] & 0b00000001)) << 10)+ (((uint16_t)(CRSF_debug[6])) << 2) + (((uint16_t)(CRSF_debug[5] & 0b11000000)) >> 6);
 80024f4:	4b2c      	ldr	r3, [pc, #176]	; (80025a8 <HAL_UART_RxCpltCallback+0x138>)
 80024f6:	79db      	ldrb	r3, [r3, #7]
 80024f8:	029b      	lsls	r3, r3, #10
 80024fa:	b29b      	uxth	r3, r3
 80024fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002500:	b29a      	uxth	r2, r3
 8002502:	4b29      	ldr	r3, [pc, #164]	; (80025a8 <HAL_UART_RxCpltCallback+0x138>)
 8002504:	799b      	ldrb	r3, [r3, #6]
 8002506:	b29b      	uxth	r3, r3
 8002508:	009b      	lsls	r3, r3, #2
 800250a:	b29b      	uxth	r3, r3
 800250c:	4413      	add	r3, r2
 800250e:	b29a      	uxth	r2, r3
 8002510:	4b25      	ldr	r3, [pc, #148]	; (80025a8 <HAL_UART_RxCpltCallback+0x138>)
 8002512:	795b      	ldrb	r3, [r3, #5]
 8002514:	099b      	lsrs	r3, r3, #6
 8002516:	b2db      	uxtb	r3, r3
 8002518:	b29b      	uxth	r3, r3
 800251a:	4413      	add	r3, r2
 800251c:	b29a      	uxth	r2, r3
 800251e:	4b25      	ldr	r3, [pc, #148]	; (80025b4 <HAL_UART_RxCpltCallback+0x144>)
 8002520:	801a      	strh	r2, [r3, #0]
				RX_yaw = (((uint16_t)(CRSF_debug[8] & 0b00001111)) << 7) + (((uint16_t)(CRSF_debug[7] & 0b11111110)) >> 1);
 8002522:	4b21      	ldr	r3, [pc, #132]	; (80025a8 <HAL_UART_RxCpltCallback+0x138>)
 8002524:	7a1b      	ldrb	r3, [r3, #8]
 8002526:	01db      	lsls	r3, r3, #7
 8002528:	b29b      	uxth	r3, r3
 800252a:	f403 63f0 	and.w	r3, r3, #1920	; 0x780
 800252e:	b29a      	uxth	r2, r3
 8002530:	4b1d      	ldr	r3, [pc, #116]	; (80025a8 <HAL_UART_RxCpltCallback+0x138>)
 8002532:	79db      	ldrb	r3, [r3, #7]
 8002534:	085b      	lsrs	r3, r3, #1
 8002536:	b2db      	uxtb	r3, r3
 8002538:	b29b      	uxth	r3, r3
 800253a:	4413      	add	r3, r2
 800253c:	b29a      	uxth	r2, r3
 800253e:	4b1e      	ldr	r3, [pc, #120]	; (80025b8 <HAL_UART_RxCpltCallback+0x148>)
 8002540:	801a      	strh	r2, [r3, #0]
				RX_arm = (((uint16_t)(CRSF_debug[9] & 0b01111111)) << 4) + (((uint16_t)(CRSF_debug[8] & 0b11110000)) >> 4);
 8002542:	4b19      	ldr	r3, [pc, #100]	; (80025a8 <HAL_UART_RxCpltCallback+0x138>)
 8002544:	7a5b      	ldrb	r3, [r3, #9]
 8002546:	011b      	lsls	r3, r3, #4
 8002548:	b29b      	uxth	r3, r3
 800254a:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800254e:	b29a      	uxth	r2, r3
 8002550:	4b15      	ldr	r3, [pc, #84]	; (80025a8 <HAL_UART_RxCpltCallback+0x138>)
 8002552:	7a1b      	ldrb	r3, [r3, #8]
 8002554:	091b      	lsrs	r3, r3, #4
 8002556:	b2db      	uxtb	r3, r3
 8002558:	b29b      	uxth	r3, r3
 800255a:	4413      	add	r3, r2
 800255c:	b29a      	uxth	r2, r3
 800255e:	4b17      	ldr	r3, [pc, #92]	; (80025bc <HAL_UART_RxCpltCallback+0x14c>)
 8002560:	801a      	strh	r2, [r3, #0]
			}
			CRSF_debug[0] = UART1_rxBuffer[0];
 8002562:	4b10      	ldr	r3, [pc, #64]	; (80025a4 <HAL_UART_RxCpltCallback+0x134>)
 8002564:	781a      	ldrb	r2, [r3, #0]
 8002566:	4b10      	ldr	r3, [pc, #64]	; (80025a8 <HAL_UART_RxCpltCallback+0x138>)
 8002568:	701a      	strb	r2, [r3, #0]
			CRSF_i = 1;
 800256a:	4b0d      	ldr	r3, [pc, #52]	; (80025a0 <HAL_UART_RxCpltCallback+0x130>)
 800256c:	2201      	movs	r2, #1
 800256e:	701a      	strb	r2, [r3, #0]
		}
		htim6.Instance->CNT = 0;
 8002570:	4b09      	ldr	r3, [pc, #36]	; (8002598 <HAL_UART_RxCpltCallback+0x128>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	2200      	movs	r2, #0
 8002576:	625a      	str	r2, [r3, #36]	; 0x24
	}
	if(huart == &huart2){
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	4a11      	ldr	r2, [pc, #68]	; (80025c0 <HAL_UART_RxCpltCallback+0x150>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d102      	bne.n	8002586 <HAL_UART_RxCpltCallback+0x116>
		telemetria_data_sent = 1;
 8002580:	4b10      	ldr	r3, [pc, #64]	; (80025c4 <HAL_UART_RxCpltCallback+0x154>)
 8002582:	2201      	movs	r2, #1
 8002584:	701a      	strb	r2, [r3, #0]
//			HAL_UART_Receive_IT(&huart2, telem, 11);
//		}
//		else
//			HAL_UART_Receive_IT(&huart2, telem, 11);
	}
}
 8002586:	bf00      	nop
 8002588:	370c      	adds	r7, #12
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr
 8002592:	bf00      	nop
 8002594:	200007f4 	.word	0x200007f4
 8002598:	20000764 	.word	0x20000764
 800259c:	20000b20 	.word	0x20000b20
 80025a0:	20002aec 	.word	0x20002aec
 80025a4:	20002af0 	.word	0x20002af0
 80025a8:	20002aac 	.word	0x20002aac
 80025ac:	20002af2 	.word	0x20002af2
 80025b0:	20002af4 	.word	0x20002af4
 80025b4:	20002af8 	.word	0x20002af8
 80025b8:	20002af6 	.word	0x20002af6
 80025bc:	20002afa 	.word	0x20002afa
 80025c0:	20000838 	.word	0x20000838
 80025c4:	20000b13 	.word	0x20000b13

080025c8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80025c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80025cc:	b0fa      	sub	sp, #488	; 0x1e8
 80025ce:	af24      	add	r7, sp, #144	; 0x90
 80025d0:	67f8      	str	r0, [r7, #124]	; 0x7c
  /* USER CODE BEGIN 5 */
	//HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
//	uint8_t telemetria[8];
	uint8_t telemetria_data[140] = "HELLO WORLD \r\n";
 80025d2:	4bc1      	ldr	r3, [pc, #772]	; (80028d8 <StartDefaultTask+0x310>)
 80025d4:	f107 04cc 	add.w	r4, r7, #204	; 0xcc
 80025d8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80025da:	c407      	stmia	r4!, {r0, r1, r2}
 80025dc:	8023      	strh	r3, [r4, #0]
 80025de:	3402      	adds	r4, #2
 80025e0:	0c1b      	lsrs	r3, r3, #16
 80025e2:	7023      	strb	r3, [r4, #0]
 80025e4:	f107 03db 	add.w	r3, r7, #219	; 0xdb
 80025e8:	227d      	movs	r2, #125	; 0x7d
 80025ea:	2100      	movs	r1, #0
 80025ec:	4618      	mov	r0, r3
 80025ee:	f00c fd15 	bl	800f01c <memset>


  /* Infinite loop */
  for(;;)
  {
	  if(uart_telemetria == 1){
 80025f2:	4bba      	ldr	r3, [pc, #744]	; (80028dc <StartDefaultTask+0x314>)
 80025f4:	781b      	ldrb	r3, [r3, #0]
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	f040 8086 	bne.w	8002708 <StartDefaultTask+0x140>
		  if(telem[0] == 'P'){
 80025fc:	4bb8      	ldr	r3, [pc, #736]	; (80028e0 <StartDefaultTask+0x318>)
 80025fe:	781b      	ldrb	r3, [r3, #0]
 8002600:	2b50      	cmp	r3, #80	; 0x50
 8002602:	d13e      	bne.n	8002682 <StartDefaultTask+0xba>
			  telem_P = (float)(((uint32_t)telem[1]-48)*1000000+((uint32_t)telem[2]-48)*100000+((uint32_t)telem[3]-48)*10000+((uint32_t)telem[4]-48)*1000+((uint32_t)telem[5]-48)*100+((uint32_t)telem[6]-48)*10+((uint32_t)telem[7]-48))/100000;
 8002604:	4bb6      	ldr	r3, [pc, #728]	; (80028e0 <StartDefaultTask+0x318>)
 8002606:	785b      	ldrb	r3, [r3, #1]
 8002608:	461a      	mov	r2, r3
 800260a:	4bb6      	ldr	r3, [pc, #728]	; (80028e4 <StartDefaultTask+0x31c>)
 800260c:	fb03 f202 	mul.w	r2, r3, r2
 8002610:	4bb3      	ldr	r3, [pc, #716]	; (80028e0 <StartDefaultTask+0x318>)
 8002612:	789b      	ldrb	r3, [r3, #2]
 8002614:	4619      	mov	r1, r3
 8002616:	4bb4      	ldr	r3, [pc, #720]	; (80028e8 <StartDefaultTask+0x320>)
 8002618:	fb01 f303 	mul.w	r3, r1, r3
 800261c:	441a      	add	r2, r3
 800261e:	4bb0      	ldr	r3, [pc, #704]	; (80028e0 <StartDefaultTask+0x318>)
 8002620:	78db      	ldrb	r3, [r3, #3]
 8002622:	4619      	mov	r1, r3
 8002624:	f242 7310 	movw	r3, #10000	; 0x2710
 8002628:	fb01 f303 	mul.w	r3, r1, r3
 800262c:	441a      	add	r2, r3
 800262e:	4bac      	ldr	r3, [pc, #688]	; (80028e0 <StartDefaultTask+0x318>)
 8002630:	791b      	ldrb	r3, [r3, #4]
 8002632:	4619      	mov	r1, r3
 8002634:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002638:	fb01 f303 	mul.w	r3, r1, r3
 800263c:	441a      	add	r2, r3
 800263e:	4ba8      	ldr	r3, [pc, #672]	; (80028e0 <StartDefaultTask+0x318>)
 8002640:	795b      	ldrb	r3, [r3, #5]
 8002642:	4619      	mov	r1, r3
 8002644:	2364      	movs	r3, #100	; 0x64
 8002646:	fb01 f303 	mul.w	r3, r1, r3
 800264a:	441a      	add	r2, r3
 800264c:	4ba4      	ldr	r3, [pc, #656]	; (80028e0 <StartDefaultTask+0x318>)
 800264e:	799b      	ldrb	r3, [r3, #6]
 8002650:	4619      	mov	r1, r3
 8002652:	460b      	mov	r3, r1
 8002654:	009b      	lsls	r3, r3, #2
 8002656:	440b      	add	r3, r1
 8002658:	005b      	lsls	r3, r3, #1
 800265a:	4413      	add	r3, r2
 800265c:	4aa0      	ldr	r2, [pc, #640]	; (80028e0 <StartDefaultTask+0x318>)
 800265e:	79d2      	ldrb	r2, [r2, #7]
 8002660:	441a      	add	r2, r3
 8002662:	4ba2      	ldr	r3, [pc, #648]	; (80028ec <StartDefaultTask+0x324>)
 8002664:	4413      	add	r3, r2
 8002666:	ee07 3a90 	vmov	s15, r3
 800266a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800266e:	eddf 6aa0 	vldr	s13, [pc, #640]	; 80028f0 <StartDefaultTask+0x328>
 8002672:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002676:	4b9f      	ldr	r3, [pc, #636]	; (80028f4 <StartDefaultTask+0x32c>)
 8002678:	edc3 7a00 	vstr	s15, [r3]
			  new_P = 1;
 800267c:	4b9e      	ldr	r3, [pc, #632]	; (80028f8 <StartDefaultTask+0x330>)
 800267e:	2201      	movs	r2, #1
 8002680:	701a      	strb	r2, [r3, #0]
		  }
		  if(telem[0] == 'D'){
 8002682:	4b97      	ldr	r3, [pc, #604]	; (80028e0 <StartDefaultTask+0x318>)
 8002684:	781b      	ldrb	r3, [r3, #0]
 8002686:	2b44      	cmp	r3, #68	; 0x44
 8002688:	d13e      	bne.n	8002708 <StartDefaultTask+0x140>
			  telem_D = (float)(((uint32_t)telem[1]-48)*1000000+((uint32_t)telem[2]-48)*100000+((uint32_t)telem[3]-48)*10000+((uint32_t)telem[4]-48)*1000+((uint32_t)telem[5]-48)*100+((uint32_t)telem[6]-48)*10+((uint32_t)telem[7]-48))/100000;
 800268a:	4b95      	ldr	r3, [pc, #596]	; (80028e0 <StartDefaultTask+0x318>)
 800268c:	785b      	ldrb	r3, [r3, #1]
 800268e:	461a      	mov	r2, r3
 8002690:	4b94      	ldr	r3, [pc, #592]	; (80028e4 <StartDefaultTask+0x31c>)
 8002692:	fb03 f202 	mul.w	r2, r3, r2
 8002696:	4b92      	ldr	r3, [pc, #584]	; (80028e0 <StartDefaultTask+0x318>)
 8002698:	789b      	ldrb	r3, [r3, #2]
 800269a:	4619      	mov	r1, r3
 800269c:	4b92      	ldr	r3, [pc, #584]	; (80028e8 <StartDefaultTask+0x320>)
 800269e:	fb01 f303 	mul.w	r3, r1, r3
 80026a2:	441a      	add	r2, r3
 80026a4:	4b8e      	ldr	r3, [pc, #568]	; (80028e0 <StartDefaultTask+0x318>)
 80026a6:	78db      	ldrb	r3, [r3, #3]
 80026a8:	4619      	mov	r1, r3
 80026aa:	f242 7310 	movw	r3, #10000	; 0x2710
 80026ae:	fb01 f303 	mul.w	r3, r1, r3
 80026b2:	441a      	add	r2, r3
 80026b4:	4b8a      	ldr	r3, [pc, #552]	; (80028e0 <StartDefaultTask+0x318>)
 80026b6:	791b      	ldrb	r3, [r3, #4]
 80026b8:	4619      	mov	r1, r3
 80026ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026be:	fb01 f303 	mul.w	r3, r1, r3
 80026c2:	441a      	add	r2, r3
 80026c4:	4b86      	ldr	r3, [pc, #536]	; (80028e0 <StartDefaultTask+0x318>)
 80026c6:	795b      	ldrb	r3, [r3, #5]
 80026c8:	4619      	mov	r1, r3
 80026ca:	2364      	movs	r3, #100	; 0x64
 80026cc:	fb01 f303 	mul.w	r3, r1, r3
 80026d0:	441a      	add	r2, r3
 80026d2:	4b83      	ldr	r3, [pc, #524]	; (80028e0 <StartDefaultTask+0x318>)
 80026d4:	799b      	ldrb	r3, [r3, #6]
 80026d6:	4619      	mov	r1, r3
 80026d8:	460b      	mov	r3, r1
 80026da:	009b      	lsls	r3, r3, #2
 80026dc:	440b      	add	r3, r1
 80026de:	005b      	lsls	r3, r3, #1
 80026e0:	4413      	add	r3, r2
 80026e2:	4a7f      	ldr	r2, [pc, #508]	; (80028e0 <StartDefaultTask+0x318>)
 80026e4:	79d2      	ldrb	r2, [r2, #7]
 80026e6:	441a      	add	r2, r3
 80026e8:	4b80      	ldr	r3, [pc, #512]	; (80028ec <StartDefaultTask+0x324>)
 80026ea:	4413      	add	r3, r2
 80026ec:	ee07 3a90 	vmov	s15, r3
 80026f0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80026f4:	eddf 6a7e 	vldr	s13, [pc, #504]	; 80028f0 <StartDefaultTask+0x328>
 80026f8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80026fc:	4b7f      	ldr	r3, [pc, #508]	; (80028fc <StartDefaultTask+0x334>)
 80026fe:	edc3 7a00 	vstr	s15, [r3]
			  new_D = 1;
 8002702:	4b7f      	ldr	r3, [pc, #508]	; (8002900 <StartDefaultTask+0x338>)
 8002704:	2201      	movs	r2, #1
 8002706:	701a      	strb	r2, [r3, #0]
		  }
	  }
	  if (xQueueReceive(telemetria_Queue, (void*)&telemetria_send, 0) == pdTRUE){
 8002708:	4b7e      	ldr	r3, [pc, #504]	; (8002904 <StartDefaultTask+0x33c>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8002710:	2200      	movs	r2, #0
 8002712:	4618      	mov	r0, r3
 8002714:	f00a fe6c 	bl	800d3f0 <xQueueReceive>
 8002718:	4603      	mov	r3, r0
 800271a:	2b01      	cmp	r3, #1
 800271c:	f040 80fa 	bne.w	8002914 <StartDefaultTask+0x34c>
//			  else{
//				  sprintf((char*)telemetria_data, "%4.4f\r\n", telemetria_send[i_telem_send]);
//			  }
//			  HAL_UART_Transmit (&huart2, telemetria_data, sizeof (telemetria_data), 400);
//		  }
		  if(telemetria_data_sent == 1){
 8002720:	4b79      	ldr	r3, [pc, #484]	; (8002908 <StartDefaultTask+0x340>)
 8002722:	781b      	ldrb	r3, [r3, #0]
 8002724:	2b01      	cmp	r3, #1
 8002726:	f040 80f5 	bne.w	8002914 <StartDefaultTask+0x34c>
//			  sprintf((char*)telemetria_data, "%2.2f, %2.2f, %2.2f, %3.2f, %3.2f, %3.2f, %4.1f, %4.1f, %4.1f, %3.1f, %3.1f, %3.1f, %3.1f\r\n", telemetria_send[0], telemetria_send[1], telemetria_send[2], telemetria_send[3], telemetria_send[4], telemetria_send[5], telemetria_send[6], telemetria_send[7], telemetria_send[8], telemetria_send[9], telemetria_send[10], telemetria_send[11], telemetria_send[12]); //%5.2f
			  sprintf((char*)telemetria_data, "%2.2f, %2.2f, %2.2f, %3.2f, %3.2f, %3.2f, %4.1f, %4.1f, %4.1f, %3.1f, %3.1f, %3.1f, %3.1f, %3.1f, %3.1f, %3.1f, %3.1f, %3.1f, %3.1f\r\n", telemetria_send[0], telemetria_send[1], telemetria_send[2], telemetria_send[3], telemetria_send[4], telemetria_send[5], telemetria_send[6], telemetria_send[7], telemetria_send[8], telemetria_send[9], telemetria_send[10], telemetria_send[11], telemetria_send[12],telemetria_send[13], telemetria_send[14], telemetria_send[15], telemetria_send[16], telemetria_send[17], telemetria_send[18]); //%5.2f
 800272a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800272e:	4618      	mov	r0, r3
 8002730:	f7fd ff0a 	bl	8000548 <__aeabi_f2d>
 8002734:	e9c7 011c 	strd	r0, r1, [r7, #112]	; 0x70
 8002738:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800273c:	4618      	mov	r0, r3
 800273e:	f7fd ff03 	bl	8000548 <__aeabi_f2d>
 8002742:	e9c7 011a 	strd	r0, r1, [r7, #104]	; 0x68
 8002746:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800274a:	4618      	mov	r0, r3
 800274c:	f7fd fefc 	bl	8000548 <__aeabi_f2d>
 8002750:	e9c7 0118 	strd	r0, r1, [r7, #96]	; 0x60
 8002754:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002758:	4618      	mov	r0, r3
 800275a:	f7fd fef5 	bl	8000548 <__aeabi_f2d>
 800275e:	e9c7 0116 	strd	r0, r1, [r7, #88]	; 0x58
 8002762:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002766:	4618      	mov	r0, r3
 8002768:	f7fd feee 	bl	8000548 <__aeabi_f2d>
 800276c:	e9c7 0114 	strd	r0, r1, [r7, #80]	; 0x50
 8002770:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002774:	4618      	mov	r0, r3
 8002776:	f7fd fee7 	bl	8000548 <__aeabi_f2d>
 800277a:	e9c7 0112 	strd	r0, r1, [r7, #72]	; 0x48
 800277e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002782:	4618      	mov	r0, r3
 8002784:	f7fd fee0 	bl	8000548 <__aeabi_f2d>
 8002788:	e9c7 0110 	strd	r0, r1, [r7, #64]	; 0x40
 800278c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002790:	4618      	mov	r0, r3
 8002792:	f7fd fed9 	bl	8000548 <__aeabi_f2d>
 8002796:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
 800279a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800279e:	4618      	mov	r0, r3
 80027a0:	f7fd fed2 	bl	8000548 <__aeabi_f2d>
 80027a4:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
 80027a8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80027ac:	4618      	mov	r0, r3
 80027ae:	f7fd fecb 	bl	8000548 <__aeabi_f2d>
 80027b2:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
 80027b6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80027ba:	4618      	mov	r0, r3
 80027bc:	f7fd fec4 	bl	8000548 <__aeabi_f2d>
 80027c0:	e9c7 0108 	strd	r0, r1, [r7, #32]
 80027c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80027c8:	4618      	mov	r0, r3
 80027ca:	f7fd febd 	bl	8000548 <__aeabi_f2d>
 80027ce:	e9c7 0106 	strd	r0, r1, [r7, #24]
 80027d2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80027d6:	4618      	mov	r0, r3
 80027d8:	f7fd feb6 	bl	8000548 <__aeabi_f2d>
 80027dc:	e9c7 0104 	strd	r0, r1, [r7, #16]
 80027e0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80027e4:	4618      	mov	r0, r3
 80027e6:	f7fd feaf 	bl	8000548 <__aeabi_f2d>
 80027ea:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80027ee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80027f2:	4618      	mov	r0, r3
 80027f4:	f7fd fea8 	bl	8000548 <__aeabi_f2d>
 80027f8:	e9c7 0100 	strd	r0, r1, [r7]
 80027fc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002800:	4618      	mov	r0, r3
 8002802:	f7fd fea1 	bl	8000548 <__aeabi_f2d>
 8002806:	4682      	mov	sl, r0
 8002808:	468b      	mov	fp, r1
 800280a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800280e:	4618      	mov	r0, r3
 8002810:	f7fd fe9a 	bl	8000548 <__aeabi_f2d>
 8002814:	4680      	mov	r8, r0
 8002816:	4689      	mov	r9, r1
 8002818:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800281c:	4618      	mov	r0, r3
 800281e:	f7fd fe93 	bl	8000548 <__aeabi_f2d>
 8002822:	4604      	mov	r4, r0
 8002824:	460d      	mov	r5, r1
 8002826:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800282a:	4618      	mov	r0, r3
 800282c:	f7fd fe8c 	bl	8000548 <__aeabi_f2d>
 8002830:	4602      	mov	r2, r0
 8002832:	460b      	mov	r3, r1
 8002834:	f107 00cc 	add.w	r0, r7, #204	; 0xcc
 8002838:	e9cd 2322 	strd	r2, r3, [sp, #136]	; 0x88
 800283c:	e9cd 4520 	strd	r4, r5, [sp, #128]	; 0x80
 8002840:	e9cd 891e 	strd	r8, r9, [sp, #120]	; 0x78
 8002844:	e9cd ab1c 	strd	sl, fp, [sp, #112]	; 0x70
 8002848:	ed97 7b00 	vldr	d7, [r7]
 800284c:	ed8d 7b1a 	vstr	d7, [sp, #104]	; 0x68
 8002850:	ed97 7b02 	vldr	d7, [r7, #8]
 8002854:	ed8d 7b18 	vstr	d7, [sp, #96]	; 0x60
 8002858:	ed97 7b04 	vldr	d7, [r7, #16]
 800285c:	ed8d 7b16 	vstr	d7, [sp, #88]	; 0x58
 8002860:	ed97 7b06 	vldr	d7, [r7, #24]
 8002864:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 8002868:	ed97 7b08 	vldr	d7, [r7, #32]
 800286c:	ed8d 7b12 	vstr	d7, [sp, #72]	; 0x48
 8002870:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8002874:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8002878:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 800287c:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8002880:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8002884:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8002888:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 800288c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8002890:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 8002894:	ed8d 7b08 	vstr	d7, [sp, #32]
 8002898:	ed97 7b14 	vldr	d7, [r7, #80]	; 0x50
 800289c:	ed8d 7b06 	vstr	d7, [sp, #24]
 80028a0:	ed97 7b16 	vldr	d7, [r7, #88]	; 0x58
 80028a4:	ed8d 7b04 	vstr	d7, [sp, #16]
 80028a8:	ed97 7b18 	vldr	d7, [r7, #96]	; 0x60
 80028ac:	ed8d 7b02 	vstr	d7, [sp, #8]
 80028b0:	ed97 7b1a 	vldr	d7, [r7, #104]	; 0x68
 80028b4:	ed8d 7b00 	vstr	d7, [sp]
 80028b8:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80028bc:	4913      	ldr	r1, [pc, #76]	; (800290c <StartDefaultTask+0x344>)
 80028be:	f00d f81f 	bl	800f900 <siprintf>
			  HAL_UART_Transmit_IT(&huart2, telemetria_data, sizeof (telemetria_data));
 80028c2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80028c6:	228c      	movs	r2, #140	; 0x8c
 80028c8:	4619      	mov	r1, r3
 80028ca:	4811      	ldr	r0, [pc, #68]	; (8002910 <StartDefaultTask+0x348>)
 80028cc:	f007 fc37 	bl	800a13e <HAL_UART_Transmit_IT>
			  telemetria_data_sent = 0;
 80028d0:	4b0d      	ldr	r3, [pc, #52]	; (8002908 <StartDefaultTask+0x340>)
 80028d2:	2200      	movs	r2, #0
 80028d4:	701a      	strb	r2, [r3, #0]
 80028d6:	e01d      	b.n	8002914 <StartDefaultTask+0x34c>
 80028d8:	08014438 	.word	0x08014438
 80028dc:	20000b12 	.word	0x20000b12
 80028e0:	20000000 	.word	0x20000000
 80028e4:	000f4240 	.word	0x000f4240
 80028e8:	000186a0 	.word	0x000186a0
 80028ec:	fcd232b0 	.word	0xfcd232b0
 80028f0:	47c35000 	.word	0x47c35000
 80028f4:	20000b14 	.word	0x20000b14
 80028f8:	20000b1c 	.word	0x20000b1c
 80028fc:	20000b18 	.word	0x20000b18
 8002900:	20000b1d 	.word	0x20000b1d
 8002904:	20002b14 	.word	0x20002b14
 8002908:	20000b13 	.word	0x20000b13
 800290c:	080143b0 	.word	0x080143b0
 8002910:	20000838 	.word	0x20000838
		  }
	  }


	  osDelay(10);
 8002914:	200a      	movs	r0, #10
 8002916:	f00a fae3 	bl	800cee0 <osDelay>
	  if(uart_telemetria == 1){
 800291a:	e66a      	b.n	80025f2 <StartDefaultTask+0x2a>
 800291c:	0000      	movs	r0, r0
	...

08002920 <Start_Data_Reading>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_Data_Reading */
void Start_Data_Reading(void const * argument)
{
 8002920:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002922:	f5ad 7d01 	sub.w	sp, sp, #516	; 0x204
 8002926:	af06      	add	r7, sp, #24
 8002928:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 800292c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002930:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN Start_Data_Reading */
	extern QueueHandle_t telemetria_Queue;

	//magnetometer calibration
	FusionVector magneto_offset = {-11.31, -3.64, 0.43};//{-11.8, -5.68, 3.08};
 8002932:	4a6a      	ldr	r2, [pc, #424]	; (8002adc <Start_Data_Reading+0x1bc>)
 8002934:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002938:	ca07      	ldmia	r2, {r0, r1, r2}
 800293a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	FusionMatrix magneto_transform = {1.015, 0.018, -0.002, 0.018, 1.015, -0.004, -0.002, -0.004, 0.972};
 800293e:	4b68      	ldr	r3, [pc, #416]	; (8002ae0 <Start_Data_Reading+0x1c0>)
 8002940:	f107 04ec 	add.w	r4, r7, #236	; 0xec
 8002944:	461d      	mov	r5, r3
 8002946:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002948:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800294a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800294c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800294e:	682b      	ldr	r3, [r5, #0]
 8002950:	6023      	str	r3, [r4, #0]
	FusionVector magneto_data;

	//pitch angle velocity control params
	float err_pitch = 0;
 8002952:	f04f 0300 	mov.w	r3, #0
 8002956:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
	float errd_pitch = 0;
 800295a:	f04f 0300 	mov.w	r3, #0
 800295e:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
	float prev_err_pitch = 0;
 8002962:	f04f 0300 	mov.w	r3, #0
 8002966:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
	float control_pitch = 0;
 800296a:	f04f 0300 	mov.w	r3, #0
 800296e:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
	float P_pitch = 16;//20;
 8002972:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 8002976:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
	float D_pitch = 0.1;
 800297a:	4b5a      	ldr	r3, [pc, #360]	; (8002ae4 <Start_Data_Reading+0x1c4>)
 800297c:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8

	//pitch angle control params
	float err_angle_pitch = 0;
 8002980:	f04f 0300 	mov.w	r3, #0
 8002984:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
	float errd_angle_pitch = 0;
 8002988:	f04f 0300 	mov.w	r3, #0
 800298c:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
	float prev_err_angle_pitch = 0;
 8002990:	f04f 0300 	mov.w	r3, #0
 8002994:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
	float angle_control_pitch = 0;
 8002998:	f04f 0300 	mov.w	r3, #0
 800299c:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
	float P_angle_pitch = 0.04;//0.04;
 80029a0:	4b51      	ldr	r3, [pc, #324]	; (8002ae8 <Start_Data_Reading+0x1c8>)
 80029a2:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
	float D_angle_pitch = 0.0001;
 80029a6:	4b51      	ldr	r3, [pc, #324]	; (8002aec <Start_Data_Reading+0x1cc>)
 80029a8:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194

	//roll angle velocity control params
	float err_roll = 0;
 80029ac:	f04f 0300 	mov.w	r3, #0
 80029b0:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
	float errd_roll = 0;
 80029b4:	f04f 0300 	mov.w	r3, #0
 80029b8:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
	float prev_err_roll = 0;
 80029bc:	f04f 0300 	mov.w	r3, #0
 80029c0:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
	float control_roll = 0;
 80029c4:	f04f 0300 	mov.w	r3, #0
 80029c8:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
	float P_roll = 4;//5;
 80029cc:	f04f 4381 	mov.w	r3, #1082130432	; 0x40800000
 80029d0:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
	float D_roll = 0.1;
 80029d4:	4b43      	ldr	r3, [pc, #268]	; (8002ae4 <Start_Data_Reading+0x1c4>)
 80029d6:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180

	//roll angle control params
	float P_angle_roll = 0.2;//0.2;
 80029da:	4b45      	ldr	r3, [pc, #276]	; (8002af0 <Start_Data_Reading+0x1d0>)
 80029dc:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
	float D_angle_roll = 0.0001;
 80029e0:	4b42      	ldr	r3, [pc, #264]	; (8002aec <Start_Data_Reading+0x1cc>)
 80029e2:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
	float err_angle_roll = 0;
 80029e6:	f04f 0300 	mov.w	r3, #0
 80029ea:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
	float errd_angle_roll = 0;
 80029ee:	f04f 0300 	mov.w	r3, #0
 80029f2:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
	float prev_err_angle_roll = 0;
 80029f6:	f04f 0300 	mov.w	r3, #0
 80029fa:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
	float angle_control_roll = 0;
 80029fe:	f04f 0300 	mov.w	r3, #0
 8002a02:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c

	//yaw angle velocity control params
	float err_yaw = 0;
 8002a06:	f04f 0300 	mov.w	r3, #0
 8002a0a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
	float errd_yaw = 0;
 8002a0e:	f04f 0300 	mov.w	r3, #0
 8002a12:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
	float prev_err_yaw = 0;
 8002a16:	f04f 0300 	mov.w	r3, #0
 8002a1a:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
	float control_yaw = 0;
 8002a1e:	f04f 0300 	mov.w	r3, #0
 8002a22:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
	float P_yaw = 20;
 8002a26:	4b33      	ldr	r3, [pc, #204]	; (8002af4 <Start_Data_Reading+0x1d4>)
 8002a28:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
	float D_yaw = 0.1;
 8002a2c:	4b2d      	ldr	r3, [pc, #180]	; (8002ae4 <Start_Data_Reading+0x1c4>)
 8002a2e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc

	//yaw angle control params
	float P_angle_yaw = 0.8;
 8002a32:	4b31      	ldr	r3, [pc, #196]	; (8002af8 <Start_Data_Reading+0x1d8>)
 8002a34:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
	float D_angle_yaw = 0.000;
 8002a38:	f04f 0300 	mov.w	r3, #0
 8002a3c:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
	float err_angle_yaw = 0;
 8002a40:	f04f 0300 	mov.w	r3, #0
 8002a44:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
	float errd_angle_yaw = 0;
 8002a48:	f04f 0300 	mov.w	r3, #0
 8002a4c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
	float prev_err_angle_yaw = 0;
 8002a50:	f04f 0300 	mov.w	r3, #0
 8002a54:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
	float angle_control_yaw = 0;
 8002a58:	f04f 0300 	mov.w	r3, #0
 8002a5c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c

	float yaw_angle = 0;
 8002a60:	f04f 0300 	mov.w	r3, #0
 8002a64:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
	float prev_euler_yaw = 0;
 8002a68:	f04f 0300 	mov.w	r3, #0
 8002a6c:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
	int n = 0;
 8002a70:	2300      	movs	r3, #0
 8002a72:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0



	//imu init function
	BMI088_Init(&imu, &hspi2, CS_ACC_GPIO_Port, CS_ACC_Pin, CS_GYRO_GPIO_Port, CS_GYRO_Pin);
 8002a76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a7a:	9301      	str	r3, [sp, #4]
 8002a7c:	4b1f      	ldr	r3, [pc, #124]	; (8002afc <Start_Data_Reading+0x1dc>)
 8002a7e:	9300      	str	r3, [sp, #0]
 8002a80:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a84:	4a1e      	ldr	r2, [pc, #120]	; (8002b00 <Start_Data_Reading+0x1e0>)
 8002a86:	491f      	ldr	r1, [pc, #124]	; (8002b04 <Start_Data_Reading+0x1e4>)
 8002a88:	481f      	ldr	r0, [pc, #124]	; (8002b08 <Start_Data_Reading+0x1e8>)
 8002a8a:	f001 fd0f 	bl	80044ac <BMI088_Init>


	//bmp388 pressure sensor init
	bmp._hi2c = &hi2c2;
 8002a8e:	4b1f      	ldr	r3, [pc, #124]	; (8002b0c <Start_Data_Reading+0x1ec>)
 8002a90:	4a1f      	ldr	r2, [pc, #124]	; (8002b10 <Start_Data_Reading+0x1f0>)
 8002a92:	601a      	str	r2, [r3, #0]


	BMP388_SetTempOS(&bmp, 0);
 8002a94:	2100      	movs	r1, #0
 8002a96:	481d      	ldr	r0, [pc, #116]	; (8002b0c <Start_Data_Reading+0x1ec>)
 8002a98:	f002 f879 	bl	8004b8e <BMP388_SetTempOS>
	HAL_Delay(10);
 8002a9c:	200a      	movs	r0, #10
 8002a9e:	f002 fd7d 	bl	800559c <HAL_Delay>
	BMP388_SetPressOS(&bmp, 0x03); //0 volt, de adatlap alapján 8x-nek megfelelő 0x03 beírva
 8002aa2:	2103      	movs	r1, #3
 8002aa4:	4819      	ldr	r0, [pc, #100]	; (8002b0c <Start_Data_Reading+0x1ec>)
 8002aa6:	f002 f892 	bl	8004bce <BMP388_SetPressOS>
	HAL_Delay(10);
 8002aaa:	200a      	movs	r0, #10
 8002aac:	f002 fd76 	bl	800559c <HAL_Delay>
	BMP388_SetIIRFilterCoeff(&bmp, 2);
 8002ab0:	2102      	movs	r1, #2
 8002ab2:	4816      	ldr	r0, [pc, #88]	; (8002b0c <Start_Data_Reading+0x1ec>)
 8002ab4:	f002 f8aa 	bl	8004c0c <BMP388_SetIIRFilterCoeff>
	HAL_Delay(10);
 8002ab8:	200a      	movs	r0, #10
 8002aba:	f002 fd6f 	bl	800559c <HAL_Delay>
	BMP388_SetOutputDataRate(&bmp, 0x02);
 8002abe:	2102      	movs	r1, #2
 8002ac0:	4812      	ldr	r0, [pc, #72]	; (8002b0c <Start_Data_Reading+0x1ec>)
 8002ac2:	f002 f8ba 	bl	8004c3a <BMP388_SetOutputDataRate>
	HAL_Delay(10);
 8002ac6:	200a      	movs	r0, #10
 8002ac8:	f002 fd68 	bl	800559c <HAL_Delay>
	BMP388_Init(&bmp);
 8002acc:	480f      	ldr	r0, [pc, #60]	; (8002b0c <Start_Data_Reading+0x1ec>)
 8002ace:	f001 ffe3 	bl	8004a98 <BMP388_Init>

	for(int i_init = 0; i_init<2000; i_init++ ){
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002ad8:	e077      	b.n	8002bca <Start_Data_Reading+0x2aa>
 8002ada:	bf00      	nop
 8002adc:	080144c4 	.word	0x080144c4
 8002ae0:	080144d0 	.word	0x080144d0
 8002ae4:	3dcccccd 	.word	0x3dcccccd
 8002ae8:	3d23d70a 	.word	0x3d23d70a
 8002aec:	38d1b717 	.word	0x38d1b717
 8002af0:	3e4ccccd 	.word	0x3e4ccccd
 8002af4:	41a00000 	.word	0x41a00000
 8002af8:	3f4ccccd 	.word	0x3f4ccccd
 8002afc:	40020400 	.word	0x40020400
 8002b00:	40020800 	.word	0x40020800
 8002b04:	20000634 	.word	0x20000634
 8002b08:	20000970 	.word	0x20000970
 8002b0c:	200009c0 	.word	0x200009c0
 8002b10:	2000058c 	.word	0x2000058c
	  BMP388_ReadRawPressTempTime(&bmp, &raw_press, &raw_temp, &raw_time);
 8002b14:	4bb1      	ldr	r3, [pc, #708]	; (8002ddc <Start_Data_Reading+0x4bc>)
 8002b16:	4ab2      	ldr	r2, [pc, #712]	; (8002de0 <Start_Data_Reading+0x4c0>)
 8002b18:	49b2      	ldr	r1, [pc, #712]	; (8002de4 <Start_Data_Reading+0x4c4>)
 8002b1a:	48b3      	ldr	r0, [pc, #716]	; (8002de8 <Start_Data_Reading+0x4c8>)
 8002b1c:	f002 f8a2 	bl	8004c64 <BMP388_ReadRawPressTempTime>
	  BMP388_CompensateRawPressTemp(&bmp, raw_press, raw_temp, &press, &temp);
 8002b20:	4bb0      	ldr	r3, [pc, #704]	; (8002de4 <Start_Data_Reading+0x4c4>)
 8002b22:	6819      	ldr	r1, [r3, #0]
 8002b24:	4bae      	ldr	r3, [pc, #696]	; (8002de0 <Start_Data_Reading+0x4c0>)
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	4bb0      	ldr	r3, [pc, #704]	; (8002dec <Start_Data_Reading+0x4cc>)
 8002b2a:	9300      	str	r3, [sp, #0]
 8002b2c:	4bb0      	ldr	r3, [pc, #704]	; (8002df0 <Start_Data_Reading+0x4d0>)
 8002b2e:	48ae      	ldr	r0, [pc, #696]	; (8002de8 <Start_Data_Reading+0x4c8>)
 8002b30:	f002 f8c4 	bl	8004cbc <BMP388_CompensateRawPressTemp>
	  h0 += BMP388_FindAltitude(ground_pressure, press);
 8002b34:	4bae      	ldr	r3, [pc, #696]	; (8002df0 <Start_Data_Reading+0x4d0>)
 8002b36:	edd3 7a00 	vldr	s15, [r3]
 8002b3a:	eef0 0a67 	vmov.f32	s1, s15
 8002b3e:	ed9f 0aad 	vldr	s0, [pc, #692]	; 8002df4 <Start_Data_Reading+0x4d4>
 8002b42:	f002 f8e1 	bl	8004d08 <BMP388_FindAltitude>
 8002b46:	eeb0 7a40 	vmov.f32	s14, s0
 8002b4a:	4bab      	ldr	r3, [pc, #684]	; (8002df8 <Start_Data_Reading+0x4d8>)
 8002b4c:	edd3 7a00 	vldr	s15, [r3]
 8002b50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b54:	4ba8      	ldr	r3, [pc, #672]	; (8002df8 <Start_Data_Reading+0x4d8>)
 8002b56:	edc3 7a00 	vstr	s15, [r3]
	  BMI088_ReadGyroscope(&imu);
 8002b5a:	48a8      	ldr	r0, [pc, #672]	; (8002dfc <Start_Data_Reading+0x4dc>)
 8002b5c:	f001 ff24 	bl	80049a8 <BMI088_ReadGyroscope>
	  gyro_offset_x_calc += imu.gyr_rps[0];
 8002b60:	4ba6      	ldr	r3, [pc, #664]	; (8002dfc <Start_Data_Reading+0x4dc>)
 8002b62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b64:	4618      	mov	r0, r3
 8002b66:	f7fd fcef 	bl	8000548 <__aeabi_f2d>
 8002b6a:	4ba5      	ldr	r3, [pc, #660]	; (8002e00 <Start_Data_Reading+0x4e0>)
 8002b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b70:	f7fd fb8c 	bl	800028c <__adddf3>
 8002b74:	4602      	mov	r2, r0
 8002b76:	460b      	mov	r3, r1
 8002b78:	49a1      	ldr	r1, [pc, #644]	; (8002e00 <Start_Data_Reading+0x4e0>)
 8002b7a:	e9c1 2300 	strd	r2, r3, [r1]
	  gyro_offset_y_calc += imu.gyr_rps[1];
 8002b7e:	4b9f      	ldr	r3, [pc, #636]	; (8002dfc <Start_Data_Reading+0x4dc>)
 8002b80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b82:	4618      	mov	r0, r3
 8002b84:	f7fd fce0 	bl	8000548 <__aeabi_f2d>
 8002b88:	4b9e      	ldr	r3, [pc, #632]	; (8002e04 <Start_Data_Reading+0x4e4>)
 8002b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b8e:	f7fd fb7d 	bl	800028c <__adddf3>
 8002b92:	4602      	mov	r2, r0
 8002b94:	460b      	mov	r3, r1
 8002b96:	499b      	ldr	r1, [pc, #620]	; (8002e04 <Start_Data_Reading+0x4e4>)
 8002b98:	e9c1 2300 	strd	r2, r3, [r1]
	  gyro_offset_z_calc += imu.gyr_rps[2];
 8002b9c:	4b97      	ldr	r3, [pc, #604]	; (8002dfc <Start_Data_Reading+0x4dc>)
 8002b9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f7fd fcd1 	bl	8000548 <__aeabi_f2d>
 8002ba6:	4b98      	ldr	r3, [pc, #608]	; (8002e08 <Start_Data_Reading+0x4e8>)
 8002ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bac:	f7fd fb6e 	bl	800028c <__adddf3>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	460b      	mov	r3, r1
 8002bb4:	4994      	ldr	r1, [pc, #592]	; (8002e08 <Start_Data_Reading+0x4e8>)
 8002bb6:	e9c1 2300 	strd	r2, r3, [r1]
	  HAL_Delay(1);
 8002bba:	2001      	movs	r0, #1
 8002bbc:	f002 fcee 	bl	800559c <HAL_Delay>
	for(int i_init = 0; i_init<2000; i_init++ ){
 8002bc0:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8002bc4:	3301      	adds	r3, #1
 8002bc6:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002bca:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8002bce:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002bd2:	db9f      	blt.n	8002b14 <Start_Data_Reading+0x1f4>
	}
	h0 /= 2000;
 8002bd4:	4b88      	ldr	r3, [pc, #544]	; (8002df8 <Start_Data_Reading+0x4d8>)
 8002bd6:	ed93 7a00 	vldr	s14, [r3]
 8002bda:	eddf 6a8c 	vldr	s13, [pc, #560]	; 8002e0c <Start_Data_Reading+0x4ec>
 8002bde:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002be2:	4b85      	ldr	r3, [pc, #532]	; (8002df8 <Start_Data_Reading+0x4d8>)
 8002be4:	edc3 7a00 	vstr	s15, [r3]
	gyro_offset_x = gyro_offset_x_calc/2000;
 8002be8:	4b85      	ldr	r3, [pc, #532]	; (8002e00 <Start_Data_Reading+0x4e0>)
 8002bea:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002bee:	f04f 0200 	mov.w	r2, #0
 8002bf2:	4b87      	ldr	r3, [pc, #540]	; (8002e10 <Start_Data_Reading+0x4f0>)
 8002bf4:	f7fd fe2a 	bl	800084c <__aeabi_ddiv>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	460b      	mov	r3, r1
 8002bfc:	4985      	ldr	r1, [pc, #532]	; (8002e14 <Start_Data_Reading+0x4f4>)
 8002bfe:	e9c1 2300 	strd	r2, r3, [r1]
	gyro_offset_y = gyro_offset_y_calc/2000;
 8002c02:	4b80      	ldr	r3, [pc, #512]	; (8002e04 <Start_Data_Reading+0x4e4>)
 8002c04:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002c08:	f04f 0200 	mov.w	r2, #0
 8002c0c:	4b80      	ldr	r3, [pc, #512]	; (8002e10 <Start_Data_Reading+0x4f0>)
 8002c0e:	f7fd fe1d 	bl	800084c <__aeabi_ddiv>
 8002c12:	4602      	mov	r2, r0
 8002c14:	460b      	mov	r3, r1
 8002c16:	4980      	ldr	r1, [pc, #512]	; (8002e18 <Start_Data_Reading+0x4f8>)
 8002c18:	e9c1 2300 	strd	r2, r3, [r1]
	gyro_offset_z = gyro_offset_z_calc/2000;
 8002c1c:	4b7a      	ldr	r3, [pc, #488]	; (8002e08 <Start_Data_Reading+0x4e8>)
 8002c1e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002c22:	f04f 0200 	mov.w	r2, #0
 8002c26:	4b7a      	ldr	r3, [pc, #488]	; (8002e10 <Start_Data_Reading+0x4f0>)
 8002c28:	f7fd fe10 	bl	800084c <__aeabi_ddiv>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	460b      	mov	r3, r1
 8002c30:	497a      	ldr	r1, [pc, #488]	; (8002e1c <Start_Data_Reading+0x4fc>)
 8002c32:	e9c1 2300 	strd	r2, r3, [r1]

//	BMM150_Init(&bmm);
//	HAL_Delay(10);
//	BMM150_Get_TrimData(&bmm, &trim_data);

	uint8_t transmit_data[60] = "Hello Andris\r\n";
 8002c36:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8002c3a:	f5a3 75a2 	sub.w	r5, r3, #324	; 0x144
 8002c3e:	4b78      	ldr	r3, [pc, #480]	; (8002e20 <Start_Data_Reading+0x500>)
 8002c40:	462c      	mov	r4, r5
 8002c42:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002c44:	c407      	stmia	r4!, {r0, r1, r2}
 8002c46:	8023      	strh	r3, [r4, #0]
 8002c48:	3402      	adds	r4, #2
 8002c4a:	0c1b      	lsrs	r3, r3, #16
 8002c4c:	7023      	strb	r3, [r4, #0]
 8002c4e:	f105 030f 	add.w	r3, r5, #15
 8002c52:	222d      	movs	r2, #45	; 0x2d
 8002c54:	2100      	movs	r1, #0
 8002c56:	4618      	mov	r0, r3
 8002c58:	f00c f9e0 	bl	800f01c <memset>
	float telemetria_float[19];



	q.SEq_1=1;
 8002c5c:	4b71      	ldr	r3, [pc, #452]	; (8002e24 <Start_Data_Reading+0x504>)
 8002c5e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002c62:	601a      	str	r2, [r3, #0]
	q.SEq_2=0;
 8002c64:	4b6f      	ldr	r3, [pc, #444]	; (8002e24 <Start_Data_Reading+0x504>)
 8002c66:	f04f 0200 	mov.w	r2, #0
 8002c6a:	605a      	str	r2, [r3, #4]
	q.SEq_3=0;
 8002c6c:	4b6d      	ldr	r3, [pc, #436]	; (8002e24 <Start_Data_Reading+0x504>)
 8002c6e:	f04f 0200 	mov.w	r2, #0
 8002c72:	609a      	str	r2, [r3, #8]
	q.SEq_4=0;
 8002c74:	4b6b      	ldr	r3, [pc, #428]	; (8002e24 <Start_Data_Reading+0x504>)
 8002c76:	f04f 0200 	mov.w	r2, #0
 8002c7a:	60da      	str	r2, [r3, #12]

	w.w_bx=0;
 8002c7c:	4b6a      	ldr	r3, [pc, #424]	; (8002e28 <Start_Data_Reading+0x508>)
 8002c7e:	f04f 0200 	mov.w	r2, #0
 8002c82:	601a      	str	r2, [r3, #0]
	w.w_by=0;
 8002c84:	4b68      	ldr	r3, [pc, #416]	; (8002e28 <Start_Data_Reading+0x508>)
 8002c86:	f04f 0200 	mov.w	r2, #0
 8002c8a:	605a      	str	r2, [r3, #4]
	w.w_bz=0;
 8002c8c:	4b66      	ldr	r3, [pc, #408]	; (8002e28 <Start_Data_Reading+0x508>)
 8002c8e:	f04f 0200 	mov.w	r2, #0
 8002c92:	609a      	str	r2, [r3, #8]
//	P_prev.a32 = 0;
//	P_prev.a33 = 0;
//	meas.a11=0;
//	meas.a21=0;

	HAL_TIM_Base_Start_IT(&htim6);
 8002c94:	4865      	ldr	r0, [pc, #404]	; (8002e2c <Start_Data_Reading+0x50c>)
 8002c96:	f005 feeb 	bl	8008a70 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim7);
 8002c9a:	4865      	ldr	r0, [pc, #404]	; (8002e30 <Start_Data_Reading+0x510>)
 8002c9c:	f005 fee8 	bl	8008a70 <HAL_TIM_Base_Start_IT>
	FusionAhrsInitialise(&ahrs);
 8002ca0:	4864      	ldr	r0, [pc, #400]	; (8002e34 <Start_Data_Reading+0x514>)
 8002ca2:	f009 f841 	bl	800bd28 <FusionAhrsInitialise>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	2108      	movs	r1, #8
 8002caa:	4863      	ldr	r0, [pc, #396]	; (8002e38 <Start_Data_Reading+0x518>)
 8002cac:	f003 fdac 	bl	8006808 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8002cb0:	2064      	movs	r0, #100	; 0x64
 8002cb2:	f002 fc73 	bl	800559c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	2108      	movs	r1, #8
 8002cba:	485f      	ldr	r0, [pc, #380]	; (8002e38 <Start_Data_Reading+0x518>)
 8002cbc:	f003 fda4 	bl	8006808 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8002cc0:	2064      	movs	r0, #100	; 0x64
 8002cc2:	f002 fc6b 	bl	800559c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	2108      	movs	r1, #8
 8002cca:	485b      	ldr	r0, [pc, #364]	; (8002e38 <Start_Data_Reading+0x518>)
 8002ccc:	f003 fd9c 	bl	8006808 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8002cd0:	2064      	movs	r0, #100	; 0x64
 8002cd2:	f002 fc63 	bl	800559c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	2108      	movs	r1, #8
 8002cda:	4857      	ldr	r0, [pc, #348]	; (8002e38 <Start_Data_Reading+0x518>)
 8002cdc:	f003 fd94 	bl	8006808 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8002ce0:	2064      	movs	r0, #100	; 0x64
 8002ce2:	f002 fc5b 	bl	800559c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	2108      	movs	r1, #8
 8002cea:	4853      	ldr	r0, [pc, #332]	; (8002e38 <Start_Data_Reading+0x518>)
 8002cec:	f003 fd8c 	bl	8006808 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8002cf0:	2064      	movs	r0, #100	; 0x64
 8002cf2:	f002 fc53 	bl	800559c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	2108      	movs	r1, #8
 8002cfa:	484f      	ldr	r0, [pc, #316]	; (8002e38 <Start_Data_Reading+0x518>)
 8002cfc:	f003 fd84 	bl	8006808 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8002d00:	2064      	movs	r0, #100	; 0x64
 8002d02:	f002 fc4b 	bl	800559c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8002d06:	2200      	movs	r2, #0
 8002d08:	2108      	movs	r1, #8
 8002d0a:	484b      	ldr	r0, [pc, #300]	; (8002e38 <Start_Data_Reading+0x518>)
 8002d0c:	f003 fd7c 	bl	8006808 <HAL_GPIO_WritePin>

	HAL_UART_Receive_DMA(&huart1, UART1_rxBuffer, bytetoread);
 8002d10:	4b4a      	ldr	r3, [pc, #296]	; (8002e3c <Start_Data_Reading+0x51c>)
 8002d12:	781b      	ldrb	r3, [r3, #0]
 8002d14:	b29b      	uxth	r3, r3
 8002d16:	461a      	mov	r2, r3
 8002d18:	4949      	ldr	r1, [pc, #292]	; (8002e40 <Start_Data_Reading+0x520>)
 8002d1a:	484a      	ldr	r0, [pc, #296]	; (8002e44 <Start_Data_Reading+0x524>)
 8002d1c:	f007 fa54 	bl	800a1c8 <HAL_UART_Receive_DMA>
	HAL_UART_Transmit_IT(&huart2, transmit_data, sizeof (transmit_data));
 8002d20:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002d24:	223c      	movs	r2, #60	; 0x3c
 8002d26:	4619      	mov	r1, r3
 8002d28:	4847      	ldr	r0, [pc, #284]	; (8002e48 <Start_Data_Reading+0x528>)
 8002d2a:	f007 fa08 	bl	800a13e <HAL_UART_Transmit_IT>
//	HAL_UART_Receive_IT(&huart2, telem, 11);


	vTaskResume( defaultTaskHandle );
 8002d2e:	4b47      	ldr	r3, [pc, #284]	; (8002e4c <Start_Data_Reading+0x52c>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4618      	mov	r0, r3
 8002d34:	f00a ffd8 	bl	800dce8 <vTaskResume>

  /* Infinite loop */
  for(;;)
  {

	  	  mytimer = __HAL_TIM_GET_COUNTER(&htim7);
 8002d38:	4b3d      	ldr	r3, [pc, #244]	; (8002e30 <Start_Data_Reading+0x510>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d3e:	461a      	mov	r2, r3
 8002d40:	4b43      	ldr	r3, [pc, #268]	; (8002e50 <Start_Data_Reading+0x530>)
 8002d42:	601a      	str	r2, [r3, #0]
	  	  htim7.Instance->CNT = 0;
 8002d44:	4b3a      	ldr	r3, [pc, #232]	; (8002e30 <Start_Data_Reading+0x510>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	625a      	str	r2, [r3, #36]	; 0x24

		  // magnetic field data in uT
//		  mag_data_x = BMM150_Compensate_x(field_x, Rhall,  &trim_data); //magn data compensation 33.4 us
//		  mag_data_y = BMM150_Compensate_y(field_y, Rhall,  &trim_data);
//		  mag_data_z = BMM150_Compensate_z(field_z, Rhall,  &trim_data);
		  magneto_data.axis.x = mag_data_y;
 8002d4c:	4b41      	ldr	r3, [pc, #260]	; (8002e54 <Start_Data_Reading+0x534>)
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8002d54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002d58:	601a      	str	r2, [r3, #0]
		  magneto_data.axis.y = -mag_data_x;
 8002d5a:	4b3f      	ldr	r3, [pc, #252]	; (8002e58 <Start_Data_Reading+0x538>)
 8002d5c:	edd3 7a00 	vldr	s15, [r3]
 8002d60:	eef1 7a67 	vneg.f32	s15, s15
 8002d64:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8002d68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002d6c:	edc3 7a01 	vstr	s15, [r3, #4]
		  magneto_data.axis.z = mag_data_z;
 8002d70:	4b3a      	ldr	r3, [pc, #232]	; (8002e5c <Start_Data_Reading+0x53c>)
 8002d72:	681a      	ldr	r2, [r3, #0]
 8002d74:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8002d78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002d7c:	609a      	str	r2, [r3, #8]

		  if(i_mag < 1000){
 8002d7e:	4b38      	ldr	r3, [pc, #224]	; (8002e60 <Start_Data_Reading+0x540>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d86:	da14      	bge.n	8002db2 <Start_Data_Reading+0x492>
			  mag_debug_x[i_mag] = mag_data_x;
 8002d88:	4b35      	ldr	r3, [pc, #212]	; (8002e60 <Start_Data_Reading+0x540>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a32      	ldr	r2, [pc, #200]	; (8002e58 <Start_Data_Reading+0x538>)
 8002d8e:	6812      	ldr	r2, [r2, #0]
 8002d90:	4934      	ldr	r1, [pc, #208]	; (8002e64 <Start_Data_Reading+0x544>)
 8002d92:	009b      	lsls	r3, r3, #2
 8002d94:	440b      	add	r3, r1
 8002d96:	601a      	str	r2, [r3, #0]
			  mag_debug_y[i_mag] = mag_data_y;
 8002d98:	4b31      	ldr	r3, [pc, #196]	; (8002e60 <Start_Data_Reading+0x540>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a2d      	ldr	r2, [pc, #180]	; (8002e54 <Start_Data_Reading+0x534>)
 8002d9e:	6812      	ldr	r2, [r2, #0]
 8002da0:	4931      	ldr	r1, [pc, #196]	; (8002e68 <Start_Data_Reading+0x548>)
 8002da2:	009b      	lsls	r3, r3, #2
 8002da4:	440b      	add	r3, r1
 8002da6:	601a      	str	r2, [r3, #0]
			  i_mag++;
 8002da8:	4b2d      	ldr	r3, [pc, #180]	; (8002e60 <Start_Data_Reading+0x540>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	3301      	adds	r3, #1
 8002dae:	4a2c      	ldr	r2, [pc, #176]	; (8002e60 <Start_Data_Reading+0x540>)
 8002db0:	6013      	str	r3, [r2, #0]
		  }

		  //read IMU
		  BMI088_ReadGyroscope(&imu);	// imu read 119 us
 8002db2:	4812      	ldr	r0, [pc, #72]	; (8002dfc <Start_Data_Reading+0x4dc>)
 8002db4:	f001 fdf8 	bl	80049a8 <BMI088_ReadGyroscope>
		  BMI088_ReadAccelerometer(&imu);
 8002db8:	4810      	ldr	r0, [pc, #64]	; (8002dfc <Start_Data_Reading+0x4dc>)
 8002dba:	f001 fd81 	bl	80048c0 <BMI088_ReadAccelerometer>
		  //filterUpdate((imu.gyr_rps[0]-gyro_offset_x), (imu.gyr_rps[1]-gyro_offset_y), imu.gyr_rps[2], imu.acc_mps2[0], imu.acc_mps2[1], (imu.gyr_rps[2]-gyro_offset_z), mag_data_y, -mag_data_x, mag_data_z, &q, &f, &w);


		  //eulerAngles(q, &roll, &pitch, &yaw);

		  gyro_x_degree = ((imu.gyr_rps[0]-gyro_offset_x)*57.29);
 8002dbe:	4b0f      	ldr	r3, [pc, #60]	; (8002dfc <Start_Data_Reading+0x4dc>)
 8002dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f7fd fbc0 	bl	8000548 <__aeabi_f2d>
 8002dc8:	4b12      	ldr	r3, [pc, #72]	; (8002e14 <Start_Data_Reading+0x4f4>)
 8002dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dce:	f7fd fa5b 	bl	8000288 <__aeabi_dsub>
 8002dd2:	4602      	mov	r2, r0
 8002dd4:	460b      	mov	r3, r1
 8002dd6:	4610      	mov	r0, r2
 8002dd8:	4619      	mov	r1, r3
 8002dda:	e047      	b.n	8002e6c <Start_Data_Reading+0x54c>
 8002ddc:	20000a18 	.word	0x20000a18
 8002de0:	20000a14 	.word	0x20000a14
 8002de4:	20000a10 	.word	0x20000a10
 8002de8:	200009c0 	.word	0x200009c0
 8002dec:	20000a20 	.word	0x20000a20
 8002df0:	20000a1c 	.word	0x20000a1c
 8002df4:	47c5f400 	.word	0x47c5f400
 8002df8:	20000a24 	.word	0x20000a24
 8002dfc:	20000970 	.word	0x20000970
 8002e00:	20000b30 	.word	0x20000b30
 8002e04:	20000b38 	.word	0x20000b38
 8002e08:	20000b40 	.word	0x20000b40
 8002e0c:	44fa0000 	.word	0x44fa0000
 8002e10:	409f4000 	.word	0x409f4000
 8002e14:	20000b48 	.word	0x20000b48
 8002e18:	20000b50 	.word	0x20000b50
 8002e1c:	20000b58 	.word	0x20000b58
 8002e20:	080144f4 	.word	0x080144f4
 8002e24:	20000a34 	.word	0x20000a34
 8002e28:	20000a44 	.word	0x20000a44
 8002e2c:	20000764 	.word	0x20000764
 8002e30:	200007ac 	.word	0x200007ac
 8002e34:	20000a54 	.word	0x20000a54
 8002e38:	40020400 	.word	0x40020400
 8002e3c:	2000000a 	.word	0x2000000a
 8002e40:	20002af0 	.word	0x20002af0
 8002e44:	200007f4 	.word	0x200007f4
 8002e48:	20000838 	.word	0x20000838
 8002e4c:	20000964 	.word	0x20000964
 8002e50:	20000b28 	.word	0x20000b28
 8002e54:	20000a04 	.word	0x20000a04
 8002e58:	20000a00 	.word	0x20000a00
 8002e5c:	20000a08 	.word	0x20000a08
 8002e60:	20002aa0 	.word	0x20002aa0
 8002e64:	20000b60 	.word	0x20000b60
 8002e68:	20001b00 	.word	0x20001b00
 8002e6c:	a3dc      	add	r3, pc, #880	; (adr r3, 80031e0 <Start_Data_Reading+0x8c0>)
 8002e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e72:	f7fd fbc1 	bl	80005f8 <__aeabi_dmul>
 8002e76:	4602      	mov	r2, r0
 8002e78:	460b      	mov	r3, r1
 8002e7a:	4610      	mov	r0, r2
 8002e7c:	4619      	mov	r1, r3
 8002e7e:	f7fd feb3 	bl	8000be8 <__aeabi_d2f>
 8002e82:	4603      	mov	r3, r0
 8002e84:	4ada      	ldr	r2, [pc, #872]	; (80031f0 <Start_Data_Reading+0x8d0>)
 8002e86:	6013      	str	r3, [r2, #0]
		  gyro_y_degree = ((imu.gyr_rps[1]-gyro_offset_x)*57.29);
 8002e88:	4bda      	ldr	r3, [pc, #872]	; (80031f4 <Start_Data_Reading+0x8d4>)
 8002e8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f7fd fb5b 	bl	8000548 <__aeabi_f2d>
 8002e92:	4bd9      	ldr	r3, [pc, #868]	; (80031f8 <Start_Data_Reading+0x8d8>)
 8002e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e98:	f7fd f9f6 	bl	8000288 <__aeabi_dsub>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	460b      	mov	r3, r1
 8002ea0:	4610      	mov	r0, r2
 8002ea2:	4619      	mov	r1, r3
 8002ea4:	a3ce      	add	r3, pc, #824	; (adr r3, 80031e0 <Start_Data_Reading+0x8c0>)
 8002ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eaa:	f7fd fba5 	bl	80005f8 <__aeabi_dmul>
 8002eae:	4602      	mov	r2, r0
 8002eb0:	460b      	mov	r3, r1
 8002eb2:	4610      	mov	r0, r2
 8002eb4:	4619      	mov	r1, r3
 8002eb6:	f7fd fe97 	bl	8000be8 <__aeabi_d2f>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	4acf      	ldr	r2, [pc, #828]	; (80031fc <Start_Data_Reading+0x8dc>)
 8002ebe:	6013      	str	r3, [r2, #0]
		  gyro_z_degree = ((imu.gyr_rps[2]-gyro_offset_x)*57.29);
 8002ec0:	4bcc      	ldr	r3, [pc, #816]	; (80031f4 <Start_Data_Reading+0x8d4>)
 8002ec2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f7fd fb3f 	bl	8000548 <__aeabi_f2d>
 8002eca:	4bcb      	ldr	r3, [pc, #812]	; (80031f8 <Start_Data_Reading+0x8d8>)
 8002ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ed0:	f7fd f9da 	bl	8000288 <__aeabi_dsub>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	460b      	mov	r3, r1
 8002ed8:	4610      	mov	r0, r2
 8002eda:	4619      	mov	r1, r3
 8002edc:	a3c0      	add	r3, pc, #768	; (adr r3, 80031e0 <Start_Data_Reading+0x8c0>)
 8002ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ee2:	f7fd fb89 	bl	80005f8 <__aeabi_dmul>
 8002ee6:	4602      	mov	r2, r0
 8002ee8:	460b      	mov	r3, r1
 8002eea:	4610      	mov	r0, r2
 8002eec:	4619      	mov	r1, r3
 8002eee:	f7fd fe7b 	bl	8000be8 <__aeabi_d2f>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	4ac2      	ldr	r2, [pc, #776]	; (8003200 <Start_Data_Reading+0x8e0>)
 8002ef6:	6013      	str	r3, [r2, #0]


		  magneto_data = FusionVectorSubtract(magneto_data, magneto_offset);
 8002ef8:	ed97 5a44 	vldr	s10, [r7, #272]	; 0x110
 8002efc:	edd7 5a45 	vldr	s11, [r7, #276]	; 0x114
 8002f00:	ed97 6a46 	vldr	s12, [r7, #280]	; 0x118
 8002f04:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8002f08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002f0c:	edd3 6a00 	vldr	s13, [r3]
 8002f10:	ed93 7a01 	vldr	s14, [r3, #4]
 8002f14:	edd3 7a02 	vldr	s15, [r3, #8]
 8002f18:	eef0 1a45 	vmov.f32	s3, s10
 8002f1c:	eeb0 2a65 	vmov.f32	s4, s11
 8002f20:	eef0 2a46 	vmov.f32	s5, s12
 8002f24:	eeb0 0a66 	vmov.f32	s0, s13
 8002f28:	eef0 0a47 	vmov.f32	s1, s14
 8002f2c:	eeb0 1a67 	vmov.f32	s2, s15
 8002f30:	f7fe f886 	bl	8001040 <FusionVectorSubtract>
 8002f34:	eef0 6a40 	vmov.f32	s13, s0
 8002f38:	eeb0 7a60 	vmov.f32	s14, s1
 8002f3c:	eef0 7a41 	vmov.f32	s15, s2
 8002f40:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8002f44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002f48:	edc3 6a00 	vstr	s13, [r3]
 8002f4c:	ed83 7a01 	vstr	s14, [r3, #4]
 8002f50:	edc3 7a02 	vstr	s15, [r3, #8]
//		  magneto_data = FusionMatrixMultiplyVector(magneto_transform, FusionVectorSubtract(magneto_data, magneto_offset));

		  const FusionVector gyroscope = {gyro_x_degree, gyro_y_degree, gyro_z_degree};
 8002f54:	4ba6      	ldr	r3, [pc, #664]	; (80031f0 <Start_Data_Reading+0x8d0>)
 8002f56:	681a      	ldr	r2, [r3, #0]
 8002f58:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8002f5c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002f60:	601a      	str	r2, [r3, #0]
 8002f62:	4ba6      	ldr	r3, [pc, #664]	; (80031fc <Start_Data_Reading+0x8dc>)
 8002f64:	681a      	ldr	r2, [r3, #0]
 8002f66:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8002f6a:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002f6e:	605a      	str	r2, [r3, #4]
 8002f70:	4ba3      	ldr	r3, [pc, #652]	; (8003200 <Start_Data_Reading+0x8e0>)
 8002f72:	681a      	ldr	r2, [r3, #0]
 8002f74:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8002f78:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002f7c:	609a      	str	r2, [r3, #8]
		  const FusionVector accelerometer = {imu.acc_mps2[0]/9.81, imu.acc_mps2[1]/9.81, imu.acc_mps2[2]/9.81};
 8002f7e:	4b9d      	ldr	r3, [pc, #628]	; (80031f4 <Start_Data_Reading+0x8d4>)
 8002f80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f82:	4618      	mov	r0, r3
 8002f84:	f7fd fae0 	bl	8000548 <__aeabi_f2d>
 8002f88:	a397      	add	r3, pc, #604	; (adr r3, 80031e8 <Start_Data_Reading+0x8c8>)
 8002f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f8e:	f7fd fc5d 	bl	800084c <__aeabi_ddiv>
 8002f92:	4602      	mov	r2, r0
 8002f94:	460b      	mov	r3, r1
 8002f96:	4610      	mov	r0, r2
 8002f98:	4619      	mov	r1, r3
 8002f9a:	f7fd fe25 	bl	8000be8 <__aeabi_d2f>
 8002f9e:	4602      	mov	r2, r0
 8002fa0:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8002fa4:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002fa8:	601a      	str	r2, [r3, #0]
 8002faa:	4b92      	ldr	r3, [pc, #584]	; (80031f4 <Start_Data_Reading+0x8d4>)
 8002fac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f7fd faca 	bl	8000548 <__aeabi_f2d>
 8002fb4:	a38c      	add	r3, pc, #560	; (adr r3, 80031e8 <Start_Data_Reading+0x8c8>)
 8002fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fba:	f7fd fc47 	bl	800084c <__aeabi_ddiv>
 8002fbe:	4602      	mov	r2, r0
 8002fc0:	460b      	mov	r3, r1
 8002fc2:	4610      	mov	r0, r2
 8002fc4:	4619      	mov	r1, r3
 8002fc6:	f7fd fe0f 	bl	8000be8 <__aeabi_d2f>
 8002fca:	4602      	mov	r2, r0
 8002fcc:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8002fd0:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002fd4:	605a      	str	r2, [r3, #4]
 8002fd6:	4b87      	ldr	r3, [pc, #540]	; (80031f4 <Start_Data_Reading+0x8d4>)
 8002fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f7fd fab4 	bl	8000548 <__aeabi_f2d>
 8002fe0:	a381      	add	r3, pc, #516	; (adr r3, 80031e8 <Start_Data_Reading+0x8c8>)
 8002fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fe6:	f7fd fc31 	bl	800084c <__aeabi_ddiv>
 8002fea:	4602      	mov	r2, r0
 8002fec:	460b      	mov	r3, r1
 8002fee:	4610      	mov	r0, r2
 8002ff0:	4619      	mov	r1, r3
 8002ff2:	f7fd fdf9 	bl	8000be8 <__aeabi_d2f>
 8002ff6:	4602      	mov	r2, r0
 8002ff8:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8002ffc:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003000:	609a      	str	r2, [r3, #8]
		  const FusionVector magnetometer = {magneto_data.axis.x, magneto_data.axis.y, magneto_data.axis.z};
 8003002:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8003006:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800300a:	681a      	ldr	r2, [r3, #0]
 800300c:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8003010:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003014:	601a      	str	r2, [r3, #0]
 8003016:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 800301a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800301e:	685a      	ldr	r2, [r3, #4]
 8003020:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8003024:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003028:	605a      	str	r2, [r3, #4]
 800302a:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 800302e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003032:	689a      	ldr	r2, [r3, #8]
 8003034:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8003038:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800303c:	609a      	str	r2, [r3, #8]


		  //no magnetometer AHRS
		  FusionAhrsUpdateNoMagnetometer(&ahrs, gyroscope, accelerometer, SAMPLE_PERIOD);
 800303e:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8003042:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003046:	ed93 5a00 	vldr	s10, [r3]
 800304a:	edd3 5a01 	vldr	s11, [r3, #4]
 800304e:	ed93 6a02 	vldr	s12, [r3, #8]
 8003052:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8003056:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800305a:	edd3 6a00 	vldr	s13, [r3]
 800305e:	ed93 7a01 	vldr	s14, [r3, #4]
 8003062:	edd3 7a02 	vldr	s15, [r3, #8]
 8003066:	ed9f 3a67 	vldr	s6, [pc, #412]	; 8003204 <Start_Data_Reading+0x8e4>
 800306a:	eef0 1a45 	vmov.f32	s3, s10
 800306e:	eeb0 2a65 	vmov.f32	s4, s11
 8003072:	eef0 2a46 	vmov.f32	s5, s12
 8003076:	eeb0 0a66 	vmov.f32	s0, s13
 800307a:	eef0 0a47 	vmov.f32	s1, s14
 800307e:	eeb0 1a67 	vmov.f32	s2, s15
 8003082:	4861      	ldr	r0, [pc, #388]	; (8003208 <Start_Data_Reading+0x8e8>)
 8003084:	f009 fdae 	bl	800cbe4 <FusionAhrsUpdateNoMagnetometer>

		  //magnetometer AHRS
//		  FusionAhrsUpdate(&ahrs, gyroscope, accelerometer, magnetometer, SAMPLE_PERIOD);

		  euler = FusionQuaternionToEuler(FusionAhrsGetQuaternion(&ahrs));
 8003088:	485f      	ldr	r0, [pc, #380]	; (8003208 <Start_Data_Reading+0x8e8>)
 800308a:	f009 fe05 	bl	800cc98 <FusionAhrsGetQuaternion>
 800308e:	eeb0 6a40 	vmov.f32	s12, s0
 8003092:	eef0 6a60 	vmov.f32	s13, s1
 8003096:	eeb0 7a41 	vmov.f32	s14, s2
 800309a:	eef0 7a61 	vmov.f32	s15, s3
 800309e:	ed87 6a47 	vstr	s12, [r7, #284]	; 0x11c
 80030a2:	edc7 6a48 	vstr	s13, [r7, #288]	; 0x120
 80030a6:	ed87 7a49 	vstr	s14, [r7, #292]	; 0x124
 80030aa:	edc7 7a4a 	vstr	s15, [r7, #296]	; 0x128
 80030ae:	ed97 6a47 	vldr	s12, [r7, #284]	; 0x11c
 80030b2:	edd7 6a48 	vldr	s13, [r7, #288]	; 0x120
 80030b6:	ed97 7a49 	vldr	s14, [r7, #292]	; 0x124
 80030ba:	edd7 7a4a 	vldr	s15, [r7, #296]	; 0x128
 80030be:	eeb0 0a46 	vmov.f32	s0, s12
 80030c2:	eef0 0a66 	vmov.f32	s1, s13
 80030c6:	eeb0 1a47 	vmov.f32	s2, s14
 80030ca:	eef0 1a67 	vmov.f32	s3, s15
 80030ce:	f7fe f98e 	bl	80013ee <FusionQuaternionToEuler>
 80030d2:	eef0 6a40 	vmov.f32	s13, s0
 80030d6:	eeb0 7a60 	vmov.f32	s14, s1
 80030da:	eef0 7a41 	vmov.f32	s15, s2
 80030de:	4b4b      	ldr	r3, [pc, #300]	; (800320c <Start_Data_Reading+0x8ec>)
 80030e0:	edc3 6a00 	vstr	s13, [r3]
 80030e4:	ed83 7a01 	vstr	s14, [r3, #4]
 80030e8:	edc3 7a02 	vstr	s15, [r3, #8]
		  // Rotation matrix from sensor frame to earth(NWU) frame
		  ERS = FusionQuaternionToMatrix(FusionAhrsGetQuaternion(&ahrs));
 80030ec:	4846      	ldr	r0, [pc, #280]	; (8003208 <Start_Data_Reading+0x8e8>)
 80030ee:	f009 fdd3 	bl	800cc98 <FusionAhrsGetQuaternion>
 80030f2:	eeb0 6a40 	vmov.f32	s12, s0
 80030f6:	eef0 6a60 	vmov.f32	s13, s1
 80030fa:	eeb0 7a41 	vmov.f32	s14, s2
 80030fe:	eef0 7a61 	vmov.f32	s15, s3
 8003102:	ed87 6a4b 	vstr	s12, [r7, #300]	; 0x12c
 8003106:	edc7 6a4c 	vstr	s13, [r7, #304]	; 0x130
 800310a:	ed87 7a4d 	vstr	s14, [r7, #308]	; 0x134
 800310e:	edc7 7a4e 	vstr	s15, [r7, #312]	; 0x138
 8003112:	4c3f      	ldr	r4, [pc, #252]	; (8003210 <Start_Data_Reading+0x8f0>)
 8003114:	463b      	mov	r3, r7
 8003116:	ed97 6a4b 	vldr	s12, [r7, #300]	; 0x12c
 800311a:	edd7 6a4c 	vldr	s13, [r7, #304]	; 0x130
 800311e:	ed97 7a4d 	vldr	s14, [r7, #308]	; 0x134
 8003122:	edd7 7a4e 	vldr	s15, [r7, #312]	; 0x138
 8003126:	eeb0 0a46 	vmov.f32	s0, s12
 800312a:	eef0 0a66 	vmov.f32	s1, s13
 800312e:	eeb0 1a47 	vmov.f32	s2, s14
 8003132:	eef0 1a67 	vmov.f32	s3, s15
 8003136:	4618      	mov	r0, r3
 8003138:	f7fe f88c 	bl	8001254 <FusionQuaternionToMatrix>
 800313c:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8003140:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003144:	461d      	mov	r5, r3
 8003146:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003148:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800314a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800314c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800314e:	682b      	ldr	r3, [r5, #0]
 8003150:	6023      	str	r3, [r4, #0]
		  aE = FusionMatrixMultiplyVector(ERS, FusionVectorMultiplyScalar(accelerometer, 9.81));
 8003152:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8003156:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800315a:	edd3 6a00 	vldr	s13, [r3]
 800315e:	ed93 7a01 	vldr	s14, [r3, #4]
 8003162:	edd3 7a02 	vldr	s15, [r3, #8]
 8003166:	eddf 1a2b 	vldr	s3, [pc, #172]	; 8003214 <Start_Data_Reading+0x8f4>
 800316a:	eeb0 0a66 	vmov.f32	s0, s13
 800316e:	eef0 0a47 	vmov.f32	s1, s14
 8003172:	eeb0 1a67 	vmov.f32	s2, s15
 8003176:	f7fd ffb1 	bl	80010dc <FusionVectorMultiplyScalar>
 800317a:	eef0 6a40 	vmov.f32	s13, s0
 800317e:	eeb0 7a60 	vmov.f32	s14, s1
 8003182:	eef0 7a41 	vmov.f32	s15, s2
 8003186:	edc7 6a4f 	vstr	s13, [r7, #316]	; 0x13c
 800318a:	ed87 7a50 	vstr	s14, [r7, #320]	; 0x140
 800318e:	edc7 7a51 	vstr	s15, [r7, #324]	; 0x144
 8003192:	edd7 6a4f 	vldr	s13, [r7, #316]	; 0x13c
 8003196:	ed97 7a50 	vldr	s14, [r7, #320]	; 0x140
 800319a:	edd7 7a51 	vldr	s15, [r7, #324]	; 0x144
 800319e:	4e1c      	ldr	r6, [pc, #112]	; (8003210 <Start_Data_Reading+0x8f0>)
 80031a0:	466d      	mov	r5, sp
 80031a2:	f106 0410 	add.w	r4, r6, #16
 80031a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031aa:	6823      	ldr	r3, [r4, #0]
 80031ac:	602b      	str	r3, [r5, #0]
 80031ae:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80031b2:	eeb0 0a66 	vmov.f32	s0, s13
 80031b6:	eef0 0a47 	vmov.f32	s1, s14
 80031ba:	eeb0 1a67 	vmov.f32	s2, s15
 80031be:	f7fd ffd1 	bl	8001164 <FusionMatrixMultiplyVector>
 80031c2:	eef0 6a40 	vmov.f32	s13, s0
 80031c6:	eeb0 7a60 	vmov.f32	s14, s1
 80031ca:	eef0 7a41 	vmov.f32	s15, s2
 80031ce:	4b12      	ldr	r3, [pc, #72]	; (8003218 <Start_Data_Reading+0x8f8>)
 80031d0:	edc3 6a00 	vstr	s13, [r3]
 80031d4:	ed83 7a01 	vstr	s14, [r3, #4]
 80031d8:	e020      	b.n	800321c <Start_Data_Reading+0x8fc>
 80031da:	bf00      	nop
 80031dc:	f3af 8000 	nop.w
 80031e0:	b851eb85 	.word	0xb851eb85
 80031e4:	404ca51e 	.word	0x404ca51e
 80031e8:	51eb851f 	.word	0x51eb851f
 80031ec:	40239eb8 	.word	0x40239eb8
 80031f0:	20000a28 	.word	0x20000a28
 80031f4:	20000970 	.word	0x20000970
 80031f8:	20000b48 	.word	0x20000b48
 80031fc:	20000a2c 	.word	0x20000a2c
 8003200:	20000a30 	.word	0x20000a30
 8003204:	3ba3d70a 	.word	0x3ba3d70a
 8003208:	20000a54 	.word	0x20000a54
 800320c:	20000ac8 	.word	0x20000ac8
 8003210:	20000ad4 	.word	0x20000ad4
 8003214:	411cf5c3 	.word	0x411cf5c3
 8003218:	20000af8 	.word	0x20000af8
 800321c:	edc3 7a02 	vstr	s15, [r3, #8]
		  aE.axis.z -=9.85173;
 8003220:	4bdf      	ldr	r3, [pc, #892]	; (80035a0 <Start_Data_Reading+0xc80>)
 8003222:	689b      	ldr	r3, [r3, #8]
 8003224:	4618      	mov	r0, r3
 8003226:	f7fd f98f 	bl	8000548 <__aeabi_f2d>
 800322a:	a3d9      	add	r3, pc, #868	; (adr r3, 8003590 <Start_Data_Reading+0xc70>)
 800322c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003230:	f7fd f82a 	bl	8000288 <__aeabi_dsub>
 8003234:	4602      	mov	r2, r0
 8003236:	460b      	mov	r3, r1
 8003238:	4610      	mov	r0, r2
 800323a:	4619      	mov	r1, r3
 800323c:	f7fd fcd4 	bl	8000be8 <__aeabi_d2f>
 8003240:	4603      	mov	r3, r0
 8003242:	4ad7      	ldr	r2, [pc, #860]	; (80035a0 <Start_Data_Reading+0xc80>)
 8003244:	6093      	str	r3, [r2, #8]



		  // calculate rotation around yaw axis
		  if(prev_euler_yaw > 170 && euler.angle.yaw < 0){
 8003246:	edd7 7a71 	vldr	s15, [r7, #452]	; 0x1c4
 800324a:	ed9f 7ad6 	vldr	s14, [pc, #856]	; 80035a4 <Start_Data_Reading+0xc84>
 800324e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003252:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003256:	dd0c      	ble.n	8003272 <Start_Data_Reading+0x952>
 8003258:	4bd3      	ldr	r3, [pc, #844]	; (80035a8 <Start_Data_Reading+0xc88>)
 800325a:	edd3 7a02 	vldr	s15, [r3, #8]
 800325e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003262:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003266:	d504      	bpl.n	8003272 <Start_Data_Reading+0x952>
			  n++;
 8003268:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800326c:	3301      	adds	r3, #1
 800326e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
		  }
		  if(prev_euler_yaw < -170 && euler.angle.yaw > 0){
 8003272:	edd7 7a71 	vldr	s15, [r7, #452]	; 0x1c4
 8003276:	ed9f 7acd 	vldr	s14, [pc, #820]	; 80035ac <Start_Data_Reading+0xc8c>
 800327a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800327e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003282:	d50c      	bpl.n	800329e <Start_Data_Reading+0x97e>
 8003284:	4bc8      	ldr	r3, [pc, #800]	; (80035a8 <Start_Data_Reading+0xc88>)
 8003286:	edd3 7a02 	vldr	s15, [r3, #8]
 800328a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800328e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003292:	dd04      	ble.n	800329e <Start_Data_Reading+0x97e>
			  n--;
 8003294:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8003298:	3b01      	subs	r3, #1
 800329a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
		  }
		  yaw_angle = euler.angle.yaw + n * 360.0;
 800329e:	4bc2      	ldr	r3, [pc, #776]	; (80035a8 <Start_Data_Reading+0xc88>)
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	4618      	mov	r0, r3
 80032a4:	f7fd f950 	bl	8000548 <__aeabi_f2d>
 80032a8:	4604      	mov	r4, r0
 80032aa:	460d      	mov	r5, r1
 80032ac:	f8d7 01c0 	ldr.w	r0, [r7, #448]	; 0x1c0
 80032b0:	f7fd f938 	bl	8000524 <__aeabi_i2d>
 80032b4:	f04f 0200 	mov.w	r2, #0
 80032b8:	4bbd      	ldr	r3, [pc, #756]	; (80035b0 <Start_Data_Reading+0xc90>)
 80032ba:	f7fd f99d 	bl	80005f8 <__aeabi_dmul>
 80032be:	4602      	mov	r2, r0
 80032c0:	460b      	mov	r3, r1
 80032c2:	4620      	mov	r0, r4
 80032c4:	4629      	mov	r1, r5
 80032c6:	f7fc ffe1 	bl	800028c <__adddf3>
 80032ca:	4602      	mov	r2, r0
 80032cc:	460b      	mov	r3, r1
 80032ce:	4610      	mov	r0, r2
 80032d0:	4619      	mov	r1, r3
 80032d2:	f7fd fc89 	bl	8000be8 <__aeabi_d2f>
 80032d6:	4603      	mov	r3, r0
 80032d8:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
		  abs_yaw = yaw_angle;
 80032dc:	4ab5      	ldr	r2, [pc, #724]	; (80035b4 <Start_Data_Reading+0xc94>)
 80032de:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80032e2:	6013      	str	r3, [r2, #0]
		  prev_euler_yaw = euler.angle.yaw;
 80032e4:	4bb0      	ldr	r3, [pc, #704]	; (80035a8 <Start_Data_Reading+0xc88>)
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4




		  //altitudeKF(prev_state, &current_state, P_prev, &P, meas);
		  M_throttle = CRSFtoDuty(RX_throttle);
 80032ec:	4bb2      	ldr	r3, [pc, #712]	; (80035b8 <Start_Data_Reading+0xc98>)
 80032ee:	881b      	ldrh	r3, [r3, #0]
 80032f0:	4618      	mov	r0, r3
 80032f2:	f002 f845 	bl	8005380 <CRSFtoDuty>
 80032f6:	eef0 7a40 	vmov.f32	s15, s0
 80032fa:	4bb0      	ldr	r3, [pc, #704]	; (80035bc <Start_Data_Reading+0xc9c>)
 80032fc:	edc3 7a00 	vstr	s15, [r3]
		  M_pitch = CRSFtoPitch(RX_pitch)*25;
 8003300:	4baf      	ldr	r3, [pc, #700]	; (80035c0 <Start_Data_Reading+0xca0>)
 8003302:	881b      	ldrh	r3, [r3, #0]
 8003304:	4618      	mov	r0, r3
 8003306:	f002 f87d 	bl	8005404 <CRSFtoPitch>
 800330a:	eef0 7a40 	vmov.f32	s15, s0
 800330e:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8003312:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003316:	4bab      	ldr	r3, [pc, #684]	; (80035c4 <Start_Data_Reading+0xca4>)
 8003318:	edc3 7a00 	vstr	s15, [r3]
		  M_roll = CRSFtoRoll(RX_roll)*15;
 800331c:	4baa      	ldr	r3, [pc, #680]	; (80035c8 <Start_Data_Reading+0xca8>)
 800331e:	881b      	ldrh	r3, [r3, #0]
 8003320:	4618      	mov	r0, r3
 8003322:	f002 f88d 	bl	8005440 <CRSFtoRoll>
 8003326:	eef0 7a40 	vmov.f32	s15, s0
 800332a:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 800332e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003332:	4ba6      	ldr	r3, [pc, #664]	; (80035cc <Start_Data_Reading+0xcac>)
 8003334:	edc3 7a00 	vstr	s15, [r3]
		  M_yaw += CRSFtoYaw(RX_yaw)*0.3;
 8003338:	4ba5      	ldr	r3, [pc, #660]	; (80035d0 <Start_Data_Reading+0xcb0>)
 800333a:	881b      	ldrh	r3, [r3, #0]
 800333c:	4618      	mov	r0, r3
 800333e:	f002 f89d 	bl	800547c <CRSFtoYaw>
 8003342:	ee10 3a10 	vmov	r3, s0
 8003346:	4618      	mov	r0, r3
 8003348:	f7fd f8fe 	bl	8000548 <__aeabi_f2d>
 800334c:	a392      	add	r3, pc, #584	; (adr r3, 8003598 <Start_Data_Reading+0xc78>)
 800334e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003352:	f7fd f951 	bl	80005f8 <__aeabi_dmul>
 8003356:	4602      	mov	r2, r0
 8003358:	460b      	mov	r3, r1
 800335a:	4614      	mov	r4, r2
 800335c:	461d      	mov	r5, r3
 800335e:	4b9d      	ldr	r3, [pc, #628]	; (80035d4 <Start_Data_Reading+0xcb4>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4618      	mov	r0, r3
 8003364:	f7fd f8f0 	bl	8000548 <__aeabi_f2d>
 8003368:	4602      	mov	r2, r0
 800336a:	460b      	mov	r3, r1
 800336c:	4620      	mov	r0, r4
 800336e:	4629      	mov	r1, r5
 8003370:	f7fc ff8c 	bl	800028c <__adddf3>
 8003374:	4602      	mov	r2, r0
 8003376:	460b      	mov	r3, r1
 8003378:	4610      	mov	r0, r2
 800337a:	4619      	mov	r1, r3
 800337c:	f7fd fc34 	bl	8000be8 <__aeabi_d2f>
 8003380:	4603      	mov	r3, r0
 8003382:	4a94      	ldr	r2, [pc, #592]	; (80035d4 <Start_Data_Reading+0xcb4>)
 8003384:	6013      	str	r3, [r2, #0]

		  //pitch angle control
		  err_angle_pitch = M_pitch - euler.angle.pitch;
 8003386:	4b8f      	ldr	r3, [pc, #572]	; (80035c4 <Start_Data_Reading+0xca4>)
 8003388:	ed93 7a00 	vldr	s14, [r3]
 800338c:	4b86      	ldr	r3, [pc, #536]	; (80035a8 <Start_Data_Reading+0xc88>)
 800338e:	edd3 7a01 	vldr	s15, [r3, #4]
 8003392:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003396:	edc7 7a69 	vstr	s15, [r7, #420]	; 0x1a4
		  errd_angle_pitch = (err_angle_pitch - prev_err_angle_pitch)/SAMPLE_PERIOD;
 800339a:	ed97 7a69 	vldr	s14, [r7, #420]	; 0x1a4
 800339e:	edd7 7a78 	vldr	s15, [r7, #480]	; 0x1e0
 80033a2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80033a6:	eddf 6a8c 	vldr	s13, [pc, #560]	; 80035d8 <Start_Data_Reading+0xcb8>
 80033aa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80033ae:	edc7 7a68 	vstr	s15, [r7, #416]	; 0x1a0
		  angle_control_pitch = P_angle_pitch * err_angle_pitch + D_angle_pitch * errd_angle_pitch;
 80033b2:	ed97 7a66 	vldr	s14, [r7, #408]	; 0x198
 80033b6:	edd7 7a69 	vldr	s15, [r7, #420]	; 0x1a4
 80033ba:	ee27 7a27 	vmul.f32	s14, s14, s15
 80033be:	edd7 6a65 	vldr	s13, [r7, #404]	; 0x194
 80033c2:	edd7 7a68 	vldr	s15, [r7, #416]	; 0x1a0
 80033c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80033ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033ce:	edc7 7a67 	vstr	s15, [r7, #412]	; 0x19c
		  prev_err_angle_pitch = err_angle_pitch;
 80033d2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80033d6:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
		  //debug_control1 = err_angle_pitch;

		  //pitch angle velocity control
		  err_pitch = angle_control_pitch - imu.gyr_rps[1];
 80033da:	4b80      	ldr	r3, [pc, #512]	; (80035dc <Start_Data_Reading+0xcbc>)
 80033dc:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 80033e0:	ed97 7a67 	vldr	s14, [r7, #412]	; 0x19c
 80033e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80033e8:	edc7 7a6e 	vstr	s15, [r7, #440]	; 0x1b8
		  errd_pitch = (err_pitch - prev_err_pitch)/SAMPLE_PERIOD;
 80033ec:	ed97 7a6e 	vldr	s14, [r7, #440]	; 0x1b8
 80033f0:	edd7 7a79 	vldr	s15, [r7, #484]	; 0x1e4
 80033f4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80033f8:	eddf 6a77 	vldr	s13, [pc, #476]	; 80035d8 <Start_Data_Reading+0xcb8>
 80033fc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003400:	edc7 7a6d 	vstr	s15, [r7, #436]	; 0x1b4
		  prev_err_pitch = err_pitch;
 8003404:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8003408:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
		  control_pitch = P_pitch * err_pitch + D_pitch * errd_pitch;
 800340c:	ed97 7a6b 	vldr	s14, [r7, #428]	; 0x1ac
 8003410:	edd7 7a6e 	vldr	s15, [r7, #440]	; 0x1b8
 8003414:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003418:	edd7 6a6a 	vldr	s13, [r7, #424]	; 0x1a8
 800341c:	edd7 7a6d 	vldr	s15, [r7, #436]	; 0x1b4
 8003420:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003424:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003428:	edc7 7a6c 	vstr	s15, [r7, #432]	; 0x1b0

		  //roll angle control
		  err_angle_roll = M_roll - euler.angle.roll;
 800342c:	4b67      	ldr	r3, [pc, #412]	; (80035cc <Start_Data_Reading+0xcac>)
 800342e:	ed93 7a00 	vldr	s14, [r3]
 8003432:	4b5d      	ldr	r3, [pc, #372]	; (80035a8 <Start_Data_Reading+0xc88>)
 8003434:	edd3 7a00 	vldr	s15, [r3]
 8003438:	ee77 7a67 	vsub.f32	s15, s14, s15
 800343c:	edc7 7a5d 	vstr	s15, [r7, #372]	; 0x174
		  errd_angle_roll = (err_angle_roll - prev_err_angle_roll)/SAMPLE_PERIOD;
 8003440:	ed97 7a5d 	vldr	s14, [r7, #372]	; 0x174
 8003444:	edd7 7a76 	vldr	s15, [r7, #472]	; 0x1d8
 8003448:	ee37 7a67 	vsub.f32	s14, s14, s15
 800344c:	eddf 6a62 	vldr	s13, [pc, #392]	; 80035d8 <Start_Data_Reading+0xcb8>
 8003450:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003454:	edc7 7a5c 	vstr	s15, [r7, #368]	; 0x170
		  angle_control_roll = P_angle_roll * err_angle_roll + D_angle_roll * errd_angle_roll;
 8003458:	ed97 7a5f 	vldr	s14, [r7, #380]	; 0x17c
 800345c:	edd7 7a5d 	vldr	s15, [r7, #372]	; 0x174
 8003460:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003464:	edd7 6a5e 	vldr	s13, [r7, #376]	; 0x178
 8003468:	edd7 7a5c 	vldr	s15, [r7, #368]	; 0x170
 800346c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003470:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003474:	edc7 7a5b 	vstr	s15, [r7, #364]	; 0x16c
		  prev_err_angle_roll = err_angle_roll;
 8003478:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800347c:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
		  debug_control1 = err_angle_roll;
 8003480:	4a57      	ldr	r2, [pc, #348]	; (80035e0 <Start_Data_Reading+0xcc0>)
 8003482:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8003486:	6013      	str	r3, [r2, #0]


		  //roll angle velocity control
		  err_roll = angle_control_roll - imu.gyr_rps[0]; //M_roll
 8003488:	4b54      	ldr	r3, [pc, #336]	; (80035dc <Start_Data_Reading+0xcbc>)
 800348a:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800348e:	ed97 7a5b 	vldr	s14, [r7, #364]	; 0x16c
 8003492:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003496:	edc7 7a64 	vstr	s15, [r7, #400]	; 0x190
		  errd_roll = (err_roll - prev_err_roll)/SAMPLE_PERIOD;
 800349a:	ed97 7a64 	vldr	s14, [r7, #400]	; 0x190
 800349e:	edd7 7a77 	vldr	s15, [r7, #476]	; 0x1dc
 80034a2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80034a6:	eddf 6a4c 	vldr	s13, [pc, #304]	; 80035d8 <Start_Data_Reading+0xcb8>
 80034aa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80034ae:	edc7 7a63 	vstr	s15, [r7, #396]	; 0x18c
		  prev_err_roll = err_roll;
 80034b2:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80034b6:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
		  control_roll = P_roll * err_roll + D_roll * errd_roll;
 80034ba:	ed97 7a61 	vldr	s14, [r7, #388]	; 0x184
 80034be:	edd7 7a64 	vldr	s15, [r7, #400]	; 0x190
 80034c2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80034c6:	edd7 6a60 	vldr	s13, [r7, #384]	; 0x180
 80034ca:	edd7 7a63 	vldr	s15, [r7, #396]	; 0x18c
 80034ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80034d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034d6:	edc7 7a62 	vstr	s15, [r7, #392]	; 0x188
		  debug_control2 = control_roll;
 80034da:	4a42      	ldr	r2, [pc, #264]	; (80035e4 <Start_Data_Reading+0xcc4>)
 80034dc:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80034e0:	6013      	str	r3, [r2, #0]


		  //yaw angle control
//		  err_angle_yaw = M_yaw - euler.angle.yaw;
		  err_angle_yaw = M_yaw - yaw_angle;
 80034e2:	4b3c      	ldr	r3, [pc, #240]	; (80035d4 <Start_Data_Reading+0xcb4>)
 80034e4:	ed93 7a00 	vldr	s14, [r3]
 80034e8:	edd7 7a52 	vldr	s15, [r7, #328]	; 0x148
 80034ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80034f0:	edc7 7a55 	vstr	s15, [r7, #340]	; 0x154
		  errd_angle_yaw = (err_angle_yaw - prev_err_angle_yaw)/SAMPLE_PERIOD;
 80034f4:	ed97 7a55 	vldr	s14, [r7, #340]	; 0x154
 80034f8:	edd7 7a72 	vldr	s15, [r7, #456]	; 0x1c8
 80034fc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003500:	eddf 6a35 	vldr	s13, [pc, #212]	; 80035d8 <Start_Data_Reading+0xcb8>
 8003504:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003508:	edc7 7a54 	vstr	s15, [r7, #336]	; 0x150
		  angle_control_yaw = P_angle_yaw * err_angle_yaw + D_angle_yaw * errd_angle_yaw;
 800350c:	ed97 7a57 	vldr	s14, [r7, #348]	; 0x15c
 8003510:	edd7 7a55 	vldr	s15, [r7, #340]	; 0x154
 8003514:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003518:	edd7 6a56 	vldr	s13, [r7, #344]	; 0x158
 800351c:	edd7 7a54 	vldr	s15, [r7, #336]	; 0x150
 8003520:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003524:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003528:	edc7 7a53 	vstr	s15, [r7, #332]	; 0x14c
		  prev_err_angle_yaw = err_angle_yaw;
 800352c:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8003530:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8



		  //yaw angle velocity control
		  err_yaw = angle_control_yaw - imu.gyr_rps[2]; //angle_control_yaw
 8003534:	4b29      	ldr	r3, [pc, #164]	; (80035dc <Start_Data_Reading+0xcbc>)
 8003536:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 800353a:	ed97 7a53 	vldr	s14, [r7, #332]	; 0x14c
 800353e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003542:	edc7 7a5a 	vstr	s15, [r7, #360]	; 0x168
		  errd_yaw = (err_yaw - prev_err_yaw)/SAMPLE_PERIOD;
 8003546:	ed97 7a5a 	vldr	s14, [r7, #360]	; 0x168
 800354a:	edd7 7a75 	vldr	s15, [r7, #468]	; 0x1d4
 800354e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003552:	eddf 6a21 	vldr	s13, [pc, #132]	; 80035d8 <Start_Data_Reading+0xcb8>
 8003556:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800355a:	edc7 7a59 	vstr	s15, [r7, #356]	; 0x164
		  prev_err_yaw = err_yaw;
 800355e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8003562:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
		  control_yaw = P_yaw * err_yaw + D_yaw * errd_yaw;
 8003566:	ed97 7a74 	vldr	s14, [r7, #464]	; 0x1d0
 800356a:	edd7 7a5a 	vldr	s15, [r7, #360]	; 0x168
 800356e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003572:	edd7 6a73 	vldr	s13, [r7, #460]	; 0x1cc
 8003576:	edd7 7a59 	vldr	s15, [r7, #356]	; 0x164
 800357a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800357e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003582:	edc7 7a58 	vstr	s15, [r7, #352]	; 0x160



		  if(RX_arm > 1000){
 8003586:	4b18      	ldr	r3, [pc, #96]	; (80035e8 <Start_Data_Reading+0xcc8>)
 8003588:	881b      	ldrh	r3, [r3, #0]
 800358a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800358e:	e02d      	b.n	80035ec <Start_Data_Reading+0xccc>
 8003590:	f45e0b4e 	.word	0xf45e0b4e
 8003594:	4023b415 	.word	0x4023b415
 8003598:	33333333 	.word	0x33333333
 800359c:	3fd33333 	.word	0x3fd33333
 80035a0:	20000af8 	.word	0x20000af8
 80035a4:	432a0000 	.word	0x432a0000
 80035a8:	20000ac8 	.word	0x20000ac8
 80035ac:	c32a0000 	.word	0xc32a0000
 80035b0:	40768000 	.word	0x40768000
 80035b4:	20000a50 	.word	0x20000a50
 80035b8:	20002af8 	.word	0x20002af8
 80035bc:	20002afc 	.word	0x20002afc
 80035c0:	20002af4 	.word	0x20002af4
 80035c4:	20002b00 	.word	0x20002b00
 80035c8:	20002af2 	.word	0x20002af2
 80035cc:	20002b04 	.word	0x20002b04
 80035d0:	20002af6 	.word	0x20002af6
 80035d4:	20002b08 	.word	0x20002b08
 80035d8:	3ba3d70a 	.word	0x3ba3d70a
 80035dc:	20000970 	.word	0x20000970
 80035e0:	20002b0c 	.word	0x20002b0c
 80035e4:	20002b10 	.word	0x20002b10
 80035e8:	20002afa 	.word	0x20002afa
 80035ec:	f240 80b8 	bls.w	8003760 <Start_Data_Reading+0xe40>
			  uart_telemetria = 0;
 80035f0:	4b55      	ldr	r3, [pc, #340]	; (8003748 <Start_Data_Reading+0xe28>)
 80035f2:	2200      	movs	r2, #0
 80035f4:	701a      	strb	r2, [r3, #0]
//			  ref2 = (uint16_t)(M_throttle + control_yaw);
//			  ref3 = (uint16_t)(M_throttle - control_yaw);
//			  ref4 = (uint16_t)(M_throttle + control_yaw);

			  //all together
			  ref1 = (uint16_t)(M_throttle - control_yaw - control_pitch + control_roll);
 80035f6:	4b55      	ldr	r3, [pc, #340]	; (800374c <Start_Data_Reading+0xe2c>)
 80035f8:	ed93 7a00 	vldr	s14, [r3]
 80035fc:	edd7 7a58 	vldr	s15, [r7, #352]	; 0x160
 8003600:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003604:	edd7 7a6c 	vldr	s15, [r7, #432]	; 0x1b0
 8003608:	ee37 7a67 	vsub.f32	s14, s14, s15
 800360c:	edd7 7a62 	vldr	s15, [r7, #392]	; 0x188
 8003610:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003614:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003618:	ee17 3a90 	vmov	r3, s15
 800361c:	b29a      	uxth	r2, r3
 800361e:	4b4c      	ldr	r3, [pc, #304]	; (8003750 <Start_Data_Reading+0xe30>)
 8003620:	801a      	strh	r2, [r3, #0]
			  ref2 = (uint16_t)(M_throttle + control_yaw - control_pitch - control_roll);
 8003622:	4b4a      	ldr	r3, [pc, #296]	; (800374c <Start_Data_Reading+0xe2c>)
 8003624:	ed93 7a00 	vldr	s14, [r3]
 8003628:	edd7 7a58 	vldr	s15, [r7, #352]	; 0x160
 800362c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003630:	edd7 7a6c 	vldr	s15, [r7, #432]	; 0x1b0
 8003634:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003638:	edd7 7a62 	vldr	s15, [r7, #392]	; 0x188
 800363c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003640:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003644:	ee17 3a90 	vmov	r3, s15
 8003648:	b29a      	uxth	r2, r3
 800364a:	4b42      	ldr	r3, [pc, #264]	; (8003754 <Start_Data_Reading+0xe34>)
 800364c:	801a      	strh	r2, [r3, #0]
			  ref3 = (uint16_t)(M_throttle - control_yaw + control_pitch - control_roll);
 800364e:	4b3f      	ldr	r3, [pc, #252]	; (800374c <Start_Data_Reading+0xe2c>)
 8003650:	ed93 7a00 	vldr	s14, [r3]
 8003654:	edd7 7a58 	vldr	s15, [r7, #352]	; 0x160
 8003658:	ee37 7a67 	vsub.f32	s14, s14, s15
 800365c:	edd7 7a6c 	vldr	s15, [r7, #432]	; 0x1b0
 8003660:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003664:	edd7 7a62 	vldr	s15, [r7, #392]	; 0x188
 8003668:	ee77 7a67 	vsub.f32	s15, s14, s15
 800366c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003670:	ee17 3a90 	vmov	r3, s15
 8003674:	b29a      	uxth	r2, r3
 8003676:	4b38      	ldr	r3, [pc, #224]	; (8003758 <Start_Data_Reading+0xe38>)
 8003678:	801a      	strh	r2, [r3, #0]
			  ref4 = (uint16_t)(M_throttle + control_yaw + control_pitch + control_roll);
 800367a:	4b34      	ldr	r3, [pc, #208]	; (800374c <Start_Data_Reading+0xe2c>)
 800367c:	ed93 7a00 	vldr	s14, [r3]
 8003680:	edd7 7a58 	vldr	s15, [r7, #352]	; 0x160
 8003684:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003688:	edd7 7a6c 	vldr	s15, [r7, #432]	; 0x1b0
 800368c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003690:	edd7 7a62 	vldr	s15, [r7, #392]	; 0x188
 8003694:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003698:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800369c:	ee17 3a90 	vmov	r3, s15
 80036a0:	b29a      	uxth	r2, r3
 80036a2:	4b2e      	ldr	r3, [pc, #184]	; (800375c <Start_Data_Reading+0xe3c>)
 80036a4:	801a      	strh	r2, [r3, #0]
//			  ref1 = (uint16_t)(M_throttle);
//			  ref2 = (uint16_t)(M_throttle);
//			  ref3 = (uint16_t)(M_throttle);
//			  ref4 = (uint16_t)(M_throttle);

			  if(ref1<550) ref1 = 550;
 80036a6:	4b2a      	ldr	r3, [pc, #168]	; (8003750 <Start_Data_Reading+0xe30>)
 80036a8:	881b      	ldrh	r3, [r3, #0]
 80036aa:	f240 2225 	movw	r2, #549	; 0x225
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d803      	bhi.n	80036ba <Start_Data_Reading+0xd9a>
 80036b2:	4b27      	ldr	r3, [pc, #156]	; (8003750 <Start_Data_Reading+0xe30>)
 80036b4:	f240 2226 	movw	r2, #550	; 0x226
 80036b8:	801a      	strh	r2, [r3, #0]
			  if(ref2<550) ref2 = 550;
 80036ba:	4b26      	ldr	r3, [pc, #152]	; (8003754 <Start_Data_Reading+0xe34>)
 80036bc:	881b      	ldrh	r3, [r3, #0]
 80036be:	f240 2225 	movw	r2, #549	; 0x225
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d803      	bhi.n	80036ce <Start_Data_Reading+0xdae>
 80036c6:	4b23      	ldr	r3, [pc, #140]	; (8003754 <Start_Data_Reading+0xe34>)
 80036c8:	f240 2226 	movw	r2, #550	; 0x226
 80036cc:	801a      	strh	r2, [r3, #0]
			  if(ref3<550) ref3 = 550;
 80036ce:	4b22      	ldr	r3, [pc, #136]	; (8003758 <Start_Data_Reading+0xe38>)
 80036d0:	881b      	ldrh	r3, [r3, #0]
 80036d2:	f240 2225 	movw	r2, #549	; 0x225
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d803      	bhi.n	80036e2 <Start_Data_Reading+0xdc2>
 80036da:	4b1f      	ldr	r3, [pc, #124]	; (8003758 <Start_Data_Reading+0xe38>)
 80036dc:	f240 2226 	movw	r2, #550	; 0x226
 80036e0:	801a      	strh	r2, [r3, #0]
			  if(ref4<550) ref4 = 550;
 80036e2:	4b1e      	ldr	r3, [pc, #120]	; (800375c <Start_Data_Reading+0xe3c>)
 80036e4:	881b      	ldrh	r3, [r3, #0]
 80036e6:	f240 2225 	movw	r2, #549	; 0x225
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d803      	bhi.n	80036f6 <Start_Data_Reading+0xdd6>
 80036ee:	4b1b      	ldr	r3, [pc, #108]	; (800375c <Start_Data_Reading+0xe3c>)
 80036f0:	f240 2226 	movw	r2, #550	; 0x226
 80036f4:	801a      	strh	r2, [r3, #0]

			  if(ref1>950) ref1 = 950;
 80036f6:	4b16      	ldr	r3, [pc, #88]	; (8003750 <Start_Data_Reading+0xe30>)
 80036f8:	881b      	ldrh	r3, [r3, #0]
 80036fa:	f240 32b6 	movw	r2, #950	; 0x3b6
 80036fe:	4293      	cmp	r3, r2
 8003700:	d903      	bls.n	800370a <Start_Data_Reading+0xdea>
 8003702:	4b13      	ldr	r3, [pc, #76]	; (8003750 <Start_Data_Reading+0xe30>)
 8003704:	f240 32b6 	movw	r2, #950	; 0x3b6
 8003708:	801a      	strh	r2, [r3, #0]
			  if(ref2>950) ref2 = 950;
 800370a:	4b12      	ldr	r3, [pc, #72]	; (8003754 <Start_Data_Reading+0xe34>)
 800370c:	881b      	ldrh	r3, [r3, #0]
 800370e:	f240 32b6 	movw	r2, #950	; 0x3b6
 8003712:	4293      	cmp	r3, r2
 8003714:	d903      	bls.n	800371e <Start_Data_Reading+0xdfe>
 8003716:	4b0f      	ldr	r3, [pc, #60]	; (8003754 <Start_Data_Reading+0xe34>)
 8003718:	f240 32b6 	movw	r2, #950	; 0x3b6
 800371c:	801a      	strh	r2, [r3, #0]
			  if(ref3>950) ref3 = 950;
 800371e:	4b0e      	ldr	r3, [pc, #56]	; (8003758 <Start_Data_Reading+0xe38>)
 8003720:	881b      	ldrh	r3, [r3, #0]
 8003722:	f240 32b6 	movw	r2, #950	; 0x3b6
 8003726:	4293      	cmp	r3, r2
 8003728:	d903      	bls.n	8003732 <Start_Data_Reading+0xe12>
 800372a:	4b0b      	ldr	r3, [pc, #44]	; (8003758 <Start_Data_Reading+0xe38>)
 800372c:	f240 32b6 	movw	r2, #950	; 0x3b6
 8003730:	801a      	strh	r2, [r3, #0]
			  if(ref4>950) ref4 = 950;
 8003732:	4b0a      	ldr	r3, [pc, #40]	; (800375c <Start_Data_Reading+0xe3c>)
 8003734:	881b      	ldrh	r3, [r3, #0]
 8003736:	f240 32b6 	movw	r2, #950	; 0x3b6
 800373a:	4293      	cmp	r3, r2
 800373c:	d93d      	bls.n	80037ba <Start_Data_Reading+0xe9a>
 800373e:	4b07      	ldr	r3, [pc, #28]	; (800375c <Start_Data_Reading+0xe3c>)
 8003740:	f240 32b6 	movw	r2, #950	; 0x3b6
 8003744:	801a      	strh	r2, [r3, #0]
 8003746:	e038      	b.n	80037ba <Start_Data_Reading+0xe9a>
 8003748:	20000b12 	.word	0x20000b12
 800374c:	20002afc 	.word	0x20002afc
 8003750:	20002aa4 	.word	0x20002aa4
 8003754:	20002aa6 	.word	0x20002aa6
 8003758:	20002aa8 	.word	0x20002aa8
 800375c:	20002aaa 	.word	0x20002aaa
//			  ref2 = (uint16_t)CRSFtoDuty(RX_throttle);
//			  ref3 = (uint16_t)CRSFtoDuty(RX_throttle);
//			  ref4 = (uint16_t)CRSFtoDuty(RX_throttle);
		  }
		  else{
			  uart_telemetria = 1;
 8003760:	4b6e      	ldr	r3, [pc, #440]	; (800391c <Start_Data_Reading+0xffc>)
 8003762:	2201      	movs	r2, #1
 8003764:	701a      	strb	r2, [r3, #0]
			  if(new_P == 1){
 8003766:	4b6e      	ldr	r3, [pc, #440]	; (8003920 <Start_Data_Reading+0x1000>)
 8003768:	781b      	ldrb	r3, [r3, #0]
 800376a:	2b01      	cmp	r3, #1
 800376c:	d106      	bne.n	800377c <Start_Data_Reading+0xe5c>
				  P_yaw = telem_P;
 800376e:	4b6d      	ldr	r3, [pc, #436]	; (8003924 <Start_Data_Reading+0x1004>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
				  new_P = 0;
 8003776:	4b6a      	ldr	r3, [pc, #424]	; (8003920 <Start_Data_Reading+0x1000>)
 8003778:	2200      	movs	r2, #0
 800377a:	701a      	strb	r2, [r3, #0]
			  }
			  if(new_D == 1){
 800377c:	4b6a      	ldr	r3, [pc, #424]	; (8003928 <Start_Data_Reading+0x1008>)
 800377e:	781b      	ldrb	r3, [r3, #0]
 8003780:	2b01      	cmp	r3, #1
 8003782:	d106      	bne.n	8003792 <Start_Data_Reading+0xe72>
				  D_yaw = telem_D;
 8003784:	4b69      	ldr	r3, [pc, #420]	; (800392c <Start_Data_Reading+0x100c>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
				  new_D = 0;
 800378c:	4b66      	ldr	r3, [pc, #408]	; (8003928 <Start_Data_Reading+0x1008>)
 800378e:	2200      	movs	r2, #0
 8003790:	701a      	strb	r2, [r3, #0]
			  }
			  // yaw angle reference set to the AHRS calculated yaw angle, this is to prevent the angle offset during arm switch off state
			  M_yaw = yaw_angle;
 8003792:	4a67      	ldr	r2, [pc, #412]	; (8003930 <Start_Data_Reading+0x1010>)
 8003794:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8003798:	6013      	str	r3, [r2, #0]

			  ref1 = 550;
 800379a:	4b66      	ldr	r3, [pc, #408]	; (8003934 <Start_Data_Reading+0x1014>)
 800379c:	f240 2226 	movw	r2, #550	; 0x226
 80037a0:	801a      	strh	r2, [r3, #0]
			  ref2 = 550;
 80037a2:	4b65      	ldr	r3, [pc, #404]	; (8003938 <Start_Data_Reading+0x1018>)
 80037a4:	f240 2226 	movw	r2, #550	; 0x226
 80037a8:	801a      	strh	r2, [r3, #0]
			  ref3 = 550;
 80037aa:	4b64      	ldr	r3, [pc, #400]	; (800393c <Start_Data_Reading+0x101c>)
 80037ac:	f240 2226 	movw	r2, #550	; 0x226
 80037b0:	801a      	strh	r2, [r3, #0]
			  ref4 = 550;
 80037b2:	4b63      	ldr	r3, [pc, #396]	; (8003940 <Start_Data_Reading+0x1020>)
 80037b4:	f240 2226 	movw	r2, #550	; 0x226
 80037b8:	801a      	strh	r2, [r3, #0]
		  }


		  //telemetria
		  telemetria_float[0] = accelerometer.axis.x;
 80037ba:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80037be:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80037c8:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80037cc:	601a      	str	r2, [r3, #0]
		  telemetria_float[1] = accelerometer.axis.y;
 80037ce:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80037d2:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80037d6:	685a      	ldr	r2, [r3, #4]
 80037d8:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80037dc:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80037e0:	605a      	str	r2, [r3, #4]
		  telemetria_float[2] = accelerometer.axis.z;
 80037e2:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80037e6:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80037ea:	689a      	ldr	r2, [r3, #8]
 80037ec:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80037f0:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80037f4:	609a      	str	r2, [r3, #8]
		  telemetria_float[3] = gyroscope.axis.x;
 80037f6:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80037fa:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80037fe:	681a      	ldr	r2, [r3, #0]
 8003800:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8003804:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003808:	60da      	str	r2, [r3, #12]
		  telemetria_float[4] = gyroscope.axis.y;
 800380a:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 800380e:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003812:	685a      	ldr	r2, [r3, #4]
 8003814:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8003818:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800381c:	611a      	str	r2, [r3, #16]
		  telemetria_float[5] = gyroscope.axis.z;
 800381e:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8003822:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003826:	689a      	ldr	r2, [r3, #8]
 8003828:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 800382c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003830:	615a      	str	r2, [r3, #20]
		  telemetria_float[6] = euler.angle.roll;
 8003832:	4b44      	ldr	r3, [pc, #272]	; (8003944 <Start_Data_Reading+0x1024>)
 8003834:	681a      	ldr	r2, [r3, #0]
 8003836:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 800383a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800383e:	619a      	str	r2, [r3, #24]
		  telemetria_float[7] = euler.angle.pitch;
 8003840:	4b40      	ldr	r3, [pc, #256]	; (8003944 <Start_Data_Reading+0x1024>)
 8003842:	685a      	ldr	r2, [r3, #4]
 8003844:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8003848:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800384c:	61da      	str	r2, [r3, #28]
		  telemetria_float[8] = euler.angle.yaw;
 800384e:	4b3d      	ldr	r3, [pc, #244]	; (8003944 <Start_Data_Reading+0x1024>)
 8003850:	689a      	ldr	r2, [r3, #8]
 8003852:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8003856:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800385a:	621a      	str	r2, [r3, #32]
//		  telemetria_float[9] = (float)ref1;
//		  telemetria_float[10] = (float)ref2;
//		  telemetria_float[11] = (float)ref3;
//		  telemetria_float[12] = (float)ref4;
		  telemetria_float[9] = (float)M_roll;
 800385c:	4b3a      	ldr	r3, [pc, #232]	; (8003948 <Start_Data_Reading+0x1028>)
 800385e:	681a      	ldr	r2, [r3, #0]
 8003860:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8003864:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003868:	625a      	str	r2, [r3, #36]	; 0x24
		  telemetria_float[10] = (float)M_pitch;
 800386a:	4b38      	ldr	r3, [pc, #224]	; (800394c <Start_Data_Reading+0x102c>)
 800386c:	681a      	ldr	r2, [r3, #0]
 800386e:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8003872:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003876:	629a      	str	r2, [r3, #40]	; 0x28
		  telemetria_float[11] = (float)M_yaw;
 8003878:	4b2d      	ldr	r3, [pc, #180]	; (8003930 <Start_Data_Reading+0x1010>)
 800387a:	681a      	ldr	r2, [r3, #0]
 800387c:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8003880:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003884:	62da      	str	r2, [r3, #44]	; 0x2c
		  telemetria_float[12] = (float)M_throttle;
 8003886:	4b32      	ldr	r3, [pc, #200]	; (8003950 <Start_Data_Reading+0x1030>)
 8003888:	681a      	ldr	r2, [r3, #0]
 800388a:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 800388e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003892:	631a      	str	r2, [r3, #48]	; 0x30
		  telemetria_float[13] = (float)angle_control_roll;
 8003894:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8003898:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800389c:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 80038a0:	635a      	str	r2, [r3, #52]	; 0x34
		  telemetria_float[14] = (float)angle_control_pitch;
 80038a2:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80038a6:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80038aa:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80038ae:	639a      	str	r2, [r3, #56]	; 0x38
		  telemetria_float[15] = (float)angle_control_yaw;
 80038b0:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80038b4:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80038b8:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80038bc:	63da      	str	r2, [r3, #60]	; 0x3c
		  telemetria_float[16] = (float)control_roll;
 80038be:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80038c2:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80038c6:	f8d7 2188 	ldr.w	r2, [r7, #392]	; 0x188
 80038ca:	641a      	str	r2, [r3, #64]	; 0x40
		  telemetria_float[17] = (float)control_pitch;
 80038cc:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80038d0:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80038d4:	f8d7 21b0 	ldr.w	r2, [r7, #432]	; 0x1b0
 80038d8:	645a      	str	r2, [r3, #68]	; 0x44
		  telemetria_float[18] = (float)control_yaw;
 80038da:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80038de:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80038e2:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 80038e6:	649a      	str	r2, [r3, #72]	; 0x48
		  xQueueSendToFront(telemetria_Queue, (void*)&telemetria_float, 0);
 80038e8:	4b1a      	ldr	r3, [pc, #104]	; (8003954 <Start_Data_Reading+0x1034>)
 80038ea:	6818      	ldr	r0, [r3, #0]
 80038ec:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80038f0:	2301      	movs	r3, #1
 80038f2:	2200      	movs	r2, #0
 80038f4:	f009 fc7e 	bl	800d1f4 <xQueueGenericSend>




		  //set_duty_Oneshot42(&htim3, 550, 550, 550, 550);
		  set_duty_Oneshot42(&htim3, ref1, ref2, ref3, ref4);
 80038f8:	4b0e      	ldr	r3, [pc, #56]	; (8003934 <Start_Data_Reading+0x1014>)
 80038fa:	8819      	ldrh	r1, [r3, #0]
 80038fc:	4b0e      	ldr	r3, [pc, #56]	; (8003938 <Start_Data_Reading+0x1018>)
 80038fe:	881a      	ldrh	r2, [r3, #0]
 8003900:	4b0e      	ldr	r3, [pc, #56]	; (800393c <Start_Data_Reading+0x101c>)
 8003902:	8818      	ldrh	r0, [r3, #0]
 8003904:	4b0e      	ldr	r3, [pc, #56]	; (8003940 <Start_Data_Reading+0x1020>)
 8003906:	881b      	ldrh	r3, [r3, #0]
 8003908:	9300      	str	r3, [sp, #0]
 800390a:	4603      	mov	r3, r0
 800390c:	4812      	ldr	r0, [pc, #72]	; (8003958 <Start_Data_Reading+0x1038>)
 800390e:	f001 fd14 	bl	800533a <set_duty_Oneshot42>
	osDelay(3);
 8003912:	2003      	movs	r0, #3
 8003914:	f009 fae4 	bl	800cee0 <osDelay>
  {
 8003918:	f7ff ba0e 	b.w	8002d38 <Start_Data_Reading+0x418>
 800391c:	20000b12 	.word	0x20000b12
 8003920:	20000b1c 	.word	0x20000b1c
 8003924:	20000b14 	.word	0x20000b14
 8003928:	20000b1d 	.word	0x20000b1d
 800392c:	20000b18 	.word	0x20000b18
 8003930:	20002b08 	.word	0x20002b08
 8003934:	20002aa4 	.word	0x20002aa4
 8003938:	20002aa6 	.word	0x20002aa6
 800393c:	20002aa8 	.word	0x20002aa8
 8003940:	20002aaa 	.word	0x20002aaa
 8003944:	20000ac8 	.word	0x20000ac8
 8003948:	20002b04 	.word	0x20002b04
 800394c:	20002b00 	.word	0x20002b00
 8003950:	20002afc 	.word	0x20002afc
 8003954:	20002b14 	.word	0x20002b14
 8003958:	200006d4 	.word	0x200006d4

0800395c <Start_Orientation>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_Orientation */
void Start_Orientation(void const * argument)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b082      	sub	sp, #8
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
//		//filterUpdateIMU(imu.gyr_rps[0], imu.gyr_rps[1], imu.gyr_rps[2], imu.acc_mps2[0], imu.acc_mps2[1], imu.acc_mps2[2], &q );
//		filterUpdate(imu.gyr_rps[0], imu.gyr_rps[1], imu.gyr_rps[2], imu.acc_mps2[0], imu.acc_mps2[1], imu.acc_mps2[2], mag_data_y, -mag_data_x, mag_data_z, &q, &f);
//		eulerAngles(q, &roll, &pitch, &yaw);
//		oricalc = 0;
//	  }
    osDelay(1);
 8003964:	2001      	movs	r0, #1
 8003966:	f009 fabb 	bl	800cee0 <osDelay>
 800396a:	e7fb      	b.n	8003964 <Start_Orientation+0x8>

0800396c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800396c:	b480      	push	{r7}
 800396e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003970:	b672      	cpsid	i
}
 8003972:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003974:	e7fe      	b.n	8003974 <Error_Handler+0x8>
	...

08003978 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b082      	sub	sp, #8
 800397c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800397e:	2300      	movs	r3, #0
 8003980:	607b      	str	r3, [r7, #4]
 8003982:	4b12      	ldr	r3, [pc, #72]	; (80039cc <HAL_MspInit+0x54>)
 8003984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003986:	4a11      	ldr	r2, [pc, #68]	; (80039cc <HAL_MspInit+0x54>)
 8003988:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800398c:	6453      	str	r3, [r2, #68]	; 0x44
 800398e:	4b0f      	ldr	r3, [pc, #60]	; (80039cc <HAL_MspInit+0x54>)
 8003990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003992:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003996:	607b      	str	r3, [r7, #4]
 8003998:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800399a:	2300      	movs	r3, #0
 800399c:	603b      	str	r3, [r7, #0]
 800399e:	4b0b      	ldr	r3, [pc, #44]	; (80039cc <HAL_MspInit+0x54>)
 80039a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a2:	4a0a      	ldr	r2, [pc, #40]	; (80039cc <HAL_MspInit+0x54>)
 80039a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039a8:	6413      	str	r3, [r2, #64]	; 0x40
 80039aa:	4b08      	ldr	r3, [pc, #32]	; (80039cc <HAL_MspInit+0x54>)
 80039ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039b2:	603b      	str	r3, [r7, #0]
 80039b4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80039b6:	2200      	movs	r2, #0
 80039b8:	210f      	movs	r1, #15
 80039ba:	f06f 0001 	mvn.w	r0, #1
 80039be:	f002 f94e 	bl	8005c5e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80039c2:	bf00      	nop
 80039c4:	3708      	adds	r7, #8
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}
 80039ca:	bf00      	nop
 80039cc:	40023800 	.word	0x40023800

080039d0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b08e      	sub	sp, #56	; 0x38
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80039dc:	2200      	movs	r2, #0
 80039de:	601a      	str	r2, [r3, #0]
 80039e0:	605a      	str	r2, [r3, #4]
 80039e2:	609a      	str	r2, [r3, #8]
 80039e4:	60da      	str	r2, [r3, #12]
 80039e6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a45      	ldr	r2, [pc, #276]	; (8003b04 <HAL_ADC_MspInit+0x134>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d128      	bne.n	8003a44 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80039f2:	2300      	movs	r3, #0
 80039f4:	623b      	str	r3, [r7, #32]
 80039f6:	4b44      	ldr	r3, [pc, #272]	; (8003b08 <HAL_ADC_MspInit+0x138>)
 80039f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039fa:	4a43      	ldr	r2, [pc, #268]	; (8003b08 <HAL_ADC_MspInit+0x138>)
 80039fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a00:	6453      	str	r3, [r2, #68]	; 0x44
 8003a02:	4b41      	ldr	r3, [pc, #260]	; (8003b08 <HAL_ADC_MspInit+0x138>)
 8003a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a0a:	623b      	str	r3, [r7, #32]
 8003a0c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a0e:	2300      	movs	r3, #0
 8003a10:	61fb      	str	r3, [r7, #28]
 8003a12:	4b3d      	ldr	r3, [pc, #244]	; (8003b08 <HAL_ADC_MspInit+0x138>)
 8003a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a16:	4a3c      	ldr	r2, [pc, #240]	; (8003b08 <HAL_ADC_MspInit+0x138>)
 8003a18:	f043 0301 	orr.w	r3, r3, #1
 8003a1c:	6313      	str	r3, [r2, #48]	; 0x30
 8003a1e:	4b3a      	ldr	r3, [pc, #232]	; (8003b08 <HAL_ADC_MspInit+0x138>)
 8003a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a22:	f003 0301 	and.w	r3, r3, #1
 8003a26:	61fb      	str	r3, [r7, #28]
 8003a28:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = CRNT_Pin;
 8003a2a:	2320      	movs	r3, #32
 8003a2c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003a2e:	2303      	movs	r3, #3
 8003a30:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a32:	2300      	movs	r3, #0
 8003a34:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CRNT_GPIO_Port, &GPIO_InitStruct);
 8003a36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a3a:	4619      	mov	r1, r3
 8003a3c:	4833      	ldr	r0, [pc, #204]	; (8003b0c <HAL_ADC_MspInit+0x13c>)
 8003a3e:	f002 fd47 	bl	80064d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8003a42:	e05a      	b.n	8003afa <HAL_ADC_MspInit+0x12a>
  else if(hadc->Instance==ADC2)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a31      	ldr	r2, [pc, #196]	; (8003b10 <HAL_ADC_MspInit+0x140>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d128      	bne.n	8003aa0 <HAL_ADC_MspInit+0xd0>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8003a4e:	2300      	movs	r3, #0
 8003a50:	61bb      	str	r3, [r7, #24]
 8003a52:	4b2d      	ldr	r3, [pc, #180]	; (8003b08 <HAL_ADC_MspInit+0x138>)
 8003a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a56:	4a2c      	ldr	r2, [pc, #176]	; (8003b08 <HAL_ADC_MspInit+0x138>)
 8003a58:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003a5c:	6453      	str	r3, [r2, #68]	; 0x44
 8003a5e:	4b2a      	ldr	r3, [pc, #168]	; (8003b08 <HAL_ADC_MspInit+0x138>)
 8003a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a62:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a66:	61bb      	str	r3, [r7, #24]
 8003a68:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	617b      	str	r3, [r7, #20]
 8003a6e:	4b26      	ldr	r3, [pc, #152]	; (8003b08 <HAL_ADC_MspInit+0x138>)
 8003a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a72:	4a25      	ldr	r2, [pc, #148]	; (8003b08 <HAL_ADC_MspInit+0x138>)
 8003a74:	f043 0301 	orr.w	r3, r3, #1
 8003a78:	6313      	str	r3, [r2, #48]	; 0x30
 8003a7a:	4b23      	ldr	r3, [pc, #140]	; (8003b08 <HAL_ADC_MspInit+0x138>)
 8003a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a7e:	f003 0301 	and.w	r3, r3, #1
 8003a82:	617b      	str	r3, [r7, #20]
 8003a84:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003a86:	2310      	movs	r3, #16
 8003a88:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003a8a:	2303      	movs	r3, #3
 8003a8c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a96:	4619      	mov	r1, r3
 8003a98:	481c      	ldr	r0, [pc, #112]	; (8003b0c <HAL_ADC_MspInit+0x13c>)
 8003a9a:	f002 fd19 	bl	80064d0 <HAL_GPIO_Init>
}
 8003a9e:	e02c      	b.n	8003afa <HAL_ADC_MspInit+0x12a>
  else if(hadc->Instance==ADC3)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a1b      	ldr	r2, [pc, #108]	; (8003b14 <HAL_ADC_MspInit+0x144>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d127      	bne.n	8003afa <HAL_ADC_MspInit+0x12a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8003aaa:	2300      	movs	r3, #0
 8003aac:	613b      	str	r3, [r7, #16]
 8003aae:	4b16      	ldr	r3, [pc, #88]	; (8003b08 <HAL_ADC_MspInit+0x138>)
 8003ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ab2:	4a15      	ldr	r2, [pc, #84]	; (8003b08 <HAL_ADC_MspInit+0x138>)
 8003ab4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003ab8:	6453      	str	r3, [r2, #68]	; 0x44
 8003aba:	4b13      	ldr	r3, [pc, #76]	; (8003b08 <HAL_ADC_MspInit+0x138>)
 8003abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003abe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ac2:	613b      	str	r3, [r7, #16]
 8003ac4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	60fb      	str	r3, [r7, #12]
 8003aca:	4b0f      	ldr	r3, [pc, #60]	; (8003b08 <HAL_ADC_MspInit+0x138>)
 8003acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ace:	4a0e      	ldr	r2, [pc, #56]	; (8003b08 <HAL_ADC_MspInit+0x138>)
 8003ad0:	f043 0304 	orr.w	r3, r3, #4
 8003ad4:	6313      	str	r3, [r2, #48]	; 0x30
 8003ad6:	4b0c      	ldr	r3, [pc, #48]	; (8003b08 <HAL_ADC_MspInit+0x138>)
 8003ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ada:	f003 0304 	and.w	r3, r3, #4
 8003ade:	60fb      	str	r3, [r7, #12]
 8003ae0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003ae2:	2308      	movs	r3, #8
 8003ae4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003ae6:	2303      	movs	r3, #3
 8003ae8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aea:	2300      	movs	r3, #0
 8003aec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003aee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003af2:	4619      	mov	r1, r3
 8003af4:	4808      	ldr	r0, [pc, #32]	; (8003b18 <HAL_ADC_MspInit+0x148>)
 8003af6:	f002 fceb 	bl	80064d0 <HAL_GPIO_Init>
}
 8003afa:	bf00      	nop
 8003afc:	3738      	adds	r7, #56	; 0x38
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}
 8003b02:	bf00      	nop
 8003b04:	40012000 	.word	0x40012000
 8003b08:	40023800 	.word	0x40023800
 8003b0c:	40020000 	.word	0x40020000
 8003b10:	40012100 	.word	0x40012100
 8003b14:	40012200 	.word	0x40012200
 8003b18:	40020800 	.word	0x40020800

08003b1c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b08e      	sub	sp, #56	; 0x38
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b28:	2200      	movs	r2, #0
 8003b2a:	601a      	str	r2, [r3, #0]
 8003b2c:	605a      	str	r2, [r3, #4]
 8003b2e:	609a      	str	r2, [r3, #8]
 8003b30:	60da      	str	r2, [r3, #12]
 8003b32:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a5c      	ldr	r2, [pc, #368]	; (8003cac <HAL_I2C_MspInit+0x190>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d12d      	bne.n	8003b9a <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b3e:	2300      	movs	r3, #0
 8003b40:	623b      	str	r3, [r7, #32]
 8003b42:	4b5b      	ldr	r3, [pc, #364]	; (8003cb0 <HAL_I2C_MspInit+0x194>)
 8003b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b46:	4a5a      	ldr	r2, [pc, #360]	; (8003cb0 <HAL_I2C_MspInit+0x194>)
 8003b48:	f043 0302 	orr.w	r3, r3, #2
 8003b4c:	6313      	str	r3, [r2, #48]	; 0x30
 8003b4e:	4b58      	ldr	r3, [pc, #352]	; (8003cb0 <HAL_I2C_MspInit+0x194>)
 8003b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b52:	f003 0302 	and.w	r3, r3, #2
 8003b56:	623b      	str	r3, [r7, #32]
 8003b58:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = MAGN_SCL_Pin|MAGN_SDA_Pin;
 8003b5a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003b5e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003b60:	2312      	movs	r3, #18
 8003b62:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b64:	2300      	movs	r3, #0
 8003b66:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b68:	2303      	movs	r3, #3
 8003b6a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003b6c:	2304      	movs	r3, #4
 8003b6e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b74:	4619      	mov	r1, r3
 8003b76:	484f      	ldr	r0, [pc, #316]	; (8003cb4 <HAL_I2C_MspInit+0x198>)
 8003b78:	f002 fcaa 	bl	80064d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	61fb      	str	r3, [r7, #28]
 8003b80:	4b4b      	ldr	r3, [pc, #300]	; (8003cb0 <HAL_I2C_MspInit+0x194>)
 8003b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b84:	4a4a      	ldr	r2, [pc, #296]	; (8003cb0 <HAL_I2C_MspInit+0x194>)
 8003b86:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003b8a:	6413      	str	r3, [r2, #64]	; 0x40
 8003b8c:	4b48      	ldr	r3, [pc, #288]	; (8003cb0 <HAL_I2C_MspInit+0x194>)
 8003b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b94:	61fb      	str	r3, [r7, #28]
 8003b96:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8003b98:	e083      	b.n	8003ca2 <HAL_I2C_MspInit+0x186>
  else if(hi2c->Instance==I2C2)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a46      	ldr	r2, [pc, #280]	; (8003cb8 <HAL_I2C_MspInit+0x19c>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d12d      	bne.n	8003c00 <HAL_I2C_MspInit+0xe4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	61bb      	str	r3, [r7, #24]
 8003ba8:	4b41      	ldr	r3, [pc, #260]	; (8003cb0 <HAL_I2C_MspInit+0x194>)
 8003baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bac:	4a40      	ldr	r2, [pc, #256]	; (8003cb0 <HAL_I2C_MspInit+0x194>)
 8003bae:	f043 0302 	orr.w	r3, r3, #2
 8003bb2:	6313      	str	r3, [r2, #48]	; 0x30
 8003bb4:	4b3e      	ldr	r3, [pc, #248]	; (8003cb0 <HAL_I2C_MspInit+0x194>)
 8003bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bb8:	f003 0302 	and.w	r3, r3, #2
 8003bbc:	61bb      	str	r3, [r7, #24]
 8003bbe:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = PRESS_SCL_Pin|PRESS_SDA_Pin;
 8003bc0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003bc4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003bc6:	2312      	movs	r3, #18
 8003bc8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003bce:	2303      	movs	r3, #3
 8003bd0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003bd2:	2304      	movs	r3, #4
 8003bd4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003bd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003bda:	4619      	mov	r1, r3
 8003bdc:	4835      	ldr	r0, [pc, #212]	; (8003cb4 <HAL_I2C_MspInit+0x198>)
 8003bde:	f002 fc77 	bl	80064d0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003be2:	2300      	movs	r3, #0
 8003be4:	617b      	str	r3, [r7, #20]
 8003be6:	4b32      	ldr	r3, [pc, #200]	; (8003cb0 <HAL_I2C_MspInit+0x194>)
 8003be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bea:	4a31      	ldr	r2, [pc, #196]	; (8003cb0 <HAL_I2C_MspInit+0x194>)
 8003bec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003bf0:	6413      	str	r3, [r2, #64]	; 0x40
 8003bf2:	4b2f      	ldr	r3, [pc, #188]	; (8003cb0 <HAL_I2C_MspInit+0x194>)
 8003bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bfa:	617b      	str	r3, [r7, #20]
 8003bfc:	697b      	ldr	r3, [r7, #20]
}
 8003bfe:	e050      	b.n	8003ca2 <HAL_I2C_MspInit+0x186>
  else if(hi2c->Instance==I2C3)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a2d      	ldr	r2, [pc, #180]	; (8003cbc <HAL_I2C_MspInit+0x1a0>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d14b      	bne.n	8003ca2 <HAL_I2C_MspInit+0x186>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	613b      	str	r3, [r7, #16]
 8003c0e:	4b28      	ldr	r3, [pc, #160]	; (8003cb0 <HAL_I2C_MspInit+0x194>)
 8003c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c12:	4a27      	ldr	r2, [pc, #156]	; (8003cb0 <HAL_I2C_MspInit+0x194>)
 8003c14:	f043 0304 	orr.w	r3, r3, #4
 8003c18:	6313      	str	r3, [r2, #48]	; 0x30
 8003c1a:	4b25      	ldr	r3, [pc, #148]	; (8003cb0 <HAL_I2C_MspInit+0x194>)
 8003c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c1e:	f003 0304 	and.w	r3, r3, #4
 8003c22:	613b      	str	r3, [r7, #16]
 8003c24:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c26:	2300      	movs	r3, #0
 8003c28:	60fb      	str	r3, [r7, #12]
 8003c2a:	4b21      	ldr	r3, [pc, #132]	; (8003cb0 <HAL_I2C_MspInit+0x194>)
 8003c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c2e:	4a20      	ldr	r2, [pc, #128]	; (8003cb0 <HAL_I2C_MspInit+0x194>)
 8003c30:	f043 0301 	orr.w	r3, r3, #1
 8003c34:	6313      	str	r3, [r2, #48]	; 0x30
 8003c36:	4b1e      	ldr	r3, [pc, #120]	; (8003cb0 <HAL_I2C_MspInit+0x194>)
 8003c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c3a:	f003 0301 	and.w	r3, r3, #1
 8003c3e:	60fb      	str	r3, [r7, #12]
 8003c40:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003c42:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003c46:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003c48:	2312      	movs	r3, #18
 8003c4a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c50:	2303      	movs	r3, #3
 8003c52:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003c54:	2304      	movs	r3, #4
 8003c56:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c5c:	4619      	mov	r1, r3
 8003c5e:	4818      	ldr	r0, [pc, #96]	; (8003cc0 <HAL_I2C_MspInit+0x1a4>)
 8003c60:	f002 fc36 	bl	80064d0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003c64:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003c68:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003c6a:	2312      	movs	r3, #18
 8003c6c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c6e:	2300      	movs	r3, #0
 8003c70:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c72:	2303      	movs	r3, #3
 8003c74:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003c76:	2304      	movs	r3, #4
 8003c78:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c7e:	4619      	mov	r1, r3
 8003c80:	4810      	ldr	r0, [pc, #64]	; (8003cc4 <HAL_I2C_MspInit+0x1a8>)
 8003c82:	f002 fc25 	bl	80064d0 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8003c86:	2300      	movs	r3, #0
 8003c88:	60bb      	str	r3, [r7, #8]
 8003c8a:	4b09      	ldr	r3, [pc, #36]	; (8003cb0 <HAL_I2C_MspInit+0x194>)
 8003c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c8e:	4a08      	ldr	r2, [pc, #32]	; (8003cb0 <HAL_I2C_MspInit+0x194>)
 8003c90:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003c94:	6413      	str	r3, [r2, #64]	; 0x40
 8003c96:	4b06      	ldr	r3, [pc, #24]	; (8003cb0 <HAL_I2C_MspInit+0x194>)
 8003c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c9a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003c9e:	60bb      	str	r3, [r7, #8]
 8003ca0:	68bb      	ldr	r3, [r7, #8]
}
 8003ca2:	bf00      	nop
 8003ca4:	3738      	adds	r7, #56	; 0x38
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}
 8003caa:	bf00      	nop
 8003cac:	40005400 	.word	0x40005400
 8003cb0:	40023800 	.word	0x40023800
 8003cb4:	40020400 	.word	0x40020400
 8003cb8:	40005800 	.word	0x40005800
 8003cbc:	40005c00 	.word	0x40005c00
 8003cc0:	40020800 	.word	0x40020800
 8003cc4:	40020000 	.word	0x40020000

08003cc8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b08a      	sub	sp, #40	; 0x28
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cd0:	f107 0314 	add.w	r3, r7, #20
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	601a      	str	r2, [r3, #0]
 8003cd8:	605a      	str	r2, [r3, #4]
 8003cda:	609a      	str	r2, [r3, #8]
 8003cdc:	60da      	str	r2, [r3, #12]
 8003cde:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a19      	ldr	r2, [pc, #100]	; (8003d4c <HAL_SPI_MspInit+0x84>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d12c      	bne.n	8003d44 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003cea:	2300      	movs	r3, #0
 8003cec:	613b      	str	r3, [r7, #16]
 8003cee:	4b18      	ldr	r3, [pc, #96]	; (8003d50 <HAL_SPI_MspInit+0x88>)
 8003cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf2:	4a17      	ldr	r2, [pc, #92]	; (8003d50 <HAL_SPI_MspInit+0x88>)
 8003cf4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003cf8:	6413      	str	r3, [r2, #64]	; 0x40
 8003cfa:	4b15      	ldr	r3, [pc, #84]	; (8003d50 <HAL_SPI_MspInit+0x88>)
 8003cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d02:	613b      	str	r3, [r7, #16]
 8003d04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d06:	2300      	movs	r3, #0
 8003d08:	60fb      	str	r3, [r7, #12]
 8003d0a:	4b11      	ldr	r3, [pc, #68]	; (8003d50 <HAL_SPI_MspInit+0x88>)
 8003d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d0e:	4a10      	ldr	r2, [pc, #64]	; (8003d50 <HAL_SPI_MspInit+0x88>)
 8003d10:	f043 0302 	orr.w	r3, r3, #2
 8003d14:	6313      	str	r3, [r2, #48]	; 0x30
 8003d16:	4b0e      	ldr	r3, [pc, #56]	; (8003d50 <HAL_SPI_MspInit+0x88>)
 8003d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d1a:	f003 0302 	and.w	r3, r3, #2
 8003d1e:	60fb      	str	r3, [r7, #12]
 8003d20:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = IMU_SCK_Pin|IMU_MISO_Pin|IMU_MOSI_Pin;
 8003d22:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8003d26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d28:	2302      	movs	r3, #2
 8003d2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d30:	2303      	movs	r3, #3
 8003d32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003d34:	2305      	movs	r3, #5
 8003d36:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d38:	f107 0314 	add.w	r3, r7, #20
 8003d3c:	4619      	mov	r1, r3
 8003d3e:	4805      	ldr	r0, [pc, #20]	; (8003d54 <HAL_SPI_MspInit+0x8c>)
 8003d40:	f002 fbc6 	bl	80064d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8003d44:	bf00      	nop
 8003d46:	3728      	adds	r7, #40	; 0x28
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bd80      	pop	{r7, pc}
 8003d4c:	40003800 	.word	0x40003800
 8003d50:	40023800 	.word	0x40023800
 8003d54:	40020400 	.word	0x40020400

08003d58 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b08e      	sub	sp, #56	; 0x38
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d64:	2200      	movs	r2, #0
 8003d66:	601a      	str	r2, [r3, #0]
 8003d68:	605a      	str	r2, [r3, #4]
 8003d6a:	609a      	str	r2, [r3, #8]
 8003d6c:	60da      	str	r2, [r3, #12]
 8003d6e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d78:	d134      	bne.n	8003de4 <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	623b      	str	r3, [r7, #32]
 8003d7e:	4b4b      	ldr	r3, [pc, #300]	; (8003eac <HAL_TIM_Base_MspInit+0x154>)
 8003d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d82:	4a4a      	ldr	r2, [pc, #296]	; (8003eac <HAL_TIM_Base_MspInit+0x154>)
 8003d84:	f043 0301 	orr.w	r3, r3, #1
 8003d88:	6413      	str	r3, [r2, #64]	; 0x40
 8003d8a:	4b48      	ldr	r3, [pc, #288]	; (8003eac <HAL_TIM_Base_MspInit+0x154>)
 8003d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d8e:	f003 0301 	and.w	r3, r3, #1
 8003d92:	623b      	str	r3, [r7, #32]
 8003d94:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d96:	2300      	movs	r3, #0
 8003d98:	61fb      	str	r3, [r7, #28]
 8003d9a:	4b44      	ldr	r3, [pc, #272]	; (8003eac <HAL_TIM_Base_MspInit+0x154>)
 8003d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d9e:	4a43      	ldr	r2, [pc, #268]	; (8003eac <HAL_TIM_Base_MspInit+0x154>)
 8003da0:	f043 0301 	orr.w	r3, r3, #1
 8003da4:	6313      	str	r3, [r2, #48]	; 0x30
 8003da6:	4b41      	ldr	r3, [pc, #260]	; (8003eac <HAL_TIM_Base_MspInit+0x154>)
 8003da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003daa:	f003 0301 	and.w	r3, r3, #1
 8003dae:	61fb      	str	r3, [r7, #28]
 8003db0:	69fb      	ldr	r3, [r7, #28]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = ECHO_Pin;
 8003db2:	2301      	movs	r3, #1
 8003db4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003db6:	2302      	movs	r3, #2
 8003db8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ECHO_GPIO_Port, &GPIO_InitStruct);
 8003dc6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003dca:	4619      	mov	r1, r3
 8003dcc:	4838      	ldr	r0, [pc, #224]	; (8003eb0 <HAL_TIM_Base_MspInit+0x158>)
 8003dce:	f002 fb7f 	bl	80064d0 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	2105      	movs	r1, #5
 8003dd6:	201c      	movs	r0, #28
 8003dd8:	f001 ff41 	bl	8005c5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003ddc:	201c      	movs	r0, #28
 8003dde:	f001 ff5a 	bl	8005c96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8003de2:	e05e      	b.n	8003ea2 <HAL_TIM_Base_MspInit+0x14a>
  else if(htim_base->Instance==TIM3)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a32      	ldr	r2, [pc, #200]	; (8003eb4 <HAL_TIM_Base_MspInit+0x15c>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d10e      	bne.n	8003e0c <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003dee:	2300      	movs	r3, #0
 8003df0:	61bb      	str	r3, [r7, #24]
 8003df2:	4b2e      	ldr	r3, [pc, #184]	; (8003eac <HAL_TIM_Base_MspInit+0x154>)
 8003df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df6:	4a2d      	ldr	r2, [pc, #180]	; (8003eac <HAL_TIM_Base_MspInit+0x154>)
 8003df8:	f043 0302 	orr.w	r3, r3, #2
 8003dfc:	6413      	str	r3, [r2, #64]	; 0x40
 8003dfe:	4b2b      	ldr	r3, [pc, #172]	; (8003eac <HAL_TIM_Base_MspInit+0x154>)
 8003e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e02:	f003 0302 	and.w	r3, r3, #2
 8003e06:	61bb      	str	r3, [r7, #24]
 8003e08:	69bb      	ldr	r3, [r7, #24]
}
 8003e0a:	e04a      	b.n	8003ea2 <HAL_TIM_Base_MspInit+0x14a>
  else if(htim_base->Instance==TIM4)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a29      	ldr	r2, [pc, #164]	; (8003eb8 <HAL_TIM_Base_MspInit+0x160>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d10e      	bne.n	8003e34 <HAL_TIM_Base_MspInit+0xdc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003e16:	2300      	movs	r3, #0
 8003e18:	617b      	str	r3, [r7, #20]
 8003e1a:	4b24      	ldr	r3, [pc, #144]	; (8003eac <HAL_TIM_Base_MspInit+0x154>)
 8003e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e1e:	4a23      	ldr	r2, [pc, #140]	; (8003eac <HAL_TIM_Base_MspInit+0x154>)
 8003e20:	f043 0304 	orr.w	r3, r3, #4
 8003e24:	6413      	str	r3, [r2, #64]	; 0x40
 8003e26:	4b21      	ldr	r3, [pc, #132]	; (8003eac <HAL_TIM_Base_MspInit+0x154>)
 8003e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e2a:	f003 0304 	and.w	r3, r3, #4
 8003e2e:	617b      	str	r3, [r7, #20]
 8003e30:	697b      	ldr	r3, [r7, #20]
}
 8003e32:	e036      	b.n	8003ea2 <HAL_TIM_Base_MspInit+0x14a>
  else if(htim_base->Instance==TIM6)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a20      	ldr	r2, [pc, #128]	; (8003ebc <HAL_TIM_Base_MspInit+0x164>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d116      	bne.n	8003e6c <HAL_TIM_Base_MspInit+0x114>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003e3e:	2300      	movs	r3, #0
 8003e40:	613b      	str	r3, [r7, #16]
 8003e42:	4b1a      	ldr	r3, [pc, #104]	; (8003eac <HAL_TIM_Base_MspInit+0x154>)
 8003e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e46:	4a19      	ldr	r2, [pc, #100]	; (8003eac <HAL_TIM_Base_MspInit+0x154>)
 8003e48:	f043 0310 	orr.w	r3, r3, #16
 8003e4c:	6413      	str	r3, [r2, #64]	; 0x40
 8003e4e:	4b17      	ldr	r3, [pc, #92]	; (8003eac <HAL_TIM_Base_MspInit+0x154>)
 8003e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e52:	f003 0310 	and.w	r3, r3, #16
 8003e56:	613b      	str	r3, [r7, #16]
 8003e58:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	2105      	movs	r1, #5
 8003e5e:	2036      	movs	r0, #54	; 0x36
 8003e60:	f001 fefd 	bl	8005c5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003e64:	2036      	movs	r0, #54	; 0x36
 8003e66:	f001 ff16 	bl	8005c96 <HAL_NVIC_EnableIRQ>
}
 8003e6a:	e01a      	b.n	8003ea2 <HAL_TIM_Base_MspInit+0x14a>
  else if(htim_base->Instance==TIM7)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a13      	ldr	r2, [pc, #76]	; (8003ec0 <HAL_TIM_Base_MspInit+0x168>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d115      	bne.n	8003ea2 <HAL_TIM_Base_MspInit+0x14a>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003e76:	2300      	movs	r3, #0
 8003e78:	60fb      	str	r3, [r7, #12]
 8003e7a:	4b0c      	ldr	r3, [pc, #48]	; (8003eac <HAL_TIM_Base_MspInit+0x154>)
 8003e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e7e:	4a0b      	ldr	r2, [pc, #44]	; (8003eac <HAL_TIM_Base_MspInit+0x154>)
 8003e80:	f043 0320 	orr.w	r3, r3, #32
 8003e84:	6413      	str	r3, [r2, #64]	; 0x40
 8003e86:	4b09      	ldr	r3, [pc, #36]	; (8003eac <HAL_TIM_Base_MspInit+0x154>)
 8003e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e8a:	f003 0320 	and.w	r3, r3, #32
 8003e8e:	60fb      	str	r3, [r7, #12]
 8003e90:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 8003e92:	2200      	movs	r2, #0
 8003e94:	2105      	movs	r1, #5
 8003e96:	2037      	movs	r0, #55	; 0x37
 8003e98:	f001 fee1 	bl	8005c5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8003e9c:	2037      	movs	r0, #55	; 0x37
 8003e9e:	f001 fefa 	bl	8005c96 <HAL_NVIC_EnableIRQ>
}
 8003ea2:	bf00      	nop
 8003ea4:	3738      	adds	r7, #56	; 0x38
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bd80      	pop	{r7, pc}
 8003eaa:	bf00      	nop
 8003eac:	40023800 	.word	0x40023800
 8003eb0:	40020000 	.word	0x40020000
 8003eb4:	40000400 	.word	0x40000400
 8003eb8:	40000800 	.word	0x40000800
 8003ebc:	40001000 	.word	0x40001000
 8003ec0:	40001400 	.word	0x40001400

08003ec4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b08a      	sub	sp, #40	; 0x28
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ecc:	f107 0314 	add.w	r3, r7, #20
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	601a      	str	r2, [r3, #0]
 8003ed4:	605a      	str	r2, [r3, #4]
 8003ed6:	609a      	str	r2, [r3, #8]
 8003ed8:	60da      	str	r2, [r3, #12]
 8003eda:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a21      	ldr	r2, [pc, #132]	; (8003f68 <HAL_TIM_MspPostInit+0xa4>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d13b      	bne.n	8003f5e <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	613b      	str	r3, [r7, #16]
 8003eea:	4b20      	ldr	r3, [pc, #128]	; (8003f6c <HAL_TIM_MspPostInit+0xa8>)
 8003eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eee:	4a1f      	ldr	r2, [pc, #124]	; (8003f6c <HAL_TIM_MspPostInit+0xa8>)
 8003ef0:	f043 0301 	orr.w	r3, r3, #1
 8003ef4:	6313      	str	r3, [r2, #48]	; 0x30
 8003ef6:	4b1d      	ldr	r3, [pc, #116]	; (8003f6c <HAL_TIM_MspPostInit+0xa8>)
 8003ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003efa:	f003 0301 	and.w	r3, r3, #1
 8003efe:	613b      	str	r3, [r7, #16]
 8003f00:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f02:	2300      	movs	r3, #0
 8003f04:	60fb      	str	r3, [r7, #12]
 8003f06:	4b19      	ldr	r3, [pc, #100]	; (8003f6c <HAL_TIM_MspPostInit+0xa8>)
 8003f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f0a:	4a18      	ldr	r2, [pc, #96]	; (8003f6c <HAL_TIM_MspPostInit+0xa8>)
 8003f0c:	f043 0302 	orr.w	r3, r3, #2
 8003f10:	6313      	str	r3, [r2, #48]	; 0x30
 8003f12:	4b16      	ldr	r3, [pc, #88]	; (8003f6c <HAL_TIM_MspPostInit+0xa8>)
 8003f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f16:	f003 0302 	and.w	r3, r3, #2
 8003f1a:	60fb      	str	r3, [r7, #12]
 8003f1c:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = PWM1_Pin|PWM2_Pin;
 8003f1e:	23c0      	movs	r3, #192	; 0xc0
 8003f20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f22:	2302      	movs	r3, #2
 8003f24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f26:	2300      	movs	r3, #0
 8003f28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003f2e:	2302      	movs	r3, #2
 8003f30:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f32:	f107 0314 	add.w	r3, r7, #20
 8003f36:	4619      	mov	r1, r3
 8003f38:	480d      	ldr	r0, [pc, #52]	; (8003f70 <HAL_TIM_MspPostInit+0xac>)
 8003f3a:	f002 fac9 	bl	80064d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PWM3_Pin|PWM4_Pin;
 8003f3e:	2303      	movs	r3, #3
 8003f40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f42:	2302      	movs	r3, #2
 8003f44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f46:	2300      	movs	r3, #0
 8003f48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003f4e:	2302      	movs	r3, #2
 8003f50:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f52:	f107 0314 	add.w	r3, r7, #20
 8003f56:	4619      	mov	r1, r3
 8003f58:	4806      	ldr	r0, [pc, #24]	; (8003f74 <HAL_TIM_MspPostInit+0xb0>)
 8003f5a:	f002 fab9 	bl	80064d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003f5e:	bf00      	nop
 8003f60:	3728      	adds	r7, #40	; 0x28
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}
 8003f66:	bf00      	nop
 8003f68:	40000400 	.word	0x40000400
 8003f6c:	40023800 	.word	0x40023800
 8003f70:	40020000 	.word	0x40020000
 8003f74:	40020400 	.word	0x40020400

08003f78 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b090      	sub	sp, #64	; 0x40
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f80:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003f84:	2200      	movs	r2, #0
 8003f86:	601a      	str	r2, [r3, #0]
 8003f88:	605a      	str	r2, [r3, #4]
 8003f8a:	609a      	str	r2, [r3, #8]
 8003f8c:	60da      	str	r2, [r3, #12]
 8003f8e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a81      	ldr	r2, [pc, #516]	; (800419c <HAL_UART_MspInit+0x224>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d15d      	bne.n	8004056 <HAL_UART_MspInit+0xde>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f9e:	4b80      	ldr	r3, [pc, #512]	; (80041a0 <HAL_UART_MspInit+0x228>)
 8003fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fa2:	4a7f      	ldr	r2, [pc, #508]	; (80041a0 <HAL_UART_MspInit+0x228>)
 8003fa4:	f043 0310 	orr.w	r3, r3, #16
 8003fa8:	6453      	str	r3, [r2, #68]	; 0x44
 8003faa:	4b7d      	ldr	r3, [pc, #500]	; (80041a0 <HAL_UART_MspInit+0x228>)
 8003fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fae:	f003 0310 	and.w	r3, r3, #16
 8003fb2:	62bb      	str	r3, [r7, #40]	; 0x28
 8003fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	627b      	str	r3, [r7, #36]	; 0x24
 8003fba:	4b79      	ldr	r3, [pc, #484]	; (80041a0 <HAL_UART_MspInit+0x228>)
 8003fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fbe:	4a78      	ldr	r2, [pc, #480]	; (80041a0 <HAL_UART_MspInit+0x228>)
 8003fc0:	f043 0301 	orr.w	r3, r3, #1
 8003fc4:	6313      	str	r3, [r2, #48]	; 0x30
 8003fc6:	4b76      	ldr	r3, [pc, #472]	; (80041a0 <HAL_UART_MspInit+0x228>)
 8003fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fca:	f003 0301 	and.w	r3, r3, #1
 8003fce:	627b      	str	r3, [r7, #36]	; 0x24
 8003fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = RECEIVER_TX_Pin|RECEIVER_RX_Pin;
 8003fd2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003fd6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fd8:	2302      	movs	r3, #2
 8003fda:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fdc:	2300      	movs	r3, #0
 8003fde:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fe0:	2303      	movs	r3, #3
 8003fe2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003fe4:	2307      	movs	r3, #7
 8003fe6:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fe8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003fec:	4619      	mov	r1, r3
 8003fee:	486d      	ldr	r0, [pc, #436]	; (80041a4 <HAL_UART_MspInit+0x22c>)
 8003ff0:	f002 fa6e 	bl	80064d0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8003ff4:	4b6c      	ldr	r3, [pc, #432]	; (80041a8 <HAL_UART_MspInit+0x230>)
 8003ff6:	4a6d      	ldr	r2, [pc, #436]	; (80041ac <HAL_UART_MspInit+0x234>)
 8003ff8:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8003ffa:	4b6b      	ldr	r3, [pc, #428]	; (80041a8 <HAL_UART_MspInit+0x230>)
 8003ffc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004000:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004002:	4b69      	ldr	r3, [pc, #420]	; (80041a8 <HAL_UART_MspInit+0x230>)
 8004004:	2200      	movs	r2, #0
 8004006:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004008:	4b67      	ldr	r3, [pc, #412]	; (80041a8 <HAL_UART_MspInit+0x230>)
 800400a:	2200      	movs	r2, #0
 800400c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800400e:	4b66      	ldr	r3, [pc, #408]	; (80041a8 <HAL_UART_MspInit+0x230>)
 8004010:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004014:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004016:	4b64      	ldr	r3, [pc, #400]	; (80041a8 <HAL_UART_MspInit+0x230>)
 8004018:	2200      	movs	r2, #0
 800401a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800401c:	4b62      	ldr	r3, [pc, #392]	; (80041a8 <HAL_UART_MspInit+0x230>)
 800401e:	2200      	movs	r2, #0
 8004020:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8004022:	4b61      	ldr	r3, [pc, #388]	; (80041a8 <HAL_UART_MspInit+0x230>)
 8004024:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004028:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800402a:	4b5f      	ldr	r3, [pc, #380]	; (80041a8 <HAL_UART_MspInit+0x230>)
 800402c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004030:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004032:	4b5d      	ldr	r3, [pc, #372]	; (80041a8 <HAL_UART_MspInit+0x230>)
 8004034:	2200      	movs	r2, #0
 8004036:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8004038:	485b      	ldr	r0, [pc, #364]	; (80041a8 <HAL_UART_MspInit+0x230>)
 800403a:	f001 fe47 	bl	8005ccc <HAL_DMA_Init>
 800403e:	4603      	mov	r3, r0
 8004040:	2b00      	cmp	r3, #0
 8004042:	d001      	beq.n	8004048 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 8004044:	f7ff fc92 	bl	800396c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	4a57      	ldr	r2, [pc, #348]	; (80041a8 <HAL_UART_MspInit+0x230>)
 800404c:	639a      	str	r2, [r3, #56]	; 0x38
 800404e:	4a56      	ldr	r2, [pc, #344]	; (80041a8 <HAL_UART_MspInit+0x230>)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8004054:	e09d      	b.n	8004192 <HAL_UART_MspInit+0x21a>
  else if(huart->Instance==USART2)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a55      	ldr	r2, [pc, #340]	; (80041b0 <HAL_UART_MspInit+0x238>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d134      	bne.n	80040ca <HAL_UART_MspInit+0x152>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004060:	2300      	movs	r3, #0
 8004062:	623b      	str	r3, [r7, #32]
 8004064:	4b4e      	ldr	r3, [pc, #312]	; (80041a0 <HAL_UART_MspInit+0x228>)
 8004066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004068:	4a4d      	ldr	r2, [pc, #308]	; (80041a0 <HAL_UART_MspInit+0x228>)
 800406a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800406e:	6413      	str	r3, [r2, #64]	; 0x40
 8004070:	4b4b      	ldr	r3, [pc, #300]	; (80041a0 <HAL_UART_MspInit+0x228>)
 8004072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004074:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004078:	623b      	str	r3, [r7, #32]
 800407a:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800407c:	2300      	movs	r3, #0
 800407e:	61fb      	str	r3, [r7, #28]
 8004080:	4b47      	ldr	r3, [pc, #284]	; (80041a0 <HAL_UART_MspInit+0x228>)
 8004082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004084:	4a46      	ldr	r2, [pc, #280]	; (80041a0 <HAL_UART_MspInit+0x228>)
 8004086:	f043 0301 	orr.w	r3, r3, #1
 800408a:	6313      	str	r3, [r2, #48]	; 0x30
 800408c:	4b44      	ldr	r3, [pc, #272]	; (80041a0 <HAL_UART_MspInit+0x228>)
 800408e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004090:	f003 0301 	and.w	r3, r3, #1
 8004094:	61fb      	str	r3, [r7, #28]
 8004096:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004098:	230c      	movs	r3, #12
 800409a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800409c:	2302      	movs	r3, #2
 800409e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040a0:	2300      	movs	r3, #0
 80040a2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040a4:	2303      	movs	r3, #3
 80040a6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80040a8:	2307      	movs	r3, #7
 80040aa:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040ac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80040b0:	4619      	mov	r1, r3
 80040b2:	483c      	ldr	r0, [pc, #240]	; (80041a4 <HAL_UART_MspInit+0x22c>)
 80040b4:	f002 fa0c 	bl	80064d0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80040b8:	2200      	movs	r2, #0
 80040ba:	2105      	movs	r1, #5
 80040bc:	2026      	movs	r0, #38	; 0x26
 80040be:	f001 fdce 	bl	8005c5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80040c2:	2026      	movs	r0, #38	; 0x26
 80040c4:	f001 fde7 	bl	8005c96 <HAL_NVIC_EnableIRQ>
}
 80040c8:	e063      	b.n	8004192 <HAL_UART_MspInit+0x21a>
  else if(huart->Instance==USART3)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a39      	ldr	r2, [pc, #228]	; (80041b4 <HAL_UART_MspInit+0x23c>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d12d      	bne.n	8004130 <HAL_UART_MspInit+0x1b8>
    __HAL_RCC_USART3_CLK_ENABLE();
 80040d4:	2300      	movs	r3, #0
 80040d6:	61bb      	str	r3, [r7, #24]
 80040d8:	4b31      	ldr	r3, [pc, #196]	; (80041a0 <HAL_UART_MspInit+0x228>)
 80040da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040dc:	4a30      	ldr	r2, [pc, #192]	; (80041a0 <HAL_UART_MspInit+0x228>)
 80040de:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80040e2:	6413      	str	r3, [r2, #64]	; 0x40
 80040e4:	4b2e      	ldr	r3, [pc, #184]	; (80041a0 <HAL_UART_MspInit+0x228>)
 80040e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80040ec:	61bb      	str	r3, [r7, #24]
 80040ee:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80040f0:	2300      	movs	r3, #0
 80040f2:	617b      	str	r3, [r7, #20]
 80040f4:	4b2a      	ldr	r3, [pc, #168]	; (80041a0 <HAL_UART_MspInit+0x228>)
 80040f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040f8:	4a29      	ldr	r2, [pc, #164]	; (80041a0 <HAL_UART_MspInit+0x228>)
 80040fa:	f043 0304 	orr.w	r3, r3, #4
 80040fe:	6313      	str	r3, [r2, #48]	; 0x30
 8004100:	4b27      	ldr	r3, [pc, #156]	; (80041a0 <HAL_UART_MspInit+0x228>)
 8004102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004104:	f003 0304 	and.w	r3, r3, #4
 8004108:	617b      	str	r3, [r7, #20]
 800410a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GNSS_TX_Pin|GNSS_RX_Pin;
 800410c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004110:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004112:	2302      	movs	r3, #2
 8004114:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004116:	2300      	movs	r3, #0
 8004118:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800411a:	2303      	movs	r3, #3
 800411c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800411e:	2307      	movs	r3, #7
 8004120:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004122:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004126:	4619      	mov	r1, r3
 8004128:	4823      	ldr	r0, [pc, #140]	; (80041b8 <HAL_UART_MspInit+0x240>)
 800412a:	f002 f9d1 	bl	80064d0 <HAL_GPIO_Init>
}
 800412e:	e030      	b.n	8004192 <HAL_UART_MspInit+0x21a>
  else if(huart->Instance==USART6)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a21      	ldr	r2, [pc, #132]	; (80041bc <HAL_UART_MspInit+0x244>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d12b      	bne.n	8004192 <HAL_UART_MspInit+0x21a>
    __HAL_RCC_USART6_CLK_ENABLE();
 800413a:	2300      	movs	r3, #0
 800413c:	613b      	str	r3, [r7, #16]
 800413e:	4b18      	ldr	r3, [pc, #96]	; (80041a0 <HAL_UART_MspInit+0x228>)
 8004140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004142:	4a17      	ldr	r2, [pc, #92]	; (80041a0 <HAL_UART_MspInit+0x228>)
 8004144:	f043 0320 	orr.w	r3, r3, #32
 8004148:	6453      	str	r3, [r2, #68]	; 0x44
 800414a:	4b15      	ldr	r3, [pc, #84]	; (80041a0 <HAL_UART_MspInit+0x228>)
 800414c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800414e:	f003 0320 	and.w	r3, r3, #32
 8004152:	613b      	str	r3, [r7, #16]
 8004154:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004156:	2300      	movs	r3, #0
 8004158:	60fb      	str	r3, [r7, #12]
 800415a:	4b11      	ldr	r3, [pc, #68]	; (80041a0 <HAL_UART_MspInit+0x228>)
 800415c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800415e:	4a10      	ldr	r2, [pc, #64]	; (80041a0 <HAL_UART_MspInit+0x228>)
 8004160:	f043 0304 	orr.w	r3, r3, #4
 8004164:	6313      	str	r3, [r2, #48]	; 0x30
 8004166:	4b0e      	ldr	r3, [pc, #56]	; (80041a0 <HAL_UART_MspInit+0x228>)
 8004168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800416a:	f003 0304 	and.w	r3, r3, #4
 800416e:	60fb      	str	r3, [r7, #12]
 8004170:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004172:	23c0      	movs	r3, #192	; 0xc0
 8004174:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004176:	2302      	movs	r3, #2
 8004178:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800417a:	2300      	movs	r3, #0
 800417c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800417e:	2303      	movs	r3, #3
 8004180:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8004182:	2308      	movs	r3, #8
 8004184:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004186:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800418a:	4619      	mov	r1, r3
 800418c:	480a      	ldr	r0, [pc, #40]	; (80041b8 <HAL_UART_MspInit+0x240>)
 800418e:	f002 f99f 	bl	80064d0 <HAL_GPIO_Init>
}
 8004192:	bf00      	nop
 8004194:	3740      	adds	r7, #64	; 0x40
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}
 800419a:	bf00      	nop
 800419c:	40011000 	.word	0x40011000
 80041a0:	40023800 	.word	0x40023800
 80041a4:	40020000 	.word	0x40020000
 80041a8:	20000904 	.word	0x20000904
 80041ac:	40026440 	.word	0x40026440
 80041b0:	40004400 	.word	0x40004400
 80041b4:	40004800 	.word	0x40004800
 80041b8:	40020800 	.word	0x40020800
 80041bc:	40011400 	.word	0x40011400

080041c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80041c0:	b480      	push	{r7}
 80041c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80041c4:	e7fe      	b.n	80041c4 <NMI_Handler+0x4>

080041c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80041c6:	b480      	push	{r7}
 80041c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80041ca:	e7fe      	b.n	80041ca <HardFault_Handler+0x4>

080041cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80041cc:	b480      	push	{r7}
 80041ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80041d0:	e7fe      	b.n	80041d0 <MemManage_Handler+0x4>

080041d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80041d2:	b480      	push	{r7}
 80041d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80041d6:	e7fe      	b.n	80041d6 <BusFault_Handler+0x4>

080041d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80041d8:	b480      	push	{r7}
 80041da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80041dc:	e7fe      	b.n	80041dc <UsageFault_Handler+0x4>

080041de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80041de:	b480      	push	{r7}
 80041e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80041e2:	bf00      	nop
 80041e4:	46bd      	mov	sp, r7
 80041e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ea:	4770      	bx	lr

080041ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80041f0:	f001 f9b4 	bl	800555c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80041f4:	f00a f9d4 	bl	800e5a0 <xTaskGetSchedulerState>
 80041f8:	4603      	mov	r3, r0
 80041fa:	2b01      	cmp	r3, #1
 80041fc:	d001      	beq.n	8004202 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80041fe:	f00a fc9b 	bl	800eb38 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004202:	bf00      	nop
 8004204:	bd80      	pop	{r7, pc}

08004206 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8004206:	b580      	push	{r7, lr}
 8004208:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_Pin);
 800420a:	2001      	movs	r0, #1
 800420c:	f002 fb30 	bl	8006870 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8004210:	bf00      	nop
 8004212:	bd80      	pop	{r7, pc}

08004214 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IT_PRESS_Pin);
 8004218:	2004      	movs	r0, #4
 800421a:	f002 fb29 	bl	8006870 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800421e:	bf00      	nop
 8004220:	bd80      	pop	{r7, pc}
	...

08004224 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004228:	4802      	ldr	r0, [pc, #8]	; (8004234 <TIM2_IRQHandler+0x10>)
 800422a:	f004 fe0c 	bl	8008e46 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800422e:	bf00      	nop
 8004230:	bd80      	pop	{r7, pc}
 8004232:	bf00      	nop
 8004234:	2000068c 	.word	0x2000068c

08004238 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800423c:	4802      	ldr	r0, [pc, #8]	; (8004248 <USART2_IRQHandler+0x10>)
 800423e:	f005 fff3 	bl	800a228 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004242:	bf00      	nop
 8004244:	bd80      	pop	{r7, pc}
 8004246:	bf00      	nop
 8004248:	20000838 	.word	0x20000838

0800424c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IT_GYRO_Pin);
 8004250:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004254:	f002 fb0c 	bl	8006870 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(IT_ACC_Pin);
 8004258:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800425c:	f002 fb08 	bl	8006870 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(IT_MAGN_Pin);
 8004260:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004264:	f002 fb04 	bl	8006870 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004268:	bf00      	nop
 800426a:	bd80      	pop	{r7, pc}

0800426c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004270:	4802      	ldr	r0, [pc, #8]	; (800427c <TIM6_DAC_IRQHandler+0x10>)
 8004272:	f004 fde8 	bl	8008e46 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8004276:	bf00      	nop
 8004278:	bd80      	pop	{r7, pc}
 800427a:	bf00      	nop
 800427c:	20000764 	.word	0x20000764

08004280 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8004284:	4802      	ldr	r0, [pc, #8]	; (8004290 <TIM7_IRQHandler+0x10>)
 8004286:	f004 fdde 	bl	8008e46 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800428a:	bf00      	nop
 800428c:	bd80      	pop	{r7, pc}
 800428e:	bf00      	nop
 8004290:	200007ac 	.word	0x200007ac

08004294 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8004298:	4802      	ldr	r0, [pc, #8]	; (80042a4 <DMA2_Stream2_IRQHandler+0x10>)
 800429a:	f001 feaf 	bl	8005ffc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800429e:	bf00      	nop
 80042a0:	bd80      	pop	{r7, pc}
 80042a2:	bf00      	nop
 80042a4:	20000904 	.word	0x20000904

080042a8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80042a8:	b480      	push	{r7}
 80042aa:	af00      	add	r7, sp, #0
  return 1;
 80042ac:	2301      	movs	r3, #1
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	46bd      	mov	sp, r7
 80042b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b6:	4770      	bx	lr

080042b8 <_kill>:

int _kill(int pid, int sig)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b082      	sub	sp, #8
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
 80042c0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80042c2:	f00a fe73 	bl	800efac <__errno>
 80042c6:	4603      	mov	r3, r0
 80042c8:	2216      	movs	r2, #22
 80042ca:	601a      	str	r2, [r3, #0]
  return -1;
 80042cc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	3708      	adds	r7, #8
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bd80      	pop	{r7, pc}

080042d8 <_exit>:

void _exit (int status)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b082      	sub	sp, #8
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80042e0:	f04f 31ff 	mov.w	r1, #4294967295
 80042e4:	6878      	ldr	r0, [r7, #4]
 80042e6:	f7ff ffe7 	bl	80042b8 <_kill>
  while (1) {}    /* Make sure we hang here */
 80042ea:	e7fe      	b.n	80042ea <_exit+0x12>

080042ec <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b086      	sub	sp, #24
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	60f8      	str	r0, [r7, #12]
 80042f4:	60b9      	str	r1, [r7, #8]
 80042f6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80042f8:	2300      	movs	r3, #0
 80042fa:	617b      	str	r3, [r7, #20]
 80042fc:	e00a      	b.n	8004314 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80042fe:	f3af 8000 	nop.w
 8004302:	4601      	mov	r1, r0
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	1c5a      	adds	r2, r3, #1
 8004308:	60ba      	str	r2, [r7, #8]
 800430a:	b2ca      	uxtb	r2, r1
 800430c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800430e:	697b      	ldr	r3, [r7, #20]
 8004310:	3301      	adds	r3, #1
 8004312:	617b      	str	r3, [r7, #20]
 8004314:	697a      	ldr	r2, [r7, #20]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	429a      	cmp	r2, r3
 800431a:	dbf0      	blt.n	80042fe <_read+0x12>
  }

  return len;
 800431c:	687b      	ldr	r3, [r7, #4]
}
 800431e:	4618      	mov	r0, r3
 8004320:	3718      	adds	r7, #24
 8004322:	46bd      	mov	sp, r7
 8004324:	bd80      	pop	{r7, pc}

08004326 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004326:	b580      	push	{r7, lr}
 8004328:	b086      	sub	sp, #24
 800432a:	af00      	add	r7, sp, #0
 800432c:	60f8      	str	r0, [r7, #12]
 800432e:	60b9      	str	r1, [r7, #8]
 8004330:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004332:	2300      	movs	r3, #0
 8004334:	617b      	str	r3, [r7, #20]
 8004336:	e009      	b.n	800434c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	1c5a      	adds	r2, r3, #1
 800433c:	60ba      	str	r2, [r7, #8]
 800433e:	781b      	ldrb	r3, [r3, #0]
 8004340:	4618      	mov	r0, r3
 8004342:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	3301      	adds	r3, #1
 800434a:	617b      	str	r3, [r7, #20]
 800434c:	697a      	ldr	r2, [r7, #20]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	429a      	cmp	r2, r3
 8004352:	dbf1      	blt.n	8004338 <_write+0x12>
  }
  return len;
 8004354:	687b      	ldr	r3, [r7, #4]
}
 8004356:	4618      	mov	r0, r3
 8004358:	3718      	adds	r7, #24
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}

0800435e <_close>:

int _close(int file)
{
 800435e:	b480      	push	{r7}
 8004360:	b083      	sub	sp, #12
 8004362:	af00      	add	r7, sp, #0
 8004364:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004366:	f04f 33ff 	mov.w	r3, #4294967295
}
 800436a:	4618      	mov	r0, r3
 800436c:	370c      	adds	r7, #12
 800436e:	46bd      	mov	sp, r7
 8004370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004374:	4770      	bx	lr

08004376 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004376:	b480      	push	{r7}
 8004378:	b083      	sub	sp, #12
 800437a:	af00      	add	r7, sp, #0
 800437c:	6078      	str	r0, [r7, #4]
 800437e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004386:	605a      	str	r2, [r3, #4]
  return 0;
 8004388:	2300      	movs	r3, #0
}
 800438a:	4618      	mov	r0, r3
 800438c:	370c      	adds	r7, #12
 800438e:	46bd      	mov	sp, r7
 8004390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004394:	4770      	bx	lr

08004396 <_isatty>:

int _isatty(int file)
{
 8004396:	b480      	push	{r7}
 8004398:	b083      	sub	sp, #12
 800439a:	af00      	add	r7, sp, #0
 800439c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800439e:	2301      	movs	r3, #1
}
 80043a0:	4618      	mov	r0, r3
 80043a2:	370c      	adds	r7, #12
 80043a4:	46bd      	mov	sp, r7
 80043a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043aa:	4770      	bx	lr

080043ac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80043ac:	b480      	push	{r7}
 80043ae:	b085      	sub	sp, #20
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	60f8      	str	r0, [r7, #12]
 80043b4:	60b9      	str	r1, [r7, #8]
 80043b6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80043b8:	2300      	movs	r3, #0
}
 80043ba:	4618      	mov	r0, r3
 80043bc:	3714      	adds	r7, #20
 80043be:	46bd      	mov	sp, r7
 80043c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c4:	4770      	bx	lr
	...

080043c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b086      	sub	sp, #24
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80043d0:	4a14      	ldr	r2, [pc, #80]	; (8004424 <_sbrk+0x5c>)
 80043d2:	4b15      	ldr	r3, [pc, #84]	; (8004428 <_sbrk+0x60>)
 80043d4:	1ad3      	subs	r3, r2, r3
 80043d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80043dc:	4b13      	ldr	r3, [pc, #76]	; (800442c <_sbrk+0x64>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d102      	bne.n	80043ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80043e4:	4b11      	ldr	r3, [pc, #68]	; (800442c <_sbrk+0x64>)
 80043e6:	4a12      	ldr	r2, [pc, #72]	; (8004430 <_sbrk+0x68>)
 80043e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80043ea:	4b10      	ldr	r3, [pc, #64]	; (800442c <_sbrk+0x64>)
 80043ec:	681a      	ldr	r2, [r3, #0]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	4413      	add	r3, r2
 80043f2:	693a      	ldr	r2, [r7, #16]
 80043f4:	429a      	cmp	r2, r3
 80043f6:	d207      	bcs.n	8004408 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80043f8:	f00a fdd8 	bl	800efac <__errno>
 80043fc:	4603      	mov	r3, r0
 80043fe:	220c      	movs	r2, #12
 8004400:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004402:	f04f 33ff 	mov.w	r3, #4294967295
 8004406:	e009      	b.n	800441c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004408:	4b08      	ldr	r3, [pc, #32]	; (800442c <_sbrk+0x64>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800440e:	4b07      	ldr	r3, [pc, #28]	; (800442c <_sbrk+0x64>)
 8004410:	681a      	ldr	r2, [r3, #0]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	4413      	add	r3, r2
 8004416:	4a05      	ldr	r2, [pc, #20]	; (800442c <_sbrk+0x64>)
 8004418:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800441a:	68fb      	ldr	r3, [r7, #12]
}
 800441c:	4618      	mov	r0, r3
 800441e:	3718      	adds	r7, #24
 8004420:	46bd      	mov	sp, r7
 8004422:	bd80      	pop	{r7, pc}
 8004424:	20020000 	.word	0x20020000
 8004428:	00000400 	.word	0x00000400
 800442c:	20002b18 	.word	0x20002b18
 8004430:	20006888 	.word	0x20006888

08004434 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004434:	b480      	push	{r7}
 8004436:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004438:	4b06      	ldr	r3, [pc, #24]	; (8004454 <SystemInit+0x20>)
 800443a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800443e:	4a05      	ldr	r2, [pc, #20]	; (8004454 <SystemInit+0x20>)
 8004440:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004444:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004448:	bf00      	nop
 800444a:	46bd      	mov	sp, r7
 800444c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004450:	4770      	bx	lr
 8004452:	bf00      	nop
 8004454:	e000ed00 	.word	0xe000ed00

08004458 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004458:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004490 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800445c:	480d      	ldr	r0, [pc, #52]	; (8004494 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800445e:	490e      	ldr	r1, [pc, #56]	; (8004498 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004460:	4a0e      	ldr	r2, [pc, #56]	; (800449c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004462:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004464:	e002      	b.n	800446c <LoopCopyDataInit>

08004466 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004466:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004468:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800446a:	3304      	adds	r3, #4

0800446c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800446c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800446e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004470:	d3f9      	bcc.n	8004466 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004472:	4a0b      	ldr	r2, [pc, #44]	; (80044a0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004474:	4c0b      	ldr	r4, [pc, #44]	; (80044a4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004476:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004478:	e001      	b.n	800447e <LoopFillZerobss>

0800447a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800447a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800447c:	3204      	adds	r2, #4

0800447e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800447e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004480:	d3fb      	bcc.n	800447a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004482:	f7ff ffd7 	bl	8004434 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004486:	f00a fd97 	bl	800efb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800448a:	f7fd f857 	bl	800153c <main>
  bx  lr    
 800448e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004490:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004494:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004498:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 800449c:	08014dc0 	.word	0x08014dc0
  ldr r2, =_sbss
 80044a0:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 80044a4:	20006884 	.word	0x20006884

080044a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80044a8:	e7fe      	b.n	80044a8 <ADC_IRQHandler>
	...

080044ac <BMI088_Init>:
 *
 */
uint8_t BMI088_Init(BMI088 *imu,
				 SPI_HandleTypeDef *spiHandle,
				 GPIO_TypeDef *csAccPinBank, uint16_t csAccPin,
				 GPIO_TypeDef *csGyrPinBank, uint16_t csGyrPin) {
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b086      	sub	sp, #24
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	60f8      	str	r0, [r7, #12]
 80044b4:	60b9      	str	r1, [r7, #8]
 80044b6:	607a      	str	r2, [r7, #4]
 80044b8:	807b      	strh	r3, [r7, #2]

	/* Store interface parameters in struct */
	imu->spiHandle 		= spiHandle;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	68ba      	ldr	r2, [r7, #8]
 80044be:	601a      	str	r2, [r3, #0]
	imu->csAccPinBank 	= csAccPinBank;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	687a      	ldr	r2, [r7, #4]
 80044c4:	605a      	str	r2, [r3, #4]
	imu->csAccPin 		= csAccPin;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	887a      	ldrh	r2, [r7, #2]
 80044ca:	819a      	strh	r2, [r3, #12]
	imu->csGyrPinBank 	= csGyrPinBank;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	6a3a      	ldr	r2, [r7, #32]
 80044d0:	609a      	str	r2, [r3, #8]
	imu->csGyrPin 		= csGyrPin;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80044d6:	81da      	strh	r2, [r3, #14]

	/* Clear DMA flags */
	imu->readingAcc = 0;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	2200      	movs	r2, #0
 80044dc:	741a      	strb	r2, [r3, #16]
	imu->readingGyr = 0;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	2200      	movs	r2, #0
 80044e2:	745a      	strb	r2, [r3, #17]

	uint8_t status = 0;
 80044e4:	2300      	movs	r3, #0
 80044e6:	75fb      	strb	r3, [r7, #23]
	/*
	 *
	 * ACCELEROMETER
	 *
	 */
	uint8_t chipID=2;
 80044e8:	2302      	movs	r3, #2
 80044ea:	75bb      	strb	r3, [r7, #22]
		}
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
		HAL_Delay(200);
	}*/
	/* Accelerometer requires rising edge on CSB at start-up to activate SPI */
	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_RESET);
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	6858      	ldr	r0, [r3, #4]
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	899b      	ldrh	r3, [r3, #12]
 80044f4:	2200      	movs	r2, #0
 80044f6:	4619      	mov	r1, r3
 80044f8:	f002 f986 	bl	8006808 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80044fc:	2001      	movs	r0, #1
 80044fe:	f001 f84d 	bl	800559c <HAL_Delay>
	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_SET);
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	6858      	ldr	r0, [r3, #4]
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	899b      	ldrh	r3, [r3, #12]
 800450a:	2201      	movs	r2, #1
 800450c:	4619      	mov	r1, r3
 800450e:	f002 f97b 	bl	8006808 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8004512:	2032      	movs	r0, #50	; 0x32
 8004514:	f001 f842 	bl	800559c <HAL_Delay>

	/* Perform accelerometer soft reset */
	status += BMI088_WriteAccRegister(imu, BMI_ACC_SOFTRESET, 0xB6);
 8004518:	22b6      	movs	r2, #182	; 0xb6
 800451a:	217e      	movs	r1, #126	; 0x7e
 800451c:	68f8      	ldr	r0, [r7, #12]
 800451e:	f000 f95b 	bl	80047d8 <BMI088_WriteAccRegister>
 8004522:	4603      	mov	r3, r0
 8004524:	461a      	mov	r2, r3
 8004526:	7dfb      	ldrb	r3, [r7, #23]
 8004528:	4413      	add	r3, r2
 800452a:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(50);
 800452c:	2032      	movs	r0, #50	; 0x32
 800452e:	f001 f835 	bl	800559c <HAL_Delay>

	/* Check chip ID */
	chipID=2;
 8004532:	2302      	movs	r3, #2
 8004534:	75bb      	strb	r3, [r7, #22]

	status += BMI088_ReadAccRegister(imu, BMI_ACC_CHIP_ID, &chipID);
 8004536:	f107 0316 	add.w	r3, r7, #22
 800453a:	461a      	mov	r2, r3
 800453c:	2100      	movs	r1, #0
 800453e:	68f8      	ldr	r0, [r7, #12]
 8004540:	f000 f8d0 	bl	80046e4 <BMI088_ReadAccRegister>
 8004544:	4603      	mov	r3, r0
 8004546:	461a      	mov	r2, r3
 8004548:	7dfb      	ldrb	r3, [r7, #23]
 800454a:	4413      	add	r3, r2
 800454c:	75fb      	strb	r3, [r7, #23]

	/*HAL_Delay(10);
	//status += BMI088_ReadAccRegister(imu, 0x02, &chipID); //0x02 ACC_ERR_REG return 0xFF ->fatal error
	status += BMI088_ReadAccRegister(imu, 0x02, &chipID);*/

	HAL_Delay(10);
 800454e:	200a      	movs	r0, #10
 8004550:	f001 f824 	bl	800559c <HAL_Delay>

	/* Configure accelerometer  */

	status += BMI088_WriteAccRegister(imu, BMI_ACC_CONF, 0xA9); /* (0xA8 no oversampling, ODR = 100 Hz, BW = 40 Hz), 200 Hz no oversampling 0xA9, 0x99 200Hz OSR2  */
 8004554:	22a9      	movs	r2, #169	; 0xa9
 8004556:	2140      	movs	r1, #64	; 0x40
 8004558:	68f8      	ldr	r0, [r7, #12]
 800455a:	f000 f93d 	bl	80047d8 <BMI088_WriteAccRegister>
 800455e:	4603      	mov	r3, r0
 8004560:	461a      	mov	r2, r3
 8004562:	7dfb      	ldrb	r3, [r7, #23]
 8004564:	4413      	add	r3, r2
 8004566:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8004568:	200a      	movs	r0, #10
 800456a:	f001 f817 	bl	800559c <HAL_Delay>


	status += BMI088_WriteAccRegister(imu, BMI_ACC_RANGE, 0x00); /* +- 3g range */
 800456e:	2200      	movs	r2, #0
 8004570:	2141      	movs	r1, #65	; 0x41
 8004572:	68f8      	ldr	r0, [r7, #12]
 8004574:	f000 f930 	bl	80047d8 <BMI088_WriteAccRegister>
 8004578:	4603      	mov	r3, r0
 800457a:	461a      	mov	r2, r3
 800457c:	7dfb      	ldrb	r3, [r7, #23]
 800457e:	4413      	add	r3, r2
 8004580:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8004582:	200a      	movs	r0, #10
 8004584:	f001 f80a 	bl	800559c <HAL_Delay>


	/* Enable accelerometer data ready interrupt */
	status += BMI088_WriteAccRegister(imu, BMI_INT1_IO_CONF, 0x0A); /* INT1 = push-pull output, active high */
 8004588:	220a      	movs	r2, #10
 800458a:	2153      	movs	r1, #83	; 0x53
 800458c:	68f8      	ldr	r0, [r7, #12]
 800458e:	f000 f923 	bl	80047d8 <BMI088_WriteAccRegister>
 8004592:	4603      	mov	r3, r0
 8004594:	461a      	mov	r2, r3
 8004596:	7dfb      	ldrb	r3, [r7, #23]
 8004598:	4413      	add	r3, r2
 800459a:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 800459c:	200a      	movs	r0, #10
 800459e:	f000 fffd 	bl	800559c <HAL_Delay>

	status += BMI088_WriteAccRegister(imu, BMI_INT1_INT2_MAP_DATA, 0x04);//ACC INT -> INT1
 80045a2:	2204      	movs	r2, #4
 80045a4:	2158      	movs	r1, #88	; 0x58
 80045a6:	68f8      	ldr	r0, [r7, #12]
 80045a8:	f000 f916 	bl	80047d8 <BMI088_WriteAccRegister>
 80045ac:	4603      	mov	r3, r0
 80045ae:	461a      	mov	r2, r3
 80045b0:	7dfb      	ldrb	r3, [r7, #23]
 80045b2:	4413      	add	r3, r2
 80045b4:	75fb      	strb	r3, [r7, #23]

	HAL_Delay(10);
 80045b6:	200a      	movs	r0, #10
 80045b8:	f000 fff0 	bl	800559c <HAL_Delay>

	/* Put accelerometer into active mode */
	status += BMI088_WriteAccRegister(imu, BMI_ACC_PWR_CONF, 0x00);
 80045bc:	2200      	movs	r2, #0
 80045be:	217c      	movs	r1, #124	; 0x7c
 80045c0:	68f8      	ldr	r0, [r7, #12]
 80045c2:	f000 f909 	bl	80047d8 <BMI088_WriteAccRegister>
 80045c6:	4603      	mov	r3, r0
 80045c8:	461a      	mov	r2, r3
 80045ca:	7dfb      	ldrb	r3, [r7, #23]
 80045cc:	4413      	add	r3, r2
 80045ce:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 80045d0:	200a      	movs	r0, #10
 80045d2:	f000 ffe3 	bl	800559c <HAL_Delay>

	/* Turn accelerometer on */
	status += BMI088_WriteAccRegister(imu, BMI_ACC_PWR_CTRL, 0x04);
 80045d6:	2204      	movs	r2, #4
 80045d8:	217d      	movs	r1, #125	; 0x7d
 80045da:	68f8      	ldr	r0, [r7, #12]
 80045dc:	f000 f8fc 	bl	80047d8 <BMI088_WriteAccRegister>
 80045e0:	4603      	mov	r3, r0
 80045e2:	461a      	mov	r2, r3
 80045e4:	7dfb      	ldrb	r3, [r7, #23]
 80045e6:	4413      	add	r3, r2
 80045e8:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 80045ea:	200a      	movs	r0, #10
 80045ec:	f000 ffd6 	bl	800559c <HAL_Delay>

	/* Pre-compute accelerometer conversion constant (raw to m/s^2), 9.81 g-constant, 32768 normalize raw data, 2^(<0x41>+1)*1.5, <0x41> is the acc range register */
	imu->accConversion = 9.81f / 32768.0f * 2.0f * 1.5f; /* Datasheet page 27 */
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	4a3a      	ldr	r2, [pc, #232]	; (80046dc <BMI088_Init+0x230>)
 80045f4:	631a      	str	r2, [r3, #48]	; 0x30
	
	/* Set accelerometer TX buffer for DMA */
	imu->accTxBuf[0] = BMI_ACC_DATA | 0x80;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	2292      	movs	r2, #146	; 0x92
 80045fa:	749a      	strb	r2, [r3, #18]
	 *
	 * GYROSCOPE
	 *
	 */

	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_SET);
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	6898      	ldr	r0, [r3, #8]
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	89db      	ldrh	r3, [r3, #14]
 8004604:	2201      	movs	r2, #1
 8004606:	4619      	mov	r1, r3
 8004608:	f002 f8fe 	bl	8006808 <HAL_GPIO_WritePin>

	/* Perform gyro soft reset */
	status += BMI088_WriteGyrRegister(imu, BMI_GYR_SOFTRESET, 0xB6);
 800460c:	22b6      	movs	r2, #182	; 0xb6
 800460e:	2114      	movs	r1, #20
 8004610:	68f8      	ldr	r0, [r7, #12]
 8004612:	f000 f91b 	bl	800484c <BMI088_WriteGyrRegister>
 8004616:	4603      	mov	r3, r0
 8004618:	461a      	mov	r2, r3
 800461a:	7dfb      	ldrb	r3, [r7, #23]
 800461c:	4413      	add	r3, r2
 800461e:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(250);
 8004620:	20fa      	movs	r0, #250	; 0xfa
 8004622:	f000 ffbb 	bl	800559c <HAL_Delay>

	/* Check chip ID */
	status += BMI088_ReadGyrRegister(imu, BMI_GYR_CHIP_ID, &chipID);
 8004626:	f107 0316 	add.w	r3, r7, #22
 800462a:	461a      	mov	r2, r3
 800462c:	2100      	movs	r1, #0
 800462e:	68f8      	ldr	r0, [r7, #12]
 8004630:	f000 f896 	bl	8004760 <BMI088_ReadGyrRegister>
 8004634:	4603      	mov	r3, r0
 8004636:	461a      	mov	r2, r3
 8004638:	7dfb      	ldrb	r3, [r7, #23]
 800463a:	4413      	add	r3, r2
 800463c:	75fb      	strb	r3, [r7, #23]

		//return 0;

	}

	HAL_Delay(10);
 800463e:	200a      	movs	r0, #10
 8004640:	f000 ffac 	bl	800559c <HAL_Delay>

	/* Configure gyroscope */
	status += BMI088_WriteGyrRegister(imu, BMI_GYR_RANGE, 0x01); /* +- 1000 deg/s */
 8004644:	2201      	movs	r2, #1
 8004646:	210f      	movs	r1, #15
 8004648:	68f8      	ldr	r0, [r7, #12]
 800464a:	f000 f8ff 	bl	800484c <BMI088_WriteGyrRegister>
 800464e:	4603      	mov	r3, r0
 8004650:	461a      	mov	r2, r3
 8004652:	7dfb      	ldrb	r3, [r7, #23]
 8004654:	4413      	add	r3, r2
 8004656:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8004658:	200a      	movs	r0, #10
 800465a:	f000 ff9f 	bl	800559c <HAL_Delay>


	status += BMI088_WriteGyrRegister(imu, BMI_GYR_BANDWIDTH, 0x06); /* 0x07 ODR = 100 Hz, Filter bandwidth = 32 Hz, 0x06 BW = 64Hz ODR = 200 Hz, 0x04 ODR = 200Hz BW = 23Hz */
 800465e:	2206      	movs	r2, #6
 8004660:	2110      	movs	r1, #16
 8004662:	68f8      	ldr	r0, [r7, #12]
 8004664:	f000 f8f2 	bl	800484c <BMI088_WriteGyrRegister>
 8004668:	4603      	mov	r3, r0
 800466a:	461a      	mov	r2, r3
 800466c:	7dfb      	ldrb	r3, [r7, #23]
 800466e:	4413      	add	r3, r2
 8004670:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8004672:	200a      	movs	r0, #10
 8004674:	f000 ff92 	bl	800559c <HAL_Delay>

	/* Enable gyroscope data ready interrupt */
	status += BMI088_WriteGyrRegister(imu, BMI_GYR_INT_CTRL, 0x80); /* New data interrupt enabled */
 8004678:	2280      	movs	r2, #128	; 0x80
 800467a:	2115      	movs	r1, #21
 800467c:	68f8      	ldr	r0, [r7, #12]
 800467e:	f000 f8e5 	bl	800484c <BMI088_WriteGyrRegister>
 8004682:	4603      	mov	r3, r0
 8004684:	461a      	mov	r2, r3
 8004686:	7dfb      	ldrb	r3, [r7, #23]
 8004688:	4413      	add	r3, r2
 800468a:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 800468c:	200a      	movs	r0, #10
 800468e:	f000 ff85 	bl	800559c <HAL_Delay>

	status += BMI088_WriteGyrRegister(imu, BMI_INT3_INT4_IO_CONF, 0x01); /* INT3 = push-pull, active high */
 8004692:	2201      	movs	r2, #1
 8004694:	2116      	movs	r1, #22
 8004696:	68f8      	ldr	r0, [r7, #12]
 8004698:	f000 f8d8 	bl	800484c <BMI088_WriteGyrRegister>
 800469c:	4603      	mov	r3, r0
 800469e:	461a      	mov	r2, r3
 80046a0:	7dfb      	ldrb	r3, [r7, #23]
 80046a2:	4413      	add	r3, r2
 80046a4:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 80046a6:	200a      	movs	r0, #10
 80046a8:	f000 ff78 	bl	800559c <HAL_Delay>

	status += BMI088_WriteGyrRegister(imu, BMI_INT3_INT4_IO_MAP, 0x01); /* Data ready interrupt mapped to INT3 pin */
 80046ac:	2201      	movs	r2, #1
 80046ae:	2118      	movs	r1, #24
 80046b0:	68f8      	ldr	r0, [r7, #12]
 80046b2:	f000 f8cb 	bl	800484c <BMI088_WriteGyrRegister>
 80046b6:	4603      	mov	r3, r0
 80046b8:	461a      	mov	r2, r3
 80046ba:	7dfb      	ldrb	r3, [r7, #23]
 80046bc:	4413      	add	r3, r2
 80046be:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 80046c0:	200a      	movs	r0, #10
 80046c2:	f000 ff6b 	bl	800559c <HAL_Delay>

	/* Pre-compute gyroscope conversion constant (raw to rad/s) 0.017 °/s -> rad/s, 1000 the range, 32768 normalize the raw data*/
	imu->gyrConversion = 0.01745329251f * 1000.0f / 32768.0f; /* Datasheet page 39 */
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	4a05      	ldr	r2, [pc, #20]	; (80046e0 <BMI088_Init+0x234>)
 80046ca:	635a      	str	r2, [r3, #52]	; 0x34
	
	/* Set gyroscope TX buffer for DMA */
	imu->gyrTxBuf[0] = BMI_GYR_DATA | 0x80;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	2282      	movs	r2, #130	; 0x82
 80046d0:	769a      	strb	r2, [r3, #26]

	return status;
 80046d2:	7dfb      	ldrb	r3, [r7, #23]

}
 80046d4:	4618      	mov	r0, r3
 80046d6:	3718      	adds	r7, #24
 80046d8:	46bd      	mov	sp, r7
 80046da:	bd80      	pop	{r7, pc}
 80046dc:	3a6b70a4 	.word	0x3a6b70a4
 80046e0:	3a0ba058 	.word	0x3a0ba058

080046e4 <BMI088_ReadAccRegister>:
 * LOW-LEVEL REGISTER FUNCTIONS
 *
 */

/* ACCELEROMETER READS ARE DIFFERENT TO GYROSCOPE READS. SEND ONE BYTE ADDRESS, READ ONE DUMMY BYTE, READ TRUE DATA !!! */
uint8_t BMI088_ReadAccRegister(BMI088 *imu, uint8_t regAddr, uint8_t *data) {
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b088      	sub	sp, #32
 80046e8:	af02      	add	r7, sp, #8
 80046ea:	60f8      	str	r0, [r7, #12]
 80046ec:	460b      	mov	r3, r1
 80046ee:	607a      	str	r2, [r7, #4]
 80046f0:	72fb      	strb	r3, [r7, #11]

	uint8_t txBuf[3] = {regAddr | 0x80, 0x00, 0x00};
 80046f2:	7afb      	ldrb	r3, [r7, #11]
 80046f4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80046f8:	b2db      	uxtb	r3, r3
 80046fa:	753b      	strb	r3, [r7, #20]
 80046fc:	2300      	movs	r3, #0
 80046fe:	757b      	strb	r3, [r7, #21]
 8004700:	2300      	movs	r3, #0
 8004702:	75bb      	strb	r3, [r7, #22]
	uint8_t rxBuf[3];

	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_RESET);
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	6858      	ldr	r0, [r3, #4]
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	899b      	ldrh	r3, [r3, #12]
 800470c:	2200      	movs	r2, #0
 800470e:	4619      	mov	r1, r3
 8004710:	f002 f87a 	bl	8006808 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_TransmitReceive(imu->spiHandle, txBuf, rxBuf, 3, HAL_MAX_DELAY) == HAL_OK);
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	6818      	ldr	r0, [r3, #0]
 8004718:	f107 0210 	add.w	r2, r7, #16
 800471c:	f107 0114 	add.w	r1, r7, #20
 8004720:	f04f 33ff 	mov.w	r3, #4294967295
 8004724:	9300      	str	r3, [sp, #0]
 8004726:	2303      	movs	r3, #3
 8004728:	f003 fed7 	bl	80084da <HAL_SPI_TransmitReceive>
 800472c:	4603      	mov	r3, r0
 800472e:	2b00      	cmp	r3, #0
 8004730:	bf0c      	ite	eq
 8004732:	2301      	moveq	r3, #1
 8004734:	2300      	movne	r3, #0
 8004736:	b2db      	uxtb	r3, r3
 8004738:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_SET);
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	6858      	ldr	r0, [r3, #4]
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	899b      	ldrh	r3, [r3, #12]
 8004742:	2201      	movs	r2, #1
 8004744:	4619      	mov	r1, r3
 8004746:	f002 f85f 	bl	8006808 <HAL_GPIO_WritePin>

	if (status == 1) {
 800474a:	7dfb      	ldrb	r3, [r7, #23]
 800474c:	2b01      	cmp	r3, #1
 800474e:	d102      	bne.n	8004756 <BMI088_ReadAccRegister+0x72>

		*data = rxBuf[2];
 8004750:	7cba      	ldrb	r2, [r7, #18]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	701a      	strb	r2, [r3, #0]

	}

	return status;
 8004756:	7dfb      	ldrb	r3, [r7, #23]

}
 8004758:	4618      	mov	r0, r3
 800475a:	3718      	adds	r7, #24
 800475c:	46bd      	mov	sp, r7
 800475e:	bd80      	pop	{r7, pc}

08004760 <BMI088_ReadGyrRegister>:

uint8_t BMI088_ReadGyrRegister(BMI088 *imu, uint8_t regAddr, uint8_t *data) {
 8004760:	b580      	push	{r7, lr}
 8004762:	b088      	sub	sp, #32
 8004764:	af02      	add	r7, sp, #8
 8004766:	60f8      	str	r0, [r7, #12]
 8004768:	460b      	mov	r3, r1
 800476a:	607a      	str	r2, [r7, #4]
 800476c:	72fb      	strb	r3, [r7, #11]

	uint8_t txBuf[2] = {regAddr | 0x80, 0x00}; //0x80
 800476e:	7afb      	ldrb	r3, [r7, #11]
 8004770:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004774:	b2db      	uxtb	r3, r3
 8004776:	753b      	strb	r3, [r7, #20]
 8004778:	2300      	movs	r3, #0
 800477a:	757b      	strb	r3, [r7, #21]
	uint8_t rxBuf[2];

	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_RESET);
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	6898      	ldr	r0, [r3, #8]
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	89db      	ldrh	r3, [r3, #14]
 8004784:	2200      	movs	r2, #0
 8004786:	4619      	mov	r1, r3
 8004788:	f002 f83e 	bl	8006808 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_TransmitReceive(imu->spiHandle, txBuf, rxBuf, 2, HAL_MAX_DELAY) == HAL_OK);
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	6818      	ldr	r0, [r3, #0]
 8004790:	f107 0210 	add.w	r2, r7, #16
 8004794:	f107 0114 	add.w	r1, r7, #20
 8004798:	f04f 33ff 	mov.w	r3, #4294967295
 800479c:	9300      	str	r3, [sp, #0]
 800479e:	2302      	movs	r3, #2
 80047a0:	f003 fe9b 	bl	80084da <HAL_SPI_TransmitReceive>
 80047a4:	4603      	mov	r3, r0
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	bf0c      	ite	eq
 80047aa:	2301      	moveq	r3, #1
 80047ac:	2300      	movne	r3, #0
 80047ae:	b2db      	uxtb	r3, r3
 80047b0:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_SET);
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	6898      	ldr	r0, [r3, #8]
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	89db      	ldrh	r3, [r3, #14]
 80047ba:	2201      	movs	r2, #1
 80047bc:	4619      	mov	r1, r3
 80047be:	f002 f823 	bl	8006808 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_RESET);
	uint8_t status = (HAL_SPI_TransmitReceive(imu->spiHandle, txBuf, rxBuf, 3, HAL_MAX_DELAY) == HAL_OK);
	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_SET);*/

	if (status == 1) {
 80047c2:	7dfb      	ldrb	r3, [r7, #23]
 80047c4:	2b01      	cmp	r3, #1
 80047c6:	d102      	bne.n	80047ce <BMI088_ReadGyrRegister+0x6e>

		*data = rxBuf[1];
 80047c8:	7c7a      	ldrb	r2, [r7, #17]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	701a      	strb	r2, [r3, #0]

	}

	return status;
 80047ce:	7dfb      	ldrb	r3, [r7, #23]

}
 80047d0:	4618      	mov	r0, r3
 80047d2:	3718      	adds	r7, #24
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bd80      	pop	{r7, pc}

080047d8 <BMI088_WriteAccRegister>:

uint8_t BMI088_WriteAccRegister(BMI088 *imu, uint8_t regAddr, uint8_t data) {
 80047d8:	b580      	push	{r7, lr}
 80047da:	b084      	sub	sp, #16
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
 80047e0:	460b      	mov	r3, r1
 80047e2:	70fb      	strb	r3, [r7, #3]
 80047e4:	4613      	mov	r3, r2
 80047e6:	70bb      	strb	r3, [r7, #2]

	uint8_t txBuf[2] = {regAddr, data};
 80047e8:	78fb      	ldrb	r3, [r7, #3]
 80047ea:	733b      	strb	r3, [r7, #12]
 80047ec:	78bb      	ldrb	r3, [r7, #2]
 80047ee:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_RESET);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6858      	ldr	r0, [r3, #4]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	899b      	ldrh	r3, [r3, #12]
 80047f8:	2200      	movs	r2, #0
 80047fa:	4619      	mov	r1, r3
 80047fc:	f002 f804 	bl	8006808 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_Transmit(imu->spiHandle, txBuf, 2, HAL_MAX_DELAY) == HAL_OK);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6818      	ldr	r0, [r3, #0]
 8004804:	f107 010c 	add.w	r1, r7, #12
 8004808:	f04f 33ff 	mov.w	r3, #4294967295
 800480c:	2202      	movs	r2, #2
 800480e:	f003 fd28 	bl	8008262 <HAL_SPI_Transmit>
 8004812:	4603      	mov	r3, r0
 8004814:	2b00      	cmp	r3, #0
 8004816:	bf0c      	ite	eq
 8004818:	2301      	moveq	r3, #1
 800481a:	2300      	movne	r3, #0
 800481c:	b2db      	uxtb	r3, r3
 800481e:	73fb      	strb	r3, [r7, #15]
	while(HAL_SPI_GetState(imu->spiHandle) != HAL_SPI_STATE_READY);
 8004820:	bf00      	nop
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4618      	mov	r0, r3
 8004828:	f003 fff9 	bl	800881e <HAL_SPI_GetState>
 800482c:	4603      	mov	r3, r0
 800482e:	2b01      	cmp	r3, #1
 8004830:	d1f7      	bne.n	8004822 <BMI088_WriteAccRegister+0x4a>
	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_SET);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6858      	ldr	r0, [r3, #4]
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	899b      	ldrh	r3, [r3, #12]
 800483a:	2201      	movs	r2, #1
 800483c:	4619      	mov	r1, r3
 800483e:	f001 ffe3 	bl	8006808 <HAL_GPIO_WritePin>

	return status;
 8004842:	7bfb      	ldrb	r3, [r7, #15]

}
 8004844:	4618      	mov	r0, r3
 8004846:	3710      	adds	r7, #16
 8004848:	46bd      	mov	sp, r7
 800484a:	bd80      	pop	{r7, pc}

0800484c <BMI088_WriteGyrRegister>:

uint8_t BMI088_WriteGyrRegister(BMI088 *imu, uint8_t regAddr, uint8_t data) {
 800484c:	b580      	push	{r7, lr}
 800484e:	b084      	sub	sp, #16
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
 8004854:	460b      	mov	r3, r1
 8004856:	70fb      	strb	r3, [r7, #3]
 8004858:	4613      	mov	r3, r2
 800485a:	70bb      	strb	r3, [r7, #2]

	uint8_t txBuf[2] = {regAddr, data};
 800485c:	78fb      	ldrb	r3, [r7, #3]
 800485e:	733b      	strb	r3, [r7, #12]
 8004860:	78bb      	ldrb	r3, [r7, #2]
 8004862:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_RESET);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6898      	ldr	r0, [r3, #8]
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	89db      	ldrh	r3, [r3, #14]
 800486c:	2200      	movs	r2, #0
 800486e:	4619      	mov	r1, r3
 8004870:	f001 ffca 	bl	8006808 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_Transmit(imu->spiHandle, txBuf, 2, HAL_MAX_DELAY) == HAL_OK);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6818      	ldr	r0, [r3, #0]
 8004878:	f107 010c 	add.w	r1, r7, #12
 800487c:	f04f 33ff 	mov.w	r3, #4294967295
 8004880:	2202      	movs	r2, #2
 8004882:	f003 fcee 	bl	8008262 <HAL_SPI_Transmit>
 8004886:	4603      	mov	r3, r0
 8004888:	2b00      	cmp	r3, #0
 800488a:	bf0c      	ite	eq
 800488c:	2301      	moveq	r3, #1
 800488e:	2300      	movne	r3, #0
 8004890:	b2db      	uxtb	r3, r3
 8004892:	73fb      	strb	r3, [r7, #15]
	while(HAL_SPI_GetState(imu->spiHandle) != HAL_SPI_STATE_READY);
 8004894:	bf00      	nop
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4618      	mov	r0, r3
 800489c:	f003 ffbf 	bl	800881e <HAL_SPI_GetState>
 80048a0:	4603      	mov	r3, r0
 80048a2:	2b01      	cmp	r3, #1
 80048a4:	d1f7      	bne.n	8004896 <BMI088_WriteGyrRegister+0x4a>
	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_SET);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6898      	ldr	r0, [r3, #8]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	89db      	ldrh	r3, [r3, #14]
 80048ae:	2201      	movs	r2, #1
 80048b0:	4619      	mov	r1, r3
 80048b2:	f001 ffa9 	bl	8006808 <HAL_GPIO_WritePin>

	return status;
 80048b6:	7bfb      	ldrb	r3, [r7, #15]

}
 80048b8:	4618      	mov	r0, r3
 80048ba:	3710      	adds	r7, #16
 80048bc:	46bd      	mov	sp, r7
 80048be:	bd80      	pop	{r7, pc}

080048c0 <BMI088_ReadAccelerometer>:
/*
 *
 * POLLING
 *
 */
uint8_t BMI088_ReadAccelerometer(BMI088 *imu) {
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b08a      	sub	sp, #40	; 0x28
 80048c4:	af02      	add	r7, sp, #8
 80048c6:	6078      	str	r0, [r7, #4]

	/* Read raw accelerometer data */
	uint8_t txBuf[8] = {(BMI_ACC_DATA | 0x80), 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}; /* Register addr, 1 byte dummy, 6 bytes data */
 80048c8:	4a36      	ldr	r2, [pc, #216]	; (80049a4 <BMI088_ReadAccelerometer+0xe4>)
 80048ca:	f107 0310 	add.w	r3, r7, #16
 80048ce:	e892 0003 	ldmia.w	r2, {r0, r1}
 80048d2:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t rxBuf[8];

	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_RESET);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6858      	ldr	r0, [r3, #4]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	899b      	ldrh	r3, [r3, #12]
 80048de:	2200      	movs	r2, #0
 80048e0:	4619      	mov	r1, r3
 80048e2:	f001 ff91 	bl	8006808 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_TransmitReceive(imu->spiHandle, txBuf, rxBuf, 8, HAL_MAX_DELAY) == HAL_OK);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6818      	ldr	r0, [r3, #0]
 80048ea:	f107 0208 	add.w	r2, r7, #8
 80048ee:	f107 0110 	add.w	r1, r7, #16
 80048f2:	f04f 33ff 	mov.w	r3, #4294967295
 80048f6:	9300      	str	r3, [sp, #0]
 80048f8:	2308      	movs	r3, #8
 80048fa:	f003 fdee 	bl	80084da <HAL_SPI_TransmitReceive>
 80048fe:	4603      	mov	r3, r0
 8004900:	2b00      	cmp	r3, #0
 8004902:	bf0c      	ite	eq
 8004904:	2301      	moveq	r3, #1
 8004906:	2300      	movne	r3, #0
 8004908:	b2db      	uxtb	r3, r3
 800490a:	77fb      	strb	r3, [r7, #31]
	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_SET);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6858      	ldr	r0, [r3, #4]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	899b      	ldrh	r3, [r3, #12]
 8004914:	2201      	movs	r2, #1
 8004916:	4619      	mov	r1, r3
 8004918:	f001 ff76 	bl	8006808 <HAL_GPIO_WritePin>

	/* Form signed 16-bit integers */
	int16_t accX = (int16_t) ((rxBuf[3] << 8) | rxBuf[2]);
 800491c:	7afb      	ldrb	r3, [r7, #11]
 800491e:	021b      	lsls	r3, r3, #8
 8004920:	b21a      	sxth	r2, r3
 8004922:	7abb      	ldrb	r3, [r7, #10]
 8004924:	b21b      	sxth	r3, r3
 8004926:	4313      	orrs	r3, r2
 8004928:	83bb      	strh	r3, [r7, #28]
	int16_t accY = (int16_t) ((rxBuf[5] << 8) | rxBuf[4]);
 800492a:	7b7b      	ldrb	r3, [r7, #13]
 800492c:	021b      	lsls	r3, r3, #8
 800492e:	b21a      	sxth	r2, r3
 8004930:	7b3b      	ldrb	r3, [r7, #12]
 8004932:	b21b      	sxth	r3, r3
 8004934:	4313      	orrs	r3, r2
 8004936:	837b      	strh	r3, [r7, #26]
	int16_t accZ = (int16_t) ((rxBuf[7] << 8) | rxBuf[6]);
 8004938:	7bfb      	ldrb	r3, [r7, #15]
 800493a:	021b      	lsls	r3, r3, #8
 800493c:	b21a      	sxth	r2, r3
 800493e:	7bbb      	ldrb	r3, [r7, #14]
 8004940:	b21b      	sxth	r3, r3
 8004942:	4313      	orrs	r3, r2
 8004944:	833b      	strh	r3, [r7, #24]

	/* Convert to m/s^2 */
	imu->acc_mps2[0] = imu->accConversion * accX;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 800494c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8004950:	ee07 3a90 	vmov	s15, r3
 8004954:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004958:	ee67 7a27 	vmul.f32	s15, s14, s15
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
	imu->acc_mps2[1] = imu->accConversion * accY;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8004968:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800496c:	ee07 3a90 	vmov	s15, r3
 8004970:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004974:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
	imu->acc_mps2[2] = imu->accConversion * accZ;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8004984:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8004988:	ee07 3a90 	vmov	s15, r3
 800498c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004990:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40

	return status;
 800499a:	7ffb      	ldrb	r3, [r7, #31]

}
 800499c:	4618      	mov	r0, r3
 800499e:	3720      	adds	r7, #32
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bd80      	pop	{r7, pc}
 80049a4:	08014530 	.word	0x08014530

080049a8 <BMI088_ReadGyroscope>:

uint8_t BMI088_ReadGyroscope(BMI088 *imu) {
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b08a      	sub	sp, #40	; 0x28
 80049ac:	af02      	add	r7, sp, #8
 80049ae:	6078      	str	r0, [r7, #4]

	/* Read raw gyroscope data */
	uint8_t txBuf[7] = {(BMI_GYR_DATA | 0x80), 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}; /* Register addr, 6 bytes data */
 80049b0:	4a38      	ldr	r2, [pc, #224]	; (8004a94 <BMI088_ReadGyroscope+0xec>)
 80049b2:	f107 0310 	add.w	r3, r7, #16
 80049b6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80049ba:	6018      	str	r0, [r3, #0]
 80049bc:	3304      	adds	r3, #4
 80049be:	8019      	strh	r1, [r3, #0]
 80049c0:	3302      	adds	r3, #2
 80049c2:	0c0a      	lsrs	r2, r1, #16
 80049c4:	701a      	strb	r2, [r3, #0]
	uint8_t rxBuf[7];

	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_RESET);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6898      	ldr	r0, [r3, #8]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	89db      	ldrh	r3, [r3, #14]
 80049ce:	2200      	movs	r2, #0
 80049d0:	4619      	mov	r1, r3
 80049d2:	f001 ff19 	bl	8006808 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_TransmitReceive(imu->spiHandle, txBuf, rxBuf, 7, HAL_MAX_DELAY) == HAL_OK);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6818      	ldr	r0, [r3, #0]
 80049da:	f107 0208 	add.w	r2, r7, #8
 80049de:	f107 0110 	add.w	r1, r7, #16
 80049e2:	f04f 33ff 	mov.w	r3, #4294967295
 80049e6:	9300      	str	r3, [sp, #0]
 80049e8:	2307      	movs	r3, #7
 80049ea:	f003 fd76 	bl	80084da <HAL_SPI_TransmitReceive>
 80049ee:	4603      	mov	r3, r0
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	bf0c      	ite	eq
 80049f4:	2301      	moveq	r3, #1
 80049f6:	2300      	movne	r3, #0
 80049f8:	b2db      	uxtb	r3, r3
 80049fa:	77fb      	strb	r3, [r7, #31]
	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_SET);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6898      	ldr	r0, [r3, #8]
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	89db      	ldrh	r3, [r3, #14]
 8004a04:	2201      	movs	r2, #1
 8004a06:	4619      	mov	r1, r3
 8004a08:	f001 fefe 	bl	8006808 <HAL_GPIO_WritePin>

	/* Form signed 16-bit integers */
	int16_t gyrX = (int16_t) ((rxBuf[2] << 8) | rxBuf[1]);
 8004a0c:	7abb      	ldrb	r3, [r7, #10]
 8004a0e:	021b      	lsls	r3, r3, #8
 8004a10:	b21a      	sxth	r2, r3
 8004a12:	7a7b      	ldrb	r3, [r7, #9]
 8004a14:	b21b      	sxth	r3, r3
 8004a16:	4313      	orrs	r3, r2
 8004a18:	83bb      	strh	r3, [r7, #28]
	int16_t gyrY = (int16_t) ((rxBuf[4] << 8) | rxBuf[3]);
 8004a1a:	7b3b      	ldrb	r3, [r7, #12]
 8004a1c:	021b      	lsls	r3, r3, #8
 8004a1e:	b21a      	sxth	r2, r3
 8004a20:	7afb      	ldrb	r3, [r7, #11]
 8004a22:	b21b      	sxth	r3, r3
 8004a24:	4313      	orrs	r3, r2
 8004a26:	837b      	strh	r3, [r7, #26]
	int16_t gyrZ = (int16_t) ((rxBuf[6] << 8) | rxBuf[5]);
 8004a28:	7bbb      	ldrb	r3, [r7, #14]
 8004a2a:	021b      	lsls	r3, r3, #8
 8004a2c:	b21a      	sxth	r2, r3
 8004a2e:	7b7b      	ldrb	r3, [r7, #13]
 8004a30:	b21b      	sxth	r3, r3
 8004a32:	4313      	orrs	r3, r2
 8004a34:	833b      	strh	r3, [r7, #24]

	/* Convert to rad/s */
	imu->gyr_rps[0] = imu->gyrConversion * gyrX;//-0.0000661263;//-0.000220318;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8004a3c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8004a40:	ee07 3a90 	vmov	s15, r3
 8004a44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004a48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
	imu->gyr_rps[1] = imu->gyrConversion * gyrY;//-0.000491353;//-0.001161367;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8004a58:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8004a5c:	ee07 3a90 	vmov	s15, r3
 8004a60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004a64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
	imu->gyr_rps[2] = imu->gyrConversion * gyrZ;//-0.002349043;//-0.002582031;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8004a74:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8004a78:	ee07 3a90 	vmov	s15, r3
 8004a7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004a80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c

	//own code line
	//if(status == 1) HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);
	return status;
 8004a8a:	7ffb      	ldrb	r3, [r7, #31]

}
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	3720      	adds	r7, #32
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bd80      	pop	{r7, pc}
 8004a94:	08014538 	.word	0x08014538

08004a98 <BMP388_Init>:
 *
 *  @return Status of execution
 *  @retval = HAL_OK  		-> Success
 *  @retval != HAL_OK	  	-> Failure Info
 */
HAL_StatusTypeDef BMP388_Init(BMP388_HandleTypeDef *bmp){
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b084      	sub	sp, #16
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef rslt;
	uint8_t chip_id;

	// Read CHIP_ID byte
	rslt = BMP388_ReadBytes(bmp, CHIP_ID, &chip_id, 1);
 8004aa0:	f107 020e 	add.w	r2, r7, #14
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	2100      	movs	r1, #0
 8004aa8:	6878      	ldr	r0, [r7, #4]
 8004aaa:	f000 fc0a 	bl	80052c2 <BMP388_ReadBytes>
 8004aae:	4603      	mov	r3, r0
 8004ab0:	73fb      	strb	r3, [r7, #15]
	if(rslt == HAL_OK && chip_id == BMP388_CHIP_ID){
 8004ab2:	7bfb      	ldrb	r3, [r7, #15]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d12a      	bne.n	8004b0e <BMP388_Init+0x76>
 8004ab8:	7bbb      	ldrb	r3, [r7, #14]
 8004aba:	2b50      	cmp	r3, #80	; 0x50
 8004abc:	d127      	bne.n	8004b0e <BMP388_Init+0x76>
		// using softreset command
		rslt = BMP388_SoftReset(bmp);
 8004abe:	6878      	ldr	r0, [r7, #4]
 8004ac0:	f000 f964 	bl	8004d8c <BMP388_SoftReset>
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	73fb      	strb	r3, [r7, #15]
		if(rslt == HAL_OK){
 8004ac8:	7bfb      	ldrb	r3, [r7, #15]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d11d      	bne.n	8004b0a <BMP388_Init+0x72>
			// get calibration data
			rslt = BMP388_GetCalibData(bmp);
 8004ace:	6878      	ldr	r0, [r7, #4]
 8004ad0:	f000 f99c 	bl	8004e0c <BMP388_GetCalibData>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	73fb      	strb	r3, [r7, #15]
		if(rslt == HAL_OK){
 8004ad8:	bf00      	nop
		}
	}
	else{
		return rslt;
	}
	uint8_t pwr_ctrl = BMP388_PWR_CTRL_PRESS_ON | BMP388_PWR_CTRL_TEMP_ON | BMP388_PWR_CTRL_MODE_NORMAL;
 8004ada:	2333      	movs	r3, #51	; 0x33
 8004adc:	737b      	strb	r3, [r7, #13]

	uint8_t oversampling = bmp->_oversampling;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	791b      	ldrb	r3, [r3, #4]
 8004ae2:	733b      	strb	r3, [r7, #12]
	uint8_t odr = bmp->_odr;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	799b      	ldrb	r3, [r3, #6]
 8004ae8:	72fb      	strb	r3, [r7, #11]
	uint8_t filtercoeff = bmp->_filtercoeff;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	795b      	ldrb	r3, [r3, #5]
 8004aee:	72bb      	strb	r3, [r7, #10]



	// Set OSR register
	rslt = BMP388_WriteBytes(bmp, OSR, &oversampling, 1);
 8004af0:	f107 020c 	add.w	r2, r7, #12
 8004af4:	2301      	movs	r3, #1
 8004af6:	211c      	movs	r1, #28
 8004af8:	6878      	ldr	r0, [r7, #4]
 8004afa:	f000 fc00 	bl	80052fe <BMP388_WriteBytes>
 8004afe:	4603      	mov	r3, r0
 8004b00:	73fb      	strb	r3, [r7, #15]
	if(rslt != HAL_OK){
 8004b02:	7bfb      	ldrb	r3, [r7, #15]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d006      	beq.n	8004b16 <BMP388_Init+0x7e>
 8004b08:	e003      	b.n	8004b12 <BMP388_Init+0x7a>
			return rslt;
 8004b0a:	7bfb      	ldrb	r3, [r7, #15]
 8004b0c:	e03b      	b.n	8004b86 <BMP388_Init+0xee>
		return rslt;
 8004b0e:	7bfb      	ldrb	r3, [r7, #15]
 8004b10:	e039      	b.n	8004b86 <BMP388_Init+0xee>
		return rslt;
 8004b12:	7bfb      	ldrb	r3, [r7, #15]
 8004b14:	e037      	b.n	8004b86 <BMP388_Init+0xee>
	}
	// Set ODR register
	rslt = BMP388_WriteBytes(bmp, ODR, &odr, 1);
 8004b16:	f107 020b 	add.w	r2, r7, #11
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	211d      	movs	r1, #29
 8004b1e:	6878      	ldr	r0, [r7, #4]
 8004b20:	f000 fbed 	bl	80052fe <BMP388_WriteBytes>
 8004b24:	4603      	mov	r3, r0
 8004b26:	73fb      	strb	r3, [r7, #15]
	if(rslt != HAL_OK){
 8004b28:	7bfb      	ldrb	r3, [r7, #15]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d001      	beq.n	8004b32 <BMP388_Init+0x9a>
		return rslt;
 8004b2e:	7bfb      	ldrb	r3, [r7, #15]
 8004b30:	e029      	b.n	8004b86 <BMP388_Init+0xee>
	}
	// Set CONFIG register
	rslt = BMP388_WriteBytes(bmp, CONFIG, &filtercoeff, 1);
 8004b32:	f107 020a 	add.w	r2, r7, #10
 8004b36:	2301      	movs	r3, #1
 8004b38:	211f      	movs	r1, #31
 8004b3a:	6878      	ldr	r0, [r7, #4]
 8004b3c:	f000 fbdf 	bl	80052fe <BMP388_WriteBytes>
 8004b40:	4603      	mov	r3, r0
 8004b42:	73fb      	strb	r3, [r7, #15]
	if(rslt != HAL_OK){
 8004b44:	7bfb      	ldrb	r3, [r7, #15]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d001      	beq.n	8004b4e <BMP388_Init+0xb6>
		return rslt;
 8004b4a:	7bfb      	ldrb	r3, [r7, #15]
 8004b4c:	e01b      	b.n	8004b86 <BMP388_Init+0xee>
	}
	// Set PWR_CTRL register
	rslt = BMP388_WriteBytes(bmp, PWR_CTRL, &pwr_ctrl, 1);
 8004b4e:	f107 020d 	add.w	r2, r7, #13
 8004b52:	2301      	movs	r3, #1
 8004b54:	211b      	movs	r1, #27
 8004b56:	6878      	ldr	r0, [r7, #4]
 8004b58:	f000 fbd1 	bl	80052fe <BMP388_WriteBytes>
 8004b5c:	4603      	mov	r3, r0
 8004b5e:	73fb      	strb	r3, [r7, #15]
	if(rslt != HAL_OK){
 8004b60:	7bfb      	ldrb	r3, [r7, #15]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d001      	beq.n	8004b6a <BMP388_Init+0xd2>
		return rslt;
 8004b66:	7bfb      	ldrb	r3, [r7, #15]
 8004b68:	e00d      	b.n	8004b86 <BMP388_Init+0xee>
	}

	rslt = BMP388_WriteBytes(bmp, INT_CTRL, 0x40, 1);
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	2240      	movs	r2, #64	; 0x40
 8004b6e:	2119      	movs	r1, #25
 8004b70:	6878      	ldr	r0, [r7, #4]
 8004b72:	f000 fbc4 	bl	80052fe <BMP388_WriteBytes>
 8004b76:	4603      	mov	r3, r0
 8004b78:	73fb      	strb	r3, [r7, #15]
	if(rslt != HAL_OK){
 8004b7a:	7bfb      	ldrb	r3, [r7, #15]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d001      	beq.n	8004b84 <BMP388_Init+0xec>
		return rslt;
 8004b80:	7bfb      	ldrb	r3, [r7, #15]
 8004b82:	e000      	b.n	8004b86 <BMP388_Init+0xee>
	}

	return rslt;
 8004b84:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b86:	4618      	mov	r0, r3
 8004b88:	3710      	adds	r7, #16
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bd80      	pop	{r7, pc}

08004b8e <BMP388_SetTempOS>:
 *
 *  @return Status of execution
 *  @retval = HAL_OK  		-> Success
 *  @retval != HAL_OK	  	-> Wrong oversampling mode
 */
HAL_StatusTypeDef BMP388_SetTempOS(BMP388_HandleTypeDef *bmp, uint8_t oversample){
 8004b8e:	b480      	push	{r7}
 8004b90:	b083      	sub	sp, #12
 8004b92:	af00      	add	r7, sp, #0
 8004b94:	6078      	str	r0, [r7, #4]
 8004b96:	460b      	mov	r3, r1
 8004b98:	70fb      	strb	r3, [r7, #3]
	if(oversample > BMP388_OVERSAMPLING_32X){
 8004b9a:	78fb      	ldrb	r3, [r7, #3]
 8004b9c:	2b05      	cmp	r3, #5
 8004b9e:	d901      	bls.n	8004ba4 <BMP388_SetTempOS+0x16>
		return HAL_ERROR;
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	e00e      	b.n	8004bc2 <BMP388_SetTempOS+0x34>
	}
	bmp->_oversampling = (bmp->_oversampling & 0b11000111) | (oversample << 3); //& clear the temp OS bits and the | set the temp OS reg
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	791b      	ldrb	r3, [r3, #4]
 8004ba8:	b25b      	sxtb	r3, r3
 8004baa:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8004bae:	b25a      	sxtb	r2, r3
 8004bb0:	78fb      	ldrb	r3, [r7, #3]
 8004bb2:	00db      	lsls	r3, r3, #3
 8004bb4:	b25b      	sxtb	r3, r3
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	b25b      	sxtb	r3, r3
 8004bba:	b2da      	uxtb	r2, r3
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	711a      	strb	r2, [r3, #4]
	return HAL_OK;
 8004bc0:	2300      	movs	r3, #0
}
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	370c      	adds	r7, #12
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bcc:	4770      	bx	lr

08004bce <BMP388_SetPressOS>:
 *
 *  @return Status of execution
 *  @retval = HAL_OK  		-> Success
 *  @retval != HAL_OK	  	-> Wrong oversampling mode
 */
HAL_StatusTypeDef BMP388_SetPressOS(BMP388_HandleTypeDef *bmp, uint8_t oversample){
 8004bce:	b480      	push	{r7}
 8004bd0:	b083      	sub	sp, #12
 8004bd2:	af00      	add	r7, sp, #0
 8004bd4:	6078      	str	r0, [r7, #4]
 8004bd6:	460b      	mov	r3, r1
 8004bd8:	70fb      	strb	r3, [r7, #3]
	if(oversample > BMP388_OVERSAMPLING_32X){
 8004bda:	78fb      	ldrb	r3, [r7, #3]
 8004bdc:	2b05      	cmp	r3, #5
 8004bde:	d901      	bls.n	8004be4 <BMP388_SetPressOS+0x16>
		return HAL_ERROR;
 8004be0:	2301      	movs	r3, #1
 8004be2:	e00d      	b.n	8004c00 <BMP388_SetPressOS+0x32>
	}
	bmp->_oversampling = (bmp->_oversampling & 0b11111000) | oversample; //& clear the press OS bits and the | set the press OS reg
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	791b      	ldrb	r3, [r3, #4]
 8004be8:	b25b      	sxtb	r3, r3
 8004bea:	f023 0307 	bic.w	r3, r3, #7
 8004bee:	b25a      	sxtb	r2, r3
 8004bf0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	b25b      	sxtb	r3, r3
 8004bf8:	b2da      	uxtb	r2, r3
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	711a      	strb	r2, [r3, #4]
	return HAL_OK;
 8004bfe:	2300      	movs	r3, #0
}
 8004c00:	4618      	mov	r0, r3
 8004c02:	370c      	adds	r7, #12
 8004c04:	46bd      	mov	sp, r7
 8004c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0a:	4770      	bx	lr

08004c0c <BMP388_SetIIRFilterCoeff>:
 *
 *  @return Status of execution
 *  @retval = HAL_OK  		-> Success
 *  @retval != HAL_OK	  	-> Wrong filter coefficient
 */
HAL_StatusTypeDef BMP388_SetIIRFilterCoeff(BMP388_HandleTypeDef *bmp, uint8_t filtercoeff){
 8004c0c:	b480      	push	{r7}
 8004c0e:	b083      	sub	sp, #12
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
 8004c14:	460b      	mov	r3, r1
 8004c16:	70fb      	strb	r3, [r7, #3]
	if(filtercoeff > BMP3_IIR_FILTER_COEFF_127){
 8004c18:	78fb      	ldrb	r3, [r7, #3]
 8004c1a:	2b07      	cmp	r3, #7
 8004c1c:	d901      	bls.n	8004c22 <BMP388_SetIIRFilterCoeff+0x16>
		return HAL_ERROR;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	e005      	b.n	8004c2e <BMP388_SetIIRFilterCoeff+0x22>
	}
	bmp->_filtercoeff = filtercoeff << 1;
 8004c22:	78fb      	ldrb	r3, [r7, #3]
 8004c24:	005b      	lsls	r3, r3, #1
 8004c26:	b2da      	uxtb	r2, r3
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	715a      	strb	r2, [r3, #5]
	return HAL_OK;
 8004c2c:	2300      	movs	r3, #0
}
 8004c2e:	4618      	mov	r0, r3
 8004c30:	370c      	adds	r7, #12
 8004c32:	46bd      	mov	sp, r7
 8004c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c38:	4770      	bx	lr

08004c3a <BMP388_SetOutputDataRate>:
 *
 *  @return Status of execution
 *  @retval = HAL_OK  		-> Success
 *  @retval != HAL_OK	  	-> Wrong oversampling mode
 */
HAL_StatusTypeDef BMP388_SetOutputDataRate(BMP388_HandleTypeDef *bmp, uint8_t odr){
 8004c3a:	b480      	push	{r7}
 8004c3c:	b083      	sub	sp, #12
 8004c3e:	af00      	add	r7, sp, #0
 8004c40:	6078      	str	r0, [r7, #4]
 8004c42:	460b      	mov	r3, r1
 8004c44:	70fb      	strb	r3, [r7, #3]
	if(odr > BMP3_ODR_0_001_HZ){
 8004c46:	78fb      	ldrb	r3, [r7, #3]
 8004c48:	2b11      	cmp	r3, #17
 8004c4a:	d901      	bls.n	8004c50 <BMP388_SetOutputDataRate+0x16>
		return HAL_ERROR;
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	e003      	b.n	8004c58 <BMP388_SetOutputDataRate+0x1e>
	}
	bmp->_odr = odr;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	78fa      	ldrb	r2, [r7, #3]
 8004c54:	719a      	strb	r2, [r3, #6]
	return HAL_OK;
 8004c56:	2300      	movs	r3, #0
}
 8004c58:	4618      	mov	r0, r3
 8004c5a:	370c      	adds	r7, #12
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c62:	4770      	bx	lr

08004c64 <BMP388_ReadRawPressTempTime>:
 *
 *  @return Status of execution
 *  @retval = HAL_OK  		-> Success
 *  @retval != HAL_OK	  	-> Failure Info
 */
HAL_StatusTypeDef BMP388_ReadRawPressTempTime(BMP388_HandleTypeDef *bmp, uint32_t *raw_pressure, uint32_t *raw_temperature, uint32_t *time){
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b088      	sub	sp, #32
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	60f8      	str	r0, [r7, #12]
 8004c6c:	60b9      	str	r1, [r7, #8]
 8004c6e:	607a      	str	r2, [r7, #4]
 8004c70:	603b      	str	r3, [r7, #0]
	}*/

	uint8_t raw_data[11]; //registers in order 0x04 - 0x06 press data, 0x07 - 0x09 temp data, 0x0A and 0x0B reserved, 0x0C - 0x0E time data -> 11 byte
	// Get raw data for pressure and temperature
	//rslt = BMP388_ReadBytes(bmp, DATA_0, raw_data, 11);
	rslt = BMP388_ReadBytes(bmp, DATA_0, raw_data, 6);
 8004c72:	f107 0214 	add.w	r2, r7, #20
 8004c76:	2306      	movs	r3, #6
 8004c78:	2104      	movs	r1, #4
 8004c7a:	68f8      	ldr	r0, [r7, #12]
 8004c7c:	f000 fb21 	bl	80052c2 <BMP388_ReadBytes>
 8004c80:	4603      	mov	r3, r0
 8004c82:	77fb      	strb	r3, [r7, #31]
	if(rslt != HAL_OK){
 8004c84:	7ffb      	ldrb	r3, [r7, #31]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d001      	beq.n	8004c8e <BMP388_ReadRawPressTempTime+0x2a>
		return rslt;
 8004c8a:	7ffb      	ldrb	r3, [r7, #31]
 8004c8c:	e012      	b.n	8004cb4 <BMP388_ReadRawPressTempTime+0x50>
//	uint32_t data_xlsb;
//	uint32_t data_lsb;
//	uint32_t data_msb;

	// Parsing pressure data
	*raw_pressure = (uint32_t)raw_data[2] << 16 | (uint32_t)raw_data[1] << 8 | (uint32_t)raw_data[0];
 8004c8e:	7dbb      	ldrb	r3, [r7, #22]
 8004c90:	041a      	lsls	r2, r3, #16
 8004c92:	7d7b      	ldrb	r3, [r7, #21]
 8004c94:	021b      	lsls	r3, r3, #8
 8004c96:	4313      	orrs	r3, r2
 8004c98:	7d3a      	ldrb	r2, [r7, #20]
 8004c9a:	431a      	orrs	r2, r3
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	601a      	str	r2, [r3, #0]

	// Parsing temperature data
	*raw_temperature = (uint32_t)raw_data[5] << 16 | (uint32_t)raw_data[4] << 8 | (uint32_t)raw_data[3];
 8004ca0:	7e7b      	ldrb	r3, [r7, #25]
 8004ca2:	041a      	lsls	r2, r3, #16
 8004ca4:	7e3b      	ldrb	r3, [r7, #24]
 8004ca6:	021b      	lsls	r3, r3, #8
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	7dfa      	ldrb	r2, [r7, #23]
 8004cac:	431a      	orrs	r2, r3
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	601a      	str	r2, [r3, #0]

	// Parsing time bytes
	//*time = (uint32_t)raw_data[10] << 16 | (uint32_t)raw_data[9] << 8 | (uint32_t)raw_data[8];


	return rslt;
 8004cb2:	7ffb      	ldrb	r3, [r7, #31]
}
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	3720      	adds	r7, #32
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bd80      	pop	{r7, pc}

08004cbc <BMP388_CompensateRawPressTemp>:
 *	@param[out]	temperature		: Pointer to the variable that contain temperature.
 *
 *  @return none
 */
void BMP388_CompensateRawPressTemp(BMP388_HandleTypeDef *bmp, uint32_t raw_pressure, uint32_t raw_temperature,
									  	  	  	  	  	  	  float *pressure, float *temperature){
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b086      	sub	sp, #24
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	60f8      	str	r0, [r7, #12]
 8004cc4:	60b9      	str	r1, [r7, #8]
 8004cc6:	607a      	str	r2, [r7, #4]
 8004cc8:	603b      	str	r3, [r7, #0]
	float temp;
	float press;

	BMP388_CompensateTemp(bmp, raw_temperature, &temp);
 8004cca:	f107 0314 	add.w	r3, r7, #20
 8004cce:	461a      	mov	r2, r3
 8004cd0:	6879      	ldr	r1, [r7, #4]
 8004cd2:	68f8      	ldr	r0, [r7, #12]
 8004cd4:	f000 f9ee 	bl	80050b4 <BMP388_CompensateTemp>
	BMP388_CompensatePress(bmp, temp, raw_pressure, &press);
 8004cd8:	edd7 7a05 	vldr	s15, [r7, #20]
 8004cdc:	f107 0310 	add.w	r3, r7, #16
 8004ce0:	461a      	mov	r2, r3
 8004ce2:	68b9      	ldr	r1, [r7, #8]
 8004ce4:	eeb0 0a67 	vmov.f32	s0, s15
 8004ce8:	68f8      	ldr	r0, [r7, #12]
 8004cea:	f000 fa19 	bl	8005120 <BMP388_CompensatePress>

	*pressure = press;
 8004cee:	693a      	ldr	r2, [r7, #16]
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	601a      	str	r2, [r3, #0]
	*temperature = temp;
 8004cf4:	697a      	ldr	r2, [r7, #20]
 8004cf6:	6a3b      	ldr	r3, [r7, #32]
 8004cf8:	601a      	str	r2, [r3, #0]
}
 8004cfa:	bf00      	nop
 8004cfc:	3718      	adds	r7, #24
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd80      	pop	{r7, pc}
 8004d02:	0000      	movs	r0, r0
 8004d04:	0000      	movs	r0, r0
	...

08004d08 <BMP388_FindAltitude>:
 *	@param[in] ground_pressure	: Pressure at ground
 *  @param[in] pressure			: Pressure that measured at flight.
 *
 *  @return Altitude
 */
float BMP388_FindAltitude(float ground_pressure, float pressure){
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b082      	sub	sp, #8
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	ed87 0a01 	vstr	s0, [r7, #4]
 8004d12:	edc7 0a00 	vstr	s1, [r7]

	// Note that using the equation from wikipedia can give bad results
	// at high altitude. See this thread for more information:
	//  http://forums.adafruit.com/viewtopic.php?f=22&t=58064

	return 44330.0 * (1.0 - pow(pressure / ground_pressure, 0.1903));
 8004d16:	ed97 7a00 	vldr	s14, [r7]
 8004d1a:	edd7 7a01 	vldr	s15, [r7, #4]
 8004d1e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004d22:	ee16 0a90 	vmov	r0, s13
 8004d26:	f7fb fc0f 	bl	8000548 <__aeabi_f2d>
 8004d2a:	4602      	mov	r2, r0
 8004d2c:	460b      	mov	r3, r1
 8004d2e:	ed9f 1b12 	vldr	d1, [pc, #72]	; 8004d78 <BMP388_FindAltitude+0x70>
 8004d32:	ec43 2b10 	vmov	d0, r2, r3
 8004d36:	f00d f8d7 	bl	8011ee8 <pow>
 8004d3a:	ec53 2b10 	vmov	r2, r3, d0
 8004d3e:	f04f 0000 	mov.w	r0, #0
 8004d42:	4911      	ldr	r1, [pc, #68]	; (8004d88 <BMP388_FindAltitude+0x80>)
 8004d44:	f7fb faa0 	bl	8000288 <__aeabi_dsub>
 8004d48:	4602      	mov	r2, r0
 8004d4a:	460b      	mov	r3, r1
 8004d4c:	4610      	mov	r0, r2
 8004d4e:	4619      	mov	r1, r3
 8004d50:	a30b      	add	r3, pc, #44	; (adr r3, 8004d80 <BMP388_FindAltitude+0x78>)
 8004d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d56:	f7fb fc4f 	bl	80005f8 <__aeabi_dmul>
 8004d5a:	4602      	mov	r2, r0
 8004d5c:	460b      	mov	r3, r1
 8004d5e:	4610      	mov	r0, r2
 8004d60:	4619      	mov	r1, r3
 8004d62:	f7fb ff41 	bl	8000be8 <__aeabi_d2f>
 8004d66:	4603      	mov	r3, r0
 8004d68:	ee07 3a90 	vmov	s15, r3
}
 8004d6c:	eeb0 0a67 	vmov.f32	s0, s15
 8004d70:	3708      	adds	r7, #8
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}
 8004d76:	bf00      	nop
 8004d78:	1a36e2eb 	.word	0x1a36e2eb
 8004d7c:	3fc85bc0 	.word	0x3fc85bc0
 8004d80:	00000000 	.word	0x00000000
 8004d84:	40e5a540 	.word	0x40e5a540
 8004d88:	3ff00000 	.word	0x3ff00000

08004d8c <BMP388_SoftReset>:
 *
 *  @return Status of execution
 *  @retval = HAL_OK  		-> Success
 *  @retval != HAL_OK	  	-> Failure Info
 */
HAL_StatusTypeDef BMP388_SoftReset(BMP388_HandleTypeDef *bmp){
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b084      	sub	sp, #16
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
	uint8_t rst_cmnd = BMP388_SOFTRESET;
 8004d94:	23b6      	movs	r3, #182	; 0xb6
 8004d96:	73bb      	strb	r3, [r7, #14]
    uint8_t cmd_err_status;

	HAL_StatusTypeDef rslt;

	// Reading STATUS reg to understand that the BMP388 is ready to receive command
	rslt = BMP388_ReadBytes(bmp, STATUS, &cmd_rdy_status, 1);
 8004d98:	f107 020d 	add.w	r2, r7, #13
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	2103      	movs	r1, #3
 8004da0:	6878      	ldr	r0, [r7, #4]
 8004da2:	f000 fa8e 	bl	80052c2 <BMP388_ReadBytes>
 8004da6:	4603      	mov	r3, r0
 8004da8:	73fb      	strb	r3, [r7, #15]
	if((rslt == HAL_OK) && (cmd_rdy_status & BMP388_CMD_RDY)){
 8004daa:	7bfb      	ldrb	r3, [r7, #15]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d128      	bne.n	8004e02 <BMP388_SoftReset+0x76>
 8004db0:	7b7b      	ldrb	r3, [r7, #13]
 8004db2:	f003 0310 	and.w	r3, r3, #16
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d023      	beq.n	8004e02 <BMP388_SoftReset+0x76>
		// Writing SOFTRESET command to CMD reg
		rslt = BMP388_WriteBytes(bmp, CMD, &rst_cmnd, 1);
 8004dba:	f107 020e 	add.w	r2, r7, #14
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	217e      	movs	r1, #126	; 0x7e
 8004dc2:	6878      	ldr	r0, [r7, #4]
 8004dc4:	f000 fa9b 	bl	80052fe <BMP388_WriteBytes>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	73fb      	strb	r3, [r7, #15]
		if(rslt == HAL_OK){
 8004dcc:	7bfb      	ldrb	r3, [r7, #15]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d115      	bne.n	8004dfe <BMP388_SoftReset+0x72>
			// 2 ms pause then check ERR reg
			HAL_Delay(2);
 8004dd2:	2002      	movs	r0, #2
 8004dd4:	f000 fbe2 	bl	800559c <HAL_Delay>
			rslt = BMP388_ReadBytes(bmp, ERR_REG, &cmd_err_status, 1);
 8004dd8:	f107 020c 	add.w	r2, r7, #12
 8004ddc:	2301      	movs	r3, #1
 8004dde:	2102      	movs	r1, #2
 8004de0:	6878      	ldr	r0, [r7, #4]
 8004de2:	f000 fa6e 	bl	80052c2 <BMP388_ReadBytes>
 8004de6:	4603      	mov	r3, r0
 8004de8:	73fb      	strb	r3, [r7, #15]
			if((cmd_err_status & CMD) || (rslt != HAL_OK)){
 8004dea:	7b3b      	ldrb	r3, [r7, #12]
 8004dec:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d102      	bne.n	8004dfa <BMP388_SoftReset+0x6e>
 8004df4:	7bfb      	ldrb	r3, [r7, #15]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d003      	beq.n	8004e02 <BMP388_SoftReset+0x76>
				return rslt;
 8004dfa:	7bfb      	ldrb	r3, [r7, #15]
 8004dfc:	e002      	b.n	8004e04 <BMP388_SoftReset+0x78>
			}
		}
		else{
			return rslt;
 8004dfe:	7bfb      	ldrb	r3, [r7, #15]
 8004e00:	e000      	b.n	8004e04 <BMP388_SoftReset+0x78>
		}
	}

	return rslt;
 8004e02:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e04:	4618      	mov	r0, r3
 8004e06:	3710      	adds	r7, #16
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	bd80      	pop	{r7, pc}

08004e0c <BMP388_GetCalibData>:
 *
 *  @return Status of execution
 *  @retval = HAL_OK  		-> Success
 *  @retval != HAL_OK	  	-> Failure Info
 */
HAL_StatusTypeDef BMP388_GetCalibData(BMP388_HandleTypeDef *bmp){
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b090      	sub	sp, #64	; 0x40
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef rslt;
	uint8_t calib_buff[BMP388_CALIBDATA_LEN] = {0};
 8004e14:	2300      	movs	r3, #0
 8004e16:	60fb      	str	r3, [r7, #12]
 8004e18:	f107 0310 	add.w	r3, r7, #16
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	601a      	str	r2, [r3, #0]
 8004e20:	605a      	str	r2, [r3, #4]
 8004e22:	609a      	str	r2, [r3, #8]
 8004e24:	60da      	str	r2, [r3, #12]
 8004e26:	741a      	strb	r2, [r3, #16]
	int8_t		raw_par_p8;
	int16_t		raw_par_p9;
	int8_t		raw_par_p10;
	int8_t		raw_par_p11;

	rslt = BMP388_ReadBytes(bmp, CALIB_DATA, calib_buff, BMP388_CALIBDATA_LEN);
 8004e28:	f107 020c 	add.w	r2, r7, #12
 8004e2c:	2315      	movs	r3, #21
 8004e2e:	2131      	movs	r1, #49	; 0x31
 8004e30:	6878      	ldr	r0, [r7, #4]
 8004e32:	f000 fa46 	bl	80052c2 <BMP388_ReadBytes>
 8004e36:	4603      	mov	r3, r0
 8004e38:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	float temp_var;
	if(rslt == HAL_OK){
 8004e3c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	f040 812f 	bne.w	80050a4 <BMP388_GetCalibData+0x298>
		// PAR_T1
		temp_var = 0.00390625f;
 8004e46:	f04f 536e 	mov.w	r3, #998244352	; 0x3b800000
 8004e4a:	63bb      	str	r3, [r7, #56]	; 0x38
		raw_par_t1 = ((uint16_t)calib_buff[1] << 8) | (uint16_t)calib_buff[0];
 8004e4c:	7b7b      	ldrb	r3, [r7, #13]
 8004e4e:	021b      	lsls	r3, r3, #8
 8004e50:	b21a      	sxth	r2, r3
 8004e52:	7b3b      	ldrb	r3, [r7, #12]
 8004e54:	b21b      	sxth	r3, r3
 8004e56:	4313      	orrs	r3, r2
 8004e58:	b21b      	sxth	r3, r3
 8004e5a:	86fb      	strh	r3, [r7, #54]	; 0x36
		bmp->_calib_data.par_t1 = (float)raw_par_t1 / temp_var;
 8004e5c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004e5e:	ee07 3a90 	vmov	s15, r3
 8004e62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e66:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8004e6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	edc3 7a02 	vstr	s15, [r3, #8]
		// PAR_T2
		temp_var = 1073741824.f;
 8004e74:	f04f 439d 	mov.w	r3, #1317011456	; 0x4e800000
 8004e78:	63bb      	str	r3, [r7, #56]	; 0x38
		raw_par_t2 = ((uint16_t)calib_buff[3] << 8) | (uint16_t)calib_buff[2];
 8004e7a:	7bfb      	ldrb	r3, [r7, #15]
 8004e7c:	021b      	lsls	r3, r3, #8
 8004e7e:	b21a      	sxth	r2, r3
 8004e80:	7bbb      	ldrb	r3, [r7, #14]
 8004e82:	b21b      	sxth	r3, r3
 8004e84:	4313      	orrs	r3, r2
 8004e86:	b21b      	sxth	r3, r3
 8004e88:	86bb      	strh	r3, [r7, #52]	; 0x34
		bmp->_calib_data.par_t2 = (float)raw_par_t2 / temp_var;
 8004e8a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004e8c:	ee07 3a90 	vmov	s15, r3
 8004e90:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e94:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8004e98:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	edc3 7a03 	vstr	s15, [r3, #12]
		// PAR_T3
		temp_var = 281474976710656.f;
 8004ea2:	f04f 43af 	mov.w	r3, #1468006400	; 0x57800000
 8004ea6:	63bb      	str	r3, [r7, #56]	; 0x38
		raw_par_t3 = calib_buff[4];
 8004ea8:	7c3b      	ldrb	r3, [r7, #16]
 8004eaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		bmp->_calib_data.par_t3 = (float)raw_par_t3 / temp_var;
 8004eae:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004eb2:	ee07 3a90 	vmov	s15, r3
 8004eb6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004eba:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8004ebe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	edc3 7a04 	vstr	s15, [r3, #16]
		// PAR_P1
		temp_var = 1048576.f;
 8004ec8:	f04f 4393 	mov.w	r3, #1233125376	; 0x49800000
 8004ecc:	63bb      	str	r3, [r7, #56]	; 0x38
		raw_par_p1 = ((int16_t)calib_buff[6] << 8) | (int16_t)calib_buff[5];
 8004ece:	7cbb      	ldrb	r3, [r7, #18]
 8004ed0:	021b      	lsls	r3, r3, #8
 8004ed2:	b21a      	sxth	r2, r3
 8004ed4:	7c7b      	ldrb	r3, [r7, #17]
 8004ed6:	b21b      	sxth	r3, r3
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	863b      	strh	r3, [r7, #48]	; 0x30
		bmp->_calib_data.par_p1 = ((float)raw_par_p1 - 16384) / temp_var;
 8004edc:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8004ee0:	ee07 3a90 	vmov	s15, r3
 8004ee4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004ee8:	ed9f 7a71 	vldr	s14, [pc, #452]	; 80050b0 <BMP388_GetCalibData+0x2a4>
 8004eec:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8004ef0:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8004ef4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	edc3 7a05 	vstr	s15, [r3, #20]
		// PAR_P2
		temp_var = 536870912.f;
 8004efe:	f04f 439c 	mov.w	r3, #1308622848	; 0x4e000000
 8004f02:	63bb      	str	r3, [r7, #56]	; 0x38
		raw_par_p2 = ((int16_t)calib_buff[8] << 8) | (int16_t)calib_buff[7];
 8004f04:	7d3b      	ldrb	r3, [r7, #20]
 8004f06:	021b      	lsls	r3, r3, #8
 8004f08:	b21a      	sxth	r2, r3
 8004f0a:	7cfb      	ldrb	r3, [r7, #19]
 8004f0c:	b21b      	sxth	r3, r3
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	85fb      	strh	r3, [r7, #46]	; 0x2e
		bmp->_calib_data.par_p2 = ((float)raw_par_p2 - 16384) / temp_var;
 8004f12:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8004f16:	ee07 3a90 	vmov	s15, r3
 8004f1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004f1e:	ed9f 7a64 	vldr	s14, [pc, #400]	; 80050b0 <BMP388_GetCalibData+0x2a4>
 8004f22:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8004f26:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8004f2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	edc3 7a06 	vstr	s15, [r3, #24]
		// PAR_P3
		temp_var = 4294967296.f;
 8004f34:	f04f 439f 	mov.w	r3, #1333788672	; 0x4f800000
 8004f38:	63bb      	str	r3, [r7, #56]	; 0x38
		raw_par_p3 = (int8_t)calib_buff[9];
 8004f3a:	7d7b      	ldrb	r3, [r7, #21]
 8004f3c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
		bmp->_calib_data.par_p3 = (float)raw_par_p3 / temp_var;
 8004f40:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 8004f44:	ee07 3a90 	vmov	s15, r3
 8004f48:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004f4c:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8004f50:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	edc3 7a07 	vstr	s15, [r3, #28]
		// PAR_P4
		temp_var = 137438953472.f;
 8004f5a:	f04f 43a4 	mov.w	r3, #1375731712	; 0x52000000
 8004f5e:	63bb      	str	r3, [r7, #56]	; 0x38
		raw_par_p4 = (int8_t)calib_buff[10];
 8004f60:	7dbb      	ldrb	r3, [r7, #22]
 8004f62:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
		bmp->_calib_data.par_p4 = (float)raw_par_p4 / temp_var;
 8004f66:	f997 302c 	ldrsb.w	r3, [r7, #44]	; 0x2c
 8004f6a:	ee07 3a90 	vmov	s15, r3
 8004f6e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004f72:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8004f76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	edc3 7a08 	vstr	s15, [r3, #32]
		// PAR_P5
		temp_var = 0.125f;
 8004f80:	f04f 5378 	mov.w	r3, #1040187392	; 0x3e000000
 8004f84:	63bb      	str	r3, [r7, #56]	; 0x38
		raw_par_p5 = ((uint16_t)calib_buff[12] << 8) | (uint16_t)calib_buff[11];
 8004f86:	7e3b      	ldrb	r3, [r7, #24]
 8004f88:	021b      	lsls	r3, r3, #8
 8004f8a:	b21a      	sxth	r2, r3
 8004f8c:	7dfb      	ldrb	r3, [r7, #23]
 8004f8e:	b21b      	sxth	r3, r3
 8004f90:	4313      	orrs	r3, r2
 8004f92:	b21b      	sxth	r3, r3
 8004f94:	857b      	strh	r3, [r7, #42]	; 0x2a
		bmp->_calib_data.par_p5 = (float)raw_par_p5 / temp_var;
 8004f96:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004f98:	ee07 3a90 	vmov	s15, r3
 8004f9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004fa0:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8004fa4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
		// PAR_P6
		temp_var = 64.f;
 8004fae:	f04f 4385 	mov.w	r3, #1115684864	; 0x42800000
 8004fb2:	63bb      	str	r3, [r7, #56]	; 0x38
		raw_par_p6 = ((uint16_t)calib_buff[14] << 8) | (uint16_t)calib_buff[13];
 8004fb4:	7ebb      	ldrb	r3, [r7, #26]
 8004fb6:	021b      	lsls	r3, r3, #8
 8004fb8:	b21a      	sxth	r2, r3
 8004fba:	7e7b      	ldrb	r3, [r7, #25]
 8004fbc:	b21b      	sxth	r3, r3
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	b21b      	sxth	r3, r3
 8004fc2:	853b      	strh	r3, [r7, #40]	; 0x28
		bmp->_calib_data.par_p6 = (float)raw_par_p6 / temp_var;
 8004fc4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004fc6:	ee07 3a90 	vmov	s15, r3
 8004fca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004fce:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8004fd2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		// PAR_P7
		temp_var = 256.f;
 8004fdc:	f04f 4387 	mov.w	r3, #1132462080	; 0x43800000
 8004fe0:	63bb      	str	r3, [r7, #56]	; 0x38
		raw_par_p7 = (int8_t)calib_buff[15];
 8004fe2:	7efb      	ldrb	r3, [r7, #27]
 8004fe4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		bmp->_calib_data.par_p7 = (float)raw_par_p7 / temp_var;
 8004fe8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004fec:	ee07 3a90 	vmov	s15, r3
 8004ff0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004ff4:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8004ff8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
		// PAR_P8
		temp_var = 32768.f;
 8005002:	f04f 438e 	mov.w	r3, #1191182336	; 0x47000000
 8005006:	63bb      	str	r3, [r7, #56]	; 0x38
		raw_par_p8 = (int8_t)calib_buff[16];
 8005008:	7f3b      	ldrb	r3, [r7, #28]
 800500a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		bmp->_calib_data.par_p8 = (float)raw_par_p8 / temp_var;
 800500e:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
 8005012:	ee07 3a90 	vmov	s15, r3
 8005016:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800501a:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800501e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
		// PAR_P9
		temp_var = 281474976710656.f;
 8005028:	f04f 43af 	mov.w	r3, #1468006400	; 0x57800000
 800502c:	63bb      	str	r3, [r7, #56]	; 0x38
		raw_par_p9 = ((int16_t)calib_buff[18] << 8) | (int16_t)calib_buff[17];
 800502e:	7fbb      	ldrb	r3, [r7, #30]
 8005030:	021b      	lsls	r3, r3, #8
 8005032:	b21a      	sxth	r2, r3
 8005034:	7f7b      	ldrb	r3, [r7, #29]
 8005036:	b21b      	sxth	r3, r3
 8005038:	4313      	orrs	r3, r2
 800503a:	84bb      	strh	r3, [r7, #36]	; 0x24
		bmp->_calib_data.par_p9 = (float)raw_par_p9 / temp_var;
 800503c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8005040:	ee07 3a90 	vmov	s15, r3
 8005044:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8005048:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800504c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
		// PAR_P10
		temp_var = 281474976710656.f;
 8005056:	f04f 43af 	mov.w	r3, #1468006400	; 0x57800000
 800505a:	63bb      	str	r3, [r7, #56]	; 0x38
		raw_par_p10 = (int8_t)calib_buff[19];
 800505c:	7ffb      	ldrb	r3, [r7, #31]
 800505e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		bmp->_calib_data.par_p10 = (float)raw_par_p10 / temp_var;
 8005062:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8005066:	ee07 3a90 	vmov	s15, r3
 800506a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800506e:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8005072:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
		// PAR_P11
		temp_var = 36893488147419103232.f;
 800507c:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8005080:	63bb      	str	r3, [r7, #56]	; 0x38
		raw_par_p11 = (int8_t)calib_buff[20];
 8005082:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005086:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		bmp->_calib_data.par_p11 = (float)raw_par_p11 / temp_var;
 800508a:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 800508e:	ee07 3a90 	vmov	s15, r3
 8005092:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8005096:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800509a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
	}
	return rslt;
 80050a4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 80050a8:	4618      	mov	r0, r3
 80050aa:	3740      	adds	r7, #64	; 0x40
 80050ac:	46bd      	mov	sp, r7
 80050ae:	bd80      	pop	{r7, pc}
 80050b0:	46800000 	.word	0x46800000

080050b4 <BMP388_CompensateTemp>:
 *
 *  @return Status of execution
 *  @retval = HAL_OK  		-> Success
 *  @retval != HAL_OK	  	-> Failure Info
 */
float BMP388_CompensateTemp(BMP388_HandleTypeDef *bmp, uint32_t raw_temp, float *temp){
 80050b4:	b480      	push	{r7}
 80050b6:	b087      	sub	sp, #28
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	60f8      	str	r0, [r7, #12]
 80050bc:	60b9      	str	r1, [r7, #8]
 80050be:	607a      	str	r2, [r7, #4]
    float partial_data1 = (float)(raw_temp - bmp->_calib_data.par_t1);;
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	ee07 3a90 	vmov	s15, r3
 80050c6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	edd3 7a02 	vldr	s15, [r3, #8]
 80050d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80050d4:	edc7 7a05 	vstr	s15, [r7, #20]
    float partial_data2 = (float)(partial_data1 * bmp->_calib_data.par_t2);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	edd3 7a03 	vldr	s15, [r3, #12]
 80050de:	ed97 7a05 	vldr	s14, [r7, #20]
 80050e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050e6:	edc7 7a04 	vstr	s15, [r7, #16]

    *temp = partial_data2 + (partial_data1 * partial_data1) * bmp->_calib_data.par_t3;
 80050ea:	edd7 7a05 	vldr	s15, [r7, #20]
 80050ee:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	edd3 7a04 	vldr	s15, [r3, #16]
 80050f8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80050fc:	edd7 7a04 	vldr	s15, [r7, #16]
 8005100:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	edc3 7a00 	vstr	s15, [r3]

    return *temp;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	ee07 3a90 	vmov	s15, r3
}
 8005112:	eeb0 0a67 	vmov.f32	s0, s15
 8005116:	371c      	adds	r7, #28
 8005118:	46bd      	mov	sp, r7
 800511a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511e:	4770      	bx	lr

08005120 <BMP388_CompensatePress>:
 *	@param[out] press		: Measured pressure in Pa
 *
 *  @return Status of execution
 *  @retval = press			: Compensated pressure value
 */
float BMP388_CompensatePress(BMP388_HandleTypeDef *bmp, float temp, uint32_t raw_press, float *press){
 8005120:	b480      	push	{r7}
 8005122:	b08b      	sub	sp, #44	; 0x2c
 8005124:	af00      	add	r7, sp, #0
 8005126:	60f8      	str	r0, [r7, #12]
 8005128:	ed87 0a02 	vstr	s0, [r7, #8]
 800512c:	6079      	str	r1, [r7, #4]
 800512e:	603a      	str	r2, [r7, #0]
    float partial_out1;
    float partial_out2;



    partial_data1 = bmp->_calib_data.par_p6 * temp;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8005136:	ed97 7a02 	vldr	s14, [r7, #8]
 800513a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800513e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    partial_data2 = bmp->_calib_data.par_p7 * (temp * temp);
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8005148:	edd7 7a02 	vldr	s15, [r7, #8]
 800514c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8005150:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005154:	edc7 7a08 	vstr	s15, [r7, #32]
    partial_data3 = bmp->_calib_data.par_p8 * (temp * temp * temp);
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 800515e:	edd7 7a02 	vldr	s15, [r7, #8]
 8005162:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8005166:	edd7 7a02 	vldr	s15, [r7, #8]
 800516a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800516e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005172:	edc7 7a07 	vstr	s15, [r7, #28]
    partial_out1 = bmp->_calib_data.par_p5 + partial_data1 + partial_data2 + partial_data3;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800517c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8005180:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005184:	edd7 7a08 	vldr	s15, [r7, #32]
 8005188:	ee77 7a27 	vadd.f32	s15, s14, s15
 800518c:	ed97 7a07 	vldr	s14, [r7, #28]
 8005190:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005194:	edc7 7a06 	vstr	s15, [r7, #24]

    partial_data1 = bmp->_calib_data.par_p2 * temp;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	edd3 7a06 	vldr	s15, [r3, #24]
 800519e:	ed97 7a02 	vldr	s14, [r7, #8]
 80051a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051a6:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    partial_data2 = bmp->_calib_data.par_p3 * (temp * temp);
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	ed93 7a07 	vldr	s14, [r3, #28]
 80051b0:	edd7 7a02 	vldr	s15, [r7, #8]
 80051b4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80051b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051bc:	edc7 7a08 	vstr	s15, [r7, #32]
    partial_data3 = bmp->_calib_data.par_p4 * (temp * temp * temp);
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	ed93 7a08 	vldr	s14, [r3, #32]
 80051c6:	edd7 7a02 	vldr	s15, [r7, #8]
 80051ca:	ee67 6aa7 	vmul.f32	s13, s15, s15
 80051ce:	edd7 7a02 	vldr	s15, [r7, #8]
 80051d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80051d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051da:	edc7 7a07 	vstr	s15, [r7, #28]
    partial_out2 = (float)raw_press * (bmp->_calib_data.par_p1 + partial_data1 + partial_data2 + partial_data3);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	ee07 3a90 	vmov	s15, r3
 80051e4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	edd3 6a05 	vldr	s13, [r3, #20]
 80051ee:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80051f2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80051f6:	edd7 7a08 	vldr	s15, [r7, #32]
 80051fa:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80051fe:	edd7 7a07 	vldr	s15, [r7, #28]
 8005202:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005206:	ee67 7a27 	vmul.f32	s15, s14, s15
 800520a:	edc7 7a05 	vstr	s15, [r7, #20]

    partial_data1 = (float)raw_press * (float)raw_press;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	ee07 3a90 	vmov	s15, r3
 8005214:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	ee07 3a90 	vmov	s15, r3
 800521e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005222:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005226:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    partial_data2 = bmp->_calib_data.par_p9 + bmp->_calib_data.par_p10 * temp;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 8005236:	edd7 7a02 	vldr	s15, [r7, #8]
 800523a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800523e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005242:	edc7 7a08 	vstr	s15, [r7, #32]
    partial_data3 = partial_data1 * partial_data2;
 8005246:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800524a:	edd7 7a08 	vldr	s15, [r7, #32]
 800524e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005252:	edc7 7a07 	vstr	s15, [r7, #28]
    partial_data4 = partial_data3 + ((float)raw_press * (float)raw_press * (float)raw_press) * bmp->_calib_data.par_p11;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	ee07 3a90 	vmov	s15, r3
 800525c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	ee07 3a90 	vmov	s15, r3
 8005266:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800526a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	ee07 3a90 	vmov	s15, r3
 8005274:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005278:	ee27 7a27 	vmul.f32	s14, s14, s15
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8005282:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005286:	ed97 7a07 	vldr	s14, [r7, #28]
 800528a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800528e:	edc7 7a04 	vstr	s15, [r7, #16]

    *press = partial_out1 + partial_out2 + partial_data4;
 8005292:	ed97 7a06 	vldr	s14, [r7, #24]
 8005296:	edd7 7a05 	vldr	s15, [r7, #20]
 800529a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800529e:	edd7 7a04 	vldr	s15, [r7, #16]
 80052a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	edc3 7a00 	vstr	s15, [r3]

    return *press;
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	ee07 3a90 	vmov	s15, r3
}
 80052b4:	eeb0 0a67 	vmov.f32	s0, s15
 80052b8:	372c      	adds	r7, #44	; 0x2c
 80052ba:	46bd      	mov	sp, r7
 80052bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c0:	4770      	bx	lr

080052c2 <BMP388_ReadBytes>:
 *
 *  @return Status of execution
 *  @retval = HAL_OK 		-> Success
 *  @retval != HAL_ERROR 	-> Failure Info
 */
HAL_StatusTypeDef BMP388_ReadBytes(BMP388_HandleTypeDef *bmp, BMP388_regs reg_addr, uint8_t *buff, uint8_t len){
 80052c2:	b580      	push	{r7, lr}
 80052c4:	b088      	sub	sp, #32
 80052c6:	af04      	add	r7, sp, #16
 80052c8:	60f8      	str	r0, [r7, #12]
 80052ca:	607a      	str	r2, [r7, #4]
 80052cc:	461a      	mov	r2, r3
 80052ce:	460b      	mov	r3, r1
 80052d0:	72fb      	strb	r3, [r7, #11]
 80052d2:	4613      	mov	r3, r2
 80052d4:	72bb      	strb	r3, [r7, #10]
	return HAL_I2C_Mem_Read(bmp->_hi2c, BMP388_ADDR << 1, reg_addr, I2C_MEMADD_SIZE_8BIT, buff, len, 100);
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	6818      	ldr	r0, [r3, #0]
 80052da:	7afb      	ldrb	r3, [r7, #11]
 80052dc:	b29a      	uxth	r2, r3
 80052de:	7abb      	ldrb	r3, [r7, #10]
 80052e0:	b29b      	uxth	r3, r3
 80052e2:	2164      	movs	r1, #100	; 0x64
 80052e4:	9102      	str	r1, [sp, #8]
 80052e6:	9301      	str	r3, [sp, #4]
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	9300      	str	r3, [sp, #0]
 80052ec:	2301      	movs	r3, #1
 80052ee:	21ec      	movs	r1, #236	; 0xec
 80052f0:	f001 fd14 	bl	8006d1c <HAL_I2C_Mem_Read>
 80052f4:	4603      	mov	r3, r0
}
 80052f6:	4618      	mov	r0, r3
 80052f8:	3710      	adds	r7, #16
 80052fa:	46bd      	mov	sp, r7
 80052fc:	bd80      	pop	{r7, pc}

080052fe <BMP388_WriteBytes>:
 *
 *  @return Status of execution
 *  @retval = HAL_OK 		-> Success
 *  @retval != HAL_ERROR 	-> Failure Info
 */
HAL_StatusTypeDef BMP388_WriteBytes(BMP388_HandleTypeDef *bmp, BMP388_regs reg_addr, uint8_t *buff, uint8_t len){
 80052fe:	b580      	push	{r7, lr}
 8005300:	b088      	sub	sp, #32
 8005302:	af04      	add	r7, sp, #16
 8005304:	60f8      	str	r0, [r7, #12]
 8005306:	607a      	str	r2, [r7, #4]
 8005308:	461a      	mov	r2, r3
 800530a:	460b      	mov	r3, r1
 800530c:	72fb      	strb	r3, [r7, #11]
 800530e:	4613      	mov	r3, r2
 8005310:	72bb      	strb	r3, [r7, #10]
	return HAL_I2C_Mem_Write(bmp->_hi2c, BMP388_ADDR << 1, reg_addr, I2C_MEMADD_SIZE_8BIT, buff, len, 100);
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	6818      	ldr	r0, [r3, #0]
 8005316:	7afb      	ldrb	r3, [r7, #11]
 8005318:	b29a      	uxth	r2, r3
 800531a:	7abb      	ldrb	r3, [r7, #10]
 800531c:	b29b      	uxth	r3, r3
 800531e:	2164      	movs	r1, #100	; 0x64
 8005320:	9102      	str	r1, [sp, #8]
 8005322:	9301      	str	r3, [sp, #4]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	9300      	str	r3, [sp, #0]
 8005328:	2301      	movs	r3, #1
 800532a:	21ec      	movs	r1, #236	; 0xec
 800532c:	f001 fbfc 	bl	8006b28 <HAL_I2C_Mem_Write>
 8005330:	4603      	mov	r3, r0
}
 8005332:	4618      	mov	r0, r3
 8005334:	3710      	adds	r7, #16
 8005336:	46bd      	mov	sp, r7
 8005338:	bd80      	pop	{r7, pc}

0800533a <set_duty_Oneshot42>:
#define P_yaw 5
#define D_yaw 0



void set_duty_Oneshot42(TIM_HandleTypeDef* const pwmHandle1, uint16_t ref_1, uint16_t ref_2, uint16_t ref_3, uint16_t ref_4){
 800533a:	b480      	push	{r7}
 800533c:	b085      	sub	sp, #20
 800533e:	af00      	add	r7, sp, #0
 8005340:	60f8      	str	r0, [r7, #12]
 8005342:	4608      	mov	r0, r1
 8005344:	4611      	mov	r1, r2
 8005346:	461a      	mov	r2, r3
 8005348:	4603      	mov	r3, r0
 800534a:	817b      	strh	r3, [r7, #10]
 800534c:	460b      	mov	r3, r1
 800534e:	813b      	strh	r3, [r7, #8]
 8005350:	4613      	mov	r3, r2
 8005352:	80fb      	strh	r3, [r7, #6]
	// Multishot42 12 kHz PSC 7-1, ARR 1000-1 -> 1000 = 100%, 500 = stop, ?0 = -100%?
	pwmHandle1 -> Instance -> CCR1 = ref_1;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	897a      	ldrh	r2, [r7, #10]
 800535a:	635a      	str	r2, [r3, #52]	; 0x34
	pwmHandle1 -> Instance -> CCR2 = ref_2;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	893a      	ldrh	r2, [r7, #8]
 8005362:	639a      	str	r2, [r3, #56]	; 0x38
	pwmHandle1 -> Instance -> CCR3 = ref_3;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	88fa      	ldrh	r2, [r7, #6]
 800536a:	63da      	str	r2, [r3, #60]	; 0x3c
	pwmHandle1 -> Instance -> CCR4 = ref_4;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	8b3a      	ldrh	r2, [r7, #24]
 8005372:	641a      	str	r2, [r3, #64]	; 0x40
}
 8005374:	bf00      	nop
 8005376:	3714      	adds	r7, #20
 8005378:	46bd      	mov	sp, r7
 800537a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537e:	4770      	bx	lr

08005380 <CRSFtoDuty>:

float CRSFtoDuty(uint16_t CRSF_val){
 8005380:	b580      	push	{r7, lr}
 8005382:	b084      	sub	sp, #16
 8005384:	af00      	add	r7, sp, #0
 8005386:	4603      	mov	r3, r0
 8005388:	80fb      	strh	r3, [r7, #6]
	float Duty;
//	Duty = 550+((float)(CRSF_val-172))/4.1; // minimum duty 55% max duty 95%
	Duty = 550+((float)(CRSF_val-172))/4.1*0.4; //for safety reasons minimum duty 55% max duty 71%
 800538a:	88fb      	ldrh	r3, [r7, #6]
 800538c:	3bac      	subs	r3, #172	; 0xac
 800538e:	ee07 3a90 	vmov	s15, r3
 8005392:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005396:	ee17 0a90 	vmov	r0, s15
 800539a:	f7fb f8d5 	bl	8000548 <__aeabi_f2d>
 800539e:	a315      	add	r3, pc, #84	; (adr r3, 80053f4 <CRSFtoDuty+0x74>)
 80053a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053a4:	f7fb fa52 	bl	800084c <__aeabi_ddiv>
 80053a8:	4602      	mov	r2, r0
 80053aa:	460b      	mov	r3, r1
 80053ac:	4610      	mov	r0, r2
 80053ae:	4619      	mov	r1, r3
 80053b0:	a312      	add	r3, pc, #72	; (adr r3, 80053fc <CRSFtoDuty+0x7c>)
 80053b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053b6:	f7fb f91f 	bl	80005f8 <__aeabi_dmul>
 80053ba:	4602      	mov	r2, r0
 80053bc:	460b      	mov	r3, r1
 80053be:	4610      	mov	r0, r2
 80053c0:	4619      	mov	r1, r3
 80053c2:	f04f 0200 	mov.w	r2, #0
 80053c6:	4b0a      	ldr	r3, [pc, #40]	; (80053f0 <CRSFtoDuty+0x70>)
 80053c8:	f7fa ff60 	bl	800028c <__adddf3>
 80053cc:	4602      	mov	r2, r0
 80053ce:	460b      	mov	r3, r1
 80053d0:	4610      	mov	r0, r2
 80053d2:	4619      	mov	r1, r3
 80053d4:	f7fb fc08 	bl	8000be8 <__aeabi_d2f>
 80053d8:	4603      	mov	r3, r0
 80053da:	60fb      	str	r3, [r7, #12]
	return Duty;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	ee07 3a90 	vmov	s15, r3
}
 80053e2:	eeb0 0a67 	vmov.f32	s0, s15
 80053e6:	3710      	adds	r7, #16
 80053e8:	46bd      	mov	sp, r7
 80053ea:	bd80      	pop	{r7, pc}
 80053ec:	f3af 8000 	nop.w
 80053f0:	40813000 	.word	0x40813000
 80053f4:	66666666 	.word	0x66666666
 80053f8:	40106666 	.word	0x40106666
 80053fc:	9999999a 	.word	0x9999999a
 8005400:	3fd99999 	.word	0x3fd99999

08005404 <CRSFtoPitch>:

float CRSFtoPitch(uint16_t CRSF_val){
 8005404:	b480      	push	{r7}
 8005406:	b085      	sub	sp, #20
 8005408:	af00      	add	r7, sp, #0
 800540a:	4603      	mov	r3, r0
 800540c:	80fb      	strh	r3, [r7, #6]
	float pitch;
	pitch = ((float)(CRSF_val-992))/820.0;
 800540e:	88fb      	ldrh	r3, [r7, #6]
 8005410:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 8005414:	ee07 3a90 	vmov	s15, r3
 8005418:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800541c:	eddf 6a07 	vldr	s13, [pc, #28]	; 800543c <CRSFtoPitch+0x38>
 8005420:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005424:	edc7 7a03 	vstr	s15, [r7, #12]
	return pitch;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	ee07 3a90 	vmov	s15, r3
}
 800542e:	eeb0 0a67 	vmov.f32	s0, s15
 8005432:	3714      	adds	r7, #20
 8005434:	46bd      	mov	sp, r7
 8005436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543a:	4770      	bx	lr
 800543c:	444d0000 	.word	0x444d0000

08005440 <CRSFtoRoll>:

float CRSFtoRoll(uint16_t CRSF_val){
 8005440:	b480      	push	{r7}
 8005442:	b085      	sub	sp, #20
 8005444:	af00      	add	r7, sp, #0
 8005446:	4603      	mov	r3, r0
 8005448:	80fb      	strh	r3, [r7, #6]
	float roll;
	roll = ((float)(CRSF_val-992))/820.0;
 800544a:	88fb      	ldrh	r3, [r7, #6]
 800544c:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 8005450:	ee07 3a90 	vmov	s15, r3
 8005454:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005458:	eddf 6a07 	vldr	s13, [pc, #28]	; 8005478 <CRSFtoRoll+0x38>
 800545c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005460:	edc7 7a03 	vstr	s15, [r7, #12]
	return roll;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	ee07 3a90 	vmov	s15, r3
}
 800546a:	eeb0 0a67 	vmov.f32	s0, s15
 800546e:	3714      	adds	r7, #20
 8005470:	46bd      	mov	sp, r7
 8005472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005476:	4770      	bx	lr
 8005478:	444d0000 	.word	0x444d0000

0800547c <CRSFtoYaw>:

float CRSFtoYaw(uint16_t CRSF_val){
 800547c:	b480      	push	{r7}
 800547e:	b085      	sub	sp, #20
 8005480:	af00      	add	r7, sp, #0
 8005482:	4603      	mov	r3, r0
 8005484:	80fb      	strh	r3, [r7, #6]
	float yaw;
	yaw = ((float)(CRSF_val-992))/820.0;
 8005486:	88fb      	ldrh	r3, [r7, #6]
 8005488:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 800548c:	ee07 3a90 	vmov	s15, r3
 8005490:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005494:	eddf 6a07 	vldr	s13, [pc, #28]	; 80054b4 <CRSFtoYaw+0x38>
 8005498:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800549c:	edc7 7a03 	vstr	s15, [r7, #12]
	return yaw;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	ee07 3a90 	vmov	s15, r3
}
 80054a6:	eeb0 0a67 	vmov.f32	s0, s15
 80054aa:	3714      	adds	r7, #20
 80054ac:	46bd      	mov	sp, r7
 80054ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b2:	4770      	bx	lr
 80054b4:	444d0000 	.word	0x444d0000

080054b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80054bc:	4b0e      	ldr	r3, [pc, #56]	; (80054f8 <HAL_Init+0x40>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a0d      	ldr	r2, [pc, #52]	; (80054f8 <HAL_Init+0x40>)
 80054c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80054c6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80054c8:	4b0b      	ldr	r3, [pc, #44]	; (80054f8 <HAL_Init+0x40>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4a0a      	ldr	r2, [pc, #40]	; (80054f8 <HAL_Init+0x40>)
 80054ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80054d2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80054d4:	4b08      	ldr	r3, [pc, #32]	; (80054f8 <HAL_Init+0x40>)
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4a07      	ldr	r2, [pc, #28]	; (80054f8 <HAL_Init+0x40>)
 80054da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80054e0:	2003      	movs	r0, #3
 80054e2:	f000 fbb1 	bl	8005c48 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80054e6:	200f      	movs	r0, #15
 80054e8:	f000 f808 	bl	80054fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80054ec:	f7fe fa44 	bl	8003978 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80054f0:	2300      	movs	r3, #0
}
 80054f2:	4618      	mov	r0, r3
 80054f4:	bd80      	pop	{r7, pc}
 80054f6:	bf00      	nop
 80054f8:	40023c00 	.word	0x40023c00

080054fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b082      	sub	sp, #8
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005504:	4b12      	ldr	r3, [pc, #72]	; (8005550 <HAL_InitTick+0x54>)
 8005506:	681a      	ldr	r2, [r3, #0]
 8005508:	4b12      	ldr	r3, [pc, #72]	; (8005554 <HAL_InitTick+0x58>)
 800550a:	781b      	ldrb	r3, [r3, #0]
 800550c:	4619      	mov	r1, r3
 800550e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005512:	fbb3 f3f1 	udiv	r3, r3, r1
 8005516:	fbb2 f3f3 	udiv	r3, r2, r3
 800551a:	4618      	mov	r0, r3
 800551c:	f000 fbc9 	bl	8005cb2 <HAL_SYSTICK_Config>
 8005520:	4603      	mov	r3, r0
 8005522:	2b00      	cmp	r3, #0
 8005524:	d001      	beq.n	800552a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005526:	2301      	movs	r3, #1
 8005528:	e00e      	b.n	8005548 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2b0f      	cmp	r3, #15
 800552e:	d80a      	bhi.n	8005546 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005530:	2200      	movs	r2, #0
 8005532:	6879      	ldr	r1, [r7, #4]
 8005534:	f04f 30ff 	mov.w	r0, #4294967295
 8005538:	f000 fb91 	bl	8005c5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800553c:	4a06      	ldr	r2, [pc, #24]	; (8005558 <HAL_InitTick+0x5c>)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005542:	2300      	movs	r3, #0
 8005544:	e000      	b.n	8005548 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005546:	2301      	movs	r3, #1
}
 8005548:	4618      	mov	r0, r3
 800554a:	3708      	adds	r7, #8
 800554c:	46bd      	mov	sp, r7
 800554e:	bd80      	pop	{r7, pc}
 8005550:	2000000c 	.word	0x2000000c
 8005554:	20000014 	.word	0x20000014
 8005558:	20000010 	.word	0x20000010

0800555c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800555c:	b480      	push	{r7}
 800555e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005560:	4b06      	ldr	r3, [pc, #24]	; (800557c <HAL_IncTick+0x20>)
 8005562:	781b      	ldrb	r3, [r3, #0]
 8005564:	461a      	mov	r2, r3
 8005566:	4b06      	ldr	r3, [pc, #24]	; (8005580 <HAL_IncTick+0x24>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4413      	add	r3, r2
 800556c:	4a04      	ldr	r2, [pc, #16]	; (8005580 <HAL_IncTick+0x24>)
 800556e:	6013      	str	r3, [r2, #0]
}
 8005570:	bf00      	nop
 8005572:	46bd      	mov	sp, r7
 8005574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005578:	4770      	bx	lr
 800557a:	bf00      	nop
 800557c:	20000014 	.word	0x20000014
 8005580:	20002b1c 	.word	0x20002b1c

08005584 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005584:	b480      	push	{r7}
 8005586:	af00      	add	r7, sp, #0
  return uwTick;
 8005588:	4b03      	ldr	r3, [pc, #12]	; (8005598 <HAL_GetTick+0x14>)
 800558a:	681b      	ldr	r3, [r3, #0]
}
 800558c:	4618      	mov	r0, r3
 800558e:	46bd      	mov	sp, r7
 8005590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005594:	4770      	bx	lr
 8005596:	bf00      	nop
 8005598:	20002b1c 	.word	0x20002b1c

0800559c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b084      	sub	sp, #16
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80055a4:	f7ff ffee 	bl	8005584 <HAL_GetTick>
 80055a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055b4:	d005      	beq.n	80055c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80055b6:	4b0a      	ldr	r3, [pc, #40]	; (80055e0 <HAL_Delay+0x44>)
 80055b8:	781b      	ldrb	r3, [r3, #0]
 80055ba:	461a      	mov	r2, r3
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	4413      	add	r3, r2
 80055c0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80055c2:	bf00      	nop
 80055c4:	f7ff ffde 	bl	8005584 <HAL_GetTick>
 80055c8:	4602      	mov	r2, r0
 80055ca:	68bb      	ldr	r3, [r7, #8]
 80055cc:	1ad3      	subs	r3, r2, r3
 80055ce:	68fa      	ldr	r2, [r7, #12]
 80055d0:	429a      	cmp	r2, r3
 80055d2:	d8f7      	bhi.n	80055c4 <HAL_Delay+0x28>
  {
  }
}
 80055d4:	bf00      	nop
 80055d6:	bf00      	nop
 80055d8:	3710      	adds	r7, #16
 80055da:	46bd      	mov	sp, r7
 80055dc:	bd80      	pop	{r7, pc}
 80055de:	bf00      	nop
 80055e0:	20000014 	.word	0x20000014

080055e4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b084      	sub	sp, #16
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80055ec:	2300      	movs	r3, #0
 80055ee:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d101      	bne.n	80055fa <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80055f6:	2301      	movs	r3, #1
 80055f8:	e033      	b.n	8005662 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d109      	bne.n	8005616 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005602:	6878      	ldr	r0, [r7, #4]
 8005604:	f7fe f9e4 	bl	80039d0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2200      	movs	r2, #0
 800560c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2200      	movs	r2, #0
 8005612:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800561a:	f003 0310 	and.w	r3, r3, #16
 800561e:	2b00      	cmp	r3, #0
 8005620:	d118      	bne.n	8005654 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005626:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800562a:	f023 0302 	bic.w	r3, r3, #2
 800562e:	f043 0202 	orr.w	r2, r3, #2
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8005636:	6878      	ldr	r0, [r7, #4]
 8005638:	f000 f93a 	bl	80058b0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2200      	movs	r2, #0
 8005640:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005646:	f023 0303 	bic.w	r3, r3, #3
 800564a:	f043 0201 	orr.w	r2, r3, #1
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	641a      	str	r2, [r3, #64]	; 0x40
 8005652:	e001      	b.n	8005658 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005654:	2301      	movs	r3, #1
 8005656:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2200      	movs	r2, #0
 800565c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005660:	7bfb      	ldrb	r3, [r7, #15]
}
 8005662:	4618      	mov	r0, r3
 8005664:	3710      	adds	r7, #16
 8005666:	46bd      	mov	sp, r7
 8005668:	bd80      	pop	{r7, pc}
	...

0800566c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800566c:	b480      	push	{r7}
 800566e:	b085      	sub	sp, #20
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
 8005674:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8005676:	2300      	movs	r3, #0
 8005678:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005680:	2b01      	cmp	r3, #1
 8005682:	d101      	bne.n	8005688 <HAL_ADC_ConfigChannel+0x1c>
 8005684:	2302      	movs	r3, #2
 8005686:	e105      	b.n	8005894 <HAL_ADC_ConfigChannel+0x228>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2201      	movs	r2, #1
 800568c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	2b09      	cmp	r3, #9
 8005696:	d925      	bls.n	80056e4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	68d9      	ldr	r1, [r3, #12]
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	b29b      	uxth	r3, r3
 80056a4:	461a      	mov	r2, r3
 80056a6:	4613      	mov	r3, r2
 80056a8:	005b      	lsls	r3, r3, #1
 80056aa:	4413      	add	r3, r2
 80056ac:	3b1e      	subs	r3, #30
 80056ae:	2207      	movs	r2, #7
 80056b0:	fa02 f303 	lsl.w	r3, r2, r3
 80056b4:	43da      	mvns	r2, r3
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	400a      	ands	r2, r1
 80056bc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	68d9      	ldr	r1, [r3, #12]
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	689a      	ldr	r2, [r3, #8]
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	b29b      	uxth	r3, r3
 80056ce:	4618      	mov	r0, r3
 80056d0:	4603      	mov	r3, r0
 80056d2:	005b      	lsls	r3, r3, #1
 80056d4:	4403      	add	r3, r0
 80056d6:	3b1e      	subs	r3, #30
 80056d8:	409a      	lsls	r2, r3
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	430a      	orrs	r2, r1
 80056e0:	60da      	str	r2, [r3, #12]
 80056e2:	e022      	b.n	800572a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	6919      	ldr	r1, [r3, #16]
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	b29b      	uxth	r3, r3
 80056f0:	461a      	mov	r2, r3
 80056f2:	4613      	mov	r3, r2
 80056f4:	005b      	lsls	r3, r3, #1
 80056f6:	4413      	add	r3, r2
 80056f8:	2207      	movs	r2, #7
 80056fa:	fa02 f303 	lsl.w	r3, r2, r3
 80056fe:	43da      	mvns	r2, r3
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	400a      	ands	r2, r1
 8005706:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	6919      	ldr	r1, [r3, #16]
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	689a      	ldr	r2, [r3, #8]
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	b29b      	uxth	r3, r3
 8005718:	4618      	mov	r0, r3
 800571a:	4603      	mov	r3, r0
 800571c:	005b      	lsls	r3, r3, #1
 800571e:	4403      	add	r3, r0
 8005720:	409a      	lsls	r2, r3
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	430a      	orrs	r2, r1
 8005728:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	685b      	ldr	r3, [r3, #4]
 800572e:	2b06      	cmp	r3, #6
 8005730:	d824      	bhi.n	800577c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	685a      	ldr	r2, [r3, #4]
 800573c:	4613      	mov	r3, r2
 800573e:	009b      	lsls	r3, r3, #2
 8005740:	4413      	add	r3, r2
 8005742:	3b05      	subs	r3, #5
 8005744:	221f      	movs	r2, #31
 8005746:	fa02 f303 	lsl.w	r3, r2, r3
 800574a:	43da      	mvns	r2, r3
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	400a      	ands	r2, r1
 8005752:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	b29b      	uxth	r3, r3
 8005760:	4618      	mov	r0, r3
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	685a      	ldr	r2, [r3, #4]
 8005766:	4613      	mov	r3, r2
 8005768:	009b      	lsls	r3, r3, #2
 800576a:	4413      	add	r3, r2
 800576c:	3b05      	subs	r3, #5
 800576e:	fa00 f203 	lsl.w	r2, r0, r3
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	430a      	orrs	r2, r1
 8005778:	635a      	str	r2, [r3, #52]	; 0x34
 800577a:	e04c      	b.n	8005816 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	685b      	ldr	r3, [r3, #4]
 8005780:	2b0c      	cmp	r3, #12
 8005782:	d824      	bhi.n	80057ce <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	685a      	ldr	r2, [r3, #4]
 800578e:	4613      	mov	r3, r2
 8005790:	009b      	lsls	r3, r3, #2
 8005792:	4413      	add	r3, r2
 8005794:	3b23      	subs	r3, #35	; 0x23
 8005796:	221f      	movs	r2, #31
 8005798:	fa02 f303 	lsl.w	r3, r2, r3
 800579c:	43da      	mvns	r2, r3
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	400a      	ands	r2, r1
 80057a4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	b29b      	uxth	r3, r3
 80057b2:	4618      	mov	r0, r3
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	685a      	ldr	r2, [r3, #4]
 80057b8:	4613      	mov	r3, r2
 80057ba:	009b      	lsls	r3, r3, #2
 80057bc:	4413      	add	r3, r2
 80057be:	3b23      	subs	r3, #35	; 0x23
 80057c0:	fa00 f203 	lsl.w	r2, r0, r3
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	430a      	orrs	r2, r1
 80057ca:	631a      	str	r2, [r3, #48]	; 0x30
 80057cc:	e023      	b.n	8005816 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	685a      	ldr	r2, [r3, #4]
 80057d8:	4613      	mov	r3, r2
 80057da:	009b      	lsls	r3, r3, #2
 80057dc:	4413      	add	r3, r2
 80057de:	3b41      	subs	r3, #65	; 0x41
 80057e0:	221f      	movs	r2, #31
 80057e2:	fa02 f303 	lsl.w	r3, r2, r3
 80057e6:	43da      	mvns	r2, r3
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	400a      	ands	r2, r1
 80057ee:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	b29b      	uxth	r3, r3
 80057fc:	4618      	mov	r0, r3
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	685a      	ldr	r2, [r3, #4]
 8005802:	4613      	mov	r3, r2
 8005804:	009b      	lsls	r3, r3, #2
 8005806:	4413      	add	r3, r2
 8005808:	3b41      	subs	r3, #65	; 0x41
 800580a:	fa00 f203 	lsl.w	r2, r0, r3
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	430a      	orrs	r2, r1
 8005814:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005816:	4b22      	ldr	r3, [pc, #136]	; (80058a0 <HAL_ADC_ConfigChannel+0x234>)
 8005818:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4a21      	ldr	r2, [pc, #132]	; (80058a4 <HAL_ADC_ConfigChannel+0x238>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d109      	bne.n	8005838 <HAL_ADC_ConfigChannel+0x1cc>
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	2b12      	cmp	r3, #18
 800582a:	d105      	bne.n	8005838 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	685b      	ldr	r3, [r3, #4]
 8005830:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4a19      	ldr	r2, [pc, #100]	; (80058a4 <HAL_ADC_ConfigChannel+0x238>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d123      	bne.n	800588a <HAL_ADC_ConfigChannel+0x21e>
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	2b10      	cmp	r3, #16
 8005848:	d003      	beq.n	8005852 <HAL_ADC_ConfigChannel+0x1e6>
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	2b11      	cmp	r3, #17
 8005850:	d11b      	bne.n	800588a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	685b      	ldr	r3, [r3, #4]
 8005856:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	2b10      	cmp	r3, #16
 8005864:	d111      	bne.n	800588a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005866:	4b10      	ldr	r3, [pc, #64]	; (80058a8 <HAL_ADC_ConfigChannel+0x23c>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	4a10      	ldr	r2, [pc, #64]	; (80058ac <HAL_ADC_ConfigChannel+0x240>)
 800586c:	fba2 2303 	umull	r2, r3, r2, r3
 8005870:	0c9a      	lsrs	r2, r3, #18
 8005872:	4613      	mov	r3, r2
 8005874:	009b      	lsls	r3, r3, #2
 8005876:	4413      	add	r3, r2
 8005878:	005b      	lsls	r3, r3, #1
 800587a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800587c:	e002      	b.n	8005884 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800587e:	68bb      	ldr	r3, [r7, #8]
 8005880:	3b01      	subs	r3, #1
 8005882:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d1f9      	bne.n	800587e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2200      	movs	r2, #0
 800588e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8005892:	2300      	movs	r3, #0
}
 8005894:	4618      	mov	r0, r3
 8005896:	3714      	adds	r7, #20
 8005898:	46bd      	mov	sp, r7
 800589a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589e:	4770      	bx	lr
 80058a0:	40012300 	.word	0x40012300
 80058a4:	40012000 	.word	0x40012000
 80058a8:	2000000c 	.word	0x2000000c
 80058ac:	431bde83 	.word	0x431bde83

080058b0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80058b0:	b480      	push	{r7}
 80058b2:	b085      	sub	sp, #20
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80058b8:	4b79      	ldr	r3, [pc, #484]	; (8005aa0 <ADC_Init+0x1f0>)
 80058ba:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	685b      	ldr	r3, [r3, #4]
 80058c0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	685a      	ldr	r2, [r3, #4]
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	685b      	ldr	r3, [r3, #4]
 80058d0:	431a      	orrs	r2, r3
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	685a      	ldr	r2, [r3, #4]
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80058e4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	6859      	ldr	r1, [r3, #4]
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	691b      	ldr	r3, [r3, #16]
 80058f0:	021a      	lsls	r2, r3, #8
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	430a      	orrs	r2, r1
 80058f8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	685a      	ldr	r2, [r3, #4]
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8005908:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	6859      	ldr	r1, [r3, #4]
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	689a      	ldr	r2, [r3, #8]
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	430a      	orrs	r2, r1
 800591a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	689a      	ldr	r2, [r3, #8]
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800592a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	6899      	ldr	r1, [r3, #8]
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	68da      	ldr	r2, [r3, #12]
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	430a      	orrs	r2, r1
 800593c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005942:	4a58      	ldr	r2, [pc, #352]	; (8005aa4 <ADC_Init+0x1f4>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d022      	beq.n	800598e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	689a      	ldr	r2, [r3, #8]
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005956:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	6899      	ldr	r1, [r3, #8]
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	430a      	orrs	r2, r1
 8005968:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	689a      	ldr	r2, [r3, #8]
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005978:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	6899      	ldr	r1, [r3, #8]
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	430a      	orrs	r2, r1
 800598a:	609a      	str	r2, [r3, #8]
 800598c:	e00f      	b.n	80059ae <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	689a      	ldr	r2, [r3, #8]
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800599c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	689a      	ldr	r2, [r3, #8]
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80059ac:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	689a      	ldr	r2, [r3, #8]
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f022 0202 	bic.w	r2, r2, #2
 80059bc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	6899      	ldr	r1, [r3, #8]
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	7e1b      	ldrb	r3, [r3, #24]
 80059c8:	005a      	lsls	r2, r3, #1
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	430a      	orrs	r2, r1
 80059d0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d01b      	beq.n	8005a14 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	685a      	ldr	r2, [r3, #4]
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80059ea:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	685a      	ldr	r2, [r3, #4]
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80059fa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	6859      	ldr	r1, [r3, #4]
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a06:	3b01      	subs	r3, #1
 8005a08:	035a      	lsls	r2, r3, #13
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	430a      	orrs	r2, r1
 8005a10:	605a      	str	r2, [r3, #4]
 8005a12:	e007      	b.n	8005a24 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	685a      	ldr	r2, [r3, #4]
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005a22:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8005a32:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	69db      	ldr	r3, [r3, #28]
 8005a3e:	3b01      	subs	r3, #1
 8005a40:	051a      	lsls	r2, r3, #20
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	430a      	orrs	r2, r1
 8005a48:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	689a      	ldr	r2, [r3, #8]
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005a58:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	6899      	ldr	r1, [r3, #8]
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005a66:	025a      	lsls	r2, r3, #9
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	430a      	orrs	r2, r1
 8005a6e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	689a      	ldr	r2, [r3, #8]
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a7e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	6899      	ldr	r1, [r3, #8]
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	695b      	ldr	r3, [r3, #20]
 8005a8a:	029a      	lsls	r2, r3, #10
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	430a      	orrs	r2, r1
 8005a92:	609a      	str	r2, [r3, #8]
}
 8005a94:	bf00      	nop
 8005a96:	3714      	adds	r7, #20
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9e:	4770      	bx	lr
 8005aa0:	40012300 	.word	0x40012300
 8005aa4:	0f000001 	.word	0x0f000001

08005aa8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b085      	sub	sp, #20
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	f003 0307 	and.w	r3, r3, #7
 8005ab6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005ab8:	4b0c      	ldr	r3, [pc, #48]	; (8005aec <__NVIC_SetPriorityGrouping+0x44>)
 8005aba:	68db      	ldr	r3, [r3, #12]
 8005abc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005abe:	68ba      	ldr	r2, [r7, #8]
 8005ac0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005ac4:	4013      	ands	r3, r2
 8005ac6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005ad0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005ad4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ad8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005ada:	4a04      	ldr	r2, [pc, #16]	; (8005aec <__NVIC_SetPriorityGrouping+0x44>)
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	60d3      	str	r3, [r2, #12]
}
 8005ae0:	bf00      	nop
 8005ae2:	3714      	adds	r7, #20
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aea:	4770      	bx	lr
 8005aec:	e000ed00 	.word	0xe000ed00

08005af0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005af0:	b480      	push	{r7}
 8005af2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005af4:	4b04      	ldr	r3, [pc, #16]	; (8005b08 <__NVIC_GetPriorityGrouping+0x18>)
 8005af6:	68db      	ldr	r3, [r3, #12]
 8005af8:	0a1b      	lsrs	r3, r3, #8
 8005afa:	f003 0307 	and.w	r3, r3, #7
}
 8005afe:	4618      	mov	r0, r3
 8005b00:	46bd      	mov	sp, r7
 8005b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b06:	4770      	bx	lr
 8005b08:	e000ed00 	.word	0xe000ed00

08005b0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005b0c:	b480      	push	{r7}
 8005b0e:	b083      	sub	sp, #12
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	4603      	mov	r3, r0
 8005b14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005b16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	db0b      	blt.n	8005b36 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005b1e:	79fb      	ldrb	r3, [r7, #7]
 8005b20:	f003 021f 	and.w	r2, r3, #31
 8005b24:	4907      	ldr	r1, [pc, #28]	; (8005b44 <__NVIC_EnableIRQ+0x38>)
 8005b26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b2a:	095b      	lsrs	r3, r3, #5
 8005b2c:	2001      	movs	r0, #1
 8005b2e:	fa00 f202 	lsl.w	r2, r0, r2
 8005b32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005b36:	bf00      	nop
 8005b38:	370c      	adds	r7, #12
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b40:	4770      	bx	lr
 8005b42:	bf00      	nop
 8005b44:	e000e100 	.word	0xe000e100

08005b48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005b48:	b480      	push	{r7}
 8005b4a:	b083      	sub	sp, #12
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	4603      	mov	r3, r0
 8005b50:	6039      	str	r1, [r7, #0]
 8005b52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005b54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	db0a      	blt.n	8005b72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	b2da      	uxtb	r2, r3
 8005b60:	490c      	ldr	r1, [pc, #48]	; (8005b94 <__NVIC_SetPriority+0x4c>)
 8005b62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b66:	0112      	lsls	r2, r2, #4
 8005b68:	b2d2      	uxtb	r2, r2
 8005b6a:	440b      	add	r3, r1
 8005b6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005b70:	e00a      	b.n	8005b88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	b2da      	uxtb	r2, r3
 8005b76:	4908      	ldr	r1, [pc, #32]	; (8005b98 <__NVIC_SetPriority+0x50>)
 8005b78:	79fb      	ldrb	r3, [r7, #7]
 8005b7a:	f003 030f 	and.w	r3, r3, #15
 8005b7e:	3b04      	subs	r3, #4
 8005b80:	0112      	lsls	r2, r2, #4
 8005b82:	b2d2      	uxtb	r2, r2
 8005b84:	440b      	add	r3, r1
 8005b86:	761a      	strb	r2, [r3, #24]
}
 8005b88:	bf00      	nop
 8005b8a:	370c      	adds	r7, #12
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b92:	4770      	bx	lr
 8005b94:	e000e100 	.word	0xe000e100
 8005b98:	e000ed00 	.word	0xe000ed00

08005b9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	b089      	sub	sp, #36	; 0x24
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	60f8      	str	r0, [r7, #12]
 8005ba4:	60b9      	str	r1, [r7, #8]
 8005ba6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	f003 0307 	and.w	r3, r3, #7
 8005bae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005bb0:	69fb      	ldr	r3, [r7, #28]
 8005bb2:	f1c3 0307 	rsb	r3, r3, #7
 8005bb6:	2b04      	cmp	r3, #4
 8005bb8:	bf28      	it	cs
 8005bba:	2304      	movcs	r3, #4
 8005bbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005bbe:	69fb      	ldr	r3, [r7, #28]
 8005bc0:	3304      	adds	r3, #4
 8005bc2:	2b06      	cmp	r3, #6
 8005bc4:	d902      	bls.n	8005bcc <NVIC_EncodePriority+0x30>
 8005bc6:	69fb      	ldr	r3, [r7, #28]
 8005bc8:	3b03      	subs	r3, #3
 8005bca:	e000      	b.n	8005bce <NVIC_EncodePriority+0x32>
 8005bcc:	2300      	movs	r3, #0
 8005bce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005bd0:	f04f 32ff 	mov.w	r2, #4294967295
 8005bd4:	69bb      	ldr	r3, [r7, #24]
 8005bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8005bda:	43da      	mvns	r2, r3
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	401a      	ands	r2, r3
 8005be0:	697b      	ldr	r3, [r7, #20]
 8005be2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005be4:	f04f 31ff 	mov.w	r1, #4294967295
 8005be8:	697b      	ldr	r3, [r7, #20]
 8005bea:	fa01 f303 	lsl.w	r3, r1, r3
 8005bee:	43d9      	mvns	r1, r3
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005bf4:	4313      	orrs	r3, r2
         );
}
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	3724      	adds	r7, #36	; 0x24
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c00:	4770      	bx	lr
	...

08005c04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b082      	sub	sp, #8
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	3b01      	subs	r3, #1
 8005c10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005c14:	d301      	bcc.n	8005c1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005c16:	2301      	movs	r3, #1
 8005c18:	e00f      	b.n	8005c3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005c1a:	4a0a      	ldr	r2, [pc, #40]	; (8005c44 <SysTick_Config+0x40>)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	3b01      	subs	r3, #1
 8005c20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005c22:	210f      	movs	r1, #15
 8005c24:	f04f 30ff 	mov.w	r0, #4294967295
 8005c28:	f7ff ff8e 	bl	8005b48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005c2c:	4b05      	ldr	r3, [pc, #20]	; (8005c44 <SysTick_Config+0x40>)
 8005c2e:	2200      	movs	r2, #0
 8005c30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005c32:	4b04      	ldr	r3, [pc, #16]	; (8005c44 <SysTick_Config+0x40>)
 8005c34:	2207      	movs	r2, #7
 8005c36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005c38:	2300      	movs	r3, #0
}
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	3708      	adds	r7, #8
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	bd80      	pop	{r7, pc}
 8005c42:	bf00      	nop
 8005c44:	e000e010 	.word	0xe000e010

08005c48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b082      	sub	sp, #8
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005c50:	6878      	ldr	r0, [r7, #4]
 8005c52:	f7ff ff29 	bl	8005aa8 <__NVIC_SetPriorityGrouping>
}
 8005c56:	bf00      	nop
 8005c58:	3708      	adds	r7, #8
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	bd80      	pop	{r7, pc}

08005c5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005c5e:	b580      	push	{r7, lr}
 8005c60:	b086      	sub	sp, #24
 8005c62:	af00      	add	r7, sp, #0
 8005c64:	4603      	mov	r3, r0
 8005c66:	60b9      	str	r1, [r7, #8]
 8005c68:	607a      	str	r2, [r7, #4]
 8005c6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005c70:	f7ff ff3e 	bl	8005af0 <__NVIC_GetPriorityGrouping>
 8005c74:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005c76:	687a      	ldr	r2, [r7, #4]
 8005c78:	68b9      	ldr	r1, [r7, #8]
 8005c7a:	6978      	ldr	r0, [r7, #20]
 8005c7c:	f7ff ff8e 	bl	8005b9c <NVIC_EncodePriority>
 8005c80:	4602      	mov	r2, r0
 8005c82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005c86:	4611      	mov	r1, r2
 8005c88:	4618      	mov	r0, r3
 8005c8a:	f7ff ff5d 	bl	8005b48 <__NVIC_SetPriority>
}
 8005c8e:	bf00      	nop
 8005c90:	3718      	adds	r7, #24
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bd80      	pop	{r7, pc}

08005c96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005c96:	b580      	push	{r7, lr}
 8005c98:	b082      	sub	sp, #8
 8005c9a:	af00      	add	r7, sp, #0
 8005c9c:	4603      	mov	r3, r0
 8005c9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005ca0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	f7ff ff31 	bl	8005b0c <__NVIC_EnableIRQ>
}
 8005caa:	bf00      	nop
 8005cac:	3708      	adds	r7, #8
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	bd80      	pop	{r7, pc}

08005cb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005cb2:	b580      	push	{r7, lr}
 8005cb4:	b082      	sub	sp, #8
 8005cb6:	af00      	add	r7, sp, #0
 8005cb8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005cba:	6878      	ldr	r0, [r7, #4]
 8005cbc:	f7ff ffa2 	bl	8005c04 <SysTick_Config>
 8005cc0:	4603      	mov	r3, r0
}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	3708      	adds	r7, #8
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	bd80      	pop	{r7, pc}
	...

08005ccc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b086      	sub	sp, #24
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005cd8:	f7ff fc54 	bl	8005584 <HAL_GetTick>
 8005cdc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d101      	bne.n	8005ce8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	e099      	b.n	8005e1c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2202      	movs	r2, #2
 8005cec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	681a      	ldr	r2, [r3, #0]
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f022 0201 	bic.w	r2, r2, #1
 8005d06:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005d08:	e00f      	b.n	8005d2a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005d0a:	f7ff fc3b 	bl	8005584 <HAL_GetTick>
 8005d0e:	4602      	mov	r2, r0
 8005d10:	693b      	ldr	r3, [r7, #16]
 8005d12:	1ad3      	subs	r3, r2, r3
 8005d14:	2b05      	cmp	r3, #5
 8005d16:	d908      	bls.n	8005d2a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2220      	movs	r2, #32
 8005d1c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2203      	movs	r2, #3
 8005d22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005d26:	2303      	movs	r3, #3
 8005d28:	e078      	b.n	8005e1c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f003 0301 	and.w	r3, r3, #1
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d1e8      	bne.n	8005d0a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005d40:	697a      	ldr	r2, [r7, #20]
 8005d42:	4b38      	ldr	r3, [pc, #224]	; (8005e24 <HAL_DMA_Init+0x158>)
 8005d44:	4013      	ands	r3, r2
 8005d46:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	685a      	ldr	r2, [r3, #4]
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	689b      	ldr	r3, [r3, #8]
 8005d50:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005d56:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	691b      	ldr	r3, [r3, #16]
 8005d5c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005d62:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	699b      	ldr	r3, [r3, #24]
 8005d68:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005d6e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6a1b      	ldr	r3, [r3, #32]
 8005d74:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005d76:	697a      	ldr	r2, [r7, #20]
 8005d78:	4313      	orrs	r3, r2
 8005d7a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d80:	2b04      	cmp	r3, #4
 8005d82:	d107      	bne.n	8005d94 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d8c:	4313      	orrs	r3, r2
 8005d8e:	697a      	ldr	r2, [r7, #20]
 8005d90:	4313      	orrs	r3, r2
 8005d92:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	697a      	ldr	r2, [r7, #20]
 8005d9a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	695b      	ldr	r3, [r3, #20]
 8005da2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005da4:	697b      	ldr	r3, [r7, #20]
 8005da6:	f023 0307 	bic.w	r3, r3, #7
 8005daa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005db0:	697a      	ldr	r2, [r7, #20]
 8005db2:	4313      	orrs	r3, r2
 8005db4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dba:	2b04      	cmp	r3, #4
 8005dbc:	d117      	bne.n	8005dee <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dc2:	697a      	ldr	r2, [r7, #20]
 8005dc4:	4313      	orrs	r3, r2
 8005dc6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d00e      	beq.n	8005dee <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005dd0:	6878      	ldr	r0, [r7, #4]
 8005dd2:	f000 fb01 	bl	80063d8 <DMA_CheckFifoParam>
 8005dd6:	4603      	mov	r3, r0
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d008      	beq.n	8005dee <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2240      	movs	r2, #64	; 0x40
 8005de0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2201      	movs	r2, #1
 8005de6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005dea:	2301      	movs	r3, #1
 8005dec:	e016      	b.n	8005e1c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	697a      	ldr	r2, [r7, #20]
 8005df4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005df6:	6878      	ldr	r0, [r7, #4]
 8005df8:	f000 fab8 	bl	800636c <DMA_CalcBaseAndBitshift>
 8005dfc:	4603      	mov	r3, r0
 8005dfe:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e04:	223f      	movs	r2, #63	; 0x3f
 8005e06:	409a      	lsls	r2, r3
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2200      	movs	r2, #0
 8005e10:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2201      	movs	r2, #1
 8005e16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005e1a:	2300      	movs	r3, #0
}
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	3718      	adds	r7, #24
 8005e20:	46bd      	mov	sp, r7
 8005e22:	bd80      	pop	{r7, pc}
 8005e24:	f010803f 	.word	0xf010803f

08005e28 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b086      	sub	sp, #24
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	60f8      	str	r0, [r7, #12]
 8005e30:	60b9      	str	r1, [r7, #8]
 8005e32:	607a      	str	r2, [r7, #4]
 8005e34:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005e36:	2300      	movs	r3, #0
 8005e38:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e3e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005e46:	2b01      	cmp	r3, #1
 8005e48:	d101      	bne.n	8005e4e <HAL_DMA_Start_IT+0x26>
 8005e4a:	2302      	movs	r3, #2
 8005e4c:	e040      	b.n	8005ed0 <HAL_DMA_Start_IT+0xa8>
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	2201      	movs	r2, #1
 8005e52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005e5c:	b2db      	uxtb	r3, r3
 8005e5e:	2b01      	cmp	r3, #1
 8005e60:	d12f      	bne.n	8005ec2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	2202      	movs	r2, #2
 8005e66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	687a      	ldr	r2, [r7, #4]
 8005e74:	68b9      	ldr	r1, [r7, #8]
 8005e76:	68f8      	ldr	r0, [r7, #12]
 8005e78:	f000 fa4a 	bl	8006310 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e80:	223f      	movs	r2, #63	; 0x3f
 8005e82:	409a      	lsls	r2, r3
 8005e84:	693b      	ldr	r3, [r7, #16]
 8005e86:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	681a      	ldr	r2, [r3, #0]
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f042 0216 	orr.w	r2, r2, #22
 8005e96:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d007      	beq.n	8005eb0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	681a      	ldr	r2, [r3, #0]
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f042 0208 	orr.w	r2, r2, #8
 8005eae:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	681a      	ldr	r2, [r3, #0]
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f042 0201 	orr.w	r2, r2, #1
 8005ebe:	601a      	str	r2, [r3, #0]
 8005ec0:	e005      	b.n	8005ece <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005eca:	2302      	movs	r3, #2
 8005ecc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005ece:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	3718      	adds	r7, #24
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	bd80      	pop	{r7, pc}

08005ed8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b084      	sub	sp, #16
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ee4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005ee6:	f7ff fb4d 	bl	8005584 <HAL_GetTick>
 8005eea:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005ef2:	b2db      	uxtb	r3, r3
 8005ef4:	2b02      	cmp	r3, #2
 8005ef6:	d008      	beq.n	8005f0a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2280      	movs	r2, #128	; 0x80
 8005efc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2200      	movs	r2, #0
 8005f02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005f06:	2301      	movs	r3, #1
 8005f08:	e052      	b.n	8005fb0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	681a      	ldr	r2, [r3, #0]
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f022 0216 	bic.w	r2, r2, #22
 8005f18:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	695a      	ldr	r2, [r3, #20]
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005f28:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d103      	bne.n	8005f3a <HAL_DMA_Abort+0x62>
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d007      	beq.n	8005f4a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	681a      	ldr	r2, [r3, #0]
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f022 0208 	bic.w	r2, r2, #8
 8005f48:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	681a      	ldr	r2, [r3, #0]
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f022 0201 	bic.w	r2, r2, #1
 8005f58:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005f5a:	e013      	b.n	8005f84 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005f5c:	f7ff fb12 	bl	8005584 <HAL_GetTick>
 8005f60:	4602      	mov	r2, r0
 8005f62:	68bb      	ldr	r3, [r7, #8]
 8005f64:	1ad3      	subs	r3, r2, r3
 8005f66:	2b05      	cmp	r3, #5
 8005f68:	d90c      	bls.n	8005f84 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2220      	movs	r2, #32
 8005f6e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2203      	movs	r2, #3
 8005f74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8005f80:	2303      	movs	r3, #3
 8005f82:	e015      	b.n	8005fb0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f003 0301 	and.w	r3, r3, #1
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d1e4      	bne.n	8005f5c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f96:	223f      	movs	r2, #63	; 0x3f
 8005f98:	409a      	lsls	r2, r3
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2201      	movs	r2, #1
 8005fa2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2200      	movs	r2, #0
 8005faa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8005fae:	2300      	movs	r3, #0
}
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	3710      	adds	r7, #16
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	bd80      	pop	{r7, pc}

08005fb8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005fb8:	b480      	push	{r7}
 8005fba:	b083      	sub	sp, #12
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005fc6:	b2db      	uxtb	r3, r3
 8005fc8:	2b02      	cmp	r3, #2
 8005fca:	d004      	beq.n	8005fd6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2280      	movs	r2, #128	; 0x80
 8005fd0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	e00c      	b.n	8005ff0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2205      	movs	r2, #5
 8005fda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	681a      	ldr	r2, [r3, #0]
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f022 0201 	bic.w	r2, r2, #1
 8005fec:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005fee:	2300      	movs	r3, #0
}
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	370c      	adds	r7, #12
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffa:	4770      	bx	lr

08005ffc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b086      	sub	sp, #24
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8006004:	2300      	movs	r3, #0
 8006006:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006008:	4b8e      	ldr	r3, [pc, #568]	; (8006244 <HAL_DMA_IRQHandler+0x248>)
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	4a8e      	ldr	r2, [pc, #568]	; (8006248 <HAL_DMA_IRQHandler+0x24c>)
 800600e:	fba2 2303 	umull	r2, r3, r2, r3
 8006012:	0a9b      	lsrs	r3, r3, #10
 8006014:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800601a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800601c:	693b      	ldr	r3, [r7, #16]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006026:	2208      	movs	r2, #8
 8006028:	409a      	lsls	r2, r3
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	4013      	ands	r3, r2
 800602e:	2b00      	cmp	r3, #0
 8006030:	d01a      	beq.n	8006068 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f003 0304 	and.w	r3, r3, #4
 800603c:	2b00      	cmp	r3, #0
 800603e:	d013      	beq.n	8006068 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	681a      	ldr	r2, [r3, #0]
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f022 0204 	bic.w	r2, r2, #4
 800604e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006054:	2208      	movs	r2, #8
 8006056:	409a      	lsls	r2, r3
 8006058:	693b      	ldr	r3, [r7, #16]
 800605a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006060:	f043 0201 	orr.w	r2, r3, #1
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800606c:	2201      	movs	r2, #1
 800606e:	409a      	lsls	r2, r3
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	4013      	ands	r3, r2
 8006074:	2b00      	cmp	r3, #0
 8006076:	d012      	beq.n	800609e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	695b      	ldr	r3, [r3, #20]
 800607e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006082:	2b00      	cmp	r3, #0
 8006084:	d00b      	beq.n	800609e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800608a:	2201      	movs	r2, #1
 800608c:	409a      	lsls	r2, r3
 800608e:	693b      	ldr	r3, [r7, #16]
 8006090:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006096:	f043 0202 	orr.w	r2, r3, #2
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060a2:	2204      	movs	r2, #4
 80060a4:	409a      	lsls	r2, r3
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	4013      	ands	r3, r2
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d012      	beq.n	80060d4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f003 0302 	and.w	r3, r3, #2
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d00b      	beq.n	80060d4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060c0:	2204      	movs	r2, #4
 80060c2:	409a      	lsls	r2, r3
 80060c4:	693b      	ldr	r3, [r7, #16]
 80060c6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060cc:	f043 0204 	orr.w	r2, r3, #4
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060d8:	2210      	movs	r2, #16
 80060da:	409a      	lsls	r2, r3
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	4013      	ands	r3, r2
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d043      	beq.n	800616c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f003 0308 	and.w	r3, r3, #8
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d03c      	beq.n	800616c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060f6:	2210      	movs	r2, #16
 80060f8:	409a      	lsls	r2, r3
 80060fa:	693b      	ldr	r3, [r7, #16]
 80060fc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006108:	2b00      	cmp	r3, #0
 800610a:	d018      	beq.n	800613e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006116:	2b00      	cmp	r3, #0
 8006118:	d108      	bne.n	800612c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800611e:	2b00      	cmp	r3, #0
 8006120:	d024      	beq.n	800616c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006126:	6878      	ldr	r0, [r7, #4]
 8006128:	4798      	blx	r3
 800612a:	e01f      	b.n	800616c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006130:	2b00      	cmp	r3, #0
 8006132:	d01b      	beq.n	800616c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006138:	6878      	ldr	r0, [r7, #4]
 800613a:	4798      	blx	r3
 800613c:	e016      	b.n	800616c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006148:	2b00      	cmp	r3, #0
 800614a:	d107      	bne.n	800615c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	681a      	ldr	r2, [r3, #0]
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f022 0208 	bic.w	r2, r2, #8
 800615a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006160:	2b00      	cmp	r3, #0
 8006162:	d003      	beq.n	800616c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006168:	6878      	ldr	r0, [r7, #4]
 800616a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006170:	2220      	movs	r2, #32
 8006172:	409a      	lsls	r2, r3
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	4013      	ands	r3, r2
 8006178:	2b00      	cmp	r3, #0
 800617a:	f000 808f 	beq.w	800629c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f003 0310 	and.w	r3, r3, #16
 8006188:	2b00      	cmp	r3, #0
 800618a:	f000 8087 	beq.w	800629c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006192:	2220      	movs	r2, #32
 8006194:	409a      	lsls	r2, r3
 8006196:	693b      	ldr	r3, [r7, #16]
 8006198:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80061a0:	b2db      	uxtb	r3, r3
 80061a2:	2b05      	cmp	r3, #5
 80061a4:	d136      	bne.n	8006214 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	681a      	ldr	r2, [r3, #0]
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f022 0216 	bic.w	r2, r2, #22
 80061b4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	695a      	ldr	r2, [r3, #20]
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80061c4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d103      	bne.n	80061d6 <HAL_DMA_IRQHandler+0x1da>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d007      	beq.n	80061e6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	681a      	ldr	r2, [r3, #0]
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f022 0208 	bic.w	r2, r2, #8
 80061e4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061ea:	223f      	movs	r2, #63	; 0x3f
 80061ec:	409a      	lsls	r2, r3
 80061ee:	693b      	ldr	r3, [r7, #16]
 80061f0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2201      	movs	r2, #1
 80061f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2200      	movs	r2, #0
 80061fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006206:	2b00      	cmp	r3, #0
 8006208:	d07e      	beq.n	8006308 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800620e:	6878      	ldr	r0, [r7, #4]
 8006210:	4798      	blx	r3
        }
        return;
 8006212:	e079      	b.n	8006308 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800621e:	2b00      	cmp	r3, #0
 8006220:	d01d      	beq.n	800625e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800622c:	2b00      	cmp	r3, #0
 800622e:	d10d      	bne.n	800624c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006234:	2b00      	cmp	r3, #0
 8006236:	d031      	beq.n	800629c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800623c:	6878      	ldr	r0, [r7, #4]
 800623e:	4798      	blx	r3
 8006240:	e02c      	b.n	800629c <HAL_DMA_IRQHandler+0x2a0>
 8006242:	bf00      	nop
 8006244:	2000000c 	.word	0x2000000c
 8006248:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006250:	2b00      	cmp	r3, #0
 8006252:	d023      	beq.n	800629c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006258:	6878      	ldr	r0, [r7, #4]
 800625a:	4798      	blx	r3
 800625c:	e01e      	b.n	800629c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006268:	2b00      	cmp	r3, #0
 800626a:	d10f      	bne.n	800628c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	681a      	ldr	r2, [r3, #0]
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f022 0210 	bic.w	r2, r2, #16
 800627a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2201      	movs	r2, #1
 8006280:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2200      	movs	r2, #0
 8006288:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006290:	2b00      	cmp	r3, #0
 8006292:	d003      	beq.n	800629c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006298:	6878      	ldr	r0, [r7, #4]
 800629a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d032      	beq.n	800630a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062a8:	f003 0301 	and.w	r3, r3, #1
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d022      	beq.n	80062f6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2205      	movs	r2, #5
 80062b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	681a      	ldr	r2, [r3, #0]
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f022 0201 	bic.w	r2, r2, #1
 80062c6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	3301      	adds	r3, #1
 80062cc:	60bb      	str	r3, [r7, #8]
 80062ce:	697a      	ldr	r2, [r7, #20]
 80062d0:	429a      	cmp	r2, r3
 80062d2:	d307      	bcc.n	80062e4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f003 0301 	and.w	r3, r3, #1
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d1f2      	bne.n	80062c8 <HAL_DMA_IRQHandler+0x2cc>
 80062e2:	e000      	b.n	80062e6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80062e4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2201      	movs	r2, #1
 80062ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	2200      	movs	r2, #0
 80062f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d005      	beq.n	800630a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006302:	6878      	ldr	r0, [r7, #4]
 8006304:	4798      	blx	r3
 8006306:	e000      	b.n	800630a <HAL_DMA_IRQHandler+0x30e>
        return;
 8006308:	bf00      	nop
    }
  }
}
 800630a:	3718      	adds	r7, #24
 800630c:	46bd      	mov	sp, r7
 800630e:	bd80      	pop	{r7, pc}

08006310 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006310:	b480      	push	{r7}
 8006312:	b085      	sub	sp, #20
 8006314:	af00      	add	r7, sp, #0
 8006316:	60f8      	str	r0, [r7, #12]
 8006318:	60b9      	str	r1, [r7, #8]
 800631a:	607a      	str	r2, [r7, #4]
 800631c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	681a      	ldr	r2, [r3, #0]
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800632c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	683a      	ldr	r2, [r7, #0]
 8006334:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	689b      	ldr	r3, [r3, #8]
 800633a:	2b40      	cmp	r3, #64	; 0x40
 800633c:	d108      	bne.n	8006350 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	687a      	ldr	r2, [r7, #4]
 8006344:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	68ba      	ldr	r2, [r7, #8]
 800634c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800634e:	e007      	b.n	8006360 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	68ba      	ldr	r2, [r7, #8]
 8006356:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	687a      	ldr	r2, [r7, #4]
 800635e:	60da      	str	r2, [r3, #12]
}
 8006360:	bf00      	nop
 8006362:	3714      	adds	r7, #20
 8006364:	46bd      	mov	sp, r7
 8006366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636a:	4770      	bx	lr

0800636c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800636c:	b480      	push	{r7}
 800636e:	b085      	sub	sp, #20
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	b2db      	uxtb	r3, r3
 800637a:	3b10      	subs	r3, #16
 800637c:	4a14      	ldr	r2, [pc, #80]	; (80063d0 <DMA_CalcBaseAndBitshift+0x64>)
 800637e:	fba2 2303 	umull	r2, r3, r2, r3
 8006382:	091b      	lsrs	r3, r3, #4
 8006384:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006386:	4a13      	ldr	r2, [pc, #76]	; (80063d4 <DMA_CalcBaseAndBitshift+0x68>)
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	4413      	add	r3, r2
 800638c:	781b      	ldrb	r3, [r3, #0]
 800638e:	461a      	mov	r2, r3
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	2b03      	cmp	r3, #3
 8006398:	d909      	bls.n	80063ae <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80063a2:	f023 0303 	bic.w	r3, r3, #3
 80063a6:	1d1a      	adds	r2, r3, #4
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	659a      	str	r2, [r3, #88]	; 0x58
 80063ac:	e007      	b.n	80063be <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80063b6:	f023 0303 	bic.w	r3, r3, #3
 80063ba:	687a      	ldr	r2, [r7, #4]
 80063bc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80063c2:	4618      	mov	r0, r3
 80063c4:	3714      	adds	r7, #20
 80063c6:	46bd      	mov	sp, r7
 80063c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063cc:	4770      	bx	lr
 80063ce:	bf00      	nop
 80063d0:	aaaaaaab 	.word	0xaaaaaaab
 80063d4:	08014578 	.word	0x08014578

080063d8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80063d8:	b480      	push	{r7}
 80063da:	b085      	sub	sp, #20
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80063e0:	2300      	movs	r3, #0
 80063e2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063e8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	699b      	ldr	r3, [r3, #24]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d11f      	bne.n	8006432 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80063f2:	68bb      	ldr	r3, [r7, #8]
 80063f4:	2b03      	cmp	r3, #3
 80063f6:	d856      	bhi.n	80064a6 <DMA_CheckFifoParam+0xce>
 80063f8:	a201      	add	r2, pc, #4	; (adr r2, 8006400 <DMA_CheckFifoParam+0x28>)
 80063fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063fe:	bf00      	nop
 8006400:	08006411 	.word	0x08006411
 8006404:	08006423 	.word	0x08006423
 8006408:	08006411 	.word	0x08006411
 800640c:	080064a7 	.word	0x080064a7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006414:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006418:	2b00      	cmp	r3, #0
 800641a:	d046      	beq.n	80064aa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800641c:	2301      	movs	r3, #1
 800641e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006420:	e043      	b.n	80064aa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006426:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800642a:	d140      	bne.n	80064ae <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800642c:	2301      	movs	r3, #1
 800642e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006430:	e03d      	b.n	80064ae <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	699b      	ldr	r3, [r3, #24]
 8006436:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800643a:	d121      	bne.n	8006480 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800643c:	68bb      	ldr	r3, [r7, #8]
 800643e:	2b03      	cmp	r3, #3
 8006440:	d837      	bhi.n	80064b2 <DMA_CheckFifoParam+0xda>
 8006442:	a201      	add	r2, pc, #4	; (adr r2, 8006448 <DMA_CheckFifoParam+0x70>)
 8006444:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006448:	08006459 	.word	0x08006459
 800644c:	0800645f 	.word	0x0800645f
 8006450:	08006459 	.word	0x08006459
 8006454:	08006471 	.word	0x08006471
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006458:	2301      	movs	r3, #1
 800645a:	73fb      	strb	r3, [r7, #15]
      break;
 800645c:	e030      	b.n	80064c0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006462:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006466:	2b00      	cmp	r3, #0
 8006468:	d025      	beq.n	80064b6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800646a:	2301      	movs	r3, #1
 800646c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800646e:	e022      	b.n	80064b6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006474:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006478:	d11f      	bne.n	80064ba <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800647a:	2301      	movs	r3, #1
 800647c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800647e:	e01c      	b.n	80064ba <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006480:	68bb      	ldr	r3, [r7, #8]
 8006482:	2b02      	cmp	r3, #2
 8006484:	d903      	bls.n	800648e <DMA_CheckFifoParam+0xb6>
 8006486:	68bb      	ldr	r3, [r7, #8]
 8006488:	2b03      	cmp	r3, #3
 800648a:	d003      	beq.n	8006494 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800648c:	e018      	b.n	80064c0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800648e:	2301      	movs	r3, #1
 8006490:	73fb      	strb	r3, [r7, #15]
      break;
 8006492:	e015      	b.n	80064c0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006498:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800649c:	2b00      	cmp	r3, #0
 800649e:	d00e      	beq.n	80064be <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80064a0:	2301      	movs	r3, #1
 80064a2:	73fb      	strb	r3, [r7, #15]
      break;
 80064a4:	e00b      	b.n	80064be <DMA_CheckFifoParam+0xe6>
      break;
 80064a6:	bf00      	nop
 80064a8:	e00a      	b.n	80064c0 <DMA_CheckFifoParam+0xe8>
      break;
 80064aa:	bf00      	nop
 80064ac:	e008      	b.n	80064c0 <DMA_CheckFifoParam+0xe8>
      break;
 80064ae:	bf00      	nop
 80064b0:	e006      	b.n	80064c0 <DMA_CheckFifoParam+0xe8>
      break;
 80064b2:	bf00      	nop
 80064b4:	e004      	b.n	80064c0 <DMA_CheckFifoParam+0xe8>
      break;
 80064b6:	bf00      	nop
 80064b8:	e002      	b.n	80064c0 <DMA_CheckFifoParam+0xe8>
      break;   
 80064ba:	bf00      	nop
 80064bc:	e000      	b.n	80064c0 <DMA_CheckFifoParam+0xe8>
      break;
 80064be:	bf00      	nop
    }
  } 
  
  return status; 
 80064c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80064c2:	4618      	mov	r0, r3
 80064c4:	3714      	adds	r7, #20
 80064c6:	46bd      	mov	sp, r7
 80064c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064cc:	4770      	bx	lr
 80064ce:	bf00      	nop

080064d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80064d0:	b480      	push	{r7}
 80064d2:	b089      	sub	sp, #36	; 0x24
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
 80064d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80064da:	2300      	movs	r3, #0
 80064dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80064de:	2300      	movs	r3, #0
 80064e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80064e2:	2300      	movs	r3, #0
 80064e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80064e6:	2300      	movs	r3, #0
 80064e8:	61fb      	str	r3, [r7, #28]
 80064ea:	e16b      	b.n	80067c4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80064ec:	2201      	movs	r2, #1
 80064ee:	69fb      	ldr	r3, [r7, #28]
 80064f0:	fa02 f303 	lsl.w	r3, r2, r3
 80064f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	697a      	ldr	r2, [r7, #20]
 80064fc:	4013      	ands	r3, r2
 80064fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006500:	693a      	ldr	r2, [r7, #16]
 8006502:	697b      	ldr	r3, [r7, #20]
 8006504:	429a      	cmp	r2, r3
 8006506:	f040 815a 	bne.w	80067be <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	685b      	ldr	r3, [r3, #4]
 800650e:	f003 0303 	and.w	r3, r3, #3
 8006512:	2b01      	cmp	r3, #1
 8006514:	d005      	beq.n	8006522 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	685b      	ldr	r3, [r3, #4]
 800651a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800651e:	2b02      	cmp	r3, #2
 8006520:	d130      	bne.n	8006584 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	689b      	ldr	r3, [r3, #8]
 8006526:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006528:	69fb      	ldr	r3, [r7, #28]
 800652a:	005b      	lsls	r3, r3, #1
 800652c:	2203      	movs	r2, #3
 800652e:	fa02 f303 	lsl.w	r3, r2, r3
 8006532:	43db      	mvns	r3, r3
 8006534:	69ba      	ldr	r2, [r7, #24]
 8006536:	4013      	ands	r3, r2
 8006538:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	68da      	ldr	r2, [r3, #12]
 800653e:	69fb      	ldr	r3, [r7, #28]
 8006540:	005b      	lsls	r3, r3, #1
 8006542:	fa02 f303 	lsl.w	r3, r2, r3
 8006546:	69ba      	ldr	r2, [r7, #24]
 8006548:	4313      	orrs	r3, r2
 800654a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	69ba      	ldr	r2, [r7, #24]
 8006550:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	685b      	ldr	r3, [r3, #4]
 8006556:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006558:	2201      	movs	r2, #1
 800655a:	69fb      	ldr	r3, [r7, #28]
 800655c:	fa02 f303 	lsl.w	r3, r2, r3
 8006560:	43db      	mvns	r3, r3
 8006562:	69ba      	ldr	r2, [r7, #24]
 8006564:	4013      	ands	r3, r2
 8006566:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	685b      	ldr	r3, [r3, #4]
 800656c:	091b      	lsrs	r3, r3, #4
 800656e:	f003 0201 	and.w	r2, r3, #1
 8006572:	69fb      	ldr	r3, [r7, #28]
 8006574:	fa02 f303 	lsl.w	r3, r2, r3
 8006578:	69ba      	ldr	r2, [r7, #24]
 800657a:	4313      	orrs	r3, r2
 800657c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	69ba      	ldr	r2, [r7, #24]
 8006582:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	685b      	ldr	r3, [r3, #4]
 8006588:	f003 0303 	and.w	r3, r3, #3
 800658c:	2b03      	cmp	r3, #3
 800658e:	d017      	beq.n	80065c0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	68db      	ldr	r3, [r3, #12]
 8006594:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006596:	69fb      	ldr	r3, [r7, #28]
 8006598:	005b      	lsls	r3, r3, #1
 800659a:	2203      	movs	r2, #3
 800659c:	fa02 f303 	lsl.w	r3, r2, r3
 80065a0:	43db      	mvns	r3, r3
 80065a2:	69ba      	ldr	r2, [r7, #24]
 80065a4:	4013      	ands	r3, r2
 80065a6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	689a      	ldr	r2, [r3, #8]
 80065ac:	69fb      	ldr	r3, [r7, #28]
 80065ae:	005b      	lsls	r3, r3, #1
 80065b0:	fa02 f303 	lsl.w	r3, r2, r3
 80065b4:	69ba      	ldr	r2, [r7, #24]
 80065b6:	4313      	orrs	r3, r2
 80065b8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	69ba      	ldr	r2, [r7, #24]
 80065be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	685b      	ldr	r3, [r3, #4]
 80065c4:	f003 0303 	and.w	r3, r3, #3
 80065c8:	2b02      	cmp	r3, #2
 80065ca:	d123      	bne.n	8006614 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80065cc:	69fb      	ldr	r3, [r7, #28]
 80065ce:	08da      	lsrs	r2, r3, #3
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	3208      	adds	r2, #8
 80065d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80065da:	69fb      	ldr	r3, [r7, #28]
 80065dc:	f003 0307 	and.w	r3, r3, #7
 80065e0:	009b      	lsls	r3, r3, #2
 80065e2:	220f      	movs	r2, #15
 80065e4:	fa02 f303 	lsl.w	r3, r2, r3
 80065e8:	43db      	mvns	r3, r3
 80065ea:	69ba      	ldr	r2, [r7, #24]
 80065ec:	4013      	ands	r3, r2
 80065ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	691a      	ldr	r2, [r3, #16]
 80065f4:	69fb      	ldr	r3, [r7, #28]
 80065f6:	f003 0307 	and.w	r3, r3, #7
 80065fa:	009b      	lsls	r3, r3, #2
 80065fc:	fa02 f303 	lsl.w	r3, r2, r3
 8006600:	69ba      	ldr	r2, [r7, #24]
 8006602:	4313      	orrs	r3, r2
 8006604:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006606:	69fb      	ldr	r3, [r7, #28]
 8006608:	08da      	lsrs	r2, r3, #3
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	3208      	adds	r2, #8
 800660e:	69b9      	ldr	r1, [r7, #24]
 8006610:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800661a:	69fb      	ldr	r3, [r7, #28]
 800661c:	005b      	lsls	r3, r3, #1
 800661e:	2203      	movs	r2, #3
 8006620:	fa02 f303 	lsl.w	r3, r2, r3
 8006624:	43db      	mvns	r3, r3
 8006626:	69ba      	ldr	r2, [r7, #24]
 8006628:	4013      	ands	r3, r2
 800662a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	685b      	ldr	r3, [r3, #4]
 8006630:	f003 0203 	and.w	r2, r3, #3
 8006634:	69fb      	ldr	r3, [r7, #28]
 8006636:	005b      	lsls	r3, r3, #1
 8006638:	fa02 f303 	lsl.w	r3, r2, r3
 800663c:	69ba      	ldr	r2, [r7, #24]
 800663e:	4313      	orrs	r3, r2
 8006640:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	69ba      	ldr	r2, [r7, #24]
 8006646:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	685b      	ldr	r3, [r3, #4]
 800664c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006650:	2b00      	cmp	r3, #0
 8006652:	f000 80b4 	beq.w	80067be <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006656:	2300      	movs	r3, #0
 8006658:	60fb      	str	r3, [r7, #12]
 800665a:	4b60      	ldr	r3, [pc, #384]	; (80067dc <HAL_GPIO_Init+0x30c>)
 800665c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800665e:	4a5f      	ldr	r2, [pc, #380]	; (80067dc <HAL_GPIO_Init+0x30c>)
 8006660:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006664:	6453      	str	r3, [r2, #68]	; 0x44
 8006666:	4b5d      	ldr	r3, [pc, #372]	; (80067dc <HAL_GPIO_Init+0x30c>)
 8006668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800666a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800666e:	60fb      	str	r3, [r7, #12]
 8006670:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006672:	4a5b      	ldr	r2, [pc, #364]	; (80067e0 <HAL_GPIO_Init+0x310>)
 8006674:	69fb      	ldr	r3, [r7, #28]
 8006676:	089b      	lsrs	r3, r3, #2
 8006678:	3302      	adds	r3, #2
 800667a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800667e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006680:	69fb      	ldr	r3, [r7, #28]
 8006682:	f003 0303 	and.w	r3, r3, #3
 8006686:	009b      	lsls	r3, r3, #2
 8006688:	220f      	movs	r2, #15
 800668a:	fa02 f303 	lsl.w	r3, r2, r3
 800668e:	43db      	mvns	r3, r3
 8006690:	69ba      	ldr	r2, [r7, #24]
 8006692:	4013      	ands	r3, r2
 8006694:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	4a52      	ldr	r2, [pc, #328]	; (80067e4 <HAL_GPIO_Init+0x314>)
 800669a:	4293      	cmp	r3, r2
 800669c:	d02b      	beq.n	80066f6 <HAL_GPIO_Init+0x226>
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	4a51      	ldr	r2, [pc, #324]	; (80067e8 <HAL_GPIO_Init+0x318>)
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d025      	beq.n	80066f2 <HAL_GPIO_Init+0x222>
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	4a50      	ldr	r2, [pc, #320]	; (80067ec <HAL_GPIO_Init+0x31c>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d01f      	beq.n	80066ee <HAL_GPIO_Init+0x21e>
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	4a4f      	ldr	r2, [pc, #316]	; (80067f0 <HAL_GPIO_Init+0x320>)
 80066b2:	4293      	cmp	r3, r2
 80066b4:	d019      	beq.n	80066ea <HAL_GPIO_Init+0x21a>
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	4a4e      	ldr	r2, [pc, #312]	; (80067f4 <HAL_GPIO_Init+0x324>)
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d013      	beq.n	80066e6 <HAL_GPIO_Init+0x216>
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	4a4d      	ldr	r2, [pc, #308]	; (80067f8 <HAL_GPIO_Init+0x328>)
 80066c2:	4293      	cmp	r3, r2
 80066c4:	d00d      	beq.n	80066e2 <HAL_GPIO_Init+0x212>
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	4a4c      	ldr	r2, [pc, #304]	; (80067fc <HAL_GPIO_Init+0x32c>)
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d007      	beq.n	80066de <HAL_GPIO_Init+0x20e>
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	4a4b      	ldr	r2, [pc, #300]	; (8006800 <HAL_GPIO_Init+0x330>)
 80066d2:	4293      	cmp	r3, r2
 80066d4:	d101      	bne.n	80066da <HAL_GPIO_Init+0x20a>
 80066d6:	2307      	movs	r3, #7
 80066d8:	e00e      	b.n	80066f8 <HAL_GPIO_Init+0x228>
 80066da:	2308      	movs	r3, #8
 80066dc:	e00c      	b.n	80066f8 <HAL_GPIO_Init+0x228>
 80066de:	2306      	movs	r3, #6
 80066e0:	e00a      	b.n	80066f8 <HAL_GPIO_Init+0x228>
 80066e2:	2305      	movs	r3, #5
 80066e4:	e008      	b.n	80066f8 <HAL_GPIO_Init+0x228>
 80066e6:	2304      	movs	r3, #4
 80066e8:	e006      	b.n	80066f8 <HAL_GPIO_Init+0x228>
 80066ea:	2303      	movs	r3, #3
 80066ec:	e004      	b.n	80066f8 <HAL_GPIO_Init+0x228>
 80066ee:	2302      	movs	r3, #2
 80066f0:	e002      	b.n	80066f8 <HAL_GPIO_Init+0x228>
 80066f2:	2301      	movs	r3, #1
 80066f4:	e000      	b.n	80066f8 <HAL_GPIO_Init+0x228>
 80066f6:	2300      	movs	r3, #0
 80066f8:	69fa      	ldr	r2, [r7, #28]
 80066fa:	f002 0203 	and.w	r2, r2, #3
 80066fe:	0092      	lsls	r2, r2, #2
 8006700:	4093      	lsls	r3, r2
 8006702:	69ba      	ldr	r2, [r7, #24]
 8006704:	4313      	orrs	r3, r2
 8006706:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006708:	4935      	ldr	r1, [pc, #212]	; (80067e0 <HAL_GPIO_Init+0x310>)
 800670a:	69fb      	ldr	r3, [r7, #28]
 800670c:	089b      	lsrs	r3, r3, #2
 800670e:	3302      	adds	r3, #2
 8006710:	69ba      	ldr	r2, [r7, #24]
 8006712:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006716:	4b3b      	ldr	r3, [pc, #236]	; (8006804 <HAL_GPIO_Init+0x334>)
 8006718:	689b      	ldr	r3, [r3, #8]
 800671a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800671c:	693b      	ldr	r3, [r7, #16]
 800671e:	43db      	mvns	r3, r3
 8006720:	69ba      	ldr	r2, [r7, #24]
 8006722:	4013      	ands	r3, r2
 8006724:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	685b      	ldr	r3, [r3, #4]
 800672a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800672e:	2b00      	cmp	r3, #0
 8006730:	d003      	beq.n	800673a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8006732:	69ba      	ldr	r2, [r7, #24]
 8006734:	693b      	ldr	r3, [r7, #16]
 8006736:	4313      	orrs	r3, r2
 8006738:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800673a:	4a32      	ldr	r2, [pc, #200]	; (8006804 <HAL_GPIO_Init+0x334>)
 800673c:	69bb      	ldr	r3, [r7, #24]
 800673e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006740:	4b30      	ldr	r3, [pc, #192]	; (8006804 <HAL_GPIO_Init+0x334>)
 8006742:	68db      	ldr	r3, [r3, #12]
 8006744:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006746:	693b      	ldr	r3, [r7, #16]
 8006748:	43db      	mvns	r3, r3
 800674a:	69ba      	ldr	r2, [r7, #24]
 800674c:	4013      	ands	r3, r2
 800674e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	685b      	ldr	r3, [r3, #4]
 8006754:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006758:	2b00      	cmp	r3, #0
 800675a:	d003      	beq.n	8006764 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800675c:	69ba      	ldr	r2, [r7, #24]
 800675e:	693b      	ldr	r3, [r7, #16]
 8006760:	4313      	orrs	r3, r2
 8006762:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006764:	4a27      	ldr	r2, [pc, #156]	; (8006804 <HAL_GPIO_Init+0x334>)
 8006766:	69bb      	ldr	r3, [r7, #24]
 8006768:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800676a:	4b26      	ldr	r3, [pc, #152]	; (8006804 <HAL_GPIO_Init+0x334>)
 800676c:	685b      	ldr	r3, [r3, #4]
 800676e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006770:	693b      	ldr	r3, [r7, #16]
 8006772:	43db      	mvns	r3, r3
 8006774:	69ba      	ldr	r2, [r7, #24]
 8006776:	4013      	ands	r3, r2
 8006778:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	685b      	ldr	r3, [r3, #4]
 800677e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006782:	2b00      	cmp	r3, #0
 8006784:	d003      	beq.n	800678e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8006786:	69ba      	ldr	r2, [r7, #24]
 8006788:	693b      	ldr	r3, [r7, #16]
 800678a:	4313      	orrs	r3, r2
 800678c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800678e:	4a1d      	ldr	r2, [pc, #116]	; (8006804 <HAL_GPIO_Init+0x334>)
 8006790:	69bb      	ldr	r3, [r7, #24]
 8006792:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006794:	4b1b      	ldr	r3, [pc, #108]	; (8006804 <HAL_GPIO_Init+0x334>)
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800679a:	693b      	ldr	r3, [r7, #16]
 800679c:	43db      	mvns	r3, r3
 800679e:	69ba      	ldr	r2, [r7, #24]
 80067a0:	4013      	ands	r3, r2
 80067a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	685b      	ldr	r3, [r3, #4]
 80067a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d003      	beq.n	80067b8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80067b0:	69ba      	ldr	r2, [r7, #24]
 80067b2:	693b      	ldr	r3, [r7, #16]
 80067b4:	4313      	orrs	r3, r2
 80067b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80067b8:	4a12      	ldr	r2, [pc, #72]	; (8006804 <HAL_GPIO_Init+0x334>)
 80067ba:	69bb      	ldr	r3, [r7, #24]
 80067bc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80067be:	69fb      	ldr	r3, [r7, #28]
 80067c0:	3301      	adds	r3, #1
 80067c2:	61fb      	str	r3, [r7, #28]
 80067c4:	69fb      	ldr	r3, [r7, #28]
 80067c6:	2b0f      	cmp	r3, #15
 80067c8:	f67f ae90 	bls.w	80064ec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80067cc:	bf00      	nop
 80067ce:	bf00      	nop
 80067d0:	3724      	adds	r7, #36	; 0x24
 80067d2:	46bd      	mov	sp, r7
 80067d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d8:	4770      	bx	lr
 80067da:	bf00      	nop
 80067dc:	40023800 	.word	0x40023800
 80067e0:	40013800 	.word	0x40013800
 80067e4:	40020000 	.word	0x40020000
 80067e8:	40020400 	.word	0x40020400
 80067ec:	40020800 	.word	0x40020800
 80067f0:	40020c00 	.word	0x40020c00
 80067f4:	40021000 	.word	0x40021000
 80067f8:	40021400 	.word	0x40021400
 80067fc:	40021800 	.word	0x40021800
 8006800:	40021c00 	.word	0x40021c00
 8006804:	40013c00 	.word	0x40013c00

08006808 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006808:	b480      	push	{r7}
 800680a:	b083      	sub	sp, #12
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
 8006810:	460b      	mov	r3, r1
 8006812:	807b      	strh	r3, [r7, #2]
 8006814:	4613      	mov	r3, r2
 8006816:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006818:	787b      	ldrb	r3, [r7, #1]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d003      	beq.n	8006826 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800681e:	887a      	ldrh	r2, [r7, #2]
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006824:	e003      	b.n	800682e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006826:	887b      	ldrh	r3, [r7, #2]
 8006828:	041a      	lsls	r2, r3, #16
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	619a      	str	r2, [r3, #24]
}
 800682e:	bf00      	nop
 8006830:	370c      	adds	r7, #12
 8006832:	46bd      	mov	sp, r7
 8006834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006838:	4770      	bx	lr

0800683a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800683a:	b480      	push	{r7}
 800683c:	b085      	sub	sp, #20
 800683e:	af00      	add	r7, sp, #0
 8006840:	6078      	str	r0, [r7, #4]
 8006842:	460b      	mov	r3, r1
 8006844:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	695b      	ldr	r3, [r3, #20]
 800684a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800684c:	887a      	ldrh	r2, [r7, #2]
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	4013      	ands	r3, r2
 8006852:	041a      	lsls	r2, r3, #16
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	43d9      	mvns	r1, r3
 8006858:	887b      	ldrh	r3, [r7, #2]
 800685a:	400b      	ands	r3, r1
 800685c:	431a      	orrs	r2, r3
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	619a      	str	r2, [r3, #24]
}
 8006862:	bf00      	nop
 8006864:	3714      	adds	r7, #20
 8006866:	46bd      	mov	sp, r7
 8006868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686c:	4770      	bx	lr
	...

08006870 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b082      	sub	sp, #8
 8006874:	af00      	add	r7, sp, #0
 8006876:	4603      	mov	r3, r0
 8006878:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800687a:	4b08      	ldr	r3, [pc, #32]	; (800689c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800687c:	695a      	ldr	r2, [r3, #20]
 800687e:	88fb      	ldrh	r3, [r7, #6]
 8006880:	4013      	ands	r3, r2
 8006882:	2b00      	cmp	r3, #0
 8006884:	d006      	beq.n	8006894 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006886:	4a05      	ldr	r2, [pc, #20]	; (800689c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006888:	88fb      	ldrh	r3, [r7, #6]
 800688a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800688c:	88fb      	ldrh	r3, [r7, #6]
 800688e:	4618      	mov	r0, r3
 8006890:	f7fb fcd2 	bl	8002238 <HAL_GPIO_EXTI_Callback>
  }
}
 8006894:	bf00      	nop
 8006896:	3708      	adds	r7, #8
 8006898:	46bd      	mov	sp, r7
 800689a:	bd80      	pop	{r7, pc}
 800689c:	40013c00 	.word	0x40013c00

080068a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b084      	sub	sp, #16
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d101      	bne.n	80068b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80068ae:	2301      	movs	r3, #1
 80068b0:	e12b      	b.n	8006b0a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068b8:	b2db      	uxtb	r3, r3
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d106      	bne.n	80068cc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	2200      	movs	r2, #0
 80068c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80068c6:	6878      	ldr	r0, [r7, #4]
 80068c8:	f7fd f928 	bl	8003b1c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2224      	movs	r2, #36	; 0x24
 80068d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	681a      	ldr	r2, [r3, #0]
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f022 0201 	bic.w	r2, r2, #1
 80068e2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	681a      	ldr	r2, [r3, #0]
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80068f2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	681a      	ldr	r2, [r3, #0]
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006902:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006904:	f001 fbfc 	bl	8008100 <HAL_RCC_GetPCLK1Freq>
 8006908:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	685b      	ldr	r3, [r3, #4]
 800690e:	4a81      	ldr	r2, [pc, #516]	; (8006b14 <HAL_I2C_Init+0x274>)
 8006910:	4293      	cmp	r3, r2
 8006912:	d807      	bhi.n	8006924 <HAL_I2C_Init+0x84>
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	4a80      	ldr	r2, [pc, #512]	; (8006b18 <HAL_I2C_Init+0x278>)
 8006918:	4293      	cmp	r3, r2
 800691a:	bf94      	ite	ls
 800691c:	2301      	movls	r3, #1
 800691e:	2300      	movhi	r3, #0
 8006920:	b2db      	uxtb	r3, r3
 8006922:	e006      	b.n	8006932 <HAL_I2C_Init+0x92>
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	4a7d      	ldr	r2, [pc, #500]	; (8006b1c <HAL_I2C_Init+0x27c>)
 8006928:	4293      	cmp	r3, r2
 800692a:	bf94      	ite	ls
 800692c:	2301      	movls	r3, #1
 800692e:	2300      	movhi	r3, #0
 8006930:	b2db      	uxtb	r3, r3
 8006932:	2b00      	cmp	r3, #0
 8006934:	d001      	beq.n	800693a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006936:	2301      	movs	r3, #1
 8006938:	e0e7      	b.n	8006b0a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	4a78      	ldr	r2, [pc, #480]	; (8006b20 <HAL_I2C_Init+0x280>)
 800693e:	fba2 2303 	umull	r2, r3, r2, r3
 8006942:	0c9b      	lsrs	r3, r3, #18
 8006944:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	685b      	ldr	r3, [r3, #4]
 800694c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	68ba      	ldr	r2, [r7, #8]
 8006956:	430a      	orrs	r2, r1
 8006958:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	6a1b      	ldr	r3, [r3, #32]
 8006960:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	685b      	ldr	r3, [r3, #4]
 8006968:	4a6a      	ldr	r2, [pc, #424]	; (8006b14 <HAL_I2C_Init+0x274>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d802      	bhi.n	8006974 <HAL_I2C_Init+0xd4>
 800696e:	68bb      	ldr	r3, [r7, #8]
 8006970:	3301      	adds	r3, #1
 8006972:	e009      	b.n	8006988 <HAL_I2C_Init+0xe8>
 8006974:	68bb      	ldr	r3, [r7, #8]
 8006976:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800697a:	fb02 f303 	mul.w	r3, r2, r3
 800697e:	4a69      	ldr	r2, [pc, #420]	; (8006b24 <HAL_I2C_Init+0x284>)
 8006980:	fba2 2303 	umull	r2, r3, r2, r3
 8006984:	099b      	lsrs	r3, r3, #6
 8006986:	3301      	adds	r3, #1
 8006988:	687a      	ldr	r2, [r7, #4]
 800698a:	6812      	ldr	r2, [r2, #0]
 800698c:	430b      	orrs	r3, r1
 800698e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	69db      	ldr	r3, [r3, #28]
 8006996:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800699a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	685b      	ldr	r3, [r3, #4]
 80069a2:	495c      	ldr	r1, [pc, #368]	; (8006b14 <HAL_I2C_Init+0x274>)
 80069a4:	428b      	cmp	r3, r1
 80069a6:	d819      	bhi.n	80069dc <HAL_I2C_Init+0x13c>
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	1e59      	subs	r1, r3, #1
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	685b      	ldr	r3, [r3, #4]
 80069b0:	005b      	lsls	r3, r3, #1
 80069b2:	fbb1 f3f3 	udiv	r3, r1, r3
 80069b6:	1c59      	adds	r1, r3, #1
 80069b8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80069bc:	400b      	ands	r3, r1
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d00a      	beq.n	80069d8 <HAL_I2C_Init+0x138>
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	1e59      	subs	r1, r3, #1
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	685b      	ldr	r3, [r3, #4]
 80069ca:	005b      	lsls	r3, r3, #1
 80069cc:	fbb1 f3f3 	udiv	r3, r1, r3
 80069d0:	3301      	adds	r3, #1
 80069d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80069d6:	e051      	b.n	8006a7c <HAL_I2C_Init+0x1dc>
 80069d8:	2304      	movs	r3, #4
 80069da:	e04f      	b.n	8006a7c <HAL_I2C_Init+0x1dc>
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	689b      	ldr	r3, [r3, #8]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d111      	bne.n	8006a08 <HAL_I2C_Init+0x168>
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	1e58      	subs	r0, r3, #1
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	6859      	ldr	r1, [r3, #4]
 80069ec:	460b      	mov	r3, r1
 80069ee:	005b      	lsls	r3, r3, #1
 80069f0:	440b      	add	r3, r1
 80069f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80069f6:	3301      	adds	r3, #1
 80069f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	bf0c      	ite	eq
 8006a00:	2301      	moveq	r3, #1
 8006a02:	2300      	movne	r3, #0
 8006a04:	b2db      	uxtb	r3, r3
 8006a06:	e012      	b.n	8006a2e <HAL_I2C_Init+0x18e>
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	1e58      	subs	r0, r3, #1
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	6859      	ldr	r1, [r3, #4]
 8006a10:	460b      	mov	r3, r1
 8006a12:	009b      	lsls	r3, r3, #2
 8006a14:	440b      	add	r3, r1
 8006a16:	0099      	lsls	r1, r3, #2
 8006a18:	440b      	add	r3, r1
 8006a1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8006a1e:	3301      	adds	r3, #1
 8006a20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	bf0c      	ite	eq
 8006a28:	2301      	moveq	r3, #1
 8006a2a:	2300      	movne	r3, #0
 8006a2c:	b2db      	uxtb	r3, r3
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d001      	beq.n	8006a36 <HAL_I2C_Init+0x196>
 8006a32:	2301      	movs	r3, #1
 8006a34:	e022      	b.n	8006a7c <HAL_I2C_Init+0x1dc>
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	689b      	ldr	r3, [r3, #8]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d10e      	bne.n	8006a5c <HAL_I2C_Init+0x1bc>
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	1e58      	subs	r0, r3, #1
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6859      	ldr	r1, [r3, #4]
 8006a46:	460b      	mov	r3, r1
 8006a48:	005b      	lsls	r3, r3, #1
 8006a4a:	440b      	add	r3, r1
 8006a4c:	fbb0 f3f3 	udiv	r3, r0, r3
 8006a50:	3301      	adds	r3, #1
 8006a52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a5a:	e00f      	b.n	8006a7c <HAL_I2C_Init+0x1dc>
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	1e58      	subs	r0, r3, #1
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	6859      	ldr	r1, [r3, #4]
 8006a64:	460b      	mov	r3, r1
 8006a66:	009b      	lsls	r3, r3, #2
 8006a68:	440b      	add	r3, r1
 8006a6a:	0099      	lsls	r1, r3, #2
 8006a6c:	440b      	add	r3, r1
 8006a6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006a72:	3301      	adds	r3, #1
 8006a74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a78:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006a7c:	6879      	ldr	r1, [r7, #4]
 8006a7e:	6809      	ldr	r1, [r1, #0]
 8006a80:	4313      	orrs	r3, r2
 8006a82:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	69da      	ldr	r2, [r3, #28]
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6a1b      	ldr	r3, [r3, #32]
 8006a96:	431a      	orrs	r2, r3
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	430a      	orrs	r2, r1
 8006a9e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	689b      	ldr	r3, [r3, #8]
 8006aa6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006aaa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006aae:	687a      	ldr	r2, [r7, #4]
 8006ab0:	6911      	ldr	r1, [r2, #16]
 8006ab2:	687a      	ldr	r2, [r7, #4]
 8006ab4:	68d2      	ldr	r2, [r2, #12]
 8006ab6:	4311      	orrs	r1, r2
 8006ab8:	687a      	ldr	r2, [r7, #4]
 8006aba:	6812      	ldr	r2, [r2, #0]
 8006abc:	430b      	orrs	r3, r1
 8006abe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	68db      	ldr	r3, [r3, #12]
 8006ac6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	695a      	ldr	r2, [r3, #20]
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	699b      	ldr	r3, [r3, #24]
 8006ad2:	431a      	orrs	r2, r3
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	430a      	orrs	r2, r1
 8006ada:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	681a      	ldr	r2, [r3, #0]
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f042 0201 	orr.w	r2, r2, #1
 8006aea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2200      	movs	r2, #0
 8006af0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	2220      	movs	r2, #32
 8006af6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	2200      	movs	r2, #0
 8006afe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2200      	movs	r2, #0
 8006b04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006b08:	2300      	movs	r3, #0
}
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	3710      	adds	r7, #16
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	bd80      	pop	{r7, pc}
 8006b12:	bf00      	nop
 8006b14:	000186a0 	.word	0x000186a0
 8006b18:	001e847f 	.word	0x001e847f
 8006b1c:	003d08ff 	.word	0x003d08ff
 8006b20:	431bde83 	.word	0x431bde83
 8006b24:	10624dd3 	.word	0x10624dd3

08006b28 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b088      	sub	sp, #32
 8006b2c:	af02      	add	r7, sp, #8
 8006b2e:	60f8      	str	r0, [r7, #12]
 8006b30:	4608      	mov	r0, r1
 8006b32:	4611      	mov	r1, r2
 8006b34:	461a      	mov	r2, r3
 8006b36:	4603      	mov	r3, r0
 8006b38:	817b      	strh	r3, [r7, #10]
 8006b3a:	460b      	mov	r3, r1
 8006b3c:	813b      	strh	r3, [r7, #8]
 8006b3e:	4613      	mov	r3, r2
 8006b40:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006b42:	f7fe fd1f 	bl	8005584 <HAL_GetTick>
 8006b46:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b4e:	b2db      	uxtb	r3, r3
 8006b50:	2b20      	cmp	r3, #32
 8006b52:	f040 80d9 	bne.w	8006d08 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006b56:	697b      	ldr	r3, [r7, #20]
 8006b58:	9300      	str	r3, [sp, #0]
 8006b5a:	2319      	movs	r3, #25
 8006b5c:	2201      	movs	r2, #1
 8006b5e:	496d      	ldr	r1, [pc, #436]	; (8006d14 <HAL_I2C_Mem_Write+0x1ec>)
 8006b60:	68f8      	ldr	r0, [r7, #12]
 8006b62:	f000 fc7f 	bl	8007464 <I2C_WaitOnFlagUntilTimeout>
 8006b66:	4603      	mov	r3, r0
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d001      	beq.n	8006b70 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8006b6c:	2302      	movs	r3, #2
 8006b6e:	e0cc      	b.n	8006d0a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b76:	2b01      	cmp	r3, #1
 8006b78:	d101      	bne.n	8006b7e <HAL_I2C_Mem_Write+0x56>
 8006b7a:	2302      	movs	r3, #2
 8006b7c:	e0c5      	b.n	8006d0a <HAL_I2C_Mem_Write+0x1e2>
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	2201      	movs	r2, #1
 8006b82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f003 0301 	and.w	r3, r3, #1
 8006b90:	2b01      	cmp	r3, #1
 8006b92:	d007      	beq.n	8006ba4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	681a      	ldr	r2, [r3, #0]
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f042 0201 	orr.w	r2, r2, #1
 8006ba2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	681a      	ldr	r2, [r3, #0]
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006bb2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	2221      	movs	r2, #33	; 0x21
 8006bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	2240      	movs	r2, #64	; 0x40
 8006bc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	6a3a      	ldr	r2, [r7, #32]
 8006bce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006bd4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bda:	b29a      	uxth	r2, r3
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	4a4d      	ldr	r2, [pc, #308]	; (8006d18 <HAL_I2C_Mem_Write+0x1f0>)
 8006be4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006be6:	88f8      	ldrh	r0, [r7, #6]
 8006be8:	893a      	ldrh	r2, [r7, #8]
 8006bea:	8979      	ldrh	r1, [r7, #10]
 8006bec:	697b      	ldr	r3, [r7, #20]
 8006bee:	9301      	str	r3, [sp, #4]
 8006bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bf2:	9300      	str	r3, [sp, #0]
 8006bf4:	4603      	mov	r3, r0
 8006bf6:	68f8      	ldr	r0, [r7, #12]
 8006bf8:	f000 fab6 	bl	8007168 <I2C_RequestMemoryWrite>
 8006bfc:	4603      	mov	r3, r0
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d052      	beq.n	8006ca8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8006c02:	2301      	movs	r3, #1
 8006c04:	e081      	b.n	8006d0a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006c06:	697a      	ldr	r2, [r7, #20]
 8006c08:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006c0a:	68f8      	ldr	r0, [r7, #12]
 8006c0c:	f000 fd00 	bl	8007610 <I2C_WaitOnTXEFlagUntilTimeout>
 8006c10:	4603      	mov	r3, r0
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d00d      	beq.n	8006c32 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c1a:	2b04      	cmp	r3, #4
 8006c1c:	d107      	bne.n	8006c2e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	681a      	ldr	r2, [r3, #0]
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c2c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006c2e:	2301      	movs	r3, #1
 8006c30:	e06b      	b.n	8006d0a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c36:	781a      	ldrb	r2, [r3, #0]
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c42:	1c5a      	adds	r2, r3, #1
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c4c:	3b01      	subs	r3, #1
 8006c4e:	b29a      	uxth	r2, r3
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c58:	b29b      	uxth	r3, r3
 8006c5a:	3b01      	subs	r3, #1
 8006c5c:	b29a      	uxth	r2, r3
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	695b      	ldr	r3, [r3, #20]
 8006c68:	f003 0304 	and.w	r3, r3, #4
 8006c6c:	2b04      	cmp	r3, #4
 8006c6e:	d11b      	bne.n	8006ca8 <HAL_I2C_Mem_Write+0x180>
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d017      	beq.n	8006ca8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c7c:	781a      	ldrb	r2, [r3, #0]
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c88:	1c5a      	adds	r2, r3, #1
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c92:	3b01      	subs	r3, #1
 8006c94:	b29a      	uxth	r2, r3
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c9e:	b29b      	uxth	r3, r3
 8006ca0:	3b01      	subs	r3, #1
 8006ca2:	b29a      	uxth	r2, r3
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d1aa      	bne.n	8006c06 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006cb0:	697a      	ldr	r2, [r7, #20]
 8006cb2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006cb4:	68f8      	ldr	r0, [r7, #12]
 8006cb6:	f000 fcec 	bl	8007692 <I2C_WaitOnBTFFlagUntilTimeout>
 8006cba:	4603      	mov	r3, r0
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d00d      	beq.n	8006cdc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cc4:	2b04      	cmp	r3, #4
 8006cc6:	d107      	bne.n	8006cd8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	681a      	ldr	r2, [r3, #0]
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006cd6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006cd8:	2301      	movs	r3, #1
 8006cda:	e016      	b.n	8006d0a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	681a      	ldr	r2, [r3, #0]
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006cea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	2220      	movs	r2, #32
 8006cf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	2200      	movs	r2, #0
 8006d00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006d04:	2300      	movs	r3, #0
 8006d06:	e000      	b.n	8006d0a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006d08:	2302      	movs	r3, #2
  }
}
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	3718      	adds	r7, #24
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	bd80      	pop	{r7, pc}
 8006d12:	bf00      	nop
 8006d14:	00100002 	.word	0x00100002
 8006d18:	ffff0000 	.word	0xffff0000

08006d1c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b08c      	sub	sp, #48	; 0x30
 8006d20:	af02      	add	r7, sp, #8
 8006d22:	60f8      	str	r0, [r7, #12]
 8006d24:	4608      	mov	r0, r1
 8006d26:	4611      	mov	r1, r2
 8006d28:	461a      	mov	r2, r3
 8006d2a:	4603      	mov	r3, r0
 8006d2c:	817b      	strh	r3, [r7, #10]
 8006d2e:	460b      	mov	r3, r1
 8006d30:	813b      	strh	r3, [r7, #8]
 8006d32:	4613      	mov	r3, r2
 8006d34:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006d36:	f7fe fc25 	bl	8005584 <HAL_GetTick>
 8006d3a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d42:	b2db      	uxtb	r3, r3
 8006d44:	2b20      	cmp	r3, #32
 8006d46:	f040 8208 	bne.w	800715a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d4c:	9300      	str	r3, [sp, #0]
 8006d4e:	2319      	movs	r3, #25
 8006d50:	2201      	movs	r2, #1
 8006d52:	497b      	ldr	r1, [pc, #492]	; (8006f40 <HAL_I2C_Mem_Read+0x224>)
 8006d54:	68f8      	ldr	r0, [r7, #12]
 8006d56:	f000 fb85 	bl	8007464 <I2C_WaitOnFlagUntilTimeout>
 8006d5a:	4603      	mov	r3, r0
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d001      	beq.n	8006d64 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8006d60:	2302      	movs	r3, #2
 8006d62:	e1fb      	b.n	800715c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d6a:	2b01      	cmp	r3, #1
 8006d6c:	d101      	bne.n	8006d72 <HAL_I2C_Mem_Read+0x56>
 8006d6e:	2302      	movs	r3, #2
 8006d70:	e1f4      	b.n	800715c <HAL_I2C_Mem_Read+0x440>
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	2201      	movs	r2, #1
 8006d76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f003 0301 	and.w	r3, r3, #1
 8006d84:	2b01      	cmp	r3, #1
 8006d86:	d007      	beq.n	8006d98 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	681a      	ldr	r2, [r3, #0]
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	f042 0201 	orr.w	r2, r2, #1
 8006d96:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	681a      	ldr	r2, [r3, #0]
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006da6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	2222      	movs	r2, #34	; 0x22
 8006dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	2240      	movs	r2, #64	; 0x40
 8006db4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	2200      	movs	r2, #0
 8006dbc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006dc2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8006dc8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006dce:	b29a      	uxth	r2, r3
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	4a5b      	ldr	r2, [pc, #364]	; (8006f44 <HAL_I2C_Mem_Read+0x228>)
 8006dd8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006dda:	88f8      	ldrh	r0, [r7, #6]
 8006ddc:	893a      	ldrh	r2, [r7, #8]
 8006dde:	8979      	ldrh	r1, [r7, #10]
 8006de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006de2:	9301      	str	r3, [sp, #4]
 8006de4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006de6:	9300      	str	r3, [sp, #0]
 8006de8:	4603      	mov	r3, r0
 8006dea:	68f8      	ldr	r0, [r7, #12]
 8006dec:	f000 fa52 	bl	8007294 <I2C_RequestMemoryRead>
 8006df0:	4603      	mov	r3, r0
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d001      	beq.n	8006dfa <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8006df6:	2301      	movs	r3, #1
 8006df8:	e1b0      	b.n	800715c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d113      	bne.n	8006e2a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006e02:	2300      	movs	r3, #0
 8006e04:	623b      	str	r3, [r7, #32]
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	695b      	ldr	r3, [r3, #20]
 8006e0c:	623b      	str	r3, [r7, #32]
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	699b      	ldr	r3, [r3, #24]
 8006e14:	623b      	str	r3, [r7, #32]
 8006e16:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	681a      	ldr	r2, [r3, #0]
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e26:	601a      	str	r2, [r3, #0]
 8006e28:	e184      	b.n	8007134 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e2e:	2b01      	cmp	r3, #1
 8006e30:	d11b      	bne.n	8006e6a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	681a      	ldr	r2, [r3, #0]
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e40:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006e42:	2300      	movs	r3, #0
 8006e44:	61fb      	str	r3, [r7, #28]
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	695b      	ldr	r3, [r3, #20]
 8006e4c:	61fb      	str	r3, [r7, #28]
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	699b      	ldr	r3, [r3, #24]
 8006e54:	61fb      	str	r3, [r7, #28]
 8006e56:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	681a      	ldr	r2, [r3, #0]
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e66:	601a      	str	r2, [r3, #0]
 8006e68:	e164      	b.n	8007134 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e6e:	2b02      	cmp	r3, #2
 8006e70:	d11b      	bne.n	8006eaa <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	681a      	ldr	r2, [r3, #0]
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e80:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	681a      	ldr	r2, [r3, #0]
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006e90:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006e92:	2300      	movs	r3, #0
 8006e94:	61bb      	str	r3, [r7, #24]
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	695b      	ldr	r3, [r3, #20]
 8006e9c:	61bb      	str	r3, [r7, #24]
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	699b      	ldr	r3, [r3, #24]
 8006ea4:	61bb      	str	r3, [r7, #24]
 8006ea6:	69bb      	ldr	r3, [r7, #24]
 8006ea8:	e144      	b.n	8007134 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006eaa:	2300      	movs	r3, #0
 8006eac:	617b      	str	r3, [r7, #20]
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	695b      	ldr	r3, [r3, #20]
 8006eb4:	617b      	str	r3, [r7, #20]
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	699b      	ldr	r3, [r3, #24]
 8006ebc:	617b      	str	r3, [r7, #20]
 8006ebe:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006ec0:	e138      	b.n	8007134 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ec6:	2b03      	cmp	r3, #3
 8006ec8:	f200 80f1 	bhi.w	80070ae <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ed0:	2b01      	cmp	r3, #1
 8006ed2:	d123      	bne.n	8006f1c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006ed4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ed6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006ed8:	68f8      	ldr	r0, [r7, #12]
 8006eda:	f000 fc1b 	bl	8007714 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006ede:	4603      	mov	r3, r0
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d001      	beq.n	8006ee8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006ee4:	2301      	movs	r3, #1
 8006ee6:	e139      	b.n	800715c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	691a      	ldr	r2, [r3, #16]
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ef2:	b2d2      	uxtb	r2, r2
 8006ef4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006efa:	1c5a      	adds	r2, r3, #1
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f04:	3b01      	subs	r3, #1
 8006f06:	b29a      	uxth	r2, r3
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f10:	b29b      	uxth	r3, r3
 8006f12:	3b01      	subs	r3, #1
 8006f14:	b29a      	uxth	r2, r3
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006f1a:	e10b      	b.n	8007134 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f20:	2b02      	cmp	r3, #2
 8006f22:	d14e      	bne.n	8006fc2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f26:	9300      	str	r3, [sp, #0]
 8006f28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	4906      	ldr	r1, [pc, #24]	; (8006f48 <HAL_I2C_Mem_Read+0x22c>)
 8006f2e:	68f8      	ldr	r0, [r7, #12]
 8006f30:	f000 fa98 	bl	8007464 <I2C_WaitOnFlagUntilTimeout>
 8006f34:	4603      	mov	r3, r0
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d008      	beq.n	8006f4c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8006f3a:	2301      	movs	r3, #1
 8006f3c:	e10e      	b.n	800715c <HAL_I2C_Mem_Read+0x440>
 8006f3e:	bf00      	nop
 8006f40:	00100002 	.word	0x00100002
 8006f44:	ffff0000 	.word	0xffff0000
 8006f48:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	681a      	ldr	r2, [r3, #0]
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006f5a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	691a      	ldr	r2, [r3, #16]
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f66:	b2d2      	uxtb	r2, r2
 8006f68:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f6e:	1c5a      	adds	r2, r3, #1
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f78:	3b01      	subs	r3, #1
 8006f7a:	b29a      	uxth	r2, r3
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f84:	b29b      	uxth	r3, r3
 8006f86:	3b01      	subs	r3, #1
 8006f88:	b29a      	uxth	r2, r3
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	691a      	ldr	r2, [r3, #16]
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f98:	b2d2      	uxtb	r2, r2
 8006f9a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fa0:	1c5a      	adds	r2, r3, #1
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006faa:	3b01      	subs	r3, #1
 8006fac:	b29a      	uxth	r2, r3
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fb6:	b29b      	uxth	r3, r3
 8006fb8:	3b01      	subs	r3, #1
 8006fba:	b29a      	uxth	r2, r3
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006fc0:	e0b8      	b.n	8007134 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fc4:	9300      	str	r3, [sp, #0]
 8006fc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fc8:	2200      	movs	r2, #0
 8006fca:	4966      	ldr	r1, [pc, #408]	; (8007164 <HAL_I2C_Mem_Read+0x448>)
 8006fcc:	68f8      	ldr	r0, [r7, #12]
 8006fce:	f000 fa49 	bl	8007464 <I2C_WaitOnFlagUntilTimeout>
 8006fd2:	4603      	mov	r3, r0
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d001      	beq.n	8006fdc <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006fd8:	2301      	movs	r3, #1
 8006fda:	e0bf      	b.n	800715c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	681a      	ldr	r2, [r3, #0]
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006fea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	691a      	ldr	r2, [r3, #16]
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ff6:	b2d2      	uxtb	r2, r2
 8006ff8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ffe:	1c5a      	adds	r2, r3, #1
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007008:	3b01      	subs	r3, #1
 800700a:	b29a      	uxth	r2, r3
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007014:	b29b      	uxth	r3, r3
 8007016:	3b01      	subs	r3, #1
 8007018:	b29a      	uxth	r2, r3
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800701e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007020:	9300      	str	r3, [sp, #0]
 8007022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007024:	2200      	movs	r2, #0
 8007026:	494f      	ldr	r1, [pc, #316]	; (8007164 <HAL_I2C_Mem_Read+0x448>)
 8007028:	68f8      	ldr	r0, [r7, #12]
 800702a:	f000 fa1b 	bl	8007464 <I2C_WaitOnFlagUntilTimeout>
 800702e:	4603      	mov	r3, r0
 8007030:	2b00      	cmp	r3, #0
 8007032:	d001      	beq.n	8007038 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8007034:	2301      	movs	r3, #1
 8007036:	e091      	b.n	800715c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	681a      	ldr	r2, [r3, #0]
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007046:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	691a      	ldr	r2, [r3, #16]
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007052:	b2d2      	uxtb	r2, r2
 8007054:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800705a:	1c5a      	adds	r2, r3, #1
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007064:	3b01      	subs	r3, #1
 8007066:	b29a      	uxth	r2, r3
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007070:	b29b      	uxth	r3, r3
 8007072:	3b01      	subs	r3, #1
 8007074:	b29a      	uxth	r2, r3
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	691a      	ldr	r2, [r3, #16]
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007084:	b2d2      	uxtb	r2, r2
 8007086:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800708c:	1c5a      	adds	r2, r3, #1
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007096:	3b01      	subs	r3, #1
 8007098:	b29a      	uxth	r2, r3
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070a2:	b29b      	uxth	r3, r3
 80070a4:	3b01      	subs	r3, #1
 80070a6:	b29a      	uxth	r2, r3
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80070ac:	e042      	b.n	8007134 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80070ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80070b0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80070b2:	68f8      	ldr	r0, [r7, #12]
 80070b4:	f000 fb2e 	bl	8007714 <I2C_WaitOnRXNEFlagUntilTimeout>
 80070b8:	4603      	mov	r3, r0
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d001      	beq.n	80070c2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80070be:	2301      	movs	r3, #1
 80070c0:	e04c      	b.n	800715c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	691a      	ldr	r2, [r3, #16]
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070cc:	b2d2      	uxtb	r2, r2
 80070ce:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070d4:	1c5a      	adds	r2, r3, #1
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80070de:	3b01      	subs	r3, #1
 80070e0:	b29a      	uxth	r2, r3
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070ea:	b29b      	uxth	r3, r3
 80070ec:	3b01      	subs	r3, #1
 80070ee:	b29a      	uxth	r2, r3
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	695b      	ldr	r3, [r3, #20]
 80070fa:	f003 0304 	and.w	r3, r3, #4
 80070fe:	2b04      	cmp	r3, #4
 8007100:	d118      	bne.n	8007134 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	691a      	ldr	r2, [r3, #16]
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800710c:	b2d2      	uxtb	r2, r2
 800710e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007114:	1c5a      	adds	r2, r3, #1
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800711e:	3b01      	subs	r3, #1
 8007120:	b29a      	uxth	r2, r3
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800712a:	b29b      	uxth	r3, r3
 800712c:	3b01      	subs	r3, #1
 800712e:	b29a      	uxth	r2, r3
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007138:	2b00      	cmp	r3, #0
 800713a:	f47f aec2 	bne.w	8006ec2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	2220      	movs	r2, #32
 8007142:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	2200      	movs	r2, #0
 800714a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	2200      	movs	r2, #0
 8007152:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007156:	2300      	movs	r3, #0
 8007158:	e000      	b.n	800715c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800715a:	2302      	movs	r3, #2
  }
}
 800715c:	4618      	mov	r0, r3
 800715e:	3728      	adds	r7, #40	; 0x28
 8007160:	46bd      	mov	sp, r7
 8007162:	bd80      	pop	{r7, pc}
 8007164:	00010004 	.word	0x00010004

08007168 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007168:	b580      	push	{r7, lr}
 800716a:	b088      	sub	sp, #32
 800716c:	af02      	add	r7, sp, #8
 800716e:	60f8      	str	r0, [r7, #12]
 8007170:	4608      	mov	r0, r1
 8007172:	4611      	mov	r1, r2
 8007174:	461a      	mov	r2, r3
 8007176:	4603      	mov	r3, r0
 8007178:	817b      	strh	r3, [r7, #10]
 800717a:	460b      	mov	r3, r1
 800717c:	813b      	strh	r3, [r7, #8]
 800717e:	4613      	mov	r3, r2
 8007180:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	681a      	ldr	r2, [r3, #0]
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007190:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007194:	9300      	str	r3, [sp, #0]
 8007196:	6a3b      	ldr	r3, [r7, #32]
 8007198:	2200      	movs	r2, #0
 800719a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800719e:	68f8      	ldr	r0, [r7, #12]
 80071a0:	f000 f960 	bl	8007464 <I2C_WaitOnFlagUntilTimeout>
 80071a4:	4603      	mov	r3, r0
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d00d      	beq.n	80071c6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80071b8:	d103      	bne.n	80071c2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80071c0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80071c2:	2303      	movs	r3, #3
 80071c4:	e05f      	b.n	8007286 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80071c6:	897b      	ldrh	r3, [r7, #10]
 80071c8:	b2db      	uxtb	r3, r3
 80071ca:	461a      	mov	r2, r3
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80071d4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80071d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071d8:	6a3a      	ldr	r2, [r7, #32]
 80071da:	492d      	ldr	r1, [pc, #180]	; (8007290 <I2C_RequestMemoryWrite+0x128>)
 80071dc:	68f8      	ldr	r0, [r7, #12]
 80071de:	f000 f998 	bl	8007512 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80071e2:	4603      	mov	r3, r0
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d001      	beq.n	80071ec <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80071e8:	2301      	movs	r3, #1
 80071ea:	e04c      	b.n	8007286 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80071ec:	2300      	movs	r3, #0
 80071ee:	617b      	str	r3, [r7, #20]
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	695b      	ldr	r3, [r3, #20]
 80071f6:	617b      	str	r3, [r7, #20]
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	699b      	ldr	r3, [r3, #24]
 80071fe:	617b      	str	r3, [r7, #20]
 8007200:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007202:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007204:	6a39      	ldr	r1, [r7, #32]
 8007206:	68f8      	ldr	r0, [r7, #12]
 8007208:	f000 fa02 	bl	8007610 <I2C_WaitOnTXEFlagUntilTimeout>
 800720c:	4603      	mov	r3, r0
 800720e:	2b00      	cmp	r3, #0
 8007210:	d00d      	beq.n	800722e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007216:	2b04      	cmp	r3, #4
 8007218:	d107      	bne.n	800722a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	681a      	ldr	r2, [r3, #0]
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007228:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800722a:	2301      	movs	r3, #1
 800722c:	e02b      	b.n	8007286 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800722e:	88fb      	ldrh	r3, [r7, #6]
 8007230:	2b01      	cmp	r3, #1
 8007232:	d105      	bne.n	8007240 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007234:	893b      	ldrh	r3, [r7, #8]
 8007236:	b2da      	uxtb	r2, r3
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	611a      	str	r2, [r3, #16]
 800723e:	e021      	b.n	8007284 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007240:	893b      	ldrh	r3, [r7, #8]
 8007242:	0a1b      	lsrs	r3, r3, #8
 8007244:	b29b      	uxth	r3, r3
 8007246:	b2da      	uxtb	r2, r3
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800724e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007250:	6a39      	ldr	r1, [r7, #32]
 8007252:	68f8      	ldr	r0, [r7, #12]
 8007254:	f000 f9dc 	bl	8007610 <I2C_WaitOnTXEFlagUntilTimeout>
 8007258:	4603      	mov	r3, r0
 800725a:	2b00      	cmp	r3, #0
 800725c:	d00d      	beq.n	800727a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007262:	2b04      	cmp	r3, #4
 8007264:	d107      	bne.n	8007276 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	681a      	ldr	r2, [r3, #0]
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007274:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007276:	2301      	movs	r3, #1
 8007278:	e005      	b.n	8007286 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800727a:	893b      	ldrh	r3, [r7, #8]
 800727c:	b2da      	uxtb	r2, r3
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8007284:	2300      	movs	r3, #0
}
 8007286:	4618      	mov	r0, r3
 8007288:	3718      	adds	r7, #24
 800728a:	46bd      	mov	sp, r7
 800728c:	bd80      	pop	{r7, pc}
 800728e:	bf00      	nop
 8007290:	00010002 	.word	0x00010002

08007294 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007294:	b580      	push	{r7, lr}
 8007296:	b088      	sub	sp, #32
 8007298:	af02      	add	r7, sp, #8
 800729a:	60f8      	str	r0, [r7, #12]
 800729c:	4608      	mov	r0, r1
 800729e:	4611      	mov	r1, r2
 80072a0:	461a      	mov	r2, r3
 80072a2:	4603      	mov	r3, r0
 80072a4:	817b      	strh	r3, [r7, #10]
 80072a6:	460b      	mov	r3, r1
 80072a8:	813b      	strh	r3, [r7, #8]
 80072aa:	4613      	mov	r3, r2
 80072ac:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	681a      	ldr	r2, [r3, #0]
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80072bc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	681a      	ldr	r2, [r3, #0]
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80072cc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80072ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072d0:	9300      	str	r3, [sp, #0]
 80072d2:	6a3b      	ldr	r3, [r7, #32]
 80072d4:	2200      	movs	r2, #0
 80072d6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80072da:	68f8      	ldr	r0, [r7, #12]
 80072dc:	f000 f8c2 	bl	8007464 <I2C_WaitOnFlagUntilTimeout>
 80072e0:	4603      	mov	r3, r0
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d00d      	beq.n	8007302 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80072f4:	d103      	bne.n	80072fe <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80072fc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80072fe:	2303      	movs	r3, #3
 8007300:	e0aa      	b.n	8007458 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007302:	897b      	ldrh	r3, [r7, #10]
 8007304:	b2db      	uxtb	r3, r3
 8007306:	461a      	mov	r2, r3
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007310:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007314:	6a3a      	ldr	r2, [r7, #32]
 8007316:	4952      	ldr	r1, [pc, #328]	; (8007460 <I2C_RequestMemoryRead+0x1cc>)
 8007318:	68f8      	ldr	r0, [r7, #12]
 800731a:	f000 f8fa 	bl	8007512 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800731e:	4603      	mov	r3, r0
 8007320:	2b00      	cmp	r3, #0
 8007322:	d001      	beq.n	8007328 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8007324:	2301      	movs	r3, #1
 8007326:	e097      	b.n	8007458 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007328:	2300      	movs	r3, #0
 800732a:	617b      	str	r3, [r7, #20]
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	695b      	ldr	r3, [r3, #20]
 8007332:	617b      	str	r3, [r7, #20]
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	699b      	ldr	r3, [r3, #24]
 800733a:	617b      	str	r3, [r7, #20]
 800733c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800733e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007340:	6a39      	ldr	r1, [r7, #32]
 8007342:	68f8      	ldr	r0, [r7, #12]
 8007344:	f000 f964 	bl	8007610 <I2C_WaitOnTXEFlagUntilTimeout>
 8007348:	4603      	mov	r3, r0
 800734a:	2b00      	cmp	r3, #0
 800734c:	d00d      	beq.n	800736a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007352:	2b04      	cmp	r3, #4
 8007354:	d107      	bne.n	8007366 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	681a      	ldr	r2, [r3, #0]
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007364:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007366:	2301      	movs	r3, #1
 8007368:	e076      	b.n	8007458 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800736a:	88fb      	ldrh	r3, [r7, #6]
 800736c:	2b01      	cmp	r3, #1
 800736e:	d105      	bne.n	800737c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007370:	893b      	ldrh	r3, [r7, #8]
 8007372:	b2da      	uxtb	r2, r3
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	611a      	str	r2, [r3, #16]
 800737a:	e021      	b.n	80073c0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800737c:	893b      	ldrh	r3, [r7, #8]
 800737e:	0a1b      	lsrs	r3, r3, #8
 8007380:	b29b      	uxth	r3, r3
 8007382:	b2da      	uxtb	r2, r3
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800738a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800738c:	6a39      	ldr	r1, [r7, #32]
 800738e:	68f8      	ldr	r0, [r7, #12]
 8007390:	f000 f93e 	bl	8007610 <I2C_WaitOnTXEFlagUntilTimeout>
 8007394:	4603      	mov	r3, r0
 8007396:	2b00      	cmp	r3, #0
 8007398:	d00d      	beq.n	80073b6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800739e:	2b04      	cmp	r3, #4
 80073a0:	d107      	bne.n	80073b2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	681a      	ldr	r2, [r3, #0]
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80073b0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80073b2:	2301      	movs	r3, #1
 80073b4:	e050      	b.n	8007458 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80073b6:	893b      	ldrh	r3, [r7, #8]
 80073b8:	b2da      	uxtb	r2, r3
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80073c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073c2:	6a39      	ldr	r1, [r7, #32]
 80073c4:	68f8      	ldr	r0, [r7, #12]
 80073c6:	f000 f923 	bl	8007610 <I2C_WaitOnTXEFlagUntilTimeout>
 80073ca:	4603      	mov	r3, r0
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d00d      	beq.n	80073ec <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073d4:	2b04      	cmp	r3, #4
 80073d6:	d107      	bne.n	80073e8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	681a      	ldr	r2, [r3, #0]
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80073e6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80073e8:	2301      	movs	r3, #1
 80073ea:	e035      	b.n	8007458 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	681a      	ldr	r2, [r3, #0]
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80073fa:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80073fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073fe:	9300      	str	r3, [sp, #0]
 8007400:	6a3b      	ldr	r3, [r7, #32]
 8007402:	2200      	movs	r2, #0
 8007404:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007408:	68f8      	ldr	r0, [r7, #12]
 800740a:	f000 f82b 	bl	8007464 <I2C_WaitOnFlagUntilTimeout>
 800740e:	4603      	mov	r3, r0
 8007410:	2b00      	cmp	r3, #0
 8007412:	d00d      	beq.n	8007430 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800741e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007422:	d103      	bne.n	800742c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	f44f 7200 	mov.w	r2, #512	; 0x200
 800742a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800742c:	2303      	movs	r3, #3
 800742e:	e013      	b.n	8007458 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007430:	897b      	ldrh	r3, [r7, #10]
 8007432:	b2db      	uxtb	r3, r3
 8007434:	f043 0301 	orr.w	r3, r3, #1
 8007438:	b2da      	uxtb	r2, r3
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007442:	6a3a      	ldr	r2, [r7, #32]
 8007444:	4906      	ldr	r1, [pc, #24]	; (8007460 <I2C_RequestMemoryRead+0x1cc>)
 8007446:	68f8      	ldr	r0, [r7, #12]
 8007448:	f000 f863 	bl	8007512 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800744c:	4603      	mov	r3, r0
 800744e:	2b00      	cmp	r3, #0
 8007450:	d001      	beq.n	8007456 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8007452:	2301      	movs	r3, #1
 8007454:	e000      	b.n	8007458 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8007456:	2300      	movs	r3, #0
}
 8007458:	4618      	mov	r0, r3
 800745a:	3718      	adds	r7, #24
 800745c:	46bd      	mov	sp, r7
 800745e:	bd80      	pop	{r7, pc}
 8007460:	00010002 	.word	0x00010002

08007464 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007464:	b580      	push	{r7, lr}
 8007466:	b084      	sub	sp, #16
 8007468:	af00      	add	r7, sp, #0
 800746a:	60f8      	str	r0, [r7, #12]
 800746c:	60b9      	str	r1, [r7, #8]
 800746e:	603b      	str	r3, [r7, #0]
 8007470:	4613      	mov	r3, r2
 8007472:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007474:	e025      	b.n	80074c2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	f1b3 3fff 	cmp.w	r3, #4294967295
 800747c:	d021      	beq.n	80074c2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800747e:	f7fe f881 	bl	8005584 <HAL_GetTick>
 8007482:	4602      	mov	r2, r0
 8007484:	69bb      	ldr	r3, [r7, #24]
 8007486:	1ad3      	subs	r3, r2, r3
 8007488:	683a      	ldr	r2, [r7, #0]
 800748a:	429a      	cmp	r2, r3
 800748c:	d302      	bcc.n	8007494 <I2C_WaitOnFlagUntilTimeout+0x30>
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d116      	bne.n	80074c2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	2200      	movs	r2, #0
 8007498:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	2220      	movs	r2, #32
 800749e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	2200      	movs	r2, #0
 80074a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074ae:	f043 0220 	orr.w	r2, r3, #32
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	2200      	movs	r2, #0
 80074ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80074be:	2301      	movs	r3, #1
 80074c0:	e023      	b.n	800750a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80074c2:	68bb      	ldr	r3, [r7, #8]
 80074c4:	0c1b      	lsrs	r3, r3, #16
 80074c6:	b2db      	uxtb	r3, r3
 80074c8:	2b01      	cmp	r3, #1
 80074ca:	d10d      	bne.n	80074e8 <I2C_WaitOnFlagUntilTimeout+0x84>
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	695b      	ldr	r3, [r3, #20]
 80074d2:	43da      	mvns	r2, r3
 80074d4:	68bb      	ldr	r3, [r7, #8]
 80074d6:	4013      	ands	r3, r2
 80074d8:	b29b      	uxth	r3, r3
 80074da:	2b00      	cmp	r3, #0
 80074dc:	bf0c      	ite	eq
 80074de:	2301      	moveq	r3, #1
 80074e0:	2300      	movne	r3, #0
 80074e2:	b2db      	uxtb	r3, r3
 80074e4:	461a      	mov	r2, r3
 80074e6:	e00c      	b.n	8007502 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	699b      	ldr	r3, [r3, #24]
 80074ee:	43da      	mvns	r2, r3
 80074f0:	68bb      	ldr	r3, [r7, #8]
 80074f2:	4013      	ands	r3, r2
 80074f4:	b29b      	uxth	r3, r3
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	bf0c      	ite	eq
 80074fa:	2301      	moveq	r3, #1
 80074fc:	2300      	movne	r3, #0
 80074fe:	b2db      	uxtb	r3, r3
 8007500:	461a      	mov	r2, r3
 8007502:	79fb      	ldrb	r3, [r7, #7]
 8007504:	429a      	cmp	r2, r3
 8007506:	d0b6      	beq.n	8007476 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007508:	2300      	movs	r3, #0
}
 800750a:	4618      	mov	r0, r3
 800750c:	3710      	adds	r7, #16
 800750e:	46bd      	mov	sp, r7
 8007510:	bd80      	pop	{r7, pc}

08007512 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007512:	b580      	push	{r7, lr}
 8007514:	b084      	sub	sp, #16
 8007516:	af00      	add	r7, sp, #0
 8007518:	60f8      	str	r0, [r7, #12]
 800751a:	60b9      	str	r1, [r7, #8]
 800751c:	607a      	str	r2, [r7, #4]
 800751e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007520:	e051      	b.n	80075c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	695b      	ldr	r3, [r3, #20]
 8007528:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800752c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007530:	d123      	bne.n	800757a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	681a      	ldr	r2, [r3, #0]
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007540:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800754a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	2200      	movs	r2, #0
 8007550:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	2220      	movs	r2, #32
 8007556:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	2200      	movs	r2, #0
 800755e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007566:	f043 0204 	orr.w	r2, r3, #4
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	2200      	movs	r2, #0
 8007572:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007576:	2301      	movs	r3, #1
 8007578:	e046      	b.n	8007608 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007580:	d021      	beq.n	80075c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007582:	f7fd ffff 	bl	8005584 <HAL_GetTick>
 8007586:	4602      	mov	r2, r0
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	1ad3      	subs	r3, r2, r3
 800758c:	687a      	ldr	r2, [r7, #4]
 800758e:	429a      	cmp	r2, r3
 8007590:	d302      	bcc.n	8007598 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d116      	bne.n	80075c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	2200      	movs	r2, #0
 800759c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	2220      	movs	r2, #32
 80075a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	2200      	movs	r2, #0
 80075aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075b2:	f043 0220 	orr.w	r2, r3, #32
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	2200      	movs	r2, #0
 80075be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80075c2:	2301      	movs	r3, #1
 80075c4:	e020      	b.n	8007608 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80075c6:	68bb      	ldr	r3, [r7, #8]
 80075c8:	0c1b      	lsrs	r3, r3, #16
 80075ca:	b2db      	uxtb	r3, r3
 80075cc:	2b01      	cmp	r3, #1
 80075ce:	d10c      	bne.n	80075ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	695b      	ldr	r3, [r3, #20]
 80075d6:	43da      	mvns	r2, r3
 80075d8:	68bb      	ldr	r3, [r7, #8]
 80075da:	4013      	ands	r3, r2
 80075dc:	b29b      	uxth	r3, r3
 80075de:	2b00      	cmp	r3, #0
 80075e0:	bf14      	ite	ne
 80075e2:	2301      	movne	r3, #1
 80075e4:	2300      	moveq	r3, #0
 80075e6:	b2db      	uxtb	r3, r3
 80075e8:	e00b      	b.n	8007602 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	699b      	ldr	r3, [r3, #24]
 80075f0:	43da      	mvns	r2, r3
 80075f2:	68bb      	ldr	r3, [r7, #8]
 80075f4:	4013      	ands	r3, r2
 80075f6:	b29b      	uxth	r3, r3
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	bf14      	ite	ne
 80075fc:	2301      	movne	r3, #1
 80075fe:	2300      	moveq	r3, #0
 8007600:	b2db      	uxtb	r3, r3
 8007602:	2b00      	cmp	r3, #0
 8007604:	d18d      	bne.n	8007522 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8007606:	2300      	movs	r3, #0
}
 8007608:	4618      	mov	r0, r3
 800760a:	3710      	adds	r7, #16
 800760c:	46bd      	mov	sp, r7
 800760e:	bd80      	pop	{r7, pc}

08007610 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007610:	b580      	push	{r7, lr}
 8007612:	b084      	sub	sp, #16
 8007614:	af00      	add	r7, sp, #0
 8007616:	60f8      	str	r0, [r7, #12]
 8007618:	60b9      	str	r1, [r7, #8]
 800761a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800761c:	e02d      	b.n	800767a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800761e:	68f8      	ldr	r0, [r7, #12]
 8007620:	f000 f8ce 	bl	80077c0 <I2C_IsAcknowledgeFailed>
 8007624:	4603      	mov	r3, r0
 8007626:	2b00      	cmp	r3, #0
 8007628:	d001      	beq.n	800762e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800762a:	2301      	movs	r3, #1
 800762c:	e02d      	b.n	800768a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800762e:	68bb      	ldr	r3, [r7, #8]
 8007630:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007634:	d021      	beq.n	800767a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007636:	f7fd ffa5 	bl	8005584 <HAL_GetTick>
 800763a:	4602      	mov	r2, r0
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	1ad3      	subs	r3, r2, r3
 8007640:	68ba      	ldr	r2, [r7, #8]
 8007642:	429a      	cmp	r2, r3
 8007644:	d302      	bcc.n	800764c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007646:	68bb      	ldr	r3, [r7, #8]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d116      	bne.n	800767a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	2200      	movs	r2, #0
 8007650:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	2220      	movs	r2, #32
 8007656:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	2200      	movs	r2, #0
 800765e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007666:	f043 0220 	orr.w	r2, r3, #32
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	2200      	movs	r2, #0
 8007672:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007676:	2301      	movs	r3, #1
 8007678:	e007      	b.n	800768a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	695b      	ldr	r3, [r3, #20]
 8007680:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007684:	2b80      	cmp	r3, #128	; 0x80
 8007686:	d1ca      	bne.n	800761e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007688:	2300      	movs	r3, #0
}
 800768a:	4618      	mov	r0, r3
 800768c:	3710      	adds	r7, #16
 800768e:	46bd      	mov	sp, r7
 8007690:	bd80      	pop	{r7, pc}

08007692 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007692:	b580      	push	{r7, lr}
 8007694:	b084      	sub	sp, #16
 8007696:	af00      	add	r7, sp, #0
 8007698:	60f8      	str	r0, [r7, #12]
 800769a:	60b9      	str	r1, [r7, #8]
 800769c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800769e:	e02d      	b.n	80076fc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80076a0:	68f8      	ldr	r0, [r7, #12]
 80076a2:	f000 f88d 	bl	80077c0 <I2C_IsAcknowledgeFailed>
 80076a6:	4603      	mov	r3, r0
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d001      	beq.n	80076b0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80076ac:	2301      	movs	r3, #1
 80076ae:	e02d      	b.n	800770c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80076b0:	68bb      	ldr	r3, [r7, #8]
 80076b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076b6:	d021      	beq.n	80076fc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80076b8:	f7fd ff64 	bl	8005584 <HAL_GetTick>
 80076bc:	4602      	mov	r2, r0
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	1ad3      	subs	r3, r2, r3
 80076c2:	68ba      	ldr	r2, [r7, #8]
 80076c4:	429a      	cmp	r2, r3
 80076c6:	d302      	bcc.n	80076ce <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80076c8:	68bb      	ldr	r3, [r7, #8]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d116      	bne.n	80076fc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	2200      	movs	r2, #0
 80076d2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	2220      	movs	r2, #32
 80076d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	2200      	movs	r2, #0
 80076e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076e8:	f043 0220 	orr.w	r2, r3, #32
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	2200      	movs	r2, #0
 80076f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80076f8:	2301      	movs	r3, #1
 80076fa:	e007      	b.n	800770c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	695b      	ldr	r3, [r3, #20]
 8007702:	f003 0304 	and.w	r3, r3, #4
 8007706:	2b04      	cmp	r3, #4
 8007708:	d1ca      	bne.n	80076a0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800770a:	2300      	movs	r3, #0
}
 800770c:	4618      	mov	r0, r3
 800770e:	3710      	adds	r7, #16
 8007710:	46bd      	mov	sp, r7
 8007712:	bd80      	pop	{r7, pc}

08007714 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007714:	b580      	push	{r7, lr}
 8007716:	b084      	sub	sp, #16
 8007718:	af00      	add	r7, sp, #0
 800771a:	60f8      	str	r0, [r7, #12]
 800771c:	60b9      	str	r1, [r7, #8]
 800771e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007720:	e042      	b.n	80077a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	695b      	ldr	r3, [r3, #20]
 8007728:	f003 0310 	and.w	r3, r3, #16
 800772c:	2b10      	cmp	r3, #16
 800772e:	d119      	bne.n	8007764 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	f06f 0210 	mvn.w	r2, #16
 8007738:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	2200      	movs	r2, #0
 800773e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	2220      	movs	r2, #32
 8007744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	2200      	movs	r2, #0
 800774c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	2200      	movs	r2, #0
 800775c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007760:	2301      	movs	r3, #1
 8007762:	e029      	b.n	80077b8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007764:	f7fd ff0e 	bl	8005584 <HAL_GetTick>
 8007768:	4602      	mov	r2, r0
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	1ad3      	subs	r3, r2, r3
 800776e:	68ba      	ldr	r2, [r7, #8]
 8007770:	429a      	cmp	r2, r3
 8007772:	d302      	bcc.n	800777a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007774:	68bb      	ldr	r3, [r7, #8]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d116      	bne.n	80077a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	2200      	movs	r2, #0
 800777e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	2220      	movs	r2, #32
 8007784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	2200      	movs	r2, #0
 800778c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007794:	f043 0220 	orr.w	r2, r3, #32
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	2200      	movs	r2, #0
 80077a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80077a4:	2301      	movs	r3, #1
 80077a6:	e007      	b.n	80077b8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	695b      	ldr	r3, [r3, #20]
 80077ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077b2:	2b40      	cmp	r3, #64	; 0x40
 80077b4:	d1b5      	bne.n	8007722 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80077b6:	2300      	movs	r3, #0
}
 80077b8:	4618      	mov	r0, r3
 80077ba:	3710      	adds	r7, #16
 80077bc:	46bd      	mov	sp, r7
 80077be:	bd80      	pop	{r7, pc}

080077c0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80077c0:	b480      	push	{r7}
 80077c2:	b083      	sub	sp, #12
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	695b      	ldr	r3, [r3, #20]
 80077ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80077d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80077d6:	d11b      	bne.n	8007810 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80077e0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	2200      	movs	r2, #0
 80077e6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2220      	movs	r2, #32
 80077ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	2200      	movs	r2, #0
 80077f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077fc:	f043 0204 	orr.w	r2, r3, #4
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2200      	movs	r2, #0
 8007808:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800780c:	2301      	movs	r3, #1
 800780e:	e000      	b.n	8007812 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007810:	2300      	movs	r3, #0
}
 8007812:	4618      	mov	r0, r3
 8007814:	370c      	adds	r7, #12
 8007816:	46bd      	mov	sp, r7
 8007818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781c:	4770      	bx	lr
	...

08007820 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007820:	b580      	push	{r7, lr}
 8007822:	b086      	sub	sp, #24
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2b00      	cmp	r3, #0
 800782c:	d101      	bne.n	8007832 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800782e:	2301      	movs	r3, #1
 8007830:	e267      	b.n	8007d02 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	f003 0301 	and.w	r3, r3, #1
 800783a:	2b00      	cmp	r3, #0
 800783c:	d075      	beq.n	800792a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800783e:	4b88      	ldr	r3, [pc, #544]	; (8007a60 <HAL_RCC_OscConfig+0x240>)
 8007840:	689b      	ldr	r3, [r3, #8]
 8007842:	f003 030c 	and.w	r3, r3, #12
 8007846:	2b04      	cmp	r3, #4
 8007848:	d00c      	beq.n	8007864 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800784a:	4b85      	ldr	r3, [pc, #532]	; (8007a60 <HAL_RCC_OscConfig+0x240>)
 800784c:	689b      	ldr	r3, [r3, #8]
 800784e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007852:	2b08      	cmp	r3, #8
 8007854:	d112      	bne.n	800787c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007856:	4b82      	ldr	r3, [pc, #520]	; (8007a60 <HAL_RCC_OscConfig+0x240>)
 8007858:	685b      	ldr	r3, [r3, #4]
 800785a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800785e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007862:	d10b      	bne.n	800787c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007864:	4b7e      	ldr	r3, [pc, #504]	; (8007a60 <HAL_RCC_OscConfig+0x240>)
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800786c:	2b00      	cmp	r3, #0
 800786e:	d05b      	beq.n	8007928 <HAL_RCC_OscConfig+0x108>
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	685b      	ldr	r3, [r3, #4]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d157      	bne.n	8007928 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007878:	2301      	movs	r3, #1
 800787a:	e242      	b.n	8007d02 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	685b      	ldr	r3, [r3, #4]
 8007880:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007884:	d106      	bne.n	8007894 <HAL_RCC_OscConfig+0x74>
 8007886:	4b76      	ldr	r3, [pc, #472]	; (8007a60 <HAL_RCC_OscConfig+0x240>)
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	4a75      	ldr	r2, [pc, #468]	; (8007a60 <HAL_RCC_OscConfig+0x240>)
 800788c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007890:	6013      	str	r3, [r2, #0]
 8007892:	e01d      	b.n	80078d0 <HAL_RCC_OscConfig+0xb0>
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	685b      	ldr	r3, [r3, #4]
 8007898:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800789c:	d10c      	bne.n	80078b8 <HAL_RCC_OscConfig+0x98>
 800789e:	4b70      	ldr	r3, [pc, #448]	; (8007a60 <HAL_RCC_OscConfig+0x240>)
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	4a6f      	ldr	r2, [pc, #444]	; (8007a60 <HAL_RCC_OscConfig+0x240>)
 80078a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80078a8:	6013      	str	r3, [r2, #0]
 80078aa:	4b6d      	ldr	r3, [pc, #436]	; (8007a60 <HAL_RCC_OscConfig+0x240>)
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	4a6c      	ldr	r2, [pc, #432]	; (8007a60 <HAL_RCC_OscConfig+0x240>)
 80078b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80078b4:	6013      	str	r3, [r2, #0]
 80078b6:	e00b      	b.n	80078d0 <HAL_RCC_OscConfig+0xb0>
 80078b8:	4b69      	ldr	r3, [pc, #420]	; (8007a60 <HAL_RCC_OscConfig+0x240>)
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	4a68      	ldr	r2, [pc, #416]	; (8007a60 <HAL_RCC_OscConfig+0x240>)
 80078be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80078c2:	6013      	str	r3, [r2, #0]
 80078c4:	4b66      	ldr	r3, [pc, #408]	; (8007a60 <HAL_RCC_OscConfig+0x240>)
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	4a65      	ldr	r2, [pc, #404]	; (8007a60 <HAL_RCC_OscConfig+0x240>)
 80078ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80078ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	685b      	ldr	r3, [r3, #4]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d013      	beq.n	8007900 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80078d8:	f7fd fe54 	bl	8005584 <HAL_GetTick>
 80078dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80078de:	e008      	b.n	80078f2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80078e0:	f7fd fe50 	bl	8005584 <HAL_GetTick>
 80078e4:	4602      	mov	r2, r0
 80078e6:	693b      	ldr	r3, [r7, #16]
 80078e8:	1ad3      	subs	r3, r2, r3
 80078ea:	2b64      	cmp	r3, #100	; 0x64
 80078ec:	d901      	bls.n	80078f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80078ee:	2303      	movs	r3, #3
 80078f0:	e207      	b.n	8007d02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80078f2:	4b5b      	ldr	r3, [pc, #364]	; (8007a60 <HAL_RCC_OscConfig+0x240>)
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d0f0      	beq.n	80078e0 <HAL_RCC_OscConfig+0xc0>
 80078fe:	e014      	b.n	800792a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007900:	f7fd fe40 	bl	8005584 <HAL_GetTick>
 8007904:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007906:	e008      	b.n	800791a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007908:	f7fd fe3c 	bl	8005584 <HAL_GetTick>
 800790c:	4602      	mov	r2, r0
 800790e:	693b      	ldr	r3, [r7, #16]
 8007910:	1ad3      	subs	r3, r2, r3
 8007912:	2b64      	cmp	r3, #100	; 0x64
 8007914:	d901      	bls.n	800791a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007916:	2303      	movs	r3, #3
 8007918:	e1f3      	b.n	8007d02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800791a:	4b51      	ldr	r3, [pc, #324]	; (8007a60 <HAL_RCC_OscConfig+0x240>)
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007922:	2b00      	cmp	r3, #0
 8007924:	d1f0      	bne.n	8007908 <HAL_RCC_OscConfig+0xe8>
 8007926:	e000      	b.n	800792a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007928:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	f003 0302 	and.w	r3, r3, #2
 8007932:	2b00      	cmp	r3, #0
 8007934:	d063      	beq.n	80079fe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007936:	4b4a      	ldr	r3, [pc, #296]	; (8007a60 <HAL_RCC_OscConfig+0x240>)
 8007938:	689b      	ldr	r3, [r3, #8]
 800793a:	f003 030c 	and.w	r3, r3, #12
 800793e:	2b00      	cmp	r3, #0
 8007940:	d00b      	beq.n	800795a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007942:	4b47      	ldr	r3, [pc, #284]	; (8007a60 <HAL_RCC_OscConfig+0x240>)
 8007944:	689b      	ldr	r3, [r3, #8]
 8007946:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800794a:	2b08      	cmp	r3, #8
 800794c:	d11c      	bne.n	8007988 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800794e:	4b44      	ldr	r3, [pc, #272]	; (8007a60 <HAL_RCC_OscConfig+0x240>)
 8007950:	685b      	ldr	r3, [r3, #4]
 8007952:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007956:	2b00      	cmp	r3, #0
 8007958:	d116      	bne.n	8007988 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800795a:	4b41      	ldr	r3, [pc, #260]	; (8007a60 <HAL_RCC_OscConfig+0x240>)
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	f003 0302 	and.w	r3, r3, #2
 8007962:	2b00      	cmp	r3, #0
 8007964:	d005      	beq.n	8007972 <HAL_RCC_OscConfig+0x152>
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	68db      	ldr	r3, [r3, #12]
 800796a:	2b01      	cmp	r3, #1
 800796c:	d001      	beq.n	8007972 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800796e:	2301      	movs	r3, #1
 8007970:	e1c7      	b.n	8007d02 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007972:	4b3b      	ldr	r3, [pc, #236]	; (8007a60 <HAL_RCC_OscConfig+0x240>)
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	691b      	ldr	r3, [r3, #16]
 800797e:	00db      	lsls	r3, r3, #3
 8007980:	4937      	ldr	r1, [pc, #220]	; (8007a60 <HAL_RCC_OscConfig+0x240>)
 8007982:	4313      	orrs	r3, r2
 8007984:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007986:	e03a      	b.n	80079fe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	68db      	ldr	r3, [r3, #12]
 800798c:	2b00      	cmp	r3, #0
 800798e:	d020      	beq.n	80079d2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007990:	4b34      	ldr	r3, [pc, #208]	; (8007a64 <HAL_RCC_OscConfig+0x244>)
 8007992:	2201      	movs	r2, #1
 8007994:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007996:	f7fd fdf5 	bl	8005584 <HAL_GetTick>
 800799a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800799c:	e008      	b.n	80079b0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800799e:	f7fd fdf1 	bl	8005584 <HAL_GetTick>
 80079a2:	4602      	mov	r2, r0
 80079a4:	693b      	ldr	r3, [r7, #16]
 80079a6:	1ad3      	subs	r3, r2, r3
 80079a8:	2b02      	cmp	r3, #2
 80079aa:	d901      	bls.n	80079b0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80079ac:	2303      	movs	r3, #3
 80079ae:	e1a8      	b.n	8007d02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80079b0:	4b2b      	ldr	r3, [pc, #172]	; (8007a60 <HAL_RCC_OscConfig+0x240>)
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	f003 0302 	and.w	r3, r3, #2
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d0f0      	beq.n	800799e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80079bc:	4b28      	ldr	r3, [pc, #160]	; (8007a60 <HAL_RCC_OscConfig+0x240>)
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	691b      	ldr	r3, [r3, #16]
 80079c8:	00db      	lsls	r3, r3, #3
 80079ca:	4925      	ldr	r1, [pc, #148]	; (8007a60 <HAL_RCC_OscConfig+0x240>)
 80079cc:	4313      	orrs	r3, r2
 80079ce:	600b      	str	r3, [r1, #0]
 80079d0:	e015      	b.n	80079fe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80079d2:	4b24      	ldr	r3, [pc, #144]	; (8007a64 <HAL_RCC_OscConfig+0x244>)
 80079d4:	2200      	movs	r2, #0
 80079d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079d8:	f7fd fdd4 	bl	8005584 <HAL_GetTick>
 80079dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80079de:	e008      	b.n	80079f2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80079e0:	f7fd fdd0 	bl	8005584 <HAL_GetTick>
 80079e4:	4602      	mov	r2, r0
 80079e6:	693b      	ldr	r3, [r7, #16]
 80079e8:	1ad3      	subs	r3, r2, r3
 80079ea:	2b02      	cmp	r3, #2
 80079ec:	d901      	bls.n	80079f2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80079ee:	2303      	movs	r3, #3
 80079f0:	e187      	b.n	8007d02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80079f2:	4b1b      	ldr	r3, [pc, #108]	; (8007a60 <HAL_RCC_OscConfig+0x240>)
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	f003 0302 	and.w	r3, r3, #2
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d1f0      	bne.n	80079e0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	f003 0308 	and.w	r3, r3, #8
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d036      	beq.n	8007a78 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	695b      	ldr	r3, [r3, #20]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d016      	beq.n	8007a40 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007a12:	4b15      	ldr	r3, [pc, #84]	; (8007a68 <HAL_RCC_OscConfig+0x248>)
 8007a14:	2201      	movs	r2, #1
 8007a16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a18:	f7fd fdb4 	bl	8005584 <HAL_GetTick>
 8007a1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007a1e:	e008      	b.n	8007a32 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007a20:	f7fd fdb0 	bl	8005584 <HAL_GetTick>
 8007a24:	4602      	mov	r2, r0
 8007a26:	693b      	ldr	r3, [r7, #16]
 8007a28:	1ad3      	subs	r3, r2, r3
 8007a2a:	2b02      	cmp	r3, #2
 8007a2c:	d901      	bls.n	8007a32 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007a2e:	2303      	movs	r3, #3
 8007a30:	e167      	b.n	8007d02 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007a32:	4b0b      	ldr	r3, [pc, #44]	; (8007a60 <HAL_RCC_OscConfig+0x240>)
 8007a34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a36:	f003 0302 	and.w	r3, r3, #2
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d0f0      	beq.n	8007a20 <HAL_RCC_OscConfig+0x200>
 8007a3e:	e01b      	b.n	8007a78 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007a40:	4b09      	ldr	r3, [pc, #36]	; (8007a68 <HAL_RCC_OscConfig+0x248>)
 8007a42:	2200      	movs	r2, #0
 8007a44:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007a46:	f7fd fd9d 	bl	8005584 <HAL_GetTick>
 8007a4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007a4c:	e00e      	b.n	8007a6c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007a4e:	f7fd fd99 	bl	8005584 <HAL_GetTick>
 8007a52:	4602      	mov	r2, r0
 8007a54:	693b      	ldr	r3, [r7, #16]
 8007a56:	1ad3      	subs	r3, r2, r3
 8007a58:	2b02      	cmp	r3, #2
 8007a5a:	d907      	bls.n	8007a6c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007a5c:	2303      	movs	r3, #3
 8007a5e:	e150      	b.n	8007d02 <HAL_RCC_OscConfig+0x4e2>
 8007a60:	40023800 	.word	0x40023800
 8007a64:	42470000 	.word	0x42470000
 8007a68:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007a6c:	4b88      	ldr	r3, [pc, #544]	; (8007c90 <HAL_RCC_OscConfig+0x470>)
 8007a6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a70:	f003 0302 	and.w	r3, r3, #2
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d1ea      	bne.n	8007a4e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	f003 0304 	and.w	r3, r3, #4
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	f000 8097 	beq.w	8007bb4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007a86:	2300      	movs	r3, #0
 8007a88:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007a8a:	4b81      	ldr	r3, [pc, #516]	; (8007c90 <HAL_RCC_OscConfig+0x470>)
 8007a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d10f      	bne.n	8007ab6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007a96:	2300      	movs	r3, #0
 8007a98:	60bb      	str	r3, [r7, #8]
 8007a9a:	4b7d      	ldr	r3, [pc, #500]	; (8007c90 <HAL_RCC_OscConfig+0x470>)
 8007a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a9e:	4a7c      	ldr	r2, [pc, #496]	; (8007c90 <HAL_RCC_OscConfig+0x470>)
 8007aa0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007aa4:	6413      	str	r3, [r2, #64]	; 0x40
 8007aa6:	4b7a      	ldr	r3, [pc, #488]	; (8007c90 <HAL_RCC_OscConfig+0x470>)
 8007aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007aae:	60bb      	str	r3, [r7, #8]
 8007ab0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007ab2:	2301      	movs	r3, #1
 8007ab4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007ab6:	4b77      	ldr	r3, [pc, #476]	; (8007c94 <HAL_RCC_OscConfig+0x474>)
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d118      	bne.n	8007af4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007ac2:	4b74      	ldr	r3, [pc, #464]	; (8007c94 <HAL_RCC_OscConfig+0x474>)
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	4a73      	ldr	r2, [pc, #460]	; (8007c94 <HAL_RCC_OscConfig+0x474>)
 8007ac8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007acc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007ace:	f7fd fd59 	bl	8005584 <HAL_GetTick>
 8007ad2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007ad4:	e008      	b.n	8007ae8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007ad6:	f7fd fd55 	bl	8005584 <HAL_GetTick>
 8007ada:	4602      	mov	r2, r0
 8007adc:	693b      	ldr	r3, [r7, #16]
 8007ade:	1ad3      	subs	r3, r2, r3
 8007ae0:	2b02      	cmp	r3, #2
 8007ae2:	d901      	bls.n	8007ae8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007ae4:	2303      	movs	r3, #3
 8007ae6:	e10c      	b.n	8007d02 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007ae8:	4b6a      	ldr	r3, [pc, #424]	; (8007c94 <HAL_RCC_OscConfig+0x474>)
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d0f0      	beq.n	8007ad6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	689b      	ldr	r3, [r3, #8]
 8007af8:	2b01      	cmp	r3, #1
 8007afa:	d106      	bne.n	8007b0a <HAL_RCC_OscConfig+0x2ea>
 8007afc:	4b64      	ldr	r3, [pc, #400]	; (8007c90 <HAL_RCC_OscConfig+0x470>)
 8007afe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b00:	4a63      	ldr	r2, [pc, #396]	; (8007c90 <HAL_RCC_OscConfig+0x470>)
 8007b02:	f043 0301 	orr.w	r3, r3, #1
 8007b06:	6713      	str	r3, [r2, #112]	; 0x70
 8007b08:	e01c      	b.n	8007b44 <HAL_RCC_OscConfig+0x324>
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	689b      	ldr	r3, [r3, #8]
 8007b0e:	2b05      	cmp	r3, #5
 8007b10:	d10c      	bne.n	8007b2c <HAL_RCC_OscConfig+0x30c>
 8007b12:	4b5f      	ldr	r3, [pc, #380]	; (8007c90 <HAL_RCC_OscConfig+0x470>)
 8007b14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b16:	4a5e      	ldr	r2, [pc, #376]	; (8007c90 <HAL_RCC_OscConfig+0x470>)
 8007b18:	f043 0304 	orr.w	r3, r3, #4
 8007b1c:	6713      	str	r3, [r2, #112]	; 0x70
 8007b1e:	4b5c      	ldr	r3, [pc, #368]	; (8007c90 <HAL_RCC_OscConfig+0x470>)
 8007b20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b22:	4a5b      	ldr	r2, [pc, #364]	; (8007c90 <HAL_RCC_OscConfig+0x470>)
 8007b24:	f043 0301 	orr.w	r3, r3, #1
 8007b28:	6713      	str	r3, [r2, #112]	; 0x70
 8007b2a:	e00b      	b.n	8007b44 <HAL_RCC_OscConfig+0x324>
 8007b2c:	4b58      	ldr	r3, [pc, #352]	; (8007c90 <HAL_RCC_OscConfig+0x470>)
 8007b2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b30:	4a57      	ldr	r2, [pc, #348]	; (8007c90 <HAL_RCC_OscConfig+0x470>)
 8007b32:	f023 0301 	bic.w	r3, r3, #1
 8007b36:	6713      	str	r3, [r2, #112]	; 0x70
 8007b38:	4b55      	ldr	r3, [pc, #340]	; (8007c90 <HAL_RCC_OscConfig+0x470>)
 8007b3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b3c:	4a54      	ldr	r2, [pc, #336]	; (8007c90 <HAL_RCC_OscConfig+0x470>)
 8007b3e:	f023 0304 	bic.w	r3, r3, #4
 8007b42:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	689b      	ldr	r3, [r3, #8]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d015      	beq.n	8007b78 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b4c:	f7fd fd1a 	bl	8005584 <HAL_GetTick>
 8007b50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007b52:	e00a      	b.n	8007b6a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007b54:	f7fd fd16 	bl	8005584 <HAL_GetTick>
 8007b58:	4602      	mov	r2, r0
 8007b5a:	693b      	ldr	r3, [r7, #16]
 8007b5c:	1ad3      	subs	r3, r2, r3
 8007b5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b62:	4293      	cmp	r3, r2
 8007b64:	d901      	bls.n	8007b6a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007b66:	2303      	movs	r3, #3
 8007b68:	e0cb      	b.n	8007d02 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007b6a:	4b49      	ldr	r3, [pc, #292]	; (8007c90 <HAL_RCC_OscConfig+0x470>)
 8007b6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b6e:	f003 0302 	and.w	r3, r3, #2
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d0ee      	beq.n	8007b54 <HAL_RCC_OscConfig+0x334>
 8007b76:	e014      	b.n	8007ba2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007b78:	f7fd fd04 	bl	8005584 <HAL_GetTick>
 8007b7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007b7e:	e00a      	b.n	8007b96 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007b80:	f7fd fd00 	bl	8005584 <HAL_GetTick>
 8007b84:	4602      	mov	r2, r0
 8007b86:	693b      	ldr	r3, [r7, #16]
 8007b88:	1ad3      	subs	r3, r2, r3
 8007b8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b8e:	4293      	cmp	r3, r2
 8007b90:	d901      	bls.n	8007b96 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007b92:	2303      	movs	r3, #3
 8007b94:	e0b5      	b.n	8007d02 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007b96:	4b3e      	ldr	r3, [pc, #248]	; (8007c90 <HAL_RCC_OscConfig+0x470>)
 8007b98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b9a:	f003 0302 	and.w	r3, r3, #2
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d1ee      	bne.n	8007b80 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007ba2:	7dfb      	ldrb	r3, [r7, #23]
 8007ba4:	2b01      	cmp	r3, #1
 8007ba6:	d105      	bne.n	8007bb4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007ba8:	4b39      	ldr	r3, [pc, #228]	; (8007c90 <HAL_RCC_OscConfig+0x470>)
 8007baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bac:	4a38      	ldr	r2, [pc, #224]	; (8007c90 <HAL_RCC_OscConfig+0x470>)
 8007bae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007bb2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	699b      	ldr	r3, [r3, #24]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	f000 80a1 	beq.w	8007d00 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007bbe:	4b34      	ldr	r3, [pc, #208]	; (8007c90 <HAL_RCC_OscConfig+0x470>)
 8007bc0:	689b      	ldr	r3, [r3, #8]
 8007bc2:	f003 030c 	and.w	r3, r3, #12
 8007bc6:	2b08      	cmp	r3, #8
 8007bc8:	d05c      	beq.n	8007c84 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	699b      	ldr	r3, [r3, #24]
 8007bce:	2b02      	cmp	r3, #2
 8007bd0:	d141      	bne.n	8007c56 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007bd2:	4b31      	ldr	r3, [pc, #196]	; (8007c98 <HAL_RCC_OscConfig+0x478>)
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007bd8:	f7fd fcd4 	bl	8005584 <HAL_GetTick>
 8007bdc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007bde:	e008      	b.n	8007bf2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007be0:	f7fd fcd0 	bl	8005584 <HAL_GetTick>
 8007be4:	4602      	mov	r2, r0
 8007be6:	693b      	ldr	r3, [r7, #16]
 8007be8:	1ad3      	subs	r3, r2, r3
 8007bea:	2b02      	cmp	r3, #2
 8007bec:	d901      	bls.n	8007bf2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007bee:	2303      	movs	r3, #3
 8007bf0:	e087      	b.n	8007d02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007bf2:	4b27      	ldr	r3, [pc, #156]	; (8007c90 <HAL_RCC_OscConfig+0x470>)
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d1f0      	bne.n	8007be0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	69da      	ldr	r2, [r3, #28]
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	6a1b      	ldr	r3, [r3, #32]
 8007c06:	431a      	orrs	r2, r3
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c0c:	019b      	lsls	r3, r3, #6
 8007c0e:	431a      	orrs	r2, r3
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c14:	085b      	lsrs	r3, r3, #1
 8007c16:	3b01      	subs	r3, #1
 8007c18:	041b      	lsls	r3, r3, #16
 8007c1a:	431a      	orrs	r2, r3
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c20:	061b      	lsls	r3, r3, #24
 8007c22:	491b      	ldr	r1, [pc, #108]	; (8007c90 <HAL_RCC_OscConfig+0x470>)
 8007c24:	4313      	orrs	r3, r2
 8007c26:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007c28:	4b1b      	ldr	r3, [pc, #108]	; (8007c98 <HAL_RCC_OscConfig+0x478>)
 8007c2a:	2201      	movs	r2, #1
 8007c2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007c2e:	f7fd fca9 	bl	8005584 <HAL_GetTick>
 8007c32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007c34:	e008      	b.n	8007c48 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007c36:	f7fd fca5 	bl	8005584 <HAL_GetTick>
 8007c3a:	4602      	mov	r2, r0
 8007c3c:	693b      	ldr	r3, [r7, #16]
 8007c3e:	1ad3      	subs	r3, r2, r3
 8007c40:	2b02      	cmp	r3, #2
 8007c42:	d901      	bls.n	8007c48 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007c44:	2303      	movs	r3, #3
 8007c46:	e05c      	b.n	8007d02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007c48:	4b11      	ldr	r3, [pc, #68]	; (8007c90 <HAL_RCC_OscConfig+0x470>)
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d0f0      	beq.n	8007c36 <HAL_RCC_OscConfig+0x416>
 8007c54:	e054      	b.n	8007d00 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007c56:	4b10      	ldr	r3, [pc, #64]	; (8007c98 <HAL_RCC_OscConfig+0x478>)
 8007c58:	2200      	movs	r2, #0
 8007c5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007c5c:	f7fd fc92 	bl	8005584 <HAL_GetTick>
 8007c60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007c62:	e008      	b.n	8007c76 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007c64:	f7fd fc8e 	bl	8005584 <HAL_GetTick>
 8007c68:	4602      	mov	r2, r0
 8007c6a:	693b      	ldr	r3, [r7, #16]
 8007c6c:	1ad3      	subs	r3, r2, r3
 8007c6e:	2b02      	cmp	r3, #2
 8007c70:	d901      	bls.n	8007c76 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007c72:	2303      	movs	r3, #3
 8007c74:	e045      	b.n	8007d02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007c76:	4b06      	ldr	r3, [pc, #24]	; (8007c90 <HAL_RCC_OscConfig+0x470>)
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d1f0      	bne.n	8007c64 <HAL_RCC_OscConfig+0x444>
 8007c82:	e03d      	b.n	8007d00 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	699b      	ldr	r3, [r3, #24]
 8007c88:	2b01      	cmp	r3, #1
 8007c8a:	d107      	bne.n	8007c9c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007c8c:	2301      	movs	r3, #1
 8007c8e:	e038      	b.n	8007d02 <HAL_RCC_OscConfig+0x4e2>
 8007c90:	40023800 	.word	0x40023800
 8007c94:	40007000 	.word	0x40007000
 8007c98:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007c9c:	4b1b      	ldr	r3, [pc, #108]	; (8007d0c <HAL_RCC_OscConfig+0x4ec>)
 8007c9e:	685b      	ldr	r3, [r3, #4]
 8007ca0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	699b      	ldr	r3, [r3, #24]
 8007ca6:	2b01      	cmp	r3, #1
 8007ca8:	d028      	beq.n	8007cfc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007cb4:	429a      	cmp	r2, r3
 8007cb6:	d121      	bne.n	8007cfc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007cc2:	429a      	cmp	r2, r3
 8007cc4:	d11a      	bne.n	8007cfc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007cc6:	68fa      	ldr	r2, [r7, #12]
 8007cc8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007ccc:	4013      	ands	r3, r2
 8007cce:	687a      	ldr	r2, [r7, #4]
 8007cd0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007cd2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007cd4:	4293      	cmp	r3, r2
 8007cd6:	d111      	bne.n	8007cfc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ce2:	085b      	lsrs	r3, r3, #1
 8007ce4:	3b01      	subs	r3, #1
 8007ce6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007ce8:	429a      	cmp	r2, r3
 8007cea:	d107      	bne.n	8007cfc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cf6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007cf8:	429a      	cmp	r2, r3
 8007cfa:	d001      	beq.n	8007d00 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8007cfc:	2301      	movs	r3, #1
 8007cfe:	e000      	b.n	8007d02 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007d00:	2300      	movs	r3, #0
}
 8007d02:	4618      	mov	r0, r3
 8007d04:	3718      	adds	r7, #24
 8007d06:	46bd      	mov	sp, r7
 8007d08:	bd80      	pop	{r7, pc}
 8007d0a:	bf00      	nop
 8007d0c:	40023800 	.word	0x40023800

08007d10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007d10:	b580      	push	{r7, lr}
 8007d12:	b084      	sub	sp, #16
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
 8007d18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d101      	bne.n	8007d24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007d20:	2301      	movs	r3, #1
 8007d22:	e0cc      	b.n	8007ebe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007d24:	4b68      	ldr	r3, [pc, #416]	; (8007ec8 <HAL_RCC_ClockConfig+0x1b8>)
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	f003 0307 	and.w	r3, r3, #7
 8007d2c:	683a      	ldr	r2, [r7, #0]
 8007d2e:	429a      	cmp	r2, r3
 8007d30:	d90c      	bls.n	8007d4c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007d32:	4b65      	ldr	r3, [pc, #404]	; (8007ec8 <HAL_RCC_ClockConfig+0x1b8>)
 8007d34:	683a      	ldr	r2, [r7, #0]
 8007d36:	b2d2      	uxtb	r2, r2
 8007d38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007d3a:	4b63      	ldr	r3, [pc, #396]	; (8007ec8 <HAL_RCC_ClockConfig+0x1b8>)
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	f003 0307 	and.w	r3, r3, #7
 8007d42:	683a      	ldr	r2, [r7, #0]
 8007d44:	429a      	cmp	r2, r3
 8007d46:	d001      	beq.n	8007d4c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007d48:	2301      	movs	r3, #1
 8007d4a:	e0b8      	b.n	8007ebe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	f003 0302 	and.w	r3, r3, #2
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d020      	beq.n	8007d9a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	f003 0304 	and.w	r3, r3, #4
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d005      	beq.n	8007d70 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007d64:	4b59      	ldr	r3, [pc, #356]	; (8007ecc <HAL_RCC_ClockConfig+0x1bc>)
 8007d66:	689b      	ldr	r3, [r3, #8]
 8007d68:	4a58      	ldr	r2, [pc, #352]	; (8007ecc <HAL_RCC_ClockConfig+0x1bc>)
 8007d6a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007d6e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	f003 0308 	and.w	r3, r3, #8
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d005      	beq.n	8007d88 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007d7c:	4b53      	ldr	r3, [pc, #332]	; (8007ecc <HAL_RCC_ClockConfig+0x1bc>)
 8007d7e:	689b      	ldr	r3, [r3, #8]
 8007d80:	4a52      	ldr	r2, [pc, #328]	; (8007ecc <HAL_RCC_ClockConfig+0x1bc>)
 8007d82:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007d86:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007d88:	4b50      	ldr	r3, [pc, #320]	; (8007ecc <HAL_RCC_ClockConfig+0x1bc>)
 8007d8a:	689b      	ldr	r3, [r3, #8]
 8007d8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	689b      	ldr	r3, [r3, #8]
 8007d94:	494d      	ldr	r1, [pc, #308]	; (8007ecc <HAL_RCC_ClockConfig+0x1bc>)
 8007d96:	4313      	orrs	r3, r2
 8007d98:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	f003 0301 	and.w	r3, r3, #1
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d044      	beq.n	8007e30 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	685b      	ldr	r3, [r3, #4]
 8007daa:	2b01      	cmp	r3, #1
 8007dac:	d107      	bne.n	8007dbe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007dae:	4b47      	ldr	r3, [pc, #284]	; (8007ecc <HAL_RCC_ClockConfig+0x1bc>)
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d119      	bne.n	8007dee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007dba:	2301      	movs	r3, #1
 8007dbc:	e07f      	b.n	8007ebe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	685b      	ldr	r3, [r3, #4]
 8007dc2:	2b02      	cmp	r3, #2
 8007dc4:	d003      	beq.n	8007dce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007dca:	2b03      	cmp	r3, #3
 8007dcc:	d107      	bne.n	8007dde <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007dce:	4b3f      	ldr	r3, [pc, #252]	; (8007ecc <HAL_RCC_ClockConfig+0x1bc>)
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d109      	bne.n	8007dee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007dda:	2301      	movs	r3, #1
 8007ddc:	e06f      	b.n	8007ebe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007dde:	4b3b      	ldr	r3, [pc, #236]	; (8007ecc <HAL_RCC_ClockConfig+0x1bc>)
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	f003 0302 	and.w	r3, r3, #2
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d101      	bne.n	8007dee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007dea:	2301      	movs	r3, #1
 8007dec:	e067      	b.n	8007ebe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007dee:	4b37      	ldr	r3, [pc, #220]	; (8007ecc <HAL_RCC_ClockConfig+0x1bc>)
 8007df0:	689b      	ldr	r3, [r3, #8]
 8007df2:	f023 0203 	bic.w	r2, r3, #3
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	685b      	ldr	r3, [r3, #4]
 8007dfa:	4934      	ldr	r1, [pc, #208]	; (8007ecc <HAL_RCC_ClockConfig+0x1bc>)
 8007dfc:	4313      	orrs	r3, r2
 8007dfe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007e00:	f7fd fbc0 	bl	8005584 <HAL_GetTick>
 8007e04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007e06:	e00a      	b.n	8007e1e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007e08:	f7fd fbbc 	bl	8005584 <HAL_GetTick>
 8007e0c:	4602      	mov	r2, r0
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	1ad3      	subs	r3, r2, r3
 8007e12:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e16:	4293      	cmp	r3, r2
 8007e18:	d901      	bls.n	8007e1e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007e1a:	2303      	movs	r3, #3
 8007e1c:	e04f      	b.n	8007ebe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007e1e:	4b2b      	ldr	r3, [pc, #172]	; (8007ecc <HAL_RCC_ClockConfig+0x1bc>)
 8007e20:	689b      	ldr	r3, [r3, #8]
 8007e22:	f003 020c 	and.w	r2, r3, #12
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	685b      	ldr	r3, [r3, #4]
 8007e2a:	009b      	lsls	r3, r3, #2
 8007e2c:	429a      	cmp	r2, r3
 8007e2e:	d1eb      	bne.n	8007e08 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007e30:	4b25      	ldr	r3, [pc, #148]	; (8007ec8 <HAL_RCC_ClockConfig+0x1b8>)
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	f003 0307 	and.w	r3, r3, #7
 8007e38:	683a      	ldr	r2, [r7, #0]
 8007e3a:	429a      	cmp	r2, r3
 8007e3c:	d20c      	bcs.n	8007e58 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007e3e:	4b22      	ldr	r3, [pc, #136]	; (8007ec8 <HAL_RCC_ClockConfig+0x1b8>)
 8007e40:	683a      	ldr	r2, [r7, #0]
 8007e42:	b2d2      	uxtb	r2, r2
 8007e44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007e46:	4b20      	ldr	r3, [pc, #128]	; (8007ec8 <HAL_RCC_ClockConfig+0x1b8>)
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	f003 0307 	and.w	r3, r3, #7
 8007e4e:	683a      	ldr	r2, [r7, #0]
 8007e50:	429a      	cmp	r2, r3
 8007e52:	d001      	beq.n	8007e58 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007e54:	2301      	movs	r3, #1
 8007e56:	e032      	b.n	8007ebe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	f003 0304 	and.w	r3, r3, #4
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d008      	beq.n	8007e76 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007e64:	4b19      	ldr	r3, [pc, #100]	; (8007ecc <HAL_RCC_ClockConfig+0x1bc>)
 8007e66:	689b      	ldr	r3, [r3, #8]
 8007e68:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	68db      	ldr	r3, [r3, #12]
 8007e70:	4916      	ldr	r1, [pc, #88]	; (8007ecc <HAL_RCC_ClockConfig+0x1bc>)
 8007e72:	4313      	orrs	r3, r2
 8007e74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	f003 0308 	and.w	r3, r3, #8
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d009      	beq.n	8007e96 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007e82:	4b12      	ldr	r3, [pc, #72]	; (8007ecc <HAL_RCC_ClockConfig+0x1bc>)
 8007e84:	689b      	ldr	r3, [r3, #8]
 8007e86:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	691b      	ldr	r3, [r3, #16]
 8007e8e:	00db      	lsls	r3, r3, #3
 8007e90:	490e      	ldr	r1, [pc, #56]	; (8007ecc <HAL_RCC_ClockConfig+0x1bc>)
 8007e92:	4313      	orrs	r3, r2
 8007e94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007e96:	f000 f821 	bl	8007edc <HAL_RCC_GetSysClockFreq>
 8007e9a:	4602      	mov	r2, r0
 8007e9c:	4b0b      	ldr	r3, [pc, #44]	; (8007ecc <HAL_RCC_ClockConfig+0x1bc>)
 8007e9e:	689b      	ldr	r3, [r3, #8]
 8007ea0:	091b      	lsrs	r3, r3, #4
 8007ea2:	f003 030f 	and.w	r3, r3, #15
 8007ea6:	490a      	ldr	r1, [pc, #40]	; (8007ed0 <HAL_RCC_ClockConfig+0x1c0>)
 8007ea8:	5ccb      	ldrb	r3, [r1, r3]
 8007eaa:	fa22 f303 	lsr.w	r3, r2, r3
 8007eae:	4a09      	ldr	r2, [pc, #36]	; (8007ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8007eb0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007eb2:	4b09      	ldr	r3, [pc, #36]	; (8007ed8 <HAL_RCC_ClockConfig+0x1c8>)
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	f7fd fb20 	bl	80054fc <HAL_InitTick>

  return HAL_OK;
 8007ebc:	2300      	movs	r3, #0
}
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	3710      	adds	r7, #16
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	bd80      	pop	{r7, pc}
 8007ec6:	bf00      	nop
 8007ec8:	40023c00 	.word	0x40023c00
 8007ecc:	40023800 	.word	0x40023800
 8007ed0:	08014560 	.word	0x08014560
 8007ed4:	2000000c 	.word	0x2000000c
 8007ed8:	20000010 	.word	0x20000010

08007edc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007edc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007ee0:	b094      	sub	sp, #80	; 0x50
 8007ee2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007ee4:	2300      	movs	r3, #0
 8007ee6:	647b      	str	r3, [r7, #68]	; 0x44
 8007ee8:	2300      	movs	r3, #0
 8007eea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007eec:	2300      	movs	r3, #0
 8007eee:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007ef4:	4b79      	ldr	r3, [pc, #484]	; (80080dc <HAL_RCC_GetSysClockFreq+0x200>)
 8007ef6:	689b      	ldr	r3, [r3, #8]
 8007ef8:	f003 030c 	and.w	r3, r3, #12
 8007efc:	2b08      	cmp	r3, #8
 8007efe:	d00d      	beq.n	8007f1c <HAL_RCC_GetSysClockFreq+0x40>
 8007f00:	2b08      	cmp	r3, #8
 8007f02:	f200 80e1 	bhi.w	80080c8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d002      	beq.n	8007f10 <HAL_RCC_GetSysClockFreq+0x34>
 8007f0a:	2b04      	cmp	r3, #4
 8007f0c:	d003      	beq.n	8007f16 <HAL_RCC_GetSysClockFreq+0x3a>
 8007f0e:	e0db      	b.n	80080c8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007f10:	4b73      	ldr	r3, [pc, #460]	; (80080e0 <HAL_RCC_GetSysClockFreq+0x204>)
 8007f12:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8007f14:	e0db      	b.n	80080ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007f16:	4b73      	ldr	r3, [pc, #460]	; (80080e4 <HAL_RCC_GetSysClockFreq+0x208>)
 8007f18:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007f1a:	e0d8      	b.n	80080ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007f1c:	4b6f      	ldr	r3, [pc, #444]	; (80080dc <HAL_RCC_GetSysClockFreq+0x200>)
 8007f1e:	685b      	ldr	r3, [r3, #4]
 8007f20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007f24:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007f26:	4b6d      	ldr	r3, [pc, #436]	; (80080dc <HAL_RCC_GetSysClockFreq+0x200>)
 8007f28:	685b      	ldr	r3, [r3, #4]
 8007f2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d063      	beq.n	8007ffa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007f32:	4b6a      	ldr	r3, [pc, #424]	; (80080dc <HAL_RCC_GetSysClockFreq+0x200>)
 8007f34:	685b      	ldr	r3, [r3, #4]
 8007f36:	099b      	lsrs	r3, r3, #6
 8007f38:	2200      	movs	r2, #0
 8007f3a:	63bb      	str	r3, [r7, #56]	; 0x38
 8007f3c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8007f3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f44:	633b      	str	r3, [r7, #48]	; 0x30
 8007f46:	2300      	movs	r3, #0
 8007f48:	637b      	str	r3, [r7, #52]	; 0x34
 8007f4a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8007f4e:	4622      	mov	r2, r4
 8007f50:	462b      	mov	r3, r5
 8007f52:	f04f 0000 	mov.w	r0, #0
 8007f56:	f04f 0100 	mov.w	r1, #0
 8007f5a:	0159      	lsls	r1, r3, #5
 8007f5c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007f60:	0150      	lsls	r0, r2, #5
 8007f62:	4602      	mov	r2, r0
 8007f64:	460b      	mov	r3, r1
 8007f66:	4621      	mov	r1, r4
 8007f68:	1a51      	subs	r1, r2, r1
 8007f6a:	6139      	str	r1, [r7, #16]
 8007f6c:	4629      	mov	r1, r5
 8007f6e:	eb63 0301 	sbc.w	r3, r3, r1
 8007f72:	617b      	str	r3, [r7, #20]
 8007f74:	f04f 0200 	mov.w	r2, #0
 8007f78:	f04f 0300 	mov.w	r3, #0
 8007f7c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007f80:	4659      	mov	r1, fp
 8007f82:	018b      	lsls	r3, r1, #6
 8007f84:	4651      	mov	r1, sl
 8007f86:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007f8a:	4651      	mov	r1, sl
 8007f8c:	018a      	lsls	r2, r1, #6
 8007f8e:	4651      	mov	r1, sl
 8007f90:	ebb2 0801 	subs.w	r8, r2, r1
 8007f94:	4659      	mov	r1, fp
 8007f96:	eb63 0901 	sbc.w	r9, r3, r1
 8007f9a:	f04f 0200 	mov.w	r2, #0
 8007f9e:	f04f 0300 	mov.w	r3, #0
 8007fa2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007fa6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007faa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007fae:	4690      	mov	r8, r2
 8007fb0:	4699      	mov	r9, r3
 8007fb2:	4623      	mov	r3, r4
 8007fb4:	eb18 0303 	adds.w	r3, r8, r3
 8007fb8:	60bb      	str	r3, [r7, #8]
 8007fba:	462b      	mov	r3, r5
 8007fbc:	eb49 0303 	adc.w	r3, r9, r3
 8007fc0:	60fb      	str	r3, [r7, #12]
 8007fc2:	f04f 0200 	mov.w	r2, #0
 8007fc6:	f04f 0300 	mov.w	r3, #0
 8007fca:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007fce:	4629      	mov	r1, r5
 8007fd0:	024b      	lsls	r3, r1, #9
 8007fd2:	4621      	mov	r1, r4
 8007fd4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007fd8:	4621      	mov	r1, r4
 8007fda:	024a      	lsls	r2, r1, #9
 8007fdc:	4610      	mov	r0, r2
 8007fde:	4619      	mov	r1, r3
 8007fe0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	62bb      	str	r3, [r7, #40]	; 0x28
 8007fe6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007fe8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007fec:	f7f8 fe4c 	bl	8000c88 <__aeabi_uldivmod>
 8007ff0:	4602      	mov	r2, r0
 8007ff2:	460b      	mov	r3, r1
 8007ff4:	4613      	mov	r3, r2
 8007ff6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007ff8:	e058      	b.n	80080ac <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007ffa:	4b38      	ldr	r3, [pc, #224]	; (80080dc <HAL_RCC_GetSysClockFreq+0x200>)
 8007ffc:	685b      	ldr	r3, [r3, #4]
 8007ffe:	099b      	lsrs	r3, r3, #6
 8008000:	2200      	movs	r2, #0
 8008002:	4618      	mov	r0, r3
 8008004:	4611      	mov	r1, r2
 8008006:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800800a:	623b      	str	r3, [r7, #32]
 800800c:	2300      	movs	r3, #0
 800800e:	627b      	str	r3, [r7, #36]	; 0x24
 8008010:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8008014:	4642      	mov	r2, r8
 8008016:	464b      	mov	r3, r9
 8008018:	f04f 0000 	mov.w	r0, #0
 800801c:	f04f 0100 	mov.w	r1, #0
 8008020:	0159      	lsls	r1, r3, #5
 8008022:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008026:	0150      	lsls	r0, r2, #5
 8008028:	4602      	mov	r2, r0
 800802a:	460b      	mov	r3, r1
 800802c:	4641      	mov	r1, r8
 800802e:	ebb2 0a01 	subs.w	sl, r2, r1
 8008032:	4649      	mov	r1, r9
 8008034:	eb63 0b01 	sbc.w	fp, r3, r1
 8008038:	f04f 0200 	mov.w	r2, #0
 800803c:	f04f 0300 	mov.w	r3, #0
 8008040:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8008044:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8008048:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800804c:	ebb2 040a 	subs.w	r4, r2, sl
 8008050:	eb63 050b 	sbc.w	r5, r3, fp
 8008054:	f04f 0200 	mov.w	r2, #0
 8008058:	f04f 0300 	mov.w	r3, #0
 800805c:	00eb      	lsls	r3, r5, #3
 800805e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008062:	00e2      	lsls	r2, r4, #3
 8008064:	4614      	mov	r4, r2
 8008066:	461d      	mov	r5, r3
 8008068:	4643      	mov	r3, r8
 800806a:	18e3      	adds	r3, r4, r3
 800806c:	603b      	str	r3, [r7, #0]
 800806e:	464b      	mov	r3, r9
 8008070:	eb45 0303 	adc.w	r3, r5, r3
 8008074:	607b      	str	r3, [r7, #4]
 8008076:	f04f 0200 	mov.w	r2, #0
 800807a:	f04f 0300 	mov.w	r3, #0
 800807e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008082:	4629      	mov	r1, r5
 8008084:	028b      	lsls	r3, r1, #10
 8008086:	4621      	mov	r1, r4
 8008088:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800808c:	4621      	mov	r1, r4
 800808e:	028a      	lsls	r2, r1, #10
 8008090:	4610      	mov	r0, r2
 8008092:	4619      	mov	r1, r3
 8008094:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008096:	2200      	movs	r2, #0
 8008098:	61bb      	str	r3, [r7, #24]
 800809a:	61fa      	str	r2, [r7, #28]
 800809c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80080a0:	f7f8 fdf2 	bl	8000c88 <__aeabi_uldivmod>
 80080a4:	4602      	mov	r2, r0
 80080a6:	460b      	mov	r3, r1
 80080a8:	4613      	mov	r3, r2
 80080aa:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80080ac:	4b0b      	ldr	r3, [pc, #44]	; (80080dc <HAL_RCC_GetSysClockFreq+0x200>)
 80080ae:	685b      	ldr	r3, [r3, #4]
 80080b0:	0c1b      	lsrs	r3, r3, #16
 80080b2:	f003 0303 	and.w	r3, r3, #3
 80080b6:	3301      	adds	r3, #1
 80080b8:	005b      	lsls	r3, r3, #1
 80080ba:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80080bc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80080be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80080c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80080c4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80080c6:	e002      	b.n	80080ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80080c8:	4b05      	ldr	r3, [pc, #20]	; (80080e0 <HAL_RCC_GetSysClockFreq+0x204>)
 80080ca:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80080cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80080ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80080d0:	4618      	mov	r0, r3
 80080d2:	3750      	adds	r7, #80	; 0x50
 80080d4:	46bd      	mov	sp, r7
 80080d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80080da:	bf00      	nop
 80080dc:	40023800 	.word	0x40023800
 80080e0:	00f42400 	.word	0x00f42400
 80080e4:	007a1200 	.word	0x007a1200

080080e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80080e8:	b480      	push	{r7}
 80080ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80080ec:	4b03      	ldr	r3, [pc, #12]	; (80080fc <HAL_RCC_GetHCLKFreq+0x14>)
 80080ee:	681b      	ldr	r3, [r3, #0]
}
 80080f0:	4618      	mov	r0, r3
 80080f2:	46bd      	mov	sp, r7
 80080f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f8:	4770      	bx	lr
 80080fa:	bf00      	nop
 80080fc:	2000000c 	.word	0x2000000c

08008100 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008100:	b580      	push	{r7, lr}
 8008102:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008104:	f7ff fff0 	bl	80080e8 <HAL_RCC_GetHCLKFreq>
 8008108:	4602      	mov	r2, r0
 800810a:	4b05      	ldr	r3, [pc, #20]	; (8008120 <HAL_RCC_GetPCLK1Freq+0x20>)
 800810c:	689b      	ldr	r3, [r3, #8]
 800810e:	0a9b      	lsrs	r3, r3, #10
 8008110:	f003 0307 	and.w	r3, r3, #7
 8008114:	4903      	ldr	r1, [pc, #12]	; (8008124 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008116:	5ccb      	ldrb	r3, [r1, r3]
 8008118:	fa22 f303 	lsr.w	r3, r2, r3
}
 800811c:	4618      	mov	r0, r3
 800811e:	bd80      	pop	{r7, pc}
 8008120:	40023800 	.word	0x40023800
 8008124:	08014570 	.word	0x08014570

08008128 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008128:	b580      	push	{r7, lr}
 800812a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800812c:	f7ff ffdc 	bl	80080e8 <HAL_RCC_GetHCLKFreq>
 8008130:	4602      	mov	r2, r0
 8008132:	4b05      	ldr	r3, [pc, #20]	; (8008148 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008134:	689b      	ldr	r3, [r3, #8]
 8008136:	0b5b      	lsrs	r3, r3, #13
 8008138:	f003 0307 	and.w	r3, r3, #7
 800813c:	4903      	ldr	r1, [pc, #12]	; (800814c <HAL_RCC_GetPCLK2Freq+0x24>)
 800813e:	5ccb      	ldrb	r3, [r1, r3]
 8008140:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008144:	4618      	mov	r0, r3
 8008146:	bd80      	pop	{r7, pc}
 8008148:	40023800 	.word	0x40023800
 800814c:	08014570 	.word	0x08014570

08008150 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008150:	b580      	push	{r7, lr}
 8008152:	b082      	sub	sp, #8
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	2b00      	cmp	r3, #0
 800815c:	d101      	bne.n	8008162 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800815e:	2301      	movs	r3, #1
 8008160:	e07b      	b.n	800825a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008166:	2b00      	cmp	r3, #0
 8008168:	d108      	bne.n	800817c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	685b      	ldr	r3, [r3, #4]
 800816e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008172:	d009      	beq.n	8008188 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	2200      	movs	r2, #0
 8008178:	61da      	str	r2, [r3, #28]
 800817a:	e005      	b.n	8008188 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2200      	movs	r2, #0
 8008180:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	2200      	movs	r2, #0
 8008186:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	2200      	movs	r2, #0
 800818c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008194:	b2db      	uxtb	r3, r3
 8008196:	2b00      	cmp	r3, #0
 8008198:	d106      	bne.n	80081a8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	2200      	movs	r2, #0
 800819e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80081a2:	6878      	ldr	r0, [r7, #4]
 80081a4:	f7fb fd90 	bl	8003cc8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2202      	movs	r2, #2
 80081ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	681a      	ldr	r2, [r3, #0]
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80081be:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	685b      	ldr	r3, [r3, #4]
 80081c4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	689b      	ldr	r3, [r3, #8]
 80081cc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80081d0:	431a      	orrs	r2, r3
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	68db      	ldr	r3, [r3, #12]
 80081d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80081da:	431a      	orrs	r2, r3
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	691b      	ldr	r3, [r3, #16]
 80081e0:	f003 0302 	and.w	r3, r3, #2
 80081e4:	431a      	orrs	r2, r3
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	695b      	ldr	r3, [r3, #20]
 80081ea:	f003 0301 	and.w	r3, r3, #1
 80081ee:	431a      	orrs	r2, r3
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	699b      	ldr	r3, [r3, #24]
 80081f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80081f8:	431a      	orrs	r2, r3
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	69db      	ldr	r3, [r3, #28]
 80081fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008202:	431a      	orrs	r2, r3
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	6a1b      	ldr	r3, [r3, #32]
 8008208:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800820c:	ea42 0103 	orr.w	r1, r2, r3
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008214:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	430a      	orrs	r2, r1
 800821e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	699b      	ldr	r3, [r3, #24]
 8008224:	0c1b      	lsrs	r3, r3, #16
 8008226:	f003 0104 	and.w	r1, r3, #4
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800822e:	f003 0210 	and.w	r2, r3, #16
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	430a      	orrs	r2, r1
 8008238:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	69da      	ldr	r2, [r3, #28]
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008248:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	2200      	movs	r2, #0
 800824e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	2201      	movs	r2, #1
 8008254:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8008258:	2300      	movs	r3, #0
}
 800825a:	4618      	mov	r0, r3
 800825c:	3708      	adds	r7, #8
 800825e:	46bd      	mov	sp, r7
 8008260:	bd80      	pop	{r7, pc}

08008262 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008262:	b580      	push	{r7, lr}
 8008264:	b088      	sub	sp, #32
 8008266:	af00      	add	r7, sp, #0
 8008268:	60f8      	str	r0, [r7, #12]
 800826a:	60b9      	str	r1, [r7, #8]
 800826c:	603b      	str	r3, [r7, #0]
 800826e:	4613      	mov	r3, r2
 8008270:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008272:	2300      	movs	r3, #0
 8008274:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800827c:	2b01      	cmp	r3, #1
 800827e:	d101      	bne.n	8008284 <HAL_SPI_Transmit+0x22>
 8008280:	2302      	movs	r3, #2
 8008282:	e126      	b.n	80084d2 <HAL_SPI_Transmit+0x270>
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	2201      	movs	r2, #1
 8008288:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800828c:	f7fd f97a 	bl	8005584 <HAL_GetTick>
 8008290:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8008292:	88fb      	ldrh	r3, [r7, #6]
 8008294:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800829c:	b2db      	uxtb	r3, r3
 800829e:	2b01      	cmp	r3, #1
 80082a0:	d002      	beq.n	80082a8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80082a2:	2302      	movs	r3, #2
 80082a4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80082a6:	e10b      	b.n	80084c0 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80082a8:	68bb      	ldr	r3, [r7, #8]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d002      	beq.n	80082b4 <HAL_SPI_Transmit+0x52>
 80082ae:	88fb      	ldrh	r3, [r7, #6]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d102      	bne.n	80082ba <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80082b4:	2301      	movs	r3, #1
 80082b6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80082b8:	e102      	b.n	80084c0 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	2203      	movs	r2, #3
 80082be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	2200      	movs	r2, #0
 80082c6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	68ba      	ldr	r2, [r7, #8]
 80082cc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	88fa      	ldrh	r2, [r7, #6]
 80082d2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	88fa      	ldrh	r2, [r7, #6]
 80082d8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	2200      	movs	r2, #0
 80082de:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	2200      	movs	r2, #0
 80082e4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	2200      	movs	r2, #0
 80082ea:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	2200      	movs	r2, #0
 80082f0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	2200      	movs	r2, #0
 80082f6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	689b      	ldr	r3, [r3, #8]
 80082fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008300:	d10f      	bne.n	8008322 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	681a      	ldr	r2, [r3, #0]
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008310:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	681a      	ldr	r2, [r3, #0]
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008320:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800832c:	2b40      	cmp	r3, #64	; 0x40
 800832e:	d007      	beq.n	8008340 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	681a      	ldr	r2, [r3, #0]
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800833e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	68db      	ldr	r3, [r3, #12]
 8008344:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008348:	d14b      	bne.n	80083e2 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	685b      	ldr	r3, [r3, #4]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d002      	beq.n	8008358 <HAL_SPI_Transmit+0xf6>
 8008352:	8afb      	ldrh	r3, [r7, #22]
 8008354:	2b01      	cmp	r3, #1
 8008356:	d13e      	bne.n	80083d6 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800835c:	881a      	ldrh	r2, [r3, #0]
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008368:	1c9a      	adds	r2, r3, #2
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008372:	b29b      	uxth	r3, r3
 8008374:	3b01      	subs	r3, #1
 8008376:	b29a      	uxth	r2, r3
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800837c:	e02b      	b.n	80083d6 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	689b      	ldr	r3, [r3, #8]
 8008384:	f003 0302 	and.w	r3, r3, #2
 8008388:	2b02      	cmp	r3, #2
 800838a:	d112      	bne.n	80083b2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008390:	881a      	ldrh	r2, [r3, #0]
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800839c:	1c9a      	adds	r2, r3, #2
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80083a6:	b29b      	uxth	r3, r3
 80083a8:	3b01      	subs	r3, #1
 80083aa:	b29a      	uxth	r2, r3
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	86da      	strh	r2, [r3, #54]	; 0x36
 80083b0:	e011      	b.n	80083d6 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80083b2:	f7fd f8e7 	bl	8005584 <HAL_GetTick>
 80083b6:	4602      	mov	r2, r0
 80083b8:	69bb      	ldr	r3, [r7, #24]
 80083ba:	1ad3      	subs	r3, r2, r3
 80083bc:	683a      	ldr	r2, [r7, #0]
 80083be:	429a      	cmp	r2, r3
 80083c0:	d803      	bhi.n	80083ca <HAL_SPI_Transmit+0x168>
 80083c2:	683b      	ldr	r3, [r7, #0]
 80083c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083c8:	d102      	bne.n	80083d0 <HAL_SPI_Transmit+0x16e>
 80083ca:	683b      	ldr	r3, [r7, #0]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d102      	bne.n	80083d6 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80083d0:	2303      	movs	r3, #3
 80083d2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80083d4:	e074      	b.n	80084c0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80083da:	b29b      	uxth	r3, r3
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d1ce      	bne.n	800837e <HAL_SPI_Transmit+0x11c>
 80083e0:	e04c      	b.n	800847c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	685b      	ldr	r3, [r3, #4]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d002      	beq.n	80083f0 <HAL_SPI_Transmit+0x18e>
 80083ea:	8afb      	ldrh	r3, [r7, #22]
 80083ec:	2b01      	cmp	r3, #1
 80083ee:	d140      	bne.n	8008472 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	330c      	adds	r3, #12
 80083fa:	7812      	ldrb	r2, [r2, #0]
 80083fc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008402:	1c5a      	adds	r2, r3, #1
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800840c:	b29b      	uxth	r3, r3
 800840e:	3b01      	subs	r3, #1
 8008410:	b29a      	uxth	r2, r3
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8008416:	e02c      	b.n	8008472 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	689b      	ldr	r3, [r3, #8]
 800841e:	f003 0302 	and.w	r3, r3, #2
 8008422:	2b02      	cmp	r3, #2
 8008424:	d113      	bne.n	800844e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	330c      	adds	r3, #12
 8008430:	7812      	ldrb	r2, [r2, #0]
 8008432:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008438:	1c5a      	adds	r2, r3, #1
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008442:	b29b      	uxth	r3, r3
 8008444:	3b01      	subs	r3, #1
 8008446:	b29a      	uxth	r2, r3
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	86da      	strh	r2, [r3, #54]	; 0x36
 800844c:	e011      	b.n	8008472 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800844e:	f7fd f899 	bl	8005584 <HAL_GetTick>
 8008452:	4602      	mov	r2, r0
 8008454:	69bb      	ldr	r3, [r7, #24]
 8008456:	1ad3      	subs	r3, r2, r3
 8008458:	683a      	ldr	r2, [r7, #0]
 800845a:	429a      	cmp	r2, r3
 800845c:	d803      	bhi.n	8008466 <HAL_SPI_Transmit+0x204>
 800845e:	683b      	ldr	r3, [r7, #0]
 8008460:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008464:	d102      	bne.n	800846c <HAL_SPI_Transmit+0x20a>
 8008466:	683b      	ldr	r3, [r7, #0]
 8008468:	2b00      	cmp	r3, #0
 800846a:	d102      	bne.n	8008472 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800846c:	2303      	movs	r3, #3
 800846e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008470:	e026      	b.n	80084c0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008476:	b29b      	uxth	r3, r3
 8008478:	2b00      	cmp	r3, #0
 800847a:	d1cd      	bne.n	8008418 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800847c:	69ba      	ldr	r2, [r7, #24]
 800847e:	6839      	ldr	r1, [r7, #0]
 8008480:	68f8      	ldr	r0, [r7, #12]
 8008482:	f000 fa63 	bl	800894c <SPI_EndRxTxTransaction>
 8008486:	4603      	mov	r3, r0
 8008488:	2b00      	cmp	r3, #0
 800848a:	d002      	beq.n	8008492 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	2220      	movs	r2, #32
 8008490:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	689b      	ldr	r3, [r3, #8]
 8008496:	2b00      	cmp	r3, #0
 8008498:	d10a      	bne.n	80084b0 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800849a:	2300      	movs	r3, #0
 800849c:	613b      	str	r3, [r7, #16]
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	68db      	ldr	r3, [r3, #12]
 80084a4:	613b      	str	r3, [r7, #16]
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	689b      	ldr	r3, [r3, #8]
 80084ac:	613b      	str	r3, [r7, #16]
 80084ae:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d002      	beq.n	80084be <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80084b8:	2301      	movs	r3, #1
 80084ba:	77fb      	strb	r3, [r7, #31]
 80084bc:	e000      	b.n	80084c0 <HAL_SPI_Transmit+0x25e>
  }

error:
 80084be:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	2201      	movs	r2, #1
 80084c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	2200      	movs	r2, #0
 80084cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80084d0:	7ffb      	ldrb	r3, [r7, #31]
}
 80084d2:	4618      	mov	r0, r3
 80084d4:	3720      	adds	r7, #32
 80084d6:	46bd      	mov	sp, r7
 80084d8:	bd80      	pop	{r7, pc}

080084da <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80084da:	b580      	push	{r7, lr}
 80084dc:	b08c      	sub	sp, #48	; 0x30
 80084de:	af00      	add	r7, sp, #0
 80084e0:	60f8      	str	r0, [r7, #12]
 80084e2:	60b9      	str	r1, [r7, #8]
 80084e4:	607a      	str	r2, [r7, #4]
 80084e6:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80084e8:	2301      	movs	r3, #1
 80084ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80084ec:	2300      	movs	r3, #0
 80084ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80084f8:	2b01      	cmp	r3, #1
 80084fa:	d101      	bne.n	8008500 <HAL_SPI_TransmitReceive+0x26>
 80084fc:	2302      	movs	r3, #2
 80084fe:	e18a      	b.n	8008816 <HAL_SPI_TransmitReceive+0x33c>
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	2201      	movs	r2, #1
 8008504:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008508:	f7fd f83c 	bl	8005584 <HAL_GetTick>
 800850c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008514:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	685b      	ldr	r3, [r3, #4]
 800851c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800851e:	887b      	ldrh	r3, [r7, #2]
 8008520:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008522:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008526:	2b01      	cmp	r3, #1
 8008528:	d00f      	beq.n	800854a <HAL_SPI_TransmitReceive+0x70>
 800852a:	69fb      	ldr	r3, [r7, #28]
 800852c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008530:	d107      	bne.n	8008542 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	689b      	ldr	r3, [r3, #8]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d103      	bne.n	8008542 <HAL_SPI_TransmitReceive+0x68>
 800853a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800853e:	2b04      	cmp	r3, #4
 8008540:	d003      	beq.n	800854a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8008542:	2302      	movs	r3, #2
 8008544:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008548:	e15b      	b.n	8008802 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800854a:	68bb      	ldr	r3, [r7, #8]
 800854c:	2b00      	cmp	r3, #0
 800854e:	d005      	beq.n	800855c <HAL_SPI_TransmitReceive+0x82>
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	2b00      	cmp	r3, #0
 8008554:	d002      	beq.n	800855c <HAL_SPI_TransmitReceive+0x82>
 8008556:	887b      	ldrh	r3, [r7, #2]
 8008558:	2b00      	cmp	r3, #0
 800855a:	d103      	bne.n	8008564 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800855c:	2301      	movs	r3, #1
 800855e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008562:	e14e      	b.n	8008802 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800856a:	b2db      	uxtb	r3, r3
 800856c:	2b04      	cmp	r3, #4
 800856e:	d003      	beq.n	8008578 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	2205      	movs	r2, #5
 8008574:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	2200      	movs	r2, #0
 800857c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	687a      	ldr	r2, [r7, #4]
 8008582:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	887a      	ldrh	r2, [r7, #2]
 8008588:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	887a      	ldrh	r2, [r7, #2]
 800858e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	68ba      	ldr	r2, [r7, #8]
 8008594:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	887a      	ldrh	r2, [r7, #2]
 800859a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	887a      	ldrh	r2, [r7, #2]
 80085a0:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	2200      	movs	r2, #0
 80085a6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	2200      	movs	r2, #0
 80085ac:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085b8:	2b40      	cmp	r3, #64	; 0x40
 80085ba:	d007      	beq.n	80085cc <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	681a      	ldr	r2, [r3, #0]
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80085ca:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	68db      	ldr	r3, [r3, #12]
 80085d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80085d4:	d178      	bne.n	80086c8 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	685b      	ldr	r3, [r3, #4]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d002      	beq.n	80085e4 <HAL_SPI_TransmitReceive+0x10a>
 80085de:	8b7b      	ldrh	r3, [r7, #26]
 80085e0:	2b01      	cmp	r3, #1
 80085e2:	d166      	bne.n	80086b2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085e8:	881a      	ldrh	r2, [r3, #0]
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085f4:	1c9a      	adds	r2, r3, #2
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80085fe:	b29b      	uxth	r3, r3
 8008600:	3b01      	subs	r3, #1
 8008602:	b29a      	uxth	r2, r3
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008608:	e053      	b.n	80086b2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	689b      	ldr	r3, [r3, #8]
 8008610:	f003 0302 	and.w	r3, r3, #2
 8008614:	2b02      	cmp	r3, #2
 8008616:	d11b      	bne.n	8008650 <HAL_SPI_TransmitReceive+0x176>
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800861c:	b29b      	uxth	r3, r3
 800861e:	2b00      	cmp	r3, #0
 8008620:	d016      	beq.n	8008650 <HAL_SPI_TransmitReceive+0x176>
 8008622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008624:	2b01      	cmp	r3, #1
 8008626:	d113      	bne.n	8008650 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800862c:	881a      	ldrh	r2, [r3, #0]
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008638:	1c9a      	adds	r2, r3, #2
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008642:	b29b      	uxth	r3, r3
 8008644:	3b01      	subs	r3, #1
 8008646:	b29a      	uxth	r2, r3
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800864c:	2300      	movs	r3, #0
 800864e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	689b      	ldr	r3, [r3, #8]
 8008656:	f003 0301 	and.w	r3, r3, #1
 800865a:	2b01      	cmp	r3, #1
 800865c:	d119      	bne.n	8008692 <HAL_SPI_TransmitReceive+0x1b8>
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008662:	b29b      	uxth	r3, r3
 8008664:	2b00      	cmp	r3, #0
 8008666:	d014      	beq.n	8008692 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	68da      	ldr	r2, [r3, #12]
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008672:	b292      	uxth	r2, r2
 8008674:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800867a:	1c9a      	adds	r2, r3, #2
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008684:	b29b      	uxth	r3, r3
 8008686:	3b01      	subs	r3, #1
 8008688:	b29a      	uxth	r2, r3
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800868e:	2301      	movs	r3, #1
 8008690:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008692:	f7fc ff77 	bl	8005584 <HAL_GetTick>
 8008696:	4602      	mov	r2, r0
 8008698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800869a:	1ad3      	subs	r3, r2, r3
 800869c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800869e:	429a      	cmp	r2, r3
 80086a0:	d807      	bhi.n	80086b2 <HAL_SPI_TransmitReceive+0x1d8>
 80086a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086a8:	d003      	beq.n	80086b2 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80086aa:	2303      	movs	r3, #3
 80086ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80086b0:	e0a7      	b.n	8008802 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80086b6:	b29b      	uxth	r3, r3
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d1a6      	bne.n	800860a <HAL_SPI_TransmitReceive+0x130>
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80086c0:	b29b      	uxth	r3, r3
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d1a1      	bne.n	800860a <HAL_SPI_TransmitReceive+0x130>
 80086c6:	e07c      	b.n	80087c2 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	685b      	ldr	r3, [r3, #4]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d002      	beq.n	80086d6 <HAL_SPI_TransmitReceive+0x1fc>
 80086d0:	8b7b      	ldrh	r3, [r7, #26]
 80086d2:	2b01      	cmp	r3, #1
 80086d4:	d16b      	bne.n	80087ae <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	330c      	adds	r3, #12
 80086e0:	7812      	ldrb	r2, [r2, #0]
 80086e2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086e8:	1c5a      	adds	r2, r3, #1
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80086f2:	b29b      	uxth	r3, r3
 80086f4:	3b01      	subs	r3, #1
 80086f6:	b29a      	uxth	r2, r3
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80086fc:	e057      	b.n	80087ae <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	689b      	ldr	r3, [r3, #8]
 8008704:	f003 0302 	and.w	r3, r3, #2
 8008708:	2b02      	cmp	r3, #2
 800870a:	d11c      	bne.n	8008746 <HAL_SPI_TransmitReceive+0x26c>
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008710:	b29b      	uxth	r3, r3
 8008712:	2b00      	cmp	r3, #0
 8008714:	d017      	beq.n	8008746 <HAL_SPI_TransmitReceive+0x26c>
 8008716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008718:	2b01      	cmp	r3, #1
 800871a:	d114      	bne.n	8008746 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	330c      	adds	r3, #12
 8008726:	7812      	ldrb	r2, [r2, #0]
 8008728:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800872e:	1c5a      	adds	r2, r3, #1
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008738:	b29b      	uxth	r3, r3
 800873a:	3b01      	subs	r3, #1
 800873c:	b29a      	uxth	r2, r3
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008742:	2300      	movs	r3, #0
 8008744:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	689b      	ldr	r3, [r3, #8]
 800874c:	f003 0301 	and.w	r3, r3, #1
 8008750:	2b01      	cmp	r3, #1
 8008752:	d119      	bne.n	8008788 <HAL_SPI_TransmitReceive+0x2ae>
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008758:	b29b      	uxth	r3, r3
 800875a:	2b00      	cmp	r3, #0
 800875c:	d014      	beq.n	8008788 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	68da      	ldr	r2, [r3, #12]
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008768:	b2d2      	uxtb	r2, r2
 800876a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008770:	1c5a      	adds	r2, r3, #1
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800877a:	b29b      	uxth	r3, r3
 800877c:	3b01      	subs	r3, #1
 800877e:	b29a      	uxth	r2, r3
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008784:	2301      	movs	r3, #1
 8008786:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008788:	f7fc fefc 	bl	8005584 <HAL_GetTick>
 800878c:	4602      	mov	r2, r0
 800878e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008790:	1ad3      	subs	r3, r2, r3
 8008792:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008794:	429a      	cmp	r2, r3
 8008796:	d803      	bhi.n	80087a0 <HAL_SPI_TransmitReceive+0x2c6>
 8008798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800879a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800879e:	d102      	bne.n	80087a6 <HAL_SPI_TransmitReceive+0x2cc>
 80087a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d103      	bne.n	80087ae <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80087a6:	2303      	movs	r3, #3
 80087a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80087ac:	e029      	b.n	8008802 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80087b2:	b29b      	uxth	r3, r3
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d1a2      	bne.n	80086fe <HAL_SPI_TransmitReceive+0x224>
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80087bc:	b29b      	uxth	r3, r3
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d19d      	bne.n	80086fe <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80087c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087c4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80087c6:	68f8      	ldr	r0, [r7, #12]
 80087c8:	f000 f8c0 	bl	800894c <SPI_EndRxTxTransaction>
 80087cc:	4603      	mov	r3, r0
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d006      	beq.n	80087e0 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80087d2:	2301      	movs	r3, #1
 80087d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	2220      	movs	r2, #32
 80087dc:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80087de:	e010      	b.n	8008802 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	689b      	ldr	r3, [r3, #8]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d10b      	bne.n	8008800 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80087e8:	2300      	movs	r3, #0
 80087ea:	617b      	str	r3, [r7, #20]
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	68db      	ldr	r3, [r3, #12]
 80087f2:	617b      	str	r3, [r7, #20]
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	689b      	ldr	r3, [r3, #8]
 80087fa:	617b      	str	r3, [r7, #20]
 80087fc:	697b      	ldr	r3, [r7, #20]
 80087fe:	e000      	b.n	8008802 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8008800:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	2201      	movs	r2, #1
 8008806:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	2200      	movs	r2, #0
 800880e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008812:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8008816:	4618      	mov	r0, r3
 8008818:	3730      	adds	r7, #48	; 0x30
 800881a:	46bd      	mov	sp, r7
 800881c:	bd80      	pop	{r7, pc}

0800881e <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800881e:	b480      	push	{r7}
 8008820:	b083      	sub	sp, #12
 8008822:	af00      	add	r7, sp, #0
 8008824:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800882c:	b2db      	uxtb	r3, r3
}
 800882e:	4618      	mov	r0, r3
 8008830:	370c      	adds	r7, #12
 8008832:	46bd      	mov	sp, r7
 8008834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008838:	4770      	bx	lr
	...

0800883c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800883c:	b580      	push	{r7, lr}
 800883e:	b088      	sub	sp, #32
 8008840:	af00      	add	r7, sp, #0
 8008842:	60f8      	str	r0, [r7, #12]
 8008844:	60b9      	str	r1, [r7, #8]
 8008846:	603b      	str	r3, [r7, #0]
 8008848:	4613      	mov	r3, r2
 800884a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800884c:	f7fc fe9a 	bl	8005584 <HAL_GetTick>
 8008850:	4602      	mov	r2, r0
 8008852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008854:	1a9b      	subs	r3, r3, r2
 8008856:	683a      	ldr	r2, [r7, #0]
 8008858:	4413      	add	r3, r2
 800885a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800885c:	f7fc fe92 	bl	8005584 <HAL_GetTick>
 8008860:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008862:	4b39      	ldr	r3, [pc, #228]	; (8008948 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	015b      	lsls	r3, r3, #5
 8008868:	0d1b      	lsrs	r3, r3, #20
 800886a:	69fa      	ldr	r2, [r7, #28]
 800886c:	fb02 f303 	mul.w	r3, r2, r3
 8008870:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008872:	e054      	b.n	800891e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008874:	683b      	ldr	r3, [r7, #0]
 8008876:	f1b3 3fff 	cmp.w	r3, #4294967295
 800887a:	d050      	beq.n	800891e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800887c:	f7fc fe82 	bl	8005584 <HAL_GetTick>
 8008880:	4602      	mov	r2, r0
 8008882:	69bb      	ldr	r3, [r7, #24]
 8008884:	1ad3      	subs	r3, r2, r3
 8008886:	69fa      	ldr	r2, [r7, #28]
 8008888:	429a      	cmp	r2, r3
 800888a:	d902      	bls.n	8008892 <SPI_WaitFlagStateUntilTimeout+0x56>
 800888c:	69fb      	ldr	r3, [r7, #28]
 800888e:	2b00      	cmp	r3, #0
 8008890:	d13d      	bne.n	800890e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	685a      	ldr	r2, [r3, #4]
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80088a0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	685b      	ldr	r3, [r3, #4]
 80088a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80088aa:	d111      	bne.n	80088d0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	689b      	ldr	r3, [r3, #8]
 80088b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80088b4:	d004      	beq.n	80088c0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	689b      	ldr	r3, [r3, #8]
 80088ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80088be:	d107      	bne.n	80088d0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	681a      	ldr	r2, [r3, #0]
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80088ce:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80088d8:	d10f      	bne.n	80088fa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	681a      	ldr	r2, [r3, #0]
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80088e8:	601a      	str	r2, [r3, #0]
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	681a      	ldr	r2, [r3, #0]
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80088f8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	2201      	movs	r2, #1
 80088fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	2200      	movs	r2, #0
 8008906:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800890a:	2303      	movs	r3, #3
 800890c:	e017      	b.n	800893e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800890e:	697b      	ldr	r3, [r7, #20]
 8008910:	2b00      	cmp	r3, #0
 8008912:	d101      	bne.n	8008918 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008914:	2300      	movs	r3, #0
 8008916:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008918:	697b      	ldr	r3, [r7, #20]
 800891a:	3b01      	subs	r3, #1
 800891c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	689a      	ldr	r2, [r3, #8]
 8008924:	68bb      	ldr	r3, [r7, #8]
 8008926:	4013      	ands	r3, r2
 8008928:	68ba      	ldr	r2, [r7, #8]
 800892a:	429a      	cmp	r2, r3
 800892c:	bf0c      	ite	eq
 800892e:	2301      	moveq	r3, #1
 8008930:	2300      	movne	r3, #0
 8008932:	b2db      	uxtb	r3, r3
 8008934:	461a      	mov	r2, r3
 8008936:	79fb      	ldrb	r3, [r7, #7]
 8008938:	429a      	cmp	r2, r3
 800893a:	d19b      	bne.n	8008874 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800893c:	2300      	movs	r3, #0
}
 800893e:	4618      	mov	r0, r3
 8008940:	3720      	adds	r7, #32
 8008942:	46bd      	mov	sp, r7
 8008944:	bd80      	pop	{r7, pc}
 8008946:	bf00      	nop
 8008948:	2000000c 	.word	0x2000000c

0800894c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800894c:	b580      	push	{r7, lr}
 800894e:	b088      	sub	sp, #32
 8008950:	af02      	add	r7, sp, #8
 8008952:	60f8      	str	r0, [r7, #12]
 8008954:	60b9      	str	r1, [r7, #8]
 8008956:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008958:	4b1b      	ldr	r3, [pc, #108]	; (80089c8 <SPI_EndRxTxTransaction+0x7c>)
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	4a1b      	ldr	r2, [pc, #108]	; (80089cc <SPI_EndRxTxTransaction+0x80>)
 800895e:	fba2 2303 	umull	r2, r3, r2, r3
 8008962:	0d5b      	lsrs	r3, r3, #21
 8008964:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008968:	fb02 f303 	mul.w	r3, r2, r3
 800896c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	685b      	ldr	r3, [r3, #4]
 8008972:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008976:	d112      	bne.n	800899e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	9300      	str	r3, [sp, #0]
 800897c:	68bb      	ldr	r3, [r7, #8]
 800897e:	2200      	movs	r2, #0
 8008980:	2180      	movs	r1, #128	; 0x80
 8008982:	68f8      	ldr	r0, [r7, #12]
 8008984:	f7ff ff5a 	bl	800883c <SPI_WaitFlagStateUntilTimeout>
 8008988:	4603      	mov	r3, r0
 800898a:	2b00      	cmp	r3, #0
 800898c:	d016      	beq.n	80089bc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008992:	f043 0220 	orr.w	r2, r3, #32
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800899a:	2303      	movs	r3, #3
 800899c:	e00f      	b.n	80089be <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800899e:	697b      	ldr	r3, [r7, #20]
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d00a      	beq.n	80089ba <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80089a4:	697b      	ldr	r3, [r7, #20]
 80089a6:	3b01      	subs	r3, #1
 80089a8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	689b      	ldr	r3, [r3, #8]
 80089b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089b4:	2b80      	cmp	r3, #128	; 0x80
 80089b6:	d0f2      	beq.n	800899e <SPI_EndRxTxTransaction+0x52>
 80089b8:	e000      	b.n	80089bc <SPI_EndRxTxTransaction+0x70>
        break;
 80089ba:	bf00      	nop
  }

  return HAL_OK;
 80089bc:	2300      	movs	r3, #0
}
 80089be:	4618      	mov	r0, r3
 80089c0:	3718      	adds	r7, #24
 80089c2:	46bd      	mov	sp, r7
 80089c4:	bd80      	pop	{r7, pc}
 80089c6:	bf00      	nop
 80089c8:	2000000c 	.word	0x2000000c
 80089cc:	165e9f81 	.word	0x165e9f81

080089d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80089d0:	b580      	push	{r7, lr}
 80089d2:	b082      	sub	sp, #8
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d101      	bne.n	80089e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80089de:	2301      	movs	r3, #1
 80089e0:	e041      	b.n	8008a66 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80089e8:	b2db      	uxtb	r3, r3
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d106      	bne.n	80089fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	2200      	movs	r2, #0
 80089f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80089f6:	6878      	ldr	r0, [r7, #4]
 80089f8:	f7fb f9ae 	bl	8003d58 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	2202      	movs	r2, #2
 8008a00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681a      	ldr	r2, [r3, #0]
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	3304      	adds	r3, #4
 8008a0c:	4619      	mov	r1, r3
 8008a0e:	4610      	mov	r0, r2
 8008a10:	f000 fdec 	bl	80095ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	2201      	movs	r2, #1
 8008a18:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	2201      	movs	r2, #1
 8008a20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	2201      	movs	r2, #1
 8008a28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2201      	movs	r2, #1
 8008a30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	2201      	movs	r2, #1
 8008a38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	2201      	movs	r2, #1
 8008a40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	2201      	movs	r2, #1
 8008a48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	2201      	movs	r2, #1
 8008a50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	2201      	movs	r2, #1
 8008a58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	2201      	movs	r2, #1
 8008a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008a64:	2300      	movs	r3, #0
}
 8008a66:	4618      	mov	r0, r3
 8008a68:	3708      	adds	r7, #8
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	bd80      	pop	{r7, pc}
	...

08008a70 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008a70:	b480      	push	{r7}
 8008a72:	b085      	sub	sp, #20
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a7e:	b2db      	uxtb	r3, r3
 8008a80:	2b01      	cmp	r3, #1
 8008a82:	d001      	beq.n	8008a88 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008a84:	2301      	movs	r3, #1
 8008a86:	e04e      	b.n	8008b26 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	2202      	movs	r2, #2
 8008a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	68da      	ldr	r2, [r3, #12]
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	f042 0201 	orr.w	r2, r2, #1
 8008a9e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	4a23      	ldr	r2, [pc, #140]	; (8008b34 <HAL_TIM_Base_Start_IT+0xc4>)
 8008aa6:	4293      	cmp	r3, r2
 8008aa8:	d022      	beq.n	8008af0 <HAL_TIM_Base_Start_IT+0x80>
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ab2:	d01d      	beq.n	8008af0 <HAL_TIM_Base_Start_IT+0x80>
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	4a1f      	ldr	r2, [pc, #124]	; (8008b38 <HAL_TIM_Base_Start_IT+0xc8>)
 8008aba:	4293      	cmp	r3, r2
 8008abc:	d018      	beq.n	8008af0 <HAL_TIM_Base_Start_IT+0x80>
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	4a1e      	ldr	r2, [pc, #120]	; (8008b3c <HAL_TIM_Base_Start_IT+0xcc>)
 8008ac4:	4293      	cmp	r3, r2
 8008ac6:	d013      	beq.n	8008af0 <HAL_TIM_Base_Start_IT+0x80>
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	4a1c      	ldr	r2, [pc, #112]	; (8008b40 <HAL_TIM_Base_Start_IT+0xd0>)
 8008ace:	4293      	cmp	r3, r2
 8008ad0:	d00e      	beq.n	8008af0 <HAL_TIM_Base_Start_IT+0x80>
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	4a1b      	ldr	r2, [pc, #108]	; (8008b44 <HAL_TIM_Base_Start_IT+0xd4>)
 8008ad8:	4293      	cmp	r3, r2
 8008ada:	d009      	beq.n	8008af0 <HAL_TIM_Base_Start_IT+0x80>
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	4a19      	ldr	r2, [pc, #100]	; (8008b48 <HAL_TIM_Base_Start_IT+0xd8>)
 8008ae2:	4293      	cmp	r3, r2
 8008ae4:	d004      	beq.n	8008af0 <HAL_TIM_Base_Start_IT+0x80>
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	4a18      	ldr	r2, [pc, #96]	; (8008b4c <HAL_TIM_Base_Start_IT+0xdc>)
 8008aec:	4293      	cmp	r3, r2
 8008aee:	d111      	bne.n	8008b14 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	689b      	ldr	r3, [r3, #8]
 8008af6:	f003 0307 	and.w	r3, r3, #7
 8008afa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	2b06      	cmp	r3, #6
 8008b00:	d010      	beq.n	8008b24 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	681a      	ldr	r2, [r3, #0]
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	f042 0201 	orr.w	r2, r2, #1
 8008b10:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b12:	e007      	b.n	8008b24 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	681a      	ldr	r2, [r3, #0]
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	f042 0201 	orr.w	r2, r2, #1
 8008b22:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008b24:	2300      	movs	r3, #0
}
 8008b26:	4618      	mov	r0, r3
 8008b28:	3714      	adds	r7, #20
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b30:	4770      	bx	lr
 8008b32:	bf00      	nop
 8008b34:	40010000 	.word	0x40010000
 8008b38:	40000400 	.word	0x40000400
 8008b3c:	40000800 	.word	0x40000800
 8008b40:	40000c00 	.word	0x40000c00
 8008b44:	40010400 	.word	0x40010400
 8008b48:	40014000 	.word	0x40014000
 8008b4c:	40001800 	.word	0x40001800

08008b50 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008b50:	b580      	push	{r7, lr}
 8008b52:	b082      	sub	sp, #8
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d101      	bne.n	8008b62 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008b5e:	2301      	movs	r3, #1
 8008b60:	e041      	b.n	8008be6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b68:	b2db      	uxtb	r3, r3
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d106      	bne.n	8008b7c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	2200      	movs	r2, #0
 8008b72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008b76:	6878      	ldr	r0, [r7, #4]
 8008b78:	f000 f839 	bl	8008bee <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	2202      	movs	r2, #2
 8008b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681a      	ldr	r2, [r3, #0]
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	3304      	adds	r3, #4
 8008b8c:	4619      	mov	r1, r3
 8008b8e:	4610      	mov	r0, r2
 8008b90:	f000 fd2c 	bl	80095ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	2201      	movs	r2, #1
 8008b98:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	2201      	movs	r2, #1
 8008ba0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	2201      	movs	r2, #1
 8008ba8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	2201      	movs	r2, #1
 8008bb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	2201      	movs	r2, #1
 8008bb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	2201      	movs	r2, #1
 8008bc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	2201      	movs	r2, #1
 8008bc8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	2201      	movs	r2, #1
 8008bd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	2201      	movs	r2, #1
 8008bd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	2201      	movs	r2, #1
 8008be0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008be4:	2300      	movs	r3, #0
}
 8008be6:	4618      	mov	r0, r3
 8008be8:	3708      	adds	r7, #8
 8008bea:	46bd      	mov	sp, r7
 8008bec:	bd80      	pop	{r7, pc}

08008bee <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008bee:	b480      	push	{r7}
 8008bf0:	b083      	sub	sp, #12
 8008bf2:	af00      	add	r7, sp, #0
 8008bf4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008bf6:	bf00      	nop
 8008bf8:	370c      	adds	r7, #12
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c00:	4770      	bx	lr
	...

08008c04 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008c04:	b580      	push	{r7, lr}
 8008c06:	b084      	sub	sp, #16
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]
 8008c0c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008c0e:	683b      	ldr	r3, [r7, #0]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d109      	bne.n	8008c28 <HAL_TIM_PWM_Start+0x24>
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008c1a:	b2db      	uxtb	r3, r3
 8008c1c:	2b01      	cmp	r3, #1
 8008c1e:	bf14      	ite	ne
 8008c20:	2301      	movne	r3, #1
 8008c22:	2300      	moveq	r3, #0
 8008c24:	b2db      	uxtb	r3, r3
 8008c26:	e022      	b.n	8008c6e <HAL_TIM_PWM_Start+0x6a>
 8008c28:	683b      	ldr	r3, [r7, #0]
 8008c2a:	2b04      	cmp	r3, #4
 8008c2c:	d109      	bne.n	8008c42 <HAL_TIM_PWM_Start+0x3e>
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008c34:	b2db      	uxtb	r3, r3
 8008c36:	2b01      	cmp	r3, #1
 8008c38:	bf14      	ite	ne
 8008c3a:	2301      	movne	r3, #1
 8008c3c:	2300      	moveq	r3, #0
 8008c3e:	b2db      	uxtb	r3, r3
 8008c40:	e015      	b.n	8008c6e <HAL_TIM_PWM_Start+0x6a>
 8008c42:	683b      	ldr	r3, [r7, #0]
 8008c44:	2b08      	cmp	r3, #8
 8008c46:	d109      	bne.n	8008c5c <HAL_TIM_PWM_Start+0x58>
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008c4e:	b2db      	uxtb	r3, r3
 8008c50:	2b01      	cmp	r3, #1
 8008c52:	bf14      	ite	ne
 8008c54:	2301      	movne	r3, #1
 8008c56:	2300      	moveq	r3, #0
 8008c58:	b2db      	uxtb	r3, r3
 8008c5a:	e008      	b.n	8008c6e <HAL_TIM_PWM_Start+0x6a>
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008c62:	b2db      	uxtb	r3, r3
 8008c64:	2b01      	cmp	r3, #1
 8008c66:	bf14      	ite	ne
 8008c68:	2301      	movne	r3, #1
 8008c6a:	2300      	moveq	r3, #0
 8008c6c:	b2db      	uxtb	r3, r3
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d001      	beq.n	8008c76 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8008c72:	2301      	movs	r3, #1
 8008c74:	e07c      	b.n	8008d70 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008c76:	683b      	ldr	r3, [r7, #0]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d104      	bne.n	8008c86 <HAL_TIM_PWM_Start+0x82>
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	2202      	movs	r2, #2
 8008c80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008c84:	e013      	b.n	8008cae <HAL_TIM_PWM_Start+0xaa>
 8008c86:	683b      	ldr	r3, [r7, #0]
 8008c88:	2b04      	cmp	r3, #4
 8008c8a:	d104      	bne.n	8008c96 <HAL_TIM_PWM_Start+0x92>
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	2202      	movs	r2, #2
 8008c90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008c94:	e00b      	b.n	8008cae <HAL_TIM_PWM_Start+0xaa>
 8008c96:	683b      	ldr	r3, [r7, #0]
 8008c98:	2b08      	cmp	r3, #8
 8008c9a:	d104      	bne.n	8008ca6 <HAL_TIM_PWM_Start+0xa2>
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	2202      	movs	r2, #2
 8008ca0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008ca4:	e003      	b.n	8008cae <HAL_TIM_PWM_Start+0xaa>
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	2202      	movs	r2, #2
 8008caa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	2201      	movs	r2, #1
 8008cb4:	6839      	ldr	r1, [r7, #0]
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	f001 f93e 	bl	8009f38 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	4a2d      	ldr	r2, [pc, #180]	; (8008d78 <HAL_TIM_PWM_Start+0x174>)
 8008cc2:	4293      	cmp	r3, r2
 8008cc4:	d004      	beq.n	8008cd0 <HAL_TIM_PWM_Start+0xcc>
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	4a2c      	ldr	r2, [pc, #176]	; (8008d7c <HAL_TIM_PWM_Start+0x178>)
 8008ccc:	4293      	cmp	r3, r2
 8008cce:	d101      	bne.n	8008cd4 <HAL_TIM_PWM_Start+0xd0>
 8008cd0:	2301      	movs	r3, #1
 8008cd2:	e000      	b.n	8008cd6 <HAL_TIM_PWM_Start+0xd2>
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d007      	beq.n	8008cea <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008ce8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	4a22      	ldr	r2, [pc, #136]	; (8008d78 <HAL_TIM_PWM_Start+0x174>)
 8008cf0:	4293      	cmp	r3, r2
 8008cf2:	d022      	beq.n	8008d3a <HAL_TIM_PWM_Start+0x136>
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008cfc:	d01d      	beq.n	8008d3a <HAL_TIM_PWM_Start+0x136>
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	4a1f      	ldr	r2, [pc, #124]	; (8008d80 <HAL_TIM_PWM_Start+0x17c>)
 8008d04:	4293      	cmp	r3, r2
 8008d06:	d018      	beq.n	8008d3a <HAL_TIM_PWM_Start+0x136>
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	4a1d      	ldr	r2, [pc, #116]	; (8008d84 <HAL_TIM_PWM_Start+0x180>)
 8008d0e:	4293      	cmp	r3, r2
 8008d10:	d013      	beq.n	8008d3a <HAL_TIM_PWM_Start+0x136>
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	4a1c      	ldr	r2, [pc, #112]	; (8008d88 <HAL_TIM_PWM_Start+0x184>)
 8008d18:	4293      	cmp	r3, r2
 8008d1a:	d00e      	beq.n	8008d3a <HAL_TIM_PWM_Start+0x136>
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	4a16      	ldr	r2, [pc, #88]	; (8008d7c <HAL_TIM_PWM_Start+0x178>)
 8008d22:	4293      	cmp	r3, r2
 8008d24:	d009      	beq.n	8008d3a <HAL_TIM_PWM_Start+0x136>
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	4a18      	ldr	r2, [pc, #96]	; (8008d8c <HAL_TIM_PWM_Start+0x188>)
 8008d2c:	4293      	cmp	r3, r2
 8008d2e:	d004      	beq.n	8008d3a <HAL_TIM_PWM_Start+0x136>
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	4a16      	ldr	r2, [pc, #88]	; (8008d90 <HAL_TIM_PWM_Start+0x18c>)
 8008d36:	4293      	cmp	r3, r2
 8008d38:	d111      	bne.n	8008d5e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	689b      	ldr	r3, [r3, #8]
 8008d40:	f003 0307 	and.w	r3, r3, #7
 8008d44:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	2b06      	cmp	r3, #6
 8008d4a:	d010      	beq.n	8008d6e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	681a      	ldr	r2, [r3, #0]
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	f042 0201 	orr.w	r2, r2, #1
 8008d5a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d5c:	e007      	b.n	8008d6e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	681a      	ldr	r2, [r3, #0]
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	f042 0201 	orr.w	r2, r2, #1
 8008d6c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008d6e:	2300      	movs	r3, #0
}
 8008d70:	4618      	mov	r0, r3
 8008d72:	3710      	adds	r7, #16
 8008d74:	46bd      	mov	sp, r7
 8008d76:	bd80      	pop	{r7, pc}
 8008d78:	40010000 	.word	0x40010000
 8008d7c:	40010400 	.word	0x40010400
 8008d80:	40000400 	.word	0x40000400
 8008d84:	40000800 	.word	0x40000800
 8008d88:	40000c00 	.word	0x40000c00
 8008d8c:	40014000 	.word	0x40014000
 8008d90:	40001800 	.word	0x40001800

08008d94 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8008d94:	b580      	push	{r7, lr}
 8008d96:	b082      	sub	sp, #8
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d101      	bne.n	8008da6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8008da2:	2301      	movs	r3, #1
 8008da4:	e041      	b.n	8008e2a <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008dac:	b2db      	uxtb	r3, r3
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d106      	bne.n	8008dc0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	2200      	movs	r2, #0
 8008db6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8008dba:	6878      	ldr	r0, [r7, #4]
 8008dbc:	f000 f839 	bl	8008e32 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	2202      	movs	r2, #2
 8008dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681a      	ldr	r2, [r3, #0]
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	3304      	adds	r3, #4
 8008dd0:	4619      	mov	r1, r3
 8008dd2:	4610      	mov	r0, r2
 8008dd4:	f000 fc0a 	bl	80095ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	2201      	movs	r2, #1
 8008ddc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	2201      	movs	r2, #1
 8008de4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	2201      	movs	r2, #1
 8008dec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	2201      	movs	r2, #1
 8008df4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	2201      	movs	r2, #1
 8008dfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	2201      	movs	r2, #1
 8008e04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	2201      	movs	r2, #1
 8008e0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	2201      	movs	r2, #1
 8008e14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	2201      	movs	r2, #1
 8008e1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	2201      	movs	r2, #1
 8008e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008e28:	2300      	movs	r3, #0
}
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	3708      	adds	r7, #8
 8008e2e:	46bd      	mov	sp, r7
 8008e30:	bd80      	pop	{r7, pc}

08008e32 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8008e32:	b480      	push	{r7}
 8008e34:	b083      	sub	sp, #12
 8008e36:	af00      	add	r7, sp, #0
 8008e38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8008e3a:	bf00      	nop
 8008e3c:	370c      	adds	r7, #12
 8008e3e:	46bd      	mov	sp, r7
 8008e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e44:	4770      	bx	lr

08008e46 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008e46:	b580      	push	{r7, lr}
 8008e48:	b082      	sub	sp, #8
 8008e4a:	af00      	add	r7, sp, #0
 8008e4c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	691b      	ldr	r3, [r3, #16]
 8008e54:	f003 0302 	and.w	r3, r3, #2
 8008e58:	2b02      	cmp	r3, #2
 8008e5a:	d122      	bne.n	8008ea2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	68db      	ldr	r3, [r3, #12]
 8008e62:	f003 0302 	and.w	r3, r3, #2
 8008e66:	2b02      	cmp	r3, #2
 8008e68:	d11b      	bne.n	8008ea2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	f06f 0202 	mvn.w	r2, #2
 8008e72:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	2201      	movs	r2, #1
 8008e78:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	699b      	ldr	r3, [r3, #24]
 8008e80:	f003 0303 	and.w	r3, r3, #3
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d003      	beq.n	8008e90 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008e88:	6878      	ldr	r0, [r7, #4]
 8008e8a:	f7f9 fa19 	bl	80022c0 <HAL_TIM_IC_CaptureCallback>
 8008e8e:	e005      	b.n	8008e9c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e90:	6878      	ldr	r0, [r7, #4]
 8008e92:	f000 fb8d 	bl	80095b0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e96:	6878      	ldr	r0, [r7, #4]
 8008e98:	f000 fb94 	bl	80095c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	2200      	movs	r2, #0
 8008ea0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	691b      	ldr	r3, [r3, #16]
 8008ea8:	f003 0304 	and.w	r3, r3, #4
 8008eac:	2b04      	cmp	r3, #4
 8008eae:	d122      	bne.n	8008ef6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	68db      	ldr	r3, [r3, #12]
 8008eb6:	f003 0304 	and.w	r3, r3, #4
 8008eba:	2b04      	cmp	r3, #4
 8008ebc:	d11b      	bne.n	8008ef6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	f06f 0204 	mvn.w	r2, #4
 8008ec6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	2202      	movs	r2, #2
 8008ecc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	699b      	ldr	r3, [r3, #24]
 8008ed4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d003      	beq.n	8008ee4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008edc:	6878      	ldr	r0, [r7, #4]
 8008ede:	f7f9 f9ef 	bl	80022c0 <HAL_TIM_IC_CaptureCallback>
 8008ee2:	e005      	b.n	8008ef0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008ee4:	6878      	ldr	r0, [r7, #4]
 8008ee6:	f000 fb63 	bl	80095b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008eea:	6878      	ldr	r0, [r7, #4]
 8008eec:	f000 fb6a 	bl	80095c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	691b      	ldr	r3, [r3, #16]
 8008efc:	f003 0308 	and.w	r3, r3, #8
 8008f00:	2b08      	cmp	r3, #8
 8008f02:	d122      	bne.n	8008f4a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	68db      	ldr	r3, [r3, #12]
 8008f0a:	f003 0308 	and.w	r3, r3, #8
 8008f0e:	2b08      	cmp	r3, #8
 8008f10:	d11b      	bne.n	8008f4a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	f06f 0208 	mvn.w	r2, #8
 8008f1a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	2204      	movs	r2, #4
 8008f20:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	69db      	ldr	r3, [r3, #28]
 8008f28:	f003 0303 	and.w	r3, r3, #3
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d003      	beq.n	8008f38 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008f30:	6878      	ldr	r0, [r7, #4]
 8008f32:	f7f9 f9c5 	bl	80022c0 <HAL_TIM_IC_CaptureCallback>
 8008f36:	e005      	b.n	8008f44 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f38:	6878      	ldr	r0, [r7, #4]
 8008f3a:	f000 fb39 	bl	80095b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f3e:	6878      	ldr	r0, [r7, #4]
 8008f40:	f000 fb40 	bl	80095c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	2200      	movs	r2, #0
 8008f48:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	691b      	ldr	r3, [r3, #16]
 8008f50:	f003 0310 	and.w	r3, r3, #16
 8008f54:	2b10      	cmp	r3, #16
 8008f56:	d122      	bne.n	8008f9e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	68db      	ldr	r3, [r3, #12]
 8008f5e:	f003 0310 	and.w	r3, r3, #16
 8008f62:	2b10      	cmp	r3, #16
 8008f64:	d11b      	bne.n	8008f9e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	f06f 0210 	mvn.w	r2, #16
 8008f6e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	2208      	movs	r2, #8
 8008f74:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	69db      	ldr	r3, [r3, #28]
 8008f7c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d003      	beq.n	8008f8c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008f84:	6878      	ldr	r0, [r7, #4]
 8008f86:	f7f9 f99b 	bl	80022c0 <HAL_TIM_IC_CaptureCallback>
 8008f8a:	e005      	b.n	8008f98 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f8c:	6878      	ldr	r0, [r7, #4]
 8008f8e:	f000 fb0f 	bl	80095b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f92:	6878      	ldr	r0, [r7, #4]
 8008f94:	f000 fb16 	bl	80095c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	2200      	movs	r2, #0
 8008f9c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	691b      	ldr	r3, [r3, #16]
 8008fa4:	f003 0301 	and.w	r3, r3, #1
 8008fa8:	2b01      	cmp	r3, #1
 8008faa:	d10e      	bne.n	8008fca <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	68db      	ldr	r3, [r3, #12]
 8008fb2:	f003 0301 	and.w	r3, r3, #1
 8008fb6:	2b01      	cmp	r3, #1
 8008fb8:	d107      	bne.n	8008fca <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	f06f 0201 	mvn.w	r2, #1
 8008fc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008fc4:	6878      	ldr	r0, [r7, #4]
 8008fc6:	f7f9 fa1d 	bl	8002404 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	691b      	ldr	r3, [r3, #16]
 8008fd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008fd4:	2b80      	cmp	r3, #128	; 0x80
 8008fd6:	d10e      	bne.n	8008ff6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	68db      	ldr	r3, [r3, #12]
 8008fde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008fe2:	2b80      	cmp	r3, #128	; 0x80
 8008fe4:	d107      	bne.n	8008ff6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008fee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008ff0:	6878      	ldr	r0, [r7, #4]
 8008ff2:	f001 f84d 	bl	800a090 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	691b      	ldr	r3, [r3, #16]
 8008ffc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009000:	2b40      	cmp	r3, #64	; 0x40
 8009002:	d10e      	bne.n	8009022 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	68db      	ldr	r3, [r3, #12]
 800900a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800900e:	2b40      	cmp	r3, #64	; 0x40
 8009010:	d107      	bne.n	8009022 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800901a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800901c:	6878      	ldr	r0, [r7, #4]
 800901e:	f000 fadb 	bl	80095d8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	691b      	ldr	r3, [r3, #16]
 8009028:	f003 0320 	and.w	r3, r3, #32
 800902c:	2b20      	cmp	r3, #32
 800902e:	d10e      	bne.n	800904e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	68db      	ldr	r3, [r3, #12]
 8009036:	f003 0320 	and.w	r3, r3, #32
 800903a:	2b20      	cmp	r3, #32
 800903c:	d107      	bne.n	800904e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	f06f 0220 	mvn.w	r2, #32
 8009046:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009048:	6878      	ldr	r0, [r7, #4]
 800904a:	f001 f817 	bl	800a07c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800904e:	bf00      	nop
 8009050:	3708      	adds	r7, #8
 8009052:	46bd      	mov	sp, r7
 8009054:	bd80      	pop	{r7, pc}

08009056 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8009056:	b580      	push	{r7, lr}
 8009058:	b086      	sub	sp, #24
 800905a:	af00      	add	r7, sp, #0
 800905c:	60f8      	str	r0, [r7, #12]
 800905e:	60b9      	str	r1, [r7, #8]
 8009060:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009062:	2300      	movs	r3, #0
 8009064:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800906c:	2b01      	cmp	r3, #1
 800906e:	d101      	bne.n	8009074 <HAL_TIM_IC_ConfigChannel+0x1e>
 8009070:	2302      	movs	r3, #2
 8009072:	e088      	b.n	8009186 <HAL_TIM_IC_ConfigChannel+0x130>
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	2201      	movs	r2, #1
 8009078:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	2b00      	cmp	r3, #0
 8009080:	d11b      	bne.n	80090ba <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	6818      	ldr	r0, [r3, #0]
 8009086:	68bb      	ldr	r3, [r7, #8]
 8009088:	6819      	ldr	r1, [r3, #0]
 800908a:	68bb      	ldr	r3, [r7, #8]
 800908c:	685a      	ldr	r2, [r3, #4]
 800908e:	68bb      	ldr	r3, [r7, #8]
 8009090:	68db      	ldr	r3, [r3, #12]
 8009092:	f000 fd8d 	bl	8009bb0 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	699a      	ldr	r2, [r3, #24]
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	f022 020c 	bic.w	r2, r2, #12
 80090a4:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	6999      	ldr	r1, [r3, #24]
 80090ac:	68bb      	ldr	r3, [r7, #8]
 80090ae:	689a      	ldr	r2, [r3, #8]
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	430a      	orrs	r2, r1
 80090b6:	619a      	str	r2, [r3, #24]
 80090b8:	e060      	b.n	800917c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	2b04      	cmp	r3, #4
 80090be:	d11c      	bne.n	80090fa <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	6818      	ldr	r0, [r3, #0]
 80090c4:	68bb      	ldr	r3, [r7, #8]
 80090c6:	6819      	ldr	r1, [r3, #0]
 80090c8:	68bb      	ldr	r3, [r7, #8]
 80090ca:	685a      	ldr	r2, [r3, #4]
 80090cc:	68bb      	ldr	r3, [r7, #8]
 80090ce:	68db      	ldr	r3, [r3, #12]
 80090d0:	f000 fe11 	bl	8009cf6 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	699a      	ldr	r2, [r3, #24]
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80090e2:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	6999      	ldr	r1, [r3, #24]
 80090ea:	68bb      	ldr	r3, [r7, #8]
 80090ec:	689b      	ldr	r3, [r3, #8]
 80090ee:	021a      	lsls	r2, r3, #8
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	430a      	orrs	r2, r1
 80090f6:	619a      	str	r2, [r3, #24]
 80090f8:	e040      	b.n	800917c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	2b08      	cmp	r3, #8
 80090fe:	d11b      	bne.n	8009138 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	6818      	ldr	r0, [r3, #0]
 8009104:	68bb      	ldr	r3, [r7, #8]
 8009106:	6819      	ldr	r1, [r3, #0]
 8009108:	68bb      	ldr	r3, [r7, #8]
 800910a:	685a      	ldr	r2, [r3, #4]
 800910c:	68bb      	ldr	r3, [r7, #8]
 800910e:	68db      	ldr	r3, [r3, #12]
 8009110:	f000 fe5e 	bl	8009dd0 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	69da      	ldr	r2, [r3, #28]
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	f022 020c 	bic.w	r2, r2, #12
 8009122:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	69d9      	ldr	r1, [r3, #28]
 800912a:	68bb      	ldr	r3, [r7, #8]
 800912c:	689a      	ldr	r2, [r3, #8]
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	430a      	orrs	r2, r1
 8009134:	61da      	str	r2, [r3, #28]
 8009136:	e021      	b.n	800917c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	2b0c      	cmp	r3, #12
 800913c:	d11c      	bne.n	8009178 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	6818      	ldr	r0, [r3, #0]
 8009142:	68bb      	ldr	r3, [r7, #8]
 8009144:	6819      	ldr	r1, [r3, #0]
 8009146:	68bb      	ldr	r3, [r7, #8]
 8009148:	685a      	ldr	r2, [r3, #4]
 800914a:	68bb      	ldr	r3, [r7, #8]
 800914c:	68db      	ldr	r3, [r3, #12]
 800914e:	f000 fe7b 	bl	8009e48 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	69da      	ldr	r2, [r3, #28]
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8009160:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	69d9      	ldr	r1, [r3, #28]
 8009168:	68bb      	ldr	r3, [r7, #8]
 800916a:	689b      	ldr	r3, [r3, #8]
 800916c:	021a      	lsls	r2, r3, #8
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	430a      	orrs	r2, r1
 8009174:	61da      	str	r2, [r3, #28]
 8009176:	e001      	b.n	800917c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8009178:	2301      	movs	r3, #1
 800917a:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	2200      	movs	r2, #0
 8009180:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009184:	7dfb      	ldrb	r3, [r7, #23]
}
 8009186:	4618      	mov	r0, r3
 8009188:	3718      	adds	r7, #24
 800918a:	46bd      	mov	sp, r7
 800918c:	bd80      	pop	{r7, pc}
	...

08009190 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009190:	b580      	push	{r7, lr}
 8009192:	b086      	sub	sp, #24
 8009194:	af00      	add	r7, sp, #0
 8009196:	60f8      	str	r0, [r7, #12]
 8009198:	60b9      	str	r1, [r7, #8]
 800919a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800919c:	2300      	movs	r3, #0
 800919e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80091a6:	2b01      	cmp	r3, #1
 80091a8:	d101      	bne.n	80091ae <HAL_TIM_PWM_ConfigChannel+0x1e>
 80091aa:	2302      	movs	r3, #2
 80091ac:	e0ae      	b.n	800930c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	2201      	movs	r2, #1
 80091b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	2b0c      	cmp	r3, #12
 80091ba:	f200 809f 	bhi.w	80092fc <HAL_TIM_PWM_ConfigChannel+0x16c>
 80091be:	a201      	add	r2, pc, #4	; (adr r2, 80091c4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80091c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091c4:	080091f9 	.word	0x080091f9
 80091c8:	080092fd 	.word	0x080092fd
 80091cc:	080092fd 	.word	0x080092fd
 80091d0:	080092fd 	.word	0x080092fd
 80091d4:	08009239 	.word	0x08009239
 80091d8:	080092fd 	.word	0x080092fd
 80091dc:	080092fd 	.word	0x080092fd
 80091e0:	080092fd 	.word	0x080092fd
 80091e4:	0800927b 	.word	0x0800927b
 80091e8:	080092fd 	.word	0x080092fd
 80091ec:	080092fd 	.word	0x080092fd
 80091f0:	080092fd 	.word	0x080092fd
 80091f4:	080092bb 	.word	0x080092bb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	68b9      	ldr	r1, [r7, #8]
 80091fe:	4618      	mov	r0, r3
 8009200:	f000 fa94 	bl	800972c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	699a      	ldr	r2, [r3, #24]
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	f042 0208 	orr.w	r2, r2, #8
 8009212:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	699a      	ldr	r2, [r3, #24]
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	f022 0204 	bic.w	r2, r2, #4
 8009222:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	6999      	ldr	r1, [r3, #24]
 800922a:	68bb      	ldr	r3, [r7, #8]
 800922c:	691a      	ldr	r2, [r3, #16]
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	430a      	orrs	r2, r1
 8009234:	619a      	str	r2, [r3, #24]
      break;
 8009236:	e064      	b.n	8009302 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	68b9      	ldr	r1, [r7, #8]
 800923e:	4618      	mov	r0, r3
 8009240:	f000 fae4 	bl	800980c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	699a      	ldr	r2, [r3, #24]
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009252:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	699a      	ldr	r2, [r3, #24]
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009262:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	6999      	ldr	r1, [r3, #24]
 800926a:	68bb      	ldr	r3, [r7, #8]
 800926c:	691b      	ldr	r3, [r3, #16]
 800926e:	021a      	lsls	r2, r3, #8
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	430a      	orrs	r2, r1
 8009276:	619a      	str	r2, [r3, #24]
      break;
 8009278:	e043      	b.n	8009302 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	68b9      	ldr	r1, [r7, #8]
 8009280:	4618      	mov	r0, r3
 8009282:	f000 fb39 	bl	80098f8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	69da      	ldr	r2, [r3, #28]
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	f042 0208 	orr.w	r2, r2, #8
 8009294:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	69da      	ldr	r2, [r3, #28]
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	f022 0204 	bic.w	r2, r2, #4
 80092a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	69d9      	ldr	r1, [r3, #28]
 80092ac:	68bb      	ldr	r3, [r7, #8]
 80092ae:	691a      	ldr	r2, [r3, #16]
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	430a      	orrs	r2, r1
 80092b6:	61da      	str	r2, [r3, #28]
      break;
 80092b8:	e023      	b.n	8009302 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	68b9      	ldr	r1, [r7, #8]
 80092c0:	4618      	mov	r0, r3
 80092c2:	f000 fb8d 	bl	80099e0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	69da      	ldr	r2, [r3, #28]
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80092d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	69da      	ldr	r2, [r3, #28]
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80092e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	69d9      	ldr	r1, [r3, #28]
 80092ec:	68bb      	ldr	r3, [r7, #8]
 80092ee:	691b      	ldr	r3, [r3, #16]
 80092f0:	021a      	lsls	r2, r3, #8
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	430a      	orrs	r2, r1
 80092f8:	61da      	str	r2, [r3, #28]
      break;
 80092fa:	e002      	b.n	8009302 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80092fc:	2301      	movs	r3, #1
 80092fe:	75fb      	strb	r3, [r7, #23]
      break;
 8009300:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	2200      	movs	r2, #0
 8009306:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800930a:	7dfb      	ldrb	r3, [r7, #23]
}
 800930c:	4618      	mov	r0, r3
 800930e:	3718      	adds	r7, #24
 8009310:	46bd      	mov	sp, r7
 8009312:	bd80      	pop	{r7, pc}

08009314 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009314:	b580      	push	{r7, lr}
 8009316:	b084      	sub	sp, #16
 8009318:	af00      	add	r7, sp, #0
 800931a:	6078      	str	r0, [r7, #4]
 800931c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800931e:	2300      	movs	r3, #0
 8009320:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009328:	2b01      	cmp	r3, #1
 800932a:	d101      	bne.n	8009330 <HAL_TIM_ConfigClockSource+0x1c>
 800932c:	2302      	movs	r3, #2
 800932e:	e0b4      	b.n	800949a <HAL_TIM_ConfigClockSource+0x186>
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	2201      	movs	r2, #1
 8009334:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	2202      	movs	r2, #2
 800933c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	689b      	ldr	r3, [r3, #8]
 8009346:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009348:	68bb      	ldr	r3, [r7, #8]
 800934a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800934e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009350:	68bb      	ldr	r3, [r7, #8]
 8009352:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009356:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	68ba      	ldr	r2, [r7, #8]
 800935e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009360:	683b      	ldr	r3, [r7, #0]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009368:	d03e      	beq.n	80093e8 <HAL_TIM_ConfigClockSource+0xd4>
 800936a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800936e:	f200 8087 	bhi.w	8009480 <HAL_TIM_ConfigClockSource+0x16c>
 8009372:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009376:	f000 8086 	beq.w	8009486 <HAL_TIM_ConfigClockSource+0x172>
 800937a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800937e:	d87f      	bhi.n	8009480 <HAL_TIM_ConfigClockSource+0x16c>
 8009380:	2b70      	cmp	r3, #112	; 0x70
 8009382:	d01a      	beq.n	80093ba <HAL_TIM_ConfigClockSource+0xa6>
 8009384:	2b70      	cmp	r3, #112	; 0x70
 8009386:	d87b      	bhi.n	8009480 <HAL_TIM_ConfigClockSource+0x16c>
 8009388:	2b60      	cmp	r3, #96	; 0x60
 800938a:	d050      	beq.n	800942e <HAL_TIM_ConfigClockSource+0x11a>
 800938c:	2b60      	cmp	r3, #96	; 0x60
 800938e:	d877      	bhi.n	8009480 <HAL_TIM_ConfigClockSource+0x16c>
 8009390:	2b50      	cmp	r3, #80	; 0x50
 8009392:	d03c      	beq.n	800940e <HAL_TIM_ConfigClockSource+0xfa>
 8009394:	2b50      	cmp	r3, #80	; 0x50
 8009396:	d873      	bhi.n	8009480 <HAL_TIM_ConfigClockSource+0x16c>
 8009398:	2b40      	cmp	r3, #64	; 0x40
 800939a:	d058      	beq.n	800944e <HAL_TIM_ConfigClockSource+0x13a>
 800939c:	2b40      	cmp	r3, #64	; 0x40
 800939e:	d86f      	bhi.n	8009480 <HAL_TIM_ConfigClockSource+0x16c>
 80093a0:	2b30      	cmp	r3, #48	; 0x30
 80093a2:	d064      	beq.n	800946e <HAL_TIM_ConfigClockSource+0x15a>
 80093a4:	2b30      	cmp	r3, #48	; 0x30
 80093a6:	d86b      	bhi.n	8009480 <HAL_TIM_ConfigClockSource+0x16c>
 80093a8:	2b20      	cmp	r3, #32
 80093aa:	d060      	beq.n	800946e <HAL_TIM_ConfigClockSource+0x15a>
 80093ac:	2b20      	cmp	r3, #32
 80093ae:	d867      	bhi.n	8009480 <HAL_TIM_ConfigClockSource+0x16c>
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d05c      	beq.n	800946e <HAL_TIM_ConfigClockSource+0x15a>
 80093b4:	2b10      	cmp	r3, #16
 80093b6:	d05a      	beq.n	800946e <HAL_TIM_ConfigClockSource+0x15a>
 80093b8:	e062      	b.n	8009480 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	6818      	ldr	r0, [r3, #0]
 80093be:	683b      	ldr	r3, [r7, #0]
 80093c0:	6899      	ldr	r1, [r3, #8]
 80093c2:	683b      	ldr	r3, [r7, #0]
 80093c4:	685a      	ldr	r2, [r3, #4]
 80093c6:	683b      	ldr	r3, [r7, #0]
 80093c8:	68db      	ldr	r3, [r3, #12]
 80093ca:	f000 fd95 	bl	8009ef8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	689b      	ldr	r3, [r3, #8]
 80093d4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80093d6:	68bb      	ldr	r3, [r7, #8]
 80093d8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80093dc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	68ba      	ldr	r2, [r7, #8]
 80093e4:	609a      	str	r2, [r3, #8]
      break;
 80093e6:	e04f      	b.n	8009488 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	6818      	ldr	r0, [r3, #0]
 80093ec:	683b      	ldr	r3, [r7, #0]
 80093ee:	6899      	ldr	r1, [r3, #8]
 80093f0:	683b      	ldr	r3, [r7, #0]
 80093f2:	685a      	ldr	r2, [r3, #4]
 80093f4:	683b      	ldr	r3, [r7, #0]
 80093f6:	68db      	ldr	r3, [r3, #12]
 80093f8:	f000 fd7e 	bl	8009ef8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	689a      	ldr	r2, [r3, #8]
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800940a:	609a      	str	r2, [r3, #8]
      break;
 800940c:	e03c      	b.n	8009488 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	6818      	ldr	r0, [r3, #0]
 8009412:	683b      	ldr	r3, [r7, #0]
 8009414:	6859      	ldr	r1, [r3, #4]
 8009416:	683b      	ldr	r3, [r7, #0]
 8009418:	68db      	ldr	r3, [r3, #12]
 800941a:	461a      	mov	r2, r3
 800941c:	f000 fc3c 	bl	8009c98 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	2150      	movs	r1, #80	; 0x50
 8009426:	4618      	mov	r0, r3
 8009428:	f000 fd4b 	bl	8009ec2 <TIM_ITRx_SetConfig>
      break;
 800942c:	e02c      	b.n	8009488 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	6818      	ldr	r0, [r3, #0]
 8009432:	683b      	ldr	r3, [r7, #0]
 8009434:	6859      	ldr	r1, [r3, #4]
 8009436:	683b      	ldr	r3, [r7, #0]
 8009438:	68db      	ldr	r3, [r3, #12]
 800943a:	461a      	mov	r2, r3
 800943c:	f000 fc98 	bl	8009d70 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	2160      	movs	r1, #96	; 0x60
 8009446:	4618      	mov	r0, r3
 8009448:	f000 fd3b 	bl	8009ec2 <TIM_ITRx_SetConfig>
      break;
 800944c:	e01c      	b.n	8009488 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	6818      	ldr	r0, [r3, #0]
 8009452:	683b      	ldr	r3, [r7, #0]
 8009454:	6859      	ldr	r1, [r3, #4]
 8009456:	683b      	ldr	r3, [r7, #0]
 8009458:	68db      	ldr	r3, [r3, #12]
 800945a:	461a      	mov	r2, r3
 800945c:	f000 fc1c 	bl	8009c98 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	2140      	movs	r1, #64	; 0x40
 8009466:	4618      	mov	r0, r3
 8009468:	f000 fd2b 	bl	8009ec2 <TIM_ITRx_SetConfig>
      break;
 800946c:	e00c      	b.n	8009488 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681a      	ldr	r2, [r3, #0]
 8009472:	683b      	ldr	r3, [r7, #0]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	4619      	mov	r1, r3
 8009478:	4610      	mov	r0, r2
 800947a:	f000 fd22 	bl	8009ec2 <TIM_ITRx_SetConfig>
      break;
 800947e:	e003      	b.n	8009488 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009480:	2301      	movs	r3, #1
 8009482:	73fb      	strb	r3, [r7, #15]
      break;
 8009484:	e000      	b.n	8009488 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009486:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	2201      	movs	r2, #1
 800948c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	2200      	movs	r2, #0
 8009494:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009498:	7bfb      	ldrb	r3, [r7, #15]
}
 800949a:	4618      	mov	r0, r3
 800949c:	3710      	adds	r7, #16
 800949e:	46bd      	mov	sp, r7
 80094a0:	bd80      	pop	{r7, pc}

080094a2 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80094a2:	b580      	push	{r7, lr}
 80094a4:	b082      	sub	sp, #8
 80094a6:	af00      	add	r7, sp, #0
 80094a8:	6078      	str	r0, [r7, #4]
 80094aa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80094b2:	2b01      	cmp	r3, #1
 80094b4:	d101      	bne.n	80094ba <HAL_TIM_SlaveConfigSynchro+0x18>
 80094b6:	2302      	movs	r3, #2
 80094b8:	e031      	b.n	800951e <HAL_TIM_SlaveConfigSynchro+0x7c>
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	2201      	movs	r2, #1
 80094be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	2202      	movs	r2, #2
 80094c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80094ca:	6839      	ldr	r1, [r7, #0]
 80094cc:	6878      	ldr	r0, [r7, #4]
 80094ce:	f000 fadd 	bl	8009a8c <TIM_SlaveTimer_SetConfig>
 80094d2:	4603      	mov	r3, r0
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d009      	beq.n	80094ec <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	2201      	movs	r2, #1
 80094dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	2200      	movs	r2, #0
 80094e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80094e8:	2301      	movs	r3, #1
 80094ea:	e018      	b.n	800951e <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	68da      	ldr	r2, [r3, #12]
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80094fa:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	68da      	ldr	r2, [r3, #12]
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800950a:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	2201      	movs	r2, #1
 8009510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	2200      	movs	r2, #0
 8009518:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800951c:	2300      	movs	r3, #0
}
 800951e:	4618      	mov	r0, r3
 8009520:	3708      	adds	r7, #8
 8009522:	46bd      	mov	sp, r7
 8009524:	bd80      	pop	{r7, pc}
	...

08009528 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009528:	b480      	push	{r7}
 800952a:	b085      	sub	sp, #20
 800952c:	af00      	add	r7, sp, #0
 800952e:	6078      	str	r0, [r7, #4]
 8009530:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8009532:	2300      	movs	r3, #0
 8009534:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8009536:	683b      	ldr	r3, [r7, #0]
 8009538:	2b0c      	cmp	r3, #12
 800953a:	d831      	bhi.n	80095a0 <HAL_TIM_ReadCapturedValue+0x78>
 800953c:	a201      	add	r2, pc, #4	; (adr r2, 8009544 <HAL_TIM_ReadCapturedValue+0x1c>)
 800953e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009542:	bf00      	nop
 8009544:	08009579 	.word	0x08009579
 8009548:	080095a1 	.word	0x080095a1
 800954c:	080095a1 	.word	0x080095a1
 8009550:	080095a1 	.word	0x080095a1
 8009554:	08009583 	.word	0x08009583
 8009558:	080095a1 	.word	0x080095a1
 800955c:	080095a1 	.word	0x080095a1
 8009560:	080095a1 	.word	0x080095a1
 8009564:	0800958d 	.word	0x0800958d
 8009568:	080095a1 	.word	0x080095a1
 800956c:	080095a1 	.word	0x080095a1
 8009570:	080095a1 	.word	0x080095a1
 8009574:	08009597 	.word	0x08009597
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800957e:	60fb      	str	r3, [r7, #12]

      break;
 8009580:	e00f      	b.n	80095a2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009588:	60fb      	str	r3, [r7, #12]

      break;
 800958a:	e00a      	b.n	80095a2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009592:	60fb      	str	r3, [r7, #12]

      break;
 8009594:	e005      	b.n	80095a2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800959c:	60fb      	str	r3, [r7, #12]

      break;
 800959e:	e000      	b.n	80095a2 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80095a0:	bf00      	nop
  }

  return tmpreg;
 80095a2:	68fb      	ldr	r3, [r7, #12]
}
 80095a4:	4618      	mov	r0, r3
 80095a6:	3714      	adds	r7, #20
 80095a8:	46bd      	mov	sp, r7
 80095aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ae:	4770      	bx	lr

080095b0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80095b0:	b480      	push	{r7}
 80095b2:	b083      	sub	sp, #12
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80095b8:	bf00      	nop
 80095ba:	370c      	adds	r7, #12
 80095bc:	46bd      	mov	sp, r7
 80095be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c2:	4770      	bx	lr

080095c4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80095c4:	b480      	push	{r7}
 80095c6:	b083      	sub	sp, #12
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80095cc:	bf00      	nop
 80095ce:	370c      	adds	r7, #12
 80095d0:	46bd      	mov	sp, r7
 80095d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d6:	4770      	bx	lr

080095d8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80095d8:	b480      	push	{r7}
 80095da:	b083      	sub	sp, #12
 80095dc:	af00      	add	r7, sp, #0
 80095de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80095e0:	bf00      	nop
 80095e2:	370c      	adds	r7, #12
 80095e4:	46bd      	mov	sp, r7
 80095e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ea:	4770      	bx	lr

080095ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80095ec:	b480      	push	{r7}
 80095ee:	b085      	sub	sp, #20
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	6078      	str	r0, [r7, #4]
 80095f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	4a40      	ldr	r2, [pc, #256]	; (8009700 <TIM_Base_SetConfig+0x114>)
 8009600:	4293      	cmp	r3, r2
 8009602:	d013      	beq.n	800962c <TIM_Base_SetConfig+0x40>
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800960a:	d00f      	beq.n	800962c <TIM_Base_SetConfig+0x40>
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	4a3d      	ldr	r2, [pc, #244]	; (8009704 <TIM_Base_SetConfig+0x118>)
 8009610:	4293      	cmp	r3, r2
 8009612:	d00b      	beq.n	800962c <TIM_Base_SetConfig+0x40>
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	4a3c      	ldr	r2, [pc, #240]	; (8009708 <TIM_Base_SetConfig+0x11c>)
 8009618:	4293      	cmp	r3, r2
 800961a:	d007      	beq.n	800962c <TIM_Base_SetConfig+0x40>
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	4a3b      	ldr	r2, [pc, #236]	; (800970c <TIM_Base_SetConfig+0x120>)
 8009620:	4293      	cmp	r3, r2
 8009622:	d003      	beq.n	800962c <TIM_Base_SetConfig+0x40>
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	4a3a      	ldr	r2, [pc, #232]	; (8009710 <TIM_Base_SetConfig+0x124>)
 8009628:	4293      	cmp	r3, r2
 800962a:	d108      	bne.n	800963e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009632:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009634:	683b      	ldr	r3, [r7, #0]
 8009636:	685b      	ldr	r3, [r3, #4]
 8009638:	68fa      	ldr	r2, [r7, #12]
 800963a:	4313      	orrs	r3, r2
 800963c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	4a2f      	ldr	r2, [pc, #188]	; (8009700 <TIM_Base_SetConfig+0x114>)
 8009642:	4293      	cmp	r3, r2
 8009644:	d02b      	beq.n	800969e <TIM_Base_SetConfig+0xb2>
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800964c:	d027      	beq.n	800969e <TIM_Base_SetConfig+0xb2>
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	4a2c      	ldr	r2, [pc, #176]	; (8009704 <TIM_Base_SetConfig+0x118>)
 8009652:	4293      	cmp	r3, r2
 8009654:	d023      	beq.n	800969e <TIM_Base_SetConfig+0xb2>
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	4a2b      	ldr	r2, [pc, #172]	; (8009708 <TIM_Base_SetConfig+0x11c>)
 800965a:	4293      	cmp	r3, r2
 800965c:	d01f      	beq.n	800969e <TIM_Base_SetConfig+0xb2>
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	4a2a      	ldr	r2, [pc, #168]	; (800970c <TIM_Base_SetConfig+0x120>)
 8009662:	4293      	cmp	r3, r2
 8009664:	d01b      	beq.n	800969e <TIM_Base_SetConfig+0xb2>
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	4a29      	ldr	r2, [pc, #164]	; (8009710 <TIM_Base_SetConfig+0x124>)
 800966a:	4293      	cmp	r3, r2
 800966c:	d017      	beq.n	800969e <TIM_Base_SetConfig+0xb2>
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	4a28      	ldr	r2, [pc, #160]	; (8009714 <TIM_Base_SetConfig+0x128>)
 8009672:	4293      	cmp	r3, r2
 8009674:	d013      	beq.n	800969e <TIM_Base_SetConfig+0xb2>
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	4a27      	ldr	r2, [pc, #156]	; (8009718 <TIM_Base_SetConfig+0x12c>)
 800967a:	4293      	cmp	r3, r2
 800967c:	d00f      	beq.n	800969e <TIM_Base_SetConfig+0xb2>
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	4a26      	ldr	r2, [pc, #152]	; (800971c <TIM_Base_SetConfig+0x130>)
 8009682:	4293      	cmp	r3, r2
 8009684:	d00b      	beq.n	800969e <TIM_Base_SetConfig+0xb2>
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	4a25      	ldr	r2, [pc, #148]	; (8009720 <TIM_Base_SetConfig+0x134>)
 800968a:	4293      	cmp	r3, r2
 800968c:	d007      	beq.n	800969e <TIM_Base_SetConfig+0xb2>
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	4a24      	ldr	r2, [pc, #144]	; (8009724 <TIM_Base_SetConfig+0x138>)
 8009692:	4293      	cmp	r3, r2
 8009694:	d003      	beq.n	800969e <TIM_Base_SetConfig+0xb2>
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	4a23      	ldr	r2, [pc, #140]	; (8009728 <TIM_Base_SetConfig+0x13c>)
 800969a:	4293      	cmp	r3, r2
 800969c:	d108      	bne.n	80096b0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80096a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80096a6:	683b      	ldr	r3, [r7, #0]
 80096a8:	68db      	ldr	r3, [r3, #12]
 80096aa:	68fa      	ldr	r2, [r7, #12]
 80096ac:	4313      	orrs	r3, r2
 80096ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80096b6:	683b      	ldr	r3, [r7, #0]
 80096b8:	695b      	ldr	r3, [r3, #20]
 80096ba:	4313      	orrs	r3, r2
 80096bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	68fa      	ldr	r2, [r7, #12]
 80096c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80096c4:	683b      	ldr	r3, [r7, #0]
 80096c6:	689a      	ldr	r2, [r3, #8]
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80096cc:	683b      	ldr	r3, [r7, #0]
 80096ce:	681a      	ldr	r2, [r3, #0]
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	4a0a      	ldr	r2, [pc, #40]	; (8009700 <TIM_Base_SetConfig+0x114>)
 80096d8:	4293      	cmp	r3, r2
 80096da:	d003      	beq.n	80096e4 <TIM_Base_SetConfig+0xf8>
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	4a0c      	ldr	r2, [pc, #48]	; (8009710 <TIM_Base_SetConfig+0x124>)
 80096e0:	4293      	cmp	r3, r2
 80096e2:	d103      	bne.n	80096ec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80096e4:	683b      	ldr	r3, [r7, #0]
 80096e6:	691a      	ldr	r2, [r3, #16]
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	2201      	movs	r2, #1
 80096f0:	615a      	str	r2, [r3, #20]
}
 80096f2:	bf00      	nop
 80096f4:	3714      	adds	r7, #20
 80096f6:	46bd      	mov	sp, r7
 80096f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096fc:	4770      	bx	lr
 80096fe:	bf00      	nop
 8009700:	40010000 	.word	0x40010000
 8009704:	40000400 	.word	0x40000400
 8009708:	40000800 	.word	0x40000800
 800970c:	40000c00 	.word	0x40000c00
 8009710:	40010400 	.word	0x40010400
 8009714:	40014000 	.word	0x40014000
 8009718:	40014400 	.word	0x40014400
 800971c:	40014800 	.word	0x40014800
 8009720:	40001800 	.word	0x40001800
 8009724:	40001c00 	.word	0x40001c00
 8009728:	40002000 	.word	0x40002000

0800972c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800972c:	b480      	push	{r7}
 800972e:	b087      	sub	sp, #28
 8009730:	af00      	add	r7, sp, #0
 8009732:	6078      	str	r0, [r7, #4]
 8009734:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	6a1b      	ldr	r3, [r3, #32]
 800973a:	f023 0201 	bic.w	r2, r3, #1
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	6a1b      	ldr	r3, [r3, #32]
 8009746:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	685b      	ldr	r3, [r3, #4]
 800974c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	699b      	ldr	r3, [r3, #24]
 8009752:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800975a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	f023 0303 	bic.w	r3, r3, #3
 8009762:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009764:	683b      	ldr	r3, [r7, #0]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	68fa      	ldr	r2, [r7, #12]
 800976a:	4313      	orrs	r3, r2
 800976c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800976e:	697b      	ldr	r3, [r7, #20]
 8009770:	f023 0302 	bic.w	r3, r3, #2
 8009774:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009776:	683b      	ldr	r3, [r7, #0]
 8009778:	689b      	ldr	r3, [r3, #8]
 800977a:	697a      	ldr	r2, [r7, #20]
 800977c:	4313      	orrs	r3, r2
 800977e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	4a20      	ldr	r2, [pc, #128]	; (8009804 <TIM_OC1_SetConfig+0xd8>)
 8009784:	4293      	cmp	r3, r2
 8009786:	d003      	beq.n	8009790 <TIM_OC1_SetConfig+0x64>
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	4a1f      	ldr	r2, [pc, #124]	; (8009808 <TIM_OC1_SetConfig+0xdc>)
 800978c:	4293      	cmp	r3, r2
 800978e:	d10c      	bne.n	80097aa <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009790:	697b      	ldr	r3, [r7, #20]
 8009792:	f023 0308 	bic.w	r3, r3, #8
 8009796:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009798:	683b      	ldr	r3, [r7, #0]
 800979a:	68db      	ldr	r3, [r3, #12]
 800979c:	697a      	ldr	r2, [r7, #20]
 800979e:	4313      	orrs	r3, r2
 80097a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80097a2:	697b      	ldr	r3, [r7, #20]
 80097a4:	f023 0304 	bic.w	r3, r3, #4
 80097a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	4a15      	ldr	r2, [pc, #84]	; (8009804 <TIM_OC1_SetConfig+0xd8>)
 80097ae:	4293      	cmp	r3, r2
 80097b0:	d003      	beq.n	80097ba <TIM_OC1_SetConfig+0x8e>
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	4a14      	ldr	r2, [pc, #80]	; (8009808 <TIM_OC1_SetConfig+0xdc>)
 80097b6:	4293      	cmp	r3, r2
 80097b8:	d111      	bne.n	80097de <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80097ba:	693b      	ldr	r3, [r7, #16]
 80097bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80097c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80097c2:	693b      	ldr	r3, [r7, #16]
 80097c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80097c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80097ca:	683b      	ldr	r3, [r7, #0]
 80097cc:	695b      	ldr	r3, [r3, #20]
 80097ce:	693a      	ldr	r2, [r7, #16]
 80097d0:	4313      	orrs	r3, r2
 80097d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80097d4:	683b      	ldr	r3, [r7, #0]
 80097d6:	699b      	ldr	r3, [r3, #24]
 80097d8:	693a      	ldr	r2, [r7, #16]
 80097da:	4313      	orrs	r3, r2
 80097dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	693a      	ldr	r2, [r7, #16]
 80097e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	68fa      	ldr	r2, [r7, #12]
 80097e8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80097ea:	683b      	ldr	r3, [r7, #0]
 80097ec:	685a      	ldr	r2, [r3, #4]
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	697a      	ldr	r2, [r7, #20]
 80097f6:	621a      	str	r2, [r3, #32]
}
 80097f8:	bf00      	nop
 80097fa:	371c      	adds	r7, #28
 80097fc:	46bd      	mov	sp, r7
 80097fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009802:	4770      	bx	lr
 8009804:	40010000 	.word	0x40010000
 8009808:	40010400 	.word	0x40010400

0800980c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800980c:	b480      	push	{r7}
 800980e:	b087      	sub	sp, #28
 8009810:	af00      	add	r7, sp, #0
 8009812:	6078      	str	r0, [r7, #4]
 8009814:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	6a1b      	ldr	r3, [r3, #32]
 800981a:	f023 0210 	bic.w	r2, r3, #16
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	6a1b      	ldr	r3, [r3, #32]
 8009826:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	685b      	ldr	r3, [r3, #4]
 800982c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	699b      	ldr	r3, [r3, #24]
 8009832:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800983a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009842:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009844:	683b      	ldr	r3, [r7, #0]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	021b      	lsls	r3, r3, #8
 800984a:	68fa      	ldr	r2, [r7, #12]
 800984c:	4313      	orrs	r3, r2
 800984e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009850:	697b      	ldr	r3, [r7, #20]
 8009852:	f023 0320 	bic.w	r3, r3, #32
 8009856:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009858:	683b      	ldr	r3, [r7, #0]
 800985a:	689b      	ldr	r3, [r3, #8]
 800985c:	011b      	lsls	r3, r3, #4
 800985e:	697a      	ldr	r2, [r7, #20]
 8009860:	4313      	orrs	r3, r2
 8009862:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	4a22      	ldr	r2, [pc, #136]	; (80098f0 <TIM_OC2_SetConfig+0xe4>)
 8009868:	4293      	cmp	r3, r2
 800986a:	d003      	beq.n	8009874 <TIM_OC2_SetConfig+0x68>
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	4a21      	ldr	r2, [pc, #132]	; (80098f4 <TIM_OC2_SetConfig+0xe8>)
 8009870:	4293      	cmp	r3, r2
 8009872:	d10d      	bne.n	8009890 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009874:	697b      	ldr	r3, [r7, #20]
 8009876:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800987a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800987c:	683b      	ldr	r3, [r7, #0]
 800987e:	68db      	ldr	r3, [r3, #12]
 8009880:	011b      	lsls	r3, r3, #4
 8009882:	697a      	ldr	r2, [r7, #20]
 8009884:	4313      	orrs	r3, r2
 8009886:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009888:	697b      	ldr	r3, [r7, #20]
 800988a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800988e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	4a17      	ldr	r2, [pc, #92]	; (80098f0 <TIM_OC2_SetConfig+0xe4>)
 8009894:	4293      	cmp	r3, r2
 8009896:	d003      	beq.n	80098a0 <TIM_OC2_SetConfig+0x94>
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	4a16      	ldr	r2, [pc, #88]	; (80098f4 <TIM_OC2_SetConfig+0xe8>)
 800989c:	4293      	cmp	r3, r2
 800989e:	d113      	bne.n	80098c8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80098a0:	693b      	ldr	r3, [r7, #16]
 80098a2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80098a6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80098a8:	693b      	ldr	r3, [r7, #16]
 80098aa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80098ae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80098b0:	683b      	ldr	r3, [r7, #0]
 80098b2:	695b      	ldr	r3, [r3, #20]
 80098b4:	009b      	lsls	r3, r3, #2
 80098b6:	693a      	ldr	r2, [r7, #16]
 80098b8:	4313      	orrs	r3, r2
 80098ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80098bc:	683b      	ldr	r3, [r7, #0]
 80098be:	699b      	ldr	r3, [r3, #24]
 80098c0:	009b      	lsls	r3, r3, #2
 80098c2:	693a      	ldr	r2, [r7, #16]
 80098c4:	4313      	orrs	r3, r2
 80098c6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	693a      	ldr	r2, [r7, #16]
 80098cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	68fa      	ldr	r2, [r7, #12]
 80098d2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80098d4:	683b      	ldr	r3, [r7, #0]
 80098d6:	685a      	ldr	r2, [r3, #4]
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	697a      	ldr	r2, [r7, #20]
 80098e0:	621a      	str	r2, [r3, #32]
}
 80098e2:	bf00      	nop
 80098e4:	371c      	adds	r7, #28
 80098e6:	46bd      	mov	sp, r7
 80098e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ec:	4770      	bx	lr
 80098ee:	bf00      	nop
 80098f0:	40010000 	.word	0x40010000
 80098f4:	40010400 	.word	0x40010400

080098f8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80098f8:	b480      	push	{r7}
 80098fa:	b087      	sub	sp, #28
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	6078      	str	r0, [r7, #4]
 8009900:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	6a1b      	ldr	r3, [r3, #32]
 8009906:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	6a1b      	ldr	r3, [r3, #32]
 8009912:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	685b      	ldr	r3, [r3, #4]
 8009918:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	69db      	ldr	r3, [r3, #28]
 800991e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009926:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	f023 0303 	bic.w	r3, r3, #3
 800992e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009930:	683b      	ldr	r3, [r7, #0]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	68fa      	ldr	r2, [r7, #12]
 8009936:	4313      	orrs	r3, r2
 8009938:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800993a:	697b      	ldr	r3, [r7, #20]
 800993c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009940:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009942:	683b      	ldr	r3, [r7, #0]
 8009944:	689b      	ldr	r3, [r3, #8]
 8009946:	021b      	lsls	r3, r3, #8
 8009948:	697a      	ldr	r2, [r7, #20]
 800994a:	4313      	orrs	r3, r2
 800994c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	4a21      	ldr	r2, [pc, #132]	; (80099d8 <TIM_OC3_SetConfig+0xe0>)
 8009952:	4293      	cmp	r3, r2
 8009954:	d003      	beq.n	800995e <TIM_OC3_SetConfig+0x66>
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	4a20      	ldr	r2, [pc, #128]	; (80099dc <TIM_OC3_SetConfig+0xe4>)
 800995a:	4293      	cmp	r3, r2
 800995c:	d10d      	bne.n	800997a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800995e:	697b      	ldr	r3, [r7, #20]
 8009960:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009964:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009966:	683b      	ldr	r3, [r7, #0]
 8009968:	68db      	ldr	r3, [r3, #12]
 800996a:	021b      	lsls	r3, r3, #8
 800996c:	697a      	ldr	r2, [r7, #20]
 800996e:	4313      	orrs	r3, r2
 8009970:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009972:	697b      	ldr	r3, [r7, #20]
 8009974:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009978:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	4a16      	ldr	r2, [pc, #88]	; (80099d8 <TIM_OC3_SetConfig+0xe0>)
 800997e:	4293      	cmp	r3, r2
 8009980:	d003      	beq.n	800998a <TIM_OC3_SetConfig+0x92>
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	4a15      	ldr	r2, [pc, #84]	; (80099dc <TIM_OC3_SetConfig+0xe4>)
 8009986:	4293      	cmp	r3, r2
 8009988:	d113      	bne.n	80099b2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800998a:	693b      	ldr	r3, [r7, #16]
 800998c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009990:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009992:	693b      	ldr	r3, [r7, #16]
 8009994:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009998:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800999a:	683b      	ldr	r3, [r7, #0]
 800999c:	695b      	ldr	r3, [r3, #20]
 800999e:	011b      	lsls	r3, r3, #4
 80099a0:	693a      	ldr	r2, [r7, #16]
 80099a2:	4313      	orrs	r3, r2
 80099a4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80099a6:	683b      	ldr	r3, [r7, #0]
 80099a8:	699b      	ldr	r3, [r3, #24]
 80099aa:	011b      	lsls	r3, r3, #4
 80099ac:	693a      	ldr	r2, [r7, #16]
 80099ae:	4313      	orrs	r3, r2
 80099b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	693a      	ldr	r2, [r7, #16]
 80099b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	68fa      	ldr	r2, [r7, #12]
 80099bc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80099be:	683b      	ldr	r3, [r7, #0]
 80099c0:	685a      	ldr	r2, [r3, #4]
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	697a      	ldr	r2, [r7, #20]
 80099ca:	621a      	str	r2, [r3, #32]
}
 80099cc:	bf00      	nop
 80099ce:	371c      	adds	r7, #28
 80099d0:	46bd      	mov	sp, r7
 80099d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d6:	4770      	bx	lr
 80099d8:	40010000 	.word	0x40010000
 80099dc:	40010400 	.word	0x40010400

080099e0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80099e0:	b480      	push	{r7}
 80099e2:	b087      	sub	sp, #28
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	6078      	str	r0, [r7, #4]
 80099e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	6a1b      	ldr	r3, [r3, #32]
 80099ee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	6a1b      	ldr	r3, [r3, #32]
 80099fa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	685b      	ldr	r3, [r3, #4]
 8009a00:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	69db      	ldr	r3, [r3, #28]
 8009a06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009a0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009a16:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009a18:	683b      	ldr	r3, [r7, #0]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	021b      	lsls	r3, r3, #8
 8009a1e:	68fa      	ldr	r2, [r7, #12]
 8009a20:	4313      	orrs	r3, r2
 8009a22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009a24:	693b      	ldr	r3, [r7, #16]
 8009a26:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009a2a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009a2c:	683b      	ldr	r3, [r7, #0]
 8009a2e:	689b      	ldr	r3, [r3, #8]
 8009a30:	031b      	lsls	r3, r3, #12
 8009a32:	693a      	ldr	r2, [r7, #16]
 8009a34:	4313      	orrs	r3, r2
 8009a36:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	4a12      	ldr	r2, [pc, #72]	; (8009a84 <TIM_OC4_SetConfig+0xa4>)
 8009a3c:	4293      	cmp	r3, r2
 8009a3e:	d003      	beq.n	8009a48 <TIM_OC4_SetConfig+0x68>
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	4a11      	ldr	r2, [pc, #68]	; (8009a88 <TIM_OC4_SetConfig+0xa8>)
 8009a44:	4293      	cmp	r3, r2
 8009a46:	d109      	bne.n	8009a5c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009a48:	697b      	ldr	r3, [r7, #20]
 8009a4a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009a4e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009a50:	683b      	ldr	r3, [r7, #0]
 8009a52:	695b      	ldr	r3, [r3, #20]
 8009a54:	019b      	lsls	r3, r3, #6
 8009a56:	697a      	ldr	r2, [r7, #20]
 8009a58:	4313      	orrs	r3, r2
 8009a5a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	697a      	ldr	r2, [r7, #20]
 8009a60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	68fa      	ldr	r2, [r7, #12]
 8009a66:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009a68:	683b      	ldr	r3, [r7, #0]
 8009a6a:	685a      	ldr	r2, [r3, #4]
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	693a      	ldr	r2, [r7, #16]
 8009a74:	621a      	str	r2, [r3, #32]
}
 8009a76:	bf00      	nop
 8009a78:	371c      	adds	r7, #28
 8009a7a:	46bd      	mov	sp, r7
 8009a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a80:	4770      	bx	lr
 8009a82:	bf00      	nop
 8009a84:	40010000 	.word	0x40010000
 8009a88:	40010400 	.word	0x40010400

08009a8c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8009a8c:	b580      	push	{r7, lr}
 8009a8e:	b086      	sub	sp, #24
 8009a90:	af00      	add	r7, sp, #0
 8009a92:	6078      	str	r0, [r7, #4]
 8009a94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009a96:	2300      	movs	r3, #0
 8009a98:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	689b      	ldr	r3, [r3, #8]
 8009aa0:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009aa2:	693b      	ldr	r3, [r7, #16]
 8009aa4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009aa8:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8009aaa:	683b      	ldr	r3, [r7, #0]
 8009aac:	685b      	ldr	r3, [r3, #4]
 8009aae:	693a      	ldr	r2, [r7, #16]
 8009ab0:	4313      	orrs	r3, r2
 8009ab2:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8009ab4:	693b      	ldr	r3, [r7, #16]
 8009ab6:	f023 0307 	bic.w	r3, r3, #7
 8009aba:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8009abc:	683b      	ldr	r3, [r7, #0]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	693a      	ldr	r2, [r7, #16]
 8009ac2:	4313      	orrs	r3, r2
 8009ac4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	693a      	ldr	r2, [r7, #16]
 8009acc:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8009ace:	683b      	ldr	r3, [r7, #0]
 8009ad0:	685b      	ldr	r3, [r3, #4]
 8009ad2:	2b70      	cmp	r3, #112	; 0x70
 8009ad4:	d01a      	beq.n	8009b0c <TIM_SlaveTimer_SetConfig+0x80>
 8009ad6:	2b70      	cmp	r3, #112	; 0x70
 8009ad8:	d860      	bhi.n	8009b9c <TIM_SlaveTimer_SetConfig+0x110>
 8009ada:	2b60      	cmp	r3, #96	; 0x60
 8009adc:	d054      	beq.n	8009b88 <TIM_SlaveTimer_SetConfig+0xfc>
 8009ade:	2b60      	cmp	r3, #96	; 0x60
 8009ae0:	d85c      	bhi.n	8009b9c <TIM_SlaveTimer_SetConfig+0x110>
 8009ae2:	2b50      	cmp	r3, #80	; 0x50
 8009ae4:	d046      	beq.n	8009b74 <TIM_SlaveTimer_SetConfig+0xe8>
 8009ae6:	2b50      	cmp	r3, #80	; 0x50
 8009ae8:	d858      	bhi.n	8009b9c <TIM_SlaveTimer_SetConfig+0x110>
 8009aea:	2b40      	cmp	r3, #64	; 0x40
 8009aec:	d019      	beq.n	8009b22 <TIM_SlaveTimer_SetConfig+0x96>
 8009aee:	2b40      	cmp	r3, #64	; 0x40
 8009af0:	d854      	bhi.n	8009b9c <TIM_SlaveTimer_SetConfig+0x110>
 8009af2:	2b30      	cmp	r3, #48	; 0x30
 8009af4:	d055      	beq.n	8009ba2 <TIM_SlaveTimer_SetConfig+0x116>
 8009af6:	2b30      	cmp	r3, #48	; 0x30
 8009af8:	d850      	bhi.n	8009b9c <TIM_SlaveTimer_SetConfig+0x110>
 8009afa:	2b20      	cmp	r3, #32
 8009afc:	d051      	beq.n	8009ba2 <TIM_SlaveTimer_SetConfig+0x116>
 8009afe:	2b20      	cmp	r3, #32
 8009b00:	d84c      	bhi.n	8009b9c <TIM_SlaveTimer_SetConfig+0x110>
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d04d      	beq.n	8009ba2 <TIM_SlaveTimer_SetConfig+0x116>
 8009b06:	2b10      	cmp	r3, #16
 8009b08:	d04b      	beq.n	8009ba2 <TIM_SlaveTimer_SetConfig+0x116>
 8009b0a:	e047      	b.n	8009b9c <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	6818      	ldr	r0, [r3, #0]
 8009b10:	683b      	ldr	r3, [r7, #0]
 8009b12:	68d9      	ldr	r1, [r3, #12]
 8009b14:	683b      	ldr	r3, [r7, #0]
 8009b16:	689a      	ldr	r2, [r3, #8]
 8009b18:	683b      	ldr	r3, [r7, #0]
 8009b1a:	691b      	ldr	r3, [r3, #16]
 8009b1c:	f000 f9ec 	bl	8009ef8 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8009b20:	e040      	b.n	8009ba4 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8009b22:	683b      	ldr	r3, [r7, #0]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	2b05      	cmp	r3, #5
 8009b28:	d101      	bne.n	8009b2e <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8009b2a:	2301      	movs	r3, #1
 8009b2c:	e03b      	b.n	8009ba6 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	6a1b      	ldr	r3, [r3, #32]
 8009b34:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	6a1a      	ldr	r2, [r3, #32]
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	f022 0201 	bic.w	r2, r2, #1
 8009b44:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	699b      	ldr	r3, [r3, #24]
 8009b4c:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009b4e:	68bb      	ldr	r3, [r7, #8]
 8009b50:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009b54:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8009b56:	683b      	ldr	r3, [r7, #0]
 8009b58:	691b      	ldr	r3, [r3, #16]
 8009b5a:	011b      	lsls	r3, r3, #4
 8009b5c:	68ba      	ldr	r2, [r7, #8]
 8009b5e:	4313      	orrs	r3, r2
 8009b60:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	68ba      	ldr	r2, [r7, #8]
 8009b68:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	68fa      	ldr	r2, [r7, #12]
 8009b70:	621a      	str	r2, [r3, #32]
      break;
 8009b72:	e017      	b.n	8009ba4 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	6818      	ldr	r0, [r3, #0]
 8009b78:	683b      	ldr	r3, [r7, #0]
 8009b7a:	6899      	ldr	r1, [r3, #8]
 8009b7c:	683b      	ldr	r3, [r7, #0]
 8009b7e:	691b      	ldr	r3, [r3, #16]
 8009b80:	461a      	mov	r2, r3
 8009b82:	f000 f889 	bl	8009c98 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8009b86:	e00d      	b.n	8009ba4 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	6818      	ldr	r0, [r3, #0]
 8009b8c:	683b      	ldr	r3, [r7, #0]
 8009b8e:	6899      	ldr	r1, [r3, #8]
 8009b90:	683b      	ldr	r3, [r7, #0]
 8009b92:	691b      	ldr	r3, [r3, #16]
 8009b94:	461a      	mov	r2, r3
 8009b96:	f000 f8eb 	bl	8009d70 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8009b9a:	e003      	b.n	8009ba4 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8009b9c:	2301      	movs	r3, #1
 8009b9e:	75fb      	strb	r3, [r7, #23]
      break;
 8009ba0:	e000      	b.n	8009ba4 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8009ba2:	bf00      	nop
  }

  return status;
 8009ba4:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ba6:	4618      	mov	r0, r3
 8009ba8:	3718      	adds	r7, #24
 8009baa:	46bd      	mov	sp, r7
 8009bac:	bd80      	pop	{r7, pc}
	...

08009bb0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8009bb0:	b480      	push	{r7}
 8009bb2:	b087      	sub	sp, #28
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	60f8      	str	r0, [r7, #12]
 8009bb8:	60b9      	str	r1, [r7, #8]
 8009bba:	607a      	str	r2, [r7, #4]
 8009bbc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	6a1b      	ldr	r3, [r3, #32]
 8009bc2:	f023 0201 	bic.w	r2, r3, #1
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	699b      	ldr	r3, [r3, #24]
 8009bce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	6a1b      	ldr	r3, [r3, #32]
 8009bd4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	4a28      	ldr	r2, [pc, #160]	; (8009c7c <TIM_TI1_SetConfig+0xcc>)
 8009bda:	4293      	cmp	r3, r2
 8009bdc:	d01b      	beq.n	8009c16 <TIM_TI1_SetConfig+0x66>
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009be4:	d017      	beq.n	8009c16 <TIM_TI1_SetConfig+0x66>
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	4a25      	ldr	r2, [pc, #148]	; (8009c80 <TIM_TI1_SetConfig+0xd0>)
 8009bea:	4293      	cmp	r3, r2
 8009bec:	d013      	beq.n	8009c16 <TIM_TI1_SetConfig+0x66>
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	4a24      	ldr	r2, [pc, #144]	; (8009c84 <TIM_TI1_SetConfig+0xd4>)
 8009bf2:	4293      	cmp	r3, r2
 8009bf4:	d00f      	beq.n	8009c16 <TIM_TI1_SetConfig+0x66>
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	4a23      	ldr	r2, [pc, #140]	; (8009c88 <TIM_TI1_SetConfig+0xd8>)
 8009bfa:	4293      	cmp	r3, r2
 8009bfc:	d00b      	beq.n	8009c16 <TIM_TI1_SetConfig+0x66>
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	4a22      	ldr	r2, [pc, #136]	; (8009c8c <TIM_TI1_SetConfig+0xdc>)
 8009c02:	4293      	cmp	r3, r2
 8009c04:	d007      	beq.n	8009c16 <TIM_TI1_SetConfig+0x66>
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	4a21      	ldr	r2, [pc, #132]	; (8009c90 <TIM_TI1_SetConfig+0xe0>)
 8009c0a:	4293      	cmp	r3, r2
 8009c0c:	d003      	beq.n	8009c16 <TIM_TI1_SetConfig+0x66>
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	4a20      	ldr	r2, [pc, #128]	; (8009c94 <TIM_TI1_SetConfig+0xe4>)
 8009c12:	4293      	cmp	r3, r2
 8009c14:	d101      	bne.n	8009c1a <TIM_TI1_SetConfig+0x6a>
 8009c16:	2301      	movs	r3, #1
 8009c18:	e000      	b.n	8009c1c <TIM_TI1_SetConfig+0x6c>
 8009c1a:	2300      	movs	r3, #0
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d008      	beq.n	8009c32 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8009c20:	697b      	ldr	r3, [r7, #20]
 8009c22:	f023 0303 	bic.w	r3, r3, #3
 8009c26:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8009c28:	697a      	ldr	r2, [r7, #20]
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	4313      	orrs	r3, r2
 8009c2e:	617b      	str	r3, [r7, #20]
 8009c30:	e003      	b.n	8009c3a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8009c32:	697b      	ldr	r3, [r7, #20]
 8009c34:	f043 0301 	orr.w	r3, r3, #1
 8009c38:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009c3a:	697b      	ldr	r3, [r7, #20]
 8009c3c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009c40:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8009c42:	683b      	ldr	r3, [r7, #0]
 8009c44:	011b      	lsls	r3, r3, #4
 8009c46:	b2db      	uxtb	r3, r3
 8009c48:	697a      	ldr	r2, [r7, #20]
 8009c4a:	4313      	orrs	r3, r2
 8009c4c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009c4e:	693b      	ldr	r3, [r7, #16]
 8009c50:	f023 030a 	bic.w	r3, r3, #10
 8009c54:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8009c56:	68bb      	ldr	r3, [r7, #8]
 8009c58:	f003 030a 	and.w	r3, r3, #10
 8009c5c:	693a      	ldr	r2, [r7, #16]
 8009c5e:	4313      	orrs	r3, r2
 8009c60:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	697a      	ldr	r2, [r7, #20]
 8009c66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	693a      	ldr	r2, [r7, #16]
 8009c6c:	621a      	str	r2, [r3, #32]
}
 8009c6e:	bf00      	nop
 8009c70:	371c      	adds	r7, #28
 8009c72:	46bd      	mov	sp, r7
 8009c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c78:	4770      	bx	lr
 8009c7a:	bf00      	nop
 8009c7c:	40010000 	.word	0x40010000
 8009c80:	40000400 	.word	0x40000400
 8009c84:	40000800 	.word	0x40000800
 8009c88:	40000c00 	.word	0x40000c00
 8009c8c:	40010400 	.word	0x40010400
 8009c90:	40014000 	.word	0x40014000
 8009c94:	40001800 	.word	0x40001800

08009c98 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009c98:	b480      	push	{r7}
 8009c9a:	b087      	sub	sp, #28
 8009c9c:	af00      	add	r7, sp, #0
 8009c9e:	60f8      	str	r0, [r7, #12]
 8009ca0:	60b9      	str	r1, [r7, #8]
 8009ca2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	6a1b      	ldr	r3, [r3, #32]
 8009ca8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	6a1b      	ldr	r3, [r3, #32]
 8009cae:	f023 0201 	bic.w	r2, r3, #1
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	699b      	ldr	r3, [r3, #24]
 8009cba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009cbc:	693b      	ldr	r3, [r7, #16]
 8009cbe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009cc2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	011b      	lsls	r3, r3, #4
 8009cc8:	693a      	ldr	r2, [r7, #16]
 8009cca:	4313      	orrs	r3, r2
 8009ccc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009cce:	697b      	ldr	r3, [r7, #20]
 8009cd0:	f023 030a 	bic.w	r3, r3, #10
 8009cd4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009cd6:	697a      	ldr	r2, [r7, #20]
 8009cd8:	68bb      	ldr	r3, [r7, #8]
 8009cda:	4313      	orrs	r3, r2
 8009cdc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	693a      	ldr	r2, [r7, #16]
 8009ce2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	697a      	ldr	r2, [r7, #20]
 8009ce8:	621a      	str	r2, [r3, #32]
}
 8009cea:	bf00      	nop
 8009cec:	371c      	adds	r7, #28
 8009cee:	46bd      	mov	sp, r7
 8009cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf4:	4770      	bx	lr

08009cf6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009cf6:	b480      	push	{r7}
 8009cf8:	b087      	sub	sp, #28
 8009cfa:	af00      	add	r7, sp, #0
 8009cfc:	60f8      	str	r0, [r7, #12]
 8009cfe:	60b9      	str	r1, [r7, #8]
 8009d00:	607a      	str	r2, [r7, #4]
 8009d02:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	6a1b      	ldr	r3, [r3, #32]
 8009d08:	f023 0210 	bic.w	r2, r3, #16
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	699b      	ldr	r3, [r3, #24]
 8009d14:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	6a1b      	ldr	r3, [r3, #32]
 8009d1a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8009d1c:	697b      	ldr	r3, [r7, #20]
 8009d1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009d22:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	021b      	lsls	r3, r3, #8
 8009d28:	697a      	ldr	r2, [r7, #20]
 8009d2a:	4313      	orrs	r3, r2
 8009d2c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009d2e:	697b      	ldr	r3, [r7, #20]
 8009d30:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009d34:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8009d36:	683b      	ldr	r3, [r7, #0]
 8009d38:	031b      	lsls	r3, r3, #12
 8009d3a:	b29b      	uxth	r3, r3
 8009d3c:	697a      	ldr	r2, [r7, #20]
 8009d3e:	4313      	orrs	r3, r2
 8009d40:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009d42:	693b      	ldr	r3, [r7, #16]
 8009d44:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009d48:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8009d4a:	68bb      	ldr	r3, [r7, #8]
 8009d4c:	011b      	lsls	r3, r3, #4
 8009d4e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8009d52:	693a      	ldr	r2, [r7, #16]
 8009d54:	4313      	orrs	r3, r2
 8009d56:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	697a      	ldr	r2, [r7, #20]
 8009d5c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	693a      	ldr	r2, [r7, #16]
 8009d62:	621a      	str	r2, [r3, #32]
}
 8009d64:	bf00      	nop
 8009d66:	371c      	adds	r7, #28
 8009d68:	46bd      	mov	sp, r7
 8009d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d6e:	4770      	bx	lr

08009d70 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009d70:	b480      	push	{r7}
 8009d72:	b087      	sub	sp, #28
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	60f8      	str	r0, [r7, #12]
 8009d78:	60b9      	str	r1, [r7, #8]
 8009d7a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	6a1b      	ldr	r3, [r3, #32]
 8009d80:	f023 0210 	bic.w	r2, r3, #16
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	699b      	ldr	r3, [r3, #24]
 8009d8c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	6a1b      	ldr	r3, [r3, #32]
 8009d92:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009d94:	697b      	ldr	r3, [r7, #20]
 8009d96:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009d9a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	031b      	lsls	r3, r3, #12
 8009da0:	697a      	ldr	r2, [r7, #20]
 8009da2:	4313      	orrs	r3, r2
 8009da4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009da6:	693b      	ldr	r3, [r7, #16]
 8009da8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009dac:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009dae:	68bb      	ldr	r3, [r7, #8]
 8009db0:	011b      	lsls	r3, r3, #4
 8009db2:	693a      	ldr	r2, [r7, #16]
 8009db4:	4313      	orrs	r3, r2
 8009db6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	697a      	ldr	r2, [r7, #20]
 8009dbc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	693a      	ldr	r2, [r7, #16]
 8009dc2:	621a      	str	r2, [r3, #32]
}
 8009dc4:	bf00      	nop
 8009dc6:	371c      	adds	r7, #28
 8009dc8:	46bd      	mov	sp, r7
 8009dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dce:	4770      	bx	lr

08009dd0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009dd0:	b480      	push	{r7}
 8009dd2:	b087      	sub	sp, #28
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	60f8      	str	r0, [r7, #12]
 8009dd8:	60b9      	str	r1, [r7, #8]
 8009dda:	607a      	str	r2, [r7, #4]
 8009ddc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	6a1b      	ldr	r3, [r3, #32]
 8009de2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	69db      	ldr	r3, [r3, #28]
 8009dee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	6a1b      	ldr	r3, [r3, #32]
 8009df4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8009df6:	697b      	ldr	r3, [r7, #20]
 8009df8:	f023 0303 	bic.w	r3, r3, #3
 8009dfc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8009dfe:	697a      	ldr	r2, [r7, #20]
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	4313      	orrs	r3, r2
 8009e04:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8009e06:	697b      	ldr	r3, [r7, #20]
 8009e08:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009e0c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8009e0e:	683b      	ldr	r3, [r7, #0]
 8009e10:	011b      	lsls	r3, r3, #4
 8009e12:	b2db      	uxtb	r3, r3
 8009e14:	697a      	ldr	r2, [r7, #20]
 8009e16:	4313      	orrs	r3, r2
 8009e18:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8009e1a:	693b      	ldr	r3, [r7, #16]
 8009e1c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8009e20:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8009e22:	68bb      	ldr	r3, [r7, #8]
 8009e24:	021b      	lsls	r3, r3, #8
 8009e26:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8009e2a:	693a      	ldr	r2, [r7, #16]
 8009e2c:	4313      	orrs	r3, r2
 8009e2e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	697a      	ldr	r2, [r7, #20]
 8009e34:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	693a      	ldr	r2, [r7, #16]
 8009e3a:	621a      	str	r2, [r3, #32]
}
 8009e3c:	bf00      	nop
 8009e3e:	371c      	adds	r7, #28
 8009e40:	46bd      	mov	sp, r7
 8009e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e46:	4770      	bx	lr

08009e48 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009e48:	b480      	push	{r7}
 8009e4a:	b087      	sub	sp, #28
 8009e4c:	af00      	add	r7, sp, #0
 8009e4e:	60f8      	str	r0, [r7, #12]
 8009e50:	60b9      	str	r1, [r7, #8]
 8009e52:	607a      	str	r2, [r7, #4]
 8009e54:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	6a1b      	ldr	r3, [r3, #32]
 8009e5a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	69db      	ldr	r3, [r3, #28]
 8009e66:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	6a1b      	ldr	r3, [r3, #32]
 8009e6c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8009e6e:	697b      	ldr	r3, [r7, #20]
 8009e70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009e74:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	021b      	lsls	r3, r3, #8
 8009e7a:	697a      	ldr	r2, [r7, #20]
 8009e7c:	4313      	orrs	r3, r2
 8009e7e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8009e80:	697b      	ldr	r3, [r7, #20]
 8009e82:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009e86:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8009e88:	683b      	ldr	r3, [r7, #0]
 8009e8a:	031b      	lsls	r3, r3, #12
 8009e8c:	b29b      	uxth	r3, r3
 8009e8e:	697a      	ldr	r2, [r7, #20]
 8009e90:	4313      	orrs	r3, r2
 8009e92:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8009e94:	693b      	ldr	r3, [r7, #16]
 8009e96:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8009e9a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8009e9c:	68bb      	ldr	r3, [r7, #8]
 8009e9e:	031b      	lsls	r3, r3, #12
 8009ea0:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8009ea4:	693a      	ldr	r2, [r7, #16]
 8009ea6:	4313      	orrs	r3, r2
 8009ea8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	697a      	ldr	r2, [r7, #20]
 8009eae:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	693a      	ldr	r2, [r7, #16]
 8009eb4:	621a      	str	r2, [r3, #32]
}
 8009eb6:	bf00      	nop
 8009eb8:	371c      	adds	r7, #28
 8009eba:	46bd      	mov	sp, r7
 8009ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec0:	4770      	bx	lr

08009ec2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009ec2:	b480      	push	{r7}
 8009ec4:	b085      	sub	sp, #20
 8009ec6:	af00      	add	r7, sp, #0
 8009ec8:	6078      	str	r0, [r7, #4]
 8009eca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	689b      	ldr	r3, [r3, #8]
 8009ed0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ed8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009eda:	683a      	ldr	r2, [r7, #0]
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	4313      	orrs	r3, r2
 8009ee0:	f043 0307 	orr.w	r3, r3, #7
 8009ee4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	68fa      	ldr	r2, [r7, #12]
 8009eea:	609a      	str	r2, [r3, #8]
}
 8009eec:	bf00      	nop
 8009eee:	3714      	adds	r7, #20
 8009ef0:	46bd      	mov	sp, r7
 8009ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef6:	4770      	bx	lr

08009ef8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009ef8:	b480      	push	{r7}
 8009efa:	b087      	sub	sp, #28
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	60f8      	str	r0, [r7, #12]
 8009f00:	60b9      	str	r1, [r7, #8]
 8009f02:	607a      	str	r2, [r7, #4]
 8009f04:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	689b      	ldr	r3, [r3, #8]
 8009f0a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009f0c:	697b      	ldr	r3, [r7, #20]
 8009f0e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009f12:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009f14:	683b      	ldr	r3, [r7, #0]
 8009f16:	021a      	lsls	r2, r3, #8
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	431a      	orrs	r2, r3
 8009f1c:	68bb      	ldr	r3, [r7, #8]
 8009f1e:	4313      	orrs	r3, r2
 8009f20:	697a      	ldr	r2, [r7, #20]
 8009f22:	4313      	orrs	r3, r2
 8009f24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	697a      	ldr	r2, [r7, #20]
 8009f2a:	609a      	str	r2, [r3, #8]
}
 8009f2c:	bf00      	nop
 8009f2e:	371c      	adds	r7, #28
 8009f30:	46bd      	mov	sp, r7
 8009f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f36:	4770      	bx	lr

08009f38 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009f38:	b480      	push	{r7}
 8009f3a:	b087      	sub	sp, #28
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	60f8      	str	r0, [r7, #12]
 8009f40:	60b9      	str	r1, [r7, #8]
 8009f42:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009f44:	68bb      	ldr	r3, [r7, #8]
 8009f46:	f003 031f 	and.w	r3, r3, #31
 8009f4a:	2201      	movs	r2, #1
 8009f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8009f50:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	6a1a      	ldr	r2, [r3, #32]
 8009f56:	697b      	ldr	r3, [r7, #20]
 8009f58:	43db      	mvns	r3, r3
 8009f5a:	401a      	ands	r2, r3
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	6a1a      	ldr	r2, [r3, #32]
 8009f64:	68bb      	ldr	r3, [r7, #8]
 8009f66:	f003 031f 	and.w	r3, r3, #31
 8009f6a:	6879      	ldr	r1, [r7, #4]
 8009f6c:	fa01 f303 	lsl.w	r3, r1, r3
 8009f70:	431a      	orrs	r2, r3
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	621a      	str	r2, [r3, #32]
}
 8009f76:	bf00      	nop
 8009f78:	371c      	adds	r7, #28
 8009f7a:	46bd      	mov	sp, r7
 8009f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f80:	4770      	bx	lr
	...

08009f84 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009f84:	b480      	push	{r7}
 8009f86:	b085      	sub	sp, #20
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	6078      	str	r0, [r7, #4]
 8009f8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009f94:	2b01      	cmp	r3, #1
 8009f96:	d101      	bne.n	8009f9c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009f98:	2302      	movs	r3, #2
 8009f9a:	e05a      	b.n	800a052 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	2201      	movs	r2, #1
 8009fa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	2202      	movs	r2, #2
 8009fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	685b      	ldr	r3, [r3, #4]
 8009fb2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	689b      	ldr	r3, [r3, #8]
 8009fba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009fc2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009fc4:	683b      	ldr	r3, [r7, #0]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	68fa      	ldr	r2, [r7, #12]
 8009fca:	4313      	orrs	r3, r2
 8009fcc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	68fa      	ldr	r2, [r7, #12]
 8009fd4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	4a21      	ldr	r2, [pc, #132]	; (800a060 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009fdc:	4293      	cmp	r3, r2
 8009fde:	d022      	beq.n	800a026 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009fe8:	d01d      	beq.n	800a026 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	4a1d      	ldr	r2, [pc, #116]	; (800a064 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009ff0:	4293      	cmp	r3, r2
 8009ff2:	d018      	beq.n	800a026 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	4a1b      	ldr	r2, [pc, #108]	; (800a068 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8009ffa:	4293      	cmp	r3, r2
 8009ffc:	d013      	beq.n	800a026 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	4a1a      	ldr	r2, [pc, #104]	; (800a06c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800a004:	4293      	cmp	r3, r2
 800a006:	d00e      	beq.n	800a026 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	4a18      	ldr	r2, [pc, #96]	; (800a070 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800a00e:	4293      	cmp	r3, r2
 800a010:	d009      	beq.n	800a026 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	4a17      	ldr	r2, [pc, #92]	; (800a074 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a018:	4293      	cmp	r3, r2
 800a01a:	d004      	beq.n	800a026 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	4a15      	ldr	r2, [pc, #84]	; (800a078 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a022:	4293      	cmp	r3, r2
 800a024:	d10c      	bne.n	800a040 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a026:	68bb      	ldr	r3, [r7, #8]
 800a028:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a02c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a02e:	683b      	ldr	r3, [r7, #0]
 800a030:	685b      	ldr	r3, [r3, #4]
 800a032:	68ba      	ldr	r2, [r7, #8]
 800a034:	4313      	orrs	r3, r2
 800a036:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	68ba      	ldr	r2, [r7, #8]
 800a03e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	2201      	movs	r2, #1
 800a044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	2200      	movs	r2, #0
 800a04c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a050:	2300      	movs	r3, #0
}
 800a052:	4618      	mov	r0, r3
 800a054:	3714      	adds	r7, #20
 800a056:	46bd      	mov	sp, r7
 800a058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a05c:	4770      	bx	lr
 800a05e:	bf00      	nop
 800a060:	40010000 	.word	0x40010000
 800a064:	40000400 	.word	0x40000400
 800a068:	40000800 	.word	0x40000800
 800a06c:	40000c00 	.word	0x40000c00
 800a070:	40010400 	.word	0x40010400
 800a074:	40014000 	.word	0x40014000
 800a078:	40001800 	.word	0x40001800

0800a07c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a07c:	b480      	push	{r7}
 800a07e:	b083      	sub	sp, #12
 800a080:	af00      	add	r7, sp, #0
 800a082:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a084:	bf00      	nop
 800a086:	370c      	adds	r7, #12
 800a088:	46bd      	mov	sp, r7
 800a08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a08e:	4770      	bx	lr

0800a090 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a090:	b480      	push	{r7}
 800a092:	b083      	sub	sp, #12
 800a094:	af00      	add	r7, sp, #0
 800a096:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a098:	bf00      	nop
 800a09a:	370c      	adds	r7, #12
 800a09c:	46bd      	mov	sp, r7
 800a09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a2:	4770      	bx	lr

0800a0a4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a0a4:	b580      	push	{r7, lr}
 800a0a6:	b082      	sub	sp, #8
 800a0a8:	af00      	add	r7, sp, #0
 800a0aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d101      	bne.n	800a0b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a0b2:	2301      	movs	r3, #1
 800a0b4:	e03f      	b.n	800a136 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a0bc:	b2db      	uxtb	r3, r3
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d106      	bne.n	800a0d0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	2200      	movs	r2, #0
 800a0c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a0ca:	6878      	ldr	r0, [r7, #4]
 800a0cc:	f7f9 ff54 	bl	8003f78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	2224      	movs	r2, #36	; 0x24
 800a0d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	68da      	ldr	r2, [r3, #12]
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a0e6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a0e8:	6878      	ldr	r0, [r7, #4]
 800a0ea:	f000 fea3 	bl	800ae34 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	691a      	ldr	r2, [r3, #16]
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a0fc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	695a      	ldr	r2, [r3, #20]
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a10c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	68da      	ldr	r2, [r3, #12]
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a11c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	2200      	movs	r2, #0
 800a122:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	2220      	movs	r2, #32
 800a128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	2220      	movs	r2, #32
 800a130:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800a134:	2300      	movs	r3, #0
}
 800a136:	4618      	mov	r0, r3
 800a138:	3708      	adds	r7, #8
 800a13a:	46bd      	mov	sp, r7
 800a13c:	bd80      	pop	{r7, pc}

0800a13e <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800a13e:	b480      	push	{r7}
 800a140:	b085      	sub	sp, #20
 800a142:	af00      	add	r7, sp, #0
 800a144:	60f8      	str	r0, [r7, #12]
 800a146:	60b9      	str	r1, [r7, #8]
 800a148:	4613      	mov	r3, r2
 800a14a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a152:	b2db      	uxtb	r3, r3
 800a154:	2b20      	cmp	r3, #32
 800a156:	d130      	bne.n	800a1ba <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800a158:	68bb      	ldr	r3, [r7, #8]
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d002      	beq.n	800a164 <HAL_UART_Transmit_IT+0x26>
 800a15e:	88fb      	ldrh	r3, [r7, #6]
 800a160:	2b00      	cmp	r3, #0
 800a162:	d101      	bne.n	800a168 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800a164:	2301      	movs	r3, #1
 800a166:	e029      	b.n	800a1bc <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a16e:	2b01      	cmp	r3, #1
 800a170:	d101      	bne.n	800a176 <HAL_UART_Transmit_IT+0x38>
 800a172:	2302      	movs	r3, #2
 800a174:	e022      	b.n	800a1bc <HAL_UART_Transmit_IT+0x7e>
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	2201      	movs	r2, #1
 800a17a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	68ba      	ldr	r2, [r7, #8]
 800a182:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	88fa      	ldrh	r2, [r7, #6]
 800a188:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	88fa      	ldrh	r2, [r7, #6]
 800a18e:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	2200      	movs	r2, #0
 800a194:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	2221      	movs	r2, #33	; 0x21
 800a19a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	2200      	movs	r2, #0
 800a1a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	68da      	ldr	r2, [r3, #12]
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a1b4:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800a1b6:	2300      	movs	r3, #0
 800a1b8:	e000      	b.n	800a1bc <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800a1ba:	2302      	movs	r3, #2
  }
}
 800a1bc:	4618      	mov	r0, r3
 800a1be:	3714      	adds	r7, #20
 800a1c0:	46bd      	mov	sp, r7
 800a1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c6:	4770      	bx	lr

0800a1c8 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a1c8:	b580      	push	{r7, lr}
 800a1ca:	b084      	sub	sp, #16
 800a1cc:	af00      	add	r7, sp, #0
 800a1ce:	60f8      	str	r0, [r7, #12]
 800a1d0:	60b9      	str	r1, [r7, #8]
 800a1d2:	4613      	mov	r3, r2
 800a1d4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a1dc:	b2db      	uxtb	r3, r3
 800a1de:	2b20      	cmp	r3, #32
 800a1e0:	d11d      	bne.n	800a21e <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800a1e2:	68bb      	ldr	r3, [r7, #8]
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d002      	beq.n	800a1ee <HAL_UART_Receive_DMA+0x26>
 800a1e8:	88fb      	ldrh	r3, [r7, #6]
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d101      	bne.n	800a1f2 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800a1ee:	2301      	movs	r3, #1
 800a1f0:	e016      	b.n	800a220 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a1f8:	2b01      	cmp	r3, #1
 800a1fa:	d101      	bne.n	800a200 <HAL_UART_Receive_DMA+0x38>
 800a1fc:	2302      	movs	r3, #2
 800a1fe:	e00f      	b.n	800a220 <HAL_UART_Receive_DMA+0x58>
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	2201      	movs	r2, #1
 800a204:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	2200      	movs	r2, #0
 800a20c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800a20e:	88fb      	ldrh	r3, [r7, #6]
 800a210:	461a      	mov	r2, r3
 800a212:	68b9      	ldr	r1, [r7, #8]
 800a214:	68f8      	ldr	r0, [r7, #12]
 800a216:	f000 fbad 	bl	800a974 <UART_Start_Receive_DMA>
 800a21a:	4603      	mov	r3, r0
 800a21c:	e000      	b.n	800a220 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800a21e:	2302      	movs	r3, #2
  }
}
 800a220:	4618      	mov	r0, r3
 800a222:	3710      	adds	r7, #16
 800a224:	46bd      	mov	sp, r7
 800a226:	bd80      	pop	{r7, pc}

0800a228 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a228:	b580      	push	{r7, lr}
 800a22a:	b0ba      	sub	sp, #232	; 0xe8
 800a22c:	af00      	add	r7, sp, #0
 800a22e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	68db      	ldr	r3, [r3, #12]
 800a240:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	695b      	ldr	r3, [r3, #20]
 800a24a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800a24e:	2300      	movs	r3, #0
 800a250:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800a254:	2300      	movs	r3, #0
 800a256:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800a25a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a25e:	f003 030f 	and.w	r3, r3, #15
 800a262:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800a266:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d10f      	bne.n	800a28e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a26e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a272:	f003 0320 	and.w	r3, r3, #32
 800a276:	2b00      	cmp	r3, #0
 800a278:	d009      	beq.n	800a28e <HAL_UART_IRQHandler+0x66>
 800a27a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a27e:	f003 0320 	and.w	r3, r3, #32
 800a282:	2b00      	cmp	r3, #0
 800a284:	d003      	beq.n	800a28e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800a286:	6878      	ldr	r0, [r7, #4]
 800a288:	f000 fd19 	bl	800acbe <UART_Receive_IT>
      return;
 800a28c:	e256      	b.n	800a73c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800a28e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a292:	2b00      	cmp	r3, #0
 800a294:	f000 80de 	beq.w	800a454 <HAL_UART_IRQHandler+0x22c>
 800a298:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a29c:	f003 0301 	and.w	r3, r3, #1
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d106      	bne.n	800a2b2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800a2a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a2a8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	f000 80d1 	beq.w	800a454 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800a2b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a2b6:	f003 0301 	and.w	r3, r3, #1
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d00b      	beq.n	800a2d6 <HAL_UART_IRQHandler+0xae>
 800a2be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a2c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d005      	beq.n	800a2d6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2ce:	f043 0201 	orr.w	r2, r3, #1
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a2d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a2da:	f003 0304 	and.w	r3, r3, #4
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d00b      	beq.n	800a2fa <HAL_UART_IRQHandler+0xd2>
 800a2e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a2e6:	f003 0301 	and.w	r3, r3, #1
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d005      	beq.n	800a2fa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2f2:	f043 0202 	orr.w	r2, r3, #2
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a2fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a2fe:	f003 0302 	and.w	r3, r3, #2
 800a302:	2b00      	cmp	r3, #0
 800a304:	d00b      	beq.n	800a31e <HAL_UART_IRQHandler+0xf6>
 800a306:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a30a:	f003 0301 	and.w	r3, r3, #1
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d005      	beq.n	800a31e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a316:	f043 0204 	orr.w	r2, r3, #4
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800a31e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a322:	f003 0308 	and.w	r3, r3, #8
 800a326:	2b00      	cmp	r3, #0
 800a328:	d011      	beq.n	800a34e <HAL_UART_IRQHandler+0x126>
 800a32a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a32e:	f003 0320 	and.w	r3, r3, #32
 800a332:	2b00      	cmp	r3, #0
 800a334:	d105      	bne.n	800a342 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800a336:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a33a:	f003 0301 	and.w	r3, r3, #1
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d005      	beq.n	800a34e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a346:	f043 0208 	orr.w	r2, r3, #8
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a352:	2b00      	cmp	r3, #0
 800a354:	f000 81ed 	beq.w	800a732 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a358:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a35c:	f003 0320 	and.w	r3, r3, #32
 800a360:	2b00      	cmp	r3, #0
 800a362:	d008      	beq.n	800a376 <HAL_UART_IRQHandler+0x14e>
 800a364:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a368:	f003 0320 	and.w	r3, r3, #32
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d002      	beq.n	800a376 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800a370:	6878      	ldr	r0, [r7, #4]
 800a372:	f000 fca4 	bl	800acbe <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	695b      	ldr	r3, [r3, #20]
 800a37c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a380:	2b40      	cmp	r3, #64	; 0x40
 800a382:	bf0c      	ite	eq
 800a384:	2301      	moveq	r3, #1
 800a386:	2300      	movne	r3, #0
 800a388:	b2db      	uxtb	r3, r3
 800a38a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a392:	f003 0308 	and.w	r3, r3, #8
 800a396:	2b00      	cmp	r3, #0
 800a398:	d103      	bne.n	800a3a2 <HAL_UART_IRQHandler+0x17a>
 800a39a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d04f      	beq.n	800a442 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a3a2:	6878      	ldr	r0, [r7, #4]
 800a3a4:	f000 fbac 	bl	800ab00 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	695b      	ldr	r3, [r3, #20]
 800a3ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a3b2:	2b40      	cmp	r3, #64	; 0x40
 800a3b4:	d141      	bne.n	800a43a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	3314      	adds	r3, #20
 800a3bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a3c4:	e853 3f00 	ldrex	r3, [r3]
 800a3c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800a3cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a3d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a3d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	3314      	adds	r3, #20
 800a3de:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a3e2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800a3e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3ea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800a3ee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a3f2:	e841 2300 	strex	r3, r2, [r1]
 800a3f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800a3fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d1d9      	bne.n	800a3b6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a406:	2b00      	cmp	r3, #0
 800a408:	d013      	beq.n	800a432 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a40e:	4a7d      	ldr	r2, [pc, #500]	; (800a604 <HAL_UART_IRQHandler+0x3dc>)
 800a410:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a416:	4618      	mov	r0, r3
 800a418:	f7fb fdce 	bl	8005fb8 <HAL_DMA_Abort_IT>
 800a41c:	4603      	mov	r3, r0
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d016      	beq.n	800a450 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a426:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a428:	687a      	ldr	r2, [r7, #4]
 800a42a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a42c:	4610      	mov	r0, r2
 800a42e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a430:	e00e      	b.n	800a450 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a432:	6878      	ldr	r0, [r7, #4]
 800a434:	f000 f990 	bl	800a758 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a438:	e00a      	b.n	800a450 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a43a:	6878      	ldr	r0, [r7, #4]
 800a43c:	f000 f98c 	bl	800a758 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a440:	e006      	b.n	800a450 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a442:	6878      	ldr	r0, [r7, #4]
 800a444:	f000 f988 	bl	800a758 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	2200      	movs	r2, #0
 800a44c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800a44e:	e170      	b.n	800a732 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a450:	bf00      	nop
    return;
 800a452:	e16e      	b.n	800a732 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a458:	2b01      	cmp	r3, #1
 800a45a:	f040 814a 	bne.w	800a6f2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800a45e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a462:	f003 0310 	and.w	r3, r3, #16
 800a466:	2b00      	cmp	r3, #0
 800a468:	f000 8143 	beq.w	800a6f2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800a46c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a470:	f003 0310 	and.w	r3, r3, #16
 800a474:	2b00      	cmp	r3, #0
 800a476:	f000 813c 	beq.w	800a6f2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a47a:	2300      	movs	r3, #0
 800a47c:	60bb      	str	r3, [r7, #8]
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	60bb      	str	r3, [r7, #8]
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	685b      	ldr	r3, [r3, #4]
 800a48c:	60bb      	str	r3, [r7, #8]
 800a48e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	695b      	ldr	r3, [r3, #20]
 800a496:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a49a:	2b40      	cmp	r3, #64	; 0x40
 800a49c:	f040 80b4 	bne.w	800a608 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	685b      	ldr	r3, [r3, #4]
 800a4a8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a4ac:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	f000 8140 	beq.w	800a736 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a4ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a4be:	429a      	cmp	r2, r3
 800a4c0:	f080 8139 	bcs.w	800a736 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a4ca:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4d0:	69db      	ldr	r3, [r3, #28]
 800a4d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a4d6:	f000 8088 	beq.w	800a5ea <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	330c      	adds	r3, #12
 800a4e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a4e8:	e853 3f00 	ldrex	r3, [r3]
 800a4ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800a4f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a4f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a4f8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	330c      	adds	r3, #12
 800a502:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800a506:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a50a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a50e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800a512:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a516:	e841 2300 	strex	r3, r2, [r1]
 800a51a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800a51e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a522:	2b00      	cmp	r3, #0
 800a524:	d1d9      	bne.n	800a4da <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	3314      	adds	r3, #20
 800a52c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a52e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a530:	e853 3f00 	ldrex	r3, [r3]
 800a534:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a536:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a538:	f023 0301 	bic.w	r3, r3, #1
 800a53c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	3314      	adds	r3, #20
 800a546:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a54a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800a54e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a550:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a552:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a556:	e841 2300 	strex	r3, r2, [r1]
 800a55a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a55c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d1e1      	bne.n	800a526 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	3314      	adds	r3, #20
 800a568:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a56a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a56c:	e853 3f00 	ldrex	r3, [r3]
 800a570:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a572:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a574:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a578:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	3314      	adds	r3, #20
 800a582:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a586:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a588:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a58a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a58c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a58e:	e841 2300 	strex	r3, r2, [r1]
 800a592:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a594:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a596:	2b00      	cmp	r3, #0
 800a598:	d1e3      	bne.n	800a562 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	2220      	movs	r2, #32
 800a59e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	2200      	movs	r2, #0
 800a5a6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	330c      	adds	r3, #12
 800a5ae:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a5b2:	e853 3f00 	ldrex	r3, [r3]
 800a5b6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a5b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a5ba:	f023 0310 	bic.w	r3, r3, #16
 800a5be:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	330c      	adds	r3, #12
 800a5c8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800a5cc:	65ba      	str	r2, [r7, #88]	; 0x58
 800a5ce:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5d0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a5d2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a5d4:	e841 2300 	strex	r3, r2, [r1]
 800a5d8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a5da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d1e3      	bne.n	800a5a8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5e4:	4618      	mov	r0, r3
 800a5e6:	f7fb fc77 	bl	8005ed8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a5f2:	b29b      	uxth	r3, r3
 800a5f4:	1ad3      	subs	r3, r2, r3
 800a5f6:	b29b      	uxth	r3, r3
 800a5f8:	4619      	mov	r1, r3
 800a5fa:	6878      	ldr	r0, [r7, #4]
 800a5fc:	f000 f8b6 	bl	800a76c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a600:	e099      	b.n	800a736 <HAL_UART_IRQHandler+0x50e>
 800a602:	bf00      	nop
 800a604:	0800abc7 	.word	0x0800abc7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a610:	b29b      	uxth	r3, r3
 800a612:	1ad3      	subs	r3, r2, r3
 800a614:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a61c:	b29b      	uxth	r3, r3
 800a61e:	2b00      	cmp	r3, #0
 800a620:	f000 808b 	beq.w	800a73a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800a624:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a628:	2b00      	cmp	r3, #0
 800a62a:	f000 8086 	beq.w	800a73a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	330c      	adds	r3, #12
 800a634:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a636:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a638:	e853 3f00 	ldrex	r3, [r3]
 800a63c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a63e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a640:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a644:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	330c      	adds	r3, #12
 800a64e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800a652:	647a      	str	r2, [r7, #68]	; 0x44
 800a654:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a656:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a658:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a65a:	e841 2300 	strex	r3, r2, [r1]
 800a65e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a660:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a662:	2b00      	cmp	r3, #0
 800a664:	d1e3      	bne.n	800a62e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	3314      	adds	r3, #20
 800a66c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a66e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a670:	e853 3f00 	ldrex	r3, [r3]
 800a674:	623b      	str	r3, [r7, #32]
   return(result);
 800a676:	6a3b      	ldr	r3, [r7, #32]
 800a678:	f023 0301 	bic.w	r3, r3, #1
 800a67c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	3314      	adds	r3, #20
 800a686:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a68a:	633a      	str	r2, [r7, #48]	; 0x30
 800a68c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a68e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a690:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a692:	e841 2300 	strex	r3, r2, [r1]
 800a696:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d1e3      	bne.n	800a666 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	2220      	movs	r2, #32
 800a6a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	2200      	movs	r2, #0
 800a6aa:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	330c      	adds	r3, #12
 800a6b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6b4:	693b      	ldr	r3, [r7, #16]
 800a6b6:	e853 3f00 	ldrex	r3, [r3]
 800a6ba:	60fb      	str	r3, [r7, #12]
   return(result);
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	f023 0310 	bic.w	r3, r3, #16
 800a6c2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	330c      	adds	r3, #12
 800a6cc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800a6d0:	61fa      	str	r2, [r7, #28]
 800a6d2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6d4:	69b9      	ldr	r1, [r7, #24]
 800a6d6:	69fa      	ldr	r2, [r7, #28]
 800a6d8:	e841 2300 	strex	r3, r2, [r1]
 800a6dc:	617b      	str	r3, [r7, #20]
   return(result);
 800a6de:	697b      	ldr	r3, [r7, #20]
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d1e3      	bne.n	800a6ac <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a6e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a6e8:	4619      	mov	r1, r3
 800a6ea:	6878      	ldr	r0, [r7, #4]
 800a6ec:	f000 f83e 	bl	800a76c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a6f0:	e023      	b.n	800a73a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a6f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a6f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d009      	beq.n	800a712 <HAL_UART_IRQHandler+0x4ea>
 800a6fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a702:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a706:	2b00      	cmp	r3, #0
 800a708:	d003      	beq.n	800a712 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800a70a:	6878      	ldr	r0, [r7, #4]
 800a70c:	f000 fa6f 	bl	800abee <UART_Transmit_IT>
    return;
 800a710:	e014      	b.n	800a73c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a712:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a716:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d00e      	beq.n	800a73c <HAL_UART_IRQHandler+0x514>
 800a71e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a722:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a726:	2b00      	cmp	r3, #0
 800a728:	d008      	beq.n	800a73c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800a72a:	6878      	ldr	r0, [r7, #4]
 800a72c:	f000 faaf 	bl	800ac8e <UART_EndTransmit_IT>
    return;
 800a730:	e004      	b.n	800a73c <HAL_UART_IRQHandler+0x514>
    return;
 800a732:	bf00      	nop
 800a734:	e002      	b.n	800a73c <HAL_UART_IRQHandler+0x514>
      return;
 800a736:	bf00      	nop
 800a738:	e000      	b.n	800a73c <HAL_UART_IRQHandler+0x514>
      return;
 800a73a:	bf00      	nop
  }
}
 800a73c:	37e8      	adds	r7, #232	; 0xe8
 800a73e:	46bd      	mov	sp, r7
 800a740:	bd80      	pop	{r7, pc}
 800a742:	bf00      	nop

0800a744 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a744:	b480      	push	{r7}
 800a746:	b083      	sub	sp, #12
 800a748:	af00      	add	r7, sp, #0
 800a74a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800a74c:	bf00      	nop
 800a74e:	370c      	adds	r7, #12
 800a750:	46bd      	mov	sp, r7
 800a752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a756:	4770      	bx	lr

0800a758 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a758:	b480      	push	{r7}
 800a75a:	b083      	sub	sp, #12
 800a75c:	af00      	add	r7, sp, #0
 800a75e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800a760:	bf00      	nop
 800a762:	370c      	adds	r7, #12
 800a764:	46bd      	mov	sp, r7
 800a766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a76a:	4770      	bx	lr

0800a76c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a76c:	b480      	push	{r7}
 800a76e:	b083      	sub	sp, #12
 800a770:	af00      	add	r7, sp, #0
 800a772:	6078      	str	r0, [r7, #4]
 800a774:	460b      	mov	r3, r1
 800a776:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a778:	bf00      	nop
 800a77a:	370c      	adds	r7, #12
 800a77c:	46bd      	mov	sp, r7
 800a77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a782:	4770      	bx	lr

0800a784 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a784:	b580      	push	{r7, lr}
 800a786:	b09c      	sub	sp, #112	; 0x70
 800a788:	af00      	add	r7, sp, #0
 800a78a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a790:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d172      	bne.n	800a886 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800a7a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a7a2:	2200      	movs	r2, #0
 800a7a4:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a7a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	330c      	adds	r3, #12
 800a7ac:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a7b0:	e853 3f00 	ldrex	r3, [r3]
 800a7b4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a7b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a7b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a7bc:	66bb      	str	r3, [r7, #104]	; 0x68
 800a7be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	330c      	adds	r3, #12
 800a7c4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a7c6:	65ba      	str	r2, [r7, #88]	; 0x58
 800a7c8:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7ca:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a7cc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a7ce:	e841 2300 	strex	r3, r2, [r1]
 800a7d2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a7d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d1e5      	bne.n	800a7a6 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a7da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	3314      	adds	r3, #20
 800a7e0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7e4:	e853 3f00 	ldrex	r3, [r3]
 800a7e8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a7ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7ec:	f023 0301 	bic.w	r3, r3, #1
 800a7f0:	667b      	str	r3, [r7, #100]	; 0x64
 800a7f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	3314      	adds	r3, #20
 800a7f8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a7fa:	647a      	str	r2, [r7, #68]	; 0x44
 800a7fc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7fe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a800:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a802:	e841 2300 	strex	r3, r2, [r1]
 800a806:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a808:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d1e5      	bne.n	800a7da <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a80e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	3314      	adds	r3, #20
 800a814:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a818:	e853 3f00 	ldrex	r3, [r3]
 800a81c:	623b      	str	r3, [r7, #32]
   return(result);
 800a81e:	6a3b      	ldr	r3, [r7, #32]
 800a820:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a824:	663b      	str	r3, [r7, #96]	; 0x60
 800a826:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	3314      	adds	r3, #20
 800a82c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a82e:	633a      	str	r2, [r7, #48]	; 0x30
 800a830:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a832:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a834:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a836:	e841 2300 	strex	r3, r2, [r1]
 800a83a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a83c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d1e5      	bne.n	800a80e <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a842:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a844:	2220      	movs	r2, #32
 800a846:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a84a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a84c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a84e:	2b01      	cmp	r3, #1
 800a850:	d119      	bne.n	800a886 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a852:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	330c      	adds	r3, #12
 800a858:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a85a:	693b      	ldr	r3, [r7, #16]
 800a85c:	e853 3f00 	ldrex	r3, [r3]
 800a860:	60fb      	str	r3, [r7, #12]
   return(result);
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	f023 0310 	bic.w	r3, r3, #16
 800a868:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a86a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	330c      	adds	r3, #12
 800a870:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a872:	61fa      	str	r2, [r7, #28]
 800a874:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a876:	69b9      	ldr	r1, [r7, #24]
 800a878:	69fa      	ldr	r2, [r7, #28]
 800a87a:	e841 2300 	strex	r3, r2, [r1]
 800a87e:	617b      	str	r3, [r7, #20]
   return(result);
 800a880:	697b      	ldr	r3, [r7, #20]
 800a882:	2b00      	cmp	r3, #0
 800a884:	d1e5      	bne.n	800a852 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a886:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a88a:	2b01      	cmp	r3, #1
 800a88c:	d106      	bne.n	800a89c <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a88e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a890:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a892:	4619      	mov	r1, r3
 800a894:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a896:	f7ff ff69 	bl	800a76c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a89a:	e002      	b.n	800a8a2 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800a89c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a89e:	f7f7 fde7 	bl	8002470 <HAL_UART_RxCpltCallback>
}
 800a8a2:	bf00      	nop
 800a8a4:	3770      	adds	r7, #112	; 0x70
 800a8a6:	46bd      	mov	sp, r7
 800a8a8:	bd80      	pop	{r7, pc}

0800a8aa <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a8aa:	b580      	push	{r7, lr}
 800a8ac:	b084      	sub	sp, #16
 800a8ae:	af00      	add	r7, sp, #0
 800a8b0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8b6:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8bc:	2b01      	cmp	r3, #1
 800a8be:	d108      	bne.n	800a8d2 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a8c4:	085b      	lsrs	r3, r3, #1
 800a8c6:	b29b      	uxth	r3, r3
 800a8c8:	4619      	mov	r1, r3
 800a8ca:	68f8      	ldr	r0, [r7, #12]
 800a8cc:	f7ff ff4e 	bl	800a76c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a8d0:	e002      	b.n	800a8d8 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800a8d2:	68f8      	ldr	r0, [r7, #12]
 800a8d4:	f7ff ff36 	bl	800a744 <HAL_UART_RxHalfCpltCallback>
}
 800a8d8:	bf00      	nop
 800a8da:	3710      	adds	r7, #16
 800a8dc:	46bd      	mov	sp, r7
 800a8de:	bd80      	pop	{r7, pc}

0800a8e0 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a8e0:	b580      	push	{r7, lr}
 800a8e2:	b084      	sub	sp, #16
 800a8e4:	af00      	add	r7, sp, #0
 800a8e6:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800a8e8:	2300      	movs	r3, #0
 800a8ea:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8f0:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800a8f2:	68bb      	ldr	r3, [r7, #8]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	695b      	ldr	r3, [r3, #20]
 800a8f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a8fc:	2b80      	cmp	r3, #128	; 0x80
 800a8fe:	bf0c      	ite	eq
 800a900:	2301      	moveq	r3, #1
 800a902:	2300      	movne	r3, #0
 800a904:	b2db      	uxtb	r3, r3
 800a906:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800a908:	68bb      	ldr	r3, [r7, #8]
 800a90a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a90e:	b2db      	uxtb	r3, r3
 800a910:	2b21      	cmp	r3, #33	; 0x21
 800a912:	d108      	bne.n	800a926 <UART_DMAError+0x46>
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	2b00      	cmp	r3, #0
 800a918:	d005      	beq.n	800a926 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800a91a:	68bb      	ldr	r3, [r7, #8]
 800a91c:	2200      	movs	r2, #0
 800a91e:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800a920:	68b8      	ldr	r0, [r7, #8]
 800a922:	f000 f8c5 	bl	800aab0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a926:	68bb      	ldr	r3, [r7, #8]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	695b      	ldr	r3, [r3, #20]
 800a92c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a930:	2b40      	cmp	r3, #64	; 0x40
 800a932:	bf0c      	ite	eq
 800a934:	2301      	moveq	r3, #1
 800a936:	2300      	movne	r3, #0
 800a938:	b2db      	uxtb	r3, r3
 800a93a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800a93c:	68bb      	ldr	r3, [r7, #8]
 800a93e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a942:	b2db      	uxtb	r3, r3
 800a944:	2b22      	cmp	r3, #34	; 0x22
 800a946:	d108      	bne.n	800a95a <UART_DMAError+0x7a>
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d005      	beq.n	800a95a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800a94e:	68bb      	ldr	r3, [r7, #8]
 800a950:	2200      	movs	r2, #0
 800a952:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800a954:	68b8      	ldr	r0, [r7, #8]
 800a956:	f000 f8d3 	bl	800ab00 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a95a:	68bb      	ldr	r3, [r7, #8]
 800a95c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a95e:	f043 0210 	orr.w	r2, r3, #16
 800a962:	68bb      	ldr	r3, [r7, #8]
 800a964:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a966:	68b8      	ldr	r0, [r7, #8]
 800a968:	f7ff fef6 	bl	800a758 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a96c:	bf00      	nop
 800a96e:	3710      	adds	r7, #16
 800a970:	46bd      	mov	sp, r7
 800a972:	bd80      	pop	{r7, pc}

0800a974 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a974:	b580      	push	{r7, lr}
 800a976:	b098      	sub	sp, #96	; 0x60
 800a978:	af00      	add	r7, sp, #0
 800a97a:	60f8      	str	r0, [r7, #12]
 800a97c:	60b9      	str	r1, [r7, #8]
 800a97e:	4613      	mov	r3, r2
 800a980:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800a982:	68ba      	ldr	r2, [r7, #8]
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	88fa      	ldrh	r2, [r7, #6]
 800a98c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	2200      	movs	r2, #0
 800a992:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	2222      	movs	r2, #34	; 0x22
 800a998:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9a0:	4a40      	ldr	r2, [pc, #256]	; (800aaa4 <UART_Start_Receive_DMA+0x130>)
 800a9a2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9a8:	4a3f      	ldr	r2, [pc, #252]	; (800aaa8 <UART_Start_Receive_DMA+0x134>)
 800a9aa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9b0:	4a3e      	ldr	r2, [pc, #248]	; (800aaac <UART_Start_Receive_DMA+0x138>)
 800a9b2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9b8:	2200      	movs	r2, #0
 800a9ba:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800a9bc:	f107 0308 	add.w	r3, r7, #8
 800a9c0:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	3304      	adds	r3, #4
 800a9cc:	4619      	mov	r1, r3
 800a9ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a9d0:	681a      	ldr	r2, [r3, #0]
 800a9d2:	88fb      	ldrh	r3, [r7, #6]
 800a9d4:	f7fb fa28 	bl	8005e28 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800a9d8:	2300      	movs	r3, #0
 800a9da:	613b      	str	r3, [r7, #16]
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	613b      	str	r3, [r7, #16]
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	685b      	ldr	r3, [r3, #4]
 800a9ea:	613b      	str	r3, [r7, #16]
 800a9ec:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	2200      	movs	r2, #0
 800a9f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	691b      	ldr	r3, [r3, #16]
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d019      	beq.n	800aa32 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	330c      	adds	r3, #12
 800aa04:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aa08:	e853 3f00 	ldrex	r3, [r3]
 800aa0c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800aa0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aa14:	65bb      	str	r3, [r7, #88]	; 0x58
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	330c      	adds	r3, #12
 800aa1c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800aa1e:	64fa      	str	r2, [r7, #76]	; 0x4c
 800aa20:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa22:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800aa24:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800aa26:	e841 2300 	strex	r3, r2, [r1]
 800aa2a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800aa2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d1e5      	bne.n	800a9fe <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	3314      	adds	r3, #20
 800aa38:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa3c:	e853 3f00 	ldrex	r3, [r3]
 800aa40:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800aa42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa44:	f043 0301 	orr.w	r3, r3, #1
 800aa48:	657b      	str	r3, [r7, #84]	; 0x54
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	3314      	adds	r3, #20
 800aa50:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800aa52:	63ba      	str	r2, [r7, #56]	; 0x38
 800aa54:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa56:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800aa58:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800aa5a:	e841 2300 	strex	r3, r2, [r1]
 800aa5e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800aa60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d1e5      	bne.n	800aa32 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	3314      	adds	r3, #20
 800aa6c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa6e:	69bb      	ldr	r3, [r7, #24]
 800aa70:	e853 3f00 	ldrex	r3, [r3]
 800aa74:	617b      	str	r3, [r7, #20]
   return(result);
 800aa76:	697b      	ldr	r3, [r7, #20]
 800aa78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa7c:	653b      	str	r3, [r7, #80]	; 0x50
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	3314      	adds	r3, #20
 800aa84:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800aa86:	627a      	str	r2, [r7, #36]	; 0x24
 800aa88:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa8a:	6a39      	ldr	r1, [r7, #32]
 800aa8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa8e:	e841 2300 	strex	r3, r2, [r1]
 800aa92:	61fb      	str	r3, [r7, #28]
   return(result);
 800aa94:	69fb      	ldr	r3, [r7, #28]
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d1e5      	bne.n	800aa66 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800aa9a:	2300      	movs	r3, #0
}
 800aa9c:	4618      	mov	r0, r3
 800aa9e:	3760      	adds	r7, #96	; 0x60
 800aaa0:	46bd      	mov	sp, r7
 800aaa2:	bd80      	pop	{r7, pc}
 800aaa4:	0800a785 	.word	0x0800a785
 800aaa8:	0800a8ab 	.word	0x0800a8ab
 800aaac:	0800a8e1 	.word	0x0800a8e1

0800aab0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800aab0:	b480      	push	{r7}
 800aab2:	b089      	sub	sp, #36	; 0x24
 800aab4:	af00      	add	r7, sp, #0
 800aab6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	330c      	adds	r3, #12
 800aabe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	e853 3f00 	ldrex	r3, [r3]
 800aac6:	60bb      	str	r3, [r7, #8]
   return(result);
 800aac8:	68bb      	ldr	r3, [r7, #8]
 800aaca:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800aace:	61fb      	str	r3, [r7, #28]
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	330c      	adds	r3, #12
 800aad6:	69fa      	ldr	r2, [r7, #28]
 800aad8:	61ba      	str	r2, [r7, #24]
 800aada:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aadc:	6979      	ldr	r1, [r7, #20]
 800aade:	69ba      	ldr	r2, [r7, #24]
 800aae0:	e841 2300 	strex	r3, r2, [r1]
 800aae4:	613b      	str	r3, [r7, #16]
   return(result);
 800aae6:	693b      	ldr	r3, [r7, #16]
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d1e5      	bne.n	800aab8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	2220      	movs	r2, #32
 800aaf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800aaf4:	bf00      	nop
 800aaf6:	3724      	adds	r7, #36	; 0x24
 800aaf8:	46bd      	mov	sp, r7
 800aafa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aafe:	4770      	bx	lr

0800ab00 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ab00:	b480      	push	{r7}
 800ab02:	b095      	sub	sp, #84	; 0x54
 800ab04:	af00      	add	r7, sp, #0
 800ab06:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	330c      	adds	r3, #12
 800ab0e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab12:	e853 3f00 	ldrex	r3, [r3]
 800ab16:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ab18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab1a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ab1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	330c      	adds	r3, #12
 800ab26:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ab28:	643a      	str	r2, [r7, #64]	; 0x40
 800ab2a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab2c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ab2e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ab30:	e841 2300 	strex	r3, r2, [r1]
 800ab34:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ab36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d1e5      	bne.n	800ab08 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	3314      	adds	r3, #20
 800ab42:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab44:	6a3b      	ldr	r3, [r7, #32]
 800ab46:	e853 3f00 	ldrex	r3, [r3]
 800ab4a:	61fb      	str	r3, [r7, #28]
   return(result);
 800ab4c:	69fb      	ldr	r3, [r7, #28]
 800ab4e:	f023 0301 	bic.w	r3, r3, #1
 800ab52:	64bb      	str	r3, [r7, #72]	; 0x48
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	3314      	adds	r3, #20
 800ab5a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ab5c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ab5e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab60:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ab62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ab64:	e841 2300 	strex	r3, r2, [r1]
 800ab68:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ab6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d1e5      	bne.n	800ab3c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab74:	2b01      	cmp	r3, #1
 800ab76:	d119      	bne.n	800abac <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	330c      	adds	r3, #12
 800ab7e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	e853 3f00 	ldrex	r3, [r3]
 800ab86:	60bb      	str	r3, [r7, #8]
   return(result);
 800ab88:	68bb      	ldr	r3, [r7, #8]
 800ab8a:	f023 0310 	bic.w	r3, r3, #16
 800ab8e:	647b      	str	r3, [r7, #68]	; 0x44
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	330c      	adds	r3, #12
 800ab96:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ab98:	61ba      	str	r2, [r7, #24]
 800ab9a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab9c:	6979      	ldr	r1, [r7, #20]
 800ab9e:	69ba      	ldr	r2, [r7, #24]
 800aba0:	e841 2300 	strex	r3, r2, [r1]
 800aba4:	613b      	str	r3, [r7, #16]
   return(result);
 800aba6:	693b      	ldr	r3, [r7, #16]
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d1e5      	bne.n	800ab78 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	2220      	movs	r2, #32
 800abb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	2200      	movs	r2, #0
 800abb8:	631a      	str	r2, [r3, #48]	; 0x30
}
 800abba:	bf00      	nop
 800abbc:	3754      	adds	r7, #84	; 0x54
 800abbe:	46bd      	mov	sp, r7
 800abc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc4:	4770      	bx	lr

0800abc6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800abc6:	b580      	push	{r7, lr}
 800abc8:	b084      	sub	sp, #16
 800abca:	af00      	add	r7, sp, #0
 800abcc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abd2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	2200      	movs	r2, #0
 800abd8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	2200      	movs	r2, #0
 800abde:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800abe0:	68f8      	ldr	r0, [r7, #12]
 800abe2:	f7ff fdb9 	bl	800a758 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800abe6:	bf00      	nop
 800abe8:	3710      	adds	r7, #16
 800abea:	46bd      	mov	sp, r7
 800abec:	bd80      	pop	{r7, pc}

0800abee <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800abee:	b480      	push	{r7}
 800abf0:	b085      	sub	sp, #20
 800abf2:	af00      	add	r7, sp, #0
 800abf4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800abfc:	b2db      	uxtb	r3, r3
 800abfe:	2b21      	cmp	r3, #33	; 0x21
 800ac00:	d13e      	bne.n	800ac80 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	689b      	ldr	r3, [r3, #8]
 800ac06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ac0a:	d114      	bne.n	800ac36 <UART_Transmit_IT+0x48>
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	691b      	ldr	r3, [r3, #16]
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d110      	bne.n	800ac36 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	6a1b      	ldr	r3, [r3, #32]
 800ac18:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	881b      	ldrh	r3, [r3, #0]
 800ac1e:	461a      	mov	r2, r3
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ac28:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	6a1b      	ldr	r3, [r3, #32]
 800ac2e:	1c9a      	adds	r2, r3, #2
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	621a      	str	r2, [r3, #32]
 800ac34:	e008      	b.n	800ac48 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	6a1b      	ldr	r3, [r3, #32]
 800ac3a:	1c59      	adds	r1, r3, #1
 800ac3c:	687a      	ldr	r2, [r7, #4]
 800ac3e:	6211      	str	r1, [r2, #32]
 800ac40:	781a      	ldrb	r2, [r3, #0]
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ac4c:	b29b      	uxth	r3, r3
 800ac4e:	3b01      	subs	r3, #1
 800ac50:	b29b      	uxth	r3, r3
 800ac52:	687a      	ldr	r2, [r7, #4]
 800ac54:	4619      	mov	r1, r3
 800ac56:	84d1      	strh	r1, [r2, #38]	; 0x26
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d10f      	bne.n	800ac7c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	68da      	ldr	r2, [r3, #12]
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ac6a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	68da      	ldr	r2, [r3, #12]
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ac7a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800ac7c:	2300      	movs	r3, #0
 800ac7e:	e000      	b.n	800ac82 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800ac80:	2302      	movs	r3, #2
  }
}
 800ac82:	4618      	mov	r0, r3
 800ac84:	3714      	adds	r7, #20
 800ac86:	46bd      	mov	sp, r7
 800ac88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac8c:	4770      	bx	lr

0800ac8e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ac8e:	b580      	push	{r7, lr}
 800ac90:	b082      	sub	sp, #8
 800ac92:	af00      	add	r7, sp, #0
 800ac94:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	68da      	ldr	r2, [r3, #12]
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800aca4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	2220      	movs	r2, #32
 800acaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800acae:	6878      	ldr	r0, [r7, #4]
 800acb0:	f7f7 fbc8 	bl	8002444 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800acb4:	2300      	movs	r3, #0
}
 800acb6:	4618      	mov	r0, r3
 800acb8:	3708      	adds	r7, #8
 800acba:	46bd      	mov	sp, r7
 800acbc:	bd80      	pop	{r7, pc}

0800acbe <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800acbe:	b580      	push	{r7, lr}
 800acc0:	b08c      	sub	sp, #48	; 0x30
 800acc2:	af00      	add	r7, sp, #0
 800acc4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800accc:	b2db      	uxtb	r3, r3
 800acce:	2b22      	cmp	r3, #34	; 0x22
 800acd0:	f040 80ab 	bne.w	800ae2a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	689b      	ldr	r3, [r3, #8]
 800acd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800acdc:	d117      	bne.n	800ad0e <UART_Receive_IT+0x50>
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	691b      	ldr	r3, [r3, #16]
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d113      	bne.n	800ad0e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800ace6:	2300      	movs	r3, #0
 800ace8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acee:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	685b      	ldr	r3, [r3, #4]
 800acf6:	b29b      	uxth	r3, r3
 800acf8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800acfc:	b29a      	uxth	r2, r3
 800acfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad00:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad06:	1c9a      	adds	r2, r3, #2
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	629a      	str	r2, [r3, #40]	; 0x28
 800ad0c:	e026      	b.n	800ad5c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad12:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800ad14:	2300      	movs	r3, #0
 800ad16:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	689b      	ldr	r3, [r3, #8]
 800ad1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ad20:	d007      	beq.n	800ad32 <UART_Receive_IT+0x74>
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	689b      	ldr	r3, [r3, #8]
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d10a      	bne.n	800ad40 <UART_Receive_IT+0x82>
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	691b      	ldr	r3, [r3, #16]
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d106      	bne.n	800ad40 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	685b      	ldr	r3, [r3, #4]
 800ad38:	b2da      	uxtb	r2, r3
 800ad3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad3c:	701a      	strb	r2, [r3, #0]
 800ad3e:	e008      	b.n	800ad52 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	685b      	ldr	r3, [r3, #4]
 800ad46:	b2db      	uxtb	r3, r3
 800ad48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ad4c:	b2da      	uxtb	r2, r3
 800ad4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad50:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad56:	1c5a      	adds	r2, r3, #1
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ad60:	b29b      	uxth	r3, r3
 800ad62:	3b01      	subs	r3, #1
 800ad64:	b29b      	uxth	r3, r3
 800ad66:	687a      	ldr	r2, [r7, #4]
 800ad68:	4619      	mov	r1, r3
 800ad6a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d15a      	bne.n	800ae26 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	68da      	ldr	r2, [r3, #12]
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	f022 0220 	bic.w	r2, r2, #32
 800ad7e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	68da      	ldr	r2, [r3, #12]
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ad8e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	695a      	ldr	r2, [r3, #20]
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	f022 0201 	bic.w	r2, r2, #1
 800ad9e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	2220      	movs	r2, #32
 800ada4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800adac:	2b01      	cmp	r3, #1
 800adae:	d135      	bne.n	800ae1c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	2200      	movs	r2, #0
 800adb4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	330c      	adds	r3, #12
 800adbc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adbe:	697b      	ldr	r3, [r7, #20]
 800adc0:	e853 3f00 	ldrex	r3, [r3]
 800adc4:	613b      	str	r3, [r7, #16]
   return(result);
 800adc6:	693b      	ldr	r3, [r7, #16]
 800adc8:	f023 0310 	bic.w	r3, r3, #16
 800adcc:	627b      	str	r3, [r7, #36]	; 0x24
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	330c      	adds	r3, #12
 800add4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800add6:	623a      	str	r2, [r7, #32]
 800add8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adda:	69f9      	ldr	r1, [r7, #28]
 800addc:	6a3a      	ldr	r2, [r7, #32]
 800adde:	e841 2300 	strex	r3, r2, [r1]
 800ade2:	61bb      	str	r3, [r7, #24]
   return(result);
 800ade4:	69bb      	ldr	r3, [r7, #24]
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d1e5      	bne.n	800adb6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	f003 0310 	and.w	r3, r3, #16
 800adf4:	2b10      	cmp	r3, #16
 800adf6:	d10a      	bne.n	800ae0e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800adf8:	2300      	movs	r3, #0
 800adfa:	60fb      	str	r3, [r7, #12]
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	60fb      	str	r3, [r7, #12]
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	685b      	ldr	r3, [r3, #4]
 800ae0a:	60fb      	str	r3, [r7, #12]
 800ae0c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800ae12:	4619      	mov	r1, r3
 800ae14:	6878      	ldr	r0, [r7, #4]
 800ae16:	f7ff fca9 	bl	800a76c <HAL_UARTEx_RxEventCallback>
 800ae1a:	e002      	b.n	800ae22 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800ae1c:	6878      	ldr	r0, [r7, #4]
 800ae1e:	f7f7 fb27 	bl	8002470 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800ae22:	2300      	movs	r3, #0
 800ae24:	e002      	b.n	800ae2c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800ae26:	2300      	movs	r3, #0
 800ae28:	e000      	b.n	800ae2c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800ae2a:	2302      	movs	r3, #2
  }
}
 800ae2c:	4618      	mov	r0, r3
 800ae2e:	3730      	adds	r7, #48	; 0x30
 800ae30:	46bd      	mov	sp, r7
 800ae32:	bd80      	pop	{r7, pc}

0800ae34 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ae34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ae38:	b0c0      	sub	sp, #256	; 0x100
 800ae3a:	af00      	add	r7, sp, #0
 800ae3c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ae40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	691b      	ldr	r3, [r3, #16]
 800ae48:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800ae4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ae50:	68d9      	ldr	r1, [r3, #12]
 800ae52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ae56:	681a      	ldr	r2, [r3, #0]
 800ae58:	ea40 0301 	orr.w	r3, r0, r1
 800ae5c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800ae5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ae62:	689a      	ldr	r2, [r3, #8]
 800ae64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ae68:	691b      	ldr	r3, [r3, #16]
 800ae6a:	431a      	orrs	r2, r3
 800ae6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ae70:	695b      	ldr	r3, [r3, #20]
 800ae72:	431a      	orrs	r2, r3
 800ae74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ae78:	69db      	ldr	r3, [r3, #28]
 800ae7a:	4313      	orrs	r3, r2
 800ae7c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800ae80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	68db      	ldr	r3, [r3, #12]
 800ae88:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800ae8c:	f021 010c 	bic.w	r1, r1, #12
 800ae90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ae94:	681a      	ldr	r2, [r3, #0]
 800ae96:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800ae9a:	430b      	orrs	r3, r1
 800ae9c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800ae9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	695b      	ldr	r3, [r3, #20]
 800aea6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800aeaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aeae:	6999      	ldr	r1, [r3, #24]
 800aeb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aeb4:	681a      	ldr	r2, [r3, #0]
 800aeb6:	ea40 0301 	orr.w	r3, r0, r1
 800aeba:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800aebc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aec0:	681a      	ldr	r2, [r3, #0]
 800aec2:	4b8f      	ldr	r3, [pc, #572]	; (800b100 <UART_SetConfig+0x2cc>)
 800aec4:	429a      	cmp	r2, r3
 800aec6:	d005      	beq.n	800aed4 <UART_SetConfig+0xa0>
 800aec8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aecc:	681a      	ldr	r2, [r3, #0]
 800aece:	4b8d      	ldr	r3, [pc, #564]	; (800b104 <UART_SetConfig+0x2d0>)
 800aed0:	429a      	cmp	r2, r3
 800aed2:	d104      	bne.n	800aede <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800aed4:	f7fd f928 	bl	8008128 <HAL_RCC_GetPCLK2Freq>
 800aed8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800aedc:	e003      	b.n	800aee6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800aede:	f7fd f90f 	bl	8008100 <HAL_RCC_GetPCLK1Freq>
 800aee2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800aee6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aeea:	69db      	ldr	r3, [r3, #28]
 800aeec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aef0:	f040 810c 	bne.w	800b10c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800aef4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800aef8:	2200      	movs	r2, #0
 800aefa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800aefe:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800af02:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800af06:	4622      	mov	r2, r4
 800af08:	462b      	mov	r3, r5
 800af0a:	1891      	adds	r1, r2, r2
 800af0c:	65b9      	str	r1, [r7, #88]	; 0x58
 800af0e:	415b      	adcs	r3, r3
 800af10:	65fb      	str	r3, [r7, #92]	; 0x5c
 800af12:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800af16:	4621      	mov	r1, r4
 800af18:	eb12 0801 	adds.w	r8, r2, r1
 800af1c:	4629      	mov	r1, r5
 800af1e:	eb43 0901 	adc.w	r9, r3, r1
 800af22:	f04f 0200 	mov.w	r2, #0
 800af26:	f04f 0300 	mov.w	r3, #0
 800af2a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800af2e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800af32:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800af36:	4690      	mov	r8, r2
 800af38:	4699      	mov	r9, r3
 800af3a:	4623      	mov	r3, r4
 800af3c:	eb18 0303 	adds.w	r3, r8, r3
 800af40:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800af44:	462b      	mov	r3, r5
 800af46:	eb49 0303 	adc.w	r3, r9, r3
 800af4a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800af4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af52:	685b      	ldr	r3, [r3, #4]
 800af54:	2200      	movs	r2, #0
 800af56:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800af5a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800af5e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800af62:	460b      	mov	r3, r1
 800af64:	18db      	adds	r3, r3, r3
 800af66:	653b      	str	r3, [r7, #80]	; 0x50
 800af68:	4613      	mov	r3, r2
 800af6a:	eb42 0303 	adc.w	r3, r2, r3
 800af6e:	657b      	str	r3, [r7, #84]	; 0x54
 800af70:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800af74:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800af78:	f7f5 fe86 	bl	8000c88 <__aeabi_uldivmod>
 800af7c:	4602      	mov	r2, r0
 800af7e:	460b      	mov	r3, r1
 800af80:	4b61      	ldr	r3, [pc, #388]	; (800b108 <UART_SetConfig+0x2d4>)
 800af82:	fba3 2302 	umull	r2, r3, r3, r2
 800af86:	095b      	lsrs	r3, r3, #5
 800af88:	011c      	lsls	r4, r3, #4
 800af8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800af8e:	2200      	movs	r2, #0
 800af90:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800af94:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800af98:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800af9c:	4642      	mov	r2, r8
 800af9e:	464b      	mov	r3, r9
 800afa0:	1891      	adds	r1, r2, r2
 800afa2:	64b9      	str	r1, [r7, #72]	; 0x48
 800afa4:	415b      	adcs	r3, r3
 800afa6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800afa8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800afac:	4641      	mov	r1, r8
 800afae:	eb12 0a01 	adds.w	sl, r2, r1
 800afb2:	4649      	mov	r1, r9
 800afb4:	eb43 0b01 	adc.w	fp, r3, r1
 800afb8:	f04f 0200 	mov.w	r2, #0
 800afbc:	f04f 0300 	mov.w	r3, #0
 800afc0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800afc4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800afc8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800afcc:	4692      	mov	sl, r2
 800afce:	469b      	mov	fp, r3
 800afd0:	4643      	mov	r3, r8
 800afd2:	eb1a 0303 	adds.w	r3, sl, r3
 800afd6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800afda:	464b      	mov	r3, r9
 800afdc:	eb4b 0303 	adc.w	r3, fp, r3
 800afe0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800afe4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800afe8:	685b      	ldr	r3, [r3, #4]
 800afea:	2200      	movs	r2, #0
 800afec:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800aff0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800aff4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800aff8:	460b      	mov	r3, r1
 800affa:	18db      	adds	r3, r3, r3
 800affc:	643b      	str	r3, [r7, #64]	; 0x40
 800affe:	4613      	mov	r3, r2
 800b000:	eb42 0303 	adc.w	r3, r2, r3
 800b004:	647b      	str	r3, [r7, #68]	; 0x44
 800b006:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800b00a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800b00e:	f7f5 fe3b 	bl	8000c88 <__aeabi_uldivmod>
 800b012:	4602      	mov	r2, r0
 800b014:	460b      	mov	r3, r1
 800b016:	4611      	mov	r1, r2
 800b018:	4b3b      	ldr	r3, [pc, #236]	; (800b108 <UART_SetConfig+0x2d4>)
 800b01a:	fba3 2301 	umull	r2, r3, r3, r1
 800b01e:	095b      	lsrs	r3, r3, #5
 800b020:	2264      	movs	r2, #100	; 0x64
 800b022:	fb02 f303 	mul.w	r3, r2, r3
 800b026:	1acb      	subs	r3, r1, r3
 800b028:	00db      	lsls	r3, r3, #3
 800b02a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800b02e:	4b36      	ldr	r3, [pc, #216]	; (800b108 <UART_SetConfig+0x2d4>)
 800b030:	fba3 2302 	umull	r2, r3, r3, r2
 800b034:	095b      	lsrs	r3, r3, #5
 800b036:	005b      	lsls	r3, r3, #1
 800b038:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b03c:	441c      	add	r4, r3
 800b03e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b042:	2200      	movs	r2, #0
 800b044:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b048:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800b04c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800b050:	4642      	mov	r2, r8
 800b052:	464b      	mov	r3, r9
 800b054:	1891      	adds	r1, r2, r2
 800b056:	63b9      	str	r1, [r7, #56]	; 0x38
 800b058:	415b      	adcs	r3, r3
 800b05a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b05c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800b060:	4641      	mov	r1, r8
 800b062:	1851      	adds	r1, r2, r1
 800b064:	6339      	str	r1, [r7, #48]	; 0x30
 800b066:	4649      	mov	r1, r9
 800b068:	414b      	adcs	r3, r1
 800b06a:	637b      	str	r3, [r7, #52]	; 0x34
 800b06c:	f04f 0200 	mov.w	r2, #0
 800b070:	f04f 0300 	mov.w	r3, #0
 800b074:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800b078:	4659      	mov	r1, fp
 800b07a:	00cb      	lsls	r3, r1, #3
 800b07c:	4651      	mov	r1, sl
 800b07e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b082:	4651      	mov	r1, sl
 800b084:	00ca      	lsls	r2, r1, #3
 800b086:	4610      	mov	r0, r2
 800b088:	4619      	mov	r1, r3
 800b08a:	4603      	mov	r3, r0
 800b08c:	4642      	mov	r2, r8
 800b08e:	189b      	adds	r3, r3, r2
 800b090:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b094:	464b      	mov	r3, r9
 800b096:	460a      	mov	r2, r1
 800b098:	eb42 0303 	adc.w	r3, r2, r3
 800b09c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b0a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b0a4:	685b      	ldr	r3, [r3, #4]
 800b0a6:	2200      	movs	r2, #0
 800b0a8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b0ac:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800b0b0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800b0b4:	460b      	mov	r3, r1
 800b0b6:	18db      	adds	r3, r3, r3
 800b0b8:	62bb      	str	r3, [r7, #40]	; 0x28
 800b0ba:	4613      	mov	r3, r2
 800b0bc:	eb42 0303 	adc.w	r3, r2, r3
 800b0c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b0c2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800b0c6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800b0ca:	f7f5 fddd 	bl	8000c88 <__aeabi_uldivmod>
 800b0ce:	4602      	mov	r2, r0
 800b0d0:	460b      	mov	r3, r1
 800b0d2:	4b0d      	ldr	r3, [pc, #52]	; (800b108 <UART_SetConfig+0x2d4>)
 800b0d4:	fba3 1302 	umull	r1, r3, r3, r2
 800b0d8:	095b      	lsrs	r3, r3, #5
 800b0da:	2164      	movs	r1, #100	; 0x64
 800b0dc:	fb01 f303 	mul.w	r3, r1, r3
 800b0e0:	1ad3      	subs	r3, r2, r3
 800b0e2:	00db      	lsls	r3, r3, #3
 800b0e4:	3332      	adds	r3, #50	; 0x32
 800b0e6:	4a08      	ldr	r2, [pc, #32]	; (800b108 <UART_SetConfig+0x2d4>)
 800b0e8:	fba2 2303 	umull	r2, r3, r2, r3
 800b0ec:	095b      	lsrs	r3, r3, #5
 800b0ee:	f003 0207 	and.w	r2, r3, #7
 800b0f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	4422      	add	r2, r4
 800b0fa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800b0fc:	e105      	b.n	800b30a <UART_SetConfig+0x4d6>
 800b0fe:	bf00      	nop
 800b100:	40011000 	.word	0x40011000
 800b104:	40011400 	.word	0x40011400
 800b108:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b10c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b110:	2200      	movs	r2, #0
 800b112:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b116:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b11a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800b11e:	4642      	mov	r2, r8
 800b120:	464b      	mov	r3, r9
 800b122:	1891      	adds	r1, r2, r2
 800b124:	6239      	str	r1, [r7, #32]
 800b126:	415b      	adcs	r3, r3
 800b128:	627b      	str	r3, [r7, #36]	; 0x24
 800b12a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b12e:	4641      	mov	r1, r8
 800b130:	1854      	adds	r4, r2, r1
 800b132:	4649      	mov	r1, r9
 800b134:	eb43 0501 	adc.w	r5, r3, r1
 800b138:	f04f 0200 	mov.w	r2, #0
 800b13c:	f04f 0300 	mov.w	r3, #0
 800b140:	00eb      	lsls	r3, r5, #3
 800b142:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b146:	00e2      	lsls	r2, r4, #3
 800b148:	4614      	mov	r4, r2
 800b14a:	461d      	mov	r5, r3
 800b14c:	4643      	mov	r3, r8
 800b14e:	18e3      	adds	r3, r4, r3
 800b150:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b154:	464b      	mov	r3, r9
 800b156:	eb45 0303 	adc.w	r3, r5, r3
 800b15a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b15e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b162:	685b      	ldr	r3, [r3, #4]
 800b164:	2200      	movs	r2, #0
 800b166:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b16a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b16e:	f04f 0200 	mov.w	r2, #0
 800b172:	f04f 0300 	mov.w	r3, #0
 800b176:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800b17a:	4629      	mov	r1, r5
 800b17c:	008b      	lsls	r3, r1, #2
 800b17e:	4621      	mov	r1, r4
 800b180:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b184:	4621      	mov	r1, r4
 800b186:	008a      	lsls	r2, r1, #2
 800b188:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800b18c:	f7f5 fd7c 	bl	8000c88 <__aeabi_uldivmod>
 800b190:	4602      	mov	r2, r0
 800b192:	460b      	mov	r3, r1
 800b194:	4b60      	ldr	r3, [pc, #384]	; (800b318 <UART_SetConfig+0x4e4>)
 800b196:	fba3 2302 	umull	r2, r3, r3, r2
 800b19a:	095b      	lsrs	r3, r3, #5
 800b19c:	011c      	lsls	r4, r3, #4
 800b19e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b1a2:	2200      	movs	r2, #0
 800b1a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b1a8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800b1ac:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800b1b0:	4642      	mov	r2, r8
 800b1b2:	464b      	mov	r3, r9
 800b1b4:	1891      	adds	r1, r2, r2
 800b1b6:	61b9      	str	r1, [r7, #24]
 800b1b8:	415b      	adcs	r3, r3
 800b1ba:	61fb      	str	r3, [r7, #28]
 800b1bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b1c0:	4641      	mov	r1, r8
 800b1c2:	1851      	adds	r1, r2, r1
 800b1c4:	6139      	str	r1, [r7, #16]
 800b1c6:	4649      	mov	r1, r9
 800b1c8:	414b      	adcs	r3, r1
 800b1ca:	617b      	str	r3, [r7, #20]
 800b1cc:	f04f 0200 	mov.w	r2, #0
 800b1d0:	f04f 0300 	mov.w	r3, #0
 800b1d4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800b1d8:	4659      	mov	r1, fp
 800b1da:	00cb      	lsls	r3, r1, #3
 800b1dc:	4651      	mov	r1, sl
 800b1de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b1e2:	4651      	mov	r1, sl
 800b1e4:	00ca      	lsls	r2, r1, #3
 800b1e6:	4610      	mov	r0, r2
 800b1e8:	4619      	mov	r1, r3
 800b1ea:	4603      	mov	r3, r0
 800b1ec:	4642      	mov	r2, r8
 800b1ee:	189b      	adds	r3, r3, r2
 800b1f0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b1f4:	464b      	mov	r3, r9
 800b1f6:	460a      	mov	r2, r1
 800b1f8:	eb42 0303 	adc.w	r3, r2, r3
 800b1fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b200:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b204:	685b      	ldr	r3, [r3, #4]
 800b206:	2200      	movs	r2, #0
 800b208:	67bb      	str	r3, [r7, #120]	; 0x78
 800b20a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800b20c:	f04f 0200 	mov.w	r2, #0
 800b210:	f04f 0300 	mov.w	r3, #0
 800b214:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800b218:	4649      	mov	r1, r9
 800b21a:	008b      	lsls	r3, r1, #2
 800b21c:	4641      	mov	r1, r8
 800b21e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b222:	4641      	mov	r1, r8
 800b224:	008a      	lsls	r2, r1, #2
 800b226:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800b22a:	f7f5 fd2d 	bl	8000c88 <__aeabi_uldivmod>
 800b22e:	4602      	mov	r2, r0
 800b230:	460b      	mov	r3, r1
 800b232:	4b39      	ldr	r3, [pc, #228]	; (800b318 <UART_SetConfig+0x4e4>)
 800b234:	fba3 1302 	umull	r1, r3, r3, r2
 800b238:	095b      	lsrs	r3, r3, #5
 800b23a:	2164      	movs	r1, #100	; 0x64
 800b23c:	fb01 f303 	mul.w	r3, r1, r3
 800b240:	1ad3      	subs	r3, r2, r3
 800b242:	011b      	lsls	r3, r3, #4
 800b244:	3332      	adds	r3, #50	; 0x32
 800b246:	4a34      	ldr	r2, [pc, #208]	; (800b318 <UART_SetConfig+0x4e4>)
 800b248:	fba2 2303 	umull	r2, r3, r2, r3
 800b24c:	095b      	lsrs	r3, r3, #5
 800b24e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b252:	441c      	add	r4, r3
 800b254:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b258:	2200      	movs	r2, #0
 800b25a:	673b      	str	r3, [r7, #112]	; 0x70
 800b25c:	677a      	str	r2, [r7, #116]	; 0x74
 800b25e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800b262:	4642      	mov	r2, r8
 800b264:	464b      	mov	r3, r9
 800b266:	1891      	adds	r1, r2, r2
 800b268:	60b9      	str	r1, [r7, #8]
 800b26a:	415b      	adcs	r3, r3
 800b26c:	60fb      	str	r3, [r7, #12]
 800b26e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b272:	4641      	mov	r1, r8
 800b274:	1851      	adds	r1, r2, r1
 800b276:	6039      	str	r1, [r7, #0]
 800b278:	4649      	mov	r1, r9
 800b27a:	414b      	adcs	r3, r1
 800b27c:	607b      	str	r3, [r7, #4]
 800b27e:	f04f 0200 	mov.w	r2, #0
 800b282:	f04f 0300 	mov.w	r3, #0
 800b286:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800b28a:	4659      	mov	r1, fp
 800b28c:	00cb      	lsls	r3, r1, #3
 800b28e:	4651      	mov	r1, sl
 800b290:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b294:	4651      	mov	r1, sl
 800b296:	00ca      	lsls	r2, r1, #3
 800b298:	4610      	mov	r0, r2
 800b29a:	4619      	mov	r1, r3
 800b29c:	4603      	mov	r3, r0
 800b29e:	4642      	mov	r2, r8
 800b2a0:	189b      	adds	r3, r3, r2
 800b2a2:	66bb      	str	r3, [r7, #104]	; 0x68
 800b2a4:	464b      	mov	r3, r9
 800b2a6:	460a      	mov	r2, r1
 800b2a8:	eb42 0303 	adc.w	r3, r2, r3
 800b2ac:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b2ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b2b2:	685b      	ldr	r3, [r3, #4]
 800b2b4:	2200      	movs	r2, #0
 800b2b6:	663b      	str	r3, [r7, #96]	; 0x60
 800b2b8:	667a      	str	r2, [r7, #100]	; 0x64
 800b2ba:	f04f 0200 	mov.w	r2, #0
 800b2be:	f04f 0300 	mov.w	r3, #0
 800b2c2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800b2c6:	4649      	mov	r1, r9
 800b2c8:	008b      	lsls	r3, r1, #2
 800b2ca:	4641      	mov	r1, r8
 800b2cc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b2d0:	4641      	mov	r1, r8
 800b2d2:	008a      	lsls	r2, r1, #2
 800b2d4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800b2d8:	f7f5 fcd6 	bl	8000c88 <__aeabi_uldivmod>
 800b2dc:	4602      	mov	r2, r0
 800b2de:	460b      	mov	r3, r1
 800b2e0:	4b0d      	ldr	r3, [pc, #52]	; (800b318 <UART_SetConfig+0x4e4>)
 800b2e2:	fba3 1302 	umull	r1, r3, r3, r2
 800b2e6:	095b      	lsrs	r3, r3, #5
 800b2e8:	2164      	movs	r1, #100	; 0x64
 800b2ea:	fb01 f303 	mul.w	r3, r1, r3
 800b2ee:	1ad3      	subs	r3, r2, r3
 800b2f0:	011b      	lsls	r3, r3, #4
 800b2f2:	3332      	adds	r3, #50	; 0x32
 800b2f4:	4a08      	ldr	r2, [pc, #32]	; (800b318 <UART_SetConfig+0x4e4>)
 800b2f6:	fba2 2303 	umull	r2, r3, r2, r3
 800b2fa:	095b      	lsrs	r3, r3, #5
 800b2fc:	f003 020f 	and.w	r2, r3, #15
 800b300:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	4422      	add	r2, r4
 800b308:	609a      	str	r2, [r3, #8]
}
 800b30a:	bf00      	nop
 800b30c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800b310:	46bd      	mov	sp, r7
 800b312:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b316:	bf00      	nop
 800b318:	51eb851f 	.word	0x51eb851f

0800b31c <FusionDegreesToRadians>:
/**
 * @brief Converts degrees to radians.
 * @param degrees Degrees.
 * @return Radians.
 */
static inline float FusionDegreesToRadians(const float degrees) {
 800b31c:	b480      	push	{r7}
 800b31e:	b083      	sub	sp, #12
 800b320:	af00      	add	r7, sp, #0
 800b322:	ed87 0a01 	vstr	s0, [r7, #4]
    return degrees * ((float) M_PI / 180.0f);
 800b326:	edd7 7a01 	vldr	s15, [r7, #4]
 800b32a:	ed9f 7a05 	vldr	s14, [pc, #20]	; 800b340 <FusionDegreesToRadians+0x24>
 800b32e:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800b332:	eeb0 0a67 	vmov.f32	s0, s15
 800b336:	370c      	adds	r7, #12
 800b338:	46bd      	mov	sp, r7
 800b33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b33e:	4770      	bx	lr
 800b340:	3c8efa35 	.word	0x3c8efa35

0800b344 <FusionFastInverseSqrt>:
 * @brief Calculates the reciprocal of the square root.
 * See https://pizer.wordpress.com/2008/10/12/fast-inverse-square-root/
 * @param x Operand.
 * @return Reciprocal of the square root of x.
 */
static inline float FusionFastInverseSqrt(const float x) {
 800b344:	b480      	push	{r7}
 800b346:	b085      	sub	sp, #20
 800b348:	af00      	add	r7, sp, #0
 800b34a:	ed87 0a01 	vstr	s0, [r7, #4]
    typedef union {
        float f;
        int32_t i;
    } Union32;

    Union32 union32 = {.f = x};
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	60fb      	str	r3, [r7, #12]
    union32.i = 0x5F1F1412 - (union32.i >> 1);
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	105a      	asrs	r2, r3, #1
 800b356:	4b10      	ldr	r3, [pc, #64]	; (800b398 <FusionFastInverseSqrt+0x54>)
 800b358:	1a9b      	subs	r3, r3, r2
 800b35a:	60fb      	str	r3, [r7, #12]
    return union32.f * (1.69000231f - 0.714158168f * x * union32.f * union32.f);
 800b35c:	ed97 7a03 	vldr	s14, [r7, #12]
 800b360:	edd7 7a01 	vldr	s15, [r7, #4]
 800b364:	eddf 6a0d 	vldr	s13, [pc, #52]	; 800b39c <FusionFastInverseSqrt+0x58>
 800b368:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800b36c:	edd7 7a03 	vldr	s15, [r7, #12]
 800b370:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800b374:	edd7 7a03 	vldr	s15, [r7, #12]
 800b378:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b37c:	eddf 6a08 	vldr	s13, [pc, #32]	; 800b3a0 <FusionFastInverseSqrt+0x5c>
 800b380:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800b384:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 800b388:	eeb0 0a67 	vmov.f32	s0, s15
 800b38c:	3714      	adds	r7, #20
 800b38e:	46bd      	mov	sp, r7
 800b390:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b394:	4770      	bx	lr
 800b396:	bf00      	nop
 800b398:	5f1f1412 	.word	0x5f1f1412
 800b39c:	3f36d312 	.word	0x3f36d312
 800b3a0:	3fd851ff 	.word	0x3fd851ff

0800b3a4 <FusionVectorIsZero>:
/**
 * @brief Returns true if the vector is zero.
 * @param vector Vector.
 * @return True if the vector is zero.
 */
static inline bool FusionVectorIsZero(const FusionVector vector) {
 800b3a4:	b480      	push	{r7}
 800b3a6:	b085      	sub	sp, #20
 800b3a8:	af00      	add	r7, sp, #0
 800b3aa:	eef0 6a40 	vmov.f32	s13, s0
 800b3ae:	eeb0 7a60 	vmov.f32	s14, s1
 800b3b2:	eef0 7a41 	vmov.f32	s15, s2
 800b3b6:	edc7 6a01 	vstr	s13, [r7, #4]
 800b3ba:	ed87 7a02 	vstr	s14, [r7, #8]
 800b3be:	edc7 7a03 	vstr	s15, [r7, #12]
    return (vector.axis.x == 0.0f) && (vector.axis.y == 0.0f) && (vector.axis.z == 0.0f);
 800b3c2:	edd7 7a01 	vldr	s15, [r7, #4]
 800b3c6:	eef5 7a40 	vcmp.f32	s15, #0.0
 800b3ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b3ce:	d10f      	bne.n	800b3f0 <FusionVectorIsZero+0x4c>
 800b3d0:	edd7 7a02 	vldr	s15, [r7, #8]
 800b3d4:	eef5 7a40 	vcmp.f32	s15, #0.0
 800b3d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b3dc:	d108      	bne.n	800b3f0 <FusionVectorIsZero+0x4c>
 800b3de:	edd7 7a03 	vldr	s15, [r7, #12]
 800b3e2:	eef5 7a40 	vcmp.f32	s15, #0.0
 800b3e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b3ea:	d101      	bne.n	800b3f0 <FusionVectorIsZero+0x4c>
 800b3ec:	2301      	movs	r3, #1
 800b3ee:	e000      	b.n	800b3f2 <FusionVectorIsZero+0x4e>
 800b3f0:	2300      	movs	r3, #0
 800b3f2:	f003 0301 	and.w	r3, r3, #1
 800b3f6:	b2db      	uxtb	r3, r3
}
 800b3f8:	4618      	mov	r0, r3
 800b3fa:	3714      	adds	r7, #20
 800b3fc:	46bd      	mov	sp, r7
 800b3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b402:	4770      	bx	lr

0800b404 <FusionVectorAdd>:
 * @brief Returns the sum of two vectors.
 * @param vectorA Vector A.
 * @param vectorB Vector B.
 * @return Sum of two vectors.
 */
static inline FusionVector FusionVectorAdd(const FusionVector vectorA, const FusionVector vectorB) {
 800b404:	b480      	push	{r7}
 800b406:	b091      	sub	sp, #68	; 0x44
 800b408:	af00      	add	r7, sp, #0
 800b40a:	eeb0 5a40 	vmov.f32	s10, s0
 800b40e:	eef0 5a60 	vmov.f32	s11, s1
 800b412:	eeb0 6a41 	vmov.f32	s12, s2
 800b416:	eef0 6a61 	vmov.f32	s13, s3
 800b41a:	eeb0 7a42 	vmov.f32	s14, s4
 800b41e:	eef0 7a62 	vmov.f32	s15, s5
 800b422:	ed87 5a07 	vstr	s10, [r7, #28]
 800b426:	edc7 5a08 	vstr	s11, [r7, #32]
 800b42a:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 800b42e:	edc7 6a04 	vstr	s13, [r7, #16]
 800b432:	ed87 7a05 	vstr	s14, [r7, #20]
 800b436:	edc7 7a06 	vstr	s15, [r7, #24]
    const FusionVector result = {.axis = {
            .x = vectorA.axis.x + vectorB.axis.x,
 800b43a:	ed97 7a07 	vldr	s14, [r7, #28]
 800b43e:	edd7 7a04 	vldr	s15, [r7, #16]
 800b442:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800b446:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = vectorA.axis.y + vectorB.axis.y,
 800b44a:	ed97 7a08 	vldr	s14, [r7, #32]
 800b44e:	edd7 7a05 	vldr	s15, [r7, #20]
 800b452:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800b456:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = vectorA.axis.z + vectorB.axis.z,
 800b45a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800b45e:	edd7 7a06 	vldr	s15, [r7, #24]
 800b462:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800b466:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    }};
    return result;
 800b46a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800b46e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800b472:	ca07      	ldmia	r2, {r0, r1, r2}
 800b474:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800b478:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b47a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b47c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b47e:	ee06 1a90 	vmov	s13, r1
 800b482:	ee07 2a10 	vmov	s14, r2
 800b486:	ee07 3a90 	vmov	s15, r3
}
 800b48a:	eeb0 0a66 	vmov.f32	s0, s13
 800b48e:	eef0 0a47 	vmov.f32	s1, s14
 800b492:	eeb0 1a67 	vmov.f32	s2, s15
 800b496:	3744      	adds	r7, #68	; 0x44
 800b498:	46bd      	mov	sp, r7
 800b49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b49e:	4770      	bx	lr

0800b4a0 <FusionVectorSum>:
/**
 * @brief Returns the sum of the elements.
 * @param vector Vector.
 * @return Sum of the elements.
 */
static inline float FusionVectorSum(const FusionVector vector) {
 800b4a0:	b480      	push	{r7}
 800b4a2:	b085      	sub	sp, #20
 800b4a4:	af00      	add	r7, sp, #0
 800b4a6:	eef0 6a40 	vmov.f32	s13, s0
 800b4aa:	eeb0 7a60 	vmov.f32	s14, s1
 800b4ae:	eef0 7a41 	vmov.f32	s15, s2
 800b4b2:	edc7 6a01 	vstr	s13, [r7, #4]
 800b4b6:	ed87 7a02 	vstr	s14, [r7, #8]
 800b4ba:	edc7 7a03 	vstr	s15, [r7, #12]
    return vector.axis.x + vector.axis.y + vector.axis.z;
 800b4be:	ed97 7a01 	vldr	s14, [r7, #4]
 800b4c2:	edd7 7a02 	vldr	s15, [r7, #8]
 800b4c6:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b4ca:	edd7 7a03 	vldr	s15, [r7, #12]
 800b4ce:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 800b4d2:	eeb0 0a67 	vmov.f32	s0, s15
 800b4d6:	3714      	adds	r7, #20
 800b4d8:	46bd      	mov	sp, r7
 800b4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4de:	4770      	bx	lr

0800b4e0 <FusionVectorMultiplyScalar>:
 * @brief Returns the multiplication of a vector by a scalar.
 * @param vector Vector.
 * @param scalar Scalar.
 * @return Multiplication of a vector by a scalar.
 */
static inline FusionVector FusionVectorMultiplyScalar(const FusionVector vector, const float scalar) {
 800b4e0:	b480      	push	{r7}
 800b4e2:	b08f      	sub	sp, #60	; 0x3c
 800b4e4:	af00      	add	r7, sp, #0
 800b4e6:	eef0 6a40 	vmov.f32	s13, s0
 800b4ea:	eeb0 7a60 	vmov.f32	s14, s1
 800b4ee:	eef0 7a41 	vmov.f32	s15, s2
 800b4f2:	edc7 1a04 	vstr	s3, [r7, #16]
 800b4f6:	edc7 6a05 	vstr	s13, [r7, #20]
 800b4fa:	ed87 7a06 	vstr	s14, [r7, #24]
 800b4fe:	edc7 7a07 	vstr	s15, [r7, #28]
    const FusionVector result = {.axis = {
            .x = vector.axis.x * scalar,
 800b502:	ed97 7a05 	vldr	s14, [r7, #20]
 800b506:	edd7 7a04 	vldr	s15, [r7, #16]
 800b50a:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800b50e:	edc7 7a08 	vstr	s15, [r7, #32]
            .y = vector.axis.y * scalar,
 800b512:	ed97 7a06 	vldr	s14, [r7, #24]
 800b516:	edd7 7a04 	vldr	s15, [r7, #16]
 800b51a:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800b51e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            .z = vector.axis.z * scalar,
 800b522:	ed97 7a07 	vldr	s14, [r7, #28]
 800b526:	edd7 7a04 	vldr	s15, [r7, #16]
 800b52a:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800b52e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    }};
    return result;
 800b532:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b536:	f107 0220 	add.w	r2, r7, #32
 800b53a:	ca07      	ldmia	r2, {r0, r1, r2}
 800b53c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800b540:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b542:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b544:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b546:	ee06 1a90 	vmov	s13, r1
 800b54a:	ee07 2a10 	vmov	s14, r2
 800b54e:	ee07 3a90 	vmov	s15, r3
}
 800b552:	eeb0 0a66 	vmov.f32	s0, s13
 800b556:	eef0 0a47 	vmov.f32	s1, s14
 800b55a:	eeb0 1a67 	vmov.f32	s2, s15
 800b55e:	373c      	adds	r7, #60	; 0x3c
 800b560:	46bd      	mov	sp, r7
 800b562:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b566:	4770      	bx	lr

0800b568 <FusionVectorHadamardProduct>:
 * @brief Calculates the Hadamard product (element-wise multiplication).
 * @param vectorA Vector A.
 * @param vectorB Vector B.
 * @return Hadamard product.
 */
static inline FusionVector FusionVectorHadamardProduct(const FusionVector vectorA, const FusionVector vectorB) {
 800b568:	b480      	push	{r7}
 800b56a:	b091      	sub	sp, #68	; 0x44
 800b56c:	af00      	add	r7, sp, #0
 800b56e:	eeb0 5a40 	vmov.f32	s10, s0
 800b572:	eef0 5a60 	vmov.f32	s11, s1
 800b576:	eeb0 6a41 	vmov.f32	s12, s2
 800b57a:	eef0 6a61 	vmov.f32	s13, s3
 800b57e:	eeb0 7a42 	vmov.f32	s14, s4
 800b582:	eef0 7a62 	vmov.f32	s15, s5
 800b586:	ed87 5a07 	vstr	s10, [r7, #28]
 800b58a:	edc7 5a08 	vstr	s11, [r7, #32]
 800b58e:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 800b592:	edc7 6a04 	vstr	s13, [r7, #16]
 800b596:	ed87 7a05 	vstr	s14, [r7, #20]
 800b59a:	edc7 7a06 	vstr	s15, [r7, #24]
    const FusionVector result = {.axis = {
            .x = vectorA.axis.x * vectorB.axis.x,
 800b59e:	ed97 7a07 	vldr	s14, [r7, #28]
 800b5a2:	edd7 7a04 	vldr	s15, [r7, #16]
 800b5a6:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800b5aa:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = vectorA.axis.y * vectorB.axis.y,
 800b5ae:	ed97 7a08 	vldr	s14, [r7, #32]
 800b5b2:	edd7 7a05 	vldr	s15, [r7, #20]
 800b5b6:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800b5ba:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = vectorA.axis.z * vectorB.axis.z,
 800b5be:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800b5c2:	edd7 7a06 	vldr	s15, [r7, #24]
 800b5c6:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800b5ca:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    }};
    return result;
 800b5ce:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800b5d2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800b5d6:	ca07      	ldmia	r2, {r0, r1, r2}
 800b5d8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800b5dc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b5de:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b5e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b5e2:	ee06 1a90 	vmov	s13, r1
 800b5e6:	ee07 2a10 	vmov	s14, r2
 800b5ea:	ee07 3a90 	vmov	s15, r3
}
 800b5ee:	eeb0 0a66 	vmov.f32	s0, s13
 800b5f2:	eef0 0a47 	vmov.f32	s1, s14
 800b5f6:	eeb0 1a67 	vmov.f32	s2, s15
 800b5fa:	3744      	adds	r7, #68	; 0x44
 800b5fc:	46bd      	mov	sp, r7
 800b5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b602:	4770      	bx	lr

0800b604 <FusionVectorCrossProduct>:
 * @brief Returns the cross product.
 * @param vectorA Vector A.
 * @param vectorB Vector B.
 * @return Cross product.
 */
static inline FusionVector FusionVectorCrossProduct(const FusionVector vectorA, const FusionVector vectorB) {
 800b604:	b480      	push	{r7}
 800b606:	b091      	sub	sp, #68	; 0x44
 800b608:	af00      	add	r7, sp, #0
 800b60a:	eeb0 5a40 	vmov.f32	s10, s0
 800b60e:	eef0 5a60 	vmov.f32	s11, s1
 800b612:	eeb0 6a41 	vmov.f32	s12, s2
 800b616:	eef0 6a61 	vmov.f32	s13, s3
 800b61a:	eeb0 7a42 	vmov.f32	s14, s4
 800b61e:	eef0 7a62 	vmov.f32	s15, s5
 800b622:	ed87 5a07 	vstr	s10, [r7, #28]
 800b626:	edc7 5a08 	vstr	s11, [r7, #32]
 800b62a:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 800b62e:	edc7 6a04 	vstr	s13, [r7, #16]
 800b632:	ed87 7a05 	vstr	s14, [r7, #20]
 800b636:	edc7 7a06 	vstr	s15, [r7, #24]
#define A vectorA.axis
#define B vectorB.axis
    const FusionVector result = {.axis = {
            .x = A.y * B.z - A.z * B.y,
 800b63a:	ed97 7a08 	vldr	s14, [r7, #32]
 800b63e:	edd7 7a06 	vldr	s15, [r7, #24]
 800b642:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b646:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800b64a:	edd7 7a05 	vldr	s15, [r7, #20]
 800b64e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b652:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800b656:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = A.z * B.x - A.x * B.z,
 800b65a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800b65e:	edd7 7a04 	vldr	s15, [r7, #16]
 800b662:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b666:	edd7 6a07 	vldr	s13, [r7, #28]
 800b66a:	edd7 7a06 	vldr	s15, [r7, #24]
 800b66e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b672:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800b676:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = A.x * B.y - A.y * B.x,
 800b67a:	ed97 7a07 	vldr	s14, [r7, #28]
 800b67e:	edd7 7a05 	vldr	s15, [r7, #20]
 800b682:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b686:	edd7 6a08 	vldr	s13, [r7, #32]
 800b68a:	edd7 7a04 	vldr	s15, [r7, #16]
 800b68e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b692:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800b696:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    }};
    return result;
 800b69a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800b69e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800b6a2:	ca07      	ldmia	r2, {r0, r1, r2}
 800b6a4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800b6a8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b6aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b6ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b6ae:	ee06 1a90 	vmov	s13, r1
 800b6b2:	ee07 2a10 	vmov	s14, r2
 800b6b6:	ee07 3a90 	vmov	s15, r3
#undef A
#undef B
}
 800b6ba:	eeb0 0a66 	vmov.f32	s0, s13
 800b6be:	eef0 0a47 	vmov.f32	s1, s14
 800b6c2:	eeb0 1a67 	vmov.f32	s2, s15
 800b6c6:	3744      	adds	r7, #68	; 0x44
 800b6c8:	46bd      	mov	sp, r7
 800b6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ce:	4770      	bx	lr

0800b6d0 <FusionVectorDotProduct>:
 * @brief Returns the dot product.
 * @param vectorA Vector A.
 * @param vectorB Vector B.
 * @return Dot product.
 */
static inline float FusionVectorDotProduct(const FusionVector vectorA, const FusionVector vectorB) {
 800b6d0:	b580      	push	{r7, lr}
 800b6d2:	b08a      	sub	sp, #40	; 0x28
 800b6d4:	af00      	add	r7, sp, #0
 800b6d6:	eeb0 5a40 	vmov.f32	s10, s0
 800b6da:	eef0 5a60 	vmov.f32	s11, s1
 800b6de:	eeb0 6a41 	vmov.f32	s12, s2
 800b6e2:	eef0 6a61 	vmov.f32	s13, s3
 800b6e6:	eeb0 7a42 	vmov.f32	s14, s4
 800b6ea:	eef0 7a62 	vmov.f32	s15, s5
 800b6ee:	ed87 5a03 	vstr	s10, [r7, #12]
 800b6f2:	edc7 5a04 	vstr	s11, [r7, #16]
 800b6f6:	ed87 6a05 	vstr	s12, [r7, #20]
 800b6fa:	edc7 6a00 	vstr	s13, [r7]
 800b6fe:	ed87 7a01 	vstr	s14, [r7, #4]
 800b702:	edc7 7a02 	vstr	s15, [r7, #8]
    return FusionVectorSum(FusionVectorHadamardProduct(vectorA, vectorB));
 800b706:	ed97 5a00 	vldr	s10, [r7]
 800b70a:	edd7 5a01 	vldr	s11, [r7, #4]
 800b70e:	ed97 6a02 	vldr	s12, [r7, #8]
 800b712:	edd7 6a03 	vldr	s13, [r7, #12]
 800b716:	ed97 7a04 	vldr	s14, [r7, #16]
 800b71a:	edd7 7a05 	vldr	s15, [r7, #20]
 800b71e:	eef0 1a45 	vmov.f32	s3, s10
 800b722:	eeb0 2a65 	vmov.f32	s4, s11
 800b726:	eef0 2a46 	vmov.f32	s5, s12
 800b72a:	eeb0 0a66 	vmov.f32	s0, s13
 800b72e:	eef0 0a47 	vmov.f32	s1, s14
 800b732:	eeb0 1a67 	vmov.f32	s2, s15
 800b736:	f7ff ff17 	bl	800b568 <FusionVectorHadamardProduct>
 800b73a:	eef0 6a40 	vmov.f32	s13, s0
 800b73e:	eeb0 7a60 	vmov.f32	s14, s1
 800b742:	eef0 7a41 	vmov.f32	s15, s2
 800b746:	edc7 6a07 	vstr	s13, [r7, #28]
 800b74a:	ed87 7a08 	vstr	s14, [r7, #32]
 800b74e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 800b752:	edd7 6a07 	vldr	s13, [r7, #28]
 800b756:	ed97 7a08 	vldr	s14, [r7, #32]
 800b75a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800b75e:	eeb0 0a66 	vmov.f32	s0, s13
 800b762:	eef0 0a47 	vmov.f32	s1, s14
 800b766:	eeb0 1a67 	vmov.f32	s2, s15
 800b76a:	f7ff fe99 	bl	800b4a0 <FusionVectorSum>
 800b76e:	eef0 7a40 	vmov.f32	s15, s0
}
 800b772:	eeb0 0a67 	vmov.f32	s0, s15
 800b776:	3728      	adds	r7, #40	; 0x28
 800b778:	46bd      	mov	sp, r7
 800b77a:	bd80      	pop	{r7, pc}

0800b77c <FusionVectorMagnitudeSquared>:
/**
 * @brief Returns the vector magnitude squared.
 * @param vector Vector.
 * @return Vector magnitude squared.
 */
static inline float FusionVectorMagnitudeSquared(const FusionVector vector) {
 800b77c:	b580      	push	{r7, lr}
 800b77e:	b088      	sub	sp, #32
 800b780:	af00      	add	r7, sp, #0
 800b782:	eef0 6a40 	vmov.f32	s13, s0
 800b786:	eeb0 7a60 	vmov.f32	s14, s1
 800b78a:	eef0 7a41 	vmov.f32	s15, s2
 800b78e:	edc7 6a01 	vstr	s13, [r7, #4]
 800b792:	ed87 7a02 	vstr	s14, [r7, #8]
 800b796:	edc7 7a03 	vstr	s15, [r7, #12]
    return FusionVectorSum(FusionVectorHadamardProduct(vector, vector));
 800b79a:	ed97 5a01 	vldr	s10, [r7, #4]
 800b79e:	edd7 5a02 	vldr	s11, [r7, #8]
 800b7a2:	ed97 6a03 	vldr	s12, [r7, #12]
 800b7a6:	edd7 6a01 	vldr	s13, [r7, #4]
 800b7aa:	ed97 7a02 	vldr	s14, [r7, #8]
 800b7ae:	edd7 7a03 	vldr	s15, [r7, #12]
 800b7b2:	eef0 1a45 	vmov.f32	s3, s10
 800b7b6:	eeb0 2a65 	vmov.f32	s4, s11
 800b7ba:	eef0 2a46 	vmov.f32	s5, s12
 800b7be:	eeb0 0a66 	vmov.f32	s0, s13
 800b7c2:	eef0 0a47 	vmov.f32	s1, s14
 800b7c6:	eeb0 1a67 	vmov.f32	s2, s15
 800b7ca:	f7ff fecd 	bl	800b568 <FusionVectorHadamardProduct>
 800b7ce:	eef0 6a40 	vmov.f32	s13, s0
 800b7d2:	eeb0 7a60 	vmov.f32	s14, s1
 800b7d6:	eef0 7a41 	vmov.f32	s15, s2
 800b7da:	edc7 6a05 	vstr	s13, [r7, #20]
 800b7de:	ed87 7a06 	vstr	s14, [r7, #24]
 800b7e2:	edc7 7a07 	vstr	s15, [r7, #28]
 800b7e6:	edd7 6a05 	vldr	s13, [r7, #20]
 800b7ea:	ed97 7a06 	vldr	s14, [r7, #24]
 800b7ee:	edd7 7a07 	vldr	s15, [r7, #28]
 800b7f2:	eeb0 0a66 	vmov.f32	s0, s13
 800b7f6:	eef0 0a47 	vmov.f32	s1, s14
 800b7fa:	eeb0 1a67 	vmov.f32	s2, s15
 800b7fe:	f7ff fe4f 	bl	800b4a0 <FusionVectorSum>
 800b802:	eef0 7a40 	vmov.f32	s15, s0
}
 800b806:	eeb0 0a67 	vmov.f32	s0, s15
 800b80a:	3720      	adds	r7, #32
 800b80c:	46bd      	mov	sp, r7
 800b80e:	bd80      	pop	{r7, pc}

0800b810 <FusionVectorNormalise>:
/**
 * @brief Returns the normalised vector.
 * @param vector Vector.
 * @return Normalised vector.
 */
static inline FusionVector FusionVectorNormalise(const FusionVector vector) {
 800b810:	b580      	push	{r7, lr}
 800b812:	b08c      	sub	sp, #48	; 0x30
 800b814:	af00      	add	r7, sp, #0
 800b816:	eef0 6a40 	vmov.f32	s13, s0
 800b81a:	eeb0 7a60 	vmov.f32	s14, s1
 800b81e:	eef0 7a41 	vmov.f32	s15, s2
 800b822:	edc7 6a05 	vstr	s13, [r7, #20]
 800b826:	ed87 7a06 	vstr	s14, [r7, #24]
 800b82a:	edc7 7a07 	vstr	s15, [r7, #28]
#ifdef FUSION_USE_NORMAL_SQRT
    const float magnitudeReciprocal = 1.0f / sqrtf(FusionVectorMagnitudeSquared(vector));
#else
    const float magnitudeReciprocal = FusionFastInverseSqrt(FusionVectorMagnitudeSquared(vector));
 800b82e:	edd7 6a05 	vldr	s13, [r7, #20]
 800b832:	ed97 7a06 	vldr	s14, [r7, #24]
 800b836:	edd7 7a07 	vldr	s15, [r7, #28]
 800b83a:	eeb0 0a66 	vmov.f32	s0, s13
 800b83e:	eef0 0a47 	vmov.f32	s1, s14
 800b842:	eeb0 1a67 	vmov.f32	s2, s15
 800b846:	f7ff ff99 	bl	800b77c <FusionVectorMagnitudeSquared>
 800b84a:	eef0 7a40 	vmov.f32	s15, s0
 800b84e:	eeb0 0a67 	vmov.f32	s0, s15
 800b852:	f7ff fd77 	bl	800b344 <FusionFastInverseSqrt>
 800b856:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
#endif
    return FusionVectorMultiplyScalar(vector, magnitudeReciprocal);
 800b85a:	edd7 6a05 	vldr	s13, [r7, #20]
 800b85e:	ed97 7a06 	vldr	s14, [r7, #24]
 800b862:	edd7 7a07 	vldr	s15, [r7, #28]
 800b866:	edd7 1a0b 	vldr	s3, [r7, #44]	; 0x2c
 800b86a:	eeb0 0a66 	vmov.f32	s0, s13
 800b86e:	eef0 0a47 	vmov.f32	s1, s14
 800b872:	eeb0 1a67 	vmov.f32	s2, s15
 800b876:	f7ff fe33 	bl	800b4e0 <FusionVectorMultiplyScalar>
 800b87a:	eef0 6a40 	vmov.f32	s13, s0
 800b87e:	eeb0 7a60 	vmov.f32	s14, s1
 800b882:	eef0 7a41 	vmov.f32	s15, s2
 800b886:	edc7 6a08 	vstr	s13, [r7, #32]
 800b88a:	ed87 7a09 	vstr	s14, [r7, #36]	; 0x24
 800b88e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 800b892:	6a39      	ldr	r1, [r7, #32]
 800b894:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b898:	ee06 1a90 	vmov	s13, r1
 800b89c:	ee07 2a10 	vmov	s14, r2
 800b8a0:	ee07 3a90 	vmov	s15, r3
}
 800b8a4:	eeb0 0a66 	vmov.f32	s0, s13
 800b8a8:	eef0 0a47 	vmov.f32	s1, s14
 800b8ac:	eeb0 1a67 	vmov.f32	s2, s15
 800b8b0:	3730      	adds	r7, #48	; 0x30
 800b8b2:	46bd      	mov	sp, r7
 800b8b4:	bd80      	pop	{r7, pc}

0800b8b6 <FusionQuaternionAdd>:
 * @brief Returns the sum of two quaternions.
 * @param quaternionA Quaternion A.
 * @param quaternionB Quaternion B.
 * @return Sum of two quaternions.
 */
static inline FusionQuaternion FusionQuaternionAdd(const FusionQuaternion quaternionA, const FusionQuaternion quaternionB) {
 800b8b6:	b490      	push	{r4, r7}
 800b8b8:	b094      	sub	sp, #80	; 0x50
 800b8ba:	af00      	add	r7, sp, #0
 800b8bc:	eeb0 4a40 	vmov.f32	s8, s0
 800b8c0:	eef0 4a60 	vmov.f32	s9, s1
 800b8c4:	eeb0 5a41 	vmov.f32	s10, s2
 800b8c8:	eef0 5a61 	vmov.f32	s11, s3
 800b8cc:	eeb0 6a42 	vmov.f32	s12, s4
 800b8d0:	eef0 6a62 	vmov.f32	s13, s5
 800b8d4:	eeb0 7a43 	vmov.f32	s14, s6
 800b8d8:	eef0 7a63 	vmov.f32	s15, s7
 800b8dc:	ed87 4a08 	vstr	s8, [r7, #32]
 800b8e0:	edc7 4a09 	vstr	s9, [r7, #36]	; 0x24
 800b8e4:	ed87 5a0a 	vstr	s10, [r7, #40]	; 0x28
 800b8e8:	edc7 5a0b 	vstr	s11, [r7, #44]	; 0x2c
 800b8ec:	ed87 6a04 	vstr	s12, [r7, #16]
 800b8f0:	edc7 6a05 	vstr	s13, [r7, #20]
 800b8f4:	ed87 7a06 	vstr	s14, [r7, #24]
 800b8f8:	edc7 7a07 	vstr	s15, [r7, #28]
    const FusionQuaternion result = {.element = {
            .w = quaternionA.element.w + quaternionB.element.w,
 800b8fc:	ed97 7a08 	vldr	s14, [r7, #32]
 800b900:	edd7 7a04 	vldr	s15, [r7, #16]
 800b904:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 800b908:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
            .x = quaternionA.element.x + quaternionB.element.x,
 800b90c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800b910:	edd7 7a05 	vldr	s15, [r7, #20]
 800b914:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 800b918:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
            .y = quaternionA.element.y + quaternionB.element.y,
 800b91c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b920:	edd7 7a06 	vldr	s15, [r7, #24]
 800b924:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 800b928:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
            .z = quaternionA.element.z + quaternionB.element.z,
 800b92c:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800b930:	edd7 7a07 	vldr	s15, [r7, #28]
 800b934:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 800b938:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    }};
    return result;
 800b93c:	f107 0440 	add.w	r4, r7, #64	; 0x40
 800b940:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b944:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b946:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800b94a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800b94c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b94e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b950:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b952:	ee06 0a10 	vmov	s12, r0
 800b956:	ee06 1a90 	vmov	s13, r1
 800b95a:	ee07 2a10 	vmov	s14, r2
 800b95e:	ee07 3a90 	vmov	s15, r3
}
 800b962:	eeb0 0a46 	vmov.f32	s0, s12
 800b966:	eef0 0a66 	vmov.f32	s1, s13
 800b96a:	eeb0 1a47 	vmov.f32	s2, s14
 800b96e:	eef0 1a67 	vmov.f32	s3, s15
 800b972:	3750      	adds	r7, #80	; 0x50
 800b974:	46bd      	mov	sp, r7
 800b976:	bc90      	pop	{r4, r7}
 800b978:	4770      	bx	lr

0800b97a <FusionQuaternionMultiply>:
 * @brief Returns the multiplication of two quaternions.
 * @param quaternionA Quaternion A (to be post-multiplied).
 * @param quaternionB Quaternion B (to be pre-multiplied).
 * @return Multiplication of two quaternions.
 */
static inline FusionQuaternion FusionQuaternionMultiply(const FusionQuaternion quaternionA, const FusionQuaternion quaternionB) {
 800b97a:	b490      	push	{r4, r7}
 800b97c:	b094      	sub	sp, #80	; 0x50
 800b97e:	af00      	add	r7, sp, #0
 800b980:	eeb0 4a40 	vmov.f32	s8, s0
 800b984:	eef0 4a60 	vmov.f32	s9, s1
 800b988:	eeb0 5a41 	vmov.f32	s10, s2
 800b98c:	eef0 5a61 	vmov.f32	s11, s3
 800b990:	eeb0 6a42 	vmov.f32	s12, s4
 800b994:	eef0 6a62 	vmov.f32	s13, s5
 800b998:	eeb0 7a43 	vmov.f32	s14, s6
 800b99c:	eef0 7a63 	vmov.f32	s15, s7
 800b9a0:	ed87 4a08 	vstr	s8, [r7, #32]
 800b9a4:	edc7 4a09 	vstr	s9, [r7, #36]	; 0x24
 800b9a8:	ed87 5a0a 	vstr	s10, [r7, #40]	; 0x28
 800b9ac:	edc7 5a0b 	vstr	s11, [r7, #44]	; 0x2c
 800b9b0:	ed87 6a04 	vstr	s12, [r7, #16]
 800b9b4:	edc7 6a05 	vstr	s13, [r7, #20]
 800b9b8:	ed87 7a06 	vstr	s14, [r7, #24]
 800b9bc:	edc7 7a07 	vstr	s15, [r7, #28]
#define A quaternionA.element
#define B quaternionB.element
    const FusionQuaternion result = {.element = {
            .w = A.w * B.w - A.x * B.x - A.y * B.y - A.z * B.z,
 800b9c0:	ed97 7a08 	vldr	s14, [r7, #32]
 800b9c4:	edd7 7a04 	vldr	s15, [r7, #16]
 800b9c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b9cc:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800b9d0:	edd7 7a05 	vldr	s15, [r7, #20]
 800b9d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b9d8:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b9dc:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800b9e0:	edd7 7a06 	vldr	s15, [r7, #24]
 800b9e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b9e8:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b9ec:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800b9f0:	edd7 7a07 	vldr	s15, [r7, #28]
 800b9f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b9f8:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 800b9fc:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
            .x = A.w * B.x + A.x * B.w + A.y * B.z - A.z * B.y,
 800ba00:	ed97 7a08 	vldr	s14, [r7, #32]
 800ba04:	edd7 7a05 	vldr	s15, [r7, #20]
 800ba08:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ba0c:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800ba10:	edd7 7a04 	vldr	s15, [r7, #16]
 800ba14:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ba18:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ba1c:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800ba20:	edd7 7a07 	vldr	s15, [r7, #28]
 800ba24:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ba28:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ba2c:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800ba30:	edd7 7a06 	vldr	s15, [r7, #24]
 800ba34:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ba38:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 800ba3c:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
            .y = A.w * B.y - A.x * B.z + A.y * B.w + A.z * B.x,
 800ba40:	ed97 7a08 	vldr	s14, [r7, #32]
 800ba44:	edd7 7a06 	vldr	s15, [r7, #24]
 800ba48:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ba4c:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800ba50:	edd7 7a07 	vldr	s15, [r7, #28]
 800ba54:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ba58:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ba5c:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800ba60:	edd7 7a04 	vldr	s15, [r7, #16]
 800ba64:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ba68:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ba6c:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800ba70:	edd7 7a05 	vldr	s15, [r7, #20]
 800ba74:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ba78:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 800ba7c:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
            .z = A.w * B.z + A.x * B.y - A.y * B.x + A.z * B.w,
 800ba80:	ed97 7a08 	vldr	s14, [r7, #32]
 800ba84:	edd7 7a07 	vldr	s15, [r7, #28]
 800ba88:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ba8c:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800ba90:	edd7 7a06 	vldr	s15, [r7, #24]
 800ba94:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ba98:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ba9c:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800baa0:	edd7 7a05 	vldr	s15, [r7, #20]
 800baa4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800baa8:	ee37 7a67 	vsub.f32	s14, s14, s15
 800baac:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800bab0:	edd7 7a04 	vldr	s15, [r7, #16]
 800bab4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800bab8:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 800babc:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    }};
    return result;
 800bac0:	f107 0440 	add.w	r4, r7, #64	; 0x40
 800bac4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800bac8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800baca:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800bace:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800bad0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bad2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bad4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bad6:	ee06 0a10 	vmov	s12, r0
 800bada:	ee06 1a90 	vmov	s13, r1
 800bade:	ee07 2a10 	vmov	s14, r2
 800bae2:	ee07 3a90 	vmov	s15, r3
#undef A
#undef B
}
 800bae6:	eeb0 0a46 	vmov.f32	s0, s12
 800baea:	eef0 0a66 	vmov.f32	s1, s13
 800baee:	eeb0 1a47 	vmov.f32	s2, s14
 800baf2:	eef0 1a67 	vmov.f32	s3, s15
 800baf6:	3750      	adds	r7, #80	; 0x50
 800baf8:	46bd      	mov	sp, r7
 800bafa:	bc90      	pop	{r4, r7}
 800bafc:	4770      	bx	lr

0800bafe <FusionQuaternionMultiplyVector>:
 * multiplied by the vector.
 * @param quaternion Quaternion.
 * @param vector Vector.
 * @return Multiplication of a quaternion with a vector.
 */
static inline FusionQuaternion FusionQuaternionMultiplyVector(const FusionQuaternion quaternion, const FusionVector vector) {
 800bafe:	b490      	push	{r4, r7}
 800bb00:	b094      	sub	sp, #80	; 0x50
 800bb02:	af00      	add	r7, sp, #0
 800bb04:	eef0 4a40 	vmov.f32	s9, s0
 800bb08:	eeb0 5a60 	vmov.f32	s10, s1
 800bb0c:	eef0 5a41 	vmov.f32	s11, s2
 800bb10:	eeb0 6a61 	vmov.f32	s12, s3
 800bb14:	eef0 6a42 	vmov.f32	s13, s4
 800bb18:	eeb0 7a62 	vmov.f32	s14, s5
 800bb1c:	eef0 7a43 	vmov.f32	s15, s6
 800bb20:	edc7 4a08 	vstr	s9, [r7, #32]
 800bb24:	ed87 5a09 	vstr	s10, [r7, #36]	; 0x24
 800bb28:	edc7 5a0a 	vstr	s11, [r7, #40]	; 0x28
 800bb2c:	ed87 6a0b 	vstr	s12, [r7, #44]	; 0x2c
 800bb30:	edc7 6a05 	vstr	s13, [r7, #20]
 800bb34:	ed87 7a06 	vstr	s14, [r7, #24]
 800bb38:	edc7 7a07 	vstr	s15, [r7, #28]
#define Q quaternion.element
#define V vector.axis
    const FusionQuaternion result = {.element = {
            .w = -Q.x * V.x - Q.y * V.y - Q.z * V.z,
 800bb3c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800bb40:	eeb1 7a67 	vneg.f32	s14, s15
 800bb44:	edd7 7a05 	vldr	s15, [r7, #20]
 800bb48:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bb4c:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800bb50:	edd7 7a06 	vldr	s15, [r7, #24]
 800bb54:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800bb58:	ee37 7a67 	vsub.f32	s14, s14, s15
 800bb5c:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800bb60:	edd7 7a07 	vldr	s15, [r7, #28]
 800bb64:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800bb68:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 800bb6c:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
            .x = Q.w * V.x + Q.y * V.z - Q.z * V.y,
 800bb70:	ed97 7a08 	vldr	s14, [r7, #32]
 800bb74:	edd7 7a05 	vldr	s15, [r7, #20]
 800bb78:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bb7c:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800bb80:	edd7 7a07 	vldr	s15, [r7, #28]
 800bb84:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800bb88:	ee37 7a27 	vadd.f32	s14, s14, s15
 800bb8c:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800bb90:	edd7 7a06 	vldr	s15, [r7, #24]
 800bb94:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800bb98:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 800bb9c:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
            .y = Q.w * V.y - Q.x * V.z + Q.z * V.x,
 800bba0:	ed97 7a08 	vldr	s14, [r7, #32]
 800bba4:	edd7 7a06 	vldr	s15, [r7, #24]
 800bba8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bbac:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800bbb0:	edd7 7a07 	vldr	s15, [r7, #28]
 800bbb4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800bbb8:	ee37 7a67 	vsub.f32	s14, s14, s15
 800bbbc:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800bbc0:	edd7 7a05 	vldr	s15, [r7, #20]
 800bbc4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800bbc8:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 800bbcc:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
            .z = Q.w * V.z + Q.x * V.y - Q.y * V.x,
 800bbd0:	ed97 7a08 	vldr	s14, [r7, #32]
 800bbd4:	edd7 7a07 	vldr	s15, [r7, #28]
 800bbd8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bbdc:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800bbe0:	edd7 7a06 	vldr	s15, [r7, #24]
 800bbe4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800bbe8:	ee37 7a27 	vadd.f32	s14, s14, s15
 800bbec:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800bbf0:	edd7 7a05 	vldr	s15, [r7, #20]
 800bbf4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800bbf8:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 800bbfc:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    }};
    return result;
 800bc00:	f107 0440 	add.w	r4, r7, #64	; 0x40
 800bc04:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800bc08:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800bc0a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800bc0e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800bc10:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bc12:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bc14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc16:	ee06 0a10 	vmov	s12, r0
 800bc1a:	ee06 1a90 	vmov	s13, r1
 800bc1e:	ee07 2a10 	vmov	s14, r2
 800bc22:	ee07 3a90 	vmov	s15, r3
#undef Q
#undef V
}
 800bc26:	eeb0 0a46 	vmov.f32	s0, s12
 800bc2a:	eef0 0a66 	vmov.f32	s1, s13
 800bc2e:	eeb0 1a47 	vmov.f32	s2, s14
 800bc32:	eef0 1a67 	vmov.f32	s3, s15
 800bc36:	3750      	adds	r7, #80	; 0x50
 800bc38:	46bd      	mov	sp, r7
 800bc3a:	bc90      	pop	{r4, r7}
 800bc3c:	4770      	bx	lr

0800bc3e <FusionQuaternionNormalise>:
/**
 * @brief Returns the normalised quaternion.
 * @param quaternion Quaternion.
 * @return Normalised quaternion.
 */
static inline FusionQuaternion FusionQuaternionNormalise(const FusionQuaternion quaternion) {
 800bc3e:	b590      	push	{r4, r7, lr}
 800bc40:	b093      	sub	sp, #76	; 0x4c
 800bc42:	af00      	add	r7, sp, #0
 800bc44:	eeb0 6a40 	vmov.f32	s12, s0
 800bc48:	eef0 6a60 	vmov.f32	s13, s1
 800bc4c:	eeb0 7a41 	vmov.f32	s14, s2
 800bc50:	eef0 7a61 	vmov.f32	s15, s3
 800bc54:	ed87 6a04 	vstr	s12, [r7, #16]
 800bc58:	edc7 6a05 	vstr	s13, [r7, #20]
 800bc5c:	ed87 7a06 	vstr	s14, [r7, #24]
 800bc60:	edc7 7a07 	vstr	s15, [r7, #28]
#define Q quaternion.element
#ifdef FUSION_USE_NORMAL_SQRT
    const float magnitudeReciprocal = 1.0f / sqrtf(Q.w * Q.w + Q.x * Q.x + Q.y * Q.y + Q.z * Q.z);
#else
    const float magnitudeReciprocal = FusionFastInverseSqrt(Q.w * Q.w + Q.x * Q.x + Q.y * Q.y + Q.z * Q.z);
 800bc64:	ed97 7a04 	vldr	s14, [r7, #16]
 800bc68:	edd7 7a04 	vldr	s15, [r7, #16]
 800bc6c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bc70:	edd7 6a05 	vldr	s13, [r7, #20]
 800bc74:	edd7 7a05 	vldr	s15, [r7, #20]
 800bc78:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800bc7c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800bc80:	edd7 6a06 	vldr	s13, [r7, #24]
 800bc84:	edd7 7a06 	vldr	s15, [r7, #24]
 800bc88:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800bc8c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800bc90:	edd7 6a07 	vldr	s13, [r7, #28]
 800bc94:	edd7 7a07 	vldr	s15, [r7, #28]
 800bc98:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800bc9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bca0:	eeb0 0a67 	vmov.f32	s0, s15
 800bca4:	f7ff fb4e 	bl	800b344 <FusionFastInverseSqrt>
 800bca8:	ed87 0a11 	vstr	s0, [r7, #68]	; 0x44
#endif
    const FusionQuaternion result = {.element = {
            .w = Q.w * magnitudeReciprocal,
 800bcac:	ed97 7a04 	vldr	s14, [r7, #16]
 800bcb0:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800bcb4:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 800bcb8:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            .x = Q.x * magnitudeReciprocal,
 800bcbc:	ed97 7a05 	vldr	s14, [r7, #20]
 800bcc0:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800bcc4:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 800bcc8:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = Q.y * magnitudeReciprocal,
 800bccc:	ed97 7a06 	vldr	s14, [r7, #24]
 800bcd0:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800bcd4:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 800bcd8:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = Q.z * magnitudeReciprocal,
 800bcdc:	ed97 7a07 	vldr	s14, [r7, #28]
 800bce0:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800bce4:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 800bce8:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    }};
    return result;
 800bcec:	f107 0434 	add.w	r4, r7, #52	; 0x34
 800bcf0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bcf4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800bcf6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800bcfa:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800bcfc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800bcfe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800bd00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bd02:	ee06 0a10 	vmov	s12, r0
 800bd06:	ee06 1a90 	vmov	s13, r1
 800bd0a:	ee07 2a10 	vmov	s14, r2
 800bd0e:	ee07 3a90 	vmov	s15, r3
#undef Q
}
 800bd12:	eeb0 0a46 	vmov.f32	s0, s12
 800bd16:	eef0 0a66 	vmov.f32	s1, s13
 800bd1a:	eeb0 1a47 	vmov.f32	s2, s14
 800bd1e:	eef0 1a67 	vmov.f32	s3, s15
 800bd22:	374c      	adds	r7, #76	; 0x4c
 800bd24:	46bd      	mov	sp, r7
 800bd26:	bd90      	pop	{r4, r7, pc}

0800bd28 <FusionAhrsInitialise>:

/**
 * @brief Initialises the AHRS algorithm structure.
 * @param ahrs AHRS algorithm structure.
 */
void FusionAhrsInitialise(FusionAhrs *const ahrs) {
 800bd28:	b5b0      	push	{r4, r5, r7, lr}
 800bd2a:	b088      	sub	sp, #32
 800bd2c:	af00      	add	r7, sp, #0
 800bd2e:	6078      	str	r0, [r7, #4]
    const FusionAhrsSettings settings = {
 800bd30:	4b0b      	ldr	r3, [pc, #44]	; (800bd60 <FusionAhrsInitialise+0x38>)
 800bd32:	f107 0408 	add.w	r4, r7, #8
 800bd36:	461d      	mov	r5, r3
 800bd38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bd3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bd3c:	e895 0003 	ldmia.w	r5, {r0, r1}
 800bd40:	e884 0003 	stmia.w	r4, {r0, r1}
            .gyroscopeRange = 0.0f,
            .accelerationRejection = 90.0f,
            .magneticRejection = 90.0f,
            .recoveryTriggerPeriod = 0,
    };
    FusionAhrsSetSettings(ahrs, &settings);
 800bd44:	f107 0308 	add.w	r3, r7, #8
 800bd48:	4619      	mov	r1, r3
 800bd4a:	6878      	ldr	r0, [r7, #4]
 800bd4c:	f000 f86e 	bl	800be2c <FusionAhrsSetSettings>
    FusionAhrsReset(ahrs);
 800bd50:	6878      	ldr	r0, [r7, #4]
 800bd52:	f000 f807 	bl	800bd64 <FusionAhrsReset>
}
 800bd56:	bf00      	nop
 800bd58:	3720      	adds	r7, #32
 800bd5a:	46bd      	mov	sp, r7
 800bd5c:	bdb0      	pop	{r4, r5, r7, pc}
 800bd5e:	bf00      	nop
 800bd60:	08014540 	.word	0x08014540

0800bd64 <FusionAhrsReset>:
/**
 * @brief Resets the AHRS algorithm.  This is equivalent to reinitialising the
 * algorithm while maintaining the current settings.
 * @param ahrs AHRS algorithm structure.
 */
void FusionAhrsReset(FusionAhrs *const ahrs) {
 800bd64:	b480      	push	{r7}
 800bd66:	b091      	sub	sp, #68	; 0x44
 800bd68:	af00      	add	r7, sp, #0
 800bd6a:	6078      	str	r0, [r7, #4]
    ahrs->quaternion = FUSION_IDENTITY_QUATERNION;
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800bd72:	619a      	str	r2, [r3, #24]
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	f04f 0200 	mov.w	r2, #0
 800bd7a:	61da      	str	r2, [r3, #28]
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	f04f 0200 	mov.w	r2, #0
 800bd82:	621a      	str	r2, [r3, #32]
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	f04f 0200 	mov.w	r2, #0
 800bd8a:	625a      	str	r2, [r3, #36]	; 0x24
    ahrs->accelerometer = FUSION_VECTOR_ZERO;
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	f04f 0200 	mov.w	r2, #0
 800bd92:	629a      	str	r2, [r3, #40]	; 0x28
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	f04f 0200 	mov.w	r2, #0
 800bd9a:	62da      	str	r2, [r3, #44]	; 0x2c
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	f04f 0200 	mov.w	r2, #0
 800bda2:	631a      	str	r2, [r3, #48]	; 0x30
    ahrs->initialising = true;
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	2201      	movs	r2, #1
 800bda8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    ahrs->rampedGain = INITIAL_GAIN;
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	4a1e      	ldr	r2, [pc, #120]	; (800be28 <FusionAhrsReset+0xc4>)
 800bdb0:	639a      	str	r2, [r3, #56]	; 0x38
    ahrs->angularRateRecovery = false;
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	2200      	movs	r2, #0
 800bdb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    ahrs->halfAccelerometerFeedback = FUSION_VECTOR_ZERO;
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	f04f 0200 	mov.w	r2, #0
 800bdc0:	645a      	str	r2, [r3, #68]	; 0x44
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	f04f 0200 	mov.w	r2, #0
 800bdc8:	649a      	str	r2, [r3, #72]	; 0x48
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	f04f 0200 	mov.w	r2, #0
 800bdd0:	64da      	str	r2, [r3, #76]	; 0x4c
    ahrs->halfMagnetometerFeedback = FUSION_VECTOR_ZERO;
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	f04f 0200 	mov.w	r2, #0
 800bdd8:	651a      	str	r2, [r3, #80]	; 0x50
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	f04f 0200 	mov.w	r2, #0
 800bde0:	655a      	str	r2, [r3, #84]	; 0x54
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	f04f 0200 	mov.w	r2, #0
 800bde8:	659a      	str	r2, [r3, #88]	; 0x58
    ahrs->accelerometerIgnored = false;
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	2200      	movs	r2, #0
 800bdee:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
    ahrs->accelerationRecoveryTrigger = 0;
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	2200      	movs	r2, #0
 800bdf6:	661a      	str	r2, [r3, #96]	; 0x60
    ahrs->accelerationRecoveryTimeout = ahrs->settings.recoveryTriggerPeriod;
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	695b      	ldr	r3, [r3, #20]
 800bdfc:	461a      	mov	r2, r3
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	665a      	str	r2, [r3, #100]	; 0x64
    ahrs->magnetometerIgnored = false;
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	2200      	movs	r2, #0
 800be06:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    ahrs->magneticRecoveryTrigger = 0;
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	2200      	movs	r2, #0
 800be0e:	66da      	str	r2, [r3, #108]	; 0x6c
    ahrs->magneticRecoveryTimeout = ahrs->settings.recoveryTriggerPeriod;
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	695b      	ldr	r3, [r3, #20]
 800be14:	461a      	mov	r2, r3
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	671a      	str	r2, [r3, #112]	; 0x70
}
 800be1a:	bf00      	nop
 800be1c:	3744      	adds	r7, #68	; 0x44
 800be1e:	46bd      	mov	sp, r7
 800be20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be24:	4770      	bx	lr
 800be26:	bf00      	nop
 800be28:	41200000 	.word	0x41200000

0800be2c <FusionAhrsSetSettings>:
/**
 * @brief Sets the AHRS algorithm settings.
 * @param ahrs AHRS algorithm structure.
 * @param settings Settings.
 */
void FusionAhrsSetSettings(FusionAhrs *const ahrs, const FusionAhrsSettings *const settings) {
 800be2c:	b580      	push	{r7, lr}
 800be2e:	b082      	sub	sp, #8
 800be30:	af00      	add	r7, sp, #0
 800be32:	6078      	str	r0, [r7, #4]
 800be34:	6039      	str	r1, [r7, #0]
    ahrs->settings.convention = settings->convention;
 800be36:	683b      	ldr	r3, [r7, #0]
 800be38:	781a      	ldrb	r2, [r3, #0]
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	701a      	strb	r2, [r3, #0]
    ahrs->settings.gain = settings->gain;
 800be3e:	683b      	ldr	r3, [r7, #0]
 800be40:	685a      	ldr	r2, [r3, #4]
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	605a      	str	r2, [r3, #4]
    ahrs->settings.gyroscopeRange = settings->gyroscopeRange == 0.0f ? FLT_MAX : 0.98f * settings->gyroscopeRange;
 800be46:	683b      	ldr	r3, [r7, #0]
 800be48:	edd3 7a02 	vldr	s15, [r3, #8]
 800be4c:	eef5 7a40 	vcmp.f32	s15, #0.0
 800be50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be54:	d007      	beq.n	800be66 <FusionAhrsSetSettings+0x3a>
 800be56:	683b      	ldr	r3, [r7, #0]
 800be58:	edd3 7a02 	vldr	s15, [r3, #8]
 800be5c:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 800bf90 <FusionAhrsSetSettings+0x164>
 800be60:	ee67 7a87 	vmul.f32	s15, s15, s14
 800be64:	e001      	b.n	800be6a <FusionAhrsSetSettings+0x3e>
 800be66:	eddf 7a4b 	vldr	s15, [pc, #300]	; 800bf94 <FusionAhrsSetSettings+0x168>
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	edc3 7a02 	vstr	s15, [r3, #8]
    ahrs->settings.accelerationRejection = settings->accelerationRejection == 0.0f ? FLT_MAX : powf(0.5f * sinf(FusionDegreesToRadians(settings->accelerationRejection)), 2);
 800be70:	683b      	ldr	r3, [r7, #0]
 800be72:	edd3 7a03 	vldr	s15, [r3, #12]
 800be76:	eef5 7a40 	vcmp.f32	s15, #0.0
 800be7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be7e:	d01b      	beq.n	800beb8 <FusionAhrsSetSettings+0x8c>
 800be80:	683b      	ldr	r3, [r7, #0]
 800be82:	edd3 7a03 	vldr	s15, [r3, #12]
 800be86:	eeb0 0a67 	vmov.f32	s0, s15
 800be8a:	f7ff fa47 	bl	800b31c <FusionDegreesToRadians>
 800be8e:	eef0 7a40 	vmov.f32	s15, s0
 800be92:	eeb0 0a67 	vmov.f32	s0, s15
 800be96:	f005 ffe1 	bl	8011e5c <sinf>
 800be9a:	eef0 7a40 	vmov.f32	s15, s0
 800be9e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800bea2:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bea6:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 800beaa:	eeb0 0a67 	vmov.f32	s0, s15
 800beae:	f006 f8b9 	bl	8012024 <powf>
 800beb2:	eef0 7a40 	vmov.f32	s15, s0
 800beb6:	e001      	b.n	800bebc <FusionAhrsSetSettings+0x90>
 800beb8:	eddf 7a36 	vldr	s15, [pc, #216]	; 800bf94 <FusionAhrsSetSettings+0x168>
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	edc3 7a03 	vstr	s15, [r3, #12]
    ahrs->settings.magneticRejection = settings->magneticRejection == 0.0f ? FLT_MAX : powf(0.5f * sinf(FusionDegreesToRadians(settings->magneticRejection)), 2);
 800bec2:	683b      	ldr	r3, [r7, #0]
 800bec4:	edd3 7a04 	vldr	s15, [r3, #16]
 800bec8:	eef5 7a40 	vcmp.f32	s15, #0.0
 800becc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bed0:	d01b      	beq.n	800bf0a <FusionAhrsSetSettings+0xde>
 800bed2:	683b      	ldr	r3, [r7, #0]
 800bed4:	edd3 7a04 	vldr	s15, [r3, #16]
 800bed8:	eeb0 0a67 	vmov.f32	s0, s15
 800bedc:	f7ff fa1e 	bl	800b31c <FusionDegreesToRadians>
 800bee0:	eef0 7a40 	vmov.f32	s15, s0
 800bee4:	eeb0 0a67 	vmov.f32	s0, s15
 800bee8:	f005 ffb8 	bl	8011e5c <sinf>
 800beec:	eef0 7a40 	vmov.f32	s15, s0
 800bef0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800bef4:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bef8:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 800befc:	eeb0 0a67 	vmov.f32	s0, s15
 800bf00:	f006 f890 	bl	8012024 <powf>
 800bf04:	eef0 7a40 	vmov.f32	s15, s0
 800bf08:	e001      	b.n	800bf0e <FusionAhrsSetSettings+0xe2>
 800bf0a:	eddf 7a22 	vldr	s15, [pc, #136]	; 800bf94 <FusionAhrsSetSettings+0x168>
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	edc3 7a04 	vstr	s15, [r3, #16]
    ahrs->settings.recoveryTriggerPeriod = settings->recoveryTriggerPeriod;
 800bf14:	683b      	ldr	r3, [r7, #0]
 800bf16:	695a      	ldr	r2, [r3, #20]
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	615a      	str	r2, [r3, #20]
    ahrs->accelerationRecoveryTimeout = ahrs->settings.recoveryTriggerPeriod;
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	695b      	ldr	r3, [r3, #20]
 800bf20:	461a      	mov	r2, r3
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	665a      	str	r2, [r3, #100]	; 0x64
    ahrs->magneticRecoveryTimeout = ahrs->settings.recoveryTriggerPeriod;
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	695b      	ldr	r3, [r3, #20]
 800bf2a:	461a      	mov	r2, r3
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	671a      	str	r2, [r3, #112]	; 0x70
    if ((settings->gain == 0.0f) || (settings->recoveryTriggerPeriod == 0)) { // disable acceleration and magnetic rejection features if gain is zero
 800bf30:	683b      	ldr	r3, [r7, #0]
 800bf32:	edd3 7a01 	vldr	s15, [r3, #4]
 800bf36:	eef5 7a40 	vcmp.f32	s15, #0.0
 800bf3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf3e:	d003      	beq.n	800bf48 <FusionAhrsSetSettings+0x11c>
 800bf40:	683b      	ldr	r3, [r7, #0]
 800bf42:	695b      	ldr	r3, [r3, #20]
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d105      	bne.n	800bf54 <FusionAhrsSetSettings+0x128>
        ahrs->settings.accelerationRejection = FLT_MAX;
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	4a13      	ldr	r2, [pc, #76]	; (800bf98 <FusionAhrsSetSettings+0x16c>)
 800bf4c:	60da      	str	r2, [r3, #12]
        ahrs->settings.magneticRejection = FLT_MAX;
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	4a11      	ldr	r2, [pc, #68]	; (800bf98 <FusionAhrsSetSettings+0x16c>)
 800bf52:	611a      	str	r2, [r3, #16]
    }
    if (ahrs->initialising == false) {
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800bf5a:	f083 0301 	eor.w	r3, r3, #1
 800bf5e:	b2db      	uxtb	r3, r3
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d003      	beq.n	800bf6c <FusionAhrsSetSettings+0x140>
        ahrs->rampedGain = ahrs->settings.gain;
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	685a      	ldr	r2, [r3, #4]
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	639a      	str	r2, [r3, #56]	; 0x38
    }
    ahrs->rampedGainStep = (INITIAL_GAIN - ahrs->settings.gain) / INITIALISATION_PERIOD;
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	edd3 7a01 	vldr	s15, [r3, #4]
 800bf72:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800bf76:	ee37 7a67 	vsub.f32	s14, s14, s15
 800bf7a:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 800bf7e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
}
 800bf88:	bf00      	nop
 800bf8a:	3708      	adds	r7, #8
 800bf8c:	46bd      	mov	sp, r7
 800bf8e:	bd80      	pop	{r7, pc}
 800bf90:	3f7ae148 	.word	0x3f7ae148
 800bf94:	7f7fffff 	.word	0x7f7fffff
 800bf98:	7f7fffff 	.word	0x7f7fffff

0800bf9c <FusionAhrsUpdate>:
 * @param gyroscope Gyroscope measurement in degrees per second.
 * @param accelerometer Accelerometer measurement in g.
 * @param magnetometer Magnetometer measurement in arbitrary units.
 * @param deltaTime Delta time in seconds.
 */
void FusionAhrsUpdate(FusionAhrs *const ahrs, const FusionVector gyroscope, const FusionVector accelerometer, const FusionVector magnetometer, const float deltaTime) {
 800bf9c:	b590      	push	{r4, r7, lr}
 800bf9e:	b0bf      	sub	sp, #252	; 0xfc
 800bfa0:	af00      	add	r7, sp, #0
 800bfa2:	62f8      	str	r0, [r7, #44]	; 0x2c
 800bfa4:	eeb0 5a61 	vmov.f32	s10, s3
 800bfa8:	eef0 5a42 	vmov.f32	s11, s4
 800bfac:	eeb0 6a62 	vmov.f32	s12, s5
 800bfb0:	eef0 6a43 	vmov.f32	s13, s6
 800bfb4:	eeb0 7a63 	vmov.f32	s14, s7
 800bfb8:	eef0 7a44 	vmov.f32	s15, s8
 800bfbc:	edc7 4a01 	vstr	s9, [r7, #4]
 800bfc0:	ed87 0a08 	vstr	s0, [r7, #32]
 800bfc4:	edc7 0a09 	vstr	s1, [r7, #36]	; 0x24
 800bfc8:	ed87 1a0a 	vstr	s2, [r7, #40]	; 0x28
 800bfcc:	ed87 5a05 	vstr	s10, [r7, #20]
 800bfd0:	edc7 5a06 	vstr	s11, [r7, #24]
 800bfd4:	ed87 6a07 	vstr	s12, [r7, #28]
 800bfd8:	edc7 6a02 	vstr	s13, [r7, #8]
 800bfdc:	ed87 7a03 	vstr	s14, [r7, #12]
 800bfe0:	edc7 7a04 	vstr	s15, [r7, #16]
#define Q ahrs->quaternion.element

    // Store accelerometer
    ahrs->accelerometer = accelerometer;
 800bfe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfe6:	3328      	adds	r3, #40	; 0x28
 800bfe8:	f107 0214 	add.w	r2, r7, #20
 800bfec:	ca07      	ldmia	r2, {r0, r1, r2}
 800bfee:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    // Reinitialise if gyroscope range exceeded
    if ((fabs(gyroscope.axis.x) > ahrs->settings.gyroscopeRange) || (fabs(gyroscope.axis.y) > ahrs->settings.gyroscopeRange) || (fabs(gyroscope.axis.z) > ahrs->settings.gyroscopeRange)) {
 800bff2:	edd7 7a08 	vldr	s15, [r7, #32]
 800bff6:	eeb0 7ae7 	vabs.f32	s14, s15
 800bffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bffc:	edd3 7a02 	vldr	s15, [r3, #8]
 800c000:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c004:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c008:	dc17      	bgt.n	800c03a <FusionAhrsUpdate+0x9e>
 800c00a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800c00e:	eeb0 7ae7 	vabs.f32	s14, s15
 800c012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c014:	edd3 7a02 	vldr	s15, [r3, #8]
 800c018:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c01c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c020:	dc0b      	bgt.n	800c03a <FusionAhrsUpdate+0x9e>
 800c022:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c026:	eeb0 7ae7 	vabs.f32	s14, s15
 800c02a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c02c:	edd3 7a02 	vldr	s15, [r3, #8]
 800c030:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c034:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c038:	dd15      	ble.n	800c066 <FusionAhrsUpdate+0xca>
        const FusionQuaternion quaternion = ahrs->quaternion;
 800c03a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c03c:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 800c040:	3318      	adds	r3, #24
 800c042:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c044:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        FusionAhrsReset(ahrs);
 800c048:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c04a:	f7ff fe8b 	bl	800bd64 <FusionAhrsReset>
        ahrs->quaternion = quaternion;
 800c04e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c050:	f103 0418 	add.w	r4, r3, #24
 800c054:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800c058:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c05a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        ahrs->angularRateRecovery = true;
 800c05e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c060:	2201      	movs	r2, #1
 800c062:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    }

    // Ramp down gain during initialisation
    if (ahrs->initialising == true) {
 800c066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c068:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d02d      	beq.n	800c0cc <FusionAhrsUpdate+0x130>
        ahrs->rampedGain -= ahrs->rampedGainStep * deltaTime;
 800c070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c072:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 800c076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c078:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 800c07c:	edd7 7a01 	vldr	s15, [r7, #4]
 800c080:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c084:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c08a:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
        if ((ahrs->rampedGain < ahrs->settings.gain) || (ahrs->settings.gain == 0.0f)) {
 800c08e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c090:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 800c094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c096:	edd3 7a01 	vldr	s15, [r3, #4]
 800c09a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c09e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c0a2:	d407      	bmi.n	800c0b4 <FusionAhrsUpdate+0x118>
 800c0a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0a6:	edd3 7a01 	vldr	s15, [r3, #4]
 800c0aa:	eef5 7a40 	vcmp.f32	s15, #0.0
 800c0ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c0b2:	d10b      	bne.n	800c0cc <FusionAhrsUpdate+0x130>
            ahrs->rampedGain = ahrs->settings.gain;
 800c0b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0b6:	685a      	ldr	r2, [r3, #4]
 800c0b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0ba:	639a      	str	r2, [r3, #56]	; 0x38
            ahrs->initialising = false;
 800c0bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0be:	2200      	movs	r2, #0
 800c0c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
            ahrs->angularRateRecovery = false;
 800c0c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0c6:	2200      	movs	r2, #0
 800c0c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        }
    }

    // Calculate direction of gravity indicated by algorithm
    const FusionVector halfGravity = HalfGravity(ahrs);
 800c0cc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c0ce:	f000 faf4 	bl	800c6ba <HalfGravity>
 800c0d2:	eef0 6a40 	vmov.f32	s13, s0
 800c0d6:	eeb0 7a60 	vmov.f32	s14, s1
 800c0da:	eef0 7a41 	vmov.f32	s15, s2
 800c0de:	edc7 6a25 	vstr	s13, [r7, #148]	; 0x94
 800c0e2:	ed87 7a26 	vstr	s14, [r7, #152]	; 0x98
 800c0e6:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c

    // Calculate accelerometer feedback
    FusionVector halfAccelerometerFeedback = FUSION_VECTOR_ZERO;
 800c0ea:	f04f 0300 	mov.w	r3, #0
 800c0ee:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800c0f2:	f04f 0300 	mov.w	r3, #0
 800c0f6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800c0fa:	f04f 0300 	mov.w	r3, #0
 800c0fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    ahrs->accelerometerIgnored = true;
 800c102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c104:	2201      	movs	r2, #1
 800c106:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
    if (FusionVectorIsZero(accelerometer) == false) {
 800c10a:	edd7 6a05 	vldr	s13, [r7, #20]
 800c10e:	ed97 7a06 	vldr	s14, [r7, #24]
 800c112:	edd7 7a07 	vldr	s15, [r7, #28]
 800c116:	eeb0 0a66 	vmov.f32	s0, s13
 800c11a:	eef0 0a47 	vmov.f32	s1, s14
 800c11e:	eeb0 1a67 	vmov.f32	s2, s15
 800c122:	f7ff f93f 	bl	800b3a4 <FusionVectorIsZero>
 800c126:	4603      	mov	r3, r0
 800c128:	f083 0301 	eor.w	r3, r3, #1
 800c12c:	b2db      	uxtb	r3, r3
 800c12e:	2b00      	cmp	r3, #0
 800c130:	f000 809c 	beq.w	800c26c <FusionAhrsUpdate+0x2d0>

        // Calculate accelerometer feedback scaled by 0.5
        ahrs->halfAccelerometerFeedback = Feedback(FusionVectorNormalise(accelerometer), halfGravity);
 800c134:	edd7 6a05 	vldr	s13, [r7, #20]
 800c138:	ed97 7a06 	vldr	s14, [r7, #24]
 800c13c:	edd7 7a07 	vldr	s15, [r7, #28]
 800c140:	eeb0 0a66 	vmov.f32	s0, s13
 800c144:	eef0 0a47 	vmov.f32	s1, s14
 800c148:	eeb0 1a67 	vmov.f32	s2, s15
 800c14c:	f7ff fb60 	bl	800b810 <FusionVectorNormalise>
 800c150:	eef0 6a40 	vmov.f32	s13, s0
 800c154:	eeb0 7a60 	vmov.f32	s14, s1
 800c158:	eef0 7a41 	vmov.f32	s15, s2
 800c15c:	edc7 6a28 	vstr	s13, [r7, #160]	; 0xa0
 800c160:	ed87 7a29 	vstr	s14, [r7, #164]	; 0xa4
 800c164:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
 800c168:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 800c16a:	ed97 5a25 	vldr	s10, [r7, #148]	; 0x94
 800c16e:	edd7 5a26 	vldr	s11, [r7, #152]	; 0x98
 800c172:	ed97 6a27 	vldr	s12, [r7, #156]	; 0x9c
 800c176:	edd7 6a28 	vldr	s13, [r7, #160]	; 0xa0
 800c17a:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 800c17e:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800c182:	eef0 1a45 	vmov.f32	s3, s10
 800c186:	eeb0 2a65 	vmov.f32	s4, s11
 800c18a:	eef0 2a46 	vmov.f32	s5, s12
 800c18e:	eeb0 0a66 	vmov.f32	s0, s13
 800c192:	eef0 0a47 	vmov.f32	s1, s14
 800c196:	eeb0 1a67 	vmov.f32	s2, s15
 800c19a:	f000 fc55 	bl	800ca48 <Feedback>
 800c19e:	eef0 6a40 	vmov.f32	s13, s0
 800c1a2:	eeb0 7a60 	vmov.f32	s14, s1
 800c1a6:	eef0 7a41 	vmov.f32	s15, s2
 800c1aa:	edc4 6a11 	vstr	s13, [r4, #68]	; 0x44
 800c1ae:	ed84 7a12 	vstr	s14, [r4, #72]	; 0x48
 800c1b2:	edc4 7a13 	vstr	s15, [r4, #76]	; 0x4c

        // Don't ignore accelerometer if acceleration error below threshold
        if ((ahrs->initialising == true) || ((FusionVectorMagnitudeSquared(ahrs->halfAccelerometerFeedback) <= ahrs->settings.accelerationRejection))) {
 800c1b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1b8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d118      	bne.n	800c1f2 <FusionAhrsUpdate+0x256>
 800c1c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1c2:	edd3 6a11 	vldr	s13, [r3, #68]	; 0x44
 800c1c6:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 800c1ca:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 800c1ce:	eeb0 0a66 	vmov.f32	s0, s13
 800c1d2:	eef0 0a47 	vmov.f32	s1, s14
 800c1d6:	eeb0 1a67 	vmov.f32	s2, s15
 800c1da:	f7ff facf 	bl	800b77c <FusionVectorMagnitudeSquared>
 800c1de:	eeb0 7a40 	vmov.f32	s14, s0
 800c1e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1e4:	edd3 7a03 	vldr	s15, [r3, #12]
 800c1e8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c1ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c1f0:	d80a      	bhi.n	800c208 <FusionAhrsUpdate+0x26c>
            ahrs->accelerometerIgnored = false;
 800c1f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1f4:	2200      	movs	r2, #0
 800c1f6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
            ahrs->accelerationRecoveryTrigger -= 9;
 800c1fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c1fe:	f1a3 0209 	sub.w	r2, r3, #9
 800c202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c204:	661a      	str	r2, [r3, #96]	; 0x60
 800c206:	e004      	b.n	800c212 <FusionAhrsUpdate+0x276>
        } else {
            ahrs->accelerationRecoveryTrigger += 1;
 800c208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c20a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c20c:	1c5a      	adds	r2, r3, #1
 800c20e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c210:	661a      	str	r2, [r3, #96]	; 0x60
        }

        // Don't ignore accelerometer during acceleration recovery
        if (ahrs->accelerationRecoveryTrigger > ahrs->accelerationRecoveryTimeout) {
 800c212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c214:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800c216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c218:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c21a:	429a      	cmp	r2, r3
 800c21c:	dd07      	ble.n	800c22e <FusionAhrsUpdate+0x292>
            ahrs->accelerationRecoveryTimeout = 0;
 800c21e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c220:	2200      	movs	r2, #0
 800c222:	665a      	str	r2, [r3, #100]	; 0x64
            ahrs->accelerometerIgnored = false;
 800c224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c226:	2200      	movs	r2, #0
 800c228:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 800c22c:	e004      	b.n	800c238 <FusionAhrsUpdate+0x29c>
        } else {
            ahrs->accelerationRecoveryTimeout = ahrs->settings.recoveryTriggerPeriod;
 800c22e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c230:	695b      	ldr	r3, [r3, #20]
 800c232:	461a      	mov	r2, r3
 800c234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c236:	665a      	str	r2, [r3, #100]	; 0x64
        }
        ahrs->accelerationRecoveryTrigger = Clamp(ahrs->accelerationRecoveryTrigger, 0, ahrs->settings.recoveryTriggerPeriod);
 800c238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c23a:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800c23c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c23e:	695b      	ldr	r3, [r3, #20]
 800c240:	461a      	mov	r2, r3
 800c242:	2100      	movs	r1, #0
 800c244:	f000 fcb5 	bl	800cbb2 <Clamp>
 800c248:	4602      	mov	r2, r0
 800c24a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c24c:	661a      	str	r2, [r3, #96]	; 0x60

        // Apply accelerometer feedback
        if (ahrs->accelerometerIgnored == false) {
 800c24e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c250:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800c254:	f083 0301 	eor.w	r3, r3, #1
 800c258:	b2db      	uxtb	r3, r3
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d006      	beq.n	800c26c <FusionAhrsUpdate+0x2d0>
            halfAccelerometerFeedback = ahrs->halfAccelerometerFeedback;
 800c25e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c260:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800c264:	3244      	adds	r2, #68	; 0x44
 800c266:	ca07      	ldmia	r2, {r0, r1, r2}
 800c268:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        }
    }

    // Calculate magnetometer feedback
    FusionVector halfMagnetometerFeedback = FUSION_VECTOR_ZERO;
 800c26c:	f04f 0300 	mov.w	r3, #0
 800c270:	673b      	str	r3, [r7, #112]	; 0x70
 800c272:	f04f 0300 	mov.w	r3, #0
 800c276:	677b      	str	r3, [r7, #116]	; 0x74
 800c278:	f04f 0300 	mov.w	r3, #0
 800c27c:	67bb      	str	r3, [r7, #120]	; 0x78
    ahrs->magnetometerIgnored = false;
 800c27e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c280:	2200      	movs	r2, #0
 800c282:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    if (FusionVectorIsZero(magnetometer) == false) {
 800c286:	edd7 6a02 	vldr	s13, [r7, #8]
 800c28a:	ed97 7a03 	vldr	s14, [r7, #12]
 800c28e:	edd7 7a04 	vldr	s15, [r7, #16]
 800c292:	eeb0 0a66 	vmov.f32	s0, s13
 800c296:	eef0 0a47 	vmov.f32	s1, s14
 800c29a:	eeb0 1a67 	vmov.f32	s2, s15
 800c29e:	f7ff f881 	bl	800b3a4 <FusionVectorIsZero>
 800c2a2:	4603      	mov	r3, r0
 800c2a4:	f083 0301 	eor.w	r3, r3, #1
 800c2a8:	b2db      	uxtb	r3, r3
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	f000 80d1 	beq.w	800c452 <FusionAhrsUpdate+0x4b6>

        // Calculate direction of magnetic field indicated by algorithm
        const FusionVector halfMagnetic = HalfMagnetic(ahrs);
 800c2b0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c2b2:	f000 fabf 	bl	800c834 <HalfMagnetic>
 800c2b6:	eef0 6a40 	vmov.f32	s13, s0
 800c2ba:	eeb0 7a60 	vmov.f32	s14, s1
 800c2be:	eef0 7a41 	vmov.f32	s15, s2
 800c2c2:	edc7 6a0c 	vstr	s13, [r7, #48]	; 0x30
 800c2c6:	ed87 7a0d 	vstr	s14, [r7, #52]	; 0x34
 800c2ca:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38

        // Calculate magnetometer feedback scaled by 0.5
        ahrs->halfMagnetometerFeedback = Feedback(FusionVectorNormalise(FusionVectorCrossProduct(halfGravity, magnetometer)), halfMagnetic);
 800c2ce:	ed97 5a02 	vldr	s10, [r7, #8]
 800c2d2:	edd7 5a03 	vldr	s11, [r7, #12]
 800c2d6:	ed97 6a04 	vldr	s12, [r7, #16]
 800c2da:	edd7 6a25 	vldr	s13, [r7, #148]	; 0x94
 800c2de:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800c2e2:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800c2e6:	eef0 1a45 	vmov.f32	s3, s10
 800c2ea:	eeb0 2a65 	vmov.f32	s4, s11
 800c2ee:	eef0 2a46 	vmov.f32	s5, s12
 800c2f2:	eeb0 0a66 	vmov.f32	s0, s13
 800c2f6:	eef0 0a47 	vmov.f32	s1, s14
 800c2fa:	eeb0 1a67 	vmov.f32	s2, s15
 800c2fe:	f7ff f981 	bl	800b604 <FusionVectorCrossProduct>
 800c302:	eef0 6a40 	vmov.f32	s13, s0
 800c306:	eeb0 7a60 	vmov.f32	s14, s1
 800c30a:	eef0 7a41 	vmov.f32	s15, s2
 800c30e:	edc7 6a2b 	vstr	s13, [r7, #172]	; 0xac
 800c312:	ed87 7a2c 	vstr	s14, [r7, #176]	; 0xb0
 800c316:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
 800c31a:	edd7 6a2b 	vldr	s13, [r7, #172]	; 0xac
 800c31e:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 800c322:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 800c326:	eeb0 0a66 	vmov.f32	s0, s13
 800c32a:	eef0 0a47 	vmov.f32	s1, s14
 800c32e:	eeb0 1a67 	vmov.f32	s2, s15
 800c332:	f7ff fa6d 	bl	800b810 <FusionVectorNormalise>
 800c336:	eef0 6a40 	vmov.f32	s13, s0
 800c33a:	eeb0 7a60 	vmov.f32	s14, s1
 800c33e:	eef0 7a41 	vmov.f32	s15, s2
 800c342:	edc7 6a2e 	vstr	s13, [r7, #184]	; 0xb8
 800c346:	ed87 7a2f 	vstr	s14, [r7, #188]	; 0xbc
 800c34a:	edc7 7a30 	vstr	s15, [r7, #192]	; 0xc0
 800c34e:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 800c350:	ed97 5a0c 	vldr	s10, [r7, #48]	; 0x30
 800c354:	edd7 5a0d 	vldr	s11, [r7, #52]	; 0x34
 800c358:	ed97 6a0e 	vldr	s12, [r7, #56]	; 0x38
 800c35c:	edd7 6a2e 	vldr	s13, [r7, #184]	; 0xb8
 800c360:	ed97 7a2f 	vldr	s14, [r7, #188]	; 0xbc
 800c364:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 800c368:	eef0 1a45 	vmov.f32	s3, s10
 800c36c:	eeb0 2a65 	vmov.f32	s4, s11
 800c370:	eef0 2a46 	vmov.f32	s5, s12
 800c374:	eeb0 0a66 	vmov.f32	s0, s13
 800c378:	eef0 0a47 	vmov.f32	s1, s14
 800c37c:	eeb0 1a67 	vmov.f32	s2, s15
 800c380:	f000 fb62 	bl	800ca48 <Feedback>
 800c384:	eef0 6a40 	vmov.f32	s13, s0
 800c388:	eeb0 7a60 	vmov.f32	s14, s1
 800c38c:	eef0 7a41 	vmov.f32	s15, s2
 800c390:	edc4 6a14 	vstr	s13, [r4, #80]	; 0x50
 800c394:	ed84 7a15 	vstr	s14, [r4, #84]	; 0x54
 800c398:	edc4 7a16 	vstr	s15, [r4, #88]	; 0x58

        // Don't ignore magnetometer if magnetic error below threshold
        if ((ahrs->initialising == true) || ((FusionVectorMagnitudeSquared(ahrs->halfMagnetometerFeedback) <= ahrs->settings.magneticRejection))) {
 800c39c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c39e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d118      	bne.n	800c3d8 <FusionAhrsUpdate+0x43c>
 800c3a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3a8:	edd3 6a14 	vldr	s13, [r3, #80]	; 0x50
 800c3ac:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 800c3b0:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800c3b4:	eeb0 0a66 	vmov.f32	s0, s13
 800c3b8:	eef0 0a47 	vmov.f32	s1, s14
 800c3bc:	eeb0 1a67 	vmov.f32	s2, s15
 800c3c0:	f7ff f9dc 	bl	800b77c <FusionVectorMagnitudeSquared>
 800c3c4:	eeb0 7a40 	vmov.f32	s14, s0
 800c3c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3ca:	edd3 7a04 	vldr	s15, [r3, #16]
 800c3ce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c3d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c3d6:	d80a      	bhi.n	800c3ee <FusionAhrsUpdate+0x452>
            ahrs->magnetometerIgnored = false;
 800c3d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3da:	2200      	movs	r2, #0
 800c3dc:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
            ahrs->magneticRecoveryTrigger -= 9;
 800c3e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c3e4:	f1a3 0209 	sub.w	r2, r3, #9
 800c3e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3ea:	66da      	str	r2, [r3, #108]	; 0x6c
 800c3ec:	e004      	b.n	800c3f8 <FusionAhrsUpdate+0x45c>
        } else {
            ahrs->magneticRecoveryTrigger += 1;
 800c3ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c3f2:	1c5a      	adds	r2, r3, #1
 800c3f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3f6:	66da      	str	r2, [r3, #108]	; 0x6c
        }

        // Don't ignore magnetometer during magnetic recovery
        if (ahrs->magneticRecoveryTrigger > ahrs->magneticRecoveryTimeout) {
 800c3f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3fa:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800c3fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c400:	429a      	cmp	r2, r3
 800c402:	dd07      	ble.n	800c414 <FusionAhrsUpdate+0x478>
            ahrs->magneticRecoveryTimeout = 0;
 800c404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c406:	2200      	movs	r2, #0
 800c408:	671a      	str	r2, [r3, #112]	; 0x70
            ahrs->magnetometerIgnored = false;
 800c40a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c40c:	2200      	movs	r2, #0
 800c40e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 800c412:	e004      	b.n	800c41e <FusionAhrsUpdate+0x482>
        } else {
            ahrs->magneticRecoveryTimeout = ahrs->settings.recoveryTriggerPeriod;
 800c414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c416:	695b      	ldr	r3, [r3, #20]
 800c418:	461a      	mov	r2, r3
 800c41a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c41c:	671a      	str	r2, [r3, #112]	; 0x70
        }
        ahrs->magneticRecoveryTrigger = Clamp(ahrs->magneticRecoveryTrigger, 0, ahrs->settings.recoveryTriggerPeriod);
 800c41e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c420:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800c422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c424:	695b      	ldr	r3, [r3, #20]
 800c426:	461a      	mov	r2, r3
 800c428:	2100      	movs	r1, #0
 800c42a:	f000 fbc2 	bl	800cbb2 <Clamp>
 800c42e:	4602      	mov	r2, r0
 800c430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c432:	66da      	str	r2, [r3, #108]	; 0x6c

        // Apply magnetometer feedback
        if (ahrs->magnetometerIgnored == false) {
 800c434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c436:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800c43a:	f083 0301 	eor.w	r3, r3, #1
 800c43e:	b2db      	uxtb	r3, r3
 800c440:	2b00      	cmp	r3, #0
 800c442:	d006      	beq.n	800c452 <FusionAhrsUpdate+0x4b6>
            halfMagnetometerFeedback = ahrs->halfMagnetometerFeedback;
 800c444:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c446:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800c44a:	3250      	adds	r2, #80	; 0x50
 800c44c:	ca07      	ldmia	r2, {r0, r1, r2}
 800c44e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        }
    }

    // Convert gyroscope to radians per second scaled by 0.5
    const FusionVector halfGyroscope = FusionVectorMultiplyScalar(gyroscope, FusionDegreesToRadians(0.5f));
 800c452:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 800c456:	f7fe ff61 	bl	800b31c <FusionDegreesToRadians>
 800c45a:	eeb0 6a40 	vmov.f32	s12, s0
 800c45e:	edd7 6a08 	vldr	s13, [r7, #32]
 800c462:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800c466:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c46a:	eef0 1a46 	vmov.f32	s3, s12
 800c46e:	eeb0 0a66 	vmov.f32	s0, s13
 800c472:	eef0 0a47 	vmov.f32	s1, s14
 800c476:	eeb0 1a67 	vmov.f32	s2, s15
 800c47a:	f7ff f831 	bl	800b4e0 <FusionVectorMultiplyScalar>
 800c47e:	eef0 6a40 	vmov.f32	s13, s0
 800c482:	eeb0 7a60 	vmov.f32	s14, s1
 800c486:	eef0 7a41 	vmov.f32	s15, s2
 800c48a:	edc7 6a16 	vstr	s13, [r7, #88]	; 0x58
 800c48e:	ed87 7a17 	vstr	s14, [r7, #92]	; 0x5c
 800c492:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60

    // Apply feedback to gyroscope
    const FusionVector adjustedHalfGyroscope = FusionVectorAdd(halfGyroscope, FusionVectorMultiplyScalar(FusionVectorAdd(halfAccelerometerFeedback, halfMagnetometerFeedback), ahrs->rampedGain));
 800c496:	ed97 5a1c 	vldr	s10, [r7, #112]	; 0x70
 800c49a:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 800c49e:	ed97 6a1e 	vldr	s12, [r7, #120]	; 0x78
 800c4a2:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 800c4a6:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 800c4aa:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 800c4ae:	eef0 1a45 	vmov.f32	s3, s10
 800c4b2:	eeb0 2a65 	vmov.f32	s4, s11
 800c4b6:	eef0 2a46 	vmov.f32	s5, s12
 800c4ba:	eeb0 0a66 	vmov.f32	s0, s13
 800c4be:	eef0 0a47 	vmov.f32	s1, s14
 800c4c2:	eeb0 1a67 	vmov.f32	s2, s15
 800c4c6:	f7fe ff9d 	bl	800b404 <FusionVectorAdd>
 800c4ca:	eef0 6a40 	vmov.f32	s13, s0
 800c4ce:	eeb0 7a60 	vmov.f32	s14, s1
 800c4d2:	eef0 7a41 	vmov.f32	s15, s2
 800c4d6:	edc7 6a31 	vstr	s13, [r7, #196]	; 0xc4
 800c4da:	ed87 7a32 	vstr	s14, [r7, #200]	; 0xc8
 800c4de:	edc7 7a33 	vstr	s15, [r7, #204]	; 0xcc
 800c4e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4e4:	ed93 6a0e 	vldr	s12, [r3, #56]	; 0x38
 800c4e8:	edd7 6a31 	vldr	s13, [r7, #196]	; 0xc4
 800c4ec:	ed97 7a32 	vldr	s14, [r7, #200]	; 0xc8
 800c4f0:	edd7 7a33 	vldr	s15, [r7, #204]	; 0xcc
 800c4f4:	eef0 1a46 	vmov.f32	s3, s12
 800c4f8:	eeb0 0a66 	vmov.f32	s0, s13
 800c4fc:	eef0 0a47 	vmov.f32	s1, s14
 800c500:	eeb0 1a67 	vmov.f32	s2, s15
 800c504:	f7fe ffec 	bl	800b4e0 <FusionVectorMultiplyScalar>
 800c508:	eef0 6a40 	vmov.f32	s13, s0
 800c50c:	eeb0 7a60 	vmov.f32	s14, s1
 800c510:	eef0 7a41 	vmov.f32	s15, s2
 800c514:	edc7 6a34 	vstr	s13, [r7, #208]	; 0xd0
 800c518:	ed87 7a35 	vstr	s14, [r7, #212]	; 0xd4
 800c51c:	edc7 7a36 	vstr	s15, [r7, #216]	; 0xd8
 800c520:	ed97 5a34 	vldr	s10, [r7, #208]	; 0xd0
 800c524:	edd7 5a35 	vldr	s11, [r7, #212]	; 0xd4
 800c528:	ed97 6a36 	vldr	s12, [r7, #216]	; 0xd8
 800c52c:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 800c530:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800c534:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800c538:	eef0 1a45 	vmov.f32	s3, s10
 800c53c:	eeb0 2a65 	vmov.f32	s4, s11
 800c540:	eef0 2a46 	vmov.f32	s5, s12
 800c544:	eeb0 0a66 	vmov.f32	s0, s13
 800c548:	eef0 0a47 	vmov.f32	s1, s14
 800c54c:	eeb0 1a67 	vmov.f32	s2, s15
 800c550:	f7fe ff58 	bl	800b404 <FusionVectorAdd>
 800c554:	eef0 6a40 	vmov.f32	s13, s0
 800c558:	eeb0 7a60 	vmov.f32	s14, s1
 800c55c:	eef0 7a41 	vmov.f32	s15, s2
 800c560:	edc7 6a13 	vstr	s13, [r7, #76]	; 0x4c
 800c564:	ed87 7a14 	vstr	s14, [r7, #80]	; 0x50
 800c568:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

    // Integrate rate of change of quaternion
    ahrs->quaternion = FusionQuaternionAdd(ahrs->quaternion, FusionQuaternionMultiplyVector(ahrs->quaternion, FusionVectorMultiplyScalar(adjustedHalfGyroscope, deltaTime)));
 800c56c:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 800c570:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800c574:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800c578:	edd7 1a01 	vldr	s3, [r7, #4]
 800c57c:	eeb0 0a66 	vmov.f32	s0, s13
 800c580:	eef0 0a47 	vmov.f32	s1, s14
 800c584:	eeb0 1a67 	vmov.f32	s2, s15
 800c588:	f7fe ffaa 	bl	800b4e0 <FusionVectorMultiplyScalar>
 800c58c:	eef0 6a40 	vmov.f32	s13, s0
 800c590:	eeb0 7a60 	vmov.f32	s14, s1
 800c594:	eef0 7a41 	vmov.f32	s15, s2
 800c598:	edc7 6a37 	vstr	s13, [r7, #220]	; 0xdc
 800c59c:	ed87 7a38 	vstr	s14, [r7, #224]	; 0xe0
 800c5a0:	edc7 7a39 	vstr	s15, [r7, #228]	; 0xe4
 800c5a4:	edd7 4a37 	vldr	s9, [r7, #220]	; 0xdc
 800c5a8:	ed97 5a38 	vldr	s10, [r7, #224]	; 0xe0
 800c5ac:	edd7 5a39 	vldr	s11, [r7, #228]	; 0xe4
 800c5b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5b2:	ed93 6a06 	vldr	s12, [r3, #24]
 800c5b6:	edd3 6a07 	vldr	s13, [r3, #28]
 800c5ba:	ed93 7a08 	vldr	s14, [r3, #32]
 800c5be:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800c5c2:	eeb0 2a64 	vmov.f32	s4, s9
 800c5c6:	eef0 2a45 	vmov.f32	s5, s10
 800c5ca:	eeb0 3a65 	vmov.f32	s6, s11
 800c5ce:	eeb0 0a46 	vmov.f32	s0, s12
 800c5d2:	eef0 0a66 	vmov.f32	s1, s13
 800c5d6:	eeb0 1a47 	vmov.f32	s2, s14
 800c5da:	eef0 1a67 	vmov.f32	s3, s15
 800c5de:	f7ff fa8e 	bl	800bafe <FusionQuaternionMultiplyVector>
 800c5e2:	eeb0 6a40 	vmov.f32	s12, s0
 800c5e6:	eef0 6a60 	vmov.f32	s13, s1
 800c5ea:	eeb0 7a41 	vmov.f32	s14, s2
 800c5ee:	eef0 7a61 	vmov.f32	s15, s3
 800c5f2:	ed87 6a3a 	vstr	s12, [r7, #232]	; 0xe8
 800c5f6:	edc7 6a3b 	vstr	s13, [r7, #236]	; 0xec
 800c5fa:	ed87 7a3c 	vstr	s14, [r7, #240]	; 0xf0
 800c5fe:	edc7 7a3d 	vstr	s15, [r7, #244]	; 0xf4
 800c602:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 800c604:	ed97 4a3a 	vldr	s8, [r7, #232]	; 0xe8
 800c608:	edd7 4a3b 	vldr	s9, [r7, #236]	; 0xec
 800c60c:	ed97 5a3c 	vldr	s10, [r7, #240]	; 0xf0
 800c610:	edd7 5a3d 	vldr	s11, [r7, #244]	; 0xf4
 800c614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c616:	ed93 6a06 	vldr	s12, [r3, #24]
 800c61a:	edd3 6a07 	vldr	s13, [r3, #28]
 800c61e:	ed93 7a08 	vldr	s14, [r3, #32]
 800c622:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800c626:	eeb0 2a44 	vmov.f32	s4, s8
 800c62a:	eef0 2a64 	vmov.f32	s5, s9
 800c62e:	eeb0 3a45 	vmov.f32	s6, s10
 800c632:	eef0 3a65 	vmov.f32	s7, s11
 800c636:	eeb0 0a46 	vmov.f32	s0, s12
 800c63a:	eef0 0a66 	vmov.f32	s1, s13
 800c63e:	eeb0 1a47 	vmov.f32	s2, s14
 800c642:	eef0 1a67 	vmov.f32	s3, s15
 800c646:	f7ff f936 	bl	800b8b6 <FusionQuaternionAdd>
 800c64a:	eeb0 6a40 	vmov.f32	s12, s0
 800c64e:	eef0 6a60 	vmov.f32	s13, s1
 800c652:	eeb0 7a41 	vmov.f32	s14, s2
 800c656:	eef0 7a61 	vmov.f32	s15, s3
 800c65a:	ed84 6a06 	vstr	s12, [r4, #24]
 800c65e:	edc4 6a07 	vstr	s13, [r4, #28]
 800c662:	ed84 7a08 	vstr	s14, [r4, #32]
 800c666:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24

    // Normalise quaternion
    ahrs->quaternion = FusionQuaternionNormalise(ahrs->quaternion);
 800c66a:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 800c66c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c66e:	ed93 6a06 	vldr	s12, [r3, #24]
 800c672:	edd3 6a07 	vldr	s13, [r3, #28]
 800c676:	ed93 7a08 	vldr	s14, [r3, #32]
 800c67a:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800c67e:	eeb0 0a46 	vmov.f32	s0, s12
 800c682:	eef0 0a66 	vmov.f32	s1, s13
 800c686:	eeb0 1a47 	vmov.f32	s2, s14
 800c68a:	eef0 1a67 	vmov.f32	s3, s15
 800c68e:	f7ff fad6 	bl	800bc3e <FusionQuaternionNormalise>
 800c692:	eeb0 6a40 	vmov.f32	s12, s0
 800c696:	eef0 6a60 	vmov.f32	s13, s1
 800c69a:	eeb0 7a41 	vmov.f32	s14, s2
 800c69e:	eef0 7a61 	vmov.f32	s15, s3
 800c6a2:	ed84 6a06 	vstr	s12, [r4, #24]
 800c6a6:	edc4 6a07 	vstr	s13, [r4, #28]
 800c6aa:	ed84 7a08 	vstr	s14, [r4, #32]
 800c6ae:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
#undef Q
}
 800c6b2:	bf00      	nop
 800c6b4:	37fc      	adds	r7, #252	; 0xfc
 800c6b6:	46bd      	mov	sp, r7
 800c6b8:	bd90      	pop	{r4, r7, pc}

0800c6ba <HalfGravity>:
/**
 * @brief Returns the direction of gravity scaled by 0.5.
 * @param ahrs AHRS algorithm structure.
 * @return Direction of gravity scaled by 0.5.
 */
static inline FusionVector HalfGravity(const FusionAhrs *const ahrs) {
 800c6ba:	b480      	push	{r7}
 800c6bc:	b093      	sub	sp, #76	; 0x4c
 800c6be:	af00      	add	r7, sp, #0
 800c6c0:	6178      	str	r0, [r7, #20]
#define Q ahrs->quaternion.element
    switch (ahrs->settings.convention) {
 800c6c2:	697b      	ldr	r3, [r7, #20]
 800c6c4:	781b      	ldrb	r3, [r3, #0]
 800c6c6:	2b01      	cmp	r3, #1
 800c6c8:	dc02      	bgt.n	800c6d0 <HalfGravity+0x16>
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	da03      	bge.n	800c6d6 <HalfGravity+0x1c>
 800c6ce:	e094      	b.n	800c7fa <HalfGravity+0x140>
 800c6d0:	2b02      	cmp	r3, #2
 800c6d2:	d048      	beq.n	800c766 <HalfGravity+0xac>
 800c6d4:	e091      	b.n	800c7fa <HalfGravity+0x140>
        case FusionConventionNwu:
        case FusionConventionEnu: {
            const FusionVector halfGravity = {.axis = {
                    .x = Q.x * Q.z - Q.w * Q.y,
 800c6d6:	697b      	ldr	r3, [r7, #20]
 800c6d8:	ed93 7a07 	vldr	s14, [r3, #28]
 800c6dc:	697b      	ldr	r3, [r7, #20]
 800c6de:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800c6e2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c6e6:	697b      	ldr	r3, [r7, #20]
 800c6e8:	edd3 6a06 	vldr	s13, [r3, #24]
 800c6ec:	697b      	ldr	r3, [r7, #20]
 800c6ee:	edd3 7a08 	vldr	s15, [r3, #32]
 800c6f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c6f6:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfGravity = {.axis = {
 800c6fa:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                    .y = Q.y * Q.z + Q.w * Q.x,
 800c6fe:	697b      	ldr	r3, [r7, #20]
 800c700:	ed93 7a08 	vldr	s14, [r3, #32]
 800c704:	697b      	ldr	r3, [r7, #20]
 800c706:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800c70a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c70e:	697b      	ldr	r3, [r7, #20]
 800c710:	edd3 6a06 	vldr	s13, [r3, #24]
 800c714:	697b      	ldr	r3, [r7, #20]
 800c716:	edd3 7a07 	vldr	s15, [r3, #28]
 800c71a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c71e:	ee77 7a27 	vadd.f32	s15, s14, s15
            const FusionVector halfGravity = {.axis = {
 800c722:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
                    .z = Q.w * Q.w - 0.5f + Q.z * Q.z,
 800c726:	697b      	ldr	r3, [r7, #20]
 800c728:	ed93 7a06 	vldr	s14, [r3, #24]
 800c72c:	697b      	ldr	r3, [r7, #20]
 800c72e:	edd3 7a06 	vldr	s15, [r3, #24]
 800c732:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c736:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800c73a:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800c73e:	697b      	ldr	r3, [r7, #20]
 800c740:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 800c744:	697b      	ldr	r3, [r7, #20]
 800c746:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800c74a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c74e:	ee77 7a27 	vadd.f32	s15, s14, s15
            const FusionVector halfGravity = {.axis = {
 800c752:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            }}; // third column of transposed rotation matrix scaled by 0.5
            return halfGravity;
 800c756:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800c75a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800c75e:	ca07      	ldmia	r2, {r0, r1, r2}
 800c760:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800c764:	e052      	b.n	800c80c <HalfGravity+0x152>
        }
        case FusionConventionNed: {
            const FusionVector halfGravity = {.axis = {
                    .x = Q.w * Q.y - Q.x * Q.z,
 800c766:	697b      	ldr	r3, [r7, #20]
 800c768:	ed93 7a06 	vldr	s14, [r3, #24]
 800c76c:	697b      	ldr	r3, [r7, #20]
 800c76e:	edd3 7a08 	vldr	s15, [r3, #32]
 800c772:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c776:	697b      	ldr	r3, [r7, #20]
 800c778:	edd3 6a07 	vldr	s13, [r3, #28]
 800c77c:	697b      	ldr	r3, [r7, #20]
 800c77e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800c782:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c786:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfGravity = {.axis = {
 800c78a:	edc7 7a06 	vstr	s15, [r7, #24]
                    .y = -1.0f * (Q.y * Q.z + Q.w * Q.x),
 800c78e:	697b      	ldr	r3, [r7, #20]
 800c790:	ed93 7a08 	vldr	s14, [r3, #32]
 800c794:	697b      	ldr	r3, [r7, #20]
 800c796:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800c79a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c79e:	697b      	ldr	r3, [r7, #20]
 800c7a0:	edd3 6a06 	vldr	s13, [r3, #24]
 800c7a4:	697b      	ldr	r3, [r7, #20]
 800c7a6:	edd3 7a07 	vldr	s15, [r3, #28]
 800c7aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c7ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c7b2:	eef1 7a67 	vneg.f32	s15, s15
            const FusionVector halfGravity = {.axis = {
 800c7b6:	edc7 7a07 	vstr	s15, [r7, #28]
                    .z = 0.5f - Q.w * Q.w - Q.z * Q.z,
 800c7ba:	697b      	ldr	r3, [r7, #20]
 800c7bc:	ed93 7a06 	vldr	s14, [r3, #24]
 800c7c0:	697b      	ldr	r3, [r7, #20]
 800c7c2:	edd3 7a06 	vldr	s15, [r3, #24]
 800c7c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c7ca:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800c7ce:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c7d2:	697b      	ldr	r3, [r7, #20]
 800c7d4:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 800c7d8:	697b      	ldr	r3, [r7, #20]
 800c7da:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800c7de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c7e2:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfGravity = {.axis = {
 800c7e6:	edc7 7a08 	vstr	s15, [r7, #32]
            }}; // third column of transposed rotation matrix scaled by -0.5
            return halfGravity;
 800c7ea:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800c7ee:	f107 0218 	add.w	r2, r7, #24
 800c7f2:	ca07      	ldmia	r2, {r0, r1, r2}
 800c7f4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800c7f8:	e008      	b.n	800c80c <HalfGravity+0x152>
        }
    }
    return FUSION_VECTOR_ZERO; // avoid compiler warning
 800c7fa:	f04f 0300 	mov.w	r3, #0
 800c7fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c800:	f04f 0300 	mov.w	r3, #0
 800c804:	643b      	str	r3, [r7, #64]	; 0x40
 800c806:	f04f 0300 	mov.w	r3, #0
 800c80a:	647b      	str	r3, [r7, #68]	; 0x44
#undef Q
}
 800c80c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c80e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c810:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c812:	ee06 1a90 	vmov	s13, r1
 800c816:	ee07 2a10 	vmov	s14, r2
 800c81a:	ee07 3a90 	vmov	s15, r3
 800c81e:	eeb0 0a66 	vmov.f32	s0, s13
 800c822:	eef0 0a47 	vmov.f32	s1, s14
 800c826:	eeb0 1a67 	vmov.f32	s2, s15
 800c82a:	374c      	adds	r7, #76	; 0x4c
 800c82c:	46bd      	mov	sp, r7
 800c82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c832:	4770      	bx	lr

0800c834 <HalfMagnetic>:
/**
 * @brief Returns the direction of the magnetic field scaled by 0.5.
 * @param ahrs AHRS algorithm structure.
 * @return Direction of the magnetic field scaled by 0.5.
 */
static inline FusionVector HalfMagnetic(const FusionAhrs *const ahrs) {
 800c834:	b480      	push	{r7}
 800c836:	b097      	sub	sp, #92	; 0x5c
 800c838:	af00      	add	r7, sp, #0
 800c83a:	6178      	str	r0, [r7, #20]
#define Q ahrs->quaternion.element
    switch (ahrs->settings.convention) {
 800c83c:	697b      	ldr	r3, [r7, #20]
 800c83e:	781b      	ldrb	r3, [r3, #0]
 800c840:	2b02      	cmp	r3, #2
 800c842:	f000 809a 	beq.w	800c97a <HalfMagnetic+0x146>
 800c846:	2b02      	cmp	r3, #2
 800c848:	f300 80e1 	bgt.w	800ca0e <HalfMagnetic+0x1da>
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d002      	beq.n	800c856 <HalfMagnetic+0x22>
 800c850:	2b01      	cmp	r3, #1
 800c852:	d048      	beq.n	800c8e6 <HalfMagnetic+0xb2>
 800c854:	e0db      	b.n	800ca0e <HalfMagnetic+0x1da>
        case FusionConventionNwu: {
            const FusionVector halfMagnetic = {.axis = {
                    .x = Q.x * Q.y + Q.w * Q.z,
 800c856:	697b      	ldr	r3, [r7, #20]
 800c858:	ed93 7a07 	vldr	s14, [r3, #28]
 800c85c:	697b      	ldr	r3, [r7, #20]
 800c85e:	edd3 7a08 	vldr	s15, [r3, #32]
 800c862:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c866:	697b      	ldr	r3, [r7, #20]
 800c868:	edd3 6a06 	vldr	s13, [r3, #24]
 800c86c:	697b      	ldr	r3, [r7, #20]
 800c86e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800c872:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c876:	ee77 7a27 	vadd.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 800c87a:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
                    .y = Q.w * Q.w - 0.5f + Q.y * Q.y,
 800c87e:	697b      	ldr	r3, [r7, #20]
 800c880:	ed93 7a06 	vldr	s14, [r3, #24]
 800c884:	697b      	ldr	r3, [r7, #20]
 800c886:	edd3 7a06 	vldr	s15, [r3, #24]
 800c88a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c88e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800c892:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800c896:	697b      	ldr	r3, [r7, #20]
 800c898:	edd3 6a08 	vldr	s13, [r3, #32]
 800c89c:	697b      	ldr	r3, [r7, #20]
 800c89e:	edd3 7a08 	vldr	s15, [r3, #32]
 800c8a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c8a6:	ee77 7a27 	vadd.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 800c8aa:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
                    .z = Q.y * Q.z - Q.w * Q.x,
 800c8ae:	697b      	ldr	r3, [r7, #20]
 800c8b0:	ed93 7a08 	vldr	s14, [r3, #32]
 800c8b4:	697b      	ldr	r3, [r7, #20]
 800c8b6:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800c8ba:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c8be:	697b      	ldr	r3, [r7, #20]
 800c8c0:	edd3 6a06 	vldr	s13, [r3, #24]
 800c8c4:	697b      	ldr	r3, [r7, #20]
 800c8c6:	edd3 7a07 	vldr	s15, [r3, #28]
 800c8ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c8ce:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 800c8d2:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
            }}; // second column of transposed rotation matrix scaled by 0.5
            return halfMagnetic;
 800c8d6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800c8da:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800c8de:	ca07      	ldmia	r2, {r0, r1, r2}
 800c8e0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800c8e4:	e09c      	b.n	800ca20 <HalfMagnetic+0x1ec>
        }
        case FusionConventionEnu: {
            const FusionVector halfMagnetic = {.axis = {
                    .x = 0.5f - Q.w * Q.w - Q.x * Q.x,
 800c8e6:	697b      	ldr	r3, [r7, #20]
 800c8e8:	ed93 7a06 	vldr	s14, [r3, #24]
 800c8ec:	697b      	ldr	r3, [r7, #20]
 800c8ee:	edd3 7a06 	vldr	s15, [r3, #24]
 800c8f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c8f6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800c8fa:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c8fe:	697b      	ldr	r3, [r7, #20]
 800c900:	edd3 6a07 	vldr	s13, [r3, #28]
 800c904:	697b      	ldr	r3, [r7, #20]
 800c906:	edd3 7a07 	vldr	s15, [r3, #28]
 800c90a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c90e:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 800c912:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
                    .y = Q.w * Q.z - Q.x * Q.y,
 800c916:	697b      	ldr	r3, [r7, #20]
 800c918:	ed93 7a06 	vldr	s14, [r3, #24]
 800c91c:	697b      	ldr	r3, [r7, #20]
 800c91e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800c922:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c926:	697b      	ldr	r3, [r7, #20]
 800c928:	edd3 6a07 	vldr	s13, [r3, #28]
 800c92c:	697b      	ldr	r3, [r7, #20]
 800c92e:	edd3 7a08 	vldr	s15, [r3, #32]
 800c932:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c936:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 800c93a:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
                    .z = -1.0f * (Q.x * Q.z + Q.w * Q.y),
 800c93e:	697b      	ldr	r3, [r7, #20]
 800c940:	ed93 7a07 	vldr	s14, [r3, #28]
 800c944:	697b      	ldr	r3, [r7, #20]
 800c946:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800c94a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c94e:	697b      	ldr	r3, [r7, #20]
 800c950:	edd3 6a06 	vldr	s13, [r3, #24]
 800c954:	697b      	ldr	r3, [r7, #20]
 800c956:	edd3 7a08 	vldr	s15, [r3, #32]
 800c95a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c95e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c962:	eef1 7a67 	vneg.f32	s15, s15
            const FusionVector halfMagnetic = {.axis = {
 800c966:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
            }}; // first column of transposed rotation matrix scaled by -0.5
            return halfMagnetic;
 800c96a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800c96e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800c972:	ca07      	ldmia	r2, {r0, r1, r2}
 800c974:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800c978:	e052      	b.n	800ca20 <HalfMagnetic+0x1ec>
        }
        case FusionConventionNed: {
            const FusionVector halfMagnetic = {.axis = {
                    .x = -1.0f * (Q.x * Q.y + Q.w * Q.z),
 800c97a:	697b      	ldr	r3, [r7, #20]
 800c97c:	ed93 7a07 	vldr	s14, [r3, #28]
 800c980:	697b      	ldr	r3, [r7, #20]
 800c982:	edd3 7a08 	vldr	s15, [r3, #32]
 800c986:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c98a:	697b      	ldr	r3, [r7, #20]
 800c98c:	edd3 6a06 	vldr	s13, [r3, #24]
 800c990:	697b      	ldr	r3, [r7, #20]
 800c992:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800c996:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c99a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c99e:	eef1 7a67 	vneg.f32	s15, s15
            const FusionVector halfMagnetic = {.axis = {
 800c9a2:	edc7 7a07 	vstr	s15, [r7, #28]
                    .y = 0.5f - Q.w * Q.w - Q.y * Q.y,
 800c9a6:	697b      	ldr	r3, [r7, #20]
 800c9a8:	ed93 7a06 	vldr	s14, [r3, #24]
 800c9ac:	697b      	ldr	r3, [r7, #20]
 800c9ae:	edd3 7a06 	vldr	s15, [r3, #24]
 800c9b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c9b6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800c9ba:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c9be:	697b      	ldr	r3, [r7, #20]
 800c9c0:	edd3 6a08 	vldr	s13, [r3, #32]
 800c9c4:	697b      	ldr	r3, [r7, #20]
 800c9c6:	edd3 7a08 	vldr	s15, [r3, #32]
 800c9ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c9ce:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 800c9d2:	edc7 7a08 	vstr	s15, [r7, #32]
                    .z = Q.w * Q.x - Q.y * Q.z,
 800c9d6:	697b      	ldr	r3, [r7, #20]
 800c9d8:	ed93 7a06 	vldr	s14, [r3, #24]
 800c9dc:	697b      	ldr	r3, [r7, #20]
 800c9de:	edd3 7a07 	vldr	s15, [r3, #28]
 800c9e2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c9e6:	697b      	ldr	r3, [r7, #20]
 800c9e8:	edd3 6a08 	vldr	s13, [r3, #32]
 800c9ec:	697b      	ldr	r3, [r7, #20]
 800c9ee:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800c9f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c9f6:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 800c9fa:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            }}; // second column of transposed rotation matrix scaled by -0.5
            return halfMagnetic;
 800c9fe:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800ca02:	f107 021c 	add.w	r2, r7, #28
 800ca06:	ca07      	ldmia	r2, {r0, r1, r2}
 800ca08:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800ca0c:	e008      	b.n	800ca20 <HalfMagnetic+0x1ec>
        }
    }
    return FUSION_VECTOR_ZERO; // avoid compiler warning
 800ca0e:	f04f 0300 	mov.w	r3, #0
 800ca12:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ca14:	f04f 0300 	mov.w	r3, #0
 800ca18:	653b      	str	r3, [r7, #80]	; 0x50
 800ca1a:	f04f 0300 	mov.w	r3, #0
 800ca1e:	657b      	str	r3, [r7, #84]	; 0x54
#undef Q
}
 800ca20:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800ca22:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ca24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ca26:	ee06 1a90 	vmov	s13, r1
 800ca2a:	ee07 2a10 	vmov	s14, r2
 800ca2e:	ee07 3a90 	vmov	s15, r3
 800ca32:	eeb0 0a66 	vmov.f32	s0, s13
 800ca36:	eef0 0a47 	vmov.f32	s1, s14
 800ca3a:	eeb0 1a67 	vmov.f32	s2, s15
 800ca3e:	375c      	adds	r7, #92	; 0x5c
 800ca40:	46bd      	mov	sp, r7
 800ca42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca46:	4770      	bx	lr

0800ca48 <Feedback>:
 * @brief Returns the feedback.
 * @param sensor Sensor.
 * @param reference Reference.
 * @return Feedback.
 */
static inline FusionVector Feedback(const FusionVector sensor, const FusionVector reference) {
 800ca48:	b580      	push	{r7, lr}
 800ca4a:	b090      	sub	sp, #64	; 0x40
 800ca4c:	af00      	add	r7, sp, #0
 800ca4e:	eeb0 5a40 	vmov.f32	s10, s0
 800ca52:	eef0 5a60 	vmov.f32	s11, s1
 800ca56:	eeb0 6a41 	vmov.f32	s12, s2
 800ca5a:	eef0 6a61 	vmov.f32	s13, s3
 800ca5e:	eeb0 7a42 	vmov.f32	s14, s4
 800ca62:	eef0 7a62 	vmov.f32	s15, s5
 800ca66:	ed87 5a07 	vstr	s10, [r7, #28]
 800ca6a:	edc7 5a08 	vstr	s11, [r7, #32]
 800ca6e:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 800ca72:	edc7 6a04 	vstr	s13, [r7, #16]
 800ca76:	ed87 7a05 	vstr	s14, [r7, #20]
 800ca7a:	edc7 7a06 	vstr	s15, [r7, #24]
    if (FusionVectorDotProduct(sensor, reference) < 0.0f) { // if error is >90 degrees
 800ca7e:	ed97 5a04 	vldr	s10, [r7, #16]
 800ca82:	edd7 5a05 	vldr	s11, [r7, #20]
 800ca86:	ed97 6a06 	vldr	s12, [r7, #24]
 800ca8a:	edd7 6a07 	vldr	s13, [r7, #28]
 800ca8e:	ed97 7a08 	vldr	s14, [r7, #32]
 800ca92:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800ca96:	eef0 1a45 	vmov.f32	s3, s10
 800ca9a:	eeb0 2a65 	vmov.f32	s4, s11
 800ca9e:	eef0 2a46 	vmov.f32	s5, s12
 800caa2:	eeb0 0a66 	vmov.f32	s0, s13
 800caa6:	eef0 0a47 	vmov.f32	s1, s14
 800caaa:	eeb0 1a67 	vmov.f32	s2, s15
 800caae:	f7fe fe0f 	bl	800b6d0 <FusionVectorDotProduct>
 800cab2:	eef0 7a40 	vmov.f32	s15, s0
 800cab6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800caba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cabe:	d540      	bpl.n	800cb42 <Feedback+0xfa>
        return FusionVectorNormalise(FusionVectorCrossProduct(sensor, reference));
 800cac0:	ed97 5a04 	vldr	s10, [r7, #16]
 800cac4:	edd7 5a05 	vldr	s11, [r7, #20]
 800cac8:	ed97 6a06 	vldr	s12, [r7, #24]
 800cacc:	edd7 6a07 	vldr	s13, [r7, #28]
 800cad0:	ed97 7a08 	vldr	s14, [r7, #32]
 800cad4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800cad8:	eef0 1a45 	vmov.f32	s3, s10
 800cadc:	eeb0 2a65 	vmov.f32	s4, s11
 800cae0:	eef0 2a46 	vmov.f32	s5, s12
 800cae4:	eeb0 0a66 	vmov.f32	s0, s13
 800cae8:	eef0 0a47 	vmov.f32	s1, s14
 800caec:	eeb0 1a67 	vmov.f32	s2, s15
 800caf0:	f7fe fd88 	bl	800b604 <FusionVectorCrossProduct>
 800caf4:	eef0 6a40 	vmov.f32	s13, s0
 800caf8:	eeb0 7a60 	vmov.f32	s14, s1
 800cafc:	eef0 7a41 	vmov.f32	s15, s2
 800cb00:	edc7 6a0d 	vstr	s13, [r7, #52]	; 0x34
 800cb04:	ed87 7a0e 	vstr	s14, [r7, #56]	; 0x38
 800cb08:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
 800cb0c:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 800cb10:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800cb14:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800cb18:	eeb0 0a66 	vmov.f32	s0, s13
 800cb1c:	eef0 0a47 	vmov.f32	s1, s14
 800cb20:	eeb0 1a67 	vmov.f32	s2, s15
 800cb24:	f7fe fe74 	bl	800b810 <FusionVectorNormalise>
 800cb28:	eef0 6a40 	vmov.f32	s13, s0
 800cb2c:	eeb0 7a60 	vmov.f32	s14, s1
 800cb30:	eef0 7a41 	vmov.f32	s15, s2
 800cb34:	edc7 6a0a 	vstr	s13, [r7, #40]	; 0x28
 800cb38:	ed87 7a0b 	vstr	s14, [r7, #44]	; 0x2c
 800cb3c:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 800cb40:	e025      	b.n	800cb8e <Feedback+0x146>
    }
    return FusionVectorCrossProduct(sensor, reference);
 800cb42:	ed97 5a04 	vldr	s10, [r7, #16]
 800cb46:	edd7 5a05 	vldr	s11, [r7, #20]
 800cb4a:	ed97 6a06 	vldr	s12, [r7, #24]
 800cb4e:	edd7 6a07 	vldr	s13, [r7, #28]
 800cb52:	ed97 7a08 	vldr	s14, [r7, #32]
 800cb56:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800cb5a:	eef0 1a45 	vmov.f32	s3, s10
 800cb5e:	eeb0 2a65 	vmov.f32	s4, s11
 800cb62:	eef0 2a46 	vmov.f32	s5, s12
 800cb66:	eeb0 0a66 	vmov.f32	s0, s13
 800cb6a:	eef0 0a47 	vmov.f32	s1, s14
 800cb6e:	eeb0 1a67 	vmov.f32	s2, s15
 800cb72:	f7fe fd47 	bl	800b604 <FusionVectorCrossProduct>
 800cb76:	eef0 6a40 	vmov.f32	s13, s0
 800cb7a:	eeb0 7a60 	vmov.f32	s14, s1
 800cb7e:	eef0 7a41 	vmov.f32	s15, s2
 800cb82:	edc7 6a0a 	vstr	s13, [r7, #40]	; 0x28
 800cb86:	ed87 7a0b 	vstr	s14, [r7, #44]	; 0x2c
 800cb8a:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
}
 800cb8e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cb90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cb92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb94:	ee06 1a90 	vmov	s13, r1
 800cb98:	ee07 2a10 	vmov	s14, r2
 800cb9c:	ee07 3a90 	vmov	s15, r3
 800cba0:	eeb0 0a66 	vmov.f32	s0, s13
 800cba4:	eef0 0a47 	vmov.f32	s1, s14
 800cba8:	eeb0 1a67 	vmov.f32	s2, s15
 800cbac:	3740      	adds	r7, #64	; 0x40
 800cbae:	46bd      	mov	sp, r7
 800cbb0:	bd80      	pop	{r7, pc}

0800cbb2 <Clamp>:
 * @param value Value.
 * @param min Minimum value.
 * @param max Maximum value.
 * @return Value limited to maximum and minimum.
 */
static inline int Clamp(const int value, const int min, const int max) {
 800cbb2:	b480      	push	{r7}
 800cbb4:	b085      	sub	sp, #20
 800cbb6:	af00      	add	r7, sp, #0
 800cbb8:	60f8      	str	r0, [r7, #12]
 800cbba:	60b9      	str	r1, [r7, #8]
 800cbbc:	607a      	str	r2, [r7, #4]
    if (value < min) {
 800cbbe:	68fa      	ldr	r2, [r7, #12]
 800cbc0:	68bb      	ldr	r3, [r7, #8]
 800cbc2:	429a      	cmp	r2, r3
 800cbc4:	da01      	bge.n	800cbca <Clamp+0x18>
        return min;
 800cbc6:	68bb      	ldr	r3, [r7, #8]
 800cbc8:	e006      	b.n	800cbd8 <Clamp+0x26>
    }
    if (value > max) {
 800cbca:	68fa      	ldr	r2, [r7, #12]
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	429a      	cmp	r2, r3
 800cbd0:	dd01      	ble.n	800cbd6 <Clamp+0x24>
        return max;
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	e000      	b.n	800cbd8 <Clamp+0x26>
    }
    return value;
 800cbd6:	68fb      	ldr	r3, [r7, #12]
}
 800cbd8:	4618      	mov	r0, r3
 800cbda:	3714      	adds	r7, #20
 800cbdc:	46bd      	mov	sp, r7
 800cbde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbe2:	4770      	bx	lr

0800cbe4 <FusionAhrsUpdateNoMagnetometer>:
 * @param ahrs AHRS algorithm structure.
 * @param gyroscope Gyroscope measurement in degrees per second.
 * @param accelerometer Accelerometer measurement in g.
 * @param deltaTime Delta time in seconds.
 */
void FusionAhrsUpdateNoMagnetometer(FusionAhrs *const ahrs, const FusionVector gyroscope, const FusionVector accelerometer, const float deltaTime) {
 800cbe4:	b580      	push	{r7, lr}
 800cbe6:	b08c      	sub	sp, #48	; 0x30
 800cbe8:	af00      	add	r7, sp, #0
 800cbea:	61f8      	str	r0, [r7, #28]
 800cbec:	eeb0 5a40 	vmov.f32	s10, s0
 800cbf0:	eef0 5a60 	vmov.f32	s11, s1
 800cbf4:	eeb0 6a41 	vmov.f32	s12, s2
 800cbf8:	eef0 6a61 	vmov.f32	s13, s3
 800cbfc:	eeb0 7a42 	vmov.f32	s14, s4
 800cc00:	eef0 7a62 	vmov.f32	s15, s5
 800cc04:	ed87 3a00 	vstr	s6, [r7]
 800cc08:	ed87 5a04 	vstr	s10, [r7, #16]
 800cc0c:	edc7 5a05 	vstr	s11, [r7, #20]
 800cc10:	ed87 6a06 	vstr	s12, [r7, #24]
 800cc14:	edc7 6a01 	vstr	s13, [r7, #4]
 800cc18:	ed87 7a02 	vstr	s14, [r7, #8]
 800cc1c:	edc7 7a03 	vstr	s15, [r7, #12]

    // Update AHRS algorithm
    FusionAhrsUpdate(ahrs, gyroscope, accelerometer, FUSION_VECTOR_ZERO, deltaTime);
 800cc20:	f04f 0300 	mov.w	r3, #0
 800cc24:	627b      	str	r3, [r7, #36]	; 0x24
 800cc26:	f04f 0300 	mov.w	r3, #0
 800cc2a:	62bb      	str	r3, [r7, #40]	; 0x28
 800cc2c:	f04f 0300 	mov.w	r3, #0
 800cc30:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cc32:	ed97 3a09 	vldr	s6, [r7, #36]	; 0x24
 800cc36:	edd7 3a0a 	vldr	s7, [r7, #40]	; 0x28
 800cc3a:	ed97 4a0b 	vldr	s8, [r7, #44]	; 0x2c
 800cc3e:	ed97 5a01 	vldr	s10, [r7, #4]
 800cc42:	edd7 5a02 	vldr	s11, [r7, #8]
 800cc46:	ed97 6a03 	vldr	s12, [r7, #12]
 800cc4a:	edd7 6a04 	vldr	s13, [r7, #16]
 800cc4e:	ed97 7a05 	vldr	s14, [r7, #20]
 800cc52:	edd7 7a06 	vldr	s15, [r7, #24]
 800cc56:	edd7 4a00 	vldr	s9, [r7]
 800cc5a:	eef0 1a45 	vmov.f32	s3, s10
 800cc5e:	eeb0 2a65 	vmov.f32	s4, s11
 800cc62:	eef0 2a46 	vmov.f32	s5, s12
 800cc66:	eeb0 0a66 	vmov.f32	s0, s13
 800cc6a:	eef0 0a47 	vmov.f32	s1, s14
 800cc6e:	eeb0 1a67 	vmov.f32	s2, s15
 800cc72:	69f8      	ldr	r0, [r7, #28]
 800cc74:	f7ff f992 	bl	800bf9c <FusionAhrsUpdate>

    // Zero heading during initialisation
    if (ahrs->initialising == true) {
 800cc78:	69fb      	ldr	r3, [r7, #28]
 800cc7a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d004      	beq.n	800cc8c <FusionAhrsUpdateNoMagnetometer+0xa8>
        FusionAhrsSetHeading(ahrs, 0.0f);
 800cc82:	ed9f 0a04 	vldr	s0, [pc, #16]	; 800cc94 <FusionAhrsUpdateNoMagnetometer+0xb0>
 800cc86:	69f8      	ldr	r0, [r7, #28]
 800cc88:	f000 f829 	bl	800ccde <FusionAhrsSetHeading>
    }
}
 800cc8c:	bf00      	nop
 800cc8e:	3730      	adds	r7, #48	; 0x30
 800cc90:	46bd      	mov	sp, r7
 800cc92:	bd80      	pop	{r7, pc}
 800cc94:	00000000 	.word	0x00000000

0800cc98 <FusionAhrsGetQuaternion>:
/**
 * @brief Returns the quaternion describing the sensor relative to the Earth.
 * @param ahrs AHRS algorithm structure.
 * @return Quaternion describing the sensor relative to the Earth.
 */
FusionQuaternion FusionAhrsGetQuaternion(const FusionAhrs *const ahrs) {
 800cc98:	b490      	push	{r4, r7}
 800cc9a:	b08a      	sub	sp, #40	; 0x28
 800cc9c:	af00      	add	r7, sp, #0
 800cc9e:	6178      	str	r0, [r7, #20]
    return ahrs->quaternion;
 800cca0:	697b      	ldr	r3, [r7, #20]
 800cca2:	f107 0418 	add.w	r4, r7, #24
 800cca6:	3318      	adds	r3, #24
 800cca8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ccaa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800ccae:	69b8      	ldr	r0, [r7, #24]
 800ccb0:	69f9      	ldr	r1, [r7, #28]
 800ccb2:	6a3a      	ldr	r2, [r7, #32]
 800ccb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccb6:	ee06 0a10 	vmov	s12, r0
 800ccba:	ee06 1a90 	vmov	s13, r1
 800ccbe:	ee07 2a10 	vmov	s14, r2
 800ccc2:	ee07 3a90 	vmov	s15, r3
}
 800ccc6:	eeb0 0a46 	vmov.f32	s0, s12
 800ccca:	eef0 0a66 	vmov.f32	s1, s13
 800ccce:	eeb0 1a47 	vmov.f32	s2, s14
 800ccd2:	eef0 1a67 	vmov.f32	s3, s15
 800ccd6:	3728      	adds	r7, #40	; 0x28
 800ccd8:	46bd      	mov	sp, r7
 800ccda:	bc90      	pop	{r4, r7}
 800ccdc:	4770      	bx	lr

0800ccde <FusionAhrsSetHeading>:
 * algorithm.  This function can be used to reset drift in heading when the AHRS
 * algorithm is being used without a magnetometer.
 * @param ahrs AHRS algorithm structure.
 * @param heading Heading angle in degrees.
 */
void FusionAhrsSetHeading(FusionAhrs *const ahrs, const float heading) {
 800ccde:	b590      	push	{r4, r7, lr}
 800cce0:	b089      	sub	sp, #36	; 0x24
 800cce2:	af00      	add	r7, sp, #0
 800cce4:	6078      	str	r0, [r7, #4]
 800cce6:	ed87 0a00 	vstr	s0, [r7]
#define Q ahrs->quaternion.element
    const float yaw = atan2f(Q.w * Q.z + Q.x * Q.y, 0.5f - Q.y * Q.y - Q.z * Q.z);
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	ed93 7a06 	vldr	s14, [r3, #24]
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800ccf6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	edd3 6a07 	vldr	s13, [r3, #28]
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	edd3 7a08 	vldr	s15, [r3, #32]
 800cd06:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800cd0a:	ee37 6a27 	vadd.f32	s12, s14, s15
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	ed93 7a08 	vldr	s14, [r3, #32]
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	edd3 7a08 	vldr	s15, [r3, #32]
 800cd1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cd1e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800cd22:	ee37 7a67 	vsub.f32	s14, s14, s15
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800cd32:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800cd36:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cd3a:	eef0 0a67 	vmov.f32	s1, s15
 800cd3e:	eeb0 0a46 	vmov.f32	s0, s12
 800cd42:	f005 f96d 	bl	8012020 <atan2f>
 800cd46:	ed87 0a07 	vstr	s0, [r7, #28]
    const float halfYawMinusHeading = 0.5f * (yaw - FusionDegreesToRadians(heading));
 800cd4a:	ed97 0a00 	vldr	s0, [r7]
 800cd4e:	f7fe fae5 	bl	800b31c <FusionDegreesToRadians>
 800cd52:	eeb0 7a40 	vmov.f32	s14, s0
 800cd56:	edd7 7a07 	vldr	s15, [r7, #28]
 800cd5a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800cd5e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800cd62:	ee67 7a87 	vmul.f32	s15, s15, s14
 800cd66:	edc7 7a06 	vstr	s15, [r7, #24]
    const FusionQuaternion rotation = {.element = {
            .w = cosf(halfYawMinusHeading),
 800cd6a:	ed97 0a06 	vldr	s0, [r7, #24]
 800cd6e:	f005 f831 	bl	8011dd4 <cosf>
 800cd72:	eef0 7a40 	vmov.f32	s15, s0
    const FusionQuaternion rotation = {.element = {
 800cd76:	edc7 7a02 	vstr	s15, [r7, #8]
 800cd7a:	f04f 0300 	mov.w	r3, #0
 800cd7e:	60fb      	str	r3, [r7, #12]
 800cd80:	f04f 0300 	mov.w	r3, #0
 800cd84:	613b      	str	r3, [r7, #16]
            .x = 0.0f,
            .y = 0.0f,
            .z = -1.0f * sinf(halfYawMinusHeading),
 800cd86:	ed97 0a06 	vldr	s0, [r7, #24]
 800cd8a:	f005 f867 	bl	8011e5c <sinf>
 800cd8e:	eef0 7a40 	vmov.f32	s15, s0
 800cd92:	eef1 7a67 	vneg.f32	s15, s15
    const FusionQuaternion rotation = {.element = {
 800cd96:	edc7 7a05 	vstr	s15, [r7, #20]
    }};
    ahrs->quaternion = FusionQuaternionMultiply(rotation, ahrs->quaternion);
 800cd9a:	687c      	ldr	r4, [r7, #4]
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	ed93 4a06 	vldr	s8, [r3, #24]
 800cda2:	edd3 4a07 	vldr	s9, [r3, #28]
 800cda6:	ed93 5a08 	vldr	s10, [r3, #32]
 800cdaa:	edd3 5a09 	vldr	s11, [r3, #36]	; 0x24
 800cdae:	ed97 6a02 	vldr	s12, [r7, #8]
 800cdb2:	edd7 6a03 	vldr	s13, [r7, #12]
 800cdb6:	ed97 7a04 	vldr	s14, [r7, #16]
 800cdba:	edd7 7a05 	vldr	s15, [r7, #20]
 800cdbe:	eeb0 2a44 	vmov.f32	s4, s8
 800cdc2:	eef0 2a64 	vmov.f32	s5, s9
 800cdc6:	eeb0 3a45 	vmov.f32	s6, s10
 800cdca:	eef0 3a65 	vmov.f32	s7, s11
 800cdce:	eeb0 0a46 	vmov.f32	s0, s12
 800cdd2:	eef0 0a66 	vmov.f32	s1, s13
 800cdd6:	eeb0 1a47 	vmov.f32	s2, s14
 800cdda:	eef0 1a67 	vmov.f32	s3, s15
 800cdde:	f7fe fdcc 	bl	800b97a <FusionQuaternionMultiply>
 800cde2:	eeb0 6a40 	vmov.f32	s12, s0
 800cde6:	eef0 6a60 	vmov.f32	s13, s1
 800cdea:	eeb0 7a41 	vmov.f32	s14, s2
 800cdee:	eef0 7a61 	vmov.f32	s15, s3
 800cdf2:	ed84 6a06 	vstr	s12, [r4, #24]
 800cdf6:	edc4 6a07 	vstr	s13, [r4, #28]
 800cdfa:	ed84 7a08 	vstr	s14, [r4, #32]
 800cdfe:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
#undef Q
}
 800ce02:	bf00      	nop
 800ce04:	3724      	adds	r7, #36	; 0x24
 800ce06:	46bd      	mov	sp, r7
 800ce08:	bd90      	pop	{r4, r7, pc}

0800ce0a <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800ce0a:	b480      	push	{r7}
 800ce0c:	b085      	sub	sp, #20
 800ce0e:	af00      	add	r7, sp, #0
 800ce10:	4603      	mov	r3, r0
 800ce12:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800ce14:	2300      	movs	r3, #0
 800ce16:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800ce18:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ce1c:	2b84      	cmp	r3, #132	; 0x84
 800ce1e:	d005      	beq.n	800ce2c <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800ce20:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800ce24:	68fb      	ldr	r3, [r7, #12]
 800ce26:	4413      	add	r3, r2
 800ce28:	3303      	adds	r3, #3
 800ce2a:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800ce2c:	68fb      	ldr	r3, [r7, #12]
}
 800ce2e:	4618      	mov	r0, r3
 800ce30:	3714      	adds	r7, #20
 800ce32:	46bd      	mov	sp, r7
 800ce34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce38:	4770      	bx	lr

0800ce3a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800ce3a:	b580      	push	{r7, lr}
 800ce3c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800ce3e:	f000 ffb1 	bl	800dda4 <vTaskStartScheduler>
  
  return osOK;
 800ce42:	2300      	movs	r3, #0
}
 800ce44:	4618      	mov	r0, r3
 800ce46:	bd80      	pop	{r7, pc}

0800ce48 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800ce48:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ce4a:	b089      	sub	sp, #36	; 0x24
 800ce4c:	af04      	add	r7, sp, #16
 800ce4e:	6078      	str	r0, [r7, #4]
 800ce50:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	695b      	ldr	r3, [r3, #20]
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d020      	beq.n	800ce9c <osThreadCreate+0x54>
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	699b      	ldr	r3, [r3, #24]
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	d01c      	beq.n	800ce9c <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	685c      	ldr	r4, [r3, #4]
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	681d      	ldr	r5, [r3, #0]
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	691e      	ldr	r6, [r3, #16]
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800ce74:	4618      	mov	r0, r3
 800ce76:	f7ff ffc8 	bl	800ce0a <makeFreeRtosPriority>
 800ce7a:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	695b      	ldr	r3, [r3, #20]
 800ce80:	687a      	ldr	r2, [r7, #4]
 800ce82:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ce84:	9202      	str	r2, [sp, #8]
 800ce86:	9301      	str	r3, [sp, #4]
 800ce88:	9100      	str	r1, [sp, #0]
 800ce8a:	683b      	ldr	r3, [r7, #0]
 800ce8c:	4632      	mov	r2, r6
 800ce8e:	4629      	mov	r1, r5
 800ce90:	4620      	mov	r0, r4
 800ce92:	f000 fc9d 	bl	800d7d0 <xTaskCreateStatic>
 800ce96:	4603      	mov	r3, r0
 800ce98:	60fb      	str	r3, [r7, #12]
 800ce9a:	e01c      	b.n	800ced6 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	685c      	ldr	r4, [r3, #4]
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800cea8:	b29e      	uxth	r6, r3
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800ceb0:	4618      	mov	r0, r3
 800ceb2:	f7ff ffaa 	bl	800ce0a <makeFreeRtosPriority>
 800ceb6:	4602      	mov	r2, r0
 800ceb8:	f107 030c 	add.w	r3, r7, #12
 800cebc:	9301      	str	r3, [sp, #4]
 800cebe:	9200      	str	r2, [sp, #0]
 800cec0:	683b      	ldr	r3, [r7, #0]
 800cec2:	4632      	mov	r2, r6
 800cec4:	4629      	mov	r1, r5
 800cec6:	4620      	mov	r0, r4
 800cec8:	f000 fcdf 	bl	800d88a <xTaskCreate>
 800cecc:	4603      	mov	r3, r0
 800cece:	2b01      	cmp	r3, #1
 800ced0:	d001      	beq.n	800ced6 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800ced2:	2300      	movs	r3, #0
 800ced4:	e000      	b.n	800ced8 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800ced6:	68fb      	ldr	r3, [r7, #12]
}
 800ced8:	4618      	mov	r0, r3
 800ceda:	3714      	adds	r7, #20
 800cedc:	46bd      	mov	sp, r7
 800cede:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800cee0 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800cee0:	b580      	push	{r7, lr}
 800cee2:	b084      	sub	sp, #16
 800cee4:	af00      	add	r7, sp, #0
 800cee6:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800ceec:	68fb      	ldr	r3, [r7, #12]
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	d001      	beq.n	800cef6 <osDelay+0x16>
 800cef2:	68fb      	ldr	r3, [r7, #12]
 800cef4:	e000      	b.n	800cef8 <osDelay+0x18>
 800cef6:	2301      	movs	r3, #1
 800cef8:	4618      	mov	r0, r3
 800cefa:	f000 fdfd 	bl	800daf8 <vTaskDelay>
  
  return osOK;
 800cefe:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800cf00:	4618      	mov	r0, r3
 800cf02:	3710      	adds	r7, #16
 800cf04:	46bd      	mov	sp, r7
 800cf06:	bd80      	pop	{r7, pc}

0800cf08 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800cf08:	b480      	push	{r7}
 800cf0a:	b083      	sub	sp, #12
 800cf0c:	af00      	add	r7, sp, #0
 800cf0e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	f103 0208 	add.w	r2, r3, #8
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	f04f 32ff 	mov.w	r2, #4294967295
 800cf20:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	f103 0208 	add.w	r2, r3, #8
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	f103 0208 	add.w	r2, r3, #8
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	2200      	movs	r2, #0
 800cf3a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800cf3c:	bf00      	nop
 800cf3e:	370c      	adds	r7, #12
 800cf40:	46bd      	mov	sp, r7
 800cf42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf46:	4770      	bx	lr

0800cf48 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800cf48:	b480      	push	{r7}
 800cf4a:	b083      	sub	sp, #12
 800cf4c:	af00      	add	r7, sp, #0
 800cf4e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	2200      	movs	r2, #0
 800cf54:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800cf56:	bf00      	nop
 800cf58:	370c      	adds	r7, #12
 800cf5a:	46bd      	mov	sp, r7
 800cf5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf60:	4770      	bx	lr

0800cf62 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800cf62:	b480      	push	{r7}
 800cf64:	b085      	sub	sp, #20
 800cf66:	af00      	add	r7, sp, #0
 800cf68:	6078      	str	r0, [r7, #4]
 800cf6a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	685b      	ldr	r3, [r3, #4]
 800cf70:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800cf72:	683b      	ldr	r3, [r7, #0]
 800cf74:	68fa      	ldr	r2, [r7, #12]
 800cf76:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800cf78:	68fb      	ldr	r3, [r7, #12]
 800cf7a:	689a      	ldr	r2, [r3, #8]
 800cf7c:	683b      	ldr	r3, [r7, #0]
 800cf7e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800cf80:	68fb      	ldr	r3, [r7, #12]
 800cf82:	689b      	ldr	r3, [r3, #8]
 800cf84:	683a      	ldr	r2, [r7, #0]
 800cf86:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800cf88:	68fb      	ldr	r3, [r7, #12]
 800cf8a:	683a      	ldr	r2, [r7, #0]
 800cf8c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800cf8e:	683b      	ldr	r3, [r7, #0]
 800cf90:	687a      	ldr	r2, [r7, #4]
 800cf92:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	1c5a      	adds	r2, r3, #1
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	601a      	str	r2, [r3, #0]
}
 800cf9e:	bf00      	nop
 800cfa0:	3714      	adds	r7, #20
 800cfa2:	46bd      	mov	sp, r7
 800cfa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfa8:	4770      	bx	lr

0800cfaa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800cfaa:	b480      	push	{r7}
 800cfac:	b085      	sub	sp, #20
 800cfae:	af00      	add	r7, sp, #0
 800cfb0:	6078      	str	r0, [r7, #4]
 800cfb2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800cfb4:	683b      	ldr	r3, [r7, #0]
 800cfb6:	681b      	ldr	r3, [r3, #0]
 800cfb8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800cfba:	68bb      	ldr	r3, [r7, #8]
 800cfbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cfc0:	d103      	bne.n	800cfca <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	691b      	ldr	r3, [r3, #16]
 800cfc6:	60fb      	str	r3, [r7, #12]
 800cfc8:	e00c      	b.n	800cfe4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	3308      	adds	r3, #8
 800cfce:	60fb      	str	r3, [r7, #12]
 800cfd0:	e002      	b.n	800cfd8 <vListInsert+0x2e>
 800cfd2:	68fb      	ldr	r3, [r7, #12]
 800cfd4:	685b      	ldr	r3, [r3, #4]
 800cfd6:	60fb      	str	r3, [r7, #12]
 800cfd8:	68fb      	ldr	r3, [r7, #12]
 800cfda:	685b      	ldr	r3, [r3, #4]
 800cfdc:	681b      	ldr	r3, [r3, #0]
 800cfde:	68ba      	ldr	r2, [r7, #8]
 800cfe0:	429a      	cmp	r2, r3
 800cfe2:	d2f6      	bcs.n	800cfd2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800cfe4:	68fb      	ldr	r3, [r7, #12]
 800cfe6:	685a      	ldr	r2, [r3, #4]
 800cfe8:	683b      	ldr	r3, [r7, #0]
 800cfea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800cfec:	683b      	ldr	r3, [r7, #0]
 800cfee:	685b      	ldr	r3, [r3, #4]
 800cff0:	683a      	ldr	r2, [r7, #0]
 800cff2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800cff4:	683b      	ldr	r3, [r7, #0]
 800cff6:	68fa      	ldr	r2, [r7, #12]
 800cff8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800cffa:	68fb      	ldr	r3, [r7, #12]
 800cffc:	683a      	ldr	r2, [r7, #0]
 800cffe:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800d000:	683b      	ldr	r3, [r7, #0]
 800d002:	687a      	ldr	r2, [r7, #4]
 800d004:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	681b      	ldr	r3, [r3, #0]
 800d00a:	1c5a      	adds	r2, r3, #1
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	601a      	str	r2, [r3, #0]
}
 800d010:	bf00      	nop
 800d012:	3714      	adds	r7, #20
 800d014:	46bd      	mov	sp, r7
 800d016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d01a:	4770      	bx	lr

0800d01c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800d01c:	b480      	push	{r7}
 800d01e:	b085      	sub	sp, #20
 800d020:	af00      	add	r7, sp, #0
 800d022:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	691b      	ldr	r3, [r3, #16]
 800d028:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	685b      	ldr	r3, [r3, #4]
 800d02e:	687a      	ldr	r2, [r7, #4]
 800d030:	6892      	ldr	r2, [r2, #8]
 800d032:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	689b      	ldr	r3, [r3, #8]
 800d038:	687a      	ldr	r2, [r7, #4]
 800d03a:	6852      	ldr	r2, [r2, #4]
 800d03c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800d03e:	68fb      	ldr	r3, [r7, #12]
 800d040:	685b      	ldr	r3, [r3, #4]
 800d042:	687a      	ldr	r2, [r7, #4]
 800d044:	429a      	cmp	r2, r3
 800d046:	d103      	bne.n	800d050 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	689a      	ldr	r2, [r3, #8]
 800d04c:	68fb      	ldr	r3, [r7, #12]
 800d04e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	2200      	movs	r2, #0
 800d054:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800d056:	68fb      	ldr	r3, [r7, #12]
 800d058:	681b      	ldr	r3, [r3, #0]
 800d05a:	1e5a      	subs	r2, r3, #1
 800d05c:	68fb      	ldr	r3, [r7, #12]
 800d05e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800d060:	68fb      	ldr	r3, [r7, #12]
 800d062:	681b      	ldr	r3, [r3, #0]
}
 800d064:	4618      	mov	r0, r3
 800d066:	3714      	adds	r7, #20
 800d068:	46bd      	mov	sp, r7
 800d06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d06e:	4770      	bx	lr

0800d070 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800d070:	b580      	push	{r7, lr}
 800d072:	b084      	sub	sp, #16
 800d074:	af00      	add	r7, sp, #0
 800d076:	6078      	str	r0, [r7, #4]
 800d078:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d07e:	68fb      	ldr	r3, [r7, #12]
 800d080:	2b00      	cmp	r3, #0
 800d082:	d10a      	bne.n	800d09a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800d084:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d088:	f383 8811 	msr	BASEPRI, r3
 800d08c:	f3bf 8f6f 	isb	sy
 800d090:	f3bf 8f4f 	dsb	sy
 800d094:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800d096:	bf00      	nop
 800d098:	e7fe      	b.n	800d098 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800d09a:	f001 fcbb 	bl	800ea14 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d09e:	68fb      	ldr	r3, [r7, #12]
 800d0a0:	681a      	ldr	r2, [r3, #0]
 800d0a2:	68fb      	ldr	r3, [r7, #12]
 800d0a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d0a6:	68f9      	ldr	r1, [r7, #12]
 800d0a8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d0aa:	fb01 f303 	mul.w	r3, r1, r3
 800d0ae:	441a      	add	r2, r3
 800d0b0:	68fb      	ldr	r3, [r7, #12]
 800d0b2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d0b4:	68fb      	ldr	r3, [r7, #12]
 800d0b6:	2200      	movs	r2, #0
 800d0b8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800d0ba:	68fb      	ldr	r3, [r7, #12]
 800d0bc:	681a      	ldr	r2, [r3, #0]
 800d0be:	68fb      	ldr	r3, [r7, #12]
 800d0c0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d0c2:	68fb      	ldr	r3, [r7, #12]
 800d0c4:	681a      	ldr	r2, [r3, #0]
 800d0c6:	68fb      	ldr	r3, [r7, #12]
 800d0c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d0ca:	3b01      	subs	r3, #1
 800d0cc:	68f9      	ldr	r1, [r7, #12]
 800d0ce:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d0d0:	fb01 f303 	mul.w	r3, r1, r3
 800d0d4:	441a      	add	r2, r3
 800d0d6:	68fb      	ldr	r3, [r7, #12]
 800d0d8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800d0da:	68fb      	ldr	r3, [r7, #12]
 800d0dc:	22ff      	movs	r2, #255	; 0xff
 800d0de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800d0e2:	68fb      	ldr	r3, [r7, #12]
 800d0e4:	22ff      	movs	r2, #255	; 0xff
 800d0e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800d0ea:	683b      	ldr	r3, [r7, #0]
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d114      	bne.n	800d11a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d0f0:	68fb      	ldr	r3, [r7, #12]
 800d0f2:	691b      	ldr	r3, [r3, #16]
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	d01a      	beq.n	800d12e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d0f8:	68fb      	ldr	r3, [r7, #12]
 800d0fa:	3310      	adds	r3, #16
 800d0fc:	4618      	mov	r0, r3
 800d0fe:	f001 f893 	bl	800e228 <xTaskRemoveFromEventList>
 800d102:	4603      	mov	r3, r0
 800d104:	2b00      	cmp	r3, #0
 800d106:	d012      	beq.n	800d12e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800d108:	4b0c      	ldr	r3, [pc, #48]	; (800d13c <xQueueGenericReset+0xcc>)
 800d10a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d10e:	601a      	str	r2, [r3, #0]
 800d110:	f3bf 8f4f 	dsb	sy
 800d114:	f3bf 8f6f 	isb	sy
 800d118:	e009      	b.n	800d12e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800d11a:	68fb      	ldr	r3, [r7, #12]
 800d11c:	3310      	adds	r3, #16
 800d11e:	4618      	mov	r0, r3
 800d120:	f7ff fef2 	bl	800cf08 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	3324      	adds	r3, #36	; 0x24
 800d128:	4618      	mov	r0, r3
 800d12a:	f7ff feed 	bl	800cf08 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800d12e:	f001 fca1 	bl	800ea74 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800d132:	2301      	movs	r3, #1
}
 800d134:	4618      	mov	r0, r3
 800d136:	3710      	adds	r7, #16
 800d138:	46bd      	mov	sp, r7
 800d13a:	bd80      	pop	{r7, pc}
 800d13c:	e000ed04 	.word	0xe000ed04

0800d140 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800d140:	b580      	push	{r7, lr}
 800d142:	b08a      	sub	sp, #40	; 0x28
 800d144:	af02      	add	r7, sp, #8
 800d146:	60f8      	str	r0, [r7, #12]
 800d148:	60b9      	str	r1, [r7, #8]
 800d14a:	4613      	mov	r3, r2
 800d14c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d14e:	68fb      	ldr	r3, [r7, #12]
 800d150:	2b00      	cmp	r3, #0
 800d152:	d10a      	bne.n	800d16a <xQueueGenericCreate+0x2a>
	__asm volatile
 800d154:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d158:	f383 8811 	msr	BASEPRI, r3
 800d15c:	f3bf 8f6f 	isb	sy
 800d160:	f3bf 8f4f 	dsb	sy
 800d164:	613b      	str	r3, [r7, #16]
}
 800d166:	bf00      	nop
 800d168:	e7fe      	b.n	800d168 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d16a:	68fb      	ldr	r3, [r7, #12]
 800d16c:	68ba      	ldr	r2, [r7, #8]
 800d16e:	fb02 f303 	mul.w	r3, r2, r3
 800d172:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800d174:	69fb      	ldr	r3, [r7, #28]
 800d176:	3348      	adds	r3, #72	; 0x48
 800d178:	4618      	mov	r0, r3
 800d17a:	f001 fd2d 	bl	800ebd8 <pvPortMalloc>
 800d17e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800d180:	69bb      	ldr	r3, [r7, #24]
 800d182:	2b00      	cmp	r3, #0
 800d184:	d011      	beq.n	800d1aa <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800d186:	69bb      	ldr	r3, [r7, #24]
 800d188:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d18a:	697b      	ldr	r3, [r7, #20]
 800d18c:	3348      	adds	r3, #72	; 0x48
 800d18e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800d190:	69bb      	ldr	r3, [r7, #24]
 800d192:	2200      	movs	r2, #0
 800d194:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d198:	79fa      	ldrb	r2, [r7, #7]
 800d19a:	69bb      	ldr	r3, [r7, #24]
 800d19c:	9300      	str	r3, [sp, #0]
 800d19e:	4613      	mov	r3, r2
 800d1a0:	697a      	ldr	r2, [r7, #20]
 800d1a2:	68b9      	ldr	r1, [r7, #8]
 800d1a4:	68f8      	ldr	r0, [r7, #12]
 800d1a6:	f000 f805 	bl	800d1b4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d1aa:	69bb      	ldr	r3, [r7, #24]
	}
 800d1ac:	4618      	mov	r0, r3
 800d1ae:	3720      	adds	r7, #32
 800d1b0:	46bd      	mov	sp, r7
 800d1b2:	bd80      	pop	{r7, pc}

0800d1b4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800d1b4:	b580      	push	{r7, lr}
 800d1b6:	b084      	sub	sp, #16
 800d1b8:	af00      	add	r7, sp, #0
 800d1ba:	60f8      	str	r0, [r7, #12]
 800d1bc:	60b9      	str	r1, [r7, #8]
 800d1be:	607a      	str	r2, [r7, #4]
 800d1c0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800d1c2:	68bb      	ldr	r3, [r7, #8]
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	d103      	bne.n	800d1d0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d1c8:	69bb      	ldr	r3, [r7, #24]
 800d1ca:	69ba      	ldr	r2, [r7, #24]
 800d1cc:	601a      	str	r2, [r3, #0]
 800d1ce:	e002      	b.n	800d1d6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800d1d0:	69bb      	ldr	r3, [r7, #24]
 800d1d2:	687a      	ldr	r2, [r7, #4]
 800d1d4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800d1d6:	69bb      	ldr	r3, [r7, #24]
 800d1d8:	68fa      	ldr	r2, [r7, #12]
 800d1da:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800d1dc:	69bb      	ldr	r3, [r7, #24]
 800d1de:	68ba      	ldr	r2, [r7, #8]
 800d1e0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d1e2:	2101      	movs	r1, #1
 800d1e4:	69b8      	ldr	r0, [r7, #24]
 800d1e6:	f7ff ff43 	bl	800d070 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800d1ea:	bf00      	nop
 800d1ec:	3710      	adds	r7, #16
 800d1ee:	46bd      	mov	sp, r7
 800d1f0:	bd80      	pop	{r7, pc}
	...

0800d1f4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800d1f4:	b580      	push	{r7, lr}
 800d1f6:	b08e      	sub	sp, #56	; 0x38
 800d1f8:	af00      	add	r7, sp, #0
 800d1fa:	60f8      	str	r0, [r7, #12]
 800d1fc:	60b9      	str	r1, [r7, #8]
 800d1fe:	607a      	str	r2, [r7, #4]
 800d200:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d202:	2300      	movs	r3, #0
 800d204:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d206:	68fb      	ldr	r3, [r7, #12]
 800d208:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d20a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d10a      	bne.n	800d226 <xQueueGenericSend+0x32>
	__asm volatile
 800d210:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d214:	f383 8811 	msr	BASEPRI, r3
 800d218:	f3bf 8f6f 	isb	sy
 800d21c:	f3bf 8f4f 	dsb	sy
 800d220:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d222:	bf00      	nop
 800d224:	e7fe      	b.n	800d224 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d226:	68bb      	ldr	r3, [r7, #8]
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d103      	bne.n	800d234 <xQueueGenericSend+0x40>
 800d22c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d22e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d230:	2b00      	cmp	r3, #0
 800d232:	d101      	bne.n	800d238 <xQueueGenericSend+0x44>
 800d234:	2301      	movs	r3, #1
 800d236:	e000      	b.n	800d23a <xQueueGenericSend+0x46>
 800d238:	2300      	movs	r3, #0
 800d23a:	2b00      	cmp	r3, #0
 800d23c:	d10a      	bne.n	800d254 <xQueueGenericSend+0x60>
	__asm volatile
 800d23e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d242:	f383 8811 	msr	BASEPRI, r3
 800d246:	f3bf 8f6f 	isb	sy
 800d24a:	f3bf 8f4f 	dsb	sy
 800d24e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d250:	bf00      	nop
 800d252:	e7fe      	b.n	800d252 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d254:	683b      	ldr	r3, [r7, #0]
 800d256:	2b02      	cmp	r3, #2
 800d258:	d103      	bne.n	800d262 <xQueueGenericSend+0x6e>
 800d25a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d25c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d25e:	2b01      	cmp	r3, #1
 800d260:	d101      	bne.n	800d266 <xQueueGenericSend+0x72>
 800d262:	2301      	movs	r3, #1
 800d264:	e000      	b.n	800d268 <xQueueGenericSend+0x74>
 800d266:	2300      	movs	r3, #0
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d10a      	bne.n	800d282 <xQueueGenericSend+0x8e>
	__asm volatile
 800d26c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d270:	f383 8811 	msr	BASEPRI, r3
 800d274:	f3bf 8f6f 	isb	sy
 800d278:	f3bf 8f4f 	dsb	sy
 800d27c:	623b      	str	r3, [r7, #32]
}
 800d27e:	bf00      	nop
 800d280:	e7fe      	b.n	800d280 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d282:	f001 f98d 	bl	800e5a0 <xTaskGetSchedulerState>
 800d286:	4603      	mov	r3, r0
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d102      	bne.n	800d292 <xQueueGenericSend+0x9e>
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	2b00      	cmp	r3, #0
 800d290:	d101      	bne.n	800d296 <xQueueGenericSend+0xa2>
 800d292:	2301      	movs	r3, #1
 800d294:	e000      	b.n	800d298 <xQueueGenericSend+0xa4>
 800d296:	2300      	movs	r3, #0
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d10a      	bne.n	800d2b2 <xQueueGenericSend+0xbe>
	__asm volatile
 800d29c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2a0:	f383 8811 	msr	BASEPRI, r3
 800d2a4:	f3bf 8f6f 	isb	sy
 800d2a8:	f3bf 8f4f 	dsb	sy
 800d2ac:	61fb      	str	r3, [r7, #28]
}
 800d2ae:	bf00      	nop
 800d2b0:	e7fe      	b.n	800d2b0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d2b2:	f001 fbaf 	bl	800ea14 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d2b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d2ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d2be:	429a      	cmp	r2, r3
 800d2c0:	d302      	bcc.n	800d2c8 <xQueueGenericSend+0xd4>
 800d2c2:	683b      	ldr	r3, [r7, #0]
 800d2c4:	2b02      	cmp	r3, #2
 800d2c6:	d129      	bne.n	800d31c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d2c8:	683a      	ldr	r2, [r7, #0]
 800d2ca:	68b9      	ldr	r1, [r7, #8]
 800d2cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d2ce:	f000 f96f 	bl	800d5b0 <prvCopyDataToQueue>
 800d2d2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d2d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	d010      	beq.n	800d2fe <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d2dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2de:	3324      	adds	r3, #36	; 0x24
 800d2e0:	4618      	mov	r0, r3
 800d2e2:	f000 ffa1 	bl	800e228 <xTaskRemoveFromEventList>
 800d2e6:	4603      	mov	r3, r0
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	d013      	beq.n	800d314 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800d2ec:	4b3f      	ldr	r3, [pc, #252]	; (800d3ec <xQueueGenericSend+0x1f8>)
 800d2ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d2f2:	601a      	str	r2, [r3, #0]
 800d2f4:	f3bf 8f4f 	dsb	sy
 800d2f8:	f3bf 8f6f 	isb	sy
 800d2fc:	e00a      	b.n	800d314 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800d2fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d300:	2b00      	cmp	r3, #0
 800d302:	d007      	beq.n	800d314 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800d304:	4b39      	ldr	r3, [pc, #228]	; (800d3ec <xQueueGenericSend+0x1f8>)
 800d306:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d30a:	601a      	str	r2, [r3, #0]
 800d30c:	f3bf 8f4f 	dsb	sy
 800d310:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800d314:	f001 fbae 	bl	800ea74 <vPortExitCritical>
				return pdPASS;
 800d318:	2301      	movs	r3, #1
 800d31a:	e063      	b.n	800d3e4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	2b00      	cmp	r3, #0
 800d320:	d103      	bne.n	800d32a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d322:	f001 fba7 	bl	800ea74 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800d326:	2300      	movs	r3, #0
 800d328:	e05c      	b.n	800d3e4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d32a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	d106      	bne.n	800d33e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d330:	f107 0314 	add.w	r3, r7, #20
 800d334:	4618      	mov	r0, r3
 800d336:	f000 ffd9 	bl	800e2ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d33a:	2301      	movs	r3, #1
 800d33c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d33e:	f001 fb99 	bl	800ea74 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d342:	f000 fd8f 	bl	800de64 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d346:	f001 fb65 	bl	800ea14 <vPortEnterCritical>
 800d34a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d34c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d350:	b25b      	sxtb	r3, r3
 800d352:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d356:	d103      	bne.n	800d360 <xQueueGenericSend+0x16c>
 800d358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d35a:	2200      	movs	r2, #0
 800d35c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d362:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d366:	b25b      	sxtb	r3, r3
 800d368:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d36c:	d103      	bne.n	800d376 <xQueueGenericSend+0x182>
 800d36e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d370:	2200      	movs	r2, #0
 800d372:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d376:	f001 fb7d 	bl	800ea74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d37a:	1d3a      	adds	r2, r7, #4
 800d37c:	f107 0314 	add.w	r3, r7, #20
 800d380:	4611      	mov	r1, r2
 800d382:	4618      	mov	r0, r3
 800d384:	f000 ffc8 	bl	800e318 <xTaskCheckForTimeOut>
 800d388:	4603      	mov	r3, r0
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	d124      	bne.n	800d3d8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d38e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d390:	f000 fa06 	bl	800d7a0 <prvIsQueueFull>
 800d394:	4603      	mov	r3, r0
 800d396:	2b00      	cmp	r3, #0
 800d398:	d018      	beq.n	800d3cc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d39a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d39c:	3310      	adds	r3, #16
 800d39e:	687a      	ldr	r2, [r7, #4]
 800d3a0:	4611      	mov	r1, r2
 800d3a2:	4618      	mov	r0, r3
 800d3a4:	f000 ff1c 	bl	800e1e0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800d3a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d3aa:	f000 f991 	bl	800d6d0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800d3ae:	f000 fd67 	bl	800de80 <xTaskResumeAll>
 800d3b2:	4603      	mov	r3, r0
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	f47f af7c 	bne.w	800d2b2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800d3ba:	4b0c      	ldr	r3, [pc, #48]	; (800d3ec <xQueueGenericSend+0x1f8>)
 800d3bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d3c0:	601a      	str	r2, [r3, #0]
 800d3c2:	f3bf 8f4f 	dsb	sy
 800d3c6:	f3bf 8f6f 	isb	sy
 800d3ca:	e772      	b.n	800d2b2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d3cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d3ce:	f000 f97f 	bl	800d6d0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d3d2:	f000 fd55 	bl	800de80 <xTaskResumeAll>
 800d3d6:	e76c      	b.n	800d2b2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800d3d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d3da:	f000 f979 	bl	800d6d0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d3de:	f000 fd4f 	bl	800de80 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800d3e2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800d3e4:	4618      	mov	r0, r3
 800d3e6:	3738      	adds	r7, #56	; 0x38
 800d3e8:	46bd      	mov	sp, r7
 800d3ea:	bd80      	pop	{r7, pc}
 800d3ec:	e000ed04 	.word	0xe000ed04

0800d3f0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d3f0:	b580      	push	{r7, lr}
 800d3f2:	b08c      	sub	sp, #48	; 0x30
 800d3f4:	af00      	add	r7, sp, #0
 800d3f6:	60f8      	str	r0, [r7, #12]
 800d3f8:	60b9      	str	r1, [r7, #8]
 800d3fa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d3fc:	2300      	movs	r3, #0
 800d3fe:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d400:	68fb      	ldr	r3, [r7, #12]
 800d402:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d406:	2b00      	cmp	r3, #0
 800d408:	d10a      	bne.n	800d420 <xQueueReceive+0x30>
	__asm volatile
 800d40a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d40e:	f383 8811 	msr	BASEPRI, r3
 800d412:	f3bf 8f6f 	isb	sy
 800d416:	f3bf 8f4f 	dsb	sy
 800d41a:	623b      	str	r3, [r7, #32]
}
 800d41c:	bf00      	nop
 800d41e:	e7fe      	b.n	800d41e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d420:	68bb      	ldr	r3, [r7, #8]
 800d422:	2b00      	cmp	r3, #0
 800d424:	d103      	bne.n	800d42e <xQueueReceive+0x3e>
 800d426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	d101      	bne.n	800d432 <xQueueReceive+0x42>
 800d42e:	2301      	movs	r3, #1
 800d430:	e000      	b.n	800d434 <xQueueReceive+0x44>
 800d432:	2300      	movs	r3, #0
 800d434:	2b00      	cmp	r3, #0
 800d436:	d10a      	bne.n	800d44e <xQueueReceive+0x5e>
	__asm volatile
 800d438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d43c:	f383 8811 	msr	BASEPRI, r3
 800d440:	f3bf 8f6f 	isb	sy
 800d444:	f3bf 8f4f 	dsb	sy
 800d448:	61fb      	str	r3, [r7, #28]
}
 800d44a:	bf00      	nop
 800d44c:	e7fe      	b.n	800d44c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d44e:	f001 f8a7 	bl	800e5a0 <xTaskGetSchedulerState>
 800d452:	4603      	mov	r3, r0
 800d454:	2b00      	cmp	r3, #0
 800d456:	d102      	bne.n	800d45e <xQueueReceive+0x6e>
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d101      	bne.n	800d462 <xQueueReceive+0x72>
 800d45e:	2301      	movs	r3, #1
 800d460:	e000      	b.n	800d464 <xQueueReceive+0x74>
 800d462:	2300      	movs	r3, #0
 800d464:	2b00      	cmp	r3, #0
 800d466:	d10a      	bne.n	800d47e <xQueueReceive+0x8e>
	__asm volatile
 800d468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d46c:	f383 8811 	msr	BASEPRI, r3
 800d470:	f3bf 8f6f 	isb	sy
 800d474:	f3bf 8f4f 	dsb	sy
 800d478:	61bb      	str	r3, [r7, #24]
}
 800d47a:	bf00      	nop
 800d47c:	e7fe      	b.n	800d47c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d47e:	f001 fac9 	bl	800ea14 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d484:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d486:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d01f      	beq.n	800d4ce <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d48e:	68b9      	ldr	r1, [r7, #8]
 800d490:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d492:	f000 f8f7 	bl	800d684 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d498:	1e5a      	subs	r2, r3, #1
 800d49a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d49c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d49e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4a0:	691b      	ldr	r3, [r3, #16]
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d00f      	beq.n	800d4c6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d4a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4a8:	3310      	adds	r3, #16
 800d4aa:	4618      	mov	r0, r3
 800d4ac:	f000 febc 	bl	800e228 <xTaskRemoveFromEventList>
 800d4b0:	4603      	mov	r3, r0
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	d007      	beq.n	800d4c6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d4b6:	4b3d      	ldr	r3, [pc, #244]	; (800d5ac <xQueueReceive+0x1bc>)
 800d4b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d4bc:	601a      	str	r2, [r3, #0]
 800d4be:	f3bf 8f4f 	dsb	sy
 800d4c2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d4c6:	f001 fad5 	bl	800ea74 <vPortExitCritical>
				return pdPASS;
 800d4ca:	2301      	movs	r3, #1
 800d4cc:	e069      	b.n	800d5a2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	d103      	bne.n	800d4dc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d4d4:	f001 face 	bl	800ea74 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d4d8:	2300      	movs	r3, #0
 800d4da:	e062      	b.n	800d5a2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d4dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	d106      	bne.n	800d4f0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d4e2:	f107 0310 	add.w	r3, r7, #16
 800d4e6:	4618      	mov	r0, r3
 800d4e8:	f000 ff00 	bl	800e2ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d4ec:	2301      	movs	r3, #1
 800d4ee:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d4f0:	f001 fac0 	bl	800ea74 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d4f4:	f000 fcb6 	bl	800de64 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d4f8:	f001 fa8c 	bl	800ea14 <vPortEnterCritical>
 800d4fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4fe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d502:	b25b      	sxtb	r3, r3
 800d504:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d508:	d103      	bne.n	800d512 <xQueueReceive+0x122>
 800d50a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d50c:	2200      	movs	r2, #0
 800d50e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d514:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d518:	b25b      	sxtb	r3, r3
 800d51a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d51e:	d103      	bne.n	800d528 <xQueueReceive+0x138>
 800d520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d522:	2200      	movs	r2, #0
 800d524:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d528:	f001 faa4 	bl	800ea74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d52c:	1d3a      	adds	r2, r7, #4
 800d52e:	f107 0310 	add.w	r3, r7, #16
 800d532:	4611      	mov	r1, r2
 800d534:	4618      	mov	r0, r3
 800d536:	f000 feef 	bl	800e318 <xTaskCheckForTimeOut>
 800d53a:	4603      	mov	r3, r0
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	d123      	bne.n	800d588 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d540:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d542:	f000 f917 	bl	800d774 <prvIsQueueEmpty>
 800d546:	4603      	mov	r3, r0
 800d548:	2b00      	cmp	r3, #0
 800d54a:	d017      	beq.n	800d57c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d54c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d54e:	3324      	adds	r3, #36	; 0x24
 800d550:	687a      	ldr	r2, [r7, #4]
 800d552:	4611      	mov	r1, r2
 800d554:	4618      	mov	r0, r3
 800d556:	f000 fe43 	bl	800e1e0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d55a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d55c:	f000 f8b8 	bl	800d6d0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d560:	f000 fc8e 	bl	800de80 <xTaskResumeAll>
 800d564:	4603      	mov	r3, r0
 800d566:	2b00      	cmp	r3, #0
 800d568:	d189      	bne.n	800d47e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800d56a:	4b10      	ldr	r3, [pc, #64]	; (800d5ac <xQueueReceive+0x1bc>)
 800d56c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d570:	601a      	str	r2, [r3, #0]
 800d572:	f3bf 8f4f 	dsb	sy
 800d576:	f3bf 8f6f 	isb	sy
 800d57a:	e780      	b.n	800d47e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d57c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d57e:	f000 f8a7 	bl	800d6d0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d582:	f000 fc7d 	bl	800de80 <xTaskResumeAll>
 800d586:	e77a      	b.n	800d47e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d588:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d58a:	f000 f8a1 	bl	800d6d0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d58e:	f000 fc77 	bl	800de80 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d592:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d594:	f000 f8ee 	bl	800d774 <prvIsQueueEmpty>
 800d598:	4603      	mov	r3, r0
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	f43f af6f 	beq.w	800d47e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d5a0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d5a2:	4618      	mov	r0, r3
 800d5a4:	3730      	adds	r7, #48	; 0x30
 800d5a6:	46bd      	mov	sp, r7
 800d5a8:	bd80      	pop	{r7, pc}
 800d5aa:	bf00      	nop
 800d5ac:	e000ed04 	.word	0xe000ed04

0800d5b0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d5b0:	b580      	push	{r7, lr}
 800d5b2:	b086      	sub	sp, #24
 800d5b4:	af00      	add	r7, sp, #0
 800d5b6:	60f8      	str	r0, [r7, #12]
 800d5b8:	60b9      	str	r1, [r7, #8]
 800d5ba:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d5bc:	2300      	movs	r3, #0
 800d5be:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d5c0:	68fb      	ldr	r3, [r7, #12]
 800d5c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5c4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d5c6:	68fb      	ldr	r3, [r7, #12]
 800d5c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	d10d      	bne.n	800d5ea <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d5ce:	68fb      	ldr	r3, [r7, #12]
 800d5d0:	681b      	ldr	r3, [r3, #0]
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	d14d      	bne.n	800d672 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d5d6:	68fb      	ldr	r3, [r7, #12]
 800d5d8:	689b      	ldr	r3, [r3, #8]
 800d5da:	4618      	mov	r0, r3
 800d5dc:	f000 fffe 	bl	800e5dc <xTaskPriorityDisinherit>
 800d5e0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d5e2:	68fb      	ldr	r3, [r7, #12]
 800d5e4:	2200      	movs	r2, #0
 800d5e6:	609a      	str	r2, [r3, #8]
 800d5e8:	e043      	b.n	800d672 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	d119      	bne.n	800d624 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d5f0:	68fb      	ldr	r3, [r7, #12]
 800d5f2:	6858      	ldr	r0, [r3, #4]
 800d5f4:	68fb      	ldr	r3, [r7, #12]
 800d5f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5f8:	461a      	mov	r2, r3
 800d5fa:	68b9      	ldr	r1, [r7, #8]
 800d5fc:	f001 fd00 	bl	800f000 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d600:	68fb      	ldr	r3, [r7, #12]
 800d602:	685a      	ldr	r2, [r3, #4]
 800d604:	68fb      	ldr	r3, [r7, #12]
 800d606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d608:	441a      	add	r2, r3
 800d60a:	68fb      	ldr	r3, [r7, #12]
 800d60c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d60e:	68fb      	ldr	r3, [r7, #12]
 800d610:	685a      	ldr	r2, [r3, #4]
 800d612:	68fb      	ldr	r3, [r7, #12]
 800d614:	689b      	ldr	r3, [r3, #8]
 800d616:	429a      	cmp	r2, r3
 800d618:	d32b      	bcc.n	800d672 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d61a:	68fb      	ldr	r3, [r7, #12]
 800d61c:	681a      	ldr	r2, [r3, #0]
 800d61e:	68fb      	ldr	r3, [r7, #12]
 800d620:	605a      	str	r2, [r3, #4]
 800d622:	e026      	b.n	800d672 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d624:	68fb      	ldr	r3, [r7, #12]
 800d626:	68d8      	ldr	r0, [r3, #12]
 800d628:	68fb      	ldr	r3, [r7, #12]
 800d62a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d62c:	461a      	mov	r2, r3
 800d62e:	68b9      	ldr	r1, [r7, #8]
 800d630:	f001 fce6 	bl	800f000 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d634:	68fb      	ldr	r3, [r7, #12]
 800d636:	68da      	ldr	r2, [r3, #12]
 800d638:	68fb      	ldr	r3, [r7, #12]
 800d63a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d63c:	425b      	negs	r3, r3
 800d63e:	441a      	add	r2, r3
 800d640:	68fb      	ldr	r3, [r7, #12]
 800d642:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d644:	68fb      	ldr	r3, [r7, #12]
 800d646:	68da      	ldr	r2, [r3, #12]
 800d648:	68fb      	ldr	r3, [r7, #12]
 800d64a:	681b      	ldr	r3, [r3, #0]
 800d64c:	429a      	cmp	r2, r3
 800d64e:	d207      	bcs.n	800d660 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d650:	68fb      	ldr	r3, [r7, #12]
 800d652:	689a      	ldr	r2, [r3, #8]
 800d654:	68fb      	ldr	r3, [r7, #12]
 800d656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d658:	425b      	negs	r3, r3
 800d65a:	441a      	add	r2, r3
 800d65c:	68fb      	ldr	r3, [r7, #12]
 800d65e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	2b02      	cmp	r3, #2
 800d664:	d105      	bne.n	800d672 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d666:	693b      	ldr	r3, [r7, #16]
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d002      	beq.n	800d672 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d66c:	693b      	ldr	r3, [r7, #16]
 800d66e:	3b01      	subs	r3, #1
 800d670:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d672:	693b      	ldr	r3, [r7, #16]
 800d674:	1c5a      	adds	r2, r3, #1
 800d676:	68fb      	ldr	r3, [r7, #12]
 800d678:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800d67a:	697b      	ldr	r3, [r7, #20]
}
 800d67c:	4618      	mov	r0, r3
 800d67e:	3718      	adds	r7, #24
 800d680:	46bd      	mov	sp, r7
 800d682:	bd80      	pop	{r7, pc}

0800d684 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d684:	b580      	push	{r7, lr}
 800d686:	b082      	sub	sp, #8
 800d688:	af00      	add	r7, sp, #0
 800d68a:	6078      	str	r0, [r7, #4]
 800d68c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d692:	2b00      	cmp	r3, #0
 800d694:	d018      	beq.n	800d6c8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	68da      	ldr	r2, [r3, #12]
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d69e:	441a      	add	r2, r3
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	68da      	ldr	r2, [r3, #12]
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	689b      	ldr	r3, [r3, #8]
 800d6ac:	429a      	cmp	r2, r3
 800d6ae:	d303      	bcc.n	800d6b8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	681a      	ldr	r2, [r3, #0]
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	68d9      	ldr	r1, [r3, #12]
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6c0:	461a      	mov	r2, r3
 800d6c2:	6838      	ldr	r0, [r7, #0]
 800d6c4:	f001 fc9c 	bl	800f000 <memcpy>
	}
}
 800d6c8:	bf00      	nop
 800d6ca:	3708      	adds	r7, #8
 800d6cc:	46bd      	mov	sp, r7
 800d6ce:	bd80      	pop	{r7, pc}

0800d6d0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d6d0:	b580      	push	{r7, lr}
 800d6d2:	b084      	sub	sp, #16
 800d6d4:	af00      	add	r7, sp, #0
 800d6d6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d6d8:	f001 f99c 	bl	800ea14 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d6e2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d6e4:	e011      	b.n	800d70a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6ea:	2b00      	cmp	r3, #0
 800d6ec:	d012      	beq.n	800d714 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	3324      	adds	r3, #36	; 0x24
 800d6f2:	4618      	mov	r0, r3
 800d6f4:	f000 fd98 	bl	800e228 <xTaskRemoveFromEventList>
 800d6f8:	4603      	mov	r3, r0
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d001      	beq.n	800d702 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d6fe:	f000 fe6d 	bl	800e3dc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d702:	7bfb      	ldrb	r3, [r7, #15]
 800d704:	3b01      	subs	r3, #1
 800d706:	b2db      	uxtb	r3, r3
 800d708:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d70a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d70e:	2b00      	cmp	r3, #0
 800d710:	dce9      	bgt.n	800d6e6 <prvUnlockQueue+0x16>
 800d712:	e000      	b.n	800d716 <prvUnlockQueue+0x46>
					break;
 800d714:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	22ff      	movs	r2, #255	; 0xff
 800d71a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800d71e:	f001 f9a9 	bl	800ea74 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d722:	f001 f977 	bl	800ea14 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d72c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d72e:	e011      	b.n	800d754 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	691b      	ldr	r3, [r3, #16]
 800d734:	2b00      	cmp	r3, #0
 800d736:	d012      	beq.n	800d75e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	3310      	adds	r3, #16
 800d73c:	4618      	mov	r0, r3
 800d73e:	f000 fd73 	bl	800e228 <xTaskRemoveFromEventList>
 800d742:	4603      	mov	r3, r0
 800d744:	2b00      	cmp	r3, #0
 800d746:	d001      	beq.n	800d74c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d748:	f000 fe48 	bl	800e3dc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d74c:	7bbb      	ldrb	r3, [r7, #14]
 800d74e:	3b01      	subs	r3, #1
 800d750:	b2db      	uxtb	r3, r3
 800d752:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d754:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d758:	2b00      	cmp	r3, #0
 800d75a:	dce9      	bgt.n	800d730 <prvUnlockQueue+0x60>
 800d75c:	e000      	b.n	800d760 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d75e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	22ff      	movs	r2, #255	; 0xff
 800d764:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800d768:	f001 f984 	bl	800ea74 <vPortExitCritical>
}
 800d76c:	bf00      	nop
 800d76e:	3710      	adds	r7, #16
 800d770:	46bd      	mov	sp, r7
 800d772:	bd80      	pop	{r7, pc}

0800d774 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d774:	b580      	push	{r7, lr}
 800d776:	b084      	sub	sp, #16
 800d778:	af00      	add	r7, sp, #0
 800d77a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d77c:	f001 f94a 	bl	800ea14 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d784:	2b00      	cmp	r3, #0
 800d786:	d102      	bne.n	800d78e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d788:	2301      	movs	r3, #1
 800d78a:	60fb      	str	r3, [r7, #12]
 800d78c:	e001      	b.n	800d792 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d78e:	2300      	movs	r3, #0
 800d790:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d792:	f001 f96f 	bl	800ea74 <vPortExitCritical>

	return xReturn;
 800d796:	68fb      	ldr	r3, [r7, #12]
}
 800d798:	4618      	mov	r0, r3
 800d79a:	3710      	adds	r7, #16
 800d79c:	46bd      	mov	sp, r7
 800d79e:	bd80      	pop	{r7, pc}

0800d7a0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d7a0:	b580      	push	{r7, lr}
 800d7a2:	b084      	sub	sp, #16
 800d7a4:	af00      	add	r7, sp, #0
 800d7a6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d7a8:	f001 f934 	bl	800ea14 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d7b4:	429a      	cmp	r2, r3
 800d7b6:	d102      	bne.n	800d7be <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d7b8:	2301      	movs	r3, #1
 800d7ba:	60fb      	str	r3, [r7, #12]
 800d7bc:	e001      	b.n	800d7c2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d7be:	2300      	movs	r3, #0
 800d7c0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d7c2:	f001 f957 	bl	800ea74 <vPortExitCritical>

	return xReturn;
 800d7c6:	68fb      	ldr	r3, [r7, #12]
}
 800d7c8:	4618      	mov	r0, r3
 800d7ca:	3710      	adds	r7, #16
 800d7cc:	46bd      	mov	sp, r7
 800d7ce:	bd80      	pop	{r7, pc}

0800d7d0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d7d0:	b580      	push	{r7, lr}
 800d7d2:	b08e      	sub	sp, #56	; 0x38
 800d7d4:	af04      	add	r7, sp, #16
 800d7d6:	60f8      	str	r0, [r7, #12]
 800d7d8:	60b9      	str	r1, [r7, #8]
 800d7da:	607a      	str	r2, [r7, #4]
 800d7dc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d7de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	d10a      	bne.n	800d7fa <xTaskCreateStatic+0x2a>
	__asm volatile
 800d7e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7e8:	f383 8811 	msr	BASEPRI, r3
 800d7ec:	f3bf 8f6f 	isb	sy
 800d7f0:	f3bf 8f4f 	dsb	sy
 800d7f4:	623b      	str	r3, [r7, #32]
}
 800d7f6:	bf00      	nop
 800d7f8:	e7fe      	b.n	800d7f8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800d7fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	d10a      	bne.n	800d816 <xTaskCreateStatic+0x46>
	__asm volatile
 800d800:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d804:	f383 8811 	msr	BASEPRI, r3
 800d808:	f3bf 8f6f 	isb	sy
 800d80c:	f3bf 8f4f 	dsb	sy
 800d810:	61fb      	str	r3, [r7, #28]
}
 800d812:	bf00      	nop
 800d814:	e7fe      	b.n	800d814 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d816:	2354      	movs	r3, #84	; 0x54
 800d818:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d81a:	693b      	ldr	r3, [r7, #16]
 800d81c:	2b54      	cmp	r3, #84	; 0x54
 800d81e:	d00a      	beq.n	800d836 <xTaskCreateStatic+0x66>
	__asm volatile
 800d820:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d824:	f383 8811 	msr	BASEPRI, r3
 800d828:	f3bf 8f6f 	isb	sy
 800d82c:	f3bf 8f4f 	dsb	sy
 800d830:	61bb      	str	r3, [r7, #24]
}
 800d832:	bf00      	nop
 800d834:	e7fe      	b.n	800d834 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d836:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d838:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	d01e      	beq.n	800d87c <xTaskCreateStatic+0xac>
 800d83e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d840:	2b00      	cmp	r3, #0
 800d842:	d01b      	beq.n	800d87c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d846:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d84a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d84c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d84e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d850:	2202      	movs	r2, #2
 800d852:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d856:	2300      	movs	r3, #0
 800d858:	9303      	str	r3, [sp, #12]
 800d85a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d85c:	9302      	str	r3, [sp, #8]
 800d85e:	f107 0314 	add.w	r3, r7, #20
 800d862:	9301      	str	r3, [sp, #4]
 800d864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d866:	9300      	str	r3, [sp, #0]
 800d868:	683b      	ldr	r3, [r7, #0]
 800d86a:	687a      	ldr	r2, [r7, #4]
 800d86c:	68b9      	ldr	r1, [r7, #8]
 800d86e:	68f8      	ldr	r0, [r7, #12]
 800d870:	f000 f850 	bl	800d914 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d874:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d876:	f000 f8d5 	bl	800da24 <prvAddNewTaskToReadyList>
 800d87a:	e001      	b.n	800d880 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800d87c:	2300      	movs	r3, #0
 800d87e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d880:	697b      	ldr	r3, [r7, #20]
	}
 800d882:	4618      	mov	r0, r3
 800d884:	3728      	adds	r7, #40	; 0x28
 800d886:	46bd      	mov	sp, r7
 800d888:	bd80      	pop	{r7, pc}

0800d88a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d88a:	b580      	push	{r7, lr}
 800d88c:	b08c      	sub	sp, #48	; 0x30
 800d88e:	af04      	add	r7, sp, #16
 800d890:	60f8      	str	r0, [r7, #12]
 800d892:	60b9      	str	r1, [r7, #8]
 800d894:	603b      	str	r3, [r7, #0]
 800d896:	4613      	mov	r3, r2
 800d898:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d89a:	88fb      	ldrh	r3, [r7, #6]
 800d89c:	009b      	lsls	r3, r3, #2
 800d89e:	4618      	mov	r0, r3
 800d8a0:	f001 f99a 	bl	800ebd8 <pvPortMalloc>
 800d8a4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d8a6:	697b      	ldr	r3, [r7, #20]
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	d00e      	beq.n	800d8ca <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d8ac:	2054      	movs	r0, #84	; 0x54
 800d8ae:	f001 f993 	bl	800ebd8 <pvPortMalloc>
 800d8b2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d8b4:	69fb      	ldr	r3, [r7, #28]
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	d003      	beq.n	800d8c2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d8ba:	69fb      	ldr	r3, [r7, #28]
 800d8bc:	697a      	ldr	r2, [r7, #20]
 800d8be:	631a      	str	r2, [r3, #48]	; 0x30
 800d8c0:	e005      	b.n	800d8ce <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d8c2:	6978      	ldr	r0, [r7, #20]
 800d8c4:	f001 fa54 	bl	800ed70 <vPortFree>
 800d8c8:	e001      	b.n	800d8ce <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d8ca:	2300      	movs	r3, #0
 800d8cc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d8ce:	69fb      	ldr	r3, [r7, #28]
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	d017      	beq.n	800d904 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d8d4:	69fb      	ldr	r3, [r7, #28]
 800d8d6:	2200      	movs	r2, #0
 800d8d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d8dc:	88fa      	ldrh	r2, [r7, #6]
 800d8de:	2300      	movs	r3, #0
 800d8e0:	9303      	str	r3, [sp, #12]
 800d8e2:	69fb      	ldr	r3, [r7, #28]
 800d8e4:	9302      	str	r3, [sp, #8]
 800d8e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8e8:	9301      	str	r3, [sp, #4]
 800d8ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8ec:	9300      	str	r3, [sp, #0]
 800d8ee:	683b      	ldr	r3, [r7, #0]
 800d8f0:	68b9      	ldr	r1, [r7, #8]
 800d8f2:	68f8      	ldr	r0, [r7, #12]
 800d8f4:	f000 f80e 	bl	800d914 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d8f8:	69f8      	ldr	r0, [r7, #28]
 800d8fa:	f000 f893 	bl	800da24 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d8fe:	2301      	movs	r3, #1
 800d900:	61bb      	str	r3, [r7, #24]
 800d902:	e002      	b.n	800d90a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d904:	f04f 33ff 	mov.w	r3, #4294967295
 800d908:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d90a:	69bb      	ldr	r3, [r7, #24]
	}
 800d90c:	4618      	mov	r0, r3
 800d90e:	3720      	adds	r7, #32
 800d910:	46bd      	mov	sp, r7
 800d912:	bd80      	pop	{r7, pc}

0800d914 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d914:	b580      	push	{r7, lr}
 800d916:	b088      	sub	sp, #32
 800d918:	af00      	add	r7, sp, #0
 800d91a:	60f8      	str	r0, [r7, #12]
 800d91c:	60b9      	str	r1, [r7, #8]
 800d91e:	607a      	str	r2, [r7, #4]
 800d920:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d924:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800d92c:	3b01      	subs	r3, #1
 800d92e:	009b      	lsls	r3, r3, #2
 800d930:	4413      	add	r3, r2
 800d932:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d934:	69bb      	ldr	r3, [r7, #24]
 800d936:	f023 0307 	bic.w	r3, r3, #7
 800d93a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d93c:	69bb      	ldr	r3, [r7, #24]
 800d93e:	f003 0307 	and.w	r3, r3, #7
 800d942:	2b00      	cmp	r3, #0
 800d944:	d00a      	beq.n	800d95c <prvInitialiseNewTask+0x48>
	__asm volatile
 800d946:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d94a:	f383 8811 	msr	BASEPRI, r3
 800d94e:	f3bf 8f6f 	isb	sy
 800d952:	f3bf 8f4f 	dsb	sy
 800d956:	617b      	str	r3, [r7, #20]
}
 800d958:	bf00      	nop
 800d95a:	e7fe      	b.n	800d95a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d95c:	68bb      	ldr	r3, [r7, #8]
 800d95e:	2b00      	cmp	r3, #0
 800d960:	d01f      	beq.n	800d9a2 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d962:	2300      	movs	r3, #0
 800d964:	61fb      	str	r3, [r7, #28]
 800d966:	e012      	b.n	800d98e <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d968:	68ba      	ldr	r2, [r7, #8]
 800d96a:	69fb      	ldr	r3, [r7, #28]
 800d96c:	4413      	add	r3, r2
 800d96e:	7819      	ldrb	r1, [r3, #0]
 800d970:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d972:	69fb      	ldr	r3, [r7, #28]
 800d974:	4413      	add	r3, r2
 800d976:	3334      	adds	r3, #52	; 0x34
 800d978:	460a      	mov	r2, r1
 800d97a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d97c:	68ba      	ldr	r2, [r7, #8]
 800d97e:	69fb      	ldr	r3, [r7, #28]
 800d980:	4413      	add	r3, r2
 800d982:	781b      	ldrb	r3, [r3, #0]
 800d984:	2b00      	cmp	r3, #0
 800d986:	d006      	beq.n	800d996 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d988:	69fb      	ldr	r3, [r7, #28]
 800d98a:	3301      	adds	r3, #1
 800d98c:	61fb      	str	r3, [r7, #28]
 800d98e:	69fb      	ldr	r3, [r7, #28]
 800d990:	2b0f      	cmp	r3, #15
 800d992:	d9e9      	bls.n	800d968 <prvInitialiseNewTask+0x54>
 800d994:	e000      	b.n	800d998 <prvInitialiseNewTask+0x84>
			{
				break;
 800d996:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d99a:	2200      	movs	r2, #0
 800d99c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d9a0:	e003      	b.n	800d9aa <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d9a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9a4:	2200      	movs	r2, #0
 800d9a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d9aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9ac:	2b06      	cmp	r3, #6
 800d9ae:	d901      	bls.n	800d9b4 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d9b0:	2306      	movs	r3, #6
 800d9b2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d9b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d9b8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d9ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d9be:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800d9c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9c2:	2200      	movs	r2, #0
 800d9c4:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d9c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9c8:	3304      	adds	r3, #4
 800d9ca:	4618      	mov	r0, r3
 800d9cc:	f7ff fabc 	bl	800cf48 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d9d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9d2:	3318      	adds	r3, #24
 800d9d4:	4618      	mov	r0, r3
 800d9d6:	f7ff fab7 	bl	800cf48 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d9da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d9de:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d9e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9e2:	f1c3 0207 	rsb	r2, r3, #7
 800d9e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9e8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d9ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d9ee:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d9f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9f2:	2200      	movs	r2, #0
 800d9f4:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d9f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9f8:	2200      	movs	r2, #0
 800d9fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d9fe:	683a      	ldr	r2, [r7, #0]
 800da00:	68f9      	ldr	r1, [r7, #12]
 800da02:	69b8      	ldr	r0, [r7, #24]
 800da04:	f000 fed6 	bl	800e7b4 <pxPortInitialiseStack>
 800da08:	4602      	mov	r2, r0
 800da0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da0c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800da0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da10:	2b00      	cmp	r3, #0
 800da12:	d002      	beq.n	800da1a <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800da14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800da18:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800da1a:	bf00      	nop
 800da1c:	3720      	adds	r7, #32
 800da1e:	46bd      	mov	sp, r7
 800da20:	bd80      	pop	{r7, pc}
	...

0800da24 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800da24:	b580      	push	{r7, lr}
 800da26:	b082      	sub	sp, #8
 800da28:	af00      	add	r7, sp, #0
 800da2a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800da2c:	f000 fff2 	bl	800ea14 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800da30:	4b2a      	ldr	r3, [pc, #168]	; (800dadc <prvAddNewTaskToReadyList+0xb8>)
 800da32:	681b      	ldr	r3, [r3, #0]
 800da34:	3301      	adds	r3, #1
 800da36:	4a29      	ldr	r2, [pc, #164]	; (800dadc <prvAddNewTaskToReadyList+0xb8>)
 800da38:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800da3a:	4b29      	ldr	r3, [pc, #164]	; (800dae0 <prvAddNewTaskToReadyList+0xbc>)
 800da3c:	681b      	ldr	r3, [r3, #0]
 800da3e:	2b00      	cmp	r3, #0
 800da40:	d109      	bne.n	800da56 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800da42:	4a27      	ldr	r2, [pc, #156]	; (800dae0 <prvAddNewTaskToReadyList+0xbc>)
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800da48:	4b24      	ldr	r3, [pc, #144]	; (800dadc <prvAddNewTaskToReadyList+0xb8>)
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	2b01      	cmp	r3, #1
 800da4e:	d110      	bne.n	800da72 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800da50:	f000 fce8 	bl	800e424 <prvInitialiseTaskLists>
 800da54:	e00d      	b.n	800da72 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800da56:	4b23      	ldr	r3, [pc, #140]	; (800dae4 <prvAddNewTaskToReadyList+0xc0>)
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	d109      	bne.n	800da72 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800da5e:	4b20      	ldr	r3, [pc, #128]	; (800dae0 <prvAddNewTaskToReadyList+0xbc>)
 800da60:	681b      	ldr	r3, [r3, #0]
 800da62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da68:	429a      	cmp	r2, r3
 800da6a:	d802      	bhi.n	800da72 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800da6c:	4a1c      	ldr	r2, [pc, #112]	; (800dae0 <prvAddNewTaskToReadyList+0xbc>)
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800da72:	4b1d      	ldr	r3, [pc, #116]	; (800dae8 <prvAddNewTaskToReadyList+0xc4>)
 800da74:	681b      	ldr	r3, [r3, #0]
 800da76:	3301      	adds	r3, #1
 800da78:	4a1b      	ldr	r2, [pc, #108]	; (800dae8 <prvAddNewTaskToReadyList+0xc4>)
 800da7a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da80:	2201      	movs	r2, #1
 800da82:	409a      	lsls	r2, r3
 800da84:	4b19      	ldr	r3, [pc, #100]	; (800daec <prvAddNewTaskToReadyList+0xc8>)
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	4313      	orrs	r3, r2
 800da8a:	4a18      	ldr	r2, [pc, #96]	; (800daec <prvAddNewTaskToReadyList+0xc8>)
 800da8c:	6013      	str	r3, [r2, #0]
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da92:	4613      	mov	r3, r2
 800da94:	009b      	lsls	r3, r3, #2
 800da96:	4413      	add	r3, r2
 800da98:	009b      	lsls	r3, r3, #2
 800da9a:	4a15      	ldr	r2, [pc, #84]	; (800daf0 <prvAddNewTaskToReadyList+0xcc>)
 800da9c:	441a      	add	r2, r3
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	3304      	adds	r3, #4
 800daa2:	4619      	mov	r1, r3
 800daa4:	4610      	mov	r0, r2
 800daa6:	f7ff fa5c 	bl	800cf62 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800daaa:	f000 ffe3 	bl	800ea74 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800daae:	4b0d      	ldr	r3, [pc, #52]	; (800dae4 <prvAddNewTaskToReadyList+0xc0>)
 800dab0:	681b      	ldr	r3, [r3, #0]
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	d00e      	beq.n	800dad4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800dab6:	4b0a      	ldr	r3, [pc, #40]	; (800dae0 <prvAddNewTaskToReadyList+0xbc>)
 800dab8:	681b      	ldr	r3, [r3, #0]
 800daba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dac0:	429a      	cmp	r2, r3
 800dac2:	d207      	bcs.n	800dad4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800dac4:	4b0b      	ldr	r3, [pc, #44]	; (800daf4 <prvAddNewTaskToReadyList+0xd0>)
 800dac6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800daca:	601a      	str	r2, [r3, #0]
 800dacc:	f3bf 8f4f 	dsb	sy
 800dad0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dad4:	bf00      	nop
 800dad6:	3708      	adds	r7, #8
 800dad8:	46bd      	mov	sp, r7
 800dada:	bd80      	pop	{r7, pc}
 800dadc:	20002c20 	.word	0x20002c20
 800dae0:	20002b20 	.word	0x20002b20
 800dae4:	20002c2c 	.word	0x20002c2c
 800dae8:	20002c3c 	.word	0x20002c3c
 800daec:	20002c28 	.word	0x20002c28
 800daf0:	20002b24 	.word	0x20002b24
 800daf4:	e000ed04 	.word	0xe000ed04

0800daf8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800daf8:	b580      	push	{r7, lr}
 800dafa:	b084      	sub	sp, #16
 800dafc:	af00      	add	r7, sp, #0
 800dafe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800db00:	2300      	movs	r3, #0
 800db02:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	2b00      	cmp	r3, #0
 800db08:	d017      	beq.n	800db3a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800db0a:	4b13      	ldr	r3, [pc, #76]	; (800db58 <vTaskDelay+0x60>)
 800db0c:	681b      	ldr	r3, [r3, #0]
 800db0e:	2b00      	cmp	r3, #0
 800db10:	d00a      	beq.n	800db28 <vTaskDelay+0x30>
	__asm volatile
 800db12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db16:	f383 8811 	msr	BASEPRI, r3
 800db1a:	f3bf 8f6f 	isb	sy
 800db1e:	f3bf 8f4f 	dsb	sy
 800db22:	60bb      	str	r3, [r7, #8]
}
 800db24:	bf00      	nop
 800db26:	e7fe      	b.n	800db26 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800db28:	f000 f99c 	bl	800de64 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800db2c:	2100      	movs	r1, #0
 800db2e:	6878      	ldr	r0, [r7, #4]
 800db30:	f000 fdda 	bl	800e6e8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800db34:	f000 f9a4 	bl	800de80 <xTaskResumeAll>
 800db38:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800db3a:	68fb      	ldr	r3, [r7, #12]
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	d107      	bne.n	800db50 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800db40:	4b06      	ldr	r3, [pc, #24]	; (800db5c <vTaskDelay+0x64>)
 800db42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800db46:	601a      	str	r2, [r3, #0]
 800db48:	f3bf 8f4f 	dsb	sy
 800db4c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800db50:	bf00      	nop
 800db52:	3710      	adds	r7, #16
 800db54:	46bd      	mov	sp, r7
 800db56:	bd80      	pop	{r7, pc}
 800db58:	20002c48 	.word	0x20002c48
 800db5c:	e000ed04 	.word	0xe000ed04

0800db60 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800db60:	b580      	push	{r7, lr}
 800db62:	b084      	sub	sp, #16
 800db64:	af00      	add	r7, sp, #0
 800db66:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800db68:	f000 ff54 	bl	800ea14 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	2b00      	cmp	r3, #0
 800db70:	d102      	bne.n	800db78 <vTaskSuspend+0x18>
 800db72:	4b3c      	ldr	r3, [pc, #240]	; (800dc64 <vTaskSuspend+0x104>)
 800db74:	681b      	ldr	r3, [r3, #0]
 800db76:	e000      	b.n	800db7a <vTaskSuspend+0x1a>
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800db7c:	68fb      	ldr	r3, [r7, #12]
 800db7e:	3304      	adds	r3, #4
 800db80:	4618      	mov	r0, r3
 800db82:	f7ff fa4b 	bl	800d01c <uxListRemove>
 800db86:	4603      	mov	r3, r0
 800db88:	2b00      	cmp	r3, #0
 800db8a:	d115      	bne.n	800dbb8 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800db8c:	68fb      	ldr	r3, [r7, #12]
 800db8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db90:	4935      	ldr	r1, [pc, #212]	; (800dc68 <vTaskSuspend+0x108>)
 800db92:	4613      	mov	r3, r2
 800db94:	009b      	lsls	r3, r3, #2
 800db96:	4413      	add	r3, r2
 800db98:	009b      	lsls	r3, r3, #2
 800db9a:	440b      	add	r3, r1
 800db9c:	681b      	ldr	r3, [r3, #0]
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	d10a      	bne.n	800dbb8 <vTaskSuspend+0x58>
 800dba2:	68fb      	ldr	r3, [r7, #12]
 800dba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dba6:	2201      	movs	r2, #1
 800dba8:	fa02 f303 	lsl.w	r3, r2, r3
 800dbac:	43da      	mvns	r2, r3
 800dbae:	4b2f      	ldr	r3, [pc, #188]	; (800dc6c <vTaskSuspend+0x10c>)
 800dbb0:	681b      	ldr	r3, [r3, #0]
 800dbb2:	4013      	ands	r3, r2
 800dbb4:	4a2d      	ldr	r2, [pc, #180]	; (800dc6c <vTaskSuspend+0x10c>)
 800dbb6:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800dbb8:	68fb      	ldr	r3, [r7, #12]
 800dbba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	d004      	beq.n	800dbca <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800dbc0:	68fb      	ldr	r3, [r7, #12]
 800dbc2:	3318      	adds	r3, #24
 800dbc4:	4618      	mov	r0, r3
 800dbc6:	f7ff fa29 	bl	800d01c <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800dbca:	68fb      	ldr	r3, [r7, #12]
 800dbcc:	3304      	adds	r3, #4
 800dbce:	4619      	mov	r1, r3
 800dbd0:	4827      	ldr	r0, [pc, #156]	; (800dc70 <vTaskSuspend+0x110>)
 800dbd2:	f7ff f9c6 	bl	800cf62 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800dbd6:	68fb      	ldr	r3, [r7, #12]
 800dbd8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800dbdc:	b2db      	uxtb	r3, r3
 800dbde:	2b01      	cmp	r3, #1
 800dbe0:	d103      	bne.n	800dbea <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800dbe2:	68fb      	ldr	r3, [r7, #12]
 800dbe4:	2200      	movs	r2, #0
 800dbe6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800dbea:	f000 ff43 	bl	800ea74 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800dbee:	4b21      	ldr	r3, [pc, #132]	; (800dc74 <vTaskSuspend+0x114>)
 800dbf0:	681b      	ldr	r3, [r3, #0]
 800dbf2:	2b00      	cmp	r3, #0
 800dbf4:	d005      	beq.n	800dc02 <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800dbf6:	f000 ff0d 	bl	800ea14 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800dbfa:	f000 fcb1 	bl	800e560 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800dbfe:	f000 ff39 	bl	800ea74 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800dc02:	4b18      	ldr	r3, [pc, #96]	; (800dc64 <vTaskSuspend+0x104>)
 800dc04:	681b      	ldr	r3, [r3, #0]
 800dc06:	68fa      	ldr	r2, [r7, #12]
 800dc08:	429a      	cmp	r2, r3
 800dc0a:	d127      	bne.n	800dc5c <vTaskSuspend+0xfc>
		{
			if( xSchedulerRunning != pdFALSE )
 800dc0c:	4b19      	ldr	r3, [pc, #100]	; (800dc74 <vTaskSuspend+0x114>)
 800dc0e:	681b      	ldr	r3, [r3, #0]
 800dc10:	2b00      	cmp	r3, #0
 800dc12:	d017      	beq.n	800dc44 <vTaskSuspend+0xe4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800dc14:	4b18      	ldr	r3, [pc, #96]	; (800dc78 <vTaskSuspend+0x118>)
 800dc16:	681b      	ldr	r3, [r3, #0]
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	d00a      	beq.n	800dc32 <vTaskSuspend+0xd2>
	__asm volatile
 800dc1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc20:	f383 8811 	msr	BASEPRI, r3
 800dc24:	f3bf 8f6f 	isb	sy
 800dc28:	f3bf 8f4f 	dsb	sy
 800dc2c:	60bb      	str	r3, [r7, #8]
}
 800dc2e:	bf00      	nop
 800dc30:	e7fe      	b.n	800dc30 <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 800dc32:	4b12      	ldr	r3, [pc, #72]	; (800dc7c <vTaskSuspend+0x11c>)
 800dc34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dc38:	601a      	str	r2, [r3, #0]
 800dc3a:	f3bf 8f4f 	dsb	sy
 800dc3e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800dc42:	e00b      	b.n	800dc5c <vTaskSuspend+0xfc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800dc44:	4b0a      	ldr	r3, [pc, #40]	; (800dc70 <vTaskSuspend+0x110>)
 800dc46:	681a      	ldr	r2, [r3, #0]
 800dc48:	4b0d      	ldr	r3, [pc, #52]	; (800dc80 <vTaskSuspend+0x120>)
 800dc4a:	681b      	ldr	r3, [r3, #0]
 800dc4c:	429a      	cmp	r2, r3
 800dc4e:	d103      	bne.n	800dc58 <vTaskSuspend+0xf8>
					pxCurrentTCB = NULL;
 800dc50:	4b04      	ldr	r3, [pc, #16]	; (800dc64 <vTaskSuspend+0x104>)
 800dc52:	2200      	movs	r2, #0
 800dc54:	601a      	str	r2, [r3, #0]
	}
 800dc56:	e001      	b.n	800dc5c <vTaskSuspend+0xfc>
					vTaskSwitchContext();
 800dc58:	f000 fa66 	bl	800e128 <vTaskSwitchContext>
	}
 800dc5c:	bf00      	nop
 800dc5e:	3710      	adds	r7, #16
 800dc60:	46bd      	mov	sp, r7
 800dc62:	bd80      	pop	{r7, pc}
 800dc64:	20002b20 	.word	0x20002b20
 800dc68:	20002b24 	.word	0x20002b24
 800dc6c:	20002c28 	.word	0x20002c28
 800dc70:	20002c0c 	.word	0x20002c0c
 800dc74:	20002c2c 	.word	0x20002c2c
 800dc78:	20002c48 	.word	0x20002c48
 800dc7c:	e000ed04 	.word	0xe000ed04
 800dc80:	20002c20 	.word	0x20002c20

0800dc84 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 800dc84:	b480      	push	{r7}
 800dc86:	b087      	sub	sp, #28
 800dc88:	af00      	add	r7, sp, #0
 800dc8a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 800dc8c:	2300      	movs	r3, #0
 800dc8e:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	2b00      	cmp	r3, #0
 800dc98:	d10a      	bne.n	800dcb0 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 800dc9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc9e:	f383 8811 	msr	BASEPRI, r3
 800dca2:	f3bf 8f6f 	isb	sy
 800dca6:	f3bf 8f4f 	dsb	sy
 800dcaa:	60fb      	str	r3, [r7, #12]
}
 800dcac:	bf00      	nop
 800dcae:	e7fe      	b.n	800dcae <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800dcb0:	693b      	ldr	r3, [r7, #16]
 800dcb2:	695b      	ldr	r3, [r3, #20]
 800dcb4:	4a0a      	ldr	r2, [pc, #40]	; (800dce0 <prvTaskIsTaskSuspended+0x5c>)
 800dcb6:	4293      	cmp	r3, r2
 800dcb8:	d10a      	bne.n	800dcd0 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800dcba:	693b      	ldr	r3, [r7, #16]
 800dcbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dcbe:	4a09      	ldr	r2, [pc, #36]	; (800dce4 <prvTaskIsTaskSuspended+0x60>)
 800dcc0:	4293      	cmp	r3, r2
 800dcc2:	d005      	beq.n	800dcd0 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 800dcc4:	693b      	ldr	r3, [r7, #16]
 800dcc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	d101      	bne.n	800dcd0 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 800dccc:	2301      	movs	r3, #1
 800dcce:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800dcd0:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800dcd2:	4618      	mov	r0, r3
 800dcd4:	371c      	adds	r7, #28
 800dcd6:	46bd      	mov	sp, r7
 800dcd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcdc:	4770      	bx	lr
 800dcde:	bf00      	nop
 800dce0:	20002c0c 	.word	0x20002c0c
 800dce4:	20002be0 	.word	0x20002be0

0800dce8 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 800dce8:	b580      	push	{r7, lr}
 800dcea:	b084      	sub	sp, #16
 800dcec:	af00      	add	r7, sp, #0
 800dcee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	d10a      	bne.n	800dd10 <vTaskResume+0x28>
	__asm volatile
 800dcfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcfe:	f383 8811 	msr	BASEPRI, r3
 800dd02:	f3bf 8f6f 	isb	sy
 800dd06:	f3bf 8f4f 	dsb	sy
 800dd0a:	60bb      	str	r3, [r7, #8]
}
 800dd0c:	bf00      	nop
 800dd0e:	e7fe      	b.n	800dd0e <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 800dd10:	4b20      	ldr	r3, [pc, #128]	; (800dd94 <vTaskResume+0xac>)
 800dd12:	681b      	ldr	r3, [r3, #0]
 800dd14:	68fa      	ldr	r2, [r7, #12]
 800dd16:	429a      	cmp	r2, r3
 800dd18:	d037      	beq.n	800dd8a <vTaskResume+0xa2>
 800dd1a:	68fb      	ldr	r3, [r7, #12]
 800dd1c:	2b00      	cmp	r3, #0
 800dd1e:	d034      	beq.n	800dd8a <vTaskResume+0xa2>
		{
			taskENTER_CRITICAL();
 800dd20:	f000 fe78 	bl	800ea14 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800dd24:	68f8      	ldr	r0, [r7, #12]
 800dd26:	f7ff ffad 	bl	800dc84 <prvTaskIsTaskSuspended>
 800dd2a:	4603      	mov	r3, r0
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	d02a      	beq.n	800dd86 <vTaskResume+0x9e>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 800dd30:	68fb      	ldr	r3, [r7, #12]
 800dd32:	3304      	adds	r3, #4
 800dd34:	4618      	mov	r0, r3
 800dd36:	f7ff f971 	bl	800d01c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800dd3a:	68fb      	ldr	r3, [r7, #12]
 800dd3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd3e:	2201      	movs	r2, #1
 800dd40:	409a      	lsls	r2, r3
 800dd42:	4b15      	ldr	r3, [pc, #84]	; (800dd98 <vTaskResume+0xb0>)
 800dd44:	681b      	ldr	r3, [r3, #0]
 800dd46:	4313      	orrs	r3, r2
 800dd48:	4a13      	ldr	r2, [pc, #76]	; (800dd98 <vTaskResume+0xb0>)
 800dd4a:	6013      	str	r3, [r2, #0]
 800dd4c:	68fb      	ldr	r3, [r7, #12]
 800dd4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd50:	4613      	mov	r3, r2
 800dd52:	009b      	lsls	r3, r3, #2
 800dd54:	4413      	add	r3, r2
 800dd56:	009b      	lsls	r3, r3, #2
 800dd58:	4a10      	ldr	r2, [pc, #64]	; (800dd9c <vTaskResume+0xb4>)
 800dd5a:	441a      	add	r2, r3
 800dd5c:	68fb      	ldr	r3, [r7, #12]
 800dd5e:	3304      	adds	r3, #4
 800dd60:	4619      	mov	r1, r3
 800dd62:	4610      	mov	r0, r2
 800dd64:	f7ff f8fd 	bl	800cf62 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800dd68:	68fb      	ldr	r3, [r7, #12]
 800dd6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd6c:	4b09      	ldr	r3, [pc, #36]	; (800dd94 <vTaskResume+0xac>)
 800dd6e:	681b      	ldr	r3, [r3, #0]
 800dd70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd72:	429a      	cmp	r2, r3
 800dd74:	d307      	bcc.n	800dd86 <vTaskResume+0x9e>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 800dd76:	4b0a      	ldr	r3, [pc, #40]	; (800dda0 <vTaskResume+0xb8>)
 800dd78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dd7c:	601a      	str	r2, [r3, #0]
 800dd7e:	f3bf 8f4f 	dsb	sy
 800dd82:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 800dd86:	f000 fe75 	bl	800ea74 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800dd8a:	bf00      	nop
 800dd8c:	3710      	adds	r7, #16
 800dd8e:	46bd      	mov	sp, r7
 800dd90:	bd80      	pop	{r7, pc}
 800dd92:	bf00      	nop
 800dd94:	20002b20 	.word	0x20002b20
 800dd98:	20002c28 	.word	0x20002c28
 800dd9c:	20002b24 	.word	0x20002b24
 800dda0:	e000ed04 	.word	0xe000ed04

0800dda4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800dda4:	b580      	push	{r7, lr}
 800dda6:	b08a      	sub	sp, #40	; 0x28
 800dda8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ddaa:	2300      	movs	r3, #0
 800ddac:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ddae:	2300      	movs	r3, #0
 800ddb0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ddb2:	463a      	mov	r2, r7
 800ddb4:	1d39      	adds	r1, r7, #4
 800ddb6:	f107 0308 	add.w	r3, r7, #8
 800ddba:	4618      	mov	r0, r3
 800ddbc:	f7f3 f8e6 	bl	8000f8c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ddc0:	6839      	ldr	r1, [r7, #0]
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	68ba      	ldr	r2, [r7, #8]
 800ddc6:	9202      	str	r2, [sp, #8]
 800ddc8:	9301      	str	r3, [sp, #4]
 800ddca:	2300      	movs	r3, #0
 800ddcc:	9300      	str	r3, [sp, #0]
 800ddce:	2300      	movs	r3, #0
 800ddd0:	460a      	mov	r2, r1
 800ddd2:	491e      	ldr	r1, [pc, #120]	; (800de4c <vTaskStartScheduler+0xa8>)
 800ddd4:	481e      	ldr	r0, [pc, #120]	; (800de50 <vTaskStartScheduler+0xac>)
 800ddd6:	f7ff fcfb 	bl	800d7d0 <xTaskCreateStatic>
 800ddda:	4603      	mov	r3, r0
 800dddc:	4a1d      	ldr	r2, [pc, #116]	; (800de54 <vTaskStartScheduler+0xb0>)
 800ddde:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800dde0:	4b1c      	ldr	r3, [pc, #112]	; (800de54 <vTaskStartScheduler+0xb0>)
 800dde2:	681b      	ldr	r3, [r3, #0]
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	d002      	beq.n	800ddee <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800dde8:	2301      	movs	r3, #1
 800ddea:	617b      	str	r3, [r7, #20]
 800ddec:	e001      	b.n	800ddf2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800ddee:	2300      	movs	r3, #0
 800ddf0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ddf2:	697b      	ldr	r3, [r7, #20]
 800ddf4:	2b01      	cmp	r3, #1
 800ddf6:	d116      	bne.n	800de26 <vTaskStartScheduler+0x82>
	__asm volatile
 800ddf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddfc:	f383 8811 	msr	BASEPRI, r3
 800de00:	f3bf 8f6f 	isb	sy
 800de04:	f3bf 8f4f 	dsb	sy
 800de08:	613b      	str	r3, [r7, #16]
}
 800de0a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800de0c:	4b12      	ldr	r3, [pc, #72]	; (800de58 <vTaskStartScheduler+0xb4>)
 800de0e:	f04f 32ff 	mov.w	r2, #4294967295
 800de12:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800de14:	4b11      	ldr	r3, [pc, #68]	; (800de5c <vTaskStartScheduler+0xb8>)
 800de16:	2201      	movs	r2, #1
 800de18:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800de1a:	4b11      	ldr	r3, [pc, #68]	; (800de60 <vTaskStartScheduler+0xbc>)
 800de1c:	2200      	movs	r2, #0
 800de1e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800de20:	f000 fd56 	bl	800e8d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800de24:	e00e      	b.n	800de44 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800de26:	697b      	ldr	r3, [r7, #20]
 800de28:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de2c:	d10a      	bne.n	800de44 <vTaskStartScheduler+0xa0>
	__asm volatile
 800de2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de32:	f383 8811 	msr	BASEPRI, r3
 800de36:	f3bf 8f6f 	isb	sy
 800de3a:	f3bf 8f4f 	dsb	sy
 800de3e:	60fb      	str	r3, [r7, #12]
}
 800de40:	bf00      	nop
 800de42:	e7fe      	b.n	800de42 <vTaskStartScheduler+0x9e>
}
 800de44:	bf00      	nop
 800de46:	3718      	adds	r7, #24
 800de48:	46bd      	mov	sp, r7
 800de4a:	bd80      	pop	{r7, pc}
 800de4c:	08014558 	.word	0x08014558
 800de50:	0800e3f5 	.word	0x0800e3f5
 800de54:	20002c44 	.word	0x20002c44
 800de58:	20002c40 	.word	0x20002c40
 800de5c:	20002c2c 	.word	0x20002c2c
 800de60:	20002c24 	.word	0x20002c24

0800de64 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800de64:	b480      	push	{r7}
 800de66:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800de68:	4b04      	ldr	r3, [pc, #16]	; (800de7c <vTaskSuspendAll+0x18>)
 800de6a:	681b      	ldr	r3, [r3, #0]
 800de6c:	3301      	adds	r3, #1
 800de6e:	4a03      	ldr	r2, [pc, #12]	; (800de7c <vTaskSuspendAll+0x18>)
 800de70:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800de72:	bf00      	nop
 800de74:	46bd      	mov	sp, r7
 800de76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de7a:	4770      	bx	lr
 800de7c:	20002c48 	.word	0x20002c48

0800de80 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800de80:	b580      	push	{r7, lr}
 800de82:	b084      	sub	sp, #16
 800de84:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800de86:	2300      	movs	r3, #0
 800de88:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800de8a:	2300      	movs	r3, #0
 800de8c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800de8e:	4b41      	ldr	r3, [pc, #260]	; (800df94 <xTaskResumeAll+0x114>)
 800de90:	681b      	ldr	r3, [r3, #0]
 800de92:	2b00      	cmp	r3, #0
 800de94:	d10a      	bne.n	800deac <xTaskResumeAll+0x2c>
	__asm volatile
 800de96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de9a:	f383 8811 	msr	BASEPRI, r3
 800de9e:	f3bf 8f6f 	isb	sy
 800dea2:	f3bf 8f4f 	dsb	sy
 800dea6:	603b      	str	r3, [r7, #0]
}
 800dea8:	bf00      	nop
 800deaa:	e7fe      	b.n	800deaa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800deac:	f000 fdb2 	bl	800ea14 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800deb0:	4b38      	ldr	r3, [pc, #224]	; (800df94 <xTaskResumeAll+0x114>)
 800deb2:	681b      	ldr	r3, [r3, #0]
 800deb4:	3b01      	subs	r3, #1
 800deb6:	4a37      	ldr	r2, [pc, #220]	; (800df94 <xTaskResumeAll+0x114>)
 800deb8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800deba:	4b36      	ldr	r3, [pc, #216]	; (800df94 <xTaskResumeAll+0x114>)
 800debc:	681b      	ldr	r3, [r3, #0]
 800debe:	2b00      	cmp	r3, #0
 800dec0:	d161      	bne.n	800df86 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800dec2:	4b35      	ldr	r3, [pc, #212]	; (800df98 <xTaskResumeAll+0x118>)
 800dec4:	681b      	ldr	r3, [r3, #0]
 800dec6:	2b00      	cmp	r3, #0
 800dec8:	d05d      	beq.n	800df86 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800deca:	e02e      	b.n	800df2a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800decc:	4b33      	ldr	r3, [pc, #204]	; (800df9c <xTaskResumeAll+0x11c>)
 800dece:	68db      	ldr	r3, [r3, #12]
 800ded0:	68db      	ldr	r3, [r3, #12]
 800ded2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ded4:	68fb      	ldr	r3, [r7, #12]
 800ded6:	3318      	adds	r3, #24
 800ded8:	4618      	mov	r0, r3
 800deda:	f7ff f89f 	bl	800d01c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dede:	68fb      	ldr	r3, [r7, #12]
 800dee0:	3304      	adds	r3, #4
 800dee2:	4618      	mov	r0, r3
 800dee4:	f7ff f89a 	bl	800d01c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800dee8:	68fb      	ldr	r3, [r7, #12]
 800deea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800deec:	2201      	movs	r2, #1
 800deee:	409a      	lsls	r2, r3
 800def0:	4b2b      	ldr	r3, [pc, #172]	; (800dfa0 <xTaskResumeAll+0x120>)
 800def2:	681b      	ldr	r3, [r3, #0]
 800def4:	4313      	orrs	r3, r2
 800def6:	4a2a      	ldr	r2, [pc, #168]	; (800dfa0 <xTaskResumeAll+0x120>)
 800def8:	6013      	str	r3, [r2, #0]
 800defa:	68fb      	ldr	r3, [r7, #12]
 800defc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800defe:	4613      	mov	r3, r2
 800df00:	009b      	lsls	r3, r3, #2
 800df02:	4413      	add	r3, r2
 800df04:	009b      	lsls	r3, r3, #2
 800df06:	4a27      	ldr	r2, [pc, #156]	; (800dfa4 <xTaskResumeAll+0x124>)
 800df08:	441a      	add	r2, r3
 800df0a:	68fb      	ldr	r3, [r7, #12]
 800df0c:	3304      	adds	r3, #4
 800df0e:	4619      	mov	r1, r3
 800df10:	4610      	mov	r0, r2
 800df12:	f7ff f826 	bl	800cf62 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800df16:	68fb      	ldr	r3, [r7, #12]
 800df18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df1a:	4b23      	ldr	r3, [pc, #140]	; (800dfa8 <xTaskResumeAll+0x128>)
 800df1c:	681b      	ldr	r3, [r3, #0]
 800df1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df20:	429a      	cmp	r2, r3
 800df22:	d302      	bcc.n	800df2a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800df24:	4b21      	ldr	r3, [pc, #132]	; (800dfac <xTaskResumeAll+0x12c>)
 800df26:	2201      	movs	r2, #1
 800df28:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800df2a:	4b1c      	ldr	r3, [pc, #112]	; (800df9c <xTaskResumeAll+0x11c>)
 800df2c:	681b      	ldr	r3, [r3, #0]
 800df2e:	2b00      	cmp	r3, #0
 800df30:	d1cc      	bne.n	800decc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800df32:	68fb      	ldr	r3, [r7, #12]
 800df34:	2b00      	cmp	r3, #0
 800df36:	d001      	beq.n	800df3c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800df38:	f000 fb12 	bl	800e560 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800df3c:	4b1c      	ldr	r3, [pc, #112]	; (800dfb0 <xTaskResumeAll+0x130>)
 800df3e:	681b      	ldr	r3, [r3, #0]
 800df40:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	2b00      	cmp	r3, #0
 800df46:	d010      	beq.n	800df6a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800df48:	f000 f836 	bl	800dfb8 <xTaskIncrementTick>
 800df4c:	4603      	mov	r3, r0
 800df4e:	2b00      	cmp	r3, #0
 800df50:	d002      	beq.n	800df58 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800df52:	4b16      	ldr	r3, [pc, #88]	; (800dfac <xTaskResumeAll+0x12c>)
 800df54:	2201      	movs	r2, #1
 800df56:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	3b01      	subs	r3, #1
 800df5c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	2b00      	cmp	r3, #0
 800df62:	d1f1      	bne.n	800df48 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800df64:	4b12      	ldr	r3, [pc, #72]	; (800dfb0 <xTaskResumeAll+0x130>)
 800df66:	2200      	movs	r2, #0
 800df68:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800df6a:	4b10      	ldr	r3, [pc, #64]	; (800dfac <xTaskResumeAll+0x12c>)
 800df6c:	681b      	ldr	r3, [r3, #0]
 800df6e:	2b00      	cmp	r3, #0
 800df70:	d009      	beq.n	800df86 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800df72:	2301      	movs	r3, #1
 800df74:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800df76:	4b0f      	ldr	r3, [pc, #60]	; (800dfb4 <xTaskResumeAll+0x134>)
 800df78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800df7c:	601a      	str	r2, [r3, #0]
 800df7e:	f3bf 8f4f 	dsb	sy
 800df82:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800df86:	f000 fd75 	bl	800ea74 <vPortExitCritical>

	return xAlreadyYielded;
 800df8a:	68bb      	ldr	r3, [r7, #8]
}
 800df8c:	4618      	mov	r0, r3
 800df8e:	3710      	adds	r7, #16
 800df90:	46bd      	mov	sp, r7
 800df92:	bd80      	pop	{r7, pc}
 800df94:	20002c48 	.word	0x20002c48
 800df98:	20002c20 	.word	0x20002c20
 800df9c:	20002be0 	.word	0x20002be0
 800dfa0:	20002c28 	.word	0x20002c28
 800dfa4:	20002b24 	.word	0x20002b24
 800dfa8:	20002b20 	.word	0x20002b20
 800dfac:	20002c34 	.word	0x20002c34
 800dfb0:	20002c30 	.word	0x20002c30
 800dfb4:	e000ed04 	.word	0xe000ed04

0800dfb8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800dfb8:	b580      	push	{r7, lr}
 800dfba:	b086      	sub	sp, #24
 800dfbc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800dfbe:	2300      	movs	r3, #0
 800dfc0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dfc2:	4b4e      	ldr	r3, [pc, #312]	; (800e0fc <xTaskIncrementTick+0x144>)
 800dfc4:	681b      	ldr	r3, [r3, #0]
 800dfc6:	2b00      	cmp	r3, #0
 800dfc8:	f040 808e 	bne.w	800e0e8 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800dfcc:	4b4c      	ldr	r3, [pc, #304]	; (800e100 <xTaskIncrementTick+0x148>)
 800dfce:	681b      	ldr	r3, [r3, #0]
 800dfd0:	3301      	adds	r3, #1
 800dfd2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800dfd4:	4a4a      	ldr	r2, [pc, #296]	; (800e100 <xTaskIncrementTick+0x148>)
 800dfd6:	693b      	ldr	r3, [r7, #16]
 800dfd8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800dfda:	693b      	ldr	r3, [r7, #16]
 800dfdc:	2b00      	cmp	r3, #0
 800dfde:	d120      	bne.n	800e022 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800dfe0:	4b48      	ldr	r3, [pc, #288]	; (800e104 <xTaskIncrementTick+0x14c>)
 800dfe2:	681b      	ldr	r3, [r3, #0]
 800dfe4:	681b      	ldr	r3, [r3, #0]
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	d00a      	beq.n	800e000 <xTaskIncrementTick+0x48>
	__asm volatile
 800dfea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfee:	f383 8811 	msr	BASEPRI, r3
 800dff2:	f3bf 8f6f 	isb	sy
 800dff6:	f3bf 8f4f 	dsb	sy
 800dffa:	603b      	str	r3, [r7, #0]
}
 800dffc:	bf00      	nop
 800dffe:	e7fe      	b.n	800dffe <xTaskIncrementTick+0x46>
 800e000:	4b40      	ldr	r3, [pc, #256]	; (800e104 <xTaskIncrementTick+0x14c>)
 800e002:	681b      	ldr	r3, [r3, #0]
 800e004:	60fb      	str	r3, [r7, #12]
 800e006:	4b40      	ldr	r3, [pc, #256]	; (800e108 <xTaskIncrementTick+0x150>)
 800e008:	681b      	ldr	r3, [r3, #0]
 800e00a:	4a3e      	ldr	r2, [pc, #248]	; (800e104 <xTaskIncrementTick+0x14c>)
 800e00c:	6013      	str	r3, [r2, #0]
 800e00e:	4a3e      	ldr	r2, [pc, #248]	; (800e108 <xTaskIncrementTick+0x150>)
 800e010:	68fb      	ldr	r3, [r7, #12]
 800e012:	6013      	str	r3, [r2, #0]
 800e014:	4b3d      	ldr	r3, [pc, #244]	; (800e10c <xTaskIncrementTick+0x154>)
 800e016:	681b      	ldr	r3, [r3, #0]
 800e018:	3301      	adds	r3, #1
 800e01a:	4a3c      	ldr	r2, [pc, #240]	; (800e10c <xTaskIncrementTick+0x154>)
 800e01c:	6013      	str	r3, [r2, #0]
 800e01e:	f000 fa9f 	bl	800e560 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e022:	4b3b      	ldr	r3, [pc, #236]	; (800e110 <xTaskIncrementTick+0x158>)
 800e024:	681b      	ldr	r3, [r3, #0]
 800e026:	693a      	ldr	r2, [r7, #16]
 800e028:	429a      	cmp	r2, r3
 800e02a:	d348      	bcc.n	800e0be <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e02c:	4b35      	ldr	r3, [pc, #212]	; (800e104 <xTaskIncrementTick+0x14c>)
 800e02e:	681b      	ldr	r3, [r3, #0]
 800e030:	681b      	ldr	r3, [r3, #0]
 800e032:	2b00      	cmp	r3, #0
 800e034:	d104      	bne.n	800e040 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e036:	4b36      	ldr	r3, [pc, #216]	; (800e110 <xTaskIncrementTick+0x158>)
 800e038:	f04f 32ff 	mov.w	r2, #4294967295
 800e03c:	601a      	str	r2, [r3, #0]
					break;
 800e03e:	e03e      	b.n	800e0be <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e040:	4b30      	ldr	r3, [pc, #192]	; (800e104 <xTaskIncrementTick+0x14c>)
 800e042:	681b      	ldr	r3, [r3, #0]
 800e044:	68db      	ldr	r3, [r3, #12]
 800e046:	68db      	ldr	r3, [r3, #12]
 800e048:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e04a:	68bb      	ldr	r3, [r7, #8]
 800e04c:	685b      	ldr	r3, [r3, #4]
 800e04e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e050:	693a      	ldr	r2, [r7, #16]
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	429a      	cmp	r2, r3
 800e056:	d203      	bcs.n	800e060 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e058:	4a2d      	ldr	r2, [pc, #180]	; (800e110 <xTaskIncrementTick+0x158>)
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e05e:	e02e      	b.n	800e0be <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e060:	68bb      	ldr	r3, [r7, #8]
 800e062:	3304      	adds	r3, #4
 800e064:	4618      	mov	r0, r3
 800e066:	f7fe ffd9 	bl	800d01c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e06a:	68bb      	ldr	r3, [r7, #8]
 800e06c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e06e:	2b00      	cmp	r3, #0
 800e070:	d004      	beq.n	800e07c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e072:	68bb      	ldr	r3, [r7, #8]
 800e074:	3318      	adds	r3, #24
 800e076:	4618      	mov	r0, r3
 800e078:	f7fe ffd0 	bl	800d01c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e07c:	68bb      	ldr	r3, [r7, #8]
 800e07e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e080:	2201      	movs	r2, #1
 800e082:	409a      	lsls	r2, r3
 800e084:	4b23      	ldr	r3, [pc, #140]	; (800e114 <xTaskIncrementTick+0x15c>)
 800e086:	681b      	ldr	r3, [r3, #0]
 800e088:	4313      	orrs	r3, r2
 800e08a:	4a22      	ldr	r2, [pc, #136]	; (800e114 <xTaskIncrementTick+0x15c>)
 800e08c:	6013      	str	r3, [r2, #0]
 800e08e:	68bb      	ldr	r3, [r7, #8]
 800e090:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e092:	4613      	mov	r3, r2
 800e094:	009b      	lsls	r3, r3, #2
 800e096:	4413      	add	r3, r2
 800e098:	009b      	lsls	r3, r3, #2
 800e09a:	4a1f      	ldr	r2, [pc, #124]	; (800e118 <xTaskIncrementTick+0x160>)
 800e09c:	441a      	add	r2, r3
 800e09e:	68bb      	ldr	r3, [r7, #8]
 800e0a0:	3304      	adds	r3, #4
 800e0a2:	4619      	mov	r1, r3
 800e0a4:	4610      	mov	r0, r2
 800e0a6:	f7fe ff5c 	bl	800cf62 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e0aa:	68bb      	ldr	r3, [r7, #8]
 800e0ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e0ae:	4b1b      	ldr	r3, [pc, #108]	; (800e11c <xTaskIncrementTick+0x164>)
 800e0b0:	681b      	ldr	r3, [r3, #0]
 800e0b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0b4:	429a      	cmp	r2, r3
 800e0b6:	d3b9      	bcc.n	800e02c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800e0b8:	2301      	movs	r3, #1
 800e0ba:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e0bc:	e7b6      	b.n	800e02c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e0be:	4b17      	ldr	r3, [pc, #92]	; (800e11c <xTaskIncrementTick+0x164>)
 800e0c0:	681b      	ldr	r3, [r3, #0]
 800e0c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e0c4:	4914      	ldr	r1, [pc, #80]	; (800e118 <xTaskIncrementTick+0x160>)
 800e0c6:	4613      	mov	r3, r2
 800e0c8:	009b      	lsls	r3, r3, #2
 800e0ca:	4413      	add	r3, r2
 800e0cc:	009b      	lsls	r3, r3, #2
 800e0ce:	440b      	add	r3, r1
 800e0d0:	681b      	ldr	r3, [r3, #0]
 800e0d2:	2b01      	cmp	r3, #1
 800e0d4:	d901      	bls.n	800e0da <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800e0d6:	2301      	movs	r3, #1
 800e0d8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800e0da:	4b11      	ldr	r3, [pc, #68]	; (800e120 <xTaskIncrementTick+0x168>)
 800e0dc:	681b      	ldr	r3, [r3, #0]
 800e0de:	2b00      	cmp	r3, #0
 800e0e0:	d007      	beq.n	800e0f2 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800e0e2:	2301      	movs	r3, #1
 800e0e4:	617b      	str	r3, [r7, #20]
 800e0e6:	e004      	b.n	800e0f2 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800e0e8:	4b0e      	ldr	r3, [pc, #56]	; (800e124 <xTaskIncrementTick+0x16c>)
 800e0ea:	681b      	ldr	r3, [r3, #0]
 800e0ec:	3301      	adds	r3, #1
 800e0ee:	4a0d      	ldr	r2, [pc, #52]	; (800e124 <xTaskIncrementTick+0x16c>)
 800e0f0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800e0f2:	697b      	ldr	r3, [r7, #20]
}
 800e0f4:	4618      	mov	r0, r3
 800e0f6:	3718      	adds	r7, #24
 800e0f8:	46bd      	mov	sp, r7
 800e0fa:	bd80      	pop	{r7, pc}
 800e0fc:	20002c48 	.word	0x20002c48
 800e100:	20002c24 	.word	0x20002c24
 800e104:	20002bd8 	.word	0x20002bd8
 800e108:	20002bdc 	.word	0x20002bdc
 800e10c:	20002c38 	.word	0x20002c38
 800e110:	20002c40 	.word	0x20002c40
 800e114:	20002c28 	.word	0x20002c28
 800e118:	20002b24 	.word	0x20002b24
 800e11c:	20002b20 	.word	0x20002b20
 800e120:	20002c34 	.word	0x20002c34
 800e124:	20002c30 	.word	0x20002c30

0800e128 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e128:	b480      	push	{r7}
 800e12a:	b087      	sub	sp, #28
 800e12c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e12e:	4b27      	ldr	r3, [pc, #156]	; (800e1cc <vTaskSwitchContext+0xa4>)
 800e130:	681b      	ldr	r3, [r3, #0]
 800e132:	2b00      	cmp	r3, #0
 800e134:	d003      	beq.n	800e13e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e136:	4b26      	ldr	r3, [pc, #152]	; (800e1d0 <vTaskSwitchContext+0xa8>)
 800e138:	2201      	movs	r2, #1
 800e13a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e13c:	e03f      	b.n	800e1be <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800e13e:	4b24      	ldr	r3, [pc, #144]	; (800e1d0 <vTaskSwitchContext+0xa8>)
 800e140:	2200      	movs	r2, #0
 800e142:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e144:	4b23      	ldr	r3, [pc, #140]	; (800e1d4 <vTaskSwitchContext+0xac>)
 800e146:	681b      	ldr	r3, [r3, #0]
 800e148:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800e14a:	68fb      	ldr	r3, [r7, #12]
 800e14c:	fab3 f383 	clz	r3, r3
 800e150:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800e152:	7afb      	ldrb	r3, [r7, #11]
 800e154:	f1c3 031f 	rsb	r3, r3, #31
 800e158:	617b      	str	r3, [r7, #20]
 800e15a:	491f      	ldr	r1, [pc, #124]	; (800e1d8 <vTaskSwitchContext+0xb0>)
 800e15c:	697a      	ldr	r2, [r7, #20]
 800e15e:	4613      	mov	r3, r2
 800e160:	009b      	lsls	r3, r3, #2
 800e162:	4413      	add	r3, r2
 800e164:	009b      	lsls	r3, r3, #2
 800e166:	440b      	add	r3, r1
 800e168:	681b      	ldr	r3, [r3, #0]
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	d10a      	bne.n	800e184 <vTaskSwitchContext+0x5c>
	__asm volatile
 800e16e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e172:	f383 8811 	msr	BASEPRI, r3
 800e176:	f3bf 8f6f 	isb	sy
 800e17a:	f3bf 8f4f 	dsb	sy
 800e17e:	607b      	str	r3, [r7, #4]
}
 800e180:	bf00      	nop
 800e182:	e7fe      	b.n	800e182 <vTaskSwitchContext+0x5a>
 800e184:	697a      	ldr	r2, [r7, #20]
 800e186:	4613      	mov	r3, r2
 800e188:	009b      	lsls	r3, r3, #2
 800e18a:	4413      	add	r3, r2
 800e18c:	009b      	lsls	r3, r3, #2
 800e18e:	4a12      	ldr	r2, [pc, #72]	; (800e1d8 <vTaskSwitchContext+0xb0>)
 800e190:	4413      	add	r3, r2
 800e192:	613b      	str	r3, [r7, #16]
 800e194:	693b      	ldr	r3, [r7, #16]
 800e196:	685b      	ldr	r3, [r3, #4]
 800e198:	685a      	ldr	r2, [r3, #4]
 800e19a:	693b      	ldr	r3, [r7, #16]
 800e19c:	605a      	str	r2, [r3, #4]
 800e19e:	693b      	ldr	r3, [r7, #16]
 800e1a0:	685a      	ldr	r2, [r3, #4]
 800e1a2:	693b      	ldr	r3, [r7, #16]
 800e1a4:	3308      	adds	r3, #8
 800e1a6:	429a      	cmp	r2, r3
 800e1a8:	d104      	bne.n	800e1b4 <vTaskSwitchContext+0x8c>
 800e1aa:	693b      	ldr	r3, [r7, #16]
 800e1ac:	685b      	ldr	r3, [r3, #4]
 800e1ae:	685a      	ldr	r2, [r3, #4]
 800e1b0:	693b      	ldr	r3, [r7, #16]
 800e1b2:	605a      	str	r2, [r3, #4]
 800e1b4:	693b      	ldr	r3, [r7, #16]
 800e1b6:	685b      	ldr	r3, [r3, #4]
 800e1b8:	68db      	ldr	r3, [r3, #12]
 800e1ba:	4a08      	ldr	r2, [pc, #32]	; (800e1dc <vTaskSwitchContext+0xb4>)
 800e1bc:	6013      	str	r3, [r2, #0]
}
 800e1be:	bf00      	nop
 800e1c0:	371c      	adds	r7, #28
 800e1c2:	46bd      	mov	sp, r7
 800e1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1c8:	4770      	bx	lr
 800e1ca:	bf00      	nop
 800e1cc:	20002c48 	.word	0x20002c48
 800e1d0:	20002c34 	.word	0x20002c34
 800e1d4:	20002c28 	.word	0x20002c28
 800e1d8:	20002b24 	.word	0x20002b24
 800e1dc:	20002b20 	.word	0x20002b20

0800e1e0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e1e0:	b580      	push	{r7, lr}
 800e1e2:	b084      	sub	sp, #16
 800e1e4:	af00      	add	r7, sp, #0
 800e1e6:	6078      	str	r0, [r7, #4]
 800e1e8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	d10a      	bne.n	800e206 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800e1f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1f4:	f383 8811 	msr	BASEPRI, r3
 800e1f8:	f3bf 8f6f 	isb	sy
 800e1fc:	f3bf 8f4f 	dsb	sy
 800e200:	60fb      	str	r3, [r7, #12]
}
 800e202:	bf00      	nop
 800e204:	e7fe      	b.n	800e204 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e206:	4b07      	ldr	r3, [pc, #28]	; (800e224 <vTaskPlaceOnEventList+0x44>)
 800e208:	681b      	ldr	r3, [r3, #0]
 800e20a:	3318      	adds	r3, #24
 800e20c:	4619      	mov	r1, r3
 800e20e:	6878      	ldr	r0, [r7, #4]
 800e210:	f7fe fecb 	bl	800cfaa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e214:	2101      	movs	r1, #1
 800e216:	6838      	ldr	r0, [r7, #0]
 800e218:	f000 fa66 	bl	800e6e8 <prvAddCurrentTaskToDelayedList>
}
 800e21c:	bf00      	nop
 800e21e:	3710      	adds	r7, #16
 800e220:	46bd      	mov	sp, r7
 800e222:	bd80      	pop	{r7, pc}
 800e224:	20002b20 	.word	0x20002b20

0800e228 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e228:	b580      	push	{r7, lr}
 800e22a:	b086      	sub	sp, #24
 800e22c:	af00      	add	r7, sp, #0
 800e22e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	68db      	ldr	r3, [r3, #12]
 800e234:	68db      	ldr	r3, [r3, #12]
 800e236:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e238:	693b      	ldr	r3, [r7, #16]
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	d10a      	bne.n	800e254 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800e23e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e242:	f383 8811 	msr	BASEPRI, r3
 800e246:	f3bf 8f6f 	isb	sy
 800e24a:	f3bf 8f4f 	dsb	sy
 800e24e:	60fb      	str	r3, [r7, #12]
}
 800e250:	bf00      	nop
 800e252:	e7fe      	b.n	800e252 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e254:	693b      	ldr	r3, [r7, #16]
 800e256:	3318      	adds	r3, #24
 800e258:	4618      	mov	r0, r3
 800e25a:	f7fe fedf 	bl	800d01c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e25e:	4b1d      	ldr	r3, [pc, #116]	; (800e2d4 <xTaskRemoveFromEventList+0xac>)
 800e260:	681b      	ldr	r3, [r3, #0]
 800e262:	2b00      	cmp	r3, #0
 800e264:	d11c      	bne.n	800e2a0 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e266:	693b      	ldr	r3, [r7, #16]
 800e268:	3304      	adds	r3, #4
 800e26a:	4618      	mov	r0, r3
 800e26c:	f7fe fed6 	bl	800d01c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e270:	693b      	ldr	r3, [r7, #16]
 800e272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e274:	2201      	movs	r2, #1
 800e276:	409a      	lsls	r2, r3
 800e278:	4b17      	ldr	r3, [pc, #92]	; (800e2d8 <xTaskRemoveFromEventList+0xb0>)
 800e27a:	681b      	ldr	r3, [r3, #0]
 800e27c:	4313      	orrs	r3, r2
 800e27e:	4a16      	ldr	r2, [pc, #88]	; (800e2d8 <xTaskRemoveFromEventList+0xb0>)
 800e280:	6013      	str	r3, [r2, #0]
 800e282:	693b      	ldr	r3, [r7, #16]
 800e284:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e286:	4613      	mov	r3, r2
 800e288:	009b      	lsls	r3, r3, #2
 800e28a:	4413      	add	r3, r2
 800e28c:	009b      	lsls	r3, r3, #2
 800e28e:	4a13      	ldr	r2, [pc, #76]	; (800e2dc <xTaskRemoveFromEventList+0xb4>)
 800e290:	441a      	add	r2, r3
 800e292:	693b      	ldr	r3, [r7, #16]
 800e294:	3304      	adds	r3, #4
 800e296:	4619      	mov	r1, r3
 800e298:	4610      	mov	r0, r2
 800e29a:	f7fe fe62 	bl	800cf62 <vListInsertEnd>
 800e29e:	e005      	b.n	800e2ac <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e2a0:	693b      	ldr	r3, [r7, #16]
 800e2a2:	3318      	adds	r3, #24
 800e2a4:	4619      	mov	r1, r3
 800e2a6:	480e      	ldr	r0, [pc, #56]	; (800e2e0 <xTaskRemoveFromEventList+0xb8>)
 800e2a8:	f7fe fe5b 	bl	800cf62 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e2ac:	693b      	ldr	r3, [r7, #16]
 800e2ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e2b0:	4b0c      	ldr	r3, [pc, #48]	; (800e2e4 <xTaskRemoveFromEventList+0xbc>)
 800e2b2:	681b      	ldr	r3, [r3, #0]
 800e2b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e2b6:	429a      	cmp	r2, r3
 800e2b8:	d905      	bls.n	800e2c6 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e2ba:	2301      	movs	r3, #1
 800e2bc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e2be:	4b0a      	ldr	r3, [pc, #40]	; (800e2e8 <xTaskRemoveFromEventList+0xc0>)
 800e2c0:	2201      	movs	r2, #1
 800e2c2:	601a      	str	r2, [r3, #0]
 800e2c4:	e001      	b.n	800e2ca <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800e2c6:	2300      	movs	r3, #0
 800e2c8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e2ca:	697b      	ldr	r3, [r7, #20]
}
 800e2cc:	4618      	mov	r0, r3
 800e2ce:	3718      	adds	r7, #24
 800e2d0:	46bd      	mov	sp, r7
 800e2d2:	bd80      	pop	{r7, pc}
 800e2d4:	20002c48 	.word	0x20002c48
 800e2d8:	20002c28 	.word	0x20002c28
 800e2dc:	20002b24 	.word	0x20002b24
 800e2e0:	20002be0 	.word	0x20002be0
 800e2e4:	20002b20 	.word	0x20002b20
 800e2e8:	20002c34 	.word	0x20002c34

0800e2ec <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e2ec:	b480      	push	{r7}
 800e2ee:	b083      	sub	sp, #12
 800e2f0:	af00      	add	r7, sp, #0
 800e2f2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e2f4:	4b06      	ldr	r3, [pc, #24]	; (800e310 <vTaskInternalSetTimeOutState+0x24>)
 800e2f6:	681a      	ldr	r2, [r3, #0]
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e2fc:	4b05      	ldr	r3, [pc, #20]	; (800e314 <vTaskInternalSetTimeOutState+0x28>)
 800e2fe:	681a      	ldr	r2, [r3, #0]
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	605a      	str	r2, [r3, #4]
}
 800e304:	bf00      	nop
 800e306:	370c      	adds	r7, #12
 800e308:	46bd      	mov	sp, r7
 800e30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e30e:	4770      	bx	lr
 800e310:	20002c38 	.word	0x20002c38
 800e314:	20002c24 	.word	0x20002c24

0800e318 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e318:	b580      	push	{r7, lr}
 800e31a:	b088      	sub	sp, #32
 800e31c:	af00      	add	r7, sp, #0
 800e31e:	6078      	str	r0, [r7, #4]
 800e320:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	2b00      	cmp	r3, #0
 800e326:	d10a      	bne.n	800e33e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800e328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e32c:	f383 8811 	msr	BASEPRI, r3
 800e330:	f3bf 8f6f 	isb	sy
 800e334:	f3bf 8f4f 	dsb	sy
 800e338:	613b      	str	r3, [r7, #16]
}
 800e33a:	bf00      	nop
 800e33c:	e7fe      	b.n	800e33c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800e33e:	683b      	ldr	r3, [r7, #0]
 800e340:	2b00      	cmp	r3, #0
 800e342:	d10a      	bne.n	800e35a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800e344:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e348:	f383 8811 	msr	BASEPRI, r3
 800e34c:	f3bf 8f6f 	isb	sy
 800e350:	f3bf 8f4f 	dsb	sy
 800e354:	60fb      	str	r3, [r7, #12]
}
 800e356:	bf00      	nop
 800e358:	e7fe      	b.n	800e358 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800e35a:	f000 fb5b 	bl	800ea14 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e35e:	4b1d      	ldr	r3, [pc, #116]	; (800e3d4 <xTaskCheckForTimeOut+0xbc>)
 800e360:	681b      	ldr	r3, [r3, #0]
 800e362:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	685b      	ldr	r3, [r3, #4]
 800e368:	69ba      	ldr	r2, [r7, #24]
 800e36a:	1ad3      	subs	r3, r2, r3
 800e36c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e36e:	683b      	ldr	r3, [r7, #0]
 800e370:	681b      	ldr	r3, [r3, #0]
 800e372:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e376:	d102      	bne.n	800e37e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e378:	2300      	movs	r3, #0
 800e37a:	61fb      	str	r3, [r7, #28]
 800e37c:	e023      	b.n	800e3c6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	681a      	ldr	r2, [r3, #0]
 800e382:	4b15      	ldr	r3, [pc, #84]	; (800e3d8 <xTaskCheckForTimeOut+0xc0>)
 800e384:	681b      	ldr	r3, [r3, #0]
 800e386:	429a      	cmp	r2, r3
 800e388:	d007      	beq.n	800e39a <xTaskCheckForTimeOut+0x82>
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	685b      	ldr	r3, [r3, #4]
 800e38e:	69ba      	ldr	r2, [r7, #24]
 800e390:	429a      	cmp	r2, r3
 800e392:	d302      	bcc.n	800e39a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e394:	2301      	movs	r3, #1
 800e396:	61fb      	str	r3, [r7, #28]
 800e398:	e015      	b.n	800e3c6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e39a:	683b      	ldr	r3, [r7, #0]
 800e39c:	681b      	ldr	r3, [r3, #0]
 800e39e:	697a      	ldr	r2, [r7, #20]
 800e3a0:	429a      	cmp	r2, r3
 800e3a2:	d20b      	bcs.n	800e3bc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e3a4:	683b      	ldr	r3, [r7, #0]
 800e3a6:	681a      	ldr	r2, [r3, #0]
 800e3a8:	697b      	ldr	r3, [r7, #20]
 800e3aa:	1ad2      	subs	r2, r2, r3
 800e3ac:	683b      	ldr	r3, [r7, #0]
 800e3ae:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e3b0:	6878      	ldr	r0, [r7, #4]
 800e3b2:	f7ff ff9b 	bl	800e2ec <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e3b6:	2300      	movs	r3, #0
 800e3b8:	61fb      	str	r3, [r7, #28]
 800e3ba:	e004      	b.n	800e3c6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800e3bc:	683b      	ldr	r3, [r7, #0]
 800e3be:	2200      	movs	r2, #0
 800e3c0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e3c2:	2301      	movs	r3, #1
 800e3c4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e3c6:	f000 fb55 	bl	800ea74 <vPortExitCritical>

	return xReturn;
 800e3ca:	69fb      	ldr	r3, [r7, #28]
}
 800e3cc:	4618      	mov	r0, r3
 800e3ce:	3720      	adds	r7, #32
 800e3d0:	46bd      	mov	sp, r7
 800e3d2:	bd80      	pop	{r7, pc}
 800e3d4:	20002c24 	.word	0x20002c24
 800e3d8:	20002c38 	.word	0x20002c38

0800e3dc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e3dc:	b480      	push	{r7}
 800e3de:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e3e0:	4b03      	ldr	r3, [pc, #12]	; (800e3f0 <vTaskMissedYield+0x14>)
 800e3e2:	2201      	movs	r2, #1
 800e3e4:	601a      	str	r2, [r3, #0]
}
 800e3e6:	bf00      	nop
 800e3e8:	46bd      	mov	sp, r7
 800e3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3ee:	4770      	bx	lr
 800e3f0:	20002c34 	.word	0x20002c34

0800e3f4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e3f4:	b580      	push	{r7, lr}
 800e3f6:	b082      	sub	sp, #8
 800e3f8:	af00      	add	r7, sp, #0
 800e3fa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e3fc:	f000 f852 	bl	800e4a4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e400:	4b06      	ldr	r3, [pc, #24]	; (800e41c <prvIdleTask+0x28>)
 800e402:	681b      	ldr	r3, [r3, #0]
 800e404:	2b01      	cmp	r3, #1
 800e406:	d9f9      	bls.n	800e3fc <prvIdleTask+0x8>
			{
				taskYIELD();
 800e408:	4b05      	ldr	r3, [pc, #20]	; (800e420 <prvIdleTask+0x2c>)
 800e40a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e40e:	601a      	str	r2, [r3, #0]
 800e410:	f3bf 8f4f 	dsb	sy
 800e414:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800e418:	e7f0      	b.n	800e3fc <prvIdleTask+0x8>
 800e41a:	bf00      	nop
 800e41c:	20002b24 	.word	0x20002b24
 800e420:	e000ed04 	.word	0xe000ed04

0800e424 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e424:	b580      	push	{r7, lr}
 800e426:	b082      	sub	sp, #8
 800e428:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e42a:	2300      	movs	r3, #0
 800e42c:	607b      	str	r3, [r7, #4]
 800e42e:	e00c      	b.n	800e44a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e430:	687a      	ldr	r2, [r7, #4]
 800e432:	4613      	mov	r3, r2
 800e434:	009b      	lsls	r3, r3, #2
 800e436:	4413      	add	r3, r2
 800e438:	009b      	lsls	r3, r3, #2
 800e43a:	4a12      	ldr	r2, [pc, #72]	; (800e484 <prvInitialiseTaskLists+0x60>)
 800e43c:	4413      	add	r3, r2
 800e43e:	4618      	mov	r0, r3
 800e440:	f7fe fd62 	bl	800cf08 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	3301      	adds	r3, #1
 800e448:	607b      	str	r3, [r7, #4]
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	2b06      	cmp	r3, #6
 800e44e:	d9ef      	bls.n	800e430 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e450:	480d      	ldr	r0, [pc, #52]	; (800e488 <prvInitialiseTaskLists+0x64>)
 800e452:	f7fe fd59 	bl	800cf08 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e456:	480d      	ldr	r0, [pc, #52]	; (800e48c <prvInitialiseTaskLists+0x68>)
 800e458:	f7fe fd56 	bl	800cf08 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e45c:	480c      	ldr	r0, [pc, #48]	; (800e490 <prvInitialiseTaskLists+0x6c>)
 800e45e:	f7fe fd53 	bl	800cf08 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e462:	480c      	ldr	r0, [pc, #48]	; (800e494 <prvInitialiseTaskLists+0x70>)
 800e464:	f7fe fd50 	bl	800cf08 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e468:	480b      	ldr	r0, [pc, #44]	; (800e498 <prvInitialiseTaskLists+0x74>)
 800e46a:	f7fe fd4d 	bl	800cf08 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e46e:	4b0b      	ldr	r3, [pc, #44]	; (800e49c <prvInitialiseTaskLists+0x78>)
 800e470:	4a05      	ldr	r2, [pc, #20]	; (800e488 <prvInitialiseTaskLists+0x64>)
 800e472:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e474:	4b0a      	ldr	r3, [pc, #40]	; (800e4a0 <prvInitialiseTaskLists+0x7c>)
 800e476:	4a05      	ldr	r2, [pc, #20]	; (800e48c <prvInitialiseTaskLists+0x68>)
 800e478:	601a      	str	r2, [r3, #0]
}
 800e47a:	bf00      	nop
 800e47c:	3708      	adds	r7, #8
 800e47e:	46bd      	mov	sp, r7
 800e480:	bd80      	pop	{r7, pc}
 800e482:	bf00      	nop
 800e484:	20002b24 	.word	0x20002b24
 800e488:	20002bb0 	.word	0x20002bb0
 800e48c:	20002bc4 	.word	0x20002bc4
 800e490:	20002be0 	.word	0x20002be0
 800e494:	20002bf4 	.word	0x20002bf4
 800e498:	20002c0c 	.word	0x20002c0c
 800e49c:	20002bd8 	.word	0x20002bd8
 800e4a0:	20002bdc 	.word	0x20002bdc

0800e4a4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e4a4:	b580      	push	{r7, lr}
 800e4a6:	b082      	sub	sp, #8
 800e4a8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e4aa:	e019      	b.n	800e4e0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e4ac:	f000 fab2 	bl	800ea14 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e4b0:	4b10      	ldr	r3, [pc, #64]	; (800e4f4 <prvCheckTasksWaitingTermination+0x50>)
 800e4b2:	68db      	ldr	r3, [r3, #12]
 800e4b4:	68db      	ldr	r3, [r3, #12]
 800e4b6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	3304      	adds	r3, #4
 800e4bc:	4618      	mov	r0, r3
 800e4be:	f7fe fdad 	bl	800d01c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e4c2:	4b0d      	ldr	r3, [pc, #52]	; (800e4f8 <prvCheckTasksWaitingTermination+0x54>)
 800e4c4:	681b      	ldr	r3, [r3, #0]
 800e4c6:	3b01      	subs	r3, #1
 800e4c8:	4a0b      	ldr	r2, [pc, #44]	; (800e4f8 <prvCheckTasksWaitingTermination+0x54>)
 800e4ca:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e4cc:	4b0b      	ldr	r3, [pc, #44]	; (800e4fc <prvCheckTasksWaitingTermination+0x58>)
 800e4ce:	681b      	ldr	r3, [r3, #0]
 800e4d0:	3b01      	subs	r3, #1
 800e4d2:	4a0a      	ldr	r2, [pc, #40]	; (800e4fc <prvCheckTasksWaitingTermination+0x58>)
 800e4d4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e4d6:	f000 facd 	bl	800ea74 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e4da:	6878      	ldr	r0, [r7, #4]
 800e4dc:	f000 f810 	bl	800e500 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e4e0:	4b06      	ldr	r3, [pc, #24]	; (800e4fc <prvCheckTasksWaitingTermination+0x58>)
 800e4e2:	681b      	ldr	r3, [r3, #0]
 800e4e4:	2b00      	cmp	r3, #0
 800e4e6:	d1e1      	bne.n	800e4ac <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e4e8:	bf00      	nop
 800e4ea:	bf00      	nop
 800e4ec:	3708      	adds	r7, #8
 800e4ee:	46bd      	mov	sp, r7
 800e4f0:	bd80      	pop	{r7, pc}
 800e4f2:	bf00      	nop
 800e4f4:	20002bf4 	.word	0x20002bf4
 800e4f8:	20002c20 	.word	0x20002c20
 800e4fc:	20002c08 	.word	0x20002c08

0800e500 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e500:	b580      	push	{r7, lr}
 800e502:	b084      	sub	sp, #16
 800e504:	af00      	add	r7, sp, #0
 800e506:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e50e:	2b00      	cmp	r3, #0
 800e510:	d108      	bne.n	800e524 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e516:	4618      	mov	r0, r3
 800e518:	f000 fc2a 	bl	800ed70 <vPortFree>
				vPortFree( pxTCB );
 800e51c:	6878      	ldr	r0, [r7, #4]
 800e51e:	f000 fc27 	bl	800ed70 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e522:	e018      	b.n	800e556 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e52a:	2b01      	cmp	r3, #1
 800e52c:	d103      	bne.n	800e536 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800e52e:	6878      	ldr	r0, [r7, #4]
 800e530:	f000 fc1e 	bl	800ed70 <vPortFree>
	}
 800e534:	e00f      	b.n	800e556 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e53c:	2b02      	cmp	r3, #2
 800e53e:	d00a      	beq.n	800e556 <prvDeleteTCB+0x56>
	__asm volatile
 800e540:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e544:	f383 8811 	msr	BASEPRI, r3
 800e548:	f3bf 8f6f 	isb	sy
 800e54c:	f3bf 8f4f 	dsb	sy
 800e550:	60fb      	str	r3, [r7, #12]
}
 800e552:	bf00      	nop
 800e554:	e7fe      	b.n	800e554 <prvDeleteTCB+0x54>
	}
 800e556:	bf00      	nop
 800e558:	3710      	adds	r7, #16
 800e55a:	46bd      	mov	sp, r7
 800e55c:	bd80      	pop	{r7, pc}
	...

0800e560 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e560:	b480      	push	{r7}
 800e562:	b083      	sub	sp, #12
 800e564:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e566:	4b0c      	ldr	r3, [pc, #48]	; (800e598 <prvResetNextTaskUnblockTime+0x38>)
 800e568:	681b      	ldr	r3, [r3, #0]
 800e56a:	681b      	ldr	r3, [r3, #0]
 800e56c:	2b00      	cmp	r3, #0
 800e56e:	d104      	bne.n	800e57a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e570:	4b0a      	ldr	r3, [pc, #40]	; (800e59c <prvResetNextTaskUnblockTime+0x3c>)
 800e572:	f04f 32ff 	mov.w	r2, #4294967295
 800e576:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e578:	e008      	b.n	800e58c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e57a:	4b07      	ldr	r3, [pc, #28]	; (800e598 <prvResetNextTaskUnblockTime+0x38>)
 800e57c:	681b      	ldr	r3, [r3, #0]
 800e57e:	68db      	ldr	r3, [r3, #12]
 800e580:	68db      	ldr	r3, [r3, #12]
 800e582:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	685b      	ldr	r3, [r3, #4]
 800e588:	4a04      	ldr	r2, [pc, #16]	; (800e59c <prvResetNextTaskUnblockTime+0x3c>)
 800e58a:	6013      	str	r3, [r2, #0]
}
 800e58c:	bf00      	nop
 800e58e:	370c      	adds	r7, #12
 800e590:	46bd      	mov	sp, r7
 800e592:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e596:	4770      	bx	lr
 800e598:	20002bd8 	.word	0x20002bd8
 800e59c:	20002c40 	.word	0x20002c40

0800e5a0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e5a0:	b480      	push	{r7}
 800e5a2:	b083      	sub	sp, #12
 800e5a4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e5a6:	4b0b      	ldr	r3, [pc, #44]	; (800e5d4 <xTaskGetSchedulerState+0x34>)
 800e5a8:	681b      	ldr	r3, [r3, #0]
 800e5aa:	2b00      	cmp	r3, #0
 800e5ac:	d102      	bne.n	800e5b4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e5ae:	2301      	movs	r3, #1
 800e5b0:	607b      	str	r3, [r7, #4]
 800e5b2:	e008      	b.n	800e5c6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e5b4:	4b08      	ldr	r3, [pc, #32]	; (800e5d8 <xTaskGetSchedulerState+0x38>)
 800e5b6:	681b      	ldr	r3, [r3, #0]
 800e5b8:	2b00      	cmp	r3, #0
 800e5ba:	d102      	bne.n	800e5c2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e5bc:	2302      	movs	r3, #2
 800e5be:	607b      	str	r3, [r7, #4]
 800e5c0:	e001      	b.n	800e5c6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e5c2:	2300      	movs	r3, #0
 800e5c4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e5c6:	687b      	ldr	r3, [r7, #4]
	}
 800e5c8:	4618      	mov	r0, r3
 800e5ca:	370c      	adds	r7, #12
 800e5cc:	46bd      	mov	sp, r7
 800e5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5d2:	4770      	bx	lr
 800e5d4:	20002c2c 	.word	0x20002c2c
 800e5d8:	20002c48 	.word	0x20002c48

0800e5dc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e5dc:	b580      	push	{r7, lr}
 800e5de:	b086      	sub	sp, #24
 800e5e0:	af00      	add	r7, sp, #0
 800e5e2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e5e8:	2300      	movs	r3, #0
 800e5ea:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	2b00      	cmp	r3, #0
 800e5f0:	d06e      	beq.n	800e6d0 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e5f2:	4b3a      	ldr	r3, [pc, #232]	; (800e6dc <xTaskPriorityDisinherit+0x100>)
 800e5f4:	681b      	ldr	r3, [r3, #0]
 800e5f6:	693a      	ldr	r2, [r7, #16]
 800e5f8:	429a      	cmp	r2, r3
 800e5fa:	d00a      	beq.n	800e612 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800e5fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e600:	f383 8811 	msr	BASEPRI, r3
 800e604:	f3bf 8f6f 	isb	sy
 800e608:	f3bf 8f4f 	dsb	sy
 800e60c:	60fb      	str	r3, [r7, #12]
}
 800e60e:	bf00      	nop
 800e610:	e7fe      	b.n	800e610 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800e612:	693b      	ldr	r3, [r7, #16]
 800e614:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e616:	2b00      	cmp	r3, #0
 800e618:	d10a      	bne.n	800e630 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800e61a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e61e:	f383 8811 	msr	BASEPRI, r3
 800e622:	f3bf 8f6f 	isb	sy
 800e626:	f3bf 8f4f 	dsb	sy
 800e62a:	60bb      	str	r3, [r7, #8]
}
 800e62c:	bf00      	nop
 800e62e:	e7fe      	b.n	800e62e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800e630:	693b      	ldr	r3, [r7, #16]
 800e632:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e634:	1e5a      	subs	r2, r3, #1
 800e636:	693b      	ldr	r3, [r7, #16]
 800e638:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e63a:	693b      	ldr	r3, [r7, #16]
 800e63c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e63e:	693b      	ldr	r3, [r7, #16]
 800e640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e642:	429a      	cmp	r2, r3
 800e644:	d044      	beq.n	800e6d0 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e646:	693b      	ldr	r3, [r7, #16]
 800e648:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e64a:	2b00      	cmp	r3, #0
 800e64c:	d140      	bne.n	800e6d0 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e64e:	693b      	ldr	r3, [r7, #16]
 800e650:	3304      	adds	r3, #4
 800e652:	4618      	mov	r0, r3
 800e654:	f7fe fce2 	bl	800d01c <uxListRemove>
 800e658:	4603      	mov	r3, r0
 800e65a:	2b00      	cmp	r3, #0
 800e65c:	d115      	bne.n	800e68a <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800e65e:	693b      	ldr	r3, [r7, #16]
 800e660:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e662:	491f      	ldr	r1, [pc, #124]	; (800e6e0 <xTaskPriorityDisinherit+0x104>)
 800e664:	4613      	mov	r3, r2
 800e666:	009b      	lsls	r3, r3, #2
 800e668:	4413      	add	r3, r2
 800e66a:	009b      	lsls	r3, r3, #2
 800e66c:	440b      	add	r3, r1
 800e66e:	681b      	ldr	r3, [r3, #0]
 800e670:	2b00      	cmp	r3, #0
 800e672:	d10a      	bne.n	800e68a <xTaskPriorityDisinherit+0xae>
 800e674:	693b      	ldr	r3, [r7, #16]
 800e676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e678:	2201      	movs	r2, #1
 800e67a:	fa02 f303 	lsl.w	r3, r2, r3
 800e67e:	43da      	mvns	r2, r3
 800e680:	4b18      	ldr	r3, [pc, #96]	; (800e6e4 <xTaskPriorityDisinherit+0x108>)
 800e682:	681b      	ldr	r3, [r3, #0]
 800e684:	4013      	ands	r3, r2
 800e686:	4a17      	ldr	r2, [pc, #92]	; (800e6e4 <xTaskPriorityDisinherit+0x108>)
 800e688:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e68a:	693b      	ldr	r3, [r7, #16]
 800e68c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e68e:	693b      	ldr	r3, [r7, #16]
 800e690:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e692:	693b      	ldr	r3, [r7, #16]
 800e694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e696:	f1c3 0207 	rsb	r2, r3, #7
 800e69a:	693b      	ldr	r3, [r7, #16]
 800e69c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e69e:	693b      	ldr	r3, [r7, #16]
 800e6a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6a2:	2201      	movs	r2, #1
 800e6a4:	409a      	lsls	r2, r3
 800e6a6:	4b0f      	ldr	r3, [pc, #60]	; (800e6e4 <xTaskPriorityDisinherit+0x108>)
 800e6a8:	681b      	ldr	r3, [r3, #0]
 800e6aa:	4313      	orrs	r3, r2
 800e6ac:	4a0d      	ldr	r2, [pc, #52]	; (800e6e4 <xTaskPriorityDisinherit+0x108>)
 800e6ae:	6013      	str	r3, [r2, #0]
 800e6b0:	693b      	ldr	r3, [r7, #16]
 800e6b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e6b4:	4613      	mov	r3, r2
 800e6b6:	009b      	lsls	r3, r3, #2
 800e6b8:	4413      	add	r3, r2
 800e6ba:	009b      	lsls	r3, r3, #2
 800e6bc:	4a08      	ldr	r2, [pc, #32]	; (800e6e0 <xTaskPriorityDisinherit+0x104>)
 800e6be:	441a      	add	r2, r3
 800e6c0:	693b      	ldr	r3, [r7, #16]
 800e6c2:	3304      	adds	r3, #4
 800e6c4:	4619      	mov	r1, r3
 800e6c6:	4610      	mov	r0, r2
 800e6c8:	f7fe fc4b 	bl	800cf62 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e6cc:	2301      	movs	r3, #1
 800e6ce:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e6d0:	697b      	ldr	r3, [r7, #20]
	}
 800e6d2:	4618      	mov	r0, r3
 800e6d4:	3718      	adds	r7, #24
 800e6d6:	46bd      	mov	sp, r7
 800e6d8:	bd80      	pop	{r7, pc}
 800e6da:	bf00      	nop
 800e6dc:	20002b20 	.word	0x20002b20
 800e6e0:	20002b24 	.word	0x20002b24
 800e6e4:	20002c28 	.word	0x20002c28

0800e6e8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e6e8:	b580      	push	{r7, lr}
 800e6ea:	b084      	sub	sp, #16
 800e6ec:	af00      	add	r7, sp, #0
 800e6ee:	6078      	str	r0, [r7, #4]
 800e6f0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e6f2:	4b29      	ldr	r3, [pc, #164]	; (800e798 <prvAddCurrentTaskToDelayedList+0xb0>)
 800e6f4:	681b      	ldr	r3, [r3, #0]
 800e6f6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e6f8:	4b28      	ldr	r3, [pc, #160]	; (800e79c <prvAddCurrentTaskToDelayedList+0xb4>)
 800e6fa:	681b      	ldr	r3, [r3, #0]
 800e6fc:	3304      	adds	r3, #4
 800e6fe:	4618      	mov	r0, r3
 800e700:	f7fe fc8c 	bl	800d01c <uxListRemove>
 800e704:	4603      	mov	r3, r0
 800e706:	2b00      	cmp	r3, #0
 800e708:	d10b      	bne.n	800e722 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800e70a:	4b24      	ldr	r3, [pc, #144]	; (800e79c <prvAddCurrentTaskToDelayedList+0xb4>)
 800e70c:	681b      	ldr	r3, [r3, #0]
 800e70e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e710:	2201      	movs	r2, #1
 800e712:	fa02 f303 	lsl.w	r3, r2, r3
 800e716:	43da      	mvns	r2, r3
 800e718:	4b21      	ldr	r3, [pc, #132]	; (800e7a0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800e71a:	681b      	ldr	r3, [r3, #0]
 800e71c:	4013      	ands	r3, r2
 800e71e:	4a20      	ldr	r2, [pc, #128]	; (800e7a0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800e720:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e728:	d10a      	bne.n	800e740 <prvAddCurrentTaskToDelayedList+0x58>
 800e72a:	683b      	ldr	r3, [r7, #0]
 800e72c:	2b00      	cmp	r3, #0
 800e72e:	d007      	beq.n	800e740 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e730:	4b1a      	ldr	r3, [pc, #104]	; (800e79c <prvAddCurrentTaskToDelayedList+0xb4>)
 800e732:	681b      	ldr	r3, [r3, #0]
 800e734:	3304      	adds	r3, #4
 800e736:	4619      	mov	r1, r3
 800e738:	481a      	ldr	r0, [pc, #104]	; (800e7a4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800e73a:	f7fe fc12 	bl	800cf62 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e73e:	e026      	b.n	800e78e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e740:	68fa      	ldr	r2, [r7, #12]
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	4413      	add	r3, r2
 800e746:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e748:	4b14      	ldr	r3, [pc, #80]	; (800e79c <prvAddCurrentTaskToDelayedList+0xb4>)
 800e74a:	681b      	ldr	r3, [r3, #0]
 800e74c:	68ba      	ldr	r2, [r7, #8]
 800e74e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e750:	68ba      	ldr	r2, [r7, #8]
 800e752:	68fb      	ldr	r3, [r7, #12]
 800e754:	429a      	cmp	r2, r3
 800e756:	d209      	bcs.n	800e76c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e758:	4b13      	ldr	r3, [pc, #76]	; (800e7a8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800e75a:	681a      	ldr	r2, [r3, #0]
 800e75c:	4b0f      	ldr	r3, [pc, #60]	; (800e79c <prvAddCurrentTaskToDelayedList+0xb4>)
 800e75e:	681b      	ldr	r3, [r3, #0]
 800e760:	3304      	adds	r3, #4
 800e762:	4619      	mov	r1, r3
 800e764:	4610      	mov	r0, r2
 800e766:	f7fe fc20 	bl	800cfaa <vListInsert>
}
 800e76a:	e010      	b.n	800e78e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e76c:	4b0f      	ldr	r3, [pc, #60]	; (800e7ac <prvAddCurrentTaskToDelayedList+0xc4>)
 800e76e:	681a      	ldr	r2, [r3, #0]
 800e770:	4b0a      	ldr	r3, [pc, #40]	; (800e79c <prvAddCurrentTaskToDelayedList+0xb4>)
 800e772:	681b      	ldr	r3, [r3, #0]
 800e774:	3304      	adds	r3, #4
 800e776:	4619      	mov	r1, r3
 800e778:	4610      	mov	r0, r2
 800e77a:	f7fe fc16 	bl	800cfaa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e77e:	4b0c      	ldr	r3, [pc, #48]	; (800e7b0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e780:	681b      	ldr	r3, [r3, #0]
 800e782:	68ba      	ldr	r2, [r7, #8]
 800e784:	429a      	cmp	r2, r3
 800e786:	d202      	bcs.n	800e78e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800e788:	4a09      	ldr	r2, [pc, #36]	; (800e7b0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e78a:	68bb      	ldr	r3, [r7, #8]
 800e78c:	6013      	str	r3, [r2, #0]
}
 800e78e:	bf00      	nop
 800e790:	3710      	adds	r7, #16
 800e792:	46bd      	mov	sp, r7
 800e794:	bd80      	pop	{r7, pc}
 800e796:	bf00      	nop
 800e798:	20002c24 	.word	0x20002c24
 800e79c:	20002b20 	.word	0x20002b20
 800e7a0:	20002c28 	.word	0x20002c28
 800e7a4:	20002c0c 	.word	0x20002c0c
 800e7a8:	20002bdc 	.word	0x20002bdc
 800e7ac:	20002bd8 	.word	0x20002bd8
 800e7b0:	20002c40 	.word	0x20002c40

0800e7b4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e7b4:	b480      	push	{r7}
 800e7b6:	b085      	sub	sp, #20
 800e7b8:	af00      	add	r7, sp, #0
 800e7ba:	60f8      	str	r0, [r7, #12]
 800e7bc:	60b9      	str	r1, [r7, #8]
 800e7be:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e7c0:	68fb      	ldr	r3, [r7, #12]
 800e7c2:	3b04      	subs	r3, #4
 800e7c4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e7c6:	68fb      	ldr	r3, [r7, #12]
 800e7c8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800e7cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e7ce:	68fb      	ldr	r3, [r7, #12]
 800e7d0:	3b04      	subs	r3, #4
 800e7d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e7d4:	68bb      	ldr	r3, [r7, #8]
 800e7d6:	f023 0201 	bic.w	r2, r3, #1
 800e7da:	68fb      	ldr	r3, [r7, #12]
 800e7dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e7de:	68fb      	ldr	r3, [r7, #12]
 800e7e0:	3b04      	subs	r3, #4
 800e7e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e7e4:	4a0c      	ldr	r2, [pc, #48]	; (800e818 <pxPortInitialiseStack+0x64>)
 800e7e6:	68fb      	ldr	r3, [r7, #12]
 800e7e8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e7ea:	68fb      	ldr	r3, [r7, #12]
 800e7ec:	3b14      	subs	r3, #20
 800e7ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e7f0:	687a      	ldr	r2, [r7, #4]
 800e7f2:	68fb      	ldr	r3, [r7, #12]
 800e7f4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e7f6:	68fb      	ldr	r3, [r7, #12]
 800e7f8:	3b04      	subs	r3, #4
 800e7fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e7fc:	68fb      	ldr	r3, [r7, #12]
 800e7fe:	f06f 0202 	mvn.w	r2, #2
 800e802:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e804:	68fb      	ldr	r3, [r7, #12]
 800e806:	3b20      	subs	r3, #32
 800e808:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e80a:	68fb      	ldr	r3, [r7, #12]
}
 800e80c:	4618      	mov	r0, r3
 800e80e:	3714      	adds	r7, #20
 800e810:	46bd      	mov	sp, r7
 800e812:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e816:	4770      	bx	lr
 800e818:	0800e81d 	.word	0x0800e81d

0800e81c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e81c:	b480      	push	{r7}
 800e81e:	b085      	sub	sp, #20
 800e820:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e822:	2300      	movs	r3, #0
 800e824:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e826:	4b12      	ldr	r3, [pc, #72]	; (800e870 <prvTaskExitError+0x54>)
 800e828:	681b      	ldr	r3, [r3, #0]
 800e82a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e82e:	d00a      	beq.n	800e846 <prvTaskExitError+0x2a>
	__asm volatile
 800e830:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e834:	f383 8811 	msr	BASEPRI, r3
 800e838:	f3bf 8f6f 	isb	sy
 800e83c:	f3bf 8f4f 	dsb	sy
 800e840:	60fb      	str	r3, [r7, #12]
}
 800e842:	bf00      	nop
 800e844:	e7fe      	b.n	800e844 <prvTaskExitError+0x28>
	__asm volatile
 800e846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e84a:	f383 8811 	msr	BASEPRI, r3
 800e84e:	f3bf 8f6f 	isb	sy
 800e852:	f3bf 8f4f 	dsb	sy
 800e856:	60bb      	str	r3, [r7, #8]
}
 800e858:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e85a:	bf00      	nop
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	2b00      	cmp	r3, #0
 800e860:	d0fc      	beq.n	800e85c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e862:	bf00      	nop
 800e864:	bf00      	nop
 800e866:	3714      	adds	r7, #20
 800e868:	46bd      	mov	sp, r7
 800e86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e86e:	4770      	bx	lr
 800e870:	20000018 	.word	0x20000018
	...

0800e880 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e880:	4b07      	ldr	r3, [pc, #28]	; (800e8a0 <pxCurrentTCBConst2>)
 800e882:	6819      	ldr	r1, [r3, #0]
 800e884:	6808      	ldr	r0, [r1, #0]
 800e886:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e88a:	f380 8809 	msr	PSP, r0
 800e88e:	f3bf 8f6f 	isb	sy
 800e892:	f04f 0000 	mov.w	r0, #0
 800e896:	f380 8811 	msr	BASEPRI, r0
 800e89a:	4770      	bx	lr
 800e89c:	f3af 8000 	nop.w

0800e8a0 <pxCurrentTCBConst2>:
 800e8a0:	20002b20 	.word	0x20002b20
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e8a4:	bf00      	nop
 800e8a6:	bf00      	nop

0800e8a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e8a8:	4808      	ldr	r0, [pc, #32]	; (800e8cc <prvPortStartFirstTask+0x24>)
 800e8aa:	6800      	ldr	r0, [r0, #0]
 800e8ac:	6800      	ldr	r0, [r0, #0]
 800e8ae:	f380 8808 	msr	MSP, r0
 800e8b2:	f04f 0000 	mov.w	r0, #0
 800e8b6:	f380 8814 	msr	CONTROL, r0
 800e8ba:	b662      	cpsie	i
 800e8bc:	b661      	cpsie	f
 800e8be:	f3bf 8f4f 	dsb	sy
 800e8c2:	f3bf 8f6f 	isb	sy
 800e8c6:	df00      	svc	0
 800e8c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e8ca:	bf00      	nop
 800e8cc:	e000ed08 	.word	0xe000ed08

0800e8d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e8d0:	b580      	push	{r7, lr}
 800e8d2:	b086      	sub	sp, #24
 800e8d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e8d6:	4b46      	ldr	r3, [pc, #280]	; (800e9f0 <xPortStartScheduler+0x120>)
 800e8d8:	681b      	ldr	r3, [r3, #0]
 800e8da:	4a46      	ldr	r2, [pc, #280]	; (800e9f4 <xPortStartScheduler+0x124>)
 800e8dc:	4293      	cmp	r3, r2
 800e8de:	d10a      	bne.n	800e8f6 <xPortStartScheduler+0x26>
	__asm volatile
 800e8e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8e4:	f383 8811 	msr	BASEPRI, r3
 800e8e8:	f3bf 8f6f 	isb	sy
 800e8ec:	f3bf 8f4f 	dsb	sy
 800e8f0:	613b      	str	r3, [r7, #16]
}
 800e8f2:	bf00      	nop
 800e8f4:	e7fe      	b.n	800e8f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e8f6:	4b3e      	ldr	r3, [pc, #248]	; (800e9f0 <xPortStartScheduler+0x120>)
 800e8f8:	681b      	ldr	r3, [r3, #0]
 800e8fa:	4a3f      	ldr	r2, [pc, #252]	; (800e9f8 <xPortStartScheduler+0x128>)
 800e8fc:	4293      	cmp	r3, r2
 800e8fe:	d10a      	bne.n	800e916 <xPortStartScheduler+0x46>
	__asm volatile
 800e900:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e904:	f383 8811 	msr	BASEPRI, r3
 800e908:	f3bf 8f6f 	isb	sy
 800e90c:	f3bf 8f4f 	dsb	sy
 800e910:	60fb      	str	r3, [r7, #12]
}
 800e912:	bf00      	nop
 800e914:	e7fe      	b.n	800e914 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e916:	4b39      	ldr	r3, [pc, #228]	; (800e9fc <xPortStartScheduler+0x12c>)
 800e918:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e91a:	697b      	ldr	r3, [r7, #20]
 800e91c:	781b      	ldrb	r3, [r3, #0]
 800e91e:	b2db      	uxtb	r3, r3
 800e920:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e922:	697b      	ldr	r3, [r7, #20]
 800e924:	22ff      	movs	r2, #255	; 0xff
 800e926:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e928:	697b      	ldr	r3, [r7, #20]
 800e92a:	781b      	ldrb	r3, [r3, #0]
 800e92c:	b2db      	uxtb	r3, r3
 800e92e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e930:	78fb      	ldrb	r3, [r7, #3]
 800e932:	b2db      	uxtb	r3, r3
 800e934:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800e938:	b2da      	uxtb	r2, r3
 800e93a:	4b31      	ldr	r3, [pc, #196]	; (800ea00 <xPortStartScheduler+0x130>)
 800e93c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e93e:	4b31      	ldr	r3, [pc, #196]	; (800ea04 <xPortStartScheduler+0x134>)
 800e940:	2207      	movs	r2, #7
 800e942:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e944:	e009      	b.n	800e95a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800e946:	4b2f      	ldr	r3, [pc, #188]	; (800ea04 <xPortStartScheduler+0x134>)
 800e948:	681b      	ldr	r3, [r3, #0]
 800e94a:	3b01      	subs	r3, #1
 800e94c:	4a2d      	ldr	r2, [pc, #180]	; (800ea04 <xPortStartScheduler+0x134>)
 800e94e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e950:	78fb      	ldrb	r3, [r7, #3]
 800e952:	b2db      	uxtb	r3, r3
 800e954:	005b      	lsls	r3, r3, #1
 800e956:	b2db      	uxtb	r3, r3
 800e958:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e95a:	78fb      	ldrb	r3, [r7, #3]
 800e95c:	b2db      	uxtb	r3, r3
 800e95e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e962:	2b80      	cmp	r3, #128	; 0x80
 800e964:	d0ef      	beq.n	800e946 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e966:	4b27      	ldr	r3, [pc, #156]	; (800ea04 <xPortStartScheduler+0x134>)
 800e968:	681b      	ldr	r3, [r3, #0]
 800e96a:	f1c3 0307 	rsb	r3, r3, #7
 800e96e:	2b04      	cmp	r3, #4
 800e970:	d00a      	beq.n	800e988 <xPortStartScheduler+0xb8>
	__asm volatile
 800e972:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e976:	f383 8811 	msr	BASEPRI, r3
 800e97a:	f3bf 8f6f 	isb	sy
 800e97e:	f3bf 8f4f 	dsb	sy
 800e982:	60bb      	str	r3, [r7, #8]
}
 800e984:	bf00      	nop
 800e986:	e7fe      	b.n	800e986 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e988:	4b1e      	ldr	r3, [pc, #120]	; (800ea04 <xPortStartScheduler+0x134>)
 800e98a:	681b      	ldr	r3, [r3, #0]
 800e98c:	021b      	lsls	r3, r3, #8
 800e98e:	4a1d      	ldr	r2, [pc, #116]	; (800ea04 <xPortStartScheduler+0x134>)
 800e990:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e992:	4b1c      	ldr	r3, [pc, #112]	; (800ea04 <xPortStartScheduler+0x134>)
 800e994:	681b      	ldr	r3, [r3, #0]
 800e996:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e99a:	4a1a      	ldr	r2, [pc, #104]	; (800ea04 <xPortStartScheduler+0x134>)
 800e99c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	b2da      	uxtb	r2, r3
 800e9a2:	697b      	ldr	r3, [r7, #20]
 800e9a4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e9a6:	4b18      	ldr	r3, [pc, #96]	; (800ea08 <xPortStartScheduler+0x138>)
 800e9a8:	681b      	ldr	r3, [r3, #0]
 800e9aa:	4a17      	ldr	r2, [pc, #92]	; (800ea08 <xPortStartScheduler+0x138>)
 800e9ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e9b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e9b2:	4b15      	ldr	r3, [pc, #84]	; (800ea08 <xPortStartScheduler+0x138>)
 800e9b4:	681b      	ldr	r3, [r3, #0]
 800e9b6:	4a14      	ldr	r2, [pc, #80]	; (800ea08 <xPortStartScheduler+0x138>)
 800e9b8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800e9bc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e9be:	f000 f8dd 	bl	800eb7c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e9c2:	4b12      	ldr	r3, [pc, #72]	; (800ea0c <xPortStartScheduler+0x13c>)
 800e9c4:	2200      	movs	r2, #0
 800e9c6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e9c8:	f000 f8fc 	bl	800ebc4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e9cc:	4b10      	ldr	r3, [pc, #64]	; (800ea10 <xPortStartScheduler+0x140>)
 800e9ce:	681b      	ldr	r3, [r3, #0]
 800e9d0:	4a0f      	ldr	r2, [pc, #60]	; (800ea10 <xPortStartScheduler+0x140>)
 800e9d2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800e9d6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e9d8:	f7ff ff66 	bl	800e8a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e9dc:	f7ff fba4 	bl	800e128 <vTaskSwitchContext>
	prvTaskExitError();
 800e9e0:	f7ff ff1c 	bl	800e81c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e9e4:	2300      	movs	r3, #0
}
 800e9e6:	4618      	mov	r0, r3
 800e9e8:	3718      	adds	r7, #24
 800e9ea:	46bd      	mov	sp, r7
 800e9ec:	bd80      	pop	{r7, pc}
 800e9ee:	bf00      	nop
 800e9f0:	e000ed00 	.word	0xe000ed00
 800e9f4:	410fc271 	.word	0x410fc271
 800e9f8:	410fc270 	.word	0x410fc270
 800e9fc:	e000e400 	.word	0xe000e400
 800ea00:	20002c4c 	.word	0x20002c4c
 800ea04:	20002c50 	.word	0x20002c50
 800ea08:	e000ed20 	.word	0xe000ed20
 800ea0c:	20000018 	.word	0x20000018
 800ea10:	e000ef34 	.word	0xe000ef34

0800ea14 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ea14:	b480      	push	{r7}
 800ea16:	b083      	sub	sp, #12
 800ea18:	af00      	add	r7, sp, #0
	__asm volatile
 800ea1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea1e:	f383 8811 	msr	BASEPRI, r3
 800ea22:	f3bf 8f6f 	isb	sy
 800ea26:	f3bf 8f4f 	dsb	sy
 800ea2a:	607b      	str	r3, [r7, #4]
}
 800ea2c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ea2e:	4b0f      	ldr	r3, [pc, #60]	; (800ea6c <vPortEnterCritical+0x58>)
 800ea30:	681b      	ldr	r3, [r3, #0]
 800ea32:	3301      	adds	r3, #1
 800ea34:	4a0d      	ldr	r2, [pc, #52]	; (800ea6c <vPortEnterCritical+0x58>)
 800ea36:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ea38:	4b0c      	ldr	r3, [pc, #48]	; (800ea6c <vPortEnterCritical+0x58>)
 800ea3a:	681b      	ldr	r3, [r3, #0]
 800ea3c:	2b01      	cmp	r3, #1
 800ea3e:	d10f      	bne.n	800ea60 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ea40:	4b0b      	ldr	r3, [pc, #44]	; (800ea70 <vPortEnterCritical+0x5c>)
 800ea42:	681b      	ldr	r3, [r3, #0]
 800ea44:	b2db      	uxtb	r3, r3
 800ea46:	2b00      	cmp	r3, #0
 800ea48:	d00a      	beq.n	800ea60 <vPortEnterCritical+0x4c>
	__asm volatile
 800ea4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea4e:	f383 8811 	msr	BASEPRI, r3
 800ea52:	f3bf 8f6f 	isb	sy
 800ea56:	f3bf 8f4f 	dsb	sy
 800ea5a:	603b      	str	r3, [r7, #0]
}
 800ea5c:	bf00      	nop
 800ea5e:	e7fe      	b.n	800ea5e <vPortEnterCritical+0x4a>
	}
}
 800ea60:	bf00      	nop
 800ea62:	370c      	adds	r7, #12
 800ea64:	46bd      	mov	sp, r7
 800ea66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea6a:	4770      	bx	lr
 800ea6c:	20000018 	.word	0x20000018
 800ea70:	e000ed04 	.word	0xe000ed04

0800ea74 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ea74:	b480      	push	{r7}
 800ea76:	b083      	sub	sp, #12
 800ea78:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ea7a:	4b12      	ldr	r3, [pc, #72]	; (800eac4 <vPortExitCritical+0x50>)
 800ea7c:	681b      	ldr	r3, [r3, #0]
 800ea7e:	2b00      	cmp	r3, #0
 800ea80:	d10a      	bne.n	800ea98 <vPortExitCritical+0x24>
	__asm volatile
 800ea82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea86:	f383 8811 	msr	BASEPRI, r3
 800ea8a:	f3bf 8f6f 	isb	sy
 800ea8e:	f3bf 8f4f 	dsb	sy
 800ea92:	607b      	str	r3, [r7, #4]
}
 800ea94:	bf00      	nop
 800ea96:	e7fe      	b.n	800ea96 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ea98:	4b0a      	ldr	r3, [pc, #40]	; (800eac4 <vPortExitCritical+0x50>)
 800ea9a:	681b      	ldr	r3, [r3, #0]
 800ea9c:	3b01      	subs	r3, #1
 800ea9e:	4a09      	ldr	r2, [pc, #36]	; (800eac4 <vPortExitCritical+0x50>)
 800eaa0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800eaa2:	4b08      	ldr	r3, [pc, #32]	; (800eac4 <vPortExitCritical+0x50>)
 800eaa4:	681b      	ldr	r3, [r3, #0]
 800eaa6:	2b00      	cmp	r3, #0
 800eaa8:	d105      	bne.n	800eab6 <vPortExitCritical+0x42>
 800eaaa:	2300      	movs	r3, #0
 800eaac:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800eaae:	683b      	ldr	r3, [r7, #0]
 800eab0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800eab4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800eab6:	bf00      	nop
 800eab8:	370c      	adds	r7, #12
 800eaba:	46bd      	mov	sp, r7
 800eabc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eac0:	4770      	bx	lr
 800eac2:	bf00      	nop
 800eac4:	20000018 	.word	0x20000018
	...

0800ead0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ead0:	f3ef 8009 	mrs	r0, PSP
 800ead4:	f3bf 8f6f 	isb	sy
 800ead8:	4b15      	ldr	r3, [pc, #84]	; (800eb30 <pxCurrentTCBConst>)
 800eada:	681a      	ldr	r2, [r3, #0]
 800eadc:	f01e 0f10 	tst.w	lr, #16
 800eae0:	bf08      	it	eq
 800eae2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800eae6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eaea:	6010      	str	r0, [r2, #0]
 800eaec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800eaf0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800eaf4:	f380 8811 	msr	BASEPRI, r0
 800eaf8:	f3bf 8f4f 	dsb	sy
 800eafc:	f3bf 8f6f 	isb	sy
 800eb00:	f7ff fb12 	bl	800e128 <vTaskSwitchContext>
 800eb04:	f04f 0000 	mov.w	r0, #0
 800eb08:	f380 8811 	msr	BASEPRI, r0
 800eb0c:	bc09      	pop	{r0, r3}
 800eb0e:	6819      	ldr	r1, [r3, #0]
 800eb10:	6808      	ldr	r0, [r1, #0]
 800eb12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb16:	f01e 0f10 	tst.w	lr, #16
 800eb1a:	bf08      	it	eq
 800eb1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800eb20:	f380 8809 	msr	PSP, r0
 800eb24:	f3bf 8f6f 	isb	sy
 800eb28:	4770      	bx	lr
 800eb2a:	bf00      	nop
 800eb2c:	f3af 8000 	nop.w

0800eb30 <pxCurrentTCBConst>:
 800eb30:	20002b20 	.word	0x20002b20
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800eb34:	bf00      	nop
 800eb36:	bf00      	nop

0800eb38 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800eb38:	b580      	push	{r7, lr}
 800eb3a:	b082      	sub	sp, #8
 800eb3c:	af00      	add	r7, sp, #0
	__asm volatile
 800eb3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb42:	f383 8811 	msr	BASEPRI, r3
 800eb46:	f3bf 8f6f 	isb	sy
 800eb4a:	f3bf 8f4f 	dsb	sy
 800eb4e:	607b      	str	r3, [r7, #4]
}
 800eb50:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800eb52:	f7ff fa31 	bl	800dfb8 <xTaskIncrementTick>
 800eb56:	4603      	mov	r3, r0
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	d003      	beq.n	800eb64 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800eb5c:	4b06      	ldr	r3, [pc, #24]	; (800eb78 <xPortSysTickHandler+0x40>)
 800eb5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eb62:	601a      	str	r2, [r3, #0]
 800eb64:	2300      	movs	r3, #0
 800eb66:	603b      	str	r3, [r7, #0]
	__asm volatile
 800eb68:	683b      	ldr	r3, [r7, #0]
 800eb6a:	f383 8811 	msr	BASEPRI, r3
}
 800eb6e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800eb70:	bf00      	nop
 800eb72:	3708      	adds	r7, #8
 800eb74:	46bd      	mov	sp, r7
 800eb76:	bd80      	pop	{r7, pc}
 800eb78:	e000ed04 	.word	0xe000ed04

0800eb7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800eb7c:	b480      	push	{r7}
 800eb7e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800eb80:	4b0b      	ldr	r3, [pc, #44]	; (800ebb0 <vPortSetupTimerInterrupt+0x34>)
 800eb82:	2200      	movs	r2, #0
 800eb84:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800eb86:	4b0b      	ldr	r3, [pc, #44]	; (800ebb4 <vPortSetupTimerInterrupt+0x38>)
 800eb88:	2200      	movs	r2, #0
 800eb8a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800eb8c:	4b0a      	ldr	r3, [pc, #40]	; (800ebb8 <vPortSetupTimerInterrupt+0x3c>)
 800eb8e:	681b      	ldr	r3, [r3, #0]
 800eb90:	4a0a      	ldr	r2, [pc, #40]	; (800ebbc <vPortSetupTimerInterrupt+0x40>)
 800eb92:	fba2 2303 	umull	r2, r3, r2, r3
 800eb96:	099b      	lsrs	r3, r3, #6
 800eb98:	4a09      	ldr	r2, [pc, #36]	; (800ebc0 <vPortSetupTimerInterrupt+0x44>)
 800eb9a:	3b01      	subs	r3, #1
 800eb9c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800eb9e:	4b04      	ldr	r3, [pc, #16]	; (800ebb0 <vPortSetupTimerInterrupt+0x34>)
 800eba0:	2207      	movs	r2, #7
 800eba2:	601a      	str	r2, [r3, #0]
}
 800eba4:	bf00      	nop
 800eba6:	46bd      	mov	sp, r7
 800eba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebac:	4770      	bx	lr
 800ebae:	bf00      	nop
 800ebb0:	e000e010 	.word	0xe000e010
 800ebb4:	e000e018 	.word	0xe000e018
 800ebb8:	2000000c 	.word	0x2000000c
 800ebbc:	10624dd3 	.word	0x10624dd3
 800ebc0:	e000e014 	.word	0xe000e014

0800ebc4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ebc4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800ebd4 <vPortEnableVFP+0x10>
 800ebc8:	6801      	ldr	r1, [r0, #0]
 800ebca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800ebce:	6001      	str	r1, [r0, #0]
 800ebd0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ebd2:	bf00      	nop
 800ebd4:	e000ed88 	.word	0xe000ed88

0800ebd8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ebd8:	b580      	push	{r7, lr}
 800ebda:	b08a      	sub	sp, #40	; 0x28
 800ebdc:	af00      	add	r7, sp, #0
 800ebde:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ebe0:	2300      	movs	r3, #0
 800ebe2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ebe4:	f7ff f93e 	bl	800de64 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ebe8:	4b5b      	ldr	r3, [pc, #364]	; (800ed58 <pvPortMalloc+0x180>)
 800ebea:	681b      	ldr	r3, [r3, #0]
 800ebec:	2b00      	cmp	r3, #0
 800ebee:	d101      	bne.n	800ebf4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ebf0:	f000 f920 	bl	800ee34 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ebf4:	4b59      	ldr	r3, [pc, #356]	; (800ed5c <pvPortMalloc+0x184>)
 800ebf6:	681a      	ldr	r2, [r3, #0]
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	4013      	ands	r3, r2
 800ebfc:	2b00      	cmp	r3, #0
 800ebfe:	f040 8093 	bne.w	800ed28 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	2b00      	cmp	r3, #0
 800ec06:	d01d      	beq.n	800ec44 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800ec08:	2208      	movs	r2, #8
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	4413      	add	r3, r2
 800ec0e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	f003 0307 	and.w	r3, r3, #7
 800ec16:	2b00      	cmp	r3, #0
 800ec18:	d014      	beq.n	800ec44 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	f023 0307 	bic.w	r3, r3, #7
 800ec20:	3308      	adds	r3, #8
 800ec22:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	f003 0307 	and.w	r3, r3, #7
 800ec2a:	2b00      	cmp	r3, #0
 800ec2c:	d00a      	beq.n	800ec44 <pvPortMalloc+0x6c>
	__asm volatile
 800ec2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec32:	f383 8811 	msr	BASEPRI, r3
 800ec36:	f3bf 8f6f 	isb	sy
 800ec3a:	f3bf 8f4f 	dsb	sy
 800ec3e:	617b      	str	r3, [r7, #20]
}
 800ec40:	bf00      	nop
 800ec42:	e7fe      	b.n	800ec42 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	2b00      	cmp	r3, #0
 800ec48:	d06e      	beq.n	800ed28 <pvPortMalloc+0x150>
 800ec4a:	4b45      	ldr	r3, [pc, #276]	; (800ed60 <pvPortMalloc+0x188>)
 800ec4c:	681b      	ldr	r3, [r3, #0]
 800ec4e:	687a      	ldr	r2, [r7, #4]
 800ec50:	429a      	cmp	r2, r3
 800ec52:	d869      	bhi.n	800ed28 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ec54:	4b43      	ldr	r3, [pc, #268]	; (800ed64 <pvPortMalloc+0x18c>)
 800ec56:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ec58:	4b42      	ldr	r3, [pc, #264]	; (800ed64 <pvPortMalloc+0x18c>)
 800ec5a:	681b      	ldr	r3, [r3, #0]
 800ec5c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ec5e:	e004      	b.n	800ec6a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800ec60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec62:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ec64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec66:	681b      	ldr	r3, [r3, #0]
 800ec68:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ec6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec6c:	685b      	ldr	r3, [r3, #4]
 800ec6e:	687a      	ldr	r2, [r7, #4]
 800ec70:	429a      	cmp	r2, r3
 800ec72:	d903      	bls.n	800ec7c <pvPortMalloc+0xa4>
 800ec74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec76:	681b      	ldr	r3, [r3, #0]
 800ec78:	2b00      	cmp	r3, #0
 800ec7a:	d1f1      	bne.n	800ec60 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ec7c:	4b36      	ldr	r3, [pc, #216]	; (800ed58 <pvPortMalloc+0x180>)
 800ec7e:	681b      	ldr	r3, [r3, #0]
 800ec80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ec82:	429a      	cmp	r2, r3
 800ec84:	d050      	beq.n	800ed28 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ec86:	6a3b      	ldr	r3, [r7, #32]
 800ec88:	681b      	ldr	r3, [r3, #0]
 800ec8a:	2208      	movs	r2, #8
 800ec8c:	4413      	add	r3, r2
 800ec8e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ec90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec92:	681a      	ldr	r2, [r3, #0]
 800ec94:	6a3b      	ldr	r3, [r7, #32]
 800ec96:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ec98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec9a:	685a      	ldr	r2, [r3, #4]
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	1ad2      	subs	r2, r2, r3
 800eca0:	2308      	movs	r3, #8
 800eca2:	005b      	lsls	r3, r3, #1
 800eca4:	429a      	cmp	r2, r3
 800eca6:	d91f      	bls.n	800ece8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800eca8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	4413      	add	r3, r2
 800ecae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ecb0:	69bb      	ldr	r3, [r7, #24]
 800ecb2:	f003 0307 	and.w	r3, r3, #7
 800ecb6:	2b00      	cmp	r3, #0
 800ecb8:	d00a      	beq.n	800ecd0 <pvPortMalloc+0xf8>
	__asm volatile
 800ecba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecbe:	f383 8811 	msr	BASEPRI, r3
 800ecc2:	f3bf 8f6f 	isb	sy
 800ecc6:	f3bf 8f4f 	dsb	sy
 800ecca:	613b      	str	r3, [r7, #16]
}
 800eccc:	bf00      	nop
 800ecce:	e7fe      	b.n	800ecce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ecd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecd2:	685a      	ldr	r2, [r3, #4]
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	1ad2      	subs	r2, r2, r3
 800ecd8:	69bb      	ldr	r3, [r7, #24]
 800ecda:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ecdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecde:	687a      	ldr	r2, [r7, #4]
 800ece0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ece2:	69b8      	ldr	r0, [r7, #24]
 800ece4:	f000 f908 	bl	800eef8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ece8:	4b1d      	ldr	r3, [pc, #116]	; (800ed60 <pvPortMalloc+0x188>)
 800ecea:	681a      	ldr	r2, [r3, #0]
 800ecec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecee:	685b      	ldr	r3, [r3, #4]
 800ecf0:	1ad3      	subs	r3, r2, r3
 800ecf2:	4a1b      	ldr	r2, [pc, #108]	; (800ed60 <pvPortMalloc+0x188>)
 800ecf4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ecf6:	4b1a      	ldr	r3, [pc, #104]	; (800ed60 <pvPortMalloc+0x188>)
 800ecf8:	681a      	ldr	r2, [r3, #0]
 800ecfa:	4b1b      	ldr	r3, [pc, #108]	; (800ed68 <pvPortMalloc+0x190>)
 800ecfc:	681b      	ldr	r3, [r3, #0]
 800ecfe:	429a      	cmp	r2, r3
 800ed00:	d203      	bcs.n	800ed0a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ed02:	4b17      	ldr	r3, [pc, #92]	; (800ed60 <pvPortMalloc+0x188>)
 800ed04:	681b      	ldr	r3, [r3, #0]
 800ed06:	4a18      	ldr	r2, [pc, #96]	; (800ed68 <pvPortMalloc+0x190>)
 800ed08:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ed0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed0c:	685a      	ldr	r2, [r3, #4]
 800ed0e:	4b13      	ldr	r3, [pc, #76]	; (800ed5c <pvPortMalloc+0x184>)
 800ed10:	681b      	ldr	r3, [r3, #0]
 800ed12:	431a      	orrs	r2, r3
 800ed14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed16:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ed18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed1a:	2200      	movs	r2, #0
 800ed1c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800ed1e:	4b13      	ldr	r3, [pc, #76]	; (800ed6c <pvPortMalloc+0x194>)
 800ed20:	681b      	ldr	r3, [r3, #0]
 800ed22:	3301      	adds	r3, #1
 800ed24:	4a11      	ldr	r2, [pc, #68]	; (800ed6c <pvPortMalloc+0x194>)
 800ed26:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ed28:	f7ff f8aa 	bl	800de80 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ed2c:	69fb      	ldr	r3, [r7, #28]
 800ed2e:	f003 0307 	and.w	r3, r3, #7
 800ed32:	2b00      	cmp	r3, #0
 800ed34:	d00a      	beq.n	800ed4c <pvPortMalloc+0x174>
	__asm volatile
 800ed36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed3a:	f383 8811 	msr	BASEPRI, r3
 800ed3e:	f3bf 8f6f 	isb	sy
 800ed42:	f3bf 8f4f 	dsb	sy
 800ed46:	60fb      	str	r3, [r7, #12]
}
 800ed48:	bf00      	nop
 800ed4a:	e7fe      	b.n	800ed4a <pvPortMalloc+0x172>
	return pvReturn;
 800ed4c:	69fb      	ldr	r3, [r7, #28]
}
 800ed4e:	4618      	mov	r0, r3
 800ed50:	3728      	adds	r7, #40	; 0x28
 800ed52:	46bd      	mov	sp, r7
 800ed54:	bd80      	pop	{r7, pc}
 800ed56:	bf00      	nop
 800ed58:	2000685c 	.word	0x2000685c
 800ed5c:	20006870 	.word	0x20006870
 800ed60:	20006860 	.word	0x20006860
 800ed64:	20006854 	.word	0x20006854
 800ed68:	20006864 	.word	0x20006864
 800ed6c:	20006868 	.word	0x20006868

0800ed70 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ed70:	b580      	push	{r7, lr}
 800ed72:	b086      	sub	sp, #24
 800ed74:	af00      	add	r7, sp, #0
 800ed76:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	2b00      	cmp	r3, #0
 800ed80:	d04d      	beq.n	800ee1e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ed82:	2308      	movs	r3, #8
 800ed84:	425b      	negs	r3, r3
 800ed86:	697a      	ldr	r2, [r7, #20]
 800ed88:	4413      	add	r3, r2
 800ed8a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ed8c:	697b      	ldr	r3, [r7, #20]
 800ed8e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ed90:	693b      	ldr	r3, [r7, #16]
 800ed92:	685a      	ldr	r2, [r3, #4]
 800ed94:	4b24      	ldr	r3, [pc, #144]	; (800ee28 <vPortFree+0xb8>)
 800ed96:	681b      	ldr	r3, [r3, #0]
 800ed98:	4013      	ands	r3, r2
 800ed9a:	2b00      	cmp	r3, #0
 800ed9c:	d10a      	bne.n	800edb4 <vPortFree+0x44>
	__asm volatile
 800ed9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eda2:	f383 8811 	msr	BASEPRI, r3
 800eda6:	f3bf 8f6f 	isb	sy
 800edaa:	f3bf 8f4f 	dsb	sy
 800edae:	60fb      	str	r3, [r7, #12]
}
 800edb0:	bf00      	nop
 800edb2:	e7fe      	b.n	800edb2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800edb4:	693b      	ldr	r3, [r7, #16]
 800edb6:	681b      	ldr	r3, [r3, #0]
 800edb8:	2b00      	cmp	r3, #0
 800edba:	d00a      	beq.n	800edd2 <vPortFree+0x62>
	__asm volatile
 800edbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edc0:	f383 8811 	msr	BASEPRI, r3
 800edc4:	f3bf 8f6f 	isb	sy
 800edc8:	f3bf 8f4f 	dsb	sy
 800edcc:	60bb      	str	r3, [r7, #8]
}
 800edce:	bf00      	nop
 800edd0:	e7fe      	b.n	800edd0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800edd2:	693b      	ldr	r3, [r7, #16]
 800edd4:	685a      	ldr	r2, [r3, #4]
 800edd6:	4b14      	ldr	r3, [pc, #80]	; (800ee28 <vPortFree+0xb8>)
 800edd8:	681b      	ldr	r3, [r3, #0]
 800edda:	4013      	ands	r3, r2
 800eddc:	2b00      	cmp	r3, #0
 800edde:	d01e      	beq.n	800ee1e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ede0:	693b      	ldr	r3, [r7, #16]
 800ede2:	681b      	ldr	r3, [r3, #0]
 800ede4:	2b00      	cmp	r3, #0
 800ede6:	d11a      	bne.n	800ee1e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ede8:	693b      	ldr	r3, [r7, #16]
 800edea:	685a      	ldr	r2, [r3, #4]
 800edec:	4b0e      	ldr	r3, [pc, #56]	; (800ee28 <vPortFree+0xb8>)
 800edee:	681b      	ldr	r3, [r3, #0]
 800edf0:	43db      	mvns	r3, r3
 800edf2:	401a      	ands	r2, r3
 800edf4:	693b      	ldr	r3, [r7, #16]
 800edf6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800edf8:	f7ff f834 	bl	800de64 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800edfc:	693b      	ldr	r3, [r7, #16]
 800edfe:	685a      	ldr	r2, [r3, #4]
 800ee00:	4b0a      	ldr	r3, [pc, #40]	; (800ee2c <vPortFree+0xbc>)
 800ee02:	681b      	ldr	r3, [r3, #0]
 800ee04:	4413      	add	r3, r2
 800ee06:	4a09      	ldr	r2, [pc, #36]	; (800ee2c <vPortFree+0xbc>)
 800ee08:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ee0a:	6938      	ldr	r0, [r7, #16]
 800ee0c:	f000 f874 	bl	800eef8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ee10:	4b07      	ldr	r3, [pc, #28]	; (800ee30 <vPortFree+0xc0>)
 800ee12:	681b      	ldr	r3, [r3, #0]
 800ee14:	3301      	adds	r3, #1
 800ee16:	4a06      	ldr	r2, [pc, #24]	; (800ee30 <vPortFree+0xc0>)
 800ee18:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ee1a:	f7ff f831 	bl	800de80 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ee1e:	bf00      	nop
 800ee20:	3718      	adds	r7, #24
 800ee22:	46bd      	mov	sp, r7
 800ee24:	bd80      	pop	{r7, pc}
 800ee26:	bf00      	nop
 800ee28:	20006870 	.word	0x20006870
 800ee2c:	20006860 	.word	0x20006860
 800ee30:	2000686c 	.word	0x2000686c

0800ee34 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ee34:	b480      	push	{r7}
 800ee36:	b085      	sub	sp, #20
 800ee38:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ee3a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800ee3e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ee40:	4b27      	ldr	r3, [pc, #156]	; (800eee0 <prvHeapInit+0xac>)
 800ee42:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ee44:	68fb      	ldr	r3, [r7, #12]
 800ee46:	f003 0307 	and.w	r3, r3, #7
 800ee4a:	2b00      	cmp	r3, #0
 800ee4c:	d00c      	beq.n	800ee68 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ee4e:	68fb      	ldr	r3, [r7, #12]
 800ee50:	3307      	adds	r3, #7
 800ee52:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ee54:	68fb      	ldr	r3, [r7, #12]
 800ee56:	f023 0307 	bic.w	r3, r3, #7
 800ee5a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ee5c:	68ba      	ldr	r2, [r7, #8]
 800ee5e:	68fb      	ldr	r3, [r7, #12]
 800ee60:	1ad3      	subs	r3, r2, r3
 800ee62:	4a1f      	ldr	r2, [pc, #124]	; (800eee0 <prvHeapInit+0xac>)
 800ee64:	4413      	add	r3, r2
 800ee66:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ee68:	68fb      	ldr	r3, [r7, #12]
 800ee6a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ee6c:	4a1d      	ldr	r2, [pc, #116]	; (800eee4 <prvHeapInit+0xb0>)
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ee72:	4b1c      	ldr	r3, [pc, #112]	; (800eee4 <prvHeapInit+0xb0>)
 800ee74:	2200      	movs	r2, #0
 800ee76:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	68ba      	ldr	r2, [r7, #8]
 800ee7c:	4413      	add	r3, r2
 800ee7e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ee80:	2208      	movs	r2, #8
 800ee82:	68fb      	ldr	r3, [r7, #12]
 800ee84:	1a9b      	subs	r3, r3, r2
 800ee86:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ee88:	68fb      	ldr	r3, [r7, #12]
 800ee8a:	f023 0307 	bic.w	r3, r3, #7
 800ee8e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ee90:	68fb      	ldr	r3, [r7, #12]
 800ee92:	4a15      	ldr	r2, [pc, #84]	; (800eee8 <prvHeapInit+0xb4>)
 800ee94:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ee96:	4b14      	ldr	r3, [pc, #80]	; (800eee8 <prvHeapInit+0xb4>)
 800ee98:	681b      	ldr	r3, [r3, #0]
 800ee9a:	2200      	movs	r2, #0
 800ee9c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ee9e:	4b12      	ldr	r3, [pc, #72]	; (800eee8 <prvHeapInit+0xb4>)
 800eea0:	681b      	ldr	r3, [r3, #0]
 800eea2:	2200      	movs	r2, #0
 800eea4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800eeaa:	683b      	ldr	r3, [r7, #0]
 800eeac:	68fa      	ldr	r2, [r7, #12]
 800eeae:	1ad2      	subs	r2, r2, r3
 800eeb0:	683b      	ldr	r3, [r7, #0]
 800eeb2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800eeb4:	4b0c      	ldr	r3, [pc, #48]	; (800eee8 <prvHeapInit+0xb4>)
 800eeb6:	681a      	ldr	r2, [r3, #0]
 800eeb8:	683b      	ldr	r3, [r7, #0]
 800eeba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800eebc:	683b      	ldr	r3, [r7, #0]
 800eebe:	685b      	ldr	r3, [r3, #4]
 800eec0:	4a0a      	ldr	r2, [pc, #40]	; (800eeec <prvHeapInit+0xb8>)
 800eec2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800eec4:	683b      	ldr	r3, [r7, #0]
 800eec6:	685b      	ldr	r3, [r3, #4]
 800eec8:	4a09      	ldr	r2, [pc, #36]	; (800eef0 <prvHeapInit+0xbc>)
 800eeca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800eecc:	4b09      	ldr	r3, [pc, #36]	; (800eef4 <prvHeapInit+0xc0>)
 800eece:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800eed2:	601a      	str	r2, [r3, #0]
}
 800eed4:	bf00      	nop
 800eed6:	3714      	adds	r7, #20
 800eed8:	46bd      	mov	sp, r7
 800eeda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eede:	4770      	bx	lr
 800eee0:	20002c54 	.word	0x20002c54
 800eee4:	20006854 	.word	0x20006854
 800eee8:	2000685c 	.word	0x2000685c
 800eeec:	20006864 	.word	0x20006864
 800eef0:	20006860 	.word	0x20006860
 800eef4:	20006870 	.word	0x20006870

0800eef8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800eef8:	b480      	push	{r7}
 800eefa:	b085      	sub	sp, #20
 800eefc:	af00      	add	r7, sp, #0
 800eefe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ef00:	4b28      	ldr	r3, [pc, #160]	; (800efa4 <prvInsertBlockIntoFreeList+0xac>)
 800ef02:	60fb      	str	r3, [r7, #12]
 800ef04:	e002      	b.n	800ef0c <prvInsertBlockIntoFreeList+0x14>
 800ef06:	68fb      	ldr	r3, [r7, #12]
 800ef08:	681b      	ldr	r3, [r3, #0]
 800ef0a:	60fb      	str	r3, [r7, #12]
 800ef0c:	68fb      	ldr	r3, [r7, #12]
 800ef0e:	681b      	ldr	r3, [r3, #0]
 800ef10:	687a      	ldr	r2, [r7, #4]
 800ef12:	429a      	cmp	r2, r3
 800ef14:	d8f7      	bhi.n	800ef06 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ef16:	68fb      	ldr	r3, [r7, #12]
 800ef18:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ef1a:	68fb      	ldr	r3, [r7, #12]
 800ef1c:	685b      	ldr	r3, [r3, #4]
 800ef1e:	68ba      	ldr	r2, [r7, #8]
 800ef20:	4413      	add	r3, r2
 800ef22:	687a      	ldr	r2, [r7, #4]
 800ef24:	429a      	cmp	r2, r3
 800ef26:	d108      	bne.n	800ef3a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ef28:	68fb      	ldr	r3, [r7, #12]
 800ef2a:	685a      	ldr	r2, [r3, #4]
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	685b      	ldr	r3, [r3, #4]
 800ef30:	441a      	add	r2, r3
 800ef32:	68fb      	ldr	r3, [r7, #12]
 800ef34:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ef36:	68fb      	ldr	r3, [r7, #12]
 800ef38:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	685b      	ldr	r3, [r3, #4]
 800ef42:	68ba      	ldr	r2, [r7, #8]
 800ef44:	441a      	add	r2, r3
 800ef46:	68fb      	ldr	r3, [r7, #12]
 800ef48:	681b      	ldr	r3, [r3, #0]
 800ef4a:	429a      	cmp	r2, r3
 800ef4c:	d118      	bne.n	800ef80 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ef4e:	68fb      	ldr	r3, [r7, #12]
 800ef50:	681a      	ldr	r2, [r3, #0]
 800ef52:	4b15      	ldr	r3, [pc, #84]	; (800efa8 <prvInsertBlockIntoFreeList+0xb0>)
 800ef54:	681b      	ldr	r3, [r3, #0]
 800ef56:	429a      	cmp	r2, r3
 800ef58:	d00d      	beq.n	800ef76 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	685a      	ldr	r2, [r3, #4]
 800ef5e:	68fb      	ldr	r3, [r7, #12]
 800ef60:	681b      	ldr	r3, [r3, #0]
 800ef62:	685b      	ldr	r3, [r3, #4]
 800ef64:	441a      	add	r2, r3
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ef6a:	68fb      	ldr	r3, [r7, #12]
 800ef6c:	681b      	ldr	r3, [r3, #0]
 800ef6e:	681a      	ldr	r2, [r3, #0]
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	601a      	str	r2, [r3, #0]
 800ef74:	e008      	b.n	800ef88 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ef76:	4b0c      	ldr	r3, [pc, #48]	; (800efa8 <prvInsertBlockIntoFreeList+0xb0>)
 800ef78:	681a      	ldr	r2, [r3, #0]
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	601a      	str	r2, [r3, #0]
 800ef7e:	e003      	b.n	800ef88 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ef80:	68fb      	ldr	r3, [r7, #12]
 800ef82:	681a      	ldr	r2, [r3, #0]
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ef88:	68fa      	ldr	r2, [r7, #12]
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	429a      	cmp	r2, r3
 800ef8e:	d002      	beq.n	800ef96 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ef90:	68fb      	ldr	r3, [r7, #12]
 800ef92:	687a      	ldr	r2, [r7, #4]
 800ef94:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ef96:	bf00      	nop
 800ef98:	3714      	adds	r7, #20
 800ef9a:	46bd      	mov	sp, r7
 800ef9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efa0:	4770      	bx	lr
 800efa2:	bf00      	nop
 800efa4:	20006854 	.word	0x20006854
 800efa8:	2000685c 	.word	0x2000685c

0800efac <__errno>:
 800efac:	4b01      	ldr	r3, [pc, #4]	; (800efb4 <__errno+0x8>)
 800efae:	6818      	ldr	r0, [r3, #0]
 800efb0:	4770      	bx	lr
 800efb2:	bf00      	nop
 800efb4:	2000001c 	.word	0x2000001c

0800efb8 <__libc_init_array>:
 800efb8:	b570      	push	{r4, r5, r6, lr}
 800efba:	4d0d      	ldr	r5, [pc, #52]	; (800eff0 <__libc_init_array+0x38>)
 800efbc:	4c0d      	ldr	r4, [pc, #52]	; (800eff4 <__libc_init_array+0x3c>)
 800efbe:	1b64      	subs	r4, r4, r5
 800efc0:	10a4      	asrs	r4, r4, #2
 800efc2:	2600      	movs	r6, #0
 800efc4:	42a6      	cmp	r6, r4
 800efc6:	d109      	bne.n	800efdc <__libc_init_array+0x24>
 800efc8:	4d0b      	ldr	r5, [pc, #44]	; (800eff8 <__libc_init_array+0x40>)
 800efca:	4c0c      	ldr	r4, [pc, #48]	; (800effc <__libc_init_array+0x44>)
 800efcc:	f005 f9a4 	bl	8014318 <_init>
 800efd0:	1b64      	subs	r4, r4, r5
 800efd2:	10a4      	asrs	r4, r4, #2
 800efd4:	2600      	movs	r6, #0
 800efd6:	42a6      	cmp	r6, r4
 800efd8:	d105      	bne.n	800efe6 <__libc_init_array+0x2e>
 800efda:	bd70      	pop	{r4, r5, r6, pc}
 800efdc:	f855 3b04 	ldr.w	r3, [r5], #4
 800efe0:	4798      	blx	r3
 800efe2:	3601      	adds	r6, #1
 800efe4:	e7ee      	b.n	800efc4 <__libc_init_array+0xc>
 800efe6:	f855 3b04 	ldr.w	r3, [r5], #4
 800efea:	4798      	blx	r3
 800efec:	3601      	adds	r6, #1
 800efee:	e7f2      	b.n	800efd6 <__libc_init_array+0x1e>
 800eff0:	08014db8 	.word	0x08014db8
 800eff4:	08014db8 	.word	0x08014db8
 800eff8:	08014db8 	.word	0x08014db8
 800effc:	08014dbc 	.word	0x08014dbc

0800f000 <memcpy>:
 800f000:	440a      	add	r2, r1
 800f002:	4291      	cmp	r1, r2
 800f004:	f100 33ff 	add.w	r3, r0, #4294967295
 800f008:	d100      	bne.n	800f00c <memcpy+0xc>
 800f00a:	4770      	bx	lr
 800f00c:	b510      	push	{r4, lr}
 800f00e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f012:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f016:	4291      	cmp	r1, r2
 800f018:	d1f9      	bne.n	800f00e <memcpy+0xe>
 800f01a:	bd10      	pop	{r4, pc}

0800f01c <memset>:
 800f01c:	4402      	add	r2, r0
 800f01e:	4603      	mov	r3, r0
 800f020:	4293      	cmp	r3, r2
 800f022:	d100      	bne.n	800f026 <memset+0xa>
 800f024:	4770      	bx	lr
 800f026:	f803 1b01 	strb.w	r1, [r3], #1
 800f02a:	e7f9      	b.n	800f020 <memset+0x4>

0800f02c <__cvt>:
 800f02c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f030:	ec55 4b10 	vmov	r4, r5, d0
 800f034:	2d00      	cmp	r5, #0
 800f036:	460e      	mov	r6, r1
 800f038:	4619      	mov	r1, r3
 800f03a:	462b      	mov	r3, r5
 800f03c:	bfbb      	ittet	lt
 800f03e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800f042:	461d      	movlt	r5, r3
 800f044:	2300      	movge	r3, #0
 800f046:	232d      	movlt	r3, #45	; 0x2d
 800f048:	700b      	strb	r3, [r1, #0]
 800f04a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f04c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800f050:	4691      	mov	r9, r2
 800f052:	f023 0820 	bic.w	r8, r3, #32
 800f056:	bfbc      	itt	lt
 800f058:	4622      	movlt	r2, r4
 800f05a:	4614      	movlt	r4, r2
 800f05c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800f060:	d005      	beq.n	800f06e <__cvt+0x42>
 800f062:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800f066:	d100      	bne.n	800f06a <__cvt+0x3e>
 800f068:	3601      	adds	r6, #1
 800f06a:	2102      	movs	r1, #2
 800f06c:	e000      	b.n	800f070 <__cvt+0x44>
 800f06e:	2103      	movs	r1, #3
 800f070:	ab03      	add	r3, sp, #12
 800f072:	9301      	str	r3, [sp, #4]
 800f074:	ab02      	add	r3, sp, #8
 800f076:	9300      	str	r3, [sp, #0]
 800f078:	ec45 4b10 	vmov	d0, r4, r5
 800f07c:	4653      	mov	r3, sl
 800f07e:	4632      	mov	r2, r6
 800f080:	f000 fcea 	bl	800fa58 <_dtoa_r>
 800f084:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800f088:	4607      	mov	r7, r0
 800f08a:	d102      	bne.n	800f092 <__cvt+0x66>
 800f08c:	f019 0f01 	tst.w	r9, #1
 800f090:	d022      	beq.n	800f0d8 <__cvt+0xac>
 800f092:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800f096:	eb07 0906 	add.w	r9, r7, r6
 800f09a:	d110      	bne.n	800f0be <__cvt+0x92>
 800f09c:	783b      	ldrb	r3, [r7, #0]
 800f09e:	2b30      	cmp	r3, #48	; 0x30
 800f0a0:	d10a      	bne.n	800f0b8 <__cvt+0x8c>
 800f0a2:	2200      	movs	r2, #0
 800f0a4:	2300      	movs	r3, #0
 800f0a6:	4620      	mov	r0, r4
 800f0a8:	4629      	mov	r1, r5
 800f0aa:	f7f1 fd0d 	bl	8000ac8 <__aeabi_dcmpeq>
 800f0ae:	b918      	cbnz	r0, 800f0b8 <__cvt+0x8c>
 800f0b0:	f1c6 0601 	rsb	r6, r6, #1
 800f0b4:	f8ca 6000 	str.w	r6, [sl]
 800f0b8:	f8da 3000 	ldr.w	r3, [sl]
 800f0bc:	4499      	add	r9, r3
 800f0be:	2200      	movs	r2, #0
 800f0c0:	2300      	movs	r3, #0
 800f0c2:	4620      	mov	r0, r4
 800f0c4:	4629      	mov	r1, r5
 800f0c6:	f7f1 fcff 	bl	8000ac8 <__aeabi_dcmpeq>
 800f0ca:	b108      	cbz	r0, 800f0d0 <__cvt+0xa4>
 800f0cc:	f8cd 900c 	str.w	r9, [sp, #12]
 800f0d0:	2230      	movs	r2, #48	; 0x30
 800f0d2:	9b03      	ldr	r3, [sp, #12]
 800f0d4:	454b      	cmp	r3, r9
 800f0d6:	d307      	bcc.n	800f0e8 <__cvt+0xbc>
 800f0d8:	9b03      	ldr	r3, [sp, #12]
 800f0da:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f0dc:	1bdb      	subs	r3, r3, r7
 800f0de:	4638      	mov	r0, r7
 800f0e0:	6013      	str	r3, [r2, #0]
 800f0e2:	b004      	add	sp, #16
 800f0e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f0e8:	1c59      	adds	r1, r3, #1
 800f0ea:	9103      	str	r1, [sp, #12]
 800f0ec:	701a      	strb	r2, [r3, #0]
 800f0ee:	e7f0      	b.n	800f0d2 <__cvt+0xa6>

0800f0f0 <__exponent>:
 800f0f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f0f2:	4603      	mov	r3, r0
 800f0f4:	2900      	cmp	r1, #0
 800f0f6:	bfb8      	it	lt
 800f0f8:	4249      	neglt	r1, r1
 800f0fa:	f803 2b02 	strb.w	r2, [r3], #2
 800f0fe:	bfb4      	ite	lt
 800f100:	222d      	movlt	r2, #45	; 0x2d
 800f102:	222b      	movge	r2, #43	; 0x2b
 800f104:	2909      	cmp	r1, #9
 800f106:	7042      	strb	r2, [r0, #1]
 800f108:	dd2a      	ble.n	800f160 <__exponent+0x70>
 800f10a:	f10d 0407 	add.w	r4, sp, #7
 800f10e:	46a4      	mov	ip, r4
 800f110:	270a      	movs	r7, #10
 800f112:	46a6      	mov	lr, r4
 800f114:	460a      	mov	r2, r1
 800f116:	fb91 f6f7 	sdiv	r6, r1, r7
 800f11a:	fb07 1516 	mls	r5, r7, r6, r1
 800f11e:	3530      	adds	r5, #48	; 0x30
 800f120:	2a63      	cmp	r2, #99	; 0x63
 800f122:	f104 34ff 	add.w	r4, r4, #4294967295
 800f126:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800f12a:	4631      	mov	r1, r6
 800f12c:	dcf1      	bgt.n	800f112 <__exponent+0x22>
 800f12e:	3130      	adds	r1, #48	; 0x30
 800f130:	f1ae 0502 	sub.w	r5, lr, #2
 800f134:	f804 1c01 	strb.w	r1, [r4, #-1]
 800f138:	1c44      	adds	r4, r0, #1
 800f13a:	4629      	mov	r1, r5
 800f13c:	4561      	cmp	r1, ip
 800f13e:	d30a      	bcc.n	800f156 <__exponent+0x66>
 800f140:	f10d 0209 	add.w	r2, sp, #9
 800f144:	eba2 020e 	sub.w	r2, r2, lr
 800f148:	4565      	cmp	r5, ip
 800f14a:	bf88      	it	hi
 800f14c:	2200      	movhi	r2, #0
 800f14e:	4413      	add	r3, r2
 800f150:	1a18      	subs	r0, r3, r0
 800f152:	b003      	add	sp, #12
 800f154:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f156:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f15a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800f15e:	e7ed      	b.n	800f13c <__exponent+0x4c>
 800f160:	2330      	movs	r3, #48	; 0x30
 800f162:	3130      	adds	r1, #48	; 0x30
 800f164:	7083      	strb	r3, [r0, #2]
 800f166:	70c1      	strb	r1, [r0, #3]
 800f168:	1d03      	adds	r3, r0, #4
 800f16a:	e7f1      	b.n	800f150 <__exponent+0x60>

0800f16c <_printf_float>:
 800f16c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f170:	ed2d 8b02 	vpush	{d8}
 800f174:	b08d      	sub	sp, #52	; 0x34
 800f176:	460c      	mov	r4, r1
 800f178:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800f17c:	4616      	mov	r6, r2
 800f17e:	461f      	mov	r7, r3
 800f180:	4605      	mov	r5, r0
 800f182:	f001 fa57 	bl	8010634 <_localeconv_r>
 800f186:	f8d0 a000 	ldr.w	sl, [r0]
 800f18a:	4650      	mov	r0, sl
 800f18c:	f7f1 f820 	bl	80001d0 <strlen>
 800f190:	2300      	movs	r3, #0
 800f192:	930a      	str	r3, [sp, #40]	; 0x28
 800f194:	6823      	ldr	r3, [r4, #0]
 800f196:	9305      	str	r3, [sp, #20]
 800f198:	f8d8 3000 	ldr.w	r3, [r8]
 800f19c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800f1a0:	3307      	adds	r3, #7
 800f1a2:	f023 0307 	bic.w	r3, r3, #7
 800f1a6:	f103 0208 	add.w	r2, r3, #8
 800f1aa:	f8c8 2000 	str.w	r2, [r8]
 800f1ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1b2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800f1b6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800f1ba:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800f1be:	9307      	str	r3, [sp, #28]
 800f1c0:	f8cd 8018 	str.w	r8, [sp, #24]
 800f1c4:	ee08 0a10 	vmov	s16, r0
 800f1c8:	4b9f      	ldr	r3, [pc, #636]	; (800f448 <_printf_float+0x2dc>)
 800f1ca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f1ce:	f04f 32ff 	mov.w	r2, #4294967295
 800f1d2:	f7f1 fcab 	bl	8000b2c <__aeabi_dcmpun>
 800f1d6:	bb88      	cbnz	r0, 800f23c <_printf_float+0xd0>
 800f1d8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f1dc:	4b9a      	ldr	r3, [pc, #616]	; (800f448 <_printf_float+0x2dc>)
 800f1de:	f04f 32ff 	mov.w	r2, #4294967295
 800f1e2:	f7f1 fc85 	bl	8000af0 <__aeabi_dcmple>
 800f1e6:	bb48      	cbnz	r0, 800f23c <_printf_float+0xd0>
 800f1e8:	2200      	movs	r2, #0
 800f1ea:	2300      	movs	r3, #0
 800f1ec:	4640      	mov	r0, r8
 800f1ee:	4649      	mov	r1, r9
 800f1f0:	f7f1 fc74 	bl	8000adc <__aeabi_dcmplt>
 800f1f4:	b110      	cbz	r0, 800f1fc <_printf_float+0x90>
 800f1f6:	232d      	movs	r3, #45	; 0x2d
 800f1f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f1fc:	4b93      	ldr	r3, [pc, #588]	; (800f44c <_printf_float+0x2e0>)
 800f1fe:	4894      	ldr	r0, [pc, #592]	; (800f450 <_printf_float+0x2e4>)
 800f200:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800f204:	bf94      	ite	ls
 800f206:	4698      	movls	r8, r3
 800f208:	4680      	movhi	r8, r0
 800f20a:	2303      	movs	r3, #3
 800f20c:	6123      	str	r3, [r4, #16]
 800f20e:	9b05      	ldr	r3, [sp, #20]
 800f210:	f023 0204 	bic.w	r2, r3, #4
 800f214:	6022      	str	r2, [r4, #0]
 800f216:	f04f 0900 	mov.w	r9, #0
 800f21a:	9700      	str	r7, [sp, #0]
 800f21c:	4633      	mov	r3, r6
 800f21e:	aa0b      	add	r2, sp, #44	; 0x2c
 800f220:	4621      	mov	r1, r4
 800f222:	4628      	mov	r0, r5
 800f224:	f000 f9d8 	bl	800f5d8 <_printf_common>
 800f228:	3001      	adds	r0, #1
 800f22a:	f040 8090 	bne.w	800f34e <_printf_float+0x1e2>
 800f22e:	f04f 30ff 	mov.w	r0, #4294967295
 800f232:	b00d      	add	sp, #52	; 0x34
 800f234:	ecbd 8b02 	vpop	{d8}
 800f238:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f23c:	4642      	mov	r2, r8
 800f23e:	464b      	mov	r3, r9
 800f240:	4640      	mov	r0, r8
 800f242:	4649      	mov	r1, r9
 800f244:	f7f1 fc72 	bl	8000b2c <__aeabi_dcmpun>
 800f248:	b140      	cbz	r0, 800f25c <_printf_float+0xf0>
 800f24a:	464b      	mov	r3, r9
 800f24c:	2b00      	cmp	r3, #0
 800f24e:	bfbc      	itt	lt
 800f250:	232d      	movlt	r3, #45	; 0x2d
 800f252:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800f256:	487f      	ldr	r0, [pc, #508]	; (800f454 <_printf_float+0x2e8>)
 800f258:	4b7f      	ldr	r3, [pc, #508]	; (800f458 <_printf_float+0x2ec>)
 800f25a:	e7d1      	b.n	800f200 <_printf_float+0x94>
 800f25c:	6863      	ldr	r3, [r4, #4]
 800f25e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800f262:	9206      	str	r2, [sp, #24]
 800f264:	1c5a      	adds	r2, r3, #1
 800f266:	d13f      	bne.n	800f2e8 <_printf_float+0x17c>
 800f268:	2306      	movs	r3, #6
 800f26a:	6063      	str	r3, [r4, #4]
 800f26c:	9b05      	ldr	r3, [sp, #20]
 800f26e:	6861      	ldr	r1, [r4, #4]
 800f270:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800f274:	2300      	movs	r3, #0
 800f276:	9303      	str	r3, [sp, #12]
 800f278:	ab0a      	add	r3, sp, #40	; 0x28
 800f27a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800f27e:	ab09      	add	r3, sp, #36	; 0x24
 800f280:	ec49 8b10 	vmov	d0, r8, r9
 800f284:	9300      	str	r3, [sp, #0]
 800f286:	6022      	str	r2, [r4, #0]
 800f288:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800f28c:	4628      	mov	r0, r5
 800f28e:	f7ff fecd 	bl	800f02c <__cvt>
 800f292:	9b06      	ldr	r3, [sp, #24]
 800f294:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f296:	2b47      	cmp	r3, #71	; 0x47
 800f298:	4680      	mov	r8, r0
 800f29a:	d108      	bne.n	800f2ae <_printf_float+0x142>
 800f29c:	1cc8      	adds	r0, r1, #3
 800f29e:	db02      	blt.n	800f2a6 <_printf_float+0x13a>
 800f2a0:	6863      	ldr	r3, [r4, #4]
 800f2a2:	4299      	cmp	r1, r3
 800f2a4:	dd41      	ble.n	800f32a <_printf_float+0x1be>
 800f2a6:	f1ab 0b02 	sub.w	fp, fp, #2
 800f2aa:	fa5f fb8b 	uxtb.w	fp, fp
 800f2ae:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f2b2:	d820      	bhi.n	800f2f6 <_printf_float+0x18a>
 800f2b4:	3901      	subs	r1, #1
 800f2b6:	465a      	mov	r2, fp
 800f2b8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800f2bc:	9109      	str	r1, [sp, #36]	; 0x24
 800f2be:	f7ff ff17 	bl	800f0f0 <__exponent>
 800f2c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f2c4:	1813      	adds	r3, r2, r0
 800f2c6:	2a01      	cmp	r2, #1
 800f2c8:	4681      	mov	r9, r0
 800f2ca:	6123      	str	r3, [r4, #16]
 800f2cc:	dc02      	bgt.n	800f2d4 <_printf_float+0x168>
 800f2ce:	6822      	ldr	r2, [r4, #0]
 800f2d0:	07d2      	lsls	r2, r2, #31
 800f2d2:	d501      	bpl.n	800f2d8 <_printf_float+0x16c>
 800f2d4:	3301      	adds	r3, #1
 800f2d6:	6123      	str	r3, [r4, #16]
 800f2d8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800f2dc:	2b00      	cmp	r3, #0
 800f2de:	d09c      	beq.n	800f21a <_printf_float+0xae>
 800f2e0:	232d      	movs	r3, #45	; 0x2d
 800f2e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f2e6:	e798      	b.n	800f21a <_printf_float+0xae>
 800f2e8:	9a06      	ldr	r2, [sp, #24]
 800f2ea:	2a47      	cmp	r2, #71	; 0x47
 800f2ec:	d1be      	bne.n	800f26c <_printf_float+0x100>
 800f2ee:	2b00      	cmp	r3, #0
 800f2f0:	d1bc      	bne.n	800f26c <_printf_float+0x100>
 800f2f2:	2301      	movs	r3, #1
 800f2f4:	e7b9      	b.n	800f26a <_printf_float+0xfe>
 800f2f6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800f2fa:	d118      	bne.n	800f32e <_printf_float+0x1c2>
 800f2fc:	2900      	cmp	r1, #0
 800f2fe:	6863      	ldr	r3, [r4, #4]
 800f300:	dd0b      	ble.n	800f31a <_printf_float+0x1ae>
 800f302:	6121      	str	r1, [r4, #16]
 800f304:	b913      	cbnz	r3, 800f30c <_printf_float+0x1a0>
 800f306:	6822      	ldr	r2, [r4, #0]
 800f308:	07d0      	lsls	r0, r2, #31
 800f30a:	d502      	bpl.n	800f312 <_printf_float+0x1a6>
 800f30c:	3301      	adds	r3, #1
 800f30e:	440b      	add	r3, r1
 800f310:	6123      	str	r3, [r4, #16]
 800f312:	65a1      	str	r1, [r4, #88]	; 0x58
 800f314:	f04f 0900 	mov.w	r9, #0
 800f318:	e7de      	b.n	800f2d8 <_printf_float+0x16c>
 800f31a:	b913      	cbnz	r3, 800f322 <_printf_float+0x1b6>
 800f31c:	6822      	ldr	r2, [r4, #0]
 800f31e:	07d2      	lsls	r2, r2, #31
 800f320:	d501      	bpl.n	800f326 <_printf_float+0x1ba>
 800f322:	3302      	adds	r3, #2
 800f324:	e7f4      	b.n	800f310 <_printf_float+0x1a4>
 800f326:	2301      	movs	r3, #1
 800f328:	e7f2      	b.n	800f310 <_printf_float+0x1a4>
 800f32a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800f32e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f330:	4299      	cmp	r1, r3
 800f332:	db05      	blt.n	800f340 <_printf_float+0x1d4>
 800f334:	6823      	ldr	r3, [r4, #0]
 800f336:	6121      	str	r1, [r4, #16]
 800f338:	07d8      	lsls	r0, r3, #31
 800f33a:	d5ea      	bpl.n	800f312 <_printf_float+0x1a6>
 800f33c:	1c4b      	adds	r3, r1, #1
 800f33e:	e7e7      	b.n	800f310 <_printf_float+0x1a4>
 800f340:	2900      	cmp	r1, #0
 800f342:	bfd4      	ite	le
 800f344:	f1c1 0202 	rsble	r2, r1, #2
 800f348:	2201      	movgt	r2, #1
 800f34a:	4413      	add	r3, r2
 800f34c:	e7e0      	b.n	800f310 <_printf_float+0x1a4>
 800f34e:	6823      	ldr	r3, [r4, #0]
 800f350:	055a      	lsls	r2, r3, #21
 800f352:	d407      	bmi.n	800f364 <_printf_float+0x1f8>
 800f354:	6923      	ldr	r3, [r4, #16]
 800f356:	4642      	mov	r2, r8
 800f358:	4631      	mov	r1, r6
 800f35a:	4628      	mov	r0, r5
 800f35c:	47b8      	blx	r7
 800f35e:	3001      	adds	r0, #1
 800f360:	d12c      	bne.n	800f3bc <_printf_float+0x250>
 800f362:	e764      	b.n	800f22e <_printf_float+0xc2>
 800f364:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f368:	f240 80e0 	bls.w	800f52c <_printf_float+0x3c0>
 800f36c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f370:	2200      	movs	r2, #0
 800f372:	2300      	movs	r3, #0
 800f374:	f7f1 fba8 	bl	8000ac8 <__aeabi_dcmpeq>
 800f378:	2800      	cmp	r0, #0
 800f37a:	d034      	beq.n	800f3e6 <_printf_float+0x27a>
 800f37c:	4a37      	ldr	r2, [pc, #220]	; (800f45c <_printf_float+0x2f0>)
 800f37e:	2301      	movs	r3, #1
 800f380:	4631      	mov	r1, r6
 800f382:	4628      	mov	r0, r5
 800f384:	47b8      	blx	r7
 800f386:	3001      	adds	r0, #1
 800f388:	f43f af51 	beq.w	800f22e <_printf_float+0xc2>
 800f38c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f390:	429a      	cmp	r2, r3
 800f392:	db02      	blt.n	800f39a <_printf_float+0x22e>
 800f394:	6823      	ldr	r3, [r4, #0]
 800f396:	07d8      	lsls	r0, r3, #31
 800f398:	d510      	bpl.n	800f3bc <_printf_float+0x250>
 800f39a:	ee18 3a10 	vmov	r3, s16
 800f39e:	4652      	mov	r2, sl
 800f3a0:	4631      	mov	r1, r6
 800f3a2:	4628      	mov	r0, r5
 800f3a4:	47b8      	blx	r7
 800f3a6:	3001      	adds	r0, #1
 800f3a8:	f43f af41 	beq.w	800f22e <_printf_float+0xc2>
 800f3ac:	f04f 0800 	mov.w	r8, #0
 800f3b0:	f104 091a 	add.w	r9, r4, #26
 800f3b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f3b6:	3b01      	subs	r3, #1
 800f3b8:	4543      	cmp	r3, r8
 800f3ba:	dc09      	bgt.n	800f3d0 <_printf_float+0x264>
 800f3bc:	6823      	ldr	r3, [r4, #0]
 800f3be:	079b      	lsls	r3, r3, #30
 800f3c0:	f100 8105 	bmi.w	800f5ce <_printf_float+0x462>
 800f3c4:	68e0      	ldr	r0, [r4, #12]
 800f3c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f3c8:	4298      	cmp	r0, r3
 800f3ca:	bfb8      	it	lt
 800f3cc:	4618      	movlt	r0, r3
 800f3ce:	e730      	b.n	800f232 <_printf_float+0xc6>
 800f3d0:	2301      	movs	r3, #1
 800f3d2:	464a      	mov	r2, r9
 800f3d4:	4631      	mov	r1, r6
 800f3d6:	4628      	mov	r0, r5
 800f3d8:	47b8      	blx	r7
 800f3da:	3001      	adds	r0, #1
 800f3dc:	f43f af27 	beq.w	800f22e <_printf_float+0xc2>
 800f3e0:	f108 0801 	add.w	r8, r8, #1
 800f3e4:	e7e6      	b.n	800f3b4 <_printf_float+0x248>
 800f3e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f3e8:	2b00      	cmp	r3, #0
 800f3ea:	dc39      	bgt.n	800f460 <_printf_float+0x2f4>
 800f3ec:	4a1b      	ldr	r2, [pc, #108]	; (800f45c <_printf_float+0x2f0>)
 800f3ee:	2301      	movs	r3, #1
 800f3f0:	4631      	mov	r1, r6
 800f3f2:	4628      	mov	r0, r5
 800f3f4:	47b8      	blx	r7
 800f3f6:	3001      	adds	r0, #1
 800f3f8:	f43f af19 	beq.w	800f22e <_printf_float+0xc2>
 800f3fc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f400:	4313      	orrs	r3, r2
 800f402:	d102      	bne.n	800f40a <_printf_float+0x29e>
 800f404:	6823      	ldr	r3, [r4, #0]
 800f406:	07d9      	lsls	r1, r3, #31
 800f408:	d5d8      	bpl.n	800f3bc <_printf_float+0x250>
 800f40a:	ee18 3a10 	vmov	r3, s16
 800f40e:	4652      	mov	r2, sl
 800f410:	4631      	mov	r1, r6
 800f412:	4628      	mov	r0, r5
 800f414:	47b8      	blx	r7
 800f416:	3001      	adds	r0, #1
 800f418:	f43f af09 	beq.w	800f22e <_printf_float+0xc2>
 800f41c:	f04f 0900 	mov.w	r9, #0
 800f420:	f104 0a1a 	add.w	sl, r4, #26
 800f424:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f426:	425b      	negs	r3, r3
 800f428:	454b      	cmp	r3, r9
 800f42a:	dc01      	bgt.n	800f430 <_printf_float+0x2c4>
 800f42c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f42e:	e792      	b.n	800f356 <_printf_float+0x1ea>
 800f430:	2301      	movs	r3, #1
 800f432:	4652      	mov	r2, sl
 800f434:	4631      	mov	r1, r6
 800f436:	4628      	mov	r0, r5
 800f438:	47b8      	blx	r7
 800f43a:	3001      	adds	r0, #1
 800f43c:	f43f aef7 	beq.w	800f22e <_printf_float+0xc2>
 800f440:	f109 0901 	add.w	r9, r9, #1
 800f444:	e7ee      	b.n	800f424 <_printf_float+0x2b8>
 800f446:	bf00      	nop
 800f448:	7fefffff 	.word	0x7fefffff
 800f44c:	08014584 	.word	0x08014584
 800f450:	08014588 	.word	0x08014588
 800f454:	08014590 	.word	0x08014590
 800f458:	0801458c 	.word	0x0801458c
 800f45c:	08014594 	.word	0x08014594
 800f460:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f462:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f464:	429a      	cmp	r2, r3
 800f466:	bfa8      	it	ge
 800f468:	461a      	movge	r2, r3
 800f46a:	2a00      	cmp	r2, #0
 800f46c:	4691      	mov	r9, r2
 800f46e:	dc37      	bgt.n	800f4e0 <_printf_float+0x374>
 800f470:	f04f 0b00 	mov.w	fp, #0
 800f474:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f478:	f104 021a 	add.w	r2, r4, #26
 800f47c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f47e:	9305      	str	r3, [sp, #20]
 800f480:	eba3 0309 	sub.w	r3, r3, r9
 800f484:	455b      	cmp	r3, fp
 800f486:	dc33      	bgt.n	800f4f0 <_printf_float+0x384>
 800f488:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f48c:	429a      	cmp	r2, r3
 800f48e:	db3b      	blt.n	800f508 <_printf_float+0x39c>
 800f490:	6823      	ldr	r3, [r4, #0]
 800f492:	07da      	lsls	r2, r3, #31
 800f494:	d438      	bmi.n	800f508 <_printf_float+0x39c>
 800f496:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f498:	9a05      	ldr	r2, [sp, #20]
 800f49a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f49c:	1a9a      	subs	r2, r3, r2
 800f49e:	eba3 0901 	sub.w	r9, r3, r1
 800f4a2:	4591      	cmp	r9, r2
 800f4a4:	bfa8      	it	ge
 800f4a6:	4691      	movge	r9, r2
 800f4a8:	f1b9 0f00 	cmp.w	r9, #0
 800f4ac:	dc35      	bgt.n	800f51a <_printf_float+0x3ae>
 800f4ae:	f04f 0800 	mov.w	r8, #0
 800f4b2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f4b6:	f104 0a1a 	add.w	sl, r4, #26
 800f4ba:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f4be:	1a9b      	subs	r3, r3, r2
 800f4c0:	eba3 0309 	sub.w	r3, r3, r9
 800f4c4:	4543      	cmp	r3, r8
 800f4c6:	f77f af79 	ble.w	800f3bc <_printf_float+0x250>
 800f4ca:	2301      	movs	r3, #1
 800f4cc:	4652      	mov	r2, sl
 800f4ce:	4631      	mov	r1, r6
 800f4d0:	4628      	mov	r0, r5
 800f4d2:	47b8      	blx	r7
 800f4d4:	3001      	adds	r0, #1
 800f4d6:	f43f aeaa 	beq.w	800f22e <_printf_float+0xc2>
 800f4da:	f108 0801 	add.w	r8, r8, #1
 800f4de:	e7ec      	b.n	800f4ba <_printf_float+0x34e>
 800f4e0:	4613      	mov	r3, r2
 800f4e2:	4631      	mov	r1, r6
 800f4e4:	4642      	mov	r2, r8
 800f4e6:	4628      	mov	r0, r5
 800f4e8:	47b8      	blx	r7
 800f4ea:	3001      	adds	r0, #1
 800f4ec:	d1c0      	bne.n	800f470 <_printf_float+0x304>
 800f4ee:	e69e      	b.n	800f22e <_printf_float+0xc2>
 800f4f0:	2301      	movs	r3, #1
 800f4f2:	4631      	mov	r1, r6
 800f4f4:	4628      	mov	r0, r5
 800f4f6:	9205      	str	r2, [sp, #20]
 800f4f8:	47b8      	blx	r7
 800f4fa:	3001      	adds	r0, #1
 800f4fc:	f43f ae97 	beq.w	800f22e <_printf_float+0xc2>
 800f500:	9a05      	ldr	r2, [sp, #20]
 800f502:	f10b 0b01 	add.w	fp, fp, #1
 800f506:	e7b9      	b.n	800f47c <_printf_float+0x310>
 800f508:	ee18 3a10 	vmov	r3, s16
 800f50c:	4652      	mov	r2, sl
 800f50e:	4631      	mov	r1, r6
 800f510:	4628      	mov	r0, r5
 800f512:	47b8      	blx	r7
 800f514:	3001      	adds	r0, #1
 800f516:	d1be      	bne.n	800f496 <_printf_float+0x32a>
 800f518:	e689      	b.n	800f22e <_printf_float+0xc2>
 800f51a:	9a05      	ldr	r2, [sp, #20]
 800f51c:	464b      	mov	r3, r9
 800f51e:	4442      	add	r2, r8
 800f520:	4631      	mov	r1, r6
 800f522:	4628      	mov	r0, r5
 800f524:	47b8      	blx	r7
 800f526:	3001      	adds	r0, #1
 800f528:	d1c1      	bne.n	800f4ae <_printf_float+0x342>
 800f52a:	e680      	b.n	800f22e <_printf_float+0xc2>
 800f52c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f52e:	2a01      	cmp	r2, #1
 800f530:	dc01      	bgt.n	800f536 <_printf_float+0x3ca>
 800f532:	07db      	lsls	r3, r3, #31
 800f534:	d538      	bpl.n	800f5a8 <_printf_float+0x43c>
 800f536:	2301      	movs	r3, #1
 800f538:	4642      	mov	r2, r8
 800f53a:	4631      	mov	r1, r6
 800f53c:	4628      	mov	r0, r5
 800f53e:	47b8      	blx	r7
 800f540:	3001      	adds	r0, #1
 800f542:	f43f ae74 	beq.w	800f22e <_printf_float+0xc2>
 800f546:	ee18 3a10 	vmov	r3, s16
 800f54a:	4652      	mov	r2, sl
 800f54c:	4631      	mov	r1, r6
 800f54e:	4628      	mov	r0, r5
 800f550:	47b8      	blx	r7
 800f552:	3001      	adds	r0, #1
 800f554:	f43f ae6b 	beq.w	800f22e <_printf_float+0xc2>
 800f558:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f55c:	2200      	movs	r2, #0
 800f55e:	2300      	movs	r3, #0
 800f560:	f7f1 fab2 	bl	8000ac8 <__aeabi_dcmpeq>
 800f564:	b9d8      	cbnz	r0, 800f59e <_printf_float+0x432>
 800f566:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f568:	f108 0201 	add.w	r2, r8, #1
 800f56c:	3b01      	subs	r3, #1
 800f56e:	4631      	mov	r1, r6
 800f570:	4628      	mov	r0, r5
 800f572:	47b8      	blx	r7
 800f574:	3001      	adds	r0, #1
 800f576:	d10e      	bne.n	800f596 <_printf_float+0x42a>
 800f578:	e659      	b.n	800f22e <_printf_float+0xc2>
 800f57a:	2301      	movs	r3, #1
 800f57c:	4652      	mov	r2, sl
 800f57e:	4631      	mov	r1, r6
 800f580:	4628      	mov	r0, r5
 800f582:	47b8      	blx	r7
 800f584:	3001      	adds	r0, #1
 800f586:	f43f ae52 	beq.w	800f22e <_printf_float+0xc2>
 800f58a:	f108 0801 	add.w	r8, r8, #1
 800f58e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f590:	3b01      	subs	r3, #1
 800f592:	4543      	cmp	r3, r8
 800f594:	dcf1      	bgt.n	800f57a <_printf_float+0x40e>
 800f596:	464b      	mov	r3, r9
 800f598:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800f59c:	e6dc      	b.n	800f358 <_printf_float+0x1ec>
 800f59e:	f04f 0800 	mov.w	r8, #0
 800f5a2:	f104 0a1a 	add.w	sl, r4, #26
 800f5a6:	e7f2      	b.n	800f58e <_printf_float+0x422>
 800f5a8:	2301      	movs	r3, #1
 800f5aa:	4642      	mov	r2, r8
 800f5ac:	e7df      	b.n	800f56e <_printf_float+0x402>
 800f5ae:	2301      	movs	r3, #1
 800f5b0:	464a      	mov	r2, r9
 800f5b2:	4631      	mov	r1, r6
 800f5b4:	4628      	mov	r0, r5
 800f5b6:	47b8      	blx	r7
 800f5b8:	3001      	adds	r0, #1
 800f5ba:	f43f ae38 	beq.w	800f22e <_printf_float+0xc2>
 800f5be:	f108 0801 	add.w	r8, r8, #1
 800f5c2:	68e3      	ldr	r3, [r4, #12]
 800f5c4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f5c6:	1a5b      	subs	r3, r3, r1
 800f5c8:	4543      	cmp	r3, r8
 800f5ca:	dcf0      	bgt.n	800f5ae <_printf_float+0x442>
 800f5cc:	e6fa      	b.n	800f3c4 <_printf_float+0x258>
 800f5ce:	f04f 0800 	mov.w	r8, #0
 800f5d2:	f104 0919 	add.w	r9, r4, #25
 800f5d6:	e7f4      	b.n	800f5c2 <_printf_float+0x456>

0800f5d8 <_printf_common>:
 800f5d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f5dc:	4616      	mov	r6, r2
 800f5de:	4699      	mov	r9, r3
 800f5e0:	688a      	ldr	r2, [r1, #8]
 800f5e2:	690b      	ldr	r3, [r1, #16]
 800f5e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f5e8:	4293      	cmp	r3, r2
 800f5ea:	bfb8      	it	lt
 800f5ec:	4613      	movlt	r3, r2
 800f5ee:	6033      	str	r3, [r6, #0]
 800f5f0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f5f4:	4607      	mov	r7, r0
 800f5f6:	460c      	mov	r4, r1
 800f5f8:	b10a      	cbz	r2, 800f5fe <_printf_common+0x26>
 800f5fa:	3301      	adds	r3, #1
 800f5fc:	6033      	str	r3, [r6, #0]
 800f5fe:	6823      	ldr	r3, [r4, #0]
 800f600:	0699      	lsls	r1, r3, #26
 800f602:	bf42      	ittt	mi
 800f604:	6833      	ldrmi	r3, [r6, #0]
 800f606:	3302      	addmi	r3, #2
 800f608:	6033      	strmi	r3, [r6, #0]
 800f60a:	6825      	ldr	r5, [r4, #0]
 800f60c:	f015 0506 	ands.w	r5, r5, #6
 800f610:	d106      	bne.n	800f620 <_printf_common+0x48>
 800f612:	f104 0a19 	add.w	sl, r4, #25
 800f616:	68e3      	ldr	r3, [r4, #12]
 800f618:	6832      	ldr	r2, [r6, #0]
 800f61a:	1a9b      	subs	r3, r3, r2
 800f61c:	42ab      	cmp	r3, r5
 800f61e:	dc26      	bgt.n	800f66e <_printf_common+0x96>
 800f620:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f624:	1e13      	subs	r3, r2, #0
 800f626:	6822      	ldr	r2, [r4, #0]
 800f628:	bf18      	it	ne
 800f62a:	2301      	movne	r3, #1
 800f62c:	0692      	lsls	r2, r2, #26
 800f62e:	d42b      	bmi.n	800f688 <_printf_common+0xb0>
 800f630:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f634:	4649      	mov	r1, r9
 800f636:	4638      	mov	r0, r7
 800f638:	47c0      	blx	r8
 800f63a:	3001      	adds	r0, #1
 800f63c:	d01e      	beq.n	800f67c <_printf_common+0xa4>
 800f63e:	6823      	ldr	r3, [r4, #0]
 800f640:	68e5      	ldr	r5, [r4, #12]
 800f642:	6832      	ldr	r2, [r6, #0]
 800f644:	f003 0306 	and.w	r3, r3, #6
 800f648:	2b04      	cmp	r3, #4
 800f64a:	bf08      	it	eq
 800f64c:	1aad      	subeq	r5, r5, r2
 800f64e:	68a3      	ldr	r3, [r4, #8]
 800f650:	6922      	ldr	r2, [r4, #16]
 800f652:	bf0c      	ite	eq
 800f654:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f658:	2500      	movne	r5, #0
 800f65a:	4293      	cmp	r3, r2
 800f65c:	bfc4      	itt	gt
 800f65e:	1a9b      	subgt	r3, r3, r2
 800f660:	18ed      	addgt	r5, r5, r3
 800f662:	2600      	movs	r6, #0
 800f664:	341a      	adds	r4, #26
 800f666:	42b5      	cmp	r5, r6
 800f668:	d11a      	bne.n	800f6a0 <_printf_common+0xc8>
 800f66a:	2000      	movs	r0, #0
 800f66c:	e008      	b.n	800f680 <_printf_common+0xa8>
 800f66e:	2301      	movs	r3, #1
 800f670:	4652      	mov	r2, sl
 800f672:	4649      	mov	r1, r9
 800f674:	4638      	mov	r0, r7
 800f676:	47c0      	blx	r8
 800f678:	3001      	adds	r0, #1
 800f67a:	d103      	bne.n	800f684 <_printf_common+0xac>
 800f67c:	f04f 30ff 	mov.w	r0, #4294967295
 800f680:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f684:	3501      	adds	r5, #1
 800f686:	e7c6      	b.n	800f616 <_printf_common+0x3e>
 800f688:	18e1      	adds	r1, r4, r3
 800f68a:	1c5a      	adds	r2, r3, #1
 800f68c:	2030      	movs	r0, #48	; 0x30
 800f68e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f692:	4422      	add	r2, r4
 800f694:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f698:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f69c:	3302      	adds	r3, #2
 800f69e:	e7c7      	b.n	800f630 <_printf_common+0x58>
 800f6a0:	2301      	movs	r3, #1
 800f6a2:	4622      	mov	r2, r4
 800f6a4:	4649      	mov	r1, r9
 800f6a6:	4638      	mov	r0, r7
 800f6a8:	47c0      	blx	r8
 800f6aa:	3001      	adds	r0, #1
 800f6ac:	d0e6      	beq.n	800f67c <_printf_common+0xa4>
 800f6ae:	3601      	adds	r6, #1
 800f6b0:	e7d9      	b.n	800f666 <_printf_common+0x8e>
	...

0800f6b4 <_printf_i>:
 800f6b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f6b8:	7e0f      	ldrb	r7, [r1, #24]
 800f6ba:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f6bc:	2f78      	cmp	r7, #120	; 0x78
 800f6be:	4691      	mov	r9, r2
 800f6c0:	4680      	mov	r8, r0
 800f6c2:	460c      	mov	r4, r1
 800f6c4:	469a      	mov	sl, r3
 800f6c6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f6ca:	d807      	bhi.n	800f6dc <_printf_i+0x28>
 800f6cc:	2f62      	cmp	r7, #98	; 0x62
 800f6ce:	d80a      	bhi.n	800f6e6 <_printf_i+0x32>
 800f6d0:	2f00      	cmp	r7, #0
 800f6d2:	f000 80d8 	beq.w	800f886 <_printf_i+0x1d2>
 800f6d6:	2f58      	cmp	r7, #88	; 0x58
 800f6d8:	f000 80a3 	beq.w	800f822 <_printf_i+0x16e>
 800f6dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f6e0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f6e4:	e03a      	b.n	800f75c <_printf_i+0xa8>
 800f6e6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f6ea:	2b15      	cmp	r3, #21
 800f6ec:	d8f6      	bhi.n	800f6dc <_printf_i+0x28>
 800f6ee:	a101      	add	r1, pc, #4	; (adr r1, 800f6f4 <_printf_i+0x40>)
 800f6f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f6f4:	0800f74d 	.word	0x0800f74d
 800f6f8:	0800f761 	.word	0x0800f761
 800f6fc:	0800f6dd 	.word	0x0800f6dd
 800f700:	0800f6dd 	.word	0x0800f6dd
 800f704:	0800f6dd 	.word	0x0800f6dd
 800f708:	0800f6dd 	.word	0x0800f6dd
 800f70c:	0800f761 	.word	0x0800f761
 800f710:	0800f6dd 	.word	0x0800f6dd
 800f714:	0800f6dd 	.word	0x0800f6dd
 800f718:	0800f6dd 	.word	0x0800f6dd
 800f71c:	0800f6dd 	.word	0x0800f6dd
 800f720:	0800f86d 	.word	0x0800f86d
 800f724:	0800f791 	.word	0x0800f791
 800f728:	0800f84f 	.word	0x0800f84f
 800f72c:	0800f6dd 	.word	0x0800f6dd
 800f730:	0800f6dd 	.word	0x0800f6dd
 800f734:	0800f88f 	.word	0x0800f88f
 800f738:	0800f6dd 	.word	0x0800f6dd
 800f73c:	0800f791 	.word	0x0800f791
 800f740:	0800f6dd 	.word	0x0800f6dd
 800f744:	0800f6dd 	.word	0x0800f6dd
 800f748:	0800f857 	.word	0x0800f857
 800f74c:	682b      	ldr	r3, [r5, #0]
 800f74e:	1d1a      	adds	r2, r3, #4
 800f750:	681b      	ldr	r3, [r3, #0]
 800f752:	602a      	str	r2, [r5, #0]
 800f754:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f758:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f75c:	2301      	movs	r3, #1
 800f75e:	e0a3      	b.n	800f8a8 <_printf_i+0x1f4>
 800f760:	6820      	ldr	r0, [r4, #0]
 800f762:	6829      	ldr	r1, [r5, #0]
 800f764:	0606      	lsls	r6, r0, #24
 800f766:	f101 0304 	add.w	r3, r1, #4
 800f76a:	d50a      	bpl.n	800f782 <_printf_i+0xce>
 800f76c:	680e      	ldr	r6, [r1, #0]
 800f76e:	602b      	str	r3, [r5, #0]
 800f770:	2e00      	cmp	r6, #0
 800f772:	da03      	bge.n	800f77c <_printf_i+0xc8>
 800f774:	232d      	movs	r3, #45	; 0x2d
 800f776:	4276      	negs	r6, r6
 800f778:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f77c:	485e      	ldr	r0, [pc, #376]	; (800f8f8 <_printf_i+0x244>)
 800f77e:	230a      	movs	r3, #10
 800f780:	e019      	b.n	800f7b6 <_printf_i+0x102>
 800f782:	680e      	ldr	r6, [r1, #0]
 800f784:	602b      	str	r3, [r5, #0]
 800f786:	f010 0f40 	tst.w	r0, #64	; 0x40
 800f78a:	bf18      	it	ne
 800f78c:	b236      	sxthne	r6, r6
 800f78e:	e7ef      	b.n	800f770 <_printf_i+0xbc>
 800f790:	682b      	ldr	r3, [r5, #0]
 800f792:	6820      	ldr	r0, [r4, #0]
 800f794:	1d19      	adds	r1, r3, #4
 800f796:	6029      	str	r1, [r5, #0]
 800f798:	0601      	lsls	r1, r0, #24
 800f79a:	d501      	bpl.n	800f7a0 <_printf_i+0xec>
 800f79c:	681e      	ldr	r6, [r3, #0]
 800f79e:	e002      	b.n	800f7a6 <_printf_i+0xf2>
 800f7a0:	0646      	lsls	r6, r0, #25
 800f7a2:	d5fb      	bpl.n	800f79c <_printf_i+0xe8>
 800f7a4:	881e      	ldrh	r6, [r3, #0]
 800f7a6:	4854      	ldr	r0, [pc, #336]	; (800f8f8 <_printf_i+0x244>)
 800f7a8:	2f6f      	cmp	r7, #111	; 0x6f
 800f7aa:	bf0c      	ite	eq
 800f7ac:	2308      	moveq	r3, #8
 800f7ae:	230a      	movne	r3, #10
 800f7b0:	2100      	movs	r1, #0
 800f7b2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f7b6:	6865      	ldr	r5, [r4, #4]
 800f7b8:	60a5      	str	r5, [r4, #8]
 800f7ba:	2d00      	cmp	r5, #0
 800f7bc:	bfa2      	ittt	ge
 800f7be:	6821      	ldrge	r1, [r4, #0]
 800f7c0:	f021 0104 	bicge.w	r1, r1, #4
 800f7c4:	6021      	strge	r1, [r4, #0]
 800f7c6:	b90e      	cbnz	r6, 800f7cc <_printf_i+0x118>
 800f7c8:	2d00      	cmp	r5, #0
 800f7ca:	d04d      	beq.n	800f868 <_printf_i+0x1b4>
 800f7cc:	4615      	mov	r5, r2
 800f7ce:	fbb6 f1f3 	udiv	r1, r6, r3
 800f7d2:	fb03 6711 	mls	r7, r3, r1, r6
 800f7d6:	5dc7      	ldrb	r7, [r0, r7]
 800f7d8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f7dc:	4637      	mov	r7, r6
 800f7de:	42bb      	cmp	r3, r7
 800f7e0:	460e      	mov	r6, r1
 800f7e2:	d9f4      	bls.n	800f7ce <_printf_i+0x11a>
 800f7e4:	2b08      	cmp	r3, #8
 800f7e6:	d10b      	bne.n	800f800 <_printf_i+0x14c>
 800f7e8:	6823      	ldr	r3, [r4, #0]
 800f7ea:	07de      	lsls	r6, r3, #31
 800f7ec:	d508      	bpl.n	800f800 <_printf_i+0x14c>
 800f7ee:	6923      	ldr	r3, [r4, #16]
 800f7f0:	6861      	ldr	r1, [r4, #4]
 800f7f2:	4299      	cmp	r1, r3
 800f7f4:	bfde      	ittt	le
 800f7f6:	2330      	movle	r3, #48	; 0x30
 800f7f8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f7fc:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f800:	1b52      	subs	r2, r2, r5
 800f802:	6122      	str	r2, [r4, #16]
 800f804:	f8cd a000 	str.w	sl, [sp]
 800f808:	464b      	mov	r3, r9
 800f80a:	aa03      	add	r2, sp, #12
 800f80c:	4621      	mov	r1, r4
 800f80e:	4640      	mov	r0, r8
 800f810:	f7ff fee2 	bl	800f5d8 <_printf_common>
 800f814:	3001      	adds	r0, #1
 800f816:	d14c      	bne.n	800f8b2 <_printf_i+0x1fe>
 800f818:	f04f 30ff 	mov.w	r0, #4294967295
 800f81c:	b004      	add	sp, #16
 800f81e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f822:	4835      	ldr	r0, [pc, #212]	; (800f8f8 <_printf_i+0x244>)
 800f824:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800f828:	6829      	ldr	r1, [r5, #0]
 800f82a:	6823      	ldr	r3, [r4, #0]
 800f82c:	f851 6b04 	ldr.w	r6, [r1], #4
 800f830:	6029      	str	r1, [r5, #0]
 800f832:	061d      	lsls	r5, r3, #24
 800f834:	d514      	bpl.n	800f860 <_printf_i+0x1ac>
 800f836:	07df      	lsls	r7, r3, #31
 800f838:	bf44      	itt	mi
 800f83a:	f043 0320 	orrmi.w	r3, r3, #32
 800f83e:	6023      	strmi	r3, [r4, #0]
 800f840:	b91e      	cbnz	r6, 800f84a <_printf_i+0x196>
 800f842:	6823      	ldr	r3, [r4, #0]
 800f844:	f023 0320 	bic.w	r3, r3, #32
 800f848:	6023      	str	r3, [r4, #0]
 800f84a:	2310      	movs	r3, #16
 800f84c:	e7b0      	b.n	800f7b0 <_printf_i+0xfc>
 800f84e:	6823      	ldr	r3, [r4, #0]
 800f850:	f043 0320 	orr.w	r3, r3, #32
 800f854:	6023      	str	r3, [r4, #0]
 800f856:	2378      	movs	r3, #120	; 0x78
 800f858:	4828      	ldr	r0, [pc, #160]	; (800f8fc <_printf_i+0x248>)
 800f85a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f85e:	e7e3      	b.n	800f828 <_printf_i+0x174>
 800f860:	0659      	lsls	r1, r3, #25
 800f862:	bf48      	it	mi
 800f864:	b2b6      	uxthmi	r6, r6
 800f866:	e7e6      	b.n	800f836 <_printf_i+0x182>
 800f868:	4615      	mov	r5, r2
 800f86a:	e7bb      	b.n	800f7e4 <_printf_i+0x130>
 800f86c:	682b      	ldr	r3, [r5, #0]
 800f86e:	6826      	ldr	r6, [r4, #0]
 800f870:	6961      	ldr	r1, [r4, #20]
 800f872:	1d18      	adds	r0, r3, #4
 800f874:	6028      	str	r0, [r5, #0]
 800f876:	0635      	lsls	r5, r6, #24
 800f878:	681b      	ldr	r3, [r3, #0]
 800f87a:	d501      	bpl.n	800f880 <_printf_i+0x1cc>
 800f87c:	6019      	str	r1, [r3, #0]
 800f87e:	e002      	b.n	800f886 <_printf_i+0x1d2>
 800f880:	0670      	lsls	r0, r6, #25
 800f882:	d5fb      	bpl.n	800f87c <_printf_i+0x1c8>
 800f884:	8019      	strh	r1, [r3, #0]
 800f886:	2300      	movs	r3, #0
 800f888:	6123      	str	r3, [r4, #16]
 800f88a:	4615      	mov	r5, r2
 800f88c:	e7ba      	b.n	800f804 <_printf_i+0x150>
 800f88e:	682b      	ldr	r3, [r5, #0]
 800f890:	1d1a      	adds	r2, r3, #4
 800f892:	602a      	str	r2, [r5, #0]
 800f894:	681d      	ldr	r5, [r3, #0]
 800f896:	6862      	ldr	r2, [r4, #4]
 800f898:	2100      	movs	r1, #0
 800f89a:	4628      	mov	r0, r5
 800f89c:	f7f0 fca0 	bl	80001e0 <memchr>
 800f8a0:	b108      	cbz	r0, 800f8a6 <_printf_i+0x1f2>
 800f8a2:	1b40      	subs	r0, r0, r5
 800f8a4:	6060      	str	r0, [r4, #4]
 800f8a6:	6863      	ldr	r3, [r4, #4]
 800f8a8:	6123      	str	r3, [r4, #16]
 800f8aa:	2300      	movs	r3, #0
 800f8ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f8b0:	e7a8      	b.n	800f804 <_printf_i+0x150>
 800f8b2:	6923      	ldr	r3, [r4, #16]
 800f8b4:	462a      	mov	r2, r5
 800f8b6:	4649      	mov	r1, r9
 800f8b8:	4640      	mov	r0, r8
 800f8ba:	47d0      	blx	sl
 800f8bc:	3001      	adds	r0, #1
 800f8be:	d0ab      	beq.n	800f818 <_printf_i+0x164>
 800f8c0:	6823      	ldr	r3, [r4, #0]
 800f8c2:	079b      	lsls	r3, r3, #30
 800f8c4:	d413      	bmi.n	800f8ee <_printf_i+0x23a>
 800f8c6:	68e0      	ldr	r0, [r4, #12]
 800f8c8:	9b03      	ldr	r3, [sp, #12]
 800f8ca:	4298      	cmp	r0, r3
 800f8cc:	bfb8      	it	lt
 800f8ce:	4618      	movlt	r0, r3
 800f8d0:	e7a4      	b.n	800f81c <_printf_i+0x168>
 800f8d2:	2301      	movs	r3, #1
 800f8d4:	4632      	mov	r2, r6
 800f8d6:	4649      	mov	r1, r9
 800f8d8:	4640      	mov	r0, r8
 800f8da:	47d0      	blx	sl
 800f8dc:	3001      	adds	r0, #1
 800f8de:	d09b      	beq.n	800f818 <_printf_i+0x164>
 800f8e0:	3501      	adds	r5, #1
 800f8e2:	68e3      	ldr	r3, [r4, #12]
 800f8e4:	9903      	ldr	r1, [sp, #12]
 800f8e6:	1a5b      	subs	r3, r3, r1
 800f8e8:	42ab      	cmp	r3, r5
 800f8ea:	dcf2      	bgt.n	800f8d2 <_printf_i+0x21e>
 800f8ec:	e7eb      	b.n	800f8c6 <_printf_i+0x212>
 800f8ee:	2500      	movs	r5, #0
 800f8f0:	f104 0619 	add.w	r6, r4, #25
 800f8f4:	e7f5      	b.n	800f8e2 <_printf_i+0x22e>
 800f8f6:	bf00      	nop
 800f8f8:	08014596 	.word	0x08014596
 800f8fc:	080145a7 	.word	0x080145a7

0800f900 <siprintf>:
 800f900:	b40e      	push	{r1, r2, r3}
 800f902:	b500      	push	{lr}
 800f904:	b09c      	sub	sp, #112	; 0x70
 800f906:	ab1d      	add	r3, sp, #116	; 0x74
 800f908:	9002      	str	r0, [sp, #8]
 800f90a:	9006      	str	r0, [sp, #24]
 800f90c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f910:	4809      	ldr	r0, [pc, #36]	; (800f938 <siprintf+0x38>)
 800f912:	9107      	str	r1, [sp, #28]
 800f914:	9104      	str	r1, [sp, #16]
 800f916:	4909      	ldr	r1, [pc, #36]	; (800f93c <siprintf+0x3c>)
 800f918:	f853 2b04 	ldr.w	r2, [r3], #4
 800f91c:	9105      	str	r1, [sp, #20]
 800f91e:	6800      	ldr	r0, [r0, #0]
 800f920:	9301      	str	r3, [sp, #4]
 800f922:	a902      	add	r1, sp, #8
 800f924:	f001 fb68 	bl	8010ff8 <_svfiprintf_r>
 800f928:	9b02      	ldr	r3, [sp, #8]
 800f92a:	2200      	movs	r2, #0
 800f92c:	701a      	strb	r2, [r3, #0]
 800f92e:	b01c      	add	sp, #112	; 0x70
 800f930:	f85d eb04 	ldr.w	lr, [sp], #4
 800f934:	b003      	add	sp, #12
 800f936:	4770      	bx	lr
 800f938:	2000001c 	.word	0x2000001c
 800f93c:	ffff0208 	.word	0xffff0208

0800f940 <quorem>:
 800f940:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f944:	6903      	ldr	r3, [r0, #16]
 800f946:	690c      	ldr	r4, [r1, #16]
 800f948:	42a3      	cmp	r3, r4
 800f94a:	4607      	mov	r7, r0
 800f94c:	f2c0 8081 	blt.w	800fa52 <quorem+0x112>
 800f950:	3c01      	subs	r4, #1
 800f952:	f101 0814 	add.w	r8, r1, #20
 800f956:	f100 0514 	add.w	r5, r0, #20
 800f95a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f95e:	9301      	str	r3, [sp, #4]
 800f960:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800f964:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f968:	3301      	adds	r3, #1
 800f96a:	429a      	cmp	r2, r3
 800f96c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800f970:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800f974:	fbb2 f6f3 	udiv	r6, r2, r3
 800f978:	d331      	bcc.n	800f9de <quorem+0x9e>
 800f97a:	f04f 0e00 	mov.w	lr, #0
 800f97e:	4640      	mov	r0, r8
 800f980:	46ac      	mov	ip, r5
 800f982:	46f2      	mov	sl, lr
 800f984:	f850 2b04 	ldr.w	r2, [r0], #4
 800f988:	b293      	uxth	r3, r2
 800f98a:	fb06 e303 	mla	r3, r6, r3, lr
 800f98e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800f992:	b29b      	uxth	r3, r3
 800f994:	ebaa 0303 	sub.w	r3, sl, r3
 800f998:	f8dc a000 	ldr.w	sl, [ip]
 800f99c:	0c12      	lsrs	r2, r2, #16
 800f99e:	fa13 f38a 	uxtah	r3, r3, sl
 800f9a2:	fb06 e202 	mla	r2, r6, r2, lr
 800f9a6:	9300      	str	r3, [sp, #0]
 800f9a8:	9b00      	ldr	r3, [sp, #0]
 800f9aa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800f9ae:	b292      	uxth	r2, r2
 800f9b0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800f9b4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f9b8:	f8bd 3000 	ldrh.w	r3, [sp]
 800f9bc:	4581      	cmp	r9, r0
 800f9be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f9c2:	f84c 3b04 	str.w	r3, [ip], #4
 800f9c6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800f9ca:	d2db      	bcs.n	800f984 <quorem+0x44>
 800f9cc:	f855 300b 	ldr.w	r3, [r5, fp]
 800f9d0:	b92b      	cbnz	r3, 800f9de <quorem+0x9e>
 800f9d2:	9b01      	ldr	r3, [sp, #4]
 800f9d4:	3b04      	subs	r3, #4
 800f9d6:	429d      	cmp	r5, r3
 800f9d8:	461a      	mov	r2, r3
 800f9da:	d32e      	bcc.n	800fa3a <quorem+0xfa>
 800f9dc:	613c      	str	r4, [r7, #16]
 800f9de:	4638      	mov	r0, r7
 800f9e0:	f001 f8b6 	bl	8010b50 <__mcmp>
 800f9e4:	2800      	cmp	r0, #0
 800f9e6:	db24      	blt.n	800fa32 <quorem+0xf2>
 800f9e8:	3601      	adds	r6, #1
 800f9ea:	4628      	mov	r0, r5
 800f9ec:	f04f 0c00 	mov.w	ip, #0
 800f9f0:	f858 2b04 	ldr.w	r2, [r8], #4
 800f9f4:	f8d0 e000 	ldr.w	lr, [r0]
 800f9f8:	b293      	uxth	r3, r2
 800f9fa:	ebac 0303 	sub.w	r3, ip, r3
 800f9fe:	0c12      	lsrs	r2, r2, #16
 800fa00:	fa13 f38e 	uxtah	r3, r3, lr
 800fa04:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800fa08:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800fa0c:	b29b      	uxth	r3, r3
 800fa0e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fa12:	45c1      	cmp	r9, r8
 800fa14:	f840 3b04 	str.w	r3, [r0], #4
 800fa18:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800fa1c:	d2e8      	bcs.n	800f9f0 <quorem+0xb0>
 800fa1e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fa22:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fa26:	b922      	cbnz	r2, 800fa32 <quorem+0xf2>
 800fa28:	3b04      	subs	r3, #4
 800fa2a:	429d      	cmp	r5, r3
 800fa2c:	461a      	mov	r2, r3
 800fa2e:	d30a      	bcc.n	800fa46 <quorem+0x106>
 800fa30:	613c      	str	r4, [r7, #16]
 800fa32:	4630      	mov	r0, r6
 800fa34:	b003      	add	sp, #12
 800fa36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa3a:	6812      	ldr	r2, [r2, #0]
 800fa3c:	3b04      	subs	r3, #4
 800fa3e:	2a00      	cmp	r2, #0
 800fa40:	d1cc      	bne.n	800f9dc <quorem+0x9c>
 800fa42:	3c01      	subs	r4, #1
 800fa44:	e7c7      	b.n	800f9d6 <quorem+0x96>
 800fa46:	6812      	ldr	r2, [r2, #0]
 800fa48:	3b04      	subs	r3, #4
 800fa4a:	2a00      	cmp	r2, #0
 800fa4c:	d1f0      	bne.n	800fa30 <quorem+0xf0>
 800fa4e:	3c01      	subs	r4, #1
 800fa50:	e7eb      	b.n	800fa2a <quorem+0xea>
 800fa52:	2000      	movs	r0, #0
 800fa54:	e7ee      	b.n	800fa34 <quorem+0xf4>
	...

0800fa58 <_dtoa_r>:
 800fa58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa5c:	ed2d 8b04 	vpush	{d8-d9}
 800fa60:	ec57 6b10 	vmov	r6, r7, d0
 800fa64:	b093      	sub	sp, #76	; 0x4c
 800fa66:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800fa68:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800fa6c:	9106      	str	r1, [sp, #24]
 800fa6e:	ee10 aa10 	vmov	sl, s0
 800fa72:	4604      	mov	r4, r0
 800fa74:	9209      	str	r2, [sp, #36]	; 0x24
 800fa76:	930c      	str	r3, [sp, #48]	; 0x30
 800fa78:	46bb      	mov	fp, r7
 800fa7a:	b975      	cbnz	r5, 800fa9a <_dtoa_r+0x42>
 800fa7c:	2010      	movs	r0, #16
 800fa7e:	f000 fddd 	bl	801063c <malloc>
 800fa82:	4602      	mov	r2, r0
 800fa84:	6260      	str	r0, [r4, #36]	; 0x24
 800fa86:	b920      	cbnz	r0, 800fa92 <_dtoa_r+0x3a>
 800fa88:	4ba7      	ldr	r3, [pc, #668]	; (800fd28 <_dtoa_r+0x2d0>)
 800fa8a:	21ea      	movs	r1, #234	; 0xea
 800fa8c:	48a7      	ldr	r0, [pc, #668]	; (800fd2c <_dtoa_r+0x2d4>)
 800fa8e:	f001 fbc3 	bl	8011218 <__assert_func>
 800fa92:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800fa96:	6005      	str	r5, [r0, #0]
 800fa98:	60c5      	str	r5, [r0, #12]
 800fa9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fa9c:	6819      	ldr	r1, [r3, #0]
 800fa9e:	b151      	cbz	r1, 800fab6 <_dtoa_r+0x5e>
 800faa0:	685a      	ldr	r2, [r3, #4]
 800faa2:	604a      	str	r2, [r1, #4]
 800faa4:	2301      	movs	r3, #1
 800faa6:	4093      	lsls	r3, r2
 800faa8:	608b      	str	r3, [r1, #8]
 800faaa:	4620      	mov	r0, r4
 800faac:	f000 fe0e 	bl	80106cc <_Bfree>
 800fab0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fab2:	2200      	movs	r2, #0
 800fab4:	601a      	str	r2, [r3, #0]
 800fab6:	1e3b      	subs	r3, r7, #0
 800fab8:	bfaa      	itet	ge
 800faba:	2300      	movge	r3, #0
 800fabc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800fac0:	f8c8 3000 	strge.w	r3, [r8]
 800fac4:	4b9a      	ldr	r3, [pc, #616]	; (800fd30 <_dtoa_r+0x2d8>)
 800fac6:	bfbc      	itt	lt
 800fac8:	2201      	movlt	r2, #1
 800faca:	f8c8 2000 	strlt.w	r2, [r8]
 800face:	ea33 030b 	bics.w	r3, r3, fp
 800fad2:	d11b      	bne.n	800fb0c <_dtoa_r+0xb4>
 800fad4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800fad6:	f242 730f 	movw	r3, #9999	; 0x270f
 800fada:	6013      	str	r3, [r2, #0]
 800fadc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800fae0:	4333      	orrs	r3, r6
 800fae2:	f000 8592 	beq.w	801060a <_dtoa_r+0xbb2>
 800fae6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fae8:	b963      	cbnz	r3, 800fb04 <_dtoa_r+0xac>
 800faea:	4b92      	ldr	r3, [pc, #584]	; (800fd34 <_dtoa_r+0x2dc>)
 800faec:	e022      	b.n	800fb34 <_dtoa_r+0xdc>
 800faee:	4b92      	ldr	r3, [pc, #584]	; (800fd38 <_dtoa_r+0x2e0>)
 800faf0:	9301      	str	r3, [sp, #4]
 800faf2:	3308      	adds	r3, #8
 800faf4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800faf6:	6013      	str	r3, [r2, #0]
 800faf8:	9801      	ldr	r0, [sp, #4]
 800fafa:	b013      	add	sp, #76	; 0x4c
 800fafc:	ecbd 8b04 	vpop	{d8-d9}
 800fb00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb04:	4b8b      	ldr	r3, [pc, #556]	; (800fd34 <_dtoa_r+0x2dc>)
 800fb06:	9301      	str	r3, [sp, #4]
 800fb08:	3303      	adds	r3, #3
 800fb0a:	e7f3      	b.n	800faf4 <_dtoa_r+0x9c>
 800fb0c:	2200      	movs	r2, #0
 800fb0e:	2300      	movs	r3, #0
 800fb10:	4650      	mov	r0, sl
 800fb12:	4659      	mov	r1, fp
 800fb14:	f7f0 ffd8 	bl	8000ac8 <__aeabi_dcmpeq>
 800fb18:	ec4b ab19 	vmov	d9, sl, fp
 800fb1c:	4680      	mov	r8, r0
 800fb1e:	b158      	cbz	r0, 800fb38 <_dtoa_r+0xe0>
 800fb20:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800fb22:	2301      	movs	r3, #1
 800fb24:	6013      	str	r3, [r2, #0]
 800fb26:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fb28:	2b00      	cmp	r3, #0
 800fb2a:	f000 856b 	beq.w	8010604 <_dtoa_r+0xbac>
 800fb2e:	4883      	ldr	r0, [pc, #524]	; (800fd3c <_dtoa_r+0x2e4>)
 800fb30:	6018      	str	r0, [r3, #0]
 800fb32:	1e43      	subs	r3, r0, #1
 800fb34:	9301      	str	r3, [sp, #4]
 800fb36:	e7df      	b.n	800faf8 <_dtoa_r+0xa0>
 800fb38:	ec4b ab10 	vmov	d0, sl, fp
 800fb3c:	aa10      	add	r2, sp, #64	; 0x40
 800fb3e:	a911      	add	r1, sp, #68	; 0x44
 800fb40:	4620      	mov	r0, r4
 800fb42:	f001 f8ab 	bl	8010c9c <__d2b>
 800fb46:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800fb4a:	ee08 0a10 	vmov	s16, r0
 800fb4e:	2d00      	cmp	r5, #0
 800fb50:	f000 8084 	beq.w	800fc5c <_dtoa_r+0x204>
 800fb54:	ee19 3a90 	vmov	r3, s19
 800fb58:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fb5c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800fb60:	4656      	mov	r6, sl
 800fb62:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800fb66:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800fb6a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800fb6e:	4b74      	ldr	r3, [pc, #464]	; (800fd40 <_dtoa_r+0x2e8>)
 800fb70:	2200      	movs	r2, #0
 800fb72:	4630      	mov	r0, r6
 800fb74:	4639      	mov	r1, r7
 800fb76:	f7f0 fb87 	bl	8000288 <__aeabi_dsub>
 800fb7a:	a365      	add	r3, pc, #404	; (adr r3, 800fd10 <_dtoa_r+0x2b8>)
 800fb7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb80:	f7f0 fd3a 	bl	80005f8 <__aeabi_dmul>
 800fb84:	a364      	add	r3, pc, #400	; (adr r3, 800fd18 <_dtoa_r+0x2c0>)
 800fb86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb8a:	f7f0 fb7f 	bl	800028c <__adddf3>
 800fb8e:	4606      	mov	r6, r0
 800fb90:	4628      	mov	r0, r5
 800fb92:	460f      	mov	r7, r1
 800fb94:	f7f0 fcc6 	bl	8000524 <__aeabi_i2d>
 800fb98:	a361      	add	r3, pc, #388	; (adr r3, 800fd20 <_dtoa_r+0x2c8>)
 800fb9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb9e:	f7f0 fd2b 	bl	80005f8 <__aeabi_dmul>
 800fba2:	4602      	mov	r2, r0
 800fba4:	460b      	mov	r3, r1
 800fba6:	4630      	mov	r0, r6
 800fba8:	4639      	mov	r1, r7
 800fbaa:	f7f0 fb6f 	bl	800028c <__adddf3>
 800fbae:	4606      	mov	r6, r0
 800fbb0:	460f      	mov	r7, r1
 800fbb2:	f7f0 ffd1 	bl	8000b58 <__aeabi_d2iz>
 800fbb6:	2200      	movs	r2, #0
 800fbb8:	9000      	str	r0, [sp, #0]
 800fbba:	2300      	movs	r3, #0
 800fbbc:	4630      	mov	r0, r6
 800fbbe:	4639      	mov	r1, r7
 800fbc0:	f7f0 ff8c 	bl	8000adc <__aeabi_dcmplt>
 800fbc4:	b150      	cbz	r0, 800fbdc <_dtoa_r+0x184>
 800fbc6:	9800      	ldr	r0, [sp, #0]
 800fbc8:	f7f0 fcac 	bl	8000524 <__aeabi_i2d>
 800fbcc:	4632      	mov	r2, r6
 800fbce:	463b      	mov	r3, r7
 800fbd0:	f7f0 ff7a 	bl	8000ac8 <__aeabi_dcmpeq>
 800fbd4:	b910      	cbnz	r0, 800fbdc <_dtoa_r+0x184>
 800fbd6:	9b00      	ldr	r3, [sp, #0]
 800fbd8:	3b01      	subs	r3, #1
 800fbda:	9300      	str	r3, [sp, #0]
 800fbdc:	9b00      	ldr	r3, [sp, #0]
 800fbde:	2b16      	cmp	r3, #22
 800fbe0:	d85a      	bhi.n	800fc98 <_dtoa_r+0x240>
 800fbe2:	9a00      	ldr	r2, [sp, #0]
 800fbe4:	4b57      	ldr	r3, [pc, #348]	; (800fd44 <_dtoa_r+0x2ec>)
 800fbe6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fbea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbee:	ec51 0b19 	vmov	r0, r1, d9
 800fbf2:	f7f0 ff73 	bl	8000adc <__aeabi_dcmplt>
 800fbf6:	2800      	cmp	r0, #0
 800fbf8:	d050      	beq.n	800fc9c <_dtoa_r+0x244>
 800fbfa:	9b00      	ldr	r3, [sp, #0]
 800fbfc:	3b01      	subs	r3, #1
 800fbfe:	9300      	str	r3, [sp, #0]
 800fc00:	2300      	movs	r3, #0
 800fc02:	930b      	str	r3, [sp, #44]	; 0x2c
 800fc04:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800fc06:	1b5d      	subs	r5, r3, r5
 800fc08:	1e6b      	subs	r3, r5, #1
 800fc0a:	9305      	str	r3, [sp, #20]
 800fc0c:	bf45      	ittet	mi
 800fc0e:	f1c5 0301 	rsbmi	r3, r5, #1
 800fc12:	9304      	strmi	r3, [sp, #16]
 800fc14:	2300      	movpl	r3, #0
 800fc16:	2300      	movmi	r3, #0
 800fc18:	bf4c      	ite	mi
 800fc1a:	9305      	strmi	r3, [sp, #20]
 800fc1c:	9304      	strpl	r3, [sp, #16]
 800fc1e:	9b00      	ldr	r3, [sp, #0]
 800fc20:	2b00      	cmp	r3, #0
 800fc22:	db3d      	blt.n	800fca0 <_dtoa_r+0x248>
 800fc24:	9b05      	ldr	r3, [sp, #20]
 800fc26:	9a00      	ldr	r2, [sp, #0]
 800fc28:	920a      	str	r2, [sp, #40]	; 0x28
 800fc2a:	4413      	add	r3, r2
 800fc2c:	9305      	str	r3, [sp, #20]
 800fc2e:	2300      	movs	r3, #0
 800fc30:	9307      	str	r3, [sp, #28]
 800fc32:	9b06      	ldr	r3, [sp, #24]
 800fc34:	2b09      	cmp	r3, #9
 800fc36:	f200 8089 	bhi.w	800fd4c <_dtoa_r+0x2f4>
 800fc3a:	2b05      	cmp	r3, #5
 800fc3c:	bfc4      	itt	gt
 800fc3e:	3b04      	subgt	r3, #4
 800fc40:	9306      	strgt	r3, [sp, #24]
 800fc42:	9b06      	ldr	r3, [sp, #24]
 800fc44:	f1a3 0302 	sub.w	r3, r3, #2
 800fc48:	bfcc      	ite	gt
 800fc4a:	2500      	movgt	r5, #0
 800fc4c:	2501      	movle	r5, #1
 800fc4e:	2b03      	cmp	r3, #3
 800fc50:	f200 8087 	bhi.w	800fd62 <_dtoa_r+0x30a>
 800fc54:	e8df f003 	tbb	[pc, r3]
 800fc58:	59383a2d 	.word	0x59383a2d
 800fc5c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800fc60:	441d      	add	r5, r3
 800fc62:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800fc66:	2b20      	cmp	r3, #32
 800fc68:	bfc1      	itttt	gt
 800fc6a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800fc6e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800fc72:	fa0b f303 	lslgt.w	r3, fp, r3
 800fc76:	fa26 f000 	lsrgt.w	r0, r6, r0
 800fc7a:	bfda      	itte	le
 800fc7c:	f1c3 0320 	rsble	r3, r3, #32
 800fc80:	fa06 f003 	lslle.w	r0, r6, r3
 800fc84:	4318      	orrgt	r0, r3
 800fc86:	f7f0 fc3d 	bl	8000504 <__aeabi_ui2d>
 800fc8a:	2301      	movs	r3, #1
 800fc8c:	4606      	mov	r6, r0
 800fc8e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800fc92:	3d01      	subs	r5, #1
 800fc94:	930e      	str	r3, [sp, #56]	; 0x38
 800fc96:	e76a      	b.n	800fb6e <_dtoa_r+0x116>
 800fc98:	2301      	movs	r3, #1
 800fc9a:	e7b2      	b.n	800fc02 <_dtoa_r+0x1aa>
 800fc9c:	900b      	str	r0, [sp, #44]	; 0x2c
 800fc9e:	e7b1      	b.n	800fc04 <_dtoa_r+0x1ac>
 800fca0:	9b04      	ldr	r3, [sp, #16]
 800fca2:	9a00      	ldr	r2, [sp, #0]
 800fca4:	1a9b      	subs	r3, r3, r2
 800fca6:	9304      	str	r3, [sp, #16]
 800fca8:	4253      	negs	r3, r2
 800fcaa:	9307      	str	r3, [sp, #28]
 800fcac:	2300      	movs	r3, #0
 800fcae:	930a      	str	r3, [sp, #40]	; 0x28
 800fcb0:	e7bf      	b.n	800fc32 <_dtoa_r+0x1da>
 800fcb2:	2300      	movs	r3, #0
 800fcb4:	9308      	str	r3, [sp, #32]
 800fcb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fcb8:	2b00      	cmp	r3, #0
 800fcba:	dc55      	bgt.n	800fd68 <_dtoa_r+0x310>
 800fcbc:	2301      	movs	r3, #1
 800fcbe:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800fcc2:	461a      	mov	r2, r3
 800fcc4:	9209      	str	r2, [sp, #36]	; 0x24
 800fcc6:	e00c      	b.n	800fce2 <_dtoa_r+0x28a>
 800fcc8:	2301      	movs	r3, #1
 800fcca:	e7f3      	b.n	800fcb4 <_dtoa_r+0x25c>
 800fccc:	2300      	movs	r3, #0
 800fcce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fcd0:	9308      	str	r3, [sp, #32]
 800fcd2:	9b00      	ldr	r3, [sp, #0]
 800fcd4:	4413      	add	r3, r2
 800fcd6:	9302      	str	r3, [sp, #8]
 800fcd8:	3301      	adds	r3, #1
 800fcda:	2b01      	cmp	r3, #1
 800fcdc:	9303      	str	r3, [sp, #12]
 800fcde:	bfb8      	it	lt
 800fce0:	2301      	movlt	r3, #1
 800fce2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800fce4:	2200      	movs	r2, #0
 800fce6:	6042      	str	r2, [r0, #4]
 800fce8:	2204      	movs	r2, #4
 800fcea:	f102 0614 	add.w	r6, r2, #20
 800fcee:	429e      	cmp	r6, r3
 800fcf0:	6841      	ldr	r1, [r0, #4]
 800fcf2:	d93d      	bls.n	800fd70 <_dtoa_r+0x318>
 800fcf4:	4620      	mov	r0, r4
 800fcf6:	f000 fca9 	bl	801064c <_Balloc>
 800fcfa:	9001      	str	r0, [sp, #4]
 800fcfc:	2800      	cmp	r0, #0
 800fcfe:	d13b      	bne.n	800fd78 <_dtoa_r+0x320>
 800fd00:	4b11      	ldr	r3, [pc, #68]	; (800fd48 <_dtoa_r+0x2f0>)
 800fd02:	4602      	mov	r2, r0
 800fd04:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800fd08:	e6c0      	b.n	800fa8c <_dtoa_r+0x34>
 800fd0a:	2301      	movs	r3, #1
 800fd0c:	e7df      	b.n	800fcce <_dtoa_r+0x276>
 800fd0e:	bf00      	nop
 800fd10:	636f4361 	.word	0x636f4361
 800fd14:	3fd287a7 	.word	0x3fd287a7
 800fd18:	8b60c8b3 	.word	0x8b60c8b3
 800fd1c:	3fc68a28 	.word	0x3fc68a28
 800fd20:	509f79fb 	.word	0x509f79fb
 800fd24:	3fd34413 	.word	0x3fd34413
 800fd28:	080145c5 	.word	0x080145c5
 800fd2c:	080145dc 	.word	0x080145dc
 800fd30:	7ff00000 	.word	0x7ff00000
 800fd34:	080145c1 	.word	0x080145c1
 800fd38:	080145b8 	.word	0x080145b8
 800fd3c:	08014595 	.word	0x08014595
 800fd40:	3ff80000 	.word	0x3ff80000
 800fd44:	080146d0 	.word	0x080146d0
 800fd48:	08014637 	.word	0x08014637
 800fd4c:	2501      	movs	r5, #1
 800fd4e:	2300      	movs	r3, #0
 800fd50:	9306      	str	r3, [sp, #24]
 800fd52:	9508      	str	r5, [sp, #32]
 800fd54:	f04f 33ff 	mov.w	r3, #4294967295
 800fd58:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800fd5c:	2200      	movs	r2, #0
 800fd5e:	2312      	movs	r3, #18
 800fd60:	e7b0      	b.n	800fcc4 <_dtoa_r+0x26c>
 800fd62:	2301      	movs	r3, #1
 800fd64:	9308      	str	r3, [sp, #32]
 800fd66:	e7f5      	b.n	800fd54 <_dtoa_r+0x2fc>
 800fd68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fd6a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800fd6e:	e7b8      	b.n	800fce2 <_dtoa_r+0x28a>
 800fd70:	3101      	adds	r1, #1
 800fd72:	6041      	str	r1, [r0, #4]
 800fd74:	0052      	lsls	r2, r2, #1
 800fd76:	e7b8      	b.n	800fcea <_dtoa_r+0x292>
 800fd78:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fd7a:	9a01      	ldr	r2, [sp, #4]
 800fd7c:	601a      	str	r2, [r3, #0]
 800fd7e:	9b03      	ldr	r3, [sp, #12]
 800fd80:	2b0e      	cmp	r3, #14
 800fd82:	f200 809d 	bhi.w	800fec0 <_dtoa_r+0x468>
 800fd86:	2d00      	cmp	r5, #0
 800fd88:	f000 809a 	beq.w	800fec0 <_dtoa_r+0x468>
 800fd8c:	9b00      	ldr	r3, [sp, #0]
 800fd8e:	2b00      	cmp	r3, #0
 800fd90:	dd32      	ble.n	800fdf8 <_dtoa_r+0x3a0>
 800fd92:	4ab7      	ldr	r2, [pc, #732]	; (8010070 <_dtoa_r+0x618>)
 800fd94:	f003 030f 	and.w	r3, r3, #15
 800fd98:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800fd9c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800fda0:	9b00      	ldr	r3, [sp, #0]
 800fda2:	05d8      	lsls	r0, r3, #23
 800fda4:	ea4f 1723 	mov.w	r7, r3, asr #4
 800fda8:	d516      	bpl.n	800fdd8 <_dtoa_r+0x380>
 800fdaa:	4bb2      	ldr	r3, [pc, #712]	; (8010074 <_dtoa_r+0x61c>)
 800fdac:	ec51 0b19 	vmov	r0, r1, d9
 800fdb0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800fdb4:	f7f0 fd4a 	bl	800084c <__aeabi_ddiv>
 800fdb8:	f007 070f 	and.w	r7, r7, #15
 800fdbc:	4682      	mov	sl, r0
 800fdbe:	468b      	mov	fp, r1
 800fdc0:	2503      	movs	r5, #3
 800fdc2:	4eac      	ldr	r6, [pc, #688]	; (8010074 <_dtoa_r+0x61c>)
 800fdc4:	b957      	cbnz	r7, 800fddc <_dtoa_r+0x384>
 800fdc6:	4642      	mov	r2, r8
 800fdc8:	464b      	mov	r3, r9
 800fdca:	4650      	mov	r0, sl
 800fdcc:	4659      	mov	r1, fp
 800fdce:	f7f0 fd3d 	bl	800084c <__aeabi_ddiv>
 800fdd2:	4682      	mov	sl, r0
 800fdd4:	468b      	mov	fp, r1
 800fdd6:	e028      	b.n	800fe2a <_dtoa_r+0x3d2>
 800fdd8:	2502      	movs	r5, #2
 800fdda:	e7f2      	b.n	800fdc2 <_dtoa_r+0x36a>
 800fddc:	07f9      	lsls	r1, r7, #31
 800fdde:	d508      	bpl.n	800fdf2 <_dtoa_r+0x39a>
 800fde0:	4640      	mov	r0, r8
 800fde2:	4649      	mov	r1, r9
 800fde4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800fde8:	f7f0 fc06 	bl	80005f8 <__aeabi_dmul>
 800fdec:	3501      	adds	r5, #1
 800fdee:	4680      	mov	r8, r0
 800fdf0:	4689      	mov	r9, r1
 800fdf2:	107f      	asrs	r7, r7, #1
 800fdf4:	3608      	adds	r6, #8
 800fdf6:	e7e5      	b.n	800fdc4 <_dtoa_r+0x36c>
 800fdf8:	f000 809b 	beq.w	800ff32 <_dtoa_r+0x4da>
 800fdfc:	9b00      	ldr	r3, [sp, #0]
 800fdfe:	4f9d      	ldr	r7, [pc, #628]	; (8010074 <_dtoa_r+0x61c>)
 800fe00:	425e      	negs	r6, r3
 800fe02:	4b9b      	ldr	r3, [pc, #620]	; (8010070 <_dtoa_r+0x618>)
 800fe04:	f006 020f 	and.w	r2, r6, #15
 800fe08:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fe0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe10:	ec51 0b19 	vmov	r0, r1, d9
 800fe14:	f7f0 fbf0 	bl	80005f8 <__aeabi_dmul>
 800fe18:	1136      	asrs	r6, r6, #4
 800fe1a:	4682      	mov	sl, r0
 800fe1c:	468b      	mov	fp, r1
 800fe1e:	2300      	movs	r3, #0
 800fe20:	2502      	movs	r5, #2
 800fe22:	2e00      	cmp	r6, #0
 800fe24:	d17a      	bne.n	800ff1c <_dtoa_r+0x4c4>
 800fe26:	2b00      	cmp	r3, #0
 800fe28:	d1d3      	bne.n	800fdd2 <_dtoa_r+0x37a>
 800fe2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fe2c:	2b00      	cmp	r3, #0
 800fe2e:	f000 8082 	beq.w	800ff36 <_dtoa_r+0x4de>
 800fe32:	4b91      	ldr	r3, [pc, #580]	; (8010078 <_dtoa_r+0x620>)
 800fe34:	2200      	movs	r2, #0
 800fe36:	4650      	mov	r0, sl
 800fe38:	4659      	mov	r1, fp
 800fe3a:	f7f0 fe4f 	bl	8000adc <__aeabi_dcmplt>
 800fe3e:	2800      	cmp	r0, #0
 800fe40:	d079      	beq.n	800ff36 <_dtoa_r+0x4de>
 800fe42:	9b03      	ldr	r3, [sp, #12]
 800fe44:	2b00      	cmp	r3, #0
 800fe46:	d076      	beq.n	800ff36 <_dtoa_r+0x4de>
 800fe48:	9b02      	ldr	r3, [sp, #8]
 800fe4a:	2b00      	cmp	r3, #0
 800fe4c:	dd36      	ble.n	800febc <_dtoa_r+0x464>
 800fe4e:	9b00      	ldr	r3, [sp, #0]
 800fe50:	4650      	mov	r0, sl
 800fe52:	4659      	mov	r1, fp
 800fe54:	1e5f      	subs	r7, r3, #1
 800fe56:	2200      	movs	r2, #0
 800fe58:	4b88      	ldr	r3, [pc, #544]	; (801007c <_dtoa_r+0x624>)
 800fe5a:	f7f0 fbcd 	bl	80005f8 <__aeabi_dmul>
 800fe5e:	9e02      	ldr	r6, [sp, #8]
 800fe60:	4682      	mov	sl, r0
 800fe62:	468b      	mov	fp, r1
 800fe64:	3501      	adds	r5, #1
 800fe66:	4628      	mov	r0, r5
 800fe68:	f7f0 fb5c 	bl	8000524 <__aeabi_i2d>
 800fe6c:	4652      	mov	r2, sl
 800fe6e:	465b      	mov	r3, fp
 800fe70:	f7f0 fbc2 	bl	80005f8 <__aeabi_dmul>
 800fe74:	4b82      	ldr	r3, [pc, #520]	; (8010080 <_dtoa_r+0x628>)
 800fe76:	2200      	movs	r2, #0
 800fe78:	f7f0 fa08 	bl	800028c <__adddf3>
 800fe7c:	46d0      	mov	r8, sl
 800fe7e:	46d9      	mov	r9, fp
 800fe80:	4682      	mov	sl, r0
 800fe82:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800fe86:	2e00      	cmp	r6, #0
 800fe88:	d158      	bne.n	800ff3c <_dtoa_r+0x4e4>
 800fe8a:	4b7e      	ldr	r3, [pc, #504]	; (8010084 <_dtoa_r+0x62c>)
 800fe8c:	2200      	movs	r2, #0
 800fe8e:	4640      	mov	r0, r8
 800fe90:	4649      	mov	r1, r9
 800fe92:	f7f0 f9f9 	bl	8000288 <__aeabi_dsub>
 800fe96:	4652      	mov	r2, sl
 800fe98:	465b      	mov	r3, fp
 800fe9a:	4680      	mov	r8, r0
 800fe9c:	4689      	mov	r9, r1
 800fe9e:	f7f0 fe3b 	bl	8000b18 <__aeabi_dcmpgt>
 800fea2:	2800      	cmp	r0, #0
 800fea4:	f040 8295 	bne.w	80103d2 <_dtoa_r+0x97a>
 800fea8:	4652      	mov	r2, sl
 800feaa:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800feae:	4640      	mov	r0, r8
 800feb0:	4649      	mov	r1, r9
 800feb2:	f7f0 fe13 	bl	8000adc <__aeabi_dcmplt>
 800feb6:	2800      	cmp	r0, #0
 800feb8:	f040 8289 	bne.w	80103ce <_dtoa_r+0x976>
 800febc:	ec5b ab19 	vmov	sl, fp, d9
 800fec0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800fec2:	2b00      	cmp	r3, #0
 800fec4:	f2c0 8148 	blt.w	8010158 <_dtoa_r+0x700>
 800fec8:	9a00      	ldr	r2, [sp, #0]
 800feca:	2a0e      	cmp	r2, #14
 800fecc:	f300 8144 	bgt.w	8010158 <_dtoa_r+0x700>
 800fed0:	4b67      	ldr	r3, [pc, #412]	; (8010070 <_dtoa_r+0x618>)
 800fed2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fed6:	e9d3 8900 	ldrd	r8, r9, [r3]
 800feda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fedc:	2b00      	cmp	r3, #0
 800fede:	f280 80d5 	bge.w	801008c <_dtoa_r+0x634>
 800fee2:	9b03      	ldr	r3, [sp, #12]
 800fee4:	2b00      	cmp	r3, #0
 800fee6:	f300 80d1 	bgt.w	801008c <_dtoa_r+0x634>
 800feea:	f040 826f 	bne.w	80103cc <_dtoa_r+0x974>
 800feee:	4b65      	ldr	r3, [pc, #404]	; (8010084 <_dtoa_r+0x62c>)
 800fef0:	2200      	movs	r2, #0
 800fef2:	4640      	mov	r0, r8
 800fef4:	4649      	mov	r1, r9
 800fef6:	f7f0 fb7f 	bl	80005f8 <__aeabi_dmul>
 800fefa:	4652      	mov	r2, sl
 800fefc:	465b      	mov	r3, fp
 800fefe:	f7f0 fe01 	bl	8000b04 <__aeabi_dcmpge>
 800ff02:	9e03      	ldr	r6, [sp, #12]
 800ff04:	4637      	mov	r7, r6
 800ff06:	2800      	cmp	r0, #0
 800ff08:	f040 8245 	bne.w	8010396 <_dtoa_r+0x93e>
 800ff0c:	9d01      	ldr	r5, [sp, #4]
 800ff0e:	2331      	movs	r3, #49	; 0x31
 800ff10:	f805 3b01 	strb.w	r3, [r5], #1
 800ff14:	9b00      	ldr	r3, [sp, #0]
 800ff16:	3301      	adds	r3, #1
 800ff18:	9300      	str	r3, [sp, #0]
 800ff1a:	e240      	b.n	801039e <_dtoa_r+0x946>
 800ff1c:	07f2      	lsls	r2, r6, #31
 800ff1e:	d505      	bpl.n	800ff2c <_dtoa_r+0x4d4>
 800ff20:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ff24:	f7f0 fb68 	bl	80005f8 <__aeabi_dmul>
 800ff28:	3501      	adds	r5, #1
 800ff2a:	2301      	movs	r3, #1
 800ff2c:	1076      	asrs	r6, r6, #1
 800ff2e:	3708      	adds	r7, #8
 800ff30:	e777      	b.n	800fe22 <_dtoa_r+0x3ca>
 800ff32:	2502      	movs	r5, #2
 800ff34:	e779      	b.n	800fe2a <_dtoa_r+0x3d2>
 800ff36:	9f00      	ldr	r7, [sp, #0]
 800ff38:	9e03      	ldr	r6, [sp, #12]
 800ff3a:	e794      	b.n	800fe66 <_dtoa_r+0x40e>
 800ff3c:	9901      	ldr	r1, [sp, #4]
 800ff3e:	4b4c      	ldr	r3, [pc, #304]	; (8010070 <_dtoa_r+0x618>)
 800ff40:	4431      	add	r1, r6
 800ff42:	910d      	str	r1, [sp, #52]	; 0x34
 800ff44:	9908      	ldr	r1, [sp, #32]
 800ff46:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800ff4a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ff4e:	2900      	cmp	r1, #0
 800ff50:	d043      	beq.n	800ffda <_dtoa_r+0x582>
 800ff52:	494d      	ldr	r1, [pc, #308]	; (8010088 <_dtoa_r+0x630>)
 800ff54:	2000      	movs	r0, #0
 800ff56:	f7f0 fc79 	bl	800084c <__aeabi_ddiv>
 800ff5a:	4652      	mov	r2, sl
 800ff5c:	465b      	mov	r3, fp
 800ff5e:	f7f0 f993 	bl	8000288 <__aeabi_dsub>
 800ff62:	9d01      	ldr	r5, [sp, #4]
 800ff64:	4682      	mov	sl, r0
 800ff66:	468b      	mov	fp, r1
 800ff68:	4649      	mov	r1, r9
 800ff6a:	4640      	mov	r0, r8
 800ff6c:	f7f0 fdf4 	bl	8000b58 <__aeabi_d2iz>
 800ff70:	4606      	mov	r6, r0
 800ff72:	f7f0 fad7 	bl	8000524 <__aeabi_i2d>
 800ff76:	4602      	mov	r2, r0
 800ff78:	460b      	mov	r3, r1
 800ff7a:	4640      	mov	r0, r8
 800ff7c:	4649      	mov	r1, r9
 800ff7e:	f7f0 f983 	bl	8000288 <__aeabi_dsub>
 800ff82:	3630      	adds	r6, #48	; 0x30
 800ff84:	f805 6b01 	strb.w	r6, [r5], #1
 800ff88:	4652      	mov	r2, sl
 800ff8a:	465b      	mov	r3, fp
 800ff8c:	4680      	mov	r8, r0
 800ff8e:	4689      	mov	r9, r1
 800ff90:	f7f0 fda4 	bl	8000adc <__aeabi_dcmplt>
 800ff94:	2800      	cmp	r0, #0
 800ff96:	d163      	bne.n	8010060 <_dtoa_r+0x608>
 800ff98:	4642      	mov	r2, r8
 800ff9a:	464b      	mov	r3, r9
 800ff9c:	4936      	ldr	r1, [pc, #216]	; (8010078 <_dtoa_r+0x620>)
 800ff9e:	2000      	movs	r0, #0
 800ffa0:	f7f0 f972 	bl	8000288 <__aeabi_dsub>
 800ffa4:	4652      	mov	r2, sl
 800ffa6:	465b      	mov	r3, fp
 800ffa8:	f7f0 fd98 	bl	8000adc <__aeabi_dcmplt>
 800ffac:	2800      	cmp	r0, #0
 800ffae:	f040 80b5 	bne.w	801011c <_dtoa_r+0x6c4>
 800ffb2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ffb4:	429d      	cmp	r5, r3
 800ffb6:	d081      	beq.n	800febc <_dtoa_r+0x464>
 800ffb8:	4b30      	ldr	r3, [pc, #192]	; (801007c <_dtoa_r+0x624>)
 800ffba:	2200      	movs	r2, #0
 800ffbc:	4650      	mov	r0, sl
 800ffbe:	4659      	mov	r1, fp
 800ffc0:	f7f0 fb1a 	bl	80005f8 <__aeabi_dmul>
 800ffc4:	4b2d      	ldr	r3, [pc, #180]	; (801007c <_dtoa_r+0x624>)
 800ffc6:	4682      	mov	sl, r0
 800ffc8:	468b      	mov	fp, r1
 800ffca:	4640      	mov	r0, r8
 800ffcc:	4649      	mov	r1, r9
 800ffce:	2200      	movs	r2, #0
 800ffd0:	f7f0 fb12 	bl	80005f8 <__aeabi_dmul>
 800ffd4:	4680      	mov	r8, r0
 800ffd6:	4689      	mov	r9, r1
 800ffd8:	e7c6      	b.n	800ff68 <_dtoa_r+0x510>
 800ffda:	4650      	mov	r0, sl
 800ffdc:	4659      	mov	r1, fp
 800ffde:	f7f0 fb0b 	bl	80005f8 <__aeabi_dmul>
 800ffe2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ffe4:	9d01      	ldr	r5, [sp, #4]
 800ffe6:	930f      	str	r3, [sp, #60]	; 0x3c
 800ffe8:	4682      	mov	sl, r0
 800ffea:	468b      	mov	fp, r1
 800ffec:	4649      	mov	r1, r9
 800ffee:	4640      	mov	r0, r8
 800fff0:	f7f0 fdb2 	bl	8000b58 <__aeabi_d2iz>
 800fff4:	4606      	mov	r6, r0
 800fff6:	f7f0 fa95 	bl	8000524 <__aeabi_i2d>
 800fffa:	3630      	adds	r6, #48	; 0x30
 800fffc:	4602      	mov	r2, r0
 800fffe:	460b      	mov	r3, r1
 8010000:	4640      	mov	r0, r8
 8010002:	4649      	mov	r1, r9
 8010004:	f7f0 f940 	bl	8000288 <__aeabi_dsub>
 8010008:	f805 6b01 	strb.w	r6, [r5], #1
 801000c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801000e:	429d      	cmp	r5, r3
 8010010:	4680      	mov	r8, r0
 8010012:	4689      	mov	r9, r1
 8010014:	f04f 0200 	mov.w	r2, #0
 8010018:	d124      	bne.n	8010064 <_dtoa_r+0x60c>
 801001a:	4b1b      	ldr	r3, [pc, #108]	; (8010088 <_dtoa_r+0x630>)
 801001c:	4650      	mov	r0, sl
 801001e:	4659      	mov	r1, fp
 8010020:	f7f0 f934 	bl	800028c <__adddf3>
 8010024:	4602      	mov	r2, r0
 8010026:	460b      	mov	r3, r1
 8010028:	4640      	mov	r0, r8
 801002a:	4649      	mov	r1, r9
 801002c:	f7f0 fd74 	bl	8000b18 <__aeabi_dcmpgt>
 8010030:	2800      	cmp	r0, #0
 8010032:	d173      	bne.n	801011c <_dtoa_r+0x6c4>
 8010034:	4652      	mov	r2, sl
 8010036:	465b      	mov	r3, fp
 8010038:	4913      	ldr	r1, [pc, #76]	; (8010088 <_dtoa_r+0x630>)
 801003a:	2000      	movs	r0, #0
 801003c:	f7f0 f924 	bl	8000288 <__aeabi_dsub>
 8010040:	4602      	mov	r2, r0
 8010042:	460b      	mov	r3, r1
 8010044:	4640      	mov	r0, r8
 8010046:	4649      	mov	r1, r9
 8010048:	f7f0 fd48 	bl	8000adc <__aeabi_dcmplt>
 801004c:	2800      	cmp	r0, #0
 801004e:	f43f af35 	beq.w	800febc <_dtoa_r+0x464>
 8010052:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8010054:	1e6b      	subs	r3, r5, #1
 8010056:	930f      	str	r3, [sp, #60]	; 0x3c
 8010058:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801005c:	2b30      	cmp	r3, #48	; 0x30
 801005e:	d0f8      	beq.n	8010052 <_dtoa_r+0x5fa>
 8010060:	9700      	str	r7, [sp, #0]
 8010062:	e049      	b.n	80100f8 <_dtoa_r+0x6a0>
 8010064:	4b05      	ldr	r3, [pc, #20]	; (801007c <_dtoa_r+0x624>)
 8010066:	f7f0 fac7 	bl	80005f8 <__aeabi_dmul>
 801006a:	4680      	mov	r8, r0
 801006c:	4689      	mov	r9, r1
 801006e:	e7bd      	b.n	800ffec <_dtoa_r+0x594>
 8010070:	080146d0 	.word	0x080146d0
 8010074:	080146a8 	.word	0x080146a8
 8010078:	3ff00000 	.word	0x3ff00000
 801007c:	40240000 	.word	0x40240000
 8010080:	401c0000 	.word	0x401c0000
 8010084:	40140000 	.word	0x40140000
 8010088:	3fe00000 	.word	0x3fe00000
 801008c:	9d01      	ldr	r5, [sp, #4]
 801008e:	4656      	mov	r6, sl
 8010090:	465f      	mov	r7, fp
 8010092:	4642      	mov	r2, r8
 8010094:	464b      	mov	r3, r9
 8010096:	4630      	mov	r0, r6
 8010098:	4639      	mov	r1, r7
 801009a:	f7f0 fbd7 	bl	800084c <__aeabi_ddiv>
 801009e:	f7f0 fd5b 	bl	8000b58 <__aeabi_d2iz>
 80100a2:	4682      	mov	sl, r0
 80100a4:	f7f0 fa3e 	bl	8000524 <__aeabi_i2d>
 80100a8:	4642      	mov	r2, r8
 80100aa:	464b      	mov	r3, r9
 80100ac:	f7f0 faa4 	bl	80005f8 <__aeabi_dmul>
 80100b0:	4602      	mov	r2, r0
 80100b2:	460b      	mov	r3, r1
 80100b4:	4630      	mov	r0, r6
 80100b6:	4639      	mov	r1, r7
 80100b8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80100bc:	f7f0 f8e4 	bl	8000288 <__aeabi_dsub>
 80100c0:	f805 6b01 	strb.w	r6, [r5], #1
 80100c4:	9e01      	ldr	r6, [sp, #4]
 80100c6:	9f03      	ldr	r7, [sp, #12]
 80100c8:	1bae      	subs	r6, r5, r6
 80100ca:	42b7      	cmp	r7, r6
 80100cc:	4602      	mov	r2, r0
 80100ce:	460b      	mov	r3, r1
 80100d0:	d135      	bne.n	801013e <_dtoa_r+0x6e6>
 80100d2:	f7f0 f8db 	bl	800028c <__adddf3>
 80100d6:	4642      	mov	r2, r8
 80100d8:	464b      	mov	r3, r9
 80100da:	4606      	mov	r6, r0
 80100dc:	460f      	mov	r7, r1
 80100de:	f7f0 fd1b 	bl	8000b18 <__aeabi_dcmpgt>
 80100e2:	b9d0      	cbnz	r0, 801011a <_dtoa_r+0x6c2>
 80100e4:	4642      	mov	r2, r8
 80100e6:	464b      	mov	r3, r9
 80100e8:	4630      	mov	r0, r6
 80100ea:	4639      	mov	r1, r7
 80100ec:	f7f0 fcec 	bl	8000ac8 <__aeabi_dcmpeq>
 80100f0:	b110      	cbz	r0, 80100f8 <_dtoa_r+0x6a0>
 80100f2:	f01a 0f01 	tst.w	sl, #1
 80100f6:	d110      	bne.n	801011a <_dtoa_r+0x6c2>
 80100f8:	4620      	mov	r0, r4
 80100fa:	ee18 1a10 	vmov	r1, s16
 80100fe:	f000 fae5 	bl	80106cc <_Bfree>
 8010102:	2300      	movs	r3, #0
 8010104:	9800      	ldr	r0, [sp, #0]
 8010106:	702b      	strb	r3, [r5, #0]
 8010108:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801010a:	3001      	adds	r0, #1
 801010c:	6018      	str	r0, [r3, #0]
 801010e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010110:	2b00      	cmp	r3, #0
 8010112:	f43f acf1 	beq.w	800faf8 <_dtoa_r+0xa0>
 8010116:	601d      	str	r5, [r3, #0]
 8010118:	e4ee      	b.n	800faf8 <_dtoa_r+0xa0>
 801011a:	9f00      	ldr	r7, [sp, #0]
 801011c:	462b      	mov	r3, r5
 801011e:	461d      	mov	r5, r3
 8010120:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010124:	2a39      	cmp	r2, #57	; 0x39
 8010126:	d106      	bne.n	8010136 <_dtoa_r+0x6de>
 8010128:	9a01      	ldr	r2, [sp, #4]
 801012a:	429a      	cmp	r2, r3
 801012c:	d1f7      	bne.n	801011e <_dtoa_r+0x6c6>
 801012e:	9901      	ldr	r1, [sp, #4]
 8010130:	2230      	movs	r2, #48	; 0x30
 8010132:	3701      	adds	r7, #1
 8010134:	700a      	strb	r2, [r1, #0]
 8010136:	781a      	ldrb	r2, [r3, #0]
 8010138:	3201      	adds	r2, #1
 801013a:	701a      	strb	r2, [r3, #0]
 801013c:	e790      	b.n	8010060 <_dtoa_r+0x608>
 801013e:	4ba6      	ldr	r3, [pc, #664]	; (80103d8 <_dtoa_r+0x980>)
 8010140:	2200      	movs	r2, #0
 8010142:	f7f0 fa59 	bl	80005f8 <__aeabi_dmul>
 8010146:	2200      	movs	r2, #0
 8010148:	2300      	movs	r3, #0
 801014a:	4606      	mov	r6, r0
 801014c:	460f      	mov	r7, r1
 801014e:	f7f0 fcbb 	bl	8000ac8 <__aeabi_dcmpeq>
 8010152:	2800      	cmp	r0, #0
 8010154:	d09d      	beq.n	8010092 <_dtoa_r+0x63a>
 8010156:	e7cf      	b.n	80100f8 <_dtoa_r+0x6a0>
 8010158:	9a08      	ldr	r2, [sp, #32]
 801015a:	2a00      	cmp	r2, #0
 801015c:	f000 80d7 	beq.w	801030e <_dtoa_r+0x8b6>
 8010160:	9a06      	ldr	r2, [sp, #24]
 8010162:	2a01      	cmp	r2, #1
 8010164:	f300 80ba 	bgt.w	80102dc <_dtoa_r+0x884>
 8010168:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801016a:	2a00      	cmp	r2, #0
 801016c:	f000 80b2 	beq.w	80102d4 <_dtoa_r+0x87c>
 8010170:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8010174:	9e07      	ldr	r6, [sp, #28]
 8010176:	9d04      	ldr	r5, [sp, #16]
 8010178:	9a04      	ldr	r2, [sp, #16]
 801017a:	441a      	add	r2, r3
 801017c:	9204      	str	r2, [sp, #16]
 801017e:	9a05      	ldr	r2, [sp, #20]
 8010180:	2101      	movs	r1, #1
 8010182:	441a      	add	r2, r3
 8010184:	4620      	mov	r0, r4
 8010186:	9205      	str	r2, [sp, #20]
 8010188:	f000 fb58 	bl	801083c <__i2b>
 801018c:	4607      	mov	r7, r0
 801018e:	2d00      	cmp	r5, #0
 8010190:	dd0c      	ble.n	80101ac <_dtoa_r+0x754>
 8010192:	9b05      	ldr	r3, [sp, #20]
 8010194:	2b00      	cmp	r3, #0
 8010196:	dd09      	ble.n	80101ac <_dtoa_r+0x754>
 8010198:	42ab      	cmp	r3, r5
 801019a:	9a04      	ldr	r2, [sp, #16]
 801019c:	bfa8      	it	ge
 801019e:	462b      	movge	r3, r5
 80101a0:	1ad2      	subs	r2, r2, r3
 80101a2:	9204      	str	r2, [sp, #16]
 80101a4:	9a05      	ldr	r2, [sp, #20]
 80101a6:	1aed      	subs	r5, r5, r3
 80101a8:	1ad3      	subs	r3, r2, r3
 80101aa:	9305      	str	r3, [sp, #20]
 80101ac:	9b07      	ldr	r3, [sp, #28]
 80101ae:	b31b      	cbz	r3, 80101f8 <_dtoa_r+0x7a0>
 80101b0:	9b08      	ldr	r3, [sp, #32]
 80101b2:	2b00      	cmp	r3, #0
 80101b4:	f000 80af 	beq.w	8010316 <_dtoa_r+0x8be>
 80101b8:	2e00      	cmp	r6, #0
 80101ba:	dd13      	ble.n	80101e4 <_dtoa_r+0x78c>
 80101bc:	4639      	mov	r1, r7
 80101be:	4632      	mov	r2, r6
 80101c0:	4620      	mov	r0, r4
 80101c2:	f000 fbfb 	bl	80109bc <__pow5mult>
 80101c6:	ee18 2a10 	vmov	r2, s16
 80101ca:	4601      	mov	r1, r0
 80101cc:	4607      	mov	r7, r0
 80101ce:	4620      	mov	r0, r4
 80101d0:	f000 fb4a 	bl	8010868 <__multiply>
 80101d4:	ee18 1a10 	vmov	r1, s16
 80101d8:	4680      	mov	r8, r0
 80101da:	4620      	mov	r0, r4
 80101dc:	f000 fa76 	bl	80106cc <_Bfree>
 80101e0:	ee08 8a10 	vmov	s16, r8
 80101e4:	9b07      	ldr	r3, [sp, #28]
 80101e6:	1b9a      	subs	r2, r3, r6
 80101e8:	d006      	beq.n	80101f8 <_dtoa_r+0x7a0>
 80101ea:	ee18 1a10 	vmov	r1, s16
 80101ee:	4620      	mov	r0, r4
 80101f0:	f000 fbe4 	bl	80109bc <__pow5mult>
 80101f4:	ee08 0a10 	vmov	s16, r0
 80101f8:	2101      	movs	r1, #1
 80101fa:	4620      	mov	r0, r4
 80101fc:	f000 fb1e 	bl	801083c <__i2b>
 8010200:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010202:	2b00      	cmp	r3, #0
 8010204:	4606      	mov	r6, r0
 8010206:	f340 8088 	ble.w	801031a <_dtoa_r+0x8c2>
 801020a:	461a      	mov	r2, r3
 801020c:	4601      	mov	r1, r0
 801020e:	4620      	mov	r0, r4
 8010210:	f000 fbd4 	bl	80109bc <__pow5mult>
 8010214:	9b06      	ldr	r3, [sp, #24]
 8010216:	2b01      	cmp	r3, #1
 8010218:	4606      	mov	r6, r0
 801021a:	f340 8081 	ble.w	8010320 <_dtoa_r+0x8c8>
 801021e:	f04f 0800 	mov.w	r8, #0
 8010222:	6933      	ldr	r3, [r6, #16]
 8010224:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8010228:	6918      	ldr	r0, [r3, #16]
 801022a:	f000 fab7 	bl	801079c <__hi0bits>
 801022e:	f1c0 0020 	rsb	r0, r0, #32
 8010232:	9b05      	ldr	r3, [sp, #20]
 8010234:	4418      	add	r0, r3
 8010236:	f010 001f 	ands.w	r0, r0, #31
 801023a:	f000 8092 	beq.w	8010362 <_dtoa_r+0x90a>
 801023e:	f1c0 0320 	rsb	r3, r0, #32
 8010242:	2b04      	cmp	r3, #4
 8010244:	f340 808a 	ble.w	801035c <_dtoa_r+0x904>
 8010248:	f1c0 001c 	rsb	r0, r0, #28
 801024c:	9b04      	ldr	r3, [sp, #16]
 801024e:	4403      	add	r3, r0
 8010250:	9304      	str	r3, [sp, #16]
 8010252:	9b05      	ldr	r3, [sp, #20]
 8010254:	4403      	add	r3, r0
 8010256:	4405      	add	r5, r0
 8010258:	9305      	str	r3, [sp, #20]
 801025a:	9b04      	ldr	r3, [sp, #16]
 801025c:	2b00      	cmp	r3, #0
 801025e:	dd07      	ble.n	8010270 <_dtoa_r+0x818>
 8010260:	ee18 1a10 	vmov	r1, s16
 8010264:	461a      	mov	r2, r3
 8010266:	4620      	mov	r0, r4
 8010268:	f000 fc02 	bl	8010a70 <__lshift>
 801026c:	ee08 0a10 	vmov	s16, r0
 8010270:	9b05      	ldr	r3, [sp, #20]
 8010272:	2b00      	cmp	r3, #0
 8010274:	dd05      	ble.n	8010282 <_dtoa_r+0x82a>
 8010276:	4631      	mov	r1, r6
 8010278:	461a      	mov	r2, r3
 801027a:	4620      	mov	r0, r4
 801027c:	f000 fbf8 	bl	8010a70 <__lshift>
 8010280:	4606      	mov	r6, r0
 8010282:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010284:	2b00      	cmp	r3, #0
 8010286:	d06e      	beq.n	8010366 <_dtoa_r+0x90e>
 8010288:	ee18 0a10 	vmov	r0, s16
 801028c:	4631      	mov	r1, r6
 801028e:	f000 fc5f 	bl	8010b50 <__mcmp>
 8010292:	2800      	cmp	r0, #0
 8010294:	da67      	bge.n	8010366 <_dtoa_r+0x90e>
 8010296:	9b00      	ldr	r3, [sp, #0]
 8010298:	3b01      	subs	r3, #1
 801029a:	ee18 1a10 	vmov	r1, s16
 801029e:	9300      	str	r3, [sp, #0]
 80102a0:	220a      	movs	r2, #10
 80102a2:	2300      	movs	r3, #0
 80102a4:	4620      	mov	r0, r4
 80102a6:	f000 fa33 	bl	8010710 <__multadd>
 80102aa:	9b08      	ldr	r3, [sp, #32]
 80102ac:	ee08 0a10 	vmov	s16, r0
 80102b0:	2b00      	cmp	r3, #0
 80102b2:	f000 81b1 	beq.w	8010618 <_dtoa_r+0xbc0>
 80102b6:	2300      	movs	r3, #0
 80102b8:	4639      	mov	r1, r7
 80102ba:	220a      	movs	r2, #10
 80102bc:	4620      	mov	r0, r4
 80102be:	f000 fa27 	bl	8010710 <__multadd>
 80102c2:	9b02      	ldr	r3, [sp, #8]
 80102c4:	2b00      	cmp	r3, #0
 80102c6:	4607      	mov	r7, r0
 80102c8:	f300 808e 	bgt.w	80103e8 <_dtoa_r+0x990>
 80102cc:	9b06      	ldr	r3, [sp, #24]
 80102ce:	2b02      	cmp	r3, #2
 80102d0:	dc51      	bgt.n	8010376 <_dtoa_r+0x91e>
 80102d2:	e089      	b.n	80103e8 <_dtoa_r+0x990>
 80102d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80102d6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80102da:	e74b      	b.n	8010174 <_dtoa_r+0x71c>
 80102dc:	9b03      	ldr	r3, [sp, #12]
 80102de:	1e5e      	subs	r6, r3, #1
 80102e0:	9b07      	ldr	r3, [sp, #28]
 80102e2:	42b3      	cmp	r3, r6
 80102e4:	bfbf      	itttt	lt
 80102e6:	9b07      	ldrlt	r3, [sp, #28]
 80102e8:	9607      	strlt	r6, [sp, #28]
 80102ea:	1af2      	sublt	r2, r6, r3
 80102ec:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80102ee:	bfb6      	itet	lt
 80102f0:	189b      	addlt	r3, r3, r2
 80102f2:	1b9e      	subge	r6, r3, r6
 80102f4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80102f6:	9b03      	ldr	r3, [sp, #12]
 80102f8:	bfb8      	it	lt
 80102fa:	2600      	movlt	r6, #0
 80102fc:	2b00      	cmp	r3, #0
 80102fe:	bfb7      	itett	lt
 8010300:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8010304:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8010308:	1a9d      	sublt	r5, r3, r2
 801030a:	2300      	movlt	r3, #0
 801030c:	e734      	b.n	8010178 <_dtoa_r+0x720>
 801030e:	9e07      	ldr	r6, [sp, #28]
 8010310:	9d04      	ldr	r5, [sp, #16]
 8010312:	9f08      	ldr	r7, [sp, #32]
 8010314:	e73b      	b.n	801018e <_dtoa_r+0x736>
 8010316:	9a07      	ldr	r2, [sp, #28]
 8010318:	e767      	b.n	80101ea <_dtoa_r+0x792>
 801031a:	9b06      	ldr	r3, [sp, #24]
 801031c:	2b01      	cmp	r3, #1
 801031e:	dc18      	bgt.n	8010352 <_dtoa_r+0x8fa>
 8010320:	f1ba 0f00 	cmp.w	sl, #0
 8010324:	d115      	bne.n	8010352 <_dtoa_r+0x8fa>
 8010326:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801032a:	b993      	cbnz	r3, 8010352 <_dtoa_r+0x8fa>
 801032c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8010330:	0d1b      	lsrs	r3, r3, #20
 8010332:	051b      	lsls	r3, r3, #20
 8010334:	b183      	cbz	r3, 8010358 <_dtoa_r+0x900>
 8010336:	9b04      	ldr	r3, [sp, #16]
 8010338:	3301      	adds	r3, #1
 801033a:	9304      	str	r3, [sp, #16]
 801033c:	9b05      	ldr	r3, [sp, #20]
 801033e:	3301      	adds	r3, #1
 8010340:	9305      	str	r3, [sp, #20]
 8010342:	f04f 0801 	mov.w	r8, #1
 8010346:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010348:	2b00      	cmp	r3, #0
 801034a:	f47f af6a 	bne.w	8010222 <_dtoa_r+0x7ca>
 801034e:	2001      	movs	r0, #1
 8010350:	e76f      	b.n	8010232 <_dtoa_r+0x7da>
 8010352:	f04f 0800 	mov.w	r8, #0
 8010356:	e7f6      	b.n	8010346 <_dtoa_r+0x8ee>
 8010358:	4698      	mov	r8, r3
 801035a:	e7f4      	b.n	8010346 <_dtoa_r+0x8ee>
 801035c:	f43f af7d 	beq.w	801025a <_dtoa_r+0x802>
 8010360:	4618      	mov	r0, r3
 8010362:	301c      	adds	r0, #28
 8010364:	e772      	b.n	801024c <_dtoa_r+0x7f4>
 8010366:	9b03      	ldr	r3, [sp, #12]
 8010368:	2b00      	cmp	r3, #0
 801036a:	dc37      	bgt.n	80103dc <_dtoa_r+0x984>
 801036c:	9b06      	ldr	r3, [sp, #24]
 801036e:	2b02      	cmp	r3, #2
 8010370:	dd34      	ble.n	80103dc <_dtoa_r+0x984>
 8010372:	9b03      	ldr	r3, [sp, #12]
 8010374:	9302      	str	r3, [sp, #8]
 8010376:	9b02      	ldr	r3, [sp, #8]
 8010378:	b96b      	cbnz	r3, 8010396 <_dtoa_r+0x93e>
 801037a:	4631      	mov	r1, r6
 801037c:	2205      	movs	r2, #5
 801037e:	4620      	mov	r0, r4
 8010380:	f000 f9c6 	bl	8010710 <__multadd>
 8010384:	4601      	mov	r1, r0
 8010386:	4606      	mov	r6, r0
 8010388:	ee18 0a10 	vmov	r0, s16
 801038c:	f000 fbe0 	bl	8010b50 <__mcmp>
 8010390:	2800      	cmp	r0, #0
 8010392:	f73f adbb 	bgt.w	800ff0c <_dtoa_r+0x4b4>
 8010396:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010398:	9d01      	ldr	r5, [sp, #4]
 801039a:	43db      	mvns	r3, r3
 801039c:	9300      	str	r3, [sp, #0]
 801039e:	f04f 0800 	mov.w	r8, #0
 80103a2:	4631      	mov	r1, r6
 80103a4:	4620      	mov	r0, r4
 80103a6:	f000 f991 	bl	80106cc <_Bfree>
 80103aa:	2f00      	cmp	r7, #0
 80103ac:	f43f aea4 	beq.w	80100f8 <_dtoa_r+0x6a0>
 80103b0:	f1b8 0f00 	cmp.w	r8, #0
 80103b4:	d005      	beq.n	80103c2 <_dtoa_r+0x96a>
 80103b6:	45b8      	cmp	r8, r7
 80103b8:	d003      	beq.n	80103c2 <_dtoa_r+0x96a>
 80103ba:	4641      	mov	r1, r8
 80103bc:	4620      	mov	r0, r4
 80103be:	f000 f985 	bl	80106cc <_Bfree>
 80103c2:	4639      	mov	r1, r7
 80103c4:	4620      	mov	r0, r4
 80103c6:	f000 f981 	bl	80106cc <_Bfree>
 80103ca:	e695      	b.n	80100f8 <_dtoa_r+0x6a0>
 80103cc:	2600      	movs	r6, #0
 80103ce:	4637      	mov	r7, r6
 80103d0:	e7e1      	b.n	8010396 <_dtoa_r+0x93e>
 80103d2:	9700      	str	r7, [sp, #0]
 80103d4:	4637      	mov	r7, r6
 80103d6:	e599      	b.n	800ff0c <_dtoa_r+0x4b4>
 80103d8:	40240000 	.word	0x40240000
 80103dc:	9b08      	ldr	r3, [sp, #32]
 80103de:	2b00      	cmp	r3, #0
 80103e0:	f000 80ca 	beq.w	8010578 <_dtoa_r+0xb20>
 80103e4:	9b03      	ldr	r3, [sp, #12]
 80103e6:	9302      	str	r3, [sp, #8]
 80103e8:	2d00      	cmp	r5, #0
 80103ea:	dd05      	ble.n	80103f8 <_dtoa_r+0x9a0>
 80103ec:	4639      	mov	r1, r7
 80103ee:	462a      	mov	r2, r5
 80103f0:	4620      	mov	r0, r4
 80103f2:	f000 fb3d 	bl	8010a70 <__lshift>
 80103f6:	4607      	mov	r7, r0
 80103f8:	f1b8 0f00 	cmp.w	r8, #0
 80103fc:	d05b      	beq.n	80104b6 <_dtoa_r+0xa5e>
 80103fe:	6879      	ldr	r1, [r7, #4]
 8010400:	4620      	mov	r0, r4
 8010402:	f000 f923 	bl	801064c <_Balloc>
 8010406:	4605      	mov	r5, r0
 8010408:	b928      	cbnz	r0, 8010416 <_dtoa_r+0x9be>
 801040a:	4b87      	ldr	r3, [pc, #540]	; (8010628 <_dtoa_r+0xbd0>)
 801040c:	4602      	mov	r2, r0
 801040e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8010412:	f7ff bb3b 	b.w	800fa8c <_dtoa_r+0x34>
 8010416:	693a      	ldr	r2, [r7, #16]
 8010418:	3202      	adds	r2, #2
 801041a:	0092      	lsls	r2, r2, #2
 801041c:	f107 010c 	add.w	r1, r7, #12
 8010420:	300c      	adds	r0, #12
 8010422:	f7fe fded 	bl	800f000 <memcpy>
 8010426:	2201      	movs	r2, #1
 8010428:	4629      	mov	r1, r5
 801042a:	4620      	mov	r0, r4
 801042c:	f000 fb20 	bl	8010a70 <__lshift>
 8010430:	9b01      	ldr	r3, [sp, #4]
 8010432:	f103 0901 	add.w	r9, r3, #1
 8010436:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801043a:	4413      	add	r3, r2
 801043c:	9305      	str	r3, [sp, #20]
 801043e:	f00a 0301 	and.w	r3, sl, #1
 8010442:	46b8      	mov	r8, r7
 8010444:	9304      	str	r3, [sp, #16]
 8010446:	4607      	mov	r7, r0
 8010448:	4631      	mov	r1, r6
 801044a:	ee18 0a10 	vmov	r0, s16
 801044e:	f7ff fa77 	bl	800f940 <quorem>
 8010452:	4641      	mov	r1, r8
 8010454:	9002      	str	r0, [sp, #8]
 8010456:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801045a:	ee18 0a10 	vmov	r0, s16
 801045e:	f000 fb77 	bl	8010b50 <__mcmp>
 8010462:	463a      	mov	r2, r7
 8010464:	9003      	str	r0, [sp, #12]
 8010466:	4631      	mov	r1, r6
 8010468:	4620      	mov	r0, r4
 801046a:	f000 fb8d 	bl	8010b88 <__mdiff>
 801046e:	68c2      	ldr	r2, [r0, #12]
 8010470:	f109 3bff 	add.w	fp, r9, #4294967295
 8010474:	4605      	mov	r5, r0
 8010476:	bb02      	cbnz	r2, 80104ba <_dtoa_r+0xa62>
 8010478:	4601      	mov	r1, r0
 801047a:	ee18 0a10 	vmov	r0, s16
 801047e:	f000 fb67 	bl	8010b50 <__mcmp>
 8010482:	4602      	mov	r2, r0
 8010484:	4629      	mov	r1, r5
 8010486:	4620      	mov	r0, r4
 8010488:	9207      	str	r2, [sp, #28]
 801048a:	f000 f91f 	bl	80106cc <_Bfree>
 801048e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8010492:	ea43 0102 	orr.w	r1, r3, r2
 8010496:	9b04      	ldr	r3, [sp, #16]
 8010498:	430b      	orrs	r3, r1
 801049a:	464d      	mov	r5, r9
 801049c:	d10f      	bne.n	80104be <_dtoa_r+0xa66>
 801049e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80104a2:	d02a      	beq.n	80104fa <_dtoa_r+0xaa2>
 80104a4:	9b03      	ldr	r3, [sp, #12]
 80104a6:	2b00      	cmp	r3, #0
 80104a8:	dd02      	ble.n	80104b0 <_dtoa_r+0xa58>
 80104aa:	9b02      	ldr	r3, [sp, #8]
 80104ac:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80104b0:	f88b a000 	strb.w	sl, [fp]
 80104b4:	e775      	b.n	80103a2 <_dtoa_r+0x94a>
 80104b6:	4638      	mov	r0, r7
 80104b8:	e7ba      	b.n	8010430 <_dtoa_r+0x9d8>
 80104ba:	2201      	movs	r2, #1
 80104bc:	e7e2      	b.n	8010484 <_dtoa_r+0xa2c>
 80104be:	9b03      	ldr	r3, [sp, #12]
 80104c0:	2b00      	cmp	r3, #0
 80104c2:	db04      	blt.n	80104ce <_dtoa_r+0xa76>
 80104c4:	9906      	ldr	r1, [sp, #24]
 80104c6:	430b      	orrs	r3, r1
 80104c8:	9904      	ldr	r1, [sp, #16]
 80104ca:	430b      	orrs	r3, r1
 80104cc:	d122      	bne.n	8010514 <_dtoa_r+0xabc>
 80104ce:	2a00      	cmp	r2, #0
 80104d0:	ddee      	ble.n	80104b0 <_dtoa_r+0xa58>
 80104d2:	ee18 1a10 	vmov	r1, s16
 80104d6:	2201      	movs	r2, #1
 80104d8:	4620      	mov	r0, r4
 80104da:	f000 fac9 	bl	8010a70 <__lshift>
 80104de:	4631      	mov	r1, r6
 80104e0:	ee08 0a10 	vmov	s16, r0
 80104e4:	f000 fb34 	bl	8010b50 <__mcmp>
 80104e8:	2800      	cmp	r0, #0
 80104ea:	dc03      	bgt.n	80104f4 <_dtoa_r+0xa9c>
 80104ec:	d1e0      	bne.n	80104b0 <_dtoa_r+0xa58>
 80104ee:	f01a 0f01 	tst.w	sl, #1
 80104f2:	d0dd      	beq.n	80104b0 <_dtoa_r+0xa58>
 80104f4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80104f8:	d1d7      	bne.n	80104aa <_dtoa_r+0xa52>
 80104fa:	2339      	movs	r3, #57	; 0x39
 80104fc:	f88b 3000 	strb.w	r3, [fp]
 8010500:	462b      	mov	r3, r5
 8010502:	461d      	mov	r5, r3
 8010504:	3b01      	subs	r3, #1
 8010506:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801050a:	2a39      	cmp	r2, #57	; 0x39
 801050c:	d071      	beq.n	80105f2 <_dtoa_r+0xb9a>
 801050e:	3201      	adds	r2, #1
 8010510:	701a      	strb	r2, [r3, #0]
 8010512:	e746      	b.n	80103a2 <_dtoa_r+0x94a>
 8010514:	2a00      	cmp	r2, #0
 8010516:	dd07      	ble.n	8010528 <_dtoa_r+0xad0>
 8010518:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801051c:	d0ed      	beq.n	80104fa <_dtoa_r+0xaa2>
 801051e:	f10a 0301 	add.w	r3, sl, #1
 8010522:	f88b 3000 	strb.w	r3, [fp]
 8010526:	e73c      	b.n	80103a2 <_dtoa_r+0x94a>
 8010528:	9b05      	ldr	r3, [sp, #20]
 801052a:	f809 ac01 	strb.w	sl, [r9, #-1]
 801052e:	4599      	cmp	r9, r3
 8010530:	d047      	beq.n	80105c2 <_dtoa_r+0xb6a>
 8010532:	ee18 1a10 	vmov	r1, s16
 8010536:	2300      	movs	r3, #0
 8010538:	220a      	movs	r2, #10
 801053a:	4620      	mov	r0, r4
 801053c:	f000 f8e8 	bl	8010710 <__multadd>
 8010540:	45b8      	cmp	r8, r7
 8010542:	ee08 0a10 	vmov	s16, r0
 8010546:	f04f 0300 	mov.w	r3, #0
 801054a:	f04f 020a 	mov.w	r2, #10
 801054e:	4641      	mov	r1, r8
 8010550:	4620      	mov	r0, r4
 8010552:	d106      	bne.n	8010562 <_dtoa_r+0xb0a>
 8010554:	f000 f8dc 	bl	8010710 <__multadd>
 8010558:	4680      	mov	r8, r0
 801055a:	4607      	mov	r7, r0
 801055c:	f109 0901 	add.w	r9, r9, #1
 8010560:	e772      	b.n	8010448 <_dtoa_r+0x9f0>
 8010562:	f000 f8d5 	bl	8010710 <__multadd>
 8010566:	4639      	mov	r1, r7
 8010568:	4680      	mov	r8, r0
 801056a:	2300      	movs	r3, #0
 801056c:	220a      	movs	r2, #10
 801056e:	4620      	mov	r0, r4
 8010570:	f000 f8ce 	bl	8010710 <__multadd>
 8010574:	4607      	mov	r7, r0
 8010576:	e7f1      	b.n	801055c <_dtoa_r+0xb04>
 8010578:	9b03      	ldr	r3, [sp, #12]
 801057a:	9302      	str	r3, [sp, #8]
 801057c:	9d01      	ldr	r5, [sp, #4]
 801057e:	ee18 0a10 	vmov	r0, s16
 8010582:	4631      	mov	r1, r6
 8010584:	f7ff f9dc 	bl	800f940 <quorem>
 8010588:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801058c:	9b01      	ldr	r3, [sp, #4]
 801058e:	f805 ab01 	strb.w	sl, [r5], #1
 8010592:	1aea      	subs	r2, r5, r3
 8010594:	9b02      	ldr	r3, [sp, #8]
 8010596:	4293      	cmp	r3, r2
 8010598:	dd09      	ble.n	80105ae <_dtoa_r+0xb56>
 801059a:	ee18 1a10 	vmov	r1, s16
 801059e:	2300      	movs	r3, #0
 80105a0:	220a      	movs	r2, #10
 80105a2:	4620      	mov	r0, r4
 80105a4:	f000 f8b4 	bl	8010710 <__multadd>
 80105a8:	ee08 0a10 	vmov	s16, r0
 80105ac:	e7e7      	b.n	801057e <_dtoa_r+0xb26>
 80105ae:	9b02      	ldr	r3, [sp, #8]
 80105b0:	2b00      	cmp	r3, #0
 80105b2:	bfc8      	it	gt
 80105b4:	461d      	movgt	r5, r3
 80105b6:	9b01      	ldr	r3, [sp, #4]
 80105b8:	bfd8      	it	le
 80105ba:	2501      	movle	r5, #1
 80105bc:	441d      	add	r5, r3
 80105be:	f04f 0800 	mov.w	r8, #0
 80105c2:	ee18 1a10 	vmov	r1, s16
 80105c6:	2201      	movs	r2, #1
 80105c8:	4620      	mov	r0, r4
 80105ca:	f000 fa51 	bl	8010a70 <__lshift>
 80105ce:	4631      	mov	r1, r6
 80105d0:	ee08 0a10 	vmov	s16, r0
 80105d4:	f000 fabc 	bl	8010b50 <__mcmp>
 80105d8:	2800      	cmp	r0, #0
 80105da:	dc91      	bgt.n	8010500 <_dtoa_r+0xaa8>
 80105dc:	d102      	bne.n	80105e4 <_dtoa_r+0xb8c>
 80105de:	f01a 0f01 	tst.w	sl, #1
 80105e2:	d18d      	bne.n	8010500 <_dtoa_r+0xaa8>
 80105e4:	462b      	mov	r3, r5
 80105e6:	461d      	mov	r5, r3
 80105e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80105ec:	2a30      	cmp	r2, #48	; 0x30
 80105ee:	d0fa      	beq.n	80105e6 <_dtoa_r+0xb8e>
 80105f0:	e6d7      	b.n	80103a2 <_dtoa_r+0x94a>
 80105f2:	9a01      	ldr	r2, [sp, #4]
 80105f4:	429a      	cmp	r2, r3
 80105f6:	d184      	bne.n	8010502 <_dtoa_r+0xaaa>
 80105f8:	9b00      	ldr	r3, [sp, #0]
 80105fa:	3301      	adds	r3, #1
 80105fc:	9300      	str	r3, [sp, #0]
 80105fe:	2331      	movs	r3, #49	; 0x31
 8010600:	7013      	strb	r3, [r2, #0]
 8010602:	e6ce      	b.n	80103a2 <_dtoa_r+0x94a>
 8010604:	4b09      	ldr	r3, [pc, #36]	; (801062c <_dtoa_r+0xbd4>)
 8010606:	f7ff ba95 	b.w	800fb34 <_dtoa_r+0xdc>
 801060a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801060c:	2b00      	cmp	r3, #0
 801060e:	f47f aa6e 	bne.w	800faee <_dtoa_r+0x96>
 8010612:	4b07      	ldr	r3, [pc, #28]	; (8010630 <_dtoa_r+0xbd8>)
 8010614:	f7ff ba8e 	b.w	800fb34 <_dtoa_r+0xdc>
 8010618:	9b02      	ldr	r3, [sp, #8]
 801061a:	2b00      	cmp	r3, #0
 801061c:	dcae      	bgt.n	801057c <_dtoa_r+0xb24>
 801061e:	9b06      	ldr	r3, [sp, #24]
 8010620:	2b02      	cmp	r3, #2
 8010622:	f73f aea8 	bgt.w	8010376 <_dtoa_r+0x91e>
 8010626:	e7a9      	b.n	801057c <_dtoa_r+0xb24>
 8010628:	08014637 	.word	0x08014637
 801062c:	08014594 	.word	0x08014594
 8010630:	080145b8 	.word	0x080145b8

08010634 <_localeconv_r>:
 8010634:	4800      	ldr	r0, [pc, #0]	; (8010638 <_localeconv_r+0x4>)
 8010636:	4770      	bx	lr
 8010638:	20000170 	.word	0x20000170

0801063c <malloc>:
 801063c:	4b02      	ldr	r3, [pc, #8]	; (8010648 <malloc+0xc>)
 801063e:	4601      	mov	r1, r0
 8010640:	6818      	ldr	r0, [r3, #0]
 8010642:	f000 bc09 	b.w	8010e58 <_malloc_r>
 8010646:	bf00      	nop
 8010648:	2000001c 	.word	0x2000001c

0801064c <_Balloc>:
 801064c:	b570      	push	{r4, r5, r6, lr}
 801064e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010650:	4604      	mov	r4, r0
 8010652:	460d      	mov	r5, r1
 8010654:	b976      	cbnz	r6, 8010674 <_Balloc+0x28>
 8010656:	2010      	movs	r0, #16
 8010658:	f7ff fff0 	bl	801063c <malloc>
 801065c:	4602      	mov	r2, r0
 801065e:	6260      	str	r0, [r4, #36]	; 0x24
 8010660:	b920      	cbnz	r0, 801066c <_Balloc+0x20>
 8010662:	4b18      	ldr	r3, [pc, #96]	; (80106c4 <_Balloc+0x78>)
 8010664:	4818      	ldr	r0, [pc, #96]	; (80106c8 <_Balloc+0x7c>)
 8010666:	2166      	movs	r1, #102	; 0x66
 8010668:	f000 fdd6 	bl	8011218 <__assert_func>
 801066c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010670:	6006      	str	r6, [r0, #0]
 8010672:	60c6      	str	r6, [r0, #12]
 8010674:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8010676:	68f3      	ldr	r3, [r6, #12]
 8010678:	b183      	cbz	r3, 801069c <_Balloc+0x50>
 801067a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801067c:	68db      	ldr	r3, [r3, #12]
 801067e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010682:	b9b8      	cbnz	r0, 80106b4 <_Balloc+0x68>
 8010684:	2101      	movs	r1, #1
 8010686:	fa01 f605 	lsl.w	r6, r1, r5
 801068a:	1d72      	adds	r2, r6, #5
 801068c:	0092      	lsls	r2, r2, #2
 801068e:	4620      	mov	r0, r4
 8010690:	f000 fb60 	bl	8010d54 <_calloc_r>
 8010694:	b160      	cbz	r0, 80106b0 <_Balloc+0x64>
 8010696:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801069a:	e00e      	b.n	80106ba <_Balloc+0x6e>
 801069c:	2221      	movs	r2, #33	; 0x21
 801069e:	2104      	movs	r1, #4
 80106a0:	4620      	mov	r0, r4
 80106a2:	f000 fb57 	bl	8010d54 <_calloc_r>
 80106a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80106a8:	60f0      	str	r0, [r6, #12]
 80106aa:	68db      	ldr	r3, [r3, #12]
 80106ac:	2b00      	cmp	r3, #0
 80106ae:	d1e4      	bne.n	801067a <_Balloc+0x2e>
 80106b0:	2000      	movs	r0, #0
 80106b2:	bd70      	pop	{r4, r5, r6, pc}
 80106b4:	6802      	ldr	r2, [r0, #0]
 80106b6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80106ba:	2300      	movs	r3, #0
 80106bc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80106c0:	e7f7      	b.n	80106b2 <_Balloc+0x66>
 80106c2:	bf00      	nop
 80106c4:	080145c5 	.word	0x080145c5
 80106c8:	08014648 	.word	0x08014648

080106cc <_Bfree>:
 80106cc:	b570      	push	{r4, r5, r6, lr}
 80106ce:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80106d0:	4605      	mov	r5, r0
 80106d2:	460c      	mov	r4, r1
 80106d4:	b976      	cbnz	r6, 80106f4 <_Bfree+0x28>
 80106d6:	2010      	movs	r0, #16
 80106d8:	f7ff ffb0 	bl	801063c <malloc>
 80106dc:	4602      	mov	r2, r0
 80106de:	6268      	str	r0, [r5, #36]	; 0x24
 80106e0:	b920      	cbnz	r0, 80106ec <_Bfree+0x20>
 80106e2:	4b09      	ldr	r3, [pc, #36]	; (8010708 <_Bfree+0x3c>)
 80106e4:	4809      	ldr	r0, [pc, #36]	; (801070c <_Bfree+0x40>)
 80106e6:	218a      	movs	r1, #138	; 0x8a
 80106e8:	f000 fd96 	bl	8011218 <__assert_func>
 80106ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80106f0:	6006      	str	r6, [r0, #0]
 80106f2:	60c6      	str	r6, [r0, #12]
 80106f4:	b13c      	cbz	r4, 8010706 <_Bfree+0x3a>
 80106f6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80106f8:	6862      	ldr	r2, [r4, #4]
 80106fa:	68db      	ldr	r3, [r3, #12]
 80106fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010700:	6021      	str	r1, [r4, #0]
 8010702:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8010706:	bd70      	pop	{r4, r5, r6, pc}
 8010708:	080145c5 	.word	0x080145c5
 801070c:	08014648 	.word	0x08014648

08010710 <__multadd>:
 8010710:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010714:	690d      	ldr	r5, [r1, #16]
 8010716:	4607      	mov	r7, r0
 8010718:	460c      	mov	r4, r1
 801071a:	461e      	mov	r6, r3
 801071c:	f101 0c14 	add.w	ip, r1, #20
 8010720:	2000      	movs	r0, #0
 8010722:	f8dc 3000 	ldr.w	r3, [ip]
 8010726:	b299      	uxth	r1, r3
 8010728:	fb02 6101 	mla	r1, r2, r1, r6
 801072c:	0c1e      	lsrs	r6, r3, #16
 801072e:	0c0b      	lsrs	r3, r1, #16
 8010730:	fb02 3306 	mla	r3, r2, r6, r3
 8010734:	b289      	uxth	r1, r1
 8010736:	3001      	adds	r0, #1
 8010738:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801073c:	4285      	cmp	r5, r0
 801073e:	f84c 1b04 	str.w	r1, [ip], #4
 8010742:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8010746:	dcec      	bgt.n	8010722 <__multadd+0x12>
 8010748:	b30e      	cbz	r6, 801078e <__multadd+0x7e>
 801074a:	68a3      	ldr	r3, [r4, #8]
 801074c:	42ab      	cmp	r3, r5
 801074e:	dc19      	bgt.n	8010784 <__multadd+0x74>
 8010750:	6861      	ldr	r1, [r4, #4]
 8010752:	4638      	mov	r0, r7
 8010754:	3101      	adds	r1, #1
 8010756:	f7ff ff79 	bl	801064c <_Balloc>
 801075a:	4680      	mov	r8, r0
 801075c:	b928      	cbnz	r0, 801076a <__multadd+0x5a>
 801075e:	4602      	mov	r2, r0
 8010760:	4b0c      	ldr	r3, [pc, #48]	; (8010794 <__multadd+0x84>)
 8010762:	480d      	ldr	r0, [pc, #52]	; (8010798 <__multadd+0x88>)
 8010764:	21b5      	movs	r1, #181	; 0xb5
 8010766:	f000 fd57 	bl	8011218 <__assert_func>
 801076a:	6922      	ldr	r2, [r4, #16]
 801076c:	3202      	adds	r2, #2
 801076e:	f104 010c 	add.w	r1, r4, #12
 8010772:	0092      	lsls	r2, r2, #2
 8010774:	300c      	adds	r0, #12
 8010776:	f7fe fc43 	bl	800f000 <memcpy>
 801077a:	4621      	mov	r1, r4
 801077c:	4638      	mov	r0, r7
 801077e:	f7ff ffa5 	bl	80106cc <_Bfree>
 8010782:	4644      	mov	r4, r8
 8010784:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010788:	3501      	adds	r5, #1
 801078a:	615e      	str	r6, [r3, #20]
 801078c:	6125      	str	r5, [r4, #16]
 801078e:	4620      	mov	r0, r4
 8010790:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010794:	08014637 	.word	0x08014637
 8010798:	08014648 	.word	0x08014648

0801079c <__hi0bits>:
 801079c:	0c03      	lsrs	r3, r0, #16
 801079e:	041b      	lsls	r3, r3, #16
 80107a0:	b9d3      	cbnz	r3, 80107d8 <__hi0bits+0x3c>
 80107a2:	0400      	lsls	r0, r0, #16
 80107a4:	2310      	movs	r3, #16
 80107a6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80107aa:	bf04      	itt	eq
 80107ac:	0200      	lsleq	r0, r0, #8
 80107ae:	3308      	addeq	r3, #8
 80107b0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80107b4:	bf04      	itt	eq
 80107b6:	0100      	lsleq	r0, r0, #4
 80107b8:	3304      	addeq	r3, #4
 80107ba:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80107be:	bf04      	itt	eq
 80107c0:	0080      	lsleq	r0, r0, #2
 80107c2:	3302      	addeq	r3, #2
 80107c4:	2800      	cmp	r0, #0
 80107c6:	db05      	blt.n	80107d4 <__hi0bits+0x38>
 80107c8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80107cc:	f103 0301 	add.w	r3, r3, #1
 80107d0:	bf08      	it	eq
 80107d2:	2320      	moveq	r3, #32
 80107d4:	4618      	mov	r0, r3
 80107d6:	4770      	bx	lr
 80107d8:	2300      	movs	r3, #0
 80107da:	e7e4      	b.n	80107a6 <__hi0bits+0xa>

080107dc <__lo0bits>:
 80107dc:	6803      	ldr	r3, [r0, #0]
 80107de:	f013 0207 	ands.w	r2, r3, #7
 80107e2:	4601      	mov	r1, r0
 80107e4:	d00b      	beq.n	80107fe <__lo0bits+0x22>
 80107e6:	07da      	lsls	r2, r3, #31
 80107e8:	d423      	bmi.n	8010832 <__lo0bits+0x56>
 80107ea:	0798      	lsls	r0, r3, #30
 80107ec:	bf49      	itett	mi
 80107ee:	085b      	lsrmi	r3, r3, #1
 80107f0:	089b      	lsrpl	r3, r3, #2
 80107f2:	2001      	movmi	r0, #1
 80107f4:	600b      	strmi	r3, [r1, #0]
 80107f6:	bf5c      	itt	pl
 80107f8:	600b      	strpl	r3, [r1, #0]
 80107fa:	2002      	movpl	r0, #2
 80107fc:	4770      	bx	lr
 80107fe:	b298      	uxth	r0, r3
 8010800:	b9a8      	cbnz	r0, 801082e <__lo0bits+0x52>
 8010802:	0c1b      	lsrs	r3, r3, #16
 8010804:	2010      	movs	r0, #16
 8010806:	b2da      	uxtb	r2, r3
 8010808:	b90a      	cbnz	r2, 801080e <__lo0bits+0x32>
 801080a:	3008      	adds	r0, #8
 801080c:	0a1b      	lsrs	r3, r3, #8
 801080e:	071a      	lsls	r2, r3, #28
 8010810:	bf04      	itt	eq
 8010812:	091b      	lsreq	r3, r3, #4
 8010814:	3004      	addeq	r0, #4
 8010816:	079a      	lsls	r2, r3, #30
 8010818:	bf04      	itt	eq
 801081a:	089b      	lsreq	r3, r3, #2
 801081c:	3002      	addeq	r0, #2
 801081e:	07da      	lsls	r2, r3, #31
 8010820:	d403      	bmi.n	801082a <__lo0bits+0x4e>
 8010822:	085b      	lsrs	r3, r3, #1
 8010824:	f100 0001 	add.w	r0, r0, #1
 8010828:	d005      	beq.n	8010836 <__lo0bits+0x5a>
 801082a:	600b      	str	r3, [r1, #0]
 801082c:	4770      	bx	lr
 801082e:	4610      	mov	r0, r2
 8010830:	e7e9      	b.n	8010806 <__lo0bits+0x2a>
 8010832:	2000      	movs	r0, #0
 8010834:	4770      	bx	lr
 8010836:	2020      	movs	r0, #32
 8010838:	4770      	bx	lr
	...

0801083c <__i2b>:
 801083c:	b510      	push	{r4, lr}
 801083e:	460c      	mov	r4, r1
 8010840:	2101      	movs	r1, #1
 8010842:	f7ff ff03 	bl	801064c <_Balloc>
 8010846:	4602      	mov	r2, r0
 8010848:	b928      	cbnz	r0, 8010856 <__i2b+0x1a>
 801084a:	4b05      	ldr	r3, [pc, #20]	; (8010860 <__i2b+0x24>)
 801084c:	4805      	ldr	r0, [pc, #20]	; (8010864 <__i2b+0x28>)
 801084e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8010852:	f000 fce1 	bl	8011218 <__assert_func>
 8010856:	2301      	movs	r3, #1
 8010858:	6144      	str	r4, [r0, #20]
 801085a:	6103      	str	r3, [r0, #16]
 801085c:	bd10      	pop	{r4, pc}
 801085e:	bf00      	nop
 8010860:	08014637 	.word	0x08014637
 8010864:	08014648 	.word	0x08014648

08010868 <__multiply>:
 8010868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801086c:	4691      	mov	r9, r2
 801086e:	690a      	ldr	r2, [r1, #16]
 8010870:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010874:	429a      	cmp	r2, r3
 8010876:	bfb8      	it	lt
 8010878:	460b      	movlt	r3, r1
 801087a:	460c      	mov	r4, r1
 801087c:	bfbc      	itt	lt
 801087e:	464c      	movlt	r4, r9
 8010880:	4699      	movlt	r9, r3
 8010882:	6927      	ldr	r7, [r4, #16]
 8010884:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8010888:	68a3      	ldr	r3, [r4, #8]
 801088a:	6861      	ldr	r1, [r4, #4]
 801088c:	eb07 060a 	add.w	r6, r7, sl
 8010890:	42b3      	cmp	r3, r6
 8010892:	b085      	sub	sp, #20
 8010894:	bfb8      	it	lt
 8010896:	3101      	addlt	r1, #1
 8010898:	f7ff fed8 	bl	801064c <_Balloc>
 801089c:	b930      	cbnz	r0, 80108ac <__multiply+0x44>
 801089e:	4602      	mov	r2, r0
 80108a0:	4b44      	ldr	r3, [pc, #272]	; (80109b4 <__multiply+0x14c>)
 80108a2:	4845      	ldr	r0, [pc, #276]	; (80109b8 <__multiply+0x150>)
 80108a4:	f240 115d 	movw	r1, #349	; 0x15d
 80108a8:	f000 fcb6 	bl	8011218 <__assert_func>
 80108ac:	f100 0514 	add.w	r5, r0, #20
 80108b0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80108b4:	462b      	mov	r3, r5
 80108b6:	2200      	movs	r2, #0
 80108b8:	4543      	cmp	r3, r8
 80108ba:	d321      	bcc.n	8010900 <__multiply+0x98>
 80108bc:	f104 0314 	add.w	r3, r4, #20
 80108c0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80108c4:	f109 0314 	add.w	r3, r9, #20
 80108c8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80108cc:	9202      	str	r2, [sp, #8]
 80108ce:	1b3a      	subs	r2, r7, r4
 80108d0:	3a15      	subs	r2, #21
 80108d2:	f022 0203 	bic.w	r2, r2, #3
 80108d6:	3204      	adds	r2, #4
 80108d8:	f104 0115 	add.w	r1, r4, #21
 80108dc:	428f      	cmp	r7, r1
 80108de:	bf38      	it	cc
 80108e0:	2204      	movcc	r2, #4
 80108e2:	9201      	str	r2, [sp, #4]
 80108e4:	9a02      	ldr	r2, [sp, #8]
 80108e6:	9303      	str	r3, [sp, #12]
 80108e8:	429a      	cmp	r2, r3
 80108ea:	d80c      	bhi.n	8010906 <__multiply+0x9e>
 80108ec:	2e00      	cmp	r6, #0
 80108ee:	dd03      	ble.n	80108f8 <__multiply+0x90>
 80108f0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80108f4:	2b00      	cmp	r3, #0
 80108f6:	d05a      	beq.n	80109ae <__multiply+0x146>
 80108f8:	6106      	str	r6, [r0, #16]
 80108fa:	b005      	add	sp, #20
 80108fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010900:	f843 2b04 	str.w	r2, [r3], #4
 8010904:	e7d8      	b.n	80108b8 <__multiply+0x50>
 8010906:	f8b3 a000 	ldrh.w	sl, [r3]
 801090a:	f1ba 0f00 	cmp.w	sl, #0
 801090e:	d024      	beq.n	801095a <__multiply+0xf2>
 8010910:	f104 0e14 	add.w	lr, r4, #20
 8010914:	46a9      	mov	r9, r5
 8010916:	f04f 0c00 	mov.w	ip, #0
 801091a:	f85e 2b04 	ldr.w	r2, [lr], #4
 801091e:	f8d9 1000 	ldr.w	r1, [r9]
 8010922:	fa1f fb82 	uxth.w	fp, r2
 8010926:	b289      	uxth	r1, r1
 8010928:	fb0a 110b 	mla	r1, sl, fp, r1
 801092c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8010930:	f8d9 2000 	ldr.w	r2, [r9]
 8010934:	4461      	add	r1, ip
 8010936:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801093a:	fb0a c20b 	mla	r2, sl, fp, ip
 801093e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8010942:	b289      	uxth	r1, r1
 8010944:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8010948:	4577      	cmp	r7, lr
 801094a:	f849 1b04 	str.w	r1, [r9], #4
 801094e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8010952:	d8e2      	bhi.n	801091a <__multiply+0xb2>
 8010954:	9a01      	ldr	r2, [sp, #4]
 8010956:	f845 c002 	str.w	ip, [r5, r2]
 801095a:	9a03      	ldr	r2, [sp, #12]
 801095c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8010960:	3304      	adds	r3, #4
 8010962:	f1b9 0f00 	cmp.w	r9, #0
 8010966:	d020      	beq.n	80109aa <__multiply+0x142>
 8010968:	6829      	ldr	r1, [r5, #0]
 801096a:	f104 0c14 	add.w	ip, r4, #20
 801096e:	46ae      	mov	lr, r5
 8010970:	f04f 0a00 	mov.w	sl, #0
 8010974:	f8bc b000 	ldrh.w	fp, [ip]
 8010978:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801097c:	fb09 220b 	mla	r2, r9, fp, r2
 8010980:	4492      	add	sl, r2
 8010982:	b289      	uxth	r1, r1
 8010984:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8010988:	f84e 1b04 	str.w	r1, [lr], #4
 801098c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8010990:	f8be 1000 	ldrh.w	r1, [lr]
 8010994:	0c12      	lsrs	r2, r2, #16
 8010996:	fb09 1102 	mla	r1, r9, r2, r1
 801099a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 801099e:	4567      	cmp	r7, ip
 80109a0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80109a4:	d8e6      	bhi.n	8010974 <__multiply+0x10c>
 80109a6:	9a01      	ldr	r2, [sp, #4]
 80109a8:	50a9      	str	r1, [r5, r2]
 80109aa:	3504      	adds	r5, #4
 80109ac:	e79a      	b.n	80108e4 <__multiply+0x7c>
 80109ae:	3e01      	subs	r6, #1
 80109b0:	e79c      	b.n	80108ec <__multiply+0x84>
 80109b2:	bf00      	nop
 80109b4:	08014637 	.word	0x08014637
 80109b8:	08014648 	.word	0x08014648

080109bc <__pow5mult>:
 80109bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80109c0:	4615      	mov	r5, r2
 80109c2:	f012 0203 	ands.w	r2, r2, #3
 80109c6:	4606      	mov	r6, r0
 80109c8:	460f      	mov	r7, r1
 80109ca:	d007      	beq.n	80109dc <__pow5mult+0x20>
 80109cc:	4c25      	ldr	r4, [pc, #148]	; (8010a64 <__pow5mult+0xa8>)
 80109ce:	3a01      	subs	r2, #1
 80109d0:	2300      	movs	r3, #0
 80109d2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80109d6:	f7ff fe9b 	bl	8010710 <__multadd>
 80109da:	4607      	mov	r7, r0
 80109dc:	10ad      	asrs	r5, r5, #2
 80109de:	d03d      	beq.n	8010a5c <__pow5mult+0xa0>
 80109e0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80109e2:	b97c      	cbnz	r4, 8010a04 <__pow5mult+0x48>
 80109e4:	2010      	movs	r0, #16
 80109e6:	f7ff fe29 	bl	801063c <malloc>
 80109ea:	4602      	mov	r2, r0
 80109ec:	6270      	str	r0, [r6, #36]	; 0x24
 80109ee:	b928      	cbnz	r0, 80109fc <__pow5mult+0x40>
 80109f0:	4b1d      	ldr	r3, [pc, #116]	; (8010a68 <__pow5mult+0xac>)
 80109f2:	481e      	ldr	r0, [pc, #120]	; (8010a6c <__pow5mult+0xb0>)
 80109f4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80109f8:	f000 fc0e 	bl	8011218 <__assert_func>
 80109fc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010a00:	6004      	str	r4, [r0, #0]
 8010a02:	60c4      	str	r4, [r0, #12]
 8010a04:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8010a08:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010a0c:	b94c      	cbnz	r4, 8010a22 <__pow5mult+0x66>
 8010a0e:	f240 2171 	movw	r1, #625	; 0x271
 8010a12:	4630      	mov	r0, r6
 8010a14:	f7ff ff12 	bl	801083c <__i2b>
 8010a18:	2300      	movs	r3, #0
 8010a1a:	f8c8 0008 	str.w	r0, [r8, #8]
 8010a1e:	4604      	mov	r4, r0
 8010a20:	6003      	str	r3, [r0, #0]
 8010a22:	f04f 0900 	mov.w	r9, #0
 8010a26:	07eb      	lsls	r3, r5, #31
 8010a28:	d50a      	bpl.n	8010a40 <__pow5mult+0x84>
 8010a2a:	4639      	mov	r1, r7
 8010a2c:	4622      	mov	r2, r4
 8010a2e:	4630      	mov	r0, r6
 8010a30:	f7ff ff1a 	bl	8010868 <__multiply>
 8010a34:	4639      	mov	r1, r7
 8010a36:	4680      	mov	r8, r0
 8010a38:	4630      	mov	r0, r6
 8010a3a:	f7ff fe47 	bl	80106cc <_Bfree>
 8010a3e:	4647      	mov	r7, r8
 8010a40:	106d      	asrs	r5, r5, #1
 8010a42:	d00b      	beq.n	8010a5c <__pow5mult+0xa0>
 8010a44:	6820      	ldr	r0, [r4, #0]
 8010a46:	b938      	cbnz	r0, 8010a58 <__pow5mult+0x9c>
 8010a48:	4622      	mov	r2, r4
 8010a4a:	4621      	mov	r1, r4
 8010a4c:	4630      	mov	r0, r6
 8010a4e:	f7ff ff0b 	bl	8010868 <__multiply>
 8010a52:	6020      	str	r0, [r4, #0]
 8010a54:	f8c0 9000 	str.w	r9, [r0]
 8010a58:	4604      	mov	r4, r0
 8010a5a:	e7e4      	b.n	8010a26 <__pow5mult+0x6a>
 8010a5c:	4638      	mov	r0, r7
 8010a5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010a62:	bf00      	nop
 8010a64:	08014798 	.word	0x08014798
 8010a68:	080145c5 	.word	0x080145c5
 8010a6c:	08014648 	.word	0x08014648

08010a70 <__lshift>:
 8010a70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010a74:	460c      	mov	r4, r1
 8010a76:	6849      	ldr	r1, [r1, #4]
 8010a78:	6923      	ldr	r3, [r4, #16]
 8010a7a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8010a7e:	68a3      	ldr	r3, [r4, #8]
 8010a80:	4607      	mov	r7, r0
 8010a82:	4691      	mov	r9, r2
 8010a84:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010a88:	f108 0601 	add.w	r6, r8, #1
 8010a8c:	42b3      	cmp	r3, r6
 8010a8e:	db0b      	blt.n	8010aa8 <__lshift+0x38>
 8010a90:	4638      	mov	r0, r7
 8010a92:	f7ff fddb 	bl	801064c <_Balloc>
 8010a96:	4605      	mov	r5, r0
 8010a98:	b948      	cbnz	r0, 8010aae <__lshift+0x3e>
 8010a9a:	4602      	mov	r2, r0
 8010a9c:	4b2a      	ldr	r3, [pc, #168]	; (8010b48 <__lshift+0xd8>)
 8010a9e:	482b      	ldr	r0, [pc, #172]	; (8010b4c <__lshift+0xdc>)
 8010aa0:	f240 11d9 	movw	r1, #473	; 0x1d9
 8010aa4:	f000 fbb8 	bl	8011218 <__assert_func>
 8010aa8:	3101      	adds	r1, #1
 8010aaa:	005b      	lsls	r3, r3, #1
 8010aac:	e7ee      	b.n	8010a8c <__lshift+0x1c>
 8010aae:	2300      	movs	r3, #0
 8010ab0:	f100 0114 	add.w	r1, r0, #20
 8010ab4:	f100 0210 	add.w	r2, r0, #16
 8010ab8:	4618      	mov	r0, r3
 8010aba:	4553      	cmp	r3, sl
 8010abc:	db37      	blt.n	8010b2e <__lshift+0xbe>
 8010abe:	6920      	ldr	r0, [r4, #16]
 8010ac0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010ac4:	f104 0314 	add.w	r3, r4, #20
 8010ac8:	f019 091f 	ands.w	r9, r9, #31
 8010acc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010ad0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8010ad4:	d02f      	beq.n	8010b36 <__lshift+0xc6>
 8010ad6:	f1c9 0e20 	rsb	lr, r9, #32
 8010ada:	468a      	mov	sl, r1
 8010adc:	f04f 0c00 	mov.w	ip, #0
 8010ae0:	681a      	ldr	r2, [r3, #0]
 8010ae2:	fa02 f209 	lsl.w	r2, r2, r9
 8010ae6:	ea42 020c 	orr.w	r2, r2, ip
 8010aea:	f84a 2b04 	str.w	r2, [sl], #4
 8010aee:	f853 2b04 	ldr.w	r2, [r3], #4
 8010af2:	4298      	cmp	r0, r3
 8010af4:	fa22 fc0e 	lsr.w	ip, r2, lr
 8010af8:	d8f2      	bhi.n	8010ae0 <__lshift+0x70>
 8010afa:	1b03      	subs	r3, r0, r4
 8010afc:	3b15      	subs	r3, #21
 8010afe:	f023 0303 	bic.w	r3, r3, #3
 8010b02:	3304      	adds	r3, #4
 8010b04:	f104 0215 	add.w	r2, r4, #21
 8010b08:	4290      	cmp	r0, r2
 8010b0a:	bf38      	it	cc
 8010b0c:	2304      	movcc	r3, #4
 8010b0e:	f841 c003 	str.w	ip, [r1, r3]
 8010b12:	f1bc 0f00 	cmp.w	ip, #0
 8010b16:	d001      	beq.n	8010b1c <__lshift+0xac>
 8010b18:	f108 0602 	add.w	r6, r8, #2
 8010b1c:	3e01      	subs	r6, #1
 8010b1e:	4638      	mov	r0, r7
 8010b20:	612e      	str	r6, [r5, #16]
 8010b22:	4621      	mov	r1, r4
 8010b24:	f7ff fdd2 	bl	80106cc <_Bfree>
 8010b28:	4628      	mov	r0, r5
 8010b2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010b2e:	f842 0f04 	str.w	r0, [r2, #4]!
 8010b32:	3301      	adds	r3, #1
 8010b34:	e7c1      	b.n	8010aba <__lshift+0x4a>
 8010b36:	3904      	subs	r1, #4
 8010b38:	f853 2b04 	ldr.w	r2, [r3], #4
 8010b3c:	f841 2f04 	str.w	r2, [r1, #4]!
 8010b40:	4298      	cmp	r0, r3
 8010b42:	d8f9      	bhi.n	8010b38 <__lshift+0xc8>
 8010b44:	e7ea      	b.n	8010b1c <__lshift+0xac>
 8010b46:	bf00      	nop
 8010b48:	08014637 	.word	0x08014637
 8010b4c:	08014648 	.word	0x08014648

08010b50 <__mcmp>:
 8010b50:	b530      	push	{r4, r5, lr}
 8010b52:	6902      	ldr	r2, [r0, #16]
 8010b54:	690c      	ldr	r4, [r1, #16]
 8010b56:	1b12      	subs	r2, r2, r4
 8010b58:	d10e      	bne.n	8010b78 <__mcmp+0x28>
 8010b5a:	f100 0314 	add.w	r3, r0, #20
 8010b5e:	3114      	adds	r1, #20
 8010b60:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8010b64:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8010b68:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8010b6c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8010b70:	42a5      	cmp	r5, r4
 8010b72:	d003      	beq.n	8010b7c <__mcmp+0x2c>
 8010b74:	d305      	bcc.n	8010b82 <__mcmp+0x32>
 8010b76:	2201      	movs	r2, #1
 8010b78:	4610      	mov	r0, r2
 8010b7a:	bd30      	pop	{r4, r5, pc}
 8010b7c:	4283      	cmp	r3, r0
 8010b7e:	d3f3      	bcc.n	8010b68 <__mcmp+0x18>
 8010b80:	e7fa      	b.n	8010b78 <__mcmp+0x28>
 8010b82:	f04f 32ff 	mov.w	r2, #4294967295
 8010b86:	e7f7      	b.n	8010b78 <__mcmp+0x28>

08010b88 <__mdiff>:
 8010b88:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b8c:	460c      	mov	r4, r1
 8010b8e:	4606      	mov	r6, r0
 8010b90:	4611      	mov	r1, r2
 8010b92:	4620      	mov	r0, r4
 8010b94:	4690      	mov	r8, r2
 8010b96:	f7ff ffdb 	bl	8010b50 <__mcmp>
 8010b9a:	1e05      	subs	r5, r0, #0
 8010b9c:	d110      	bne.n	8010bc0 <__mdiff+0x38>
 8010b9e:	4629      	mov	r1, r5
 8010ba0:	4630      	mov	r0, r6
 8010ba2:	f7ff fd53 	bl	801064c <_Balloc>
 8010ba6:	b930      	cbnz	r0, 8010bb6 <__mdiff+0x2e>
 8010ba8:	4b3a      	ldr	r3, [pc, #232]	; (8010c94 <__mdiff+0x10c>)
 8010baa:	4602      	mov	r2, r0
 8010bac:	f240 2132 	movw	r1, #562	; 0x232
 8010bb0:	4839      	ldr	r0, [pc, #228]	; (8010c98 <__mdiff+0x110>)
 8010bb2:	f000 fb31 	bl	8011218 <__assert_func>
 8010bb6:	2301      	movs	r3, #1
 8010bb8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010bbc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010bc0:	bfa4      	itt	ge
 8010bc2:	4643      	movge	r3, r8
 8010bc4:	46a0      	movge	r8, r4
 8010bc6:	4630      	mov	r0, r6
 8010bc8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8010bcc:	bfa6      	itte	ge
 8010bce:	461c      	movge	r4, r3
 8010bd0:	2500      	movge	r5, #0
 8010bd2:	2501      	movlt	r5, #1
 8010bd4:	f7ff fd3a 	bl	801064c <_Balloc>
 8010bd8:	b920      	cbnz	r0, 8010be4 <__mdiff+0x5c>
 8010bda:	4b2e      	ldr	r3, [pc, #184]	; (8010c94 <__mdiff+0x10c>)
 8010bdc:	4602      	mov	r2, r0
 8010bde:	f44f 7110 	mov.w	r1, #576	; 0x240
 8010be2:	e7e5      	b.n	8010bb0 <__mdiff+0x28>
 8010be4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8010be8:	6926      	ldr	r6, [r4, #16]
 8010bea:	60c5      	str	r5, [r0, #12]
 8010bec:	f104 0914 	add.w	r9, r4, #20
 8010bf0:	f108 0514 	add.w	r5, r8, #20
 8010bf4:	f100 0e14 	add.w	lr, r0, #20
 8010bf8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8010bfc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8010c00:	f108 0210 	add.w	r2, r8, #16
 8010c04:	46f2      	mov	sl, lr
 8010c06:	2100      	movs	r1, #0
 8010c08:	f859 3b04 	ldr.w	r3, [r9], #4
 8010c0c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8010c10:	fa1f f883 	uxth.w	r8, r3
 8010c14:	fa11 f18b 	uxtah	r1, r1, fp
 8010c18:	0c1b      	lsrs	r3, r3, #16
 8010c1a:	eba1 0808 	sub.w	r8, r1, r8
 8010c1e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8010c22:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8010c26:	fa1f f888 	uxth.w	r8, r8
 8010c2a:	1419      	asrs	r1, r3, #16
 8010c2c:	454e      	cmp	r6, r9
 8010c2e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8010c32:	f84a 3b04 	str.w	r3, [sl], #4
 8010c36:	d8e7      	bhi.n	8010c08 <__mdiff+0x80>
 8010c38:	1b33      	subs	r3, r6, r4
 8010c3a:	3b15      	subs	r3, #21
 8010c3c:	f023 0303 	bic.w	r3, r3, #3
 8010c40:	3304      	adds	r3, #4
 8010c42:	3415      	adds	r4, #21
 8010c44:	42a6      	cmp	r6, r4
 8010c46:	bf38      	it	cc
 8010c48:	2304      	movcc	r3, #4
 8010c4a:	441d      	add	r5, r3
 8010c4c:	4473      	add	r3, lr
 8010c4e:	469e      	mov	lr, r3
 8010c50:	462e      	mov	r6, r5
 8010c52:	4566      	cmp	r6, ip
 8010c54:	d30e      	bcc.n	8010c74 <__mdiff+0xec>
 8010c56:	f10c 0203 	add.w	r2, ip, #3
 8010c5a:	1b52      	subs	r2, r2, r5
 8010c5c:	f022 0203 	bic.w	r2, r2, #3
 8010c60:	3d03      	subs	r5, #3
 8010c62:	45ac      	cmp	ip, r5
 8010c64:	bf38      	it	cc
 8010c66:	2200      	movcc	r2, #0
 8010c68:	441a      	add	r2, r3
 8010c6a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8010c6e:	b17b      	cbz	r3, 8010c90 <__mdiff+0x108>
 8010c70:	6107      	str	r7, [r0, #16]
 8010c72:	e7a3      	b.n	8010bbc <__mdiff+0x34>
 8010c74:	f856 8b04 	ldr.w	r8, [r6], #4
 8010c78:	fa11 f288 	uxtah	r2, r1, r8
 8010c7c:	1414      	asrs	r4, r2, #16
 8010c7e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8010c82:	b292      	uxth	r2, r2
 8010c84:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8010c88:	f84e 2b04 	str.w	r2, [lr], #4
 8010c8c:	1421      	asrs	r1, r4, #16
 8010c8e:	e7e0      	b.n	8010c52 <__mdiff+0xca>
 8010c90:	3f01      	subs	r7, #1
 8010c92:	e7ea      	b.n	8010c6a <__mdiff+0xe2>
 8010c94:	08014637 	.word	0x08014637
 8010c98:	08014648 	.word	0x08014648

08010c9c <__d2b>:
 8010c9c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010ca0:	4689      	mov	r9, r1
 8010ca2:	2101      	movs	r1, #1
 8010ca4:	ec57 6b10 	vmov	r6, r7, d0
 8010ca8:	4690      	mov	r8, r2
 8010caa:	f7ff fccf 	bl	801064c <_Balloc>
 8010cae:	4604      	mov	r4, r0
 8010cb0:	b930      	cbnz	r0, 8010cc0 <__d2b+0x24>
 8010cb2:	4602      	mov	r2, r0
 8010cb4:	4b25      	ldr	r3, [pc, #148]	; (8010d4c <__d2b+0xb0>)
 8010cb6:	4826      	ldr	r0, [pc, #152]	; (8010d50 <__d2b+0xb4>)
 8010cb8:	f240 310a 	movw	r1, #778	; 0x30a
 8010cbc:	f000 faac 	bl	8011218 <__assert_func>
 8010cc0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8010cc4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8010cc8:	bb35      	cbnz	r5, 8010d18 <__d2b+0x7c>
 8010cca:	2e00      	cmp	r6, #0
 8010ccc:	9301      	str	r3, [sp, #4]
 8010cce:	d028      	beq.n	8010d22 <__d2b+0x86>
 8010cd0:	4668      	mov	r0, sp
 8010cd2:	9600      	str	r6, [sp, #0]
 8010cd4:	f7ff fd82 	bl	80107dc <__lo0bits>
 8010cd8:	9900      	ldr	r1, [sp, #0]
 8010cda:	b300      	cbz	r0, 8010d1e <__d2b+0x82>
 8010cdc:	9a01      	ldr	r2, [sp, #4]
 8010cde:	f1c0 0320 	rsb	r3, r0, #32
 8010ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8010ce6:	430b      	orrs	r3, r1
 8010ce8:	40c2      	lsrs	r2, r0
 8010cea:	6163      	str	r3, [r4, #20]
 8010cec:	9201      	str	r2, [sp, #4]
 8010cee:	9b01      	ldr	r3, [sp, #4]
 8010cf0:	61a3      	str	r3, [r4, #24]
 8010cf2:	2b00      	cmp	r3, #0
 8010cf4:	bf14      	ite	ne
 8010cf6:	2202      	movne	r2, #2
 8010cf8:	2201      	moveq	r2, #1
 8010cfa:	6122      	str	r2, [r4, #16]
 8010cfc:	b1d5      	cbz	r5, 8010d34 <__d2b+0x98>
 8010cfe:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8010d02:	4405      	add	r5, r0
 8010d04:	f8c9 5000 	str.w	r5, [r9]
 8010d08:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8010d0c:	f8c8 0000 	str.w	r0, [r8]
 8010d10:	4620      	mov	r0, r4
 8010d12:	b003      	add	sp, #12
 8010d14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010d18:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010d1c:	e7d5      	b.n	8010cca <__d2b+0x2e>
 8010d1e:	6161      	str	r1, [r4, #20]
 8010d20:	e7e5      	b.n	8010cee <__d2b+0x52>
 8010d22:	a801      	add	r0, sp, #4
 8010d24:	f7ff fd5a 	bl	80107dc <__lo0bits>
 8010d28:	9b01      	ldr	r3, [sp, #4]
 8010d2a:	6163      	str	r3, [r4, #20]
 8010d2c:	2201      	movs	r2, #1
 8010d2e:	6122      	str	r2, [r4, #16]
 8010d30:	3020      	adds	r0, #32
 8010d32:	e7e3      	b.n	8010cfc <__d2b+0x60>
 8010d34:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010d38:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8010d3c:	f8c9 0000 	str.w	r0, [r9]
 8010d40:	6918      	ldr	r0, [r3, #16]
 8010d42:	f7ff fd2b 	bl	801079c <__hi0bits>
 8010d46:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8010d4a:	e7df      	b.n	8010d0c <__d2b+0x70>
 8010d4c:	08014637 	.word	0x08014637
 8010d50:	08014648 	.word	0x08014648

08010d54 <_calloc_r>:
 8010d54:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010d56:	fba1 2402 	umull	r2, r4, r1, r2
 8010d5a:	b94c      	cbnz	r4, 8010d70 <_calloc_r+0x1c>
 8010d5c:	4611      	mov	r1, r2
 8010d5e:	9201      	str	r2, [sp, #4]
 8010d60:	f000 f87a 	bl	8010e58 <_malloc_r>
 8010d64:	9a01      	ldr	r2, [sp, #4]
 8010d66:	4605      	mov	r5, r0
 8010d68:	b930      	cbnz	r0, 8010d78 <_calloc_r+0x24>
 8010d6a:	4628      	mov	r0, r5
 8010d6c:	b003      	add	sp, #12
 8010d6e:	bd30      	pop	{r4, r5, pc}
 8010d70:	220c      	movs	r2, #12
 8010d72:	6002      	str	r2, [r0, #0]
 8010d74:	2500      	movs	r5, #0
 8010d76:	e7f8      	b.n	8010d6a <_calloc_r+0x16>
 8010d78:	4621      	mov	r1, r4
 8010d7a:	f7fe f94f 	bl	800f01c <memset>
 8010d7e:	e7f4      	b.n	8010d6a <_calloc_r+0x16>

08010d80 <_free_r>:
 8010d80:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010d82:	2900      	cmp	r1, #0
 8010d84:	d044      	beq.n	8010e10 <_free_r+0x90>
 8010d86:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010d8a:	9001      	str	r0, [sp, #4]
 8010d8c:	2b00      	cmp	r3, #0
 8010d8e:	f1a1 0404 	sub.w	r4, r1, #4
 8010d92:	bfb8      	it	lt
 8010d94:	18e4      	addlt	r4, r4, r3
 8010d96:	f000 fa9b 	bl	80112d0 <__malloc_lock>
 8010d9a:	4a1e      	ldr	r2, [pc, #120]	; (8010e14 <_free_r+0x94>)
 8010d9c:	9801      	ldr	r0, [sp, #4]
 8010d9e:	6813      	ldr	r3, [r2, #0]
 8010da0:	b933      	cbnz	r3, 8010db0 <_free_r+0x30>
 8010da2:	6063      	str	r3, [r4, #4]
 8010da4:	6014      	str	r4, [r2, #0]
 8010da6:	b003      	add	sp, #12
 8010da8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010dac:	f000 ba96 	b.w	80112dc <__malloc_unlock>
 8010db0:	42a3      	cmp	r3, r4
 8010db2:	d908      	bls.n	8010dc6 <_free_r+0x46>
 8010db4:	6825      	ldr	r5, [r4, #0]
 8010db6:	1961      	adds	r1, r4, r5
 8010db8:	428b      	cmp	r3, r1
 8010dba:	bf01      	itttt	eq
 8010dbc:	6819      	ldreq	r1, [r3, #0]
 8010dbe:	685b      	ldreq	r3, [r3, #4]
 8010dc0:	1949      	addeq	r1, r1, r5
 8010dc2:	6021      	streq	r1, [r4, #0]
 8010dc4:	e7ed      	b.n	8010da2 <_free_r+0x22>
 8010dc6:	461a      	mov	r2, r3
 8010dc8:	685b      	ldr	r3, [r3, #4]
 8010dca:	b10b      	cbz	r3, 8010dd0 <_free_r+0x50>
 8010dcc:	42a3      	cmp	r3, r4
 8010dce:	d9fa      	bls.n	8010dc6 <_free_r+0x46>
 8010dd0:	6811      	ldr	r1, [r2, #0]
 8010dd2:	1855      	adds	r5, r2, r1
 8010dd4:	42a5      	cmp	r5, r4
 8010dd6:	d10b      	bne.n	8010df0 <_free_r+0x70>
 8010dd8:	6824      	ldr	r4, [r4, #0]
 8010dda:	4421      	add	r1, r4
 8010ddc:	1854      	adds	r4, r2, r1
 8010dde:	42a3      	cmp	r3, r4
 8010de0:	6011      	str	r1, [r2, #0]
 8010de2:	d1e0      	bne.n	8010da6 <_free_r+0x26>
 8010de4:	681c      	ldr	r4, [r3, #0]
 8010de6:	685b      	ldr	r3, [r3, #4]
 8010de8:	6053      	str	r3, [r2, #4]
 8010dea:	4421      	add	r1, r4
 8010dec:	6011      	str	r1, [r2, #0]
 8010dee:	e7da      	b.n	8010da6 <_free_r+0x26>
 8010df0:	d902      	bls.n	8010df8 <_free_r+0x78>
 8010df2:	230c      	movs	r3, #12
 8010df4:	6003      	str	r3, [r0, #0]
 8010df6:	e7d6      	b.n	8010da6 <_free_r+0x26>
 8010df8:	6825      	ldr	r5, [r4, #0]
 8010dfa:	1961      	adds	r1, r4, r5
 8010dfc:	428b      	cmp	r3, r1
 8010dfe:	bf04      	itt	eq
 8010e00:	6819      	ldreq	r1, [r3, #0]
 8010e02:	685b      	ldreq	r3, [r3, #4]
 8010e04:	6063      	str	r3, [r4, #4]
 8010e06:	bf04      	itt	eq
 8010e08:	1949      	addeq	r1, r1, r5
 8010e0a:	6021      	streq	r1, [r4, #0]
 8010e0c:	6054      	str	r4, [r2, #4]
 8010e0e:	e7ca      	b.n	8010da6 <_free_r+0x26>
 8010e10:	b003      	add	sp, #12
 8010e12:	bd30      	pop	{r4, r5, pc}
 8010e14:	20006874 	.word	0x20006874

08010e18 <sbrk_aligned>:
 8010e18:	b570      	push	{r4, r5, r6, lr}
 8010e1a:	4e0e      	ldr	r6, [pc, #56]	; (8010e54 <sbrk_aligned+0x3c>)
 8010e1c:	460c      	mov	r4, r1
 8010e1e:	6831      	ldr	r1, [r6, #0]
 8010e20:	4605      	mov	r5, r0
 8010e22:	b911      	cbnz	r1, 8010e2a <sbrk_aligned+0x12>
 8010e24:	f000 f9e8 	bl	80111f8 <_sbrk_r>
 8010e28:	6030      	str	r0, [r6, #0]
 8010e2a:	4621      	mov	r1, r4
 8010e2c:	4628      	mov	r0, r5
 8010e2e:	f000 f9e3 	bl	80111f8 <_sbrk_r>
 8010e32:	1c43      	adds	r3, r0, #1
 8010e34:	d00a      	beq.n	8010e4c <sbrk_aligned+0x34>
 8010e36:	1cc4      	adds	r4, r0, #3
 8010e38:	f024 0403 	bic.w	r4, r4, #3
 8010e3c:	42a0      	cmp	r0, r4
 8010e3e:	d007      	beq.n	8010e50 <sbrk_aligned+0x38>
 8010e40:	1a21      	subs	r1, r4, r0
 8010e42:	4628      	mov	r0, r5
 8010e44:	f000 f9d8 	bl	80111f8 <_sbrk_r>
 8010e48:	3001      	adds	r0, #1
 8010e4a:	d101      	bne.n	8010e50 <sbrk_aligned+0x38>
 8010e4c:	f04f 34ff 	mov.w	r4, #4294967295
 8010e50:	4620      	mov	r0, r4
 8010e52:	bd70      	pop	{r4, r5, r6, pc}
 8010e54:	20006878 	.word	0x20006878

08010e58 <_malloc_r>:
 8010e58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010e5c:	1ccd      	adds	r5, r1, #3
 8010e5e:	f025 0503 	bic.w	r5, r5, #3
 8010e62:	3508      	adds	r5, #8
 8010e64:	2d0c      	cmp	r5, #12
 8010e66:	bf38      	it	cc
 8010e68:	250c      	movcc	r5, #12
 8010e6a:	2d00      	cmp	r5, #0
 8010e6c:	4607      	mov	r7, r0
 8010e6e:	db01      	blt.n	8010e74 <_malloc_r+0x1c>
 8010e70:	42a9      	cmp	r1, r5
 8010e72:	d905      	bls.n	8010e80 <_malloc_r+0x28>
 8010e74:	230c      	movs	r3, #12
 8010e76:	603b      	str	r3, [r7, #0]
 8010e78:	2600      	movs	r6, #0
 8010e7a:	4630      	mov	r0, r6
 8010e7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010e80:	4e2e      	ldr	r6, [pc, #184]	; (8010f3c <_malloc_r+0xe4>)
 8010e82:	f000 fa25 	bl	80112d0 <__malloc_lock>
 8010e86:	6833      	ldr	r3, [r6, #0]
 8010e88:	461c      	mov	r4, r3
 8010e8a:	bb34      	cbnz	r4, 8010eda <_malloc_r+0x82>
 8010e8c:	4629      	mov	r1, r5
 8010e8e:	4638      	mov	r0, r7
 8010e90:	f7ff ffc2 	bl	8010e18 <sbrk_aligned>
 8010e94:	1c43      	adds	r3, r0, #1
 8010e96:	4604      	mov	r4, r0
 8010e98:	d14d      	bne.n	8010f36 <_malloc_r+0xde>
 8010e9a:	6834      	ldr	r4, [r6, #0]
 8010e9c:	4626      	mov	r6, r4
 8010e9e:	2e00      	cmp	r6, #0
 8010ea0:	d140      	bne.n	8010f24 <_malloc_r+0xcc>
 8010ea2:	6823      	ldr	r3, [r4, #0]
 8010ea4:	4631      	mov	r1, r6
 8010ea6:	4638      	mov	r0, r7
 8010ea8:	eb04 0803 	add.w	r8, r4, r3
 8010eac:	f000 f9a4 	bl	80111f8 <_sbrk_r>
 8010eb0:	4580      	cmp	r8, r0
 8010eb2:	d13a      	bne.n	8010f2a <_malloc_r+0xd2>
 8010eb4:	6821      	ldr	r1, [r4, #0]
 8010eb6:	3503      	adds	r5, #3
 8010eb8:	1a6d      	subs	r5, r5, r1
 8010eba:	f025 0503 	bic.w	r5, r5, #3
 8010ebe:	3508      	adds	r5, #8
 8010ec0:	2d0c      	cmp	r5, #12
 8010ec2:	bf38      	it	cc
 8010ec4:	250c      	movcc	r5, #12
 8010ec6:	4629      	mov	r1, r5
 8010ec8:	4638      	mov	r0, r7
 8010eca:	f7ff ffa5 	bl	8010e18 <sbrk_aligned>
 8010ece:	3001      	adds	r0, #1
 8010ed0:	d02b      	beq.n	8010f2a <_malloc_r+0xd2>
 8010ed2:	6823      	ldr	r3, [r4, #0]
 8010ed4:	442b      	add	r3, r5
 8010ed6:	6023      	str	r3, [r4, #0]
 8010ed8:	e00e      	b.n	8010ef8 <_malloc_r+0xa0>
 8010eda:	6822      	ldr	r2, [r4, #0]
 8010edc:	1b52      	subs	r2, r2, r5
 8010ede:	d41e      	bmi.n	8010f1e <_malloc_r+0xc6>
 8010ee0:	2a0b      	cmp	r2, #11
 8010ee2:	d916      	bls.n	8010f12 <_malloc_r+0xba>
 8010ee4:	1961      	adds	r1, r4, r5
 8010ee6:	42a3      	cmp	r3, r4
 8010ee8:	6025      	str	r5, [r4, #0]
 8010eea:	bf18      	it	ne
 8010eec:	6059      	strne	r1, [r3, #4]
 8010eee:	6863      	ldr	r3, [r4, #4]
 8010ef0:	bf08      	it	eq
 8010ef2:	6031      	streq	r1, [r6, #0]
 8010ef4:	5162      	str	r2, [r4, r5]
 8010ef6:	604b      	str	r3, [r1, #4]
 8010ef8:	4638      	mov	r0, r7
 8010efa:	f104 060b 	add.w	r6, r4, #11
 8010efe:	f000 f9ed 	bl	80112dc <__malloc_unlock>
 8010f02:	f026 0607 	bic.w	r6, r6, #7
 8010f06:	1d23      	adds	r3, r4, #4
 8010f08:	1af2      	subs	r2, r6, r3
 8010f0a:	d0b6      	beq.n	8010e7a <_malloc_r+0x22>
 8010f0c:	1b9b      	subs	r3, r3, r6
 8010f0e:	50a3      	str	r3, [r4, r2]
 8010f10:	e7b3      	b.n	8010e7a <_malloc_r+0x22>
 8010f12:	6862      	ldr	r2, [r4, #4]
 8010f14:	42a3      	cmp	r3, r4
 8010f16:	bf0c      	ite	eq
 8010f18:	6032      	streq	r2, [r6, #0]
 8010f1a:	605a      	strne	r2, [r3, #4]
 8010f1c:	e7ec      	b.n	8010ef8 <_malloc_r+0xa0>
 8010f1e:	4623      	mov	r3, r4
 8010f20:	6864      	ldr	r4, [r4, #4]
 8010f22:	e7b2      	b.n	8010e8a <_malloc_r+0x32>
 8010f24:	4634      	mov	r4, r6
 8010f26:	6876      	ldr	r6, [r6, #4]
 8010f28:	e7b9      	b.n	8010e9e <_malloc_r+0x46>
 8010f2a:	230c      	movs	r3, #12
 8010f2c:	603b      	str	r3, [r7, #0]
 8010f2e:	4638      	mov	r0, r7
 8010f30:	f000 f9d4 	bl	80112dc <__malloc_unlock>
 8010f34:	e7a1      	b.n	8010e7a <_malloc_r+0x22>
 8010f36:	6025      	str	r5, [r4, #0]
 8010f38:	e7de      	b.n	8010ef8 <_malloc_r+0xa0>
 8010f3a:	bf00      	nop
 8010f3c:	20006874 	.word	0x20006874

08010f40 <__ssputs_r>:
 8010f40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010f44:	688e      	ldr	r6, [r1, #8]
 8010f46:	429e      	cmp	r6, r3
 8010f48:	4682      	mov	sl, r0
 8010f4a:	460c      	mov	r4, r1
 8010f4c:	4690      	mov	r8, r2
 8010f4e:	461f      	mov	r7, r3
 8010f50:	d838      	bhi.n	8010fc4 <__ssputs_r+0x84>
 8010f52:	898a      	ldrh	r2, [r1, #12]
 8010f54:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010f58:	d032      	beq.n	8010fc0 <__ssputs_r+0x80>
 8010f5a:	6825      	ldr	r5, [r4, #0]
 8010f5c:	6909      	ldr	r1, [r1, #16]
 8010f5e:	eba5 0901 	sub.w	r9, r5, r1
 8010f62:	6965      	ldr	r5, [r4, #20]
 8010f64:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010f68:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010f6c:	3301      	adds	r3, #1
 8010f6e:	444b      	add	r3, r9
 8010f70:	106d      	asrs	r5, r5, #1
 8010f72:	429d      	cmp	r5, r3
 8010f74:	bf38      	it	cc
 8010f76:	461d      	movcc	r5, r3
 8010f78:	0553      	lsls	r3, r2, #21
 8010f7a:	d531      	bpl.n	8010fe0 <__ssputs_r+0xa0>
 8010f7c:	4629      	mov	r1, r5
 8010f7e:	f7ff ff6b 	bl	8010e58 <_malloc_r>
 8010f82:	4606      	mov	r6, r0
 8010f84:	b950      	cbnz	r0, 8010f9c <__ssputs_r+0x5c>
 8010f86:	230c      	movs	r3, #12
 8010f88:	f8ca 3000 	str.w	r3, [sl]
 8010f8c:	89a3      	ldrh	r3, [r4, #12]
 8010f8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010f92:	81a3      	strh	r3, [r4, #12]
 8010f94:	f04f 30ff 	mov.w	r0, #4294967295
 8010f98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010f9c:	6921      	ldr	r1, [r4, #16]
 8010f9e:	464a      	mov	r2, r9
 8010fa0:	f7fe f82e 	bl	800f000 <memcpy>
 8010fa4:	89a3      	ldrh	r3, [r4, #12]
 8010fa6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010faa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010fae:	81a3      	strh	r3, [r4, #12]
 8010fb0:	6126      	str	r6, [r4, #16]
 8010fb2:	6165      	str	r5, [r4, #20]
 8010fb4:	444e      	add	r6, r9
 8010fb6:	eba5 0509 	sub.w	r5, r5, r9
 8010fba:	6026      	str	r6, [r4, #0]
 8010fbc:	60a5      	str	r5, [r4, #8]
 8010fbe:	463e      	mov	r6, r7
 8010fc0:	42be      	cmp	r6, r7
 8010fc2:	d900      	bls.n	8010fc6 <__ssputs_r+0x86>
 8010fc4:	463e      	mov	r6, r7
 8010fc6:	6820      	ldr	r0, [r4, #0]
 8010fc8:	4632      	mov	r2, r6
 8010fca:	4641      	mov	r1, r8
 8010fcc:	f000 f966 	bl	801129c <memmove>
 8010fd0:	68a3      	ldr	r3, [r4, #8]
 8010fd2:	1b9b      	subs	r3, r3, r6
 8010fd4:	60a3      	str	r3, [r4, #8]
 8010fd6:	6823      	ldr	r3, [r4, #0]
 8010fd8:	4433      	add	r3, r6
 8010fda:	6023      	str	r3, [r4, #0]
 8010fdc:	2000      	movs	r0, #0
 8010fde:	e7db      	b.n	8010f98 <__ssputs_r+0x58>
 8010fe0:	462a      	mov	r2, r5
 8010fe2:	f000 f981 	bl	80112e8 <_realloc_r>
 8010fe6:	4606      	mov	r6, r0
 8010fe8:	2800      	cmp	r0, #0
 8010fea:	d1e1      	bne.n	8010fb0 <__ssputs_r+0x70>
 8010fec:	6921      	ldr	r1, [r4, #16]
 8010fee:	4650      	mov	r0, sl
 8010ff0:	f7ff fec6 	bl	8010d80 <_free_r>
 8010ff4:	e7c7      	b.n	8010f86 <__ssputs_r+0x46>
	...

08010ff8 <_svfiprintf_r>:
 8010ff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ffc:	4698      	mov	r8, r3
 8010ffe:	898b      	ldrh	r3, [r1, #12]
 8011000:	061b      	lsls	r3, r3, #24
 8011002:	b09d      	sub	sp, #116	; 0x74
 8011004:	4607      	mov	r7, r0
 8011006:	460d      	mov	r5, r1
 8011008:	4614      	mov	r4, r2
 801100a:	d50e      	bpl.n	801102a <_svfiprintf_r+0x32>
 801100c:	690b      	ldr	r3, [r1, #16]
 801100e:	b963      	cbnz	r3, 801102a <_svfiprintf_r+0x32>
 8011010:	2140      	movs	r1, #64	; 0x40
 8011012:	f7ff ff21 	bl	8010e58 <_malloc_r>
 8011016:	6028      	str	r0, [r5, #0]
 8011018:	6128      	str	r0, [r5, #16]
 801101a:	b920      	cbnz	r0, 8011026 <_svfiprintf_r+0x2e>
 801101c:	230c      	movs	r3, #12
 801101e:	603b      	str	r3, [r7, #0]
 8011020:	f04f 30ff 	mov.w	r0, #4294967295
 8011024:	e0d1      	b.n	80111ca <_svfiprintf_r+0x1d2>
 8011026:	2340      	movs	r3, #64	; 0x40
 8011028:	616b      	str	r3, [r5, #20]
 801102a:	2300      	movs	r3, #0
 801102c:	9309      	str	r3, [sp, #36]	; 0x24
 801102e:	2320      	movs	r3, #32
 8011030:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011034:	f8cd 800c 	str.w	r8, [sp, #12]
 8011038:	2330      	movs	r3, #48	; 0x30
 801103a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80111e4 <_svfiprintf_r+0x1ec>
 801103e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011042:	f04f 0901 	mov.w	r9, #1
 8011046:	4623      	mov	r3, r4
 8011048:	469a      	mov	sl, r3
 801104a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801104e:	b10a      	cbz	r2, 8011054 <_svfiprintf_r+0x5c>
 8011050:	2a25      	cmp	r2, #37	; 0x25
 8011052:	d1f9      	bne.n	8011048 <_svfiprintf_r+0x50>
 8011054:	ebba 0b04 	subs.w	fp, sl, r4
 8011058:	d00b      	beq.n	8011072 <_svfiprintf_r+0x7a>
 801105a:	465b      	mov	r3, fp
 801105c:	4622      	mov	r2, r4
 801105e:	4629      	mov	r1, r5
 8011060:	4638      	mov	r0, r7
 8011062:	f7ff ff6d 	bl	8010f40 <__ssputs_r>
 8011066:	3001      	adds	r0, #1
 8011068:	f000 80aa 	beq.w	80111c0 <_svfiprintf_r+0x1c8>
 801106c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801106e:	445a      	add	r2, fp
 8011070:	9209      	str	r2, [sp, #36]	; 0x24
 8011072:	f89a 3000 	ldrb.w	r3, [sl]
 8011076:	2b00      	cmp	r3, #0
 8011078:	f000 80a2 	beq.w	80111c0 <_svfiprintf_r+0x1c8>
 801107c:	2300      	movs	r3, #0
 801107e:	f04f 32ff 	mov.w	r2, #4294967295
 8011082:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011086:	f10a 0a01 	add.w	sl, sl, #1
 801108a:	9304      	str	r3, [sp, #16]
 801108c:	9307      	str	r3, [sp, #28]
 801108e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011092:	931a      	str	r3, [sp, #104]	; 0x68
 8011094:	4654      	mov	r4, sl
 8011096:	2205      	movs	r2, #5
 8011098:	f814 1b01 	ldrb.w	r1, [r4], #1
 801109c:	4851      	ldr	r0, [pc, #324]	; (80111e4 <_svfiprintf_r+0x1ec>)
 801109e:	f7ef f89f 	bl	80001e0 <memchr>
 80110a2:	9a04      	ldr	r2, [sp, #16]
 80110a4:	b9d8      	cbnz	r0, 80110de <_svfiprintf_r+0xe6>
 80110a6:	06d0      	lsls	r0, r2, #27
 80110a8:	bf44      	itt	mi
 80110aa:	2320      	movmi	r3, #32
 80110ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80110b0:	0711      	lsls	r1, r2, #28
 80110b2:	bf44      	itt	mi
 80110b4:	232b      	movmi	r3, #43	; 0x2b
 80110b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80110ba:	f89a 3000 	ldrb.w	r3, [sl]
 80110be:	2b2a      	cmp	r3, #42	; 0x2a
 80110c0:	d015      	beq.n	80110ee <_svfiprintf_r+0xf6>
 80110c2:	9a07      	ldr	r2, [sp, #28]
 80110c4:	4654      	mov	r4, sl
 80110c6:	2000      	movs	r0, #0
 80110c8:	f04f 0c0a 	mov.w	ip, #10
 80110cc:	4621      	mov	r1, r4
 80110ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 80110d2:	3b30      	subs	r3, #48	; 0x30
 80110d4:	2b09      	cmp	r3, #9
 80110d6:	d94e      	bls.n	8011176 <_svfiprintf_r+0x17e>
 80110d8:	b1b0      	cbz	r0, 8011108 <_svfiprintf_r+0x110>
 80110da:	9207      	str	r2, [sp, #28]
 80110dc:	e014      	b.n	8011108 <_svfiprintf_r+0x110>
 80110de:	eba0 0308 	sub.w	r3, r0, r8
 80110e2:	fa09 f303 	lsl.w	r3, r9, r3
 80110e6:	4313      	orrs	r3, r2
 80110e8:	9304      	str	r3, [sp, #16]
 80110ea:	46a2      	mov	sl, r4
 80110ec:	e7d2      	b.n	8011094 <_svfiprintf_r+0x9c>
 80110ee:	9b03      	ldr	r3, [sp, #12]
 80110f0:	1d19      	adds	r1, r3, #4
 80110f2:	681b      	ldr	r3, [r3, #0]
 80110f4:	9103      	str	r1, [sp, #12]
 80110f6:	2b00      	cmp	r3, #0
 80110f8:	bfbb      	ittet	lt
 80110fa:	425b      	neglt	r3, r3
 80110fc:	f042 0202 	orrlt.w	r2, r2, #2
 8011100:	9307      	strge	r3, [sp, #28]
 8011102:	9307      	strlt	r3, [sp, #28]
 8011104:	bfb8      	it	lt
 8011106:	9204      	strlt	r2, [sp, #16]
 8011108:	7823      	ldrb	r3, [r4, #0]
 801110a:	2b2e      	cmp	r3, #46	; 0x2e
 801110c:	d10c      	bne.n	8011128 <_svfiprintf_r+0x130>
 801110e:	7863      	ldrb	r3, [r4, #1]
 8011110:	2b2a      	cmp	r3, #42	; 0x2a
 8011112:	d135      	bne.n	8011180 <_svfiprintf_r+0x188>
 8011114:	9b03      	ldr	r3, [sp, #12]
 8011116:	1d1a      	adds	r2, r3, #4
 8011118:	681b      	ldr	r3, [r3, #0]
 801111a:	9203      	str	r2, [sp, #12]
 801111c:	2b00      	cmp	r3, #0
 801111e:	bfb8      	it	lt
 8011120:	f04f 33ff 	movlt.w	r3, #4294967295
 8011124:	3402      	adds	r4, #2
 8011126:	9305      	str	r3, [sp, #20]
 8011128:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80111f4 <_svfiprintf_r+0x1fc>
 801112c:	7821      	ldrb	r1, [r4, #0]
 801112e:	2203      	movs	r2, #3
 8011130:	4650      	mov	r0, sl
 8011132:	f7ef f855 	bl	80001e0 <memchr>
 8011136:	b140      	cbz	r0, 801114a <_svfiprintf_r+0x152>
 8011138:	2340      	movs	r3, #64	; 0x40
 801113a:	eba0 000a 	sub.w	r0, r0, sl
 801113e:	fa03 f000 	lsl.w	r0, r3, r0
 8011142:	9b04      	ldr	r3, [sp, #16]
 8011144:	4303      	orrs	r3, r0
 8011146:	3401      	adds	r4, #1
 8011148:	9304      	str	r3, [sp, #16]
 801114a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801114e:	4826      	ldr	r0, [pc, #152]	; (80111e8 <_svfiprintf_r+0x1f0>)
 8011150:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011154:	2206      	movs	r2, #6
 8011156:	f7ef f843 	bl	80001e0 <memchr>
 801115a:	2800      	cmp	r0, #0
 801115c:	d038      	beq.n	80111d0 <_svfiprintf_r+0x1d8>
 801115e:	4b23      	ldr	r3, [pc, #140]	; (80111ec <_svfiprintf_r+0x1f4>)
 8011160:	bb1b      	cbnz	r3, 80111aa <_svfiprintf_r+0x1b2>
 8011162:	9b03      	ldr	r3, [sp, #12]
 8011164:	3307      	adds	r3, #7
 8011166:	f023 0307 	bic.w	r3, r3, #7
 801116a:	3308      	adds	r3, #8
 801116c:	9303      	str	r3, [sp, #12]
 801116e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011170:	4433      	add	r3, r6
 8011172:	9309      	str	r3, [sp, #36]	; 0x24
 8011174:	e767      	b.n	8011046 <_svfiprintf_r+0x4e>
 8011176:	fb0c 3202 	mla	r2, ip, r2, r3
 801117a:	460c      	mov	r4, r1
 801117c:	2001      	movs	r0, #1
 801117e:	e7a5      	b.n	80110cc <_svfiprintf_r+0xd4>
 8011180:	2300      	movs	r3, #0
 8011182:	3401      	adds	r4, #1
 8011184:	9305      	str	r3, [sp, #20]
 8011186:	4619      	mov	r1, r3
 8011188:	f04f 0c0a 	mov.w	ip, #10
 801118c:	4620      	mov	r0, r4
 801118e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011192:	3a30      	subs	r2, #48	; 0x30
 8011194:	2a09      	cmp	r2, #9
 8011196:	d903      	bls.n	80111a0 <_svfiprintf_r+0x1a8>
 8011198:	2b00      	cmp	r3, #0
 801119a:	d0c5      	beq.n	8011128 <_svfiprintf_r+0x130>
 801119c:	9105      	str	r1, [sp, #20]
 801119e:	e7c3      	b.n	8011128 <_svfiprintf_r+0x130>
 80111a0:	fb0c 2101 	mla	r1, ip, r1, r2
 80111a4:	4604      	mov	r4, r0
 80111a6:	2301      	movs	r3, #1
 80111a8:	e7f0      	b.n	801118c <_svfiprintf_r+0x194>
 80111aa:	ab03      	add	r3, sp, #12
 80111ac:	9300      	str	r3, [sp, #0]
 80111ae:	462a      	mov	r2, r5
 80111b0:	4b0f      	ldr	r3, [pc, #60]	; (80111f0 <_svfiprintf_r+0x1f8>)
 80111b2:	a904      	add	r1, sp, #16
 80111b4:	4638      	mov	r0, r7
 80111b6:	f7fd ffd9 	bl	800f16c <_printf_float>
 80111ba:	1c42      	adds	r2, r0, #1
 80111bc:	4606      	mov	r6, r0
 80111be:	d1d6      	bne.n	801116e <_svfiprintf_r+0x176>
 80111c0:	89ab      	ldrh	r3, [r5, #12]
 80111c2:	065b      	lsls	r3, r3, #25
 80111c4:	f53f af2c 	bmi.w	8011020 <_svfiprintf_r+0x28>
 80111c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80111ca:	b01d      	add	sp, #116	; 0x74
 80111cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80111d0:	ab03      	add	r3, sp, #12
 80111d2:	9300      	str	r3, [sp, #0]
 80111d4:	462a      	mov	r2, r5
 80111d6:	4b06      	ldr	r3, [pc, #24]	; (80111f0 <_svfiprintf_r+0x1f8>)
 80111d8:	a904      	add	r1, sp, #16
 80111da:	4638      	mov	r0, r7
 80111dc:	f7fe fa6a 	bl	800f6b4 <_printf_i>
 80111e0:	e7eb      	b.n	80111ba <_svfiprintf_r+0x1c2>
 80111e2:	bf00      	nop
 80111e4:	080147a4 	.word	0x080147a4
 80111e8:	080147ae 	.word	0x080147ae
 80111ec:	0800f16d 	.word	0x0800f16d
 80111f0:	08010f41 	.word	0x08010f41
 80111f4:	080147aa 	.word	0x080147aa

080111f8 <_sbrk_r>:
 80111f8:	b538      	push	{r3, r4, r5, lr}
 80111fa:	4d06      	ldr	r5, [pc, #24]	; (8011214 <_sbrk_r+0x1c>)
 80111fc:	2300      	movs	r3, #0
 80111fe:	4604      	mov	r4, r0
 8011200:	4608      	mov	r0, r1
 8011202:	602b      	str	r3, [r5, #0]
 8011204:	f7f3 f8e0 	bl	80043c8 <_sbrk>
 8011208:	1c43      	adds	r3, r0, #1
 801120a:	d102      	bne.n	8011212 <_sbrk_r+0x1a>
 801120c:	682b      	ldr	r3, [r5, #0]
 801120e:	b103      	cbz	r3, 8011212 <_sbrk_r+0x1a>
 8011210:	6023      	str	r3, [r4, #0]
 8011212:	bd38      	pop	{r3, r4, r5, pc}
 8011214:	2000687c 	.word	0x2000687c

08011218 <__assert_func>:
 8011218:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801121a:	4614      	mov	r4, r2
 801121c:	461a      	mov	r2, r3
 801121e:	4b09      	ldr	r3, [pc, #36]	; (8011244 <__assert_func+0x2c>)
 8011220:	681b      	ldr	r3, [r3, #0]
 8011222:	4605      	mov	r5, r0
 8011224:	68d8      	ldr	r0, [r3, #12]
 8011226:	b14c      	cbz	r4, 801123c <__assert_func+0x24>
 8011228:	4b07      	ldr	r3, [pc, #28]	; (8011248 <__assert_func+0x30>)
 801122a:	9100      	str	r1, [sp, #0]
 801122c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011230:	4906      	ldr	r1, [pc, #24]	; (801124c <__assert_func+0x34>)
 8011232:	462b      	mov	r3, r5
 8011234:	f000 f80e 	bl	8011254 <fiprintf>
 8011238:	f000 faac 	bl	8011794 <abort>
 801123c:	4b04      	ldr	r3, [pc, #16]	; (8011250 <__assert_func+0x38>)
 801123e:	461c      	mov	r4, r3
 8011240:	e7f3      	b.n	801122a <__assert_func+0x12>
 8011242:	bf00      	nop
 8011244:	2000001c 	.word	0x2000001c
 8011248:	080147b5 	.word	0x080147b5
 801124c:	080147c2 	.word	0x080147c2
 8011250:	080147f0 	.word	0x080147f0

08011254 <fiprintf>:
 8011254:	b40e      	push	{r1, r2, r3}
 8011256:	b503      	push	{r0, r1, lr}
 8011258:	4601      	mov	r1, r0
 801125a:	ab03      	add	r3, sp, #12
 801125c:	4805      	ldr	r0, [pc, #20]	; (8011274 <fiprintf+0x20>)
 801125e:	f853 2b04 	ldr.w	r2, [r3], #4
 8011262:	6800      	ldr	r0, [r0, #0]
 8011264:	9301      	str	r3, [sp, #4]
 8011266:	f000 f897 	bl	8011398 <_vfiprintf_r>
 801126a:	b002      	add	sp, #8
 801126c:	f85d eb04 	ldr.w	lr, [sp], #4
 8011270:	b003      	add	sp, #12
 8011272:	4770      	bx	lr
 8011274:	2000001c 	.word	0x2000001c

08011278 <__ascii_mbtowc>:
 8011278:	b082      	sub	sp, #8
 801127a:	b901      	cbnz	r1, 801127e <__ascii_mbtowc+0x6>
 801127c:	a901      	add	r1, sp, #4
 801127e:	b142      	cbz	r2, 8011292 <__ascii_mbtowc+0x1a>
 8011280:	b14b      	cbz	r3, 8011296 <__ascii_mbtowc+0x1e>
 8011282:	7813      	ldrb	r3, [r2, #0]
 8011284:	600b      	str	r3, [r1, #0]
 8011286:	7812      	ldrb	r2, [r2, #0]
 8011288:	1e10      	subs	r0, r2, #0
 801128a:	bf18      	it	ne
 801128c:	2001      	movne	r0, #1
 801128e:	b002      	add	sp, #8
 8011290:	4770      	bx	lr
 8011292:	4610      	mov	r0, r2
 8011294:	e7fb      	b.n	801128e <__ascii_mbtowc+0x16>
 8011296:	f06f 0001 	mvn.w	r0, #1
 801129a:	e7f8      	b.n	801128e <__ascii_mbtowc+0x16>

0801129c <memmove>:
 801129c:	4288      	cmp	r0, r1
 801129e:	b510      	push	{r4, lr}
 80112a0:	eb01 0402 	add.w	r4, r1, r2
 80112a4:	d902      	bls.n	80112ac <memmove+0x10>
 80112a6:	4284      	cmp	r4, r0
 80112a8:	4623      	mov	r3, r4
 80112aa:	d807      	bhi.n	80112bc <memmove+0x20>
 80112ac:	1e43      	subs	r3, r0, #1
 80112ae:	42a1      	cmp	r1, r4
 80112b0:	d008      	beq.n	80112c4 <memmove+0x28>
 80112b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80112b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80112ba:	e7f8      	b.n	80112ae <memmove+0x12>
 80112bc:	4402      	add	r2, r0
 80112be:	4601      	mov	r1, r0
 80112c0:	428a      	cmp	r2, r1
 80112c2:	d100      	bne.n	80112c6 <memmove+0x2a>
 80112c4:	bd10      	pop	{r4, pc}
 80112c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80112ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80112ce:	e7f7      	b.n	80112c0 <memmove+0x24>

080112d0 <__malloc_lock>:
 80112d0:	4801      	ldr	r0, [pc, #4]	; (80112d8 <__malloc_lock+0x8>)
 80112d2:	f000 bc1f 	b.w	8011b14 <__retarget_lock_acquire_recursive>
 80112d6:	bf00      	nop
 80112d8:	20006880 	.word	0x20006880

080112dc <__malloc_unlock>:
 80112dc:	4801      	ldr	r0, [pc, #4]	; (80112e4 <__malloc_unlock+0x8>)
 80112de:	f000 bc1a 	b.w	8011b16 <__retarget_lock_release_recursive>
 80112e2:	bf00      	nop
 80112e4:	20006880 	.word	0x20006880

080112e8 <_realloc_r>:
 80112e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80112ec:	4680      	mov	r8, r0
 80112ee:	4614      	mov	r4, r2
 80112f0:	460e      	mov	r6, r1
 80112f2:	b921      	cbnz	r1, 80112fe <_realloc_r+0x16>
 80112f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80112f8:	4611      	mov	r1, r2
 80112fa:	f7ff bdad 	b.w	8010e58 <_malloc_r>
 80112fe:	b92a      	cbnz	r2, 801130c <_realloc_r+0x24>
 8011300:	f7ff fd3e 	bl	8010d80 <_free_r>
 8011304:	4625      	mov	r5, r4
 8011306:	4628      	mov	r0, r5
 8011308:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801130c:	f000 fc6a 	bl	8011be4 <_malloc_usable_size_r>
 8011310:	4284      	cmp	r4, r0
 8011312:	4607      	mov	r7, r0
 8011314:	d802      	bhi.n	801131c <_realloc_r+0x34>
 8011316:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801131a:	d812      	bhi.n	8011342 <_realloc_r+0x5a>
 801131c:	4621      	mov	r1, r4
 801131e:	4640      	mov	r0, r8
 8011320:	f7ff fd9a 	bl	8010e58 <_malloc_r>
 8011324:	4605      	mov	r5, r0
 8011326:	2800      	cmp	r0, #0
 8011328:	d0ed      	beq.n	8011306 <_realloc_r+0x1e>
 801132a:	42bc      	cmp	r4, r7
 801132c:	4622      	mov	r2, r4
 801132e:	4631      	mov	r1, r6
 8011330:	bf28      	it	cs
 8011332:	463a      	movcs	r2, r7
 8011334:	f7fd fe64 	bl	800f000 <memcpy>
 8011338:	4631      	mov	r1, r6
 801133a:	4640      	mov	r0, r8
 801133c:	f7ff fd20 	bl	8010d80 <_free_r>
 8011340:	e7e1      	b.n	8011306 <_realloc_r+0x1e>
 8011342:	4635      	mov	r5, r6
 8011344:	e7df      	b.n	8011306 <_realloc_r+0x1e>

08011346 <__sfputc_r>:
 8011346:	6893      	ldr	r3, [r2, #8]
 8011348:	3b01      	subs	r3, #1
 801134a:	2b00      	cmp	r3, #0
 801134c:	b410      	push	{r4}
 801134e:	6093      	str	r3, [r2, #8]
 8011350:	da08      	bge.n	8011364 <__sfputc_r+0x1e>
 8011352:	6994      	ldr	r4, [r2, #24]
 8011354:	42a3      	cmp	r3, r4
 8011356:	db01      	blt.n	801135c <__sfputc_r+0x16>
 8011358:	290a      	cmp	r1, #10
 801135a:	d103      	bne.n	8011364 <__sfputc_r+0x1e>
 801135c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011360:	f000 b94a 	b.w	80115f8 <__swbuf_r>
 8011364:	6813      	ldr	r3, [r2, #0]
 8011366:	1c58      	adds	r0, r3, #1
 8011368:	6010      	str	r0, [r2, #0]
 801136a:	7019      	strb	r1, [r3, #0]
 801136c:	4608      	mov	r0, r1
 801136e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011372:	4770      	bx	lr

08011374 <__sfputs_r>:
 8011374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011376:	4606      	mov	r6, r0
 8011378:	460f      	mov	r7, r1
 801137a:	4614      	mov	r4, r2
 801137c:	18d5      	adds	r5, r2, r3
 801137e:	42ac      	cmp	r4, r5
 8011380:	d101      	bne.n	8011386 <__sfputs_r+0x12>
 8011382:	2000      	movs	r0, #0
 8011384:	e007      	b.n	8011396 <__sfputs_r+0x22>
 8011386:	f814 1b01 	ldrb.w	r1, [r4], #1
 801138a:	463a      	mov	r2, r7
 801138c:	4630      	mov	r0, r6
 801138e:	f7ff ffda 	bl	8011346 <__sfputc_r>
 8011392:	1c43      	adds	r3, r0, #1
 8011394:	d1f3      	bne.n	801137e <__sfputs_r+0xa>
 8011396:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08011398 <_vfiprintf_r>:
 8011398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801139c:	460d      	mov	r5, r1
 801139e:	b09d      	sub	sp, #116	; 0x74
 80113a0:	4614      	mov	r4, r2
 80113a2:	4698      	mov	r8, r3
 80113a4:	4606      	mov	r6, r0
 80113a6:	b118      	cbz	r0, 80113b0 <_vfiprintf_r+0x18>
 80113a8:	6983      	ldr	r3, [r0, #24]
 80113aa:	b90b      	cbnz	r3, 80113b0 <_vfiprintf_r+0x18>
 80113ac:	f000 fb14 	bl	80119d8 <__sinit>
 80113b0:	4b89      	ldr	r3, [pc, #548]	; (80115d8 <_vfiprintf_r+0x240>)
 80113b2:	429d      	cmp	r5, r3
 80113b4:	d11b      	bne.n	80113ee <_vfiprintf_r+0x56>
 80113b6:	6875      	ldr	r5, [r6, #4]
 80113b8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80113ba:	07d9      	lsls	r1, r3, #31
 80113bc:	d405      	bmi.n	80113ca <_vfiprintf_r+0x32>
 80113be:	89ab      	ldrh	r3, [r5, #12]
 80113c0:	059a      	lsls	r2, r3, #22
 80113c2:	d402      	bmi.n	80113ca <_vfiprintf_r+0x32>
 80113c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80113c6:	f000 fba5 	bl	8011b14 <__retarget_lock_acquire_recursive>
 80113ca:	89ab      	ldrh	r3, [r5, #12]
 80113cc:	071b      	lsls	r3, r3, #28
 80113ce:	d501      	bpl.n	80113d4 <_vfiprintf_r+0x3c>
 80113d0:	692b      	ldr	r3, [r5, #16]
 80113d2:	b9eb      	cbnz	r3, 8011410 <_vfiprintf_r+0x78>
 80113d4:	4629      	mov	r1, r5
 80113d6:	4630      	mov	r0, r6
 80113d8:	f000 f96e 	bl	80116b8 <__swsetup_r>
 80113dc:	b1c0      	cbz	r0, 8011410 <_vfiprintf_r+0x78>
 80113de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80113e0:	07dc      	lsls	r4, r3, #31
 80113e2:	d50e      	bpl.n	8011402 <_vfiprintf_r+0x6a>
 80113e4:	f04f 30ff 	mov.w	r0, #4294967295
 80113e8:	b01d      	add	sp, #116	; 0x74
 80113ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80113ee:	4b7b      	ldr	r3, [pc, #492]	; (80115dc <_vfiprintf_r+0x244>)
 80113f0:	429d      	cmp	r5, r3
 80113f2:	d101      	bne.n	80113f8 <_vfiprintf_r+0x60>
 80113f4:	68b5      	ldr	r5, [r6, #8]
 80113f6:	e7df      	b.n	80113b8 <_vfiprintf_r+0x20>
 80113f8:	4b79      	ldr	r3, [pc, #484]	; (80115e0 <_vfiprintf_r+0x248>)
 80113fa:	429d      	cmp	r5, r3
 80113fc:	bf08      	it	eq
 80113fe:	68f5      	ldreq	r5, [r6, #12]
 8011400:	e7da      	b.n	80113b8 <_vfiprintf_r+0x20>
 8011402:	89ab      	ldrh	r3, [r5, #12]
 8011404:	0598      	lsls	r0, r3, #22
 8011406:	d4ed      	bmi.n	80113e4 <_vfiprintf_r+0x4c>
 8011408:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801140a:	f000 fb84 	bl	8011b16 <__retarget_lock_release_recursive>
 801140e:	e7e9      	b.n	80113e4 <_vfiprintf_r+0x4c>
 8011410:	2300      	movs	r3, #0
 8011412:	9309      	str	r3, [sp, #36]	; 0x24
 8011414:	2320      	movs	r3, #32
 8011416:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801141a:	f8cd 800c 	str.w	r8, [sp, #12]
 801141e:	2330      	movs	r3, #48	; 0x30
 8011420:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80115e4 <_vfiprintf_r+0x24c>
 8011424:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011428:	f04f 0901 	mov.w	r9, #1
 801142c:	4623      	mov	r3, r4
 801142e:	469a      	mov	sl, r3
 8011430:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011434:	b10a      	cbz	r2, 801143a <_vfiprintf_r+0xa2>
 8011436:	2a25      	cmp	r2, #37	; 0x25
 8011438:	d1f9      	bne.n	801142e <_vfiprintf_r+0x96>
 801143a:	ebba 0b04 	subs.w	fp, sl, r4
 801143e:	d00b      	beq.n	8011458 <_vfiprintf_r+0xc0>
 8011440:	465b      	mov	r3, fp
 8011442:	4622      	mov	r2, r4
 8011444:	4629      	mov	r1, r5
 8011446:	4630      	mov	r0, r6
 8011448:	f7ff ff94 	bl	8011374 <__sfputs_r>
 801144c:	3001      	adds	r0, #1
 801144e:	f000 80aa 	beq.w	80115a6 <_vfiprintf_r+0x20e>
 8011452:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011454:	445a      	add	r2, fp
 8011456:	9209      	str	r2, [sp, #36]	; 0x24
 8011458:	f89a 3000 	ldrb.w	r3, [sl]
 801145c:	2b00      	cmp	r3, #0
 801145e:	f000 80a2 	beq.w	80115a6 <_vfiprintf_r+0x20e>
 8011462:	2300      	movs	r3, #0
 8011464:	f04f 32ff 	mov.w	r2, #4294967295
 8011468:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801146c:	f10a 0a01 	add.w	sl, sl, #1
 8011470:	9304      	str	r3, [sp, #16]
 8011472:	9307      	str	r3, [sp, #28]
 8011474:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011478:	931a      	str	r3, [sp, #104]	; 0x68
 801147a:	4654      	mov	r4, sl
 801147c:	2205      	movs	r2, #5
 801147e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011482:	4858      	ldr	r0, [pc, #352]	; (80115e4 <_vfiprintf_r+0x24c>)
 8011484:	f7ee feac 	bl	80001e0 <memchr>
 8011488:	9a04      	ldr	r2, [sp, #16]
 801148a:	b9d8      	cbnz	r0, 80114c4 <_vfiprintf_r+0x12c>
 801148c:	06d1      	lsls	r1, r2, #27
 801148e:	bf44      	itt	mi
 8011490:	2320      	movmi	r3, #32
 8011492:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011496:	0713      	lsls	r3, r2, #28
 8011498:	bf44      	itt	mi
 801149a:	232b      	movmi	r3, #43	; 0x2b
 801149c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80114a0:	f89a 3000 	ldrb.w	r3, [sl]
 80114a4:	2b2a      	cmp	r3, #42	; 0x2a
 80114a6:	d015      	beq.n	80114d4 <_vfiprintf_r+0x13c>
 80114a8:	9a07      	ldr	r2, [sp, #28]
 80114aa:	4654      	mov	r4, sl
 80114ac:	2000      	movs	r0, #0
 80114ae:	f04f 0c0a 	mov.w	ip, #10
 80114b2:	4621      	mov	r1, r4
 80114b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80114b8:	3b30      	subs	r3, #48	; 0x30
 80114ba:	2b09      	cmp	r3, #9
 80114bc:	d94e      	bls.n	801155c <_vfiprintf_r+0x1c4>
 80114be:	b1b0      	cbz	r0, 80114ee <_vfiprintf_r+0x156>
 80114c0:	9207      	str	r2, [sp, #28]
 80114c2:	e014      	b.n	80114ee <_vfiprintf_r+0x156>
 80114c4:	eba0 0308 	sub.w	r3, r0, r8
 80114c8:	fa09 f303 	lsl.w	r3, r9, r3
 80114cc:	4313      	orrs	r3, r2
 80114ce:	9304      	str	r3, [sp, #16]
 80114d0:	46a2      	mov	sl, r4
 80114d2:	e7d2      	b.n	801147a <_vfiprintf_r+0xe2>
 80114d4:	9b03      	ldr	r3, [sp, #12]
 80114d6:	1d19      	adds	r1, r3, #4
 80114d8:	681b      	ldr	r3, [r3, #0]
 80114da:	9103      	str	r1, [sp, #12]
 80114dc:	2b00      	cmp	r3, #0
 80114de:	bfbb      	ittet	lt
 80114e0:	425b      	neglt	r3, r3
 80114e2:	f042 0202 	orrlt.w	r2, r2, #2
 80114e6:	9307      	strge	r3, [sp, #28]
 80114e8:	9307      	strlt	r3, [sp, #28]
 80114ea:	bfb8      	it	lt
 80114ec:	9204      	strlt	r2, [sp, #16]
 80114ee:	7823      	ldrb	r3, [r4, #0]
 80114f0:	2b2e      	cmp	r3, #46	; 0x2e
 80114f2:	d10c      	bne.n	801150e <_vfiprintf_r+0x176>
 80114f4:	7863      	ldrb	r3, [r4, #1]
 80114f6:	2b2a      	cmp	r3, #42	; 0x2a
 80114f8:	d135      	bne.n	8011566 <_vfiprintf_r+0x1ce>
 80114fa:	9b03      	ldr	r3, [sp, #12]
 80114fc:	1d1a      	adds	r2, r3, #4
 80114fe:	681b      	ldr	r3, [r3, #0]
 8011500:	9203      	str	r2, [sp, #12]
 8011502:	2b00      	cmp	r3, #0
 8011504:	bfb8      	it	lt
 8011506:	f04f 33ff 	movlt.w	r3, #4294967295
 801150a:	3402      	adds	r4, #2
 801150c:	9305      	str	r3, [sp, #20]
 801150e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80115f4 <_vfiprintf_r+0x25c>
 8011512:	7821      	ldrb	r1, [r4, #0]
 8011514:	2203      	movs	r2, #3
 8011516:	4650      	mov	r0, sl
 8011518:	f7ee fe62 	bl	80001e0 <memchr>
 801151c:	b140      	cbz	r0, 8011530 <_vfiprintf_r+0x198>
 801151e:	2340      	movs	r3, #64	; 0x40
 8011520:	eba0 000a 	sub.w	r0, r0, sl
 8011524:	fa03 f000 	lsl.w	r0, r3, r0
 8011528:	9b04      	ldr	r3, [sp, #16]
 801152a:	4303      	orrs	r3, r0
 801152c:	3401      	adds	r4, #1
 801152e:	9304      	str	r3, [sp, #16]
 8011530:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011534:	482c      	ldr	r0, [pc, #176]	; (80115e8 <_vfiprintf_r+0x250>)
 8011536:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801153a:	2206      	movs	r2, #6
 801153c:	f7ee fe50 	bl	80001e0 <memchr>
 8011540:	2800      	cmp	r0, #0
 8011542:	d03f      	beq.n	80115c4 <_vfiprintf_r+0x22c>
 8011544:	4b29      	ldr	r3, [pc, #164]	; (80115ec <_vfiprintf_r+0x254>)
 8011546:	bb1b      	cbnz	r3, 8011590 <_vfiprintf_r+0x1f8>
 8011548:	9b03      	ldr	r3, [sp, #12]
 801154a:	3307      	adds	r3, #7
 801154c:	f023 0307 	bic.w	r3, r3, #7
 8011550:	3308      	adds	r3, #8
 8011552:	9303      	str	r3, [sp, #12]
 8011554:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011556:	443b      	add	r3, r7
 8011558:	9309      	str	r3, [sp, #36]	; 0x24
 801155a:	e767      	b.n	801142c <_vfiprintf_r+0x94>
 801155c:	fb0c 3202 	mla	r2, ip, r2, r3
 8011560:	460c      	mov	r4, r1
 8011562:	2001      	movs	r0, #1
 8011564:	e7a5      	b.n	80114b2 <_vfiprintf_r+0x11a>
 8011566:	2300      	movs	r3, #0
 8011568:	3401      	adds	r4, #1
 801156a:	9305      	str	r3, [sp, #20]
 801156c:	4619      	mov	r1, r3
 801156e:	f04f 0c0a 	mov.w	ip, #10
 8011572:	4620      	mov	r0, r4
 8011574:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011578:	3a30      	subs	r2, #48	; 0x30
 801157a:	2a09      	cmp	r2, #9
 801157c:	d903      	bls.n	8011586 <_vfiprintf_r+0x1ee>
 801157e:	2b00      	cmp	r3, #0
 8011580:	d0c5      	beq.n	801150e <_vfiprintf_r+0x176>
 8011582:	9105      	str	r1, [sp, #20]
 8011584:	e7c3      	b.n	801150e <_vfiprintf_r+0x176>
 8011586:	fb0c 2101 	mla	r1, ip, r1, r2
 801158a:	4604      	mov	r4, r0
 801158c:	2301      	movs	r3, #1
 801158e:	e7f0      	b.n	8011572 <_vfiprintf_r+0x1da>
 8011590:	ab03      	add	r3, sp, #12
 8011592:	9300      	str	r3, [sp, #0]
 8011594:	462a      	mov	r2, r5
 8011596:	4b16      	ldr	r3, [pc, #88]	; (80115f0 <_vfiprintf_r+0x258>)
 8011598:	a904      	add	r1, sp, #16
 801159a:	4630      	mov	r0, r6
 801159c:	f7fd fde6 	bl	800f16c <_printf_float>
 80115a0:	4607      	mov	r7, r0
 80115a2:	1c78      	adds	r0, r7, #1
 80115a4:	d1d6      	bne.n	8011554 <_vfiprintf_r+0x1bc>
 80115a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80115a8:	07d9      	lsls	r1, r3, #31
 80115aa:	d405      	bmi.n	80115b8 <_vfiprintf_r+0x220>
 80115ac:	89ab      	ldrh	r3, [r5, #12]
 80115ae:	059a      	lsls	r2, r3, #22
 80115b0:	d402      	bmi.n	80115b8 <_vfiprintf_r+0x220>
 80115b2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80115b4:	f000 faaf 	bl	8011b16 <__retarget_lock_release_recursive>
 80115b8:	89ab      	ldrh	r3, [r5, #12]
 80115ba:	065b      	lsls	r3, r3, #25
 80115bc:	f53f af12 	bmi.w	80113e4 <_vfiprintf_r+0x4c>
 80115c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80115c2:	e711      	b.n	80113e8 <_vfiprintf_r+0x50>
 80115c4:	ab03      	add	r3, sp, #12
 80115c6:	9300      	str	r3, [sp, #0]
 80115c8:	462a      	mov	r2, r5
 80115ca:	4b09      	ldr	r3, [pc, #36]	; (80115f0 <_vfiprintf_r+0x258>)
 80115cc:	a904      	add	r1, sp, #16
 80115ce:	4630      	mov	r0, r6
 80115d0:	f7fe f870 	bl	800f6b4 <_printf_i>
 80115d4:	e7e4      	b.n	80115a0 <_vfiprintf_r+0x208>
 80115d6:	bf00      	nop
 80115d8:	0801491c 	.word	0x0801491c
 80115dc:	0801493c 	.word	0x0801493c
 80115e0:	080148fc 	.word	0x080148fc
 80115e4:	080147a4 	.word	0x080147a4
 80115e8:	080147ae 	.word	0x080147ae
 80115ec:	0800f16d 	.word	0x0800f16d
 80115f0:	08011375 	.word	0x08011375
 80115f4:	080147aa 	.word	0x080147aa

080115f8 <__swbuf_r>:
 80115f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80115fa:	460e      	mov	r6, r1
 80115fc:	4614      	mov	r4, r2
 80115fe:	4605      	mov	r5, r0
 8011600:	b118      	cbz	r0, 801160a <__swbuf_r+0x12>
 8011602:	6983      	ldr	r3, [r0, #24]
 8011604:	b90b      	cbnz	r3, 801160a <__swbuf_r+0x12>
 8011606:	f000 f9e7 	bl	80119d8 <__sinit>
 801160a:	4b21      	ldr	r3, [pc, #132]	; (8011690 <__swbuf_r+0x98>)
 801160c:	429c      	cmp	r4, r3
 801160e:	d12b      	bne.n	8011668 <__swbuf_r+0x70>
 8011610:	686c      	ldr	r4, [r5, #4]
 8011612:	69a3      	ldr	r3, [r4, #24]
 8011614:	60a3      	str	r3, [r4, #8]
 8011616:	89a3      	ldrh	r3, [r4, #12]
 8011618:	071a      	lsls	r2, r3, #28
 801161a:	d52f      	bpl.n	801167c <__swbuf_r+0x84>
 801161c:	6923      	ldr	r3, [r4, #16]
 801161e:	b36b      	cbz	r3, 801167c <__swbuf_r+0x84>
 8011620:	6923      	ldr	r3, [r4, #16]
 8011622:	6820      	ldr	r0, [r4, #0]
 8011624:	1ac0      	subs	r0, r0, r3
 8011626:	6963      	ldr	r3, [r4, #20]
 8011628:	b2f6      	uxtb	r6, r6
 801162a:	4283      	cmp	r3, r0
 801162c:	4637      	mov	r7, r6
 801162e:	dc04      	bgt.n	801163a <__swbuf_r+0x42>
 8011630:	4621      	mov	r1, r4
 8011632:	4628      	mov	r0, r5
 8011634:	f000 f93c 	bl	80118b0 <_fflush_r>
 8011638:	bb30      	cbnz	r0, 8011688 <__swbuf_r+0x90>
 801163a:	68a3      	ldr	r3, [r4, #8]
 801163c:	3b01      	subs	r3, #1
 801163e:	60a3      	str	r3, [r4, #8]
 8011640:	6823      	ldr	r3, [r4, #0]
 8011642:	1c5a      	adds	r2, r3, #1
 8011644:	6022      	str	r2, [r4, #0]
 8011646:	701e      	strb	r6, [r3, #0]
 8011648:	6963      	ldr	r3, [r4, #20]
 801164a:	3001      	adds	r0, #1
 801164c:	4283      	cmp	r3, r0
 801164e:	d004      	beq.n	801165a <__swbuf_r+0x62>
 8011650:	89a3      	ldrh	r3, [r4, #12]
 8011652:	07db      	lsls	r3, r3, #31
 8011654:	d506      	bpl.n	8011664 <__swbuf_r+0x6c>
 8011656:	2e0a      	cmp	r6, #10
 8011658:	d104      	bne.n	8011664 <__swbuf_r+0x6c>
 801165a:	4621      	mov	r1, r4
 801165c:	4628      	mov	r0, r5
 801165e:	f000 f927 	bl	80118b0 <_fflush_r>
 8011662:	b988      	cbnz	r0, 8011688 <__swbuf_r+0x90>
 8011664:	4638      	mov	r0, r7
 8011666:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011668:	4b0a      	ldr	r3, [pc, #40]	; (8011694 <__swbuf_r+0x9c>)
 801166a:	429c      	cmp	r4, r3
 801166c:	d101      	bne.n	8011672 <__swbuf_r+0x7a>
 801166e:	68ac      	ldr	r4, [r5, #8]
 8011670:	e7cf      	b.n	8011612 <__swbuf_r+0x1a>
 8011672:	4b09      	ldr	r3, [pc, #36]	; (8011698 <__swbuf_r+0xa0>)
 8011674:	429c      	cmp	r4, r3
 8011676:	bf08      	it	eq
 8011678:	68ec      	ldreq	r4, [r5, #12]
 801167a:	e7ca      	b.n	8011612 <__swbuf_r+0x1a>
 801167c:	4621      	mov	r1, r4
 801167e:	4628      	mov	r0, r5
 8011680:	f000 f81a 	bl	80116b8 <__swsetup_r>
 8011684:	2800      	cmp	r0, #0
 8011686:	d0cb      	beq.n	8011620 <__swbuf_r+0x28>
 8011688:	f04f 37ff 	mov.w	r7, #4294967295
 801168c:	e7ea      	b.n	8011664 <__swbuf_r+0x6c>
 801168e:	bf00      	nop
 8011690:	0801491c 	.word	0x0801491c
 8011694:	0801493c 	.word	0x0801493c
 8011698:	080148fc 	.word	0x080148fc

0801169c <__ascii_wctomb>:
 801169c:	b149      	cbz	r1, 80116b2 <__ascii_wctomb+0x16>
 801169e:	2aff      	cmp	r2, #255	; 0xff
 80116a0:	bf85      	ittet	hi
 80116a2:	238a      	movhi	r3, #138	; 0x8a
 80116a4:	6003      	strhi	r3, [r0, #0]
 80116a6:	700a      	strbls	r2, [r1, #0]
 80116a8:	f04f 30ff 	movhi.w	r0, #4294967295
 80116ac:	bf98      	it	ls
 80116ae:	2001      	movls	r0, #1
 80116b0:	4770      	bx	lr
 80116b2:	4608      	mov	r0, r1
 80116b4:	4770      	bx	lr
	...

080116b8 <__swsetup_r>:
 80116b8:	4b32      	ldr	r3, [pc, #200]	; (8011784 <__swsetup_r+0xcc>)
 80116ba:	b570      	push	{r4, r5, r6, lr}
 80116bc:	681d      	ldr	r5, [r3, #0]
 80116be:	4606      	mov	r6, r0
 80116c0:	460c      	mov	r4, r1
 80116c2:	b125      	cbz	r5, 80116ce <__swsetup_r+0x16>
 80116c4:	69ab      	ldr	r3, [r5, #24]
 80116c6:	b913      	cbnz	r3, 80116ce <__swsetup_r+0x16>
 80116c8:	4628      	mov	r0, r5
 80116ca:	f000 f985 	bl	80119d8 <__sinit>
 80116ce:	4b2e      	ldr	r3, [pc, #184]	; (8011788 <__swsetup_r+0xd0>)
 80116d0:	429c      	cmp	r4, r3
 80116d2:	d10f      	bne.n	80116f4 <__swsetup_r+0x3c>
 80116d4:	686c      	ldr	r4, [r5, #4]
 80116d6:	89a3      	ldrh	r3, [r4, #12]
 80116d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80116dc:	0719      	lsls	r1, r3, #28
 80116de:	d42c      	bmi.n	801173a <__swsetup_r+0x82>
 80116e0:	06dd      	lsls	r5, r3, #27
 80116e2:	d411      	bmi.n	8011708 <__swsetup_r+0x50>
 80116e4:	2309      	movs	r3, #9
 80116e6:	6033      	str	r3, [r6, #0]
 80116e8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80116ec:	81a3      	strh	r3, [r4, #12]
 80116ee:	f04f 30ff 	mov.w	r0, #4294967295
 80116f2:	e03e      	b.n	8011772 <__swsetup_r+0xba>
 80116f4:	4b25      	ldr	r3, [pc, #148]	; (801178c <__swsetup_r+0xd4>)
 80116f6:	429c      	cmp	r4, r3
 80116f8:	d101      	bne.n	80116fe <__swsetup_r+0x46>
 80116fa:	68ac      	ldr	r4, [r5, #8]
 80116fc:	e7eb      	b.n	80116d6 <__swsetup_r+0x1e>
 80116fe:	4b24      	ldr	r3, [pc, #144]	; (8011790 <__swsetup_r+0xd8>)
 8011700:	429c      	cmp	r4, r3
 8011702:	bf08      	it	eq
 8011704:	68ec      	ldreq	r4, [r5, #12]
 8011706:	e7e6      	b.n	80116d6 <__swsetup_r+0x1e>
 8011708:	0758      	lsls	r0, r3, #29
 801170a:	d512      	bpl.n	8011732 <__swsetup_r+0x7a>
 801170c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801170e:	b141      	cbz	r1, 8011722 <__swsetup_r+0x6a>
 8011710:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011714:	4299      	cmp	r1, r3
 8011716:	d002      	beq.n	801171e <__swsetup_r+0x66>
 8011718:	4630      	mov	r0, r6
 801171a:	f7ff fb31 	bl	8010d80 <_free_r>
 801171e:	2300      	movs	r3, #0
 8011720:	6363      	str	r3, [r4, #52]	; 0x34
 8011722:	89a3      	ldrh	r3, [r4, #12]
 8011724:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011728:	81a3      	strh	r3, [r4, #12]
 801172a:	2300      	movs	r3, #0
 801172c:	6063      	str	r3, [r4, #4]
 801172e:	6923      	ldr	r3, [r4, #16]
 8011730:	6023      	str	r3, [r4, #0]
 8011732:	89a3      	ldrh	r3, [r4, #12]
 8011734:	f043 0308 	orr.w	r3, r3, #8
 8011738:	81a3      	strh	r3, [r4, #12]
 801173a:	6923      	ldr	r3, [r4, #16]
 801173c:	b94b      	cbnz	r3, 8011752 <__swsetup_r+0x9a>
 801173e:	89a3      	ldrh	r3, [r4, #12]
 8011740:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011744:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011748:	d003      	beq.n	8011752 <__swsetup_r+0x9a>
 801174a:	4621      	mov	r1, r4
 801174c:	4630      	mov	r0, r6
 801174e:	f000 fa09 	bl	8011b64 <__smakebuf_r>
 8011752:	89a0      	ldrh	r0, [r4, #12]
 8011754:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011758:	f010 0301 	ands.w	r3, r0, #1
 801175c:	d00a      	beq.n	8011774 <__swsetup_r+0xbc>
 801175e:	2300      	movs	r3, #0
 8011760:	60a3      	str	r3, [r4, #8]
 8011762:	6963      	ldr	r3, [r4, #20]
 8011764:	425b      	negs	r3, r3
 8011766:	61a3      	str	r3, [r4, #24]
 8011768:	6923      	ldr	r3, [r4, #16]
 801176a:	b943      	cbnz	r3, 801177e <__swsetup_r+0xc6>
 801176c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8011770:	d1ba      	bne.n	80116e8 <__swsetup_r+0x30>
 8011772:	bd70      	pop	{r4, r5, r6, pc}
 8011774:	0781      	lsls	r1, r0, #30
 8011776:	bf58      	it	pl
 8011778:	6963      	ldrpl	r3, [r4, #20]
 801177a:	60a3      	str	r3, [r4, #8]
 801177c:	e7f4      	b.n	8011768 <__swsetup_r+0xb0>
 801177e:	2000      	movs	r0, #0
 8011780:	e7f7      	b.n	8011772 <__swsetup_r+0xba>
 8011782:	bf00      	nop
 8011784:	2000001c 	.word	0x2000001c
 8011788:	0801491c 	.word	0x0801491c
 801178c:	0801493c 	.word	0x0801493c
 8011790:	080148fc 	.word	0x080148fc

08011794 <abort>:
 8011794:	b508      	push	{r3, lr}
 8011796:	2006      	movs	r0, #6
 8011798:	f000 fa54 	bl	8011c44 <raise>
 801179c:	2001      	movs	r0, #1
 801179e:	f7f2 fd9b 	bl	80042d8 <_exit>
	...

080117a4 <__sflush_r>:
 80117a4:	898a      	ldrh	r2, [r1, #12]
 80117a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80117aa:	4605      	mov	r5, r0
 80117ac:	0710      	lsls	r0, r2, #28
 80117ae:	460c      	mov	r4, r1
 80117b0:	d458      	bmi.n	8011864 <__sflush_r+0xc0>
 80117b2:	684b      	ldr	r3, [r1, #4]
 80117b4:	2b00      	cmp	r3, #0
 80117b6:	dc05      	bgt.n	80117c4 <__sflush_r+0x20>
 80117b8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80117ba:	2b00      	cmp	r3, #0
 80117bc:	dc02      	bgt.n	80117c4 <__sflush_r+0x20>
 80117be:	2000      	movs	r0, #0
 80117c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80117c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80117c6:	2e00      	cmp	r6, #0
 80117c8:	d0f9      	beq.n	80117be <__sflush_r+0x1a>
 80117ca:	2300      	movs	r3, #0
 80117cc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80117d0:	682f      	ldr	r7, [r5, #0]
 80117d2:	602b      	str	r3, [r5, #0]
 80117d4:	d032      	beq.n	801183c <__sflush_r+0x98>
 80117d6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80117d8:	89a3      	ldrh	r3, [r4, #12]
 80117da:	075a      	lsls	r2, r3, #29
 80117dc:	d505      	bpl.n	80117ea <__sflush_r+0x46>
 80117de:	6863      	ldr	r3, [r4, #4]
 80117e0:	1ac0      	subs	r0, r0, r3
 80117e2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80117e4:	b10b      	cbz	r3, 80117ea <__sflush_r+0x46>
 80117e6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80117e8:	1ac0      	subs	r0, r0, r3
 80117ea:	2300      	movs	r3, #0
 80117ec:	4602      	mov	r2, r0
 80117ee:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80117f0:	6a21      	ldr	r1, [r4, #32]
 80117f2:	4628      	mov	r0, r5
 80117f4:	47b0      	blx	r6
 80117f6:	1c43      	adds	r3, r0, #1
 80117f8:	89a3      	ldrh	r3, [r4, #12]
 80117fa:	d106      	bne.n	801180a <__sflush_r+0x66>
 80117fc:	6829      	ldr	r1, [r5, #0]
 80117fe:	291d      	cmp	r1, #29
 8011800:	d82c      	bhi.n	801185c <__sflush_r+0xb8>
 8011802:	4a2a      	ldr	r2, [pc, #168]	; (80118ac <__sflush_r+0x108>)
 8011804:	40ca      	lsrs	r2, r1
 8011806:	07d6      	lsls	r6, r2, #31
 8011808:	d528      	bpl.n	801185c <__sflush_r+0xb8>
 801180a:	2200      	movs	r2, #0
 801180c:	6062      	str	r2, [r4, #4]
 801180e:	04d9      	lsls	r1, r3, #19
 8011810:	6922      	ldr	r2, [r4, #16]
 8011812:	6022      	str	r2, [r4, #0]
 8011814:	d504      	bpl.n	8011820 <__sflush_r+0x7c>
 8011816:	1c42      	adds	r2, r0, #1
 8011818:	d101      	bne.n	801181e <__sflush_r+0x7a>
 801181a:	682b      	ldr	r3, [r5, #0]
 801181c:	b903      	cbnz	r3, 8011820 <__sflush_r+0x7c>
 801181e:	6560      	str	r0, [r4, #84]	; 0x54
 8011820:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011822:	602f      	str	r7, [r5, #0]
 8011824:	2900      	cmp	r1, #0
 8011826:	d0ca      	beq.n	80117be <__sflush_r+0x1a>
 8011828:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801182c:	4299      	cmp	r1, r3
 801182e:	d002      	beq.n	8011836 <__sflush_r+0x92>
 8011830:	4628      	mov	r0, r5
 8011832:	f7ff faa5 	bl	8010d80 <_free_r>
 8011836:	2000      	movs	r0, #0
 8011838:	6360      	str	r0, [r4, #52]	; 0x34
 801183a:	e7c1      	b.n	80117c0 <__sflush_r+0x1c>
 801183c:	6a21      	ldr	r1, [r4, #32]
 801183e:	2301      	movs	r3, #1
 8011840:	4628      	mov	r0, r5
 8011842:	47b0      	blx	r6
 8011844:	1c41      	adds	r1, r0, #1
 8011846:	d1c7      	bne.n	80117d8 <__sflush_r+0x34>
 8011848:	682b      	ldr	r3, [r5, #0]
 801184a:	2b00      	cmp	r3, #0
 801184c:	d0c4      	beq.n	80117d8 <__sflush_r+0x34>
 801184e:	2b1d      	cmp	r3, #29
 8011850:	d001      	beq.n	8011856 <__sflush_r+0xb2>
 8011852:	2b16      	cmp	r3, #22
 8011854:	d101      	bne.n	801185a <__sflush_r+0xb6>
 8011856:	602f      	str	r7, [r5, #0]
 8011858:	e7b1      	b.n	80117be <__sflush_r+0x1a>
 801185a:	89a3      	ldrh	r3, [r4, #12]
 801185c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011860:	81a3      	strh	r3, [r4, #12]
 8011862:	e7ad      	b.n	80117c0 <__sflush_r+0x1c>
 8011864:	690f      	ldr	r7, [r1, #16]
 8011866:	2f00      	cmp	r7, #0
 8011868:	d0a9      	beq.n	80117be <__sflush_r+0x1a>
 801186a:	0793      	lsls	r3, r2, #30
 801186c:	680e      	ldr	r6, [r1, #0]
 801186e:	bf08      	it	eq
 8011870:	694b      	ldreq	r3, [r1, #20]
 8011872:	600f      	str	r7, [r1, #0]
 8011874:	bf18      	it	ne
 8011876:	2300      	movne	r3, #0
 8011878:	eba6 0807 	sub.w	r8, r6, r7
 801187c:	608b      	str	r3, [r1, #8]
 801187e:	f1b8 0f00 	cmp.w	r8, #0
 8011882:	dd9c      	ble.n	80117be <__sflush_r+0x1a>
 8011884:	6a21      	ldr	r1, [r4, #32]
 8011886:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011888:	4643      	mov	r3, r8
 801188a:	463a      	mov	r2, r7
 801188c:	4628      	mov	r0, r5
 801188e:	47b0      	blx	r6
 8011890:	2800      	cmp	r0, #0
 8011892:	dc06      	bgt.n	80118a2 <__sflush_r+0xfe>
 8011894:	89a3      	ldrh	r3, [r4, #12]
 8011896:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801189a:	81a3      	strh	r3, [r4, #12]
 801189c:	f04f 30ff 	mov.w	r0, #4294967295
 80118a0:	e78e      	b.n	80117c0 <__sflush_r+0x1c>
 80118a2:	4407      	add	r7, r0
 80118a4:	eba8 0800 	sub.w	r8, r8, r0
 80118a8:	e7e9      	b.n	801187e <__sflush_r+0xda>
 80118aa:	bf00      	nop
 80118ac:	20400001 	.word	0x20400001

080118b0 <_fflush_r>:
 80118b0:	b538      	push	{r3, r4, r5, lr}
 80118b2:	690b      	ldr	r3, [r1, #16]
 80118b4:	4605      	mov	r5, r0
 80118b6:	460c      	mov	r4, r1
 80118b8:	b913      	cbnz	r3, 80118c0 <_fflush_r+0x10>
 80118ba:	2500      	movs	r5, #0
 80118bc:	4628      	mov	r0, r5
 80118be:	bd38      	pop	{r3, r4, r5, pc}
 80118c0:	b118      	cbz	r0, 80118ca <_fflush_r+0x1a>
 80118c2:	6983      	ldr	r3, [r0, #24]
 80118c4:	b90b      	cbnz	r3, 80118ca <_fflush_r+0x1a>
 80118c6:	f000 f887 	bl	80119d8 <__sinit>
 80118ca:	4b14      	ldr	r3, [pc, #80]	; (801191c <_fflush_r+0x6c>)
 80118cc:	429c      	cmp	r4, r3
 80118ce:	d11b      	bne.n	8011908 <_fflush_r+0x58>
 80118d0:	686c      	ldr	r4, [r5, #4]
 80118d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80118d6:	2b00      	cmp	r3, #0
 80118d8:	d0ef      	beq.n	80118ba <_fflush_r+0xa>
 80118da:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80118dc:	07d0      	lsls	r0, r2, #31
 80118de:	d404      	bmi.n	80118ea <_fflush_r+0x3a>
 80118e0:	0599      	lsls	r1, r3, #22
 80118e2:	d402      	bmi.n	80118ea <_fflush_r+0x3a>
 80118e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80118e6:	f000 f915 	bl	8011b14 <__retarget_lock_acquire_recursive>
 80118ea:	4628      	mov	r0, r5
 80118ec:	4621      	mov	r1, r4
 80118ee:	f7ff ff59 	bl	80117a4 <__sflush_r>
 80118f2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80118f4:	07da      	lsls	r2, r3, #31
 80118f6:	4605      	mov	r5, r0
 80118f8:	d4e0      	bmi.n	80118bc <_fflush_r+0xc>
 80118fa:	89a3      	ldrh	r3, [r4, #12]
 80118fc:	059b      	lsls	r3, r3, #22
 80118fe:	d4dd      	bmi.n	80118bc <_fflush_r+0xc>
 8011900:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011902:	f000 f908 	bl	8011b16 <__retarget_lock_release_recursive>
 8011906:	e7d9      	b.n	80118bc <_fflush_r+0xc>
 8011908:	4b05      	ldr	r3, [pc, #20]	; (8011920 <_fflush_r+0x70>)
 801190a:	429c      	cmp	r4, r3
 801190c:	d101      	bne.n	8011912 <_fflush_r+0x62>
 801190e:	68ac      	ldr	r4, [r5, #8]
 8011910:	e7df      	b.n	80118d2 <_fflush_r+0x22>
 8011912:	4b04      	ldr	r3, [pc, #16]	; (8011924 <_fflush_r+0x74>)
 8011914:	429c      	cmp	r4, r3
 8011916:	bf08      	it	eq
 8011918:	68ec      	ldreq	r4, [r5, #12]
 801191a:	e7da      	b.n	80118d2 <_fflush_r+0x22>
 801191c:	0801491c 	.word	0x0801491c
 8011920:	0801493c 	.word	0x0801493c
 8011924:	080148fc 	.word	0x080148fc

08011928 <std>:
 8011928:	2300      	movs	r3, #0
 801192a:	b510      	push	{r4, lr}
 801192c:	4604      	mov	r4, r0
 801192e:	e9c0 3300 	strd	r3, r3, [r0]
 8011932:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011936:	6083      	str	r3, [r0, #8]
 8011938:	8181      	strh	r1, [r0, #12]
 801193a:	6643      	str	r3, [r0, #100]	; 0x64
 801193c:	81c2      	strh	r2, [r0, #14]
 801193e:	6183      	str	r3, [r0, #24]
 8011940:	4619      	mov	r1, r3
 8011942:	2208      	movs	r2, #8
 8011944:	305c      	adds	r0, #92	; 0x5c
 8011946:	f7fd fb69 	bl	800f01c <memset>
 801194a:	4b05      	ldr	r3, [pc, #20]	; (8011960 <std+0x38>)
 801194c:	6263      	str	r3, [r4, #36]	; 0x24
 801194e:	4b05      	ldr	r3, [pc, #20]	; (8011964 <std+0x3c>)
 8011950:	62a3      	str	r3, [r4, #40]	; 0x28
 8011952:	4b05      	ldr	r3, [pc, #20]	; (8011968 <std+0x40>)
 8011954:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011956:	4b05      	ldr	r3, [pc, #20]	; (801196c <std+0x44>)
 8011958:	6224      	str	r4, [r4, #32]
 801195a:	6323      	str	r3, [r4, #48]	; 0x30
 801195c:	bd10      	pop	{r4, pc}
 801195e:	bf00      	nop
 8011960:	08011c7d 	.word	0x08011c7d
 8011964:	08011c9f 	.word	0x08011c9f
 8011968:	08011cd7 	.word	0x08011cd7
 801196c:	08011cfb 	.word	0x08011cfb

08011970 <_cleanup_r>:
 8011970:	4901      	ldr	r1, [pc, #4]	; (8011978 <_cleanup_r+0x8>)
 8011972:	f000 b8af 	b.w	8011ad4 <_fwalk_reent>
 8011976:	bf00      	nop
 8011978:	080118b1 	.word	0x080118b1

0801197c <__sfmoreglue>:
 801197c:	b570      	push	{r4, r5, r6, lr}
 801197e:	2268      	movs	r2, #104	; 0x68
 8011980:	1e4d      	subs	r5, r1, #1
 8011982:	4355      	muls	r5, r2
 8011984:	460e      	mov	r6, r1
 8011986:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801198a:	f7ff fa65 	bl	8010e58 <_malloc_r>
 801198e:	4604      	mov	r4, r0
 8011990:	b140      	cbz	r0, 80119a4 <__sfmoreglue+0x28>
 8011992:	2100      	movs	r1, #0
 8011994:	e9c0 1600 	strd	r1, r6, [r0]
 8011998:	300c      	adds	r0, #12
 801199a:	60a0      	str	r0, [r4, #8]
 801199c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80119a0:	f7fd fb3c 	bl	800f01c <memset>
 80119a4:	4620      	mov	r0, r4
 80119a6:	bd70      	pop	{r4, r5, r6, pc}

080119a8 <__sfp_lock_acquire>:
 80119a8:	4801      	ldr	r0, [pc, #4]	; (80119b0 <__sfp_lock_acquire+0x8>)
 80119aa:	f000 b8b3 	b.w	8011b14 <__retarget_lock_acquire_recursive>
 80119ae:	bf00      	nop
 80119b0:	20006881 	.word	0x20006881

080119b4 <__sfp_lock_release>:
 80119b4:	4801      	ldr	r0, [pc, #4]	; (80119bc <__sfp_lock_release+0x8>)
 80119b6:	f000 b8ae 	b.w	8011b16 <__retarget_lock_release_recursive>
 80119ba:	bf00      	nop
 80119bc:	20006881 	.word	0x20006881

080119c0 <__sinit_lock_acquire>:
 80119c0:	4801      	ldr	r0, [pc, #4]	; (80119c8 <__sinit_lock_acquire+0x8>)
 80119c2:	f000 b8a7 	b.w	8011b14 <__retarget_lock_acquire_recursive>
 80119c6:	bf00      	nop
 80119c8:	20006882 	.word	0x20006882

080119cc <__sinit_lock_release>:
 80119cc:	4801      	ldr	r0, [pc, #4]	; (80119d4 <__sinit_lock_release+0x8>)
 80119ce:	f000 b8a2 	b.w	8011b16 <__retarget_lock_release_recursive>
 80119d2:	bf00      	nop
 80119d4:	20006882 	.word	0x20006882

080119d8 <__sinit>:
 80119d8:	b510      	push	{r4, lr}
 80119da:	4604      	mov	r4, r0
 80119dc:	f7ff fff0 	bl	80119c0 <__sinit_lock_acquire>
 80119e0:	69a3      	ldr	r3, [r4, #24]
 80119e2:	b11b      	cbz	r3, 80119ec <__sinit+0x14>
 80119e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80119e8:	f7ff bff0 	b.w	80119cc <__sinit_lock_release>
 80119ec:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80119f0:	6523      	str	r3, [r4, #80]	; 0x50
 80119f2:	4b13      	ldr	r3, [pc, #76]	; (8011a40 <__sinit+0x68>)
 80119f4:	4a13      	ldr	r2, [pc, #76]	; (8011a44 <__sinit+0x6c>)
 80119f6:	681b      	ldr	r3, [r3, #0]
 80119f8:	62a2      	str	r2, [r4, #40]	; 0x28
 80119fa:	42a3      	cmp	r3, r4
 80119fc:	bf04      	itt	eq
 80119fe:	2301      	moveq	r3, #1
 8011a00:	61a3      	streq	r3, [r4, #24]
 8011a02:	4620      	mov	r0, r4
 8011a04:	f000 f820 	bl	8011a48 <__sfp>
 8011a08:	6060      	str	r0, [r4, #4]
 8011a0a:	4620      	mov	r0, r4
 8011a0c:	f000 f81c 	bl	8011a48 <__sfp>
 8011a10:	60a0      	str	r0, [r4, #8]
 8011a12:	4620      	mov	r0, r4
 8011a14:	f000 f818 	bl	8011a48 <__sfp>
 8011a18:	2200      	movs	r2, #0
 8011a1a:	60e0      	str	r0, [r4, #12]
 8011a1c:	2104      	movs	r1, #4
 8011a1e:	6860      	ldr	r0, [r4, #4]
 8011a20:	f7ff ff82 	bl	8011928 <std>
 8011a24:	68a0      	ldr	r0, [r4, #8]
 8011a26:	2201      	movs	r2, #1
 8011a28:	2109      	movs	r1, #9
 8011a2a:	f7ff ff7d 	bl	8011928 <std>
 8011a2e:	68e0      	ldr	r0, [r4, #12]
 8011a30:	2202      	movs	r2, #2
 8011a32:	2112      	movs	r1, #18
 8011a34:	f7ff ff78 	bl	8011928 <std>
 8011a38:	2301      	movs	r3, #1
 8011a3a:	61a3      	str	r3, [r4, #24]
 8011a3c:	e7d2      	b.n	80119e4 <__sinit+0xc>
 8011a3e:	bf00      	nop
 8011a40:	08014580 	.word	0x08014580
 8011a44:	08011971 	.word	0x08011971

08011a48 <__sfp>:
 8011a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011a4a:	4607      	mov	r7, r0
 8011a4c:	f7ff ffac 	bl	80119a8 <__sfp_lock_acquire>
 8011a50:	4b1e      	ldr	r3, [pc, #120]	; (8011acc <__sfp+0x84>)
 8011a52:	681e      	ldr	r6, [r3, #0]
 8011a54:	69b3      	ldr	r3, [r6, #24]
 8011a56:	b913      	cbnz	r3, 8011a5e <__sfp+0x16>
 8011a58:	4630      	mov	r0, r6
 8011a5a:	f7ff ffbd 	bl	80119d8 <__sinit>
 8011a5e:	3648      	adds	r6, #72	; 0x48
 8011a60:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8011a64:	3b01      	subs	r3, #1
 8011a66:	d503      	bpl.n	8011a70 <__sfp+0x28>
 8011a68:	6833      	ldr	r3, [r6, #0]
 8011a6a:	b30b      	cbz	r3, 8011ab0 <__sfp+0x68>
 8011a6c:	6836      	ldr	r6, [r6, #0]
 8011a6e:	e7f7      	b.n	8011a60 <__sfp+0x18>
 8011a70:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8011a74:	b9d5      	cbnz	r5, 8011aac <__sfp+0x64>
 8011a76:	4b16      	ldr	r3, [pc, #88]	; (8011ad0 <__sfp+0x88>)
 8011a78:	60e3      	str	r3, [r4, #12]
 8011a7a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8011a7e:	6665      	str	r5, [r4, #100]	; 0x64
 8011a80:	f000 f847 	bl	8011b12 <__retarget_lock_init_recursive>
 8011a84:	f7ff ff96 	bl	80119b4 <__sfp_lock_release>
 8011a88:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8011a8c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8011a90:	6025      	str	r5, [r4, #0]
 8011a92:	61a5      	str	r5, [r4, #24]
 8011a94:	2208      	movs	r2, #8
 8011a96:	4629      	mov	r1, r5
 8011a98:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8011a9c:	f7fd fabe 	bl	800f01c <memset>
 8011aa0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8011aa4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8011aa8:	4620      	mov	r0, r4
 8011aaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011aac:	3468      	adds	r4, #104	; 0x68
 8011aae:	e7d9      	b.n	8011a64 <__sfp+0x1c>
 8011ab0:	2104      	movs	r1, #4
 8011ab2:	4638      	mov	r0, r7
 8011ab4:	f7ff ff62 	bl	801197c <__sfmoreglue>
 8011ab8:	4604      	mov	r4, r0
 8011aba:	6030      	str	r0, [r6, #0]
 8011abc:	2800      	cmp	r0, #0
 8011abe:	d1d5      	bne.n	8011a6c <__sfp+0x24>
 8011ac0:	f7ff ff78 	bl	80119b4 <__sfp_lock_release>
 8011ac4:	230c      	movs	r3, #12
 8011ac6:	603b      	str	r3, [r7, #0]
 8011ac8:	e7ee      	b.n	8011aa8 <__sfp+0x60>
 8011aca:	bf00      	nop
 8011acc:	08014580 	.word	0x08014580
 8011ad0:	ffff0001 	.word	0xffff0001

08011ad4 <_fwalk_reent>:
 8011ad4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011ad8:	4606      	mov	r6, r0
 8011ada:	4688      	mov	r8, r1
 8011adc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011ae0:	2700      	movs	r7, #0
 8011ae2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011ae6:	f1b9 0901 	subs.w	r9, r9, #1
 8011aea:	d505      	bpl.n	8011af8 <_fwalk_reent+0x24>
 8011aec:	6824      	ldr	r4, [r4, #0]
 8011aee:	2c00      	cmp	r4, #0
 8011af0:	d1f7      	bne.n	8011ae2 <_fwalk_reent+0xe>
 8011af2:	4638      	mov	r0, r7
 8011af4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011af8:	89ab      	ldrh	r3, [r5, #12]
 8011afa:	2b01      	cmp	r3, #1
 8011afc:	d907      	bls.n	8011b0e <_fwalk_reent+0x3a>
 8011afe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011b02:	3301      	adds	r3, #1
 8011b04:	d003      	beq.n	8011b0e <_fwalk_reent+0x3a>
 8011b06:	4629      	mov	r1, r5
 8011b08:	4630      	mov	r0, r6
 8011b0a:	47c0      	blx	r8
 8011b0c:	4307      	orrs	r7, r0
 8011b0e:	3568      	adds	r5, #104	; 0x68
 8011b10:	e7e9      	b.n	8011ae6 <_fwalk_reent+0x12>

08011b12 <__retarget_lock_init_recursive>:
 8011b12:	4770      	bx	lr

08011b14 <__retarget_lock_acquire_recursive>:
 8011b14:	4770      	bx	lr

08011b16 <__retarget_lock_release_recursive>:
 8011b16:	4770      	bx	lr

08011b18 <__swhatbuf_r>:
 8011b18:	b570      	push	{r4, r5, r6, lr}
 8011b1a:	460e      	mov	r6, r1
 8011b1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011b20:	2900      	cmp	r1, #0
 8011b22:	b096      	sub	sp, #88	; 0x58
 8011b24:	4614      	mov	r4, r2
 8011b26:	461d      	mov	r5, r3
 8011b28:	da08      	bge.n	8011b3c <__swhatbuf_r+0x24>
 8011b2a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8011b2e:	2200      	movs	r2, #0
 8011b30:	602a      	str	r2, [r5, #0]
 8011b32:	061a      	lsls	r2, r3, #24
 8011b34:	d410      	bmi.n	8011b58 <__swhatbuf_r+0x40>
 8011b36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011b3a:	e00e      	b.n	8011b5a <__swhatbuf_r+0x42>
 8011b3c:	466a      	mov	r2, sp
 8011b3e:	f000 f903 	bl	8011d48 <_fstat_r>
 8011b42:	2800      	cmp	r0, #0
 8011b44:	dbf1      	blt.n	8011b2a <__swhatbuf_r+0x12>
 8011b46:	9a01      	ldr	r2, [sp, #4]
 8011b48:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8011b4c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011b50:	425a      	negs	r2, r3
 8011b52:	415a      	adcs	r2, r3
 8011b54:	602a      	str	r2, [r5, #0]
 8011b56:	e7ee      	b.n	8011b36 <__swhatbuf_r+0x1e>
 8011b58:	2340      	movs	r3, #64	; 0x40
 8011b5a:	2000      	movs	r0, #0
 8011b5c:	6023      	str	r3, [r4, #0]
 8011b5e:	b016      	add	sp, #88	; 0x58
 8011b60:	bd70      	pop	{r4, r5, r6, pc}
	...

08011b64 <__smakebuf_r>:
 8011b64:	898b      	ldrh	r3, [r1, #12]
 8011b66:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011b68:	079d      	lsls	r5, r3, #30
 8011b6a:	4606      	mov	r6, r0
 8011b6c:	460c      	mov	r4, r1
 8011b6e:	d507      	bpl.n	8011b80 <__smakebuf_r+0x1c>
 8011b70:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011b74:	6023      	str	r3, [r4, #0]
 8011b76:	6123      	str	r3, [r4, #16]
 8011b78:	2301      	movs	r3, #1
 8011b7a:	6163      	str	r3, [r4, #20]
 8011b7c:	b002      	add	sp, #8
 8011b7e:	bd70      	pop	{r4, r5, r6, pc}
 8011b80:	ab01      	add	r3, sp, #4
 8011b82:	466a      	mov	r2, sp
 8011b84:	f7ff ffc8 	bl	8011b18 <__swhatbuf_r>
 8011b88:	9900      	ldr	r1, [sp, #0]
 8011b8a:	4605      	mov	r5, r0
 8011b8c:	4630      	mov	r0, r6
 8011b8e:	f7ff f963 	bl	8010e58 <_malloc_r>
 8011b92:	b948      	cbnz	r0, 8011ba8 <__smakebuf_r+0x44>
 8011b94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011b98:	059a      	lsls	r2, r3, #22
 8011b9a:	d4ef      	bmi.n	8011b7c <__smakebuf_r+0x18>
 8011b9c:	f023 0303 	bic.w	r3, r3, #3
 8011ba0:	f043 0302 	orr.w	r3, r3, #2
 8011ba4:	81a3      	strh	r3, [r4, #12]
 8011ba6:	e7e3      	b.n	8011b70 <__smakebuf_r+0xc>
 8011ba8:	4b0d      	ldr	r3, [pc, #52]	; (8011be0 <__smakebuf_r+0x7c>)
 8011baa:	62b3      	str	r3, [r6, #40]	; 0x28
 8011bac:	89a3      	ldrh	r3, [r4, #12]
 8011bae:	6020      	str	r0, [r4, #0]
 8011bb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011bb4:	81a3      	strh	r3, [r4, #12]
 8011bb6:	9b00      	ldr	r3, [sp, #0]
 8011bb8:	6163      	str	r3, [r4, #20]
 8011bba:	9b01      	ldr	r3, [sp, #4]
 8011bbc:	6120      	str	r0, [r4, #16]
 8011bbe:	b15b      	cbz	r3, 8011bd8 <__smakebuf_r+0x74>
 8011bc0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011bc4:	4630      	mov	r0, r6
 8011bc6:	f000 f8d1 	bl	8011d6c <_isatty_r>
 8011bca:	b128      	cbz	r0, 8011bd8 <__smakebuf_r+0x74>
 8011bcc:	89a3      	ldrh	r3, [r4, #12]
 8011bce:	f023 0303 	bic.w	r3, r3, #3
 8011bd2:	f043 0301 	orr.w	r3, r3, #1
 8011bd6:	81a3      	strh	r3, [r4, #12]
 8011bd8:	89a0      	ldrh	r0, [r4, #12]
 8011bda:	4305      	orrs	r5, r0
 8011bdc:	81a5      	strh	r5, [r4, #12]
 8011bde:	e7cd      	b.n	8011b7c <__smakebuf_r+0x18>
 8011be0:	08011971 	.word	0x08011971

08011be4 <_malloc_usable_size_r>:
 8011be4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011be8:	1f18      	subs	r0, r3, #4
 8011bea:	2b00      	cmp	r3, #0
 8011bec:	bfbc      	itt	lt
 8011bee:	580b      	ldrlt	r3, [r1, r0]
 8011bf0:	18c0      	addlt	r0, r0, r3
 8011bf2:	4770      	bx	lr

08011bf4 <_raise_r>:
 8011bf4:	291f      	cmp	r1, #31
 8011bf6:	b538      	push	{r3, r4, r5, lr}
 8011bf8:	4604      	mov	r4, r0
 8011bfa:	460d      	mov	r5, r1
 8011bfc:	d904      	bls.n	8011c08 <_raise_r+0x14>
 8011bfe:	2316      	movs	r3, #22
 8011c00:	6003      	str	r3, [r0, #0]
 8011c02:	f04f 30ff 	mov.w	r0, #4294967295
 8011c06:	bd38      	pop	{r3, r4, r5, pc}
 8011c08:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8011c0a:	b112      	cbz	r2, 8011c12 <_raise_r+0x1e>
 8011c0c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011c10:	b94b      	cbnz	r3, 8011c26 <_raise_r+0x32>
 8011c12:	4620      	mov	r0, r4
 8011c14:	f000 f830 	bl	8011c78 <_getpid_r>
 8011c18:	462a      	mov	r2, r5
 8011c1a:	4601      	mov	r1, r0
 8011c1c:	4620      	mov	r0, r4
 8011c1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011c22:	f000 b817 	b.w	8011c54 <_kill_r>
 8011c26:	2b01      	cmp	r3, #1
 8011c28:	d00a      	beq.n	8011c40 <_raise_r+0x4c>
 8011c2a:	1c59      	adds	r1, r3, #1
 8011c2c:	d103      	bne.n	8011c36 <_raise_r+0x42>
 8011c2e:	2316      	movs	r3, #22
 8011c30:	6003      	str	r3, [r0, #0]
 8011c32:	2001      	movs	r0, #1
 8011c34:	e7e7      	b.n	8011c06 <_raise_r+0x12>
 8011c36:	2400      	movs	r4, #0
 8011c38:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011c3c:	4628      	mov	r0, r5
 8011c3e:	4798      	blx	r3
 8011c40:	2000      	movs	r0, #0
 8011c42:	e7e0      	b.n	8011c06 <_raise_r+0x12>

08011c44 <raise>:
 8011c44:	4b02      	ldr	r3, [pc, #8]	; (8011c50 <raise+0xc>)
 8011c46:	4601      	mov	r1, r0
 8011c48:	6818      	ldr	r0, [r3, #0]
 8011c4a:	f7ff bfd3 	b.w	8011bf4 <_raise_r>
 8011c4e:	bf00      	nop
 8011c50:	2000001c 	.word	0x2000001c

08011c54 <_kill_r>:
 8011c54:	b538      	push	{r3, r4, r5, lr}
 8011c56:	4d07      	ldr	r5, [pc, #28]	; (8011c74 <_kill_r+0x20>)
 8011c58:	2300      	movs	r3, #0
 8011c5a:	4604      	mov	r4, r0
 8011c5c:	4608      	mov	r0, r1
 8011c5e:	4611      	mov	r1, r2
 8011c60:	602b      	str	r3, [r5, #0]
 8011c62:	f7f2 fb29 	bl	80042b8 <_kill>
 8011c66:	1c43      	adds	r3, r0, #1
 8011c68:	d102      	bne.n	8011c70 <_kill_r+0x1c>
 8011c6a:	682b      	ldr	r3, [r5, #0]
 8011c6c:	b103      	cbz	r3, 8011c70 <_kill_r+0x1c>
 8011c6e:	6023      	str	r3, [r4, #0]
 8011c70:	bd38      	pop	{r3, r4, r5, pc}
 8011c72:	bf00      	nop
 8011c74:	2000687c 	.word	0x2000687c

08011c78 <_getpid_r>:
 8011c78:	f7f2 bb16 	b.w	80042a8 <_getpid>

08011c7c <__sread>:
 8011c7c:	b510      	push	{r4, lr}
 8011c7e:	460c      	mov	r4, r1
 8011c80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011c84:	f000 f894 	bl	8011db0 <_read_r>
 8011c88:	2800      	cmp	r0, #0
 8011c8a:	bfab      	itete	ge
 8011c8c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8011c8e:	89a3      	ldrhlt	r3, [r4, #12]
 8011c90:	181b      	addge	r3, r3, r0
 8011c92:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011c96:	bfac      	ite	ge
 8011c98:	6563      	strge	r3, [r4, #84]	; 0x54
 8011c9a:	81a3      	strhlt	r3, [r4, #12]
 8011c9c:	bd10      	pop	{r4, pc}

08011c9e <__swrite>:
 8011c9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011ca2:	461f      	mov	r7, r3
 8011ca4:	898b      	ldrh	r3, [r1, #12]
 8011ca6:	05db      	lsls	r3, r3, #23
 8011ca8:	4605      	mov	r5, r0
 8011caa:	460c      	mov	r4, r1
 8011cac:	4616      	mov	r6, r2
 8011cae:	d505      	bpl.n	8011cbc <__swrite+0x1e>
 8011cb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011cb4:	2302      	movs	r3, #2
 8011cb6:	2200      	movs	r2, #0
 8011cb8:	f000 f868 	bl	8011d8c <_lseek_r>
 8011cbc:	89a3      	ldrh	r3, [r4, #12]
 8011cbe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011cc2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011cc6:	81a3      	strh	r3, [r4, #12]
 8011cc8:	4632      	mov	r2, r6
 8011cca:	463b      	mov	r3, r7
 8011ccc:	4628      	mov	r0, r5
 8011cce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011cd2:	f000 b817 	b.w	8011d04 <_write_r>

08011cd6 <__sseek>:
 8011cd6:	b510      	push	{r4, lr}
 8011cd8:	460c      	mov	r4, r1
 8011cda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011cde:	f000 f855 	bl	8011d8c <_lseek_r>
 8011ce2:	1c43      	adds	r3, r0, #1
 8011ce4:	89a3      	ldrh	r3, [r4, #12]
 8011ce6:	bf15      	itete	ne
 8011ce8:	6560      	strne	r0, [r4, #84]	; 0x54
 8011cea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8011cee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011cf2:	81a3      	strheq	r3, [r4, #12]
 8011cf4:	bf18      	it	ne
 8011cf6:	81a3      	strhne	r3, [r4, #12]
 8011cf8:	bd10      	pop	{r4, pc}

08011cfa <__sclose>:
 8011cfa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011cfe:	f000 b813 	b.w	8011d28 <_close_r>
	...

08011d04 <_write_r>:
 8011d04:	b538      	push	{r3, r4, r5, lr}
 8011d06:	4d07      	ldr	r5, [pc, #28]	; (8011d24 <_write_r+0x20>)
 8011d08:	4604      	mov	r4, r0
 8011d0a:	4608      	mov	r0, r1
 8011d0c:	4611      	mov	r1, r2
 8011d0e:	2200      	movs	r2, #0
 8011d10:	602a      	str	r2, [r5, #0]
 8011d12:	461a      	mov	r2, r3
 8011d14:	f7f2 fb07 	bl	8004326 <_write>
 8011d18:	1c43      	adds	r3, r0, #1
 8011d1a:	d102      	bne.n	8011d22 <_write_r+0x1e>
 8011d1c:	682b      	ldr	r3, [r5, #0]
 8011d1e:	b103      	cbz	r3, 8011d22 <_write_r+0x1e>
 8011d20:	6023      	str	r3, [r4, #0]
 8011d22:	bd38      	pop	{r3, r4, r5, pc}
 8011d24:	2000687c 	.word	0x2000687c

08011d28 <_close_r>:
 8011d28:	b538      	push	{r3, r4, r5, lr}
 8011d2a:	4d06      	ldr	r5, [pc, #24]	; (8011d44 <_close_r+0x1c>)
 8011d2c:	2300      	movs	r3, #0
 8011d2e:	4604      	mov	r4, r0
 8011d30:	4608      	mov	r0, r1
 8011d32:	602b      	str	r3, [r5, #0]
 8011d34:	f7f2 fb13 	bl	800435e <_close>
 8011d38:	1c43      	adds	r3, r0, #1
 8011d3a:	d102      	bne.n	8011d42 <_close_r+0x1a>
 8011d3c:	682b      	ldr	r3, [r5, #0]
 8011d3e:	b103      	cbz	r3, 8011d42 <_close_r+0x1a>
 8011d40:	6023      	str	r3, [r4, #0]
 8011d42:	bd38      	pop	{r3, r4, r5, pc}
 8011d44:	2000687c 	.word	0x2000687c

08011d48 <_fstat_r>:
 8011d48:	b538      	push	{r3, r4, r5, lr}
 8011d4a:	4d07      	ldr	r5, [pc, #28]	; (8011d68 <_fstat_r+0x20>)
 8011d4c:	2300      	movs	r3, #0
 8011d4e:	4604      	mov	r4, r0
 8011d50:	4608      	mov	r0, r1
 8011d52:	4611      	mov	r1, r2
 8011d54:	602b      	str	r3, [r5, #0]
 8011d56:	f7f2 fb0e 	bl	8004376 <_fstat>
 8011d5a:	1c43      	adds	r3, r0, #1
 8011d5c:	d102      	bne.n	8011d64 <_fstat_r+0x1c>
 8011d5e:	682b      	ldr	r3, [r5, #0]
 8011d60:	b103      	cbz	r3, 8011d64 <_fstat_r+0x1c>
 8011d62:	6023      	str	r3, [r4, #0]
 8011d64:	bd38      	pop	{r3, r4, r5, pc}
 8011d66:	bf00      	nop
 8011d68:	2000687c 	.word	0x2000687c

08011d6c <_isatty_r>:
 8011d6c:	b538      	push	{r3, r4, r5, lr}
 8011d6e:	4d06      	ldr	r5, [pc, #24]	; (8011d88 <_isatty_r+0x1c>)
 8011d70:	2300      	movs	r3, #0
 8011d72:	4604      	mov	r4, r0
 8011d74:	4608      	mov	r0, r1
 8011d76:	602b      	str	r3, [r5, #0]
 8011d78:	f7f2 fb0d 	bl	8004396 <_isatty>
 8011d7c:	1c43      	adds	r3, r0, #1
 8011d7e:	d102      	bne.n	8011d86 <_isatty_r+0x1a>
 8011d80:	682b      	ldr	r3, [r5, #0]
 8011d82:	b103      	cbz	r3, 8011d86 <_isatty_r+0x1a>
 8011d84:	6023      	str	r3, [r4, #0]
 8011d86:	bd38      	pop	{r3, r4, r5, pc}
 8011d88:	2000687c 	.word	0x2000687c

08011d8c <_lseek_r>:
 8011d8c:	b538      	push	{r3, r4, r5, lr}
 8011d8e:	4d07      	ldr	r5, [pc, #28]	; (8011dac <_lseek_r+0x20>)
 8011d90:	4604      	mov	r4, r0
 8011d92:	4608      	mov	r0, r1
 8011d94:	4611      	mov	r1, r2
 8011d96:	2200      	movs	r2, #0
 8011d98:	602a      	str	r2, [r5, #0]
 8011d9a:	461a      	mov	r2, r3
 8011d9c:	f7f2 fb06 	bl	80043ac <_lseek>
 8011da0:	1c43      	adds	r3, r0, #1
 8011da2:	d102      	bne.n	8011daa <_lseek_r+0x1e>
 8011da4:	682b      	ldr	r3, [r5, #0]
 8011da6:	b103      	cbz	r3, 8011daa <_lseek_r+0x1e>
 8011da8:	6023      	str	r3, [r4, #0]
 8011daa:	bd38      	pop	{r3, r4, r5, pc}
 8011dac:	2000687c 	.word	0x2000687c

08011db0 <_read_r>:
 8011db0:	b538      	push	{r3, r4, r5, lr}
 8011db2:	4d07      	ldr	r5, [pc, #28]	; (8011dd0 <_read_r+0x20>)
 8011db4:	4604      	mov	r4, r0
 8011db6:	4608      	mov	r0, r1
 8011db8:	4611      	mov	r1, r2
 8011dba:	2200      	movs	r2, #0
 8011dbc:	602a      	str	r2, [r5, #0]
 8011dbe:	461a      	mov	r2, r3
 8011dc0:	f7f2 fa94 	bl	80042ec <_read>
 8011dc4:	1c43      	adds	r3, r0, #1
 8011dc6:	d102      	bne.n	8011dce <_read_r+0x1e>
 8011dc8:	682b      	ldr	r3, [r5, #0]
 8011dca:	b103      	cbz	r3, 8011dce <_read_r+0x1e>
 8011dcc:	6023      	str	r3, [r4, #0]
 8011dce:	bd38      	pop	{r3, r4, r5, pc}
 8011dd0:	2000687c 	.word	0x2000687c

08011dd4 <cosf>:
 8011dd4:	ee10 3a10 	vmov	r3, s0
 8011dd8:	b507      	push	{r0, r1, r2, lr}
 8011dda:	4a1e      	ldr	r2, [pc, #120]	; (8011e54 <cosf+0x80>)
 8011ddc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8011de0:	4293      	cmp	r3, r2
 8011de2:	dc06      	bgt.n	8011df2 <cosf+0x1e>
 8011de4:	eddf 0a1c 	vldr	s1, [pc, #112]	; 8011e58 <cosf+0x84>
 8011de8:	b003      	add	sp, #12
 8011dea:	f85d eb04 	ldr.w	lr, [sp], #4
 8011dee:	f001 bce7 	b.w	80137c0 <__kernel_cosf>
 8011df2:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8011df6:	db04      	blt.n	8011e02 <cosf+0x2e>
 8011df8:	ee30 0a40 	vsub.f32	s0, s0, s0
 8011dfc:	b003      	add	sp, #12
 8011dfe:	f85d fb04 	ldr.w	pc, [sp], #4
 8011e02:	4668      	mov	r0, sp
 8011e04:	f001 fb9c 	bl	8013540 <__ieee754_rem_pio2f>
 8011e08:	f000 0003 	and.w	r0, r0, #3
 8011e0c:	2801      	cmp	r0, #1
 8011e0e:	d009      	beq.n	8011e24 <cosf+0x50>
 8011e10:	2802      	cmp	r0, #2
 8011e12:	d010      	beq.n	8011e36 <cosf+0x62>
 8011e14:	b9b0      	cbnz	r0, 8011e44 <cosf+0x70>
 8011e16:	eddd 0a01 	vldr	s1, [sp, #4]
 8011e1a:	ed9d 0a00 	vldr	s0, [sp]
 8011e1e:	f001 fccf 	bl	80137c0 <__kernel_cosf>
 8011e22:	e7eb      	b.n	8011dfc <cosf+0x28>
 8011e24:	eddd 0a01 	vldr	s1, [sp, #4]
 8011e28:	ed9d 0a00 	vldr	s0, [sp]
 8011e2c:	f001 ff9e 	bl	8013d6c <__kernel_sinf>
 8011e30:	eeb1 0a40 	vneg.f32	s0, s0
 8011e34:	e7e2      	b.n	8011dfc <cosf+0x28>
 8011e36:	eddd 0a01 	vldr	s1, [sp, #4]
 8011e3a:	ed9d 0a00 	vldr	s0, [sp]
 8011e3e:	f001 fcbf 	bl	80137c0 <__kernel_cosf>
 8011e42:	e7f5      	b.n	8011e30 <cosf+0x5c>
 8011e44:	eddd 0a01 	vldr	s1, [sp, #4]
 8011e48:	ed9d 0a00 	vldr	s0, [sp]
 8011e4c:	2001      	movs	r0, #1
 8011e4e:	f001 ff8d 	bl	8013d6c <__kernel_sinf>
 8011e52:	e7d3      	b.n	8011dfc <cosf+0x28>
 8011e54:	3f490fd8 	.word	0x3f490fd8
 8011e58:	00000000 	.word	0x00000000

08011e5c <sinf>:
 8011e5c:	ee10 3a10 	vmov	r3, s0
 8011e60:	b507      	push	{r0, r1, r2, lr}
 8011e62:	4a1f      	ldr	r2, [pc, #124]	; (8011ee0 <sinf+0x84>)
 8011e64:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8011e68:	4293      	cmp	r3, r2
 8011e6a:	dc07      	bgt.n	8011e7c <sinf+0x20>
 8011e6c:	eddf 0a1d 	vldr	s1, [pc, #116]	; 8011ee4 <sinf+0x88>
 8011e70:	2000      	movs	r0, #0
 8011e72:	b003      	add	sp, #12
 8011e74:	f85d eb04 	ldr.w	lr, [sp], #4
 8011e78:	f001 bf78 	b.w	8013d6c <__kernel_sinf>
 8011e7c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8011e80:	db04      	blt.n	8011e8c <sinf+0x30>
 8011e82:	ee30 0a40 	vsub.f32	s0, s0, s0
 8011e86:	b003      	add	sp, #12
 8011e88:	f85d fb04 	ldr.w	pc, [sp], #4
 8011e8c:	4668      	mov	r0, sp
 8011e8e:	f001 fb57 	bl	8013540 <__ieee754_rem_pio2f>
 8011e92:	f000 0003 	and.w	r0, r0, #3
 8011e96:	2801      	cmp	r0, #1
 8011e98:	d00a      	beq.n	8011eb0 <sinf+0x54>
 8011e9a:	2802      	cmp	r0, #2
 8011e9c:	d00f      	beq.n	8011ebe <sinf+0x62>
 8011e9e:	b9c0      	cbnz	r0, 8011ed2 <sinf+0x76>
 8011ea0:	eddd 0a01 	vldr	s1, [sp, #4]
 8011ea4:	ed9d 0a00 	vldr	s0, [sp]
 8011ea8:	2001      	movs	r0, #1
 8011eaa:	f001 ff5f 	bl	8013d6c <__kernel_sinf>
 8011eae:	e7ea      	b.n	8011e86 <sinf+0x2a>
 8011eb0:	eddd 0a01 	vldr	s1, [sp, #4]
 8011eb4:	ed9d 0a00 	vldr	s0, [sp]
 8011eb8:	f001 fc82 	bl	80137c0 <__kernel_cosf>
 8011ebc:	e7e3      	b.n	8011e86 <sinf+0x2a>
 8011ebe:	eddd 0a01 	vldr	s1, [sp, #4]
 8011ec2:	ed9d 0a00 	vldr	s0, [sp]
 8011ec6:	2001      	movs	r0, #1
 8011ec8:	f001 ff50 	bl	8013d6c <__kernel_sinf>
 8011ecc:	eeb1 0a40 	vneg.f32	s0, s0
 8011ed0:	e7d9      	b.n	8011e86 <sinf+0x2a>
 8011ed2:	eddd 0a01 	vldr	s1, [sp, #4]
 8011ed6:	ed9d 0a00 	vldr	s0, [sp]
 8011eda:	f001 fc71 	bl	80137c0 <__kernel_cosf>
 8011ede:	e7f5      	b.n	8011ecc <sinf+0x70>
 8011ee0:	3f490fd8 	.word	0x3f490fd8
 8011ee4:	00000000 	.word	0x00000000

08011ee8 <pow>:
 8011ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011eea:	ed2d 8b02 	vpush	{d8}
 8011eee:	eeb0 8a40 	vmov.f32	s16, s0
 8011ef2:	eef0 8a60 	vmov.f32	s17, s1
 8011ef6:	ec55 4b11 	vmov	r4, r5, d1
 8011efa:	f000 f8ed 	bl	80120d8 <__ieee754_pow>
 8011efe:	4622      	mov	r2, r4
 8011f00:	462b      	mov	r3, r5
 8011f02:	4620      	mov	r0, r4
 8011f04:	4629      	mov	r1, r5
 8011f06:	ec57 6b10 	vmov	r6, r7, d0
 8011f0a:	f7ee fe0f 	bl	8000b2c <__aeabi_dcmpun>
 8011f0e:	2800      	cmp	r0, #0
 8011f10:	d13b      	bne.n	8011f8a <pow+0xa2>
 8011f12:	ec51 0b18 	vmov	r0, r1, d8
 8011f16:	2200      	movs	r2, #0
 8011f18:	2300      	movs	r3, #0
 8011f1a:	f7ee fdd5 	bl	8000ac8 <__aeabi_dcmpeq>
 8011f1e:	b1b8      	cbz	r0, 8011f50 <pow+0x68>
 8011f20:	2200      	movs	r2, #0
 8011f22:	2300      	movs	r3, #0
 8011f24:	4620      	mov	r0, r4
 8011f26:	4629      	mov	r1, r5
 8011f28:	f7ee fdce 	bl	8000ac8 <__aeabi_dcmpeq>
 8011f2c:	2800      	cmp	r0, #0
 8011f2e:	d146      	bne.n	8011fbe <pow+0xd6>
 8011f30:	ec45 4b10 	vmov	d0, r4, r5
 8011f34:	f001 ffbd 	bl	8013eb2 <finite>
 8011f38:	b338      	cbz	r0, 8011f8a <pow+0xa2>
 8011f3a:	2200      	movs	r2, #0
 8011f3c:	2300      	movs	r3, #0
 8011f3e:	4620      	mov	r0, r4
 8011f40:	4629      	mov	r1, r5
 8011f42:	f7ee fdcb 	bl	8000adc <__aeabi_dcmplt>
 8011f46:	b300      	cbz	r0, 8011f8a <pow+0xa2>
 8011f48:	f7fd f830 	bl	800efac <__errno>
 8011f4c:	2322      	movs	r3, #34	; 0x22
 8011f4e:	e01b      	b.n	8011f88 <pow+0xa0>
 8011f50:	ec47 6b10 	vmov	d0, r6, r7
 8011f54:	f001 ffad 	bl	8013eb2 <finite>
 8011f58:	b9e0      	cbnz	r0, 8011f94 <pow+0xac>
 8011f5a:	eeb0 0a48 	vmov.f32	s0, s16
 8011f5e:	eef0 0a68 	vmov.f32	s1, s17
 8011f62:	f001 ffa6 	bl	8013eb2 <finite>
 8011f66:	b1a8      	cbz	r0, 8011f94 <pow+0xac>
 8011f68:	ec45 4b10 	vmov	d0, r4, r5
 8011f6c:	f001 ffa1 	bl	8013eb2 <finite>
 8011f70:	b180      	cbz	r0, 8011f94 <pow+0xac>
 8011f72:	4632      	mov	r2, r6
 8011f74:	463b      	mov	r3, r7
 8011f76:	4630      	mov	r0, r6
 8011f78:	4639      	mov	r1, r7
 8011f7a:	f7ee fdd7 	bl	8000b2c <__aeabi_dcmpun>
 8011f7e:	2800      	cmp	r0, #0
 8011f80:	d0e2      	beq.n	8011f48 <pow+0x60>
 8011f82:	f7fd f813 	bl	800efac <__errno>
 8011f86:	2321      	movs	r3, #33	; 0x21
 8011f88:	6003      	str	r3, [r0, #0]
 8011f8a:	ecbd 8b02 	vpop	{d8}
 8011f8e:	ec47 6b10 	vmov	d0, r6, r7
 8011f92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011f94:	2200      	movs	r2, #0
 8011f96:	2300      	movs	r3, #0
 8011f98:	4630      	mov	r0, r6
 8011f9a:	4639      	mov	r1, r7
 8011f9c:	f7ee fd94 	bl	8000ac8 <__aeabi_dcmpeq>
 8011fa0:	2800      	cmp	r0, #0
 8011fa2:	d0f2      	beq.n	8011f8a <pow+0xa2>
 8011fa4:	eeb0 0a48 	vmov.f32	s0, s16
 8011fa8:	eef0 0a68 	vmov.f32	s1, s17
 8011fac:	f001 ff81 	bl	8013eb2 <finite>
 8011fb0:	2800      	cmp	r0, #0
 8011fb2:	d0ea      	beq.n	8011f8a <pow+0xa2>
 8011fb4:	ec45 4b10 	vmov	d0, r4, r5
 8011fb8:	f001 ff7b 	bl	8013eb2 <finite>
 8011fbc:	e7c3      	b.n	8011f46 <pow+0x5e>
 8011fbe:	4f01      	ldr	r7, [pc, #4]	; (8011fc4 <pow+0xdc>)
 8011fc0:	2600      	movs	r6, #0
 8011fc2:	e7e2      	b.n	8011f8a <pow+0xa2>
 8011fc4:	3ff00000 	.word	0x3ff00000

08011fc8 <asinf>:
 8011fc8:	b508      	push	{r3, lr}
 8011fca:	ed2d 8b02 	vpush	{d8}
 8011fce:	eeb0 8a40 	vmov.f32	s16, s0
 8011fd2:	f000 fe61 	bl	8012c98 <__ieee754_asinf>
 8011fd6:	eeb4 8a48 	vcmp.f32	s16, s16
 8011fda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011fde:	eef0 8a40 	vmov.f32	s17, s0
 8011fe2:	d615      	bvs.n	8012010 <asinf+0x48>
 8011fe4:	eeb0 0a48 	vmov.f32	s0, s16
 8011fe8:	f002 f8c8 	bl	801417c <fabsf>
 8011fec:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8011ff0:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8011ff4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ff8:	dd0a      	ble.n	8012010 <asinf+0x48>
 8011ffa:	f7fc ffd7 	bl	800efac <__errno>
 8011ffe:	ecbd 8b02 	vpop	{d8}
 8012002:	2321      	movs	r3, #33	; 0x21
 8012004:	6003      	str	r3, [r0, #0]
 8012006:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801200a:	4804      	ldr	r0, [pc, #16]	; (801201c <asinf+0x54>)
 801200c:	f002 b90c 	b.w	8014228 <nanf>
 8012010:	eeb0 0a68 	vmov.f32	s0, s17
 8012014:	ecbd 8b02 	vpop	{d8}
 8012018:	bd08      	pop	{r3, pc}
 801201a:	bf00      	nop
 801201c:	080147f0 	.word	0x080147f0

08012020 <atan2f>:
 8012020:	f000 bf20 	b.w	8012e64 <__ieee754_atan2f>

08012024 <powf>:
 8012024:	b508      	push	{r3, lr}
 8012026:	ed2d 8b04 	vpush	{d8-d9}
 801202a:	eeb0 8a60 	vmov.f32	s16, s1
 801202e:	eeb0 9a40 	vmov.f32	s18, s0
 8012032:	f000 ffb7 	bl	8012fa4 <__ieee754_powf>
 8012036:	eeb4 8a48 	vcmp.f32	s16, s16
 801203a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801203e:	eef0 8a40 	vmov.f32	s17, s0
 8012042:	d63e      	bvs.n	80120c2 <powf+0x9e>
 8012044:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8012048:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801204c:	d112      	bne.n	8012074 <powf+0x50>
 801204e:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8012052:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012056:	d039      	beq.n	80120cc <powf+0xa8>
 8012058:	eeb0 0a48 	vmov.f32	s0, s16
 801205c:	f002 f895 	bl	801418a <finitef>
 8012060:	b378      	cbz	r0, 80120c2 <powf+0x9e>
 8012062:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8012066:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801206a:	d52a      	bpl.n	80120c2 <powf+0x9e>
 801206c:	f7fc ff9e 	bl	800efac <__errno>
 8012070:	2322      	movs	r3, #34	; 0x22
 8012072:	e014      	b.n	801209e <powf+0x7a>
 8012074:	f002 f889 	bl	801418a <finitef>
 8012078:	b998      	cbnz	r0, 80120a2 <powf+0x7e>
 801207a:	eeb0 0a49 	vmov.f32	s0, s18
 801207e:	f002 f884 	bl	801418a <finitef>
 8012082:	b170      	cbz	r0, 80120a2 <powf+0x7e>
 8012084:	eeb0 0a48 	vmov.f32	s0, s16
 8012088:	f002 f87f 	bl	801418a <finitef>
 801208c:	b148      	cbz	r0, 80120a2 <powf+0x7e>
 801208e:	eef4 8a68 	vcmp.f32	s17, s17
 8012092:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012096:	d7e9      	bvc.n	801206c <powf+0x48>
 8012098:	f7fc ff88 	bl	800efac <__errno>
 801209c:	2321      	movs	r3, #33	; 0x21
 801209e:	6003      	str	r3, [r0, #0]
 80120a0:	e00f      	b.n	80120c2 <powf+0x9e>
 80120a2:	eef5 8a40 	vcmp.f32	s17, #0.0
 80120a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80120aa:	d10a      	bne.n	80120c2 <powf+0x9e>
 80120ac:	eeb0 0a49 	vmov.f32	s0, s18
 80120b0:	f002 f86b 	bl	801418a <finitef>
 80120b4:	b128      	cbz	r0, 80120c2 <powf+0x9e>
 80120b6:	eeb0 0a48 	vmov.f32	s0, s16
 80120ba:	f002 f866 	bl	801418a <finitef>
 80120be:	2800      	cmp	r0, #0
 80120c0:	d1d4      	bne.n	801206c <powf+0x48>
 80120c2:	eeb0 0a68 	vmov.f32	s0, s17
 80120c6:	ecbd 8b04 	vpop	{d8-d9}
 80120ca:	bd08      	pop	{r3, pc}
 80120cc:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 80120d0:	e7f7      	b.n	80120c2 <powf+0x9e>
 80120d2:	0000      	movs	r0, r0
 80120d4:	0000      	movs	r0, r0
	...

080120d8 <__ieee754_pow>:
 80120d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80120dc:	ed2d 8b06 	vpush	{d8-d10}
 80120e0:	b089      	sub	sp, #36	; 0x24
 80120e2:	ed8d 1b00 	vstr	d1, [sp]
 80120e6:	e9dd 2900 	ldrd	r2, r9, [sp]
 80120ea:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 80120ee:	ea58 0102 	orrs.w	r1, r8, r2
 80120f2:	ec57 6b10 	vmov	r6, r7, d0
 80120f6:	d115      	bne.n	8012124 <__ieee754_pow+0x4c>
 80120f8:	19b3      	adds	r3, r6, r6
 80120fa:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 80120fe:	4152      	adcs	r2, r2
 8012100:	4299      	cmp	r1, r3
 8012102:	4b89      	ldr	r3, [pc, #548]	; (8012328 <__ieee754_pow+0x250>)
 8012104:	4193      	sbcs	r3, r2
 8012106:	f080 84d2 	bcs.w	8012aae <__ieee754_pow+0x9d6>
 801210a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801210e:	4630      	mov	r0, r6
 8012110:	4639      	mov	r1, r7
 8012112:	f7ee f8bb 	bl	800028c <__adddf3>
 8012116:	ec41 0b10 	vmov	d0, r0, r1
 801211a:	b009      	add	sp, #36	; 0x24
 801211c:	ecbd 8b06 	vpop	{d8-d10}
 8012120:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012124:	4b81      	ldr	r3, [pc, #516]	; (801232c <__ieee754_pow+0x254>)
 8012126:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 801212a:	429c      	cmp	r4, r3
 801212c:	ee10 aa10 	vmov	sl, s0
 8012130:	463d      	mov	r5, r7
 8012132:	dc06      	bgt.n	8012142 <__ieee754_pow+0x6a>
 8012134:	d101      	bne.n	801213a <__ieee754_pow+0x62>
 8012136:	2e00      	cmp	r6, #0
 8012138:	d1e7      	bne.n	801210a <__ieee754_pow+0x32>
 801213a:	4598      	cmp	r8, r3
 801213c:	dc01      	bgt.n	8012142 <__ieee754_pow+0x6a>
 801213e:	d10f      	bne.n	8012160 <__ieee754_pow+0x88>
 8012140:	b172      	cbz	r2, 8012160 <__ieee754_pow+0x88>
 8012142:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8012146:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 801214a:	ea55 050a 	orrs.w	r5, r5, sl
 801214e:	d1dc      	bne.n	801210a <__ieee754_pow+0x32>
 8012150:	e9dd 3200 	ldrd	r3, r2, [sp]
 8012154:	18db      	adds	r3, r3, r3
 8012156:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 801215a:	4152      	adcs	r2, r2
 801215c:	429d      	cmp	r5, r3
 801215e:	e7d0      	b.n	8012102 <__ieee754_pow+0x2a>
 8012160:	2d00      	cmp	r5, #0
 8012162:	da3b      	bge.n	80121dc <__ieee754_pow+0x104>
 8012164:	4b72      	ldr	r3, [pc, #456]	; (8012330 <__ieee754_pow+0x258>)
 8012166:	4598      	cmp	r8, r3
 8012168:	dc51      	bgt.n	801220e <__ieee754_pow+0x136>
 801216a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 801216e:	4598      	cmp	r8, r3
 8012170:	f340 84ac 	ble.w	8012acc <__ieee754_pow+0x9f4>
 8012174:	ea4f 5328 	mov.w	r3, r8, asr #20
 8012178:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801217c:	2b14      	cmp	r3, #20
 801217e:	dd0f      	ble.n	80121a0 <__ieee754_pow+0xc8>
 8012180:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8012184:	fa22 f103 	lsr.w	r1, r2, r3
 8012188:	fa01 f303 	lsl.w	r3, r1, r3
 801218c:	4293      	cmp	r3, r2
 801218e:	f040 849d 	bne.w	8012acc <__ieee754_pow+0x9f4>
 8012192:	f001 0101 	and.w	r1, r1, #1
 8012196:	f1c1 0302 	rsb	r3, r1, #2
 801219a:	9304      	str	r3, [sp, #16]
 801219c:	b182      	cbz	r2, 80121c0 <__ieee754_pow+0xe8>
 801219e:	e05f      	b.n	8012260 <__ieee754_pow+0x188>
 80121a0:	2a00      	cmp	r2, #0
 80121a2:	d15b      	bne.n	801225c <__ieee754_pow+0x184>
 80121a4:	f1c3 0314 	rsb	r3, r3, #20
 80121a8:	fa48 f103 	asr.w	r1, r8, r3
 80121ac:	fa01 f303 	lsl.w	r3, r1, r3
 80121b0:	4543      	cmp	r3, r8
 80121b2:	f040 8488 	bne.w	8012ac6 <__ieee754_pow+0x9ee>
 80121b6:	f001 0101 	and.w	r1, r1, #1
 80121ba:	f1c1 0302 	rsb	r3, r1, #2
 80121be:	9304      	str	r3, [sp, #16]
 80121c0:	4b5c      	ldr	r3, [pc, #368]	; (8012334 <__ieee754_pow+0x25c>)
 80121c2:	4598      	cmp	r8, r3
 80121c4:	d132      	bne.n	801222c <__ieee754_pow+0x154>
 80121c6:	f1b9 0f00 	cmp.w	r9, #0
 80121ca:	f280 8478 	bge.w	8012abe <__ieee754_pow+0x9e6>
 80121ce:	4959      	ldr	r1, [pc, #356]	; (8012334 <__ieee754_pow+0x25c>)
 80121d0:	4632      	mov	r2, r6
 80121d2:	463b      	mov	r3, r7
 80121d4:	2000      	movs	r0, #0
 80121d6:	f7ee fb39 	bl	800084c <__aeabi_ddiv>
 80121da:	e79c      	b.n	8012116 <__ieee754_pow+0x3e>
 80121dc:	2300      	movs	r3, #0
 80121de:	9304      	str	r3, [sp, #16]
 80121e0:	2a00      	cmp	r2, #0
 80121e2:	d13d      	bne.n	8012260 <__ieee754_pow+0x188>
 80121e4:	4b51      	ldr	r3, [pc, #324]	; (801232c <__ieee754_pow+0x254>)
 80121e6:	4598      	cmp	r8, r3
 80121e8:	d1ea      	bne.n	80121c0 <__ieee754_pow+0xe8>
 80121ea:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80121ee:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80121f2:	ea53 030a 	orrs.w	r3, r3, sl
 80121f6:	f000 845a 	beq.w	8012aae <__ieee754_pow+0x9d6>
 80121fa:	4b4f      	ldr	r3, [pc, #316]	; (8012338 <__ieee754_pow+0x260>)
 80121fc:	429c      	cmp	r4, r3
 80121fe:	dd08      	ble.n	8012212 <__ieee754_pow+0x13a>
 8012200:	f1b9 0f00 	cmp.w	r9, #0
 8012204:	f2c0 8457 	blt.w	8012ab6 <__ieee754_pow+0x9de>
 8012208:	e9dd 0100 	ldrd	r0, r1, [sp]
 801220c:	e783      	b.n	8012116 <__ieee754_pow+0x3e>
 801220e:	2302      	movs	r3, #2
 8012210:	e7e5      	b.n	80121de <__ieee754_pow+0x106>
 8012212:	f1b9 0f00 	cmp.w	r9, #0
 8012216:	f04f 0000 	mov.w	r0, #0
 801221a:	f04f 0100 	mov.w	r1, #0
 801221e:	f6bf af7a 	bge.w	8012116 <__ieee754_pow+0x3e>
 8012222:	e9dd 0300 	ldrd	r0, r3, [sp]
 8012226:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801222a:	e774      	b.n	8012116 <__ieee754_pow+0x3e>
 801222c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8012230:	d106      	bne.n	8012240 <__ieee754_pow+0x168>
 8012232:	4632      	mov	r2, r6
 8012234:	463b      	mov	r3, r7
 8012236:	4630      	mov	r0, r6
 8012238:	4639      	mov	r1, r7
 801223a:	f7ee f9dd 	bl	80005f8 <__aeabi_dmul>
 801223e:	e76a      	b.n	8012116 <__ieee754_pow+0x3e>
 8012240:	4b3e      	ldr	r3, [pc, #248]	; (801233c <__ieee754_pow+0x264>)
 8012242:	4599      	cmp	r9, r3
 8012244:	d10c      	bne.n	8012260 <__ieee754_pow+0x188>
 8012246:	2d00      	cmp	r5, #0
 8012248:	db0a      	blt.n	8012260 <__ieee754_pow+0x188>
 801224a:	ec47 6b10 	vmov	d0, r6, r7
 801224e:	b009      	add	sp, #36	; 0x24
 8012250:	ecbd 8b06 	vpop	{d8-d10}
 8012254:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012258:	f000 bc6c 	b.w	8012b34 <__ieee754_sqrt>
 801225c:	2300      	movs	r3, #0
 801225e:	9304      	str	r3, [sp, #16]
 8012260:	ec47 6b10 	vmov	d0, r6, r7
 8012264:	f001 fe1c 	bl	8013ea0 <fabs>
 8012268:	ec51 0b10 	vmov	r0, r1, d0
 801226c:	f1ba 0f00 	cmp.w	sl, #0
 8012270:	d129      	bne.n	80122c6 <__ieee754_pow+0x1ee>
 8012272:	b124      	cbz	r4, 801227e <__ieee754_pow+0x1a6>
 8012274:	4b2f      	ldr	r3, [pc, #188]	; (8012334 <__ieee754_pow+0x25c>)
 8012276:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 801227a:	429a      	cmp	r2, r3
 801227c:	d123      	bne.n	80122c6 <__ieee754_pow+0x1ee>
 801227e:	f1b9 0f00 	cmp.w	r9, #0
 8012282:	da05      	bge.n	8012290 <__ieee754_pow+0x1b8>
 8012284:	4602      	mov	r2, r0
 8012286:	460b      	mov	r3, r1
 8012288:	2000      	movs	r0, #0
 801228a:	492a      	ldr	r1, [pc, #168]	; (8012334 <__ieee754_pow+0x25c>)
 801228c:	f7ee fade 	bl	800084c <__aeabi_ddiv>
 8012290:	2d00      	cmp	r5, #0
 8012292:	f6bf af40 	bge.w	8012116 <__ieee754_pow+0x3e>
 8012296:	9b04      	ldr	r3, [sp, #16]
 8012298:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801229c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80122a0:	4323      	orrs	r3, r4
 80122a2:	d108      	bne.n	80122b6 <__ieee754_pow+0x1de>
 80122a4:	4602      	mov	r2, r0
 80122a6:	460b      	mov	r3, r1
 80122a8:	4610      	mov	r0, r2
 80122aa:	4619      	mov	r1, r3
 80122ac:	f7ed ffec 	bl	8000288 <__aeabi_dsub>
 80122b0:	4602      	mov	r2, r0
 80122b2:	460b      	mov	r3, r1
 80122b4:	e78f      	b.n	80121d6 <__ieee754_pow+0xfe>
 80122b6:	9b04      	ldr	r3, [sp, #16]
 80122b8:	2b01      	cmp	r3, #1
 80122ba:	f47f af2c 	bne.w	8012116 <__ieee754_pow+0x3e>
 80122be:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80122c2:	4619      	mov	r1, r3
 80122c4:	e727      	b.n	8012116 <__ieee754_pow+0x3e>
 80122c6:	0feb      	lsrs	r3, r5, #31
 80122c8:	3b01      	subs	r3, #1
 80122ca:	9306      	str	r3, [sp, #24]
 80122cc:	9a06      	ldr	r2, [sp, #24]
 80122ce:	9b04      	ldr	r3, [sp, #16]
 80122d0:	4313      	orrs	r3, r2
 80122d2:	d102      	bne.n	80122da <__ieee754_pow+0x202>
 80122d4:	4632      	mov	r2, r6
 80122d6:	463b      	mov	r3, r7
 80122d8:	e7e6      	b.n	80122a8 <__ieee754_pow+0x1d0>
 80122da:	4b19      	ldr	r3, [pc, #100]	; (8012340 <__ieee754_pow+0x268>)
 80122dc:	4598      	cmp	r8, r3
 80122de:	f340 80fb 	ble.w	80124d8 <__ieee754_pow+0x400>
 80122e2:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80122e6:	4598      	cmp	r8, r3
 80122e8:	4b13      	ldr	r3, [pc, #76]	; (8012338 <__ieee754_pow+0x260>)
 80122ea:	dd0c      	ble.n	8012306 <__ieee754_pow+0x22e>
 80122ec:	429c      	cmp	r4, r3
 80122ee:	dc0f      	bgt.n	8012310 <__ieee754_pow+0x238>
 80122f0:	f1b9 0f00 	cmp.w	r9, #0
 80122f4:	da0f      	bge.n	8012316 <__ieee754_pow+0x23e>
 80122f6:	2000      	movs	r0, #0
 80122f8:	b009      	add	sp, #36	; 0x24
 80122fa:	ecbd 8b06 	vpop	{d8-d10}
 80122fe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012302:	f001 bda2 	b.w	8013e4a <__math_oflow>
 8012306:	429c      	cmp	r4, r3
 8012308:	dbf2      	blt.n	80122f0 <__ieee754_pow+0x218>
 801230a:	4b0a      	ldr	r3, [pc, #40]	; (8012334 <__ieee754_pow+0x25c>)
 801230c:	429c      	cmp	r4, r3
 801230e:	dd19      	ble.n	8012344 <__ieee754_pow+0x26c>
 8012310:	f1b9 0f00 	cmp.w	r9, #0
 8012314:	dcef      	bgt.n	80122f6 <__ieee754_pow+0x21e>
 8012316:	2000      	movs	r0, #0
 8012318:	b009      	add	sp, #36	; 0x24
 801231a:	ecbd 8b06 	vpop	{d8-d10}
 801231e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012322:	f001 bd89 	b.w	8013e38 <__math_uflow>
 8012326:	bf00      	nop
 8012328:	fff00000 	.word	0xfff00000
 801232c:	7ff00000 	.word	0x7ff00000
 8012330:	433fffff 	.word	0x433fffff
 8012334:	3ff00000 	.word	0x3ff00000
 8012338:	3fefffff 	.word	0x3fefffff
 801233c:	3fe00000 	.word	0x3fe00000
 8012340:	41e00000 	.word	0x41e00000
 8012344:	4b60      	ldr	r3, [pc, #384]	; (80124c8 <__ieee754_pow+0x3f0>)
 8012346:	2200      	movs	r2, #0
 8012348:	f7ed ff9e 	bl	8000288 <__aeabi_dsub>
 801234c:	a354      	add	r3, pc, #336	; (adr r3, 80124a0 <__ieee754_pow+0x3c8>)
 801234e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012352:	4604      	mov	r4, r0
 8012354:	460d      	mov	r5, r1
 8012356:	f7ee f94f 	bl	80005f8 <__aeabi_dmul>
 801235a:	a353      	add	r3, pc, #332	; (adr r3, 80124a8 <__ieee754_pow+0x3d0>)
 801235c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012360:	4606      	mov	r6, r0
 8012362:	460f      	mov	r7, r1
 8012364:	4620      	mov	r0, r4
 8012366:	4629      	mov	r1, r5
 8012368:	f7ee f946 	bl	80005f8 <__aeabi_dmul>
 801236c:	4b57      	ldr	r3, [pc, #348]	; (80124cc <__ieee754_pow+0x3f4>)
 801236e:	4682      	mov	sl, r0
 8012370:	468b      	mov	fp, r1
 8012372:	2200      	movs	r2, #0
 8012374:	4620      	mov	r0, r4
 8012376:	4629      	mov	r1, r5
 8012378:	f7ee f93e 	bl	80005f8 <__aeabi_dmul>
 801237c:	4602      	mov	r2, r0
 801237e:	460b      	mov	r3, r1
 8012380:	a14b      	add	r1, pc, #300	; (adr r1, 80124b0 <__ieee754_pow+0x3d8>)
 8012382:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012386:	f7ed ff7f 	bl	8000288 <__aeabi_dsub>
 801238a:	4622      	mov	r2, r4
 801238c:	462b      	mov	r3, r5
 801238e:	f7ee f933 	bl	80005f8 <__aeabi_dmul>
 8012392:	4602      	mov	r2, r0
 8012394:	460b      	mov	r3, r1
 8012396:	2000      	movs	r0, #0
 8012398:	494d      	ldr	r1, [pc, #308]	; (80124d0 <__ieee754_pow+0x3f8>)
 801239a:	f7ed ff75 	bl	8000288 <__aeabi_dsub>
 801239e:	4622      	mov	r2, r4
 80123a0:	4680      	mov	r8, r0
 80123a2:	4689      	mov	r9, r1
 80123a4:	462b      	mov	r3, r5
 80123a6:	4620      	mov	r0, r4
 80123a8:	4629      	mov	r1, r5
 80123aa:	f7ee f925 	bl	80005f8 <__aeabi_dmul>
 80123ae:	4602      	mov	r2, r0
 80123b0:	460b      	mov	r3, r1
 80123b2:	4640      	mov	r0, r8
 80123b4:	4649      	mov	r1, r9
 80123b6:	f7ee f91f 	bl	80005f8 <__aeabi_dmul>
 80123ba:	a33f      	add	r3, pc, #252	; (adr r3, 80124b8 <__ieee754_pow+0x3e0>)
 80123bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123c0:	f7ee f91a 	bl	80005f8 <__aeabi_dmul>
 80123c4:	4602      	mov	r2, r0
 80123c6:	460b      	mov	r3, r1
 80123c8:	4650      	mov	r0, sl
 80123ca:	4659      	mov	r1, fp
 80123cc:	f7ed ff5c 	bl	8000288 <__aeabi_dsub>
 80123d0:	4602      	mov	r2, r0
 80123d2:	460b      	mov	r3, r1
 80123d4:	4680      	mov	r8, r0
 80123d6:	4689      	mov	r9, r1
 80123d8:	4630      	mov	r0, r6
 80123da:	4639      	mov	r1, r7
 80123dc:	f7ed ff56 	bl	800028c <__adddf3>
 80123e0:	2000      	movs	r0, #0
 80123e2:	4632      	mov	r2, r6
 80123e4:	463b      	mov	r3, r7
 80123e6:	4604      	mov	r4, r0
 80123e8:	460d      	mov	r5, r1
 80123ea:	f7ed ff4d 	bl	8000288 <__aeabi_dsub>
 80123ee:	4602      	mov	r2, r0
 80123f0:	460b      	mov	r3, r1
 80123f2:	4640      	mov	r0, r8
 80123f4:	4649      	mov	r1, r9
 80123f6:	f7ed ff47 	bl	8000288 <__aeabi_dsub>
 80123fa:	9b04      	ldr	r3, [sp, #16]
 80123fc:	9a06      	ldr	r2, [sp, #24]
 80123fe:	3b01      	subs	r3, #1
 8012400:	4313      	orrs	r3, r2
 8012402:	4682      	mov	sl, r0
 8012404:	468b      	mov	fp, r1
 8012406:	f040 81e7 	bne.w	80127d8 <__ieee754_pow+0x700>
 801240a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 80124c0 <__ieee754_pow+0x3e8>
 801240e:	eeb0 8a47 	vmov.f32	s16, s14
 8012412:	eef0 8a67 	vmov.f32	s17, s15
 8012416:	e9dd 6700 	ldrd	r6, r7, [sp]
 801241a:	2600      	movs	r6, #0
 801241c:	4632      	mov	r2, r6
 801241e:	463b      	mov	r3, r7
 8012420:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012424:	f7ed ff30 	bl	8000288 <__aeabi_dsub>
 8012428:	4622      	mov	r2, r4
 801242a:	462b      	mov	r3, r5
 801242c:	f7ee f8e4 	bl	80005f8 <__aeabi_dmul>
 8012430:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012434:	4680      	mov	r8, r0
 8012436:	4689      	mov	r9, r1
 8012438:	4650      	mov	r0, sl
 801243a:	4659      	mov	r1, fp
 801243c:	f7ee f8dc 	bl	80005f8 <__aeabi_dmul>
 8012440:	4602      	mov	r2, r0
 8012442:	460b      	mov	r3, r1
 8012444:	4640      	mov	r0, r8
 8012446:	4649      	mov	r1, r9
 8012448:	f7ed ff20 	bl	800028c <__adddf3>
 801244c:	4632      	mov	r2, r6
 801244e:	463b      	mov	r3, r7
 8012450:	4680      	mov	r8, r0
 8012452:	4689      	mov	r9, r1
 8012454:	4620      	mov	r0, r4
 8012456:	4629      	mov	r1, r5
 8012458:	f7ee f8ce 	bl	80005f8 <__aeabi_dmul>
 801245c:	460b      	mov	r3, r1
 801245e:	4604      	mov	r4, r0
 8012460:	460d      	mov	r5, r1
 8012462:	4602      	mov	r2, r0
 8012464:	4649      	mov	r1, r9
 8012466:	4640      	mov	r0, r8
 8012468:	f7ed ff10 	bl	800028c <__adddf3>
 801246c:	4b19      	ldr	r3, [pc, #100]	; (80124d4 <__ieee754_pow+0x3fc>)
 801246e:	4299      	cmp	r1, r3
 8012470:	ec45 4b19 	vmov	d9, r4, r5
 8012474:	4606      	mov	r6, r0
 8012476:	460f      	mov	r7, r1
 8012478:	468b      	mov	fp, r1
 801247a:	f340 82f1 	ble.w	8012a60 <__ieee754_pow+0x988>
 801247e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8012482:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8012486:	4303      	orrs	r3, r0
 8012488:	f000 81e4 	beq.w	8012854 <__ieee754_pow+0x77c>
 801248c:	ec51 0b18 	vmov	r0, r1, d8
 8012490:	2200      	movs	r2, #0
 8012492:	2300      	movs	r3, #0
 8012494:	f7ee fb22 	bl	8000adc <__aeabi_dcmplt>
 8012498:	3800      	subs	r0, #0
 801249a:	bf18      	it	ne
 801249c:	2001      	movne	r0, #1
 801249e:	e72b      	b.n	80122f8 <__ieee754_pow+0x220>
 80124a0:	60000000 	.word	0x60000000
 80124a4:	3ff71547 	.word	0x3ff71547
 80124a8:	f85ddf44 	.word	0xf85ddf44
 80124ac:	3e54ae0b 	.word	0x3e54ae0b
 80124b0:	55555555 	.word	0x55555555
 80124b4:	3fd55555 	.word	0x3fd55555
 80124b8:	652b82fe 	.word	0x652b82fe
 80124bc:	3ff71547 	.word	0x3ff71547
 80124c0:	00000000 	.word	0x00000000
 80124c4:	bff00000 	.word	0xbff00000
 80124c8:	3ff00000 	.word	0x3ff00000
 80124cc:	3fd00000 	.word	0x3fd00000
 80124d0:	3fe00000 	.word	0x3fe00000
 80124d4:	408fffff 	.word	0x408fffff
 80124d8:	4bd5      	ldr	r3, [pc, #852]	; (8012830 <__ieee754_pow+0x758>)
 80124da:	402b      	ands	r3, r5
 80124dc:	2200      	movs	r2, #0
 80124de:	b92b      	cbnz	r3, 80124ec <__ieee754_pow+0x414>
 80124e0:	4bd4      	ldr	r3, [pc, #848]	; (8012834 <__ieee754_pow+0x75c>)
 80124e2:	f7ee f889 	bl	80005f8 <__aeabi_dmul>
 80124e6:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80124ea:	460c      	mov	r4, r1
 80124ec:	1523      	asrs	r3, r4, #20
 80124ee:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80124f2:	4413      	add	r3, r2
 80124f4:	9305      	str	r3, [sp, #20]
 80124f6:	4bd0      	ldr	r3, [pc, #832]	; (8012838 <__ieee754_pow+0x760>)
 80124f8:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80124fc:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8012500:	429c      	cmp	r4, r3
 8012502:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8012506:	dd08      	ble.n	801251a <__ieee754_pow+0x442>
 8012508:	4bcc      	ldr	r3, [pc, #816]	; (801283c <__ieee754_pow+0x764>)
 801250a:	429c      	cmp	r4, r3
 801250c:	f340 8162 	ble.w	80127d4 <__ieee754_pow+0x6fc>
 8012510:	9b05      	ldr	r3, [sp, #20]
 8012512:	3301      	adds	r3, #1
 8012514:	9305      	str	r3, [sp, #20]
 8012516:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 801251a:	2400      	movs	r4, #0
 801251c:	00e3      	lsls	r3, r4, #3
 801251e:	9307      	str	r3, [sp, #28]
 8012520:	4bc7      	ldr	r3, [pc, #796]	; (8012840 <__ieee754_pow+0x768>)
 8012522:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8012526:	ed93 7b00 	vldr	d7, [r3]
 801252a:	4629      	mov	r1, r5
 801252c:	ec53 2b17 	vmov	r2, r3, d7
 8012530:	eeb0 9a47 	vmov.f32	s18, s14
 8012534:	eef0 9a67 	vmov.f32	s19, s15
 8012538:	4682      	mov	sl, r0
 801253a:	f7ed fea5 	bl	8000288 <__aeabi_dsub>
 801253e:	4652      	mov	r2, sl
 8012540:	4606      	mov	r6, r0
 8012542:	460f      	mov	r7, r1
 8012544:	462b      	mov	r3, r5
 8012546:	ec51 0b19 	vmov	r0, r1, d9
 801254a:	f7ed fe9f 	bl	800028c <__adddf3>
 801254e:	4602      	mov	r2, r0
 8012550:	460b      	mov	r3, r1
 8012552:	2000      	movs	r0, #0
 8012554:	49bb      	ldr	r1, [pc, #748]	; (8012844 <__ieee754_pow+0x76c>)
 8012556:	f7ee f979 	bl	800084c <__aeabi_ddiv>
 801255a:	ec41 0b1a 	vmov	d10, r0, r1
 801255e:	4602      	mov	r2, r0
 8012560:	460b      	mov	r3, r1
 8012562:	4630      	mov	r0, r6
 8012564:	4639      	mov	r1, r7
 8012566:	f7ee f847 	bl	80005f8 <__aeabi_dmul>
 801256a:	2300      	movs	r3, #0
 801256c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012570:	9302      	str	r3, [sp, #8]
 8012572:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8012576:	46ab      	mov	fp, r5
 8012578:	106d      	asrs	r5, r5, #1
 801257a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 801257e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8012582:	ec41 0b18 	vmov	d8, r0, r1
 8012586:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 801258a:	2200      	movs	r2, #0
 801258c:	4640      	mov	r0, r8
 801258e:	4649      	mov	r1, r9
 8012590:	4614      	mov	r4, r2
 8012592:	461d      	mov	r5, r3
 8012594:	f7ee f830 	bl	80005f8 <__aeabi_dmul>
 8012598:	4602      	mov	r2, r0
 801259a:	460b      	mov	r3, r1
 801259c:	4630      	mov	r0, r6
 801259e:	4639      	mov	r1, r7
 80125a0:	f7ed fe72 	bl	8000288 <__aeabi_dsub>
 80125a4:	ec53 2b19 	vmov	r2, r3, d9
 80125a8:	4606      	mov	r6, r0
 80125aa:	460f      	mov	r7, r1
 80125ac:	4620      	mov	r0, r4
 80125ae:	4629      	mov	r1, r5
 80125b0:	f7ed fe6a 	bl	8000288 <__aeabi_dsub>
 80125b4:	4602      	mov	r2, r0
 80125b6:	460b      	mov	r3, r1
 80125b8:	4650      	mov	r0, sl
 80125ba:	4659      	mov	r1, fp
 80125bc:	f7ed fe64 	bl	8000288 <__aeabi_dsub>
 80125c0:	4642      	mov	r2, r8
 80125c2:	464b      	mov	r3, r9
 80125c4:	f7ee f818 	bl	80005f8 <__aeabi_dmul>
 80125c8:	4602      	mov	r2, r0
 80125ca:	460b      	mov	r3, r1
 80125cc:	4630      	mov	r0, r6
 80125ce:	4639      	mov	r1, r7
 80125d0:	f7ed fe5a 	bl	8000288 <__aeabi_dsub>
 80125d4:	ec53 2b1a 	vmov	r2, r3, d10
 80125d8:	f7ee f80e 	bl	80005f8 <__aeabi_dmul>
 80125dc:	ec53 2b18 	vmov	r2, r3, d8
 80125e0:	ec41 0b19 	vmov	d9, r0, r1
 80125e4:	ec51 0b18 	vmov	r0, r1, d8
 80125e8:	f7ee f806 	bl	80005f8 <__aeabi_dmul>
 80125ec:	a37c      	add	r3, pc, #496	; (adr r3, 80127e0 <__ieee754_pow+0x708>)
 80125ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125f2:	4604      	mov	r4, r0
 80125f4:	460d      	mov	r5, r1
 80125f6:	f7ed ffff 	bl	80005f8 <__aeabi_dmul>
 80125fa:	a37b      	add	r3, pc, #492	; (adr r3, 80127e8 <__ieee754_pow+0x710>)
 80125fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012600:	f7ed fe44 	bl	800028c <__adddf3>
 8012604:	4622      	mov	r2, r4
 8012606:	462b      	mov	r3, r5
 8012608:	f7ed fff6 	bl	80005f8 <__aeabi_dmul>
 801260c:	a378      	add	r3, pc, #480	; (adr r3, 80127f0 <__ieee754_pow+0x718>)
 801260e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012612:	f7ed fe3b 	bl	800028c <__adddf3>
 8012616:	4622      	mov	r2, r4
 8012618:	462b      	mov	r3, r5
 801261a:	f7ed ffed 	bl	80005f8 <__aeabi_dmul>
 801261e:	a376      	add	r3, pc, #472	; (adr r3, 80127f8 <__ieee754_pow+0x720>)
 8012620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012624:	f7ed fe32 	bl	800028c <__adddf3>
 8012628:	4622      	mov	r2, r4
 801262a:	462b      	mov	r3, r5
 801262c:	f7ed ffe4 	bl	80005f8 <__aeabi_dmul>
 8012630:	a373      	add	r3, pc, #460	; (adr r3, 8012800 <__ieee754_pow+0x728>)
 8012632:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012636:	f7ed fe29 	bl	800028c <__adddf3>
 801263a:	4622      	mov	r2, r4
 801263c:	462b      	mov	r3, r5
 801263e:	f7ed ffdb 	bl	80005f8 <__aeabi_dmul>
 8012642:	a371      	add	r3, pc, #452	; (adr r3, 8012808 <__ieee754_pow+0x730>)
 8012644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012648:	f7ed fe20 	bl	800028c <__adddf3>
 801264c:	4622      	mov	r2, r4
 801264e:	4606      	mov	r6, r0
 8012650:	460f      	mov	r7, r1
 8012652:	462b      	mov	r3, r5
 8012654:	4620      	mov	r0, r4
 8012656:	4629      	mov	r1, r5
 8012658:	f7ed ffce 	bl	80005f8 <__aeabi_dmul>
 801265c:	4602      	mov	r2, r0
 801265e:	460b      	mov	r3, r1
 8012660:	4630      	mov	r0, r6
 8012662:	4639      	mov	r1, r7
 8012664:	f7ed ffc8 	bl	80005f8 <__aeabi_dmul>
 8012668:	4642      	mov	r2, r8
 801266a:	4604      	mov	r4, r0
 801266c:	460d      	mov	r5, r1
 801266e:	464b      	mov	r3, r9
 8012670:	ec51 0b18 	vmov	r0, r1, d8
 8012674:	f7ed fe0a 	bl	800028c <__adddf3>
 8012678:	ec53 2b19 	vmov	r2, r3, d9
 801267c:	f7ed ffbc 	bl	80005f8 <__aeabi_dmul>
 8012680:	4622      	mov	r2, r4
 8012682:	462b      	mov	r3, r5
 8012684:	f7ed fe02 	bl	800028c <__adddf3>
 8012688:	4642      	mov	r2, r8
 801268a:	4682      	mov	sl, r0
 801268c:	468b      	mov	fp, r1
 801268e:	464b      	mov	r3, r9
 8012690:	4640      	mov	r0, r8
 8012692:	4649      	mov	r1, r9
 8012694:	f7ed ffb0 	bl	80005f8 <__aeabi_dmul>
 8012698:	4b6b      	ldr	r3, [pc, #428]	; (8012848 <__ieee754_pow+0x770>)
 801269a:	2200      	movs	r2, #0
 801269c:	4606      	mov	r6, r0
 801269e:	460f      	mov	r7, r1
 80126a0:	f7ed fdf4 	bl	800028c <__adddf3>
 80126a4:	4652      	mov	r2, sl
 80126a6:	465b      	mov	r3, fp
 80126a8:	f7ed fdf0 	bl	800028c <__adddf3>
 80126ac:	2000      	movs	r0, #0
 80126ae:	4604      	mov	r4, r0
 80126b0:	460d      	mov	r5, r1
 80126b2:	4602      	mov	r2, r0
 80126b4:	460b      	mov	r3, r1
 80126b6:	4640      	mov	r0, r8
 80126b8:	4649      	mov	r1, r9
 80126ba:	f7ed ff9d 	bl	80005f8 <__aeabi_dmul>
 80126be:	4b62      	ldr	r3, [pc, #392]	; (8012848 <__ieee754_pow+0x770>)
 80126c0:	4680      	mov	r8, r0
 80126c2:	4689      	mov	r9, r1
 80126c4:	2200      	movs	r2, #0
 80126c6:	4620      	mov	r0, r4
 80126c8:	4629      	mov	r1, r5
 80126ca:	f7ed fddd 	bl	8000288 <__aeabi_dsub>
 80126ce:	4632      	mov	r2, r6
 80126d0:	463b      	mov	r3, r7
 80126d2:	f7ed fdd9 	bl	8000288 <__aeabi_dsub>
 80126d6:	4602      	mov	r2, r0
 80126d8:	460b      	mov	r3, r1
 80126da:	4650      	mov	r0, sl
 80126dc:	4659      	mov	r1, fp
 80126de:	f7ed fdd3 	bl	8000288 <__aeabi_dsub>
 80126e2:	ec53 2b18 	vmov	r2, r3, d8
 80126e6:	f7ed ff87 	bl	80005f8 <__aeabi_dmul>
 80126ea:	4622      	mov	r2, r4
 80126ec:	4606      	mov	r6, r0
 80126ee:	460f      	mov	r7, r1
 80126f0:	462b      	mov	r3, r5
 80126f2:	ec51 0b19 	vmov	r0, r1, d9
 80126f6:	f7ed ff7f 	bl	80005f8 <__aeabi_dmul>
 80126fa:	4602      	mov	r2, r0
 80126fc:	460b      	mov	r3, r1
 80126fe:	4630      	mov	r0, r6
 8012700:	4639      	mov	r1, r7
 8012702:	f7ed fdc3 	bl	800028c <__adddf3>
 8012706:	4606      	mov	r6, r0
 8012708:	460f      	mov	r7, r1
 801270a:	4602      	mov	r2, r0
 801270c:	460b      	mov	r3, r1
 801270e:	4640      	mov	r0, r8
 8012710:	4649      	mov	r1, r9
 8012712:	f7ed fdbb 	bl	800028c <__adddf3>
 8012716:	a33e      	add	r3, pc, #248	; (adr r3, 8012810 <__ieee754_pow+0x738>)
 8012718:	e9d3 2300 	ldrd	r2, r3, [r3]
 801271c:	2000      	movs	r0, #0
 801271e:	4604      	mov	r4, r0
 8012720:	460d      	mov	r5, r1
 8012722:	f7ed ff69 	bl	80005f8 <__aeabi_dmul>
 8012726:	4642      	mov	r2, r8
 8012728:	ec41 0b18 	vmov	d8, r0, r1
 801272c:	464b      	mov	r3, r9
 801272e:	4620      	mov	r0, r4
 8012730:	4629      	mov	r1, r5
 8012732:	f7ed fda9 	bl	8000288 <__aeabi_dsub>
 8012736:	4602      	mov	r2, r0
 8012738:	460b      	mov	r3, r1
 801273a:	4630      	mov	r0, r6
 801273c:	4639      	mov	r1, r7
 801273e:	f7ed fda3 	bl	8000288 <__aeabi_dsub>
 8012742:	a335      	add	r3, pc, #212	; (adr r3, 8012818 <__ieee754_pow+0x740>)
 8012744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012748:	f7ed ff56 	bl	80005f8 <__aeabi_dmul>
 801274c:	a334      	add	r3, pc, #208	; (adr r3, 8012820 <__ieee754_pow+0x748>)
 801274e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012752:	4606      	mov	r6, r0
 8012754:	460f      	mov	r7, r1
 8012756:	4620      	mov	r0, r4
 8012758:	4629      	mov	r1, r5
 801275a:	f7ed ff4d 	bl	80005f8 <__aeabi_dmul>
 801275e:	4602      	mov	r2, r0
 8012760:	460b      	mov	r3, r1
 8012762:	4630      	mov	r0, r6
 8012764:	4639      	mov	r1, r7
 8012766:	f7ed fd91 	bl	800028c <__adddf3>
 801276a:	9a07      	ldr	r2, [sp, #28]
 801276c:	4b37      	ldr	r3, [pc, #220]	; (801284c <__ieee754_pow+0x774>)
 801276e:	4413      	add	r3, r2
 8012770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012774:	f7ed fd8a 	bl	800028c <__adddf3>
 8012778:	4682      	mov	sl, r0
 801277a:	9805      	ldr	r0, [sp, #20]
 801277c:	468b      	mov	fp, r1
 801277e:	f7ed fed1 	bl	8000524 <__aeabi_i2d>
 8012782:	9a07      	ldr	r2, [sp, #28]
 8012784:	4b32      	ldr	r3, [pc, #200]	; (8012850 <__ieee754_pow+0x778>)
 8012786:	4413      	add	r3, r2
 8012788:	e9d3 8900 	ldrd	r8, r9, [r3]
 801278c:	4606      	mov	r6, r0
 801278e:	460f      	mov	r7, r1
 8012790:	4652      	mov	r2, sl
 8012792:	465b      	mov	r3, fp
 8012794:	ec51 0b18 	vmov	r0, r1, d8
 8012798:	f7ed fd78 	bl	800028c <__adddf3>
 801279c:	4642      	mov	r2, r8
 801279e:	464b      	mov	r3, r9
 80127a0:	f7ed fd74 	bl	800028c <__adddf3>
 80127a4:	4632      	mov	r2, r6
 80127a6:	463b      	mov	r3, r7
 80127a8:	f7ed fd70 	bl	800028c <__adddf3>
 80127ac:	2000      	movs	r0, #0
 80127ae:	4632      	mov	r2, r6
 80127b0:	463b      	mov	r3, r7
 80127b2:	4604      	mov	r4, r0
 80127b4:	460d      	mov	r5, r1
 80127b6:	f7ed fd67 	bl	8000288 <__aeabi_dsub>
 80127ba:	4642      	mov	r2, r8
 80127bc:	464b      	mov	r3, r9
 80127be:	f7ed fd63 	bl	8000288 <__aeabi_dsub>
 80127c2:	ec53 2b18 	vmov	r2, r3, d8
 80127c6:	f7ed fd5f 	bl	8000288 <__aeabi_dsub>
 80127ca:	4602      	mov	r2, r0
 80127cc:	460b      	mov	r3, r1
 80127ce:	4650      	mov	r0, sl
 80127d0:	4659      	mov	r1, fp
 80127d2:	e610      	b.n	80123f6 <__ieee754_pow+0x31e>
 80127d4:	2401      	movs	r4, #1
 80127d6:	e6a1      	b.n	801251c <__ieee754_pow+0x444>
 80127d8:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8012828 <__ieee754_pow+0x750>
 80127dc:	e617      	b.n	801240e <__ieee754_pow+0x336>
 80127de:	bf00      	nop
 80127e0:	4a454eef 	.word	0x4a454eef
 80127e4:	3fca7e28 	.word	0x3fca7e28
 80127e8:	93c9db65 	.word	0x93c9db65
 80127ec:	3fcd864a 	.word	0x3fcd864a
 80127f0:	a91d4101 	.word	0xa91d4101
 80127f4:	3fd17460 	.word	0x3fd17460
 80127f8:	518f264d 	.word	0x518f264d
 80127fc:	3fd55555 	.word	0x3fd55555
 8012800:	db6fabff 	.word	0xdb6fabff
 8012804:	3fdb6db6 	.word	0x3fdb6db6
 8012808:	33333303 	.word	0x33333303
 801280c:	3fe33333 	.word	0x3fe33333
 8012810:	e0000000 	.word	0xe0000000
 8012814:	3feec709 	.word	0x3feec709
 8012818:	dc3a03fd 	.word	0xdc3a03fd
 801281c:	3feec709 	.word	0x3feec709
 8012820:	145b01f5 	.word	0x145b01f5
 8012824:	be3e2fe0 	.word	0xbe3e2fe0
 8012828:	00000000 	.word	0x00000000
 801282c:	3ff00000 	.word	0x3ff00000
 8012830:	7ff00000 	.word	0x7ff00000
 8012834:	43400000 	.word	0x43400000
 8012838:	0003988e 	.word	0x0003988e
 801283c:	000bb679 	.word	0x000bb679
 8012840:	08014960 	.word	0x08014960
 8012844:	3ff00000 	.word	0x3ff00000
 8012848:	40080000 	.word	0x40080000
 801284c:	08014980 	.word	0x08014980
 8012850:	08014970 	.word	0x08014970
 8012854:	a3b5      	add	r3, pc, #724	; (adr r3, 8012b2c <__ieee754_pow+0xa54>)
 8012856:	e9d3 2300 	ldrd	r2, r3, [r3]
 801285a:	4640      	mov	r0, r8
 801285c:	4649      	mov	r1, r9
 801285e:	f7ed fd15 	bl	800028c <__adddf3>
 8012862:	4622      	mov	r2, r4
 8012864:	ec41 0b1a 	vmov	d10, r0, r1
 8012868:	462b      	mov	r3, r5
 801286a:	4630      	mov	r0, r6
 801286c:	4639      	mov	r1, r7
 801286e:	f7ed fd0b 	bl	8000288 <__aeabi_dsub>
 8012872:	4602      	mov	r2, r0
 8012874:	460b      	mov	r3, r1
 8012876:	ec51 0b1a 	vmov	r0, r1, d10
 801287a:	f7ee f94d 	bl	8000b18 <__aeabi_dcmpgt>
 801287e:	2800      	cmp	r0, #0
 8012880:	f47f ae04 	bne.w	801248c <__ieee754_pow+0x3b4>
 8012884:	4aa4      	ldr	r2, [pc, #656]	; (8012b18 <__ieee754_pow+0xa40>)
 8012886:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801288a:	4293      	cmp	r3, r2
 801288c:	f340 8108 	ble.w	8012aa0 <__ieee754_pow+0x9c8>
 8012890:	151b      	asrs	r3, r3, #20
 8012892:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8012896:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 801289a:	fa4a f303 	asr.w	r3, sl, r3
 801289e:	445b      	add	r3, fp
 80128a0:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80128a4:	4e9d      	ldr	r6, [pc, #628]	; (8012b1c <__ieee754_pow+0xa44>)
 80128a6:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80128aa:	4116      	asrs	r6, r2
 80128ac:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80128b0:	2000      	movs	r0, #0
 80128b2:	ea23 0106 	bic.w	r1, r3, r6
 80128b6:	f1c2 0214 	rsb	r2, r2, #20
 80128ba:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80128be:	fa4a fa02 	asr.w	sl, sl, r2
 80128c2:	f1bb 0f00 	cmp.w	fp, #0
 80128c6:	4602      	mov	r2, r0
 80128c8:	460b      	mov	r3, r1
 80128ca:	4620      	mov	r0, r4
 80128cc:	4629      	mov	r1, r5
 80128ce:	bfb8      	it	lt
 80128d0:	f1ca 0a00 	rsblt	sl, sl, #0
 80128d4:	f7ed fcd8 	bl	8000288 <__aeabi_dsub>
 80128d8:	ec41 0b19 	vmov	d9, r0, r1
 80128dc:	4642      	mov	r2, r8
 80128de:	464b      	mov	r3, r9
 80128e0:	ec51 0b19 	vmov	r0, r1, d9
 80128e4:	f7ed fcd2 	bl	800028c <__adddf3>
 80128e8:	a37b      	add	r3, pc, #492	; (adr r3, 8012ad8 <__ieee754_pow+0xa00>)
 80128ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80128ee:	2000      	movs	r0, #0
 80128f0:	4604      	mov	r4, r0
 80128f2:	460d      	mov	r5, r1
 80128f4:	f7ed fe80 	bl	80005f8 <__aeabi_dmul>
 80128f8:	ec53 2b19 	vmov	r2, r3, d9
 80128fc:	4606      	mov	r6, r0
 80128fe:	460f      	mov	r7, r1
 8012900:	4620      	mov	r0, r4
 8012902:	4629      	mov	r1, r5
 8012904:	f7ed fcc0 	bl	8000288 <__aeabi_dsub>
 8012908:	4602      	mov	r2, r0
 801290a:	460b      	mov	r3, r1
 801290c:	4640      	mov	r0, r8
 801290e:	4649      	mov	r1, r9
 8012910:	f7ed fcba 	bl	8000288 <__aeabi_dsub>
 8012914:	a372      	add	r3, pc, #456	; (adr r3, 8012ae0 <__ieee754_pow+0xa08>)
 8012916:	e9d3 2300 	ldrd	r2, r3, [r3]
 801291a:	f7ed fe6d 	bl	80005f8 <__aeabi_dmul>
 801291e:	a372      	add	r3, pc, #456	; (adr r3, 8012ae8 <__ieee754_pow+0xa10>)
 8012920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012924:	4680      	mov	r8, r0
 8012926:	4689      	mov	r9, r1
 8012928:	4620      	mov	r0, r4
 801292a:	4629      	mov	r1, r5
 801292c:	f7ed fe64 	bl	80005f8 <__aeabi_dmul>
 8012930:	4602      	mov	r2, r0
 8012932:	460b      	mov	r3, r1
 8012934:	4640      	mov	r0, r8
 8012936:	4649      	mov	r1, r9
 8012938:	f7ed fca8 	bl	800028c <__adddf3>
 801293c:	4604      	mov	r4, r0
 801293e:	460d      	mov	r5, r1
 8012940:	4602      	mov	r2, r0
 8012942:	460b      	mov	r3, r1
 8012944:	4630      	mov	r0, r6
 8012946:	4639      	mov	r1, r7
 8012948:	f7ed fca0 	bl	800028c <__adddf3>
 801294c:	4632      	mov	r2, r6
 801294e:	463b      	mov	r3, r7
 8012950:	4680      	mov	r8, r0
 8012952:	4689      	mov	r9, r1
 8012954:	f7ed fc98 	bl	8000288 <__aeabi_dsub>
 8012958:	4602      	mov	r2, r0
 801295a:	460b      	mov	r3, r1
 801295c:	4620      	mov	r0, r4
 801295e:	4629      	mov	r1, r5
 8012960:	f7ed fc92 	bl	8000288 <__aeabi_dsub>
 8012964:	4642      	mov	r2, r8
 8012966:	4606      	mov	r6, r0
 8012968:	460f      	mov	r7, r1
 801296a:	464b      	mov	r3, r9
 801296c:	4640      	mov	r0, r8
 801296e:	4649      	mov	r1, r9
 8012970:	f7ed fe42 	bl	80005f8 <__aeabi_dmul>
 8012974:	a35e      	add	r3, pc, #376	; (adr r3, 8012af0 <__ieee754_pow+0xa18>)
 8012976:	e9d3 2300 	ldrd	r2, r3, [r3]
 801297a:	4604      	mov	r4, r0
 801297c:	460d      	mov	r5, r1
 801297e:	f7ed fe3b 	bl	80005f8 <__aeabi_dmul>
 8012982:	a35d      	add	r3, pc, #372	; (adr r3, 8012af8 <__ieee754_pow+0xa20>)
 8012984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012988:	f7ed fc7e 	bl	8000288 <__aeabi_dsub>
 801298c:	4622      	mov	r2, r4
 801298e:	462b      	mov	r3, r5
 8012990:	f7ed fe32 	bl	80005f8 <__aeabi_dmul>
 8012994:	a35a      	add	r3, pc, #360	; (adr r3, 8012b00 <__ieee754_pow+0xa28>)
 8012996:	e9d3 2300 	ldrd	r2, r3, [r3]
 801299a:	f7ed fc77 	bl	800028c <__adddf3>
 801299e:	4622      	mov	r2, r4
 80129a0:	462b      	mov	r3, r5
 80129a2:	f7ed fe29 	bl	80005f8 <__aeabi_dmul>
 80129a6:	a358      	add	r3, pc, #352	; (adr r3, 8012b08 <__ieee754_pow+0xa30>)
 80129a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80129ac:	f7ed fc6c 	bl	8000288 <__aeabi_dsub>
 80129b0:	4622      	mov	r2, r4
 80129b2:	462b      	mov	r3, r5
 80129b4:	f7ed fe20 	bl	80005f8 <__aeabi_dmul>
 80129b8:	a355      	add	r3, pc, #340	; (adr r3, 8012b10 <__ieee754_pow+0xa38>)
 80129ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80129be:	f7ed fc65 	bl	800028c <__adddf3>
 80129c2:	4622      	mov	r2, r4
 80129c4:	462b      	mov	r3, r5
 80129c6:	f7ed fe17 	bl	80005f8 <__aeabi_dmul>
 80129ca:	4602      	mov	r2, r0
 80129cc:	460b      	mov	r3, r1
 80129ce:	4640      	mov	r0, r8
 80129d0:	4649      	mov	r1, r9
 80129d2:	f7ed fc59 	bl	8000288 <__aeabi_dsub>
 80129d6:	4604      	mov	r4, r0
 80129d8:	460d      	mov	r5, r1
 80129da:	4602      	mov	r2, r0
 80129dc:	460b      	mov	r3, r1
 80129de:	4640      	mov	r0, r8
 80129e0:	4649      	mov	r1, r9
 80129e2:	f7ed fe09 	bl	80005f8 <__aeabi_dmul>
 80129e6:	2200      	movs	r2, #0
 80129e8:	ec41 0b19 	vmov	d9, r0, r1
 80129ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80129f0:	4620      	mov	r0, r4
 80129f2:	4629      	mov	r1, r5
 80129f4:	f7ed fc48 	bl	8000288 <__aeabi_dsub>
 80129f8:	4602      	mov	r2, r0
 80129fa:	460b      	mov	r3, r1
 80129fc:	ec51 0b19 	vmov	r0, r1, d9
 8012a00:	f7ed ff24 	bl	800084c <__aeabi_ddiv>
 8012a04:	4632      	mov	r2, r6
 8012a06:	4604      	mov	r4, r0
 8012a08:	460d      	mov	r5, r1
 8012a0a:	463b      	mov	r3, r7
 8012a0c:	4640      	mov	r0, r8
 8012a0e:	4649      	mov	r1, r9
 8012a10:	f7ed fdf2 	bl	80005f8 <__aeabi_dmul>
 8012a14:	4632      	mov	r2, r6
 8012a16:	463b      	mov	r3, r7
 8012a18:	f7ed fc38 	bl	800028c <__adddf3>
 8012a1c:	4602      	mov	r2, r0
 8012a1e:	460b      	mov	r3, r1
 8012a20:	4620      	mov	r0, r4
 8012a22:	4629      	mov	r1, r5
 8012a24:	f7ed fc30 	bl	8000288 <__aeabi_dsub>
 8012a28:	4642      	mov	r2, r8
 8012a2a:	464b      	mov	r3, r9
 8012a2c:	f7ed fc2c 	bl	8000288 <__aeabi_dsub>
 8012a30:	460b      	mov	r3, r1
 8012a32:	4602      	mov	r2, r0
 8012a34:	493a      	ldr	r1, [pc, #232]	; (8012b20 <__ieee754_pow+0xa48>)
 8012a36:	2000      	movs	r0, #0
 8012a38:	f7ed fc26 	bl	8000288 <__aeabi_dsub>
 8012a3c:	ec41 0b10 	vmov	d0, r0, r1
 8012a40:	ee10 3a90 	vmov	r3, s1
 8012a44:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8012a48:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8012a4c:	da2b      	bge.n	8012aa6 <__ieee754_pow+0x9ce>
 8012a4e:	4650      	mov	r0, sl
 8012a50:	f001 fa3a 	bl	8013ec8 <scalbn>
 8012a54:	ec51 0b10 	vmov	r0, r1, d0
 8012a58:	ec53 2b18 	vmov	r2, r3, d8
 8012a5c:	f7ff bbed 	b.w	801223a <__ieee754_pow+0x162>
 8012a60:	4b30      	ldr	r3, [pc, #192]	; (8012b24 <__ieee754_pow+0xa4c>)
 8012a62:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8012a66:	429e      	cmp	r6, r3
 8012a68:	f77f af0c 	ble.w	8012884 <__ieee754_pow+0x7ac>
 8012a6c:	4b2e      	ldr	r3, [pc, #184]	; (8012b28 <__ieee754_pow+0xa50>)
 8012a6e:	440b      	add	r3, r1
 8012a70:	4303      	orrs	r3, r0
 8012a72:	d009      	beq.n	8012a88 <__ieee754_pow+0x9b0>
 8012a74:	ec51 0b18 	vmov	r0, r1, d8
 8012a78:	2200      	movs	r2, #0
 8012a7a:	2300      	movs	r3, #0
 8012a7c:	f7ee f82e 	bl	8000adc <__aeabi_dcmplt>
 8012a80:	3800      	subs	r0, #0
 8012a82:	bf18      	it	ne
 8012a84:	2001      	movne	r0, #1
 8012a86:	e447      	b.n	8012318 <__ieee754_pow+0x240>
 8012a88:	4622      	mov	r2, r4
 8012a8a:	462b      	mov	r3, r5
 8012a8c:	f7ed fbfc 	bl	8000288 <__aeabi_dsub>
 8012a90:	4642      	mov	r2, r8
 8012a92:	464b      	mov	r3, r9
 8012a94:	f7ee f836 	bl	8000b04 <__aeabi_dcmpge>
 8012a98:	2800      	cmp	r0, #0
 8012a9a:	f43f aef3 	beq.w	8012884 <__ieee754_pow+0x7ac>
 8012a9e:	e7e9      	b.n	8012a74 <__ieee754_pow+0x99c>
 8012aa0:	f04f 0a00 	mov.w	sl, #0
 8012aa4:	e71a      	b.n	80128dc <__ieee754_pow+0x804>
 8012aa6:	ec51 0b10 	vmov	r0, r1, d0
 8012aaa:	4619      	mov	r1, r3
 8012aac:	e7d4      	b.n	8012a58 <__ieee754_pow+0x980>
 8012aae:	491c      	ldr	r1, [pc, #112]	; (8012b20 <__ieee754_pow+0xa48>)
 8012ab0:	2000      	movs	r0, #0
 8012ab2:	f7ff bb30 	b.w	8012116 <__ieee754_pow+0x3e>
 8012ab6:	2000      	movs	r0, #0
 8012ab8:	2100      	movs	r1, #0
 8012aba:	f7ff bb2c 	b.w	8012116 <__ieee754_pow+0x3e>
 8012abe:	4630      	mov	r0, r6
 8012ac0:	4639      	mov	r1, r7
 8012ac2:	f7ff bb28 	b.w	8012116 <__ieee754_pow+0x3e>
 8012ac6:	9204      	str	r2, [sp, #16]
 8012ac8:	f7ff bb7a 	b.w	80121c0 <__ieee754_pow+0xe8>
 8012acc:	2300      	movs	r3, #0
 8012ace:	f7ff bb64 	b.w	801219a <__ieee754_pow+0xc2>
 8012ad2:	bf00      	nop
 8012ad4:	f3af 8000 	nop.w
 8012ad8:	00000000 	.word	0x00000000
 8012adc:	3fe62e43 	.word	0x3fe62e43
 8012ae0:	fefa39ef 	.word	0xfefa39ef
 8012ae4:	3fe62e42 	.word	0x3fe62e42
 8012ae8:	0ca86c39 	.word	0x0ca86c39
 8012aec:	be205c61 	.word	0xbe205c61
 8012af0:	72bea4d0 	.word	0x72bea4d0
 8012af4:	3e663769 	.word	0x3e663769
 8012af8:	c5d26bf1 	.word	0xc5d26bf1
 8012afc:	3ebbbd41 	.word	0x3ebbbd41
 8012b00:	af25de2c 	.word	0xaf25de2c
 8012b04:	3f11566a 	.word	0x3f11566a
 8012b08:	16bebd93 	.word	0x16bebd93
 8012b0c:	3f66c16c 	.word	0x3f66c16c
 8012b10:	5555553e 	.word	0x5555553e
 8012b14:	3fc55555 	.word	0x3fc55555
 8012b18:	3fe00000 	.word	0x3fe00000
 8012b1c:	000fffff 	.word	0x000fffff
 8012b20:	3ff00000 	.word	0x3ff00000
 8012b24:	4090cbff 	.word	0x4090cbff
 8012b28:	3f6f3400 	.word	0x3f6f3400
 8012b2c:	652b82fe 	.word	0x652b82fe
 8012b30:	3c971547 	.word	0x3c971547

08012b34 <__ieee754_sqrt>:
 8012b34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012b38:	ec55 4b10 	vmov	r4, r5, d0
 8012b3c:	4e55      	ldr	r6, [pc, #340]	; (8012c94 <__ieee754_sqrt+0x160>)
 8012b3e:	43ae      	bics	r6, r5
 8012b40:	ee10 0a10 	vmov	r0, s0
 8012b44:	ee10 3a10 	vmov	r3, s0
 8012b48:	462a      	mov	r2, r5
 8012b4a:	4629      	mov	r1, r5
 8012b4c:	d110      	bne.n	8012b70 <__ieee754_sqrt+0x3c>
 8012b4e:	ee10 2a10 	vmov	r2, s0
 8012b52:	462b      	mov	r3, r5
 8012b54:	f7ed fd50 	bl	80005f8 <__aeabi_dmul>
 8012b58:	4602      	mov	r2, r0
 8012b5a:	460b      	mov	r3, r1
 8012b5c:	4620      	mov	r0, r4
 8012b5e:	4629      	mov	r1, r5
 8012b60:	f7ed fb94 	bl	800028c <__adddf3>
 8012b64:	4604      	mov	r4, r0
 8012b66:	460d      	mov	r5, r1
 8012b68:	ec45 4b10 	vmov	d0, r4, r5
 8012b6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012b70:	2d00      	cmp	r5, #0
 8012b72:	dc10      	bgt.n	8012b96 <__ieee754_sqrt+0x62>
 8012b74:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8012b78:	4330      	orrs	r0, r6
 8012b7a:	d0f5      	beq.n	8012b68 <__ieee754_sqrt+0x34>
 8012b7c:	b15d      	cbz	r5, 8012b96 <__ieee754_sqrt+0x62>
 8012b7e:	ee10 2a10 	vmov	r2, s0
 8012b82:	462b      	mov	r3, r5
 8012b84:	ee10 0a10 	vmov	r0, s0
 8012b88:	f7ed fb7e 	bl	8000288 <__aeabi_dsub>
 8012b8c:	4602      	mov	r2, r0
 8012b8e:	460b      	mov	r3, r1
 8012b90:	f7ed fe5c 	bl	800084c <__aeabi_ddiv>
 8012b94:	e7e6      	b.n	8012b64 <__ieee754_sqrt+0x30>
 8012b96:	1512      	asrs	r2, r2, #20
 8012b98:	d074      	beq.n	8012c84 <__ieee754_sqrt+0x150>
 8012b9a:	07d4      	lsls	r4, r2, #31
 8012b9c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8012ba0:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8012ba4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8012ba8:	bf5e      	ittt	pl
 8012baa:	0fda      	lsrpl	r2, r3, #31
 8012bac:	005b      	lslpl	r3, r3, #1
 8012bae:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8012bb2:	2400      	movs	r4, #0
 8012bb4:	0fda      	lsrs	r2, r3, #31
 8012bb6:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8012bba:	107f      	asrs	r7, r7, #1
 8012bbc:	005b      	lsls	r3, r3, #1
 8012bbe:	2516      	movs	r5, #22
 8012bc0:	4620      	mov	r0, r4
 8012bc2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8012bc6:	1886      	adds	r6, r0, r2
 8012bc8:	428e      	cmp	r6, r1
 8012bca:	bfde      	ittt	le
 8012bcc:	1b89      	suble	r1, r1, r6
 8012bce:	18b0      	addle	r0, r6, r2
 8012bd0:	18a4      	addle	r4, r4, r2
 8012bd2:	0049      	lsls	r1, r1, #1
 8012bd4:	3d01      	subs	r5, #1
 8012bd6:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8012bda:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8012bde:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8012be2:	d1f0      	bne.n	8012bc6 <__ieee754_sqrt+0x92>
 8012be4:	462a      	mov	r2, r5
 8012be6:	f04f 0e20 	mov.w	lr, #32
 8012bea:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8012bee:	4281      	cmp	r1, r0
 8012bf0:	eb06 0c05 	add.w	ip, r6, r5
 8012bf4:	dc02      	bgt.n	8012bfc <__ieee754_sqrt+0xc8>
 8012bf6:	d113      	bne.n	8012c20 <__ieee754_sqrt+0xec>
 8012bf8:	459c      	cmp	ip, r3
 8012bfa:	d811      	bhi.n	8012c20 <__ieee754_sqrt+0xec>
 8012bfc:	f1bc 0f00 	cmp.w	ip, #0
 8012c00:	eb0c 0506 	add.w	r5, ip, r6
 8012c04:	da43      	bge.n	8012c8e <__ieee754_sqrt+0x15a>
 8012c06:	2d00      	cmp	r5, #0
 8012c08:	db41      	blt.n	8012c8e <__ieee754_sqrt+0x15a>
 8012c0a:	f100 0801 	add.w	r8, r0, #1
 8012c0e:	1a09      	subs	r1, r1, r0
 8012c10:	459c      	cmp	ip, r3
 8012c12:	bf88      	it	hi
 8012c14:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8012c18:	eba3 030c 	sub.w	r3, r3, ip
 8012c1c:	4432      	add	r2, r6
 8012c1e:	4640      	mov	r0, r8
 8012c20:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8012c24:	f1be 0e01 	subs.w	lr, lr, #1
 8012c28:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8012c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8012c30:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8012c34:	d1db      	bne.n	8012bee <__ieee754_sqrt+0xba>
 8012c36:	430b      	orrs	r3, r1
 8012c38:	d006      	beq.n	8012c48 <__ieee754_sqrt+0x114>
 8012c3a:	1c50      	adds	r0, r2, #1
 8012c3c:	bf13      	iteet	ne
 8012c3e:	3201      	addne	r2, #1
 8012c40:	3401      	addeq	r4, #1
 8012c42:	4672      	moveq	r2, lr
 8012c44:	f022 0201 	bicne.w	r2, r2, #1
 8012c48:	1063      	asrs	r3, r4, #1
 8012c4a:	0852      	lsrs	r2, r2, #1
 8012c4c:	07e1      	lsls	r1, r4, #31
 8012c4e:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8012c52:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8012c56:	bf48      	it	mi
 8012c58:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8012c5c:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8012c60:	4614      	mov	r4, r2
 8012c62:	e781      	b.n	8012b68 <__ieee754_sqrt+0x34>
 8012c64:	0ad9      	lsrs	r1, r3, #11
 8012c66:	3815      	subs	r0, #21
 8012c68:	055b      	lsls	r3, r3, #21
 8012c6a:	2900      	cmp	r1, #0
 8012c6c:	d0fa      	beq.n	8012c64 <__ieee754_sqrt+0x130>
 8012c6e:	02cd      	lsls	r5, r1, #11
 8012c70:	d50a      	bpl.n	8012c88 <__ieee754_sqrt+0x154>
 8012c72:	f1c2 0420 	rsb	r4, r2, #32
 8012c76:	fa23 f404 	lsr.w	r4, r3, r4
 8012c7a:	1e55      	subs	r5, r2, #1
 8012c7c:	4093      	lsls	r3, r2
 8012c7e:	4321      	orrs	r1, r4
 8012c80:	1b42      	subs	r2, r0, r5
 8012c82:	e78a      	b.n	8012b9a <__ieee754_sqrt+0x66>
 8012c84:	4610      	mov	r0, r2
 8012c86:	e7f0      	b.n	8012c6a <__ieee754_sqrt+0x136>
 8012c88:	0049      	lsls	r1, r1, #1
 8012c8a:	3201      	adds	r2, #1
 8012c8c:	e7ef      	b.n	8012c6e <__ieee754_sqrt+0x13a>
 8012c8e:	4680      	mov	r8, r0
 8012c90:	e7bd      	b.n	8012c0e <__ieee754_sqrt+0xda>
 8012c92:	bf00      	nop
 8012c94:	7ff00000 	.word	0x7ff00000

08012c98 <__ieee754_asinf>:
 8012c98:	b538      	push	{r3, r4, r5, lr}
 8012c9a:	ee10 5a10 	vmov	r5, s0
 8012c9e:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8012ca2:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8012ca6:	ed2d 8b04 	vpush	{d8-d9}
 8012caa:	d10c      	bne.n	8012cc6 <__ieee754_asinf+0x2e>
 8012cac:	eddf 7a5d 	vldr	s15, [pc, #372]	; 8012e24 <__ieee754_asinf+0x18c>
 8012cb0:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8012e28 <__ieee754_asinf+0x190>
 8012cb4:	ee60 7a27 	vmul.f32	s15, s0, s15
 8012cb8:	eee0 7a07 	vfma.f32	s15, s0, s14
 8012cbc:	eeb0 0a67 	vmov.f32	s0, s15
 8012cc0:	ecbd 8b04 	vpop	{d8-d9}
 8012cc4:	bd38      	pop	{r3, r4, r5, pc}
 8012cc6:	dd04      	ble.n	8012cd2 <__ieee754_asinf+0x3a>
 8012cc8:	ee70 7a40 	vsub.f32	s15, s0, s0
 8012ccc:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8012cd0:	e7f6      	b.n	8012cc0 <__ieee754_asinf+0x28>
 8012cd2:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 8012cd6:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8012cda:	da0b      	bge.n	8012cf4 <__ieee754_asinf+0x5c>
 8012cdc:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 8012ce0:	da52      	bge.n	8012d88 <__ieee754_asinf+0xf0>
 8012ce2:	eddf 7a52 	vldr	s15, [pc, #328]	; 8012e2c <__ieee754_asinf+0x194>
 8012ce6:	ee70 7a27 	vadd.f32	s15, s0, s15
 8012cea:	eef4 7ae8 	vcmpe.f32	s15, s17
 8012cee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012cf2:	dce5      	bgt.n	8012cc0 <__ieee754_asinf+0x28>
 8012cf4:	f001 fa42 	bl	801417c <fabsf>
 8012cf8:	ee38 0ac0 	vsub.f32	s0, s17, s0
 8012cfc:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 8012d00:	ee20 8a08 	vmul.f32	s16, s0, s16
 8012d04:	eddf 7a4a 	vldr	s15, [pc, #296]	; 8012e30 <__ieee754_asinf+0x198>
 8012d08:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8012e34 <__ieee754_asinf+0x19c>
 8012d0c:	ed9f 9a4a 	vldr	s18, [pc, #296]	; 8012e38 <__ieee754_asinf+0x1a0>
 8012d10:	eea8 7a27 	vfma.f32	s14, s16, s15
 8012d14:	eddf 7a49 	vldr	s15, [pc, #292]	; 8012e3c <__ieee754_asinf+0x1a4>
 8012d18:	eee7 7a08 	vfma.f32	s15, s14, s16
 8012d1c:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8012e40 <__ieee754_asinf+0x1a8>
 8012d20:	eea7 7a88 	vfma.f32	s14, s15, s16
 8012d24:	eddf 7a47 	vldr	s15, [pc, #284]	; 8012e44 <__ieee754_asinf+0x1ac>
 8012d28:	eee7 7a08 	vfma.f32	s15, s14, s16
 8012d2c:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8012e48 <__ieee754_asinf+0x1b0>
 8012d30:	eea7 9a88 	vfma.f32	s18, s15, s16
 8012d34:	eddf 7a45 	vldr	s15, [pc, #276]	; 8012e4c <__ieee754_asinf+0x1b4>
 8012d38:	eee8 7a07 	vfma.f32	s15, s16, s14
 8012d3c:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8012e50 <__ieee754_asinf+0x1b8>
 8012d40:	eea7 7a88 	vfma.f32	s14, s15, s16
 8012d44:	eddf 7a43 	vldr	s15, [pc, #268]	; 8012e54 <__ieee754_asinf+0x1bc>
 8012d48:	eee7 7a08 	vfma.f32	s15, s14, s16
 8012d4c:	eeb0 0a48 	vmov.f32	s0, s16
 8012d50:	eee7 8a88 	vfma.f32	s17, s15, s16
 8012d54:	f000 fd30 	bl	80137b8 <__ieee754_sqrtf>
 8012d58:	4b3f      	ldr	r3, [pc, #252]	; (8012e58 <__ieee754_asinf+0x1c0>)
 8012d5a:	ee29 9a08 	vmul.f32	s18, s18, s16
 8012d5e:	429c      	cmp	r4, r3
 8012d60:	ee89 6a28 	vdiv.f32	s12, s18, s17
 8012d64:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8012d68:	dd3d      	ble.n	8012de6 <__ieee754_asinf+0x14e>
 8012d6a:	eea0 0a06 	vfma.f32	s0, s0, s12
 8012d6e:	eddf 7a3b 	vldr	s15, [pc, #236]	; 8012e5c <__ieee754_asinf+0x1c4>
 8012d72:	eee0 7a26 	vfma.f32	s15, s0, s13
 8012d76:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8012e28 <__ieee754_asinf+0x190>
 8012d7a:	ee30 0a67 	vsub.f32	s0, s0, s15
 8012d7e:	2d00      	cmp	r5, #0
 8012d80:	bfd8      	it	le
 8012d82:	eeb1 0a40 	vnegle.f32	s0, s0
 8012d86:	e79b      	b.n	8012cc0 <__ieee754_asinf+0x28>
 8012d88:	ee60 7a00 	vmul.f32	s15, s0, s0
 8012d8c:	eddf 6a28 	vldr	s13, [pc, #160]	; 8012e30 <__ieee754_asinf+0x198>
 8012d90:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8012e34 <__ieee754_asinf+0x19c>
 8012d94:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 8012e48 <__ieee754_asinf+0x1b0>
 8012d98:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8012d9c:	eddf 6a27 	vldr	s13, [pc, #156]	; 8012e3c <__ieee754_asinf+0x1a4>
 8012da0:	eee7 6a27 	vfma.f32	s13, s14, s15
 8012da4:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8012e40 <__ieee754_asinf+0x1a8>
 8012da8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8012dac:	eddf 6a25 	vldr	s13, [pc, #148]	; 8012e44 <__ieee754_asinf+0x1ac>
 8012db0:	eee7 6a27 	vfma.f32	s13, s14, s15
 8012db4:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8012e38 <__ieee754_asinf+0x1a0>
 8012db8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8012dbc:	eddf 6a23 	vldr	s13, [pc, #140]	; 8012e4c <__ieee754_asinf+0x1b4>
 8012dc0:	eee7 6a86 	vfma.f32	s13, s15, s12
 8012dc4:	ed9f 6a22 	vldr	s12, [pc, #136]	; 8012e50 <__ieee754_asinf+0x1b8>
 8012dc8:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8012dcc:	eddf 6a21 	vldr	s13, [pc, #132]	; 8012e54 <__ieee754_asinf+0x1bc>
 8012dd0:	eee6 6a27 	vfma.f32	s13, s12, s15
 8012dd4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8012dd8:	eee6 8aa7 	vfma.f32	s17, s13, s15
 8012ddc:	eec7 7a28 	vdiv.f32	s15, s14, s17
 8012de0:	eea0 0a27 	vfma.f32	s0, s0, s15
 8012de4:	e76c      	b.n	8012cc0 <__ieee754_asinf+0x28>
 8012de6:	ee10 3a10 	vmov	r3, s0
 8012dea:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8012dee:	f023 030f 	bic.w	r3, r3, #15
 8012df2:	ee07 3a10 	vmov	s14, r3
 8012df6:	eea7 8a47 	vfms.f32	s16, s14, s14
 8012dfa:	ee70 7a07 	vadd.f32	s15, s0, s14
 8012dfe:	ee30 0a00 	vadd.f32	s0, s0, s0
 8012e02:	eec8 5a27 	vdiv.f32	s11, s16, s15
 8012e06:	eddf 7a07 	vldr	s15, [pc, #28]	; 8012e24 <__ieee754_asinf+0x18c>
 8012e0a:	eee5 7ae6 	vfms.f32	s15, s11, s13
 8012e0e:	eed0 7a06 	vfnms.f32	s15, s0, s12
 8012e12:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8012e60 <__ieee754_asinf+0x1c8>
 8012e16:	eeb0 6a40 	vmov.f32	s12, s0
 8012e1a:	eea7 6a66 	vfms.f32	s12, s14, s13
 8012e1e:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8012e22:	e7aa      	b.n	8012d7a <__ieee754_asinf+0xe2>
 8012e24:	b33bbd2e 	.word	0xb33bbd2e
 8012e28:	3fc90fdb 	.word	0x3fc90fdb
 8012e2c:	7149f2ca 	.word	0x7149f2ca
 8012e30:	3811ef08 	.word	0x3811ef08
 8012e34:	3a4f7f04 	.word	0x3a4f7f04
 8012e38:	3e2aaaab 	.word	0x3e2aaaab
 8012e3c:	bd241146 	.word	0xbd241146
 8012e40:	3e4e0aa8 	.word	0x3e4e0aa8
 8012e44:	bea6b090 	.word	0xbea6b090
 8012e48:	3d9dc62e 	.word	0x3d9dc62e
 8012e4c:	bf303361 	.word	0xbf303361
 8012e50:	4001572d 	.word	0x4001572d
 8012e54:	c019d139 	.word	0xc019d139
 8012e58:	3f799999 	.word	0x3f799999
 8012e5c:	333bbd2e 	.word	0x333bbd2e
 8012e60:	3f490fdb 	.word	0x3f490fdb

08012e64 <__ieee754_atan2f>:
 8012e64:	ee10 2a90 	vmov	r2, s1
 8012e68:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8012e6c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8012e70:	b510      	push	{r4, lr}
 8012e72:	eef0 7a40 	vmov.f32	s15, s0
 8012e76:	dc06      	bgt.n	8012e86 <__ieee754_atan2f+0x22>
 8012e78:	ee10 0a10 	vmov	r0, s0
 8012e7c:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8012e80:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8012e84:	dd04      	ble.n	8012e90 <__ieee754_atan2f+0x2c>
 8012e86:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8012e8a:	eeb0 0a67 	vmov.f32	s0, s15
 8012e8e:	bd10      	pop	{r4, pc}
 8012e90:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8012e94:	d103      	bne.n	8012e9e <__ieee754_atan2f+0x3a>
 8012e96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012e9a:	f001 b89b 	b.w	8013fd4 <atanf>
 8012e9e:	1794      	asrs	r4, r2, #30
 8012ea0:	f004 0402 	and.w	r4, r4, #2
 8012ea4:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8012ea8:	b943      	cbnz	r3, 8012ebc <__ieee754_atan2f+0x58>
 8012eaa:	2c02      	cmp	r4, #2
 8012eac:	d05e      	beq.n	8012f6c <__ieee754_atan2f+0x108>
 8012eae:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8012f80 <__ieee754_atan2f+0x11c>
 8012eb2:	2c03      	cmp	r4, #3
 8012eb4:	bf08      	it	eq
 8012eb6:	eef0 7a47 	vmoveq.f32	s15, s14
 8012eba:	e7e6      	b.n	8012e8a <__ieee754_atan2f+0x26>
 8012ebc:	b941      	cbnz	r1, 8012ed0 <__ieee754_atan2f+0x6c>
 8012ebe:	eddf 7a31 	vldr	s15, [pc, #196]	; 8012f84 <__ieee754_atan2f+0x120>
 8012ec2:	ed9f 0a31 	vldr	s0, [pc, #196]	; 8012f88 <__ieee754_atan2f+0x124>
 8012ec6:	2800      	cmp	r0, #0
 8012ec8:	bfb8      	it	lt
 8012eca:	eef0 7a40 	vmovlt.f32	s15, s0
 8012ece:	e7dc      	b.n	8012e8a <__ieee754_atan2f+0x26>
 8012ed0:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8012ed4:	d110      	bne.n	8012ef8 <__ieee754_atan2f+0x94>
 8012ed6:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8012eda:	f104 34ff 	add.w	r4, r4, #4294967295
 8012ede:	d107      	bne.n	8012ef0 <__ieee754_atan2f+0x8c>
 8012ee0:	2c02      	cmp	r4, #2
 8012ee2:	d846      	bhi.n	8012f72 <__ieee754_atan2f+0x10e>
 8012ee4:	4b29      	ldr	r3, [pc, #164]	; (8012f8c <__ieee754_atan2f+0x128>)
 8012ee6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8012eea:	edd4 7a00 	vldr	s15, [r4]
 8012eee:	e7cc      	b.n	8012e8a <__ieee754_atan2f+0x26>
 8012ef0:	2c02      	cmp	r4, #2
 8012ef2:	d841      	bhi.n	8012f78 <__ieee754_atan2f+0x114>
 8012ef4:	4b26      	ldr	r3, [pc, #152]	; (8012f90 <__ieee754_atan2f+0x12c>)
 8012ef6:	e7f6      	b.n	8012ee6 <__ieee754_atan2f+0x82>
 8012ef8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8012efc:	d0df      	beq.n	8012ebe <__ieee754_atan2f+0x5a>
 8012efe:	1a5b      	subs	r3, r3, r1
 8012f00:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 8012f04:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8012f08:	da1a      	bge.n	8012f40 <__ieee754_atan2f+0xdc>
 8012f0a:	2a00      	cmp	r2, #0
 8012f0c:	da01      	bge.n	8012f12 <__ieee754_atan2f+0xae>
 8012f0e:	313c      	adds	r1, #60	; 0x3c
 8012f10:	db19      	blt.n	8012f46 <__ieee754_atan2f+0xe2>
 8012f12:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8012f16:	f001 f931 	bl	801417c <fabsf>
 8012f1a:	f001 f85b 	bl	8013fd4 <atanf>
 8012f1e:	eef0 7a40 	vmov.f32	s15, s0
 8012f22:	2c01      	cmp	r4, #1
 8012f24:	d012      	beq.n	8012f4c <__ieee754_atan2f+0xe8>
 8012f26:	2c02      	cmp	r4, #2
 8012f28:	d017      	beq.n	8012f5a <__ieee754_atan2f+0xf6>
 8012f2a:	2c00      	cmp	r4, #0
 8012f2c:	d0ad      	beq.n	8012e8a <__ieee754_atan2f+0x26>
 8012f2e:	ed9f 0a19 	vldr	s0, [pc, #100]	; 8012f94 <__ieee754_atan2f+0x130>
 8012f32:	ee77 7a80 	vadd.f32	s15, s15, s0
 8012f36:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8012f98 <__ieee754_atan2f+0x134>
 8012f3a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8012f3e:	e7a4      	b.n	8012e8a <__ieee754_atan2f+0x26>
 8012f40:	eddf 7a10 	vldr	s15, [pc, #64]	; 8012f84 <__ieee754_atan2f+0x120>
 8012f44:	e7ed      	b.n	8012f22 <__ieee754_atan2f+0xbe>
 8012f46:	eddf 7a15 	vldr	s15, [pc, #84]	; 8012f9c <__ieee754_atan2f+0x138>
 8012f4a:	e7ea      	b.n	8012f22 <__ieee754_atan2f+0xbe>
 8012f4c:	ee17 3a90 	vmov	r3, s15
 8012f50:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8012f54:	ee07 3a90 	vmov	s15, r3
 8012f58:	e797      	b.n	8012e8a <__ieee754_atan2f+0x26>
 8012f5a:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8012f94 <__ieee754_atan2f+0x130>
 8012f5e:	ee77 7a80 	vadd.f32	s15, s15, s0
 8012f62:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8012f98 <__ieee754_atan2f+0x134>
 8012f66:	ee70 7a67 	vsub.f32	s15, s0, s15
 8012f6a:	e78e      	b.n	8012e8a <__ieee754_atan2f+0x26>
 8012f6c:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8012f98 <__ieee754_atan2f+0x134>
 8012f70:	e78b      	b.n	8012e8a <__ieee754_atan2f+0x26>
 8012f72:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8012fa0 <__ieee754_atan2f+0x13c>
 8012f76:	e788      	b.n	8012e8a <__ieee754_atan2f+0x26>
 8012f78:	eddf 7a08 	vldr	s15, [pc, #32]	; 8012f9c <__ieee754_atan2f+0x138>
 8012f7c:	e785      	b.n	8012e8a <__ieee754_atan2f+0x26>
 8012f7e:	bf00      	nop
 8012f80:	c0490fdb 	.word	0xc0490fdb
 8012f84:	3fc90fdb 	.word	0x3fc90fdb
 8012f88:	bfc90fdb 	.word	0xbfc90fdb
 8012f8c:	08014990 	.word	0x08014990
 8012f90:	0801499c 	.word	0x0801499c
 8012f94:	33bbbd2e 	.word	0x33bbbd2e
 8012f98:	40490fdb 	.word	0x40490fdb
 8012f9c:	00000000 	.word	0x00000000
 8012fa0:	3f490fdb 	.word	0x3f490fdb

08012fa4 <__ieee754_powf>:
 8012fa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012fa8:	ee10 4a90 	vmov	r4, s1
 8012fac:	f034 4800 	bics.w	r8, r4, #2147483648	; 0x80000000
 8012fb0:	ed2d 8b02 	vpush	{d8}
 8012fb4:	ee10 6a10 	vmov	r6, s0
 8012fb8:	eeb0 8a40 	vmov.f32	s16, s0
 8012fbc:	eef0 8a60 	vmov.f32	s17, s1
 8012fc0:	d10c      	bne.n	8012fdc <__ieee754_powf+0x38>
 8012fc2:	f486 0680 	eor.w	r6, r6, #4194304	; 0x400000
 8012fc6:	0076      	lsls	r6, r6, #1
 8012fc8:	f516 0f00 	cmn.w	r6, #8388608	; 0x800000
 8012fcc:	f240 8296 	bls.w	80134fc <__ieee754_powf+0x558>
 8012fd0:	ee38 0a28 	vadd.f32	s0, s16, s17
 8012fd4:	ecbd 8b02 	vpop	{d8}
 8012fd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012fdc:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8012fe0:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8012fe4:	dcf4      	bgt.n	8012fd0 <__ieee754_powf+0x2c>
 8012fe6:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 8012fea:	dd08      	ble.n	8012ffe <__ieee754_powf+0x5a>
 8012fec:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
 8012ff0:	d1ee      	bne.n	8012fd0 <__ieee754_powf+0x2c>
 8012ff2:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 8012ff6:	0064      	lsls	r4, r4, #1
 8012ff8:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 8012ffc:	e7e6      	b.n	8012fcc <__ieee754_powf+0x28>
 8012ffe:	2e00      	cmp	r6, #0
 8013000:	da20      	bge.n	8013044 <__ieee754_powf+0xa0>
 8013002:	f1b8 4f97 	cmp.w	r8, #1266679808	; 0x4b800000
 8013006:	da2d      	bge.n	8013064 <__ieee754_powf+0xc0>
 8013008:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 801300c:	f2c0 827f 	blt.w	801350e <__ieee754_powf+0x56a>
 8013010:	ea4f 53e8 	mov.w	r3, r8, asr #23
 8013014:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8013018:	fa48 f703 	asr.w	r7, r8, r3
 801301c:	fa07 f303 	lsl.w	r3, r7, r3
 8013020:	4543      	cmp	r3, r8
 8013022:	f040 8274 	bne.w	801350e <__ieee754_powf+0x56a>
 8013026:	f007 0701 	and.w	r7, r7, #1
 801302a:	f1c7 0702 	rsb	r7, r7, #2
 801302e:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 8013032:	d11f      	bne.n	8013074 <__ieee754_powf+0xd0>
 8013034:	2c00      	cmp	r4, #0
 8013036:	f280 8267 	bge.w	8013508 <__ieee754_powf+0x564>
 801303a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801303e:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8013042:	e7c7      	b.n	8012fd4 <__ieee754_powf+0x30>
 8013044:	2700      	movs	r7, #0
 8013046:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 801304a:	d1f0      	bne.n	801302e <__ieee754_powf+0x8a>
 801304c:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 8013050:	f000 8254 	beq.w	80134fc <__ieee754_powf+0x558>
 8013054:	dd08      	ble.n	8013068 <__ieee754_powf+0xc4>
 8013056:	ed9f 0ac2 	vldr	s0, [pc, #776]	; 8013360 <__ieee754_powf+0x3bc>
 801305a:	2c00      	cmp	r4, #0
 801305c:	bfa8      	it	ge
 801305e:	eeb0 0a68 	vmovge.f32	s0, s17
 8013062:	e7b7      	b.n	8012fd4 <__ieee754_powf+0x30>
 8013064:	2702      	movs	r7, #2
 8013066:	e7ee      	b.n	8013046 <__ieee754_powf+0xa2>
 8013068:	2c00      	cmp	r4, #0
 801306a:	f280 824a 	bge.w	8013502 <__ieee754_powf+0x55e>
 801306e:	eeb1 0a68 	vneg.f32	s0, s17
 8013072:	e7af      	b.n	8012fd4 <__ieee754_powf+0x30>
 8013074:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 8013078:	d102      	bne.n	8013080 <__ieee754_powf+0xdc>
 801307a:	ee28 0a08 	vmul.f32	s0, s16, s16
 801307e:	e7a9      	b.n	8012fd4 <__ieee754_powf+0x30>
 8013080:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 8013084:	eeb0 0a48 	vmov.f32	s0, s16
 8013088:	d107      	bne.n	801309a <__ieee754_powf+0xf6>
 801308a:	2e00      	cmp	r6, #0
 801308c:	db05      	blt.n	801309a <__ieee754_powf+0xf6>
 801308e:	ecbd 8b02 	vpop	{d8}
 8013092:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013096:	f000 bb8f 	b.w	80137b8 <__ieee754_sqrtf>
 801309a:	f001 f86f 	bl	801417c <fabsf>
 801309e:	b125      	cbz	r5, 80130aa <__ieee754_powf+0x106>
 80130a0:	f026 4340 	bic.w	r3, r6, #3221225472	; 0xc0000000
 80130a4:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 80130a8:	d116      	bne.n	80130d8 <__ieee754_powf+0x134>
 80130aa:	2c00      	cmp	r4, #0
 80130ac:	bfbc      	itt	lt
 80130ae:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 80130b2:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 80130b6:	2e00      	cmp	r6, #0
 80130b8:	da8c      	bge.n	8012fd4 <__ieee754_powf+0x30>
 80130ba:	f1a5 557e 	sub.w	r5, r5, #1065353216	; 0x3f800000
 80130be:	ea55 0307 	orrs.w	r3, r5, r7
 80130c2:	d104      	bne.n	80130ce <__ieee754_powf+0x12a>
 80130c4:	ee70 7a40 	vsub.f32	s15, s0, s0
 80130c8:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 80130cc:	e782      	b.n	8012fd4 <__ieee754_powf+0x30>
 80130ce:	2f01      	cmp	r7, #1
 80130d0:	d180      	bne.n	8012fd4 <__ieee754_powf+0x30>
 80130d2:	eeb1 0a40 	vneg.f32	s0, s0
 80130d6:	e77d      	b.n	8012fd4 <__ieee754_powf+0x30>
 80130d8:	0ff0      	lsrs	r0, r6, #31
 80130da:	3801      	subs	r0, #1
 80130dc:	ea57 0300 	orrs.w	r3, r7, r0
 80130e0:	d104      	bne.n	80130ec <__ieee754_powf+0x148>
 80130e2:	ee38 8a48 	vsub.f32	s16, s16, s16
 80130e6:	ee88 0a08 	vdiv.f32	s0, s16, s16
 80130ea:	e773      	b.n	8012fd4 <__ieee754_powf+0x30>
 80130ec:	f1b8 4f9a 	cmp.w	r8, #1291845632	; 0x4d000000
 80130f0:	dd74      	ble.n	80131dc <__ieee754_powf+0x238>
 80130f2:	4b9c      	ldr	r3, [pc, #624]	; (8013364 <__ieee754_powf+0x3c0>)
 80130f4:	429d      	cmp	r5, r3
 80130f6:	dc08      	bgt.n	801310a <__ieee754_powf+0x166>
 80130f8:	2c00      	cmp	r4, #0
 80130fa:	da0b      	bge.n	8013114 <__ieee754_powf+0x170>
 80130fc:	2000      	movs	r0, #0
 80130fe:	ecbd 8b02 	vpop	{d8}
 8013102:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013106:	f000 bec5 	b.w	8013e94 <__math_oflowf>
 801310a:	4b97      	ldr	r3, [pc, #604]	; (8013368 <__ieee754_powf+0x3c4>)
 801310c:	429d      	cmp	r5, r3
 801310e:	dd08      	ble.n	8013122 <__ieee754_powf+0x17e>
 8013110:	2c00      	cmp	r4, #0
 8013112:	dcf3      	bgt.n	80130fc <__ieee754_powf+0x158>
 8013114:	2000      	movs	r0, #0
 8013116:	ecbd 8b02 	vpop	{d8}
 801311a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801311e:	f000 beb3 	b.w	8013e88 <__math_uflowf>
 8013122:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8013126:	ee30 0a67 	vsub.f32	s0, s0, s15
 801312a:	eddf 6a90 	vldr	s13, [pc, #576]	; 801336c <__ieee754_powf+0x3c8>
 801312e:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8013132:	eee0 6a67 	vfms.f32	s13, s0, s15
 8013136:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801313a:	eee6 7ac0 	vfms.f32	s15, s13, s0
 801313e:	ee20 7a00 	vmul.f32	s14, s0, s0
 8013142:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013146:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8013370 <__ieee754_powf+0x3cc>
 801314a:	ee67 7a67 	vnmul.f32	s15, s14, s15
 801314e:	ed9f 7a89 	vldr	s14, [pc, #548]	; 8013374 <__ieee754_powf+0x3d0>
 8013152:	eee0 7a07 	vfma.f32	s15, s0, s14
 8013156:	ed9f 7a88 	vldr	s14, [pc, #544]	; 8013378 <__ieee754_powf+0x3d4>
 801315a:	eef0 6a67 	vmov.f32	s13, s15
 801315e:	eee0 6a07 	vfma.f32	s13, s0, s14
 8013162:	ee16 3a90 	vmov	r3, s13
 8013166:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 801316a:	f023 030f 	bic.w	r3, r3, #15
 801316e:	ee00 3a90 	vmov	s1, r3
 8013172:	eee0 0a47 	vfms.f32	s1, s0, s14
 8013176:	ee77 7ae0 	vsub.f32	s15, s15, s1
 801317a:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 801317e:	f024 040f 	bic.w	r4, r4, #15
 8013182:	ee07 4a10 	vmov	s14, r4
 8013186:	ee67 0aa8 	vmul.f32	s1, s15, s17
 801318a:	ee38 7ac7 	vsub.f32	s14, s17, s14
 801318e:	ee07 3a90 	vmov	s15, r3
 8013192:	eee7 0a27 	vfma.f32	s1, s14, s15
 8013196:	3f01      	subs	r7, #1
 8013198:	ea57 0200 	orrs.w	r2, r7, r0
 801319c:	ee07 4a10 	vmov	s14, r4
 80131a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80131a4:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 80131a8:	ee30 7aa7 	vadd.f32	s14, s1, s15
 80131ac:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 80131b0:	ee17 4a10 	vmov	r4, s14
 80131b4:	bf08      	it	eq
 80131b6:	eeb0 8a40 	vmoveq.f32	s16, s0
 80131ba:	2c00      	cmp	r4, #0
 80131bc:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80131c0:	f340 817e 	ble.w	80134c0 <__ieee754_powf+0x51c>
 80131c4:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 80131c8:	f340 80f8 	ble.w	80133bc <__ieee754_powf+0x418>
 80131cc:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80131d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80131d4:	bf4c      	ite	mi
 80131d6:	2001      	movmi	r0, #1
 80131d8:	2000      	movpl	r0, #0
 80131da:	e790      	b.n	80130fe <__ieee754_powf+0x15a>
 80131dc:	f016 4fff 	tst.w	r6, #2139095040	; 0x7f800000
 80131e0:	bf01      	itttt	eq
 80131e2:	eddf 7a66 	vldreq	s15, [pc, #408]	; 801337c <__ieee754_powf+0x3d8>
 80131e6:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 80131ea:	f06f 0217 	mvneq.w	r2, #23
 80131ee:	ee17 5a90 	vmoveq	r5, s15
 80131f2:	ea4f 53e5 	mov.w	r3, r5, asr #23
 80131f6:	bf18      	it	ne
 80131f8:	2200      	movne	r2, #0
 80131fa:	3b7f      	subs	r3, #127	; 0x7f
 80131fc:	4413      	add	r3, r2
 80131fe:	4a60      	ldr	r2, [pc, #384]	; (8013380 <__ieee754_powf+0x3dc>)
 8013200:	f3c5 0516 	ubfx	r5, r5, #0, #23
 8013204:	4295      	cmp	r5, r2
 8013206:	f045 517e 	orr.w	r1, r5, #1065353216	; 0x3f800000
 801320a:	dd06      	ble.n	801321a <__ieee754_powf+0x276>
 801320c:	4a5d      	ldr	r2, [pc, #372]	; (8013384 <__ieee754_powf+0x3e0>)
 801320e:	4295      	cmp	r5, r2
 8013210:	f340 80a4 	ble.w	801335c <__ieee754_powf+0x3b8>
 8013214:	3301      	adds	r3, #1
 8013216:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 801321a:	2500      	movs	r5, #0
 801321c:	4a5a      	ldr	r2, [pc, #360]	; (8013388 <__ieee754_powf+0x3e4>)
 801321e:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 8013222:	ee07 1a90 	vmov	s15, r1
 8013226:	ed92 7a00 	vldr	s14, [r2]
 801322a:	4a58      	ldr	r2, [pc, #352]	; (801338c <__ieee754_powf+0x3e8>)
 801322c:	ee37 6a27 	vadd.f32	s12, s14, s15
 8013230:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8013234:	eec5 6a86 	vdiv.f32	s13, s11, s12
 8013238:	1049      	asrs	r1, r1, #1
 801323a:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 801323e:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 8013242:	eb01 5145 	add.w	r1, r1, r5, lsl #21
 8013246:	ee37 5ac7 	vsub.f32	s10, s15, s14
 801324a:	ee06 1a10 	vmov	s12, r1
 801324e:	ee65 4a26 	vmul.f32	s9, s10, s13
 8013252:	ee36 7a47 	vsub.f32	s14, s12, s14
 8013256:	ee14 6a90 	vmov	r6, s9
 801325a:	4016      	ands	r6, r2
 801325c:	ee05 6a90 	vmov	s11, r6
 8013260:	eea5 5ac6 	vfms.f32	s10, s11, s12
 8013264:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013268:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8013390 <__ieee754_powf+0x3ec>
 801326c:	eea5 5ae7 	vfms.f32	s10, s11, s15
 8013270:	ee64 7aa4 	vmul.f32	s15, s9, s9
 8013274:	ee25 6a26 	vmul.f32	s12, s10, s13
 8013278:	eddf 6a46 	vldr	s13, [pc, #280]	; 8013394 <__ieee754_powf+0x3f0>
 801327c:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8013280:	eddf 6a45 	vldr	s13, [pc, #276]	; 8013398 <__ieee754_powf+0x3f4>
 8013284:	eee7 6a27 	vfma.f32	s13, s14, s15
 8013288:	ed9f 7a38 	vldr	s14, [pc, #224]	; 801336c <__ieee754_powf+0x3c8>
 801328c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8013290:	eddf 6a42 	vldr	s13, [pc, #264]	; 801339c <__ieee754_powf+0x3f8>
 8013294:	eee7 6a27 	vfma.f32	s13, s14, s15
 8013298:	ed9f 7a41 	vldr	s14, [pc, #260]	; 80133a0 <__ieee754_powf+0x3fc>
 801329c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80132a0:	ee74 6aa5 	vadd.f32	s13, s9, s11
 80132a4:	ee27 5aa7 	vmul.f32	s10, s15, s15
 80132a8:	ee66 6a86 	vmul.f32	s13, s13, s12
 80132ac:	eee5 6a07 	vfma.f32	s13, s10, s14
 80132b0:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 80132b4:	eef0 7a45 	vmov.f32	s15, s10
 80132b8:	eee5 7aa5 	vfma.f32	s15, s11, s11
 80132bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80132c0:	ee17 1a90 	vmov	r1, s15
 80132c4:	4011      	ands	r1, r2
 80132c6:	ee07 1a90 	vmov	s15, r1
 80132ca:	ee37 7ac5 	vsub.f32	s14, s15, s10
 80132ce:	eea5 7ae5 	vfms.f32	s14, s11, s11
 80132d2:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80132d6:	ee27 7a24 	vmul.f32	s14, s14, s9
 80132da:	eea6 7a27 	vfma.f32	s14, s12, s15
 80132de:	eeb0 6a47 	vmov.f32	s12, s14
 80132e2:	eea5 6aa7 	vfma.f32	s12, s11, s15
 80132e6:	ee16 1a10 	vmov	r1, s12
 80132ea:	4011      	ands	r1, r2
 80132ec:	ee06 1a90 	vmov	s13, r1
 80132f0:	eee5 6ae7 	vfms.f32	s13, s11, s15
 80132f4:	eddf 7a2b 	vldr	s15, [pc, #172]	; 80133a4 <__ieee754_powf+0x400>
 80132f8:	eddf 5a2b 	vldr	s11, [pc, #172]	; 80133a8 <__ieee754_powf+0x404>
 80132fc:	ee37 7a66 	vsub.f32	s14, s14, s13
 8013300:	ee06 1a10 	vmov	s12, r1
 8013304:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013308:	eddf 7a28 	vldr	s15, [pc, #160]	; 80133ac <__ieee754_powf+0x408>
 801330c:	4928      	ldr	r1, [pc, #160]	; (80133b0 <__ieee754_powf+0x40c>)
 801330e:	eea6 7a27 	vfma.f32	s14, s12, s15
 8013312:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 8013316:	edd1 7a00 	vldr	s15, [r1]
 801331a:	ee37 7a27 	vadd.f32	s14, s14, s15
 801331e:	ee07 3a90 	vmov	s15, r3
 8013322:	4b24      	ldr	r3, [pc, #144]	; (80133b4 <__ieee754_powf+0x410>)
 8013324:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8013328:	eef0 7a47 	vmov.f32	s15, s14
 801332c:	eee6 7a25 	vfma.f32	s15, s12, s11
 8013330:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8013334:	edd5 0a00 	vldr	s1, [r5]
 8013338:	ee77 7aa0 	vadd.f32	s15, s15, s1
 801333c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013340:	ee17 3a90 	vmov	r3, s15
 8013344:	4013      	ands	r3, r2
 8013346:	ee07 3a90 	vmov	s15, r3
 801334a:	ee77 6ae6 	vsub.f32	s13, s15, s13
 801334e:	ee76 6ae0 	vsub.f32	s13, s13, s1
 8013352:	eee6 6a65 	vfms.f32	s13, s12, s11
 8013356:	ee77 7a66 	vsub.f32	s15, s14, s13
 801335a:	e70e      	b.n	801317a <__ieee754_powf+0x1d6>
 801335c:	2501      	movs	r5, #1
 801335e:	e75d      	b.n	801321c <__ieee754_powf+0x278>
 8013360:	00000000 	.word	0x00000000
 8013364:	3f7ffff3 	.word	0x3f7ffff3
 8013368:	3f800007 	.word	0x3f800007
 801336c:	3eaaaaab 	.word	0x3eaaaaab
 8013370:	3fb8aa3b 	.word	0x3fb8aa3b
 8013374:	36eca570 	.word	0x36eca570
 8013378:	3fb8aa00 	.word	0x3fb8aa00
 801337c:	4b800000 	.word	0x4b800000
 8013380:	001cc471 	.word	0x001cc471
 8013384:	005db3d6 	.word	0x005db3d6
 8013388:	080149a8 	.word	0x080149a8
 801338c:	fffff000 	.word	0xfffff000
 8013390:	3e6c3255 	.word	0x3e6c3255
 8013394:	3e53f142 	.word	0x3e53f142
 8013398:	3e8ba305 	.word	0x3e8ba305
 801339c:	3edb6db7 	.word	0x3edb6db7
 80133a0:	3f19999a 	.word	0x3f19999a
 80133a4:	3f76384f 	.word	0x3f76384f
 80133a8:	3f763800 	.word	0x3f763800
 80133ac:	369dc3a0 	.word	0x369dc3a0
 80133b0:	080149b8 	.word	0x080149b8
 80133b4:	080149b0 	.word	0x080149b0
 80133b8:	3338aa3c 	.word	0x3338aa3c
 80133bc:	f040 8095 	bne.w	80134ea <__ieee754_powf+0x546>
 80133c0:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 80133b8 <__ieee754_powf+0x414>
 80133c4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80133c8:	ee70 6aa6 	vadd.f32	s13, s1, s13
 80133cc:	eef4 6ac7 	vcmpe.f32	s13, s14
 80133d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80133d4:	f73f aefa 	bgt.w	80131cc <__ieee754_powf+0x228>
 80133d8:	15db      	asrs	r3, r3, #23
 80133da:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 80133de:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80133e2:	4103      	asrs	r3, r0
 80133e4:	4423      	add	r3, r4
 80133e6:	494b      	ldr	r1, [pc, #300]	; (8013514 <__ieee754_powf+0x570>)
 80133e8:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80133ec:	3a7f      	subs	r2, #127	; 0x7f
 80133ee:	4111      	asrs	r1, r2
 80133f0:	ea23 0101 	bic.w	r1, r3, r1
 80133f4:	ee07 1a10 	vmov	s14, r1
 80133f8:	f3c3 0016 	ubfx	r0, r3, #0, #23
 80133fc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8013400:	f1c2 0217 	rsb	r2, r2, #23
 8013404:	4110      	asrs	r0, r2
 8013406:	2c00      	cmp	r4, #0
 8013408:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801340c:	bfb8      	it	lt
 801340e:	4240      	neglt	r0, r0
 8013410:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8013414:	ed9f 0a40 	vldr	s0, [pc, #256]	; 8013518 <__ieee754_powf+0x574>
 8013418:	eddf 6a40 	vldr	s13, [pc, #256]	; 801351c <__ieee754_powf+0x578>
 801341c:	ee17 3a10 	vmov	r3, s14
 8013420:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8013424:	f023 030f 	bic.w	r3, r3, #15
 8013428:	ee07 3a10 	vmov	s14, r3
 801342c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013430:	ee27 0a00 	vmul.f32	s0, s14, s0
 8013434:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8013438:	eddf 7a39 	vldr	s15, [pc, #228]	; 8013520 <__ieee754_powf+0x57c>
 801343c:	eea0 0aa7 	vfma.f32	s0, s1, s15
 8013440:	eef0 7a40 	vmov.f32	s15, s0
 8013444:	eee7 7a26 	vfma.f32	s15, s14, s13
 8013448:	eeb0 6a67 	vmov.f32	s12, s15
 801344c:	eea7 6a66 	vfms.f32	s12, s14, s13
 8013450:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8013454:	ee30 0a46 	vsub.f32	s0, s0, s12
 8013458:	eddf 6a32 	vldr	s13, [pc, #200]	; 8013524 <__ieee754_powf+0x580>
 801345c:	ed9f 6a32 	vldr	s12, [pc, #200]	; 8013528 <__ieee754_powf+0x584>
 8013460:	eee7 6a06 	vfma.f32	s13, s14, s12
 8013464:	ed9f 6a31 	vldr	s12, [pc, #196]	; 801352c <__ieee754_powf+0x588>
 8013468:	eea6 6a87 	vfma.f32	s12, s13, s14
 801346c:	eddf 6a30 	vldr	s13, [pc, #192]	; 8013530 <__ieee754_powf+0x58c>
 8013470:	eee6 6a07 	vfma.f32	s13, s12, s14
 8013474:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 8013534 <__ieee754_powf+0x590>
 8013478:	eea6 6a87 	vfma.f32	s12, s13, s14
 801347c:	eef0 6a67 	vmov.f32	s13, s15
 8013480:	eee6 6a47 	vfms.f32	s13, s12, s14
 8013484:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8013488:	ee27 6aa6 	vmul.f32	s12, s15, s13
 801348c:	ee76 6ac7 	vsub.f32	s13, s13, s14
 8013490:	eea7 0a80 	vfma.f32	s0, s15, s0
 8013494:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8013498:	ee37 0a40 	vsub.f32	s0, s14, s0
 801349c:	ee70 7a67 	vsub.f32	s15, s0, s15
 80134a0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80134a4:	ee30 0a67 	vsub.f32	s0, s0, s15
 80134a8:	ee10 3a10 	vmov	r3, s0
 80134ac:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 80134b0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80134b4:	da1f      	bge.n	80134f6 <__ieee754_powf+0x552>
 80134b6:	f000 febd 	bl	8014234 <scalbnf>
 80134ba:	ee20 0a08 	vmul.f32	s0, s0, s16
 80134be:	e589      	b.n	8012fd4 <__ieee754_powf+0x30>
 80134c0:	4a1d      	ldr	r2, [pc, #116]	; (8013538 <__ieee754_powf+0x594>)
 80134c2:	4293      	cmp	r3, r2
 80134c4:	dd07      	ble.n	80134d6 <__ieee754_powf+0x532>
 80134c6:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80134ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80134ce:	bf4c      	ite	mi
 80134d0:	2001      	movmi	r0, #1
 80134d2:	2000      	movpl	r0, #0
 80134d4:	e61f      	b.n	8013116 <__ieee754_powf+0x172>
 80134d6:	d108      	bne.n	80134ea <__ieee754_powf+0x546>
 80134d8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80134dc:	eeb4 7ae0 	vcmpe.f32	s14, s1
 80134e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80134e4:	f6ff af78 	blt.w	80133d8 <__ieee754_powf+0x434>
 80134e8:	e7ed      	b.n	80134c6 <__ieee754_powf+0x522>
 80134ea:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 80134ee:	f73f af73 	bgt.w	80133d8 <__ieee754_powf+0x434>
 80134f2:	2000      	movs	r0, #0
 80134f4:	e78c      	b.n	8013410 <__ieee754_powf+0x46c>
 80134f6:	ee00 3a10 	vmov	s0, r3
 80134fa:	e7de      	b.n	80134ba <__ieee754_powf+0x516>
 80134fc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8013500:	e568      	b.n	8012fd4 <__ieee754_powf+0x30>
 8013502:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 801353c <__ieee754_powf+0x598>
 8013506:	e565      	b.n	8012fd4 <__ieee754_powf+0x30>
 8013508:	eeb0 0a48 	vmov.f32	s0, s16
 801350c:	e562      	b.n	8012fd4 <__ieee754_powf+0x30>
 801350e:	2700      	movs	r7, #0
 8013510:	e58d      	b.n	801302e <__ieee754_powf+0x8a>
 8013512:	bf00      	nop
 8013514:	007fffff 	.word	0x007fffff
 8013518:	35bfbe8c 	.word	0x35bfbe8c
 801351c:	3f317200 	.word	0x3f317200
 8013520:	3f317218 	.word	0x3f317218
 8013524:	b5ddea0e 	.word	0xb5ddea0e
 8013528:	3331bb4c 	.word	0x3331bb4c
 801352c:	388ab355 	.word	0x388ab355
 8013530:	bb360b61 	.word	0xbb360b61
 8013534:	3e2aaaab 	.word	0x3e2aaaab
 8013538:	43160000 	.word	0x43160000
 801353c:	00000000 	.word	0x00000000

08013540 <__ieee754_rem_pio2f>:
 8013540:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013542:	ee10 6a10 	vmov	r6, s0
 8013546:	4b8e      	ldr	r3, [pc, #568]	; (8013780 <__ieee754_rem_pio2f+0x240>)
 8013548:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 801354c:	429d      	cmp	r5, r3
 801354e:	b087      	sub	sp, #28
 8013550:	eef0 7a40 	vmov.f32	s15, s0
 8013554:	4604      	mov	r4, r0
 8013556:	dc05      	bgt.n	8013564 <__ieee754_rem_pio2f+0x24>
 8013558:	2300      	movs	r3, #0
 801355a:	ed80 0a00 	vstr	s0, [r0]
 801355e:	6043      	str	r3, [r0, #4]
 8013560:	2000      	movs	r0, #0
 8013562:	e01a      	b.n	801359a <__ieee754_rem_pio2f+0x5a>
 8013564:	4b87      	ldr	r3, [pc, #540]	; (8013784 <__ieee754_rem_pio2f+0x244>)
 8013566:	429d      	cmp	r5, r3
 8013568:	dc46      	bgt.n	80135f8 <__ieee754_rem_pio2f+0xb8>
 801356a:	2e00      	cmp	r6, #0
 801356c:	ed9f 0a86 	vldr	s0, [pc, #536]	; 8013788 <__ieee754_rem_pio2f+0x248>
 8013570:	4b86      	ldr	r3, [pc, #536]	; (801378c <__ieee754_rem_pio2f+0x24c>)
 8013572:	f025 050f 	bic.w	r5, r5, #15
 8013576:	dd1f      	ble.n	80135b8 <__ieee754_rem_pio2f+0x78>
 8013578:	429d      	cmp	r5, r3
 801357a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801357e:	d00e      	beq.n	801359e <__ieee754_rem_pio2f+0x5e>
 8013580:	ed9f 7a83 	vldr	s14, [pc, #524]	; 8013790 <__ieee754_rem_pio2f+0x250>
 8013584:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8013588:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801358c:	ed80 0a00 	vstr	s0, [r0]
 8013590:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013594:	2001      	movs	r0, #1
 8013596:	edc4 7a01 	vstr	s15, [r4, #4]
 801359a:	b007      	add	sp, #28
 801359c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801359e:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 8013794 <__ieee754_rem_pio2f+0x254>
 80135a2:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8013798 <__ieee754_rem_pio2f+0x258>
 80135a6:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80135aa:	ee77 6ac7 	vsub.f32	s13, s15, s14
 80135ae:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80135b2:	edc0 6a00 	vstr	s13, [r0]
 80135b6:	e7eb      	b.n	8013590 <__ieee754_rem_pio2f+0x50>
 80135b8:	429d      	cmp	r5, r3
 80135ba:	ee77 7a80 	vadd.f32	s15, s15, s0
 80135be:	d00e      	beq.n	80135de <__ieee754_rem_pio2f+0x9e>
 80135c0:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8013790 <__ieee754_rem_pio2f+0x250>
 80135c4:	ee37 0a87 	vadd.f32	s0, s15, s14
 80135c8:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80135cc:	ed80 0a00 	vstr	s0, [r0]
 80135d0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80135d4:	f04f 30ff 	mov.w	r0, #4294967295
 80135d8:	edc4 7a01 	vstr	s15, [r4, #4]
 80135dc:	e7dd      	b.n	801359a <__ieee754_rem_pio2f+0x5a>
 80135de:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 8013794 <__ieee754_rem_pio2f+0x254>
 80135e2:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8013798 <__ieee754_rem_pio2f+0x258>
 80135e6:	ee77 7a80 	vadd.f32	s15, s15, s0
 80135ea:	ee77 6a87 	vadd.f32	s13, s15, s14
 80135ee:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80135f2:	edc0 6a00 	vstr	s13, [r0]
 80135f6:	e7eb      	b.n	80135d0 <__ieee754_rem_pio2f+0x90>
 80135f8:	4b68      	ldr	r3, [pc, #416]	; (801379c <__ieee754_rem_pio2f+0x25c>)
 80135fa:	429d      	cmp	r5, r3
 80135fc:	dc72      	bgt.n	80136e4 <__ieee754_rem_pio2f+0x1a4>
 80135fe:	f000 fdbd 	bl	801417c <fabsf>
 8013602:	ed9f 7a67 	vldr	s14, [pc, #412]	; 80137a0 <__ieee754_rem_pio2f+0x260>
 8013606:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801360a:	eee0 7a07 	vfma.f32	s15, s0, s14
 801360e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013612:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8013616:	ee17 0a90 	vmov	r0, s15
 801361a:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8013788 <__ieee754_rem_pio2f+0x248>
 801361e:	eea7 0a67 	vfms.f32	s0, s14, s15
 8013622:	281f      	cmp	r0, #31
 8013624:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8013790 <__ieee754_rem_pio2f+0x250>
 8013628:	ee67 7a27 	vmul.f32	s15, s14, s15
 801362c:	eeb1 6a47 	vneg.f32	s12, s14
 8013630:	ee70 6a67 	vsub.f32	s13, s0, s15
 8013634:	ee16 2a90 	vmov	r2, s13
 8013638:	dc1c      	bgt.n	8013674 <__ieee754_rem_pio2f+0x134>
 801363a:	495a      	ldr	r1, [pc, #360]	; (80137a4 <__ieee754_rem_pio2f+0x264>)
 801363c:	1e47      	subs	r7, r0, #1
 801363e:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 8013642:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8013646:	428b      	cmp	r3, r1
 8013648:	d014      	beq.n	8013674 <__ieee754_rem_pio2f+0x134>
 801364a:	6022      	str	r2, [r4, #0]
 801364c:	ed94 7a00 	vldr	s14, [r4]
 8013650:	ee30 0a47 	vsub.f32	s0, s0, s14
 8013654:	2e00      	cmp	r6, #0
 8013656:	ee30 0a67 	vsub.f32	s0, s0, s15
 801365a:	ed84 0a01 	vstr	s0, [r4, #4]
 801365e:	da9c      	bge.n	801359a <__ieee754_rem_pio2f+0x5a>
 8013660:	eeb1 7a47 	vneg.f32	s14, s14
 8013664:	eeb1 0a40 	vneg.f32	s0, s0
 8013668:	ed84 7a00 	vstr	s14, [r4]
 801366c:	ed84 0a01 	vstr	s0, [r4, #4]
 8013670:	4240      	negs	r0, r0
 8013672:	e792      	b.n	801359a <__ieee754_rem_pio2f+0x5a>
 8013674:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8013678:	15eb      	asrs	r3, r5, #23
 801367a:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 801367e:	2d08      	cmp	r5, #8
 8013680:	dde3      	ble.n	801364a <__ieee754_rem_pio2f+0x10a>
 8013682:	eddf 7a44 	vldr	s15, [pc, #272]	; 8013794 <__ieee754_rem_pio2f+0x254>
 8013686:	eddf 5a44 	vldr	s11, [pc, #272]	; 8013798 <__ieee754_rem_pio2f+0x258>
 801368a:	eef0 6a40 	vmov.f32	s13, s0
 801368e:	eee6 6a27 	vfma.f32	s13, s12, s15
 8013692:	ee30 0a66 	vsub.f32	s0, s0, s13
 8013696:	eea6 0a27 	vfma.f32	s0, s12, s15
 801369a:	eef0 7a40 	vmov.f32	s15, s0
 801369e:	eed7 7a25 	vfnms.f32	s15, s14, s11
 80136a2:	ee76 5ae7 	vsub.f32	s11, s13, s15
 80136a6:	ee15 2a90 	vmov	r2, s11
 80136aa:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80136ae:	1a5b      	subs	r3, r3, r1
 80136b0:	2b19      	cmp	r3, #25
 80136b2:	dc04      	bgt.n	80136be <__ieee754_rem_pio2f+0x17e>
 80136b4:	edc4 5a00 	vstr	s11, [r4]
 80136b8:	eeb0 0a66 	vmov.f32	s0, s13
 80136bc:	e7c6      	b.n	801364c <__ieee754_rem_pio2f+0x10c>
 80136be:	eddf 5a3a 	vldr	s11, [pc, #232]	; 80137a8 <__ieee754_rem_pio2f+0x268>
 80136c2:	eeb0 0a66 	vmov.f32	s0, s13
 80136c6:	eea6 0a25 	vfma.f32	s0, s12, s11
 80136ca:	ee76 7ac0 	vsub.f32	s15, s13, s0
 80136ce:	eddf 6a37 	vldr	s13, [pc, #220]	; 80137ac <__ieee754_rem_pio2f+0x26c>
 80136d2:	eee6 7a25 	vfma.f32	s15, s12, s11
 80136d6:	eed7 7a26 	vfnms.f32	s15, s14, s13
 80136da:	ee30 7a67 	vsub.f32	s14, s0, s15
 80136de:	ed84 7a00 	vstr	s14, [r4]
 80136e2:	e7b3      	b.n	801364c <__ieee754_rem_pio2f+0x10c>
 80136e4:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 80136e8:	db06      	blt.n	80136f8 <__ieee754_rem_pio2f+0x1b8>
 80136ea:	ee70 7a40 	vsub.f32	s15, s0, s0
 80136ee:	edc0 7a01 	vstr	s15, [r0, #4]
 80136f2:	edc0 7a00 	vstr	s15, [r0]
 80136f6:	e733      	b.n	8013560 <__ieee754_rem_pio2f+0x20>
 80136f8:	15ea      	asrs	r2, r5, #23
 80136fa:	3a86      	subs	r2, #134	; 0x86
 80136fc:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8013700:	ee07 3a90 	vmov	s15, r3
 8013704:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8013708:	eddf 6a29 	vldr	s13, [pc, #164]	; 80137b0 <__ieee754_rem_pio2f+0x270>
 801370c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8013710:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013714:	ed8d 7a03 	vstr	s14, [sp, #12]
 8013718:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801371c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8013720:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8013724:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013728:	ed8d 7a04 	vstr	s14, [sp, #16]
 801372c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8013730:	eef5 7a40 	vcmp.f32	s15, #0.0
 8013734:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013738:	edcd 7a05 	vstr	s15, [sp, #20]
 801373c:	d11e      	bne.n	801377c <__ieee754_rem_pio2f+0x23c>
 801373e:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8013742:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013746:	bf14      	ite	ne
 8013748:	2302      	movne	r3, #2
 801374a:	2301      	moveq	r3, #1
 801374c:	4919      	ldr	r1, [pc, #100]	; (80137b4 <__ieee754_rem_pio2f+0x274>)
 801374e:	9101      	str	r1, [sp, #4]
 8013750:	2102      	movs	r1, #2
 8013752:	9100      	str	r1, [sp, #0]
 8013754:	a803      	add	r0, sp, #12
 8013756:	4621      	mov	r1, r4
 8013758:	f000 f892 	bl	8013880 <__kernel_rem_pio2f>
 801375c:	2e00      	cmp	r6, #0
 801375e:	f6bf af1c 	bge.w	801359a <__ieee754_rem_pio2f+0x5a>
 8013762:	edd4 7a00 	vldr	s15, [r4]
 8013766:	eef1 7a67 	vneg.f32	s15, s15
 801376a:	edc4 7a00 	vstr	s15, [r4]
 801376e:	edd4 7a01 	vldr	s15, [r4, #4]
 8013772:	eef1 7a67 	vneg.f32	s15, s15
 8013776:	edc4 7a01 	vstr	s15, [r4, #4]
 801377a:	e779      	b.n	8013670 <__ieee754_rem_pio2f+0x130>
 801377c:	2303      	movs	r3, #3
 801377e:	e7e5      	b.n	801374c <__ieee754_rem_pio2f+0x20c>
 8013780:	3f490fd8 	.word	0x3f490fd8
 8013784:	4016cbe3 	.word	0x4016cbe3
 8013788:	3fc90f80 	.word	0x3fc90f80
 801378c:	3fc90fd0 	.word	0x3fc90fd0
 8013790:	37354443 	.word	0x37354443
 8013794:	37354400 	.word	0x37354400
 8013798:	2e85a308 	.word	0x2e85a308
 801379c:	43490f80 	.word	0x43490f80
 80137a0:	3f22f984 	.word	0x3f22f984
 80137a4:	080149c0 	.word	0x080149c0
 80137a8:	2e85a300 	.word	0x2e85a300
 80137ac:	248d3132 	.word	0x248d3132
 80137b0:	43800000 	.word	0x43800000
 80137b4:	08014a40 	.word	0x08014a40

080137b8 <__ieee754_sqrtf>:
 80137b8:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80137bc:	4770      	bx	lr
	...

080137c0 <__kernel_cosf>:
 80137c0:	ee10 3a10 	vmov	r3, s0
 80137c4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80137c8:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80137cc:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80137d0:	da05      	bge.n	80137de <__kernel_cosf+0x1e>
 80137d2:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80137d6:	ee17 2a90 	vmov	r2, s15
 80137da:	2a00      	cmp	r2, #0
 80137dc:	d03d      	beq.n	801385a <__kernel_cosf+0x9a>
 80137de:	ee60 5a00 	vmul.f32	s11, s0, s0
 80137e2:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8013860 <__kernel_cosf+0xa0>
 80137e6:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8013864 <__kernel_cosf+0xa4>
 80137ea:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8013868 <__kernel_cosf+0xa8>
 80137ee:	4a1f      	ldr	r2, [pc, #124]	; (801386c <__kernel_cosf+0xac>)
 80137f0:	eea5 7aa7 	vfma.f32	s14, s11, s15
 80137f4:	4293      	cmp	r3, r2
 80137f6:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8013870 <__kernel_cosf+0xb0>
 80137fa:	eee7 7a25 	vfma.f32	s15, s14, s11
 80137fe:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8013874 <__kernel_cosf+0xb4>
 8013802:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8013806:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8013878 <__kernel_cosf+0xb8>
 801380a:	eee7 7a25 	vfma.f32	s15, s14, s11
 801380e:	eeb0 7a66 	vmov.f32	s14, s13
 8013812:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8013816:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 801381a:	ee65 7aa6 	vmul.f32	s15, s11, s13
 801381e:	ee67 6a25 	vmul.f32	s13, s14, s11
 8013822:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 8013826:	eea5 7aa6 	vfma.f32	s14, s11, s13
 801382a:	dc04      	bgt.n	8013836 <__kernel_cosf+0x76>
 801382c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8013830:	ee36 0a47 	vsub.f32	s0, s12, s14
 8013834:	4770      	bx	lr
 8013836:	4a11      	ldr	r2, [pc, #68]	; (801387c <__kernel_cosf+0xbc>)
 8013838:	4293      	cmp	r3, r2
 801383a:	bfda      	itte	le
 801383c:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8013840:	ee06 3a90 	vmovle	s13, r3
 8013844:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 8013848:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801384c:	ee36 0a66 	vsub.f32	s0, s12, s13
 8013850:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013854:	ee30 0a67 	vsub.f32	s0, s0, s15
 8013858:	4770      	bx	lr
 801385a:	eeb0 0a46 	vmov.f32	s0, s12
 801385e:	4770      	bx	lr
 8013860:	ad47d74e 	.word	0xad47d74e
 8013864:	310f74f6 	.word	0x310f74f6
 8013868:	3d2aaaab 	.word	0x3d2aaaab
 801386c:	3e999999 	.word	0x3e999999
 8013870:	b493f27c 	.word	0xb493f27c
 8013874:	37d00d01 	.word	0x37d00d01
 8013878:	bab60b61 	.word	0xbab60b61
 801387c:	3f480000 	.word	0x3f480000

08013880 <__kernel_rem_pio2f>:
 8013880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013884:	ed2d 8b04 	vpush	{d8-d9}
 8013888:	b0d9      	sub	sp, #356	; 0x164
 801388a:	4688      	mov	r8, r1
 801388c:	9002      	str	r0, [sp, #8]
 801388e:	49bb      	ldr	r1, [pc, #748]	; (8013b7c <__kernel_rem_pio2f+0x2fc>)
 8013890:	9866      	ldr	r0, [sp, #408]	; 0x198
 8013892:	9301      	str	r3, [sp, #4]
 8013894:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 8013898:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 801389c:	1e59      	subs	r1, r3, #1
 801389e:	1d13      	adds	r3, r2, #4
 80138a0:	db27      	blt.n	80138f2 <__kernel_rem_pio2f+0x72>
 80138a2:	f1b2 0b03 	subs.w	fp, r2, #3
 80138a6:	bf48      	it	mi
 80138a8:	f102 0b04 	addmi.w	fp, r2, #4
 80138ac:	ea4f 00eb 	mov.w	r0, fp, asr #3
 80138b0:	1c45      	adds	r5, r0, #1
 80138b2:	00ec      	lsls	r4, r5, #3
 80138b4:	1a47      	subs	r7, r0, r1
 80138b6:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 8013b8c <__kernel_rem_pio2f+0x30c>
 80138ba:	9403      	str	r4, [sp, #12]
 80138bc:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 80138c0:	eb0a 0c01 	add.w	ip, sl, r1
 80138c4:	ae1c      	add	r6, sp, #112	; 0x70
 80138c6:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 80138ca:	2400      	movs	r4, #0
 80138cc:	4564      	cmp	r4, ip
 80138ce:	dd12      	ble.n	80138f6 <__kernel_rem_pio2f+0x76>
 80138d0:	9b01      	ldr	r3, [sp, #4]
 80138d2:	ac1c      	add	r4, sp, #112	; 0x70
 80138d4:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 80138d8:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 80138dc:	f04f 0c00 	mov.w	ip, #0
 80138e0:	45d4      	cmp	ip, sl
 80138e2:	dc27      	bgt.n	8013934 <__kernel_rem_pio2f+0xb4>
 80138e4:	f8dd 9008 	ldr.w	r9, [sp, #8]
 80138e8:	eddf 7aa8 	vldr	s15, [pc, #672]	; 8013b8c <__kernel_rem_pio2f+0x30c>
 80138ec:	4627      	mov	r7, r4
 80138ee:	2600      	movs	r6, #0
 80138f0:	e016      	b.n	8013920 <__kernel_rem_pio2f+0xa0>
 80138f2:	2000      	movs	r0, #0
 80138f4:	e7dc      	b.n	80138b0 <__kernel_rem_pio2f+0x30>
 80138f6:	42e7      	cmn	r7, r4
 80138f8:	bf5d      	ittte	pl
 80138fa:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 80138fe:	ee07 3a90 	vmovpl	s15, r3
 8013902:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8013906:	eef0 7a47 	vmovmi.f32	s15, s14
 801390a:	ece6 7a01 	vstmia	r6!, {s15}
 801390e:	3401      	adds	r4, #1
 8013910:	e7dc      	b.n	80138cc <__kernel_rem_pio2f+0x4c>
 8013912:	ecf9 6a01 	vldmia	r9!, {s13}
 8013916:	ed97 7a00 	vldr	s14, [r7]
 801391a:	eee6 7a87 	vfma.f32	s15, s13, s14
 801391e:	3601      	adds	r6, #1
 8013920:	428e      	cmp	r6, r1
 8013922:	f1a7 0704 	sub.w	r7, r7, #4
 8013926:	ddf4      	ble.n	8013912 <__kernel_rem_pio2f+0x92>
 8013928:	eceb 7a01 	vstmia	fp!, {s15}
 801392c:	f10c 0c01 	add.w	ip, ip, #1
 8013930:	3404      	adds	r4, #4
 8013932:	e7d5      	b.n	80138e0 <__kernel_rem_pio2f+0x60>
 8013934:	ab08      	add	r3, sp, #32
 8013936:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 801393a:	eddf 8a93 	vldr	s17, [pc, #588]	; 8013b88 <__kernel_rem_pio2f+0x308>
 801393e:	ed9f 9a91 	vldr	s18, [pc, #580]	; 8013b84 <__kernel_rem_pio2f+0x304>
 8013942:	9304      	str	r3, [sp, #16]
 8013944:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 8013948:	4656      	mov	r6, sl
 801394a:	00b3      	lsls	r3, r6, #2
 801394c:	9305      	str	r3, [sp, #20]
 801394e:	ab58      	add	r3, sp, #352	; 0x160
 8013950:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 8013954:	ac08      	add	r4, sp, #32
 8013956:	ab44      	add	r3, sp, #272	; 0x110
 8013958:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 801395c:	46a4      	mov	ip, r4
 801395e:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 8013962:	4637      	mov	r7, r6
 8013964:	2f00      	cmp	r7, #0
 8013966:	f1a0 0004 	sub.w	r0, r0, #4
 801396a:	dc4f      	bgt.n	8013a0c <__kernel_rem_pio2f+0x18c>
 801396c:	4628      	mov	r0, r5
 801396e:	e9cd 1206 	strd	r1, r2, [sp, #24]
 8013972:	f000 fc5f 	bl	8014234 <scalbnf>
 8013976:	eeb0 8a40 	vmov.f32	s16, s0
 801397a:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 801397e:	ee28 0a00 	vmul.f32	s0, s16, s0
 8013982:	f000 fc0f 	bl	80141a4 <floorf>
 8013986:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 801398a:	eea0 8a67 	vfms.f32	s16, s0, s15
 801398e:	2d00      	cmp	r5, #0
 8013990:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8013994:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8013998:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 801399c:	ee17 9a90 	vmov	r9, s15
 80139a0:	ee38 8a40 	vsub.f32	s16, s16, s0
 80139a4:	dd44      	ble.n	8013a30 <__kernel_rem_pio2f+0x1b0>
 80139a6:	f106 3cff 	add.w	ip, r6, #4294967295
 80139aa:	ab08      	add	r3, sp, #32
 80139ac:	f1c5 0e08 	rsb	lr, r5, #8
 80139b0:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 80139b4:	fa47 f00e 	asr.w	r0, r7, lr
 80139b8:	4481      	add	r9, r0
 80139ba:	fa00 f00e 	lsl.w	r0, r0, lr
 80139be:	1a3f      	subs	r7, r7, r0
 80139c0:	f1c5 0007 	rsb	r0, r5, #7
 80139c4:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 80139c8:	4107      	asrs	r7, r0
 80139ca:	2f00      	cmp	r7, #0
 80139cc:	dd3f      	ble.n	8013a4e <__kernel_rem_pio2f+0x1ce>
 80139ce:	f04f 0e00 	mov.w	lr, #0
 80139d2:	f109 0901 	add.w	r9, r9, #1
 80139d6:	4673      	mov	r3, lr
 80139d8:	4576      	cmp	r6, lr
 80139da:	dc6b      	bgt.n	8013ab4 <__kernel_rem_pio2f+0x234>
 80139dc:	2d00      	cmp	r5, #0
 80139de:	dd04      	ble.n	80139ea <__kernel_rem_pio2f+0x16a>
 80139e0:	2d01      	cmp	r5, #1
 80139e2:	d078      	beq.n	8013ad6 <__kernel_rem_pio2f+0x256>
 80139e4:	2d02      	cmp	r5, #2
 80139e6:	f000 8081 	beq.w	8013aec <__kernel_rem_pio2f+0x26c>
 80139ea:	2f02      	cmp	r7, #2
 80139ec:	d12f      	bne.n	8013a4e <__kernel_rem_pio2f+0x1ce>
 80139ee:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80139f2:	ee30 8a48 	vsub.f32	s16, s0, s16
 80139f6:	b353      	cbz	r3, 8013a4e <__kernel_rem_pio2f+0x1ce>
 80139f8:	4628      	mov	r0, r5
 80139fa:	e9cd 1206 	strd	r1, r2, [sp, #24]
 80139fe:	f000 fc19 	bl	8014234 <scalbnf>
 8013a02:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8013a06:	ee38 8a40 	vsub.f32	s16, s16, s0
 8013a0a:	e020      	b.n	8013a4e <__kernel_rem_pio2f+0x1ce>
 8013a0c:	ee60 7a28 	vmul.f32	s15, s0, s17
 8013a10:	3f01      	subs	r7, #1
 8013a12:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013a16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013a1a:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8013a1e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8013a22:	ecac 0a01 	vstmia	ip!, {s0}
 8013a26:	ed90 0a00 	vldr	s0, [r0]
 8013a2a:	ee37 0a80 	vadd.f32	s0, s15, s0
 8013a2e:	e799      	b.n	8013964 <__kernel_rem_pio2f+0xe4>
 8013a30:	d105      	bne.n	8013a3e <__kernel_rem_pio2f+0x1be>
 8013a32:	1e70      	subs	r0, r6, #1
 8013a34:	ab08      	add	r3, sp, #32
 8013a36:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 8013a3a:	11ff      	asrs	r7, r7, #7
 8013a3c:	e7c5      	b.n	80139ca <__kernel_rem_pio2f+0x14a>
 8013a3e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8013a42:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8013a46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013a4a:	da31      	bge.n	8013ab0 <__kernel_rem_pio2f+0x230>
 8013a4c:	2700      	movs	r7, #0
 8013a4e:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8013a52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013a56:	f040 809b 	bne.w	8013b90 <__kernel_rem_pio2f+0x310>
 8013a5a:	1e74      	subs	r4, r6, #1
 8013a5c:	46a4      	mov	ip, r4
 8013a5e:	2000      	movs	r0, #0
 8013a60:	45d4      	cmp	ip, sl
 8013a62:	da4a      	bge.n	8013afa <__kernel_rem_pio2f+0x27a>
 8013a64:	2800      	cmp	r0, #0
 8013a66:	d07a      	beq.n	8013b5e <__kernel_rem_pio2f+0x2de>
 8013a68:	ab08      	add	r3, sp, #32
 8013a6a:	3d08      	subs	r5, #8
 8013a6c:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8013a70:	2b00      	cmp	r3, #0
 8013a72:	f000 8081 	beq.w	8013b78 <__kernel_rem_pio2f+0x2f8>
 8013a76:	4628      	mov	r0, r5
 8013a78:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8013a7c:	00a5      	lsls	r5, r4, #2
 8013a7e:	f000 fbd9 	bl	8014234 <scalbnf>
 8013a82:	aa44      	add	r2, sp, #272	; 0x110
 8013a84:	1d2b      	adds	r3, r5, #4
 8013a86:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8013b88 <__kernel_rem_pio2f+0x308>
 8013a8a:	18d1      	adds	r1, r2, r3
 8013a8c:	4622      	mov	r2, r4
 8013a8e:	2a00      	cmp	r2, #0
 8013a90:	f280 80ae 	bge.w	8013bf0 <__kernel_rem_pio2f+0x370>
 8013a94:	4622      	mov	r2, r4
 8013a96:	2a00      	cmp	r2, #0
 8013a98:	f2c0 80cc 	blt.w	8013c34 <__kernel_rem_pio2f+0x3b4>
 8013a9c:	a944      	add	r1, sp, #272	; 0x110
 8013a9e:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 8013aa2:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 8013b80 <__kernel_rem_pio2f+0x300>
 8013aa6:	eddf 7a39 	vldr	s15, [pc, #228]	; 8013b8c <__kernel_rem_pio2f+0x30c>
 8013aaa:	2000      	movs	r0, #0
 8013aac:	1aa1      	subs	r1, r4, r2
 8013aae:	e0b6      	b.n	8013c1e <__kernel_rem_pio2f+0x39e>
 8013ab0:	2702      	movs	r7, #2
 8013ab2:	e78c      	b.n	80139ce <__kernel_rem_pio2f+0x14e>
 8013ab4:	6820      	ldr	r0, [r4, #0]
 8013ab6:	b94b      	cbnz	r3, 8013acc <__kernel_rem_pio2f+0x24c>
 8013ab8:	b118      	cbz	r0, 8013ac2 <__kernel_rem_pio2f+0x242>
 8013aba:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8013abe:	6020      	str	r0, [r4, #0]
 8013ac0:	2001      	movs	r0, #1
 8013ac2:	f10e 0e01 	add.w	lr, lr, #1
 8013ac6:	3404      	adds	r4, #4
 8013ac8:	4603      	mov	r3, r0
 8013aca:	e785      	b.n	80139d8 <__kernel_rem_pio2f+0x158>
 8013acc:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 8013ad0:	6020      	str	r0, [r4, #0]
 8013ad2:	4618      	mov	r0, r3
 8013ad4:	e7f5      	b.n	8013ac2 <__kernel_rem_pio2f+0x242>
 8013ad6:	1e74      	subs	r4, r6, #1
 8013ad8:	a808      	add	r0, sp, #32
 8013ada:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8013ade:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8013ae2:	f10d 0c20 	add.w	ip, sp, #32
 8013ae6:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 8013aea:	e77e      	b.n	80139ea <__kernel_rem_pio2f+0x16a>
 8013aec:	1e74      	subs	r4, r6, #1
 8013aee:	a808      	add	r0, sp, #32
 8013af0:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8013af4:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8013af8:	e7f3      	b.n	8013ae2 <__kernel_rem_pio2f+0x262>
 8013afa:	ab08      	add	r3, sp, #32
 8013afc:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8013b00:	f10c 3cff 	add.w	ip, ip, #4294967295
 8013b04:	4318      	orrs	r0, r3
 8013b06:	e7ab      	b.n	8013a60 <__kernel_rem_pio2f+0x1e0>
 8013b08:	f10c 0c01 	add.w	ip, ip, #1
 8013b0c:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 8013b10:	2c00      	cmp	r4, #0
 8013b12:	d0f9      	beq.n	8013b08 <__kernel_rem_pio2f+0x288>
 8013b14:	9b05      	ldr	r3, [sp, #20]
 8013b16:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8013b1a:	eb0d 0003 	add.w	r0, sp, r3
 8013b1e:	9b01      	ldr	r3, [sp, #4]
 8013b20:	18f4      	adds	r4, r6, r3
 8013b22:	ab1c      	add	r3, sp, #112	; 0x70
 8013b24:	1c77      	adds	r7, r6, #1
 8013b26:	384c      	subs	r0, #76	; 0x4c
 8013b28:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8013b2c:	4466      	add	r6, ip
 8013b2e:	42be      	cmp	r6, r7
 8013b30:	f6ff af0b 	blt.w	801394a <__kernel_rem_pio2f+0xca>
 8013b34:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 8013b38:	f8dd e008 	ldr.w	lr, [sp, #8]
 8013b3c:	ee07 3a90 	vmov	s15, r3
 8013b40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013b44:	f04f 0c00 	mov.w	ip, #0
 8013b48:	ece4 7a01 	vstmia	r4!, {s15}
 8013b4c:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8013b8c <__kernel_rem_pio2f+0x30c>
 8013b50:	46a1      	mov	r9, r4
 8013b52:	458c      	cmp	ip, r1
 8013b54:	dd07      	ble.n	8013b66 <__kernel_rem_pio2f+0x2e6>
 8013b56:	ece0 7a01 	vstmia	r0!, {s15}
 8013b5a:	3701      	adds	r7, #1
 8013b5c:	e7e7      	b.n	8013b2e <__kernel_rem_pio2f+0x2ae>
 8013b5e:	9804      	ldr	r0, [sp, #16]
 8013b60:	f04f 0c01 	mov.w	ip, #1
 8013b64:	e7d2      	b.n	8013b0c <__kernel_rem_pio2f+0x28c>
 8013b66:	ecfe 6a01 	vldmia	lr!, {s13}
 8013b6a:	ed39 7a01 	vldmdb	r9!, {s14}
 8013b6e:	f10c 0c01 	add.w	ip, ip, #1
 8013b72:	eee6 7a87 	vfma.f32	s15, s13, s14
 8013b76:	e7ec      	b.n	8013b52 <__kernel_rem_pio2f+0x2d2>
 8013b78:	3c01      	subs	r4, #1
 8013b7a:	e775      	b.n	8013a68 <__kernel_rem_pio2f+0x1e8>
 8013b7c:	08014d84 	.word	0x08014d84
 8013b80:	08014d58 	.word	0x08014d58
 8013b84:	43800000 	.word	0x43800000
 8013b88:	3b800000 	.word	0x3b800000
 8013b8c:	00000000 	.word	0x00000000
 8013b90:	9b03      	ldr	r3, [sp, #12]
 8013b92:	eeb0 0a48 	vmov.f32	s0, s16
 8013b96:	1a98      	subs	r0, r3, r2
 8013b98:	f000 fb4c 	bl	8014234 <scalbnf>
 8013b9c:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 8013b84 <__kernel_rem_pio2f+0x304>
 8013ba0:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8013ba4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ba8:	db19      	blt.n	8013bde <__kernel_rem_pio2f+0x35e>
 8013baa:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8013b88 <__kernel_rem_pio2f+0x308>
 8013bae:	ee60 7a27 	vmul.f32	s15, s0, s15
 8013bb2:	aa08      	add	r2, sp, #32
 8013bb4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013bb8:	1c74      	adds	r4, r6, #1
 8013bba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013bbe:	3508      	adds	r5, #8
 8013bc0:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8013bc4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013bc8:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8013bcc:	ee10 3a10 	vmov	r3, s0
 8013bd0:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8013bd4:	ee17 3a90 	vmov	r3, s15
 8013bd8:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8013bdc:	e74b      	b.n	8013a76 <__kernel_rem_pio2f+0x1f6>
 8013bde:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8013be2:	aa08      	add	r2, sp, #32
 8013be4:	ee10 3a10 	vmov	r3, s0
 8013be8:	4634      	mov	r4, r6
 8013bea:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8013bee:	e742      	b.n	8013a76 <__kernel_rem_pio2f+0x1f6>
 8013bf0:	a808      	add	r0, sp, #32
 8013bf2:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 8013bf6:	9001      	str	r0, [sp, #4]
 8013bf8:	ee07 0a90 	vmov	s15, r0
 8013bfc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013c00:	3a01      	subs	r2, #1
 8013c02:	ee67 7a80 	vmul.f32	s15, s15, s0
 8013c06:	ee20 0a07 	vmul.f32	s0, s0, s14
 8013c0a:	ed61 7a01 	vstmdb	r1!, {s15}
 8013c0e:	e73e      	b.n	8013a8e <__kernel_rem_pio2f+0x20e>
 8013c10:	ecfc 6a01 	vldmia	ip!, {s13}
 8013c14:	ecb6 7a01 	vldmia	r6!, {s14}
 8013c18:	eee6 7a87 	vfma.f32	s15, s13, s14
 8013c1c:	3001      	adds	r0, #1
 8013c1e:	4550      	cmp	r0, sl
 8013c20:	dc01      	bgt.n	8013c26 <__kernel_rem_pio2f+0x3a6>
 8013c22:	4288      	cmp	r0, r1
 8013c24:	ddf4      	ble.n	8013c10 <__kernel_rem_pio2f+0x390>
 8013c26:	a858      	add	r0, sp, #352	; 0x160
 8013c28:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8013c2c:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 8013c30:	3a01      	subs	r2, #1
 8013c32:	e730      	b.n	8013a96 <__kernel_rem_pio2f+0x216>
 8013c34:	9a66      	ldr	r2, [sp, #408]	; 0x198
 8013c36:	2a02      	cmp	r2, #2
 8013c38:	dc09      	bgt.n	8013c4e <__kernel_rem_pio2f+0x3ce>
 8013c3a:	2a00      	cmp	r2, #0
 8013c3c:	dc2a      	bgt.n	8013c94 <__kernel_rem_pio2f+0x414>
 8013c3e:	d043      	beq.n	8013cc8 <__kernel_rem_pio2f+0x448>
 8013c40:	f009 0007 	and.w	r0, r9, #7
 8013c44:	b059      	add	sp, #356	; 0x164
 8013c46:	ecbd 8b04 	vpop	{d8-d9}
 8013c4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013c4e:	9b66      	ldr	r3, [sp, #408]	; 0x198
 8013c50:	2b03      	cmp	r3, #3
 8013c52:	d1f5      	bne.n	8013c40 <__kernel_rem_pio2f+0x3c0>
 8013c54:	ab30      	add	r3, sp, #192	; 0xc0
 8013c56:	442b      	add	r3, r5
 8013c58:	461a      	mov	r2, r3
 8013c5a:	4619      	mov	r1, r3
 8013c5c:	4620      	mov	r0, r4
 8013c5e:	2800      	cmp	r0, #0
 8013c60:	f1a1 0104 	sub.w	r1, r1, #4
 8013c64:	dc51      	bgt.n	8013d0a <__kernel_rem_pio2f+0x48a>
 8013c66:	4621      	mov	r1, r4
 8013c68:	2901      	cmp	r1, #1
 8013c6a:	f1a2 0204 	sub.w	r2, r2, #4
 8013c6e:	dc5c      	bgt.n	8013d2a <__kernel_rem_pio2f+0x4aa>
 8013c70:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 8013b8c <__kernel_rem_pio2f+0x30c>
 8013c74:	3304      	adds	r3, #4
 8013c76:	2c01      	cmp	r4, #1
 8013c78:	dc67      	bgt.n	8013d4a <__kernel_rem_pio2f+0x4ca>
 8013c7a:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 8013c7e:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 8013c82:	2f00      	cmp	r7, #0
 8013c84:	d167      	bne.n	8013d56 <__kernel_rem_pio2f+0x4d6>
 8013c86:	edc8 6a00 	vstr	s13, [r8]
 8013c8a:	ed88 7a01 	vstr	s14, [r8, #4]
 8013c8e:	edc8 7a02 	vstr	s15, [r8, #8]
 8013c92:	e7d5      	b.n	8013c40 <__kernel_rem_pio2f+0x3c0>
 8013c94:	aa30      	add	r2, sp, #192	; 0xc0
 8013c96:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 8013b8c <__kernel_rem_pio2f+0x30c>
 8013c9a:	4413      	add	r3, r2
 8013c9c:	4622      	mov	r2, r4
 8013c9e:	2a00      	cmp	r2, #0
 8013ca0:	da24      	bge.n	8013cec <__kernel_rem_pio2f+0x46c>
 8013ca2:	b34f      	cbz	r7, 8013cf8 <__kernel_rem_pio2f+0x478>
 8013ca4:	eef1 7a47 	vneg.f32	s15, s14
 8013ca8:	edc8 7a00 	vstr	s15, [r8]
 8013cac:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 8013cb0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013cb4:	aa31      	add	r2, sp, #196	; 0xc4
 8013cb6:	2301      	movs	r3, #1
 8013cb8:	429c      	cmp	r4, r3
 8013cba:	da20      	bge.n	8013cfe <__kernel_rem_pio2f+0x47e>
 8013cbc:	b10f      	cbz	r7, 8013cc2 <__kernel_rem_pio2f+0x442>
 8013cbe:	eef1 7a67 	vneg.f32	s15, s15
 8013cc2:	edc8 7a01 	vstr	s15, [r8, #4]
 8013cc6:	e7bb      	b.n	8013c40 <__kernel_rem_pio2f+0x3c0>
 8013cc8:	aa30      	add	r2, sp, #192	; 0xc0
 8013cca:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 8013b8c <__kernel_rem_pio2f+0x30c>
 8013cce:	4413      	add	r3, r2
 8013cd0:	2c00      	cmp	r4, #0
 8013cd2:	da05      	bge.n	8013ce0 <__kernel_rem_pio2f+0x460>
 8013cd4:	b10f      	cbz	r7, 8013cda <__kernel_rem_pio2f+0x45a>
 8013cd6:	eef1 7a67 	vneg.f32	s15, s15
 8013cda:	edc8 7a00 	vstr	s15, [r8]
 8013cde:	e7af      	b.n	8013c40 <__kernel_rem_pio2f+0x3c0>
 8013ce0:	ed33 7a01 	vldmdb	r3!, {s14}
 8013ce4:	3c01      	subs	r4, #1
 8013ce6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013cea:	e7f1      	b.n	8013cd0 <__kernel_rem_pio2f+0x450>
 8013cec:	ed73 7a01 	vldmdb	r3!, {s15}
 8013cf0:	3a01      	subs	r2, #1
 8013cf2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8013cf6:	e7d2      	b.n	8013c9e <__kernel_rem_pio2f+0x41e>
 8013cf8:	eef0 7a47 	vmov.f32	s15, s14
 8013cfc:	e7d4      	b.n	8013ca8 <__kernel_rem_pio2f+0x428>
 8013cfe:	ecb2 7a01 	vldmia	r2!, {s14}
 8013d02:	3301      	adds	r3, #1
 8013d04:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013d08:	e7d6      	b.n	8013cb8 <__kernel_rem_pio2f+0x438>
 8013d0a:	edd1 7a00 	vldr	s15, [r1]
 8013d0e:	edd1 6a01 	vldr	s13, [r1, #4]
 8013d12:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8013d16:	3801      	subs	r0, #1
 8013d18:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013d1c:	ed81 7a00 	vstr	s14, [r1]
 8013d20:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013d24:	edc1 7a01 	vstr	s15, [r1, #4]
 8013d28:	e799      	b.n	8013c5e <__kernel_rem_pio2f+0x3de>
 8013d2a:	edd2 7a00 	vldr	s15, [r2]
 8013d2e:	edd2 6a01 	vldr	s13, [r2, #4]
 8013d32:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8013d36:	3901      	subs	r1, #1
 8013d38:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013d3c:	ed82 7a00 	vstr	s14, [r2]
 8013d40:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013d44:	edc2 7a01 	vstr	s15, [r2, #4]
 8013d48:	e78e      	b.n	8013c68 <__kernel_rem_pio2f+0x3e8>
 8013d4a:	ed33 7a01 	vldmdb	r3!, {s14}
 8013d4e:	3c01      	subs	r4, #1
 8013d50:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013d54:	e78f      	b.n	8013c76 <__kernel_rem_pio2f+0x3f6>
 8013d56:	eef1 6a66 	vneg.f32	s13, s13
 8013d5a:	eeb1 7a47 	vneg.f32	s14, s14
 8013d5e:	edc8 6a00 	vstr	s13, [r8]
 8013d62:	ed88 7a01 	vstr	s14, [r8, #4]
 8013d66:	eef1 7a67 	vneg.f32	s15, s15
 8013d6a:	e790      	b.n	8013c8e <__kernel_rem_pio2f+0x40e>

08013d6c <__kernel_sinf>:
 8013d6c:	ee10 3a10 	vmov	r3, s0
 8013d70:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8013d74:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8013d78:	da04      	bge.n	8013d84 <__kernel_sinf+0x18>
 8013d7a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8013d7e:	ee17 3a90 	vmov	r3, s15
 8013d82:	b35b      	cbz	r3, 8013ddc <__kernel_sinf+0x70>
 8013d84:	ee20 7a00 	vmul.f32	s14, s0, s0
 8013d88:	eddf 7a15 	vldr	s15, [pc, #84]	; 8013de0 <__kernel_sinf+0x74>
 8013d8c:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8013de4 <__kernel_sinf+0x78>
 8013d90:	eea7 6a27 	vfma.f32	s12, s14, s15
 8013d94:	eddf 7a14 	vldr	s15, [pc, #80]	; 8013de8 <__kernel_sinf+0x7c>
 8013d98:	eee6 7a07 	vfma.f32	s15, s12, s14
 8013d9c:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8013dec <__kernel_sinf+0x80>
 8013da0:	eea7 6a87 	vfma.f32	s12, s15, s14
 8013da4:	eddf 7a12 	vldr	s15, [pc, #72]	; 8013df0 <__kernel_sinf+0x84>
 8013da8:	ee60 6a07 	vmul.f32	s13, s0, s14
 8013dac:	eee6 7a07 	vfma.f32	s15, s12, s14
 8013db0:	b930      	cbnz	r0, 8013dc0 <__kernel_sinf+0x54>
 8013db2:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8013df4 <__kernel_sinf+0x88>
 8013db6:	eea7 6a27 	vfma.f32	s12, s14, s15
 8013dba:	eea6 0a26 	vfma.f32	s0, s12, s13
 8013dbe:	4770      	bx	lr
 8013dc0:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8013dc4:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8013dc8:	eee0 7a86 	vfma.f32	s15, s1, s12
 8013dcc:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8013dd0:	eddf 7a09 	vldr	s15, [pc, #36]	; 8013df8 <__kernel_sinf+0x8c>
 8013dd4:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8013dd8:	ee30 0a60 	vsub.f32	s0, s0, s1
 8013ddc:	4770      	bx	lr
 8013dde:	bf00      	nop
 8013de0:	2f2ec9d3 	.word	0x2f2ec9d3
 8013de4:	b2d72f34 	.word	0xb2d72f34
 8013de8:	3638ef1b 	.word	0x3638ef1b
 8013dec:	b9500d01 	.word	0xb9500d01
 8013df0:	3c088889 	.word	0x3c088889
 8013df4:	be2aaaab 	.word	0xbe2aaaab
 8013df8:	3e2aaaab 	.word	0x3e2aaaab

08013dfc <with_errno>:
 8013dfc:	b570      	push	{r4, r5, r6, lr}
 8013dfe:	4604      	mov	r4, r0
 8013e00:	460d      	mov	r5, r1
 8013e02:	4616      	mov	r6, r2
 8013e04:	f7fb f8d2 	bl	800efac <__errno>
 8013e08:	4629      	mov	r1, r5
 8013e0a:	6006      	str	r6, [r0, #0]
 8013e0c:	4620      	mov	r0, r4
 8013e0e:	bd70      	pop	{r4, r5, r6, pc}

08013e10 <xflow>:
 8013e10:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013e12:	4614      	mov	r4, r2
 8013e14:	461d      	mov	r5, r3
 8013e16:	b108      	cbz	r0, 8013e1c <xflow+0xc>
 8013e18:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8013e1c:	e9cd 2300 	strd	r2, r3, [sp]
 8013e20:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013e24:	4620      	mov	r0, r4
 8013e26:	4629      	mov	r1, r5
 8013e28:	f7ec fbe6 	bl	80005f8 <__aeabi_dmul>
 8013e2c:	2222      	movs	r2, #34	; 0x22
 8013e2e:	b003      	add	sp, #12
 8013e30:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013e34:	f7ff bfe2 	b.w	8013dfc <with_errno>

08013e38 <__math_uflow>:
 8013e38:	b508      	push	{r3, lr}
 8013e3a:	2200      	movs	r2, #0
 8013e3c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8013e40:	f7ff ffe6 	bl	8013e10 <xflow>
 8013e44:	ec41 0b10 	vmov	d0, r0, r1
 8013e48:	bd08      	pop	{r3, pc}

08013e4a <__math_oflow>:
 8013e4a:	b508      	push	{r3, lr}
 8013e4c:	2200      	movs	r2, #0
 8013e4e:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8013e52:	f7ff ffdd 	bl	8013e10 <xflow>
 8013e56:	ec41 0b10 	vmov	d0, r0, r1
 8013e5a:	bd08      	pop	{r3, pc}

08013e5c <with_errnof>:
 8013e5c:	b513      	push	{r0, r1, r4, lr}
 8013e5e:	4604      	mov	r4, r0
 8013e60:	ed8d 0a01 	vstr	s0, [sp, #4]
 8013e64:	f7fb f8a2 	bl	800efac <__errno>
 8013e68:	ed9d 0a01 	vldr	s0, [sp, #4]
 8013e6c:	6004      	str	r4, [r0, #0]
 8013e6e:	b002      	add	sp, #8
 8013e70:	bd10      	pop	{r4, pc}

08013e72 <xflowf>:
 8013e72:	b130      	cbz	r0, 8013e82 <xflowf+0x10>
 8013e74:	eef1 7a40 	vneg.f32	s15, s0
 8013e78:	ee27 0a80 	vmul.f32	s0, s15, s0
 8013e7c:	2022      	movs	r0, #34	; 0x22
 8013e7e:	f7ff bfed 	b.w	8013e5c <with_errnof>
 8013e82:	eef0 7a40 	vmov.f32	s15, s0
 8013e86:	e7f7      	b.n	8013e78 <xflowf+0x6>

08013e88 <__math_uflowf>:
 8013e88:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8013e90 <__math_uflowf+0x8>
 8013e8c:	f7ff bff1 	b.w	8013e72 <xflowf>
 8013e90:	10000000 	.word	0x10000000

08013e94 <__math_oflowf>:
 8013e94:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8013e9c <__math_oflowf+0x8>
 8013e98:	f7ff bfeb 	b.w	8013e72 <xflowf>
 8013e9c:	70000000 	.word	0x70000000

08013ea0 <fabs>:
 8013ea0:	ec51 0b10 	vmov	r0, r1, d0
 8013ea4:	ee10 2a10 	vmov	r2, s0
 8013ea8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8013eac:	ec43 2b10 	vmov	d0, r2, r3
 8013eb0:	4770      	bx	lr

08013eb2 <finite>:
 8013eb2:	b082      	sub	sp, #8
 8013eb4:	ed8d 0b00 	vstr	d0, [sp]
 8013eb8:	9801      	ldr	r0, [sp, #4]
 8013eba:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8013ebe:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8013ec2:	0fc0      	lsrs	r0, r0, #31
 8013ec4:	b002      	add	sp, #8
 8013ec6:	4770      	bx	lr

08013ec8 <scalbn>:
 8013ec8:	b570      	push	{r4, r5, r6, lr}
 8013eca:	ec55 4b10 	vmov	r4, r5, d0
 8013ece:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8013ed2:	4606      	mov	r6, r0
 8013ed4:	462b      	mov	r3, r5
 8013ed6:	b99a      	cbnz	r2, 8013f00 <scalbn+0x38>
 8013ed8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8013edc:	4323      	orrs	r3, r4
 8013ede:	d036      	beq.n	8013f4e <scalbn+0x86>
 8013ee0:	4b39      	ldr	r3, [pc, #228]	; (8013fc8 <scalbn+0x100>)
 8013ee2:	4629      	mov	r1, r5
 8013ee4:	ee10 0a10 	vmov	r0, s0
 8013ee8:	2200      	movs	r2, #0
 8013eea:	f7ec fb85 	bl	80005f8 <__aeabi_dmul>
 8013eee:	4b37      	ldr	r3, [pc, #220]	; (8013fcc <scalbn+0x104>)
 8013ef0:	429e      	cmp	r6, r3
 8013ef2:	4604      	mov	r4, r0
 8013ef4:	460d      	mov	r5, r1
 8013ef6:	da10      	bge.n	8013f1a <scalbn+0x52>
 8013ef8:	a32b      	add	r3, pc, #172	; (adr r3, 8013fa8 <scalbn+0xe0>)
 8013efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013efe:	e03a      	b.n	8013f76 <scalbn+0xae>
 8013f00:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8013f04:	428a      	cmp	r2, r1
 8013f06:	d10c      	bne.n	8013f22 <scalbn+0x5a>
 8013f08:	ee10 2a10 	vmov	r2, s0
 8013f0c:	4620      	mov	r0, r4
 8013f0e:	4629      	mov	r1, r5
 8013f10:	f7ec f9bc 	bl	800028c <__adddf3>
 8013f14:	4604      	mov	r4, r0
 8013f16:	460d      	mov	r5, r1
 8013f18:	e019      	b.n	8013f4e <scalbn+0x86>
 8013f1a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8013f1e:	460b      	mov	r3, r1
 8013f20:	3a36      	subs	r2, #54	; 0x36
 8013f22:	4432      	add	r2, r6
 8013f24:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8013f28:	428a      	cmp	r2, r1
 8013f2a:	dd08      	ble.n	8013f3e <scalbn+0x76>
 8013f2c:	2d00      	cmp	r5, #0
 8013f2e:	a120      	add	r1, pc, #128	; (adr r1, 8013fb0 <scalbn+0xe8>)
 8013f30:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013f34:	da1c      	bge.n	8013f70 <scalbn+0xa8>
 8013f36:	a120      	add	r1, pc, #128	; (adr r1, 8013fb8 <scalbn+0xf0>)
 8013f38:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013f3c:	e018      	b.n	8013f70 <scalbn+0xa8>
 8013f3e:	2a00      	cmp	r2, #0
 8013f40:	dd08      	ble.n	8013f54 <scalbn+0x8c>
 8013f42:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8013f46:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8013f4a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8013f4e:	ec45 4b10 	vmov	d0, r4, r5
 8013f52:	bd70      	pop	{r4, r5, r6, pc}
 8013f54:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8013f58:	da19      	bge.n	8013f8e <scalbn+0xc6>
 8013f5a:	f24c 3350 	movw	r3, #50000	; 0xc350
 8013f5e:	429e      	cmp	r6, r3
 8013f60:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8013f64:	dd0a      	ble.n	8013f7c <scalbn+0xb4>
 8013f66:	a112      	add	r1, pc, #72	; (adr r1, 8013fb0 <scalbn+0xe8>)
 8013f68:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013f6c:	2b00      	cmp	r3, #0
 8013f6e:	d1e2      	bne.n	8013f36 <scalbn+0x6e>
 8013f70:	a30f      	add	r3, pc, #60	; (adr r3, 8013fb0 <scalbn+0xe8>)
 8013f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f76:	f7ec fb3f 	bl	80005f8 <__aeabi_dmul>
 8013f7a:	e7cb      	b.n	8013f14 <scalbn+0x4c>
 8013f7c:	a10a      	add	r1, pc, #40	; (adr r1, 8013fa8 <scalbn+0xe0>)
 8013f7e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013f82:	2b00      	cmp	r3, #0
 8013f84:	d0b8      	beq.n	8013ef8 <scalbn+0x30>
 8013f86:	a10e      	add	r1, pc, #56	; (adr r1, 8013fc0 <scalbn+0xf8>)
 8013f88:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013f8c:	e7b4      	b.n	8013ef8 <scalbn+0x30>
 8013f8e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8013f92:	3236      	adds	r2, #54	; 0x36
 8013f94:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8013f98:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8013f9c:	4620      	mov	r0, r4
 8013f9e:	4b0c      	ldr	r3, [pc, #48]	; (8013fd0 <scalbn+0x108>)
 8013fa0:	2200      	movs	r2, #0
 8013fa2:	e7e8      	b.n	8013f76 <scalbn+0xae>
 8013fa4:	f3af 8000 	nop.w
 8013fa8:	c2f8f359 	.word	0xc2f8f359
 8013fac:	01a56e1f 	.word	0x01a56e1f
 8013fb0:	8800759c 	.word	0x8800759c
 8013fb4:	7e37e43c 	.word	0x7e37e43c
 8013fb8:	8800759c 	.word	0x8800759c
 8013fbc:	fe37e43c 	.word	0xfe37e43c
 8013fc0:	c2f8f359 	.word	0xc2f8f359
 8013fc4:	81a56e1f 	.word	0x81a56e1f
 8013fc8:	43500000 	.word	0x43500000
 8013fcc:	ffff3cb0 	.word	0xffff3cb0
 8013fd0:	3c900000 	.word	0x3c900000

08013fd4 <atanf>:
 8013fd4:	b538      	push	{r3, r4, r5, lr}
 8013fd6:	ee10 5a10 	vmov	r5, s0
 8013fda:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8013fde:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 8013fe2:	eef0 7a40 	vmov.f32	s15, s0
 8013fe6:	db10      	blt.n	801400a <atanf+0x36>
 8013fe8:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8013fec:	dd04      	ble.n	8013ff8 <atanf+0x24>
 8013fee:	ee70 7a00 	vadd.f32	s15, s0, s0
 8013ff2:	eeb0 0a67 	vmov.f32	s0, s15
 8013ff6:	bd38      	pop	{r3, r4, r5, pc}
 8013ff8:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8014130 <atanf+0x15c>
 8013ffc:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 8014134 <atanf+0x160>
 8014000:	2d00      	cmp	r5, #0
 8014002:	bfd8      	it	le
 8014004:	eef0 7a40 	vmovle.f32	s15, s0
 8014008:	e7f3      	b.n	8013ff2 <atanf+0x1e>
 801400a:	4b4b      	ldr	r3, [pc, #300]	; (8014138 <atanf+0x164>)
 801400c:	429c      	cmp	r4, r3
 801400e:	dc10      	bgt.n	8014032 <atanf+0x5e>
 8014010:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8014014:	da0a      	bge.n	801402c <atanf+0x58>
 8014016:	ed9f 7a49 	vldr	s14, [pc, #292]	; 801413c <atanf+0x168>
 801401a:	ee30 7a07 	vadd.f32	s14, s0, s14
 801401e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8014022:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8014026:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801402a:	dce2      	bgt.n	8013ff2 <atanf+0x1e>
 801402c:	f04f 33ff 	mov.w	r3, #4294967295
 8014030:	e013      	b.n	801405a <atanf+0x86>
 8014032:	f000 f8a3 	bl	801417c <fabsf>
 8014036:	4b42      	ldr	r3, [pc, #264]	; (8014140 <atanf+0x16c>)
 8014038:	429c      	cmp	r4, r3
 801403a:	dc4f      	bgt.n	80140dc <atanf+0x108>
 801403c:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8014040:	429c      	cmp	r4, r3
 8014042:	dc41      	bgt.n	80140c8 <atanf+0xf4>
 8014044:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8014048:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 801404c:	eea0 7a27 	vfma.f32	s14, s0, s15
 8014050:	2300      	movs	r3, #0
 8014052:	ee30 0a27 	vadd.f32	s0, s0, s15
 8014056:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801405a:	1c5a      	adds	r2, r3, #1
 801405c:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8014060:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8014144 <atanf+0x170>
 8014064:	eddf 5a38 	vldr	s11, [pc, #224]	; 8014148 <atanf+0x174>
 8014068:	ed9f 5a38 	vldr	s10, [pc, #224]	; 801414c <atanf+0x178>
 801406c:	ee66 6a06 	vmul.f32	s13, s12, s12
 8014070:	eee6 5a87 	vfma.f32	s11, s13, s14
 8014074:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8014150 <atanf+0x17c>
 8014078:	eea5 7aa6 	vfma.f32	s14, s11, s13
 801407c:	eddf 5a35 	vldr	s11, [pc, #212]	; 8014154 <atanf+0x180>
 8014080:	eee7 5a26 	vfma.f32	s11, s14, s13
 8014084:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8014158 <atanf+0x184>
 8014088:	eea5 7aa6 	vfma.f32	s14, s11, s13
 801408c:	eddf 5a33 	vldr	s11, [pc, #204]	; 801415c <atanf+0x188>
 8014090:	eee7 5a26 	vfma.f32	s11, s14, s13
 8014094:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8014160 <atanf+0x18c>
 8014098:	eea6 5a87 	vfma.f32	s10, s13, s14
 801409c:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8014164 <atanf+0x190>
 80140a0:	eea5 7a26 	vfma.f32	s14, s10, s13
 80140a4:	ed9f 5a30 	vldr	s10, [pc, #192]	; 8014168 <atanf+0x194>
 80140a8:	eea7 5a26 	vfma.f32	s10, s14, s13
 80140ac:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 801416c <atanf+0x198>
 80140b0:	eea5 7a26 	vfma.f32	s14, s10, s13
 80140b4:	ee27 7a26 	vmul.f32	s14, s14, s13
 80140b8:	eea5 7a86 	vfma.f32	s14, s11, s12
 80140bc:	ee27 7a87 	vmul.f32	s14, s15, s14
 80140c0:	d121      	bne.n	8014106 <atanf+0x132>
 80140c2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80140c6:	e794      	b.n	8013ff2 <atanf+0x1e>
 80140c8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80140cc:	ee30 7a67 	vsub.f32	s14, s0, s15
 80140d0:	ee30 0a27 	vadd.f32	s0, s0, s15
 80140d4:	2301      	movs	r3, #1
 80140d6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80140da:	e7be      	b.n	801405a <atanf+0x86>
 80140dc:	4b24      	ldr	r3, [pc, #144]	; (8014170 <atanf+0x19c>)
 80140de:	429c      	cmp	r4, r3
 80140e0:	dc0b      	bgt.n	80140fa <atanf+0x126>
 80140e2:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 80140e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80140ea:	eea0 7a27 	vfma.f32	s14, s0, s15
 80140ee:	2302      	movs	r3, #2
 80140f0:	ee70 6a67 	vsub.f32	s13, s0, s15
 80140f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80140f8:	e7af      	b.n	801405a <atanf+0x86>
 80140fa:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80140fe:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8014102:	2303      	movs	r3, #3
 8014104:	e7a9      	b.n	801405a <atanf+0x86>
 8014106:	4a1b      	ldr	r2, [pc, #108]	; (8014174 <atanf+0x1a0>)
 8014108:	491b      	ldr	r1, [pc, #108]	; (8014178 <atanf+0x1a4>)
 801410a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801410e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8014112:	ed93 0a00 	vldr	s0, [r3]
 8014116:	ee37 7a40 	vsub.f32	s14, s14, s0
 801411a:	ed92 0a00 	vldr	s0, [r2]
 801411e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014122:	2d00      	cmp	r5, #0
 8014124:	ee70 7a67 	vsub.f32	s15, s0, s15
 8014128:	bfb8      	it	lt
 801412a:	eef1 7a67 	vneglt.f32	s15, s15
 801412e:	e760      	b.n	8013ff2 <atanf+0x1e>
 8014130:	3fc90fdb 	.word	0x3fc90fdb
 8014134:	bfc90fdb 	.word	0xbfc90fdb
 8014138:	3edfffff 	.word	0x3edfffff
 801413c:	7149f2ca 	.word	0x7149f2ca
 8014140:	3f97ffff 	.word	0x3f97ffff
 8014144:	3c8569d7 	.word	0x3c8569d7
 8014148:	3d4bda59 	.word	0x3d4bda59
 801414c:	bd6ef16b 	.word	0xbd6ef16b
 8014150:	3d886b35 	.word	0x3d886b35
 8014154:	3dba2e6e 	.word	0x3dba2e6e
 8014158:	3e124925 	.word	0x3e124925
 801415c:	3eaaaaab 	.word	0x3eaaaaab
 8014160:	bd15a221 	.word	0xbd15a221
 8014164:	bd9d8795 	.word	0xbd9d8795
 8014168:	bde38e38 	.word	0xbde38e38
 801416c:	be4ccccd 	.word	0xbe4ccccd
 8014170:	401bffff 	.word	0x401bffff
 8014174:	08014d90 	.word	0x08014d90
 8014178:	08014da0 	.word	0x08014da0

0801417c <fabsf>:
 801417c:	ee10 3a10 	vmov	r3, s0
 8014180:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8014184:	ee00 3a10 	vmov	s0, r3
 8014188:	4770      	bx	lr

0801418a <finitef>:
 801418a:	b082      	sub	sp, #8
 801418c:	ed8d 0a01 	vstr	s0, [sp, #4]
 8014190:	9801      	ldr	r0, [sp, #4]
 8014192:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8014196:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 801419a:	bfac      	ite	ge
 801419c:	2000      	movge	r0, #0
 801419e:	2001      	movlt	r0, #1
 80141a0:	b002      	add	sp, #8
 80141a2:	4770      	bx	lr

080141a4 <floorf>:
 80141a4:	ee10 3a10 	vmov	r3, s0
 80141a8:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80141ac:	3a7f      	subs	r2, #127	; 0x7f
 80141ae:	2a16      	cmp	r2, #22
 80141b0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80141b4:	dc2a      	bgt.n	801420c <floorf+0x68>
 80141b6:	2a00      	cmp	r2, #0
 80141b8:	da11      	bge.n	80141de <floorf+0x3a>
 80141ba:	eddf 7a18 	vldr	s15, [pc, #96]	; 801421c <floorf+0x78>
 80141be:	ee30 0a27 	vadd.f32	s0, s0, s15
 80141c2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80141c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80141ca:	dd05      	ble.n	80141d8 <floorf+0x34>
 80141cc:	2b00      	cmp	r3, #0
 80141ce:	da23      	bge.n	8014218 <floorf+0x74>
 80141d0:	4a13      	ldr	r2, [pc, #76]	; (8014220 <floorf+0x7c>)
 80141d2:	2900      	cmp	r1, #0
 80141d4:	bf18      	it	ne
 80141d6:	4613      	movne	r3, r2
 80141d8:	ee00 3a10 	vmov	s0, r3
 80141dc:	4770      	bx	lr
 80141de:	4911      	ldr	r1, [pc, #68]	; (8014224 <floorf+0x80>)
 80141e0:	4111      	asrs	r1, r2
 80141e2:	420b      	tst	r3, r1
 80141e4:	d0fa      	beq.n	80141dc <floorf+0x38>
 80141e6:	eddf 7a0d 	vldr	s15, [pc, #52]	; 801421c <floorf+0x78>
 80141ea:	ee30 0a27 	vadd.f32	s0, s0, s15
 80141ee:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80141f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80141f6:	ddef      	ble.n	80141d8 <floorf+0x34>
 80141f8:	2b00      	cmp	r3, #0
 80141fa:	bfbe      	ittt	lt
 80141fc:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8014200:	fa40 f202 	asrlt.w	r2, r0, r2
 8014204:	189b      	addlt	r3, r3, r2
 8014206:	ea23 0301 	bic.w	r3, r3, r1
 801420a:	e7e5      	b.n	80141d8 <floorf+0x34>
 801420c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8014210:	d3e4      	bcc.n	80141dc <floorf+0x38>
 8014212:	ee30 0a00 	vadd.f32	s0, s0, s0
 8014216:	4770      	bx	lr
 8014218:	2300      	movs	r3, #0
 801421a:	e7dd      	b.n	80141d8 <floorf+0x34>
 801421c:	7149f2ca 	.word	0x7149f2ca
 8014220:	bf800000 	.word	0xbf800000
 8014224:	007fffff 	.word	0x007fffff

08014228 <nanf>:
 8014228:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8014230 <nanf+0x8>
 801422c:	4770      	bx	lr
 801422e:	bf00      	nop
 8014230:	7fc00000 	.word	0x7fc00000

08014234 <scalbnf>:
 8014234:	ee10 3a10 	vmov	r3, s0
 8014238:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 801423c:	d025      	beq.n	801428a <scalbnf+0x56>
 801423e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8014242:	d302      	bcc.n	801424a <scalbnf+0x16>
 8014244:	ee30 0a00 	vadd.f32	s0, s0, s0
 8014248:	4770      	bx	lr
 801424a:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 801424e:	d122      	bne.n	8014296 <scalbnf+0x62>
 8014250:	4b2a      	ldr	r3, [pc, #168]	; (80142fc <scalbnf+0xc8>)
 8014252:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8014300 <scalbnf+0xcc>
 8014256:	4298      	cmp	r0, r3
 8014258:	ee20 0a27 	vmul.f32	s0, s0, s15
 801425c:	db16      	blt.n	801428c <scalbnf+0x58>
 801425e:	ee10 3a10 	vmov	r3, s0
 8014262:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8014266:	3a19      	subs	r2, #25
 8014268:	4402      	add	r2, r0
 801426a:	2afe      	cmp	r2, #254	; 0xfe
 801426c:	dd15      	ble.n	801429a <scalbnf+0x66>
 801426e:	ee10 3a10 	vmov	r3, s0
 8014272:	eddf 7a24 	vldr	s15, [pc, #144]	; 8014304 <scalbnf+0xd0>
 8014276:	eddf 6a24 	vldr	s13, [pc, #144]	; 8014308 <scalbnf+0xd4>
 801427a:	2b00      	cmp	r3, #0
 801427c:	eeb0 7a67 	vmov.f32	s14, s15
 8014280:	bfb8      	it	lt
 8014282:	eef0 7a66 	vmovlt.f32	s15, s13
 8014286:	ee27 0a27 	vmul.f32	s0, s14, s15
 801428a:	4770      	bx	lr
 801428c:	eddf 7a1f 	vldr	s15, [pc, #124]	; 801430c <scalbnf+0xd8>
 8014290:	ee20 0a27 	vmul.f32	s0, s0, s15
 8014294:	4770      	bx	lr
 8014296:	0dd2      	lsrs	r2, r2, #23
 8014298:	e7e6      	b.n	8014268 <scalbnf+0x34>
 801429a:	2a00      	cmp	r2, #0
 801429c:	dd06      	ble.n	80142ac <scalbnf+0x78>
 801429e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80142a2:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 80142a6:	ee00 3a10 	vmov	s0, r3
 80142aa:	4770      	bx	lr
 80142ac:	f112 0f16 	cmn.w	r2, #22
 80142b0:	da1a      	bge.n	80142e8 <scalbnf+0xb4>
 80142b2:	f24c 3350 	movw	r3, #50000	; 0xc350
 80142b6:	4298      	cmp	r0, r3
 80142b8:	ee10 3a10 	vmov	r3, s0
 80142bc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80142c0:	dd0a      	ble.n	80142d8 <scalbnf+0xa4>
 80142c2:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8014304 <scalbnf+0xd0>
 80142c6:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8014308 <scalbnf+0xd4>
 80142ca:	eef0 7a40 	vmov.f32	s15, s0
 80142ce:	2b00      	cmp	r3, #0
 80142d0:	bf18      	it	ne
 80142d2:	eeb0 0a47 	vmovne.f32	s0, s14
 80142d6:	e7db      	b.n	8014290 <scalbnf+0x5c>
 80142d8:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 801430c <scalbnf+0xd8>
 80142dc:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8014310 <scalbnf+0xdc>
 80142e0:	eef0 7a40 	vmov.f32	s15, s0
 80142e4:	2b00      	cmp	r3, #0
 80142e6:	e7f3      	b.n	80142d0 <scalbnf+0x9c>
 80142e8:	3219      	adds	r2, #25
 80142ea:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80142ee:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 80142f2:	eddf 7a08 	vldr	s15, [pc, #32]	; 8014314 <scalbnf+0xe0>
 80142f6:	ee07 3a10 	vmov	s14, r3
 80142fa:	e7c4      	b.n	8014286 <scalbnf+0x52>
 80142fc:	ffff3cb0 	.word	0xffff3cb0
 8014300:	4c000000 	.word	0x4c000000
 8014304:	7149f2ca 	.word	0x7149f2ca
 8014308:	f149f2ca 	.word	0xf149f2ca
 801430c:	0da24260 	.word	0x0da24260
 8014310:	8da24260 	.word	0x8da24260
 8014314:	33000000 	.word	0x33000000

08014318 <_init>:
 8014318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801431a:	bf00      	nop
 801431c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801431e:	bc08      	pop	{r3}
 8014320:	469e      	mov	lr, r3
 8014322:	4770      	bx	lr

08014324 <_fini>:
 8014324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014326:	bf00      	nop
 8014328:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801432a:	bc08      	pop	{r3}
 801432c:	469e      	mov	lr, r3
 801432e:	4770      	bx	lr
