
Dipterv_Drone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000140a0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a28  08014230  08014230  00024230  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014c58  08014c58  000301ec  2**0
                  CONTENTS
  4 .ARM          00000008  08014c58  08014c58  00024c58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014c60  08014c60  000301ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014c60  08014c60  00024c60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014c64  08014c64  00024c64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  08014c68  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000301ec  2**0
                  CONTENTS
 10 .bss          00006694  200001f0  200001f0  000301f0  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20006884  20006884  000301f0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000301ec  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001f9b5  00000000  00000000  0003021c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000401d  00000000  00000000  0004fbd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001bd0  00000000  00000000  00053bf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001a50  00000000  00000000  000557c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002509f  00000000  00000000  00057210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002018e  00000000  00000000  0007c2af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000de844  00000000  00000000  0009c43d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0017ac81  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008fb8  00000000  00000000  0017acd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f0 	.word	0x200001f0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08014218 	.word	0x08014218

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f4 	.word	0x200001f4
 80001cc:	08014218 	.word	0x08014218

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b974 	b.w	8000f88 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468e      	mov	lr, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14d      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4694      	mov	ip, r2
 8000cca:	d969      	bls.n	8000da0 <__udivmoddi4+0xe8>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b152      	cbz	r2, 8000ce8 <__udivmoddi4+0x30>
 8000cd2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cd6:	f1c2 0120 	rsb	r1, r2, #32
 8000cda:	fa20 f101 	lsr.w	r1, r0, r1
 8000cde:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ce6:	4094      	lsls	r4, r2
 8000ce8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cec:	0c21      	lsrs	r1, r4, #16
 8000cee:	fbbe f6f8 	udiv	r6, lr, r8
 8000cf2:	fa1f f78c 	uxth.w	r7, ip
 8000cf6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cfa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cfe:	fb06 f107 	mul.w	r1, r6, r7
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d0e:	f080 811f 	bcs.w	8000f50 <__udivmoddi4+0x298>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 811c 	bls.w	8000f50 <__udivmoddi4+0x298>
 8000d18:	3e02      	subs	r6, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a5b      	subs	r3, r3, r1
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d24:	fb08 3310 	mls	r3, r8, r0, r3
 8000d28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d2c:	fb00 f707 	mul.w	r7, r0, r7
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	d90a      	bls.n	8000d4a <__udivmoddi4+0x92>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3c:	f080 810a 	bcs.w	8000f54 <__udivmoddi4+0x29c>
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	f240 8107 	bls.w	8000f54 <__udivmoddi4+0x29c>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4e:	1be4      	subs	r4, r4, r7
 8000d50:	2600      	movs	r6, #0
 8000d52:	b11d      	cbz	r5, 8000d5c <__udivmoddi4+0xa4>
 8000d54:	40d4      	lsrs	r4, r2
 8000d56:	2300      	movs	r3, #0
 8000d58:	e9c5 4300 	strd	r4, r3, [r5]
 8000d5c:	4631      	mov	r1, r6
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d909      	bls.n	8000d7a <__udivmoddi4+0xc2>
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	f000 80ef 	beq.w	8000f4a <__udivmoddi4+0x292>
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d72:	4630      	mov	r0, r6
 8000d74:	4631      	mov	r1, r6
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	fab3 f683 	clz	r6, r3
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	d14a      	bne.n	8000e18 <__udivmoddi4+0x160>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0xd4>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 80f9 	bhi.w	8000f7e <__udivmoddi4+0x2c6>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	469e      	mov	lr, r3
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d0e0      	beq.n	8000d5c <__udivmoddi4+0xa4>
 8000d9a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d9e:	e7dd      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000da0:	b902      	cbnz	r2, 8000da4 <__udivmoddi4+0xec>
 8000da2:	deff      	udf	#255	; 0xff
 8000da4:	fab2 f282 	clz	r2, r2
 8000da8:	2a00      	cmp	r2, #0
 8000daa:	f040 8092 	bne.w	8000ed2 <__udivmoddi4+0x21a>
 8000dae:	eba1 010c 	sub.w	r1, r1, ip
 8000db2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db6:	fa1f fe8c 	uxth.w	lr, ip
 8000dba:	2601      	movs	r6, #1
 8000dbc:	0c20      	lsrs	r0, r4, #16
 8000dbe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dc2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dc6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dca:	fb0e f003 	mul.w	r0, lr, r3
 8000dce:	4288      	cmp	r0, r1
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x12c>
 8000dd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x12a>
 8000ddc:	4288      	cmp	r0, r1
 8000dde:	f200 80cb 	bhi.w	8000f78 <__udivmoddi4+0x2c0>
 8000de2:	4643      	mov	r3, r8
 8000de4:	1a09      	subs	r1, r1, r0
 8000de6:	b2a4      	uxth	r4, r4
 8000de8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dec:	fb07 1110 	mls	r1, r7, r0, r1
 8000df0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000df4:	fb0e fe00 	mul.w	lr, lr, r0
 8000df8:	45a6      	cmp	lr, r4
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x156>
 8000dfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000e00:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e04:	d202      	bcs.n	8000e0c <__udivmoddi4+0x154>
 8000e06:	45a6      	cmp	lr, r4
 8000e08:	f200 80bb 	bhi.w	8000f82 <__udivmoddi4+0x2ca>
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	eba4 040e 	sub.w	r4, r4, lr
 8000e12:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e16:	e79c      	b.n	8000d52 <__udivmoddi4+0x9a>
 8000e18:	f1c6 0720 	rsb	r7, r6, #32
 8000e1c:	40b3      	lsls	r3, r6
 8000e1e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e22:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e26:	fa20 f407 	lsr.w	r4, r0, r7
 8000e2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	40f9      	lsrs	r1, r7
 8000e32:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e36:	fa00 f306 	lsl.w	r3, r0, r6
 8000e3a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e3e:	0c20      	lsrs	r0, r4, #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fb09 1118 	mls	r1, r9, r8, r1
 8000e48:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e4c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e50:	4288      	cmp	r0, r1
 8000e52:	fa02 f206 	lsl.w	r2, r2, r6
 8000e56:	d90b      	bls.n	8000e70 <__udivmoddi4+0x1b8>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e60:	f080 8088 	bcs.w	8000f74 <__udivmoddi4+0x2bc>
 8000e64:	4288      	cmp	r0, r1
 8000e66:	f240 8085 	bls.w	8000f74 <__udivmoddi4+0x2bc>
 8000e6a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e78:	fb09 1110 	mls	r1, r9, r0, r1
 8000e7c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e80:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e84:	458e      	cmp	lr, r1
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x1e2>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e90:	d26c      	bcs.n	8000f6c <__udivmoddi4+0x2b4>
 8000e92:	458e      	cmp	lr, r1
 8000e94:	d96a      	bls.n	8000f6c <__udivmoddi4+0x2b4>
 8000e96:	3802      	subs	r0, #2
 8000e98:	4461      	add	r1, ip
 8000e9a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e9e:	fba0 9402 	umull	r9, r4, r0, r2
 8000ea2:	eba1 010e 	sub.w	r1, r1, lr
 8000ea6:	42a1      	cmp	r1, r4
 8000ea8:	46c8      	mov	r8, r9
 8000eaa:	46a6      	mov	lr, r4
 8000eac:	d356      	bcc.n	8000f5c <__udivmoddi4+0x2a4>
 8000eae:	d053      	beq.n	8000f58 <__udivmoddi4+0x2a0>
 8000eb0:	b15d      	cbz	r5, 8000eca <__udivmoddi4+0x212>
 8000eb2:	ebb3 0208 	subs.w	r2, r3, r8
 8000eb6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eba:	fa01 f707 	lsl.w	r7, r1, r7
 8000ebe:	fa22 f306 	lsr.w	r3, r2, r6
 8000ec2:	40f1      	lsrs	r1, r6
 8000ec4:	431f      	orrs	r7, r3
 8000ec6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eca:	2600      	movs	r6, #0
 8000ecc:	4631      	mov	r1, r6
 8000ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed2:	f1c2 0320 	rsb	r3, r2, #32
 8000ed6:	40d8      	lsrs	r0, r3
 8000ed8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000edc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ee0:	4091      	lsls	r1, r2
 8000ee2:	4301      	orrs	r1, r0
 8000ee4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee8:	fa1f fe8c 	uxth.w	lr, ip
 8000eec:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ef0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ef4:	0c0b      	lsrs	r3, r1, #16
 8000ef6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000efa:	fb00 f60e 	mul.w	r6, r0, lr
 8000efe:	429e      	cmp	r6, r3
 8000f00:	fa04 f402 	lsl.w	r4, r4, r2
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x260>
 8000f06:	eb1c 0303 	adds.w	r3, ip, r3
 8000f0a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f0e:	d22f      	bcs.n	8000f70 <__udivmoddi4+0x2b8>
 8000f10:	429e      	cmp	r6, r3
 8000f12:	d92d      	bls.n	8000f70 <__udivmoddi4+0x2b8>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4463      	add	r3, ip
 8000f18:	1b9b      	subs	r3, r3, r6
 8000f1a:	b289      	uxth	r1, r1
 8000f1c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f20:	fb07 3316 	mls	r3, r7, r6, r3
 8000f24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f28:	fb06 f30e 	mul.w	r3, r6, lr
 8000f2c:	428b      	cmp	r3, r1
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x28a>
 8000f30:	eb1c 0101 	adds.w	r1, ip, r1
 8000f34:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f38:	d216      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d914      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3e:	3e02      	subs	r6, #2
 8000f40:	4461      	add	r1, ip
 8000f42:	1ac9      	subs	r1, r1, r3
 8000f44:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f48:	e738      	b.n	8000dbc <__udivmoddi4+0x104>
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e705      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e3      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6f8      	b.n	8000d4a <__udivmoddi4+0x92>
 8000f58:	454b      	cmp	r3, r9
 8000f5a:	d2a9      	bcs.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f5c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f60:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7a3      	b.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f68:	4646      	mov	r6, r8
 8000f6a:	e7ea      	b.n	8000f42 <__udivmoddi4+0x28a>
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	e794      	b.n	8000e9a <__udivmoddi4+0x1e2>
 8000f70:	4640      	mov	r0, r8
 8000f72:	e7d1      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f74:	46d0      	mov	r8, sl
 8000f76:	e77b      	b.n	8000e70 <__udivmoddi4+0x1b8>
 8000f78:	3b02      	subs	r3, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	e732      	b.n	8000de4 <__udivmoddi4+0x12c>
 8000f7e:	4630      	mov	r0, r6
 8000f80:	e709      	b.n	8000d96 <__udivmoddi4+0xde>
 8000f82:	4464      	add	r4, ip
 8000f84:	3802      	subs	r0, #2
 8000f86:	e742      	b.n	8000e0e <__udivmoddi4+0x156>

08000f88 <__aeabi_idiv0>:
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop

08000f8c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b085      	sub	sp, #20
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	60f8      	str	r0, [r7, #12]
 8000f94:	60b9      	str	r1, [r7, #8]
 8000f96:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	4a07      	ldr	r2, [pc, #28]	; (8000fb8 <vApplicationGetIdleTaskMemory+0x2c>)
 8000f9c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000f9e:	68bb      	ldr	r3, [r7, #8]
 8000fa0:	4a06      	ldr	r2, [pc, #24]	; (8000fbc <vApplicationGetIdleTaskMemory+0x30>)
 8000fa2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	2280      	movs	r2, #128	; 0x80
 8000fa8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000faa:	bf00      	nop
 8000fac:	3714      	adds	r7, #20
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	2000020c 	.word	0x2000020c
 8000fbc:	20000260 	.word	0x20000260

08000fc0 <FusionRadiansToDegrees>:
/**
 * @brief Converts radians to degrees.
 * @param radians Radians.
 * @return Degrees.
 */
static inline float FusionRadiansToDegrees(const float radians) {
 8000fc0:	b480      	push	{r7}
 8000fc2:	b083      	sub	sp, #12
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	ed87 0a01 	vstr	s0, [r7, #4]
    return radians * (180.0f / (float) M_PI);
 8000fca:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fce:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8000fe4 <FusionRadiansToDegrees+0x24>
 8000fd2:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8000fd6:	eeb0 0a67 	vmov.f32	s0, s15
 8000fda:	370c      	adds	r7, #12
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr
 8000fe4:	42652ee0 	.word	0x42652ee0

08000fe8 <FusionAsin>:
/**
 * @brief Returns the arc sine of the value.
 * @param value Value.
 * @return Arc sine of the value.
 */
static inline float FusionAsin(const float value) {
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	ed87 0a01 	vstr	s0, [r7, #4]
    if (value <= -1.0f) {
 8000ff2:	edd7 7a01 	vldr	s15, [r7, #4]
 8000ff6:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8000ffa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000ffe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001002:	d802      	bhi.n	800100a <FusionAsin+0x22>
        return (float) M_PI / -2.0f;
 8001004:	eddf 7a0c 	vldr	s15, [pc, #48]	; 8001038 <FusionAsin+0x50>
 8001008:	e011      	b.n	800102e <FusionAsin+0x46>
    }
    if (value >= 1.0f) {
 800100a:	edd7 7a01 	vldr	s15, [r7, #4]
 800100e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001012:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001016:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800101a:	db02      	blt.n	8001022 <FusionAsin+0x3a>
        return (float) M_PI / 2.0f;
 800101c:	eddf 7a07 	vldr	s15, [pc, #28]	; 800103c <FusionAsin+0x54>
 8001020:	e005      	b.n	800102e <FusionAsin+0x46>
    }
    return asinf(value);
 8001022:	ed97 0a01 	vldr	s0, [r7, #4]
 8001026:	f010 ff4f 	bl	8011ec8 <asinf>
 800102a:	eef0 7a40 	vmov.f32	s15, s0
}
 800102e:	eeb0 0a67 	vmov.f32	s0, s15
 8001032:	3708      	adds	r7, #8
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	bfc90fdb 	.word	0xbfc90fdb
 800103c:	3fc90fdb 	.word	0x3fc90fdb

08001040 <FusionVectorSubtract>:
 * @brief Returns vector B subtracted from vector A.
 * @param vectorA Vector A.
 * @param vectorB Vector B.
 * @return Vector B subtracted from vector A.
 */
static inline FusionVector FusionVectorSubtract(const FusionVector vectorA, const FusionVector vectorB) {
 8001040:	b480      	push	{r7}
 8001042:	b091      	sub	sp, #68	; 0x44
 8001044:	af00      	add	r7, sp, #0
 8001046:	eeb0 5a40 	vmov.f32	s10, s0
 800104a:	eef0 5a60 	vmov.f32	s11, s1
 800104e:	eeb0 6a41 	vmov.f32	s12, s2
 8001052:	eef0 6a61 	vmov.f32	s13, s3
 8001056:	eeb0 7a42 	vmov.f32	s14, s4
 800105a:	eef0 7a62 	vmov.f32	s15, s5
 800105e:	ed87 5a07 	vstr	s10, [r7, #28]
 8001062:	edc7 5a08 	vstr	s11, [r7, #32]
 8001066:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 800106a:	edc7 6a04 	vstr	s13, [r7, #16]
 800106e:	ed87 7a05 	vstr	s14, [r7, #20]
 8001072:	edc7 7a06 	vstr	s15, [r7, #24]
    const FusionVector result = {.axis = {
            .x = vectorA.axis.x - vectorB.axis.x,
 8001076:	ed97 7a07 	vldr	s14, [r7, #28]
 800107a:	edd7 7a04 	vldr	s15, [r7, #16]
 800107e:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8001082:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = vectorA.axis.y - vectorB.axis.y,
 8001086:	ed97 7a08 	vldr	s14, [r7, #32]
 800108a:	edd7 7a05 	vldr	s15, [r7, #20]
 800108e:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8001092:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = vectorA.axis.z - vectorB.axis.z,
 8001096:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800109a:	edd7 7a06 	vldr	s15, [r7, #24]
 800109e:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80010a2:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    }};
    return result;
 80010a6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80010aa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80010ae:	ca07      	ldmia	r2, {r0, r1, r2}
 80010b0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80010b4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80010b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80010b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80010ba:	ee06 1a90 	vmov	s13, r1
 80010be:	ee07 2a10 	vmov	s14, r2
 80010c2:	ee07 3a90 	vmov	s15, r3
}
 80010c6:	eeb0 0a66 	vmov.f32	s0, s13
 80010ca:	eef0 0a47 	vmov.f32	s1, s14
 80010ce:	eeb0 1a67 	vmov.f32	s2, s15
 80010d2:	3744      	adds	r7, #68	; 0x44
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr

080010dc <FusionVectorMultiplyScalar>:
 * @brief Returns the multiplication of a vector by a scalar.
 * @param vector Vector.
 * @param scalar Scalar.
 * @return Multiplication of a vector by a scalar.
 */
static inline FusionVector FusionVectorMultiplyScalar(const FusionVector vector, const float scalar) {
 80010dc:	b480      	push	{r7}
 80010de:	b08f      	sub	sp, #60	; 0x3c
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	eef0 6a40 	vmov.f32	s13, s0
 80010e6:	eeb0 7a60 	vmov.f32	s14, s1
 80010ea:	eef0 7a41 	vmov.f32	s15, s2
 80010ee:	edc7 1a04 	vstr	s3, [r7, #16]
 80010f2:	edc7 6a05 	vstr	s13, [r7, #20]
 80010f6:	ed87 7a06 	vstr	s14, [r7, #24]
 80010fa:	edc7 7a07 	vstr	s15, [r7, #28]
    const FusionVector result = {.axis = {
            .x = vector.axis.x * scalar,
 80010fe:	ed97 7a05 	vldr	s14, [r7, #20]
 8001102:	edd7 7a04 	vldr	s15, [r7, #16]
 8001106:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800110a:	edc7 7a08 	vstr	s15, [r7, #32]
            .y = vector.axis.y * scalar,
 800110e:	ed97 7a06 	vldr	s14, [r7, #24]
 8001112:	edd7 7a04 	vldr	s15, [r7, #16]
 8001116:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800111a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            .z = vector.axis.z * scalar,
 800111e:	ed97 7a07 	vldr	s14, [r7, #28]
 8001122:	edd7 7a04 	vldr	s15, [r7, #16]
 8001126:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800112a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    }};
    return result;
 800112e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001132:	f107 0220 	add.w	r2, r7, #32
 8001136:	ca07      	ldmia	r2, {r0, r1, r2}
 8001138:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800113c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800113e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001140:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001142:	ee06 1a90 	vmov	s13, r1
 8001146:	ee07 2a10 	vmov	s14, r2
 800114a:	ee07 3a90 	vmov	s15, r3
}
 800114e:	eeb0 0a66 	vmov.f32	s0, s13
 8001152:	eef0 0a47 	vmov.f32	s1, s14
 8001156:	eeb0 1a67 	vmov.f32	s2, s15
 800115a:	373c      	adds	r7, #60	; 0x3c
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr

08001164 <FusionMatrixMultiplyVector>:
 * @brief Returns the multiplication of a matrix with a vector.
 * @param matrix Matrix.
 * @param vector Vector.
 * @return Multiplication of a matrix with a vector.
 */
static inline FusionVector FusionMatrixMultiplyVector(const FusionMatrix matrix, const FusionVector vector) {
 8001164:	b084      	sub	sp, #16
 8001166:	b480      	push	{r7}
 8001168:	b08f      	sub	sp, #60	; 0x3c
 800116a:	af00      	add	r7, sp, #0
 800116c:	f107 0c40 	add.w	ip, r7, #64	; 0x40
 8001170:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 8001174:	eef0 6a40 	vmov.f32	s13, s0
 8001178:	eeb0 7a60 	vmov.f32	s14, s1
 800117c:	eef0 7a41 	vmov.f32	s15, s2
 8001180:	edc7 6a05 	vstr	s13, [r7, #20]
 8001184:	ed87 7a06 	vstr	s14, [r7, #24]
 8001188:	edc7 7a07 	vstr	s15, [r7, #28]
#define R matrix.element
    const FusionVector result = {.axis = {
            .x = R.xx * vector.axis.x + R.xy * vector.axis.y + R.xz * vector.axis.z,
 800118c:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001190:	edd7 7a05 	vldr	s15, [r7, #20]
 8001194:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001198:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 800119c:	edd7 7a06 	vldr	s15, [r7, #24]
 80011a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011a4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80011a8:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 80011ac:	edd7 7a07 	vldr	s15, [r7, #28]
 80011b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011b4:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80011b8:	edc7 7a08 	vstr	s15, [r7, #32]
            .y = R.yx * vector.axis.x + R.yy * vector.axis.y + R.yz * vector.axis.z,
 80011bc:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80011c0:	edd7 7a05 	vldr	s15, [r7, #20]
 80011c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011c8:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 80011cc:	edd7 7a06 	vldr	s15, [r7, #24]
 80011d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011d4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80011d8:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 80011dc:	edd7 7a07 	vldr	s15, [r7, #28]
 80011e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011e4:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80011e8:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            .z = R.zx * vector.axis.x + R.zy * vector.axis.y + R.zz * vector.axis.z,
 80011ec:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80011f0:	edd7 7a05 	vldr	s15, [r7, #20]
 80011f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011f8:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 80011fc:	edd7 7a06 	vldr	s15, [r7, #24]
 8001200:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001204:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001208:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 800120c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001210:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001214:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8001218:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    }};
    return result;
 800121c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001220:	f107 0220 	add.w	r2, r7, #32
 8001224:	ca07      	ldmia	r2, {r0, r1, r2}
 8001226:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800122a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800122c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800122e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001230:	ee06 1a90 	vmov	s13, r1
 8001234:	ee07 2a10 	vmov	s14, r2
 8001238:	ee07 3a90 	vmov	s15, r3
#undef R
}
 800123c:	eeb0 0a66 	vmov.f32	s0, s13
 8001240:	eef0 0a47 	vmov.f32	s1, s14
 8001244:	eeb0 1a67 	vmov.f32	s2, s15
 8001248:	373c      	adds	r7, #60	; 0x3c
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	b004      	add	sp, #16
 8001252:	4770      	bx	lr

08001254 <FusionQuaternionToMatrix>:
/**
 * @brief Converts a quaternion to a rotation matrix.
 * @param quaternion Quaternion.
 * @return Rotation matrix.
 */
static inline FusionMatrix FusionQuaternionToMatrix(const FusionQuaternion quaternion) {
 8001254:	b4b0      	push	{r4, r5, r7}
 8001256:	b097      	sub	sp, #92	; 0x5c
 8001258:	af00      	add	r7, sp, #0
 800125a:	6178      	str	r0, [r7, #20]
 800125c:	eeb0 6a40 	vmov.f32	s12, s0
 8001260:	eef0 6a60 	vmov.f32	s13, s1
 8001264:	eeb0 7a41 	vmov.f32	s14, s2
 8001268:	eef0 7a61 	vmov.f32	s15, s3
 800126c:	ed87 6a01 	vstr	s12, [r7, #4]
 8001270:	edc7 6a02 	vstr	s13, [r7, #8]
 8001274:	ed87 7a03 	vstr	s14, [r7, #12]
 8001278:	edc7 7a04 	vstr	s15, [r7, #16]
#define Q quaternion.element
    const float qwqw = Q.w * Q.w; // calculate common terms to avoid repeated operations
 800127c:	ed97 7a01 	vldr	s14, [r7, #4]
 8001280:	edd7 7a01 	vldr	s15, [r7, #4]
 8001284:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001288:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    const float qwqx = Q.w * Q.x;
 800128c:	ed97 7a01 	vldr	s14, [r7, #4]
 8001290:	edd7 7a02 	vldr	s15, [r7, #8]
 8001294:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001298:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    const float qwqy = Q.w * Q.y;
 800129c:	ed97 7a01 	vldr	s14, [r7, #4]
 80012a0:	edd7 7a03 	vldr	s15, [r7, #12]
 80012a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012a8:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    const float qwqz = Q.w * Q.z;
 80012ac:	ed97 7a01 	vldr	s14, [r7, #4]
 80012b0:	edd7 7a04 	vldr	s15, [r7, #16]
 80012b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012b8:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    const float qxqy = Q.x * Q.y;
 80012bc:	ed97 7a02 	vldr	s14, [r7, #8]
 80012c0:	edd7 7a03 	vldr	s15, [r7, #12]
 80012c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012c8:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    const float qxqz = Q.x * Q.z;
 80012cc:	ed97 7a02 	vldr	s14, [r7, #8]
 80012d0:	edd7 7a04 	vldr	s15, [r7, #16]
 80012d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012d8:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    const float qyqz = Q.y * Q.z;
 80012dc:	ed97 7a03 	vldr	s14, [r7, #12]
 80012e0:	edd7 7a04 	vldr	s15, [r7, #16]
 80012e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012e8:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    const FusionMatrix matrix = {.element = {
            .xx = 2.0f * (qwqw - 0.5f + Q.x * Q.x),
 80012ec:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80012f0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80012f4:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80012f8:	edd7 6a02 	vldr	s13, [r7, #8]
 80012fc:	edd7 7a02 	vldr	s15, [r7, #8]
 8001300:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001304:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001308:	ee77 7aa7 	vadd.f32	s15, s15, s15
    const FusionMatrix matrix = {.element = {
 800130c:	edc7 7a06 	vstr	s15, [r7, #24]
            .xy = 2.0f * (qxqy - qwqz),
 8001310:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8001314:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001318:	ee77 7a67 	vsub.f32	s15, s14, s15
 800131c:	ee77 7aa7 	vadd.f32	s15, s15, s15
    const FusionMatrix matrix = {.element = {
 8001320:	edc7 7a07 	vstr	s15, [r7, #28]
            .xz = 2.0f * (qxqz + qwqy),
 8001324:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001328:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800132c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001330:	ee77 7aa7 	vadd.f32	s15, s15, s15
    const FusionMatrix matrix = {.element = {
 8001334:	edc7 7a08 	vstr	s15, [r7, #32]
            .yx = 2.0f * (qxqy + qwqz),
 8001338:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 800133c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001340:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001344:	ee77 7aa7 	vadd.f32	s15, s15, s15
    const FusionMatrix matrix = {.element = {
 8001348:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            .yy = 2.0f * (qwqw - 0.5f + Q.y * Q.y),
 800134c:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001350:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001354:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001358:	edd7 6a03 	vldr	s13, [r7, #12]
 800135c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001360:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001364:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001368:	ee77 7aa7 	vadd.f32	s15, s15, s15
    const FusionMatrix matrix = {.element = {
 800136c:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .yz = 2.0f * (qyqz - qwqx),
 8001370:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8001374:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8001378:	ee77 7a67 	vsub.f32	s15, s14, s15
 800137c:	ee77 7aa7 	vadd.f32	s15, s15, s15
    const FusionMatrix matrix = {.element = {
 8001380:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .zx = 2.0f * (qxqz - qwqy),
 8001384:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001388:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800138c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001390:	ee77 7aa7 	vadd.f32	s15, s15, s15
    const FusionMatrix matrix = {.element = {
 8001394:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
            .zy = 2.0f * (qyqz + qwqx),
 8001398:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800139c:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80013a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013a4:	ee77 7aa7 	vadd.f32	s15, s15, s15
    const FusionMatrix matrix = {.element = {
 80013a8:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
            .zz = 2.0f * (qwqw - 0.5f + Q.z * Q.z),
 80013ac:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80013b0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80013b4:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80013b8:	edd7 6a04 	vldr	s13, [r7, #16]
 80013bc:	edd7 7a04 	vldr	s15, [r7, #16]
 80013c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013c8:	ee77 7aa7 	vadd.f32	s15, s15, s15
    const FusionMatrix matrix = {.element = {
 80013cc:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
    }};
    return matrix;
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	461d      	mov	r5, r3
 80013d4:	f107 0418 	add.w	r4, r7, #24
 80013d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013e0:	6823      	ldr	r3, [r4, #0]
 80013e2:	602b      	str	r3, [r5, #0]
#undef Q
}
 80013e4:	6978      	ldr	r0, [r7, #20]
 80013e6:	375c      	adds	r7, #92	; 0x5c
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bcb0      	pop	{r4, r5, r7}
 80013ec:	4770      	bx	lr

080013ee <FusionQuaternionToEuler>:
/**
 * @brief Converts a quaternion to ZYX Euler angles in degrees.
 * @param quaternion Quaternion.
 * @return Euler angles in degrees.
 */
static inline FusionEuler FusionQuaternionToEuler(const FusionQuaternion quaternion) {
 80013ee:	b580      	push	{r7, lr}
 80013f0:	b090      	sub	sp, #64	; 0x40
 80013f2:	af00      	add	r7, sp, #0
 80013f4:	eeb0 6a40 	vmov.f32	s12, s0
 80013f8:	eef0 6a60 	vmov.f32	s13, s1
 80013fc:	eeb0 7a41 	vmov.f32	s14, s2
 8001400:	eef0 7a61 	vmov.f32	s15, s3
 8001404:	ed87 6a04 	vstr	s12, [r7, #16]
 8001408:	edc7 6a05 	vstr	s13, [r7, #20]
 800140c:	ed87 7a06 	vstr	s14, [r7, #24]
 8001410:	edc7 7a07 	vstr	s15, [r7, #28]
#define Q quaternion.element
    const float halfMinusQySquared = 0.5f - Q.y * Q.y; // calculate common terms to avoid repeated operations
 8001414:	ed97 7a06 	vldr	s14, [r7, #24]
 8001418:	edd7 7a06 	vldr	s15, [r7, #24]
 800141c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001420:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001424:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001428:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    const FusionEuler euler = {.angle = {
            .roll = FusionRadiansToDegrees(atan2f(Q.w * Q.x + Q.y * Q.z, halfMinusQySquared - Q.x * Q.x)),
 800142c:	ed97 7a04 	vldr	s14, [r7, #16]
 8001430:	edd7 7a05 	vldr	s15, [r7, #20]
 8001434:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001438:	edd7 6a06 	vldr	s13, [r7, #24]
 800143c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001440:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001444:	ee77 6a27 	vadd.f32	s13, s14, s15
 8001448:	ed97 7a05 	vldr	s14, [r7, #20]
 800144c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001450:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001454:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8001458:	ee77 7a67 	vsub.f32	s15, s14, s15
 800145c:	eef0 0a67 	vmov.f32	s1, s15
 8001460:	eeb0 0a66 	vmov.f32	s0, s13
 8001464:	f010 fd5c 	bl	8011f20 <atan2f>
 8001468:	eef0 7a40 	vmov.f32	s15, s0
 800146c:	eeb0 0a67 	vmov.f32	s0, s15
 8001470:	f7ff fda6 	bl	8000fc0 <FusionRadiansToDegrees>
 8001474:	eef0 7a40 	vmov.f32	s15, s0
    const FusionEuler euler = {.angle = {
 8001478:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            .pitch = FusionRadiansToDegrees(FusionAsin(2.0f * (Q.w * Q.y - Q.z * Q.x))),
 800147c:	ed97 7a04 	vldr	s14, [r7, #16]
 8001480:	edd7 7a06 	vldr	s15, [r7, #24]
 8001484:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001488:	edd7 6a07 	vldr	s13, [r7, #28]
 800148c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001490:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001494:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001498:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800149c:	eeb0 0a67 	vmov.f32	s0, s15
 80014a0:	f7ff fda2 	bl	8000fe8 <FusionAsin>
 80014a4:	eef0 7a40 	vmov.f32	s15, s0
 80014a8:	eeb0 0a67 	vmov.f32	s0, s15
 80014ac:	f7ff fd88 	bl	8000fc0 <FusionRadiansToDegrees>
 80014b0:	eef0 7a40 	vmov.f32	s15, s0
    const FusionEuler euler = {.angle = {
 80014b4:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .yaw = FusionRadiansToDegrees(atan2f(Q.w * Q.z + Q.x * Q.y, halfMinusQySquared - Q.z * Q.z)),
 80014b8:	ed97 7a04 	vldr	s14, [r7, #16]
 80014bc:	edd7 7a07 	vldr	s15, [r7, #28]
 80014c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014c4:	edd7 6a05 	vldr	s13, [r7, #20]
 80014c8:	edd7 7a06 	vldr	s15, [r7, #24]
 80014cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014d0:	ee77 6a27 	vadd.f32	s13, s14, s15
 80014d4:	ed97 7a07 	vldr	s14, [r7, #28]
 80014d8:	edd7 7a07 	vldr	s15, [r7, #28]
 80014dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014e0:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80014e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014e8:	eef0 0a67 	vmov.f32	s1, s15
 80014ec:	eeb0 0a66 	vmov.f32	s0, s13
 80014f0:	f010 fd16 	bl	8011f20 <atan2f>
 80014f4:	eef0 7a40 	vmov.f32	s15, s0
 80014f8:	eeb0 0a67 	vmov.f32	s0, s15
 80014fc:	f7ff fd60 	bl	8000fc0 <FusionRadiansToDegrees>
 8001500:	eef0 7a40 	vmov.f32	s15, s0
    const FusionEuler euler = {.angle = {
 8001504:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    }};
    return euler;
 8001508:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800150c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001510:	ca07      	ldmia	r2, {r0, r1, r2}
 8001512:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001516:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001518:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800151a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800151c:	ee06 1a90 	vmov	s13, r1
 8001520:	ee07 2a10 	vmov	s14, r2
 8001524:	ee07 3a90 	vmov	s15, r3
#undef Q
}
 8001528:	eeb0 0a66 	vmov.f32	s0, s13
 800152c:	eef0 0a47 	vmov.f32	s1, s14
 8001530:	eeb0 1a67 	vmov.f32	s2, s15
 8001534:	3740      	adds	r7, #64	; 0x40
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
	...

0800153c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800153c:	b5b0      	push	{r4, r5, r7, lr}
 800153e:	b096      	sub	sp, #88	; 0x58
 8001540:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001542:	f003 ff3d 	bl	80053c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001546:	f000 f89f 	bl	8001688 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800154a:	f000 fd83 	bl	8002054 <MX_GPIO_Init>
  MX_DMA_Init();
 800154e:	f000 fd61 	bl	8002014 <MX_DMA_Init>
  MX_TIM2_Init();
 8001552:	f000 fab9 	bl	8001ac8 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8001556:	f000 fcdf 	bl	8001f18 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800155a:	f000 f9f5 	bl	8001948 <MX_I2C1_Init>
  MX_I2C2_Init();
 800155e:	f000 fa21 	bl	80019a4 <MX_I2C2_Init>
  MX_I2C3_Init();
 8001562:	f000 fa4d 	bl	8001a00 <MX_I2C3_Init>
  MX_TIM3_Init();
 8001566:	f000 fb1f 	bl	8001ba8 <MX_TIM3_Init>
  MX_TIM4_Init();
 800156a:	f000 fbcb 	bl	8001d04 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 800156e:	f000 fca9 	bl	8001ec4 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8001572:	f000 fcfb 	bl	8001f6c <MX_USART3_UART_Init>
  MX_SPI2_Init();
 8001576:	f000 fa71 	bl	8001a5c <MX_SPI2_Init>
  MX_USART6_UART_Init();
 800157a:	f000 fd21 	bl	8001fc0 <MX_USART6_UART_Init>
  MX_ADC1_Init();
 800157e:	f000 f8ed 	bl	800175c <MX_ADC1_Init>
  MX_ADC2_Init();
 8001582:	f000 f93d 	bl	8001800 <MX_ADC2_Init>
  MX_ADC3_Init();
 8001586:	f000 f98d 	bl	80018a4 <MX_ADC3_Init>
  MX_TIM6_Init();
 800158a:	f000 fc2f 	bl	8001dec <MX_TIM6_Init>
  MX_TIM7_Init();
 800158e:	f000 fc63 	bl	8001e58 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */




  __HAL_SPI_ENABLE(&hspi2);
 8001592:	4b33      	ldr	r3, [pc, #204]	; (8001660 <main+0x124>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	4b31      	ldr	r3, [pc, #196]	; (8001660 <main+0x124>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80015a0:	601a      	str	r2, [r3, #0]
  HAL_TIM_PWM_Start  ( &htim3,  TIM_CHANNEL_1  );
 80015a2:	2100      	movs	r1, #0
 80015a4:	482f      	ldr	r0, [pc, #188]	; (8001664 <main+0x128>)
 80015a6:	f007 fab1 	bl	8008b0c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start  ( &htim3,  TIM_CHANNEL_2  );
 80015aa:	2104      	movs	r1, #4
 80015ac:	482d      	ldr	r0, [pc, #180]	; (8001664 <main+0x128>)
 80015ae:	f007 faad 	bl	8008b0c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start  ( &htim3,  TIM_CHANNEL_3  );
 80015b2:	2108      	movs	r1, #8
 80015b4:	482b      	ldr	r0, [pc, #172]	; (8001664 <main+0x128>)
 80015b6:	f007 faa9 	bl	8008b0c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start  ( &htim3,  TIM_CHANNEL_4  );
 80015ba:	210c      	movs	r1, #12
 80015bc:	4829      	ldr	r0, [pc, #164]	; (8001664 <main+0x128>)
 80015be:	f007 faa5 	bl	8008b0c <HAL_TIM_PWM_Start>
  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  telemetria_Queue = xQueueCreate( 13, 13*sizeof( float ) );
 80015c2:	2200      	movs	r2, #0
 80015c4:	2134      	movs	r1, #52	; 0x34
 80015c6:	200d      	movs	r0, #13
 80015c8:	f00b fd3e 	bl	800d048 <xQueueGenericCreate>
 80015cc:	4603      	mov	r3, r0
 80015ce:	4a26      	ldr	r2, [pc, #152]	; (8001668 <main+0x12c>)
 80015d0:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityBelowNormal, 0, 500);
 80015d2:	4b26      	ldr	r3, [pc, #152]	; (800166c <main+0x130>)
 80015d4:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80015d8:	461d      	mov	r5, r3
 80015da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015de:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80015e2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80015e6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80015ea:	2100      	movs	r1, #0
 80015ec:	4618      	mov	r0, r3
 80015ee:	f00b fbaf 	bl	800cd50 <osThreadCreate>
 80015f2:	4603      	mov	r3, r0
 80015f4:	4a1e      	ldr	r2, [pc, #120]	; (8001670 <main+0x134>)
 80015f6:	6013      	str	r3, [r2, #0]
  vTaskSuspend( defaultTaskHandle );
 80015f8:	4b1d      	ldr	r3, [pc, #116]	; (8001670 <main+0x134>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4618      	mov	r0, r3
 80015fe:	f00c fa33 	bl	800da68 <vTaskSuspend>

  /* definition and creation of Data_Reading */
  osThreadDef(Data_Reading, Start_Data_Reading, osPriorityNormal, 0, 600);
 8001602:	4b1c      	ldr	r3, [pc, #112]	; (8001674 <main+0x138>)
 8001604:	f107 0420 	add.w	r4, r7, #32
 8001608:	461d      	mov	r5, r3
 800160a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800160c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800160e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001612:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Data_ReadingHandle = osThreadCreate(osThread(Data_Reading), NULL);
 8001616:	f107 0320 	add.w	r3, r7, #32
 800161a:	2100      	movs	r1, #0
 800161c:	4618      	mov	r0, r3
 800161e:	f00b fb97 	bl	800cd50 <osThreadCreate>
 8001622:	4603      	mov	r3, r0
 8001624:	4a14      	ldr	r2, [pc, #80]	; (8001678 <main+0x13c>)
 8001626:	6013      	str	r3, [r2, #0]

  /* definition and creation of Orientation_cal */
  osThreadDef(Orientation_cal, Start_Orientation, osPriorityBelowNormal, 0, 200);
 8001628:	4b14      	ldr	r3, [pc, #80]	; (800167c <main+0x140>)
 800162a:	1d3c      	adds	r4, r7, #4
 800162c:	461d      	mov	r5, r3
 800162e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001630:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001632:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001636:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Orientation_calHandle = osThreadCreate(osThread(Orientation_cal), NULL);
 800163a:	1d3b      	adds	r3, r7, #4
 800163c:	2100      	movs	r1, #0
 800163e:	4618      	mov	r0, r3
 8001640:	f00b fb86 	bl	800cd50 <osThreadCreate>
 8001644:	4603      	mov	r3, r0
 8001646:	4a0e      	ldr	r2, [pc, #56]	; (8001680 <main+0x144>)
 8001648:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800164a:	f00b fb7a 	bl	800cd42 <osKernelStart>

  while (1)
  {


	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 800164e:	2108      	movs	r1, #8
 8001650:	480c      	ldr	r0, [pc, #48]	; (8001684 <main+0x148>)
 8001652:	f005 f876 	bl	8006742 <HAL_GPIO_TogglePin>

	  HAL_Delay(3);
 8001656:	2003      	movs	r0, #3
 8001658:	f003 ff24 	bl	80054a4 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 800165c:	e7f7      	b.n	800164e <main+0x112>
 800165e:	bf00      	nop
 8001660:	20000634 	.word	0x20000634
 8001664:	200006d4 	.word	0x200006d4
 8001668:	20002b14 	.word	0x20002b14
 800166c:	0801425c 	.word	0x0801425c
 8001670:	20000964 	.word	0x20000964
 8001674:	08014278 	.word	0x08014278
 8001678:	20000968 	.word	0x20000968
 800167c:	08014294 	.word	0x08014294
 8001680:	2000096c 	.word	0x2000096c
 8001684:	40020400 	.word	0x40020400

08001688 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b094      	sub	sp, #80	; 0x50
 800168c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800168e:	f107 0320 	add.w	r3, r7, #32
 8001692:	2230      	movs	r2, #48	; 0x30
 8001694:	2100      	movs	r1, #0
 8001696:	4618      	mov	r0, r3
 8001698:	f00d fc40 	bl	800ef1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800169c:	f107 030c 	add.w	r3, r7, #12
 80016a0:	2200      	movs	r2, #0
 80016a2:	601a      	str	r2, [r3, #0]
 80016a4:	605a      	str	r2, [r3, #4]
 80016a6:	609a      	str	r2, [r3, #8]
 80016a8:	60da      	str	r2, [r3, #12]
 80016aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80016ac:	2300      	movs	r3, #0
 80016ae:	60bb      	str	r3, [r7, #8]
 80016b0:	4b28      	ldr	r3, [pc, #160]	; (8001754 <SystemClock_Config+0xcc>)
 80016b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b4:	4a27      	ldr	r2, [pc, #156]	; (8001754 <SystemClock_Config+0xcc>)
 80016b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016ba:	6413      	str	r3, [r2, #64]	; 0x40
 80016bc:	4b25      	ldr	r3, [pc, #148]	; (8001754 <SystemClock_Config+0xcc>)
 80016be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016c4:	60bb      	str	r3, [r7, #8]
 80016c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80016c8:	2300      	movs	r3, #0
 80016ca:	607b      	str	r3, [r7, #4]
 80016cc:	4b22      	ldr	r3, [pc, #136]	; (8001758 <SystemClock_Config+0xd0>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a21      	ldr	r2, [pc, #132]	; (8001758 <SystemClock_Config+0xd0>)
 80016d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016d6:	6013      	str	r3, [r2, #0]
 80016d8:	4b1f      	ldr	r3, [pc, #124]	; (8001758 <SystemClock_Config+0xd0>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016e0:	607b      	str	r3, [r7, #4]
 80016e2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80016e4:	2301      	movs	r3, #1
 80016e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80016e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016ec:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016ee:	2302      	movs	r3, #2
 80016f0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016f2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80016f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80016f8:	2304      	movs	r3, #4
 80016fa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80016fc:	23a8      	movs	r3, #168	; 0xa8
 80016fe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001700:	2302      	movs	r3, #2
 8001702:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001704:	2304      	movs	r3, #4
 8001706:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001708:	f107 0320 	add.w	r3, r7, #32
 800170c:	4618      	mov	r0, r3
 800170e:	f006 f80b 	bl	8007728 <HAL_RCC_OscConfig>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d001      	beq.n	800171c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001718:	f002 f8ae 	bl	8003878 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800171c:	230f      	movs	r3, #15
 800171e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001720:	2302      	movs	r3, #2
 8001722:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001724:	2300      	movs	r3, #0
 8001726:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001728:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800172c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800172e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001732:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001734:	f107 030c 	add.w	r3, r7, #12
 8001738:	2105      	movs	r1, #5
 800173a:	4618      	mov	r0, r3
 800173c:	f006 fa6c 	bl	8007c18 <HAL_RCC_ClockConfig>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d001      	beq.n	800174a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001746:	f002 f897 	bl	8003878 <Error_Handler>
  }
}
 800174a:	bf00      	nop
 800174c:	3750      	adds	r7, #80	; 0x50
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	40023800 	.word	0x40023800
 8001758:	40007000 	.word	0x40007000

0800175c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b084      	sub	sp, #16
 8001760:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001762:	463b      	mov	r3, r7
 8001764:	2200      	movs	r2, #0
 8001766:	601a      	str	r2, [r3, #0]
 8001768:	605a      	str	r2, [r3, #4]
 800176a:	609a      	str	r2, [r3, #8]
 800176c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800176e:	4b21      	ldr	r3, [pc, #132]	; (80017f4 <MX_ADC1_Init+0x98>)
 8001770:	4a21      	ldr	r2, [pc, #132]	; (80017f8 <MX_ADC1_Init+0x9c>)
 8001772:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 8001774:	4b1f      	ldr	r3, [pc, #124]	; (80017f4 <MX_ADC1_Init+0x98>)
 8001776:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800177a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800177c:	4b1d      	ldr	r3, [pc, #116]	; (80017f4 <MX_ADC1_Init+0x98>)
 800177e:	2200      	movs	r2, #0
 8001780:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001782:	4b1c      	ldr	r3, [pc, #112]	; (80017f4 <MX_ADC1_Init+0x98>)
 8001784:	2200      	movs	r2, #0
 8001786:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001788:	4b1a      	ldr	r3, [pc, #104]	; (80017f4 <MX_ADC1_Init+0x98>)
 800178a:	2200      	movs	r2, #0
 800178c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800178e:	4b19      	ldr	r3, [pc, #100]	; (80017f4 <MX_ADC1_Init+0x98>)
 8001790:	2200      	movs	r2, #0
 8001792:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001796:	4b17      	ldr	r3, [pc, #92]	; (80017f4 <MX_ADC1_Init+0x98>)
 8001798:	2200      	movs	r2, #0
 800179a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800179c:	4b15      	ldr	r3, [pc, #84]	; (80017f4 <MX_ADC1_Init+0x98>)
 800179e:	4a17      	ldr	r2, [pc, #92]	; (80017fc <MX_ADC1_Init+0xa0>)
 80017a0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80017a2:	4b14      	ldr	r3, [pc, #80]	; (80017f4 <MX_ADC1_Init+0x98>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80017a8:	4b12      	ldr	r3, [pc, #72]	; (80017f4 <MX_ADC1_Init+0x98>)
 80017aa:	2201      	movs	r2, #1
 80017ac:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80017ae:	4b11      	ldr	r3, [pc, #68]	; (80017f4 <MX_ADC1_Init+0x98>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80017b6:	4b0f      	ldr	r3, [pc, #60]	; (80017f4 <MX_ADC1_Init+0x98>)
 80017b8:	2201      	movs	r2, #1
 80017ba:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80017bc:	480d      	ldr	r0, [pc, #52]	; (80017f4 <MX_ADC1_Init+0x98>)
 80017be:	f003 fe95 	bl	80054ec <HAL_ADC_Init>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d001      	beq.n	80017cc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80017c8:	f002 f856 	bl	8003878 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80017cc:	2305      	movs	r3, #5
 80017ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80017d0:	2301      	movs	r3, #1
 80017d2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80017d4:	2300      	movs	r3, #0
 80017d6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017d8:	463b      	mov	r3, r7
 80017da:	4619      	mov	r1, r3
 80017dc:	4805      	ldr	r0, [pc, #20]	; (80017f4 <MX_ADC1_Init+0x98>)
 80017de:	f003 fec9 	bl	8005574 <HAL_ADC_ConfigChannel>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d001      	beq.n	80017ec <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80017e8:	f002 f846 	bl	8003878 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80017ec:	bf00      	nop
 80017ee:	3710      	adds	r7, #16
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	20000460 	.word	0x20000460
 80017f8:	40012000 	.word	0x40012000
 80017fc:	0f000001 	.word	0x0f000001

08001800 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b084      	sub	sp, #16
 8001804:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001806:	463b      	mov	r3, r7
 8001808:	2200      	movs	r2, #0
 800180a:	601a      	str	r2, [r3, #0]
 800180c:	605a      	str	r2, [r3, #4]
 800180e:	609a      	str	r2, [r3, #8]
 8001810:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8001812:	4b21      	ldr	r3, [pc, #132]	; (8001898 <MX_ADC2_Init+0x98>)
 8001814:	4a21      	ldr	r2, [pc, #132]	; (800189c <MX_ADC2_Init+0x9c>)
 8001816:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 8001818:	4b1f      	ldr	r3, [pc, #124]	; (8001898 <MX_ADC2_Init+0x98>)
 800181a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800181e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001820:	4b1d      	ldr	r3, [pc, #116]	; (8001898 <MX_ADC2_Init+0x98>)
 8001822:	2200      	movs	r2, #0
 8001824:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8001826:	4b1c      	ldr	r3, [pc, #112]	; (8001898 <MX_ADC2_Init+0x98>)
 8001828:	2200      	movs	r2, #0
 800182a:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800182c:	4b1a      	ldr	r3, [pc, #104]	; (8001898 <MX_ADC2_Init+0x98>)
 800182e:	2200      	movs	r2, #0
 8001830:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001832:	4b19      	ldr	r3, [pc, #100]	; (8001898 <MX_ADC2_Init+0x98>)
 8001834:	2200      	movs	r2, #0
 8001836:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800183a:	4b17      	ldr	r3, [pc, #92]	; (8001898 <MX_ADC2_Init+0x98>)
 800183c:	2200      	movs	r2, #0
 800183e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001840:	4b15      	ldr	r3, [pc, #84]	; (8001898 <MX_ADC2_Init+0x98>)
 8001842:	4a17      	ldr	r2, [pc, #92]	; (80018a0 <MX_ADC2_Init+0xa0>)
 8001844:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001846:	4b14      	ldr	r3, [pc, #80]	; (8001898 <MX_ADC2_Init+0x98>)
 8001848:	2200      	movs	r2, #0
 800184a:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 800184c:	4b12      	ldr	r3, [pc, #72]	; (8001898 <MX_ADC2_Init+0x98>)
 800184e:	2201      	movs	r2, #1
 8001850:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001852:	4b11      	ldr	r3, [pc, #68]	; (8001898 <MX_ADC2_Init+0x98>)
 8001854:	2200      	movs	r2, #0
 8001856:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800185a:	4b0f      	ldr	r3, [pc, #60]	; (8001898 <MX_ADC2_Init+0x98>)
 800185c:	2201      	movs	r2, #1
 800185e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001860:	480d      	ldr	r0, [pc, #52]	; (8001898 <MX_ADC2_Init+0x98>)
 8001862:	f003 fe43 	bl	80054ec <HAL_ADC_Init>
 8001866:	4603      	mov	r3, r0
 8001868:	2b00      	cmp	r3, #0
 800186a:	d001      	beq.n	8001870 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 800186c:	f002 f804 	bl	8003878 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001870:	2304      	movs	r3, #4
 8001872:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001874:	2301      	movs	r3, #1
 8001876:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001878:	2300      	movs	r3, #0
 800187a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800187c:	463b      	mov	r3, r7
 800187e:	4619      	mov	r1, r3
 8001880:	4805      	ldr	r0, [pc, #20]	; (8001898 <MX_ADC2_Init+0x98>)
 8001882:	f003 fe77 	bl	8005574 <HAL_ADC_ConfigChannel>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d001      	beq.n	8001890 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 800188c:	f001 fff4 	bl	8003878 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001890:	bf00      	nop
 8001892:	3710      	adds	r7, #16
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}
 8001898:	200004a8 	.word	0x200004a8
 800189c:	40012100 	.word	0x40012100
 80018a0:	0f000001 	.word	0x0f000001

080018a4 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b084      	sub	sp, #16
 80018a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80018aa:	463b      	mov	r3, r7
 80018ac:	2200      	movs	r2, #0
 80018ae:	601a      	str	r2, [r3, #0]
 80018b0:	605a      	str	r2, [r3, #4]
 80018b2:	609a      	str	r2, [r3, #8]
 80018b4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80018b6:	4b21      	ldr	r3, [pc, #132]	; (800193c <MX_ADC3_Init+0x98>)
 80018b8:	4a21      	ldr	r2, [pc, #132]	; (8001940 <MX_ADC3_Init+0x9c>)
 80018ba:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 80018bc:	4b1f      	ldr	r3, [pc, #124]	; (800193c <MX_ADC3_Init+0x98>)
 80018be:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80018c2:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80018c4:	4b1d      	ldr	r3, [pc, #116]	; (800193c <MX_ADC3_Init+0x98>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 80018ca:	4b1c      	ldr	r3, [pc, #112]	; (800193c <MX_ADC3_Init+0x98>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80018d0:	4b1a      	ldr	r3, [pc, #104]	; (800193c <MX_ADC3_Init+0x98>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80018d6:	4b19      	ldr	r3, [pc, #100]	; (800193c <MX_ADC3_Init+0x98>)
 80018d8:	2200      	movs	r2, #0
 80018da:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80018de:	4b17      	ldr	r3, [pc, #92]	; (800193c <MX_ADC3_Init+0x98>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80018e4:	4b15      	ldr	r3, [pc, #84]	; (800193c <MX_ADC3_Init+0x98>)
 80018e6:	4a17      	ldr	r2, [pc, #92]	; (8001944 <MX_ADC3_Init+0xa0>)
 80018e8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80018ea:	4b14      	ldr	r3, [pc, #80]	; (800193c <MX_ADC3_Init+0x98>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 80018f0:	4b12      	ldr	r3, [pc, #72]	; (800193c <MX_ADC3_Init+0x98>)
 80018f2:	2201      	movs	r2, #1
 80018f4:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80018f6:	4b11      	ldr	r3, [pc, #68]	; (800193c <MX_ADC3_Init+0x98>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80018fe:	4b0f      	ldr	r3, [pc, #60]	; (800193c <MX_ADC3_Init+0x98>)
 8001900:	2201      	movs	r2, #1
 8001902:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001904:	480d      	ldr	r0, [pc, #52]	; (800193c <MX_ADC3_Init+0x98>)
 8001906:	f003 fdf1 	bl	80054ec <HAL_ADC_Init>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d001      	beq.n	8001914 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8001910:	f001 ffb2 	bl	8003878 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8001914:	230d      	movs	r3, #13
 8001916:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001918:	2301      	movs	r3, #1
 800191a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800191c:	2300      	movs	r3, #0
 800191e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001920:	463b      	mov	r3, r7
 8001922:	4619      	mov	r1, r3
 8001924:	4805      	ldr	r0, [pc, #20]	; (800193c <MX_ADC3_Init+0x98>)
 8001926:	f003 fe25 	bl	8005574 <HAL_ADC_ConfigChannel>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d001      	beq.n	8001934 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8001930:	f001 ffa2 	bl	8003878 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001934:	bf00      	nop
 8001936:	3710      	adds	r7, #16
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}
 800193c:	200004f0 	.word	0x200004f0
 8001940:	40012200 	.word	0x40012200
 8001944:	0f000001 	.word	0x0f000001

08001948 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800194c:	4b12      	ldr	r3, [pc, #72]	; (8001998 <MX_I2C1_Init+0x50>)
 800194e:	4a13      	ldr	r2, [pc, #76]	; (800199c <MX_I2C1_Init+0x54>)
 8001950:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001952:	4b11      	ldr	r3, [pc, #68]	; (8001998 <MX_I2C1_Init+0x50>)
 8001954:	4a12      	ldr	r2, [pc, #72]	; (80019a0 <MX_I2C1_Init+0x58>)
 8001956:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001958:	4b0f      	ldr	r3, [pc, #60]	; (8001998 <MX_I2C1_Init+0x50>)
 800195a:	2200      	movs	r2, #0
 800195c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800195e:	4b0e      	ldr	r3, [pc, #56]	; (8001998 <MX_I2C1_Init+0x50>)
 8001960:	2200      	movs	r2, #0
 8001962:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001964:	4b0c      	ldr	r3, [pc, #48]	; (8001998 <MX_I2C1_Init+0x50>)
 8001966:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800196a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800196c:	4b0a      	ldr	r3, [pc, #40]	; (8001998 <MX_I2C1_Init+0x50>)
 800196e:	2200      	movs	r2, #0
 8001970:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001972:	4b09      	ldr	r3, [pc, #36]	; (8001998 <MX_I2C1_Init+0x50>)
 8001974:	2200      	movs	r2, #0
 8001976:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001978:	4b07      	ldr	r3, [pc, #28]	; (8001998 <MX_I2C1_Init+0x50>)
 800197a:	2200      	movs	r2, #0
 800197c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800197e:	4b06      	ldr	r3, [pc, #24]	; (8001998 <MX_I2C1_Init+0x50>)
 8001980:	2200      	movs	r2, #0
 8001982:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001984:	4804      	ldr	r0, [pc, #16]	; (8001998 <MX_I2C1_Init+0x50>)
 8001986:	f004 ff0f 	bl	80067a8 <HAL_I2C_Init>
 800198a:	4603      	mov	r3, r0
 800198c:	2b00      	cmp	r3, #0
 800198e:	d001      	beq.n	8001994 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001990:	f001 ff72 	bl	8003878 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001994:	bf00      	nop
 8001996:	bd80      	pop	{r7, pc}
 8001998:	20000538 	.word	0x20000538
 800199c:	40005400 	.word	0x40005400
 80019a0:	00061a80 	.word	0x00061a80

080019a4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80019a8:	4b12      	ldr	r3, [pc, #72]	; (80019f4 <MX_I2C2_Init+0x50>)
 80019aa:	4a13      	ldr	r2, [pc, #76]	; (80019f8 <MX_I2C2_Init+0x54>)
 80019ac:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 80019ae:	4b11      	ldr	r3, [pc, #68]	; (80019f4 <MX_I2C2_Init+0x50>)
 80019b0:	4a12      	ldr	r2, [pc, #72]	; (80019fc <MX_I2C2_Init+0x58>)
 80019b2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80019b4:	4b0f      	ldr	r3, [pc, #60]	; (80019f4 <MX_I2C2_Init+0x50>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80019ba:	4b0e      	ldr	r3, [pc, #56]	; (80019f4 <MX_I2C2_Init+0x50>)
 80019bc:	2200      	movs	r2, #0
 80019be:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80019c0:	4b0c      	ldr	r3, [pc, #48]	; (80019f4 <MX_I2C2_Init+0x50>)
 80019c2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80019c6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80019c8:	4b0a      	ldr	r3, [pc, #40]	; (80019f4 <MX_I2C2_Init+0x50>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80019ce:	4b09      	ldr	r3, [pc, #36]	; (80019f4 <MX_I2C2_Init+0x50>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80019d4:	4b07      	ldr	r3, [pc, #28]	; (80019f4 <MX_I2C2_Init+0x50>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80019da:	4b06      	ldr	r3, [pc, #24]	; (80019f4 <MX_I2C2_Init+0x50>)
 80019dc:	2200      	movs	r2, #0
 80019de:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80019e0:	4804      	ldr	r0, [pc, #16]	; (80019f4 <MX_I2C2_Init+0x50>)
 80019e2:	f004 fee1 	bl	80067a8 <HAL_I2C_Init>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d001      	beq.n	80019f0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80019ec:	f001 ff44 	bl	8003878 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80019f0:	bf00      	nop
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	2000058c 	.word	0x2000058c
 80019f8:	40005800 	.word	0x40005800
 80019fc:	00061a80 	.word	0x00061a80

08001a00 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001a04:	4b12      	ldr	r3, [pc, #72]	; (8001a50 <MX_I2C3_Init+0x50>)
 8001a06:	4a13      	ldr	r2, [pc, #76]	; (8001a54 <MX_I2C3_Init+0x54>)
 8001a08:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 8001a0a:	4b11      	ldr	r3, [pc, #68]	; (8001a50 <MX_I2C3_Init+0x50>)
 8001a0c:	4a12      	ldr	r2, [pc, #72]	; (8001a58 <MX_I2C3_Init+0x58>)
 8001a0e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001a10:	4b0f      	ldr	r3, [pc, #60]	; (8001a50 <MX_I2C3_Init+0x50>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001a16:	4b0e      	ldr	r3, [pc, #56]	; (8001a50 <MX_I2C3_Init+0x50>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a1c:	4b0c      	ldr	r3, [pc, #48]	; (8001a50 <MX_I2C3_Init+0x50>)
 8001a1e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a22:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a24:	4b0a      	ldr	r3, [pc, #40]	; (8001a50 <MX_I2C3_Init+0x50>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001a2a:	4b09      	ldr	r3, [pc, #36]	; (8001a50 <MX_I2C3_Init+0x50>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a30:	4b07      	ldr	r3, [pc, #28]	; (8001a50 <MX_I2C3_Init+0x50>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a36:	4b06      	ldr	r3, [pc, #24]	; (8001a50 <MX_I2C3_Init+0x50>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001a3c:	4804      	ldr	r0, [pc, #16]	; (8001a50 <MX_I2C3_Init+0x50>)
 8001a3e:	f004 feb3 	bl	80067a8 <HAL_I2C_Init>
 8001a42:	4603      	mov	r3, r0
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d001      	beq.n	8001a4c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001a48:	f001 ff16 	bl	8003878 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001a4c:	bf00      	nop
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	200005e0 	.word	0x200005e0
 8001a54:	40005c00 	.word	0x40005c00
 8001a58:	00061a80 	.word	0x00061a80

08001a5c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001a60:	4b17      	ldr	r3, [pc, #92]	; (8001ac0 <MX_SPI2_Init+0x64>)
 8001a62:	4a18      	ldr	r2, [pc, #96]	; (8001ac4 <MX_SPI2_Init+0x68>)
 8001a64:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001a66:	4b16      	ldr	r3, [pc, #88]	; (8001ac0 <MX_SPI2_Init+0x64>)
 8001a68:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001a6c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001a6e:	4b14      	ldr	r3, [pc, #80]	; (8001ac0 <MX_SPI2_Init+0x64>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a74:	4b12      	ldr	r3, [pc, #72]	; (8001ac0 <MX_SPI2_Init+0x64>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a7a:	4b11      	ldr	r3, [pc, #68]	; (8001ac0 <MX_SPI2_Init+0x64>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a80:	4b0f      	ldr	r3, [pc, #60]	; (8001ac0 <MX_SPI2_Init+0x64>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001a86:	4b0e      	ldr	r3, [pc, #56]	; (8001ac0 <MX_SPI2_Init+0x64>)
 8001a88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a8c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001a8e:	4b0c      	ldr	r3, [pc, #48]	; (8001ac0 <MX_SPI2_Init+0x64>)
 8001a90:	2220      	movs	r2, #32
 8001a92:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a94:	4b0a      	ldr	r3, [pc, #40]	; (8001ac0 <MX_SPI2_Init+0x64>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a9a:	4b09      	ldr	r3, [pc, #36]	; (8001ac0 <MX_SPI2_Init+0x64>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001aa0:	4b07      	ldr	r3, [pc, #28]	; (8001ac0 <MX_SPI2_Init+0x64>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001aa6:	4b06      	ldr	r3, [pc, #24]	; (8001ac0 <MX_SPI2_Init+0x64>)
 8001aa8:	220a      	movs	r2, #10
 8001aaa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001aac:	4804      	ldr	r0, [pc, #16]	; (8001ac0 <MX_SPI2_Init+0x64>)
 8001aae:	f006 fad3 	bl	8008058 <HAL_SPI_Init>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d001      	beq.n	8001abc <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001ab8:	f001 fede 	bl	8003878 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001abc:	bf00      	nop
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	20000634 	.word	0x20000634
 8001ac4:	40003800 	.word	0x40003800

08001ac8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b08a      	sub	sp, #40	; 0x28
 8001acc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ace:	f107 0318 	add.w	r3, r7, #24
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	601a      	str	r2, [r3, #0]
 8001ad6:	605a      	str	r2, [r3, #4]
 8001ad8:	609a      	str	r2, [r3, #8]
 8001ada:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001adc:	f107 0310 	add.w	r3, r7, #16
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	601a      	str	r2, [r3, #0]
 8001ae4:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001ae6:	463b      	mov	r3, r7
 8001ae8:	2200      	movs	r2, #0
 8001aea:	601a      	str	r2, [r3, #0]
 8001aec:	605a      	str	r2, [r3, #4]
 8001aee:	609a      	str	r2, [r3, #8]
 8001af0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001af2:	4b2c      	ldr	r3, [pc, #176]	; (8001ba4 <MX_TIM2_Init+0xdc>)
 8001af4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001af8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 8001afa:	4b2a      	ldr	r3, [pc, #168]	; (8001ba4 <MX_TIM2_Init+0xdc>)
 8001afc:	2253      	movs	r2, #83	; 0x53
 8001afe:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b00:	4b28      	ldr	r3, [pc, #160]	; (8001ba4 <MX_TIM2_Init+0xdc>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8001b06:	4b27      	ldr	r3, [pc, #156]	; (8001ba4 <MX_TIM2_Init+0xdc>)
 8001b08:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001b0c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b0e:	4b25      	ldr	r3, [pc, #148]	; (8001ba4 <MX_TIM2_Init+0xdc>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b14:	4b23      	ldr	r3, [pc, #140]	; (8001ba4 <MX_TIM2_Init+0xdc>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001b1a:	4822      	ldr	r0, [pc, #136]	; (8001ba4 <MX_TIM2_Init+0xdc>)
 8001b1c:	f006 fedc 	bl	80088d8 <HAL_TIM_Base_Init>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d001      	beq.n	8001b2a <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 8001b26:	f001 fea7 	bl	8003878 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b2e:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001b30:	f107 0318 	add.w	r3, r7, #24
 8001b34:	4619      	mov	r1, r3
 8001b36:	481b      	ldr	r0, [pc, #108]	; (8001ba4 <MX_TIM2_Init+0xdc>)
 8001b38:	f007 fb70 	bl	800921c <HAL_TIM_ConfigClockSource>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d001      	beq.n	8001b46 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001b42:	f001 fe99 	bl	8003878 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001b46:	4817      	ldr	r0, [pc, #92]	; (8001ba4 <MX_TIM2_Init+0xdc>)
 8001b48:	f007 f8a8 	bl	8008c9c <HAL_TIM_IC_Init>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d001      	beq.n	8001b56 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001b52:	f001 fe91 	bl	8003878 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b56:	2300      	movs	r3, #0
 8001b58:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b5e:	f107 0310 	add.w	r3, r7, #16
 8001b62:	4619      	mov	r1, r3
 8001b64:	480f      	ldr	r0, [pc, #60]	; (8001ba4 <MX_TIM2_Init+0xdc>)
 8001b66:	f008 f991 	bl	8009e8c <HAL_TIMEx_MasterConfigSynchronization>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d001      	beq.n	8001b74 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8001b70:	f001 fe82 	bl	8003878 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001b74:	2300      	movs	r3, #0
 8001b76:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001b80:	2300      	movs	r3, #0
 8001b82:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001b84:	463b      	mov	r3, r7
 8001b86:	2200      	movs	r2, #0
 8001b88:	4619      	mov	r1, r3
 8001b8a:	4806      	ldr	r0, [pc, #24]	; (8001ba4 <MX_TIM2_Init+0xdc>)
 8001b8c:	f007 f9e7 	bl	8008f5e <HAL_TIM_IC_ConfigChannel>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d001      	beq.n	8001b9a <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 8001b96:	f001 fe6f 	bl	8003878 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001b9a:	bf00      	nop
 8001b9c:	3728      	adds	r7, #40	; 0x28
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	2000068c 	.word	0x2000068c

08001ba8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b092      	sub	sp, #72	; 0x48
 8001bac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bae:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	601a      	str	r2, [r3, #0]
 8001bb6:	605a      	str	r2, [r3, #4]
 8001bb8:	609a      	str	r2, [r3, #8]
 8001bba:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001bbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	601a      	str	r2, [r3, #0]
 8001bc4:	605a      	str	r2, [r3, #4]
 8001bc6:	609a      	str	r2, [r3, #8]
 8001bc8:	60da      	str	r2, [r3, #12]
 8001bca:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bcc:	f107 031c 	add.w	r3, r7, #28
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	601a      	str	r2, [r3, #0]
 8001bd4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001bd6:	463b      	mov	r3, r7
 8001bd8:	2200      	movs	r2, #0
 8001bda:	601a      	str	r2, [r3, #0]
 8001bdc:	605a      	str	r2, [r3, #4]
 8001bde:	609a      	str	r2, [r3, #8]
 8001be0:	60da      	str	r2, [r3, #12]
 8001be2:	611a      	str	r2, [r3, #16]
 8001be4:	615a      	str	r2, [r3, #20]
 8001be6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001be8:	4b44      	ldr	r3, [pc, #272]	; (8001cfc <MX_TIM3_Init+0x154>)
 8001bea:	4a45      	ldr	r2, [pc, #276]	; (8001d00 <MX_TIM3_Init+0x158>)
 8001bec:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7-1;
 8001bee:	4b43      	ldr	r3, [pc, #268]	; (8001cfc <MX_TIM3_Init+0x154>)
 8001bf0:	2206      	movs	r2, #6
 8001bf2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bf4:	4b41      	ldr	r3, [pc, #260]	; (8001cfc <MX_TIM3_Init+0x154>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8001bfa:	4b40      	ldr	r3, [pc, #256]	; (8001cfc <MX_TIM3_Init+0x154>)
 8001bfc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001c00:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c02:	4b3e      	ldr	r3, [pc, #248]	; (8001cfc <MX_TIM3_Init+0x154>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c08:	4b3c      	ldr	r3, [pc, #240]	; (8001cfc <MX_TIM3_Init+0x154>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001c0e:	483b      	ldr	r0, [pc, #236]	; (8001cfc <MX_TIM3_Init+0x154>)
 8001c10:	f006 fe62 	bl	80088d8 <HAL_TIM_Base_Init>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d001      	beq.n	8001c1e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001c1a:	f001 fe2d 	bl	8003878 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c22:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001c24:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001c28:	4619      	mov	r1, r3
 8001c2a:	4834      	ldr	r0, [pc, #208]	; (8001cfc <MX_TIM3_Init+0x154>)
 8001c2c:	f007 faf6 	bl	800921c <HAL_TIM_ConfigClockSource>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d001      	beq.n	8001c3a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001c36:	f001 fe1f 	bl	8003878 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001c3a:	4830      	ldr	r0, [pc, #192]	; (8001cfc <MX_TIM3_Init+0x154>)
 8001c3c:	f006 ff0c 	bl	8008a58 <HAL_TIM_PWM_Init>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d001      	beq.n	8001c4a <MX_TIM3_Init+0xa2>
  {
    Error_Handler();
 8001c46:	f001 fe17 	bl	8003878 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.InputTrigger = TIM_TS_ITR3;
 8001c4e:	2330      	movs	r3, #48	; 0x30
 8001c50:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8001c52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c56:	4619      	mov	r1, r3
 8001c58:	4828      	ldr	r0, [pc, #160]	; (8001cfc <MX_TIM3_Init+0x154>)
 8001c5a:	f007 fba6 	bl	80093aa <HAL_TIM_SlaveConfigSynchro>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d001      	beq.n	8001c68 <MX_TIM3_Init+0xc0>
  {
    Error_Handler();
 8001c64:	f001 fe08 	bl	8003878 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001c70:	f107 031c 	add.w	r3, r7, #28
 8001c74:	4619      	mov	r1, r3
 8001c76:	4821      	ldr	r0, [pc, #132]	; (8001cfc <MX_TIM3_Init+0x154>)
 8001c78:	f008 f908 	bl	8009e8c <HAL_TIMEx_MasterConfigSynchronization>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d001      	beq.n	8001c86 <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 8001c82:	f001 fdf9 	bl	8003878 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c86:	2360      	movs	r3, #96	; 0x60
 8001c88:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c92:	2300      	movs	r3, #0
 8001c94:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c96:	463b      	mov	r3, r7
 8001c98:	2200      	movs	r2, #0
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	4817      	ldr	r0, [pc, #92]	; (8001cfc <MX_TIM3_Init+0x154>)
 8001c9e:	f007 f9fb 	bl	8009098 <HAL_TIM_PWM_ConfigChannel>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d001      	beq.n	8001cac <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 8001ca8:	f001 fde6 	bl	8003878 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001cac:	463b      	mov	r3, r7
 8001cae:	2204      	movs	r2, #4
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	4812      	ldr	r0, [pc, #72]	; (8001cfc <MX_TIM3_Init+0x154>)
 8001cb4:	f007 f9f0 	bl	8009098 <HAL_TIM_PWM_ConfigChannel>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d001      	beq.n	8001cc2 <MX_TIM3_Init+0x11a>
  {
    Error_Handler();
 8001cbe:	f001 fddb 	bl	8003878 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001cc2:	463b      	mov	r3, r7
 8001cc4:	2208      	movs	r2, #8
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	480c      	ldr	r0, [pc, #48]	; (8001cfc <MX_TIM3_Init+0x154>)
 8001cca:	f007 f9e5 	bl	8009098 <HAL_TIM_PWM_ConfigChannel>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d001      	beq.n	8001cd8 <MX_TIM3_Init+0x130>
  {
    Error_Handler();
 8001cd4:	f001 fdd0 	bl	8003878 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001cd8:	463b      	mov	r3, r7
 8001cda:	220c      	movs	r2, #12
 8001cdc:	4619      	mov	r1, r3
 8001cde:	4807      	ldr	r0, [pc, #28]	; (8001cfc <MX_TIM3_Init+0x154>)
 8001ce0:	f007 f9da 	bl	8009098 <HAL_TIM_PWM_ConfigChannel>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d001      	beq.n	8001cee <MX_TIM3_Init+0x146>
  {
    Error_Handler();
 8001cea:	f001 fdc5 	bl	8003878 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001cee:	4803      	ldr	r0, [pc, #12]	; (8001cfc <MX_TIM3_Init+0x154>)
 8001cf0:	f002 f86e 	bl	8003dd0 <HAL_TIM_MspPostInit>

}
 8001cf4:	bf00      	nop
 8001cf6:	3748      	adds	r7, #72	; 0x48
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	200006d4 	.word	0x200006d4
 8001d00:	40000400 	.word	0x40000400

08001d04 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b08e      	sub	sp, #56	; 0x38
 8001d08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d0a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d0e:	2200      	movs	r2, #0
 8001d10:	601a      	str	r2, [r3, #0]
 8001d12:	605a      	str	r2, [r3, #4]
 8001d14:	609a      	str	r2, [r3, #8]
 8001d16:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d18:	f107 0320 	add.w	r3, r7, #32
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	601a      	str	r2, [r3, #0]
 8001d20:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d22:	1d3b      	adds	r3, r7, #4
 8001d24:	2200      	movs	r2, #0
 8001d26:	601a      	str	r2, [r3, #0]
 8001d28:	605a      	str	r2, [r3, #4]
 8001d2a:	609a      	str	r2, [r3, #8]
 8001d2c:	60da      	str	r2, [r3, #12]
 8001d2e:	611a      	str	r2, [r3, #16]
 8001d30:	615a      	str	r2, [r3, #20]
 8001d32:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001d34:	4b2b      	ldr	r3, [pc, #172]	; (8001de4 <MX_TIM4_Init+0xe0>)
 8001d36:	4a2c      	ldr	r2, [pc, #176]	; (8001de8 <MX_TIM4_Init+0xe4>)
 8001d38:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001d3a:	4b2a      	ldr	r3, [pc, #168]	; (8001de4 <MX_TIM4_Init+0xe0>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d40:	4b28      	ldr	r3, [pc, #160]	; (8001de4 <MX_TIM4_Init+0xe0>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001d46:	4b27      	ldr	r3, [pc, #156]	; (8001de4 <MX_TIM4_Init+0xe0>)
 8001d48:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d4c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d4e:	4b25      	ldr	r3, [pc, #148]	; (8001de4 <MX_TIM4_Init+0xe0>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d54:	4b23      	ldr	r3, [pc, #140]	; (8001de4 <MX_TIM4_Init+0xe0>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001d5a:	4822      	ldr	r0, [pc, #136]	; (8001de4 <MX_TIM4_Init+0xe0>)
 8001d5c:	f006 fdbc 	bl	80088d8 <HAL_TIM_Base_Init>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d001      	beq.n	8001d6a <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8001d66:	f001 fd87 	bl	8003878 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d6e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001d70:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d74:	4619      	mov	r1, r3
 8001d76:	481b      	ldr	r0, [pc, #108]	; (8001de4 <MX_TIM4_Init+0xe0>)
 8001d78:	f007 fa50 	bl	800921c <HAL_TIM_ConfigClockSource>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d001      	beq.n	8001d86 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8001d82:	f001 fd79 	bl	8003878 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001d86:	4817      	ldr	r0, [pc, #92]	; (8001de4 <MX_TIM4_Init+0xe0>)
 8001d88:	f006 fe66 	bl	8008a58 <HAL_TIM_PWM_Init>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d001      	beq.n	8001d96 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001d92:	f001 fd71 	bl	8003878 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d96:	2300      	movs	r3, #0
 8001d98:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001d9e:	f107 0320 	add.w	r3, r7, #32
 8001da2:	4619      	mov	r1, r3
 8001da4:	480f      	ldr	r0, [pc, #60]	; (8001de4 <MX_TIM4_Init+0xe0>)
 8001da6:	f008 f871 	bl	8009e8c <HAL_TIMEx_MasterConfigSynchronization>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d001      	beq.n	8001db4 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001db0:	f001 fd62 	bl	8003878 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001db4:	2360      	movs	r3, #96	; 0x60
 8001db6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001db8:	2300      	movs	r3, #0
 8001dba:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001dc4:	1d3b      	adds	r3, r7, #4
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	4619      	mov	r1, r3
 8001dca:	4806      	ldr	r0, [pc, #24]	; (8001de4 <MX_TIM4_Init+0xe0>)
 8001dcc:	f007 f964 	bl	8009098 <HAL_TIM_PWM_ConfigChannel>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d001      	beq.n	8001dda <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8001dd6:	f001 fd4f 	bl	8003878 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001dda:	bf00      	nop
 8001ddc:	3738      	adds	r7, #56	; 0x38
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	2000071c 	.word	0x2000071c
 8001de8:	40000800 	.word	0x40000800

08001dec <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b082      	sub	sp, #8
 8001df0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001df2:	463b      	mov	r3, r7
 8001df4:	2200      	movs	r2, #0
 8001df6:	601a      	str	r2, [r3, #0]
 8001df8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001dfa:	4b15      	ldr	r3, [pc, #84]	; (8001e50 <MX_TIM6_Init+0x64>)
 8001dfc:	4a15      	ldr	r2, [pc, #84]	; (8001e54 <MX_TIM6_Init+0x68>)
 8001dfe:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 84-1;
 8001e00:	4b13      	ldr	r3, [pc, #76]	; (8001e50 <MX_TIM6_Init+0x64>)
 8001e02:	2253      	movs	r2, #83	; 0x53
 8001e04:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e06:	4b12      	ldr	r3, [pc, #72]	; (8001e50 <MX_TIM6_Init+0x64>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65000;
 8001e0c:	4b10      	ldr	r3, [pc, #64]	; (8001e50 <MX_TIM6_Init+0x64>)
 8001e0e:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 8001e12:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e14:	4b0e      	ldr	r3, [pc, #56]	; (8001e50 <MX_TIM6_Init+0x64>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001e1a:	480d      	ldr	r0, [pc, #52]	; (8001e50 <MX_TIM6_Init+0x64>)
 8001e1c:	f006 fd5c 	bl	80088d8 <HAL_TIM_Base_Init>
 8001e20:	4603      	mov	r3, r0
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d001      	beq.n	8001e2a <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8001e26:	f001 fd27 	bl	8003878 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001e32:	463b      	mov	r3, r7
 8001e34:	4619      	mov	r1, r3
 8001e36:	4806      	ldr	r0, [pc, #24]	; (8001e50 <MX_TIM6_Init+0x64>)
 8001e38:	f008 f828 	bl	8009e8c <HAL_TIMEx_MasterConfigSynchronization>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d001      	beq.n	8001e46 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8001e42:	f001 fd19 	bl	8003878 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001e46:	bf00      	nop
 8001e48:	3708      	adds	r7, #8
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	20000764 	.word	0x20000764
 8001e54:	40001000 	.word	0x40001000

08001e58 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b082      	sub	sp, #8
 8001e5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e5e:	463b      	mov	r3, r7
 8001e60:	2200      	movs	r2, #0
 8001e62:	601a      	str	r2, [r3, #0]
 8001e64:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001e66:	4b15      	ldr	r3, [pc, #84]	; (8001ebc <MX_TIM7_Init+0x64>)
 8001e68:	4a15      	ldr	r2, [pc, #84]	; (8001ec0 <MX_TIM7_Init+0x68>)
 8001e6a:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 85-1;
 8001e6c:	4b13      	ldr	r3, [pc, #76]	; (8001ebc <MX_TIM7_Init+0x64>)
 8001e6e:	2254      	movs	r2, #84	; 0x54
 8001e70:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e72:	4b12      	ldr	r3, [pc, #72]	; (8001ebc <MX_TIM7_Init+0x64>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 10000-1;
 8001e78:	4b10      	ldr	r3, [pc, #64]	; (8001ebc <MX_TIM7_Init+0x64>)
 8001e7a:	f242 720f 	movw	r2, #9999	; 0x270f
 8001e7e:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e80:	4b0e      	ldr	r3, [pc, #56]	; (8001ebc <MX_TIM7_Init+0x64>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001e86:	480d      	ldr	r0, [pc, #52]	; (8001ebc <MX_TIM7_Init+0x64>)
 8001e88:	f006 fd26 	bl	80088d8 <HAL_TIM_Base_Init>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d001      	beq.n	8001e96 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8001e92:	f001 fcf1 	bl	8003878 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e96:	2300      	movs	r3, #0
 8001e98:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001e9e:	463b      	mov	r3, r7
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	4806      	ldr	r0, [pc, #24]	; (8001ebc <MX_TIM7_Init+0x64>)
 8001ea4:	f007 fff2 	bl	8009e8c <HAL_TIMEx_MasterConfigSynchronization>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d001      	beq.n	8001eb2 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8001eae:	f001 fce3 	bl	8003878 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001eb2:	bf00      	nop
 8001eb4:	3708      	adds	r7, #8
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	200007ac 	.word	0x200007ac
 8001ec0:	40001400 	.word	0x40001400

08001ec4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001ec8:	4b10      	ldr	r3, [pc, #64]	; (8001f0c <MX_USART1_UART_Init+0x48>)
 8001eca:	4a11      	ldr	r2, [pc, #68]	; (8001f10 <MX_USART1_UART_Init+0x4c>)
 8001ecc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 420000;
 8001ece:	4b0f      	ldr	r3, [pc, #60]	; (8001f0c <MX_USART1_UART_Init+0x48>)
 8001ed0:	4a10      	ldr	r2, [pc, #64]	; (8001f14 <MX_USART1_UART_Init+0x50>)
 8001ed2:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001ed4:	4b0d      	ldr	r3, [pc, #52]	; (8001f0c <MX_USART1_UART_Init+0x48>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001eda:	4b0c      	ldr	r3, [pc, #48]	; (8001f0c <MX_USART1_UART_Init+0x48>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001ee0:	4b0a      	ldr	r3, [pc, #40]	; (8001f0c <MX_USART1_UART_Init+0x48>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001ee6:	4b09      	ldr	r3, [pc, #36]	; (8001f0c <MX_USART1_UART_Init+0x48>)
 8001ee8:	220c      	movs	r2, #12
 8001eea:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001eec:	4b07      	ldr	r3, [pc, #28]	; (8001f0c <MX_USART1_UART_Init+0x48>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ef2:	4b06      	ldr	r3, [pc, #24]	; (8001f0c <MX_USART1_UART_Init+0x48>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001ef8:	4804      	ldr	r0, [pc, #16]	; (8001f0c <MX_USART1_UART_Init+0x48>)
 8001efa:	f008 f857 	bl	8009fac <HAL_UART_Init>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d001      	beq.n	8001f08 <MX_USART1_UART_Init+0x44>
  {
    Error_Handler();
 8001f04:	f001 fcb8 	bl	8003878 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001f08:	bf00      	nop
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	200007f4 	.word	0x200007f4
 8001f10:	40011000 	.word	0x40011000
 8001f14:	000668a0 	.word	0x000668a0

08001f18 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001f1c:	4b11      	ldr	r3, [pc, #68]	; (8001f64 <MX_USART2_UART_Init+0x4c>)
 8001f1e:	4a12      	ldr	r2, [pc, #72]	; (8001f68 <MX_USART2_UART_Init+0x50>)
 8001f20:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001f22:	4b10      	ldr	r3, [pc, #64]	; (8001f64 <MX_USART2_UART_Init+0x4c>)
 8001f24:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f28:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001f2a:	4b0e      	ldr	r3, [pc, #56]	; (8001f64 <MX_USART2_UART_Init+0x4c>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001f30:	4b0c      	ldr	r3, [pc, #48]	; (8001f64 <MX_USART2_UART_Init+0x4c>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001f36:	4b0b      	ldr	r3, [pc, #44]	; (8001f64 <MX_USART2_UART_Init+0x4c>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001f3c:	4b09      	ldr	r3, [pc, #36]	; (8001f64 <MX_USART2_UART_Init+0x4c>)
 8001f3e:	220c      	movs	r2, #12
 8001f40:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f42:	4b08      	ldr	r3, [pc, #32]	; (8001f64 <MX_USART2_UART_Init+0x4c>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f48:	4b06      	ldr	r3, [pc, #24]	; (8001f64 <MX_USART2_UART_Init+0x4c>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001f4e:	4805      	ldr	r0, [pc, #20]	; (8001f64 <MX_USART2_UART_Init+0x4c>)
 8001f50:	f008 f82c 	bl	8009fac <HAL_UART_Init>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d001      	beq.n	8001f5e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001f5a:	f001 fc8d 	bl	8003878 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001f5e:	bf00      	nop
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	20000838 	.word	0x20000838
 8001f68:	40004400 	.word	0x40004400

08001f6c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001f70:	4b11      	ldr	r3, [pc, #68]	; (8001fb8 <MX_USART3_UART_Init+0x4c>)
 8001f72:	4a12      	ldr	r2, [pc, #72]	; (8001fbc <MX_USART3_UART_Init+0x50>)
 8001f74:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001f76:	4b10      	ldr	r3, [pc, #64]	; (8001fb8 <MX_USART3_UART_Init+0x4c>)
 8001f78:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f7c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001f7e:	4b0e      	ldr	r3, [pc, #56]	; (8001fb8 <MX_USART3_UART_Init+0x4c>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001f84:	4b0c      	ldr	r3, [pc, #48]	; (8001fb8 <MX_USART3_UART_Init+0x4c>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001f8a:	4b0b      	ldr	r3, [pc, #44]	; (8001fb8 <MX_USART3_UART_Init+0x4c>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001f90:	4b09      	ldr	r3, [pc, #36]	; (8001fb8 <MX_USART3_UART_Init+0x4c>)
 8001f92:	220c      	movs	r2, #12
 8001f94:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f96:	4b08      	ldr	r3, [pc, #32]	; (8001fb8 <MX_USART3_UART_Init+0x4c>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f9c:	4b06      	ldr	r3, [pc, #24]	; (8001fb8 <MX_USART3_UART_Init+0x4c>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001fa2:	4805      	ldr	r0, [pc, #20]	; (8001fb8 <MX_USART3_UART_Init+0x4c>)
 8001fa4:	f008 f802 	bl	8009fac <HAL_UART_Init>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d001      	beq.n	8001fb2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001fae:	f001 fc63 	bl	8003878 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001fb2:	bf00      	nop
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	2000087c 	.word	0x2000087c
 8001fbc:	40004800 	.word	0x40004800

08001fc0 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001fc4:	4b11      	ldr	r3, [pc, #68]	; (800200c <MX_USART6_UART_Init+0x4c>)
 8001fc6:	4a12      	ldr	r2, [pc, #72]	; (8002010 <MX_USART6_UART_Init+0x50>)
 8001fc8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001fca:	4b10      	ldr	r3, [pc, #64]	; (800200c <MX_USART6_UART_Init+0x4c>)
 8001fcc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001fd0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001fd2:	4b0e      	ldr	r3, [pc, #56]	; (800200c <MX_USART6_UART_Init+0x4c>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001fd8:	4b0c      	ldr	r3, [pc, #48]	; (800200c <MX_USART6_UART_Init+0x4c>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001fde:	4b0b      	ldr	r3, [pc, #44]	; (800200c <MX_USART6_UART_Init+0x4c>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001fe4:	4b09      	ldr	r3, [pc, #36]	; (800200c <MX_USART6_UART_Init+0x4c>)
 8001fe6:	220c      	movs	r2, #12
 8001fe8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fea:	4b08      	ldr	r3, [pc, #32]	; (800200c <MX_USART6_UART_Init+0x4c>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ff0:	4b06      	ldr	r3, [pc, #24]	; (800200c <MX_USART6_UART_Init+0x4c>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001ff6:	4805      	ldr	r0, [pc, #20]	; (800200c <MX_USART6_UART_Init+0x4c>)
 8001ff8:	f007 ffd8 	bl	8009fac <HAL_UART_Init>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d001      	beq.n	8002006 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8002002:	f001 fc39 	bl	8003878 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002006:	bf00      	nop
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	200008c0 	.word	0x200008c0
 8002010:	40011400 	.word	0x40011400

08002014 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b082      	sub	sp, #8
 8002018:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800201a:	2300      	movs	r3, #0
 800201c:	607b      	str	r3, [r7, #4]
 800201e:	4b0c      	ldr	r3, [pc, #48]	; (8002050 <MX_DMA_Init+0x3c>)
 8002020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002022:	4a0b      	ldr	r2, [pc, #44]	; (8002050 <MX_DMA_Init+0x3c>)
 8002024:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002028:	6313      	str	r3, [r2, #48]	; 0x30
 800202a:	4b09      	ldr	r3, [pc, #36]	; (8002050 <MX_DMA_Init+0x3c>)
 800202c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800202e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002032:	607b      	str	r3, [r7, #4]
 8002034:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8002036:	2200      	movs	r2, #0
 8002038:	2105      	movs	r1, #5
 800203a:	203a      	movs	r0, #58	; 0x3a
 800203c:	f003 fd93 	bl	8005b66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8002040:	203a      	movs	r0, #58	; 0x3a
 8002042:	f003 fdac 	bl	8005b9e <HAL_NVIC_EnableIRQ>

}
 8002046:	bf00      	nop
 8002048:	3708      	adds	r7, #8
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	40023800 	.word	0x40023800

08002054 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b08a      	sub	sp, #40	; 0x28
 8002058:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800205a:	f107 0314 	add.w	r3, r7, #20
 800205e:	2200      	movs	r2, #0
 8002060:	601a      	str	r2, [r3, #0]
 8002062:	605a      	str	r2, [r3, #4]
 8002064:	609a      	str	r2, [r3, #8]
 8002066:	60da      	str	r2, [r3, #12]
 8002068:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800206a:	2300      	movs	r3, #0
 800206c:	613b      	str	r3, [r7, #16]
 800206e:	4b6d      	ldr	r3, [pc, #436]	; (8002224 <MX_GPIO_Init+0x1d0>)
 8002070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002072:	4a6c      	ldr	r2, [pc, #432]	; (8002224 <MX_GPIO_Init+0x1d0>)
 8002074:	f043 0304 	orr.w	r3, r3, #4
 8002078:	6313      	str	r3, [r2, #48]	; 0x30
 800207a:	4b6a      	ldr	r3, [pc, #424]	; (8002224 <MX_GPIO_Init+0x1d0>)
 800207c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800207e:	f003 0304 	and.w	r3, r3, #4
 8002082:	613b      	str	r3, [r7, #16]
 8002084:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002086:	2300      	movs	r3, #0
 8002088:	60fb      	str	r3, [r7, #12]
 800208a:	4b66      	ldr	r3, [pc, #408]	; (8002224 <MX_GPIO_Init+0x1d0>)
 800208c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800208e:	4a65      	ldr	r2, [pc, #404]	; (8002224 <MX_GPIO_Init+0x1d0>)
 8002090:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002094:	6313      	str	r3, [r2, #48]	; 0x30
 8002096:	4b63      	ldr	r3, [pc, #396]	; (8002224 <MX_GPIO_Init+0x1d0>)
 8002098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800209a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800209e:	60fb      	str	r3, [r7, #12]
 80020a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020a2:	2300      	movs	r3, #0
 80020a4:	60bb      	str	r3, [r7, #8]
 80020a6:	4b5f      	ldr	r3, [pc, #380]	; (8002224 <MX_GPIO_Init+0x1d0>)
 80020a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020aa:	4a5e      	ldr	r2, [pc, #376]	; (8002224 <MX_GPIO_Init+0x1d0>)
 80020ac:	f043 0301 	orr.w	r3, r3, #1
 80020b0:	6313      	str	r3, [r2, #48]	; 0x30
 80020b2:	4b5c      	ldr	r3, [pc, #368]	; (8002224 <MX_GPIO_Init+0x1d0>)
 80020b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b6:	f003 0301 	and.w	r3, r3, #1
 80020ba:	60bb      	str	r3, [r7, #8]
 80020bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020be:	2300      	movs	r3, #0
 80020c0:	607b      	str	r3, [r7, #4]
 80020c2:	4b58      	ldr	r3, [pc, #352]	; (8002224 <MX_GPIO_Init+0x1d0>)
 80020c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c6:	4a57      	ldr	r2, [pc, #348]	; (8002224 <MX_GPIO_Init+0x1d0>)
 80020c8:	f043 0302 	orr.w	r3, r3, #2
 80020cc:	6313      	str	r3, [r2, #48]	; 0x30
 80020ce:	4b55      	ldr	r3, [pc, #340]	; (8002224 <MX_GPIO_Init+0x1d0>)
 80020d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d2:	f003 0302 	and.w	r3, r3, #2
 80020d6:	607b      	str	r3, [r7, #4]
 80020d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80020da:	2300      	movs	r3, #0
 80020dc:	603b      	str	r3, [r7, #0]
 80020de:	4b51      	ldr	r3, [pc, #324]	; (8002224 <MX_GPIO_Init+0x1d0>)
 80020e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e2:	4a50      	ldr	r2, [pc, #320]	; (8002224 <MX_GPIO_Init+0x1d0>)
 80020e4:	f043 0308 	orr.w	r3, r3, #8
 80020e8:	6313      	str	r3, [r2, #48]	; 0x30
 80020ea:	4b4e      	ldr	r3, [pc, #312]	; (8002224 <MX_GPIO_Init+0x1d0>)
 80020ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ee:	f003 0308 	and.w	r3, r3, #8
 80020f2:	603b      	str	r3, [r7, #0]
 80020f4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TRIG_Pin|GNSS_RST_Pin, GPIO_PIN_RESET);
 80020f6:	2200      	movs	r2, #0
 80020f8:	f248 0102 	movw	r1, #32770	; 0x8002
 80020fc:	484a      	ldr	r0, [pc, #296]	; (8002228 <MX_GPIO_Init+0x1d4>)
 80020fe:	f004 fb07 	bl	8006710 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CS_GYRO_Pin|GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 8002102:	2200      	movs	r2, #0
 8002104:	f241 0118 	movw	r1, #4120	; 0x1018
 8002108:	4848      	ldr	r0, [pc, #288]	; (800222c <MX_GPIO_Init+0x1d8>)
 800210a:	f004 fb01 	bl	8006710 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_ACC_GPIO_Port, CS_ACC_Pin, GPIO_PIN_RESET);
 800210e:	2200      	movs	r2, #0
 8002110:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002114:	4846      	ldr	r0, [pc, #280]	; (8002230 <MX_GPIO_Init+0x1dc>)
 8002116:	f004 fafb 	bl	8006710 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 800211a:	2200      	movs	r2, #0
 800211c:	2104      	movs	r1, #4
 800211e:	4845      	ldr	r0, [pc, #276]	; (8002234 <MX_GPIO_Init+0x1e0>)
 8002120:	f004 faf6 	bl	8006710 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : IT_MAGN_Pin BUTTON_Pin */
  GPIO_InitStruct.Pin = IT_MAGN_Pin|BUTTON_Pin;
 8002124:	f242 0301 	movw	r3, #8193	; 0x2001
 8002128:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800212a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800212e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002130:	2300      	movs	r3, #0
 8002132:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002134:	f107 0314 	add.w	r3, r7, #20
 8002138:	4619      	mov	r1, r3
 800213a:	483d      	ldr	r0, [pc, #244]	; (8002230 <MX_GPIO_Init+0x1dc>)
 800213c:	f004 f94c 	bl	80063d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : TRIG_Pin GNSS_RST_Pin */
  GPIO_InitStruct.Pin = TRIG_Pin|GNSS_RST_Pin;
 8002140:	f248 0302 	movw	r3, #32770	; 0x8002
 8002144:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002146:	2301      	movs	r3, #1
 8002148:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800214a:	2300      	movs	r3, #0
 800214c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800214e:	2300      	movs	r3, #0
 8002150:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002152:	f107 0314 	add.w	r3, r7, #20
 8002156:	4619      	mov	r1, r3
 8002158:	4833      	ldr	r0, [pc, #204]	; (8002228 <MX_GPIO_Init+0x1d4>)
 800215a:	f004 f93d 	bl	80063d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : IT_PRESS_Pin */
  GPIO_InitStruct.Pin = IT_PRESS_Pin;
 800215e:	2304      	movs	r3, #4
 8002160:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002162:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002166:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002168:	2300      	movs	r3, #0
 800216a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IT_PRESS_GPIO_Port, &GPIO_InitStruct);
 800216c:	f107 0314 	add.w	r3, r7, #20
 8002170:	4619      	mov	r1, r3
 8002172:	482e      	ldr	r0, [pc, #184]	; (800222c <MX_GPIO_Init+0x1d8>)
 8002174:	f004 f930 	bl	80063d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_GYRO_Pin PB3 PB4 */
  GPIO_InitStruct.Pin = CS_GYRO_Pin|GPIO_PIN_3|GPIO_PIN_4;
 8002178:	f241 0318 	movw	r3, #4120	; 0x1018
 800217c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800217e:	2301      	movs	r3, #1
 8002180:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002182:	2300      	movs	r3, #0
 8002184:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002186:	2300      	movs	r3, #0
 8002188:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800218a:	f107 0314 	add.w	r3, r7, #20
 800218e:	4619      	mov	r1, r3
 8002190:	4826      	ldr	r0, [pc, #152]	; (800222c <MX_GPIO_Init+0x1d8>)
 8002192:	f004 f921 	bl	80063d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_ACC_Pin */
  GPIO_InitStruct.Pin = CS_ACC_Pin;
 8002196:	f44f 7380 	mov.w	r3, #256	; 0x100
 800219a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800219c:	2301      	movs	r3, #1
 800219e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a0:	2300      	movs	r3, #0
 80021a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021a4:	2300      	movs	r3, #0
 80021a6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CS_ACC_GPIO_Port, &GPIO_InitStruct);
 80021a8:	f107 0314 	add.w	r3, r7, #20
 80021ac:	4619      	mov	r1, r3
 80021ae:	4820      	ldr	r0, [pc, #128]	; (8002230 <MX_GPIO_Init+0x1dc>)
 80021b0:	f004 f912 	bl	80063d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : IT_GYRO_Pin IT_ACC_Pin */
  GPIO_InitStruct.Pin = IT_GYRO_Pin|IT_ACC_Pin;
 80021b4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80021b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80021ba:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80021be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c0:	2300      	movs	r3, #0
 80021c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021c4:	f107 0314 	add.w	r3, r7, #20
 80021c8:	4619      	mov	r1, r3
 80021ca:	4817      	ldr	r0, [pc, #92]	; (8002228 <MX_GPIO_Init+0x1d4>)
 80021cc:	f004 f904 	bl	80063d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80021d0:	2304      	movs	r3, #4
 80021d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021d4:	2301      	movs	r3, #1
 80021d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d8:	2300      	movs	r3, #0
 80021da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021dc:	2300      	movs	r3, #0
 80021de:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80021e0:	f107 0314 	add.w	r3, r7, #20
 80021e4:	4619      	mov	r1, r3
 80021e6:	4813      	ldr	r0, [pc, #76]	; (8002234 <MX_GPIO_Init+0x1e0>)
 80021e8:	f004 f8f6 	bl	80063d8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 80021ec:	2200      	movs	r2, #0
 80021ee:	2105      	movs	r1, #5
 80021f0:	2006      	movs	r0, #6
 80021f2:	f003 fcb8 	bl	8005b66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80021f6:	2006      	movs	r0, #6
 80021f8:	f003 fcd1 	bl	8005b9e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 80021fc:	2200      	movs	r2, #0
 80021fe:	2105      	movs	r1, #5
 8002200:	2008      	movs	r0, #8
 8002202:	f003 fcb0 	bl	8005b66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8002206:	2008      	movs	r0, #8
 8002208:	f003 fcc9 	bl	8005b9e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800220c:	2200      	movs	r2, #0
 800220e:	2105      	movs	r1, #5
 8002210:	2028      	movs	r0, #40	; 0x28
 8002212:	f003 fca8 	bl	8005b66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002216:	2028      	movs	r0, #40	; 0x28
 8002218:	f003 fcc1 	bl	8005b9e <HAL_NVIC_EnableIRQ>

}
 800221c:	bf00      	nop
 800221e:	3728      	adds	r7, #40	; 0x28
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}
 8002224:	40023800 	.word	0x40023800
 8002228:	40020000 	.word	0x40020000
 800222c:	40020400 	.word	0x40020400
 8002230:	40020800 	.word	0x40020800
 8002234:	40020c00 	.word	0x40020c00

08002238 <HAL_GPIO_EXTI_Callback>:

    return reversed;
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002238:	b480      	push	{r7}
 800223a:	b083      	sub	sp, #12
 800223c:	af00      	add	r7, sp, #0
 800223e:	4603      	mov	r3, r0
 8002240:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == BUTTON_Pin) {
 8002242:	88fb      	ldrh	r3, [r7, #6]
 8002244:	2b01      	cmp	r3, #1
 8002246:	d11c      	bne.n	8002282 <HAL_GPIO_EXTI_Callback+0x4a>
		if(state == 4){state = 5;}
 8002248:	4b1a      	ldr	r3, [pc, #104]	; (80022b4 <HAL_GPIO_EXTI_Callback+0x7c>)
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	2b04      	cmp	r3, #4
 800224e:	d102      	bne.n	8002256 <HAL_GPIO_EXTI_Callback+0x1e>
 8002250:	4b18      	ldr	r3, [pc, #96]	; (80022b4 <HAL_GPIO_EXTI_Callback+0x7c>)
 8002252:	2205      	movs	r2, #5
 8002254:	701a      	strb	r2, [r3, #0]
		if(state == 3){state = 4;}
 8002256:	4b17      	ldr	r3, [pc, #92]	; (80022b4 <HAL_GPIO_EXTI_Callback+0x7c>)
 8002258:	781b      	ldrb	r3, [r3, #0]
 800225a:	2b03      	cmp	r3, #3
 800225c:	d102      	bne.n	8002264 <HAL_GPIO_EXTI_Callback+0x2c>
 800225e:	4b15      	ldr	r3, [pc, #84]	; (80022b4 <HAL_GPIO_EXTI_Callback+0x7c>)
 8002260:	2204      	movs	r2, #4
 8002262:	701a      	strb	r2, [r3, #0]
		if(state == 2){state = 3;}
 8002264:	4b13      	ldr	r3, [pc, #76]	; (80022b4 <HAL_GPIO_EXTI_Callback+0x7c>)
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	2b02      	cmp	r3, #2
 800226a:	d102      	bne.n	8002272 <HAL_GPIO_EXTI_Callback+0x3a>
 800226c:	4b11      	ldr	r3, [pc, #68]	; (80022b4 <HAL_GPIO_EXTI_Callback+0x7c>)
 800226e:	2203      	movs	r2, #3
 8002270:	701a      	strb	r2, [r3, #0]
		if(state == 1){state = 2;}
 8002272:	4b10      	ldr	r3, [pc, #64]	; (80022b4 <HAL_GPIO_EXTI_Callback+0x7c>)
 8002274:	781b      	ldrb	r3, [r3, #0]
 8002276:	2b01      	cmp	r3, #1
 8002278:	d104      	bne.n	8002284 <HAL_GPIO_EXTI_Callback+0x4c>
 800227a:	4b0e      	ldr	r3, [pc, #56]	; (80022b4 <HAL_GPIO_EXTI_Callback+0x7c>)
 800227c:	2202      	movs	r2, #2
 800227e:	701a      	strb	r2, [r3, #0]
 8002280:	e000      	b.n	8002284 <HAL_GPIO_EXTI_Callback+0x4c>
	  } else {
	      __NOP();
 8002282:	bf00      	nop
	  }

	if(GPIO_Pin == IT_ACC_Pin) {
 8002284:	88fb      	ldrh	r3, [r7, #6]
 8002286:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800228a:	d103      	bne.n	8002294 <HAL_GPIO_EXTI_Callback+0x5c>

	 readstart = 1;
 800228c:	4b0a      	ldr	r3, [pc, #40]	; (80022b8 <HAL_GPIO_EXTI_Callback+0x80>)
 800228e:	2201      	movs	r2, #1
 8002290:	701a      	strb	r2, [r3, #0]
 8002292:	e000      	b.n	8002296 <HAL_GPIO_EXTI_Callback+0x5e>
  } else {
      __NOP();
 8002294:	bf00      	nop
  }
  if(GPIO_Pin == IT_MAGN_Pin) {
 8002296:	88fb      	ldrh	r3, [r7, #6]
 8002298:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800229c:	d103      	bne.n	80022a6 <HAL_GPIO_EXTI_Callback+0x6e>
  	 //HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);

  	 billent = 1;
 800229e:	4b07      	ldr	r3, [pc, #28]	; (80022bc <HAL_GPIO_EXTI_Callback+0x84>)
 80022a0:	2201      	movs	r2, #1
 80022a2:	701a      	strb	r2, [r3, #0]
    } else {
        __NOP();
    }
}
 80022a4:	e000      	b.n	80022a8 <HAL_GPIO_EXTI_Callback+0x70>
        __NOP();
 80022a6:	bf00      	nop
}
 80022a8:	bf00      	nop
 80022aa:	370c      	adds	r7, #12
 80022ac:	46bd      	mov	sp, r7
 80022ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b2:	4770      	bx	lr
 80022b4:	20000009 	.word	0x20000009
 80022b8:	20000008 	.word	0x20000008
 80022bc:	20000a0c 	.word	0x20000a0c

080022c0 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b082      	sub	sp, #8
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
	if (htim == &htim2 )
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	4a47      	ldr	r2, [pc, #284]	; (80023e8 <HAL_TIM_IC_CaptureCallback+0x128>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	f040 8083 	bne.w	80023d8 <HAL_TIM_IC_CaptureCallback+0x118>
	  {
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);
 80022d2:	2110      	movs	r1, #16
 80022d4:	4845      	ldr	r0, [pc, #276]	; (80023ec <HAL_TIM_IC_CaptureCallback+0x12c>)
 80022d6:	f004 fa34 	bl	8006742 <HAL_GPIO_TogglePin>
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // if the interrupt source is channel1
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	7f1b      	ldrb	r3, [r3, #28]
 80022de:	2b01      	cmp	r3, #1
 80022e0:	d17a      	bne.n	80023d8 <HAL_TIM_IC_CaptureCallback+0x118>
		{
			if (Is_First_Captured==0) // if the first value is not captured
 80022e2:	4b43      	ldr	r3, [pc, #268]	; (80023f0 <HAL_TIM_IC_CaptureCallback+0x130>)
 80022e4:	781b      	ldrb	r3, [r3, #0]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d11a      	bne.n	8002320 <HAL_TIM_IC_CaptureCallback+0x60>
			{
				IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 80022ea:	2100      	movs	r1, #0
 80022ec:	6878      	ldr	r0, [r7, #4]
 80022ee:	f007 f89f 	bl	8009430 <HAL_TIM_ReadCapturedValue>
 80022f2:	4603      	mov	r3, r0
 80022f4:	4a3f      	ldr	r2, [pc, #252]	; (80023f4 <HAL_TIM_IC_CaptureCallback+0x134>)
 80022f6:	6013      	str	r3, [r2, #0]
				Is_First_Captured = 1;  // set the first captured as true
 80022f8:	4b3d      	ldr	r3, [pc, #244]	; (80023f0 <HAL_TIM_IC_CaptureCallback+0x130>)
 80022fa:	2201      	movs	r2, #1
 80022fc:	701a      	strb	r2, [r3, #0]
				// Now change the polarity to falling edge
				__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	6a1a      	ldr	r2, [r3, #32]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f022 020a 	bic.w	r2, r2, #10
 800230c:	621a      	str	r2, [r3, #32]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	6a1a      	ldr	r2, [r3, #32]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f042 0202 	orr.w	r2, r2, #2
 800231c:	621a      	str	r2, [r3, #32]
				__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
				//__HAL_TIM_DISABLE_IT(&htim2, TIM_IT_CC1);
			}
		}
	  }
}
 800231e:	e05b      	b.n	80023d8 <HAL_TIM_IC_CaptureCallback+0x118>
			else if (Is_First_Captured==1)   // if the first is already captured
 8002320:	4b33      	ldr	r3, [pc, #204]	; (80023f0 <HAL_TIM_IC_CaptureCallback+0x130>)
 8002322:	781b      	ldrb	r3, [r3, #0]
 8002324:	2b01      	cmp	r3, #1
 8002326:	d157      	bne.n	80023d8 <HAL_TIM_IC_CaptureCallback+0x118>
				IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
 8002328:	2100      	movs	r1, #0
 800232a:	6878      	ldr	r0, [r7, #4]
 800232c:	f007 f880 	bl	8009430 <HAL_TIM_ReadCapturedValue>
 8002330:	4603      	mov	r3, r0
 8002332:	4a31      	ldr	r2, [pc, #196]	; (80023f8 <HAL_TIM_IC_CaptureCallback+0x138>)
 8002334:	6013      	str	r3, [r2, #0]
				__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	2200      	movs	r2, #0
 800233c:	625a      	str	r2, [r3, #36]	; 0x24
				if (IC_Val2 > IC_Val1)
 800233e:	4b2e      	ldr	r3, [pc, #184]	; (80023f8 <HAL_TIM_IC_CaptureCallback+0x138>)
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	4b2c      	ldr	r3, [pc, #176]	; (80023f4 <HAL_TIM_IC_CaptureCallback+0x134>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	429a      	cmp	r2, r3
 8002348:	d907      	bls.n	800235a <HAL_TIM_IC_CaptureCallback+0x9a>
					Difference = IC_Val2-IC_Val1;
 800234a:	4b2b      	ldr	r3, [pc, #172]	; (80023f8 <HAL_TIM_IC_CaptureCallback+0x138>)
 800234c:	681a      	ldr	r2, [r3, #0]
 800234e:	4b29      	ldr	r3, [pc, #164]	; (80023f4 <HAL_TIM_IC_CaptureCallback+0x134>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	1ad3      	subs	r3, r2, r3
 8002354:	4a29      	ldr	r2, [pc, #164]	; (80023fc <HAL_TIM_IC_CaptureCallback+0x13c>)
 8002356:	6013      	str	r3, [r2, #0]
 8002358:	e00f      	b.n	800237a <HAL_TIM_IC_CaptureCallback+0xba>
				else if (IC_Val1 > IC_Val2)
 800235a:	4b26      	ldr	r3, [pc, #152]	; (80023f4 <HAL_TIM_IC_CaptureCallback+0x134>)
 800235c:	681a      	ldr	r2, [r3, #0]
 800235e:	4b26      	ldr	r3, [pc, #152]	; (80023f8 <HAL_TIM_IC_CaptureCallback+0x138>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	429a      	cmp	r2, r3
 8002364:	d909      	bls.n	800237a <HAL_TIM_IC_CaptureCallback+0xba>
					Difference = (0xffff - IC_Val1) + IC_Val2;
 8002366:	4b24      	ldr	r3, [pc, #144]	; (80023f8 <HAL_TIM_IC_CaptureCallback+0x138>)
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	4b22      	ldr	r3, [pc, #136]	; (80023f4 <HAL_TIM_IC_CaptureCallback+0x134>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	1ad3      	subs	r3, r2, r3
 8002370:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8002374:	33ff      	adds	r3, #255	; 0xff
 8002376:	4a21      	ldr	r2, [pc, #132]	; (80023fc <HAL_TIM_IC_CaptureCallback+0x13c>)
 8002378:	6013      	str	r3, [r2, #0]
				Distance = Difference * .34/2;
 800237a:	4b20      	ldr	r3, [pc, #128]	; (80023fc <HAL_TIM_IC_CaptureCallback+0x13c>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4618      	mov	r0, r3
 8002380:	f7fe f8c0 	bl	8000504 <__aeabi_ui2d>
 8002384:	a316      	add	r3, pc, #88	; (adr r3, 80023e0 <HAL_TIM_IC_CaptureCallback+0x120>)
 8002386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800238a:	f7fe f935 	bl	80005f8 <__aeabi_dmul>
 800238e:	4602      	mov	r2, r0
 8002390:	460b      	mov	r3, r1
 8002392:	4610      	mov	r0, r2
 8002394:	4619      	mov	r1, r3
 8002396:	f04f 0200 	mov.w	r2, #0
 800239a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800239e:	f7fe fa55 	bl	800084c <__aeabi_ddiv>
 80023a2:	4602      	mov	r2, r0
 80023a4:	460b      	mov	r3, r1
 80023a6:	4610      	mov	r0, r2
 80023a8:	4619      	mov	r1, r3
 80023aa:	f7fe fbfd 	bl	8000ba8 <__aeabi_d2uiz>
 80023ae:	4603      	mov	r3, r0
 80023b0:	b2da      	uxtb	r2, r3
 80023b2:	4b13      	ldr	r3, [pc, #76]	; (8002400 <HAL_TIM_IC_CaptureCallback+0x140>)
 80023b4:	701a      	strb	r2, [r3, #0]
				Is_First_Captured = 0; // set it back to false
 80023b6:	4b0e      	ldr	r3, [pc, #56]	; (80023f0 <HAL_TIM_IC_CaptureCallback+0x130>)
 80023b8:	2200      	movs	r2, #0
 80023ba:	701a      	strb	r2, [r3, #0]
				__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	6a1a      	ldr	r2, [r3, #32]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f022 020a 	bic.w	r2, r2, #10
 80023ca:	621a      	str	r2, [r3, #32]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	6a12      	ldr	r2, [r2, #32]
 80023d6:	621a      	str	r2, [r3, #32]
}
 80023d8:	bf00      	nop
 80023da:	3708      	adds	r7, #8
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	5c28f5c3 	.word	0x5c28f5c3
 80023e4:	3fd5c28f 	.word	0x3fd5c28f
 80023e8:	2000068c 	.word	0x2000068c
 80023ec:	40020400 	.word	0x40020400
 80023f0:	20000b10 	.word	0x20000b10
 80023f4:	20000b04 	.word	0x20000b04
 80023f8:	20000b08 	.word	0x20000b08
 80023fc:	20000b0c 	.word	0x20000b0c
 8002400:	20000b11 	.word	0x20000b11

08002404 <HAL_TIM_PeriodElapsedCallback>:

// Callback: timer has rolled over
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002404:	b480      	push	{r7}
 8002406:	b083      	sub	sp, #12
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  // Check which version of the timer triggered this callback and toggle LED
  if (htim == &htim6 )
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	4a0b      	ldr	r2, [pc, #44]	; (800243c <HAL_TIM_PeriodElapsedCallback+0x38>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d10d      	bne.n	8002430 <HAL_TIM_PeriodElapsedCallback+0x2c>
  {
	  if(timerse == 1){timerse =0;}
 8002414:	4b0a      	ldr	r3, [pc, #40]	; (8002440 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8002416:	781b      	ldrb	r3, [r3, #0]
 8002418:	2b01      	cmp	r3, #1
 800241a:	d102      	bne.n	8002422 <HAL_TIM_PeriodElapsedCallback+0x1e>
 800241c:	4b08      	ldr	r3, [pc, #32]	; (8002440 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800241e:	2200      	movs	r2, #0
 8002420:	701a      	strb	r2, [r3, #0]
	  if(timerse == 0){timerse =1;}
 8002422:	4b07      	ldr	r3, [pc, #28]	; (8002440 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8002424:	781b      	ldrb	r3, [r3, #0]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d102      	bne.n	8002430 <HAL_TIM_PeriodElapsedCallback+0x2c>
 800242a:	4b05      	ldr	r3, [pc, #20]	; (8002440 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800242c:	2201      	movs	r2, #1
 800242e:	701a      	strb	r2, [r3, #0]
  }
  if(htim == &htim7){

  }
}
 8002430:	bf00      	nop
 8002432:	370c      	adds	r7, #12
 8002434:	46bd      	mov	sp, r7
 8002436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243a:	4770      	bx	lr
 800243c:	20000764 	.word	0x20000764
 8002440:	20000b24 	.word	0x20000b24

08002444 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002444:	b480      	push	{r7}
 8002446:	b083      	sub	sp, #12
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
	if(huart == &huart2){
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	4a06      	ldr	r2, [pc, #24]	; (8002468 <HAL_UART_TxCpltCallback+0x24>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d102      	bne.n	800245a <HAL_UART_TxCpltCallback+0x16>
			telemetria_data_sent = 1;
 8002454:	4b05      	ldr	r3, [pc, #20]	; (800246c <HAL_UART_TxCpltCallback+0x28>)
 8002456:	2201      	movs	r2, #1
 8002458:	701a      	strb	r2, [r3, #0]
	}
}
 800245a:	bf00      	nop
 800245c:	370c      	adds	r7, #12
 800245e:	46bd      	mov	sp, r7
 8002460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002464:	4770      	bx	lr
 8002466:	bf00      	nop
 8002468:	20000838 	.word	0x20000838
 800246c:	20000b13 	.word	0x20000b13

08002470 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002470:	b480      	push	{r7}
 8002472:	b083      	sub	sp, #12
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
	if(huart ==&huart1){
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	4a46      	ldr	r2, [pc, #280]	; (8002594 <HAL_UART_RxCpltCallback+0x124>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d17b      	bne.n	8002578 <HAL_UART_RxCpltCallback+0x108>
		debug_i = __HAL_TIM_GET_COUNTER(&htim6);
 8002480:	4b45      	ldr	r3, [pc, #276]	; (8002598 <HAL_UART_RxCpltCallback+0x128>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002486:	461a      	mov	r2, r3
 8002488:	4b44      	ldr	r3, [pc, #272]	; (800259c <HAL_UART_RxCpltCallback+0x12c>)
 800248a:	601a      	str	r2, [r3, #0]
		if(debug_i < 100){
 800248c:	4b43      	ldr	r3, [pc, #268]	; (800259c <HAL_UART_RxCpltCallback+0x12c>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	2b63      	cmp	r3, #99	; 0x63
 8002492:	dc0d      	bgt.n	80024b0 <HAL_UART_RxCpltCallback+0x40>
			CRSF_debug[CRSF_i] = UART1_rxBuffer[0];
 8002494:	4b42      	ldr	r3, [pc, #264]	; (80025a0 <HAL_UART_RxCpltCallback+0x130>)
 8002496:	781b      	ldrb	r3, [r3, #0]
 8002498:	461a      	mov	r2, r3
 800249a:	4b42      	ldr	r3, [pc, #264]	; (80025a4 <HAL_UART_RxCpltCallback+0x134>)
 800249c:	7819      	ldrb	r1, [r3, #0]
 800249e:	4b42      	ldr	r3, [pc, #264]	; (80025a8 <HAL_UART_RxCpltCallback+0x138>)
 80024a0:	5499      	strb	r1, [r3, r2]
			CRSF_i++;
 80024a2:	4b3f      	ldr	r3, [pc, #252]	; (80025a0 <HAL_UART_RxCpltCallback+0x130>)
 80024a4:	781b      	ldrb	r3, [r3, #0]
 80024a6:	3301      	adds	r3, #1
 80024a8:	b2da      	uxtb	r2, r3
 80024aa:	4b3d      	ldr	r3, [pc, #244]	; (80025a0 <HAL_UART_RxCpltCallback+0x130>)
 80024ac:	701a      	strb	r2, [r3, #0]
 80024ae:	e05f      	b.n	8002570 <HAL_UART_RxCpltCallback+0x100>
		}
		else{
			if(CRSF_debug[2] == 0x16){
 80024b0:	4b3d      	ldr	r3, [pc, #244]	; (80025a8 <HAL_UART_RxCpltCallback+0x138>)
 80024b2:	789b      	ldrb	r3, [r3, #2]
 80024b4:	2b16      	cmp	r3, #22
 80024b6:	d154      	bne.n	8002562 <HAL_UART_RxCpltCallback+0xf2>
				RX_roll = (((uint16_t)(CRSF_debug[4] & 0b00000111)) << 8) + (uint16_t)(CRSF_debug[3]);
 80024b8:	4b3b      	ldr	r3, [pc, #236]	; (80025a8 <HAL_UART_RxCpltCallback+0x138>)
 80024ba:	791b      	ldrb	r3, [r3, #4]
 80024bc:	021b      	lsls	r3, r3, #8
 80024be:	b29b      	uxth	r3, r3
 80024c0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80024c4:	b29a      	uxth	r2, r3
 80024c6:	4b38      	ldr	r3, [pc, #224]	; (80025a8 <HAL_UART_RxCpltCallback+0x138>)
 80024c8:	78db      	ldrb	r3, [r3, #3]
 80024ca:	b29b      	uxth	r3, r3
 80024cc:	4413      	add	r3, r2
 80024ce:	b29a      	uxth	r2, r3
 80024d0:	4b36      	ldr	r3, [pc, #216]	; (80025ac <HAL_UART_RxCpltCallback+0x13c>)
 80024d2:	801a      	strh	r2, [r3, #0]
				RX_pitch = (((uint16_t)(CRSF_debug[5] & 0b00111111)) << 5) + (((uint16_t)(CRSF_debug[4] & 0b11111000)) >> 3);
 80024d4:	4b34      	ldr	r3, [pc, #208]	; (80025a8 <HAL_UART_RxCpltCallback+0x138>)
 80024d6:	795b      	ldrb	r3, [r3, #5]
 80024d8:	015b      	lsls	r3, r3, #5
 80024da:	b29b      	uxth	r3, r3
 80024dc:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80024e0:	b29a      	uxth	r2, r3
 80024e2:	4b31      	ldr	r3, [pc, #196]	; (80025a8 <HAL_UART_RxCpltCallback+0x138>)
 80024e4:	791b      	ldrb	r3, [r3, #4]
 80024e6:	08db      	lsrs	r3, r3, #3
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	b29b      	uxth	r3, r3
 80024ec:	4413      	add	r3, r2
 80024ee:	b29a      	uxth	r2, r3
 80024f0:	4b2f      	ldr	r3, [pc, #188]	; (80025b0 <HAL_UART_RxCpltCallback+0x140>)
 80024f2:	801a      	strh	r2, [r3, #0]
				RX_throttle = (((uint16_t)(CRSF_debug[7] & 0b00000001)) << 10)+ (((uint16_t)(CRSF_debug[6])) << 2) + (((uint16_t)(CRSF_debug[5] & 0b11000000)) >> 6);
 80024f4:	4b2c      	ldr	r3, [pc, #176]	; (80025a8 <HAL_UART_RxCpltCallback+0x138>)
 80024f6:	79db      	ldrb	r3, [r3, #7]
 80024f8:	029b      	lsls	r3, r3, #10
 80024fa:	b29b      	uxth	r3, r3
 80024fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002500:	b29a      	uxth	r2, r3
 8002502:	4b29      	ldr	r3, [pc, #164]	; (80025a8 <HAL_UART_RxCpltCallback+0x138>)
 8002504:	799b      	ldrb	r3, [r3, #6]
 8002506:	b29b      	uxth	r3, r3
 8002508:	009b      	lsls	r3, r3, #2
 800250a:	b29b      	uxth	r3, r3
 800250c:	4413      	add	r3, r2
 800250e:	b29a      	uxth	r2, r3
 8002510:	4b25      	ldr	r3, [pc, #148]	; (80025a8 <HAL_UART_RxCpltCallback+0x138>)
 8002512:	795b      	ldrb	r3, [r3, #5]
 8002514:	099b      	lsrs	r3, r3, #6
 8002516:	b2db      	uxtb	r3, r3
 8002518:	b29b      	uxth	r3, r3
 800251a:	4413      	add	r3, r2
 800251c:	b29a      	uxth	r2, r3
 800251e:	4b25      	ldr	r3, [pc, #148]	; (80025b4 <HAL_UART_RxCpltCallback+0x144>)
 8002520:	801a      	strh	r2, [r3, #0]
				RX_yaw = (((uint16_t)(CRSF_debug[8] & 0b00001111)) << 7) + (((uint16_t)(CRSF_debug[7] & 0b11111110)) >> 1);
 8002522:	4b21      	ldr	r3, [pc, #132]	; (80025a8 <HAL_UART_RxCpltCallback+0x138>)
 8002524:	7a1b      	ldrb	r3, [r3, #8]
 8002526:	01db      	lsls	r3, r3, #7
 8002528:	b29b      	uxth	r3, r3
 800252a:	f403 63f0 	and.w	r3, r3, #1920	; 0x780
 800252e:	b29a      	uxth	r2, r3
 8002530:	4b1d      	ldr	r3, [pc, #116]	; (80025a8 <HAL_UART_RxCpltCallback+0x138>)
 8002532:	79db      	ldrb	r3, [r3, #7]
 8002534:	085b      	lsrs	r3, r3, #1
 8002536:	b2db      	uxtb	r3, r3
 8002538:	b29b      	uxth	r3, r3
 800253a:	4413      	add	r3, r2
 800253c:	b29a      	uxth	r2, r3
 800253e:	4b1e      	ldr	r3, [pc, #120]	; (80025b8 <HAL_UART_RxCpltCallback+0x148>)
 8002540:	801a      	strh	r2, [r3, #0]
				RX_arm = (((uint16_t)(CRSF_debug[9] & 0b01111111)) << 4) + (((uint16_t)(CRSF_debug[8] & 0b11110000)) >> 4);
 8002542:	4b19      	ldr	r3, [pc, #100]	; (80025a8 <HAL_UART_RxCpltCallback+0x138>)
 8002544:	7a5b      	ldrb	r3, [r3, #9]
 8002546:	011b      	lsls	r3, r3, #4
 8002548:	b29b      	uxth	r3, r3
 800254a:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800254e:	b29a      	uxth	r2, r3
 8002550:	4b15      	ldr	r3, [pc, #84]	; (80025a8 <HAL_UART_RxCpltCallback+0x138>)
 8002552:	7a1b      	ldrb	r3, [r3, #8]
 8002554:	091b      	lsrs	r3, r3, #4
 8002556:	b2db      	uxtb	r3, r3
 8002558:	b29b      	uxth	r3, r3
 800255a:	4413      	add	r3, r2
 800255c:	b29a      	uxth	r2, r3
 800255e:	4b17      	ldr	r3, [pc, #92]	; (80025bc <HAL_UART_RxCpltCallback+0x14c>)
 8002560:	801a      	strh	r2, [r3, #0]
			}
			CRSF_debug[0] = UART1_rxBuffer[0];
 8002562:	4b10      	ldr	r3, [pc, #64]	; (80025a4 <HAL_UART_RxCpltCallback+0x134>)
 8002564:	781a      	ldrb	r2, [r3, #0]
 8002566:	4b10      	ldr	r3, [pc, #64]	; (80025a8 <HAL_UART_RxCpltCallback+0x138>)
 8002568:	701a      	strb	r2, [r3, #0]
			CRSF_i = 1;
 800256a:	4b0d      	ldr	r3, [pc, #52]	; (80025a0 <HAL_UART_RxCpltCallback+0x130>)
 800256c:	2201      	movs	r2, #1
 800256e:	701a      	strb	r2, [r3, #0]
		}
		htim6.Instance->CNT = 0;
 8002570:	4b09      	ldr	r3, [pc, #36]	; (8002598 <HAL_UART_RxCpltCallback+0x128>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	2200      	movs	r2, #0
 8002576:	625a      	str	r2, [r3, #36]	; 0x24
	}
	if(huart == &huart2){
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	4a11      	ldr	r2, [pc, #68]	; (80025c0 <HAL_UART_RxCpltCallback+0x150>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d102      	bne.n	8002586 <HAL_UART_RxCpltCallback+0x116>
		telemetria_data_sent = 1;
 8002580:	4b10      	ldr	r3, [pc, #64]	; (80025c4 <HAL_UART_RxCpltCallback+0x154>)
 8002582:	2201      	movs	r2, #1
 8002584:	701a      	strb	r2, [r3, #0]
//			HAL_UART_Receive_IT(&huart2, telem, 11);
//		}
//		else
//			HAL_UART_Receive_IT(&huart2, telem, 11);
	}
}
 8002586:	bf00      	nop
 8002588:	370c      	adds	r7, #12
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr
 8002592:	bf00      	nop
 8002594:	200007f4 	.word	0x200007f4
 8002598:	20000764 	.word	0x20000764
 800259c:	20000b20 	.word	0x20000b20
 80025a0:	20002aec 	.word	0x20002aec
 80025a4:	20002af0 	.word	0x20002af0
 80025a8:	20002aac 	.word	0x20002aac
 80025ac:	20002af2 	.word	0x20002af2
 80025b0:	20002af4 	.word	0x20002af4
 80025b4:	20002af8 	.word	0x20002af8
 80025b8:	20002af6 	.word	0x20002af6
 80025bc:	20002afa 	.word	0x20002afa
 80025c0:	20000838 	.word	0x20000838
 80025c4:	20000b13 	.word	0x20000b13

080025c8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80025c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80025cc:	b0d4      	sub	sp, #336	; 0x150
 80025ce:	af18      	add	r7, sp, #96	; 0x60
 80025d0:	64f8      	str	r0, [r7, #76]	; 0x4c
  /* USER CODE BEGIN 5 */
	//HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
	uint8_t telemetria[8];
	uint8_t telemetria_data[100] = "HELLO WORLD \r\n";
 80025d2:	4b9c      	ldr	r3, [pc, #624]	; (8002844 <StartDefaultTask+0x27c>)
 80025d4:	f107 0484 	add.w	r4, r7, #132	; 0x84
 80025d8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80025da:	c407      	stmia	r4!, {r0, r1, r2}
 80025dc:	8023      	strh	r3, [r4, #0]
 80025de:	3402      	adds	r4, #2
 80025e0:	0c1b      	lsrs	r3, r3, #16
 80025e2:	7023      	strb	r3, [r4, #0]
 80025e4:	f107 0393 	add.w	r3, r7, #147	; 0x93
 80025e8:	2255      	movs	r2, #85	; 0x55
 80025ea:	2100      	movs	r1, #0
 80025ec:	4618      	mov	r0, r3
 80025ee:	f00c fc95 	bl	800ef1c <memset>


  /* Infinite loop */
  for(;;)
  {
	  if(uart_telemetria == 1){
 80025f2:	4b95      	ldr	r3, [pc, #596]	; (8002848 <StartDefaultTask+0x280>)
 80025f4:	781b      	ldrb	r3, [r3, #0]
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	f040 8086 	bne.w	8002708 <StartDefaultTask+0x140>
		  if(telem[0] == 'P'){
 80025fc:	4b93      	ldr	r3, [pc, #588]	; (800284c <StartDefaultTask+0x284>)
 80025fe:	781b      	ldrb	r3, [r3, #0]
 8002600:	2b50      	cmp	r3, #80	; 0x50
 8002602:	d13e      	bne.n	8002682 <StartDefaultTask+0xba>
			  telem_P = (float)(((uint32_t)telem[1]-48)*1000000+((uint32_t)telem[2]-48)*100000+((uint32_t)telem[3]-48)*10000+((uint32_t)telem[4]-48)*1000+((uint32_t)telem[5]-48)*100+((uint32_t)telem[6]-48)*10+((uint32_t)telem[7]-48))/100000;
 8002604:	4b91      	ldr	r3, [pc, #580]	; (800284c <StartDefaultTask+0x284>)
 8002606:	785b      	ldrb	r3, [r3, #1]
 8002608:	461a      	mov	r2, r3
 800260a:	4b91      	ldr	r3, [pc, #580]	; (8002850 <StartDefaultTask+0x288>)
 800260c:	fb03 f202 	mul.w	r2, r3, r2
 8002610:	4b8e      	ldr	r3, [pc, #568]	; (800284c <StartDefaultTask+0x284>)
 8002612:	789b      	ldrb	r3, [r3, #2]
 8002614:	4619      	mov	r1, r3
 8002616:	4b8f      	ldr	r3, [pc, #572]	; (8002854 <StartDefaultTask+0x28c>)
 8002618:	fb01 f303 	mul.w	r3, r1, r3
 800261c:	441a      	add	r2, r3
 800261e:	4b8b      	ldr	r3, [pc, #556]	; (800284c <StartDefaultTask+0x284>)
 8002620:	78db      	ldrb	r3, [r3, #3]
 8002622:	4619      	mov	r1, r3
 8002624:	f242 7310 	movw	r3, #10000	; 0x2710
 8002628:	fb01 f303 	mul.w	r3, r1, r3
 800262c:	441a      	add	r2, r3
 800262e:	4b87      	ldr	r3, [pc, #540]	; (800284c <StartDefaultTask+0x284>)
 8002630:	791b      	ldrb	r3, [r3, #4]
 8002632:	4619      	mov	r1, r3
 8002634:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002638:	fb01 f303 	mul.w	r3, r1, r3
 800263c:	441a      	add	r2, r3
 800263e:	4b83      	ldr	r3, [pc, #524]	; (800284c <StartDefaultTask+0x284>)
 8002640:	795b      	ldrb	r3, [r3, #5]
 8002642:	4619      	mov	r1, r3
 8002644:	2364      	movs	r3, #100	; 0x64
 8002646:	fb01 f303 	mul.w	r3, r1, r3
 800264a:	441a      	add	r2, r3
 800264c:	4b7f      	ldr	r3, [pc, #508]	; (800284c <StartDefaultTask+0x284>)
 800264e:	799b      	ldrb	r3, [r3, #6]
 8002650:	4619      	mov	r1, r3
 8002652:	460b      	mov	r3, r1
 8002654:	009b      	lsls	r3, r3, #2
 8002656:	440b      	add	r3, r1
 8002658:	005b      	lsls	r3, r3, #1
 800265a:	4413      	add	r3, r2
 800265c:	4a7b      	ldr	r2, [pc, #492]	; (800284c <StartDefaultTask+0x284>)
 800265e:	79d2      	ldrb	r2, [r2, #7]
 8002660:	441a      	add	r2, r3
 8002662:	4b7d      	ldr	r3, [pc, #500]	; (8002858 <StartDefaultTask+0x290>)
 8002664:	4413      	add	r3, r2
 8002666:	ee07 3a90 	vmov	s15, r3
 800266a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800266e:	eddf 6a7b 	vldr	s13, [pc, #492]	; 800285c <StartDefaultTask+0x294>
 8002672:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002676:	4b7a      	ldr	r3, [pc, #488]	; (8002860 <StartDefaultTask+0x298>)
 8002678:	edc3 7a00 	vstr	s15, [r3]
			  new_P = 1;
 800267c:	4b79      	ldr	r3, [pc, #484]	; (8002864 <StartDefaultTask+0x29c>)
 800267e:	2201      	movs	r2, #1
 8002680:	701a      	strb	r2, [r3, #0]
		  }
		  if(telem[0] == 'D'){
 8002682:	4b72      	ldr	r3, [pc, #456]	; (800284c <StartDefaultTask+0x284>)
 8002684:	781b      	ldrb	r3, [r3, #0]
 8002686:	2b44      	cmp	r3, #68	; 0x44
 8002688:	d13e      	bne.n	8002708 <StartDefaultTask+0x140>
			  telem_D = (float)(((uint32_t)telem[1]-48)*1000000+((uint32_t)telem[2]-48)*100000+((uint32_t)telem[3]-48)*10000+((uint32_t)telem[4]-48)*1000+((uint32_t)telem[5]-48)*100+((uint32_t)telem[6]-48)*10+((uint32_t)telem[7]-48))/100000;
 800268a:	4b70      	ldr	r3, [pc, #448]	; (800284c <StartDefaultTask+0x284>)
 800268c:	785b      	ldrb	r3, [r3, #1]
 800268e:	461a      	mov	r2, r3
 8002690:	4b6f      	ldr	r3, [pc, #444]	; (8002850 <StartDefaultTask+0x288>)
 8002692:	fb03 f202 	mul.w	r2, r3, r2
 8002696:	4b6d      	ldr	r3, [pc, #436]	; (800284c <StartDefaultTask+0x284>)
 8002698:	789b      	ldrb	r3, [r3, #2]
 800269a:	4619      	mov	r1, r3
 800269c:	4b6d      	ldr	r3, [pc, #436]	; (8002854 <StartDefaultTask+0x28c>)
 800269e:	fb01 f303 	mul.w	r3, r1, r3
 80026a2:	441a      	add	r2, r3
 80026a4:	4b69      	ldr	r3, [pc, #420]	; (800284c <StartDefaultTask+0x284>)
 80026a6:	78db      	ldrb	r3, [r3, #3]
 80026a8:	4619      	mov	r1, r3
 80026aa:	f242 7310 	movw	r3, #10000	; 0x2710
 80026ae:	fb01 f303 	mul.w	r3, r1, r3
 80026b2:	441a      	add	r2, r3
 80026b4:	4b65      	ldr	r3, [pc, #404]	; (800284c <StartDefaultTask+0x284>)
 80026b6:	791b      	ldrb	r3, [r3, #4]
 80026b8:	4619      	mov	r1, r3
 80026ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026be:	fb01 f303 	mul.w	r3, r1, r3
 80026c2:	441a      	add	r2, r3
 80026c4:	4b61      	ldr	r3, [pc, #388]	; (800284c <StartDefaultTask+0x284>)
 80026c6:	795b      	ldrb	r3, [r3, #5]
 80026c8:	4619      	mov	r1, r3
 80026ca:	2364      	movs	r3, #100	; 0x64
 80026cc:	fb01 f303 	mul.w	r3, r1, r3
 80026d0:	441a      	add	r2, r3
 80026d2:	4b5e      	ldr	r3, [pc, #376]	; (800284c <StartDefaultTask+0x284>)
 80026d4:	799b      	ldrb	r3, [r3, #6]
 80026d6:	4619      	mov	r1, r3
 80026d8:	460b      	mov	r3, r1
 80026da:	009b      	lsls	r3, r3, #2
 80026dc:	440b      	add	r3, r1
 80026de:	005b      	lsls	r3, r3, #1
 80026e0:	4413      	add	r3, r2
 80026e2:	4a5a      	ldr	r2, [pc, #360]	; (800284c <StartDefaultTask+0x284>)
 80026e4:	79d2      	ldrb	r2, [r2, #7]
 80026e6:	441a      	add	r2, r3
 80026e8:	4b5b      	ldr	r3, [pc, #364]	; (8002858 <StartDefaultTask+0x290>)
 80026ea:	4413      	add	r3, r2
 80026ec:	ee07 3a90 	vmov	s15, r3
 80026f0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80026f4:	eddf 6a59 	vldr	s13, [pc, #356]	; 800285c <StartDefaultTask+0x294>
 80026f8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80026fc:	4b5a      	ldr	r3, [pc, #360]	; (8002868 <StartDefaultTask+0x2a0>)
 80026fe:	edc3 7a00 	vstr	s15, [r3]
			  new_D = 1;
 8002702:	4b5a      	ldr	r3, [pc, #360]	; (800286c <StartDefaultTask+0x2a4>)
 8002704:	2201      	movs	r2, #1
 8002706:	701a      	strb	r2, [r3, #0]
		  }
	  }
	  if (xQueueReceive(telemetria_Queue, (void*)&telemetria_send, 0) == pdTRUE){
 8002708:	4b59      	ldr	r3, [pc, #356]	; (8002870 <StartDefaultTask+0x2a8>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8002710:	2200      	movs	r2, #0
 8002712:	4618      	mov	r0, r3
 8002714:	f00a fdf0 	bl	800d2f8 <xQueueReceive>
 8002718:	4603      	mov	r3, r0
 800271a:	2b01      	cmp	r3, #1
 800271c:	f040 808d 	bne.w	800283a <StartDefaultTask+0x272>
//			  else{
//				  sprintf((char*)telemetria_data, "%4.4f\r\n", telemetria_send[i_telem_send]);
//			  }
//			  HAL_UART_Transmit (&huart2, telemetria_data, sizeof (telemetria_data), 400);
//		  }
		  if(telemetria_data_sent == 1){
 8002720:	4b54      	ldr	r3, [pc, #336]	; (8002874 <StartDefaultTask+0x2ac>)
 8002722:	781b      	ldrb	r3, [r3, #0]
 8002724:	2b01      	cmp	r3, #1
 8002726:	f040 8088 	bne.w	800283a <StartDefaultTask+0x272>
			  sprintf((char*)telemetria_data, "%2.2f, %2.2f, %2.2f, %3.2f, %3.2f, %3.2f, %4.1f, %4.1f, %4.1f, %3.1f, %3.1f, %3.1f, %3.1f\r\n", telemetria_send[0], telemetria_send[1], telemetria_send[2], telemetria_send[3], telemetria_send[4], telemetria_send[5], telemetria_send[6], telemetria_send[7], telemetria_send[8], telemetria_send[9], telemetria_send[10], telemetria_send[11], telemetria_send[12]); //%5.2f
 800272a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800272c:	4618      	mov	r0, r3
 800272e:	f7fd ff0b 	bl	8000548 <__aeabi_f2d>
 8002732:	e9c7 0110 	strd	r0, r1, [r7, #64]	; 0x40
 8002736:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002738:	4618      	mov	r0, r3
 800273a:	f7fd ff05 	bl	8000548 <__aeabi_f2d>
 800273e:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
 8002742:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002744:	4618      	mov	r0, r3
 8002746:	f7fd feff 	bl	8000548 <__aeabi_f2d>
 800274a:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
 800274e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002750:	4618      	mov	r0, r3
 8002752:	f7fd fef9 	bl	8000548 <__aeabi_f2d>
 8002756:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
 800275a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800275c:	4618      	mov	r0, r3
 800275e:	f7fd fef3 	bl	8000548 <__aeabi_f2d>
 8002762:	e9c7 0108 	strd	r0, r1, [r7, #32]
 8002766:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002768:	4618      	mov	r0, r3
 800276a:	f7fd feed 	bl	8000548 <__aeabi_f2d>
 800276e:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8002772:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002774:	4618      	mov	r0, r3
 8002776:	f7fd fee7 	bl	8000548 <__aeabi_f2d>
 800277a:	e9c7 0104 	strd	r0, r1, [r7, #16]
 800277e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002780:	4618      	mov	r0, r3
 8002782:	f7fd fee1 	bl	8000548 <__aeabi_f2d>
 8002786:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800278a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800278c:	4618      	mov	r0, r3
 800278e:	f7fd fedb 	bl	8000548 <__aeabi_f2d>
 8002792:	e9c7 0100 	strd	r0, r1, [r7]
 8002796:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002798:	4618      	mov	r0, r3
 800279a:	f7fd fed5 	bl	8000548 <__aeabi_f2d>
 800279e:	4682      	mov	sl, r0
 80027a0:	468b      	mov	fp, r1
 80027a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80027a4:	4618      	mov	r0, r3
 80027a6:	f7fd fecf 	bl	8000548 <__aeabi_f2d>
 80027aa:	4680      	mov	r8, r0
 80027ac:	4689      	mov	r9, r1
 80027ae:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80027b0:	4618      	mov	r0, r3
 80027b2:	f7fd fec9 	bl	8000548 <__aeabi_f2d>
 80027b6:	4604      	mov	r4, r0
 80027b8:	460d      	mov	r5, r1
 80027ba:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80027be:	4618      	mov	r0, r3
 80027c0:	f7fd fec2 	bl	8000548 <__aeabi_f2d>
 80027c4:	4602      	mov	r2, r0
 80027c6:	460b      	mov	r3, r1
 80027c8:	f107 0084 	add.w	r0, r7, #132	; 0x84
 80027cc:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 80027d0:	e9cd 4514 	strd	r4, r5, [sp, #80]	; 0x50
 80027d4:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 80027d8:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
 80027dc:	ed97 7b00 	vldr	d7, [r7]
 80027e0:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 80027e4:	ed97 7b02 	vldr	d7, [r7, #8]
 80027e8:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80027ec:	ed97 7b04 	vldr	d7, [r7, #16]
 80027f0:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80027f4:	ed97 7b06 	vldr	d7, [r7, #24]
 80027f8:	ed8d 7b08 	vstr	d7, [sp, #32]
 80027fc:	ed97 7b08 	vldr	d7, [r7, #32]
 8002800:	ed8d 7b06 	vstr	d7, [sp, #24]
 8002804:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8002808:	ed8d 7b04 	vstr	d7, [sp, #16]
 800280c:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8002810:	ed8d 7b02 	vstr	d7, [sp, #8]
 8002814:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8002818:	ed8d 7b00 	vstr	d7, [sp]
 800281c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002820:	4915      	ldr	r1, [pc, #84]	; (8002878 <StartDefaultTask+0x2b0>)
 8002822:	f00c ffed 	bl	800f800 <siprintf>
			  HAL_UART_Transmit_IT(&huart2, telemetria_data, sizeof (telemetria_data));
 8002826:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800282a:	2264      	movs	r2, #100	; 0x64
 800282c:	4619      	mov	r1, r3
 800282e:	4813      	ldr	r0, [pc, #76]	; (800287c <StartDefaultTask+0x2b4>)
 8002830:	f007 fc09 	bl	800a046 <HAL_UART_Transmit_IT>
			  telemetria_data_sent = 0;
 8002834:	4b0f      	ldr	r3, [pc, #60]	; (8002874 <StartDefaultTask+0x2ac>)
 8002836:	2200      	movs	r2, #0
 8002838:	701a      	strb	r2, [r3, #0]
		  }
	  }


	  osDelay(10);
 800283a:	200a      	movs	r0, #10
 800283c:	f00a fad4 	bl	800cde8 <osDelay>
	  if(uart_telemetria == 1){
 8002840:	e6d7      	b.n	80025f2 <StartDefaultTask+0x2a>
 8002842:	bf00      	nop
 8002844:	0801430c 	.word	0x0801430c
 8002848:	20000b12 	.word	0x20000b12
 800284c:	20000000 	.word	0x20000000
 8002850:	000f4240 	.word	0x000f4240
 8002854:	000186a0 	.word	0x000186a0
 8002858:	fcd232b0 	.word	0xfcd232b0
 800285c:	47c35000 	.word	0x47c35000
 8002860:	20000b14 	.word	0x20000b14
 8002864:	20000b1c 	.word	0x20000b1c
 8002868:	20000b18 	.word	0x20000b18
 800286c:	20000b1d 	.word	0x20000b1d
 8002870:	20002b14 	.word	0x20002b14
 8002874:	20000b13 	.word	0x20000b13
 8002878:	080142b0 	.word	0x080142b0
 800287c:	20000838 	.word	0x20000838

08002880 <Start_Data_Reading>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_Data_Reading */
void Start_Data_Reading(void const * argument)
{
 8002880:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002882:	b0f1      	sub	sp, #452	; 0x1c4
 8002884:	af06      	add	r7, sp, #24
 8002886:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800288a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800288e:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN Start_Data_Reading */
	extern QueueHandle_t telemetria_Queue;

	//magnetometer calibration
	FusionVector magneto_offset = {-11.31, -3.64, 0.43};//{-11.8, -5.68, 3.08};
 8002890:	4a68      	ldr	r2, [pc, #416]	; (8002a34 <Start_Data_Reading+0x1b4>)
 8002892:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002896:	ca07      	ldmia	r2, {r0, r1, r2}
 8002898:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	FusionMatrix magneto_transform = {1.015, 0.018, -0.002, 0.018, 1.015, -0.004, -0.002, -0.004, 0.972};
 800289c:	4b66      	ldr	r3, [pc, #408]	; (8002a38 <Start_Data_Reading+0x1b8>)
 800289e:	f107 04ac 	add.w	r4, r7, #172	; 0xac
 80028a2:	461d      	mov	r5, r3
 80028a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80028a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80028a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80028aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80028ac:	682b      	ldr	r3, [r5, #0]
 80028ae:	6023      	str	r3, [r4, #0]
	FusionVector magneto_data;

	//pitch angle velocity control params
	float err_pitch = 0;
 80028b0:	f04f 0300 	mov.w	r3, #0
 80028b4:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
	float errd_pitch = 0;
 80028b8:	f04f 0300 	mov.w	r3, #0
 80028bc:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
	float prev_err_pitch = 0;
 80028c0:	f04f 0300 	mov.w	r3, #0
 80028c4:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
	float control_pitch = 0;
 80028c8:	f04f 0300 	mov.w	r3, #0
 80028cc:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
	float P_pitch = 20;
 80028d0:	4b5a      	ldr	r3, [pc, #360]	; (8002a3c <Start_Data_Reading+0x1bc>)
 80028d2:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
	float D_pitch = 0.1;
 80028d6:	4b5a      	ldr	r3, [pc, #360]	; (8002a40 <Start_Data_Reading+0x1c0>)
 80028d8:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168

	//pitch angle control params
	float err_angle_pitch = 0;
 80028dc:	f04f 0300 	mov.w	r3, #0
 80028e0:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
	float errd_angle_pitch = 0;
 80028e4:	f04f 0300 	mov.w	r3, #0
 80028e8:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
	float prev_err_angle_pitch = 0;
 80028ec:	f04f 0300 	mov.w	r3, #0
 80028f0:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
	float angle_control_pitch = 0;
 80028f4:	f04f 0300 	mov.w	r3, #0
 80028f8:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
	float P_angle_pitch = 0.04;
 80028fc:	4b51      	ldr	r3, [pc, #324]	; (8002a44 <Start_Data_Reading+0x1c4>)
 80028fe:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
	float D_angle_pitch = 0.0001;//0.005;
 8002902:	4b51      	ldr	r3, [pc, #324]	; (8002a48 <Start_Data_Reading+0x1c8>)
 8002904:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154

	//roll angle velocity control params
	float err_roll = 0;
 8002908:	f04f 0300 	mov.w	r3, #0
 800290c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
	float errd_roll = 0;
 8002910:	f04f 0300 	mov.w	r3, #0
 8002914:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
	float prev_err_roll = 0;
 8002918:	f04f 0300 	mov.w	r3, #0
 800291c:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
	float control_roll = 0;
 8002920:	f04f 0300 	mov.w	r3, #0
 8002924:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
	float P_roll = 5;
 8002928:	4b48      	ldr	r3, [pc, #288]	; (8002a4c <Start_Data_Reading+0x1cc>)
 800292a:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
	float D_roll = 0.1;//0.4
 800292e:	4b44      	ldr	r3, [pc, #272]	; (8002a40 <Start_Data_Reading+0x1c0>)
 8002930:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140

	//roll angle control params
	float P_angle_roll = 0.2;
 8002934:	4b46      	ldr	r3, [pc, #280]	; (8002a50 <Start_Data_Reading+0x1d0>)
 8002936:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
	float D_angle_roll = 0.0001;//0.005;
 800293a:	4b43      	ldr	r3, [pc, #268]	; (8002a48 <Start_Data_Reading+0x1c8>)
 800293c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
	float err_angle_roll = 0;
 8002940:	f04f 0300 	mov.w	r3, #0
 8002944:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
	float errd_angle_roll = 0;
 8002948:	f04f 0300 	mov.w	r3, #0
 800294c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
	float prev_err_angle_roll = 0;
 8002950:	f04f 0300 	mov.w	r3, #0
 8002954:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
	float angle_control_roll = 0;
 8002958:	f04f 0300 	mov.w	r3, #0
 800295c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

	//yaw angle velocity control params
	float err_yaw = 0;
 8002960:	f04f 0300 	mov.w	r3, #0
 8002964:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	float errd_yaw = 0;
 8002968:	f04f 0300 	mov.w	r3, #0
 800296c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	float prev_err_yaw = 0;
 8002970:	f04f 0300 	mov.w	r3, #0
 8002974:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
	float control_yaw = 0;
 8002978:	f04f 0300 	mov.w	r3, #0
 800297c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	float P_yaw = 20;
 8002980:	4b2e      	ldr	r3, [pc, #184]	; (8002a3c <Start_Data_Reading+0x1bc>)
 8002982:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
	float D_yaw = 0.1;
 8002986:	4b2e      	ldr	r3, [pc, #184]	; (8002a40 <Start_Data_Reading+0x1c0>)
 8002988:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c

	//yaw angle control params
	float P_angle_yaw = 0.8;//0.04;
 800298c:	4b31      	ldr	r3, [pc, #196]	; (8002a54 <Start_Data_Reading+0x1d4>)
 800298e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	float D_angle_yaw = 0.000;//0.005;
 8002992:	f04f 0300 	mov.w	r3, #0
 8002996:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	float err_angle_yaw = 0;
 800299a:	f04f 0300 	mov.w	r3, #0
 800299e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	float errd_angle_yaw = 0;
 80029a2:	f04f 0300 	mov.w	r3, #0
 80029a6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	float prev_err_angle_yaw = 0;
 80029aa:	f04f 0300 	mov.w	r3, #0
 80029ae:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
	float angle_control_yaw = 0;
 80029b2:	f04f 0300 	mov.w	r3, #0
 80029b6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

	float yaw_angle = 0;
 80029ba:	f04f 0300 	mov.w	r3, #0
 80029be:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	float prev_euler_yaw = 0;
 80029c2:	f04f 0300 	mov.w	r3, #0
 80029c6:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
	int n = 0;
 80029ca:	2300      	movs	r3, #0
 80029cc:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180



	//imu init function
	BMI088_Init(&imu, &hspi2, CS_ACC_GPIO_Port, CS_ACC_Pin, CS_GYRO_GPIO_Port, CS_GYRO_Pin);
 80029d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029d4:	9301      	str	r3, [sp, #4]
 80029d6:	4b20      	ldr	r3, [pc, #128]	; (8002a58 <Start_Data_Reading+0x1d8>)
 80029d8:	9300      	str	r3, [sp, #0]
 80029da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80029de:	4a1f      	ldr	r2, [pc, #124]	; (8002a5c <Start_Data_Reading+0x1dc>)
 80029e0:	491f      	ldr	r1, [pc, #124]	; (8002a60 <Start_Data_Reading+0x1e0>)
 80029e2:	4820      	ldr	r0, [pc, #128]	; (8002a64 <Start_Data_Reading+0x1e4>)
 80029e4:	f001 fce8 	bl	80043b8 <BMI088_Init>


	//bmp388 pressure sensor init
	bmp._hi2c = &hi2c2;
 80029e8:	4b1f      	ldr	r3, [pc, #124]	; (8002a68 <Start_Data_Reading+0x1e8>)
 80029ea:	4a20      	ldr	r2, [pc, #128]	; (8002a6c <Start_Data_Reading+0x1ec>)
 80029ec:	601a      	str	r2, [r3, #0]


	BMP388_SetTempOS(&bmp, 0);
 80029ee:	2100      	movs	r1, #0
 80029f0:	481d      	ldr	r0, [pc, #116]	; (8002a68 <Start_Data_Reading+0x1e8>)
 80029f2:	f002 f852 	bl	8004a9a <BMP388_SetTempOS>
	HAL_Delay(10);
 80029f6:	200a      	movs	r0, #10
 80029f8:	f002 fd54 	bl	80054a4 <HAL_Delay>
	BMP388_SetPressOS(&bmp, 0x03); //0 volt, de adatlap alapján 8x-nek megfelelő 0x03 beírva
 80029fc:	2103      	movs	r1, #3
 80029fe:	481a      	ldr	r0, [pc, #104]	; (8002a68 <Start_Data_Reading+0x1e8>)
 8002a00:	f002 f86b 	bl	8004ada <BMP388_SetPressOS>
	HAL_Delay(10);
 8002a04:	200a      	movs	r0, #10
 8002a06:	f002 fd4d 	bl	80054a4 <HAL_Delay>
	BMP388_SetIIRFilterCoeff(&bmp, 2);
 8002a0a:	2102      	movs	r1, #2
 8002a0c:	4816      	ldr	r0, [pc, #88]	; (8002a68 <Start_Data_Reading+0x1e8>)
 8002a0e:	f002 f883 	bl	8004b18 <BMP388_SetIIRFilterCoeff>
	HAL_Delay(10);
 8002a12:	200a      	movs	r0, #10
 8002a14:	f002 fd46 	bl	80054a4 <HAL_Delay>
	BMP388_SetOutputDataRate(&bmp, 0x02);
 8002a18:	2102      	movs	r1, #2
 8002a1a:	4813      	ldr	r0, [pc, #76]	; (8002a68 <Start_Data_Reading+0x1e8>)
 8002a1c:	f002 f893 	bl	8004b46 <BMP388_SetOutputDataRate>
	HAL_Delay(10);
 8002a20:	200a      	movs	r0, #10
 8002a22:	f002 fd3f 	bl	80054a4 <HAL_Delay>
	BMP388_Init(&bmp);
 8002a26:	4810      	ldr	r0, [pc, #64]	; (8002a68 <Start_Data_Reading+0x1e8>)
 8002a28:	f001 ffbc 	bl	80049a4 <BMP388_Init>

	for(int i_init = 0; i_init<2000; i_init++ ){
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002a32:	e078      	b.n	8002b26 <Start_Data_Reading+0x2a6>
 8002a34:	08014370 	.word	0x08014370
 8002a38:	0801437c 	.word	0x0801437c
 8002a3c:	41a00000 	.word	0x41a00000
 8002a40:	3dcccccd 	.word	0x3dcccccd
 8002a44:	3d23d70a 	.word	0x3d23d70a
 8002a48:	38d1b717 	.word	0x38d1b717
 8002a4c:	40a00000 	.word	0x40a00000
 8002a50:	3e4ccccd 	.word	0x3e4ccccd
 8002a54:	3f4ccccd 	.word	0x3f4ccccd
 8002a58:	40020400 	.word	0x40020400
 8002a5c:	40020800 	.word	0x40020800
 8002a60:	20000634 	.word	0x20000634
 8002a64:	20000970 	.word	0x20000970
 8002a68:	200009c0 	.word	0x200009c0
 8002a6c:	2000058c 	.word	0x2000058c
	  BMP388_ReadRawPressTempTime(&bmp, &raw_press, &raw_temp, &raw_time);
 8002a70:	4bb1      	ldr	r3, [pc, #708]	; (8002d38 <Start_Data_Reading+0x4b8>)
 8002a72:	4ab2      	ldr	r2, [pc, #712]	; (8002d3c <Start_Data_Reading+0x4bc>)
 8002a74:	49b2      	ldr	r1, [pc, #712]	; (8002d40 <Start_Data_Reading+0x4c0>)
 8002a76:	48b3      	ldr	r0, [pc, #716]	; (8002d44 <Start_Data_Reading+0x4c4>)
 8002a78:	f002 f87a 	bl	8004b70 <BMP388_ReadRawPressTempTime>
	  BMP388_CompensateRawPressTemp(&bmp, raw_press, raw_temp, &press, &temp);
 8002a7c:	4bb0      	ldr	r3, [pc, #704]	; (8002d40 <Start_Data_Reading+0x4c0>)
 8002a7e:	6819      	ldr	r1, [r3, #0]
 8002a80:	4bae      	ldr	r3, [pc, #696]	; (8002d3c <Start_Data_Reading+0x4bc>)
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	4bb0      	ldr	r3, [pc, #704]	; (8002d48 <Start_Data_Reading+0x4c8>)
 8002a86:	9300      	str	r3, [sp, #0]
 8002a88:	4bb0      	ldr	r3, [pc, #704]	; (8002d4c <Start_Data_Reading+0x4cc>)
 8002a8a:	48ae      	ldr	r0, [pc, #696]	; (8002d44 <Start_Data_Reading+0x4c4>)
 8002a8c:	f002 f89c 	bl	8004bc8 <BMP388_CompensateRawPressTemp>
	  h0 += BMP388_FindAltitude(ground_pressure, press);
 8002a90:	4bae      	ldr	r3, [pc, #696]	; (8002d4c <Start_Data_Reading+0x4cc>)
 8002a92:	edd3 7a00 	vldr	s15, [r3]
 8002a96:	eef0 0a67 	vmov.f32	s1, s15
 8002a9a:	ed9f 0aad 	vldr	s0, [pc, #692]	; 8002d50 <Start_Data_Reading+0x4d0>
 8002a9e:	f002 f8b7 	bl	8004c10 <BMP388_FindAltitude>
 8002aa2:	eeb0 7a40 	vmov.f32	s14, s0
 8002aa6:	4bab      	ldr	r3, [pc, #684]	; (8002d54 <Start_Data_Reading+0x4d4>)
 8002aa8:	edd3 7a00 	vldr	s15, [r3]
 8002aac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ab0:	4ba8      	ldr	r3, [pc, #672]	; (8002d54 <Start_Data_Reading+0x4d4>)
 8002ab2:	edc3 7a00 	vstr	s15, [r3]
	  BMI088_ReadGyroscope(&imu);
 8002ab6:	48a8      	ldr	r0, [pc, #672]	; (8002d58 <Start_Data_Reading+0x4d8>)
 8002ab8:	f001 fefc 	bl	80048b4 <BMI088_ReadGyroscope>
	  gyro_offset_x_calc += imu.gyr_rps[0];
 8002abc:	4ba6      	ldr	r3, [pc, #664]	; (8002d58 <Start_Data_Reading+0x4d8>)
 8002abe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f7fd fd41 	bl	8000548 <__aeabi_f2d>
 8002ac6:	4ba5      	ldr	r3, [pc, #660]	; (8002d5c <Start_Data_Reading+0x4dc>)
 8002ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002acc:	f7fd fbde 	bl	800028c <__adddf3>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	460b      	mov	r3, r1
 8002ad4:	49a1      	ldr	r1, [pc, #644]	; (8002d5c <Start_Data_Reading+0x4dc>)
 8002ad6:	e9c1 2300 	strd	r2, r3, [r1]
	  gyro_offset_y_calc += imu.gyr_rps[1];
 8002ada:	4b9f      	ldr	r3, [pc, #636]	; (8002d58 <Start_Data_Reading+0x4d8>)
 8002adc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f7fd fd32 	bl	8000548 <__aeabi_f2d>
 8002ae4:	4b9e      	ldr	r3, [pc, #632]	; (8002d60 <Start_Data_Reading+0x4e0>)
 8002ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aea:	f7fd fbcf 	bl	800028c <__adddf3>
 8002aee:	4602      	mov	r2, r0
 8002af0:	460b      	mov	r3, r1
 8002af2:	499b      	ldr	r1, [pc, #620]	; (8002d60 <Start_Data_Reading+0x4e0>)
 8002af4:	e9c1 2300 	strd	r2, r3, [r1]
	  gyro_offset_z_calc += imu.gyr_rps[2];
 8002af8:	4b97      	ldr	r3, [pc, #604]	; (8002d58 <Start_Data_Reading+0x4d8>)
 8002afa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002afc:	4618      	mov	r0, r3
 8002afe:	f7fd fd23 	bl	8000548 <__aeabi_f2d>
 8002b02:	4b98      	ldr	r3, [pc, #608]	; (8002d64 <Start_Data_Reading+0x4e4>)
 8002b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b08:	f7fd fbc0 	bl	800028c <__adddf3>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	460b      	mov	r3, r1
 8002b10:	4994      	ldr	r1, [pc, #592]	; (8002d64 <Start_Data_Reading+0x4e4>)
 8002b12:	e9c1 2300 	strd	r2, r3, [r1]
	  HAL_Delay(1);
 8002b16:	2001      	movs	r0, #1
 8002b18:	f002 fcc4 	bl	80054a4 <HAL_Delay>
	for(int i_init = 0; i_init<2000; i_init++ ){
 8002b1c:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8002b20:	3301      	adds	r3, #1
 8002b22:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002b26:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8002b2a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002b2e:	db9f      	blt.n	8002a70 <Start_Data_Reading+0x1f0>
	}
	h0 /= 2000;
 8002b30:	4b88      	ldr	r3, [pc, #544]	; (8002d54 <Start_Data_Reading+0x4d4>)
 8002b32:	ed93 7a00 	vldr	s14, [r3]
 8002b36:	eddf 6a8c 	vldr	s13, [pc, #560]	; 8002d68 <Start_Data_Reading+0x4e8>
 8002b3a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002b3e:	4b85      	ldr	r3, [pc, #532]	; (8002d54 <Start_Data_Reading+0x4d4>)
 8002b40:	edc3 7a00 	vstr	s15, [r3]
	gyro_offset_x = gyro_offset_x_calc/2000;
 8002b44:	4b85      	ldr	r3, [pc, #532]	; (8002d5c <Start_Data_Reading+0x4dc>)
 8002b46:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002b4a:	f04f 0200 	mov.w	r2, #0
 8002b4e:	4b87      	ldr	r3, [pc, #540]	; (8002d6c <Start_Data_Reading+0x4ec>)
 8002b50:	f7fd fe7c 	bl	800084c <__aeabi_ddiv>
 8002b54:	4602      	mov	r2, r0
 8002b56:	460b      	mov	r3, r1
 8002b58:	4985      	ldr	r1, [pc, #532]	; (8002d70 <Start_Data_Reading+0x4f0>)
 8002b5a:	e9c1 2300 	strd	r2, r3, [r1]
	gyro_offset_y = gyro_offset_y_calc/2000;
 8002b5e:	4b80      	ldr	r3, [pc, #512]	; (8002d60 <Start_Data_Reading+0x4e0>)
 8002b60:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002b64:	f04f 0200 	mov.w	r2, #0
 8002b68:	4b80      	ldr	r3, [pc, #512]	; (8002d6c <Start_Data_Reading+0x4ec>)
 8002b6a:	f7fd fe6f 	bl	800084c <__aeabi_ddiv>
 8002b6e:	4602      	mov	r2, r0
 8002b70:	460b      	mov	r3, r1
 8002b72:	4980      	ldr	r1, [pc, #512]	; (8002d74 <Start_Data_Reading+0x4f4>)
 8002b74:	e9c1 2300 	strd	r2, r3, [r1]
	gyro_offset_z = gyro_offset_z_calc/2000;
 8002b78:	4b7a      	ldr	r3, [pc, #488]	; (8002d64 <Start_Data_Reading+0x4e4>)
 8002b7a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002b7e:	f04f 0200 	mov.w	r2, #0
 8002b82:	4b7a      	ldr	r3, [pc, #488]	; (8002d6c <Start_Data_Reading+0x4ec>)
 8002b84:	f7fd fe62 	bl	800084c <__aeabi_ddiv>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	460b      	mov	r3, r1
 8002b8c:	497a      	ldr	r1, [pc, #488]	; (8002d78 <Start_Data_Reading+0x4f8>)
 8002b8e:	e9c1 2300 	strd	r2, r3, [r1]

//	BMM150_Init(&bmm);
//	HAL_Delay(10);
//	BMM150_Get_TrimData(&bmm, &trim_data);

	uint8_t transmit_data[60] = "Hello Andris\r\n";
 8002b92:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8002b96:	f5a3 75a2 	sub.w	r5, r3, #324	; 0x144
 8002b9a:	4b78      	ldr	r3, [pc, #480]	; (8002d7c <Start_Data_Reading+0x4fc>)
 8002b9c:	462c      	mov	r4, r5
 8002b9e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002ba0:	c407      	stmia	r4!, {r0, r1, r2}
 8002ba2:	8023      	strh	r3, [r4, #0]
 8002ba4:	3402      	adds	r4, #2
 8002ba6:	0c1b      	lsrs	r3, r3, #16
 8002ba8:	7023      	strb	r3, [r4, #0]
 8002baa:	f105 030f 	add.w	r3, r5, #15
 8002bae:	222d      	movs	r2, #45	; 0x2d
 8002bb0:	2100      	movs	r1, #0
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f00c f9b2 	bl	800ef1c <memset>
	float telemetria_float[3];



	q.SEq_1=1;
 8002bb8:	4b71      	ldr	r3, [pc, #452]	; (8002d80 <Start_Data_Reading+0x500>)
 8002bba:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002bbe:	601a      	str	r2, [r3, #0]
	q.SEq_2=0;
 8002bc0:	4b6f      	ldr	r3, [pc, #444]	; (8002d80 <Start_Data_Reading+0x500>)
 8002bc2:	f04f 0200 	mov.w	r2, #0
 8002bc6:	605a      	str	r2, [r3, #4]
	q.SEq_3=0;
 8002bc8:	4b6d      	ldr	r3, [pc, #436]	; (8002d80 <Start_Data_Reading+0x500>)
 8002bca:	f04f 0200 	mov.w	r2, #0
 8002bce:	609a      	str	r2, [r3, #8]
	q.SEq_4=0;
 8002bd0:	4b6b      	ldr	r3, [pc, #428]	; (8002d80 <Start_Data_Reading+0x500>)
 8002bd2:	f04f 0200 	mov.w	r2, #0
 8002bd6:	60da      	str	r2, [r3, #12]

	w.w_bx=0;
 8002bd8:	4b6a      	ldr	r3, [pc, #424]	; (8002d84 <Start_Data_Reading+0x504>)
 8002bda:	f04f 0200 	mov.w	r2, #0
 8002bde:	601a      	str	r2, [r3, #0]
	w.w_by=0;
 8002be0:	4b68      	ldr	r3, [pc, #416]	; (8002d84 <Start_Data_Reading+0x504>)
 8002be2:	f04f 0200 	mov.w	r2, #0
 8002be6:	605a      	str	r2, [r3, #4]
	w.w_bz=0;
 8002be8:	4b66      	ldr	r3, [pc, #408]	; (8002d84 <Start_Data_Reading+0x504>)
 8002bea:	f04f 0200 	mov.w	r2, #0
 8002bee:	609a      	str	r2, [r3, #8]
//	P_prev.a32 = 0;
//	P_prev.a33 = 0;
//	meas.a11=0;
//	meas.a21=0;

	HAL_TIM_Base_Start_IT(&htim6);
 8002bf0:	4865      	ldr	r0, [pc, #404]	; (8002d88 <Start_Data_Reading+0x508>)
 8002bf2:	f005 fec1 	bl	8008978 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim7);
 8002bf6:	4865      	ldr	r0, [pc, #404]	; (8002d8c <Start_Data_Reading+0x50c>)
 8002bf8:	f005 febe 	bl	8008978 <HAL_TIM_Base_Start_IT>
	FusionAhrsInitialise(&ahrs);
 8002bfc:	4864      	ldr	r0, [pc, #400]	; (8002d90 <Start_Data_Reading+0x510>)
 8002bfe:	f009 f817 	bl	800bc30 <FusionAhrsInitialise>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8002c02:	2200      	movs	r2, #0
 8002c04:	2108      	movs	r1, #8
 8002c06:	4863      	ldr	r0, [pc, #396]	; (8002d94 <Start_Data_Reading+0x514>)
 8002c08:	f003 fd82 	bl	8006710 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8002c0c:	2064      	movs	r0, #100	; 0x64
 8002c0e:	f002 fc49 	bl	80054a4 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 8002c12:	2201      	movs	r2, #1
 8002c14:	2108      	movs	r1, #8
 8002c16:	485f      	ldr	r0, [pc, #380]	; (8002d94 <Start_Data_Reading+0x514>)
 8002c18:	f003 fd7a 	bl	8006710 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8002c1c:	2064      	movs	r0, #100	; 0x64
 8002c1e:	f002 fc41 	bl	80054a4 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8002c22:	2200      	movs	r2, #0
 8002c24:	2108      	movs	r1, #8
 8002c26:	485b      	ldr	r0, [pc, #364]	; (8002d94 <Start_Data_Reading+0x514>)
 8002c28:	f003 fd72 	bl	8006710 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8002c2c:	2064      	movs	r0, #100	; 0x64
 8002c2e:	f002 fc39 	bl	80054a4 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 8002c32:	2201      	movs	r2, #1
 8002c34:	2108      	movs	r1, #8
 8002c36:	4857      	ldr	r0, [pc, #348]	; (8002d94 <Start_Data_Reading+0x514>)
 8002c38:	f003 fd6a 	bl	8006710 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8002c3c:	2064      	movs	r0, #100	; 0x64
 8002c3e:	f002 fc31 	bl	80054a4 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8002c42:	2200      	movs	r2, #0
 8002c44:	2108      	movs	r1, #8
 8002c46:	4853      	ldr	r0, [pc, #332]	; (8002d94 <Start_Data_Reading+0x514>)
 8002c48:	f003 fd62 	bl	8006710 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8002c4c:	2064      	movs	r0, #100	; 0x64
 8002c4e:	f002 fc29 	bl	80054a4 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 8002c52:	2201      	movs	r2, #1
 8002c54:	2108      	movs	r1, #8
 8002c56:	484f      	ldr	r0, [pc, #316]	; (8002d94 <Start_Data_Reading+0x514>)
 8002c58:	f003 fd5a 	bl	8006710 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8002c5c:	2064      	movs	r0, #100	; 0x64
 8002c5e:	f002 fc21 	bl	80054a4 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8002c62:	2200      	movs	r2, #0
 8002c64:	2108      	movs	r1, #8
 8002c66:	484b      	ldr	r0, [pc, #300]	; (8002d94 <Start_Data_Reading+0x514>)
 8002c68:	f003 fd52 	bl	8006710 <HAL_GPIO_WritePin>

	HAL_UART_Receive_DMA(&huart1, UART1_rxBuffer, bytetoread);
 8002c6c:	4b4a      	ldr	r3, [pc, #296]	; (8002d98 <Start_Data_Reading+0x518>)
 8002c6e:	781b      	ldrb	r3, [r3, #0]
 8002c70:	b29b      	uxth	r3, r3
 8002c72:	461a      	mov	r2, r3
 8002c74:	4949      	ldr	r1, [pc, #292]	; (8002d9c <Start_Data_Reading+0x51c>)
 8002c76:	484a      	ldr	r0, [pc, #296]	; (8002da0 <Start_Data_Reading+0x520>)
 8002c78:	f007 fa2a 	bl	800a0d0 <HAL_UART_Receive_DMA>
	HAL_UART_Transmit_IT(&huart2, transmit_data, sizeof (transmit_data));
 8002c7c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002c80:	223c      	movs	r2, #60	; 0x3c
 8002c82:	4619      	mov	r1, r3
 8002c84:	4847      	ldr	r0, [pc, #284]	; (8002da4 <Start_Data_Reading+0x524>)
 8002c86:	f007 f9de 	bl	800a046 <HAL_UART_Transmit_IT>
//	HAL_UART_Receive_IT(&huart2, telem, 11);


	vTaskResume( defaultTaskHandle );
 8002c8a:	4b47      	ldr	r3, [pc, #284]	; (8002da8 <Start_Data_Reading+0x528>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f00a ffae 	bl	800dbf0 <vTaskResume>

  /* Infinite loop */
  for(;;)
  {

	  	  mytimer = __HAL_TIM_GET_COUNTER(&htim7);
 8002c94:	4b3d      	ldr	r3, [pc, #244]	; (8002d8c <Start_Data_Reading+0x50c>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c9a:	461a      	mov	r2, r3
 8002c9c:	4b43      	ldr	r3, [pc, #268]	; (8002dac <Start_Data_Reading+0x52c>)
 8002c9e:	601a      	str	r2, [r3, #0]
	  	  htim7.Instance->CNT = 0;
 8002ca0:	4b3a      	ldr	r3, [pc, #232]	; (8002d8c <Start_Data_Reading+0x50c>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	625a      	str	r2, [r3, #36]	; 0x24

		  // magnetic field data in uT
//		  mag_data_x = BMM150_Compensate_x(field_x, Rhall,  &trim_data); //magn data compensation 33.4 us
//		  mag_data_y = BMM150_Compensate_y(field_y, Rhall,  &trim_data);
//		  mag_data_z = BMM150_Compensate_z(field_z, Rhall,  &trim_data);
		  magneto_data.axis.x = mag_data_y;
 8002ca8:	4b41      	ldr	r3, [pc, #260]	; (8002db0 <Start_Data_Reading+0x530>)
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8002cb0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002cb4:	601a      	str	r2, [r3, #0]
		  magneto_data.axis.y = -mag_data_x;
 8002cb6:	4b3f      	ldr	r3, [pc, #252]	; (8002db4 <Start_Data_Reading+0x534>)
 8002cb8:	edd3 7a00 	vldr	s15, [r3]
 8002cbc:	eef1 7a67 	vneg.f32	s15, s15
 8002cc0:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8002cc4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002cc8:	edc3 7a01 	vstr	s15, [r3, #4]
		  magneto_data.axis.z = mag_data_z;
 8002ccc:	4b3a      	ldr	r3, [pc, #232]	; (8002db8 <Start_Data_Reading+0x538>)
 8002cce:	681a      	ldr	r2, [r3, #0]
 8002cd0:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8002cd4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002cd8:	609a      	str	r2, [r3, #8]

		  if(i_mag < 1000){
 8002cda:	4b38      	ldr	r3, [pc, #224]	; (8002dbc <Start_Data_Reading+0x53c>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002ce2:	da14      	bge.n	8002d0e <Start_Data_Reading+0x48e>
			  mag_debug_x[i_mag] = mag_data_x;
 8002ce4:	4b35      	ldr	r3, [pc, #212]	; (8002dbc <Start_Data_Reading+0x53c>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a32      	ldr	r2, [pc, #200]	; (8002db4 <Start_Data_Reading+0x534>)
 8002cea:	6812      	ldr	r2, [r2, #0]
 8002cec:	4934      	ldr	r1, [pc, #208]	; (8002dc0 <Start_Data_Reading+0x540>)
 8002cee:	009b      	lsls	r3, r3, #2
 8002cf0:	440b      	add	r3, r1
 8002cf2:	601a      	str	r2, [r3, #0]
			  mag_debug_y[i_mag] = mag_data_y;
 8002cf4:	4b31      	ldr	r3, [pc, #196]	; (8002dbc <Start_Data_Reading+0x53c>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a2d      	ldr	r2, [pc, #180]	; (8002db0 <Start_Data_Reading+0x530>)
 8002cfa:	6812      	ldr	r2, [r2, #0]
 8002cfc:	4931      	ldr	r1, [pc, #196]	; (8002dc4 <Start_Data_Reading+0x544>)
 8002cfe:	009b      	lsls	r3, r3, #2
 8002d00:	440b      	add	r3, r1
 8002d02:	601a      	str	r2, [r3, #0]
			  i_mag++;
 8002d04:	4b2d      	ldr	r3, [pc, #180]	; (8002dbc <Start_Data_Reading+0x53c>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	3301      	adds	r3, #1
 8002d0a:	4a2c      	ldr	r2, [pc, #176]	; (8002dbc <Start_Data_Reading+0x53c>)
 8002d0c:	6013      	str	r3, [r2, #0]
		  }

		  //read IMU
		  BMI088_ReadGyroscope(&imu);	// imu read 119 us
 8002d0e:	4812      	ldr	r0, [pc, #72]	; (8002d58 <Start_Data_Reading+0x4d8>)
 8002d10:	f001 fdd0 	bl	80048b4 <BMI088_ReadGyroscope>
		  BMI088_ReadAccelerometer(&imu);
 8002d14:	4810      	ldr	r0, [pc, #64]	; (8002d58 <Start_Data_Reading+0x4d8>)
 8002d16:	f001 fd59 	bl	80047cc <BMI088_ReadAccelerometer>
		  //filterUpdate((imu.gyr_rps[0]-gyro_offset_x), (imu.gyr_rps[1]-gyro_offset_y), imu.gyr_rps[2], imu.acc_mps2[0], imu.acc_mps2[1], (imu.gyr_rps[2]-gyro_offset_z), mag_data_y, -mag_data_x, mag_data_z, &q, &f, &w);


		  //eulerAngles(q, &roll, &pitch, &yaw);

		  gyro_x_degree = ((imu.gyr_rps[0]-gyro_offset_x)*57.29);
 8002d1a:	4b0f      	ldr	r3, [pc, #60]	; (8002d58 <Start_Data_Reading+0x4d8>)
 8002d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f7fd fc12 	bl	8000548 <__aeabi_f2d>
 8002d24:	4b12      	ldr	r3, [pc, #72]	; (8002d70 <Start_Data_Reading+0x4f0>)
 8002d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d2a:	f7fd faad 	bl	8000288 <__aeabi_dsub>
 8002d2e:	4602      	mov	r2, r0
 8002d30:	460b      	mov	r3, r1
 8002d32:	4610      	mov	r0, r2
 8002d34:	4619      	mov	r1, r3
 8002d36:	e047      	b.n	8002dc8 <Start_Data_Reading+0x548>
 8002d38:	20000a18 	.word	0x20000a18
 8002d3c:	20000a14 	.word	0x20000a14
 8002d40:	20000a10 	.word	0x20000a10
 8002d44:	200009c0 	.word	0x200009c0
 8002d48:	20000a20 	.word	0x20000a20
 8002d4c:	20000a1c 	.word	0x20000a1c
 8002d50:	47c5f400 	.word	0x47c5f400
 8002d54:	20000a24 	.word	0x20000a24
 8002d58:	20000970 	.word	0x20000970
 8002d5c:	20000b30 	.word	0x20000b30
 8002d60:	20000b38 	.word	0x20000b38
 8002d64:	20000b40 	.word	0x20000b40
 8002d68:	44fa0000 	.word	0x44fa0000
 8002d6c:	409f4000 	.word	0x409f4000
 8002d70:	20000b48 	.word	0x20000b48
 8002d74:	20000b50 	.word	0x20000b50
 8002d78:	20000b58 	.word	0x20000b58
 8002d7c:	080143a0 	.word	0x080143a0
 8002d80:	20000a34 	.word	0x20000a34
 8002d84:	20000a44 	.word	0x20000a44
 8002d88:	20000764 	.word	0x20000764
 8002d8c:	200007ac 	.word	0x200007ac
 8002d90:	20000a54 	.word	0x20000a54
 8002d94:	40020400 	.word	0x40020400
 8002d98:	2000000a 	.word	0x2000000a
 8002d9c:	20002af0 	.word	0x20002af0
 8002da0:	200007f4 	.word	0x200007f4
 8002da4:	20000838 	.word	0x20000838
 8002da8:	20000964 	.word	0x20000964
 8002dac:	20000b28 	.word	0x20000b28
 8002db0:	20000a04 	.word	0x20000a04
 8002db4:	20000a00 	.word	0x20000a00
 8002db8:	20000a08 	.word	0x20000a08
 8002dbc:	20002aa0 	.word	0x20002aa0
 8002dc0:	20000b60 	.word	0x20000b60
 8002dc4:	20001b00 	.word	0x20001b00
 8002dc8:	a3db      	add	r3, pc, #876	; (adr r3, 8003138 <Start_Data_Reading+0x8b8>)
 8002dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dce:	f7fd fc13 	bl	80005f8 <__aeabi_dmul>
 8002dd2:	4602      	mov	r2, r0
 8002dd4:	460b      	mov	r3, r1
 8002dd6:	4610      	mov	r0, r2
 8002dd8:	4619      	mov	r1, r3
 8002dda:	f7fd ff05 	bl	8000be8 <__aeabi_d2f>
 8002dde:	4603      	mov	r3, r0
 8002de0:	4ad9      	ldr	r2, [pc, #868]	; (8003148 <Start_Data_Reading+0x8c8>)
 8002de2:	6013      	str	r3, [r2, #0]
		  gyro_y_degree = ((imu.gyr_rps[1]-gyro_offset_x)*57.29);
 8002de4:	4bd9      	ldr	r3, [pc, #868]	; (800314c <Start_Data_Reading+0x8cc>)
 8002de6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002de8:	4618      	mov	r0, r3
 8002dea:	f7fd fbad 	bl	8000548 <__aeabi_f2d>
 8002dee:	4bd8      	ldr	r3, [pc, #864]	; (8003150 <Start_Data_Reading+0x8d0>)
 8002df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002df4:	f7fd fa48 	bl	8000288 <__aeabi_dsub>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	460b      	mov	r3, r1
 8002dfc:	4610      	mov	r0, r2
 8002dfe:	4619      	mov	r1, r3
 8002e00:	a3cd      	add	r3, pc, #820	; (adr r3, 8003138 <Start_Data_Reading+0x8b8>)
 8002e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e06:	f7fd fbf7 	bl	80005f8 <__aeabi_dmul>
 8002e0a:	4602      	mov	r2, r0
 8002e0c:	460b      	mov	r3, r1
 8002e0e:	4610      	mov	r0, r2
 8002e10:	4619      	mov	r1, r3
 8002e12:	f7fd fee9 	bl	8000be8 <__aeabi_d2f>
 8002e16:	4603      	mov	r3, r0
 8002e18:	4ace      	ldr	r2, [pc, #824]	; (8003154 <Start_Data_Reading+0x8d4>)
 8002e1a:	6013      	str	r3, [r2, #0]
		  gyro_z_degree = ((imu.gyr_rps[2]-gyro_offset_x)*57.29);
 8002e1c:	4bcb      	ldr	r3, [pc, #812]	; (800314c <Start_Data_Reading+0x8cc>)
 8002e1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e20:	4618      	mov	r0, r3
 8002e22:	f7fd fb91 	bl	8000548 <__aeabi_f2d>
 8002e26:	4bca      	ldr	r3, [pc, #808]	; (8003150 <Start_Data_Reading+0x8d0>)
 8002e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e2c:	f7fd fa2c 	bl	8000288 <__aeabi_dsub>
 8002e30:	4602      	mov	r2, r0
 8002e32:	460b      	mov	r3, r1
 8002e34:	4610      	mov	r0, r2
 8002e36:	4619      	mov	r1, r3
 8002e38:	a3bf      	add	r3, pc, #764	; (adr r3, 8003138 <Start_Data_Reading+0x8b8>)
 8002e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e3e:	f7fd fbdb 	bl	80005f8 <__aeabi_dmul>
 8002e42:	4602      	mov	r2, r0
 8002e44:	460b      	mov	r3, r1
 8002e46:	4610      	mov	r0, r2
 8002e48:	4619      	mov	r1, r3
 8002e4a:	f7fd fecd 	bl	8000be8 <__aeabi_d2f>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	4ac1      	ldr	r2, [pc, #772]	; (8003158 <Start_Data_Reading+0x8d8>)
 8002e52:	6013      	str	r3, [r2, #0]


		  magneto_data = FusionVectorSubtract(magneto_data, magneto_offset);
 8002e54:	ed97 5a34 	vldr	s10, [r7, #208]	; 0xd0
 8002e58:	edd7 5a35 	vldr	s11, [r7, #212]	; 0xd4
 8002e5c:	ed97 6a36 	vldr	s12, [r7, #216]	; 0xd8
 8002e60:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8002e64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002e68:	edd3 6a00 	vldr	s13, [r3]
 8002e6c:	ed93 7a01 	vldr	s14, [r3, #4]
 8002e70:	edd3 7a02 	vldr	s15, [r3, #8]
 8002e74:	eef0 1a45 	vmov.f32	s3, s10
 8002e78:	eeb0 2a65 	vmov.f32	s4, s11
 8002e7c:	eef0 2a46 	vmov.f32	s5, s12
 8002e80:	eeb0 0a66 	vmov.f32	s0, s13
 8002e84:	eef0 0a47 	vmov.f32	s1, s14
 8002e88:	eeb0 1a67 	vmov.f32	s2, s15
 8002e8c:	f7fe f8d8 	bl	8001040 <FusionVectorSubtract>
 8002e90:	eef0 6a40 	vmov.f32	s13, s0
 8002e94:	eeb0 7a60 	vmov.f32	s14, s1
 8002e98:	eef0 7a41 	vmov.f32	s15, s2
 8002e9c:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8002ea0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002ea4:	edc3 6a00 	vstr	s13, [r3]
 8002ea8:	ed83 7a01 	vstr	s14, [r3, #4]
 8002eac:	edc3 7a02 	vstr	s15, [r3, #8]
//		  magneto_data = FusionMatrixMultiplyVector(magneto_transform, FusionVectorSubtract(magneto_data, magneto_offset));

		  const FusionVector gyroscope = {gyro_x_degree, gyro_y_degree, gyro_z_degree};
 8002eb0:	4ba5      	ldr	r3, [pc, #660]	; (8003148 <Start_Data_Reading+0x8c8>)
 8002eb2:	681a      	ldr	r2, [r3, #0]
 8002eb4:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8002eb8:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8002ebc:	601a      	str	r2, [r3, #0]
 8002ebe:	4ba5      	ldr	r3, [pc, #660]	; (8003154 <Start_Data_Reading+0x8d4>)
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8002ec6:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8002eca:	605a      	str	r2, [r3, #4]
 8002ecc:	4ba2      	ldr	r3, [pc, #648]	; (8003158 <Start_Data_Reading+0x8d8>)
 8002ece:	681a      	ldr	r2, [r3, #0]
 8002ed0:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8002ed4:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8002ed8:	609a      	str	r2, [r3, #8]
		  const FusionVector accelerometer = {imu.acc_mps2[0]/9.81, imu.acc_mps2[1]/9.81, imu.acc_mps2[2]/9.81};
 8002eda:	4b9c      	ldr	r3, [pc, #624]	; (800314c <Start_Data_Reading+0x8cc>)
 8002edc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f7fd fb32 	bl	8000548 <__aeabi_f2d>
 8002ee4:	a396      	add	r3, pc, #600	; (adr r3, 8003140 <Start_Data_Reading+0x8c0>)
 8002ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eea:	f7fd fcaf 	bl	800084c <__aeabi_ddiv>
 8002eee:	4602      	mov	r2, r0
 8002ef0:	460b      	mov	r3, r1
 8002ef2:	4610      	mov	r0, r2
 8002ef4:	4619      	mov	r1, r3
 8002ef6:	f7fd fe77 	bl	8000be8 <__aeabi_d2f>
 8002efa:	4602      	mov	r2, r0
 8002efc:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8002f00:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002f04:	601a      	str	r2, [r3, #0]
 8002f06:	4b91      	ldr	r3, [pc, #580]	; (800314c <Start_Data_Reading+0x8cc>)
 8002f08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f7fd fb1c 	bl	8000548 <__aeabi_f2d>
 8002f10:	a38b      	add	r3, pc, #556	; (adr r3, 8003140 <Start_Data_Reading+0x8c0>)
 8002f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f16:	f7fd fc99 	bl	800084c <__aeabi_ddiv>
 8002f1a:	4602      	mov	r2, r0
 8002f1c:	460b      	mov	r3, r1
 8002f1e:	4610      	mov	r0, r2
 8002f20:	4619      	mov	r1, r3
 8002f22:	f7fd fe61 	bl	8000be8 <__aeabi_d2f>
 8002f26:	4602      	mov	r2, r0
 8002f28:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8002f2c:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002f30:	605a      	str	r2, [r3, #4]
 8002f32:	4b86      	ldr	r3, [pc, #536]	; (800314c <Start_Data_Reading+0x8cc>)
 8002f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f36:	4618      	mov	r0, r3
 8002f38:	f7fd fb06 	bl	8000548 <__aeabi_f2d>
 8002f3c:	a380      	add	r3, pc, #512	; (adr r3, 8003140 <Start_Data_Reading+0x8c0>)
 8002f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f42:	f7fd fc83 	bl	800084c <__aeabi_ddiv>
 8002f46:	4602      	mov	r2, r0
 8002f48:	460b      	mov	r3, r1
 8002f4a:	4610      	mov	r0, r2
 8002f4c:	4619      	mov	r1, r3
 8002f4e:	f7fd fe4b 	bl	8000be8 <__aeabi_d2f>
 8002f52:	4602      	mov	r2, r0
 8002f54:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8002f58:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002f5c:	609a      	str	r2, [r3, #8]
		  const FusionVector magnetometer = {magneto_data.axis.x, magneto_data.axis.y, magneto_data.axis.z};
 8002f5e:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8002f62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002f66:	681a      	ldr	r2, [r3, #0]
 8002f68:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8002f6c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002f70:	601a      	str	r2, [r3, #0]
 8002f72:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8002f76:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002f7a:	685a      	ldr	r2, [r3, #4]
 8002f7c:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8002f80:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002f84:	605a      	str	r2, [r3, #4]
 8002f86:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8002f8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002f8e:	689a      	ldr	r2, [r3, #8]
 8002f90:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8002f94:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002f98:	609a      	str	r2, [r3, #8]


		  //no magnetometer AHRS
		  FusionAhrsUpdateNoMagnetometer(&ahrs, gyroscope, accelerometer, SAMPLE_PERIOD);
 8002f9a:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8002f9e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002fa2:	ed93 5a00 	vldr	s10, [r3]
 8002fa6:	edd3 5a01 	vldr	s11, [r3, #4]
 8002faa:	ed93 6a02 	vldr	s12, [r3, #8]
 8002fae:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8002fb2:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8002fb6:	edd3 6a00 	vldr	s13, [r3]
 8002fba:	ed93 7a01 	vldr	s14, [r3, #4]
 8002fbe:	edd3 7a02 	vldr	s15, [r3, #8]
 8002fc2:	ed9f 3a66 	vldr	s6, [pc, #408]	; 800315c <Start_Data_Reading+0x8dc>
 8002fc6:	eef0 1a45 	vmov.f32	s3, s10
 8002fca:	eeb0 2a65 	vmov.f32	s4, s11
 8002fce:	eef0 2a46 	vmov.f32	s5, s12
 8002fd2:	eeb0 0a66 	vmov.f32	s0, s13
 8002fd6:	eef0 0a47 	vmov.f32	s1, s14
 8002fda:	eeb0 1a67 	vmov.f32	s2, s15
 8002fde:	4860      	ldr	r0, [pc, #384]	; (8003160 <Start_Data_Reading+0x8e0>)
 8002fe0:	f009 fd84 	bl	800caec <FusionAhrsUpdateNoMagnetometer>

		  //magnetometer AHRS
//		  FusionAhrsUpdate(&ahrs, gyroscope, accelerometer, magnetometer, SAMPLE_PERIOD);

		  euler = FusionQuaternionToEuler(FusionAhrsGetQuaternion(&ahrs));
 8002fe4:	485e      	ldr	r0, [pc, #376]	; (8003160 <Start_Data_Reading+0x8e0>)
 8002fe6:	f009 fddb 	bl	800cba0 <FusionAhrsGetQuaternion>
 8002fea:	eeb0 6a40 	vmov.f32	s12, s0
 8002fee:	eef0 6a60 	vmov.f32	s13, s1
 8002ff2:	eeb0 7a41 	vmov.f32	s14, s2
 8002ff6:	eef0 7a61 	vmov.f32	s15, s3
 8002ffa:	ed87 6a37 	vstr	s12, [r7, #220]	; 0xdc
 8002ffe:	edc7 6a38 	vstr	s13, [r7, #224]	; 0xe0
 8003002:	ed87 7a39 	vstr	s14, [r7, #228]	; 0xe4
 8003006:	edc7 7a3a 	vstr	s15, [r7, #232]	; 0xe8
 800300a:	ed97 6a37 	vldr	s12, [r7, #220]	; 0xdc
 800300e:	edd7 6a38 	vldr	s13, [r7, #224]	; 0xe0
 8003012:	ed97 7a39 	vldr	s14, [r7, #228]	; 0xe4
 8003016:	edd7 7a3a 	vldr	s15, [r7, #232]	; 0xe8
 800301a:	eeb0 0a46 	vmov.f32	s0, s12
 800301e:	eef0 0a66 	vmov.f32	s1, s13
 8003022:	eeb0 1a47 	vmov.f32	s2, s14
 8003026:	eef0 1a67 	vmov.f32	s3, s15
 800302a:	f7fe f9e0 	bl	80013ee <FusionQuaternionToEuler>
 800302e:	eef0 6a40 	vmov.f32	s13, s0
 8003032:	eeb0 7a60 	vmov.f32	s14, s1
 8003036:	eef0 7a41 	vmov.f32	s15, s2
 800303a:	4b4a      	ldr	r3, [pc, #296]	; (8003164 <Start_Data_Reading+0x8e4>)
 800303c:	edc3 6a00 	vstr	s13, [r3]
 8003040:	ed83 7a01 	vstr	s14, [r3, #4]
 8003044:	edc3 7a02 	vstr	s15, [r3, #8]
		  // Rotation matrix from sensor frame to earth(NWU) frame
		  ERS = FusionQuaternionToMatrix(FusionAhrsGetQuaternion(&ahrs));
 8003048:	4845      	ldr	r0, [pc, #276]	; (8003160 <Start_Data_Reading+0x8e0>)
 800304a:	f009 fda9 	bl	800cba0 <FusionAhrsGetQuaternion>
 800304e:	eeb0 6a40 	vmov.f32	s12, s0
 8003052:	eef0 6a60 	vmov.f32	s13, s1
 8003056:	eeb0 7a41 	vmov.f32	s14, s2
 800305a:	eef0 7a61 	vmov.f32	s15, s3
 800305e:	ed87 6a3b 	vstr	s12, [r7, #236]	; 0xec
 8003062:	edc7 6a3c 	vstr	s13, [r7, #240]	; 0xf0
 8003066:	ed87 7a3d 	vstr	s14, [r7, #244]	; 0xf4
 800306a:	edc7 7a3e 	vstr	s15, [r7, #248]	; 0xf8
 800306e:	4c3e      	ldr	r4, [pc, #248]	; (8003168 <Start_Data_Reading+0x8e8>)
 8003070:	463b      	mov	r3, r7
 8003072:	ed97 6a3b 	vldr	s12, [r7, #236]	; 0xec
 8003076:	edd7 6a3c 	vldr	s13, [r7, #240]	; 0xf0
 800307a:	ed97 7a3d 	vldr	s14, [r7, #244]	; 0xf4
 800307e:	edd7 7a3e 	vldr	s15, [r7, #248]	; 0xf8
 8003082:	eeb0 0a46 	vmov.f32	s0, s12
 8003086:	eef0 0a66 	vmov.f32	s1, s13
 800308a:	eeb0 1a47 	vmov.f32	s2, s14
 800308e:	eef0 1a67 	vmov.f32	s3, s15
 8003092:	4618      	mov	r0, r3
 8003094:	f7fe f8de 	bl	8001254 <FusionQuaternionToMatrix>
 8003098:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800309c:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80030a0:	461d      	mov	r5, r3
 80030a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80030a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80030a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80030a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80030aa:	682b      	ldr	r3, [r5, #0]
 80030ac:	6023      	str	r3, [r4, #0]
		  aE = FusionMatrixMultiplyVector(ERS, FusionVectorMultiplyScalar(accelerometer, 9.81));
 80030ae:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 80030b2:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80030b6:	edd3 6a00 	vldr	s13, [r3]
 80030ba:	ed93 7a01 	vldr	s14, [r3, #4]
 80030be:	edd3 7a02 	vldr	s15, [r3, #8]
 80030c2:	eddf 1a2a 	vldr	s3, [pc, #168]	; 800316c <Start_Data_Reading+0x8ec>
 80030c6:	eeb0 0a66 	vmov.f32	s0, s13
 80030ca:	eef0 0a47 	vmov.f32	s1, s14
 80030ce:	eeb0 1a67 	vmov.f32	s2, s15
 80030d2:	f7fe f803 	bl	80010dc <FusionVectorMultiplyScalar>
 80030d6:	eef0 6a40 	vmov.f32	s13, s0
 80030da:	eeb0 7a60 	vmov.f32	s14, s1
 80030de:	eef0 7a41 	vmov.f32	s15, s2
 80030e2:	edc7 6a3f 	vstr	s13, [r7, #252]	; 0xfc
 80030e6:	ed87 7a40 	vstr	s14, [r7, #256]	; 0x100
 80030ea:	edc7 7a41 	vstr	s15, [r7, #260]	; 0x104
 80030ee:	edd7 6a3f 	vldr	s13, [r7, #252]	; 0xfc
 80030f2:	ed97 7a40 	vldr	s14, [r7, #256]	; 0x100
 80030f6:	edd7 7a41 	vldr	s15, [r7, #260]	; 0x104
 80030fa:	4e1b      	ldr	r6, [pc, #108]	; (8003168 <Start_Data_Reading+0x8e8>)
 80030fc:	466d      	mov	r5, sp
 80030fe:	f106 0410 	add.w	r4, r6, #16
 8003102:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003104:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003106:	6823      	ldr	r3, [r4, #0]
 8003108:	602b      	str	r3, [r5, #0]
 800310a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800310e:	eeb0 0a66 	vmov.f32	s0, s13
 8003112:	eef0 0a47 	vmov.f32	s1, s14
 8003116:	eeb0 1a67 	vmov.f32	s2, s15
 800311a:	f7fe f823 	bl	8001164 <FusionMatrixMultiplyVector>
 800311e:	eef0 6a40 	vmov.f32	s13, s0
 8003122:	eeb0 7a60 	vmov.f32	s14, s1
 8003126:	eef0 7a41 	vmov.f32	s15, s2
 800312a:	4b11      	ldr	r3, [pc, #68]	; (8003170 <Start_Data_Reading+0x8f0>)
 800312c:	edc3 6a00 	vstr	s13, [r3]
 8003130:	ed83 7a01 	vstr	s14, [r3, #4]
 8003134:	e01e      	b.n	8003174 <Start_Data_Reading+0x8f4>
 8003136:	bf00      	nop
 8003138:	b851eb85 	.word	0xb851eb85
 800313c:	404ca51e 	.word	0x404ca51e
 8003140:	51eb851f 	.word	0x51eb851f
 8003144:	40239eb8 	.word	0x40239eb8
 8003148:	20000a28 	.word	0x20000a28
 800314c:	20000970 	.word	0x20000970
 8003150:	20000b48 	.word	0x20000b48
 8003154:	20000a2c 	.word	0x20000a2c
 8003158:	20000a30 	.word	0x20000a30
 800315c:	3ba3d70a 	.word	0x3ba3d70a
 8003160:	20000a54 	.word	0x20000a54
 8003164:	20000ac8 	.word	0x20000ac8
 8003168:	20000ad4 	.word	0x20000ad4
 800316c:	411cf5c3 	.word	0x411cf5c3
 8003170:	20000af8 	.word	0x20000af8
 8003174:	edc3 7a02 	vstr	s15, [r3, #8]
		  aE.axis.z -=9.85173;
 8003178:	4bdf      	ldr	r3, [pc, #892]	; (80034f8 <Start_Data_Reading+0xc78>)
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	4618      	mov	r0, r3
 800317e:	f7fd f9e3 	bl	8000548 <__aeabi_f2d>
 8003182:	a3d9      	add	r3, pc, #868	; (adr r3, 80034e8 <Start_Data_Reading+0xc68>)
 8003184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003188:	f7fd f87e 	bl	8000288 <__aeabi_dsub>
 800318c:	4602      	mov	r2, r0
 800318e:	460b      	mov	r3, r1
 8003190:	4610      	mov	r0, r2
 8003192:	4619      	mov	r1, r3
 8003194:	f7fd fd28 	bl	8000be8 <__aeabi_d2f>
 8003198:	4603      	mov	r3, r0
 800319a:	4ad7      	ldr	r2, [pc, #860]	; (80034f8 <Start_Data_Reading+0xc78>)
 800319c:	6093      	str	r3, [r2, #8]



		  // calculate rotation around yaw axis
		  if(prev_euler_yaw > 170 && euler.angle.yaw < 0){
 800319e:	edd7 7a61 	vldr	s15, [r7, #388]	; 0x184
 80031a2:	ed9f 7ad6 	vldr	s14, [pc, #856]	; 80034fc <Start_Data_Reading+0xc7c>
 80031a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031ae:	dd0c      	ble.n	80031ca <Start_Data_Reading+0x94a>
 80031b0:	4bd3      	ldr	r3, [pc, #844]	; (8003500 <Start_Data_Reading+0xc80>)
 80031b2:	edd3 7a02 	vldr	s15, [r3, #8]
 80031b6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80031ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031be:	d504      	bpl.n	80031ca <Start_Data_Reading+0x94a>
			  n++;
 80031c0:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80031c4:	3301      	adds	r3, #1
 80031c6:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
		  }
		  if(prev_euler_yaw < -170 && euler.angle.yaw > 0){
 80031ca:	edd7 7a61 	vldr	s15, [r7, #388]	; 0x184
 80031ce:	ed9f 7acd 	vldr	s14, [pc, #820]	; 8003504 <Start_Data_Reading+0xc84>
 80031d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031da:	d50c      	bpl.n	80031f6 <Start_Data_Reading+0x976>
 80031dc:	4bc8      	ldr	r3, [pc, #800]	; (8003500 <Start_Data_Reading+0xc80>)
 80031de:	edd3 7a02 	vldr	s15, [r3, #8]
 80031e2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80031e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031ea:	dd04      	ble.n	80031f6 <Start_Data_Reading+0x976>
			  n--;
 80031ec:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80031f0:	3b01      	subs	r3, #1
 80031f2:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
		  }
		  yaw_angle = euler.angle.yaw + n * 360.0;
 80031f6:	4bc2      	ldr	r3, [pc, #776]	; (8003500 <Start_Data_Reading+0xc80>)
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	4618      	mov	r0, r3
 80031fc:	f7fd f9a4 	bl	8000548 <__aeabi_f2d>
 8003200:	4604      	mov	r4, r0
 8003202:	460d      	mov	r5, r1
 8003204:	f8d7 0180 	ldr.w	r0, [r7, #384]	; 0x180
 8003208:	f7fd f98c 	bl	8000524 <__aeabi_i2d>
 800320c:	f04f 0200 	mov.w	r2, #0
 8003210:	4bbd      	ldr	r3, [pc, #756]	; (8003508 <Start_Data_Reading+0xc88>)
 8003212:	f7fd f9f1 	bl	80005f8 <__aeabi_dmul>
 8003216:	4602      	mov	r2, r0
 8003218:	460b      	mov	r3, r1
 800321a:	4620      	mov	r0, r4
 800321c:	4629      	mov	r1, r5
 800321e:	f7fd f835 	bl	800028c <__adddf3>
 8003222:	4602      	mov	r2, r0
 8003224:	460b      	mov	r3, r1
 8003226:	4610      	mov	r0, r2
 8003228:	4619      	mov	r1, r3
 800322a:	f7fd fcdd 	bl	8000be8 <__aeabi_d2f>
 800322e:	4603      	mov	r3, r0
 8003230:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		  abs_yaw = yaw_angle;
 8003234:	4ab5      	ldr	r2, [pc, #724]	; (800350c <Start_Data_Reading+0xc8c>)
 8003236:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800323a:	6013      	str	r3, [r2, #0]
		  prev_euler_yaw = euler.angle.yaw;
 800323c:	4bb0      	ldr	r3, [pc, #704]	; (8003500 <Start_Data_Reading+0xc80>)
 800323e:	689b      	ldr	r3, [r3, #8]
 8003240:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184




		  //altitudeKF(prev_state, &current_state, P_prev, &P, meas);
		  M_throttle = CRSFtoDuty(RX_throttle);
 8003244:	4bb2      	ldr	r3, [pc, #712]	; (8003510 <Start_Data_Reading+0xc90>)
 8003246:	881b      	ldrh	r3, [r3, #0]
 8003248:	4618      	mov	r0, r3
 800324a:	f002 f81d 	bl	8005288 <CRSFtoDuty>
 800324e:	eef0 7a40 	vmov.f32	s15, s0
 8003252:	4bb0      	ldr	r3, [pc, #704]	; (8003514 <Start_Data_Reading+0xc94>)
 8003254:	edc3 7a00 	vstr	s15, [r3]
		  M_pitch = CRSFtoPitch(RX_pitch)*25;
 8003258:	4baf      	ldr	r3, [pc, #700]	; (8003518 <Start_Data_Reading+0xc98>)
 800325a:	881b      	ldrh	r3, [r3, #0]
 800325c:	4618      	mov	r0, r3
 800325e:	f002 f855 	bl	800530c <CRSFtoPitch>
 8003262:	eef0 7a40 	vmov.f32	s15, s0
 8003266:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 800326a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800326e:	4bab      	ldr	r3, [pc, #684]	; (800351c <Start_Data_Reading+0xc9c>)
 8003270:	edc3 7a00 	vstr	s15, [r3]
		  M_roll = CRSFtoRoll(RX_roll)*15;
 8003274:	4baa      	ldr	r3, [pc, #680]	; (8003520 <Start_Data_Reading+0xca0>)
 8003276:	881b      	ldrh	r3, [r3, #0]
 8003278:	4618      	mov	r0, r3
 800327a:	f002 f865 	bl	8005348 <CRSFtoRoll>
 800327e:	eef0 7a40 	vmov.f32	s15, s0
 8003282:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 8003286:	ee67 7a87 	vmul.f32	s15, s15, s14
 800328a:	4ba6      	ldr	r3, [pc, #664]	; (8003524 <Start_Data_Reading+0xca4>)
 800328c:	edc3 7a00 	vstr	s15, [r3]
		  M_yaw += CRSFtoYaw(RX_yaw)*0.3;
 8003290:	4ba5      	ldr	r3, [pc, #660]	; (8003528 <Start_Data_Reading+0xca8>)
 8003292:	881b      	ldrh	r3, [r3, #0]
 8003294:	4618      	mov	r0, r3
 8003296:	f002 f875 	bl	8005384 <CRSFtoYaw>
 800329a:	ee10 3a10 	vmov	r3, s0
 800329e:	4618      	mov	r0, r3
 80032a0:	f7fd f952 	bl	8000548 <__aeabi_f2d>
 80032a4:	a392      	add	r3, pc, #584	; (adr r3, 80034f0 <Start_Data_Reading+0xc70>)
 80032a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032aa:	f7fd f9a5 	bl	80005f8 <__aeabi_dmul>
 80032ae:	4602      	mov	r2, r0
 80032b0:	460b      	mov	r3, r1
 80032b2:	4614      	mov	r4, r2
 80032b4:	461d      	mov	r5, r3
 80032b6:	4b9d      	ldr	r3, [pc, #628]	; (800352c <Start_Data_Reading+0xcac>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4618      	mov	r0, r3
 80032bc:	f7fd f944 	bl	8000548 <__aeabi_f2d>
 80032c0:	4602      	mov	r2, r0
 80032c2:	460b      	mov	r3, r1
 80032c4:	4620      	mov	r0, r4
 80032c6:	4629      	mov	r1, r5
 80032c8:	f7fc ffe0 	bl	800028c <__adddf3>
 80032cc:	4602      	mov	r2, r0
 80032ce:	460b      	mov	r3, r1
 80032d0:	4610      	mov	r0, r2
 80032d2:	4619      	mov	r1, r3
 80032d4:	f7fd fc88 	bl	8000be8 <__aeabi_d2f>
 80032d8:	4603      	mov	r3, r0
 80032da:	4a94      	ldr	r2, [pc, #592]	; (800352c <Start_Data_Reading+0xcac>)
 80032dc:	6013      	str	r3, [r2, #0]

		  //pitch angle control
		  err_angle_pitch = M_pitch - euler.angle.pitch;
 80032de:	4b8f      	ldr	r3, [pc, #572]	; (800351c <Start_Data_Reading+0xc9c>)
 80032e0:	ed93 7a00 	vldr	s14, [r3]
 80032e4:	4b86      	ldr	r3, [pc, #536]	; (8003500 <Start_Data_Reading+0xc80>)
 80032e6:	edd3 7a01 	vldr	s15, [r3, #4]
 80032ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80032ee:	edc7 7a59 	vstr	s15, [r7, #356]	; 0x164
		  errd_angle_pitch = (err_angle_pitch - prev_err_angle_pitch)/SAMPLE_PERIOD;
 80032f2:	ed97 7a59 	vldr	s14, [r7, #356]	; 0x164
 80032f6:	edd7 7a68 	vldr	s15, [r7, #416]	; 0x1a0
 80032fa:	ee37 7a67 	vsub.f32	s14, s14, s15
 80032fe:	eddf 6a8c 	vldr	s13, [pc, #560]	; 8003530 <Start_Data_Reading+0xcb0>
 8003302:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003306:	edc7 7a58 	vstr	s15, [r7, #352]	; 0x160
		  angle_control_pitch = P_angle_pitch * err_angle_pitch + D_angle_pitch * errd_angle_pitch;
 800330a:	ed97 7a56 	vldr	s14, [r7, #344]	; 0x158
 800330e:	edd7 7a59 	vldr	s15, [r7, #356]	; 0x164
 8003312:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003316:	edd7 6a55 	vldr	s13, [r7, #340]	; 0x154
 800331a:	edd7 7a58 	vldr	s15, [r7, #352]	; 0x160
 800331e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003322:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003326:	edc7 7a57 	vstr	s15, [r7, #348]	; 0x15c
		  prev_err_angle_pitch = err_angle_pitch;
 800332a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800332e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
		  //debug_control1 = err_angle_pitch;

		  //pitch angle velocity control
		  err_pitch = angle_control_pitch - imu.gyr_rps[1];
 8003332:	4b80      	ldr	r3, [pc, #512]	; (8003534 <Start_Data_Reading+0xcb4>)
 8003334:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8003338:	ed97 7a57 	vldr	s14, [r7, #348]	; 0x15c
 800333c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003340:	edc7 7a5e 	vstr	s15, [r7, #376]	; 0x178
		  errd_pitch = (err_pitch - prev_err_pitch)/SAMPLE_PERIOD;
 8003344:	ed97 7a5e 	vldr	s14, [r7, #376]	; 0x178
 8003348:	edd7 7a69 	vldr	s15, [r7, #420]	; 0x1a4
 800334c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003350:	eddf 6a77 	vldr	s13, [pc, #476]	; 8003530 <Start_Data_Reading+0xcb0>
 8003354:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003358:	edc7 7a5d 	vstr	s15, [r7, #372]	; 0x174
		  prev_err_pitch = err_pitch;
 800335c:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8003360:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
		  control_pitch = P_pitch * err_pitch + D_pitch * errd_pitch;
 8003364:	ed97 7a5b 	vldr	s14, [r7, #364]	; 0x16c
 8003368:	edd7 7a5e 	vldr	s15, [r7, #376]	; 0x178
 800336c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003370:	edd7 6a5a 	vldr	s13, [r7, #360]	; 0x168
 8003374:	edd7 7a5d 	vldr	s15, [r7, #372]	; 0x174
 8003378:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800337c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003380:	edc7 7a5c 	vstr	s15, [r7, #368]	; 0x170

		  //roll angle control
		  err_angle_roll = M_roll - euler.angle.roll;
 8003384:	4b67      	ldr	r3, [pc, #412]	; (8003524 <Start_Data_Reading+0xca4>)
 8003386:	ed93 7a00 	vldr	s14, [r3]
 800338a:	4b5d      	ldr	r3, [pc, #372]	; (8003500 <Start_Data_Reading+0xc80>)
 800338c:	edd3 7a00 	vldr	s15, [r3]
 8003390:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003394:	edc7 7a4d 	vstr	s15, [r7, #308]	; 0x134
		  errd_angle_roll = (err_angle_roll - prev_err_angle_roll)/SAMPLE_PERIOD;
 8003398:	ed97 7a4d 	vldr	s14, [r7, #308]	; 0x134
 800339c:	edd7 7a66 	vldr	s15, [r7, #408]	; 0x198
 80033a0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80033a4:	eddf 6a62 	vldr	s13, [pc, #392]	; 8003530 <Start_Data_Reading+0xcb0>
 80033a8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80033ac:	edc7 7a4c 	vstr	s15, [r7, #304]	; 0x130
		  angle_control_roll = P_angle_roll * err_angle_roll + D_angle_roll * errd_angle_roll;
 80033b0:	ed97 7a4f 	vldr	s14, [r7, #316]	; 0x13c
 80033b4:	edd7 7a4d 	vldr	s15, [r7, #308]	; 0x134
 80033b8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80033bc:	edd7 6a4e 	vldr	s13, [r7, #312]	; 0x138
 80033c0:	edd7 7a4c 	vldr	s15, [r7, #304]	; 0x130
 80033c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80033c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033cc:	edc7 7a4b 	vstr	s15, [r7, #300]	; 0x12c
		  prev_err_angle_roll = err_angle_roll;
 80033d0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80033d4:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
		  debug_control1 = err_angle_roll;
 80033d8:	4a57      	ldr	r2, [pc, #348]	; (8003538 <Start_Data_Reading+0xcb8>)
 80033da:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80033de:	6013      	str	r3, [r2, #0]


		  //roll angle velocity control
		  err_roll = angle_control_roll - imu.gyr_rps[0]; //M_roll
 80033e0:	4b54      	ldr	r3, [pc, #336]	; (8003534 <Start_Data_Reading+0xcb4>)
 80033e2:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80033e6:	ed97 7a4b 	vldr	s14, [r7, #300]	; 0x12c
 80033ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80033ee:	edc7 7a54 	vstr	s15, [r7, #336]	; 0x150
		  errd_roll = (err_roll - prev_err_roll)/SAMPLE_PERIOD;
 80033f2:	ed97 7a54 	vldr	s14, [r7, #336]	; 0x150
 80033f6:	edd7 7a67 	vldr	s15, [r7, #412]	; 0x19c
 80033fa:	ee37 7a67 	vsub.f32	s14, s14, s15
 80033fe:	eddf 6a4c 	vldr	s13, [pc, #304]	; 8003530 <Start_Data_Reading+0xcb0>
 8003402:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003406:	edc7 7a53 	vstr	s15, [r7, #332]	; 0x14c
		  prev_err_roll = err_roll;
 800340a:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800340e:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
		  control_roll = P_roll * err_roll + D_roll * errd_roll;
 8003412:	ed97 7a51 	vldr	s14, [r7, #324]	; 0x144
 8003416:	edd7 7a54 	vldr	s15, [r7, #336]	; 0x150
 800341a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800341e:	edd7 6a50 	vldr	s13, [r7, #320]	; 0x140
 8003422:	edd7 7a53 	vldr	s15, [r7, #332]	; 0x14c
 8003426:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800342a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800342e:	edc7 7a52 	vstr	s15, [r7, #328]	; 0x148
		  debug_control2 = control_roll;
 8003432:	4a42      	ldr	r2, [pc, #264]	; (800353c <Start_Data_Reading+0xcbc>)
 8003434:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8003438:	6013      	str	r3, [r2, #0]


		  //yaw angle control
//		  err_angle_yaw = M_yaw - euler.angle.yaw;
		  err_angle_yaw = M_yaw - yaw_angle;
 800343a:	4b3c      	ldr	r3, [pc, #240]	; (800352c <Start_Data_Reading+0xcac>)
 800343c:	ed93 7a00 	vldr	s14, [r3]
 8003440:	edd7 7a42 	vldr	s15, [r7, #264]	; 0x108
 8003444:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003448:	edc7 7a45 	vstr	s15, [r7, #276]	; 0x114
		  errd_angle_yaw = (err_angle_yaw - prev_err_angle_yaw)/SAMPLE_PERIOD;
 800344c:	ed97 7a45 	vldr	s14, [r7, #276]	; 0x114
 8003450:	edd7 7a62 	vldr	s15, [r7, #392]	; 0x188
 8003454:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003458:	eddf 6a35 	vldr	s13, [pc, #212]	; 8003530 <Start_Data_Reading+0xcb0>
 800345c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003460:	edc7 7a44 	vstr	s15, [r7, #272]	; 0x110
		  angle_control_yaw = P_angle_yaw * err_angle_yaw + D_angle_yaw * errd_angle_yaw;
 8003464:	ed97 7a47 	vldr	s14, [r7, #284]	; 0x11c
 8003468:	edd7 7a45 	vldr	s15, [r7, #276]	; 0x114
 800346c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003470:	edd7 6a46 	vldr	s13, [r7, #280]	; 0x118
 8003474:	edd7 7a44 	vldr	s15, [r7, #272]	; 0x110
 8003478:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800347c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003480:	edc7 7a43 	vstr	s15, [r7, #268]	; 0x10c
		  prev_err_angle_yaw = err_angle_yaw;
 8003484:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003488:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188



		  //yaw angle velocity control
		  err_yaw = angle_control_yaw - imu.gyr_rps[2]; //angle_control_yaw
 800348c:	4b29      	ldr	r3, [pc, #164]	; (8003534 <Start_Data_Reading+0xcb4>)
 800348e:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8003492:	ed97 7a43 	vldr	s14, [r7, #268]	; 0x10c
 8003496:	ee77 7a67 	vsub.f32	s15, s14, s15
 800349a:	edc7 7a4a 	vstr	s15, [r7, #296]	; 0x128
		  errd_yaw = (err_yaw - prev_err_yaw)/SAMPLE_PERIOD;
 800349e:	ed97 7a4a 	vldr	s14, [r7, #296]	; 0x128
 80034a2:	edd7 7a65 	vldr	s15, [r7, #404]	; 0x194
 80034a6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80034aa:	eddf 6a21 	vldr	s13, [pc, #132]	; 8003530 <Start_Data_Reading+0xcb0>
 80034ae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80034b2:	edc7 7a49 	vstr	s15, [r7, #292]	; 0x124
		  prev_err_yaw = err_yaw;
 80034b6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80034ba:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
		  control_yaw = P_yaw * err_yaw + D_yaw * errd_yaw;
 80034be:	ed97 7a64 	vldr	s14, [r7, #400]	; 0x190
 80034c2:	edd7 7a4a 	vldr	s15, [r7, #296]	; 0x128
 80034c6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80034ca:	edd7 6a63 	vldr	s13, [r7, #396]	; 0x18c
 80034ce:	edd7 7a49 	vldr	s15, [r7, #292]	; 0x124
 80034d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80034d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034da:	edc7 7a48 	vstr	s15, [r7, #288]	; 0x120



		  if(RX_arm > 1000){
 80034de:	4b18      	ldr	r3, [pc, #96]	; (8003540 <Start_Data_Reading+0xcc0>)
 80034e0:	881b      	ldrh	r3, [r3, #0]
 80034e2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80034e6:	e02d      	b.n	8003544 <Start_Data_Reading+0xcc4>
 80034e8:	f45e0b4e 	.word	0xf45e0b4e
 80034ec:	4023b415 	.word	0x4023b415
 80034f0:	33333333 	.word	0x33333333
 80034f4:	3fd33333 	.word	0x3fd33333
 80034f8:	20000af8 	.word	0x20000af8
 80034fc:	432a0000 	.word	0x432a0000
 8003500:	20000ac8 	.word	0x20000ac8
 8003504:	c32a0000 	.word	0xc32a0000
 8003508:	40768000 	.word	0x40768000
 800350c:	20000a50 	.word	0x20000a50
 8003510:	20002af8 	.word	0x20002af8
 8003514:	20002afc 	.word	0x20002afc
 8003518:	20002af4 	.word	0x20002af4
 800351c:	20002b00 	.word	0x20002b00
 8003520:	20002af2 	.word	0x20002af2
 8003524:	20002b04 	.word	0x20002b04
 8003528:	20002af6 	.word	0x20002af6
 800352c:	20002b08 	.word	0x20002b08
 8003530:	3ba3d70a 	.word	0x3ba3d70a
 8003534:	20000970 	.word	0x20000970
 8003538:	20002b0c 	.word	0x20002b0c
 800353c:	20002b10 	.word	0x20002b10
 8003540:	20002afa 	.word	0x20002afa
 8003544:	f240 80ac 	bls.w	80036a0 <Start_Data_Reading+0xe20>
			  uart_telemetria = 0;
 8003548:	4bb9      	ldr	r3, [pc, #740]	; (8003830 <Start_Data_Reading+0xfb0>)
 800354a:	2200      	movs	r2, #0
 800354c:	701a      	strb	r2, [r3, #0]
//			  ref2 = (uint16_t)(M_throttle + control_yaw);
//			  ref3 = (uint16_t)(M_throttle - control_yaw);
//			  ref4 = (uint16_t)(M_throttle + control_yaw);

			  //all together
			  ref1 = (uint16_t)(M_throttle - control_yaw - control_pitch + control_roll);
 800354e:	4bb9      	ldr	r3, [pc, #740]	; (8003834 <Start_Data_Reading+0xfb4>)
 8003550:	ed93 7a00 	vldr	s14, [r3]
 8003554:	edd7 7a48 	vldr	s15, [r7, #288]	; 0x120
 8003558:	ee37 7a67 	vsub.f32	s14, s14, s15
 800355c:	edd7 7a5c 	vldr	s15, [r7, #368]	; 0x170
 8003560:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003564:	edd7 7a52 	vldr	s15, [r7, #328]	; 0x148
 8003568:	ee77 7a27 	vadd.f32	s15, s14, s15
 800356c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003570:	ee17 3a90 	vmov	r3, s15
 8003574:	b29a      	uxth	r2, r3
 8003576:	4bb0      	ldr	r3, [pc, #704]	; (8003838 <Start_Data_Reading+0xfb8>)
 8003578:	801a      	strh	r2, [r3, #0]
			  ref2 = (uint16_t)(M_throttle + control_yaw - control_pitch - control_roll);
 800357a:	4bae      	ldr	r3, [pc, #696]	; (8003834 <Start_Data_Reading+0xfb4>)
 800357c:	ed93 7a00 	vldr	s14, [r3]
 8003580:	edd7 7a48 	vldr	s15, [r7, #288]	; 0x120
 8003584:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003588:	edd7 7a5c 	vldr	s15, [r7, #368]	; 0x170
 800358c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003590:	edd7 7a52 	vldr	s15, [r7, #328]	; 0x148
 8003594:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003598:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800359c:	ee17 3a90 	vmov	r3, s15
 80035a0:	b29a      	uxth	r2, r3
 80035a2:	4ba6      	ldr	r3, [pc, #664]	; (800383c <Start_Data_Reading+0xfbc>)
 80035a4:	801a      	strh	r2, [r3, #0]
			  ref3 = (uint16_t)(M_throttle - control_yaw + control_pitch - control_roll);
 80035a6:	4ba3      	ldr	r3, [pc, #652]	; (8003834 <Start_Data_Reading+0xfb4>)
 80035a8:	ed93 7a00 	vldr	s14, [r3]
 80035ac:	edd7 7a48 	vldr	s15, [r7, #288]	; 0x120
 80035b0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80035b4:	edd7 7a5c 	vldr	s15, [r7, #368]	; 0x170
 80035b8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80035bc:	edd7 7a52 	vldr	s15, [r7, #328]	; 0x148
 80035c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80035c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80035c8:	ee17 3a90 	vmov	r3, s15
 80035cc:	b29a      	uxth	r2, r3
 80035ce:	4b9c      	ldr	r3, [pc, #624]	; (8003840 <Start_Data_Reading+0xfc0>)
 80035d0:	801a      	strh	r2, [r3, #0]
			  ref4 = (uint16_t)(M_throttle + control_yaw + control_pitch + control_roll);
 80035d2:	4b98      	ldr	r3, [pc, #608]	; (8003834 <Start_Data_Reading+0xfb4>)
 80035d4:	ed93 7a00 	vldr	s14, [r3]
 80035d8:	edd7 7a48 	vldr	s15, [r7, #288]	; 0x120
 80035dc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80035e0:	edd7 7a5c 	vldr	s15, [r7, #368]	; 0x170
 80035e4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80035e8:	edd7 7a52 	vldr	s15, [r7, #328]	; 0x148
 80035ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80035f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80035f4:	ee17 3a90 	vmov	r3, s15
 80035f8:	b29a      	uxth	r2, r3
 80035fa:	4b92      	ldr	r3, [pc, #584]	; (8003844 <Start_Data_Reading+0xfc4>)
 80035fc:	801a      	strh	r2, [r3, #0]
//			  ref1 = (uint16_t)(M_throttle - control_pitch + control_roll);
//			  ref2 = (uint16_t)(M_throttle - control_pitch - control_roll);
//			  ref3 = (uint16_t)(M_throttle + control_pitch - control_roll);
//			  ref4 = (uint16_t)(M_throttle + control_pitch + control_roll);

			  if(ref1<550) ref1 = 550;
 80035fe:	4b8e      	ldr	r3, [pc, #568]	; (8003838 <Start_Data_Reading+0xfb8>)
 8003600:	881b      	ldrh	r3, [r3, #0]
 8003602:	f240 2225 	movw	r2, #549	; 0x225
 8003606:	4293      	cmp	r3, r2
 8003608:	d803      	bhi.n	8003612 <Start_Data_Reading+0xd92>
 800360a:	4b8b      	ldr	r3, [pc, #556]	; (8003838 <Start_Data_Reading+0xfb8>)
 800360c:	f240 2226 	movw	r2, #550	; 0x226
 8003610:	801a      	strh	r2, [r3, #0]
			  if(ref2<550) ref2 = 550;
 8003612:	4b8a      	ldr	r3, [pc, #552]	; (800383c <Start_Data_Reading+0xfbc>)
 8003614:	881b      	ldrh	r3, [r3, #0]
 8003616:	f240 2225 	movw	r2, #549	; 0x225
 800361a:	4293      	cmp	r3, r2
 800361c:	d803      	bhi.n	8003626 <Start_Data_Reading+0xda6>
 800361e:	4b87      	ldr	r3, [pc, #540]	; (800383c <Start_Data_Reading+0xfbc>)
 8003620:	f240 2226 	movw	r2, #550	; 0x226
 8003624:	801a      	strh	r2, [r3, #0]
			  if(ref3<550) ref3 = 550;
 8003626:	4b86      	ldr	r3, [pc, #536]	; (8003840 <Start_Data_Reading+0xfc0>)
 8003628:	881b      	ldrh	r3, [r3, #0]
 800362a:	f240 2225 	movw	r2, #549	; 0x225
 800362e:	4293      	cmp	r3, r2
 8003630:	d803      	bhi.n	800363a <Start_Data_Reading+0xdba>
 8003632:	4b83      	ldr	r3, [pc, #524]	; (8003840 <Start_Data_Reading+0xfc0>)
 8003634:	f240 2226 	movw	r2, #550	; 0x226
 8003638:	801a      	strh	r2, [r3, #0]
			  if(ref4<550) ref4 = 550;
 800363a:	4b82      	ldr	r3, [pc, #520]	; (8003844 <Start_Data_Reading+0xfc4>)
 800363c:	881b      	ldrh	r3, [r3, #0]
 800363e:	f240 2225 	movw	r2, #549	; 0x225
 8003642:	4293      	cmp	r3, r2
 8003644:	d803      	bhi.n	800364e <Start_Data_Reading+0xdce>
 8003646:	4b7f      	ldr	r3, [pc, #508]	; (8003844 <Start_Data_Reading+0xfc4>)
 8003648:	f240 2226 	movw	r2, #550	; 0x226
 800364c:	801a      	strh	r2, [r3, #0]

			  if(ref1>950) ref1 = 950;
 800364e:	4b7a      	ldr	r3, [pc, #488]	; (8003838 <Start_Data_Reading+0xfb8>)
 8003650:	881b      	ldrh	r3, [r3, #0]
 8003652:	f240 32b6 	movw	r2, #950	; 0x3b6
 8003656:	4293      	cmp	r3, r2
 8003658:	d903      	bls.n	8003662 <Start_Data_Reading+0xde2>
 800365a:	4b77      	ldr	r3, [pc, #476]	; (8003838 <Start_Data_Reading+0xfb8>)
 800365c:	f240 32b6 	movw	r2, #950	; 0x3b6
 8003660:	801a      	strh	r2, [r3, #0]
			  if(ref2>950) ref2 = 950;
 8003662:	4b76      	ldr	r3, [pc, #472]	; (800383c <Start_Data_Reading+0xfbc>)
 8003664:	881b      	ldrh	r3, [r3, #0]
 8003666:	f240 32b6 	movw	r2, #950	; 0x3b6
 800366a:	4293      	cmp	r3, r2
 800366c:	d903      	bls.n	8003676 <Start_Data_Reading+0xdf6>
 800366e:	4b73      	ldr	r3, [pc, #460]	; (800383c <Start_Data_Reading+0xfbc>)
 8003670:	f240 32b6 	movw	r2, #950	; 0x3b6
 8003674:	801a      	strh	r2, [r3, #0]
			  if(ref3>950) ref3 = 950;
 8003676:	4b72      	ldr	r3, [pc, #456]	; (8003840 <Start_Data_Reading+0xfc0>)
 8003678:	881b      	ldrh	r3, [r3, #0]
 800367a:	f240 32b6 	movw	r2, #950	; 0x3b6
 800367e:	4293      	cmp	r3, r2
 8003680:	d903      	bls.n	800368a <Start_Data_Reading+0xe0a>
 8003682:	4b6f      	ldr	r3, [pc, #444]	; (8003840 <Start_Data_Reading+0xfc0>)
 8003684:	f240 32b6 	movw	r2, #950	; 0x3b6
 8003688:	801a      	strh	r2, [r3, #0]
			  if(ref4>950) ref4 = 950;
 800368a:	4b6e      	ldr	r3, [pc, #440]	; (8003844 <Start_Data_Reading+0xfc4>)
 800368c:	881b      	ldrh	r3, [r3, #0]
 800368e:	f240 32b6 	movw	r2, #950	; 0x3b6
 8003692:	4293      	cmp	r3, r2
 8003694:	d931      	bls.n	80036fa <Start_Data_Reading+0xe7a>
 8003696:	4b6b      	ldr	r3, [pc, #428]	; (8003844 <Start_Data_Reading+0xfc4>)
 8003698:	f240 32b6 	movw	r2, #950	; 0x3b6
 800369c:	801a      	strh	r2, [r3, #0]
 800369e:	e02c      	b.n	80036fa <Start_Data_Reading+0xe7a>
//			  ref2 = (uint16_t)CRSFtoDuty(RX_throttle);
//			  ref3 = (uint16_t)CRSFtoDuty(RX_throttle);
//			  ref4 = (uint16_t)CRSFtoDuty(RX_throttle);
		  }
		  else{
			  uart_telemetria = 1;
 80036a0:	4b63      	ldr	r3, [pc, #396]	; (8003830 <Start_Data_Reading+0xfb0>)
 80036a2:	2201      	movs	r2, #1
 80036a4:	701a      	strb	r2, [r3, #0]
			  if(new_P == 1){
 80036a6:	4b68      	ldr	r3, [pc, #416]	; (8003848 <Start_Data_Reading+0xfc8>)
 80036a8:	781b      	ldrb	r3, [r3, #0]
 80036aa:	2b01      	cmp	r3, #1
 80036ac:	d106      	bne.n	80036bc <Start_Data_Reading+0xe3c>
				  P_yaw = telem_P;
 80036ae:	4b67      	ldr	r3, [pc, #412]	; (800384c <Start_Data_Reading+0xfcc>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
				  new_P = 0;
 80036b6:	4b64      	ldr	r3, [pc, #400]	; (8003848 <Start_Data_Reading+0xfc8>)
 80036b8:	2200      	movs	r2, #0
 80036ba:	701a      	strb	r2, [r3, #0]
			  }
			  if(new_D == 1){
 80036bc:	4b64      	ldr	r3, [pc, #400]	; (8003850 <Start_Data_Reading+0xfd0>)
 80036be:	781b      	ldrb	r3, [r3, #0]
 80036c0:	2b01      	cmp	r3, #1
 80036c2:	d106      	bne.n	80036d2 <Start_Data_Reading+0xe52>
				  D_yaw = telem_D;
 80036c4:	4b63      	ldr	r3, [pc, #396]	; (8003854 <Start_Data_Reading+0xfd4>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
				  new_D = 0;
 80036cc:	4b60      	ldr	r3, [pc, #384]	; (8003850 <Start_Data_Reading+0xfd0>)
 80036ce:	2200      	movs	r2, #0
 80036d0:	701a      	strb	r2, [r3, #0]
			  }
			  // yaw angle reference set to the AHRS calculated yaw angle, this is to prevent the angle offset during arm switch off state
			  M_yaw = yaw_angle;
 80036d2:	4a61      	ldr	r2, [pc, #388]	; (8003858 <Start_Data_Reading+0xfd8>)
 80036d4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80036d8:	6013      	str	r3, [r2, #0]

			  ref1 = 550;
 80036da:	4b57      	ldr	r3, [pc, #348]	; (8003838 <Start_Data_Reading+0xfb8>)
 80036dc:	f240 2226 	movw	r2, #550	; 0x226
 80036e0:	801a      	strh	r2, [r3, #0]
			  ref2 = 550;
 80036e2:	4b56      	ldr	r3, [pc, #344]	; (800383c <Start_Data_Reading+0xfbc>)
 80036e4:	f240 2226 	movw	r2, #550	; 0x226
 80036e8:	801a      	strh	r2, [r3, #0]
			  ref3 = 550;
 80036ea:	4b55      	ldr	r3, [pc, #340]	; (8003840 <Start_Data_Reading+0xfc0>)
 80036ec:	f240 2226 	movw	r2, #550	; 0x226
 80036f0:	801a      	strh	r2, [r3, #0]
			  ref4 = 550;
 80036f2:	4b54      	ldr	r3, [pc, #336]	; (8003844 <Start_Data_Reading+0xfc4>)
 80036f4:	f240 2226 	movw	r2, #550	; 0x226
 80036f8:	801a      	strh	r2, [r3, #0]
		  }


		  //telemetria
		  telemetria_float[0] = accelerometer.axis.x;
 80036fa:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 80036fe:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003702:	681a      	ldr	r2, [r3, #0]
 8003704:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8003708:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800370c:	601a      	str	r2, [r3, #0]
		  telemetria_float[1] = accelerometer.axis.y;
 800370e:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8003712:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003716:	685a      	ldr	r2, [r3, #4]
 8003718:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800371c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003720:	605a      	str	r2, [r3, #4]
		  telemetria_float[2] = accelerometer.axis.z;
 8003722:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8003726:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800372a:	689a      	ldr	r2, [r3, #8]
 800372c:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8003730:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003734:	609a      	str	r2, [r3, #8]
		  telemetria_float[3] = gyroscope.axis.x;
 8003736:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800373a:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800373e:	681a      	ldr	r2, [r3, #0]
 8003740:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8003744:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003748:	60da      	str	r2, [r3, #12]
		  telemetria_float[4] = gyroscope.axis.y;
 800374a:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800374e:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8003752:	685a      	ldr	r2, [r3, #4]
 8003754:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8003758:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800375c:	611a      	str	r2, [r3, #16]
		  telemetria_float[5] = gyroscope.axis.z;
 800375e:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8003762:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8003766:	689a      	ldr	r2, [r3, #8]
 8003768:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800376c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003770:	615a      	str	r2, [r3, #20]
		  telemetria_float[6] = euler.angle.roll;
 8003772:	4b3a      	ldr	r3, [pc, #232]	; (800385c <Start_Data_Reading+0xfdc>)
 8003774:	681a      	ldr	r2, [r3, #0]
 8003776:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800377a:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800377e:	619a      	str	r2, [r3, #24]
		  telemetria_float[7] = euler.angle.pitch;
 8003780:	4b36      	ldr	r3, [pc, #216]	; (800385c <Start_Data_Reading+0xfdc>)
 8003782:	685a      	ldr	r2, [r3, #4]
 8003784:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8003788:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800378c:	61da      	str	r2, [r3, #28]
		  telemetria_float[8] = euler.angle.yaw;
 800378e:	4b33      	ldr	r3, [pc, #204]	; (800385c <Start_Data_Reading+0xfdc>)
 8003790:	689a      	ldr	r2, [r3, #8]
 8003792:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8003796:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800379a:	621a      	str	r2, [r3, #32]
		  telemetria_float[9] = (float)ref1;
 800379c:	4b26      	ldr	r3, [pc, #152]	; (8003838 <Start_Data_Reading+0xfb8>)
 800379e:	881b      	ldrh	r3, [r3, #0]
 80037a0:	ee07 3a90 	vmov	s15, r3
 80037a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037a8:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 80037ac:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80037b0:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
		  telemetria_float[10] = (float)ref2;
 80037b4:	4b21      	ldr	r3, [pc, #132]	; (800383c <Start_Data_Reading+0xfbc>)
 80037b6:	881b      	ldrh	r3, [r3, #0]
 80037b8:	ee07 3a90 	vmov	s15, r3
 80037bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037c0:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 80037c4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80037c8:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		  telemetria_float[11] = (float)ref3;
 80037cc:	4b1c      	ldr	r3, [pc, #112]	; (8003840 <Start_Data_Reading+0xfc0>)
 80037ce:	881b      	ldrh	r3, [r3, #0]
 80037d0:	ee07 3a90 	vmov	s15, r3
 80037d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037d8:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 80037dc:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80037e0:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
		  telemetria_float[12] = (float)ref4;
 80037e4:	4b17      	ldr	r3, [pc, #92]	; (8003844 <Start_Data_Reading+0xfc4>)
 80037e6:	881b      	ldrh	r3, [r3, #0]
 80037e8:	ee07 3a90 	vmov	s15, r3
 80037ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037f0:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 80037f4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80037f8:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
		  xQueueSendToFront(telemetria_Queue, (void*)&telemetria_float, 0);
 80037fc:	4b18      	ldr	r3, [pc, #96]	; (8003860 <Start_Data_Reading+0xfe0>)
 80037fe:	6818      	ldr	r0, [r3, #0]
 8003800:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8003804:	2301      	movs	r3, #1
 8003806:	2200      	movs	r2, #0
 8003808:	f009 fc78 	bl	800d0fc <xQueueGenericSend>




		  //set_duty_Oneshot42(&htim3, 550, 550, 550, 550);
		  set_duty_Oneshot42(&htim3, ref1, ref2, ref3, ref4);
 800380c:	4b0a      	ldr	r3, [pc, #40]	; (8003838 <Start_Data_Reading+0xfb8>)
 800380e:	8819      	ldrh	r1, [r3, #0]
 8003810:	4b0a      	ldr	r3, [pc, #40]	; (800383c <Start_Data_Reading+0xfbc>)
 8003812:	881a      	ldrh	r2, [r3, #0]
 8003814:	4b0a      	ldr	r3, [pc, #40]	; (8003840 <Start_Data_Reading+0xfc0>)
 8003816:	8818      	ldrh	r0, [r3, #0]
 8003818:	4b0a      	ldr	r3, [pc, #40]	; (8003844 <Start_Data_Reading+0xfc4>)
 800381a:	881b      	ldrh	r3, [r3, #0]
 800381c:	9300      	str	r3, [sp, #0]
 800381e:	4603      	mov	r3, r0
 8003820:	4810      	ldr	r0, [pc, #64]	; (8003864 <Start_Data_Reading+0xfe4>)
 8003822:	f001 fd0e 	bl	8005242 <set_duty_Oneshot42>
	osDelay(3);
 8003826:	2003      	movs	r0, #3
 8003828:	f009 fade 	bl	800cde8 <osDelay>
  {
 800382c:	f7ff ba32 	b.w	8002c94 <Start_Data_Reading+0x414>
 8003830:	20000b12 	.word	0x20000b12
 8003834:	20002afc 	.word	0x20002afc
 8003838:	20002aa4 	.word	0x20002aa4
 800383c:	20002aa6 	.word	0x20002aa6
 8003840:	20002aa8 	.word	0x20002aa8
 8003844:	20002aaa 	.word	0x20002aaa
 8003848:	20000b1c 	.word	0x20000b1c
 800384c:	20000b14 	.word	0x20000b14
 8003850:	20000b1d 	.word	0x20000b1d
 8003854:	20000b18 	.word	0x20000b18
 8003858:	20002b08 	.word	0x20002b08
 800385c:	20000ac8 	.word	0x20000ac8
 8003860:	20002b14 	.word	0x20002b14
 8003864:	200006d4 	.word	0x200006d4

08003868 <Start_Orientation>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_Orientation */
void Start_Orientation(void const * argument)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b082      	sub	sp, #8
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
//		//filterUpdateIMU(imu.gyr_rps[0], imu.gyr_rps[1], imu.gyr_rps[2], imu.acc_mps2[0], imu.acc_mps2[1], imu.acc_mps2[2], &q );
//		filterUpdate(imu.gyr_rps[0], imu.gyr_rps[1], imu.gyr_rps[2], imu.acc_mps2[0], imu.acc_mps2[1], imu.acc_mps2[2], mag_data_y, -mag_data_x, mag_data_z, &q, &f);
//		eulerAngles(q, &roll, &pitch, &yaw);
//		oricalc = 0;
//	  }
    osDelay(1);
 8003870:	2001      	movs	r0, #1
 8003872:	f009 fab9 	bl	800cde8 <osDelay>
 8003876:	e7fb      	b.n	8003870 <Start_Orientation+0x8>

08003878 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003878:	b480      	push	{r7}
 800387a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800387c:	b672      	cpsid	i
}
 800387e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003880:	e7fe      	b.n	8003880 <Error_Handler+0x8>
	...

08003884 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b082      	sub	sp, #8
 8003888:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800388a:	2300      	movs	r3, #0
 800388c:	607b      	str	r3, [r7, #4]
 800388e:	4b12      	ldr	r3, [pc, #72]	; (80038d8 <HAL_MspInit+0x54>)
 8003890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003892:	4a11      	ldr	r2, [pc, #68]	; (80038d8 <HAL_MspInit+0x54>)
 8003894:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003898:	6453      	str	r3, [r2, #68]	; 0x44
 800389a:	4b0f      	ldr	r3, [pc, #60]	; (80038d8 <HAL_MspInit+0x54>)
 800389c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800389e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038a2:	607b      	str	r3, [r7, #4]
 80038a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80038a6:	2300      	movs	r3, #0
 80038a8:	603b      	str	r3, [r7, #0]
 80038aa:	4b0b      	ldr	r3, [pc, #44]	; (80038d8 <HAL_MspInit+0x54>)
 80038ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ae:	4a0a      	ldr	r2, [pc, #40]	; (80038d8 <HAL_MspInit+0x54>)
 80038b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038b4:	6413      	str	r3, [r2, #64]	; 0x40
 80038b6:	4b08      	ldr	r3, [pc, #32]	; (80038d8 <HAL_MspInit+0x54>)
 80038b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038be:	603b      	str	r3, [r7, #0]
 80038c0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80038c2:	2200      	movs	r2, #0
 80038c4:	210f      	movs	r1, #15
 80038c6:	f06f 0001 	mvn.w	r0, #1
 80038ca:	f002 f94c 	bl	8005b66 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80038ce:	bf00      	nop
 80038d0:	3708      	adds	r7, #8
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}
 80038d6:	bf00      	nop
 80038d8:	40023800 	.word	0x40023800

080038dc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b08e      	sub	sp, #56	; 0x38
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80038e8:	2200      	movs	r2, #0
 80038ea:	601a      	str	r2, [r3, #0]
 80038ec:	605a      	str	r2, [r3, #4]
 80038ee:	609a      	str	r2, [r3, #8]
 80038f0:	60da      	str	r2, [r3, #12]
 80038f2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a45      	ldr	r2, [pc, #276]	; (8003a10 <HAL_ADC_MspInit+0x134>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d128      	bne.n	8003950 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80038fe:	2300      	movs	r3, #0
 8003900:	623b      	str	r3, [r7, #32]
 8003902:	4b44      	ldr	r3, [pc, #272]	; (8003a14 <HAL_ADC_MspInit+0x138>)
 8003904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003906:	4a43      	ldr	r2, [pc, #268]	; (8003a14 <HAL_ADC_MspInit+0x138>)
 8003908:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800390c:	6453      	str	r3, [r2, #68]	; 0x44
 800390e:	4b41      	ldr	r3, [pc, #260]	; (8003a14 <HAL_ADC_MspInit+0x138>)
 8003910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003912:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003916:	623b      	str	r3, [r7, #32]
 8003918:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800391a:	2300      	movs	r3, #0
 800391c:	61fb      	str	r3, [r7, #28]
 800391e:	4b3d      	ldr	r3, [pc, #244]	; (8003a14 <HAL_ADC_MspInit+0x138>)
 8003920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003922:	4a3c      	ldr	r2, [pc, #240]	; (8003a14 <HAL_ADC_MspInit+0x138>)
 8003924:	f043 0301 	orr.w	r3, r3, #1
 8003928:	6313      	str	r3, [r2, #48]	; 0x30
 800392a:	4b3a      	ldr	r3, [pc, #232]	; (8003a14 <HAL_ADC_MspInit+0x138>)
 800392c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800392e:	f003 0301 	and.w	r3, r3, #1
 8003932:	61fb      	str	r3, [r7, #28]
 8003934:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = CRNT_Pin;
 8003936:	2320      	movs	r3, #32
 8003938:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800393a:	2303      	movs	r3, #3
 800393c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800393e:	2300      	movs	r3, #0
 8003940:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CRNT_GPIO_Port, &GPIO_InitStruct);
 8003942:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003946:	4619      	mov	r1, r3
 8003948:	4833      	ldr	r0, [pc, #204]	; (8003a18 <HAL_ADC_MspInit+0x13c>)
 800394a:	f002 fd45 	bl	80063d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800394e:	e05a      	b.n	8003a06 <HAL_ADC_MspInit+0x12a>
  else if(hadc->Instance==ADC2)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a31      	ldr	r2, [pc, #196]	; (8003a1c <HAL_ADC_MspInit+0x140>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d128      	bne.n	80039ac <HAL_ADC_MspInit+0xd0>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800395a:	2300      	movs	r3, #0
 800395c:	61bb      	str	r3, [r7, #24]
 800395e:	4b2d      	ldr	r3, [pc, #180]	; (8003a14 <HAL_ADC_MspInit+0x138>)
 8003960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003962:	4a2c      	ldr	r2, [pc, #176]	; (8003a14 <HAL_ADC_MspInit+0x138>)
 8003964:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003968:	6453      	str	r3, [r2, #68]	; 0x44
 800396a:	4b2a      	ldr	r3, [pc, #168]	; (8003a14 <HAL_ADC_MspInit+0x138>)
 800396c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800396e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003972:	61bb      	str	r3, [r7, #24]
 8003974:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003976:	2300      	movs	r3, #0
 8003978:	617b      	str	r3, [r7, #20]
 800397a:	4b26      	ldr	r3, [pc, #152]	; (8003a14 <HAL_ADC_MspInit+0x138>)
 800397c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800397e:	4a25      	ldr	r2, [pc, #148]	; (8003a14 <HAL_ADC_MspInit+0x138>)
 8003980:	f043 0301 	orr.w	r3, r3, #1
 8003984:	6313      	str	r3, [r2, #48]	; 0x30
 8003986:	4b23      	ldr	r3, [pc, #140]	; (8003a14 <HAL_ADC_MspInit+0x138>)
 8003988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800398a:	f003 0301 	and.w	r3, r3, #1
 800398e:	617b      	str	r3, [r7, #20]
 8003990:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003992:	2310      	movs	r3, #16
 8003994:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003996:	2303      	movs	r3, #3
 8003998:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800399a:	2300      	movs	r3, #0
 800399c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800399e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80039a2:	4619      	mov	r1, r3
 80039a4:	481c      	ldr	r0, [pc, #112]	; (8003a18 <HAL_ADC_MspInit+0x13c>)
 80039a6:	f002 fd17 	bl	80063d8 <HAL_GPIO_Init>
}
 80039aa:	e02c      	b.n	8003a06 <HAL_ADC_MspInit+0x12a>
  else if(hadc->Instance==ADC3)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a1b      	ldr	r2, [pc, #108]	; (8003a20 <HAL_ADC_MspInit+0x144>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d127      	bne.n	8003a06 <HAL_ADC_MspInit+0x12a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80039b6:	2300      	movs	r3, #0
 80039b8:	613b      	str	r3, [r7, #16]
 80039ba:	4b16      	ldr	r3, [pc, #88]	; (8003a14 <HAL_ADC_MspInit+0x138>)
 80039bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039be:	4a15      	ldr	r2, [pc, #84]	; (8003a14 <HAL_ADC_MspInit+0x138>)
 80039c0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80039c4:	6453      	str	r3, [r2, #68]	; 0x44
 80039c6:	4b13      	ldr	r3, [pc, #76]	; (8003a14 <HAL_ADC_MspInit+0x138>)
 80039c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039ce:	613b      	str	r3, [r7, #16]
 80039d0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80039d2:	2300      	movs	r3, #0
 80039d4:	60fb      	str	r3, [r7, #12]
 80039d6:	4b0f      	ldr	r3, [pc, #60]	; (8003a14 <HAL_ADC_MspInit+0x138>)
 80039d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039da:	4a0e      	ldr	r2, [pc, #56]	; (8003a14 <HAL_ADC_MspInit+0x138>)
 80039dc:	f043 0304 	orr.w	r3, r3, #4
 80039e0:	6313      	str	r3, [r2, #48]	; 0x30
 80039e2:	4b0c      	ldr	r3, [pc, #48]	; (8003a14 <HAL_ADC_MspInit+0x138>)
 80039e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039e6:	f003 0304 	and.w	r3, r3, #4
 80039ea:	60fb      	str	r3, [r7, #12]
 80039ec:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80039ee:	2308      	movs	r3, #8
 80039f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80039f2:	2303      	movs	r3, #3
 80039f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039f6:	2300      	movs	r3, #0
 80039f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80039fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80039fe:	4619      	mov	r1, r3
 8003a00:	4808      	ldr	r0, [pc, #32]	; (8003a24 <HAL_ADC_MspInit+0x148>)
 8003a02:	f002 fce9 	bl	80063d8 <HAL_GPIO_Init>
}
 8003a06:	bf00      	nop
 8003a08:	3738      	adds	r7, #56	; 0x38
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}
 8003a0e:	bf00      	nop
 8003a10:	40012000 	.word	0x40012000
 8003a14:	40023800 	.word	0x40023800
 8003a18:	40020000 	.word	0x40020000
 8003a1c:	40012100 	.word	0x40012100
 8003a20:	40012200 	.word	0x40012200
 8003a24:	40020800 	.word	0x40020800

08003a28 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b08e      	sub	sp, #56	; 0x38
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a34:	2200      	movs	r2, #0
 8003a36:	601a      	str	r2, [r3, #0]
 8003a38:	605a      	str	r2, [r3, #4]
 8003a3a:	609a      	str	r2, [r3, #8]
 8003a3c:	60da      	str	r2, [r3, #12]
 8003a3e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a5c      	ldr	r2, [pc, #368]	; (8003bb8 <HAL_I2C_MspInit+0x190>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d12d      	bne.n	8003aa6 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	623b      	str	r3, [r7, #32]
 8003a4e:	4b5b      	ldr	r3, [pc, #364]	; (8003bbc <HAL_I2C_MspInit+0x194>)
 8003a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a52:	4a5a      	ldr	r2, [pc, #360]	; (8003bbc <HAL_I2C_MspInit+0x194>)
 8003a54:	f043 0302 	orr.w	r3, r3, #2
 8003a58:	6313      	str	r3, [r2, #48]	; 0x30
 8003a5a:	4b58      	ldr	r3, [pc, #352]	; (8003bbc <HAL_I2C_MspInit+0x194>)
 8003a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a5e:	f003 0302 	and.w	r3, r3, #2
 8003a62:	623b      	str	r3, [r7, #32]
 8003a64:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = MAGN_SCL_Pin|MAGN_SDA_Pin;
 8003a66:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003a6a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003a6c:	2312      	movs	r3, #18
 8003a6e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a70:	2300      	movs	r3, #0
 8003a72:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a74:	2303      	movs	r3, #3
 8003a76:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003a78:	2304      	movs	r3, #4
 8003a7a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a80:	4619      	mov	r1, r3
 8003a82:	484f      	ldr	r0, [pc, #316]	; (8003bc0 <HAL_I2C_MspInit+0x198>)
 8003a84:	f002 fca8 	bl	80063d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003a88:	2300      	movs	r3, #0
 8003a8a:	61fb      	str	r3, [r7, #28]
 8003a8c:	4b4b      	ldr	r3, [pc, #300]	; (8003bbc <HAL_I2C_MspInit+0x194>)
 8003a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a90:	4a4a      	ldr	r2, [pc, #296]	; (8003bbc <HAL_I2C_MspInit+0x194>)
 8003a92:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003a96:	6413      	str	r3, [r2, #64]	; 0x40
 8003a98:	4b48      	ldr	r3, [pc, #288]	; (8003bbc <HAL_I2C_MspInit+0x194>)
 8003a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003aa0:	61fb      	str	r3, [r7, #28]
 8003aa2:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8003aa4:	e083      	b.n	8003bae <HAL_I2C_MspInit+0x186>
  else if(hi2c->Instance==I2C2)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a46      	ldr	r2, [pc, #280]	; (8003bc4 <HAL_I2C_MspInit+0x19c>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d12d      	bne.n	8003b0c <HAL_I2C_MspInit+0xe4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	61bb      	str	r3, [r7, #24]
 8003ab4:	4b41      	ldr	r3, [pc, #260]	; (8003bbc <HAL_I2C_MspInit+0x194>)
 8003ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ab8:	4a40      	ldr	r2, [pc, #256]	; (8003bbc <HAL_I2C_MspInit+0x194>)
 8003aba:	f043 0302 	orr.w	r3, r3, #2
 8003abe:	6313      	str	r3, [r2, #48]	; 0x30
 8003ac0:	4b3e      	ldr	r3, [pc, #248]	; (8003bbc <HAL_I2C_MspInit+0x194>)
 8003ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ac4:	f003 0302 	and.w	r3, r3, #2
 8003ac8:	61bb      	str	r3, [r7, #24]
 8003aca:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = PRESS_SCL_Pin|PRESS_SDA_Pin;
 8003acc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003ad0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003ad2:	2312      	movs	r3, #18
 8003ad4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ada:	2303      	movs	r3, #3
 8003adc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003ade:	2304      	movs	r3, #4
 8003ae0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ae2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ae6:	4619      	mov	r1, r3
 8003ae8:	4835      	ldr	r0, [pc, #212]	; (8003bc0 <HAL_I2C_MspInit+0x198>)
 8003aea:	f002 fc75 	bl	80063d8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003aee:	2300      	movs	r3, #0
 8003af0:	617b      	str	r3, [r7, #20]
 8003af2:	4b32      	ldr	r3, [pc, #200]	; (8003bbc <HAL_I2C_MspInit+0x194>)
 8003af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af6:	4a31      	ldr	r2, [pc, #196]	; (8003bbc <HAL_I2C_MspInit+0x194>)
 8003af8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003afc:	6413      	str	r3, [r2, #64]	; 0x40
 8003afe:	4b2f      	ldr	r3, [pc, #188]	; (8003bbc <HAL_I2C_MspInit+0x194>)
 8003b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b06:	617b      	str	r3, [r7, #20]
 8003b08:	697b      	ldr	r3, [r7, #20]
}
 8003b0a:	e050      	b.n	8003bae <HAL_I2C_MspInit+0x186>
  else if(hi2c->Instance==I2C3)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a2d      	ldr	r2, [pc, #180]	; (8003bc8 <HAL_I2C_MspInit+0x1a0>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d14b      	bne.n	8003bae <HAL_I2C_MspInit+0x186>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b16:	2300      	movs	r3, #0
 8003b18:	613b      	str	r3, [r7, #16]
 8003b1a:	4b28      	ldr	r3, [pc, #160]	; (8003bbc <HAL_I2C_MspInit+0x194>)
 8003b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b1e:	4a27      	ldr	r2, [pc, #156]	; (8003bbc <HAL_I2C_MspInit+0x194>)
 8003b20:	f043 0304 	orr.w	r3, r3, #4
 8003b24:	6313      	str	r3, [r2, #48]	; 0x30
 8003b26:	4b25      	ldr	r3, [pc, #148]	; (8003bbc <HAL_I2C_MspInit+0x194>)
 8003b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b2a:	f003 0304 	and.w	r3, r3, #4
 8003b2e:	613b      	str	r3, [r7, #16]
 8003b30:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b32:	2300      	movs	r3, #0
 8003b34:	60fb      	str	r3, [r7, #12]
 8003b36:	4b21      	ldr	r3, [pc, #132]	; (8003bbc <HAL_I2C_MspInit+0x194>)
 8003b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b3a:	4a20      	ldr	r2, [pc, #128]	; (8003bbc <HAL_I2C_MspInit+0x194>)
 8003b3c:	f043 0301 	orr.w	r3, r3, #1
 8003b40:	6313      	str	r3, [r2, #48]	; 0x30
 8003b42:	4b1e      	ldr	r3, [pc, #120]	; (8003bbc <HAL_I2C_MspInit+0x194>)
 8003b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b46:	f003 0301 	and.w	r3, r3, #1
 8003b4a:	60fb      	str	r3, [r7, #12]
 8003b4c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003b4e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003b52:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003b54:	2312      	movs	r3, #18
 8003b56:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b5c:	2303      	movs	r3, #3
 8003b5e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003b60:	2304      	movs	r3, #4
 8003b62:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b68:	4619      	mov	r1, r3
 8003b6a:	4818      	ldr	r0, [pc, #96]	; (8003bcc <HAL_I2C_MspInit+0x1a4>)
 8003b6c:	f002 fc34 	bl	80063d8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003b70:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003b74:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003b76:	2312      	movs	r3, #18
 8003b78:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b7e:	2303      	movs	r3, #3
 8003b80:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003b82:	2304      	movs	r3, #4
 8003b84:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b8a:	4619      	mov	r1, r3
 8003b8c:	4810      	ldr	r0, [pc, #64]	; (8003bd0 <HAL_I2C_MspInit+0x1a8>)
 8003b8e:	f002 fc23 	bl	80063d8 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8003b92:	2300      	movs	r3, #0
 8003b94:	60bb      	str	r3, [r7, #8]
 8003b96:	4b09      	ldr	r3, [pc, #36]	; (8003bbc <HAL_I2C_MspInit+0x194>)
 8003b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b9a:	4a08      	ldr	r2, [pc, #32]	; (8003bbc <HAL_I2C_MspInit+0x194>)
 8003b9c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003ba0:	6413      	str	r3, [r2, #64]	; 0x40
 8003ba2:	4b06      	ldr	r3, [pc, #24]	; (8003bbc <HAL_I2C_MspInit+0x194>)
 8003ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003baa:	60bb      	str	r3, [r7, #8]
 8003bac:	68bb      	ldr	r3, [r7, #8]
}
 8003bae:	bf00      	nop
 8003bb0:	3738      	adds	r7, #56	; 0x38
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}
 8003bb6:	bf00      	nop
 8003bb8:	40005400 	.word	0x40005400
 8003bbc:	40023800 	.word	0x40023800
 8003bc0:	40020400 	.word	0x40020400
 8003bc4:	40005800 	.word	0x40005800
 8003bc8:	40005c00 	.word	0x40005c00
 8003bcc:	40020800 	.word	0x40020800
 8003bd0:	40020000 	.word	0x40020000

08003bd4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b08a      	sub	sp, #40	; 0x28
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bdc:	f107 0314 	add.w	r3, r7, #20
 8003be0:	2200      	movs	r2, #0
 8003be2:	601a      	str	r2, [r3, #0]
 8003be4:	605a      	str	r2, [r3, #4]
 8003be6:	609a      	str	r2, [r3, #8]
 8003be8:	60da      	str	r2, [r3, #12]
 8003bea:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a19      	ldr	r2, [pc, #100]	; (8003c58 <HAL_SPI_MspInit+0x84>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d12c      	bne.n	8003c50 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	613b      	str	r3, [r7, #16]
 8003bfa:	4b18      	ldr	r3, [pc, #96]	; (8003c5c <HAL_SPI_MspInit+0x88>)
 8003bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bfe:	4a17      	ldr	r2, [pc, #92]	; (8003c5c <HAL_SPI_MspInit+0x88>)
 8003c00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c04:	6413      	str	r3, [r2, #64]	; 0x40
 8003c06:	4b15      	ldr	r3, [pc, #84]	; (8003c5c <HAL_SPI_MspInit+0x88>)
 8003c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c0e:	613b      	str	r3, [r7, #16]
 8003c10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c12:	2300      	movs	r3, #0
 8003c14:	60fb      	str	r3, [r7, #12]
 8003c16:	4b11      	ldr	r3, [pc, #68]	; (8003c5c <HAL_SPI_MspInit+0x88>)
 8003c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c1a:	4a10      	ldr	r2, [pc, #64]	; (8003c5c <HAL_SPI_MspInit+0x88>)
 8003c1c:	f043 0302 	orr.w	r3, r3, #2
 8003c20:	6313      	str	r3, [r2, #48]	; 0x30
 8003c22:	4b0e      	ldr	r3, [pc, #56]	; (8003c5c <HAL_SPI_MspInit+0x88>)
 8003c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c26:	f003 0302 	and.w	r3, r3, #2
 8003c2a:	60fb      	str	r3, [r7, #12]
 8003c2c:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = IMU_SCK_Pin|IMU_MISO_Pin|IMU_MOSI_Pin;
 8003c2e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8003c32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c34:	2302      	movs	r3, #2
 8003c36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c38:	2300      	movs	r3, #0
 8003c3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c3c:	2303      	movs	r3, #3
 8003c3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003c40:	2305      	movs	r3, #5
 8003c42:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c44:	f107 0314 	add.w	r3, r7, #20
 8003c48:	4619      	mov	r1, r3
 8003c4a:	4805      	ldr	r0, [pc, #20]	; (8003c60 <HAL_SPI_MspInit+0x8c>)
 8003c4c:	f002 fbc4 	bl	80063d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8003c50:	bf00      	nop
 8003c52:	3728      	adds	r7, #40	; 0x28
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bd80      	pop	{r7, pc}
 8003c58:	40003800 	.word	0x40003800
 8003c5c:	40023800 	.word	0x40023800
 8003c60:	40020400 	.word	0x40020400

08003c64 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b08e      	sub	sp, #56	; 0x38
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c70:	2200      	movs	r2, #0
 8003c72:	601a      	str	r2, [r3, #0]
 8003c74:	605a      	str	r2, [r3, #4]
 8003c76:	609a      	str	r2, [r3, #8]
 8003c78:	60da      	str	r2, [r3, #12]
 8003c7a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c84:	d134      	bne.n	8003cf0 <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003c86:	2300      	movs	r3, #0
 8003c88:	623b      	str	r3, [r7, #32]
 8003c8a:	4b4b      	ldr	r3, [pc, #300]	; (8003db8 <HAL_TIM_Base_MspInit+0x154>)
 8003c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c8e:	4a4a      	ldr	r2, [pc, #296]	; (8003db8 <HAL_TIM_Base_MspInit+0x154>)
 8003c90:	f043 0301 	orr.w	r3, r3, #1
 8003c94:	6413      	str	r3, [r2, #64]	; 0x40
 8003c96:	4b48      	ldr	r3, [pc, #288]	; (8003db8 <HAL_TIM_Base_MspInit+0x154>)
 8003c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c9a:	f003 0301 	and.w	r3, r3, #1
 8003c9e:	623b      	str	r3, [r7, #32]
 8003ca0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	61fb      	str	r3, [r7, #28]
 8003ca6:	4b44      	ldr	r3, [pc, #272]	; (8003db8 <HAL_TIM_Base_MspInit+0x154>)
 8003ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003caa:	4a43      	ldr	r2, [pc, #268]	; (8003db8 <HAL_TIM_Base_MspInit+0x154>)
 8003cac:	f043 0301 	orr.w	r3, r3, #1
 8003cb0:	6313      	str	r3, [r2, #48]	; 0x30
 8003cb2:	4b41      	ldr	r3, [pc, #260]	; (8003db8 <HAL_TIM_Base_MspInit+0x154>)
 8003cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cb6:	f003 0301 	and.w	r3, r3, #1
 8003cba:	61fb      	str	r3, [r7, #28]
 8003cbc:	69fb      	ldr	r3, [r7, #28]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = ECHO_Pin;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cc2:	2302      	movs	r3, #2
 8003cc4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ECHO_GPIO_Port, &GPIO_InitStruct);
 8003cd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003cd6:	4619      	mov	r1, r3
 8003cd8:	4838      	ldr	r0, [pc, #224]	; (8003dbc <HAL_TIM_Base_MspInit+0x158>)
 8003cda:	f002 fb7d 	bl	80063d8 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8003cde:	2200      	movs	r2, #0
 8003ce0:	2105      	movs	r1, #5
 8003ce2:	201c      	movs	r0, #28
 8003ce4:	f001 ff3f 	bl	8005b66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003ce8:	201c      	movs	r0, #28
 8003cea:	f001 ff58 	bl	8005b9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8003cee:	e05e      	b.n	8003dae <HAL_TIM_Base_MspInit+0x14a>
  else if(htim_base->Instance==TIM3)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a32      	ldr	r2, [pc, #200]	; (8003dc0 <HAL_TIM_Base_MspInit+0x15c>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d10e      	bne.n	8003d18 <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	61bb      	str	r3, [r7, #24]
 8003cfe:	4b2e      	ldr	r3, [pc, #184]	; (8003db8 <HAL_TIM_Base_MspInit+0x154>)
 8003d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d02:	4a2d      	ldr	r2, [pc, #180]	; (8003db8 <HAL_TIM_Base_MspInit+0x154>)
 8003d04:	f043 0302 	orr.w	r3, r3, #2
 8003d08:	6413      	str	r3, [r2, #64]	; 0x40
 8003d0a:	4b2b      	ldr	r3, [pc, #172]	; (8003db8 <HAL_TIM_Base_MspInit+0x154>)
 8003d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d0e:	f003 0302 	and.w	r3, r3, #2
 8003d12:	61bb      	str	r3, [r7, #24]
 8003d14:	69bb      	ldr	r3, [r7, #24]
}
 8003d16:	e04a      	b.n	8003dae <HAL_TIM_Base_MspInit+0x14a>
  else if(htim_base->Instance==TIM4)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a29      	ldr	r2, [pc, #164]	; (8003dc4 <HAL_TIM_Base_MspInit+0x160>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d10e      	bne.n	8003d40 <HAL_TIM_Base_MspInit+0xdc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003d22:	2300      	movs	r3, #0
 8003d24:	617b      	str	r3, [r7, #20]
 8003d26:	4b24      	ldr	r3, [pc, #144]	; (8003db8 <HAL_TIM_Base_MspInit+0x154>)
 8003d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d2a:	4a23      	ldr	r2, [pc, #140]	; (8003db8 <HAL_TIM_Base_MspInit+0x154>)
 8003d2c:	f043 0304 	orr.w	r3, r3, #4
 8003d30:	6413      	str	r3, [r2, #64]	; 0x40
 8003d32:	4b21      	ldr	r3, [pc, #132]	; (8003db8 <HAL_TIM_Base_MspInit+0x154>)
 8003d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d36:	f003 0304 	and.w	r3, r3, #4
 8003d3a:	617b      	str	r3, [r7, #20]
 8003d3c:	697b      	ldr	r3, [r7, #20]
}
 8003d3e:	e036      	b.n	8003dae <HAL_TIM_Base_MspInit+0x14a>
  else if(htim_base->Instance==TIM6)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a20      	ldr	r2, [pc, #128]	; (8003dc8 <HAL_TIM_Base_MspInit+0x164>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d116      	bne.n	8003d78 <HAL_TIM_Base_MspInit+0x114>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	613b      	str	r3, [r7, #16]
 8003d4e:	4b1a      	ldr	r3, [pc, #104]	; (8003db8 <HAL_TIM_Base_MspInit+0x154>)
 8003d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d52:	4a19      	ldr	r2, [pc, #100]	; (8003db8 <HAL_TIM_Base_MspInit+0x154>)
 8003d54:	f043 0310 	orr.w	r3, r3, #16
 8003d58:	6413      	str	r3, [r2, #64]	; 0x40
 8003d5a:	4b17      	ldr	r3, [pc, #92]	; (8003db8 <HAL_TIM_Base_MspInit+0x154>)
 8003d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d5e:	f003 0310 	and.w	r3, r3, #16
 8003d62:	613b      	str	r3, [r7, #16]
 8003d64:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8003d66:	2200      	movs	r2, #0
 8003d68:	2105      	movs	r1, #5
 8003d6a:	2036      	movs	r0, #54	; 0x36
 8003d6c:	f001 fefb 	bl	8005b66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003d70:	2036      	movs	r0, #54	; 0x36
 8003d72:	f001 ff14 	bl	8005b9e <HAL_NVIC_EnableIRQ>
}
 8003d76:	e01a      	b.n	8003dae <HAL_TIM_Base_MspInit+0x14a>
  else if(htim_base->Instance==TIM7)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a13      	ldr	r2, [pc, #76]	; (8003dcc <HAL_TIM_Base_MspInit+0x168>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d115      	bne.n	8003dae <HAL_TIM_Base_MspInit+0x14a>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003d82:	2300      	movs	r3, #0
 8003d84:	60fb      	str	r3, [r7, #12]
 8003d86:	4b0c      	ldr	r3, [pc, #48]	; (8003db8 <HAL_TIM_Base_MspInit+0x154>)
 8003d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d8a:	4a0b      	ldr	r2, [pc, #44]	; (8003db8 <HAL_TIM_Base_MspInit+0x154>)
 8003d8c:	f043 0320 	orr.w	r3, r3, #32
 8003d90:	6413      	str	r3, [r2, #64]	; 0x40
 8003d92:	4b09      	ldr	r3, [pc, #36]	; (8003db8 <HAL_TIM_Base_MspInit+0x154>)
 8003d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d96:	f003 0320 	and.w	r3, r3, #32
 8003d9a:	60fb      	str	r3, [r7, #12]
 8003d9c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 8003d9e:	2200      	movs	r2, #0
 8003da0:	2105      	movs	r1, #5
 8003da2:	2037      	movs	r0, #55	; 0x37
 8003da4:	f001 fedf 	bl	8005b66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8003da8:	2037      	movs	r0, #55	; 0x37
 8003daa:	f001 fef8 	bl	8005b9e <HAL_NVIC_EnableIRQ>
}
 8003dae:	bf00      	nop
 8003db0:	3738      	adds	r7, #56	; 0x38
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}
 8003db6:	bf00      	nop
 8003db8:	40023800 	.word	0x40023800
 8003dbc:	40020000 	.word	0x40020000
 8003dc0:	40000400 	.word	0x40000400
 8003dc4:	40000800 	.word	0x40000800
 8003dc8:	40001000 	.word	0x40001000
 8003dcc:	40001400 	.word	0x40001400

08003dd0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b08a      	sub	sp, #40	; 0x28
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003dd8:	f107 0314 	add.w	r3, r7, #20
 8003ddc:	2200      	movs	r2, #0
 8003dde:	601a      	str	r2, [r3, #0]
 8003de0:	605a      	str	r2, [r3, #4]
 8003de2:	609a      	str	r2, [r3, #8]
 8003de4:	60da      	str	r2, [r3, #12]
 8003de6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a21      	ldr	r2, [pc, #132]	; (8003e74 <HAL_TIM_MspPostInit+0xa4>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d13b      	bne.n	8003e6a <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003df2:	2300      	movs	r3, #0
 8003df4:	613b      	str	r3, [r7, #16]
 8003df6:	4b20      	ldr	r3, [pc, #128]	; (8003e78 <HAL_TIM_MspPostInit+0xa8>)
 8003df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dfa:	4a1f      	ldr	r2, [pc, #124]	; (8003e78 <HAL_TIM_MspPostInit+0xa8>)
 8003dfc:	f043 0301 	orr.w	r3, r3, #1
 8003e00:	6313      	str	r3, [r2, #48]	; 0x30
 8003e02:	4b1d      	ldr	r3, [pc, #116]	; (8003e78 <HAL_TIM_MspPostInit+0xa8>)
 8003e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e06:	f003 0301 	and.w	r3, r3, #1
 8003e0a:	613b      	str	r3, [r7, #16]
 8003e0c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e0e:	2300      	movs	r3, #0
 8003e10:	60fb      	str	r3, [r7, #12]
 8003e12:	4b19      	ldr	r3, [pc, #100]	; (8003e78 <HAL_TIM_MspPostInit+0xa8>)
 8003e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e16:	4a18      	ldr	r2, [pc, #96]	; (8003e78 <HAL_TIM_MspPostInit+0xa8>)
 8003e18:	f043 0302 	orr.w	r3, r3, #2
 8003e1c:	6313      	str	r3, [r2, #48]	; 0x30
 8003e1e:	4b16      	ldr	r3, [pc, #88]	; (8003e78 <HAL_TIM_MspPostInit+0xa8>)
 8003e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e22:	f003 0302 	and.w	r3, r3, #2
 8003e26:	60fb      	str	r3, [r7, #12]
 8003e28:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = PWM1_Pin|PWM2_Pin;
 8003e2a:	23c0      	movs	r3, #192	; 0xc0
 8003e2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e2e:	2302      	movs	r3, #2
 8003e30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e32:	2300      	movs	r3, #0
 8003e34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e36:	2300      	movs	r3, #0
 8003e38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003e3a:	2302      	movs	r3, #2
 8003e3c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e3e:	f107 0314 	add.w	r3, r7, #20
 8003e42:	4619      	mov	r1, r3
 8003e44:	480d      	ldr	r0, [pc, #52]	; (8003e7c <HAL_TIM_MspPostInit+0xac>)
 8003e46:	f002 fac7 	bl	80063d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PWM3_Pin|PWM4_Pin;
 8003e4a:	2303      	movs	r3, #3
 8003e4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e4e:	2302      	movs	r3, #2
 8003e50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e52:	2300      	movs	r3, #0
 8003e54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e56:	2300      	movs	r3, #0
 8003e58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003e5a:	2302      	movs	r3, #2
 8003e5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e5e:	f107 0314 	add.w	r3, r7, #20
 8003e62:	4619      	mov	r1, r3
 8003e64:	4806      	ldr	r0, [pc, #24]	; (8003e80 <HAL_TIM_MspPostInit+0xb0>)
 8003e66:	f002 fab7 	bl	80063d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003e6a:	bf00      	nop
 8003e6c:	3728      	adds	r7, #40	; 0x28
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bd80      	pop	{r7, pc}
 8003e72:	bf00      	nop
 8003e74:	40000400 	.word	0x40000400
 8003e78:	40023800 	.word	0x40023800
 8003e7c:	40020000 	.word	0x40020000
 8003e80:	40020400 	.word	0x40020400

08003e84 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b090      	sub	sp, #64	; 0x40
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e8c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003e90:	2200      	movs	r2, #0
 8003e92:	601a      	str	r2, [r3, #0]
 8003e94:	605a      	str	r2, [r3, #4]
 8003e96:	609a      	str	r2, [r3, #8]
 8003e98:	60da      	str	r2, [r3, #12]
 8003e9a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a81      	ldr	r2, [pc, #516]	; (80040a8 <HAL_UART_MspInit+0x224>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d15d      	bne.n	8003f62 <HAL_UART_MspInit+0xde>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	62bb      	str	r3, [r7, #40]	; 0x28
 8003eaa:	4b80      	ldr	r3, [pc, #512]	; (80040ac <HAL_UART_MspInit+0x228>)
 8003eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eae:	4a7f      	ldr	r2, [pc, #508]	; (80040ac <HAL_UART_MspInit+0x228>)
 8003eb0:	f043 0310 	orr.w	r3, r3, #16
 8003eb4:	6453      	str	r3, [r2, #68]	; 0x44
 8003eb6:	4b7d      	ldr	r3, [pc, #500]	; (80040ac <HAL_UART_MspInit+0x228>)
 8003eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eba:	f003 0310 	and.w	r3, r3, #16
 8003ebe:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ec0:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	627b      	str	r3, [r7, #36]	; 0x24
 8003ec6:	4b79      	ldr	r3, [pc, #484]	; (80040ac <HAL_UART_MspInit+0x228>)
 8003ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eca:	4a78      	ldr	r2, [pc, #480]	; (80040ac <HAL_UART_MspInit+0x228>)
 8003ecc:	f043 0301 	orr.w	r3, r3, #1
 8003ed0:	6313      	str	r3, [r2, #48]	; 0x30
 8003ed2:	4b76      	ldr	r3, [pc, #472]	; (80040ac <HAL_UART_MspInit+0x228>)
 8003ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ed6:	f003 0301 	and.w	r3, r3, #1
 8003eda:	627b      	str	r3, [r7, #36]	; 0x24
 8003edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = RECEIVER_TX_Pin|RECEIVER_RX_Pin;
 8003ede:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003ee2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ee4:	2302      	movs	r3, #2
 8003ee6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ee8:	2300      	movs	r3, #0
 8003eea:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003eec:	2303      	movs	r3, #3
 8003eee:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003ef0:	2307      	movs	r3, #7
 8003ef2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ef4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003ef8:	4619      	mov	r1, r3
 8003efa:	486d      	ldr	r0, [pc, #436]	; (80040b0 <HAL_UART_MspInit+0x22c>)
 8003efc:	f002 fa6c 	bl	80063d8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8003f00:	4b6c      	ldr	r3, [pc, #432]	; (80040b4 <HAL_UART_MspInit+0x230>)
 8003f02:	4a6d      	ldr	r2, [pc, #436]	; (80040b8 <HAL_UART_MspInit+0x234>)
 8003f04:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8003f06:	4b6b      	ldr	r3, [pc, #428]	; (80040b4 <HAL_UART_MspInit+0x230>)
 8003f08:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003f0c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003f0e:	4b69      	ldr	r3, [pc, #420]	; (80040b4 <HAL_UART_MspInit+0x230>)
 8003f10:	2200      	movs	r2, #0
 8003f12:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003f14:	4b67      	ldr	r3, [pc, #412]	; (80040b4 <HAL_UART_MspInit+0x230>)
 8003f16:	2200      	movs	r2, #0
 8003f18:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003f1a:	4b66      	ldr	r3, [pc, #408]	; (80040b4 <HAL_UART_MspInit+0x230>)
 8003f1c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003f20:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003f22:	4b64      	ldr	r3, [pc, #400]	; (80040b4 <HAL_UART_MspInit+0x230>)
 8003f24:	2200      	movs	r2, #0
 8003f26:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003f28:	4b62      	ldr	r3, [pc, #392]	; (80040b4 <HAL_UART_MspInit+0x230>)
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8003f2e:	4b61      	ldr	r3, [pc, #388]	; (80040b4 <HAL_UART_MspInit+0x230>)
 8003f30:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003f34:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8003f36:	4b5f      	ldr	r3, [pc, #380]	; (80040b4 <HAL_UART_MspInit+0x230>)
 8003f38:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003f3c:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003f3e:	4b5d      	ldr	r3, [pc, #372]	; (80040b4 <HAL_UART_MspInit+0x230>)
 8003f40:	2200      	movs	r2, #0
 8003f42:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003f44:	485b      	ldr	r0, [pc, #364]	; (80040b4 <HAL_UART_MspInit+0x230>)
 8003f46:	f001 fe45 	bl	8005bd4 <HAL_DMA_Init>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d001      	beq.n	8003f54 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 8003f50:	f7ff fc92 	bl	8003878 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	4a57      	ldr	r2, [pc, #348]	; (80040b4 <HAL_UART_MspInit+0x230>)
 8003f58:	639a      	str	r2, [r3, #56]	; 0x38
 8003f5a:	4a56      	ldr	r2, [pc, #344]	; (80040b4 <HAL_UART_MspInit+0x230>)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8003f60:	e09d      	b.n	800409e <HAL_UART_MspInit+0x21a>
  else if(huart->Instance==USART2)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a55      	ldr	r2, [pc, #340]	; (80040bc <HAL_UART_MspInit+0x238>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d134      	bne.n	8003fd6 <HAL_UART_MspInit+0x152>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	623b      	str	r3, [r7, #32]
 8003f70:	4b4e      	ldr	r3, [pc, #312]	; (80040ac <HAL_UART_MspInit+0x228>)
 8003f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f74:	4a4d      	ldr	r2, [pc, #308]	; (80040ac <HAL_UART_MspInit+0x228>)
 8003f76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f7a:	6413      	str	r3, [r2, #64]	; 0x40
 8003f7c:	4b4b      	ldr	r3, [pc, #300]	; (80040ac <HAL_UART_MspInit+0x228>)
 8003f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f84:	623b      	str	r3, [r7, #32]
 8003f86:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f88:	2300      	movs	r3, #0
 8003f8a:	61fb      	str	r3, [r7, #28]
 8003f8c:	4b47      	ldr	r3, [pc, #284]	; (80040ac <HAL_UART_MspInit+0x228>)
 8003f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f90:	4a46      	ldr	r2, [pc, #280]	; (80040ac <HAL_UART_MspInit+0x228>)
 8003f92:	f043 0301 	orr.w	r3, r3, #1
 8003f96:	6313      	str	r3, [r2, #48]	; 0x30
 8003f98:	4b44      	ldr	r3, [pc, #272]	; (80040ac <HAL_UART_MspInit+0x228>)
 8003f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f9c:	f003 0301 	and.w	r3, r3, #1
 8003fa0:	61fb      	str	r3, [r7, #28]
 8003fa2:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003fa4:	230c      	movs	r3, #12
 8003fa6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fa8:	2302      	movs	r3, #2
 8003faa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fac:	2300      	movs	r3, #0
 8003fae:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fb0:	2303      	movs	r3, #3
 8003fb2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003fb4:	2307      	movs	r3, #7
 8003fb6:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fb8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003fbc:	4619      	mov	r1, r3
 8003fbe:	483c      	ldr	r0, [pc, #240]	; (80040b0 <HAL_UART_MspInit+0x22c>)
 8003fc0:	f002 fa0a 	bl	80063d8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	2105      	movs	r1, #5
 8003fc8:	2026      	movs	r0, #38	; 0x26
 8003fca:	f001 fdcc 	bl	8005b66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003fce:	2026      	movs	r0, #38	; 0x26
 8003fd0:	f001 fde5 	bl	8005b9e <HAL_NVIC_EnableIRQ>
}
 8003fd4:	e063      	b.n	800409e <HAL_UART_MspInit+0x21a>
  else if(huart->Instance==USART3)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a39      	ldr	r2, [pc, #228]	; (80040c0 <HAL_UART_MspInit+0x23c>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d12d      	bne.n	800403c <HAL_UART_MspInit+0x1b8>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	61bb      	str	r3, [r7, #24]
 8003fe4:	4b31      	ldr	r3, [pc, #196]	; (80040ac <HAL_UART_MspInit+0x228>)
 8003fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe8:	4a30      	ldr	r2, [pc, #192]	; (80040ac <HAL_UART_MspInit+0x228>)
 8003fea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003fee:	6413      	str	r3, [r2, #64]	; 0x40
 8003ff0:	4b2e      	ldr	r3, [pc, #184]	; (80040ac <HAL_UART_MspInit+0x228>)
 8003ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ff8:	61bb      	str	r3, [r7, #24]
 8003ffa:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	617b      	str	r3, [r7, #20]
 8004000:	4b2a      	ldr	r3, [pc, #168]	; (80040ac <HAL_UART_MspInit+0x228>)
 8004002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004004:	4a29      	ldr	r2, [pc, #164]	; (80040ac <HAL_UART_MspInit+0x228>)
 8004006:	f043 0304 	orr.w	r3, r3, #4
 800400a:	6313      	str	r3, [r2, #48]	; 0x30
 800400c:	4b27      	ldr	r3, [pc, #156]	; (80040ac <HAL_UART_MspInit+0x228>)
 800400e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004010:	f003 0304 	and.w	r3, r3, #4
 8004014:	617b      	str	r3, [r7, #20]
 8004016:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GNSS_TX_Pin|GNSS_RX_Pin;
 8004018:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800401c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800401e:	2302      	movs	r3, #2
 8004020:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004022:	2300      	movs	r3, #0
 8004024:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004026:	2303      	movs	r3, #3
 8004028:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800402a:	2307      	movs	r3, #7
 800402c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800402e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004032:	4619      	mov	r1, r3
 8004034:	4823      	ldr	r0, [pc, #140]	; (80040c4 <HAL_UART_MspInit+0x240>)
 8004036:	f002 f9cf 	bl	80063d8 <HAL_GPIO_Init>
}
 800403a:	e030      	b.n	800409e <HAL_UART_MspInit+0x21a>
  else if(huart->Instance==USART6)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a21      	ldr	r2, [pc, #132]	; (80040c8 <HAL_UART_MspInit+0x244>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d12b      	bne.n	800409e <HAL_UART_MspInit+0x21a>
    __HAL_RCC_USART6_CLK_ENABLE();
 8004046:	2300      	movs	r3, #0
 8004048:	613b      	str	r3, [r7, #16]
 800404a:	4b18      	ldr	r3, [pc, #96]	; (80040ac <HAL_UART_MspInit+0x228>)
 800404c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800404e:	4a17      	ldr	r2, [pc, #92]	; (80040ac <HAL_UART_MspInit+0x228>)
 8004050:	f043 0320 	orr.w	r3, r3, #32
 8004054:	6453      	str	r3, [r2, #68]	; 0x44
 8004056:	4b15      	ldr	r3, [pc, #84]	; (80040ac <HAL_UART_MspInit+0x228>)
 8004058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800405a:	f003 0320 	and.w	r3, r3, #32
 800405e:	613b      	str	r3, [r7, #16]
 8004060:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004062:	2300      	movs	r3, #0
 8004064:	60fb      	str	r3, [r7, #12]
 8004066:	4b11      	ldr	r3, [pc, #68]	; (80040ac <HAL_UART_MspInit+0x228>)
 8004068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800406a:	4a10      	ldr	r2, [pc, #64]	; (80040ac <HAL_UART_MspInit+0x228>)
 800406c:	f043 0304 	orr.w	r3, r3, #4
 8004070:	6313      	str	r3, [r2, #48]	; 0x30
 8004072:	4b0e      	ldr	r3, [pc, #56]	; (80040ac <HAL_UART_MspInit+0x228>)
 8004074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004076:	f003 0304 	and.w	r3, r3, #4
 800407a:	60fb      	str	r3, [r7, #12]
 800407c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800407e:	23c0      	movs	r3, #192	; 0xc0
 8004080:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004082:	2302      	movs	r3, #2
 8004084:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004086:	2300      	movs	r3, #0
 8004088:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800408a:	2303      	movs	r3, #3
 800408c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800408e:	2308      	movs	r3, #8
 8004090:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004092:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004096:	4619      	mov	r1, r3
 8004098:	480a      	ldr	r0, [pc, #40]	; (80040c4 <HAL_UART_MspInit+0x240>)
 800409a:	f002 f99d 	bl	80063d8 <HAL_GPIO_Init>
}
 800409e:	bf00      	nop
 80040a0:	3740      	adds	r7, #64	; 0x40
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}
 80040a6:	bf00      	nop
 80040a8:	40011000 	.word	0x40011000
 80040ac:	40023800 	.word	0x40023800
 80040b0:	40020000 	.word	0x40020000
 80040b4:	20000904 	.word	0x20000904
 80040b8:	40026440 	.word	0x40026440
 80040bc:	40004400 	.word	0x40004400
 80040c0:	40004800 	.word	0x40004800
 80040c4:	40020800 	.word	0x40020800
 80040c8:	40011400 	.word	0x40011400

080040cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80040cc:	b480      	push	{r7}
 80040ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80040d0:	e7fe      	b.n	80040d0 <NMI_Handler+0x4>

080040d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80040d2:	b480      	push	{r7}
 80040d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80040d6:	e7fe      	b.n	80040d6 <HardFault_Handler+0x4>

080040d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80040d8:	b480      	push	{r7}
 80040da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80040dc:	e7fe      	b.n	80040dc <MemManage_Handler+0x4>

080040de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80040de:	b480      	push	{r7}
 80040e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80040e2:	e7fe      	b.n	80040e2 <BusFault_Handler+0x4>

080040e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80040e4:	b480      	push	{r7}
 80040e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80040e8:	e7fe      	b.n	80040e8 <UsageFault_Handler+0x4>

080040ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80040ea:	b480      	push	{r7}
 80040ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80040ee:	bf00      	nop
 80040f0:	46bd      	mov	sp, r7
 80040f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f6:	4770      	bx	lr

080040f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80040fc:	f001 f9b2 	bl	8005464 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8004100:	f00a f9d2 	bl	800e4a8 <xTaskGetSchedulerState>
 8004104:	4603      	mov	r3, r0
 8004106:	2b01      	cmp	r3, #1
 8004108:	d001      	beq.n	800410e <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800410a:	f00a fc95 	bl	800ea38 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800410e:	bf00      	nop
 8004110:	bd80      	pop	{r7, pc}

08004112 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8004112:	b580      	push	{r7, lr}
 8004114:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_Pin);
 8004116:	2001      	movs	r0, #1
 8004118:	f002 fb2e 	bl	8006778 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800411c:	bf00      	nop
 800411e:	bd80      	pop	{r7, pc}

08004120 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IT_PRESS_Pin);
 8004124:	2004      	movs	r0, #4
 8004126:	f002 fb27 	bl	8006778 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800412a:	bf00      	nop
 800412c:	bd80      	pop	{r7, pc}
	...

08004130 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004134:	4802      	ldr	r0, [pc, #8]	; (8004140 <TIM2_IRQHandler+0x10>)
 8004136:	f004 fe0a 	bl	8008d4e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800413a:	bf00      	nop
 800413c:	bd80      	pop	{r7, pc}
 800413e:	bf00      	nop
 8004140:	2000068c 	.word	0x2000068c

08004144 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004148:	4802      	ldr	r0, [pc, #8]	; (8004154 <USART2_IRQHandler+0x10>)
 800414a:	f005 fff1 	bl	800a130 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800414e:	bf00      	nop
 8004150:	bd80      	pop	{r7, pc}
 8004152:	bf00      	nop
 8004154:	20000838 	.word	0x20000838

08004158 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IT_GYRO_Pin);
 800415c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004160:	f002 fb0a 	bl	8006778 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(IT_ACC_Pin);
 8004164:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8004168:	f002 fb06 	bl	8006778 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(IT_MAGN_Pin);
 800416c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004170:	f002 fb02 	bl	8006778 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004174:	bf00      	nop
 8004176:	bd80      	pop	{r7, pc}

08004178 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800417c:	4802      	ldr	r0, [pc, #8]	; (8004188 <TIM6_DAC_IRQHandler+0x10>)
 800417e:	f004 fde6 	bl	8008d4e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8004182:	bf00      	nop
 8004184:	bd80      	pop	{r7, pc}
 8004186:	bf00      	nop
 8004188:	20000764 	.word	0x20000764

0800418c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8004190:	4802      	ldr	r0, [pc, #8]	; (800419c <TIM7_IRQHandler+0x10>)
 8004192:	f004 fddc 	bl	8008d4e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8004196:	bf00      	nop
 8004198:	bd80      	pop	{r7, pc}
 800419a:	bf00      	nop
 800419c:	200007ac 	.word	0x200007ac

080041a0 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80041a4:	4802      	ldr	r0, [pc, #8]	; (80041b0 <DMA2_Stream2_IRQHandler+0x10>)
 80041a6:	f001 fead 	bl	8005f04 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80041aa:	bf00      	nop
 80041ac:	bd80      	pop	{r7, pc}
 80041ae:	bf00      	nop
 80041b0:	20000904 	.word	0x20000904

080041b4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80041b4:	b480      	push	{r7}
 80041b6:	af00      	add	r7, sp, #0
  return 1;
 80041b8:	2301      	movs	r3, #1
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	46bd      	mov	sp, r7
 80041be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c2:	4770      	bx	lr

080041c4 <_kill>:

int _kill(int pid, int sig)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b082      	sub	sp, #8
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
 80041cc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80041ce:	f00a fe6d 	bl	800eeac <__errno>
 80041d2:	4603      	mov	r3, r0
 80041d4:	2216      	movs	r2, #22
 80041d6:	601a      	str	r2, [r3, #0]
  return -1;
 80041d8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80041dc:	4618      	mov	r0, r3
 80041de:	3708      	adds	r7, #8
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}

080041e4 <_exit>:

void _exit (int status)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b082      	sub	sp, #8
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80041ec:	f04f 31ff 	mov.w	r1, #4294967295
 80041f0:	6878      	ldr	r0, [r7, #4]
 80041f2:	f7ff ffe7 	bl	80041c4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80041f6:	e7fe      	b.n	80041f6 <_exit+0x12>

080041f8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b086      	sub	sp, #24
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	60f8      	str	r0, [r7, #12]
 8004200:	60b9      	str	r1, [r7, #8]
 8004202:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004204:	2300      	movs	r3, #0
 8004206:	617b      	str	r3, [r7, #20]
 8004208:	e00a      	b.n	8004220 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800420a:	f3af 8000 	nop.w
 800420e:	4601      	mov	r1, r0
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	1c5a      	adds	r2, r3, #1
 8004214:	60ba      	str	r2, [r7, #8]
 8004216:	b2ca      	uxtb	r2, r1
 8004218:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	3301      	adds	r3, #1
 800421e:	617b      	str	r3, [r7, #20]
 8004220:	697a      	ldr	r2, [r7, #20]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	429a      	cmp	r2, r3
 8004226:	dbf0      	blt.n	800420a <_read+0x12>
  }

  return len;
 8004228:	687b      	ldr	r3, [r7, #4]
}
 800422a:	4618      	mov	r0, r3
 800422c:	3718      	adds	r7, #24
 800422e:	46bd      	mov	sp, r7
 8004230:	bd80      	pop	{r7, pc}

08004232 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004232:	b580      	push	{r7, lr}
 8004234:	b086      	sub	sp, #24
 8004236:	af00      	add	r7, sp, #0
 8004238:	60f8      	str	r0, [r7, #12]
 800423a:	60b9      	str	r1, [r7, #8]
 800423c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800423e:	2300      	movs	r3, #0
 8004240:	617b      	str	r3, [r7, #20]
 8004242:	e009      	b.n	8004258 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	1c5a      	adds	r2, r3, #1
 8004248:	60ba      	str	r2, [r7, #8]
 800424a:	781b      	ldrb	r3, [r3, #0]
 800424c:	4618      	mov	r0, r3
 800424e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	3301      	adds	r3, #1
 8004256:	617b      	str	r3, [r7, #20]
 8004258:	697a      	ldr	r2, [r7, #20]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	429a      	cmp	r2, r3
 800425e:	dbf1      	blt.n	8004244 <_write+0x12>
  }
  return len;
 8004260:	687b      	ldr	r3, [r7, #4]
}
 8004262:	4618      	mov	r0, r3
 8004264:	3718      	adds	r7, #24
 8004266:	46bd      	mov	sp, r7
 8004268:	bd80      	pop	{r7, pc}

0800426a <_close>:

int _close(int file)
{
 800426a:	b480      	push	{r7}
 800426c:	b083      	sub	sp, #12
 800426e:	af00      	add	r7, sp, #0
 8004270:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004272:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004276:	4618      	mov	r0, r3
 8004278:	370c      	adds	r7, #12
 800427a:	46bd      	mov	sp, r7
 800427c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004280:	4770      	bx	lr

08004282 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004282:	b480      	push	{r7}
 8004284:	b083      	sub	sp, #12
 8004286:	af00      	add	r7, sp, #0
 8004288:	6078      	str	r0, [r7, #4]
 800428a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004292:	605a      	str	r2, [r3, #4]
  return 0;
 8004294:	2300      	movs	r3, #0
}
 8004296:	4618      	mov	r0, r3
 8004298:	370c      	adds	r7, #12
 800429a:	46bd      	mov	sp, r7
 800429c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a0:	4770      	bx	lr

080042a2 <_isatty>:

int _isatty(int file)
{
 80042a2:	b480      	push	{r7}
 80042a4:	b083      	sub	sp, #12
 80042a6:	af00      	add	r7, sp, #0
 80042a8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80042aa:	2301      	movs	r3, #1
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	370c      	adds	r7, #12
 80042b0:	46bd      	mov	sp, r7
 80042b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b6:	4770      	bx	lr

080042b8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b085      	sub	sp, #20
 80042bc:	af00      	add	r7, sp, #0
 80042be:	60f8      	str	r0, [r7, #12]
 80042c0:	60b9      	str	r1, [r7, #8]
 80042c2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80042c4:	2300      	movs	r3, #0
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	3714      	adds	r7, #20
 80042ca:	46bd      	mov	sp, r7
 80042cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d0:	4770      	bx	lr
	...

080042d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b086      	sub	sp, #24
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80042dc:	4a14      	ldr	r2, [pc, #80]	; (8004330 <_sbrk+0x5c>)
 80042de:	4b15      	ldr	r3, [pc, #84]	; (8004334 <_sbrk+0x60>)
 80042e0:	1ad3      	subs	r3, r2, r3
 80042e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80042e8:	4b13      	ldr	r3, [pc, #76]	; (8004338 <_sbrk+0x64>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d102      	bne.n	80042f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80042f0:	4b11      	ldr	r3, [pc, #68]	; (8004338 <_sbrk+0x64>)
 80042f2:	4a12      	ldr	r2, [pc, #72]	; (800433c <_sbrk+0x68>)
 80042f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80042f6:	4b10      	ldr	r3, [pc, #64]	; (8004338 <_sbrk+0x64>)
 80042f8:	681a      	ldr	r2, [r3, #0]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	4413      	add	r3, r2
 80042fe:	693a      	ldr	r2, [r7, #16]
 8004300:	429a      	cmp	r2, r3
 8004302:	d207      	bcs.n	8004314 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004304:	f00a fdd2 	bl	800eeac <__errno>
 8004308:	4603      	mov	r3, r0
 800430a:	220c      	movs	r2, #12
 800430c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800430e:	f04f 33ff 	mov.w	r3, #4294967295
 8004312:	e009      	b.n	8004328 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004314:	4b08      	ldr	r3, [pc, #32]	; (8004338 <_sbrk+0x64>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800431a:	4b07      	ldr	r3, [pc, #28]	; (8004338 <_sbrk+0x64>)
 800431c:	681a      	ldr	r2, [r3, #0]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	4413      	add	r3, r2
 8004322:	4a05      	ldr	r2, [pc, #20]	; (8004338 <_sbrk+0x64>)
 8004324:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004326:	68fb      	ldr	r3, [r7, #12]
}
 8004328:	4618      	mov	r0, r3
 800432a:	3718      	adds	r7, #24
 800432c:	46bd      	mov	sp, r7
 800432e:	bd80      	pop	{r7, pc}
 8004330:	20020000 	.word	0x20020000
 8004334:	00000400 	.word	0x00000400
 8004338:	20002b18 	.word	0x20002b18
 800433c:	20006888 	.word	0x20006888

08004340 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004340:	b480      	push	{r7}
 8004342:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004344:	4b06      	ldr	r3, [pc, #24]	; (8004360 <SystemInit+0x20>)
 8004346:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800434a:	4a05      	ldr	r2, [pc, #20]	; (8004360 <SystemInit+0x20>)
 800434c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004350:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004354:	bf00      	nop
 8004356:	46bd      	mov	sp, r7
 8004358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435c:	4770      	bx	lr
 800435e:	bf00      	nop
 8004360:	e000ed00 	.word	0xe000ed00

08004364 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004364:	f8df d034 	ldr.w	sp, [pc, #52]	; 800439c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004368:	480d      	ldr	r0, [pc, #52]	; (80043a0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800436a:	490e      	ldr	r1, [pc, #56]	; (80043a4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800436c:	4a0e      	ldr	r2, [pc, #56]	; (80043a8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800436e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004370:	e002      	b.n	8004378 <LoopCopyDataInit>

08004372 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004372:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004374:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004376:	3304      	adds	r3, #4

08004378 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004378:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800437a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800437c:	d3f9      	bcc.n	8004372 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800437e:	4a0b      	ldr	r2, [pc, #44]	; (80043ac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004380:	4c0b      	ldr	r4, [pc, #44]	; (80043b0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004382:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004384:	e001      	b.n	800438a <LoopFillZerobss>

08004386 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004386:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004388:	3204      	adds	r2, #4

0800438a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800438a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800438c:	d3fb      	bcc.n	8004386 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800438e:	f7ff ffd7 	bl	8004340 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004392:	f00a fd91 	bl	800eeb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004396:	f7fd f8d1 	bl	800153c <main>
  bx  lr    
 800439a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800439c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80043a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80043a4:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 80043a8:	08014c68 	.word	0x08014c68
  ldr r2, =_sbss
 80043ac:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 80043b0:	20006884 	.word	0x20006884

080043b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80043b4:	e7fe      	b.n	80043b4 <ADC_IRQHandler>
	...

080043b8 <BMI088_Init>:
 *
 */
uint8_t BMI088_Init(BMI088 *imu,
				 SPI_HandleTypeDef *spiHandle,
				 GPIO_TypeDef *csAccPinBank, uint16_t csAccPin,
				 GPIO_TypeDef *csGyrPinBank, uint16_t csGyrPin) {
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b086      	sub	sp, #24
 80043bc:	af00      	add	r7, sp, #0
 80043be:	60f8      	str	r0, [r7, #12]
 80043c0:	60b9      	str	r1, [r7, #8]
 80043c2:	607a      	str	r2, [r7, #4]
 80043c4:	807b      	strh	r3, [r7, #2]

	/* Store interface parameters in struct */
	imu->spiHandle 		= spiHandle;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	68ba      	ldr	r2, [r7, #8]
 80043ca:	601a      	str	r2, [r3, #0]
	imu->csAccPinBank 	= csAccPinBank;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	687a      	ldr	r2, [r7, #4]
 80043d0:	605a      	str	r2, [r3, #4]
	imu->csAccPin 		= csAccPin;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	887a      	ldrh	r2, [r7, #2]
 80043d6:	819a      	strh	r2, [r3, #12]
	imu->csGyrPinBank 	= csGyrPinBank;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	6a3a      	ldr	r2, [r7, #32]
 80043dc:	609a      	str	r2, [r3, #8]
	imu->csGyrPin 		= csGyrPin;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80043e2:	81da      	strh	r2, [r3, #14]

	/* Clear DMA flags */
	imu->readingAcc = 0;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	2200      	movs	r2, #0
 80043e8:	741a      	strb	r2, [r3, #16]
	imu->readingGyr = 0;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2200      	movs	r2, #0
 80043ee:	745a      	strb	r2, [r3, #17]

	uint8_t status = 0;
 80043f0:	2300      	movs	r3, #0
 80043f2:	75fb      	strb	r3, [r7, #23]
	/*
	 *
	 * ACCELEROMETER
	 *
	 */
	uint8_t chipID=2;
 80043f4:	2302      	movs	r3, #2
 80043f6:	75bb      	strb	r3, [r7, #22]
		}
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
		HAL_Delay(200);
	}*/
	/* Accelerometer requires rising edge on CSB at start-up to activate SPI */
	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_RESET);
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	6858      	ldr	r0, [r3, #4]
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	899b      	ldrh	r3, [r3, #12]
 8004400:	2200      	movs	r2, #0
 8004402:	4619      	mov	r1, r3
 8004404:	f002 f984 	bl	8006710 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8004408:	2001      	movs	r0, #1
 800440a:	f001 f84b 	bl	80054a4 <HAL_Delay>
	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_SET);
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	6858      	ldr	r0, [r3, #4]
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	899b      	ldrh	r3, [r3, #12]
 8004416:	2201      	movs	r2, #1
 8004418:	4619      	mov	r1, r3
 800441a:	f002 f979 	bl	8006710 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 800441e:	2032      	movs	r0, #50	; 0x32
 8004420:	f001 f840 	bl	80054a4 <HAL_Delay>

	/* Perform accelerometer soft reset */
	status += BMI088_WriteAccRegister(imu, BMI_ACC_SOFTRESET, 0xB6);
 8004424:	22b6      	movs	r2, #182	; 0xb6
 8004426:	217e      	movs	r1, #126	; 0x7e
 8004428:	68f8      	ldr	r0, [r7, #12]
 800442a:	f000 f95b 	bl	80046e4 <BMI088_WriteAccRegister>
 800442e:	4603      	mov	r3, r0
 8004430:	461a      	mov	r2, r3
 8004432:	7dfb      	ldrb	r3, [r7, #23]
 8004434:	4413      	add	r3, r2
 8004436:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(50);
 8004438:	2032      	movs	r0, #50	; 0x32
 800443a:	f001 f833 	bl	80054a4 <HAL_Delay>

	/* Check chip ID */
	chipID=2;
 800443e:	2302      	movs	r3, #2
 8004440:	75bb      	strb	r3, [r7, #22]

	status += BMI088_ReadAccRegister(imu, BMI_ACC_CHIP_ID, &chipID);
 8004442:	f107 0316 	add.w	r3, r7, #22
 8004446:	461a      	mov	r2, r3
 8004448:	2100      	movs	r1, #0
 800444a:	68f8      	ldr	r0, [r7, #12]
 800444c:	f000 f8d0 	bl	80045f0 <BMI088_ReadAccRegister>
 8004450:	4603      	mov	r3, r0
 8004452:	461a      	mov	r2, r3
 8004454:	7dfb      	ldrb	r3, [r7, #23]
 8004456:	4413      	add	r3, r2
 8004458:	75fb      	strb	r3, [r7, #23]

	/*HAL_Delay(10);
	//status += BMI088_ReadAccRegister(imu, 0x02, &chipID); //0x02 ACC_ERR_REG return 0xFF ->fatal error
	status += BMI088_ReadAccRegister(imu, 0x02, &chipID);*/

	HAL_Delay(10);
 800445a:	200a      	movs	r0, #10
 800445c:	f001 f822 	bl	80054a4 <HAL_Delay>

	/* Configure accelerometer  */

	status += BMI088_WriteAccRegister(imu, BMI_ACC_CONF, 0xA9); /* (0xA8 no oversampling, ODR = 100 Hz, BW = 40 Hz), 200 Hz no oversampling 0xA9, 0x99 200Hz OSR2  */
 8004460:	22a9      	movs	r2, #169	; 0xa9
 8004462:	2140      	movs	r1, #64	; 0x40
 8004464:	68f8      	ldr	r0, [r7, #12]
 8004466:	f000 f93d 	bl	80046e4 <BMI088_WriteAccRegister>
 800446a:	4603      	mov	r3, r0
 800446c:	461a      	mov	r2, r3
 800446e:	7dfb      	ldrb	r3, [r7, #23]
 8004470:	4413      	add	r3, r2
 8004472:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8004474:	200a      	movs	r0, #10
 8004476:	f001 f815 	bl	80054a4 <HAL_Delay>


	status += BMI088_WriteAccRegister(imu, BMI_ACC_RANGE, 0x00); /* +- 3g range */
 800447a:	2200      	movs	r2, #0
 800447c:	2141      	movs	r1, #65	; 0x41
 800447e:	68f8      	ldr	r0, [r7, #12]
 8004480:	f000 f930 	bl	80046e4 <BMI088_WriteAccRegister>
 8004484:	4603      	mov	r3, r0
 8004486:	461a      	mov	r2, r3
 8004488:	7dfb      	ldrb	r3, [r7, #23]
 800448a:	4413      	add	r3, r2
 800448c:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 800448e:	200a      	movs	r0, #10
 8004490:	f001 f808 	bl	80054a4 <HAL_Delay>


	/* Enable accelerometer data ready interrupt */
	status += BMI088_WriteAccRegister(imu, BMI_INT1_IO_CONF, 0x0A); /* INT1 = push-pull output, active high */
 8004494:	220a      	movs	r2, #10
 8004496:	2153      	movs	r1, #83	; 0x53
 8004498:	68f8      	ldr	r0, [r7, #12]
 800449a:	f000 f923 	bl	80046e4 <BMI088_WriteAccRegister>
 800449e:	4603      	mov	r3, r0
 80044a0:	461a      	mov	r2, r3
 80044a2:	7dfb      	ldrb	r3, [r7, #23]
 80044a4:	4413      	add	r3, r2
 80044a6:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 80044a8:	200a      	movs	r0, #10
 80044aa:	f000 fffb 	bl	80054a4 <HAL_Delay>

	status += BMI088_WriteAccRegister(imu, BMI_INT1_INT2_MAP_DATA, 0x04);//ACC INT -> INT1
 80044ae:	2204      	movs	r2, #4
 80044b0:	2158      	movs	r1, #88	; 0x58
 80044b2:	68f8      	ldr	r0, [r7, #12]
 80044b4:	f000 f916 	bl	80046e4 <BMI088_WriteAccRegister>
 80044b8:	4603      	mov	r3, r0
 80044ba:	461a      	mov	r2, r3
 80044bc:	7dfb      	ldrb	r3, [r7, #23]
 80044be:	4413      	add	r3, r2
 80044c0:	75fb      	strb	r3, [r7, #23]

	HAL_Delay(10);
 80044c2:	200a      	movs	r0, #10
 80044c4:	f000 ffee 	bl	80054a4 <HAL_Delay>

	/* Put accelerometer into active mode */
	status += BMI088_WriteAccRegister(imu, BMI_ACC_PWR_CONF, 0x00);
 80044c8:	2200      	movs	r2, #0
 80044ca:	217c      	movs	r1, #124	; 0x7c
 80044cc:	68f8      	ldr	r0, [r7, #12]
 80044ce:	f000 f909 	bl	80046e4 <BMI088_WriteAccRegister>
 80044d2:	4603      	mov	r3, r0
 80044d4:	461a      	mov	r2, r3
 80044d6:	7dfb      	ldrb	r3, [r7, #23]
 80044d8:	4413      	add	r3, r2
 80044da:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 80044dc:	200a      	movs	r0, #10
 80044de:	f000 ffe1 	bl	80054a4 <HAL_Delay>

	/* Turn accelerometer on */
	status += BMI088_WriteAccRegister(imu, BMI_ACC_PWR_CTRL, 0x04);
 80044e2:	2204      	movs	r2, #4
 80044e4:	217d      	movs	r1, #125	; 0x7d
 80044e6:	68f8      	ldr	r0, [r7, #12]
 80044e8:	f000 f8fc 	bl	80046e4 <BMI088_WriteAccRegister>
 80044ec:	4603      	mov	r3, r0
 80044ee:	461a      	mov	r2, r3
 80044f0:	7dfb      	ldrb	r3, [r7, #23]
 80044f2:	4413      	add	r3, r2
 80044f4:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 80044f6:	200a      	movs	r0, #10
 80044f8:	f000 ffd4 	bl	80054a4 <HAL_Delay>

	/* Pre-compute accelerometer conversion constant (raw to m/s^2), 9.81 g-constant, 32768 normalize raw data, 2^(<0x41>+1)*1.5, <0x41> is the acc range register */
	imu->accConversion = 9.81f / 32768.0f * 2.0f * 1.5f; /* Datasheet page 27 */
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	4a3a      	ldr	r2, [pc, #232]	; (80045e8 <BMI088_Init+0x230>)
 8004500:	631a      	str	r2, [r3, #48]	; 0x30
	
	/* Set accelerometer TX buffer for DMA */
	imu->accTxBuf[0] = BMI_ACC_DATA | 0x80;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	2292      	movs	r2, #146	; 0x92
 8004506:	749a      	strb	r2, [r3, #18]
	 *
	 * GYROSCOPE
	 *
	 */

	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_SET);
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	6898      	ldr	r0, [r3, #8]
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	89db      	ldrh	r3, [r3, #14]
 8004510:	2201      	movs	r2, #1
 8004512:	4619      	mov	r1, r3
 8004514:	f002 f8fc 	bl	8006710 <HAL_GPIO_WritePin>

	/* Perform gyro soft reset */
	status += BMI088_WriteGyrRegister(imu, BMI_GYR_SOFTRESET, 0xB6);
 8004518:	22b6      	movs	r2, #182	; 0xb6
 800451a:	2114      	movs	r1, #20
 800451c:	68f8      	ldr	r0, [r7, #12]
 800451e:	f000 f91b 	bl	8004758 <BMI088_WriteGyrRegister>
 8004522:	4603      	mov	r3, r0
 8004524:	461a      	mov	r2, r3
 8004526:	7dfb      	ldrb	r3, [r7, #23]
 8004528:	4413      	add	r3, r2
 800452a:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(250);
 800452c:	20fa      	movs	r0, #250	; 0xfa
 800452e:	f000 ffb9 	bl	80054a4 <HAL_Delay>

	/* Check chip ID */
	status += BMI088_ReadGyrRegister(imu, BMI_GYR_CHIP_ID, &chipID);
 8004532:	f107 0316 	add.w	r3, r7, #22
 8004536:	461a      	mov	r2, r3
 8004538:	2100      	movs	r1, #0
 800453a:	68f8      	ldr	r0, [r7, #12]
 800453c:	f000 f896 	bl	800466c <BMI088_ReadGyrRegister>
 8004540:	4603      	mov	r3, r0
 8004542:	461a      	mov	r2, r3
 8004544:	7dfb      	ldrb	r3, [r7, #23]
 8004546:	4413      	add	r3, r2
 8004548:	75fb      	strb	r3, [r7, #23]

		//return 0;

	}

	HAL_Delay(10);
 800454a:	200a      	movs	r0, #10
 800454c:	f000 ffaa 	bl	80054a4 <HAL_Delay>

	/* Configure gyroscope */
	status += BMI088_WriteGyrRegister(imu, BMI_GYR_RANGE, 0x01); /* +- 1000 deg/s */
 8004550:	2201      	movs	r2, #1
 8004552:	210f      	movs	r1, #15
 8004554:	68f8      	ldr	r0, [r7, #12]
 8004556:	f000 f8ff 	bl	8004758 <BMI088_WriteGyrRegister>
 800455a:	4603      	mov	r3, r0
 800455c:	461a      	mov	r2, r3
 800455e:	7dfb      	ldrb	r3, [r7, #23]
 8004560:	4413      	add	r3, r2
 8004562:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8004564:	200a      	movs	r0, #10
 8004566:	f000 ff9d 	bl	80054a4 <HAL_Delay>


	status += BMI088_WriteGyrRegister(imu, BMI_GYR_BANDWIDTH, 0x06); /* 0x07 ODR = 100 Hz, Filter bandwidth = 32 Hz, 0x06 BW = 64Hz ODR = 200 Hz, 0x04 ODR = 200Hz BW = 23Hz */
 800456a:	2206      	movs	r2, #6
 800456c:	2110      	movs	r1, #16
 800456e:	68f8      	ldr	r0, [r7, #12]
 8004570:	f000 f8f2 	bl	8004758 <BMI088_WriteGyrRegister>
 8004574:	4603      	mov	r3, r0
 8004576:	461a      	mov	r2, r3
 8004578:	7dfb      	ldrb	r3, [r7, #23]
 800457a:	4413      	add	r3, r2
 800457c:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 800457e:	200a      	movs	r0, #10
 8004580:	f000 ff90 	bl	80054a4 <HAL_Delay>

	/* Enable gyroscope data ready interrupt */
	status += BMI088_WriteGyrRegister(imu, BMI_GYR_INT_CTRL, 0x80); /* New data interrupt enabled */
 8004584:	2280      	movs	r2, #128	; 0x80
 8004586:	2115      	movs	r1, #21
 8004588:	68f8      	ldr	r0, [r7, #12]
 800458a:	f000 f8e5 	bl	8004758 <BMI088_WriteGyrRegister>
 800458e:	4603      	mov	r3, r0
 8004590:	461a      	mov	r2, r3
 8004592:	7dfb      	ldrb	r3, [r7, #23]
 8004594:	4413      	add	r3, r2
 8004596:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8004598:	200a      	movs	r0, #10
 800459a:	f000 ff83 	bl	80054a4 <HAL_Delay>

	status += BMI088_WriteGyrRegister(imu, BMI_INT3_INT4_IO_CONF, 0x01); /* INT3 = push-pull, active high */
 800459e:	2201      	movs	r2, #1
 80045a0:	2116      	movs	r1, #22
 80045a2:	68f8      	ldr	r0, [r7, #12]
 80045a4:	f000 f8d8 	bl	8004758 <BMI088_WriteGyrRegister>
 80045a8:	4603      	mov	r3, r0
 80045aa:	461a      	mov	r2, r3
 80045ac:	7dfb      	ldrb	r3, [r7, #23]
 80045ae:	4413      	add	r3, r2
 80045b0:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 80045b2:	200a      	movs	r0, #10
 80045b4:	f000 ff76 	bl	80054a4 <HAL_Delay>

	status += BMI088_WriteGyrRegister(imu, BMI_INT3_INT4_IO_MAP, 0x01); /* Data ready interrupt mapped to INT3 pin */
 80045b8:	2201      	movs	r2, #1
 80045ba:	2118      	movs	r1, #24
 80045bc:	68f8      	ldr	r0, [r7, #12]
 80045be:	f000 f8cb 	bl	8004758 <BMI088_WriteGyrRegister>
 80045c2:	4603      	mov	r3, r0
 80045c4:	461a      	mov	r2, r3
 80045c6:	7dfb      	ldrb	r3, [r7, #23]
 80045c8:	4413      	add	r3, r2
 80045ca:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 80045cc:	200a      	movs	r0, #10
 80045ce:	f000 ff69 	bl	80054a4 <HAL_Delay>

	/* Pre-compute gyroscope conversion constant (raw to rad/s) 0.017 °/s -> rad/s, 1000 the range, 32768 normalize the raw data*/
	imu->gyrConversion = 0.01745329251f * 1000.0f / 32768.0f; /* Datasheet page 39 */
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	4a05      	ldr	r2, [pc, #20]	; (80045ec <BMI088_Init+0x234>)
 80045d6:	635a      	str	r2, [r3, #52]	; 0x34
	
	/* Set gyroscope TX buffer for DMA */
	imu->gyrTxBuf[0] = BMI_GYR_DATA | 0x80;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	2282      	movs	r2, #130	; 0x82
 80045dc:	769a      	strb	r2, [r3, #26]

	return status;
 80045de:	7dfb      	ldrb	r3, [r7, #23]

}
 80045e0:	4618      	mov	r0, r3
 80045e2:	3718      	adds	r7, #24
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bd80      	pop	{r7, pc}
 80045e8:	3a6b70a4 	.word	0x3a6b70a4
 80045ec:	3a0ba058 	.word	0x3a0ba058

080045f0 <BMI088_ReadAccRegister>:
 * LOW-LEVEL REGISTER FUNCTIONS
 *
 */

/* ACCELEROMETER READS ARE DIFFERENT TO GYROSCOPE READS. SEND ONE BYTE ADDRESS, READ ONE DUMMY BYTE, READ TRUE DATA !!! */
uint8_t BMI088_ReadAccRegister(BMI088 *imu, uint8_t regAddr, uint8_t *data) {
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b088      	sub	sp, #32
 80045f4:	af02      	add	r7, sp, #8
 80045f6:	60f8      	str	r0, [r7, #12]
 80045f8:	460b      	mov	r3, r1
 80045fa:	607a      	str	r2, [r7, #4]
 80045fc:	72fb      	strb	r3, [r7, #11]

	uint8_t txBuf[3] = {regAddr | 0x80, 0x00, 0x00};
 80045fe:	7afb      	ldrb	r3, [r7, #11]
 8004600:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004604:	b2db      	uxtb	r3, r3
 8004606:	753b      	strb	r3, [r7, #20]
 8004608:	2300      	movs	r3, #0
 800460a:	757b      	strb	r3, [r7, #21]
 800460c:	2300      	movs	r3, #0
 800460e:	75bb      	strb	r3, [r7, #22]
	uint8_t rxBuf[3];

	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_RESET);
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	6858      	ldr	r0, [r3, #4]
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	899b      	ldrh	r3, [r3, #12]
 8004618:	2200      	movs	r2, #0
 800461a:	4619      	mov	r1, r3
 800461c:	f002 f878 	bl	8006710 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_TransmitReceive(imu->spiHandle, txBuf, rxBuf, 3, HAL_MAX_DELAY) == HAL_OK);
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	6818      	ldr	r0, [r3, #0]
 8004624:	f107 0210 	add.w	r2, r7, #16
 8004628:	f107 0114 	add.w	r1, r7, #20
 800462c:	f04f 33ff 	mov.w	r3, #4294967295
 8004630:	9300      	str	r3, [sp, #0]
 8004632:	2303      	movs	r3, #3
 8004634:	f003 fed5 	bl	80083e2 <HAL_SPI_TransmitReceive>
 8004638:	4603      	mov	r3, r0
 800463a:	2b00      	cmp	r3, #0
 800463c:	bf0c      	ite	eq
 800463e:	2301      	moveq	r3, #1
 8004640:	2300      	movne	r3, #0
 8004642:	b2db      	uxtb	r3, r3
 8004644:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_SET);
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	6858      	ldr	r0, [r3, #4]
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	899b      	ldrh	r3, [r3, #12]
 800464e:	2201      	movs	r2, #1
 8004650:	4619      	mov	r1, r3
 8004652:	f002 f85d 	bl	8006710 <HAL_GPIO_WritePin>

	if (status == 1) {
 8004656:	7dfb      	ldrb	r3, [r7, #23]
 8004658:	2b01      	cmp	r3, #1
 800465a:	d102      	bne.n	8004662 <BMI088_ReadAccRegister+0x72>

		*data = rxBuf[2];
 800465c:	7cba      	ldrb	r2, [r7, #18]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	701a      	strb	r2, [r3, #0]

	}

	return status;
 8004662:	7dfb      	ldrb	r3, [r7, #23]

}
 8004664:	4618      	mov	r0, r3
 8004666:	3718      	adds	r7, #24
 8004668:	46bd      	mov	sp, r7
 800466a:	bd80      	pop	{r7, pc}

0800466c <BMI088_ReadGyrRegister>:

uint8_t BMI088_ReadGyrRegister(BMI088 *imu, uint8_t regAddr, uint8_t *data) {
 800466c:	b580      	push	{r7, lr}
 800466e:	b088      	sub	sp, #32
 8004670:	af02      	add	r7, sp, #8
 8004672:	60f8      	str	r0, [r7, #12]
 8004674:	460b      	mov	r3, r1
 8004676:	607a      	str	r2, [r7, #4]
 8004678:	72fb      	strb	r3, [r7, #11]

	uint8_t txBuf[2] = {regAddr | 0x80, 0x00}; //0x80
 800467a:	7afb      	ldrb	r3, [r7, #11]
 800467c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004680:	b2db      	uxtb	r3, r3
 8004682:	753b      	strb	r3, [r7, #20]
 8004684:	2300      	movs	r3, #0
 8004686:	757b      	strb	r3, [r7, #21]
	uint8_t rxBuf[2];

	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_RESET);
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	6898      	ldr	r0, [r3, #8]
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	89db      	ldrh	r3, [r3, #14]
 8004690:	2200      	movs	r2, #0
 8004692:	4619      	mov	r1, r3
 8004694:	f002 f83c 	bl	8006710 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_TransmitReceive(imu->spiHandle, txBuf, rxBuf, 2, HAL_MAX_DELAY) == HAL_OK);
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	6818      	ldr	r0, [r3, #0]
 800469c:	f107 0210 	add.w	r2, r7, #16
 80046a0:	f107 0114 	add.w	r1, r7, #20
 80046a4:	f04f 33ff 	mov.w	r3, #4294967295
 80046a8:	9300      	str	r3, [sp, #0]
 80046aa:	2302      	movs	r3, #2
 80046ac:	f003 fe99 	bl	80083e2 <HAL_SPI_TransmitReceive>
 80046b0:	4603      	mov	r3, r0
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	bf0c      	ite	eq
 80046b6:	2301      	moveq	r3, #1
 80046b8:	2300      	movne	r3, #0
 80046ba:	b2db      	uxtb	r3, r3
 80046bc:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_SET);
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	6898      	ldr	r0, [r3, #8]
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	89db      	ldrh	r3, [r3, #14]
 80046c6:	2201      	movs	r2, #1
 80046c8:	4619      	mov	r1, r3
 80046ca:	f002 f821 	bl	8006710 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_RESET);
	uint8_t status = (HAL_SPI_TransmitReceive(imu->spiHandle, txBuf, rxBuf, 3, HAL_MAX_DELAY) == HAL_OK);
	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_SET);*/

	if (status == 1) {
 80046ce:	7dfb      	ldrb	r3, [r7, #23]
 80046d0:	2b01      	cmp	r3, #1
 80046d2:	d102      	bne.n	80046da <BMI088_ReadGyrRegister+0x6e>

		*data = rxBuf[1];
 80046d4:	7c7a      	ldrb	r2, [r7, #17]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	701a      	strb	r2, [r3, #0]

	}

	return status;
 80046da:	7dfb      	ldrb	r3, [r7, #23]

}
 80046dc:	4618      	mov	r0, r3
 80046de:	3718      	adds	r7, #24
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bd80      	pop	{r7, pc}

080046e4 <BMI088_WriteAccRegister>:

uint8_t BMI088_WriteAccRegister(BMI088 *imu, uint8_t regAddr, uint8_t data) {
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b084      	sub	sp, #16
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
 80046ec:	460b      	mov	r3, r1
 80046ee:	70fb      	strb	r3, [r7, #3]
 80046f0:	4613      	mov	r3, r2
 80046f2:	70bb      	strb	r3, [r7, #2]

	uint8_t txBuf[2] = {regAddr, data};
 80046f4:	78fb      	ldrb	r3, [r7, #3]
 80046f6:	733b      	strb	r3, [r7, #12]
 80046f8:	78bb      	ldrb	r3, [r7, #2]
 80046fa:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_RESET);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6858      	ldr	r0, [r3, #4]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	899b      	ldrh	r3, [r3, #12]
 8004704:	2200      	movs	r2, #0
 8004706:	4619      	mov	r1, r3
 8004708:	f002 f802 	bl	8006710 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_Transmit(imu->spiHandle, txBuf, 2, HAL_MAX_DELAY) == HAL_OK);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6818      	ldr	r0, [r3, #0]
 8004710:	f107 010c 	add.w	r1, r7, #12
 8004714:	f04f 33ff 	mov.w	r3, #4294967295
 8004718:	2202      	movs	r2, #2
 800471a:	f003 fd26 	bl	800816a <HAL_SPI_Transmit>
 800471e:	4603      	mov	r3, r0
 8004720:	2b00      	cmp	r3, #0
 8004722:	bf0c      	ite	eq
 8004724:	2301      	moveq	r3, #1
 8004726:	2300      	movne	r3, #0
 8004728:	b2db      	uxtb	r3, r3
 800472a:	73fb      	strb	r3, [r7, #15]
	while(HAL_SPI_GetState(imu->spiHandle) != HAL_SPI_STATE_READY);
 800472c:	bf00      	nop
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4618      	mov	r0, r3
 8004734:	f003 fff7 	bl	8008726 <HAL_SPI_GetState>
 8004738:	4603      	mov	r3, r0
 800473a:	2b01      	cmp	r3, #1
 800473c:	d1f7      	bne.n	800472e <BMI088_WriteAccRegister+0x4a>
	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_SET);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6858      	ldr	r0, [r3, #4]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	899b      	ldrh	r3, [r3, #12]
 8004746:	2201      	movs	r2, #1
 8004748:	4619      	mov	r1, r3
 800474a:	f001 ffe1 	bl	8006710 <HAL_GPIO_WritePin>

	return status;
 800474e:	7bfb      	ldrb	r3, [r7, #15]

}
 8004750:	4618      	mov	r0, r3
 8004752:	3710      	adds	r7, #16
 8004754:	46bd      	mov	sp, r7
 8004756:	bd80      	pop	{r7, pc}

08004758 <BMI088_WriteGyrRegister>:

uint8_t BMI088_WriteGyrRegister(BMI088 *imu, uint8_t regAddr, uint8_t data) {
 8004758:	b580      	push	{r7, lr}
 800475a:	b084      	sub	sp, #16
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
 8004760:	460b      	mov	r3, r1
 8004762:	70fb      	strb	r3, [r7, #3]
 8004764:	4613      	mov	r3, r2
 8004766:	70bb      	strb	r3, [r7, #2]

	uint8_t txBuf[2] = {regAddr, data};
 8004768:	78fb      	ldrb	r3, [r7, #3]
 800476a:	733b      	strb	r3, [r7, #12]
 800476c:	78bb      	ldrb	r3, [r7, #2]
 800476e:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_RESET);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6898      	ldr	r0, [r3, #8]
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	89db      	ldrh	r3, [r3, #14]
 8004778:	2200      	movs	r2, #0
 800477a:	4619      	mov	r1, r3
 800477c:	f001 ffc8 	bl	8006710 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_Transmit(imu->spiHandle, txBuf, 2, HAL_MAX_DELAY) == HAL_OK);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6818      	ldr	r0, [r3, #0]
 8004784:	f107 010c 	add.w	r1, r7, #12
 8004788:	f04f 33ff 	mov.w	r3, #4294967295
 800478c:	2202      	movs	r2, #2
 800478e:	f003 fcec 	bl	800816a <HAL_SPI_Transmit>
 8004792:	4603      	mov	r3, r0
 8004794:	2b00      	cmp	r3, #0
 8004796:	bf0c      	ite	eq
 8004798:	2301      	moveq	r3, #1
 800479a:	2300      	movne	r3, #0
 800479c:	b2db      	uxtb	r3, r3
 800479e:	73fb      	strb	r3, [r7, #15]
	while(HAL_SPI_GetState(imu->spiHandle) != HAL_SPI_STATE_READY);
 80047a0:	bf00      	nop
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4618      	mov	r0, r3
 80047a8:	f003 ffbd 	bl	8008726 <HAL_SPI_GetState>
 80047ac:	4603      	mov	r3, r0
 80047ae:	2b01      	cmp	r3, #1
 80047b0:	d1f7      	bne.n	80047a2 <BMI088_WriteGyrRegister+0x4a>
	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_SET);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6898      	ldr	r0, [r3, #8]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	89db      	ldrh	r3, [r3, #14]
 80047ba:	2201      	movs	r2, #1
 80047bc:	4619      	mov	r1, r3
 80047be:	f001 ffa7 	bl	8006710 <HAL_GPIO_WritePin>

	return status;
 80047c2:	7bfb      	ldrb	r3, [r7, #15]

}
 80047c4:	4618      	mov	r0, r3
 80047c6:	3710      	adds	r7, #16
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bd80      	pop	{r7, pc}

080047cc <BMI088_ReadAccelerometer>:
/*
 *
 * POLLING
 *
 */
uint8_t BMI088_ReadAccelerometer(BMI088 *imu) {
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b08a      	sub	sp, #40	; 0x28
 80047d0:	af02      	add	r7, sp, #8
 80047d2:	6078      	str	r0, [r7, #4]

	/* Read raw accelerometer data */
	uint8_t txBuf[8] = {(BMI_ACC_DATA | 0x80), 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}; /* Register addr, 1 byte dummy, 6 bytes data */
 80047d4:	4a36      	ldr	r2, [pc, #216]	; (80048b0 <BMI088_ReadAccelerometer+0xe4>)
 80047d6:	f107 0310 	add.w	r3, r7, #16
 80047da:	e892 0003 	ldmia.w	r2, {r0, r1}
 80047de:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t rxBuf[8];

	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_RESET);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6858      	ldr	r0, [r3, #4]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	899b      	ldrh	r3, [r3, #12]
 80047ea:	2200      	movs	r2, #0
 80047ec:	4619      	mov	r1, r3
 80047ee:	f001 ff8f 	bl	8006710 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_TransmitReceive(imu->spiHandle, txBuf, rxBuf, 8, HAL_MAX_DELAY) == HAL_OK);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6818      	ldr	r0, [r3, #0]
 80047f6:	f107 0208 	add.w	r2, r7, #8
 80047fa:	f107 0110 	add.w	r1, r7, #16
 80047fe:	f04f 33ff 	mov.w	r3, #4294967295
 8004802:	9300      	str	r3, [sp, #0]
 8004804:	2308      	movs	r3, #8
 8004806:	f003 fdec 	bl	80083e2 <HAL_SPI_TransmitReceive>
 800480a:	4603      	mov	r3, r0
 800480c:	2b00      	cmp	r3, #0
 800480e:	bf0c      	ite	eq
 8004810:	2301      	moveq	r3, #1
 8004812:	2300      	movne	r3, #0
 8004814:	b2db      	uxtb	r3, r3
 8004816:	77fb      	strb	r3, [r7, #31]
	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_SET);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6858      	ldr	r0, [r3, #4]
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	899b      	ldrh	r3, [r3, #12]
 8004820:	2201      	movs	r2, #1
 8004822:	4619      	mov	r1, r3
 8004824:	f001 ff74 	bl	8006710 <HAL_GPIO_WritePin>

	/* Form signed 16-bit integers */
	int16_t accX = (int16_t) ((rxBuf[3] << 8) | rxBuf[2]);
 8004828:	7afb      	ldrb	r3, [r7, #11]
 800482a:	021b      	lsls	r3, r3, #8
 800482c:	b21a      	sxth	r2, r3
 800482e:	7abb      	ldrb	r3, [r7, #10]
 8004830:	b21b      	sxth	r3, r3
 8004832:	4313      	orrs	r3, r2
 8004834:	83bb      	strh	r3, [r7, #28]
	int16_t accY = (int16_t) ((rxBuf[5] << 8) | rxBuf[4]);
 8004836:	7b7b      	ldrb	r3, [r7, #13]
 8004838:	021b      	lsls	r3, r3, #8
 800483a:	b21a      	sxth	r2, r3
 800483c:	7b3b      	ldrb	r3, [r7, #12]
 800483e:	b21b      	sxth	r3, r3
 8004840:	4313      	orrs	r3, r2
 8004842:	837b      	strh	r3, [r7, #26]
	int16_t accZ = (int16_t) ((rxBuf[7] << 8) | rxBuf[6]);
 8004844:	7bfb      	ldrb	r3, [r7, #15]
 8004846:	021b      	lsls	r3, r3, #8
 8004848:	b21a      	sxth	r2, r3
 800484a:	7bbb      	ldrb	r3, [r7, #14]
 800484c:	b21b      	sxth	r3, r3
 800484e:	4313      	orrs	r3, r2
 8004850:	833b      	strh	r3, [r7, #24]

	/* Convert to m/s^2 */
	imu->acc_mps2[0] = imu->accConversion * accX;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8004858:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800485c:	ee07 3a90 	vmov	s15, r3
 8004860:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004864:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
	imu->acc_mps2[1] = imu->accConversion * accY;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8004874:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8004878:	ee07 3a90 	vmov	s15, r3
 800487c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004880:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
	imu->acc_mps2[2] = imu->accConversion * accZ;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8004890:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8004894:	ee07 3a90 	vmov	s15, r3
 8004898:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800489c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40

	return status;
 80048a6:	7ffb      	ldrb	r3, [r7, #31]

}
 80048a8:	4618      	mov	r0, r3
 80048aa:	3720      	adds	r7, #32
 80048ac:	46bd      	mov	sp, r7
 80048ae:	bd80      	pop	{r7, pc}
 80048b0:	080143dc 	.word	0x080143dc

080048b4 <BMI088_ReadGyroscope>:

uint8_t BMI088_ReadGyroscope(BMI088 *imu) {
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b08a      	sub	sp, #40	; 0x28
 80048b8:	af02      	add	r7, sp, #8
 80048ba:	6078      	str	r0, [r7, #4]

	/* Read raw gyroscope data */
	uint8_t txBuf[7] = {(BMI_GYR_DATA | 0x80), 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}; /* Register addr, 6 bytes data */
 80048bc:	4a38      	ldr	r2, [pc, #224]	; (80049a0 <BMI088_ReadGyroscope+0xec>)
 80048be:	f107 0310 	add.w	r3, r7, #16
 80048c2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80048c6:	6018      	str	r0, [r3, #0]
 80048c8:	3304      	adds	r3, #4
 80048ca:	8019      	strh	r1, [r3, #0]
 80048cc:	3302      	adds	r3, #2
 80048ce:	0c0a      	lsrs	r2, r1, #16
 80048d0:	701a      	strb	r2, [r3, #0]
	uint8_t rxBuf[7];

	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_RESET);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6898      	ldr	r0, [r3, #8]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	89db      	ldrh	r3, [r3, #14]
 80048da:	2200      	movs	r2, #0
 80048dc:	4619      	mov	r1, r3
 80048de:	f001 ff17 	bl	8006710 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_TransmitReceive(imu->spiHandle, txBuf, rxBuf, 7, HAL_MAX_DELAY) == HAL_OK);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6818      	ldr	r0, [r3, #0]
 80048e6:	f107 0208 	add.w	r2, r7, #8
 80048ea:	f107 0110 	add.w	r1, r7, #16
 80048ee:	f04f 33ff 	mov.w	r3, #4294967295
 80048f2:	9300      	str	r3, [sp, #0]
 80048f4:	2307      	movs	r3, #7
 80048f6:	f003 fd74 	bl	80083e2 <HAL_SPI_TransmitReceive>
 80048fa:	4603      	mov	r3, r0
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	bf0c      	ite	eq
 8004900:	2301      	moveq	r3, #1
 8004902:	2300      	movne	r3, #0
 8004904:	b2db      	uxtb	r3, r3
 8004906:	77fb      	strb	r3, [r7, #31]
	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_SET);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6898      	ldr	r0, [r3, #8]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	89db      	ldrh	r3, [r3, #14]
 8004910:	2201      	movs	r2, #1
 8004912:	4619      	mov	r1, r3
 8004914:	f001 fefc 	bl	8006710 <HAL_GPIO_WritePin>

	/* Form signed 16-bit integers */
	int16_t gyrX = (int16_t) ((rxBuf[2] << 8) | rxBuf[1]);
 8004918:	7abb      	ldrb	r3, [r7, #10]
 800491a:	021b      	lsls	r3, r3, #8
 800491c:	b21a      	sxth	r2, r3
 800491e:	7a7b      	ldrb	r3, [r7, #9]
 8004920:	b21b      	sxth	r3, r3
 8004922:	4313      	orrs	r3, r2
 8004924:	83bb      	strh	r3, [r7, #28]
	int16_t gyrY = (int16_t) ((rxBuf[4] << 8) | rxBuf[3]);
 8004926:	7b3b      	ldrb	r3, [r7, #12]
 8004928:	021b      	lsls	r3, r3, #8
 800492a:	b21a      	sxth	r2, r3
 800492c:	7afb      	ldrb	r3, [r7, #11]
 800492e:	b21b      	sxth	r3, r3
 8004930:	4313      	orrs	r3, r2
 8004932:	837b      	strh	r3, [r7, #26]
	int16_t gyrZ = (int16_t) ((rxBuf[6] << 8) | rxBuf[5]);
 8004934:	7bbb      	ldrb	r3, [r7, #14]
 8004936:	021b      	lsls	r3, r3, #8
 8004938:	b21a      	sxth	r2, r3
 800493a:	7b7b      	ldrb	r3, [r7, #13]
 800493c:	b21b      	sxth	r3, r3
 800493e:	4313      	orrs	r3, r2
 8004940:	833b      	strh	r3, [r7, #24]

	/* Convert to rad/s */
	imu->gyr_rps[0] = imu->gyrConversion * gyrX;//-0.0000661263;//-0.000220318;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8004948:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800494c:	ee07 3a90 	vmov	s15, r3
 8004950:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004954:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
	imu->gyr_rps[1] = imu->gyrConversion * gyrY;//-0.000491353;//-0.001161367;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8004964:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8004968:	ee07 3a90 	vmov	s15, r3
 800496c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004970:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
	imu->gyr_rps[2] = imu->gyrConversion * gyrZ;//-0.002349043;//-0.002582031;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8004980:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8004984:	ee07 3a90 	vmov	s15, r3
 8004988:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800498c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c

	//own code line
	//if(status == 1) HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);
	return status;
 8004996:	7ffb      	ldrb	r3, [r7, #31]

}
 8004998:	4618      	mov	r0, r3
 800499a:	3720      	adds	r7, #32
 800499c:	46bd      	mov	sp, r7
 800499e:	bd80      	pop	{r7, pc}
 80049a0:	080143e4 	.word	0x080143e4

080049a4 <BMP388_Init>:
 *
 *  @return Status of execution
 *  @retval = HAL_OK  		-> Success
 *  @retval != HAL_OK	  	-> Failure Info
 */
HAL_StatusTypeDef BMP388_Init(BMP388_HandleTypeDef *bmp){
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b084      	sub	sp, #16
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef rslt;
	uint8_t chip_id;

	// Read CHIP_ID byte
	rslt = BMP388_ReadBytes(bmp, CHIP_ID, &chip_id, 1);
 80049ac:	f107 020e 	add.w	r2, r7, #14
 80049b0:	2301      	movs	r3, #1
 80049b2:	2100      	movs	r1, #0
 80049b4:	6878      	ldr	r0, [r7, #4]
 80049b6:	f000 fc08 	bl	80051ca <BMP388_ReadBytes>
 80049ba:	4603      	mov	r3, r0
 80049bc:	73fb      	strb	r3, [r7, #15]
	if(rslt == HAL_OK && chip_id == BMP388_CHIP_ID){
 80049be:	7bfb      	ldrb	r3, [r7, #15]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d12a      	bne.n	8004a1a <BMP388_Init+0x76>
 80049c4:	7bbb      	ldrb	r3, [r7, #14]
 80049c6:	2b50      	cmp	r3, #80	; 0x50
 80049c8:	d127      	bne.n	8004a1a <BMP388_Init+0x76>
		// using softreset command
		rslt = BMP388_SoftReset(bmp);
 80049ca:	6878      	ldr	r0, [r7, #4]
 80049cc:	f000 f962 	bl	8004c94 <BMP388_SoftReset>
 80049d0:	4603      	mov	r3, r0
 80049d2:	73fb      	strb	r3, [r7, #15]
		if(rslt == HAL_OK){
 80049d4:	7bfb      	ldrb	r3, [r7, #15]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d11d      	bne.n	8004a16 <BMP388_Init+0x72>
			// get calibration data
			rslt = BMP388_GetCalibData(bmp);
 80049da:	6878      	ldr	r0, [r7, #4]
 80049dc:	f000 f99a 	bl	8004d14 <BMP388_GetCalibData>
 80049e0:	4603      	mov	r3, r0
 80049e2:	73fb      	strb	r3, [r7, #15]
		if(rslt == HAL_OK){
 80049e4:	bf00      	nop
		}
	}
	else{
		return rslt;
	}
	uint8_t pwr_ctrl = BMP388_PWR_CTRL_PRESS_ON | BMP388_PWR_CTRL_TEMP_ON | BMP388_PWR_CTRL_MODE_NORMAL;
 80049e6:	2333      	movs	r3, #51	; 0x33
 80049e8:	737b      	strb	r3, [r7, #13]

	uint8_t oversampling = bmp->_oversampling;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	791b      	ldrb	r3, [r3, #4]
 80049ee:	733b      	strb	r3, [r7, #12]
	uint8_t odr = bmp->_odr;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	799b      	ldrb	r3, [r3, #6]
 80049f4:	72fb      	strb	r3, [r7, #11]
	uint8_t filtercoeff = bmp->_filtercoeff;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	795b      	ldrb	r3, [r3, #5]
 80049fa:	72bb      	strb	r3, [r7, #10]



	// Set OSR register
	rslt = BMP388_WriteBytes(bmp, OSR, &oversampling, 1);
 80049fc:	f107 020c 	add.w	r2, r7, #12
 8004a00:	2301      	movs	r3, #1
 8004a02:	211c      	movs	r1, #28
 8004a04:	6878      	ldr	r0, [r7, #4]
 8004a06:	f000 fbfe 	bl	8005206 <BMP388_WriteBytes>
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	73fb      	strb	r3, [r7, #15]
	if(rslt != HAL_OK){
 8004a0e:	7bfb      	ldrb	r3, [r7, #15]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d006      	beq.n	8004a22 <BMP388_Init+0x7e>
 8004a14:	e003      	b.n	8004a1e <BMP388_Init+0x7a>
			return rslt;
 8004a16:	7bfb      	ldrb	r3, [r7, #15]
 8004a18:	e03b      	b.n	8004a92 <BMP388_Init+0xee>
		return rslt;
 8004a1a:	7bfb      	ldrb	r3, [r7, #15]
 8004a1c:	e039      	b.n	8004a92 <BMP388_Init+0xee>
		return rslt;
 8004a1e:	7bfb      	ldrb	r3, [r7, #15]
 8004a20:	e037      	b.n	8004a92 <BMP388_Init+0xee>
	}
	// Set ODR register
	rslt = BMP388_WriteBytes(bmp, ODR, &odr, 1);
 8004a22:	f107 020b 	add.w	r2, r7, #11
 8004a26:	2301      	movs	r3, #1
 8004a28:	211d      	movs	r1, #29
 8004a2a:	6878      	ldr	r0, [r7, #4]
 8004a2c:	f000 fbeb 	bl	8005206 <BMP388_WriteBytes>
 8004a30:	4603      	mov	r3, r0
 8004a32:	73fb      	strb	r3, [r7, #15]
	if(rslt != HAL_OK){
 8004a34:	7bfb      	ldrb	r3, [r7, #15]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d001      	beq.n	8004a3e <BMP388_Init+0x9a>
		return rslt;
 8004a3a:	7bfb      	ldrb	r3, [r7, #15]
 8004a3c:	e029      	b.n	8004a92 <BMP388_Init+0xee>
	}
	// Set CONFIG register
	rslt = BMP388_WriteBytes(bmp, CONFIG, &filtercoeff, 1);
 8004a3e:	f107 020a 	add.w	r2, r7, #10
 8004a42:	2301      	movs	r3, #1
 8004a44:	211f      	movs	r1, #31
 8004a46:	6878      	ldr	r0, [r7, #4]
 8004a48:	f000 fbdd 	bl	8005206 <BMP388_WriteBytes>
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	73fb      	strb	r3, [r7, #15]
	if(rslt != HAL_OK){
 8004a50:	7bfb      	ldrb	r3, [r7, #15]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d001      	beq.n	8004a5a <BMP388_Init+0xb6>
		return rslt;
 8004a56:	7bfb      	ldrb	r3, [r7, #15]
 8004a58:	e01b      	b.n	8004a92 <BMP388_Init+0xee>
	}
	// Set PWR_CTRL register
	rslt = BMP388_WriteBytes(bmp, PWR_CTRL, &pwr_ctrl, 1);
 8004a5a:	f107 020d 	add.w	r2, r7, #13
 8004a5e:	2301      	movs	r3, #1
 8004a60:	211b      	movs	r1, #27
 8004a62:	6878      	ldr	r0, [r7, #4]
 8004a64:	f000 fbcf 	bl	8005206 <BMP388_WriteBytes>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	73fb      	strb	r3, [r7, #15]
	if(rslt != HAL_OK){
 8004a6c:	7bfb      	ldrb	r3, [r7, #15]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d001      	beq.n	8004a76 <BMP388_Init+0xd2>
		return rslt;
 8004a72:	7bfb      	ldrb	r3, [r7, #15]
 8004a74:	e00d      	b.n	8004a92 <BMP388_Init+0xee>
	}

	rslt = BMP388_WriteBytes(bmp, INT_CTRL, 0x40, 1);
 8004a76:	2301      	movs	r3, #1
 8004a78:	2240      	movs	r2, #64	; 0x40
 8004a7a:	2119      	movs	r1, #25
 8004a7c:	6878      	ldr	r0, [r7, #4]
 8004a7e:	f000 fbc2 	bl	8005206 <BMP388_WriteBytes>
 8004a82:	4603      	mov	r3, r0
 8004a84:	73fb      	strb	r3, [r7, #15]
	if(rslt != HAL_OK){
 8004a86:	7bfb      	ldrb	r3, [r7, #15]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d001      	beq.n	8004a90 <BMP388_Init+0xec>
		return rslt;
 8004a8c:	7bfb      	ldrb	r3, [r7, #15]
 8004a8e:	e000      	b.n	8004a92 <BMP388_Init+0xee>
	}

	return rslt;
 8004a90:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a92:	4618      	mov	r0, r3
 8004a94:	3710      	adds	r7, #16
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bd80      	pop	{r7, pc}

08004a9a <BMP388_SetTempOS>:
 *
 *  @return Status of execution
 *  @retval = HAL_OK  		-> Success
 *  @retval != HAL_OK	  	-> Wrong oversampling mode
 */
HAL_StatusTypeDef BMP388_SetTempOS(BMP388_HandleTypeDef *bmp, uint8_t oversample){
 8004a9a:	b480      	push	{r7}
 8004a9c:	b083      	sub	sp, #12
 8004a9e:	af00      	add	r7, sp, #0
 8004aa0:	6078      	str	r0, [r7, #4]
 8004aa2:	460b      	mov	r3, r1
 8004aa4:	70fb      	strb	r3, [r7, #3]
	if(oversample > BMP388_OVERSAMPLING_32X){
 8004aa6:	78fb      	ldrb	r3, [r7, #3]
 8004aa8:	2b05      	cmp	r3, #5
 8004aaa:	d901      	bls.n	8004ab0 <BMP388_SetTempOS+0x16>
		return HAL_ERROR;
 8004aac:	2301      	movs	r3, #1
 8004aae:	e00e      	b.n	8004ace <BMP388_SetTempOS+0x34>
	}
	bmp->_oversampling = (bmp->_oversampling & 0b11000111) | (oversample << 3); //& clear the temp OS bits and the | set the temp OS reg
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	791b      	ldrb	r3, [r3, #4]
 8004ab4:	b25b      	sxtb	r3, r3
 8004ab6:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8004aba:	b25a      	sxtb	r2, r3
 8004abc:	78fb      	ldrb	r3, [r7, #3]
 8004abe:	00db      	lsls	r3, r3, #3
 8004ac0:	b25b      	sxtb	r3, r3
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	b25b      	sxtb	r3, r3
 8004ac6:	b2da      	uxtb	r2, r3
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	711a      	strb	r2, [r3, #4]
	return HAL_OK;
 8004acc:	2300      	movs	r3, #0
}
 8004ace:	4618      	mov	r0, r3
 8004ad0:	370c      	adds	r7, #12
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad8:	4770      	bx	lr

08004ada <BMP388_SetPressOS>:
 *
 *  @return Status of execution
 *  @retval = HAL_OK  		-> Success
 *  @retval != HAL_OK	  	-> Wrong oversampling mode
 */
HAL_StatusTypeDef BMP388_SetPressOS(BMP388_HandleTypeDef *bmp, uint8_t oversample){
 8004ada:	b480      	push	{r7}
 8004adc:	b083      	sub	sp, #12
 8004ade:	af00      	add	r7, sp, #0
 8004ae0:	6078      	str	r0, [r7, #4]
 8004ae2:	460b      	mov	r3, r1
 8004ae4:	70fb      	strb	r3, [r7, #3]
	if(oversample > BMP388_OVERSAMPLING_32X){
 8004ae6:	78fb      	ldrb	r3, [r7, #3]
 8004ae8:	2b05      	cmp	r3, #5
 8004aea:	d901      	bls.n	8004af0 <BMP388_SetPressOS+0x16>
		return HAL_ERROR;
 8004aec:	2301      	movs	r3, #1
 8004aee:	e00d      	b.n	8004b0c <BMP388_SetPressOS+0x32>
	}
	bmp->_oversampling = (bmp->_oversampling & 0b11111000) | oversample; //& clear the press OS bits and the | set the press OS reg
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	791b      	ldrb	r3, [r3, #4]
 8004af4:	b25b      	sxtb	r3, r3
 8004af6:	f023 0307 	bic.w	r3, r3, #7
 8004afa:	b25a      	sxtb	r2, r3
 8004afc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004b00:	4313      	orrs	r3, r2
 8004b02:	b25b      	sxtb	r3, r3
 8004b04:	b2da      	uxtb	r2, r3
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	711a      	strb	r2, [r3, #4]
	return HAL_OK;
 8004b0a:	2300      	movs	r3, #0
}
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	370c      	adds	r7, #12
 8004b10:	46bd      	mov	sp, r7
 8004b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b16:	4770      	bx	lr

08004b18 <BMP388_SetIIRFilterCoeff>:
 *
 *  @return Status of execution
 *  @retval = HAL_OK  		-> Success
 *  @retval != HAL_OK	  	-> Wrong filter coefficient
 */
HAL_StatusTypeDef BMP388_SetIIRFilterCoeff(BMP388_HandleTypeDef *bmp, uint8_t filtercoeff){
 8004b18:	b480      	push	{r7}
 8004b1a:	b083      	sub	sp, #12
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
 8004b20:	460b      	mov	r3, r1
 8004b22:	70fb      	strb	r3, [r7, #3]
	if(filtercoeff > BMP3_IIR_FILTER_COEFF_127){
 8004b24:	78fb      	ldrb	r3, [r7, #3]
 8004b26:	2b07      	cmp	r3, #7
 8004b28:	d901      	bls.n	8004b2e <BMP388_SetIIRFilterCoeff+0x16>
		return HAL_ERROR;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	e005      	b.n	8004b3a <BMP388_SetIIRFilterCoeff+0x22>
	}
	bmp->_filtercoeff = filtercoeff << 1;
 8004b2e:	78fb      	ldrb	r3, [r7, #3]
 8004b30:	005b      	lsls	r3, r3, #1
 8004b32:	b2da      	uxtb	r2, r3
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	715a      	strb	r2, [r3, #5]
	return HAL_OK;
 8004b38:	2300      	movs	r3, #0
}
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	370c      	adds	r7, #12
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b44:	4770      	bx	lr

08004b46 <BMP388_SetOutputDataRate>:
 *
 *  @return Status of execution
 *  @retval = HAL_OK  		-> Success
 *  @retval != HAL_OK	  	-> Wrong oversampling mode
 */
HAL_StatusTypeDef BMP388_SetOutputDataRate(BMP388_HandleTypeDef *bmp, uint8_t odr){
 8004b46:	b480      	push	{r7}
 8004b48:	b083      	sub	sp, #12
 8004b4a:	af00      	add	r7, sp, #0
 8004b4c:	6078      	str	r0, [r7, #4]
 8004b4e:	460b      	mov	r3, r1
 8004b50:	70fb      	strb	r3, [r7, #3]
	if(odr > BMP3_ODR_0_001_HZ){
 8004b52:	78fb      	ldrb	r3, [r7, #3]
 8004b54:	2b11      	cmp	r3, #17
 8004b56:	d901      	bls.n	8004b5c <BMP388_SetOutputDataRate+0x16>
		return HAL_ERROR;
 8004b58:	2301      	movs	r3, #1
 8004b5a:	e003      	b.n	8004b64 <BMP388_SetOutputDataRate+0x1e>
	}
	bmp->_odr = odr;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	78fa      	ldrb	r2, [r7, #3]
 8004b60:	719a      	strb	r2, [r3, #6]
	return HAL_OK;
 8004b62:	2300      	movs	r3, #0
}
 8004b64:	4618      	mov	r0, r3
 8004b66:	370c      	adds	r7, #12
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6e:	4770      	bx	lr

08004b70 <BMP388_ReadRawPressTempTime>:
 *
 *  @return Status of execution
 *  @retval = HAL_OK  		-> Success
 *  @retval != HAL_OK	  	-> Failure Info
 */
HAL_StatusTypeDef BMP388_ReadRawPressTempTime(BMP388_HandleTypeDef *bmp, uint32_t *raw_pressure, uint32_t *raw_temperature, uint32_t *time){
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b088      	sub	sp, #32
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	60f8      	str	r0, [r7, #12]
 8004b78:	60b9      	str	r1, [r7, #8]
 8004b7a:	607a      	str	r2, [r7, #4]
 8004b7c:	603b      	str	r3, [r7, #0]
	}*/

	uint8_t raw_data[11]; //registers in order 0x04 - 0x06 press data, 0x07 - 0x09 temp data, 0x0A and 0x0B reserved, 0x0C - 0x0E time data -> 11 byte
	// Get raw data for pressure and temperature
	//rslt = BMP388_ReadBytes(bmp, DATA_0, raw_data, 11);
	rslt = BMP388_ReadBytes(bmp, DATA_0, raw_data, 6);
 8004b7e:	f107 0214 	add.w	r2, r7, #20
 8004b82:	2306      	movs	r3, #6
 8004b84:	2104      	movs	r1, #4
 8004b86:	68f8      	ldr	r0, [r7, #12]
 8004b88:	f000 fb1f 	bl	80051ca <BMP388_ReadBytes>
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	77fb      	strb	r3, [r7, #31]
	if(rslt != HAL_OK){
 8004b90:	7ffb      	ldrb	r3, [r7, #31]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d001      	beq.n	8004b9a <BMP388_ReadRawPressTempTime+0x2a>
		return rslt;
 8004b96:	7ffb      	ldrb	r3, [r7, #31]
 8004b98:	e012      	b.n	8004bc0 <BMP388_ReadRawPressTempTime+0x50>
//	uint32_t data_xlsb;
//	uint32_t data_lsb;
//	uint32_t data_msb;

	// Parsing pressure data
	*raw_pressure = (uint32_t)raw_data[2] << 16 | (uint32_t)raw_data[1] << 8 | (uint32_t)raw_data[0];
 8004b9a:	7dbb      	ldrb	r3, [r7, #22]
 8004b9c:	041a      	lsls	r2, r3, #16
 8004b9e:	7d7b      	ldrb	r3, [r7, #21]
 8004ba0:	021b      	lsls	r3, r3, #8
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	7d3a      	ldrb	r2, [r7, #20]
 8004ba6:	431a      	orrs	r2, r3
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	601a      	str	r2, [r3, #0]

	// Parsing temperature data
	*raw_temperature = (uint32_t)raw_data[5] << 16 | (uint32_t)raw_data[4] << 8 | (uint32_t)raw_data[3];
 8004bac:	7e7b      	ldrb	r3, [r7, #25]
 8004bae:	041a      	lsls	r2, r3, #16
 8004bb0:	7e3b      	ldrb	r3, [r7, #24]
 8004bb2:	021b      	lsls	r3, r3, #8
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	7dfa      	ldrb	r2, [r7, #23]
 8004bb8:	431a      	orrs	r2, r3
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	601a      	str	r2, [r3, #0]

	// Parsing time bytes
	//*time = (uint32_t)raw_data[10] << 16 | (uint32_t)raw_data[9] << 8 | (uint32_t)raw_data[8];


	return rslt;
 8004bbe:	7ffb      	ldrb	r3, [r7, #31]
}
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	3720      	adds	r7, #32
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	bd80      	pop	{r7, pc}

08004bc8 <BMP388_CompensateRawPressTemp>:
 *	@param[out]	temperature		: Pointer to the variable that contain temperature.
 *
 *  @return none
 */
void BMP388_CompensateRawPressTemp(BMP388_HandleTypeDef *bmp, uint32_t raw_pressure, uint32_t raw_temperature,
									  	  	  	  	  	  	  float *pressure, float *temperature){
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b086      	sub	sp, #24
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	60f8      	str	r0, [r7, #12]
 8004bd0:	60b9      	str	r1, [r7, #8]
 8004bd2:	607a      	str	r2, [r7, #4]
 8004bd4:	603b      	str	r3, [r7, #0]
	float temp;
	float press;

	BMP388_CompensateTemp(bmp, raw_temperature, &temp);
 8004bd6:	f107 0314 	add.w	r3, r7, #20
 8004bda:	461a      	mov	r2, r3
 8004bdc:	6879      	ldr	r1, [r7, #4]
 8004bde:	68f8      	ldr	r0, [r7, #12]
 8004be0:	f000 f9ec 	bl	8004fbc <BMP388_CompensateTemp>
	BMP388_CompensatePress(bmp, temp, raw_pressure, &press);
 8004be4:	edd7 7a05 	vldr	s15, [r7, #20]
 8004be8:	f107 0310 	add.w	r3, r7, #16
 8004bec:	461a      	mov	r2, r3
 8004bee:	68b9      	ldr	r1, [r7, #8]
 8004bf0:	eeb0 0a67 	vmov.f32	s0, s15
 8004bf4:	68f8      	ldr	r0, [r7, #12]
 8004bf6:	f000 fa17 	bl	8005028 <BMP388_CompensatePress>

	*pressure = press;
 8004bfa:	693a      	ldr	r2, [r7, #16]
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	601a      	str	r2, [r3, #0]
	*temperature = temp;
 8004c00:	697a      	ldr	r2, [r7, #20]
 8004c02:	6a3b      	ldr	r3, [r7, #32]
 8004c04:	601a      	str	r2, [r3, #0]
}
 8004c06:	bf00      	nop
 8004c08:	3718      	adds	r7, #24
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bd80      	pop	{r7, pc}
	...

08004c10 <BMP388_FindAltitude>:
 *	@param[in] ground_pressure	: Pressure at ground
 *  @param[in] pressure			: Pressure that measured at flight.
 *
 *  @return Altitude
 */
float BMP388_FindAltitude(float ground_pressure, float pressure){
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b082      	sub	sp, #8
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	ed87 0a01 	vstr	s0, [r7, #4]
 8004c1a:	edc7 0a00 	vstr	s1, [r7]

	// Note that using the equation from wikipedia can give bad results
	// at high altitude. See this thread for more information:
	//  http://forums.adafruit.com/viewtopic.php?f=22&t=58064

	return 44330.0 * (1.0 - pow(pressure / ground_pressure, 0.1903));
 8004c1e:	ed97 7a00 	vldr	s14, [r7]
 8004c22:	edd7 7a01 	vldr	s15, [r7, #4]
 8004c26:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004c2a:	ee16 0a90 	vmov	r0, s13
 8004c2e:	f7fb fc8b 	bl	8000548 <__aeabi_f2d>
 8004c32:	4602      	mov	r2, r0
 8004c34:	460b      	mov	r3, r1
 8004c36:	ed9f 1b12 	vldr	d1, [pc, #72]	; 8004c80 <BMP388_FindAltitude+0x70>
 8004c3a:	ec43 2b10 	vmov	d0, r2, r3
 8004c3e:	f00d f8d3 	bl	8011de8 <pow>
 8004c42:	ec53 2b10 	vmov	r2, r3, d0
 8004c46:	f04f 0000 	mov.w	r0, #0
 8004c4a:	4911      	ldr	r1, [pc, #68]	; (8004c90 <BMP388_FindAltitude+0x80>)
 8004c4c:	f7fb fb1c 	bl	8000288 <__aeabi_dsub>
 8004c50:	4602      	mov	r2, r0
 8004c52:	460b      	mov	r3, r1
 8004c54:	4610      	mov	r0, r2
 8004c56:	4619      	mov	r1, r3
 8004c58:	a30b      	add	r3, pc, #44	; (adr r3, 8004c88 <BMP388_FindAltitude+0x78>)
 8004c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c5e:	f7fb fccb 	bl	80005f8 <__aeabi_dmul>
 8004c62:	4602      	mov	r2, r0
 8004c64:	460b      	mov	r3, r1
 8004c66:	4610      	mov	r0, r2
 8004c68:	4619      	mov	r1, r3
 8004c6a:	f7fb ffbd 	bl	8000be8 <__aeabi_d2f>
 8004c6e:	4603      	mov	r3, r0
 8004c70:	ee07 3a90 	vmov	s15, r3
}
 8004c74:	eeb0 0a67 	vmov.f32	s0, s15
 8004c78:	3708      	adds	r7, #8
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bd80      	pop	{r7, pc}
 8004c7e:	bf00      	nop
 8004c80:	1a36e2eb 	.word	0x1a36e2eb
 8004c84:	3fc85bc0 	.word	0x3fc85bc0
 8004c88:	00000000 	.word	0x00000000
 8004c8c:	40e5a540 	.word	0x40e5a540
 8004c90:	3ff00000 	.word	0x3ff00000

08004c94 <BMP388_SoftReset>:
 *
 *  @return Status of execution
 *  @retval = HAL_OK  		-> Success
 *  @retval != HAL_OK	  	-> Failure Info
 */
HAL_StatusTypeDef BMP388_SoftReset(BMP388_HandleTypeDef *bmp){
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b084      	sub	sp, #16
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
	uint8_t rst_cmnd = BMP388_SOFTRESET;
 8004c9c:	23b6      	movs	r3, #182	; 0xb6
 8004c9e:	73bb      	strb	r3, [r7, #14]
    uint8_t cmd_err_status;

	HAL_StatusTypeDef rslt;

	// Reading STATUS reg to understand that the BMP388 is ready to receive command
	rslt = BMP388_ReadBytes(bmp, STATUS, &cmd_rdy_status, 1);
 8004ca0:	f107 020d 	add.w	r2, r7, #13
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	2103      	movs	r1, #3
 8004ca8:	6878      	ldr	r0, [r7, #4]
 8004caa:	f000 fa8e 	bl	80051ca <BMP388_ReadBytes>
 8004cae:	4603      	mov	r3, r0
 8004cb0:	73fb      	strb	r3, [r7, #15]
	if((rslt == HAL_OK) && (cmd_rdy_status & BMP388_CMD_RDY)){
 8004cb2:	7bfb      	ldrb	r3, [r7, #15]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d128      	bne.n	8004d0a <BMP388_SoftReset+0x76>
 8004cb8:	7b7b      	ldrb	r3, [r7, #13]
 8004cba:	f003 0310 	and.w	r3, r3, #16
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d023      	beq.n	8004d0a <BMP388_SoftReset+0x76>
		// Writing SOFTRESET command to CMD reg
		rslt = BMP388_WriteBytes(bmp, CMD, &rst_cmnd, 1);
 8004cc2:	f107 020e 	add.w	r2, r7, #14
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	217e      	movs	r1, #126	; 0x7e
 8004cca:	6878      	ldr	r0, [r7, #4]
 8004ccc:	f000 fa9b 	bl	8005206 <BMP388_WriteBytes>
 8004cd0:	4603      	mov	r3, r0
 8004cd2:	73fb      	strb	r3, [r7, #15]
		if(rslt == HAL_OK){
 8004cd4:	7bfb      	ldrb	r3, [r7, #15]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d115      	bne.n	8004d06 <BMP388_SoftReset+0x72>
			// 2 ms pause then check ERR reg
			HAL_Delay(2);
 8004cda:	2002      	movs	r0, #2
 8004cdc:	f000 fbe2 	bl	80054a4 <HAL_Delay>
			rslt = BMP388_ReadBytes(bmp, ERR_REG, &cmd_err_status, 1);
 8004ce0:	f107 020c 	add.w	r2, r7, #12
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	2102      	movs	r1, #2
 8004ce8:	6878      	ldr	r0, [r7, #4]
 8004cea:	f000 fa6e 	bl	80051ca <BMP388_ReadBytes>
 8004cee:	4603      	mov	r3, r0
 8004cf0:	73fb      	strb	r3, [r7, #15]
			if((cmd_err_status & CMD) || (rslt != HAL_OK)){
 8004cf2:	7b3b      	ldrb	r3, [r7, #12]
 8004cf4:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d102      	bne.n	8004d02 <BMP388_SoftReset+0x6e>
 8004cfc:	7bfb      	ldrb	r3, [r7, #15]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d003      	beq.n	8004d0a <BMP388_SoftReset+0x76>
				return rslt;
 8004d02:	7bfb      	ldrb	r3, [r7, #15]
 8004d04:	e002      	b.n	8004d0c <BMP388_SoftReset+0x78>
			}
		}
		else{
			return rslt;
 8004d06:	7bfb      	ldrb	r3, [r7, #15]
 8004d08:	e000      	b.n	8004d0c <BMP388_SoftReset+0x78>
		}
	}

	return rslt;
 8004d0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	3710      	adds	r7, #16
 8004d10:	46bd      	mov	sp, r7
 8004d12:	bd80      	pop	{r7, pc}

08004d14 <BMP388_GetCalibData>:
 *
 *  @return Status of execution
 *  @retval = HAL_OK  		-> Success
 *  @retval != HAL_OK	  	-> Failure Info
 */
HAL_StatusTypeDef BMP388_GetCalibData(BMP388_HandleTypeDef *bmp){
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b090      	sub	sp, #64	; 0x40
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef rslt;
	uint8_t calib_buff[BMP388_CALIBDATA_LEN] = {0};
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	60fb      	str	r3, [r7, #12]
 8004d20:	f107 0310 	add.w	r3, r7, #16
 8004d24:	2200      	movs	r2, #0
 8004d26:	601a      	str	r2, [r3, #0]
 8004d28:	605a      	str	r2, [r3, #4]
 8004d2a:	609a      	str	r2, [r3, #8]
 8004d2c:	60da      	str	r2, [r3, #12]
 8004d2e:	741a      	strb	r2, [r3, #16]
	int8_t		raw_par_p8;
	int16_t		raw_par_p9;
	int8_t		raw_par_p10;
	int8_t		raw_par_p11;

	rslt = BMP388_ReadBytes(bmp, CALIB_DATA, calib_buff, BMP388_CALIBDATA_LEN);
 8004d30:	f107 020c 	add.w	r2, r7, #12
 8004d34:	2315      	movs	r3, #21
 8004d36:	2131      	movs	r1, #49	; 0x31
 8004d38:	6878      	ldr	r0, [r7, #4]
 8004d3a:	f000 fa46 	bl	80051ca <BMP388_ReadBytes>
 8004d3e:	4603      	mov	r3, r0
 8004d40:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	float temp_var;
	if(rslt == HAL_OK){
 8004d44:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	f040 812f 	bne.w	8004fac <BMP388_GetCalibData+0x298>
		// PAR_T1
		temp_var = 0.00390625f;
 8004d4e:	f04f 536e 	mov.w	r3, #998244352	; 0x3b800000
 8004d52:	63bb      	str	r3, [r7, #56]	; 0x38
		raw_par_t1 = ((uint16_t)calib_buff[1] << 8) | (uint16_t)calib_buff[0];
 8004d54:	7b7b      	ldrb	r3, [r7, #13]
 8004d56:	021b      	lsls	r3, r3, #8
 8004d58:	b21a      	sxth	r2, r3
 8004d5a:	7b3b      	ldrb	r3, [r7, #12]
 8004d5c:	b21b      	sxth	r3, r3
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	b21b      	sxth	r3, r3
 8004d62:	86fb      	strh	r3, [r7, #54]	; 0x36
		bmp->_calib_data.par_t1 = (float)raw_par_t1 / temp_var;
 8004d64:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004d66:	ee07 3a90 	vmov	s15, r3
 8004d6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d6e:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8004d72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	edc3 7a02 	vstr	s15, [r3, #8]
		// PAR_T2
		temp_var = 1073741824.f;
 8004d7c:	f04f 439d 	mov.w	r3, #1317011456	; 0x4e800000
 8004d80:	63bb      	str	r3, [r7, #56]	; 0x38
		raw_par_t2 = ((uint16_t)calib_buff[3] << 8) | (uint16_t)calib_buff[2];
 8004d82:	7bfb      	ldrb	r3, [r7, #15]
 8004d84:	021b      	lsls	r3, r3, #8
 8004d86:	b21a      	sxth	r2, r3
 8004d88:	7bbb      	ldrb	r3, [r7, #14]
 8004d8a:	b21b      	sxth	r3, r3
 8004d8c:	4313      	orrs	r3, r2
 8004d8e:	b21b      	sxth	r3, r3
 8004d90:	86bb      	strh	r3, [r7, #52]	; 0x34
		bmp->_calib_data.par_t2 = (float)raw_par_t2 / temp_var;
 8004d92:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004d94:	ee07 3a90 	vmov	s15, r3
 8004d98:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d9c:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8004da0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	edc3 7a03 	vstr	s15, [r3, #12]
		// PAR_T3
		temp_var = 281474976710656.f;
 8004daa:	f04f 43af 	mov.w	r3, #1468006400	; 0x57800000
 8004dae:	63bb      	str	r3, [r7, #56]	; 0x38
		raw_par_t3 = calib_buff[4];
 8004db0:	7c3b      	ldrb	r3, [r7, #16]
 8004db2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		bmp->_calib_data.par_t3 = (float)raw_par_t3 / temp_var;
 8004db6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004dba:	ee07 3a90 	vmov	s15, r3
 8004dbe:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004dc2:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8004dc6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	edc3 7a04 	vstr	s15, [r3, #16]
		// PAR_P1
		temp_var = 1048576.f;
 8004dd0:	f04f 4393 	mov.w	r3, #1233125376	; 0x49800000
 8004dd4:	63bb      	str	r3, [r7, #56]	; 0x38
		raw_par_p1 = ((int16_t)calib_buff[6] << 8) | (int16_t)calib_buff[5];
 8004dd6:	7cbb      	ldrb	r3, [r7, #18]
 8004dd8:	021b      	lsls	r3, r3, #8
 8004dda:	b21a      	sxth	r2, r3
 8004ddc:	7c7b      	ldrb	r3, [r7, #17]
 8004dde:	b21b      	sxth	r3, r3
 8004de0:	4313      	orrs	r3, r2
 8004de2:	863b      	strh	r3, [r7, #48]	; 0x30
		bmp->_calib_data.par_p1 = ((float)raw_par_p1 - 16384) / temp_var;
 8004de4:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8004de8:	ee07 3a90 	vmov	s15, r3
 8004dec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004df0:	ed9f 7a71 	vldr	s14, [pc, #452]	; 8004fb8 <BMP388_GetCalibData+0x2a4>
 8004df4:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8004df8:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8004dfc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	edc3 7a05 	vstr	s15, [r3, #20]
		// PAR_P2
		temp_var = 536870912.f;
 8004e06:	f04f 439c 	mov.w	r3, #1308622848	; 0x4e000000
 8004e0a:	63bb      	str	r3, [r7, #56]	; 0x38
		raw_par_p2 = ((int16_t)calib_buff[8] << 8) | (int16_t)calib_buff[7];
 8004e0c:	7d3b      	ldrb	r3, [r7, #20]
 8004e0e:	021b      	lsls	r3, r3, #8
 8004e10:	b21a      	sxth	r2, r3
 8004e12:	7cfb      	ldrb	r3, [r7, #19]
 8004e14:	b21b      	sxth	r3, r3
 8004e16:	4313      	orrs	r3, r2
 8004e18:	85fb      	strh	r3, [r7, #46]	; 0x2e
		bmp->_calib_data.par_p2 = ((float)raw_par_p2 - 16384) / temp_var;
 8004e1a:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8004e1e:	ee07 3a90 	vmov	s15, r3
 8004e22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004e26:	ed9f 7a64 	vldr	s14, [pc, #400]	; 8004fb8 <BMP388_GetCalibData+0x2a4>
 8004e2a:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8004e2e:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8004e32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	edc3 7a06 	vstr	s15, [r3, #24]
		// PAR_P3
		temp_var = 4294967296.f;
 8004e3c:	f04f 439f 	mov.w	r3, #1333788672	; 0x4f800000
 8004e40:	63bb      	str	r3, [r7, #56]	; 0x38
		raw_par_p3 = (int8_t)calib_buff[9];
 8004e42:	7d7b      	ldrb	r3, [r7, #21]
 8004e44:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
		bmp->_calib_data.par_p3 = (float)raw_par_p3 / temp_var;
 8004e48:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 8004e4c:	ee07 3a90 	vmov	s15, r3
 8004e50:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004e54:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8004e58:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	edc3 7a07 	vstr	s15, [r3, #28]
		// PAR_P4
		temp_var = 137438953472.f;
 8004e62:	f04f 43a4 	mov.w	r3, #1375731712	; 0x52000000
 8004e66:	63bb      	str	r3, [r7, #56]	; 0x38
		raw_par_p4 = (int8_t)calib_buff[10];
 8004e68:	7dbb      	ldrb	r3, [r7, #22]
 8004e6a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
		bmp->_calib_data.par_p4 = (float)raw_par_p4 / temp_var;
 8004e6e:	f997 302c 	ldrsb.w	r3, [r7, #44]	; 0x2c
 8004e72:	ee07 3a90 	vmov	s15, r3
 8004e76:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004e7a:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8004e7e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	edc3 7a08 	vstr	s15, [r3, #32]
		// PAR_P5
		temp_var = 0.125f;
 8004e88:	f04f 5378 	mov.w	r3, #1040187392	; 0x3e000000
 8004e8c:	63bb      	str	r3, [r7, #56]	; 0x38
		raw_par_p5 = ((uint16_t)calib_buff[12] << 8) | (uint16_t)calib_buff[11];
 8004e8e:	7e3b      	ldrb	r3, [r7, #24]
 8004e90:	021b      	lsls	r3, r3, #8
 8004e92:	b21a      	sxth	r2, r3
 8004e94:	7dfb      	ldrb	r3, [r7, #23]
 8004e96:	b21b      	sxth	r3, r3
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	b21b      	sxth	r3, r3
 8004e9c:	857b      	strh	r3, [r7, #42]	; 0x2a
		bmp->_calib_data.par_p5 = (float)raw_par_p5 / temp_var;
 8004e9e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004ea0:	ee07 3a90 	vmov	s15, r3
 8004ea4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ea8:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8004eac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
		// PAR_P6
		temp_var = 64.f;
 8004eb6:	f04f 4385 	mov.w	r3, #1115684864	; 0x42800000
 8004eba:	63bb      	str	r3, [r7, #56]	; 0x38
		raw_par_p6 = ((uint16_t)calib_buff[14] << 8) | (uint16_t)calib_buff[13];
 8004ebc:	7ebb      	ldrb	r3, [r7, #26]
 8004ebe:	021b      	lsls	r3, r3, #8
 8004ec0:	b21a      	sxth	r2, r3
 8004ec2:	7e7b      	ldrb	r3, [r7, #25]
 8004ec4:	b21b      	sxth	r3, r3
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	b21b      	sxth	r3, r3
 8004eca:	853b      	strh	r3, [r7, #40]	; 0x28
		bmp->_calib_data.par_p6 = (float)raw_par_p6 / temp_var;
 8004ecc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004ece:	ee07 3a90 	vmov	s15, r3
 8004ed2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ed6:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8004eda:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		// PAR_P7
		temp_var = 256.f;
 8004ee4:	f04f 4387 	mov.w	r3, #1132462080	; 0x43800000
 8004ee8:	63bb      	str	r3, [r7, #56]	; 0x38
		raw_par_p7 = (int8_t)calib_buff[15];
 8004eea:	7efb      	ldrb	r3, [r7, #27]
 8004eec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		bmp->_calib_data.par_p7 = (float)raw_par_p7 / temp_var;
 8004ef0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004ef4:	ee07 3a90 	vmov	s15, r3
 8004ef8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004efc:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8004f00:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
		// PAR_P8
		temp_var = 32768.f;
 8004f0a:	f04f 438e 	mov.w	r3, #1191182336	; 0x47000000
 8004f0e:	63bb      	str	r3, [r7, #56]	; 0x38
		raw_par_p8 = (int8_t)calib_buff[16];
 8004f10:	7f3b      	ldrb	r3, [r7, #28]
 8004f12:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		bmp->_calib_data.par_p8 = (float)raw_par_p8 / temp_var;
 8004f16:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
 8004f1a:	ee07 3a90 	vmov	s15, r3
 8004f1e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004f22:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8004f26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
		// PAR_P9
		temp_var = 281474976710656.f;
 8004f30:	f04f 43af 	mov.w	r3, #1468006400	; 0x57800000
 8004f34:	63bb      	str	r3, [r7, #56]	; 0x38
		raw_par_p9 = ((int16_t)calib_buff[18] << 8) | (int16_t)calib_buff[17];
 8004f36:	7fbb      	ldrb	r3, [r7, #30]
 8004f38:	021b      	lsls	r3, r3, #8
 8004f3a:	b21a      	sxth	r2, r3
 8004f3c:	7f7b      	ldrb	r3, [r7, #29]
 8004f3e:	b21b      	sxth	r3, r3
 8004f40:	4313      	orrs	r3, r2
 8004f42:	84bb      	strh	r3, [r7, #36]	; 0x24
		bmp->_calib_data.par_p9 = (float)raw_par_p9 / temp_var;
 8004f44:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8004f48:	ee07 3a90 	vmov	s15, r3
 8004f4c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004f50:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8004f54:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
		// PAR_P10
		temp_var = 281474976710656.f;
 8004f5e:	f04f 43af 	mov.w	r3, #1468006400	; 0x57800000
 8004f62:	63bb      	str	r3, [r7, #56]	; 0x38
		raw_par_p10 = (int8_t)calib_buff[19];
 8004f64:	7ffb      	ldrb	r3, [r7, #31]
 8004f66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		bmp->_calib_data.par_p10 = (float)raw_par_p10 / temp_var;
 8004f6a:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8004f6e:	ee07 3a90 	vmov	s15, r3
 8004f72:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004f76:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8004f7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
		// PAR_P11
		temp_var = 36893488147419103232.f;
 8004f84:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8004f88:	63bb      	str	r3, [r7, #56]	; 0x38
		raw_par_p11 = (int8_t)calib_buff[20];
 8004f8a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004f8e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		bmp->_calib_data.par_p11 = (float)raw_par_p11 / temp_var;
 8004f92:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 8004f96:	ee07 3a90 	vmov	s15, r3
 8004f9a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004f9e:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8004fa2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
	}
	return rslt;
 8004fac:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	3740      	adds	r7, #64	; 0x40
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	bd80      	pop	{r7, pc}
 8004fb8:	46800000 	.word	0x46800000

08004fbc <BMP388_CompensateTemp>:
 *
 *  @return Status of execution
 *  @retval = HAL_OK  		-> Success
 *  @retval != HAL_OK	  	-> Failure Info
 */
float BMP388_CompensateTemp(BMP388_HandleTypeDef *bmp, uint32_t raw_temp, float *temp){
 8004fbc:	b480      	push	{r7}
 8004fbe:	b087      	sub	sp, #28
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	60f8      	str	r0, [r7, #12]
 8004fc4:	60b9      	str	r1, [r7, #8]
 8004fc6:	607a      	str	r2, [r7, #4]
    float partial_data1 = (float)(raw_temp - bmp->_calib_data.par_t1);;
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	ee07 3a90 	vmov	s15, r3
 8004fce:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	edd3 7a02 	vldr	s15, [r3, #8]
 8004fd8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004fdc:	edc7 7a05 	vstr	s15, [r7, #20]
    float partial_data2 = (float)(partial_data1 * bmp->_calib_data.par_t2);
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	edd3 7a03 	vldr	s15, [r3, #12]
 8004fe6:	ed97 7a05 	vldr	s14, [r7, #20]
 8004fea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fee:	edc7 7a04 	vstr	s15, [r7, #16]

    *temp = partial_data2 + (partial_data1 * partial_data1) * bmp->_calib_data.par_t3;
 8004ff2:	edd7 7a05 	vldr	s15, [r7, #20]
 8004ff6:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	edd3 7a04 	vldr	s15, [r3, #16]
 8005000:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005004:	edd7 7a04 	vldr	s15, [r7, #16]
 8005008:	ee77 7a27 	vadd.f32	s15, s14, s15
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	edc3 7a00 	vstr	s15, [r3]

    return *temp;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	ee07 3a90 	vmov	s15, r3
}
 800501a:	eeb0 0a67 	vmov.f32	s0, s15
 800501e:	371c      	adds	r7, #28
 8005020:	46bd      	mov	sp, r7
 8005022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005026:	4770      	bx	lr

08005028 <BMP388_CompensatePress>:
 *	@param[out] press		: Measured pressure in Pa
 *
 *  @return Status of execution
 *  @retval = press			: Compensated pressure value
 */
float BMP388_CompensatePress(BMP388_HandleTypeDef *bmp, float temp, uint32_t raw_press, float *press){
 8005028:	b480      	push	{r7}
 800502a:	b08b      	sub	sp, #44	; 0x2c
 800502c:	af00      	add	r7, sp, #0
 800502e:	60f8      	str	r0, [r7, #12]
 8005030:	ed87 0a02 	vstr	s0, [r7, #8]
 8005034:	6079      	str	r1, [r7, #4]
 8005036:	603a      	str	r2, [r7, #0]
    float partial_out1;
    float partial_out2;



    partial_data1 = bmp->_calib_data.par_p6 * temp;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800503e:	ed97 7a02 	vldr	s14, [r7, #8]
 8005042:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005046:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    partial_data2 = bmp->_calib_data.par_p7 * (temp * temp);
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8005050:	edd7 7a02 	vldr	s15, [r7, #8]
 8005054:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8005058:	ee67 7a27 	vmul.f32	s15, s14, s15
 800505c:	edc7 7a08 	vstr	s15, [r7, #32]
    partial_data3 = bmp->_calib_data.par_p8 * (temp * temp * temp);
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8005066:	edd7 7a02 	vldr	s15, [r7, #8]
 800506a:	ee67 6aa7 	vmul.f32	s13, s15, s15
 800506e:	edd7 7a02 	vldr	s15, [r7, #8]
 8005072:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005076:	ee67 7a27 	vmul.f32	s15, s14, s15
 800507a:	edc7 7a07 	vstr	s15, [r7, #28]
    partial_out1 = bmp->_calib_data.par_p5 + partial_data1 + partial_data2 + partial_data3;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8005084:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8005088:	ee37 7a27 	vadd.f32	s14, s14, s15
 800508c:	edd7 7a08 	vldr	s15, [r7, #32]
 8005090:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005094:	ed97 7a07 	vldr	s14, [r7, #28]
 8005098:	ee77 7a27 	vadd.f32	s15, s14, s15
 800509c:	edc7 7a06 	vstr	s15, [r7, #24]

    partial_data1 = bmp->_calib_data.par_p2 * temp;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	edd3 7a06 	vldr	s15, [r3, #24]
 80050a6:	ed97 7a02 	vldr	s14, [r7, #8]
 80050aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050ae:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    partial_data2 = bmp->_calib_data.par_p3 * (temp * temp);
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	ed93 7a07 	vldr	s14, [r3, #28]
 80050b8:	edd7 7a02 	vldr	s15, [r7, #8]
 80050bc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80050c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050c4:	edc7 7a08 	vstr	s15, [r7, #32]
    partial_data3 = bmp->_calib_data.par_p4 * (temp * temp * temp);
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	ed93 7a08 	vldr	s14, [r3, #32]
 80050ce:	edd7 7a02 	vldr	s15, [r7, #8]
 80050d2:	ee67 6aa7 	vmul.f32	s13, s15, s15
 80050d6:	edd7 7a02 	vldr	s15, [r7, #8]
 80050da:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80050de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050e2:	edc7 7a07 	vstr	s15, [r7, #28]
    partial_out2 = (float)raw_press * (bmp->_calib_data.par_p1 + partial_data1 + partial_data2 + partial_data3);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	ee07 3a90 	vmov	s15, r3
 80050ec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	edd3 6a05 	vldr	s13, [r3, #20]
 80050f6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80050fa:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80050fe:	edd7 7a08 	vldr	s15, [r7, #32]
 8005102:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8005106:	edd7 7a07 	vldr	s15, [r7, #28]
 800510a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800510e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005112:	edc7 7a05 	vstr	s15, [r7, #20]

    partial_data1 = (float)raw_press * (float)raw_press;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	ee07 3a90 	vmov	s15, r3
 800511c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	ee07 3a90 	vmov	s15, r3
 8005126:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800512a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800512e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    partial_data2 = bmp->_calib_data.par_p9 + bmp->_calib_data.par_p10 * temp;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 800513e:	edd7 7a02 	vldr	s15, [r7, #8]
 8005142:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005146:	ee77 7a27 	vadd.f32	s15, s14, s15
 800514a:	edc7 7a08 	vstr	s15, [r7, #32]
    partial_data3 = partial_data1 * partial_data2;
 800514e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8005152:	edd7 7a08 	vldr	s15, [r7, #32]
 8005156:	ee67 7a27 	vmul.f32	s15, s14, s15
 800515a:	edc7 7a07 	vstr	s15, [r7, #28]
    partial_data4 = partial_data3 + ((float)raw_press * (float)raw_press * (float)raw_press) * bmp->_calib_data.par_p11;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	ee07 3a90 	vmov	s15, r3
 8005164:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	ee07 3a90 	vmov	s15, r3
 800516e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005172:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	ee07 3a90 	vmov	s15, r3
 800517c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005180:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 800518a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800518e:	ed97 7a07 	vldr	s14, [r7, #28]
 8005192:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005196:	edc7 7a04 	vstr	s15, [r7, #16]

    *press = partial_out1 + partial_out2 + partial_data4;
 800519a:	ed97 7a06 	vldr	s14, [r7, #24]
 800519e:	edd7 7a05 	vldr	s15, [r7, #20]
 80051a2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80051a6:	edd7 7a04 	vldr	s15, [r7, #16]
 80051aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	edc3 7a00 	vstr	s15, [r3]

    return *press;
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	ee07 3a90 	vmov	s15, r3
}
 80051bc:	eeb0 0a67 	vmov.f32	s0, s15
 80051c0:	372c      	adds	r7, #44	; 0x2c
 80051c2:	46bd      	mov	sp, r7
 80051c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c8:	4770      	bx	lr

080051ca <BMP388_ReadBytes>:
 *
 *  @return Status of execution
 *  @retval = HAL_OK 		-> Success
 *  @retval != HAL_ERROR 	-> Failure Info
 */
HAL_StatusTypeDef BMP388_ReadBytes(BMP388_HandleTypeDef *bmp, BMP388_regs reg_addr, uint8_t *buff, uint8_t len){
 80051ca:	b580      	push	{r7, lr}
 80051cc:	b088      	sub	sp, #32
 80051ce:	af04      	add	r7, sp, #16
 80051d0:	60f8      	str	r0, [r7, #12]
 80051d2:	607a      	str	r2, [r7, #4]
 80051d4:	461a      	mov	r2, r3
 80051d6:	460b      	mov	r3, r1
 80051d8:	72fb      	strb	r3, [r7, #11]
 80051da:	4613      	mov	r3, r2
 80051dc:	72bb      	strb	r3, [r7, #10]
	return HAL_I2C_Mem_Read(bmp->_hi2c, BMP388_ADDR << 1, reg_addr, I2C_MEMADD_SIZE_8BIT, buff, len, 100);
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	6818      	ldr	r0, [r3, #0]
 80051e2:	7afb      	ldrb	r3, [r7, #11]
 80051e4:	b29a      	uxth	r2, r3
 80051e6:	7abb      	ldrb	r3, [r7, #10]
 80051e8:	b29b      	uxth	r3, r3
 80051ea:	2164      	movs	r1, #100	; 0x64
 80051ec:	9102      	str	r1, [sp, #8]
 80051ee:	9301      	str	r3, [sp, #4]
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	9300      	str	r3, [sp, #0]
 80051f4:	2301      	movs	r3, #1
 80051f6:	21ec      	movs	r1, #236	; 0xec
 80051f8:	f001 fd14 	bl	8006c24 <HAL_I2C_Mem_Read>
 80051fc:	4603      	mov	r3, r0
}
 80051fe:	4618      	mov	r0, r3
 8005200:	3710      	adds	r7, #16
 8005202:	46bd      	mov	sp, r7
 8005204:	bd80      	pop	{r7, pc}

08005206 <BMP388_WriteBytes>:
 *
 *  @return Status of execution
 *  @retval = HAL_OK 		-> Success
 *  @retval != HAL_ERROR 	-> Failure Info
 */
HAL_StatusTypeDef BMP388_WriteBytes(BMP388_HandleTypeDef *bmp, BMP388_regs reg_addr, uint8_t *buff, uint8_t len){
 8005206:	b580      	push	{r7, lr}
 8005208:	b088      	sub	sp, #32
 800520a:	af04      	add	r7, sp, #16
 800520c:	60f8      	str	r0, [r7, #12]
 800520e:	607a      	str	r2, [r7, #4]
 8005210:	461a      	mov	r2, r3
 8005212:	460b      	mov	r3, r1
 8005214:	72fb      	strb	r3, [r7, #11]
 8005216:	4613      	mov	r3, r2
 8005218:	72bb      	strb	r3, [r7, #10]
	return HAL_I2C_Mem_Write(bmp->_hi2c, BMP388_ADDR << 1, reg_addr, I2C_MEMADD_SIZE_8BIT, buff, len, 100);
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	6818      	ldr	r0, [r3, #0]
 800521e:	7afb      	ldrb	r3, [r7, #11]
 8005220:	b29a      	uxth	r2, r3
 8005222:	7abb      	ldrb	r3, [r7, #10]
 8005224:	b29b      	uxth	r3, r3
 8005226:	2164      	movs	r1, #100	; 0x64
 8005228:	9102      	str	r1, [sp, #8]
 800522a:	9301      	str	r3, [sp, #4]
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	9300      	str	r3, [sp, #0]
 8005230:	2301      	movs	r3, #1
 8005232:	21ec      	movs	r1, #236	; 0xec
 8005234:	f001 fbfc 	bl	8006a30 <HAL_I2C_Mem_Write>
 8005238:	4603      	mov	r3, r0
}
 800523a:	4618      	mov	r0, r3
 800523c:	3710      	adds	r7, #16
 800523e:	46bd      	mov	sp, r7
 8005240:	bd80      	pop	{r7, pc}

08005242 <set_duty_Oneshot42>:
#define P_yaw 5
#define D_yaw 0



void set_duty_Oneshot42(TIM_HandleTypeDef* const pwmHandle1, uint16_t ref_1, uint16_t ref_2, uint16_t ref_3, uint16_t ref_4){
 8005242:	b480      	push	{r7}
 8005244:	b085      	sub	sp, #20
 8005246:	af00      	add	r7, sp, #0
 8005248:	60f8      	str	r0, [r7, #12]
 800524a:	4608      	mov	r0, r1
 800524c:	4611      	mov	r1, r2
 800524e:	461a      	mov	r2, r3
 8005250:	4603      	mov	r3, r0
 8005252:	817b      	strh	r3, [r7, #10]
 8005254:	460b      	mov	r3, r1
 8005256:	813b      	strh	r3, [r7, #8]
 8005258:	4613      	mov	r3, r2
 800525a:	80fb      	strh	r3, [r7, #6]
	// Multishot42 12 kHz PSC 7-1, ARR 1000-1 -> 1000 = 100%, 500 = stop, ?0 = -100%?
	pwmHandle1 -> Instance -> CCR1 = ref_1;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	897a      	ldrh	r2, [r7, #10]
 8005262:	635a      	str	r2, [r3, #52]	; 0x34
	pwmHandle1 -> Instance -> CCR2 = ref_2;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	893a      	ldrh	r2, [r7, #8]
 800526a:	639a      	str	r2, [r3, #56]	; 0x38
	pwmHandle1 -> Instance -> CCR3 = ref_3;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	88fa      	ldrh	r2, [r7, #6]
 8005272:	63da      	str	r2, [r3, #60]	; 0x3c
	pwmHandle1 -> Instance -> CCR4 = ref_4;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	8b3a      	ldrh	r2, [r7, #24]
 800527a:	641a      	str	r2, [r3, #64]	; 0x40
}
 800527c:	bf00      	nop
 800527e:	3714      	adds	r7, #20
 8005280:	46bd      	mov	sp, r7
 8005282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005286:	4770      	bx	lr

08005288 <CRSFtoDuty>:

float CRSFtoDuty(uint16_t CRSF_val){
 8005288:	b580      	push	{r7, lr}
 800528a:	b084      	sub	sp, #16
 800528c:	af00      	add	r7, sp, #0
 800528e:	4603      	mov	r3, r0
 8005290:	80fb      	strh	r3, [r7, #6]
	float Duty;
//	Duty = 550+((float)(CRSF_val-172))/4.1; // minimum duty 55% max duty 95%
	Duty = 550+((float)(CRSF_val-172))/4.1*0.4; //for safety reasons minimum duty 55% max duty 71%
 8005292:	88fb      	ldrh	r3, [r7, #6]
 8005294:	3bac      	subs	r3, #172	; 0xac
 8005296:	ee07 3a90 	vmov	s15, r3
 800529a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800529e:	ee17 0a90 	vmov	r0, s15
 80052a2:	f7fb f951 	bl	8000548 <__aeabi_f2d>
 80052a6:	a315      	add	r3, pc, #84	; (adr r3, 80052fc <CRSFtoDuty+0x74>)
 80052a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052ac:	f7fb face 	bl	800084c <__aeabi_ddiv>
 80052b0:	4602      	mov	r2, r0
 80052b2:	460b      	mov	r3, r1
 80052b4:	4610      	mov	r0, r2
 80052b6:	4619      	mov	r1, r3
 80052b8:	a312      	add	r3, pc, #72	; (adr r3, 8005304 <CRSFtoDuty+0x7c>)
 80052ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052be:	f7fb f99b 	bl	80005f8 <__aeabi_dmul>
 80052c2:	4602      	mov	r2, r0
 80052c4:	460b      	mov	r3, r1
 80052c6:	4610      	mov	r0, r2
 80052c8:	4619      	mov	r1, r3
 80052ca:	f04f 0200 	mov.w	r2, #0
 80052ce:	4b0a      	ldr	r3, [pc, #40]	; (80052f8 <CRSFtoDuty+0x70>)
 80052d0:	f7fa ffdc 	bl	800028c <__adddf3>
 80052d4:	4602      	mov	r2, r0
 80052d6:	460b      	mov	r3, r1
 80052d8:	4610      	mov	r0, r2
 80052da:	4619      	mov	r1, r3
 80052dc:	f7fb fc84 	bl	8000be8 <__aeabi_d2f>
 80052e0:	4603      	mov	r3, r0
 80052e2:	60fb      	str	r3, [r7, #12]
	return Duty;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	ee07 3a90 	vmov	s15, r3
}
 80052ea:	eeb0 0a67 	vmov.f32	s0, s15
 80052ee:	3710      	adds	r7, #16
 80052f0:	46bd      	mov	sp, r7
 80052f2:	bd80      	pop	{r7, pc}
 80052f4:	f3af 8000 	nop.w
 80052f8:	40813000 	.word	0x40813000
 80052fc:	66666666 	.word	0x66666666
 8005300:	40106666 	.word	0x40106666
 8005304:	9999999a 	.word	0x9999999a
 8005308:	3fd99999 	.word	0x3fd99999

0800530c <CRSFtoPitch>:

float CRSFtoPitch(uint16_t CRSF_val){
 800530c:	b480      	push	{r7}
 800530e:	b085      	sub	sp, #20
 8005310:	af00      	add	r7, sp, #0
 8005312:	4603      	mov	r3, r0
 8005314:	80fb      	strh	r3, [r7, #6]
	float pitch;
	pitch = ((float)(CRSF_val-992))/820.0;
 8005316:	88fb      	ldrh	r3, [r7, #6]
 8005318:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 800531c:	ee07 3a90 	vmov	s15, r3
 8005320:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005324:	eddf 6a07 	vldr	s13, [pc, #28]	; 8005344 <CRSFtoPitch+0x38>
 8005328:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800532c:	edc7 7a03 	vstr	s15, [r7, #12]
	return pitch;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	ee07 3a90 	vmov	s15, r3
}
 8005336:	eeb0 0a67 	vmov.f32	s0, s15
 800533a:	3714      	adds	r7, #20
 800533c:	46bd      	mov	sp, r7
 800533e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005342:	4770      	bx	lr
 8005344:	444d0000 	.word	0x444d0000

08005348 <CRSFtoRoll>:

float CRSFtoRoll(uint16_t CRSF_val){
 8005348:	b480      	push	{r7}
 800534a:	b085      	sub	sp, #20
 800534c:	af00      	add	r7, sp, #0
 800534e:	4603      	mov	r3, r0
 8005350:	80fb      	strh	r3, [r7, #6]
	float roll;
	roll = ((float)(CRSF_val-992))/820.0;
 8005352:	88fb      	ldrh	r3, [r7, #6]
 8005354:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 8005358:	ee07 3a90 	vmov	s15, r3
 800535c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005360:	eddf 6a07 	vldr	s13, [pc, #28]	; 8005380 <CRSFtoRoll+0x38>
 8005364:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005368:	edc7 7a03 	vstr	s15, [r7, #12]
	return roll;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	ee07 3a90 	vmov	s15, r3
}
 8005372:	eeb0 0a67 	vmov.f32	s0, s15
 8005376:	3714      	adds	r7, #20
 8005378:	46bd      	mov	sp, r7
 800537a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537e:	4770      	bx	lr
 8005380:	444d0000 	.word	0x444d0000

08005384 <CRSFtoYaw>:

float CRSFtoYaw(uint16_t CRSF_val){
 8005384:	b480      	push	{r7}
 8005386:	b085      	sub	sp, #20
 8005388:	af00      	add	r7, sp, #0
 800538a:	4603      	mov	r3, r0
 800538c:	80fb      	strh	r3, [r7, #6]
	float yaw;
	yaw = ((float)(CRSF_val-992))/820.0;
 800538e:	88fb      	ldrh	r3, [r7, #6]
 8005390:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 8005394:	ee07 3a90 	vmov	s15, r3
 8005398:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800539c:	eddf 6a07 	vldr	s13, [pc, #28]	; 80053bc <CRSFtoYaw+0x38>
 80053a0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80053a4:	edc7 7a03 	vstr	s15, [r7, #12]
	return yaw;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	ee07 3a90 	vmov	s15, r3
}
 80053ae:	eeb0 0a67 	vmov.f32	s0, s15
 80053b2:	3714      	adds	r7, #20
 80053b4:	46bd      	mov	sp, r7
 80053b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ba:	4770      	bx	lr
 80053bc:	444d0000 	.word	0x444d0000

080053c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80053c4:	4b0e      	ldr	r3, [pc, #56]	; (8005400 <HAL_Init+0x40>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a0d      	ldr	r2, [pc, #52]	; (8005400 <HAL_Init+0x40>)
 80053ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80053ce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80053d0:	4b0b      	ldr	r3, [pc, #44]	; (8005400 <HAL_Init+0x40>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4a0a      	ldr	r2, [pc, #40]	; (8005400 <HAL_Init+0x40>)
 80053d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80053da:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80053dc:	4b08      	ldr	r3, [pc, #32]	; (8005400 <HAL_Init+0x40>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a07      	ldr	r2, [pc, #28]	; (8005400 <HAL_Init+0x40>)
 80053e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80053e8:	2003      	movs	r0, #3
 80053ea:	f000 fbb1 	bl	8005b50 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80053ee:	200f      	movs	r0, #15
 80053f0:	f000 f808 	bl	8005404 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80053f4:	f7fe fa46 	bl	8003884 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80053f8:	2300      	movs	r3, #0
}
 80053fa:	4618      	mov	r0, r3
 80053fc:	bd80      	pop	{r7, pc}
 80053fe:	bf00      	nop
 8005400:	40023c00 	.word	0x40023c00

08005404 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b082      	sub	sp, #8
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800540c:	4b12      	ldr	r3, [pc, #72]	; (8005458 <HAL_InitTick+0x54>)
 800540e:	681a      	ldr	r2, [r3, #0]
 8005410:	4b12      	ldr	r3, [pc, #72]	; (800545c <HAL_InitTick+0x58>)
 8005412:	781b      	ldrb	r3, [r3, #0]
 8005414:	4619      	mov	r1, r3
 8005416:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800541a:	fbb3 f3f1 	udiv	r3, r3, r1
 800541e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005422:	4618      	mov	r0, r3
 8005424:	f000 fbc9 	bl	8005bba <HAL_SYSTICK_Config>
 8005428:	4603      	mov	r3, r0
 800542a:	2b00      	cmp	r3, #0
 800542c:	d001      	beq.n	8005432 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800542e:	2301      	movs	r3, #1
 8005430:	e00e      	b.n	8005450 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2b0f      	cmp	r3, #15
 8005436:	d80a      	bhi.n	800544e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005438:	2200      	movs	r2, #0
 800543a:	6879      	ldr	r1, [r7, #4]
 800543c:	f04f 30ff 	mov.w	r0, #4294967295
 8005440:	f000 fb91 	bl	8005b66 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005444:	4a06      	ldr	r2, [pc, #24]	; (8005460 <HAL_InitTick+0x5c>)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800544a:	2300      	movs	r3, #0
 800544c:	e000      	b.n	8005450 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800544e:	2301      	movs	r3, #1
}
 8005450:	4618      	mov	r0, r3
 8005452:	3708      	adds	r7, #8
 8005454:	46bd      	mov	sp, r7
 8005456:	bd80      	pop	{r7, pc}
 8005458:	2000000c 	.word	0x2000000c
 800545c:	20000014 	.word	0x20000014
 8005460:	20000010 	.word	0x20000010

08005464 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005464:	b480      	push	{r7}
 8005466:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005468:	4b06      	ldr	r3, [pc, #24]	; (8005484 <HAL_IncTick+0x20>)
 800546a:	781b      	ldrb	r3, [r3, #0]
 800546c:	461a      	mov	r2, r3
 800546e:	4b06      	ldr	r3, [pc, #24]	; (8005488 <HAL_IncTick+0x24>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4413      	add	r3, r2
 8005474:	4a04      	ldr	r2, [pc, #16]	; (8005488 <HAL_IncTick+0x24>)
 8005476:	6013      	str	r3, [r2, #0]
}
 8005478:	bf00      	nop
 800547a:	46bd      	mov	sp, r7
 800547c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005480:	4770      	bx	lr
 8005482:	bf00      	nop
 8005484:	20000014 	.word	0x20000014
 8005488:	20002b1c 	.word	0x20002b1c

0800548c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800548c:	b480      	push	{r7}
 800548e:	af00      	add	r7, sp, #0
  return uwTick;
 8005490:	4b03      	ldr	r3, [pc, #12]	; (80054a0 <HAL_GetTick+0x14>)
 8005492:	681b      	ldr	r3, [r3, #0]
}
 8005494:	4618      	mov	r0, r3
 8005496:	46bd      	mov	sp, r7
 8005498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549c:	4770      	bx	lr
 800549e:	bf00      	nop
 80054a0:	20002b1c 	.word	0x20002b1c

080054a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b084      	sub	sp, #16
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80054ac:	f7ff ffee 	bl	800548c <HAL_GetTick>
 80054b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054bc:	d005      	beq.n	80054ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80054be:	4b0a      	ldr	r3, [pc, #40]	; (80054e8 <HAL_Delay+0x44>)
 80054c0:	781b      	ldrb	r3, [r3, #0]
 80054c2:	461a      	mov	r2, r3
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	4413      	add	r3, r2
 80054c8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80054ca:	bf00      	nop
 80054cc:	f7ff ffde 	bl	800548c <HAL_GetTick>
 80054d0:	4602      	mov	r2, r0
 80054d2:	68bb      	ldr	r3, [r7, #8]
 80054d4:	1ad3      	subs	r3, r2, r3
 80054d6:	68fa      	ldr	r2, [r7, #12]
 80054d8:	429a      	cmp	r2, r3
 80054da:	d8f7      	bhi.n	80054cc <HAL_Delay+0x28>
  {
  }
}
 80054dc:	bf00      	nop
 80054de:	bf00      	nop
 80054e0:	3710      	adds	r7, #16
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bd80      	pop	{r7, pc}
 80054e6:	bf00      	nop
 80054e8:	20000014 	.word	0x20000014

080054ec <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b084      	sub	sp, #16
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80054f4:	2300      	movs	r3, #0
 80054f6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d101      	bne.n	8005502 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80054fe:	2301      	movs	r3, #1
 8005500:	e033      	b.n	800556a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005506:	2b00      	cmp	r3, #0
 8005508:	d109      	bne.n	800551e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	f7fe f9e6 	bl	80038dc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2200      	movs	r2, #0
 8005514:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2200      	movs	r2, #0
 800551a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005522:	f003 0310 	and.w	r3, r3, #16
 8005526:	2b00      	cmp	r3, #0
 8005528:	d118      	bne.n	800555c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800552e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005532:	f023 0302 	bic.w	r3, r3, #2
 8005536:	f043 0202 	orr.w	r2, r3, #2
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800553e:	6878      	ldr	r0, [r7, #4]
 8005540:	f000 f93a 	bl	80057b8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2200      	movs	r2, #0
 8005548:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800554e:	f023 0303 	bic.w	r3, r3, #3
 8005552:	f043 0201 	orr.w	r2, r3, #1
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	641a      	str	r2, [r3, #64]	; 0x40
 800555a:	e001      	b.n	8005560 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800555c:	2301      	movs	r3, #1
 800555e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2200      	movs	r2, #0
 8005564:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005568:	7bfb      	ldrb	r3, [r7, #15]
}
 800556a:	4618      	mov	r0, r3
 800556c:	3710      	adds	r7, #16
 800556e:	46bd      	mov	sp, r7
 8005570:	bd80      	pop	{r7, pc}
	...

08005574 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005574:	b480      	push	{r7}
 8005576:	b085      	sub	sp, #20
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
 800557c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800557e:	2300      	movs	r3, #0
 8005580:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005588:	2b01      	cmp	r3, #1
 800558a:	d101      	bne.n	8005590 <HAL_ADC_ConfigChannel+0x1c>
 800558c:	2302      	movs	r3, #2
 800558e:	e105      	b.n	800579c <HAL_ADC_ConfigChannel+0x228>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2201      	movs	r2, #1
 8005594:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	2b09      	cmp	r3, #9
 800559e:	d925      	bls.n	80055ec <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	68d9      	ldr	r1, [r3, #12]
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	b29b      	uxth	r3, r3
 80055ac:	461a      	mov	r2, r3
 80055ae:	4613      	mov	r3, r2
 80055b0:	005b      	lsls	r3, r3, #1
 80055b2:	4413      	add	r3, r2
 80055b4:	3b1e      	subs	r3, #30
 80055b6:	2207      	movs	r2, #7
 80055b8:	fa02 f303 	lsl.w	r3, r2, r3
 80055bc:	43da      	mvns	r2, r3
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	400a      	ands	r2, r1
 80055c4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	68d9      	ldr	r1, [r3, #12]
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	689a      	ldr	r2, [r3, #8]
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	b29b      	uxth	r3, r3
 80055d6:	4618      	mov	r0, r3
 80055d8:	4603      	mov	r3, r0
 80055da:	005b      	lsls	r3, r3, #1
 80055dc:	4403      	add	r3, r0
 80055de:	3b1e      	subs	r3, #30
 80055e0:	409a      	lsls	r2, r3
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	430a      	orrs	r2, r1
 80055e8:	60da      	str	r2, [r3, #12]
 80055ea:	e022      	b.n	8005632 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	6919      	ldr	r1, [r3, #16]
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	b29b      	uxth	r3, r3
 80055f8:	461a      	mov	r2, r3
 80055fa:	4613      	mov	r3, r2
 80055fc:	005b      	lsls	r3, r3, #1
 80055fe:	4413      	add	r3, r2
 8005600:	2207      	movs	r2, #7
 8005602:	fa02 f303 	lsl.w	r3, r2, r3
 8005606:	43da      	mvns	r2, r3
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	400a      	ands	r2, r1
 800560e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	6919      	ldr	r1, [r3, #16]
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	689a      	ldr	r2, [r3, #8]
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	b29b      	uxth	r3, r3
 8005620:	4618      	mov	r0, r3
 8005622:	4603      	mov	r3, r0
 8005624:	005b      	lsls	r3, r3, #1
 8005626:	4403      	add	r3, r0
 8005628:	409a      	lsls	r2, r3
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	430a      	orrs	r2, r1
 8005630:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	2b06      	cmp	r3, #6
 8005638:	d824      	bhi.n	8005684 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	685a      	ldr	r2, [r3, #4]
 8005644:	4613      	mov	r3, r2
 8005646:	009b      	lsls	r3, r3, #2
 8005648:	4413      	add	r3, r2
 800564a:	3b05      	subs	r3, #5
 800564c:	221f      	movs	r2, #31
 800564e:	fa02 f303 	lsl.w	r3, r2, r3
 8005652:	43da      	mvns	r2, r3
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	400a      	ands	r2, r1
 800565a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	b29b      	uxth	r3, r3
 8005668:	4618      	mov	r0, r3
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	685a      	ldr	r2, [r3, #4]
 800566e:	4613      	mov	r3, r2
 8005670:	009b      	lsls	r3, r3, #2
 8005672:	4413      	add	r3, r2
 8005674:	3b05      	subs	r3, #5
 8005676:	fa00 f203 	lsl.w	r2, r0, r3
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	430a      	orrs	r2, r1
 8005680:	635a      	str	r2, [r3, #52]	; 0x34
 8005682:	e04c      	b.n	800571e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	685b      	ldr	r3, [r3, #4]
 8005688:	2b0c      	cmp	r3, #12
 800568a:	d824      	bhi.n	80056d6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	685a      	ldr	r2, [r3, #4]
 8005696:	4613      	mov	r3, r2
 8005698:	009b      	lsls	r3, r3, #2
 800569a:	4413      	add	r3, r2
 800569c:	3b23      	subs	r3, #35	; 0x23
 800569e:	221f      	movs	r2, #31
 80056a0:	fa02 f303 	lsl.w	r3, r2, r3
 80056a4:	43da      	mvns	r2, r3
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	400a      	ands	r2, r1
 80056ac:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	b29b      	uxth	r3, r3
 80056ba:	4618      	mov	r0, r3
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	685a      	ldr	r2, [r3, #4]
 80056c0:	4613      	mov	r3, r2
 80056c2:	009b      	lsls	r3, r3, #2
 80056c4:	4413      	add	r3, r2
 80056c6:	3b23      	subs	r3, #35	; 0x23
 80056c8:	fa00 f203 	lsl.w	r2, r0, r3
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	430a      	orrs	r2, r1
 80056d2:	631a      	str	r2, [r3, #48]	; 0x30
 80056d4:	e023      	b.n	800571e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	685a      	ldr	r2, [r3, #4]
 80056e0:	4613      	mov	r3, r2
 80056e2:	009b      	lsls	r3, r3, #2
 80056e4:	4413      	add	r3, r2
 80056e6:	3b41      	subs	r3, #65	; 0x41
 80056e8:	221f      	movs	r2, #31
 80056ea:	fa02 f303 	lsl.w	r3, r2, r3
 80056ee:	43da      	mvns	r2, r3
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	400a      	ands	r2, r1
 80056f6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	b29b      	uxth	r3, r3
 8005704:	4618      	mov	r0, r3
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	685a      	ldr	r2, [r3, #4]
 800570a:	4613      	mov	r3, r2
 800570c:	009b      	lsls	r3, r3, #2
 800570e:	4413      	add	r3, r2
 8005710:	3b41      	subs	r3, #65	; 0x41
 8005712:	fa00 f203 	lsl.w	r2, r0, r3
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	430a      	orrs	r2, r1
 800571c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800571e:	4b22      	ldr	r3, [pc, #136]	; (80057a8 <HAL_ADC_ConfigChannel+0x234>)
 8005720:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	4a21      	ldr	r2, [pc, #132]	; (80057ac <HAL_ADC_ConfigChannel+0x238>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d109      	bne.n	8005740 <HAL_ADC_ConfigChannel+0x1cc>
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	2b12      	cmp	r3, #18
 8005732:	d105      	bne.n	8005740 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	685b      	ldr	r3, [r3, #4]
 8005738:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	4a19      	ldr	r2, [pc, #100]	; (80057ac <HAL_ADC_ConfigChannel+0x238>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d123      	bne.n	8005792 <HAL_ADC_ConfigChannel+0x21e>
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	2b10      	cmp	r3, #16
 8005750:	d003      	beq.n	800575a <HAL_ADC_ConfigChannel+0x1e6>
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	2b11      	cmp	r3, #17
 8005758:	d11b      	bne.n	8005792 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	685b      	ldr	r3, [r3, #4]
 800575e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	2b10      	cmp	r3, #16
 800576c:	d111      	bne.n	8005792 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800576e:	4b10      	ldr	r3, [pc, #64]	; (80057b0 <HAL_ADC_ConfigChannel+0x23c>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	4a10      	ldr	r2, [pc, #64]	; (80057b4 <HAL_ADC_ConfigChannel+0x240>)
 8005774:	fba2 2303 	umull	r2, r3, r2, r3
 8005778:	0c9a      	lsrs	r2, r3, #18
 800577a:	4613      	mov	r3, r2
 800577c:	009b      	lsls	r3, r3, #2
 800577e:	4413      	add	r3, r2
 8005780:	005b      	lsls	r3, r3, #1
 8005782:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005784:	e002      	b.n	800578c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8005786:	68bb      	ldr	r3, [r7, #8]
 8005788:	3b01      	subs	r3, #1
 800578a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d1f9      	bne.n	8005786 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2200      	movs	r2, #0
 8005796:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800579a:	2300      	movs	r3, #0
}
 800579c:	4618      	mov	r0, r3
 800579e:	3714      	adds	r7, #20
 80057a0:	46bd      	mov	sp, r7
 80057a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a6:	4770      	bx	lr
 80057a8:	40012300 	.word	0x40012300
 80057ac:	40012000 	.word	0x40012000
 80057b0:	2000000c 	.word	0x2000000c
 80057b4:	431bde83 	.word	0x431bde83

080057b8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80057b8:	b480      	push	{r7}
 80057ba:	b085      	sub	sp, #20
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80057c0:	4b79      	ldr	r3, [pc, #484]	; (80059a8 <ADC_Init+0x1f0>)
 80057c2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	685b      	ldr	r3, [r3, #4]
 80057c8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	685a      	ldr	r2, [r3, #4]
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	685b      	ldr	r3, [r3, #4]
 80057d8:	431a      	orrs	r2, r3
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	685a      	ldr	r2, [r3, #4]
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80057ec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	6859      	ldr	r1, [r3, #4]
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	691b      	ldr	r3, [r3, #16]
 80057f8:	021a      	lsls	r2, r3, #8
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	430a      	orrs	r2, r1
 8005800:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	685a      	ldr	r2, [r3, #4]
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8005810:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	6859      	ldr	r1, [r3, #4]
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	689a      	ldr	r2, [r3, #8]
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	430a      	orrs	r2, r1
 8005822:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	689a      	ldr	r2, [r3, #8]
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005832:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	6899      	ldr	r1, [r3, #8]
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	68da      	ldr	r2, [r3, #12]
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	430a      	orrs	r2, r1
 8005844:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800584a:	4a58      	ldr	r2, [pc, #352]	; (80059ac <ADC_Init+0x1f4>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d022      	beq.n	8005896 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	689a      	ldr	r2, [r3, #8]
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800585e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	6899      	ldr	r1, [r3, #8]
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	430a      	orrs	r2, r1
 8005870:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	689a      	ldr	r2, [r3, #8]
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005880:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	6899      	ldr	r1, [r3, #8]
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	430a      	orrs	r2, r1
 8005892:	609a      	str	r2, [r3, #8]
 8005894:	e00f      	b.n	80058b6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	689a      	ldr	r2, [r3, #8]
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80058a4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	689a      	ldr	r2, [r3, #8]
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80058b4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	689a      	ldr	r2, [r3, #8]
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f022 0202 	bic.w	r2, r2, #2
 80058c4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	6899      	ldr	r1, [r3, #8]
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	7e1b      	ldrb	r3, [r3, #24]
 80058d0:	005a      	lsls	r2, r3, #1
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	430a      	orrs	r2, r1
 80058d8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d01b      	beq.n	800591c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	685a      	ldr	r2, [r3, #4]
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80058f2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	685a      	ldr	r2, [r3, #4]
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8005902:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	6859      	ldr	r1, [r3, #4]
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800590e:	3b01      	subs	r3, #1
 8005910:	035a      	lsls	r2, r3, #13
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	430a      	orrs	r2, r1
 8005918:	605a      	str	r2, [r3, #4]
 800591a:	e007      	b.n	800592c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	685a      	ldr	r2, [r3, #4]
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800592a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800593a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	69db      	ldr	r3, [r3, #28]
 8005946:	3b01      	subs	r3, #1
 8005948:	051a      	lsls	r2, r3, #20
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	430a      	orrs	r2, r1
 8005950:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	689a      	ldr	r2, [r3, #8]
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005960:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	6899      	ldr	r1, [r3, #8]
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800596e:	025a      	lsls	r2, r3, #9
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	430a      	orrs	r2, r1
 8005976:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	689a      	ldr	r2, [r3, #8]
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005986:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	6899      	ldr	r1, [r3, #8]
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	695b      	ldr	r3, [r3, #20]
 8005992:	029a      	lsls	r2, r3, #10
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	430a      	orrs	r2, r1
 800599a:	609a      	str	r2, [r3, #8]
}
 800599c:	bf00      	nop
 800599e:	3714      	adds	r7, #20
 80059a0:	46bd      	mov	sp, r7
 80059a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a6:	4770      	bx	lr
 80059a8:	40012300 	.word	0x40012300
 80059ac:	0f000001 	.word	0x0f000001

080059b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80059b0:	b480      	push	{r7}
 80059b2:	b085      	sub	sp, #20
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	f003 0307 	and.w	r3, r3, #7
 80059be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80059c0:	4b0c      	ldr	r3, [pc, #48]	; (80059f4 <__NVIC_SetPriorityGrouping+0x44>)
 80059c2:	68db      	ldr	r3, [r3, #12]
 80059c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80059c6:	68ba      	ldr	r2, [r7, #8]
 80059c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80059cc:	4013      	ands	r3, r2
 80059ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80059d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80059dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80059e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80059e2:	4a04      	ldr	r2, [pc, #16]	; (80059f4 <__NVIC_SetPriorityGrouping+0x44>)
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	60d3      	str	r3, [r2, #12]
}
 80059e8:	bf00      	nop
 80059ea:	3714      	adds	r7, #20
 80059ec:	46bd      	mov	sp, r7
 80059ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f2:	4770      	bx	lr
 80059f4:	e000ed00 	.word	0xe000ed00

080059f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80059f8:	b480      	push	{r7}
 80059fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80059fc:	4b04      	ldr	r3, [pc, #16]	; (8005a10 <__NVIC_GetPriorityGrouping+0x18>)
 80059fe:	68db      	ldr	r3, [r3, #12]
 8005a00:	0a1b      	lsrs	r3, r3, #8
 8005a02:	f003 0307 	and.w	r3, r3, #7
}
 8005a06:	4618      	mov	r0, r3
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0e:	4770      	bx	lr
 8005a10:	e000ed00 	.word	0xe000ed00

08005a14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005a14:	b480      	push	{r7}
 8005a16:	b083      	sub	sp, #12
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	4603      	mov	r3, r0
 8005a1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005a1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	db0b      	blt.n	8005a3e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005a26:	79fb      	ldrb	r3, [r7, #7]
 8005a28:	f003 021f 	and.w	r2, r3, #31
 8005a2c:	4907      	ldr	r1, [pc, #28]	; (8005a4c <__NVIC_EnableIRQ+0x38>)
 8005a2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a32:	095b      	lsrs	r3, r3, #5
 8005a34:	2001      	movs	r0, #1
 8005a36:	fa00 f202 	lsl.w	r2, r0, r2
 8005a3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005a3e:	bf00      	nop
 8005a40:	370c      	adds	r7, #12
 8005a42:	46bd      	mov	sp, r7
 8005a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a48:	4770      	bx	lr
 8005a4a:	bf00      	nop
 8005a4c:	e000e100 	.word	0xe000e100

08005a50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005a50:	b480      	push	{r7}
 8005a52:	b083      	sub	sp, #12
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	4603      	mov	r3, r0
 8005a58:	6039      	str	r1, [r7, #0]
 8005a5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005a5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	db0a      	blt.n	8005a7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	b2da      	uxtb	r2, r3
 8005a68:	490c      	ldr	r1, [pc, #48]	; (8005a9c <__NVIC_SetPriority+0x4c>)
 8005a6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a6e:	0112      	lsls	r2, r2, #4
 8005a70:	b2d2      	uxtb	r2, r2
 8005a72:	440b      	add	r3, r1
 8005a74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005a78:	e00a      	b.n	8005a90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	b2da      	uxtb	r2, r3
 8005a7e:	4908      	ldr	r1, [pc, #32]	; (8005aa0 <__NVIC_SetPriority+0x50>)
 8005a80:	79fb      	ldrb	r3, [r7, #7]
 8005a82:	f003 030f 	and.w	r3, r3, #15
 8005a86:	3b04      	subs	r3, #4
 8005a88:	0112      	lsls	r2, r2, #4
 8005a8a:	b2d2      	uxtb	r2, r2
 8005a8c:	440b      	add	r3, r1
 8005a8e:	761a      	strb	r2, [r3, #24]
}
 8005a90:	bf00      	nop
 8005a92:	370c      	adds	r7, #12
 8005a94:	46bd      	mov	sp, r7
 8005a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9a:	4770      	bx	lr
 8005a9c:	e000e100 	.word	0xe000e100
 8005aa0:	e000ed00 	.word	0xe000ed00

08005aa4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	b089      	sub	sp, #36	; 0x24
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	60f8      	str	r0, [r7, #12]
 8005aac:	60b9      	str	r1, [r7, #8]
 8005aae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	f003 0307 	and.w	r3, r3, #7
 8005ab6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005ab8:	69fb      	ldr	r3, [r7, #28]
 8005aba:	f1c3 0307 	rsb	r3, r3, #7
 8005abe:	2b04      	cmp	r3, #4
 8005ac0:	bf28      	it	cs
 8005ac2:	2304      	movcs	r3, #4
 8005ac4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005ac6:	69fb      	ldr	r3, [r7, #28]
 8005ac8:	3304      	adds	r3, #4
 8005aca:	2b06      	cmp	r3, #6
 8005acc:	d902      	bls.n	8005ad4 <NVIC_EncodePriority+0x30>
 8005ace:	69fb      	ldr	r3, [r7, #28]
 8005ad0:	3b03      	subs	r3, #3
 8005ad2:	e000      	b.n	8005ad6 <NVIC_EncodePriority+0x32>
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005ad8:	f04f 32ff 	mov.w	r2, #4294967295
 8005adc:	69bb      	ldr	r3, [r7, #24]
 8005ade:	fa02 f303 	lsl.w	r3, r2, r3
 8005ae2:	43da      	mvns	r2, r3
 8005ae4:	68bb      	ldr	r3, [r7, #8]
 8005ae6:	401a      	ands	r2, r3
 8005ae8:	697b      	ldr	r3, [r7, #20]
 8005aea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005aec:	f04f 31ff 	mov.w	r1, #4294967295
 8005af0:	697b      	ldr	r3, [r7, #20]
 8005af2:	fa01 f303 	lsl.w	r3, r1, r3
 8005af6:	43d9      	mvns	r1, r3
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005afc:	4313      	orrs	r3, r2
         );
}
 8005afe:	4618      	mov	r0, r3
 8005b00:	3724      	adds	r7, #36	; 0x24
 8005b02:	46bd      	mov	sp, r7
 8005b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b08:	4770      	bx	lr
	...

08005b0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b082      	sub	sp, #8
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	3b01      	subs	r3, #1
 8005b18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005b1c:	d301      	bcc.n	8005b22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005b1e:	2301      	movs	r3, #1
 8005b20:	e00f      	b.n	8005b42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005b22:	4a0a      	ldr	r2, [pc, #40]	; (8005b4c <SysTick_Config+0x40>)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	3b01      	subs	r3, #1
 8005b28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005b2a:	210f      	movs	r1, #15
 8005b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8005b30:	f7ff ff8e 	bl	8005a50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005b34:	4b05      	ldr	r3, [pc, #20]	; (8005b4c <SysTick_Config+0x40>)
 8005b36:	2200      	movs	r2, #0
 8005b38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005b3a:	4b04      	ldr	r3, [pc, #16]	; (8005b4c <SysTick_Config+0x40>)
 8005b3c:	2207      	movs	r2, #7
 8005b3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005b40:	2300      	movs	r3, #0
}
 8005b42:	4618      	mov	r0, r3
 8005b44:	3708      	adds	r7, #8
 8005b46:	46bd      	mov	sp, r7
 8005b48:	bd80      	pop	{r7, pc}
 8005b4a:	bf00      	nop
 8005b4c:	e000e010 	.word	0xe000e010

08005b50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b082      	sub	sp, #8
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005b58:	6878      	ldr	r0, [r7, #4]
 8005b5a:	f7ff ff29 	bl	80059b0 <__NVIC_SetPriorityGrouping>
}
 8005b5e:	bf00      	nop
 8005b60:	3708      	adds	r7, #8
 8005b62:	46bd      	mov	sp, r7
 8005b64:	bd80      	pop	{r7, pc}

08005b66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005b66:	b580      	push	{r7, lr}
 8005b68:	b086      	sub	sp, #24
 8005b6a:	af00      	add	r7, sp, #0
 8005b6c:	4603      	mov	r3, r0
 8005b6e:	60b9      	str	r1, [r7, #8]
 8005b70:	607a      	str	r2, [r7, #4]
 8005b72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005b74:	2300      	movs	r3, #0
 8005b76:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005b78:	f7ff ff3e 	bl	80059f8 <__NVIC_GetPriorityGrouping>
 8005b7c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005b7e:	687a      	ldr	r2, [r7, #4]
 8005b80:	68b9      	ldr	r1, [r7, #8]
 8005b82:	6978      	ldr	r0, [r7, #20]
 8005b84:	f7ff ff8e 	bl	8005aa4 <NVIC_EncodePriority>
 8005b88:	4602      	mov	r2, r0
 8005b8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005b8e:	4611      	mov	r1, r2
 8005b90:	4618      	mov	r0, r3
 8005b92:	f7ff ff5d 	bl	8005a50 <__NVIC_SetPriority>
}
 8005b96:	bf00      	nop
 8005b98:	3718      	adds	r7, #24
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	bd80      	pop	{r7, pc}

08005b9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005b9e:	b580      	push	{r7, lr}
 8005ba0:	b082      	sub	sp, #8
 8005ba2:	af00      	add	r7, sp, #0
 8005ba4:	4603      	mov	r3, r0
 8005ba6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005ba8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005bac:	4618      	mov	r0, r3
 8005bae:	f7ff ff31 	bl	8005a14 <__NVIC_EnableIRQ>
}
 8005bb2:	bf00      	nop
 8005bb4:	3708      	adds	r7, #8
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	bd80      	pop	{r7, pc}

08005bba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005bba:	b580      	push	{r7, lr}
 8005bbc:	b082      	sub	sp, #8
 8005bbe:	af00      	add	r7, sp, #0
 8005bc0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005bc2:	6878      	ldr	r0, [r7, #4]
 8005bc4:	f7ff ffa2 	bl	8005b0c <SysTick_Config>
 8005bc8:	4603      	mov	r3, r0
}
 8005bca:	4618      	mov	r0, r3
 8005bcc:	3708      	adds	r7, #8
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	bd80      	pop	{r7, pc}
	...

08005bd4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b086      	sub	sp, #24
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005bdc:	2300      	movs	r3, #0
 8005bde:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005be0:	f7ff fc54 	bl	800548c <HAL_GetTick>
 8005be4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d101      	bne.n	8005bf0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005bec:	2301      	movs	r3, #1
 8005bee:	e099      	b.n	8005d24 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2202      	movs	r2, #2
 8005bf4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	681a      	ldr	r2, [r3, #0]
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f022 0201 	bic.w	r2, r2, #1
 8005c0e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005c10:	e00f      	b.n	8005c32 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005c12:	f7ff fc3b 	bl	800548c <HAL_GetTick>
 8005c16:	4602      	mov	r2, r0
 8005c18:	693b      	ldr	r3, [r7, #16]
 8005c1a:	1ad3      	subs	r3, r2, r3
 8005c1c:	2b05      	cmp	r3, #5
 8005c1e:	d908      	bls.n	8005c32 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2220      	movs	r2, #32
 8005c24:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2203      	movs	r2, #3
 8005c2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005c2e:	2303      	movs	r3, #3
 8005c30:	e078      	b.n	8005d24 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f003 0301 	and.w	r3, r3, #1
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d1e8      	bne.n	8005c12 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005c48:	697a      	ldr	r2, [r7, #20]
 8005c4a:	4b38      	ldr	r3, [pc, #224]	; (8005d2c <HAL_DMA_Init+0x158>)
 8005c4c:	4013      	ands	r3, r2
 8005c4e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	685a      	ldr	r2, [r3, #4]
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	689b      	ldr	r3, [r3, #8]
 8005c58:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005c5e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	691b      	ldr	r3, [r3, #16]
 8005c64:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005c6a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	699b      	ldr	r3, [r3, #24]
 8005c70:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005c76:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6a1b      	ldr	r3, [r3, #32]
 8005c7c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005c7e:	697a      	ldr	r2, [r7, #20]
 8005c80:	4313      	orrs	r3, r2
 8005c82:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c88:	2b04      	cmp	r3, #4
 8005c8a:	d107      	bne.n	8005c9c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c94:	4313      	orrs	r3, r2
 8005c96:	697a      	ldr	r2, [r7, #20]
 8005c98:	4313      	orrs	r3, r2
 8005c9a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	697a      	ldr	r2, [r7, #20]
 8005ca2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	695b      	ldr	r3, [r3, #20]
 8005caa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005cac:	697b      	ldr	r3, [r7, #20]
 8005cae:	f023 0307 	bic.w	r3, r3, #7
 8005cb2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cb8:	697a      	ldr	r2, [r7, #20]
 8005cba:	4313      	orrs	r3, r2
 8005cbc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cc2:	2b04      	cmp	r3, #4
 8005cc4:	d117      	bne.n	8005cf6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cca:	697a      	ldr	r2, [r7, #20]
 8005ccc:	4313      	orrs	r3, r2
 8005cce:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d00e      	beq.n	8005cf6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005cd8:	6878      	ldr	r0, [r7, #4]
 8005cda:	f000 fb01 	bl	80062e0 <DMA_CheckFifoParam>
 8005cde:	4603      	mov	r3, r0
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d008      	beq.n	8005cf6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2240      	movs	r2, #64	; 0x40
 8005ce8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2201      	movs	r2, #1
 8005cee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	e016      	b.n	8005d24 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	697a      	ldr	r2, [r7, #20]
 8005cfc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005cfe:	6878      	ldr	r0, [r7, #4]
 8005d00:	f000 fab8 	bl	8006274 <DMA_CalcBaseAndBitshift>
 8005d04:	4603      	mov	r3, r0
 8005d06:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d0c:	223f      	movs	r2, #63	; 0x3f
 8005d0e:	409a      	lsls	r2, r3
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2200      	movs	r2, #0
 8005d18:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2201      	movs	r2, #1
 8005d1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005d22:	2300      	movs	r3, #0
}
 8005d24:	4618      	mov	r0, r3
 8005d26:	3718      	adds	r7, #24
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	bd80      	pop	{r7, pc}
 8005d2c:	f010803f 	.word	0xf010803f

08005d30 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b086      	sub	sp, #24
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	60f8      	str	r0, [r7, #12]
 8005d38:	60b9      	str	r1, [r7, #8]
 8005d3a:	607a      	str	r2, [r7, #4]
 8005d3c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005d3e:	2300      	movs	r3, #0
 8005d40:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d46:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005d4e:	2b01      	cmp	r3, #1
 8005d50:	d101      	bne.n	8005d56 <HAL_DMA_Start_IT+0x26>
 8005d52:	2302      	movs	r3, #2
 8005d54:	e040      	b.n	8005dd8 <HAL_DMA_Start_IT+0xa8>
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	2201      	movs	r2, #1
 8005d5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005d64:	b2db      	uxtb	r3, r3
 8005d66:	2b01      	cmp	r3, #1
 8005d68:	d12f      	bne.n	8005dca <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	2202      	movs	r2, #2
 8005d6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	2200      	movs	r2, #0
 8005d76:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	687a      	ldr	r2, [r7, #4]
 8005d7c:	68b9      	ldr	r1, [r7, #8]
 8005d7e:	68f8      	ldr	r0, [r7, #12]
 8005d80:	f000 fa4a 	bl	8006218 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d88:	223f      	movs	r2, #63	; 0x3f
 8005d8a:	409a      	lsls	r2, r3
 8005d8c:	693b      	ldr	r3, [r7, #16]
 8005d8e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	681a      	ldr	r2, [r3, #0]
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f042 0216 	orr.w	r2, r2, #22
 8005d9e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d007      	beq.n	8005db8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	681a      	ldr	r2, [r3, #0]
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f042 0208 	orr.w	r2, r2, #8
 8005db6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	681a      	ldr	r2, [r3, #0]
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f042 0201 	orr.w	r2, r2, #1
 8005dc6:	601a      	str	r2, [r3, #0]
 8005dc8:	e005      	b.n	8005dd6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	2200      	movs	r2, #0
 8005dce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005dd2:	2302      	movs	r3, #2
 8005dd4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005dd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005dd8:	4618      	mov	r0, r3
 8005dda:	3718      	adds	r7, #24
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	bd80      	pop	{r7, pc}

08005de0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b084      	sub	sp, #16
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005dec:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005dee:	f7ff fb4d 	bl	800548c <HAL_GetTick>
 8005df2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005dfa:	b2db      	uxtb	r3, r3
 8005dfc:	2b02      	cmp	r3, #2
 8005dfe:	d008      	beq.n	8005e12 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2280      	movs	r2, #128	; 0x80
 8005e04:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2200      	movs	r2, #0
 8005e0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005e0e:	2301      	movs	r3, #1
 8005e10:	e052      	b.n	8005eb8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	681a      	ldr	r2, [r3, #0]
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f022 0216 	bic.w	r2, r2, #22
 8005e20:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	695a      	ldr	r2, [r3, #20]
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005e30:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d103      	bne.n	8005e42 <HAL_DMA_Abort+0x62>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d007      	beq.n	8005e52 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	681a      	ldr	r2, [r3, #0]
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f022 0208 	bic.w	r2, r2, #8
 8005e50:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	681a      	ldr	r2, [r3, #0]
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f022 0201 	bic.w	r2, r2, #1
 8005e60:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005e62:	e013      	b.n	8005e8c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005e64:	f7ff fb12 	bl	800548c <HAL_GetTick>
 8005e68:	4602      	mov	r2, r0
 8005e6a:	68bb      	ldr	r3, [r7, #8]
 8005e6c:	1ad3      	subs	r3, r2, r3
 8005e6e:	2b05      	cmp	r3, #5
 8005e70:	d90c      	bls.n	8005e8c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2220      	movs	r2, #32
 8005e76:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2203      	movs	r2, #3
 8005e7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2200      	movs	r2, #0
 8005e84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8005e88:	2303      	movs	r3, #3
 8005e8a:	e015      	b.n	8005eb8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f003 0301 	and.w	r3, r3, #1
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d1e4      	bne.n	8005e64 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e9e:	223f      	movs	r2, #63	; 0x3f
 8005ea0:	409a      	lsls	r2, r3
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2201      	movs	r2, #1
 8005eaa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8005eb6:	2300      	movs	r3, #0
}
 8005eb8:	4618      	mov	r0, r3
 8005eba:	3710      	adds	r7, #16
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	bd80      	pop	{r7, pc}

08005ec0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005ec0:	b480      	push	{r7}
 8005ec2:	b083      	sub	sp, #12
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005ece:	b2db      	uxtb	r3, r3
 8005ed0:	2b02      	cmp	r3, #2
 8005ed2:	d004      	beq.n	8005ede <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2280      	movs	r2, #128	; 0x80
 8005ed8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005eda:	2301      	movs	r3, #1
 8005edc:	e00c      	b.n	8005ef8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2205      	movs	r2, #5
 8005ee2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	681a      	ldr	r2, [r3, #0]
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f022 0201 	bic.w	r2, r2, #1
 8005ef4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005ef6:	2300      	movs	r3, #0
}
 8005ef8:	4618      	mov	r0, r3
 8005efa:	370c      	adds	r7, #12
 8005efc:	46bd      	mov	sp, r7
 8005efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f02:	4770      	bx	lr

08005f04 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b086      	sub	sp, #24
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005f10:	4b8e      	ldr	r3, [pc, #568]	; (800614c <HAL_DMA_IRQHandler+0x248>)
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	4a8e      	ldr	r2, [pc, #568]	; (8006150 <HAL_DMA_IRQHandler+0x24c>)
 8005f16:	fba2 2303 	umull	r2, r3, r2, r3
 8005f1a:	0a9b      	lsrs	r3, r3, #10
 8005f1c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f22:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005f24:	693b      	ldr	r3, [r7, #16]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f2e:	2208      	movs	r2, #8
 8005f30:	409a      	lsls	r2, r3
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	4013      	ands	r3, r2
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d01a      	beq.n	8005f70 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f003 0304 	and.w	r3, r3, #4
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d013      	beq.n	8005f70 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	681a      	ldr	r2, [r3, #0]
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f022 0204 	bic.w	r2, r2, #4
 8005f56:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f5c:	2208      	movs	r2, #8
 8005f5e:	409a      	lsls	r2, r3
 8005f60:	693b      	ldr	r3, [r7, #16]
 8005f62:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f68:	f043 0201 	orr.w	r2, r3, #1
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f74:	2201      	movs	r2, #1
 8005f76:	409a      	lsls	r2, r3
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	4013      	ands	r3, r2
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d012      	beq.n	8005fa6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	695b      	ldr	r3, [r3, #20]
 8005f86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d00b      	beq.n	8005fa6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f92:	2201      	movs	r2, #1
 8005f94:	409a      	lsls	r2, r3
 8005f96:	693b      	ldr	r3, [r7, #16]
 8005f98:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f9e:	f043 0202 	orr.w	r2, r3, #2
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005faa:	2204      	movs	r2, #4
 8005fac:	409a      	lsls	r2, r3
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	4013      	ands	r3, r2
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d012      	beq.n	8005fdc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f003 0302 	and.w	r3, r3, #2
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d00b      	beq.n	8005fdc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fc8:	2204      	movs	r2, #4
 8005fca:	409a      	lsls	r2, r3
 8005fcc:	693b      	ldr	r3, [r7, #16]
 8005fce:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fd4:	f043 0204 	orr.w	r2, r3, #4
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fe0:	2210      	movs	r2, #16
 8005fe2:	409a      	lsls	r2, r3
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	4013      	ands	r3, r2
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d043      	beq.n	8006074 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f003 0308 	and.w	r3, r3, #8
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d03c      	beq.n	8006074 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ffe:	2210      	movs	r2, #16
 8006000:	409a      	lsls	r2, r3
 8006002:	693b      	ldr	r3, [r7, #16]
 8006004:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006010:	2b00      	cmp	r3, #0
 8006012:	d018      	beq.n	8006046 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800601e:	2b00      	cmp	r3, #0
 8006020:	d108      	bne.n	8006034 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006026:	2b00      	cmp	r3, #0
 8006028:	d024      	beq.n	8006074 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800602e:	6878      	ldr	r0, [r7, #4]
 8006030:	4798      	blx	r3
 8006032:	e01f      	b.n	8006074 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006038:	2b00      	cmp	r3, #0
 800603a:	d01b      	beq.n	8006074 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006040:	6878      	ldr	r0, [r7, #4]
 8006042:	4798      	blx	r3
 8006044:	e016      	b.n	8006074 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006050:	2b00      	cmp	r3, #0
 8006052:	d107      	bne.n	8006064 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	681a      	ldr	r2, [r3, #0]
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f022 0208 	bic.w	r2, r2, #8
 8006062:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006068:	2b00      	cmp	r3, #0
 800606a:	d003      	beq.n	8006074 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006070:	6878      	ldr	r0, [r7, #4]
 8006072:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006078:	2220      	movs	r2, #32
 800607a:	409a      	lsls	r2, r3
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	4013      	ands	r3, r2
 8006080:	2b00      	cmp	r3, #0
 8006082:	f000 808f 	beq.w	80061a4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f003 0310 	and.w	r3, r3, #16
 8006090:	2b00      	cmp	r3, #0
 8006092:	f000 8087 	beq.w	80061a4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800609a:	2220      	movs	r2, #32
 800609c:	409a      	lsls	r2, r3
 800609e:	693b      	ldr	r3, [r7, #16]
 80060a0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80060a8:	b2db      	uxtb	r3, r3
 80060aa:	2b05      	cmp	r3, #5
 80060ac:	d136      	bne.n	800611c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	681a      	ldr	r2, [r3, #0]
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f022 0216 	bic.w	r2, r2, #22
 80060bc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	695a      	ldr	r2, [r3, #20]
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80060cc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d103      	bne.n	80060de <HAL_DMA_IRQHandler+0x1da>
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d007      	beq.n	80060ee <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	681a      	ldr	r2, [r3, #0]
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f022 0208 	bic.w	r2, r2, #8
 80060ec:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060f2:	223f      	movs	r2, #63	; 0x3f
 80060f4:	409a      	lsls	r2, r3
 80060f6:	693b      	ldr	r3, [r7, #16]
 80060f8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2201      	movs	r2, #1
 80060fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2200      	movs	r2, #0
 8006106:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800610e:	2b00      	cmp	r3, #0
 8006110:	d07e      	beq.n	8006210 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006116:	6878      	ldr	r0, [r7, #4]
 8006118:	4798      	blx	r3
        }
        return;
 800611a:	e079      	b.n	8006210 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006126:	2b00      	cmp	r3, #0
 8006128:	d01d      	beq.n	8006166 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006134:	2b00      	cmp	r3, #0
 8006136:	d10d      	bne.n	8006154 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800613c:	2b00      	cmp	r3, #0
 800613e:	d031      	beq.n	80061a4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006144:	6878      	ldr	r0, [r7, #4]
 8006146:	4798      	blx	r3
 8006148:	e02c      	b.n	80061a4 <HAL_DMA_IRQHandler+0x2a0>
 800614a:	bf00      	nop
 800614c:	2000000c 	.word	0x2000000c
 8006150:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006158:	2b00      	cmp	r3, #0
 800615a:	d023      	beq.n	80061a4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006160:	6878      	ldr	r0, [r7, #4]
 8006162:	4798      	blx	r3
 8006164:	e01e      	b.n	80061a4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006170:	2b00      	cmp	r3, #0
 8006172:	d10f      	bne.n	8006194 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	681a      	ldr	r2, [r3, #0]
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f022 0210 	bic.w	r2, r2, #16
 8006182:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2201      	movs	r2, #1
 8006188:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2200      	movs	r2, #0
 8006190:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006198:	2b00      	cmp	r3, #0
 800619a:	d003      	beq.n	80061a4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061a0:	6878      	ldr	r0, [r7, #4]
 80061a2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d032      	beq.n	8006212 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061b0:	f003 0301 	and.w	r3, r3, #1
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d022      	beq.n	80061fe <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2205      	movs	r2, #5
 80061bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	681a      	ldr	r2, [r3, #0]
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f022 0201 	bic.w	r2, r2, #1
 80061ce:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80061d0:	68bb      	ldr	r3, [r7, #8]
 80061d2:	3301      	adds	r3, #1
 80061d4:	60bb      	str	r3, [r7, #8]
 80061d6:	697a      	ldr	r2, [r7, #20]
 80061d8:	429a      	cmp	r2, r3
 80061da:	d307      	bcc.n	80061ec <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f003 0301 	and.w	r3, r3, #1
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d1f2      	bne.n	80061d0 <HAL_DMA_IRQHandler+0x2cc>
 80061ea:	e000      	b.n	80061ee <HAL_DMA_IRQHandler+0x2ea>
          break;
 80061ec:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2201      	movs	r2, #1
 80061f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2200      	movs	r2, #0
 80061fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006202:	2b00      	cmp	r3, #0
 8006204:	d005      	beq.n	8006212 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800620a:	6878      	ldr	r0, [r7, #4]
 800620c:	4798      	blx	r3
 800620e:	e000      	b.n	8006212 <HAL_DMA_IRQHandler+0x30e>
        return;
 8006210:	bf00      	nop
    }
  }
}
 8006212:	3718      	adds	r7, #24
 8006214:	46bd      	mov	sp, r7
 8006216:	bd80      	pop	{r7, pc}

08006218 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006218:	b480      	push	{r7}
 800621a:	b085      	sub	sp, #20
 800621c:	af00      	add	r7, sp, #0
 800621e:	60f8      	str	r0, [r7, #12]
 8006220:	60b9      	str	r1, [r7, #8]
 8006222:	607a      	str	r2, [r7, #4]
 8006224:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	681a      	ldr	r2, [r3, #0]
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006234:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	683a      	ldr	r2, [r7, #0]
 800623c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	689b      	ldr	r3, [r3, #8]
 8006242:	2b40      	cmp	r3, #64	; 0x40
 8006244:	d108      	bne.n	8006258 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	687a      	ldr	r2, [r7, #4]
 800624c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	68ba      	ldr	r2, [r7, #8]
 8006254:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8006256:	e007      	b.n	8006268 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	68ba      	ldr	r2, [r7, #8]
 800625e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	687a      	ldr	r2, [r7, #4]
 8006266:	60da      	str	r2, [r3, #12]
}
 8006268:	bf00      	nop
 800626a:	3714      	adds	r7, #20
 800626c:	46bd      	mov	sp, r7
 800626e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006272:	4770      	bx	lr

08006274 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006274:	b480      	push	{r7}
 8006276:	b085      	sub	sp, #20
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	b2db      	uxtb	r3, r3
 8006282:	3b10      	subs	r3, #16
 8006284:	4a14      	ldr	r2, [pc, #80]	; (80062d8 <DMA_CalcBaseAndBitshift+0x64>)
 8006286:	fba2 2303 	umull	r2, r3, r2, r3
 800628a:	091b      	lsrs	r3, r3, #4
 800628c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800628e:	4a13      	ldr	r2, [pc, #76]	; (80062dc <DMA_CalcBaseAndBitshift+0x68>)
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	4413      	add	r3, r2
 8006294:	781b      	ldrb	r3, [r3, #0]
 8006296:	461a      	mov	r2, r3
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	2b03      	cmp	r3, #3
 80062a0:	d909      	bls.n	80062b6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80062aa:	f023 0303 	bic.w	r3, r3, #3
 80062ae:	1d1a      	adds	r2, r3, #4
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	659a      	str	r2, [r3, #88]	; 0x58
 80062b4:	e007      	b.n	80062c6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80062be:	f023 0303 	bic.w	r3, r3, #3
 80062c2:	687a      	ldr	r2, [r7, #4]
 80062c4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80062ca:	4618      	mov	r0, r3
 80062cc:	3714      	adds	r7, #20
 80062ce:	46bd      	mov	sp, r7
 80062d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d4:	4770      	bx	lr
 80062d6:	bf00      	nop
 80062d8:	aaaaaaab 	.word	0xaaaaaaab
 80062dc:	08014424 	.word	0x08014424

080062e0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80062e0:	b480      	push	{r7}
 80062e2:	b085      	sub	sp, #20
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80062e8:	2300      	movs	r3, #0
 80062ea:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062f0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	699b      	ldr	r3, [r3, #24]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d11f      	bne.n	800633a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80062fa:	68bb      	ldr	r3, [r7, #8]
 80062fc:	2b03      	cmp	r3, #3
 80062fe:	d856      	bhi.n	80063ae <DMA_CheckFifoParam+0xce>
 8006300:	a201      	add	r2, pc, #4	; (adr r2, 8006308 <DMA_CheckFifoParam+0x28>)
 8006302:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006306:	bf00      	nop
 8006308:	08006319 	.word	0x08006319
 800630c:	0800632b 	.word	0x0800632b
 8006310:	08006319 	.word	0x08006319
 8006314:	080063af 	.word	0x080063af
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800631c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006320:	2b00      	cmp	r3, #0
 8006322:	d046      	beq.n	80063b2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006324:	2301      	movs	r3, #1
 8006326:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006328:	e043      	b.n	80063b2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800632e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006332:	d140      	bne.n	80063b6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006334:	2301      	movs	r3, #1
 8006336:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006338:	e03d      	b.n	80063b6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	699b      	ldr	r3, [r3, #24]
 800633e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006342:	d121      	bne.n	8006388 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8006344:	68bb      	ldr	r3, [r7, #8]
 8006346:	2b03      	cmp	r3, #3
 8006348:	d837      	bhi.n	80063ba <DMA_CheckFifoParam+0xda>
 800634a:	a201      	add	r2, pc, #4	; (adr r2, 8006350 <DMA_CheckFifoParam+0x70>)
 800634c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006350:	08006361 	.word	0x08006361
 8006354:	08006367 	.word	0x08006367
 8006358:	08006361 	.word	0x08006361
 800635c:	08006379 	.word	0x08006379
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006360:	2301      	movs	r3, #1
 8006362:	73fb      	strb	r3, [r7, #15]
      break;
 8006364:	e030      	b.n	80063c8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800636a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800636e:	2b00      	cmp	r3, #0
 8006370:	d025      	beq.n	80063be <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8006372:	2301      	movs	r3, #1
 8006374:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006376:	e022      	b.n	80063be <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800637c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006380:	d11f      	bne.n	80063c2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8006382:	2301      	movs	r3, #1
 8006384:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006386:	e01c      	b.n	80063c2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006388:	68bb      	ldr	r3, [r7, #8]
 800638a:	2b02      	cmp	r3, #2
 800638c:	d903      	bls.n	8006396 <DMA_CheckFifoParam+0xb6>
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	2b03      	cmp	r3, #3
 8006392:	d003      	beq.n	800639c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006394:	e018      	b.n	80063c8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8006396:	2301      	movs	r3, #1
 8006398:	73fb      	strb	r3, [r7, #15]
      break;
 800639a:	e015      	b.n	80063c8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d00e      	beq.n	80063c6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80063a8:	2301      	movs	r3, #1
 80063aa:	73fb      	strb	r3, [r7, #15]
      break;
 80063ac:	e00b      	b.n	80063c6 <DMA_CheckFifoParam+0xe6>
      break;
 80063ae:	bf00      	nop
 80063b0:	e00a      	b.n	80063c8 <DMA_CheckFifoParam+0xe8>
      break;
 80063b2:	bf00      	nop
 80063b4:	e008      	b.n	80063c8 <DMA_CheckFifoParam+0xe8>
      break;
 80063b6:	bf00      	nop
 80063b8:	e006      	b.n	80063c8 <DMA_CheckFifoParam+0xe8>
      break;
 80063ba:	bf00      	nop
 80063bc:	e004      	b.n	80063c8 <DMA_CheckFifoParam+0xe8>
      break;
 80063be:	bf00      	nop
 80063c0:	e002      	b.n	80063c8 <DMA_CheckFifoParam+0xe8>
      break;   
 80063c2:	bf00      	nop
 80063c4:	e000      	b.n	80063c8 <DMA_CheckFifoParam+0xe8>
      break;
 80063c6:	bf00      	nop
    }
  } 
  
  return status; 
 80063c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80063ca:	4618      	mov	r0, r3
 80063cc:	3714      	adds	r7, #20
 80063ce:	46bd      	mov	sp, r7
 80063d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d4:	4770      	bx	lr
 80063d6:	bf00      	nop

080063d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80063d8:	b480      	push	{r7}
 80063da:	b089      	sub	sp, #36	; 0x24
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
 80063e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80063e2:	2300      	movs	r3, #0
 80063e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80063e6:	2300      	movs	r3, #0
 80063e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80063ea:	2300      	movs	r3, #0
 80063ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80063ee:	2300      	movs	r3, #0
 80063f0:	61fb      	str	r3, [r7, #28]
 80063f2:	e16b      	b.n	80066cc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80063f4:	2201      	movs	r2, #1
 80063f6:	69fb      	ldr	r3, [r7, #28]
 80063f8:	fa02 f303 	lsl.w	r3, r2, r3
 80063fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	697a      	ldr	r2, [r7, #20]
 8006404:	4013      	ands	r3, r2
 8006406:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006408:	693a      	ldr	r2, [r7, #16]
 800640a:	697b      	ldr	r3, [r7, #20]
 800640c:	429a      	cmp	r2, r3
 800640e:	f040 815a 	bne.w	80066c6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	685b      	ldr	r3, [r3, #4]
 8006416:	f003 0303 	and.w	r3, r3, #3
 800641a:	2b01      	cmp	r3, #1
 800641c:	d005      	beq.n	800642a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	685b      	ldr	r3, [r3, #4]
 8006422:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006426:	2b02      	cmp	r3, #2
 8006428:	d130      	bne.n	800648c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	689b      	ldr	r3, [r3, #8]
 800642e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006430:	69fb      	ldr	r3, [r7, #28]
 8006432:	005b      	lsls	r3, r3, #1
 8006434:	2203      	movs	r2, #3
 8006436:	fa02 f303 	lsl.w	r3, r2, r3
 800643a:	43db      	mvns	r3, r3
 800643c:	69ba      	ldr	r2, [r7, #24]
 800643e:	4013      	ands	r3, r2
 8006440:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	68da      	ldr	r2, [r3, #12]
 8006446:	69fb      	ldr	r3, [r7, #28]
 8006448:	005b      	lsls	r3, r3, #1
 800644a:	fa02 f303 	lsl.w	r3, r2, r3
 800644e:	69ba      	ldr	r2, [r7, #24]
 8006450:	4313      	orrs	r3, r2
 8006452:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	69ba      	ldr	r2, [r7, #24]
 8006458:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	685b      	ldr	r3, [r3, #4]
 800645e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006460:	2201      	movs	r2, #1
 8006462:	69fb      	ldr	r3, [r7, #28]
 8006464:	fa02 f303 	lsl.w	r3, r2, r3
 8006468:	43db      	mvns	r3, r3
 800646a:	69ba      	ldr	r2, [r7, #24]
 800646c:	4013      	ands	r3, r2
 800646e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	685b      	ldr	r3, [r3, #4]
 8006474:	091b      	lsrs	r3, r3, #4
 8006476:	f003 0201 	and.w	r2, r3, #1
 800647a:	69fb      	ldr	r3, [r7, #28]
 800647c:	fa02 f303 	lsl.w	r3, r2, r3
 8006480:	69ba      	ldr	r2, [r7, #24]
 8006482:	4313      	orrs	r3, r2
 8006484:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	69ba      	ldr	r2, [r7, #24]
 800648a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	685b      	ldr	r3, [r3, #4]
 8006490:	f003 0303 	and.w	r3, r3, #3
 8006494:	2b03      	cmp	r3, #3
 8006496:	d017      	beq.n	80064c8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	68db      	ldr	r3, [r3, #12]
 800649c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800649e:	69fb      	ldr	r3, [r7, #28]
 80064a0:	005b      	lsls	r3, r3, #1
 80064a2:	2203      	movs	r2, #3
 80064a4:	fa02 f303 	lsl.w	r3, r2, r3
 80064a8:	43db      	mvns	r3, r3
 80064aa:	69ba      	ldr	r2, [r7, #24]
 80064ac:	4013      	ands	r3, r2
 80064ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	689a      	ldr	r2, [r3, #8]
 80064b4:	69fb      	ldr	r3, [r7, #28]
 80064b6:	005b      	lsls	r3, r3, #1
 80064b8:	fa02 f303 	lsl.w	r3, r2, r3
 80064bc:	69ba      	ldr	r2, [r7, #24]
 80064be:	4313      	orrs	r3, r2
 80064c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	69ba      	ldr	r2, [r7, #24]
 80064c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	685b      	ldr	r3, [r3, #4]
 80064cc:	f003 0303 	and.w	r3, r3, #3
 80064d0:	2b02      	cmp	r3, #2
 80064d2:	d123      	bne.n	800651c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80064d4:	69fb      	ldr	r3, [r7, #28]
 80064d6:	08da      	lsrs	r2, r3, #3
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	3208      	adds	r2, #8
 80064dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80064e2:	69fb      	ldr	r3, [r7, #28]
 80064e4:	f003 0307 	and.w	r3, r3, #7
 80064e8:	009b      	lsls	r3, r3, #2
 80064ea:	220f      	movs	r2, #15
 80064ec:	fa02 f303 	lsl.w	r3, r2, r3
 80064f0:	43db      	mvns	r3, r3
 80064f2:	69ba      	ldr	r2, [r7, #24]
 80064f4:	4013      	ands	r3, r2
 80064f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	691a      	ldr	r2, [r3, #16]
 80064fc:	69fb      	ldr	r3, [r7, #28]
 80064fe:	f003 0307 	and.w	r3, r3, #7
 8006502:	009b      	lsls	r3, r3, #2
 8006504:	fa02 f303 	lsl.w	r3, r2, r3
 8006508:	69ba      	ldr	r2, [r7, #24]
 800650a:	4313      	orrs	r3, r2
 800650c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800650e:	69fb      	ldr	r3, [r7, #28]
 8006510:	08da      	lsrs	r2, r3, #3
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	3208      	adds	r2, #8
 8006516:	69b9      	ldr	r1, [r7, #24]
 8006518:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006522:	69fb      	ldr	r3, [r7, #28]
 8006524:	005b      	lsls	r3, r3, #1
 8006526:	2203      	movs	r2, #3
 8006528:	fa02 f303 	lsl.w	r3, r2, r3
 800652c:	43db      	mvns	r3, r3
 800652e:	69ba      	ldr	r2, [r7, #24]
 8006530:	4013      	ands	r3, r2
 8006532:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	685b      	ldr	r3, [r3, #4]
 8006538:	f003 0203 	and.w	r2, r3, #3
 800653c:	69fb      	ldr	r3, [r7, #28]
 800653e:	005b      	lsls	r3, r3, #1
 8006540:	fa02 f303 	lsl.w	r3, r2, r3
 8006544:	69ba      	ldr	r2, [r7, #24]
 8006546:	4313      	orrs	r3, r2
 8006548:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	69ba      	ldr	r2, [r7, #24]
 800654e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	685b      	ldr	r3, [r3, #4]
 8006554:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006558:	2b00      	cmp	r3, #0
 800655a:	f000 80b4 	beq.w	80066c6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800655e:	2300      	movs	r3, #0
 8006560:	60fb      	str	r3, [r7, #12]
 8006562:	4b60      	ldr	r3, [pc, #384]	; (80066e4 <HAL_GPIO_Init+0x30c>)
 8006564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006566:	4a5f      	ldr	r2, [pc, #380]	; (80066e4 <HAL_GPIO_Init+0x30c>)
 8006568:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800656c:	6453      	str	r3, [r2, #68]	; 0x44
 800656e:	4b5d      	ldr	r3, [pc, #372]	; (80066e4 <HAL_GPIO_Init+0x30c>)
 8006570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006572:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006576:	60fb      	str	r3, [r7, #12]
 8006578:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800657a:	4a5b      	ldr	r2, [pc, #364]	; (80066e8 <HAL_GPIO_Init+0x310>)
 800657c:	69fb      	ldr	r3, [r7, #28]
 800657e:	089b      	lsrs	r3, r3, #2
 8006580:	3302      	adds	r3, #2
 8006582:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006586:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006588:	69fb      	ldr	r3, [r7, #28]
 800658a:	f003 0303 	and.w	r3, r3, #3
 800658e:	009b      	lsls	r3, r3, #2
 8006590:	220f      	movs	r2, #15
 8006592:	fa02 f303 	lsl.w	r3, r2, r3
 8006596:	43db      	mvns	r3, r3
 8006598:	69ba      	ldr	r2, [r7, #24]
 800659a:	4013      	ands	r3, r2
 800659c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	4a52      	ldr	r2, [pc, #328]	; (80066ec <HAL_GPIO_Init+0x314>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d02b      	beq.n	80065fe <HAL_GPIO_Init+0x226>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	4a51      	ldr	r2, [pc, #324]	; (80066f0 <HAL_GPIO_Init+0x318>)
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d025      	beq.n	80065fa <HAL_GPIO_Init+0x222>
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	4a50      	ldr	r2, [pc, #320]	; (80066f4 <HAL_GPIO_Init+0x31c>)
 80065b2:	4293      	cmp	r3, r2
 80065b4:	d01f      	beq.n	80065f6 <HAL_GPIO_Init+0x21e>
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	4a4f      	ldr	r2, [pc, #316]	; (80066f8 <HAL_GPIO_Init+0x320>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d019      	beq.n	80065f2 <HAL_GPIO_Init+0x21a>
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	4a4e      	ldr	r2, [pc, #312]	; (80066fc <HAL_GPIO_Init+0x324>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d013      	beq.n	80065ee <HAL_GPIO_Init+0x216>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	4a4d      	ldr	r2, [pc, #308]	; (8006700 <HAL_GPIO_Init+0x328>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d00d      	beq.n	80065ea <HAL_GPIO_Init+0x212>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	4a4c      	ldr	r2, [pc, #304]	; (8006704 <HAL_GPIO_Init+0x32c>)
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d007      	beq.n	80065e6 <HAL_GPIO_Init+0x20e>
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	4a4b      	ldr	r2, [pc, #300]	; (8006708 <HAL_GPIO_Init+0x330>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d101      	bne.n	80065e2 <HAL_GPIO_Init+0x20a>
 80065de:	2307      	movs	r3, #7
 80065e0:	e00e      	b.n	8006600 <HAL_GPIO_Init+0x228>
 80065e2:	2308      	movs	r3, #8
 80065e4:	e00c      	b.n	8006600 <HAL_GPIO_Init+0x228>
 80065e6:	2306      	movs	r3, #6
 80065e8:	e00a      	b.n	8006600 <HAL_GPIO_Init+0x228>
 80065ea:	2305      	movs	r3, #5
 80065ec:	e008      	b.n	8006600 <HAL_GPIO_Init+0x228>
 80065ee:	2304      	movs	r3, #4
 80065f0:	e006      	b.n	8006600 <HAL_GPIO_Init+0x228>
 80065f2:	2303      	movs	r3, #3
 80065f4:	e004      	b.n	8006600 <HAL_GPIO_Init+0x228>
 80065f6:	2302      	movs	r3, #2
 80065f8:	e002      	b.n	8006600 <HAL_GPIO_Init+0x228>
 80065fa:	2301      	movs	r3, #1
 80065fc:	e000      	b.n	8006600 <HAL_GPIO_Init+0x228>
 80065fe:	2300      	movs	r3, #0
 8006600:	69fa      	ldr	r2, [r7, #28]
 8006602:	f002 0203 	and.w	r2, r2, #3
 8006606:	0092      	lsls	r2, r2, #2
 8006608:	4093      	lsls	r3, r2
 800660a:	69ba      	ldr	r2, [r7, #24]
 800660c:	4313      	orrs	r3, r2
 800660e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006610:	4935      	ldr	r1, [pc, #212]	; (80066e8 <HAL_GPIO_Init+0x310>)
 8006612:	69fb      	ldr	r3, [r7, #28]
 8006614:	089b      	lsrs	r3, r3, #2
 8006616:	3302      	adds	r3, #2
 8006618:	69ba      	ldr	r2, [r7, #24]
 800661a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800661e:	4b3b      	ldr	r3, [pc, #236]	; (800670c <HAL_GPIO_Init+0x334>)
 8006620:	689b      	ldr	r3, [r3, #8]
 8006622:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006624:	693b      	ldr	r3, [r7, #16]
 8006626:	43db      	mvns	r3, r3
 8006628:	69ba      	ldr	r2, [r7, #24]
 800662a:	4013      	ands	r3, r2
 800662c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	685b      	ldr	r3, [r3, #4]
 8006632:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006636:	2b00      	cmp	r3, #0
 8006638:	d003      	beq.n	8006642 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800663a:	69ba      	ldr	r2, [r7, #24]
 800663c:	693b      	ldr	r3, [r7, #16]
 800663e:	4313      	orrs	r3, r2
 8006640:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006642:	4a32      	ldr	r2, [pc, #200]	; (800670c <HAL_GPIO_Init+0x334>)
 8006644:	69bb      	ldr	r3, [r7, #24]
 8006646:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006648:	4b30      	ldr	r3, [pc, #192]	; (800670c <HAL_GPIO_Init+0x334>)
 800664a:	68db      	ldr	r3, [r3, #12]
 800664c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800664e:	693b      	ldr	r3, [r7, #16]
 8006650:	43db      	mvns	r3, r3
 8006652:	69ba      	ldr	r2, [r7, #24]
 8006654:	4013      	ands	r3, r2
 8006656:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	685b      	ldr	r3, [r3, #4]
 800665c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006660:	2b00      	cmp	r3, #0
 8006662:	d003      	beq.n	800666c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8006664:	69ba      	ldr	r2, [r7, #24]
 8006666:	693b      	ldr	r3, [r7, #16]
 8006668:	4313      	orrs	r3, r2
 800666a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800666c:	4a27      	ldr	r2, [pc, #156]	; (800670c <HAL_GPIO_Init+0x334>)
 800666e:	69bb      	ldr	r3, [r7, #24]
 8006670:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006672:	4b26      	ldr	r3, [pc, #152]	; (800670c <HAL_GPIO_Init+0x334>)
 8006674:	685b      	ldr	r3, [r3, #4]
 8006676:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006678:	693b      	ldr	r3, [r7, #16]
 800667a:	43db      	mvns	r3, r3
 800667c:	69ba      	ldr	r2, [r7, #24]
 800667e:	4013      	ands	r3, r2
 8006680:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	685b      	ldr	r3, [r3, #4]
 8006686:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800668a:	2b00      	cmp	r3, #0
 800668c:	d003      	beq.n	8006696 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800668e:	69ba      	ldr	r2, [r7, #24]
 8006690:	693b      	ldr	r3, [r7, #16]
 8006692:	4313      	orrs	r3, r2
 8006694:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006696:	4a1d      	ldr	r2, [pc, #116]	; (800670c <HAL_GPIO_Init+0x334>)
 8006698:	69bb      	ldr	r3, [r7, #24]
 800669a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800669c:	4b1b      	ldr	r3, [pc, #108]	; (800670c <HAL_GPIO_Init+0x334>)
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80066a2:	693b      	ldr	r3, [r7, #16]
 80066a4:	43db      	mvns	r3, r3
 80066a6:	69ba      	ldr	r2, [r7, #24]
 80066a8:	4013      	ands	r3, r2
 80066aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	685b      	ldr	r3, [r3, #4]
 80066b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d003      	beq.n	80066c0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80066b8:	69ba      	ldr	r2, [r7, #24]
 80066ba:	693b      	ldr	r3, [r7, #16]
 80066bc:	4313      	orrs	r3, r2
 80066be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80066c0:	4a12      	ldr	r2, [pc, #72]	; (800670c <HAL_GPIO_Init+0x334>)
 80066c2:	69bb      	ldr	r3, [r7, #24]
 80066c4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80066c6:	69fb      	ldr	r3, [r7, #28]
 80066c8:	3301      	adds	r3, #1
 80066ca:	61fb      	str	r3, [r7, #28]
 80066cc:	69fb      	ldr	r3, [r7, #28]
 80066ce:	2b0f      	cmp	r3, #15
 80066d0:	f67f ae90 	bls.w	80063f4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80066d4:	bf00      	nop
 80066d6:	bf00      	nop
 80066d8:	3724      	adds	r7, #36	; 0x24
 80066da:	46bd      	mov	sp, r7
 80066dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e0:	4770      	bx	lr
 80066e2:	bf00      	nop
 80066e4:	40023800 	.word	0x40023800
 80066e8:	40013800 	.word	0x40013800
 80066ec:	40020000 	.word	0x40020000
 80066f0:	40020400 	.word	0x40020400
 80066f4:	40020800 	.word	0x40020800
 80066f8:	40020c00 	.word	0x40020c00
 80066fc:	40021000 	.word	0x40021000
 8006700:	40021400 	.word	0x40021400
 8006704:	40021800 	.word	0x40021800
 8006708:	40021c00 	.word	0x40021c00
 800670c:	40013c00 	.word	0x40013c00

08006710 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006710:	b480      	push	{r7}
 8006712:	b083      	sub	sp, #12
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
 8006718:	460b      	mov	r3, r1
 800671a:	807b      	strh	r3, [r7, #2]
 800671c:	4613      	mov	r3, r2
 800671e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006720:	787b      	ldrb	r3, [r7, #1]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d003      	beq.n	800672e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006726:	887a      	ldrh	r2, [r7, #2]
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800672c:	e003      	b.n	8006736 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800672e:	887b      	ldrh	r3, [r7, #2]
 8006730:	041a      	lsls	r2, r3, #16
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	619a      	str	r2, [r3, #24]
}
 8006736:	bf00      	nop
 8006738:	370c      	adds	r7, #12
 800673a:	46bd      	mov	sp, r7
 800673c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006740:	4770      	bx	lr

08006742 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006742:	b480      	push	{r7}
 8006744:	b085      	sub	sp, #20
 8006746:	af00      	add	r7, sp, #0
 8006748:	6078      	str	r0, [r7, #4]
 800674a:	460b      	mov	r3, r1
 800674c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	695b      	ldr	r3, [r3, #20]
 8006752:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006754:	887a      	ldrh	r2, [r7, #2]
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	4013      	ands	r3, r2
 800675a:	041a      	lsls	r2, r3, #16
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	43d9      	mvns	r1, r3
 8006760:	887b      	ldrh	r3, [r7, #2]
 8006762:	400b      	ands	r3, r1
 8006764:	431a      	orrs	r2, r3
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	619a      	str	r2, [r3, #24]
}
 800676a:	bf00      	nop
 800676c:	3714      	adds	r7, #20
 800676e:	46bd      	mov	sp, r7
 8006770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006774:	4770      	bx	lr
	...

08006778 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006778:	b580      	push	{r7, lr}
 800677a:	b082      	sub	sp, #8
 800677c:	af00      	add	r7, sp, #0
 800677e:	4603      	mov	r3, r0
 8006780:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8006782:	4b08      	ldr	r3, [pc, #32]	; (80067a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006784:	695a      	ldr	r2, [r3, #20]
 8006786:	88fb      	ldrh	r3, [r7, #6]
 8006788:	4013      	ands	r3, r2
 800678a:	2b00      	cmp	r3, #0
 800678c:	d006      	beq.n	800679c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800678e:	4a05      	ldr	r2, [pc, #20]	; (80067a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006790:	88fb      	ldrh	r3, [r7, #6]
 8006792:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006794:	88fb      	ldrh	r3, [r7, #6]
 8006796:	4618      	mov	r0, r3
 8006798:	f7fb fd4e 	bl	8002238 <HAL_GPIO_EXTI_Callback>
  }
}
 800679c:	bf00      	nop
 800679e:	3708      	adds	r7, #8
 80067a0:	46bd      	mov	sp, r7
 80067a2:	bd80      	pop	{r7, pc}
 80067a4:	40013c00 	.word	0x40013c00

080067a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b084      	sub	sp, #16
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d101      	bne.n	80067ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80067b6:	2301      	movs	r3, #1
 80067b8:	e12b      	b.n	8006a12 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067c0:	b2db      	uxtb	r3, r3
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d106      	bne.n	80067d4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2200      	movs	r2, #0
 80067ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80067ce:	6878      	ldr	r0, [r7, #4]
 80067d0:	f7fd f92a 	bl	8003a28 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2224      	movs	r2, #36	; 0x24
 80067d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	681a      	ldr	r2, [r3, #0]
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f022 0201 	bic.w	r2, r2, #1
 80067ea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	681a      	ldr	r2, [r3, #0]
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80067fa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	681a      	ldr	r2, [r3, #0]
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800680a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800680c:	f001 fbfc 	bl	8008008 <HAL_RCC_GetPCLK1Freq>
 8006810:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	685b      	ldr	r3, [r3, #4]
 8006816:	4a81      	ldr	r2, [pc, #516]	; (8006a1c <HAL_I2C_Init+0x274>)
 8006818:	4293      	cmp	r3, r2
 800681a:	d807      	bhi.n	800682c <HAL_I2C_Init+0x84>
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	4a80      	ldr	r2, [pc, #512]	; (8006a20 <HAL_I2C_Init+0x278>)
 8006820:	4293      	cmp	r3, r2
 8006822:	bf94      	ite	ls
 8006824:	2301      	movls	r3, #1
 8006826:	2300      	movhi	r3, #0
 8006828:	b2db      	uxtb	r3, r3
 800682a:	e006      	b.n	800683a <HAL_I2C_Init+0x92>
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	4a7d      	ldr	r2, [pc, #500]	; (8006a24 <HAL_I2C_Init+0x27c>)
 8006830:	4293      	cmp	r3, r2
 8006832:	bf94      	ite	ls
 8006834:	2301      	movls	r3, #1
 8006836:	2300      	movhi	r3, #0
 8006838:	b2db      	uxtb	r3, r3
 800683a:	2b00      	cmp	r3, #0
 800683c:	d001      	beq.n	8006842 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800683e:	2301      	movs	r3, #1
 8006840:	e0e7      	b.n	8006a12 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	4a78      	ldr	r2, [pc, #480]	; (8006a28 <HAL_I2C_Init+0x280>)
 8006846:	fba2 2303 	umull	r2, r3, r2, r3
 800684a:	0c9b      	lsrs	r3, r3, #18
 800684c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	685b      	ldr	r3, [r3, #4]
 8006854:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	68ba      	ldr	r2, [r7, #8]
 800685e:	430a      	orrs	r2, r1
 8006860:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	6a1b      	ldr	r3, [r3, #32]
 8006868:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	685b      	ldr	r3, [r3, #4]
 8006870:	4a6a      	ldr	r2, [pc, #424]	; (8006a1c <HAL_I2C_Init+0x274>)
 8006872:	4293      	cmp	r3, r2
 8006874:	d802      	bhi.n	800687c <HAL_I2C_Init+0xd4>
 8006876:	68bb      	ldr	r3, [r7, #8]
 8006878:	3301      	adds	r3, #1
 800687a:	e009      	b.n	8006890 <HAL_I2C_Init+0xe8>
 800687c:	68bb      	ldr	r3, [r7, #8]
 800687e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006882:	fb02 f303 	mul.w	r3, r2, r3
 8006886:	4a69      	ldr	r2, [pc, #420]	; (8006a2c <HAL_I2C_Init+0x284>)
 8006888:	fba2 2303 	umull	r2, r3, r2, r3
 800688c:	099b      	lsrs	r3, r3, #6
 800688e:	3301      	adds	r3, #1
 8006890:	687a      	ldr	r2, [r7, #4]
 8006892:	6812      	ldr	r2, [r2, #0]
 8006894:	430b      	orrs	r3, r1
 8006896:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	69db      	ldr	r3, [r3, #28]
 800689e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80068a2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	685b      	ldr	r3, [r3, #4]
 80068aa:	495c      	ldr	r1, [pc, #368]	; (8006a1c <HAL_I2C_Init+0x274>)
 80068ac:	428b      	cmp	r3, r1
 80068ae:	d819      	bhi.n	80068e4 <HAL_I2C_Init+0x13c>
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	1e59      	subs	r1, r3, #1
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	685b      	ldr	r3, [r3, #4]
 80068b8:	005b      	lsls	r3, r3, #1
 80068ba:	fbb1 f3f3 	udiv	r3, r1, r3
 80068be:	1c59      	adds	r1, r3, #1
 80068c0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80068c4:	400b      	ands	r3, r1
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d00a      	beq.n	80068e0 <HAL_I2C_Init+0x138>
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	1e59      	subs	r1, r3, #1
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	685b      	ldr	r3, [r3, #4]
 80068d2:	005b      	lsls	r3, r3, #1
 80068d4:	fbb1 f3f3 	udiv	r3, r1, r3
 80068d8:	3301      	adds	r3, #1
 80068da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80068de:	e051      	b.n	8006984 <HAL_I2C_Init+0x1dc>
 80068e0:	2304      	movs	r3, #4
 80068e2:	e04f      	b.n	8006984 <HAL_I2C_Init+0x1dc>
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	689b      	ldr	r3, [r3, #8]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d111      	bne.n	8006910 <HAL_I2C_Init+0x168>
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	1e58      	subs	r0, r3, #1
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	6859      	ldr	r1, [r3, #4]
 80068f4:	460b      	mov	r3, r1
 80068f6:	005b      	lsls	r3, r3, #1
 80068f8:	440b      	add	r3, r1
 80068fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80068fe:	3301      	adds	r3, #1
 8006900:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006904:	2b00      	cmp	r3, #0
 8006906:	bf0c      	ite	eq
 8006908:	2301      	moveq	r3, #1
 800690a:	2300      	movne	r3, #0
 800690c:	b2db      	uxtb	r3, r3
 800690e:	e012      	b.n	8006936 <HAL_I2C_Init+0x18e>
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	1e58      	subs	r0, r3, #1
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	6859      	ldr	r1, [r3, #4]
 8006918:	460b      	mov	r3, r1
 800691a:	009b      	lsls	r3, r3, #2
 800691c:	440b      	add	r3, r1
 800691e:	0099      	lsls	r1, r3, #2
 8006920:	440b      	add	r3, r1
 8006922:	fbb0 f3f3 	udiv	r3, r0, r3
 8006926:	3301      	adds	r3, #1
 8006928:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800692c:	2b00      	cmp	r3, #0
 800692e:	bf0c      	ite	eq
 8006930:	2301      	moveq	r3, #1
 8006932:	2300      	movne	r3, #0
 8006934:	b2db      	uxtb	r3, r3
 8006936:	2b00      	cmp	r3, #0
 8006938:	d001      	beq.n	800693e <HAL_I2C_Init+0x196>
 800693a:	2301      	movs	r3, #1
 800693c:	e022      	b.n	8006984 <HAL_I2C_Init+0x1dc>
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	689b      	ldr	r3, [r3, #8]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d10e      	bne.n	8006964 <HAL_I2C_Init+0x1bc>
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	1e58      	subs	r0, r3, #1
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6859      	ldr	r1, [r3, #4]
 800694e:	460b      	mov	r3, r1
 8006950:	005b      	lsls	r3, r3, #1
 8006952:	440b      	add	r3, r1
 8006954:	fbb0 f3f3 	udiv	r3, r0, r3
 8006958:	3301      	adds	r3, #1
 800695a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800695e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006962:	e00f      	b.n	8006984 <HAL_I2C_Init+0x1dc>
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	1e58      	subs	r0, r3, #1
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	6859      	ldr	r1, [r3, #4]
 800696c:	460b      	mov	r3, r1
 800696e:	009b      	lsls	r3, r3, #2
 8006970:	440b      	add	r3, r1
 8006972:	0099      	lsls	r1, r3, #2
 8006974:	440b      	add	r3, r1
 8006976:	fbb0 f3f3 	udiv	r3, r0, r3
 800697a:	3301      	adds	r3, #1
 800697c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006980:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006984:	6879      	ldr	r1, [r7, #4]
 8006986:	6809      	ldr	r1, [r1, #0]
 8006988:	4313      	orrs	r3, r2
 800698a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	69da      	ldr	r2, [r3, #28]
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6a1b      	ldr	r3, [r3, #32]
 800699e:	431a      	orrs	r2, r3
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	430a      	orrs	r2, r1
 80069a6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	689b      	ldr	r3, [r3, #8]
 80069ae:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80069b2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80069b6:	687a      	ldr	r2, [r7, #4]
 80069b8:	6911      	ldr	r1, [r2, #16]
 80069ba:	687a      	ldr	r2, [r7, #4]
 80069bc:	68d2      	ldr	r2, [r2, #12]
 80069be:	4311      	orrs	r1, r2
 80069c0:	687a      	ldr	r2, [r7, #4]
 80069c2:	6812      	ldr	r2, [r2, #0]
 80069c4:	430b      	orrs	r3, r1
 80069c6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	68db      	ldr	r3, [r3, #12]
 80069ce:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	695a      	ldr	r2, [r3, #20]
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	699b      	ldr	r3, [r3, #24]
 80069da:	431a      	orrs	r2, r3
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	430a      	orrs	r2, r1
 80069e2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	681a      	ldr	r2, [r3, #0]
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f042 0201 	orr.w	r2, r2, #1
 80069f2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2200      	movs	r2, #0
 80069f8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2220      	movs	r2, #32
 80069fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	2200      	movs	r2, #0
 8006a06:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006a10:	2300      	movs	r3, #0
}
 8006a12:	4618      	mov	r0, r3
 8006a14:	3710      	adds	r7, #16
 8006a16:	46bd      	mov	sp, r7
 8006a18:	bd80      	pop	{r7, pc}
 8006a1a:	bf00      	nop
 8006a1c:	000186a0 	.word	0x000186a0
 8006a20:	001e847f 	.word	0x001e847f
 8006a24:	003d08ff 	.word	0x003d08ff
 8006a28:	431bde83 	.word	0x431bde83
 8006a2c:	10624dd3 	.word	0x10624dd3

08006a30 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b088      	sub	sp, #32
 8006a34:	af02      	add	r7, sp, #8
 8006a36:	60f8      	str	r0, [r7, #12]
 8006a38:	4608      	mov	r0, r1
 8006a3a:	4611      	mov	r1, r2
 8006a3c:	461a      	mov	r2, r3
 8006a3e:	4603      	mov	r3, r0
 8006a40:	817b      	strh	r3, [r7, #10]
 8006a42:	460b      	mov	r3, r1
 8006a44:	813b      	strh	r3, [r7, #8]
 8006a46:	4613      	mov	r3, r2
 8006a48:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006a4a:	f7fe fd1f 	bl	800548c <HAL_GetTick>
 8006a4e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a56:	b2db      	uxtb	r3, r3
 8006a58:	2b20      	cmp	r3, #32
 8006a5a:	f040 80d9 	bne.w	8006c10 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006a5e:	697b      	ldr	r3, [r7, #20]
 8006a60:	9300      	str	r3, [sp, #0]
 8006a62:	2319      	movs	r3, #25
 8006a64:	2201      	movs	r2, #1
 8006a66:	496d      	ldr	r1, [pc, #436]	; (8006c1c <HAL_I2C_Mem_Write+0x1ec>)
 8006a68:	68f8      	ldr	r0, [r7, #12]
 8006a6a:	f000 fc7f 	bl	800736c <I2C_WaitOnFlagUntilTimeout>
 8006a6e:	4603      	mov	r3, r0
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d001      	beq.n	8006a78 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8006a74:	2302      	movs	r3, #2
 8006a76:	e0cc      	b.n	8006c12 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a7e:	2b01      	cmp	r3, #1
 8006a80:	d101      	bne.n	8006a86 <HAL_I2C_Mem_Write+0x56>
 8006a82:	2302      	movs	r3, #2
 8006a84:	e0c5      	b.n	8006c12 <HAL_I2C_Mem_Write+0x1e2>
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	2201      	movs	r2, #1
 8006a8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f003 0301 	and.w	r3, r3, #1
 8006a98:	2b01      	cmp	r3, #1
 8006a9a:	d007      	beq.n	8006aac <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	681a      	ldr	r2, [r3, #0]
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f042 0201 	orr.w	r2, r2, #1
 8006aaa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	681a      	ldr	r2, [r3, #0]
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006aba:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	2221      	movs	r2, #33	; 0x21
 8006ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	2240      	movs	r2, #64	; 0x40
 8006ac8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	2200      	movs	r2, #0
 8006ad0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	6a3a      	ldr	r2, [r7, #32]
 8006ad6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006adc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ae2:	b29a      	uxth	r2, r3
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	4a4d      	ldr	r2, [pc, #308]	; (8006c20 <HAL_I2C_Mem_Write+0x1f0>)
 8006aec:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006aee:	88f8      	ldrh	r0, [r7, #6]
 8006af0:	893a      	ldrh	r2, [r7, #8]
 8006af2:	8979      	ldrh	r1, [r7, #10]
 8006af4:	697b      	ldr	r3, [r7, #20]
 8006af6:	9301      	str	r3, [sp, #4]
 8006af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006afa:	9300      	str	r3, [sp, #0]
 8006afc:	4603      	mov	r3, r0
 8006afe:	68f8      	ldr	r0, [r7, #12]
 8006b00:	f000 fab6 	bl	8007070 <I2C_RequestMemoryWrite>
 8006b04:	4603      	mov	r3, r0
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d052      	beq.n	8006bb0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8006b0a:	2301      	movs	r3, #1
 8006b0c:	e081      	b.n	8006c12 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006b0e:	697a      	ldr	r2, [r7, #20]
 8006b10:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006b12:	68f8      	ldr	r0, [r7, #12]
 8006b14:	f000 fd00 	bl	8007518 <I2C_WaitOnTXEFlagUntilTimeout>
 8006b18:	4603      	mov	r3, r0
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d00d      	beq.n	8006b3a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b22:	2b04      	cmp	r3, #4
 8006b24:	d107      	bne.n	8006b36 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	681a      	ldr	r2, [r3, #0]
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b34:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006b36:	2301      	movs	r3, #1
 8006b38:	e06b      	b.n	8006c12 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b3e:	781a      	ldrb	r2, [r3, #0]
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b4a:	1c5a      	adds	r2, r3, #1
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b54:	3b01      	subs	r3, #1
 8006b56:	b29a      	uxth	r2, r3
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b60:	b29b      	uxth	r3, r3
 8006b62:	3b01      	subs	r3, #1
 8006b64:	b29a      	uxth	r2, r3
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	695b      	ldr	r3, [r3, #20]
 8006b70:	f003 0304 	and.w	r3, r3, #4
 8006b74:	2b04      	cmp	r3, #4
 8006b76:	d11b      	bne.n	8006bb0 <HAL_I2C_Mem_Write+0x180>
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d017      	beq.n	8006bb0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b84:	781a      	ldrb	r2, [r3, #0]
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b90:	1c5a      	adds	r2, r3, #1
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b9a:	3b01      	subs	r3, #1
 8006b9c:	b29a      	uxth	r2, r3
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ba6:	b29b      	uxth	r3, r3
 8006ba8:	3b01      	subs	r3, #1
 8006baa:	b29a      	uxth	r2, r3
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d1aa      	bne.n	8006b0e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006bb8:	697a      	ldr	r2, [r7, #20]
 8006bba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006bbc:	68f8      	ldr	r0, [r7, #12]
 8006bbe:	f000 fcec 	bl	800759a <I2C_WaitOnBTFFlagUntilTimeout>
 8006bc2:	4603      	mov	r3, r0
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d00d      	beq.n	8006be4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bcc:	2b04      	cmp	r3, #4
 8006bce:	d107      	bne.n	8006be0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	681a      	ldr	r2, [r3, #0]
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006bde:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006be0:	2301      	movs	r3, #1
 8006be2:	e016      	b.n	8006c12 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	681a      	ldr	r2, [r3, #0]
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006bf2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	2220      	movs	r2, #32
 8006bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	2200      	movs	r2, #0
 8006c00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	2200      	movs	r2, #0
 8006c08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	e000      	b.n	8006c12 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006c10:	2302      	movs	r3, #2
  }
}
 8006c12:	4618      	mov	r0, r3
 8006c14:	3718      	adds	r7, #24
 8006c16:	46bd      	mov	sp, r7
 8006c18:	bd80      	pop	{r7, pc}
 8006c1a:	bf00      	nop
 8006c1c:	00100002 	.word	0x00100002
 8006c20:	ffff0000 	.word	0xffff0000

08006c24 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b08c      	sub	sp, #48	; 0x30
 8006c28:	af02      	add	r7, sp, #8
 8006c2a:	60f8      	str	r0, [r7, #12]
 8006c2c:	4608      	mov	r0, r1
 8006c2e:	4611      	mov	r1, r2
 8006c30:	461a      	mov	r2, r3
 8006c32:	4603      	mov	r3, r0
 8006c34:	817b      	strh	r3, [r7, #10]
 8006c36:	460b      	mov	r3, r1
 8006c38:	813b      	strh	r3, [r7, #8]
 8006c3a:	4613      	mov	r3, r2
 8006c3c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006c3e:	f7fe fc25 	bl	800548c <HAL_GetTick>
 8006c42:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c4a:	b2db      	uxtb	r3, r3
 8006c4c:	2b20      	cmp	r3, #32
 8006c4e:	f040 8208 	bne.w	8007062 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c54:	9300      	str	r3, [sp, #0]
 8006c56:	2319      	movs	r3, #25
 8006c58:	2201      	movs	r2, #1
 8006c5a:	497b      	ldr	r1, [pc, #492]	; (8006e48 <HAL_I2C_Mem_Read+0x224>)
 8006c5c:	68f8      	ldr	r0, [r7, #12]
 8006c5e:	f000 fb85 	bl	800736c <I2C_WaitOnFlagUntilTimeout>
 8006c62:	4603      	mov	r3, r0
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d001      	beq.n	8006c6c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8006c68:	2302      	movs	r3, #2
 8006c6a:	e1fb      	b.n	8007064 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c72:	2b01      	cmp	r3, #1
 8006c74:	d101      	bne.n	8006c7a <HAL_I2C_Mem_Read+0x56>
 8006c76:	2302      	movs	r3, #2
 8006c78:	e1f4      	b.n	8007064 <HAL_I2C_Mem_Read+0x440>
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	2201      	movs	r2, #1
 8006c7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f003 0301 	and.w	r3, r3, #1
 8006c8c:	2b01      	cmp	r3, #1
 8006c8e:	d007      	beq.n	8006ca0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	681a      	ldr	r2, [r3, #0]
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f042 0201 	orr.w	r2, r2, #1
 8006c9e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	681a      	ldr	r2, [r3, #0]
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006cae:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	2222      	movs	r2, #34	; 0x22
 8006cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	2240      	movs	r2, #64	; 0x40
 8006cbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006cca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8006cd0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cd6:	b29a      	uxth	r2, r3
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	4a5b      	ldr	r2, [pc, #364]	; (8006e4c <HAL_I2C_Mem_Read+0x228>)
 8006ce0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006ce2:	88f8      	ldrh	r0, [r7, #6]
 8006ce4:	893a      	ldrh	r2, [r7, #8]
 8006ce6:	8979      	ldrh	r1, [r7, #10]
 8006ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cea:	9301      	str	r3, [sp, #4]
 8006cec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cee:	9300      	str	r3, [sp, #0]
 8006cf0:	4603      	mov	r3, r0
 8006cf2:	68f8      	ldr	r0, [r7, #12]
 8006cf4:	f000 fa52 	bl	800719c <I2C_RequestMemoryRead>
 8006cf8:	4603      	mov	r3, r0
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d001      	beq.n	8006d02 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8006cfe:	2301      	movs	r3, #1
 8006d00:	e1b0      	b.n	8007064 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d113      	bne.n	8006d32 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	623b      	str	r3, [r7, #32]
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	695b      	ldr	r3, [r3, #20]
 8006d14:	623b      	str	r3, [r7, #32]
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	699b      	ldr	r3, [r3, #24]
 8006d1c:	623b      	str	r3, [r7, #32]
 8006d1e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	681a      	ldr	r2, [r3, #0]
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d2e:	601a      	str	r2, [r3, #0]
 8006d30:	e184      	b.n	800703c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d36:	2b01      	cmp	r3, #1
 8006d38:	d11b      	bne.n	8006d72 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	681a      	ldr	r2, [r3, #0]
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d48:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	61fb      	str	r3, [r7, #28]
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	695b      	ldr	r3, [r3, #20]
 8006d54:	61fb      	str	r3, [r7, #28]
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	699b      	ldr	r3, [r3, #24]
 8006d5c:	61fb      	str	r3, [r7, #28]
 8006d5e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	681a      	ldr	r2, [r3, #0]
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d6e:	601a      	str	r2, [r3, #0]
 8006d70:	e164      	b.n	800703c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d76:	2b02      	cmp	r3, #2
 8006d78:	d11b      	bne.n	8006db2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	681a      	ldr	r2, [r3, #0]
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d88:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	681a      	ldr	r2, [r3, #0]
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006d98:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	61bb      	str	r3, [r7, #24]
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	695b      	ldr	r3, [r3, #20]
 8006da4:	61bb      	str	r3, [r7, #24]
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	699b      	ldr	r3, [r3, #24]
 8006dac:	61bb      	str	r3, [r7, #24]
 8006dae:	69bb      	ldr	r3, [r7, #24]
 8006db0:	e144      	b.n	800703c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006db2:	2300      	movs	r3, #0
 8006db4:	617b      	str	r3, [r7, #20]
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	695b      	ldr	r3, [r3, #20]
 8006dbc:	617b      	str	r3, [r7, #20]
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	699b      	ldr	r3, [r3, #24]
 8006dc4:	617b      	str	r3, [r7, #20]
 8006dc6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006dc8:	e138      	b.n	800703c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006dce:	2b03      	cmp	r3, #3
 8006dd0:	f200 80f1 	bhi.w	8006fb6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006dd8:	2b01      	cmp	r3, #1
 8006dda:	d123      	bne.n	8006e24 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006ddc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006dde:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006de0:	68f8      	ldr	r0, [r7, #12]
 8006de2:	f000 fc1b 	bl	800761c <I2C_WaitOnRXNEFlagUntilTimeout>
 8006de6:	4603      	mov	r3, r0
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d001      	beq.n	8006df0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006dec:	2301      	movs	r3, #1
 8006dee:	e139      	b.n	8007064 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	691a      	ldr	r2, [r3, #16]
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dfa:	b2d2      	uxtb	r2, r2
 8006dfc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e02:	1c5a      	adds	r2, r3, #1
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e0c:	3b01      	subs	r3, #1
 8006e0e:	b29a      	uxth	r2, r3
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e18:	b29b      	uxth	r3, r3
 8006e1a:	3b01      	subs	r3, #1
 8006e1c:	b29a      	uxth	r2, r3
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006e22:	e10b      	b.n	800703c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e28:	2b02      	cmp	r3, #2
 8006e2a:	d14e      	bne.n	8006eca <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e2e:	9300      	str	r3, [sp, #0]
 8006e30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e32:	2200      	movs	r2, #0
 8006e34:	4906      	ldr	r1, [pc, #24]	; (8006e50 <HAL_I2C_Mem_Read+0x22c>)
 8006e36:	68f8      	ldr	r0, [r7, #12]
 8006e38:	f000 fa98 	bl	800736c <I2C_WaitOnFlagUntilTimeout>
 8006e3c:	4603      	mov	r3, r0
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d008      	beq.n	8006e54 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8006e42:	2301      	movs	r3, #1
 8006e44:	e10e      	b.n	8007064 <HAL_I2C_Mem_Read+0x440>
 8006e46:	bf00      	nop
 8006e48:	00100002 	.word	0x00100002
 8006e4c:	ffff0000 	.word	0xffff0000
 8006e50:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	681a      	ldr	r2, [r3, #0]
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e62:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	691a      	ldr	r2, [r3, #16]
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e6e:	b2d2      	uxtb	r2, r2
 8006e70:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e76:	1c5a      	adds	r2, r3, #1
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e80:	3b01      	subs	r3, #1
 8006e82:	b29a      	uxth	r2, r3
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e8c:	b29b      	uxth	r3, r3
 8006e8e:	3b01      	subs	r3, #1
 8006e90:	b29a      	uxth	r2, r3
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	691a      	ldr	r2, [r3, #16]
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ea0:	b2d2      	uxtb	r2, r2
 8006ea2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ea8:	1c5a      	adds	r2, r3, #1
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006eb2:	3b01      	subs	r3, #1
 8006eb4:	b29a      	uxth	r2, r3
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ebe:	b29b      	uxth	r3, r3
 8006ec0:	3b01      	subs	r3, #1
 8006ec2:	b29a      	uxth	r2, r3
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006ec8:	e0b8      	b.n	800703c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ecc:	9300      	str	r3, [sp, #0]
 8006ece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	4966      	ldr	r1, [pc, #408]	; (800706c <HAL_I2C_Mem_Read+0x448>)
 8006ed4:	68f8      	ldr	r0, [r7, #12]
 8006ed6:	f000 fa49 	bl	800736c <I2C_WaitOnFlagUntilTimeout>
 8006eda:	4603      	mov	r3, r0
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d001      	beq.n	8006ee4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006ee0:	2301      	movs	r3, #1
 8006ee2:	e0bf      	b.n	8007064 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	681a      	ldr	r2, [r3, #0]
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ef2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	691a      	ldr	r2, [r3, #16]
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006efe:	b2d2      	uxtb	r2, r2
 8006f00:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f06:	1c5a      	adds	r2, r3, #1
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f10:	3b01      	subs	r3, #1
 8006f12:	b29a      	uxth	r2, r3
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f1c:	b29b      	uxth	r3, r3
 8006f1e:	3b01      	subs	r3, #1
 8006f20:	b29a      	uxth	r2, r3
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f28:	9300      	str	r3, [sp, #0]
 8006f2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	494f      	ldr	r1, [pc, #316]	; (800706c <HAL_I2C_Mem_Read+0x448>)
 8006f30:	68f8      	ldr	r0, [r7, #12]
 8006f32:	f000 fa1b 	bl	800736c <I2C_WaitOnFlagUntilTimeout>
 8006f36:	4603      	mov	r3, r0
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d001      	beq.n	8006f40 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006f3c:	2301      	movs	r3, #1
 8006f3e:	e091      	b.n	8007064 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	681a      	ldr	r2, [r3, #0]
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006f4e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	691a      	ldr	r2, [r3, #16]
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f5a:	b2d2      	uxtb	r2, r2
 8006f5c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f62:	1c5a      	adds	r2, r3, #1
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f6c:	3b01      	subs	r3, #1
 8006f6e:	b29a      	uxth	r2, r3
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f78:	b29b      	uxth	r3, r3
 8006f7a:	3b01      	subs	r3, #1
 8006f7c:	b29a      	uxth	r2, r3
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	691a      	ldr	r2, [r3, #16]
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f8c:	b2d2      	uxtb	r2, r2
 8006f8e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f94:	1c5a      	adds	r2, r3, #1
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f9e:	3b01      	subs	r3, #1
 8006fa0:	b29a      	uxth	r2, r3
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006faa:	b29b      	uxth	r3, r3
 8006fac:	3b01      	subs	r3, #1
 8006fae:	b29a      	uxth	r2, r3
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006fb4:	e042      	b.n	800703c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006fb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006fb8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006fba:	68f8      	ldr	r0, [r7, #12]
 8006fbc:	f000 fb2e 	bl	800761c <I2C_WaitOnRXNEFlagUntilTimeout>
 8006fc0:	4603      	mov	r3, r0
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d001      	beq.n	8006fca <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8006fc6:	2301      	movs	r3, #1
 8006fc8:	e04c      	b.n	8007064 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	691a      	ldr	r2, [r3, #16]
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fd4:	b2d2      	uxtb	r2, r2
 8006fd6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fdc:	1c5a      	adds	r2, r3, #1
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006fe6:	3b01      	subs	r3, #1
 8006fe8:	b29a      	uxth	r2, r3
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ff2:	b29b      	uxth	r3, r3
 8006ff4:	3b01      	subs	r3, #1
 8006ff6:	b29a      	uxth	r2, r3
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	695b      	ldr	r3, [r3, #20]
 8007002:	f003 0304 	and.w	r3, r3, #4
 8007006:	2b04      	cmp	r3, #4
 8007008:	d118      	bne.n	800703c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	691a      	ldr	r2, [r3, #16]
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007014:	b2d2      	uxtb	r2, r2
 8007016:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800701c:	1c5a      	adds	r2, r3, #1
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007026:	3b01      	subs	r3, #1
 8007028:	b29a      	uxth	r2, r3
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007032:	b29b      	uxth	r3, r3
 8007034:	3b01      	subs	r3, #1
 8007036:	b29a      	uxth	r2, r3
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007040:	2b00      	cmp	r3, #0
 8007042:	f47f aec2 	bne.w	8006dca <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	2220      	movs	r2, #32
 800704a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	2200      	movs	r2, #0
 8007052:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	2200      	movs	r2, #0
 800705a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800705e:	2300      	movs	r3, #0
 8007060:	e000      	b.n	8007064 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8007062:	2302      	movs	r3, #2
  }
}
 8007064:	4618      	mov	r0, r3
 8007066:	3728      	adds	r7, #40	; 0x28
 8007068:	46bd      	mov	sp, r7
 800706a:	bd80      	pop	{r7, pc}
 800706c:	00010004 	.word	0x00010004

08007070 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007070:	b580      	push	{r7, lr}
 8007072:	b088      	sub	sp, #32
 8007074:	af02      	add	r7, sp, #8
 8007076:	60f8      	str	r0, [r7, #12]
 8007078:	4608      	mov	r0, r1
 800707a:	4611      	mov	r1, r2
 800707c:	461a      	mov	r2, r3
 800707e:	4603      	mov	r3, r0
 8007080:	817b      	strh	r3, [r7, #10]
 8007082:	460b      	mov	r3, r1
 8007084:	813b      	strh	r3, [r7, #8]
 8007086:	4613      	mov	r3, r2
 8007088:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	681a      	ldr	r2, [r3, #0]
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007098:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800709a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800709c:	9300      	str	r3, [sp, #0]
 800709e:	6a3b      	ldr	r3, [r7, #32]
 80070a0:	2200      	movs	r2, #0
 80070a2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80070a6:	68f8      	ldr	r0, [r7, #12]
 80070a8:	f000 f960 	bl	800736c <I2C_WaitOnFlagUntilTimeout>
 80070ac:	4603      	mov	r3, r0
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d00d      	beq.n	80070ce <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070c0:	d103      	bne.n	80070ca <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80070c8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80070ca:	2303      	movs	r3, #3
 80070cc:	e05f      	b.n	800718e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80070ce:	897b      	ldrh	r3, [r7, #10]
 80070d0:	b2db      	uxtb	r3, r3
 80070d2:	461a      	mov	r2, r3
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80070dc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80070de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070e0:	6a3a      	ldr	r2, [r7, #32]
 80070e2:	492d      	ldr	r1, [pc, #180]	; (8007198 <I2C_RequestMemoryWrite+0x128>)
 80070e4:	68f8      	ldr	r0, [r7, #12]
 80070e6:	f000 f998 	bl	800741a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80070ea:	4603      	mov	r3, r0
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d001      	beq.n	80070f4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80070f0:	2301      	movs	r3, #1
 80070f2:	e04c      	b.n	800718e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80070f4:	2300      	movs	r3, #0
 80070f6:	617b      	str	r3, [r7, #20]
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	695b      	ldr	r3, [r3, #20]
 80070fe:	617b      	str	r3, [r7, #20]
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	699b      	ldr	r3, [r3, #24]
 8007106:	617b      	str	r3, [r7, #20]
 8007108:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800710a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800710c:	6a39      	ldr	r1, [r7, #32]
 800710e:	68f8      	ldr	r0, [r7, #12]
 8007110:	f000 fa02 	bl	8007518 <I2C_WaitOnTXEFlagUntilTimeout>
 8007114:	4603      	mov	r3, r0
 8007116:	2b00      	cmp	r3, #0
 8007118:	d00d      	beq.n	8007136 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800711e:	2b04      	cmp	r3, #4
 8007120:	d107      	bne.n	8007132 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	681a      	ldr	r2, [r3, #0]
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007130:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007132:	2301      	movs	r3, #1
 8007134:	e02b      	b.n	800718e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007136:	88fb      	ldrh	r3, [r7, #6]
 8007138:	2b01      	cmp	r3, #1
 800713a:	d105      	bne.n	8007148 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800713c:	893b      	ldrh	r3, [r7, #8]
 800713e:	b2da      	uxtb	r2, r3
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	611a      	str	r2, [r3, #16]
 8007146:	e021      	b.n	800718c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007148:	893b      	ldrh	r3, [r7, #8]
 800714a:	0a1b      	lsrs	r3, r3, #8
 800714c:	b29b      	uxth	r3, r3
 800714e:	b2da      	uxtb	r2, r3
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007156:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007158:	6a39      	ldr	r1, [r7, #32]
 800715a:	68f8      	ldr	r0, [r7, #12]
 800715c:	f000 f9dc 	bl	8007518 <I2C_WaitOnTXEFlagUntilTimeout>
 8007160:	4603      	mov	r3, r0
 8007162:	2b00      	cmp	r3, #0
 8007164:	d00d      	beq.n	8007182 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800716a:	2b04      	cmp	r3, #4
 800716c:	d107      	bne.n	800717e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	681a      	ldr	r2, [r3, #0]
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800717c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800717e:	2301      	movs	r3, #1
 8007180:	e005      	b.n	800718e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007182:	893b      	ldrh	r3, [r7, #8]
 8007184:	b2da      	uxtb	r2, r3
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800718c:	2300      	movs	r3, #0
}
 800718e:	4618      	mov	r0, r3
 8007190:	3718      	adds	r7, #24
 8007192:	46bd      	mov	sp, r7
 8007194:	bd80      	pop	{r7, pc}
 8007196:	bf00      	nop
 8007198:	00010002 	.word	0x00010002

0800719c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800719c:	b580      	push	{r7, lr}
 800719e:	b088      	sub	sp, #32
 80071a0:	af02      	add	r7, sp, #8
 80071a2:	60f8      	str	r0, [r7, #12]
 80071a4:	4608      	mov	r0, r1
 80071a6:	4611      	mov	r1, r2
 80071a8:	461a      	mov	r2, r3
 80071aa:	4603      	mov	r3, r0
 80071ac:	817b      	strh	r3, [r7, #10]
 80071ae:	460b      	mov	r3, r1
 80071b0:	813b      	strh	r3, [r7, #8]
 80071b2:	4613      	mov	r3, r2
 80071b4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	681a      	ldr	r2, [r3, #0]
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80071c4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	681a      	ldr	r2, [r3, #0]
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80071d4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80071d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071d8:	9300      	str	r3, [sp, #0]
 80071da:	6a3b      	ldr	r3, [r7, #32]
 80071dc:	2200      	movs	r2, #0
 80071de:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80071e2:	68f8      	ldr	r0, [r7, #12]
 80071e4:	f000 f8c2 	bl	800736c <I2C_WaitOnFlagUntilTimeout>
 80071e8:	4603      	mov	r3, r0
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d00d      	beq.n	800720a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80071fc:	d103      	bne.n	8007206 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007204:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007206:	2303      	movs	r3, #3
 8007208:	e0aa      	b.n	8007360 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800720a:	897b      	ldrh	r3, [r7, #10]
 800720c:	b2db      	uxtb	r3, r3
 800720e:	461a      	mov	r2, r3
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007218:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800721a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800721c:	6a3a      	ldr	r2, [r7, #32]
 800721e:	4952      	ldr	r1, [pc, #328]	; (8007368 <I2C_RequestMemoryRead+0x1cc>)
 8007220:	68f8      	ldr	r0, [r7, #12]
 8007222:	f000 f8fa 	bl	800741a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007226:	4603      	mov	r3, r0
 8007228:	2b00      	cmp	r3, #0
 800722a:	d001      	beq.n	8007230 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800722c:	2301      	movs	r3, #1
 800722e:	e097      	b.n	8007360 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007230:	2300      	movs	r3, #0
 8007232:	617b      	str	r3, [r7, #20]
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	695b      	ldr	r3, [r3, #20]
 800723a:	617b      	str	r3, [r7, #20]
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	699b      	ldr	r3, [r3, #24]
 8007242:	617b      	str	r3, [r7, #20]
 8007244:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007246:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007248:	6a39      	ldr	r1, [r7, #32]
 800724a:	68f8      	ldr	r0, [r7, #12]
 800724c:	f000 f964 	bl	8007518 <I2C_WaitOnTXEFlagUntilTimeout>
 8007250:	4603      	mov	r3, r0
 8007252:	2b00      	cmp	r3, #0
 8007254:	d00d      	beq.n	8007272 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800725a:	2b04      	cmp	r3, #4
 800725c:	d107      	bne.n	800726e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	681a      	ldr	r2, [r3, #0]
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800726c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800726e:	2301      	movs	r3, #1
 8007270:	e076      	b.n	8007360 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007272:	88fb      	ldrh	r3, [r7, #6]
 8007274:	2b01      	cmp	r3, #1
 8007276:	d105      	bne.n	8007284 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007278:	893b      	ldrh	r3, [r7, #8]
 800727a:	b2da      	uxtb	r2, r3
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	611a      	str	r2, [r3, #16]
 8007282:	e021      	b.n	80072c8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007284:	893b      	ldrh	r3, [r7, #8]
 8007286:	0a1b      	lsrs	r3, r3, #8
 8007288:	b29b      	uxth	r3, r3
 800728a:	b2da      	uxtb	r2, r3
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007292:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007294:	6a39      	ldr	r1, [r7, #32]
 8007296:	68f8      	ldr	r0, [r7, #12]
 8007298:	f000 f93e 	bl	8007518 <I2C_WaitOnTXEFlagUntilTimeout>
 800729c:	4603      	mov	r3, r0
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d00d      	beq.n	80072be <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072a6:	2b04      	cmp	r3, #4
 80072a8:	d107      	bne.n	80072ba <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	681a      	ldr	r2, [r3, #0]
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80072b8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80072ba:	2301      	movs	r3, #1
 80072bc:	e050      	b.n	8007360 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80072be:	893b      	ldrh	r3, [r7, #8]
 80072c0:	b2da      	uxtb	r2, r3
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80072c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072ca:	6a39      	ldr	r1, [r7, #32]
 80072cc:	68f8      	ldr	r0, [r7, #12]
 80072ce:	f000 f923 	bl	8007518 <I2C_WaitOnTXEFlagUntilTimeout>
 80072d2:	4603      	mov	r3, r0
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d00d      	beq.n	80072f4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072dc:	2b04      	cmp	r3, #4
 80072de:	d107      	bne.n	80072f0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	681a      	ldr	r2, [r3, #0]
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80072ee:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80072f0:	2301      	movs	r3, #1
 80072f2:	e035      	b.n	8007360 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	681a      	ldr	r2, [r3, #0]
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007302:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007306:	9300      	str	r3, [sp, #0]
 8007308:	6a3b      	ldr	r3, [r7, #32]
 800730a:	2200      	movs	r2, #0
 800730c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007310:	68f8      	ldr	r0, [r7, #12]
 8007312:	f000 f82b 	bl	800736c <I2C_WaitOnFlagUntilTimeout>
 8007316:	4603      	mov	r3, r0
 8007318:	2b00      	cmp	r3, #0
 800731a:	d00d      	beq.n	8007338 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007326:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800732a:	d103      	bne.n	8007334 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007332:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007334:	2303      	movs	r3, #3
 8007336:	e013      	b.n	8007360 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007338:	897b      	ldrh	r3, [r7, #10]
 800733a:	b2db      	uxtb	r3, r3
 800733c:	f043 0301 	orr.w	r3, r3, #1
 8007340:	b2da      	uxtb	r2, r3
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800734a:	6a3a      	ldr	r2, [r7, #32]
 800734c:	4906      	ldr	r1, [pc, #24]	; (8007368 <I2C_RequestMemoryRead+0x1cc>)
 800734e:	68f8      	ldr	r0, [r7, #12]
 8007350:	f000 f863 	bl	800741a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007354:	4603      	mov	r3, r0
 8007356:	2b00      	cmp	r3, #0
 8007358:	d001      	beq.n	800735e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800735a:	2301      	movs	r3, #1
 800735c:	e000      	b.n	8007360 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800735e:	2300      	movs	r3, #0
}
 8007360:	4618      	mov	r0, r3
 8007362:	3718      	adds	r7, #24
 8007364:	46bd      	mov	sp, r7
 8007366:	bd80      	pop	{r7, pc}
 8007368:	00010002 	.word	0x00010002

0800736c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800736c:	b580      	push	{r7, lr}
 800736e:	b084      	sub	sp, #16
 8007370:	af00      	add	r7, sp, #0
 8007372:	60f8      	str	r0, [r7, #12]
 8007374:	60b9      	str	r1, [r7, #8]
 8007376:	603b      	str	r3, [r7, #0]
 8007378:	4613      	mov	r3, r2
 800737a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800737c:	e025      	b.n	80073ca <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007384:	d021      	beq.n	80073ca <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007386:	f7fe f881 	bl	800548c <HAL_GetTick>
 800738a:	4602      	mov	r2, r0
 800738c:	69bb      	ldr	r3, [r7, #24]
 800738e:	1ad3      	subs	r3, r2, r3
 8007390:	683a      	ldr	r2, [r7, #0]
 8007392:	429a      	cmp	r2, r3
 8007394:	d302      	bcc.n	800739c <I2C_WaitOnFlagUntilTimeout+0x30>
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d116      	bne.n	80073ca <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	2200      	movs	r2, #0
 80073a0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	2220      	movs	r2, #32
 80073a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	2200      	movs	r2, #0
 80073ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073b6:	f043 0220 	orr.w	r2, r3, #32
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	2200      	movs	r2, #0
 80073c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80073c6:	2301      	movs	r3, #1
 80073c8:	e023      	b.n	8007412 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80073ca:	68bb      	ldr	r3, [r7, #8]
 80073cc:	0c1b      	lsrs	r3, r3, #16
 80073ce:	b2db      	uxtb	r3, r3
 80073d0:	2b01      	cmp	r3, #1
 80073d2:	d10d      	bne.n	80073f0 <I2C_WaitOnFlagUntilTimeout+0x84>
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	695b      	ldr	r3, [r3, #20]
 80073da:	43da      	mvns	r2, r3
 80073dc:	68bb      	ldr	r3, [r7, #8]
 80073de:	4013      	ands	r3, r2
 80073e0:	b29b      	uxth	r3, r3
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	bf0c      	ite	eq
 80073e6:	2301      	moveq	r3, #1
 80073e8:	2300      	movne	r3, #0
 80073ea:	b2db      	uxtb	r3, r3
 80073ec:	461a      	mov	r2, r3
 80073ee:	e00c      	b.n	800740a <I2C_WaitOnFlagUntilTimeout+0x9e>
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	699b      	ldr	r3, [r3, #24]
 80073f6:	43da      	mvns	r2, r3
 80073f8:	68bb      	ldr	r3, [r7, #8]
 80073fa:	4013      	ands	r3, r2
 80073fc:	b29b      	uxth	r3, r3
 80073fe:	2b00      	cmp	r3, #0
 8007400:	bf0c      	ite	eq
 8007402:	2301      	moveq	r3, #1
 8007404:	2300      	movne	r3, #0
 8007406:	b2db      	uxtb	r3, r3
 8007408:	461a      	mov	r2, r3
 800740a:	79fb      	ldrb	r3, [r7, #7]
 800740c:	429a      	cmp	r2, r3
 800740e:	d0b6      	beq.n	800737e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007410:	2300      	movs	r3, #0
}
 8007412:	4618      	mov	r0, r3
 8007414:	3710      	adds	r7, #16
 8007416:	46bd      	mov	sp, r7
 8007418:	bd80      	pop	{r7, pc}

0800741a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800741a:	b580      	push	{r7, lr}
 800741c:	b084      	sub	sp, #16
 800741e:	af00      	add	r7, sp, #0
 8007420:	60f8      	str	r0, [r7, #12]
 8007422:	60b9      	str	r1, [r7, #8]
 8007424:	607a      	str	r2, [r7, #4]
 8007426:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007428:	e051      	b.n	80074ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	695b      	ldr	r3, [r3, #20]
 8007430:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007434:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007438:	d123      	bne.n	8007482 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	681a      	ldr	r2, [r3, #0]
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007448:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007452:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	2200      	movs	r2, #0
 8007458:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	2220      	movs	r2, #32
 800745e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	2200      	movs	r2, #0
 8007466:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800746e:	f043 0204 	orr.w	r2, r3, #4
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	2200      	movs	r2, #0
 800747a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800747e:	2301      	movs	r3, #1
 8007480:	e046      	b.n	8007510 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007488:	d021      	beq.n	80074ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800748a:	f7fd ffff 	bl	800548c <HAL_GetTick>
 800748e:	4602      	mov	r2, r0
 8007490:	683b      	ldr	r3, [r7, #0]
 8007492:	1ad3      	subs	r3, r2, r3
 8007494:	687a      	ldr	r2, [r7, #4]
 8007496:	429a      	cmp	r2, r3
 8007498:	d302      	bcc.n	80074a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d116      	bne.n	80074ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	2200      	movs	r2, #0
 80074a4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	2220      	movs	r2, #32
 80074aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	2200      	movs	r2, #0
 80074b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074ba:	f043 0220 	orr.w	r2, r3, #32
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	2200      	movs	r2, #0
 80074c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80074ca:	2301      	movs	r3, #1
 80074cc:	e020      	b.n	8007510 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80074ce:	68bb      	ldr	r3, [r7, #8]
 80074d0:	0c1b      	lsrs	r3, r3, #16
 80074d2:	b2db      	uxtb	r3, r3
 80074d4:	2b01      	cmp	r3, #1
 80074d6:	d10c      	bne.n	80074f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	695b      	ldr	r3, [r3, #20]
 80074de:	43da      	mvns	r2, r3
 80074e0:	68bb      	ldr	r3, [r7, #8]
 80074e2:	4013      	ands	r3, r2
 80074e4:	b29b      	uxth	r3, r3
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	bf14      	ite	ne
 80074ea:	2301      	movne	r3, #1
 80074ec:	2300      	moveq	r3, #0
 80074ee:	b2db      	uxtb	r3, r3
 80074f0:	e00b      	b.n	800750a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	699b      	ldr	r3, [r3, #24]
 80074f8:	43da      	mvns	r2, r3
 80074fa:	68bb      	ldr	r3, [r7, #8]
 80074fc:	4013      	ands	r3, r2
 80074fe:	b29b      	uxth	r3, r3
 8007500:	2b00      	cmp	r3, #0
 8007502:	bf14      	ite	ne
 8007504:	2301      	movne	r3, #1
 8007506:	2300      	moveq	r3, #0
 8007508:	b2db      	uxtb	r3, r3
 800750a:	2b00      	cmp	r3, #0
 800750c:	d18d      	bne.n	800742a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800750e:	2300      	movs	r3, #0
}
 8007510:	4618      	mov	r0, r3
 8007512:	3710      	adds	r7, #16
 8007514:	46bd      	mov	sp, r7
 8007516:	bd80      	pop	{r7, pc}

08007518 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007518:	b580      	push	{r7, lr}
 800751a:	b084      	sub	sp, #16
 800751c:	af00      	add	r7, sp, #0
 800751e:	60f8      	str	r0, [r7, #12]
 8007520:	60b9      	str	r1, [r7, #8]
 8007522:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007524:	e02d      	b.n	8007582 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007526:	68f8      	ldr	r0, [r7, #12]
 8007528:	f000 f8ce 	bl	80076c8 <I2C_IsAcknowledgeFailed>
 800752c:	4603      	mov	r3, r0
 800752e:	2b00      	cmp	r3, #0
 8007530:	d001      	beq.n	8007536 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007532:	2301      	movs	r3, #1
 8007534:	e02d      	b.n	8007592 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007536:	68bb      	ldr	r3, [r7, #8]
 8007538:	f1b3 3fff 	cmp.w	r3, #4294967295
 800753c:	d021      	beq.n	8007582 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800753e:	f7fd ffa5 	bl	800548c <HAL_GetTick>
 8007542:	4602      	mov	r2, r0
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	1ad3      	subs	r3, r2, r3
 8007548:	68ba      	ldr	r2, [r7, #8]
 800754a:	429a      	cmp	r2, r3
 800754c:	d302      	bcc.n	8007554 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800754e:	68bb      	ldr	r3, [r7, #8]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d116      	bne.n	8007582 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	2200      	movs	r2, #0
 8007558:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	2220      	movs	r2, #32
 800755e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	2200      	movs	r2, #0
 8007566:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800756e:	f043 0220 	orr.w	r2, r3, #32
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	2200      	movs	r2, #0
 800757a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800757e:	2301      	movs	r3, #1
 8007580:	e007      	b.n	8007592 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	695b      	ldr	r3, [r3, #20]
 8007588:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800758c:	2b80      	cmp	r3, #128	; 0x80
 800758e:	d1ca      	bne.n	8007526 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007590:	2300      	movs	r3, #0
}
 8007592:	4618      	mov	r0, r3
 8007594:	3710      	adds	r7, #16
 8007596:	46bd      	mov	sp, r7
 8007598:	bd80      	pop	{r7, pc}

0800759a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800759a:	b580      	push	{r7, lr}
 800759c:	b084      	sub	sp, #16
 800759e:	af00      	add	r7, sp, #0
 80075a0:	60f8      	str	r0, [r7, #12]
 80075a2:	60b9      	str	r1, [r7, #8]
 80075a4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80075a6:	e02d      	b.n	8007604 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80075a8:	68f8      	ldr	r0, [r7, #12]
 80075aa:	f000 f88d 	bl	80076c8 <I2C_IsAcknowledgeFailed>
 80075ae:	4603      	mov	r3, r0
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d001      	beq.n	80075b8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80075b4:	2301      	movs	r3, #1
 80075b6:	e02d      	b.n	8007614 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80075b8:	68bb      	ldr	r3, [r7, #8]
 80075ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075be:	d021      	beq.n	8007604 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80075c0:	f7fd ff64 	bl	800548c <HAL_GetTick>
 80075c4:	4602      	mov	r2, r0
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	1ad3      	subs	r3, r2, r3
 80075ca:	68ba      	ldr	r2, [r7, #8]
 80075cc:	429a      	cmp	r2, r3
 80075ce:	d302      	bcc.n	80075d6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80075d0:	68bb      	ldr	r3, [r7, #8]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d116      	bne.n	8007604 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	2200      	movs	r2, #0
 80075da:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	2220      	movs	r2, #32
 80075e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	2200      	movs	r2, #0
 80075e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075f0:	f043 0220 	orr.w	r2, r3, #32
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	2200      	movs	r2, #0
 80075fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007600:	2301      	movs	r3, #1
 8007602:	e007      	b.n	8007614 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	695b      	ldr	r3, [r3, #20]
 800760a:	f003 0304 	and.w	r3, r3, #4
 800760e:	2b04      	cmp	r3, #4
 8007610:	d1ca      	bne.n	80075a8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007612:	2300      	movs	r3, #0
}
 8007614:	4618      	mov	r0, r3
 8007616:	3710      	adds	r7, #16
 8007618:	46bd      	mov	sp, r7
 800761a:	bd80      	pop	{r7, pc}

0800761c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800761c:	b580      	push	{r7, lr}
 800761e:	b084      	sub	sp, #16
 8007620:	af00      	add	r7, sp, #0
 8007622:	60f8      	str	r0, [r7, #12]
 8007624:	60b9      	str	r1, [r7, #8]
 8007626:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007628:	e042      	b.n	80076b0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	695b      	ldr	r3, [r3, #20]
 8007630:	f003 0310 	and.w	r3, r3, #16
 8007634:	2b10      	cmp	r3, #16
 8007636:	d119      	bne.n	800766c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	f06f 0210 	mvn.w	r2, #16
 8007640:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	2200      	movs	r2, #0
 8007646:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	2220      	movs	r2, #32
 800764c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	2200      	movs	r2, #0
 8007654:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	2200      	movs	r2, #0
 8007664:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007668:	2301      	movs	r3, #1
 800766a:	e029      	b.n	80076c0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800766c:	f7fd ff0e 	bl	800548c <HAL_GetTick>
 8007670:	4602      	mov	r2, r0
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	1ad3      	subs	r3, r2, r3
 8007676:	68ba      	ldr	r2, [r7, #8]
 8007678:	429a      	cmp	r2, r3
 800767a:	d302      	bcc.n	8007682 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800767c:	68bb      	ldr	r3, [r7, #8]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d116      	bne.n	80076b0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	2200      	movs	r2, #0
 8007686:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	2220      	movs	r2, #32
 800768c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	2200      	movs	r2, #0
 8007694:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800769c:	f043 0220 	orr.w	r2, r3, #32
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	2200      	movs	r2, #0
 80076a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80076ac:	2301      	movs	r3, #1
 80076ae:	e007      	b.n	80076c0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	695b      	ldr	r3, [r3, #20]
 80076b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076ba:	2b40      	cmp	r3, #64	; 0x40
 80076bc:	d1b5      	bne.n	800762a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80076be:	2300      	movs	r3, #0
}
 80076c0:	4618      	mov	r0, r3
 80076c2:	3710      	adds	r7, #16
 80076c4:	46bd      	mov	sp, r7
 80076c6:	bd80      	pop	{r7, pc}

080076c8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80076c8:	b480      	push	{r7}
 80076ca:	b083      	sub	sp, #12
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	695b      	ldr	r3, [r3, #20]
 80076d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80076da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80076de:	d11b      	bne.n	8007718 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80076e8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	2200      	movs	r2, #0
 80076ee:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2220      	movs	r2, #32
 80076f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2200      	movs	r2, #0
 80076fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007704:	f043 0204 	orr.w	r2, r3, #4
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2200      	movs	r2, #0
 8007710:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007714:	2301      	movs	r3, #1
 8007716:	e000      	b.n	800771a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007718:	2300      	movs	r3, #0
}
 800771a:	4618      	mov	r0, r3
 800771c:	370c      	adds	r7, #12
 800771e:	46bd      	mov	sp, r7
 8007720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007724:	4770      	bx	lr
	...

08007728 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007728:	b580      	push	{r7, lr}
 800772a:	b086      	sub	sp, #24
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d101      	bne.n	800773a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007736:	2301      	movs	r3, #1
 8007738:	e267      	b.n	8007c0a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	f003 0301 	and.w	r3, r3, #1
 8007742:	2b00      	cmp	r3, #0
 8007744:	d075      	beq.n	8007832 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007746:	4b88      	ldr	r3, [pc, #544]	; (8007968 <HAL_RCC_OscConfig+0x240>)
 8007748:	689b      	ldr	r3, [r3, #8]
 800774a:	f003 030c 	and.w	r3, r3, #12
 800774e:	2b04      	cmp	r3, #4
 8007750:	d00c      	beq.n	800776c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007752:	4b85      	ldr	r3, [pc, #532]	; (8007968 <HAL_RCC_OscConfig+0x240>)
 8007754:	689b      	ldr	r3, [r3, #8]
 8007756:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800775a:	2b08      	cmp	r3, #8
 800775c:	d112      	bne.n	8007784 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800775e:	4b82      	ldr	r3, [pc, #520]	; (8007968 <HAL_RCC_OscConfig+0x240>)
 8007760:	685b      	ldr	r3, [r3, #4]
 8007762:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007766:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800776a:	d10b      	bne.n	8007784 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800776c:	4b7e      	ldr	r3, [pc, #504]	; (8007968 <HAL_RCC_OscConfig+0x240>)
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007774:	2b00      	cmp	r3, #0
 8007776:	d05b      	beq.n	8007830 <HAL_RCC_OscConfig+0x108>
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	685b      	ldr	r3, [r3, #4]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d157      	bne.n	8007830 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007780:	2301      	movs	r3, #1
 8007782:	e242      	b.n	8007c0a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	685b      	ldr	r3, [r3, #4]
 8007788:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800778c:	d106      	bne.n	800779c <HAL_RCC_OscConfig+0x74>
 800778e:	4b76      	ldr	r3, [pc, #472]	; (8007968 <HAL_RCC_OscConfig+0x240>)
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	4a75      	ldr	r2, [pc, #468]	; (8007968 <HAL_RCC_OscConfig+0x240>)
 8007794:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007798:	6013      	str	r3, [r2, #0]
 800779a:	e01d      	b.n	80077d8 <HAL_RCC_OscConfig+0xb0>
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	685b      	ldr	r3, [r3, #4]
 80077a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80077a4:	d10c      	bne.n	80077c0 <HAL_RCC_OscConfig+0x98>
 80077a6:	4b70      	ldr	r3, [pc, #448]	; (8007968 <HAL_RCC_OscConfig+0x240>)
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	4a6f      	ldr	r2, [pc, #444]	; (8007968 <HAL_RCC_OscConfig+0x240>)
 80077ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80077b0:	6013      	str	r3, [r2, #0]
 80077b2:	4b6d      	ldr	r3, [pc, #436]	; (8007968 <HAL_RCC_OscConfig+0x240>)
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	4a6c      	ldr	r2, [pc, #432]	; (8007968 <HAL_RCC_OscConfig+0x240>)
 80077b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80077bc:	6013      	str	r3, [r2, #0]
 80077be:	e00b      	b.n	80077d8 <HAL_RCC_OscConfig+0xb0>
 80077c0:	4b69      	ldr	r3, [pc, #420]	; (8007968 <HAL_RCC_OscConfig+0x240>)
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	4a68      	ldr	r2, [pc, #416]	; (8007968 <HAL_RCC_OscConfig+0x240>)
 80077c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80077ca:	6013      	str	r3, [r2, #0]
 80077cc:	4b66      	ldr	r3, [pc, #408]	; (8007968 <HAL_RCC_OscConfig+0x240>)
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	4a65      	ldr	r2, [pc, #404]	; (8007968 <HAL_RCC_OscConfig+0x240>)
 80077d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80077d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	685b      	ldr	r3, [r3, #4]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d013      	beq.n	8007808 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80077e0:	f7fd fe54 	bl	800548c <HAL_GetTick>
 80077e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80077e6:	e008      	b.n	80077fa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80077e8:	f7fd fe50 	bl	800548c <HAL_GetTick>
 80077ec:	4602      	mov	r2, r0
 80077ee:	693b      	ldr	r3, [r7, #16]
 80077f0:	1ad3      	subs	r3, r2, r3
 80077f2:	2b64      	cmp	r3, #100	; 0x64
 80077f4:	d901      	bls.n	80077fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80077f6:	2303      	movs	r3, #3
 80077f8:	e207      	b.n	8007c0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80077fa:	4b5b      	ldr	r3, [pc, #364]	; (8007968 <HAL_RCC_OscConfig+0x240>)
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007802:	2b00      	cmp	r3, #0
 8007804:	d0f0      	beq.n	80077e8 <HAL_RCC_OscConfig+0xc0>
 8007806:	e014      	b.n	8007832 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007808:	f7fd fe40 	bl	800548c <HAL_GetTick>
 800780c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800780e:	e008      	b.n	8007822 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007810:	f7fd fe3c 	bl	800548c <HAL_GetTick>
 8007814:	4602      	mov	r2, r0
 8007816:	693b      	ldr	r3, [r7, #16]
 8007818:	1ad3      	subs	r3, r2, r3
 800781a:	2b64      	cmp	r3, #100	; 0x64
 800781c:	d901      	bls.n	8007822 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800781e:	2303      	movs	r3, #3
 8007820:	e1f3      	b.n	8007c0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007822:	4b51      	ldr	r3, [pc, #324]	; (8007968 <HAL_RCC_OscConfig+0x240>)
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800782a:	2b00      	cmp	r3, #0
 800782c:	d1f0      	bne.n	8007810 <HAL_RCC_OscConfig+0xe8>
 800782e:	e000      	b.n	8007832 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007830:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	f003 0302 	and.w	r3, r3, #2
 800783a:	2b00      	cmp	r3, #0
 800783c:	d063      	beq.n	8007906 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800783e:	4b4a      	ldr	r3, [pc, #296]	; (8007968 <HAL_RCC_OscConfig+0x240>)
 8007840:	689b      	ldr	r3, [r3, #8]
 8007842:	f003 030c 	and.w	r3, r3, #12
 8007846:	2b00      	cmp	r3, #0
 8007848:	d00b      	beq.n	8007862 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800784a:	4b47      	ldr	r3, [pc, #284]	; (8007968 <HAL_RCC_OscConfig+0x240>)
 800784c:	689b      	ldr	r3, [r3, #8]
 800784e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007852:	2b08      	cmp	r3, #8
 8007854:	d11c      	bne.n	8007890 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007856:	4b44      	ldr	r3, [pc, #272]	; (8007968 <HAL_RCC_OscConfig+0x240>)
 8007858:	685b      	ldr	r3, [r3, #4]
 800785a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800785e:	2b00      	cmp	r3, #0
 8007860:	d116      	bne.n	8007890 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007862:	4b41      	ldr	r3, [pc, #260]	; (8007968 <HAL_RCC_OscConfig+0x240>)
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	f003 0302 	and.w	r3, r3, #2
 800786a:	2b00      	cmp	r3, #0
 800786c:	d005      	beq.n	800787a <HAL_RCC_OscConfig+0x152>
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	68db      	ldr	r3, [r3, #12]
 8007872:	2b01      	cmp	r3, #1
 8007874:	d001      	beq.n	800787a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007876:	2301      	movs	r3, #1
 8007878:	e1c7      	b.n	8007c0a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800787a:	4b3b      	ldr	r3, [pc, #236]	; (8007968 <HAL_RCC_OscConfig+0x240>)
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	691b      	ldr	r3, [r3, #16]
 8007886:	00db      	lsls	r3, r3, #3
 8007888:	4937      	ldr	r1, [pc, #220]	; (8007968 <HAL_RCC_OscConfig+0x240>)
 800788a:	4313      	orrs	r3, r2
 800788c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800788e:	e03a      	b.n	8007906 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	68db      	ldr	r3, [r3, #12]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d020      	beq.n	80078da <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007898:	4b34      	ldr	r3, [pc, #208]	; (800796c <HAL_RCC_OscConfig+0x244>)
 800789a:	2201      	movs	r2, #1
 800789c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800789e:	f7fd fdf5 	bl	800548c <HAL_GetTick>
 80078a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80078a4:	e008      	b.n	80078b8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80078a6:	f7fd fdf1 	bl	800548c <HAL_GetTick>
 80078aa:	4602      	mov	r2, r0
 80078ac:	693b      	ldr	r3, [r7, #16]
 80078ae:	1ad3      	subs	r3, r2, r3
 80078b0:	2b02      	cmp	r3, #2
 80078b2:	d901      	bls.n	80078b8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80078b4:	2303      	movs	r3, #3
 80078b6:	e1a8      	b.n	8007c0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80078b8:	4b2b      	ldr	r3, [pc, #172]	; (8007968 <HAL_RCC_OscConfig+0x240>)
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	f003 0302 	and.w	r3, r3, #2
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d0f0      	beq.n	80078a6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80078c4:	4b28      	ldr	r3, [pc, #160]	; (8007968 <HAL_RCC_OscConfig+0x240>)
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	691b      	ldr	r3, [r3, #16]
 80078d0:	00db      	lsls	r3, r3, #3
 80078d2:	4925      	ldr	r1, [pc, #148]	; (8007968 <HAL_RCC_OscConfig+0x240>)
 80078d4:	4313      	orrs	r3, r2
 80078d6:	600b      	str	r3, [r1, #0]
 80078d8:	e015      	b.n	8007906 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80078da:	4b24      	ldr	r3, [pc, #144]	; (800796c <HAL_RCC_OscConfig+0x244>)
 80078dc:	2200      	movs	r2, #0
 80078de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078e0:	f7fd fdd4 	bl	800548c <HAL_GetTick>
 80078e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80078e6:	e008      	b.n	80078fa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80078e8:	f7fd fdd0 	bl	800548c <HAL_GetTick>
 80078ec:	4602      	mov	r2, r0
 80078ee:	693b      	ldr	r3, [r7, #16]
 80078f0:	1ad3      	subs	r3, r2, r3
 80078f2:	2b02      	cmp	r3, #2
 80078f4:	d901      	bls.n	80078fa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80078f6:	2303      	movs	r3, #3
 80078f8:	e187      	b.n	8007c0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80078fa:	4b1b      	ldr	r3, [pc, #108]	; (8007968 <HAL_RCC_OscConfig+0x240>)
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	f003 0302 	and.w	r3, r3, #2
 8007902:	2b00      	cmp	r3, #0
 8007904:	d1f0      	bne.n	80078e8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	f003 0308 	and.w	r3, r3, #8
 800790e:	2b00      	cmp	r3, #0
 8007910:	d036      	beq.n	8007980 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	695b      	ldr	r3, [r3, #20]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d016      	beq.n	8007948 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800791a:	4b15      	ldr	r3, [pc, #84]	; (8007970 <HAL_RCC_OscConfig+0x248>)
 800791c:	2201      	movs	r2, #1
 800791e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007920:	f7fd fdb4 	bl	800548c <HAL_GetTick>
 8007924:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007926:	e008      	b.n	800793a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007928:	f7fd fdb0 	bl	800548c <HAL_GetTick>
 800792c:	4602      	mov	r2, r0
 800792e:	693b      	ldr	r3, [r7, #16]
 8007930:	1ad3      	subs	r3, r2, r3
 8007932:	2b02      	cmp	r3, #2
 8007934:	d901      	bls.n	800793a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007936:	2303      	movs	r3, #3
 8007938:	e167      	b.n	8007c0a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800793a:	4b0b      	ldr	r3, [pc, #44]	; (8007968 <HAL_RCC_OscConfig+0x240>)
 800793c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800793e:	f003 0302 	and.w	r3, r3, #2
 8007942:	2b00      	cmp	r3, #0
 8007944:	d0f0      	beq.n	8007928 <HAL_RCC_OscConfig+0x200>
 8007946:	e01b      	b.n	8007980 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007948:	4b09      	ldr	r3, [pc, #36]	; (8007970 <HAL_RCC_OscConfig+0x248>)
 800794a:	2200      	movs	r2, #0
 800794c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800794e:	f7fd fd9d 	bl	800548c <HAL_GetTick>
 8007952:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007954:	e00e      	b.n	8007974 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007956:	f7fd fd99 	bl	800548c <HAL_GetTick>
 800795a:	4602      	mov	r2, r0
 800795c:	693b      	ldr	r3, [r7, #16]
 800795e:	1ad3      	subs	r3, r2, r3
 8007960:	2b02      	cmp	r3, #2
 8007962:	d907      	bls.n	8007974 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007964:	2303      	movs	r3, #3
 8007966:	e150      	b.n	8007c0a <HAL_RCC_OscConfig+0x4e2>
 8007968:	40023800 	.word	0x40023800
 800796c:	42470000 	.word	0x42470000
 8007970:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007974:	4b88      	ldr	r3, [pc, #544]	; (8007b98 <HAL_RCC_OscConfig+0x470>)
 8007976:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007978:	f003 0302 	and.w	r3, r3, #2
 800797c:	2b00      	cmp	r3, #0
 800797e:	d1ea      	bne.n	8007956 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	f003 0304 	and.w	r3, r3, #4
 8007988:	2b00      	cmp	r3, #0
 800798a:	f000 8097 	beq.w	8007abc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800798e:	2300      	movs	r3, #0
 8007990:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007992:	4b81      	ldr	r3, [pc, #516]	; (8007b98 <HAL_RCC_OscConfig+0x470>)
 8007994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007996:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800799a:	2b00      	cmp	r3, #0
 800799c:	d10f      	bne.n	80079be <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800799e:	2300      	movs	r3, #0
 80079a0:	60bb      	str	r3, [r7, #8]
 80079a2:	4b7d      	ldr	r3, [pc, #500]	; (8007b98 <HAL_RCC_OscConfig+0x470>)
 80079a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079a6:	4a7c      	ldr	r2, [pc, #496]	; (8007b98 <HAL_RCC_OscConfig+0x470>)
 80079a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80079ac:	6413      	str	r3, [r2, #64]	; 0x40
 80079ae:	4b7a      	ldr	r3, [pc, #488]	; (8007b98 <HAL_RCC_OscConfig+0x470>)
 80079b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80079b6:	60bb      	str	r3, [r7, #8]
 80079b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80079ba:	2301      	movs	r3, #1
 80079bc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80079be:	4b77      	ldr	r3, [pc, #476]	; (8007b9c <HAL_RCC_OscConfig+0x474>)
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d118      	bne.n	80079fc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80079ca:	4b74      	ldr	r3, [pc, #464]	; (8007b9c <HAL_RCC_OscConfig+0x474>)
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	4a73      	ldr	r2, [pc, #460]	; (8007b9c <HAL_RCC_OscConfig+0x474>)
 80079d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80079d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80079d6:	f7fd fd59 	bl	800548c <HAL_GetTick>
 80079da:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80079dc:	e008      	b.n	80079f0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80079de:	f7fd fd55 	bl	800548c <HAL_GetTick>
 80079e2:	4602      	mov	r2, r0
 80079e4:	693b      	ldr	r3, [r7, #16]
 80079e6:	1ad3      	subs	r3, r2, r3
 80079e8:	2b02      	cmp	r3, #2
 80079ea:	d901      	bls.n	80079f0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80079ec:	2303      	movs	r3, #3
 80079ee:	e10c      	b.n	8007c0a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80079f0:	4b6a      	ldr	r3, [pc, #424]	; (8007b9c <HAL_RCC_OscConfig+0x474>)
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d0f0      	beq.n	80079de <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	689b      	ldr	r3, [r3, #8]
 8007a00:	2b01      	cmp	r3, #1
 8007a02:	d106      	bne.n	8007a12 <HAL_RCC_OscConfig+0x2ea>
 8007a04:	4b64      	ldr	r3, [pc, #400]	; (8007b98 <HAL_RCC_OscConfig+0x470>)
 8007a06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a08:	4a63      	ldr	r2, [pc, #396]	; (8007b98 <HAL_RCC_OscConfig+0x470>)
 8007a0a:	f043 0301 	orr.w	r3, r3, #1
 8007a0e:	6713      	str	r3, [r2, #112]	; 0x70
 8007a10:	e01c      	b.n	8007a4c <HAL_RCC_OscConfig+0x324>
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	689b      	ldr	r3, [r3, #8]
 8007a16:	2b05      	cmp	r3, #5
 8007a18:	d10c      	bne.n	8007a34 <HAL_RCC_OscConfig+0x30c>
 8007a1a:	4b5f      	ldr	r3, [pc, #380]	; (8007b98 <HAL_RCC_OscConfig+0x470>)
 8007a1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a1e:	4a5e      	ldr	r2, [pc, #376]	; (8007b98 <HAL_RCC_OscConfig+0x470>)
 8007a20:	f043 0304 	orr.w	r3, r3, #4
 8007a24:	6713      	str	r3, [r2, #112]	; 0x70
 8007a26:	4b5c      	ldr	r3, [pc, #368]	; (8007b98 <HAL_RCC_OscConfig+0x470>)
 8007a28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a2a:	4a5b      	ldr	r2, [pc, #364]	; (8007b98 <HAL_RCC_OscConfig+0x470>)
 8007a2c:	f043 0301 	orr.w	r3, r3, #1
 8007a30:	6713      	str	r3, [r2, #112]	; 0x70
 8007a32:	e00b      	b.n	8007a4c <HAL_RCC_OscConfig+0x324>
 8007a34:	4b58      	ldr	r3, [pc, #352]	; (8007b98 <HAL_RCC_OscConfig+0x470>)
 8007a36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a38:	4a57      	ldr	r2, [pc, #348]	; (8007b98 <HAL_RCC_OscConfig+0x470>)
 8007a3a:	f023 0301 	bic.w	r3, r3, #1
 8007a3e:	6713      	str	r3, [r2, #112]	; 0x70
 8007a40:	4b55      	ldr	r3, [pc, #340]	; (8007b98 <HAL_RCC_OscConfig+0x470>)
 8007a42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a44:	4a54      	ldr	r2, [pc, #336]	; (8007b98 <HAL_RCC_OscConfig+0x470>)
 8007a46:	f023 0304 	bic.w	r3, r3, #4
 8007a4a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	689b      	ldr	r3, [r3, #8]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d015      	beq.n	8007a80 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a54:	f7fd fd1a 	bl	800548c <HAL_GetTick>
 8007a58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007a5a:	e00a      	b.n	8007a72 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007a5c:	f7fd fd16 	bl	800548c <HAL_GetTick>
 8007a60:	4602      	mov	r2, r0
 8007a62:	693b      	ldr	r3, [r7, #16]
 8007a64:	1ad3      	subs	r3, r2, r3
 8007a66:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a6a:	4293      	cmp	r3, r2
 8007a6c:	d901      	bls.n	8007a72 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007a6e:	2303      	movs	r3, #3
 8007a70:	e0cb      	b.n	8007c0a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007a72:	4b49      	ldr	r3, [pc, #292]	; (8007b98 <HAL_RCC_OscConfig+0x470>)
 8007a74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a76:	f003 0302 	and.w	r3, r3, #2
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d0ee      	beq.n	8007a5c <HAL_RCC_OscConfig+0x334>
 8007a7e:	e014      	b.n	8007aaa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007a80:	f7fd fd04 	bl	800548c <HAL_GetTick>
 8007a84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007a86:	e00a      	b.n	8007a9e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007a88:	f7fd fd00 	bl	800548c <HAL_GetTick>
 8007a8c:	4602      	mov	r2, r0
 8007a8e:	693b      	ldr	r3, [r7, #16]
 8007a90:	1ad3      	subs	r3, r2, r3
 8007a92:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a96:	4293      	cmp	r3, r2
 8007a98:	d901      	bls.n	8007a9e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007a9a:	2303      	movs	r3, #3
 8007a9c:	e0b5      	b.n	8007c0a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007a9e:	4b3e      	ldr	r3, [pc, #248]	; (8007b98 <HAL_RCC_OscConfig+0x470>)
 8007aa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007aa2:	f003 0302 	and.w	r3, r3, #2
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d1ee      	bne.n	8007a88 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007aaa:	7dfb      	ldrb	r3, [r7, #23]
 8007aac:	2b01      	cmp	r3, #1
 8007aae:	d105      	bne.n	8007abc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007ab0:	4b39      	ldr	r3, [pc, #228]	; (8007b98 <HAL_RCC_OscConfig+0x470>)
 8007ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ab4:	4a38      	ldr	r2, [pc, #224]	; (8007b98 <HAL_RCC_OscConfig+0x470>)
 8007ab6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007aba:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	699b      	ldr	r3, [r3, #24]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	f000 80a1 	beq.w	8007c08 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007ac6:	4b34      	ldr	r3, [pc, #208]	; (8007b98 <HAL_RCC_OscConfig+0x470>)
 8007ac8:	689b      	ldr	r3, [r3, #8]
 8007aca:	f003 030c 	and.w	r3, r3, #12
 8007ace:	2b08      	cmp	r3, #8
 8007ad0:	d05c      	beq.n	8007b8c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	699b      	ldr	r3, [r3, #24]
 8007ad6:	2b02      	cmp	r3, #2
 8007ad8:	d141      	bne.n	8007b5e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007ada:	4b31      	ldr	r3, [pc, #196]	; (8007ba0 <HAL_RCC_OscConfig+0x478>)
 8007adc:	2200      	movs	r2, #0
 8007ade:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007ae0:	f7fd fcd4 	bl	800548c <HAL_GetTick>
 8007ae4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007ae6:	e008      	b.n	8007afa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007ae8:	f7fd fcd0 	bl	800548c <HAL_GetTick>
 8007aec:	4602      	mov	r2, r0
 8007aee:	693b      	ldr	r3, [r7, #16]
 8007af0:	1ad3      	subs	r3, r2, r3
 8007af2:	2b02      	cmp	r3, #2
 8007af4:	d901      	bls.n	8007afa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007af6:	2303      	movs	r3, #3
 8007af8:	e087      	b.n	8007c0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007afa:	4b27      	ldr	r3, [pc, #156]	; (8007b98 <HAL_RCC_OscConfig+0x470>)
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d1f0      	bne.n	8007ae8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	69da      	ldr	r2, [r3, #28]
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	6a1b      	ldr	r3, [r3, #32]
 8007b0e:	431a      	orrs	r2, r3
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b14:	019b      	lsls	r3, r3, #6
 8007b16:	431a      	orrs	r2, r3
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b1c:	085b      	lsrs	r3, r3, #1
 8007b1e:	3b01      	subs	r3, #1
 8007b20:	041b      	lsls	r3, r3, #16
 8007b22:	431a      	orrs	r2, r3
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b28:	061b      	lsls	r3, r3, #24
 8007b2a:	491b      	ldr	r1, [pc, #108]	; (8007b98 <HAL_RCC_OscConfig+0x470>)
 8007b2c:	4313      	orrs	r3, r2
 8007b2e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007b30:	4b1b      	ldr	r3, [pc, #108]	; (8007ba0 <HAL_RCC_OscConfig+0x478>)
 8007b32:	2201      	movs	r2, #1
 8007b34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007b36:	f7fd fca9 	bl	800548c <HAL_GetTick>
 8007b3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007b3c:	e008      	b.n	8007b50 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007b3e:	f7fd fca5 	bl	800548c <HAL_GetTick>
 8007b42:	4602      	mov	r2, r0
 8007b44:	693b      	ldr	r3, [r7, #16]
 8007b46:	1ad3      	subs	r3, r2, r3
 8007b48:	2b02      	cmp	r3, #2
 8007b4a:	d901      	bls.n	8007b50 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007b4c:	2303      	movs	r3, #3
 8007b4e:	e05c      	b.n	8007c0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007b50:	4b11      	ldr	r3, [pc, #68]	; (8007b98 <HAL_RCC_OscConfig+0x470>)
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d0f0      	beq.n	8007b3e <HAL_RCC_OscConfig+0x416>
 8007b5c:	e054      	b.n	8007c08 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007b5e:	4b10      	ldr	r3, [pc, #64]	; (8007ba0 <HAL_RCC_OscConfig+0x478>)
 8007b60:	2200      	movs	r2, #0
 8007b62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007b64:	f7fd fc92 	bl	800548c <HAL_GetTick>
 8007b68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007b6a:	e008      	b.n	8007b7e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007b6c:	f7fd fc8e 	bl	800548c <HAL_GetTick>
 8007b70:	4602      	mov	r2, r0
 8007b72:	693b      	ldr	r3, [r7, #16]
 8007b74:	1ad3      	subs	r3, r2, r3
 8007b76:	2b02      	cmp	r3, #2
 8007b78:	d901      	bls.n	8007b7e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007b7a:	2303      	movs	r3, #3
 8007b7c:	e045      	b.n	8007c0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007b7e:	4b06      	ldr	r3, [pc, #24]	; (8007b98 <HAL_RCC_OscConfig+0x470>)
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d1f0      	bne.n	8007b6c <HAL_RCC_OscConfig+0x444>
 8007b8a:	e03d      	b.n	8007c08 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	699b      	ldr	r3, [r3, #24]
 8007b90:	2b01      	cmp	r3, #1
 8007b92:	d107      	bne.n	8007ba4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007b94:	2301      	movs	r3, #1
 8007b96:	e038      	b.n	8007c0a <HAL_RCC_OscConfig+0x4e2>
 8007b98:	40023800 	.word	0x40023800
 8007b9c:	40007000 	.word	0x40007000
 8007ba0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007ba4:	4b1b      	ldr	r3, [pc, #108]	; (8007c14 <HAL_RCC_OscConfig+0x4ec>)
 8007ba6:	685b      	ldr	r3, [r3, #4]
 8007ba8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	699b      	ldr	r3, [r3, #24]
 8007bae:	2b01      	cmp	r3, #1
 8007bb0:	d028      	beq.n	8007c04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007bbc:	429a      	cmp	r2, r3
 8007bbe:	d121      	bne.n	8007c04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007bca:	429a      	cmp	r2, r3
 8007bcc:	d11a      	bne.n	8007c04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007bce:	68fa      	ldr	r2, [r7, #12]
 8007bd0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007bd4:	4013      	ands	r3, r2
 8007bd6:	687a      	ldr	r2, [r7, #4]
 8007bd8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007bda:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007bdc:	4293      	cmp	r3, r2
 8007bde:	d111      	bne.n	8007c04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bea:	085b      	lsrs	r3, r3, #1
 8007bec:	3b01      	subs	r3, #1
 8007bee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007bf0:	429a      	cmp	r2, r3
 8007bf2:	d107      	bne.n	8007c04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bfe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007c00:	429a      	cmp	r2, r3
 8007c02:	d001      	beq.n	8007c08 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8007c04:	2301      	movs	r3, #1
 8007c06:	e000      	b.n	8007c0a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007c08:	2300      	movs	r3, #0
}
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	3718      	adds	r7, #24
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	bd80      	pop	{r7, pc}
 8007c12:	bf00      	nop
 8007c14:	40023800 	.word	0x40023800

08007c18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b084      	sub	sp, #16
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
 8007c20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d101      	bne.n	8007c2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007c28:	2301      	movs	r3, #1
 8007c2a:	e0cc      	b.n	8007dc6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007c2c:	4b68      	ldr	r3, [pc, #416]	; (8007dd0 <HAL_RCC_ClockConfig+0x1b8>)
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	f003 0307 	and.w	r3, r3, #7
 8007c34:	683a      	ldr	r2, [r7, #0]
 8007c36:	429a      	cmp	r2, r3
 8007c38:	d90c      	bls.n	8007c54 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007c3a:	4b65      	ldr	r3, [pc, #404]	; (8007dd0 <HAL_RCC_ClockConfig+0x1b8>)
 8007c3c:	683a      	ldr	r2, [r7, #0]
 8007c3e:	b2d2      	uxtb	r2, r2
 8007c40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007c42:	4b63      	ldr	r3, [pc, #396]	; (8007dd0 <HAL_RCC_ClockConfig+0x1b8>)
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	f003 0307 	and.w	r3, r3, #7
 8007c4a:	683a      	ldr	r2, [r7, #0]
 8007c4c:	429a      	cmp	r2, r3
 8007c4e:	d001      	beq.n	8007c54 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007c50:	2301      	movs	r3, #1
 8007c52:	e0b8      	b.n	8007dc6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	f003 0302 	and.w	r3, r3, #2
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d020      	beq.n	8007ca2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	f003 0304 	and.w	r3, r3, #4
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d005      	beq.n	8007c78 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007c6c:	4b59      	ldr	r3, [pc, #356]	; (8007dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8007c6e:	689b      	ldr	r3, [r3, #8]
 8007c70:	4a58      	ldr	r2, [pc, #352]	; (8007dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8007c72:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007c76:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	f003 0308 	and.w	r3, r3, #8
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d005      	beq.n	8007c90 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007c84:	4b53      	ldr	r3, [pc, #332]	; (8007dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8007c86:	689b      	ldr	r3, [r3, #8]
 8007c88:	4a52      	ldr	r2, [pc, #328]	; (8007dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8007c8a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007c8e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007c90:	4b50      	ldr	r3, [pc, #320]	; (8007dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8007c92:	689b      	ldr	r3, [r3, #8]
 8007c94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	689b      	ldr	r3, [r3, #8]
 8007c9c:	494d      	ldr	r1, [pc, #308]	; (8007dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8007c9e:	4313      	orrs	r3, r2
 8007ca0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	f003 0301 	and.w	r3, r3, #1
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d044      	beq.n	8007d38 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	685b      	ldr	r3, [r3, #4]
 8007cb2:	2b01      	cmp	r3, #1
 8007cb4:	d107      	bne.n	8007cc6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007cb6:	4b47      	ldr	r3, [pc, #284]	; (8007dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d119      	bne.n	8007cf6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007cc2:	2301      	movs	r3, #1
 8007cc4:	e07f      	b.n	8007dc6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	685b      	ldr	r3, [r3, #4]
 8007cca:	2b02      	cmp	r3, #2
 8007ccc:	d003      	beq.n	8007cd6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007cd2:	2b03      	cmp	r3, #3
 8007cd4:	d107      	bne.n	8007ce6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007cd6:	4b3f      	ldr	r3, [pc, #252]	; (8007dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d109      	bne.n	8007cf6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007ce2:	2301      	movs	r3, #1
 8007ce4:	e06f      	b.n	8007dc6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007ce6:	4b3b      	ldr	r3, [pc, #236]	; (8007dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	f003 0302 	and.w	r3, r3, #2
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d101      	bne.n	8007cf6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007cf2:	2301      	movs	r3, #1
 8007cf4:	e067      	b.n	8007dc6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007cf6:	4b37      	ldr	r3, [pc, #220]	; (8007dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8007cf8:	689b      	ldr	r3, [r3, #8]
 8007cfa:	f023 0203 	bic.w	r2, r3, #3
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	685b      	ldr	r3, [r3, #4]
 8007d02:	4934      	ldr	r1, [pc, #208]	; (8007dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8007d04:	4313      	orrs	r3, r2
 8007d06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007d08:	f7fd fbc0 	bl	800548c <HAL_GetTick>
 8007d0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007d0e:	e00a      	b.n	8007d26 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007d10:	f7fd fbbc 	bl	800548c <HAL_GetTick>
 8007d14:	4602      	mov	r2, r0
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	1ad3      	subs	r3, r2, r3
 8007d1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d1e:	4293      	cmp	r3, r2
 8007d20:	d901      	bls.n	8007d26 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007d22:	2303      	movs	r3, #3
 8007d24:	e04f      	b.n	8007dc6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007d26:	4b2b      	ldr	r3, [pc, #172]	; (8007dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8007d28:	689b      	ldr	r3, [r3, #8]
 8007d2a:	f003 020c 	and.w	r2, r3, #12
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	685b      	ldr	r3, [r3, #4]
 8007d32:	009b      	lsls	r3, r3, #2
 8007d34:	429a      	cmp	r2, r3
 8007d36:	d1eb      	bne.n	8007d10 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007d38:	4b25      	ldr	r3, [pc, #148]	; (8007dd0 <HAL_RCC_ClockConfig+0x1b8>)
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	f003 0307 	and.w	r3, r3, #7
 8007d40:	683a      	ldr	r2, [r7, #0]
 8007d42:	429a      	cmp	r2, r3
 8007d44:	d20c      	bcs.n	8007d60 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007d46:	4b22      	ldr	r3, [pc, #136]	; (8007dd0 <HAL_RCC_ClockConfig+0x1b8>)
 8007d48:	683a      	ldr	r2, [r7, #0]
 8007d4a:	b2d2      	uxtb	r2, r2
 8007d4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007d4e:	4b20      	ldr	r3, [pc, #128]	; (8007dd0 <HAL_RCC_ClockConfig+0x1b8>)
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	f003 0307 	and.w	r3, r3, #7
 8007d56:	683a      	ldr	r2, [r7, #0]
 8007d58:	429a      	cmp	r2, r3
 8007d5a:	d001      	beq.n	8007d60 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007d5c:	2301      	movs	r3, #1
 8007d5e:	e032      	b.n	8007dc6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	f003 0304 	and.w	r3, r3, #4
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d008      	beq.n	8007d7e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007d6c:	4b19      	ldr	r3, [pc, #100]	; (8007dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8007d6e:	689b      	ldr	r3, [r3, #8]
 8007d70:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	68db      	ldr	r3, [r3, #12]
 8007d78:	4916      	ldr	r1, [pc, #88]	; (8007dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8007d7a:	4313      	orrs	r3, r2
 8007d7c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	f003 0308 	and.w	r3, r3, #8
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d009      	beq.n	8007d9e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007d8a:	4b12      	ldr	r3, [pc, #72]	; (8007dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8007d8c:	689b      	ldr	r3, [r3, #8]
 8007d8e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	691b      	ldr	r3, [r3, #16]
 8007d96:	00db      	lsls	r3, r3, #3
 8007d98:	490e      	ldr	r1, [pc, #56]	; (8007dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8007d9a:	4313      	orrs	r3, r2
 8007d9c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007d9e:	f000 f821 	bl	8007de4 <HAL_RCC_GetSysClockFreq>
 8007da2:	4602      	mov	r2, r0
 8007da4:	4b0b      	ldr	r3, [pc, #44]	; (8007dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8007da6:	689b      	ldr	r3, [r3, #8]
 8007da8:	091b      	lsrs	r3, r3, #4
 8007daa:	f003 030f 	and.w	r3, r3, #15
 8007dae:	490a      	ldr	r1, [pc, #40]	; (8007dd8 <HAL_RCC_ClockConfig+0x1c0>)
 8007db0:	5ccb      	ldrb	r3, [r1, r3]
 8007db2:	fa22 f303 	lsr.w	r3, r2, r3
 8007db6:	4a09      	ldr	r2, [pc, #36]	; (8007ddc <HAL_RCC_ClockConfig+0x1c4>)
 8007db8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007dba:	4b09      	ldr	r3, [pc, #36]	; (8007de0 <HAL_RCC_ClockConfig+0x1c8>)
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	f7fd fb20 	bl	8005404 <HAL_InitTick>

  return HAL_OK;
 8007dc4:	2300      	movs	r3, #0
}
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	3710      	adds	r7, #16
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	bd80      	pop	{r7, pc}
 8007dce:	bf00      	nop
 8007dd0:	40023c00 	.word	0x40023c00
 8007dd4:	40023800 	.word	0x40023800
 8007dd8:	0801440c 	.word	0x0801440c
 8007ddc:	2000000c 	.word	0x2000000c
 8007de0:	20000010 	.word	0x20000010

08007de4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007de4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007de8:	b094      	sub	sp, #80	; 0x50
 8007dea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007dec:	2300      	movs	r3, #0
 8007dee:	647b      	str	r3, [r7, #68]	; 0x44
 8007df0:	2300      	movs	r3, #0
 8007df2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007df4:	2300      	movs	r3, #0
 8007df6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8007df8:	2300      	movs	r3, #0
 8007dfa:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007dfc:	4b79      	ldr	r3, [pc, #484]	; (8007fe4 <HAL_RCC_GetSysClockFreq+0x200>)
 8007dfe:	689b      	ldr	r3, [r3, #8]
 8007e00:	f003 030c 	and.w	r3, r3, #12
 8007e04:	2b08      	cmp	r3, #8
 8007e06:	d00d      	beq.n	8007e24 <HAL_RCC_GetSysClockFreq+0x40>
 8007e08:	2b08      	cmp	r3, #8
 8007e0a:	f200 80e1 	bhi.w	8007fd0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d002      	beq.n	8007e18 <HAL_RCC_GetSysClockFreq+0x34>
 8007e12:	2b04      	cmp	r3, #4
 8007e14:	d003      	beq.n	8007e1e <HAL_RCC_GetSysClockFreq+0x3a>
 8007e16:	e0db      	b.n	8007fd0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007e18:	4b73      	ldr	r3, [pc, #460]	; (8007fe8 <HAL_RCC_GetSysClockFreq+0x204>)
 8007e1a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8007e1c:	e0db      	b.n	8007fd6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007e1e:	4b73      	ldr	r3, [pc, #460]	; (8007fec <HAL_RCC_GetSysClockFreq+0x208>)
 8007e20:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007e22:	e0d8      	b.n	8007fd6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007e24:	4b6f      	ldr	r3, [pc, #444]	; (8007fe4 <HAL_RCC_GetSysClockFreq+0x200>)
 8007e26:	685b      	ldr	r3, [r3, #4]
 8007e28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007e2c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007e2e:	4b6d      	ldr	r3, [pc, #436]	; (8007fe4 <HAL_RCC_GetSysClockFreq+0x200>)
 8007e30:	685b      	ldr	r3, [r3, #4]
 8007e32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d063      	beq.n	8007f02 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007e3a:	4b6a      	ldr	r3, [pc, #424]	; (8007fe4 <HAL_RCC_GetSysClockFreq+0x200>)
 8007e3c:	685b      	ldr	r3, [r3, #4]
 8007e3e:	099b      	lsrs	r3, r3, #6
 8007e40:	2200      	movs	r2, #0
 8007e42:	63bb      	str	r3, [r7, #56]	; 0x38
 8007e44:	63fa      	str	r2, [r7, #60]	; 0x3c
 8007e46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e4c:	633b      	str	r3, [r7, #48]	; 0x30
 8007e4e:	2300      	movs	r3, #0
 8007e50:	637b      	str	r3, [r7, #52]	; 0x34
 8007e52:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8007e56:	4622      	mov	r2, r4
 8007e58:	462b      	mov	r3, r5
 8007e5a:	f04f 0000 	mov.w	r0, #0
 8007e5e:	f04f 0100 	mov.w	r1, #0
 8007e62:	0159      	lsls	r1, r3, #5
 8007e64:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007e68:	0150      	lsls	r0, r2, #5
 8007e6a:	4602      	mov	r2, r0
 8007e6c:	460b      	mov	r3, r1
 8007e6e:	4621      	mov	r1, r4
 8007e70:	1a51      	subs	r1, r2, r1
 8007e72:	6139      	str	r1, [r7, #16]
 8007e74:	4629      	mov	r1, r5
 8007e76:	eb63 0301 	sbc.w	r3, r3, r1
 8007e7a:	617b      	str	r3, [r7, #20]
 8007e7c:	f04f 0200 	mov.w	r2, #0
 8007e80:	f04f 0300 	mov.w	r3, #0
 8007e84:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007e88:	4659      	mov	r1, fp
 8007e8a:	018b      	lsls	r3, r1, #6
 8007e8c:	4651      	mov	r1, sl
 8007e8e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007e92:	4651      	mov	r1, sl
 8007e94:	018a      	lsls	r2, r1, #6
 8007e96:	4651      	mov	r1, sl
 8007e98:	ebb2 0801 	subs.w	r8, r2, r1
 8007e9c:	4659      	mov	r1, fp
 8007e9e:	eb63 0901 	sbc.w	r9, r3, r1
 8007ea2:	f04f 0200 	mov.w	r2, #0
 8007ea6:	f04f 0300 	mov.w	r3, #0
 8007eaa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007eae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007eb2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007eb6:	4690      	mov	r8, r2
 8007eb8:	4699      	mov	r9, r3
 8007eba:	4623      	mov	r3, r4
 8007ebc:	eb18 0303 	adds.w	r3, r8, r3
 8007ec0:	60bb      	str	r3, [r7, #8]
 8007ec2:	462b      	mov	r3, r5
 8007ec4:	eb49 0303 	adc.w	r3, r9, r3
 8007ec8:	60fb      	str	r3, [r7, #12]
 8007eca:	f04f 0200 	mov.w	r2, #0
 8007ece:	f04f 0300 	mov.w	r3, #0
 8007ed2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007ed6:	4629      	mov	r1, r5
 8007ed8:	024b      	lsls	r3, r1, #9
 8007eda:	4621      	mov	r1, r4
 8007edc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007ee0:	4621      	mov	r1, r4
 8007ee2:	024a      	lsls	r2, r1, #9
 8007ee4:	4610      	mov	r0, r2
 8007ee6:	4619      	mov	r1, r3
 8007ee8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007eea:	2200      	movs	r2, #0
 8007eec:	62bb      	str	r3, [r7, #40]	; 0x28
 8007eee:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007ef0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007ef4:	f7f8 fec8 	bl	8000c88 <__aeabi_uldivmod>
 8007ef8:	4602      	mov	r2, r0
 8007efa:	460b      	mov	r3, r1
 8007efc:	4613      	mov	r3, r2
 8007efe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007f00:	e058      	b.n	8007fb4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007f02:	4b38      	ldr	r3, [pc, #224]	; (8007fe4 <HAL_RCC_GetSysClockFreq+0x200>)
 8007f04:	685b      	ldr	r3, [r3, #4]
 8007f06:	099b      	lsrs	r3, r3, #6
 8007f08:	2200      	movs	r2, #0
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	4611      	mov	r1, r2
 8007f0e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007f12:	623b      	str	r3, [r7, #32]
 8007f14:	2300      	movs	r3, #0
 8007f16:	627b      	str	r3, [r7, #36]	; 0x24
 8007f18:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007f1c:	4642      	mov	r2, r8
 8007f1e:	464b      	mov	r3, r9
 8007f20:	f04f 0000 	mov.w	r0, #0
 8007f24:	f04f 0100 	mov.w	r1, #0
 8007f28:	0159      	lsls	r1, r3, #5
 8007f2a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007f2e:	0150      	lsls	r0, r2, #5
 8007f30:	4602      	mov	r2, r0
 8007f32:	460b      	mov	r3, r1
 8007f34:	4641      	mov	r1, r8
 8007f36:	ebb2 0a01 	subs.w	sl, r2, r1
 8007f3a:	4649      	mov	r1, r9
 8007f3c:	eb63 0b01 	sbc.w	fp, r3, r1
 8007f40:	f04f 0200 	mov.w	r2, #0
 8007f44:	f04f 0300 	mov.w	r3, #0
 8007f48:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007f4c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007f50:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007f54:	ebb2 040a 	subs.w	r4, r2, sl
 8007f58:	eb63 050b 	sbc.w	r5, r3, fp
 8007f5c:	f04f 0200 	mov.w	r2, #0
 8007f60:	f04f 0300 	mov.w	r3, #0
 8007f64:	00eb      	lsls	r3, r5, #3
 8007f66:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007f6a:	00e2      	lsls	r2, r4, #3
 8007f6c:	4614      	mov	r4, r2
 8007f6e:	461d      	mov	r5, r3
 8007f70:	4643      	mov	r3, r8
 8007f72:	18e3      	adds	r3, r4, r3
 8007f74:	603b      	str	r3, [r7, #0]
 8007f76:	464b      	mov	r3, r9
 8007f78:	eb45 0303 	adc.w	r3, r5, r3
 8007f7c:	607b      	str	r3, [r7, #4]
 8007f7e:	f04f 0200 	mov.w	r2, #0
 8007f82:	f04f 0300 	mov.w	r3, #0
 8007f86:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007f8a:	4629      	mov	r1, r5
 8007f8c:	028b      	lsls	r3, r1, #10
 8007f8e:	4621      	mov	r1, r4
 8007f90:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007f94:	4621      	mov	r1, r4
 8007f96:	028a      	lsls	r2, r1, #10
 8007f98:	4610      	mov	r0, r2
 8007f9a:	4619      	mov	r1, r3
 8007f9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	61bb      	str	r3, [r7, #24]
 8007fa2:	61fa      	str	r2, [r7, #28]
 8007fa4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007fa8:	f7f8 fe6e 	bl	8000c88 <__aeabi_uldivmod>
 8007fac:	4602      	mov	r2, r0
 8007fae:	460b      	mov	r3, r1
 8007fb0:	4613      	mov	r3, r2
 8007fb2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007fb4:	4b0b      	ldr	r3, [pc, #44]	; (8007fe4 <HAL_RCC_GetSysClockFreq+0x200>)
 8007fb6:	685b      	ldr	r3, [r3, #4]
 8007fb8:	0c1b      	lsrs	r3, r3, #16
 8007fba:	f003 0303 	and.w	r3, r3, #3
 8007fbe:	3301      	adds	r3, #1
 8007fc0:	005b      	lsls	r3, r3, #1
 8007fc2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8007fc4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007fc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007fc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fcc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007fce:	e002      	b.n	8007fd6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007fd0:	4b05      	ldr	r3, [pc, #20]	; (8007fe8 <HAL_RCC_GetSysClockFreq+0x204>)
 8007fd2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007fd4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007fd6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8007fd8:	4618      	mov	r0, r3
 8007fda:	3750      	adds	r7, #80	; 0x50
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007fe2:	bf00      	nop
 8007fe4:	40023800 	.word	0x40023800
 8007fe8:	00f42400 	.word	0x00f42400
 8007fec:	007a1200 	.word	0x007a1200

08007ff0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007ff0:	b480      	push	{r7}
 8007ff2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007ff4:	4b03      	ldr	r3, [pc, #12]	; (8008004 <HAL_RCC_GetHCLKFreq+0x14>)
 8007ff6:	681b      	ldr	r3, [r3, #0]
}
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008000:	4770      	bx	lr
 8008002:	bf00      	nop
 8008004:	2000000c 	.word	0x2000000c

08008008 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008008:	b580      	push	{r7, lr}
 800800a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800800c:	f7ff fff0 	bl	8007ff0 <HAL_RCC_GetHCLKFreq>
 8008010:	4602      	mov	r2, r0
 8008012:	4b05      	ldr	r3, [pc, #20]	; (8008028 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008014:	689b      	ldr	r3, [r3, #8]
 8008016:	0a9b      	lsrs	r3, r3, #10
 8008018:	f003 0307 	and.w	r3, r3, #7
 800801c:	4903      	ldr	r1, [pc, #12]	; (800802c <HAL_RCC_GetPCLK1Freq+0x24>)
 800801e:	5ccb      	ldrb	r3, [r1, r3]
 8008020:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008024:	4618      	mov	r0, r3
 8008026:	bd80      	pop	{r7, pc}
 8008028:	40023800 	.word	0x40023800
 800802c:	0801441c 	.word	0x0801441c

08008030 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008030:	b580      	push	{r7, lr}
 8008032:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008034:	f7ff ffdc 	bl	8007ff0 <HAL_RCC_GetHCLKFreq>
 8008038:	4602      	mov	r2, r0
 800803a:	4b05      	ldr	r3, [pc, #20]	; (8008050 <HAL_RCC_GetPCLK2Freq+0x20>)
 800803c:	689b      	ldr	r3, [r3, #8]
 800803e:	0b5b      	lsrs	r3, r3, #13
 8008040:	f003 0307 	and.w	r3, r3, #7
 8008044:	4903      	ldr	r1, [pc, #12]	; (8008054 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008046:	5ccb      	ldrb	r3, [r1, r3]
 8008048:	fa22 f303 	lsr.w	r3, r2, r3
}
 800804c:	4618      	mov	r0, r3
 800804e:	bd80      	pop	{r7, pc}
 8008050:	40023800 	.word	0x40023800
 8008054:	0801441c 	.word	0x0801441c

08008058 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008058:	b580      	push	{r7, lr}
 800805a:	b082      	sub	sp, #8
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	2b00      	cmp	r3, #0
 8008064:	d101      	bne.n	800806a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008066:	2301      	movs	r3, #1
 8008068:	e07b      	b.n	8008162 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800806e:	2b00      	cmp	r3, #0
 8008070:	d108      	bne.n	8008084 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	685b      	ldr	r3, [r3, #4]
 8008076:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800807a:	d009      	beq.n	8008090 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	2200      	movs	r2, #0
 8008080:	61da      	str	r2, [r3, #28]
 8008082:	e005      	b.n	8008090 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2200      	movs	r2, #0
 8008088:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	2200      	movs	r2, #0
 800808e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	2200      	movs	r2, #0
 8008094:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800809c:	b2db      	uxtb	r3, r3
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d106      	bne.n	80080b0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	2200      	movs	r2, #0
 80080a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80080aa:	6878      	ldr	r0, [r7, #4]
 80080ac:	f7fb fd92 	bl	8003bd4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	2202      	movs	r2, #2
 80080b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	681a      	ldr	r2, [r3, #0]
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80080c6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	685b      	ldr	r3, [r3, #4]
 80080cc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	689b      	ldr	r3, [r3, #8]
 80080d4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80080d8:	431a      	orrs	r2, r3
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	68db      	ldr	r3, [r3, #12]
 80080de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80080e2:	431a      	orrs	r2, r3
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	691b      	ldr	r3, [r3, #16]
 80080e8:	f003 0302 	and.w	r3, r3, #2
 80080ec:	431a      	orrs	r2, r3
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	695b      	ldr	r3, [r3, #20]
 80080f2:	f003 0301 	and.w	r3, r3, #1
 80080f6:	431a      	orrs	r2, r3
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	699b      	ldr	r3, [r3, #24]
 80080fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008100:	431a      	orrs	r2, r3
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	69db      	ldr	r3, [r3, #28]
 8008106:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800810a:	431a      	orrs	r2, r3
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	6a1b      	ldr	r3, [r3, #32]
 8008110:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008114:	ea42 0103 	orr.w	r1, r2, r3
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800811c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	430a      	orrs	r2, r1
 8008126:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	699b      	ldr	r3, [r3, #24]
 800812c:	0c1b      	lsrs	r3, r3, #16
 800812e:	f003 0104 	and.w	r1, r3, #4
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008136:	f003 0210 	and.w	r2, r3, #16
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	430a      	orrs	r2, r1
 8008140:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	69da      	ldr	r2, [r3, #28]
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008150:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	2200      	movs	r2, #0
 8008156:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	2201      	movs	r2, #1
 800815c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8008160:	2300      	movs	r3, #0
}
 8008162:	4618      	mov	r0, r3
 8008164:	3708      	adds	r7, #8
 8008166:	46bd      	mov	sp, r7
 8008168:	bd80      	pop	{r7, pc}

0800816a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800816a:	b580      	push	{r7, lr}
 800816c:	b088      	sub	sp, #32
 800816e:	af00      	add	r7, sp, #0
 8008170:	60f8      	str	r0, [r7, #12]
 8008172:	60b9      	str	r1, [r7, #8]
 8008174:	603b      	str	r3, [r7, #0]
 8008176:	4613      	mov	r3, r2
 8008178:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800817a:	2300      	movs	r3, #0
 800817c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008184:	2b01      	cmp	r3, #1
 8008186:	d101      	bne.n	800818c <HAL_SPI_Transmit+0x22>
 8008188:	2302      	movs	r3, #2
 800818a:	e126      	b.n	80083da <HAL_SPI_Transmit+0x270>
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	2201      	movs	r2, #1
 8008190:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008194:	f7fd f97a 	bl	800548c <HAL_GetTick>
 8008198:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800819a:	88fb      	ldrh	r3, [r7, #6]
 800819c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80081a4:	b2db      	uxtb	r3, r3
 80081a6:	2b01      	cmp	r3, #1
 80081a8:	d002      	beq.n	80081b0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80081aa:	2302      	movs	r3, #2
 80081ac:	77fb      	strb	r3, [r7, #31]
    goto error;
 80081ae:	e10b      	b.n	80083c8 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80081b0:	68bb      	ldr	r3, [r7, #8]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d002      	beq.n	80081bc <HAL_SPI_Transmit+0x52>
 80081b6:	88fb      	ldrh	r3, [r7, #6]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d102      	bne.n	80081c2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80081bc:	2301      	movs	r3, #1
 80081be:	77fb      	strb	r3, [r7, #31]
    goto error;
 80081c0:	e102      	b.n	80083c8 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	2203      	movs	r2, #3
 80081c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	2200      	movs	r2, #0
 80081ce:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	68ba      	ldr	r2, [r7, #8]
 80081d4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	88fa      	ldrh	r2, [r7, #6]
 80081da:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	88fa      	ldrh	r2, [r7, #6]
 80081e0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	2200      	movs	r2, #0
 80081e6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	2200      	movs	r2, #0
 80081ec:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	2200      	movs	r2, #0
 80081f2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	2200      	movs	r2, #0
 80081f8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	2200      	movs	r2, #0
 80081fe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	689b      	ldr	r3, [r3, #8]
 8008204:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008208:	d10f      	bne.n	800822a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	681a      	ldr	r2, [r3, #0]
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008218:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	681a      	ldr	r2, [r3, #0]
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008228:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008234:	2b40      	cmp	r3, #64	; 0x40
 8008236:	d007      	beq.n	8008248 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	681a      	ldr	r2, [r3, #0]
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008246:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	68db      	ldr	r3, [r3, #12]
 800824c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008250:	d14b      	bne.n	80082ea <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	685b      	ldr	r3, [r3, #4]
 8008256:	2b00      	cmp	r3, #0
 8008258:	d002      	beq.n	8008260 <HAL_SPI_Transmit+0xf6>
 800825a:	8afb      	ldrh	r3, [r7, #22]
 800825c:	2b01      	cmp	r3, #1
 800825e:	d13e      	bne.n	80082de <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008264:	881a      	ldrh	r2, [r3, #0]
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008270:	1c9a      	adds	r2, r3, #2
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800827a:	b29b      	uxth	r3, r3
 800827c:	3b01      	subs	r3, #1
 800827e:	b29a      	uxth	r2, r3
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008284:	e02b      	b.n	80082de <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	689b      	ldr	r3, [r3, #8]
 800828c:	f003 0302 	and.w	r3, r3, #2
 8008290:	2b02      	cmp	r3, #2
 8008292:	d112      	bne.n	80082ba <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008298:	881a      	ldrh	r2, [r3, #0]
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082a4:	1c9a      	adds	r2, r3, #2
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80082ae:	b29b      	uxth	r3, r3
 80082b0:	3b01      	subs	r3, #1
 80082b2:	b29a      	uxth	r2, r3
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	86da      	strh	r2, [r3, #54]	; 0x36
 80082b8:	e011      	b.n	80082de <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80082ba:	f7fd f8e7 	bl	800548c <HAL_GetTick>
 80082be:	4602      	mov	r2, r0
 80082c0:	69bb      	ldr	r3, [r7, #24]
 80082c2:	1ad3      	subs	r3, r2, r3
 80082c4:	683a      	ldr	r2, [r7, #0]
 80082c6:	429a      	cmp	r2, r3
 80082c8:	d803      	bhi.n	80082d2 <HAL_SPI_Transmit+0x168>
 80082ca:	683b      	ldr	r3, [r7, #0]
 80082cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082d0:	d102      	bne.n	80082d8 <HAL_SPI_Transmit+0x16e>
 80082d2:	683b      	ldr	r3, [r7, #0]
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d102      	bne.n	80082de <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80082d8:	2303      	movs	r3, #3
 80082da:	77fb      	strb	r3, [r7, #31]
          goto error;
 80082dc:	e074      	b.n	80083c8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80082e2:	b29b      	uxth	r3, r3
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d1ce      	bne.n	8008286 <HAL_SPI_Transmit+0x11c>
 80082e8:	e04c      	b.n	8008384 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	685b      	ldr	r3, [r3, #4]
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d002      	beq.n	80082f8 <HAL_SPI_Transmit+0x18e>
 80082f2:	8afb      	ldrh	r3, [r7, #22]
 80082f4:	2b01      	cmp	r3, #1
 80082f6:	d140      	bne.n	800837a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	330c      	adds	r3, #12
 8008302:	7812      	ldrb	r2, [r2, #0]
 8008304:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800830a:	1c5a      	adds	r2, r3, #1
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008314:	b29b      	uxth	r3, r3
 8008316:	3b01      	subs	r3, #1
 8008318:	b29a      	uxth	r2, r3
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800831e:	e02c      	b.n	800837a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	689b      	ldr	r3, [r3, #8]
 8008326:	f003 0302 	and.w	r3, r3, #2
 800832a:	2b02      	cmp	r3, #2
 800832c:	d113      	bne.n	8008356 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	330c      	adds	r3, #12
 8008338:	7812      	ldrb	r2, [r2, #0]
 800833a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008340:	1c5a      	adds	r2, r3, #1
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800834a:	b29b      	uxth	r3, r3
 800834c:	3b01      	subs	r3, #1
 800834e:	b29a      	uxth	r2, r3
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	86da      	strh	r2, [r3, #54]	; 0x36
 8008354:	e011      	b.n	800837a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008356:	f7fd f899 	bl	800548c <HAL_GetTick>
 800835a:	4602      	mov	r2, r0
 800835c:	69bb      	ldr	r3, [r7, #24]
 800835e:	1ad3      	subs	r3, r2, r3
 8008360:	683a      	ldr	r2, [r7, #0]
 8008362:	429a      	cmp	r2, r3
 8008364:	d803      	bhi.n	800836e <HAL_SPI_Transmit+0x204>
 8008366:	683b      	ldr	r3, [r7, #0]
 8008368:	f1b3 3fff 	cmp.w	r3, #4294967295
 800836c:	d102      	bne.n	8008374 <HAL_SPI_Transmit+0x20a>
 800836e:	683b      	ldr	r3, [r7, #0]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d102      	bne.n	800837a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8008374:	2303      	movs	r3, #3
 8008376:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008378:	e026      	b.n	80083c8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800837e:	b29b      	uxth	r3, r3
 8008380:	2b00      	cmp	r3, #0
 8008382:	d1cd      	bne.n	8008320 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008384:	69ba      	ldr	r2, [r7, #24]
 8008386:	6839      	ldr	r1, [r7, #0]
 8008388:	68f8      	ldr	r0, [r7, #12]
 800838a:	f000 fa63 	bl	8008854 <SPI_EndRxTxTransaction>
 800838e:	4603      	mov	r3, r0
 8008390:	2b00      	cmp	r3, #0
 8008392:	d002      	beq.n	800839a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	2220      	movs	r2, #32
 8008398:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	689b      	ldr	r3, [r3, #8]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d10a      	bne.n	80083b8 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80083a2:	2300      	movs	r3, #0
 80083a4:	613b      	str	r3, [r7, #16]
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	68db      	ldr	r3, [r3, #12]
 80083ac:	613b      	str	r3, [r7, #16]
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	689b      	ldr	r3, [r3, #8]
 80083b4:	613b      	str	r3, [r7, #16]
 80083b6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d002      	beq.n	80083c6 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80083c0:	2301      	movs	r3, #1
 80083c2:	77fb      	strb	r3, [r7, #31]
 80083c4:	e000      	b.n	80083c8 <HAL_SPI_Transmit+0x25e>
  }

error:
 80083c6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	2201      	movs	r2, #1
 80083cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	2200      	movs	r2, #0
 80083d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80083d8:	7ffb      	ldrb	r3, [r7, #31]
}
 80083da:	4618      	mov	r0, r3
 80083dc:	3720      	adds	r7, #32
 80083de:	46bd      	mov	sp, r7
 80083e0:	bd80      	pop	{r7, pc}

080083e2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80083e2:	b580      	push	{r7, lr}
 80083e4:	b08c      	sub	sp, #48	; 0x30
 80083e6:	af00      	add	r7, sp, #0
 80083e8:	60f8      	str	r0, [r7, #12]
 80083ea:	60b9      	str	r1, [r7, #8]
 80083ec:	607a      	str	r2, [r7, #4]
 80083ee:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80083f0:	2301      	movs	r3, #1
 80083f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80083f4:	2300      	movs	r3, #0
 80083f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008400:	2b01      	cmp	r3, #1
 8008402:	d101      	bne.n	8008408 <HAL_SPI_TransmitReceive+0x26>
 8008404:	2302      	movs	r3, #2
 8008406:	e18a      	b.n	800871e <HAL_SPI_TransmitReceive+0x33c>
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	2201      	movs	r2, #1
 800840c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008410:	f7fd f83c 	bl	800548c <HAL_GetTick>
 8008414:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800841c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	685b      	ldr	r3, [r3, #4]
 8008424:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8008426:	887b      	ldrh	r3, [r7, #2]
 8008428:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800842a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800842e:	2b01      	cmp	r3, #1
 8008430:	d00f      	beq.n	8008452 <HAL_SPI_TransmitReceive+0x70>
 8008432:	69fb      	ldr	r3, [r7, #28]
 8008434:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008438:	d107      	bne.n	800844a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	689b      	ldr	r3, [r3, #8]
 800843e:	2b00      	cmp	r3, #0
 8008440:	d103      	bne.n	800844a <HAL_SPI_TransmitReceive+0x68>
 8008442:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008446:	2b04      	cmp	r3, #4
 8008448:	d003      	beq.n	8008452 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800844a:	2302      	movs	r3, #2
 800844c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008450:	e15b      	b.n	800870a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008452:	68bb      	ldr	r3, [r7, #8]
 8008454:	2b00      	cmp	r3, #0
 8008456:	d005      	beq.n	8008464 <HAL_SPI_TransmitReceive+0x82>
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	2b00      	cmp	r3, #0
 800845c:	d002      	beq.n	8008464 <HAL_SPI_TransmitReceive+0x82>
 800845e:	887b      	ldrh	r3, [r7, #2]
 8008460:	2b00      	cmp	r3, #0
 8008462:	d103      	bne.n	800846c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8008464:	2301      	movs	r3, #1
 8008466:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800846a:	e14e      	b.n	800870a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008472:	b2db      	uxtb	r3, r3
 8008474:	2b04      	cmp	r3, #4
 8008476:	d003      	beq.n	8008480 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	2205      	movs	r2, #5
 800847c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	2200      	movs	r2, #0
 8008484:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	687a      	ldr	r2, [r7, #4]
 800848a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	887a      	ldrh	r2, [r7, #2]
 8008490:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	887a      	ldrh	r2, [r7, #2]
 8008496:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	68ba      	ldr	r2, [r7, #8]
 800849c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	887a      	ldrh	r2, [r7, #2]
 80084a2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	887a      	ldrh	r2, [r7, #2]
 80084a8:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	2200      	movs	r2, #0
 80084ae:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	2200      	movs	r2, #0
 80084b4:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084c0:	2b40      	cmp	r3, #64	; 0x40
 80084c2:	d007      	beq.n	80084d4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	681a      	ldr	r2, [r3, #0]
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80084d2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	68db      	ldr	r3, [r3, #12]
 80084d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80084dc:	d178      	bne.n	80085d0 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	685b      	ldr	r3, [r3, #4]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d002      	beq.n	80084ec <HAL_SPI_TransmitReceive+0x10a>
 80084e6:	8b7b      	ldrh	r3, [r7, #26]
 80084e8:	2b01      	cmp	r3, #1
 80084ea:	d166      	bne.n	80085ba <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084f0:	881a      	ldrh	r2, [r3, #0]
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084fc:	1c9a      	adds	r2, r3, #2
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008506:	b29b      	uxth	r3, r3
 8008508:	3b01      	subs	r3, #1
 800850a:	b29a      	uxth	r2, r3
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008510:	e053      	b.n	80085ba <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	689b      	ldr	r3, [r3, #8]
 8008518:	f003 0302 	and.w	r3, r3, #2
 800851c:	2b02      	cmp	r3, #2
 800851e:	d11b      	bne.n	8008558 <HAL_SPI_TransmitReceive+0x176>
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008524:	b29b      	uxth	r3, r3
 8008526:	2b00      	cmp	r3, #0
 8008528:	d016      	beq.n	8008558 <HAL_SPI_TransmitReceive+0x176>
 800852a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800852c:	2b01      	cmp	r3, #1
 800852e:	d113      	bne.n	8008558 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008534:	881a      	ldrh	r2, [r3, #0]
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008540:	1c9a      	adds	r2, r3, #2
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800854a:	b29b      	uxth	r3, r3
 800854c:	3b01      	subs	r3, #1
 800854e:	b29a      	uxth	r2, r3
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008554:	2300      	movs	r3, #0
 8008556:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	689b      	ldr	r3, [r3, #8]
 800855e:	f003 0301 	and.w	r3, r3, #1
 8008562:	2b01      	cmp	r3, #1
 8008564:	d119      	bne.n	800859a <HAL_SPI_TransmitReceive+0x1b8>
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800856a:	b29b      	uxth	r3, r3
 800856c:	2b00      	cmp	r3, #0
 800856e:	d014      	beq.n	800859a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	68da      	ldr	r2, [r3, #12]
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800857a:	b292      	uxth	r2, r2
 800857c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008582:	1c9a      	adds	r2, r3, #2
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800858c:	b29b      	uxth	r3, r3
 800858e:	3b01      	subs	r3, #1
 8008590:	b29a      	uxth	r2, r3
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008596:	2301      	movs	r3, #1
 8008598:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800859a:	f7fc ff77 	bl	800548c <HAL_GetTick>
 800859e:	4602      	mov	r2, r0
 80085a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085a2:	1ad3      	subs	r3, r2, r3
 80085a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80085a6:	429a      	cmp	r2, r3
 80085a8:	d807      	bhi.n	80085ba <HAL_SPI_TransmitReceive+0x1d8>
 80085aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085b0:	d003      	beq.n	80085ba <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80085b2:	2303      	movs	r3, #3
 80085b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80085b8:	e0a7      	b.n	800870a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80085be:	b29b      	uxth	r3, r3
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d1a6      	bne.n	8008512 <HAL_SPI_TransmitReceive+0x130>
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80085c8:	b29b      	uxth	r3, r3
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d1a1      	bne.n	8008512 <HAL_SPI_TransmitReceive+0x130>
 80085ce:	e07c      	b.n	80086ca <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	685b      	ldr	r3, [r3, #4]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d002      	beq.n	80085de <HAL_SPI_TransmitReceive+0x1fc>
 80085d8:	8b7b      	ldrh	r3, [r7, #26]
 80085da:	2b01      	cmp	r3, #1
 80085dc:	d16b      	bne.n	80086b6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	330c      	adds	r3, #12
 80085e8:	7812      	ldrb	r2, [r2, #0]
 80085ea:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085f0:	1c5a      	adds	r2, r3, #1
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80085fa:	b29b      	uxth	r3, r3
 80085fc:	3b01      	subs	r3, #1
 80085fe:	b29a      	uxth	r2, r3
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008604:	e057      	b.n	80086b6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	689b      	ldr	r3, [r3, #8]
 800860c:	f003 0302 	and.w	r3, r3, #2
 8008610:	2b02      	cmp	r3, #2
 8008612:	d11c      	bne.n	800864e <HAL_SPI_TransmitReceive+0x26c>
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008618:	b29b      	uxth	r3, r3
 800861a:	2b00      	cmp	r3, #0
 800861c:	d017      	beq.n	800864e <HAL_SPI_TransmitReceive+0x26c>
 800861e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008620:	2b01      	cmp	r3, #1
 8008622:	d114      	bne.n	800864e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	330c      	adds	r3, #12
 800862e:	7812      	ldrb	r2, [r2, #0]
 8008630:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008636:	1c5a      	adds	r2, r3, #1
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008640:	b29b      	uxth	r3, r3
 8008642:	3b01      	subs	r3, #1
 8008644:	b29a      	uxth	r2, r3
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800864a:	2300      	movs	r3, #0
 800864c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	689b      	ldr	r3, [r3, #8]
 8008654:	f003 0301 	and.w	r3, r3, #1
 8008658:	2b01      	cmp	r3, #1
 800865a:	d119      	bne.n	8008690 <HAL_SPI_TransmitReceive+0x2ae>
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008660:	b29b      	uxth	r3, r3
 8008662:	2b00      	cmp	r3, #0
 8008664:	d014      	beq.n	8008690 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	68da      	ldr	r2, [r3, #12]
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008670:	b2d2      	uxtb	r2, r2
 8008672:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008678:	1c5a      	adds	r2, r3, #1
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008682:	b29b      	uxth	r3, r3
 8008684:	3b01      	subs	r3, #1
 8008686:	b29a      	uxth	r2, r3
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800868c:	2301      	movs	r3, #1
 800868e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008690:	f7fc fefc 	bl	800548c <HAL_GetTick>
 8008694:	4602      	mov	r2, r0
 8008696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008698:	1ad3      	subs	r3, r2, r3
 800869a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800869c:	429a      	cmp	r2, r3
 800869e:	d803      	bhi.n	80086a8 <HAL_SPI_TransmitReceive+0x2c6>
 80086a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086a6:	d102      	bne.n	80086ae <HAL_SPI_TransmitReceive+0x2cc>
 80086a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d103      	bne.n	80086b6 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80086ae:	2303      	movs	r3, #3
 80086b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80086b4:	e029      	b.n	800870a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80086ba:	b29b      	uxth	r3, r3
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d1a2      	bne.n	8008606 <HAL_SPI_TransmitReceive+0x224>
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80086c4:	b29b      	uxth	r3, r3
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d19d      	bne.n	8008606 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80086ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80086cc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80086ce:	68f8      	ldr	r0, [r7, #12]
 80086d0:	f000 f8c0 	bl	8008854 <SPI_EndRxTxTransaction>
 80086d4:	4603      	mov	r3, r0
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d006      	beq.n	80086e8 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80086da:	2301      	movs	r3, #1
 80086dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	2220      	movs	r2, #32
 80086e4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80086e6:	e010      	b.n	800870a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	689b      	ldr	r3, [r3, #8]
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d10b      	bne.n	8008708 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80086f0:	2300      	movs	r3, #0
 80086f2:	617b      	str	r3, [r7, #20]
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	68db      	ldr	r3, [r3, #12]
 80086fa:	617b      	str	r3, [r7, #20]
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	689b      	ldr	r3, [r3, #8]
 8008702:	617b      	str	r3, [r7, #20]
 8008704:	697b      	ldr	r3, [r7, #20]
 8008706:	e000      	b.n	800870a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8008708:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	2201      	movs	r2, #1
 800870e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	2200      	movs	r2, #0
 8008716:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800871a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800871e:	4618      	mov	r0, r3
 8008720:	3730      	adds	r7, #48	; 0x30
 8008722:	46bd      	mov	sp, r7
 8008724:	bd80      	pop	{r7, pc}

08008726 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8008726:	b480      	push	{r7}
 8008728:	b083      	sub	sp, #12
 800872a:	af00      	add	r7, sp, #0
 800872c:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008734:	b2db      	uxtb	r3, r3
}
 8008736:	4618      	mov	r0, r3
 8008738:	370c      	adds	r7, #12
 800873a:	46bd      	mov	sp, r7
 800873c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008740:	4770      	bx	lr
	...

08008744 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008744:	b580      	push	{r7, lr}
 8008746:	b088      	sub	sp, #32
 8008748:	af00      	add	r7, sp, #0
 800874a:	60f8      	str	r0, [r7, #12]
 800874c:	60b9      	str	r1, [r7, #8]
 800874e:	603b      	str	r3, [r7, #0]
 8008750:	4613      	mov	r3, r2
 8008752:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008754:	f7fc fe9a 	bl	800548c <HAL_GetTick>
 8008758:	4602      	mov	r2, r0
 800875a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800875c:	1a9b      	subs	r3, r3, r2
 800875e:	683a      	ldr	r2, [r7, #0]
 8008760:	4413      	add	r3, r2
 8008762:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008764:	f7fc fe92 	bl	800548c <HAL_GetTick>
 8008768:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800876a:	4b39      	ldr	r3, [pc, #228]	; (8008850 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	015b      	lsls	r3, r3, #5
 8008770:	0d1b      	lsrs	r3, r3, #20
 8008772:	69fa      	ldr	r2, [r7, #28]
 8008774:	fb02 f303 	mul.w	r3, r2, r3
 8008778:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800877a:	e054      	b.n	8008826 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800877c:	683b      	ldr	r3, [r7, #0]
 800877e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008782:	d050      	beq.n	8008826 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008784:	f7fc fe82 	bl	800548c <HAL_GetTick>
 8008788:	4602      	mov	r2, r0
 800878a:	69bb      	ldr	r3, [r7, #24]
 800878c:	1ad3      	subs	r3, r2, r3
 800878e:	69fa      	ldr	r2, [r7, #28]
 8008790:	429a      	cmp	r2, r3
 8008792:	d902      	bls.n	800879a <SPI_WaitFlagStateUntilTimeout+0x56>
 8008794:	69fb      	ldr	r3, [r7, #28]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d13d      	bne.n	8008816 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	685a      	ldr	r2, [r3, #4]
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80087a8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	685b      	ldr	r3, [r3, #4]
 80087ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80087b2:	d111      	bne.n	80087d8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	689b      	ldr	r3, [r3, #8]
 80087b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80087bc:	d004      	beq.n	80087c8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	689b      	ldr	r3, [r3, #8]
 80087c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80087c6:	d107      	bne.n	80087d8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	681a      	ldr	r2, [r3, #0]
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80087d6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80087e0:	d10f      	bne.n	8008802 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	681a      	ldr	r2, [r3, #0]
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80087f0:	601a      	str	r2, [r3, #0]
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	681a      	ldr	r2, [r3, #0]
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008800:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	2201      	movs	r2, #1
 8008806:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	2200      	movs	r2, #0
 800880e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8008812:	2303      	movs	r3, #3
 8008814:	e017      	b.n	8008846 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008816:	697b      	ldr	r3, [r7, #20]
 8008818:	2b00      	cmp	r3, #0
 800881a:	d101      	bne.n	8008820 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800881c:	2300      	movs	r3, #0
 800881e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008820:	697b      	ldr	r3, [r7, #20]
 8008822:	3b01      	subs	r3, #1
 8008824:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	689a      	ldr	r2, [r3, #8]
 800882c:	68bb      	ldr	r3, [r7, #8]
 800882e:	4013      	ands	r3, r2
 8008830:	68ba      	ldr	r2, [r7, #8]
 8008832:	429a      	cmp	r2, r3
 8008834:	bf0c      	ite	eq
 8008836:	2301      	moveq	r3, #1
 8008838:	2300      	movne	r3, #0
 800883a:	b2db      	uxtb	r3, r3
 800883c:	461a      	mov	r2, r3
 800883e:	79fb      	ldrb	r3, [r7, #7]
 8008840:	429a      	cmp	r2, r3
 8008842:	d19b      	bne.n	800877c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008844:	2300      	movs	r3, #0
}
 8008846:	4618      	mov	r0, r3
 8008848:	3720      	adds	r7, #32
 800884a:	46bd      	mov	sp, r7
 800884c:	bd80      	pop	{r7, pc}
 800884e:	bf00      	nop
 8008850:	2000000c 	.word	0x2000000c

08008854 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008854:	b580      	push	{r7, lr}
 8008856:	b088      	sub	sp, #32
 8008858:	af02      	add	r7, sp, #8
 800885a:	60f8      	str	r0, [r7, #12]
 800885c:	60b9      	str	r1, [r7, #8]
 800885e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008860:	4b1b      	ldr	r3, [pc, #108]	; (80088d0 <SPI_EndRxTxTransaction+0x7c>)
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	4a1b      	ldr	r2, [pc, #108]	; (80088d4 <SPI_EndRxTxTransaction+0x80>)
 8008866:	fba2 2303 	umull	r2, r3, r2, r3
 800886a:	0d5b      	lsrs	r3, r3, #21
 800886c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008870:	fb02 f303 	mul.w	r3, r2, r3
 8008874:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	685b      	ldr	r3, [r3, #4]
 800887a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800887e:	d112      	bne.n	80088a6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	9300      	str	r3, [sp, #0]
 8008884:	68bb      	ldr	r3, [r7, #8]
 8008886:	2200      	movs	r2, #0
 8008888:	2180      	movs	r1, #128	; 0x80
 800888a:	68f8      	ldr	r0, [r7, #12]
 800888c:	f7ff ff5a 	bl	8008744 <SPI_WaitFlagStateUntilTimeout>
 8008890:	4603      	mov	r3, r0
 8008892:	2b00      	cmp	r3, #0
 8008894:	d016      	beq.n	80088c4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800889a:	f043 0220 	orr.w	r2, r3, #32
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80088a2:	2303      	movs	r3, #3
 80088a4:	e00f      	b.n	80088c6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80088a6:	697b      	ldr	r3, [r7, #20]
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d00a      	beq.n	80088c2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80088ac:	697b      	ldr	r3, [r7, #20]
 80088ae:	3b01      	subs	r3, #1
 80088b0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	689b      	ldr	r3, [r3, #8]
 80088b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088bc:	2b80      	cmp	r3, #128	; 0x80
 80088be:	d0f2      	beq.n	80088a6 <SPI_EndRxTxTransaction+0x52>
 80088c0:	e000      	b.n	80088c4 <SPI_EndRxTxTransaction+0x70>
        break;
 80088c2:	bf00      	nop
  }

  return HAL_OK;
 80088c4:	2300      	movs	r3, #0
}
 80088c6:	4618      	mov	r0, r3
 80088c8:	3718      	adds	r7, #24
 80088ca:	46bd      	mov	sp, r7
 80088cc:	bd80      	pop	{r7, pc}
 80088ce:	bf00      	nop
 80088d0:	2000000c 	.word	0x2000000c
 80088d4:	165e9f81 	.word	0x165e9f81

080088d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80088d8:	b580      	push	{r7, lr}
 80088da:	b082      	sub	sp, #8
 80088dc:	af00      	add	r7, sp, #0
 80088de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d101      	bne.n	80088ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80088e6:	2301      	movs	r3, #1
 80088e8:	e041      	b.n	800896e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80088f0:	b2db      	uxtb	r3, r3
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d106      	bne.n	8008904 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	2200      	movs	r2, #0
 80088fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80088fe:	6878      	ldr	r0, [r7, #4]
 8008900:	f7fb f9b0 	bl	8003c64 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	2202      	movs	r2, #2
 8008908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681a      	ldr	r2, [r3, #0]
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	3304      	adds	r3, #4
 8008914:	4619      	mov	r1, r3
 8008916:	4610      	mov	r0, r2
 8008918:	f000 fdec 	bl	80094f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	2201      	movs	r2, #1
 8008920:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	2201      	movs	r2, #1
 8008928:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	2201      	movs	r2, #1
 8008930:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	2201      	movs	r2, #1
 8008938:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	2201      	movs	r2, #1
 8008940:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	2201      	movs	r2, #1
 8008948:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	2201      	movs	r2, #1
 8008950:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	2201      	movs	r2, #1
 8008958:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	2201      	movs	r2, #1
 8008960:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	2201      	movs	r2, #1
 8008968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800896c:	2300      	movs	r3, #0
}
 800896e:	4618      	mov	r0, r3
 8008970:	3708      	adds	r7, #8
 8008972:	46bd      	mov	sp, r7
 8008974:	bd80      	pop	{r7, pc}
	...

08008978 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008978:	b480      	push	{r7}
 800897a:	b085      	sub	sp, #20
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008986:	b2db      	uxtb	r3, r3
 8008988:	2b01      	cmp	r3, #1
 800898a:	d001      	beq.n	8008990 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800898c:	2301      	movs	r3, #1
 800898e:	e04e      	b.n	8008a2e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	2202      	movs	r2, #2
 8008994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	68da      	ldr	r2, [r3, #12]
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	f042 0201 	orr.w	r2, r2, #1
 80089a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	4a23      	ldr	r2, [pc, #140]	; (8008a3c <HAL_TIM_Base_Start_IT+0xc4>)
 80089ae:	4293      	cmp	r3, r2
 80089b0:	d022      	beq.n	80089f8 <HAL_TIM_Base_Start_IT+0x80>
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80089ba:	d01d      	beq.n	80089f8 <HAL_TIM_Base_Start_IT+0x80>
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	4a1f      	ldr	r2, [pc, #124]	; (8008a40 <HAL_TIM_Base_Start_IT+0xc8>)
 80089c2:	4293      	cmp	r3, r2
 80089c4:	d018      	beq.n	80089f8 <HAL_TIM_Base_Start_IT+0x80>
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	4a1e      	ldr	r2, [pc, #120]	; (8008a44 <HAL_TIM_Base_Start_IT+0xcc>)
 80089cc:	4293      	cmp	r3, r2
 80089ce:	d013      	beq.n	80089f8 <HAL_TIM_Base_Start_IT+0x80>
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	4a1c      	ldr	r2, [pc, #112]	; (8008a48 <HAL_TIM_Base_Start_IT+0xd0>)
 80089d6:	4293      	cmp	r3, r2
 80089d8:	d00e      	beq.n	80089f8 <HAL_TIM_Base_Start_IT+0x80>
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	4a1b      	ldr	r2, [pc, #108]	; (8008a4c <HAL_TIM_Base_Start_IT+0xd4>)
 80089e0:	4293      	cmp	r3, r2
 80089e2:	d009      	beq.n	80089f8 <HAL_TIM_Base_Start_IT+0x80>
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	4a19      	ldr	r2, [pc, #100]	; (8008a50 <HAL_TIM_Base_Start_IT+0xd8>)
 80089ea:	4293      	cmp	r3, r2
 80089ec:	d004      	beq.n	80089f8 <HAL_TIM_Base_Start_IT+0x80>
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	4a18      	ldr	r2, [pc, #96]	; (8008a54 <HAL_TIM_Base_Start_IT+0xdc>)
 80089f4:	4293      	cmp	r3, r2
 80089f6:	d111      	bne.n	8008a1c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	689b      	ldr	r3, [r3, #8]
 80089fe:	f003 0307 	and.w	r3, r3, #7
 8008a02:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	2b06      	cmp	r3, #6
 8008a08:	d010      	beq.n	8008a2c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	681a      	ldr	r2, [r3, #0]
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	f042 0201 	orr.w	r2, r2, #1
 8008a18:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a1a:	e007      	b.n	8008a2c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	681a      	ldr	r2, [r3, #0]
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	f042 0201 	orr.w	r2, r2, #1
 8008a2a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008a2c:	2300      	movs	r3, #0
}
 8008a2e:	4618      	mov	r0, r3
 8008a30:	3714      	adds	r7, #20
 8008a32:	46bd      	mov	sp, r7
 8008a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a38:	4770      	bx	lr
 8008a3a:	bf00      	nop
 8008a3c:	40010000 	.word	0x40010000
 8008a40:	40000400 	.word	0x40000400
 8008a44:	40000800 	.word	0x40000800
 8008a48:	40000c00 	.word	0x40000c00
 8008a4c:	40010400 	.word	0x40010400
 8008a50:	40014000 	.word	0x40014000
 8008a54:	40001800 	.word	0x40001800

08008a58 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008a58:	b580      	push	{r7, lr}
 8008a5a:	b082      	sub	sp, #8
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d101      	bne.n	8008a6a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008a66:	2301      	movs	r3, #1
 8008a68:	e041      	b.n	8008aee <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a70:	b2db      	uxtb	r3, r3
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d106      	bne.n	8008a84 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	2200      	movs	r2, #0
 8008a7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008a7e:	6878      	ldr	r0, [r7, #4]
 8008a80:	f000 f839 	bl	8008af6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	2202      	movs	r2, #2
 8008a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681a      	ldr	r2, [r3, #0]
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	3304      	adds	r3, #4
 8008a94:	4619      	mov	r1, r3
 8008a96:	4610      	mov	r0, r2
 8008a98:	f000 fd2c 	bl	80094f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	2201      	movs	r2, #1
 8008aa0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	2201      	movs	r2, #1
 8008aa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	2201      	movs	r2, #1
 8008ab0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	2201      	movs	r2, #1
 8008ab8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	2201      	movs	r2, #1
 8008ac0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	2201      	movs	r2, #1
 8008ac8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	2201      	movs	r2, #1
 8008ad0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	2201      	movs	r2, #1
 8008ad8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	2201      	movs	r2, #1
 8008ae0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	2201      	movs	r2, #1
 8008ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008aec:	2300      	movs	r3, #0
}
 8008aee:	4618      	mov	r0, r3
 8008af0:	3708      	adds	r7, #8
 8008af2:	46bd      	mov	sp, r7
 8008af4:	bd80      	pop	{r7, pc}

08008af6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008af6:	b480      	push	{r7}
 8008af8:	b083      	sub	sp, #12
 8008afa:	af00      	add	r7, sp, #0
 8008afc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008afe:	bf00      	nop
 8008b00:	370c      	adds	r7, #12
 8008b02:	46bd      	mov	sp, r7
 8008b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b08:	4770      	bx	lr
	...

08008b0c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008b0c:	b580      	push	{r7, lr}
 8008b0e:	b084      	sub	sp, #16
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	6078      	str	r0, [r7, #4]
 8008b14:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008b16:	683b      	ldr	r3, [r7, #0]
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d109      	bne.n	8008b30 <HAL_TIM_PWM_Start+0x24>
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008b22:	b2db      	uxtb	r3, r3
 8008b24:	2b01      	cmp	r3, #1
 8008b26:	bf14      	ite	ne
 8008b28:	2301      	movne	r3, #1
 8008b2a:	2300      	moveq	r3, #0
 8008b2c:	b2db      	uxtb	r3, r3
 8008b2e:	e022      	b.n	8008b76 <HAL_TIM_PWM_Start+0x6a>
 8008b30:	683b      	ldr	r3, [r7, #0]
 8008b32:	2b04      	cmp	r3, #4
 8008b34:	d109      	bne.n	8008b4a <HAL_TIM_PWM_Start+0x3e>
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008b3c:	b2db      	uxtb	r3, r3
 8008b3e:	2b01      	cmp	r3, #1
 8008b40:	bf14      	ite	ne
 8008b42:	2301      	movne	r3, #1
 8008b44:	2300      	moveq	r3, #0
 8008b46:	b2db      	uxtb	r3, r3
 8008b48:	e015      	b.n	8008b76 <HAL_TIM_PWM_Start+0x6a>
 8008b4a:	683b      	ldr	r3, [r7, #0]
 8008b4c:	2b08      	cmp	r3, #8
 8008b4e:	d109      	bne.n	8008b64 <HAL_TIM_PWM_Start+0x58>
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008b56:	b2db      	uxtb	r3, r3
 8008b58:	2b01      	cmp	r3, #1
 8008b5a:	bf14      	ite	ne
 8008b5c:	2301      	movne	r3, #1
 8008b5e:	2300      	moveq	r3, #0
 8008b60:	b2db      	uxtb	r3, r3
 8008b62:	e008      	b.n	8008b76 <HAL_TIM_PWM_Start+0x6a>
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008b6a:	b2db      	uxtb	r3, r3
 8008b6c:	2b01      	cmp	r3, #1
 8008b6e:	bf14      	ite	ne
 8008b70:	2301      	movne	r3, #1
 8008b72:	2300      	moveq	r3, #0
 8008b74:	b2db      	uxtb	r3, r3
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d001      	beq.n	8008b7e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8008b7a:	2301      	movs	r3, #1
 8008b7c:	e07c      	b.n	8008c78 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008b7e:	683b      	ldr	r3, [r7, #0]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d104      	bne.n	8008b8e <HAL_TIM_PWM_Start+0x82>
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	2202      	movs	r2, #2
 8008b88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008b8c:	e013      	b.n	8008bb6 <HAL_TIM_PWM_Start+0xaa>
 8008b8e:	683b      	ldr	r3, [r7, #0]
 8008b90:	2b04      	cmp	r3, #4
 8008b92:	d104      	bne.n	8008b9e <HAL_TIM_PWM_Start+0x92>
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	2202      	movs	r2, #2
 8008b98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008b9c:	e00b      	b.n	8008bb6 <HAL_TIM_PWM_Start+0xaa>
 8008b9e:	683b      	ldr	r3, [r7, #0]
 8008ba0:	2b08      	cmp	r3, #8
 8008ba2:	d104      	bne.n	8008bae <HAL_TIM_PWM_Start+0xa2>
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	2202      	movs	r2, #2
 8008ba8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008bac:	e003      	b.n	8008bb6 <HAL_TIM_PWM_Start+0xaa>
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	2202      	movs	r2, #2
 8008bb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	2201      	movs	r2, #1
 8008bbc:	6839      	ldr	r1, [r7, #0]
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	f001 f93e 	bl	8009e40 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	4a2d      	ldr	r2, [pc, #180]	; (8008c80 <HAL_TIM_PWM_Start+0x174>)
 8008bca:	4293      	cmp	r3, r2
 8008bcc:	d004      	beq.n	8008bd8 <HAL_TIM_PWM_Start+0xcc>
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	4a2c      	ldr	r2, [pc, #176]	; (8008c84 <HAL_TIM_PWM_Start+0x178>)
 8008bd4:	4293      	cmp	r3, r2
 8008bd6:	d101      	bne.n	8008bdc <HAL_TIM_PWM_Start+0xd0>
 8008bd8:	2301      	movs	r3, #1
 8008bda:	e000      	b.n	8008bde <HAL_TIM_PWM_Start+0xd2>
 8008bdc:	2300      	movs	r3, #0
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d007      	beq.n	8008bf2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008bf0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	4a22      	ldr	r2, [pc, #136]	; (8008c80 <HAL_TIM_PWM_Start+0x174>)
 8008bf8:	4293      	cmp	r3, r2
 8008bfa:	d022      	beq.n	8008c42 <HAL_TIM_PWM_Start+0x136>
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c04:	d01d      	beq.n	8008c42 <HAL_TIM_PWM_Start+0x136>
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	4a1f      	ldr	r2, [pc, #124]	; (8008c88 <HAL_TIM_PWM_Start+0x17c>)
 8008c0c:	4293      	cmp	r3, r2
 8008c0e:	d018      	beq.n	8008c42 <HAL_TIM_PWM_Start+0x136>
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	4a1d      	ldr	r2, [pc, #116]	; (8008c8c <HAL_TIM_PWM_Start+0x180>)
 8008c16:	4293      	cmp	r3, r2
 8008c18:	d013      	beq.n	8008c42 <HAL_TIM_PWM_Start+0x136>
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	4a1c      	ldr	r2, [pc, #112]	; (8008c90 <HAL_TIM_PWM_Start+0x184>)
 8008c20:	4293      	cmp	r3, r2
 8008c22:	d00e      	beq.n	8008c42 <HAL_TIM_PWM_Start+0x136>
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	4a16      	ldr	r2, [pc, #88]	; (8008c84 <HAL_TIM_PWM_Start+0x178>)
 8008c2a:	4293      	cmp	r3, r2
 8008c2c:	d009      	beq.n	8008c42 <HAL_TIM_PWM_Start+0x136>
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	4a18      	ldr	r2, [pc, #96]	; (8008c94 <HAL_TIM_PWM_Start+0x188>)
 8008c34:	4293      	cmp	r3, r2
 8008c36:	d004      	beq.n	8008c42 <HAL_TIM_PWM_Start+0x136>
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	4a16      	ldr	r2, [pc, #88]	; (8008c98 <HAL_TIM_PWM_Start+0x18c>)
 8008c3e:	4293      	cmp	r3, r2
 8008c40:	d111      	bne.n	8008c66 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	689b      	ldr	r3, [r3, #8]
 8008c48:	f003 0307 	and.w	r3, r3, #7
 8008c4c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	2b06      	cmp	r3, #6
 8008c52:	d010      	beq.n	8008c76 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	681a      	ldr	r2, [r3, #0]
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	f042 0201 	orr.w	r2, r2, #1
 8008c62:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c64:	e007      	b.n	8008c76 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	681a      	ldr	r2, [r3, #0]
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	f042 0201 	orr.w	r2, r2, #1
 8008c74:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008c76:	2300      	movs	r3, #0
}
 8008c78:	4618      	mov	r0, r3
 8008c7a:	3710      	adds	r7, #16
 8008c7c:	46bd      	mov	sp, r7
 8008c7e:	bd80      	pop	{r7, pc}
 8008c80:	40010000 	.word	0x40010000
 8008c84:	40010400 	.word	0x40010400
 8008c88:	40000400 	.word	0x40000400
 8008c8c:	40000800 	.word	0x40000800
 8008c90:	40000c00 	.word	0x40000c00
 8008c94:	40014000 	.word	0x40014000
 8008c98:	40001800 	.word	0x40001800

08008c9c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8008c9c:	b580      	push	{r7, lr}
 8008c9e:	b082      	sub	sp, #8
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d101      	bne.n	8008cae <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8008caa:	2301      	movs	r3, #1
 8008cac:	e041      	b.n	8008d32 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008cb4:	b2db      	uxtb	r3, r3
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d106      	bne.n	8008cc8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	2200      	movs	r2, #0
 8008cbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8008cc2:	6878      	ldr	r0, [r7, #4]
 8008cc4:	f000 f839 	bl	8008d3a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	2202      	movs	r2, #2
 8008ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681a      	ldr	r2, [r3, #0]
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	3304      	adds	r3, #4
 8008cd8:	4619      	mov	r1, r3
 8008cda:	4610      	mov	r0, r2
 8008cdc:	f000 fc0a 	bl	80094f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	2201      	movs	r2, #1
 8008ce4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	2201      	movs	r2, #1
 8008cec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	2201      	movs	r2, #1
 8008cf4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	2201      	movs	r2, #1
 8008cfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	2201      	movs	r2, #1
 8008d04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	2201      	movs	r2, #1
 8008d0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	2201      	movs	r2, #1
 8008d14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	2201      	movs	r2, #1
 8008d1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	2201      	movs	r2, #1
 8008d24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	2201      	movs	r2, #1
 8008d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008d30:	2300      	movs	r3, #0
}
 8008d32:	4618      	mov	r0, r3
 8008d34:	3708      	adds	r7, #8
 8008d36:	46bd      	mov	sp, r7
 8008d38:	bd80      	pop	{r7, pc}

08008d3a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8008d3a:	b480      	push	{r7}
 8008d3c:	b083      	sub	sp, #12
 8008d3e:	af00      	add	r7, sp, #0
 8008d40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8008d42:	bf00      	nop
 8008d44:	370c      	adds	r7, #12
 8008d46:	46bd      	mov	sp, r7
 8008d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4c:	4770      	bx	lr

08008d4e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008d4e:	b580      	push	{r7, lr}
 8008d50:	b082      	sub	sp, #8
 8008d52:	af00      	add	r7, sp, #0
 8008d54:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	691b      	ldr	r3, [r3, #16]
 8008d5c:	f003 0302 	and.w	r3, r3, #2
 8008d60:	2b02      	cmp	r3, #2
 8008d62:	d122      	bne.n	8008daa <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	68db      	ldr	r3, [r3, #12]
 8008d6a:	f003 0302 	and.w	r3, r3, #2
 8008d6e:	2b02      	cmp	r3, #2
 8008d70:	d11b      	bne.n	8008daa <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	f06f 0202 	mvn.w	r2, #2
 8008d7a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	2201      	movs	r2, #1
 8008d80:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	699b      	ldr	r3, [r3, #24]
 8008d88:	f003 0303 	and.w	r3, r3, #3
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d003      	beq.n	8008d98 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008d90:	6878      	ldr	r0, [r7, #4]
 8008d92:	f7f9 fa95 	bl	80022c0 <HAL_TIM_IC_CaptureCallback>
 8008d96:	e005      	b.n	8008da4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008d98:	6878      	ldr	r0, [r7, #4]
 8008d9a:	f000 fb8d 	bl	80094b8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008d9e:	6878      	ldr	r0, [r7, #4]
 8008da0:	f000 fb94 	bl	80094cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	2200      	movs	r2, #0
 8008da8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	691b      	ldr	r3, [r3, #16]
 8008db0:	f003 0304 	and.w	r3, r3, #4
 8008db4:	2b04      	cmp	r3, #4
 8008db6:	d122      	bne.n	8008dfe <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	68db      	ldr	r3, [r3, #12]
 8008dbe:	f003 0304 	and.w	r3, r3, #4
 8008dc2:	2b04      	cmp	r3, #4
 8008dc4:	d11b      	bne.n	8008dfe <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	f06f 0204 	mvn.w	r2, #4
 8008dce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	2202      	movs	r2, #2
 8008dd4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	699b      	ldr	r3, [r3, #24]
 8008ddc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d003      	beq.n	8008dec <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008de4:	6878      	ldr	r0, [r7, #4]
 8008de6:	f7f9 fa6b 	bl	80022c0 <HAL_TIM_IC_CaptureCallback>
 8008dea:	e005      	b.n	8008df8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008dec:	6878      	ldr	r0, [r7, #4]
 8008dee:	f000 fb63 	bl	80094b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008df2:	6878      	ldr	r0, [r7, #4]
 8008df4:	f000 fb6a 	bl	80094cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	691b      	ldr	r3, [r3, #16]
 8008e04:	f003 0308 	and.w	r3, r3, #8
 8008e08:	2b08      	cmp	r3, #8
 8008e0a:	d122      	bne.n	8008e52 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	68db      	ldr	r3, [r3, #12]
 8008e12:	f003 0308 	and.w	r3, r3, #8
 8008e16:	2b08      	cmp	r3, #8
 8008e18:	d11b      	bne.n	8008e52 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	f06f 0208 	mvn.w	r2, #8
 8008e22:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	2204      	movs	r2, #4
 8008e28:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	69db      	ldr	r3, [r3, #28]
 8008e30:	f003 0303 	and.w	r3, r3, #3
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d003      	beq.n	8008e40 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008e38:	6878      	ldr	r0, [r7, #4]
 8008e3a:	f7f9 fa41 	bl	80022c0 <HAL_TIM_IC_CaptureCallback>
 8008e3e:	e005      	b.n	8008e4c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e40:	6878      	ldr	r0, [r7, #4]
 8008e42:	f000 fb39 	bl	80094b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e46:	6878      	ldr	r0, [r7, #4]
 8008e48:	f000 fb40 	bl	80094cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	2200      	movs	r2, #0
 8008e50:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	691b      	ldr	r3, [r3, #16]
 8008e58:	f003 0310 	and.w	r3, r3, #16
 8008e5c:	2b10      	cmp	r3, #16
 8008e5e:	d122      	bne.n	8008ea6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	68db      	ldr	r3, [r3, #12]
 8008e66:	f003 0310 	and.w	r3, r3, #16
 8008e6a:	2b10      	cmp	r3, #16
 8008e6c:	d11b      	bne.n	8008ea6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	f06f 0210 	mvn.w	r2, #16
 8008e76:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	2208      	movs	r2, #8
 8008e7c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	69db      	ldr	r3, [r3, #28]
 8008e84:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d003      	beq.n	8008e94 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008e8c:	6878      	ldr	r0, [r7, #4]
 8008e8e:	f7f9 fa17 	bl	80022c0 <HAL_TIM_IC_CaptureCallback>
 8008e92:	e005      	b.n	8008ea0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e94:	6878      	ldr	r0, [r7, #4]
 8008e96:	f000 fb0f 	bl	80094b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e9a:	6878      	ldr	r0, [r7, #4]
 8008e9c:	f000 fb16 	bl	80094cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	2200      	movs	r2, #0
 8008ea4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	691b      	ldr	r3, [r3, #16]
 8008eac:	f003 0301 	and.w	r3, r3, #1
 8008eb0:	2b01      	cmp	r3, #1
 8008eb2:	d10e      	bne.n	8008ed2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	68db      	ldr	r3, [r3, #12]
 8008eba:	f003 0301 	and.w	r3, r3, #1
 8008ebe:	2b01      	cmp	r3, #1
 8008ec0:	d107      	bne.n	8008ed2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	f06f 0201 	mvn.w	r2, #1
 8008eca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008ecc:	6878      	ldr	r0, [r7, #4]
 8008ece:	f7f9 fa99 	bl	8002404 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	691b      	ldr	r3, [r3, #16]
 8008ed8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008edc:	2b80      	cmp	r3, #128	; 0x80
 8008ede:	d10e      	bne.n	8008efe <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	68db      	ldr	r3, [r3, #12]
 8008ee6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008eea:	2b80      	cmp	r3, #128	; 0x80
 8008eec:	d107      	bne.n	8008efe <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008ef6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008ef8:	6878      	ldr	r0, [r7, #4]
 8008efa:	f001 f84d 	bl	8009f98 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	691b      	ldr	r3, [r3, #16]
 8008f04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f08:	2b40      	cmp	r3, #64	; 0x40
 8008f0a:	d10e      	bne.n	8008f2a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	68db      	ldr	r3, [r3, #12]
 8008f12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f16:	2b40      	cmp	r3, #64	; 0x40
 8008f18:	d107      	bne.n	8008f2a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008f22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008f24:	6878      	ldr	r0, [r7, #4]
 8008f26:	f000 fadb 	bl	80094e0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	691b      	ldr	r3, [r3, #16]
 8008f30:	f003 0320 	and.w	r3, r3, #32
 8008f34:	2b20      	cmp	r3, #32
 8008f36:	d10e      	bne.n	8008f56 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	68db      	ldr	r3, [r3, #12]
 8008f3e:	f003 0320 	and.w	r3, r3, #32
 8008f42:	2b20      	cmp	r3, #32
 8008f44:	d107      	bne.n	8008f56 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	f06f 0220 	mvn.w	r2, #32
 8008f4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008f50:	6878      	ldr	r0, [r7, #4]
 8008f52:	f001 f817 	bl	8009f84 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008f56:	bf00      	nop
 8008f58:	3708      	adds	r7, #8
 8008f5a:	46bd      	mov	sp, r7
 8008f5c:	bd80      	pop	{r7, pc}

08008f5e <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8008f5e:	b580      	push	{r7, lr}
 8008f60:	b086      	sub	sp, #24
 8008f62:	af00      	add	r7, sp, #0
 8008f64:	60f8      	str	r0, [r7, #12]
 8008f66:	60b9      	str	r1, [r7, #8]
 8008f68:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008f6a:	2300      	movs	r3, #0
 8008f6c:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008f74:	2b01      	cmp	r3, #1
 8008f76:	d101      	bne.n	8008f7c <HAL_TIM_IC_ConfigChannel+0x1e>
 8008f78:	2302      	movs	r3, #2
 8008f7a:	e088      	b.n	800908e <HAL_TIM_IC_ConfigChannel+0x130>
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	2201      	movs	r2, #1
 8008f80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d11b      	bne.n	8008fc2 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	6818      	ldr	r0, [r3, #0]
 8008f8e:	68bb      	ldr	r3, [r7, #8]
 8008f90:	6819      	ldr	r1, [r3, #0]
 8008f92:	68bb      	ldr	r3, [r7, #8]
 8008f94:	685a      	ldr	r2, [r3, #4]
 8008f96:	68bb      	ldr	r3, [r7, #8]
 8008f98:	68db      	ldr	r3, [r3, #12]
 8008f9a:	f000 fd8d 	bl	8009ab8 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	699a      	ldr	r2, [r3, #24]
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	f022 020c 	bic.w	r2, r2, #12
 8008fac:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	6999      	ldr	r1, [r3, #24]
 8008fb4:	68bb      	ldr	r3, [r7, #8]
 8008fb6:	689a      	ldr	r2, [r3, #8]
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	430a      	orrs	r2, r1
 8008fbe:	619a      	str	r2, [r3, #24]
 8008fc0:	e060      	b.n	8009084 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	2b04      	cmp	r3, #4
 8008fc6:	d11c      	bne.n	8009002 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	6818      	ldr	r0, [r3, #0]
 8008fcc:	68bb      	ldr	r3, [r7, #8]
 8008fce:	6819      	ldr	r1, [r3, #0]
 8008fd0:	68bb      	ldr	r3, [r7, #8]
 8008fd2:	685a      	ldr	r2, [r3, #4]
 8008fd4:	68bb      	ldr	r3, [r7, #8]
 8008fd6:	68db      	ldr	r3, [r3, #12]
 8008fd8:	f000 fe11 	bl	8009bfe <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	699a      	ldr	r2, [r3, #24]
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8008fea:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	6999      	ldr	r1, [r3, #24]
 8008ff2:	68bb      	ldr	r3, [r7, #8]
 8008ff4:	689b      	ldr	r3, [r3, #8]
 8008ff6:	021a      	lsls	r2, r3, #8
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	430a      	orrs	r2, r1
 8008ffe:	619a      	str	r2, [r3, #24]
 8009000:	e040      	b.n	8009084 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	2b08      	cmp	r3, #8
 8009006:	d11b      	bne.n	8009040 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	6818      	ldr	r0, [r3, #0]
 800900c:	68bb      	ldr	r3, [r7, #8]
 800900e:	6819      	ldr	r1, [r3, #0]
 8009010:	68bb      	ldr	r3, [r7, #8]
 8009012:	685a      	ldr	r2, [r3, #4]
 8009014:	68bb      	ldr	r3, [r7, #8]
 8009016:	68db      	ldr	r3, [r3, #12]
 8009018:	f000 fe5e 	bl	8009cd8 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	69da      	ldr	r2, [r3, #28]
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	f022 020c 	bic.w	r2, r2, #12
 800902a:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	69d9      	ldr	r1, [r3, #28]
 8009032:	68bb      	ldr	r3, [r7, #8]
 8009034:	689a      	ldr	r2, [r3, #8]
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	430a      	orrs	r2, r1
 800903c:	61da      	str	r2, [r3, #28]
 800903e:	e021      	b.n	8009084 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	2b0c      	cmp	r3, #12
 8009044:	d11c      	bne.n	8009080 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	6818      	ldr	r0, [r3, #0]
 800904a:	68bb      	ldr	r3, [r7, #8]
 800904c:	6819      	ldr	r1, [r3, #0]
 800904e:	68bb      	ldr	r3, [r7, #8]
 8009050:	685a      	ldr	r2, [r3, #4]
 8009052:	68bb      	ldr	r3, [r7, #8]
 8009054:	68db      	ldr	r3, [r3, #12]
 8009056:	f000 fe7b 	bl	8009d50 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	69da      	ldr	r2, [r3, #28]
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8009068:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	69d9      	ldr	r1, [r3, #28]
 8009070:	68bb      	ldr	r3, [r7, #8]
 8009072:	689b      	ldr	r3, [r3, #8]
 8009074:	021a      	lsls	r2, r3, #8
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	430a      	orrs	r2, r1
 800907c:	61da      	str	r2, [r3, #28]
 800907e:	e001      	b.n	8009084 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8009080:	2301      	movs	r3, #1
 8009082:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	2200      	movs	r2, #0
 8009088:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800908c:	7dfb      	ldrb	r3, [r7, #23]
}
 800908e:	4618      	mov	r0, r3
 8009090:	3718      	adds	r7, #24
 8009092:	46bd      	mov	sp, r7
 8009094:	bd80      	pop	{r7, pc}
	...

08009098 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009098:	b580      	push	{r7, lr}
 800909a:	b086      	sub	sp, #24
 800909c:	af00      	add	r7, sp, #0
 800909e:	60f8      	str	r0, [r7, #12]
 80090a0:	60b9      	str	r1, [r7, #8]
 80090a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80090a4:	2300      	movs	r3, #0
 80090a6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80090ae:	2b01      	cmp	r3, #1
 80090b0:	d101      	bne.n	80090b6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80090b2:	2302      	movs	r3, #2
 80090b4:	e0ae      	b.n	8009214 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	2201      	movs	r2, #1
 80090ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	2b0c      	cmp	r3, #12
 80090c2:	f200 809f 	bhi.w	8009204 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80090c6:	a201      	add	r2, pc, #4	; (adr r2, 80090cc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80090c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090cc:	08009101 	.word	0x08009101
 80090d0:	08009205 	.word	0x08009205
 80090d4:	08009205 	.word	0x08009205
 80090d8:	08009205 	.word	0x08009205
 80090dc:	08009141 	.word	0x08009141
 80090e0:	08009205 	.word	0x08009205
 80090e4:	08009205 	.word	0x08009205
 80090e8:	08009205 	.word	0x08009205
 80090ec:	08009183 	.word	0x08009183
 80090f0:	08009205 	.word	0x08009205
 80090f4:	08009205 	.word	0x08009205
 80090f8:	08009205 	.word	0x08009205
 80090fc:	080091c3 	.word	0x080091c3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	68b9      	ldr	r1, [r7, #8]
 8009106:	4618      	mov	r0, r3
 8009108:	f000 fa94 	bl	8009634 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	699a      	ldr	r2, [r3, #24]
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	f042 0208 	orr.w	r2, r2, #8
 800911a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	699a      	ldr	r2, [r3, #24]
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	f022 0204 	bic.w	r2, r2, #4
 800912a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	6999      	ldr	r1, [r3, #24]
 8009132:	68bb      	ldr	r3, [r7, #8]
 8009134:	691a      	ldr	r2, [r3, #16]
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	430a      	orrs	r2, r1
 800913c:	619a      	str	r2, [r3, #24]
      break;
 800913e:	e064      	b.n	800920a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	68b9      	ldr	r1, [r7, #8]
 8009146:	4618      	mov	r0, r3
 8009148:	f000 fae4 	bl	8009714 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	699a      	ldr	r2, [r3, #24]
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800915a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	699a      	ldr	r2, [r3, #24]
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800916a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	6999      	ldr	r1, [r3, #24]
 8009172:	68bb      	ldr	r3, [r7, #8]
 8009174:	691b      	ldr	r3, [r3, #16]
 8009176:	021a      	lsls	r2, r3, #8
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	430a      	orrs	r2, r1
 800917e:	619a      	str	r2, [r3, #24]
      break;
 8009180:	e043      	b.n	800920a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	68b9      	ldr	r1, [r7, #8]
 8009188:	4618      	mov	r0, r3
 800918a:	f000 fb39 	bl	8009800 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	69da      	ldr	r2, [r3, #28]
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	f042 0208 	orr.w	r2, r2, #8
 800919c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	69da      	ldr	r2, [r3, #28]
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	f022 0204 	bic.w	r2, r2, #4
 80091ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	69d9      	ldr	r1, [r3, #28]
 80091b4:	68bb      	ldr	r3, [r7, #8]
 80091b6:	691a      	ldr	r2, [r3, #16]
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	430a      	orrs	r2, r1
 80091be:	61da      	str	r2, [r3, #28]
      break;
 80091c0:	e023      	b.n	800920a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	68b9      	ldr	r1, [r7, #8]
 80091c8:	4618      	mov	r0, r3
 80091ca:	f000 fb8d 	bl	80098e8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	69da      	ldr	r2, [r3, #28]
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80091dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	69da      	ldr	r2, [r3, #28]
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80091ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	69d9      	ldr	r1, [r3, #28]
 80091f4:	68bb      	ldr	r3, [r7, #8]
 80091f6:	691b      	ldr	r3, [r3, #16]
 80091f8:	021a      	lsls	r2, r3, #8
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	430a      	orrs	r2, r1
 8009200:	61da      	str	r2, [r3, #28]
      break;
 8009202:	e002      	b.n	800920a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8009204:	2301      	movs	r3, #1
 8009206:	75fb      	strb	r3, [r7, #23]
      break;
 8009208:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	2200      	movs	r2, #0
 800920e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009212:	7dfb      	ldrb	r3, [r7, #23]
}
 8009214:	4618      	mov	r0, r3
 8009216:	3718      	adds	r7, #24
 8009218:	46bd      	mov	sp, r7
 800921a:	bd80      	pop	{r7, pc}

0800921c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800921c:	b580      	push	{r7, lr}
 800921e:	b084      	sub	sp, #16
 8009220:	af00      	add	r7, sp, #0
 8009222:	6078      	str	r0, [r7, #4]
 8009224:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009226:	2300      	movs	r3, #0
 8009228:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009230:	2b01      	cmp	r3, #1
 8009232:	d101      	bne.n	8009238 <HAL_TIM_ConfigClockSource+0x1c>
 8009234:	2302      	movs	r3, #2
 8009236:	e0b4      	b.n	80093a2 <HAL_TIM_ConfigClockSource+0x186>
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	2201      	movs	r2, #1
 800923c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	2202      	movs	r2, #2
 8009244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	689b      	ldr	r3, [r3, #8]
 800924e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009250:	68bb      	ldr	r3, [r7, #8]
 8009252:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009256:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009258:	68bb      	ldr	r3, [r7, #8]
 800925a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800925e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	68ba      	ldr	r2, [r7, #8]
 8009266:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009268:	683b      	ldr	r3, [r7, #0]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009270:	d03e      	beq.n	80092f0 <HAL_TIM_ConfigClockSource+0xd4>
 8009272:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009276:	f200 8087 	bhi.w	8009388 <HAL_TIM_ConfigClockSource+0x16c>
 800927a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800927e:	f000 8086 	beq.w	800938e <HAL_TIM_ConfigClockSource+0x172>
 8009282:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009286:	d87f      	bhi.n	8009388 <HAL_TIM_ConfigClockSource+0x16c>
 8009288:	2b70      	cmp	r3, #112	; 0x70
 800928a:	d01a      	beq.n	80092c2 <HAL_TIM_ConfigClockSource+0xa6>
 800928c:	2b70      	cmp	r3, #112	; 0x70
 800928e:	d87b      	bhi.n	8009388 <HAL_TIM_ConfigClockSource+0x16c>
 8009290:	2b60      	cmp	r3, #96	; 0x60
 8009292:	d050      	beq.n	8009336 <HAL_TIM_ConfigClockSource+0x11a>
 8009294:	2b60      	cmp	r3, #96	; 0x60
 8009296:	d877      	bhi.n	8009388 <HAL_TIM_ConfigClockSource+0x16c>
 8009298:	2b50      	cmp	r3, #80	; 0x50
 800929a:	d03c      	beq.n	8009316 <HAL_TIM_ConfigClockSource+0xfa>
 800929c:	2b50      	cmp	r3, #80	; 0x50
 800929e:	d873      	bhi.n	8009388 <HAL_TIM_ConfigClockSource+0x16c>
 80092a0:	2b40      	cmp	r3, #64	; 0x40
 80092a2:	d058      	beq.n	8009356 <HAL_TIM_ConfigClockSource+0x13a>
 80092a4:	2b40      	cmp	r3, #64	; 0x40
 80092a6:	d86f      	bhi.n	8009388 <HAL_TIM_ConfigClockSource+0x16c>
 80092a8:	2b30      	cmp	r3, #48	; 0x30
 80092aa:	d064      	beq.n	8009376 <HAL_TIM_ConfigClockSource+0x15a>
 80092ac:	2b30      	cmp	r3, #48	; 0x30
 80092ae:	d86b      	bhi.n	8009388 <HAL_TIM_ConfigClockSource+0x16c>
 80092b0:	2b20      	cmp	r3, #32
 80092b2:	d060      	beq.n	8009376 <HAL_TIM_ConfigClockSource+0x15a>
 80092b4:	2b20      	cmp	r3, #32
 80092b6:	d867      	bhi.n	8009388 <HAL_TIM_ConfigClockSource+0x16c>
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d05c      	beq.n	8009376 <HAL_TIM_ConfigClockSource+0x15a>
 80092bc:	2b10      	cmp	r3, #16
 80092be:	d05a      	beq.n	8009376 <HAL_TIM_ConfigClockSource+0x15a>
 80092c0:	e062      	b.n	8009388 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	6818      	ldr	r0, [r3, #0]
 80092c6:	683b      	ldr	r3, [r7, #0]
 80092c8:	6899      	ldr	r1, [r3, #8]
 80092ca:	683b      	ldr	r3, [r7, #0]
 80092cc:	685a      	ldr	r2, [r3, #4]
 80092ce:	683b      	ldr	r3, [r7, #0]
 80092d0:	68db      	ldr	r3, [r3, #12]
 80092d2:	f000 fd95 	bl	8009e00 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	689b      	ldr	r3, [r3, #8]
 80092dc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80092de:	68bb      	ldr	r3, [r7, #8]
 80092e0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80092e4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	68ba      	ldr	r2, [r7, #8]
 80092ec:	609a      	str	r2, [r3, #8]
      break;
 80092ee:	e04f      	b.n	8009390 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	6818      	ldr	r0, [r3, #0]
 80092f4:	683b      	ldr	r3, [r7, #0]
 80092f6:	6899      	ldr	r1, [r3, #8]
 80092f8:	683b      	ldr	r3, [r7, #0]
 80092fa:	685a      	ldr	r2, [r3, #4]
 80092fc:	683b      	ldr	r3, [r7, #0]
 80092fe:	68db      	ldr	r3, [r3, #12]
 8009300:	f000 fd7e 	bl	8009e00 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	689a      	ldr	r2, [r3, #8]
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009312:	609a      	str	r2, [r3, #8]
      break;
 8009314:	e03c      	b.n	8009390 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	6818      	ldr	r0, [r3, #0]
 800931a:	683b      	ldr	r3, [r7, #0]
 800931c:	6859      	ldr	r1, [r3, #4]
 800931e:	683b      	ldr	r3, [r7, #0]
 8009320:	68db      	ldr	r3, [r3, #12]
 8009322:	461a      	mov	r2, r3
 8009324:	f000 fc3c 	bl	8009ba0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	2150      	movs	r1, #80	; 0x50
 800932e:	4618      	mov	r0, r3
 8009330:	f000 fd4b 	bl	8009dca <TIM_ITRx_SetConfig>
      break;
 8009334:	e02c      	b.n	8009390 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	6818      	ldr	r0, [r3, #0]
 800933a:	683b      	ldr	r3, [r7, #0]
 800933c:	6859      	ldr	r1, [r3, #4]
 800933e:	683b      	ldr	r3, [r7, #0]
 8009340:	68db      	ldr	r3, [r3, #12]
 8009342:	461a      	mov	r2, r3
 8009344:	f000 fc98 	bl	8009c78 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	2160      	movs	r1, #96	; 0x60
 800934e:	4618      	mov	r0, r3
 8009350:	f000 fd3b 	bl	8009dca <TIM_ITRx_SetConfig>
      break;
 8009354:	e01c      	b.n	8009390 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	6818      	ldr	r0, [r3, #0]
 800935a:	683b      	ldr	r3, [r7, #0]
 800935c:	6859      	ldr	r1, [r3, #4]
 800935e:	683b      	ldr	r3, [r7, #0]
 8009360:	68db      	ldr	r3, [r3, #12]
 8009362:	461a      	mov	r2, r3
 8009364:	f000 fc1c 	bl	8009ba0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	2140      	movs	r1, #64	; 0x40
 800936e:	4618      	mov	r0, r3
 8009370:	f000 fd2b 	bl	8009dca <TIM_ITRx_SetConfig>
      break;
 8009374:	e00c      	b.n	8009390 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681a      	ldr	r2, [r3, #0]
 800937a:	683b      	ldr	r3, [r7, #0]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	4619      	mov	r1, r3
 8009380:	4610      	mov	r0, r2
 8009382:	f000 fd22 	bl	8009dca <TIM_ITRx_SetConfig>
      break;
 8009386:	e003      	b.n	8009390 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009388:	2301      	movs	r3, #1
 800938a:	73fb      	strb	r3, [r7, #15]
      break;
 800938c:	e000      	b.n	8009390 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800938e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	2201      	movs	r2, #1
 8009394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	2200      	movs	r2, #0
 800939c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80093a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80093a2:	4618      	mov	r0, r3
 80093a4:	3710      	adds	r7, #16
 80093a6:	46bd      	mov	sp, r7
 80093a8:	bd80      	pop	{r7, pc}

080093aa <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80093aa:	b580      	push	{r7, lr}
 80093ac:	b082      	sub	sp, #8
 80093ae:	af00      	add	r7, sp, #0
 80093b0:	6078      	str	r0, [r7, #4]
 80093b2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80093ba:	2b01      	cmp	r3, #1
 80093bc:	d101      	bne.n	80093c2 <HAL_TIM_SlaveConfigSynchro+0x18>
 80093be:	2302      	movs	r3, #2
 80093c0:	e031      	b.n	8009426 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	2201      	movs	r2, #1
 80093c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	2202      	movs	r2, #2
 80093ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80093d2:	6839      	ldr	r1, [r7, #0]
 80093d4:	6878      	ldr	r0, [r7, #4]
 80093d6:	f000 fadd 	bl	8009994 <TIM_SlaveTimer_SetConfig>
 80093da:	4603      	mov	r3, r0
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d009      	beq.n	80093f4 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	2201      	movs	r2, #1
 80093e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	2200      	movs	r2, #0
 80093ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80093f0:	2301      	movs	r3, #1
 80093f2:	e018      	b.n	8009426 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	68da      	ldr	r2, [r3, #12]
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009402:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	68da      	ldr	r2, [r3, #12]
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009412:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	2201      	movs	r2, #1
 8009418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	2200      	movs	r2, #0
 8009420:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009424:	2300      	movs	r3, #0
}
 8009426:	4618      	mov	r0, r3
 8009428:	3708      	adds	r7, #8
 800942a:	46bd      	mov	sp, r7
 800942c:	bd80      	pop	{r7, pc}
	...

08009430 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009430:	b480      	push	{r7}
 8009432:	b085      	sub	sp, #20
 8009434:	af00      	add	r7, sp, #0
 8009436:	6078      	str	r0, [r7, #4]
 8009438:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800943a:	2300      	movs	r3, #0
 800943c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800943e:	683b      	ldr	r3, [r7, #0]
 8009440:	2b0c      	cmp	r3, #12
 8009442:	d831      	bhi.n	80094a8 <HAL_TIM_ReadCapturedValue+0x78>
 8009444:	a201      	add	r2, pc, #4	; (adr r2, 800944c <HAL_TIM_ReadCapturedValue+0x1c>)
 8009446:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800944a:	bf00      	nop
 800944c:	08009481 	.word	0x08009481
 8009450:	080094a9 	.word	0x080094a9
 8009454:	080094a9 	.word	0x080094a9
 8009458:	080094a9 	.word	0x080094a9
 800945c:	0800948b 	.word	0x0800948b
 8009460:	080094a9 	.word	0x080094a9
 8009464:	080094a9 	.word	0x080094a9
 8009468:	080094a9 	.word	0x080094a9
 800946c:	08009495 	.word	0x08009495
 8009470:	080094a9 	.word	0x080094a9
 8009474:	080094a9 	.word	0x080094a9
 8009478:	080094a9 	.word	0x080094a9
 800947c:	0800949f 	.word	0x0800949f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009486:	60fb      	str	r3, [r7, #12]

      break;
 8009488:	e00f      	b.n	80094aa <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009490:	60fb      	str	r3, [r7, #12]

      break;
 8009492:	e00a      	b.n	80094aa <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800949a:	60fb      	str	r3, [r7, #12]

      break;
 800949c:	e005      	b.n	80094aa <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094a4:	60fb      	str	r3, [r7, #12]

      break;
 80094a6:	e000      	b.n	80094aa <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80094a8:	bf00      	nop
  }

  return tmpreg;
 80094aa:	68fb      	ldr	r3, [r7, #12]
}
 80094ac:	4618      	mov	r0, r3
 80094ae:	3714      	adds	r7, #20
 80094b0:	46bd      	mov	sp, r7
 80094b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b6:	4770      	bx	lr

080094b8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80094b8:	b480      	push	{r7}
 80094ba:	b083      	sub	sp, #12
 80094bc:	af00      	add	r7, sp, #0
 80094be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80094c0:	bf00      	nop
 80094c2:	370c      	adds	r7, #12
 80094c4:	46bd      	mov	sp, r7
 80094c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ca:	4770      	bx	lr

080094cc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80094cc:	b480      	push	{r7}
 80094ce:	b083      	sub	sp, #12
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80094d4:	bf00      	nop
 80094d6:	370c      	adds	r7, #12
 80094d8:	46bd      	mov	sp, r7
 80094da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094de:	4770      	bx	lr

080094e0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80094e0:	b480      	push	{r7}
 80094e2:	b083      	sub	sp, #12
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80094e8:	bf00      	nop
 80094ea:	370c      	adds	r7, #12
 80094ec:	46bd      	mov	sp, r7
 80094ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f2:	4770      	bx	lr

080094f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80094f4:	b480      	push	{r7}
 80094f6:	b085      	sub	sp, #20
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	6078      	str	r0, [r7, #4]
 80094fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	4a40      	ldr	r2, [pc, #256]	; (8009608 <TIM_Base_SetConfig+0x114>)
 8009508:	4293      	cmp	r3, r2
 800950a:	d013      	beq.n	8009534 <TIM_Base_SetConfig+0x40>
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009512:	d00f      	beq.n	8009534 <TIM_Base_SetConfig+0x40>
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	4a3d      	ldr	r2, [pc, #244]	; (800960c <TIM_Base_SetConfig+0x118>)
 8009518:	4293      	cmp	r3, r2
 800951a:	d00b      	beq.n	8009534 <TIM_Base_SetConfig+0x40>
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	4a3c      	ldr	r2, [pc, #240]	; (8009610 <TIM_Base_SetConfig+0x11c>)
 8009520:	4293      	cmp	r3, r2
 8009522:	d007      	beq.n	8009534 <TIM_Base_SetConfig+0x40>
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	4a3b      	ldr	r2, [pc, #236]	; (8009614 <TIM_Base_SetConfig+0x120>)
 8009528:	4293      	cmp	r3, r2
 800952a:	d003      	beq.n	8009534 <TIM_Base_SetConfig+0x40>
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	4a3a      	ldr	r2, [pc, #232]	; (8009618 <TIM_Base_SetConfig+0x124>)
 8009530:	4293      	cmp	r3, r2
 8009532:	d108      	bne.n	8009546 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800953a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800953c:	683b      	ldr	r3, [r7, #0]
 800953e:	685b      	ldr	r3, [r3, #4]
 8009540:	68fa      	ldr	r2, [r7, #12]
 8009542:	4313      	orrs	r3, r2
 8009544:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	4a2f      	ldr	r2, [pc, #188]	; (8009608 <TIM_Base_SetConfig+0x114>)
 800954a:	4293      	cmp	r3, r2
 800954c:	d02b      	beq.n	80095a6 <TIM_Base_SetConfig+0xb2>
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009554:	d027      	beq.n	80095a6 <TIM_Base_SetConfig+0xb2>
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	4a2c      	ldr	r2, [pc, #176]	; (800960c <TIM_Base_SetConfig+0x118>)
 800955a:	4293      	cmp	r3, r2
 800955c:	d023      	beq.n	80095a6 <TIM_Base_SetConfig+0xb2>
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	4a2b      	ldr	r2, [pc, #172]	; (8009610 <TIM_Base_SetConfig+0x11c>)
 8009562:	4293      	cmp	r3, r2
 8009564:	d01f      	beq.n	80095a6 <TIM_Base_SetConfig+0xb2>
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	4a2a      	ldr	r2, [pc, #168]	; (8009614 <TIM_Base_SetConfig+0x120>)
 800956a:	4293      	cmp	r3, r2
 800956c:	d01b      	beq.n	80095a6 <TIM_Base_SetConfig+0xb2>
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	4a29      	ldr	r2, [pc, #164]	; (8009618 <TIM_Base_SetConfig+0x124>)
 8009572:	4293      	cmp	r3, r2
 8009574:	d017      	beq.n	80095a6 <TIM_Base_SetConfig+0xb2>
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	4a28      	ldr	r2, [pc, #160]	; (800961c <TIM_Base_SetConfig+0x128>)
 800957a:	4293      	cmp	r3, r2
 800957c:	d013      	beq.n	80095a6 <TIM_Base_SetConfig+0xb2>
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	4a27      	ldr	r2, [pc, #156]	; (8009620 <TIM_Base_SetConfig+0x12c>)
 8009582:	4293      	cmp	r3, r2
 8009584:	d00f      	beq.n	80095a6 <TIM_Base_SetConfig+0xb2>
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	4a26      	ldr	r2, [pc, #152]	; (8009624 <TIM_Base_SetConfig+0x130>)
 800958a:	4293      	cmp	r3, r2
 800958c:	d00b      	beq.n	80095a6 <TIM_Base_SetConfig+0xb2>
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	4a25      	ldr	r2, [pc, #148]	; (8009628 <TIM_Base_SetConfig+0x134>)
 8009592:	4293      	cmp	r3, r2
 8009594:	d007      	beq.n	80095a6 <TIM_Base_SetConfig+0xb2>
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	4a24      	ldr	r2, [pc, #144]	; (800962c <TIM_Base_SetConfig+0x138>)
 800959a:	4293      	cmp	r3, r2
 800959c:	d003      	beq.n	80095a6 <TIM_Base_SetConfig+0xb2>
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	4a23      	ldr	r2, [pc, #140]	; (8009630 <TIM_Base_SetConfig+0x13c>)
 80095a2:	4293      	cmp	r3, r2
 80095a4:	d108      	bne.n	80095b8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80095ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80095ae:	683b      	ldr	r3, [r7, #0]
 80095b0:	68db      	ldr	r3, [r3, #12]
 80095b2:	68fa      	ldr	r2, [r7, #12]
 80095b4:	4313      	orrs	r3, r2
 80095b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80095be:	683b      	ldr	r3, [r7, #0]
 80095c0:	695b      	ldr	r3, [r3, #20]
 80095c2:	4313      	orrs	r3, r2
 80095c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	68fa      	ldr	r2, [r7, #12]
 80095ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80095cc:	683b      	ldr	r3, [r7, #0]
 80095ce:	689a      	ldr	r2, [r3, #8]
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80095d4:	683b      	ldr	r3, [r7, #0]
 80095d6:	681a      	ldr	r2, [r3, #0]
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	4a0a      	ldr	r2, [pc, #40]	; (8009608 <TIM_Base_SetConfig+0x114>)
 80095e0:	4293      	cmp	r3, r2
 80095e2:	d003      	beq.n	80095ec <TIM_Base_SetConfig+0xf8>
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	4a0c      	ldr	r2, [pc, #48]	; (8009618 <TIM_Base_SetConfig+0x124>)
 80095e8:	4293      	cmp	r3, r2
 80095ea:	d103      	bne.n	80095f4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80095ec:	683b      	ldr	r3, [r7, #0]
 80095ee:	691a      	ldr	r2, [r3, #16]
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	2201      	movs	r2, #1
 80095f8:	615a      	str	r2, [r3, #20]
}
 80095fa:	bf00      	nop
 80095fc:	3714      	adds	r7, #20
 80095fe:	46bd      	mov	sp, r7
 8009600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009604:	4770      	bx	lr
 8009606:	bf00      	nop
 8009608:	40010000 	.word	0x40010000
 800960c:	40000400 	.word	0x40000400
 8009610:	40000800 	.word	0x40000800
 8009614:	40000c00 	.word	0x40000c00
 8009618:	40010400 	.word	0x40010400
 800961c:	40014000 	.word	0x40014000
 8009620:	40014400 	.word	0x40014400
 8009624:	40014800 	.word	0x40014800
 8009628:	40001800 	.word	0x40001800
 800962c:	40001c00 	.word	0x40001c00
 8009630:	40002000 	.word	0x40002000

08009634 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009634:	b480      	push	{r7}
 8009636:	b087      	sub	sp, #28
 8009638:	af00      	add	r7, sp, #0
 800963a:	6078      	str	r0, [r7, #4]
 800963c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	6a1b      	ldr	r3, [r3, #32]
 8009642:	f023 0201 	bic.w	r2, r3, #1
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	6a1b      	ldr	r3, [r3, #32]
 800964e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	685b      	ldr	r3, [r3, #4]
 8009654:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	699b      	ldr	r3, [r3, #24]
 800965a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009662:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	f023 0303 	bic.w	r3, r3, #3
 800966a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800966c:	683b      	ldr	r3, [r7, #0]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	68fa      	ldr	r2, [r7, #12]
 8009672:	4313      	orrs	r3, r2
 8009674:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009676:	697b      	ldr	r3, [r7, #20]
 8009678:	f023 0302 	bic.w	r3, r3, #2
 800967c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800967e:	683b      	ldr	r3, [r7, #0]
 8009680:	689b      	ldr	r3, [r3, #8]
 8009682:	697a      	ldr	r2, [r7, #20]
 8009684:	4313      	orrs	r3, r2
 8009686:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	4a20      	ldr	r2, [pc, #128]	; (800970c <TIM_OC1_SetConfig+0xd8>)
 800968c:	4293      	cmp	r3, r2
 800968e:	d003      	beq.n	8009698 <TIM_OC1_SetConfig+0x64>
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	4a1f      	ldr	r2, [pc, #124]	; (8009710 <TIM_OC1_SetConfig+0xdc>)
 8009694:	4293      	cmp	r3, r2
 8009696:	d10c      	bne.n	80096b2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009698:	697b      	ldr	r3, [r7, #20]
 800969a:	f023 0308 	bic.w	r3, r3, #8
 800969e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80096a0:	683b      	ldr	r3, [r7, #0]
 80096a2:	68db      	ldr	r3, [r3, #12]
 80096a4:	697a      	ldr	r2, [r7, #20]
 80096a6:	4313      	orrs	r3, r2
 80096a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80096aa:	697b      	ldr	r3, [r7, #20]
 80096ac:	f023 0304 	bic.w	r3, r3, #4
 80096b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	4a15      	ldr	r2, [pc, #84]	; (800970c <TIM_OC1_SetConfig+0xd8>)
 80096b6:	4293      	cmp	r3, r2
 80096b8:	d003      	beq.n	80096c2 <TIM_OC1_SetConfig+0x8e>
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	4a14      	ldr	r2, [pc, #80]	; (8009710 <TIM_OC1_SetConfig+0xdc>)
 80096be:	4293      	cmp	r3, r2
 80096c0:	d111      	bne.n	80096e6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80096c2:	693b      	ldr	r3, [r7, #16]
 80096c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80096c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80096ca:	693b      	ldr	r3, [r7, #16]
 80096cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80096d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80096d2:	683b      	ldr	r3, [r7, #0]
 80096d4:	695b      	ldr	r3, [r3, #20]
 80096d6:	693a      	ldr	r2, [r7, #16]
 80096d8:	4313      	orrs	r3, r2
 80096da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80096dc:	683b      	ldr	r3, [r7, #0]
 80096de:	699b      	ldr	r3, [r3, #24]
 80096e0:	693a      	ldr	r2, [r7, #16]
 80096e2:	4313      	orrs	r3, r2
 80096e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	693a      	ldr	r2, [r7, #16]
 80096ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	68fa      	ldr	r2, [r7, #12]
 80096f0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80096f2:	683b      	ldr	r3, [r7, #0]
 80096f4:	685a      	ldr	r2, [r3, #4]
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	697a      	ldr	r2, [r7, #20]
 80096fe:	621a      	str	r2, [r3, #32]
}
 8009700:	bf00      	nop
 8009702:	371c      	adds	r7, #28
 8009704:	46bd      	mov	sp, r7
 8009706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800970a:	4770      	bx	lr
 800970c:	40010000 	.word	0x40010000
 8009710:	40010400 	.word	0x40010400

08009714 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009714:	b480      	push	{r7}
 8009716:	b087      	sub	sp, #28
 8009718:	af00      	add	r7, sp, #0
 800971a:	6078      	str	r0, [r7, #4]
 800971c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	6a1b      	ldr	r3, [r3, #32]
 8009722:	f023 0210 	bic.w	r2, r3, #16
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	6a1b      	ldr	r3, [r3, #32]
 800972e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	685b      	ldr	r3, [r3, #4]
 8009734:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	699b      	ldr	r3, [r3, #24]
 800973a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009742:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800974a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800974c:	683b      	ldr	r3, [r7, #0]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	021b      	lsls	r3, r3, #8
 8009752:	68fa      	ldr	r2, [r7, #12]
 8009754:	4313      	orrs	r3, r2
 8009756:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009758:	697b      	ldr	r3, [r7, #20]
 800975a:	f023 0320 	bic.w	r3, r3, #32
 800975e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009760:	683b      	ldr	r3, [r7, #0]
 8009762:	689b      	ldr	r3, [r3, #8]
 8009764:	011b      	lsls	r3, r3, #4
 8009766:	697a      	ldr	r2, [r7, #20]
 8009768:	4313      	orrs	r3, r2
 800976a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	4a22      	ldr	r2, [pc, #136]	; (80097f8 <TIM_OC2_SetConfig+0xe4>)
 8009770:	4293      	cmp	r3, r2
 8009772:	d003      	beq.n	800977c <TIM_OC2_SetConfig+0x68>
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	4a21      	ldr	r2, [pc, #132]	; (80097fc <TIM_OC2_SetConfig+0xe8>)
 8009778:	4293      	cmp	r3, r2
 800977a:	d10d      	bne.n	8009798 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800977c:	697b      	ldr	r3, [r7, #20]
 800977e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009782:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009784:	683b      	ldr	r3, [r7, #0]
 8009786:	68db      	ldr	r3, [r3, #12]
 8009788:	011b      	lsls	r3, r3, #4
 800978a:	697a      	ldr	r2, [r7, #20]
 800978c:	4313      	orrs	r3, r2
 800978e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009790:	697b      	ldr	r3, [r7, #20]
 8009792:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009796:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	4a17      	ldr	r2, [pc, #92]	; (80097f8 <TIM_OC2_SetConfig+0xe4>)
 800979c:	4293      	cmp	r3, r2
 800979e:	d003      	beq.n	80097a8 <TIM_OC2_SetConfig+0x94>
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	4a16      	ldr	r2, [pc, #88]	; (80097fc <TIM_OC2_SetConfig+0xe8>)
 80097a4:	4293      	cmp	r3, r2
 80097a6:	d113      	bne.n	80097d0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80097a8:	693b      	ldr	r3, [r7, #16]
 80097aa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80097ae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80097b0:	693b      	ldr	r3, [r7, #16]
 80097b2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80097b6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80097b8:	683b      	ldr	r3, [r7, #0]
 80097ba:	695b      	ldr	r3, [r3, #20]
 80097bc:	009b      	lsls	r3, r3, #2
 80097be:	693a      	ldr	r2, [r7, #16]
 80097c0:	4313      	orrs	r3, r2
 80097c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80097c4:	683b      	ldr	r3, [r7, #0]
 80097c6:	699b      	ldr	r3, [r3, #24]
 80097c8:	009b      	lsls	r3, r3, #2
 80097ca:	693a      	ldr	r2, [r7, #16]
 80097cc:	4313      	orrs	r3, r2
 80097ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	693a      	ldr	r2, [r7, #16]
 80097d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	68fa      	ldr	r2, [r7, #12]
 80097da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80097dc:	683b      	ldr	r3, [r7, #0]
 80097de:	685a      	ldr	r2, [r3, #4]
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	697a      	ldr	r2, [r7, #20]
 80097e8:	621a      	str	r2, [r3, #32]
}
 80097ea:	bf00      	nop
 80097ec:	371c      	adds	r7, #28
 80097ee:	46bd      	mov	sp, r7
 80097f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f4:	4770      	bx	lr
 80097f6:	bf00      	nop
 80097f8:	40010000 	.word	0x40010000
 80097fc:	40010400 	.word	0x40010400

08009800 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009800:	b480      	push	{r7}
 8009802:	b087      	sub	sp, #28
 8009804:	af00      	add	r7, sp, #0
 8009806:	6078      	str	r0, [r7, #4]
 8009808:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	6a1b      	ldr	r3, [r3, #32]
 800980e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	6a1b      	ldr	r3, [r3, #32]
 800981a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	685b      	ldr	r3, [r3, #4]
 8009820:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	69db      	ldr	r3, [r3, #28]
 8009826:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800982e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	f023 0303 	bic.w	r3, r3, #3
 8009836:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009838:	683b      	ldr	r3, [r7, #0]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	68fa      	ldr	r2, [r7, #12]
 800983e:	4313      	orrs	r3, r2
 8009840:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009842:	697b      	ldr	r3, [r7, #20]
 8009844:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009848:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800984a:	683b      	ldr	r3, [r7, #0]
 800984c:	689b      	ldr	r3, [r3, #8]
 800984e:	021b      	lsls	r3, r3, #8
 8009850:	697a      	ldr	r2, [r7, #20]
 8009852:	4313      	orrs	r3, r2
 8009854:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	4a21      	ldr	r2, [pc, #132]	; (80098e0 <TIM_OC3_SetConfig+0xe0>)
 800985a:	4293      	cmp	r3, r2
 800985c:	d003      	beq.n	8009866 <TIM_OC3_SetConfig+0x66>
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	4a20      	ldr	r2, [pc, #128]	; (80098e4 <TIM_OC3_SetConfig+0xe4>)
 8009862:	4293      	cmp	r3, r2
 8009864:	d10d      	bne.n	8009882 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009866:	697b      	ldr	r3, [r7, #20]
 8009868:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800986c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800986e:	683b      	ldr	r3, [r7, #0]
 8009870:	68db      	ldr	r3, [r3, #12]
 8009872:	021b      	lsls	r3, r3, #8
 8009874:	697a      	ldr	r2, [r7, #20]
 8009876:	4313      	orrs	r3, r2
 8009878:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800987a:	697b      	ldr	r3, [r7, #20]
 800987c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009880:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	4a16      	ldr	r2, [pc, #88]	; (80098e0 <TIM_OC3_SetConfig+0xe0>)
 8009886:	4293      	cmp	r3, r2
 8009888:	d003      	beq.n	8009892 <TIM_OC3_SetConfig+0x92>
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	4a15      	ldr	r2, [pc, #84]	; (80098e4 <TIM_OC3_SetConfig+0xe4>)
 800988e:	4293      	cmp	r3, r2
 8009890:	d113      	bne.n	80098ba <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009892:	693b      	ldr	r3, [r7, #16]
 8009894:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009898:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800989a:	693b      	ldr	r3, [r7, #16]
 800989c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80098a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80098a2:	683b      	ldr	r3, [r7, #0]
 80098a4:	695b      	ldr	r3, [r3, #20]
 80098a6:	011b      	lsls	r3, r3, #4
 80098a8:	693a      	ldr	r2, [r7, #16]
 80098aa:	4313      	orrs	r3, r2
 80098ac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80098ae:	683b      	ldr	r3, [r7, #0]
 80098b0:	699b      	ldr	r3, [r3, #24]
 80098b2:	011b      	lsls	r3, r3, #4
 80098b4:	693a      	ldr	r2, [r7, #16]
 80098b6:	4313      	orrs	r3, r2
 80098b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	693a      	ldr	r2, [r7, #16]
 80098be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	68fa      	ldr	r2, [r7, #12]
 80098c4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80098c6:	683b      	ldr	r3, [r7, #0]
 80098c8:	685a      	ldr	r2, [r3, #4]
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	697a      	ldr	r2, [r7, #20]
 80098d2:	621a      	str	r2, [r3, #32]
}
 80098d4:	bf00      	nop
 80098d6:	371c      	adds	r7, #28
 80098d8:	46bd      	mov	sp, r7
 80098da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098de:	4770      	bx	lr
 80098e0:	40010000 	.word	0x40010000
 80098e4:	40010400 	.word	0x40010400

080098e8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80098e8:	b480      	push	{r7}
 80098ea:	b087      	sub	sp, #28
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	6078      	str	r0, [r7, #4]
 80098f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	6a1b      	ldr	r3, [r3, #32]
 80098f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	6a1b      	ldr	r3, [r3, #32]
 8009902:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	685b      	ldr	r3, [r3, #4]
 8009908:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	69db      	ldr	r3, [r3, #28]
 800990e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009916:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800991e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009920:	683b      	ldr	r3, [r7, #0]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	021b      	lsls	r3, r3, #8
 8009926:	68fa      	ldr	r2, [r7, #12]
 8009928:	4313      	orrs	r3, r2
 800992a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800992c:	693b      	ldr	r3, [r7, #16]
 800992e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009932:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009934:	683b      	ldr	r3, [r7, #0]
 8009936:	689b      	ldr	r3, [r3, #8]
 8009938:	031b      	lsls	r3, r3, #12
 800993a:	693a      	ldr	r2, [r7, #16]
 800993c:	4313      	orrs	r3, r2
 800993e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	4a12      	ldr	r2, [pc, #72]	; (800998c <TIM_OC4_SetConfig+0xa4>)
 8009944:	4293      	cmp	r3, r2
 8009946:	d003      	beq.n	8009950 <TIM_OC4_SetConfig+0x68>
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	4a11      	ldr	r2, [pc, #68]	; (8009990 <TIM_OC4_SetConfig+0xa8>)
 800994c:	4293      	cmp	r3, r2
 800994e:	d109      	bne.n	8009964 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009950:	697b      	ldr	r3, [r7, #20]
 8009952:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009956:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009958:	683b      	ldr	r3, [r7, #0]
 800995a:	695b      	ldr	r3, [r3, #20]
 800995c:	019b      	lsls	r3, r3, #6
 800995e:	697a      	ldr	r2, [r7, #20]
 8009960:	4313      	orrs	r3, r2
 8009962:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	697a      	ldr	r2, [r7, #20]
 8009968:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	68fa      	ldr	r2, [r7, #12]
 800996e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009970:	683b      	ldr	r3, [r7, #0]
 8009972:	685a      	ldr	r2, [r3, #4]
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	693a      	ldr	r2, [r7, #16]
 800997c:	621a      	str	r2, [r3, #32]
}
 800997e:	bf00      	nop
 8009980:	371c      	adds	r7, #28
 8009982:	46bd      	mov	sp, r7
 8009984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009988:	4770      	bx	lr
 800998a:	bf00      	nop
 800998c:	40010000 	.word	0x40010000
 8009990:	40010400 	.word	0x40010400

08009994 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8009994:	b580      	push	{r7, lr}
 8009996:	b086      	sub	sp, #24
 8009998:	af00      	add	r7, sp, #0
 800999a:	6078      	str	r0, [r7, #4]
 800999c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800999e:	2300      	movs	r3, #0
 80099a0:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	689b      	ldr	r3, [r3, #8]
 80099a8:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80099aa:	693b      	ldr	r3, [r7, #16]
 80099ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80099b0:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80099b2:	683b      	ldr	r3, [r7, #0]
 80099b4:	685b      	ldr	r3, [r3, #4]
 80099b6:	693a      	ldr	r2, [r7, #16]
 80099b8:	4313      	orrs	r3, r2
 80099ba:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80099bc:	693b      	ldr	r3, [r7, #16]
 80099be:	f023 0307 	bic.w	r3, r3, #7
 80099c2:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80099c4:	683b      	ldr	r3, [r7, #0]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	693a      	ldr	r2, [r7, #16]
 80099ca:	4313      	orrs	r3, r2
 80099cc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	693a      	ldr	r2, [r7, #16]
 80099d4:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80099d6:	683b      	ldr	r3, [r7, #0]
 80099d8:	685b      	ldr	r3, [r3, #4]
 80099da:	2b70      	cmp	r3, #112	; 0x70
 80099dc:	d01a      	beq.n	8009a14 <TIM_SlaveTimer_SetConfig+0x80>
 80099de:	2b70      	cmp	r3, #112	; 0x70
 80099e0:	d860      	bhi.n	8009aa4 <TIM_SlaveTimer_SetConfig+0x110>
 80099e2:	2b60      	cmp	r3, #96	; 0x60
 80099e4:	d054      	beq.n	8009a90 <TIM_SlaveTimer_SetConfig+0xfc>
 80099e6:	2b60      	cmp	r3, #96	; 0x60
 80099e8:	d85c      	bhi.n	8009aa4 <TIM_SlaveTimer_SetConfig+0x110>
 80099ea:	2b50      	cmp	r3, #80	; 0x50
 80099ec:	d046      	beq.n	8009a7c <TIM_SlaveTimer_SetConfig+0xe8>
 80099ee:	2b50      	cmp	r3, #80	; 0x50
 80099f0:	d858      	bhi.n	8009aa4 <TIM_SlaveTimer_SetConfig+0x110>
 80099f2:	2b40      	cmp	r3, #64	; 0x40
 80099f4:	d019      	beq.n	8009a2a <TIM_SlaveTimer_SetConfig+0x96>
 80099f6:	2b40      	cmp	r3, #64	; 0x40
 80099f8:	d854      	bhi.n	8009aa4 <TIM_SlaveTimer_SetConfig+0x110>
 80099fa:	2b30      	cmp	r3, #48	; 0x30
 80099fc:	d055      	beq.n	8009aaa <TIM_SlaveTimer_SetConfig+0x116>
 80099fe:	2b30      	cmp	r3, #48	; 0x30
 8009a00:	d850      	bhi.n	8009aa4 <TIM_SlaveTimer_SetConfig+0x110>
 8009a02:	2b20      	cmp	r3, #32
 8009a04:	d051      	beq.n	8009aaa <TIM_SlaveTimer_SetConfig+0x116>
 8009a06:	2b20      	cmp	r3, #32
 8009a08:	d84c      	bhi.n	8009aa4 <TIM_SlaveTimer_SetConfig+0x110>
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d04d      	beq.n	8009aaa <TIM_SlaveTimer_SetConfig+0x116>
 8009a0e:	2b10      	cmp	r3, #16
 8009a10:	d04b      	beq.n	8009aaa <TIM_SlaveTimer_SetConfig+0x116>
 8009a12:	e047      	b.n	8009aa4 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	6818      	ldr	r0, [r3, #0]
 8009a18:	683b      	ldr	r3, [r7, #0]
 8009a1a:	68d9      	ldr	r1, [r3, #12]
 8009a1c:	683b      	ldr	r3, [r7, #0]
 8009a1e:	689a      	ldr	r2, [r3, #8]
 8009a20:	683b      	ldr	r3, [r7, #0]
 8009a22:	691b      	ldr	r3, [r3, #16]
 8009a24:	f000 f9ec 	bl	8009e00 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8009a28:	e040      	b.n	8009aac <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8009a2a:	683b      	ldr	r3, [r7, #0]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	2b05      	cmp	r3, #5
 8009a30:	d101      	bne.n	8009a36 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8009a32:	2301      	movs	r3, #1
 8009a34:	e03b      	b.n	8009aae <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	6a1b      	ldr	r3, [r3, #32]
 8009a3c:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	6a1a      	ldr	r2, [r3, #32]
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	f022 0201 	bic.w	r2, r2, #1
 8009a4c:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	699b      	ldr	r3, [r3, #24]
 8009a54:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009a56:	68bb      	ldr	r3, [r7, #8]
 8009a58:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009a5c:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8009a5e:	683b      	ldr	r3, [r7, #0]
 8009a60:	691b      	ldr	r3, [r3, #16]
 8009a62:	011b      	lsls	r3, r3, #4
 8009a64:	68ba      	ldr	r2, [r7, #8]
 8009a66:	4313      	orrs	r3, r2
 8009a68:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	68ba      	ldr	r2, [r7, #8]
 8009a70:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	68fa      	ldr	r2, [r7, #12]
 8009a78:	621a      	str	r2, [r3, #32]
      break;
 8009a7a:	e017      	b.n	8009aac <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	6818      	ldr	r0, [r3, #0]
 8009a80:	683b      	ldr	r3, [r7, #0]
 8009a82:	6899      	ldr	r1, [r3, #8]
 8009a84:	683b      	ldr	r3, [r7, #0]
 8009a86:	691b      	ldr	r3, [r3, #16]
 8009a88:	461a      	mov	r2, r3
 8009a8a:	f000 f889 	bl	8009ba0 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8009a8e:	e00d      	b.n	8009aac <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	6818      	ldr	r0, [r3, #0]
 8009a94:	683b      	ldr	r3, [r7, #0]
 8009a96:	6899      	ldr	r1, [r3, #8]
 8009a98:	683b      	ldr	r3, [r7, #0]
 8009a9a:	691b      	ldr	r3, [r3, #16]
 8009a9c:	461a      	mov	r2, r3
 8009a9e:	f000 f8eb 	bl	8009c78 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8009aa2:	e003      	b.n	8009aac <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8009aa4:	2301      	movs	r3, #1
 8009aa6:	75fb      	strb	r3, [r7, #23]
      break;
 8009aa8:	e000      	b.n	8009aac <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8009aaa:	bf00      	nop
  }

  return status;
 8009aac:	7dfb      	ldrb	r3, [r7, #23]
}
 8009aae:	4618      	mov	r0, r3
 8009ab0:	3718      	adds	r7, #24
 8009ab2:	46bd      	mov	sp, r7
 8009ab4:	bd80      	pop	{r7, pc}
	...

08009ab8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8009ab8:	b480      	push	{r7}
 8009aba:	b087      	sub	sp, #28
 8009abc:	af00      	add	r7, sp, #0
 8009abe:	60f8      	str	r0, [r7, #12]
 8009ac0:	60b9      	str	r1, [r7, #8]
 8009ac2:	607a      	str	r2, [r7, #4]
 8009ac4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	6a1b      	ldr	r3, [r3, #32]
 8009aca:	f023 0201 	bic.w	r2, r3, #1
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	699b      	ldr	r3, [r3, #24]
 8009ad6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	6a1b      	ldr	r3, [r3, #32]
 8009adc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	4a28      	ldr	r2, [pc, #160]	; (8009b84 <TIM_TI1_SetConfig+0xcc>)
 8009ae2:	4293      	cmp	r3, r2
 8009ae4:	d01b      	beq.n	8009b1e <TIM_TI1_SetConfig+0x66>
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009aec:	d017      	beq.n	8009b1e <TIM_TI1_SetConfig+0x66>
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	4a25      	ldr	r2, [pc, #148]	; (8009b88 <TIM_TI1_SetConfig+0xd0>)
 8009af2:	4293      	cmp	r3, r2
 8009af4:	d013      	beq.n	8009b1e <TIM_TI1_SetConfig+0x66>
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	4a24      	ldr	r2, [pc, #144]	; (8009b8c <TIM_TI1_SetConfig+0xd4>)
 8009afa:	4293      	cmp	r3, r2
 8009afc:	d00f      	beq.n	8009b1e <TIM_TI1_SetConfig+0x66>
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	4a23      	ldr	r2, [pc, #140]	; (8009b90 <TIM_TI1_SetConfig+0xd8>)
 8009b02:	4293      	cmp	r3, r2
 8009b04:	d00b      	beq.n	8009b1e <TIM_TI1_SetConfig+0x66>
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	4a22      	ldr	r2, [pc, #136]	; (8009b94 <TIM_TI1_SetConfig+0xdc>)
 8009b0a:	4293      	cmp	r3, r2
 8009b0c:	d007      	beq.n	8009b1e <TIM_TI1_SetConfig+0x66>
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	4a21      	ldr	r2, [pc, #132]	; (8009b98 <TIM_TI1_SetConfig+0xe0>)
 8009b12:	4293      	cmp	r3, r2
 8009b14:	d003      	beq.n	8009b1e <TIM_TI1_SetConfig+0x66>
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	4a20      	ldr	r2, [pc, #128]	; (8009b9c <TIM_TI1_SetConfig+0xe4>)
 8009b1a:	4293      	cmp	r3, r2
 8009b1c:	d101      	bne.n	8009b22 <TIM_TI1_SetConfig+0x6a>
 8009b1e:	2301      	movs	r3, #1
 8009b20:	e000      	b.n	8009b24 <TIM_TI1_SetConfig+0x6c>
 8009b22:	2300      	movs	r3, #0
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d008      	beq.n	8009b3a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8009b28:	697b      	ldr	r3, [r7, #20]
 8009b2a:	f023 0303 	bic.w	r3, r3, #3
 8009b2e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8009b30:	697a      	ldr	r2, [r7, #20]
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	4313      	orrs	r3, r2
 8009b36:	617b      	str	r3, [r7, #20]
 8009b38:	e003      	b.n	8009b42 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8009b3a:	697b      	ldr	r3, [r7, #20]
 8009b3c:	f043 0301 	orr.w	r3, r3, #1
 8009b40:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009b42:	697b      	ldr	r3, [r7, #20]
 8009b44:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009b48:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8009b4a:	683b      	ldr	r3, [r7, #0]
 8009b4c:	011b      	lsls	r3, r3, #4
 8009b4e:	b2db      	uxtb	r3, r3
 8009b50:	697a      	ldr	r2, [r7, #20]
 8009b52:	4313      	orrs	r3, r2
 8009b54:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009b56:	693b      	ldr	r3, [r7, #16]
 8009b58:	f023 030a 	bic.w	r3, r3, #10
 8009b5c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8009b5e:	68bb      	ldr	r3, [r7, #8]
 8009b60:	f003 030a 	and.w	r3, r3, #10
 8009b64:	693a      	ldr	r2, [r7, #16]
 8009b66:	4313      	orrs	r3, r2
 8009b68:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	697a      	ldr	r2, [r7, #20]
 8009b6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	693a      	ldr	r2, [r7, #16]
 8009b74:	621a      	str	r2, [r3, #32]
}
 8009b76:	bf00      	nop
 8009b78:	371c      	adds	r7, #28
 8009b7a:	46bd      	mov	sp, r7
 8009b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b80:	4770      	bx	lr
 8009b82:	bf00      	nop
 8009b84:	40010000 	.word	0x40010000
 8009b88:	40000400 	.word	0x40000400
 8009b8c:	40000800 	.word	0x40000800
 8009b90:	40000c00 	.word	0x40000c00
 8009b94:	40010400 	.word	0x40010400
 8009b98:	40014000 	.word	0x40014000
 8009b9c:	40001800 	.word	0x40001800

08009ba0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009ba0:	b480      	push	{r7}
 8009ba2:	b087      	sub	sp, #28
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	60f8      	str	r0, [r7, #12]
 8009ba8:	60b9      	str	r1, [r7, #8]
 8009baa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	6a1b      	ldr	r3, [r3, #32]
 8009bb0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	6a1b      	ldr	r3, [r3, #32]
 8009bb6:	f023 0201 	bic.w	r2, r3, #1
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	699b      	ldr	r3, [r3, #24]
 8009bc2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009bc4:	693b      	ldr	r3, [r7, #16]
 8009bc6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009bca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	011b      	lsls	r3, r3, #4
 8009bd0:	693a      	ldr	r2, [r7, #16]
 8009bd2:	4313      	orrs	r3, r2
 8009bd4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009bd6:	697b      	ldr	r3, [r7, #20]
 8009bd8:	f023 030a 	bic.w	r3, r3, #10
 8009bdc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009bde:	697a      	ldr	r2, [r7, #20]
 8009be0:	68bb      	ldr	r3, [r7, #8]
 8009be2:	4313      	orrs	r3, r2
 8009be4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	693a      	ldr	r2, [r7, #16]
 8009bea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	697a      	ldr	r2, [r7, #20]
 8009bf0:	621a      	str	r2, [r3, #32]
}
 8009bf2:	bf00      	nop
 8009bf4:	371c      	adds	r7, #28
 8009bf6:	46bd      	mov	sp, r7
 8009bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bfc:	4770      	bx	lr

08009bfe <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009bfe:	b480      	push	{r7}
 8009c00:	b087      	sub	sp, #28
 8009c02:	af00      	add	r7, sp, #0
 8009c04:	60f8      	str	r0, [r7, #12]
 8009c06:	60b9      	str	r1, [r7, #8]
 8009c08:	607a      	str	r2, [r7, #4]
 8009c0a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	6a1b      	ldr	r3, [r3, #32]
 8009c10:	f023 0210 	bic.w	r2, r3, #16
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	699b      	ldr	r3, [r3, #24]
 8009c1c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	6a1b      	ldr	r3, [r3, #32]
 8009c22:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8009c24:	697b      	ldr	r3, [r7, #20]
 8009c26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009c2a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	021b      	lsls	r3, r3, #8
 8009c30:	697a      	ldr	r2, [r7, #20]
 8009c32:	4313      	orrs	r3, r2
 8009c34:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009c36:	697b      	ldr	r3, [r7, #20]
 8009c38:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009c3c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8009c3e:	683b      	ldr	r3, [r7, #0]
 8009c40:	031b      	lsls	r3, r3, #12
 8009c42:	b29b      	uxth	r3, r3
 8009c44:	697a      	ldr	r2, [r7, #20]
 8009c46:	4313      	orrs	r3, r2
 8009c48:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009c4a:	693b      	ldr	r3, [r7, #16]
 8009c4c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009c50:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8009c52:	68bb      	ldr	r3, [r7, #8]
 8009c54:	011b      	lsls	r3, r3, #4
 8009c56:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8009c5a:	693a      	ldr	r2, [r7, #16]
 8009c5c:	4313      	orrs	r3, r2
 8009c5e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	697a      	ldr	r2, [r7, #20]
 8009c64:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	693a      	ldr	r2, [r7, #16]
 8009c6a:	621a      	str	r2, [r3, #32]
}
 8009c6c:	bf00      	nop
 8009c6e:	371c      	adds	r7, #28
 8009c70:	46bd      	mov	sp, r7
 8009c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c76:	4770      	bx	lr

08009c78 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009c78:	b480      	push	{r7}
 8009c7a:	b087      	sub	sp, #28
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	60f8      	str	r0, [r7, #12]
 8009c80:	60b9      	str	r1, [r7, #8]
 8009c82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	6a1b      	ldr	r3, [r3, #32]
 8009c88:	f023 0210 	bic.w	r2, r3, #16
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	699b      	ldr	r3, [r3, #24]
 8009c94:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	6a1b      	ldr	r3, [r3, #32]
 8009c9a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009c9c:	697b      	ldr	r3, [r7, #20]
 8009c9e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009ca2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	031b      	lsls	r3, r3, #12
 8009ca8:	697a      	ldr	r2, [r7, #20]
 8009caa:	4313      	orrs	r3, r2
 8009cac:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009cae:	693b      	ldr	r3, [r7, #16]
 8009cb0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009cb4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009cb6:	68bb      	ldr	r3, [r7, #8]
 8009cb8:	011b      	lsls	r3, r3, #4
 8009cba:	693a      	ldr	r2, [r7, #16]
 8009cbc:	4313      	orrs	r3, r2
 8009cbe:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	697a      	ldr	r2, [r7, #20]
 8009cc4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	693a      	ldr	r2, [r7, #16]
 8009cca:	621a      	str	r2, [r3, #32]
}
 8009ccc:	bf00      	nop
 8009cce:	371c      	adds	r7, #28
 8009cd0:	46bd      	mov	sp, r7
 8009cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd6:	4770      	bx	lr

08009cd8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009cd8:	b480      	push	{r7}
 8009cda:	b087      	sub	sp, #28
 8009cdc:	af00      	add	r7, sp, #0
 8009cde:	60f8      	str	r0, [r7, #12]
 8009ce0:	60b9      	str	r1, [r7, #8]
 8009ce2:	607a      	str	r2, [r7, #4]
 8009ce4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	6a1b      	ldr	r3, [r3, #32]
 8009cea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	69db      	ldr	r3, [r3, #28]
 8009cf6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	6a1b      	ldr	r3, [r3, #32]
 8009cfc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8009cfe:	697b      	ldr	r3, [r7, #20]
 8009d00:	f023 0303 	bic.w	r3, r3, #3
 8009d04:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8009d06:	697a      	ldr	r2, [r7, #20]
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	4313      	orrs	r3, r2
 8009d0c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8009d0e:	697b      	ldr	r3, [r7, #20]
 8009d10:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009d14:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8009d16:	683b      	ldr	r3, [r7, #0]
 8009d18:	011b      	lsls	r3, r3, #4
 8009d1a:	b2db      	uxtb	r3, r3
 8009d1c:	697a      	ldr	r2, [r7, #20]
 8009d1e:	4313      	orrs	r3, r2
 8009d20:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8009d22:	693b      	ldr	r3, [r7, #16]
 8009d24:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8009d28:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8009d2a:	68bb      	ldr	r3, [r7, #8]
 8009d2c:	021b      	lsls	r3, r3, #8
 8009d2e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8009d32:	693a      	ldr	r2, [r7, #16]
 8009d34:	4313      	orrs	r3, r2
 8009d36:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	697a      	ldr	r2, [r7, #20]
 8009d3c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	693a      	ldr	r2, [r7, #16]
 8009d42:	621a      	str	r2, [r3, #32]
}
 8009d44:	bf00      	nop
 8009d46:	371c      	adds	r7, #28
 8009d48:	46bd      	mov	sp, r7
 8009d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d4e:	4770      	bx	lr

08009d50 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009d50:	b480      	push	{r7}
 8009d52:	b087      	sub	sp, #28
 8009d54:	af00      	add	r7, sp, #0
 8009d56:	60f8      	str	r0, [r7, #12]
 8009d58:	60b9      	str	r1, [r7, #8]
 8009d5a:	607a      	str	r2, [r7, #4]
 8009d5c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	6a1b      	ldr	r3, [r3, #32]
 8009d62:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	69db      	ldr	r3, [r3, #28]
 8009d6e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	6a1b      	ldr	r3, [r3, #32]
 8009d74:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8009d76:	697b      	ldr	r3, [r7, #20]
 8009d78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009d7c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	021b      	lsls	r3, r3, #8
 8009d82:	697a      	ldr	r2, [r7, #20]
 8009d84:	4313      	orrs	r3, r2
 8009d86:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8009d88:	697b      	ldr	r3, [r7, #20]
 8009d8a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009d8e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8009d90:	683b      	ldr	r3, [r7, #0]
 8009d92:	031b      	lsls	r3, r3, #12
 8009d94:	b29b      	uxth	r3, r3
 8009d96:	697a      	ldr	r2, [r7, #20]
 8009d98:	4313      	orrs	r3, r2
 8009d9a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8009d9c:	693b      	ldr	r3, [r7, #16]
 8009d9e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8009da2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8009da4:	68bb      	ldr	r3, [r7, #8]
 8009da6:	031b      	lsls	r3, r3, #12
 8009da8:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8009dac:	693a      	ldr	r2, [r7, #16]
 8009dae:	4313      	orrs	r3, r2
 8009db0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	697a      	ldr	r2, [r7, #20]
 8009db6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	693a      	ldr	r2, [r7, #16]
 8009dbc:	621a      	str	r2, [r3, #32]
}
 8009dbe:	bf00      	nop
 8009dc0:	371c      	adds	r7, #28
 8009dc2:	46bd      	mov	sp, r7
 8009dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc8:	4770      	bx	lr

08009dca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009dca:	b480      	push	{r7}
 8009dcc:	b085      	sub	sp, #20
 8009dce:	af00      	add	r7, sp, #0
 8009dd0:	6078      	str	r0, [r7, #4]
 8009dd2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	689b      	ldr	r3, [r3, #8]
 8009dd8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009de0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009de2:	683a      	ldr	r2, [r7, #0]
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	4313      	orrs	r3, r2
 8009de8:	f043 0307 	orr.w	r3, r3, #7
 8009dec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	68fa      	ldr	r2, [r7, #12]
 8009df2:	609a      	str	r2, [r3, #8]
}
 8009df4:	bf00      	nop
 8009df6:	3714      	adds	r7, #20
 8009df8:	46bd      	mov	sp, r7
 8009dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dfe:	4770      	bx	lr

08009e00 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009e00:	b480      	push	{r7}
 8009e02:	b087      	sub	sp, #28
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	60f8      	str	r0, [r7, #12]
 8009e08:	60b9      	str	r1, [r7, #8]
 8009e0a:	607a      	str	r2, [r7, #4]
 8009e0c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	689b      	ldr	r3, [r3, #8]
 8009e12:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009e14:	697b      	ldr	r3, [r7, #20]
 8009e16:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009e1a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009e1c:	683b      	ldr	r3, [r7, #0]
 8009e1e:	021a      	lsls	r2, r3, #8
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	431a      	orrs	r2, r3
 8009e24:	68bb      	ldr	r3, [r7, #8]
 8009e26:	4313      	orrs	r3, r2
 8009e28:	697a      	ldr	r2, [r7, #20]
 8009e2a:	4313      	orrs	r3, r2
 8009e2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	697a      	ldr	r2, [r7, #20]
 8009e32:	609a      	str	r2, [r3, #8]
}
 8009e34:	bf00      	nop
 8009e36:	371c      	adds	r7, #28
 8009e38:	46bd      	mov	sp, r7
 8009e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e3e:	4770      	bx	lr

08009e40 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009e40:	b480      	push	{r7}
 8009e42:	b087      	sub	sp, #28
 8009e44:	af00      	add	r7, sp, #0
 8009e46:	60f8      	str	r0, [r7, #12]
 8009e48:	60b9      	str	r1, [r7, #8]
 8009e4a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009e4c:	68bb      	ldr	r3, [r7, #8]
 8009e4e:	f003 031f 	and.w	r3, r3, #31
 8009e52:	2201      	movs	r2, #1
 8009e54:	fa02 f303 	lsl.w	r3, r2, r3
 8009e58:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	6a1a      	ldr	r2, [r3, #32]
 8009e5e:	697b      	ldr	r3, [r7, #20]
 8009e60:	43db      	mvns	r3, r3
 8009e62:	401a      	ands	r2, r3
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	6a1a      	ldr	r2, [r3, #32]
 8009e6c:	68bb      	ldr	r3, [r7, #8]
 8009e6e:	f003 031f 	and.w	r3, r3, #31
 8009e72:	6879      	ldr	r1, [r7, #4]
 8009e74:	fa01 f303 	lsl.w	r3, r1, r3
 8009e78:	431a      	orrs	r2, r3
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	621a      	str	r2, [r3, #32]
}
 8009e7e:	bf00      	nop
 8009e80:	371c      	adds	r7, #28
 8009e82:	46bd      	mov	sp, r7
 8009e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e88:	4770      	bx	lr
	...

08009e8c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009e8c:	b480      	push	{r7}
 8009e8e:	b085      	sub	sp, #20
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	6078      	str	r0, [r7, #4]
 8009e94:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009e9c:	2b01      	cmp	r3, #1
 8009e9e:	d101      	bne.n	8009ea4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009ea0:	2302      	movs	r3, #2
 8009ea2:	e05a      	b.n	8009f5a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	2201      	movs	r2, #1
 8009ea8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	2202      	movs	r2, #2
 8009eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	685b      	ldr	r3, [r3, #4]
 8009eba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	689b      	ldr	r3, [r3, #8]
 8009ec2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009eca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009ecc:	683b      	ldr	r3, [r7, #0]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	68fa      	ldr	r2, [r7, #12]
 8009ed2:	4313      	orrs	r3, r2
 8009ed4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	68fa      	ldr	r2, [r7, #12]
 8009edc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	4a21      	ldr	r2, [pc, #132]	; (8009f68 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009ee4:	4293      	cmp	r3, r2
 8009ee6:	d022      	beq.n	8009f2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ef0:	d01d      	beq.n	8009f2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	4a1d      	ldr	r2, [pc, #116]	; (8009f6c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009ef8:	4293      	cmp	r3, r2
 8009efa:	d018      	beq.n	8009f2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	4a1b      	ldr	r2, [pc, #108]	; (8009f70 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8009f02:	4293      	cmp	r3, r2
 8009f04:	d013      	beq.n	8009f2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	4a1a      	ldr	r2, [pc, #104]	; (8009f74 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009f0c:	4293      	cmp	r3, r2
 8009f0e:	d00e      	beq.n	8009f2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	4a18      	ldr	r2, [pc, #96]	; (8009f78 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009f16:	4293      	cmp	r3, r2
 8009f18:	d009      	beq.n	8009f2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	4a17      	ldr	r2, [pc, #92]	; (8009f7c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009f20:	4293      	cmp	r3, r2
 8009f22:	d004      	beq.n	8009f2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	4a15      	ldr	r2, [pc, #84]	; (8009f80 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009f2a:	4293      	cmp	r3, r2
 8009f2c:	d10c      	bne.n	8009f48 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009f2e:	68bb      	ldr	r3, [r7, #8]
 8009f30:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009f34:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009f36:	683b      	ldr	r3, [r7, #0]
 8009f38:	685b      	ldr	r3, [r3, #4]
 8009f3a:	68ba      	ldr	r2, [r7, #8]
 8009f3c:	4313      	orrs	r3, r2
 8009f3e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	68ba      	ldr	r2, [r7, #8]
 8009f46:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	2201      	movs	r2, #1
 8009f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	2200      	movs	r2, #0
 8009f54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009f58:	2300      	movs	r3, #0
}
 8009f5a:	4618      	mov	r0, r3
 8009f5c:	3714      	adds	r7, #20
 8009f5e:	46bd      	mov	sp, r7
 8009f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f64:	4770      	bx	lr
 8009f66:	bf00      	nop
 8009f68:	40010000 	.word	0x40010000
 8009f6c:	40000400 	.word	0x40000400
 8009f70:	40000800 	.word	0x40000800
 8009f74:	40000c00 	.word	0x40000c00
 8009f78:	40010400 	.word	0x40010400
 8009f7c:	40014000 	.word	0x40014000
 8009f80:	40001800 	.word	0x40001800

08009f84 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009f84:	b480      	push	{r7}
 8009f86:	b083      	sub	sp, #12
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009f8c:	bf00      	nop
 8009f8e:	370c      	adds	r7, #12
 8009f90:	46bd      	mov	sp, r7
 8009f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f96:	4770      	bx	lr

08009f98 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009f98:	b480      	push	{r7}
 8009f9a:	b083      	sub	sp, #12
 8009f9c:	af00      	add	r7, sp, #0
 8009f9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009fa0:	bf00      	nop
 8009fa2:	370c      	adds	r7, #12
 8009fa4:	46bd      	mov	sp, r7
 8009fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009faa:	4770      	bx	lr

08009fac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009fac:	b580      	push	{r7, lr}
 8009fae:	b082      	sub	sp, #8
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d101      	bne.n	8009fbe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009fba:	2301      	movs	r3, #1
 8009fbc:	e03f      	b.n	800a03e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009fc4:	b2db      	uxtb	r3, r3
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d106      	bne.n	8009fd8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	2200      	movs	r2, #0
 8009fce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009fd2:	6878      	ldr	r0, [r7, #4]
 8009fd4:	f7f9 ff56 	bl	8003e84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	2224      	movs	r2, #36	; 0x24
 8009fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	68da      	ldr	r2, [r3, #12]
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009fee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009ff0:	6878      	ldr	r0, [r7, #4]
 8009ff2:	f000 fea3 	bl	800ad3c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	691a      	ldr	r2, [r3, #16]
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a004:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	695a      	ldr	r2, [r3, #20]
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a014:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	68da      	ldr	r2, [r3, #12]
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a024:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	2200      	movs	r2, #0
 800a02a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	2220      	movs	r2, #32
 800a030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	2220      	movs	r2, #32
 800a038:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800a03c:	2300      	movs	r3, #0
}
 800a03e:	4618      	mov	r0, r3
 800a040:	3708      	adds	r7, #8
 800a042:	46bd      	mov	sp, r7
 800a044:	bd80      	pop	{r7, pc}

0800a046 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800a046:	b480      	push	{r7}
 800a048:	b085      	sub	sp, #20
 800a04a:	af00      	add	r7, sp, #0
 800a04c:	60f8      	str	r0, [r7, #12]
 800a04e:	60b9      	str	r1, [r7, #8]
 800a050:	4613      	mov	r3, r2
 800a052:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a05a:	b2db      	uxtb	r3, r3
 800a05c:	2b20      	cmp	r3, #32
 800a05e:	d130      	bne.n	800a0c2 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800a060:	68bb      	ldr	r3, [r7, #8]
 800a062:	2b00      	cmp	r3, #0
 800a064:	d002      	beq.n	800a06c <HAL_UART_Transmit_IT+0x26>
 800a066:	88fb      	ldrh	r3, [r7, #6]
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d101      	bne.n	800a070 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800a06c:	2301      	movs	r3, #1
 800a06e:	e029      	b.n	800a0c4 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a076:	2b01      	cmp	r3, #1
 800a078:	d101      	bne.n	800a07e <HAL_UART_Transmit_IT+0x38>
 800a07a:	2302      	movs	r3, #2
 800a07c:	e022      	b.n	800a0c4 <HAL_UART_Transmit_IT+0x7e>
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	2201      	movs	r2, #1
 800a082:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	68ba      	ldr	r2, [r7, #8]
 800a08a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	88fa      	ldrh	r2, [r7, #6]
 800a090:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	88fa      	ldrh	r2, [r7, #6]
 800a096:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	2200      	movs	r2, #0
 800a09c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	2221      	movs	r2, #33	; 0x21
 800a0a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	2200      	movs	r2, #0
 800a0aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	68da      	ldr	r2, [r3, #12]
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a0bc:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800a0be:	2300      	movs	r3, #0
 800a0c0:	e000      	b.n	800a0c4 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800a0c2:	2302      	movs	r3, #2
  }
}
 800a0c4:	4618      	mov	r0, r3
 800a0c6:	3714      	adds	r7, #20
 800a0c8:	46bd      	mov	sp, r7
 800a0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ce:	4770      	bx	lr

0800a0d0 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a0d0:	b580      	push	{r7, lr}
 800a0d2:	b084      	sub	sp, #16
 800a0d4:	af00      	add	r7, sp, #0
 800a0d6:	60f8      	str	r0, [r7, #12]
 800a0d8:	60b9      	str	r1, [r7, #8]
 800a0da:	4613      	mov	r3, r2
 800a0dc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a0e4:	b2db      	uxtb	r3, r3
 800a0e6:	2b20      	cmp	r3, #32
 800a0e8:	d11d      	bne.n	800a126 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800a0ea:	68bb      	ldr	r3, [r7, #8]
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d002      	beq.n	800a0f6 <HAL_UART_Receive_DMA+0x26>
 800a0f0:	88fb      	ldrh	r3, [r7, #6]
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d101      	bne.n	800a0fa <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800a0f6:	2301      	movs	r3, #1
 800a0f8:	e016      	b.n	800a128 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a100:	2b01      	cmp	r3, #1
 800a102:	d101      	bne.n	800a108 <HAL_UART_Receive_DMA+0x38>
 800a104:	2302      	movs	r3, #2
 800a106:	e00f      	b.n	800a128 <HAL_UART_Receive_DMA+0x58>
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	2201      	movs	r2, #1
 800a10c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	2200      	movs	r2, #0
 800a114:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800a116:	88fb      	ldrh	r3, [r7, #6]
 800a118:	461a      	mov	r2, r3
 800a11a:	68b9      	ldr	r1, [r7, #8]
 800a11c:	68f8      	ldr	r0, [r7, #12]
 800a11e:	f000 fbad 	bl	800a87c <UART_Start_Receive_DMA>
 800a122:	4603      	mov	r3, r0
 800a124:	e000      	b.n	800a128 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800a126:	2302      	movs	r3, #2
  }
}
 800a128:	4618      	mov	r0, r3
 800a12a:	3710      	adds	r7, #16
 800a12c:	46bd      	mov	sp, r7
 800a12e:	bd80      	pop	{r7, pc}

0800a130 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a130:	b580      	push	{r7, lr}
 800a132:	b0ba      	sub	sp, #232	; 0xe8
 800a134:	af00      	add	r7, sp, #0
 800a136:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	68db      	ldr	r3, [r3, #12]
 800a148:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	695b      	ldr	r3, [r3, #20]
 800a152:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800a156:	2300      	movs	r3, #0
 800a158:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800a15c:	2300      	movs	r3, #0
 800a15e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800a162:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a166:	f003 030f 	and.w	r3, r3, #15
 800a16a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800a16e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a172:	2b00      	cmp	r3, #0
 800a174:	d10f      	bne.n	800a196 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a176:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a17a:	f003 0320 	and.w	r3, r3, #32
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d009      	beq.n	800a196 <HAL_UART_IRQHandler+0x66>
 800a182:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a186:	f003 0320 	and.w	r3, r3, #32
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d003      	beq.n	800a196 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800a18e:	6878      	ldr	r0, [r7, #4]
 800a190:	f000 fd19 	bl	800abc6 <UART_Receive_IT>
      return;
 800a194:	e256      	b.n	800a644 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800a196:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	f000 80de 	beq.w	800a35c <HAL_UART_IRQHandler+0x22c>
 800a1a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a1a4:	f003 0301 	and.w	r3, r3, #1
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d106      	bne.n	800a1ba <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800a1ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a1b0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	f000 80d1 	beq.w	800a35c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800a1ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a1be:	f003 0301 	and.w	r3, r3, #1
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d00b      	beq.n	800a1de <HAL_UART_IRQHandler+0xae>
 800a1c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a1ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d005      	beq.n	800a1de <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1d6:	f043 0201 	orr.w	r2, r3, #1
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a1de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a1e2:	f003 0304 	and.w	r3, r3, #4
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d00b      	beq.n	800a202 <HAL_UART_IRQHandler+0xd2>
 800a1ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a1ee:	f003 0301 	and.w	r3, r3, #1
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d005      	beq.n	800a202 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1fa:	f043 0202 	orr.w	r2, r3, #2
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a202:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a206:	f003 0302 	and.w	r3, r3, #2
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d00b      	beq.n	800a226 <HAL_UART_IRQHandler+0xf6>
 800a20e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a212:	f003 0301 	and.w	r3, r3, #1
 800a216:	2b00      	cmp	r3, #0
 800a218:	d005      	beq.n	800a226 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a21e:	f043 0204 	orr.w	r2, r3, #4
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800a226:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a22a:	f003 0308 	and.w	r3, r3, #8
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d011      	beq.n	800a256 <HAL_UART_IRQHandler+0x126>
 800a232:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a236:	f003 0320 	and.w	r3, r3, #32
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d105      	bne.n	800a24a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800a23e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a242:	f003 0301 	and.w	r3, r3, #1
 800a246:	2b00      	cmp	r3, #0
 800a248:	d005      	beq.n	800a256 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a24e:	f043 0208 	orr.w	r2, r3, #8
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	f000 81ed 	beq.w	800a63a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a260:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a264:	f003 0320 	and.w	r3, r3, #32
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d008      	beq.n	800a27e <HAL_UART_IRQHandler+0x14e>
 800a26c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a270:	f003 0320 	and.w	r3, r3, #32
 800a274:	2b00      	cmp	r3, #0
 800a276:	d002      	beq.n	800a27e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800a278:	6878      	ldr	r0, [r7, #4]
 800a27a:	f000 fca4 	bl	800abc6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	695b      	ldr	r3, [r3, #20]
 800a284:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a288:	2b40      	cmp	r3, #64	; 0x40
 800a28a:	bf0c      	ite	eq
 800a28c:	2301      	moveq	r3, #1
 800a28e:	2300      	movne	r3, #0
 800a290:	b2db      	uxtb	r3, r3
 800a292:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a29a:	f003 0308 	and.w	r3, r3, #8
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d103      	bne.n	800a2aa <HAL_UART_IRQHandler+0x17a>
 800a2a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d04f      	beq.n	800a34a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a2aa:	6878      	ldr	r0, [r7, #4]
 800a2ac:	f000 fbac 	bl	800aa08 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	695b      	ldr	r3, [r3, #20]
 800a2b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2ba:	2b40      	cmp	r3, #64	; 0x40
 800a2bc:	d141      	bne.n	800a342 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	3314      	adds	r3, #20
 800a2c4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a2cc:	e853 3f00 	ldrex	r3, [r3]
 800a2d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800a2d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a2d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a2dc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	3314      	adds	r3, #20
 800a2e6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a2ea:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800a2ee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2f2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800a2f6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a2fa:	e841 2300 	strex	r3, r2, [r1]
 800a2fe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800a302:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a306:	2b00      	cmp	r3, #0
 800a308:	d1d9      	bne.n	800a2be <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d013      	beq.n	800a33a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a316:	4a7d      	ldr	r2, [pc, #500]	; (800a50c <HAL_UART_IRQHandler+0x3dc>)
 800a318:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a31e:	4618      	mov	r0, r3
 800a320:	f7fb fdce 	bl	8005ec0 <HAL_DMA_Abort_IT>
 800a324:	4603      	mov	r3, r0
 800a326:	2b00      	cmp	r3, #0
 800a328:	d016      	beq.n	800a358 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a32e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a330:	687a      	ldr	r2, [r7, #4]
 800a332:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a334:	4610      	mov	r0, r2
 800a336:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a338:	e00e      	b.n	800a358 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a33a:	6878      	ldr	r0, [r7, #4]
 800a33c:	f000 f990 	bl	800a660 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a340:	e00a      	b.n	800a358 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a342:	6878      	ldr	r0, [r7, #4]
 800a344:	f000 f98c 	bl	800a660 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a348:	e006      	b.n	800a358 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a34a:	6878      	ldr	r0, [r7, #4]
 800a34c:	f000 f988 	bl	800a660 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	2200      	movs	r2, #0
 800a354:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800a356:	e170      	b.n	800a63a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a358:	bf00      	nop
    return;
 800a35a:	e16e      	b.n	800a63a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a360:	2b01      	cmp	r3, #1
 800a362:	f040 814a 	bne.w	800a5fa <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800a366:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a36a:	f003 0310 	and.w	r3, r3, #16
 800a36e:	2b00      	cmp	r3, #0
 800a370:	f000 8143 	beq.w	800a5fa <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800a374:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a378:	f003 0310 	and.w	r3, r3, #16
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	f000 813c 	beq.w	800a5fa <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a382:	2300      	movs	r3, #0
 800a384:	60bb      	str	r3, [r7, #8]
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	60bb      	str	r3, [r7, #8]
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	685b      	ldr	r3, [r3, #4]
 800a394:	60bb      	str	r3, [r7, #8]
 800a396:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	695b      	ldr	r3, [r3, #20]
 800a39e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a3a2:	2b40      	cmp	r3, #64	; 0x40
 800a3a4:	f040 80b4 	bne.w	800a510 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	685b      	ldr	r3, [r3, #4]
 800a3b0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a3b4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	f000 8140 	beq.w	800a63e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a3c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a3c6:	429a      	cmp	r2, r3
 800a3c8:	f080 8139 	bcs.w	800a63e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a3d2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3d8:	69db      	ldr	r3, [r3, #28]
 800a3da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a3de:	f000 8088 	beq.w	800a4f2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	330c      	adds	r3, #12
 800a3e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a3f0:	e853 3f00 	ldrex	r3, [r3]
 800a3f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800a3f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a3fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a400:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	330c      	adds	r3, #12
 800a40a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800a40e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a412:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a416:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800a41a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a41e:	e841 2300 	strex	r3, r2, [r1]
 800a422:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800a426:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d1d9      	bne.n	800a3e2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	3314      	adds	r3, #20
 800a434:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a436:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a438:	e853 3f00 	ldrex	r3, [r3]
 800a43c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a43e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a440:	f023 0301 	bic.w	r3, r3, #1
 800a444:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	3314      	adds	r3, #20
 800a44e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a452:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800a456:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a458:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a45a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a45e:	e841 2300 	strex	r3, r2, [r1]
 800a462:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a464:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a466:	2b00      	cmp	r3, #0
 800a468:	d1e1      	bne.n	800a42e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	3314      	adds	r3, #20
 800a470:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a472:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a474:	e853 3f00 	ldrex	r3, [r3]
 800a478:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a47a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a47c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a480:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	3314      	adds	r3, #20
 800a48a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a48e:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a490:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a492:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a494:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a496:	e841 2300 	strex	r3, r2, [r1]
 800a49a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a49c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d1e3      	bne.n	800a46a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	2220      	movs	r2, #32
 800a4a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	2200      	movs	r2, #0
 800a4ae:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	330c      	adds	r3, #12
 800a4b6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a4ba:	e853 3f00 	ldrex	r3, [r3]
 800a4be:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a4c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a4c2:	f023 0310 	bic.w	r3, r3, #16
 800a4c6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	330c      	adds	r3, #12
 800a4d0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800a4d4:	65ba      	str	r2, [r7, #88]	; 0x58
 800a4d6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4d8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a4da:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a4dc:	e841 2300 	strex	r3, r2, [r1]
 800a4e0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a4e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d1e3      	bne.n	800a4b0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4ec:	4618      	mov	r0, r3
 800a4ee:	f7fb fc77 	bl	8005de0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a4fa:	b29b      	uxth	r3, r3
 800a4fc:	1ad3      	subs	r3, r2, r3
 800a4fe:	b29b      	uxth	r3, r3
 800a500:	4619      	mov	r1, r3
 800a502:	6878      	ldr	r0, [r7, #4]
 800a504:	f000 f8b6 	bl	800a674 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a508:	e099      	b.n	800a63e <HAL_UART_IRQHandler+0x50e>
 800a50a:	bf00      	nop
 800a50c:	0800aacf 	.word	0x0800aacf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a518:	b29b      	uxth	r3, r3
 800a51a:	1ad3      	subs	r3, r2, r3
 800a51c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a524:	b29b      	uxth	r3, r3
 800a526:	2b00      	cmp	r3, #0
 800a528:	f000 808b 	beq.w	800a642 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800a52c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a530:	2b00      	cmp	r3, #0
 800a532:	f000 8086 	beq.w	800a642 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	330c      	adds	r3, #12
 800a53c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a53e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a540:	e853 3f00 	ldrex	r3, [r3]
 800a544:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a546:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a548:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a54c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	330c      	adds	r3, #12
 800a556:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800a55a:	647a      	str	r2, [r7, #68]	; 0x44
 800a55c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a55e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a560:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a562:	e841 2300 	strex	r3, r2, [r1]
 800a566:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a568:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d1e3      	bne.n	800a536 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	3314      	adds	r3, #20
 800a574:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a578:	e853 3f00 	ldrex	r3, [r3]
 800a57c:	623b      	str	r3, [r7, #32]
   return(result);
 800a57e:	6a3b      	ldr	r3, [r7, #32]
 800a580:	f023 0301 	bic.w	r3, r3, #1
 800a584:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	3314      	adds	r3, #20
 800a58e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a592:	633a      	str	r2, [r7, #48]	; 0x30
 800a594:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a596:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a598:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a59a:	e841 2300 	strex	r3, r2, [r1]
 800a59e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a5a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d1e3      	bne.n	800a56e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	2220      	movs	r2, #32
 800a5aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	2200      	movs	r2, #0
 800a5b2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	330c      	adds	r3, #12
 800a5ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5bc:	693b      	ldr	r3, [r7, #16]
 800a5be:	e853 3f00 	ldrex	r3, [r3]
 800a5c2:	60fb      	str	r3, [r7, #12]
   return(result);
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	f023 0310 	bic.w	r3, r3, #16
 800a5ca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	330c      	adds	r3, #12
 800a5d4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800a5d8:	61fa      	str	r2, [r7, #28]
 800a5da:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5dc:	69b9      	ldr	r1, [r7, #24]
 800a5de:	69fa      	ldr	r2, [r7, #28]
 800a5e0:	e841 2300 	strex	r3, r2, [r1]
 800a5e4:	617b      	str	r3, [r7, #20]
   return(result);
 800a5e6:	697b      	ldr	r3, [r7, #20]
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d1e3      	bne.n	800a5b4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a5ec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a5f0:	4619      	mov	r1, r3
 800a5f2:	6878      	ldr	r0, [r7, #4]
 800a5f4:	f000 f83e 	bl	800a674 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a5f8:	e023      	b.n	800a642 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a5fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a5fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a602:	2b00      	cmp	r3, #0
 800a604:	d009      	beq.n	800a61a <HAL_UART_IRQHandler+0x4ea>
 800a606:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a60a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d003      	beq.n	800a61a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800a612:	6878      	ldr	r0, [r7, #4]
 800a614:	f000 fa6f 	bl	800aaf6 <UART_Transmit_IT>
    return;
 800a618:	e014      	b.n	800a644 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a61a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a61e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a622:	2b00      	cmp	r3, #0
 800a624:	d00e      	beq.n	800a644 <HAL_UART_IRQHandler+0x514>
 800a626:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a62a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d008      	beq.n	800a644 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800a632:	6878      	ldr	r0, [r7, #4]
 800a634:	f000 faaf 	bl	800ab96 <UART_EndTransmit_IT>
    return;
 800a638:	e004      	b.n	800a644 <HAL_UART_IRQHandler+0x514>
    return;
 800a63a:	bf00      	nop
 800a63c:	e002      	b.n	800a644 <HAL_UART_IRQHandler+0x514>
      return;
 800a63e:	bf00      	nop
 800a640:	e000      	b.n	800a644 <HAL_UART_IRQHandler+0x514>
      return;
 800a642:	bf00      	nop
  }
}
 800a644:	37e8      	adds	r7, #232	; 0xe8
 800a646:	46bd      	mov	sp, r7
 800a648:	bd80      	pop	{r7, pc}
 800a64a:	bf00      	nop

0800a64c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a64c:	b480      	push	{r7}
 800a64e:	b083      	sub	sp, #12
 800a650:	af00      	add	r7, sp, #0
 800a652:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800a654:	bf00      	nop
 800a656:	370c      	adds	r7, #12
 800a658:	46bd      	mov	sp, r7
 800a65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a65e:	4770      	bx	lr

0800a660 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a660:	b480      	push	{r7}
 800a662:	b083      	sub	sp, #12
 800a664:	af00      	add	r7, sp, #0
 800a666:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800a668:	bf00      	nop
 800a66a:	370c      	adds	r7, #12
 800a66c:	46bd      	mov	sp, r7
 800a66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a672:	4770      	bx	lr

0800a674 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a674:	b480      	push	{r7}
 800a676:	b083      	sub	sp, #12
 800a678:	af00      	add	r7, sp, #0
 800a67a:	6078      	str	r0, [r7, #4]
 800a67c:	460b      	mov	r3, r1
 800a67e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a680:	bf00      	nop
 800a682:	370c      	adds	r7, #12
 800a684:	46bd      	mov	sp, r7
 800a686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a68a:	4770      	bx	lr

0800a68c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a68c:	b580      	push	{r7, lr}
 800a68e:	b09c      	sub	sp, #112	; 0x70
 800a690:	af00      	add	r7, sp, #0
 800a692:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a698:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d172      	bne.n	800a78e <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800a6a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a6aa:	2200      	movs	r2, #0
 800a6ac:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a6ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	330c      	adds	r3, #12
 800a6b4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a6b8:	e853 3f00 	ldrex	r3, [r3]
 800a6bc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a6be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a6c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a6c4:	66bb      	str	r3, [r7, #104]	; 0x68
 800a6c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	330c      	adds	r3, #12
 800a6cc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a6ce:	65ba      	str	r2, [r7, #88]	; 0x58
 800a6d0:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6d2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a6d4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a6d6:	e841 2300 	strex	r3, r2, [r1]
 800a6da:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a6dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d1e5      	bne.n	800a6ae <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a6e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	3314      	adds	r3, #20
 800a6e8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6ec:	e853 3f00 	ldrex	r3, [r3]
 800a6f0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a6f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6f4:	f023 0301 	bic.w	r3, r3, #1
 800a6f8:	667b      	str	r3, [r7, #100]	; 0x64
 800a6fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	3314      	adds	r3, #20
 800a700:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a702:	647a      	str	r2, [r7, #68]	; 0x44
 800a704:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a706:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a708:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a70a:	e841 2300 	strex	r3, r2, [r1]
 800a70e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a710:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a712:	2b00      	cmp	r3, #0
 800a714:	d1e5      	bne.n	800a6e2 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a716:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	3314      	adds	r3, #20
 800a71c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a71e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a720:	e853 3f00 	ldrex	r3, [r3]
 800a724:	623b      	str	r3, [r7, #32]
   return(result);
 800a726:	6a3b      	ldr	r3, [r7, #32]
 800a728:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a72c:	663b      	str	r3, [r7, #96]	; 0x60
 800a72e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	3314      	adds	r3, #20
 800a734:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a736:	633a      	str	r2, [r7, #48]	; 0x30
 800a738:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a73a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a73c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a73e:	e841 2300 	strex	r3, r2, [r1]
 800a742:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a746:	2b00      	cmp	r3, #0
 800a748:	d1e5      	bne.n	800a716 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a74a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a74c:	2220      	movs	r2, #32
 800a74e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a752:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a756:	2b01      	cmp	r3, #1
 800a758:	d119      	bne.n	800a78e <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a75a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	330c      	adds	r3, #12
 800a760:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a762:	693b      	ldr	r3, [r7, #16]
 800a764:	e853 3f00 	ldrex	r3, [r3]
 800a768:	60fb      	str	r3, [r7, #12]
   return(result);
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	f023 0310 	bic.w	r3, r3, #16
 800a770:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a772:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	330c      	adds	r3, #12
 800a778:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a77a:	61fa      	str	r2, [r7, #28]
 800a77c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a77e:	69b9      	ldr	r1, [r7, #24]
 800a780:	69fa      	ldr	r2, [r7, #28]
 800a782:	e841 2300 	strex	r3, r2, [r1]
 800a786:	617b      	str	r3, [r7, #20]
   return(result);
 800a788:	697b      	ldr	r3, [r7, #20]
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d1e5      	bne.n	800a75a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a78e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a792:	2b01      	cmp	r3, #1
 800a794:	d106      	bne.n	800a7a4 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a796:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a798:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a79a:	4619      	mov	r1, r3
 800a79c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a79e:	f7ff ff69 	bl	800a674 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a7a2:	e002      	b.n	800a7aa <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800a7a4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a7a6:	f7f7 fe63 	bl	8002470 <HAL_UART_RxCpltCallback>
}
 800a7aa:	bf00      	nop
 800a7ac:	3770      	adds	r7, #112	; 0x70
 800a7ae:	46bd      	mov	sp, r7
 800a7b0:	bd80      	pop	{r7, pc}

0800a7b2 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a7b2:	b580      	push	{r7, lr}
 800a7b4:	b084      	sub	sp, #16
 800a7b6:	af00      	add	r7, sp, #0
 800a7b8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7be:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7c4:	2b01      	cmp	r3, #1
 800a7c6:	d108      	bne.n	800a7da <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a7cc:	085b      	lsrs	r3, r3, #1
 800a7ce:	b29b      	uxth	r3, r3
 800a7d0:	4619      	mov	r1, r3
 800a7d2:	68f8      	ldr	r0, [r7, #12]
 800a7d4:	f7ff ff4e 	bl	800a674 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a7d8:	e002      	b.n	800a7e0 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800a7da:	68f8      	ldr	r0, [r7, #12]
 800a7dc:	f7ff ff36 	bl	800a64c <HAL_UART_RxHalfCpltCallback>
}
 800a7e0:	bf00      	nop
 800a7e2:	3710      	adds	r7, #16
 800a7e4:	46bd      	mov	sp, r7
 800a7e6:	bd80      	pop	{r7, pc}

0800a7e8 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a7e8:	b580      	push	{r7, lr}
 800a7ea:	b084      	sub	sp, #16
 800a7ec:	af00      	add	r7, sp, #0
 800a7ee:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800a7f0:	2300      	movs	r3, #0
 800a7f2:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7f8:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800a7fa:	68bb      	ldr	r3, [r7, #8]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	695b      	ldr	r3, [r3, #20]
 800a800:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a804:	2b80      	cmp	r3, #128	; 0x80
 800a806:	bf0c      	ite	eq
 800a808:	2301      	moveq	r3, #1
 800a80a:	2300      	movne	r3, #0
 800a80c:	b2db      	uxtb	r3, r3
 800a80e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800a810:	68bb      	ldr	r3, [r7, #8]
 800a812:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a816:	b2db      	uxtb	r3, r3
 800a818:	2b21      	cmp	r3, #33	; 0x21
 800a81a:	d108      	bne.n	800a82e <UART_DMAError+0x46>
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d005      	beq.n	800a82e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800a822:	68bb      	ldr	r3, [r7, #8]
 800a824:	2200      	movs	r2, #0
 800a826:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800a828:	68b8      	ldr	r0, [r7, #8]
 800a82a:	f000 f8c5 	bl	800a9b8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a82e:	68bb      	ldr	r3, [r7, #8]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	695b      	ldr	r3, [r3, #20]
 800a834:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a838:	2b40      	cmp	r3, #64	; 0x40
 800a83a:	bf0c      	ite	eq
 800a83c:	2301      	moveq	r3, #1
 800a83e:	2300      	movne	r3, #0
 800a840:	b2db      	uxtb	r3, r3
 800a842:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800a844:	68bb      	ldr	r3, [r7, #8]
 800a846:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a84a:	b2db      	uxtb	r3, r3
 800a84c:	2b22      	cmp	r3, #34	; 0x22
 800a84e:	d108      	bne.n	800a862 <UART_DMAError+0x7a>
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	2b00      	cmp	r3, #0
 800a854:	d005      	beq.n	800a862 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800a856:	68bb      	ldr	r3, [r7, #8]
 800a858:	2200      	movs	r2, #0
 800a85a:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800a85c:	68b8      	ldr	r0, [r7, #8]
 800a85e:	f000 f8d3 	bl	800aa08 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a862:	68bb      	ldr	r3, [r7, #8]
 800a864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a866:	f043 0210 	orr.w	r2, r3, #16
 800a86a:	68bb      	ldr	r3, [r7, #8]
 800a86c:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a86e:	68b8      	ldr	r0, [r7, #8]
 800a870:	f7ff fef6 	bl	800a660 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a874:	bf00      	nop
 800a876:	3710      	adds	r7, #16
 800a878:	46bd      	mov	sp, r7
 800a87a:	bd80      	pop	{r7, pc}

0800a87c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a87c:	b580      	push	{r7, lr}
 800a87e:	b098      	sub	sp, #96	; 0x60
 800a880:	af00      	add	r7, sp, #0
 800a882:	60f8      	str	r0, [r7, #12]
 800a884:	60b9      	str	r1, [r7, #8]
 800a886:	4613      	mov	r3, r2
 800a888:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800a88a:	68ba      	ldr	r2, [r7, #8]
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	88fa      	ldrh	r2, [r7, #6]
 800a894:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	2200      	movs	r2, #0
 800a89a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	2222      	movs	r2, #34	; 0x22
 800a8a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8a8:	4a40      	ldr	r2, [pc, #256]	; (800a9ac <UART_Start_Receive_DMA+0x130>)
 800a8aa:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8b0:	4a3f      	ldr	r2, [pc, #252]	; (800a9b0 <UART_Start_Receive_DMA+0x134>)
 800a8b2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8b8:	4a3e      	ldr	r2, [pc, #248]	; (800a9b4 <UART_Start_Receive_DMA+0x138>)
 800a8ba:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8c0:	2200      	movs	r2, #0
 800a8c2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800a8c4:	f107 0308 	add.w	r3, r7, #8
 800a8c8:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	3304      	adds	r3, #4
 800a8d4:	4619      	mov	r1, r3
 800a8d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a8d8:	681a      	ldr	r2, [r3, #0]
 800a8da:	88fb      	ldrh	r3, [r7, #6]
 800a8dc:	f7fb fa28 	bl	8005d30 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800a8e0:	2300      	movs	r3, #0
 800a8e2:	613b      	str	r3, [r7, #16]
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	613b      	str	r3, [r7, #16]
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	685b      	ldr	r3, [r3, #4]
 800a8f2:	613b      	str	r3, [r7, #16]
 800a8f4:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	2200      	movs	r2, #0
 800a8fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	691b      	ldr	r3, [r3, #16]
 800a902:	2b00      	cmp	r3, #0
 800a904:	d019      	beq.n	800a93a <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	330c      	adds	r3, #12
 800a90c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a90e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a910:	e853 3f00 	ldrex	r3, [r3]
 800a914:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a916:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a918:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a91c:	65bb      	str	r3, [r7, #88]	; 0x58
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	330c      	adds	r3, #12
 800a924:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a926:	64fa      	str	r2, [r7, #76]	; 0x4c
 800a928:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a92a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800a92c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a92e:	e841 2300 	strex	r3, r2, [r1]
 800a932:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800a934:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a936:	2b00      	cmp	r3, #0
 800a938:	d1e5      	bne.n	800a906 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	3314      	adds	r3, #20
 800a940:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a944:	e853 3f00 	ldrex	r3, [r3]
 800a948:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a94a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a94c:	f043 0301 	orr.w	r3, r3, #1
 800a950:	657b      	str	r3, [r7, #84]	; 0x54
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	3314      	adds	r3, #20
 800a958:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a95a:	63ba      	str	r2, [r7, #56]	; 0x38
 800a95c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a95e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a960:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a962:	e841 2300 	strex	r3, r2, [r1]
 800a966:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d1e5      	bne.n	800a93a <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	3314      	adds	r3, #20
 800a974:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a976:	69bb      	ldr	r3, [r7, #24]
 800a978:	e853 3f00 	ldrex	r3, [r3]
 800a97c:	617b      	str	r3, [r7, #20]
   return(result);
 800a97e:	697b      	ldr	r3, [r7, #20]
 800a980:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a984:	653b      	str	r3, [r7, #80]	; 0x50
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	3314      	adds	r3, #20
 800a98c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a98e:	627a      	str	r2, [r7, #36]	; 0x24
 800a990:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a992:	6a39      	ldr	r1, [r7, #32]
 800a994:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a996:	e841 2300 	strex	r3, r2, [r1]
 800a99a:	61fb      	str	r3, [r7, #28]
   return(result);
 800a99c:	69fb      	ldr	r3, [r7, #28]
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d1e5      	bne.n	800a96e <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800a9a2:	2300      	movs	r3, #0
}
 800a9a4:	4618      	mov	r0, r3
 800a9a6:	3760      	adds	r7, #96	; 0x60
 800a9a8:	46bd      	mov	sp, r7
 800a9aa:	bd80      	pop	{r7, pc}
 800a9ac:	0800a68d 	.word	0x0800a68d
 800a9b0:	0800a7b3 	.word	0x0800a7b3
 800a9b4:	0800a7e9 	.word	0x0800a7e9

0800a9b8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a9b8:	b480      	push	{r7}
 800a9ba:	b089      	sub	sp, #36	; 0x24
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	330c      	adds	r3, #12
 800a9c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	e853 3f00 	ldrex	r3, [r3]
 800a9ce:	60bb      	str	r3, [r7, #8]
   return(result);
 800a9d0:	68bb      	ldr	r3, [r7, #8]
 800a9d2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800a9d6:	61fb      	str	r3, [r7, #28]
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	330c      	adds	r3, #12
 800a9de:	69fa      	ldr	r2, [r7, #28]
 800a9e0:	61ba      	str	r2, [r7, #24]
 800a9e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9e4:	6979      	ldr	r1, [r7, #20]
 800a9e6:	69ba      	ldr	r2, [r7, #24]
 800a9e8:	e841 2300 	strex	r3, r2, [r1]
 800a9ec:	613b      	str	r3, [r7, #16]
   return(result);
 800a9ee:	693b      	ldr	r3, [r7, #16]
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d1e5      	bne.n	800a9c0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	2220      	movs	r2, #32
 800a9f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800a9fc:	bf00      	nop
 800a9fe:	3724      	adds	r7, #36	; 0x24
 800aa00:	46bd      	mov	sp, r7
 800aa02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa06:	4770      	bx	lr

0800aa08 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800aa08:	b480      	push	{r7}
 800aa0a:	b095      	sub	sp, #84	; 0x54
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	330c      	adds	r3, #12
 800aa16:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa1a:	e853 3f00 	ldrex	r3, [r3]
 800aa1e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800aa20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa22:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800aa26:	64fb      	str	r3, [r7, #76]	; 0x4c
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	330c      	adds	r3, #12
 800aa2e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800aa30:	643a      	str	r2, [r7, #64]	; 0x40
 800aa32:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa34:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800aa36:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800aa38:	e841 2300 	strex	r3, r2, [r1]
 800aa3c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800aa3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d1e5      	bne.n	800aa10 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	3314      	adds	r3, #20
 800aa4a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa4c:	6a3b      	ldr	r3, [r7, #32]
 800aa4e:	e853 3f00 	ldrex	r3, [r3]
 800aa52:	61fb      	str	r3, [r7, #28]
   return(result);
 800aa54:	69fb      	ldr	r3, [r7, #28]
 800aa56:	f023 0301 	bic.w	r3, r3, #1
 800aa5a:	64bb      	str	r3, [r7, #72]	; 0x48
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	3314      	adds	r3, #20
 800aa62:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800aa64:	62fa      	str	r2, [r7, #44]	; 0x2c
 800aa66:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa68:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800aa6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aa6c:	e841 2300 	strex	r3, r2, [r1]
 800aa70:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800aa72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d1e5      	bne.n	800aa44 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa7c:	2b01      	cmp	r3, #1
 800aa7e:	d119      	bne.n	800aab4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	330c      	adds	r3, #12
 800aa86:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	e853 3f00 	ldrex	r3, [r3]
 800aa8e:	60bb      	str	r3, [r7, #8]
   return(result);
 800aa90:	68bb      	ldr	r3, [r7, #8]
 800aa92:	f023 0310 	bic.w	r3, r3, #16
 800aa96:	647b      	str	r3, [r7, #68]	; 0x44
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	330c      	adds	r3, #12
 800aa9e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800aaa0:	61ba      	str	r2, [r7, #24]
 800aaa2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aaa4:	6979      	ldr	r1, [r7, #20]
 800aaa6:	69ba      	ldr	r2, [r7, #24]
 800aaa8:	e841 2300 	strex	r3, r2, [r1]
 800aaac:	613b      	str	r3, [r7, #16]
   return(result);
 800aaae:	693b      	ldr	r3, [r7, #16]
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d1e5      	bne.n	800aa80 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	2220      	movs	r2, #32
 800aab8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	2200      	movs	r2, #0
 800aac0:	631a      	str	r2, [r3, #48]	; 0x30
}
 800aac2:	bf00      	nop
 800aac4:	3754      	adds	r7, #84	; 0x54
 800aac6:	46bd      	mov	sp, r7
 800aac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aacc:	4770      	bx	lr

0800aace <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800aace:	b580      	push	{r7, lr}
 800aad0:	b084      	sub	sp, #16
 800aad2:	af00      	add	r7, sp, #0
 800aad4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aada:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	2200      	movs	r2, #0
 800aae0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	2200      	movs	r2, #0
 800aae6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800aae8:	68f8      	ldr	r0, [r7, #12]
 800aaea:	f7ff fdb9 	bl	800a660 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800aaee:	bf00      	nop
 800aaf0:	3710      	adds	r7, #16
 800aaf2:	46bd      	mov	sp, r7
 800aaf4:	bd80      	pop	{r7, pc}

0800aaf6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800aaf6:	b480      	push	{r7}
 800aaf8:	b085      	sub	sp, #20
 800aafa:	af00      	add	r7, sp, #0
 800aafc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ab04:	b2db      	uxtb	r3, r3
 800ab06:	2b21      	cmp	r3, #33	; 0x21
 800ab08:	d13e      	bne.n	800ab88 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	689b      	ldr	r3, [r3, #8]
 800ab0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ab12:	d114      	bne.n	800ab3e <UART_Transmit_IT+0x48>
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	691b      	ldr	r3, [r3, #16]
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d110      	bne.n	800ab3e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	6a1b      	ldr	r3, [r3, #32]
 800ab20:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	881b      	ldrh	r3, [r3, #0]
 800ab26:	461a      	mov	r2, r3
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ab30:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	6a1b      	ldr	r3, [r3, #32]
 800ab36:	1c9a      	adds	r2, r3, #2
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	621a      	str	r2, [r3, #32]
 800ab3c:	e008      	b.n	800ab50 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	6a1b      	ldr	r3, [r3, #32]
 800ab42:	1c59      	adds	r1, r3, #1
 800ab44:	687a      	ldr	r2, [r7, #4]
 800ab46:	6211      	str	r1, [r2, #32]
 800ab48:	781a      	ldrb	r2, [r3, #0]
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ab54:	b29b      	uxth	r3, r3
 800ab56:	3b01      	subs	r3, #1
 800ab58:	b29b      	uxth	r3, r3
 800ab5a:	687a      	ldr	r2, [r7, #4]
 800ab5c:	4619      	mov	r1, r3
 800ab5e:	84d1      	strh	r1, [r2, #38]	; 0x26
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d10f      	bne.n	800ab84 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	68da      	ldr	r2, [r3, #12]
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ab72:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	68da      	ldr	r2, [r3, #12]
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ab82:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800ab84:	2300      	movs	r3, #0
 800ab86:	e000      	b.n	800ab8a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800ab88:	2302      	movs	r3, #2
  }
}
 800ab8a:	4618      	mov	r0, r3
 800ab8c:	3714      	adds	r7, #20
 800ab8e:	46bd      	mov	sp, r7
 800ab90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab94:	4770      	bx	lr

0800ab96 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ab96:	b580      	push	{r7, lr}
 800ab98:	b082      	sub	sp, #8
 800ab9a:	af00      	add	r7, sp, #0
 800ab9c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	68da      	ldr	r2, [r3, #12]
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800abac:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	2220      	movs	r2, #32
 800abb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800abb6:	6878      	ldr	r0, [r7, #4]
 800abb8:	f7f7 fc44 	bl	8002444 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800abbc:	2300      	movs	r3, #0
}
 800abbe:	4618      	mov	r0, r3
 800abc0:	3708      	adds	r7, #8
 800abc2:	46bd      	mov	sp, r7
 800abc4:	bd80      	pop	{r7, pc}

0800abc6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800abc6:	b580      	push	{r7, lr}
 800abc8:	b08c      	sub	sp, #48	; 0x30
 800abca:	af00      	add	r7, sp, #0
 800abcc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800abd4:	b2db      	uxtb	r3, r3
 800abd6:	2b22      	cmp	r3, #34	; 0x22
 800abd8:	f040 80ab 	bne.w	800ad32 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	689b      	ldr	r3, [r3, #8]
 800abe0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800abe4:	d117      	bne.n	800ac16 <UART_Receive_IT+0x50>
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	691b      	ldr	r3, [r3, #16]
 800abea:	2b00      	cmp	r3, #0
 800abec:	d113      	bne.n	800ac16 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800abee:	2300      	movs	r3, #0
 800abf0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abf6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	685b      	ldr	r3, [r3, #4]
 800abfe:	b29b      	uxth	r3, r3
 800ac00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac04:	b29a      	uxth	r2, r3
 800ac06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac08:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac0e:	1c9a      	adds	r2, r3, #2
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	629a      	str	r2, [r3, #40]	; 0x28
 800ac14:	e026      	b.n	800ac64 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac1a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800ac1c:	2300      	movs	r3, #0
 800ac1e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	689b      	ldr	r3, [r3, #8]
 800ac24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ac28:	d007      	beq.n	800ac3a <UART_Receive_IT+0x74>
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	689b      	ldr	r3, [r3, #8]
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d10a      	bne.n	800ac48 <UART_Receive_IT+0x82>
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	691b      	ldr	r3, [r3, #16]
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d106      	bne.n	800ac48 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	685b      	ldr	r3, [r3, #4]
 800ac40:	b2da      	uxtb	r2, r3
 800ac42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac44:	701a      	strb	r2, [r3, #0]
 800ac46:	e008      	b.n	800ac5a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	685b      	ldr	r3, [r3, #4]
 800ac4e:	b2db      	uxtb	r3, r3
 800ac50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ac54:	b2da      	uxtb	r2, r3
 800ac56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac58:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac5e:	1c5a      	adds	r2, r3, #1
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ac68:	b29b      	uxth	r3, r3
 800ac6a:	3b01      	subs	r3, #1
 800ac6c:	b29b      	uxth	r3, r3
 800ac6e:	687a      	ldr	r2, [r7, #4]
 800ac70:	4619      	mov	r1, r3
 800ac72:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d15a      	bne.n	800ad2e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	68da      	ldr	r2, [r3, #12]
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	f022 0220 	bic.w	r2, r2, #32
 800ac86:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	68da      	ldr	r2, [r3, #12]
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ac96:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	695a      	ldr	r2, [r3, #20]
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	f022 0201 	bic.w	r2, r2, #1
 800aca6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	2220      	movs	r2, #32
 800acac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acb4:	2b01      	cmp	r3, #1
 800acb6:	d135      	bne.n	800ad24 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	2200      	movs	r2, #0
 800acbc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	330c      	adds	r3, #12
 800acc4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acc6:	697b      	ldr	r3, [r7, #20]
 800acc8:	e853 3f00 	ldrex	r3, [r3]
 800accc:	613b      	str	r3, [r7, #16]
   return(result);
 800acce:	693b      	ldr	r3, [r7, #16]
 800acd0:	f023 0310 	bic.w	r3, r3, #16
 800acd4:	627b      	str	r3, [r7, #36]	; 0x24
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	330c      	adds	r3, #12
 800acdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800acde:	623a      	str	r2, [r7, #32]
 800ace0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ace2:	69f9      	ldr	r1, [r7, #28]
 800ace4:	6a3a      	ldr	r2, [r7, #32]
 800ace6:	e841 2300 	strex	r3, r2, [r1]
 800acea:	61bb      	str	r3, [r7, #24]
   return(result);
 800acec:	69bb      	ldr	r3, [r7, #24]
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d1e5      	bne.n	800acbe <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	f003 0310 	and.w	r3, r3, #16
 800acfc:	2b10      	cmp	r3, #16
 800acfe:	d10a      	bne.n	800ad16 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800ad00:	2300      	movs	r3, #0
 800ad02:	60fb      	str	r3, [r7, #12]
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	60fb      	str	r3, [r7, #12]
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	685b      	ldr	r3, [r3, #4]
 800ad12:	60fb      	str	r3, [r7, #12]
 800ad14:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800ad1a:	4619      	mov	r1, r3
 800ad1c:	6878      	ldr	r0, [r7, #4]
 800ad1e:	f7ff fca9 	bl	800a674 <HAL_UARTEx_RxEventCallback>
 800ad22:	e002      	b.n	800ad2a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800ad24:	6878      	ldr	r0, [r7, #4]
 800ad26:	f7f7 fba3 	bl	8002470 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800ad2a:	2300      	movs	r3, #0
 800ad2c:	e002      	b.n	800ad34 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800ad2e:	2300      	movs	r3, #0
 800ad30:	e000      	b.n	800ad34 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800ad32:	2302      	movs	r3, #2
  }
}
 800ad34:	4618      	mov	r0, r3
 800ad36:	3730      	adds	r7, #48	; 0x30
 800ad38:	46bd      	mov	sp, r7
 800ad3a:	bd80      	pop	{r7, pc}

0800ad3c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ad3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ad40:	b0c0      	sub	sp, #256	; 0x100
 800ad42:	af00      	add	r7, sp, #0
 800ad44:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ad48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	691b      	ldr	r3, [r3, #16]
 800ad50:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800ad54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ad58:	68d9      	ldr	r1, [r3, #12]
 800ad5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ad5e:	681a      	ldr	r2, [r3, #0]
 800ad60:	ea40 0301 	orr.w	r3, r0, r1
 800ad64:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800ad66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ad6a:	689a      	ldr	r2, [r3, #8]
 800ad6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ad70:	691b      	ldr	r3, [r3, #16]
 800ad72:	431a      	orrs	r2, r3
 800ad74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ad78:	695b      	ldr	r3, [r3, #20]
 800ad7a:	431a      	orrs	r2, r3
 800ad7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ad80:	69db      	ldr	r3, [r3, #28]
 800ad82:	4313      	orrs	r3, r2
 800ad84:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800ad88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	68db      	ldr	r3, [r3, #12]
 800ad90:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800ad94:	f021 010c 	bic.w	r1, r1, #12
 800ad98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ad9c:	681a      	ldr	r2, [r3, #0]
 800ad9e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800ada2:	430b      	orrs	r3, r1
 800ada4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800ada6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	695b      	ldr	r3, [r3, #20]
 800adae:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800adb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800adb6:	6999      	ldr	r1, [r3, #24]
 800adb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800adbc:	681a      	ldr	r2, [r3, #0]
 800adbe:	ea40 0301 	orr.w	r3, r0, r1
 800adc2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800adc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800adc8:	681a      	ldr	r2, [r3, #0]
 800adca:	4b8f      	ldr	r3, [pc, #572]	; (800b008 <UART_SetConfig+0x2cc>)
 800adcc:	429a      	cmp	r2, r3
 800adce:	d005      	beq.n	800addc <UART_SetConfig+0xa0>
 800add0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800add4:	681a      	ldr	r2, [r3, #0]
 800add6:	4b8d      	ldr	r3, [pc, #564]	; (800b00c <UART_SetConfig+0x2d0>)
 800add8:	429a      	cmp	r2, r3
 800adda:	d104      	bne.n	800ade6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800addc:	f7fd f928 	bl	8008030 <HAL_RCC_GetPCLK2Freq>
 800ade0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800ade4:	e003      	b.n	800adee <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800ade6:	f7fd f90f 	bl	8008008 <HAL_RCC_GetPCLK1Freq>
 800adea:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800adee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800adf2:	69db      	ldr	r3, [r3, #28]
 800adf4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800adf8:	f040 810c 	bne.w	800b014 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800adfc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ae00:	2200      	movs	r2, #0
 800ae02:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800ae06:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800ae0a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800ae0e:	4622      	mov	r2, r4
 800ae10:	462b      	mov	r3, r5
 800ae12:	1891      	adds	r1, r2, r2
 800ae14:	65b9      	str	r1, [r7, #88]	; 0x58
 800ae16:	415b      	adcs	r3, r3
 800ae18:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ae1a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800ae1e:	4621      	mov	r1, r4
 800ae20:	eb12 0801 	adds.w	r8, r2, r1
 800ae24:	4629      	mov	r1, r5
 800ae26:	eb43 0901 	adc.w	r9, r3, r1
 800ae2a:	f04f 0200 	mov.w	r2, #0
 800ae2e:	f04f 0300 	mov.w	r3, #0
 800ae32:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800ae36:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800ae3a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800ae3e:	4690      	mov	r8, r2
 800ae40:	4699      	mov	r9, r3
 800ae42:	4623      	mov	r3, r4
 800ae44:	eb18 0303 	adds.w	r3, r8, r3
 800ae48:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800ae4c:	462b      	mov	r3, r5
 800ae4e:	eb49 0303 	adc.w	r3, r9, r3
 800ae52:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800ae56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ae5a:	685b      	ldr	r3, [r3, #4]
 800ae5c:	2200      	movs	r2, #0
 800ae5e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800ae62:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800ae66:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800ae6a:	460b      	mov	r3, r1
 800ae6c:	18db      	adds	r3, r3, r3
 800ae6e:	653b      	str	r3, [r7, #80]	; 0x50
 800ae70:	4613      	mov	r3, r2
 800ae72:	eb42 0303 	adc.w	r3, r2, r3
 800ae76:	657b      	str	r3, [r7, #84]	; 0x54
 800ae78:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800ae7c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800ae80:	f7f5 ff02 	bl	8000c88 <__aeabi_uldivmod>
 800ae84:	4602      	mov	r2, r0
 800ae86:	460b      	mov	r3, r1
 800ae88:	4b61      	ldr	r3, [pc, #388]	; (800b010 <UART_SetConfig+0x2d4>)
 800ae8a:	fba3 2302 	umull	r2, r3, r3, r2
 800ae8e:	095b      	lsrs	r3, r3, #5
 800ae90:	011c      	lsls	r4, r3, #4
 800ae92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ae96:	2200      	movs	r2, #0
 800ae98:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ae9c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800aea0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800aea4:	4642      	mov	r2, r8
 800aea6:	464b      	mov	r3, r9
 800aea8:	1891      	adds	r1, r2, r2
 800aeaa:	64b9      	str	r1, [r7, #72]	; 0x48
 800aeac:	415b      	adcs	r3, r3
 800aeae:	64fb      	str	r3, [r7, #76]	; 0x4c
 800aeb0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800aeb4:	4641      	mov	r1, r8
 800aeb6:	eb12 0a01 	adds.w	sl, r2, r1
 800aeba:	4649      	mov	r1, r9
 800aebc:	eb43 0b01 	adc.w	fp, r3, r1
 800aec0:	f04f 0200 	mov.w	r2, #0
 800aec4:	f04f 0300 	mov.w	r3, #0
 800aec8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800aecc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800aed0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800aed4:	4692      	mov	sl, r2
 800aed6:	469b      	mov	fp, r3
 800aed8:	4643      	mov	r3, r8
 800aeda:	eb1a 0303 	adds.w	r3, sl, r3
 800aede:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800aee2:	464b      	mov	r3, r9
 800aee4:	eb4b 0303 	adc.w	r3, fp, r3
 800aee8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800aeec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aef0:	685b      	ldr	r3, [r3, #4]
 800aef2:	2200      	movs	r2, #0
 800aef4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800aef8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800aefc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800af00:	460b      	mov	r3, r1
 800af02:	18db      	adds	r3, r3, r3
 800af04:	643b      	str	r3, [r7, #64]	; 0x40
 800af06:	4613      	mov	r3, r2
 800af08:	eb42 0303 	adc.w	r3, r2, r3
 800af0c:	647b      	str	r3, [r7, #68]	; 0x44
 800af0e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800af12:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800af16:	f7f5 feb7 	bl	8000c88 <__aeabi_uldivmod>
 800af1a:	4602      	mov	r2, r0
 800af1c:	460b      	mov	r3, r1
 800af1e:	4611      	mov	r1, r2
 800af20:	4b3b      	ldr	r3, [pc, #236]	; (800b010 <UART_SetConfig+0x2d4>)
 800af22:	fba3 2301 	umull	r2, r3, r3, r1
 800af26:	095b      	lsrs	r3, r3, #5
 800af28:	2264      	movs	r2, #100	; 0x64
 800af2a:	fb02 f303 	mul.w	r3, r2, r3
 800af2e:	1acb      	subs	r3, r1, r3
 800af30:	00db      	lsls	r3, r3, #3
 800af32:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800af36:	4b36      	ldr	r3, [pc, #216]	; (800b010 <UART_SetConfig+0x2d4>)
 800af38:	fba3 2302 	umull	r2, r3, r3, r2
 800af3c:	095b      	lsrs	r3, r3, #5
 800af3e:	005b      	lsls	r3, r3, #1
 800af40:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800af44:	441c      	add	r4, r3
 800af46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800af4a:	2200      	movs	r2, #0
 800af4c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800af50:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800af54:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800af58:	4642      	mov	r2, r8
 800af5a:	464b      	mov	r3, r9
 800af5c:	1891      	adds	r1, r2, r2
 800af5e:	63b9      	str	r1, [r7, #56]	; 0x38
 800af60:	415b      	adcs	r3, r3
 800af62:	63fb      	str	r3, [r7, #60]	; 0x3c
 800af64:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800af68:	4641      	mov	r1, r8
 800af6a:	1851      	adds	r1, r2, r1
 800af6c:	6339      	str	r1, [r7, #48]	; 0x30
 800af6e:	4649      	mov	r1, r9
 800af70:	414b      	adcs	r3, r1
 800af72:	637b      	str	r3, [r7, #52]	; 0x34
 800af74:	f04f 0200 	mov.w	r2, #0
 800af78:	f04f 0300 	mov.w	r3, #0
 800af7c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800af80:	4659      	mov	r1, fp
 800af82:	00cb      	lsls	r3, r1, #3
 800af84:	4651      	mov	r1, sl
 800af86:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800af8a:	4651      	mov	r1, sl
 800af8c:	00ca      	lsls	r2, r1, #3
 800af8e:	4610      	mov	r0, r2
 800af90:	4619      	mov	r1, r3
 800af92:	4603      	mov	r3, r0
 800af94:	4642      	mov	r2, r8
 800af96:	189b      	adds	r3, r3, r2
 800af98:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800af9c:	464b      	mov	r3, r9
 800af9e:	460a      	mov	r2, r1
 800afa0:	eb42 0303 	adc.w	r3, r2, r3
 800afa4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800afa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800afac:	685b      	ldr	r3, [r3, #4]
 800afae:	2200      	movs	r2, #0
 800afb0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800afb4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800afb8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800afbc:	460b      	mov	r3, r1
 800afbe:	18db      	adds	r3, r3, r3
 800afc0:	62bb      	str	r3, [r7, #40]	; 0x28
 800afc2:	4613      	mov	r3, r2
 800afc4:	eb42 0303 	adc.w	r3, r2, r3
 800afc8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800afca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800afce:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800afd2:	f7f5 fe59 	bl	8000c88 <__aeabi_uldivmod>
 800afd6:	4602      	mov	r2, r0
 800afd8:	460b      	mov	r3, r1
 800afda:	4b0d      	ldr	r3, [pc, #52]	; (800b010 <UART_SetConfig+0x2d4>)
 800afdc:	fba3 1302 	umull	r1, r3, r3, r2
 800afe0:	095b      	lsrs	r3, r3, #5
 800afe2:	2164      	movs	r1, #100	; 0x64
 800afe4:	fb01 f303 	mul.w	r3, r1, r3
 800afe8:	1ad3      	subs	r3, r2, r3
 800afea:	00db      	lsls	r3, r3, #3
 800afec:	3332      	adds	r3, #50	; 0x32
 800afee:	4a08      	ldr	r2, [pc, #32]	; (800b010 <UART_SetConfig+0x2d4>)
 800aff0:	fba2 2303 	umull	r2, r3, r2, r3
 800aff4:	095b      	lsrs	r3, r3, #5
 800aff6:	f003 0207 	and.w	r2, r3, #7
 800affa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	4422      	add	r2, r4
 800b002:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800b004:	e105      	b.n	800b212 <UART_SetConfig+0x4d6>
 800b006:	bf00      	nop
 800b008:	40011000 	.word	0x40011000
 800b00c:	40011400 	.word	0x40011400
 800b010:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b014:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b018:	2200      	movs	r2, #0
 800b01a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b01e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b022:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800b026:	4642      	mov	r2, r8
 800b028:	464b      	mov	r3, r9
 800b02a:	1891      	adds	r1, r2, r2
 800b02c:	6239      	str	r1, [r7, #32]
 800b02e:	415b      	adcs	r3, r3
 800b030:	627b      	str	r3, [r7, #36]	; 0x24
 800b032:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b036:	4641      	mov	r1, r8
 800b038:	1854      	adds	r4, r2, r1
 800b03a:	4649      	mov	r1, r9
 800b03c:	eb43 0501 	adc.w	r5, r3, r1
 800b040:	f04f 0200 	mov.w	r2, #0
 800b044:	f04f 0300 	mov.w	r3, #0
 800b048:	00eb      	lsls	r3, r5, #3
 800b04a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b04e:	00e2      	lsls	r2, r4, #3
 800b050:	4614      	mov	r4, r2
 800b052:	461d      	mov	r5, r3
 800b054:	4643      	mov	r3, r8
 800b056:	18e3      	adds	r3, r4, r3
 800b058:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b05c:	464b      	mov	r3, r9
 800b05e:	eb45 0303 	adc.w	r3, r5, r3
 800b062:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b066:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b06a:	685b      	ldr	r3, [r3, #4]
 800b06c:	2200      	movs	r2, #0
 800b06e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b072:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b076:	f04f 0200 	mov.w	r2, #0
 800b07a:	f04f 0300 	mov.w	r3, #0
 800b07e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800b082:	4629      	mov	r1, r5
 800b084:	008b      	lsls	r3, r1, #2
 800b086:	4621      	mov	r1, r4
 800b088:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b08c:	4621      	mov	r1, r4
 800b08e:	008a      	lsls	r2, r1, #2
 800b090:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800b094:	f7f5 fdf8 	bl	8000c88 <__aeabi_uldivmod>
 800b098:	4602      	mov	r2, r0
 800b09a:	460b      	mov	r3, r1
 800b09c:	4b60      	ldr	r3, [pc, #384]	; (800b220 <UART_SetConfig+0x4e4>)
 800b09e:	fba3 2302 	umull	r2, r3, r3, r2
 800b0a2:	095b      	lsrs	r3, r3, #5
 800b0a4:	011c      	lsls	r4, r3, #4
 800b0a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b0aa:	2200      	movs	r2, #0
 800b0ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b0b0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800b0b4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800b0b8:	4642      	mov	r2, r8
 800b0ba:	464b      	mov	r3, r9
 800b0bc:	1891      	adds	r1, r2, r2
 800b0be:	61b9      	str	r1, [r7, #24]
 800b0c0:	415b      	adcs	r3, r3
 800b0c2:	61fb      	str	r3, [r7, #28]
 800b0c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b0c8:	4641      	mov	r1, r8
 800b0ca:	1851      	adds	r1, r2, r1
 800b0cc:	6139      	str	r1, [r7, #16]
 800b0ce:	4649      	mov	r1, r9
 800b0d0:	414b      	adcs	r3, r1
 800b0d2:	617b      	str	r3, [r7, #20]
 800b0d4:	f04f 0200 	mov.w	r2, #0
 800b0d8:	f04f 0300 	mov.w	r3, #0
 800b0dc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800b0e0:	4659      	mov	r1, fp
 800b0e2:	00cb      	lsls	r3, r1, #3
 800b0e4:	4651      	mov	r1, sl
 800b0e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b0ea:	4651      	mov	r1, sl
 800b0ec:	00ca      	lsls	r2, r1, #3
 800b0ee:	4610      	mov	r0, r2
 800b0f0:	4619      	mov	r1, r3
 800b0f2:	4603      	mov	r3, r0
 800b0f4:	4642      	mov	r2, r8
 800b0f6:	189b      	adds	r3, r3, r2
 800b0f8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b0fc:	464b      	mov	r3, r9
 800b0fe:	460a      	mov	r2, r1
 800b100:	eb42 0303 	adc.w	r3, r2, r3
 800b104:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b108:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b10c:	685b      	ldr	r3, [r3, #4]
 800b10e:	2200      	movs	r2, #0
 800b110:	67bb      	str	r3, [r7, #120]	; 0x78
 800b112:	67fa      	str	r2, [r7, #124]	; 0x7c
 800b114:	f04f 0200 	mov.w	r2, #0
 800b118:	f04f 0300 	mov.w	r3, #0
 800b11c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800b120:	4649      	mov	r1, r9
 800b122:	008b      	lsls	r3, r1, #2
 800b124:	4641      	mov	r1, r8
 800b126:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b12a:	4641      	mov	r1, r8
 800b12c:	008a      	lsls	r2, r1, #2
 800b12e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800b132:	f7f5 fda9 	bl	8000c88 <__aeabi_uldivmod>
 800b136:	4602      	mov	r2, r0
 800b138:	460b      	mov	r3, r1
 800b13a:	4b39      	ldr	r3, [pc, #228]	; (800b220 <UART_SetConfig+0x4e4>)
 800b13c:	fba3 1302 	umull	r1, r3, r3, r2
 800b140:	095b      	lsrs	r3, r3, #5
 800b142:	2164      	movs	r1, #100	; 0x64
 800b144:	fb01 f303 	mul.w	r3, r1, r3
 800b148:	1ad3      	subs	r3, r2, r3
 800b14a:	011b      	lsls	r3, r3, #4
 800b14c:	3332      	adds	r3, #50	; 0x32
 800b14e:	4a34      	ldr	r2, [pc, #208]	; (800b220 <UART_SetConfig+0x4e4>)
 800b150:	fba2 2303 	umull	r2, r3, r2, r3
 800b154:	095b      	lsrs	r3, r3, #5
 800b156:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b15a:	441c      	add	r4, r3
 800b15c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b160:	2200      	movs	r2, #0
 800b162:	673b      	str	r3, [r7, #112]	; 0x70
 800b164:	677a      	str	r2, [r7, #116]	; 0x74
 800b166:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800b16a:	4642      	mov	r2, r8
 800b16c:	464b      	mov	r3, r9
 800b16e:	1891      	adds	r1, r2, r2
 800b170:	60b9      	str	r1, [r7, #8]
 800b172:	415b      	adcs	r3, r3
 800b174:	60fb      	str	r3, [r7, #12]
 800b176:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b17a:	4641      	mov	r1, r8
 800b17c:	1851      	adds	r1, r2, r1
 800b17e:	6039      	str	r1, [r7, #0]
 800b180:	4649      	mov	r1, r9
 800b182:	414b      	adcs	r3, r1
 800b184:	607b      	str	r3, [r7, #4]
 800b186:	f04f 0200 	mov.w	r2, #0
 800b18a:	f04f 0300 	mov.w	r3, #0
 800b18e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800b192:	4659      	mov	r1, fp
 800b194:	00cb      	lsls	r3, r1, #3
 800b196:	4651      	mov	r1, sl
 800b198:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b19c:	4651      	mov	r1, sl
 800b19e:	00ca      	lsls	r2, r1, #3
 800b1a0:	4610      	mov	r0, r2
 800b1a2:	4619      	mov	r1, r3
 800b1a4:	4603      	mov	r3, r0
 800b1a6:	4642      	mov	r2, r8
 800b1a8:	189b      	adds	r3, r3, r2
 800b1aa:	66bb      	str	r3, [r7, #104]	; 0x68
 800b1ac:	464b      	mov	r3, r9
 800b1ae:	460a      	mov	r2, r1
 800b1b0:	eb42 0303 	adc.w	r3, r2, r3
 800b1b4:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b1b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b1ba:	685b      	ldr	r3, [r3, #4]
 800b1bc:	2200      	movs	r2, #0
 800b1be:	663b      	str	r3, [r7, #96]	; 0x60
 800b1c0:	667a      	str	r2, [r7, #100]	; 0x64
 800b1c2:	f04f 0200 	mov.w	r2, #0
 800b1c6:	f04f 0300 	mov.w	r3, #0
 800b1ca:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800b1ce:	4649      	mov	r1, r9
 800b1d0:	008b      	lsls	r3, r1, #2
 800b1d2:	4641      	mov	r1, r8
 800b1d4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b1d8:	4641      	mov	r1, r8
 800b1da:	008a      	lsls	r2, r1, #2
 800b1dc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800b1e0:	f7f5 fd52 	bl	8000c88 <__aeabi_uldivmod>
 800b1e4:	4602      	mov	r2, r0
 800b1e6:	460b      	mov	r3, r1
 800b1e8:	4b0d      	ldr	r3, [pc, #52]	; (800b220 <UART_SetConfig+0x4e4>)
 800b1ea:	fba3 1302 	umull	r1, r3, r3, r2
 800b1ee:	095b      	lsrs	r3, r3, #5
 800b1f0:	2164      	movs	r1, #100	; 0x64
 800b1f2:	fb01 f303 	mul.w	r3, r1, r3
 800b1f6:	1ad3      	subs	r3, r2, r3
 800b1f8:	011b      	lsls	r3, r3, #4
 800b1fa:	3332      	adds	r3, #50	; 0x32
 800b1fc:	4a08      	ldr	r2, [pc, #32]	; (800b220 <UART_SetConfig+0x4e4>)
 800b1fe:	fba2 2303 	umull	r2, r3, r2, r3
 800b202:	095b      	lsrs	r3, r3, #5
 800b204:	f003 020f 	and.w	r2, r3, #15
 800b208:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	4422      	add	r2, r4
 800b210:	609a      	str	r2, [r3, #8]
}
 800b212:	bf00      	nop
 800b214:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800b218:	46bd      	mov	sp, r7
 800b21a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b21e:	bf00      	nop
 800b220:	51eb851f 	.word	0x51eb851f

0800b224 <FusionDegreesToRadians>:
/**
 * @brief Converts degrees to radians.
 * @param degrees Degrees.
 * @return Radians.
 */
static inline float FusionDegreesToRadians(const float degrees) {
 800b224:	b480      	push	{r7}
 800b226:	b083      	sub	sp, #12
 800b228:	af00      	add	r7, sp, #0
 800b22a:	ed87 0a01 	vstr	s0, [r7, #4]
    return degrees * ((float) M_PI / 180.0f);
 800b22e:	edd7 7a01 	vldr	s15, [r7, #4]
 800b232:	ed9f 7a05 	vldr	s14, [pc, #20]	; 800b248 <FusionDegreesToRadians+0x24>
 800b236:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800b23a:	eeb0 0a67 	vmov.f32	s0, s15
 800b23e:	370c      	adds	r7, #12
 800b240:	46bd      	mov	sp, r7
 800b242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b246:	4770      	bx	lr
 800b248:	3c8efa35 	.word	0x3c8efa35

0800b24c <FusionFastInverseSqrt>:
 * @brief Calculates the reciprocal of the square root.
 * See https://pizer.wordpress.com/2008/10/12/fast-inverse-square-root/
 * @param x Operand.
 * @return Reciprocal of the square root of x.
 */
static inline float FusionFastInverseSqrt(const float x) {
 800b24c:	b480      	push	{r7}
 800b24e:	b085      	sub	sp, #20
 800b250:	af00      	add	r7, sp, #0
 800b252:	ed87 0a01 	vstr	s0, [r7, #4]
    typedef union {
        float f;
        int32_t i;
    } Union32;

    Union32 union32 = {.f = x};
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	60fb      	str	r3, [r7, #12]
    union32.i = 0x5F1F1412 - (union32.i >> 1);
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	105a      	asrs	r2, r3, #1
 800b25e:	4b10      	ldr	r3, [pc, #64]	; (800b2a0 <FusionFastInverseSqrt+0x54>)
 800b260:	1a9b      	subs	r3, r3, r2
 800b262:	60fb      	str	r3, [r7, #12]
    return union32.f * (1.69000231f - 0.714158168f * x * union32.f * union32.f);
 800b264:	ed97 7a03 	vldr	s14, [r7, #12]
 800b268:	edd7 7a01 	vldr	s15, [r7, #4]
 800b26c:	eddf 6a0d 	vldr	s13, [pc, #52]	; 800b2a4 <FusionFastInverseSqrt+0x58>
 800b270:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800b274:	edd7 7a03 	vldr	s15, [r7, #12]
 800b278:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800b27c:	edd7 7a03 	vldr	s15, [r7, #12]
 800b280:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b284:	eddf 6a08 	vldr	s13, [pc, #32]	; 800b2a8 <FusionFastInverseSqrt+0x5c>
 800b288:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800b28c:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 800b290:	eeb0 0a67 	vmov.f32	s0, s15
 800b294:	3714      	adds	r7, #20
 800b296:	46bd      	mov	sp, r7
 800b298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b29c:	4770      	bx	lr
 800b29e:	bf00      	nop
 800b2a0:	5f1f1412 	.word	0x5f1f1412
 800b2a4:	3f36d312 	.word	0x3f36d312
 800b2a8:	3fd851ff 	.word	0x3fd851ff

0800b2ac <FusionVectorIsZero>:
/**
 * @brief Returns true if the vector is zero.
 * @param vector Vector.
 * @return True if the vector is zero.
 */
static inline bool FusionVectorIsZero(const FusionVector vector) {
 800b2ac:	b480      	push	{r7}
 800b2ae:	b085      	sub	sp, #20
 800b2b0:	af00      	add	r7, sp, #0
 800b2b2:	eef0 6a40 	vmov.f32	s13, s0
 800b2b6:	eeb0 7a60 	vmov.f32	s14, s1
 800b2ba:	eef0 7a41 	vmov.f32	s15, s2
 800b2be:	edc7 6a01 	vstr	s13, [r7, #4]
 800b2c2:	ed87 7a02 	vstr	s14, [r7, #8]
 800b2c6:	edc7 7a03 	vstr	s15, [r7, #12]
    return (vector.axis.x == 0.0f) && (vector.axis.y == 0.0f) && (vector.axis.z == 0.0f);
 800b2ca:	edd7 7a01 	vldr	s15, [r7, #4]
 800b2ce:	eef5 7a40 	vcmp.f32	s15, #0.0
 800b2d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b2d6:	d10f      	bne.n	800b2f8 <FusionVectorIsZero+0x4c>
 800b2d8:	edd7 7a02 	vldr	s15, [r7, #8]
 800b2dc:	eef5 7a40 	vcmp.f32	s15, #0.0
 800b2e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b2e4:	d108      	bne.n	800b2f8 <FusionVectorIsZero+0x4c>
 800b2e6:	edd7 7a03 	vldr	s15, [r7, #12]
 800b2ea:	eef5 7a40 	vcmp.f32	s15, #0.0
 800b2ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b2f2:	d101      	bne.n	800b2f8 <FusionVectorIsZero+0x4c>
 800b2f4:	2301      	movs	r3, #1
 800b2f6:	e000      	b.n	800b2fa <FusionVectorIsZero+0x4e>
 800b2f8:	2300      	movs	r3, #0
 800b2fa:	f003 0301 	and.w	r3, r3, #1
 800b2fe:	b2db      	uxtb	r3, r3
}
 800b300:	4618      	mov	r0, r3
 800b302:	3714      	adds	r7, #20
 800b304:	46bd      	mov	sp, r7
 800b306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b30a:	4770      	bx	lr

0800b30c <FusionVectorAdd>:
 * @brief Returns the sum of two vectors.
 * @param vectorA Vector A.
 * @param vectorB Vector B.
 * @return Sum of two vectors.
 */
static inline FusionVector FusionVectorAdd(const FusionVector vectorA, const FusionVector vectorB) {
 800b30c:	b480      	push	{r7}
 800b30e:	b091      	sub	sp, #68	; 0x44
 800b310:	af00      	add	r7, sp, #0
 800b312:	eeb0 5a40 	vmov.f32	s10, s0
 800b316:	eef0 5a60 	vmov.f32	s11, s1
 800b31a:	eeb0 6a41 	vmov.f32	s12, s2
 800b31e:	eef0 6a61 	vmov.f32	s13, s3
 800b322:	eeb0 7a42 	vmov.f32	s14, s4
 800b326:	eef0 7a62 	vmov.f32	s15, s5
 800b32a:	ed87 5a07 	vstr	s10, [r7, #28]
 800b32e:	edc7 5a08 	vstr	s11, [r7, #32]
 800b332:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 800b336:	edc7 6a04 	vstr	s13, [r7, #16]
 800b33a:	ed87 7a05 	vstr	s14, [r7, #20]
 800b33e:	edc7 7a06 	vstr	s15, [r7, #24]
    const FusionVector result = {.axis = {
            .x = vectorA.axis.x + vectorB.axis.x,
 800b342:	ed97 7a07 	vldr	s14, [r7, #28]
 800b346:	edd7 7a04 	vldr	s15, [r7, #16]
 800b34a:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800b34e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = vectorA.axis.y + vectorB.axis.y,
 800b352:	ed97 7a08 	vldr	s14, [r7, #32]
 800b356:	edd7 7a05 	vldr	s15, [r7, #20]
 800b35a:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800b35e:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = vectorA.axis.z + vectorB.axis.z,
 800b362:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800b366:	edd7 7a06 	vldr	s15, [r7, #24]
 800b36a:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800b36e:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    }};
    return result;
 800b372:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800b376:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800b37a:	ca07      	ldmia	r2, {r0, r1, r2}
 800b37c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800b380:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b382:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b384:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b386:	ee06 1a90 	vmov	s13, r1
 800b38a:	ee07 2a10 	vmov	s14, r2
 800b38e:	ee07 3a90 	vmov	s15, r3
}
 800b392:	eeb0 0a66 	vmov.f32	s0, s13
 800b396:	eef0 0a47 	vmov.f32	s1, s14
 800b39a:	eeb0 1a67 	vmov.f32	s2, s15
 800b39e:	3744      	adds	r7, #68	; 0x44
 800b3a0:	46bd      	mov	sp, r7
 800b3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a6:	4770      	bx	lr

0800b3a8 <FusionVectorSum>:
/**
 * @brief Returns the sum of the elements.
 * @param vector Vector.
 * @return Sum of the elements.
 */
static inline float FusionVectorSum(const FusionVector vector) {
 800b3a8:	b480      	push	{r7}
 800b3aa:	b085      	sub	sp, #20
 800b3ac:	af00      	add	r7, sp, #0
 800b3ae:	eef0 6a40 	vmov.f32	s13, s0
 800b3b2:	eeb0 7a60 	vmov.f32	s14, s1
 800b3b6:	eef0 7a41 	vmov.f32	s15, s2
 800b3ba:	edc7 6a01 	vstr	s13, [r7, #4]
 800b3be:	ed87 7a02 	vstr	s14, [r7, #8]
 800b3c2:	edc7 7a03 	vstr	s15, [r7, #12]
    return vector.axis.x + vector.axis.y + vector.axis.z;
 800b3c6:	ed97 7a01 	vldr	s14, [r7, #4]
 800b3ca:	edd7 7a02 	vldr	s15, [r7, #8]
 800b3ce:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b3d2:	edd7 7a03 	vldr	s15, [r7, #12]
 800b3d6:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 800b3da:	eeb0 0a67 	vmov.f32	s0, s15
 800b3de:	3714      	adds	r7, #20
 800b3e0:	46bd      	mov	sp, r7
 800b3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e6:	4770      	bx	lr

0800b3e8 <FusionVectorMultiplyScalar>:
 * @brief Returns the multiplication of a vector by a scalar.
 * @param vector Vector.
 * @param scalar Scalar.
 * @return Multiplication of a vector by a scalar.
 */
static inline FusionVector FusionVectorMultiplyScalar(const FusionVector vector, const float scalar) {
 800b3e8:	b480      	push	{r7}
 800b3ea:	b08f      	sub	sp, #60	; 0x3c
 800b3ec:	af00      	add	r7, sp, #0
 800b3ee:	eef0 6a40 	vmov.f32	s13, s0
 800b3f2:	eeb0 7a60 	vmov.f32	s14, s1
 800b3f6:	eef0 7a41 	vmov.f32	s15, s2
 800b3fa:	edc7 1a04 	vstr	s3, [r7, #16]
 800b3fe:	edc7 6a05 	vstr	s13, [r7, #20]
 800b402:	ed87 7a06 	vstr	s14, [r7, #24]
 800b406:	edc7 7a07 	vstr	s15, [r7, #28]
    const FusionVector result = {.axis = {
            .x = vector.axis.x * scalar,
 800b40a:	ed97 7a05 	vldr	s14, [r7, #20]
 800b40e:	edd7 7a04 	vldr	s15, [r7, #16]
 800b412:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800b416:	edc7 7a08 	vstr	s15, [r7, #32]
            .y = vector.axis.y * scalar,
 800b41a:	ed97 7a06 	vldr	s14, [r7, #24]
 800b41e:	edd7 7a04 	vldr	s15, [r7, #16]
 800b422:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800b426:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            .z = vector.axis.z * scalar,
 800b42a:	ed97 7a07 	vldr	s14, [r7, #28]
 800b42e:	edd7 7a04 	vldr	s15, [r7, #16]
 800b432:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800b436:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    }};
    return result;
 800b43a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b43e:	f107 0220 	add.w	r2, r7, #32
 800b442:	ca07      	ldmia	r2, {r0, r1, r2}
 800b444:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800b448:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b44a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b44c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b44e:	ee06 1a90 	vmov	s13, r1
 800b452:	ee07 2a10 	vmov	s14, r2
 800b456:	ee07 3a90 	vmov	s15, r3
}
 800b45a:	eeb0 0a66 	vmov.f32	s0, s13
 800b45e:	eef0 0a47 	vmov.f32	s1, s14
 800b462:	eeb0 1a67 	vmov.f32	s2, s15
 800b466:	373c      	adds	r7, #60	; 0x3c
 800b468:	46bd      	mov	sp, r7
 800b46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b46e:	4770      	bx	lr

0800b470 <FusionVectorHadamardProduct>:
 * @brief Calculates the Hadamard product (element-wise multiplication).
 * @param vectorA Vector A.
 * @param vectorB Vector B.
 * @return Hadamard product.
 */
static inline FusionVector FusionVectorHadamardProduct(const FusionVector vectorA, const FusionVector vectorB) {
 800b470:	b480      	push	{r7}
 800b472:	b091      	sub	sp, #68	; 0x44
 800b474:	af00      	add	r7, sp, #0
 800b476:	eeb0 5a40 	vmov.f32	s10, s0
 800b47a:	eef0 5a60 	vmov.f32	s11, s1
 800b47e:	eeb0 6a41 	vmov.f32	s12, s2
 800b482:	eef0 6a61 	vmov.f32	s13, s3
 800b486:	eeb0 7a42 	vmov.f32	s14, s4
 800b48a:	eef0 7a62 	vmov.f32	s15, s5
 800b48e:	ed87 5a07 	vstr	s10, [r7, #28]
 800b492:	edc7 5a08 	vstr	s11, [r7, #32]
 800b496:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 800b49a:	edc7 6a04 	vstr	s13, [r7, #16]
 800b49e:	ed87 7a05 	vstr	s14, [r7, #20]
 800b4a2:	edc7 7a06 	vstr	s15, [r7, #24]
    const FusionVector result = {.axis = {
            .x = vectorA.axis.x * vectorB.axis.x,
 800b4a6:	ed97 7a07 	vldr	s14, [r7, #28]
 800b4aa:	edd7 7a04 	vldr	s15, [r7, #16]
 800b4ae:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800b4b2:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = vectorA.axis.y * vectorB.axis.y,
 800b4b6:	ed97 7a08 	vldr	s14, [r7, #32]
 800b4ba:	edd7 7a05 	vldr	s15, [r7, #20]
 800b4be:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800b4c2:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = vectorA.axis.z * vectorB.axis.z,
 800b4c6:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800b4ca:	edd7 7a06 	vldr	s15, [r7, #24]
 800b4ce:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800b4d2:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    }};
    return result;
 800b4d6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800b4da:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800b4de:	ca07      	ldmia	r2, {r0, r1, r2}
 800b4e0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800b4e4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b4e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b4e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b4ea:	ee06 1a90 	vmov	s13, r1
 800b4ee:	ee07 2a10 	vmov	s14, r2
 800b4f2:	ee07 3a90 	vmov	s15, r3
}
 800b4f6:	eeb0 0a66 	vmov.f32	s0, s13
 800b4fa:	eef0 0a47 	vmov.f32	s1, s14
 800b4fe:	eeb0 1a67 	vmov.f32	s2, s15
 800b502:	3744      	adds	r7, #68	; 0x44
 800b504:	46bd      	mov	sp, r7
 800b506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b50a:	4770      	bx	lr

0800b50c <FusionVectorCrossProduct>:
 * @brief Returns the cross product.
 * @param vectorA Vector A.
 * @param vectorB Vector B.
 * @return Cross product.
 */
static inline FusionVector FusionVectorCrossProduct(const FusionVector vectorA, const FusionVector vectorB) {
 800b50c:	b480      	push	{r7}
 800b50e:	b091      	sub	sp, #68	; 0x44
 800b510:	af00      	add	r7, sp, #0
 800b512:	eeb0 5a40 	vmov.f32	s10, s0
 800b516:	eef0 5a60 	vmov.f32	s11, s1
 800b51a:	eeb0 6a41 	vmov.f32	s12, s2
 800b51e:	eef0 6a61 	vmov.f32	s13, s3
 800b522:	eeb0 7a42 	vmov.f32	s14, s4
 800b526:	eef0 7a62 	vmov.f32	s15, s5
 800b52a:	ed87 5a07 	vstr	s10, [r7, #28]
 800b52e:	edc7 5a08 	vstr	s11, [r7, #32]
 800b532:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 800b536:	edc7 6a04 	vstr	s13, [r7, #16]
 800b53a:	ed87 7a05 	vstr	s14, [r7, #20]
 800b53e:	edc7 7a06 	vstr	s15, [r7, #24]
#define A vectorA.axis
#define B vectorB.axis
    const FusionVector result = {.axis = {
            .x = A.y * B.z - A.z * B.y,
 800b542:	ed97 7a08 	vldr	s14, [r7, #32]
 800b546:	edd7 7a06 	vldr	s15, [r7, #24]
 800b54a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b54e:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800b552:	edd7 7a05 	vldr	s15, [r7, #20]
 800b556:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b55a:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800b55e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = A.z * B.x - A.x * B.z,
 800b562:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800b566:	edd7 7a04 	vldr	s15, [r7, #16]
 800b56a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b56e:	edd7 6a07 	vldr	s13, [r7, #28]
 800b572:	edd7 7a06 	vldr	s15, [r7, #24]
 800b576:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b57a:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800b57e:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = A.x * B.y - A.y * B.x,
 800b582:	ed97 7a07 	vldr	s14, [r7, #28]
 800b586:	edd7 7a05 	vldr	s15, [r7, #20]
 800b58a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b58e:	edd7 6a08 	vldr	s13, [r7, #32]
 800b592:	edd7 7a04 	vldr	s15, [r7, #16]
 800b596:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b59a:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800b59e:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    }};
    return result;
 800b5a2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800b5a6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800b5aa:	ca07      	ldmia	r2, {r0, r1, r2}
 800b5ac:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800b5b0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b5b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b5b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b5b6:	ee06 1a90 	vmov	s13, r1
 800b5ba:	ee07 2a10 	vmov	s14, r2
 800b5be:	ee07 3a90 	vmov	s15, r3
#undef A
#undef B
}
 800b5c2:	eeb0 0a66 	vmov.f32	s0, s13
 800b5c6:	eef0 0a47 	vmov.f32	s1, s14
 800b5ca:	eeb0 1a67 	vmov.f32	s2, s15
 800b5ce:	3744      	adds	r7, #68	; 0x44
 800b5d0:	46bd      	mov	sp, r7
 800b5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5d6:	4770      	bx	lr

0800b5d8 <FusionVectorDotProduct>:
 * @brief Returns the dot product.
 * @param vectorA Vector A.
 * @param vectorB Vector B.
 * @return Dot product.
 */
static inline float FusionVectorDotProduct(const FusionVector vectorA, const FusionVector vectorB) {
 800b5d8:	b580      	push	{r7, lr}
 800b5da:	b08a      	sub	sp, #40	; 0x28
 800b5dc:	af00      	add	r7, sp, #0
 800b5de:	eeb0 5a40 	vmov.f32	s10, s0
 800b5e2:	eef0 5a60 	vmov.f32	s11, s1
 800b5e6:	eeb0 6a41 	vmov.f32	s12, s2
 800b5ea:	eef0 6a61 	vmov.f32	s13, s3
 800b5ee:	eeb0 7a42 	vmov.f32	s14, s4
 800b5f2:	eef0 7a62 	vmov.f32	s15, s5
 800b5f6:	ed87 5a03 	vstr	s10, [r7, #12]
 800b5fa:	edc7 5a04 	vstr	s11, [r7, #16]
 800b5fe:	ed87 6a05 	vstr	s12, [r7, #20]
 800b602:	edc7 6a00 	vstr	s13, [r7]
 800b606:	ed87 7a01 	vstr	s14, [r7, #4]
 800b60a:	edc7 7a02 	vstr	s15, [r7, #8]
    return FusionVectorSum(FusionVectorHadamardProduct(vectorA, vectorB));
 800b60e:	ed97 5a00 	vldr	s10, [r7]
 800b612:	edd7 5a01 	vldr	s11, [r7, #4]
 800b616:	ed97 6a02 	vldr	s12, [r7, #8]
 800b61a:	edd7 6a03 	vldr	s13, [r7, #12]
 800b61e:	ed97 7a04 	vldr	s14, [r7, #16]
 800b622:	edd7 7a05 	vldr	s15, [r7, #20]
 800b626:	eef0 1a45 	vmov.f32	s3, s10
 800b62a:	eeb0 2a65 	vmov.f32	s4, s11
 800b62e:	eef0 2a46 	vmov.f32	s5, s12
 800b632:	eeb0 0a66 	vmov.f32	s0, s13
 800b636:	eef0 0a47 	vmov.f32	s1, s14
 800b63a:	eeb0 1a67 	vmov.f32	s2, s15
 800b63e:	f7ff ff17 	bl	800b470 <FusionVectorHadamardProduct>
 800b642:	eef0 6a40 	vmov.f32	s13, s0
 800b646:	eeb0 7a60 	vmov.f32	s14, s1
 800b64a:	eef0 7a41 	vmov.f32	s15, s2
 800b64e:	edc7 6a07 	vstr	s13, [r7, #28]
 800b652:	ed87 7a08 	vstr	s14, [r7, #32]
 800b656:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 800b65a:	edd7 6a07 	vldr	s13, [r7, #28]
 800b65e:	ed97 7a08 	vldr	s14, [r7, #32]
 800b662:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800b666:	eeb0 0a66 	vmov.f32	s0, s13
 800b66a:	eef0 0a47 	vmov.f32	s1, s14
 800b66e:	eeb0 1a67 	vmov.f32	s2, s15
 800b672:	f7ff fe99 	bl	800b3a8 <FusionVectorSum>
 800b676:	eef0 7a40 	vmov.f32	s15, s0
}
 800b67a:	eeb0 0a67 	vmov.f32	s0, s15
 800b67e:	3728      	adds	r7, #40	; 0x28
 800b680:	46bd      	mov	sp, r7
 800b682:	bd80      	pop	{r7, pc}

0800b684 <FusionVectorMagnitudeSquared>:
/**
 * @brief Returns the vector magnitude squared.
 * @param vector Vector.
 * @return Vector magnitude squared.
 */
static inline float FusionVectorMagnitudeSquared(const FusionVector vector) {
 800b684:	b580      	push	{r7, lr}
 800b686:	b088      	sub	sp, #32
 800b688:	af00      	add	r7, sp, #0
 800b68a:	eef0 6a40 	vmov.f32	s13, s0
 800b68e:	eeb0 7a60 	vmov.f32	s14, s1
 800b692:	eef0 7a41 	vmov.f32	s15, s2
 800b696:	edc7 6a01 	vstr	s13, [r7, #4]
 800b69a:	ed87 7a02 	vstr	s14, [r7, #8]
 800b69e:	edc7 7a03 	vstr	s15, [r7, #12]
    return FusionVectorSum(FusionVectorHadamardProduct(vector, vector));
 800b6a2:	ed97 5a01 	vldr	s10, [r7, #4]
 800b6a6:	edd7 5a02 	vldr	s11, [r7, #8]
 800b6aa:	ed97 6a03 	vldr	s12, [r7, #12]
 800b6ae:	edd7 6a01 	vldr	s13, [r7, #4]
 800b6b2:	ed97 7a02 	vldr	s14, [r7, #8]
 800b6b6:	edd7 7a03 	vldr	s15, [r7, #12]
 800b6ba:	eef0 1a45 	vmov.f32	s3, s10
 800b6be:	eeb0 2a65 	vmov.f32	s4, s11
 800b6c2:	eef0 2a46 	vmov.f32	s5, s12
 800b6c6:	eeb0 0a66 	vmov.f32	s0, s13
 800b6ca:	eef0 0a47 	vmov.f32	s1, s14
 800b6ce:	eeb0 1a67 	vmov.f32	s2, s15
 800b6d2:	f7ff fecd 	bl	800b470 <FusionVectorHadamardProduct>
 800b6d6:	eef0 6a40 	vmov.f32	s13, s0
 800b6da:	eeb0 7a60 	vmov.f32	s14, s1
 800b6de:	eef0 7a41 	vmov.f32	s15, s2
 800b6e2:	edc7 6a05 	vstr	s13, [r7, #20]
 800b6e6:	ed87 7a06 	vstr	s14, [r7, #24]
 800b6ea:	edc7 7a07 	vstr	s15, [r7, #28]
 800b6ee:	edd7 6a05 	vldr	s13, [r7, #20]
 800b6f2:	ed97 7a06 	vldr	s14, [r7, #24]
 800b6f6:	edd7 7a07 	vldr	s15, [r7, #28]
 800b6fa:	eeb0 0a66 	vmov.f32	s0, s13
 800b6fe:	eef0 0a47 	vmov.f32	s1, s14
 800b702:	eeb0 1a67 	vmov.f32	s2, s15
 800b706:	f7ff fe4f 	bl	800b3a8 <FusionVectorSum>
 800b70a:	eef0 7a40 	vmov.f32	s15, s0
}
 800b70e:	eeb0 0a67 	vmov.f32	s0, s15
 800b712:	3720      	adds	r7, #32
 800b714:	46bd      	mov	sp, r7
 800b716:	bd80      	pop	{r7, pc}

0800b718 <FusionVectorNormalise>:
/**
 * @brief Returns the normalised vector.
 * @param vector Vector.
 * @return Normalised vector.
 */
static inline FusionVector FusionVectorNormalise(const FusionVector vector) {
 800b718:	b580      	push	{r7, lr}
 800b71a:	b08c      	sub	sp, #48	; 0x30
 800b71c:	af00      	add	r7, sp, #0
 800b71e:	eef0 6a40 	vmov.f32	s13, s0
 800b722:	eeb0 7a60 	vmov.f32	s14, s1
 800b726:	eef0 7a41 	vmov.f32	s15, s2
 800b72a:	edc7 6a05 	vstr	s13, [r7, #20]
 800b72e:	ed87 7a06 	vstr	s14, [r7, #24]
 800b732:	edc7 7a07 	vstr	s15, [r7, #28]
#ifdef FUSION_USE_NORMAL_SQRT
    const float magnitudeReciprocal = 1.0f / sqrtf(FusionVectorMagnitudeSquared(vector));
#else
    const float magnitudeReciprocal = FusionFastInverseSqrt(FusionVectorMagnitudeSquared(vector));
 800b736:	edd7 6a05 	vldr	s13, [r7, #20]
 800b73a:	ed97 7a06 	vldr	s14, [r7, #24]
 800b73e:	edd7 7a07 	vldr	s15, [r7, #28]
 800b742:	eeb0 0a66 	vmov.f32	s0, s13
 800b746:	eef0 0a47 	vmov.f32	s1, s14
 800b74a:	eeb0 1a67 	vmov.f32	s2, s15
 800b74e:	f7ff ff99 	bl	800b684 <FusionVectorMagnitudeSquared>
 800b752:	eef0 7a40 	vmov.f32	s15, s0
 800b756:	eeb0 0a67 	vmov.f32	s0, s15
 800b75a:	f7ff fd77 	bl	800b24c <FusionFastInverseSqrt>
 800b75e:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
#endif
    return FusionVectorMultiplyScalar(vector, magnitudeReciprocal);
 800b762:	edd7 6a05 	vldr	s13, [r7, #20]
 800b766:	ed97 7a06 	vldr	s14, [r7, #24]
 800b76a:	edd7 7a07 	vldr	s15, [r7, #28]
 800b76e:	edd7 1a0b 	vldr	s3, [r7, #44]	; 0x2c
 800b772:	eeb0 0a66 	vmov.f32	s0, s13
 800b776:	eef0 0a47 	vmov.f32	s1, s14
 800b77a:	eeb0 1a67 	vmov.f32	s2, s15
 800b77e:	f7ff fe33 	bl	800b3e8 <FusionVectorMultiplyScalar>
 800b782:	eef0 6a40 	vmov.f32	s13, s0
 800b786:	eeb0 7a60 	vmov.f32	s14, s1
 800b78a:	eef0 7a41 	vmov.f32	s15, s2
 800b78e:	edc7 6a08 	vstr	s13, [r7, #32]
 800b792:	ed87 7a09 	vstr	s14, [r7, #36]	; 0x24
 800b796:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 800b79a:	6a39      	ldr	r1, [r7, #32]
 800b79c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b79e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7a0:	ee06 1a90 	vmov	s13, r1
 800b7a4:	ee07 2a10 	vmov	s14, r2
 800b7a8:	ee07 3a90 	vmov	s15, r3
}
 800b7ac:	eeb0 0a66 	vmov.f32	s0, s13
 800b7b0:	eef0 0a47 	vmov.f32	s1, s14
 800b7b4:	eeb0 1a67 	vmov.f32	s2, s15
 800b7b8:	3730      	adds	r7, #48	; 0x30
 800b7ba:	46bd      	mov	sp, r7
 800b7bc:	bd80      	pop	{r7, pc}

0800b7be <FusionQuaternionAdd>:
 * @brief Returns the sum of two quaternions.
 * @param quaternionA Quaternion A.
 * @param quaternionB Quaternion B.
 * @return Sum of two quaternions.
 */
static inline FusionQuaternion FusionQuaternionAdd(const FusionQuaternion quaternionA, const FusionQuaternion quaternionB) {
 800b7be:	b490      	push	{r4, r7}
 800b7c0:	b094      	sub	sp, #80	; 0x50
 800b7c2:	af00      	add	r7, sp, #0
 800b7c4:	eeb0 4a40 	vmov.f32	s8, s0
 800b7c8:	eef0 4a60 	vmov.f32	s9, s1
 800b7cc:	eeb0 5a41 	vmov.f32	s10, s2
 800b7d0:	eef0 5a61 	vmov.f32	s11, s3
 800b7d4:	eeb0 6a42 	vmov.f32	s12, s4
 800b7d8:	eef0 6a62 	vmov.f32	s13, s5
 800b7dc:	eeb0 7a43 	vmov.f32	s14, s6
 800b7e0:	eef0 7a63 	vmov.f32	s15, s7
 800b7e4:	ed87 4a08 	vstr	s8, [r7, #32]
 800b7e8:	edc7 4a09 	vstr	s9, [r7, #36]	; 0x24
 800b7ec:	ed87 5a0a 	vstr	s10, [r7, #40]	; 0x28
 800b7f0:	edc7 5a0b 	vstr	s11, [r7, #44]	; 0x2c
 800b7f4:	ed87 6a04 	vstr	s12, [r7, #16]
 800b7f8:	edc7 6a05 	vstr	s13, [r7, #20]
 800b7fc:	ed87 7a06 	vstr	s14, [r7, #24]
 800b800:	edc7 7a07 	vstr	s15, [r7, #28]
    const FusionQuaternion result = {.element = {
            .w = quaternionA.element.w + quaternionB.element.w,
 800b804:	ed97 7a08 	vldr	s14, [r7, #32]
 800b808:	edd7 7a04 	vldr	s15, [r7, #16]
 800b80c:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 800b810:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
            .x = quaternionA.element.x + quaternionB.element.x,
 800b814:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800b818:	edd7 7a05 	vldr	s15, [r7, #20]
 800b81c:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 800b820:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
            .y = quaternionA.element.y + quaternionB.element.y,
 800b824:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b828:	edd7 7a06 	vldr	s15, [r7, #24]
 800b82c:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 800b830:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
            .z = quaternionA.element.z + quaternionB.element.z,
 800b834:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800b838:	edd7 7a07 	vldr	s15, [r7, #28]
 800b83c:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 800b840:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    }};
    return result;
 800b844:	f107 0440 	add.w	r4, r7, #64	; 0x40
 800b848:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b84c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b84e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800b852:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800b854:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b856:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b858:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b85a:	ee06 0a10 	vmov	s12, r0
 800b85e:	ee06 1a90 	vmov	s13, r1
 800b862:	ee07 2a10 	vmov	s14, r2
 800b866:	ee07 3a90 	vmov	s15, r3
}
 800b86a:	eeb0 0a46 	vmov.f32	s0, s12
 800b86e:	eef0 0a66 	vmov.f32	s1, s13
 800b872:	eeb0 1a47 	vmov.f32	s2, s14
 800b876:	eef0 1a67 	vmov.f32	s3, s15
 800b87a:	3750      	adds	r7, #80	; 0x50
 800b87c:	46bd      	mov	sp, r7
 800b87e:	bc90      	pop	{r4, r7}
 800b880:	4770      	bx	lr

0800b882 <FusionQuaternionMultiply>:
 * @brief Returns the multiplication of two quaternions.
 * @param quaternionA Quaternion A (to be post-multiplied).
 * @param quaternionB Quaternion B (to be pre-multiplied).
 * @return Multiplication of two quaternions.
 */
static inline FusionQuaternion FusionQuaternionMultiply(const FusionQuaternion quaternionA, const FusionQuaternion quaternionB) {
 800b882:	b490      	push	{r4, r7}
 800b884:	b094      	sub	sp, #80	; 0x50
 800b886:	af00      	add	r7, sp, #0
 800b888:	eeb0 4a40 	vmov.f32	s8, s0
 800b88c:	eef0 4a60 	vmov.f32	s9, s1
 800b890:	eeb0 5a41 	vmov.f32	s10, s2
 800b894:	eef0 5a61 	vmov.f32	s11, s3
 800b898:	eeb0 6a42 	vmov.f32	s12, s4
 800b89c:	eef0 6a62 	vmov.f32	s13, s5
 800b8a0:	eeb0 7a43 	vmov.f32	s14, s6
 800b8a4:	eef0 7a63 	vmov.f32	s15, s7
 800b8a8:	ed87 4a08 	vstr	s8, [r7, #32]
 800b8ac:	edc7 4a09 	vstr	s9, [r7, #36]	; 0x24
 800b8b0:	ed87 5a0a 	vstr	s10, [r7, #40]	; 0x28
 800b8b4:	edc7 5a0b 	vstr	s11, [r7, #44]	; 0x2c
 800b8b8:	ed87 6a04 	vstr	s12, [r7, #16]
 800b8bc:	edc7 6a05 	vstr	s13, [r7, #20]
 800b8c0:	ed87 7a06 	vstr	s14, [r7, #24]
 800b8c4:	edc7 7a07 	vstr	s15, [r7, #28]
#define A quaternionA.element
#define B quaternionB.element
    const FusionQuaternion result = {.element = {
            .w = A.w * B.w - A.x * B.x - A.y * B.y - A.z * B.z,
 800b8c8:	ed97 7a08 	vldr	s14, [r7, #32]
 800b8cc:	edd7 7a04 	vldr	s15, [r7, #16]
 800b8d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b8d4:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800b8d8:	edd7 7a05 	vldr	s15, [r7, #20]
 800b8dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b8e0:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b8e4:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800b8e8:	edd7 7a06 	vldr	s15, [r7, #24]
 800b8ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b8f0:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b8f4:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800b8f8:	edd7 7a07 	vldr	s15, [r7, #28]
 800b8fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b900:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 800b904:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
            .x = A.w * B.x + A.x * B.w + A.y * B.z - A.z * B.y,
 800b908:	ed97 7a08 	vldr	s14, [r7, #32]
 800b90c:	edd7 7a05 	vldr	s15, [r7, #20]
 800b910:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b914:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800b918:	edd7 7a04 	vldr	s15, [r7, #16]
 800b91c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b920:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b924:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800b928:	edd7 7a07 	vldr	s15, [r7, #28]
 800b92c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b930:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b934:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800b938:	edd7 7a06 	vldr	s15, [r7, #24]
 800b93c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b940:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 800b944:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
            .y = A.w * B.y - A.x * B.z + A.y * B.w + A.z * B.x,
 800b948:	ed97 7a08 	vldr	s14, [r7, #32]
 800b94c:	edd7 7a06 	vldr	s15, [r7, #24]
 800b950:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b954:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800b958:	edd7 7a07 	vldr	s15, [r7, #28]
 800b95c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b960:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b964:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800b968:	edd7 7a04 	vldr	s15, [r7, #16]
 800b96c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b970:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b974:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800b978:	edd7 7a05 	vldr	s15, [r7, #20]
 800b97c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b980:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 800b984:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
            .z = A.w * B.z + A.x * B.y - A.y * B.x + A.z * B.w,
 800b988:	ed97 7a08 	vldr	s14, [r7, #32]
 800b98c:	edd7 7a07 	vldr	s15, [r7, #28]
 800b990:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b994:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800b998:	edd7 7a06 	vldr	s15, [r7, #24]
 800b99c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b9a0:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b9a4:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800b9a8:	edd7 7a05 	vldr	s15, [r7, #20]
 800b9ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b9b0:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b9b4:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800b9b8:	edd7 7a04 	vldr	s15, [r7, #16]
 800b9bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b9c0:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 800b9c4:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    }};
    return result;
 800b9c8:	f107 0440 	add.w	r4, r7, #64	; 0x40
 800b9cc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b9d0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b9d2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800b9d6:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800b9d8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b9da:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b9dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b9de:	ee06 0a10 	vmov	s12, r0
 800b9e2:	ee06 1a90 	vmov	s13, r1
 800b9e6:	ee07 2a10 	vmov	s14, r2
 800b9ea:	ee07 3a90 	vmov	s15, r3
#undef A
#undef B
}
 800b9ee:	eeb0 0a46 	vmov.f32	s0, s12
 800b9f2:	eef0 0a66 	vmov.f32	s1, s13
 800b9f6:	eeb0 1a47 	vmov.f32	s2, s14
 800b9fa:	eef0 1a67 	vmov.f32	s3, s15
 800b9fe:	3750      	adds	r7, #80	; 0x50
 800ba00:	46bd      	mov	sp, r7
 800ba02:	bc90      	pop	{r4, r7}
 800ba04:	4770      	bx	lr

0800ba06 <FusionQuaternionMultiplyVector>:
 * multiplied by the vector.
 * @param quaternion Quaternion.
 * @param vector Vector.
 * @return Multiplication of a quaternion with a vector.
 */
static inline FusionQuaternion FusionQuaternionMultiplyVector(const FusionQuaternion quaternion, const FusionVector vector) {
 800ba06:	b490      	push	{r4, r7}
 800ba08:	b094      	sub	sp, #80	; 0x50
 800ba0a:	af00      	add	r7, sp, #0
 800ba0c:	eef0 4a40 	vmov.f32	s9, s0
 800ba10:	eeb0 5a60 	vmov.f32	s10, s1
 800ba14:	eef0 5a41 	vmov.f32	s11, s2
 800ba18:	eeb0 6a61 	vmov.f32	s12, s3
 800ba1c:	eef0 6a42 	vmov.f32	s13, s4
 800ba20:	eeb0 7a62 	vmov.f32	s14, s5
 800ba24:	eef0 7a43 	vmov.f32	s15, s6
 800ba28:	edc7 4a08 	vstr	s9, [r7, #32]
 800ba2c:	ed87 5a09 	vstr	s10, [r7, #36]	; 0x24
 800ba30:	edc7 5a0a 	vstr	s11, [r7, #40]	; 0x28
 800ba34:	ed87 6a0b 	vstr	s12, [r7, #44]	; 0x2c
 800ba38:	edc7 6a05 	vstr	s13, [r7, #20]
 800ba3c:	ed87 7a06 	vstr	s14, [r7, #24]
 800ba40:	edc7 7a07 	vstr	s15, [r7, #28]
#define Q quaternion.element
#define V vector.axis
    const FusionQuaternion result = {.element = {
            .w = -Q.x * V.x - Q.y * V.y - Q.z * V.z,
 800ba44:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800ba48:	eeb1 7a67 	vneg.f32	s14, s15
 800ba4c:	edd7 7a05 	vldr	s15, [r7, #20]
 800ba50:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ba54:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800ba58:	edd7 7a06 	vldr	s15, [r7, #24]
 800ba5c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ba60:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ba64:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800ba68:	edd7 7a07 	vldr	s15, [r7, #28]
 800ba6c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ba70:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 800ba74:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
            .x = Q.w * V.x + Q.y * V.z - Q.z * V.y,
 800ba78:	ed97 7a08 	vldr	s14, [r7, #32]
 800ba7c:	edd7 7a05 	vldr	s15, [r7, #20]
 800ba80:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ba84:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800ba88:	edd7 7a07 	vldr	s15, [r7, #28]
 800ba8c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ba90:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ba94:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800ba98:	edd7 7a06 	vldr	s15, [r7, #24]
 800ba9c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800baa0:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 800baa4:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
            .y = Q.w * V.y - Q.x * V.z + Q.z * V.x,
 800baa8:	ed97 7a08 	vldr	s14, [r7, #32]
 800baac:	edd7 7a06 	vldr	s15, [r7, #24]
 800bab0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bab4:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800bab8:	edd7 7a07 	vldr	s15, [r7, #28]
 800babc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800bac0:	ee37 7a67 	vsub.f32	s14, s14, s15
 800bac4:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800bac8:	edd7 7a05 	vldr	s15, [r7, #20]
 800bacc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800bad0:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 800bad4:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
            .z = Q.w * V.z + Q.x * V.y - Q.y * V.x,
 800bad8:	ed97 7a08 	vldr	s14, [r7, #32]
 800badc:	edd7 7a07 	vldr	s15, [r7, #28]
 800bae0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bae4:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800bae8:	edd7 7a06 	vldr	s15, [r7, #24]
 800baec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800baf0:	ee37 7a27 	vadd.f32	s14, s14, s15
 800baf4:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800baf8:	edd7 7a05 	vldr	s15, [r7, #20]
 800bafc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800bb00:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 800bb04:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    }};
    return result;
 800bb08:	f107 0440 	add.w	r4, r7, #64	; 0x40
 800bb0c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800bb10:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800bb12:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800bb16:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800bb18:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bb1a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bb1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb1e:	ee06 0a10 	vmov	s12, r0
 800bb22:	ee06 1a90 	vmov	s13, r1
 800bb26:	ee07 2a10 	vmov	s14, r2
 800bb2a:	ee07 3a90 	vmov	s15, r3
#undef Q
#undef V
}
 800bb2e:	eeb0 0a46 	vmov.f32	s0, s12
 800bb32:	eef0 0a66 	vmov.f32	s1, s13
 800bb36:	eeb0 1a47 	vmov.f32	s2, s14
 800bb3a:	eef0 1a67 	vmov.f32	s3, s15
 800bb3e:	3750      	adds	r7, #80	; 0x50
 800bb40:	46bd      	mov	sp, r7
 800bb42:	bc90      	pop	{r4, r7}
 800bb44:	4770      	bx	lr

0800bb46 <FusionQuaternionNormalise>:
/**
 * @brief Returns the normalised quaternion.
 * @param quaternion Quaternion.
 * @return Normalised quaternion.
 */
static inline FusionQuaternion FusionQuaternionNormalise(const FusionQuaternion quaternion) {
 800bb46:	b590      	push	{r4, r7, lr}
 800bb48:	b093      	sub	sp, #76	; 0x4c
 800bb4a:	af00      	add	r7, sp, #0
 800bb4c:	eeb0 6a40 	vmov.f32	s12, s0
 800bb50:	eef0 6a60 	vmov.f32	s13, s1
 800bb54:	eeb0 7a41 	vmov.f32	s14, s2
 800bb58:	eef0 7a61 	vmov.f32	s15, s3
 800bb5c:	ed87 6a04 	vstr	s12, [r7, #16]
 800bb60:	edc7 6a05 	vstr	s13, [r7, #20]
 800bb64:	ed87 7a06 	vstr	s14, [r7, #24]
 800bb68:	edc7 7a07 	vstr	s15, [r7, #28]
#define Q quaternion.element
#ifdef FUSION_USE_NORMAL_SQRT
    const float magnitudeReciprocal = 1.0f / sqrtf(Q.w * Q.w + Q.x * Q.x + Q.y * Q.y + Q.z * Q.z);
#else
    const float magnitudeReciprocal = FusionFastInverseSqrt(Q.w * Q.w + Q.x * Q.x + Q.y * Q.y + Q.z * Q.z);
 800bb6c:	ed97 7a04 	vldr	s14, [r7, #16]
 800bb70:	edd7 7a04 	vldr	s15, [r7, #16]
 800bb74:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bb78:	edd7 6a05 	vldr	s13, [r7, #20]
 800bb7c:	edd7 7a05 	vldr	s15, [r7, #20]
 800bb80:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800bb84:	ee37 7a27 	vadd.f32	s14, s14, s15
 800bb88:	edd7 6a06 	vldr	s13, [r7, #24]
 800bb8c:	edd7 7a06 	vldr	s15, [r7, #24]
 800bb90:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800bb94:	ee37 7a27 	vadd.f32	s14, s14, s15
 800bb98:	edd7 6a07 	vldr	s13, [r7, #28]
 800bb9c:	edd7 7a07 	vldr	s15, [r7, #28]
 800bba0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800bba4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bba8:	eeb0 0a67 	vmov.f32	s0, s15
 800bbac:	f7ff fb4e 	bl	800b24c <FusionFastInverseSqrt>
 800bbb0:	ed87 0a11 	vstr	s0, [r7, #68]	; 0x44
#endif
    const FusionQuaternion result = {.element = {
            .w = Q.w * magnitudeReciprocal,
 800bbb4:	ed97 7a04 	vldr	s14, [r7, #16]
 800bbb8:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800bbbc:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 800bbc0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            .x = Q.x * magnitudeReciprocal,
 800bbc4:	ed97 7a05 	vldr	s14, [r7, #20]
 800bbc8:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800bbcc:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 800bbd0:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = Q.y * magnitudeReciprocal,
 800bbd4:	ed97 7a06 	vldr	s14, [r7, #24]
 800bbd8:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800bbdc:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 800bbe0:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = Q.z * magnitudeReciprocal,
 800bbe4:	ed97 7a07 	vldr	s14, [r7, #28]
 800bbe8:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800bbec:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 800bbf0:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    }};
    return result;
 800bbf4:	f107 0434 	add.w	r4, r7, #52	; 0x34
 800bbf8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bbfc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800bbfe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800bc02:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800bc04:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800bc06:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800bc08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bc0a:	ee06 0a10 	vmov	s12, r0
 800bc0e:	ee06 1a90 	vmov	s13, r1
 800bc12:	ee07 2a10 	vmov	s14, r2
 800bc16:	ee07 3a90 	vmov	s15, r3
#undef Q
}
 800bc1a:	eeb0 0a46 	vmov.f32	s0, s12
 800bc1e:	eef0 0a66 	vmov.f32	s1, s13
 800bc22:	eeb0 1a47 	vmov.f32	s2, s14
 800bc26:	eef0 1a67 	vmov.f32	s3, s15
 800bc2a:	374c      	adds	r7, #76	; 0x4c
 800bc2c:	46bd      	mov	sp, r7
 800bc2e:	bd90      	pop	{r4, r7, pc}

0800bc30 <FusionAhrsInitialise>:

/**
 * @brief Initialises the AHRS algorithm structure.
 * @param ahrs AHRS algorithm structure.
 */
void FusionAhrsInitialise(FusionAhrs *const ahrs) {
 800bc30:	b5b0      	push	{r4, r5, r7, lr}
 800bc32:	b088      	sub	sp, #32
 800bc34:	af00      	add	r7, sp, #0
 800bc36:	6078      	str	r0, [r7, #4]
    const FusionAhrsSettings settings = {
 800bc38:	4b0b      	ldr	r3, [pc, #44]	; (800bc68 <FusionAhrsInitialise+0x38>)
 800bc3a:	f107 0408 	add.w	r4, r7, #8
 800bc3e:	461d      	mov	r5, r3
 800bc40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bc42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bc44:	e895 0003 	ldmia.w	r5, {r0, r1}
 800bc48:	e884 0003 	stmia.w	r4, {r0, r1}
            .gyroscopeRange = 0.0f,
            .accelerationRejection = 90.0f,
            .magneticRejection = 90.0f,
            .recoveryTriggerPeriod = 0,
    };
    FusionAhrsSetSettings(ahrs, &settings);
 800bc4c:	f107 0308 	add.w	r3, r7, #8
 800bc50:	4619      	mov	r1, r3
 800bc52:	6878      	ldr	r0, [r7, #4]
 800bc54:	f000 f86e 	bl	800bd34 <FusionAhrsSetSettings>
    FusionAhrsReset(ahrs);
 800bc58:	6878      	ldr	r0, [r7, #4]
 800bc5a:	f000 f807 	bl	800bc6c <FusionAhrsReset>
}
 800bc5e:	bf00      	nop
 800bc60:	3720      	adds	r7, #32
 800bc62:	46bd      	mov	sp, r7
 800bc64:	bdb0      	pop	{r4, r5, r7, pc}
 800bc66:	bf00      	nop
 800bc68:	080143ec 	.word	0x080143ec

0800bc6c <FusionAhrsReset>:
/**
 * @brief Resets the AHRS algorithm.  This is equivalent to reinitialising the
 * algorithm while maintaining the current settings.
 * @param ahrs AHRS algorithm structure.
 */
void FusionAhrsReset(FusionAhrs *const ahrs) {
 800bc6c:	b480      	push	{r7}
 800bc6e:	b091      	sub	sp, #68	; 0x44
 800bc70:	af00      	add	r7, sp, #0
 800bc72:	6078      	str	r0, [r7, #4]
    ahrs->quaternion = FUSION_IDENTITY_QUATERNION;
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800bc7a:	619a      	str	r2, [r3, #24]
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	f04f 0200 	mov.w	r2, #0
 800bc82:	61da      	str	r2, [r3, #28]
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	f04f 0200 	mov.w	r2, #0
 800bc8a:	621a      	str	r2, [r3, #32]
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	f04f 0200 	mov.w	r2, #0
 800bc92:	625a      	str	r2, [r3, #36]	; 0x24
    ahrs->accelerometer = FUSION_VECTOR_ZERO;
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	f04f 0200 	mov.w	r2, #0
 800bc9a:	629a      	str	r2, [r3, #40]	; 0x28
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	f04f 0200 	mov.w	r2, #0
 800bca2:	62da      	str	r2, [r3, #44]	; 0x2c
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	f04f 0200 	mov.w	r2, #0
 800bcaa:	631a      	str	r2, [r3, #48]	; 0x30
    ahrs->initialising = true;
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	2201      	movs	r2, #1
 800bcb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    ahrs->rampedGain = INITIAL_GAIN;
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	4a1e      	ldr	r2, [pc, #120]	; (800bd30 <FusionAhrsReset+0xc4>)
 800bcb8:	639a      	str	r2, [r3, #56]	; 0x38
    ahrs->angularRateRecovery = false;
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	2200      	movs	r2, #0
 800bcbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    ahrs->halfAccelerometerFeedback = FUSION_VECTOR_ZERO;
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	f04f 0200 	mov.w	r2, #0
 800bcc8:	645a      	str	r2, [r3, #68]	; 0x44
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	f04f 0200 	mov.w	r2, #0
 800bcd0:	649a      	str	r2, [r3, #72]	; 0x48
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	f04f 0200 	mov.w	r2, #0
 800bcd8:	64da      	str	r2, [r3, #76]	; 0x4c
    ahrs->halfMagnetometerFeedback = FUSION_VECTOR_ZERO;
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	f04f 0200 	mov.w	r2, #0
 800bce0:	651a      	str	r2, [r3, #80]	; 0x50
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	f04f 0200 	mov.w	r2, #0
 800bce8:	655a      	str	r2, [r3, #84]	; 0x54
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	f04f 0200 	mov.w	r2, #0
 800bcf0:	659a      	str	r2, [r3, #88]	; 0x58
    ahrs->accelerometerIgnored = false;
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	2200      	movs	r2, #0
 800bcf6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
    ahrs->accelerationRecoveryTrigger = 0;
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	2200      	movs	r2, #0
 800bcfe:	661a      	str	r2, [r3, #96]	; 0x60
    ahrs->accelerationRecoveryTimeout = ahrs->settings.recoveryTriggerPeriod;
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	695b      	ldr	r3, [r3, #20]
 800bd04:	461a      	mov	r2, r3
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	665a      	str	r2, [r3, #100]	; 0x64
    ahrs->magnetometerIgnored = false;
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	2200      	movs	r2, #0
 800bd0e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    ahrs->magneticRecoveryTrigger = 0;
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	2200      	movs	r2, #0
 800bd16:	66da      	str	r2, [r3, #108]	; 0x6c
    ahrs->magneticRecoveryTimeout = ahrs->settings.recoveryTriggerPeriod;
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	695b      	ldr	r3, [r3, #20]
 800bd1c:	461a      	mov	r2, r3
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	671a      	str	r2, [r3, #112]	; 0x70
}
 800bd22:	bf00      	nop
 800bd24:	3744      	adds	r7, #68	; 0x44
 800bd26:	46bd      	mov	sp, r7
 800bd28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd2c:	4770      	bx	lr
 800bd2e:	bf00      	nop
 800bd30:	41200000 	.word	0x41200000

0800bd34 <FusionAhrsSetSettings>:
/**
 * @brief Sets the AHRS algorithm settings.
 * @param ahrs AHRS algorithm structure.
 * @param settings Settings.
 */
void FusionAhrsSetSettings(FusionAhrs *const ahrs, const FusionAhrsSettings *const settings) {
 800bd34:	b580      	push	{r7, lr}
 800bd36:	b082      	sub	sp, #8
 800bd38:	af00      	add	r7, sp, #0
 800bd3a:	6078      	str	r0, [r7, #4]
 800bd3c:	6039      	str	r1, [r7, #0]
    ahrs->settings.convention = settings->convention;
 800bd3e:	683b      	ldr	r3, [r7, #0]
 800bd40:	781a      	ldrb	r2, [r3, #0]
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	701a      	strb	r2, [r3, #0]
    ahrs->settings.gain = settings->gain;
 800bd46:	683b      	ldr	r3, [r7, #0]
 800bd48:	685a      	ldr	r2, [r3, #4]
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	605a      	str	r2, [r3, #4]
    ahrs->settings.gyroscopeRange = settings->gyroscopeRange == 0.0f ? FLT_MAX : 0.98f * settings->gyroscopeRange;
 800bd4e:	683b      	ldr	r3, [r7, #0]
 800bd50:	edd3 7a02 	vldr	s15, [r3, #8]
 800bd54:	eef5 7a40 	vcmp.f32	s15, #0.0
 800bd58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd5c:	d007      	beq.n	800bd6e <FusionAhrsSetSettings+0x3a>
 800bd5e:	683b      	ldr	r3, [r7, #0]
 800bd60:	edd3 7a02 	vldr	s15, [r3, #8]
 800bd64:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 800be98 <FusionAhrsSetSettings+0x164>
 800bd68:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bd6c:	e001      	b.n	800bd72 <FusionAhrsSetSettings+0x3e>
 800bd6e:	eddf 7a4b 	vldr	s15, [pc, #300]	; 800be9c <FusionAhrsSetSettings+0x168>
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	edc3 7a02 	vstr	s15, [r3, #8]
    ahrs->settings.accelerationRejection = settings->accelerationRejection == 0.0f ? FLT_MAX : powf(0.5f * sinf(FusionDegreesToRadians(settings->accelerationRejection)), 2);
 800bd78:	683b      	ldr	r3, [r7, #0]
 800bd7a:	edd3 7a03 	vldr	s15, [r3, #12]
 800bd7e:	eef5 7a40 	vcmp.f32	s15, #0.0
 800bd82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd86:	d01b      	beq.n	800bdc0 <FusionAhrsSetSettings+0x8c>
 800bd88:	683b      	ldr	r3, [r7, #0]
 800bd8a:	edd3 7a03 	vldr	s15, [r3, #12]
 800bd8e:	eeb0 0a67 	vmov.f32	s0, s15
 800bd92:	f7ff fa47 	bl	800b224 <FusionDegreesToRadians>
 800bd96:	eef0 7a40 	vmov.f32	s15, s0
 800bd9a:	eeb0 0a67 	vmov.f32	s0, s15
 800bd9e:	f005 ffdd 	bl	8011d5c <sinf>
 800bda2:	eef0 7a40 	vmov.f32	s15, s0
 800bda6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800bdaa:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bdae:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 800bdb2:	eeb0 0a67 	vmov.f32	s0, s15
 800bdb6:	f006 f8b5 	bl	8011f24 <powf>
 800bdba:	eef0 7a40 	vmov.f32	s15, s0
 800bdbe:	e001      	b.n	800bdc4 <FusionAhrsSetSettings+0x90>
 800bdc0:	eddf 7a36 	vldr	s15, [pc, #216]	; 800be9c <FusionAhrsSetSettings+0x168>
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	edc3 7a03 	vstr	s15, [r3, #12]
    ahrs->settings.magneticRejection = settings->magneticRejection == 0.0f ? FLT_MAX : powf(0.5f * sinf(FusionDegreesToRadians(settings->magneticRejection)), 2);
 800bdca:	683b      	ldr	r3, [r7, #0]
 800bdcc:	edd3 7a04 	vldr	s15, [r3, #16]
 800bdd0:	eef5 7a40 	vcmp.f32	s15, #0.0
 800bdd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bdd8:	d01b      	beq.n	800be12 <FusionAhrsSetSettings+0xde>
 800bdda:	683b      	ldr	r3, [r7, #0]
 800bddc:	edd3 7a04 	vldr	s15, [r3, #16]
 800bde0:	eeb0 0a67 	vmov.f32	s0, s15
 800bde4:	f7ff fa1e 	bl	800b224 <FusionDegreesToRadians>
 800bde8:	eef0 7a40 	vmov.f32	s15, s0
 800bdec:	eeb0 0a67 	vmov.f32	s0, s15
 800bdf0:	f005 ffb4 	bl	8011d5c <sinf>
 800bdf4:	eef0 7a40 	vmov.f32	s15, s0
 800bdf8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800bdfc:	ee67 7a87 	vmul.f32	s15, s15, s14
 800be00:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 800be04:	eeb0 0a67 	vmov.f32	s0, s15
 800be08:	f006 f88c 	bl	8011f24 <powf>
 800be0c:	eef0 7a40 	vmov.f32	s15, s0
 800be10:	e001      	b.n	800be16 <FusionAhrsSetSettings+0xe2>
 800be12:	eddf 7a22 	vldr	s15, [pc, #136]	; 800be9c <FusionAhrsSetSettings+0x168>
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	edc3 7a04 	vstr	s15, [r3, #16]
    ahrs->settings.recoveryTriggerPeriod = settings->recoveryTriggerPeriod;
 800be1c:	683b      	ldr	r3, [r7, #0]
 800be1e:	695a      	ldr	r2, [r3, #20]
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	615a      	str	r2, [r3, #20]
    ahrs->accelerationRecoveryTimeout = ahrs->settings.recoveryTriggerPeriod;
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	695b      	ldr	r3, [r3, #20]
 800be28:	461a      	mov	r2, r3
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	665a      	str	r2, [r3, #100]	; 0x64
    ahrs->magneticRecoveryTimeout = ahrs->settings.recoveryTriggerPeriod;
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	695b      	ldr	r3, [r3, #20]
 800be32:	461a      	mov	r2, r3
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	671a      	str	r2, [r3, #112]	; 0x70
    if ((settings->gain == 0.0f) || (settings->recoveryTriggerPeriod == 0)) { // disable acceleration and magnetic rejection features if gain is zero
 800be38:	683b      	ldr	r3, [r7, #0]
 800be3a:	edd3 7a01 	vldr	s15, [r3, #4]
 800be3e:	eef5 7a40 	vcmp.f32	s15, #0.0
 800be42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be46:	d003      	beq.n	800be50 <FusionAhrsSetSettings+0x11c>
 800be48:	683b      	ldr	r3, [r7, #0]
 800be4a:	695b      	ldr	r3, [r3, #20]
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d105      	bne.n	800be5c <FusionAhrsSetSettings+0x128>
        ahrs->settings.accelerationRejection = FLT_MAX;
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	4a13      	ldr	r2, [pc, #76]	; (800bea0 <FusionAhrsSetSettings+0x16c>)
 800be54:	60da      	str	r2, [r3, #12]
        ahrs->settings.magneticRejection = FLT_MAX;
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	4a11      	ldr	r2, [pc, #68]	; (800bea0 <FusionAhrsSetSettings+0x16c>)
 800be5a:	611a      	str	r2, [r3, #16]
    }
    if (ahrs->initialising == false) {
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800be62:	f083 0301 	eor.w	r3, r3, #1
 800be66:	b2db      	uxtb	r3, r3
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d003      	beq.n	800be74 <FusionAhrsSetSettings+0x140>
        ahrs->rampedGain = ahrs->settings.gain;
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	685a      	ldr	r2, [r3, #4]
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	639a      	str	r2, [r3, #56]	; 0x38
    }
    ahrs->rampedGainStep = (INITIAL_GAIN - ahrs->settings.gain) / INITIALISATION_PERIOD;
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	edd3 7a01 	vldr	s15, [r3, #4]
 800be7a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800be7e:	ee37 7a67 	vsub.f32	s14, s14, s15
 800be82:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 800be86:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
}
 800be90:	bf00      	nop
 800be92:	3708      	adds	r7, #8
 800be94:	46bd      	mov	sp, r7
 800be96:	bd80      	pop	{r7, pc}
 800be98:	3f7ae148 	.word	0x3f7ae148
 800be9c:	7f7fffff 	.word	0x7f7fffff
 800bea0:	7f7fffff 	.word	0x7f7fffff

0800bea4 <FusionAhrsUpdate>:
 * @param gyroscope Gyroscope measurement in degrees per second.
 * @param accelerometer Accelerometer measurement in g.
 * @param magnetometer Magnetometer measurement in arbitrary units.
 * @param deltaTime Delta time in seconds.
 */
void FusionAhrsUpdate(FusionAhrs *const ahrs, const FusionVector gyroscope, const FusionVector accelerometer, const FusionVector magnetometer, const float deltaTime) {
 800bea4:	b590      	push	{r4, r7, lr}
 800bea6:	b0bf      	sub	sp, #252	; 0xfc
 800bea8:	af00      	add	r7, sp, #0
 800beaa:	62f8      	str	r0, [r7, #44]	; 0x2c
 800beac:	eeb0 5a61 	vmov.f32	s10, s3
 800beb0:	eef0 5a42 	vmov.f32	s11, s4
 800beb4:	eeb0 6a62 	vmov.f32	s12, s5
 800beb8:	eef0 6a43 	vmov.f32	s13, s6
 800bebc:	eeb0 7a63 	vmov.f32	s14, s7
 800bec0:	eef0 7a44 	vmov.f32	s15, s8
 800bec4:	edc7 4a01 	vstr	s9, [r7, #4]
 800bec8:	ed87 0a08 	vstr	s0, [r7, #32]
 800becc:	edc7 0a09 	vstr	s1, [r7, #36]	; 0x24
 800bed0:	ed87 1a0a 	vstr	s2, [r7, #40]	; 0x28
 800bed4:	ed87 5a05 	vstr	s10, [r7, #20]
 800bed8:	edc7 5a06 	vstr	s11, [r7, #24]
 800bedc:	ed87 6a07 	vstr	s12, [r7, #28]
 800bee0:	edc7 6a02 	vstr	s13, [r7, #8]
 800bee4:	ed87 7a03 	vstr	s14, [r7, #12]
 800bee8:	edc7 7a04 	vstr	s15, [r7, #16]
#define Q ahrs->quaternion.element

    // Store accelerometer
    ahrs->accelerometer = accelerometer;
 800beec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800beee:	3328      	adds	r3, #40	; 0x28
 800bef0:	f107 0214 	add.w	r2, r7, #20
 800bef4:	ca07      	ldmia	r2, {r0, r1, r2}
 800bef6:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    // Reinitialise if gyroscope range exceeded
    if ((fabs(gyroscope.axis.x) > ahrs->settings.gyroscopeRange) || (fabs(gyroscope.axis.y) > ahrs->settings.gyroscopeRange) || (fabs(gyroscope.axis.z) > ahrs->settings.gyroscopeRange)) {
 800befa:	edd7 7a08 	vldr	s15, [r7, #32]
 800befe:	eeb0 7ae7 	vabs.f32	s14, s15
 800bf02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf04:	edd3 7a02 	vldr	s15, [r3, #8]
 800bf08:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800bf0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf10:	dc17      	bgt.n	800bf42 <FusionAhrsUpdate+0x9e>
 800bf12:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800bf16:	eeb0 7ae7 	vabs.f32	s14, s15
 800bf1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf1c:	edd3 7a02 	vldr	s15, [r3, #8]
 800bf20:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800bf24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf28:	dc0b      	bgt.n	800bf42 <FusionAhrsUpdate+0x9e>
 800bf2a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bf2e:	eeb0 7ae7 	vabs.f32	s14, s15
 800bf32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf34:	edd3 7a02 	vldr	s15, [r3, #8]
 800bf38:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800bf3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf40:	dd15      	ble.n	800bf6e <FusionAhrsUpdate+0xca>
        const FusionQuaternion quaternion = ahrs->quaternion;
 800bf42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf44:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 800bf48:	3318      	adds	r3, #24
 800bf4a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800bf4c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        FusionAhrsReset(ahrs);
 800bf50:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bf52:	f7ff fe8b 	bl	800bc6c <FusionAhrsReset>
        ahrs->quaternion = quaternion;
 800bf56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf58:	f103 0418 	add.w	r4, r3, #24
 800bf5c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800bf60:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800bf62:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        ahrs->angularRateRecovery = true;
 800bf66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf68:	2201      	movs	r2, #1
 800bf6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    }

    // Ramp down gain during initialisation
    if (ahrs->initialising == true) {
 800bf6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf70:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d02d      	beq.n	800bfd4 <FusionAhrsUpdate+0x130>
        ahrs->rampedGain -= ahrs->rampedGainStep * deltaTime;
 800bf78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf7a:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 800bf7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf80:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 800bf84:	edd7 7a01 	vldr	s15, [r7, #4]
 800bf88:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800bf8c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bf90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf92:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
        if ((ahrs->rampedGain < ahrs->settings.gain) || (ahrs->settings.gain == 0.0f)) {
 800bf96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf98:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 800bf9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf9e:	edd3 7a01 	vldr	s15, [r3, #4]
 800bfa2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800bfa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bfaa:	d407      	bmi.n	800bfbc <FusionAhrsUpdate+0x118>
 800bfac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfae:	edd3 7a01 	vldr	s15, [r3, #4]
 800bfb2:	eef5 7a40 	vcmp.f32	s15, #0.0
 800bfb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bfba:	d10b      	bne.n	800bfd4 <FusionAhrsUpdate+0x130>
            ahrs->rampedGain = ahrs->settings.gain;
 800bfbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfbe:	685a      	ldr	r2, [r3, #4]
 800bfc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfc2:	639a      	str	r2, [r3, #56]	; 0x38
            ahrs->initialising = false;
 800bfc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfc6:	2200      	movs	r2, #0
 800bfc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
            ahrs->angularRateRecovery = false;
 800bfcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfce:	2200      	movs	r2, #0
 800bfd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        }
    }

    // Calculate direction of gravity indicated by algorithm
    const FusionVector halfGravity = HalfGravity(ahrs);
 800bfd4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bfd6:	f000 faf4 	bl	800c5c2 <HalfGravity>
 800bfda:	eef0 6a40 	vmov.f32	s13, s0
 800bfde:	eeb0 7a60 	vmov.f32	s14, s1
 800bfe2:	eef0 7a41 	vmov.f32	s15, s2
 800bfe6:	edc7 6a25 	vstr	s13, [r7, #148]	; 0x94
 800bfea:	ed87 7a26 	vstr	s14, [r7, #152]	; 0x98
 800bfee:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c

    // Calculate accelerometer feedback
    FusionVector halfAccelerometerFeedback = FUSION_VECTOR_ZERO;
 800bff2:	f04f 0300 	mov.w	r3, #0
 800bff6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800bffa:	f04f 0300 	mov.w	r3, #0
 800bffe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800c002:	f04f 0300 	mov.w	r3, #0
 800c006:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    ahrs->accelerometerIgnored = true;
 800c00a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c00c:	2201      	movs	r2, #1
 800c00e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
    if (FusionVectorIsZero(accelerometer) == false) {
 800c012:	edd7 6a05 	vldr	s13, [r7, #20]
 800c016:	ed97 7a06 	vldr	s14, [r7, #24]
 800c01a:	edd7 7a07 	vldr	s15, [r7, #28]
 800c01e:	eeb0 0a66 	vmov.f32	s0, s13
 800c022:	eef0 0a47 	vmov.f32	s1, s14
 800c026:	eeb0 1a67 	vmov.f32	s2, s15
 800c02a:	f7ff f93f 	bl	800b2ac <FusionVectorIsZero>
 800c02e:	4603      	mov	r3, r0
 800c030:	f083 0301 	eor.w	r3, r3, #1
 800c034:	b2db      	uxtb	r3, r3
 800c036:	2b00      	cmp	r3, #0
 800c038:	f000 809c 	beq.w	800c174 <FusionAhrsUpdate+0x2d0>

        // Calculate accelerometer feedback scaled by 0.5
        ahrs->halfAccelerometerFeedback = Feedback(FusionVectorNormalise(accelerometer), halfGravity);
 800c03c:	edd7 6a05 	vldr	s13, [r7, #20]
 800c040:	ed97 7a06 	vldr	s14, [r7, #24]
 800c044:	edd7 7a07 	vldr	s15, [r7, #28]
 800c048:	eeb0 0a66 	vmov.f32	s0, s13
 800c04c:	eef0 0a47 	vmov.f32	s1, s14
 800c050:	eeb0 1a67 	vmov.f32	s2, s15
 800c054:	f7ff fb60 	bl	800b718 <FusionVectorNormalise>
 800c058:	eef0 6a40 	vmov.f32	s13, s0
 800c05c:	eeb0 7a60 	vmov.f32	s14, s1
 800c060:	eef0 7a41 	vmov.f32	s15, s2
 800c064:	edc7 6a28 	vstr	s13, [r7, #160]	; 0xa0
 800c068:	ed87 7a29 	vstr	s14, [r7, #164]	; 0xa4
 800c06c:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
 800c070:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 800c072:	ed97 5a25 	vldr	s10, [r7, #148]	; 0x94
 800c076:	edd7 5a26 	vldr	s11, [r7, #152]	; 0x98
 800c07a:	ed97 6a27 	vldr	s12, [r7, #156]	; 0x9c
 800c07e:	edd7 6a28 	vldr	s13, [r7, #160]	; 0xa0
 800c082:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 800c086:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800c08a:	eef0 1a45 	vmov.f32	s3, s10
 800c08e:	eeb0 2a65 	vmov.f32	s4, s11
 800c092:	eef0 2a46 	vmov.f32	s5, s12
 800c096:	eeb0 0a66 	vmov.f32	s0, s13
 800c09a:	eef0 0a47 	vmov.f32	s1, s14
 800c09e:	eeb0 1a67 	vmov.f32	s2, s15
 800c0a2:	f000 fc55 	bl	800c950 <Feedback>
 800c0a6:	eef0 6a40 	vmov.f32	s13, s0
 800c0aa:	eeb0 7a60 	vmov.f32	s14, s1
 800c0ae:	eef0 7a41 	vmov.f32	s15, s2
 800c0b2:	edc4 6a11 	vstr	s13, [r4, #68]	; 0x44
 800c0b6:	ed84 7a12 	vstr	s14, [r4, #72]	; 0x48
 800c0ba:	edc4 7a13 	vstr	s15, [r4, #76]	; 0x4c

        // Don't ignore accelerometer if acceleration error below threshold
        if ((ahrs->initialising == true) || ((FusionVectorMagnitudeSquared(ahrs->halfAccelerometerFeedback) <= ahrs->settings.accelerationRejection))) {
 800c0be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0c0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d118      	bne.n	800c0fa <FusionAhrsUpdate+0x256>
 800c0c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0ca:	edd3 6a11 	vldr	s13, [r3, #68]	; 0x44
 800c0ce:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 800c0d2:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 800c0d6:	eeb0 0a66 	vmov.f32	s0, s13
 800c0da:	eef0 0a47 	vmov.f32	s1, s14
 800c0de:	eeb0 1a67 	vmov.f32	s2, s15
 800c0e2:	f7ff facf 	bl	800b684 <FusionVectorMagnitudeSquared>
 800c0e6:	eeb0 7a40 	vmov.f32	s14, s0
 800c0ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0ec:	edd3 7a03 	vldr	s15, [r3, #12]
 800c0f0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c0f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c0f8:	d80a      	bhi.n	800c110 <FusionAhrsUpdate+0x26c>
            ahrs->accelerometerIgnored = false;
 800c0fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0fc:	2200      	movs	r2, #0
 800c0fe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
            ahrs->accelerationRecoveryTrigger -= 9;
 800c102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c104:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c106:	f1a3 0209 	sub.w	r2, r3, #9
 800c10a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c10c:	661a      	str	r2, [r3, #96]	; 0x60
 800c10e:	e004      	b.n	800c11a <FusionAhrsUpdate+0x276>
        } else {
            ahrs->accelerationRecoveryTrigger += 1;
 800c110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c112:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c114:	1c5a      	adds	r2, r3, #1
 800c116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c118:	661a      	str	r2, [r3, #96]	; 0x60
        }

        // Don't ignore accelerometer during acceleration recovery
        if (ahrs->accelerationRecoveryTrigger > ahrs->accelerationRecoveryTimeout) {
 800c11a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c11c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800c11e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c120:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c122:	429a      	cmp	r2, r3
 800c124:	dd07      	ble.n	800c136 <FusionAhrsUpdate+0x292>
            ahrs->accelerationRecoveryTimeout = 0;
 800c126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c128:	2200      	movs	r2, #0
 800c12a:	665a      	str	r2, [r3, #100]	; 0x64
            ahrs->accelerometerIgnored = false;
 800c12c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c12e:	2200      	movs	r2, #0
 800c130:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 800c134:	e004      	b.n	800c140 <FusionAhrsUpdate+0x29c>
        } else {
            ahrs->accelerationRecoveryTimeout = ahrs->settings.recoveryTriggerPeriod;
 800c136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c138:	695b      	ldr	r3, [r3, #20]
 800c13a:	461a      	mov	r2, r3
 800c13c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c13e:	665a      	str	r2, [r3, #100]	; 0x64
        }
        ahrs->accelerationRecoveryTrigger = Clamp(ahrs->accelerationRecoveryTrigger, 0, ahrs->settings.recoveryTriggerPeriod);
 800c140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c142:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800c144:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c146:	695b      	ldr	r3, [r3, #20]
 800c148:	461a      	mov	r2, r3
 800c14a:	2100      	movs	r1, #0
 800c14c:	f000 fcb5 	bl	800caba <Clamp>
 800c150:	4602      	mov	r2, r0
 800c152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c154:	661a      	str	r2, [r3, #96]	; 0x60

        // Apply accelerometer feedback
        if (ahrs->accelerometerIgnored == false) {
 800c156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c158:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800c15c:	f083 0301 	eor.w	r3, r3, #1
 800c160:	b2db      	uxtb	r3, r3
 800c162:	2b00      	cmp	r3, #0
 800c164:	d006      	beq.n	800c174 <FusionAhrsUpdate+0x2d0>
            halfAccelerometerFeedback = ahrs->halfAccelerometerFeedback;
 800c166:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c168:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800c16c:	3244      	adds	r2, #68	; 0x44
 800c16e:	ca07      	ldmia	r2, {r0, r1, r2}
 800c170:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        }
    }

    // Calculate magnetometer feedback
    FusionVector halfMagnetometerFeedback = FUSION_VECTOR_ZERO;
 800c174:	f04f 0300 	mov.w	r3, #0
 800c178:	673b      	str	r3, [r7, #112]	; 0x70
 800c17a:	f04f 0300 	mov.w	r3, #0
 800c17e:	677b      	str	r3, [r7, #116]	; 0x74
 800c180:	f04f 0300 	mov.w	r3, #0
 800c184:	67bb      	str	r3, [r7, #120]	; 0x78
    ahrs->magnetometerIgnored = false;
 800c186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c188:	2200      	movs	r2, #0
 800c18a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    if (FusionVectorIsZero(magnetometer) == false) {
 800c18e:	edd7 6a02 	vldr	s13, [r7, #8]
 800c192:	ed97 7a03 	vldr	s14, [r7, #12]
 800c196:	edd7 7a04 	vldr	s15, [r7, #16]
 800c19a:	eeb0 0a66 	vmov.f32	s0, s13
 800c19e:	eef0 0a47 	vmov.f32	s1, s14
 800c1a2:	eeb0 1a67 	vmov.f32	s2, s15
 800c1a6:	f7ff f881 	bl	800b2ac <FusionVectorIsZero>
 800c1aa:	4603      	mov	r3, r0
 800c1ac:	f083 0301 	eor.w	r3, r3, #1
 800c1b0:	b2db      	uxtb	r3, r3
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	f000 80d1 	beq.w	800c35a <FusionAhrsUpdate+0x4b6>

        // Calculate direction of magnetic field indicated by algorithm
        const FusionVector halfMagnetic = HalfMagnetic(ahrs);
 800c1b8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c1ba:	f000 fabf 	bl	800c73c <HalfMagnetic>
 800c1be:	eef0 6a40 	vmov.f32	s13, s0
 800c1c2:	eeb0 7a60 	vmov.f32	s14, s1
 800c1c6:	eef0 7a41 	vmov.f32	s15, s2
 800c1ca:	edc7 6a0c 	vstr	s13, [r7, #48]	; 0x30
 800c1ce:	ed87 7a0d 	vstr	s14, [r7, #52]	; 0x34
 800c1d2:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38

        // Calculate magnetometer feedback scaled by 0.5
        ahrs->halfMagnetometerFeedback = Feedback(FusionVectorNormalise(FusionVectorCrossProduct(halfGravity, magnetometer)), halfMagnetic);
 800c1d6:	ed97 5a02 	vldr	s10, [r7, #8]
 800c1da:	edd7 5a03 	vldr	s11, [r7, #12]
 800c1de:	ed97 6a04 	vldr	s12, [r7, #16]
 800c1e2:	edd7 6a25 	vldr	s13, [r7, #148]	; 0x94
 800c1e6:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800c1ea:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800c1ee:	eef0 1a45 	vmov.f32	s3, s10
 800c1f2:	eeb0 2a65 	vmov.f32	s4, s11
 800c1f6:	eef0 2a46 	vmov.f32	s5, s12
 800c1fa:	eeb0 0a66 	vmov.f32	s0, s13
 800c1fe:	eef0 0a47 	vmov.f32	s1, s14
 800c202:	eeb0 1a67 	vmov.f32	s2, s15
 800c206:	f7ff f981 	bl	800b50c <FusionVectorCrossProduct>
 800c20a:	eef0 6a40 	vmov.f32	s13, s0
 800c20e:	eeb0 7a60 	vmov.f32	s14, s1
 800c212:	eef0 7a41 	vmov.f32	s15, s2
 800c216:	edc7 6a2b 	vstr	s13, [r7, #172]	; 0xac
 800c21a:	ed87 7a2c 	vstr	s14, [r7, #176]	; 0xb0
 800c21e:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
 800c222:	edd7 6a2b 	vldr	s13, [r7, #172]	; 0xac
 800c226:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 800c22a:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 800c22e:	eeb0 0a66 	vmov.f32	s0, s13
 800c232:	eef0 0a47 	vmov.f32	s1, s14
 800c236:	eeb0 1a67 	vmov.f32	s2, s15
 800c23a:	f7ff fa6d 	bl	800b718 <FusionVectorNormalise>
 800c23e:	eef0 6a40 	vmov.f32	s13, s0
 800c242:	eeb0 7a60 	vmov.f32	s14, s1
 800c246:	eef0 7a41 	vmov.f32	s15, s2
 800c24a:	edc7 6a2e 	vstr	s13, [r7, #184]	; 0xb8
 800c24e:	ed87 7a2f 	vstr	s14, [r7, #188]	; 0xbc
 800c252:	edc7 7a30 	vstr	s15, [r7, #192]	; 0xc0
 800c256:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 800c258:	ed97 5a0c 	vldr	s10, [r7, #48]	; 0x30
 800c25c:	edd7 5a0d 	vldr	s11, [r7, #52]	; 0x34
 800c260:	ed97 6a0e 	vldr	s12, [r7, #56]	; 0x38
 800c264:	edd7 6a2e 	vldr	s13, [r7, #184]	; 0xb8
 800c268:	ed97 7a2f 	vldr	s14, [r7, #188]	; 0xbc
 800c26c:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 800c270:	eef0 1a45 	vmov.f32	s3, s10
 800c274:	eeb0 2a65 	vmov.f32	s4, s11
 800c278:	eef0 2a46 	vmov.f32	s5, s12
 800c27c:	eeb0 0a66 	vmov.f32	s0, s13
 800c280:	eef0 0a47 	vmov.f32	s1, s14
 800c284:	eeb0 1a67 	vmov.f32	s2, s15
 800c288:	f000 fb62 	bl	800c950 <Feedback>
 800c28c:	eef0 6a40 	vmov.f32	s13, s0
 800c290:	eeb0 7a60 	vmov.f32	s14, s1
 800c294:	eef0 7a41 	vmov.f32	s15, s2
 800c298:	edc4 6a14 	vstr	s13, [r4, #80]	; 0x50
 800c29c:	ed84 7a15 	vstr	s14, [r4, #84]	; 0x54
 800c2a0:	edc4 7a16 	vstr	s15, [r4, #88]	; 0x58

        // Don't ignore magnetometer if magnetic error below threshold
        if ((ahrs->initialising == true) || ((FusionVectorMagnitudeSquared(ahrs->halfMagnetometerFeedback) <= ahrs->settings.magneticRejection))) {
 800c2a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2a6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d118      	bne.n	800c2e0 <FusionAhrsUpdate+0x43c>
 800c2ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2b0:	edd3 6a14 	vldr	s13, [r3, #80]	; 0x50
 800c2b4:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 800c2b8:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800c2bc:	eeb0 0a66 	vmov.f32	s0, s13
 800c2c0:	eef0 0a47 	vmov.f32	s1, s14
 800c2c4:	eeb0 1a67 	vmov.f32	s2, s15
 800c2c8:	f7ff f9dc 	bl	800b684 <FusionVectorMagnitudeSquared>
 800c2cc:	eeb0 7a40 	vmov.f32	s14, s0
 800c2d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2d2:	edd3 7a04 	vldr	s15, [r3, #16]
 800c2d6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c2da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c2de:	d80a      	bhi.n	800c2f6 <FusionAhrsUpdate+0x452>
            ahrs->magnetometerIgnored = false;
 800c2e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2e2:	2200      	movs	r2, #0
 800c2e4:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
            ahrs->magneticRecoveryTrigger -= 9;
 800c2e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c2ec:	f1a3 0209 	sub.w	r2, r3, #9
 800c2f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2f2:	66da      	str	r2, [r3, #108]	; 0x6c
 800c2f4:	e004      	b.n	800c300 <FusionAhrsUpdate+0x45c>
        } else {
            ahrs->magneticRecoveryTrigger += 1;
 800c2f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c2fa:	1c5a      	adds	r2, r3, #1
 800c2fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2fe:	66da      	str	r2, [r3, #108]	; 0x6c
        }

        // Don't ignore magnetometer during magnetic recovery
        if (ahrs->magneticRecoveryTrigger > ahrs->magneticRecoveryTimeout) {
 800c300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c302:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800c304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c306:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c308:	429a      	cmp	r2, r3
 800c30a:	dd07      	ble.n	800c31c <FusionAhrsUpdate+0x478>
            ahrs->magneticRecoveryTimeout = 0;
 800c30c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c30e:	2200      	movs	r2, #0
 800c310:	671a      	str	r2, [r3, #112]	; 0x70
            ahrs->magnetometerIgnored = false;
 800c312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c314:	2200      	movs	r2, #0
 800c316:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 800c31a:	e004      	b.n	800c326 <FusionAhrsUpdate+0x482>
        } else {
            ahrs->magneticRecoveryTimeout = ahrs->settings.recoveryTriggerPeriod;
 800c31c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c31e:	695b      	ldr	r3, [r3, #20]
 800c320:	461a      	mov	r2, r3
 800c322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c324:	671a      	str	r2, [r3, #112]	; 0x70
        }
        ahrs->magneticRecoveryTrigger = Clamp(ahrs->magneticRecoveryTrigger, 0, ahrs->settings.recoveryTriggerPeriod);
 800c326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c328:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800c32a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c32c:	695b      	ldr	r3, [r3, #20]
 800c32e:	461a      	mov	r2, r3
 800c330:	2100      	movs	r1, #0
 800c332:	f000 fbc2 	bl	800caba <Clamp>
 800c336:	4602      	mov	r2, r0
 800c338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c33a:	66da      	str	r2, [r3, #108]	; 0x6c

        // Apply magnetometer feedback
        if (ahrs->magnetometerIgnored == false) {
 800c33c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c33e:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800c342:	f083 0301 	eor.w	r3, r3, #1
 800c346:	b2db      	uxtb	r3, r3
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d006      	beq.n	800c35a <FusionAhrsUpdate+0x4b6>
            halfMagnetometerFeedback = ahrs->halfMagnetometerFeedback;
 800c34c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c34e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800c352:	3250      	adds	r2, #80	; 0x50
 800c354:	ca07      	ldmia	r2, {r0, r1, r2}
 800c356:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        }
    }

    // Convert gyroscope to radians per second scaled by 0.5
    const FusionVector halfGyroscope = FusionVectorMultiplyScalar(gyroscope, FusionDegreesToRadians(0.5f));
 800c35a:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 800c35e:	f7fe ff61 	bl	800b224 <FusionDegreesToRadians>
 800c362:	eeb0 6a40 	vmov.f32	s12, s0
 800c366:	edd7 6a08 	vldr	s13, [r7, #32]
 800c36a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800c36e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c372:	eef0 1a46 	vmov.f32	s3, s12
 800c376:	eeb0 0a66 	vmov.f32	s0, s13
 800c37a:	eef0 0a47 	vmov.f32	s1, s14
 800c37e:	eeb0 1a67 	vmov.f32	s2, s15
 800c382:	f7ff f831 	bl	800b3e8 <FusionVectorMultiplyScalar>
 800c386:	eef0 6a40 	vmov.f32	s13, s0
 800c38a:	eeb0 7a60 	vmov.f32	s14, s1
 800c38e:	eef0 7a41 	vmov.f32	s15, s2
 800c392:	edc7 6a16 	vstr	s13, [r7, #88]	; 0x58
 800c396:	ed87 7a17 	vstr	s14, [r7, #92]	; 0x5c
 800c39a:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60

    // Apply feedback to gyroscope
    const FusionVector adjustedHalfGyroscope = FusionVectorAdd(halfGyroscope, FusionVectorMultiplyScalar(FusionVectorAdd(halfAccelerometerFeedback, halfMagnetometerFeedback), ahrs->rampedGain));
 800c39e:	ed97 5a1c 	vldr	s10, [r7, #112]	; 0x70
 800c3a2:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 800c3a6:	ed97 6a1e 	vldr	s12, [r7, #120]	; 0x78
 800c3aa:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 800c3ae:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 800c3b2:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 800c3b6:	eef0 1a45 	vmov.f32	s3, s10
 800c3ba:	eeb0 2a65 	vmov.f32	s4, s11
 800c3be:	eef0 2a46 	vmov.f32	s5, s12
 800c3c2:	eeb0 0a66 	vmov.f32	s0, s13
 800c3c6:	eef0 0a47 	vmov.f32	s1, s14
 800c3ca:	eeb0 1a67 	vmov.f32	s2, s15
 800c3ce:	f7fe ff9d 	bl	800b30c <FusionVectorAdd>
 800c3d2:	eef0 6a40 	vmov.f32	s13, s0
 800c3d6:	eeb0 7a60 	vmov.f32	s14, s1
 800c3da:	eef0 7a41 	vmov.f32	s15, s2
 800c3de:	edc7 6a31 	vstr	s13, [r7, #196]	; 0xc4
 800c3e2:	ed87 7a32 	vstr	s14, [r7, #200]	; 0xc8
 800c3e6:	edc7 7a33 	vstr	s15, [r7, #204]	; 0xcc
 800c3ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3ec:	ed93 6a0e 	vldr	s12, [r3, #56]	; 0x38
 800c3f0:	edd7 6a31 	vldr	s13, [r7, #196]	; 0xc4
 800c3f4:	ed97 7a32 	vldr	s14, [r7, #200]	; 0xc8
 800c3f8:	edd7 7a33 	vldr	s15, [r7, #204]	; 0xcc
 800c3fc:	eef0 1a46 	vmov.f32	s3, s12
 800c400:	eeb0 0a66 	vmov.f32	s0, s13
 800c404:	eef0 0a47 	vmov.f32	s1, s14
 800c408:	eeb0 1a67 	vmov.f32	s2, s15
 800c40c:	f7fe ffec 	bl	800b3e8 <FusionVectorMultiplyScalar>
 800c410:	eef0 6a40 	vmov.f32	s13, s0
 800c414:	eeb0 7a60 	vmov.f32	s14, s1
 800c418:	eef0 7a41 	vmov.f32	s15, s2
 800c41c:	edc7 6a34 	vstr	s13, [r7, #208]	; 0xd0
 800c420:	ed87 7a35 	vstr	s14, [r7, #212]	; 0xd4
 800c424:	edc7 7a36 	vstr	s15, [r7, #216]	; 0xd8
 800c428:	ed97 5a34 	vldr	s10, [r7, #208]	; 0xd0
 800c42c:	edd7 5a35 	vldr	s11, [r7, #212]	; 0xd4
 800c430:	ed97 6a36 	vldr	s12, [r7, #216]	; 0xd8
 800c434:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 800c438:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800c43c:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800c440:	eef0 1a45 	vmov.f32	s3, s10
 800c444:	eeb0 2a65 	vmov.f32	s4, s11
 800c448:	eef0 2a46 	vmov.f32	s5, s12
 800c44c:	eeb0 0a66 	vmov.f32	s0, s13
 800c450:	eef0 0a47 	vmov.f32	s1, s14
 800c454:	eeb0 1a67 	vmov.f32	s2, s15
 800c458:	f7fe ff58 	bl	800b30c <FusionVectorAdd>
 800c45c:	eef0 6a40 	vmov.f32	s13, s0
 800c460:	eeb0 7a60 	vmov.f32	s14, s1
 800c464:	eef0 7a41 	vmov.f32	s15, s2
 800c468:	edc7 6a13 	vstr	s13, [r7, #76]	; 0x4c
 800c46c:	ed87 7a14 	vstr	s14, [r7, #80]	; 0x50
 800c470:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

    // Integrate rate of change of quaternion
    ahrs->quaternion = FusionQuaternionAdd(ahrs->quaternion, FusionQuaternionMultiplyVector(ahrs->quaternion, FusionVectorMultiplyScalar(adjustedHalfGyroscope, deltaTime)));
 800c474:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 800c478:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800c47c:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800c480:	edd7 1a01 	vldr	s3, [r7, #4]
 800c484:	eeb0 0a66 	vmov.f32	s0, s13
 800c488:	eef0 0a47 	vmov.f32	s1, s14
 800c48c:	eeb0 1a67 	vmov.f32	s2, s15
 800c490:	f7fe ffaa 	bl	800b3e8 <FusionVectorMultiplyScalar>
 800c494:	eef0 6a40 	vmov.f32	s13, s0
 800c498:	eeb0 7a60 	vmov.f32	s14, s1
 800c49c:	eef0 7a41 	vmov.f32	s15, s2
 800c4a0:	edc7 6a37 	vstr	s13, [r7, #220]	; 0xdc
 800c4a4:	ed87 7a38 	vstr	s14, [r7, #224]	; 0xe0
 800c4a8:	edc7 7a39 	vstr	s15, [r7, #228]	; 0xe4
 800c4ac:	edd7 4a37 	vldr	s9, [r7, #220]	; 0xdc
 800c4b0:	ed97 5a38 	vldr	s10, [r7, #224]	; 0xe0
 800c4b4:	edd7 5a39 	vldr	s11, [r7, #228]	; 0xe4
 800c4b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4ba:	ed93 6a06 	vldr	s12, [r3, #24]
 800c4be:	edd3 6a07 	vldr	s13, [r3, #28]
 800c4c2:	ed93 7a08 	vldr	s14, [r3, #32]
 800c4c6:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800c4ca:	eeb0 2a64 	vmov.f32	s4, s9
 800c4ce:	eef0 2a45 	vmov.f32	s5, s10
 800c4d2:	eeb0 3a65 	vmov.f32	s6, s11
 800c4d6:	eeb0 0a46 	vmov.f32	s0, s12
 800c4da:	eef0 0a66 	vmov.f32	s1, s13
 800c4de:	eeb0 1a47 	vmov.f32	s2, s14
 800c4e2:	eef0 1a67 	vmov.f32	s3, s15
 800c4e6:	f7ff fa8e 	bl	800ba06 <FusionQuaternionMultiplyVector>
 800c4ea:	eeb0 6a40 	vmov.f32	s12, s0
 800c4ee:	eef0 6a60 	vmov.f32	s13, s1
 800c4f2:	eeb0 7a41 	vmov.f32	s14, s2
 800c4f6:	eef0 7a61 	vmov.f32	s15, s3
 800c4fa:	ed87 6a3a 	vstr	s12, [r7, #232]	; 0xe8
 800c4fe:	edc7 6a3b 	vstr	s13, [r7, #236]	; 0xec
 800c502:	ed87 7a3c 	vstr	s14, [r7, #240]	; 0xf0
 800c506:	edc7 7a3d 	vstr	s15, [r7, #244]	; 0xf4
 800c50a:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 800c50c:	ed97 4a3a 	vldr	s8, [r7, #232]	; 0xe8
 800c510:	edd7 4a3b 	vldr	s9, [r7, #236]	; 0xec
 800c514:	ed97 5a3c 	vldr	s10, [r7, #240]	; 0xf0
 800c518:	edd7 5a3d 	vldr	s11, [r7, #244]	; 0xf4
 800c51c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c51e:	ed93 6a06 	vldr	s12, [r3, #24]
 800c522:	edd3 6a07 	vldr	s13, [r3, #28]
 800c526:	ed93 7a08 	vldr	s14, [r3, #32]
 800c52a:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800c52e:	eeb0 2a44 	vmov.f32	s4, s8
 800c532:	eef0 2a64 	vmov.f32	s5, s9
 800c536:	eeb0 3a45 	vmov.f32	s6, s10
 800c53a:	eef0 3a65 	vmov.f32	s7, s11
 800c53e:	eeb0 0a46 	vmov.f32	s0, s12
 800c542:	eef0 0a66 	vmov.f32	s1, s13
 800c546:	eeb0 1a47 	vmov.f32	s2, s14
 800c54a:	eef0 1a67 	vmov.f32	s3, s15
 800c54e:	f7ff f936 	bl	800b7be <FusionQuaternionAdd>
 800c552:	eeb0 6a40 	vmov.f32	s12, s0
 800c556:	eef0 6a60 	vmov.f32	s13, s1
 800c55a:	eeb0 7a41 	vmov.f32	s14, s2
 800c55e:	eef0 7a61 	vmov.f32	s15, s3
 800c562:	ed84 6a06 	vstr	s12, [r4, #24]
 800c566:	edc4 6a07 	vstr	s13, [r4, #28]
 800c56a:	ed84 7a08 	vstr	s14, [r4, #32]
 800c56e:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24

    // Normalise quaternion
    ahrs->quaternion = FusionQuaternionNormalise(ahrs->quaternion);
 800c572:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 800c574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c576:	ed93 6a06 	vldr	s12, [r3, #24]
 800c57a:	edd3 6a07 	vldr	s13, [r3, #28]
 800c57e:	ed93 7a08 	vldr	s14, [r3, #32]
 800c582:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800c586:	eeb0 0a46 	vmov.f32	s0, s12
 800c58a:	eef0 0a66 	vmov.f32	s1, s13
 800c58e:	eeb0 1a47 	vmov.f32	s2, s14
 800c592:	eef0 1a67 	vmov.f32	s3, s15
 800c596:	f7ff fad6 	bl	800bb46 <FusionQuaternionNormalise>
 800c59a:	eeb0 6a40 	vmov.f32	s12, s0
 800c59e:	eef0 6a60 	vmov.f32	s13, s1
 800c5a2:	eeb0 7a41 	vmov.f32	s14, s2
 800c5a6:	eef0 7a61 	vmov.f32	s15, s3
 800c5aa:	ed84 6a06 	vstr	s12, [r4, #24]
 800c5ae:	edc4 6a07 	vstr	s13, [r4, #28]
 800c5b2:	ed84 7a08 	vstr	s14, [r4, #32]
 800c5b6:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
#undef Q
}
 800c5ba:	bf00      	nop
 800c5bc:	37fc      	adds	r7, #252	; 0xfc
 800c5be:	46bd      	mov	sp, r7
 800c5c0:	bd90      	pop	{r4, r7, pc}

0800c5c2 <HalfGravity>:
/**
 * @brief Returns the direction of gravity scaled by 0.5.
 * @param ahrs AHRS algorithm structure.
 * @return Direction of gravity scaled by 0.5.
 */
static inline FusionVector HalfGravity(const FusionAhrs *const ahrs) {
 800c5c2:	b480      	push	{r7}
 800c5c4:	b093      	sub	sp, #76	; 0x4c
 800c5c6:	af00      	add	r7, sp, #0
 800c5c8:	6178      	str	r0, [r7, #20]
#define Q ahrs->quaternion.element
    switch (ahrs->settings.convention) {
 800c5ca:	697b      	ldr	r3, [r7, #20]
 800c5cc:	781b      	ldrb	r3, [r3, #0]
 800c5ce:	2b01      	cmp	r3, #1
 800c5d0:	dc02      	bgt.n	800c5d8 <HalfGravity+0x16>
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	da03      	bge.n	800c5de <HalfGravity+0x1c>
 800c5d6:	e094      	b.n	800c702 <HalfGravity+0x140>
 800c5d8:	2b02      	cmp	r3, #2
 800c5da:	d048      	beq.n	800c66e <HalfGravity+0xac>
 800c5dc:	e091      	b.n	800c702 <HalfGravity+0x140>
        case FusionConventionNwu:
        case FusionConventionEnu: {
            const FusionVector halfGravity = {.axis = {
                    .x = Q.x * Q.z - Q.w * Q.y,
 800c5de:	697b      	ldr	r3, [r7, #20]
 800c5e0:	ed93 7a07 	vldr	s14, [r3, #28]
 800c5e4:	697b      	ldr	r3, [r7, #20]
 800c5e6:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800c5ea:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c5ee:	697b      	ldr	r3, [r7, #20]
 800c5f0:	edd3 6a06 	vldr	s13, [r3, #24]
 800c5f4:	697b      	ldr	r3, [r7, #20]
 800c5f6:	edd3 7a08 	vldr	s15, [r3, #32]
 800c5fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c5fe:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfGravity = {.axis = {
 800c602:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                    .y = Q.y * Q.z + Q.w * Q.x,
 800c606:	697b      	ldr	r3, [r7, #20]
 800c608:	ed93 7a08 	vldr	s14, [r3, #32]
 800c60c:	697b      	ldr	r3, [r7, #20]
 800c60e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800c612:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c616:	697b      	ldr	r3, [r7, #20]
 800c618:	edd3 6a06 	vldr	s13, [r3, #24]
 800c61c:	697b      	ldr	r3, [r7, #20]
 800c61e:	edd3 7a07 	vldr	s15, [r3, #28]
 800c622:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c626:	ee77 7a27 	vadd.f32	s15, s14, s15
            const FusionVector halfGravity = {.axis = {
 800c62a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
                    .z = Q.w * Q.w - 0.5f + Q.z * Q.z,
 800c62e:	697b      	ldr	r3, [r7, #20]
 800c630:	ed93 7a06 	vldr	s14, [r3, #24]
 800c634:	697b      	ldr	r3, [r7, #20]
 800c636:	edd3 7a06 	vldr	s15, [r3, #24]
 800c63a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c63e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800c642:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800c646:	697b      	ldr	r3, [r7, #20]
 800c648:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 800c64c:	697b      	ldr	r3, [r7, #20]
 800c64e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800c652:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c656:	ee77 7a27 	vadd.f32	s15, s14, s15
            const FusionVector halfGravity = {.axis = {
 800c65a:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            }}; // third column of transposed rotation matrix scaled by 0.5
            return halfGravity;
 800c65e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800c662:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800c666:	ca07      	ldmia	r2, {r0, r1, r2}
 800c668:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800c66c:	e052      	b.n	800c714 <HalfGravity+0x152>
        }
        case FusionConventionNed: {
            const FusionVector halfGravity = {.axis = {
                    .x = Q.w * Q.y - Q.x * Q.z,
 800c66e:	697b      	ldr	r3, [r7, #20]
 800c670:	ed93 7a06 	vldr	s14, [r3, #24]
 800c674:	697b      	ldr	r3, [r7, #20]
 800c676:	edd3 7a08 	vldr	s15, [r3, #32]
 800c67a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c67e:	697b      	ldr	r3, [r7, #20]
 800c680:	edd3 6a07 	vldr	s13, [r3, #28]
 800c684:	697b      	ldr	r3, [r7, #20]
 800c686:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800c68a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c68e:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfGravity = {.axis = {
 800c692:	edc7 7a06 	vstr	s15, [r7, #24]
                    .y = -1.0f * (Q.y * Q.z + Q.w * Q.x),
 800c696:	697b      	ldr	r3, [r7, #20]
 800c698:	ed93 7a08 	vldr	s14, [r3, #32]
 800c69c:	697b      	ldr	r3, [r7, #20]
 800c69e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800c6a2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c6a6:	697b      	ldr	r3, [r7, #20]
 800c6a8:	edd3 6a06 	vldr	s13, [r3, #24]
 800c6ac:	697b      	ldr	r3, [r7, #20]
 800c6ae:	edd3 7a07 	vldr	s15, [r3, #28]
 800c6b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c6b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c6ba:	eef1 7a67 	vneg.f32	s15, s15
            const FusionVector halfGravity = {.axis = {
 800c6be:	edc7 7a07 	vstr	s15, [r7, #28]
                    .z = 0.5f - Q.w * Q.w - Q.z * Q.z,
 800c6c2:	697b      	ldr	r3, [r7, #20]
 800c6c4:	ed93 7a06 	vldr	s14, [r3, #24]
 800c6c8:	697b      	ldr	r3, [r7, #20]
 800c6ca:	edd3 7a06 	vldr	s15, [r3, #24]
 800c6ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c6d2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800c6d6:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c6da:	697b      	ldr	r3, [r7, #20]
 800c6dc:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 800c6e0:	697b      	ldr	r3, [r7, #20]
 800c6e2:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800c6e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c6ea:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfGravity = {.axis = {
 800c6ee:	edc7 7a08 	vstr	s15, [r7, #32]
            }}; // third column of transposed rotation matrix scaled by -0.5
            return halfGravity;
 800c6f2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800c6f6:	f107 0218 	add.w	r2, r7, #24
 800c6fa:	ca07      	ldmia	r2, {r0, r1, r2}
 800c6fc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800c700:	e008      	b.n	800c714 <HalfGravity+0x152>
        }
    }
    return FUSION_VECTOR_ZERO; // avoid compiler warning
 800c702:	f04f 0300 	mov.w	r3, #0
 800c706:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c708:	f04f 0300 	mov.w	r3, #0
 800c70c:	643b      	str	r3, [r7, #64]	; 0x40
 800c70e:	f04f 0300 	mov.w	r3, #0
 800c712:	647b      	str	r3, [r7, #68]	; 0x44
#undef Q
}
 800c714:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c716:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c718:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c71a:	ee06 1a90 	vmov	s13, r1
 800c71e:	ee07 2a10 	vmov	s14, r2
 800c722:	ee07 3a90 	vmov	s15, r3
 800c726:	eeb0 0a66 	vmov.f32	s0, s13
 800c72a:	eef0 0a47 	vmov.f32	s1, s14
 800c72e:	eeb0 1a67 	vmov.f32	s2, s15
 800c732:	374c      	adds	r7, #76	; 0x4c
 800c734:	46bd      	mov	sp, r7
 800c736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c73a:	4770      	bx	lr

0800c73c <HalfMagnetic>:
/**
 * @brief Returns the direction of the magnetic field scaled by 0.5.
 * @param ahrs AHRS algorithm structure.
 * @return Direction of the magnetic field scaled by 0.5.
 */
static inline FusionVector HalfMagnetic(const FusionAhrs *const ahrs) {
 800c73c:	b480      	push	{r7}
 800c73e:	b097      	sub	sp, #92	; 0x5c
 800c740:	af00      	add	r7, sp, #0
 800c742:	6178      	str	r0, [r7, #20]
#define Q ahrs->quaternion.element
    switch (ahrs->settings.convention) {
 800c744:	697b      	ldr	r3, [r7, #20]
 800c746:	781b      	ldrb	r3, [r3, #0]
 800c748:	2b02      	cmp	r3, #2
 800c74a:	f000 809a 	beq.w	800c882 <HalfMagnetic+0x146>
 800c74e:	2b02      	cmp	r3, #2
 800c750:	f300 80e1 	bgt.w	800c916 <HalfMagnetic+0x1da>
 800c754:	2b00      	cmp	r3, #0
 800c756:	d002      	beq.n	800c75e <HalfMagnetic+0x22>
 800c758:	2b01      	cmp	r3, #1
 800c75a:	d048      	beq.n	800c7ee <HalfMagnetic+0xb2>
 800c75c:	e0db      	b.n	800c916 <HalfMagnetic+0x1da>
        case FusionConventionNwu: {
            const FusionVector halfMagnetic = {.axis = {
                    .x = Q.x * Q.y + Q.w * Q.z,
 800c75e:	697b      	ldr	r3, [r7, #20]
 800c760:	ed93 7a07 	vldr	s14, [r3, #28]
 800c764:	697b      	ldr	r3, [r7, #20]
 800c766:	edd3 7a08 	vldr	s15, [r3, #32]
 800c76a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c76e:	697b      	ldr	r3, [r7, #20]
 800c770:	edd3 6a06 	vldr	s13, [r3, #24]
 800c774:	697b      	ldr	r3, [r7, #20]
 800c776:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800c77a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c77e:	ee77 7a27 	vadd.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 800c782:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
                    .y = Q.w * Q.w - 0.5f + Q.y * Q.y,
 800c786:	697b      	ldr	r3, [r7, #20]
 800c788:	ed93 7a06 	vldr	s14, [r3, #24]
 800c78c:	697b      	ldr	r3, [r7, #20]
 800c78e:	edd3 7a06 	vldr	s15, [r3, #24]
 800c792:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c796:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800c79a:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800c79e:	697b      	ldr	r3, [r7, #20]
 800c7a0:	edd3 6a08 	vldr	s13, [r3, #32]
 800c7a4:	697b      	ldr	r3, [r7, #20]
 800c7a6:	edd3 7a08 	vldr	s15, [r3, #32]
 800c7aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c7ae:	ee77 7a27 	vadd.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 800c7b2:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
                    .z = Q.y * Q.z - Q.w * Q.x,
 800c7b6:	697b      	ldr	r3, [r7, #20]
 800c7b8:	ed93 7a08 	vldr	s14, [r3, #32]
 800c7bc:	697b      	ldr	r3, [r7, #20]
 800c7be:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800c7c2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c7c6:	697b      	ldr	r3, [r7, #20]
 800c7c8:	edd3 6a06 	vldr	s13, [r3, #24]
 800c7cc:	697b      	ldr	r3, [r7, #20]
 800c7ce:	edd3 7a07 	vldr	s15, [r3, #28]
 800c7d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c7d6:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 800c7da:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
            }}; // second column of transposed rotation matrix scaled by 0.5
            return halfMagnetic;
 800c7de:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800c7e2:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800c7e6:	ca07      	ldmia	r2, {r0, r1, r2}
 800c7e8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800c7ec:	e09c      	b.n	800c928 <HalfMagnetic+0x1ec>
        }
        case FusionConventionEnu: {
            const FusionVector halfMagnetic = {.axis = {
                    .x = 0.5f - Q.w * Q.w - Q.x * Q.x,
 800c7ee:	697b      	ldr	r3, [r7, #20]
 800c7f0:	ed93 7a06 	vldr	s14, [r3, #24]
 800c7f4:	697b      	ldr	r3, [r7, #20]
 800c7f6:	edd3 7a06 	vldr	s15, [r3, #24]
 800c7fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c7fe:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800c802:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c806:	697b      	ldr	r3, [r7, #20]
 800c808:	edd3 6a07 	vldr	s13, [r3, #28]
 800c80c:	697b      	ldr	r3, [r7, #20]
 800c80e:	edd3 7a07 	vldr	s15, [r3, #28]
 800c812:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c816:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 800c81a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
                    .y = Q.w * Q.z - Q.x * Q.y,
 800c81e:	697b      	ldr	r3, [r7, #20]
 800c820:	ed93 7a06 	vldr	s14, [r3, #24]
 800c824:	697b      	ldr	r3, [r7, #20]
 800c826:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800c82a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c82e:	697b      	ldr	r3, [r7, #20]
 800c830:	edd3 6a07 	vldr	s13, [r3, #28]
 800c834:	697b      	ldr	r3, [r7, #20]
 800c836:	edd3 7a08 	vldr	s15, [r3, #32]
 800c83a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c83e:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 800c842:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
                    .z = -1.0f * (Q.x * Q.z + Q.w * Q.y),
 800c846:	697b      	ldr	r3, [r7, #20]
 800c848:	ed93 7a07 	vldr	s14, [r3, #28]
 800c84c:	697b      	ldr	r3, [r7, #20]
 800c84e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800c852:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c856:	697b      	ldr	r3, [r7, #20]
 800c858:	edd3 6a06 	vldr	s13, [r3, #24]
 800c85c:	697b      	ldr	r3, [r7, #20]
 800c85e:	edd3 7a08 	vldr	s15, [r3, #32]
 800c862:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c866:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c86a:	eef1 7a67 	vneg.f32	s15, s15
            const FusionVector halfMagnetic = {.axis = {
 800c86e:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
            }}; // first column of transposed rotation matrix scaled by -0.5
            return halfMagnetic;
 800c872:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800c876:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800c87a:	ca07      	ldmia	r2, {r0, r1, r2}
 800c87c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800c880:	e052      	b.n	800c928 <HalfMagnetic+0x1ec>
        }
        case FusionConventionNed: {
            const FusionVector halfMagnetic = {.axis = {
                    .x = -1.0f * (Q.x * Q.y + Q.w * Q.z),
 800c882:	697b      	ldr	r3, [r7, #20]
 800c884:	ed93 7a07 	vldr	s14, [r3, #28]
 800c888:	697b      	ldr	r3, [r7, #20]
 800c88a:	edd3 7a08 	vldr	s15, [r3, #32]
 800c88e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c892:	697b      	ldr	r3, [r7, #20]
 800c894:	edd3 6a06 	vldr	s13, [r3, #24]
 800c898:	697b      	ldr	r3, [r7, #20]
 800c89a:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800c89e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c8a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c8a6:	eef1 7a67 	vneg.f32	s15, s15
            const FusionVector halfMagnetic = {.axis = {
 800c8aa:	edc7 7a07 	vstr	s15, [r7, #28]
                    .y = 0.5f - Q.w * Q.w - Q.y * Q.y,
 800c8ae:	697b      	ldr	r3, [r7, #20]
 800c8b0:	ed93 7a06 	vldr	s14, [r3, #24]
 800c8b4:	697b      	ldr	r3, [r7, #20]
 800c8b6:	edd3 7a06 	vldr	s15, [r3, #24]
 800c8ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c8be:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800c8c2:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c8c6:	697b      	ldr	r3, [r7, #20]
 800c8c8:	edd3 6a08 	vldr	s13, [r3, #32]
 800c8cc:	697b      	ldr	r3, [r7, #20]
 800c8ce:	edd3 7a08 	vldr	s15, [r3, #32]
 800c8d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c8d6:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 800c8da:	edc7 7a08 	vstr	s15, [r7, #32]
                    .z = Q.w * Q.x - Q.y * Q.z,
 800c8de:	697b      	ldr	r3, [r7, #20]
 800c8e0:	ed93 7a06 	vldr	s14, [r3, #24]
 800c8e4:	697b      	ldr	r3, [r7, #20]
 800c8e6:	edd3 7a07 	vldr	s15, [r3, #28]
 800c8ea:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c8ee:	697b      	ldr	r3, [r7, #20]
 800c8f0:	edd3 6a08 	vldr	s13, [r3, #32]
 800c8f4:	697b      	ldr	r3, [r7, #20]
 800c8f6:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800c8fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c8fe:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 800c902:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            }}; // second column of transposed rotation matrix scaled by -0.5
            return halfMagnetic;
 800c906:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800c90a:	f107 021c 	add.w	r2, r7, #28
 800c90e:	ca07      	ldmia	r2, {r0, r1, r2}
 800c910:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800c914:	e008      	b.n	800c928 <HalfMagnetic+0x1ec>
        }
    }
    return FUSION_VECTOR_ZERO; // avoid compiler warning
 800c916:	f04f 0300 	mov.w	r3, #0
 800c91a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c91c:	f04f 0300 	mov.w	r3, #0
 800c920:	653b      	str	r3, [r7, #80]	; 0x50
 800c922:	f04f 0300 	mov.w	r3, #0
 800c926:	657b      	str	r3, [r7, #84]	; 0x54
#undef Q
}
 800c928:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800c92a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c92c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c92e:	ee06 1a90 	vmov	s13, r1
 800c932:	ee07 2a10 	vmov	s14, r2
 800c936:	ee07 3a90 	vmov	s15, r3
 800c93a:	eeb0 0a66 	vmov.f32	s0, s13
 800c93e:	eef0 0a47 	vmov.f32	s1, s14
 800c942:	eeb0 1a67 	vmov.f32	s2, s15
 800c946:	375c      	adds	r7, #92	; 0x5c
 800c948:	46bd      	mov	sp, r7
 800c94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c94e:	4770      	bx	lr

0800c950 <Feedback>:
 * @brief Returns the feedback.
 * @param sensor Sensor.
 * @param reference Reference.
 * @return Feedback.
 */
static inline FusionVector Feedback(const FusionVector sensor, const FusionVector reference) {
 800c950:	b580      	push	{r7, lr}
 800c952:	b090      	sub	sp, #64	; 0x40
 800c954:	af00      	add	r7, sp, #0
 800c956:	eeb0 5a40 	vmov.f32	s10, s0
 800c95a:	eef0 5a60 	vmov.f32	s11, s1
 800c95e:	eeb0 6a41 	vmov.f32	s12, s2
 800c962:	eef0 6a61 	vmov.f32	s13, s3
 800c966:	eeb0 7a42 	vmov.f32	s14, s4
 800c96a:	eef0 7a62 	vmov.f32	s15, s5
 800c96e:	ed87 5a07 	vstr	s10, [r7, #28]
 800c972:	edc7 5a08 	vstr	s11, [r7, #32]
 800c976:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 800c97a:	edc7 6a04 	vstr	s13, [r7, #16]
 800c97e:	ed87 7a05 	vstr	s14, [r7, #20]
 800c982:	edc7 7a06 	vstr	s15, [r7, #24]
    if (FusionVectorDotProduct(sensor, reference) < 0.0f) { // if error is >90 degrees
 800c986:	ed97 5a04 	vldr	s10, [r7, #16]
 800c98a:	edd7 5a05 	vldr	s11, [r7, #20]
 800c98e:	ed97 6a06 	vldr	s12, [r7, #24]
 800c992:	edd7 6a07 	vldr	s13, [r7, #28]
 800c996:	ed97 7a08 	vldr	s14, [r7, #32]
 800c99a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800c99e:	eef0 1a45 	vmov.f32	s3, s10
 800c9a2:	eeb0 2a65 	vmov.f32	s4, s11
 800c9a6:	eef0 2a46 	vmov.f32	s5, s12
 800c9aa:	eeb0 0a66 	vmov.f32	s0, s13
 800c9ae:	eef0 0a47 	vmov.f32	s1, s14
 800c9b2:	eeb0 1a67 	vmov.f32	s2, s15
 800c9b6:	f7fe fe0f 	bl	800b5d8 <FusionVectorDotProduct>
 800c9ba:	eef0 7a40 	vmov.f32	s15, s0
 800c9be:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c9c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c9c6:	d540      	bpl.n	800ca4a <Feedback+0xfa>
        return FusionVectorNormalise(FusionVectorCrossProduct(sensor, reference));
 800c9c8:	ed97 5a04 	vldr	s10, [r7, #16]
 800c9cc:	edd7 5a05 	vldr	s11, [r7, #20]
 800c9d0:	ed97 6a06 	vldr	s12, [r7, #24]
 800c9d4:	edd7 6a07 	vldr	s13, [r7, #28]
 800c9d8:	ed97 7a08 	vldr	s14, [r7, #32]
 800c9dc:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800c9e0:	eef0 1a45 	vmov.f32	s3, s10
 800c9e4:	eeb0 2a65 	vmov.f32	s4, s11
 800c9e8:	eef0 2a46 	vmov.f32	s5, s12
 800c9ec:	eeb0 0a66 	vmov.f32	s0, s13
 800c9f0:	eef0 0a47 	vmov.f32	s1, s14
 800c9f4:	eeb0 1a67 	vmov.f32	s2, s15
 800c9f8:	f7fe fd88 	bl	800b50c <FusionVectorCrossProduct>
 800c9fc:	eef0 6a40 	vmov.f32	s13, s0
 800ca00:	eeb0 7a60 	vmov.f32	s14, s1
 800ca04:	eef0 7a41 	vmov.f32	s15, s2
 800ca08:	edc7 6a0d 	vstr	s13, [r7, #52]	; 0x34
 800ca0c:	ed87 7a0e 	vstr	s14, [r7, #56]	; 0x38
 800ca10:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
 800ca14:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 800ca18:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800ca1c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800ca20:	eeb0 0a66 	vmov.f32	s0, s13
 800ca24:	eef0 0a47 	vmov.f32	s1, s14
 800ca28:	eeb0 1a67 	vmov.f32	s2, s15
 800ca2c:	f7fe fe74 	bl	800b718 <FusionVectorNormalise>
 800ca30:	eef0 6a40 	vmov.f32	s13, s0
 800ca34:	eeb0 7a60 	vmov.f32	s14, s1
 800ca38:	eef0 7a41 	vmov.f32	s15, s2
 800ca3c:	edc7 6a0a 	vstr	s13, [r7, #40]	; 0x28
 800ca40:	ed87 7a0b 	vstr	s14, [r7, #44]	; 0x2c
 800ca44:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 800ca48:	e025      	b.n	800ca96 <Feedback+0x146>
    }
    return FusionVectorCrossProduct(sensor, reference);
 800ca4a:	ed97 5a04 	vldr	s10, [r7, #16]
 800ca4e:	edd7 5a05 	vldr	s11, [r7, #20]
 800ca52:	ed97 6a06 	vldr	s12, [r7, #24]
 800ca56:	edd7 6a07 	vldr	s13, [r7, #28]
 800ca5a:	ed97 7a08 	vldr	s14, [r7, #32]
 800ca5e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800ca62:	eef0 1a45 	vmov.f32	s3, s10
 800ca66:	eeb0 2a65 	vmov.f32	s4, s11
 800ca6a:	eef0 2a46 	vmov.f32	s5, s12
 800ca6e:	eeb0 0a66 	vmov.f32	s0, s13
 800ca72:	eef0 0a47 	vmov.f32	s1, s14
 800ca76:	eeb0 1a67 	vmov.f32	s2, s15
 800ca7a:	f7fe fd47 	bl	800b50c <FusionVectorCrossProduct>
 800ca7e:	eef0 6a40 	vmov.f32	s13, s0
 800ca82:	eeb0 7a60 	vmov.f32	s14, s1
 800ca86:	eef0 7a41 	vmov.f32	s15, s2
 800ca8a:	edc7 6a0a 	vstr	s13, [r7, #40]	; 0x28
 800ca8e:	ed87 7a0b 	vstr	s14, [r7, #44]	; 0x2c
 800ca92:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
}
 800ca96:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ca98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ca9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca9c:	ee06 1a90 	vmov	s13, r1
 800caa0:	ee07 2a10 	vmov	s14, r2
 800caa4:	ee07 3a90 	vmov	s15, r3
 800caa8:	eeb0 0a66 	vmov.f32	s0, s13
 800caac:	eef0 0a47 	vmov.f32	s1, s14
 800cab0:	eeb0 1a67 	vmov.f32	s2, s15
 800cab4:	3740      	adds	r7, #64	; 0x40
 800cab6:	46bd      	mov	sp, r7
 800cab8:	bd80      	pop	{r7, pc}

0800caba <Clamp>:
 * @param value Value.
 * @param min Minimum value.
 * @param max Maximum value.
 * @return Value limited to maximum and minimum.
 */
static inline int Clamp(const int value, const int min, const int max) {
 800caba:	b480      	push	{r7}
 800cabc:	b085      	sub	sp, #20
 800cabe:	af00      	add	r7, sp, #0
 800cac0:	60f8      	str	r0, [r7, #12]
 800cac2:	60b9      	str	r1, [r7, #8]
 800cac4:	607a      	str	r2, [r7, #4]
    if (value < min) {
 800cac6:	68fa      	ldr	r2, [r7, #12]
 800cac8:	68bb      	ldr	r3, [r7, #8]
 800caca:	429a      	cmp	r2, r3
 800cacc:	da01      	bge.n	800cad2 <Clamp+0x18>
        return min;
 800cace:	68bb      	ldr	r3, [r7, #8]
 800cad0:	e006      	b.n	800cae0 <Clamp+0x26>
    }
    if (value > max) {
 800cad2:	68fa      	ldr	r2, [r7, #12]
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	429a      	cmp	r2, r3
 800cad8:	dd01      	ble.n	800cade <Clamp+0x24>
        return max;
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	e000      	b.n	800cae0 <Clamp+0x26>
    }
    return value;
 800cade:	68fb      	ldr	r3, [r7, #12]
}
 800cae0:	4618      	mov	r0, r3
 800cae2:	3714      	adds	r7, #20
 800cae4:	46bd      	mov	sp, r7
 800cae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caea:	4770      	bx	lr

0800caec <FusionAhrsUpdateNoMagnetometer>:
 * @param ahrs AHRS algorithm structure.
 * @param gyroscope Gyroscope measurement in degrees per second.
 * @param accelerometer Accelerometer measurement in g.
 * @param deltaTime Delta time in seconds.
 */
void FusionAhrsUpdateNoMagnetometer(FusionAhrs *const ahrs, const FusionVector gyroscope, const FusionVector accelerometer, const float deltaTime) {
 800caec:	b580      	push	{r7, lr}
 800caee:	b08c      	sub	sp, #48	; 0x30
 800caf0:	af00      	add	r7, sp, #0
 800caf2:	61f8      	str	r0, [r7, #28]
 800caf4:	eeb0 5a40 	vmov.f32	s10, s0
 800caf8:	eef0 5a60 	vmov.f32	s11, s1
 800cafc:	eeb0 6a41 	vmov.f32	s12, s2
 800cb00:	eef0 6a61 	vmov.f32	s13, s3
 800cb04:	eeb0 7a42 	vmov.f32	s14, s4
 800cb08:	eef0 7a62 	vmov.f32	s15, s5
 800cb0c:	ed87 3a00 	vstr	s6, [r7]
 800cb10:	ed87 5a04 	vstr	s10, [r7, #16]
 800cb14:	edc7 5a05 	vstr	s11, [r7, #20]
 800cb18:	ed87 6a06 	vstr	s12, [r7, #24]
 800cb1c:	edc7 6a01 	vstr	s13, [r7, #4]
 800cb20:	ed87 7a02 	vstr	s14, [r7, #8]
 800cb24:	edc7 7a03 	vstr	s15, [r7, #12]

    // Update AHRS algorithm
    FusionAhrsUpdate(ahrs, gyroscope, accelerometer, FUSION_VECTOR_ZERO, deltaTime);
 800cb28:	f04f 0300 	mov.w	r3, #0
 800cb2c:	627b      	str	r3, [r7, #36]	; 0x24
 800cb2e:	f04f 0300 	mov.w	r3, #0
 800cb32:	62bb      	str	r3, [r7, #40]	; 0x28
 800cb34:	f04f 0300 	mov.w	r3, #0
 800cb38:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cb3a:	ed97 3a09 	vldr	s6, [r7, #36]	; 0x24
 800cb3e:	edd7 3a0a 	vldr	s7, [r7, #40]	; 0x28
 800cb42:	ed97 4a0b 	vldr	s8, [r7, #44]	; 0x2c
 800cb46:	ed97 5a01 	vldr	s10, [r7, #4]
 800cb4a:	edd7 5a02 	vldr	s11, [r7, #8]
 800cb4e:	ed97 6a03 	vldr	s12, [r7, #12]
 800cb52:	edd7 6a04 	vldr	s13, [r7, #16]
 800cb56:	ed97 7a05 	vldr	s14, [r7, #20]
 800cb5a:	edd7 7a06 	vldr	s15, [r7, #24]
 800cb5e:	edd7 4a00 	vldr	s9, [r7]
 800cb62:	eef0 1a45 	vmov.f32	s3, s10
 800cb66:	eeb0 2a65 	vmov.f32	s4, s11
 800cb6a:	eef0 2a46 	vmov.f32	s5, s12
 800cb6e:	eeb0 0a66 	vmov.f32	s0, s13
 800cb72:	eef0 0a47 	vmov.f32	s1, s14
 800cb76:	eeb0 1a67 	vmov.f32	s2, s15
 800cb7a:	69f8      	ldr	r0, [r7, #28]
 800cb7c:	f7ff f992 	bl	800bea4 <FusionAhrsUpdate>

    // Zero heading during initialisation
    if (ahrs->initialising == true) {
 800cb80:	69fb      	ldr	r3, [r7, #28]
 800cb82:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	d004      	beq.n	800cb94 <FusionAhrsUpdateNoMagnetometer+0xa8>
        FusionAhrsSetHeading(ahrs, 0.0f);
 800cb8a:	ed9f 0a04 	vldr	s0, [pc, #16]	; 800cb9c <FusionAhrsUpdateNoMagnetometer+0xb0>
 800cb8e:	69f8      	ldr	r0, [r7, #28]
 800cb90:	f000 f829 	bl	800cbe6 <FusionAhrsSetHeading>
    }
}
 800cb94:	bf00      	nop
 800cb96:	3730      	adds	r7, #48	; 0x30
 800cb98:	46bd      	mov	sp, r7
 800cb9a:	bd80      	pop	{r7, pc}
 800cb9c:	00000000 	.word	0x00000000

0800cba0 <FusionAhrsGetQuaternion>:
/**
 * @brief Returns the quaternion describing the sensor relative to the Earth.
 * @param ahrs AHRS algorithm structure.
 * @return Quaternion describing the sensor relative to the Earth.
 */
FusionQuaternion FusionAhrsGetQuaternion(const FusionAhrs *const ahrs) {
 800cba0:	b490      	push	{r4, r7}
 800cba2:	b08a      	sub	sp, #40	; 0x28
 800cba4:	af00      	add	r7, sp, #0
 800cba6:	6178      	str	r0, [r7, #20]
    return ahrs->quaternion;
 800cba8:	697b      	ldr	r3, [r7, #20]
 800cbaa:	f107 0418 	add.w	r4, r7, #24
 800cbae:	3318      	adds	r3, #24
 800cbb0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800cbb2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800cbb6:	69b8      	ldr	r0, [r7, #24]
 800cbb8:	69f9      	ldr	r1, [r7, #28]
 800cbba:	6a3a      	ldr	r2, [r7, #32]
 800cbbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbbe:	ee06 0a10 	vmov	s12, r0
 800cbc2:	ee06 1a90 	vmov	s13, r1
 800cbc6:	ee07 2a10 	vmov	s14, r2
 800cbca:	ee07 3a90 	vmov	s15, r3
}
 800cbce:	eeb0 0a46 	vmov.f32	s0, s12
 800cbd2:	eef0 0a66 	vmov.f32	s1, s13
 800cbd6:	eeb0 1a47 	vmov.f32	s2, s14
 800cbda:	eef0 1a67 	vmov.f32	s3, s15
 800cbde:	3728      	adds	r7, #40	; 0x28
 800cbe0:	46bd      	mov	sp, r7
 800cbe2:	bc90      	pop	{r4, r7}
 800cbe4:	4770      	bx	lr

0800cbe6 <FusionAhrsSetHeading>:
 * algorithm.  This function can be used to reset drift in heading when the AHRS
 * algorithm is being used without a magnetometer.
 * @param ahrs AHRS algorithm structure.
 * @param heading Heading angle in degrees.
 */
void FusionAhrsSetHeading(FusionAhrs *const ahrs, const float heading) {
 800cbe6:	b590      	push	{r4, r7, lr}
 800cbe8:	b089      	sub	sp, #36	; 0x24
 800cbea:	af00      	add	r7, sp, #0
 800cbec:	6078      	str	r0, [r7, #4]
 800cbee:	ed87 0a00 	vstr	s0, [r7]
#define Q ahrs->quaternion.element
    const float yaw = atan2f(Q.w * Q.z + Q.x * Q.y, 0.5f - Q.y * Q.y - Q.z * Q.z);
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	ed93 7a06 	vldr	s14, [r3, #24]
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800cbfe:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	edd3 6a07 	vldr	s13, [r3, #28]
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	edd3 7a08 	vldr	s15, [r3, #32]
 800cc0e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800cc12:	ee37 6a27 	vadd.f32	s12, s14, s15
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	ed93 7a08 	vldr	s14, [r3, #32]
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	edd3 7a08 	vldr	s15, [r3, #32]
 800cc22:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cc26:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800cc2a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800cc3a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800cc3e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cc42:	eef0 0a67 	vmov.f32	s1, s15
 800cc46:	eeb0 0a46 	vmov.f32	s0, s12
 800cc4a:	f005 f969 	bl	8011f20 <atan2f>
 800cc4e:	ed87 0a07 	vstr	s0, [r7, #28]
    const float halfYawMinusHeading = 0.5f * (yaw - FusionDegreesToRadians(heading));
 800cc52:	ed97 0a00 	vldr	s0, [r7]
 800cc56:	f7fe fae5 	bl	800b224 <FusionDegreesToRadians>
 800cc5a:	eeb0 7a40 	vmov.f32	s14, s0
 800cc5e:	edd7 7a07 	vldr	s15, [r7, #28]
 800cc62:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800cc66:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800cc6a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800cc6e:	edc7 7a06 	vstr	s15, [r7, #24]
    const FusionQuaternion rotation = {.element = {
            .w = cosf(halfYawMinusHeading),
 800cc72:	ed97 0a06 	vldr	s0, [r7, #24]
 800cc76:	f005 f82d 	bl	8011cd4 <cosf>
 800cc7a:	eef0 7a40 	vmov.f32	s15, s0
    const FusionQuaternion rotation = {.element = {
 800cc7e:	edc7 7a02 	vstr	s15, [r7, #8]
 800cc82:	f04f 0300 	mov.w	r3, #0
 800cc86:	60fb      	str	r3, [r7, #12]
 800cc88:	f04f 0300 	mov.w	r3, #0
 800cc8c:	613b      	str	r3, [r7, #16]
            .x = 0.0f,
            .y = 0.0f,
            .z = -1.0f * sinf(halfYawMinusHeading),
 800cc8e:	ed97 0a06 	vldr	s0, [r7, #24]
 800cc92:	f005 f863 	bl	8011d5c <sinf>
 800cc96:	eef0 7a40 	vmov.f32	s15, s0
 800cc9a:	eef1 7a67 	vneg.f32	s15, s15
    const FusionQuaternion rotation = {.element = {
 800cc9e:	edc7 7a05 	vstr	s15, [r7, #20]
    }};
    ahrs->quaternion = FusionQuaternionMultiply(rotation, ahrs->quaternion);
 800cca2:	687c      	ldr	r4, [r7, #4]
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	ed93 4a06 	vldr	s8, [r3, #24]
 800ccaa:	edd3 4a07 	vldr	s9, [r3, #28]
 800ccae:	ed93 5a08 	vldr	s10, [r3, #32]
 800ccb2:	edd3 5a09 	vldr	s11, [r3, #36]	; 0x24
 800ccb6:	ed97 6a02 	vldr	s12, [r7, #8]
 800ccba:	edd7 6a03 	vldr	s13, [r7, #12]
 800ccbe:	ed97 7a04 	vldr	s14, [r7, #16]
 800ccc2:	edd7 7a05 	vldr	s15, [r7, #20]
 800ccc6:	eeb0 2a44 	vmov.f32	s4, s8
 800ccca:	eef0 2a64 	vmov.f32	s5, s9
 800ccce:	eeb0 3a45 	vmov.f32	s6, s10
 800ccd2:	eef0 3a65 	vmov.f32	s7, s11
 800ccd6:	eeb0 0a46 	vmov.f32	s0, s12
 800ccda:	eef0 0a66 	vmov.f32	s1, s13
 800ccde:	eeb0 1a47 	vmov.f32	s2, s14
 800cce2:	eef0 1a67 	vmov.f32	s3, s15
 800cce6:	f7fe fdcc 	bl	800b882 <FusionQuaternionMultiply>
 800ccea:	eeb0 6a40 	vmov.f32	s12, s0
 800ccee:	eef0 6a60 	vmov.f32	s13, s1
 800ccf2:	eeb0 7a41 	vmov.f32	s14, s2
 800ccf6:	eef0 7a61 	vmov.f32	s15, s3
 800ccfa:	ed84 6a06 	vstr	s12, [r4, #24]
 800ccfe:	edc4 6a07 	vstr	s13, [r4, #28]
 800cd02:	ed84 7a08 	vstr	s14, [r4, #32]
 800cd06:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
#undef Q
}
 800cd0a:	bf00      	nop
 800cd0c:	3724      	adds	r7, #36	; 0x24
 800cd0e:	46bd      	mov	sp, r7
 800cd10:	bd90      	pop	{r4, r7, pc}

0800cd12 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800cd12:	b480      	push	{r7}
 800cd14:	b085      	sub	sp, #20
 800cd16:	af00      	add	r7, sp, #0
 800cd18:	4603      	mov	r3, r0
 800cd1a:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800cd1c:	2300      	movs	r3, #0
 800cd1e:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800cd20:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800cd24:	2b84      	cmp	r3, #132	; 0x84
 800cd26:	d005      	beq.n	800cd34 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800cd28:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800cd2c:	68fb      	ldr	r3, [r7, #12]
 800cd2e:	4413      	add	r3, r2
 800cd30:	3303      	adds	r3, #3
 800cd32:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800cd34:	68fb      	ldr	r3, [r7, #12]
}
 800cd36:	4618      	mov	r0, r3
 800cd38:	3714      	adds	r7, #20
 800cd3a:	46bd      	mov	sp, r7
 800cd3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd40:	4770      	bx	lr

0800cd42 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800cd42:	b580      	push	{r7, lr}
 800cd44:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800cd46:	f000 ffb1 	bl	800dcac <vTaskStartScheduler>
  
  return osOK;
 800cd4a:	2300      	movs	r3, #0
}
 800cd4c:	4618      	mov	r0, r3
 800cd4e:	bd80      	pop	{r7, pc}

0800cd50 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800cd50:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cd52:	b089      	sub	sp, #36	; 0x24
 800cd54:	af04      	add	r7, sp, #16
 800cd56:	6078      	str	r0, [r7, #4]
 800cd58:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	695b      	ldr	r3, [r3, #20]
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d020      	beq.n	800cda4 <osThreadCreate+0x54>
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	699b      	ldr	r3, [r3, #24]
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	d01c      	beq.n	800cda4 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	685c      	ldr	r4, [r3, #4]
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	681d      	ldr	r5, [r3, #0]
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	691e      	ldr	r6, [r3, #16]
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800cd7c:	4618      	mov	r0, r3
 800cd7e:	f7ff ffc8 	bl	800cd12 <makeFreeRtosPriority>
 800cd82:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	695b      	ldr	r3, [r3, #20]
 800cd88:	687a      	ldr	r2, [r7, #4]
 800cd8a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800cd8c:	9202      	str	r2, [sp, #8]
 800cd8e:	9301      	str	r3, [sp, #4]
 800cd90:	9100      	str	r1, [sp, #0]
 800cd92:	683b      	ldr	r3, [r7, #0]
 800cd94:	4632      	mov	r2, r6
 800cd96:	4629      	mov	r1, r5
 800cd98:	4620      	mov	r0, r4
 800cd9a:	f000 fc9d 	bl	800d6d8 <xTaskCreateStatic>
 800cd9e:	4603      	mov	r3, r0
 800cda0:	60fb      	str	r3, [r7, #12]
 800cda2:	e01c      	b.n	800cdde <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	685c      	ldr	r4, [r3, #4]
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800cdb0:	b29e      	uxth	r6, r3
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800cdb8:	4618      	mov	r0, r3
 800cdba:	f7ff ffaa 	bl	800cd12 <makeFreeRtosPriority>
 800cdbe:	4602      	mov	r2, r0
 800cdc0:	f107 030c 	add.w	r3, r7, #12
 800cdc4:	9301      	str	r3, [sp, #4]
 800cdc6:	9200      	str	r2, [sp, #0]
 800cdc8:	683b      	ldr	r3, [r7, #0]
 800cdca:	4632      	mov	r2, r6
 800cdcc:	4629      	mov	r1, r5
 800cdce:	4620      	mov	r0, r4
 800cdd0:	f000 fcdf 	bl	800d792 <xTaskCreate>
 800cdd4:	4603      	mov	r3, r0
 800cdd6:	2b01      	cmp	r3, #1
 800cdd8:	d001      	beq.n	800cdde <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800cdda:	2300      	movs	r3, #0
 800cddc:	e000      	b.n	800cde0 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800cdde:	68fb      	ldr	r3, [r7, #12]
}
 800cde0:	4618      	mov	r0, r3
 800cde2:	3714      	adds	r7, #20
 800cde4:	46bd      	mov	sp, r7
 800cde6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800cde8 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800cde8:	b580      	push	{r7, lr}
 800cdea:	b084      	sub	sp, #16
 800cdec:	af00      	add	r7, sp, #0
 800cdee:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800cdf4:	68fb      	ldr	r3, [r7, #12]
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d001      	beq.n	800cdfe <osDelay+0x16>
 800cdfa:	68fb      	ldr	r3, [r7, #12]
 800cdfc:	e000      	b.n	800ce00 <osDelay+0x18>
 800cdfe:	2301      	movs	r3, #1
 800ce00:	4618      	mov	r0, r3
 800ce02:	f000 fdfd 	bl	800da00 <vTaskDelay>
  
  return osOK;
 800ce06:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800ce08:	4618      	mov	r0, r3
 800ce0a:	3710      	adds	r7, #16
 800ce0c:	46bd      	mov	sp, r7
 800ce0e:	bd80      	pop	{r7, pc}

0800ce10 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800ce10:	b480      	push	{r7}
 800ce12:	b083      	sub	sp, #12
 800ce14:	af00      	add	r7, sp, #0
 800ce16:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	f103 0208 	add.w	r2, r3, #8
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	f04f 32ff 	mov.w	r2, #4294967295
 800ce28:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	f103 0208 	add.w	r2, r3, #8
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	f103 0208 	add.w	r2, r3, #8
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	2200      	movs	r2, #0
 800ce42:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800ce44:	bf00      	nop
 800ce46:	370c      	adds	r7, #12
 800ce48:	46bd      	mov	sp, r7
 800ce4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce4e:	4770      	bx	lr

0800ce50 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800ce50:	b480      	push	{r7}
 800ce52:	b083      	sub	sp, #12
 800ce54:	af00      	add	r7, sp, #0
 800ce56:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	2200      	movs	r2, #0
 800ce5c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800ce5e:	bf00      	nop
 800ce60:	370c      	adds	r7, #12
 800ce62:	46bd      	mov	sp, r7
 800ce64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce68:	4770      	bx	lr

0800ce6a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ce6a:	b480      	push	{r7}
 800ce6c:	b085      	sub	sp, #20
 800ce6e:	af00      	add	r7, sp, #0
 800ce70:	6078      	str	r0, [r7, #4]
 800ce72:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	685b      	ldr	r3, [r3, #4]
 800ce78:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800ce7a:	683b      	ldr	r3, [r7, #0]
 800ce7c:	68fa      	ldr	r2, [r7, #12]
 800ce7e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ce80:	68fb      	ldr	r3, [r7, #12]
 800ce82:	689a      	ldr	r2, [r3, #8]
 800ce84:	683b      	ldr	r3, [r7, #0]
 800ce86:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ce88:	68fb      	ldr	r3, [r7, #12]
 800ce8a:	689b      	ldr	r3, [r3, #8]
 800ce8c:	683a      	ldr	r2, [r7, #0]
 800ce8e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ce90:	68fb      	ldr	r3, [r7, #12]
 800ce92:	683a      	ldr	r2, [r7, #0]
 800ce94:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800ce96:	683b      	ldr	r3, [r7, #0]
 800ce98:	687a      	ldr	r2, [r7, #4]
 800ce9a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	1c5a      	adds	r2, r3, #1
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	601a      	str	r2, [r3, #0]
}
 800cea6:	bf00      	nop
 800cea8:	3714      	adds	r7, #20
 800ceaa:	46bd      	mov	sp, r7
 800ceac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceb0:	4770      	bx	lr

0800ceb2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ceb2:	b480      	push	{r7}
 800ceb4:	b085      	sub	sp, #20
 800ceb6:	af00      	add	r7, sp, #0
 800ceb8:	6078      	str	r0, [r7, #4]
 800ceba:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800cebc:	683b      	ldr	r3, [r7, #0]
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800cec2:	68bb      	ldr	r3, [r7, #8]
 800cec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cec8:	d103      	bne.n	800ced2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	691b      	ldr	r3, [r3, #16]
 800cece:	60fb      	str	r3, [r7, #12]
 800ced0:	e00c      	b.n	800ceec <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	3308      	adds	r3, #8
 800ced6:	60fb      	str	r3, [r7, #12]
 800ced8:	e002      	b.n	800cee0 <vListInsert+0x2e>
 800ceda:	68fb      	ldr	r3, [r7, #12]
 800cedc:	685b      	ldr	r3, [r3, #4]
 800cede:	60fb      	str	r3, [r7, #12]
 800cee0:	68fb      	ldr	r3, [r7, #12]
 800cee2:	685b      	ldr	r3, [r3, #4]
 800cee4:	681b      	ldr	r3, [r3, #0]
 800cee6:	68ba      	ldr	r2, [r7, #8]
 800cee8:	429a      	cmp	r2, r3
 800ceea:	d2f6      	bcs.n	800ceda <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ceec:	68fb      	ldr	r3, [r7, #12]
 800ceee:	685a      	ldr	r2, [r3, #4]
 800cef0:	683b      	ldr	r3, [r7, #0]
 800cef2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800cef4:	683b      	ldr	r3, [r7, #0]
 800cef6:	685b      	ldr	r3, [r3, #4]
 800cef8:	683a      	ldr	r2, [r7, #0]
 800cefa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800cefc:	683b      	ldr	r3, [r7, #0]
 800cefe:	68fa      	ldr	r2, [r7, #12]
 800cf00:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800cf02:	68fb      	ldr	r3, [r7, #12]
 800cf04:	683a      	ldr	r2, [r7, #0]
 800cf06:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800cf08:	683b      	ldr	r3, [r7, #0]
 800cf0a:	687a      	ldr	r2, [r7, #4]
 800cf0c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	681b      	ldr	r3, [r3, #0]
 800cf12:	1c5a      	adds	r2, r3, #1
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	601a      	str	r2, [r3, #0]
}
 800cf18:	bf00      	nop
 800cf1a:	3714      	adds	r7, #20
 800cf1c:	46bd      	mov	sp, r7
 800cf1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf22:	4770      	bx	lr

0800cf24 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800cf24:	b480      	push	{r7}
 800cf26:	b085      	sub	sp, #20
 800cf28:	af00      	add	r7, sp, #0
 800cf2a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	691b      	ldr	r3, [r3, #16]
 800cf30:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	685b      	ldr	r3, [r3, #4]
 800cf36:	687a      	ldr	r2, [r7, #4]
 800cf38:	6892      	ldr	r2, [r2, #8]
 800cf3a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	689b      	ldr	r3, [r3, #8]
 800cf40:	687a      	ldr	r2, [r7, #4]
 800cf42:	6852      	ldr	r2, [r2, #4]
 800cf44:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800cf46:	68fb      	ldr	r3, [r7, #12]
 800cf48:	685b      	ldr	r3, [r3, #4]
 800cf4a:	687a      	ldr	r2, [r7, #4]
 800cf4c:	429a      	cmp	r2, r3
 800cf4e:	d103      	bne.n	800cf58 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	689a      	ldr	r2, [r3, #8]
 800cf54:	68fb      	ldr	r3, [r7, #12]
 800cf56:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	2200      	movs	r2, #0
 800cf5c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	1e5a      	subs	r2, r3, #1
 800cf64:	68fb      	ldr	r3, [r7, #12]
 800cf66:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800cf68:	68fb      	ldr	r3, [r7, #12]
 800cf6a:	681b      	ldr	r3, [r3, #0]
}
 800cf6c:	4618      	mov	r0, r3
 800cf6e:	3714      	adds	r7, #20
 800cf70:	46bd      	mov	sp, r7
 800cf72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf76:	4770      	bx	lr

0800cf78 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800cf78:	b580      	push	{r7, lr}
 800cf7a:	b084      	sub	sp, #16
 800cf7c:	af00      	add	r7, sp, #0
 800cf7e:	6078      	str	r0, [r7, #4]
 800cf80:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800cf86:	68fb      	ldr	r3, [r7, #12]
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	d10a      	bne.n	800cfa2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800cf8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf90:	f383 8811 	msr	BASEPRI, r3
 800cf94:	f3bf 8f6f 	isb	sy
 800cf98:	f3bf 8f4f 	dsb	sy
 800cf9c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800cf9e:	bf00      	nop
 800cfa0:	e7fe      	b.n	800cfa0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800cfa2:	f001 fcb7 	bl	800e914 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cfa6:	68fb      	ldr	r3, [r7, #12]
 800cfa8:	681a      	ldr	r2, [r3, #0]
 800cfaa:	68fb      	ldr	r3, [r7, #12]
 800cfac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cfae:	68f9      	ldr	r1, [r7, #12]
 800cfb0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800cfb2:	fb01 f303 	mul.w	r3, r1, r3
 800cfb6:	441a      	add	r2, r3
 800cfb8:	68fb      	ldr	r3, [r7, #12]
 800cfba:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800cfbc:	68fb      	ldr	r3, [r7, #12]
 800cfbe:	2200      	movs	r2, #0
 800cfc0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800cfc2:	68fb      	ldr	r3, [r7, #12]
 800cfc4:	681a      	ldr	r2, [r3, #0]
 800cfc6:	68fb      	ldr	r3, [r7, #12]
 800cfc8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cfca:	68fb      	ldr	r3, [r7, #12]
 800cfcc:	681a      	ldr	r2, [r3, #0]
 800cfce:	68fb      	ldr	r3, [r7, #12]
 800cfd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cfd2:	3b01      	subs	r3, #1
 800cfd4:	68f9      	ldr	r1, [r7, #12]
 800cfd6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800cfd8:	fb01 f303 	mul.w	r3, r1, r3
 800cfdc:	441a      	add	r2, r3
 800cfde:	68fb      	ldr	r3, [r7, #12]
 800cfe0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800cfe2:	68fb      	ldr	r3, [r7, #12]
 800cfe4:	22ff      	movs	r2, #255	; 0xff
 800cfe6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800cfea:	68fb      	ldr	r3, [r7, #12]
 800cfec:	22ff      	movs	r2, #255	; 0xff
 800cfee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800cff2:	683b      	ldr	r3, [r7, #0]
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	d114      	bne.n	800d022 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cff8:	68fb      	ldr	r3, [r7, #12]
 800cffa:	691b      	ldr	r3, [r3, #16]
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d01a      	beq.n	800d036 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d000:	68fb      	ldr	r3, [r7, #12]
 800d002:	3310      	adds	r3, #16
 800d004:	4618      	mov	r0, r3
 800d006:	f001 f893 	bl	800e130 <xTaskRemoveFromEventList>
 800d00a:	4603      	mov	r3, r0
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	d012      	beq.n	800d036 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800d010:	4b0c      	ldr	r3, [pc, #48]	; (800d044 <xQueueGenericReset+0xcc>)
 800d012:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d016:	601a      	str	r2, [r3, #0]
 800d018:	f3bf 8f4f 	dsb	sy
 800d01c:	f3bf 8f6f 	isb	sy
 800d020:	e009      	b.n	800d036 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800d022:	68fb      	ldr	r3, [r7, #12]
 800d024:	3310      	adds	r3, #16
 800d026:	4618      	mov	r0, r3
 800d028:	f7ff fef2 	bl	800ce10 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800d02c:	68fb      	ldr	r3, [r7, #12]
 800d02e:	3324      	adds	r3, #36	; 0x24
 800d030:	4618      	mov	r0, r3
 800d032:	f7ff feed 	bl	800ce10 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800d036:	f001 fc9d 	bl	800e974 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800d03a:	2301      	movs	r3, #1
}
 800d03c:	4618      	mov	r0, r3
 800d03e:	3710      	adds	r7, #16
 800d040:	46bd      	mov	sp, r7
 800d042:	bd80      	pop	{r7, pc}
 800d044:	e000ed04 	.word	0xe000ed04

0800d048 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800d048:	b580      	push	{r7, lr}
 800d04a:	b08a      	sub	sp, #40	; 0x28
 800d04c:	af02      	add	r7, sp, #8
 800d04e:	60f8      	str	r0, [r7, #12]
 800d050:	60b9      	str	r1, [r7, #8]
 800d052:	4613      	mov	r3, r2
 800d054:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d056:	68fb      	ldr	r3, [r7, #12]
 800d058:	2b00      	cmp	r3, #0
 800d05a:	d10a      	bne.n	800d072 <xQueueGenericCreate+0x2a>
	__asm volatile
 800d05c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d060:	f383 8811 	msr	BASEPRI, r3
 800d064:	f3bf 8f6f 	isb	sy
 800d068:	f3bf 8f4f 	dsb	sy
 800d06c:	613b      	str	r3, [r7, #16]
}
 800d06e:	bf00      	nop
 800d070:	e7fe      	b.n	800d070 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d072:	68fb      	ldr	r3, [r7, #12]
 800d074:	68ba      	ldr	r2, [r7, #8]
 800d076:	fb02 f303 	mul.w	r3, r2, r3
 800d07a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800d07c:	69fb      	ldr	r3, [r7, #28]
 800d07e:	3348      	adds	r3, #72	; 0x48
 800d080:	4618      	mov	r0, r3
 800d082:	f001 fd29 	bl	800ead8 <pvPortMalloc>
 800d086:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800d088:	69bb      	ldr	r3, [r7, #24]
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d011      	beq.n	800d0b2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800d08e:	69bb      	ldr	r3, [r7, #24]
 800d090:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d092:	697b      	ldr	r3, [r7, #20]
 800d094:	3348      	adds	r3, #72	; 0x48
 800d096:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800d098:	69bb      	ldr	r3, [r7, #24]
 800d09a:	2200      	movs	r2, #0
 800d09c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d0a0:	79fa      	ldrb	r2, [r7, #7]
 800d0a2:	69bb      	ldr	r3, [r7, #24]
 800d0a4:	9300      	str	r3, [sp, #0]
 800d0a6:	4613      	mov	r3, r2
 800d0a8:	697a      	ldr	r2, [r7, #20]
 800d0aa:	68b9      	ldr	r1, [r7, #8]
 800d0ac:	68f8      	ldr	r0, [r7, #12]
 800d0ae:	f000 f805 	bl	800d0bc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d0b2:	69bb      	ldr	r3, [r7, #24]
	}
 800d0b4:	4618      	mov	r0, r3
 800d0b6:	3720      	adds	r7, #32
 800d0b8:	46bd      	mov	sp, r7
 800d0ba:	bd80      	pop	{r7, pc}

0800d0bc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800d0bc:	b580      	push	{r7, lr}
 800d0be:	b084      	sub	sp, #16
 800d0c0:	af00      	add	r7, sp, #0
 800d0c2:	60f8      	str	r0, [r7, #12]
 800d0c4:	60b9      	str	r1, [r7, #8]
 800d0c6:	607a      	str	r2, [r7, #4]
 800d0c8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800d0ca:	68bb      	ldr	r3, [r7, #8]
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	d103      	bne.n	800d0d8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d0d0:	69bb      	ldr	r3, [r7, #24]
 800d0d2:	69ba      	ldr	r2, [r7, #24]
 800d0d4:	601a      	str	r2, [r3, #0]
 800d0d6:	e002      	b.n	800d0de <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800d0d8:	69bb      	ldr	r3, [r7, #24]
 800d0da:	687a      	ldr	r2, [r7, #4]
 800d0dc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800d0de:	69bb      	ldr	r3, [r7, #24]
 800d0e0:	68fa      	ldr	r2, [r7, #12]
 800d0e2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800d0e4:	69bb      	ldr	r3, [r7, #24]
 800d0e6:	68ba      	ldr	r2, [r7, #8]
 800d0e8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d0ea:	2101      	movs	r1, #1
 800d0ec:	69b8      	ldr	r0, [r7, #24]
 800d0ee:	f7ff ff43 	bl	800cf78 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800d0f2:	bf00      	nop
 800d0f4:	3710      	adds	r7, #16
 800d0f6:	46bd      	mov	sp, r7
 800d0f8:	bd80      	pop	{r7, pc}
	...

0800d0fc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800d0fc:	b580      	push	{r7, lr}
 800d0fe:	b08e      	sub	sp, #56	; 0x38
 800d100:	af00      	add	r7, sp, #0
 800d102:	60f8      	str	r0, [r7, #12]
 800d104:	60b9      	str	r1, [r7, #8]
 800d106:	607a      	str	r2, [r7, #4]
 800d108:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d10a:	2300      	movs	r3, #0
 800d10c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d10e:	68fb      	ldr	r3, [r7, #12]
 800d110:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d114:	2b00      	cmp	r3, #0
 800d116:	d10a      	bne.n	800d12e <xQueueGenericSend+0x32>
	__asm volatile
 800d118:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d11c:	f383 8811 	msr	BASEPRI, r3
 800d120:	f3bf 8f6f 	isb	sy
 800d124:	f3bf 8f4f 	dsb	sy
 800d128:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d12a:	bf00      	nop
 800d12c:	e7fe      	b.n	800d12c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d12e:	68bb      	ldr	r3, [r7, #8]
 800d130:	2b00      	cmp	r3, #0
 800d132:	d103      	bne.n	800d13c <xQueueGenericSend+0x40>
 800d134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d138:	2b00      	cmp	r3, #0
 800d13a:	d101      	bne.n	800d140 <xQueueGenericSend+0x44>
 800d13c:	2301      	movs	r3, #1
 800d13e:	e000      	b.n	800d142 <xQueueGenericSend+0x46>
 800d140:	2300      	movs	r3, #0
 800d142:	2b00      	cmp	r3, #0
 800d144:	d10a      	bne.n	800d15c <xQueueGenericSend+0x60>
	__asm volatile
 800d146:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d14a:	f383 8811 	msr	BASEPRI, r3
 800d14e:	f3bf 8f6f 	isb	sy
 800d152:	f3bf 8f4f 	dsb	sy
 800d156:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d158:	bf00      	nop
 800d15a:	e7fe      	b.n	800d15a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d15c:	683b      	ldr	r3, [r7, #0]
 800d15e:	2b02      	cmp	r3, #2
 800d160:	d103      	bne.n	800d16a <xQueueGenericSend+0x6e>
 800d162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d164:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d166:	2b01      	cmp	r3, #1
 800d168:	d101      	bne.n	800d16e <xQueueGenericSend+0x72>
 800d16a:	2301      	movs	r3, #1
 800d16c:	e000      	b.n	800d170 <xQueueGenericSend+0x74>
 800d16e:	2300      	movs	r3, #0
 800d170:	2b00      	cmp	r3, #0
 800d172:	d10a      	bne.n	800d18a <xQueueGenericSend+0x8e>
	__asm volatile
 800d174:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d178:	f383 8811 	msr	BASEPRI, r3
 800d17c:	f3bf 8f6f 	isb	sy
 800d180:	f3bf 8f4f 	dsb	sy
 800d184:	623b      	str	r3, [r7, #32]
}
 800d186:	bf00      	nop
 800d188:	e7fe      	b.n	800d188 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d18a:	f001 f98d 	bl	800e4a8 <xTaskGetSchedulerState>
 800d18e:	4603      	mov	r3, r0
 800d190:	2b00      	cmp	r3, #0
 800d192:	d102      	bne.n	800d19a <xQueueGenericSend+0x9e>
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	2b00      	cmp	r3, #0
 800d198:	d101      	bne.n	800d19e <xQueueGenericSend+0xa2>
 800d19a:	2301      	movs	r3, #1
 800d19c:	e000      	b.n	800d1a0 <xQueueGenericSend+0xa4>
 800d19e:	2300      	movs	r3, #0
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	d10a      	bne.n	800d1ba <xQueueGenericSend+0xbe>
	__asm volatile
 800d1a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1a8:	f383 8811 	msr	BASEPRI, r3
 800d1ac:	f3bf 8f6f 	isb	sy
 800d1b0:	f3bf 8f4f 	dsb	sy
 800d1b4:	61fb      	str	r3, [r7, #28]
}
 800d1b6:	bf00      	nop
 800d1b8:	e7fe      	b.n	800d1b8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d1ba:	f001 fbab 	bl	800e914 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d1be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d1c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d1c6:	429a      	cmp	r2, r3
 800d1c8:	d302      	bcc.n	800d1d0 <xQueueGenericSend+0xd4>
 800d1ca:	683b      	ldr	r3, [r7, #0]
 800d1cc:	2b02      	cmp	r3, #2
 800d1ce:	d129      	bne.n	800d224 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d1d0:	683a      	ldr	r2, [r7, #0]
 800d1d2:	68b9      	ldr	r1, [r7, #8]
 800d1d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d1d6:	f000 f96f 	bl	800d4b8 <prvCopyDataToQueue>
 800d1da:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d1dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	d010      	beq.n	800d206 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d1e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1e6:	3324      	adds	r3, #36	; 0x24
 800d1e8:	4618      	mov	r0, r3
 800d1ea:	f000 ffa1 	bl	800e130 <xTaskRemoveFromEventList>
 800d1ee:	4603      	mov	r3, r0
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	d013      	beq.n	800d21c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800d1f4:	4b3f      	ldr	r3, [pc, #252]	; (800d2f4 <xQueueGenericSend+0x1f8>)
 800d1f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d1fa:	601a      	str	r2, [r3, #0]
 800d1fc:	f3bf 8f4f 	dsb	sy
 800d200:	f3bf 8f6f 	isb	sy
 800d204:	e00a      	b.n	800d21c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800d206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d208:	2b00      	cmp	r3, #0
 800d20a:	d007      	beq.n	800d21c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800d20c:	4b39      	ldr	r3, [pc, #228]	; (800d2f4 <xQueueGenericSend+0x1f8>)
 800d20e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d212:	601a      	str	r2, [r3, #0]
 800d214:	f3bf 8f4f 	dsb	sy
 800d218:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800d21c:	f001 fbaa 	bl	800e974 <vPortExitCritical>
				return pdPASS;
 800d220:	2301      	movs	r3, #1
 800d222:	e063      	b.n	800d2ec <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	2b00      	cmp	r3, #0
 800d228:	d103      	bne.n	800d232 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d22a:	f001 fba3 	bl	800e974 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800d22e:	2300      	movs	r3, #0
 800d230:	e05c      	b.n	800d2ec <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d232:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d234:	2b00      	cmp	r3, #0
 800d236:	d106      	bne.n	800d246 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d238:	f107 0314 	add.w	r3, r7, #20
 800d23c:	4618      	mov	r0, r3
 800d23e:	f000 ffd9 	bl	800e1f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d242:	2301      	movs	r3, #1
 800d244:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d246:	f001 fb95 	bl	800e974 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d24a:	f000 fd8f 	bl	800dd6c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d24e:	f001 fb61 	bl	800e914 <vPortEnterCritical>
 800d252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d254:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d258:	b25b      	sxtb	r3, r3
 800d25a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d25e:	d103      	bne.n	800d268 <xQueueGenericSend+0x16c>
 800d260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d262:	2200      	movs	r2, #0
 800d264:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d26a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d26e:	b25b      	sxtb	r3, r3
 800d270:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d274:	d103      	bne.n	800d27e <xQueueGenericSend+0x182>
 800d276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d278:	2200      	movs	r2, #0
 800d27a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d27e:	f001 fb79 	bl	800e974 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d282:	1d3a      	adds	r2, r7, #4
 800d284:	f107 0314 	add.w	r3, r7, #20
 800d288:	4611      	mov	r1, r2
 800d28a:	4618      	mov	r0, r3
 800d28c:	f000 ffc8 	bl	800e220 <xTaskCheckForTimeOut>
 800d290:	4603      	mov	r3, r0
 800d292:	2b00      	cmp	r3, #0
 800d294:	d124      	bne.n	800d2e0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d296:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d298:	f000 fa06 	bl	800d6a8 <prvIsQueueFull>
 800d29c:	4603      	mov	r3, r0
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	d018      	beq.n	800d2d4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d2a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2a4:	3310      	adds	r3, #16
 800d2a6:	687a      	ldr	r2, [r7, #4]
 800d2a8:	4611      	mov	r1, r2
 800d2aa:	4618      	mov	r0, r3
 800d2ac:	f000 ff1c 	bl	800e0e8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800d2b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d2b2:	f000 f991 	bl	800d5d8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800d2b6:	f000 fd67 	bl	800dd88 <xTaskResumeAll>
 800d2ba:	4603      	mov	r3, r0
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	f47f af7c 	bne.w	800d1ba <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800d2c2:	4b0c      	ldr	r3, [pc, #48]	; (800d2f4 <xQueueGenericSend+0x1f8>)
 800d2c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d2c8:	601a      	str	r2, [r3, #0]
 800d2ca:	f3bf 8f4f 	dsb	sy
 800d2ce:	f3bf 8f6f 	isb	sy
 800d2d2:	e772      	b.n	800d1ba <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d2d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d2d6:	f000 f97f 	bl	800d5d8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d2da:	f000 fd55 	bl	800dd88 <xTaskResumeAll>
 800d2de:	e76c      	b.n	800d1ba <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800d2e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d2e2:	f000 f979 	bl	800d5d8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d2e6:	f000 fd4f 	bl	800dd88 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800d2ea:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800d2ec:	4618      	mov	r0, r3
 800d2ee:	3738      	adds	r7, #56	; 0x38
 800d2f0:	46bd      	mov	sp, r7
 800d2f2:	bd80      	pop	{r7, pc}
 800d2f4:	e000ed04 	.word	0xe000ed04

0800d2f8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d2f8:	b580      	push	{r7, lr}
 800d2fa:	b08c      	sub	sp, #48	; 0x30
 800d2fc:	af00      	add	r7, sp, #0
 800d2fe:	60f8      	str	r0, [r7, #12]
 800d300:	60b9      	str	r1, [r7, #8]
 800d302:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d304:	2300      	movs	r3, #0
 800d306:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d308:	68fb      	ldr	r3, [r7, #12]
 800d30a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d30c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d10a      	bne.n	800d328 <xQueueReceive+0x30>
	__asm volatile
 800d312:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d316:	f383 8811 	msr	BASEPRI, r3
 800d31a:	f3bf 8f6f 	isb	sy
 800d31e:	f3bf 8f4f 	dsb	sy
 800d322:	623b      	str	r3, [r7, #32]
}
 800d324:	bf00      	nop
 800d326:	e7fe      	b.n	800d326 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d328:	68bb      	ldr	r3, [r7, #8]
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	d103      	bne.n	800d336 <xQueueReceive+0x3e>
 800d32e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d332:	2b00      	cmp	r3, #0
 800d334:	d101      	bne.n	800d33a <xQueueReceive+0x42>
 800d336:	2301      	movs	r3, #1
 800d338:	e000      	b.n	800d33c <xQueueReceive+0x44>
 800d33a:	2300      	movs	r3, #0
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d10a      	bne.n	800d356 <xQueueReceive+0x5e>
	__asm volatile
 800d340:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d344:	f383 8811 	msr	BASEPRI, r3
 800d348:	f3bf 8f6f 	isb	sy
 800d34c:	f3bf 8f4f 	dsb	sy
 800d350:	61fb      	str	r3, [r7, #28]
}
 800d352:	bf00      	nop
 800d354:	e7fe      	b.n	800d354 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d356:	f001 f8a7 	bl	800e4a8 <xTaskGetSchedulerState>
 800d35a:	4603      	mov	r3, r0
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	d102      	bne.n	800d366 <xQueueReceive+0x6e>
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	2b00      	cmp	r3, #0
 800d364:	d101      	bne.n	800d36a <xQueueReceive+0x72>
 800d366:	2301      	movs	r3, #1
 800d368:	e000      	b.n	800d36c <xQueueReceive+0x74>
 800d36a:	2300      	movs	r3, #0
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d10a      	bne.n	800d386 <xQueueReceive+0x8e>
	__asm volatile
 800d370:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d374:	f383 8811 	msr	BASEPRI, r3
 800d378:	f3bf 8f6f 	isb	sy
 800d37c:	f3bf 8f4f 	dsb	sy
 800d380:	61bb      	str	r3, [r7, #24]
}
 800d382:	bf00      	nop
 800d384:	e7fe      	b.n	800d384 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d386:	f001 fac5 	bl	800e914 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d38a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d38c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d38e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d392:	2b00      	cmp	r3, #0
 800d394:	d01f      	beq.n	800d3d6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d396:	68b9      	ldr	r1, [r7, #8]
 800d398:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d39a:	f000 f8f7 	bl	800d58c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d39e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3a0:	1e5a      	subs	r2, r3, #1
 800d3a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3a4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d3a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3a8:	691b      	ldr	r3, [r3, #16]
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	d00f      	beq.n	800d3ce <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d3ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3b0:	3310      	adds	r3, #16
 800d3b2:	4618      	mov	r0, r3
 800d3b4:	f000 febc 	bl	800e130 <xTaskRemoveFromEventList>
 800d3b8:	4603      	mov	r3, r0
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	d007      	beq.n	800d3ce <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d3be:	4b3d      	ldr	r3, [pc, #244]	; (800d4b4 <xQueueReceive+0x1bc>)
 800d3c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d3c4:	601a      	str	r2, [r3, #0]
 800d3c6:	f3bf 8f4f 	dsb	sy
 800d3ca:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d3ce:	f001 fad1 	bl	800e974 <vPortExitCritical>
				return pdPASS;
 800d3d2:	2301      	movs	r3, #1
 800d3d4:	e069      	b.n	800d4aa <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	d103      	bne.n	800d3e4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d3dc:	f001 faca 	bl	800e974 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d3e0:	2300      	movs	r3, #0
 800d3e2:	e062      	b.n	800d4aa <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d3e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	d106      	bne.n	800d3f8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d3ea:	f107 0310 	add.w	r3, r7, #16
 800d3ee:	4618      	mov	r0, r3
 800d3f0:	f000 ff00 	bl	800e1f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d3f4:	2301      	movs	r3, #1
 800d3f6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d3f8:	f001 fabc 	bl	800e974 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d3fc:	f000 fcb6 	bl	800dd6c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d400:	f001 fa88 	bl	800e914 <vPortEnterCritical>
 800d404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d406:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d40a:	b25b      	sxtb	r3, r3
 800d40c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d410:	d103      	bne.n	800d41a <xQueueReceive+0x122>
 800d412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d414:	2200      	movs	r2, #0
 800d416:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d41a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d41c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d420:	b25b      	sxtb	r3, r3
 800d422:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d426:	d103      	bne.n	800d430 <xQueueReceive+0x138>
 800d428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d42a:	2200      	movs	r2, #0
 800d42c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d430:	f001 faa0 	bl	800e974 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d434:	1d3a      	adds	r2, r7, #4
 800d436:	f107 0310 	add.w	r3, r7, #16
 800d43a:	4611      	mov	r1, r2
 800d43c:	4618      	mov	r0, r3
 800d43e:	f000 feef 	bl	800e220 <xTaskCheckForTimeOut>
 800d442:	4603      	mov	r3, r0
 800d444:	2b00      	cmp	r3, #0
 800d446:	d123      	bne.n	800d490 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d448:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d44a:	f000 f917 	bl	800d67c <prvIsQueueEmpty>
 800d44e:	4603      	mov	r3, r0
 800d450:	2b00      	cmp	r3, #0
 800d452:	d017      	beq.n	800d484 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d456:	3324      	adds	r3, #36	; 0x24
 800d458:	687a      	ldr	r2, [r7, #4]
 800d45a:	4611      	mov	r1, r2
 800d45c:	4618      	mov	r0, r3
 800d45e:	f000 fe43 	bl	800e0e8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d462:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d464:	f000 f8b8 	bl	800d5d8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d468:	f000 fc8e 	bl	800dd88 <xTaskResumeAll>
 800d46c:	4603      	mov	r3, r0
 800d46e:	2b00      	cmp	r3, #0
 800d470:	d189      	bne.n	800d386 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800d472:	4b10      	ldr	r3, [pc, #64]	; (800d4b4 <xQueueReceive+0x1bc>)
 800d474:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d478:	601a      	str	r2, [r3, #0]
 800d47a:	f3bf 8f4f 	dsb	sy
 800d47e:	f3bf 8f6f 	isb	sy
 800d482:	e780      	b.n	800d386 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d484:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d486:	f000 f8a7 	bl	800d5d8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d48a:	f000 fc7d 	bl	800dd88 <xTaskResumeAll>
 800d48e:	e77a      	b.n	800d386 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d490:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d492:	f000 f8a1 	bl	800d5d8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d496:	f000 fc77 	bl	800dd88 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d49a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d49c:	f000 f8ee 	bl	800d67c <prvIsQueueEmpty>
 800d4a0:	4603      	mov	r3, r0
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	f43f af6f 	beq.w	800d386 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d4a8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d4aa:	4618      	mov	r0, r3
 800d4ac:	3730      	adds	r7, #48	; 0x30
 800d4ae:	46bd      	mov	sp, r7
 800d4b0:	bd80      	pop	{r7, pc}
 800d4b2:	bf00      	nop
 800d4b4:	e000ed04 	.word	0xe000ed04

0800d4b8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d4b8:	b580      	push	{r7, lr}
 800d4ba:	b086      	sub	sp, #24
 800d4bc:	af00      	add	r7, sp, #0
 800d4be:	60f8      	str	r0, [r7, #12]
 800d4c0:	60b9      	str	r1, [r7, #8]
 800d4c2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d4c4:	2300      	movs	r3, #0
 800d4c6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d4c8:	68fb      	ldr	r3, [r7, #12]
 800d4ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4cc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d4ce:	68fb      	ldr	r3, [r7, #12]
 800d4d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	d10d      	bne.n	800d4f2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d4d6:	68fb      	ldr	r3, [r7, #12]
 800d4d8:	681b      	ldr	r3, [r3, #0]
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d14d      	bne.n	800d57a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d4de:	68fb      	ldr	r3, [r7, #12]
 800d4e0:	689b      	ldr	r3, [r3, #8]
 800d4e2:	4618      	mov	r0, r3
 800d4e4:	f000 fffe 	bl	800e4e4 <xTaskPriorityDisinherit>
 800d4e8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d4ea:	68fb      	ldr	r3, [r7, #12]
 800d4ec:	2200      	movs	r2, #0
 800d4ee:	609a      	str	r2, [r3, #8]
 800d4f0:	e043      	b.n	800d57a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d119      	bne.n	800d52c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d4f8:	68fb      	ldr	r3, [r7, #12]
 800d4fa:	6858      	ldr	r0, [r3, #4]
 800d4fc:	68fb      	ldr	r3, [r7, #12]
 800d4fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d500:	461a      	mov	r2, r3
 800d502:	68b9      	ldr	r1, [r7, #8]
 800d504:	f001 fcfc 	bl	800ef00 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d508:	68fb      	ldr	r3, [r7, #12]
 800d50a:	685a      	ldr	r2, [r3, #4]
 800d50c:	68fb      	ldr	r3, [r7, #12]
 800d50e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d510:	441a      	add	r2, r3
 800d512:	68fb      	ldr	r3, [r7, #12]
 800d514:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d516:	68fb      	ldr	r3, [r7, #12]
 800d518:	685a      	ldr	r2, [r3, #4]
 800d51a:	68fb      	ldr	r3, [r7, #12]
 800d51c:	689b      	ldr	r3, [r3, #8]
 800d51e:	429a      	cmp	r2, r3
 800d520:	d32b      	bcc.n	800d57a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d522:	68fb      	ldr	r3, [r7, #12]
 800d524:	681a      	ldr	r2, [r3, #0]
 800d526:	68fb      	ldr	r3, [r7, #12]
 800d528:	605a      	str	r2, [r3, #4]
 800d52a:	e026      	b.n	800d57a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d52c:	68fb      	ldr	r3, [r7, #12]
 800d52e:	68d8      	ldr	r0, [r3, #12]
 800d530:	68fb      	ldr	r3, [r7, #12]
 800d532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d534:	461a      	mov	r2, r3
 800d536:	68b9      	ldr	r1, [r7, #8]
 800d538:	f001 fce2 	bl	800ef00 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d53c:	68fb      	ldr	r3, [r7, #12]
 800d53e:	68da      	ldr	r2, [r3, #12]
 800d540:	68fb      	ldr	r3, [r7, #12]
 800d542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d544:	425b      	negs	r3, r3
 800d546:	441a      	add	r2, r3
 800d548:	68fb      	ldr	r3, [r7, #12]
 800d54a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d54c:	68fb      	ldr	r3, [r7, #12]
 800d54e:	68da      	ldr	r2, [r3, #12]
 800d550:	68fb      	ldr	r3, [r7, #12]
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	429a      	cmp	r2, r3
 800d556:	d207      	bcs.n	800d568 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d558:	68fb      	ldr	r3, [r7, #12]
 800d55a:	689a      	ldr	r2, [r3, #8]
 800d55c:	68fb      	ldr	r3, [r7, #12]
 800d55e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d560:	425b      	negs	r3, r3
 800d562:	441a      	add	r2, r3
 800d564:	68fb      	ldr	r3, [r7, #12]
 800d566:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	2b02      	cmp	r3, #2
 800d56c:	d105      	bne.n	800d57a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d56e:	693b      	ldr	r3, [r7, #16]
 800d570:	2b00      	cmp	r3, #0
 800d572:	d002      	beq.n	800d57a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d574:	693b      	ldr	r3, [r7, #16]
 800d576:	3b01      	subs	r3, #1
 800d578:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d57a:	693b      	ldr	r3, [r7, #16]
 800d57c:	1c5a      	adds	r2, r3, #1
 800d57e:	68fb      	ldr	r3, [r7, #12]
 800d580:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800d582:	697b      	ldr	r3, [r7, #20]
}
 800d584:	4618      	mov	r0, r3
 800d586:	3718      	adds	r7, #24
 800d588:	46bd      	mov	sp, r7
 800d58a:	bd80      	pop	{r7, pc}

0800d58c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d58c:	b580      	push	{r7, lr}
 800d58e:	b082      	sub	sp, #8
 800d590:	af00      	add	r7, sp, #0
 800d592:	6078      	str	r0, [r7, #4]
 800d594:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	d018      	beq.n	800d5d0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	68da      	ldr	r2, [r3, #12]
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5a6:	441a      	add	r2, r3
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	68da      	ldr	r2, [r3, #12]
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	689b      	ldr	r3, [r3, #8]
 800d5b4:	429a      	cmp	r2, r3
 800d5b6:	d303      	bcc.n	800d5c0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	681a      	ldr	r2, [r3, #0]
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	68d9      	ldr	r1, [r3, #12]
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5c8:	461a      	mov	r2, r3
 800d5ca:	6838      	ldr	r0, [r7, #0]
 800d5cc:	f001 fc98 	bl	800ef00 <memcpy>
	}
}
 800d5d0:	bf00      	nop
 800d5d2:	3708      	adds	r7, #8
 800d5d4:	46bd      	mov	sp, r7
 800d5d6:	bd80      	pop	{r7, pc}

0800d5d8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d5d8:	b580      	push	{r7, lr}
 800d5da:	b084      	sub	sp, #16
 800d5dc:	af00      	add	r7, sp, #0
 800d5de:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d5e0:	f001 f998 	bl	800e914 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d5ea:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d5ec:	e011      	b.n	800d612 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5f2:	2b00      	cmp	r3, #0
 800d5f4:	d012      	beq.n	800d61c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	3324      	adds	r3, #36	; 0x24
 800d5fa:	4618      	mov	r0, r3
 800d5fc:	f000 fd98 	bl	800e130 <xTaskRemoveFromEventList>
 800d600:	4603      	mov	r3, r0
 800d602:	2b00      	cmp	r3, #0
 800d604:	d001      	beq.n	800d60a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d606:	f000 fe6d 	bl	800e2e4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d60a:	7bfb      	ldrb	r3, [r7, #15]
 800d60c:	3b01      	subs	r3, #1
 800d60e:	b2db      	uxtb	r3, r3
 800d610:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d612:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d616:	2b00      	cmp	r3, #0
 800d618:	dce9      	bgt.n	800d5ee <prvUnlockQueue+0x16>
 800d61a:	e000      	b.n	800d61e <prvUnlockQueue+0x46>
					break;
 800d61c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	22ff      	movs	r2, #255	; 0xff
 800d622:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800d626:	f001 f9a5 	bl	800e974 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d62a:	f001 f973 	bl	800e914 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d634:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d636:	e011      	b.n	800d65c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	691b      	ldr	r3, [r3, #16]
 800d63c:	2b00      	cmp	r3, #0
 800d63e:	d012      	beq.n	800d666 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	3310      	adds	r3, #16
 800d644:	4618      	mov	r0, r3
 800d646:	f000 fd73 	bl	800e130 <xTaskRemoveFromEventList>
 800d64a:	4603      	mov	r3, r0
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	d001      	beq.n	800d654 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d650:	f000 fe48 	bl	800e2e4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d654:	7bbb      	ldrb	r3, [r7, #14]
 800d656:	3b01      	subs	r3, #1
 800d658:	b2db      	uxtb	r3, r3
 800d65a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d65c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d660:	2b00      	cmp	r3, #0
 800d662:	dce9      	bgt.n	800d638 <prvUnlockQueue+0x60>
 800d664:	e000      	b.n	800d668 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d666:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	22ff      	movs	r2, #255	; 0xff
 800d66c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800d670:	f001 f980 	bl	800e974 <vPortExitCritical>
}
 800d674:	bf00      	nop
 800d676:	3710      	adds	r7, #16
 800d678:	46bd      	mov	sp, r7
 800d67a:	bd80      	pop	{r7, pc}

0800d67c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d67c:	b580      	push	{r7, lr}
 800d67e:	b084      	sub	sp, #16
 800d680:	af00      	add	r7, sp, #0
 800d682:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d684:	f001 f946 	bl	800e914 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	d102      	bne.n	800d696 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d690:	2301      	movs	r3, #1
 800d692:	60fb      	str	r3, [r7, #12]
 800d694:	e001      	b.n	800d69a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d696:	2300      	movs	r3, #0
 800d698:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d69a:	f001 f96b 	bl	800e974 <vPortExitCritical>

	return xReturn;
 800d69e:	68fb      	ldr	r3, [r7, #12]
}
 800d6a0:	4618      	mov	r0, r3
 800d6a2:	3710      	adds	r7, #16
 800d6a4:	46bd      	mov	sp, r7
 800d6a6:	bd80      	pop	{r7, pc}

0800d6a8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d6a8:	b580      	push	{r7, lr}
 800d6aa:	b084      	sub	sp, #16
 800d6ac:	af00      	add	r7, sp, #0
 800d6ae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d6b0:	f001 f930 	bl	800e914 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d6bc:	429a      	cmp	r2, r3
 800d6be:	d102      	bne.n	800d6c6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d6c0:	2301      	movs	r3, #1
 800d6c2:	60fb      	str	r3, [r7, #12]
 800d6c4:	e001      	b.n	800d6ca <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d6c6:	2300      	movs	r3, #0
 800d6c8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d6ca:	f001 f953 	bl	800e974 <vPortExitCritical>

	return xReturn;
 800d6ce:	68fb      	ldr	r3, [r7, #12]
}
 800d6d0:	4618      	mov	r0, r3
 800d6d2:	3710      	adds	r7, #16
 800d6d4:	46bd      	mov	sp, r7
 800d6d6:	bd80      	pop	{r7, pc}

0800d6d8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d6d8:	b580      	push	{r7, lr}
 800d6da:	b08e      	sub	sp, #56	; 0x38
 800d6dc:	af04      	add	r7, sp, #16
 800d6de:	60f8      	str	r0, [r7, #12]
 800d6e0:	60b9      	str	r1, [r7, #8]
 800d6e2:	607a      	str	r2, [r7, #4]
 800d6e4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d6e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d10a      	bne.n	800d702 <xTaskCreateStatic+0x2a>
	__asm volatile
 800d6ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6f0:	f383 8811 	msr	BASEPRI, r3
 800d6f4:	f3bf 8f6f 	isb	sy
 800d6f8:	f3bf 8f4f 	dsb	sy
 800d6fc:	623b      	str	r3, [r7, #32]
}
 800d6fe:	bf00      	nop
 800d700:	e7fe      	b.n	800d700 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800d702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d704:	2b00      	cmp	r3, #0
 800d706:	d10a      	bne.n	800d71e <xTaskCreateStatic+0x46>
	__asm volatile
 800d708:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d70c:	f383 8811 	msr	BASEPRI, r3
 800d710:	f3bf 8f6f 	isb	sy
 800d714:	f3bf 8f4f 	dsb	sy
 800d718:	61fb      	str	r3, [r7, #28]
}
 800d71a:	bf00      	nop
 800d71c:	e7fe      	b.n	800d71c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d71e:	2354      	movs	r3, #84	; 0x54
 800d720:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d722:	693b      	ldr	r3, [r7, #16]
 800d724:	2b54      	cmp	r3, #84	; 0x54
 800d726:	d00a      	beq.n	800d73e <xTaskCreateStatic+0x66>
	__asm volatile
 800d728:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d72c:	f383 8811 	msr	BASEPRI, r3
 800d730:	f3bf 8f6f 	isb	sy
 800d734:	f3bf 8f4f 	dsb	sy
 800d738:	61bb      	str	r3, [r7, #24]
}
 800d73a:	bf00      	nop
 800d73c:	e7fe      	b.n	800d73c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d73e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d740:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d742:	2b00      	cmp	r3, #0
 800d744:	d01e      	beq.n	800d784 <xTaskCreateStatic+0xac>
 800d746:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d01b      	beq.n	800d784 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d74c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d74e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d752:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d754:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d758:	2202      	movs	r2, #2
 800d75a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d75e:	2300      	movs	r3, #0
 800d760:	9303      	str	r3, [sp, #12]
 800d762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d764:	9302      	str	r3, [sp, #8]
 800d766:	f107 0314 	add.w	r3, r7, #20
 800d76a:	9301      	str	r3, [sp, #4]
 800d76c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d76e:	9300      	str	r3, [sp, #0]
 800d770:	683b      	ldr	r3, [r7, #0]
 800d772:	687a      	ldr	r2, [r7, #4]
 800d774:	68b9      	ldr	r1, [r7, #8]
 800d776:	68f8      	ldr	r0, [r7, #12]
 800d778:	f000 f850 	bl	800d81c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d77c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d77e:	f000 f8d5 	bl	800d92c <prvAddNewTaskToReadyList>
 800d782:	e001      	b.n	800d788 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800d784:	2300      	movs	r3, #0
 800d786:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d788:	697b      	ldr	r3, [r7, #20]
	}
 800d78a:	4618      	mov	r0, r3
 800d78c:	3728      	adds	r7, #40	; 0x28
 800d78e:	46bd      	mov	sp, r7
 800d790:	bd80      	pop	{r7, pc}

0800d792 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d792:	b580      	push	{r7, lr}
 800d794:	b08c      	sub	sp, #48	; 0x30
 800d796:	af04      	add	r7, sp, #16
 800d798:	60f8      	str	r0, [r7, #12]
 800d79a:	60b9      	str	r1, [r7, #8]
 800d79c:	603b      	str	r3, [r7, #0]
 800d79e:	4613      	mov	r3, r2
 800d7a0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d7a2:	88fb      	ldrh	r3, [r7, #6]
 800d7a4:	009b      	lsls	r3, r3, #2
 800d7a6:	4618      	mov	r0, r3
 800d7a8:	f001 f996 	bl	800ead8 <pvPortMalloc>
 800d7ac:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d7ae:	697b      	ldr	r3, [r7, #20]
 800d7b0:	2b00      	cmp	r3, #0
 800d7b2:	d00e      	beq.n	800d7d2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d7b4:	2054      	movs	r0, #84	; 0x54
 800d7b6:	f001 f98f 	bl	800ead8 <pvPortMalloc>
 800d7ba:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d7bc:	69fb      	ldr	r3, [r7, #28]
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d003      	beq.n	800d7ca <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d7c2:	69fb      	ldr	r3, [r7, #28]
 800d7c4:	697a      	ldr	r2, [r7, #20]
 800d7c6:	631a      	str	r2, [r3, #48]	; 0x30
 800d7c8:	e005      	b.n	800d7d6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d7ca:	6978      	ldr	r0, [r7, #20]
 800d7cc:	f001 fa50 	bl	800ec70 <vPortFree>
 800d7d0:	e001      	b.n	800d7d6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d7d2:	2300      	movs	r3, #0
 800d7d4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d7d6:	69fb      	ldr	r3, [r7, #28]
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	d017      	beq.n	800d80c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d7dc:	69fb      	ldr	r3, [r7, #28]
 800d7de:	2200      	movs	r2, #0
 800d7e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d7e4:	88fa      	ldrh	r2, [r7, #6]
 800d7e6:	2300      	movs	r3, #0
 800d7e8:	9303      	str	r3, [sp, #12]
 800d7ea:	69fb      	ldr	r3, [r7, #28]
 800d7ec:	9302      	str	r3, [sp, #8]
 800d7ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7f0:	9301      	str	r3, [sp, #4]
 800d7f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7f4:	9300      	str	r3, [sp, #0]
 800d7f6:	683b      	ldr	r3, [r7, #0]
 800d7f8:	68b9      	ldr	r1, [r7, #8]
 800d7fa:	68f8      	ldr	r0, [r7, #12]
 800d7fc:	f000 f80e 	bl	800d81c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d800:	69f8      	ldr	r0, [r7, #28]
 800d802:	f000 f893 	bl	800d92c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d806:	2301      	movs	r3, #1
 800d808:	61bb      	str	r3, [r7, #24]
 800d80a:	e002      	b.n	800d812 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d80c:	f04f 33ff 	mov.w	r3, #4294967295
 800d810:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d812:	69bb      	ldr	r3, [r7, #24]
	}
 800d814:	4618      	mov	r0, r3
 800d816:	3720      	adds	r7, #32
 800d818:	46bd      	mov	sp, r7
 800d81a:	bd80      	pop	{r7, pc}

0800d81c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d81c:	b580      	push	{r7, lr}
 800d81e:	b088      	sub	sp, #32
 800d820:	af00      	add	r7, sp, #0
 800d822:	60f8      	str	r0, [r7, #12]
 800d824:	60b9      	str	r1, [r7, #8]
 800d826:	607a      	str	r2, [r7, #4]
 800d828:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d82a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d82c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800d834:	3b01      	subs	r3, #1
 800d836:	009b      	lsls	r3, r3, #2
 800d838:	4413      	add	r3, r2
 800d83a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d83c:	69bb      	ldr	r3, [r7, #24]
 800d83e:	f023 0307 	bic.w	r3, r3, #7
 800d842:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d844:	69bb      	ldr	r3, [r7, #24]
 800d846:	f003 0307 	and.w	r3, r3, #7
 800d84a:	2b00      	cmp	r3, #0
 800d84c:	d00a      	beq.n	800d864 <prvInitialiseNewTask+0x48>
	__asm volatile
 800d84e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d852:	f383 8811 	msr	BASEPRI, r3
 800d856:	f3bf 8f6f 	isb	sy
 800d85a:	f3bf 8f4f 	dsb	sy
 800d85e:	617b      	str	r3, [r7, #20]
}
 800d860:	bf00      	nop
 800d862:	e7fe      	b.n	800d862 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d864:	68bb      	ldr	r3, [r7, #8]
 800d866:	2b00      	cmp	r3, #0
 800d868:	d01f      	beq.n	800d8aa <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d86a:	2300      	movs	r3, #0
 800d86c:	61fb      	str	r3, [r7, #28]
 800d86e:	e012      	b.n	800d896 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d870:	68ba      	ldr	r2, [r7, #8]
 800d872:	69fb      	ldr	r3, [r7, #28]
 800d874:	4413      	add	r3, r2
 800d876:	7819      	ldrb	r1, [r3, #0]
 800d878:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d87a:	69fb      	ldr	r3, [r7, #28]
 800d87c:	4413      	add	r3, r2
 800d87e:	3334      	adds	r3, #52	; 0x34
 800d880:	460a      	mov	r2, r1
 800d882:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d884:	68ba      	ldr	r2, [r7, #8]
 800d886:	69fb      	ldr	r3, [r7, #28]
 800d888:	4413      	add	r3, r2
 800d88a:	781b      	ldrb	r3, [r3, #0]
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	d006      	beq.n	800d89e <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d890:	69fb      	ldr	r3, [r7, #28]
 800d892:	3301      	adds	r3, #1
 800d894:	61fb      	str	r3, [r7, #28]
 800d896:	69fb      	ldr	r3, [r7, #28]
 800d898:	2b0f      	cmp	r3, #15
 800d89a:	d9e9      	bls.n	800d870 <prvInitialiseNewTask+0x54>
 800d89c:	e000      	b.n	800d8a0 <prvInitialiseNewTask+0x84>
			{
				break;
 800d89e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d8a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8a2:	2200      	movs	r2, #0
 800d8a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d8a8:	e003      	b.n	800d8b2 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d8aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8ac:	2200      	movs	r2, #0
 800d8ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d8b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8b4:	2b06      	cmp	r3, #6
 800d8b6:	d901      	bls.n	800d8bc <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d8b8:	2306      	movs	r3, #6
 800d8ba:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d8bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d8c0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d8c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d8c6:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800d8c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8ca:	2200      	movs	r2, #0
 800d8cc:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d8ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8d0:	3304      	adds	r3, #4
 800d8d2:	4618      	mov	r0, r3
 800d8d4:	f7ff fabc 	bl	800ce50 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d8d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8da:	3318      	adds	r3, #24
 800d8dc:	4618      	mov	r0, r3
 800d8de:	f7ff fab7 	bl	800ce50 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d8e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d8e6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d8e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8ea:	f1c3 0207 	rsb	r2, r3, #7
 800d8ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8f0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d8f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d8f6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d8f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8fa:	2200      	movs	r2, #0
 800d8fc:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d8fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d900:	2200      	movs	r2, #0
 800d902:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d906:	683a      	ldr	r2, [r7, #0]
 800d908:	68f9      	ldr	r1, [r7, #12]
 800d90a:	69b8      	ldr	r0, [r7, #24]
 800d90c:	f000 fed6 	bl	800e6bc <pxPortInitialiseStack>
 800d910:	4602      	mov	r2, r0
 800d912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d914:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d918:	2b00      	cmp	r3, #0
 800d91a:	d002      	beq.n	800d922 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d91c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d91e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d920:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d922:	bf00      	nop
 800d924:	3720      	adds	r7, #32
 800d926:	46bd      	mov	sp, r7
 800d928:	bd80      	pop	{r7, pc}
	...

0800d92c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d92c:	b580      	push	{r7, lr}
 800d92e:	b082      	sub	sp, #8
 800d930:	af00      	add	r7, sp, #0
 800d932:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d934:	f000 ffee 	bl	800e914 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d938:	4b2a      	ldr	r3, [pc, #168]	; (800d9e4 <prvAddNewTaskToReadyList+0xb8>)
 800d93a:	681b      	ldr	r3, [r3, #0]
 800d93c:	3301      	adds	r3, #1
 800d93e:	4a29      	ldr	r2, [pc, #164]	; (800d9e4 <prvAddNewTaskToReadyList+0xb8>)
 800d940:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d942:	4b29      	ldr	r3, [pc, #164]	; (800d9e8 <prvAddNewTaskToReadyList+0xbc>)
 800d944:	681b      	ldr	r3, [r3, #0]
 800d946:	2b00      	cmp	r3, #0
 800d948:	d109      	bne.n	800d95e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d94a:	4a27      	ldr	r2, [pc, #156]	; (800d9e8 <prvAddNewTaskToReadyList+0xbc>)
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d950:	4b24      	ldr	r3, [pc, #144]	; (800d9e4 <prvAddNewTaskToReadyList+0xb8>)
 800d952:	681b      	ldr	r3, [r3, #0]
 800d954:	2b01      	cmp	r3, #1
 800d956:	d110      	bne.n	800d97a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d958:	f000 fce8 	bl	800e32c <prvInitialiseTaskLists>
 800d95c:	e00d      	b.n	800d97a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d95e:	4b23      	ldr	r3, [pc, #140]	; (800d9ec <prvAddNewTaskToReadyList+0xc0>)
 800d960:	681b      	ldr	r3, [r3, #0]
 800d962:	2b00      	cmp	r3, #0
 800d964:	d109      	bne.n	800d97a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d966:	4b20      	ldr	r3, [pc, #128]	; (800d9e8 <prvAddNewTaskToReadyList+0xbc>)
 800d968:	681b      	ldr	r3, [r3, #0]
 800d96a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d970:	429a      	cmp	r2, r3
 800d972:	d802      	bhi.n	800d97a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d974:	4a1c      	ldr	r2, [pc, #112]	; (800d9e8 <prvAddNewTaskToReadyList+0xbc>)
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d97a:	4b1d      	ldr	r3, [pc, #116]	; (800d9f0 <prvAddNewTaskToReadyList+0xc4>)
 800d97c:	681b      	ldr	r3, [r3, #0]
 800d97e:	3301      	adds	r3, #1
 800d980:	4a1b      	ldr	r2, [pc, #108]	; (800d9f0 <prvAddNewTaskToReadyList+0xc4>)
 800d982:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d988:	2201      	movs	r2, #1
 800d98a:	409a      	lsls	r2, r3
 800d98c:	4b19      	ldr	r3, [pc, #100]	; (800d9f4 <prvAddNewTaskToReadyList+0xc8>)
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	4313      	orrs	r3, r2
 800d992:	4a18      	ldr	r2, [pc, #96]	; (800d9f4 <prvAddNewTaskToReadyList+0xc8>)
 800d994:	6013      	str	r3, [r2, #0]
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d99a:	4613      	mov	r3, r2
 800d99c:	009b      	lsls	r3, r3, #2
 800d99e:	4413      	add	r3, r2
 800d9a0:	009b      	lsls	r3, r3, #2
 800d9a2:	4a15      	ldr	r2, [pc, #84]	; (800d9f8 <prvAddNewTaskToReadyList+0xcc>)
 800d9a4:	441a      	add	r2, r3
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	3304      	adds	r3, #4
 800d9aa:	4619      	mov	r1, r3
 800d9ac:	4610      	mov	r0, r2
 800d9ae:	f7ff fa5c 	bl	800ce6a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d9b2:	f000 ffdf 	bl	800e974 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d9b6:	4b0d      	ldr	r3, [pc, #52]	; (800d9ec <prvAddNewTaskToReadyList+0xc0>)
 800d9b8:	681b      	ldr	r3, [r3, #0]
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	d00e      	beq.n	800d9dc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d9be:	4b0a      	ldr	r3, [pc, #40]	; (800d9e8 <prvAddNewTaskToReadyList+0xbc>)
 800d9c0:	681b      	ldr	r3, [r3, #0]
 800d9c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9c8:	429a      	cmp	r2, r3
 800d9ca:	d207      	bcs.n	800d9dc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d9cc:	4b0b      	ldr	r3, [pc, #44]	; (800d9fc <prvAddNewTaskToReadyList+0xd0>)
 800d9ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d9d2:	601a      	str	r2, [r3, #0]
 800d9d4:	f3bf 8f4f 	dsb	sy
 800d9d8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d9dc:	bf00      	nop
 800d9de:	3708      	adds	r7, #8
 800d9e0:	46bd      	mov	sp, r7
 800d9e2:	bd80      	pop	{r7, pc}
 800d9e4:	20002c20 	.word	0x20002c20
 800d9e8:	20002b20 	.word	0x20002b20
 800d9ec:	20002c2c 	.word	0x20002c2c
 800d9f0:	20002c3c 	.word	0x20002c3c
 800d9f4:	20002c28 	.word	0x20002c28
 800d9f8:	20002b24 	.word	0x20002b24
 800d9fc:	e000ed04 	.word	0xe000ed04

0800da00 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800da00:	b580      	push	{r7, lr}
 800da02:	b084      	sub	sp, #16
 800da04:	af00      	add	r7, sp, #0
 800da06:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800da08:	2300      	movs	r3, #0
 800da0a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	2b00      	cmp	r3, #0
 800da10:	d017      	beq.n	800da42 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800da12:	4b13      	ldr	r3, [pc, #76]	; (800da60 <vTaskDelay+0x60>)
 800da14:	681b      	ldr	r3, [r3, #0]
 800da16:	2b00      	cmp	r3, #0
 800da18:	d00a      	beq.n	800da30 <vTaskDelay+0x30>
	__asm volatile
 800da1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da1e:	f383 8811 	msr	BASEPRI, r3
 800da22:	f3bf 8f6f 	isb	sy
 800da26:	f3bf 8f4f 	dsb	sy
 800da2a:	60bb      	str	r3, [r7, #8]
}
 800da2c:	bf00      	nop
 800da2e:	e7fe      	b.n	800da2e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800da30:	f000 f99c 	bl	800dd6c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800da34:	2100      	movs	r1, #0
 800da36:	6878      	ldr	r0, [r7, #4]
 800da38:	f000 fdda 	bl	800e5f0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800da3c:	f000 f9a4 	bl	800dd88 <xTaskResumeAll>
 800da40:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800da42:	68fb      	ldr	r3, [r7, #12]
 800da44:	2b00      	cmp	r3, #0
 800da46:	d107      	bne.n	800da58 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800da48:	4b06      	ldr	r3, [pc, #24]	; (800da64 <vTaskDelay+0x64>)
 800da4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800da4e:	601a      	str	r2, [r3, #0]
 800da50:	f3bf 8f4f 	dsb	sy
 800da54:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800da58:	bf00      	nop
 800da5a:	3710      	adds	r7, #16
 800da5c:	46bd      	mov	sp, r7
 800da5e:	bd80      	pop	{r7, pc}
 800da60:	20002c48 	.word	0x20002c48
 800da64:	e000ed04 	.word	0xe000ed04

0800da68 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800da68:	b580      	push	{r7, lr}
 800da6a:	b084      	sub	sp, #16
 800da6c:	af00      	add	r7, sp, #0
 800da6e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800da70:	f000 ff50 	bl	800e914 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	2b00      	cmp	r3, #0
 800da78:	d102      	bne.n	800da80 <vTaskSuspend+0x18>
 800da7a:	4b3c      	ldr	r3, [pc, #240]	; (800db6c <vTaskSuspend+0x104>)
 800da7c:	681b      	ldr	r3, [r3, #0]
 800da7e:	e000      	b.n	800da82 <vTaskSuspend+0x1a>
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800da84:	68fb      	ldr	r3, [r7, #12]
 800da86:	3304      	adds	r3, #4
 800da88:	4618      	mov	r0, r3
 800da8a:	f7ff fa4b 	bl	800cf24 <uxListRemove>
 800da8e:	4603      	mov	r3, r0
 800da90:	2b00      	cmp	r3, #0
 800da92:	d115      	bne.n	800dac0 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800da94:	68fb      	ldr	r3, [r7, #12]
 800da96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da98:	4935      	ldr	r1, [pc, #212]	; (800db70 <vTaskSuspend+0x108>)
 800da9a:	4613      	mov	r3, r2
 800da9c:	009b      	lsls	r3, r3, #2
 800da9e:	4413      	add	r3, r2
 800daa0:	009b      	lsls	r3, r3, #2
 800daa2:	440b      	add	r3, r1
 800daa4:	681b      	ldr	r3, [r3, #0]
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	d10a      	bne.n	800dac0 <vTaskSuspend+0x58>
 800daaa:	68fb      	ldr	r3, [r7, #12]
 800daac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800daae:	2201      	movs	r2, #1
 800dab0:	fa02 f303 	lsl.w	r3, r2, r3
 800dab4:	43da      	mvns	r2, r3
 800dab6:	4b2f      	ldr	r3, [pc, #188]	; (800db74 <vTaskSuspend+0x10c>)
 800dab8:	681b      	ldr	r3, [r3, #0]
 800daba:	4013      	ands	r3, r2
 800dabc:	4a2d      	ldr	r2, [pc, #180]	; (800db74 <vTaskSuspend+0x10c>)
 800dabe:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800dac0:	68fb      	ldr	r3, [r7, #12]
 800dac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	d004      	beq.n	800dad2 <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800dac8:	68fb      	ldr	r3, [r7, #12]
 800daca:	3318      	adds	r3, #24
 800dacc:	4618      	mov	r0, r3
 800dace:	f7ff fa29 	bl	800cf24 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800dad2:	68fb      	ldr	r3, [r7, #12]
 800dad4:	3304      	adds	r3, #4
 800dad6:	4619      	mov	r1, r3
 800dad8:	4827      	ldr	r0, [pc, #156]	; (800db78 <vTaskSuspend+0x110>)
 800dada:	f7ff f9c6 	bl	800ce6a <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800dade:	68fb      	ldr	r3, [r7, #12]
 800dae0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800dae4:	b2db      	uxtb	r3, r3
 800dae6:	2b01      	cmp	r3, #1
 800dae8:	d103      	bne.n	800daf2 <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800daea:	68fb      	ldr	r3, [r7, #12]
 800daec:	2200      	movs	r2, #0
 800daee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800daf2:	f000 ff3f 	bl	800e974 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800daf6:	4b21      	ldr	r3, [pc, #132]	; (800db7c <vTaskSuspend+0x114>)
 800daf8:	681b      	ldr	r3, [r3, #0]
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d005      	beq.n	800db0a <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800dafe:	f000 ff09 	bl	800e914 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800db02:	f000 fcb1 	bl	800e468 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800db06:	f000 ff35 	bl	800e974 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800db0a:	4b18      	ldr	r3, [pc, #96]	; (800db6c <vTaskSuspend+0x104>)
 800db0c:	681b      	ldr	r3, [r3, #0]
 800db0e:	68fa      	ldr	r2, [r7, #12]
 800db10:	429a      	cmp	r2, r3
 800db12:	d127      	bne.n	800db64 <vTaskSuspend+0xfc>
		{
			if( xSchedulerRunning != pdFALSE )
 800db14:	4b19      	ldr	r3, [pc, #100]	; (800db7c <vTaskSuspend+0x114>)
 800db16:	681b      	ldr	r3, [r3, #0]
 800db18:	2b00      	cmp	r3, #0
 800db1a:	d017      	beq.n	800db4c <vTaskSuspend+0xe4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800db1c:	4b18      	ldr	r3, [pc, #96]	; (800db80 <vTaskSuspend+0x118>)
 800db1e:	681b      	ldr	r3, [r3, #0]
 800db20:	2b00      	cmp	r3, #0
 800db22:	d00a      	beq.n	800db3a <vTaskSuspend+0xd2>
	__asm volatile
 800db24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db28:	f383 8811 	msr	BASEPRI, r3
 800db2c:	f3bf 8f6f 	isb	sy
 800db30:	f3bf 8f4f 	dsb	sy
 800db34:	60bb      	str	r3, [r7, #8]
}
 800db36:	bf00      	nop
 800db38:	e7fe      	b.n	800db38 <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 800db3a:	4b12      	ldr	r3, [pc, #72]	; (800db84 <vTaskSuspend+0x11c>)
 800db3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800db40:	601a      	str	r2, [r3, #0]
 800db42:	f3bf 8f4f 	dsb	sy
 800db46:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800db4a:	e00b      	b.n	800db64 <vTaskSuspend+0xfc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800db4c:	4b0a      	ldr	r3, [pc, #40]	; (800db78 <vTaskSuspend+0x110>)
 800db4e:	681a      	ldr	r2, [r3, #0]
 800db50:	4b0d      	ldr	r3, [pc, #52]	; (800db88 <vTaskSuspend+0x120>)
 800db52:	681b      	ldr	r3, [r3, #0]
 800db54:	429a      	cmp	r2, r3
 800db56:	d103      	bne.n	800db60 <vTaskSuspend+0xf8>
					pxCurrentTCB = NULL;
 800db58:	4b04      	ldr	r3, [pc, #16]	; (800db6c <vTaskSuspend+0x104>)
 800db5a:	2200      	movs	r2, #0
 800db5c:	601a      	str	r2, [r3, #0]
	}
 800db5e:	e001      	b.n	800db64 <vTaskSuspend+0xfc>
					vTaskSwitchContext();
 800db60:	f000 fa66 	bl	800e030 <vTaskSwitchContext>
	}
 800db64:	bf00      	nop
 800db66:	3710      	adds	r7, #16
 800db68:	46bd      	mov	sp, r7
 800db6a:	bd80      	pop	{r7, pc}
 800db6c:	20002b20 	.word	0x20002b20
 800db70:	20002b24 	.word	0x20002b24
 800db74:	20002c28 	.word	0x20002c28
 800db78:	20002c0c 	.word	0x20002c0c
 800db7c:	20002c2c 	.word	0x20002c2c
 800db80:	20002c48 	.word	0x20002c48
 800db84:	e000ed04 	.word	0xe000ed04
 800db88:	20002c20 	.word	0x20002c20

0800db8c <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 800db8c:	b480      	push	{r7}
 800db8e:	b087      	sub	sp, #28
 800db90:	af00      	add	r7, sp, #0
 800db92:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 800db94:	2300      	movs	r3, #0
 800db96:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	d10a      	bne.n	800dbb8 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 800dba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dba6:	f383 8811 	msr	BASEPRI, r3
 800dbaa:	f3bf 8f6f 	isb	sy
 800dbae:	f3bf 8f4f 	dsb	sy
 800dbb2:	60fb      	str	r3, [r7, #12]
}
 800dbb4:	bf00      	nop
 800dbb6:	e7fe      	b.n	800dbb6 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800dbb8:	693b      	ldr	r3, [r7, #16]
 800dbba:	695b      	ldr	r3, [r3, #20]
 800dbbc:	4a0a      	ldr	r2, [pc, #40]	; (800dbe8 <prvTaskIsTaskSuspended+0x5c>)
 800dbbe:	4293      	cmp	r3, r2
 800dbc0:	d10a      	bne.n	800dbd8 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800dbc2:	693b      	ldr	r3, [r7, #16]
 800dbc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dbc6:	4a09      	ldr	r2, [pc, #36]	; (800dbec <prvTaskIsTaskSuspended+0x60>)
 800dbc8:	4293      	cmp	r3, r2
 800dbca:	d005      	beq.n	800dbd8 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 800dbcc:	693b      	ldr	r3, [r7, #16]
 800dbce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	d101      	bne.n	800dbd8 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 800dbd4:	2301      	movs	r3, #1
 800dbd6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800dbd8:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800dbda:	4618      	mov	r0, r3
 800dbdc:	371c      	adds	r7, #28
 800dbde:	46bd      	mov	sp, r7
 800dbe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbe4:	4770      	bx	lr
 800dbe6:	bf00      	nop
 800dbe8:	20002c0c 	.word	0x20002c0c
 800dbec:	20002be0 	.word	0x20002be0

0800dbf0 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 800dbf0:	b580      	push	{r7, lr}
 800dbf2:	b084      	sub	sp, #16
 800dbf4:	af00      	add	r7, sp, #0
 800dbf6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	d10a      	bne.n	800dc18 <vTaskResume+0x28>
	__asm volatile
 800dc02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc06:	f383 8811 	msr	BASEPRI, r3
 800dc0a:	f3bf 8f6f 	isb	sy
 800dc0e:	f3bf 8f4f 	dsb	sy
 800dc12:	60bb      	str	r3, [r7, #8]
}
 800dc14:	bf00      	nop
 800dc16:	e7fe      	b.n	800dc16 <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 800dc18:	4b20      	ldr	r3, [pc, #128]	; (800dc9c <vTaskResume+0xac>)
 800dc1a:	681b      	ldr	r3, [r3, #0]
 800dc1c:	68fa      	ldr	r2, [r7, #12]
 800dc1e:	429a      	cmp	r2, r3
 800dc20:	d037      	beq.n	800dc92 <vTaskResume+0xa2>
 800dc22:	68fb      	ldr	r3, [r7, #12]
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	d034      	beq.n	800dc92 <vTaskResume+0xa2>
		{
			taskENTER_CRITICAL();
 800dc28:	f000 fe74 	bl	800e914 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800dc2c:	68f8      	ldr	r0, [r7, #12]
 800dc2e:	f7ff ffad 	bl	800db8c <prvTaskIsTaskSuspended>
 800dc32:	4603      	mov	r3, r0
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	d02a      	beq.n	800dc8e <vTaskResume+0x9e>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 800dc38:	68fb      	ldr	r3, [r7, #12]
 800dc3a:	3304      	adds	r3, #4
 800dc3c:	4618      	mov	r0, r3
 800dc3e:	f7ff f971 	bl	800cf24 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800dc42:	68fb      	ldr	r3, [r7, #12]
 800dc44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc46:	2201      	movs	r2, #1
 800dc48:	409a      	lsls	r2, r3
 800dc4a:	4b15      	ldr	r3, [pc, #84]	; (800dca0 <vTaskResume+0xb0>)
 800dc4c:	681b      	ldr	r3, [r3, #0]
 800dc4e:	4313      	orrs	r3, r2
 800dc50:	4a13      	ldr	r2, [pc, #76]	; (800dca0 <vTaskResume+0xb0>)
 800dc52:	6013      	str	r3, [r2, #0]
 800dc54:	68fb      	ldr	r3, [r7, #12]
 800dc56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc58:	4613      	mov	r3, r2
 800dc5a:	009b      	lsls	r3, r3, #2
 800dc5c:	4413      	add	r3, r2
 800dc5e:	009b      	lsls	r3, r3, #2
 800dc60:	4a10      	ldr	r2, [pc, #64]	; (800dca4 <vTaskResume+0xb4>)
 800dc62:	441a      	add	r2, r3
 800dc64:	68fb      	ldr	r3, [r7, #12]
 800dc66:	3304      	adds	r3, #4
 800dc68:	4619      	mov	r1, r3
 800dc6a:	4610      	mov	r0, r2
 800dc6c:	f7ff f8fd 	bl	800ce6a <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800dc70:	68fb      	ldr	r3, [r7, #12]
 800dc72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc74:	4b09      	ldr	r3, [pc, #36]	; (800dc9c <vTaskResume+0xac>)
 800dc76:	681b      	ldr	r3, [r3, #0]
 800dc78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc7a:	429a      	cmp	r2, r3
 800dc7c:	d307      	bcc.n	800dc8e <vTaskResume+0x9e>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 800dc7e:	4b0a      	ldr	r3, [pc, #40]	; (800dca8 <vTaskResume+0xb8>)
 800dc80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dc84:	601a      	str	r2, [r3, #0]
 800dc86:	f3bf 8f4f 	dsb	sy
 800dc8a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 800dc8e:	f000 fe71 	bl	800e974 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800dc92:	bf00      	nop
 800dc94:	3710      	adds	r7, #16
 800dc96:	46bd      	mov	sp, r7
 800dc98:	bd80      	pop	{r7, pc}
 800dc9a:	bf00      	nop
 800dc9c:	20002b20 	.word	0x20002b20
 800dca0:	20002c28 	.word	0x20002c28
 800dca4:	20002b24 	.word	0x20002b24
 800dca8:	e000ed04 	.word	0xe000ed04

0800dcac <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800dcac:	b580      	push	{r7, lr}
 800dcae:	b08a      	sub	sp, #40	; 0x28
 800dcb0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800dcb2:	2300      	movs	r3, #0
 800dcb4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800dcb6:	2300      	movs	r3, #0
 800dcb8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800dcba:	463a      	mov	r2, r7
 800dcbc:	1d39      	adds	r1, r7, #4
 800dcbe:	f107 0308 	add.w	r3, r7, #8
 800dcc2:	4618      	mov	r0, r3
 800dcc4:	f7f3 f962 	bl	8000f8c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800dcc8:	6839      	ldr	r1, [r7, #0]
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	68ba      	ldr	r2, [r7, #8]
 800dcce:	9202      	str	r2, [sp, #8]
 800dcd0:	9301      	str	r3, [sp, #4]
 800dcd2:	2300      	movs	r3, #0
 800dcd4:	9300      	str	r3, [sp, #0]
 800dcd6:	2300      	movs	r3, #0
 800dcd8:	460a      	mov	r2, r1
 800dcda:	491e      	ldr	r1, [pc, #120]	; (800dd54 <vTaskStartScheduler+0xa8>)
 800dcdc:	481e      	ldr	r0, [pc, #120]	; (800dd58 <vTaskStartScheduler+0xac>)
 800dcde:	f7ff fcfb 	bl	800d6d8 <xTaskCreateStatic>
 800dce2:	4603      	mov	r3, r0
 800dce4:	4a1d      	ldr	r2, [pc, #116]	; (800dd5c <vTaskStartScheduler+0xb0>)
 800dce6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800dce8:	4b1c      	ldr	r3, [pc, #112]	; (800dd5c <vTaskStartScheduler+0xb0>)
 800dcea:	681b      	ldr	r3, [r3, #0]
 800dcec:	2b00      	cmp	r3, #0
 800dcee:	d002      	beq.n	800dcf6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800dcf0:	2301      	movs	r3, #1
 800dcf2:	617b      	str	r3, [r7, #20]
 800dcf4:	e001      	b.n	800dcfa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800dcf6:	2300      	movs	r3, #0
 800dcf8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800dcfa:	697b      	ldr	r3, [r7, #20]
 800dcfc:	2b01      	cmp	r3, #1
 800dcfe:	d116      	bne.n	800dd2e <vTaskStartScheduler+0x82>
	__asm volatile
 800dd00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd04:	f383 8811 	msr	BASEPRI, r3
 800dd08:	f3bf 8f6f 	isb	sy
 800dd0c:	f3bf 8f4f 	dsb	sy
 800dd10:	613b      	str	r3, [r7, #16]
}
 800dd12:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800dd14:	4b12      	ldr	r3, [pc, #72]	; (800dd60 <vTaskStartScheduler+0xb4>)
 800dd16:	f04f 32ff 	mov.w	r2, #4294967295
 800dd1a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800dd1c:	4b11      	ldr	r3, [pc, #68]	; (800dd64 <vTaskStartScheduler+0xb8>)
 800dd1e:	2201      	movs	r2, #1
 800dd20:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800dd22:	4b11      	ldr	r3, [pc, #68]	; (800dd68 <vTaskStartScheduler+0xbc>)
 800dd24:	2200      	movs	r2, #0
 800dd26:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800dd28:	f000 fd52 	bl	800e7d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800dd2c:	e00e      	b.n	800dd4c <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800dd2e:	697b      	ldr	r3, [r7, #20]
 800dd30:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd34:	d10a      	bne.n	800dd4c <vTaskStartScheduler+0xa0>
	__asm volatile
 800dd36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd3a:	f383 8811 	msr	BASEPRI, r3
 800dd3e:	f3bf 8f6f 	isb	sy
 800dd42:	f3bf 8f4f 	dsb	sy
 800dd46:	60fb      	str	r3, [r7, #12]
}
 800dd48:	bf00      	nop
 800dd4a:	e7fe      	b.n	800dd4a <vTaskStartScheduler+0x9e>
}
 800dd4c:	bf00      	nop
 800dd4e:	3718      	adds	r7, #24
 800dd50:	46bd      	mov	sp, r7
 800dd52:	bd80      	pop	{r7, pc}
 800dd54:	08014404 	.word	0x08014404
 800dd58:	0800e2fd 	.word	0x0800e2fd
 800dd5c:	20002c44 	.word	0x20002c44
 800dd60:	20002c40 	.word	0x20002c40
 800dd64:	20002c2c 	.word	0x20002c2c
 800dd68:	20002c24 	.word	0x20002c24

0800dd6c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800dd6c:	b480      	push	{r7}
 800dd6e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800dd70:	4b04      	ldr	r3, [pc, #16]	; (800dd84 <vTaskSuspendAll+0x18>)
 800dd72:	681b      	ldr	r3, [r3, #0]
 800dd74:	3301      	adds	r3, #1
 800dd76:	4a03      	ldr	r2, [pc, #12]	; (800dd84 <vTaskSuspendAll+0x18>)
 800dd78:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800dd7a:	bf00      	nop
 800dd7c:	46bd      	mov	sp, r7
 800dd7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd82:	4770      	bx	lr
 800dd84:	20002c48 	.word	0x20002c48

0800dd88 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800dd88:	b580      	push	{r7, lr}
 800dd8a:	b084      	sub	sp, #16
 800dd8c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800dd8e:	2300      	movs	r3, #0
 800dd90:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800dd92:	2300      	movs	r3, #0
 800dd94:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800dd96:	4b41      	ldr	r3, [pc, #260]	; (800de9c <xTaskResumeAll+0x114>)
 800dd98:	681b      	ldr	r3, [r3, #0]
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	d10a      	bne.n	800ddb4 <xTaskResumeAll+0x2c>
	__asm volatile
 800dd9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dda2:	f383 8811 	msr	BASEPRI, r3
 800dda6:	f3bf 8f6f 	isb	sy
 800ddaa:	f3bf 8f4f 	dsb	sy
 800ddae:	603b      	str	r3, [r7, #0]
}
 800ddb0:	bf00      	nop
 800ddb2:	e7fe      	b.n	800ddb2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ddb4:	f000 fdae 	bl	800e914 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ddb8:	4b38      	ldr	r3, [pc, #224]	; (800de9c <xTaskResumeAll+0x114>)
 800ddba:	681b      	ldr	r3, [r3, #0]
 800ddbc:	3b01      	subs	r3, #1
 800ddbe:	4a37      	ldr	r2, [pc, #220]	; (800de9c <xTaskResumeAll+0x114>)
 800ddc0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ddc2:	4b36      	ldr	r3, [pc, #216]	; (800de9c <xTaskResumeAll+0x114>)
 800ddc4:	681b      	ldr	r3, [r3, #0]
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	d161      	bne.n	800de8e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ddca:	4b35      	ldr	r3, [pc, #212]	; (800dea0 <xTaskResumeAll+0x118>)
 800ddcc:	681b      	ldr	r3, [r3, #0]
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	d05d      	beq.n	800de8e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ddd2:	e02e      	b.n	800de32 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ddd4:	4b33      	ldr	r3, [pc, #204]	; (800dea4 <xTaskResumeAll+0x11c>)
 800ddd6:	68db      	ldr	r3, [r3, #12]
 800ddd8:	68db      	ldr	r3, [r3, #12]
 800ddda:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800dddc:	68fb      	ldr	r3, [r7, #12]
 800ddde:	3318      	adds	r3, #24
 800dde0:	4618      	mov	r0, r3
 800dde2:	f7ff f89f 	bl	800cf24 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dde6:	68fb      	ldr	r3, [r7, #12]
 800dde8:	3304      	adds	r3, #4
 800ddea:	4618      	mov	r0, r3
 800ddec:	f7ff f89a 	bl	800cf24 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ddf0:	68fb      	ldr	r3, [r7, #12]
 800ddf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ddf4:	2201      	movs	r2, #1
 800ddf6:	409a      	lsls	r2, r3
 800ddf8:	4b2b      	ldr	r3, [pc, #172]	; (800dea8 <xTaskResumeAll+0x120>)
 800ddfa:	681b      	ldr	r3, [r3, #0]
 800ddfc:	4313      	orrs	r3, r2
 800ddfe:	4a2a      	ldr	r2, [pc, #168]	; (800dea8 <xTaskResumeAll+0x120>)
 800de00:	6013      	str	r3, [r2, #0]
 800de02:	68fb      	ldr	r3, [r7, #12]
 800de04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de06:	4613      	mov	r3, r2
 800de08:	009b      	lsls	r3, r3, #2
 800de0a:	4413      	add	r3, r2
 800de0c:	009b      	lsls	r3, r3, #2
 800de0e:	4a27      	ldr	r2, [pc, #156]	; (800deac <xTaskResumeAll+0x124>)
 800de10:	441a      	add	r2, r3
 800de12:	68fb      	ldr	r3, [r7, #12]
 800de14:	3304      	adds	r3, #4
 800de16:	4619      	mov	r1, r3
 800de18:	4610      	mov	r0, r2
 800de1a:	f7ff f826 	bl	800ce6a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800de1e:	68fb      	ldr	r3, [r7, #12]
 800de20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de22:	4b23      	ldr	r3, [pc, #140]	; (800deb0 <xTaskResumeAll+0x128>)
 800de24:	681b      	ldr	r3, [r3, #0]
 800de26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de28:	429a      	cmp	r2, r3
 800de2a:	d302      	bcc.n	800de32 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800de2c:	4b21      	ldr	r3, [pc, #132]	; (800deb4 <xTaskResumeAll+0x12c>)
 800de2e:	2201      	movs	r2, #1
 800de30:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800de32:	4b1c      	ldr	r3, [pc, #112]	; (800dea4 <xTaskResumeAll+0x11c>)
 800de34:	681b      	ldr	r3, [r3, #0]
 800de36:	2b00      	cmp	r3, #0
 800de38:	d1cc      	bne.n	800ddd4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800de3a:	68fb      	ldr	r3, [r7, #12]
 800de3c:	2b00      	cmp	r3, #0
 800de3e:	d001      	beq.n	800de44 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800de40:	f000 fb12 	bl	800e468 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800de44:	4b1c      	ldr	r3, [pc, #112]	; (800deb8 <xTaskResumeAll+0x130>)
 800de46:	681b      	ldr	r3, [r3, #0]
 800de48:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	d010      	beq.n	800de72 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800de50:	f000 f836 	bl	800dec0 <xTaskIncrementTick>
 800de54:	4603      	mov	r3, r0
 800de56:	2b00      	cmp	r3, #0
 800de58:	d002      	beq.n	800de60 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800de5a:	4b16      	ldr	r3, [pc, #88]	; (800deb4 <xTaskResumeAll+0x12c>)
 800de5c:	2201      	movs	r2, #1
 800de5e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	3b01      	subs	r3, #1
 800de64:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	2b00      	cmp	r3, #0
 800de6a:	d1f1      	bne.n	800de50 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800de6c:	4b12      	ldr	r3, [pc, #72]	; (800deb8 <xTaskResumeAll+0x130>)
 800de6e:	2200      	movs	r2, #0
 800de70:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800de72:	4b10      	ldr	r3, [pc, #64]	; (800deb4 <xTaskResumeAll+0x12c>)
 800de74:	681b      	ldr	r3, [r3, #0]
 800de76:	2b00      	cmp	r3, #0
 800de78:	d009      	beq.n	800de8e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800de7a:	2301      	movs	r3, #1
 800de7c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800de7e:	4b0f      	ldr	r3, [pc, #60]	; (800debc <xTaskResumeAll+0x134>)
 800de80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800de84:	601a      	str	r2, [r3, #0]
 800de86:	f3bf 8f4f 	dsb	sy
 800de8a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800de8e:	f000 fd71 	bl	800e974 <vPortExitCritical>

	return xAlreadyYielded;
 800de92:	68bb      	ldr	r3, [r7, #8]
}
 800de94:	4618      	mov	r0, r3
 800de96:	3710      	adds	r7, #16
 800de98:	46bd      	mov	sp, r7
 800de9a:	bd80      	pop	{r7, pc}
 800de9c:	20002c48 	.word	0x20002c48
 800dea0:	20002c20 	.word	0x20002c20
 800dea4:	20002be0 	.word	0x20002be0
 800dea8:	20002c28 	.word	0x20002c28
 800deac:	20002b24 	.word	0x20002b24
 800deb0:	20002b20 	.word	0x20002b20
 800deb4:	20002c34 	.word	0x20002c34
 800deb8:	20002c30 	.word	0x20002c30
 800debc:	e000ed04 	.word	0xe000ed04

0800dec0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800dec0:	b580      	push	{r7, lr}
 800dec2:	b086      	sub	sp, #24
 800dec4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800dec6:	2300      	movs	r3, #0
 800dec8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800deca:	4b4e      	ldr	r3, [pc, #312]	; (800e004 <xTaskIncrementTick+0x144>)
 800decc:	681b      	ldr	r3, [r3, #0]
 800dece:	2b00      	cmp	r3, #0
 800ded0:	f040 808e 	bne.w	800dff0 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ded4:	4b4c      	ldr	r3, [pc, #304]	; (800e008 <xTaskIncrementTick+0x148>)
 800ded6:	681b      	ldr	r3, [r3, #0]
 800ded8:	3301      	adds	r3, #1
 800deda:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800dedc:	4a4a      	ldr	r2, [pc, #296]	; (800e008 <xTaskIncrementTick+0x148>)
 800dede:	693b      	ldr	r3, [r7, #16]
 800dee0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800dee2:	693b      	ldr	r3, [r7, #16]
 800dee4:	2b00      	cmp	r3, #0
 800dee6:	d120      	bne.n	800df2a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800dee8:	4b48      	ldr	r3, [pc, #288]	; (800e00c <xTaskIncrementTick+0x14c>)
 800deea:	681b      	ldr	r3, [r3, #0]
 800deec:	681b      	ldr	r3, [r3, #0]
 800deee:	2b00      	cmp	r3, #0
 800def0:	d00a      	beq.n	800df08 <xTaskIncrementTick+0x48>
	__asm volatile
 800def2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800def6:	f383 8811 	msr	BASEPRI, r3
 800defa:	f3bf 8f6f 	isb	sy
 800defe:	f3bf 8f4f 	dsb	sy
 800df02:	603b      	str	r3, [r7, #0]
}
 800df04:	bf00      	nop
 800df06:	e7fe      	b.n	800df06 <xTaskIncrementTick+0x46>
 800df08:	4b40      	ldr	r3, [pc, #256]	; (800e00c <xTaskIncrementTick+0x14c>)
 800df0a:	681b      	ldr	r3, [r3, #0]
 800df0c:	60fb      	str	r3, [r7, #12]
 800df0e:	4b40      	ldr	r3, [pc, #256]	; (800e010 <xTaskIncrementTick+0x150>)
 800df10:	681b      	ldr	r3, [r3, #0]
 800df12:	4a3e      	ldr	r2, [pc, #248]	; (800e00c <xTaskIncrementTick+0x14c>)
 800df14:	6013      	str	r3, [r2, #0]
 800df16:	4a3e      	ldr	r2, [pc, #248]	; (800e010 <xTaskIncrementTick+0x150>)
 800df18:	68fb      	ldr	r3, [r7, #12]
 800df1a:	6013      	str	r3, [r2, #0]
 800df1c:	4b3d      	ldr	r3, [pc, #244]	; (800e014 <xTaskIncrementTick+0x154>)
 800df1e:	681b      	ldr	r3, [r3, #0]
 800df20:	3301      	adds	r3, #1
 800df22:	4a3c      	ldr	r2, [pc, #240]	; (800e014 <xTaskIncrementTick+0x154>)
 800df24:	6013      	str	r3, [r2, #0]
 800df26:	f000 fa9f 	bl	800e468 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800df2a:	4b3b      	ldr	r3, [pc, #236]	; (800e018 <xTaskIncrementTick+0x158>)
 800df2c:	681b      	ldr	r3, [r3, #0]
 800df2e:	693a      	ldr	r2, [r7, #16]
 800df30:	429a      	cmp	r2, r3
 800df32:	d348      	bcc.n	800dfc6 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800df34:	4b35      	ldr	r3, [pc, #212]	; (800e00c <xTaskIncrementTick+0x14c>)
 800df36:	681b      	ldr	r3, [r3, #0]
 800df38:	681b      	ldr	r3, [r3, #0]
 800df3a:	2b00      	cmp	r3, #0
 800df3c:	d104      	bne.n	800df48 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800df3e:	4b36      	ldr	r3, [pc, #216]	; (800e018 <xTaskIncrementTick+0x158>)
 800df40:	f04f 32ff 	mov.w	r2, #4294967295
 800df44:	601a      	str	r2, [r3, #0]
					break;
 800df46:	e03e      	b.n	800dfc6 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800df48:	4b30      	ldr	r3, [pc, #192]	; (800e00c <xTaskIncrementTick+0x14c>)
 800df4a:	681b      	ldr	r3, [r3, #0]
 800df4c:	68db      	ldr	r3, [r3, #12]
 800df4e:	68db      	ldr	r3, [r3, #12]
 800df50:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800df52:	68bb      	ldr	r3, [r7, #8]
 800df54:	685b      	ldr	r3, [r3, #4]
 800df56:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800df58:	693a      	ldr	r2, [r7, #16]
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	429a      	cmp	r2, r3
 800df5e:	d203      	bcs.n	800df68 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800df60:	4a2d      	ldr	r2, [pc, #180]	; (800e018 <xTaskIncrementTick+0x158>)
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800df66:	e02e      	b.n	800dfc6 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800df68:	68bb      	ldr	r3, [r7, #8]
 800df6a:	3304      	adds	r3, #4
 800df6c:	4618      	mov	r0, r3
 800df6e:	f7fe ffd9 	bl	800cf24 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800df72:	68bb      	ldr	r3, [r7, #8]
 800df74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800df76:	2b00      	cmp	r3, #0
 800df78:	d004      	beq.n	800df84 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800df7a:	68bb      	ldr	r3, [r7, #8]
 800df7c:	3318      	adds	r3, #24
 800df7e:	4618      	mov	r0, r3
 800df80:	f7fe ffd0 	bl	800cf24 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800df84:	68bb      	ldr	r3, [r7, #8]
 800df86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df88:	2201      	movs	r2, #1
 800df8a:	409a      	lsls	r2, r3
 800df8c:	4b23      	ldr	r3, [pc, #140]	; (800e01c <xTaskIncrementTick+0x15c>)
 800df8e:	681b      	ldr	r3, [r3, #0]
 800df90:	4313      	orrs	r3, r2
 800df92:	4a22      	ldr	r2, [pc, #136]	; (800e01c <xTaskIncrementTick+0x15c>)
 800df94:	6013      	str	r3, [r2, #0]
 800df96:	68bb      	ldr	r3, [r7, #8]
 800df98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df9a:	4613      	mov	r3, r2
 800df9c:	009b      	lsls	r3, r3, #2
 800df9e:	4413      	add	r3, r2
 800dfa0:	009b      	lsls	r3, r3, #2
 800dfa2:	4a1f      	ldr	r2, [pc, #124]	; (800e020 <xTaskIncrementTick+0x160>)
 800dfa4:	441a      	add	r2, r3
 800dfa6:	68bb      	ldr	r3, [r7, #8]
 800dfa8:	3304      	adds	r3, #4
 800dfaa:	4619      	mov	r1, r3
 800dfac:	4610      	mov	r0, r2
 800dfae:	f7fe ff5c 	bl	800ce6a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800dfb2:	68bb      	ldr	r3, [r7, #8]
 800dfb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dfb6:	4b1b      	ldr	r3, [pc, #108]	; (800e024 <xTaskIncrementTick+0x164>)
 800dfb8:	681b      	ldr	r3, [r3, #0]
 800dfba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dfbc:	429a      	cmp	r2, r3
 800dfbe:	d3b9      	bcc.n	800df34 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800dfc0:	2301      	movs	r3, #1
 800dfc2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dfc4:	e7b6      	b.n	800df34 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800dfc6:	4b17      	ldr	r3, [pc, #92]	; (800e024 <xTaskIncrementTick+0x164>)
 800dfc8:	681b      	ldr	r3, [r3, #0]
 800dfca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dfcc:	4914      	ldr	r1, [pc, #80]	; (800e020 <xTaskIncrementTick+0x160>)
 800dfce:	4613      	mov	r3, r2
 800dfd0:	009b      	lsls	r3, r3, #2
 800dfd2:	4413      	add	r3, r2
 800dfd4:	009b      	lsls	r3, r3, #2
 800dfd6:	440b      	add	r3, r1
 800dfd8:	681b      	ldr	r3, [r3, #0]
 800dfda:	2b01      	cmp	r3, #1
 800dfdc:	d901      	bls.n	800dfe2 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800dfde:	2301      	movs	r3, #1
 800dfe0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800dfe2:	4b11      	ldr	r3, [pc, #68]	; (800e028 <xTaskIncrementTick+0x168>)
 800dfe4:	681b      	ldr	r3, [r3, #0]
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	d007      	beq.n	800dffa <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800dfea:	2301      	movs	r3, #1
 800dfec:	617b      	str	r3, [r7, #20]
 800dfee:	e004      	b.n	800dffa <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800dff0:	4b0e      	ldr	r3, [pc, #56]	; (800e02c <xTaskIncrementTick+0x16c>)
 800dff2:	681b      	ldr	r3, [r3, #0]
 800dff4:	3301      	adds	r3, #1
 800dff6:	4a0d      	ldr	r2, [pc, #52]	; (800e02c <xTaskIncrementTick+0x16c>)
 800dff8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800dffa:	697b      	ldr	r3, [r7, #20]
}
 800dffc:	4618      	mov	r0, r3
 800dffe:	3718      	adds	r7, #24
 800e000:	46bd      	mov	sp, r7
 800e002:	bd80      	pop	{r7, pc}
 800e004:	20002c48 	.word	0x20002c48
 800e008:	20002c24 	.word	0x20002c24
 800e00c:	20002bd8 	.word	0x20002bd8
 800e010:	20002bdc 	.word	0x20002bdc
 800e014:	20002c38 	.word	0x20002c38
 800e018:	20002c40 	.word	0x20002c40
 800e01c:	20002c28 	.word	0x20002c28
 800e020:	20002b24 	.word	0x20002b24
 800e024:	20002b20 	.word	0x20002b20
 800e028:	20002c34 	.word	0x20002c34
 800e02c:	20002c30 	.word	0x20002c30

0800e030 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e030:	b480      	push	{r7}
 800e032:	b087      	sub	sp, #28
 800e034:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e036:	4b27      	ldr	r3, [pc, #156]	; (800e0d4 <vTaskSwitchContext+0xa4>)
 800e038:	681b      	ldr	r3, [r3, #0]
 800e03a:	2b00      	cmp	r3, #0
 800e03c:	d003      	beq.n	800e046 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e03e:	4b26      	ldr	r3, [pc, #152]	; (800e0d8 <vTaskSwitchContext+0xa8>)
 800e040:	2201      	movs	r2, #1
 800e042:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e044:	e03f      	b.n	800e0c6 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800e046:	4b24      	ldr	r3, [pc, #144]	; (800e0d8 <vTaskSwitchContext+0xa8>)
 800e048:	2200      	movs	r2, #0
 800e04a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e04c:	4b23      	ldr	r3, [pc, #140]	; (800e0dc <vTaskSwitchContext+0xac>)
 800e04e:	681b      	ldr	r3, [r3, #0]
 800e050:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800e052:	68fb      	ldr	r3, [r7, #12]
 800e054:	fab3 f383 	clz	r3, r3
 800e058:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800e05a:	7afb      	ldrb	r3, [r7, #11]
 800e05c:	f1c3 031f 	rsb	r3, r3, #31
 800e060:	617b      	str	r3, [r7, #20]
 800e062:	491f      	ldr	r1, [pc, #124]	; (800e0e0 <vTaskSwitchContext+0xb0>)
 800e064:	697a      	ldr	r2, [r7, #20]
 800e066:	4613      	mov	r3, r2
 800e068:	009b      	lsls	r3, r3, #2
 800e06a:	4413      	add	r3, r2
 800e06c:	009b      	lsls	r3, r3, #2
 800e06e:	440b      	add	r3, r1
 800e070:	681b      	ldr	r3, [r3, #0]
 800e072:	2b00      	cmp	r3, #0
 800e074:	d10a      	bne.n	800e08c <vTaskSwitchContext+0x5c>
	__asm volatile
 800e076:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e07a:	f383 8811 	msr	BASEPRI, r3
 800e07e:	f3bf 8f6f 	isb	sy
 800e082:	f3bf 8f4f 	dsb	sy
 800e086:	607b      	str	r3, [r7, #4]
}
 800e088:	bf00      	nop
 800e08a:	e7fe      	b.n	800e08a <vTaskSwitchContext+0x5a>
 800e08c:	697a      	ldr	r2, [r7, #20]
 800e08e:	4613      	mov	r3, r2
 800e090:	009b      	lsls	r3, r3, #2
 800e092:	4413      	add	r3, r2
 800e094:	009b      	lsls	r3, r3, #2
 800e096:	4a12      	ldr	r2, [pc, #72]	; (800e0e0 <vTaskSwitchContext+0xb0>)
 800e098:	4413      	add	r3, r2
 800e09a:	613b      	str	r3, [r7, #16]
 800e09c:	693b      	ldr	r3, [r7, #16]
 800e09e:	685b      	ldr	r3, [r3, #4]
 800e0a0:	685a      	ldr	r2, [r3, #4]
 800e0a2:	693b      	ldr	r3, [r7, #16]
 800e0a4:	605a      	str	r2, [r3, #4]
 800e0a6:	693b      	ldr	r3, [r7, #16]
 800e0a8:	685a      	ldr	r2, [r3, #4]
 800e0aa:	693b      	ldr	r3, [r7, #16]
 800e0ac:	3308      	adds	r3, #8
 800e0ae:	429a      	cmp	r2, r3
 800e0b0:	d104      	bne.n	800e0bc <vTaskSwitchContext+0x8c>
 800e0b2:	693b      	ldr	r3, [r7, #16]
 800e0b4:	685b      	ldr	r3, [r3, #4]
 800e0b6:	685a      	ldr	r2, [r3, #4]
 800e0b8:	693b      	ldr	r3, [r7, #16]
 800e0ba:	605a      	str	r2, [r3, #4]
 800e0bc:	693b      	ldr	r3, [r7, #16]
 800e0be:	685b      	ldr	r3, [r3, #4]
 800e0c0:	68db      	ldr	r3, [r3, #12]
 800e0c2:	4a08      	ldr	r2, [pc, #32]	; (800e0e4 <vTaskSwitchContext+0xb4>)
 800e0c4:	6013      	str	r3, [r2, #0]
}
 800e0c6:	bf00      	nop
 800e0c8:	371c      	adds	r7, #28
 800e0ca:	46bd      	mov	sp, r7
 800e0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0d0:	4770      	bx	lr
 800e0d2:	bf00      	nop
 800e0d4:	20002c48 	.word	0x20002c48
 800e0d8:	20002c34 	.word	0x20002c34
 800e0dc:	20002c28 	.word	0x20002c28
 800e0e0:	20002b24 	.word	0x20002b24
 800e0e4:	20002b20 	.word	0x20002b20

0800e0e8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e0e8:	b580      	push	{r7, lr}
 800e0ea:	b084      	sub	sp, #16
 800e0ec:	af00      	add	r7, sp, #0
 800e0ee:	6078      	str	r0, [r7, #4]
 800e0f0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	2b00      	cmp	r3, #0
 800e0f6:	d10a      	bne.n	800e10e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800e0f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0fc:	f383 8811 	msr	BASEPRI, r3
 800e100:	f3bf 8f6f 	isb	sy
 800e104:	f3bf 8f4f 	dsb	sy
 800e108:	60fb      	str	r3, [r7, #12]
}
 800e10a:	bf00      	nop
 800e10c:	e7fe      	b.n	800e10c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e10e:	4b07      	ldr	r3, [pc, #28]	; (800e12c <vTaskPlaceOnEventList+0x44>)
 800e110:	681b      	ldr	r3, [r3, #0]
 800e112:	3318      	adds	r3, #24
 800e114:	4619      	mov	r1, r3
 800e116:	6878      	ldr	r0, [r7, #4]
 800e118:	f7fe fecb 	bl	800ceb2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e11c:	2101      	movs	r1, #1
 800e11e:	6838      	ldr	r0, [r7, #0]
 800e120:	f000 fa66 	bl	800e5f0 <prvAddCurrentTaskToDelayedList>
}
 800e124:	bf00      	nop
 800e126:	3710      	adds	r7, #16
 800e128:	46bd      	mov	sp, r7
 800e12a:	bd80      	pop	{r7, pc}
 800e12c:	20002b20 	.word	0x20002b20

0800e130 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e130:	b580      	push	{r7, lr}
 800e132:	b086      	sub	sp, #24
 800e134:	af00      	add	r7, sp, #0
 800e136:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	68db      	ldr	r3, [r3, #12]
 800e13c:	68db      	ldr	r3, [r3, #12]
 800e13e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e140:	693b      	ldr	r3, [r7, #16]
 800e142:	2b00      	cmp	r3, #0
 800e144:	d10a      	bne.n	800e15c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800e146:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e14a:	f383 8811 	msr	BASEPRI, r3
 800e14e:	f3bf 8f6f 	isb	sy
 800e152:	f3bf 8f4f 	dsb	sy
 800e156:	60fb      	str	r3, [r7, #12]
}
 800e158:	bf00      	nop
 800e15a:	e7fe      	b.n	800e15a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e15c:	693b      	ldr	r3, [r7, #16]
 800e15e:	3318      	adds	r3, #24
 800e160:	4618      	mov	r0, r3
 800e162:	f7fe fedf 	bl	800cf24 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e166:	4b1d      	ldr	r3, [pc, #116]	; (800e1dc <xTaskRemoveFromEventList+0xac>)
 800e168:	681b      	ldr	r3, [r3, #0]
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	d11c      	bne.n	800e1a8 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e16e:	693b      	ldr	r3, [r7, #16]
 800e170:	3304      	adds	r3, #4
 800e172:	4618      	mov	r0, r3
 800e174:	f7fe fed6 	bl	800cf24 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e178:	693b      	ldr	r3, [r7, #16]
 800e17a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e17c:	2201      	movs	r2, #1
 800e17e:	409a      	lsls	r2, r3
 800e180:	4b17      	ldr	r3, [pc, #92]	; (800e1e0 <xTaskRemoveFromEventList+0xb0>)
 800e182:	681b      	ldr	r3, [r3, #0]
 800e184:	4313      	orrs	r3, r2
 800e186:	4a16      	ldr	r2, [pc, #88]	; (800e1e0 <xTaskRemoveFromEventList+0xb0>)
 800e188:	6013      	str	r3, [r2, #0]
 800e18a:	693b      	ldr	r3, [r7, #16]
 800e18c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e18e:	4613      	mov	r3, r2
 800e190:	009b      	lsls	r3, r3, #2
 800e192:	4413      	add	r3, r2
 800e194:	009b      	lsls	r3, r3, #2
 800e196:	4a13      	ldr	r2, [pc, #76]	; (800e1e4 <xTaskRemoveFromEventList+0xb4>)
 800e198:	441a      	add	r2, r3
 800e19a:	693b      	ldr	r3, [r7, #16]
 800e19c:	3304      	adds	r3, #4
 800e19e:	4619      	mov	r1, r3
 800e1a0:	4610      	mov	r0, r2
 800e1a2:	f7fe fe62 	bl	800ce6a <vListInsertEnd>
 800e1a6:	e005      	b.n	800e1b4 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e1a8:	693b      	ldr	r3, [r7, #16]
 800e1aa:	3318      	adds	r3, #24
 800e1ac:	4619      	mov	r1, r3
 800e1ae:	480e      	ldr	r0, [pc, #56]	; (800e1e8 <xTaskRemoveFromEventList+0xb8>)
 800e1b0:	f7fe fe5b 	bl	800ce6a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e1b4:	693b      	ldr	r3, [r7, #16]
 800e1b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e1b8:	4b0c      	ldr	r3, [pc, #48]	; (800e1ec <xTaskRemoveFromEventList+0xbc>)
 800e1ba:	681b      	ldr	r3, [r3, #0]
 800e1bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1be:	429a      	cmp	r2, r3
 800e1c0:	d905      	bls.n	800e1ce <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e1c2:	2301      	movs	r3, #1
 800e1c4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e1c6:	4b0a      	ldr	r3, [pc, #40]	; (800e1f0 <xTaskRemoveFromEventList+0xc0>)
 800e1c8:	2201      	movs	r2, #1
 800e1ca:	601a      	str	r2, [r3, #0]
 800e1cc:	e001      	b.n	800e1d2 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800e1ce:	2300      	movs	r3, #0
 800e1d0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e1d2:	697b      	ldr	r3, [r7, #20]
}
 800e1d4:	4618      	mov	r0, r3
 800e1d6:	3718      	adds	r7, #24
 800e1d8:	46bd      	mov	sp, r7
 800e1da:	bd80      	pop	{r7, pc}
 800e1dc:	20002c48 	.word	0x20002c48
 800e1e0:	20002c28 	.word	0x20002c28
 800e1e4:	20002b24 	.word	0x20002b24
 800e1e8:	20002be0 	.word	0x20002be0
 800e1ec:	20002b20 	.word	0x20002b20
 800e1f0:	20002c34 	.word	0x20002c34

0800e1f4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e1f4:	b480      	push	{r7}
 800e1f6:	b083      	sub	sp, #12
 800e1f8:	af00      	add	r7, sp, #0
 800e1fa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e1fc:	4b06      	ldr	r3, [pc, #24]	; (800e218 <vTaskInternalSetTimeOutState+0x24>)
 800e1fe:	681a      	ldr	r2, [r3, #0]
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e204:	4b05      	ldr	r3, [pc, #20]	; (800e21c <vTaskInternalSetTimeOutState+0x28>)
 800e206:	681a      	ldr	r2, [r3, #0]
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	605a      	str	r2, [r3, #4]
}
 800e20c:	bf00      	nop
 800e20e:	370c      	adds	r7, #12
 800e210:	46bd      	mov	sp, r7
 800e212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e216:	4770      	bx	lr
 800e218:	20002c38 	.word	0x20002c38
 800e21c:	20002c24 	.word	0x20002c24

0800e220 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e220:	b580      	push	{r7, lr}
 800e222:	b088      	sub	sp, #32
 800e224:	af00      	add	r7, sp, #0
 800e226:	6078      	str	r0, [r7, #4]
 800e228:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	2b00      	cmp	r3, #0
 800e22e:	d10a      	bne.n	800e246 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800e230:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e234:	f383 8811 	msr	BASEPRI, r3
 800e238:	f3bf 8f6f 	isb	sy
 800e23c:	f3bf 8f4f 	dsb	sy
 800e240:	613b      	str	r3, [r7, #16]
}
 800e242:	bf00      	nop
 800e244:	e7fe      	b.n	800e244 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800e246:	683b      	ldr	r3, [r7, #0]
 800e248:	2b00      	cmp	r3, #0
 800e24a:	d10a      	bne.n	800e262 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800e24c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e250:	f383 8811 	msr	BASEPRI, r3
 800e254:	f3bf 8f6f 	isb	sy
 800e258:	f3bf 8f4f 	dsb	sy
 800e25c:	60fb      	str	r3, [r7, #12]
}
 800e25e:	bf00      	nop
 800e260:	e7fe      	b.n	800e260 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800e262:	f000 fb57 	bl	800e914 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e266:	4b1d      	ldr	r3, [pc, #116]	; (800e2dc <xTaskCheckForTimeOut+0xbc>)
 800e268:	681b      	ldr	r3, [r3, #0]
 800e26a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	685b      	ldr	r3, [r3, #4]
 800e270:	69ba      	ldr	r2, [r7, #24]
 800e272:	1ad3      	subs	r3, r2, r3
 800e274:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e276:	683b      	ldr	r3, [r7, #0]
 800e278:	681b      	ldr	r3, [r3, #0]
 800e27a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e27e:	d102      	bne.n	800e286 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e280:	2300      	movs	r3, #0
 800e282:	61fb      	str	r3, [r7, #28]
 800e284:	e023      	b.n	800e2ce <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	681a      	ldr	r2, [r3, #0]
 800e28a:	4b15      	ldr	r3, [pc, #84]	; (800e2e0 <xTaskCheckForTimeOut+0xc0>)
 800e28c:	681b      	ldr	r3, [r3, #0]
 800e28e:	429a      	cmp	r2, r3
 800e290:	d007      	beq.n	800e2a2 <xTaskCheckForTimeOut+0x82>
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	685b      	ldr	r3, [r3, #4]
 800e296:	69ba      	ldr	r2, [r7, #24]
 800e298:	429a      	cmp	r2, r3
 800e29a:	d302      	bcc.n	800e2a2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e29c:	2301      	movs	r3, #1
 800e29e:	61fb      	str	r3, [r7, #28]
 800e2a0:	e015      	b.n	800e2ce <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e2a2:	683b      	ldr	r3, [r7, #0]
 800e2a4:	681b      	ldr	r3, [r3, #0]
 800e2a6:	697a      	ldr	r2, [r7, #20]
 800e2a8:	429a      	cmp	r2, r3
 800e2aa:	d20b      	bcs.n	800e2c4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e2ac:	683b      	ldr	r3, [r7, #0]
 800e2ae:	681a      	ldr	r2, [r3, #0]
 800e2b0:	697b      	ldr	r3, [r7, #20]
 800e2b2:	1ad2      	subs	r2, r2, r3
 800e2b4:	683b      	ldr	r3, [r7, #0]
 800e2b6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e2b8:	6878      	ldr	r0, [r7, #4]
 800e2ba:	f7ff ff9b 	bl	800e1f4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e2be:	2300      	movs	r3, #0
 800e2c0:	61fb      	str	r3, [r7, #28]
 800e2c2:	e004      	b.n	800e2ce <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800e2c4:	683b      	ldr	r3, [r7, #0]
 800e2c6:	2200      	movs	r2, #0
 800e2c8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e2ca:	2301      	movs	r3, #1
 800e2cc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e2ce:	f000 fb51 	bl	800e974 <vPortExitCritical>

	return xReturn;
 800e2d2:	69fb      	ldr	r3, [r7, #28]
}
 800e2d4:	4618      	mov	r0, r3
 800e2d6:	3720      	adds	r7, #32
 800e2d8:	46bd      	mov	sp, r7
 800e2da:	bd80      	pop	{r7, pc}
 800e2dc:	20002c24 	.word	0x20002c24
 800e2e0:	20002c38 	.word	0x20002c38

0800e2e4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e2e4:	b480      	push	{r7}
 800e2e6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e2e8:	4b03      	ldr	r3, [pc, #12]	; (800e2f8 <vTaskMissedYield+0x14>)
 800e2ea:	2201      	movs	r2, #1
 800e2ec:	601a      	str	r2, [r3, #0]
}
 800e2ee:	bf00      	nop
 800e2f0:	46bd      	mov	sp, r7
 800e2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2f6:	4770      	bx	lr
 800e2f8:	20002c34 	.word	0x20002c34

0800e2fc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e2fc:	b580      	push	{r7, lr}
 800e2fe:	b082      	sub	sp, #8
 800e300:	af00      	add	r7, sp, #0
 800e302:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e304:	f000 f852 	bl	800e3ac <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e308:	4b06      	ldr	r3, [pc, #24]	; (800e324 <prvIdleTask+0x28>)
 800e30a:	681b      	ldr	r3, [r3, #0]
 800e30c:	2b01      	cmp	r3, #1
 800e30e:	d9f9      	bls.n	800e304 <prvIdleTask+0x8>
			{
				taskYIELD();
 800e310:	4b05      	ldr	r3, [pc, #20]	; (800e328 <prvIdleTask+0x2c>)
 800e312:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e316:	601a      	str	r2, [r3, #0]
 800e318:	f3bf 8f4f 	dsb	sy
 800e31c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800e320:	e7f0      	b.n	800e304 <prvIdleTask+0x8>
 800e322:	bf00      	nop
 800e324:	20002b24 	.word	0x20002b24
 800e328:	e000ed04 	.word	0xe000ed04

0800e32c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e32c:	b580      	push	{r7, lr}
 800e32e:	b082      	sub	sp, #8
 800e330:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e332:	2300      	movs	r3, #0
 800e334:	607b      	str	r3, [r7, #4]
 800e336:	e00c      	b.n	800e352 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e338:	687a      	ldr	r2, [r7, #4]
 800e33a:	4613      	mov	r3, r2
 800e33c:	009b      	lsls	r3, r3, #2
 800e33e:	4413      	add	r3, r2
 800e340:	009b      	lsls	r3, r3, #2
 800e342:	4a12      	ldr	r2, [pc, #72]	; (800e38c <prvInitialiseTaskLists+0x60>)
 800e344:	4413      	add	r3, r2
 800e346:	4618      	mov	r0, r3
 800e348:	f7fe fd62 	bl	800ce10 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	3301      	adds	r3, #1
 800e350:	607b      	str	r3, [r7, #4]
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	2b06      	cmp	r3, #6
 800e356:	d9ef      	bls.n	800e338 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e358:	480d      	ldr	r0, [pc, #52]	; (800e390 <prvInitialiseTaskLists+0x64>)
 800e35a:	f7fe fd59 	bl	800ce10 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e35e:	480d      	ldr	r0, [pc, #52]	; (800e394 <prvInitialiseTaskLists+0x68>)
 800e360:	f7fe fd56 	bl	800ce10 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e364:	480c      	ldr	r0, [pc, #48]	; (800e398 <prvInitialiseTaskLists+0x6c>)
 800e366:	f7fe fd53 	bl	800ce10 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e36a:	480c      	ldr	r0, [pc, #48]	; (800e39c <prvInitialiseTaskLists+0x70>)
 800e36c:	f7fe fd50 	bl	800ce10 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e370:	480b      	ldr	r0, [pc, #44]	; (800e3a0 <prvInitialiseTaskLists+0x74>)
 800e372:	f7fe fd4d 	bl	800ce10 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e376:	4b0b      	ldr	r3, [pc, #44]	; (800e3a4 <prvInitialiseTaskLists+0x78>)
 800e378:	4a05      	ldr	r2, [pc, #20]	; (800e390 <prvInitialiseTaskLists+0x64>)
 800e37a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e37c:	4b0a      	ldr	r3, [pc, #40]	; (800e3a8 <prvInitialiseTaskLists+0x7c>)
 800e37e:	4a05      	ldr	r2, [pc, #20]	; (800e394 <prvInitialiseTaskLists+0x68>)
 800e380:	601a      	str	r2, [r3, #0]
}
 800e382:	bf00      	nop
 800e384:	3708      	adds	r7, #8
 800e386:	46bd      	mov	sp, r7
 800e388:	bd80      	pop	{r7, pc}
 800e38a:	bf00      	nop
 800e38c:	20002b24 	.word	0x20002b24
 800e390:	20002bb0 	.word	0x20002bb0
 800e394:	20002bc4 	.word	0x20002bc4
 800e398:	20002be0 	.word	0x20002be0
 800e39c:	20002bf4 	.word	0x20002bf4
 800e3a0:	20002c0c 	.word	0x20002c0c
 800e3a4:	20002bd8 	.word	0x20002bd8
 800e3a8:	20002bdc 	.word	0x20002bdc

0800e3ac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e3ac:	b580      	push	{r7, lr}
 800e3ae:	b082      	sub	sp, #8
 800e3b0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e3b2:	e019      	b.n	800e3e8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e3b4:	f000 faae 	bl	800e914 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e3b8:	4b10      	ldr	r3, [pc, #64]	; (800e3fc <prvCheckTasksWaitingTermination+0x50>)
 800e3ba:	68db      	ldr	r3, [r3, #12]
 800e3bc:	68db      	ldr	r3, [r3, #12]
 800e3be:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	3304      	adds	r3, #4
 800e3c4:	4618      	mov	r0, r3
 800e3c6:	f7fe fdad 	bl	800cf24 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e3ca:	4b0d      	ldr	r3, [pc, #52]	; (800e400 <prvCheckTasksWaitingTermination+0x54>)
 800e3cc:	681b      	ldr	r3, [r3, #0]
 800e3ce:	3b01      	subs	r3, #1
 800e3d0:	4a0b      	ldr	r2, [pc, #44]	; (800e400 <prvCheckTasksWaitingTermination+0x54>)
 800e3d2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e3d4:	4b0b      	ldr	r3, [pc, #44]	; (800e404 <prvCheckTasksWaitingTermination+0x58>)
 800e3d6:	681b      	ldr	r3, [r3, #0]
 800e3d8:	3b01      	subs	r3, #1
 800e3da:	4a0a      	ldr	r2, [pc, #40]	; (800e404 <prvCheckTasksWaitingTermination+0x58>)
 800e3dc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e3de:	f000 fac9 	bl	800e974 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e3e2:	6878      	ldr	r0, [r7, #4]
 800e3e4:	f000 f810 	bl	800e408 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e3e8:	4b06      	ldr	r3, [pc, #24]	; (800e404 <prvCheckTasksWaitingTermination+0x58>)
 800e3ea:	681b      	ldr	r3, [r3, #0]
 800e3ec:	2b00      	cmp	r3, #0
 800e3ee:	d1e1      	bne.n	800e3b4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e3f0:	bf00      	nop
 800e3f2:	bf00      	nop
 800e3f4:	3708      	adds	r7, #8
 800e3f6:	46bd      	mov	sp, r7
 800e3f8:	bd80      	pop	{r7, pc}
 800e3fa:	bf00      	nop
 800e3fc:	20002bf4 	.word	0x20002bf4
 800e400:	20002c20 	.word	0x20002c20
 800e404:	20002c08 	.word	0x20002c08

0800e408 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e408:	b580      	push	{r7, lr}
 800e40a:	b084      	sub	sp, #16
 800e40c:	af00      	add	r7, sp, #0
 800e40e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e416:	2b00      	cmp	r3, #0
 800e418:	d108      	bne.n	800e42c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e41e:	4618      	mov	r0, r3
 800e420:	f000 fc26 	bl	800ec70 <vPortFree>
				vPortFree( pxTCB );
 800e424:	6878      	ldr	r0, [r7, #4]
 800e426:	f000 fc23 	bl	800ec70 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e42a:	e018      	b.n	800e45e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e432:	2b01      	cmp	r3, #1
 800e434:	d103      	bne.n	800e43e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800e436:	6878      	ldr	r0, [r7, #4]
 800e438:	f000 fc1a 	bl	800ec70 <vPortFree>
	}
 800e43c:	e00f      	b.n	800e45e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e444:	2b02      	cmp	r3, #2
 800e446:	d00a      	beq.n	800e45e <prvDeleteTCB+0x56>
	__asm volatile
 800e448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e44c:	f383 8811 	msr	BASEPRI, r3
 800e450:	f3bf 8f6f 	isb	sy
 800e454:	f3bf 8f4f 	dsb	sy
 800e458:	60fb      	str	r3, [r7, #12]
}
 800e45a:	bf00      	nop
 800e45c:	e7fe      	b.n	800e45c <prvDeleteTCB+0x54>
	}
 800e45e:	bf00      	nop
 800e460:	3710      	adds	r7, #16
 800e462:	46bd      	mov	sp, r7
 800e464:	bd80      	pop	{r7, pc}
	...

0800e468 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e468:	b480      	push	{r7}
 800e46a:	b083      	sub	sp, #12
 800e46c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e46e:	4b0c      	ldr	r3, [pc, #48]	; (800e4a0 <prvResetNextTaskUnblockTime+0x38>)
 800e470:	681b      	ldr	r3, [r3, #0]
 800e472:	681b      	ldr	r3, [r3, #0]
 800e474:	2b00      	cmp	r3, #0
 800e476:	d104      	bne.n	800e482 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e478:	4b0a      	ldr	r3, [pc, #40]	; (800e4a4 <prvResetNextTaskUnblockTime+0x3c>)
 800e47a:	f04f 32ff 	mov.w	r2, #4294967295
 800e47e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e480:	e008      	b.n	800e494 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e482:	4b07      	ldr	r3, [pc, #28]	; (800e4a0 <prvResetNextTaskUnblockTime+0x38>)
 800e484:	681b      	ldr	r3, [r3, #0]
 800e486:	68db      	ldr	r3, [r3, #12]
 800e488:	68db      	ldr	r3, [r3, #12]
 800e48a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	685b      	ldr	r3, [r3, #4]
 800e490:	4a04      	ldr	r2, [pc, #16]	; (800e4a4 <prvResetNextTaskUnblockTime+0x3c>)
 800e492:	6013      	str	r3, [r2, #0]
}
 800e494:	bf00      	nop
 800e496:	370c      	adds	r7, #12
 800e498:	46bd      	mov	sp, r7
 800e49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e49e:	4770      	bx	lr
 800e4a0:	20002bd8 	.word	0x20002bd8
 800e4a4:	20002c40 	.word	0x20002c40

0800e4a8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e4a8:	b480      	push	{r7}
 800e4aa:	b083      	sub	sp, #12
 800e4ac:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e4ae:	4b0b      	ldr	r3, [pc, #44]	; (800e4dc <xTaskGetSchedulerState+0x34>)
 800e4b0:	681b      	ldr	r3, [r3, #0]
 800e4b2:	2b00      	cmp	r3, #0
 800e4b4:	d102      	bne.n	800e4bc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e4b6:	2301      	movs	r3, #1
 800e4b8:	607b      	str	r3, [r7, #4]
 800e4ba:	e008      	b.n	800e4ce <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e4bc:	4b08      	ldr	r3, [pc, #32]	; (800e4e0 <xTaskGetSchedulerState+0x38>)
 800e4be:	681b      	ldr	r3, [r3, #0]
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	d102      	bne.n	800e4ca <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e4c4:	2302      	movs	r3, #2
 800e4c6:	607b      	str	r3, [r7, #4]
 800e4c8:	e001      	b.n	800e4ce <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e4ca:	2300      	movs	r3, #0
 800e4cc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e4ce:	687b      	ldr	r3, [r7, #4]
	}
 800e4d0:	4618      	mov	r0, r3
 800e4d2:	370c      	adds	r7, #12
 800e4d4:	46bd      	mov	sp, r7
 800e4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4da:	4770      	bx	lr
 800e4dc:	20002c2c 	.word	0x20002c2c
 800e4e0:	20002c48 	.word	0x20002c48

0800e4e4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e4e4:	b580      	push	{r7, lr}
 800e4e6:	b086      	sub	sp, #24
 800e4e8:	af00      	add	r7, sp, #0
 800e4ea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e4f0:	2300      	movs	r3, #0
 800e4f2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	2b00      	cmp	r3, #0
 800e4f8:	d06e      	beq.n	800e5d8 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e4fa:	4b3a      	ldr	r3, [pc, #232]	; (800e5e4 <xTaskPriorityDisinherit+0x100>)
 800e4fc:	681b      	ldr	r3, [r3, #0]
 800e4fe:	693a      	ldr	r2, [r7, #16]
 800e500:	429a      	cmp	r2, r3
 800e502:	d00a      	beq.n	800e51a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800e504:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e508:	f383 8811 	msr	BASEPRI, r3
 800e50c:	f3bf 8f6f 	isb	sy
 800e510:	f3bf 8f4f 	dsb	sy
 800e514:	60fb      	str	r3, [r7, #12]
}
 800e516:	bf00      	nop
 800e518:	e7fe      	b.n	800e518 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800e51a:	693b      	ldr	r3, [r7, #16]
 800e51c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e51e:	2b00      	cmp	r3, #0
 800e520:	d10a      	bne.n	800e538 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800e522:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e526:	f383 8811 	msr	BASEPRI, r3
 800e52a:	f3bf 8f6f 	isb	sy
 800e52e:	f3bf 8f4f 	dsb	sy
 800e532:	60bb      	str	r3, [r7, #8]
}
 800e534:	bf00      	nop
 800e536:	e7fe      	b.n	800e536 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800e538:	693b      	ldr	r3, [r7, #16]
 800e53a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e53c:	1e5a      	subs	r2, r3, #1
 800e53e:	693b      	ldr	r3, [r7, #16]
 800e540:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e542:	693b      	ldr	r3, [r7, #16]
 800e544:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e546:	693b      	ldr	r3, [r7, #16]
 800e548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e54a:	429a      	cmp	r2, r3
 800e54c:	d044      	beq.n	800e5d8 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e54e:	693b      	ldr	r3, [r7, #16]
 800e550:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e552:	2b00      	cmp	r3, #0
 800e554:	d140      	bne.n	800e5d8 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e556:	693b      	ldr	r3, [r7, #16]
 800e558:	3304      	adds	r3, #4
 800e55a:	4618      	mov	r0, r3
 800e55c:	f7fe fce2 	bl	800cf24 <uxListRemove>
 800e560:	4603      	mov	r3, r0
 800e562:	2b00      	cmp	r3, #0
 800e564:	d115      	bne.n	800e592 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800e566:	693b      	ldr	r3, [r7, #16]
 800e568:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e56a:	491f      	ldr	r1, [pc, #124]	; (800e5e8 <xTaskPriorityDisinherit+0x104>)
 800e56c:	4613      	mov	r3, r2
 800e56e:	009b      	lsls	r3, r3, #2
 800e570:	4413      	add	r3, r2
 800e572:	009b      	lsls	r3, r3, #2
 800e574:	440b      	add	r3, r1
 800e576:	681b      	ldr	r3, [r3, #0]
 800e578:	2b00      	cmp	r3, #0
 800e57a:	d10a      	bne.n	800e592 <xTaskPriorityDisinherit+0xae>
 800e57c:	693b      	ldr	r3, [r7, #16]
 800e57e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e580:	2201      	movs	r2, #1
 800e582:	fa02 f303 	lsl.w	r3, r2, r3
 800e586:	43da      	mvns	r2, r3
 800e588:	4b18      	ldr	r3, [pc, #96]	; (800e5ec <xTaskPriorityDisinherit+0x108>)
 800e58a:	681b      	ldr	r3, [r3, #0]
 800e58c:	4013      	ands	r3, r2
 800e58e:	4a17      	ldr	r2, [pc, #92]	; (800e5ec <xTaskPriorityDisinherit+0x108>)
 800e590:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e592:	693b      	ldr	r3, [r7, #16]
 800e594:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e596:	693b      	ldr	r3, [r7, #16]
 800e598:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e59a:	693b      	ldr	r3, [r7, #16]
 800e59c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e59e:	f1c3 0207 	rsb	r2, r3, #7
 800e5a2:	693b      	ldr	r3, [r7, #16]
 800e5a4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e5a6:	693b      	ldr	r3, [r7, #16]
 800e5a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e5aa:	2201      	movs	r2, #1
 800e5ac:	409a      	lsls	r2, r3
 800e5ae:	4b0f      	ldr	r3, [pc, #60]	; (800e5ec <xTaskPriorityDisinherit+0x108>)
 800e5b0:	681b      	ldr	r3, [r3, #0]
 800e5b2:	4313      	orrs	r3, r2
 800e5b4:	4a0d      	ldr	r2, [pc, #52]	; (800e5ec <xTaskPriorityDisinherit+0x108>)
 800e5b6:	6013      	str	r3, [r2, #0]
 800e5b8:	693b      	ldr	r3, [r7, #16]
 800e5ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e5bc:	4613      	mov	r3, r2
 800e5be:	009b      	lsls	r3, r3, #2
 800e5c0:	4413      	add	r3, r2
 800e5c2:	009b      	lsls	r3, r3, #2
 800e5c4:	4a08      	ldr	r2, [pc, #32]	; (800e5e8 <xTaskPriorityDisinherit+0x104>)
 800e5c6:	441a      	add	r2, r3
 800e5c8:	693b      	ldr	r3, [r7, #16]
 800e5ca:	3304      	adds	r3, #4
 800e5cc:	4619      	mov	r1, r3
 800e5ce:	4610      	mov	r0, r2
 800e5d0:	f7fe fc4b 	bl	800ce6a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e5d4:	2301      	movs	r3, #1
 800e5d6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e5d8:	697b      	ldr	r3, [r7, #20]
	}
 800e5da:	4618      	mov	r0, r3
 800e5dc:	3718      	adds	r7, #24
 800e5de:	46bd      	mov	sp, r7
 800e5e0:	bd80      	pop	{r7, pc}
 800e5e2:	bf00      	nop
 800e5e4:	20002b20 	.word	0x20002b20
 800e5e8:	20002b24 	.word	0x20002b24
 800e5ec:	20002c28 	.word	0x20002c28

0800e5f0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e5f0:	b580      	push	{r7, lr}
 800e5f2:	b084      	sub	sp, #16
 800e5f4:	af00      	add	r7, sp, #0
 800e5f6:	6078      	str	r0, [r7, #4]
 800e5f8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e5fa:	4b29      	ldr	r3, [pc, #164]	; (800e6a0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800e5fc:	681b      	ldr	r3, [r3, #0]
 800e5fe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e600:	4b28      	ldr	r3, [pc, #160]	; (800e6a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e602:	681b      	ldr	r3, [r3, #0]
 800e604:	3304      	adds	r3, #4
 800e606:	4618      	mov	r0, r3
 800e608:	f7fe fc8c 	bl	800cf24 <uxListRemove>
 800e60c:	4603      	mov	r3, r0
 800e60e:	2b00      	cmp	r3, #0
 800e610:	d10b      	bne.n	800e62a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800e612:	4b24      	ldr	r3, [pc, #144]	; (800e6a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e614:	681b      	ldr	r3, [r3, #0]
 800e616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e618:	2201      	movs	r2, #1
 800e61a:	fa02 f303 	lsl.w	r3, r2, r3
 800e61e:	43da      	mvns	r2, r3
 800e620:	4b21      	ldr	r3, [pc, #132]	; (800e6a8 <prvAddCurrentTaskToDelayedList+0xb8>)
 800e622:	681b      	ldr	r3, [r3, #0]
 800e624:	4013      	ands	r3, r2
 800e626:	4a20      	ldr	r2, [pc, #128]	; (800e6a8 <prvAddCurrentTaskToDelayedList+0xb8>)
 800e628:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e630:	d10a      	bne.n	800e648 <prvAddCurrentTaskToDelayedList+0x58>
 800e632:	683b      	ldr	r3, [r7, #0]
 800e634:	2b00      	cmp	r3, #0
 800e636:	d007      	beq.n	800e648 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e638:	4b1a      	ldr	r3, [pc, #104]	; (800e6a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e63a:	681b      	ldr	r3, [r3, #0]
 800e63c:	3304      	adds	r3, #4
 800e63e:	4619      	mov	r1, r3
 800e640:	481a      	ldr	r0, [pc, #104]	; (800e6ac <prvAddCurrentTaskToDelayedList+0xbc>)
 800e642:	f7fe fc12 	bl	800ce6a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e646:	e026      	b.n	800e696 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e648:	68fa      	ldr	r2, [r7, #12]
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	4413      	add	r3, r2
 800e64e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e650:	4b14      	ldr	r3, [pc, #80]	; (800e6a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e652:	681b      	ldr	r3, [r3, #0]
 800e654:	68ba      	ldr	r2, [r7, #8]
 800e656:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e658:	68ba      	ldr	r2, [r7, #8]
 800e65a:	68fb      	ldr	r3, [r7, #12]
 800e65c:	429a      	cmp	r2, r3
 800e65e:	d209      	bcs.n	800e674 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e660:	4b13      	ldr	r3, [pc, #76]	; (800e6b0 <prvAddCurrentTaskToDelayedList+0xc0>)
 800e662:	681a      	ldr	r2, [r3, #0]
 800e664:	4b0f      	ldr	r3, [pc, #60]	; (800e6a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e666:	681b      	ldr	r3, [r3, #0]
 800e668:	3304      	adds	r3, #4
 800e66a:	4619      	mov	r1, r3
 800e66c:	4610      	mov	r0, r2
 800e66e:	f7fe fc20 	bl	800ceb2 <vListInsert>
}
 800e672:	e010      	b.n	800e696 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e674:	4b0f      	ldr	r3, [pc, #60]	; (800e6b4 <prvAddCurrentTaskToDelayedList+0xc4>)
 800e676:	681a      	ldr	r2, [r3, #0]
 800e678:	4b0a      	ldr	r3, [pc, #40]	; (800e6a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e67a:	681b      	ldr	r3, [r3, #0]
 800e67c:	3304      	adds	r3, #4
 800e67e:	4619      	mov	r1, r3
 800e680:	4610      	mov	r0, r2
 800e682:	f7fe fc16 	bl	800ceb2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e686:	4b0c      	ldr	r3, [pc, #48]	; (800e6b8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e688:	681b      	ldr	r3, [r3, #0]
 800e68a:	68ba      	ldr	r2, [r7, #8]
 800e68c:	429a      	cmp	r2, r3
 800e68e:	d202      	bcs.n	800e696 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800e690:	4a09      	ldr	r2, [pc, #36]	; (800e6b8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e692:	68bb      	ldr	r3, [r7, #8]
 800e694:	6013      	str	r3, [r2, #0]
}
 800e696:	bf00      	nop
 800e698:	3710      	adds	r7, #16
 800e69a:	46bd      	mov	sp, r7
 800e69c:	bd80      	pop	{r7, pc}
 800e69e:	bf00      	nop
 800e6a0:	20002c24 	.word	0x20002c24
 800e6a4:	20002b20 	.word	0x20002b20
 800e6a8:	20002c28 	.word	0x20002c28
 800e6ac:	20002c0c 	.word	0x20002c0c
 800e6b0:	20002bdc 	.word	0x20002bdc
 800e6b4:	20002bd8 	.word	0x20002bd8
 800e6b8:	20002c40 	.word	0x20002c40

0800e6bc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e6bc:	b480      	push	{r7}
 800e6be:	b085      	sub	sp, #20
 800e6c0:	af00      	add	r7, sp, #0
 800e6c2:	60f8      	str	r0, [r7, #12]
 800e6c4:	60b9      	str	r1, [r7, #8]
 800e6c6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e6c8:	68fb      	ldr	r3, [r7, #12]
 800e6ca:	3b04      	subs	r3, #4
 800e6cc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e6ce:	68fb      	ldr	r3, [r7, #12]
 800e6d0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800e6d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e6d6:	68fb      	ldr	r3, [r7, #12]
 800e6d8:	3b04      	subs	r3, #4
 800e6da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e6dc:	68bb      	ldr	r3, [r7, #8]
 800e6de:	f023 0201 	bic.w	r2, r3, #1
 800e6e2:	68fb      	ldr	r3, [r7, #12]
 800e6e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e6e6:	68fb      	ldr	r3, [r7, #12]
 800e6e8:	3b04      	subs	r3, #4
 800e6ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e6ec:	4a0c      	ldr	r2, [pc, #48]	; (800e720 <pxPortInitialiseStack+0x64>)
 800e6ee:	68fb      	ldr	r3, [r7, #12]
 800e6f0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e6f2:	68fb      	ldr	r3, [r7, #12]
 800e6f4:	3b14      	subs	r3, #20
 800e6f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e6f8:	687a      	ldr	r2, [r7, #4]
 800e6fa:	68fb      	ldr	r3, [r7, #12]
 800e6fc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e6fe:	68fb      	ldr	r3, [r7, #12]
 800e700:	3b04      	subs	r3, #4
 800e702:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e704:	68fb      	ldr	r3, [r7, #12]
 800e706:	f06f 0202 	mvn.w	r2, #2
 800e70a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e70c:	68fb      	ldr	r3, [r7, #12]
 800e70e:	3b20      	subs	r3, #32
 800e710:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e712:	68fb      	ldr	r3, [r7, #12]
}
 800e714:	4618      	mov	r0, r3
 800e716:	3714      	adds	r7, #20
 800e718:	46bd      	mov	sp, r7
 800e71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e71e:	4770      	bx	lr
 800e720:	0800e725 	.word	0x0800e725

0800e724 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e724:	b480      	push	{r7}
 800e726:	b085      	sub	sp, #20
 800e728:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e72a:	2300      	movs	r3, #0
 800e72c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e72e:	4b12      	ldr	r3, [pc, #72]	; (800e778 <prvTaskExitError+0x54>)
 800e730:	681b      	ldr	r3, [r3, #0]
 800e732:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e736:	d00a      	beq.n	800e74e <prvTaskExitError+0x2a>
	__asm volatile
 800e738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e73c:	f383 8811 	msr	BASEPRI, r3
 800e740:	f3bf 8f6f 	isb	sy
 800e744:	f3bf 8f4f 	dsb	sy
 800e748:	60fb      	str	r3, [r7, #12]
}
 800e74a:	bf00      	nop
 800e74c:	e7fe      	b.n	800e74c <prvTaskExitError+0x28>
	__asm volatile
 800e74e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e752:	f383 8811 	msr	BASEPRI, r3
 800e756:	f3bf 8f6f 	isb	sy
 800e75a:	f3bf 8f4f 	dsb	sy
 800e75e:	60bb      	str	r3, [r7, #8]
}
 800e760:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e762:	bf00      	nop
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	2b00      	cmp	r3, #0
 800e768:	d0fc      	beq.n	800e764 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e76a:	bf00      	nop
 800e76c:	bf00      	nop
 800e76e:	3714      	adds	r7, #20
 800e770:	46bd      	mov	sp, r7
 800e772:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e776:	4770      	bx	lr
 800e778:	20000018 	.word	0x20000018
 800e77c:	00000000 	.word	0x00000000

0800e780 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e780:	4b07      	ldr	r3, [pc, #28]	; (800e7a0 <pxCurrentTCBConst2>)
 800e782:	6819      	ldr	r1, [r3, #0]
 800e784:	6808      	ldr	r0, [r1, #0]
 800e786:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e78a:	f380 8809 	msr	PSP, r0
 800e78e:	f3bf 8f6f 	isb	sy
 800e792:	f04f 0000 	mov.w	r0, #0
 800e796:	f380 8811 	msr	BASEPRI, r0
 800e79a:	4770      	bx	lr
 800e79c:	f3af 8000 	nop.w

0800e7a0 <pxCurrentTCBConst2>:
 800e7a0:	20002b20 	.word	0x20002b20
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e7a4:	bf00      	nop
 800e7a6:	bf00      	nop

0800e7a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e7a8:	4808      	ldr	r0, [pc, #32]	; (800e7cc <prvPortStartFirstTask+0x24>)
 800e7aa:	6800      	ldr	r0, [r0, #0]
 800e7ac:	6800      	ldr	r0, [r0, #0]
 800e7ae:	f380 8808 	msr	MSP, r0
 800e7b2:	f04f 0000 	mov.w	r0, #0
 800e7b6:	f380 8814 	msr	CONTROL, r0
 800e7ba:	b662      	cpsie	i
 800e7bc:	b661      	cpsie	f
 800e7be:	f3bf 8f4f 	dsb	sy
 800e7c2:	f3bf 8f6f 	isb	sy
 800e7c6:	df00      	svc	0
 800e7c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e7ca:	bf00      	nop
 800e7cc:	e000ed08 	.word	0xe000ed08

0800e7d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e7d0:	b580      	push	{r7, lr}
 800e7d2:	b086      	sub	sp, #24
 800e7d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e7d6:	4b46      	ldr	r3, [pc, #280]	; (800e8f0 <xPortStartScheduler+0x120>)
 800e7d8:	681b      	ldr	r3, [r3, #0]
 800e7da:	4a46      	ldr	r2, [pc, #280]	; (800e8f4 <xPortStartScheduler+0x124>)
 800e7dc:	4293      	cmp	r3, r2
 800e7de:	d10a      	bne.n	800e7f6 <xPortStartScheduler+0x26>
	__asm volatile
 800e7e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7e4:	f383 8811 	msr	BASEPRI, r3
 800e7e8:	f3bf 8f6f 	isb	sy
 800e7ec:	f3bf 8f4f 	dsb	sy
 800e7f0:	613b      	str	r3, [r7, #16]
}
 800e7f2:	bf00      	nop
 800e7f4:	e7fe      	b.n	800e7f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e7f6:	4b3e      	ldr	r3, [pc, #248]	; (800e8f0 <xPortStartScheduler+0x120>)
 800e7f8:	681b      	ldr	r3, [r3, #0]
 800e7fa:	4a3f      	ldr	r2, [pc, #252]	; (800e8f8 <xPortStartScheduler+0x128>)
 800e7fc:	4293      	cmp	r3, r2
 800e7fe:	d10a      	bne.n	800e816 <xPortStartScheduler+0x46>
	__asm volatile
 800e800:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e804:	f383 8811 	msr	BASEPRI, r3
 800e808:	f3bf 8f6f 	isb	sy
 800e80c:	f3bf 8f4f 	dsb	sy
 800e810:	60fb      	str	r3, [r7, #12]
}
 800e812:	bf00      	nop
 800e814:	e7fe      	b.n	800e814 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e816:	4b39      	ldr	r3, [pc, #228]	; (800e8fc <xPortStartScheduler+0x12c>)
 800e818:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e81a:	697b      	ldr	r3, [r7, #20]
 800e81c:	781b      	ldrb	r3, [r3, #0]
 800e81e:	b2db      	uxtb	r3, r3
 800e820:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e822:	697b      	ldr	r3, [r7, #20]
 800e824:	22ff      	movs	r2, #255	; 0xff
 800e826:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e828:	697b      	ldr	r3, [r7, #20]
 800e82a:	781b      	ldrb	r3, [r3, #0]
 800e82c:	b2db      	uxtb	r3, r3
 800e82e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e830:	78fb      	ldrb	r3, [r7, #3]
 800e832:	b2db      	uxtb	r3, r3
 800e834:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800e838:	b2da      	uxtb	r2, r3
 800e83a:	4b31      	ldr	r3, [pc, #196]	; (800e900 <xPortStartScheduler+0x130>)
 800e83c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e83e:	4b31      	ldr	r3, [pc, #196]	; (800e904 <xPortStartScheduler+0x134>)
 800e840:	2207      	movs	r2, #7
 800e842:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e844:	e009      	b.n	800e85a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800e846:	4b2f      	ldr	r3, [pc, #188]	; (800e904 <xPortStartScheduler+0x134>)
 800e848:	681b      	ldr	r3, [r3, #0]
 800e84a:	3b01      	subs	r3, #1
 800e84c:	4a2d      	ldr	r2, [pc, #180]	; (800e904 <xPortStartScheduler+0x134>)
 800e84e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e850:	78fb      	ldrb	r3, [r7, #3]
 800e852:	b2db      	uxtb	r3, r3
 800e854:	005b      	lsls	r3, r3, #1
 800e856:	b2db      	uxtb	r3, r3
 800e858:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e85a:	78fb      	ldrb	r3, [r7, #3]
 800e85c:	b2db      	uxtb	r3, r3
 800e85e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e862:	2b80      	cmp	r3, #128	; 0x80
 800e864:	d0ef      	beq.n	800e846 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e866:	4b27      	ldr	r3, [pc, #156]	; (800e904 <xPortStartScheduler+0x134>)
 800e868:	681b      	ldr	r3, [r3, #0]
 800e86a:	f1c3 0307 	rsb	r3, r3, #7
 800e86e:	2b04      	cmp	r3, #4
 800e870:	d00a      	beq.n	800e888 <xPortStartScheduler+0xb8>
	__asm volatile
 800e872:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e876:	f383 8811 	msr	BASEPRI, r3
 800e87a:	f3bf 8f6f 	isb	sy
 800e87e:	f3bf 8f4f 	dsb	sy
 800e882:	60bb      	str	r3, [r7, #8]
}
 800e884:	bf00      	nop
 800e886:	e7fe      	b.n	800e886 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e888:	4b1e      	ldr	r3, [pc, #120]	; (800e904 <xPortStartScheduler+0x134>)
 800e88a:	681b      	ldr	r3, [r3, #0]
 800e88c:	021b      	lsls	r3, r3, #8
 800e88e:	4a1d      	ldr	r2, [pc, #116]	; (800e904 <xPortStartScheduler+0x134>)
 800e890:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e892:	4b1c      	ldr	r3, [pc, #112]	; (800e904 <xPortStartScheduler+0x134>)
 800e894:	681b      	ldr	r3, [r3, #0]
 800e896:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e89a:	4a1a      	ldr	r2, [pc, #104]	; (800e904 <xPortStartScheduler+0x134>)
 800e89c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	b2da      	uxtb	r2, r3
 800e8a2:	697b      	ldr	r3, [r7, #20]
 800e8a4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e8a6:	4b18      	ldr	r3, [pc, #96]	; (800e908 <xPortStartScheduler+0x138>)
 800e8a8:	681b      	ldr	r3, [r3, #0]
 800e8aa:	4a17      	ldr	r2, [pc, #92]	; (800e908 <xPortStartScheduler+0x138>)
 800e8ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e8b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e8b2:	4b15      	ldr	r3, [pc, #84]	; (800e908 <xPortStartScheduler+0x138>)
 800e8b4:	681b      	ldr	r3, [r3, #0]
 800e8b6:	4a14      	ldr	r2, [pc, #80]	; (800e908 <xPortStartScheduler+0x138>)
 800e8b8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800e8bc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e8be:	f000 f8dd 	bl	800ea7c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e8c2:	4b12      	ldr	r3, [pc, #72]	; (800e90c <xPortStartScheduler+0x13c>)
 800e8c4:	2200      	movs	r2, #0
 800e8c6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e8c8:	f000 f8fc 	bl	800eac4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e8cc:	4b10      	ldr	r3, [pc, #64]	; (800e910 <xPortStartScheduler+0x140>)
 800e8ce:	681b      	ldr	r3, [r3, #0]
 800e8d0:	4a0f      	ldr	r2, [pc, #60]	; (800e910 <xPortStartScheduler+0x140>)
 800e8d2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800e8d6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e8d8:	f7ff ff66 	bl	800e7a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e8dc:	f7ff fba8 	bl	800e030 <vTaskSwitchContext>
	prvTaskExitError();
 800e8e0:	f7ff ff20 	bl	800e724 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e8e4:	2300      	movs	r3, #0
}
 800e8e6:	4618      	mov	r0, r3
 800e8e8:	3718      	adds	r7, #24
 800e8ea:	46bd      	mov	sp, r7
 800e8ec:	bd80      	pop	{r7, pc}
 800e8ee:	bf00      	nop
 800e8f0:	e000ed00 	.word	0xe000ed00
 800e8f4:	410fc271 	.word	0x410fc271
 800e8f8:	410fc270 	.word	0x410fc270
 800e8fc:	e000e400 	.word	0xe000e400
 800e900:	20002c4c 	.word	0x20002c4c
 800e904:	20002c50 	.word	0x20002c50
 800e908:	e000ed20 	.word	0xe000ed20
 800e90c:	20000018 	.word	0x20000018
 800e910:	e000ef34 	.word	0xe000ef34

0800e914 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e914:	b480      	push	{r7}
 800e916:	b083      	sub	sp, #12
 800e918:	af00      	add	r7, sp, #0
	__asm volatile
 800e91a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e91e:	f383 8811 	msr	BASEPRI, r3
 800e922:	f3bf 8f6f 	isb	sy
 800e926:	f3bf 8f4f 	dsb	sy
 800e92a:	607b      	str	r3, [r7, #4]
}
 800e92c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e92e:	4b0f      	ldr	r3, [pc, #60]	; (800e96c <vPortEnterCritical+0x58>)
 800e930:	681b      	ldr	r3, [r3, #0]
 800e932:	3301      	adds	r3, #1
 800e934:	4a0d      	ldr	r2, [pc, #52]	; (800e96c <vPortEnterCritical+0x58>)
 800e936:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e938:	4b0c      	ldr	r3, [pc, #48]	; (800e96c <vPortEnterCritical+0x58>)
 800e93a:	681b      	ldr	r3, [r3, #0]
 800e93c:	2b01      	cmp	r3, #1
 800e93e:	d10f      	bne.n	800e960 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e940:	4b0b      	ldr	r3, [pc, #44]	; (800e970 <vPortEnterCritical+0x5c>)
 800e942:	681b      	ldr	r3, [r3, #0]
 800e944:	b2db      	uxtb	r3, r3
 800e946:	2b00      	cmp	r3, #0
 800e948:	d00a      	beq.n	800e960 <vPortEnterCritical+0x4c>
	__asm volatile
 800e94a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e94e:	f383 8811 	msr	BASEPRI, r3
 800e952:	f3bf 8f6f 	isb	sy
 800e956:	f3bf 8f4f 	dsb	sy
 800e95a:	603b      	str	r3, [r7, #0]
}
 800e95c:	bf00      	nop
 800e95e:	e7fe      	b.n	800e95e <vPortEnterCritical+0x4a>
	}
}
 800e960:	bf00      	nop
 800e962:	370c      	adds	r7, #12
 800e964:	46bd      	mov	sp, r7
 800e966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e96a:	4770      	bx	lr
 800e96c:	20000018 	.word	0x20000018
 800e970:	e000ed04 	.word	0xe000ed04

0800e974 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e974:	b480      	push	{r7}
 800e976:	b083      	sub	sp, #12
 800e978:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e97a:	4b12      	ldr	r3, [pc, #72]	; (800e9c4 <vPortExitCritical+0x50>)
 800e97c:	681b      	ldr	r3, [r3, #0]
 800e97e:	2b00      	cmp	r3, #0
 800e980:	d10a      	bne.n	800e998 <vPortExitCritical+0x24>
	__asm volatile
 800e982:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e986:	f383 8811 	msr	BASEPRI, r3
 800e98a:	f3bf 8f6f 	isb	sy
 800e98e:	f3bf 8f4f 	dsb	sy
 800e992:	607b      	str	r3, [r7, #4]
}
 800e994:	bf00      	nop
 800e996:	e7fe      	b.n	800e996 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800e998:	4b0a      	ldr	r3, [pc, #40]	; (800e9c4 <vPortExitCritical+0x50>)
 800e99a:	681b      	ldr	r3, [r3, #0]
 800e99c:	3b01      	subs	r3, #1
 800e99e:	4a09      	ldr	r2, [pc, #36]	; (800e9c4 <vPortExitCritical+0x50>)
 800e9a0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e9a2:	4b08      	ldr	r3, [pc, #32]	; (800e9c4 <vPortExitCritical+0x50>)
 800e9a4:	681b      	ldr	r3, [r3, #0]
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	d105      	bne.n	800e9b6 <vPortExitCritical+0x42>
 800e9aa:	2300      	movs	r3, #0
 800e9ac:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800e9ae:	683b      	ldr	r3, [r7, #0]
 800e9b0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800e9b4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800e9b6:	bf00      	nop
 800e9b8:	370c      	adds	r7, #12
 800e9ba:	46bd      	mov	sp, r7
 800e9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9c0:	4770      	bx	lr
 800e9c2:	bf00      	nop
 800e9c4:	20000018 	.word	0x20000018
	...

0800e9d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e9d0:	f3ef 8009 	mrs	r0, PSP
 800e9d4:	f3bf 8f6f 	isb	sy
 800e9d8:	4b15      	ldr	r3, [pc, #84]	; (800ea30 <pxCurrentTCBConst>)
 800e9da:	681a      	ldr	r2, [r3, #0]
 800e9dc:	f01e 0f10 	tst.w	lr, #16
 800e9e0:	bf08      	it	eq
 800e9e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e9e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9ea:	6010      	str	r0, [r2, #0]
 800e9ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e9f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800e9f4:	f380 8811 	msr	BASEPRI, r0
 800e9f8:	f3bf 8f4f 	dsb	sy
 800e9fc:	f3bf 8f6f 	isb	sy
 800ea00:	f7ff fb16 	bl	800e030 <vTaskSwitchContext>
 800ea04:	f04f 0000 	mov.w	r0, #0
 800ea08:	f380 8811 	msr	BASEPRI, r0
 800ea0c:	bc09      	pop	{r0, r3}
 800ea0e:	6819      	ldr	r1, [r3, #0]
 800ea10:	6808      	ldr	r0, [r1, #0]
 800ea12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea16:	f01e 0f10 	tst.w	lr, #16
 800ea1a:	bf08      	it	eq
 800ea1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ea20:	f380 8809 	msr	PSP, r0
 800ea24:	f3bf 8f6f 	isb	sy
 800ea28:	4770      	bx	lr
 800ea2a:	bf00      	nop
 800ea2c:	f3af 8000 	nop.w

0800ea30 <pxCurrentTCBConst>:
 800ea30:	20002b20 	.word	0x20002b20
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ea34:	bf00      	nop
 800ea36:	bf00      	nop

0800ea38 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ea38:	b580      	push	{r7, lr}
 800ea3a:	b082      	sub	sp, #8
 800ea3c:	af00      	add	r7, sp, #0
	__asm volatile
 800ea3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea42:	f383 8811 	msr	BASEPRI, r3
 800ea46:	f3bf 8f6f 	isb	sy
 800ea4a:	f3bf 8f4f 	dsb	sy
 800ea4e:	607b      	str	r3, [r7, #4]
}
 800ea50:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ea52:	f7ff fa35 	bl	800dec0 <xTaskIncrementTick>
 800ea56:	4603      	mov	r3, r0
 800ea58:	2b00      	cmp	r3, #0
 800ea5a:	d003      	beq.n	800ea64 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ea5c:	4b06      	ldr	r3, [pc, #24]	; (800ea78 <xPortSysTickHandler+0x40>)
 800ea5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ea62:	601a      	str	r2, [r3, #0]
 800ea64:	2300      	movs	r3, #0
 800ea66:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ea68:	683b      	ldr	r3, [r7, #0]
 800ea6a:	f383 8811 	msr	BASEPRI, r3
}
 800ea6e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ea70:	bf00      	nop
 800ea72:	3708      	adds	r7, #8
 800ea74:	46bd      	mov	sp, r7
 800ea76:	bd80      	pop	{r7, pc}
 800ea78:	e000ed04 	.word	0xe000ed04

0800ea7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ea7c:	b480      	push	{r7}
 800ea7e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ea80:	4b0b      	ldr	r3, [pc, #44]	; (800eab0 <vPortSetupTimerInterrupt+0x34>)
 800ea82:	2200      	movs	r2, #0
 800ea84:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ea86:	4b0b      	ldr	r3, [pc, #44]	; (800eab4 <vPortSetupTimerInterrupt+0x38>)
 800ea88:	2200      	movs	r2, #0
 800ea8a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ea8c:	4b0a      	ldr	r3, [pc, #40]	; (800eab8 <vPortSetupTimerInterrupt+0x3c>)
 800ea8e:	681b      	ldr	r3, [r3, #0]
 800ea90:	4a0a      	ldr	r2, [pc, #40]	; (800eabc <vPortSetupTimerInterrupt+0x40>)
 800ea92:	fba2 2303 	umull	r2, r3, r2, r3
 800ea96:	099b      	lsrs	r3, r3, #6
 800ea98:	4a09      	ldr	r2, [pc, #36]	; (800eac0 <vPortSetupTimerInterrupt+0x44>)
 800ea9a:	3b01      	subs	r3, #1
 800ea9c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ea9e:	4b04      	ldr	r3, [pc, #16]	; (800eab0 <vPortSetupTimerInterrupt+0x34>)
 800eaa0:	2207      	movs	r2, #7
 800eaa2:	601a      	str	r2, [r3, #0]
}
 800eaa4:	bf00      	nop
 800eaa6:	46bd      	mov	sp, r7
 800eaa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaac:	4770      	bx	lr
 800eaae:	bf00      	nop
 800eab0:	e000e010 	.word	0xe000e010
 800eab4:	e000e018 	.word	0xe000e018
 800eab8:	2000000c 	.word	0x2000000c
 800eabc:	10624dd3 	.word	0x10624dd3
 800eac0:	e000e014 	.word	0xe000e014

0800eac4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800eac4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800ead4 <vPortEnableVFP+0x10>
 800eac8:	6801      	ldr	r1, [r0, #0]
 800eaca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800eace:	6001      	str	r1, [r0, #0]
 800ead0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ead2:	bf00      	nop
 800ead4:	e000ed88 	.word	0xe000ed88

0800ead8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ead8:	b580      	push	{r7, lr}
 800eada:	b08a      	sub	sp, #40	; 0x28
 800eadc:	af00      	add	r7, sp, #0
 800eade:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800eae0:	2300      	movs	r3, #0
 800eae2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800eae4:	f7ff f942 	bl	800dd6c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800eae8:	4b5b      	ldr	r3, [pc, #364]	; (800ec58 <pvPortMalloc+0x180>)
 800eaea:	681b      	ldr	r3, [r3, #0]
 800eaec:	2b00      	cmp	r3, #0
 800eaee:	d101      	bne.n	800eaf4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800eaf0:	f000 f920 	bl	800ed34 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800eaf4:	4b59      	ldr	r3, [pc, #356]	; (800ec5c <pvPortMalloc+0x184>)
 800eaf6:	681a      	ldr	r2, [r3, #0]
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	4013      	ands	r3, r2
 800eafc:	2b00      	cmp	r3, #0
 800eafe:	f040 8093 	bne.w	800ec28 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	2b00      	cmp	r3, #0
 800eb06:	d01d      	beq.n	800eb44 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800eb08:	2208      	movs	r2, #8
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	4413      	add	r3, r2
 800eb0e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	f003 0307 	and.w	r3, r3, #7
 800eb16:	2b00      	cmp	r3, #0
 800eb18:	d014      	beq.n	800eb44 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	f023 0307 	bic.w	r3, r3, #7
 800eb20:	3308      	adds	r3, #8
 800eb22:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	f003 0307 	and.w	r3, r3, #7
 800eb2a:	2b00      	cmp	r3, #0
 800eb2c:	d00a      	beq.n	800eb44 <pvPortMalloc+0x6c>
	__asm volatile
 800eb2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb32:	f383 8811 	msr	BASEPRI, r3
 800eb36:	f3bf 8f6f 	isb	sy
 800eb3a:	f3bf 8f4f 	dsb	sy
 800eb3e:	617b      	str	r3, [r7, #20]
}
 800eb40:	bf00      	nop
 800eb42:	e7fe      	b.n	800eb42 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	2b00      	cmp	r3, #0
 800eb48:	d06e      	beq.n	800ec28 <pvPortMalloc+0x150>
 800eb4a:	4b45      	ldr	r3, [pc, #276]	; (800ec60 <pvPortMalloc+0x188>)
 800eb4c:	681b      	ldr	r3, [r3, #0]
 800eb4e:	687a      	ldr	r2, [r7, #4]
 800eb50:	429a      	cmp	r2, r3
 800eb52:	d869      	bhi.n	800ec28 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800eb54:	4b43      	ldr	r3, [pc, #268]	; (800ec64 <pvPortMalloc+0x18c>)
 800eb56:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800eb58:	4b42      	ldr	r3, [pc, #264]	; (800ec64 <pvPortMalloc+0x18c>)
 800eb5a:	681b      	ldr	r3, [r3, #0]
 800eb5c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800eb5e:	e004      	b.n	800eb6a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800eb60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb62:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800eb64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb66:	681b      	ldr	r3, [r3, #0]
 800eb68:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800eb6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb6c:	685b      	ldr	r3, [r3, #4]
 800eb6e:	687a      	ldr	r2, [r7, #4]
 800eb70:	429a      	cmp	r2, r3
 800eb72:	d903      	bls.n	800eb7c <pvPortMalloc+0xa4>
 800eb74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb76:	681b      	ldr	r3, [r3, #0]
 800eb78:	2b00      	cmp	r3, #0
 800eb7a:	d1f1      	bne.n	800eb60 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800eb7c:	4b36      	ldr	r3, [pc, #216]	; (800ec58 <pvPortMalloc+0x180>)
 800eb7e:	681b      	ldr	r3, [r3, #0]
 800eb80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eb82:	429a      	cmp	r2, r3
 800eb84:	d050      	beq.n	800ec28 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800eb86:	6a3b      	ldr	r3, [r7, #32]
 800eb88:	681b      	ldr	r3, [r3, #0]
 800eb8a:	2208      	movs	r2, #8
 800eb8c:	4413      	add	r3, r2
 800eb8e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800eb90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb92:	681a      	ldr	r2, [r3, #0]
 800eb94:	6a3b      	ldr	r3, [r7, #32]
 800eb96:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800eb98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb9a:	685a      	ldr	r2, [r3, #4]
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	1ad2      	subs	r2, r2, r3
 800eba0:	2308      	movs	r3, #8
 800eba2:	005b      	lsls	r3, r3, #1
 800eba4:	429a      	cmp	r2, r3
 800eba6:	d91f      	bls.n	800ebe8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800eba8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	4413      	add	r3, r2
 800ebae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ebb0:	69bb      	ldr	r3, [r7, #24]
 800ebb2:	f003 0307 	and.w	r3, r3, #7
 800ebb6:	2b00      	cmp	r3, #0
 800ebb8:	d00a      	beq.n	800ebd0 <pvPortMalloc+0xf8>
	__asm volatile
 800ebba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebbe:	f383 8811 	msr	BASEPRI, r3
 800ebc2:	f3bf 8f6f 	isb	sy
 800ebc6:	f3bf 8f4f 	dsb	sy
 800ebca:	613b      	str	r3, [r7, #16]
}
 800ebcc:	bf00      	nop
 800ebce:	e7fe      	b.n	800ebce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ebd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebd2:	685a      	ldr	r2, [r3, #4]
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	1ad2      	subs	r2, r2, r3
 800ebd8:	69bb      	ldr	r3, [r7, #24]
 800ebda:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ebdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebde:	687a      	ldr	r2, [r7, #4]
 800ebe0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ebe2:	69b8      	ldr	r0, [r7, #24]
 800ebe4:	f000 f908 	bl	800edf8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ebe8:	4b1d      	ldr	r3, [pc, #116]	; (800ec60 <pvPortMalloc+0x188>)
 800ebea:	681a      	ldr	r2, [r3, #0]
 800ebec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebee:	685b      	ldr	r3, [r3, #4]
 800ebf0:	1ad3      	subs	r3, r2, r3
 800ebf2:	4a1b      	ldr	r2, [pc, #108]	; (800ec60 <pvPortMalloc+0x188>)
 800ebf4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ebf6:	4b1a      	ldr	r3, [pc, #104]	; (800ec60 <pvPortMalloc+0x188>)
 800ebf8:	681a      	ldr	r2, [r3, #0]
 800ebfa:	4b1b      	ldr	r3, [pc, #108]	; (800ec68 <pvPortMalloc+0x190>)
 800ebfc:	681b      	ldr	r3, [r3, #0]
 800ebfe:	429a      	cmp	r2, r3
 800ec00:	d203      	bcs.n	800ec0a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ec02:	4b17      	ldr	r3, [pc, #92]	; (800ec60 <pvPortMalloc+0x188>)
 800ec04:	681b      	ldr	r3, [r3, #0]
 800ec06:	4a18      	ldr	r2, [pc, #96]	; (800ec68 <pvPortMalloc+0x190>)
 800ec08:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ec0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec0c:	685a      	ldr	r2, [r3, #4]
 800ec0e:	4b13      	ldr	r3, [pc, #76]	; (800ec5c <pvPortMalloc+0x184>)
 800ec10:	681b      	ldr	r3, [r3, #0]
 800ec12:	431a      	orrs	r2, r3
 800ec14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec16:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ec18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec1a:	2200      	movs	r2, #0
 800ec1c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800ec1e:	4b13      	ldr	r3, [pc, #76]	; (800ec6c <pvPortMalloc+0x194>)
 800ec20:	681b      	ldr	r3, [r3, #0]
 800ec22:	3301      	adds	r3, #1
 800ec24:	4a11      	ldr	r2, [pc, #68]	; (800ec6c <pvPortMalloc+0x194>)
 800ec26:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ec28:	f7ff f8ae 	bl	800dd88 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ec2c:	69fb      	ldr	r3, [r7, #28]
 800ec2e:	f003 0307 	and.w	r3, r3, #7
 800ec32:	2b00      	cmp	r3, #0
 800ec34:	d00a      	beq.n	800ec4c <pvPortMalloc+0x174>
	__asm volatile
 800ec36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec3a:	f383 8811 	msr	BASEPRI, r3
 800ec3e:	f3bf 8f6f 	isb	sy
 800ec42:	f3bf 8f4f 	dsb	sy
 800ec46:	60fb      	str	r3, [r7, #12]
}
 800ec48:	bf00      	nop
 800ec4a:	e7fe      	b.n	800ec4a <pvPortMalloc+0x172>
	return pvReturn;
 800ec4c:	69fb      	ldr	r3, [r7, #28]
}
 800ec4e:	4618      	mov	r0, r3
 800ec50:	3728      	adds	r7, #40	; 0x28
 800ec52:	46bd      	mov	sp, r7
 800ec54:	bd80      	pop	{r7, pc}
 800ec56:	bf00      	nop
 800ec58:	2000685c 	.word	0x2000685c
 800ec5c:	20006870 	.word	0x20006870
 800ec60:	20006860 	.word	0x20006860
 800ec64:	20006854 	.word	0x20006854
 800ec68:	20006864 	.word	0x20006864
 800ec6c:	20006868 	.word	0x20006868

0800ec70 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ec70:	b580      	push	{r7, lr}
 800ec72:	b086      	sub	sp, #24
 800ec74:	af00      	add	r7, sp, #0
 800ec76:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	2b00      	cmp	r3, #0
 800ec80:	d04d      	beq.n	800ed1e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ec82:	2308      	movs	r3, #8
 800ec84:	425b      	negs	r3, r3
 800ec86:	697a      	ldr	r2, [r7, #20]
 800ec88:	4413      	add	r3, r2
 800ec8a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ec8c:	697b      	ldr	r3, [r7, #20]
 800ec8e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ec90:	693b      	ldr	r3, [r7, #16]
 800ec92:	685a      	ldr	r2, [r3, #4]
 800ec94:	4b24      	ldr	r3, [pc, #144]	; (800ed28 <vPortFree+0xb8>)
 800ec96:	681b      	ldr	r3, [r3, #0]
 800ec98:	4013      	ands	r3, r2
 800ec9a:	2b00      	cmp	r3, #0
 800ec9c:	d10a      	bne.n	800ecb4 <vPortFree+0x44>
	__asm volatile
 800ec9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eca2:	f383 8811 	msr	BASEPRI, r3
 800eca6:	f3bf 8f6f 	isb	sy
 800ecaa:	f3bf 8f4f 	dsb	sy
 800ecae:	60fb      	str	r3, [r7, #12]
}
 800ecb0:	bf00      	nop
 800ecb2:	e7fe      	b.n	800ecb2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ecb4:	693b      	ldr	r3, [r7, #16]
 800ecb6:	681b      	ldr	r3, [r3, #0]
 800ecb8:	2b00      	cmp	r3, #0
 800ecba:	d00a      	beq.n	800ecd2 <vPortFree+0x62>
	__asm volatile
 800ecbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecc0:	f383 8811 	msr	BASEPRI, r3
 800ecc4:	f3bf 8f6f 	isb	sy
 800ecc8:	f3bf 8f4f 	dsb	sy
 800eccc:	60bb      	str	r3, [r7, #8]
}
 800ecce:	bf00      	nop
 800ecd0:	e7fe      	b.n	800ecd0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ecd2:	693b      	ldr	r3, [r7, #16]
 800ecd4:	685a      	ldr	r2, [r3, #4]
 800ecd6:	4b14      	ldr	r3, [pc, #80]	; (800ed28 <vPortFree+0xb8>)
 800ecd8:	681b      	ldr	r3, [r3, #0]
 800ecda:	4013      	ands	r3, r2
 800ecdc:	2b00      	cmp	r3, #0
 800ecde:	d01e      	beq.n	800ed1e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ece0:	693b      	ldr	r3, [r7, #16]
 800ece2:	681b      	ldr	r3, [r3, #0]
 800ece4:	2b00      	cmp	r3, #0
 800ece6:	d11a      	bne.n	800ed1e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ece8:	693b      	ldr	r3, [r7, #16]
 800ecea:	685a      	ldr	r2, [r3, #4]
 800ecec:	4b0e      	ldr	r3, [pc, #56]	; (800ed28 <vPortFree+0xb8>)
 800ecee:	681b      	ldr	r3, [r3, #0]
 800ecf0:	43db      	mvns	r3, r3
 800ecf2:	401a      	ands	r2, r3
 800ecf4:	693b      	ldr	r3, [r7, #16]
 800ecf6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ecf8:	f7ff f838 	bl	800dd6c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ecfc:	693b      	ldr	r3, [r7, #16]
 800ecfe:	685a      	ldr	r2, [r3, #4]
 800ed00:	4b0a      	ldr	r3, [pc, #40]	; (800ed2c <vPortFree+0xbc>)
 800ed02:	681b      	ldr	r3, [r3, #0]
 800ed04:	4413      	add	r3, r2
 800ed06:	4a09      	ldr	r2, [pc, #36]	; (800ed2c <vPortFree+0xbc>)
 800ed08:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ed0a:	6938      	ldr	r0, [r7, #16]
 800ed0c:	f000 f874 	bl	800edf8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ed10:	4b07      	ldr	r3, [pc, #28]	; (800ed30 <vPortFree+0xc0>)
 800ed12:	681b      	ldr	r3, [r3, #0]
 800ed14:	3301      	adds	r3, #1
 800ed16:	4a06      	ldr	r2, [pc, #24]	; (800ed30 <vPortFree+0xc0>)
 800ed18:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ed1a:	f7ff f835 	bl	800dd88 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ed1e:	bf00      	nop
 800ed20:	3718      	adds	r7, #24
 800ed22:	46bd      	mov	sp, r7
 800ed24:	bd80      	pop	{r7, pc}
 800ed26:	bf00      	nop
 800ed28:	20006870 	.word	0x20006870
 800ed2c:	20006860 	.word	0x20006860
 800ed30:	2000686c 	.word	0x2000686c

0800ed34 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ed34:	b480      	push	{r7}
 800ed36:	b085      	sub	sp, #20
 800ed38:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ed3a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800ed3e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ed40:	4b27      	ldr	r3, [pc, #156]	; (800ede0 <prvHeapInit+0xac>)
 800ed42:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ed44:	68fb      	ldr	r3, [r7, #12]
 800ed46:	f003 0307 	and.w	r3, r3, #7
 800ed4a:	2b00      	cmp	r3, #0
 800ed4c:	d00c      	beq.n	800ed68 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ed4e:	68fb      	ldr	r3, [r7, #12]
 800ed50:	3307      	adds	r3, #7
 800ed52:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ed54:	68fb      	ldr	r3, [r7, #12]
 800ed56:	f023 0307 	bic.w	r3, r3, #7
 800ed5a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ed5c:	68ba      	ldr	r2, [r7, #8]
 800ed5e:	68fb      	ldr	r3, [r7, #12]
 800ed60:	1ad3      	subs	r3, r2, r3
 800ed62:	4a1f      	ldr	r2, [pc, #124]	; (800ede0 <prvHeapInit+0xac>)
 800ed64:	4413      	add	r3, r2
 800ed66:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ed68:	68fb      	ldr	r3, [r7, #12]
 800ed6a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ed6c:	4a1d      	ldr	r2, [pc, #116]	; (800ede4 <prvHeapInit+0xb0>)
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ed72:	4b1c      	ldr	r3, [pc, #112]	; (800ede4 <prvHeapInit+0xb0>)
 800ed74:	2200      	movs	r2, #0
 800ed76:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	68ba      	ldr	r2, [r7, #8]
 800ed7c:	4413      	add	r3, r2
 800ed7e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ed80:	2208      	movs	r2, #8
 800ed82:	68fb      	ldr	r3, [r7, #12]
 800ed84:	1a9b      	subs	r3, r3, r2
 800ed86:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ed88:	68fb      	ldr	r3, [r7, #12]
 800ed8a:	f023 0307 	bic.w	r3, r3, #7
 800ed8e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ed90:	68fb      	ldr	r3, [r7, #12]
 800ed92:	4a15      	ldr	r2, [pc, #84]	; (800ede8 <prvHeapInit+0xb4>)
 800ed94:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ed96:	4b14      	ldr	r3, [pc, #80]	; (800ede8 <prvHeapInit+0xb4>)
 800ed98:	681b      	ldr	r3, [r3, #0]
 800ed9a:	2200      	movs	r2, #0
 800ed9c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ed9e:	4b12      	ldr	r3, [pc, #72]	; (800ede8 <prvHeapInit+0xb4>)
 800eda0:	681b      	ldr	r3, [r3, #0]
 800eda2:	2200      	movs	r2, #0
 800eda4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800edaa:	683b      	ldr	r3, [r7, #0]
 800edac:	68fa      	ldr	r2, [r7, #12]
 800edae:	1ad2      	subs	r2, r2, r3
 800edb0:	683b      	ldr	r3, [r7, #0]
 800edb2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800edb4:	4b0c      	ldr	r3, [pc, #48]	; (800ede8 <prvHeapInit+0xb4>)
 800edb6:	681a      	ldr	r2, [r3, #0]
 800edb8:	683b      	ldr	r3, [r7, #0]
 800edba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800edbc:	683b      	ldr	r3, [r7, #0]
 800edbe:	685b      	ldr	r3, [r3, #4]
 800edc0:	4a0a      	ldr	r2, [pc, #40]	; (800edec <prvHeapInit+0xb8>)
 800edc2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800edc4:	683b      	ldr	r3, [r7, #0]
 800edc6:	685b      	ldr	r3, [r3, #4]
 800edc8:	4a09      	ldr	r2, [pc, #36]	; (800edf0 <prvHeapInit+0xbc>)
 800edca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800edcc:	4b09      	ldr	r3, [pc, #36]	; (800edf4 <prvHeapInit+0xc0>)
 800edce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800edd2:	601a      	str	r2, [r3, #0]
}
 800edd4:	bf00      	nop
 800edd6:	3714      	adds	r7, #20
 800edd8:	46bd      	mov	sp, r7
 800edda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edde:	4770      	bx	lr
 800ede0:	20002c54 	.word	0x20002c54
 800ede4:	20006854 	.word	0x20006854
 800ede8:	2000685c 	.word	0x2000685c
 800edec:	20006864 	.word	0x20006864
 800edf0:	20006860 	.word	0x20006860
 800edf4:	20006870 	.word	0x20006870

0800edf8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800edf8:	b480      	push	{r7}
 800edfa:	b085      	sub	sp, #20
 800edfc:	af00      	add	r7, sp, #0
 800edfe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ee00:	4b28      	ldr	r3, [pc, #160]	; (800eea4 <prvInsertBlockIntoFreeList+0xac>)
 800ee02:	60fb      	str	r3, [r7, #12]
 800ee04:	e002      	b.n	800ee0c <prvInsertBlockIntoFreeList+0x14>
 800ee06:	68fb      	ldr	r3, [r7, #12]
 800ee08:	681b      	ldr	r3, [r3, #0]
 800ee0a:	60fb      	str	r3, [r7, #12]
 800ee0c:	68fb      	ldr	r3, [r7, #12]
 800ee0e:	681b      	ldr	r3, [r3, #0]
 800ee10:	687a      	ldr	r2, [r7, #4]
 800ee12:	429a      	cmp	r2, r3
 800ee14:	d8f7      	bhi.n	800ee06 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ee16:	68fb      	ldr	r3, [r7, #12]
 800ee18:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ee1a:	68fb      	ldr	r3, [r7, #12]
 800ee1c:	685b      	ldr	r3, [r3, #4]
 800ee1e:	68ba      	ldr	r2, [r7, #8]
 800ee20:	4413      	add	r3, r2
 800ee22:	687a      	ldr	r2, [r7, #4]
 800ee24:	429a      	cmp	r2, r3
 800ee26:	d108      	bne.n	800ee3a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ee28:	68fb      	ldr	r3, [r7, #12]
 800ee2a:	685a      	ldr	r2, [r3, #4]
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	685b      	ldr	r3, [r3, #4]
 800ee30:	441a      	add	r2, r3
 800ee32:	68fb      	ldr	r3, [r7, #12]
 800ee34:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ee36:	68fb      	ldr	r3, [r7, #12]
 800ee38:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	685b      	ldr	r3, [r3, #4]
 800ee42:	68ba      	ldr	r2, [r7, #8]
 800ee44:	441a      	add	r2, r3
 800ee46:	68fb      	ldr	r3, [r7, #12]
 800ee48:	681b      	ldr	r3, [r3, #0]
 800ee4a:	429a      	cmp	r2, r3
 800ee4c:	d118      	bne.n	800ee80 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ee4e:	68fb      	ldr	r3, [r7, #12]
 800ee50:	681a      	ldr	r2, [r3, #0]
 800ee52:	4b15      	ldr	r3, [pc, #84]	; (800eea8 <prvInsertBlockIntoFreeList+0xb0>)
 800ee54:	681b      	ldr	r3, [r3, #0]
 800ee56:	429a      	cmp	r2, r3
 800ee58:	d00d      	beq.n	800ee76 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	685a      	ldr	r2, [r3, #4]
 800ee5e:	68fb      	ldr	r3, [r7, #12]
 800ee60:	681b      	ldr	r3, [r3, #0]
 800ee62:	685b      	ldr	r3, [r3, #4]
 800ee64:	441a      	add	r2, r3
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ee6a:	68fb      	ldr	r3, [r7, #12]
 800ee6c:	681b      	ldr	r3, [r3, #0]
 800ee6e:	681a      	ldr	r2, [r3, #0]
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	601a      	str	r2, [r3, #0]
 800ee74:	e008      	b.n	800ee88 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ee76:	4b0c      	ldr	r3, [pc, #48]	; (800eea8 <prvInsertBlockIntoFreeList+0xb0>)
 800ee78:	681a      	ldr	r2, [r3, #0]
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	601a      	str	r2, [r3, #0]
 800ee7e:	e003      	b.n	800ee88 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ee80:	68fb      	ldr	r3, [r7, #12]
 800ee82:	681a      	ldr	r2, [r3, #0]
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ee88:	68fa      	ldr	r2, [r7, #12]
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	429a      	cmp	r2, r3
 800ee8e:	d002      	beq.n	800ee96 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ee90:	68fb      	ldr	r3, [r7, #12]
 800ee92:	687a      	ldr	r2, [r7, #4]
 800ee94:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ee96:	bf00      	nop
 800ee98:	3714      	adds	r7, #20
 800ee9a:	46bd      	mov	sp, r7
 800ee9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eea0:	4770      	bx	lr
 800eea2:	bf00      	nop
 800eea4:	20006854 	.word	0x20006854
 800eea8:	2000685c 	.word	0x2000685c

0800eeac <__errno>:
 800eeac:	4b01      	ldr	r3, [pc, #4]	; (800eeb4 <__errno+0x8>)
 800eeae:	6818      	ldr	r0, [r3, #0]
 800eeb0:	4770      	bx	lr
 800eeb2:	bf00      	nop
 800eeb4:	2000001c 	.word	0x2000001c

0800eeb8 <__libc_init_array>:
 800eeb8:	b570      	push	{r4, r5, r6, lr}
 800eeba:	4d0d      	ldr	r5, [pc, #52]	; (800eef0 <__libc_init_array+0x38>)
 800eebc:	4c0d      	ldr	r4, [pc, #52]	; (800eef4 <__libc_init_array+0x3c>)
 800eebe:	1b64      	subs	r4, r4, r5
 800eec0:	10a4      	asrs	r4, r4, #2
 800eec2:	2600      	movs	r6, #0
 800eec4:	42a6      	cmp	r6, r4
 800eec6:	d109      	bne.n	800eedc <__libc_init_array+0x24>
 800eec8:	4d0b      	ldr	r5, [pc, #44]	; (800eef8 <__libc_init_array+0x40>)
 800eeca:	4c0c      	ldr	r4, [pc, #48]	; (800eefc <__libc_init_array+0x44>)
 800eecc:	f005 f9a4 	bl	8014218 <_init>
 800eed0:	1b64      	subs	r4, r4, r5
 800eed2:	10a4      	asrs	r4, r4, #2
 800eed4:	2600      	movs	r6, #0
 800eed6:	42a6      	cmp	r6, r4
 800eed8:	d105      	bne.n	800eee6 <__libc_init_array+0x2e>
 800eeda:	bd70      	pop	{r4, r5, r6, pc}
 800eedc:	f855 3b04 	ldr.w	r3, [r5], #4
 800eee0:	4798      	blx	r3
 800eee2:	3601      	adds	r6, #1
 800eee4:	e7ee      	b.n	800eec4 <__libc_init_array+0xc>
 800eee6:	f855 3b04 	ldr.w	r3, [r5], #4
 800eeea:	4798      	blx	r3
 800eeec:	3601      	adds	r6, #1
 800eeee:	e7f2      	b.n	800eed6 <__libc_init_array+0x1e>
 800eef0:	08014c60 	.word	0x08014c60
 800eef4:	08014c60 	.word	0x08014c60
 800eef8:	08014c60 	.word	0x08014c60
 800eefc:	08014c64 	.word	0x08014c64

0800ef00 <memcpy>:
 800ef00:	440a      	add	r2, r1
 800ef02:	4291      	cmp	r1, r2
 800ef04:	f100 33ff 	add.w	r3, r0, #4294967295
 800ef08:	d100      	bne.n	800ef0c <memcpy+0xc>
 800ef0a:	4770      	bx	lr
 800ef0c:	b510      	push	{r4, lr}
 800ef0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ef12:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ef16:	4291      	cmp	r1, r2
 800ef18:	d1f9      	bne.n	800ef0e <memcpy+0xe>
 800ef1a:	bd10      	pop	{r4, pc}

0800ef1c <memset>:
 800ef1c:	4402      	add	r2, r0
 800ef1e:	4603      	mov	r3, r0
 800ef20:	4293      	cmp	r3, r2
 800ef22:	d100      	bne.n	800ef26 <memset+0xa>
 800ef24:	4770      	bx	lr
 800ef26:	f803 1b01 	strb.w	r1, [r3], #1
 800ef2a:	e7f9      	b.n	800ef20 <memset+0x4>

0800ef2c <__cvt>:
 800ef2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ef30:	ec55 4b10 	vmov	r4, r5, d0
 800ef34:	2d00      	cmp	r5, #0
 800ef36:	460e      	mov	r6, r1
 800ef38:	4619      	mov	r1, r3
 800ef3a:	462b      	mov	r3, r5
 800ef3c:	bfbb      	ittet	lt
 800ef3e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800ef42:	461d      	movlt	r5, r3
 800ef44:	2300      	movge	r3, #0
 800ef46:	232d      	movlt	r3, #45	; 0x2d
 800ef48:	700b      	strb	r3, [r1, #0]
 800ef4a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ef4c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800ef50:	4691      	mov	r9, r2
 800ef52:	f023 0820 	bic.w	r8, r3, #32
 800ef56:	bfbc      	itt	lt
 800ef58:	4622      	movlt	r2, r4
 800ef5a:	4614      	movlt	r4, r2
 800ef5c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ef60:	d005      	beq.n	800ef6e <__cvt+0x42>
 800ef62:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800ef66:	d100      	bne.n	800ef6a <__cvt+0x3e>
 800ef68:	3601      	adds	r6, #1
 800ef6a:	2102      	movs	r1, #2
 800ef6c:	e000      	b.n	800ef70 <__cvt+0x44>
 800ef6e:	2103      	movs	r1, #3
 800ef70:	ab03      	add	r3, sp, #12
 800ef72:	9301      	str	r3, [sp, #4]
 800ef74:	ab02      	add	r3, sp, #8
 800ef76:	9300      	str	r3, [sp, #0]
 800ef78:	ec45 4b10 	vmov	d0, r4, r5
 800ef7c:	4653      	mov	r3, sl
 800ef7e:	4632      	mov	r2, r6
 800ef80:	f000 fcea 	bl	800f958 <_dtoa_r>
 800ef84:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800ef88:	4607      	mov	r7, r0
 800ef8a:	d102      	bne.n	800ef92 <__cvt+0x66>
 800ef8c:	f019 0f01 	tst.w	r9, #1
 800ef90:	d022      	beq.n	800efd8 <__cvt+0xac>
 800ef92:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ef96:	eb07 0906 	add.w	r9, r7, r6
 800ef9a:	d110      	bne.n	800efbe <__cvt+0x92>
 800ef9c:	783b      	ldrb	r3, [r7, #0]
 800ef9e:	2b30      	cmp	r3, #48	; 0x30
 800efa0:	d10a      	bne.n	800efb8 <__cvt+0x8c>
 800efa2:	2200      	movs	r2, #0
 800efa4:	2300      	movs	r3, #0
 800efa6:	4620      	mov	r0, r4
 800efa8:	4629      	mov	r1, r5
 800efaa:	f7f1 fd8d 	bl	8000ac8 <__aeabi_dcmpeq>
 800efae:	b918      	cbnz	r0, 800efb8 <__cvt+0x8c>
 800efb0:	f1c6 0601 	rsb	r6, r6, #1
 800efb4:	f8ca 6000 	str.w	r6, [sl]
 800efb8:	f8da 3000 	ldr.w	r3, [sl]
 800efbc:	4499      	add	r9, r3
 800efbe:	2200      	movs	r2, #0
 800efc0:	2300      	movs	r3, #0
 800efc2:	4620      	mov	r0, r4
 800efc4:	4629      	mov	r1, r5
 800efc6:	f7f1 fd7f 	bl	8000ac8 <__aeabi_dcmpeq>
 800efca:	b108      	cbz	r0, 800efd0 <__cvt+0xa4>
 800efcc:	f8cd 900c 	str.w	r9, [sp, #12]
 800efd0:	2230      	movs	r2, #48	; 0x30
 800efd2:	9b03      	ldr	r3, [sp, #12]
 800efd4:	454b      	cmp	r3, r9
 800efd6:	d307      	bcc.n	800efe8 <__cvt+0xbc>
 800efd8:	9b03      	ldr	r3, [sp, #12]
 800efda:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800efdc:	1bdb      	subs	r3, r3, r7
 800efde:	4638      	mov	r0, r7
 800efe0:	6013      	str	r3, [r2, #0]
 800efe2:	b004      	add	sp, #16
 800efe4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800efe8:	1c59      	adds	r1, r3, #1
 800efea:	9103      	str	r1, [sp, #12]
 800efec:	701a      	strb	r2, [r3, #0]
 800efee:	e7f0      	b.n	800efd2 <__cvt+0xa6>

0800eff0 <__exponent>:
 800eff0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800eff2:	4603      	mov	r3, r0
 800eff4:	2900      	cmp	r1, #0
 800eff6:	bfb8      	it	lt
 800eff8:	4249      	neglt	r1, r1
 800effa:	f803 2b02 	strb.w	r2, [r3], #2
 800effe:	bfb4      	ite	lt
 800f000:	222d      	movlt	r2, #45	; 0x2d
 800f002:	222b      	movge	r2, #43	; 0x2b
 800f004:	2909      	cmp	r1, #9
 800f006:	7042      	strb	r2, [r0, #1]
 800f008:	dd2a      	ble.n	800f060 <__exponent+0x70>
 800f00a:	f10d 0407 	add.w	r4, sp, #7
 800f00e:	46a4      	mov	ip, r4
 800f010:	270a      	movs	r7, #10
 800f012:	46a6      	mov	lr, r4
 800f014:	460a      	mov	r2, r1
 800f016:	fb91 f6f7 	sdiv	r6, r1, r7
 800f01a:	fb07 1516 	mls	r5, r7, r6, r1
 800f01e:	3530      	adds	r5, #48	; 0x30
 800f020:	2a63      	cmp	r2, #99	; 0x63
 800f022:	f104 34ff 	add.w	r4, r4, #4294967295
 800f026:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800f02a:	4631      	mov	r1, r6
 800f02c:	dcf1      	bgt.n	800f012 <__exponent+0x22>
 800f02e:	3130      	adds	r1, #48	; 0x30
 800f030:	f1ae 0502 	sub.w	r5, lr, #2
 800f034:	f804 1c01 	strb.w	r1, [r4, #-1]
 800f038:	1c44      	adds	r4, r0, #1
 800f03a:	4629      	mov	r1, r5
 800f03c:	4561      	cmp	r1, ip
 800f03e:	d30a      	bcc.n	800f056 <__exponent+0x66>
 800f040:	f10d 0209 	add.w	r2, sp, #9
 800f044:	eba2 020e 	sub.w	r2, r2, lr
 800f048:	4565      	cmp	r5, ip
 800f04a:	bf88      	it	hi
 800f04c:	2200      	movhi	r2, #0
 800f04e:	4413      	add	r3, r2
 800f050:	1a18      	subs	r0, r3, r0
 800f052:	b003      	add	sp, #12
 800f054:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f056:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f05a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800f05e:	e7ed      	b.n	800f03c <__exponent+0x4c>
 800f060:	2330      	movs	r3, #48	; 0x30
 800f062:	3130      	adds	r1, #48	; 0x30
 800f064:	7083      	strb	r3, [r0, #2]
 800f066:	70c1      	strb	r1, [r0, #3]
 800f068:	1d03      	adds	r3, r0, #4
 800f06a:	e7f1      	b.n	800f050 <__exponent+0x60>

0800f06c <_printf_float>:
 800f06c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f070:	ed2d 8b02 	vpush	{d8}
 800f074:	b08d      	sub	sp, #52	; 0x34
 800f076:	460c      	mov	r4, r1
 800f078:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800f07c:	4616      	mov	r6, r2
 800f07e:	461f      	mov	r7, r3
 800f080:	4605      	mov	r5, r0
 800f082:	f001 fa57 	bl	8010534 <_localeconv_r>
 800f086:	f8d0 a000 	ldr.w	sl, [r0]
 800f08a:	4650      	mov	r0, sl
 800f08c:	f7f1 f8a0 	bl	80001d0 <strlen>
 800f090:	2300      	movs	r3, #0
 800f092:	930a      	str	r3, [sp, #40]	; 0x28
 800f094:	6823      	ldr	r3, [r4, #0]
 800f096:	9305      	str	r3, [sp, #20]
 800f098:	f8d8 3000 	ldr.w	r3, [r8]
 800f09c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800f0a0:	3307      	adds	r3, #7
 800f0a2:	f023 0307 	bic.w	r3, r3, #7
 800f0a6:	f103 0208 	add.w	r2, r3, #8
 800f0aa:	f8c8 2000 	str.w	r2, [r8]
 800f0ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0b2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800f0b6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800f0ba:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800f0be:	9307      	str	r3, [sp, #28]
 800f0c0:	f8cd 8018 	str.w	r8, [sp, #24]
 800f0c4:	ee08 0a10 	vmov	s16, r0
 800f0c8:	4b9f      	ldr	r3, [pc, #636]	; (800f348 <_printf_float+0x2dc>)
 800f0ca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f0ce:	f04f 32ff 	mov.w	r2, #4294967295
 800f0d2:	f7f1 fd2b 	bl	8000b2c <__aeabi_dcmpun>
 800f0d6:	bb88      	cbnz	r0, 800f13c <_printf_float+0xd0>
 800f0d8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f0dc:	4b9a      	ldr	r3, [pc, #616]	; (800f348 <_printf_float+0x2dc>)
 800f0de:	f04f 32ff 	mov.w	r2, #4294967295
 800f0e2:	f7f1 fd05 	bl	8000af0 <__aeabi_dcmple>
 800f0e6:	bb48      	cbnz	r0, 800f13c <_printf_float+0xd0>
 800f0e8:	2200      	movs	r2, #0
 800f0ea:	2300      	movs	r3, #0
 800f0ec:	4640      	mov	r0, r8
 800f0ee:	4649      	mov	r1, r9
 800f0f0:	f7f1 fcf4 	bl	8000adc <__aeabi_dcmplt>
 800f0f4:	b110      	cbz	r0, 800f0fc <_printf_float+0x90>
 800f0f6:	232d      	movs	r3, #45	; 0x2d
 800f0f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f0fc:	4b93      	ldr	r3, [pc, #588]	; (800f34c <_printf_float+0x2e0>)
 800f0fe:	4894      	ldr	r0, [pc, #592]	; (800f350 <_printf_float+0x2e4>)
 800f100:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800f104:	bf94      	ite	ls
 800f106:	4698      	movls	r8, r3
 800f108:	4680      	movhi	r8, r0
 800f10a:	2303      	movs	r3, #3
 800f10c:	6123      	str	r3, [r4, #16]
 800f10e:	9b05      	ldr	r3, [sp, #20]
 800f110:	f023 0204 	bic.w	r2, r3, #4
 800f114:	6022      	str	r2, [r4, #0]
 800f116:	f04f 0900 	mov.w	r9, #0
 800f11a:	9700      	str	r7, [sp, #0]
 800f11c:	4633      	mov	r3, r6
 800f11e:	aa0b      	add	r2, sp, #44	; 0x2c
 800f120:	4621      	mov	r1, r4
 800f122:	4628      	mov	r0, r5
 800f124:	f000 f9d8 	bl	800f4d8 <_printf_common>
 800f128:	3001      	adds	r0, #1
 800f12a:	f040 8090 	bne.w	800f24e <_printf_float+0x1e2>
 800f12e:	f04f 30ff 	mov.w	r0, #4294967295
 800f132:	b00d      	add	sp, #52	; 0x34
 800f134:	ecbd 8b02 	vpop	{d8}
 800f138:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f13c:	4642      	mov	r2, r8
 800f13e:	464b      	mov	r3, r9
 800f140:	4640      	mov	r0, r8
 800f142:	4649      	mov	r1, r9
 800f144:	f7f1 fcf2 	bl	8000b2c <__aeabi_dcmpun>
 800f148:	b140      	cbz	r0, 800f15c <_printf_float+0xf0>
 800f14a:	464b      	mov	r3, r9
 800f14c:	2b00      	cmp	r3, #0
 800f14e:	bfbc      	itt	lt
 800f150:	232d      	movlt	r3, #45	; 0x2d
 800f152:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800f156:	487f      	ldr	r0, [pc, #508]	; (800f354 <_printf_float+0x2e8>)
 800f158:	4b7f      	ldr	r3, [pc, #508]	; (800f358 <_printf_float+0x2ec>)
 800f15a:	e7d1      	b.n	800f100 <_printf_float+0x94>
 800f15c:	6863      	ldr	r3, [r4, #4]
 800f15e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800f162:	9206      	str	r2, [sp, #24]
 800f164:	1c5a      	adds	r2, r3, #1
 800f166:	d13f      	bne.n	800f1e8 <_printf_float+0x17c>
 800f168:	2306      	movs	r3, #6
 800f16a:	6063      	str	r3, [r4, #4]
 800f16c:	9b05      	ldr	r3, [sp, #20]
 800f16e:	6861      	ldr	r1, [r4, #4]
 800f170:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800f174:	2300      	movs	r3, #0
 800f176:	9303      	str	r3, [sp, #12]
 800f178:	ab0a      	add	r3, sp, #40	; 0x28
 800f17a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800f17e:	ab09      	add	r3, sp, #36	; 0x24
 800f180:	ec49 8b10 	vmov	d0, r8, r9
 800f184:	9300      	str	r3, [sp, #0]
 800f186:	6022      	str	r2, [r4, #0]
 800f188:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800f18c:	4628      	mov	r0, r5
 800f18e:	f7ff fecd 	bl	800ef2c <__cvt>
 800f192:	9b06      	ldr	r3, [sp, #24]
 800f194:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f196:	2b47      	cmp	r3, #71	; 0x47
 800f198:	4680      	mov	r8, r0
 800f19a:	d108      	bne.n	800f1ae <_printf_float+0x142>
 800f19c:	1cc8      	adds	r0, r1, #3
 800f19e:	db02      	blt.n	800f1a6 <_printf_float+0x13a>
 800f1a0:	6863      	ldr	r3, [r4, #4]
 800f1a2:	4299      	cmp	r1, r3
 800f1a4:	dd41      	ble.n	800f22a <_printf_float+0x1be>
 800f1a6:	f1ab 0b02 	sub.w	fp, fp, #2
 800f1aa:	fa5f fb8b 	uxtb.w	fp, fp
 800f1ae:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f1b2:	d820      	bhi.n	800f1f6 <_printf_float+0x18a>
 800f1b4:	3901      	subs	r1, #1
 800f1b6:	465a      	mov	r2, fp
 800f1b8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800f1bc:	9109      	str	r1, [sp, #36]	; 0x24
 800f1be:	f7ff ff17 	bl	800eff0 <__exponent>
 800f1c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f1c4:	1813      	adds	r3, r2, r0
 800f1c6:	2a01      	cmp	r2, #1
 800f1c8:	4681      	mov	r9, r0
 800f1ca:	6123      	str	r3, [r4, #16]
 800f1cc:	dc02      	bgt.n	800f1d4 <_printf_float+0x168>
 800f1ce:	6822      	ldr	r2, [r4, #0]
 800f1d0:	07d2      	lsls	r2, r2, #31
 800f1d2:	d501      	bpl.n	800f1d8 <_printf_float+0x16c>
 800f1d4:	3301      	adds	r3, #1
 800f1d6:	6123      	str	r3, [r4, #16]
 800f1d8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800f1dc:	2b00      	cmp	r3, #0
 800f1de:	d09c      	beq.n	800f11a <_printf_float+0xae>
 800f1e0:	232d      	movs	r3, #45	; 0x2d
 800f1e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f1e6:	e798      	b.n	800f11a <_printf_float+0xae>
 800f1e8:	9a06      	ldr	r2, [sp, #24]
 800f1ea:	2a47      	cmp	r2, #71	; 0x47
 800f1ec:	d1be      	bne.n	800f16c <_printf_float+0x100>
 800f1ee:	2b00      	cmp	r3, #0
 800f1f0:	d1bc      	bne.n	800f16c <_printf_float+0x100>
 800f1f2:	2301      	movs	r3, #1
 800f1f4:	e7b9      	b.n	800f16a <_printf_float+0xfe>
 800f1f6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800f1fa:	d118      	bne.n	800f22e <_printf_float+0x1c2>
 800f1fc:	2900      	cmp	r1, #0
 800f1fe:	6863      	ldr	r3, [r4, #4]
 800f200:	dd0b      	ble.n	800f21a <_printf_float+0x1ae>
 800f202:	6121      	str	r1, [r4, #16]
 800f204:	b913      	cbnz	r3, 800f20c <_printf_float+0x1a0>
 800f206:	6822      	ldr	r2, [r4, #0]
 800f208:	07d0      	lsls	r0, r2, #31
 800f20a:	d502      	bpl.n	800f212 <_printf_float+0x1a6>
 800f20c:	3301      	adds	r3, #1
 800f20e:	440b      	add	r3, r1
 800f210:	6123      	str	r3, [r4, #16]
 800f212:	65a1      	str	r1, [r4, #88]	; 0x58
 800f214:	f04f 0900 	mov.w	r9, #0
 800f218:	e7de      	b.n	800f1d8 <_printf_float+0x16c>
 800f21a:	b913      	cbnz	r3, 800f222 <_printf_float+0x1b6>
 800f21c:	6822      	ldr	r2, [r4, #0]
 800f21e:	07d2      	lsls	r2, r2, #31
 800f220:	d501      	bpl.n	800f226 <_printf_float+0x1ba>
 800f222:	3302      	adds	r3, #2
 800f224:	e7f4      	b.n	800f210 <_printf_float+0x1a4>
 800f226:	2301      	movs	r3, #1
 800f228:	e7f2      	b.n	800f210 <_printf_float+0x1a4>
 800f22a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800f22e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f230:	4299      	cmp	r1, r3
 800f232:	db05      	blt.n	800f240 <_printf_float+0x1d4>
 800f234:	6823      	ldr	r3, [r4, #0]
 800f236:	6121      	str	r1, [r4, #16]
 800f238:	07d8      	lsls	r0, r3, #31
 800f23a:	d5ea      	bpl.n	800f212 <_printf_float+0x1a6>
 800f23c:	1c4b      	adds	r3, r1, #1
 800f23e:	e7e7      	b.n	800f210 <_printf_float+0x1a4>
 800f240:	2900      	cmp	r1, #0
 800f242:	bfd4      	ite	le
 800f244:	f1c1 0202 	rsble	r2, r1, #2
 800f248:	2201      	movgt	r2, #1
 800f24a:	4413      	add	r3, r2
 800f24c:	e7e0      	b.n	800f210 <_printf_float+0x1a4>
 800f24e:	6823      	ldr	r3, [r4, #0]
 800f250:	055a      	lsls	r2, r3, #21
 800f252:	d407      	bmi.n	800f264 <_printf_float+0x1f8>
 800f254:	6923      	ldr	r3, [r4, #16]
 800f256:	4642      	mov	r2, r8
 800f258:	4631      	mov	r1, r6
 800f25a:	4628      	mov	r0, r5
 800f25c:	47b8      	blx	r7
 800f25e:	3001      	adds	r0, #1
 800f260:	d12c      	bne.n	800f2bc <_printf_float+0x250>
 800f262:	e764      	b.n	800f12e <_printf_float+0xc2>
 800f264:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f268:	f240 80e0 	bls.w	800f42c <_printf_float+0x3c0>
 800f26c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f270:	2200      	movs	r2, #0
 800f272:	2300      	movs	r3, #0
 800f274:	f7f1 fc28 	bl	8000ac8 <__aeabi_dcmpeq>
 800f278:	2800      	cmp	r0, #0
 800f27a:	d034      	beq.n	800f2e6 <_printf_float+0x27a>
 800f27c:	4a37      	ldr	r2, [pc, #220]	; (800f35c <_printf_float+0x2f0>)
 800f27e:	2301      	movs	r3, #1
 800f280:	4631      	mov	r1, r6
 800f282:	4628      	mov	r0, r5
 800f284:	47b8      	blx	r7
 800f286:	3001      	adds	r0, #1
 800f288:	f43f af51 	beq.w	800f12e <_printf_float+0xc2>
 800f28c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f290:	429a      	cmp	r2, r3
 800f292:	db02      	blt.n	800f29a <_printf_float+0x22e>
 800f294:	6823      	ldr	r3, [r4, #0]
 800f296:	07d8      	lsls	r0, r3, #31
 800f298:	d510      	bpl.n	800f2bc <_printf_float+0x250>
 800f29a:	ee18 3a10 	vmov	r3, s16
 800f29e:	4652      	mov	r2, sl
 800f2a0:	4631      	mov	r1, r6
 800f2a2:	4628      	mov	r0, r5
 800f2a4:	47b8      	blx	r7
 800f2a6:	3001      	adds	r0, #1
 800f2a8:	f43f af41 	beq.w	800f12e <_printf_float+0xc2>
 800f2ac:	f04f 0800 	mov.w	r8, #0
 800f2b0:	f104 091a 	add.w	r9, r4, #26
 800f2b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f2b6:	3b01      	subs	r3, #1
 800f2b8:	4543      	cmp	r3, r8
 800f2ba:	dc09      	bgt.n	800f2d0 <_printf_float+0x264>
 800f2bc:	6823      	ldr	r3, [r4, #0]
 800f2be:	079b      	lsls	r3, r3, #30
 800f2c0:	f100 8105 	bmi.w	800f4ce <_printf_float+0x462>
 800f2c4:	68e0      	ldr	r0, [r4, #12]
 800f2c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f2c8:	4298      	cmp	r0, r3
 800f2ca:	bfb8      	it	lt
 800f2cc:	4618      	movlt	r0, r3
 800f2ce:	e730      	b.n	800f132 <_printf_float+0xc6>
 800f2d0:	2301      	movs	r3, #1
 800f2d2:	464a      	mov	r2, r9
 800f2d4:	4631      	mov	r1, r6
 800f2d6:	4628      	mov	r0, r5
 800f2d8:	47b8      	blx	r7
 800f2da:	3001      	adds	r0, #1
 800f2dc:	f43f af27 	beq.w	800f12e <_printf_float+0xc2>
 800f2e0:	f108 0801 	add.w	r8, r8, #1
 800f2e4:	e7e6      	b.n	800f2b4 <_printf_float+0x248>
 800f2e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	dc39      	bgt.n	800f360 <_printf_float+0x2f4>
 800f2ec:	4a1b      	ldr	r2, [pc, #108]	; (800f35c <_printf_float+0x2f0>)
 800f2ee:	2301      	movs	r3, #1
 800f2f0:	4631      	mov	r1, r6
 800f2f2:	4628      	mov	r0, r5
 800f2f4:	47b8      	blx	r7
 800f2f6:	3001      	adds	r0, #1
 800f2f8:	f43f af19 	beq.w	800f12e <_printf_float+0xc2>
 800f2fc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f300:	4313      	orrs	r3, r2
 800f302:	d102      	bne.n	800f30a <_printf_float+0x29e>
 800f304:	6823      	ldr	r3, [r4, #0]
 800f306:	07d9      	lsls	r1, r3, #31
 800f308:	d5d8      	bpl.n	800f2bc <_printf_float+0x250>
 800f30a:	ee18 3a10 	vmov	r3, s16
 800f30e:	4652      	mov	r2, sl
 800f310:	4631      	mov	r1, r6
 800f312:	4628      	mov	r0, r5
 800f314:	47b8      	blx	r7
 800f316:	3001      	adds	r0, #1
 800f318:	f43f af09 	beq.w	800f12e <_printf_float+0xc2>
 800f31c:	f04f 0900 	mov.w	r9, #0
 800f320:	f104 0a1a 	add.w	sl, r4, #26
 800f324:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f326:	425b      	negs	r3, r3
 800f328:	454b      	cmp	r3, r9
 800f32a:	dc01      	bgt.n	800f330 <_printf_float+0x2c4>
 800f32c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f32e:	e792      	b.n	800f256 <_printf_float+0x1ea>
 800f330:	2301      	movs	r3, #1
 800f332:	4652      	mov	r2, sl
 800f334:	4631      	mov	r1, r6
 800f336:	4628      	mov	r0, r5
 800f338:	47b8      	blx	r7
 800f33a:	3001      	adds	r0, #1
 800f33c:	f43f aef7 	beq.w	800f12e <_printf_float+0xc2>
 800f340:	f109 0901 	add.w	r9, r9, #1
 800f344:	e7ee      	b.n	800f324 <_printf_float+0x2b8>
 800f346:	bf00      	nop
 800f348:	7fefffff 	.word	0x7fefffff
 800f34c:	08014430 	.word	0x08014430
 800f350:	08014434 	.word	0x08014434
 800f354:	0801443c 	.word	0x0801443c
 800f358:	08014438 	.word	0x08014438
 800f35c:	08014440 	.word	0x08014440
 800f360:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f362:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f364:	429a      	cmp	r2, r3
 800f366:	bfa8      	it	ge
 800f368:	461a      	movge	r2, r3
 800f36a:	2a00      	cmp	r2, #0
 800f36c:	4691      	mov	r9, r2
 800f36e:	dc37      	bgt.n	800f3e0 <_printf_float+0x374>
 800f370:	f04f 0b00 	mov.w	fp, #0
 800f374:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f378:	f104 021a 	add.w	r2, r4, #26
 800f37c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f37e:	9305      	str	r3, [sp, #20]
 800f380:	eba3 0309 	sub.w	r3, r3, r9
 800f384:	455b      	cmp	r3, fp
 800f386:	dc33      	bgt.n	800f3f0 <_printf_float+0x384>
 800f388:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f38c:	429a      	cmp	r2, r3
 800f38e:	db3b      	blt.n	800f408 <_printf_float+0x39c>
 800f390:	6823      	ldr	r3, [r4, #0]
 800f392:	07da      	lsls	r2, r3, #31
 800f394:	d438      	bmi.n	800f408 <_printf_float+0x39c>
 800f396:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f398:	9a05      	ldr	r2, [sp, #20]
 800f39a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f39c:	1a9a      	subs	r2, r3, r2
 800f39e:	eba3 0901 	sub.w	r9, r3, r1
 800f3a2:	4591      	cmp	r9, r2
 800f3a4:	bfa8      	it	ge
 800f3a6:	4691      	movge	r9, r2
 800f3a8:	f1b9 0f00 	cmp.w	r9, #0
 800f3ac:	dc35      	bgt.n	800f41a <_printf_float+0x3ae>
 800f3ae:	f04f 0800 	mov.w	r8, #0
 800f3b2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f3b6:	f104 0a1a 	add.w	sl, r4, #26
 800f3ba:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f3be:	1a9b      	subs	r3, r3, r2
 800f3c0:	eba3 0309 	sub.w	r3, r3, r9
 800f3c4:	4543      	cmp	r3, r8
 800f3c6:	f77f af79 	ble.w	800f2bc <_printf_float+0x250>
 800f3ca:	2301      	movs	r3, #1
 800f3cc:	4652      	mov	r2, sl
 800f3ce:	4631      	mov	r1, r6
 800f3d0:	4628      	mov	r0, r5
 800f3d2:	47b8      	blx	r7
 800f3d4:	3001      	adds	r0, #1
 800f3d6:	f43f aeaa 	beq.w	800f12e <_printf_float+0xc2>
 800f3da:	f108 0801 	add.w	r8, r8, #1
 800f3de:	e7ec      	b.n	800f3ba <_printf_float+0x34e>
 800f3e0:	4613      	mov	r3, r2
 800f3e2:	4631      	mov	r1, r6
 800f3e4:	4642      	mov	r2, r8
 800f3e6:	4628      	mov	r0, r5
 800f3e8:	47b8      	blx	r7
 800f3ea:	3001      	adds	r0, #1
 800f3ec:	d1c0      	bne.n	800f370 <_printf_float+0x304>
 800f3ee:	e69e      	b.n	800f12e <_printf_float+0xc2>
 800f3f0:	2301      	movs	r3, #1
 800f3f2:	4631      	mov	r1, r6
 800f3f4:	4628      	mov	r0, r5
 800f3f6:	9205      	str	r2, [sp, #20]
 800f3f8:	47b8      	blx	r7
 800f3fa:	3001      	adds	r0, #1
 800f3fc:	f43f ae97 	beq.w	800f12e <_printf_float+0xc2>
 800f400:	9a05      	ldr	r2, [sp, #20]
 800f402:	f10b 0b01 	add.w	fp, fp, #1
 800f406:	e7b9      	b.n	800f37c <_printf_float+0x310>
 800f408:	ee18 3a10 	vmov	r3, s16
 800f40c:	4652      	mov	r2, sl
 800f40e:	4631      	mov	r1, r6
 800f410:	4628      	mov	r0, r5
 800f412:	47b8      	blx	r7
 800f414:	3001      	adds	r0, #1
 800f416:	d1be      	bne.n	800f396 <_printf_float+0x32a>
 800f418:	e689      	b.n	800f12e <_printf_float+0xc2>
 800f41a:	9a05      	ldr	r2, [sp, #20]
 800f41c:	464b      	mov	r3, r9
 800f41e:	4442      	add	r2, r8
 800f420:	4631      	mov	r1, r6
 800f422:	4628      	mov	r0, r5
 800f424:	47b8      	blx	r7
 800f426:	3001      	adds	r0, #1
 800f428:	d1c1      	bne.n	800f3ae <_printf_float+0x342>
 800f42a:	e680      	b.n	800f12e <_printf_float+0xc2>
 800f42c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f42e:	2a01      	cmp	r2, #1
 800f430:	dc01      	bgt.n	800f436 <_printf_float+0x3ca>
 800f432:	07db      	lsls	r3, r3, #31
 800f434:	d538      	bpl.n	800f4a8 <_printf_float+0x43c>
 800f436:	2301      	movs	r3, #1
 800f438:	4642      	mov	r2, r8
 800f43a:	4631      	mov	r1, r6
 800f43c:	4628      	mov	r0, r5
 800f43e:	47b8      	blx	r7
 800f440:	3001      	adds	r0, #1
 800f442:	f43f ae74 	beq.w	800f12e <_printf_float+0xc2>
 800f446:	ee18 3a10 	vmov	r3, s16
 800f44a:	4652      	mov	r2, sl
 800f44c:	4631      	mov	r1, r6
 800f44e:	4628      	mov	r0, r5
 800f450:	47b8      	blx	r7
 800f452:	3001      	adds	r0, #1
 800f454:	f43f ae6b 	beq.w	800f12e <_printf_float+0xc2>
 800f458:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f45c:	2200      	movs	r2, #0
 800f45e:	2300      	movs	r3, #0
 800f460:	f7f1 fb32 	bl	8000ac8 <__aeabi_dcmpeq>
 800f464:	b9d8      	cbnz	r0, 800f49e <_printf_float+0x432>
 800f466:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f468:	f108 0201 	add.w	r2, r8, #1
 800f46c:	3b01      	subs	r3, #1
 800f46e:	4631      	mov	r1, r6
 800f470:	4628      	mov	r0, r5
 800f472:	47b8      	blx	r7
 800f474:	3001      	adds	r0, #1
 800f476:	d10e      	bne.n	800f496 <_printf_float+0x42a>
 800f478:	e659      	b.n	800f12e <_printf_float+0xc2>
 800f47a:	2301      	movs	r3, #1
 800f47c:	4652      	mov	r2, sl
 800f47e:	4631      	mov	r1, r6
 800f480:	4628      	mov	r0, r5
 800f482:	47b8      	blx	r7
 800f484:	3001      	adds	r0, #1
 800f486:	f43f ae52 	beq.w	800f12e <_printf_float+0xc2>
 800f48a:	f108 0801 	add.w	r8, r8, #1
 800f48e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f490:	3b01      	subs	r3, #1
 800f492:	4543      	cmp	r3, r8
 800f494:	dcf1      	bgt.n	800f47a <_printf_float+0x40e>
 800f496:	464b      	mov	r3, r9
 800f498:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800f49c:	e6dc      	b.n	800f258 <_printf_float+0x1ec>
 800f49e:	f04f 0800 	mov.w	r8, #0
 800f4a2:	f104 0a1a 	add.w	sl, r4, #26
 800f4a6:	e7f2      	b.n	800f48e <_printf_float+0x422>
 800f4a8:	2301      	movs	r3, #1
 800f4aa:	4642      	mov	r2, r8
 800f4ac:	e7df      	b.n	800f46e <_printf_float+0x402>
 800f4ae:	2301      	movs	r3, #1
 800f4b0:	464a      	mov	r2, r9
 800f4b2:	4631      	mov	r1, r6
 800f4b4:	4628      	mov	r0, r5
 800f4b6:	47b8      	blx	r7
 800f4b8:	3001      	adds	r0, #1
 800f4ba:	f43f ae38 	beq.w	800f12e <_printf_float+0xc2>
 800f4be:	f108 0801 	add.w	r8, r8, #1
 800f4c2:	68e3      	ldr	r3, [r4, #12]
 800f4c4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f4c6:	1a5b      	subs	r3, r3, r1
 800f4c8:	4543      	cmp	r3, r8
 800f4ca:	dcf0      	bgt.n	800f4ae <_printf_float+0x442>
 800f4cc:	e6fa      	b.n	800f2c4 <_printf_float+0x258>
 800f4ce:	f04f 0800 	mov.w	r8, #0
 800f4d2:	f104 0919 	add.w	r9, r4, #25
 800f4d6:	e7f4      	b.n	800f4c2 <_printf_float+0x456>

0800f4d8 <_printf_common>:
 800f4d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f4dc:	4616      	mov	r6, r2
 800f4de:	4699      	mov	r9, r3
 800f4e0:	688a      	ldr	r2, [r1, #8]
 800f4e2:	690b      	ldr	r3, [r1, #16]
 800f4e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f4e8:	4293      	cmp	r3, r2
 800f4ea:	bfb8      	it	lt
 800f4ec:	4613      	movlt	r3, r2
 800f4ee:	6033      	str	r3, [r6, #0]
 800f4f0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f4f4:	4607      	mov	r7, r0
 800f4f6:	460c      	mov	r4, r1
 800f4f8:	b10a      	cbz	r2, 800f4fe <_printf_common+0x26>
 800f4fa:	3301      	adds	r3, #1
 800f4fc:	6033      	str	r3, [r6, #0]
 800f4fe:	6823      	ldr	r3, [r4, #0]
 800f500:	0699      	lsls	r1, r3, #26
 800f502:	bf42      	ittt	mi
 800f504:	6833      	ldrmi	r3, [r6, #0]
 800f506:	3302      	addmi	r3, #2
 800f508:	6033      	strmi	r3, [r6, #0]
 800f50a:	6825      	ldr	r5, [r4, #0]
 800f50c:	f015 0506 	ands.w	r5, r5, #6
 800f510:	d106      	bne.n	800f520 <_printf_common+0x48>
 800f512:	f104 0a19 	add.w	sl, r4, #25
 800f516:	68e3      	ldr	r3, [r4, #12]
 800f518:	6832      	ldr	r2, [r6, #0]
 800f51a:	1a9b      	subs	r3, r3, r2
 800f51c:	42ab      	cmp	r3, r5
 800f51e:	dc26      	bgt.n	800f56e <_printf_common+0x96>
 800f520:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f524:	1e13      	subs	r3, r2, #0
 800f526:	6822      	ldr	r2, [r4, #0]
 800f528:	bf18      	it	ne
 800f52a:	2301      	movne	r3, #1
 800f52c:	0692      	lsls	r2, r2, #26
 800f52e:	d42b      	bmi.n	800f588 <_printf_common+0xb0>
 800f530:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f534:	4649      	mov	r1, r9
 800f536:	4638      	mov	r0, r7
 800f538:	47c0      	blx	r8
 800f53a:	3001      	adds	r0, #1
 800f53c:	d01e      	beq.n	800f57c <_printf_common+0xa4>
 800f53e:	6823      	ldr	r3, [r4, #0]
 800f540:	68e5      	ldr	r5, [r4, #12]
 800f542:	6832      	ldr	r2, [r6, #0]
 800f544:	f003 0306 	and.w	r3, r3, #6
 800f548:	2b04      	cmp	r3, #4
 800f54a:	bf08      	it	eq
 800f54c:	1aad      	subeq	r5, r5, r2
 800f54e:	68a3      	ldr	r3, [r4, #8]
 800f550:	6922      	ldr	r2, [r4, #16]
 800f552:	bf0c      	ite	eq
 800f554:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f558:	2500      	movne	r5, #0
 800f55a:	4293      	cmp	r3, r2
 800f55c:	bfc4      	itt	gt
 800f55e:	1a9b      	subgt	r3, r3, r2
 800f560:	18ed      	addgt	r5, r5, r3
 800f562:	2600      	movs	r6, #0
 800f564:	341a      	adds	r4, #26
 800f566:	42b5      	cmp	r5, r6
 800f568:	d11a      	bne.n	800f5a0 <_printf_common+0xc8>
 800f56a:	2000      	movs	r0, #0
 800f56c:	e008      	b.n	800f580 <_printf_common+0xa8>
 800f56e:	2301      	movs	r3, #1
 800f570:	4652      	mov	r2, sl
 800f572:	4649      	mov	r1, r9
 800f574:	4638      	mov	r0, r7
 800f576:	47c0      	blx	r8
 800f578:	3001      	adds	r0, #1
 800f57a:	d103      	bne.n	800f584 <_printf_common+0xac>
 800f57c:	f04f 30ff 	mov.w	r0, #4294967295
 800f580:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f584:	3501      	adds	r5, #1
 800f586:	e7c6      	b.n	800f516 <_printf_common+0x3e>
 800f588:	18e1      	adds	r1, r4, r3
 800f58a:	1c5a      	adds	r2, r3, #1
 800f58c:	2030      	movs	r0, #48	; 0x30
 800f58e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f592:	4422      	add	r2, r4
 800f594:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f598:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f59c:	3302      	adds	r3, #2
 800f59e:	e7c7      	b.n	800f530 <_printf_common+0x58>
 800f5a0:	2301      	movs	r3, #1
 800f5a2:	4622      	mov	r2, r4
 800f5a4:	4649      	mov	r1, r9
 800f5a6:	4638      	mov	r0, r7
 800f5a8:	47c0      	blx	r8
 800f5aa:	3001      	adds	r0, #1
 800f5ac:	d0e6      	beq.n	800f57c <_printf_common+0xa4>
 800f5ae:	3601      	adds	r6, #1
 800f5b0:	e7d9      	b.n	800f566 <_printf_common+0x8e>
	...

0800f5b4 <_printf_i>:
 800f5b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f5b8:	7e0f      	ldrb	r7, [r1, #24]
 800f5ba:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f5bc:	2f78      	cmp	r7, #120	; 0x78
 800f5be:	4691      	mov	r9, r2
 800f5c0:	4680      	mov	r8, r0
 800f5c2:	460c      	mov	r4, r1
 800f5c4:	469a      	mov	sl, r3
 800f5c6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f5ca:	d807      	bhi.n	800f5dc <_printf_i+0x28>
 800f5cc:	2f62      	cmp	r7, #98	; 0x62
 800f5ce:	d80a      	bhi.n	800f5e6 <_printf_i+0x32>
 800f5d0:	2f00      	cmp	r7, #0
 800f5d2:	f000 80d8 	beq.w	800f786 <_printf_i+0x1d2>
 800f5d6:	2f58      	cmp	r7, #88	; 0x58
 800f5d8:	f000 80a3 	beq.w	800f722 <_printf_i+0x16e>
 800f5dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f5e0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f5e4:	e03a      	b.n	800f65c <_printf_i+0xa8>
 800f5e6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f5ea:	2b15      	cmp	r3, #21
 800f5ec:	d8f6      	bhi.n	800f5dc <_printf_i+0x28>
 800f5ee:	a101      	add	r1, pc, #4	; (adr r1, 800f5f4 <_printf_i+0x40>)
 800f5f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f5f4:	0800f64d 	.word	0x0800f64d
 800f5f8:	0800f661 	.word	0x0800f661
 800f5fc:	0800f5dd 	.word	0x0800f5dd
 800f600:	0800f5dd 	.word	0x0800f5dd
 800f604:	0800f5dd 	.word	0x0800f5dd
 800f608:	0800f5dd 	.word	0x0800f5dd
 800f60c:	0800f661 	.word	0x0800f661
 800f610:	0800f5dd 	.word	0x0800f5dd
 800f614:	0800f5dd 	.word	0x0800f5dd
 800f618:	0800f5dd 	.word	0x0800f5dd
 800f61c:	0800f5dd 	.word	0x0800f5dd
 800f620:	0800f76d 	.word	0x0800f76d
 800f624:	0800f691 	.word	0x0800f691
 800f628:	0800f74f 	.word	0x0800f74f
 800f62c:	0800f5dd 	.word	0x0800f5dd
 800f630:	0800f5dd 	.word	0x0800f5dd
 800f634:	0800f78f 	.word	0x0800f78f
 800f638:	0800f5dd 	.word	0x0800f5dd
 800f63c:	0800f691 	.word	0x0800f691
 800f640:	0800f5dd 	.word	0x0800f5dd
 800f644:	0800f5dd 	.word	0x0800f5dd
 800f648:	0800f757 	.word	0x0800f757
 800f64c:	682b      	ldr	r3, [r5, #0]
 800f64e:	1d1a      	adds	r2, r3, #4
 800f650:	681b      	ldr	r3, [r3, #0]
 800f652:	602a      	str	r2, [r5, #0]
 800f654:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f658:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f65c:	2301      	movs	r3, #1
 800f65e:	e0a3      	b.n	800f7a8 <_printf_i+0x1f4>
 800f660:	6820      	ldr	r0, [r4, #0]
 800f662:	6829      	ldr	r1, [r5, #0]
 800f664:	0606      	lsls	r6, r0, #24
 800f666:	f101 0304 	add.w	r3, r1, #4
 800f66a:	d50a      	bpl.n	800f682 <_printf_i+0xce>
 800f66c:	680e      	ldr	r6, [r1, #0]
 800f66e:	602b      	str	r3, [r5, #0]
 800f670:	2e00      	cmp	r6, #0
 800f672:	da03      	bge.n	800f67c <_printf_i+0xc8>
 800f674:	232d      	movs	r3, #45	; 0x2d
 800f676:	4276      	negs	r6, r6
 800f678:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f67c:	485e      	ldr	r0, [pc, #376]	; (800f7f8 <_printf_i+0x244>)
 800f67e:	230a      	movs	r3, #10
 800f680:	e019      	b.n	800f6b6 <_printf_i+0x102>
 800f682:	680e      	ldr	r6, [r1, #0]
 800f684:	602b      	str	r3, [r5, #0]
 800f686:	f010 0f40 	tst.w	r0, #64	; 0x40
 800f68a:	bf18      	it	ne
 800f68c:	b236      	sxthne	r6, r6
 800f68e:	e7ef      	b.n	800f670 <_printf_i+0xbc>
 800f690:	682b      	ldr	r3, [r5, #0]
 800f692:	6820      	ldr	r0, [r4, #0]
 800f694:	1d19      	adds	r1, r3, #4
 800f696:	6029      	str	r1, [r5, #0]
 800f698:	0601      	lsls	r1, r0, #24
 800f69a:	d501      	bpl.n	800f6a0 <_printf_i+0xec>
 800f69c:	681e      	ldr	r6, [r3, #0]
 800f69e:	e002      	b.n	800f6a6 <_printf_i+0xf2>
 800f6a0:	0646      	lsls	r6, r0, #25
 800f6a2:	d5fb      	bpl.n	800f69c <_printf_i+0xe8>
 800f6a4:	881e      	ldrh	r6, [r3, #0]
 800f6a6:	4854      	ldr	r0, [pc, #336]	; (800f7f8 <_printf_i+0x244>)
 800f6a8:	2f6f      	cmp	r7, #111	; 0x6f
 800f6aa:	bf0c      	ite	eq
 800f6ac:	2308      	moveq	r3, #8
 800f6ae:	230a      	movne	r3, #10
 800f6b0:	2100      	movs	r1, #0
 800f6b2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f6b6:	6865      	ldr	r5, [r4, #4]
 800f6b8:	60a5      	str	r5, [r4, #8]
 800f6ba:	2d00      	cmp	r5, #0
 800f6bc:	bfa2      	ittt	ge
 800f6be:	6821      	ldrge	r1, [r4, #0]
 800f6c0:	f021 0104 	bicge.w	r1, r1, #4
 800f6c4:	6021      	strge	r1, [r4, #0]
 800f6c6:	b90e      	cbnz	r6, 800f6cc <_printf_i+0x118>
 800f6c8:	2d00      	cmp	r5, #0
 800f6ca:	d04d      	beq.n	800f768 <_printf_i+0x1b4>
 800f6cc:	4615      	mov	r5, r2
 800f6ce:	fbb6 f1f3 	udiv	r1, r6, r3
 800f6d2:	fb03 6711 	mls	r7, r3, r1, r6
 800f6d6:	5dc7      	ldrb	r7, [r0, r7]
 800f6d8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f6dc:	4637      	mov	r7, r6
 800f6de:	42bb      	cmp	r3, r7
 800f6e0:	460e      	mov	r6, r1
 800f6e2:	d9f4      	bls.n	800f6ce <_printf_i+0x11a>
 800f6e4:	2b08      	cmp	r3, #8
 800f6e6:	d10b      	bne.n	800f700 <_printf_i+0x14c>
 800f6e8:	6823      	ldr	r3, [r4, #0]
 800f6ea:	07de      	lsls	r6, r3, #31
 800f6ec:	d508      	bpl.n	800f700 <_printf_i+0x14c>
 800f6ee:	6923      	ldr	r3, [r4, #16]
 800f6f0:	6861      	ldr	r1, [r4, #4]
 800f6f2:	4299      	cmp	r1, r3
 800f6f4:	bfde      	ittt	le
 800f6f6:	2330      	movle	r3, #48	; 0x30
 800f6f8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f6fc:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f700:	1b52      	subs	r2, r2, r5
 800f702:	6122      	str	r2, [r4, #16]
 800f704:	f8cd a000 	str.w	sl, [sp]
 800f708:	464b      	mov	r3, r9
 800f70a:	aa03      	add	r2, sp, #12
 800f70c:	4621      	mov	r1, r4
 800f70e:	4640      	mov	r0, r8
 800f710:	f7ff fee2 	bl	800f4d8 <_printf_common>
 800f714:	3001      	adds	r0, #1
 800f716:	d14c      	bne.n	800f7b2 <_printf_i+0x1fe>
 800f718:	f04f 30ff 	mov.w	r0, #4294967295
 800f71c:	b004      	add	sp, #16
 800f71e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f722:	4835      	ldr	r0, [pc, #212]	; (800f7f8 <_printf_i+0x244>)
 800f724:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800f728:	6829      	ldr	r1, [r5, #0]
 800f72a:	6823      	ldr	r3, [r4, #0]
 800f72c:	f851 6b04 	ldr.w	r6, [r1], #4
 800f730:	6029      	str	r1, [r5, #0]
 800f732:	061d      	lsls	r5, r3, #24
 800f734:	d514      	bpl.n	800f760 <_printf_i+0x1ac>
 800f736:	07df      	lsls	r7, r3, #31
 800f738:	bf44      	itt	mi
 800f73a:	f043 0320 	orrmi.w	r3, r3, #32
 800f73e:	6023      	strmi	r3, [r4, #0]
 800f740:	b91e      	cbnz	r6, 800f74a <_printf_i+0x196>
 800f742:	6823      	ldr	r3, [r4, #0]
 800f744:	f023 0320 	bic.w	r3, r3, #32
 800f748:	6023      	str	r3, [r4, #0]
 800f74a:	2310      	movs	r3, #16
 800f74c:	e7b0      	b.n	800f6b0 <_printf_i+0xfc>
 800f74e:	6823      	ldr	r3, [r4, #0]
 800f750:	f043 0320 	orr.w	r3, r3, #32
 800f754:	6023      	str	r3, [r4, #0]
 800f756:	2378      	movs	r3, #120	; 0x78
 800f758:	4828      	ldr	r0, [pc, #160]	; (800f7fc <_printf_i+0x248>)
 800f75a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f75e:	e7e3      	b.n	800f728 <_printf_i+0x174>
 800f760:	0659      	lsls	r1, r3, #25
 800f762:	bf48      	it	mi
 800f764:	b2b6      	uxthmi	r6, r6
 800f766:	e7e6      	b.n	800f736 <_printf_i+0x182>
 800f768:	4615      	mov	r5, r2
 800f76a:	e7bb      	b.n	800f6e4 <_printf_i+0x130>
 800f76c:	682b      	ldr	r3, [r5, #0]
 800f76e:	6826      	ldr	r6, [r4, #0]
 800f770:	6961      	ldr	r1, [r4, #20]
 800f772:	1d18      	adds	r0, r3, #4
 800f774:	6028      	str	r0, [r5, #0]
 800f776:	0635      	lsls	r5, r6, #24
 800f778:	681b      	ldr	r3, [r3, #0]
 800f77a:	d501      	bpl.n	800f780 <_printf_i+0x1cc>
 800f77c:	6019      	str	r1, [r3, #0]
 800f77e:	e002      	b.n	800f786 <_printf_i+0x1d2>
 800f780:	0670      	lsls	r0, r6, #25
 800f782:	d5fb      	bpl.n	800f77c <_printf_i+0x1c8>
 800f784:	8019      	strh	r1, [r3, #0]
 800f786:	2300      	movs	r3, #0
 800f788:	6123      	str	r3, [r4, #16]
 800f78a:	4615      	mov	r5, r2
 800f78c:	e7ba      	b.n	800f704 <_printf_i+0x150>
 800f78e:	682b      	ldr	r3, [r5, #0]
 800f790:	1d1a      	adds	r2, r3, #4
 800f792:	602a      	str	r2, [r5, #0]
 800f794:	681d      	ldr	r5, [r3, #0]
 800f796:	6862      	ldr	r2, [r4, #4]
 800f798:	2100      	movs	r1, #0
 800f79a:	4628      	mov	r0, r5
 800f79c:	f7f0 fd20 	bl	80001e0 <memchr>
 800f7a0:	b108      	cbz	r0, 800f7a6 <_printf_i+0x1f2>
 800f7a2:	1b40      	subs	r0, r0, r5
 800f7a4:	6060      	str	r0, [r4, #4]
 800f7a6:	6863      	ldr	r3, [r4, #4]
 800f7a8:	6123      	str	r3, [r4, #16]
 800f7aa:	2300      	movs	r3, #0
 800f7ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f7b0:	e7a8      	b.n	800f704 <_printf_i+0x150>
 800f7b2:	6923      	ldr	r3, [r4, #16]
 800f7b4:	462a      	mov	r2, r5
 800f7b6:	4649      	mov	r1, r9
 800f7b8:	4640      	mov	r0, r8
 800f7ba:	47d0      	blx	sl
 800f7bc:	3001      	adds	r0, #1
 800f7be:	d0ab      	beq.n	800f718 <_printf_i+0x164>
 800f7c0:	6823      	ldr	r3, [r4, #0]
 800f7c2:	079b      	lsls	r3, r3, #30
 800f7c4:	d413      	bmi.n	800f7ee <_printf_i+0x23a>
 800f7c6:	68e0      	ldr	r0, [r4, #12]
 800f7c8:	9b03      	ldr	r3, [sp, #12]
 800f7ca:	4298      	cmp	r0, r3
 800f7cc:	bfb8      	it	lt
 800f7ce:	4618      	movlt	r0, r3
 800f7d0:	e7a4      	b.n	800f71c <_printf_i+0x168>
 800f7d2:	2301      	movs	r3, #1
 800f7d4:	4632      	mov	r2, r6
 800f7d6:	4649      	mov	r1, r9
 800f7d8:	4640      	mov	r0, r8
 800f7da:	47d0      	blx	sl
 800f7dc:	3001      	adds	r0, #1
 800f7de:	d09b      	beq.n	800f718 <_printf_i+0x164>
 800f7e0:	3501      	adds	r5, #1
 800f7e2:	68e3      	ldr	r3, [r4, #12]
 800f7e4:	9903      	ldr	r1, [sp, #12]
 800f7e6:	1a5b      	subs	r3, r3, r1
 800f7e8:	42ab      	cmp	r3, r5
 800f7ea:	dcf2      	bgt.n	800f7d2 <_printf_i+0x21e>
 800f7ec:	e7eb      	b.n	800f7c6 <_printf_i+0x212>
 800f7ee:	2500      	movs	r5, #0
 800f7f0:	f104 0619 	add.w	r6, r4, #25
 800f7f4:	e7f5      	b.n	800f7e2 <_printf_i+0x22e>
 800f7f6:	bf00      	nop
 800f7f8:	08014442 	.word	0x08014442
 800f7fc:	08014453 	.word	0x08014453

0800f800 <siprintf>:
 800f800:	b40e      	push	{r1, r2, r3}
 800f802:	b500      	push	{lr}
 800f804:	b09c      	sub	sp, #112	; 0x70
 800f806:	ab1d      	add	r3, sp, #116	; 0x74
 800f808:	9002      	str	r0, [sp, #8]
 800f80a:	9006      	str	r0, [sp, #24]
 800f80c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f810:	4809      	ldr	r0, [pc, #36]	; (800f838 <siprintf+0x38>)
 800f812:	9107      	str	r1, [sp, #28]
 800f814:	9104      	str	r1, [sp, #16]
 800f816:	4909      	ldr	r1, [pc, #36]	; (800f83c <siprintf+0x3c>)
 800f818:	f853 2b04 	ldr.w	r2, [r3], #4
 800f81c:	9105      	str	r1, [sp, #20]
 800f81e:	6800      	ldr	r0, [r0, #0]
 800f820:	9301      	str	r3, [sp, #4]
 800f822:	a902      	add	r1, sp, #8
 800f824:	f001 fb68 	bl	8010ef8 <_svfiprintf_r>
 800f828:	9b02      	ldr	r3, [sp, #8]
 800f82a:	2200      	movs	r2, #0
 800f82c:	701a      	strb	r2, [r3, #0]
 800f82e:	b01c      	add	sp, #112	; 0x70
 800f830:	f85d eb04 	ldr.w	lr, [sp], #4
 800f834:	b003      	add	sp, #12
 800f836:	4770      	bx	lr
 800f838:	2000001c 	.word	0x2000001c
 800f83c:	ffff0208 	.word	0xffff0208

0800f840 <quorem>:
 800f840:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f844:	6903      	ldr	r3, [r0, #16]
 800f846:	690c      	ldr	r4, [r1, #16]
 800f848:	42a3      	cmp	r3, r4
 800f84a:	4607      	mov	r7, r0
 800f84c:	f2c0 8081 	blt.w	800f952 <quorem+0x112>
 800f850:	3c01      	subs	r4, #1
 800f852:	f101 0814 	add.w	r8, r1, #20
 800f856:	f100 0514 	add.w	r5, r0, #20
 800f85a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f85e:	9301      	str	r3, [sp, #4]
 800f860:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800f864:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f868:	3301      	adds	r3, #1
 800f86a:	429a      	cmp	r2, r3
 800f86c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800f870:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800f874:	fbb2 f6f3 	udiv	r6, r2, r3
 800f878:	d331      	bcc.n	800f8de <quorem+0x9e>
 800f87a:	f04f 0e00 	mov.w	lr, #0
 800f87e:	4640      	mov	r0, r8
 800f880:	46ac      	mov	ip, r5
 800f882:	46f2      	mov	sl, lr
 800f884:	f850 2b04 	ldr.w	r2, [r0], #4
 800f888:	b293      	uxth	r3, r2
 800f88a:	fb06 e303 	mla	r3, r6, r3, lr
 800f88e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800f892:	b29b      	uxth	r3, r3
 800f894:	ebaa 0303 	sub.w	r3, sl, r3
 800f898:	f8dc a000 	ldr.w	sl, [ip]
 800f89c:	0c12      	lsrs	r2, r2, #16
 800f89e:	fa13 f38a 	uxtah	r3, r3, sl
 800f8a2:	fb06 e202 	mla	r2, r6, r2, lr
 800f8a6:	9300      	str	r3, [sp, #0]
 800f8a8:	9b00      	ldr	r3, [sp, #0]
 800f8aa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800f8ae:	b292      	uxth	r2, r2
 800f8b0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800f8b4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f8b8:	f8bd 3000 	ldrh.w	r3, [sp]
 800f8bc:	4581      	cmp	r9, r0
 800f8be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f8c2:	f84c 3b04 	str.w	r3, [ip], #4
 800f8c6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800f8ca:	d2db      	bcs.n	800f884 <quorem+0x44>
 800f8cc:	f855 300b 	ldr.w	r3, [r5, fp]
 800f8d0:	b92b      	cbnz	r3, 800f8de <quorem+0x9e>
 800f8d2:	9b01      	ldr	r3, [sp, #4]
 800f8d4:	3b04      	subs	r3, #4
 800f8d6:	429d      	cmp	r5, r3
 800f8d8:	461a      	mov	r2, r3
 800f8da:	d32e      	bcc.n	800f93a <quorem+0xfa>
 800f8dc:	613c      	str	r4, [r7, #16]
 800f8de:	4638      	mov	r0, r7
 800f8e0:	f001 f8b6 	bl	8010a50 <__mcmp>
 800f8e4:	2800      	cmp	r0, #0
 800f8e6:	db24      	blt.n	800f932 <quorem+0xf2>
 800f8e8:	3601      	adds	r6, #1
 800f8ea:	4628      	mov	r0, r5
 800f8ec:	f04f 0c00 	mov.w	ip, #0
 800f8f0:	f858 2b04 	ldr.w	r2, [r8], #4
 800f8f4:	f8d0 e000 	ldr.w	lr, [r0]
 800f8f8:	b293      	uxth	r3, r2
 800f8fa:	ebac 0303 	sub.w	r3, ip, r3
 800f8fe:	0c12      	lsrs	r2, r2, #16
 800f900:	fa13 f38e 	uxtah	r3, r3, lr
 800f904:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800f908:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f90c:	b29b      	uxth	r3, r3
 800f90e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f912:	45c1      	cmp	r9, r8
 800f914:	f840 3b04 	str.w	r3, [r0], #4
 800f918:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800f91c:	d2e8      	bcs.n	800f8f0 <quorem+0xb0>
 800f91e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f922:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f926:	b922      	cbnz	r2, 800f932 <quorem+0xf2>
 800f928:	3b04      	subs	r3, #4
 800f92a:	429d      	cmp	r5, r3
 800f92c:	461a      	mov	r2, r3
 800f92e:	d30a      	bcc.n	800f946 <quorem+0x106>
 800f930:	613c      	str	r4, [r7, #16]
 800f932:	4630      	mov	r0, r6
 800f934:	b003      	add	sp, #12
 800f936:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f93a:	6812      	ldr	r2, [r2, #0]
 800f93c:	3b04      	subs	r3, #4
 800f93e:	2a00      	cmp	r2, #0
 800f940:	d1cc      	bne.n	800f8dc <quorem+0x9c>
 800f942:	3c01      	subs	r4, #1
 800f944:	e7c7      	b.n	800f8d6 <quorem+0x96>
 800f946:	6812      	ldr	r2, [r2, #0]
 800f948:	3b04      	subs	r3, #4
 800f94a:	2a00      	cmp	r2, #0
 800f94c:	d1f0      	bne.n	800f930 <quorem+0xf0>
 800f94e:	3c01      	subs	r4, #1
 800f950:	e7eb      	b.n	800f92a <quorem+0xea>
 800f952:	2000      	movs	r0, #0
 800f954:	e7ee      	b.n	800f934 <quorem+0xf4>
	...

0800f958 <_dtoa_r>:
 800f958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f95c:	ed2d 8b04 	vpush	{d8-d9}
 800f960:	ec57 6b10 	vmov	r6, r7, d0
 800f964:	b093      	sub	sp, #76	; 0x4c
 800f966:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800f968:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800f96c:	9106      	str	r1, [sp, #24]
 800f96e:	ee10 aa10 	vmov	sl, s0
 800f972:	4604      	mov	r4, r0
 800f974:	9209      	str	r2, [sp, #36]	; 0x24
 800f976:	930c      	str	r3, [sp, #48]	; 0x30
 800f978:	46bb      	mov	fp, r7
 800f97a:	b975      	cbnz	r5, 800f99a <_dtoa_r+0x42>
 800f97c:	2010      	movs	r0, #16
 800f97e:	f000 fddd 	bl	801053c <malloc>
 800f982:	4602      	mov	r2, r0
 800f984:	6260      	str	r0, [r4, #36]	; 0x24
 800f986:	b920      	cbnz	r0, 800f992 <_dtoa_r+0x3a>
 800f988:	4ba7      	ldr	r3, [pc, #668]	; (800fc28 <_dtoa_r+0x2d0>)
 800f98a:	21ea      	movs	r1, #234	; 0xea
 800f98c:	48a7      	ldr	r0, [pc, #668]	; (800fc2c <_dtoa_r+0x2d4>)
 800f98e:	f001 fbc3 	bl	8011118 <__assert_func>
 800f992:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800f996:	6005      	str	r5, [r0, #0]
 800f998:	60c5      	str	r5, [r0, #12]
 800f99a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f99c:	6819      	ldr	r1, [r3, #0]
 800f99e:	b151      	cbz	r1, 800f9b6 <_dtoa_r+0x5e>
 800f9a0:	685a      	ldr	r2, [r3, #4]
 800f9a2:	604a      	str	r2, [r1, #4]
 800f9a4:	2301      	movs	r3, #1
 800f9a6:	4093      	lsls	r3, r2
 800f9a8:	608b      	str	r3, [r1, #8]
 800f9aa:	4620      	mov	r0, r4
 800f9ac:	f000 fe0e 	bl	80105cc <_Bfree>
 800f9b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f9b2:	2200      	movs	r2, #0
 800f9b4:	601a      	str	r2, [r3, #0]
 800f9b6:	1e3b      	subs	r3, r7, #0
 800f9b8:	bfaa      	itet	ge
 800f9ba:	2300      	movge	r3, #0
 800f9bc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800f9c0:	f8c8 3000 	strge.w	r3, [r8]
 800f9c4:	4b9a      	ldr	r3, [pc, #616]	; (800fc30 <_dtoa_r+0x2d8>)
 800f9c6:	bfbc      	itt	lt
 800f9c8:	2201      	movlt	r2, #1
 800f9ca:	f8c8 2000 	strlt.w	r2, [r8]
 800f9ce:	ea33 030b 	bics.w	r3, r3, fp
 800f9d2:	d11b      	bne.n	800fa0c <_dtoa_r+0xb4>
 800f9d4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f9d6:	f242 730f 	movw	r3, #9999	; 0x270f
 800f9da:	6013      	str	r3, [r2, #0]
 800f9dc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f9e0:	4333      	orrs	r3, r6
 800f9e2:	f000 8592 	beq.w	801050a <_dtoa_r+0xbb2>
 800f9e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f9e8:	b963      	cbnz	r3, 800fa04 <_dtoa_r+0xac>
 800f9ea:	4b92      	ldr	r3, [pc, #584]	; (800fc34 <_dtoa_r+0x2dc>)
 800f9ec:	e022      	b.n	800fa34 <_dtoa_r+0xdc>
 800f9ee:	4b92      	ldr	r3, [pc, #584]	; (800fc38 <_dtoa_r+0x2e0>)
 800f9f0:	9301      	str	r3, [sp, #4]
 800f9f2:	3308      	adds	r3, #8
 800f9f4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800f9f6:	6013      	str	r3, [r2, #0]
 800f9f8:	9801      	ldr	r0, [sp, #4]
 800f9fa:	b013      	add	sp, #76	; 0x4c
 800f9fc:	ecbd 8b04 	vpop	{d8-d9}
 800fa00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa04:	4b8b      	ldr	r3, [pc, #556]	; (800fc34 <_dtoa_r+0x2dc>)
 800fa06:	9301      	str	r3, [sp, #4]
 800fa08:	3303      	adds	r3, #3
 800fa0a:	e7f3      	b.n	800f9f4 <_dtoa_r+0x9c>
 800fa0c:	2200      	movs	r2, #0
 800fa0e:	2300      	movs	r3, #0
 800fa10:	4650      	mov	r0, sl
 800fa12:	4659      	mov	r1, fp
 800fa14:	f7f1 f858 	bl	8000ac8 <__aeabi_dcmpeq>
 800fa18:	ec4b ab19 	vmov	d9, sl, fp
 800fa1c:	4680      	mov	r8, r0
 800fa1e:	b158      	cbz	r0, 800fa38 <_dtoa_r+0xe0>
 800fa20:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800fa22:	2301      	movs	r3, #1
 800fa24:	6013      	str	r3, [r2, #0]
 800fa26:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fa28:	2b00      	cmp	r3, #0
 800fa2a:	f000 856b 	beq.w	8010504 <_dtoa_r+0xbac>
 800fa2e:	4883      	ldr	r0, [pc, #524]	; (800fc3c <_dtoa_r+0x2e4>)
 800fa30:	6018      	str	r0, [r3, #0]
 800fa32:	1e43      	subs	r3, r0, #1
 800fa34:	9301      	str	r3, [sp, #4]
 800fa36:	e7df      	b.n	800f9f8 <_dtoa_r+0xa0>
 800fa38:	ec4b ab10 	vmov	d0, sl, fp
 800fa3c:	aa10      	add	r2, sp, #64	; 0x40
 800fa3e:	a911      	add	r1, sp, #68	; 0x44
 800fa40:	4620      	mov	r0, r4
 800fa42:	f001 f8ab 	bl	8010b9c <__d2b>
 800fa46:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800fa4a:	ee08 0a10 	vmov	s16, r0
 800fa4e:	2d00      	cmp	r5, #0
 800fa50:	f000 8084 	beq.w	800fb5c <_dtoa_r+0x204>
 800fa54:	ee19 3a90 	vmov	r3, s19
 800fa58:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fa5c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800fa60:	4656      	mov	r6, sl
 800fa62:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800fa66:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800fa6a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800fa6e:	4b74      	ldr	r3, [pc, #464]	; (800fc40 <_dtoa_r+0x2e8>)
 800fa70:	2200      	movs	r2, #0
 800fa72:	4630      	mov	r0, r6
 800fa74:	4639      	mov	r1, r7
 800fa76:	f7f0 fc07 	bl	8000288 <__aeabi_dsub>
 800fa7a:	a365      	add	r3, pc, #404	; (adr r3, 800fc10 <_dtoa_r+0x2b8>)
 800fa7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa80:	f7f0 fdba 	bl	80005f8 <__aeabi_dmul>
 800fa84:	a364      	add	r3, pc, #400	; (adr r3, 800fc18 <_dtoa_r+0x2c0>)
 800fa86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa8a:	f7f0 fbff 	bl	800028c <__adddf3>
 800fa8e:	4606      	mov	r6, r0
 800fa90:	4628      	mov	r0, r5
 800fa92:	460f      	mov	r7, r1
 800fa94:	f7f0 fd46 	bl	8000524 <__aeabi_i2d>
 800fa98:	a361      	add	r3, pc, #388	; (adr r3, 800fc20 <_dtoa_r+0x2c8>)
 800fa9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa9e:	f7f0 fdab 	bl	80005f8 <__aeabi_dmul>
 800faa2:	4602      	mov	r2, r0
 800faa4:	460b      	mov	r3, r1
 800faa6:	4630      	mov	r0, r6
 800faa8:	4639      	mov	r1, r7
 800faaa:	f7f0 fbef 	bl	800028c <__adddf3>
 800faae:	4606      	mov	r6, r0
 800fab0:	460f      	mov	r7, r1
 800fab2:	f7f1 f851 	bl	8000b58 <__aeabi_d2iz>
 800fab6:	2200      	movs	r2, #0
 800fab8:	9000      	str	r0, [sp, #0]
 800faba:	2300      	movs	r3, #0
 800fabc:	4630      	mov	r0, r6
 800fabe:	4639      	mov	r1, r7
 800fac0:	f7f1 f80c 	bl	8000adc <__aeabi_dcmplt>
 800fac4:	b150      	cbz	r0, 800fadc <_dtoa_r+0x184>
 800fac6:	9800      	ldr	r0, [sp, #0]
 800fac8:	f7f0 fd2c 	bl	8000524 <__aeabi_i2d>
 800facc:	4632      	mov	r2, r6
 800face:	463b      	mov	r3, r7
 800fad0:	f7f0 fffa 	bl	8000ac8 <__aeabi_dcmpeq>
 800fad4:	b910      	cbnz	r0, 800fadc <_dtoa_r+0x184>
 800fad6:	9b00      	ldr	r3, [sp, #0]
 800fad8:	3b01      	subs	r3, #1
 800fada:	9300      	str	r3, [sp, #0]
 800fadc:	9b00      	ldr	r3, [sp, #0]
 800fade:	2b16      	cmp	r3, #22
 800fae0:	d85a      	bhi.n	800fb98 <_dtoa_r+0x240>
 800fae2:	9a00      	ldr	r2, [sp, #0]
 800fae4:	4b57      	ldr	r3, [pc, #348]	; (800fc44 <_dtoa_r+0x2ec>)
 800fae6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800faea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800faee:	ec51 0b19 	vmov	r0, r1, d9
 800faf2:	f7f0 fff3 	bl	8000adc <__aeabi_dcmplt>
 800faf6:	2800      	cmp	r0, #0
 800faf8:	d050      	beq.n	800fb9c <_dtoa_r+0x244>
 800fafa:	9b00      	ldr	r3, [sp, #0]
 800fafc:	3b01      	subs	r3, #1
 800fafe:	9300      	str	r3, [sp, #0]
 800fb00:	2300      	movs	r3, #0
 800fb02:	930b      	str	r3, [sp, #44]	; 0x2c
 800fb04:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800fb06:	1b5d      	subs	r5, r3, r5
 800fb08:	1e6b      	subs	r3, r5, #1
 800fb0a:	9305      	str	r3, [sp, #20]
 800fb0c:	bf45      	ittet	mi
 800fb0e:	f1c5 0301 	rsbmi	r3, r5, #1
 800fb12:	9304      	strmi	r3, [sp, #16]
 800fb14:	2300      	movpl	r3, #0
 800fb16:	2300      	movmi	r3, #0
 800fb18:	bf4c      	ite	mi
 800fb1a:	9305      	strmi	r3, [sp, #20]
 800fb1c:	9304      	strpl	r3, [sp, #16]
 800fb1e:	9b00      	ldr	r3, [sp, #0]
 800fb20:	2b00      	cmp	r3, #0
 800fb22:	db3d      	blt.n	800fba0 <_dtoa_r+0x248>
 800fb24:	9b05      	ldr	r3, [sp, #20]
 800fb26:	9a00      	ldr	r2, [sp, #0]
 800fb28:	920a      	str	r2, [sp, #40]	; 0x28
 800fb2a:	4413      	add	r3, r2
 800fb2c:	9305      	str	r3, [sp, #20]
 800fb2e:	2300      	movs	r3, #0
 800fb30:	9307      	str	r3, [sp, #28]
 800fb32:	9b06      	ldr	r3, [sp, #24]
 800fb34:	2b09      	cmp	r3, #9
 800fb36:	f200 8089 	bhi.w	800fc4c <_dtoa_r+0x2f4>
 800fb3a:	2b05      	cmp	r3, #5
 800fb3c:	bfc4      	itt	gt
 800fb3e:	3b04      	subgt	r3, #4
 800fb40:	9306      	strgt	r3, [sp, #24]
 800fb42:	9b06      	ldr	r3, [sp, #24]
 800fb44:	f1a3 0302 	sub.w	r3, r3, #2
 800fb48:	bfcc      	ite	gt
 800fb4a:	2500      	movgt	r5, #0
 800fb4c:	2501      	movle	r5, #1
 800fb4e:	2b03      	cmp	r3, #3
 800fb50:	f200 8087 	bhi.w	800fc62 <_dtoa_r+0x30a>
 800fb54:	e8df f003 	tbb	[pc, r3]
 800fb58:	59383a2d 	.word	0x59383a2d
 800fb5c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800fb60:	441d      	add	r5, r3
 800fb62:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800fb66:	2b20      	cmp	r3, #32
 800fb68:	bfc1      	itttt	gt
 800fb6a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800fb6e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800fb72:	fa0b f303 	lslgt.w	r3, fp, r3
 800fb76:	fa26 f000 	lsrgt.w	r0, r6, r0
 800fb7a:	bfda      	itte	le
 800fb7c:	f1c3 0320 	rsble	r3, r3, #32
 800fb80:	fa06 f003 	lslle.w	r0, r6, r3
 800fb84:	4318      	orrgt	r0, r3
 800fb86:	f7f0 fcbd 	bl	8000504 <__aeabi_ui2d>
 800fb8a:	2301      	movs	r3, #1
 800fb8c:	4606      	mov	r6, r0
 800fb8e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800fb92:	3d01      	subs	r5, #1
 800fb94:	930e      	str	r3, [sp, #56]	; 0x38
 800fb96:	e76a      	b.n	800fa6e <_dtoa_r+0x116>
 800fb98:	2301      	movs	r3, #1
 800fb9a:	e7b2      	b.n	800fb02 <_dtoa_r+0x1aa>
 800fb9c:	900b      	str	r0, [sp, #44]	; 0x2c
 800fb9e:	e7b1      	b.n	800fb04 <_dtoa_r+0x1ac>
 800fba0:	9b04      	ldr	r3, [sp, #16]
 800fba2:	9a00      	ldr	r2, [sp, #0]
 800fba4:	1a9b      	subs	r3, r3, r2
 800fba6:	9304      	str	r3, [sp, #16]
 800fba8:	4253      	negs	r3, r2
 800fbaa:	9307      	str	r3, [sp, #28]
 800fbac:	2300      	movs	r3, #0
 800fbae:	930a      	str	r3, [sp, #40]	; 0x28
 800fbb0:	e7bf      	b.n	800fb32 <_dtoa_r+0x1da>
 800fbb2:	2300      	movs	r3, #0
 800fbb4:	9308      	str	r3, [sp, #32]
 800fbb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fbb8:	2b00      	cmp	r3, #0
 800fbba:	dc55      	bgt.n	800fc68 <_dtoa_r+0x310>
 800fbbc:	2301      	movs	r3, #1
 800fbbe:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800fbc2:	461a      	mov	r2, r3
 800fbc4:	9209      	str	r2, [sp, #36]	; 0x24
 800fbc6:	e00c      	b.n	800fbe2 <_dtoa_r+0x28a>
 800fbc8:	2301      	movs	r3, #1
 800fbca:	e7f3      	b.n	800fbb4 <_dtoa_r+0x25c>
 800fbcc:	2300      	movs	r3, #0
 800fbce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fbd0:	9308      	str	r3, [sp, #32]
 800fbd2:	9b00      	ldr	r3, [sp, #0]
 800fbd4:	4413      	add	r3, r2
 800fbd6:	9302      	str	r3, [sp, #8]
 800fbd8:	3301      	adds	r3, #1
 800fbda:	2b01      	cmp	r3, #1
 800fbdc:	9303      	str	r3, [sp, #12]
 800fbde:	bfb8      	it	lt
 800fbe0:	2301      	movlt	r3, #1
 800fbe2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800fbe4:	2200      	movs	r2, #0
 800fbe6:	6042      	str	r2, [r0, #4]
 800fbe8:	2204      	movs	r2, #4
 800fbea:	f102 0614 	add.w	r6, r2, #20
 800fbee:	429e      	cmp	r6, r3
 800fbf0:	6841      	ldr	r1, [r0, #4]
 800fbf2:	d93d      	bls.n	800fc70 <_dtoa_r+0x318>
 800fbf4:	4620      	mov	r0, r4
 800fbf6:	f000 fca9 	bl	801054c <_Balloc>
 800fbfa:	9001      	str	r0, [sp, #4]
 800fbfc:	2800      	cmp	r0, #0
 800fbfe:	d13b      	bne.n	800fc78 <_dtoa_r+0x320>
 800fc00:	4b11      	ldr	r3, [pc, #68]	; (800fc48 <_dtoa_r+0x2f0>)
 800fc02:	4602      	mov	r2, r0
 800fc04:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800fc08:	e6c0      	b.n	800f98c <_dtoa_r+0x34>
 800fc0a:	2301      	movs	r3, #1
 800fc0c:	e7df      	b.n	800fbce <_dtoa_r+0x276>
 800fc0e:	bf00      	nop
 800fc10:	636f4361 	.word	0x636f4361
 800fc14:	3fd287a7 	.word	0x3fd287a7
 800fc18:	8b60c8b3 	.word	0x8b60c8b3
 800fc1c:	3fc68a28 	.word	0x3fc68a28
 800fc20:	509f79fb 	.word	0x509f79fb
 800fc24:	3fd34413 	.word	0x3fd34413
 800fc28:	08014471 	.word	0x08014471
 800fc2c:	08014488 	.word	0x08014488
 800fc30:	7ff00000 	.word	0x7ff00000
 800fc34:	0801446d 	.word	0x0801446d
 800fc38:	08014464 	.word	0x08014464
 800fc3c:	08014441 	.word	0x08014441
 800fc40:	3ff80000 	.word	0x3ff80000
 800fc44:	08014578 	.word	0x08014578
 800fc48:	080144e3 	.word	0x080144e3
 800fc4c:	2501      	movs	r5, #1
 800fc4e:	2300      	movs	r3, #0
 800fc50:	9306      	str	r3, [sp, #24]
 800fc52:	9508      	str	r5, [sp, #32]
 800fc54:	f04f 33ff 	mov.w	r3, #4294967295
 800fc58:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800fc5c:	2200      	movs	r2, #0
 800fc5e:	2312      	movs	r3, #18
 800fc60:	e7b0      	b.n	800fbc4 <_dtoa_r+0x26c>
 800fc62:	2301      	movs	r3, #1
 800fc64:	9308      	str	r3, [sp, #32]
 800fc66:	e7f5      	b.n	800fc54 <_dtoa_r+0x2fc>
 800fc68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fc6a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800fc6e:	e7b8      	b.n	800fbe2 <_dtoa_r+0x28a>
 800fc70:	3101      	adds	r1, #1
 800fc72:	6041      	str	r1, [r0, #4]
 800fc74:	0052      	lsls	r2, r2, #1
 800fc76:	e7b8      	b.n	800fbea <_dtoa_r+0x292>
 800fc78:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fc7a:	9a01      	ldr	r2, [sp, #4]
 800fc7c:	601a      	str	r2, [r3, #0]
 800fc7e:	9b03      	ldr	r3, [sp, #12]
 800fc80:	2b0e      	cmp	r3, #14
 800fc82:	f200 809d 	bhi.w	800fdc0 <_dtoa_r+0x468>
 800fc86:	2d00      	cmp	r5, #0
 800fc88:	f000 809a 	beq.w	800fdc0 <_dtoa_r+0x468>
 800fc8c:	9b00      	ldr	r3, [sp, #0]
 800fc8e:	2b00      	cmp	r3, #0
 800fc90:	dd32      	ble.n	800fcf8 <_dtoa_r+0x3a0>
 800fc92:	4ab7      	ldr	r2, [pc, #732]	; (800ff70 <_dtoa_r+0x618>)
 800fc94:	f003 030f 	and.w	r3, r3, #15
 800fc98:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800fc9c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800fca0:	9b00      	ldr	r3, [sp, #0]
 800fca2:	05d8      	lsls	r0, r3, #23
 800fca4:	ea4f 1723 	mov.w	r7, r3, asr #4
 800fca8:	d516      	bpl.n	800fcd8 <_dtoa_r+0x380>
 800fcaa:	4bb2      	ldr	r3, [pc, #712]	; (800ff74 <_dtoa_r+0x61c>)
 800fcac:	ec51 0b19 	vmov	r0, r1, d9
 800fcb0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800fcb4:	f7f0 fdca 	bl	800084c <__aeabi_ddiv>
 800fcb8:	f007 070f 	and.w	r7, r7, #15
 800fcbc:	4682      	mov	sl, r0
 800fcbe:	468b      	mov	fp, r1
 800fcc0:	2503      	movs	r5, #3
 800fcc2:	4eac      	ldr	r6, [pc, #688]	; (800ff74 <_dtoa_r+0x61c>)
 800fcc4:	b957      	cbnz	r7, 800fcdc <_dtoa_r+0x384>
 800fcc6:	4642      	mov	r2, r8
 800fcc8:	464b      	mov	r3, r9
 800fcca:	4650      	mov	r0, sl
 800fccc:	4659      	mov	r1, fp
 800fcce:	f7f0 fdbd 	bl	800084c <__aeabi_ddiv>
 800fcd2:	4682      	mov	sl, r0
 800fcd4:	468b      	mov	fp, r1
 800fcd6:	e028      	b.n	800fd2a <_dtoa_r+0x3d2>
 800fcd8:	2502      	movs	r5, #2
 800fcda:	e7f2      	b.n	800fcc2 <_dtoa_r+0x36a>
 800fcdc:	07f9      	lsls	r1, r7, #31
 800fcde:	d508      	bpl.n	800fcf2 <_dtoa_r+0x39a>
 800fce0:	4640      	mov	r0, r8
 800fce2:	4649      	mov	r1, r9
 800fce4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800fce8:	f7f0 fc86 	bl	80005f8 <__aeabi_dmul>
 800fcec:	3501      	adds	r5, #1
 800fcee:	4680      	mov	r8, r0
 800fcf0:	4689      	mov	r9, r1
 800fcf2:	107f      	asrs	r7, r7, #1
 800fcf4:	3608      	adds	r6, #8
 800fcf6:	e7e5      	b.n	800fcc4 <_dtoa_r+0x36c>
 800fcf8:	f000 809b 	beq.w	800fe32 <_dtoa_r+0x4da>
 800fcfc:	9b00      	ldr	r3, [sp, #0]
 800fcfe:	4f9d      	ldr	r7, [pc, #628]	; (800ff74 <_dtoa_r+0x61c>)
 800fd00:	425e      	negs	r6, r3
 800fd02:	4b9b      	ldr	r3, [pc, #620]	; (800ff70 <_dtoa_r+0x618>)
 800fd04:	f006 020f 	and.w	r2, r6, #15
 800fd08:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fd0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd10:	ec51 0b19 	vmov	r0, r1, d9
 800fd14:	f7f0 fc70 	bl	80005f8 <__aeabi_dmul>
 800fd18:	1136      	asrs	r6, r6, #4
 800fd1a:	4682      	mov	sl, r0
 800fd1c:	468b      	mov	fp, r1
 800fd1e:	2300      	movs	r3, #0
 800fd20:	2502      	movs	r5, #2
 800fd22:	2e00      	cmp	r6, #0
 800fd24:	d17a      	bne.n	800fe1c <_dtoa_r+0x4c4>
 800fd26:	2b00      	cmp	r3, #0
 800fd28:	d1d3      	bne.n	800fcd2 <_dtoa_r+0x37a>
 800fd2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fd2c:	2b00      	cmp	r3, #0
 800fd2e:	f000 8082 	beq.w	800fe36 <_dtoa_r+0x4de>
 800fd32:	4b91      	ldr	r3, [pc, #580]	; (800ff78 <_dtoa_r+0x620>)
 800fd34:	2200      	movs	r2, #0
 800fd36:	4650      	mov	r0, sl
 800fd38:	4659      	mov	r1, fp
 800fd3a:	f7f0 fecf 	bl	8000adc <__aeabi_dcmplt>
 800fd3e:	2800      	cmp	r0, #0
 800fd40:	d079      	beq.n	800fe36 <_dtoa_r+0x4de>
 800fd42:	9b03      	ldr	r3, [sp, #12]
 800fd44:	2b00      	cmp	r3, #0
 800fd46:	d076      	beq.n	800fe36 <_dtoa_r+0x4de>
 800fd48:	9b02      	ldr	r3, [sp, #8]
 800fd4a:	2b00      	cmp	r3, #0
 800fd4c:	dd36      	ble.n	800fdbc <_dtoa_r+0x464>
 800fd4e:	9b00      	ldr	r3, [sp, #0]
 800fd50:	4650      	mov	r0, sl
 800fd52:	4659      	mov	r1, fp
 800fd54:	1e5f      	subs	r7, r3, #1
 800fd56:	2200      	movs	r2, #0
 800fd58:	4b88      	ldr	r3, [pc, #544]	; (800ff7c <_dtoa_r+0x624>)
 800fd5a:	f7f0 fc4d 	bl	80005f8 <__aeabi_dmul>
 800fd5e:	9e02      	ldr	r6, [sp, #8]
 800fd60:	4682      	mov	sl, r0
 800fd62:	468b      	mov	fp, r1
 800fd64:	3501      	adds	r5, #1
 800fd66:	4628      	mov	r0, r5
 800fd68:	f7f0 fbdc 	bl	8000524 <__aeabi_i2d>
 800fd6c:	4652      	mov	r2, sl
 800fd6e:	465b      	mov	r3, fp
 800fd70:	f7f0 fc42 	bl	80005f8 <__aeabi_dmul>
 800fd74:	4b82      	ldr	r3, [pc, #520]	; (800ff80 <_dtoa_r+0x628>)
 800fd76:	2200      	movs	r2, #0
 800fd78:	f7f0 fa88 	bl	800028c <__adddf3>
 800fd7c:	46d0      	mov	r8, sl
 800fd7e:	46d9      	mov	r9, fp
 800fd80:	4682      	mov	sl, r0
 800fd82:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800fd86:	2e00      	cmp	r6, #0
 800fd88:	d158      	bne.n	800fe3c <_dtoa_r+0x4e4>
 800fd8a:	4b7e      	ldr	r3, [pc, #504]	; (800ff84 <_dtoa_r+0x62c>)
 800fd8c:	2200      	movs	r2, #0
 800fd8e:	4640      	mov	r0, r8
 800fd90:	4649      	mov	r1, r9
 800fd92:	f7f0 fa79 	bl	8000288 <__aeabi_dsub>
 800fd96:	4652      	mov	r2, sl
 800fd98:	465b      	mov	r3, fp
 800fd9a:	4680      	mov	r8, r0
 800fd9c:	4689      	mov	r9, r1
 800fd9e:	f7f0 febb 	bl	8000b18 <__aeabi_dcmpgt>
 800fda2:	2800      	cmp	r0, #0
 800fda4:	f040 8295 	bne.w	80102d2 <_dtoa_r+0x97a>
 800fda8:	4652      	mov	r2, sl
 800fdaa:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800fdae:	4640      	mov	r0, r8
 800fdb0:	4649      	mov	r1, r9
 800fdb2:	f7f0 fe93 	bl	8000adc <__aeabi_dcmplt>
 800fdb6:	2800      	cmp	r0, #0
 800fdb8:	f040 8289 	bne.w	80102ce <_dtoa_r+0x976>
 800fdbc:	ec5b ab19 	vmov	sl, fp, d9
 800fdc0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800fdc2:	2b00      	cmp	r3, #0
 800fdc4:	f2c0 8148 	blt.w	8010058 <_dtoa_r+0x700>
 800fdc8:	9a00      	ldr	r2, [sp, #0]
 800fdca:	2a0e      	cmp	r2, #14
 800fdcc:	f300 8144 	bgt.w	8010058 <_dtoa_r+0x700>
 800fdd0:	4b67      	ldr	r3, [pc, #412]	; (800ff70 <_dtoa_r+0x618>)
 800fdd2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fdd6:	e9d3 8900 	ldrd	r8, r9, [r3]
 800fdda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fddc:	2b00      	cmp	r3, #0
 800fdde:	f280 80d5 	bge.w	800ff8c <_dtoa_r+0x634>
 800fde2:	9b03      	ldr	r3, [sp, #12]
 800fde4:	2b00      	cmp	r3, #0
 800fde6:	f300 80d1 	bgt.w	800ff8c <_dtoa_r+0x634>
 800fdea:	f040 826f 	bne.w	80102cc <_dtoa_r+0x974>
 800fdee:	4b65      	ldr	r3, [pc, #404]	; (800ff84 <_dtoa_r+0x62c>)
 800fdf0:	2200      	movs	r2, #0
 800fdf2:	4640      	mov	r0, r8
 800fdf4:	4649      	mov	r1, r9
 800fdf6:	f7f0 fbff 	bl	80005f8 <__aeabi_dmul>
 800fdfa:	4652      	mov	r2, sl
 800fdfc:	465b      	mov	r3, fp
 800fdfe:	f7f0 fe81 	bl	8000b04 <__aeabi_dcmpge>
 800fe02:	9e03      	ldr	r6, [sp, #12]
 800fe04:	4637      	mov	r7, r6
 800fe06:	2800      	cmp	r0, #0
 800fe08:	f040 8245 	bne.w	8010296 <_dtoa_r+0x93e>
 800fe0c:	9d01      	ldr	r5, [sp, #4]
 800fe0e:	2331      	movs	r3, #49	; 0x31
 800fe10:	f805 3b01 	strb.w	r3, [r5], #1
 800fe14:	9b00      	ldr	r3, [sp, #0]
 800fe16:	3301      	adds	r3, #1
 800fe18:	9300      	str	r3, [sp, #0]
 800fe1a:	e240      	b.n	801029e <_dtoa_r+0x946>
 800fe1c:	07f2      	lsls	r2, r6, #31
 800fe1e:	d505      	bpl.n	800fe2c <_dtoa_r+0x4d4>
 800fe20:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fe24:	f7f0 fbe8 	bl	80005f8 <__aeabi_dmul>
 800fe28:	3501      	adds	r5, #1
 800fe2a:	2301      	movs	r3, #1
 800fe2c:	1076      	asrs	r6, r6, #1
 800fe2e:	3708      	adds	r7, #8
 800fe30:	e777      	b.n	800fd22 <_dtoa_r+0x3ca>
 800fe32:	2502      	movs	r5, #2
 800fe34:	e779      	b.n	800fd2a <_dtoa_r+0x3d2>
 800fe36:	9f00      	ldr	r7, [sp, #0]
 800fe38:	9e03      	ldr	r6, [sp, #12]
 800fe3a:	e794      	b.n	800fd66 <_dtoa_r+0x40e>
 800fe3c:	9901      	ldr	r1, [sp, #4]
 800fe3e:	4b4c      	ldr	r3, [pc, #304]	; (800ff70 <_dtoa_r+0x618>)
 800fe40:	4431      	add	r1, r6
 800fe42:	910d      	str	r1, [sp, #52]	; 0x34
 800fe44:	9908      	ldr	r1, [sp, #32]
 800fe46:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800fe4a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800fe4e:	2900      	cmp	r1, #0
 800fe50:	d043      	beq.n	800feda <_dtoa_r+0x582>
 800fe52:	494d      	ldr	r1, [pc, #308]	; (800ff88 <_dtoa_r+0x630>)
 800fe54:	2000      	movs	r0, #0
 800fe56:	f7f0 fcf9 	bl	800084c <__aeabi_ddiv>
 800fe5a:	4652      	mov	r2, sl
 800fe5c:	465b      	mov	r3, fp
 800fe5e:	f7f0 fa13 	bl	8000288 <__aeabi_dsub>
 800fe62:	9d01      	ldr	r5, [sp, #4]
 800fe64:	4682      	mov	sl, r0
 800fe66:	468b      	mov	fp, r1
 800fe68:	4649      	mov	r1, r9
 800fe6a:	4640      	mov	r0, r8
 800fe6c:	f7f0 fe74 	bl	8000b58 <__aeabi_d2iz>
 800fe70:	4606      	mov	r6, r0
 800fe72:	f7f0 fb57 	bl	8000524 <__aeabi_i2d>
 800fe76:	4602      	mov	r2, r0
 800fe78:	460b      	mov	r3, r1
 800fe7a:	4640      	mov	r0, r8
 800fe7c:	4649      	mov	r1, r9
 800fe7e:	f7f0 fa03 	bl	8000288 <__aeabi_dsub>
 800fe82:	3630      	adds	r6, #48	; 0x30
 800fe84:	f805 6b01 	strb.w	r6, [r5], #1
 800fe88:	4652      	mov	r2, sl
 800fe8a:	465b      	mov	r3, fp
 800fe8c:	4680      	mov	r8, r0
 800fe8e:	4689      	mov	r9, r1
 800fe90:	f7f0 fe24 	bl	8000adc <__aeabi_dcmplt>
 800fe94:	2800      	cmp	r0, #0
 800fe96:	d163      	bne.n	800ff60 <_dtoa_r+0x608>
 800fe98:	4642      	mov	r2, r8
 800fe9a:	464b      	mov	r3, r9
 800fe9c:	4936      	ldr	r1, [pc, #216]	; (800ff78 <_dtoa_r+0x620>)
 800fe9e:	2000      	movs	r0, #0
 800fea0:	f7f0 f9f2 	bl	8000288 <__aeabi_dsub>
 800fea4:	4652      	mov	r2, sl
 800fea6:	465b      	mov	r3, fp
 800fea8:	f7f0 fe18 	bl	8000adc <__aeabi_dcmplt>
 800feac:	2800      	cmp	r0, #0
 800feae:	f040 80b5 	bne.w	801001c <_dtoa_r+0x6c4>
 800feb2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800feb4:	429d      	cmp	r5, r3
 800feb6:	d081      	beq.n	800fdbc <_dtoa_r+0x464>
 800feb8:	4b30      	ldr	r3, [pc, #192]	; (800ff7c <_dtoa_r+0x624>)
 800feba:	2200      	movs	r2, #0
 800febc:	4650      	mov	r0, sl
 800febe:	4659      	mov	r1, fp
 800fec0:	f7f0 fb9a 	bl	80005f8 <__aeabi_dmul>
 800fec4:	4b2d      	ldr	r3, [pc, #180]	; (800ff7c <_dtoa_r+0x624>)
 800fec6:	4682      	mov	sl, r0
 800fec8:	468b      	mov	fp, r1
 800feca:	4640      	mov	r0, r8
 800fecc:	4649      	mov	r1, r9
 800fece:	2200      	movs	r2, #0
 800fed0:	f7f0 fb92 	bl	80005f8 <__aeabi_dmul>
 800fed4:	4680      	mov	r8, r0
 800fed6:	4689      	mov	r9, r1
 800fed8:	e7c6      	b.n	800fe68 <_dtoa_r+0x510>
 800feda:	4650      	mov	r0, sl
 800fedc:	4659      	mov	r1, fp
 800fede:	f7f0 fb8b 	bl	80005f8 <__aeabi_dmul>
 800fee2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fee4:	9d01      	ldr	r5, [sp, #4]
 800fee6:	930f      	str	r3, [sp, #60]	; 0x3c
 800fee8:	4682      	mov	sl, r0
 800feea:	468b      	mov	fp, r1
 800feec:	4649      	mov	r1, r9
 800feee:	4640      	mov	r0, r8
 800fef0:	f7f0 fe32 	bl	8000b58 <__aeabi_d2iz>
 800fef4:	4606      	mov	r6, r0
 800fef6:	f7f0 fb15 	bl	8000524 <__aeabi_i2d>
 800fefa:	3630      	adds	r6, #48	; 0x30
 800fefc:	4602      	mov	r2, r0
 800fefe:	460b      	mov	r3, r1
 800ff00:	4640      	mov	r0, r8
 800ff02:	4649      	mov	r1, r9
 800ff04:	f7f0 f9c0 	bl	8000288 <__aeabi_dsub>
 800ff08:	f805 6b01 	strb.w	r6, [r5], #1
 800ff0c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ff0e:	429d      	cmp	r5, r3
 800ff10:	4680      	mov	r8, r0
 800ff12:	4689      	mov	r9, r1
 800ff14:	f04f 0200 	mov.w	r2, #0
 800ff18:	d124      	bne.n	800ff64 <_dtoa_r+0x60c>
 800ff1a:	4b1b      	ldr	r3, [pc, #108]	; (800ff88 <_dtoa_r+0x630>)
 800ff1c:	4650      	mov	r0, sl
 800ff1e:	4659      	mov	r1, fp
 800ff20:	f7f0 f9b4 	bl	800028c <__adddf3>
 800ff24:	4602      	mov	r2, r0
 800ff26:	460b      	mov	r3, r1
 800ff28:	4640      	mov	r0, r8
 800ff2a:	4649      	mov	r1, r9
 800ff2c:	f7f0 fdf4 	bl	8000b18 <__aeabi_dcmpgt>
 800ff30:	2800      	cmp	r0, #0
 800ff32:	d173      	bne.n	801001c <_dtoa_r+0x6c4>
 800ff34:	4652      	mov	r2, sl
 800ff36:	465b      	mov	r3, fp
 800ff38:	4913      	ldr	r1, [pc, #76]	; (800ff88 <_dtoa_r+0x630>)
 800ff3a:	2000      	movs	r0, #0
 800ff3c:	f7f0 f9a4 	bl	8000288 <__aeabi_dsub>
 800ff40:	4602      	mov	r2, r0
 800ff42:	460b      	mov	r3, r1
 800ff44:	4640      	mov	r0, r8
 800ff46:	4649      	mov	r1, r9
 800ff48:	f7f0 fdc8 	bl	8000adc <__aeabi_dcmplt>
 800ff4c:	2800      	cmp	r0, #0
 800ff4e:	f43f af35 	beq.w	800fdbc <_dtoa_r+0x464>
 800ff52:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800ff54:	1e6b      	subs	r3, r5, #1
 800ff56:	930f      	str	r3, [sp, #60]	; 0x3c
 800ff58:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ff5c:	2b30      	cmp	r3, #48	; 0x30
 800ff5e:	d0f8      	beq.n	800ff52 <_dtoa_r+0x5fa>
 800ff60:	9700      	str	r7, [sp, #0]
 800ff62:	e049      	b.n	800fff8 <_dtoa_r+0x6a0>
 800ff64:	4b05      	ldr	r3, [pc, #20]	; (800ff7c <_dtoa_r+0x624>)
 800ff66:	f7f0 fb47 	bl	80005f8 <__aeabi_dmul>
 800ff6a:	4680      	mov	r8, r0
 800ff6c:	4689      	mov	r9, r1
 800ff6e:	e7bd      	b.n	800feec <_dtoa_r+0x594>
 800ff70:	08014578 	.word	0x08014578
 800ff74:	08014550 	.word	0x08014550
 800ff78:	3ff00000 	.word	0x3ff00000
 800ff7c:	40240000 	.word	0x40240000
 800ff80:	401c0000 	.word	0x401c0000
 800ff84:	40140000 	.word	0x40140000
 800ff88:	3fe00000 	.word	0x3fe00000
 800ff8c:	9d01      	ldr	r5, [sp, #4]
 800ff8e:	4656      	mov	r6, sl
 800ff90:	465f      	mov	r7, fp
 800ff92:	4642      	mov	r2, r8
 800ff94:	464b      	mov	r3, r9
 800ff96:	4630      	mov	r0, r6
 800ff98:	4639      	mov	r1, r7
 800ff9a:	f7f0 fc57 	bl	800084c <__aeabi_ddiv>
 800ff9e:	f7f0 fddb 	bl	8000b58 <__aeabi_d2iz>
 800ffa2:	4682      	mov	sl, r0
 800ffa4:	f7f0 fabe 	bl	8000524 <__aeabi_i2d>
 800ffa8:	4642      	mov	r2, r8
 800ffaa:	464b      	mov	r3, r9
 800ffac:	f7f0 fb24 	bl	80005f8 <__aeabi_dmul>
 800ffb0:	4602      	mov	r2, r0
 800ffb2:	460b      	mov	r3, r1
 800ffb4:	4630      	mov	r0, r6
 800ffb6:	4639      	mov	r1, r7
 800ffb8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800ffbc:	f7f0 f964 	bl	8000288 <__aeabi_dsub>
 800ffc0:	f805 6b01 	strb.w	r6, [r5], #1
 800ffc4:	9e01      	ldr	r6, [sp, #4]
 800ffc6:	9f03      	ldr	r7, [sp, #12]
 800ffc8:	1bae      	subs	r6, r5, r6
 800ffca:	42b7      	cmp	r7, r6
 800ffcc:	4602      	mov	r2, r0
 800ffce:	460b      	mov	r3, r1
 800ffd0:	d135      	bne.n	801003e <_dtoa_r+0x6e6>
 800ffd2:	f7f0 f95b 	bl	800028c <__adddf3>
 800ffd6:	4642      	mov	r2, r8
 800ffd8:	464b      	mov	r3, r9
 800ffda:	4606      	mov	r6, r0
 800ffdc:	460f      	mov	r7, r1
 800ffde:	f7f0 fd9b 	bl	8000b18 <__aeabi_dcmpgt>
 800ffe2:	b9d0      	cbnz	r0, 801001a <_dtoa_r+0x6c2>
 800ffe4:	4642      	mov	r2, r8
 800ffe6:	464b      	mov	r3, r9
 800ffe8:	4630      	mov	r0, r6
 800ffea:	4639      	mov	r1, r7
 800ffec:	f7f0 fd6c 	bl	8000ac8 <__aeabi_dcmpeq>
 800fff0:	b110      	cbz	r0, 800fff8 <_dtoa_r+0x6a0>
 800fff2:	f01a 0f01 	tst.w	sl, #1
 800fff6:	d110      	bne.n	801001a <_dtoa_r+0x6c2>
 800fff8:	4620      	mov	r0, r4
 800fffa:	ee18 1a10 	vmov	r1, s16
 800fffe:	f000 fae5 	bl	80105cc <_Bfree>
 8010002:	2300      	movs	r3, #0
 8010004:	9800      	ldr	r0, [sp, #0]
 8010006:	702b      	strb	r3, [r5, #0]
 8010008:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801000a:	3001      	adds	r0, #1
 801000c:	6018      	str	r0, [r3, #0]
 801000e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010010:	2b00      	cmp	r3, #0
 8010012:	f43f acf1 	beq.w	800f9f8 <_dtoa_r+0xa0>
 8010016:	601d      	str	r5, [r3, #0]
 8010018:	e4ee      	b.n	800f9f8 <_dtoa_r+0xa0>
 801001a:	9f00      	ldr	r7, [sp, #0]
 801001c:	462b      	mov	r3, r5
 801001e:	461d      	mov	r5, r3
 8010020:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010024:	2a39      	cmp	r2, #57	; 0x39
 8010026:	d106      	bne.n	8010036 <_dtoa_r+0x6de>
 8010028:	9a01      	ldr	r2, [sp, #4]
 801002a:	429a      	cmp	r2, r3
 801002c:	d1f7      	bne.n	801001e <_dtoa_r+0x6c6>
 801002e:	9901      	ldr	r1, [sp, #4]
 8010030:	2230      	movs	r2, #48	; 0x30
 8010032:	3701      	adds	r7, #1
 8010034:	700a      	strb	r2, [r1, #0]
 8010036:	781a      	ldrb	r2, [r3, #0]
 8010038:	3201      	adds	r2, #1
 801003a:	701a      	strb	r2, [r3, #0]
 801003c:	e790      	b.n	800ff60 <_dtoa_r+0x608>
 801003e:	4ba6      	ldr	r3, [pc, #664]	; (80102d8 <_dtoa_r+0x980>)
 8010040:	2200      	movs	r2, #0
 8010042:	f7f0 fad9 	bl	80005f8 <__aeabi_dmul>
 8010046:	2200      	movs	r2, #0
 8010048:	2300      	movs	r3, #0
 801004a:	4606      	mov	r6, r0
 801004c:	460f      	mov	r7, r1
 801004e:	f7f0 fd3b 	bl	8000ac8 <__aeabi_dcmpeq>
 8010052:	2800      	cmp	r0, #0
 8010054:	d09d      	beq.n	800ff92 <_dtoa_r+0x63a>
 8010056:	e7cf      	b.n	800fff8 <_dtoa_r+0x6a0>
 8010058:	9a08      	ldr	r2, [sp, #32]
 801005a:	2a00      	cmp	r2, #0
 801005c:	f000 80d7 	beq.w	801020e <_dtoa_r+0x8b6>
 8010060:	9a06      	ldr	r2, [sp, #24]
 8010062:	2a01      	cmp	r2, #1
 8010064:	f300 80ba 	bgt.w	80101dc <_dtoa_r+0x884>
 8010068:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801006a:	2a00      	cmp	r2, #0
 801006c:	f000 80b2 	beq.w	80101d4 <_dtoa_r+0x87c>
 8010070:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8010074:	9e07      	ldr	r6, [sp, #28]
 8010076:	9d04      	ldr	r5, [sp, #16]
 8010078:	9a04      	ldr	r2, [sp, #16]
 801007a:	441a      	add	r2, r3
 801007c:	9204      	str	r2, [sp, #16]
 801007e:	9a05      	ldr	r2, [sp, #20]
 8010080:	2101      	movs	r1, #1
 8010082:	441a      	add	r2, r3
 8010084:	4620      	mov	r0, r4
 8010086:	9205      	str	r2, [sp, #20]
 8010088:	f000 fb58 	bl	801073c <__i2b>
 801008c:	4607      	mov	r7, r0
 801008e:	2d00      	cmp	r5, #0
 8010090:	dd0c      	ble.n	80100ac <_dtoa_r+0x754>
 8010092:	9b05      	ldr	r3, [sp, #20]
 8010094:	2b00      	cmp	r3, #0
 8010096:	dd09      	ble.n	80100ac <_dtoa_r+0x754>
 8010098:	42ab      	cmp	r3, r5
 801009a:	9a04      	ldr	r2, [sp, #16]
 801009c:	bfa8      	it	ge
 801009e:	462b      	movge	r3, r5
 80100a0:	1ad2      	subs	r2, r2, r3
 80100a2:	9204      	str	r2, [sp, #16]
 80100a4:	9a05      	ldr	r2, [sp, #20]
 80100a6:	1aed      	subs	r5, r5, r3
 80100a8:	1ad3      	subs	r3, r2, r3
 80100aa:	9305      	str	r3, [sp, #20]
 80100ac:	9b07      	ldr	r3, [sp, #28]
 80100ae:	b31b      	cbz	r3, 80100f8 <_dtoa_r+0x7a0>
 80100b0:	9b08      	ldr	r3, [sp, #32]
 80100b2:	2b00      	cmp	r3, #0
 80100b4:	f000 80af 	beq.w	8010216 <_dtoa_r+0x8be>
 80100b8:	2e00      	cmp	r6, #0
 80100ba:	dd13      	ble.n	80100e4 <_dtoa_r+0x78c>
 80100bc:	4639      	mov	r1, r7
 80100be:	4632      	mov	r2, r6
 80100c0:	4620      	mov	r0, r4
 80100c2:	f000 fbfb 	bl	80108bc <__pow5mult>
 80100c6:	ee18 2a10 	vmov	r2, s16
 80100ca:	4601      	mov	r1, r0
 80100cc:	4607      	mov	r7, r0
 80100ce:	4620      	mov	r0, r4
 80100d0:	f000 fb4a 	bl	8010768 <__multiply>
 80100d4:	ee18 1a10 	vmov	r1, s16
 80100d8:	4680      	mov	r8, r0
 80100da:	4620      	mov	r0, r4
 80100dc:	f000 fa76 	bl	80105cc <_Bfree>
 80100e0:	ee08 8a10 	vmov	s16, r8
 80100e4:	9b07      	ldr	r3, [sp, #28]
 80100e6:	1b9a      	subs	r2, r3, r6
 80100e8:	d006      	beq.n	80100f8 <_dtoa_r+0x7a0>
 80100ea:	ee18 1a10 	vmov	r1, s16
 80100ee:	4620      	mov	r0, r4
 80100f0:	f000 fbe4 	bl	80108bc <__pow5mult>
 80100f4:	ee08 0a10 	vmov	s16, r0
 80100f8:	2101      	movs	r1, #1
 80100fa:	4620      	mov	r0, r4
 80100fc:	f000 fb1e 	bl	801073c <__i2b>
 8010100:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010102:	2b00      	cmp	r3, #0
 8010104:	4606      	mov	r6, r0
 8010106:	f340 8088 	ble.w	801021a <_dtoa_r+0x8c2>
 801010a:	461a      	mov	r2, r3
 801010c:	4601      	mov	r1, r0
 801010e:	4620      	mov	r0, r4
 8010110:	f000 fbd4 	bl	80108bc <__pow5mult>
 8010114:	9b06      	ldr	r3, [sp, #24]
 8010116:	2b01      	cmp	r3, #1
 8010118:	4606      	mov	r6, r0
 801011a:	f340 8081 	ble.w	8010220 <_dtoa_r+0x8c8>
 801011e:	f04f 0800 	mov.w	r8, #0
 8010122:	6933      	ldr	r3, [r6, #16]
 8010124:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8010128:	6918      	ldr	r0, [r3, #16]
 801012a:	f000 fab7 	bl	801069c <__hi0bits>
 801012e:	f1c0 0020 	rsb	r0, r0, #32
 8010132:	9b05      	ldr	r3, [sp, #20]
 8010134:	4418      	add	r0, r3
 8010136:	f010 001f 	ands.w	r0, r0, #31
 801013a:	f000 8092 	beq.w	8010262 <_dtoa_r+0x90a>
 801013e:	f1c0 0320 	rsb	r3, r0, #32
 8010142:	2b04      	cmp	r3, #4
 8010144:	f340 808a 	ble.w	801025c <_dtoa_r+0x904>
 8010148:	f1c0 001c 	rsb	r0, r0, #28
 801014c:	9b04      	ldr	r3, [sp, #16]
 801014e:	4403      	add	r3, r0
 8010150:	9304      	str	r3, [sp, #16]
 8010152:	9b05      	ldr	r3, [sp, #20]
 8010154:	4403      	add	r3, r0
 8010156:	4405      	add	r5, r0
 8010158:	9305      	str	r3, [sp, #20]
 801015a:	9b04      	ldr	r3, [sp, #16]
 801015c:	2b00      	cmp	r3, #0
 801015e:	dd07      	ble.n	8010170 <_dtoa_r+0x818>
 8010160:	ee18 1a10 	vmov	r1, s16
 8010164:	461a      	mov	r2, r3
 8010166:	4620      	mov	r0, r4
 8010168:	f000 fc02 	bl	8010970 <__lshift>
 801016c:	ee08 0a10 	vmov	s16, r0
 8010170:	9b05      	ldr	r3, [sp, #20]
 8010172:	2b00      	cmp	r3, #0
 8010174:	dd05      	ble.n	8010182 <_dtoa_r+0x82a>
 8010176:	4631      	mov	r1, r6
 8010178:	461a      	mov	r2, r3
 801017a:	4620      	mov	r0, r4
 801017c:	f000 fbf8 	bl	8010970 <__lshift>
 8010180:	4606      	mov	r6, r0
 8010182:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010184:	2b00      	cmp	r3, #0
 8010186:	d06e      	beq.n	8010266 <_dtoa_r+0x90e>
 8010188:	ee18 0a10 	vmov	r0, s16
 801018c:	4631      	mov	r1, r6
 801018e:	f000 fc5f 	bl	8010a50 <__mcmp>
 8010192:	2800      	cmp	r0, #0
 8010194:	da67      	bge.n	8010266 <_dtoa_r+0x90e>
 8010196:	9b00      	ldr	r3, [sp, #0]
 8010198:	3b01      	subs	r3, #1
 801019a:	ee18 1a10 	vmov	r1, s16
 801019e:	9300      	str	r3, [sp, #0]
 80101a0:	220a      	movs	r2, #10
 80101a2:	2300      	movs	r3, #0
 80101a4:	4620      	mov	r0, r4
 80101a6:	f000 fa33 	bl	8010610 <__multadd>
 80101aa:	9b08      	ldr	r3, [sp, #32]
 80101ac:	ee08 0a10 	vmov	s16, r0
 80101b0:	2b00      	cmp	r3, #0
 80101b2:	f000 81b1 	beq.w	8010518 <_dtoa_r+0xbc0>
 80101b6:	2300      	movs	r3, #0
 80101b8:	4639      	mov	r1, r7
 80101ba:	220a      	movs	r2, #10
 80101bc:	4620      	mov	r0, r4
 80101be:	f000 fa27 	bl	8010610 <__multadd>
 80101c2:	9b02      	ldr	r3, [sp, #8]
 80101c4:	2b00      	cmp	r3, #0
 80101c6:	4607      	mov	r7, r0
 80101c8:	f300 808e 	bgt.w	80102e8 <_dtoa_r+0x990>
 80101cc:	9b06      	ldr	r3, [sp, #24]
 80101ce:	2b02      	cmp	r3, #2
 80101d0:	dc51      	bgt.n	8010276 <_dtoa_r+0x91e>
 80101d2:	e089      	b.n	80102e8 <_dtoa_r+0x990>
 80101d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80101d6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80101da:	e74b      	b.n	8010074 <_dtoa_r+0x71c>
 80101dc:	9b03      	ldr	r3, [sp, #12]
 80101de:	1e5e      	subs	r6, r3, #1
 80101e0:	9b07      	ldr	r3, [sp, #28]
 80101e2:	42b3      	cmp	r3, r6
 80101e4:	bfbf      	itttt	lt
 80101e6:	9b07      	ldrlt	r3, [sp, #28]
 80101e8:	9607      	strlt	r6, [sp, #28]
 80101ea:	1af2      	sublt	r2, r6, r3
 80101ec:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80101ee:	bfb6      	itet	lt
 80101f0:	189b      	addlt	r3, r3, r2
 80101f2:	1b9e      	subge	r6, r3, r6
 80101f4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80101f6:	9b03      	ldr	r3, [sp, #12]
 80101f8:	bfb8      	it	lt
 80101fa:	2600      	movlt	r6, #0
 80101fc:	2b00      	cmp	r3, #0
 80101fe:	bfb7      	itett	lt
 8010200:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8010204:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8010208:	1a9d      	sublt	r5, r3, r2
 801020a:	2300      	movlt	r3, #0
 801020c:	e734      	b.n	8010078 <_dtoa_r+0x720>
 801020e:	9e07      	ldr	r6, [sp, #28]
 8010210:	9d04      	ldr	r5, [sp, #16]
 8010212:	9f08      	ldr	r7, [sp, #32]
 8010214:	e73b      	b.n	801008e <_dtoa_r+0x736>
 8010216:	9a07      	ldr	r2, [sp, #28]
 8010218:	e767      	b.n	80100ea <_dtoa_r+0x792>
 801021a:	9b06      	ldr	r3, [sp, #24]
 801021c:	2b01      	cmp	r3, #1
 801021e:	dc18      	bgt.n	8010252 <_dtoa_r+0x8fa>
 8010220:	f1ba 0f00 	cmp.w	sl, #0
 8010224:	d115      	bne.n	8010252 <_dtoa_r+0x8fa>
 8010226:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801022a:	b993      	cbnz	r3, 8010252 <_dtoa_r+0x8fa>
 801022c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8010230:	0d1b      	lsrs	r3, r3, #20
 8010232:	051b      	lsls	r3, r3, #20
 8010234:	b183      	cbz	r3, 8010258 <_dtoa_r+0x900>
 8010236:	9b04      	ldr	r3, [sp, #16]
 8010238:	3301      	adds	r3, #1
 801023a:	9304      	str	r3, [sp, #16]
 801023c:	9b05      	ldr	r3, [sp, #20]
 801023e:	3301      	adds	r3, #1
 8010240:	9305      	str	r3, [sp, #20]
 8010242:	f04f 0801 	mov.w	r8, #1
 8010246:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010248:	2b00      	cmp	r3, #0
 801024a:	f47f af6a 	bne.w	8010122 <_dtoa_r+0x7ca>
 801024e:	2001      	movs	r0, #1
 8010250:	e76f      	b.n	8010132 <_dtoa_r+0x7da>
 8010252:	f04f 0800 	mov.w	r8, #0
 8010256:	e7f6      	b.n	8010246 <_dtoa_r+0x8ee>
 8010258:	4698      	mov	r8, r3
 801025a:	e7f4      	b.n	8010246 <_dtoa_r+0x8ee>
 801025c:	f43f af7d 	beq.w	801015a <_dtoa_r+0x802>
 8010260:	4618      	mov	r0, r3
 8010262:	301c      	adds	r0, #28
 8010264:	e772      	b.n	801014c <_dtoa_r+0x7f4>
 8010266:	9b03      	ldr	r3, [sp, #12]
 8010268:	2b00      	cmp	r3, #0
 801026a:	dc37      	bgt.n	80102dc <_dtoa_r+0x984>
 801026c:	9b06      	ldr	r3, [sp, #24]
 801026e:	2b02      	cmp	r3, #2
 8010270:	dd34      	ble.n	80102dc <_dtoa_r+0x984>
 8010272:	9b03      	ldr	r3, [sp, #12]
 8010274:	9302      	str	r3, [sp, #8]
 8010276:	9b02      	ldr	r3, [sp, #8]
 8010278:	b96b      	cbnz	r3, 8010296 <_dtoa_r+0x93e>
 801027a:	4631      	mov	r1, r6
 801027c:	2205      	movs	r2, #5
 801027e:	4620      	mov	r0, r4
 8010280:	f000 f9c6 	bl	8010610 <__multadd>
 8010284:	4601      	mov	r1, r0
 8010286:	4606      	mov	r6, r0
 8010288:	ee18 0a10 	vmov	r0, s16
 801028c:	f000 fbe0 	bl	8010a50 <__mcmp>
 8010290:	2800      	cmp	r0, #0
 8010292:	f73f adbb 	bgt.w	800fe0c <_dtoa_r+0x4b4>
 8010296:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010298:	9d01      	ldr	r5, [sp, #4]
 801029a:	43db      	mvns	r3, r3
 801029c:	9300      	str	r3, [sp, #0]
 801029e:	f04f 0800 	mov.w	r8, #0
 80102a2:	4631      	mov	r1, r6
 80102a4:	4620      	mov	r0, r4
 80102a6:	f000 f991 	bl	80105cc <_Bfree>
 80102aa:	2f00      	cmp	r7, #0
 80102ac:	f43f aea4 	beq.w	800fff8 <_dtoa_r+0x6a0>
 80102b0:	f1b8 0f00 	cmp.w	r8, #0
 80102b4:	d005      	beq.n	80102c2 <_dtoa_r+0x96a>
 80102b6:	45b8      	cmp	r8, r7
 80102b8:	d003      	beq.n	80102c2 <_dtoa_r+0x96a>
 80102ba:	4641      	mov	r1, r8
 80102bc:	4620      	mov	r0, r4
 80102be:	f000 f985 	bl	80105cc <_Bfree>
 80102c2:	4639      	mov	r1, r7
 80102c4:	4620      	mov	r0, r4
 80102c6:	f000 f981 	bl	80105cc <_Bfree>
 80102ca:	e695      	b.n	800fff8 <_dtoa_r+0x6a0>
 80102cc:	2600      	movs	r6, #0
 80102ce:	4637      	mov	r7, r6
 80102d0:	e7e1      	b.n	8010296 <_dtoa_r+0x93e>
 80102d2:	9700      	str	r7, [sp, #0]
 80102d4:	4637      	mov	r7, r6
 80102d6:	e599      	b.n	800fe0c <_dtoa_r+0x4b4>
 80102d8:	40240000 	.word	0x40240000
 80102dc:	9b08      	ldr	r3, [sp, #32]
 80102de:	2b00      	cmp	r3, #0
 80102e0:	f000 80ca 	beq.w	8010478 <_dtoa_r+0xb20>
 80102e4:	9b03      	ldr	r3, [sp, #12]
 80102e6:	9302      	str	r3, [sp, #8]
 80102e8:	2d00      	cmp	r5, #0
 80102ea:	dd05      	ble.n	80102f8 <_dtoa_r+0x9a0>
 80102ec:	4639      	mov	r1, r7
 80102ee:	462a      	mov	r2, r5
 80102f0:	4620      	mov	r0, r4
 80102f2:	f000 fb3d 	bl	8010970 <__lshift>
 80102f6:	4607      	mov	r7, r0
 80102f8:	f1b8 0f00 	cmp.w	r8, #0
 80102fc:	d05b      	beq.n	80103b6 <_dtoa_r+0xa5e>
 80102fe:	6879      	ldr	r1, [r7, #4]
 8010300:	4620      	mov	r0, r4
 8010302:	f000 f923 	bl	801054c <_Balloc>
 8010306:	4605      	mov	r5, r0
 8010308:	b928      	cbnz	r0, 8010316 <_dtoa_r+0x9be>
 801030a:	4b87      	ldr	r3, [pc, #540]	; (8010528 <_dtoa_r+0xbd0>)
 801030c:	4602      	mov	r2, r0
 801030e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8010312:	f7ff bb3b 	b.w	800f98c <_dtoa_r+0x34>
 8010316:	693a      	ldr	r2, [r7, #16]
 8010318:	3202      	adds	r2, #2
 801031a:	0092      	lsls	r2, r2, #2
 801031c:	f107 010c 	add.w	r1, r7, #12
 8010320:	300c      	adds	r0, #12
 8010322:	f7fe fded 	bl	800ef00 <memcpy>
 8010326:	2201      	movs	r2, #1
 8010328:	4629      	mov	r1, r5
 801032a:	4620      	mov	r0, r4
 801032c:	f000 fb20 	bl	8010970 <__lshift>
 8010330:	9b01      	ldr	r3, [sp, #4]
 8010332:	f103 0901 	add.w	r9, r3, #1
 8010336:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801033a:	4413      	add	r3, r2
 801033c:	9305      	str	r3, [sp, #20]
 801033e:	f00a 0301 	and.w	r3, sl, #1
 8010342:	46b8      	mov	r8, r7
 8010344:	9304      	str	r3, [sp, #16]
 8010346:	4607      	mov	r7, r0
 8010348:	4631      	mov	r1, r6
 801034a:	ee18 0a10 	vmov	r0, s16
 801034e:	f7ff fa77 	bl	800f840 <quorem>
 8010352:	4641      	mov	r1, r8
 8010354:	9002      	str	r0, [sp, #8]
 8010356:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801035a:	ee18 0a10 	vmov	r0, s16
 801035e:	f000 fb77 	bl	8010a50 <__mcmp>
 8010362:	463a      	mov	r2, r7
 8010364:	9003      	str	r0, [sp, #12]
 8010366:	4631      	mov	r1, r6
 8010368:	4620      	mov	r0, r4
 801036a:	f000 fb8d 	bl	8010a88 <__mdiff>
 801036e:	68c2      	ldr	r2, [r0, #12]
 8010370:	f109 3bff 	add.w	fp, r9, #4294967295
 8010374:	4605      	mov	r5, r0
 8010376:	bb02      	cbnz	r2, 80103ba <_dtoa_r+0xa62>
 8010378:	4601      	mov	r1, r0
 801037a:	ee18 0a10 	vmov	r0, s16
 801037e:	f000 fb67 	bl	8010a50 <__mcmp>
 8010382:	4602      	mov	r2, r0
 8010384:	4629      	mov	r1, r5
 8010386:	4620      	mov	r0, r4
 8010388:	9207      	str	r2, [sp, #28]
 801038a:	f000 f91f 	bl	80105cc <_Bfree>
 801038e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8010392:	ea43 0102 	orr.w	r1, r3, r2
 8010396:	9b04      	ldr	r3, [sp, #16]
 8010398:	430b      	orrs	r3, r1
 801039a:	464d      	mov	r5, r9
 801039c:	d10f      	bne.n	80103be <_dtoa_r+0xa66>
 801039e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80103a2:	d02a      	beq.n	80103fa <_dtoa_r+0xaa2>
 80103a4:	9b03      	ldr	r3, [sp, #12]
 80103a6:	2b00      	cmp	r3, #0
 80103a8:	dd02      	ble.n	80103b0 <_dtoa_r+0xa58>
 80103aa:	9b02      	ldr	r3, [sp, #8]
 80103ac:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80103b0:	f88b a000 	strb.w	sl, [fp]
 80103b4:	e775      	b.n	80102a2 <_dtoa_r+0x94a>
 80103b6:	4638      	mov	r0, r7
 80103b8:	e7ba      	b.n	8010330 <_dtoa_r+0x9d8>
 80103ba:	2201      	movs	r2, #1
 80103bc:	e7e2      	b.n	8010384 <_dtoa_r+0xa2c>
 80103be:	9b03      	ldr	r3, [sp, #12]
 80103c0:	2b00      	cmp	r3, #0
 80103c2:	db04      	blt.n	80103ce <_dtoa_r+0xa76>
 80103c4:	9906      	ldr	r1, [sp, #24]
 80103c6:	430b      	orrs	r3, r1
 80103c8:	9904      	ldr	r1, [sp, #16]
 80103ca:	430b      	orrs	r3, r1
 80103cc:	d122      	bne.n	8010414 <_dtoa_r+0xabc>
 80103ce:	2a00      	cmp	r2, #0
 80103d0:	ddee      	ble.n	80103b0 <_dtoa_r+0xa58>
 80103d2:	ee18 1a10 	vmov	r1, s16
 80103d6:	2201      	movs	r2, #1
 80103d8:	4620      	mov	r0, r4
 80103da:	f000 fac9 	bl	8010970 <__lshift>
 80103de:	4631      	mov	r1, r6
 80103e0:	ee08 0a10 	vmov	s16, r0
 80103e4:	f000 fb34 	bl	8010a50 <__mcmp>
 80103e8:	2800      	cmp	r0, #0
 80103ea:	dc03      	bgt.n	80103f4 <_dtoa_r+0xa9c>
 80103ec:	d1e0      	bne.n	80103b0 <_dtoa_r+0xa58>
 80103ee:	f01a 0f01 	tst.w	sl, #1
 80103f2:	d0dd      	beq.n	80103b0 <_dtoa_r+0xa58>
 80103f4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80103f8:	d1d7      	bne.n	80103aa <_dtoa_r+0xa52>
 80103fa:	2339      	movs	r3, #57	; 0x39
 80103fc:	f88b 3000 	strb.w	r3, [fp]
 8010400:	462b      	mov	r3, r5
 8010402:	461d      	mov	r5, r3
 8010404:	3b01      	subs	r3, #1
 8010406:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801040a:	2a39      	cmp	r2, #57	; 0x39
 801040c:	d071      	beq.n	80104f2 <_dtoa_r+0xb9a>
 801040e:	3201      	adds	r2, #1
 8010410:	701a      	strb	r2, [r3, #0]
 8010412:	e746      	b.n	80102a2 <_dtoa_r+0x94a>
 8010414:	2a00      	cmp	r2, #0
 8010416:	dd07      	ble.n	8010428 <_dtoa_r+0xad0>
 8010418:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801041c:	d0ed      	beq.n	80103fa <_dtoa_r+0xaa2>
 801041e:	f10a 0301 	add.w	r3, sl, #1
 8010422:	f88b 3000 	strb.w	r3, [fp]
 8010426:	e73c      	b.n	80102a2 <_dtoa_r+0x94a>
 8010428:	9b05      	ldr	r3, [sp, #20]
 801042a:	f809 ac01 	strb.w	sl, [r9, #-1]
 801042e:	4599      	cmp	r9, r3
 8010430:	d047      	beq.n	80104c2 <_dtoa_r+0xb6a>
 8010432:	ee18 1a10 	vmov	r1, s16
 8010436:	2300      	movs	r3, #0
 8010438:	220a      	movs	r2, #10
 801043a:	4620      	mov	r0, r4
 801043c:	f000 f8e8 	bl	8010610 <__multadd>
 8010440:	45b8      	cmp	r8, r7
 8010442:	ee08 0a10 	vmov	s16, r0
 8010446:	f04f 0300 	mov.w	r3, #0
 801044a:	f04f 020a 	mov.w	r2, #10
 801044e:	4641      	mov	r1, r8
 8010450:	4620      	mov	r0, r4
 8010452:	d106      	bne.n	8010462 <_dtoa_r+0xb0a>
 8010454:	f000 f8dc 	bl	8010610 <__multadd>
 8010458:	4680      	mov	r8, r0
 801045a:	4607      	mov	r7, r0
 801045c:	f109 0901 	add.w	r9, r9, #1
 8010460:	e772      	b.n	8010348 <_dtoa_r+0x9f0>
 8010462:	f000 f8d5 	bl	8010610 <__multadd>
 8010466:	4639      	mov	r1, r7
 8010468:	4680      	mov	r8, r0
 801046a:	2300      	movs	r3, #0
 801046c:	220a      	movs	r2, #10
 801046e:	4620      	mov	r0, r4
 8010470:	f000 f8ce 	bl	8010610 <__multadd>
 8010474:	4607      	mov	r7, r0
 8010476:	e7f1      	b.n	801045c <_dtoa_r+0xb04>
 8010478:	9b03      	ldr	r3, [sp, #12]
 801047a:	9302      	str	r3, [sp, #8]
 801047c:	9d01      	ldr	r5, [sp, #4]
 801047e:	ee18 0a10 	vmov	r0, s16
 8010482:	4631      	mov	r1, r6
 8010484:	f7ff f9dc 	bl	800f840 <quorem>
 8010488:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801048c:	9b01      	ldr	r3, [sp, #4]
 801048e:	f805 ab01 	strb.w	sl, [r5], #1
 8010492:	1aea      	subs	r2, r5, r3
 8010494:	9b02      	ldr	r3, [sp, #8]
 8010496:	4293      	cmp	r3, r2
 8010498:	dd09      	ble.n	80104ae <_dtoa_r+0xb56>
 801049a:	ee18 1a10 	vmov	r1, s16
 801049e:	2300      	movs	r3, #0
 80104a0:	220a      	movs	r2, #10
 80104a2:	4620      	mov	r0, r4
 80104a4:	f000 f8b4 	bl	8010610 <__multadd>
 80104a8:	ee08 0a10 	vmov	s16, r0
 80104ac:	e7e7      	b.n	801047e <_dtoa_r+0xb26>
 80104ae:	9b02      	ldr	r3, [sp, #8]
 80104b0:	2b00      	cmp	r3, #0
 80104b2:	bfc8      	it	gt
 80104b4:	461d      	movgt	r5, r3
 80104b6:	9b01      	ldr	r3, [sp, #4]
 80104b8:	bfd8      	it	le
 80104ba:	2501      	movle	r5, #1
 80104bc:	441d      	add	r5, r3
 80104be:	f04f 0800 	mov.w	r8, #0
 80104c2:	ee18 1a10 	vmov	r1, s16
 80104c6:	2201      	movs	r2, #1
 80104c8:	4620      	mov	r0, r4
 80104ca:	f000 fa51 	bl	8010970 <__lshift>
 80104ce:	4631      	mov	r1, r6
 80104d0:	ee08 0a10 	vmov	s16, r0
 80104d4:	f000 fabc 	bl	8010a50 <__mcmp>
 80104d8:	2800      	cmp	r0, #0
 80104da:	dc91      	bgt.n	8010400 <_dtoa_r+0xaa8>
 80104dc:	d102      	bne.n	80104e4 <_dtoa_r+0xb8c>
 80104de:	f01a 0f01 	tst.w	sl, #1
 80104e2:	d18d      	bne.n	8010400 <_dtoa_r+0xaa8>
 80104e4:	462b      	mov	r3, r5
 80104e6:	461d      	mov	r5, r3
 80104e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80104ec:	2a30      	cmp	r2, #48	; 0x30
 80104ee:	d0fa      	beq.n	80104e6 <_dtoa_r+0xb8e>
 80104f0:	e6d7      	b.n	80102a2 <_dtoa_r+0x94a>
 80104f2:	9a01      	ldr	r2, [sp, #4]
 80104f4:	429a      	cmp	r2, r3
 80104f6:	d184      	bne.n	8010402 <_dtoa_r+0xaaa>
 80104f8:	9b00      	ldr	r3, [sp, #0]
 80104fa:	3301      	adds	r3, #1
 80104fc:	9300      	str	r3, [sp, #0]
 80104fe:	2331      	movs	r3, #49	; 0x31
 8010500:	7013      	strb	r3, [r2, #0]
 8010502:	e6ce      	b.n	80102a2 <_dtoa_r+0x94a>
 8010504:	4b09      	ldr	r3, [pc, #36]	; (801052c <_dtoa_r+0xbd4>)
 8010506:	f7ff ba95 	b.w	800fa34 <_dtoa_r+0xdc>
 801050a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801050c:	2b00      	cmp	r3, #0
 801050e:	f47f aa6e 	bne.w	800f9ee <_dtoa_r+0x96>
 8010512:	4b07      	ldr	r3, [pc, #28]	; (8010530 <_dtoa_r+0xbd8>)
 8010514:	f7ff ba8e 	b.w	800fa34 <_dtoa_r+0xdc>
 8010518:	9b02      	ldr	r3, [sp, #8]
 801051a:	2b00      	cmp	r3, #0
 801051c:	dcae      	bgt.n	801047c <_dtoa_r+0xb24>
 801051e:	9b06      	ldr	r3, [sp, #24]
 8010520:	2b02      	cmp	r3, #2
 8010522:	f73f aea8 	bgt.w	8010276 <_dtoa_r+0x91e>
 8010526:	e7a9      	b.n	801047c <_dtoa_r+0xb24>
 8010528:	080144e3 	.word	0x080144e3
 801052c:	08014440 	.word	0x08014440
 8010530:	08014464 	.word	0x08014464

08010534 <_localeconv_r>:
 8010534:	4800      	ldr	r0, [pc, #0]	; (8010538 <_localeconv_r+0x4>)
 8010536:	4770      	bx	lr
 8010538:	20000170 	.word	0x20000170

0801053c <malloc>:
 801053c:	4b02      	ldr	r3, [pc, #8]	; (8010548 <malloc+0xc>)
 801053e:	4601      	mov	r1, r0
 8010540:	6818      	ldr	r0, [r3, #0]
 8010542:	f000 bc09 	b.w	8010d58 <_malloc_r>
 8010546:	bf00      	nop
 8010548:	2000001c 	.word	0x2000001c

0801054c <_Balloc>:
 801054c:	b570      	push	{r4, r5, r6, lr}
 801054e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010550:	4604      	mov	r4, r0
 8010552:	460d      	mov	r5, r1
 8010554:	b976      	cbnz	r6, 8010574 <_Balloc+0x28>
 8010556:	2010      	movs	r0, #16
 8010558:	f7ff fff0 	bl	801053c <malloc>
 801055c:	4602      	mov	r2, r0
 801055e:	6260      	str	r0, [r4, #36]	; 0x24
 8010560:	b920      	cbnz	r0, 801056c <_Balloc+0x20>
 8010562:	4b18      	ldr	r3, [pc, #96]	; (80105c4 <_Balloc+0x78>)
 8010564:	4818      	ldr	r0, [pc, #96]	; (80105c8 <_Balloc+0x7c>)
 8010566:	2166      	movs	r1, #102	; 0x66
 8010568:	f000 fdd6 	bl	8011118 <__assert_func>
 801056c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010570:	6006      	str	r6, [r0, #0]
 8010572:	60c6      	str	r6, [r0, #12]
 8010574:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8010576:	68f3      	ldr	r3, [r6, #12]
 8010578:	b183      	cbz	r3, 801059c <_Balloc+0x50>
 801057a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801057c:	68db      	ldr	r3, [r3, #12]
 801057e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010582:	b9b8      	cbnz	r0, 80105b4 <_Balloc+0x68>
 8010584:	2101      	movs	r1, #1
 8010586:	fa01 f605 	lsl.w	r6, r1, r5
 801058a:	1d72      	adds	r2, r6, #5
 801058c:	0092      	lsls	r2, r2, #2
 801058e:	4620      	mov	r0, r4
 8010590:	f000 fb60 	bl	8010c54 <_calloc_r>
 8010594:	b160      	cbz	r0, 80105b0 <_Balloc+0x64>
 8010596:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801059a:	e00e      	b.n	80105ba <_Balloc+0x6e>
 801059c:	2221      	movs	r2, #33	; 0x21
 801059e:	2104      	movs	r1, #4
 80105a0:	4620      	mov	r0, r4
 80105a2:	f000 fb57 	bl	8010c54 <_calloc_r>
 80105a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80105a8:	60f0      	str	r0, [r6, #12]
 80105aa:	68db      	ldr	r3, [r3, #12]
 80105ac:	2b00      	cmp	r3, #0
 80105ae:	d1e4      	bne.n	801057a <_Balloc+0x2e>
 80105b0:	2000      	movs	r0, #0
 80105b2:	bd70      	pop	{r4, r5, r6, pc}
 80105b4:	6802      	ldr	r2, [r0, #0]
 80105b6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80105ba:	2300      	movs	r3, #0
 80105bc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80105c0:	e7f7      	b.n	80105b2 <_Balloc+0x66>
 80105c2:	bf00      	nop
 80105c4:	08014471 	.word	0x08014471
 80105c8:	080144f4 	.word	0x080144f4

080105cc <_Bfree>:
 80105cc:	b570      	push	{r4, r5, r6, lr}
 80105ce:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80105d0:	4605      	mov	r5, r0
 80105d2:	460c      	mov	r4, r1
 80105d4:	b976      	cbnz	r6, 80105f4 <_Bfree+0x28>
 80105d6:	2010      	movs	r0, #16
 80105d8:	f7ff ffb0 	bl	801053c <malloc>
 80105dc:	4602      	mov	r2, r0
 80105de:	6268      	str	r0, [r5, #36]	; 0x24
 80105e0:	b920      	cbnz	r0, 80105ec <_Bfree+0x20>
 80105e2:	4b09      	ldr	r3, [pc, #36]	; (8010608 <_Bfree+0x3c>)
 80105e4:	4809      	ldr	r0, [pc, #36]	; (801060c <_Bfree+0x40>)
 80105e6:	218a      	movs	r1, #138	; 0x8a
 80105e8:	f000 fd96 	bl	8011118 <__assert_func>
 80105ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80105f0:	6006      	str	r6, [r0, #0]
 80105f2:	60c6      	str	r6, [r0, #12]
 80105f4:	b13c      	cbz	r4, 8010606 <_Bfree+0x3a>
 80105f6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80105f8:	6862      	ldr	r2, [r4, #4]
 80105fa:	68db      	ldr	r3, [r3, #12]
 80105fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010600:	6021      	str	r1, [r4, #0]
 8010602:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8010606:	bd70      	pop	{r4, r5, r6, pc}
 8010608:	08014471 	.word	0x08014471
 801060c:	080144f4 	.word	0x080144f4

08010610 <__multadd>:
 8010610:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010614:	690d      	ldr	r5, [r1, #16]
 8010616:	4607      	mov	r7, r0
 8010618:	460c      	mov	r4, r1
 801061a:	461e      	mov	r6, r3
 801061c:	f101 0c14 	add.w	ip, r1, #20
 8010620:	2000      	movs	r0, #0
 8010622:	f8dc 3000 	ldr.w	r3, [ip]
 8010626:	b299      	uxth	r1, r3
 8010628:	fb02 6101 	mla	r1, r2, r1, r6
 801062c:	0c1e      	lsrs	r6, r3, #16
 801062e:	0c0b      	lsrs	r3, r1, #16
 8010630:	fb02 3306 	mla	r3, r2, r6, r3
 8010634:	b289      	uxth	r1, r1
 8010636:	3001      	adds	r0, #1
 8010638:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801063c:	4285      	cmp	r5, r0
 801063e:	f84c 1b04 	str.w	r1, [ip], #4
 8010642:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8010646:	dcec      	bgt.n	8010622 <__multadd+0x12>
 8010648:	b30e      	cbz	r6, 801068e <__multadd+0x7e>
 801064a:	68a3      	ldr	r3, [r4, #8]
 801064c:	42ab      	cmp	r3, r5
 801064e:	dc19      	bgt.n	8010684 <__multadd+0x74>
 8010650:	6861      	ldr	r1, [r4, #4]
 8010652:	4638      	mov	r0, r7
 8010654:	3101      	adds	r1, #1
 8010656:	f7ff ff79 	bl	801054c <_Balloc>
 801065a:	4680      	mov	r8, r0
 801065c:	b928      	cbnz	r0, 801066a <__multadd+0x5a>
 801065e:	4602      	mov	r2, r0
 8010660:	4b0c      	ldr	r3, [pc, #48]	; (8010694 <__multadd+0x84>)
 8010662:	480d      	ldr	r0, [pc, #52]	; (8010698 <__multadd+0x88>)
 8010664:	21b5      	movs	r1, #181	; 0xb5
 8010666:	f000 fd57 	bl	8011118 <__assert_func>
 801066a:	6922      	ldr	r2, [r4, #16]
 801066c:	3202      	adds	r2, #2
 801066e:	f104 010c 	add.w	r1, r4, #12
 8010672:	0092      	lsls	r2, r2, #2
 8010674:	300c      	adds	r0, #12
 8010676:	f7fe fc43 	bl	800ef00 <memcpy>
 801067a:	4621      	mov	r1, r4
 801067c:	4638      	mov	r0, r7
 801067e:	f7ff ffa5 	bl	80105cc <_Bfree>
 8010682:	4644      	mov	r4, r8
 8010684:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010688:	3501      	adds	r5, #1
 801068a:	615e      	str	r6, [r3, #20]
 801068c:	6125      	str	r5, [r4, #16]
 801068e:	4620      	mov	r0, r4
 8010690:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010694:	080144e3 	.word	0x080144e3
 8010698:	080144f4 	.word	0x080144f4

0801069c <__hi0bits>:
 801069c:	0c03      	lsrs	r3, r0, #16
 801069e:	041b      	lsls	r3, r3, #16
 80106a0:	b9d3      	cbnz	r3, 80106d8 <__hi0bits+0x3c>
 80106a2:	0400      	lsls	r0, r0, #16
 80106a4:	2310      	movs	r3, #16
 80106a6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80106aa:	bf04      	itt	eq
 80106ac:	0200      	lsleq	r0, r0, #8
 80106ae:	3308      	addeq	r3, #8
 80106b0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80106b4:	bf04      	itt	eq
 80106b6:	0100      	lsleq	r0, r0, #4
 80106b8:	3304      	addeq	r3, #4
 80106ba:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80106be:	bf04      	itt	eq
 80106c0:	0080      	lsleq	r0, r0, #2
 80106c2:	3302      	addeq	r3, #2
 80106c4:	2800      	cmp	r0, #0
 80106c6:	db05      	blt.n	80106d4 <__hi0bits+0x38>
 80106c8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80106cc:	f103 0301 	add.w	r3, r3, #1
 80106d0:	bf08      	it	eq
 80106d2:	2320      	moveq	r3, #32
 80106d4:	4618      	mov	r0, r3
 80106d6:	4770      	bx	lr
 80106d8:	2300      	movs	r3, #0
 80106da:	e7e4      	b.n	80106a6 <__hi0bits+0xa>

080106dc <__lo0bits>:
 80106dc:	6803      	ldr	r3, [r0, #0]
 80106de:	f013 0207 	ands.w	r2, r3, #7
 80106e2:	4601      	mov	r1, r0
 80106e4:	d00b      	beq.n	80106fe <__lo0bits+0x22>
 80106e6:	07da      	lsls	r2, r3, #31
 80106e8:	d423      	bmi.n	8010732 <__lo0bits+0x56>
 80106ea:	0798      	lsls	r0, r3, #30
 80106ec:	bf49      	itett	mi
 80106ee:	085b      	lsrmi	r3, r3, #1
 80106f0:	089b      	lsrpl	r3, r3, #2
 80106f2:	2001      	movmi	r0, #1
 80106f4:	600b      	strmi	r3, [r1, #0]
 80106f6:	bf5c      	itt	pl
 80106f8:	600b      	strpl	r3, [r1, #0]
 80106fa:	2002      	movpl	r0, #2
 80106fc:	4770      	bx	lr
 80106fe:	b298      	uxth	r0, r3
 8010700:	b9a8      	cbnz	r0, 801072e <__lo0bits+0x52>
 8010702:	0c1b      	lsrs	r3, r3, #16
 8010704:	2010      	movs	r0, #16
 8010706:	b2da      	uxtb	r2, r3
 8010708:	b90a      	cbnz	r2, 801070e <__lo0bits+0x32>
 801070a:	3008      	adds	r0, #8
 801070c:	0a1b      	lsrs	r3, r3, #8
 801070e:	071a      	lsls	r2, r3, #28
 8010710:	bf04      	itt	eq
 8010712:	091b      	lsreq	r3, r3, #4
 8010714:	3004      	addeq	r0, #4
 8010716:	079a      	lsls	r2, r3, #30
 8010718:	bf04      	itt	eq
 801071a:	089b      	lsreq	r3, r3, #2
 801071c:	3002      	addeq	r0, #2
 801071e:	07da      	lsls	r2, r3, #31
 8010720:	d403      	bmi.n	801072a <__lo0bits+0x4e>
 8010722:	085b      	lsrs	r3, r3, #1
 8010724:	f100 0001 	add.w	r0, r0, #1
 8010728:	d005      	beq.n	8010736 <__lo0bits+0x5a>
 801072a:	600b      	str	r3, [r1, #0]
 801072c:	4770      	bx	lr
 801072e:	4610      	mov	r0, r2
 8010730:	e7e9      	b.n	8010706 <__lo0bits+0x2a>
 8010732:	2000      	movs	r0, #0
 8010734:	4770      	bx	lr
 8010736:	2020      	movs	r0, #32
 8010738:	4770      	bx	lr
	...

0801073c <__i2b>:
 801073c:	b510      	push	{r4, lr}
 801073e:	460c      	mov	r4, r1
 8010740:	2101      	movs	r1, #1
 8010742:	f7ff ff03 	bl	801054c <_Balloc>
 8010746:	4602      	mov	r2, r0
 8010748:	b928      	cbnz	r0, 8010756 <__i2b+0x1a>
 801074a:	4b05      	ldr	r3, [pc, #20]	; (8010760 <__i2b+0x24>)
 801074c:	4805      	ldr	r0, [pc, #20]	; (8010764 <__i2b+0x28>)
 801074e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8010752:	f000 fce1 	bl	8011118 <__assert_func>
 8010756:	2301      	movs	r3, #1
 8010758:	6144      	str	r4, [r0, #20]
 801075a:	6103      	str	r3, [r0, #16]
 801075c:	bd10      	pop	{r4, pc}
 801075e:	bf00      	nop
 8010760:	080144e3 	.word	0x080144e3
 8010764:	080144f4 	.word	0x080144f4

08010768 <__multiply>:
 8010768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801076c:	4691      	mov	r9, r2
 801076e:	690a      	ldr	r2, [r1, #16]
 8010770:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010774:	429a      	cmp	r2, r3
 8010776:	bfb8      	it	lt
 8010778:	460b      	movlt	r3, r1
 801077a:	460c      	mov	r4, r1
 801077c:	bfbc      	itt	lt
 801077e:	464c      	movlt	r4, r9
 8010780:	4699      	movlt	r9, r3
 8010782:	6927      	ldr	r7, [r4, #16]
 8010784:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8010788:	68a3      	ldr	r3, [r4, #8]
 801078a:	6861      	ldr	r1, [r4, #4]
 801078c:	eb07 060a 	add.w	r6, r7, sl
 8010790:	42b3      	cmp	r3, r6
 8010792:	b085      	sub	sp, #20
 8010794:	bfb8      	it	lt
 8010796:	3101      	addlt	r1, #1
 8010798:	f7ff fed8 	bl	801054c <_Balloc>
 801079c:	b930      	cbnz	r0, 80107ac <__multiply+0x44>
 801079e:	4602      	mov	r2, r0
 80107a0:	4b44      	ldr	r3, [pc, #272]	; (80108b4 <__multiply+0x14c>)
 80107a2:	4845      	ldr	r0, [pc, #276]	; (80108b8 <__multiply+0x150>)
 80107a4:	f240 115d 	movw	r1, #349	; 0x15d
 80107a8:	f000 fcb6 	bl	8011118 <__assert_func>
 80107ac:	f100 0514 	add.w	r5, r0, #20
 80107b0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80107b4:	462b      	mov	r3, r5
 80107b6:	2200      	movs	r2, #0
 80107b8:	4543      	cmp	r3, r8
 80107ba:	d321      	bcc.n	8010800 <__multiply+0x98>
 80107bc:	f104 0314 	add.w	r3, r4, #20
 80107c0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80107c4:	f109 0314 	add.w	r3, r9, #20
 80107c8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80107cc:	9202      	str	r2, [sp, #8]
 80107ce:	1b3a      	subs	r2, r7, r4
 80107d0:	3a15      	subs	r2, #21
 80107d2:	f022 0203 	bic.w	r2, r2, #3
 80107d6:	3204      	adds	r2, #4
 80107d8:	f104 0115 	add.w	r1, r4, #21
 80107dc:	428f      	cmp	r7, r1
 80107de:	bf38      	it	cc
 80107e0:	2204      	movcc	r2, #4
 80107e2:	9201      	str	r2, [sp, #4]
 80107e4:	9a02      	ldr	r2, [sp, #8]
 80107e6:	9303      	str	r3, [sp, #12]
 80107e8:	429a      	cmp	r2, r3
 80107ea:	d80c      	bhi.n	8010806 <__multiply+0x9e>
 80107ec:	2e00      	cmp	r6, #0
 80107ee:	dd03      	ble.n	80107f8 <__multiply+0x90>
 80107f0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80107f4:	2b00      	cmp	r3, #0
 80107f6:	d05a      	beq.n	80108ae <__multiply+0x146>
 80107f8:	6106      	str	r6, [r0, #16]
 80107fa:	b005      	add	sp, #20
 80107fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010800:	f843 2b04 	str.w	r2, [r3], #4
 8010804:	e7d8      	b.n	80107b8 <__multiply+0x50>
 8010806:	f8b3 a000 	ldrh.w	sl, [r3]
 801080a:	f1ba 0f00 	cmp.w	sl, #0
 801080e:	d024      	beq.n	801085a <__multiply+0xf2>
 8010810:	f104 0e14 	add.w	lr, r4, #20
 8010814:	46a9      	mov	r9, r5
 8010816:	f04f 0c00 	mov.w	ip, #0
 801081a:	f85e 2b04 	ldr.w	r2, [lr], #4
 801081e:	f8d9 1000 	ldr.w	r1, [r9]
 8010822:	fa1f fb82 	uxth.w	fp, r2
 8010826:	b289      	uxth	r1, r1
 8010828:	fb0a 110b 	mla	r1, sl, fp, r1
 801082c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8010830:	f8d9 2000 	ldr.w	r2, [r9]
 8010834:	4461      	add	r1, ip
 8010836:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801083a:	fb0a c20b 	mla	r2, sl, fp, ip
 801083e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8010842:	b289      	uxth	r1, r1
 8010844:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8010848:	4577      	cmp	r7, lr
 801084a:	f849 1b04 	str.w	r1, [r9], #4
 801084e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8010852:	d8e2      	bhi.n	801081a <__multiply+0xb2>
 8010854:	9a01      	ldr	r2, [sp, #4]
 8010856:	f845 c002 	str.w	ip, [r5, r2]
 801085a:	9a03      	ldr	r2, [sp, #12]
 801085c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8010860:	3304      	adds	r3, #4
 8010862:	f1b9 0f00 	cmp.w	r9, #0
 8010866:	d020      	beq.n	80108aa <__multiply+0x142>
 8010868:	6829      	ldr	r1, [r5, #0]
 801086a:	f104 0c14 	add.w	ip, r4, #20
 801086e:	46ae      	mov	lr, r5
 8010870:	f04f 0a00 	mov.w	sl, #0
 8010874:	f8bc b000 	ldrh.w	fp, [ip]
 8010878:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801087c:	fb09 220b 	mla	r2, r9, fp, r2
 8010880:	4492      	add	sl, r2
 8010882:	b289      	uxth	r1, r1
 8010884:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8010888:	f84e 1b04 	str.w	r1, [lr], #4
 801088c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8010890:	f8be 1000 	ldrh.w	r1, [lr]
 8010894:	0c12      	lsrs	r2, r2, #16
 8010896:	fb09 1102 	mla	r1, r9, r2, r1
 801089a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 801089e:	4567      	cmp	r7, ip
 80108a0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80108a4:	d8e6      	bhi.n	8010874 <__multiply+0x10c>
 80108a6:	9a01      	ldr	r2, [sp, #4]
 80108a8:	50a9      	str	r1, [r5, r2]
 80108aa:	3504      	adds	r5, #4
 80108ac:	e79a      	b.n	80107e4 <__multiply+0x7c>
 80108ae:	3e01      	subs	r6, #1
 80108b0:	e79c      	b.n	80107ec <__multiply+0x84>
 80108b2:	bf00      	nop
 80108b4:	080144e3 	.word	0x080144e3
 80108b8:	080144f4 	.word	0x080144f4

080108bc <__pow5mult>:
 80108bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80108c0:	4615      	mov	r5, r2
 80108c2:	f012 0203 	ands.w	r2, r2, #3
 80108c6:	4606      	mov	r6, r0
 80108c8:	460f      	mov	r7, r1
 80108ca:	d007      	beq.n	80108dc <__pow5mult+0x20>
 80108cc:	4c25      	ldr	r4, [pc, #148]	; (8010964 <__pow5mult+0xa8>)
 80108ce:	3a01      	subs	r2, #1
 80108d0:	2300      	movs	r3, #0
 80108d2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80108d6:	f7ff fe9b 	bl	8010610 <__multadd>
 80108da:	4607      	mov	r7, r0
 80108dc:	10ad      	asrs	r5, r5, #2
 80108de:	d03d      	beq.n	801095c <__pow5mult+0xa0>
 80108e0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80108e2:	b97c      	cbnz	r4, 8010904 <__pow5mult+0x48>
 80108e4:	2010      	movs	r0, #16
 80108e6:	f7ff fe29 	bl	801053c <malloc>
 80108ea:	4602      	mov	r2, r0
 80108ec:	6270      	str	r0, [r6, #36]	; 0x24
 80108ee:	b928      	cbnz	r0, 80108fc <__pow5mult+0x40>
 80108f0:	4b1d      	ldr	r3, [pc, #116]	; (8010968 <__pow5mult+0xac>)
 80108f2:	481e      	ldr	r0, [pc, #120]	; (801096c <__pow5mult+0xb0>)
 80108f4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80108f8:	f000 fc0e 	bl	8011118 <__assert_func>
 80108fc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010900:	6004      	str	r4, [r0, #0]
 8010902:	60c4      	str	r4, [r0, #12]
 8010904:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8010908:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801090c:	b94c      	cbnz	r4, 8010922 <__pow5mult+0x66>
 801090e:	f240 2171 	movw	r1, #625	; 0x271
 8010912:	4630      	mov	r0, r6
 8010914:	f7ff ff12 	bl	801073c <__i2b>
 8010918:	2300      	movs	r3, #0
 801091a:	f8c8 0008 	str.w	r0, [r8, #8]
 801091e:	4604      	mov	r4, r0
 8010920:	6003      	str	r3, [r0, #0]
 8010922:	f04f 0900 	mov.w	r9, #0
 8010926:	07eb      	lsls	r3, r5, #31
 8010928:	d50a      	bpl.n	8010940 <__pow5mult+0x84>
 801092a:	4639      	mov	r1, r7
 801092c:	4622      	mov	r2, r4
 801092e:	4630      	mov	r0, r6
 8010930:	f7ff ff1a 	bl	8010768 <__multiply>
 8010934:	4639      	mov	r1, r7
 8010936:	4680      	mov	r8, r0
 8010938:	4630      	mov	r0, r6
 801093a:	f7ff fe47 	bl	80105cc <_Bfree>
 801093e:	4647      	mov	r7, r8
 8010940:	106d      	asrs	r5, r5, #1
 8010942:	d00b      	beq.n	801095c <__pow5mult+0xa0>
 8010944:	6820      	ldr	r0, [r4, #0]
 8010946:	b938      	cbnz	r0, 8010958 <__pow5mult+0x9c>
 8010948:	4622      	mov	r2, r4
 801094a:	4621      	mov	r1, r4
 801094c:	4630      	mov	r0, r6
 801094e:	f7ff ff0b 	bl	8010768 <__multiply>
 8010952:	6020      	str	r0, [r4, #0]
 8010954:	f8c0 9000 	str.w	r9, [r0]
 8010958:	4604      	mov	r4, r0
 801095a:	e7e4      	b.n	8010926 <__pow5mult+0x6a>
 801095c:	4638      	mov	r0, r7
 801095e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010962:	bf00      	nop
 8010964:	08014640 	.word	0x08014640
 8010968:	08014471 	.word	0x08014471
 801096c:	080144f4 	.word	0x080144f4

08010970 <__lshift>:
 8010970:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010974:	460c      	mov	r4, r1
 8010976:	6849      	ldr	r1, [r1, #4]
 8010978:	6923      	ldr	r3, [r4, #16]
 801097a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801097e:	68a3      	ldr	r3, [r4, #8]
 8010980:	4607      	mov	r7, r0
 8010982:	4691      	mov	r9, r2
 8010984:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010988:	f108 0601 	add.w	r6, r8, #1
 801098c:	42b3      	cmp	r3, r6
 801098e:	db0b      	blt.n	80109a8 <__lshift+0x38>
 8010990:	4638      	mov	r0, r7
 8010992:	f7ff fddb 	bl	801054c <_Balloc>
 8010996:	4605      	mov	r5, r0
 8010998:	b948      	cbnz	r0, 80109ae <__lshift+0x3e>
 801099a:	4602      	mov	r2, r0
 801099c:	4b2a      	ldr	r3, [pc, #168]	; (8010a48 <__lshift+0xd8>)
 801099e:	482b      	ldr	r0, [pc, #172]	; (8010a4c <__lshift+0xdc>)
 80109a0:	f240 11d9 	movw	r1, #473	; 0x1d9
 80109a4:	f000 fbb8 	bl	8011118 <__assert_func>
 80109a8:	3101      	adds	r1, #1
 80109aa:	005b      	lsls	r3, r3, #1
 80109ac:	e7ee      	b.n	801098c <__lshift+0x1c>
 80109ae:	2300      	movs	r3, #0
 80109b0:	f100 0114 	add.w	r1, r0, #20
 80109b4:	f100 0210 	add.w	r2, r0, #16
 80109b8:	4618      	mov	r0, r3
 80109ba:	4553      	cmp	r3, sl
 80109bc:	db37      	blt.n	8010a2e <__lshift+0xbe>
 80109be:	6920      	ldr	r0, [r4, #16]
 80109c0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80109c4:	f104 0314 	add.w	r3, r4, #20
 80109c8:	f019 091f 	ands.w	r9, r9, #31
 80109cc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80109d0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80109d4:	d02f      	beq.n	8010a36 <__lshift+0xc6>
 80109d6:	f1c9 0e20 	rsb	lr, r9, #32
 80109da:	468a      	mov	sl, r1
 80109dc:	f04f 0c00 	mov.w	ip, #0
 80109e0:	681a      	ldr	r2, [r3, #0]
 80109e2:	fa02 f209 	lsl.w	r2, r2, r9
 80109e6:	ea42 020c 	orr.w	r2, r2, ip
 80109ea:	f84a 2b04 	str.w	r2, [sl], #4
 80109ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80109f2:	4298      	cmp	r0, r3
 80109f4:	fa22 fc0e 	lsr.w	ip, r2, lr
 80109f8:	d8f2      	bhi.n	80109e0 <__lshift+0x70>
 80109fa:	1b03      	subs	r3, r0, r4
 80109fc:	3b15      	subs	r3, #21
 80109fe:	f023 0303 	bic.w	r3, r3, #3
 8010a02:	3304      	adds	r3, #4
 8010a04:	f104 0215 	add.w	r2, r4, #21
 8010a08:	4290      	cmp	r0, r2
 8010a0a:	bf38      	it	cc
 8010a0c:	2304      	movcc	r3, #4
 8010a0e:	f841 c003 	str.w	ip, [r1, r3]
 8010a12:	f1bc 0f00 	cmp.w	ip, #0
 8010a16:	d001      	beq.n	8010a1c <__lshift+0xac>
 8010a18:	f108 0602 	add.w	r6, r8, #2
 8010a1c:	3e01      	subs	r6, #1
 8010a1e:	4638      	mov	r0, r7
 8010a20:	612e      	str	r6, [r5, #16]
 8010a22:	4621      	mov	r1, r4
 8010a24:	f7ff fdd2 	bl	80105cc <_Bfree>
 8010a28:	4628      	mov	r0, r5
 8010a2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010a2e:	f842 0f04 	str.w	r0, [r2, #4]!
 8010a32:	3301      	adds	r3, #1
 8010a34:	e7c1      	b.n	80109ba <__lshift+0x4a>
 8010a36:	3904      	subs	r1, #4
 8010a38:	f853 2b04 	ldr.w	r2, [r3], #4
 8010a3c:	f841 2f04 	str.w	r2, [r1, #4]!
 8010a40:	4298      	cmp	r0, r3
 8010a42:	d8f9      	bhi.n	8010a38 <__lshift+0xc8>
 8010a44:	e7ea      	b.n	8010a1c <__lshift+0xac>
 8010a46:	bf00      	nop
 8010a48:	080144e3 	.word	0x080144e3
 8010a4c:	080144f4 	.word	0x080144f4

08010a50 <__mcmp>:
 8010a50:	b530      	push	{r4, r5, lr}
 8010a52:	6902      	ldr	r2, [r0, #16]
 8010a54:	690c      	ldr	r4, [r1, #16]
 8010a56:	1b12      	subs	r2, r2, r4
 8010a58:	d10e      	bne.n	8010a78 <__mcmp+0x28>
 8010a5a:	f100 0314 	add.w	r3, r0, #20
 8010a5e:	3114      	adds	r1, #20
 8010a60:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8010a64:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8010a68:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8010a6c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8010a70:	42a5      	cmp	r5, r4
 8010a72:	d003      	beq.n	8010a7c <__mcmp+0x2c>
 8010a74:	d305      	bcc.n	8010a82 <__mcmp+0x32>
 8010a76:	2201      	movs	r2, #1
 8010a78:	4610      	mov	r0, r2
 8010a7a:	bd30      	pop	{r4, r5, pc}
 8010a7c:	4283      	cmp	r3, r0
 8010a7e:	d3f3      	bcc.n	8010a68 <__mcmp+0x18>
 8010a80:	e7fa      	b.n	8010a78 <__mcmp+0x28>
 8010a82:	f04f 32ff 	mov.w	r2, #4294967295
 8010a86:	e7f7      	b.n	8010a78 <__mcmp+0x28>

08010a88 <__mdiff>:
 8010a88:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a8c:	460c      	mov	r4, r1
 8010a8e:	4606      	mov	r6, r0
 8010a90:	4611      	mov	r1, r2
 8010a92:	4620      	mov	r0, r4
 8010a94:	4690      	mov	r8, r2
 8010a96:	f7ff ffdb 	bl	8010a50 <__mcmp>
 8010a9a:	1e05      	subs	r5, r0, #0
 8010a9c:	d110      	bne.n	8010ac0 <__mdiff+0x38>
 8010a9e:	4629      	mov	r1, r5
 8010aa0:	4630      	mov	r0, r6
 8010aa2:	f7ff fd53 	bl	801054c <_Balloc>
 8010aa6:	b930      	cbnz	r0, 8010ab6 <__mdiff+0x2e>
 8010aa8:	4b3a      	ldr	r3, [pc, #232]	; (8010b94 <__mdiff+0x10c>)
 8010aaa:	4602      	mov	r2, r0
 8010aac:	f240 2132 	movw	r1, #562	; 0x232
 8010ab0:	4839      	ldr	r0, [pc, #228]	; (8010b98 <__mdiff+0x110>)
 8010ab2:	f000 fb31 	bl	8011118 <__assert_func>
 8010ab6:	2301      	movs	r3, #1
 8010ab8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010abc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ac0:	bfa4      	itt	ge
 8010ac2:	4643      	movge	r3, r8
 8010ac4:	46a0      	movge	r8, r4
 8010ac6:	4630      	mov	r0, r6
 8010ac8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8010acc:	bfa6      	itte	ge
 8010ace:	461c      	movge	r4, r3
 8010ad0:	2500      	movge	r5, #0
 8010ad2:	2501      	movlt	r5, #1
 8010ad4:	f7ff fd3a 	bl	801054c <_Balloc>
 8010ad8:	b920      	cbnz	r0, 8010ae4 <__mdiff+0x5c>
 8010ada:	4b2e      	ldr	r3, [pc, #184]	; (8010b94 <__mdiff+0x10c>)
 8010adc:	4602      	mov	r2, r0
 8010ade:	f44f 7110 	mov.w	r1, #576	; 0x240
 8010ae2:	e7e5      	b.n	8010ab0 <__mdiff+0x28>
 8010ae4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8010ae8:	6926      	ldr	r6, [r4, #16]
 8010aea:	60c5      	str	r5, [r0, #12]
 8010aec:	f104 0914 	add.w	r9, r4, #20
 8010af0:	f108 0514 	add.w	r5, r8, #20
 8010af4:	f100 0e14 	add.w	lr, r0, #20
 8010af8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8010afc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8010b00:	f108 0210 	add.w	r2, r8, #16
 8010b04:	46f2      	mov	sl, lr
 8010b06:	2100      	movs	r1, #0
 8010b08:	f859 3b04 	ldr.w	r3, [r9], #4
 8010b0c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8010b10:	fa1f f883 	uxth.w	r8, r3
 8010b14:	fa11 f18b 	uxtah	r1, r1, fp
 8010b18:	0c1b      	lsrs	r3, r3, #16
 8010b1a:	eba1 0808 	sub.w	r8, r1, r8
 8010b1e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8010b22:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8010b26:	fa1f f888 	uxth.w	r8, r8
 8010b2a:	1419      	asrs	r1, r3, #16
 8010b2c:	454e      	cmp	r6, r9
 8010b2e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8010b32:	f84a 3b04 	str.w	r3, [sl], #4
 8010b36:	d8e7      	bhi.n	8010b08 <__mdiff+0x80>
 8010b38:	1b33      	subs	r3, r6, r4
 8010b3a:	3b15      	subs	r3, #21
 8010b3c:	f023 0303 	bic.w	r3, r3, #3
 8010b40:	3304      	adds	r3, #4
 8010b42:	3415      	adds	r4, #21
 8010b44:	42a6      	cmp	r6, r4
 8010b46:	bf38      	it	cc
 8010b48:	2304      	movcc	r3, #4
 8010b4a:	441d      	add	r5, r3
 8010b4c:	4473      	add	r3, lr
 8010b4e:	469e      	mov	lr, r3
 8010b50:	462e      	mov	r6, r5
 8010b52:	4566      	cmp	r6, ip
 8010b54:	d30e      	bcc.n	8010b74 <__mdiff+0xec>
 8010b56:	f10c 0203 	add.w	r2, ip, #3
 8010b5a:	1b52      	subs	r2, r2, r5
 8010b5c:	f022 0203 	bic.w	r2, r2, #3
 8010b60:	3d03      	subs	r5, #3
 8010b62:	45ac      	cmp	ip, r5
 8010b64:	bf38      	it	cc
 8010b66:	2200      	movcc	r2, #0
 8010b68:	441a      	add	r2, r3
 8010b6a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8010b6e:	b17b      	cbz	r3, 8010b90 <__mdiff+0x108>
 8010b70:	6107      	str	r7, [r0, #16]
 8010b72:	e7a3      	b.n	8010abc <__mdiff+0x34>
 8010b74:	f856 8b04 	ldr.w	r8, [r6], #4
 8010b78:	fa11 f288 	uxtah	r2, r1, r8
 8010b7c:	1414      	asrs	r4, r2, #16
 8010b7e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8010b82:	b292      	uxth	r2, r2
 8010b84:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8010b88:	f84e 2b04 	str.w	r2, [lr], #4
 8010b8c:	1421      	asrs	r1, r4, #16
 8010b8e:	e7e0      	b.n	8010b52 <__mdiff+0xca>
 8010b90:	3f01      	subs	r7, #1
 8010b92:	e7ea      	b.n	8010b6a <__mdiff+0xe2>
 8010b94:	080144e3 	.word	0x080144e3
 8010b98:	080144f4 	.word	0x080144f4

08010b9c <__d2b>:
 8010b9c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010ba0:	4689      	mov	r9, r1
 8010ba2:	2101      	movs	r1, #1
 8010ba4:	ec57 6b10 	vmov	r6, r7, d0
 8010ba8:	4690      	mov	r8, r2
 8010baa:	f7ff fccf 	bl	801054c <_Balloc>
 8010bae:	4604      	mov	r4, r0
 8010bb0:	b930      	cbnz	r0, 8010bc0 <__d2b+0x24>
 8010bb2:	4602      	mov	r2, r0
 8010bb4:	4b25      	ldr	r3, [pc, #148]	; (8010c4c <__d2b+0xb0>)
 8010bb6:	4826      	ldr	r0, [pc, #152]	; (8010c50 <__d2b+0xb4>)
 8010bb8:	f240 310a 	movw	r1, #778	; 0x30a
 8010bbc:	f000 faac 	bl	8011118 <__assert_func>
 8010bc0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8010bc4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8010bc8:	bb35      	cbnz	r5, 8010c18 <__d2b+0x7c>
 8010bca:	2e00      	cmp	r6, #0
 8010bcc:	9301      	str	r3, [sp, #4]
 8010bce:	d028      	beq.n	8010c22 <__d2b+0x86>
 8010bd0:	4668      	mov	r0, sp
 8010bd2:	9600      	str	r6, [sp, #0]
 8010bd4:	f7ff fd82 	bl	80106dc <__lo0bits>
 8010bd8:	9900      	ldr	r1, [sp, #0]
 8010bda:	b300      	cbz	r0, 8010c1e <__d2b+0x82>
 8010bdc:	9a01      	ldr	r2, [sp, #4]
 8010bde:	f1c0 0320 	rsb	r3, r0, #32
 8010be2:	fa02 f303 	lsl.w	r3, r2, r3
 8010be6:	430b      	orrs	r3, r1
 8010be8:	40c2      	lsrs	r2, r0
 8010bea:	6163      	str	r3, [r4, #20]
 8010bec:	9201      	str	r2, [sp, #4]
 8010bee:	9b01      	ldr	r3, [sp, #4]
 8010bf0:	61a3      	str	r3, [r4, #24]
 8010bf2:	2b00      	cmp	r3, #0
 8010bf4:	bf14      	ite	ne
 8010bf6:	2202      	movne	r2, #2
 8010bf8:	2201      	moveq	r2, #1
 8010bfa:	6122      	str	r2, [r4, #16]
 8010bfc:	b1d5      	cbz	r5, 8010c34 <__d2b+0x98>
 8010bfe:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8010c02:	4405      	add	r5, r0
 8010c04:	f8c9 5000 	str.w	r5, [r9]
 8010c08:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8010c0c:	f8c8 0000 	str.w	r0, [r8]
 8010c10:	4620      	mov	r0, r4
 8010c12:	b003      	add	sp, #12
 8010c14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010c18:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010c1c:	e7d5      	b.n	8010bca <__d2b+0x2e>
 8010c1e:	6161      	str	r1, [r4, #20]
 8010c20:	e7e5      	b.n	8010bee <__d2b+0x52>
 8010c22:	a801      	add	r0, sp, #4
 8010c24:	f7ff fd5a 	bl	80106dc <__lo0bits>
 8010c28:	9b01      	ldr	r3, [sp, #4]
 8010c2a:	6163      	str	r3, [r4, #20]
 8010c2c:	2201      	movs	r2, #1
 8010c2e:	6122      	str	r2, [r4, #16]
 8010c30:	3020      	adds	r0, #32
 8010c32:	e7e3      	b.n	8010bfc <__d2b+0x60>
 8010c34:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010c38:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8010c3c:	f8c9 0000 	str.w	r0, [r9]
 8010c40:	6918      	ldr	r0, [r3, #16]
 8010c42:	f7ff fd2b 	bl	801069c <__hi0bits>
 8010c46:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8010c4a:	e7df      	b.n	8010c0c <__d2b+0x70>
 8010c4c:	080144e3 	.word	0x080144e3
 8010c50:	080144f4 	.word	0x080144f4

08010c54 <_calloc_r>:
 8010c54:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010c56:	fba1 2402 	umull	r2, r4, r1, r2
 8010c5a:	b94c      	cbnz	r4, 8010c70 <_calloc_r+0x1c>
 8010c5c:	4611      	mov	r1, r2
 8010c5e:	9201      	str	r2, [sp, #4]
 8010c60:	f000 f87a 	bl	8010d58 <_malloc_r>
 8010c64:	9a01      	ldr	r2, [sp, #4]
 8010c66:	4605      	mov	r5, r0
 8010c68:	b930      	cbnz	r0, 8010c78 <_calloc_r+0x24>
 8010c6a:	4628      	mov	r0, r5
 8010c6c:	b003      	add	sp, #12
 8010c6e:	bd30      	pop	{r4, r5, pc}
 8010c70:	220c      	movs	r2, #12
 8010c72:	6002      	str	r2, [r0, #0]
 8010c74:	2500      	movs	r5, #0
 8010c76:	e7f8      	b.n	8010c6a <_calloc_r+0x16>
 8010c78:	4621      	mov	r1, r4
 8010c7a:	f7fe f94f 	bl	800ef1c <memset>
 8010c7e:	e7f4      	b.n	8010c6a <_calloc_r+0x16>

08010c80 <_free_r>:
 8010c80:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010c82:	2900      	cmp	r1, #0
 8010c84:	d044      	beq.n	8010d10 <_free_r+0x90>
 8010c86:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010c8a:	9001      	str	r0, [sp, #4]
 8010c8c:	2b00      	cmp	r3, #0
 8010c8e:	f1a1 0404 	sub.w	r4, r1, #4
 8010c92:	bfb8      	it	lt
 8010c94:	18e4      	addlt	r4, r4, r3
 8010c96:	f000 fa9b 	bl	80111d0 <__malloc_lock>
 8010c9a:	4a1e      	ldr	r2, [pc, #120]	; (8010d14 <_free_r+0x94>)
 8010c9c:	9801      	ldr	r0, [sp, #4]
 8010c9e:	6813      	ldr	r3, [r2, #0]
 8010ca0:	b933      	cbnz	r3, 8010cb0 <_free_r+0x30>
 8010ca2:	6063      	str	r3, [r4, #4]
 8010ca4:	6014      	str	r4, [r2, #0]
 8010ca6:	b003      	add	sp, #12
 8010ca8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010cac:	f000 ba96 	b.w	80111dc <__malloc_unlock>
 8010cb0:	42a3      	cmp	r3, r4
 8010cb2:	d908      	bls.n	8010cc6 <_free_r+0x46>
 8010cb4:	6825      	ldr	r5, [r4, #0]
 8010cb6:	1961      	adds	r1, r4, r5
 8010cb8:	428b      	cmp	r3, r1
 8010cba:	bf01      	itttt	eq
 8010cbc:	6819      	ldreq	r1, [r3, #0]
 8010cbe:	685b      	ldreq	r3, [r3, #4]
 8010cc0:	1949      	addeq	r1, r1, r5
 8010cc2:	6021      	streq	r1, [r4, #0]
 8010cc4:	e7ed      	b.n	8010ca2 <_free_r+0x22>
 8010cc6:	461a      	mov	r2, r3
 8010cc8:	685b      	ldr	r3, [r3, #4]
 8010cca:	b10b      	cbz	r3, 8010cd0 <_free_r+0x50>
 8010ccc:	42a3      	cmp	r3, r4
 8010cce:	d9fa      	bls.n	8010cc6 <_free_r+0x46>
 8010cd0:	6811      	ldr	r1, [r2, #0]
 8010cd2:	1855      	adds	r5, r2, r1
 8010cd4:	42a5      	cmp	r5, r4
 8010cd6:	d10b      	bne.n	8010cf0 <_free_r+0x70>
 8010cd8:	6824      	ldr	r4, [r4, #0]
 8010cda:	4421      	add	r1, r4
 8010cdc:	1854      	adds	r4, r2, r1
 8010cde:	42a3      	cmp	r3, r4
 8010ce0:	6011      	str	r1, [r2, #0]
 8010ce2:	d1e0      	bne.n	8010ca6 <_free_r+0x26>
 8010ce4:	681c      	ldr	r4, [r3, #0]
 8010ce6:	685b      	ldr	r3, [r3, #4]
 8010ce8:	6053      	str	r3, [r2, #4]
 8010cea:	4421      	add	r1, r4
 8010cec:	6011      	str	r1, [r2, #0]
 8010cee:	e7da      	b.n	8010ca6 <_free_r+0x26>
 8010cf0:	d902      	bls.n	8010cf8 <_free_r+0x78>
 8010cf2:	230c      	movs	r3, #12
 8010cf4:	6003      	str	r3, [r0, #0]
 8010cf6:	e7d6      	b.n	8010ca6 <_free_r+0x26>
 8010cf8:	6825      	ldr	r5, [r4, #0]
 8010cfa:	1961      	adds	r1, r4, r5
 8010cfc:	428b      	cmp	r3, r1
 8010cfe:	bf04      	itt	eq
 8010d00:	6819      	ldreq	r1, [r3, #0]
 8010d02:	685b      	ldreq	r3, [r3, #4]
 8010d04:	6063      	str	r3, [r4, #4]
 8010d06:	bf04      	itt	eq
 8010d08:	1949      	addeq	r1, r1, r5
 8010d0a:	6021      	streq	r1, [r4, #0]
 8010d0c:	6054      	str	r4, [r2, #4]
 8010d0e:	e7ca      	b.n	8010ca6 <_free_r+0x26>
 8010d10:	b003      	add	sp, #12
 8010d12:	bd30      	pop	{r4, r5, pc}
 8010d14:	20006874 	.word	0x20006874

08010d18 <sbrk_aligned>:
 8010d18:	b570      	push	{r4, r5, r6, lr}
 8010d1a:	4e0e      	ldr	r6, [pc, #56]	; (8010d54 <sbrk_aligned+0x3c>)
 8010d1c:	460c      	mov	r4, r1
 8010d1e:	6831      	ldr	r1, [r6, #0]
 8010d20:	4605      	mov	r5, r0
 8010d22:	b911      	cbnz	r1, 8010d2a <sbrk_aligned+0x12>
 8010d24:	f000 f9e8 	bl	80110f8 <_sbrk_r>
 8010d28:	6030      	str	r0, [r6, #0]
 8010d2a:	4621      	mov	r1, r4
 8010d2c:	4628      	mov	r0, r5
 8010d2e:	f000 f9e3 	bl	80110f8 <_sbrk_r>
 8010d32:	1c43      	adds	r3, r0, #1
 8010d34:	d00a      	beq.n	8010d4c <sbrk_aligned+0x34>
 8010d36:	1cc4      	adds	r4, r0, #3
 8010d38:	f024 0403 	bic.w	r4, r4, #3
 8010d3c:	42a0      	cmp	r0, r4
 8010d3e:	d007      	beq.n	8010d50 <sbrk_aligned+0x38>
 8010d40:	1a21      	subs	r1, r4, r0
 8010d42:	4628      	mov	r0, r5
 8010d44:	f000 f9d8 	bl	80110f8 <_sbrk_r>
 8010d48:	3001      	adds	r0, #1
 8010d4a:	d101      	bne.n	8010d50 <sbrk_aligned+0x38>
 8010d4c:	f04f 34ff 	mov.w	r4, #4294967295
 8010d50:	4620      	mov	r0, r4
 8010d52:	bd70      	pop	{r4, r5, r6, pc}
 8010d54:	20006878 	.word	0x20006878

08010d58 <_malloc_r>:
 8010d58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010d5c:	1ccd      	adds	r5, r1, #3
 8010d5e:	f025 0503 	bic.w	r5, r5, #3
 8010d62:	3508      	adds	r5, #8
 8010d64:	2d0c      	cmp	r5, #12
 8010d66:	bf38      	it	cc
 8010d68:	250c      	movcc	r5, #12
 8010d6a:	2d00      	cmp	r5, #0
 8010d6c:	4607      	mov	r7, r0
 8010d6e:	db01      	blt.n	8010d74 <_malloc_r+0x1c>
 8010d70:	42a9      	cmp	r1, r5
 8010d72:	d905      	bls.n	8010d80 <_malloc_r+0x28>
 8010d74:	230c      	movs	r3, #12
 8010d76:	603b      	str	r3, [r7, #0]
 8010d78:	2600      	movs	r6, #0
 8010d7a:	4630      	mov	r0, r6
 8010d7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010d80:	4e2e      	ldr	r6, [pc, #184]	; (8010e3c <_malloc_r+0xe4>)
 8010d82:	f000 fa25 	bl	80111d0 <__malloc_lock>
 8010d86:	6833      	ldr	r3, [r6, #0]
 8010d88:	461c      	mov	r4, r3
 8010d8a:	bb34      	cbnz	r4, 8010dda <_malloc_r+0x82>
 8010d8c:	4629      	mov	r1, r5
 8010d8e:	4638      	mov	r0, r7
 8010d90:	f7ff ffc2 	bl	8010d18 <sbrk_aligned>
 8010d94:	1c43      	adds	r3, r0, #1
 8010d96:	4604      	mov	r4, r0
 8010d98:	d14d      	bne.n	8010e36 <_malloc_r+0xde>
 8010d9a:	6834      	ldr	r4, [r6, #0]
 8010d9c:	4626      	mov	r6, r4
 8010d9e:	2e00      	cmp	r6, #0
 8010da0:	d140      	bne.n	8010e24 <_malloc_r+0xcc>
 8010da2:	6823      	ldr	r3, [r4, #0]
 8010da4:	4631      	mov	r1, r6
 8010da6:	4638      	mov	r0, r7
 8010da8:	eb04 0803 	add.w	r8, r4, r3
 8010dac:	f000 f9a4 	bl	80110f8 <_sbrk_r>
 8010db0:	4580      	cmp	r8, r0
 8010db2:	d13a      	bne.n	8010e2a <_malloc_r+0xd2>
 8010db4:	6821      	ldr	r1, [r4, #0]
 8010db6:	3503      	adds	r5, #3
 8010db8:	1a6d      	subs	r5, r5, r1
 8010dba:	f025 0503 	bic.w	r5, r5, #3
 8010dbe:	3508      	adds	r5, #8
 8010dc0:	2d0c      	cmp	r5, #12
 8010dc2:	bf38      	it	cc
 8010dc4:	250c      	movcc	r5, #12
 8010dc6:	4629      	mov	r1, r5
 8010dc8:	4638      	mov	r0, r7
 8010dca:	f7ff ffa5 	bl	8010d18 <sbrk_aligned>
 8010dce:	3001      	adds	r0, #1
 8010dd0:	d02b      	beq.n	8010e2a <_malloc_r+0xd2>
 8010dd2:	6823      	ldr	r3, [r4, #0]
 8010dd4:	442b      	add	r3, r5
 8010dd6:	6023      	str	r3, [r4, #0]
 8010dd8:	e00e      	b.n	8010df8 <_malloc_r+0xa0>
 8010dda:	6822      	ldr	r2, [r4, #0]
 8010ddc:	1b52      	subs	r2, r2, r5
 8010dde:	d41e      	bmi.n	8010e1e <_malloc_r+0xc6>
 8010de0:	2a0b      	cmp	r2, #11
 8010de2:	d916      	bls.n	8010e12 <_malloc_r+0xba>
 8010de4:	1961      	adds	r1, r4, r5
 8010de6:	42a3      	cmp	r3, r4
 8010de8:	6025      	str	r5, [r4, #0]
 8010dea:	bf18      	it	ne
 8010dec:	6059      	strne	r1, [r3, #4]
 8010dee:	6863      	ldr	r3, [r4, #4]
 8010df0:	bf08      	it	eq
 8010df2:	6031      	streq	r1, [r6, #0]
 8010df4:	5162      	str	r2, [r4, r5]
 8010df6:	604b      	str	r3, [r1, #4]
 8010df8:	4638      	mov	r0, r7
 8010dfa:	f104 060b 	add.w	r6, r4, #11
 8010dfe:	f000 f9ed 	bl	80111dc <__malloc_unlock>
 8010e02:	f026 0607 	bic.w	r6, r6, #7
 8010e06:	1d23      	adds	r3, r4, #4
 8010e08:	1af2      	subs	r2, r6, r3
 8010e0a:	d0b6      	beq.n	8010d7a <_malloc_r+0x22>
 8010e0c:	1b9b      	subs	r3, r3, r6
 8010e0e:	50a3      	str	r3, [r4, r2]
 8010e10:	e7b3      	b.n	8010d7a <_malloc_r+0x22>
 8010e12:	6862      	ldr	r2, [r4, #4]
 8010e14:	42a3      	cmp	r3, r4
 8010e16:	bf0c      	ite	eq
 8010e18:	6032      	streq	r2, [r6, #0]
 8010e1a:	605a      	strne	r2, [r3, #4]
 8010e1c:	e7ec      	b.n	8010df8 <_malloc_r+0xa0>
 8010e1e:	4623      	mov	r3, r4
 8010e20:	6864      	ldr	r4, [r4, #4]
 8010e22:	e7b2      	b.n	8010d8a <_malloc_r+0x32>
 8010e24:	4634      	mov	r4, r6
 8010e26:	6876      	ldr	r6, [r6, #4]
 8010e28:	e7b9      	b.n	8010d9e <_malloc_r+0x46>
 8010e2a:	230c      	movs	r3, #12
 8010e2c:	603b      	str	r3, [r7, #0]
 8010e2e:	4638      	mov	r0, r7
 8010e30:	f000 f9d4 	bl	80111dc <__malloc_unlock>
 8010e34:	e7a1      	b.n	8010d7a <_malloc_r+0x22>
 8010e36:	6025      	str	r5, [r4, #0]
 8010e38:	e7de      	b.n	8010df8 <_malloc_r+0xa0>
 8010e3a:	bf00      	nop
 8010e3c:	20006874 	.word	0x20006874

08010e40 <__ssputs_r>:
 8010e40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010e44:	688e      	ldr	r6, [r1, #8]
 8010e46:	429e      	cmp	r6, r3
 8010e48:	4682      	mov	sl, r0
 8010e4a:	460c      	mov	r4, r1
 8010e4c:	4690      	mov	r8, r2
 8010e4e:	461f      	mov	r7, r3
 8010e50:	d838      	bhi.n	8010ec4 <__ssputs_r+0x84>
 8010e52:	898a      	ldrh	r2, [r1, #12]
 8010e54:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010e58:	d032      	beq.n	8010ec0 <__ssputs_r+0x80>
 8010e5a:	6825      	ldr	r5, [r4, #0]
 8010e5c:	6909      	ldr	r1, [r1, #16]
 8010e5e:	eba5 0901 	sub.w	r9, r5, r1
 8010e62:	6965      	ldr	r5, [r4, #20]
 8010e64:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010e68:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010e6c:	3301      	adds	r3, #1
 8010e6e:	444b      	add	r3, r9
 8010e70:	106d      	asrs	r5, r5, #1
 8010e72:	429d      	cmp	r5, r3
 8010e74:	bf38      	it	cc
 8010e76:	461d      	movcc	r5, r3
 8010e78:	0553      	lsls	r3, r2, #21
 8010e7a:	d531      	bpl.n	8010ee0 <__ssputs_r+0xa0>
 8010e7c:	4629      	mov	r1, r5
 8010e7e:	f7ff ff6b 	bl	8010d58 <_malloc_r>
 8010e82:	4606      	mov	r6, r0
 8010e84:	b950      	cbnz	r0, 8010e9c <__ssputs_r+0x5c>
 8010e86:	230c      	movs	r3, #12
 8010e88:	f8ca 3000 	str.w	r3, [sl]
 8010e8c:	89a3      	ldrh	r3, [r4, #12]
 8010e8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010e92:	81a3      	strh	r3, [r4, #12]
 8010e94:	f04f 30ff 	mov.w	r0, #4294967295
 8010e98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010e9c:	6921      	ldr	r1, [r4, #16]
 8010e9e:	464a      	mov	r2, r9
 8010ea0:	f7fe f82e 	bl	800ef00 <memcpy>
 8010ea4:	89a3      	ldrh	r3, [r4, #12]
 8010ea6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010eaa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010eae:	81a3      	strh	r3, [r4, #12]
 8010eb0:	6126      	str	r6, [r4, #16]
 8010eb2:	6165      	str	r5, [r4, #20]
 8010eb4:	444e      	add	r6, r9
 8010eb6:	eba5 0509 	sub.w	r5, r5, r9
 8010eba:	6026      	str	r6, [r4, #0]
 8010ebc:	60a5      	str	r5, [r4, #8]
 8010ebe:	463e      	mov	r6, r7
 8010ec0:	42be      	cmp	r6, r7
 8010ec2:	d900      	bls.n	8010ec6 <__ssputs_r+0x86>
 8010ec4:	463e      	mov	r6, r7
 8010ec6:	6820      	ldr	r0, [r4, #0]
 8010ec8:	4632      	mov	r2, r6
 8010eca:	4641      	mov	r1, r8
 8010ecc:	f000 f966 	bl	801119c <memmove>
 8010ed0:	68a3      	ldr	r3, [r4, #8]
 8010ed2:	1b9b      	subs	r3, r3, r6
 8010ed4:	60a3      	str	r3, [r4, #8]
 8010ed6:	6823      	ldr	r3, [r4, #0]
 8010ed8:	4433      	add	r3, r6
 8010eda:	6023      	str	r3, [r4, #0]
 8010edc:	2000      	movs	r0, #0
 8010ede:	e7db      	b.n	8010e98 <__ssputs_r+0x58>
 8010ee0:	462a      	mov	r2, r5
 8010ee2:	f000 f981 	bl	80111e8 <_realloc_r>
 8010ee6:	4606      	mov	r6, r0
 8010ee8:	2800      	cmp	r0, #0
 8010eea:	d1e1      	bne.n	8010eb0 <__ssputs_r+0x70>
 8010eec:	6921      	ldr	r1, [r4, #16]
 8010eee:	4650      	mov	r0, sl
 8010ef0:	f7ff fec6 	bl	8010c80 <_free_r>
 8010ef4:	e7c7      	b.n	8010e86 <__ssputs_r+0x46>
	...

08010ef8 <_svfiprintf_r>:
 8010ef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010efc:	4698      	mov	r8, r3
 8010efe:	898b      	ldrh	r3, [r1, #12]
 8010f00:	061b      	lsls	r3, r3, #24
 8010f02:	b09d      	sub	sp, #116	; 0x74
 8010f04:	4607      	mov	r7, r0
 8010f06:	460d      	mov	r5, r1
 8010f08:	4614      	mov	r4, r2
 8010f0a:	d50e      	bpl.n	8010f2a <_svfiprintf_r+0x32>
 8010f0c:	690b      	ldr	r3, [r1, #16]
 8010f0e:	b963      	cbnz	r3, 8010f2a <_svfiprintf_r+0x32>
 8010f10:	2140      	movs	r1, #64	; 0x40
 8010f12:	f7ff ff21 	bl	8010d58 <_malloc_r>
 8010f16:	6028      	str	r0, [r5, #0]
 8010f18:	6128      	str	r0, [r5, #16]
 8010f1a:	b920      	cbnz	r0, 8010f26 <_svfiprintf_r+0x2e>
 8010f1c:	230c      	movs	r3, #12
 8010f1e:	603b      	str	r3, [r7, #0]
 8010f20:	f04f 30ff 	mov.w	r0, #4294967295
 8010f24:	e0d1      	b.n	80110ca <_svfiprintf_r+0x1d2>
 8010f26:	2340      	movs	r3, #64	; 0x40
 8010f28:	616b      	str	r3, [r5, #20]
 8010f2a:	2300      	movs	r3, #0
 8010f2c:	9309      	str	r3, [sp, #36]	; 0x24
 8010f2e:	2320      	movs	r3, #32
 8010f30:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010f34:	f8cd 800c 	str.w	r8, [sp, #12]
 8010f38:	2330      	movs	r3, #48	; 0x30
 8010f3a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80110e4 <_svfiprintf_r+0x1ec>
 8010f3e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010f42:	f04f 0901 	mov.w	r9, #1
 8010f46:	4623      	mov	r3, r4
 8010f48:	469a      	mov	sl, r3
 8010f4a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010f4e:	b10a      	cbz	r2, 8010f54 <_svfiprintf_r+0x5c>
 8010f50:	2a25      	cmp	r2, #37	; 0x25
 8010f52:	d1f9      	bne.n	8010f48 <_svfiprintf_r+0x50>
 8010f54:	ebba 0b04 	subs.w	fp, sl, r4
 8010f58:	d00b      	beq.n	8010f72 <_svfiprintf_r+0x7a>
 8010f5a:	465b      	mov	r3, fp
 8010f5c:	4622      	mov	r2, r4
 8010f5e:	4629      	mov	r1, r5
 8010f60:	4638      	mov	r0, r7
 8010f62:	f7ff ff6d 	bl	8010e40 <__ssputs_r>
 8010f66:	3001      	adds	r0, #1
 8010f68:	f000 80aa 	beq.w	80110c0 <_svfiprintf_r+0x1c8>
 8010f6c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010f6e:	445a      	add	r2, fp
 8010f70:	9209      	str	r2, [sp, #36]	; 0x24
 8010f72:	f89a 3000 	ldrb.w	r3, [sl]
 8010f76:	2b00      	cmp	r3, #0
 8010f78:	f000 80a2 	beq.w	80110c0 <_svfiprintf_r+0x1c8>
 8010f7c:	2300      	movs	r3, #0
 8010f7e:	f04f 32ff 	mov.w	r2, #4294967295
 8010f82:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010f86:	f10a 0a01 	add.w	sl, sl, #1
 8010f8a:	9304      	str	r3, [sp, #16]
 8010f8c:	9307      	str	r3, [sp, #28]
 8010f8e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010f92:	931a      	str	r3, [sp, #104]	; 0x68
 8010f94:	4654      	mov	r4, sl
 8010f96:	2205      	movs	r2, #5
 8010f98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010f9c:	4851      	ldr	r0, [pc, #324]	; (80110e4 <_svfiprintf_r+0x1ec>)
 8010f9e:	f7ef f91f 	bl	80001e0 <memchr>
 8010fa2:	9a04      	ldr	r2, [sp, #16]
 8010fa4:	b9d8      	cbnz	r0, 8010fde <_svfiprintf_r+0xe6>
 8010fa6:	06d0      	lsls	r0, r2, #27
 8010fa8:	bf44      	itt	mi
 8010faa:	2320      	movmi	r3, #32
 8010fac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010fb0:	0711      	lsls	r1, r2, #28
 8010fb2:	bf44      	itt	mi
 8010fb4:	232b      	movmi	r3, #43	; 0x2b
 8010fb6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010fba:	f89a 3000 	ldrb.w	r3, [sl]
 8010fbe:	2b2a      	cmp	r3, #42	; 0x2a
 8010fc0:	d015      	beq.n	8010fee <_svfiprintf_r+0xf6>
 8010fc2:	9a07      	ldr	r2, [sp, #28]
 8010fc4:	4654      	mov	r4, sl
 8010fc6:	2000      	movs	r0, #0
 8010fc8:	f04f 0c0a 	mov.w	ip, #10
 8010fcc:	4621      	mov	r1, r4
 8010fce:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010fd2:	3b30      	subs	r3, #48	; 0x30
 8010fd4:	2b09      	cmp	r3, #9
 8010fd6:	d94e      	bls.n	8011076 <_svfiprintf_r+0x17e>
 8010fd8:	b1b0      	cbz	r0, 8011008 <_svfiprintf_r+0x110>
 8010fda:	9207      	str	r2, [sp, #28]
 8010fdc:	e014      	b.n	8011008 <_svfiprintf_r+0x110>
 8010fde:	eba0 0308 	sub.w	r3, r0, r8
 8010fe2:	fa09 f303 	lsl.w	r3, r9, r3
 8010fe6:	4313      	orrs	r3, r2
 8010fe8:	9304      	str	r3, [sp, #16]
 8010fea:	46a2      	mov	sl, r4
 8010fec:	e7d2      	b.n	8010f94 <_svfiprintf_r+0x9c>
 8010fee:	9b03      	ldr	r3, [sp, #12]
 8010ff0:	1d19      	adds	r1, r3, #4
 8010ff2:	681b      	ldr	r3, [r3, #0]
 8010ff4:	9103      	str	r1, [sp, #12]
 8010ff6:	2b00      	cmp	r3, #0
 8010ff8:	bfbb      	ittet	lt
 8010ffa:	425b      	neglt	r3, r3
 8010ffc:	f042 0202 	orrlt.w	r2, r2, #2
 8011000:	9307      	strge	r3, [sp, #28]
 8011002:	9307      	strlt	r3, [sp, #28]
 8011004:	bfb8      	it	lt
 8011006:	9204      	strlt	r2, [sp, #16]
 8011008:	7823      	ldrb	r3, [r4, #0]
 801100a:	2b2e      	cmp	r3, #46	; 0x2e
 801100c:	d10c      	bne.n	8011028 <_svfiprintf_r+0x130>
 801100e:	7863      	ldrb	r3, [r4, #1]
 8011010:	2b2a      	cmp	r3, #42	; 0x2a
 8011012:	d135      	bne.n	8011080 <_svfiprintf_r+0x188>
 8011014:	9b03      	ldr	r3, [sp, #12]
 8011016:	1d1a      	adds	r2, r3, #4
 8011018:	681b      	ldr	r3, [r3, #0]
 801101a:	9203      	str	r2, [sp, #12]
 801101c:	2b00      	cmp	r3, #0
 801101e:	bfb8      	it	lt
 8011020:	f04f 33ff 	movlt.w	r3, #4294967295
 8011024:	3402      	adds	r4, #2
 8011026:	9305      	str	r3, [sp, #20]
 8011028:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80110f4 <_svfiprintf_r+0x1fc>
 801102c:	7821      	ldrb	r1, [r4, #0]
 801102e:	2203      	movs	r2, #3
 8011030:	4650      	mov	r0, sl
 8011032:	f7ef f8d5 	bl	80001e0 <memchr>
 8011036:	b140      	cbz	r0, 801104a <_svfiprintf_r+0x152>
 8011038:	2340      	movs	r3, #64	; 0x40
 801103a:	eba0 000a 	sub.w	r0, r0, sl
 801103e:	fa03 f000 	lsl.w	r0, r3, r0
 8011042:	9b04      	ldr	r3, [sp, #16]
 8011044:	4303      	orrs	r3, r0
 8011046:	3401      	adds	r4, #1
 8011048:	9304      	str	r3, [sp, #16]
 801104a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801104e:	4826      	ldr	r0, [pc, #152]	; (80110e8 <_svfiprintf_r+0x1f0>)
 8011050:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011054:	2206      	movs	r2, #6
 8011056:	f7ef f8c3 	bl	80001e0 <memchr>
 801105a:	2800      	cmp	r0, #0
 801105c:	d038      	beq.n	80110d0 <_svfiprintf_r+0x1d8>
 801105e:	4b23      	ldr	r3, [pc, #140]	; (80110ec <_svfiprintf_r+0x1f4>)
 8011060:	bb1b      	cbnz	r3, 80110aa <_svfiprintf_r+0x1b2>
 8011062:	9b03      	ldr	r3, [sp, #12]
 8011064:	3307      	adds	r3, #7
 8011066:	f023 0307 	bic.w	r3, r3, #7
 801106a:	3308      	adds	r3, #8
 801106c:	9303      	str	r3, [sp, #12]
 801106e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011070:	4433      	add	r3, r6
 8011072:	9309      	str	r3, [sp, #36]	; 0x24
 8011074:	e767      	b.n	8010f46 <_svfiprintf_r+0x4e>
 8011076:	fb0c 3202 	mla	r2, ip, r2, r3
 801107a:	460c      	mov	r4, r1
 801107c:	2001      	movs	r0, #1
 801107e:	e7a5      	b.n	8010fcc <_svfiprintf_r+0xd4>
 8011080:	2300      	movs	r3, #0
 8011082:	3401      	adds	r4, #1
 8011084:	9305      	str	r3, [sp, #20]
 8011086:	4619      	mov	r1, r3
 8011088:	f04f 0c0a 	mov.w	ip, #10
 801108c:	4620      	mov	r0, r4
 801108e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011092:	3a30      	subs	r2, #48	; 0x30
 8011094:	2a09      	cmp	r2, #9
 8011096:	d903      	bls.n	80110a0 <_svfiprintf_r+0x1a8>
 8011098:	2b00      	cmp	r3, #0
 801109a:	d0c5      	beq.n	8011028 <_svfiprintf_r+0x130>
 801109c:	9105      	str	r1, [sp, #20]
 801109e:	e7c3      	b.n	8011028 <_svfiprintf_r+0x130>
 80110a0:	fb0c 2101 	mla	r1, ip, r1, r2
 80110a4:	4604      	mov	r4, r0
 80110a6:	2301      	movs	r3, #1
 80110a8:	e7f0      	b.n	801108c <_svfiprintf_r+0x194>
 80110aa:	ab03      	add	r3, sp, #12
 80110ac:	9300      	str	r3, [sp, #0]
 80110ae:	462a      	mov	r2, r5
 80110b0:	4b0f      	ldr	r3, [pc, #60]	; (80110f0 <_svfiprintf_r+0x1f8>)
 80110b2:	a904      	add	r1, sp, #16
 80110b4:	4638      	mov	r0, r7
 80110b6:	f7fd ffd9 	bl	800f06c <_printf_float>
 80110ba:	1c42      	adds	r2, r0, #1
 80110bc:	4606      	mov	r6, r0
 80110be:	d1d6      	bne.n	801106e <_svfiprintf_r+0x176>
 80110c0:	89ab      	ldrh	r3, [r5, #12]
 80110c2:	065b      	lsls	r3, r3, #25
 80110c4:	f53f af2c 	bmi.w	8010f20 <_svfiprintf_r+0x28>
 80110c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80110ca:	b01d      	add	sp, #116	; 0x74
 80110cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80110d0:	ab03      	add	r3, sp, #12
 80110d2:	9300      	str	r3, [sp, #0]
 80110d4:	462a      	mov	r2, r5
 80110d6:	4b06      	ldr	r3, [pc, #24]	; (80110f0 <_svfiprintf_r+0x1f8>)
 80110d8:	a904      	add	r1, sp, #16
 80110da:	4638      	mov	r0, r7
 80110dc:	f7fe fa6a 	bl	800f5b4 <_printf_i>
 80110e0:	e7eb      	b.n	80110ba <_svfiprintf_r+0x1c2>
 80110e2:	bf00      	nop
 80110e4:	0801464c 	.word	0x0801464c
 80110e8:	08014656 	.word	0x08014656
 80110ec:	0800f06d 	.word	0x0800f06d
 80110f0:	08010e41 	.word	0x08010e41
 80110f4:	08014652 	.word	0x08014652

080110f8 <_sbrk_r>:
 80110f8:	b538      	push	{r3, r4, r5, lr}
 80110fa:	4d06      	ldr	r5, [pc, #24]	; (8011114 <_sbrk_r+0x1c>)
 80110fc:	2300      	movs	r3, #0
 80110fe:	4604      	mov	r4, r0
 8011100:	4608      	mov	r0, r1
 8011102:	602b      	str	r3, [r5, #0]
 8011104:	f7f3 f8e6 	bl	80042d4 <_sbrk>
 8011108:	1c43      	adds	r3, r0, #1
 801110a:	d102      	bne.n	8011112 <_sbrk_r+0x1a>
 801110c:	682b      	ldr	r3, [r5, #0]
 801110e:	b103      	cbz	r3, 8011112 <_sbrk_r+0x1a>
 8011110:	6023      	str	r3, [r4, #0]
 8011112:	bd38      	pop	{r3, r4, r5, pc}
 8011114:	2000687c 	.word	0x2000687c

08011118 <__assert_func>:
 8011118:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801111a:	4614      	mov	r4, r2
 801111c:	461a      	mov	r2, r3
 801111e:	4b09      	ldr	r3, [pc, #36]	; (8011144 <__assert_func+0x2c>)
 8011120:	681b      	ldr	r3, [r3, #0]
 8011122:	4605      	mov	r5, r0
 8011124:	68d8      	ldr	r0, [r3, #12]
 8011126:	b14c      	cbz	r4, 801113c <__assert_func+0x24>
 8011128:	4b07      	ldr	r3, [pc, #28]	; (8011148 <__assert_func+0x30>)
 801112a:	9100      	str	r1, [sp, #0]
 801112c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011130:	4906      	ldr	r1, [pc, #24]	; (801114c <__assert_func+0x34>)
 8011132:	462b      	mov	r3, r5
 8011134:	f000 f80e 	bl	8011154 <fiprintf>
 8011138:	f000 faac 	bl	8011694 <abort>
 801113c:	4b04      	ldr	r3, [pc, #16]	; (8011150 <__assert_func+0x38>)
 801113e:	461c      	mov	r4, r3
 8011140:	e7f3      	b.n	801112a <__assert_func+0x12>
 8011142:	bf00      	nop
 8011144:	2000001c 	.word	0x2000001c
 8011148:	0801465d 	.word	0x0801465d
 801114c:	0801466a 	.word	0x0801466a
 8011150:	08014698 	.word	0x08014698

08011154 <fiprintf>:
 8011154:	b40e      	push	{r1, r2, r3}
 8011156:	b503      	push	{r0, r1, lr}
 8011158:	4601      	mov	r1, r0
 801115a:	ab03      	add	r3, sp, #12
 801115c:	4805      	ldr	r0, [pc, #20]	; (8011174 <fiprintf+0x20>)
 801115e:	f853 2b04 	ldr.w	r2, [r3], #4
 8011162:	6800      	ldr	r0, [r0, #0]
 8011164:	9301      	str	r3, [sp, #4]
 8011166:	f000 f897 	bl	8011298 <_vfiprintf_r>
 801116a:	b002      	add	sp, #8
 801116c:	f85d eb04 	ldr.w	lr, [sp], #4
 8011170:	b003      	add	sp, #12
 8011172:	4770      	bx	lr
 8011174:	2000001c 	.word	0x2000001c

08011178 <__ascii_mbtowc>:
 8011178:	b082      	sub	sp, #8
 801117a:	b901      	cbnz	r1, 801117e <__ascii_mbtowc+0x6>
 801117c:	a901      	add	r1, sp, #4
 801117e:	b142      	cbz	r2, 8011192 <__ascii_mbtowc+0x1a>
 8011180:	b14b      	cbz	r3, 8011196 <__ascii_mbtowc+0x1e>
 8011182:	7813      	ldrb	r3, [r2, #0]
 8011184:	600b      	str	r3, [r1, #0]
 8011186:	7812      	ldrb	r2, [r2, #0]
 8011188:	1e10      	subs	r0, r2, #0
 801118a:	bf18      	it	ne
 801118c:	2001      	movne	r0, #1
 801118e:	b002      	add	sp, #8
 8011190:	4770      	bx	lr
 8011192:	4610      	mov	r0, r2
 8011194:	e7fb      	b.n	801118e <__ascii_mbtowc+0x16>
 8011196:	f06f 0001 	mvn.w	r0, #1
 801119a:	e7f8      	b.n	801118e <__ascii_mbtowc+0x16>

0801119c <memmove>:
 801119c:	4288      	cmp	r0, r1
 801119e:	b510      	push	{r4, lr}
 80111a0:	eb01 0402 	add.w	r4, r1, r2
 80111a4:	d902      	bls.n	80111ac <memmove+0x10>
 80111a6:	4284      	cmp	r4, r0
 80111a8:	4623      	mov	r3, r4
 80111aa:	d807      	bhi.n	80111bc <memmove+0x20>
 80111ac:	1e43      	subs	r3, r0, #1
 80111ae:	42a1      	cmp	r1, r4
 80111b0:	d008      	beq.n	80111c4 <memmove+0x28>
 80111b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80111b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80111ba:	e7f8      	b.n	80111ae <memmove+0x12>
 80111bc:	4402      	add	r2, r0
 80111be:	4601      	mov	r1, r0
 80111c0:	428a      	cmp	r2, r1
 80111c2:	d100      	bne.n	80111c6 <memmove+0x2a>
 80111c4:	bd10      	pop	{r4, pc}
 80111c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80111ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80111ce:	e7f7      	b.n	80111c0 <memmove+0x24>

080111d0 <__malloc_lock>:
 80111d0:	4801      	ldr	r0, [pc, #4]	; (80111d8 <__malloc_lock+0x8>)
 80111d2:	f000 bc1f 	b.w	8011a14 <__retarget_lock_acquire_recursive>
 80111d6:	bf00      	nop
 80111d8:	20006880 	.word	0x20006880

080111dc <__malloc_unlock>:
 80111dc:	4801      	ldr	r0, [pc, #4]	; (80111e4 <__malloc_unlock+0x8>)
 80111de:	f000 bc1a 	b.w	8011a16 <__retarget_lock_release_recursive>
 80111e2:	bf00      	nop
 80111e4:	20006880 	.word	0x20006880

080111e8 <_realloc_r>:
 80111e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80111ec:	4680      	mov	r8, r0
 80111ee:	4614      	mov	r4, r2
 80111f0:	460e      	mov	r6, r1
 80111f2:	b921      	cbnz	r1, 80111fe <_realloc_r+0x16>
 80111f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80111f8:	4611      	mov	r1, r2
 80111fa:	f7ff bdad 	b.w	8010d58 <_malloc_r>
 80111fe:	b92a      	cbnz	r2, 801120c <_realloc_r+0x24>
 8011200:	f7ff fd3e 	bl	8010c80 <_free_r>
 8011204:	4625      	mov	r5, r4
 8011206:	4628      	mov	r0, r5
 8011208:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801120c:	f000 fc6a 	bl	8011ae4 <_malloc_usable_size_r>
 8011210:	4284      	cmp	r4, r0
 8011212:	4607      	mov	r7, r0
 8011214:	d802      	bhi.n	801121c <_realloc_r+0x34>
 8011216:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801121a:	d812      	bhi.n	8011242 <_realloc_r+0x5a>
 801121c:	4621      	mov	r1, r4
 801121e:	4640      	mov	r0, r8
 8011220:	f7ff fd9a 	bl	8010d58 <_malloc_r>
 8011224:	4605      	mov	r5, r0
 8011226:	2800      	cmp	r0, #0
 8011228:	d0ed      	beq.n	8011206 <_realloc_r+0x1e>
 801122a:	42bc      	cmp	r4, r7
 801122c:	4622      	mov	r2, r4
 801122e:	4631      	mov	r1, r6
 8011230:	bf28      	it	cs
 8011232:	463a      	movcs	r2, r7
 8011234:	f7fd fe64 	bl	800ef00 <memcpy>
 8011238:	4631      	mov	r1, r6
 801123a:	4640      	mov	r0, r8
 801123c:	f7ff fd20 	bl	8010c80 <_free_r>
 8011240:	e7e1      	b.n	8011206 <_realloc_r+0x1e>
 8011242:	4635      	mov	r5, r6
 8011244:	e7df      	b.n	8011206 <_realloc_r+0x1e>

08011246 <__sfputc_r>:
 8011246:	6893      	ldr	r3, [r2, #8]
 8011248:	3b01      	subs	r3, #1
 801124a:	2b00      	cmp	r3, #0
 801124c:	b410      	push	{r4}
 801124e:	6093      	str	r3, [r2, #8]
 8011250:	da08      	bge.n	8011264 <__sfputc_r+0x1e>
 8011252:	6994      	ldr	r4, [r2, #24]
 8011254:	42a3      	cmp	r3, r4
 8011256:	db01      	blt.n	801125c <__sfputc_r+0x16>
 8011258:	290a      	cmp	r1, #10
 801125a:	d103      	bne.n	8011264 <__sfputc_r+0x1e>
 801125c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011260:	f000 b94a 	b.w	80114f8 <__swbuf_r>
 8011264:	6813      	ldr	r3, [r2, #0]
 8011266:	1c58      	adds	r0, r3, #1
 8011268:	6010      	str	r0, [r2, #0]
 801126a:	7019      	strb	r1, [r3, #0]
 801126c:	4608      	mov	r0, r1
 801126e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011272:	4770      	bx	lr

08011274 <__sfputs_r>:
 8011274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011276:	4606      	mov	r6, r0
 8011278:	460f      	mov	r7, r1
 801127a:	4614      	mov	r4, r2
 801127c:	18d5      	adds	r5, r2, r3
 801127e:	42ac      	cmp	r4, r5
 8011280:	d101      	bne.n	8011286 <__sfputs_r+0x12>
 8011282:	2000      	movs	r0, #0
 8011284:	e007      	b.n	8011296 <__sfputs_r+0x22>
 8011286:	f814 1b01 	ldrb.w	r1, [r4], #1
 801128a:	463a      	mov	r2, r7
 801128c:	4630      	mov	r0, r6
 801128e:	f7ff ffda 	bl	8011246 <__sfputc_r>
 8011292:	1c43      	adds	r3, r0, #1
 8011294:	d1f3      	bne.n	801127e <__sfputs_r+0xa>
 8011296:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08011298 <_vfiprintf_r>:
 8011298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801129c:	460d      	mov	r5, r1
 801129e:	b09d      	sub	sp, #116	; 0x74
 80112a0:	4614      	mov	r4, r2
 80112a2:	4698      	mov	r8, r3
 80112a4:	4606      	mov	r6, r0
 80112a6:	b118      	cbz	r0, 80112b0 <_vfiprintf_r+0x18>
 80112a8:	6983      	ldr	r3, [r0, #24]
 80112aa:	b90b      	cbnz	r3, 80112b0 <_vfiprintf_r+0x18>
 80112ac:	f000 fb14 	bl	80118d8 <__sinit>
 80112b0:	4b89      	ldr	r3, [pc, #548]	; (80114d8 <_vfiprintf_r+0x240>)
 80112b2:	429d      	cmp	r5, r3
 80112b4:	d11b      	bne.n	80112ee <_vfiprintf_r+0x56>
 80112b6:	6875      	ldr	r5, [r6, #4]
 80112b8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80112ba:	07d9      	lsls	r1, r3, #31
 80112bc:	d405      	bmi.n	80112ca <_vfiprintf_r+0x32>
 80112be:	89ab      	ldrh	r3, [r5, #12]
 80112c0:	059a      	lsls	r2, r3, #22
 80112c2:	d402      	bmi.n	80112ca <_vfiprintf_r+0x32>
 80112c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80112c6:	f000 fba5 	bl	8011a14 <__retarget_lock_acquire_recursive>
 80112ca:	89ab      	ldrh	r3, [r5, #12]
 80112cc:	071b      	lsls	r3, r3, #28
 80112ce:	d501      	bpl.n	80112d4 <_vfiprintf_r+0x3c>
 80112d0:	692b      	ldr	r3, [r5, #16]
 80112d2:	b9eb      	cbnz	r3, 8011310 <_vfiprintf_r+0x78>
 80112d4:	4629      	mov	r1, r5
 80112d6:	4630      	mov	r0, r6
 80112d8:	f000 f96e 	bl	80115b8 <__swsetup_r>
 80112dc:	b1c0      	cbz	r0, 8011310 <_vfiprintf_r+0x78>
 80112de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80112e0:	07dc      	lsls	r4, r3, #31
 80112e2:	d50e      	bpl.n	8011302 <_vfiprintf_r+0x6a>
 80112e4:	f04f 30ff 	mov.w	r0, #4294967295
 80112e8:	b01d      	add	sp, #116	; 0x74
 80112ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80112ee:	4b7b      	ldr	r3, [pc, #492]	; (80114dc <_vfiprintf_r+0x244>)
 80112f0:	429d      	cmp	r5, r3
 80112f2:	d101      	bne.n	80112f8 <_vfiprintf_r+0x60>
 80112f4:	68b5      	ldr	r5, [r6, #8]
 80112f6:	e7df      	b.n	80112b8 <_vfiprintf_r+0x20>
 80112f8:	4b79      	ldr	r3, [pc, #484]	; (80114e0 <_vfiprintf_r+0x248>)
 80112fa:	429d      	cmp	r5, r3
 80112fc:	bf08      	it	eq
 80112fe:	68f5      	ldreq	r5, [r6, #12]
 8011300:	e7da      	b.n	80112b8 <_vfiprintf_r+0x20>
 8011302:	89ab      	ldrh	r3, [r5, #12]
 8011304:	0598      	lsls	r0, r3, #22
 8011306:	d4ed      	bmi.n	80112e4 <_vfiprintf_r+0x4c>
 8011308:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801130a:	f000 fb84 	bl	8011a16 <__retarget_lock_release_recursive>
 801130e:	e7e9      	b.n	80112e4 <_vfiprintf_r+0x4c>
 8011310:	2300      	movs	r3, #0
 8011312:	9309      	str	r3, [sp, #36]	; 0x24
 8011314:	2320      	movs	r3, #32
 8011316:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801131a:	f8cd 800c 	str.w	r8, [sp, #12]
 801131e:	2330      	movs	r3, #48	; 0x30
 8011320:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80114e4 <_vfiprintf_r+0x24c>
 8011324:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011328:	f04f 0901 	mov.w	r9, #1
 801132c:	4623      	mov	r3, r4
 801132e:	469a      	mov	sl, r3
 8011330:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011334:	b10a      	cbz	r2, 801133a <_vfiprintf_r+0xa2>
 8011336:	2a25      	cmp	r2, #37	; 0x25
 8011338:	d1f9      	bne.n	801132e <_vfiprintf_r+0x96>
 801133a:	ebba 0b04 	subs.w	fp, sl, r4
 801133e:	d00b      	beq.n	8011358 <_vfiprintf_r+0xc0>
 8011340:	465b      	mov	r3, fp
 8011342:	4622      	mov	r2, r4
 8011344:	4629      	mov	r1, r5
 8011346:	4630      	mov	r0, r6
 8011348:	f7ff ff94 	bl	8011274 <__sfputs_r>
 801134c:	3001      	adds	r0, #1
 801134e:	f000 80aa 	beq.w	80114a6 <_vfiprintf_r+0x20e>
 8011352:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011354:	445a      	add	r2, fp
 8011356:	9209      	str	r2, [sp, #36]	; 0x24
 8011358:	f89a 3000 	ldrb.w	r3, [sl]
 801135c:	2b00      	cmp	r3, #0
 801135e:	f000 80a2 	beq.w	80114a6 <_vfiprintf_r+0x20e>
 8011362:	2300      	movs	r3, #0
 8011364:	f04f 32ff 	mov.w	r2, #4294967295
 8011368:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801136c:	f10a 0a01 	add.w	sl, sl, #1
 8011370:	9304      	str	r3, [sp, #16]
 8011372:	9307      	str	r3, [sp, #28]
 8011374:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011378:	931a      	str	r3, [sp, #104]	; 0x68
 801137a:	4654      	mov	r4, sl
 801137c:	2205      	movs	r2, #5
 801137e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011382:	4858      	ldr	r0, [pc, #352]	; (80114e4 <_vfiprintf_r+0x24c>)
 8011384:	f7ee ff2c 	bl	80001e0 <memchr>
 8011388:	9a04      	ldr	r2, [sp, #16]
 801138a:	b9d8      	cbnz	r0, 80113c4 <_vfiprintf_r+0x12c>
 801138c:	06d1      	lsls	r1, r2, #27
 801138e:	bf44      	itt	mi
 8011390:	2320      	movmi	r3, #32
 8011392:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011396:	0713      	lsls	r3, r2, #28
 8011398:	bf44      	itt	mi
 801139a:	232b      	movmi	r3, #43	; 0x2b
 801139c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80113a0:	f89a 3000 	ldrb.w	r3, [sl]
 80113a4:	2b2a      	cmp	r3, #42	; 0x2a
 80113a6:	d015      	beq.n	80113d4 <_vfiprintf_r+0x13c>
 80113a8:	9a07      	ldr	r2, [sp, #28]
 80113aa:	4654      	mov	r4, sl
 80113ac:	2000      	movs	r0, #0
 80113ae:	f04f 0c0a 	mov.w	ip, #10
 80113b2:	4621      	mov	r1, r4
 80113b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80113b8:	3b30      	subs	r3, #48	; 0x30
 80113ba:	2b09      	cmp	r3, #9
 80113bc:	d94e      	bls.n	801145c <_vfiprintf_r+0x1c4>
 80113be:	b1b0      	cbz	r0, 80113ee <_vfiprintf_r+0x156>
 80113c0:	9207      	str	r2, [sp, #28]
 80113c2:	e014      	b.n	80113ee <_vfiprintf_r+0x156>
 80113c4:	eba0 0308 	sub.w	r3, r0, r8
 80113c8:	fa09 f303 	lsl.w	r3, r9, r3
 80113cc:	4313      	orrs	r3, r2
 80113ce:	9304      	str	r3, [sp, #16]
 80113d0:	46a2      	mov	sl, r4
 80113d2:	e7d2      	b.n	801137a <_vfiprintf_r+0xe2>
 80113d4:	9b03      	ldr	r3, [sp, #12]
 80113d6:	1d19      	adds	r1, r3, #4
 80113d8:	681b      	ldr	r3, [r3, #0]
 80113da:	9103      	str	r1, [sp, #12]
 80113dc:	2b00      	cmp	r3, #0
 80113de:	bfbb      	ittet	lt
 80113e0:	425b      	neglt	r3, r3
 80113e2:	f042 0202 	orrlt.w	r2, r2, #2
 80113e6:	9307      	strge	r3, [sp, #28]
 80113e8:	9307      	strlt	r3, [sp, #28]
 80113ea:	bfb8      	it	lt
 80113ec:	9204      	strlt	r2, [sp, #16]
 80113ee:	7823      	ldrb	r3, [r4, #0]
 80113f0:	2b2e      	cmp	r3, #46	; 0x2e
 80113f2:	d10c      	bne.n	801140e <_vfiprintf_r+0x176>
 80113f4:	7863      	ldrb	r3, [r4, #1]
 80113f6:	2b2a      	cmp	r3, #42	; 0x2a
 80113f8:	d135      	bne.n	8011466 <_vfiprintf_r+0x1ce>
 80113fa:	9b03      	ldr	r3, [sp, #12]
 80113fc:	1d1a      	adds	r2, r3, #4
 80113fe:	681b      	ldr	r3, [r3, #0]
 8011400:	9203      	str	r2, [sp, #12]
 8011402:	2b00      	cmp	r3, #0
 8011404:	bfb8      	it	lt
 8011406:	f04f 33ff 	movlt.w	r3, #4294967295
 801140a:	3402      	adds	r4, #2
 801140c:	9305      	str	r3, [sp, #20]
 801140e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80114f4 <_vfiprintf_r+0x25c>
 8011412:	7821      	ldrb	r1, [r4, #0]
 8011414:	2203      	movs	r2, #3
 8011416:	4650      	mov	r0, sl
 8011418:	f7ee fee2 	bl	80001e0 <memchr>
 801141c:	b140      	cbz	r0, 8011430 <_vfiprintf_r+0x198>
 801141e:	2340      	movs	r3, #64	; 0x40
 8011420:	eba0 000a 	sub.w	r0, r0, sl
 8011424:	fa03 f000 	lsl.w	r0, r3, r0
 8011428:	9b04      	ldr	r3, [sp, #16]
 801142a:	4303      	orrs	r3, r0
 801142c:	3401      	adds	r4, #1
 801142e:	9304      	str	r3, [sp, #16]
 8011430:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011434:	482c      	ldr	r0, [pc, #176]	; (80114e8 <_vfiprintf_r+0x250>)
 8011436:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801143a:	2206      	movs	r2, #6
 801143c:	f7ee fed0 	bl	80001e0 <memchr>
 8011440:	2800      	cmp	r0, #0
 8011442:	d03f      	beq.n	80114c4 <_vfiprintf_r+0x22c>
 8011444:	4b29      	ldr	r3, [pc, #164]	; (80114ec <_vfiprintf_r+0x254>)
 8011446:	bb1b      	cbnz	r3, 8011490 <_vfiprintf_r+0x1f8>
 8011448:	9b03      	ldr	r3, [sp, #12]
 801144a:	3307      	adds	r3, #7
 801144c:	f023 0307 	bic.w	r3, r3, #7
 8011450:	3308      	adds	r3, #8
 8011452:	9303      	str	r3, [sp, #12]
 8011454:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011456:	443b      	add	r3, r7
 8011458:	9309      	str	r3, [sp, #36]	; 0x24
 801145a:	e767      	b.n	801132c <_vfiprintf_r+0x94>
 801145c:	fb0c 3202 	mla	r2, ip, r2, r3
 8011460:	460c      	mov	r4, r1
 8011462:	2001      	movs	r0, #1
 8011464:	e7a5      	b.n	80113b2 <_vfiprintf_r+0x11a>
 8011466:	2300      	movs	r3, #0
 8011468:	3401      	adds	r4, #1
 801146a:	9305      	str	r3, [sp, #20]
 801146c:	4619      	mov	r1, r3
 801146e:	f04f 0c0a 	mov.w	ip, #10
 8011472:	4620      	mov	r0, r4
 8011474:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011478:	3a30      	subs	r2, #48	; 0x30
 801147a:	2a09      	cmp	r2, #9
 801147c:	d903      	bls.n	8011486 <_vfiprintf_r+0x1ee>
 801147e:	2b00      	cmp	r3, #0
 8011480:	d0c5      	beq.n	801140e <_vfiprintf_r+0x176>
 8011482:	9105      	str	r1, [sp, #20]
 8011484:	e7c3      	b.n	801140e <_vfiprintf_r+0x176>
 8011486:	fb0c 2101 	mla	r1, ip, r1, r2
 801148a:	4604      	mov	r4, r0
 801148c:	2301      	movs	r3, #1
 801148e:	e7f0      	b.n	8011472 <_vfiprintf_r+0x1da>
 8011490:	ab03      	add	r3, sp, #12
 8011492:	9300      	str	r3, [sp, #0]
 8011494:	462a      	mov	r2, r5
 8011496:	4b16      	ldr	r3, [pc, #88]	; (80114f0 <_vfiprintf_r+0x258>)
 8011498:	a904      	add	r1, sp, #16
 801149a:	4630      	mov	r0, r6
 801149c:	f7fd fde6 	bl	800f06c <_printf_float>
 80114a0:	4607      	mov	r7, r0
 80114a2:	1c78      	adds	r0, r7, #1
 80114a4:	d1d6      	bne.n	8011454 <_vfiprintf_r+0x1bc>
 80114a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80114a8:	07d9      	lsls	r1, r3, #31
 80114aa:	d405      	bmi.n	80114b8 <_vfiprintf_r+0x220>
 80114ac:	89ab      	ldrh	r3, [r5, #12]
 80114ae:	059a      	lsls	r2, r3, #22
 80114b0:	d402      	bmi.n	80114b8 <_vfiprintf_r+0x220>
 80114b2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80114b4:	f000 faaf 	bl	8011a16 <__retarget_lock_release_recursive>
 80114b8:	89ab      	ldrh	r3, [r5, #12]
 80114ba:	065b      	lsls	r3, r3, #25
 80114bc:	f53f af12 	bmi.w	80112e4 <_vfiprintf_r+0x4c>
 80114c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80114c2:	e711      	b.n	80112e8 <_vfiprintf_r+0x50>
 80114c4:	ab03      	add	r3, sp, #12
 80114c6:	9300      	str	r3, [sp, #0]
 80114c8:	462a      	mov	r2, r5
 80114ca:	4b09      	ldr	r3, [pc, #36]	; (80114f0 <_vfiprintf_r+0x258>)
 80114cc:	a904      	add	r1, sp, #16
 80114ce:	4630      	mov	r0, r6
 80114d0:	f7fe f870 	bl	800f5b4 <_printf_i>
 80114d4:	e7e4      	b.n	80114a0 <_vfiprintf_r+0x208>
 80114d6:	bf00      	nop
 80114d8:	080147c4 	.word	0x080147c4
 80114dc:	080147e4 	.word	0x080147e4
 80114e0:	080147a4 	.word	0x080147a4
 80114e4:	0801464c 	.word	0x0801464c
 80114e8:	08014656 	.word	0x08014656
 80114ec:	0800f06d 	.word	0x0800f06d
 80114f0:	08011275 	.word	0x08011275
 80114f4:	08014652 	.word	0x08014652

080114f8 <__swbuf_r>:
 80114f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80114fa:	460e      	mov	r6, r1
 80114fc:	4614      	mov	r4, r2
 80114fe:	4605      	mov	r5, r0
 8011500:	b118      	cbz	r0, 801150a <__swbuf_r+0x12>
 8011502:	6983      	ldr	r3, [r0, #24]
 8011504:	b90b      	cbnz	r3, 801150a <__swbuf_r+0x12>
 8011506:	f000 f9e7 	bl	80118d8 <__sinit>
 801150a:	4b21      	ldr	r3, [pc, #132]	; (8011590 <__swbuf_r+0x98>)
 801150c:	429c      	cmp	r4, r3
 801150e:	d12b      	bne.n	8011568 <__swbuf_r+0x70>
 8011510:	686c      	ldr	r4, [r5, #4]
 8011512:	69a3      	ldr	r3, [r4, #24]
 8011514:	60a3      	str	r3, [r4, #8]
 8011516:	89a3      	ldrh	r3, [r4, #12]
 8011518:	071a      	lsls	r2, r3, #28
 801151a:	d52f      	bpl.n	801157c <__swbuf_r+0x84>
 801151c:	6923      	ldr	r3, [r4, #16]
 801151e:	b36b      	cbz	r3, 801157c <__swbuf_r+0x84>
 8011520:	6923      	ldr	r3, [r4, #16]
 8011522:	6820      	ldr	r0, [r4, #0]
 8011524:	1ac0      	subs	r0, r0, r3
 8011526:	6963      	ldr	r3, [r4, #20]
 8011528:	b2f6      	uxtb	r6, r6
 801152a:	4283      	cmp	r3, r0
 801152c:	4637      	mov	r7, r6
 801152e:	dc04      	bgt.n	801153a <__swbuf_r+0x42>
 8011530:	4621      	mov	r1, r4
 8011532:	4628      	mov	r0, r5
 8011534:	f000 f93c 	bl	80117b0 <_fflush_r>
 8011538:	bb30      	cbnz	r0, 8011588 <__swbuf_r+0x90>
 801153a:	68a3      	ldr	r3, [r4, #8]
 801153c:	3b01      	subs	r3, #1
 801153e:	60a3      	str	r3, [r4, #8]
 8011540:	6823      	ldr	r3, [r4, #0]
 8011542:	1c5a      	adds	r2, r3, #1
 8011544:	6022      	str	r2, [r4, #0]
 8011546:	701e      	strb	r6, [r3, #0]
 8011548:	6963      	ldr	r3, [r4, #20]
 801154a:	3001      	adds	r0, #1
 801154c:	4283      	cmp	r3, r0
 801154e:	d004      	beq.n	801155a <__swbuf_r+0x62>
 8011550:	89a3      	ldrh	r3, [r4, #12]
 8011552:	07db      	lsls	r3, r3, #31
 8011554:	d506      	bpl.n	8011564 <__swbuf_r+0x6c>
 8011556:	2e0a      	cmp	r6, #10
 8011558:	d104      	bne.n	8011564 <__swbuf_r+0x6c>
 801155a:	4621      	mov	r1, r4
 801155c:	4628      	mov	r0, r5
 801155e:	f000 f927 	bl	80117b0 <_fflush_r>
 8011562:	b988      	cbnz	r0, 8011588 <__swbuf_r+0x90>
 8011564:	4638      	mov	r0, r7
 8011566:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011568:	4b0a      	ldr	r3, [pc, #40]	; (8011594 <__swbuf_r+0x9c>)
 801156a:	429c      	cmp	r4, r3
 801156c:	d101      	bne.n	8011572 <__swbuf_r+0x7a>
 801156e:	68ac      	ldr	r4, [r5, #8]
 8011570:	e7cf      	b.n	8011512 <__swbuf_r+0x1a>
 8011572:	4b09      	ldr	r3, [pc, #36]	; (8011598 <__swbuf_r+0xa0>)
 8011574:	429c      	cmp	r4, r3
 8011576:	bf08      	it	eq
 8011578:	68ec      	ldreq	r4, [r5, #12]
 801157a:	e7ca      	b.n	8011512 <__swbuf_r+0x1a>
 801157c:	4621      	mov	r1, r4
 801157e:	4628      	mov	r0, r5
 8011580:	f000 f81a 	bl	80115b8 <__swsetup_r>
 8011584:	2800      	cmp	r0, #0
 8011586:	d0cb      	beq.n	8011520 <__swbuf_r+0x28>
 8011588:	f04f 37ff 	mov.w	r7, #4294967295
 801158c:	e7ea      	b.n	8011564 <__swbuf_r+0x6c>
 801158e:	bf00      	nop
 8011590:	080147c4 	.word	0x080147c4
 8011594:	080147e4 	.word	0x080147e4
 8011598:	080147a4 	.word	0x080147a4

0801159c <__ascii_wctomb>:
 801159c:	b149      	cbz	r1, 80115b2 <__ascii_wctomb+0x16>
 801159e:	2aff      	cmp	r2, #255	; 0xff
 80115a0:	bf85      	ittet	hi
 80115a2:	238a      	movhi	r3, #138	; 0x8a
 80115a4:	6003      	strhi	r3, [r0, #0]
 80115a6:	700a      	strbls	r2, [r1, #0]
 80115a8:	f04f 30ff 	movhi.w	r0, #4294967295
 80115ac:	bf98      	it	ls
 80115ae:	2001      	movls	r0, #1
 80115b0:	4770      	bx	lr
 80115b2:	4608      	mov	r0, r1
 80115b4:	4770      	bx	lr
	...

080115b8 <__swsetup_r>:
 80115b8:	4b32      	ldr	r3, [pc, #200]	; (8011684 <__swsetup_r+0xcc>)
 80115ba:	b570      	push	{r4, r5, r6, lr}
 80115bc:	681d      	ldr	r5, [r3, #0]
 80115be:	4606      	mov	r6, r0
 80115c0:	460c      	mov	r4, r1
 80115c2:	b125      	cbz	r5, 80115ce <__swsetup_r+0x16>
 80115c4:	69ab      	ldr	r3, [r5, #24]
 80115c6:	b913      	cbnz	r3, 80115ce <__swsetup_r+0x16>
 80115c8:	4628      	mov	r0, r5
 80115ca:	f000 f985 	bl	80118d8 <__sinit>
 80115ce:	4b2e      	ldr	r3, [pc, #184]	; (8011688 <__swsetup_r+0xd0>)
 80115d0:	429c      	cmp	r4, r3
 80115d2:	d10f      	bne.n	80115f4 <__swsetup_r+0x3c>
 80115d4:	686c      	ldr	r4, [r5, #4]
 80115d6:	89a3      	ldrh	r3, [r4, #12]
 80115d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80115dc:	0719      	lsls	r1, r3, #28
 80115de:	d42c      	bmi.n	801163a <__swsetup_r+0x82>
 80115e0:	06dd      	lsls	r5, r3, #27
 80115e2:	d411      	bmi.n	8011608 <__swsetup_r+0x50>
 80115e4:	2309      	movs	r3, #9
 80115e6:	6033      	str	r3, [r6, #0]
 80115e8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80115ec:	81a3      	strh	r3, [r4, #12]
 80115ee:	f04f 30ff 	mov.w	r0, #4294967295
 80115f2:	e03e      	b.n	8011672 <__swsetup_r+0xba>
 80115f4:	4b25      	ldr	r3, [pc, #148]	; (801168c <__swsetup_r+0xd4>)
 80115f6:	429c      	cmp	r4, r3
 80115f8:	d101      	bne.n	80115fe <__swsetup_r+0x46>
 80115fa:	68ac      	ldr	r4, [r5, #8]
 80115fc:	e7eb      	b.n	80115d6 <__swsetup_r+0x1e>
 80115fe:	4b24      	ldr	r3, [pc, #144]	; (8011690 <__swsetup_r+0xd8>)
 8011600:	429c      	cmp	r4, r3
 8011602:	bf08      	it	eq
 8011604:	68ec      	ldreq	r4, [r5, #12]
 8011606:	e7e6      	b.n	80115d6 <__swsetup_r+0x1e>
 8011608:	0758      	lsls	r0, r3, #29
 801160a:	d512      	bpl.n	8011632 <__swsetup_r+0x7a>
 801160c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801160e:	b141      	cbz	r1, 8011622 <__swsetup_r+0x6a>
 8011610:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011614:	4299      	cmp	r1, r3
 8011616:	d002      	beq.n	801161e <__swsetup_r+0x66>
 8011618:	4630      	mov	r0, r6
 801161a:	f7ff fb31 	bl	8010c80 <_free_r>
 801161e:	2300      	movs	r3, #0
 8011620:	6363      	str	r3, [r4, #52]	; 0x34
 8011622:	89a3      	ldrh	r3, [r4, #12]
 8011624:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011628:	81a3      	strh	r3, [r4, #12]
 801162a:	2300      	movs	r3, #0
 801162c:	6063      	str	r3, [r4, #4]
 801162e:	6923      	ldr	r3, [r4, #16]
 8011630:	6023      	str	r3, [r4, #0]
 8011632:	89a3      	ldrh	r3, [r4, #12]
 8011634:	f043 0308 	orr.w	r3, r3, #8
 8011638:	81a3      	strh	r3, [r4, #12]
 801163a:	6923      	ldr	r3, [r4, #16]
 801163c:	b94b      	cbnz	r3, 8011652 <__swsetup_r+0x9a>
 801163e:	89a3      	ldrh	r3, [r4, #12]
 8011640:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011644:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011648:	d003      	beq.n	8011652 <__swsetup_r+0x9a>
 801164a:	4621      	mov	r1, r4
 801164c:	4630      	mov	r0, r6
 801164e:	f000 fa09 	bl	8011a64 <__smakebuf_r>
 8011652:	89a0      	ldrh	r0, [r4, #12]
 8011654:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011658:	f010 0301 	ands.w	r3, r0, #1
 801165c:	d00a      	beq.n	8011674 <__swsetup_r+0xbc>
 801165e:	2300      	movs	r3, #0
 8011660:	60a3      	str	r3, [r4, #8]
 8011662:	6963      	ldr	r3, [r4, #20]
 8011664:	425b      	negs	r3, r3
 8011666:	61a3      	str	r3, [r4, #24]
 8011668:	6923      	ldr	r3, [r4, #16]
 801166a:	b943      	cbnz	r3, 801167e <__swsetup_r+0xc6>
 801166c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8011670:	d1ba      	bne.n	80115e8 <__swsetup_r+0x30>
 8011672:	bd70      	pop	{r4, r5, r6, pc}
 8011674:	0781      	lsls	r1, r0, #30
 8011676:	bf58      	it	pl
 8011678:	6963      	ldrpl	r3, [r4, #20]
 801167a:	60a3      	str	r3, [r4, #8]
 801167c:	e7f4      	b.n	8011668 <__swsetup_r+0xb0>
 801167e:	2000      	movs	r0, #0
 8011680:	e7f7      	b.n	8011672 <__swsetup_r+0xba>
 8011682:	bf00      	nop
 8011684:	2000001c 	.word	0x2000001c
 8011688:	080147c4 	.word	0x080147c4
 801168c:	080147e4 	.word	0x080147e4
 8011690:	080147a4 	.word	0x080147a4

08011694 <abort>:
 8011694:	b508      	push	{r3, lr}
 8011696:	2006      	movs	r0, #6
 8011698:	f000 fa54 	bl	8011b44 <raise>
 801169c:	2001      	movs	r0, #1
 801169e:	f7f2 fda1 	bl	80041e4 <_exit>
	...

080116a4 <__sflush_r>:
 80116a4:	898a      	ldrh	r2, [r1, #12]
 80116a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80116aa:	4605      	mov	r5, r0
 80116ac:	0710      	lsls	r0, r2, #28
 80116ae:	460c      	mov	r4, r1
 80116b0:	d458      	bmi.n	8011764 <__sflush_r+0xc0>
 80116b2:	684b      	ldr	r3, [r1, #4]
 80116b4:	2b00      	cmp	r3, #0
 80116b6:	dc05      	bgt.n	80116c4 <__sflush_r+0x20>
 80116b8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80116ba:	2b00      	cmp	r3, #0
 80116bc:	dc02      	bgt.n	80116c4 <__sflush_r+0x20>
 80116be:	2000      	movs	r0, #0
 80116c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80116c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80116c6:	2e00      	cmp	r6, #0
 80116c8:	d0f9      	beq.n	80116be <__sflush_r+0x1a>
 80116ca:	2300      	movs	r3, #0
 80116cc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80116d0:	682f      	ldr	r7, [r5, #0]
 80116d2:	602b      	str	r3, [r5, #0]
 80116d4:	d032      	beq.n	801173c <__sflush_r+0x98>
 80116d6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80116d8:	89a3      	ldrh	r3, [r4, #12]
 80116da:	075a      	lsls	r2, r3, #29
 80116dc:	d505      	bpl.n	80116ea <__sflush_r+0x46>
 80116de:	6863      	ldr	r3, [r4, #4]
 80116e0:	1ac0      	subs	r0, r0, r3
 80116e2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80116e4:	b10b      	cbz	r3, 80116ea <__sflush_r+0x46>
 80116e6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80116e8:	1ac0      	subs	r0, r0, r3
 80116ea:	2300      	movs	r3, #0
 80116ec:	4602      	mov	r2, r0
 80116ee:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80116f0:	6a21      	ldr	r1, [r4, #32]
 80116f2:	4628      	mov	r0, r5
 80116f4:	47b0      	blx	r6
 80116f6:	1c43      	adds	r3, r0, #1
 80116f8:	89a3      	ldrh	r3, [r4, #12]
 80116fa:	d106      	bne.n	801170a <__sflush_r+0x66>
 80116fc:	6829      	ldr	r1, [r5, #0]
 80116fe:	291d      	cmp	r1, #29
 8011700:	d82c      	bhi.n	801175c <__sflush_r+0xb8>
 8011702:	4a2a      	ldr	r2, [pc, #168]	; (80117ac <__sflush_r+0x108>)
 8011704:	40ca      	lsrs	r2, r1
 8011706:	07d6      	lsls	r6, r2, #31
 8011708:	d528      	bpl.n	801175c <__sflush_r+0xb8>
 801170a:	2200      	movs	r2, #0
 801170c:	6062      	str	r2, [r4, #4]
 801170e:	04d9      	lsls	r1, r3, #19
 8011710:	6922      	ldr	r2, [r4, #16]
 8011712:	6022      	str	r2, [r4, #0]
 8011714:	d504      	bpl.n	8011720 <__sflush_r+0x7c>
 8011716:	1c42      	adds	r2, r0, #1
 8011718:	d101      	bne.n	801171e <__sflush_r+0x7a>
 801171a:	682b      	ldr	r3, [r5, #0]
 801171c:	b903      	cbnz	r3, 8011720 <__sflush_r+0x7c>
 801171e:	6560      	str	r0, [r4, #84]	; 0x54
 8011720:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011722:	602f      	str	r7, [r5, #0]
 8011724:	2900      	cmp	r1, #0
 8011726:	d0ca      	beq.n	80116be <__sflush_r+0x1a>
 8011728:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801172c:	4299      	cmp	r1, r3
 801172e:	d002      	beq.n	8011736 <__sflush_r+0x92>
 8011730:	4628      	mov	r0, r5
 8011732:	f7ff faa5 	bl	8010c80 <_free_r>
 8011736:	2000      	movs	r0, #0
 8011738:	6360      	str	r0, [r4, #52]	; 0x34
 801173a:	e7c1      	b.n	80116c0 <__sflush_r+0x1c>
 801173c:	6a21      	ldr	r1, [r4, #32]
 801173e:	2301      	movs	r3, #1
 8011740:	4628      	mov	r0, r5
 8011742:	47b0      	blx	r6
 8011744:	1c41      	adds	r1, r0, #1
 8011746:	d1c7      	bne.n	80116d8 <__sflush_r+0x34>
 8011748:	682b      	ldr	r3, [r5, #0]
 801174a:	2b00      	cmp	r3, #0
 801174c:	d0c4      	beq.n	80116d8 <__sflush_r+0x34>
 801174e:	2b1d      	cmp	r3, #29
 8011750:	d001      	beq.n	8011756 <__sflush_r+0xb2>
 8011752:	2b16      	cmp	r3, #22
 8011754:	d101      	bne.n	801175a <__sflush_r+0xb6>
 8011756:	602f      	str	r7, [r5, #0]
 8011758:	e7b1      	b.n	80116be <__sflush_r+0x1a>
 801175a:	89a3      	ldrh	r3, [r4, #12]
 801175c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011760:	81a3      	strh	r3, [r4, #12]
 8011762:	e7ad      	b.n	80116c0 <__sflush_r+0x1c>
 8011764:	690f      	ldr	r7, [r1, #16]
 8011766:	2f00      	cmp	r7, #0
 8011768:	d0a9      	beq.n	80116be <__sflush_r+0x1a>
 801176a:	0793      	lsls	r3, r2, #30
 801176c:	680e      	ldr	r6, [r1, #0]
 801176e:	bf08      	it	eq
 8011770:	694b      	ldreq	r3, [r1, #20]
 8011772:	600f      	str	r7, [r1, #0]
 8011774:	bf18      	it	ne
 8011776:	2300      	movne	r3, #0
 8011778:	eba6 0807 	sub.w	r8, r6, r7
 801177c:	608b      	str	r3, [r1, #8]
 801177e:	f1b8 0f00 	cmp.w	r8, #0
 8011782:	dd9c      	ble.n	80116be <__sflush_r+0x1a>
 8011784:	6a21      	ldr	r1, [r4, #32]
 8011786:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011788:	4643      	mov	r3, r8
 801178a:	463a      	mov	r2, r7
 801178c:	4628      	mov	r0, r5
 801178e:	47b0      	blx	r6
 8011790:	2800      	cmp	r0, #0
 8011792:	dc06      	bgt.n	80117a2 <__sflush_r+0xfe>
 8011794:	89a3      	ldrh	r3, [r4, #12]
 8011796:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801179a:	81a3      	strh	r3, [r4, #12]
 801179c:	f04f 30ff 	mov.w	r0, #4294967295
 80117a0:	e78e      	b.n	80116c0 <__sflush_r+0x1c>
 80117a2:	4407      	add	r7, r0
 80117a4:	eba8 0800 	sub.w	r8, r8, r0
 80117a8:	e7e9      	b.n	801177e <__sflush_r+0xda>
 80117aa:	bf00      	nop
 80117ac:	20400001 	.word	0x20400001

080117b0 <_fflush_r>:
 80117b0:	b538      	push	{r3, r4, r5, lr}
 80117b2:	690b      	ldr	r3, [r1, #16]
 80117b4:	4605      	mov	r5, r0
 80117b6:	460c      	mov	r4, r1
 80117b8:	b913      	cbnz	r3, 80117c0 <_fflush_r+0x10>
 80117ba:	2500      	movs	r5, #0
 80117bc:	4628      	mov	r0, r5
 80117be:	bd38      	pop	{r3, r4, r5, pc}
 80117c0:	b118      	cbz	r0, 80117ca <_fflush_r+0x1a>
 80117c2:	6983      	ldr	r3, [r0, #24]
 80117c4:	b90b      	cbnz	r3, 80117ca <_fflush_r+0x1a>
 80117c6:	f000 f887 	bl	80118d8 <__sinit>
 80117ca:	4b14      	ldr	r3, [pc, #80]	; (801181c <_fflush_r+0x6c>)
 80117cc:	429c      	cmp	r4, r3
 80117ce:	d11b      	bne.n	8011808 <_fflush_r+0x58>
 80117d0:	686c      	ldr	r4, [r5, #4]
 80117d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80117d6:	2b00      	cmp	r3, #0
 80117d8:	d0ef      	beq.n	80117ba <_fflush_r+0xa>
 80117da:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80117dc:	07d0      	lsls	r0, r2, #31
 80117de:	d404      	bmi.n	80117ea <_fflush_r+0x3a>
 80117e0:	0599      	lsls	r1, r3, #22
 80117e2:	d402      	bmi.n	80117ea <_fflush_r+0x3a>
 80117e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80117e6:	f000 f915 	bl	8011a14 <__retarget_lock_acquire_recursive>
 80117ea:	4628      	mov	r0, r5
 80117ec:	4621      	mov	r1, r4
 80117ee:	f7ff ff59 	bl	80116a4 <__sflush_r>
 80117f2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80117f4:	07da      	lsls	r2, r3, #31
 80117f6:	4605      	mov	r5, r0
 80117f8:	d4e0      	bmi.n	80117bc <_fflush_r+0xc>
 80117fa:	89a3      	ldrh	r3, [r4, #12]
 80117fc:	059b      	lsls	r3, r3, #22
 80117fe:	d4dd      	bmi.n	80117bc <_fflush_r+0xc>
 8011800:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011802:	f000 f908 	bl	8011a16 <__retarget_lock_release_recursive>
 8011806:	e7d9      	b.n	80117bc <_fflush_r+0xc>
 8011808:	4b05      	ldr	r3, [pc, #20]	; (8011820 <_fflush_r+0x70>)
 801180a:	429c      	cmp	r4, r3
 801180c:	d101      	bne.n	8011812 <_fflush_r+0x62>
 801180e:	68ac      	ldr	r4, [r5, #8]
 8011810:	e7df      	b.n	80117d2 <_fflush_r+0x22>
 8011812:	4b04      	ldr	r3, [pc, #16]	; (8011824 <_fflush_r+0x74>)
 8011814:	429c      	cmp	r4, r3
 8011816:	bf08      	it	eq
 8011818:	68ec      	ldreq	r4, [r5, #12]
 801181a:	e7da      	b.n	80117d2 <_fflush_r+0x22>
 801181c:	080147c4 	.word	0x080147c4
 8011820:	080147e4 	.word	0x080147e4
 8011824:	080147a4 	.word	0x080147a4

08011828 <std>:
 8011828:	2300      	movs	r3, #0
 801182a:	b510      	push	{r4, lr}
 801182c:	4604      	mov	r4, r0
 801182e:	e9c0 3300 	strd	r3, r3, [r0]
 8011832:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011836:	6083      	str	r3, [r0, #8]
 8011838:	8181      	strh	r1, [r0, #12]
 801183a:	6643      	str	r3, [r0, #100]	; 0x64
 801183c:	81c2      	strh	r2, [r0, #14]
 801183e:	6183      	str	r3, [r0, #24]
 8011840:	4619      	mov	r1, r3
 8011842:	2208      	movs	r2, #8
 8011844:	305c      	adds	r0, #92	; 0x5c
 8011846:	f7fd fb69 	bl	800ef1c <memset>
 801184a:	4b05      	ldr	r3, [pc, #20]	; (8011860 <std+0x38>)
 801184c:	6263      	str	r3, [r4, #36]	; 0x24
 801184e:	4b05      	ldr	r3, [pc, #20]	; (8011864 <std+0x3c>)
 8011850:	62a3      	str	r3, [r4, #40]	; 0x28
 8011852:	4b05      	ldr	r3, [pc, #20]	; (8011868 <std+0x40>)
 8011854:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011856:	4b05      	ldr	r3, [pc, #20]	; (801186c <std+0x44>)
 8011858:	6224      	str	r4, [r4, #32]
 801185a:	6323      	str	r3, [r4, #48]	; 0x30
 801185c:	bd10      	pop	{r4, pc}
 801185e:	bf00      	nop
 8011860:	08011b7d 	.word	0x08011b7d
 8011864:	08011b9f 	.word	0x08011b9f
 8011868:	08011bd7 	.word	0x08011bd7
 801186c:	08011bfb 	.word	0x08011bfb

08011870 <_cleanup_r>:
 8011870:	4901      	ldr	r1, [pc, #4]	; (8011878 <_cleanup_r+0x8>)
 8011872:	f000 b8af 	b.w	80119d4 <_fwalk_reent>
 8011876:	bf00      	nop
 8011878:	080117b1 	.word	0x080117b1

0801187c <__sfmoreglue>:
 801187c:	b570      	push	{r4, r5, r6, lr}
 801187e:	2268      	movs	r2, #104	; 0x68
 8011880:	1e4d      	subs	r5, r1, #1
 8011882:	4355      	muls	r5, r2
 8011884:	460e      	mov	r6, r1
 8011886:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801188a:	f7ff fa65 	bl	8010d58 <_malloc_r>
 801188e:	4604      	mov	r4, r0
 8011890:	b140      	cbz	r0, 80118a4 <__sfmoreglue+0x28>
 8011892:	2100      	movs	r1, #0
 8011894:	e9c0 1600 	strd	r1, r6, [r0]
 8011898:	300c      	adds	r0, #12
 801189a:	60a0      	str	r0, [r4, #8]
 801189c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80118a0:	f7fd fb3c 	bl	800ef1c <memset>
 80118a4:	4620      	mov	r0, r4
 80118a6:	bd70      	pop	{r4, r5, r6, pc}

080118a8 <__sfp_lock_acquire>:
 80118a8:	4801      	ldr	r0, [pc, #4]	; (80118b0 <__sfp_lock_acquire+0x8>)
 80118aa:	f000 b8b3 	b.w	8011a14 <__retarget_lock_acquire_recursive>
 80118ae:	bf00      	nop
 80118b0:	20006881 	.word	0x20006881

080118b4 <__sfp_lock_release>:
 80118b4:	4801      	ldr	r0, [pc, #4]	; (80118bc <__sfp_lock_release+0x8>)
 80118b6:	f000 b8ae 	b.w	8011a16 <__retarget_lock_release_recursive>
 80118ba:	bf00      	nop
 80118bc:	20006881 	.word	0x20006881

080118c0 <__sinit_lock_acquire>:
 80118c0:	4801      	ldr	r0, [pc, #4]	; (80118c8 <__sinit_lock_acquire+0x8>)
 80118c2:	f000 b8a7 	b.w	8011a14 <__retarget_lock_acquire_recursive>
 80118c6:	bf00      	nop
 80118c8:	20006882 	.word	0x20006882

080118cc <__sinit_lock_release>:
 80118cc:	4801      	ldr	r0, [pc, #4]	; (80118d4 <__sinit_lock_release+0x8>)
 80118ce:	f000 b8a2 	b.w	8011a16 <__retarget_lock_release_recursive>
 80118d2:	bf00      	nop
 80118d4:	20006882 	.word	0x20006882

080118d8 <__sinit>:
 80118d8:	b510      	push	{r4, lr}
 80118da:	4604      	mov	r4, r0
 80118dc:	f7ff fff0 	bl	80118c0 <__sinit_lock_acquire>
 80118e0:	69a3      	ldr	r3, [r4, #24]
 80118e2:	b11b      	cbz	r3, 80118ec <__sinit+0x14>
 80118e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80118e8:	f7ff bff0 	b.w	80118cc <__sinit_lock_release>
 80118ec:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80118f0:	6523      	str	r3, [r4, #80]	; 0x50
 80118f2:	4b13      	ldr	r3, [pc, #76]	; (8011940 <__sinit+0x68>)
 80118f4:	4a13      	ldr	r2, [pc, #76]	; (8011944 <__sinit+0x6c>)
 80118f6:	681b      	ldr	r3, [r3, #0]
 80118f8:	62a2      	str	r2, [r4, #40]	; 0x28
 80118fa:	42a3      	cmp	r3, r4
 80118fc:	bf04      	itt	eq
 80118fe:	2301      	moveq	r3, #1
 8011900:	61a3      	streq	r3, [r4, #24]
 8011902:	4620      	mov	r0, r4
 8011904:	f000 f820 	bl	8011948 <__sfp>
 8011908:	6060      	str	r0, [r4, #4]
 801190a:	4620      	mov	r0, r4
 801190c:	f000 f81c 	bl	8011948 <__sfp>
 8011910:	60a0      	str	r0, [r4, #8]
 8011912:	4620      	mov	r0, r4
 8011914:	f000 f818 	bl	8011948 <__sfp>
 8011918:	2200      	movs	r2, #0
 801191a:	60e0      	str	r0, [r4, #12]
 801191c:	2104      	movs	r1, #4
 801191e:	6860      	ldr	r0, [r4, #4]
 8011920:	f7ff ff82 	bl	8011828 <std>
 8011924:	68a0      	ldr	r0, [r4, #8]
 8011926:	2201      	movs	r2, #1
 8011928:	2109      	movs	r1, #9
 801192a:	f7ff ff7d 	bl	8011828 <std>
 801192e:	68e0      	ldr	r0, [r4, #12]
 8011930:	2202      	movs	r2, #2
 8011932:	2112      	movs	r1, #18
 8011934:	f7ff ff78 	bl	8011828 <std>
 8011938:	2301      	movs	r3, #1
 801193a:	61a3      	str	r3, [r4, #24]
 801193c:	e7d2      	b.n	80118e4 <__sinit+0xc>
 801193e:	bf00      	nop
 8011940:	0801442c 	.word	0x0801442c
 8011944:	08011871 	.word	0x08011871

08011948 <__sfp>:
 8011948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801194a:	4607      	mov	r7, r0
 801194c:	f7ff ffac 	bl	80118a8 <__sfp_lock_acquire>
 8011950:	4b1e      	ldr	r3, [pc, #120]	; (80119cc <__sfp+0x84>)
 8011952:	681e      	ldr	r6, [r3, #0]
 8011954:	69b3      	ldr	r3, [r6, #24]
 8011956:	b913      	cbnz	r3, 801195e <__sfp+0x16>
 8011958:	4630      	mov	r0, r6
 801195a:	f7ff ffbd 	bl	80118d8 <__sinit>
 801195e:	3648      	adds	r6, #72	; 0x48
 8011960:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8011964:	3b01      	subs	r3, #1
 8011966:	d503      	bpl.n	8011970 <__sfp+0x28>
 8011968:	6833      	ldr	r3, [r6, #0]
 801196a:	b30b      	cbz	r3, 80119b0 <__sfp+0x68>
 801196c:	6836      	ldr	r6, [r6, #0]
 801196e:	e7f7      	b.n	8011960 <__sfp+0x18>
 8011970:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8011974:	b9d5      	cbnz	r5, 80119ac <__sfp+0x64>
 8011976:	4b16      	ldr	r3, [pc, #88]	; (80119d0 <__sfp+0x88>)
 8011978:	60e3      	str	r3, [r4, #12]
 801197a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801197e:	6665      	str	r5, [r4, #100]	; 0x64
 8011980:	f000 f847 	bl	8011a12 <__retarget_lock_init_recursive>
 8011984:	f7ff ff96 	bl	80118b4 <__sfp_lock_release>
 8011988:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801198c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8011990:	6025      	str	r5, [r4, #0]
 8011992:	61a5      	str	r5, [r4, #24]
 8011994:	2208      	movs	r2, #8
 8011996:	4629      	mov	r1, r5
 8011998:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801199c:	f7fd fabe 	bl	800ef1c <memset>
 80119a0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80119a4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80119a8:	4620      	mov	r0, r4
 80119aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80119ac:	3468      	adds	r4, #104	; 0x68
 80119ae:	e7d9      	b.n	8011964 <__sfp+0x1c>
 80119b0:	2104      	movs	r1, #4
 80119b2:	4638      	mov	r0, r7
 80119b4:	f7ff ff62 	bl	801187c <__sfmoreglue>
 80119b8:	4604      	mov	r4, r0
 80119ba:	6030      	str	r0, [r6, #0]
 80119bc:	2800      	cmp	r0, #0
 80119be:	d1d5      	bne.n	801196c <__sfp+0x24>
 80119c0:	f7ff ff78 	bl	80118b4 <__sfp_lock_release>
 80119c4:	230c      	movs	r3, #12
 80119c6:	603b      	str	r3, [r7, #0]
 80119c8:	e7ee      	b.n	80119a8 <__sfp+0x60>
 80119ca:	bf00      	nop
 80119cc:	0801442c 	.word	0x0801442c
 80119d0:	ffff0001 	.word	0xffff0001

080119d4 <_fwalk_reent>:
 80119d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80119d8:	4606      	mov	r6, r0
 80119da:	4688      	mov	r8, r1
 80119dc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80119e0:	2700      	movs	r7, #0
 80119e2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80119e6:	f1b9 0901 	subs.w	r9, r9, #1
 80119ea:	d505      	bpl.n	80119f8 <_fwalk_reent+0x24>
 80119ec:	6824      	ldr	r4, [r4, #0]
 80119ee:	2c00      	cmp	r4, #0
 80119f0:	d1f7      	bne.n	80119e2 <_fwalk_reent+0xe>
 80119f2:	4638      	mov	r0, r7
 80119f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80119f8:	89ab      	ldrh	r3, [r5, #12]
 80119fa:	2b01      	cmp	r3, #1
 80119fc:	d907      	bls.n	8011a0e <_fwalk_reent+0x3a>
 80119fe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011a02:	3301      	adds	r3, #1
 8011a04:	d003      	beq.n	8011a0e <_fwalk_reent+0x3a>
 8011a06:	4629      	mov	r1, r5
 8011a08:	4630      	mov	r0, r6
 8011a0a:	47c0      	blx	r8
 8011a0c:	4307      	orrs	r7, r0
 8011a0e:	3568      	adds	r5, #104	; 0x68
 8011a10:	e7e9      	b.n	80119e6 <_fwalk_reent+0x12>

08011a12 <__retarget_lock_init_recursive>:
 8011a12:	4770      	bx	lr

08011a14 <__retarget_lock_acquire_recursive>:
 8011a14:	4770      	bx	lr

08011a16 <__retarget_lock_release_recursive>:
 8011a16:	4770      	bx	lr

08011a18 <__swhatbuf_r>:
 8011a18:	b570      	push	{r4, r5, r6, lr}
 8011a1a:	460e      	mov	r6, r1
 8011a1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011a20:	2900      	cmp	r1, #0
 8011a22:	b096      	sub	sp, #88	; 0x58
 8011a24:	4614      	mov	r4, r2
 8011a26:	461d      	mov	r5, r3
 8011a28:	da08      	bge.n	8011a3c <__swhatbuf_r+0x24>
 8011a2a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8011a2e:	2200      	movs	r2, #0
 8011a30:	602a      	str	r2, [r5, #0]
 8011a32:	061a      	lsls	r2, r3, #24
 8011a34:	d410      	bmi.n	8011a58 <__swhatbuf_r+0x40>
 8011a36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011a3a:	e00e      	b.n	8011a5a <__swhatbuf_r+0x42>
 8011a3c:	466a      	mov	r2, sp
 8011a3e:	f000 f903 	bl	8011c48 <_fstat_r>
 8011a42:	2800      	cmp	r0, #0
 8011a44:	dbf1      	blt.n	8011a2a <__swhatbuf_r+0x12>
 8011a46:	9a01      	ldr	r2, [sp, #4]
 8011a48:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8011a4c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011a50:	425a      	negs	r2, r3
 8011a52:	415a      	adcs	r2, r3
 8011a54:	602a      	str	r2, [r5, #0]
 8011a56:	e7ee      	b.n	8011a36 <__swhatbuf_r+0x1e>
 8011a58:	2340      	movs	r3, #64	; 0x40
 8011a5a:	2000      	movs	r0, #0
 8011a5c:	6023      	str	r3, [r4, #0]
 8011a5e:	b016      	add	sp, #88	; 0x58
 8011a60:	bd70      	pop	{r4, r5, r6, pc}
	...

08011a64 <__smakebuf_r>:
 8011a64:	898b      	ldrh	r3, [r1, #12]
 8011a66:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011a68:	079d      	lsls	r5, r3, #30
 8011a6a:	4606      	mov	r6, r0
 8011a6c:	460c      	mov	r4, r1
 8011a6e:	d507      	bpl.n	8011a80 <__smakebuf_r+0x1c>
 8011a70:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011a74:	6023      	str	r3, [r4, #0]
 8011a76:	6123      	str	r3, [r4, #16]
 8011a78:	2301      	movs	r3, #1
 8011a7a:	6163      	str	r3, [r4, #20]
 8011a7c:	b002      	add	sp, #8
 8011a7e:	bd70      	pop	{r4, r5, r6, pc}
 8011a80:	ab01      	add	r3, sp, #4
 8011a82:	466a      	mov	r2, sp
 8011a84:	f7ff ffc8 	bl	8011a18 <__swhatbuf_r>
 8011a88:	9900      	ldr	r1, [sp, #0]
 8011a8a:	4605      	mov	r5, r0
 8011a8c:	4630      	mov	r0, r6
 8011a8e:	f7ff f963 	bl	8010d58 <_malloc_r>
 8011a92:	b948      	cbnz	r0, 8011aa8 <__smakebuf_r+0x44>
 8011a94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011a98:	059a      	lsls	r2, r3, #22
 8011a9a:	d4ef      	bmi.n	8011a7c <__smakebuf_r+0x18>
 8011a9c:	f023 0303 	bic.w	r3, r3, #3
 8011aa0:	f043 0302 	orr.w	r3, r3, #2
 8011aa4:	81a3      	strh	r3, [r4, #12]
 8011aa6:	e7e3      	b.n	8011a70 <__smakebuf_r+0xc>
 8011aa8:	4b0d      	ldr	r3, [pc, #52]	; (8011ae0 <__smakebuf_r+0x7c>)
 8011aaa:	62b3      	str	r3, [r6, #40]	; 0x28
 8011aac:	89a3      	ldrh	r3, [r4, #12]
 8011aae:	6020      	str	r0, [r4, #0]
 8011ab0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011ab4:	81a3      	strh	r3, [r4, #12]
 8011ab6:	9b00      	ldr	r3, [sp, #0]
 8011ab8:	6163      	str	r3, [r4, #20]
 8011aba:	9b01      	ldr	r3, [sp, #4]
 8011abc:	6120      	str	r0, [r4, #16]
 8011abe:	b15b      	cbz	r3, 8011ad8 <__smakebuf_r+0x74>
 8011ac0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011ac4:	4630      	mov	r0, r6
 8011ac6:	f000 f8d1 	bl	8011c6c <_isatty_r>
 8011aca:	b128      	cbz	r0, 8011ad8 <__smakebuf_r+0x74>
 8011acc:	89a3      	ldrh	r3, [r4, #12]
 8011ace:	f023 0303 	bic.w	r3, r3, #3
 8011ad2:	f043 0301 	orr.w	r3, r3, #1
 8011ad6:	81a3      	strh	r3, [r4, #12]
 8011ad8:	89a0      	ldrh	r0, [r4, #12]
 8011ada:	4305      	orrs	r5, r0
 8011adc:	81a5      	strh	r5, [r4, #12]
 8011ade:	e7cd      	b.n	8011a7c <__smakebuf_r+0x18>
 8011ae0:	08011871 	.word	0x08011871

08011ae4 <_malloc_usable_size_r>:
 8011ae4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011ae8:	1f18      	subs	r0, r3, #4
 8011aea:	2b00      	cmp	r3, #0
 8011aec:	bfbc      	itt	lt
 8011aee:	580b      	ldrlt	r3, [r1, r0]
 8011af0:	18c0      	addlt	r0, r0, r3
 8011af2:	4770      	bx	lr

08011af4 <_raise_r>:
 8011af4:	291f      	cmp	r1, #31
 8011af6:	b538      	push	{r3, r4, r5, lr}
 8011af8:	4604      	mov	r4, r0
 8011afa:	460d      	mov	r5, r1
 8011afc:	d904      	bls.n	8011b08 <_raise_r+0x14>
 8011afe:	2316      	movs	r3, #22
 8011b00:	6003      	str	r3, [r0, #0]
 8011b02:	f04f 30ff 	mov.w	r0, #4294967295
 8011b06:	bd38      	pop	{r3, r4, r5, pc}
 8011b08:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8011b0a:	b112      	cbz	r2, 8011b12 <_raise_r+0x1e>
 8011b0c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011b10:	b94b      	cbnz	r3, 8011b26 <_raise_r+0x32>
 8011b12:	4620      	mov	r0, r4
 8011b14:	f000 f830 	bl	8011b78 <_getpid_r>
 8011b18:	462a      	mov	r2, r5
 8011b1a:	4601      	mov	r1, r0
 8011b1c:	4620      	mov	r0, r4
 8011b1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011b22:	f000 b817 	b.w	8011b54 <_kill_r>
 8011b26:	2b01      	cmp	r3, #1
 8011b28:	d00a      	beq.n	8011b40 <_raise_r+0x4c>
 8011b2a:	1c59      	adds	r1, r3, #1
 8011b2c:	d103      	bne.n	8011b36 <_raise_r+0x42>
 8011b2e:	2316      	movs	r3, #22
 8011b30:	6003      	str	r3, [r0, #0]
 8011b32:	2001      	movs	r0, #1
 8011b34:	e7e7      	b.n	8011b06 <_raise_r+0x12>
 8011b36:	2400      	movs	r4, #0
 8011b38:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011b3c:	4628      	mov	r0, r5
 8011b3e:	4798      	blx	r3
 8011b40:	2000      	movs	r0, #0
 8011b42:	e7e0      	b.n	8011b06 <_raise_r+0x12>

08011b44 <raise>:
 8011b44:	4b02      	ldr	r3, [pc, #8]	; (8011b50 <raise+0xc>)
 8011b46:	4601      	mov	r1, r0
 8011b48:	6818      	ldr	r0, [r3, #0]
 8011b4a:	f7ff bfd3 	b.w	8011af4 <_raise_r>
 8011b4e:	bf00      	nop
 8011b50:	2000001c 	.word	0x2000001c

08011b54 <_kill_r>:
 8011b54:	b538      	push	{r3, r4, r5, lr}
 8011b56:	4d07      	ldr	r5, [pc, #28]	; (8011b74 <_kill_r+0x20>)
 8011b58:	2300      	movs	r3, #0
 8011b5a:	4604      	mov	r4, r0
 8011b5c:	4608      	mov	r0, r1
 8011b5e:	4611      	mov	r1, r2
 8011b60:	602b      	str	r3, [r5, #0]
 8011b62:	f7f2 fb2f 	bl	80041c4 <_kill>
 8011b66:	1c43      	adds	r3, r0, #1
 8011b68:	d102      	bne.n	8011b70 <_kill_r+0x1c>
 8011b6a:	682b      	ldr	r3, [r5, #0]
 8011b6c:	b103      	cbz	r3, 8011b70 <_kill_r+0x1c>
 8011b6e:	6023      	str	r3, [r4, #0]
 8011b70:	bd38      	pop	{r3, r4, r5, pc}
 8011b72:	bf00      	nop
 8011b74:	2000687c 	.word	0x2000687c

08011b78 <_getpid_r>:
 8011b78:	f7f2 bb1c 	b.w	80041b4 <_getpid>

08011b7c <__sread>:
 8011b7c:	b510      	push	{r4, lr}
 8011b7e:	460c      	mov	r4, r1
 8011b80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011b84:	f000 f894 	bl	8011cb0 <_read_r>
 8011b88:	2800      	cmp	r0, #0
 8011b8a:	bfab      	itete	ge
 8011b8c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8011b8e:	89a3      	ldrhlt	r3, [r4, #12]
 8011b90:	181b      	addge	r3, r3, r0
 8011b92:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011b96:	bfac      	ite	ge
 8011b98:	6563      	strge	r3, [r4, #84]	; 0x54
 8011b9a:	81a3      	strhlt	r3, [r4, #12]
 8011b9c:	bd10      	pop	{r4, pc}

08011b9e <__swrite>:
 8011b9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011ba2:	461f      	mov	r7, r3
 8011ba4:	898b      	ldrh	r3, [r1, #12]
 8011ba6:	05db      	lsls	r3, r3, #23
 8011ba8:	4605      	mov	r5, r0
 8011baa:	460c      	mov	r4, r1
 8011bac:	4616      	mov	r6, r2
 8011bae:	d505      	bpl.n	8011bbc <__swrite+0x1e>
 8011bb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011bb4:	2302      	movs	r3, #2
 8011bb6:	2200      	movs	r2, #0
 8011bb8:	f000 f868 	bl	8011c8c <_lseek_r>
 8011bbc:	89a3      	ldrh	r3, [r4, #12]
 8011bbe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011bc2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011bc6:	81a3      	strh	r3, [r4, #12]
 8011bc8:	4632      	mov	r2, r6
 8011bca:	463b      	mov	r3, r7
 8011bcc:	4628      	mov	r0, r5
 8011bce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011bd2:	f000 b817 	b.w	8011c04 <_write_r>

08011bd6 <__sseek>:
 8011bd6:	b510      	push	{r4, lr}
 8011bd8:	460c      	mov	r4, r1
 8011bda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011bde:	f000 f855 	bl	8011c8c <_lseek_r>
 8011be2:	1c43      	adds	r3, r0, #1
 8011be4:	89a3      	ldrh	r3, [r4, #12]
 8011be6:	bf15      	itete	ne
 8011be8:	6560      	strne	r0, [r4, #84]	; 0x54
 8011bea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8011bee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011bf2:	81a3      	strheq	r3, [r4, #12]
 8011bf4:	bf18      	it	ne
 8011bf6:	81a3      	strhne	r3, [r4, #12]
 8011bf8:	bd10      	pop	{r4, pc}

08011bfa <__sclose>:
 8011bfa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011bfe:	f000 b813 	b.w	8011c28 <_close_r>
	...

08011c04 <_write_r>:
 8011c04:	b538      	push	{r3, r4, r5, lr}
 8011c06:	4d07      	ldr	r5, [pc, #28]	; (8011c24 <_write_r+0x20>)
 8011c08:	4604      	mov	r4, r0
 8011c0a:	4608      	mov	r0, r1
 8011c0c:	4611      	mov	r1, r2
 8011c0e:	2200      	movs	r2, #0
 8011c10:	602a      	str	r2, [r5, #0]
 8011c12:	461a      	mov	r2, r3
 8011c14:	f7f2 fb0d 	bl	8004232 <_write>
 8011c18:	1c43      	adds	r3, r0, #1
 8011c1a:	d102      	bne.n	8011c22 <_write_r+0x1e>
 8011c1c:	682b      	ldr	r3, [r5, #0]
 8011c1e:	b103      	cbz	r3, 8011c22 <_write_r+0x1e>
 8011c20:	6023      	str	r3, [r4, #0]
 8011c22:	bd38      	pop	{r3, r4, r5, pc}
 8011c24:	2000687c 	.word	0x2000687c

08011c28 <_close_r>:
 8011c28:	b538      	push	{r3, r4, r5, lr}
 8011c2a:	4d06      	ldr	r5, [pc, #24]	; (8011c44 <_close_r+0x1c>)
 8011c2c:	2300      	movs	r3, #0
 8011c2e:	4604      	mov	r4, r0
 8011c30:	4608      	mov	r0, r1
 8011c32:	602b      	str	r3, [r5, #0]
 8011c34:	f7f2 fb19 	bl	800426a <_close>
 8011c38:	1c43      	adds	r3, r0, #1
 8011c3a:	d102      	bne.n	8011c42 <_close_r+0x1a>
 8011c3c:	682b      	ldr	r3, [r5, #0]
 8011c3e:	b103      	cbz	r3, 8011c42 <_close_r+0x1a>
 8011c40:	6023      	str	r3, [r4, #0]
 8011c42:	bd38      	pop	{r3, r4, r5, pc}
 8011c44:	2000687c 	.word	0x2000687c

08011c48 <_fstat_r>:
 8011c48:	b538      	push	{r3, r4, r5, lr}
 8011c4a:	4d07      	ldr	r5, [pc, #28]	; (8011c68 <_fstat_r+0x20>)
 8011c4c:	2300      	movs	r3, #0
 8011c4e:	4604      	mov	r4, r0
 8011c50:	4608      	mov	r0, r1
 8011c52:	4611      	mov	r1, r2
 8011c54:	602b      	str	r3, [r5, #0]
 8011c56:	f7f2 fb14 	bl	8004282 <_fstat>
 8011c5a:	1c43      	adds	r3, r0, #1
 8011c5c:	d102      	bne.n	8011c64 <_fstat_r+0x1c>
 8011c5e:	682b      	ldr	r3, [r5, #0]
 8011c60:	b103      	cbz	r3, 8011c64 <_fstat_r+0x1c>
 8011c62:	6023      	str	r3, [r4, #0]
 8011c64:	bd38      	pop	{r3, r4, r5, pc}
 8011c66:	bf00      	nop
 8011c68:	2000687c 	.word	0x2000687c

08011c6c <_isatty_r>:
 8011c6c:	b538      	push	{r3, r4, r5, lr}
 8011c6e:	4d06      	ldr	r5, [pc, #24]	; (8011c88 <_isatty_r+0x1c>)
 8011c70:	2300      	movs	r3, #0
 8011c72:	4604      	mov	r4, r0
 8011c74:	4608      	mov	r0, r1
 8011c76:	602b      	str	r3, [r5, #0]
 8011c78:	f7f2 fb13 	bl	80042a2 <_isatty>
 8011c7c:	1c43      	adds	r3, r0, #1
 8011c7e:	d102      	bne.n	8011c86 <_isatty_r+0x1a>
 8011c80:	682b      	ldr	r3, [r5, #0]
 8011c82:	b103      	cbz	r3, 8011c86 <_isatty_r+0x1a>
 8011c84:	6023      	str	r3, [r4, #0]
 8011c86:	bd38      	pop	{r3, r4, r5, pc}
 8011c88:	2000687c 	.word	0x2000687c

08011c8c <_lseek_r>:
 8011c8c:	b538      	push	{r3, r4, r5, lr}
 8011c8e:	4d07      	ldr	r5, [pc, #28]	; (8011cac <_lseek_r+0x20>)
 8011c90:	4604      	mov	r4, r0
 8011c92:	4608      	mov	r0, r1
 8011c94:	4611      	mov	r1, r2
 8011c96:	2200      	movs	r2, #0
 8011c98:	602a      	str	r2, [r5, #0]
 8011c9a:	461a      	mov	r2, r3
 8011c9c:	f7f2 fb0c 	bl	80042b8 <_lseek>
 8011ca0:	1c43      	adds	r3, r0, #1
 8011ca2:	d102      	bne.n	8011caa <_lseek_r+0x1e>
 8011ca4:	682b      	ldr	r3, [r5, #0]
 8011ca6:	b103      	cbz	r3, 8011caa <_lseek_r+0x1e>
 8011ca8:	6023      	str	r3, [r4, #0]
 8011caa:	bd38      	pop	{r3, r4, r5, pc}
 8011cac:	2000687c 	.word	0x2000687c

08011cb0 <_read_r>:
 8011cb0:	b538      	push	{r3, r4, r5, lr}
 8011cb2:	4d07      	ldr	r5, [pc, #28]	; (8011cd0 <_read_r+0x20>)
 8011cb4:	4604      	mov	r4, r0
 8011cb6:	4608      	mov	r0, r1
 8011cb8:	4611      	mov	r1, r2
 8011cba:	2200      	movs	r2, #0
 8011cbc:	602a      	str	r2, [r5, #0]
 8011cbe:	461a      	mov	r2, r3
 8011cc0:	f7f2 fa9a 	bl	80041f8 <_read>
 8011cc4:	1c43      	adds	r3, r0, #1
 8011cc6:	d102      	bne.n	8011cce <_read_r+0x1e>
 8011cc8:	682b      	ldr	r3, [r5, #0]
 8011cca:	b103      	cbz	r3, 8011cce <_read_r+0x1e>
 8011ccc:	6023      	str	r3, [r4, #0]
 8011cce:	bd38      	pop	{r3, r4, r5, pc}
 8011cd0:	2000687c 	.word	0x2000687c

08011cd4 <cosf>:
 8011cd4:	ee10 3a10 	vmov	r3, s0
 8011cd8:	b507      	push	{r0, r1, r2, lr}
 8011cda:	4a1e      	ldr	r2, [pc, #120]	; (8011d54 <cosf+0x80>)
 8011cdc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8011ce0:	4293      	cmp	r3, r2
 8011ce2:	dc06      	bgt.n	8011cf2 <cosf+0x1e>
 8011ce4:	eddf 0a1c 	vldr	s1, [pc, #112]	; 8011d58 <cosf+0x84>
 8011ce8:	b003      	add	sp, #12
 8011cea:	f85d eb04 	ldr.w	lr, [sp], #4
 8011cee:	f001 bce7 	b.w	80136c0 <__kernel_cosf>
 8011cf2:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8011cf6:	db04      	blt.n	8011d02 <cosf+0x2e>
 8011cf8:	ee30 0a40 	vsub.f32	s0, s0, s0
 8011cfc:	b003      	add	sp, #12
 8011cfe:	f85d fb04 	ldr.w	pc, [sp], #4
 8011d02:	4668      	mov	r0, sp
 8011d04:	f001 fb9c 	bl	8013440 <__ieee754_rem_pio2f>
 8011d08:	f000 0003 	and.w	r0, r0, #3
 8011d0c:	2801      	cmp	r0, #1
 8011d0e:	d009      	beq.n	8011d24 <cosf+0x50>
 8011d10:	2802      	cmp	r0, #2
 8011d12:	d010      	beq.n	8011d36 <cosf+0x62>
 8011d14:	b9b0      	cbnz	r0, 8011d44 <cosf+0x70>
 8011d16:	eddd 0a01 	vldr	s1, [sp, #4]
 8011d1a:	ed9d 0a00 	vldr	s0, [sp]
 8011d1e:	f001 fccf 	bl	80136c0 <__kernel_cosf>
 8011d22:	e7eb      	b.n	8011cfc <cosf+0x28>
 8011d24:	eddd 0a01 	vldr	s1, [sp, #4]
 8011d28:	ed9d 0a00 	vldr	s0, [sp]
 8011d2c:	f001 ff9e 	bl	8013c6c <__kernel_sinf>
 8011d30:	eeb1 0a40 	vneg.f32	s0, s0
 8011d34:	e7e2      	b.n	8011cfc <cosf+0x28>
 8011d36:	eddd 0a01 	vldr	s1, [sp, #4]
 8011d3a:	ed9d 0a00 	vldr	s0, [sp]
 8011d3e:	f001 fcbf 	bl	80136c0 <__kernel_cosf>
 8011d42:	e7f5      	b.n	8011d30 <cosf+0x5c>
 8011d44:	eddd 0a01 	vldr	s1, [sp, #4]
 8011d48:	ed9d 0a00 	vldr	s0, [sp]
 8011d4c:	2001      	movs	r0, #1
 8011d4e:	f001 ff8d 	bl	8013c6c <__kernel_sinf>
 8011d52:	e7d3      	b.n	8011cfc <cosf+0x28>
 8011d54:	3f490fd8 	.word	0x3f490fd8
 8011d58:	00000000 	.word	0x00000000

08011d5c <sinf>:
 8011d5c:	ee10 3a10 	vmov	r3, s0
 8011d60:	b507      	push	{r0, r1, r2, lr}
 8011d62:	4a1f      	ldr	r2, [pc, #124]	; (8011de0 <sinf+0x84>)
 8011d64:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8011d68:	4293      	cmp	r3, r2
 8011d6a:	dc07      	bgt.n	8011d7c <sinf+0x20>
 8011d6c:	eddf 0a1d 	vldr	s1, [pc, #116]	; 8011de4 <sinf+0x88>
 8011d70:	2000      	movs	r0, #0
 8011d72:	b003      	add	sp, #12
 8011d74:	f85d eb04 	ldr.w	lr, [sp], #4
 8011d78:	f001 bf78 	b.w	8013c6c <__kernel_sinf>
 8011d7c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8011d80:	db04      	blt.n	8011d8c <sinf+0x30>
 8011d82:	ee30 0a40 	vsub.f32	s0, s0, s0
 8011d86:	b003      	add	sp, #12
 8011d88:	f85d fb04 	ldr.w	pc, [sp], #4
 8011d8c:	4668      	mov	r0, sp
 8011d8e:	f001 fb57 	bl	8013440 <__ieee754_rem_pio2f>
 8011d92:	f000 0003 	and.w	r0, r0, #3
 8011d96:	2801      	cmp	r0, #1
 8011d98:	d00a      	beq.n	8011db0 <sinf+0x54>
 8011d9a:	2802      	cmp	r0, #2
 8011d9c:	d00f      	beq.n	8011dbe <sinf+0x62>
 8011d9e:	b9c0      	cbnz	r0, 8011dd2 <sinf+0x76>
 8011da0:	eddd 0a01 	vldr	s1, [sp, #4]
 8011da4:	ed9d 0a00 	vldr	s0, [sp]
 8011da8:	2001      	movs	r0, #1
 8011daa:	f001 ff5f 	bl	8013c6c <__kernel_sinf>
 8011dae:	e7ea      	b.n	8011d86 <sinf+0x2a>
 8011db0:	eddd 0a01 	vldr	s1, [sp, #4]
 8011db4:	ed9d 0a00 	vldr	s0, [sp]
 8011db8:	f001 fc82 	bl	80136c0 <__kernel_cosf>
 8011dbc:	e7e3      	b.n	8011d86 <sinf+0x2a>
 8011dbe:	eddd 0a01 	vldr	s1, [sp, #4]
 8011dc2:	ed9d 0a00 	vldr	s0, [sp]
 8011dc6:	2001      	movs	r0, #1
 8011dc8:	f001 ff50 	bl	8013c6c <__kernel_sinf>
 8011dcc:	eeb1 0a40 	vneg.f32	s0, s0
 8011dd0:	e7d9      	b.n	8011d86 <sinf+0x2a>
 8011dd2:	eddd 0a01 	vldr	s1, [sp, #4]
 8011dd6:	ed9d 0a00 	vldr	s0, [sp]
 8011dda:	f001 fc71 	bl	80136c0 <__kernel_cosf>
 8011dde:	e7f5      	b.n	8011dcc <sinf+0x70>
 8011de0:	3f490fd8 	.word	0x3f490fd8
 8011de4:	00000000 	.word	0x00000000

08011de8 <pow>:
 8011de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011dea:	ed2d 8b02 	vpush	{d8}
 8011dee:	eeb0 8a40 	vmov.f32	s16, s0
 8011df2:	eef0 8a60 	vmov.f32	s17, s1
 8011df6:	ec55 4b11 	vmov	r4, r5, d1
 8011dfa:	f000 f8ed 	bl	8011fd8 <__ieee754_pow>
 8011dfe:	4622      	mov	r2, r4
 8011e00:	462b      	mov	r3, r5
 8011e02:	4620      	mov	r0, r4
 8011e04:	4629      	mov	r1, r5
 8011e06:	ec57 6b10 	vmov	r6, r7, d0
 8011e0a:	f7ee fe8f 	bl	8000b2c <__aeabi_dcmpun>
 8011e0e:	2800      	cmp	r0, #0
 8011e10:	d13b      	bne.n	8011e8a <pow+0xa2>
 8011e12:	ec51 0b18 	vmov	r0, r1, d8
 8011e16:	2200      	movs	r2, #0
 8011e18:	2300      	movs	r3, #0
 8011e1a:	f7ee fe55 	bl	8000ac8 <__aeabi_dcmpeq>
 8011e1e:	b1b8      	cbz	r0, 8011e50 <pow+0x68>
 8011e20:	2200      	movs	r2, #0
 8011e22:	2300      	movs	r3, #0
 8011e24:	4620      	mov	r0, r4
 8011e26:	4629      	mov	r1, r5
 8011e28:	f7ee fe4e 	bl	8000ac8 <__aeabi_dcmpeq>
 8011e2c:	2800      	cmp	r0, #0
 8011e2e:	d146      	bne.n	8011ebe <pow+0xd6>
 8011e30:	ec45 4b10 	vmov	d0, r4, r5
 8011e34:	f001 ffbd 	bl	8013db2 <finite>
 8011e38:	b338      	cbz	r0, 8011e8a <pow+0xa2>
 8011e3a:	2200      	movs	r2, #0
 8011e3c:	2300      	movs	r3, #0
 8011e3e:	4620      	mov	r0, r4
 8011e40:	4629      	mov	r1, r5
 8011e42:	f7ee fe4b 	bl	8000adc <__aeabi_dcmplt>
 8011e46:	b300      	cbz	r0, 8011e8a <pow+0xa2>
 8011e48:	f7fd f830 	bl	800eeac <__errno>
 8011e4c:	2322      	movs	r3, #34	; 0x22
 8011e4e:	e01b      	b.n	8011e88 <pow+0xa0>
 8011e50:	ec47 6b10 	vmov	d0, r6, r7
 8011e54:	f001 ffad 	bl	8013db2 <finite>
 8011e58:	b9e0      	cbnz	r0, 8011e94 <pow+0xac>
 8011e5a:	eeb0 0a48 	vmov.f32	s0, s16
 8011e5e:	eef0 0a68 	vmov.f32	s1, s17
 8011e62:	f001 ffa6 	bl	8013db2 <finite>
 8011e66:	b1a8      	cbz	r0, 8011e94 <pow+0xac>
 8011e68:	ec45 4b10 	vmov	d0, r4, r5
 8011e6c:	f001 ffa1 	bl	8013db2 <finite>
 8011e70:	b180      	cbz	r0, 8011e94 <pow+0xac>
 8011e72:	4632      	mov	r2, r6
 8011e74:	463b      	mov	r3, r7
 8011e76:	4630      	mov	r0, r6
 8011e78:	4639      	mov	r1, r7
 8011e7a:	f7ee fe57 	bl	8000b2c <__aeabi_dcmpun>
 8011e7e:	2800      	cmp	r0, #0
 8011e80:	d0e2      	beq.n	8011e48 <pow+0x60>
 8011e82:	f7fd f813 	bl	800eeac <__errno>
 8011e86:	2321      	movs	r3, #33	; 0x21
 8011e88:	6003      	str	r3, [r0, #0]
 8011e8a:	ecbd 8b02 	vpop	{d8}
 8011e8e:	ec47 6b10 	vmov	d0, r6, r7
 8011e92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011e94:	2200      	movs	r2, #0
 8011e96:	2300      	movs	r3, #0
 8011e98:	4630      	mov	r0, r6
 8011e9a:	4639      	mov	r1, r7
 8011e9c:	f7ee fe14 	bl	8000ac8 <__aeabi_dcmpeq>
 8011ea0:	2800      	cmp	r0, #0
 8011ea2:	d0f2      	beq.n	8011e8a <pow+0xa2>
 8011ea4:	eeb0 0a48 	vmov.f32	s0, s16
 8011ea8:	eef0 0a68 	vmov.f32	s1, s17
 8011eac:	f001 ff81 	bl	8013db2 <finite>
 8011eb0:	2800      	cmp	r0, #0
 8011eb2:	d0ea      	beq.n	8011e8a <pow+0xa2>
 8011eb4:	ec45 4b10 	vmov	d0, r4, r5
 8011eb8:	f001 ff7b 	bl	8013db2 <finite>
 8011ebc:	e7c3      	b.n	8011e46 <pow+0x5e>
 8011ebe:	4f01      	ldr	r7, [pc, #4]	; (8011ec4 <pow+0xdc>)
 8011ec0:	2600      	movs	r6, #0
 8011ec2:	e7e2      	b.n	8011e8a <pow+0xa2>
 8011ec4:	3ff00000 	.word	0x3ff00000

08011ec8 <asinf>:
 8011ec8:	b508      	push	{r3, lr}
 8011eca:	ed2d 8b02 	vpush	{d8}
 8011ece:	eeb0 8a40 	vmov.f32	s16, s0
 8011ed2:	f000 fe61 	bl	8012b98 <__ieee754_asinf>
 8011ed6:	eeb4 8a48 	vcmp.f32	s16, s16
 8011eda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ede:	eef0 8a40 	vmov.f32	s17, s0
 8011ee2:	d615      	bvs.n	8011f10 <asinf+0x48>
 8011ee4:	eeb0 0a48 	vmov.f32	s0, s16
 8011ee8:	f002 f8c8 	bl	801407c <fabsf>
 8011eec:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8011ef0:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8011ef4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ef8:	dd0a      	ble.n	8011f10 <asinf+0x48>
 8011efa:	f7fc ffd7 	bl	800eeac <__errno>
 8011efe:	ecbd 8b02 	vpop	{d8}
 8011f02:	2321      	movs	r3, #33	; 0x21
 8011f04:	6003      	str	r3, [r0, #0]
 8011f06:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8011f0a:	4804      	ldr	r0, [pc, #16]	; (8011f1c <asinf+0x54>)
 8011f0c:	f002 b90c 	b.w	8014128 <nanf>
 8011f10:	eeb0 0a68 	vmov.f32	s0, s17
 8011f14:	ecbd 8b02 	vpop	{d8}
 8011f18:	bd08      	pop	{r3, pc}
 8011f1a:	bf00      	nop
 8011f1c:	08014698 	.word	0x08014698

08011f20 <atan2f>:
 8011f20:	f000 bf20 	b.w	8012d64 <__ieee754_atan2f>

08011f24 <powf>:
 8011f24:	b508      	push	{r3, lr}
 8011f26:	ed2d 8b04 	vpush	{d8-d9}
 8011f2a:	eeb0 8a60 	vmov.f32	s16, s1
 8011f2e:	eeb0 9a40 	vmov.f32	s18, s0
 8011f32:	f000 ffb7 	bl	8012ea4 <__ieee754_powf>
 8011f36:	eeb4 8a48 	vcmp.f32	s16, s16
 8011f3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f3e:	eef0 8a40 	vmov.f32	s17, s0
 8011f42:	d63e      	bvs.n	8011fc2 <powf+0x9e>
 8011f44:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8011f48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f4c:	d112      	bne.n	8011f74 <powf+0x50>
 8011f4e:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8011f52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f56:	d039      	beq.n	8011fcc <powf+0xa8>
 8011f58:	eeb0 0a48 	vmov.f32	s0, s16
 8011f5c:	f002 f895 	bl	801408a <finitef>
 8011f60:	b378      	cbz	r0, 8011fc2 <powf+0x9e>
 8011f62:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8011f66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f6a:	d52a      	bpl.n	8011fc2 <powf+0x9e>
 8011f6c:	f7fc ff9e 	bl	800eeac <__errno>
 8011f70:	2322      	movs	r3, #34	; 0x22
 8011f72:	e014      	b.n	8011f9e <powf+0x7a>
 8011f74:	f002 f889 	bl	801408a <finitef>
 8011f78:	b998      	cbnz	r0, 8011fa2 <powf+0x7e>
 8011f7a:	eeb0 0a49 	vmov.f32	s0, s18
 8011f7e:	f002 f884 	bl	801408a <finitef>
 8011f82:	b170      	cbz	r0, 8011fa2 <powf+0x7e>
 8011f84:	eeb0 0a48 	vmov.f32	s0, s16
 8011f88:	f002 f87f 	bl	801408a <finitef>
 8011f8c:	b148      	cbz	r0, 8011fa2 <powf+0x7e>
 8011f8e:	eef4 8a68 	vcmp.f32	s17, s17
 8011f92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f96:	d7e9      	bvc.n	8011f6c <powf+0x48>
 8011f98:	f7fc ff88 	bl	800eeac <__errno>
 8011f9c:	2321      	movs	r3, #33	; 0x21
 8011f9e:	6003      	str	r3, [r0, #0]
 8011fa0:	e00f      	b.n	8011fc2 <powf+0x9e>
 8011fa2:	eef5 8a40 	vcmp.f32	s17, #0.0
 8011fa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011faa:	d10a      	bne.n	8011fc2 <powf+0x9e>
 8011fac:	eeb0 0a49 	vmov.f32	s0, s18
 8011fb0:	f002 f86b 	bl	801408a <finitef>
 8011fb4:	b128      	cbz	r0, 8011fc2 <powf+0x9e>
 8011fb6:	eeb0 0a48 	vmov.f32	s0, s16
 8011fba:	f002 f866 	bl	801408a <finitef>
 8011fbe:	2800      	cmp	r0, #0
 8011fc0:	d1d4      	bne.n	8011f6c <powf+0x48>
 8011fc2:	eeb0 0a68 	vmov.f32	s0, s17
 8011fc6:	ecbd 8b04 	vpop	{d8-d9}
 8011fca:	bd08      	pop	{r3, pc}
 8011fcc:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8011fd0:	e7f7      	b.n	8011fc2 <powf+0x9e>
 8011fd2:	0000      	movs	r0, r0
 8011fd4:	0000      	movs	r0, r0
	...

08011fd8 <__ieee754_pow>:
 8011fd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011fdc:	ed2d 8b06 	vpush	{d8-d10}
 8011fe0:	b089      	sub	sp, #36	; 0x24
 8011fe2:	ed8d 1b00 	vstr	d1, [sp]
 8011fe6:	e9dd 2900 	ldrd	r2, r9, [sp]
 8011fea:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8011fee:	ea58 0102 	orrs.w	r1, r8, r2
 8011ff2:	ec57 6b10 	vmov	r6, r7, d0
 8011ff6:	d115      	bne.n	8012024 <__ieee754_pow+0x4c>
 8011ff8:	19b3      	adds	r3, r6, r6
 8011ffa:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8011ffe:	4152      	adcs	r2, r2
 8012000:	4299      	cmp	r1, r3
 8012002:	4b89      	ldr	r3, [pc, #548]	; (8012228 <__ieee754_pow+0x250>)
 8012004:	4193      	sbcs	r3, r2
 8012006:	f080 84d2 	bcs.w	80129ae <__ieee754_pow+0x9d6>
 801200a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801200e:	4630      	mov	r0, r6
 8012010:	4639      	mov	r1, r7
 8012012:	f7ee f93b 	bl	800028c <__adddf3>
 8012016:	ec41 0b10 	vmov	d0, r0, r1
 801201a:	b009      	add	sp, #36	; 0x24
 801201c:	ecbd 8b06 	vpop	{d8-d10}
 8012020:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012024:	4b81      	ldr	r3, [pc, #516]	; (801222c <__ieee754_pow+0x254>)
 8012026:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 801202a:	429c      	cmp	r4, r3
 801202c:	ee10 aa10 	vmov	sl, s0
 8012030:	463d      	mov	r5, r7
 8012032:	dc06      	bgt.n	8012042 <__ieee754_pow+0x6a>
 8012034:	d101      	bne.n	801203a <__ieee754_pow+0x62>
 8012036:	2e00      	cmp	r6, #0
 8012038:	d1e7      	bne.n	801200a <__ieee754_pow+0x32>
 801203a:	4598      	cmp	r8, r3
 801203c:	dc01      	bgt.n	8012042 <__ieee754_pow+0x6a>
 801203e:	d10f      	bne.n	8012060 <__ieee754_pow+0x88>
 8012040:	b172      	cbz	r2, 8012060 <__ieee754_pow+0x88>
 8012042:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8012046:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 801204a:	ea55 050a 	orrs.w	r5, r5, sl
 801204e:	d1dc      	bne.n	801200a <__ieee754_pow+0x32>
 8012050:	e9dd 3200 	ldrd	r3, r2, [sp]
 8012054:	18db      	adds	r3, r3, r3
 8012056:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 801205a:	4152      	adcs	r2, r2
 801205c:	429d      	cmp	r5, r3
 801205e:	e7d0      	b.n	8012002 <__ieee754_pow+0x2a>
 8012060:	2d00      	cmp	r5, #0
 8012062:	da3b      	bge.n	80120dc <__ieee754_pow+0x104>
 8012064:	4b72      	ldr	r3, [pc, #456]	; (8012230 <__ieee754_pow+0x258>)
 8012066:	4598      	cmp	r8, r3
 8012068:	dc51      	bgt.n	801210e <__ieee754_pow+0x136>
 801206a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 801206e:	4598      	cmp	r8, r3
 8012070:	f340 84ac 	ble.w	80129cc <__ieee754_pow+0x9f4>
 8012074:	ea4f 5328 	mov.w	r3, r8, asr #20
 8012078:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801207c:	2b14      	cmp	r3, #20
 801207e:	dd0f      	ble.n	80120a0 <__ieee754_pow+0xc8>
 8012080:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8012084:	fa22 f103 	lsr.w	r1, r2, r3
 8012088:	fa01 f303 	lsl.w	r3, r1, r3
 801208c:	4293      	cmp	r3, r2
 801208e:	f040 849d 	bne.w	80129cc <__ieee754_pow+0x9f4>
 8012092:	f001 0101 	and.w	r1, r1, #1
 8012096:	f1c1 0302 	rsb	r3, r1, #2
 801209a:	9304      	str	r3, [sp, #16]
 801209c:	b182      	cbz	r2, 80120c0 <__ieee754_pow+0xe8>
 801209e:	e05f      	b.n	8012160 <__ieee754_pow+0x188>
 80120a0:	2a00      	cmp	r2, #0
 80120a2:	d15b      	bne.n	801215c <__ieee754_pow+0x184>
 80120a4:	f1c3 0314 	rsb	r3, r3, #20
 80120a8:	fa48 f103 	asr.w	r1, r8, r3
 80120ac:	fa01 f303 	lsl.w	r3, r1, r3
 80120b0:	4543      	cmp	r3, r8
 80120b2:	f040 8488 	bne.w	80129c6 <__ieee754_pow+0x9ee>
 80120b6:	f001 0101 	and.w	r1, r1, #1
 80120ba:	f1c1 0302 	rsb	r3, r1, #2
 80120be:	9304      	str	r3, [sp, #16]
 80120c0:	4b5c      	ldr	r3, [pc, #368]	; (8012234 <__ieee754_pow+0x25c>)
 80120c2:	4598      	cmp	r8, r3
 80120c4:	d132      	bne.n	801212c <__ieee754_pow+0x154>
 80120c6:	f1b9 0f00 	cmp.w	r9, #0
 80120ca:	f280 8478 	bge.w	80129be <__ieee754_pow+0x9e6>
 80120ce:	4959      	ldr	r1, [pc, #356]	; (8012234 <__ieee754_pow+0x25c>)
 80120d0:	4632      	mov	r2, r6
 80120d2:	463b      	mov	r3, r7
 80120d4:	2000      	movs	r0, #0
 80120d6:	f7ee fbb9 	bl	800084c <__aeabi_ddiv>
 80120da:	e79c      	b.n	8012016 <__ieee754_pow+0x3e>
 80120dc:	2300      	movs	r3, #0
 80120de:	9304      	str	r3, [sp, #16]
 80120e0:	2a00      	cmp	r2, #0
 80120e2:	d13d      	bne.n	8012160 <__ieee754_pow+0x188>
 80120e4:	4b51      	ldr	r3, [pc, #324]	; (801222c <__ieee754_pow+0x254>)
 80120e6:	4598      	cmp	r8, r3
 80120e8:	d1ea      	bne.n	80120c0 <__ieee754_pow+0xe8>
 80120ea:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80120ee:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80120f2:	ea53 030a 	orrs.w	r3, r3, sl
 80120f6:	f000 845a 	beq.w	80129ae <__ieee754_pow+0x9d6>
 80120fa:	4b4f      	ldr	r3, [pc, #316]	; (8012238 <__ieee754_pow+0x260>)
 80120fc:	429c      	cmp	r4, r3
 80120fe:	dd08      	ble.n	8012112 <__ieee754_pow+0x13a>
 8012100:	f1b9 0f00 	cmp.w	r9, #0
 8012104:	f2c0 8457 	blt.w	80129b6 <__ieee754_pow+0x9de>
 8012108:	e9dd 0100 	ldrd	r0, r1, [sp]
 801210c:	e783      	b.n	8012016 <__ieee754_pow+0x3e>
 801210e:	2302      	movs	r3, #2
 8012110:	e7e5      	b.n	80120de <__ieee754_pow+0x106>
 8012112:	f1b9 0f00 	cmp.w	r9, #0
 8012116:	f04f 0000 	mov.w	r0, #0
 801211a:	f04f 0100 	mov.w	r1, #0
 801211e:	f6bf af7a 	bge.w	8012016 <__ieee754_pow+0x3e>
 8012122:	e9dd 0300 	ldrd	r0, r3, [sp]
 8012126:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801212a:	e774      	b.n	8012016 <__ieee754_pow+0x3e>
 801212c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8012130:	d106      	bne.n	8012140 <__ieee754_pow+0x168>
 8012132:	4632      	mov	r2, r6
 8012134:	463b      	mov	r3, r7
 8012136:	4630      	mov	r0, r6
 8012138:	4639      	mov	r1, r7
 801213a:	f7ee fa5d 	bl	80005f8 <__aeabi_dmul>
 801213e:	e76a      	b.n	8012016 <__ieee754_pow+0x3e>
 8012140:	4b3e      	ldr	r3, [pc, #248]	; (801223c <__ieee754_pow+0x264>)
 8012142:	4599      	cmp	r9, r3
 8012144:	d10c      	bne.n	8012160 <__ieee754_pow+0x188>
 8012146:	2d00      	cmp	r5, #0
 8012148:	db0a      	blt.n	8012160 <__ieee754_pow+0x188>
 801214a:	ec47 6b10 	vmov	d0, r6, r7
 801214e:	b009      	add	sp, #36	; 0x24
 8012150:	ecbd 8b06 	vpop	{d8-d10}
 8012154:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012158:	f000 bc6c 	b.w	8012a34 <__ieee754_sqrt>
 801215c:	2300      	movs	r3, #0
 801215e:	9304      	str	r3, [sp, #16]
 8012160:	ec47 6b10 	vmov	d0, r6, r7
 8012164:	f001 fe1c 	bl	8013da0 <fabs>
 8012168:	ec51 0b10 	vmov	r0, r1, d0
 801216c:	f1ba 0f00 	cmp.w	sl, #0
 8012170:	d129      	bne.n	80121c6 <__ieee754_pow+0x1ee>
 8012172:	b124      	cbz	r4, 801217e <__ieee754_pow+0x1a6>
 8012174:	4b2f      	ldr	r3, [pc, #188]	; (8012234 <__ieee754_pow+0x25c>)
 8012176:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 801217a:	429a      	cmp	r2, r3
 801217c:	d123      	bne.n	80121c6 <__ieee754_pow+0x1ee>
 801217e:	f1b9 0f00 	cmp.w	r9, #0
 8012182:	da05      	bge.n	8012190 <__ieee754_pow+0x1b8>
 8012184:	4602      	mov	r2, r0
 8012186:	460b      	mov	r3, r1
 8012188:	2000      	movs	r0, #0
 801218a:	492a      	ldr	r1, [pc, #168]	; (8012234 <__ieee754_pow+0x25c>)
 801218c:	f7ee fb5e 	bl	800084c <__aeabi_ddiv>
 8012190:	2d00      	cmp	r5, #0
 8012192:	f6bf af40 	bge.w	8012016 <__ieee754_pow+0x3e>
 8012196:	9b04      	ldr	r3, [sp, #16]
 8012198:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801219c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80121a0:	4323      	orrs	r3, r4
 80121a2:	d108      	bne.n	80121b6 <__ieee754_pow+0x1de>
 80121a4:	4602      	mov	r2, r0
 80121a6:	460b      	mov	r3, r1
 80121a8:	4610      	mov	r0, r2
 80121aa:	4619      	mov	r1, r3
 80121ac:	f7ee f86c 	bl	8000288 <__aeabi_dsub>
 80121b0:	4602      	mov	r2, r0
 80121b2:	460b      	mov	r3, r1
 80121b4:	e78f      	b.n	80120d6 <__ieee754_pow+0xfe>
 80121b6:	9b04      	ldr	r3, [sp, #16]
 80121b8:	2b01      	cmp	r3, #1
 80121ba:	f47f af2c 	bne.w	8012016 <__ieee754_pow+0x3e>
 80121be:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80121c2:	4619      	mov	r1, r3
 80121c4:	e727      	b.n	8012016 <__ieee754_pow+0x3e>
 80121c6:	0feb      	lsrs	r3, r5, #31
 80121c8:	3b01      	subs	r3, #1
 80121ca:	9306      	str	r3, [sp, #24]
 80121cc:	9a06      	ldr	r2, [sp, #24]
 80121ce:	9b04      	ldr	r3, [sp, #16]
 80121d0:	4313      	orrs	r3, r2
 80121d2:	d102      	bne.n	80121da <__ieee754_pow+0x202>
 80121d4:	4632      	mov	r2, r6
 80121d6:	463b      	mov	r3, r7
 80121d8:	e7e6      	b.n	80121a8 <__ieee754_pow+0x1d0>
 80121da:	4b19      	ldr	r3, [pc, #100]	; (8012240 <__ieee754_pow+0x268>)
 80121dc:	4598      	cmp	r8, r3
 80121de:	f340 80fb 	ble.w	80123d8 <__ieee754_pow+0x400>
 80121e2:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80121e6:	4598      	cmp	r8, r3
 80121e8:	4b13      	ldr	r3, [pc, #76]	; (8012238 <__ieee754_pow+0x260>)
 80121ea:	dd0c      	ble.n	8012206 <__ieee754_pow+0x22e>
 80121ec:	429c      	cmp	r4, r3
 80121ee:	dc0f      	bgt.n	8012210 <__ieee754_pow+0x238>
 80121f0:	f1b9 0f00 	cmp.w	r9, #0
 80121f4:	da0f      	bge.n	8012216 <__ieee754_pow+0x23e>
 80121f6:	2000      	movs	r0, #0
 80121f8:	b009      	add	sp, #36	; 0x24
 80121fa:	ecbd 8b06 	vpop	{d8-d10}
 80121fe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012202:	f001 bda2 	b.w	8013d4a <__math_oflow>
 8012206:	429c      	cmp	r4, r3
 8012208:	dbf2      	blt.n	80121f0 <__ieee754_pow+0x218>
 801220a:	4b0a      	ldr	r3, [pc, #40]	; (8012234 <__ieee754_pow+0x25c>)
 801220c:	429c      	cmp	r4, r3
 801220e:	dd19      	ble.n	8012244 <__ieee754_pow+0x26c>
 8012210:	f1b9 0f00 	cmp.w	r9, #0
 8012214:	dcef      	bgt.n	80121f6 <__ieee754_pow+0x21e>
 8012216:	2000      	movs	r0, #0
 8012218:	b009      	add	sp, #36	; 0x24
 801221a:	ecbd 8b06 	vpop	{d8-d10}
 801221e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012222:	f001 bd89 	b.w	8013d38 <__math_uflow>
 8012226:	bf00      	nop
 8012228:	fff00000 	.word	0xfff00000
 801222c:	7ff00000 	.word	0x7ff00000
 8012230:	433fffff 	.word	0x433fffff
 8012234:	3ff00000 	.word	0x3ff00000
 8012238:	3fefffff 	.word	0x3fefffff
 801223c:	3fe00000 	.word	0x3fe00000
 8012240:	41e00000 	.word	0x41e00000
 8012244:	4b60      	ldr	r3, [pc, #384]	; (80123c8 <__ieee754_pow+0x3f0>)
 8012246:	2200      	movs	r2, #0
 8012248:	f7ee f81e 	bl	8000288 <__aeabi_dsub>
 801224c:	a354      	add	r3, pc, #336	; (adr r3, 80123a0 <__ieee754_pow+0x3c8>)
 801224e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012252:	4604      	mov	r4, r0
 8012254:	460d      	mov	r5, r1
 8012256:	f7ee f9cf 	bl	80005f8 <__aeabi_dmul>
 801225a:	a353      	add	r3, pc, #332	; (adr r3, 80123a8 <__ieee754_pow+0x3d0>)
 801225c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012260:	4606      	mov	r6, r0
 8012262:	460f      	mov	r7, r1
 8012264:	4620      	mov	r0, r4
 8012266:	4629      	mov	r1, r5
 8012268:	f7ee f9c6 	bl	80005f8 <__aeabi_dmul>
 801226c:	4b57      	ldr	r3, [pc, #348]	; (80123cc <__ieee754_pow+0x3f4>)
 801226e:	4682      	mov	sl, r0
 8012270:	468b      	mov	fp, r1
 8012272:	2200      	movs	r2, #0
 8012274:	4620      	mov	r0, r4
 8012276:	4629      	mov	r1, r5
 8012278:	f7ee f9be 	bl	80005f8 <__aeabi_dmul>
 801227c:	4602      	mov	r2, r0
 801227e:	460b      	mov	r3, r1
 8012280:	a14b      	add	r1, pc, #300	; (adr r1, 80123b0 <__ieee754_pow+0x3d8>)
 8012282:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012286:	f7ed ffff 	bl	8000288 <__aeabi_dsub>
 801228a:	4622      	mov	r2, r4
 801228c:	462b      	mov	r3, r5
 801228e:	f7ee f9b3 	bl	80005f8 <__aeabi_dmul>
 8012292:	4602      	mov	r2, r0
 8012294:	460b      	mov	r3, r1
 8012296:	2000      	movs	r0, #0
 8012298:	494d      	ldr	r1, [pc, #308]	; (80123d0 <__ieee754_pow+0x3f8>)
 801229a:	f7ed fff5 	bl	8000288 <__aeabi_dsub>
 801229e:	4622      	mov	r2, r4
 80122a0:	4680      	mov	r8, r0
 80122a2:	4689      	mov	r9, r1
 80122a4:	462b      	mov	r3, r5
 80122a6:	4620      	mov	r0, r4
 80122a8:	4629      	mov	r1, r5
 80122aa:	f7ee f9a5 	bl	80005f8 <__aeabi_dmul>
 80122ae:	4602      	mov	r2, r0
 80122b0:	460b      	mov	r3, r1
 80122b2:	4640      	mov	r0, r8
 80122b4:	4649      	mov	r1, r9
 80122b6:	f7ee f99f 	bl	80005f8 <__aeabi_dmul>
 80122ba:	a33f      	add	r3, pc, #252	; (adr r3, 80123b8 <__ieee754_pow+0x3e0>)
 80122bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122c0:	f7ee f99a 	bl	80005f8 <__aeabi_dmul>
 80122c4:	4602      	mov	r2, r0
 80122c6:	460b      	mov	r3, r1
 80122c8:	4650      	mov	r0, sl
 80122ca:	4659      	mov	r1, fp
 80122cc:	f7ed ffdc 	bl	8000288 <__aeabi_dsub>
 80122d0:	4602      	mov	r2, r0
 80122d2:	460b      	mov	r3, r1
 80122d4:	4680      	mov	r8, r0
 80122d6:	4689      	mov	r9, r1
 80122d8:	4630      	mov	r0, r6
 80122da:	4639      	mov	r1, r7
 80122dc:	f7ed ffd6 	bl	800028c <__adddf3>
 80122e0:	2000      	movs	r0, #0
 80122e2:	4632      	mov	r2, r6
 80122e4:	463b      	mov	r3, r7
 80122e6:	4604      	mov	r4, r0
 80122e8:	460d      	mov	r5, r1
 80122ea:	f7ed ffcd 	bl	8000288 <__aeabi_dsub>
 80122ee:	4602      	mov	r2, r0
 80122f0:	460b      	mov	r3, r1
 80122f2:	4640      	mov	r0, r8
 80122f4:	4649      	mov	r1, r9
 80122f6:	f7ed ffc7 	bl	8000288 <__aeabi_dsub>
 80122fa:	9b04      	ldr	r3, [sp, #16]
 80122fc:	9a06      	ldr	r2, [sp, #24]
 80122fe:	3b01      	subs	r3, #1
 8012300:	4313      	orrs	r3, r2
 8012302:	4682      	mov	sl, r0
 8012304:	468b      	mov	fp, r1
 8012306:	f040 81e7 	bne.w	80126d8 <__ieee754_pow+0x700>
 801230a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 80123c0 <__ieee754_pow+0x3e8>
 801230e:	eeb0 8a47 	vmov.f32	s16, s14
 8012312:	eef0 8a67 	vmov.f32	s17, s15
 8012316:	e9dd 6700 	ldrd	r6, r7, [sp]
 801231a:	2600      	movs	r6, #0
 801231c:	4632      	mov	r2, r6
 801231e:	463b      	mov	r3, r7
 8012320:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012324:	f7ed ffb0 	bl	8000288 <__aeabi_dsub>
 8012328:	4622      	mov	r2, r4
 801232a:	462b      	mov	r3, r5
 801232c:	f7ee f964 	bl	80005f8 <__aeabi_dmul>
 8012330:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012334:	4680      	mov	r8, r0
 8012336:	4689      	mov	r9, r1
 8012338:	4650      	mov	r0, sl
 801233a:	4659      	mov	r1, fp
 801233c:	f7ee f95c 	bl	80005f8 <__aeabi_dmul>
 8012340:	4602      	mov	r2, r0
 8012342:	460b      	mov	r3, r1
 8012344:	4640      	mov	r0, r8
 8012346:	4649      	mov	r1, r9
 8012348:	f7ed ffa0 	bl	800028c <__adddf3>
 801234c:	4632      	mov	r2, r6
 801234e:	463b      	mov	r3, r7
 8012350:	4680      	mov	r8, r0
 8012352:	4689      	mov	r9, r1
 8012354:	4620      	mov	r0, r4
 8012356:	4629      	mov	r1, r5
 8012358:	f7ee f94e 	bl	80005f8 <__aeabi_dmul>
 801235c:	460b      	mov	r3, r1
 801235e:	4604      	mov	r4, r0
 8012360:	460d      	mov	r5, r1
 8012362:	4602      	mov	r2, r0
 8012364:	4649      	mov	r1, r9
 8012366:	4640      	mov	r0, r8
 8012368:	f7ed ff90 	bl	800028c <__adddf3>
 801236c:	4b19      	ldr	r3, [pc, #100]	; (80123d4 <__ieee754_pow+0x3fc>)
 801236e:	4299      	cmp	r1, r3
 8012370:	ec45 4b19 	vmov	d9, r4, r5
 8012374:	4606      	mov	r6, r0
 8012376:	460f      	mov	r7, r1
 8012378:	468b      	mov	fp, r1
 801237a:	f340 82f1 	ble.w	8012960 <__ieee754_pow+0x988>
 801237e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8012382:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8012386:	4303      	orrs	r3, r0
 8012388:	f000 81e4 	beq.w	8012754 <__ieee754_pow+0x77c>
 801238c:	ec51 0b18 	vmov	r0, r1, d8
 8012390:	2200      	movs	r2, #0
 8012392:	2300      	movs	r3, #0
 8012394:	f7ee fba2 	bl	8000adc <__aeabi_dcmplt>
 8012398:	3800      	subs	r0, #0
 801239a:	bf18      	it	ne
 801239c:	2001      	movne	r0, #1
 801239e:	e72b      	b.n	80121f8 <__ieee754_pow+0x220>
 80123a0:	60000000 	.word	0x60000000
 80123a4:	3ff71547 	.word	0x3ff71547
 80123a8:	f85ddf44 	.word	0xf85ddf44
 80123ac:	3e54ae0b 	.word	0x3e54ae0b
 80123b0:	55555555 	.word	0x55555555
 80123b4:	3fd55555 	.word	0x3fd55555
 80123b8:	652b82fe 	.word	0x652b82fe
 80123bc:	3ff71547 	.word	0x3ff71547
 80123c0:	00000000 	.word	0x00000000
 80123c4:	bff00000 	.word	0xbff00000
 80123c8:	3ff00000 	.word	0x3ff00000
 80123cc:	3fd00000 	.word	0x3fd00000
 80123d0:	3fe00000 	.word	0x3fe00000
 80123d4:	408fffff 	.word	0x408fffff
 80123d8:	4bd5      	ldr	r3, [pc, #852]	; (8012730 <__ieee754_pow+0x758>)
 80123da:	402b      	ands	r3, r5
 80123dc:	2200      	movs	r2, #0
 80123de:	b92b      	cbnz	r3, 80123ec <__ieee754_pow+0x414>
 80123e0:	4bd4      	ldr	r3, [pc, #848]	; (8012734 <__ieee754_pow+0x75c>)
 80123e2:	f7ee f909 	bl	80005f8 <__aeabi_dmul>
 80123e6:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80123ea:	460c      	mov	r4, r1
 80123ec:	1523      	asrs	r3, r4, #20
 80123ee:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80123f2:	4413      	add	r3, r2
 80123f4:	9305      	str	r3, [sp, #20]
 80123f6:	4bd0      	ldr	r3, [pc, #832]	; (8012738 <__ieee754_pow+0x760>)
 80123f8:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80123fc:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8012400:	429c      	cmp	r4, r3
 8012402:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8012406:	dd08      	ble.n	801241a <__ieee754_pow+0x442>
 8012408:	4bcc      	ldr	r3, [pc, #816]	; (801273c <__ieee754_pow+0x764>)
 801240a:	429c      	cmp	r4, r3
 801240c:	f340 8162 	ble.w	80126d4 <__ieee754_pow+0x6fc>
 8012410:	9b05      	ldr	r3, [sp, #20]
 8012412:	3301      	adds	r3, #1
 8012414:	9305      	str	r3, [sp, #20]
 8012416:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 801241a:	2400      	movs	r4, #0
 801241c:	00e3      	lsls	r3, r4, #3
 801241e:	9307      	str	r3, [sp, #28]
 8012420:	4bc7      	ldr	r3, [pc, #796]	; (8012740 <__ieee754_pow+0x768>)
 8012422:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8012426:	ed93 7b00 	vldr	d7, [r3]
 801242a:	4629      	mov	r1, r5
 801242c:	ec53 2b17 	vmov	r2, r3, d7
 8012430:	eeb0 9a47 	vmov.f32	s18, s14
 8012434:	eef0 9a67 	vmov.f32	s19, s15
 8012438:	4682      	mov	sl, r0
 801243a:	f7ed ff25 	bl	8000288 <__aeabi_dsub>
 801243e:	4652      	mov	r2, sl
 8012440:	4606      	mov	r6, r0
 8012442:	460f      	mov	r7, r1
 8012444:	462b      	mov	r3, r5
 8012446:	ec51 0b19 	vmov	r0, r1, d9
 801244a:	f7ed ff1f 	bl	800028c <__adddf3>
 801244e:	4602      	mov	r2, r0
 8012450:	460b      	mov	r3, r1
 8012452:	2000      	movs	r0, #0
 8012454:	49bb      	ldr	r1, [pc, #748]	; (8012744 <__ieee754_pow+0x76c>)
 8012456:	f7ee f9f9 	bl	800084c <__aeabi_ddiv>
 801245a:	ec41 0b1a 	vmov	d10, r0, r1
 801245e:	4602      	mov	r2, r0
 8012460:	460b      	mov	r3, r1
 8012462:	4630      	mov	r0, r6
 8012464:	4639      	mov	r1, r7
 8012466:	f7ee f8c7 	bl	80005f8 <__aeabi_dmul>
 801246a:	2300      	movs	r3, #0
 801246c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012470:	9302      	str	r3, [sp, #8]
 8012472:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8012476:	46ab      	mov	fp, r5
 8012478:	106d      	asrs	r5, r5, #1
 801247a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 801247e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8012482:	ec41 0b18 	vmov	d8, r0, r1
 8012486:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 801248a:	2200      	movs	r2, #0
 801248c:	4640      	mov	r0, r8
 801248e:	4649      	mov	r1, r9
 8012490:	4614      	mov	r4, r2
 8012492:	461d      	mov	r5, r3
 8012494:	f7ee f8b0 	bl	80005f8 <__aeabi_dmul>
 8012498:	4602      	mov	r2, r0
 801249a:	460b      	mov	r3, r1
 801249c:	4630      	mov	r0, r6
 801249e:	4639      	mov	r1, r7
 80124a0:	f7ed fef2 	bl	8000288 <__aeabi_dsub>
 80124a4:	ec53 2b19 	vmov	r2, r3, d9
 80124a8:	4606      	mov	r6, r0
 80124aa:	460f      	mov	r7, r1
 80124ac:	4620      	mov	r0, r4
 80124ae:	4629      	mov	r1, r5
 80124b0:	f7ed feea 	bl	8000288 <__aeabi_dsub>
 80124b4:	4602      	mov	r2, r0
 80124b6:	460b      	mov	r3, r1
 80124b8:	4650      	mov	r0, sl
 80124ba:	4659      	mov	r1, fp
 80124bc:	f7ed fee4 	bl	8000288 <__aeabi_dsub>
 80124c0:	4642      	mov	r2, r8
 80124c2:	464b      	mov	r3, r9
 80124c4:	f7ee f898 	bl	80005f8 <__aeabi_dmul>
 80124c8:	4602      	mov	r2, r0
 80124ca:	460b      	mov	r3, r1
 80124cc:	4630      	mov	r0, r6
 80124ce:	4639      	mov	r1, r7
 80124d0:	f7ed feda 	bl	8000288 <__aeabi_dsub>
 80124d4:	ec53 2b1a 	vmov	r2, r3, d10
 80124d8:	f7ee f88e 	bl	80005f8 <__aeabi_dmul>
 80124dc:	ec53 2b18 	vmov	r2, r3, d8
 80124e0:	ec41 0b19 	vmov	d9, r0, r1
 80124e4:	ec51 0b18 	vmov	r0, r1, d8
 80124e8:	f7ee f886 	bl	80005f8 <__aeabi_dmul>
 80124ec:	a37c      	add	r3, pc, #496	; (adr r3, 80126e0 <__ieee754_pow+0x708>)
 80124ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124f2:	4604      	mov	r4, r0
 80124f4:	460d      	mov	r5, r1
 80124f6:	f7ee f87f 	bl	80005f8 <__aeabi_dmul>
 80124fa:	a37b      	add	r3, pc, #492	; (adr r3, 80126e8 <__ieee754_pow+0x710>)
 80124fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012500:	f7ed fec4 	bl	800028c <__adddf3>
 8012504:	4622      	mov	r2, r4
 8012506:	462b      	mov	r3, r5
 8012508:	f7ee f876 	bl	80005f8 <__aeabi_dmul>
 801250c:	a378      	add	r3, pc, #480	; (adr r3, 80126f0 <__ieee754_pow+0x718>)
 801250e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012512:	f7ed febb 	bl	800028c <__adddf3>
 8012516:	4622      	mov	r2, r4
 8012518:	462b      	mov	r3, r5
 801251a:	f7ee f86d 	bl	80005f8 <__aeabi_dmul>
 801251e:	a376      	add	r3, pc, #472	; (adr r3, 80126f8 <__ieee754_pow+0x720>)
 8012520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012524:	f7ed feb2 	bl	800028c <__adddf3>
 8012528:	4622      	mov	r2, r4
 801252a:	462b      	mov	r3, r5
 801252c:	f7ee f864 	bl	80005f8 <__aeabi_dmul>
 8012530:	a373      	add	r3, pc, #460	; (adr r3, 8012700 <__ieee754_pow+0x728>)
 8012532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012536:	f7ed fea9 	bl	800028c <__adddf3>
 801253a:	4622      	mov	r2, r4
 801253c:	462b      	mov	r3, r5
 801253e:	f7ee f85b 	bl	80005f8 <__aeabi_dmul>
 8012542:	a371      	add	r3, pc, #452	; (adr r3, 8012708 <__ieee754_pow+0x730>)
 8012544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012548:	f7ed fea0 	bl	800028c <__adddf3>
 801254c:	4622      	mov	r2, r4
 801254e:	4606      	mov	r6, r0
 8012550:	460f      	mov	r7, r1
 8012552:	462b      	mov	r3, r5
 8012554:	4620      	mov	r0, r4
 8012556:	4629      	mov	r1, r5
 8012558:	f7ee f84e 	bl	80005f8 <__aeabi_dmul>
 801255c:	4602      	mov	r2, r0
 801255e:	460b      	mov	r3, r1
 8012560:	4630      	mov	r0, r6
 8012562:	4639      	mov	r1, r7
 8012564:	f7ee f848 	bl	80005f8 <__aeabi_dmul>
 8012568:	4642      	mov	r2, r8
 801256a:	4604      	mov	r4, r0
 801256c:	460d      	mov	r5, r1
 801256e:	464b      	mov	r3, r9
 8012570:	ec51 0b18 	vmov	r0, r1, d8
 8012574:	f7ed fe8a 	bl	800028c <__adddf3>
 8012578:	ec53 2b19 	vmov	r2, r3, d9
 801257c:	f7ee f83c 	bl	80005f8 <__aeabi_dmul>
 8012580:	4622      	mov	r2, r4
 8012582:	462b      	mov	r3, r5
 8012584:	f7ed fe82 	bl	800028c <__adddf3>
 8012588:	4642      	mov	r2, r8
 801258a:	4682      	mov	sl, r0
 801258c:	468b      	mov	fp, r1
 801258e:	464b      	mov	r3, r9
 8012590:	4640      	mov	r0, r8
 8012592:	4649      	mov	r1, r9
 8012594:	f7ee f830 	bl	80005f8 <__aeabi_dmul>
 8012598:	4b6b      	ldr	r3, [pc, #428]	; (8012748 <__ieee754_pow+0x770>)
 801259a:	2200      	movs	r2, #0
 801259c:	4606      	mov	r6, r0
 801259e:	460f      	mov	r7, r1
 80125a0:	f7ed fe74 	bl	800028c <__adddf3>
 80125a4:	4652      	mov	r2, sl
 80125a6:	465b      	mov	r3, fp
 80125a8:	f7ed fe70 	bl	800028c <__adddf3>
 80125ac:	2000      	movs	r0, #0
 80125ae:	4604      	mov	r4, r0
 80125b0:	460d      	mov	r5, r1
 80125b2:	4602      	mov	r2, r0
 80125b4:	460b      	mov	r3, r1
 80125b6:	4640      	mov	r0, r8
 80125b8:	4649      	mov	r1, r9
 80125ba:	f7ee f81d 	bl	80005f8 <__aeabi_dmul>
 80125be:	4b62      	ldr	r3, [pc, #392]	; (8012748 <__ieee754_pow+0x770>)
 80125c0:	4680      	mov	r8, r0
 80125c2:	4689      	mov	r9, r1
 80125c4:	2200      	movs	r2, #0
 80125c6:	4620      	mov	r0, r4
 80125c8:	4629      	mov	r1, r5
 80125ca:	f7ed fe5d 	bl	8000288 <__aeabi_dsub>
 80125ce:	4632      	mov	r2, r6
 80125d0:	463b      	mov	r3, r7
 80125d2:	f7ed fe59 	bl	8000288 <__aeabi_dsub>
 80125d6:	4602      	mov	r2, r0
 80125d8:	460b      	mov	r3, r1
 80125da:	4650      	mov	r0, sl
 80125dc:	4659      	mov	r1, fp
 80125de:	f7ed fe53 	bl	8000288 <__aeabi_dsub>
 80125e2:	ec53 2b18 	vmov	r2, r3, d8
 80125e6:	f7ee f807 	bl	80005f8 <__aeabi_dmul>
 80125ea:	4622      	mov	r2, r4
 80125ec:	4606      	mov	r6, r0
 80125ee:	460f      	mov	r7, r1
 80125f0:	462b      	mov	r3, r5
 80125f2:	ec51 0b19 	vmov	r0, r1, d9
 80125f6:	f7ed ffff 	bl	80005f8 <__aeabi_dmul>
 80125fa:	4602      	mov	r2, r0
 80125fc:	460b      	mov	r3, r1
 80125fe:	4630      	mov	r0, r6
 8012600:	4639      	mov	r1, r7
 8012602:	f7ed fe43 	bl	800028c <__adddf3>
 8012606:	4606      	mov	r6, r0
 8012608:	460f      	mov	r7, r1
 801260a:	4602      	mov	r2, r0
 801260c:	460b      	mov	r3, r1
 801260e:	4640      	mov	r0, r8
 8012610:	4649      	mov	r1, r9
 8012612:	f7ed fe3b 	bl	800028c <__adddf3>
 8012616:	a33e      	add	r3, pc, #248	; (adr r3, 8012710 <__ieee754_pow+0x738>)
 8012618:	e9d3 2300 	ldrd	r2, r3, [r3]
 801261c:	2000      	movs	r0, #0
 801261e:	4604      	mov	r4, r0
 8012620:	460d      	mov	r5, r1
 8012622:	f7ed ffe9 	bl	80005f8 <__aeabi_dmul>
 8012626:	4642      	mov	r2, r8
 8012628:	ec41 0b18 	vmov	d8, r0, r1
 801262c:	464b      	mov	r3, r9
 801262e:	4620      	mov	r0, r4
 8012630:	4629      	mov	r1, r5
 8012632:	f7ed fe29 	bl	8000288 <__aeabi_dsub>
 8012636:	4602      	mov	r2, r0
 8012638:	460b      	mov	r3, r1
 801263a:	4630      	mov	r0, r6
 801263c:	4639      	mov	r1, r7
 801263e:	f7ed fe23 	bl	8000288 <__aeabi_dsub>
 8012642:	a335      	add	r3, pc, #212	; (adr r3, 8012718 <__ieee754_pow+0x740>)
 8012644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012648:	f7ed ffd6 	bl	80005f8 <__aeabi_dmul>
 801264c:	a334      	add	r3, pc, #208	; (adr r3, 8012720 <__ieee754_pow+0x748>)
 801264e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012652:	4606      	mov	r6, r0
 8012654:	460f      	mov	r7, r1
 8012656:	4620      	mov	r0, r4
 8012658:	4629      	mov	r1, r5
 801265a:	f7ed ffcd 	bl	80005f8 <__aeabi_dmul>
 801265e:	4602      	mov	r2, r0
 8012660:	460b      	mov	r3, r1
 8012662:	4630      	mov	r0, r6
 8012664:	4639      	mov	r1, r7
 8012666:	f7ed fe11 	bl	800028c <__adddf3>
 801266a:	9a07      	ldr	r2, [sp, #28]
 801266c:	4b37      	ldr	r3, [pc, #220]	; (801274c <__ieee754_pow+0x774>)
 801266e:	4413      	add	r3, r2
 8012670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012674:	f7ed fe0a 	bl	800028c <__adddf3>
 8012678:	4682      	mov	sl, r0
 801267a:	9805      	ldr	r0, [sp, #20]
 801267c:	468b      	mov	fp, r1
 801267e:	f7ed ff51 	bl	8000524 <__aeabi_i2d>
 8012682:	9a07      	ldr	r2, [sp, #28]
 8012684:	4b32      	ldr	r3, [pc, #200]	; (8012750 <__ieee754_pow+0x778>)
 8012686:	4413      	add	r3, r2
 8012688:	e9d3 8900 	ldrd	r8, r9, [r3]
 801268c:	4606      	mov	r6, r0
 801268e:	460f      	mov	r7, r1
 8012690:	4652      	mov	r2, sl
 8012692:	465b      	mov	r3, fp
 8012694:	ec51 0b18 	vmov	r0, r1, d8
 8012698:	f7ed fdf8 	bl	800028c <__adddf3>
 801269c:	4642      	mov	r2, r8
 801269e:	464b      	mov	r3, r9
 80126a0:	f7ed fdf4 	bl	800028c <__adddf3>
 80126a4:	4632      	mov	r2, r6
 80126a6:	463b      	mov	r3, r7
 80126a8:	f7ed fdf0 	bl	800028c <__adddf3>
 80126ac:	2000      	movs	r0, #0
 80126ae:	4632      	mov	r2, r6
 80126b0:	463b      	mov	r3, r7
 80126b2:	4604      	mov	r4, r0
 80126b4:	460d      	mov	r5, r1
 80126b6:	f7ed fde7 	bl	8000288 <__aeabi_dsub>
 80126ba:	4642      	mov	r2, r8
 80126bc:	464b      	mov	r3, r9
 80126be:	f7ed fde3 	bl	8000288 <__aeabi_dsub>
 80126c2:	ec53 2b18 	vmov	r2, r3, d8
 80126c6:	f7ed fddf 	bl	8000288 <__aeabi_dsub>
 80126ca:	4602      	mov	r2, r0
 80126cc:	460b      	mov	r3, r1
 80126ce:	4650      	mov	r0, sl
 80126d0:	4659      	mov	r1, fp
 80126d2:	e610      	b.n	80122f6 <__ieee754_pow+0x31e>
 80126d4:	2401      	movs	r4, #1
 80126d6:	e6a1      	b.n	801241c <__ieee754_pow+0x444>
 80126d8:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8012728 <__ieee754_pow+0x750>
 80126dc:	e617      	b.n	801230e <__ieee754_pow+0x336>
 80126de:	bf00      	nop
 80126e0:	4a454eef 	.word	0x4a454eef
 80126e4:	3fca7e28 	.word	0x3fca7e28
 80126e8:	93c9db65 	.word	0x93c9db65
 80126ec:	3fcd864a 	.word	0x3fcd864a
 80126f0:	a91d4101 	.word	0xa91d4101
 80126f4:	3fd17460 	.word	0x3fd17460
 80126f8:	518f264d 	.word	0x518f264d
 80126fc:	3fd55555 	.word	0x3fd55555
 8012700:	db6fabff 	.word	0xdb6fabff
 8012704:	3fdb6db6 	.word	0x3fdb6db6
 8012708:	33333303 	.word	0x33333303
 801270c:	3fe33333 	.word	0x3fe33333
 8012710:	e0000000 	.word	0xe0000000
 8012714:	3feec709 	.word	0x3feec709
 8012718:	dc3a03fd 	.word	0xdc3a03fd
 801271c:	3feec709 	.word	0x3feec709
 8012720:	145b01f5 	.word	0x145b01f5
 8012724:	be3e2fe0 	.word	0xbe3e2fe0
 8012728:	00000000 	.word	0x00000000
 801272c:	3ff00000 	.word	0x3ff00000
 8012730:	7ff00000 	.word	0x7ff00000
 8012734:	43400000 	.word	0x43400000
 8012738:	0003988e 	.word	0x0003988e
 801273c:	000bb679 	.word	0x000bb679
 8012740:	08014808 	.word	0x08014808
 8012744:	3ff00000 	.word	0x3ff00000
 8012748:	40080000 	.word	0x40080000
 801274c:	08014828 	.word	0x08014828
 8012750:	08014818 	.word	0x08014818
 8012754:	a3b5      	add	r3, pc, #724	; (adr r3, 8012a2c <__ieee754_pow+0xa54>)
 8012756:	e9d3 2300 	ldrd	r2, r3, [r3]
 801275a:	4640      	mov	r0, r8
 801275c:	4649      	mov	r1, r9
 801275e:	f7ed fd95 	bl	800028c <__adddf3>
 8012762:	4622      	mov	r2, r4
 8012764:	ec41 0b1a 	vmov	d10, r0, r1
 8012768:	462b      	mov	r3, r5
 801276a:	4630      	mov	r0, r6
 801276c:	4639      	mov	r1, r7
 801276e:	f7ed fd8b 	bl	8000288 <__aeabi_dsub>
 8012772:	4602      	mov	r2, r0
 8012774:	460b      	mov	r3, r1
 8012776:	ec51 0b1a 	vmov	r0, r1, d10
 801277a:	f7ee f9cd 	bl	8000b18 <__aeabi_dcmpgt>
 801277e:	2800      	cmp	r0, #0
 8012780:	f47f ae04 	bne.w	801238c <__ieee754_pow+0x3b4>
 8012784:	4aa4      	ldr	r2, [pc, #656]	; (8012a18 <__ieee754_pow+0xa40>)
 8012786:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801278a:	4293      	cmp	r3, r2
 801278c:	f340 8108 	ble.w	80129a0 <__ieee754_pow+0x9c8>
 8012790:	151b      	asrs	r3, r3, #20
 8012792:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8012796:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 801279a:	fa4a f303 	asr.w	r3, sl, r3
 801279e:	445b      	add	r3, fp
 80127a0:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80127a4:	4e9d      	ldr	r6, [pc, #628]	; (8012a1c <__ieee754_pow+0xa44>)
 80127a6:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80127aa:	4116      	asrs	r6, r2
 80127ac:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80127b0:	2000      	movs	r0, #0
 80127b2:	ea23 0106 	bic.w	r1, r3, r6
 80127b6:	f1c2 0214 	rsb	r2, r2, #20
 80127ba:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80127be:	fa4a fa02 	asr.w	sl, sl, r2
 80127c2:	f1bb 0f00 	cmp.w	fp, #0
 80127c6:	4602      	mov	r2, r0
 80127c8:	460b      	mov	r3, r1
 80127ca:	4620      	mov	r0, r4
 80127cc:	4629      	mov	r1, r5
 80127ce:	bfb8      	it	lt
 80127d0:	f1ca 0a00 	rsblt	sl, sl, #0
 80127d4:	f7ed fd58 	bl	8000288 <__aeabi_dsub>
 80127d8:	ec41 0b19 	vmov	d9, r0, r1
 80127dc:	4642      	mov	r2, r8
 80127de:	464b      	mov	r3, r9
 80127e0:	ec51 0b19 	vmov	r0, r1, d9
 80127e4:	f7ed fd52 	bl	800028c <__adddf3>
 80127e8:	a37b      	add	r3, pc, #492	; (adr r3, 80129d8 <__ieee754_pow+0xa00>)
 80127ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127ee:	2000      	movs	r0, #0
 80127f0:	4604      	mov	r4, r0
 80127f2:	460d      	mov	r5, r1
 80127f4:	f7ed ff00 	bl	80005f8 <__aeabi_dmul>
 80127f8:	ec53 2b19 	vmov	r2, r3, d9
 80127fc:	4606      	mov	r6, r0
 80127fe:	460f      	mov	r7, r1
 8012800:	4620      	mov	r0, r4
 8012802:	4629      	mov	r1, r5
 8012804:	f7ed fd40 	bl	8000288 <__aeabi_dsub>
 8012808:	4602      	mov	r2, r0
 801280a:	460b      	mov	r3, r1
 801280c:	4640      	mov	r0, r8
 801280e:	4649      	mov	r1, r9
 8012810:	f7ed fd3a 	bl	8000288 <__aeabi_dsub>
 8012814:	a372      	add	r3, pc, #456	; (adr r3, 80129e0 <__ieee754_pow+0xa08>)
 8012816:	e9d3 2300 	ldrd	r2, r3, [r3]
 801281a:	f7ed feed 	bl	80005f8 <__aeabi_dmul>
 801281e:	a372      	add	r3, pc, #456	; (adr r3, 80129e8 <__ieee754_pow+0xa10>)
 8012820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012824:	4680      	mov	r8, r0
 8012826:	4689      	mov	r9, r1
 8012828:	4620      	mov	r0, r4
 801282a:	4629      	mov	r1, r5
 801282c:	f7ed fee4 	bl	80005f8 <__aeabi_dmul>
 8012830:	4602      	mov	r2, r0
 8012832:	460b      	mov	r3, r1
 8012834:	4640      	mov	r0, r8
 8012836:	4649      	mov	r1, r9
 8012838:	f7ed fd28 	bl	800028c <__adddf3>
 801283c:	4604      	mov	r4, r0
 801283e:	460d      	mov	r5, r1
 8012840:	4602      	mov	r2, r0
 8012842:	460b      	mov	r3, r1
 8012844:	4630      	mov	r0, r6
 8012846:	4639      	mov	r1, r7
 8012848:	f7ed fd20 	bl	800028c <__adddf3>
 801284c:	4632      	mov	r2, r6
 801284e:	463b      	mov	r3, r7
 8012850:	4680      	mov	r8, r0
 8012852:	4689      	mov	r9, r1
 8012854:	f7ed fd18 	bl	8000288 <__aeabi_dsub>
 8012858:	4602      	mov	r2, r0
 801285a:	460b      	mov	r3, r1
 801285c:	4620      	mov	r0, r4
 801285e:	4629      	mov	r1, r5
 8012860:	f7ed fd12 	bl	8000288 <__aeabi_dsub>
 8012864:	4642      	mov	r2, r8
 8012866:	4606      	mov	r6, r0
 8012868:	460f      	mov	r7, r1
 801286a:	464b      	mov	r3, r9
 801286c:	4640      	mov	r0, r8
 801286e:	4649      	mov	r1, r9
 8012870:	f7ed fec2 	bl	80005f8 <__aeabi_dmul>
 8012874:	a35e      	add	r3, pc, #376	; (adr r3, 80129f0 <__ieee754_pow+0xa18>)
 8012876:	e9d3 2300 	ldrd	r2, r3, [r3]
 801287a:	4604      	mov	r4, r0
 801287c:	460d      	mov	r5, r1
 801287e:	f7ed febb 	bl	80005f8 <__aeabi_dmul>
 8012882:	a35d      	add	r3, pc, #372	; (adr r3, 80129f8 <__ieee754_pow+0xa20>)
 8012884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012888:	f7ed fcfe 	bl	8000288 <__aeabi_dsub>
 801288c:	4622      	mov	r2, r4
 801288e:	462b      	mov	r3, r5
 8012890:	f7ed feb2 	bl	80005f8 <__aeabi_dmul>
 8012894:	a35a      	add	r3, pc, #360	; (adr r3, 8012a00 <__ieee754_pow+0xa28>)
 8012896:	e9d3 2300 	ldrd	r2, r3, [r3]
 801289a:	f7ed fcf7 	bl	800028c <__adddf3>
 801289e:	4622      	mov	r2, r4
 80128a0:	462b      	mov	r3, r5
 80128a2:	f7ed fea9 	bl	80005f8 <__aeabi_dmul>
 80128a6:	a358      	add	r3, pc, #352	; (adr r3, 8012a08 <__ieee754_pow+0xa30>)
 80128a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80128ac:	f7ed fcec 	bl	8000288 <__aeabi_dsub>
 80128b0:	4622      	mov	r2, r4
 80128b2:	462b      	mov	r3, r5
 80128b4:	f7ed fea0 	bl	80005f8 <__aeabi_dmul>
 80128b8:	a355      	add	r3, pc, #340	; (adr r3, 8012a10 <__ieee754_pow+0xa38>)
 80128ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80128be:	f7ed fce5 	bl	800028c <__adddf3>
 80128c2:	4622      	mov	r2, r4
 80128c4:	462b      	mov	r3, r5
 80128c6:	f7ed fe97 	bl	80005f8 <__aeabi_dmul>
 80128ca:	4602      	mov	r2, r0
 80128cc:	460b      	mov	r3, r1
 80128ce:	4640      	mov	r0, r8
 80128d0:	4649      	mov	r1, r9
 80128d2:	f7ed fcd9 	bl	8000288 <__aeabi_dsub>
 80128d6:	4604      	mov	r4, r0
 80128d8:	460d      	mov	r5, r1
 80128da:	4602      	mov	r2, r0
 80128dc:	460b      	mov	r3, r1
 80128de:	4640      	mov	r0, r8
 80128e0:	4649      	mov	r1, r9
 80128e2:	f7ed fe89 	bl	80005f8 <__aeabi_dmul>
 80128e6:	2200      	movs	r2, #0
 80128e8:	ec41 0b19 	vmov	d9, r0, r1
 80128ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80128f0:	4620      	mov	r0, r4
 80128f2:	4629      	mov	r1, r5
 80128f4:	f7ed fcc8 	bl	8000288 <__aeabi_dsub>
 80128f8:	4602      	mov	r2, r0
 80128fa:	460b      	mov	r3, r1
 80128fc:	ec51 0b19 	vmov	r0, r1, d9
 8012900:	f7ed ffa4 	bl	800084c <__aeabi_ddiv>
 8012904:	4632      	mov	r2, r6
 8012906:	4604      	mov	r4, r0
 8012908:	460d      	mov	r5, r1
 801290a:	463b      	mov	r3, r7
 801290c:	4640      	mov	r0, r8
 801290e:	4649      	mov	r1, r9
 8012910:	f7ed fe72 	bl	80005f8 <__aeabi_dmul>
 8012914:	4632      	mov	r2, r6
 8012916:	463b      	mov	r3, r7
 8012918:	f7ed fcb8 	bl	800028c <__adddf3>
 801291c:	4602      	mov	r2, r0
 801291e:	460b      	mov	r3, r1
 8012920:	4620      	mov	r0, r4
 8012922:	4629      	mov	r1, r5
 8012924:	f7ed fcb0 	bl	8000288 <__aeabi_dsub>
 8012928:	4642      	mov	r2, r8
 801292a:	464b      	mov	r3, r9
 801292c:	f7ed fcac 	bl	8000288 <__aeabi_dsub>
 8012930:	460b      	mov	r3, r1
 8012932:	4602      	mov	r2, r0
 8012934:	493a      	ldr	r1, [pc, #232]	; (8012a20 <__ieee754_pow+0xa48>)
 8012936:	2000      	movs	r0, #0
 8012938:	f7ed fca6 	bl	8000288 <__aeabi_dsub>
 801293c:	ec41 0b10 	vmov	d0, r0, r1
 8012940:	ee10 3a90 	vmov	r3, s1
 8012944:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8012948:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801294c:	da2b      	bge.n	80129a6 <__ieee754_pow+0x9ce>
 801294e:	4650      	mov	r0, sl
 8012950:	f001 fa3a 	bl	8013dc8 <scalbn>
 8012954:	ec51 0b10 	vmov	r0, r1, d0
 8012958:	ec53 2b18 	vmov	r2, r3, d8
 801295c:	f7ff bbed 	b.w	801213a <__ieee754_pow+0x162>
 8012960:	4b30      	ldr	r3, [pc, #192]	; (8012a24 <__ieee754_pow+0xa4c>)
 8012962:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8012966:	429e      	cmp	r6, r3
 8012968:	f77f af0c 	ble.w	8012784 <__ieee754_pow+0x7ac>
 801296c:	4b2e      	ldr	r3, [pc, #184]	; (8012a28 <__ieee754_pow+0xa50>)
 801296e:	440b      	add	r3, r1
 8012970:	4303      	orrs	r3, r0
 8012972:	d009      	beq.n	8012988 <__ieee754_pow+0x9b0>
 8012974:	ec51 0b18 	vmov	r0, r1, d8
 8012978:	2200      	movs	r2, #0
 801297a:	2300      	movs	r3, #0
 801297c:	f7ee f8ae 	bl	8000adc <__aeabi_dcmplt>
 8012980:	3800      	subs	r0, #0
 8012982:	bf18      	it	ne
 8012984:	2001      	movne	r0, #1
 8012986:	e447      	b.n	8012218 <__ieee754_pow+0x240>
 8012988:	4622      	mov	r2, r4
 801298a:	462b      	mov	r3, r5
 801298c:	f7ed fc7c 	bl	8000288 <__aeabi_dsub>
 8012990:	4642      	mov	r2, r8
 8012992:	464b      	mov	r3, r9
 8012994:	f7ee f8b6 	bl	8000b04 <__aeabi_dcmpge>
 8012998:	2800      	cmp	r0, #0
 801299a:	f43f aef3 	beq.w	8012784 <__ieee754_pow+0x7ac>
 801299e:	e7e9      	b.n	8012974 <__ieee754_pow+0x99c>
 80129a0:	f04f 0a00 	mov.w	sl, #0
 80129a4:	e71a      	b.n	80127dc <__ieee754_pow+0x804>
 80129a6:	ec51 0b10 	vmov	r0, r1, d0
 80129aa:	4619      	mov	r1, r3
 80129ac:	e7d4      	b.n	8012958 <__ieee754_pow+0x980>
 80129ae:	491c      	ldr	r1, [pc, #112]	; (8012a20 <__ieee754_pow+0xa48>)
 80129b0:	2000      	movs	r0, #0
 80129b2:	f7ff bb30 	b.w	8012016 <__ieee754_pow+0x3e>
 80129b6:	2000      	movs	r0, #0
 80129b8:	2100      	movs	r1, #0
 80129ba:	f7ff bb2c 	b.w	8012016 <__ieee754_pow+0x3e>
 80129be:	4630      	mov	r0, r6
 80129c0:	4639      	mov	r1, r7
 80129c2:	f7ff bb28 	b.w	8012016 <__ieee754_pow+0x3e>
 80129c6:	9204      	str	r2, [sp, #16]
 80129c8:	f7ff bb7a 	b.w	80120c0 <__ieee754_pow+0xe8>
 80129cc:	2300      	movs	r3, #0
 80129ce:	f7ff bb64 	b.w	801209a <__ieee754_pow+0xc2>
 80129d2:	bf00      	nop
 80129d4:	f3af 8000 	nop.w
 80129d8:	00000000 	.word	0x00000000
 80129dc:	3fe62e43 	.word	0x3fe62e43
 80129e0:	fefa39ef 	.word	0xfefa39ef
 80129e4:	3fe62e42 	.word	0x3fe62e42
 80129e8:	0ca86c39 	.word	0x0ca86c39
 80129ec:	be205c61 	.word	0xbe205c61
 80129f0:	72bea4d0 	.word	0x72bea4d0
 80129f4:	3e663769 	.word	0x3e663769
 80129f8:	c5d26bf1 	.word	0xc5d26bf1
 80129fc:	3ebbbd41 	.word	0x3ebbbd41
 8012a00:	af25de2c 	.word	0xaf25de2c
 8012a04:	3f11566a 	.word	0x3f11566a
 8012a08:	16bebd93 	.word	0x16bebd93
 8012a0c:	3f66c16c 	.word	0x3f66c16c
 8012a10:	5555553e 	.word	0x5555553e
 8012a14:	3fc55555 	.word	0x3fc55555
 8012a18:	3fe00000 	.word	0x3fe00000
 8012a1c:	000fffff 	.word	0x000fffff
 8012a20:	3ff00000 	.word	0x3ff00000
 8012a24:	4090cbff 	.word	0x4090cbff
 8012a28:	3f6f3400 	.word	0x3f6f3400
 8012a2c:	652b82fe 	.word	0x652b82fe
 8012a30:	3c971547 	.word	0x3c971547

08012a34 <__ieee754_sqrt>:
 8012a34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012a38:	ec55 4b10 	vmov	r4, r5, d0
 8012a3c:	4e55      	ldr	r6, [pc, #340]	; (8012b94 <__ieee754_sqrt+0x160>)
 8012a3e:	43ae      	bics	r6, r5
 8012a40:	ee10 0a10 	vmov	r0, s0
 8012a44:	ee10 3a10 	vmov	r3, s0
 8012a48:	462a      	mov	r2, r5
 8012a4a:	4629      	mov	r1, r5
 8012a4c:	d110      	bne.n	8012a70 <__ieee754_sqrt+0x3c>
 8012a4e:	ee10 2a10 	vmov	r2, s0
 8012a52:	462b      	mov	r3, r5
 8012a54:	f7ed fdd0 	bl	80005f8 <__aeabi_dmul>
 8012a58:	4602      	mov	r2, r0
 8012a5a:	460b      	mov	r3, r1
 8012a5c:	4620      	mov	r0, r4
 8012a5e:	4629      	mov	r1, r5
 8012a60:	f7ed fc14 	bl	800028c <__adddf3>
 8012a64:	4604      	mov	r4, r0
 8012a66:	460d      	mov	r5, r1
 8012a68:	ec45 4b10 	vmov	d0, r4, r5
 8012a6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012a70:	2d00      	cmp	r5, #0
 8012a72:	dc10      	bgt.n	8012a96 <__ieee754_sqrt+0x62>
 8012a74:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8012a78:	4330      	orrs	r0, r6
 8012a7a:	d0f5      	beq.n	8012a68 <__ieee754_sqrt+0x34>
 8012a7c:	b15d      	cbz	r5, 8012a96 <__ieee754_sqrt+0x62>
 8012a7e:	ee10 2a10 	vmov	r2, s0
 8012a82:	462b      	mov	r3, r5
 8012a84:	ee10 0a10 	vmov	r0, s0
 8012a88:	f7ed fbfe 	bl	8000288 <__aeabi_dsub>
 8012a8c:	4602      	mov	r2, r0
 8012a8e:	460b      	mov	r3, r1
 8012a90:	f7ed fedc 	bl	800084c <__aeabi_ddiv>
 8012a94:	e7e6      	b.n	8012a64 <__ieee754_sqrt+0x30>
 8012a96:	1512      	asrs	r2, r2, #20
 8012a98:	d074      	beq.n	8012b84 <__ieee754_sqrt+0x150>
 8012a9a:	07d4      	lsls	r4, r2, #31
 8012a9c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8012aa0:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8012aa4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8012aa8:	bf5e      	ittt	pl
 8012aaa:	0fda      	lsrpl	r2, r3, #31
 8012aac:	005b      	lslpl	r3, r3, #1
 8012aae:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8012ab2:	2400      	movs	r4, #0
 8012ab4:	0fda      	lsrs	r2, r3, #31
 8012ab6:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8012aba:	107f      	asrs	r7, r7, #1
 8012abc:	005b      	lsls	r3, r3, #1
 8012abe:	2516      	movs	r5, #22
 8012ac0:	4620      	mov	r0, r4
 8012ac2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8012ac6:	1886      	adds	r6, r0, r2
 8012ac8:	428e      	cmp	r6, r1
 8012aca:	bfde      	ittt	le
 8012acc:	1b89      	suble	r1, r1, r6
 8012ace:	18b0      	addle	r0, r6, r2
 8012ad0:	18a4      	addle	r4, r4, r2
 8012ad2:	0049      	lsls	r1, r1, #1
 8012ad4:	3d01      	subs	r5, #1
 8012ad6:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8012ada:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8012ade:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8012ae2:	d1f0      	bne.n	8012ac6 <__ieee754_sqrt+0x92>
 8012ae4:	462a      	mov	r2, r5
 8012ae6:	f04f 0e20 	mov.w	lr, #32
 8012aea:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8012aee:	4281      	cmp	r1, r0
 8012af0:	eb06 0c05 	add.w	ip, r6, r5
 8012af4:	dc02      	bgt.n	8012afc <__ieee754_sqrt+0xc8>
 8012af6:	d113      	bne.n	8012b20 <__ieee754_sqrt+0xec>
 8012af8:	459c      	cmp	ip, r3
 8012afa:	d811      	bhi.n	8012b20 <__ieee754_sqrt+0xec>
 8012afc:	f1bc 0f00 	cmp.w	ip, #0
 8012b00:	eb0c 0506 	add.w	r5, ip, r6
 8012b04:	da43      	bge.n	8012b8e <__ieee754_sqrt+0x15a>
 8012b06:	2d00      	cmp	r5, #0
 8012b08:	db41      	blt.n	8012b8e <__ieee754_sqrt+0x15a>
 8012b0a:	f100 0801 	add.w	r8, r0, #1
 8012b0e:	1a09      	subs	r1, r1, r0
 8012b10:	459c      	cmp	ip, r3
 8012b12:	bf88      	it	hi
 8012b14:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8012b18:	eba3 030c 	sub.w	r3, r3, ip
 8012b1c:	4432      	add	r2, r6
 8012b1e:	4640      	mov	r0, r8
 8012b20:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8012b24:	f1be 0e01 	subs.w	lr, lr, #1
 8012b28:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8012b2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8012b30:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8012b34:	d1db      	bne.n	8012aee <__ieee754_sqrt+0xba>
 8012b36:	430b      	orrs	r3, r1
 8012b38:	d006      	beq.n	8012b48 <__ieee754_sqrt+0x114>
 8012b3a:	1c50      	adds	r0, r2, #1
 8012b3c:	bf13      	iteet	ne
 8012b3e:	3201      	addne	r2, #1
 8012b40:	3401      	addeq	r4, #1
 8012b42:	4672      	moveq	r2, lr
 8012b44:	f022 0201 	bicne.w	r2, r2, #1
 8012b48:	1063      	asrs	r3, r4, #1
 8012b4a:	0852      	lsrs	r2, r2, #1
 8012b4c:	07e1      	lsls	r1, r4, #31
 8012b4e:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8012b52:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8012b56:	bf48      	it	mi
 8012b58:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8012b5c:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8012b60:	4614      	mov	r4, r2
 8012b62:	e781      	b.n	8012a68 <__ieee754_sqrt+0x34>
 8012b64:	0ad9      	lsrs	r1, r3, #11
 8012b66:	3815      	subs	r0, #21
 8012b68:	055b      	lsls	r3, r3, #21
 8012b6a:	2900      	cmp	r1, #0
 8012b6c:	d0fa      	beq.n	8012b64 <__ieee754_sqrt+0x130>
 8012b6e:	02cd      	lsls	r5, r1, #11
 8012b70:	d50a      	bpl.n	8012b88 <__ieee754_sqrt+0x154>
 8012b72:	f1c2 0420 	rsb	r4, r2, #32
 8012b76:	fa23 f404 	lsr.w	r4, r3, r4
 8012b7a:	1e55      	subs	r5, r2, #1
 8012b7c:	4093      	lsls	r3, r2
 8012b7e:	4321      	orrs	r1, r4
 8012b80:	1b42      	subs	r2, r0, r5
 8012b82:	e78a      	b.n	8012a9a <__ieee754_sqrt+0x66>
 8012b84:	4610      	mov	r0, r2
 8012b86:	e7f0      	b.n	8012b6a <__ieee754_sqrt+0x136>
 8012b88:	0049      	lsls	r1, r1, #1
 8012b8a:	3201      	adds	r2, #1
 8012b8c:	e7ef      	b.n	8012b6e <__ieee754_sqrt+0x13a>
 8012b8e:	4680      	mov	r8, r0
 8012b90:	e7bd      	b.n	8012b0e <__ieee754_sqrt+0xda>
 8012b92:	bf00      	nop
 8012b94:	7ff00000 	.word	0x7ff00000

08012b98 <__ieee754_asinf>:
 8012b98:	b538      	push	{r3, r4, r5, lr}
 8012b9a:	ee10 5a10 	vmov	r5, s0
 8012b9e:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8012ba2:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8012ba6:	ed2d 8b04 	vpush	{d8-d9}
 8012baa:	d10c      	bne.n	8012bc6 <__ieee754_asinf+0x2e>
 8012bac:	eddf 7a5d 	vldr	s15, [pc, #372]	; 8012d24 <__ieee754_asinf+0x18c>
 8012bb0:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8012d28 <__ieee754_asinf+0x190>
 8012bb4:	ee60 7a27 	vmul.f32	s15, s0, s15
 8012bb8:	eee0 7a07 	vfma.f32	s15, s0, s14
 8012bbc:	eeb0 0a67 	vmov.f32	s0, s15
 8012bc0:	ecbd 8b04 	vpop	{d8-d9}
 8012bc4:	bd38      	pop	{r3, r4, r5, pc}
 8012bc6:	dd04      	ble.n	8012bd2 <__ieee754_asinf+0x3a>
 8012bc8:	ee70 7a40 	vsub.f32	s15, s0, s0
 8012bcc:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8012bd0:	e7f6      	b.n	8012bc0 <__ieee754_asinf+0x28>
 8012bd2:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 8012bd6:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8012bda:	da0b      	bge.n	8012bf4 <__ieee754_asinf+0x5c>
 8012bdc:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 8012be0:	da52      	bge.n	8012c88 <__ieee754_asinf+0xf0>
 8012be2:	eddf 7a52 	vldr	s15, [pc, #328]	; 8012d2c <__ieee754_asinf+0x194>
 8012be6:	ee70 7a27 	vadd.f32	s15, s0, s15
 8012bea:	eef4 7ae8 	vcmpe.f32	s15, s17
 8012bee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012bf2:	dce5      	bgt.n	8012bc0 <__ieee754_asinf+0x28>
 8012bf4:	f001 fa42 	bl	801407c <fabsf>
 8012bf8:	ee38 0ac0 	vsub.f32	s0, s17, s0
 8012bfc:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 8012c00:	ee20 8a08 	vmul.f32	s16, s0, s16
 8012c04:	eddf 7a4a 	vldr	s15, [pc, #296]	; 8012d30 <__ieee754_asinf+0x198>
 8012c08:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8012d34 <__ieee754_asinf+0x19c>
 8012c0c:	ed9f 9a4a 	vldr	s18, [pc, #296]	; 8012d38 <__ieee754_asinf+0x1a0>
 8012c10:	eea8 7a27 	vfma.f32	s14, s16, s15
 8012c14:	eddf 7a49 	vldr	s15, [pc, #292]	; 8012d3c <__ieee754_asinf+0x1a4>
 8012c18:	eee7 7a08 	vfma.f32	s15, s14, s16
 8012c1c:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8012d40 <__ieee754_asinf+0x1a8>
 8012c20:	eea7 7a88 	vfma.f32	s14, s15, s16
 8012c24:	eddf 7a47 	vldr	s15, [pc, #284]	; 8012d44 <__ieee754_asinf+0x1ac>
 8012c28:	eee7 7a08 	vfma.f32	s15, s14, s16
 8012c2c:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8012d48 <__ieee754_asinf+0x1b0>
 8012c30:	eea7 9a88 	vfma.f32	s18, s15, s16
 8012c34:	eddf 7a45 	vldr	s15, [pc, #276]	; 8012d4c <__ieee754_asinf+0x1b4>
 8012c38:	eee8 7a07 	vfma.f32	s15, s16, s14
 8012c3c:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8012d50 <__ieee754_asinf+0x1b8>
 8012c40:	eea7 7a88 	vfma.f32	s14, s15, s16
 8012c44:	eddf 7a43 	vldr	s15, [pc, #268]	; 8012d54 <__ieee754_asinf+0x1bc>
 8012c48:	eee7 7a08 	vfma.f32	s15, s14, s16
 8012c4c:	eeb0 0a48 	vmov.f32	s0, s16
 8012c50:	eee7 8a88 	vfma.f32	s17, s15, s16
 8012c54:	f000 fd30 	bl	80136b8 <__ieee754_sqrtf>
 8012c58:	4b3f      	ldr	r3, [pc, #252]	; (8012d58 <__ieee754_asinf+0x1c0>)
 8012c5a:	ee29 9a08 	vmul.f32	s18, s18, s16
 8012c5e:	429c      	cmp	r4, r3
 8012c60:	ee89 6a28 	vdiv.f32	s12, s18, s17
 8012c64:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8012c68:	dd3d      	ble.n	8012ce6 <__ieee754_asinf+0x14e>
 8012c6a:	eea0 0a06 	vfma.f32	s0, s0, s12
 8012c6e:	eddf 7a3b 	vldr	s15, [pc, #236]	; 8012d5c <__ieee754_asinf+0x1c4>
 8012c72:	eee0 7a26 	vfma.f32	s15, s0, s13
 8012c76:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8012d28 <__ieee754_asinf+0x190>
 8012c7a:	ee30 0a67 	vsub.f32	s0, s0, s15
 8012c7e:	2d00      	cmp	r5, #0
 8012c80:	bfd8      	it	le
 8012c82:	eeb1 0a40 	vnegle.f32	s0, s0
 8012c86:	e79b      	b.n	8012bc0 <__ieee754_asinf+0x28>
 8012c88:	ee60 7a00 	vmul.f32	s15, s0, s0
 8012c8c:	eddf 6a28 	vldr	s13, [pc, #160]	; 8012d30 <__ieee754_asinf+0x198>
 8012c90:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8012d34 <__ieee754_asinf+0x19c>
 8012c94:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 8012d48 <__ieee754_asinf+0x1b0>
 8012c98:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8012c9c:	eddf 6a27 	vldr	s13, [pc, #156]	; 8012d3c <__ieee754_asinf+0x1a4>
 8012ca0:	eee7 6a27 	vfma.f32	s13, s14, s15
 8012ca4:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8012d40 <__ieee754_asinf+0x1a8>
 8012ca8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8012cac:	eddf 6a25 	vldr	s13, [pc, #148]	; 8012d44 <__ieee754_asinf+0x1ac>
 8012cb0:	eee7 6a27 	vfma.f32	s13, s14, s15
 8012cb4:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8012d38 <__ieee754_asinf+0x1a0>
 8012cb8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8012cbc:	eddf 6a23 	vldr	s13, [pc, #140]	; 8012d4c <__ieee754_asinf+0x1b4>
 8012cc0:	eee7 6a86 	vfma.f32	s13, s15, s12
 8012cc4:	ed9f 6a22 	vldr	s12, [pc, #136]	; 8012d50 <__ieee754_asinf+0x1b8>
 8012cc8:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8012ccc:	eddf 6a21 	vldr	s13, [pc, #132]	; 8012d54 <__ieee754_asinf+0x1bc>
 8012cd0:	eee6 6a27 	vfma.f32	s13, s12, s15
 8012cd4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8012cd8:	eee6 8aa7 	vfma.f32	s17, s13, s15
 8012cdc:	eec7 7a28 	vdiv.f32	s15, s14, s17
 8012ce0:	eea0 0a27 	vfma.f32	s0, s0, s15
 8012ce4:	e76c      	b.n	8012bc0 <__ieee754_asinf+0x28>
 8012ce6:	ee10 3a10 	vmov	r3, s0
 8012cea:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8012cee:	f023 030f 	bic.w	r3, r3, #15
 8012cf2:	ee07 3a10 	vmov	s14, r3
 8012cf6:	eea7 8a47 	vfms.f32	s16, s14, s14
 8012cfa:	ee70 7a07 	vadd.f32	s15, s0, s14
 8012cfe:	ee30 0a00 	vadd.f32	s0, s0, s0
 8012d02:	eec8 5a27 	vdiv.f32	s11, s16, s15
 8012d06:	eddf 7a07 	vldr	s15, [pc, #28]	; 8012d24 <__ieee754_asinf+0x18c>
 8012d0a:	eee5 7ae6 	vfms.f32	s15, s11, s13
 8012d0e:	eed0 7a06 	vfnms.f32	s15, s0, s12
 8012d12:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8012d60 <__ieee754_asinf+0x1c8>
 8012d16:	eeb0 6a40 	vmov.f32	s12, s0
 8012d1a:	eea7 6a66 	vfms.f32	s12, s14, s13
 8012d1e:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8012d22:	e7aa      	b.n	8012c7a <__ieee754_asinf+0xe2>
 8012d24:	b33bbd2e 	.word	0xb33bbd2e
 8012d28:	3fc90fdb 	.word	0x3fc90fdb
 8012d2c:	7149f2ca 	.word	0x7149f2ca
 8012d30:	3811ef08 	.word	0x3811ef08
 8012d34:	3a4f7f04 	.word	0x3a4f7f04
 8012d38:	3e2aaaab 	.word	0x3e2aaaab
 8012d3c:	bd241146 	.word	0xbd241146
 8012d40:	3e4e0aa8 	.word	0x3e4e0aa8
 8012d44:	bea6b090 	.word	0xbea6b090
 8012d48:	3d9dc62e 	.word	0x3d9dc62e
 8012d4c:	bf303361 	.word	0xbf303361
 8012d50:	4001572d 	.word	0x4001572d
 8012d54:	c019d139 	.word	0xc019d139
 8012d58:	3f799999 	.word	0x3f799999
 8012d5c:	333bbd2e 	.word	0x333bbd2e
 8012d60:	3f490fdb 	.word	0x3f490fdb

08012d64 <__ieee754_atan2f>:
 8012d64:	ee10 2a90 	vmov	r2, s1
 8012d68:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8012d6c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8012d70:	b510      	push	{r4, lr}
 8012d72:	eef0 7a40 	vmov.f32	s15, s0
 8012d76:	dc06      	bgt.n	8012d86 <__ieee754_atan2f+0x22>
 8012d78:	ee10 0a10 	vmov	r0, s0
 8012d7c:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8012d80:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8012d84:	dd04      	ble.n	8012d90 <__ieee754_atan2f+0x2c>
 8012d86:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8012d8a:	eeb0 0a67 	vmov.f32	s0, s15
 8012d8e:	bd10      	pop	{r4, pc}
 8012d90:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8012d94:	d103      	bne.n	8012d9e <__ieee754_atan2f+0x3a>
 8012d96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012d9a:	f001 b89b 	b.w	8013ed4 <atanf>
 8012d9e:	1794      	asrs	r4, r2, #30
 8012da0:	f004 0402 	and.w	r4, r4, #2
 8012da4:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8012da8:	b943      	cbnz	r3, 8012dbc <__ieee754_atan2f+0x58>
 8012daa:	2c02      	cmp	r4, #2
 8012dac:	d05e      	beq.n	8012e6c <__ieee754_atan2f+0x108>
 8012dae:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8012e80 <__ieee754_atan2f+0x11c>
 8012db2:	2c03      	cmp	r4, #3
 8012db4:	bf08      	it	eq
 8012db6:	eef0 7a47 	vmoveq.f32	s15, s14
 8012dba:	e7e6      	b.n	8012d8a <__ieee754_atan2f+0x26>
 8012dbc:	b941      	cbnz	r1, 8012dd0 <__ieee754_atan2f+0x6c>
 8012dbe:	eddf 7a31 	vldr	s15, [pc, #196]	; 8012e84 <__ieee754_atan2f+0x120>
 8012dc2:	ed9f 0a31 	vldr	s0, [pc, #196]	; 8012e88 <__ieee754_atan2f+0x124>
 8012dc6:	2800      	cmp	r0, #0
 8012dc8:	bfb8      	it	lt
 8012dca:	eef0 7a40 	vmovlt.f32	s15, s0
 8012dce:	e7dc      	b.n	8012d8a <__ieee754_atan2f+0x26>
 8012dd0:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8012dd4:	d110      	bne.n	8012df8 <__ieee754_atan2f+0x94>
 8012dd6:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8012dda:	f104 34ff 	add.w	r4, r4, #4294967295
 8012dde:	d107      	bne.n	8012df0 <__ieee754_atan2f+0x8c>
 8012de0:	2c02      	cmp	r4, #2
 8012de2:	d846      	bhi.n	8012e72 <__ieee754_atan2f+0x10e>
 8012de4:	4b29      	ldr	r3, [pc, #164]	; (8012e8c <__ieee754_atan2f+0x128>)
 8012de6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8012dea:	edd4 7a00 	vldr	s15, [r4]
 8012dee:	e7cc      	b.n	8012d8a <__ieee754_atan2f+0x26>
 8012df0:	2c02      	cmp	r4, #2
 8012df2:	d841      	bhi.n	8012e78 <__ieee754_atan2f+0x114>
 8012df4:	4b26      	ldr	r3, [pc, #152]	; (8012e90 <__ieee754_atan2f+0x12c>)
 8012df6:	e7f6      	b.n	8012de6 <__ieee754_atan2f+0x82>
 8012df8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8012dfc:	d0df      	beq.n	8012dbe <__ieee754_atan2f+0x5a>
 8012dfe:	1a5b      	subs	r3, r3, r1
 8012e00:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 8012e04:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8012e08:	da1a      	bge.n	8012e40 <__ieee754_atan2f+0xdc>
 8012e0a:	2a00      	cmp	r2, #0
 8012e0c:	da01      	bge.n	8012e12 <__ieee754_atan2f+0xae>
 8012e0e:	313c      	adds	r1, #60	; 0x3c
 8012e10:	db19      	blt.n	8012e46 <__ieee754_atan2f+0xe2>
 8012e12:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8012e16:	f001 f931 	bl	801407c <fabsf>
 8012e1a:	f001 f85b 	bl	8013ed4 <atanf>
 8012e1e:	eef0 7a40 	vmov.f32	s15, s0
 8012e22:	2c01      	cmp	r4, #1
 8012e24:	d012      	beq.n	8012e4c <__ieee754_atan2f+0xe8>
 8012e26:	2c02      	cmp	r4, #2
 8012e28:	d017      	beq.n	8012e5a <__ieee754_atan2f+0xf6>
 8012e2a:	2c00      	cmp	r4, #0
 8012e2c:	d0ad      	beq.n	8012d8a <__ieee754_atan2f+0x26>
 8012e2e:	ed9f 0a19 	vldr	s0, [pc, #100]	; 8012e94 <__ieee754_atan2f+0x130>
 8012e32:	ee77 7a80 	vadd.f32	s15, s15, s0
 8012e36:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8012e98 <__ieee754_atan2f+0x134>
 8012e3a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8012e3e:	e7a4      	b.n	8012d8a <__ieee754_atan2f+0x26>
 8012e40:	eddf 7a10 	vldr	s15, [pc, #64]	; 8012e84 <__ieee754_atan2f+0x120>
 8012e44:	e7ed      	b.n	8012e22 <__ieee754_atan2f+0xbe>
 8012e46:	eddf 7a15 	vldr	s15, [pc, #84]	; 8012e9c <__ieee754_atan2f+0x138>
 8012e4a:	e7ea      	b.n	8012e22 <__ieee754_atan2f+0xbe>
 8012e4c:	ee17 3a90 	vmov	r3, s15
 8012e50:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8012e54:	ee07 3a90 	vmov	s15, r3
 8012e58:	e797      	b.n	8012d8a <__ieee754_atan2f+0x26>
 8012e5a:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8012e94 <__ieee754_atan2f+0x130>
 8012e5e:	ee77 7a80 	vadd.f32	s15, s15, s0
 8012e62:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8012e98 <__ieee754_atan2f+0x134>
 8012e66:	ee70 7a67 	vsub.f32	s15, s0, s15
 8012e6a:	e78e      	b.n	8012d8a <__ieee754_atan2f+0x26>
 8012e6c:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8012e98 <__ieee754_atan2f+0x134>
 8012e70:	e78b      	b.n	8012d8a <__ieee754_atan2f+0x26>
 8012e72:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8012ea0 <__ieee754_atan2f+0x13c>
 8012e76:	e788      	b.n	8012d8a <__ieee754_atan2f+0x26>
 8012e78:	eddf 7a08 	vldr	s15, [pc, #32]	; 8012e9c <__ieee754_atan2f+0x138>
 8012e7c:	e785      	b.n	8012d8a <__ieee754_atan2f+0x26>
 8012e7e:	bf00      	nop
 8012e80:	c0490fdb 	.word	0xc0490fdb
 8012e84:	3fc90fdb 	.word	0x3fc90fdb
 8012e88:	bfc90fdb 	.word	0xbfc90fdb
 8012e8c:	08014838 	.word	0x08014838
 8012e90:	08014844 	.word	0x08014844
 8012e94:	33bbbd2e 	.word	0x33bbbd2e
 8012e98:	40490fdb 	.word	0x40490fdb
 8012e9c:	00000000 	.word	0x00000000
 8012ea0:	3f490fdb 	.word	0x3f490fdb

08012ea4 <__ieee754_powf>:
 8012ea4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012ea8:	ee10 4a90 	vmov	r4, s1
 8012eac:	f034 4800 	bics.w	r8, r4, #2147483648	; 0x80000000
 8012eb0:	ed2d 8b02 	vpush	{d8}
 8012eb4:	ee10 6a10 	vmov	r6, s0
 8012eb8:	eeb0 8a40 	vmov.f32	s16, s0
 8012ebc:	eef0 8a60 	vmov.f32	s17, s1
 8012ec0:	d10c      	bne.n	8012edc <__ieee754_powf+0x38>
 8012ec2:	f486 0680 	eor.w	r6, r6, #4194304	; 0x400000
 8012ec6:	0076      	lsls	r6, r6, #1
 8012ec8:	f516 0f00 	cmn.w	r6, #8388608	; 0x800000
 8012ecc:	f240 8296 	bls.w	80133fc <__ieee754_powf+0x558>
 8012ed0:	ee38 0a28 	vadd.f32	s0, s16, s17
 8012ed4:	ecbd 8b02 	vpop	{d8}
 8012ed8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012edc:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8012ee0:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8012ee4:	dcf4      	bgt.n	8012ed0 <__ieee754_powf+0x2c>
 8012ee6:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 8012eea:	dd08      	ble.n	8012efe <__ieee754_powf+0x5a>
 8012eec:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
 8012ef0:	d1ee      	bne.n	8012ed0 <__ieee754_powf+0x2c>
 8012ef2:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 8012ef6:	0064      	lsls	r4, r4, #1
 8012ef8:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 8012efc:	e7e6      	b.n	8012ecc <__ieee754_powf+0x28>
 8012efe:	2e00      	cmp	r6, #0
 8012f00:	da20      	bge.n	8012f44 <__ieee754_powf+0xa0>
 8012f02:	f1b8 4f97 	cmp.w	r8, #1266679808	; 0x4b800000
 8012f06:	da2d      	bge.n	8012f64 <__ieee754_powf+0xc0>
 8012f08:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 8012f0c:	f2c0 827f 	blt.w	801340e <__ieee754_powf+0x56a>
 8012f10:	ea4f 53e8 	mov.w	r3, r8, asr #23
 8012f14:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8012f18:	fa48 f703 	asr.w	r7, r8, r3
 8012f1c:	fa07 f303 	lsl.w	r3, r7, r3
 8012f20:	4543      	cmp	r3, r8
 8012f22:	f040 8274 	bne.w	801340e <__ieee754_powf+0x56a>
 8012f26:	f007 0701 	and.w	r7, r7, #1
 8012f2a:	f1c7 0702 	rsb	r7, r7, #2
 8012f2e:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 8012f32:	d11f      	bne.n	8012f74 <__ieee754_powf+0xd0>
 8012f34:	2c00      	cmp	r4, #0
 8012f36:	f280 8267 	bge.w	8013408 <__ieee754_powf+0x564>
 8012f3a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8012f3e:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8012f42:	e7c7      	b.n	8012ed4 <__ieee754_powf+0x30>
 8012f44:	2700      	movs	r7, #0
 8012f46:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 8012f4a:	d1f0      	bne.n	8012f2e <__ieee754_powf+0x8a>
 8012f4c:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 8012f50:	f000 8254 	beq.w	80133fc <__ieee754_powf+0x558>
 8012f54:	dd08      	ble.n	8012f68 <__ieee754_powf+0xc4>
 8012f56:	ed9f 0ac2 	vldr	s0, [pc, #776]	; 8013260 <__ieee754_powf+0x3bc>
 8012f5a:	2c00      	cmp	r4, #0
 8012f5c:	bfa8      	it	ge
 8012f5e:	eeb0 0a68 	vmovge.f32	s0, s17
 8012f62:	e7b7      	b.n	8012ed4 <__ieee754_powf+0x30>
 8012f64:	2702      	movs	r7, #2
 8012f66:	e7ee      	b.n	8012f46 <__ieee754_powf+0xa2>
 8012f68:	2c00      	cmp	r4, #0
 8012f6a:	f280 824a 	bge.w	8013402 <__ieee754_powf+0x55e>
 8012f6e:	eeb1 0a68 	vneg.f32	s0, s17
 8012f72:	e7af      	b.n	8012ed4 <__ieee754_powf+0x30>
 8012f74:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 8012f78:	d102      	bne.n	8012f80 <__ieee754_powf+0xdc>
 8012f7a:	ee28 0a08 	vmul.f32	s0, s16, s16
 8012f7e:	e7a9      	b.n	8012ed4 <__ieee754_powf+0x30>
 8012f80:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 8012f84:	eeb0 0a48 	vmov.f32	s0, s16
 8012f88:	d107      	bne.n	8012f9a <__ieee754_powf+0xf6>
 8012f8a:	2e00      	cmp	r6, #0
 8012f8c:	db05      	blt.n	8012f9a <__ieee754_powf+0xf6>
 8012f8e:	ecbd 8b02 	vpop	{d8}
 8012f92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012f96:	f000 bb8f 	b.w	80136b8 <__ieee754_sqrtf>
 8012f9a:	f001 f86f 	bl	801407c <fabsf>
 8012f9e:	b125      	cbz	r5, 8012faa <__ieee754_powf+0x106>
 8012fa0:	f026 4340 	bic.w	r3, r6, #3221225472	; 0xc0000000
 8012fa4:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8012fa8:	d116      	bne.n	8012fd8 <__ieee754_powf+0x134>
 8012faa:	2c00      	cmp	r4, #0
 8012fac:	bfbc      	itt	lt
 8012fae:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 8012fb2:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8012fb6:	2e00      	cmp	r6, #0
 8012fb8:	da8c      	bge.n	8012ed4 <__ieee754_powf+0x30>
 8012fba:	f1a5 557e 	sub.w	r5, r5, #1065353216	; 0x3f800000
 8012fbe:	ea55 0307 	orrs.w	r3, r5, r7
 8012fc2:	d104      	bne.n	8012fce <__ieee754_powf+0x12a>
 8012fc4:	ee70 7a40 	vsub.f32	s15, s0, s0
 8012fc8:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8012fcc:	e782      	b.n	8012ed4 <__ieee754_powf+0x30>
 8012fce:	2f01      	cmp	r7, #1
 8012fd0:	d180      	bne.n	8012ed4 <__ieee754_powf+0x30>
 8012fd2:	eeb1 0a40 	vneg.f32	s0, s0
 8012fd6:	e77d      	b.n	8012ed4 <__ieee754_powf+0x30>
 8012fd8:	0ff0      	lsrs	r0, r6, #31
 8012fda:	3801      	subs	r0, #1
 8012fdc:	ea57 0300 	orrs.w	r3, r7, r0
 8012fe0:	d104      	bne.n	8012fec <__ieee754_powf+0x148>
 8012fe2:	ee38 8a48 	vsub.f32	s16, s16, s16
 8012fe6:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8012fea:	e773      	b.n	8012ed4 <__ieee754_powf+0x30>
 8012fec:	f1b8 4f9a 	cmp.w	r8, #1291845632	; 0x4d000000
 8012ff0:	dd74      	ble.n	80130dc <__ieee754_powf+0x238>
 8012ff2:	4b9c      	ldr	r3, [pc, #624]	; (8013264 <__ieee754_powf+0x3c0>)
 8012ff4:	429d      	cmp	r5, r3
 8012ff6:	dc08      	bgt.n	801300a <__ieee754_powf+0x166>
 8012ff8:	2c00      	cmp	r4, #0
 8012ffa:	da0b      	bge.n	8013014 <__ieee754_powf+0x170>
 8012ffc:	2000      	movs	r0, #0
 8012ffe:	ecbd 8b02 	vpop	{d8}
 8013002:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013006:	f000 bec5 	b.w	8013d94 <__math_oflowf>
 801300a:	4b97      	ldr	r3, [pc, #604]	; (8013268 <__ieee754_powf+0x3c4>)
 801300c:	429d      	cmp	r5, r3
 801300e:	dd08      	ble.n	8013022 <__ieee754_powf+0x17e>
 8013010:	2c00      	cmp	r4, #0
 8013012:	dcf3      	bgt.n	8012ffc <__ieee754_powf+0x158>
 8013014:	2000      	movs	r0, #0
 8013016:	ecbd 8b02 	vpop	{d8}
 801301a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801301e:	f000 beb3 	b.w	8013d88 <__math_uflowf>
 8013022:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8013026:	ee30 0a67 	vsub.f32	s0, s0, s15
 801302a:	eddf 6a90 	vldr	s13, [pc, #576]	; 801326c <__ieee754_powf+0x3c8>
 801302e:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8013032:	eee0 6a67 	vfms.f32	s13, s0, s15
 8013036:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801303a:	eee6 7ac0 	vfms.f32	s15, s13, s0
 801303e:	ee20 7a00 	vmul.f32	s14, s0, s0
 8013042:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013046:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8013270 <__ieee754_powf+0x3cc>
 801304a:	ee67 7a67 	vnmul.f32	s15, s14, s15
 801304e:	ed9f 7a89 	vldr	s14, [pc, #548]	; 8013274 <__ieee754_powf+0x3d0>
 8013052:	eee0 7a07 	vfma.f32	s15, s0, s14
 8013056:	ed9f 7a88 	vldr	s14, [pc, #544]	; 8013278 <__ieee754_powf+0x3d4>
 801305a:	eef0 6a67 	vmov.f32	s13, s15
 801305e:	eee0 6a07 	vfma.f32	s13, s0, s14
 8013062:	ee16 3a90 	vmov	r3, s13
 8013066:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 801306a:	f023 030f 	bic.w	r3, r3, #15
 801306e:	ee00 3a90 	vmov	s1, r3
 8013072:	eee0 0a47 	vfms.f32	s1, s0, s14
 8013076:	ee77 7ae0 	vsub.f32	s15, s15, s1
 801307a:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 801307e:	f024 040f 	bic.w	r4, r4, #15
 8013082:	ee07 4a10 	vmov	s14, r4
 8013086:	ee67 0aa8 	vmul.f32	s1, s15, s17
 801308a:	ee38 7ac7 	vsub.f32	s14, s17, s14
 801308e:	ee07 3a90 	vmov	s15, r3
 8013092:	eee7 0a27 	vfma.f32	s1, s14, s15
 8013096:	3f01      	subs	r7, #1
 8013098:	ea57 0200 	orrs.w	r2, r7, r0
 801309c:	ee07 4a10 	vmov	s14, r4
 80130a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80130a4:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 80130a8:	ee30 7aa7 	vadd.f32	s14, s1, s15
 80130ac:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 80130b0:	ee17 4a10 	vmov	r4, s14
 80130b4:	bf08      	it	eq
 80130b6:	eeb0 8a40 	vmoveq.f32	s16, s0
 80130ba:	2c00      	cmp	r4, #0
 80130bc:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80130c0:	f340 817e 	ble.w	80133c0 <__ieee754_powf+0x51c>
 80130c4:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 80130c8:	f340 80f8 	ble.w	80132bc <__ieee754_powf+0x418>
 80130cc:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80130d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80130d4:	bf4c      	ite	mi
 80130d6:	2001      	movmi	r0, #1
 80130d8:	2000      	movpl	r0, #0
 80130da:	e790      	b.n	8012ffe <__ieee754_powf+0x15a>
 80130dc:	f016 4fff 	tst.w	r6, #2139095040	; 0x7f800000
 80130e0:	bf01      	itttt	eq
 80130e2:	eddf 7a66 	vldreq	s15, [pc, #408]	; 801327c <__ieee754_powf+0x3d8>
 80130e6:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 80130ea:	f06f 0217 	mvneq.w	r2, #23
 80130ee:	ee17 5a90 	vmoveq	r5, s15
 80130f2:	ea4f 53e5 	mov.w	r3, r5, asr #23
 80130f6:	bf18      	it	ne
 80130f8:	2200      	movne	r2, #0
 80130fa:	3b7f      	subs	r3, #127	; 0x7f
 80130fc:	4413      	add	r3, r2
 80130fe:	4a60      	ldr	r2, [pc, #384]	; (8013280 <__ieee754_powf+0x3dc>)
 8013100:	f3c5 0516 	ubfx	r5, r5, #0, #23
 8013104:	4295      	cmp	r5, r2
 8013106:	f045 517e 	orr.w	r1, r5, #1065353216	; 0x3f800000
 801310a:	dd06      	ble.n	801311a <__ieee754_powf+0x276>
 801310c:	4a5d      	ldr	r2, [pc, #372]	; (8013284 <__ieee754_powf+0x3e0>)
 801310e:	4295      	cmp	r5, r2
 8013110:	f340 80a4 	ble.w	801325c <__ieee754_powf+0x3b8>
 8013114:	3301      	adds	r3, #1
 8013116:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 801311a:	2500      	movs	r5, #0
 801311c:	4a5a      	ldr	r2, [pc, #360]	; (8013288 <__ieee754_powf+0x3e4>)
 801311e:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 8013122:	ee07 1a90 	vmov	s15, r1
 8013126:	ed92 7a00 	vldr	s14, [r2]
 801312a:	4a58      	ldr	r2, [pc, #352]	; (801328c <__ieee754_powf+0x3e8>)
 801312c:	ee37 6a27 	vadd.f32	s12, s14, s15
 8013130:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8013134:	eec5 6a86 	vdiv.f32	s13, s11, s12
 8013138:	1049      	asrs	r1, r1, #1
 801313a:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 801313e:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 8013142:	eb01 5145 	add.w	r1, r1, r5, lsl #21
 8013146:	ee37 5ac7 	vsub.f32	s10, s15, s14
 801314a:	ee06 1a10 	vmov	s12, r1
 801314e:	ee65 4a26 	vmul.f32	s9, s10, s13
 8013152:	ee36 7a47 	vsub.f32	s14, s12, s14
 8013156:	ee14 6a90 	vmov	r6, s9
 801315a:	4016      	ands	r6, r2
 801315c:	ee05 6a90 	vmov	s11, r6
 8013160:	eea5 5ac6 	vfms.f32	s10, s11, s12
 8013164:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013168:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8013290 <__ieee754_powf+0x3ec>
 801316c:	eea5 5ae7 	vfms.f32	s10, s11, s15
 8013170:	ee64 7aa4 	vmul.f32	s15, s9, s9
 8013174:	ee25 6a26 	vmul.f32	s12, s10, s13
 8013178:	eddf 6a46 	vldr	s13, [pc, #280]	; 8013294 <__ieee754_powf+0x3f0>
 801317c:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8013180:	eddf 6a45 	vldr	s13, [pc, #276]	; 8013298 <__ieee754_powf+0x3f4>
 8013184:	eee7 6a27 	vfma.f32	s13, s14, s15
 8013188:	ed9f 7a38 	vldr	s14, [pc, #224]	; 801326c <__ieee754_powf+0x3c8>
 801318c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8013190:	eddf 6a42 	vldr	s13, [pc, #264]	; 801329c <__ieee754_powf+0x3f8>
 8013194:	eee7 6a27 	vfma.f32	s13, s14, s15
 8013198:	ed9f 7a41 	vldr	s14, [pc, #260]	; 80132a0 <__ieee754_powf+0x3fc>
 801319c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80131a0:	ee74 6aa5 	vadd.f32	s13, s9, s11
 80131a4:	ee27 5aa7 	vmul.f32	s10, s15, s15
 80131a8:	ee66 6a86 	vmul.f32	s13, s13, s12
 80131ac:	eee5 6a07 	vfma.f32	s13, s10, s14
 80131b0:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 80131b4:	eef0 7a45 	vmov.f32	s15, s10
 80131b8:	eee5 7aa5 	vfma.f32	s15, s11, s11
 80131bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80131c0:	ee17 1a90 	vmov	r1, s15
 80131c4:	4011      	ands	r1, r2
 80131c6:	ee07 1a90 	vmov	s15, r1
 80131ca:	ee37 7ac5 	vsub.f32	s14, s15, s10
 80131ce:	eea5 7ae5 	vfms.f32	s14, s11, s11
 80131d2:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80131d6:	ee27 7a24 	vmul.f32	s14, s14, s9
 80131da:	eea6 7a27 	vfma.f32	s14, s12, s15
 80131de:	eeb0 6a47 	vmov.f32	s12, s14
 80131e2:	eea5 6aa7 	vfma.f32	s12, s11, s15
 80131e6:	ee16 1a10 	vmov	r1, s12
 80131ea:	4011      	ands	r1, r2
 80131ec:	ee06 1a90 	vmov	s13, r1
 80131f0:	eee5 6ae7 	vfms.f32	s13, s11, s15
 80131f4:	eddf 7a2b 	vldr	s15, [pc, #172]	; 80132a4 <__ieee754_powf+0x400>
 80131f8:	eddf 5a2b 	vldr	s11, [pc, #172]	; 80132a8 <__ieee754_powf+0x404>
 80131fc:	ee37 7a66 	vsub.f32	s14, s14, s13
 8013200:	ee06 1a10 	vmov	s12, r1
 8013204:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013208:	eddf 7a28 	vldr	s15, [pc, #160]	; 80132ac <__ieee754_powf+0x408>
 801320c:	4928      	ldr	r1, [pc, #160]	; (80132b0 <__ieee754_powf+0x40c>)
 801320e:	eea6 7a27 	vfma.f32	s14, s12, s15
 8013212:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 8013216:	edd1 7a00 	vldr	s15, [r1]
 801321a:	ee37 7a27 	vadd.f32	s14, s14, s15
 801321e:	ee07 3a90 	vmov	s15, r3
 8013222:	4b24      	ldr	r3, [pc, #144]	; (80132b4 <__ieee754_powf+0x410>)
 8013224:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8013228:	eef0 7a47 	vmov.f32	s15, s14
 801322c:	eee6 7a25 	vfma.f32	s15, s12, s11
 8013230:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8013234:	edd5 0a00 	vldr	s1, [r5]
 8013238:	ee77 7aa0 	vadd.f32	s15, s15, s1
 801323c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013240:	ee17 3a90 	vmov	r3, s15
 8013244:	4013      	ands	r3, r2
 8013246:	ee07 3a90 	vmov	s15, r3
 801324a:	ee77 6ae6 	vsub.f32	s13, s15, s13
 801324e:	ee76 6ae0 	vsub.f32	s13, s13, s1
 8013252:	eee6 6a65 	vfms.f32	s13, s12, s11
 8013256:	ee77 7a66 	vsub.f32	s15, s14, s13
 801325a:	e70e      	b.n	801307a <__ieee754_powf+0x1d6>
 801325c:	2501      	movs	r5, #1
 801325e:	e75d      	b.n	801311c <__ieee754_powf+0x278>
 8013260:	00000000 	.word	0x00000000
 8013264:	3f7ffff3 	.word	0x3f7ffff3
 8013268:	3f800007 	.word	0x3f800007
 801326c:	3eaaaaab 	.word	0x3eaaaaab
 8013270:	3fb8aa3b 	.word	0x3fb8aa3b
 8013274:	36eca570 	.word	0x36eca570
 8013278:	3fb8aa00 	.word	0x3fb8aa00
 801327c:	4b800000 	.word	0x4b800000
 8013280:	001cc471 	.word	0x001cc471
 8013284:	005db3d6 	.word	0x005db3d6
 8013288:	08014850 	.word	0x08014850
 801328c:	fffff000 	.word	0xfffff000
 8013290:	3e6c3255 	.word	0x3e6c3255
 8013294:	3e53f142 	.word	0x3e53f142
 8013298:	3e8ba305 	.word	0x3e8ba305
 801329c:	3edb6db7 	.word	0x3edb6db7
 80132a0:	3f19999a 	.word	0x3f19999a
 80132a4:	3f76384f 	.word	0x3f76384f
 80132a8:	3f763800 	.word	0x3f763800
 80132ac:	369dc3a0 	.word	0x369dc3a0
 80132b0:	08014860 	.word	0x08014860
 80132b4:	08014858 	.word	0x08014858
 80132b8:	3338aa3c 	.word	0x3338aa3c
 80132bc:	f040 8095 	bne.w	80133ea <__ieee754_powf+0x546>
 80132c0:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 80132b8 <__ieee754_powf+0x414>
 80132c4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80132c8:	ee70 6aa6 	vadd.f32	s13, s1, s13
 80132cc:	eef4 6ac7 	vcmpe.f32	s13, s14
 80132d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80132d4:	f73f aefa 	bgt.w	80130cc <__ieee754_powf+0x228>
 80132d8:	15db      	asrs	r3, r3, #23
 80132da:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 80132de:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80132e2:	4103      	asrs	r3, r0
 80132e4:	4423      	add	r3, r4
 80132e6:	494b      	ldr	r1, [pc, #300]	; (8013414 <__ieee754_powf+0x570>)
 80132e8:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80132ec:	3a7f      	subs	r2, #127	; 0x7f
 80132ee:	4111      	asrs	r1, r2
 80132f0:	ea23 0101 	bic.w	r1, r3, r1
 80132f4:	ee07 1a10 	vmov	s14, r1
 80132f8:	f3c3 0016 	ubfx	r0, r3, #0, #23
 80132fc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8013300:	f1c2 0217 	rsb	r2, r2, #23
 8013304:	4110      	asrs	r0, r2
 8013306:	2c00      	cmp	r4, #0
 8013308:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801330c:	bfb8      	it	lt
 801330e:	4240      	neglt	r0, r0
 8013310:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8013314:	ed9f 0a40 	vldr	s0, [pc, #256]	; 8013418 <__ieee754_powf+0x574>
 8013318:	eddf 6a40 	vldr	s13, [pc, #256]	; 801341c <__ieee754_powf+0x578>
 801331c:	ee17 3a10 	vmov	r3, s14
 8013320:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8013324:	f023 030f 	bic.w	r3, r3, #15
 8013328:	ee07 3a10 	vmov	s14, r3
 801332c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013330:	ee27 0a00 	vmul.f32	s0, s14, s0
 8013334:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8013338:	eddf 7a39 	vldr	s15, [pc, #228]	; 8013420 <__ieee754_powf+0x57c>
 801333c:	eea0 0aa7 	vfma.f32	s0, s1, s15
 8013340:	eef0 7a40 	vmov.f32	s15, s0
 8013344:	eee7 7a26 	vfma.f32	s15, s14, s13
 8013348:	eeb0 6a67 	vmov.f32	s12, s15
 801334c:	eea7 6a66 	vfms.f32	s12, s14, s13
 8013350:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8013354:	ee30 0a46 	vsub.f32	s0, s0, s12
 8013358:	eddf 6a32 	vldr	s13, [pc, #200]	; 8013424 <__ieee754_powf+0x580>
 801335c:	ed9f 6a32 	vldr	s12, [pc, #200]	; 8013428 <__ieee754_powf+0x584>
 8013360:	eee7 6a06 	vfma.f32	s13, s14, s12
 8013364:	ed9f 6a31 	vldr	s12, [pc, #196]	; 801342c <__ieee754_powf+0x588>
 8013368:	eea6 6a87 	vfma.f32	s12, s13, s14
 801336c:	eddf 6a30 	vldr	s13, [pc, #192]	; 8013430 <__ieee754_powf+0x58c>
 8013370:	eee6 6a07 	vfma.f32	s13, s12, s14
 8013374:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 8013434 <__ieee754_powf+0x590>
 8013378:	eea6 6a87 	vfma.f32	s12, s13, s14
 801337c:	eef0 6a67 	vmov.f32	s13, s15
 8013380:	eee6 6a47 	vfms.f32	s13, s12, s14
 8013384:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8013388:	ee27 6aa6 	vmul.f32	s12, s15, s13
 801338c:	ee76 6ac7 	vsub.f32	s13, s13, s14
 8013390:	eea7 0a80 	vfma.f32	s0, s15, s0
 8013394:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8013398:	ee37 0a40 	vsub.f32	s0, s14, s0
 801339c:	ee70 7a67 	vsub.f32	s15, s0, s15
 80133a0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80133a4:	ee30 0a67 	vsub.f32	s0, s0, s15
 80133a8:	ee10 3a10 	vmov	r3, s0
 80133ac:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 80133b0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80133b4:	da1f      	bge.n	80133f6 <__ieee754_powf+0x552>
 80133b6:	f000 febd 	bl	8014134 <scalbnf>
 80133ba:	ee20 0a08 	vmul.f32	s0, s0, s16
 80133be:	e589      	b.n	8012ed4 <__ieee754_powf+0x30>
 80133c0:	4a1d      	ldr	r2, [pc, #116]	; (8013438 <__ieee754_powf+0x594>)
 80133c2:	4293      	cmp	r3, r2
 80133c4:	dd07      	ble.n	80133d6 <__ieee754_powf+0x532>
 80133c6:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80133ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80133ce:	bf4c      	ite	mi
 80133d0:	2001      	movmi	r0, #1
 80133d2:	2000      	movpl	r0, #0
 80133d4:	e61f      	b.n	8013016 <__ieee754_powf+0x172>
 80133d6:	d108      	bne.n	80133ea <__ieee754_powf+0x546>
 80133d8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80133dc:	eeb4 7ae0 	vcmpe.f32	s14, s1
 80133e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80133e4:	f6ff af78 	blt.w	80132d8 <__ieee754_powf+0x434>
 80133e8:	e7ed      	b.n	80133c6 <__ieee754_powf+0x522>
 80133ea:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 80133ee:	f73f af73 	bgt.w	80132d8 <__ieee754_powf+0x434>
 80133f2:	2000      	movs	r0, #0
 80133f4:	e78c      	b.n	8013310 <__ieee754_powf+0x46c>
 80133f6:	ee00 3a10 	vmov	s0, r3
 80133fa:	e7de      	b.n	80133ba <__ieee754_powf+0x516>
 80133fc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8013400:	e568      	b.n	8012ed4 <__ieee754_powf+0x30>
 8013402:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 801343c <__ieee754_powf+0x598>
 8013406:	e565      	b.n	8012ed4 <__ieee754_powf+0x30>
 8013408:	eeb0 0a48 	vmov.f32	s0, s16
 801340c:	e562      	b.n	8012ed4 <__ieee754_powf+0x30>
 801340e:	2700      	movs	r7, #0
 8013410:	e58d      	b.n	8012f2e <__ieee754_powf+0x8a>
 8013412:	bf00      	nop
 8013414:	007fffff 	.word	0x007fffff
 8013418:	35bfbe8c 	.word	0x35bfbe8c
 801341c:	3f317200 	.word	0x3f317200
 8013420:	3f317218 	.word	0x3f317218
 8013424:	b5ddea0e 	.word	0xb5ddea0e
 8013428:	3331bb4c 	.word	0x3331bb4c
 801342c:	388ab355 	.word	0x388ab355
 8013430:	bb360b61 	.word	0xbb360b61
 8013434:	3e2aaaab 	.word	0x3e2aaaab
 8013438:	43160000 	.word	0x43160000
 801343c:	00000000 	.word	0x00000000

08013440 <__ieee754_rem_pio2f>:
 8013440:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013442:	ee10 6a10 	vmov	r6, s0
 8013446:	4b8e      	ldr	r3, [pc, #568]	; (8013680 <__ieee754_rem_pio2f+0x240>)
 8013448:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 801344c:	429d      	cmp	r5, r3
 801344e:	b087      	sub	sp, #28
 8013450:	eef0 7a40 	vmov.f32	s15, s0
 8013454:	4604      	mov	r4, r0
 8013456:	dc05      	bgt.n	8013464 <__ieee754_rem_pio2f+0x24>
 8013458:	2300      	movs	r3, #0
 801345a:	ed80 0a00 	vstr	s0, [r0]
 801345e:	6043      	str	r3, [r0, #4]
 8013460:	2000      	movs	r0, #0
 8013462:	e01a      	b.n	801349a <__ieee754_rem_pio2f+0x5a>
 8013464:	4b87      	ldr	r3, [pc, #540]	; (8013684 <__ieee754_rem_pio2f+0x244>)
 8013466:	429d      	cmp	r5, r3
 8013468:	dc46      	bgt.n	80134f8 <__ieee754_rem_pio2f+0xb8>
 801346a:	2e00      	cmp	r6, #0
 801346c:	ed9f 0a86 	vldr	s0, [pc, #536]	; 8013688 <__ieee754_rem_pio2f+0x248>
 8013470:	4b86      	ldr	r3, [pc, #536]	; (801368c <__ieee754_rem_pio2f+0x24c>)
 8013472:	f025 050f 	bic.w	r5, r5, #15
 8013476:	dd1f      	ble.n	80134b8 <__ieee754_rem_pio2f+0x78>
 8013478:	429d      	cmp	r5, r3
 801347a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801347e:	d00e      	beq.n	801349e <__ieee754_rem_pio2f+0x5e>
 8013480:	ed9f 7a83 	vldr	s14, [pc, #524]	; 8013690 <__ieee754_rem_pio2f+0x250>
 8013484:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8013488:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801348c:	ed80 0a00 	vstr	s0, [r0]
 8013490:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013494:	2001      	movs	r0, #1
 8013496:	edc4 7a01 	vstr	s15, [r4, #4]
 801349a:	b007      	add	sp, #28
 801349c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801349e:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 8013694 <__ieee754_rem_pio2f+0x254>
 80134a2:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8013698 <__ieee754_rem_pio2f+0x258>
 80134a6:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80134aa:	ee77 6ac7 	vsub.f32	s13, s15, s14
 80134ae:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80134b2:	edc0 6a00 	vstr	s13, [r0]
 80134b6:	e7eb      	b.n	8013490 <__ieee754_rem_pio2f+0x50>
 80134b8:	429d      	cmp	r5, r3
 80134ba:	ee77 7a80 	vadd.f32	s15, s15, s0
 80134be:	d00e      	beq.n	80134de <__ieee754_rem_pio2f+0x9e>
 80134c0:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8013690 <__ieee754_rem_pio2f+0x250>
 80134c4:	ee37 0a87 	vadd.f32	s0, s15, s14
 80134c8:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80134cc:	ed80 0a00 	vstr	s0, [r0]
 80134d0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80134d4:	f04f 30ff 	mov.w	r0, #4294967295
 80134d8:	edc4 7a01 	vstr	s15, [r4, #4]
 80134dc:	e7dd      	b.n	801349a <__ieee754_rem_pio2f+0x5a>
 80134de:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 8013694 <__ieee754_rem_pio2f+0x254>
 80134e2:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8013698 <__ieee754_rem_pio2f+0x258>
 80134e6:	ee77 7a80 	vadd.f32	s15, s15, s0
 80134ea:	ee77 6a87 	vadd.f32	s13, s15, s14
 80134ee:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80134f2:	edc0 6a00 	vstr	s13, [r0]
 80134f6:	e7eb      	b.n	80134d0 <__ieee754_rem_pio2f+0x90>
 80134f8:	4b68      	ldr	r3, [pc, #416]	; (801369c <__ieee754_rem_pio2f+0x25c>)
 80134fa:	429d      	cmp	r5, r3
 80134fc:	dc72      	bgt.n	80135e4 <__ieee754_rem_pio2f+0x1a4>
 80134fe:	f000 fdbd 	bl	801407c <fabsf>
 8013502:	ed9f 7a67 	vldr	s14, [pc, #412]	; 80136a0 <__ieee754_rem_pio2f+0x260>
 8013506:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801350a:	eee0 7a07 	vfma.f32	s15, s0, s14
 801350e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013512:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8013516:	ee17 0a90 	vmov	r0, s15
 801351a:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8013688 <__ieee754_rem_pio2f+0x248>
 801351e:	eea7 0a67 	vfms.f32	s0, s14, s15
 8013522:	281f      	cmp	r0, #31
 8013524:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8013690 <__ieee754_rem_pio2f+0x250>
 8013528:	ee67 7a27 	vmul.f32	s15, s14, s15
 801352c:	eeb1 6a47 	vneg.f32	s12, s14
 8013530:	ee70 6a67 	vsub.f32	s13, s0, s15
 8013534:	ee16 2a90 	vmov	r2, s13
 8013538:	dc1c      	bgt.n	8013574 <__ieee754_rem_pio2f+0x134>
 801353a:	495a      	ldr	r1, [pc, #360]	; (80136a4 <__ieee754_rem_pio2f+0x264>)
 801353c:	1e47      	subs	r7, r0, #1
 801353e:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 8013542:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8013546:	428b      	cmp	r3, r1
 8013548:	d014      	beq.n	8013574 <__ieee754_rem_pio2f+0x134>
 801354a:	6022      	str	r2, [r4, #0]
 801354c:	ed94 7a00 	vldr	s14, [r4]
 8013550:	ee30 0a47 	vsub.f32	s0, s0, s14
 8013554:	2e00      	cmp	r6, #0
 8013556:	ee30 0a67 	vsub.f32	s0, s0, s15
 801355a:	ed84 0a01 	vstr	s0, [r4, #4]
 801355e:	da9c      	bge.n	801349a <__ieee754_rem_pio2f+0x5a>
 8013560:	eeb1 7a47 	vneg.f32	s14, s14
 8013564:	eeb1 0a40 	vneg.f32	s0, s0
 8013568:	ed84 7a00 	vstr	s14, [r4]
 801356c:	ed84 0a01 	vstr	s0, [r4, #4]
 8013570:	4240      	negs	r0, r0
 8013572:	e792      	b.n	801349a <__ieee754_rem_pio2f+0x5a>
 8013574:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8013578:	15eb      	asrs	r3, r5, #23
 801357a:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 801357e:	2d08      	cmp	r5, #8
 8013580:	dde3      	ble.n	801354a <__ieee754_rem_pio2f+0x10a>
 8013582:	eddf 7a44 	vldr	s15, [pc, #272]	; 8013694 <__ieee754_rem_pio2f+0x254>
 8013586:	eddf 5a44 	vldr	s11, [pc, #272]	; 8013698 <__ieee754_rem_pio2f+0x258>
 801358a:	eef0 6a40 	vmov.f32	s13, s0
 801358e:	eee6 6a27 	vfma.f32	s13, s12, s15
 8013592:	ee30 0a66 	vsub.f32	s0, s0, s13
 8013596:	eea6 0a27 	vfma.f32	s0, s12, s15
 801359a:	eef0 7a40 	vmov.f32	s15, s0
 801359e:	eed7 7a25 	vfnms.f32	s15, s14, s11
 80135a2:	ee76 5ae7 	vsub.f32	s11, s13, s15
 80135a6:	ee15 2a90 	vmov	r2, s11
 80135aa:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80135ae:	1a5b      	subs	r3, r3, r1
 80135b0:	2b19      	cmp	r3, #25
 80135b2:	dc04      	bgt.n	80135be <__ieee754_rem_pio2f+0x17e>
 80135b4:	edc4 5a00 	vstr	s11, [r4]
 80135b8:	eeb0 0a66 	vmov.f32	s0, s13
 80135bc:	e7c6      	b.n	801354c <__ieee754_rem_pio2f+0x10c>
 80135be:	eddf 5a3a 	vldr	s11, [pc, #232]	; 80136a8 <__ieee754_rem_pio2f+0x268>
 80135c2:	eeb0 0a66 	vmov.f32	s0, s13
 80135c6:	eea6 0a25 	vfma.f32	s0, s12, s11
 80135ca:	ee76 7ac0 	vsub.f32	s15, s13, s0
 80135ce:	eddf 6a37 	vldr	s13, [pc, #220]	; 80136ac <__ieee754_rem_pio2f+0x26c>
 80135d2:	eee6 7a25 	vfma.f32	s15, s12, s11
 80135d6:	eed7 7a26 	vfnms.f32	s15, s14, s13
 80135da:	ee30 7a67 	vsub.f32	s14, s0, s15
 80135de:	ed84 7a00 	vstr	s14, [r4]
 80135e2:	e7b3      	b.n	801354c <__ieee754_rem_pio2f+0x10c>
 80135e4:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 80135e8:	db06      	blt.n	80135f8 <__ieee754_rem_pio2f+0x1b8>
 80135ea:	ee70 7a40 	vsub.f32	s15, s0, s0
 80135ee:	edc0 7a01 	vstr	s15, [r0, #4]
 80135f2:	edc0 7a00 	vstr	s15, [r0]
 80135f6:	e733      	b.n	8013460 <__ieee754_rem_pio2f+0x20>
 80135f8:	15ea      	asrs	r2, r5, #23
 80135fa:	3a86      	subs	r2, #134	; 0x86
 80135fc:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8013600:	ee07 3a90 	vmov	s15, r3
 8013604:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8013608:	eddf 6a29 	vldr	s13, [pc, #164]	; 80136b0 <__ieee754_rem_pio2f+0x270>
 801360c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8013610:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013614:	ed8d 7a03 	vstr	s14, [sp, #12]
 8013618:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801361c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8013620:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8013624:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013628:	ed8d 7a04 	vstr	s14, [sp, #16]
 801362c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8013630:	eef5 7a40 	vcmp.f32	s15, #0.0
 8013634:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013638:	edcd 7a05 	vstr	s15, [sp, #20]
 801363c:	d11e      	bne.n	801367c <__ieee754_rem_pio2f+0x23c>
 801363e:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8013642:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013646:	bf14      	ite	ne
 8013648:	2302      	movne	r3, #2
 801364a:	2301      	moveq	r3, #1
 801364c:	4919      	ldr	r1, [pc, #100]	; (80136b4 <__ieee754_rem_pio2f+0x274>)
 801364e:	9101      	str	r1, [sp, #4]
 8013650:	2102      	movs	r1, #2
 8013652:	9100      	str	r1, [sp, #0]
 8013654:	a803      	add	r0, sp, #12
 8013656:	4621      	mov	r1, r4
 8013658:	f000 f892 	bl	8013780 <__kernel_rem_pio2f>
 801365c:	2e00      	cmp	r6, #0
 801365e:	f6bf af1c 	bge.w	801349a <__ieee754_rem_pio2f+0x5a>
 8013662:	edd4 7a00 	vldr	s15, [r4]
 8013666:	eef1 7a67 	vneg.f32	s15, s15
 801366a:	edc4 7a00 	vstr	s15, [r4]
 801366e:	edd4 7a01 	vldr	s15, [r4, #4]
 8013672:	eef1 7a67 	vneg.f32	s15, s15
 8013676:	edc4 7a01 	vstr	s15, [r4, #4]
 801367a:	e779      	b.n	8013570 <__ieee754_rem_pio2f+0x130>
 801367c:	2303      	movs	r3, #3
 801367e:	e7e5      	b.n	801364c <__ieee754_rem_pio2f+0x20c>
 8013680:	3f490fd8 	.word	0x3f490fd8
 8013684:	4016cbe3 	.word	0x4016cbe3
 8013688:	3fc90f80 	.word	0x3fc90f80
 801368c:	3fc90fd0 	.word	0x3fc90fd0
 8013690:	37354443 	.word	0x37354443
 8013694:	37354400 	.word	0x37354400
 8013698:	2e85a308 	.word	0x2e85a308
 801369c:	43490f80 	.word	0x43490f80
 80136a0:	3f22f984 	.word	0x3f22f984
 80136a4:	08014868 	.word	0x08014868
 80136a8:	2e85a300 	.word	0x2e85a300
 80136ac:	248d3132 	.word	0x248d3132
 80136b0:	43800000 	.word	0x43800000
 80136b4:	080148e8 	.word	0x080148e8

080136b8 <__ieee754_sqrtf>:
 80136b8:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80136bc:	4770      	bx	lr
	...

080136c0 <__kernel_cosf>:
 80136c0:	ee10 3a10 	vmov	r3, s0
 80136c4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80136c8:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80136cc:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80136d0:	da05      	bge.n	80136de <__kernel_cosf+0x1e>
 80136d2:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80136d6:	ee17 2a90 	vmov	r2, s15
 80136da:	2a00      	cmp	r2, #0
 80136dc:	d03d      	beq.n	801375a <__kernel_cosf+0x9a>
 80136de:	ee60 5a00 	vmul.f32	s11, s0, s0
 80136e2:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8013760 <__kernel_cosf+0xa0>
 80136e6:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8013764 <__kernel_cosf+0xa4>
 80136ea:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8013768 <__kernel_cosf+0xa8>
 80136ee:	4a1f      	ldr	r2, [pc, #124]	; (801376c <__kernel_cosf+0xac>)
 80136f0:	eea5 7aa7 	vfma.f32	s14, s11, s15
 80136f4:	4293      	cmp	r3, r2
 80136f6:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8013770 <__kernel_cosf+0xb0>
 80136fa:	eee7 7a25 	vfma.f32	s15, s14, s11
 80136fe:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8013774 <__kernel_cosf+0xb4>
 8013702:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8013706:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8013778 <__kernel_cosf+0xb8>
 801370a:	eee7 7a25 	vfma.f32	s15, s14, s11
 801370e:	eeb0 7a66 	vmov.f32	s14, s13
 8013712:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8013716:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 801371a:	ee65 7aa6 	vmul.f32	s15, s11, s13
 801371e:	ee67 6a25 	vmul.f32	s13, s14, s11
 8013722:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 8013726:	eea5 7aa6 	vfma.f32	s14, s11, s13
 801372a:	dc04      	bgt.n	8013736 <__kernel_cosf+0x76>
 801372c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8013730:	ee36 0a47 	vsub.f32	s0, s12, s14
 8013734:	4770      	bx	lr
 8013736:	4a11      	ldr	r2, [pc, #68]	; (801377c <__kernel_cosf+0xbc>)
 8013738:	4293      	cmp	r3, r2
 801373a:	bfda      	itte	le
 801373c:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8013740:	ee06 3a90 	vmovle	s13, r3
 8013744:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 8013748:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801374c:	ee36 0a66 	vsub.f32	s0, s12, s13
 8013750:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013754:	ee30 0a67 	vsub.f32	s0, s0, s15
 8013758:	4770      	bx	lr
 801375a:	eeb0 0a46 	vmov.f32	s0, s12
 801375e:	4770      	bx	lr
 8013760:	ad47d74e 	.word	0xad47d74e
 8013764:	310f74f6 	.word	0x310f74f6
 8013768:	3d2aaaab 	.word	0x3d2aaaab
 801376c:	3e999999 	.word	0x3e999999
 8013770:	b493f27c 	.word	0xb493f27c
 8013774:	37d00d01 	.word	0x37d00d01
 8013778:	bab60b61 	.word	0xbab60b61
 801377c:	3f480000 	.word	0x3f480000

08013780 <__kernel_rem_pio2f>:
 8013780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013784:	ed2d 8b04 	vpush	{d8-d9}
 8013788:	b0d9      	sub	sp, #356	; 0x164
 801378a:	4688      	mov	r8, r1
 801378c:	9002      	str	r0, [sp, #8]
 801378e:	49bb      	ldr	r1, [pc, #748]	; (8013a7c <__kernel_rem_pio2f+0x2fc>)
 8013790:	9866      	ldr	r0, [sp, #408]	; 0x198
 8013792:	9301      	str	r3, [sp, #4]
 8013794:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 8013798:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 801379c:	1e59      	subs	r1, r3, #1
 801379e:	1d13      	adds	r3, r2, #4
 80137a0:	db27      	blt.n	80137f2 <__kernel_rem_pio2f+0x72>
 80137a2:	f1b2 0b03 	subs.w	fp, r2, #3
 80137a6:	bf48      	it	mi
 80137a8:	f102 0b04 	addmi.w	fp, r2, #4
 80137ac:	ea4f 00eb 	mov.w	r0, fp, asr #3
 80137b0:	1c45      	adds	r5, r0, #1
 80137b2:	00ec      	lsls	r4, r5, #3
 80137b4:	1a47      	subs	r7, r0, r1
 80137b6:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 8013a8c <__kernel_rem_pio2f+0x30c>
 80137ba:	9403      	str	r4, [sp, #12]
 80137bc:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 80137c0:	eb0a 0c01 	add.w	ip, sl, r1
 80137c4:	ae1c      	add	r6, sp, #112	; 0x70
 80137c6:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 80137ca:	2400      	movs	r4, #0
 80137cc:	4564      	cmp	r4, ip
 80137ce:	dd12      	ble.n	80137f6 <__kernel_rem_pio2f+0x76>
 80137d0:	9b01      	ldr	r3, [sp, #4]
 80137d2:	ac1c      	add	r4, sp, #112	; 0x70
 80137d4:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 80137d8:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 80137dc:	f04f 0c00 	mov.w	ip, #0
 80137e0:	45d4      	cmp	ip, sl
 80137e2:	dc27      	bgt.n	8013834 <__kernel_rem_pio2f+0xb4>
 80137e4:	f8dd 9008 	ldr.w	r9, [sp, #8]
 80137e8:	eddf 7aa8 	vldr	s15, [pc, #672]	; 8013a8c <__kernel_rem_pio2f+0x30c>
 80137ec:	4627      	mov	r7, r4
 80137ee:	2600      	movs	r6, #0
 80137f0:	e016      	b.n	8013820 <__kernel_rem_pio2f+0xa0>
 80137f2:	2000      	movs	r0, #0
 80137f4:	e7dc      	b.n	80137b0 <__kernel_rem_pio2f+0x30>
 80137f6:	42e7      	cmn	r7, r4
 80137f8:	bf5d      	ittte	pl
 80137fa:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 80137fe:	ee07 3a90 	vmovpl	s15, r3
 8013802:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8013806:	eef0 7a47 	vmovmi.f32	s15, s14
 801380a:	ece6 7a01 	vstmia	r6!, {s15}
 801380e:	3401      	adds	r4, #1
 8013810:	e7dc      	b.n	80137cc <__kernel_rem_pio2f+0x4c>
 8013812:	ecf9 6a01 	vldmia	r9!, {s13}
 8013816:	ed97 7a00 	vldr	s14, [r7]
 801381a:	eee6 7a87 	vfma.f32	s15, s13, s14
 801381e:	3601      	adds	r6, #1
 8013820:	428e      	cmp	r6, r1
 8013822:	f1a7 0704 	sub.w	r7, r7, #4
 8013826:	ddf4      	ble.n	8013812 <__kernel_rem_pio2f+0x92>
 8013828:	eceb 7a01 	vstmia	fp!, {s15}
 801382c:	f10c 0c01 	add.w	ip, ip, #1
 8013830:	3404      	adds	r4, #4
 8013832:	e7d5      	b.n	80137e0 <__kernel_rem_pio2f+0x60>
 8013834:	ab08      	add	r3, sp, #32
 8013836:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 801383a:	eddf 8a93 	vldr	s17, [pc, #588]	; 8013a88 <__kernel_rem_pio2f+0x308>
 801383e:	ed9f 9a91 	vldr	s18, [pc, #580]	; 8013a84 <__kernel_rem_pio2f+0x304>
 8013842:	9304      	str	r3, [sp, #16]
 8013844:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 8013848:	4656      	mov	r6, sl
 801384a:	00b3      	lsls	r3, r6, #2
 801384c:	9305      	str	r3, [sp, #20]
 801384e:	ab58      	add	r3, sp, #352	; 0x160
 8013850:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 8013854:	ac08      	add	r4, sp, #32
 8013856:	ab44      	add	r3, sp, #272	; 0x110
 8013858:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 801385c:	46a4      	mov	ip, r4
 801385e:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 8013862:	4637      	mov	r7, r6
 8013864:	2f00      	cmp	r7, #0
 8013866:	f1a0 0004 	sub.w	r0, r0, #4
 801386a:	dc4f      	bgt.n	801390c <__kernel_rem_pio2f+0x18c>
 801386c:	4628      	mov	r0, r5
 801386e:	e9cd 1206 	strd	r1, r2, [sp, #24]
 8013872:	f000 fc5f 	bl	8014134 <scalbnf>
 8013876:	eeb0 8a40 	vmov.f32	s16, s0
 801387a:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 801387e:	ee28 0a00 	vmul.f32	s0, s16, s0
 8013882:	f000 fc0f 	bl	80140a4 <floorf>
 8013886:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 801388a:	eea0 8a67 	vfms.f32	s16, s0, s15
 801388e:	2d00      	cmp	r5, #0
 8013890:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8013894:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8013898:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 801389c:	ee17 9a90 	vmov	r9, s15
 80138a0:	ee38 8a40 	vsub.f32	s16, s16, s0
 80138a4:	dd44      	ble.n	8013930 <__kernel_rem_pio2f+0x1b0>
 80138a6:	f106 3cff 	add.w	ip, r6, #4294967295
 80138aa:	ab08      	add	r3, sp, #32
 80138ac:	f1c5 0e08 	rsb	lr, r5, #8
 80138b0:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 80138b4:	fa47 f00e 	asr.w	r0, r7, lr
 80138b8:	4481      	add	r9, r0
 80138ba:	fa00 f00e 	lsl.w	r0, r0, lr
 80138be:	1a3f      	subs	r7, r7, r0
 80138c0:	f1c5 0007 	rsb	r0, r5, #7
 80138c4:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 80138c8:	4107      	asrs	r7, r0
 80138ca:	2f00      	cmp	r7, #0
 80138cc:	dd3f      	ble.n	801394e <__kernel_rem_pio2f+0x1ce>
 80138ce:	f04f 0e00 	mov.w	lr, #0
 80138d2:	f109 0901 	add.w	r9, r9, #1
 80138d6:	4673      	mov	r3, lr
 80138d8:	4576      	cmp	r6, lr
 80138da:	dc6b      	bgt.n	80139b4 <__kernel_rem_pio2f+0x234>
 80138dc:	2d00      	cmp	r5, #0
 80138de:	dd04      	ble.n	80138ea <__kernel_rem_pio2f+0x16a>
 80138e0:	2d01      	cmp	r5, #1
 80138e2:	d078      	beq.n	80139d6 <__kernel_rem_pio2f+0x256>
 80138e4:	2d02      	cmp	r5, #2
 80138e6:	f000 8081 	beq.w	80139ec <__kernel_rem_pio2f+0x26c>
 80138ea:	2f02      	cmp	r7, #2
 80138ec:	d12f      	bne.n	801394e <__kernel_rem_pio2f+0x1ce>
 80138ee:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80138f2:	ee30 8a48 	vsub.f32	s16, s0, s16
 80138f6:	b353      	cbz	r3, 801394e <__kernel_rem_pio2f+0x1ce>
 80138f8:	4628      	mov	r0, r5
 80138fa:	e9cd 1206 	strd	r1, r2, [sp, #24]
 80138fe:	f000 fc19 	bl	8014134 <scalbnf>
 8013902:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8013906:	ee38 8a40 	vsub.f32	s16, s16, s0
 801390a:	e020      	b.n	801394e <__kernel_rem_pio2f+0x1ce>
 801390c:	ee60 7a28 	vmul.f32	s15, s0, s17
 8013910:	3f01      	subs	r7, #1
 8013912:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013916:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801391a:	eea7 0ac9 	vfms.f32	s0, s15, s18
 801391e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8013922:	ecac 0a01 	vstmia	ip!, {s0}
 8013926:	ed90 0a00 	vldr	s0, [r0]
 801392a:	ee37 0a80 	vadd.f32	s0, s15, s0
 801392e:	e799      	b.n	8013864 <__kernel_rem_pio2f+0xe4>
 8013930:	d105      	bne.n	801393e <__kernel_rem_pio2f+0x1be>
 8013932:	1e70      	subs	r0, r6, #1
 8013934:	ab08      	add	r3, sp, #32
 8013936:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 801393a:	11ff      	asrs	r7, r7, #7
 801393c:	e7c5      	b.n	80138ca <__kernel_rem_pio2f+0x14a>
 801393e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8013942:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8013946:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801394a:	da31      	bge.n	80139b0 <__kernel_rem_pio2f+0x230>
 801394c:	2700      	movs	r7, #0
 801394e:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8013952:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013956:	f040 809b 	bne.w	8013a90 <__kernel_rem_pio2f+0x310>
 801395a:	1e74      	subs	r4, r6, #1
 801395c:	46a4      	mov	ip, r4
 801395e:	2000      	movs	r0, #0
 8013960:	45d4      	cmp	ip, sl
 8013962:	da4a      	bge.n	80139fa <__kernel_rem_pio2f+0x27a>
 8013964:	2800      	cmp	r0, #0
 8013966:	d07a      	beq.n	8013a5e <__kernel_rem_pio2f+0x2de>
 8013968:	ab08      	add	r3, sp, #32
 801396a:	3d08      	subs	r5, #8
 801396c:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8013970:	2b00      	cmp	r3, #0
 8013972:	f000 8081 	beq.w	8013a78 <__kernel_rem_pio2f+0x2f8>
 8013976:	4628      	mov	r0, r5
 8013978:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801397c:	00a5      	lsls	r5, r4, #2
 801397e:	f000 fbd9 	bl	8014134 <scalbnf>
 8013982:	aa44      	add	r2, sp, #272	; 0x110
 8013984:	1d2b      	adds	r3, r5, #4
 8013986:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8013a88 <__kernel_rem_pio2f+0x308>
 801398a:	18d1      	adds	r1, r2, r3
 801398c:	4622      	mov	r2, r4
 801398e:	2a00      	cmp	r2, #0
 8013990:	f280 80ae 	bge.w	8013af0 <__kernel_rem_pio2f+0x370>
 8013994:	4622      	mov	r2, r4
 8013996:	2a00      	cmp	r2, #0
 8013998:	f2c0 80cc 	blt.w	8013b34 <__kernel_rem_pio2f+0x3b4>
 801399c:	a944      	add	r1, sp, #272	; 0x110
 801399e:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 80139a2:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 8013a80 <__kernel_rem_pio2f+0x300>
 80139a6:	eddf 7a39 	vldr	s15, [pc, #228]	; 8013a8c <__kernel_rem_pio2f+0x30c>
 80139aa:	2000      	movs	r0, #0
 80139ac:	1aa1      	subs	r1, r4, r2
 80139ae:	e0b6      	b.n	8013b1e <__kernel_rem_pio2f+0x39e>
 80139b0:	2702      	movs	r7, #2
 80139b2:	e78c      	b.n	80138ce <__kernel_rem_pio2f+0x14e>
 80139b4:	6820      	ldr	r0, [r4, #0]
 80139b6:	b94b      	cbnz	r3, 80139cc <__kernel_rem_pio2f+0x24c>
 80139b8:	b118      	cbz	r0, 80139c2 <__kernel_rem_pio2f+0x242>
 80139ba:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 80139be:	6020      	str	r0, [r4, #0]
 80139c0:	2001      	movs	r0, #1
 80139c2:	f10e 0e01 	add.w	lr, lr, #1
 80139c6:	3404      	adds	r4, #4
 80139c8:	4603      	mov	r3, r0
 80139ca:	e785      	b.n	80138d8 <__kernel_rem_pio2f+0x158>
 80139cc:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 80139d0:	6020      	str	r0, [r4, #0]
 80139d2:	4618      	mov	r0, r3
 80139d4:	e7f5      	b.n	80139c2 <__kernel_rem_pio2f+0x242>
 80139d6:	1e74      	subs	r4, r6, #1
 80139d8:	a808      	add	r0, sp, #32
 80139da:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 80139de:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 80139e2:	f10d 0c20 	add.w	ip, sp, #32
 80139e6:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 80139ea:	e77e      	b.n	80138ea <__kernel_rem_pio2f+0x16a>
 80139ec:	1e74      	subs	r4, r6, #1
 80139ee:	a808      	add	r0, sp, #32
 80139f0:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 80139f4:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 80139f8:	e7f3      	b.n	80139e2 <__kernel_rem_pio2f+0x262>
 80139fa:	ab08      	add	r3, sp, #32
 80139fc:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8013a00:	f10c 3cff 	add.w	ip, ip, #4294967295
 8013a04:	4318      	orrs	r0, r3
 8013a06:	e7ab      	b.n	8013960 <__kernel_rem_pio2f+0x1e0>
 8013a08:	f10c 0c01 	add.w	ip, ip, #1
 8013a0c:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 8013a10:	2c00      	cmp	r4, #0
 8013a12:	d0f9      	beq.n	8013a08 <__kernel_rem_pio2f+0x288>
 8013a14:	9b05      	ldr	r3, [sp, #20]
 8013a16:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8013a1a:	eb0d 0003 	add.w	r0, sp, r3
 8013a1e:	9b01      	ldr	r3, [sp, #4]
 8013a20:	18f4      	adds	r4, r6, r3
 8013a22:	ab1c      	add	r3, sp, #112	; 0x70
 8013a24:	1c77      	adds	r7, r6, #1
 8013a26:	384c      	subs	r0, #76	; 0x4c
 8013a28:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8013a2c:	4466      	add	r6, ip
 8013a2e:	42be      	cmp	r6, r7
 8013a30:	f6ff af0b 	blt.w	801384a <__kernel_rem_pio2f+0xca>
 8013a34:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 8013a38:	f8dd e008 	ldr.w	lr, [sp, #8]
 8013a3c:	ee07 3a90 	vmov	s15, r3
 8013a40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013a44:	f04f 0c00 	mov.w	ip, #0
 8013a48:	ece4 7a01 	vstmia	r4!, {s15}
 8013a4c:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8013a8c <__kernel_rem_pio2f+0x30c>
 8013a50:	46a1      	mov	r9, r4
 8013a52:	458c      	cmp	ip, r1
 8013a54:	dd07      	ble.n	8013a66 <__kernel_rem_pio2f+0x2e6>
 8013a56:	ece0 7a01 	vstmia	r0!, {s15}
 8013a5a:	3701      	adds	r7, #1
 8013a5c:	e7e7      	b.n	8013a2e <__kernel_rem_pio2f+0x2ae>
 8013a5e:	9804      	ldr	r0, [sp, #16]
 8013a60:	f04f 0c01 	mov.w	ip, #1
 8013a64:	e7d2      	b.n	8013a0c <__kernel_rem_pio2f+0x28c>
 8013a66:	ecfe 6a01 	vldmia	lr!, {s13}
 8013a6a:	ed39 7a01 	vldmdb	r9!, {s14}
 8013a6e:	f10c 0c01 	add.w	ip, ip, #1
 8013a72:	eee6 7a87 	vfma.f32	s15, s13, s14
 8013a76:	e7ec      	b.n	8013a52 <__kernel_rem_pio2f+0x2d2>
 8013a78:	3c01      	subs	r4, #1
 8013a7a:	e775      	b.n	8013968 <__kernel_rem_pio2f+0x1e8>
 8013a7c:	08014c2c 	.word	0x08014c2c
 8013a80:	08014c00 	.word	0x08014c00
 8013a84:	43800000 	.word	0x43800000
 8013a88:	3b800000 	.word	0x3b800000
 8013a8c:	00000000 	.word	0x00000000
 8013a90:	9b03      	ldr	r3, [sp, #12]
 8013a92:	eeb0 0a48 	vmov.f32	s0, s16
 8013a96:	1a98      	subs	r0, r3, r2
 8013a98:	f000 fb4c 	bl	8014134 <scalbnf>
 8013a9c:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 8013a84 <__kernel_rem_pio2f+0x304>
 8013aa0:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8013aa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013aa8:	db19      	blt.n	8013ade <__kernel_rem_pio2f+0x35e>
 8013aaa:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8013a88 <__kernel_rem_pio2f+0x308>
 8013aae:	ee60 7a27 	vmul.f32	s15, s0, s15
 8013ab2:	aa08      	add	r2, sp, #32
 8013ab4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013ab8:	1c74      	adds	r4, r6, #1
 8013aba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013abe:	3508      	adds	r5, #8
 8013ac0:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8013ac4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013ac8:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8013acc:	ee10 3a10 	vmov	r3, s0
 8013ad0:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8013ad4:	ee17 3a90 	vmov	r3, s15
 8013ad8:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8013adc:	e74b      	b.n	8013976 <__kernel_rem_pio2f+0x1f6>
 8013ade:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8013ae2:	aa08      	add	r2, sp, #32
 8013ae4:	ee10 3a10 	vmov	r3, s0
 8013ae8:	4634      	mov	r4, r6
 8013aea:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8013aee:	e742      	b.n	8013976 <__kernel_rem_pio2f+0x1f6>
 8013af0:	a808      	add	r0, sp, #32
 8013af2:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 8013af6:	9001      	str	r0, [sp, #4]
 8013af8:	ee07 0a90 	vmov	s15, r0
 8013afc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013b00:	3a01      	subs	r2, #1
 8013b02:	ee67 7a80 	vmul.f32	s15, s15, s0
 8013b06:	ee20 0a07 	vmul.f32	s0, s0, s14
 8013b0a:	ed61 7a01 	vstmdb	r1!, {s15}
 8013b0e:	e73e      	b.n	801398e <__kernel_rem_pio2f+0x20e>
 8013b10:	ecfc 6a01 	vldmia	ip!, {s13}
 8013b14:	ecb6 7a01 	vldmia	r6!, {s14}
 8013b18:	eee6 7a87 	vfma.f32	s15, s13, s14
 8013b1c:	3001      	adds	r0, #1
 8013b1e:	4550      	cmp	r0, sl
 8013b20:	dc01      	bgt.n	8013b26 <__kernel_rem_pio2f+0x3a6>
 8013b22:	4288      	cmp	r0, r1
 8013b24:	ddf4      	ble.n	8013b10 <__kernel_rem_pio2f+0x390>
 8013b26:	a858      	add	r0, sp, #352	; 0x160
 8013b28:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8013b2c:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 8013b30:	3a01      	subs	r2, #1
 8013b32:	e730      	b.n	8013996 <__kernel_rem_pio2f+0x216>
 8013b34:	9a66      	ldr	r2, [sp, #408]	; 0x198
 8013b36:	2a02      	cmp	r2, #2
 8013b38:	dc09      	bgt.n	8013b4e <__kernel_rem_pio2f+0x3ce>
 8013b3a:	2a00      	cmp	r2, #0
 8013b3c:	dc2a      	bgt.n	8013b94 <__kernel_rem_pio2f+0x414>
 8013b3e:	d043      	beq.n	8013bc8 <__kernel_rem_pio2f+0x448>
 8013b40:	f009 0007 	and.w	r0, r9, #7
 8013b44:	b059      	add	sp, #356	; 0x164
 8013b46:	ecbd 8b04 	vpop	{d8-d9}
 8013b4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013b4e:	9b66      	ldr	r3, [sp, #408]	; 0x198
 8013b50:	2b03      	cmp	r3, #3
 8013b52:	d1f5      	bne.n	8013b40 <__kernel_rem_pio2f+0x3c0>
 8013b54:	ab30      	add	r3, sp, #192	; 0xc0
 8013b56:	442b      	add	r3, r5
 8013b58:	461a      	mov	r2, r3
 8013b5a:	4619      	mov	r1, r3
 8013b5c:	4620      	mov	r0, r4
 8013b5e:	2800      	cmp	r0, #0
 8013b60:	f1a1 0104 	sub.w	r1, r1, #4
 8013b64:	dc51      	bgt.n	8013c0a <__kernel_rem_pio2f+0x48a>
 8013b66:	4621      	mov	r1, r4
 8013b68:	2901      	cmp	r1, #1
 8013b6a:	f1a2 0204 	sub.w	r2, r2, #4
 8013b6e:	dc5c      	bgt.n	8013c2a <__kernel_rem_pio2f+0x4aa>
 8013b70:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 8013a8c <__kernel_rem_pio2f+0x30c>
 8013b74:	3304      	adds	r3, #4
 8013b76:	2c01      	cmp	r4, #1
 8013b78:	dc67      	bgt.n	8013c4a <__kernel_rem_pio2f+0x4ca>
 8013b7a:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 8013b7e:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 8013b82:	2f00      	cmp	r7, #0
 8013b84:	d167      	bne.n	8013c56 <__kernel_rem_pio2f+0x4d6>
 8013b86:	edc8 6a00 	vstr	s13, [r8]
 8013b8a:	ed88 7a01 	vstr	s14, [r8, #4]
 8013b8e:	edc8 7a02 	vstr	s15, [r8, #8]
 8013b92:	e7d5      	b.n	8013b40 <__kernel_rem_pio2f+0x3c0>
 8013b94:	aa30      	add	r2, sp, #192	; 0xc0
 8013b96:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 8013a8c <__kernel_rem_pio2f+0x30c>
 8013b9a:	4413      	add	r3, r2
 8013b9c:	4622      	mov	r2, r4
 8013b9e:	2a00      	cmp	r2, #0
 8013ba0:	da24      	bge.n	8013bec <__kernel_rem_pio2f+0x46c>
 8013ba2:	b34f      	cbz	r7, 8013bf8 <__kernel_rem_pio2f+0x478>
 8013ba4:	eef1 7a47 	vneg.f32	s15, s14
 8013ba8:	edc8 7a00 	vstr	s15, [r8]
 8013bac:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 8013bb0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013bb4:	aa31      	add	r2, sp, #196	; 0xc4
 8013bb6:	2301      	movs	r3, #1
 8013bb8:	429c      	cmp	r4, r3
 8013bba:	da20      	bge.n	8013bfe <__kernel_rem_pio2f+0x47e>
 8013bbc:	b10f      	cbz	r7, 8013bc2 <__kernel_rem_pio2f+0x442>
 8013bbe:	eef1 7a67 	vneg.f32	s15, s15
 8013bc2:	edc8 7a01 	vstr	s15, [r8, #4]
 8013bc6:	e7bb      	b.n	8013b40 <__kernel_rem_pio2f+0x3c0>
 8013bc8:	aa30      	add	r2, sp, #192	; 0xc0
 8013bca:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 8013a8c <__kernel_rem_pio2f+0x30c>
 8013bce:	4413      	add	r3, r2
 8013bd0:	2c00      	cmp	r4, #0
 8013bd2:	da05      	bge.n	8013be0 <__kernel_rem_pio2f+0x460>
 8013bd4:	b10f      	cbz	r7, 8013bda <__kernel_rem_pio2f+0x45a>
 8013bd6:	eef1 7a67 	vneg.f32	s15, s15
 8013bda:	edc8 7a00 	vstr	s15, [r8]
 8013bde:	e7af      	b.n	8013b40 <__kernel_rem_pio2f+0x3c0>
 8013be0:	ed33 7a01 	vldmdb	r3!, {s14}
 8013be4:	3c01      	subs	r4, #1
 8013be6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013bea:	e7f1      	b.n	8013bd0 <__kernel_rem_pio2f+0x450>
 8013bec:	ed73 7a01 	vldmdb	r3!, {s15}
 8013bf0:	3a01      	subs	r2, #1
 8013bf2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8013bf6:	e7d2      	b.n	8013b9e <__kernel_rem_pio2f+0x41e>
 8013bf8:	eef0 7a47 	vmov.f32	s15, s14
 8013bfc:	e7d4      	b.n	8013ba8 <__kernel_rem_pio2f+0x428>
 8013bfe:	ecb2 7a01 	vldmia	r2!, {s14}
 8013c02:	3301      	adds	r3, #1
 8013c04:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013c08:	e7d6      	b.n	8013bb8 <__kernel_rem_pio2f+0x438>
 8013c0a:	edd1 7a00 	vldr	s15, [r1]
 8013c0e:	edd1 6a01 	vldr	s13, [r1, #4]
 8013c12:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8013c16:	3801      	subs	r0, #1
 8013c18:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013c1c:	ed81 7a00 	vstr	s14, [r1]
 8013c20:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013c24:	edc1 7a01 	vstr	s15, [r1, #4]
 8013c28:	e799      	b.n	8013b5e <__kernel_rem_pio2f+0x3de>
 8013c2a:	edd2 7a00 	vldr	s15, [r2]
 8013c2e:	edd2 6a01 	vldr	s13, [r2, #4]
 8013c32:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8013c36:	3901      	subs	r1, #1
 8013c38:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013c3c:	ed82 7a00 	vstr	s14, [r2]
 8013c40:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013c44:	edc2 7a01 	vstr	s15, [r2, #4]
 8013c48:	e78e      	b.n	8013b68 <__kernel_rem_pio2f+0x3e8>
 8013c4a:	ed33 7a01 	vldmdb	r3!, {s14}
 8013c4e:	3c01      	subs	r4, #1
 8013c50:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013c54:	e78f      	b.n	8013b76 <__kernel_rem_pio2f+0x3f6>
 8013c56:	eef1 6a66 	vneg.f32	s13, s13
 8013c5a:	eeb1 7a47 	vneg.f32	s14, s14
 8013c5e:	edc8 6a00 	vstr	s13, [r8]
 8013c62:	ed88 7a01 	vstr	s14, [r8, #4]
 8013c66:	eef1 7a67 	vneg.f32	s15, s15
 8013c6a:	e790      	b.n	8013b8e <__kernel_rem_pio2f+0x40e>

08013c6c <__kernel_sinf>:
 8013c6c:	ee10 3a10 	vmov	r3, s0
 8013c70:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8013c74:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8013c78:	da04      	bge.n	8013c84 <__kernel_sinf+0x18>
 8013c7a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8013c7e:	ee17 3a90 	vmov	r3, s15
 8013c82:	b35b      	cbz	r3, 8013cdc <__kernel_sinf+0x70>
 8013c84:	ee20 7a00 	vmul.f32	s14, s0, s0
 8013c88:	eddf 7a15 	vldr	s15, [pc, #84]	; 8013ce0 <__kernel_sinf+0x74>
 8013c8c:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8013ce4 <__kernel_sinf+0x78>
 8013c90:	eea7 6a27 	vfma.f32	s12, s14, s15
 8013c94:	eddf 7a14 	vldr	s15, [pc, #80]	; 8013ce8 <__kernel_sinf+0x7c>
 8013c98:	eee6 7a07 	vfma.f32	s15, s12, s14
 8013c9c:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8013cec <__kernel_sinf+0x80>
 8013ca0:	eea7 6a87 	vfma.f32	s12, s15, s14
 8013ca4:	eddf 7a12 	vldr	s15, [pc, #72]	; 8013cf0 <__kernel_sinf+0x84>
 8013ca8:	ee60 6a07 	vmul.f32	s13, s0, s14
 8013cac:	eee6 7a07 	vfma.f32	s15, s12, s14
 8013cb0:	b930      	cbnz	r0, 8013cc0 <__kernel_sinf+0x54>
 8013cb2:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8013cf4 <__kernel_sinf+0x88>
 8013cb6:	eea7 6a27 	vfma.f32	s12, s14, s15
 8013cba:	eea6 0a26 	vfma.f32	s0, s12, s13
 8013cbe:	4770      	bx	lr
 8013cc0:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8013cc4:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8013cc8:	eee0 7a86 	vfma.f32	s15, s1, s12
 8013ccc:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8013cd0:	eddf 7a09 	vldr	s15, [pc, #36]	; 8013cf8 <__kernel_sinf+0x8c>
 8013cd4:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8013cd8:	ee30 0a60 	vsub.f32	s0, s0, s1
 8013cdc:	4770      	bx	lr
 8013cde:	bf00      	nop
 8013ce0:	2f2ec9d3 	.word	0x2f2ec9d3
 8013ce4:	b2d72f34 	.word	0xb2d72f34
 8013ce8:	3638ef1b 	.word	0x3638ef1b
 8013cec:	b9500d01 	.word	0xb9500d01
 8013cf0:	3c088889 	.word	0x3c088889
 8013cf4:	be2aaaab 	.word	0xbe2aaaab
 8013cf8:	3e2aaaab 	.word	0x3e2aaaab

08013cfc <with_errno>:
 8013cfc:	b570      	push	{r4, r5, r6, lr}
 8013cfe:	4604      	mov	r4, r0
 8013d00:	460d      	mov	r5, r1
 8013d02:	4616      	mov	r6, r2
 8013d04:	f7fb f8d2 	bl	800eeac <__errno>
 8013d08:	4629      	mov	r1, r5
 8013d0a:	6006      	str	r6, [r0, #0]
 8013d0c:	4620      	mov	r0, r4
 8013d0e:	bd70      	pop	{r4, r5, r6, pc}

08013d10 <xflow>:
 8013d10:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013d12:	4614      	mov	r4, r2
 8013d14:	461d      	mov	r5, r3
 8013d16:	b108      	cbz	r0, 8013d1c <xflow+0xc>
 8013d18:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8013d1c:	e9cd 2300 	strd	r2, r3, [sp]
 8013d20:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013d24:	4620      	mov	r0, r4
 8013d26:	4629      	mov	r1, r5
 8013d28:	f7ec fc66 	bl	80005f8 <__aeabi_dmul>
 8013d2c:	2222      	movs	r2, #34	; 0x22
 8013d2e:	b003      	add	sp, #12
 8013d30:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013d34:	f7ff bfe2 	b.w	8013cfc <with_errno>

08013d38 <__math_uflow>:
 8013d38:	b508      	push	{r3, lr}
 8013d3a:	2200      	movs	r2, #0
 8013d3c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8013d40:	f7ff ffe6 	bl	8013d10 <xflow>
 8013d44:	ec41 0b10 	vmov	d0, r0, r1
 8013d48:	bd08      	pop	{r3, pc}

08013d4a <__math_oflow>:
 8013d4a:	b508      	push	{r3, lr}
 8013d4c:	2200      	movs	r2, #0
 8013d4e:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8013d52:	f7ff ffdd 	bl	8013d10 <xflow>
 8013d56:	ec41 0b10 	vmov	d0, r0, r1
 8013d5a:	bd08      	pop	{r3, pc}

08013d5c <with_errnof>:
 8013d5c:	b513      	push	{r0, r1, r4, lr}
 8013d5e:	4604      	mov	r4, r0
 8013d60:	ed8d 0a01 	vstr	s0, [sp, #4]
 8013d64:	f7fb f8a2 	bl	800eeac <__errno>
 8013d68:	ed9d 0a01 	vldr	s0, [sp, #4]
 8013d6c:	6004      	str	r4, [r0, #0]
 8013d6e:	b002      	add	sp, #8
 8013d70:	bd10      	pop	{r4, pc}

08013d72 <xflowf>:
 8013d72:	b130      	cbz	r0, 8013d82 <xflowf+0x10>
 8013d74:	eef1 7a40 	vneg.f32	s15, s0
 8013d78:	ee27 0a80 	vmul.f32	s0, s15, s0
 8013d7c:	2022      	movs	r0, #34	; 0x22
 8013d7e:	f7ff bfed 	b.w	8013d5c <with_errnof>
 8013d82:	eef0 7a40 	vmov.f32	s15, s0
 8013d86:	e7f7      	b.n	8013d78 <xflowf+0x6>

08013d88 <__math_uflowf>:
 8013d88:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8013d90 <__math_uflowf+0x8>
 8013d8c:	f7ff bff1 	b.w	8013d72 <xflowf>
 8013d90:	10000000 	.word	0x10000000

08013d94 <__math_oflowf>:
 8013d94:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8013d9c <__math_oflowf+0x8>
 8013d98:	f7ff bfeb 	b.w	8013d72 <xflowf>
 8013d9c:	70000000 	.word	0x70000000

08013da0 <fabs>:
 8013da0:	ec51 0b10 	vmov	r0, r1, d0
 8013da4:	ee10 2a10 	vmov	r2, s0
 8013da8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8013dac:	ec43 2b10 	vmov	d0, r2, r3
 8013db0:	4770      	bx	lr

08013db2 <finite>:
 8013db2:	b082      	sub	sp, #8
 8013db4:	ed8d 0b00 	vstr	d0, [sp]
 8013db8:	9801      	ldr	r0, [sp, #4]
 8013dba:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8013dbe:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8013dc2:	0fc0      	lsrs	r0, r0, #31
 8013dc4:	b002      	add	sp, #8
 8013dc6:	4770      	bx	lr

08013dc8 <scalbn>:
 8013dc8:	b570      	push	{r4, r5, r6, lr}
 8013dca:	ec55 4b10 	vmov	r4, r5, d0
 8013dce:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8013dd2:	4606      	mov	r6, r0
 8013dd4:	462b      	mov	r3, r5
 8013dd6:	b99a      	cbnz	r2, 8013e00 <scalbn+0x38>
 8013dd8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8013ddc:	4323      	orrs	r3, r4
 8013dde:	d036      	beq.n	8013e4e <scalbn+0x86>
 8013de0:	4b39      	ldr	r3, [pc, #228]	; (8013ec8 <scalbn+0x100>)
 8013de2:	4629      	mov	r1, r5
 8013de4:	ee10 0a10 	vmov	r0, s0
 8013de8:	2200      	movs	r2, #0
 8013dea:	f7ec fc05 	bl	80005f8 <__aeabi_dmul>
 8013dee:	4b37      	ldr	r3, [pc, #220]	; (8013ecc <scalbn+0x104>)
 8013df0:	429e      	cmp	r6, r3
 8013df2:	4604      	mov	r4, r0
 8013df4:	460d      	mov	r5, r1
 8013df6:	da10      	bge.n	8013e1a <scalbn+0x52>
 8013df8:	a32b      	add	r3, pc, #172	; (adr r3, 8013ea8 <scalbn+0xe0>)
 8013dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013dfe:	e03a      	b.n	8013e76 <scalbn+0xae>
 8013e00:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8013e04:	428a      	cmp	r2, r1
 8013e06:	d10c      	bne.n	8013e22 <scalbn+0x5a>
 8013e08:	ee10 2a10 	vmov	r2, s0
 8013e0c:	4620      	mov	r0, r4
 8013e0e:	4629      	mov	r1, r5
 8013e10:	f7ec fa3c 	bl	800028c <__adddf3>
 8013e14:	4604      	mov	r4, r0
 8013e16:	460d      	mov	r5, r1
 8013e18:	e019      	b.n	8013e4e <scalbn+0x86>
 8013e1a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8013e1e:	460b      	mov	r3, r1
 8013e20:	3a36      	subs	r2, #54	; 0x36
 8013e22:	4432      	add	r2, r6
 8013e24:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8013e28:	428a      	cmp	r2, r1
 8013e2a:	dd08      	ble.n	8013e3e <scalbn+0x76>
 8013e2c:	2d00      	cmp	r5, #0
 8013e2e:	a120      	add	r1, pc, #128	; (adr r1, 8013eb0 <scalbn+0xe8>)
 8013e30:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013e34:	da1c      	bge.n	8013e70 <scalbn+0xa8>
 8013e36:	a120      	add	r1, pc, #128	; (adr r1, 8013eb8 <scalbn+0xf0>)
 8013e38:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013e3c:	e018      	b.n	8013e70 <scalbn+0xa8>
 8013e3e:	2a00      	cmp	r2, #0
 8013e40:	dd08      	ble.n	8013e54 <scalbn+0x8c>
 8013e42:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8013e46:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8013e4a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8013e4e:	ec45 4b10 	vmov	d0, r4, r5
 8013e52:	bd70      	pop	{r4, r5, r6, pc}
 8013e54:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8013e58:	da19      	bge.n	8013e8e <scalbn+0xc6>
 8013e5a:	f24c 3350 	movw	r3, #50000	; 0xc350
 8013e5e:	429e      	cmp	r6, r3
 8013e60:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8013e64:	dd0a      	ble.n	8013e7c <scalbn+0xb4>
 8013e66:	a112      	add	r1, pc, #72	; (adr r1, 8013eb0 <scalbn+0xe8>)
 8013e68:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013e6c:	2b00      	cmp	r3, #0
 8013e6e:	d1e2      	bne.n	8013e36 <scalbn+0x6e>
 8013e70:	a30f      	add	r3, pc, #60	; (adr r3, 8013eb0 <scalbn+0xe8>)
 8013e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e76:	f7ec fbbf 	bl	80005f8 <__aeabi_dmul>
 8013e7a:	e7cb      	b.n	8013e14 <scalbn+0x4c>
 8013e7c:	a10a      	add	r1, pc, #40	; (adr r1, 8013ea8 <scalbn+0xe0>)
 8013e7e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013e82:	2b00      	cmp	r3, #0
 8013e84:	d0b8      	beq.n	8013df8 <scalbn+0x30>
 8013e86:	a10e      	add	r1, pc, #56	; (adr r1, 8013ec0 <scalbn+0xf8>)
 8013e88:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013e8c:	e7b4      	b.n	8013df8 <scalbn+0x30>
 8013e8e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8013e92:	3236      	adds	r2, #54	; 0x36
 8013e94:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8013e98:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8013e9c:	4620      	mov	r0, r4
 8013e9e:	4b0c      	ldr	r3, [pc, #48]	; (8013ed0 <scalbn+0x108>)
 8013ea0:	2200      	movs	r2, #0
 8013ea2:	e7e8      	b.n	8013e76 <scalbn+0xae>
 8013ea4:	f3af 8000 	nop.w
 8013ea8:	c2f8f359 	.word	0xc2f8f359
 8013eac:	01a56e1f 	.word	0x01a56e1f
 8013eb0:	8800759c 	.word	0x8800759c
 8013eb4:	7e37e43c 	.word	0x7e37e43c
 8013eb8:	8800759c 	.word	0x8800759c
 8013ebc:	fe37e43c 	.word	0xfe37e43c
 8013ec0:	c2f8f359 	.word	0xc2f8f359
 8013ec4:	81a56e1f 	.word	0x81a56e1f
 8013ec8:	43500000 	.word	0x43500000
 8013ecc:	ffff3cb0 	.word	0xffff3cb0
 8013ed0:	3c900000 	.word	0x3c900000

08013ed4 <atanf>:
 8013ed4:	b538      	push	{r3, r4, r5, lr}
 8013ed6:	ee10 5a10 	vmov	r5, s0
 8013eda:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8013ede:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 8013ee2:	eef0 7a40 	vmov.f32	s15, s0
 8013ee6:	db10      	blt.n	8013f0a <atanf+0x36>
 8013ee8:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8013eec:	dd04      	ble.n	8013ef8 <atanf+0x24>
 8013eee:	ee70 7a00 	vadd.f32	s15, s0, s0
 8013ef2:	eeb0 0a67 	vmov.f32	s0, s15
 8013ef6:	bd38      	pop	{r3, r4, r5, pc}
 8013ef8:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8014030 <atanf+0x15c>
 8013efc:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 8014034 <atanf+0x160>
 8013f00:	2d00      	cmp	r5, #0
 8013f02:	bfd8      	it	le
 8013f04:	eef0 7a40 	vmovle.f32	s15, s0
 8013f08:	e7f3      	b.n	8013ef2 <atanf+0x1e>
 8013f0a:	4b4b      	ldr	r3, [pc, #300]	; (8014038 <atanf+0x164>)
 8013f0c:	429c      	cmp	r4, r3
 8013f0e:	dc10      	bgt.n	8013f32 <atanf+0x5e>
 8013f10:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8013f14:	da0a      	bge.n	8013f2c <atanf+0x58>
 8013f16:	ed9f 7a49 	vldr	s14, [pc, #292]	; 801403c <atanf+0x168>
 8013f1a:	ee30 7a07 	vadd.f32	s14, s0, s14
 8013f1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8013f22:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8013f26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f2a:	dce2      	bgt.n	8013ef2 <atanf+0x1e>
 8013f2c:	f04f 33ff 	mov.w	r3, #4294967295
 8013f30:	e013      	b.n	8013f5a <atanf+0x86>
 8013f32:	f000 f8a3 	bl	801407c <fabsf>
 8013f36:	4b42      	ldr	r3, [pc, #264]	; (8014040 <atanf+0x16c>)
 8013f38:	429c      	cmp	r4, r3
 8013f3a:	dc4f      	bgt.n	8013fdc <atanf+0x108>
 8013f3c:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8013f40:	429c      	cmp	r4, r3
 8013f42:	dc41      	bgt.n	8013fc8 <atanf+0xf4>
 8013f44:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8013f48:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8013f4c:	eea0 7a27 	vfma.f32	s14, s0, s15
 8013f50:	2300      	movs	r3, #0
 8013f52:	ee30 0a27 	vadd.f32	s0, s0, s15
 8013f56:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8013f5a:	1c5a      	adds	r2, r3, #1
 8013f5c:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8013f60:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8014044 <atanf+0x170>
 8013f64:	eddf 5a38 	vldr	s11, [pc, #224]	; 8014048 <atanf+0x174>
 8013f68:	ed9f 5a38 	vldr	s10, [pc, #224]	; 801404c <atanf+0x178>
 8013f6c:	ee66 6a06 	vmul.f32	s13, s12, s12
 8013f70:	eee6 5a87 	vfma.f32	s11, s13, s14
 8013f74:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8014050 <atanf+0x17c>
 8013f78:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8013f7c:	eddf 5a35 	vldr	s11, [pc, #212]	; 8014054 <atanf+0x180>
 8013f80:	eee7 5a26 	vfma.f32	s11, s14, s13
 8013f84:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8014058 <atanf+0x184>
 8013f88:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8013f8c:	eddf 5a33 	vldr	s11, [pc, #204]	; 801405c <atanf+0x188>
 8013f90:	eee7 5a26 	vfma.f32	s11, s14, s13
 8013f94:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8014060 <atanf+0x18c>
 8013f98:	eea6 5a87 	vfma.f32	s10, s13, s14
 8013f9c:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8014064 <atanf+0x190>
 8013fa0:	eea5 7a26 	vfma.f32	s14, s10, s13
 8013fa4:	ed9f 5a30 	vldr	s10, [pc, #192]	; 8014068 <atanf+0x194>
 8013fa8:	eea7 5a26 	vfma.f32	s10, s14, s13
 8013fac:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 801406c <atanf+0x198>
 8013fb0:	eea5 7a26 	vfma.f32	s14, s10, s13
 8013fb4:	ee27 7a26 	vmul.f32	s14, s14, s13
 8013fb8:	eea5 7a86 	vfma.f32	s14, s11, s12
 8013fbc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8013fc0:	d121      	bne.n	8014006 <atanf+0x132>
 8013fc2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013fc6:	e794      	b.n	8013ef2 <atanf+0x1e>
 8013fc8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8013fcc:	ee30 7a67 	vsub.f32	s14, s0, s15
 8013fd0:	ee30 0a27 	vadd.f32	s0, s0, s15
 8013fd4:	2301      	movs	r3, #1
 8013fd6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8013fda:	e7be      	b.n	8013f5a <atanf+0x86>
 8013fdc:	4b24      	ldr	r3, [pc, #144]	; (8014070 <atanf+0x19c>)
 8013fde:	429c      	cmp	r4, r3
 8013fe0:	dc0b      	bgt.n	8013ffa <atanf+0x126>
 8013fe2:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8013fe6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8013fea:	eea0 7a27 	vfma.f32	s14, s0, s15
 8013fee:	2302      	movs	r3, #2
 8013ff0:	ee70 6a67 	vsub.f32	s13, s0, s15
 8013ff4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013ff8:	e7af      	b.n	8013f5a <atanf+0x86>
 8013ffa:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8013ffe:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8014002:	2303      	movs	r3, #3
 8014004:	e7a9      	b.n	8013f5a <atanf+0x86>
 8014006:	4a1b      	ldr	r2, [pc, #108]	; (8014074 <atanf+0x1a0>)
 8014008:	491b      	ldr	r1, [pc, #108]	; (8014078 <atanf+0x1a4>)
 801400a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801400e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8014012:	ed93 0a00 	vldr	s0, [r3]
 8014016:	ee37 7a40 	vsub.f32	s14, s14, s0
 801401a:	ed92 0a00 	vldr	s0, [r2]
 801401e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014022:	2d00      	cmp	r5, #0
 8014024:	ee70 7a67 	vsub.f32	s15, s0, s15
 8014028:	bfb8      	it	lt
 801402a:	eef1 7a67 	vneglt.f32	s15, s15
 801402e:	e760      	b.n	8013ef2 <atanf+0x1e>
 8014030:	3fc90fdb 	.word	0x3fc90fdb
 8014034:	bfc90fdb 	.word	0xbfc90fdb
 8014038:	3edfffff 	.word	0x3edfffff
 801403c:	7149f2ca 	.word	0x7149f2ca
 8014040:	3f97ffff 	.word	0x3f97ffff
 8014044:	3c8569d7 	.word	0x3c8569d7
 8014048:	3d4bda59 	.word	0x3d4bda59
 801404c:	bd6ef16b 	.word	0xbd6ef16b
 8014050:	3d886b35 	.word	0x3d886b35
 8014054:	3dba2e6e 	.word	0x3dba2e6e
 8014058:	3e124925 	.word	0x3e124925
 801405c:	3eaaaaab 	.word	0x3eaaaaab
 8014060:	bd15a221 	.word	0xbd15a221
 8014064:	bd9d8795 	.word	0xbd9d8795
 8014068:	bde38e38 	.word	0xbde38e38
 801406c:	be4ccccd 	.word	0xbe4ccccd
 8014070:	401bffff 	.word	0x401bffff
 8014074:	08014c38 	.word	0x08014c38
 8014078:	08014c48 	.word	0x08014c48

0801407c <fabsf>:
 801407c:	ee10 3a10 	vmov	r3, s0
 8014080:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8014084:	ee00 3a10 	vmov	s0, r3
 8014088:	4770      	bx	lr

0801408a <finitef>:
 801408a:	b082      	sub	sp, #8
 801408c:	ed8d 0a01 	vstr	s0, [sp, #4]
 8014090:	9801      	ldr	r0, [sp, #4]
 8014092:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8014096:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 801409a:	bfac      	ite	ge
 801409c:	2000      	movge	r0, #0
 801409e:	2001      	movlt	r0, #1
 80140a0:	b002      	add	sp, #8
 80140a2:	4770      	bx	lr

080140a4 <floorf>:
 80140a4:	ee10 3a10 	vmov	r3, s0
 80140a8:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80140ac:	3a7f      	subs	r2, #127	; 0x7f
 80140ae:	2a16      	cmp	r2, #22
 80140b0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80140b4:	dc2a      	bgt.n	801410c <floorf+0x68>
 80140b6:	2a00      	cmp	r2, #0
 80140b8:	da11      	bge.n	80140de <floorf+0x3a>
 80140ba:	eddf 7a18 	vldr	s15, [pc, #96]	; 801411c <floorf+0x78>
 80140be:	ee30 0a27 	vadd.f32	s0, s0, s15
 80140c2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80140c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80140ca:	dd05      	ble.n	80140d8 <floorf+0x34>
 80140cc:	2b00      	cmp	r3, #0
 80140ce:	da23      	bge.n	8014118 <floorf+0x74>
 80140d0:	4a13      	ldr	r2, [pc, #76]	; (8014120 <floorf+0x7c>)
 80140d2:	2900      	cmp	r1, #0
 80140d4:	bf18      	it	ne
 80140d6:	4613      	movne	r3, r2
 80140d8:	ee00 3a10 	vmov	s0, r3
 80140dc:	4770      	bx	lr
 80140de:	4911      	ldr	r1, [pc, #68]	; (8014124 <floorf+0x80>)
 80140e0:	4111      	asrs	r1, r2
 80140e2:	420b      	tst	r3, r1
 80140e4:	d0fa      	beq.n	80140dc <floorf+0x38>
 80140e6:	eddf 7a0d 	vldr	s15, [pc, #52]	; 801411c <floorf+0x78>
 80140ea:	ee30 0a27 	vadd.f32	s0, s0, s15
 80140ee:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80140f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80140f6:	ddef      	ble.n	80140d8 <floorf+0x34>
 80140f8:	2b00      	cmp	r3, #0
 80140fa:	bfbe      	ittt	lt
 80140fc:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8014100:	fa40 f202 	asrlt.w	r2, r0, r2
 8014104:	189b      	addlt	r3, r3, r2
 8014106:	ea23 0301 	bic.w	r3, r3, r1
 801410a:	e7e5      	b.n	80140d8 <floorf+0x34>
 801410c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8014110:	d3e4      	bcc.n	80140dc <floorf+0x38>
 8014112:	ee30 0a00 	vadd.f32	s0, s0, s0
 8014116:	4770      	bx	lr
 8014118:	2300      	movs	r3, #0
 801411a:	e7dd      	b.n	80140d8 <floorf+0x34>
 801411c:	7149f2ca 	.word	0x7149f2ca
 8014120:	bf800000 	.word	0xbf800000
 8014124:	007fffff 	.word	0x007fffff

08014128 <nanf>:
 8014128:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8014130 <nanf+0x8>
 801412c:	4770      	bx	lr
 801412e:	bf00      	nop
 8014130:	7fc00000 	.word	0x7fc00000

08014134 <scalbnf>:
 8014134:	ee10 3a10 	vmov	r3, s0
 8014138:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 801413c:	d025      	beq.n	801418a <scalbnf+0x56>
 801413e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8014142:	d302      	bcc.n	801414a <scalbnf+0x16>
 8014144:	ee30 0a00 	vadd.f32	s0, s0, s0
 8014148:	4770      	bx	lr
 801414a:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 801414e:	d122      	bne.n	8014196 <scalbnf+0x62>
 8014150:	4b2a      	ldr	r3, [pc, #168]	; (80141fc <scalbnf+0xc8>)
 8014152:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8014200 <scalbnf+0xcc>
 8014156:	4298      	cmp	r0, r3
 8014158:	ee20 0a27 	vmul.f32	s0, s0, s15
 801415c:	db16      	blt.n	801418c <scalbnf+0x58>
 801415e:	ee10 3a10 	vmov	r3, s0
 8014162:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8014166:	3a19      	subs	r2, #25
 8014168:	4402      	add	r2, r0
 801416a:	2afe      	cmp	r2, #254	; 0xfe
 801416c:	dd15      	ble.n	801419a <scalbnf+0x66>
 801416e:	ee10 3a10 	vmov	r3, s0
 8014172:	eddf 7a24 	vldr	s15, [pc, #144]	; 8014204 <scalbnf+0xd0>
 8014176:	eddf 6a24 	vldr	s13, [pc, #144]	; 8014208 <scalbnf+0xd4>
 801417a:	2b00      	cmp	r3, #0
 801417c:	eeb0 7a67 	vmov.f32	s14, s15
 8014180:	bfb8      	it	lt
 8014182:	eef0 7a66 	vmovlt.f32	s15, s13
 8014186:	ee27 0a27 	vmul.f32	s0, s14, s15
 801418a:	4770      	bx	lr
 801418c:	eddf 7a1f 	vldr	s15, [pc, #124]	; 801420c <scalbnf+0xd8>
 8014190:	ee20 0a27 	vmul.f32	s0, s0, s15
 8014194:	4770      	bx	lr
 8014196:	0dd2      	lsrs	r2, r2, #23
 8014198:	e7e6      	b.n	8014168 <scalbnf+0x34>
 801419a:	2a00      	cmp	r2, #0
 801419c:	dd06      	ble.n	80141ac <scalbnf+0x78>
 801419e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80141a2:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 80141a6:	ee00 3a10 	vmov	s0, r3
 80141aa:	4770      	bx	lr
 80141ac:	f112 0f16 	cmn.w	r2, #22
 80141b0:	da1a      	bge.n	80141e8 <scalbnf+0xb4>
 80141b2:	f24c 3350 	movw	r3, #50000	; 0xc350
 80141b6:	4298      	cmp	r0, r3
 80141b8:	ee10 3a10 	vmov	r3, s0
 80141bc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80141c0:	dd0a      	ble.n	80141d8 <scalbnf+0xa4>
 80141c2:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8014204 <scalbnf+0xd0>
 80141c6:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8014208 <scalbnf+0xd4>
 80141ca:	eef0 7a40 	vmov.f32	s15, s0
 80141ce:	2b00      	cmp	r3, #0
 80141d0:	bf18      	it	ne
 80141d2:	eeb0 0a47 	vmovne.f32	s0, s14
 80141d6:	e7db      	b.n	8014190 <scalbnf+0x5c>
 80141d8:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 801420c <scalbnf+0xd8>
 80141dc:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8014210 <scalbnf+0xdc>
 80141e0:	eef0 7a40 	vmov.f32	s15, s0
 80141e4:	2b00      	cmp	r3, #0
 80141e6:	e7f3      	b.n	80141d0 <scalbnf+0x9c>
 80141e8:	3219      	adds	r2, #25
 80141ea:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80141ee:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 80141f2:	eddf 7a08 	vldr	s15, [pc, #32]	; 8014214 <scalbnf+0xe0>
 80141f6:	ee07 3a10 	vmov	s14, r3
 80141fa:	e7c4      	b.n	8014186 <scalbnf+0x52>
 80141fc:	ffff3cb0 	.word	0xffff3cb0
 8014200:	4c000000 	.word	0x4c000000
 8014204:	7149f2ca 	.word	0x7149f2ca
 8014208:	f149f2ca 	.word	0xf149f2ca
 801420c:	0da24260 	.word	0x0da24260
 8014210:	8da24260 	.word	0x8da24260
 8014214:	33000000 	.word	0x33000000

08014218 <_init>:
 8014218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801421a:	bf00      	nop
 801421c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801421e:	bc08      	pop	{r3}
 8014220:	469e      	mov	lr, r3
 8014222:	4770      	bx	lr

08014224 <_fini>:
 8014224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014226:	bf00      	nop
 8014228:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801422a:	bc08      	pop	{r3}
 801422c:	469e      	mov	lr, r3
 801422e:	4770      	bx	lr
