
Dipterv_Drone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013be8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000998  08013d78  08013d78  00023d78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014710  08014710  000301ec  2**0
                  CONTENTS
  4 .ARM          00000008  08014710  08014710  00024710  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014718  08014718  000301ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014718  08014718  00024718  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801471c  0801471c  0002471c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  08014720  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000301ec  2**0
                  CONTENTS
 10 .bss          000066a8  200001f0  200001f0  000301f0  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20006898  20006898  000301f0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000301ec  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ef76  00000000  00000000  0003021c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003e40  00000000  00000000  0004f192  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001b50  00000000  00000000  00052fd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000019d0  00000000  00000000  00054b28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025290  00000000  00000000  000564f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f900  00000000  00000000  0007b788  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000de57c  00000000  00000000  0009b088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00179604  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008d28  00000000  00000000  00179654  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f0 	.word	0x200001f0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08013d60 	.word	0x08013d60

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f4 	.word	0x200001f4
 80001cc:	08013d60 	.word	0x08013d60

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b974 	b.w	8000f88 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468e      	mov	lr, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14d      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4694      	mov	ip, r2
 8000cca:	d969      	bls.n	8000da0 <__udivmoddi4+0xe8>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b152      	cbz	r2, 8000ce8 <__udivmoddi4+0x30>
 8000cd2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cd6:	f1c2 0120 	rsb	r1, r2, #32
 8000cda:	fa20 f101 	lsr.w	r1, r0, r1
 8000cde:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ce6:	4094      	lsls	r4, r2
 8000ce8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cec:	0c21      	lsrs	r1, r4, #16
 8000cee:	fbbe f6f8 	udiv	r6, lr, r8
 8000cf2:	fa1f f78c 	uxth.w	r7, ip
 8000cf6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cfa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cfe:	fb06 f107 	mul.w	r1, r6, r7
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d0e:	f080 811f 	bcs.w	8000f50 <__udivmoddi4+0x298>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 811c 	bls.w	8000f50 <__udivmoddi4+0x298>
 8000d18:	3e02      	subs	r6, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a5b      	subs	r3, r3, r1
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d24:	fb08 3310 	mls	r3, r8, r0, r3
 8000d28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d2c:	fb00 f707 	mul.w	r7, r0, r7
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	d90a      	bls.n	8000d4a <__udivmoddi4+0x92>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3c:	f080 810a 	bcs.w	8000f54 <__udivmoddi4+0x29c>
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	f240 8107 	bls.w	8000f54 <__udivmoddi4+0x29c>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4e:	1be4      	subs	r4, r4, r7
 8000d50:	2600      	movs	r6, #0
 8000d52:	b11d      	cbz	r5, 8000d5c <__udivmoddi4+0xa4>
 8000d54:	40d4      	lsrs	r4, r2
 8000d56:	2300      	movs	r3, #0
 8000d58:	e9c5 4300 	strd	r4, r3, [r5]
 8000d5c:	4631      	mov	r1, r6
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d909      	bls.n	8000d7a <__udivmoddi4+0xc2>
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	f000 80ef 	beq.w	8000f4a <__udivmoddi4+0x292>
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d72:	4630      	mov	r0, r6
 8000d74:	4631      	mov	r1, r6
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	fab3 f683 	clz	r6, r3
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	d14a      	bne.n	8000e18 <__udivmoddi4+0x160>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0xd4>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 80f9 	bhi.w	8000f7e <__udivmoddi4+0x2c6>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	469e      	mov	lr, r3
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d0e0      	beq.n	8000d5c <__udivmoddi4+0xa4>
 8000d9a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d9e:	e7dd      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000da0:	b902      	cbnz	r2, 8000da4 <__udivmoddi4+0xec>
 8000da2:	deff      	udf	#255	; 0xff
 8000da4:	fab2 f282 	clz	r2, r2
 8000da8:	2a00      	cmp	r2, #0
 8000daa:	f040 8092 	bne.w	8000ed2 <__udivmoddi4+0x21a>
 8000dae:	eba1 010c 	sub.w	r1, r1, ip
 8000db2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db6:	fa1f fe8c 	uxth.w	lr, ip
 8000dba:	2601      	movs	r6, #1
 8000dbc:	0c20      	lsrs	r0, r4, #16
 8000dbe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dc2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dc6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dca:	fb0e f003 	mul.w	r0, lr, r3
 8000dce:	4288      	cmp	r0, r1
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x12c>
 8000dd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x12a>
 8000ddc:	4288      	cmp	r0, r1
 8000dde:	f200 80cb 	bhi.w	8000f78 <__udivmoddi4+0x2c0>
 8000de2:	4643      	mov	r3, r8
 8000de4:	1a09      	subs	r1, r1, r0
 8000de6:	b2a4      	uxth	r4, r4
 8000de8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dec:	fb07 1110 	mls	r1, r7, r0, r1
 8000df0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000df4:	fb0e fe00 	mul.w	lr, lr, r0
 8000df8:	45a6      	cmp	lr, r4
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x156>
 8000dfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000e00:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e04:	d202      	bcs.n	8000e0c <__udivmoddi4+0x154>
 8000e06:	45a6      	cmp	lr, r4
 8000e08:	f200 80bb 	bhi.w	8000f82 <__udivmoddi4+0x2ca>
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	eba4 040e 	sub.w	r4, r4, lr
 8000e12:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e16:	e79c      	b.n	8000d52 <__udivmoddi4+0x9a>
 8000e18:	f1c6 0720 	rsb	r7, r6, #32
 8000e1c:	40b3      	lsls	r3, r6
 8000e1e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e22:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e26:	fa20 f407 	lsr.w	r4, r0, r7
 8000e2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	40f9      	lsrs	r1, r7
 8000e32:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e36:	fa00 f306 	lsl.w	r3, r0, r6
 8000e3a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e3e:	0c20      	lsrs	r0, r4, #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fb09 1118 	mls	r1, r9, r8, r1
 8000e48:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e4c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e50:	4288      	cmp	r0, r1
 8000e52:	fa02 f206 	lsl.w	r2, r2, r6
 8000e56:	d90b      	bls.n	8000e70 <__udivmoddi4+0x1b8>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e60:	f080 8088 	bcs.w	8000f74 <__udivmoddi4+0x2bc>
 8000e64:	4288      	cmp	r0, r1
 8000e66:	f240 8085 	bls.w	8000f74 <__udivmoddi4+0x2bc>
 8000e6a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e78:	fb09 1110 	mls	r1, r9, r0, r1
 8000e7c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e80:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e84:	458e      	cmp	lr, r1
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x1e2>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e90:	d26c      	bcs.n	8000f6c <__udivmoddi4+0x2b4>
 8000e92:	458e      	cmp	lr, r1
 8000e94:	d96a      	bls.n	8000f6c <__udivmoddi4+0x2b4>
 8000e96:	3802      	subs	r0, #2
 8000e98:	4461      	add	r1, ip
 8000e9a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e9e:	fba0 9402 	umull	r9, r4, r0, r2
 8000ea2:	eba1 010e 	sub.w	r1, r1, lr
 8000ea6:	42a1      	cmp	r1, r4
 8000ea8:	46c8      	mov	r8, r9
 8000eaa:	46a6      	mov	lr, r4
 8000eac:	d356      	bcc.n	8000f5c <__udivmoddi4+0x2a4>
 8000eae:	d053      	beq.n	8000f58 <__udivmoddi4+0x2a0>
 8000eb0:	b15d      	cbz	r5, 8000eca <__udivmoddi4+0x212>
 8000eb2:	ebb3 0208 	subs.w	r2, r3, r8
 8000eb6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eba:	fa01 f707 	lsl.w	r7, r1, r7
 8000ebe:	fa22 f306 	lsr.w	r3, r2, r6
 8000ec2:	40f1      	lsrs	r1, r6
 8000ec4:	431f      	orrs	r7, r3
 8000ec6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eca:	2600      	movs	r6, #0
 8000ecc:	4631      	mov	r1, r6
 8000ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed2:	f1c2 0320 	rsb	r3, r2, #32
 8000ed6:	40d8      	lsrs	r0, r3
 8000ed8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000edc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ee0:	4091      	lsls	r1, r2
 8000ee2:	4301      	orrs	r1, r0
 8000ee4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee8:	fa1f fe8c 	uxth.w	lr, ip
 8000eec:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ef0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ef4:	0c0b      	lsrs	r3, r1, #16
 8000ef6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000efa:	fb00 f60e 	mul.w	r6, r0, lr
 8000efe:	429e      	cmp	r6, r3
 8000f00:	fa04 f402 	lsl.w	r4, r4, r2
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x260>
 8000f06:	eb1c 0303 	adds.w	r3, ip, r3
 8000f0a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f0e:	d22f      	bcs.n	8000f70 <__udivmoddi4+0x2b8>
 8000f10:	429e      	cmp	r6, r3
 8000f12:	d92d      	bls.n	8000f70 <__udivmoddi4+0x2b8>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4463      	add	r3, ip
 8000f18:	1b9b      	subs	r3, r3, r6
 8000f1a:	b289      	uxth	r1, r1
 8000f1c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f20:	fb07 3316 	mls	r3, r7, r6, r3
 8000f24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f28:	fb06 f30e 	mul.w	r3, r6, lr
 8000f2c:	428b      	cmp	r3, r1
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x28a>
 8000f30:	eb1c 0101 	adds.w	r1, ip, r1
 8000f34:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f38:	d216      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d914      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3e:	3e02      	subs	r6, #2
 8000f40:	4461      	add	r1, ip
 8000f42:	1ac9      	subs	r1, r1, r3
 8000f44:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f48:	e738      	b.n	8000dbc <__udivmoddi4+0x104>
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e705      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e3      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6f8      	b.n	8000d4a <__udivmoddi4+0x92>
 8000f58:	454b      	cmp	r3, r9
 8000f5a:	d2a9      	bcs.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f5c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f60:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7a3      	b.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f68:	4646      	mov	r6, r8
 8000f6a:	e7ea      	b.n	8000f42 <__udivmoddi4+0x28a>
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	e794      	b.n	8000e9a <__udivmoddi4+0x1e2>
 8000f70:	4640      	mov	r0, r8
 8000f72:	e7d1      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f74:	46d0      	mov	r8, sl
 8000f76:	e77b      	b.n	8000e70 <__udivmoddi4+0x1b8>
 8000f78:	3b02      	subs	r3, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	e732      	b.n	8000de4 <__udivmoddi4+0x12c>
 8000f7e:	4630      	mov	r0, r6
 8000f80:	e709      	b.n	8000d96 <__udivmoddi4+0xde>
 8000f82:	4464      	add	r4, ip
 8000f84:	3802      	subs	r0, #2
 8000f86:	e742      	b.n	8000e0e <__udivmoddi4+0x156>

08000f88 <__aeabi_idiv0>:
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop

08000f8c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b085      	sub	sp, #20
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	60f8      	str	r0, [r7, #12]
 8000f94:	60b9      	str	r1, [r7, #8]
 8000f96:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	4a07      	ldr	r2, [pc, #28]	; (8000fb8 <vApplicationGetIdleTaskMemory+0x2c>)
 8000f9c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000f9e:	68bb      	ldr	r3, [r7, #8]
 8000fa0:	4a06      	ldr	r2, [pc, #24]	; (8000fbc <vApplicationGetIdleTaskMemory+0x30>)
 8000fa2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	2280      	movs	r2, #128	; 0x80
 8000fa8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000faa:	bf00      	nop
 8000fac:	3714      	adds	r7, #20
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	2000020c 	.word	0x2000020c
 8000fbc:	20000260 	.word	0x20000260

08000fc0 <FusionRadiansToDegrees>:
/**
 * @brief Converts radians to degrees.
 * @param radians Radians.
 * @return Degrees.
 */
static inline float FusionRadiansToDegrees(const float radians) {
 8000fc0:	b480      	push	{r7}
 8000fc2:	b083      	sub	sp, #12
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	ed87 0a01 	vstr	s0, [r7, #4]
    return radians * (180.0f / (float) M_PI);
 8000fca:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fce:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8000fe4 <FusionRadiansToDegrees+0x24>
 8000fd2:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8000fd6:	eeb0 0a67 	vmov.f32	s0, s15
 8000fda:	370c      	adds	r7, #12
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr
 8000fe4:	42652ee0 	.word	0x42652ee0

08000fe8 <FusionAsin>:
/**
 * @brief Returns the arc sine of the value.
 * @param value Value.
 * @return Arc sine of the value.
 */
static inline float FusionAsin(const float value) {
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	ed87 0a01 	vstr	s0, [r7, #4]
    if (value <= -1.0f) {
 8000ff2:	edd7 7a01 	vldr	s15, [r7, #4]
 8000ff6:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8000ffa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000ffe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001002:	d802      	bhi.n	800100a <FusionAsin+0x22>
        return (float) M_PI / -2.0f;
 8001004:	eddf 7a0c 	vldr	s15, [pc, #48]	; 8001038 <FusionAsin+0x50>
 8001008:	e011      	b.n	800102e <FusionAsin+0x46>
    }
    if (value >= 1.0f) {
 800100a:	edd7 7a01 	vldr	s15, [r7, #4]
 800100e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001012:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001016:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800101a:	db02      	blt.n	8001022 <FusionAsin+0x3a>
        return (float) M_PI / 2.0f;
 800101c:	eddf 7a07 	vldr	s15, [pc, #28]	; 800103c <FusionAsin+0x54>
 8001020:	e005      	b.n	800102e <FusionAsin+0x46>
    }
    return asinf(value);
 8001022:	ed97 0a01 	vldr	s0, [r7, #4]
 8001026:	f010 fcf3 	bl	8011a10 <asinf>
 800102a:	eef0 7a40 	vmov.f32	s15, s0
}
 800102e:	eeb0 0a67 	vmov.f32	s0, s15
 8001032:	3708      	adds	r7, #8
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	bfc90fdb 	.word	0xbfc90fdb
 800103c:	3fc90fdb 	.word	0x3fc90fdb

08001040 <FusionVectorSubtract>:
 * @brief Returns vector B subtracted from vector A.
 * @param vectorA Vector A.
 * @param vectorB Vector B.
 * @return Vector B subtracted from vector A.
 */
static inline FusionVector FusionVectorSubtract(const FusionVector vectorA, const FusionVector vectorB) {
 8001040:	b480      	push	{r7}
 8001042:	b091      	sub	sp, #68	; 0x44
 8001044:	af00      	add	r7, sp, #0
 8001046:	eeb0 5a40 	vmov.f32	s10, s0
 800104a:	eef0 5a60 	vmov.f32	s11, s1
 800104e:	eeb0 6a41 	vmov.f32	s12, s2
 8001052:	eef0 6a61 	vmov.f32	s13, s3
 8001056:	eeb0 7a42 	vmov.f32	s14, s4
 800105a:	eef0 7a62 	vmov.f32	s15, s5
 800105e:	ed87 5a07 	vstr	s10, [r7, #28]
 8001062:	edc7 5a08 	vstr	s11, [r7, #32]
 8001066:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 800106a:	edc7 6a04 	vstr	s13, [r7, #16]
 800106e:	ed87 7a05 	vstr	s14, [r7, #20]
 8001072:	edc7 7a06 	vstr	s15, [r7, #24]
    const FusionVector result = {.axis = {
            .x = vectorA.axis.x - vectorB.axis.x,
 8001076:	ed97 7a07 	vldr	s14, [r7, #28]
 800107a:	edd7 7a04 	vldr	s15, [r7, #16]
 800107e:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8001082:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = vectorA.axis.y - vectorB.axis.y,
 8001086:	ed97 7a08 	vldr	s14, [r7, #32]
 800108a:	edd7 7a05 	vldr	s15, [r7, #20]
 800108e:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8001092:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = vectorA.axis.z - vectorB.axis.z,
 8001096:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800109a:	edd7 7a06 	vldr	s15, [r7, #24]
 800109e:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80010a2:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    }};
    return result;
 80010a6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80010aa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80010ae:	ca07      	ldmia	r2, {r0, r1, r2}
 80010b0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80010b4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80010b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80010b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80010ba:	ee06 1a90 	vmov	s13, r1
 80010be:	ee07 2a10 	vmov	s14, r2
 80010c2:	ee07 3a90 	vmov	s15, r3
}
 80010c6:	eeb0 0a66 	vmov.f32	s0, s13
 80010ca:	eef0 0a47 	vmov.f32	s1, s14
 80010ce:	eeb0 1a67 	vmov.f32	s2, s15
 80010d2:	3744      	adds	r7, #68	; 0x44
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr

080010dc <FusionVectorMultiplyScalar>:
 * @brief Returns the multiplication of a vector by a scalar.
 * @param vector Vector.
 * @param scalar Scalar.
 * @return Multiplication of a vector by a scalar.
 */
static inline FusionVector FusionVectorMultiplyScalar(const FusionVector vector, const float scalar) {
 80010dc:	b480      	push	{r7}
 80010de:	b08f      	sub	sp, #60	; 0x3c
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	eef0 6a40 	vmov.f32	s13, s0
 80010e6:	eeb0 7a60 	vmov.f32	s14, s1
 80010ea:	eef0 7a41 	vmov.f32	s15, s2
 80010ee:	edc7 1a04 	vstr	s3, [r7, #16]
 80010f2:	edc7 6a05 	vstr	s13, [r7, #20]
 80010f6:	ed87 7a06 	vstr	s14, [r7, #24]
 80010fa:	edc7 7a07 	vstr	s15, [r7, #28]
    const FusionVector result = {.axis = {
            .x = vector.axis.x * scalar,
 80010fe:	ed97 7a05 	vldr	s14, [r7, #20]
 8001102:	edd7 7a04 	vldr	s15, [r7, #16]
 8001106:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800110a:	edc7 7a08 	vstr	s15, [r7, #32]
            .y = vector.axis.y * scalar,
 800110e:	ed97 7a06 	vldr	s14, [r7, #24]
 8001112:	edd7 7a04 	vldr	s15, [r7, #16]
 8001116:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800111a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            .z = vector.axis.z * scalar,
 800111e:	ed97 7a07 	vldr	s14, [r7, #28]
 8001122:	edd7 7a04 	vldr	s15, [r7, #16]
 8001126:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800112a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    }};
    return result;
 800112e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001132:	f107 0220 	add.w	r2, r7, #32
 8001136:	ca07      	ldmia	r2, {r0, r1, r2}
 8001138:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800113c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800113e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001140:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001142:	ee06 1a90 	vmov	s13, r1
 8001146:	ee07 2a10 	vmov	s14, r2
 800114a:	ee07 3a90 	vmov	s15, r3
}
 800114e:	eeb0 0a66 	vmov.f32	s0, s13
 8001152:	eef0 0a47 	vmov.f32	s1, s14
 8001156:	eeb0 1a67 	vmov.f32	s2, s15
 800115a:	373c      	adds	r7, #60	; 0x3c
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr

08001164 <FusionMatrixMultiplyVector>:
 * @brief Returns the multiplication of a matrix with a vector.
 * @param matrix Matrix.
 * @param vector Vector.
 * @return Multiplication of a matrix with a vector.
 */
static inline FusionVector FusionMatrixMultiplyVector(const FusionMatrix matrix, const FusionVector vector) {
 8001164:	b084      	sub	sp, #16
 8001166:	b480      	push	{r7}
 8001168:	b08f      	sub	sp, #60	; 0x3c
 800116a:	af00      	add	r7, sp, #0
 800116c:	f107 0c40 	add.w	ip, r7, #64	; 0x40
 8001170:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 8001174:	eef0 6a40 	vmov.f32	s13, s0
 8001178:	eeb0 7a60 	vmov.f32	s14, s1
 800117c:	eef0 7a41 	vmov.f32	s15, s2
 8001180:	edc7 6a05 	vstr	s13, [r7, #20]
 8001184:	ed87 7a06 	vstr	s14, [r7, #24]
 8001188:	edc7 7a07 	vstr	s15, [r7, #28]
#define R matrix.element
    const FusionVector result = {.axis = {
            .x = R.xx * vector.axis.x + R.xy * vector.axis.y + R.xz * vector.axis.z,
 800118c:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001190:	edd7 7a05 	vldr	s15, [r7, #20]
 8001194:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001198:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 800119c:	edd7 7a06 	vldr	s15, [r7, #24]
 80011a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011a4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80011a8:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 80011ac:	edd7 7a07 	vldr	s15, [r7, #28]
 80011b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011b4:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80011b8:	edc7 7a08 	vstr	s15, [r7, #32]
            .y = R.yx * vector.axis.x + R.yy * vector.axis.y + R.yz * vector.axis.z,
 80011bc:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80011c0:	edd7 7a05 	vldr	s15, [r7, #20]
 80011c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011c8:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 80011cc:	edd7 7a06 	vldr	s15, [r7, #24]
 80011d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011d4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80011d8:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 80011dc:	edd7 7a07 	vldr	s15, [r7, #28]
 80011e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011e4:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80011e8:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            .z = R.zx * vector.axis.x + R.zy * vector.axis.y + R.zz * vector.axis.z,
 80011ec:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80011f0:	edd7 7a05 	vldr	s15, [r7, #20]
 80011f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011f8:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 80011fc:	edd7 7a06 	vldr	s15, [r7, #24]
 8001200:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001204:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001208:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 800120c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001210:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001214:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8001218:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    }};
    return result;
 800121c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001220:	f107 0220 	add.w	r2, r7, #32
 8001224:	ca07      	ldmia	r2, {r0, r1, r2}
 8001226:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800122a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800122c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800122e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001230:	ee06 1a90 	vmov	s13, r1
 8001234:	ee07 2a10 	vmov	s14, r2
 8001238:	ee07 3a90 	vmov	s15, r3
#undef R
}
 800123c:	eeb0 0a66 	vmov.f32	s0, s13
 8001240:	eef0 0a47 	vmov.f32	s1, s14
 8001244:	eeb0 1a67 	vmov.f32	s2, s15
 8001248:	373c      	adds	r7, #60	; 0x3c
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	b004      	add	sp, #16
 8001252:	4770      	bx	lr

08001254 <FusionQuaternionToMatrix>:
/**
 * @brief Converts a quaternion to a rotation matrix.
 * @param quaternion Quaternion.
 * @return Rotation matrix.
 */
static inline FusionMatrix FusionQuaternionToMatrix(const FusionQuaternion quaternion) {
 8001254:	b4b0      	push	{r4, r5, r7}
 8001256:	b097      	sub	sp, #92	; 0x5c
 8001258:	af00      	add	r7, sp, #0
 800125a:	6178      	str	r0, [r7, #20]
 800125c:	eeb0 6a40 	vmov.f32	s12, s0
 8001260:	eef0 6a60 	vmov.f32	s13, s1
 8001264:	eeb0 7a41 	vmov.f32	s14, s2
 8001268:	eef0 7a61 	vmov.f32	s15, s3
 800126c:	ed87 6a01 	vstr	s12, [r7, #4]
 8001270:	edc7 6a02 	vstr	s13, [r7, #8]
 8001274:	ed87 7a03 	vstr	s14, [r7, #12]
 8001278:	edc7 7a04 	vstr	s15, [r7, #16]
#define Q quaternion.element
    const float qwqw = Q.w * Q.w; // calculate common terms to avoid repeated operations
 800127c:	ed97 7a01 	vldr	s14, [r7, #4]
 8001280:	edd7 7a01 	vldr	s15, [r7, #4]
 8001284:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001288:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    const float qwqx = Q.w * Q.x;
 800128c:	ed97 7a01 	vldr	s14, [r7, #4]
 8001290:	edd7 7a02 	vldr	s15, [r7, #8]
 8001294:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001298:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    const float qwqy = Q.w * Q.y;
 800129c:	ed97 7a01 	vldr	s14, [r7, #4]
 80012a0:	edd7 7a03 	vldr	s15, [r7, #12]
 80012a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012a8:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    const float qwqz = Q.w * Q.z;
 80012ac:	ed97 7a01 	vldr	s14, [r7, #4]
 80012b0:	edd7 7a04 	vldr	s15, [r7, #16]
 80012b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012b8:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    const float qxqy = Q.x * Q.y;
 80012bc:	ed97 7a02 	vldr	s14, [r7, #8]
 80012c0:	edd7 7a03 	vldr	s15, [r7, #12]
 80012c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012c8:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    const float qxqz = Q.x * Q.z;
 80012cc:	ed97 7a02 	vldr	s14, [r7, #8]
 80012d0:	edd7 7a04 	vldr	s15, [r7, #16]
 80012d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012d8:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    const float qyqz = Q.y * Q.z;
 80012dc:	ed97 7a03 	vldr	s14, [r7, #12]
 80012e0:	edd7 7a04 	vldr	s15, [r7, #16]
 80012e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012e8:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    const FusionMatrix matrix = {.element = {
            .xx = 2.0f * (qwqw - 0.5f + Q.x * Q.x),
 80012ec:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80012f0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80012f4:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80012f8:	edd7 6a02 	vldr	s13, [r7, #8]
 80012fc:	edd7 7a02 	vldr	s15, [r7, #8]
 8001300:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001304:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001308:	ee77 7aa7 	vadd.f32	s15, s15, s15
    const FusionMatrix matrix = {.element = {
 800130c:	edc7 7a06 	vstr	s15, [r7, #24]
            .xy = 2.0f * (qxqy - qwqz),
 8001310:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8001314:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001318:	ee77 7a67 	vsub.f32	s15, s14, s15
 800131c:	ee77 7aa7 	vadd.f32	s15, s15, s15
    const FusionMatrix matrix = {.element = {
 8001320:	edc7 7a07 	vstr	s15, [r7, #28]
            .xz = 2.0f * (qxqz + qwqy),
 8001324:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001328:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800132c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001330:	ee77 7aa7 	vadd.f32	s15, s15, s15
    const FusionMatrix matrix = {.element = {
 8001334:	edc7 7a08 	vstr	s15, [r7, #32]
            .yx = 2.0f * (qxqy + qwqz),
 8001338:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 800133c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001340:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001344:	ee77 7aa7 	vadd.f32	s15, s15, s15
    const FusionMatrix matrix = {.element = {
 8001348:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            .yy = 2.0f * (qwqw - 0.5f + Q.y * Q.y),
 800134c:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001350:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001354:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001358:	edd7 6a03 	vldr	s13, [r7, #12]
 800135c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001360:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001364:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001368:	ee77 7aa7 	vadd.f32	s15, s15, s15
    const FusionMatrix matrix = {.element = {
 800136c:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .yz = 2.0f * (qyqz - qwqx),
 8001370:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8001374:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8001378:	ee77 7a67 	vsub.f32	s15, s14, s15
 800137c:	ee77 7aa7 	vadd.f32	s15, s15, s15
    const FusionMatrix matrix = {.element = {
 8001380:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .zx = 2.0f * (qxqz - qwqy),
 8001384:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001388:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800138c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001390:	ee77 7aa7 	vadd.f32	s15, s15, s15
    const FusionMatrix matrix = {.element = {
 8001394:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
            .zy = 2.0f * (qyqz + qwqx),
 8001398:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800139c:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80013a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013a4:	ee77 7aa7 	vadd.f32	s15, s15, s15
    const FusionMatrix matrix = {.element = {
 80013a8:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
            .zz = 2.0f * (qwqw - 0.5f + Q.z * Q.z),
 80013ac:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80013b0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80013b4:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80013b8:	edd7 6a04 	vldr	s13, [r7, #16]
 80013bc:	edd7 7a04 	vldr	s15, [r7, #16]
 80013c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013c8:	ee77 7aa7 	vadd.f32	s15, s15, s15
    const FusionMatrix matrix = {.element = {
 80013cc:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
    }};
    return matrix;
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	461d      	mov	r5, r3
 80013d4:	f107 0418 	add.w	r4, r7, #24
 80013d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013e0:	6823      	ldr	r3, [r4, #0]
 80013e2:	602b      	str	r3, [r5, #0]
#undef Q
}
 80013e4:	6978      	ldr	r0, [r7, #20]
 80013e6:	375c      	adds	r7, #92	; 0x5c
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bcb0      	pop	{r4, r5, r7}
 80013ec:	4770      	bx	lr

080013ee <FusionQuaternionToEuler>:
/**
 * @brief Converts a quaternion to ZYX Euler angles in degrees.
 * @param quaternion Quaternion.
 * @return Euler angles in degrees.
 */
static inline FusionEuler FusionQuaternionToEuler(const FusionQuaternion quaternion) {
 80013ee:	b580      	push	{r7, lr}
 80013f0:	b090      	sub	sp, #64	; 0x40
 80013f2:	af00      	add	r7, sp, #0
 80013f4:	eeb0 6a40 	vmov.f32	s12, s0
 80013f8:	eef0 6a60 	vmov.f32	s13, s1
 80013fc:	eeb0 7a41 	vmov.f32	s14, s2
 8001400:	eef0 7a61 	vmov.f32	s15, s3
 8001404:	ed87 6a04 	vstr	s12, [r7, #16]
 8001408:	edc7 6a05 	vstr	s13, [r7, #20]
 800140c:	ed87 7a06 	vstr	s14, [r7, #24]
 8001410:	edc7 7a07 	vstr	s15, [r7, #28]
#define Q quaternion.element
    const float halfMinusQySquared = 0.5f - Q.y * Q.y; // calculate common terms to avoid repeated operations
 8001414:	ed97 7a06 	vldr	s14, [r7, #24]
 8001418:	edd7 7a06 	vldr	s15, [r7, #24]
 800141c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001420:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001424:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001428:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    const FusionEuler euler = {.angle = {
            .roll = FusionRadiansToDegrees(atan2f(Q.w * Q.x + Q.y * Q.z, halfMinusQySquared - Q.x * Q.x)),
 800142c:	ed97 7a04 	vldr	s14, [r7, #16]
 8001430:	edd7 7a05 	vldr	s15, [r7, #20]
 8001434:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001438:	edd7 6a06 	vldr	s13, [r7, #24]
 800143c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001440:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001444:	ee77 6a27 	vadd.f32	s13, s14, s15
 8001448:	ed97 7a05 	vldr	s14, [r7, #20]
 800144c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001450:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001454:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8001458:	ee77 7a67 	vsub.f32	s15, s14, s15
 800145c:	eef0 0a67 	vmov.f32	s1, s15
 8001460:	eeb0 0a66 	vmov.f32	s0, s13
 8001464:	f010 fb00 	bl	8011a68 <atan2f>
 8001468:	eef0 7a40 	vmov.f32	s15, s0
 800146c:	eeb0 0a67 	vmov.f32	s0, s15
 8001470:	f7ff fda6 	bl	8000fc0 <FusionRadiansToDegrees>
 8001474:	eef0 7a40 	vmov.f32	s15, s0
    const FusionEuler euler = {.angle = {
 8001478:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            .pitch = FusionRadiansToDegrees(FusionAsin(2.0f * (Q.w * Q.y - Q.z * Q.x))),
 800147c:	ed97 7a04 	vldr	s14, [r7, #16]
 8001480:	edd7 7a06 	vldr	s15, [r7, #24]
 8001484:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001488:	edd7 6a07 	vldr	s13, [r7, #28]
 800148c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001490:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001494:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001498:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800149c:	eeb0 0a67 	vmov.f32	s0, s15
 80014a0:	f7ff fda2 	bl	8000fe8 <FusionAsin>
 80014a4:	eef0 7a40 	vmov.f32	s15, s0
 80014a8:	eeb0 0a67 	vmov.f32	s0, s15
 80014ac:	f7ff fd88 	bl	8000fc0 <FusionRadiansToDegrees>
 80014b0:	eef0 7a40 	vmov.f32	s15, s0
    const FusionEuler euler = {.angle = {
 80014b4:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .yaw = FusionRadiansToDegrees(atan2f(Q.w * Q.z + Q.x * Q.y, halfMinusQySquared - Q.z * Q.z)),
 80014b8:	ed97 7a04 	vldr	s14, [r7, #16]
 80014bc:	edd7 7a07 	vldr	s15, [r7, #28]
 80014c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014c4:	edd7 6a05 	vldr	s13, [r7, #20]
 80014c8:	edd7 7a06 	vldr	s15, [r7, #24]
 80014cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014d0:	ee77 6a27 	vadd.f32	s13, s14, s15
 80014d4:	ed97 7a07 	vldr	s14, [r7, #28]
 80014d8:	edd7 7a07 	vldr	s15, [r7, #28]
 80014dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014e0:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80014e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014e8:	eef0 0a67 	vmov.f32	s1, s15
 80014ec:	eeb0 0a66 	vmov.f32	s0, s13
 80014f0:	f010 faba 	bl	8011a68 <atan2f>
 80014f4:	eef0 7a40 	vmov.f32	s15, s0
 80014f8:	eeb0 0a67 	vmov.f32	s0, s15
 80014fc:	f7ff fd60 	bl	8000fc0 <FusionRadiansToDegrees>
 8001500:	eef0 7a40 	vmov.f32	s15, s0
    const FusionEuler euler = {.angle = {
 8001504:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    }};
    return euler;
 8001508:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800150c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001510:	ca07      	ldmia	r2, {r0, r1, r2}
 8001512:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001516:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001518:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800151a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800151c:	ee06 1a90 	vmov	s13, r1
 8001520:	ee07 2a10 	vmov	s14, r2
 8001524:	ee07 3a90 	vmov	s15, r3
#undef Q
}
 8001528:	eeb0 0a66 	vmov.f32	s0, s13
 800152c:	eef0 0a47 	vmov.f32	s1, s14
 8001530:	eeb0 1a67 	vmov.f32	s2, s15
 8001534:	3740      	adds	r7, #64	; 0x40
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
	...

0800153c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800153c:	b5b0      	push	{r4, r5, r7, lr}
 800153e:	b096      	sub	sp, #88	; 0x58
 8001540:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001542:	f004 fc01 	bl	8005d48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001546:	f000 f88f 	bl	8001668 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800154a:	f000 fd73 	bl	8002034 <MX_GPIO_Init>
  MX_DMA_Init();
 800154e:	f000 fd51 	bl	8001ff4 <MX_DMA_Init>
  MX_TIM2_Init();
 8001552:	f000 faa9 	bl	8001aa8 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8001556:	f000 fccf 	bl	8001ef8 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800155a:	f000 f9e5 	bl	8001928 <MX_I2C1_Init>
  MX_I2C2_Init();
 800155e:	f000 fa11 	bl	8001984 <MX_I2C2_Init>
  MX_I2C3_Init();
 8001562:	f000 fa3d 	bl	80019e0 <MX_I2C3_Init>
  MX_TIM3_Init();
 8001566:	f000 fb0f 	bl	8001b88 <MX_TIM3_Init>
  MX_TIM4_Init();
 800156a:	f000 fbbb 	bl	8001ce4 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 800156e:	f000 fc99 	bl	8001ea4 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8001572:	f000 fceb 	bl	8001f4c <MX_USART3_UART_Init>
  MX_SPI2_Init();
 8001576:	f000 fa61 	bl	8001a3c <MX_SPI2_Init>
  MX_USART6_UART_Init();
 800157a:	f000 fd11 	bl	8001fa0 <MX_USART6_UART_Init>
  MX_ADC1_Init();
 800157e:	f000 f8dd 	bl	800173c <MX_ADC1_Init>
  MX_ADC2_Init();
 8001582:	f000 f92d 	bl	80017e0 <MX_ADC2_Init>
  MX_ADC3_Init();
 8001586:	f000 f97d 	bl	8001884 <MX_ADC3_Init>
  MX_TIM6_Init();
 800158a:	f000 fc1f 	bl	8001dcc <MX_TIM6_Init>
  MX_TIM7_Init();
 800158e:	f000 fc53 	bl	8001e38 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */




  __HAL_SPI_ENABLE(&hspi2);
 8001592:	4b2c      	ldr	r3, [pc, #176]	; (8001644 <main+0x108>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	4b2a      	ldr	r3, [pc, #168]	; (8001644 <main+0x108>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80015a0:	601a      	str	r2, [r3, #0]
  HAL_TIM_PWM_Start  ( &htim3,  TIM_CHANNEL_1  );
 80015a2:	2100      	movs	r1, #0
 80015a4:	4828      	ldr	r0, [pc, #160]	; (8001648 <main+0x10c>)
 80015a6:	f007 ff75 	bl	8009494 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start  ( &htim3,  TIM_CHANNEL_2  );
 80015aa:	2104      	movs	r1, #4
 80015ac:	4826      	ldr	r0, [pc, #152]	; (8001648 <main+0x10c>)
 80015ae:	f007 ff71 	bl	8009494 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start  ( &htim3,  TIM_CHANNEL_3  );
 80015b2:	2108      	movs	r1, #8
 80015b4:	4824      	ldr	r0, [pc, #144]	; (8001648 <main+0x10c>)
 80015b6:	f007 ff6d 	bl	8009494 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start  ( &htim3,  TIM_CHANNEL_4  );
 80015ba:	210c      	movs	r1, #12
 80015bc:	4822      	ldr	r0, [pc, #136]	; (8001648 <main+0x10c>)
 80015be:	f007 ff69 	bl	8009494 <HAL_TIM_PWM_Start>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityBelowNormal, 0, 128);
 80015c2:	4b22      	ldr	r3, [pc, #136]	; (800164c <main+0x110>)
 80015c4:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80015c8:	461d      	mov	r5, r3
 80015ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015ce:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80015d2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80015d6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80015da:	2100      	movs	r1, #0
 80015dc:	4618      	mov	r0, r3
 80015de:	f00b fffd 	bl	800d5dc <osThreadCreate>
 80015e2:	4603      	mov	r3, r0
 80015e4:	4a1a      	ldr	r2, [pc, #104]	; (8001650 <main+0x114>)
 80015e6:	6013      	str	r3, [r2, #0]

  /* definition and creation of Data_Reading */
  osThreadDef(Data_Reading, Start_Data_Reading, osPriorityNormal, 0, 300);
 80015e8:	4b1a      	ldr	r3, [pc, #104]	; (8001654 <main+0x118>)
 80015ea:	f107 0420 	add.w	r4, r7, #32
 80015ee:	461d      	mov	r5, r3
 80015f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015f4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80015f8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Data_ReadingHandle = osThreadCreate(osThread(Data_Reading), NULL);
 80015fc:	f107 0320 	add.w	r3, r7, #32
 8001600:	2100      	movs	r1, #0
 8001602:	4618      	mov	r0, r3
 8001604:	f00b ffea 	bl	800d5dc <osThreadCreate>
 8001608:	4603      	mov	r3, r0
 800160a:	4a13      	ldr	r2, [pc, #76]	; (8001658 <main+0x11c>)
 800160c:	6013      	str	r3, [r2, #0]

  /* definition and creation of Orientation_cal */
  osThreadDef(Orientation_cal, Start_Orientation, osPriorityBelowNormal, 0, 200);
 800160e:	4b13      	ldr	r3, [pc, #76]	; (800165c <main+0x120>)
 8001610:	1d3c      	adds	r4, r7, #4
 8001612:	461d      	mov	r5, r3
 8001614:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001616:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001618:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800161c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Orientation_calHandle = osThreadCreate(osThread(Orientation_cal), NULL);
 8001620:	1d3b      	adds	r3, r7, #4
 8001622:	2100      	movs	r1, #0
 8001624:	4618      	mov	r0, r3
 8001626:	f00b ffd9 	bl	800d5dc <osThreadCreate>
 800162a:	4603      	mov	r3, r0
 800162c:	4a0c      	ldr	r2, [pc, #48]	; (8001660 <main+0x124>)
 800162e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001630:	f00b ffcd 	bl	800d5ce <osKernelStart>

  while (1)
  {


	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 8001634:	2108      	movs	r1, #8
 8001636:	480b      	ldr	r0, [pc, #44]	; (8001664 <main+0x128>)
 8001638:	f005 fd47 	bl	80070ca <HAL_GPIO_TogglePin>

	  HAL_Delay(3);
 800163c:	2003      	movs	r0, #3
 800163e:	f004 fbf5 	bl	8005e2c <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 8001642:	e7f7      	b.n	8001634 <main+0xf8>
 8001644:	20000634 	.word	0x20000634
 8001648:	200006d4 	.word	0x200006d4
 800164c:	08013da4 	.word	0x08013da4
 8001650:	20000964 	.word	0x20000964
 8001654:	08013dc0 	.word	0x08013dc0
 8001658:	20000968 	.word	0x20000968
 800165c:	08013ddc 	.word	0x08013ddc
 8001660:	2000096c 	.word	0x2000096c
 8001664:	40020400 	.word	0x40020400

08001668 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b094      	sub	sp, #80	; 0x50
 800166c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800166e:	f107 0320 	add.w	r3, r7, #32
 8001672:	2230      	movs	r2, #48	; 0x30
 8001674:	2100      	movs	r1, #0
 8001676:	4618      	mov	r0, r3
 8001678:	f00d fa38 	bl	800eaec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800167c:	f107 030c 	add.w	r3, r7, #12
 8001680:	2200      	movs	r2, #0
 8001682:	601a      	str	r2, [r3, #0]
 8001684:	605a      	str	r2, [r3, #4]
 8001686:	609a      	str	r2, [r3, #8]
 8001688:	60da      	str	r2, [r3, #12]
 800168a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800168c:	2300      	movs	r3, #0
 800168e:	60bb      	str	r3, [r7, #8]
 8001690:	4b28      	ldr	r3, [pc, #160]	; (8001734 <SystemClock_Config+0xcc>)
 8001692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001694:	4a27      	ldr	r2, [pc, #156]	; (8001734 <SystemClock_Config+0xcc>)
 8001696:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800169a:	6413      	str	r3, [r2, #64]	; 0x40
 800169c:	4b25      	ldr	r3, [pc, #148]	; (8001734 <SystemClock_Config+0xcc>)
 800169e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016a4:	60bb      	str	r3, [r7, #8]
 80016a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80016a8:	2300      	movs	r3, #0
 80016aa:	607b      	str	r3, [r7, #4]
 80016ac:	4b22      	ldr	r3, [pc, #136]	; (8001738 <SystemClock_Config+0xd0>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a21      	ldr	r2, [pc, #132]	; (8001738 <SystemClock_Config+0xd0>)
 80016b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016b6:	6013      	str	r3, [r2, #0]
 80016b8:	4b1f      	ldr	r3, [pc, #124]	; (8001738 <SystemClock_Config+0xd0>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016c0:	607b      	str	r3, [r7, #4]
 80016c2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80016c4:	2301      	movs	r3, #1
 80016c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80016c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016cc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016ce:	2302      	movs	r3, #2
 80016d0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016d2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80016d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80016d8:	2304      	movs	r3, #4
 80016da:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80016dc:	23a8      	movs	r3, #168	; 0xa8
 80016de:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016e0:	2302      	movs	r3, #2
 80016e2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80016e4:	2304      	movs	r3, #4
 80016e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016e8:	f107 0320 	add.w	r3, r7, #32
 80016ec:	4618      	mov	r0, r3
 80016ee:	f006 fcdf 	bl	80080b0 <HAL_RCC_OscConfig>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d001      	beq.n	80016fc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80016f8:	f001 ff20 	bl	800353c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016fc:	230f      	movs	r3, #15
 80016fe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001700:	2302      	movs	r3, #2
 8001702:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001704:	2300      	movs	r3, #0
 8001706:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001708:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800170c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800170e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001712:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001714:	f107 030c 	add.w	r3, r7, #12
 8001718:	2105      	movs	r1, #5
 800171a:	4618      	mov	r0, r3
 800171c:	f006 ff40 	bl	80085a0 <HAL_RCC_ClockConfig>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d001      	beq.n	800172a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001726:	f001 ff09 	bl	800353c <Error_Handler>
  }
}
 800172a:	bf00      	nop
 800172c:	3750      	adds	r7, #80	; 0x50
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	40023800 	.word	0x40023800
 8001738:	40007000 	.word	0x40007000

0800173c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b084      	sub	sp, #16
 8001740:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001742:	463b      	mov	r3, r7
 8001744:	2200      	movs	r2, #0
 8001746:	601a      	str	r2, [r3, #0]
 8001748:	605a      	str	r2, [r3, #4]
 800174a:	609a      	str	r2, [r3, #8]
 800174c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800174e:	4b21      	ldr	r3, [pc, #132]	; (80017d4 <MX_ADC1_Init+0x98>)
 8001750:	4a21      	ldr	r2, [pc, #132]	; (80017d8 <MX_ADC1_Init+0x9c>)
 8001752:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 8001754:	4b1f      	ldr	r3, [pc, #124]	; (80017d4 <MX_ADC1_Init+0x98>)
 8001756:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800175a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800175c:	4b1d      	ldr	r3, [pc, #116]	; (80017d4 <MX_ADC1_Init+0x98>)
 800175e:	2200      	movs	r2, #0
 8001760:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001762:	4b1c      	ldr	r3, [pc, #112]	; (80017d4 <MX_ADC1_Init+0x98>)
 8001764:	2200      	movs	r2, #0
 8001766:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001768:	4b1a      	ldr	r3, [pc, #104]	; (80017d4 <MX_ADC1_Init+0x98>)
 800176a:	2200      	movs	r2, #0
 800176c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800176e:	4b19      	ldr	r3, [pc, #100]	; (80017d4 <MX_ADC1_Init+0x98>)
 8001770:	2200      	movs	r2, #0
 8001772:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001776:	4b17      	ldr	r3, [pc, #92]	; (80017d4 <MX_ADC1_Init+0x98>)
 8001778:	2200      	movs	r2, #0
 800177a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800177c:	4b15      	ldr	r3, [pc, #84]	; (80017d4 <MX_ADC1_Init+0x98>)
 800177e:	4a17      	ldr	r2, [pc, #92]	; (80017dc <MX_ADC1_Init+0xa0>)
 8001780:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001782:	4b14      	ldr	r3, [pc, #80]	; (80017d4 <MX_ADC1_Init+0x98>)
 8001784:	2200      	movs	r2, #0
 8001786:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001788:	4b12      	ldr	r3, [pc, #72]	; (80017d4 <MX_ADC1_Init+0x98>)
 800178a:	2201      	movs	r2, #1
 800178c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800178e:	4b11      	ldr	r3, [pc, #68]	; (80017d4 <MX_ADC1_Init+0x98>)
 8001790:	2200      	movs	r2, #0
 8001792:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001796:	4b0f      	ldr	r3, [pc, #60]	; (80017d4 <MX_ADC1_Init+0x98>)
 8001798:	2201      	movs	r2, #1
 800179a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800179c:	480d      	ldr	r0, [pc, #52]	; (80017d4 <MX_ADC1_Init+0x98>)
 800179e:	f004 fb69 	bl	8005e74 <HAL_ADC_Init>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d001      	beq.n	80017ac <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80017a8:	f001 fec8 	bl	800353c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80017ac:	2305      	movs	r3, #5
 80017ae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80017b0:	2301      	movs	r3, #1
 80017b2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80017b4:	2300      	movs	r3, #0
 80017b6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017b8:	463b      	mov	r3, r7
 80017ba:	4619      	mov	r1, r3
 80017bc:	4805      	ldr	r0, [pc, #20]	; (80017d4 <MX_ADC1_Init+0x98>)
 80017be:	f004 fb9d 	bl	8005efc <HAL_ADC_ConfigChannel>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d001      	beq.n	80017cc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80017c8:	f001 feb8 	bl	800353c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80017cc:	bf00      	nop
 80017ce:	3710      	adds	r7, #16
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	20000460 	.word	0x20000460
 80017d8:	40012000 	.word	0x40012000
 80017dc:	0f000001 	.word	0x0f000001

080017e0 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b084      	sub	sp, #16
 80017e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80017e6:	463b      	mov	r3, r7
 80017e8:	2200      	movs	r2, #0
 80017ea:	601a      	str	r2, [r3, #0]
 80017ec:	605a      	str	r2, [r3, #4]
 80017ee:	609a      	str	r2, [r3, #8]
 80017f0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80017f2:	4b21      	ldr	r3, [pc, #132]	; (8001878 <MX_ADC2_Init+0x98>)
 80017f4:	4a21      	ldr	r2, [pc, #132]	; (800187c <MX_ADC2_Init+0x9c>)
 80017f6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 80017f8:	4b1f      	ldr	r3, [pc, #124]	; (8001878 <MX_ADC2_Init+0x98>)
 80017fa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80017fe:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001800:	4b1d      	ldr	r3, [pc, #116]	; (8001878 <MX_ADC2_Init+0x98>)
 8001802:	2200      	movs	r2, #0
 8001804:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8001806:	4b1c      	ldr	r3, [pc, #112]	; (8001878 <MX_ADC2_Init+0x98>)
 8001808:	2200      	movs	r2, #0
 800180a:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800180c:	4b1a      	ldr	r3, [pc, #104]	; (8001878 <MX_ADC2_Init+0x98>)
 800180e:	2200      	movs	r2, #0
 8001810:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001812:	4b19      	ldr	r3, [pc, #100]	; (8001878 <MX_ADC2_Init+0x98>)
 8001814:	2200      	movs	r2, #0
 8001816:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800181a:	4b17      	ldr	r3, [pc, #92]	; (8001878 <MX_ADC2_Init+0x98>)
 800181c:	2200      	movs	r2, #0
 800181e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001820:	4b15      	ldr	r3, [pc, #84]	; (8001878 <MX_ADC2_Init+0x98>)
 8001822:	4a17      	ldr	r2, [pc, #92]	; (8001880 <MX_ADC2_Init+0xa0>)
 8001824:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001826:	4b14      	ldr	r3, [pc, #80]	; (8001878 <MX_ADC2_Init+0x98>)
 8001828:	2200      	movs	r2, #0
 800182a:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 800182c:	4b12      	ldr	r3, [pc, #72]	; (8001878 <MX_ADC2_Init+0x98>)
 800182e:	2201      	movs	r2, #1
 8001830:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001832:	4b11      	ldr	r3, [pc, #68]	; (8001878 <MX_ADC2_Init+0x98>)
 8001834:	2200      	movs	r2, #0
 8001836:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800183a:	4b0f      	ldr	r3, [pc, #60]	; (8001878 <MX_ADC2_Init+0x98>)
 800183c:	2201      	movs	r2, #1
 800183e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001840:	480d      	ldr	r0, [pc, #52]	; (8001878 <MX_ADC2_Init+0x98>)
 8001842:	f004 fb17 	bl	8005e74 <HAL_ADC_Init>
 8001846:	4603      	mov	r3, r0
 8001848:	2b00      	cmp	r3, #0
 800184a:	d001      	beq.n	8001850 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 800184c:	f001 fe76 	bl	800353c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001850:	2304      	movs	r3, #4
 8001852:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001854:	2301      	movs	r3, #1
 8001856:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001858:	2300      	movs	r3, #0
 800185a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800185c:	463b      	mov	r3, r7
 800185e:	4619      	mov	r1, r3
 8001860:	4805      	ldr	r0, [pc, #20]	; (8001878 <MX_ADC2_Init+0x98>)
 8001862:	f004 fb4b 	bl	8005efc <HAL_ADC_ConfigChannel>
 8001866:	4603      	mov	r3, r0
 8001868:	2b00      	cmp	r3, #0
 800186a:	d001      	beq.n	8001870 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 800186c:	f001 fe66 	bl	800353c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001870:	bf00      	nop
 8001872:	3710      	adds	r7, #16
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	200004a8 	.word	0x200004a8
 800187c:	40012100 	.word	0x40012100
 8001880:	0f000001 	.word	0x0f000001

08001884 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b084      	sub	sp, #16
 8001888:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800188a:	463b      	mov	r3, r7
 800188c:	2200      	movs	r2, #0
 800188e:	601a      	str	r2, [r3, #0]
 8001890:	605a      	str	r2, [r3, #4]
 8001892:	609a      	str	r2, [r3, #8]
 8001894:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8001896:	4b21      	ldr	r3, [pc, #132]	; (800191c <MX_ADC3_Init+0x98>)
 8001898:	4a21      	ldr	r2, [pc, #132]	; (8001920 <MX_ADC3_Init+0x9c>)
 800189a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 800189c:	4b1f      	ldr	r3, [pc, #124]	; (800191c <MX_ADC3_Init+0x98>)
 800189e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80018a2:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80018a4:	4b1d      	ldr	r3, [pc, #116]	; (800191c <MX_ADC3_Init+0x98>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 80018aa:	4b1c      	ldr	r3, [pc, #112]	; (800191c <MX_ADC3_Init+0x98>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80018b0:	4b1a      	ldr	r3, [pc, #104]	; (800191c <MX_ADC3_Init+0x98>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80018b6:	4b19      	ldr	r3, [pc, #100]	; (800191c <MX_ADC3_Init+0x98>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80018be:	4b17      	ldr	r3, [pc, #92]	; (800191c <MX_ADC3_Init+0x98>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80018c4:	4b15      	ldr	r3, [pc, #84]	; (800191c <MX_ADC3_Init+0x98>)
 80018c6:	4a17      	ldr	r2, [pc, #92]	; (8001924 <MX_ADC3_Init+0xa0>)
 80018c8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80018ca:	4b14      	ldr	r3, [pc, #80]	; (800191c <MX_ADC3_Init+0x98>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 80018d0:	4b12      	ldr	r3, [pc, #72]	; (800191c <MX_ADC3_Init+0x98>)
 80018d2:	2201      	movs	r2, #1
 80018d4:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80018d6:	4b11      	ldr	r3, [pc, #68]	; (800191c <MX_ADC3_Init+0x98>)
 80018d8:	2200      	movs	r2, #0
 80018da:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80018de:	4b0f      	ldr	r3, [pc, #60]	; (800191c <MX_ADC3_Init+0x98>)
 80018e0:	2201      	movs	r2, #1
 80018e2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80018e4:	480d      	ldr	r0, [pc, #52]	; (800191c <MX_ADC3_Init+0x98>)
 80018e6:	f004 fac5 	bl	8005e74 <HAL_ADC_Init>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d001      	beq.n	80018f4 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 80018f0:	f001 fe24 	bl	800353c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80018f4:	230d      	movs	r3, #13
 80018f6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80018f8:	2301      	movs	r3, #1
 80018fa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80018fc:	2300      	movs	r3, #0
 80018fe:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001900:	463b      	mov	r3, r7
 8001902:	4619      	mov	r1, r3
 8001904:	4805      	ldr	r0, [pc, #20]	; (800191c <MX_ADC3_Init+0x98>)
 8001906:	f004 faf9 	bl	8005efc <HAL_ADC_ConfigChannel>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d001      	beq.n	8001914 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8001910:	f001 fe14 	bl	800353c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001914:	bf00      	nop
 8001916:	3710      	adds	r7, #16
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}
 800191c:	200004f0 	.word	0x200004f0
 8001920:	40012200 	.word	0x40012200
 8001924:	0f000001 	.word	0x0f000001

08001928 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800192c:	4b12      	ldr	r3, [pc, #72]	; (8001978 <MX_I2C1_Init+0x50>)
 800192e:	4a13      	ldr	r2, [pc, #76]	; (800197c <MX_I2C1_Init+0x54>)
 8001930:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001932:	4b11      	ldr	r3, [pc, #68]	; (8001978 <MX_I2C1_Init+0x50>)
 8001934:	4a12      	ldr	r2, [pc, #72]	; (8001980 <MX_I2C1_Init+0x58>)
 8001936:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001938:	4b0f      	ldr	r3, [pc, #60]	; (8001978 <MX_I2C1_Init+0x50>)
 800193a:	2200      	movs	r2, #0
 800193c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800193e:	4b0e      	ldr	r3, [pc, #56]	; (8001978 <MX_I2C1_Init+0x50>)
 8001940:	2200      	movs	r2, #0
 8001942:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001944:	4b0c      	ldr	r3, [pc, #48]	; (8001978 <MX_I2C1_Init+0x50>)
 8001946:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800194a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800194c:	4b0a      	ldr	r3, [pc, #40]	; (8001978 <MX_I2C1_Init+0x50>)
 800194e:	2200      	movs	r2, #0
 8001950:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001952:	4b09      	ldr	r3, [pc, #36]	; (8001978 <MX_I2C1_Init+0x50>)
 8001954:	2200      	movs	r2, #0
 8001956:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001958:	4b07      	ldr	r3, [pc, #28]	; (8001978 <MX_I2C1_Init+0x50>)
 800195a:	2200      	movs	r2, #0
 800195c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800195e:	4b06      	ldr	r3, [pc, #24]	; (8001978 <MX_I2C1_Init+0x50>)
 8001960:	2200      	movs	r2, #0
 8001962:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001964:	4804      	ldr	r0, [pc, #16]	; (8001978 <MX_I2C1_Init+0x50>)
 8001966:	f005 fbe3 	bl	8007130 <HAL_I2C_Init>
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	d001      	beq.n	8001974 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001970:	f001 fde4 	bl	800353c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001974:	bf00      	nop
 8001976:	bd80      	pop	{r7, pc}
 8001978:	20000538 	.word	0x20000538
 800197c:	40005400 	.word	0x40005400
 8001980:	00061a80 	.word	0x00061a80

08001984 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001988:	4b12      	ldr	r3, [pc, #72]	; (80019d4 <MX_I2C2_Init+0x50>)
 800198a:	4a13      	ldr	r2, [pc, #76]	; (80019d8 <MX_I2C2_Init+0x54>)
 800198c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 800198e:	4b11      	ldr	r3, [pc, #68]	; (80019d4 <MX_I2C2_Init+0x50>)
 8001990:	4a12      	ldr	r2, [pc, #72]	; (80019dc <MX_I2C2_Init+0x58>)
 8001992:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001994:	4b0f      	ldr	r3, [pc, #60]	; (80019d4 <MX_I2C2_Init+0x50>)
 8001996:	2200      	movs	r2, #0
 8001998:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800199a:	4b0e      	ldr	r3, [pc, #56]	; (80019d4 <MX_I2C2_Init+0x50>)
 800199c:	2200      	movs	r2, #0
 800199e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80019a0:	4b0c      	ldr	r3, [pc, #48]	; (80019d4 <MX_I2C2_Init+0x50>)
 80019a2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80019a6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80019a8:	4b0a      	ldr	r3, [pc, #40]	; (80019d4 <MX_I2C2_Init+0x50>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80019ae:	4b09      	ldr	r3, [pc, #36]	; (80019d4 <MX_I2C2_Init+0x50>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80019b4:	4b07      	ldr	r3, [pc, #28]	; (80019d4 <MX_I2C2_Init+0x50>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80019ba:	4b06      	ldr	r3, [pc, #24]	; (80019d4 <MX_I2C2_Init+0x50>)
 80019bc:	2200      	movs	r2, #0
 80019be:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80019c0:	4804      	ldr	r0, [pc, #16]	; (80019d4 <MX_I2C2_Init+0x50>)
 80019c2:	f005 fbb5 	bl	8007130 <HAL_I2C_Init>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d001      	beq.n	80019d0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80019cc:	f001 fdb6 	bl	800353c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80019d0:	bf00      	nop
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	2000058c 	.word	0x2000058c
 80019d8:	40005800 	.word	0x40005800
 80019dc:	00061a80 	.word	0x00061a80

080019e0 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80019e4:	4b12      	ldr	r3, [pc, #72]	; (8001a30 <MX_I2C3_Init+0x50>)
 80019e6:	4a13      	ldr	r2, [pc, #76]	; (8001a34 <MX_I2C3_Init+0x54>)
 80019e8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 80019ea:	4b11      	ldr	r3, [pc, #68]	; (8001a30 <MX_I2C3_Init+0x50>)
 80019ec:	4a12      	ldr	r2, [pc, #72]	; (8001a38 <MX_I2C3_Init+0x58>)
 80019ee:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80019f0:	4b0f      	ldr	r3, [pc, #60]	; (8001a30 <MX_I2C3_Init+0x50>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80019f6:	4b0e      	ldr	r3, [pc, #56]	; (8001a30 <MX_I2C3_Init+0x50>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80019fc:	4b0c      	ldr	r3, [pc, #48]	; (8001a30 <MX_I2C3_Init+0x50>)
 80019fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a02:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a04:	4b0a      	ldr	r3, [pc, #40]	; (8001a30 <MX_I2C3_Init+0x50>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001a0a:	4b09      	ldr	r3, [pc, #36]	; (8001a30 <MX_I2C3_Init+0x50>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a10:	4b07      	ldr	r3, [pc, #28]	; (8001a30 <MX_I2C3_Init+0x50>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a16:	4b06      	ldr	r3, [pc, #24]	; (8001a30 <MX_I2C3_Init+0x50>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001a1c:	4804      	ldr	r0, [pc, #16]	; (8001a30 <MX_I2C3_Init+0x50>)
 8001a1e:	f005 fb87 	bl	8007130 <HAL_I2C_Init>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d001      	beq.n	8001a2c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001a28:	f001 fd88 	bl	800353c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001a2c:	bf00      	nop
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	200005e0 	.word	0x200005e0
 8001a34:	40005c00 	.word	0x40005c00
 8001a38:	00061a80 	.word	0x00061a80

08001a3c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001a40:	4b17      	ldr	r3, [pc, #92]	; (8001aa0 <MX_SPI2_Init+0x64>)
 8001a42:	4a18      	ldr	r2, [pc, #96]	; (8001aa4 <MX_SPI2_Init+0x68>)
 8001a44:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001a46:	4b16      	ldr	r3, [pc, #88]	; (8001aa0 <MX_SPI2_Init+0x64>)
 8001a48:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001a4c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001a4e:	4b14      	ldr	r3, [pc, #80]	; (8001aa0 <MX_SPI2_Init+0x64>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a54:	4b12      	ldr	r3, [pc, #72]	; (8001aa0 <MX_SPI2_Init+0x64>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a5a:	4b11      	ldr	r3, [pc, #68]	; (8001aa0 <MX_SPI2_Init+0x64>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a60:	4b0f      	ldr	r3, [pc, #60]	; (8001aa0 <MX_SPI2_Init+0x64>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001a66:	4b0e      	ldr	r3, [pc, #56]	; (8001aa0 <MX_SPI2_Init+0x64>)
 8001a68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a6c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001a6e:	4b0c      	ldr	r3, [pc, #48]	; (8001aa0 <MX_SPI2_Init+0x64>)
 8001a70:	2220      	movs	r2, #32
 8001a72:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a74:	4b0a      	ldr	r3, [pc, #40]	; (8001aa0 <MX_SPI2_Init+0x64>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a7a:	4b09      	ldr	r3, [pc, #36]	; (8001aa0 <MX_SPI2_Init+0x64>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a80:	4b07      	ldr	r3, [pc, #28]	; (8001aa0 <MX_SPI2_Init+0x64>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001a86:	4b06      	ldr	r3, [pc, #24]	; (8001aa0 <MX_SPI2_Init+0x64>)
 8001a88:	220a      	movs	r2, #10
 8001a8a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001a8c:	4804      	ldr	r0, [pc, #16]	; (8001aa0 <MX_SPI2_Init+0x64>)
 8001a8e:	f006 ffa7 	bl	80089e0 <HAL_SPI_Init>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d001      	beq.n	8001a9c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001a98:	f001 fd50 	bl	800353c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001a9c:	bf00      	nop
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	20000634 	.word	0x20000634
 8001aa4:	40003800 	.word	0x40003800

08001aa8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b08a      	sub	sp, #40	; 0x28
 8001aac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001aae:	f107 0318 	add.w	r3, r7, #24
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	601a      	str	r2, [r3, #0]
 8001ab6:	605a      	str	r2, [r3, #4]
 8001ab8:	609a      	str	r2, [r3, #8]
 8001aba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001abc:	f107 0310 	add.w	r3, r7, #16
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	601a      	str	r2, [r3, #0]
 8001ac4:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001ac6:	463b      	mov	r3, r7
 8001ac8:	2200      	movs	r2, #0
 8001aca:	601a      	str	r2, [r3, #0]
 8001acc:	605a      	str	r2, [r3, #4]
 8001ace:	609a      	str	r2, [r3, #8]
 8001ad0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001ad2:	4b2c      	ldr	r3, [pc, #176]	; (8001b84 <MX_TIM2_Init+0xdc>)
 8001ad4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ad8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 8001ada:	4b2a      	ldr	r3, [pc, #168]	; (8001b84 <MX_TIM2_Init+0xdc>)
 8001adc:	2253      	movs	r2, #83	; 0x53
 8001ade:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ae0:	4b28      	ldr	r3, [pc, #160]	; (8001b84 <MX_TIM2_Init+0xdc>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8001ae6:	4b27      	ldr	r3, [pc, #156]	; (8001b84 <MX_TIM2_Init+0xdc>)
 8001ae8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001aec:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001aee:	4b25      	ldr	r3, [pc, #148]	; (8001b84 <MX_TIM2_Init+0xdc>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001af4:	4b23      	ldr	r3, [pc, #140]	; (8001b84 <MX_TIM2_Init+0xdc>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001afa:	4822      	ldr	r0, [pc, #136]	; (8001b84 <MX_TIM2_Init+0xdc>)
 8001afc:	f007 fbb0 	bl	8009260 <HAL_TIM_Base_Init>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d001      	beq.n	8001b0a <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 8001b06:	f001 fd19 	bl	800353c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b0e:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001b10:	f107 0318 	add.w	r3, r7, #24
 8001b14:	4619      	mov	r1, r3
 8001b16:	481b      	ldr	r0, [pc, #108]	; (8001b84 <MX_TIM2_Init+0xdc>)
 8001b18:	f008 f844 	bl	8009ba4 <HAL_TIM_ConfigClockSource>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d001      	beq.n	8001b26 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001b22:	f001 fd0b 	bl	800353c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001b26:	4817      	ldr	r0, [pc, #92]	; (8001b84 <MX_TIM2_Init+0xdc>)
 8001b28:	f007 fd7c 	bl	8009624 <HAL_TIM_IC_Init>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d001      	beq.n	8001b36 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001b32:	f001 fd03 	bl	800353c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b36:	2300      	movs	r3, #0
 8001b38:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b3e:	f107 0310 	add.w	r3, r7, #16
 8001b42:	4619      	mov	r1, r3
 8001b44:	480f      	ldr	r0, [pc, #60]	; (8001b84 <MX_TIM2_Init+0xdc>)
 8001b46:	f008 fe65 	bl	800a814 <HAL_TIMEx_MasterConfigSynchronization>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d001      	beq.n	8001b54 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8001b50:	f001 fcf4 	bl	800353c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001b54:	2300      	movs	r3, #0
 8001b56:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001b60:	2300      	movs	r3, #0
 8001b62:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001b64:	463b      	mov	r3, r7
 8001b66:	2200      	movs	r2, #0
 8001b68:	4619      	mov	r1, r3
 8001b6a:	4806      	ldr	r0, [pc, #24]	; (8001b84 <MX_TIM2_Init+0xdc>)
 8001b6c:	f007 febb 	bl	80098e6 <HAL_TIM_IC_ConfigChannel>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d001      	beq.n	8001b7a <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 8001b76:	f001 fce1 	bl	800353c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001b7a:	bf00      	nop
 8001b7c:	3728      	adds	r7, #40	; 0x28
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	2000068c 	.word	0x2000068c

08001b88 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b092      	sub	sp, #72	; 0x48
 8001b8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b8e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001b92:	2200      	movs	r2, #0
 8001b94:	601a      	str	r2, [r3, #0]
 8001b96:	605a      	str	r2, [r3, #4]
 8001b98:	609a      	str	r2, [r3, #8]
 8001b9a:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001b9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	601a      	str	r2, [r3, #0]
 8001ba4:	605a      	str	r2, [r3, #4]
 8001ba6:	609a      	str	r2, [r3, #8]
 8001ba8:	60da      	str	r2, [r3, #12]
 8001baa:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bac:	f107 031c 	add.w	r3, r7, #28
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	601a      	str	r2, [r3, #0]
 8001bb4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001bb6:	463b      	mov	r3, r7
 8001bb8:	2200      	movs	r2, #0
 8001bba:	601a      	str	r2, [r3, #0]
 8001bbc:	605a      	str	r2, [r3, #4]
 8001bbe:	609a      	str	r2, [r3, #8]
 8001bc0:	60da      	str	r2, [r3, #12]
 8001bc2:	611a      	str	r2, [r3, #16]
 8001bc4:	615a      	str	r2, [r3, #20]
 8001bc6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001bc8:	4b44      	ldr	r3, [pc, #272]	; (8001cdc <MX_TIM3_Init+0x154>)
 8001bca:	4a45      	ldr	r2, [pc, #276]	; (8001ce0 <MX_TIM3_Init+0x158>)
 8001bcc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7-1;
 8001bce:	4b43      	ldr	r3, [pc, #268]	; (8001cdc <MX_TIM3_Init+0x154>)
 8001bd0:	2206      	movs	r2, #6
 8001bd2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bd4:	4b41      	ldr	r3, [pc, #260]	; (8001cdc <MX_TIM3_Init+0x154>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8001bda:	4b40      	ldr	r3, [pc, #256]	; (8001cdc <MX_TIM3_Init+0x154>)
 8001bdc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001be0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001be2:	4b3e      	ldr	r3, [pc, #248]	; (8001cdc <MX_TIM3_Init+0x154>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001be8:	4b3c      	ldr	r3, [pc, #240]	; (8001cdc <MX_TIM3_Init+0x154>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001bee:	483b      	ldr	r0, [pc, #236]	; (8001cdc <MX_TIM3_Init+0x154>)
 8001bf0:	f007 fb36 	bl	8009260 <HAL_TIM_Base_Init>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d001      	beq.n	8001bfe <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001bfa:	f001 fc9f 	bl	800353c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bfe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c02:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001c04:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001c08:	4619      	mov	r1, r3
 8001c0a:	4834      	ldr	r0, [pc, #208]	; (8001cdc <MX_TIM3_Init+0x154>)
 8001c0c:	f007 ffca 	bl	8009ba4 <HAL_TIM_ConfigClockSource>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d001      	beq.n	8001c1a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001c16:	f001 fc91 	bl	800353c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001c1a:	4830      	ldr	r0, [pc, #192]	; (8001cdc <MX_TIM3_Init+0x154>)
 8001c1c:	f007 fbe0 	bl	80093e0 <HAL_TIM_PWM_Init>
 8001c20:	4603      	mov	r3, r0
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d001      	beq.n	8001c2a <MX_TIM3_Init+0xa2>
  {
    Error_Handler();
 8001c26:	f001 fc89 	bl	800353c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.InputTrigger = TIM_TS_ITR3;
 8001c2e:	2330      	movs	r3, #48	; 0x30
 8001c30:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8001c32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c36:	4619      	mov	r1, r3
 8001c38:	4828      	ldr	r0, [pc, #160]	; (8001cdc <MX_TIM3_Init+0x154>)
 8001c3a:	f008 f87a 	bl	8009d32 <HAL_TIM_SlaveConfigSynchro>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d001      	beq.n	8001c48 <MX_TIM3_Init+0xc0>
  {
    Error_Handler();
 8001c44:	f001 fc7a 	bl	800353c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001c50:	f107 031c 	add.w	r3, r7, #28
 8001c54:	4619      	mov	r1, r3
 8001c56:	4821      	ldr	r0, [pc, #132]	; (8001cdc <MX_TIM3_Init+0x154>)
 8001c58:	f008 fddc 	bl	800a814 <HAL_TIMEx_MasterConfigSynchronization>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d001      	beq.n	8001c66 <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 8001c62:	f001 fc6b 	bl	800353c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c66:	2360      	movs	r3, #96	; 0x60
 8001c68:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c72:	2300      	movs	r3, #0
 8001c74:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c76:	463b      	mov	r3, r7
 8001c78:	2200      	movs	r2, #0
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	4817      	ldr	r0, [pc, #92]	; (8001cdc <MX_TIM3_Init+0x154>)
 8001c7e:	f007 fecf 	bl	8009a20 <HAL_TIM_PWM_ConfigChannel>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d001      	beq.n	8001c8c <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 8001c88:	f001 fc58 	bl	800353c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001c8c:	463b      	mov	r3, r7
 8001c8e:	2204      	movs	r2, #4
 8001c90:	4619      	mov	r1, r3
 8001c92:	4812      	ldr	r0, [pc, #72]	; (8001cdc <MX_TIM3_Init+0x154>)
 8001c94:	f007 fec4 	bl	8009a20 <HAL_TIM_PWM_ConfigChannel>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d001      	beq.n	8001ca2 <MX_TIM3_Init+0x11a>
  {
    Error_Handler();
 8001c9e:	f001 fc4d 	bl	800353c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001ca2:	463b      	mov	r3, r7
 8001ca4:	2208      	movs	r2, #8
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	480c      	ldr	r0, [pc, #48]	; (8001cdc <MX_TIM3_Init+0x154>)
 8001caa:	f007 feb9 	bl	8009a20 <HAL_TIM_PWM_ConfigChannel>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d001      	beq.n	8001cb8 <MX_TIM3_Init+0x130>
  {
    Error_Handler();
 8001cb4:	f001 fc42 	bl	800353c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001cb8:	463b      	mov	r3, r7
 8001cba:	220c      	movs	r2, #12
 8001cbc:	4619      	mov	r1, r3
 8001cbe:	4807      	ldr	r0, [pc, #28]	; (8001cdc <MX_TIM3_Init+0x154>)
 8001cc0:	f007 feae 	bl	8009a20 <HAL_TIM_PWM_ConfigChannel>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d001      	beq.n	8001cce <MX_TIM3_Init+0x146>
  {
    Error_Handler();
 8001cca:	f001 fc37 	bl	800353c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001cce:	4803      	ldr	r0, [pc, #12]	; (8001cdc <MX_TIM3_Init+0x154>)
 8001cd0:	f001 fee0 	bl	8003a94 <HAL_TIM_MspPostInit>

}
 8001cd4:	bf00      	nop
 8001cd6:	3748      	adds	r7, #72	; 0x48
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	200006d4 	.word	0x200006d4
 8001ce0:	40000400 	.word	0x40000400

08001ce4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b08e      	sub	sp, #56	; 0x38
 8001ce8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001cea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001cee:	2200      	movs	r2, #0
 8001cf0:	601a      	str	r2, [r3, #0]
 8001cf2:	605a      	str	r2, [r3, #4]
 8001cf4:	609a      	str	r2, [r3, #8]
 8001cf6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cf8:	f107 0320 	add.w	r3, r7, #32
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	601a      	str	r2, [r3, #0]
 8001d00:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d02:	1d3b      	adds	r3, r7, #4
 8001d04:	2200      	movs	r2, #0
 8001d06:	601a      	str	r2, [r3, #0]
 8001d08:	605a      	str	r2, [r3, #4]
 8001d0a:	609a      	str	r2, [r3, #8]
 8001d0c:	60da      	str	r2, [r3, #12]
 8001d0e:	611a      	str	r2, [r3, #16]
 8001d10:	615a      	str	r2, [r3, #20]
 8001d12:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001d14:	4b2b      	ldr	r3, [pc, #172]	; (8001dc4 <MX_TIM4_Init+0xe0>)
 8001d16:	4a2c      	ldr	r2, [pc, #176]	; (8001dc8 <MX_TIM4_Init+0xe4>)
 8001d18:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001d1a:	4b2a      	ldr	r3, [pc, #168]	; (8001dc4 <MX_TIM4_Init+0xe0>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d20:	4b28      	ldr	r3, [pc, #160]	; (8001dc4 <MX_TIM4_Init+0xe0>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001d26:	4b27      	ldr	r3, [pc, #156]	; (8001dc4 <MX_TIM4_Init+0xe0>)
 8001d28:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d2c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d2e:	4b25      	ldr	r3, [pc, #148]	; (8001dc4 <MX_TIM4_Init+0xe0>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d34:	4b23      	ldr	r3, [pc, #140]	; (8001dc4 <MX_TIM4_Init+0xe0>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001d3a:	4822      	ldr	r0, [pc, #136]	; (8001dc4 <MX_TIM4_Init+0xe0>)
 8001d3c:	f007 fa90 	bl	8009260 <HAL_TIM_Base_Init>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d001      	beq.n	8001d4a <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8001d46:	f001 fbf9 	bl	800353c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d4e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001d50:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d54:	4619      	mov	r1, r3
 8001d56:	481b      	ldr	r0, [pc, #108]	; (8001dc4 <MX_TIM4_Init+0xe0>)
 8001d58:	f007 ff24 	bl	8009ba4 <HAL_TIM_ConfigClockSource>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d001      	beq.n	8001d66 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8001d62:	f001 fbeb 	bl	800353c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001d66:	4817      	ldr	r0, [pc, #92]	; (8001dc4 <MX_TIM4_Init+0xe0>)
 8001d68:	f007 fb3a 	bl	80093e0 <HAL_TIM_PWM_Init>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d001      	beq.n	8001d76 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001d72:	f001 fbe3 	bl	800353c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d76:	2300      	movs	r3, #0
 8001d78:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001d7e:	f107 0320 	add.w	r3, r7, #32
 8001d82:	4619      	mov	r1, r3
 8001d84:	480f      	ldr	r0, [pc, #60]	; (8001dc4 <MX_TIM4_Init+0xe0>)
 8001d86:	f008 fd45 	bl	800a814 <HAL_TIMEx_MasterConfigSynchronization>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d001      	beq.n	8001d94 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001d90:	f001 fbd4 	bl	800353c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d94:	2360      	movs	r3, #96	; 0x60
 8001d96:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001da0:	2300      	movs	r3, #0
 8001da2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001da4:	1d3b      	adds	r3, r7, #4
 8001da6:	2200      	movs	r2, #0
 8001da8:	4619      	mov	r1, r3
 8001daa:	4806      	ldr	r0, [pc, #24]	; (8001dc4 <MX_TIM4_Init+0xe0>)
 8001dac:	f007 fe38 	bl	8009a20 <HAL_TIM_PWM_ConfigChannel>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d001      	beq.n	8001dba <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8001db6:	f001 fbc1 	bl	800353c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001dba:	bf00      	nop
 8001dbc:	3738      	adds	r7, #56	; 0x38
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	2000071c 	.word	0x2000071c
 8001dc8:	40000800 	.word	0x40000800

08001dcc <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b082      	sub	sp, #8
 8001dd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dd2:	463b      	mov	r3, r7
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	601a      	str	r2, [r3, #0]
 8001dd8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001dda:	4b15      	ldr	r3, [pc, #84]	; (8001e30 <MX_TIM6_Init+0x64>)
 8001ddc:	4a15      	ldr	r2, [pc, #84]	; (8001e34 <MX_TIM6_Init+0x68>)
 8001dde:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 84-1;
 8001de0:	4b13      	ldr	r3, [pc, #76]	; (8001e30 <MX_TIM6_Init+0x64>)
 8001de2:	2253      	movs	r2, #83	; 0x53
 8001de4:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001de6:	4b12      	ldr	r3, [pc, #72]	; (8001e30 <MX_TIM6_Init+0x64>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65000;
 8001dec:	4b10      	ldr	r3, [pc, #64]	; (8001e30 <MX_TIM6_Init+0x64>)
 8001dee:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 8001df2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001df4:	4b0e      	ldr	r3, [pc, #56]	; (8001e30 <MX_TIM6_Init+0x64>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001dfa:	480d      	ldr	r0, [pc, #52]	; (8001e30 <MX_TIM6_Init+0x64>)
 8001dfc:	f007 fa30 	bl	8009260 <HAL_TIM_Base_Init>
 8001e00:	4603      	mov	r3, r0
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d001      	beq.n	8001e0a <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8001e06:	f001 fb99 	bl	800353c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001e12:	463b      	mov	r3, r7
 8001e14:	4619      	mov	r1, r3
 8001e16:	4806      	ldr	r0, [pc, #24]	; (8001e30 <MX_TIM6_Init+0x64>)
 8001e18:	f008 fcfc 	bl	800a814 <HAL_TIMEx_MasterConfigSynchronization>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d001      	beq.n	8001e26 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8001e22:	f001 fb8b 	bl	800353c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001e26:	bf00      	nop
 8001e28:	3708      	adds	r7, #8
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	20000764 	.word	0x20000764
 8001e34:	40001000 	.word	0x40001000

08001e38 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b082      	sub	sp, #8
 8001e3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e3e:	463b      	mov	r3, r7
 8001e40:	2200      	movs	r2, #0
 8001e42:	601a      	str	r2, [r3, #0]
 8001e44:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001e46:	4b15      	ldr	r3, [pc, #84]	; (8001e9c <MX_TIM7_Init+0x64>)
 8001e48:	4a15      	ldr	r2, [pc, #84]	; (8001ea0 <MX_TIM7_Init+0x68>)
 8001e4a:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 85-1;
 8001e4c:	4b13      	ldr	r3, [pc, #76]	; (8001e9c <MX_TIM7_Init+0x64>)
 8001e4e:	2254      	movs	r2, #84	; 0x54
 8001e50:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e52:	4b12      	ldr	r3, [pc, #72]	; (8001e9c <MX_TIM7_Init+0x64>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 10000-1;
 8001e58:	4b10      	ldr	r3, [pc, #64]	; (8001e9c <MX_TIM7_Init+0x64>)
 8001e5a:	f242 720f 	movw	r2, #9999	; 0x270f
 8001e5e:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e60:	4b0e      	ldr	r3, [pc, #56]	; (8001e9c <MX_TIM7_Init+0x64>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001e66:	480d      	ldr	r0, [pc, #52]	; (8001e9c <MX_TIM7_Init+0x64>)
 8001e68:	f007 f9fa 	bl	8009260 <HAL_TIM_Base_Init>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d001      	beq.n	8001e76 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8001e72:	f001 fb63 	bl	800353c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e76:	2300      	movs	r3, #0
 8001e78:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001e7e:	463b      	mov	r3, r7
 8001e80:	4619      	mov	r1, r3
 8001e82:	4806      	ldr	r0, [pc, #24]	; (8001e9c <MX_TIM7_Init+0x64>)
 8001e84:	f008 fcc6 	bl	800a814 <HAL_TIMEx_MasterConfigSynchronization>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d001      	beq.n	8001e92 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8001e8e:	f001 fb55 	bl	800353c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001e92:	bf00      	nop
 8001e94:	3708      	adds	r7, #8
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	200007ac 	.word	0x200007ac
 8001ea0:	40001400 	.word	0x40001400

08001ea4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001ea8:	4b10      	ldr	r3, [pc, #64]	; (8001eec <MX_USART1_UART_Init+0x48>)
 8001eaa:	4a11      	ldr	r2, [pc, #68]	; (8001ef0 <MX_USART1_UART_Init+0x4c>)
 8001eac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 420000;
 8001eae:	4b0f      	ldr	r3, [pc, #60]	; (8001eec <MX_USART1_UART_Init+0x48>)
 8001eb0:	4a10      	ldr	r2, [pc, #64]	; (8001ef4 <MX_USART1_UART_Init+0x50>)
 8001eb2:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001eb4:	4b0d      	ldr	r3, [pc, #52]	; (8001eec <MX_USART1_UART_Init+0x48>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001eba:	4b0c      	ldr	r3, [pc, #48]	; (8001eec <MX_USART1_UART_Init+0x48>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001ec0:	4b0a      	ldr	r3, [pc, #40]	; (8001eec <MX_USART1_UART_Init+0x48>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001ec6:	4b09      	ldr	r3, [pc, #36]	; (8001eec <MX_USART1_UART_Init+0x48>)
 8001ec8:	220c      	movs	r2, #12
 8001eca:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ecc:	4b07      	ldr	r3, [pc, #28]	; (8001eec <MX_USART1_UART_Init+0x48>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ed2:	4b06      	ldr	r3, [pc, #24]	; (8001eec <MX_USART1_UART_Init+0x48>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001ed8:	4804      	ldr	r0, [pc, #16]	; (8001eec <MX_USART1_UART_Init+0x48>)
 8001eda:	f008 fd2b 	bl	800a934 <HAL_UART_Init>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d001      	beq.n	8001ee8 <MX_USART1_UART_Init+0x44>
  {
    Error_Handler();
 8001ee4:	f001 fb2a 	bl	800353c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001ee8:	bf00      	nop
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	200007f4 	.word	0x200007f4
 8001ef0:	40011000 	.word	0x40011000
 8001ef4:	000668a0 	.word	0x000668a0

08001ef8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001efc:	4b11      	ldr	r3, [pc, #68]	; (8001f44 <MX_USART2_UART_Init+0x4c>)
 8001efe:	4a12      	ldr	r2, [pc, #72]	; (8001f48 <MX_USART2_UART_Init+0x50>)
 8001f00:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001f02:	4b10      	ldr	r3, [pc, #64]	; (8001f44 <MX_USART2_UART_Init+0x4c>)
 8001f04:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f08:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001f0a:	4b0e      	ldr	r3, [pc, #56]	; (8001f44 <MX_USART2_UART_Init+0x4c>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001f10:	4b0c      	ldr	r3, [pc, #48]	; (8001f44 <MX_USART2_UART_Init+0x4c>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001f16:	4b0b      	ldr	r3, [pc, #44]	; (8001f44 <MX_USART2_UART_Init+0x4c>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001f1c:	4b09      	ldr	r3, [pc, #36]	; (8001f44 <MX_USART2_UART_Init+0x4c>)
 8001f1e:	220c      	movs	r2, #12
 8001f20:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f22:	4b08      	ldr	r3, [pc, #32]	; (8001f44 <MX_USART2_UART_Init+0x4c>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f28:	4b06      	ldr	r3, [pc, #24]	; (8001f44 <MX_USART2_UART_Init+0x4c>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001f2e:	4805      	ldr	r0, [pc, #20]	; (8001f44 <MX_USART2_UART_Init+0x4c>)
 8001f30:	f008 fd00 	bl	800a934 <HAL_UART_Init>
 8001f34:	4603      	mov	r3, r0
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d001      	beq.n	8001f3e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001f3a:	f001 faff 	bl	800353c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001f3e:	bf00      	nop
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	20000838 	.word	0x20000838
 8001f48:	40004400 	.word	0x40004400

08001f4c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001f50:	4b11      	ldr	r3, [pc, #68]	; (8001f98 <MX_USART3_UART_Init+0x4c>)
 8001f52:	4a12      	ldr	r2, [pc, #72]	; (8001f9c <MX_USART3_UART_Init+0x50>)
 8001f54:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001f56:	4b10      	ldr	r3, [pc, #64]	; (8001f98 <MX_USART3_UART_Init+0x4c>)
 8001f58:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f5c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001f5e:	4b0e      	ldr	r3, [pc, #56]	; (8001f98 <MX_USART3_UART_Init+0x4c>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001f64:	4b0c      	ldr	r3, [pc, #48]	; (8001f98 <MX_USART3_UART_Init+0x4c>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001f6a:	4b0b      	ldr	r3, [pc, #44]	; (8001f98 <MX_USART3_UART_Init+0x4c>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001f70:	4b09      	ldr	r3, [pc, #36]	; (8001f98 <MX_USART3_UART_Init+0x4c>)
 8001f72:	220c      	movs	r2, #12
 8001f74:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f76:	4b08      	ldr	r3, [pc, #32]	; (8001f98 <MX_USART3_UART_Init+0x4c>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f7c:	4b06      	ldr	r3, [pc, #24]	; (8001f98 <MX_USART3_UART_Init+0x4c>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001f82:	4805      	ldr	r0, [pc, #20]	; (8001f98 <MX_USART3_UART_Init+0x4c>)
 8001f84:	f008 fcd6 	bl	800a934 <HAL_UART_Init>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d001      	beq.n	8001f92 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001f8e:	f001 fad5 	bl	800353c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001f92:	bf00      	nop
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	2000087c 	.word	0x2000087c
 8001f9c:	40004800 	.word	0x40004800

08001fa0 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001fa4:	4b11      	ldr	r3, [pc, #68]	; (8001fec <MX_USART6_UART_Init+0x4c>)
 8001fa6:	4a12      	ldr	r2, [pc, #72]	; (8001ff0 <MX_USART6_UART_Init+0x50>)
 8001fa8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001faa:	4b10      	ldr	r3, [pc, #64]	; (8001fec <MX_USART6_UART_Init+0x4c>)
 8001fac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001fb0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001fb2:	4b0e      	ldr	r3, [pc, #56]	; (8001fec <MX_USART6_UART_Init+0x4c>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001fb8:	4b0c      	ldr	r3, [pc, #48]	; (8001fec <MX_USART6_UART_Init+0x4c>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001fbe:	4b0b      	ldr	r3, [pc, #44]	; (8001fec <MX_USART6_UART_Init+0x4c>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001fc4:	4b09      	ldr	r3, [pc, #36]	; (8001fec <MX_USART6_UART_Init+0x4c>)
 8001fc6:	220c      	movs	r2, #12
 8001fc8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fca:	4b08      	ldr	r3, [pc, #32]	; (8001fec <MX_USART6_UART_Init+0x4c>)
 8001fcc:	2200      	movs	r2, #0
 8001fce:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fd0:	4b06      	ldr	r3, [pc, #24]	; (8001fec <MX_USART6_UART_Init+0x4c>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001fd6:	4805      	ldr	r0, [pc, #20]	; (8001fec <MX_USART6_UART_Init+0x4c>)
 8001fd8:	f008 fcac 	bl	800a934 <HAL_UART_Init>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d001      	beq.n	8001fe6 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001fe2:	f001 faab 	bl	800353c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001fe6:	bf00      	nop
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	200008c0 	.word	0x200008c0
 8001ff0:	40011400 	.word	0x40011400

08001ff4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b082      	sub	sp, #8
 8001ff8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	607b      	str	r3, [r7, #4]
 8001ffe:	4b0c      	ldr	r3, [pc, #48]	; (8002030 <MX_DMA_Init+0x3c>)
 8002000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002002:	4a0b      	ldr	r2, [pc, #44]	; (8002030 <MX_DMA_Init+0x3c>)
 8002004:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002008:	6313      	str	r3, [r2, #48]	; 0x30
 800200a:	4b09      	ldr	r3, [pc, #36]	; (8002030 <MX_DMA_Init+0x3c>)
 800200c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800200e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002012:	607b      	str	r3, [r7, #4]
 8002014:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8002016:	2200      	movs	r2, #0
 8002018:	2105      	movs	r1, #5
 800201a:	203a      	movs	r0, #58	; 0x3a
 800201c:	f004 fa67 	bl	80064ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8002020:	203a      	movs	r0, #58	; 0x3a
 8002022:	f004 fa80 	bl	8006526 <HAL_NVIC_EnableIRQ>

}
 8002026:	bf00      	nop
 8002028:	3708      	adds	r7, #8
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	40023800 	.word	0x40023800

08002034 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b08a      	sub	sp, #40	; 0x28
 8002038:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800203a:	f107 0314 	add.w	r3, r7, #20
 800203e:	2200      	movs	r2, #0
 8002040:	601a      	str	r2, [r3, #0]
 8002042:	605a      	str	r2, [r3, #4]
 8002044:	609a      	str	r2, [r3, #8]
 8002046:	60da      	str	r2, [r3, #12]
 8002048:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800204a:	2300      	movs	r3, #0
 800204c:	613b      	str	r3, [r7, #16]
 800204e:	4b6d      	ldr	r3, [pc, #436]	; (8002204 <MX_GPIO_Init+0x1d0>)
 8002050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002052:	4a6c      	ldr	r2, [pc, #432]	; (8002204 <MX_GPIO_Init+0x1d0>)
 8002054:	f043 0304 	orr.w	r3, r3, #4
 8002058:	6313      	str	r3, [r2, #48]	; 0x30
 800205a:	4b6a      	ldr	r3, [pc, #424]	; (8002204 <MX_GPIO_Init+0x1d0>)
 800205c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800205e:	f003 0304 	and.w	r3, r3, #4
 8002062:	613b      	str	r3, [r7, #16]
 8002064:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002066:	2300      	movs	r3, #0
 8002068:	60fb      	str	r3, [r7, #12]
 800206a:	4b66      	ldr	r3, [pc, #408]	; (8002204 <MX_GPIO_Init+0x1d0>)
 800206c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800206e:	4a65      	ldr	r2, [pc, #404]	; (8002204 <MX_GPIO_Init+0x1d0>)
 8002070:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002074:	6313      	str	r3, [r2, #48]	; 0x30
 8002076:	4b63      	ldr	r3, [pc, #396]	; (8002204 <MX_GPIO_Init+0x1d0>)
 8002078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800207a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800207e:	60fb      	str	r3, [r7, #12]
 8002080:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002082:	2300      	movs	r3, #0
 8002084:	60bb      	str	r3, [r7, #8]
 8002086:	4b5f      	ldr	r3, [pc, #380]	; (8002204 <MX_GPIO_Init+0x1d0>)
 8002088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800208a:	4a5e      	ldr	r2, [pc, #376]	; (8002204 <MX_GPIO_Init+0x1d0>)
 800208c:	f043 0301 	orr.w	r3, r3, #1
 8002090:	6313      	str	r3, [r2, #48]	; 0x30
 8002092:	4b5c      	ldr	r3, [pc, #368]	; (8002204 <MX_GPIO_Init+0x1d0>)
 8002094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002096:	f003 0301 	and.w	r3, r3, #1
 800209a:	60bb      	str	r3, [r7, #8]
 800209c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800209e:	2300      	movs	r3, #0
 80020a0:	607b      	str	r3, [r7, #4]
 80020a2:	4b58      	ldr	r3, [pc, #352]	; (8002204 <MX_GPIO_Init+0x1d0>)
 80020a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a6:	4a57      	ldr	r2, [pc, #348]	; (8002204 <MX_GPIO_Init+0x1d0>)
 80020a8:	f043 0302 	orr.w	r3, r3, #2
 80020ac:	6313      	str	r3, [r2, #48]	; 0x30
 80020ae:	4b55      	ldr	r3, [pc, #340]	; (8002204 <MX_GPIO_Init+0x1d0>)
 80020b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b2:	f003 0302 	and.w	r3, r3, #2
 80020b6:	607b      	str	r3, [r7, #4]
 80020b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80020ba:	2300      	movs	r3, #0
 80020bc:	603b      	str	r3, [r7, #0]
 80020be:	4b51      	ldr	r3, [pc, #324]	; (8002204 <MX_GPIO_Init+0x1d0>)
 80020c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c2:	4a50      	ldr	r2, [pc, #320]	; (8002204 <MX_GPIO_Init+0x1d0>)
 80020c4:	f043 0308 	orr.w	r3, r3, #8
 80020c8:	6313      	str	r3, [r2, #48]	; 0x30
 80020ca:	4b4e      	ldr	r3, [pc, #312]	; (8002204 <MX_GPIO_Init+0x1d0>)
 80020cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ce:	f003 0308 	and.w	r3, r3, #8
 80020d2:	603b      	str	r3, [r7, #0]
 80020d4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TRIG_Pin|GNSS_RST_Pin, GPIO_PIN_RESET);
 80020d6:	2200      	movs	r2, #0
 80020d8:	f248 0102 	movw	r1, #32770	; 0x8002
 80020dc:	484a      	ldr	r0, [pc, #296]	; (8002208 <MX_GPIO_Init+0x1d4>)
 80020de:	f004 ffdb 	bl	8007098 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CS_GYRO_Pin|GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 80020e2:	2200      	movs	r2, #0
 80020e4:	f241 0118 	movw	r1, #4120	; 0x1018
 80020e8:	4848      	ldr	r0, [pc, #288]	; (800220c <MX_GPIO_Init+0x1d8>)
 80020ea:	f004 ffd5 	bl	8007098 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_ACC_GPIO_Port, CS_ACC_Pin, GPIO_PIN_RESET);
 80020ee:	2200      	movs	r2, #0
 80020f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80020f4:	4846      	ldr	r0, [pc, #280]	; (8002210 <MX_GPIO_Init+0x1dc>)
 80020f6:	f004 ffcf 	bl	8007098 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 80020fa:	2200      	movs	r2, #0
 80020fc:	2104      	movs	r1, #4
 80020fe:	4845      	ldr	r0, [pc, #276]	; (8002214 <MX_GPIO_Init+0x1e0>)
 8002100:	f004 ffca 	bl	8007098 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : IT_MAGN_Pin BUTTON_Pin */
  GPIO_InitStruct.Pin = IT_MAGN_Pin|BUTTON_Pin;
 8002104:	f242 0301 	movw	r3, #8193	; 0x2001
 8002108:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800210a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800210e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002110:	2300      	movs	r3, #0
 8002112:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002114:	f107 0314 	add.w	r3, r7, #20
 8002118:	4619      	mov	r1, r3
 800211a:	483d      	ldr	r0, [pc, #244]	; (8002210 <MX_GPIO_Init+0x1dc>)
 800211c:	f004 fe20 	bl	8006d60 <HAL_GPIO_Init>

  /*Configure GPIO pins : TRIG_Pin GNSS_RST_Pin */
  GPIO_InitStruct.Pin = TRIG_Pin|GNSS_RST_Pin;
 8002120:	f248 0302 	movw	r3, #32770	; 0x8002
 8002124:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002126:	2301      	movs	r3, #1
 8002128:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800212a:	2300      	movs	r3, #0
 800212c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800212e:	2300      	movs	r3, #0
 8002130:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002132:	f107 0314 	add.w	r3, r7, #20
 8002136:	4619      	mov	r1, r3
 8002138:	4833      	ldr	r0, [pc, #204]	; (8002208 <MX_GPIO_Init+0x1d4>)
 800213a:	f004 fe11 	bl	8006d60 <HAL_GPIO_Init>

  /*Configure GPIO pin : IT_PRESS_Pin */
  GPIO_InitStruct.Pin = IT_PRESS_Pin;
 800213e:	2304      	movs	r3, #4
 8002140:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002142:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002146:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002148:	2300      	movs	r3, #0
 800214a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IT_PRESS_GPIO_Port, &GPIO_InitStruct);
 800214c:	f107 0314 	add.w	r3, r7, #20
 8002150:	4619      	mov	r1, r3
 8002152:	482e      	ldr	r0, [pc, #184]	; (800220c <MX_GPIO_Init+0x1d8>)
 8002154:	f004 fe04 	bl	8006d60 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_GYRO_Pin PB3 PB4 */
  GPIO_InitStruct.Pin = CS_GYRO_Pin|GPIO_PIN_3|GPIO_PIN_4;
 8002158:	f241 0318 	movw	r3, #4120	; 0x1018
 800215c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800215e:	2301      	movs	r3, #1
 8002160:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002162:	2300      	movs	r3, #0
 8002164:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002166:	2300      	movs	r3, #0
 8002168:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800216a:	f107 0314 	add.w	r3, r7, #20
 800216e:	4619      	mov	r1, r3
 8002170:	4826      	ldr	r0, [pc, #152]	; (800220c <MX_GPIO_Init+0x1d8>)
 8002172:	f004 fdf5 	bl	8006d60 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_ACC_Pin */
  GPIO_InitStruct.Pin = CS_ACC_Pin;
 8002176:	f44f 7380 	mov.w	r3, #256	; 0x100
 800217a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800217c:	2301      	movs	r3, #1
 800217e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002180:	2300      	movs	r3, #0
 8002182:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002184:	2300      	movs	r3, #0
 8002186:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CS_ACC_GPIO_Port, &GPIO_InitStruct);
 8002188:	f107 0314 	add.w	r3, r7, #20
 800218c:	4619      	mov	r1, r3
 800218e:	4820      	ldr	r0, [pc, #128]	; (8002210 <MX_GPIO_Init+0x1dc>)
 8002190:	f004 fde6 	bl	8006d60 <HAL_GPIO_Init>

  /*Configure GPIO pins : IT_GYRO_Pin IT_ACC_Pin */
  GPIO_InitStruct.Pin = IT_GYRO_Pin|IT_ACC_Pin;
 8002194:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002198:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800219a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800219e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a0:	2300      	movs	r3, #0
 80021a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021a4:	f107 0314 	add.w	r3, r7, #20
 80021a8:	4619      	mov	r1, r3
 80021aa:	4817      	ldr	r0, [pc, #92]	; (8002208 <MX_GPIO_Init+0x1d4>)
 80021ac:	f004 fdd8 	bl	8006d60 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80021b0:	2304      	movs	r3, #4
 80021b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021b4:	2301      	movs	r3, #1
 80021b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b8:	2300      	movs	r3, #0
 80021ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021bc:	2300      	movs	r3, #0
 80021be:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80021c0:	f107 0314 	add.w	r3, r7, #20
 80021c4:	4619      	mov	r1, r3
 80021c6:	4813      	ldr	r0, [pc, #76]	; (8002214 <MX_GPIO_Init+0x1e0>)
 80021c8:	f004 fdca 	bl	8006d60 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 80021cc:	2200      	movs	r2, #0
 80021ce:	2105      	movs	r1, #5
 80021d0:	2006      	movs	r0, #6
 80021d2:	f004 f98c 	bl	80064ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80021d6:	2006      	movs	r0, #6
 80021d8:	f004 f9a5 	bl	8006526 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 80021dc:	2200      	movs	r2, #0
 80021de:	2105      	movs	r1, #5
 80021e0:	2008      	movs	r0, #8
 80021e2:	f004 f984 	bl	80064ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80021e6:	2008      	movs	r0, #8
 80021e8:	f004 f99d 	bl	8006526 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80021ec:	2200      	movs	r2, #0
 80021ee:	2105      	movs	r1, #5
 80021f0:	2028      	movs	r0, #40	; 0x28
 80021f2:	f004 f97c 	bl	80064ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80021f6:	2028      	movs	r0, #40	; 0x28
 80021f8:	f004 f995 	bl	8006526 <HAL_NVIC_EnableIRQ>

}
 80021fc:	bf00      	nop
 80021fe:	3728      	adds	r7, #40	; 0x28
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}
 8002204:	40023800 	.word	0x40023800
 8002208:	40020000 	.word	0x40020000
 800220c:	40020400 	.word	0x40020400
 8002210:	40020800 	.word	0x40020800
 8002214:	40020c00 	.word	0x40020c00

08002218 <HAL_GPIO_EXTI_Callback>:

    return reversed;
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002218:	b480      	push	{r7}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0
 800221e:	4603      	mov	r3, r0
 8002220:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == BUTTON_Pin) {
 8002222:	88fb      	ldrh	r3, [r7, #6]
 8002224:	2b01      	cmp	r3, #1
 8002226:	d11c      	bne.n	8002262 <HAL_GPIO_EXTI_Callback+0x4a>
		if(state == 4){state = 5;}
 8002228:	4b1a      	ldr	r3, [pc, #104]	; (8002294 <HAL_GPIO_EXTI_Callback+0x7c>)
 800222a:	781b      	ldrb	r3, [r3, #0]
 800222c:	2b04      	cmp	r3, #4
 800222e:	d102      	bne.n	8002236 <HAL_GPIO_EXTI_Callback+0x1e>
 8002230:	4b18      	ldr	r3, [pc, #96]	; (8002294 <HAL_GPIO_EXTI_Callback+0x7c>)
 8002232:	2205      	movs	r2, #5
 8002234:	701a      	strb	r2, [r3, #0]
		if(state == 3){state = 4;}
 8002236:	4b17      	ldr	r3, [pc, #92]	; (8002294 <HAL_GPIO_EXTI_Callback+0x7c>)
 8002238:	781b      	ldrb	r3, [r3, #0]
 800223a:	2b03      	cmp	r3, #3
 800223c:	d102      	bne.n	8002244 <HAL_GPIO_EXTI_Callback+0x2c>
 800223e:	4b15      	ldr	r3, [pc, #84]	; (8002294 <HAL_GPIO_EXTI_Callback+0x7c>)
 8002240:	2204      	movs	r2, #4
 8002242:	701a      	strb	r2, [r3, #0]
		if(state == 2){state = 3;}
 8002244:	4b13      	ldr	r3, [pc, #76]	; (8002294 <HAL_GPIO_EXTI_Callback+0x7c>)
 8002246:	781b      	ldrb	r3, [r3, #0]
 8002248:	2b02      	cmp	r3, #2
 800224a:	d102      	bne.n	8002252 <HAL_GPIO_EXTI_Callback+0x3a>
 800224c:	4b11      	ldr	r3, [pc, #68]	; (8002294 <HAL_GPIO_EXTI_Callback+0x7c>)
 800224e:	2203      	movs	r2, #3
 8002250:	701a      	strb	r2, [r3, #0]
		if(state == 1){state = 2;}
 8002252:	4b10      	ldr	r3, [pc, #64]	; (8002294 <HAL_GPIO_EXTI_Callback+0x7c>)
 8002254:	781b      	ldrb	r3, [r3, #0]
 8002256:	2b01      	cmp	r3, #1
 8002258:	d104      	bne.n	8002264 <HAL_GPIO_EXTI_Callback+0x4c>
 800225a:	4b0e      	ldr	r3, [pc, #56]	; (8002294 <HAL_GPIO_EXTI_Callback+0x7c>)
 800225c:	2202      	movs	r2, #2
 800225e:	701a      	strb	r2, [r3, #0]
 8002260:	e000      	b.n	8002264 <HAL_GPIO_EXTI_Callback+0x4c>
	  } else {
	      __NOP();
 8002262:	bf00      	nop
	  }

	if(GPIO_Pin == IT_ACC_Pin) {
 8002264:	88fb      	ldrh	r3, [r7, #6]
 8002266:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800226a:	d103      	bne.n	8002274 <HAL_GPIO_EXTI_Callback+0x5c>

	 readstart = 1;
 800226c:	4b0a      	ldr	r3, [pc, #40]	; (8002298 <HAL_GPIO_EXTI_Callback+0x80>)
 800226e:	2201      	movs	r2, #1
 8002270:	701a      	strb	r2, [r3, #0]
 8002272:	e000      	b.n	8002276 <HAL_GPIO_EXTI_Callback+0x5e>
  } else {
      __NOP();
 8002274:	bf00      	nop
  }
  if(GPIO_Pin == IT_MAGN_Pin) {
 8002276:	88fb      	ldrh	r3, [r7, #6]
 8002278:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800227c:	d103      	bne.n	8002286 <HAL_GPIO_EXTI_Callback+0x6e>
  	 //HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);

  	 billent = 1;
 800227e:	4b07      	ldr	r3, [pc, #28]	; (800229c <HAL_GPIO_EXTI_Callback+0x84>)
 8002280:	2201      	movs	r2, #1
 8002282:	701a      	strb	r2, [r3, #0]
    } else {
        __NOP();
    }
}
 8002284:	e000      	b.n	8002288 <HAL_GPIO_EXTI_Callback+0x70>
        __NOP();
 8002286:	bf00      	nop
}
 8002288:	bf00      	nop
 800228a:	370c      	adds	r7, #12
 800228c:	46bd      	mov	sp, r7
 800228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002292:	4770      	bx	lr
 8002294:	20000009 	.word	0x20000009
 8002298:	20000008 	.word	0x20000008
 800229c:	20000a2c 	.word	0x20000a2c

080022a0 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b082      	sub	sp, #8
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
	if (htim == &htim2 )
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	4a47      	ldr	r2, [pc, #284]	; (80023c8 <HAL_TIM_IC_CaptureCallback+0x128>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	f040 8083 	bne.w	80023b8 <HAL_TIM_IC_CaptureCallback+0x118>
	  {
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);
 80022b2:	2110      	movs	r1, #16
 80022b4:	4845      	ldr	r0, [pc, #276]	; (80023cc <HAL_TIM_IC_CaptureCallback+0x12c>)
 80022b6:	f004 ff08 	bl	80070ca <HAL_GPIO_TogglePin>
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // if the interrupt source is channel1
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	7f1b      	ldrb	r3, [r3, #28]
 80022be:	2b01      	cmp	r3, #1
 80022c0:	d17a      	bne.n	80023b8 <HAL_TIM_IC_CaptureCallback+0x118>
		{
			if (Is_First_Captured==0) // if the first value is not captured
 80022c2:	4b43      	ldr	r3, [pc, #268]	; (80023d0 <HAL_TIM_IC_CaptureCallback+0x130>)
 80022c4:	781b      	ldrb	r3, [r3, #0]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d11a      	bne.n	8002300 <HAL_TIM_IC_CaptureCallback+0x60>
			{
				IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 80022ca:	2100      	movs	r1, #0
 80022cc:	6878      	ldr	r0, [r7, #4]
 80022ce:	f007 fd73 	bl	8009db8 <HAL_TIM_ReadCapturedValue>
 80022d2:	4603      	mov	r3, r0
 80022d4:	4a3f      	ldr	r2, [pc, #252]	; (80023d4 <HAL_TIM_IC_CaptureCallback+0x134>)
 80022d6:	6013      	str	r3, [r2, #0]
				Is_First_Captured = 1;  // set the first captured as true
 80022d8:	4b3d      	ldr	r3, [pc, #244]	; (80023d0 <HAL_TIM_IC_CaptureCallback+0x130>)
 80022da:	2201      	movs	r2, #1
 80022dc:	701a      	strb	r2, [r3, #0]
				// Now change the polarity to falling edge
				__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	6a1a      	ldr	r2, [r3, #32]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f022 020a 	bic.w	r2, r2, #10
 80022ec:	621a      	str	r2, [r3, #32]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	6a1a      	ldr	r2, [r3, #32]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f042 0202 	orr.w	r2, r2, #2
 80022fc:	621a      	str	r2, [r3, #32]
				__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
				//__HAL_TIM_DISABLE_IT(&htim2, TIM_IT_CC1);
			}
		}
	  }
}
 80022fe:	e05b      	b.n	80023b8 <HAL_TIM_IC_CaptureCallback+0x118>
			else if (Is_First_Captured==1)   // if the first is already captured
 8002300:	4b33      	ldr	r3, [pc, #204]	; (80023d0 <HAL_TIM_IC_CaptureCallback+0x130>)
 8002302:	781b      	ldrb	r3, [r3, #0]
 8002304:	2b01      	cmp	r3, #1
 8002306:	d157      	bne.n	80023b8 <HAL_TIM_IC_CaptureCallback+0x118>
				IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
 8002308:	2100      	movs	r1, #0
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	f007 fd54 	bl	8009db8 <HAL_TIM_ReadCapturedValue>
 8002310:	4603      	mov	r3, r0
 8002312:	4a31      	ldr	r2, [pc, #196]	; (80023d8 <HAL_TIM_IC_CaptureCallback+0x138>)
 8002314:	6013      	str	r3, [r2, #0]
				__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	2200      	movs	r2, #0
 800231c:	625a      	str	r2, [r3, #36]	; 0x24
				if (IC_Val2 > IC_Val1)
 800231e:	4b2e      	ldr	r3, [pc, #184]	; (80023d8 <HAL_TIM_IC_CaptureCallback+0x138>)
 8002320:	681a      	ldr	r2, [r3, #0]
 8002322:	4b2c      	ldr	r3, [pc, #176]	; (80023d4 <HAL_TIM_IC_CaptureCallback+0x134>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	429a      	cmp	r2, r3
 8002328:	d907      	bls.n	800233a <HAL_TIM_IC_CaptureCallback+0x9a>
					Difference = IC_Val2-IC_Val1;
 800232a:	4b2b      	ldr	r3, [pc, #172]	; (80023d8 <HAL_TIM_IC_CaptureCallback+0x138>)
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	4b29      	ldr	r3, [pc, #164]	; (80023d4 <HAL_TIM_IC_CaptureCallback+0x134>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	1ad3      	subs	r3, r2, r3
 8002334:	4a29      	ldr	r2, [pc, #164]	; (80023dc <HAL_TIM_IC_CaptureCallback+0x13c>)
 8002336:	6013      	str	r3, [r2, #0]
 8002338:	e00f      	b.n	800235a <HAL_TIM_IC_CaptureCallback+0xba>
				else if (IC_Val1 > IC_Val2)
 800233a:	4b26      	ldr	r3, [pc, #152]	; (80023d4 <HAL_TIM_IC_CaptureCallback+0x134>)
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	4b26      	ldr	r3, [pc, #152]	; (80023d8 <HAL_TIM_IC_CaptureCallback+0x138>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	429a      	cmp	r2, r3
 8002344:	d909      	bls.n	800235a <HAL_TIM_IC_CaptureCallback+0xba>
					Difference = (0xffff - IC_Val1) + IC_Val2;
 8002346:	4b24      	ldr	r3, [pc, #144]	; (80023d8 <HAL_TIM_IC_CaptureCallback+0x138>)
 8002348:	681a      	ldr	r2, [r3, #0]
 800234a:	4b22      	ldr	r3, [pc, #136]	; (80023d4 <HAL_TIM_IC_CaptureCallback+0x134>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	1ad3      	subs	r3, r2, r3
 8002350:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8002354:	33ff      	adds	r3, #255	; 0xff
 8002356:	4a21      	ldr	r2, [pc, #132]	; (80023dc <HAL_TIM_IC_CaptureCallback+0x13c>)
 8002358:	6013      	str	r3, [r2, #0]
				Distance = Difference * .34/2;
 800235a:	4b20      	ldr	r3, [pc, #128]	; (80023dc <HAL_TIM_IC_CaptureCallback+0x13c>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4618      	mov	r0, r3
 8002360:	f7fe f8d0 	bl	8000504 <__aeabi_ui2d>
 8002364:	a316      	add	r3, pc, #88	; (adr r3, 80023c0 <HAL_TIM_IC_CaptureCallback+0x120>)
 8002366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800236a:	f7fe f945 	bl	80005f8 <__aeabi_dmul>
 800236e:	4602      	mov	r2, r0
 8002370:	460b      	mov	r3, r1
 8002372:	4610      	mov	r0, r2
 8002374:	4619      	mov	r1, r3
 8002376:	f04f 0200 	mov.w	r2, #0
 800237a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800237e:	f7fe fa65 	bl	800084c <__aeabi_ddiv>
 8002382:	4602      	mov	r2, r0
 8002384:	460b      	mov	r3, r1
 8002386:	4610      	mov	r0, r2
 8002388:	4619      	mov	r1, r3
 800238a:	f7fe fc0d 	bl	8000ba8 <__aeabi_d2uiz>
 800238e:	4603      	mov	r3, r0
 8002390:	b2da      	uxtb	r2, r3
 8002392:	4b13      	ldr	r3, [pc, #76]	; (80023e0 <HAL_TIM_IC_CaptureCallback+0x140>)
 8002394:	701a      	strb	r2, [r3, #0]
				Is_First_Captured = 0; // set it back to false
 8002396:	4b0e      	ldr	r3, [pc, #56]	; (80023d0 <HAL_TIM_IC_CaptureCallback+0x130>)
 8002398:	2200      	movs	r2, #0
 800239a:	701a      	strb	r2, [r3, #0]
				__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	6a1a      	ldr	r2, [r3, #32]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f022 020a 	bic.w	r2, r2, #10
 80023aa:	621a      	str	r2, [r3, #32]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	6a12      	ldr	r2, [r2, #32]
 80023b6:	621a      	str	r2, [r3, #32]
}
 80023b8:	bf00      	nop
 80023ba:	3708      	adds	r7, #8
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}
 80023c0:	5c28f5c3 	.word	0x5c28f5c3
 80023c4:	3fd5c28f 	.word	0x3fd5c28f
 80023c8:	2000068c 	.word	0x2000068c
 80023cc:	40020400 	.word	0x40020400
 80023d0:	20000b2c 	.word	0x20000b2c
 80023d4:	20000b20 	.word	0x20000b20
 80023d8:	20000b24 	.word	0x20000b24
 80023dc:	20000b28 	.word	0x20000b28
 80023e0:	20000b2d 	.word	0x20000b2d

080023e4 <HAL_TIM_PeriodElapsedCallback>:

// Callback: timer has rolled over
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b083      	sub	sp, #12
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  // Check which version of the timer triggered this callback and toggle LED
  if (htim == &htim6 )
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	4a0b      	ldr	r2, [pc, #44]	; (800241c <HAL_TIM_PeriodElapsedCallback+0x38>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d10d      	bne.n	8002410 <HAL_TIM_PeriodElapsedCallback+0x2c>
  {
	  if(timerse == 1){timerse =0;}
 80023f4:	4b0a      	ldr	r3, [pc, #40]	; (8002420 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80023f6:	781b      	ldrb	r3, [r3, #0]
 80023f8:	2b01      	cmp	r3, #1
 80023fa:	d102      	bne.n	8002402 <HAL_TIM_PeriodElapsedCallback+0x1e>
 80023fc:	4b08      	ldr	r3, [pc, #32]	; (8002420 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80023fe:	2200      	movs	r2, #0
 8002400:	701a      	strb	r2, [r3, #0]
	  if(timerse == 0){timerse =1;}
 8002402:	4b07      	ldr	r3, [pc, #28]	; (8002420 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8002404:	781b      	ldrb	r3, [r3, #0]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d102      	bne.n	8002410 <HAL_TIM_PeriodElapsedCallback+0x2c>
 800240a:	4b05      	ldr	r3, [pc, #20]	; (8002420 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800240c:	2201      	movs	r2, #1
 800240e:	701a      	strb	r2, [r3, #0]
  }
  if(htim == &htim7){

  }
}
 8002410:	bf00      	nop
 8002412:	370c      	adds	r7, #12
 8002414:	46bd      	mov	sp, r7
 8002416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241a:	4770      	bx	lr
 800241c:	20000764 	.word	0x20000764
 8002420:	20000b40 	.word	0x20000b40

08002424 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b082      	sub	sp, #8
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
	if(huart ==&huart1){
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	4a4b      	ldr	r2, [pc, #300]	; (800255c <HAL_UART_RxCpltCallback+0x138>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d17b      	bne.n	800252c <HAL_UART_RxCpltCallback+0x108>
		debug_i = __HAL_TIM_GET_COUNTER(&htim6);
 8002434:	4b4a      	ldr	r3, [pc, #296]	; (8002560 <HAL_UART_RxCpltCallback+0x13c>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800243a:	461a      	mov	r2, r3
 800243c:	4b49      	ldr	r3, [pc, #292]	; (8002564 <HAL_UART_RxCpltCallback+0x140>)
 800243e:	601a      	str	r2, [r3, #0]
		if(debug_i < 100){
 8002440:	4b48      	ldr	r3, [pc, #288]	; (8002564 <HAL_UART_RxCpltCallback+0x140>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	2b63      	cmp	r3, #99	; 0x63
 8002446:	dc0d      	bgt.n	8002464 <HAL_UART_RxCpltCallback+0x40>
			CRSF_debug[CRSF_i] = UART1_rxBuffer[0];
 8002448:	4b47      	ldr	r3, [pc, #284]	; (8002568 <HAL_UART_RxCpltCallback+0x144>)
 800244a:	781b      	ldrb	r3, [r3, #0]
 800244c:	461a      	mov	r2, r3
 800244e:	4b47      	ldr	r3, [pc, #284]	; (800256c <HAL_UART_RxCpltCallback+0x148>)
 8002450:	7819      	ldrb	r1, [r3, #0]
 8002452:	4b47      	ldr	r3, [pc, #284]	; (8002570 <HAL_UART_RxCpltCallback+0x14c>)
 8002454:	5499      	strb	r1, [r3, r2]
			CRSF_i++;
 8002456:	4b44      	ldr	r3, [pc, #272]	; (8002568 <HAL_UART_RxCpltCallback+0x144>)
 8002458:	781b      	ldrb	r3, [r3, #0]
 800245a:	3301      	adds	r3, #1
 800245c:	b2da      	uxtb	r2, r3
 800245e:	4b42      	ldr	r3, [pc, #264]	; (8002568 <HAL_UART_RxCpltCallback+0x144>)
 8002460:	701a      	strb	r2, [r3, #0]
 8002462:	e05f      	b.n	8002524 <HAL_UART_RxCpltCallback+0x100>
		}
		else{
			if(CRSF_debug[2] == 0x16){
 8002464:	4b42      	ldr	r3, [pc, #264]	; (8002570 <HAL_UART_RxCpltCallback+0x14c>)
 8002466:	789b      	ldrb	r3, [r3, #2]
 8002468:	2b16      	cmp	r3, #22
 800246a:	d154      	bne.n	8002516 <HAL_UART_RxCpltCallback+0xf2>
				RX_roll = (((uint16_t)(CRSF_debug[4] & 0b00000111)) << 8) + (uint16_t)(CRSF_debug[3]);
 800246c:	4b40      	ldr	r3, [pc, #256]	; (8002570 <HAL_UART_RxCpltCallback+0x14c>)
 800246e:	791b      	ldrb	r3, [r3, #4]
 8002470:	021b      	lsls	r3, r3, #8
 8002472:	b29b      	uxth	r3, r3
 8002474:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002478:	b29a      	uxth	r2, r3
 800247a:	4b3d      	ldr	r3, [pc, #244]	; (8002570 <HAL_UART_RxCpltCallback+0x14c>)
 800247c:	78db      	ldrb	r3, [r3, #3]
 800247e:	b29b      	uxth	r3, r3
 8002480:	4413      	add	r3, r2
 8002482:	b29a      	uxth	r2, r3
 8002484:	4b3b      	ldr	r3, [pc, #236]	; (8002574 <HAL_UART_RxCpltCallback+0x150>)
 8002486:	801a      	strh	r2, [r3, #0]
				RX_pitch = (((uint16_t)(CRSF_debug[5] & 0b00111111)) << 5) + (((uint16_t)(CRSF_debug[4] & 0b11111000)) >> 3);
 8002488:	4b39      	ldr	r3, [pc, #228]	; (8002570 <HAL_UART_RxCpltCallback+0x14c>)
 800248a:	795b      	ldrb	r3, [r3, #5]
 800248c:	015b      	lsls	r3, r3, #5
 800248e:	b29b      	uxth	r3, r3
 8002490:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8002494:	b29a      	uxth	r2, r3
 8002496:	4b36      	ldr	r3, [pc, #216]	; (8002570 <HAL_UART_RxCpltCallback+0x14c>)
 8002498:	791b      	ldrb	r3, [r3, #4]
 800249a:	08db      	lsrs	r3, r3, #3
 800249c:	b2db      	uxtb	r3, r3
 800249e:	b29b      	uxth	r3, r3
 80024a0:	4413      	add	r3, r2
 80024a2:	b29a      	uxth	r2, r3
 80024a4:	4b34      	ldr	r3, [pc, #208]	; (8002578 <HAL_UART_RxCpltCallback+0x154>)
 80024a6:	801a      	strh	r2, [r3, #0]
				RX_throttle = (((uint16_t)(CRSF_debug[7] & 0b00000001)) << 10)+ (((uint16_t)(CRSF_debug[6])) << 2) + (((uint16_t)(CRSF_debug[5] & 0b11000000)) >> 6);
 80024a8:	4b31      	ldr	r3, [pc, #196]	; (8002570 <HAL_UART_RxCpltCallback+0x14c>)
 80024aa:	79db      	ldrb	r3, [r3, #7]
 80024ac:	029b      	lsls	r3, r3, #10
 80024ae:	b29b      	uxth	r3, r3
 80024b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024b4:	b29a      	uxth	r2, r3
 80024b6:	4b2e      	ldr	r3, [pc, #184]	; (8002570 <HAL_UART_RxCpltCallback+0x14c>)
 80024b8:	799b      	ldrb	r3, [r3, #6]
 80024ba:	b29b      	uxth	r3, r3
 80024bc:	009b      	lsls	r3, r3, #2
 80024be:	b29b      	uxth	r3, r3
 80024c0:	4413      	add	r3, r2
 80024c2:	b29a      	uxth	r2, r3
 80024c4:	4b2a      	ldr	r3, [pc, #168]	; (8002570 <HAL_UART_RxCpltCallback+0x14c>)
 80024c6:	795b      	ldrb	r3, [r3, #5]
 80024c8:	099b      	lsrs	r3, r3, #6
 80024ca:	b2db      	uxtb	r3, r3
 80024cc:	b29b      	uxth	r3, r3
 80024ce:	4413      	add	r3, r2
 80024d0:	b29a      	uxth	r2, r3
 80024d2:	4b2a      	ldr	r3, [pc, #168]	; (800257c <HAL_UART_RxCpltCallback+0x158>)
 80024d4:	801a      	strh	r2, [r3, #0]
				RX_yaw = (((uint16_t)(CRSF_debug[8] & 0b00001111)) << 7) + (((uint16_t)(CRSF_debug[7] & 0b11111110)) >> 1);
 80024d6:	4b26      	ldr	r3, [pc, #152]	; (8002570 <HAL_UART_RxCpltCallback+0x14c>)
 80024d8:	7a1b      	ldrb	r3, [r3, #8]
 80024da:	01db      	lsls	r3, r3, #7
 80024dc:	b29b      	uxth	r3, r3
 80024de:	f403 63f0 	and.w	r3, r3, #1920	; 0x780
 80024e2:	b29a      	uxth	r2, r3
 80024e4:	4b22      	ldr	r3, [pc, #136]	; (8002570 <HAL_UART_RxCpltCallback+0x14c>)
 80024e6:	79db      	ldrb	r3, [r3, #7]
 80024e8:	085b      	lsrs	r3, r3, #1
 80024ea:	b2db      	uxtb	r3, r3
 80024ec:	b29b      	uxth	r3, r3
 80024ee:	4413      	add	r3, r2
 80024f0:	b29a      	uxth	r2, r3
 80024f2:	4b23      	ldr	r3, [pc, #140]	; (8002580 <HAL_UART_RxCpltCallback+0x15c>)
 80024f4:	801a      	strh	r2, [r3, #0]
				RX_arm = (((uint16_t)(CRSF_debug[9] & 0b01111111)) << 4) + (((uint16_t)(CRSF_debug[8] & 0b11110000)) >> 4);
 80024f6:	4b1e      	ldr	r3, [pc, #120]	; (8002570 <HAL_UART_RxCpltCallback+0x14c>)
 80024f8:	7a5b      	ldrb	r3, [r3, #9]
 80024fa:	011b      	lsls	r3, r3, #4
 80024fc:	b29b      	uxth	r3, r3
 80024fe:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8002502:	b29a      	uxth	r2, r3
 8002504:	4b1a      	ldr	r3, [pc, #104]	; (8002570 <HAL_UART_RxCpltCallback+0x14c>)
 8002506:	7a1b      	ldrb	r3, [r3, #8]
 8002508:	091b      	lsrs	r3, r3, #4
 800250a:	b2db      	uxtb	r3, r3
 800250c:	b29b      	uxth	r3, r3
 800250e:	4413      	add	r3, r2
 8002510:	b29a      	uxth	r2, r3
 8002512:	4b1c      	ldr	r3, [pc, #112]	; (8002584 <HAL_UART_RxCpltCallback+0x160>)
 8002514:	801a      	strh	r2, [r3, #0]
			}
			CRSF_debug[0] = UART1_rxBuffer[0];
 8002516:	4b15      	ldr	r3, [pc, #84]	; (800256c <HAL_UART_RxCpltCallback+0x148>)
 8002518:	781a      	ldrb	r2, [r3, #0]
 800251a:	4b15      	ldr	r3, [pc, #84]	; (8002570 <HAL_UART_RxCpltCallback+0x14c>)
 800251c:	701a      	strb	r2, [r3, #0]
			CRSF_i = 1;
 800251e:	4b12      	ldr	r3, [pc, #72]	; (8002568 <HAL_UART_RxCpltCallback+0x144>)
 8002520:	2201      	movs	r2, #1
 8002522:	701a      	strb	r2, [r3, #0]
		}
		htim6.Instance->CNT = 0;
 8002524:	4b0e      	ldr	r3, [pc, #56]	; (8002560 <HAL_UART_RxCpltCallback+0x13c>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	2200      	movs	r2, #0
 800252a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	if(huart == &huart2){
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	4a16      	ldr	r2, [pc, #88]	; (8002588 <HAL_UART_RxCpltCallback+0x164>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d10e      	bne.n	8002552 <HAL_UART_RxCpltCallback+0x12e>
		if(uart_telemetria == 1){
 8002534:	4b15      	ldr	r3, [pc, #84]	; (800258c <HAL_UART_RxCpltCallback+0x168>)
 8002536:	781b      	ldrb	r3, [r3, #0]
 8002538:	2b01      	cmp	r3, #1
 800253a:	d105      	bne.n	8002548 <HAL_UART_RxCpltCallback+0x124>
			HAL_UART_Receive_IT(&huart2, telem, 11);
 800253c:	220b      	movs	r2, #11
 800253e:	4914      	ldr	r1, [pc, #80]	; (8002590 <HAL_UART_RxCpltCallback+0x16c>)
 8002540:	4811      	ldr	r0, [pc, #68]	; (8002588 <HAL_UART_RxCpltCallback+0x164>)
 8002542:	f008 fad6 	bl	800aaf2 <HAL_UART_Receive_IT>
		}
		else
			HAL_UART_Receive_IT(&huart2, telem, 11);
	}
}
 8002546:	e004      	b.n	8002552 <HAL_UART_RxCpltCallback+0x12e>
			HAL_UART_Receive_IT(&huart2, telem, 11);
 8002548:	220b      	movs	r2, #11
 800254a:	4911      	ldr	r1, [pc, #68]	; (8002590 <HAL_UART_RxCpltCallback+0x16c>)
 800254c:	480e      	ldr	r0, [pc, #56]	; (8002588 <HAL_UART_RxCpltCallback+0x164>)
 800254e:	f008 fad0 	bl	800aaf2 <HAL_UART_Receive_IT>
}
 8002552:	bf00      	nop
 8002554:	3708      	adds	r7, #8
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}
 800255a:	bf00      	nop
 800255c:	200007f4 	.word	0x200007f4
 8002560:	20000764 	.word	0x20000764
 8002564:	20000b3c 	.word	0x20000b3c
 8002568:	20002b04 	.word	0x20002b04
 800256c:	20002b08 	.word	0x20002b08
 8002570:	20002ac4 	.word	0x20002ac4
 8002574:	20002b0a 	.word	0x20002b0a
 8002578:	20002b0c 	.word	0x20002b0c
 800257c:	20002b10 	.word	0x20002b10
 8002580:	20002b0e 	.word	0x20002b0e
 8002584:	20002b12 	.word	0x20002b12
 8002588:	20000838 	.word	0x20000838
 800258c:	20000b2e 	.word	0x20000b2e
 8002590:	20000000 	.word	0x20000000

08002594 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b084      	sub	sp, #16
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]


  /* Infinite loop */
  for(;;)
  {
	  if(uart_telemetria == 1){
 800259c:	4b47      	ldr	r3, [pc, #284]	; (80026bc <StartDefaultTask+0x128>)
 800259e:	781b      	ldrb	r3, [r3, #0]
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	f040 8086 	bne.w	80026b2 <StartDefaultTask+0x11e>
		  if(telem[0] == 'P'){
 80025a6:	4b46      	ldr	r3, [pc, #280]	; (80026c0 <StartDefaultTask+0x12c>)
 80025a8:	781b      	ldrb	r3, [r3, #0]
 80025aa:	2b50      	cmp	r3, #80	; 0x50
 80025ac:	d13e      	bne.n	800262c <StartDefaultTask+0x98>
			  telem_P = (float)(((uint32_t)telem[1]-48)*1000000+((uint32_t)telem[2]-48)*100000+((uint32_t)telem[3]-48)*10000+((uint32_t)telem[4]-48)*1000+((uint32_t)telem[5]-48)*100+((uint32_t)telem[6]-48)*10+((uint32_t)telem[7]-48))/100000;
 80025ae:	4b44      	ldr	r3, [pc, #272]	; (80026c0 <StartDefaultTask+0x12c>)
 80025b0:	785b      	ldrb	r3, [r3, #1]
 80025b2:	461a      	mov	r2, r3
 80025b4:	4b43      	ldr	r3, [pc, #268]	; (80026c4 <StartDefaultTask+0x130>)
 80025b6:	fb03 f202 	mul.w	r2, r3, r2
 80025ba:	4b41      	ldr	r3, [pc, #260]	; (80026c0 <StartDefaultTask+0x12c>)
 80025bc:	789b      	ldrb	r3, [r3, #2]
 80025be:	4619      	mov	r1, r3
 80025c0:	4b41      	ldr	r3, [pc, #260]	; (80026c8 <StartDefaultTask+0x134>)
 80025c2:	fb01 f303 	mul.w	r3, r1, r3
 80025c6:	441a      	add	r2, r3
 80025c8:	4b3d      	ldr	r3, [pc, #244]	; (80026c0 <StartDefaultTask+0x12c>)
 80025ca:	78db      	ldrb	r3, [r3, #3]
 80025cc:	4619      	mov	r1, r3
 80025ce:	f242 7310 	movw	r3, #10000	; 0x2710
 80025d2:	fb01 f303 	mul.w	r3, r1, r3
 80025d6:	441a      	add	r2, r3
 80025d8:	4b39      	ldr	r3, [pc, #228]	; (80026c0 <StartDefaultTask+0x12c>)
 80025da:	791b      	ldrb	r3, [r3, #4]
 80025dc:	4619      	mov	r1, r3
 80025de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025e2:	fb01 f303 	mul.w	r3, r1, r3
 80025e6:	441a      	add	r2, r3
 80025e8:	4b35      	ldr	r3, [pc, #212]	; (80026c0 <StartDefaultTask+0x12c>)
 80025ea:	795b      	ldrb	r3, [r3, #5]
 80025ec:	4619      	mov	r1, r3
 80025ee:	2364      	movs	r3, #100	; 0x64
 80025f0:	fb01 f303 	mul.w	r3, r1, r3
 80025f4:	441a      	add	r2, r3
 80025f6:	4b32      	ldr	r3, [pc, #200]	; (80026c0 <StartDefaultTask+0x12c>)
 80025f8:	799b      	ldrb	r3, [r3, #6]
 80025fa:	4619      	mov	r1, r3
 80025fc:	460b      	mov	r3, r1
 80025fe:	009b      	lsls	r3, r3, #2
 8002600:	440b      	add	r3, r1
 8002602:	005b      	lsls	r3, r3, #1
 8002604:	4413      	add	r3, r2
 8002606:	4a2e      	ldr	r2, [pc, #184]	; (80026c0 <StartDefaultTask+0x12c>)
 8002608:	79d2      	ldrb	r2, [r2, #7]
 800260a:	441a      	add	r2, r3
 800260c:	4b2f      	ldr	r3, [pc, #188]	; (80026cc <StartDefaultTask+0x138>)
 800260e:	4413      	add	r3, r2
 8002610:	ee07 3a90 	vmov	s15, r3
 8002614:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002618:	eddf 6a2d 	vldr	s13, [pc, #180]	; 80026d0 <StartDefaultTask+0x13c>
 800261c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002620:	4b2c      	ldr	r3, [pc, #176]	; (80026d4 <StartDefaultTask+0x140>)
 8002622:	edc3 7a00 	vstr	s15, [r3]
			  new_P = 1;
 8002626:	4b2c      	ldr	r3, [pc, #176]	; (80026d8 <StartDefaultTask+0x144>)
 8002628:	2201      	movs	r2, #1
 800262a:	701a      	strb	r2, [r3, #0]
		  }
		  if(telem[0] == 'D'){
 800262c:	4b24      	ldr	r3, [pc, #144]	; (80026c0 <StartDefaultTask+0x12c>)
 800262e:	781b      	ldrb	r3, [r3, #0]
 8002630:	2b44      	cmp	r3, #68	; 0x44
 8002632:	d13e      	bne.n	80026b2 <StartDefaultTask+0x11e>
			  telem_D = (float)(((uint32_t)telem[1]-48)*1000000+((uint32_t)telem[2]-48)*100000+((uint32_t)telem[3]-48)*10000+((uint32_t)telem[4]-48)*1000+((uint32_t)telem[5]-48)*100+((uint32_t)telem[6]-48)*10+((uint32_t)telem[7]-48))/100000;
 8002634:	4b22      	ldr	r3, [pc, #136]	; (80026c0 <StartDefaultTask+0x12c>)
 8002636:	785b      	ldrb	r3, [r3, #1]
 8002638:	461a      	mov	r2, r3
 800263a:	4b22      	ldr	r3, [pc, #136]	; (80026c4 <StartDefaultTask+0x130>)
 800263c:	fb03 f202 	mul.w	r2, r3, r2
 8002640:	4b1f      	ldr	r3, [pc, #124]	; (80026c0 <StartDefaultTask+0x12c>)
 8002642:	789b      	ldrb	r3, [r3, #2]
 8002644:	4619      	mov	r1, r3
 8002646:	4b20      	ldr	r3, [pc, #128]	; (80026c8 <StartDefaultTask+0x134>)
 8002648:	fb01 f303 	mul.w	r3, r1, r3
 800264c:	441a      	add	r2, r3
 800264e:	4b1c      	ldr	r3, [pc, #112]	; (80026c0 <StartDefaultTask+0x12c>)
 8002650:	78db      	ldrb	r3, [r3, #3]
 8002652:	4619      	mov	r1, r3
 8002654:	f242 7310 	movw	r3, #10000	; 0x2710
 8002658:	fb01 f303 	mul.w	r3, r1, r3
 800265c:	441a      	add	r2, r3
 800265e:	4b18      	ldr	r3, [pc, #96]	; (80026c0 <StartDefaultTask+0x12c>)
 8002660:	791b      	ldrb	r3, [r3, #4]
 8002662:	4619      	mov	r1, r3
 8002664:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002668:	fb01 f303 	mul.w	r3, r1, r3
 800266c:	441a      	add	r2, r3
 800266e:	4b14      	ldr	r3, [pc, #80]	; (80026c0 <StartDefaultTask+0x12c>)
 8002670:	795b      	ldrb	r3, [r3, #5]
 8002672:	4619      	mov	r1, r3
 8002674:	2364      	movs	r3, #100	; 0x64
 8002676:	fb01 f303 	mul.w	r3, r1, r3
 800267a:	441a      	add	r2, r3
 800267c:	4b10      	ldr	r3, [pc, #64]	; (80026c0 <StartDefaultTask+0x12c>)
 800267e:	799b      	ldrb	r3, [r3, #6]
 8002680:	4619      	mov	r1, r3
 8002682:	460b      	mov	r3, r1
 8002684:	009b      	lsls	r3, r3, #2
 8002686:	440b      	add	r3, r1
 8002688:	005b      	lsls	r3, r3, #1
 800268a:	4413      	add	r3, r2
 800268c:	4a0c      	ldr	r2, [pc, #48]	; (80026c0 <StartDefaultTask+0x12c>)
 800268e:	79d2      	ldrb	r2, [r2, #7]
 8002690:	441a      	add	r2, r3
 8002692:	4b0e      	ldr	r3, [pc, #56]	; (80026cc <StartDefaultTask+0x138>)
 8002694:	4413      	add	r3, r2
 8002696:	ee07 3a90 	vmov	s15, r3
 800269a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800269e:	eddf 6a0c 	vldr	s13, [pc, #48]	; 80026d0 <StartDefaultTask+0x13c>
 80026a2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80026a6:	4b0d      	ldr	r3, [pc, #52]	; (80026dc <StartDefaultTask+0x148>)
 80026a8:	edc3 7a00 	vstr	s15, [r3]
			  new_D = 1;
 80026ac:	4b0c      	ldr	r3, [pc, #48]	; (80026e0 <StartDefaultTask+0x14c>)
 80026ae:	2201      	movs	r2, #1
 80026b0:	701a      	strb	r2, [r3, #0]
		  }
	  }
	  osDelay(2000);
 80026b2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80026b6:	f00a ffdd 	bl	800d674 <osDelay>
	  if(uart_telemetria == 1){
 80026ba:	e76f      	b.n	800259c <StartDefaultTask+0x8>
 80026bc:	20000b2e 	.word	0x20000b2e
 80026c0:	20000000 	.word	0x20000000
 80026c4:	000f4240 	.word	0x000f4240
 80026c8:	000186a0 	.word	0x000186a0
 80026cc:	fcd232b0 	.word	0xfcd232b0
 80026d0:	47c35000 	.word	0x47c35000
 80026d4:	20000b30 	.word	0x20000b30
 80026d8:	20000b38 	.word	0x20000b38
 80026dc:	20000b34 	.word	0x20000b34
 80026e0:	20000b39 	.word	0x20000b39
 80026e4:	00000000 	.word	0x00000000

080026e8 <Start_Data_Reading>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_Data_Reading */
void Start_Data_Reading(void const * argument)
{
 80026e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026ea:	b0ef      	sub	sp, #444	; 0x1bc
 80026ec:	af06      	add	r7, sp, #24
 80026ee:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80026f2:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80026f6:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN Start_Data_Reading */

	//magnetometer calibration
	FusionVector magneto_offset = {-11.31, -3.64, 0.43};//{-11.8, -5.68, 3.08};
 80026f8:	4a63      	ldr	r2, [pc, #396]	; (8002888 <Start_Data_Reading+0x1a0>)
 80026fa:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80026fe:	ca07      	ldmia	r2, {r0, r1, r2}
 8002700:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	FusionMatrix magneto_transform = {1.015, 0.018, -0.002, 0.018, 1.015, -0.004, -0.002, -0.004, 0.972};
 8002704:	4b61      	ldr	r3, [pc, #388]	; (800288c <Start_Data_Reading+0x1a4>)
 8002706:	f107 04b0 	add.w	r4, r7, #176	; 0xb0
 800270a:	461d      	mov	r5, r3
 800270c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800270e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002710:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002712:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002714:	682b      	ldr	r3, [r5, #0]
 8002716:	6023      	str	r3, [r4, #0]
	FusionVector magneto_data;

	//pitch angle velocity control params
	float err_pitch = 0;
 8002718:	f04f 0300 	mov.w	r3, #0
 800271c:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
	float errd_pitch = 0;
 8002720:	f04f 0300 	mov.w	r3, #0
 8002724:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
	float prev_err_pitch = 0;
 8002728:	f04f 0300 	mov.w	r3, #0
 800272c:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
	float control_pitch = 0;
 8002730:	f04f 0300 	mov.w	r3, #0
 8002734:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
	float P_pitch = 20;
 8002738:	4b55      	ldr	r3, [pc, #340]	; (8002890 <Start_Data_Reading+0x1a8>)
 800273a:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
	float D_pitch = 0.1;
 800273e:	4b55      	ldr	r3, [pc, #340]	; (8002894 <Start_Data_Reading+0x1ac>)
 8002740:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168

	//pitch angle control params
	float err_angle_pitch = 0;
 8002744:	f04f 0300 	mov.w	r3, #0
 8002748:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
	float errd_angle_pitch = 0;
 800274c:	f04f 0300 	mov.w	r3, #0
 8002750:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
	float prev_err_angle_pitch = 0;
 8002754:	f04f 0300 	mov.w	r3, #0
 8002758:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
	float angle_control_pitch = 0;
 800275c:	f04f 0300 	mov.w	r3, #0
 8002760:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
	float P_angle_pitch = 0.04;
 8002764:	4b4c      	ldr	r3, [pc, #304]	; (8002898 <Start_Data_Reading+0x1b0>)
 8002766:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
	float D_angle_pitch = 0.0001;//0.005;
 800276a:	4b4c      	ldr	r3, [pc, #304]	; (800289c <Start_Data_Reading+0x1b4>)
 800276c:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154

	//roll angle velocity control params
	float err_roll = 0;
 8002770:	f04f 0300 	mov.w	r3, #0
 8002774:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
	float errd_roll = 0;
 8002778:	f04f 0300 	mov.w	r3, #0
 800277c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
	float prev_err_roll = 0;
 8002780:	f04f 0300 	mov.w	r3, #0
 8002784:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
	float control_roll = 0;
 8002788:	f04f 0300 	mov.w	r3, #0
 800278c:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
	float P_roll = 5;
 8002790:	4b43      	ldr	r3, [pc, #268]	; (80028a0 <Start_Data_Reading+0x1b8>)
 8002792:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
	float D_roll = 0.1;//0.4
 8002796:	4b3f      	ldr	r3, [pc, #252]	; (8002894 <Start_Data_Reading+0x1ac>)
 8002798:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140

	//roll angle control params
	float P_angle_roll = 0.2;
 800279c:	4b41      	ldr	r3, [pc, #260]	; (80028a4 <Start_Data_Reading+0x1bc>)
 800279e:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
	float D_angle_roll = 0.0001;//0.005;
 80027a2:	4b3e      	ldr	r3, [pc, #248]	; (800289c <Start_Data_Reading+0x1b4>)
 80027a4:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
	float err_angle_roll = 0;
 80027a8:	f04f 0300 	mov.w	r3, #0
 80027ac:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
	float errd_angle_roll = 0;
 80027b0:	f04f 0300 	mov.w	r3, #0
 80027b4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
	float prev_err_angle_roll = 0;
 80027b8:	f04f 0300 	mov.w	r3, #0
 80027bc:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
	float angle_control_roll = 0;
 80027c0:	f04f 0300 	mov.w	r3, #0
 80027c4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

	//yaw angle velocity control params
	float err_yaw = 0;
 80027c8:	f04f 0300 	mov.w	r3, #0
 80027cc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	float errd_yaw = 0;
 80027d0:	f04f 0300 	mov.w	r3, #0
 80027d4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	float prev_err_yaw = 0;
 80027d8:	f04f 0300 	mov.w	r3, #0
 80027dc:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
	float control_yaw = 0;
 80027e0:	f04f 0300 	mov.w	r3, #0
 80027e4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	float P_yaw = 10;
 80027e8:	4b2f      	ldr	r3, [pc, #188]	; (80028a8 <Start_Data_Reading+0x1c0>)
 80027ea:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
	float D_yaw = 0;
 80027ee:	f04f 0300 	mov.w	r3, #0
 80027f2:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184

	//yaw angle control params
	float P_angle_yaw = 0.04;
 80027f6:	4b28      	ldr	r3, [pc, #160]	; (8002898 <Start_Data_Reading+0x1b0>)
 80027f8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	float D_angle_yaw = 0.0000;//0.005;
 80027fc:	f04f 0300 	mov.w	r3, #0
 8002800:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	float err_angle_yaw = 0;
 8002804:	f04f 0300 	mov.w	r3, #0
 8002808:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	float errd_angle_yaw = 0;
 800280c:	f04f 0300 	mov.w	r3, #0
 8002810:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	float prev_err_angle_yaw = 0;
 8002814:	f04f 0300 	mov.w	r3, #0
 8002818:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
	float angle_control_yaw = 0;
 800281c:	f04f 0300 	mov.w	r3, #0
 8002820:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c



	//imu init function
	BMI088_Init(&imu, &hspi2, CS_ACC_GPIO_Port, CS_ACC_Pin, CS_GYRO_GPIO_Port, CS_GYRO_Pin);
 8002824:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002828:	9301      	str	r3, [sp, #4]
 800282a:	4b20      	ldr	r3, [pc, #128]	; (80028ac <Start_Data_Reading+0x1c4>)
 800282c:	9300      	str	r3, [sp, #0]
 800282e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002832:	4a1f      	ldr	r2, [pc, #124]	; (80028b0 <Start_Data_Reading+0x1c8>)
 8002834:	491f      	ldr	r1, [pc, #124]	; (80028b4 <Start_Data_Reading+0x1cc>)
 8002836:	4820      	ldr	r0, [pc, #128]	; (80028b8 <Start_Data_Reading+0x1d0>)
 8002838:	f001 fc20 	bl	800407c <BMI088_Init>


	//bmp388 pressure sensor init
	bmp._hi2c = &hi2c2;
 800283c:	4b1f      	ldr	r3, [pc, #124]	; (80028bc <Start_Data_Reading+0x1d4>)
 800283e:	4a20      	ldr	r2, [pc, #128]	; (80028c0 <Start_Data_Reading+0x1d8>)
 8002840:	601a      	str	r2, [r3, #0]


	BMP388_SetTempOS(&bmp, 0);
 8002842:	2100      	movs	r1, #0
 8002844:	481d      	ldr	r0, [pc, #116]	; (80028bc <Start_Data_Reading+0x1d4>)
 8002846:	f002 fdf9 	bl	800543c <BMP388_SetTempOS>
	HAL_Delay(10);
 800284a:	200a      	movs	r0, #10
 800284c:	f003 faee 	bl	8005e2c <HAL_Delay>
	BMP388_SetPressOS(&bmp, 0);
 8002850:	2100      	movs	r1, #0
 8002852:	481a      	ldr	r0, [pc, #104]	; (80028bc <Start_Data_Reading+0x1d4>)
 8002854:	f002 fe12 	bl	800547c <BMP388_SetPressOS>
	HAL_Delay(10);
 8002858:	200a      	movs	r0, #10
 800285a:	f003 fae7 	bl	8005e2c <HAL_Delay>
	BMP388_SetIIRFilterCoeff(&bmp, 2);
 800285e:	2102      	movs	r1, #2
 8002860:	4816      	ldr	r0, [pc, #88]	; (80028bc <Start_Data_Reading+0x1d4>)
 8002862:	f002 fe2a 	bl	80054ba <BMP388_SetIIRFilterCoeff>
	HAL_Delay(10);
 8002866:	200a      	movs	r0, #10
 8002868:	f003 fae0 	bl	8005e2c <HAL_Delay>
	BMP388_SetOutputDataRate(&bmp, 0x02);
 800286c:	2102      	movs	r1, #2
 800286e:	4813      	ldr	r0, [pc, #76]	; (80028bc <Start_Data_Reading+0x1d4>)
 8002870:	f002 fe3a 	bl	80054e8 <BMP388_SetOutputDataRate>
	HAL_Delay(10);
 8002874:	200a      	movs	r0, #10
 8002876:	f003 fad9 	bl	8005e2c <HAL_Delay>
	BMP388_Init(&bmp);
 800287a:	4810      	ldr	r0, [pc, #64]	; (80028bc <Start_Data_Reading+0x1d4>)
 800287c:	f002 fd63 	bl	8005346 <BMP388_Init>

	for(int i_init = 0; i_init<2000; i_init++ ){
 8002880:	2300      	movs	r3, #0
 8002882:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002886:	e078      	b.n	800297a <Start_Data_Reading+0x292>
 8002888:	08013e14 	.word	0x08013e14
 800288c:	08013e20 	.word	0x08013e20
 8002890:	41a00000 	.word	0x41a00000
 8002894:	3dcccccd 	.word	0x3dcccccd
 8002898:	3d23d70a 	.word	0x3d23d70a
 800289c:	38d1b717 	.word	0x38d1b717
 80028a0:	40a00000 	.word	0x40a00000
 80028a4:	3e4ccccd 	.word	0x3e4ccccd
 80028a8:	41200000 	.word	0x41200000
 80028ac:	40020400 	.word	0x40020400
 80028b0:	40020800 	.word	0x40020800
 80028b4:	20000634 	.word	0x20000634
 80028b8:	20000970 	.word	0x20000970
 80028bc:	200009c0 	.word	0x200009c0
 80028c0:	2000058c 	.word	0x2000058c
	  BMP388_ReadRawPressTempTime(&bmp, &raw_press, &raw_temp, &raw_time);
 80028c4:	4bb4      	ldr	r3, [pc, #720]	; (8002b98 <Start_Data_Reading+0x4b0>)
 80028c6:	4ab5      	ldr	r2, [pc, #724]	; (8002b9c <Start_Data_Reading+0x4b4>)
 80028c8:	49b5      	ldr	r1, [pc, #724]	; (8002ba0 <Start_Data_Reading+0x4b8>)
 80028ca:	48b6      	ldr	r0, [pc, #728]	; (8002ba4 <Start_Data_Reading+0x4bc>)
 80028cc:	f002 fe21 	bl	8005512 <BMP388_ReadRawPressTempTime>
	  BMP388_CompensateRawPressTemp(&bmp, raw_press, raw_temp, &press, &temp);
 80028d0:	4bb3      	ldr	r3, [pc, #716]	; (8002ba0 <Start_Data_Reading+0x4b8>)
 80028d2:	6819      	ldr	r1, [r3, #0]
 80028d4:	4bb1      	ldr	r3, [pc, #708]	; (8002b9c <Start_Data_Reading+0x4b4>)
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	4bb3      	ldr	r3, [pc, #716]	; (8002ba8 <Start_Data_Reading+0x4c0>)
 80028da:	9300      	str	r3, [sp, #0]
 80028dc:	4bb3      	ldr	r3, [pc, #716]	; (8002bac <Start_Data_Reading+0x4c4>)
 80028de:	48b1      	ldr	r0, [pc, #708]	; (8002ba4 <Start_Data_Reading+0x4bc>)
 80028e0:	f002 fe43 	bl	800556a <BMP388_CompensateRawPressTemp>
	  h0 += BMP388_FindAltitude(ground_pressure, press);
 80028e4:	4bb1      	ldr	r3, [pc, #708]	; (8002bac <Start_Data_Reading+0x4c4>)
 80028e6:	edd3 7a00 	vldr	s15, [r3]
 80028ea:	eef0 0a67 	vmov.f32	s1, s15
 80028ee:	ed9f 0ab0 	vldr	s0, [pc, #704]	; 8002bb0 <Start_Data_Reading+0x4c8>
 80028f2:	f002 fe5d 	bl	80055b0 <BMP388_FindAltitude>
 80028f6:	eeb0 7a40 	vmov.f32	s14, s0
 80028fa:	4bae      	ldr	r3, [pc, #696]	; (8002bb4 <Start_Data_Reading+0x4cc>)
 80028fc:	edd3 7a00 	vldr	s15, [r3]
 8002900:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002904:	4bab      	ldr	r3, [pc, #684]	; (8002bb4 <Start_Data_Reading+0x4cc>)
 8002906:	edc3 7a00 	vstr	s15, [r3]
	  BMI088_ReadGyroscope(&imu);
 800290a:	48ab      	ldr	r0, [pc, #684]	; (8002bb8 <Start_Data_Reading+0x4d0>)
 800290c:	f001 fe34 	bl	8004578 <BMI088_ReadGyroscope>
	  gyro_offset_x_calc += imu.gyr_rps[0];
 8002910:	4ba9      	ldr	r3, [pc, #676]	; (8002bb8 <Start_Data_Reading+0x4d0>)
 8002912:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002914:	4618      	mov	r0, r3
 8002916:	f7fd fe17 	bl	8000548 <__aeabi_f2d>
 800291a:	4ba8      	ldr	r3, [pc, #672]	; (8002bbc <Start_Data_Reading+0x4d4>)
 800291c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002920:	f7fd fcb4 	bl	800028c <__adddf3>
 8002924:	4602      	mov	r2, r0
 8002926:	460b      	mov	r3, r1
 8002928:	49a4      	ldr	r1, [pc, #656]	; (8002bbc <Start_Data_Reading+0x4d4>)
 800292a:	e9c1 2300 	strd	r2, r3, [r1]
	  gyro_offset_y_calc += imu.gyr_rps[1];
 800292e:	4ba2      	ldr	r3, [pc, #648]	; (8002bb8 <Start_Data_Reading+0x4d0>)
 8002930:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002932:	4618      	mov	r0, r3
 8002934:	f7fd fe08 	bl	8000548 <__aeabi_f2d>
 8002938:	4ba1      	ldr	r3, [pc, #644]	; (8002bc0 <Start_Data_Reading+0x4d8>)
 800293a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800293e:	f7fd fca5 	bl	800028c <__adddf3>
 8002942:	4602      	mov	r2, r0
 8002944:	460b      	mov	r3, r1
 8002946:	499e      	ldr	r1, [pc, #632]	; (8002bc0 <Start_Data_Reading+0x4d8>)
 8002948:	e9c1 2300 	strd	r2, r3, [r1]
	  gyro_offset_z_calc += imu.gyr_rps[2];
 800294c:	4b9a      	ldr	r3, [pc, #616]	; (8002bb8 <Start_Data_Reading+0x4d0>)
 800294e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002950:	4618      	mov	r0, r3
 8002952:	f7fd fdf9 	bl	8000548 <__aeabi_f2d>
 8002956:	4b9b      	ldr	r3, [pc, #620]	; (8002bc4 <Start_Data_Reading+0x4dc>)
 8002958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800295c:	f7fd fc96 	bl	800028c <__adddf3>
 8002960:	4602      	mov	r2, r0
 8002962:	460b      	mov	r3, r1
 8002964:	4997      	ldr	r1, [pc, #604]	; (8002bc4 <Start_Data_Reading+0x4dc>)
 8002966:	e9c1 2300 	strd	r2, r3, [r1]
	  HAL_Delay(1);
 800296a:	2001      	movs	r0, #1
 800296c:	f003 fa5e 	bl	8005e2c <HAL_Delay>
	for(int i_init = 0; i_init<2000; i_init++ ){
 8002970:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8002974:	3301      	adds	r3, #1
 8002976:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800297a:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 800297e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002982:	db9f      	blt.n	80028c4 <Start_Data_Reading+0x1dc>
	}
	h0 /= 2000;
 8002984:	4b8b      	ldr	r3, [pc, #556]	; (8002bb4 <Start_Data_Reading+0x4cc>)
 8002986:	ed93 7a00 	vldr	s14, [r3]
 800298a:	eddf 6a8f 	vldr	s13, [pc, #572]	; 8002bc8 <Start_Data_Reading+0x4e0>
 800298e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002992:	4b88      	ldr	r3, [pc, #544]	; (8002bb4 <Start_Data_Reading+0x4cc>)
 8002994:	edc3 7a00 	vstr	s15, [r3]
	gyro_offset_x = gyro_offset_x_calc/2000;
 8002998:	4b88      	ldr	r3, [pc, #544]	; (8002bbc <Start_Data_Reading+0x4d4>)
 800299a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800299e:	f04f 0200 	mov.w	r2, #0
 80029a2:	4b8a      	ldr	r3, [pc, #552]	; (8002bcc <Start_Data_Reading+0x4e4>)
 80029a4:	f7fd ff52 	bl	800084c <__aeabi_ddiv>
 80029a8:	4602      	mov	r2, r0
 80029aa:	460b      	mov	r3, r1
 80029ac:	4988      	ldr	r1, [pc, #544]	; (8002bd0 <Start_Data_Reading+0x4e8>)
 80029ae:	e9c1 2300 	strd	r2, r3, [r1]
	gyro_offset_y = gyro_offset_y_calc/2000;
 80029b2:	4b83      	ldr	r3, [pc, #524]	; (8002bc0 <Start_Data_Reading+0x4d8>)
 80029b4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80029b8:	f04f 0200 	mov.w	r2, #0
 80029bc:	4b83      	ldr	r3, [pc, #524]	; (8002bcc <Start_Data_Reading+0x4e4>)
 80029be:	f7fd ff45 	bl	800084c <__aeabi_ddiv>
 80029c2:	4602      	mov	r2, r0
 80029c4:	460b      	mov	r3, r1
 80029c6:	4983      	ldr	r1, [pc, #524]	; (8002bd4 <Start_Data_Reading+0x4ec>)
 80029c8:	e9c1 2300 	strd	r2, r3, [r1]
	gyro_offset_z = gyro_offset_z_calc/2000;
 80029cc:	4b7d      	ldr	r3, [pc, #500]	; (8002bc4 <Start_Data_Reading+0x4dc>)
 80029ce:	e9d3 0100 	ldrd	r0, r1, [r3]
 80029d2:	f04f 0200 	mov.w	r2, #0
 80029d6:	4b7d      	ldr	r3, [pc, #500]	; (8002bcc <Start_Data_Reading+0x4e4>)
 80029d8:	f7fd ff38 	bl	800084c <__aeabi_ddiv>
 80029dc:	4602      	mov	r2, r0
 80029de:	460b      	mov	r3, r1
 80029e0:	497d      	ldr	r1, [pc, #500]	; (8002bd8 <Start_Data_Reading+0x4f0>)
 80029e2:	e9c1 2300 	strd	r2, r3, [r1]

	//magneto sensor init
	bmm.hi2c_handle = &hi2c1;
 80029e6:	4b7d      	ldr	r3, [pc, #500]	; (8002bdc <Start_Data_Reading+0x4f4>)
 80029e8:	4a7d      	ldr	r2, [pc, #500]	; (8002be0 <Start_Data_Reading+0x4f8>)
 80029ea:	601a      	str	r2, [r3, #0]

	BMM150_Init(&bmm);
 80029ec:	487b      	ldr	r0, [pc, #492]	; (8002bdc <Start_Data_Reading+0x4f4>)
 80029ee:	f001 fe3b 	bl	8004668 <BMM150_Init>
	HAL_Delay(10);
 80029f2:	200a      	movs	r0, #10
 80029f4:	f003 fa1a 	bl	8005e2c <HAL_Delay>
	BMM150_Get_TrimData(&bmm, &trim_data);
 80029f8:	497a      	ldr	r1, [pc, #488]	; (8002be4 <Start_Data_Reading+0x4fc>)
 80029fa:	4878      	ldr	r0, [pc, #480]	; (8002bdc <Start_Data_Reading+0x4f4>)
 80029fc:	f002 f82e 	bl	8004a5c <BMM150_Get_TrimData>



	q.SEq_1=1;
 8002a00:	4b79      	ldr	r3, [pc, #484]	; (8002be8 <Start_Data_Reading+0x500>)
 8002a02:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002a06:	601a      	str	r2, [r3, #0]
	q.SEq_2=0;
 8002a08:	4b77      	ldr	r3, [pc, #476]	; (8002be8 <Start_Data_Reading+0x500>)
 8002a0a:	f04f 0200 	mov.w	r2, #0
 8002a0e:	605a      	str	r2, [r3, #4]
	q.SEq_3=0;
 8002a10:	4b75      	ldr	r3, [pc, #468]	; (8002be8 <Start_Data_Reading+0x500>)
 8002a12:	f04f 0200 	mov.w	r2, #0
 8002a16:	609a      	str	r2, [r3, #8]
	q.SEq_4=0;
 8002a18:	4b73      	ldr	r3, [pc, #460]	; (8002be8 <Start_Data_Reading+0x500>)
 8002a1a:	f04f 0200 	mov.w	r2, #0
 8002a1e:	60da      	str	r2, [r3, #12]

	w.w_bx=0;
 8002a20:	4b72      	ldr	r3, [pc, #456]	; (8002bec <Start_Data_Reading+0x504>)
 8002a22:	f04f 0200 	mov.w	r2, #0
 8002a26:	601a      	str	r2, [r3, #0]
	w.w_by=0;
 8002a28:	4b70      	ldr	r3, [pc, #448]	; (8002bec <Start_Data_Reading+0x504>)
 8002a2a:	f04f 0200 	mov.w	r2, #0
 8002a2e:	605a      	str	r2, [r3, #4]
	w.w_bz=0;
 8002a30:	4b6e      	ldr	r3, [pc, #440]	; (8002bec <Start_Data_Reading+0x504>)
 8002a32:	f04f 0200 	mov.w	r2, #0
 8002a36:	609a      	str	r2, [r3, #8]
//	P_prev.a32 = 0;
//	P_prev.a33 = 0;
//	meas.a11=0;
//	meas.a21=0;

	HAL_TIM_Base_Start_IT(&htim6);
 8002a38:	486d      	ldr	r0, [pc, #436]	; (8002bf0 <Start_Data_Reading+0x508>)
 8002a3a:	f006 fc61 	bl	8009300 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim7);
 8002a3e:	486d      	ldr	r0, [pc, #436]	; (8002bf4 <Start_Data_Reading+0x50c>)
 8002a40:	f006 fc5e 	bl	8009300 <HAL_TIM_Base_Start_IT>
	FusionAhrsInitialise(&ahrs);
 8002a44:	486c      	ldr	r0, [pc, #432]	; (8002bf8 <Start_Data_Reading+0x510>)
 8002a46:	f009 fe29 	bl	800c69c <FusionAhrsInitialise>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	2108      	movs	r1, #8
 8002a4e:	486b      	ldr	r0, [pc, #428]	; (8002bfc <Start_Data_Reading+0x514>)
 8002a50:	f004 fb22 	bl	8007098 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8002a54:	2064      	movs	r0, #100	; 0x64
 8002a56:	f003 f9e9 	bl	8005e2c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	2108      	movs	r1, #8
 8002a5e:	4867      	ldr	r0, [pc, #412]	; (8002bfc <Start_Data_Reading+0x514>)
 8002a60:	f004 fb1a 	bl	8007098 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8002a64:	2064      	movs	r0, #100	; 0x64
 8002a66:	f003 f9e1 	bl	8005e2c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	2108      	movs	r1, #8
 8002a6e:	4863      	ldr	r0, [pc, #396]	; (8002bfc <Start_Data_Reading+0x514>)
 8002a70:	f004 fb12 	bl	8007098 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8002a74:	2064      	movs	r0, #100	; 0x64
 8002a76:	f003 f9d9 	bl	8005e2c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	2108      	movs	r1, #8
 8002a7e:	485f      	ldr	r0, [pc, #380]	; (8002bfc <Start_Data_Reading+0x514>)
 8002a80:	f004 fb0a 	bl	8007098 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8002a84:	2064      	movs	r0, #100	; 0x64
 8002a86:	f003 f9d1 	bl	8005e2c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	2108      	movs	r1, #8
 8002a8e:	485b      	ldr	r0, [pc, #364]	; (8002bfc <Start_Data_Reading+0x514>)
 8002a90:	f004 fb02 	bl	8007098 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8002a94:	2064      	movs	r0, #100	; 0x64
 8002a96:	f003 f9c9 	bl	8005e2c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	2108      	movs	r1, #8
 8002a9e:	4857      	ldr	r0, [pc, #348]	; (8002bfc <Start_Data_Reading+0x514>)
 8002aa0:	f004 fafa 	bl	8007098 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8002aa4:	2064      	movs	r0, #100	; 0x64
 8002aa6:	f003 f9c1 	bl	8005e2c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8002aaa:	2200      	movs	r2, #0
 8002aac:	2108      	movs	r1, #8
 8002aae:	4853      	ldr	r0, [pc, #332]	; (8002bfc <Start_Data_Reading+0x514>)
 8002ab0:	f004 faf2 	bl	8007098 <HAL_GPIO_WritePin>

	HAL_UART_Receive_DMA(&huart1, UART1_rxBuffer, bytetoread);
 8002ab4:	4b52      	ldr	r3, [pc, #328]	; (8002c00 <Start_Data_Reading+0x518>)
 8002ab6:	781b      	ldrb	r3, [r3, #0]
 8002ab8:	b29b      	uxth	r3, r3
 8002aba:	461a      	mov	r2, r3
 8002abc:	4951      	ldr	r1, [pc, #324]	; (8002c04 <Start_Data_Reading+0x51c>)
 8002abe:	4852      	ldr	r0, [pc, #328]	; (8002c08 <Start_Data_Reading+0x520>)
 8002ac0:	f008 f847 	bl	800ab52 <HAL_UART_Receive_DMA>
	HAL_UART_Receive_IT(&huart2, telem, 11);
 8002ac4:	220b      	movs	r2, #11
 8002ac6:	4951      	ldr	r1, [pc, #324]	; (8002c0c <Start_Data_Reading+0x524>)
 8002ac8:	4851      	ldr	r0, [pc, #324]	; (8002c10 <Start_Data_Reading+0x528>)
 8002aca:	f008 f812 	bl	800aaf2 <HAL_UART_Receive_IT>

	uint8_t transmit_data[80] = "HELLO WORLD \r\n";
 8002ace:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8002ad2:	f5a3 75a6 	sub.w	r5, r3, #332	; 0x14c
 8002ad6:	4b4f      	ldr	r3, [pc, #316]	; (8002c14 <Start_Data_Reading+0x52c>)
 8002ad8:	462c      	mov	r4, r5
 8002ada:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002adc:	c407      	stmia	r4!, {r0, r1, r2}
 8002ade:	8023      	strh	r3, [r4, #0]
 8002ae0:	3402      	adds	r4, #2
 8002ae2:	0c1b      	lsrs	r3, r3, #16
 8002ae4:	7023      	strb	r3, [r4, #0]
 8002ae6:	f105 030f 	add.w	r3, r5, #15
 8002aea:	2241      	movs	r2, #65	; 0x41
 8002aec:	2100      	movs	r1, #0
 8002aee:	4618      	mov	r0, r3
 8002af0:	f00b fffc 	bl	800eaec <memset>

  /* Infinite loop */
  for(;;)
  {

	  	  mytimer = __HAL_TIM_GET_COUNTER(&htim7);
 8002af4:	4b3f      	ldr	r3, [pc, #252]	; (8002bf4 <Start_Data_Reading+0x50c>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002afa:	461a      	mov	r2, r3
 8002afc:	4b46      	ldr	r3, [pc, #280]	; (8002c18 <Start_Data_Reading+0x530>)
 8002afe:	601a      	str	r2, [r3, #0]
	  	  htim7.Instance->CNT = 0;
 8002b00:	4b3c      	ldr	r3, [pc, #240]	; (8002bf4 <Start_Data_Reading+0x50c>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	2200      	movs	r2, #0
 8002b06:	625a      	str	r2, [r3, #36]	; 0x24
	  	  BMM150_Set_OpMode(&bmm, 0x02); //280 us - 100kHz,
 8002b08:	2102      	movs	r1, #2
 8002b0a:	4834      	ldr	r0, [pc, #208]	; (8002bdc <Start_Data_Reading+0x4f4>)
 8002b0c:	f001 fedd 	bl	80048ca <BMM150_Set_OpMode>

		  // opmode start a measurement, because of the set preset mode, the results will be available in the next loop,
		  // with nXY = 5, nZ = 6 delay is -> 4.16 ms ~240Hz -> 200 Hz control loop available
		  BMM150_GetRawData(&bmm, &field_x, &field_y, &field_z, &Rhall, 8); // all time 1.31 ms magnetometer i2c 100kHz, 330 us with 400 kHz
 8002b10:	2308      	movs	r3, #8
 8002b12:	9301      	str	r3, [sp, #4]
 8002b14:	4b41      	ldr	r3, [pc, #260]	; (8002c1c <Start_Data_Reading+0x534>)
 8002b16:	9300      	str	r3, [sp, #0]
 8002b18:	4b41      	ldr	r3, [pc, #260]	; (8002c20 <Start_Data_Reading+0x538>)
 8002b1a:	4a42      	ldr	r2, [pc, #264]	; (8002c24 <Start_Data_Reading+0x53c>)
 8002b1c:	4942      	ldr	r1, [pc, #264]	; (8002c28 <Start_Data_Reading+0x540>)
 8002b1e:	482f      	ldr	r0, [pc, #188]	; (8002bdc <Start_Data_Reading+0x4f4>)
 8002b20:	f001 ff3c 	bl	800499c <BMM150_GetRawData>



		  // magnetic field data in uT
		  mag_data_x = BMM150_Compensate_x(field_x, Rhall,  &trim_data); //magn data compensation 33.4 us
 8002b24:	4b40      	ldr	r3, [pc, #256]	; (8002c28 <Start_Data_Reading+0x540>)
 8002b26:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b2a:	4a3c      	ldr	r2, [pc, #240]	; (8002c1c <Start_Data_Reading+0x534>)
 8002b2c:	8811      	ldrh	r1, [r2, #0]
 8002b2e:	4a2d      	ldr	r2, [pc, #180]	; (8002be4 <Start_Data_Reading+0x4fc>)
 8002b30:	4618      	mov	r0, r3
 8002b32:	f002 f8c9 	bl	8004cc8 <BMM150_Compensate_x>
 8002b36:	eef0 7a40 	vmov.f32	s15, s0
 8002b3a:	4b3c      	ldr	r3, [pc, #240]	; (8002c2c <Start_Data_Reading+0x544>)
 8002b3c:	edc3 7a00 	vstr	s15, [r3]
		  mag_data_y = BMM150_Compensate_y(field_y, Rhall,  &trim_data);
 8002b40:	4b38      	ldr	r3, [pc, #224]	; (8002c24 <Start_Data_Reading+0x53c>)
 8002b42:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b46:	4a35      	ldr	r2, [pc, #212]	; (8002c1c <Start_Data_Reading+0x534>)
 8002b48:	8811      	ldrh	r1, [r2, #0]
 8002b4a:	4a26      	ldr	r2, [pc, #152]	; (8002be4 <Start_Data_Reading+0x4fc>)
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f002 f9cf 	bl	8004ef0 <BMM150_Compensate_y>
 8002b52:	eef0 7a40 	vmov.f32	s15, s0
 8002b56:	4b36      	ldr	r3, [pc, #216]	; (8002c30 <Start_Data_Reading+0x548>)
 8002b58:	edc3 7a00 	vstr	s15, [r3]
		  mag_data_z = BMM150_Compensate_z(field_z, Rhall,  &trim_data);
 8002b5c:	4b30      	ldr	r3, [pc, #192]	; (8002c20 <Start_Data_Reading+0x538>)
 8002b5e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b62:	4a2e      	ldr	r2, [pc, #184]	; (8002c1c <Start_Data_Reading+0x534>)
 8002b64:	8811      	ldrh	r1, [r2, #0]
 8002b66:	4a1f      	ldr	r2, [pc, #124]	; (8002be4 <Start_Data_Reading+0x4fc>)
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f002 fad5 	bl	8005118 <BMM150_Compensate_z>
 8002b6e:	eef0 7a40 	vmov.f32	s15, s0
 8002b72:	4b30      	ldr	r3, [pc, #192]	; (8002c34 <Start_Data_Reading+0x54c>)
 8002b74:	edc3 7a00 	vstr	s15, [r3]
		  magneto_data.axis.x = mag_data_y;
 8002b78:	4b2d      	ldr	r3, [pc, #180]	; (8002c30 <Start_Data_Reading+0x548>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		  magneto_data.axis.y = -mag_data_x;
 8002b80:	4b2a      	ldr	r3, [pc, #168]	; (8002c2c <Start_Data_Reading+0x544>)
 8002b82:	edd3 7a00 	vldr	s15, [r3]
 8002b86:	eef1 7a67 	vneg.f32	s15, s15
 8002b8a:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
		  magneto_data.axis.z = mag_data_z;
 8002b8e:	4b29      	ldr	r3, [pc, #164]	; (8002c34 <Start_Data_Reading+0x54c>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002b96:	e04f      	b.n	8002c38 <Start_Data_Reading+0x550>
 8002b98:	20000a38 	.word	0x20000a38
 8002b9c:	20000a34 	.word	0x20000a34
 8002ba0:	20000a30 	.word	0x20000a30
 8002ba4:	200009c0 	.word	0x200009c0
 8002ba8:	20000a40 	.word	0x20000a40
 8002bac:	20000a3c 	.word	0x20000a3c
 8002bb0:	47c5f400 	.word	0x47c5f400
 8002bb4:	20000a44 	.word	0x20000a44
 8002bb8:	20000970 	.word	0x20000970
 8002bbc:	20000b48 	.word	0x20000b48
 8002bc0:	20000b50 	.word	0x20000b50
 8002bc4:	20000b58 	.word	0x20000b58
 8002bc8:	44fa0000 	.word	0x44fa0000
 8002bcc:	409f4000 	.word	0x409f4000
 8002bd0:	20000b60 	.word	0x20000b60
 8002bd4:	20000b68 	.word	0x20000b68
 8002bd8:	20000b70 	.word	0x20000b70
 8002bdc:	20000a00 	.word	0x20000a00
 8002be0:	20000538 	.word	0x20000538
 8002be4:	20000a08 	.word	0x20000a08
 8002be8:	20000a54 	.word	0x20000a54
 8002bec:	20000a64 	.word	0x20000a64
 8002bf0:	20000764 	.word	0x20000764
 8002bf4:	200007ac 	.word	0x200007ac
 8002bf8:	20000a70 	.word	0x20000a70
 8002bfc:	40020400 	.word	0x40020400
 8002c00:	2000000a 	.word	0x2000000a
 8002c04:	20002b08 	.word	0x20002b08
 8002c08:	200007f4 	.word	0x200007f4
 8002c0c:	20000000 	.word	0x20000000
 8002c10:	20000838 	.word	0x20000838
 8002c14:	08013e44 	.word	0x08013e44
 8002c18:	20000b44 	.word	0x20000b44
 8002c1c:	20000a1e 	.word	0x20000a1e
 8002c20:	20000a1c 	.word	0x20000a1c
 8002c24:	20000a1a 	.word	0x20000a1a
 8002c28:	20000a18 	.word	0x20000a18
 8002c2c:	20000a20 	.word	0x20000a20
 8002c30:	20000a24 	.word	0x20000a24
 8002c34:	20000a28 	.word	0x20000a28

		  if(i_mag < 1000){
 8002c38:	4bcf      	ldr	r3, [pc, #828]	; (8002f78 <Start_Data_Reading+0x890>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002c40:	da14      	bge.n	8002c6c <Start_Data_Reading+0x584>
			  mag_debug_x[i_mag] = mag_data_x;
 8002c42:	4bcd      	ldr	r3, [pc, #820]	; (8002f78 <Start_Data_Reading+0x890>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4acd      	ldr	r2, [pc, #820]	; (8002f7c <Start_Data_Reading+0x894>)
 8002c48:	6812      	ldr	r2, [r2, #0]
 8002c4a:	49cd      	ldr	r1, [pc, #820]	; (8002f80 <Start_Data_Reading+0x898>)
 8002c4c:	009b      	lsls	r3, r3, #2
 8002c4e:	440b      	add	r3, r1
 8002c50:	601a      	str	r2, [r3, #0]
			  mag_debug_y[i_mag] = mag_data_y;
 8002c52:	4bc9      	ldr	r3, [pc, #804]	; (8002f78 <Start_Data_Reading+0x890>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4acb      	ldr	r2, [pc, #812]	; (8002f84 <Start_Data_Reading+0x89c>)
 8002c58:	6812      	ldr	r2, [r2, #0]
 8002c5a:	49cb      	ldr	r1, [pc, #812]	; (8002f88 <Start_Data_Reading+0x8a0>)
 8002c5c:	009b      	lsls	r3, r3, #2
 8002c5e:	440b      	add	r3, r1
 8002c60:	601a      	str	r2, [r3, #0]
			  i_mag++;
 8002c62:	4bc5      	ldr	r3, [pc, #788]	; (8002f78 <Start_Data_Reading+0x890>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	3301      	adds	r3, #1
 8002c68:	4ac3      	ldr	r2, [pc, #780]	; (8002f78 <Start_Data_Reading+0x890>)
 8002c6a:	6013      	str	r3, [r2, #0]
		  }

		  //read IMU
		  BMI088_ReadGyroscope(&imu);	// imu read 119 us
 8002c6c:	48c7      	ldr	r0, [pc, #796]	; (8002f8c <Start_Data_Reading+0x8a4>)
 8002c6e:	f001 fc83 	bl	8004578 <BMI088_ReadGyroscope>
		  BMI088_ReadAccelerometer(&imu);
 8002c72:	48c6      	ldr	r0, [pc, #792]	; (8002f8c <Start_Data_Reading+0x8a4>)
 8002c74:	f001 fc0c 	bl	8004490 <BMI088_ReadAccelerometer>
		  //filterUpdate((imu.gyr_rps[0]-gyro_offset_x), (imu.gyr_rps[1]-gyro_offset_y), imu.gyr_rps[2], imu.acc_mps2[0], imu.acc_mps2[1], (imu.gyr_rps[2]-gyro_offset_z), mag_data_y, -mag_data_x, mag_data_z, &q, &f, &w);


		  //eulerAngles(q, &roll, &pitch, &yaw);

		  gyro_x_degree = ((imu.gyr_rps[0]-gyro_offset_x)*57.29);
 8002c78:	4bc4      	ldr	r3, [pc, #784]	; (8002f8c <Start_Data_Reading+0x8a4>)
 8002c7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f7fd fc63 	bl	8000548 <__aeabi_f2d>
 8002c82:	4bc3      	ldr	r3, [pc, #780]	; (8002f90 <Start_Data_Reading+0x8a8>)
 8002c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c88:	f7fd fafe 	bl	8000288 <__aeabi_dsub>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	460b      	mov	r3, r1
 8002c90:	4610      	mov	r0, r2
 8002c92:	4619      	mov	r1, r3
 8002c94:	a3b4      	add	r3, pc, #720	; (adr r3, 8002f68 <Start_Data_Reading+0x880>)
 8002c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c9a:	f7fd fcad 	bl	80005f8 <__aeabi_dmul>
 8002c9e:	4602      	mov	r2, r0
 8002ca0:	460b      	mov	r3, r1
 8002ca2:	4610      	mov	r0, r2
 8002ca4:	4619      	mov	r1, r3
 8002ca6:	f7fd ff9f 	bl	8000be8 <__aeabi_d2f>
 8002caa:	4603      	mov	r3, r0
 8002cac:	4ab9      	ldr	r2, [pc, #740]	; (8002f94 <Start_Data_Reading+0x8ac>)
 8002cae:	6013      	str	r3, [r2, #0]
		  gyro_y_degree = ((imu.gyr_rps[1]-gyro_offset_x)*57.29);
 8002cb0:	4bb6      	ldr	r3, [pc, #728]	; (8002f8c <Start_Data_Reading+0x8a4>)
 8002cb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f7fd fc47 	bl	8000548 <__aeabi_f2d>
 8002cba:	4bb5      	ldr	r3, [pc, #724]	; (8002f90 <Start_Data_Reading+0x8a8>)
 8002cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cc0:	f7fd fae2 	bl	8000288 <__aeabi_dsub>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	460b      	mov	r3, r1
 8002cc8:	4610      	mov	r0, r2
 8002cca:	4619      	mov	r1, r3
 8002ccc:	a3a6      	add	r3, pc, #664	; (adr r3, 8002f68 <Start_Data_Reading+0x880>)
 8002cce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cd2:	f7fd fc91 	bl	80005f8 <__aeabi_dmul>
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	460b      	mov	r3, r1
 8002cda:	4610      	mov	r0, r2
 8002cdc:	4619      	mov	r1, r3
 8002cde:	f7fd ff83 	bl	8000be8 <__aeabi_d2f>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	4aac      	ldr	r2, [pc, #688]	; (8002f98 <Start_Data_Reading+0x8b0>)
 8002ce6:	6013      	str	r3, [r2, #0]
		  gyro_z_degree = ((imu.gyr_rps[2]-gyro_offset_x)*57.29);
 8002ce8:	4ba8      	ldr	r3, [pc, #672]	; (8002f8c <Start_Data_Reading+0x8a4>)
 8002cea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cec:	4618      	mov	r0, r3
 8002cee:	f7fd fc2b 	bl	8000548 <__aeabi_f2d>
 8002cf2:	4ba7      	ldr	r3, [pc, #668]	; (8002f90 <Start_Data_Reading+0x8a8>)
 8002cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cf8:	f7fd fac6 	bl	8000288 <__aeabi_dsub>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	460b      	mov	r3, r1
 8002d00:	4610      	mov	r0, r2
 8002d02:	4619      	mov	r1, r3
 8002d04:	a398      	add	r3, pc, #608	; (adr r3, 8002f68 <Start_Data_Reading+0x880>)
 8002d06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d0a:	f7fd fc75 	bl	80005f8 <__aeabi_dmul>
 8002d0e:	4602      	mov	r2, r0
 8002d10:	460b      	mov	r3, r1
 8002d12:	4610      	mov	r0, r2
 8002d14:	4619      	mov	r1, r3
 8002d16:	f7fd ff67 	bl	8000be8 <__aeabi_d2f>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	4a9f      	ldr	r2, [pc, #636]	; (8002f9c <Start_Data_Reading+0x8b4>)
 8002d1e:	6013      	str	r3, [r2, #0]


		  magneto_data = FusionVectorSubtract(magneto_data, magneto_offset);
 8002d20:	ed97 5a35 	vldr	s10, [r7, #212]	; 0xd4
 8002d24:	edd7 5a36 	vldr	s11, [r7, #216]	; 0xd8
 8002d28:	ed97 6a37 	vldr	s12, [r7, #220]	; 0xdc
 8002d2c:	edd7 6a29 	vldr	s13, [r7, #164]	; 0xa4
 8002d30:	ed97 7a2a 	vldr	s14, [r7, #168]	; 0xa8
 8002d34:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8002d38:	eef0 1a45 	vmov.f32	s3, s10
 8002d3c:	eeb0 2a65 	vmov.f32	s4, s11
 8002d40:	eef0 2a46 	vmov.f32	s5, s12
 8002d44:	eeb0 0a66 	vmov.f32	s0, s13
 8002d48:	eef0 0a47 	vmov.f32	s1, s14
 8002d4c:	eeb0 1a67 	vmov.f32	s2, s15
 8002d50:	f7fe f976 	bl	8001040 <FusionVectorSubtract>
 8002d54:	eef0 6a40 	vmov.f32	s13, s0
 8002d58:	eeb0 7a60 	vmov.f32	s14, s1
 8002d5c:	eef0 7a41 	vmov.f32	s15, s2
 8002d60:	edc7 6a29 	vstr	s13, [r7, #164]	; 0xa4
 8002d64:	ed87 7a2a 	vstr	s14, [r7, #168]	; 0xa8
 8002d68:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
//		  magneto_data = FusionMatrixMultiplyVector(magneto_transform, FusionVectorSubtract(magneto_data, magneto_offset));

		  const FusionVector gyroscope = {gyro_x_degree, gyro_y_degree, gyro_z_degree};
 8002d6c:	4b89      	ldr	r3, [pc, #548]	; (8002f94 <Start_Data_Reading+0x8ac>)
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8002d74:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8002d78:	601a      	str	r2, [r3, #0]
 8002d7a:	4b87      	ldr	r3, [pc, #540]	; (8002f98 <Start_Data_Reading+0x8b0>)
 8002d7c:	681a      	ldr	r2, [r3, #0]
 8002d7e:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8002d82:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8002d86:	605a      	str	r2, [r3, #4]
 8002d88:	4b84      	ldr	r3, [pc, #528]	; (8002f9c <Start_Data_Reading+0x8b4>)
 8002d8a:	681a      	ldr	r2, [r3, #0]
 8002d8c:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8002d90:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8002d94:	609a      	str	r2, [r3, #8]
		  const FusionVector accelerometer = {imu.acc_mps2[0]/9.81, imu.acc_mps2[1]/9.81, imu.acc_mps2[2]/9.81};
 8002d96:	4b7d      	ldr	r3, [pc, #500]	; (8002f8c <Start_Data_Reading+0x8a4>)
 8002d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f7fd fbd4 	bl	8000548 <__aeabi_f2d>
 8002da0:	a373      	add	r3, pc, #460	; (adr r3, 8002f70 <Start_Data_Reading+0x888>)
 8002da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002da6:	f7fd fd51 	bl	800084c <__aeabi_ddiv>
 8002daa:	4602      	mov	r2, r0
 8002dac:	460b      	mov	r3, r1
 8002dae:	4610      	mov	r0, r2
 8002db0:	4619      	mov	r1, r3
 8002db2:	f7fd ff19 	bl	8000be8 <__aeabi_d2f>
 8002db6:	4602      	mov	r2, r0
 8002db8:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8002dbc:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002dc0:	601a      	str	r2, [r3, #0]
 8002dc2:	4b72      	ldr	r3, [pc, #456]	; (8002f8c <Start_Data_Reading+0x8a4>)
 8002dc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f7fd fbbe 	bl	8000548 <__aeabi_f2d>
 8002dcc:	a368      	add	r3, pc, #416	; (adr r3, 8002f70 <Start_Data_Reading+0x888>)
 8002dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dd2:	f7fd fd3b 	bl	800084c <__aeabi_ddiv>
 8002dd6:	4602      	mov	r2, r0
 8002dd8:	460b      	mov	r3, r1
 8002dda:	4610      	mov	r0, r2
 8002ddc:	4619      	mov	r1, r3
 8002dde:	f7fd ff03 	bl	8000be8 <__aeabi_d2f>
 8002de2:	4602      	mov	r2, r0
 8002de4:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8002de8:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002dec:	605a      	str	r2, [r3, #4]
 8002dee:	4b67      	ldr	r3, [pc, #412]	; (8002f8c <Start_Data_Reading+0x8a4>)
 8002df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df2:	4618      	mov	r0, r3
 8002df4:	f7fd fba8 	bl	8000548 <__aeabi_f2d>
 8002df8:	a35d      	add	r3, pc, #372	; (adr r3, 8002f70 <Start_Data_Reading+0x888>)
 8002dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dfe:	f7fd fd25 	bl	800084c <__aeabi_ddiv>
 8002e02:	4602      	mov	r2, r0
 8002e04:	460b      	mov	r3, r1
 8002e06:	4610      	mov	r0, r2
 8002e08:	4619      	mov	r1, r3
 8002e0a:	f7fd feed 	bl	8000be8 <__aeabi_d2f>
 8002e0e:	4602      	mov	r2, r0
 8002e10:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8002e14:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002e18:	609a      	str	r2, [r3, #8]
		  const FusionVector magnetometer = {magneto_data.axis.x, magneto_data.axis.y, magneto_data.axis.z};
 8002e1a:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8002e1e:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8002e22:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002e26:	601a      	str	r2, [r3, #0]
 8002e28:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002e2c:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8002e30:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002e34:	605a      	str	r2, [r3, #4]
 8002e36:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002e3a:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8002e3e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002e42:	609a      	str	r2, [r3, #8]



		  //FusionAhrsUpdateNoMagnetometer(&ahrs, gyroscope, accelerometer, SAMPLE_PERIOD);
		  FusionAhrsUpdate(&ahrs, gyroscope, accelerometer, magnetometer, SAMPLE_PERIOD);
 8002e44:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8002e48:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002e4c:	ed93 3a00 	vldr	s6, [r3]
 8002e50:	edd3 3a01 	vldr	s7, [r3, #4]
 8002e54:	ed93 4a02 	vldr	s8, [r3, #8]
 8002e58:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8002e5c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002e60:	ed93 5a00 	vldr	s10, [r3]
 8002e64:	edd3 5a01 	vldr	s11, [r3, #4]
 8002e68:	ed93 6a02 	vldr	s12, [r3, #8]
 8002e6c:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8002e70:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8002e74:	edd3 6a00 	vldr	s13, [r3]
 8002e78:	ed93 7a01 	vldr	s14, [r3, #4]
 8002e7c:	edd3 7a02 	vldr	s15, [r3, #8]
 8002e80:	eddf 4a47 	vldr	s9, [pc, #284]	; 8002fa0 <Start_Data_Reading+0x8b8>
 8002e84:	eef0 1a45 	vmov.f32	s3, s10
 8002e88:	eeb0 2a65 	vmov.f32	s4, s11
 8002e8c:	eef0 2a46 	vmov.f32	s5, s12
 8002e90:	eeb0 0a66 	vmov.f32	s0, s13
 8002e94:	eef0 0a47 	vmov.f32	s1, s14
 8002e98:	eeb0 1a67 	vmov.f32	s2, s15
 8002e9c:	4841      	ldr	r0, [pc, #260]	; (8002fa4 <Start_Data_Reading+0x8bc>)
 8002e9e:	f009 fd37 	bl	800c910 <FusionAhrsUpdate>
		  euler = FusionQuaternionToEuler(FusionAhrsGetQuaternion(&ahrs));
 8002ea2:	4840      	ldr	r0, [pc, #256]	; (8002fa4 <Start_Data_Reading+0x8bc>)
 8002ea4:	f00a fb58 	bl	800d558 <FusionAhrsGetQuaternion>
 8002ea8:	eeb0 6a40 	vmov.f32	s12, s0
 8002eac:	eef0 6a60 	vmov.f32	s13, s1
 8002eb0:	eeb0 7a41 	vmov.f32	s14, s2
 8002eb4:	eef0 7a61 	vmov.f32	s15, s3
 8002eb8:	ed87 6a38 	vstr	s12, [r7, #224]	; 0xe0
 8002ebc:	edc7 6a39 	vstr	s13, [r7, #228]	; 0xe4
 8002ec0:	ed87 7a3a 	vstr	s14, [r7, #232]	; 0xe8
 8002ec4:	edc7 7a3b 	vstr	s15, [r7, #236]	; 0xec
 8002ec8:	ed97 6a38 	vldr	s12, [r7, #224]	; 0xe0
 8002ecc:	edd7 6a39 	vldr	s13, [r7, #228]	; 0xe4
 8002ed0:	ed97 7a3a 	vldr	s14, [r7, #232]	; 0xe8
 8002ed4:	edd7 7a3b 	vldr	s15, [r7, #236]	; 0xec
 8002ed8:	eeb0 0a46 	vmov.f32	s0, s12
 8002edc:	eef0 0a66 	vmov.f32	s1, s13
 8002ee0:	eeb0 1a47 	vmov.f32	s2, s14
 8002ee4:	eef0 1a67 	vmov.f32	s3, s15
 8002ee8:	f7fe fa81 	bl	80013ee <FusionQuaternionToEuler>
 8002eec:	eef0 6a40 	vmov.f32	s13, s0
 8002ef0:	eeb0 7a60 	vmov.f32	s14, s1
 8002ef4:	eef0 7a41 	vmov.f32	s15, s2
 8002ef8:	4b2b      	ldr	r3, [pc, #172]	; (8002fa8 <Start_Data_Reading+0x8c0>)
 8002efa:	edc3 6a00 	vstr	s13, [r3]
 8002efe:	ed83 7a01 	vstr	s14, [r3, #4]
 8002f02:	edc3 7a02 	vstr	s15, [r3, #8]
		  // Rotation matrix from sensor frame to earth(NWU) frame
		  ERS = FusionQuaternionToMatrix(FusionAhrsGetQuaternion(&ahrs));
 8002f06:	4827      	ldr	r0, [pc, #156]	; (8002fa4 <Start_Data_Reading+0x8bc>)
 8002f08:	f00a fb26 	bl	800d558 <FusionAhrsGetQuaternion>
 8002f0c:	eeb0 6a40 	vmov.f32	s12, s0
 8002f10:	eef0 6a60 	vmov.f32	s13, s1
 8002f14:	eeb0 7a41 	vmov.f32	s14, s2
 8002f18:	eef0 7a61 	vmov.f32	s15, s3
 8002f1c:	ed87 6a3c 	vstr	s12, [r7, #240]	; 0xf0
 8002f20:	edc7 6a3d 	vstr	s13, [r7, #244]	; 0xf4
 8002f24:	ed87 7a3e 	vstr	s14, [r7, #248]	; 0xf8
 8002f28:	edc7 7a3f 	vstr	s15, [r7, #252]	; 0xfc
 8002f2c:	4c1f      	ldr	r4, [pc, #124]	; (8002fac <Start_Data_Reading+0x8c4>)
 8002f2e:	463b      	mov	r3, r7
 8002f30:	ed97 6a3c 	vldr	s12, [r7, #240]	; 0xf0
 8002f34:	edd7 6a3d 	vldr	s13, [r7, #244]	; 0xf4
 8002f38:	ed97 7a3e 	vldr	s14, [r7, #248]	; 0xf8
 8002f3c:	edd7 7a3f 	vldr	s15, [r7, #252]	; 0xfc
 8002f40:	eeb0 0a46 	vmov.f32	s0, s12
 8002f44:	eef0 0a66 	vmov.f32	s1, s13
 8002f48:	eeb0 1a47 	vmov.f32	s2, s14
 8002f4c:	eef0 1a67 	vmov.f32	s3, s15
 8002f50:	4618      	mov	r0, r3
 8002f52:	f7fe f97f 	bl	8001254 <FusionQuaternionToMatrix>
 8002f56:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8002f5a:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8002f5e:	461d      	mov	r5, r3
 8002f60:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002f62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002f64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002f66:	e025      	b.n	8002fb4 <Start_Data_Reading+0x8cc>
 8002f68:	b851eb85 	.word	0xb851eb85
 8002f6c:	404ca51e 	.word	0x404ca51e
 8002f70:	51eb851f 	.word	0x51eb851f
 8002f74:	40239eb8 	.word	0x40239eb8
 8002f78:	20002ab8 	.word	0x20002ab8
 8002f7c:	20000a20 	.word	0x20000a20
 8002f80:	20000b78 	.word	0x20000b78
 8002f84:	20000a24 	.word	0x20000a24
 8002f88:	20001b18 	.word	0x20001b18
 8002f8c:	20000970 	.word	0x20000970
 8002f90:	20000b60 	.word	0x20000b60
 8002f94:	20000a48 	.word	0x20000a48
 8002f98:	20000a4c 	.word	0x20000a4c
 8002f9c:	20000a50 	.word	0x20000a50
 8002fa0:	3ba3d70a 	.word	0x3ba3d70a
 8002fa4:	20000a70 	.word	0x20000a70
 8002fa8:	20000ae4 	.word	0x20000ae4
 8002fac:	20000af0 	.word	0x20000af0
 8002fb0:	411cf5c3 	.word	0x411cf5c3
 8002fb4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002fb6:	682b      	ldr	r3, [r5, #0]
 8002fb8:	6023      	str	r3, [r4, #0]
		  aE = FusionMatrixMultiplyVector(ERS, FusionVectorMultiplyScalar(accelerometer, 9.81));
 8002fba:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8002fbe:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002fc2:	edd3 6a00 	vldr	s13, [r3]
 8002fc6:	ed93 7a01 	vldr	s14, [r3, #4]
 8002fca:	edd3 7a02 	vldr	s15, [r3, #8]
 8002fce:	ed5f 1a08 	vldr	s3, [pc, #-32]	; 8002fb0 <Start_Data_Reading+0x8c8>
 8002fd2:	eeb0 0a66 	vmov.f32	s0, s13
 8002fd6:	eef0 0a47 	vmov.f32	s1, s14
 8002fda:	eeb0 1a67 	vmov.f32	s2, s15
 8002fde:	f7fe f87d 	bl	80010dc <FusionVectorMultiplyScalar>
 8002fe2:	eef0 6a40 	vmov.f32	s13, s0
 8002fe6:	eeb0 7a60 	vmov.f32	s14, s1
 8002fea:	eef0 7a41 	vmov.f32	s15, s2
 8002fee:	edc7 6a40 	vstr	s13, [r7, #256]	; 0x100
 8002ff2:	ed87 7a41 	vstr	s14, [r7, #260]	; 0x104
 8002ff6:	edc7 7a42 	vstr	s15, [r7, #264]	; 0x108
 8002ffa:	edd7 6a40 	vldr	s13, [r7, #256]	; 0x100
 8002ffe:	ed97 7a41 	vldr	s14, [r7, #260]	; 0x104
 8003002:	edd7 7a42 	vldr	s15, [r7, #264]	; 0x108
 8003006:	4ee2      	ldr	r6, [pc, #904]	; (8003390 <Start_Data_Reading+0xca8>)
 8003008:	466d      	mov	r5, sp
 800300a:	f106 0410 	add.w	r4, r6, #16
 800300e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003010:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003012:	6823      	ldr	r3, [r4, #0]
 8003014:	602b      	str	r3, [r5, #0]
 8003016:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800301a:	eeb0 0a66 	vmov.f32	s0, s13
 800301e:	eef0 0a47 	vmov.f32	s1, s14
 8003022:	eeb0 1a67 	vmov.f32	s2, s15
 8003026:	f7fe f89d 	bl	8001164 <FusionMatrixMultiplyVector>
 800302a:	eef0 6a40 	vmov.f32	s13, s0
 800302e:	eeb0 7a60 	vmov.f32	s14, s1
 8003032:	eef0 7a41 	vmov.f32	s15, s2
 8003036:	4bd7      	ldr	r3, [pc, #860]	; (8003394 <Start_Data_Reading+0xcac>)
 8003038:	edc3 6a00 	vstr	s13, [r3]
 800303c:	ed83 7a01 	vstr	s14, [r3, #4]
 8003040:	edc3 7a02 	vstr	s15, [r3, #8]
		  aE.axis.z -=9.85173;
 8003044:	4bd3      	ldr	r3, [pc, #844]	; (8003394 <Start_Data_Reading+0xcac>)
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	4618      	mov	r0, r3
 800304a:	f7fd fa7d 	bl	8000548 <__aeabi_f2d>
 800304e:	a3ce      	add	r3, pc, #824	; (adr r3, 8003388 <Start_Data_Reading+0xca0>)
 8003050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003054:	f7fd f918 	bl	8000288 <__aeabi_dsub>
 8003058:	4602      	mov	r2, r0
 800305a:	460b      	mov	r3, r1
 800305c:	4610      	mov	r0, r2
 800305e:	4619      	mov	r1, r3
 8003060:	f7fd fdc2 	bl	8000be8 <__aeabi_d2f>
 8003064:	4603      	mov	r3, r0
 8003066:	4acb      	ldr	r2, [pc, #812]	; (8003394 <Start_Data_Reading+0xcac>)
 8003068:	6093      	str	r3, [r2, #8]
		  //python
//		  sprintf((char*)transmit_data, "Uni:0,0,0,0,0,0,%5.2f,%5.2f,%5.2f\r\n", mag_data_y, (-mag_data_x), mag_data_z); //%5.2f
//		  HAL_UART_Transmit (&huart2, transmit_data, sizeof (transmit_data), 100);
//		  HAL_Delay(1);
		  //motioncal
		  sprintf((char*)transmit_data, "Raw:0,0,0,0,0,0,%d,%d,%d\r\n", (int)(magnetometer.axis.x*10), (int)((magnetometer.axis.y)*10), (int)(magnetometer.axis.z)*10); //%5.2f
 800306a:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800306e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003072:	edd3 7a00 	vldr	s15, [r3]
 8003076:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800307a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800307e:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 8003082:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8003086:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800308a:	edd3 7a01 	vldr	s15, [r3, #4]
 800308e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003092:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003096:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800309a:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800309e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80030a2:	edd3 7a02 	vldr	s15, [r3, #8]
 80030a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80030aa:	ee17 2a90 	vmov	r2, s15
 80030ae:	4613      	mov	r3, r2
 80030b0:	009b      	lsls	r3, r3, #2
 80030b2:	4413      	add	r3, r2
 80030b4:	005b      	lsls	r3, r3, #1
 80030b6:	f107 0054 	add.w	r0, r7, #84	; 0x54
 80030ba:	9300      	str	r3, [sp, #0]
 80030bc:	ee17 3a10 	vmov	r3, s14
 80030c0:	ee16 2a90 	vmov	r2, s13
 80030c4:	49b4      	ldr	r1, [pc, #720]	; (8003398 <Start_Data_Reading+0xcb0>)
 80030c6:	f00c f983 	bl	800f3d0 <siprintf>
		  HAL_UART_Transmit (&huart2, transmit_data, sizeof (transmit_data), 100);
 80030ca:	f107 0154 	add.w	r1, r7, #84	; 0x54
 80030ce:	2364      	movs	r3, #100	; 0x64
 80030d0:	2250      	movs	r2, #80	; 0x50
 80030d2:	48b2      	ldr	r0, [pc, #712]	; (800339c <Start_Data_Reading+0xcb4>)
 80030d4:	f007 fc7b 	bl	800a9ce <HAL_UART_Transmit>


		  //altitudeKF(prev_state, &current_state, P_prev, &P, meas);
		  M_throttle = CRSFtoDuty(RX_throttle);
 80030d8:	4bb1      	ldr	r3, [pc, #708]	; (80033a0 <Start_Data_Reading+0xcb8>)
 80030da:	881b      	ldrh	r3, [r3, #0]
 80030dc:	4618      	mov	r0, r3
 80030de:	f002 fda3 	bl	8005c28 <CRSFtoDuty>
 80030e2:	eef0 7a40 	vmov.f32	s15, s0
 80030e6:	4baf      	ldr	r3, [pc, #700]	; (80033a4 <Start_Data_Reading+0xcbc>)
 80030e8:	edc3 7a00 	vstr	s15, [r3]
		  M_pitch = CRSFtoPitch(RX_pitch)*25;
 80030ec:	4bae      	ldr	r3, [pc, #696]	; (80033a8 <Start_Data_Reading+0xcc0>)
 80030ee:	881b      	ldrh	r3, [r3, #0]
 80030f0:	4618      	mov	r0, r3
 80030f2:	f002 fdcf 	bl	8005c94 <CRSFtoPitch>
 80030f6:	eef0 7a40 	vmov.f32	s15, s0
 80030fa:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 80030fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003102:	4baa      	ldr	r3, [pc, #680]	; (80033ac <Start_Data_Reading+0xcc4>)
 8003104:	edc3 7a00 	vstr	s15, [r3]
		  M_roll = CRSFtoRoll(RX_roll)*15;
 8003108:	4ba9      	ldr	r3, [pc, #676]	; (80033b0 <Start_Data_Reading+0xcc8>)
 800310a:	881b      	ldrh	r3, [r3, #0]
 800310c:	4618      	mov	r0, r3
 800310e:	f002 fddf 	bl	8005cd0 <CRSFtoRoll>
 8003112:	eef0 7a40 	vmov.f32	s15, s0
 8003116:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 800311a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800311e:	4ba5      	ldr	r3, [pc, #660]	; (80033b4 <Start_Data_Reading+0xccc>)
 8003120:	edc3 7a00 	vstr	s15, [r3]
		  M_yaw = CRSFtoYaw(RX_yaw)*0.5;
 8003124:	4ba4      	ldr	r3, [pc, #656]	; (80033b8 <Start_Data_Reading+0xcd0>)
 8003126:	881b      	ldrh	r3, [r3, #0]
 8003128:	4618      	mov	r0, r3
 800312a:	f002 fdef 	bl	8005d0c <CRSFtoYaw>
 800312e:	ee10 3a10 	vmov	r3, s0
 8003132:	4618      	mov	r0, r3
 8003134:	f7fd fa08 	bl	8000548 <__aeabi_f2d>
 8003138:	f04f 0200 	mov.w	r2, #0
 800313c:	4b9f      	ldr	r3, [pc, #636]	; (80033bc <Start_Data_Reading+0xcd4>)
 800313e:	f7fd fa5b 	bl	80005f8 <__aeabi_dmul>
 8003142:	4602      	mov	r2, r0
 8003144:	460b      	mov	r3, r1
 8003146:	4610      	mov	r0, r2
 8003148:	4619      	mov	r1, r3
 800314a:	f7fd fd4d 	bl	8000be8 <__aeabi_d2f>
 800314e:	4603      	mov	r3, r0
 8003150:	4a9b      	ldr	r2, [pc, #620]	; (80033c0 <Start_Data_Reading+0xcd8>)
 8003152:	6013      	str	r3, [r2, #0]

		  //pitch angle control
		  err_angle_pitch = M_pitch - euler.angle.pitch;
 8003154:	4b95      	ldr	r3, [pc, #596]	; (80033ac <Start_Data_Reading+0xcc4>)
 8003156:	ed93 7a00 	vldr	s14, [r3]
 800315a:	4b9a      	ldr	r3, [pc, #616]	; (80033c4 <Start_Data_Reading+0xcdc>)
 800315c:	edd3 7a01 	vldr	s15, [r3, #4]
 8003160:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003164:	edc7 7a59 	vstr	s15, [r7, #356]	; 0x164
		  errd_angle_pitch = (err_angle_pitch - prev_err_angle_pitch)/SAMPLE_PERIOD;
 8003168:	ed97 7a59 	vldr	s14, [r7, #356]	; 0x164
 800316c:	edd7 7a66 	vldr	s15, [r7, #408]	; 0x198
 8003170:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003174:	eddf 6a94 	vldr	s13, [pc, #592]	; 80033c8 <Start_Data_Reading+0xce0>
 8003178:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800317c:	edc7 7a58 	vstr	s15, [r7, #352]	; 0x160
		  angle_control_pitch = P_angle_pitch * err_angle_pitch + D_angle_pitch * errd_angle_pitch;
 8003180:	ed97 7a56 	vldr	s14, [r7, #344]	; 0x158
 8003184:	edd7 7a59 	vldr	s15, [r7, #356]	; 0x164
 8003188:	ee27 7a27 	vmul.f32	s14, s14, s15
 800318c:	edd7 6a55 	vldr	s13, [r7, #340]	; 0x154
 8003190:	edd7 7a58 	vldr	s15, [r7, #352]	; 0x160
 8003194:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003198:	ee77 7a27 	vadd.f32	s15, s14, s15
 800319c:	edc7 7a57 	vstr	s15, [r7, #348]	; 0x15c
		  prev_err_angle_pitch = err_angle_pitch;
 80031a0:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80031a4:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
		  //debug_control1 = err_angle_pitch;

		  //pitch angle velocity control
		  err_pitch = angle_control_pitch - imu.gyr_rps[1];
 80031a8:	4b88      	ldr	r3, [pc, #544]	; (80033cc <Start_Data_Reading+0xce4>)
 80031aa:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 80031ae:	ed97 7a57 	vldr	s14, [r7, #348]	; 0x15c
 80031b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80031b6:	edc7 7a5e 	vstr	s15, [r7, #376]	; 0x178
		  errd_pitch = (err_pitch - prev_err_pitch)/SAMPLE_PERIOD;
 80031ba:	ed97 7a5e 	vldr	s14, [r7, #376]	; 0x178
 80031be:	edd7 7a67 	vldr	s15, [r7, #412]	; 0x19c
 80031c2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80031c6:	eddf 6a80 	vldr	s13, [pc, #512]	; 80033c8 <Start_Data_Reading+0xce0>
 80031ca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80031ce:	edc7 7a5d 	vstr	s15, [r7, #372]	; 0x174
		  prev_err_pitch = err_pitch;
 80031d2:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 80031d6:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
		  control_pitch = P_pitch * err_pitch + D_pitch * errd_pitch;
 80031da:	ed97 7a5b 	vldr	s14, [r7, #364]	; 0x16c
 80031de:	edd7 7a5e 	vldr	s15, [r7, #376]	; 0x178
 80031e2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80031e6:	edd7 6a5a 	vldr	s13, [r7, #360]	; 0x168
 80031ea:	edd7 7a5d 	vldr	s15, [r7, #372]	; 0x174
 80031ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80031f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031f6:	edc7 7a5c 	vstr	s15, [r7, #368]	; 0x170

		  //roll angle control
		  err_angle_roll = M_roll - euler.angle.roll;
 80031fa:	4b6e      	ldr	r3, [pc, #440]	; (80033b4 <Start_Data_Reading+0xccc>)
 80031fc:	ed93 7a00 	vldr	s14, [r3]
 8003200:	4b70      	ldr	r3, [pc, #448]	; (80033c4 <Start_Data_Reading+0xcdc>)
 8003202:	edd3 7a00 	vldr	s15, [r3]
 8003206:	ee77 7a67 	vsub.f32	s15, s14, s15
 800320a:	edc7 7a4d 	vstr	s15, [r7, #308]	; 0x134
		  errd_angle_roll = (err_angle_roll - prev_err_angle_roll)/SAMPLE_PERIOD;
 800320e:	ed97 7a4d 	vldr	s14, [r7, #308]	; 0x134
 8003212:	edd7 7a64 	vldr	s15, [r7, #400]	; 0x190
 8003216:	ee37 7a67 	vsub.f32	s14, s14, s15
 800321a:	eddf 6a6b 	vldr	s13, [pc, #428]	; 80033c8 <Start_Data_Reading+0xce0>
 800321e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003222:	edc7 7a4c 	vstr	s15, [r7, #304]	; 0x130
		  angle_control_roll = P_angle_roll * err_angle_roll + D_angle_roll * errd_angle_roll;
 8003226:	ed97 7a4f 	vldr	s14, [r7, #316]	; 0x13c
 800322a:	edd7 7a4d 	vldr	s15, [r7, #308]	; 0x134
 800322e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003232:	edd7 6a4e 	vldr	s13, [r7, #312]	; 0x138
 8003236:	edd7 7a4c 	vldr	s15, [r7, #304]	; 0x130
 800323a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800323e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003242:	edc7 7a4b 	vstr	s15, [r7, #300]	; 0x12c
		  prev_err_angle_roll = err_angle_roll;
 8003246:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800324a:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
		  debug_control1 = err_angle_roll;
 800324e:	4a60      	ldr	r2, [pc, #384]	; (80033d0 <Start_Data_Reading+0xce8>)
 8003250:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003254:	6013      	str	r3, [r2, #0]


		  //roll angle velocity control
		  err_roll = angle_control_roll - imu.gyr_rps[0]; //M_roll
 8003256:	4b5d      	ldr	r3, [pc, #372]	; (80033cc <Start_Data_Reading+0xce4>)
 8003258:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800325c:	ed97 7a4b 	vldr	s14, [r7, #300]	; 0x12c
 8003260:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003264:	edc7 7a54 	vstr	s15, [r7, #336]	; 0x150
		  errd_roll = (err_roll - prev_err_roll)/SAMPLE_PERIOD;
 8003268:	ed97 7a54 	vldr	s14, [r7, #336]	; 0x150
 800326c:	edd7 7a65 	vldr	s15, [r7, #404]	; 0x194
 8003270:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003274:	eddf 6a54 	vldr	s13, [pc, #336]	; 80033c8 <Start_Data_Reading+0xce0>
 8003278:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800327c:	edc7 7a53 	vstr	s15, [r7, #332]	; 0x14c
		  prev_err_roll = err_roll;
 8003280:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8003284:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
		  control_roll = P_roll * err_roll + D_roll * errd_roll;
 8003288:	ed97 7a51 	vldr	s14, [r7, #324]	; 0x144
 800328c:	edd7 7a54 	vldr	s15, [r7, #336]	; 0x150
 8003290:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003294:	edd7 6a50 	vldr	s13, [r7, #320]	; 0x140
 8003298:	edd7 7a53 	vldr	s15, [r7, #332]	; 0x14c
 800329c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80032a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032a4:	edc7 7a52 	vstr	s15, [r7, #328]	; 0x148
		  debug_control2 = control_roll;
 80032a8:	4a4a      	ldr	r2, [pc, #296]	; (80033d4 <Start_Data_Reading+0xcec>)
 80032aa:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80032ae:	6013      	str	r3, [r2, #0]


		  //yaw angle control
		  err_angle_yaw = M_yaw - euler.angle.yaw;
 80032b0:	4b43      	ldr	r3, [pc, #268]	; (80033c0 <Start_Data_Reading+0xcd8>)
 80032b2:	ed93 7a00 	vldr	s14, [r3]
 80032b6:	4b43      	ldr	r3, [pc, #268]	; (80033c4 <Start_Data_Reading+0xcdc>)
 80032b8:	edd3 7a02 	vldr	s15, [r3, #8]
 80032bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80032c0:	edc7 7a45 	vstr	s15, [r7, #276]	; 0x114
		  errd_angle_yaw = (err_angle_yaw - prev_err_angle_yaw)/SAMPLE_PERIOD;
 80032c4:	ed97 7a45 	vldr	s14, [r7, #276]	; 0x114
 80032c8:	edd7 7a60 	vldr	s15, [r7, #384]	; 0x180
 80032cc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80032d0:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80033c8 <Start_Data_Reading+0xce0>
 80032d4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80032d8:	edc7 7a44 	vstr	s15, [r7, #272]	; 0x110
		  angle_control_yaw = P_angle_yaw * err_angle_yaw + D_angle_yaw * errd_angle_yaw;
 80032dc:	ed97 7a47 	vldr	s14, [r7, #284]	; 0x11c
 80032e0:	edd7 7a45 	vldr	s15, [r7, #276]	; 0x114
 80032e4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80032e8:	edd7 6a46 	vldr	s13, [r7, #280]	; 0x118
 80032ec:	edd7 7a44 	vldr	s15, [r7, #272]	; 0x110
 80032f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80032f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032f8:	edc7 7a43 	vstr	s15, [r7, #268]	; 0x10c
		  prev_err_angle_yaw = err_angle_yaw;
 80032fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003300:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180



		  //yaw angle velocity control
		  err_yaw = M_yaw - imu.gyr_rps[2]; //angle_control_yaw
 8003304:	4b2e      	ldr	r3, [pc, #184]	; (80033c0 <Start_Data_Reading+0xcd8>)
 8003306:	ed93 7a00 	vldr	s14, [r3]
 800330a:	4b30      	ldr	r3, [pc, #192]	; (80033cc <Start_Data_Reading+0xce4>)
 800330c:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8003310:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003314:	edc7 7a4a 	vstr	s15, [r7, #296]	; 0x128
		  errd_yaw = (err_yaw - prev_err_yaw)/SAMPLE_PERIOD;
 8003318:	ed97 7a4a 	vldr	s14, [r7, #296]	; 0x128
 800331c:	edd7 7a63 	vldr	s15, [r7, #396]	; 0x18c
 8003320:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003324:	eddf 6a28 	vldr	s13, [pc, #160]	; 80033c8 <Start_Data_Reading+0xce0>
 8003328:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800332c:	edc7 7a49 	vstr	s15, [r7, #292]	; 0x124
		  prev_err_yaw = err_yaw;
 8003330:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003334:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
		  control_yaw = P_yaw * err_yaw + D_yaw * errd_yaw;
 8003338:	ed97 7a62 	vldr	s14, [r7, #392]	; 0x188
 800333c:	edd7 7a4a 	vldr	s15, [r7, #296]	; 0x128
 8003340:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003344:	edd7 6a61 	vldr	s13, [r7, #388]	; 0x184
 8003348:	edd7 7a49 	vldr	s15, [r7, #292]	; 0x124
 800334c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003350:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003354:	edc7 7a48 	vstr	s15, [r7, #288]	; 0x120



		  if(RX_arm > 1000){
 8003358:	4b1f      	ldr	r3, [pc, #124]	; (80033d8 <Start_Data_Reading+0xcf0>)
 800335a:	881b      	ldrh	r3, [r3, #0]
 800335c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003360:	f240 8093 	bls.w	800348a <Start_Data_Reading+0xda2>
			  uart_telemetria = 0;
 8003364:	4b1d      	ldr	r3, [pc, #116]	; (80033dc <Start_Data_Reading+0xcf4>)
 8003366:	2200      	movs	r2, #0
 8003368:	701a      	strb	r2, [r3, #0]
//			  ref2 = (uint16_t)(M_throttle - control_roll);
//			  ref3 = (uint16_t)(M_throttle - control_roll);
//			  ref4 = (uint16_t)(M_throttle + control_roll);

			  //yaw
			  ref1 = (uint16_t)(M_throttle - control_yaw);
 800336a:	4b0e      	ldr	r3, [pc, #56]	; (80033a4 <Start_Data_Reading+0xcbc>)
 800336c:	ed93 7a00 	vldr	s14, [r3]
 8003370:	edd7 7a48 	vldr	s15, [r7, #288]	; 0x120
 8003374:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003378:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800337c:	ee17 3a90 	vmov	r3, s15
 8003380:	b29a      	uxth	r2, r3
 8003382:	4b17      	ldr	r3, [pc, #92]	; (80033e0 <Start_Data_Reading+0xcf8>)
 8003384:	801a      	strh	r2, [r3, #0]
 8003386:	e02d      	b.n	80033e4 <Start_Data_Reading+0xcfc>
 8003388:	f45e0b4e 	.word	0xf45e0b4e
 800338c:	4023b415 	.word	0x4023b415
 8003390:	20000af0 	.word	0x20000af0
 8003394:	20000b14 	.word	0x20000b14
 8003398:	08013df8 	.word	0x08013df8
 800339c:	20000838 	.word	0x20000838
 80033a0:	20002b10 	.word	0x20002b10
 80033a4:	20002b14 	.word	0x20002b14
 80033a8:	20002b0c 	.word	0x20002b0c
 80033ac:	20002b18 	.word	0x20002b18
 80033b0:	20002b0a 	.word	0x20002b0a
 80033b4:	20002b1c 	.word	0x20002b1c
 80033b8:	20002b0e 	.word	0x20002b0e
 80033bc:	3fe00000 	.word	0x3fe00000
 80033c0:	20002b20 	.word	0x20002b20
 80033c4:	20000ae4 	.word	0x20000ae4
 80033c8:	3ba3d70a 	.word	0x3ba3d70a
 80033cc:	20000970 	.word	0x20000970
 80033d0:	20002b24 	.word	0x20002b24
 80033d4:	20002b28 	.word	0x20002b28
 80033d8:	20002b12 	.word	0x20002b12
 80033dc:	20000b2e 	.word	0x20000b2e
 80033e0:	20002abc 	.word	0x20002abc
			  ref2 = (uint16_t)(M_throttle + control_yaw);
 80033e4:	4b46      	ldr	r3, [pc, #280]	; (8003500 <Start_Data_Reading+0xe18>)
 80033e6:	ed93 7a00 	vldr	s14, [r3]
 80033ea:	edd7 7a48 	vldr	s15, [r7, #288]	; 0x120
 80033ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80033f6:	ee17 3a90 	vmov	r3, s15
 80033fa:	b29a      	uxth	r2, r3
 80033fc:	4b41      	ldr	r3, [pc, #260]	; (8003504 <Start_Data_Reading+0xe1c>)
 80033fe:	801a      	strh	r2, [r3, #0]
			  ref3 = (uint16_t)(M_throttle - control_yaw);
 8003400:	4b3f      	ldr	r3, [pc, #252]	; (8003500 <Start_Data_Reading+0xe18>)
 8003402:	ed93 7a00 	vldr	s14, [r3]
 8003406:	edd7 7a48 	vldr	s15, [r7, #288]	; 0x120
 800340a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800340e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003412:	ee17 3a90 	vmov	r3, s15
 8003416:	b29a      	uxth	r2, r3
 8003418:	4b3b      	ldr	r3, [pc, #236]	; (8003508 <Start_Data_Reading+0xe20>)
 800341a:	801a      	strh	r2, [r3, #0]
			  ref4 = (uint16_t)(M_throttle + control_yaw);
 800341c:	4b38      	ldr	r3, [pc, #224]	; (8003500 <Start_Data_Reading+0xe18>)
 800341e:	ed93 7a00 	vldr	s14, [r3]
 8003422:	edd7 7a48 	vldr	s15, [r7, #288]	; 0x120
 8003426:	ee77 7a27 	vadd.f32	s15, s14, s15
 800342a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800342e:	ee17 3a90 	vmov	r3, s15
 8003432:	b29a      	uxth	r2, r3
 8003434:	4b35      	ldr	r3, [pc, #212]	; (800350c <Start_Data_Reading+0xe24>)
 8003436:	801a      	strh	r2, [r3, #0]

			  if(ref1<550) ref1 = 550;
 8003438:	4b35      	ldr	r3, [pc, #212]	; (8003510 <Start_Data_Reading+0xe28>)
 800343a:	881b      	ldrh	r3, [r3, #0]
 800343c:	f240 2225 	movw	r2, #549	; 0x225
 8003440:	4293      	cmp	r3, r2
 8003442:	d803      	bhi.n	800344c <Start_Data_Reading+0xd64>
 8003444:	4b32      	ldr	r3, [pc, #200]	; (8003510 <Start_Data_Reading+0xe28>)
 8003446:	f240 2226 	movw	r2, #550	; 0x226
 800344a:	801a      	strh	r2, [r3, #0]
			  if(ref2<550) ref2 = 550;
 800344c:	4b2d      	ldr	r3, [pc, #180]	; (8003504 <Start_Data_Reading+0xe1c>)
 800344e:	881b      	ldrh	r3, [r3, #0]
 8003450:	f240 2225 	movw	r2, #549	; 0x225
 8003454:	4293      	cmp	r3, r2
 8003456:	d803      	bhi.n	8003460 <Start_Data_Reading+0xd78>
 8003458:	4b2a      	ldr	r3, [pc, #168]	; (8003504 <Start_Data_Reading+0xe1c>)
 800345a:	f240 2226 	movw	r2, #550	; 0x226
 800345e:	801a      	strh	r2, [r3, #0]
			  if(ref3<550) ref3 = 550;
 8003460:	4b29      	ldr	r3, [pc, #164]	; (8003508 <Start_Data_Reading+0xe20>)
 8003462:	881b      	ldrh	r3, [r3, #0]
 8003464:	f240 2225 	movw	r2, #549	; 0x225
 8003468:	4293      	cmp	r3, r2
 800346a:	d803      	bhi.n	8003474 <Start_Data_Reading+0xd8c>
 800346c:	4b26      	ldr	r3, [pc, #152]	; (8003508 <Start_Data_Reading+0xe20>)
 800346e:	f240 2226 	movw	r2, #550	; 0x226
 8003472:	801a      	strh	r2, [r3, #0]
			  if(ref4<550) ref4 = 550;
 8003474:	4b25      	ldr	r3, [pc, #148]	; (800350c <Start_Data_Reading+0xe24>)
 8003476:	881b      	ldrh	r3, [r3, #0]
 8003478:	f240 2225 	movw	r2, #549	; 0x225
 800347c:	4293      	cmp	r3, r2
 800347e:	d82d      	bhi.n	80034dc <Start_Data_Reading+0xdf4>
 8003480:	4b22      	ldr	r3, [pc, #136]	; (800350c <Start_Data_Reading+0xe24>)
 8003482:	f240 2226 	movw	r2, #550	; 0x226
 8003486:	801a      	strh	r2, [r3, #0]
 8003488:	e028      	b.n	80034dc <Start_Data_Reading+0xdf4>
//			  ref2 = (uint16_t)CRSFtoDuty(RX_throttle);
//			  ref3 = (uint16_t)CRSFtoDuty(RX_throttle);
//			  ref4 = (uint16_t)CRSFtoDuty(RX_throttle);
		  }
		  else{
			  uart_telemetria = 1;
 800348a:	4b22      	ldr	r3, [pc, #136]	; (8003514 <Start_Data_Reading+0xe2c>)
 800348c:	2201      	movs	r2, #1
 800348e:	701a      	strb	r2, [r3, #0]
			  if(new_P == 1){
 8003490:	4b21      	ldr	r3, [pc, #132]	; (8003518 <Start_Data_Reading+0xe30>)
 8003492:	781b      	ldrb	r3, [r3, #0]
 8003494:	2b01      	cmp	r3, #1
 8003496:	d106      	bne.n	80034a6 <Start_Data_Reading+0xdbe>
				  P_yaw = telem_P;
 8003498:	4b20      	ldr	r3, [pc, #128]	; (800351c <Start_Data_Reading+0xe34>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
				  new_P = 0;
 80034a0:	4b1d      	ldr	r3, [pc, #116]	; (8003518 <Start_Data_Reading+0xe30>)
 80034a2:	2200      	movs	r2, #0
 80034a4:	701a      	strb	r2, [r3, #0]
			  }
			  if(new_D == 1){
 80034a6:	4b1e      	ldr	r3, [pc, #120]	; (8003520 <Start_Data_Reading+0xe38>)
 80034a8:	781b      	ldrb	r3, [r3, #0]
 80034aa:	2b01      	cmp	r3, #1
 80034ac:	d106      	bne.n	80034bc <Start_Data_Reading+0xdd4>
				  D_yaw = telem_D;
 80034ae:	4b1d      	ldr	r3, [pc, #116]	; (8003524 <Start_Data_Reading+0xe3c>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
				  new_D = 0;
 80034b6:	4b1a      	ldr	r3, [pc, #104]	; (8003520 <Start_Data_Reading+0xe38>)
 80034b8:	2200      	movs	r2, #0
 80034ba:	701a      	strb	r2, [r3, #0]
			  }
			  ref1 = 550;
 80034bc:	4b14      	ldr	r3, [pc, #80]	; (8003510 <Start_Data_Reading+0xe28>)
 80034be:	f240 2226 	movw	r2, #550	; 0x226
 80034c2:	801a      	strh	r2, [r3, #0]
			  ref2 = 550;
 80034c4:	4b0f      	ldr	r3, [pc, #60]	; (8003504 <Start_Data_Reading+0xe1c>)
 80034c6:	f240 2226 	movw	r2, #550	; 0x226
 80034ca:	801a      	strh	r2, [r3, #0]
			  ref3 = 550;
 80034cc:	4b0e      	ldr	r3, [pc, #56]	; (8003508 <Start_Data_Reading+0xe20>)
 80034ce:	f240 2226 	movw	r2, #550	; 0x226
 80034d2:	801a      	strh	r2, [r3, #0]
			  ref4 = 550;
 80034d4:	4b0d      	ldr	r3, [pc, #52]	; (800350c <Start_Data_Reading+0xe24>)
 80034d6:	f240 2226 	movw	r2, #550	; 0x226
 80034da:	801a      	strh	r2, [r3, #0]




		  //set_duty_Oneshot42(&htim3, 550, 550, 550, 550);
		  set_duty_Oneshot42(&htim3, ref1, ref2, ref3, ref4);
 80034dc:	4b0c      	ldr	r3, [pc, #48]	; (8003510 <Start_Data_Reading+0xe28>)
 80034de:	8819      	ldrh	r1, [r3, #0]
 80034e0:	4b08      	ldr	r3, [pc, #32]	; (8003504 <Start_Data_Reading+0xe1c>)
 80034e2:	881a      	ldrh	r2, [r3, #0]
 80034e4:	4b08      	ldr	r3, [pc, #32]	; (8003508 <Start_Data_Reading+0xe20>)
 80034e6:	8818      	ldrh	r0, [r3, #0]
 80034e8:	4b08      	ldr	r3, [pc, #32]	; (800350c <Start_Data_Reading+0xe24>)
 80034ea:	881b      	ldrh	r3, [r3, #0]
 80034ec:	9300      	str	r3, [sp, #0]
 80034ee:	4603      	mov	r3, r0
 80034f0:	480d      	ldr	r0, [pc, #52]	; (8003528 <Start_Data_Reading+0xe40>)
 80034f2:	f002 fb76 	bl	8005be2 <set_duty_Oneshot42>
//	osDelay(3);
	osDelay(48);
 80034f6:	2030      	movs	r0, #48	; 0x30
 80034f8:	f00a f8bc 	bl	800d674 <osDelay>
  {
 80034fc:	f7ff bafa 	b.w	8002af4 <Start_Data_Reading+0x40c>
 8003500:	20002b14 	.word	0x20002b14
 8003504:	20002abe 	.word	0x20002abe
 8003508:	20002ac0 	.word	0x20002ac0
 800350c:	20002ac2 	.word	0x20002ac2
 8003510:	20002abc 	.word	0x20002abc
 8003514:	20000b2e 	.word	0x20000b2e
 8003518:	20000b38 	.word	0x20000b38
 800351c:	20000b30 	.word	0x20000b30
 8003520:	20000b39 	.word	0x20000b39
 8003524:	20000b34 	.word	0x20000b34
 8003528:	200006d4 	.word	0x200006d4

0800352c <Start_Orientation>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_Orientation */
void Start_Orientation(void const * argument)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b082      	sub	sp, #8
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
//		//filterUpdateIMU(imu.gyr_rps[0], imu.gyr_rps[1], imu.gyr_rps[2], imu.acc_mps2[0], imu.acc_mps2[1], imu.acc_mps2[2], &q );
//		filterUpdate(imu.gyr_rps[0], imu.gyr_rps[1], imu.gyr_rps[2], imu.acc_mps2[0], imu.acc_mps2[1], imu.acc_mps2[2], mag_data_y, -mag_data_x, mag_data_z, &q, &f);
//		eulerAngles(q, &roll, &pitch, &yaw);
//		oricalc = 0;
//	  }
    osDelay(1);
 8003534:	2001      	movs	r0, #1
 8003536:	f00a f89d 	bl	800d674 <osDelay>
 800353a:	e7fb      	b.n	8003534 <Start_Orientation+0x8>

0800353c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800353c:	b480      	push	{r7}
 800353e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003540:	b672      	cpsid	i
}
 8003542:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003544:	e7fe      	b.n	8003544 <Error_Handler+0x8>
	...

08003548 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b082      	sub	sp, #8
 800354c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800354e:	2300      	movs	r3, #0
 8003550:	607b      	str	r3, [r7, #4]
 8003552:	4b12      	ldr	r3, [pc, #72]	; (800359c <HAL_MspInit+0x54>)
 8003554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003556:	4a11      	ldr	r2, [pc, #68]	; (800359c <HAL_MspInit+0x54>)
 8003558:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800355c:	6453      	str	r3, [r2, #68]	; 0x44
 800355e:	4b0f      	ldr	r3, [pc, #60]	; (800359c <HAL_MspInit+0x54>)
 8003560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003562:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003566:	607b      	str	r3, [r7, #4]
 8003568:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800356a:	2300      	movs	r3, #0
 800356c:	603b      	str	r3, [r7, #0]
 800356e:	4b0b      	ldr	r3, [pc, #44]	; (800359c <HAL_MspInit+0x54>)
 8003570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003572:	4a0a      	ldr	r2, [pc, #40]	; (800359c <HAL_MspInit+0x54>)
 8003574:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003578:	6413      	str	r3, [r2, #64]	; 0x40
 800357a:	4b08      	ldr	r3, [pc, #32]	; (800359c <HAL_MspInit+0x54>)
 800357c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800357e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003582:	603b      	str	r3, [r7, #0]
 8003584:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003586:	2200      	movs	r2, #0
 8003588:	210f      	movs	r1, #15
 800358a:	f06f 0001 	mvn.w	r0, #1
 800358e:	f002 ffae 	bl	80064ee <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003592:	bf00      	nop
 8003594:	3708      	adds	r7, #8
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}
 800359a:	bf00      	nop
 800359c:	40023800 	.word	0x40023800

080035a0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b08e      	sub	sp, #56	; 0x38
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80035ac:	2200      	movs	r2, #0
 80035ae:	601a      	str	r2, [r3, #0]
 80035b0:	605a      	str	r2, [r3, #4]
 80035b2:	609a      	str	r2, [r3, #8]
 80035b4:	60da      	str	r2, [r3, #12]
 80035b6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a45      	ldr	r2, [pc, #276]	; (80036d4 <HAL_ADC_MspInit+0x134>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d128      	bne.n	8003614 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80035c2:	2300      	movs	r3, #0
 80035c4:	623b      	str	r3, [r7, #32]
 80035c6:	4b44      	ldr	r3, [pc, #272]	; (80036d8 <HAL_ADC_MspInit+0x138>)
 80035c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ca:	4a43      	ldr	r2, [pc, #268]	; (80036d8 <HAL_ADC_MspInit+0x138>)
 80035cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035d0:	6453      	str	r3, [r2, #68]	; 0x44
 80035d2:	4b41      	ldr	r3, [pc, #260]	; (80036d8 <HAL_ADC_MspInit+0x138>)
 80035d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035da:	623b      	str	r3, [r7, #32]
 80035dc:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035de:	2300      	movs	r3, #0
 80035e0:	61fb      	str	r3, [r7, #28]
 80035e2:	4b3d      	ldr	r3, [pc, #244]	; (80036d8 <HAL_ADC_MspInit+0x138>)
 80035e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035e6:	4a3c      	ldr	r2, [pc, #240]	; (80036d8 <HAL_ADC_MspInit+0x138>)
 80035e8:	f043 0301 	orr.w	r3, r3, #1
 80035ec:	6313      	str	r3, [r2, #48]	; 0x30
 80035ee:	4b3a      	ldr	r3, [pc, #232]	; (80036d8 <HAL_ADC_MspInit+0x138>)
 80035f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035f2:	f003 0301 	and.w	r3, r3, #1
 80035f6:	61fb      	str	r3, [r7, #28]
 80035f8:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = CRNT_Pin;
 80035fa:	2320      	movs	r3, #32
 80035fc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80035fe:	2303      	movs	r3, #3
 8003600:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003602:	2300      	movs	r3, #0
 8003604:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CRNT_GPIO_Port, &GPIO_InitStruct);
 8003606:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800360a:	4619      	mov	r1, r3
 800360c:	4833      	ldr	r0, [pc, #204]	; (80036dc <HAL_ADC_MspInit+0x13c>)
 800360e:	f003 fba7 	bl	8006d60 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8003612:	e05a      	b.n	80036ca <HAL_ADC_MspInit+0x12a>
  else if(hadc->Instance==ADC2)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a31      	ldr	r2, [pc, #196]	; (80036e0 <HAL_ADC_MspInit+0x140>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d128      	bne.n	8003670 <HAL_ADC_MspInit+0xd0>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800361e:	2300      	movs	r3, #0
 8003620:	61bb      	str	r3, [r7, #24]
 8003622:	4b2d      	ldr	r3, [pc, #180]	; (80036d8 <HAL_ADC_MspInit+0x138>)
 8003624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003626:	4a2c      	ldr	r2, [pc, #176]	; (80036d8 <HAL_ADC_MspInit+0x138>)
 8003628:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800362c:	6453      	str	r3, [r2, #68]	; 0x44
 800362e:	4b2a      	ldr	r3, [pc, #168]	; (80036d8 <HAL_ADC_MspInit+0x138>)
 8003630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003632:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003636:	61bb      	str	r3, [r7, #24]
 8003638:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800363a:	2300      	movs	r3, #0
 800363c:	617b      	str	r3, [r7, #20]
 800363e:	4b26      	ldr	r3, [pc, #152]	; (80036d8 <HAL_ADC_MspInit+0x138>)
 8003640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003642:	4a25      	ldr	r2, [pc, #148]	; (80036d8 <HAL_ADC_MspInit+0x138>)
 8003644:	f043 0301 	orr.w	r3, r3, #1
 8003648:	6313      	str	r3, [r2, #48]	; 0x30
 800364a:	4b23      	ldr	r3, [pc, #140]	; (80036d8 <HAL_ADC_MspInit+0x138>)
 800364c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800364e:	f003 0301 	and.w	r3, r3, #1
 8003652:	617b      	str	r3, [r7, #20]
 8003654:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003656:	2310      	movs	r3, #16
 8003658:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800365a:	2303      	movs	r3, #3
 800365c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800365e:	2300      	movs	r3, #0
 8003660:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003662:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003666:	4619      	mov	r1, r3
 8003668:	481c      	ldr	r0, [pc, #112]	; (80036dc <HAL_ADC_MspInit+0x13c>)
 800366a:	f003 fb79 	bl	8006d60 <HAL_GPIO_Init>
}
 800366e:	e02c      	b.n	80036ca <HAL_ADC_MspInit+0x12a>
  else if(hadc->Instance==ADC3)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a1b      	ldr	r2, [pc, #108]	; (80036e4 <HAL_ADC_MspInit+0x144>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d127      	bne.n	80036ca <HAL_ADC_MspInit+0x12a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 800367a:	2300      	movs	r3, #0
 800367c:	613b      	str	r3, [r7, #16]
 800367e:	4b16      	ldr	r3, [pc, #88]	; (80036d8 <HAL_ADC_MspInit+0x138>)
 8003680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003682:	4a15      	ldr	r2, [pc, #84]	; (80036d8 <HAL_ADC_MspInit+0x138>)
 8003684:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003688:	6453      	str	r3, [r2, #68]	; 0x44
 800368a:	4b13      	ldr	r3, [pc, #76]	; (80036d8 <HAL_ADC_MspInit+0x138>)
 800368c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800368e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003692:	613b      	str	r3, [r7, #16]
 8003694:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003696:	2300      	movs	r3, #0
 8003698:	60fb      	str	r3, [r7, #12]
 800369a:	4b0f      	ldr	r3, [pc, #60]	; (80036d8 <HAL_ADC_MspInit+0x138>)
 800369c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800369e:	4a0e      	ldr	r2, [pc, #56]	; (80036d8 <HAL_ADC_MspInit+0x138>)
 80036a0:	f043 0304 	orr.w	r3, r3, #4
 80036a4:	6313      	str	r3, [r2, #48]	; 0x30
 80036a6:	4b0c      	ldr	r3, [pc, #48]	; (80036d8 <HAL_ADC_MspInit+0x138>)
 80036a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036aa:	f003 0304 	and.w	r3, r3, #4
 80036ae:	60fb      	str	r3, [r7, #12]
 80036b0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80036b2:	2308      	movs	r3, #8
 80036b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80036b6:	2303      	movs	r3, #3
 80036b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036ba:	2300      	movs	r3, #0
 80036bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80036be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80036c2:	4619      	mov	r1, r3
 80036c4:	4808      	ldr	r0, [pc, #32]	; (80036e8 <HAL_ADC_MspInit+0x148>)
 80036c6:	f003 fb4b 	bl	8006d60 <HAL_GPIO_Init>
}
 80036ca:	bf00      	nop
 80036cc:	3738      	adds	r7, #56	; 0x38
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}
 80036d2:	bf00      	nop
 80036d4:	40012000 	.word	0x40012000
 80036d8:	40023800 	.word	0x40023800
 80036dc:	40020000 	.word	0x40020000
 80036e0:	40012100 	.word	0x40012100
 80036e4:	40012200 	.word	0x40012200
 80036e8:	40020800 	.word	0x40020800

080036ec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b08e      	sub	sp, #56	; 0x38
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80036f8:	2200      	movs	r2, #0
 80036fa:	601a      	str	r2, [r3, #0]
 80036fc:	605a      	str	r2, [r3, #4]
 80036fe:	609a      	str	r2, [r3, #8]
 8003700:	60da      	str	r2, [r3, #12]
 8003702:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a5c      	ldr	r2, [pc, #368]	; (800387c <HAL_I2C_MspInit+0x190>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d12d      	bne.n	800376a <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800370e:	2300      	movs	r3, #0
 8003710:	623b      	str	r3, [r7, #32]
 8003712:	4b5b      	ldr	r3, [pc, #364]	; (8003880 <HAL_I2C_MspInit+0x194>)
 8003714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003716:	4a5a      	ldr	r2, [pc, #360]	; (8003880 <HAL_I2C_MspInit+0x194>)
 8003718:	f043 0302 	orr.w	r3, r3, #2
 800371c:	6313      	str	r3, [r2, #48]	; 0x30
 800371e:	4b58      	ldr	r3, [pc, #352]	; (8003880 <HAL_I2C_MspInit+0x194>)
 8003720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003722:	f003 0302 	and.w	r3, r3, #2
 8003726:	623b      	str	r3, [r7, #32]
 8003728:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = MAGN_SCL_Pin|MAGN_SDA_Pin;
 800372a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800372e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003730:	2312      	movs	r3, #18
 8003732:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003734:	2300      	movs	r3, #0
 8003736:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003738:	2303      	movs	r3, #3
 800373a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800373c:	2304      	movs	r3, #4
 800373e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003740:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003744:	4619      	mov	r1, r3
 8003746:	484f      	ldr	r0, [pc, #316]	; (8003884 <HAL_I2C_MspInit+0x198>)
 8003748:	f003 fb0a 	bl	8006d60 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800374c:	2300      	movs	r3, #0
 800374e:	61fb      	str	r3, [r7, #28]
 8003750:	4b4b      	ldr	r3, [pc, #300]	; (8003880 <HAL_I2C_MspInit+0x194>)
 8003752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003754:	4a4a      	ldr	r2, [pc, #296]	; (8003880 <HAL_I2C_MspInit+0x194>)
 8003756:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800375a:	6413      	str	r3, [r2, #64]	; 0x40
 800375c:	4b48      	ldr	r3, [pc, #288]	; (8003880 <HAL_I2C_MspInit+0x194>)
 800375e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003760:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003764:	61fb      	str	r3, [r7, #28]
 8003766:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8003768:	e083      	b.n	8003872 <HAL_I2C_MspInit+0x186>
  else if(hi2c->Instance==I2C2)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a46      	ldr	r2, [pc, #280]	; (8003888 <HAL_I2C_MspInit+0x19c>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d12d      	bne.n	80037d0 <HAL_I2C_MspInit+0xe4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003774:	2300      	movs	r3, #0
 8003776:	61bb      	str	r3, [r7, #24]
 8003778:	4b41      	ldr	r3, [pc, #260]	; (8003880 <HAL_I2C_MspInit+0x194>)
 800377a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800377c:	4a40      	ldr	r2, [pc, #256]	; (8003880 <HAL_I2C_MspInit+0x194>)
 800377e:	f043 0302 	orr.w	r3, r3, #2
 8003782:	6313      	str	r3, [r2, #48]	; 0x30
 8003784:	4b3e      	ldr	r3, [pc, #248]	; (8003880 <HAL_I2C_MspInit+0x194>)
 8003786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003788:	f003 0302 	and.w	r3, r3, #2
 800378c:	61bb      	str	r3, [r7, #24]
 800378e:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = PRESS_SCL_Pin|PRESS_SDA_Pin;
 8003790:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003794:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003796:	2312      	movs	r3, #18
 8003798:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800379a:	2300      	movs	r3, #0
 800379c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800379e:	2303      	movs	r3, #3
 80037a0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80037a2:	2304      	movs	r3, #4
 80037a4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80037aa:	4619      	mov	r1, r3
 80037ac:	4835      	ldr	r0, [pc, #212]	; (8003884 <HAL_I2C_MspInit+0x198>)
 80037ae:	f003 fad7 	bl	8006d60 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80037b2:	2300      	movs	r3, #0
 80037b4:	617b      	str	r3, [r7, #20]
 80037b6:	4b32      	ldr	r3, [pc, #200]	; (8003880 <HAL_I2C_MspInit+0x194>)
 80037b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ba:	4a31      	ldr	r2, [pc, #196]	; (8003880 <HAL_I2C_MspInit+0x194>)
 80037bc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80037c0:	6413      	str	r3, [r2, #64]	; 0x40
 80037c2:	4b2f      	ldr	r3, [pc, #188]	; (8003880 <HAL_I2C_MspInit+0x194>)
 80037c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037ca:	617b      	str	r3, [r7, #20]
 80037cc:	697b      	ldr	r3, [r7, #20]
}
 80037ce:	e050      	b.n	8003872 <HAL_I2C_MspInit+0x186>
  else if(hi2c->Instance==I2C3)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a2d      	ldr	r2, [pc, #180]	; (800388c <HAL_I2C_MspInit+0x1a0>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d14b      	bne.n	8003872 <HAL_I2C_MspInit+0x186>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80037da:	2300      	movs	r3, #0
 80037dc:	613b      	str	r3, [r7, #16]
 80037de:	4b28      	ldr	r3, [pc, #160]	; (8003880 <HAL_I2C_MspInit+0x194>)
 80037e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037e2:	4a27      	ldr	r2, [pc, #156]	; (8003880 <HAL_I2C_MspInit+0x194>)
 80037e4:	f043 0304 	orr.w	r3, r3, #4
 80037e8:	6313      	str	r3, [r2, #48]	; 0x30
 80037ea:	4b25      	ldr	r3, [pc, #148]	; (8003880 <HAL_I2C_MspInit+0x194>)
 80037ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ee:	f003 0304 	and.w	r3, r3, #4
 80037f2:	613b      	str	r3, [r7, #16]
 80037f4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037f6:	2300      	movs	r3, #0
 80037f8:	60fb      	str	r3, [r7, #12]
 80037fa:	4b21      	ldr	r3, [pc, #132]	; (8003880 <HAL_I2C_MspInit+0x194>)
 80037fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037fe:	4a20      	ldr	r2, [pc, #128]	; (8003880 <HAL_I2C_MspInit+0x194>)
 8003800:	f043 0301 	orr.w	r3, r3, #1
 8003804:	6313      	str	r3, [r2, #48]	; 0x30
 8003806:	4b1e      	ldr	r3, [pc, #120]	; (8003880 <HAL_I2C_MspInit+0x194>)
 8003808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800380a:	f003 0301 	and.w	r3, r3, #1
 800380e:	60fb      	str	r3, [r7, #12]
 8003810:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003812:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003816:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003818:	2312      	movs	r3, #18
 800381a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800381c:	2300      	movs	r3, #0
 800381e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003820:	2303      	movs	r3, #3
 8003822:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003824:	2304      	movs	r3, #4
 8003826:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003828:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800382c:	4619      	mov	r1, r3
 800382e:	4818      	ldr	r0, [pc, #96]	; (8003890 <HAL_I2C_MspInit+0x1a4>)
 8003830:	f003 fa96 	bl	8006d60 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003834:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003838:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800383a:	2312      	movs	r3, #18
 800383c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800383e:	2300      	movs	r3, #0
 8003840:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003842:	2303      	movs	r3, #3
 8003844:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003846:	2304      	movs	r3, #4
 8003848:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800384a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800384e:	4619      	mov	r1, r3
 8003850:	4810      	ldr	r0, [pc, #64]	; (8003894 <HAL_I2C_MspInit+0x1a8>)
 8003852:	f003 fa85 	bl	8006d60 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8003856:	2300      	movs	r3, #0
 8003858:	60bb      	str	r3, [r7, #8]
 800385a:	4b09      	ldr	r3, [pc, #36]	; (8003880 <HAL_I2C_MspInit+0x194>)
 800385c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800385e:	4a08      	ldr	r2, [pc, #32]	; (8003880 <HAL_I2C_MspInit+0x194>)
 8003860:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003864:	6413      	str	r3, [r2, #64]	; 0x40
 8003866:	4b06      	ldr	r3, [pc, #24]	; (8003880 <HAL_I2C_MspInit+0x194>)
 8003868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800386a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800386e:	60bb      	str	r3, [r7, #8]
 8003870:	68bb      	ldr	r3, [r7, #8]
}
 8003872:	bf00      	nop
 8003874:	3738      	adds	r7, #56	; 0x38
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}
 800387a:	bf00      	nop
 800387c:	40005400 	.word	0x40005400
 8003880:	40023800 	.word	0x40023800
 8003884:	40020400 	.word	0x40020400
 8003888:	40005800 	.word	0x40005800
 800388c:	40005c00 	.word	0x40005c00
 8003890:	40020800 	.word	0x40020800
 8003894:	40020000 	.word	0x40020000

08003898 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b08a      	sub	sp, #40	; 0x28
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038a0:	f107 0314 	add.w	r3, r7, #20
 80038a4:	2200      	movs	r2, #0
 80038a6:	601a      	str	r2, [r3, #0]
 80038a8:	605a      	str	r2, [r3, #4]
 80038aa:	609a      	str	r2, [r3, #8]
 80038ac:	60da      	str	r2, [r3, #12]
 80038ae:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a19      	ldr	r2, [pc, #100]	; (800391c <HAL_SPI_MspInit+0x84>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d12c      	bne.n	8003914 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80038ba:	2300      	movs	r3, #0
 80038bc:	613b      	str	r3, [r7, #16]
 80038be:	4b18      	ldr	r3, [pc, #96]	; (8003920 <HAL_SPI_MspInit+0x88>)
 80038c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c2:	4a17      	ldr	r2, [pc, #92]	; (8003920 <HAL_SPI_MspInit+0x88>)
 80038c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80038c8:	6413      	str	r3, [r2, #64]	; 0x40
 80038ca:	4b15      	ldr	r3, [pc, #84]	; (8003920 <HAL_SPI_MspInit+0x88>)
 80038cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038d2:	613b      	str	r3, [r7, #16]
 80038d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80038d6:	2300      	movs	r3, #0
 80038d8:	60fb      	str	r3, [r7, #12]
 80038da:	4b11      	ldr	r3, [pc, #68]	; (8003920 <HAL_SPI_MspInit+0x88>)
 80038dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038de:	4a10      	ldr	r2, [pc, #64]	; (8003920 <HAL_SPI_MspInit+0x88>)
 80038e0:	f043 0302 	orr.w	r3, r3, #2
 80038e4:	6313      	str	r3, [r2, #48]	; 0x30
 80038e6:	4b0e      	ldr	r3, [pc, #56]	; (8003920 <HAL_SPI_MspInit+0x88>)
 80038e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ea:	f003 0302 	and.w	r3, r3, #2
 80038ee:	60fb      	str	r3, [r7, #12]
 80038f0:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = IMU_SCK_Pin|IMU_MISO_Pin|IMU_MOSI_Pin;
 80038f2:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80038f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038f8:	2302      	movs	r3, #2
 80038fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038fc:	2300      	movs	r3, #0
 80038fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003900:	2303      	movs	r3, #3
 8003902:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003904:	2305      	movs	r3, #5
 8003906:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003908:	f107 0314 	add.w	r3, r7, #20
 800390c:	4619      	mov	r1, r3
 800390e:	4805      	ldr	r0, [pc, #20]	; (8003924 <HAL_SPI_MspInit+0x8c>)
 8003910:	f003 fa26 	bl	8006d60 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8003914:	bf00      	nop
 8003916:	3728      	adds	r7, #40	; 0x28
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}
 800391c:	40003800 	.word	0x40003800
 8003920:	40023800 	.word	0x40023800
 8003924:	40020400 	.word	0x40020400

08003928 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b08e      	sub	sp, #56	; 0x38
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003930:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003934:	2200      	movs	r2, #0
 8003936:	601a      	str	r2, [r3, #0]
 8003938:	605a      	str	r2, [r3, #4]
 800393a:	609a      	str	r2, [r3, #8]
 800393c:	60da      	str	r2, [r3, #12]
 800393e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003948:	d134      	bne.n	80039b4 <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800394a:	2300      	movs	r3, #0
 800394c:	623b      	str	r3, [r7, #32]
 800394e:	4b4b      	ldr	r3, [pc, #300]	; (8003a7c <HAL_TIM_Base_MspInit+0x154>)
 8003950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003952:	4a4a      	ldr	r2, [pc, #296]	; (8003a7c <HAL_TIM_Base_MspInit+0x154>)
 8003954:	f043 0301 	orr.w	r3, r3, #1
 8003958:	6413      	str	r3, [r2, #64]	; 0x40
 800395a:	4b48      	ldr	r3, [pc, #288]	; (8003a7c <HAL_TIM_Base_MspInit+0x154>)
 800395c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800395e:	f003 0301 	and.w	r3, r3, #1
 8003962:	623b      	str	r3, [r7, #32]
 8003964:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003966:	2300      	movs	r3, #0
 8003968:	61fb      	str	r3, [r7, #28]
 800396a:	4b44      	ldr	r3, [pc, #272]	; (8003a7c <HAL_TIM_Base_MspInit+0x154>)
 800396c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800396e:	4a43      	ldr	r2, [pc, #268]	; (8003a7c <HAL_TIM_Base_MspInit+0x154>)
 8003970:	f043 0301 	orr.w	r3, r3, #1
 8003974:	6313      	str	r3, [r2, #48]	; 0x30
 8003976:	4b41      	ldr	r3, [pc, #260]	; (8003a7c <HAL_TIM_Base_MspInit+0x154>)
 8003978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800397a:	f003 0301 	and.w	r3, r3, #1
 800397e:	61fb      	str	r3, [r7, #28]
 8003980:	69fb      	ldr	r3, [r7, #28]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = ECHO_Pin;
 8003982:	2301      	movs	r3, #1
 8003984:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003986:	2302      	movs	r3, #2
 8003988:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800398a:	2300      	movs	r3, #0
 800398c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800398e:	2300      	movs	r3, #0
 8003990:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003992:	2301      	movs	r3, #1
 8003994:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ECHO_GPIO_Port, &GPIO_InitStruct);
 8003996:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800399a:	4619      	mov	r1, r3
 800399c:	4838      	ldr	r0, [pc, #224]	; (8003a80 <HAL_TIM_Base_MspInit+0x158>)
 800399e:	f003 f9df 	bl	8006d60 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80039a2:	2200      	movs	r2, #0
 80039a4:	2105      	movs	r1, #5
 80039a6:	201c      	movs	r0, #28
 80039a8:	f002 fda1 	bl	80064ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80039ac:	201c      	movs	r0, #28
 80039ae:	f002 fdba 	bl	8006526 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 80039b2:	e05e      	b.n	8003a72 <HAL_TIM_Base_MspInit+0x14a>
  else if(htim_base->Instance==TIM3)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a32      	ldr	r2, [pc, #200]	; (8003a84 <HAL_TIM_Base_MspInit+0x15c>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d10e      	bne.n	80039dc <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80039be:	2300      	movs	r3, #0
 80039c0:	61bb      	str	r3, [r7, #24]
 80039c2:	4b2e      	ldr	r3, [pc, #184]	; (8003a7c <HAL_TIM_Base_MspInit+0x154>)
 80039c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c6:	4a2d      	ldr	r2, [pc, #180]	; (8003a7c <HAL_TIM_Base_MspInit+0x154>)
 80039c8:	f043 0302 	orr.w	r3, r3, #2
 80039cc:	6413      	str	r3, [r2, #64]	; 0x40
 80039ce:	4b2b      	ldr	r3, [pc, #172]	; (8003a7c <HAL_TIM_Base_MspInit+0x154>)
 80039d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d2:	f003 0302 	and.w	r3, r3, #2
 80039d6:	61bb      	str	r3, [r7, #24]
 80039d8:	69bb      	ldr	r3, [r7, #24]
}
 80039da:	e04a      	b.n	8003a72 <HAL_TIM_Base_MspInit+0x14a>
  else if(htim_base->Instance==TIM4)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a29      	ldr	r2, [pc, #164]	; (8003a88 <HAL_TIM_Base_MspInit+0x160>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d10e      	bne.n	8003a04 <HAL_TIM_Base_MspInit+0xdc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80039e6:	2300      	movs	r3, #0
 80039e8:	617b      	str	r3, [r7, #20]
 80039ea:	4b24      	ldr	r3, [pc, #144]	; (8003a7c <HAL_TIM_Base_MspInit+0x154>)
 80039ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ee:	4a23      	ldr	r2, [pc, #140]	; (8003a7c <HAL_TIM_Base_MspInit+0x154>)
 80039f0:	f043 0304 	orr.w	r3, r3, #4
 80039f4:	6413      	str	r3, [r2, #64]	; 0x40
 80039f6:	4b21      	ldr	r3, [pc, #132]	; (8003a7c <HAL_TIM_Base_MspInit+0x154>)
 80039f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039fa:	f003 0304 	and.w	r3, r3, #4
 80039fe:	617b      	str	r3, [r7, #20]
 8003a00:	697b      	ldr	r3, [r7, #20]
}
 8003a02:	e036      	b.n	8003a72 <HAL_TIM_Base_MspInit+0x14a>
  else if(htim_base->Instance==TIM6)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a20      	ldr	r2, [pc, #128]	; (8003a8c <HAL_TIM_Base_MspInit+0x164>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d116      	bne.n	8003a3c <HAL_TIM_Base_MspInit+0x114>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003a0e:	2300      	movs	r3, #0
 8003a10:	613b      	str	r3, [r7, #16]
 8003a12:	4b1a      	ldr	r3, [pc, #104]	; (8003a7c <HAL_TIM_Base_MspInit+0x154>)
 8003a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a16:	4a19      	ldr	r2, [pc, #100]	; (8003a7c <HAL_TIM_Base_MspInit+0x154>)
 8003a18:	f043 0310 	orr.w	r3, r3, #16
 8003a1c:	6413      	str	r3, [r2, #64]	; 0x40
 8003a1e:	4b17      	ldr	r3, [pc, #92]	; (8003a7c <HAL_TIM_Base_MspInit+0x154>)
 8003a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a22:	f003 0310 	and.w	r3, r3, #16
 8003a26:	613b      	str	r3, [r7, #16]
 8003a28:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	2105      	movs	r1, #5
 8003a2e:	2036      	movs	r0, #54	; 0x36
 8003a30:	f002 fd5d 	bl	80064ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003a34:	2036      	movs	r0, #54	; 0x36
 8003a36:	f002 fd76 	bl	8006526 <HAL_NVIC_EnableIRQ>
}
 8003a3a:	e01a      	b.n	8003a72 <HAL_TIM_Base_MspInit+0x14a>
  else if(htim_base->Instance==TIM7)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a13      	ldr	r2, [pc, #76]	; (8003a90 <HAL_TIM_Base_MspInit+0x168>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d115      	bne.n	8003a72 <HAL_TIM_Base_MspInit+0x14a>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003a46:	2300      	movs	r3, #0
 8003a48:	60fb      	str	r3, [r7, #12]
 8003a4a:	4b0c      	ldr	r3, [pc, #48]	; (8003a7c <HAL_TIM_Base_MspInit+0x154>)
 8003a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a4e:	4a0b      	ldr	r2, [pc, #44]	; (8003a7c <HAL_TIM_Base_MspInit+0x154>)
 8003a50:	f043 0320 	orr.w	r3, r3, #32
 8003a54:	6413      	str	r3, [r2, #64]	; 0x40
 8003a56:	4b09      	ldr	r3, [pc, #36]	; (8003a7c <HAL_TIM_Base_MspInit+0x154>)
 8003a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a5a:	f003 0320 	and.w	r3, r3, #32
 8003a5e:	60fb      	str	r3, [r7, #12]
 8003a60:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 8003a62:	2200      	movs	r2, #0
 8003a64:	2105      	movs	r1, #5
 8003a66:	2037      	movs	r0, #55	; 0x37
 8003a68:	f002 fd41 	bl	80064ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8003a6c:	2037      	movs	r0, #55	; 0x37
 8003a6e:	f002 fd5a 	bl	8006526 <HAL_NVIC_EnableIRQ>
}
 8003a72:	bf00      	nop
 8003a74:	3738      	adds	r7, #56	; 0x38
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}
 8003a7a:	bf00      	nop
 8003a7c:	40023800 	.word	0x40023800
 8003a80:	40020000 	.word	0x40020000
 8003a84:	40000400 	.word	0x40000400
 8003a88:	40000800 	.word	0x40000800
 8003a8c:	40001000 	.word	0x40001000
 8003a90:	40001400 	.word	0x40001400

08003a94 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b08a      	sub	sp, #40	; 0x28
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a9c:	f107 0314 	add.w	r3, r7, #20
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	601a      	str	r2, [r3, #0]
 8003aa4:	605a      	str	r2, [r3, #4]
 8003aa6:	609a      	str	r2, [r3, #8]
 8003aa8:	60da      	str	r2, [r3, #12]
 8003aaa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a21      	ldr	r2, [pc, #132]	; (8003b38 <HAL_TIM_MspPostInit+0xa4>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d13b      	bne.n	8003b2e <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	613b      	str	r3, [r7, #16]
 8003aba:	4b20      	ldr	r3, [pc, #128]	; (8003b3c <HAL_TIM_MspPostInit+0xa8>)
 8003abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003abe:	4a1f      	ldr	r2, [pc, #124]	; (8003b3c <HAL_TIM_MspPostInit+0xa8>)
 8003ac0:	f043 0301 	orr.w	r3, r3, #1
 8003ac4:	6313      	str	r3, [r2, #48]	; 0x30
 8003ac6:	4b1d      	ldr	r3, [pc, #116]	; (8003b3c <HAL_TIM_MspPostInit+0xa8>)
 8003ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aca:	f003 0301 	and.w	r3, r3, #1
 8003ace:	613b      	str	r3, [r7, #16]
 8003ad0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	60fb      	str	r3, [r7, #12]
 8003ad6:	4b19      	ldr	r3, [pc, #100]	; (8003b3c <HAL_TIM_MspPostInit+0xa8>)
 8003ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ada:	4a18      	ldr	r2, [pc, #96]	; (8003b3c <HAL_TIM_MspPostInit+0xa8>)
 8003adc:	f043 0302 	orr.w	r3, r3, #2
 8003ae0:	6313      	str	r3, [r2, #48]	; 0x30
 8003ae2:	4b16      	ldr	r3, [pc, #88]	; (8003b3c <HAL_TIM_MspPostInit+0xa8>)
 8003ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ae6:	f003 0302 	and.w	r3, r3, #2
 8003aea:	60fb      	str	r3, [r7, #12]
 8003aec:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = PWM1_Pin|PWM2_Pin;
 8003aee:	23c0      	movs	r3, #192	; 0xc0
 8003af0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003af2:	2302      	movs	r3, #2
 8003af4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003af6:	2300      	movs	r3, #0
 8003af8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003afa:	2300      	movs	r3, #0
 8003afc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003afe:	2302      	movs	r3, #2
 8003b00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b02:	f107 0314 	add.w	r3, r7, #20
 8003b06:	4619      	mov	r1, r3
 8003b08:	480d      	ldr	r0, [pc, #52]	; (8003b40 <HAL_TIM_MspPostInit+0xac>)
 8003b0a:	f003 f929 	bl	8006d60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PWM3_Pin|PWM4_Pin;
 8003b0e:	2303      	movs	r3, #3
 8003b10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b12:	2302      	movs	r3, #2
 8003b14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b16:	2300      	movs	r3, #0
 8003b18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003b1e:	2302      	movs	r3, #2
 8003b20:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b22:	f107 0314 	add.w	r3, r7, #20
 8003b26:	4619      	mov	r1, r3
 8003b28:	4806      	ldr	r0, [pc, #24]	; (8003b44 <HAL_TIM_MspPostInit+0xb0>)
 8003b2a:	f003 f919 	bl	8006d60 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003b2e:	bf00      	nop
 8003b30:	3728      	adds	r7, #40	; 0x28
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}
 8003b36:	bf00      	nop
 8003b38:	40000400 	.word	0x40000400
 8003b3c:	40023800 	.word	0x40023800
 8003b40:	40020000 	.word	0x40020000
 8003b44:	40020400 	.word	0x40020400

08003b48 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b090      	sub	sp, #64	; 0x40
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b50:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003b54:	2200      	movs	r2, #0
 8003b56:	601a      	str	r2, [r3, #0]
 8003b58:	605a      	str	r2, [r3, #4]
 8003b5a:	609a      	str	r2, [r3, #8]
 8003b5c:	60da      	str	r2, [r3, #12]
 8003b5e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a81      	ldr	r2, [pc, #516]	; (8003d6c <HAL_UART_MspInit+0x224>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d15d      	bne.n	8003c26 <HAL_UART_MspInit+0xde>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b6e:	4b80      	ldr	r3, [pc, #512]	; (8003d70 <HAL_UART_MspInit+0x228>)
 8003b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b72:	4a7f      	ldr	r2, [pc, #508]	; (8003d70 <HAL_UART_MspInit+0x228>)
 8003b74:	f043 0310 	orr.w	r3, r3, #16
 8003b78:	6453      	str	r3, [r2, #68]	; 0x44
 8003b7a:	4b7d      	ldr	r3, [pc, #500]	; (8003d70 <HAL_UART_MspInit+0x228>)
 8003b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b7e:	f003 0310 	and.w	r3, r3, #16
 8003b82:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b84:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b86:	2300      	movs	r3, #0
 8003b88:	627b      	str	r3, [r7, #36]	; 0x24
 8003b8a:	4b79      	ldr	r3, [pc, #484]	; (8003d70 <HAL_UART_MspInit+0x228>)
 8003b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b8e:	4a78      	ldr	r2, [pc, #480]	; (8003d70 <HAL_UART_MspInit+0x228>)
 8003b90:	f043 0301 	orr.w	r3, r3, #1
 8003b94:	6313      	str	r3, [r2, #48]	; 0x30
 8003b96:	4b76      	ldr	r3, [pc, #472]	; (8003d70 <HAL_UART_MspInit+0x228>)
 8003b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b9a:	f003 0301 	and.w	r3, r3, #1
 8003b9e:	627b      	str	r3, [r7, #36]	; 0x24
 8003ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = RECEIVER_TX_Pin|RECEIVER_RX_Pin;
 8003ba2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003ba6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ba8:	2302      	movs	r3, #2
 8003baa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bac:	2300      	movs	r3, #0
 8003bae:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003bb0:	2303      	movs	r3, #3
 8003bb2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003bb4:	2307      	movs	r3, #7
 8003bb6:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003bb8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003bbc:	4619      	mov	r1, r3
 8003bbe:	486d      	ldr	r0, [pc, #436]	; (8003d74 <HAL_UART_MspInit+0x22c>)
 8003bc0:	f003 f8ce 	bl	8006d60 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8003bc4:	4b6c      	ldr	r3, [pc, #432]	; (8003d78 <HAL_UART_MspInit+0x230>)
 8003bc6:	4a6d      	ldr	r2, [pc, #436]	; (8003d7c <HAL_UART_MspInit+0x234>)
 8003bc8:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8003bca:	4b6b      	ldr	r3, [pc, #428]	; (8003d78 <HAL_UART_MspInit+0x230>)
 8003bcc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003bd0:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003bd2:	4b69      	ldr	r3, [pc, #420]	; (8003d78 <HAL_UART_MspInit+0x230>)
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003bd8:	4b67      	ldr	r3, [pc, #412]	; (8003d78 <HAL_UART_MspInit+0x230>)
 8003bda:	2200      	movs	r2, #0
 8003bdc:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003bde:	4b66      	ldr	r3, [pc, #408]	; (8003d78 <HAL_UART_MspInit+0x230>)
 8003be0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003be4:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003be6:	4b64      	ldr	r3, [pc, #400]	; (8003d78 <HAL_UART_MspInit+0x230>)
 8003be8:	2200      	movs	r2, #0
 8003bea:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003bec:	4b62      	ldr	r3, [pc, #392]	; (8003d78 <HAL_UART_MspInit+0x230>)
 8003bee:	2200      	movs	r2, #0
 8003bf0:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8003bf2:	4b61      	ldr	r3, [pc, #388]	; (8003d78 <HAL_UART_MspInit+0x230>)
 8003bf4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003bf8:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8003bfa:	4b5f      	ldr	r3, [pc, #380]	; (8003d78 <HAL_UART_MspInit+0x230>)
 8003bfc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003c00:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003c02:	4b5d      	ldr	r3, [pc, #372]	; (8003d78 <HAL_UART_MspInit+0x230>)
 8003c04:	2200      	movs	r2, #0
 8003c06:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003c08:	485b      	ldr	r0, [pc, #364]	; (8003d78 <HAL_UART_MspInit+0x230>)
 8003c0a:	f002 fca7 	bl	800655c <HAL_DMA_Init>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d001      	beq.n	8003c18 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 8003c14:	f7ff fc92 	bl	800353c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	4a57      	ldr	r2, [pc, #348]	; (8003d78 <HAL_UART_MspInit+0x230>)
 8003c1c:	639a      	str	r2, [r3, #56]	; 0x38
 8003c1e:	4a56      	ldr	r2, [pc, #344]	; (8003d78 <HAL_UART_MspInit+0x230>)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8003c24:	e09d      	b.n	8003d62 <HAL_UART_MspInit+0x21a>
  else if(huart->Instance==USART2)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a55      	ldr	r2, [pc, #340]	; (8003d80 <HAL_UART_MspInit+0x238>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d134      	bne.n	8003c9a <HAL_UART_MspInit+0x152>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003c30:	2300      	movs	r3, #0
 8003c32:	623b      	str	r3, [r7, #32]
 8003c34:	4b4e      	ldr	r3, [pc, #312]	; (8003d70 <HAL_UART_MspInit+0x228>)
 8003c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c38:	4a4d      	ldr	r2, [pc, #308]	; (8003d70 <HAL_UART_MspInit+0x228>)
 8003c3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c3e:	6413      	str	r3, [r2, #64]	; 0x40
 8003c40:	4b4b      	ldr	r3, [pc, #300]	; (8003d70 <HAL_UART_MspInit+0x228>)
 8003c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c48:	623b      	str	r3, [r7, #32]
 8003c4a:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	61fb      	str	r3, [r7, #28]
 8003c50:	4b47      	ldr	r3, [pc, #284]	; (8003d70 <HAL_UART_MspInit+0x228>)
 8003c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c54:	4a46      	ldr	r2, [pc, #280]	; (8003d70 <HAL_UART_MspInit+0x228>)
 8003c56:	f043 0301 	orr.w	r3, r3, #1
 8003c5a:	6313      	str	r3, [r2, #48]	; 0x30
 8003c5c:	4b44      	ldr	r3, [pc, #272]	; (8003d70 <HAL_UART_MspInit+0x228>)
 8003c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c60:	f003 0301 	and.w	r3, r3, #1
 8003c64:	61fb      	str	r3, [r7, #28]
 8003c66:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003c68:	230c      	movs	r3, #12
 8003c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c6c:	2302      	movs	r3, #2
 8003c6e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c70:	2300      	movs	r3, #0
 8003c72:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c74:	2303      	movs	r3, #3
 8003c76:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003c78:	2307      	movs	r3, #7
 8003c7a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c7c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003c80:	4619      	mov	r1, r3
 8003c82:	483c      	ldr	r0, [pc, #240]	; (8003d74 <HAL_UART_MspInit+0x22c>)
 8003c84:	f003 f86c 	bl	8006d60 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8003c88:	2200      	movs	r2, #0
 8003c8a:	2105      	movs	r1, #5
 8003c8c:	2026      	movs	r0, #38	; 0x26
 8003c8e:	f002 fc2e 	bl	80064ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003c92:	2026      	movs	r0, #38	; 0x26
 8003c94:	f002 fc47 	bl	8006526 <HAL_NVIC_EnableIRQ>
}
 8003c98:	e063      	b.n	8003d62 <HAL_UART_MspInit+0x21a>
  else if(huart->Instance==USART3)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a39      	ldr	r2, [pc, #228]	; (8003d84 <HAL_UART_MspInit+0x23c>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d12d      	bne.n	8003d00 <HAL_UART_MspInit+0x1b8>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	61bb      	str	r3, [r7, #24]
 8003ca8:	4b31      	ldr	r3, [pc, #196]	; (8003d70 <HAL_UART_MspInit+0x228>)
 8003caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cac:	4a30      	ldr	r2, [pc, #192]	; (8003d70 <HAL_UART_MspInit+0x228>)
 8003cae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003cb2:	6413      	str	r3, [r2, #64]	; 0x40
 8003cb4:	4b2e      	ldr	r3, [pc, #184]	; (8003d70 <HAL_UART_MspInit+0x228>)
 8003cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003cbc:	61bb      	str	r3, [r7, #24]
 8003cbe:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	617b      	str	r3, [r7, #20]
 8003cc4:	4b2a      	ldr	r3, [pc, #168]	; (8003d70 <HAL_UART_MspInit+0x228>)
 8003cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cc8:	4a29      	ldr	r2, [pc, #164]	; (8003d70 <HAL_UART_MspInit+0x228>)
 8003cca:	f043 0304 	orr.w	r3, r3, #4
 8003cce:	6313      	str	r3, [r2, #48]	; 0x30
 8003cd0:	4b27      	ldr	r3, [pc, #156]	; (8003d70 <HAL_UART_MspInit+0x228>)
 8003cd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cd4:	f003 0304 	and.w	r3, r3, #4
 8003cd8:	617b      	str	r3, [r7, #20]
 8003cda:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GNSS_TX_Pin|GNSS_RX_Pin;
 8003cdc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003ce0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ce2:	2302      	movs	r3, #2
 8003ce4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003cea:	2303      	movs	r3, #3
 8003cec:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003cee:	2307      	movs	r3, #7
 8003cf0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003cf2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003cf6:	4619      	mov	r1, r3
 8003cf8:	4823      	ldr	r0, [pc, #140]	; (8003d88 <HAL_UART_MspInit+0x240>)
 8003cfa:	f003 f831 	bl	8006d60 <HAL_GPIO_Init>
}
 8003cfe:	e030      	b.n	8003d62 <HAL_UART_MspInit+0x21a>
  else if(huart->Instance==USART6)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a21      	ldr	r2, [pc, #132]	; (8003d8c <HAL_UART_MspInit+0x244>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d12b      	bne.n	8003d62 <HAL_UART_MspInit+0x21a>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	613b      	str	r3, [r7, #16]
 8003d0e:	4b18      	ldr	r3, [pc, #96]	; (8003d70 <HAL_UART_MspInit+0x228>)
 8003d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d12:	4a17      	ldr	r2, [pc, #92]	; (8003d70 <HAL_UART_MspInit+0x228>)
 8003d14:	f043 0320 	orr.w	r3, r3, #32
 8003d18:	6453      	str	r3, [r2, #68]	; 0x44
 8003d1a:	4b15      	ldr	r3, [pc, #84]	; (8003d70 <HAL_UART_MspInit+0x228>)
 8003d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d1e:	f003 0320 	and.w	r3, r3, #32
 8003d22:	613b      	str	r3, [r7, #16]
 8003d24:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d26:	2300      	movs	r3, #0
 8003d28:	60fb      	str	r3, [r7, #12]
 8003d2a:	4b11      	ldr	r3, [pc, #68]	; (8003d70 <HAL_UART_MspInit+0x228>)
 8003d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d2e:	4a10      	ldr	r2, [pc, #64]	; (8003d70 <HAL_UART_MspInit+0x228>)
 8003d30:	f043 0304 	orr.w	r3, r3, #4
 8003d34:	6313      	str	r3, [r2, #48]	; 0x30
 8003d36:	4b0e      	ldr	r3, [pc, #56]	; (8003d70 <HAL_UART_MspInit+0x228>)
 8003d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d3a:	f003 0304 	and.w	r3, r3, #4
 8003d3e:	60fb      	str	r3, [r7, #12]
 8003d40:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003d42:	23c0      	movs	r3, #192	; 0xc0
 8003d44:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d46:	2302      	movs	r3, #2
 8003d48:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d4e:	2303      	movs	r3, #3
 8003d50:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003d52:	2308      	movs	r3, #8
 8003d54:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003d56:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003d5a:	4619      	mov	r1, r3
 8003d5c:	480a      	ldr	r0, [pc, #40]	; (8003d88 <HAL_UART_MspInit+0x240>)
 8003d5e:	f002 ffff 	bl	8006d60 <HAL_GPIO_Init>
}
 8003d62:	bf00      	nop
 8003d64:	3740      	adds	r7, #64	; 0x40
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}
 8003d6a:	bf00      	nop
 8003d6c:	40011000 	.word	0x40011000
 8003d70:	40023800 	.word	0x40023800
 8003d74:	40020000 	.word	0x40020000
 8003d78:	20000904 	.word	0x20000904
 8003d7c:	40026440 	.word	0x40026440
 8003d80:	40004400 	.word	0x40004400
 8003d84:	40004800 	.word	0x40004800
 8003d88:	40020800 	.word	0x40020800
 8003d8c:	40011400 	.word	0x40011400

08003d90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003d90:	b480      	push	{r7}
 8003d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003d94:	e7fe      	b.n	8003d94 <NMI_Handler+0x4>

08003d96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003d96:	b480      	push	{r7}
 8003d98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003d9a:	e7fe      	b.n	8003d9a <HardFault_Handler+0x4>

08003d9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003da0:	e7fe      	b.n	8003da0 <MemManage_Handler+0x4>

08003da2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003da2:	b480      	push	{r7}
 8003da4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003da6:	e7fe      	b.n	8003da6 <BusFault_Handler+0x4>

08003da8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003da8:	b480      	push	{r7}
 8003daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003dac:	e7fe      	b.n	8003dac <UsageFault_Handler+0x4>

08003dae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003dae:	b480      	push	{r7}
 8003db0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003db2:	bf00      	nop
 8003db4:	46bd      	mov	sp, r7
 8003db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dba:	4770      	bx	lr

08003dbc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003dc0:	f002 f814 	bl	8005dec <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8003dc4:	f00a f9da 	bl	800e17c <xTaskGetSchedulerState>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	2b01      	cmp	r3, #1
 8003dcc:	d001      	beq.n	8003dd2 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8003dce:	f00a fc1b 	bl	800e608 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003dd2:	bf00      	nop
 8003dd4:	bd80      	pop	{r7, pc}

08003dd6 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8003dd6:	b580      	push	{r7, lr}
 8003dd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_Pin);
 8003dda:	2001      	movs	r0, #1
 8003ddc:	f003 f990 	bl	8007100 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8003de0:	bf00      	nop
 8003de2:	bd80      	pop	{r7, pc}

08003de4 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IT_PRESS_Pin);
 8003de8:	2004      	movs	r0, #4
 8003dea:	f003 f989 	bl	8007100 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8003dee:	bf00      	nop
 8003df0:	bd80      	pop	{r7, pc}
	...

08003df4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003df8:	4802      	ldr	r0, [pc, #8]	; (8003e04 <TIM2_IRQHandler+0x10>)
 8003dfa:	f005 fc6c 	bl	80096d6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003dfe:	bf00      	nop
 8003e00:	bd80      	pop	{r7, pc}
 8003e02:	bf00      	nop
 8003e04:	2000068c 	.word	0x2000068c

08003e08 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003e0c:	4802      	ldr	r0, [pc, #8]	; (8003e18 <USART2_IRQHandler+0x10>)
 8003e0e:	f006 fed1 	bl	800abb4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003e12:	bf00      	nop
 8003e14:	bd80      	pop	{r7, pc}
 8003e16:	bf00      	nop
 8003e18:	20000838 	.word	0x20000838

08003e1c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IT_GYRO_Pin);
 8003e20:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003e24:	f003 f96c 	bl	8007100 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(IT_ACC_Pin);
 8003e28:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003e2c:	f003 f968 	bl	8007100 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(IT_MAGN_Pin);
 8003e30:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003e34:	f003 f964 	bl	8007100 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003e38:	bf00      	nop
 8003e3a:	bd80      	pop	{r7, pc}

08003e3c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003e40:	4802      	ldr	r0, [pc, #8]	; (8003e4c <TIM6_DAC_IRQHandler+0x10>)
 8003e42:	f005 fc48 	bl	80096d6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003e46:	bf00      	nop
 8003e48:	bd80      	pop	{r7, pc}
 8003e4a:	bf00      	nop
 8003e4c:	20000764 	.word	0x20000764

08003e50 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8003e54:	4802      	ldr	r0, [pc, #8]	; (8003e60 <TIM7_IRQHandler+0x10>)
 8003e56:	f005 fc3e 	bl	80096d6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8003e5a:	bf00      	nop
 8003e5c:	bd80      	pop	{r7, pc}
 8003e5e:	bf00      	nop
 8003e60:	200007ac 	.word	0x200007ac

08003e64 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8003e68:	4802      	ldr	r0, [pc, #8]	; (8003e74 <DMA2_Stream2_IRQHandler+0x10>)
 8003e6a:	f002 fd0f 	bl	800688c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8003e6e:	bf00      	nop
 8003e70:	bd80      	pop	{r7, pc}
 8003e72:	bf00      	nop
 8003e74:	20000904 	.word	0x20000904

08003e78 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	af00      	add	r7, sp, #0
  return 1;
 8003e7c:	2301      	movs	r3, #1
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	46bd      	mov	sp, r7
 8003e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e86:	4770      	bx	lr

08003e88 <_kill>:

int _kill(int pid, int sig)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b082      	sub	sp, #8
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
 8003e90:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003e92:	f00a fdf3 	bl	800ea7c <__errno>
 8003e96:	4603      	mov	r3, r0
 8003e98:	2216      	movs	r2, #22
 8003e9a:	601a      	str	r2, [r3, #0]
  return -1;
 8003e9c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	3708      	adds	r7, #8
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bd80      	pop	{r7, pc}

08003ea8 <_exit>:

void _exit (int status)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b082      	sub	sp, #8
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003eb0:	f04f 31ff 	mov.w	r1, #4294967295
 8003eb4:	6878      	ldr	r0, [r7, #4]
 8003eb6:	f7ff ffe7 	bl	8003e88 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003eba:	e7fe      	b.n	8003eba <_exit+0x12>

08003ebc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b086      	sub	sp, #24
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	60f8      	str	r0, [r7, #12]
 8003ec4:	60b9      	str	r1, [r7, #8]
 8003ec6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ec8:	2300      	movs	r3, #0
 8003eca:	617b      	str	r3, [r7, #20]
 8003ecc:	e00a      	b.n	8003ee4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003ece:	f3af 8000 	nop.w
 8003ed2:	4601      	mov	r1, r0
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	1c5a      	adds	r2, r3, #1
 8003ed8:	60ba      	str	r2, [r7, #8]
 8003eda:	b2ca      	uxtb	r2, r1
 8003edc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	3301      	adds	r3, #1
 8003ee2:	617b      	str	r3, [r7, #20]
 8003ee4:	697a      	ldr	r2, [r7, #20]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	429a      	cmp	r2, r3
 8003eea:	dbf0      	blt.n	8003ece <_read+0x12>
  }

  return len;
 8003eec:	687b      	ldr	r3, [r7, #4]
}
 8003eee:	4618      	mov	r0, r3
 8003ef0:	3718      	adds	r7, #24
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd80      	pop	{r7, pc}

08003ef6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003ef6:	b580      	push	{r7, lr}
 8003ef8:	b086      	sub	sp, #24
 8003efa:	af00      	add	r7, sp, #0
 8003efc:	60f8      	str	r0, [r7, #12]
 8003efe:	60b9      	str	r1, [r7, #8]
 8003f00:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f02:	2300      	movs	r3, #0
 8003f04:	617b      	str	r3, [r7, #20]
 8003f06:	e009      	b.n	8003f1c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	1c5a      	adds	r2, r3, #1
 8003f0c:	60ba      	str	r2, [r7, #8]
 8003f0e:	781b      	ldrb	r3, [r3, #0]
 8003f10:	4618      	mov	r0, r3
 8003f12:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	3301      	adds	r3, #1
 8003f1a:	617b      	str	r3, [r7, #20]
 8003f1c:	697a      	ldr	r2, [r7, #20]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	429a      	cmp	r2, r3
 8003f22:	dbf1      	blt.n	8003f08 <_write+0x12>
  }
  return len;
 8003f24:	687b      	ldr	r3, [r7, #4]
}
 8003f26:	4618      	mov	r0, r3
 8003f28:	3718      	adds	r7, #24
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}

08003f2e <_close>:

int _close(int file)
{
 8003f2e:	b480      	push	{r7}
 8003f30:	b083      	sub	sp, #12
 8003f32:	af00      	add	r7, sp, #0
 8003f34:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003f36:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	370c      	adds	r7, #12
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f44:	4770      	bx	lr

08003f46 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003f46:	b480      	push	{r7}
 8003f48:	b083      	sub	sp, #12
 8003f4a:	af00      	add	r7, sp, #0
 8003f4c:	6078      	str	r0, [r7, #4]
 8003f4e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003f56:	605a      	str	r2, [r3, #4]
  return 0;
 8003f58:	2300      	movs	r3, #0
}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	370c      	adds	r7, #12
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f64:	4770      	bx	lr

08003f66 <_isatty>:

int _isatty(int file)
{
 8003f66:	b480      	push	{r7}
 8003f68:	b083      	sub	sp, #12
 8003f6a:	af00      	add	r7, sp, #0
 8003f6c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003f6e:	2301      	movs	r3, #1
}
 8003f70:	4618      	mov	r0, r3
 8003f72:	370c      	adds	r7, #12
 8003f74:	46bd      	mov	sp, r7
 8003f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7a:	4770      	bx	lr

08003f7c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b085      	sub	sp, #20
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	60f8      	str	r0, [r7, #12]
 8003f84:	60b9      	str	r1, [r7, #8]
 8003f86:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003f88:	2300      	movs	r3, #0
}
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	3714      	adds	r7, #20
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f94:	4770      	bx	lr
	...

08003f98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b086      	sub	sp, #24
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003fa0:	4a14      	ldr	r2, [pc, #80]	; (8003ff4 <_sbrk+0x5c>)
 8003fa2:	4b15      	ldr	r3, [pc, #84]	; (8003ff8 <_sbrk+0x60>)
 8003fa4:	1ad3      	subs	r3, r2, r3
 8003fa6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003fac:	4b13      	ldr	r3, [pc, #76]	; (8003ffc <_sbrk+0x64>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d102      	bne.n	8003fba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003fb4:	4b11      	ldr	r3, [pc, #68]	; (8003ffc <_sbrk+0x64>)
 8003fb6:	4a12      	ldr	r2, [pc, #72]	; (8004000 <_sbrk+0x68>)
 8003fb8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003fba:	4b10      	ldr	r3, [pc, #64]	; (8003ffc <_sbrk+0x64>)
 8003fbc:	681a      	ldr	r2, [r3, #0]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	4413      	add	r3, r2
 8003fc2:	693a      	ldr	r2, [r7, #16]
 8003fc4:	429a      	cmp	r2, r3
 8003fc6:	d207      	bcs.n	8003fd8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003fc8:	f00a fd58 	bl	800ea7c <__errno>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	220c      	movs	r2, #12
 8003fd0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003fd2:	f04f 33ff 	mov.w	r3, #4294967295
 8003fd6:	e009      	b.n	8003fec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003fd8:	4b08      	ldr	r3, [pc, #32]	; (8003ffc <_sbrk+0x64>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003fde:	4b07      	ldr	r3, [pc, #28]	; (8003ffc <_sbrk+0x64>)
 8003fe0:	681a      	ldr	r2, [r3, #0]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	4413      	add	r3, r2
 8003fe6:	4a05      	ldr	r2, [pc, #20]	; (8003ffc <_sbrk+0x64>)
 8003fe8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003fea:	68fb      	ldr	r3, [r7, #12]
}
 8003fec:	4618      	mov	r0, r3
 8003fee:	3718      	adds	r7, #24
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	bd80      	pop	{r7, pc}
 8003ff4:	20020000 	.word	0x20020000
 8003ff8:	00000400 	.word	0x00000400
 8003ffc:	20002b2c 	.word	0x20002b2c
 8004000:	20006898 	.word	0x20006898

08004004 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004004:	b480      	push	{r7}
 8004006:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004008:	4b06      	ldr	r3, [pc, #24]	; (8004024 <SystemInit+0x20>)
 800400a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800400e:	4a05      	ldr	r2, [pc, #20]	; (8004024 <SystemInit+0x20>)
 8004010:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004014:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004018:	bf00      	nop
 800401a:	46bd      	mov	sp, r7
 800401c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004020:	4770      	bx	lr
 8004022:	bf00      	nop
 8004024:	e000ed00 	.word	0xe000ed00

08004028 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004028:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004060 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800402c:	480d      	ldr	r0, [pc, #52]	; (8004064 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800402e:	490e      	ldr	r1, [pc, #56]	; (8004068 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004030:	4a0e      	ldr	r2, [pc, #56]	; (800406c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004032:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004034:	e002      	b.n	800403c <LoopCopyDataInit>

08004036 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004036:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004038:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800403a:	3304      	adds	r3, #4

0800403c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800403c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800403e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004040:	d3f9      	bcc.n	8004036 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004042:	4a0b      	ldr	r2, [pc, #44]	; (8004070 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004044:	4c0b      	ldr	r4, [pc, #44]	; (8004074 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004046:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004048:	e001      	b.n	800404e <LoopFillZerobss>

0800404a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800404a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800404c:	3204      	adds	r2, #4

0800404e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800404e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004050:	d3fb      	bcc.n	800404a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004052:	f7ff ffd7 	bl	8004004 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004056:	f00a fd17 	bl	800ea88 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800405a:	f7fd fa6f 	bl	800153c <main>
  bx  lr    
 800405e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004060:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004064:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004068:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 800406c:	08014720 	.word	0x08014720
  ldr r2, =_sbss
 8004070:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8004074:	20006898 	.word	0x20006898

08004078 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004078:	e7fe      	b.n	8004078 <ADC_IRQHandler>
	...

0800407c <BMI088_Init>:
 *
 */
uint8_t BMI088_Init(BMI088 *imu,
				 SPI_HandleTypeDef *spiHandle,
				 GPIO_TypeDef *csAccPinBank, uint16_t csAccPin,
				 GPIO_TypeDef *csGyrPinBank, uint16_t csGyrPin) {
 800407c:	b580      	push	{r7, lr}
 800407e:	b086      	sub	sp, #24
 8004080:	af00      	add	r7, sp, #0
 8004082:	60f8      	str	r0, [r7, #12]
 8004084:	60b9      	str	r1, [r7, #8]
 8004086:	607a      	str	r2, [r7, #4]
 8004088:	807b      	strh	r3, [r7, #2]

	/* Store interface parameters in struct */
	imu->spiHandle 		= spiHandle;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	68ba      	ldr	r2, [r7, #8]
 800408e:	601a      	str	r2, [r3, #0]
	imu->csAccPinBank 	= csAccPinBank;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	687a      	ldr	r2, [r7, #4]
 8004094:	605a      	str	r2, [r3, #4]
	imu->csAccPin 		= csAccPin;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	887a      	ldrh	r2, [r7, #2]
 800409a:	819a      	strh	r2, [r3, #12]
	imu->csGyrPinBank 	= csGyrPinBank;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	6a3a      	ldr	r2, [r7, #32]
 80040a0:	609a      	str	r2, [r3, #8]
	imu->csGyrPin 		= csGyrPin;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80040a6:	81da      	strh	r2, [r3, #14]

	/* Clear DMA flags */
	imu->readingAcc = 0;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	2200      	movs	r2, #0
 80040ac:	741a      	strb	r2, [r3, #16]
	imu->readingGyr = 0;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2200      	movs	r2, #0
 80040b2:	745a      	strb	r2, [r3, #17]

	uint8_t status = 0;
 80040b4:	2300      	movs	r3, #0
 80040b6:	75fb      	strb	r3, [r7, #23]
	/*
	 *
	 * ACCELEROMETER
	 *
	 */
	uint8_t chipID=2;
 80040b8:	2302      	movs	r3, #2
 80040ba:	75bb      	strb	r3, [r7, #22]
		}
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
		HAL_Delay(200);
	}*/
	/* Accelerometer requires rising edge on CSB at start-up to activate SPI */
	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_RESET);
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	6858      	ldr	r0, [r3, #4]
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	899b      	ldrh	r3, [r3, #12]
 80040c4:	2200      	movs	r2, #0
 80040c6:	4619      	mov	r1, r3
 80040c8:	f002 ffe6 	bl	8007098 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80040cc:	2001      	movs	r0, #1
 80040ce:	f001 fead 	bl	8005e2c <HAL_Delay>
	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_SET);
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	6858      	ldr	r0, [r3, #4]
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	899b      	ldrh	r3, [r3, #12]
 80040da:	2201      	movs	r2, #1
 80040dc:	4619      	mov	r1, r3
 80040de:	f002 ffdb 	bl	8007098 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 80040e2:	2032      	movs	r0, #50	; 0x32
 80040e4:	f001 fea2 	bl	8005e2c <HAL_Delay>

	/* Perform accelerometer soft reset */
	status += BMI088_WriteAccRegister(imu, BMI_ACC_SOFTRESET, 0xB6);
 80040e8:	22b6      	movs	r2, #182	; 0xb6
 80040ea:	217e      	movs	r1, #126	; 0x7e
 80040ec:	68f8      	ldr	r0, [r7, #12]
 80040ee:	f000 f95b 	bl	80043a8 <BMI088_WriteAccRegister>
 80040f2:	4603      	mov	r3, r0
 80040f4:	461a      	mov	r2, r3
 80040f6:	7dfb      	ldrb	r3, [r7, #23]
 80040f8:	4413      	add	r3, r2
 80040fa:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(50);
 80040fc:	2032      	movs	r0, #50	; 0x32
 80040fe:	f001 fe95 	bl	8005e2c <HAL_Delay>

	/* Check chip ID */
	chipID=2;
 8004102:	2302      	movs	r3, #2
 8004104:	75bb      	strb	r3, [r7, #22]

	status += BMI088_ReadAccRegister(imu, BMI_ACC_CHIP_ID, &chipID);
 8004106:	f107 0316 	add.w	r3, r7, #22
 800410a:	461a      	mov	r2, r3
 800410c:	2100      	movs	r1, #0
 800410e:	68f8      	ldr	r0, [r7, #12]
 8004110:	f000 f8d0 	bl	80042b4 <BMI088_ReadAccRegister>
 8004114:	4603      	mov	r3, r0
 8004116:	461a      	mov	r2, r3
 8004118:	7dfb      	ldrb	r3, [r7, #23]
 800411a:	4413      	add	r3, r2
 800411c:	75fb      	strb	r3, [r7, #23]

	/*HAL_Delay(10);
	//status += BMI088_ReadAccRegister(imu, 0x02, &chipID); //0x02 ACC_ERR_REG return 0xFF ->fatal error
	status += BMI088_ReadAccRegister(imu, 0x02, &chipID);*/

	HAL_Delay(10);
 800411e:	200a      	movs	r0, #10
 8004120:	f001 fe84 	bl	8005e2c <HAL_Delay>

	/* Configure accelerometer  */

	status += BMI088_WriteAccRegister(imu, BMI_ACC_CONF, 0xA9); /* (0xA8 no oversampling, ODR = 100 Hz, BW = 40 Hz), 200 Hz no oversampling 0xA9, 0x99 200Hz OSR2  */
 8004124:	22a9      	movs	r2, #169	; 0xa9
 8004126:	2140      	movs	r1, #64	; 0x40
 8004128:	68f8      	ldr	r0, [r7, #12]
 800412a:	f000 f93d 	bl	80043a8 <BMI088_WriteAccRegister>
 800412e:	4603      	mov	r3, r0
 8004130:	461a      	mov	r2, r3
 8004132:	7dfb      	ldrb	r3, [r7, #23]
 8004134:	4413      	add	r3, r2
 8004136:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8004138:	200a      	movs	r0, #10
 800413a:	f001 fe77 	bl	8005e2c <HAL_Delay>


	status += BMI088_WriteAccRegister(imu, BMI_ACC_RANGE, 0x00); /* +- 3g range */
 800413e:	2200      	movs	r2, #0
 8004140:	2141      	movs	r1, #65	; 0x41
 8004142:	68f8      	ldr	r0, [r7, #12]
 8004144:	f000 f930 	bl	80043a8 <BMI088_WriteAccRegister>
 8004148:	4603      	mov	r3, r0
 800414a:	461a      	mov	r2, r3
 800414c:	7dfb      	ldrb	r3, [r7, #23]
 800414e:	4413      	add	r3, r2
 8004150:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8004152:	200a      	movs	r0, #10
 8004154:	f001 fe6a 	bl	8005e2c <HAL_Delay>


	/* Enable accelerometer data ready interrupt */
	status += BMI088_WriteAccRegister(imu, BMI_INT1_IO_CONF, 0x0A); /* INT1 = push-pull output, active high */
 8004158:	220a      	movs	r2, #10
 800415a:	2153      	movs	r1, #83	; 0x53
 800415c:	68f8      	ldr	r0, [r7, #12]
 800415e:	f000 f923 	bl	80043a8 <BMI088_WriteAccRegister>
 8004162:	4603      	mov	r3, r0
 8004164:	461a      	mov	r2, r3
 8004166:	7dfb      	ldrb	r3, [r7, #23]
 8004168:	4413      	add	r3, r2
 800416a:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 800416c:	200a      	movs	r0, #10
 800416e:	f001 fe5d 	bl	8005e2c <HAL_Delay>

	status += BMI088_WriteAccRegister(imu, BMI_INT1_INT2_MAP_DATA, 0x04);//ACC INT -> INT1
 8004172:	2204      	movs	r2, #4
 8004174:	2158      	movs	r1, #88	; 0x58
 8004176:	68f8      	ldr	r0, [r7, #12]
 8004178:	f000 f916 	bl	80043a8 <BMI088_WriteAccRegister>
 800417c:	4603      	mov	r3, r0
 800417e:	461a      	mov	r2, r3
 8004180:	7dfb      	ldrb	r3, [r7, #23]
 8004182:	4413      	add	r3, r2
 8004184:	75fb      	strb	r3, [r7, #23]

	HAL_Delay(10);
 8004186:	200a      	movs	r0, #10
 8004188:	f001 fe50 	bl	8005e2c <HAL_Delay>

	/* Put accelerometer into active mode */
	status += BMI088_WriteAccRegister(imu, BMI_ACC_PWR_CONF, 0x00);
 800418c:	2200      	movs	r2, #0
 800418e:	217c      	movs	r1, #124	; 0x7c
 8004190:	68f8      	ldr	r0, [r7, #12]
 8004192:	f000 f909 	bl	80043a8 <BMI088_WriteAccRegister>
 8004196:	4603      	mov	r3, r0
 8004198:	461a      	mov	r2, r3
 800419a:	7dfb      	ldrb	r3, [r7, #23]
 800419c:	4413      	add	r3, r2
 800419e:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 80041a0:	200a      	movs	r0, #10
 80041a2:	f001 fe43 	bl	8005e2c <HAL_Delay>

	/* Turn accelerometer on */
	status += BMI088_WriteAccRegister(imu, BMI_ACC_PWR_CTRL, 0x04);
 80041a6:	2204      	movs	r2, #4
 80041a8:	217d      	movs	r1, #125	; 0x7d
 80041aa:	68f8      	ldr	r0, [r7, #12]
 80041ac:	f000 f8fc 	bl	80043a8 <BMI088_WriteAccRegister>
 80041b0:	4603      	mov	r3, r0
 80041b2:	461a      	mov	r2, r3
 80041b4:	7dfb      	ldrb	r3, [r7, #23]
 80041b6:	4413      	add	r3, r2
 80041b8:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 80041ba:	200a      	movs	r0, #10
 80041bc:	f001 fe36 	bl	8005e2c <HAL_Delay>

	/* Pre-compute accelerometer conversion constant (raw to m/s^2), 9.81 g-constant, 32768 normalize raw data, 2^(<0x41>+1)*1.5, <0x41> is the acc range register */
	imu->accConversion = 9.81f / 32768.0f * 2.0f * 1.5f; /* Datasheet page 27 */
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	4a3a      	ldr	r2, [pc, #232]	; (80042ac <BMI088_Init+0x230>)
 80041c4:	631a      	str	r2, [r3, #48]	; 0x30
	
	/* Set accelerometer TX buffer for DMA */
	imu->accTxBuf[0] = BMI_ACC_DATA | 0x80;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	2292      	movs	r2, #146	; 0x92
 80041ca:	749a      	strb	r2, [r3, #18]
	 *
	 * GYROSCOPE
	 *
	 */

	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_SET);
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	6898      	ldr	r0, [r3, #8]
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	89db      	ldrh	r3, [r3, #14]
 80041d4:	2201      	movs	r2, #1
 80041d6:	4619      	mov	r1, r3
 80041d8:	f002 ff5e 	bl	8007098 <HAL_GPIO_WritePin>

	/* Perform gyro soft reset */
	status += BMI088_WriteGyrRegister(imu, BMI_GYR_SOFTRESET, 0xB6);
 80041dc:	22b6      	movs	r2, #182	; 0xb6
 80041de:	2114      	movs	r1, #20
 80041e0:	68f8      	ldr	r0, [r7, #12]
 80041e2:	f000 f91b 	bl	800441c <BMI088_WriteGyrRegister>
 80041e6:	4603      	mov	r3, r0
 80041e8:	461a      	mov	r2, r3
 80041ea:	7dfb      	ldrb	r3, [r7, #23]
 80041ec:	4413      	add	r3, r2
 80041ee:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(250);
 80041f0:	20fa      	movs	r0, #250	; 0xfa
 80041f2:	f001 fe1b 	bl	8005e2c <HAL_Delay>

	/* Check chip ID */
	status += BMI088_ReadGyrRegister(imu, BMI_GYR_CHIP_ID, &chipID);
 80041f6:	f107 0316 	add.w	r3, r7, #22
 80041fa:	461a      	mov	r2, r3
 80041fc:	2100      	movs	r1, #0
 80041fe:	68f8      	ldr	r0, [r7, #12]
 8004200:	f000 f896 	bl	8004330 <BMI088_ReadGyrRegister>
 8004204:	4603      	mov	r3, r0
 8004206:	461a      	mov	r2, r3
 8004208:	7dfb      	ldrb	r3, [r7, #23]
 800420a:	4413      	add	r3, r2
 800420c:	75fb      	strb	r3, [r7, #23]

		//return 0;

	}

	HAL_Delay(10);
 800420e:	200a      	movs	r0, #10
 8004210:	f001 fe0c 	bl	8005e2c <HAL_Delay>

	/* Configure gyroscope */
	status += BMI088_WriteGyrRegister(imu, BMI_GYR_RANGE, 0x01); /* +- 1000 deg/s */
 8004214:	2201      	movs	r2, #1
 8004216:	210f      	movs	r1, #15
 8004218:	68f8      	ldr	r0, [r7, #12]
 800421a:	f000 f8ff 	bl	800441c <BMI088_WriteGyrRegister>
 800421e:	4603      	mov	r3, r0
 8004220:	461a      	mov	r2, r3
 8004222:	7dfb      	ldrb	r3, [r7, #23]
 8004224:	4413      	add	r3, r2
 8004226:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8004228:	200a      	movs	r0, #10
 800422a:	f001 fdff 	bl	8005e2c <HAL_Delay>


	status += BMI088_WriteGyrRegister(imu, BMI_GYR_BANDWIDTH, 0x06); /* 0x07 ODR = 100 Hz, Filter bandwidth = 32 Hz, 0x06 BW = 64Hz ODR = 200 Hz, 0x04 ODR = 200Hz BW = 23Hz */
 800422e:	2206      	movs	r2, #6
 8004230:	2110      	movs	r1, #16
 8004232:	68f8      	ldr	r0, [r7, #12]
 8004234:	f000 f8f2 	bl	800441c <BMI088_WriteGyrRegister>
 8004238:	4603      	mov	r3, r0
 800423a:	461a      	mov	r2, r3
 800423c:	7dfb      	ldrb	r3, [r7, #23]
 800423e:	4413      	add	r3, r2
 8004240:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8004242:	200a      	movs	r0, #10
 8004244:	f001 fdf2 	bl	8005e2c <HAL_Delay>

	/* Enable gyroscope data ready interrupt */
	status += BMI088_WriteGyrRegister(imu, BMI_GYR_INT_CTRL, 0x80); /* New data interrupt enabled */
 8004248:	2280      	movs	r2, #128	; 0x80
 800424a:	2115      	movs	r1, #21
 800424c:	68f8      	ldr	r0, [r7, #12]
 800424e:	f000 f8e5 	bl	800441c <BMI088_WriteGyrRegister>
 8004252:	4603      	mov	r3, r0
 8004254:	461a      	mov	r2, r3
 8004256:	7dfb      	ldrb	r3, [r7, #23]
 8004258:	4413      	add	r3, r2
 800425a:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 800425c:	200a      	movs	r0, #10
 800425e:	f001 fde5 	bl	8005e2c <HAL_Delay>

	status += BMI088_WriteGyrRegister(imu, BMI_INT3_INT4_IO_CONF, 0x01); /* INT3 = push-pull, active high */
 8004262:	2201      	movs	r2, #1
 8004264:	2116      	movs	r1, #22
 8004266:	68f8      	ldr	r0, [r7, #12]
 8004268:	f000 f8d8 	bl	800441c <BMI088_WriteGyrRegister>
 800426c:	4603      	mov	r3, r0
 800426e:	461a      	mov	r2, r3
 8004270:	7dfb      	ldrb	r3, [r7, #23]
 8004272:	4413      	add	r3, r2
 8004274:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8004276:	200a      	movs	r0, #10
 8004278:	f001 fdd8 	bl	8005e2c <HAL_Delay>

	status += BMI088_WriteGyrRegister(imu, BMI_INT3_INT4_IO_MAP, 0x01); /* Data ready interrupt mapped to INT3 pin */
 800427c:	2201      	movs	r2, #1
 800427e:	2118      	movs	r1, #24
 8004280:	68f8      	ldr	r0, [r7, #12]
 8004282:	f000 f8cb 	bl	800441c <BMI088_WriteGyrRegister>
 8004286:	4603      	mov	r3, r0
 8004288:	461a      	mov	r2, r3
 800428a:	7dfb      	ldrb	r3, [r7, #23]
 800428c:	4413      	add	r3, r2
 800428e:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8004290:	200a      	movs	r0, #10
 8004292:	f001 fdcb 	bl	8005e2c <HAL_Delay>

	/* Pre-compute gyroscope conversion constant (raw to rad/s) 0.017 °/s -> rad/s, 1000 the range, 32768 normalize the raw data*/
	imu->gyrConversion = 0.01745329251f * 1000.0f / 32768.0f; /* Datasheet page 39 */
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	4a05      	ldr	r2, [pc, #20]	; (80042b0 <BMI088_Init+0x234>)
 800429a:	635a      	str	r2, [r3, #52]	; 0x34
	
	/* Set gyroscope TX buffer for DMA */
	imu->gyrTxBuf[0] = BMI_GYR_DATA | 0x80;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	2282      	movs	r2, #130	; 0x82
 80042a0:	769a      	strb	r2, [r3, #26]

	return status;
 80042a2:	7dfb      	ldrb	r3, [r7, #23]

}
 80042a4:	4618      	mov	r0, r3
 80042a6:	3718      	adds	r7, #24
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bd80      	pop	{r7, pc}
 80042ac:	3a6b70a4 	.word	0x3a6b70a4
 80042b0:	3a0ba058 	.word	0x3a0ba058

080042b4 <BMI088_ReadAccRegister>:
 * LOW-LEVEL REGISTER FUNCTIONS
 *
 */

/* ACCELEROMETER READS ARE DIFFERENT TO GYROSCOPE READS. SEND ONE BYTE ADDRESS, READ ONE DUMMY BYTE, READ TRUE DATA !!! */
uint8_t BMI088_ReadAccRegister(BMI088 *imu, uint8_t regAddr, uint8_t *data) {
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b088      	sub	sp, #32
 80042b8:	af02      	add	r7, sp, #8
 80042ba:	60f8      	str	r0, [r7, #12]
 80042bc:	460b      	mov	r3, r1
 80042be:	607a      	str	r2, [r7, #4]
 80042c0:	72fb      	strb	r3, [r7, #11]

	uint8_t txBuf[3] = {regAddr | 0x80, 0x00, 0x00};
 80042c2:	7afb      	ldrb	r3, [r7, #11]
 80042c4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80042c8:	b2db      	uxtb	r3, r3
 80042ca:	753b      	strb	r3, [r7, #20]
 80042cc:	2300      	movs	r3, #0
 80042ce:	757b      	strb	r3, [r7, #21]
 80042d0:	2300      	movs	r3, #0
 80042d2:	75bb      	strb	r3, [r7, #22]
	uint8_t rxBuf[3];

	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_RESET);
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	6858      	ldr	r0, [r3, #4]
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	899b      	ldrh	r3, [r3, #12]
 80042dc:	2200      	movs	r2, #0
 80042de:	4619      	mov	r1, r3
 80042e0:	f002 feda 	bl	8007098 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_TransmitReceive(imu->spiHandle, txBuf, rxBuf, 3, HAL_MAX_DELAY) == HAL_OK);
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	6818      	ldr	r0, [r3, #0]
 80042e8:	f107 0210 	add.w	r2, r7, #16
 80042ec:	f107 0114 	add.w	r1, r7, #20
 80042f0:	f04f 33ff 	mov.w	r3, #4294967295
 80042f4:	9300      	str	r3, [sp, #0]
 80042f6:	2303      	movs	r3, #3
 80042f8:	f004 fd37 	bl	8008d6a <HAL_SPI_TransmitReceive>
 80042fc:	4603      	mov	r3, r0
 80042fe:	2b00      	cmp	r3, #0
 8004300:	bf0c      	ite	eq
 8004302:	2301      	moveq	r3, #1
 8004304:	2300      	movne	r3, #0
 8004306:	b2db      	uxtb	r3, r3
 8004308:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_SET);
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	6858      	ldr	r0, [r3, #4]
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	899b      	ldrh	r3, [r3, #12]
 8004312:	2201      	movs	r2, #1
 8004314:	4619      	mov	r1, r3
 8004316:	f002 febf 	bl	8007098 <HAL_GPIO_WritePin>

	if (status == 1) {
 800431a:	7dfb      	ldrb	r3, [r7, #23]
 800431c:	2b01      	cmp	r3, #1
 800431e:	d102      	bne.n	8004326 <BMI088_ReadAccRegister+0x72>

		*data = rxBuf[2];
 8004320:	7cba      	ldrb	r2, [r7, #18]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	701a      	strb	r2, [r3, #0]

	}

	return status;
 8004326:	7dfb      	ldrb	r3, [r7, #23]

}
 8004328:	4618      	mov	r0, r3
 800432a:	3718      	adds	r7, #24
 800432c:	46bd      	mov	sp, r7
 800432e:	bd80      	pop	{r7, pc}

08004330 <BMI088_ReadGyrRegister>:

uint8_t BMI088_ReadGyrRegister(BMI088 *imu, uint8_t regAddr, uint8_t *data) {
 8004330:	b580      	push	{r7, lr}
 8004332:	b088      	sub	sp, #32
 8004334:	af02      	add	r7, sp, #8
 8004336:	60f8      	str	r0, [r7, #12]
 8004338:	460b      	mov	r3, r1
 800433a:	607a      	str	r2, [r7, #4]
 800433c:	72fb      	strb	r3, [r7, #11]

	uint8_t txBuf[2] = {regAddr | 0x80, 0x00}; //0x80
 800433e:	7afb      	ldrb	r3, [r7, #11]
 8004340:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004344:	b2db      	uxtb	r3, r3
 8004346:	753b      	strb	r3, [r7, #20]
 8004348:	2300      	movs	r3, #0
 800434a:	757b      	strb	r3, [r7, #21]
	uint8_t rxBuf[2];

	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_RESET);
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	6898      	ldr	r0, [r3, #8]
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	89db      	ldrh	r3, [r3, #14]
 8004354:	2200      	movs	r2, #0
 8004356:	4619      	mov	r1, r3
 8004358:	f002 fe9e 	bl	8007098 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_TransmitReceive(imu->spiHandle, txBuf, rxBuf, 2, HAL_MAX_DELAY) == HAL_OK);
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	6818      	ldr	r0, [r3, #0]
 8004360:	f107 0210 	add.w	r2, r7, #16
 8004364:	f107 0114 	add.w	r1, r7, #20
 8004368:	f04f 33ff 	mov.w	r3, #4294967295
 800436c:	9300      	str	r3, [sp, #0]
 800436e:	2302      	movs	r3, #2
 8004370:	f004 fcfb 	bl	8008d6a <HAL_SPI_TransmitReceive>
 8004374:	4603      	mov	r3, r0
 8004376:	2b00      	cmp	r3, #0
 8004378:	bf0c      	ite	eq
 800437a:	2301      	moveq	r3, #1
 800437c:	2300      	movne	r3, #0
 800437e:	b2db      	uxtb	r3, r3
 8004380:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_SET);
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	6898      	ldr	r0, [r3, #8]
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	89db      	ldrh	r3, [r3, #14]
 800438a:	2201      	movs	r2, #1
 800438c:	4619      	mov	r1, r3
 800438e:	f002 fe83 	bl	8007098 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_RESET);
	uint8_t status = (HAL_SPI_TransmitReceive(imu->spiHandle, txBuf, rxBuf, 3, HAL_MAX_DELAY) == HAL_OK);
	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_SET);*/

	if (status == 1) {
 8004392:	7dfb      	ldrb	r3, [r7, #23]
 8004394:	2b01      	cmp	r3, #1
 8004396:	d102      	bne.n	800439e <BMI088_ReadGyrRegister+0x6e>

		*data = rxBuf[1];
 8004398:	7c7a      	ldrb	r2, [r7, #17]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	701a      	strb	r2, [r3, #0]

	}

	return status;
 800439e:	7dfb      	ldrb	r3, [r7, #23]

}
 80043a0:	4618      	mov	r0, r3
 80043a2:	3718      	adds	r7, #24
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bd80      	pop	{r7, pc}

080043a8 <BMI088_WriteAccRegister>:

uint8_t BMI088_WriteAccRegister(BMI088 *imu, uint8_t regAddr, uint8_t data) {
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b084      	sub	sp, #16
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
 80043b0:	460b      	mov	r3, r1
 80043b2:	70fb      	strb	r3, [r7, #3]
 80043b4:	4613      	mov	r3, r2
 80043b6:	70bb      	strb	r3, [r7, #2]

	uint8_t txBuf[2] = {regAddr, data};
 80043b8:	78fb      	ldrb	r3, [r7, #3]
 80043ba:	733b      	strb	r3, [r7, #12]
 80043bc:	78bb      	ldrb	r3, [r7, #2]
 80043be:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_RESET);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6858      	ldr	r0, [r3, #4]
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	899b      	ldrh	r3, [r3, #12]
 80043c8:	2200      	movs	r2, #0
 80043ca:	4619      	mov	r1, r3
 80043cc:	f002 fe64 	bl	8007098 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_Transmit(imu->spiHandle, txBuf, 2, HAL_MAX_DELAY) == HAL_OK);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6818      	ldr	r0, [r3, #0]
 80043d4:	f107 010c 	add.w	r1, r7, #12
 80043d8:	f04f 33ff 	mov.w	r3, #4294967295
 80043dc:	2202      	movs	r2, #2
 80043de:	f004 fb88 	bl	8008af2 <HAL_SPI_Transmit>
 80043e2:	4603      	mov	r3, r0
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	bf0c      	ite	eq
 80043e8:	2301      	moveq	r3, #1
 80043ea:	2300      	movne	r3, #0
 80043ec:	b2db      	uxtb	r3, r3
 80043ee:	73fb      	strb	r3, [r7, #15]
	while(HAL_SPI_GetState(imu->spiHandle) != HAL_SPI_STATE_READY);
 80043f0:	bf00      	nop
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4618      	mov	r0, r3
 80043f8:	f004 fe59 	bl	80090ae <HAL_SPI_GetState>
 80043fc:	4603      	mov	r3, r0
 80043fe:	2b01      	cmp	r3, #1
 8004400:	d1f7      	bne.n	80043f2 <BMI088_WriteAccRegister+0x4a>
	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_SET);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6858      	ldr	r0, [r3, #4]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	899b      	ldrh	r3, [r3, #12]
 800440a:	2201      	movs	r2, #1
 800440c:	4619      	mov	r1, r3
 800440e:	f002 fe43 	bl	8007098 <HAL_GPIO_WritePin>

	return status;
 8004412:	7bfb      	ldrb	r3, [r7, #15]

}
 8004414:	4618      	mov	r0, r3
 8004416:	3710      	adds	r7, #16
 8004418:	46bd      	mov	sp, r7
 800441a:	bd80      	pop	{r7, pc}

0800441c <BMI088_WriteGyrRegister>:

uint8_t BMI088_WriteGyrRegister(BMI088 *imu, uint8_t regAddr, uint8_t data) {
 800441c:	b580      	push	{r7, lr}
 800441e:	b084      	sub	sp, #16
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
 8004424:	460b      	mov	r3, r1
 8004426:	70fb      	strb	r3, [r7, #3]
 8004428:	4613      	mov	r3, r2
 800442a:	70bb      	strb	r3, [r7, #2]

	uint8_t txBuf[2] = {regAddr, data};
 800442c:	78fb      	ldrb	r3, [r7, #3]
 800442e:	733b      	strb	r3, [r7, #12]
 8004430:	78bb      	ldrb	r3, [r7, #2]
 8004432:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_RESET);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6898      	ldr	r0, [r3, #8]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	89db      	ldrh	r3, [r3, #14]
 800443c:	2200      	movs	r2, #0
 800443e:	4619      	mov	r1, r3
 8004440:	f002 fe2a 	bl	8007098 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_Transmit(imu->spiHandle, txBuf, 2, HAL_MAX_DELAY) == HAL_OK);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6818      	ldr	r0, [r3, #0]
 8004448:	f107 010c 	add.w	r1, r7, #12
 800444c:	f04f 33ff 	mov.w	r3, #4294967295
 8004450:	2202      	movs	r2, #2
 8004452:	f004 fb4e 	bl	8008af2 <HAL_SPI_Transmit>
 8004456:	4603      	mov	r3, r0
 8004458:	2b00      	cmp	r3, #0
 800445a:	bf0c      	ite	eq
 800445c:	2301      	moveq	r3, #1
 800445e:	2300      	movne	r3, #0
 8004460:	b2db      	uxtb	r3, r3
 8004462:	73fb      	strb	r3, [r7, #15]
	while(HAL_SPI_GetState(imu->spiHandle) != HAL_SPI_STATE_READY);
 8004464:	bf00      	nop
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4618      	mov	r0, r3
 800446c:	f004 fe1f 	bl	80090ae <HAL_SPI_GetState>
 8004470:	4603      	mov	r3, r0
 8004472:	2b01      	cmp	r3, #1
 8004474:	d1f7      	bne.n	8004466 <BMI088_WriteGyrRegister+0x4a>
	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_SET);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6898      	ldr	r0, [r3, #8]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	89db      	ldrh	r3, [r3, #14]
 800447e:	2201      	movs	r2, #1
 8004480:	4619      	mov	r1, r3
 8004482:	f002 fe09 	bl	8007098 <HAL_GPIO_WritePin>

	return status;
 8004486:	7bfb      	ldrb	r3, [r7, #15]

}
 8004488:	4618      	mov	r0, r3
 800448a:	3710      	adds	r7, #16
 800448c:	46bd      	mov	sp, r7
 800448e:	bd80      	pop	{r7, pc}

08004490 <BMI088_ReadAccelerometer>:
/*
 *
 * POLLING
 *
 */
uint8_t BMI088_ReadAccelerometer(BMI088 *imu) {
 8004490:	b580      	push	{r7, lr}
 8004492:	b08a      	sub	sp, #40	; 0x28
 8004494:	af02      	add	r7, sp, #8
 8004496:	6078      	str	r0, [r7, #4]

	/* Read raw accelerometer data */
	uint8_t txBuf[8] = {(BMI_ACC_DATA | 0x80), 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}; /* Register addr, 1 byte dummy, 6 bytes data */
 8004498:	4a36      	ldr	r2, [pc, #216]	; (8004574 <BMI088_ReadAccelerometer+0xe4>)
 800449a:	f107 0310 	add.w	r3, r7, #16
 800449e:	e892 0003 	ldmia.w	r2, {r0, r1}
 80044a2:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t rxBuf[8];

	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_RESET);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6858      	ldr	r0, [r3, #4]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	899b      	ldrh	r3, [r3, #12]
 80044ae:	2200      	movs	r2, #0
 80044b0:	4619      	mov	r1, r3
 80044b2:	f002 fdf1 	bl	8007098 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_TransmitReceive(imu->spiHandle, txBuf, rxBuf, 8, HAL_MAX_DELAY) == HAL_OK);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6818      	ldr	r0, [r3, #0]
 80044ba:	f107 0208 	add.w	r2, r7, #8
 80044be:	f107 0110 	add.w	r1, r7, #16
 80044c2:	f04f 33ff 	mov.w	r3, #4294967295
 80044c6:	9300      	str	r3, [sp, #0]
 80044c8:	2308      	movs	r3, #8
 80044ca:	f004 fc4e 	bl	8008d6a <HAL_SPI_TransmitReceive>
 80044ce:	4603      	mov	r3, r0
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	bf0c      	ite	eq
 80044d4:	2301      	moveq	r3, #1
 80044d6:	2300      	movne	r3, #0
 80044d8:	b2db      	uxtb	r3, r3
 80044da:	77fb      	strb	r3, [r7, #31]
	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_SET);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6858      	ldr	r0, [r3, #4]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	899b      	ldrh	r3, [r3, #12]
 80044e4:	2201      	movs	r2, #1
 80044e6:	4619      	mov	r1, r3
 80044e8:	f002 fdd6 	bl	8007098 <HAL_GPIO_WritePin>

	/* Form signed 16-bit integers */
	int16_t accX = (int16_t) ((rxBuf[3] << 8) | rxBuf[2]);
 80044ec:	7afb      	ldrb	r3, [r7, #11]
 80044ee:	021b      	lsls	r3, r3, #8
 80044f0:	b21a      	sxth	r2, r3
 80044f2:	7abb      	ldrb	r3, [r7, #10]
 80044f4:	b21b      	sxth	r3, r3
 80044f6:	4313      	orrs	r3, r2
 80044f8:	83bb      	strh	r3, [r7, #28]
	int16_t accY = (int16_t) ((rxBuf[5] << 8) | rxBuf[4]);
 80044fa:	7b7b      	ldrb	r3, [r7, #13]
 80044fc:	021b      	lsls	r3, r3, #8
 80044fe:	b21a      	sxth	r2, r3
 8004500:	7b3b      	ldrb	r3, [r7, #12]
 8004502:	b21b      	sxth	r3, r3
 8004504:	4313      	orrs	r3, r2
 8004506:	837b      	strh	r3, [r7, #26]
	int16_t accZ = (int16_t) ((rxBuf[7] << 8) | rxBuf[6]);
 8004508:	7bfb      	ldrb	r3, [r7, #15]
 800450a:	021b      	lsls	r3, r3, #8
 800450c:	b21a      	sxth	r2, r3
 800450e:	7bbb      	ldrb	r3, [r7, #14]
 8004510:	b21b      	sxth	r3, r3
 8004512:	4313      	orrs	r3, r2
 8004514:	833b      	strh	r3, [r7, #24]

	/* Convert to m/s^2 */
	imu->acc_mps2[0] = imu->accConversion * accX;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 800451c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8004520:	ee07 3a90 	vmov	s15, r3
 8004524:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004528:	ee67 7a27 	vmul.f32	s15, s14, s15
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
	imu->acc_mps2[1] = imu->accConversion * accY;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8004538:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800453c:	ee07 3a90 	vmov	s15, r3
 8004540:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004544:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
	imu->acc_mps2[2] = imu->accConversion * accZ;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8004554:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8004558:	ee07 3a90 	vmov	s15, r3
 800455c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004560:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40

	return status;
 800456a:	7ffb      	ldrb	r3, [r7, #31]

}
 800456c:	4618      	mov	r0, r3
 800456e:	3720      	adds	r7, #32
 8004570:	46bd      	mov	sp, r7
 8004572:	bd80      	pop	{r7, pc}
 8004574:	08013e94 	.word	0x08013e94

08004578 <BMI088_ReadGyroscope>:

uint8_t BMI088_ReadGyroscope(BMI088 *imu) {
 8004578:	b580      	push	{r7, lr}
 800457a:	b08a      	sub	sp, #40	; 0x28
 800457c:	af02      	add	r7, sp, #8
 800457e:	6078      	str	r0, [r7, #4]

	/* Read raw gyroscope data */
	uint8_t txBuf[7] = {(BMI_GYR_DATA | 0x80), 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}; /* Register addr, 6 bytes data */
 8004580:	4a38      	ldr	r2, [pc, #224]	; (8004664 <BMI088_ReadGyroscope+0xec>)
 8004582:	f107 0310 	add.w	r3, r7, #16
 8004586:	e892 0003 	ldmia.w	r2, {r0, r1}
 800458a:	6018      	str	r0, [r3, #0]
 800458c:	3304      	adds	r3, #4
 800458e:	8019      	strh	r1, [r3, #0]
 8004590:	3302      	adds	r3, #2
 8004592:	0c0a      	lsrs	r2, r1, #16
 8004594:	701a      	strb	r2, [r3, #0]
	uint8_t rxBuf[7];

	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_RESET);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6898      	ldr	r0, [r3, #8]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	89db      	ldrh	r3, [r3, #14]
 800459e:	2200      	movs	r2, #0
 80045a0:	4619      	mov	r1, r3
 80045a2:	f002 fd79 	bl	8007098 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_TransmitReceive(imu->spiHandle, txBuf, rxBuf, 7, HAL_MAX_DELAY) == HAL_OK);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6818      	ldr	r0, [r3, #0]
 80045aa:	f107 0208 	add.w	r2, r7, #8
 80045ae:	f107 0110 	add.w	r1, r7, #16
 80045b2:	f04f 33ff 	mov.w	r3, #4294967295
 80045b6:	9300      	str	r3, [sp, #0]
 80045b8:	2307      	movs	r3, #7
 80045ba:	f004 fbd6 	bl	8008d6a <HAL_SPI_TransmitReceive>
 80045be:	4603      	mov	r3, r0
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	bf0c      	ite	eq
 80045c4:	2301      	moveq	r3, #1
 80045c6:	2300      	movne	r3, #0
 80045c8:	b2db      	uxtb	r3, r3
 80045ca:	77fb      	strb	r3, [r7, #31]
	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_SET);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6898      	ldr	r0, [r3, #8]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	89db      	ldrh	r3, [r3, #14]
 80045d4:	2201      	movs	r2, #1
 80045d6:	4619      	mov	r1, r3
 80045d8:	f002 fd5e 	bl	8007098 <HAL_GPIO_WritePin>

	/* Form signed 16-bit integers */
	int16_t gyrX = (int16_t) ((rxBuf[2] << 8) | rxBuf[1]);
 80045dc:	7abb      	ldrb	r3, [r7, #10]
 80045de:	021b      	lsls	r3, r3, #8
 80045e0:	b21a      	sxth	r2, r3
 80045e2:	7a7b      	ldrb	r3, [r7, #9]
 80045e4:	b21b      	sxth	r3, r3
 80045e6:	4313      	orrs	r3, r2
 80045e8:	83bb      	strh	r3, [r7, #28]
	int16_t gyrY = (int16_t) ((rxBuf[4] << 8) | rxBuf[3]);
 80045ea:	7b3b      	ldrb	r3, [r7, #12]
 80045ec:	021b      	lsls	r3, r3, #8
 80045ee:	b21a      	sxth	r2, r3
 80045f0:	7afb      	ldrb	r3, [r7, #11]
 80045f2:	b21b      	sxth	r3, r3
 80045f4:	4313      	orrs	r3, r2
 80045f6:	837b      	strh	r3, [r7, #26]
	int16_t gyrZ = (int16_t) ((rxBuf[6] << 8) | rxBuf[5]);
 80045f8:	7bbb      	ldrb	r3, [r7, #14]
 80045fa:	021b      	lsls	r3, r3, #8
 80045fc:	b21a      	sxth	r2, r3
 80045fe:	7b7b      	ldrb	r3, [r7, #13]
 8004600:	b21b      	sxth	r3, r3
 8004602:	4313      	orrs	r3, r2
 8004604:	833b      	strh	r3, [r7, #24]

	/* Convert to rad/s */
	imu->gyr_rps[0] = imu->gyrConversion * gyrX;//-0.0000661263;//-0.000220318;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 800460c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8004610:	ee07 3a90 	vmov	s15, r3
 8004614:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004618:	ee67 7a27 	vmul.f32	s15, s14, s15
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
	imu->gyr_rps[1] = imu->gyrConversion * gyrY;//-0.000491353;//-0.001161367;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8004628:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800462c:	ee07 3a90 	vmov	s15, r3
 8004630:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004634:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
	imu->gyr_rps[2] = imu->gyrConversion * gyrZ;//-0.002349043;//-0.002582031;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8004644:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8004648:	ee07 3a90 	vmov	s15, r3
 800464c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004650:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c

	//own code line
	//if(status == 1) HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);
	return status;
 800465a:	7ffb      	ldrb	r3, [r7, #31]

}
 800465c:	4618      	mov	r0, r3
 800465e:	3720      	adds	r7, #32
 8004660:	46bd      	mov	sp, r7
 8004662:	bd80      	pop	{r7, pc}
 8004664:	08013e9c 	.word	0x08013e9c

08004668 <BMM150_Init>:
HAL_StatusTypeDef	BMM150_SoftReset(BMM150 *bmm);
HAL_StatusTypeDef	BMM150_ReadByte(BMM150 *bmm, uint8_t regAddr, uint8_t *data);
HAL_StatusTypeDef	BMM150_WriteByte(BMM150 *bmm, uint8_t regAddr, uint8_t data);
HAL_StatusTypeDef	BMM150_ReadMultiBytes(BMM150 *bmm, uint8_t regAddr, uint8_t *data, uint8_t len);

HAL_StatusTypeDef    BMM150_Init(BMM150 *bmm){
 8004668:	b580      	push	{r7, lr}
 800466a:	b092      	sub	sp, #72	; 0x48
 800466c:	af04      	add	r7, sp, #16
 800466e:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef rslt;
	uint8_t chip_id;
	uint8_t pwr_ctrl_on = 0b0000001;
 8004670:	2301      	movs	r3, #1
 8004672:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	uint8_t opmode = 0x00;
 8004676:	2300      	movs	r3, #0
 8004678:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	float magz_p;
	float magz_n;
	BMM150_trim_data trim_debug;

	//bring up from suspend mode to sleep mode
	HAL_I2C_Mem_Write(bmm->hi2c_handle, BMM150_ADDR << 1, BMM_PWR_CTRL_ADDR, I2C_MEMADD_SIZE_8BIT, &pwr_ctrl_on, 1, 100);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6818      	ldr	r0, [r3, #0]
 8004680:	2364      	movs	r3, #100	; 0x64
 8004682:	9302      	str	r3, [sp, #8]
 8004684:	2301      	movs	r3, #1
 8004686:	9301      	str	r3, [sp, #4]
 8004688:	f107 0322 	add.w	r3, r7, #34	; 0x22
 800468c:	9300      	str	r3, [sp, #0]
 800468e:	2301      	movs	r3, #1
 8004690:	224b      	movs	r2, #75	; 0x4b
 8004692:	2120      	movs	r1, #32
 8004694:	f002 fe90 	bl	80073b8 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8004698:	200a      	movs	r0, #10
 800469a:	f001 fbc7 	bl	8005e2c <HAL_Delay>
	// Read CHIP_ID byte
	rslt = BMM150_ReadByte(bmm, BMM150_CHIP_ID_ADDR, &chip_id);
 800469e:	f107 0323 	add.w	r3, r7, #35	; 0x23
 80046a2:	461a      	mov	r2, r3
 80046a4:	2140      	movs	r1, #64	; 0x40
 80046a6:	6878      	ldr	r0, [r7, #4]
 80046a8:	f000 fdfa 	bl	80052a0 <BMM150_ReadByte>
 80046ac:	4603      	mov	r3, r0
 80046ae:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	if (chip_id != 0x32) {

		//	return 0;

		}
	HAL_Delay(10);
 80046b2:	200a      	movs	r0, #10
 80046b4:	f001 fbba 	bl	8005e2c <HAL_Delay>
	BMM150_Get_TrimData(bmm, &trim_debug);
 80046b8:	f107 030c 	add.w	r3, r7, #12
 80046bc:	4619      	mov	r1, r3
 80046be:	6878      	ldr	r0, [r7, #4]
 80046c0:	f000 f9cc 	bl	8004a5c <BMM150_Get_TrimData>
	HAL_Delay(10);
 80046c4:	200a      	movs	r0, #10
 80046c6:	f001 fbb1 	bl	8005e2c <HAL_Delay>
//	0x4C reg bit <1:2> advanced self test, bit <3:5> data rate, bit <6:7> opmode, bit <8> normal self test
//	1. set sleep mode, opmode 11 is sleep
	BMM150_Set_OpMode(bmm, 0x06);
 80046ca:	2106      	movs	r1, #6
 80046cc:	6878      	ldr	r0, [r7, #4]
 80046ce:	f000 f8fc 	bl	80048ca <BMM150_Set_OpMode>
//	disable x,y axis, 0x4E
	rslt = BMM150_ReadByte(bmm, 0x4E, &debug);
 80046d2:	f107 0321 	add.w	r3, r7, #33	; 0x21
 80046d6:	461a      	mov	r2, r3
 80046d8:	214e      	movs	r1, #78	; 0x4e
 80046da:	6878      	ldr	r0, [r7, #4]
 80046dc:	f000 fde0 	bl	80052a0 <BMM150_ReadByte>
 80046e0:	4603      	mov	r3, r0
 80046e2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	debug = debug | 0x18;
 80046e6:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80046ea:	f043 0318 	orr.w	r3, r3, #24
 80046ee:	b2db      	uxtb	r3, r3
 80046f0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	HAL_Delay(1);
 80046f4:	2001      	movs	r0, #1
 80046f6:	f001 fb99 	bl	8005e2c <HAL_Delay>
	rslt = BMM150_WriteByte(bmm, 0x4E, debug);
 80046fa:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80046fe:	461a      	mov	r2, r3
 8004700:	214e      	movs	r1, #78	; 0x4e
 8004702:	6878      	ldr	r0, [r7, #4]
 8004704:	f000 fe04 	bl	8005310 <BMM150_WriteByte>
 8004708:	4603      	mov	r3, r0
 800470a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	HAL_Delay(1);
 800470e:	2001      	movs	r0, #1
 8004710:	f001 fb8c 	bl	8005e2c <HAL_Delay>
//	set Z repetitions
	rslt = BMM150_WriteByte(bmm, 0x52, 0x0F);
 8004714:	220f      	movs	r2, #15
 8004716:	2152      	movs	r1, #82	; 0x52
 8004718:	6878      	ldr	r0, [r7, #4]
 800471a:	f000 fdf9 	bl	8005310 <BMM150_WriteByte>
 800471e:	4603      	mov	r3, r0
 8004720:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	HAL_Delay(1);
 8004724:	2001      	movs	r0, #1
 8004726:	f001 fb81 	bl	8005e2c <HAL_Delay>
//	enable positive advanced self test current, 0x4C reg 11 <1:2> bit(1->8 bit) -> positive test current
	BMM150_Set_OpMode(bmm, 0xC6);
 800472a:	21c6      	movs	r1, #198	; 0xc6
 800472c:	6878      	ldr	r0, [r7, #4]
 800472e:	f000 f8cc 	bl	80048ca <BMM150_Set_OpMode>
	HAL_Delay(1);
 8004732:	2001      	movs	r0, #1
 8004734:	f001 fb7a 	bl	8005e2c <HAL_Delay>
//	set force mode, readout Z and R channel, after measurement is finished
	BMM150_Set_OpMode(bmm, 0xC2);
 8004738:	21c2      	movs	r1, #194	; 0xc2
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	f000 f8c5 	bl	80048ca <BMM150_Set_OpMode>
	HAL_Delay(10);
 8004740:	200a      	movs	r0, #10
 8004742:	f001 fb73 	bl	8005e2c <HAL_Delay>
	rslt = BMM150_ReadMultiBytes(bmm, 0x46,  &debug_array, 4);
 8004746:	f107 021c 	add.w	r2, r7, #28
 800474a:	2304      	movs	r3, #4
 800474c:	2146      	movs	r1, #70	; 0x46
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	f000 fdc0 	bl	80052d4 <BMM150_ReadMultiBytes>
 8004754:	4603      	mov	r3, r0
 8004756:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	field_zp = (int16_t)((debug_array[1] << 8) + (debug_array[0] ));
 800475a:	7f7b      	ldrb	r3, [r7, #29]
 800475c:	b29b      	uxth	r3, r3
 800475e:	021b      	lsls	r3, r3, #8
 8004760:	b29a      	uxth	r2, r3
 8004762:	7f3b      	ldrb	r3, [r7, #28]
 8004764:	b29b      	uxth	r3, r3
 8004766:	4413      	add	r3, r2
 8004768:	b29b      	uxth	r3, r3
 800476a:	86bb      	strh	r3, [r7, #52]	; 0x34
	field_zp = field_zp/2;
 800476c:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8004770:	0fda      	lsrs	r2, r3, #31
 8004772:	4413      	add	r3, r2
 8004774:	105b      	asrs	r3, r3, #1
 8004776:	86bb      	strh	r3, [r7, #52]	; 0x34
	Rhall = (uint16_t)((debug_array[3] << 6) + (debug_array[2] >> 2));
 8004778:	7ffb      	ldrb	r3, [r7, #31]
 800477a:	b29b      	uxth	r3, r3
 800477c:	019b      	lsls	r3, r3, #6
 800477e:	b29a      	uxth	r2, r3
 8004780:	7fbb      	ldrb	r3, [r7, #30]
 8004782:	089b      	lsrs	r3, r3, #2
 8004784:	b2db      	uxtb	r3, r3
 8004786:	b29b      	uxth	r3, r3
 8004788:	4413      	add	r3, r2
 800478a:	867b      	strh	r3, [r7, #50]	; 0x32
	HAL_Delay(1);
 800478c:	2001      	movs	r0, #1
 800478e:	f001 fb4d 	bl	8005e2c <HAL_Delay>
	magz_p = BMM150_Compensate_z(field_zp, Rhall,  &trim_debug);
 8004792:	f107 020c 	add.w	r2, r7, #12
 8004796:	8e79      	ldrh	r1, [r7, #50]	; 0x32
 8004798:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 800479c:	4618      	mov	r0, r3
 800479e:	f000 fcbb 	bl	8005118 <BMM150_Compensate_z>
 80047a2:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
//	enable negative advanced self test current, 0x4C reg 10 <1:2> bit(1->8 bit) -> negative test current
	BMM150_Set_OpMode(bmm, 0x86);
 80047a6:	2186      	movs	r1, #134	; 0x86
 80047a8:	6878      	ldr	r0, [r7, #4]
 80047aa:	f000 f88e 	bl	80048ca <BMM150_Set_OpMode>
	HAL_Delay(1);
 80047ae:	2001      	movs	r0, #1
 80047b0:	f001 fb3c 	bl	8005e2c <HAL_Delay>
//	set force mode, readout Z and R channel, after measurement is finished
	BMM150_Set_OpMode(bmm, 0x82);
 80047b4:	2182      	movs	r1, #130	; 0x82
 80047b6:	6878      	ldr	r0, [r7, #4]
 80047b8:	f000 f887 	bl	80048ca <BMM150_Set_OpMode>
	HAL_Delay(10);
 80047bc:	200a      	movs	r0, #10
 80047be:	f001 fb35 	bl	8005e2c <HAL_Delay>
	rslt = BMM150_ReadMultiBytes(bmm, 0x46,  &debug_array, 4);
 80047c2:	f107 021c 	add.w	r2, r7, #28
 80047c6:	2304      	movs	r3, #4
 80047c8:	2146      	movs	r1, #70	; 0x46
 80047ca:	6878      	ldr	r0, [r7, #4]
 80047cc:	f000 fd82 	bl	80052d4 <BMM150_ReadMultiBytes>
 80047d0:	4603      	mov	r3, r0
 80047d2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	field_zn = (int16_t)((debug_array[1] << 8) + (debug_array[0] ));
 80047d6:	7f7b      	ldrb	r3, [r7, #29]
 80047d8:	b29b      	uxth	r3, r3
 80047da:	021b      	lsls	r3, r3, #8
 80047dc:	b29a      	uxth	r2, r3
 80047de:	7f3b      	ldrb	r3, [r7, #28]
 80047e0:	b29b      	uxth	r3, r3
 80047e2:	4413      	add	r3, r2
 80047e4:	b29b      	uxth	r3, r3
 80047e6:	857b      	strh	r3, [r7, #42]	; 0x2a
	field_zn = field_zn/2;
 80047e8:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80047ec:	0fda      	lsrs	r2, r3, #31
 80047ee:	4413      	add	r3, r2
 80047f0:	105b      	asrs	r3, r3, #1
 80047f2:	857b      	strh	r3, [r7, #42]	; 0x2a
	Rhall = (uint16_t)((debug_array[3] << 6) + (debug_array[2] >> 2));
 80047f4:	7ffb      	ldrb	r3, [r7, #31]
 80047f6:	b29b      	uxth	r3, r3
 80047f8:	019b      	lsls	r3, r3, #6
 80047fa:	b29a      	uxth	r2, r3
 80047fc:	7fbb      	ldrb	r3, [r7, #30]
 80047fe:	089b      	lsrs	r3, r3, #2
 8004800:	b2db      	uxtb	r3, r3
 8004802:	b29b      	uxth	r3, r3
 8004804:	4413      	add	r3, r2
 8004806:	867b      	strh	r3, [r7, #50]	; 0x32
	HAL_Delay(1);
 8004808:	2001      	movs	r0, #1
 800480a:	f001 fb0f 	bl	8005e2c <HAL_Delay>
	magz_n = BMM150_Compensate_z(field_zn, Rhall,  &trim_debug);
 800480e:	f107 020c 	add.w	r2, r7, #12
 8004812:	8e79      	ldrh	r1, [r7, #50]	; 0x32
 8004814:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8004818:	4618      	mov	r0, r3
 800481a:	f000 fc7d 	bl	8005118 <BMM150_Compensate_z>
 800481e:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
//	disable advanced self test current, 0x4C reg 00 <1:2> bit(1->8 bit) -> normal mode
	rslt = BMM150_WriteByte(bmm, 0x4C, 0x06);
 8004822:	2206      	movs	r2, #6
 8004824:	214c      	movs	r1, #76	; 0x4c
 8004826:	6878      	ldr	r0, [r7, #4]
 8004828:	f000 fd72 	bl	8005310 <BMM150_WriteByte>
 800482c:	4603      	mov	r3, r0
 800482e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
//	calculate difference between the two compensated field values, result should be around 200 uT
//	perform soft-reset


	HAL_Delay(10);
 8004832:	200a      	movs	r0, #10
 8004834:	f001 fafa 	bl	8005e2c <HAL_Delay>
	BMM150_SoftReset(bmm);
 8004838:	6878      	ldr	r0, [r7, #4]
 800483a:	f000 f824 	bl	8004886 <BMM150_SoftReset>
	HAL_Delay(10);
 800483e:	200a      	movs	r0, #10
 8004840:	f001 faf4 	bl	8005e2c <HAL_Delay>
//	rslt = BMM150_ReadByte(bmm, BMM150_CHIP_ID_ADDR, &chip_id);
//	HAL_Delay(10);
//	rslt = BMM150_ReadByte(bmm, BMM_PWR_CTRL_ADDR,  &debug);

	//set operation mode normal
	BMM150_Set_OpMode(bmm, opmode);
 8004844:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004848:	4619      	mov	r1, r3
 800484a:	6878      	ldr	r0, [r7, #4]
 800484c:	f000 f83d 	bl	80048ca <BMM150_Set_OpMode>
	HAL_Delay(10);
 8004850:	200a      	movs	r0, #10
 8004852:	f001 faeb 	bl	8005e2c <HAL_Delay>
//	HAL_Delay(10);
//	BMM150_ReadByte(bmm, BMM_PWR_CTRL_ADDR,  &debug);
//	HAL_Delay(10);
//	BMM150_ReadByte(bmm, BMM_OPMODE_REG,  &debug);
	//set ODR 20Hz
	BMM150_Set_ODR(bmm, BMM_ODR_30HZ);
 8004856:	2138      	movs	r1, #56	; 0x38
 8004858:	6878      	ldr	r0, [r7, #4]
 800485a:	f000 f87b 	bl	8004954 <BMM150_Set_ODR>
	HAL_Delay(10);
 800485e:	200a      	movs	r0, #10
 8004860:	f001 fae4 	bl	8005e2c <HAL_Delay>

	BMM150_Preset(bmm, 3, 6);
 8004864:	2206      	movs	r2, #6
 8004866:	2103      	movs	r1, #3
 8004868:	6878      	ldr	r0, [r7, #4]
 800486a:	f000 fa04 	bl	8004c76 <BMM150_Preset>
	HAL_Delay(10);
 800486e:	200a      	movs	r0, #10
 8004870:	f001 fadc 	bl	8005e2c <HAL_Delay>

	BMM150_EN_DRDY_INT(bmm);
 8004874:	6878      	ldr	r0, [r7, #4]
 8004876:	f000 f84b 	bl	8004910 <BMM150_EN_DRDY_INT>

	return rslt;
 800487a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
}
 800487e:	4618      	mov	r0, r3
 8004880:	3738      	adds	r7, #56	; 0x38
 8004882:	46bd      	mov	sp, r7
 8004884:	bd80      	pop	{r7, pc}

08004886 <BMM150_SoftReset>:


HAL_StatusTypeDef	BMM150_SoftReset(BMM150 *bmm){
 8004886:	b580      	push	{r7, lr}
 8004888:	b084      	sub	sp, #16
 800488a:	af00      	add	r7, sp, #0
 800488c:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef rslt;
	uint8_t pwr_reg;
	rslt = BMM150_ReadByte(bmm, BMM_PWR_CTRL_ADDR,  &pwr_reg);
 800488e:	f107 030e 	add.w	r3, r7, #14
 8004892:	461a      	mov	r2, r3
 8004894:	214b      	movs	r1, #75	; 0x4b
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	f000 fd02 	bl	80052a0 <BMM150_ReadByte>
 800489c:	4603      	mov	r3, r0
 800489e:	73fb      	strb	r3, [r7, #15]
	pwr_reg = pwr_reg | 0b10000010;
 80048a0:	7bbb      	ldrb	r3, [r7, #14]
 80048a2:	f063 037d 	orn	r3, r3, #125	; 0x7d
 80048a6:	b2db      	uxtb	r3, r3
 80048a8:	73bb      	strb	r3, [r7, #14]
	HAL_Delay(10);
 80048aa:	200a      	movs	r0, #10
 80048ac:	f001 fabe 	bl	8005e2c <HAL_Delay>
	rslt = BMM150_WriteByte(bmm, BMM_PWR_CTRL_ADDR, pwr_reg);
 80048b0:	7bbb      	ldrb	r3, [r7, #14]
 80048b2:	461a      	mov	r2, r3
 80048b4:	214b      	movs	r1, #75	; 0x4b
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	f000 fd2a 	bl	8005310 <BMM150_WriteByte>
 80048bc:	4603      	mov	r3, r0
 80048be:	73fb      	strb	r3, [r7, #15]
	return rslt;
 80048c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80048c2:	4618      	mov	r0, r3
 80048c4:	3710      	adds	r7, #16
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bd80      	pop	{r7, pc}

080048ca <BMM150_Set_OpMode>:

HAL_StatusTypeDef    BMM150_Set_OpMode(BMM150 *bmm, uint8_t opmode){
 80048ca:	b580      	push	{r7, lr}
 80048cc:	b084      	sub	sp, #16
 80048ce:	af00      	add	r7, sp, #0
 80048d0:	6078      	str	r0, [r7, #4]
 80048d2:	460b      	mov	r3, r1
 80048d4:	70fb      	strb	r3, [r7, #3]
	HAL_StatusTypeDef rslt;
	uint8_t debug;

	rslt = BMM150_WriteByte(bmm, BMM_OPMODE_REG, opmode);
 80048d6:	78fb      	ldrb	r3, [r7, #3]
 80048d8:	461a      	mov	r2, r3
 80048da:	214c      	movs	r1, #76	; 0x4c
 80048dc:	6878      	ldr	r0, [r7, #4]
 80048de:	f000 fd17 	bl	8005310 <BMM150_WriteByte>
 80048e2:	4603      	mov	r3, r0
 80048e4:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(1);
 80048e6:	2001      	movs	r0, #1
 80048e8:	f001 faa0 	bl	8005e2c <HAL_Delay>
	rslt = BMM150_ReadByte(bmm, BMM_OPMODE_REG,  &debug);
 80048ec:	f107 030e 	add.w	r3, r7, #14
 80048f0:	461a      	mov	r2, r3
 80048f2:	214c      	movs	r1, #76	; 0x4c
 80048f4:	6878      	ldr	r0, [r7, #4]
 80048f6:	f000 fcd3 	bl	80052a0 <BMM150_ReadByte>
 80048fa:	4603      	mov	r3, r0
 80048fc:	73fb      	strb	r3, [r7, #15]
	bmm->opmode = opmode;
 80048fe:	78fb      	ldrb	r3, [r7, #3]
 8004900:	461a      	mov	r2, r3
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	605a      	str	r2, [r3, #4]
	return rslt;
 8004906:	7bfb      	ldrb	r3, [r7, #15]
}
 8004908:	4618      	mov	r0, r3
 800490a:	3710      	adds	r7, #16
 800490c:	46bd      	mov	sp, r7
 800490e:	bd80      	pop	{r7, pc}

08004910 <BMM150_EN_DRDY_INT>:

HAL_StatusTypeDef    BMM150_EN_DRDY_INT(BMM150 *bmm){
 8004910:	b580      	push	{r7, lr}
 8004912:	b084      	sub	sp, #16
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef rslt;
	uint8_t data;
	rslt = BMM150_ReadByte(bmm, BMM_DRDY_EN_REG,  &data);
 8004918:	f107 030e 	add.w	r3, r7, #14
 800491c:	461a      	mov	r2, r3
 800491e:	214e      	movs	r1, #78	; 0x4e
 8004920:	6878      	ldr	r0, [r7, #4]
 8004922:	f000 fcbd 	bl	80052a0 <BMM150_ReadByte>
 8004926:	4603      	mov	r3, r0
 8004928:	73fb      	strb	r3, [r7, #15]
	data = data | 0b11000000;
 800492a:	7bbb      	ldrb	r3, [r7, #14]
 800492c:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8004930:	b2db      	uxtb	r3, r3
 8004932:	73bb      	strb	r3, [r7, #14]
	HAL_Delay(1);
 8004934:	2001      	movs	r0, #1
 8004936:	f001 fa79 	bl	8005e2c <HAL_Delay>
	rslt = BMM150_WriteByte(bmm, BMM_DRDY_EN_REG, data);
 800493a:	7bbb      	ldrb	r3, [r7, #14]
 800493c:	461a      	mov	r2, r3
 800493e:	214e      	movs	r1, #78	; 0x4e
 8004940:	6878      	ldr	r0, [r7, #4]
 8004942:	f000 fce5 	bl	8005310 <BMM150_WriteByte>
 8004946:	4603      	mov	r3, r0
 8004948:	73fb      	strb	r3, [r7, #15]

	return rslt;
 800494a:	7bfb      	ldrb	r3, [r7, #15]
}
 800494c:	4618      	mov	r0, r3
 800494e:	3710      	adds	r7, #16
 8004950:	46bd      	mov	sp, r7
 8004952:	bd80      	pop	{r7, pc}

08004954 <BMM150_Set_ODR>:

HAL_StatusTypeDef    BMM150_Set_ODR(BMM150 *bmm, uint8_t odr){
 8004954:	b580      	push	{r7, lr}
 8004956:	b084      	sub	sp, #16
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
 800495c:	460b      	mov	r3, r1
 800495e:	70fb      	strb	r3, [r7, #3]
	HAL_StatusTypeDef rslt;
	uint8_t op_ctrl_reg;

	rslt = BMM150_ReadByte(bmm, BMM_OPMODE_REG,  &op_ctrl_reg);
 8004960:	f107 030e 	add.w	r3, r7, #14
 8004964:	461a      	mov	r2, r3
 8004966:	214c      	movs	r1, #76	; 0x4c
 8004968:	6878      	ldr	r0, [r7, #4]
 800496a:	f000 fc99 	bl	80052a0 <BMM150_ReadByte>
 800496e:	4603      	mov	r3, r0
 8004970:	73fb      	strb	r3, [r7, #15]
	op_ctrl_reg = op_ctrl_reg | odr;
 8004972:	7bba      	ldrb	r2, [r7, #14]
 8004974:	78fb      	ldrb	r3, [r7, #3]
 8004976:	4313      	orrs	r3, r2
 8004978:	b2db      	uxtb	r3, r3
 800497a:	73bb      	strb	r3, [r7, #14]
	HAL_Delay(10);
 800497c:	200a      	movs	r0, #10
 800497e:	f001 fa55 	bl	8005e2c <HAL_Delay>
	rslt = BMM150_WriteByte(bmm, BMM_OPMODE_REG, op_ctrl_reg);
 8004982:	7bbb      	ldrb	r3, [r7, #14]
 8004984:	461a      	mov	r2, r3
 8004986:	214c      	movs	r1, #76	; 0x4c
 8004988:	6878      	ldr	r0, [r7, #4]
 800498a:	f000 fcc1 	bl	8005310 <BMM150_WriteByte>
 800498e:	4603      	mov	r3, r0
 8004990:	73fb      	strb	r3, [r7, #15]
	return rslt;
 8004992:	7bfb      	ldrb	r3, [r7, #15]
}
 8004994:	4618      	mov	r0, r3
 8004996:	3710      	adds	r7, #16
 8004998:	46bd      	mov	sp, r7
 800499a:	bd80      	pop	{r7, pc}

0800499c <BMM150_GetRawData>:

HAL_StatusTypeDef    BMM150_GetRawData(BMM150 *bmm, int16_t *field_x, int16_t *field_y, int16_t *field_z, uint16_t *Rhall, uint8_t len){
 800499c:	b580      	push	{r7, lr}
 800499e:	b088      	sub	sp, #32
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	60f8      	str	r0, [r7, #12]
 80049a4:	60b9      	str	r1, [r7, #8]
 80049a6:	607a      	str	r2, [r7, #4]
 80049a8:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef rslt;
	uint8_t raw_field_data[8];
	rslt = BMM150_ReadMultiBytes(bmm, 0x42,  &raw_field_data, len);
 80049aa:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80049ae:	f107 0214 	add.w	r2, r7, #20
 80049b2:	2142      	movs	r1, #66	; 0x42
 80049b4:	68f8      	ldr	r0, [r7, #12]
 80049b6:	f000 fc8d 	bl	80052d4 <BMM150_ReadMultiBytes>
 80049ba:	4603      	mov	r3, r0
 80049bc:	77fb      	strb	r3, [r7, #31]
//	*field_x = (int16_t)((raw_field_data[1] << 5) + (raw_field_data[0] >> 3));
//	*field_y = (int16_t)((raw_field_data[3] << 5) + (raw_field_data[2] >> 3));
//	*field_z = (int16_t)((raw_field_data[5] << 7) + (raw_field_data[4] >> 1));
	*field_x = (int16_t)((raw_field_data[1] << 8) + (raw_field_data[0] ));
 80049be:	7d7b      	ldrb	r3, [r7, #21]
 80049c0:	b29b      	uxth	r3, r3
 80049c2:	021b      	lsls	r3, r3, #8
 80049c4:	b29a      	uxth	r2, r3
 80049c6:	7d3b      	ldrb	r3, [r7, #20]
 80049c8:	b29b      	uxth	r3, r3
 80049ca:	4413      	add	r3, r2
 80049cc:	b29b      	uxth	r3, r3
 80049ce:	b21a      	sxth	r2, r3
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	801a      	strh	r2, [r3, #0]
	*field_x = *field_x/8;
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	da00      	bge.n	80049e0 <BMM150_GetRawData+0x44>
 80049de:	3307      	adds	r3, #7
 80049e0:	10db      	asrs	r3, r3, #3
 80049e2:	b21a      	sxth	r2, r3
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	801a      	strh	r2, [r3, #0]
	*field_y = (int16_t)((raw_field_data[3] << 8) + (raw_field_data[2] ));
 80049e8:	7dfb      	ldrb	r3, [r7, #23]
 80049ea:	b29b      	uxth	r3, r3
 80049ec:	021b      	lsls	r3, r3, #8
 80049ee:	b29a      	uxth	r2, r3
 80049f0:	7dbb      	ldrb	r3, [r7, #22]
 80049f2:	b29b      	uxth	r3, r3
 80049f4:	4413      	add	r3, r2
 80049f6:	b29b      	uxth	r3, r3
 80049f8:	b21a      	sxth	r2, r3
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	801a      	strh	r2, [r3, #0]
	*field_y = *field_y/8;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	da00      	bge.n	8004a0a <BMM150_GetRawData+0x6e>
 8004a08:	3307      	adds	r3, #7
 8004a0a:	10db      	asrs	r3, r3, #3
 8004a0c:	b21a      	sxth	r2, r3
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	801a      	strh	r2, [r3, #0]
	*field_z = (int16_t)((raw_field_data[5] << 8) + (raw_field_data[4] ));
 8004a12:	7e7b      	ldrb	r3, [r7, #25]
 8004a14:	b29b      	uxth	r3, r3
 8004a16:	021b      	lsls	r3, r3, #8
 8004a18:	b29a      	uxth	r2, r3
 8004a1a:	7e3b      	ldrb	r3, [r7, #24]
 8004a1c:	b29b      	uxth	r3, r3
 8004a1e:	4413      	add	r3, r2
 8004a20:	b29b      	uxth	r3, r3
 8004a22:	b21a      	sxth	r2, r3
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	801a      	strh	r2, [r3, #0]
	*field_z = *field_z/2;
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004a2e:	0fda      	lsrs	r2, r3, #31
 8004a30:	4413      	add	r3, r2
 8004a32:	105b      	asrs	r3, r3, #1
 8004a34:	b21a      	sxth	r2, r3
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	801a      	strh	r2, [r3, #0]
	*Rhall = (uint16_t)((raw_field_data[7] << 6) + (raw_field_data[6] >> 2));
 8004a3a:	7efb      	ldrb	r3, [r7, #27]
 8004a3c:	b29b      	uxth	r3, r3
 8004a3e:	019b      	lsls	r3, r3, #6
 8004a40:	b29a      	uxth	r2, r3
 8004a42:	7ebb      	ldrb	r3, [r7, #26]
 8004a44:	089b      	lsrs	r3, r3, #2
 8004a46:	b2db      	uxtb	r3, r3
 8004a48:	b29b      	uxth	r3, r3
 8004a4a:	4413      	add	r3, r2
 8004a4c:	b29a      	uxth	r2, r3
 8004a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a50:	801a      	strh	r2, [r3, #0]
	return rslt;
 8004a52:	7ffb      	ldrb	r3, [r7, #31]
}
 8004a54:	4618      	mov	r0, r3
 8004a56:	3720      	adds	r7, #32
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	bd80      	pop	{r7, pc}

08004a5c <BMM150_Get_TrimData>:

HAL_StatusTypeDef    BMM150_Get_TrimData(BMM150 *bmm, BMM150_trim_data *trim){
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b084      	sub	sp, #16
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
 8004a64:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef rslt;
	uint8_t readout1;
	uint8_t readout2;
	//dig_x1
	rslt = BMM150_ReadByte(bmm, 0x5D,  &readout1);
 8004a66:	f107 030e 	add.w	r3, r7, #14
 8004a6a:	461a      	mov	r2, r3
 8004a6c:	215d      	movs	r1, #93	; 0x5d
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	f000 fc16 	bl	80052a0 <BMM150_ReadByte>
 8004a74:	4603      	mov	r3, r0
 8004a76:	73fb      	strb	r3, [r7, #15]
	trim->dig_x1 = readout1;
 8004a78:	7bbb      	ldrb	r3, [r7, #14]
 8004a7a:	b25a      	sxtb	r2, r3
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	701a      	strb	r2, [r3, #0]
	HAL_Delay(2);
 8004a80:	2002      	movs	r0, #2
 8004a82:	f001 f9d3 	bl	8005e2c <HAL_Delay>
	//dig_y1
	rslt = BMM150_ReadByte(bmm, 0x5E,  &readout1);
 8004a86:	f107 030e 	add.w	r3, r7, #14
 8004a8a:	461a      	mov	r2, r3
 8004a8c:	215e      	movs	r1, #94	; 0x5e
 8004a8e:	6878      	ldr	r0, [r7, #4]
 8004a90:	f000 fc06 	bl	80052a0 <BMM150_ReadByte>
 8004a94:	4603      	mov	r3, r0
 8004a96:	73fb      	strb	r3, [r7, #15]
	trim->dig_y1 = readout1;
 8004a98:	7bbb      	ldrb	r3, [r7, #14]
 8004a9a:	b25a      	sxtb	r2, r3
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	705a      	strb	r2, [r3, #1]
	HAL_Delay(2);
 8004aa0:	2002      	movs	r0, #2
 8004aa2:	f001 f9c3 	bl	8005e2c <HAL_Delay>
	rslt = BMM150_ReadByte(bmm, 0x64,  &readout1);
 8004aa6:	f107 030e 	add.w	r3, r7, #14
 8004aaa:	461a      	mov	r2, r3
 8004aac:	2164      	movs	r1, #100	; 0x64
 8004aae:	6878      	ldr	r0, [r7, #4]
 8004ab0:	f000 fbf6 	bl	80052a0 <BMM150_ReadByte>
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	73fb      	strb	r3, [r7, #15]
	trim->dig_x2 = readout1;
 8004ab8:	7bbb      	ldrb	r3, [r7, #14]
 8004aba:	b25a      	sxtb	r2, r3
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	709a      	strb	r2, [r3, #2]
	HAL_Delay(2);
 8004ac0:	2002      	movs	r0, #2
 8004ac2:	f001 f9b3 	bl	8005e2c <HAL_Delay>
	rslt = BMM150_ReadByte(bmm, 0x65,  &readout1);
 8004ac6:	f107 030e 	add.w	r3, r7, #14
 8004aca:	461a      	mov	r2, r3
 8004acc:	2165      	movs	r1, #101	; 0x65
 8004ace:	6878      	ldr	r0, [r7, #4]
 8004ad0:	f000 fbe6 	bl	80052a0 <BMM150_ReadByte>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	73fb      	strb	r3, [r7, #15]
	trim->dig_y2 = readout1;
 8004ad8:	7bbb      	ldrb	r3, [r7, #14]
 8004ada:	b25a      	sxtb	r2, r3
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	70da      	strb	r2, [r3, #3]
	HAL_Delay(2);
 8004ae0:	2002      	movs	r0, #2
 8004ae2:	f001 f9a3 	bl	8005e2c <HAL_Delay>
	rslt = BMM150_ReadByte(bmm, 0x71,  &readout1);
 8004ae6:	f107 030e 	add.w	r3, r7, #14
 8004aea:	461a      	mov	r2, r3
 8004aec:	2171      	movs	r1, #113	; 0x71
 8004aee:	6878      	ldr	r0, [r7, #4]
 8004af0:	f000 fbd6 	bl	80052a0 <BMM150_ReadByte>
 8004af4:	4603      	mov	r3, r0
 8004af6:	73fb      	strb	r3, [r7, #15]
	trim->dig_xy1 = readout1;
 8004af8:	7bba      	ldrb	r2, [r7, #14]
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	731a      	strb	r2, [r3, #12]
	HAL_Delay(2);
 8004afe:	2002      	movs	r0, #2
 8004b00:	f001 f994 	bl	8005e2c <HAL_Delay>
	rslt = BMM150_ReadByte(bmm, 0x70,  &readout1);
 8004b04:	f107 030e 	add.w	r3, r7, #14
 8004b08:	461a      	mov	r2, r3
 8004b0a:	2170      	movs	r1, #112	; 0x70
 8004b0c:	6878      	ldr	r0, [r7, #4]
 8004b0e:	f000 fbc7 	bl	80052a0 <BMM150_ReadByte>
 8004b12:	4603      	mov	r3, r0
 8004b14:	73fb      	strb	r3, [r7, #15]
	trim->dig_xy2 = readout1;
 8004b16:	7bbb      	ldrb	r3, [r7, #14]
 8004b18:	b25a      	sxtb	r2, r3
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	735a      	strb	r2, [r3, #13]
	HAL_Delay(2);
 8004b1e:	2002      	movs	r0, #2
 8004b20:	f001 f984 	bl	8005e2c <HAL_Delay>
	rslt = BMM150_ReadByte(bmm, 0x6A,  &readout1);
 8004b24:	f107 030e 	add.w	r3, r7, #14
 8004b28:	461a      	mov	r2, r3
 8004b2a:	216a      	movs	r1, #106	; 0x6a
 8004b2c:	6878      	ldr	r0, [r7, #4]
 8004b2e:	f000 fbb7 	bl	80052a0 <BMM150_ReadByte>
 8004b32:	4603      	mov	r3, r0
 8004b34:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(2);
 8004b36:	2002      	movs	r0, #2
 8004b38:	f001 f978 	bl	8005e2c <HAL_Delay>
	rslt = BMM150_ReadByte(bmm, 0x6B,  &readout2);
 8004b3c:	f107 030d 	add.w	r3, r7, #13
 8004b40:	461a      	mov	r2, r3
 8004b42:	216b      	movs	r1, #107	; 0x6b
 8004b44:	6878      	ldr	r0, [r7, #4]
 8004b46:	f000 fbab 	bl	80052a0 <BMM150_ReadByte>
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	73fb      	strb	r3, [r7, #15]
	trim->dig_z1 = (readout2 << 8) | readout1;
 8004b4e:	7b7b      	ldrb	r3, [r7, #13]
 8004b50:	021b      	lsls	r3, r3, #8
 8004b52:	b21a      	sxth	r2, r3
 8004b54:	7bbb      	ldrb	r3, [r7, #14]
 8004b56:	b21b      	sxth	r3, r3
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	b21b      	sxth	r3, r3
 8004b5c:	b29a      	uxth	r2, r3
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	809a      	strh	r2, [r3, #4]
	HAL_Delay(2);
 8004b62:	2002      	movs	r0, #2
 8004b64:	f001 f962 	bl	8005e2c <HAL_Delay>
	rslt = BMM150_ReadByte(bmm, 0x68,  &readout1);
 8004b68:	f107 030e 	add.w	r3, r7, #14
 8004b6c:	461a      	mov	r2, r3
 8004b6e:	2168      	movs	r1, #104	; 0x68
 8004b70:	6878      	ldr	r0, [r7, #4]
 8004b72:	f000 fb95 	bl	80052a0 <BMM150_ReadByte>
 8004b76:	4603      	mov	r3, r0
 8004b78:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(2);
 8004b7a:	2002      	movs	r0, #2
 8004b7c:	f001 f956 	bl	8005e2c <HAL_Delay>
	rslt = BMM150_ReadByte(bmm, 0x69,  &readout2);
 8004b80:	f107 030d 	add.w	r3, r7, #13
 8004b84:	461a      	mov	r2, r3
 8004b86:	2169      	movs	r1, #105	; 0x69
 8004b88:	6878      	ldr	r0, [r7, #4]
 8004b8a:	f000 fb89 	bl	80052a0 <BMM150_ReadByte>
 8004b8e:	4603      	mov	r3, r0
 8004b90:	73fb      	strb	r3, [r7, #15]
	trim->dig_z2 = (readout2 << 8) | readout1;
 8004b92:	7b7b      	ldrb	r3, [r7, #13]
 8004b94:	021b      	lsls	r3, r3, #8
 8004b96:	b21a      	sxth	r2, r3
 8004b98:	7bbb      	ldrb	r3, [r7, #14]
 8004b9a:	b21b      	sxth	r3, r3
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	b21a      	sxth	r2, r3
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	80da      	strh	r2, [r3, #6]
	HAL_Delay(2);
 8004ba4:	2002      	movs	r0, #2
 8004ba6:	f001 f941 	bl	8005e2c <HAL_Delay>
	rslt = BMM150_ReadByte(bmm, 0x6E,  &readout1);
 8004baa:	f107 030e 	add.w	r3, r7, #14
 8004bae:	461a      	mov	r2, r3
 8004bb0:	216e      	movs	r1, #110	; 0x6e
 8004bb2:	6878      	ldr	r0, [r7, #4]
 8004bb4:	f000 fb74 	bl	80052a0 <BMM150_ReadByte>
 8004bb8:	4603      	mov	r3, r0
 8004bba:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(2);
 8004bbc:	2002      	movs	r0, #2
 8004bbe:	f001 f935 	bl	8005e2c <HAL_Delay>
	rslt = BMM150_ReadByte(bmm, 0x6F,  &readout2);
 8004bc2:	f107 030d 	add.w	r3, r7, #13
 8004bc6:	461a      	mov	r2, r3
 8004bc8:	216f      	movs	r1, #111	; 0x6f
 8004bca:	6878      	ldr	r0, [r7, #4]
 8004bcc:	f000 fb68 	bl	80052a0 <BMM150_ReadByte>
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	73fb      	strb	r3, [r7, #15]
	trim->dig_z3 = (readout2 << 8) | readout1;
 8004bd4:	7b7b      	ldrb	r3, [r7, #13]
 8004bd6:	021b      	lsls	r3, r3, #8
 8004bd8:	b21a      	sxth	r2, r3
 8004bda:	7bbb      	ldrb	r3, [r7, #14]
 8004bdc:	b21b      	sxth	r3, r3
 8004bde:	4313      	orrs	r3, r2
 8004be0:	b21a      	sxth	r2, r3
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	811a      	strh	r2, [r3, #8]
	HAL_Delay(2);
 8004be6:	2002      	movs	r0, #2
 8004be8:	f001 f920 	bl	8005e2c <HAL_Delay>
	rslt = BMM150_ReadByte(bmm, 0x62,  &readout1);
 8004bec:	f107 030e 	add.w	r3, r7, #14
 8004bf0:	461a      	mov	r2, r3
 8004bf2:	2162      	movs	r1, #98	; 0x62
 8004bf4:	6878      	ldr	r0, [r7, #4]
 8004bf6:	f000 fb53 	bl	80052a0 <BMM150_ReadByte>
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(2);
 8004bfe:	2002      	movs	r0, #2
 8004c00:	f001 f914 	bl	8005e2c <HAL_Delay>
	rslt = BMM150_ReadByte(bmm, 0x63,  &readout2);
 8004c04:	f107 030d 	add.w	r3, r7, #13
 8004c08:	461a      	mov	r2, r3
 8004c0a:	2163      	movs	r1, #99	; 0x63
 8004c0c:	6878      	ldr	r0, [r7, #4]
 8004c0e:	f000 fb47 	bl	80052a0 <BMM150_ReadByte>
 8004c12:	4603      	mov	r3, r0
 8004c14:	73fb      	strb	r3, [r7, #15]
	trim->dig_z4 = (readout2 << 8) | readout1;
 8004c16:	7b7b      	ldrb	r3, [r7, #13]
 8004c18:	021b      	lsls	r3, r3, #8
 8004c1a:	b21a      	sxth	r2, r3
 8004c1c:	7bbb      	ldrb	r3, [r7, #14]
 8004c1e:	b21b      	sxth	r3, r3
 8004c20:	4313      	orrs	r3, r2
 8004c22:	b21a      	sxth	r2, r3
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	815a      	strh	r2, [r3, #10]
	HAL_Delay(2);
 8004c28:	2002      	movs	r0, #2
 8004c2a:	f001 f8ff 	bl	8005e2c <HAL_Delay>
	rslt = BMM150_ReadByte(bmm, 0x6C,  &readout1);
 8004c2e:	f107 030e 	add.w	r3, r7, #14
 8004c32:	461a      	mov	r2, r3
 8004c34:	216c      	movs	r1, #108	; 0x6c
 8004c36:	6878      	ldr	r0, [r7, #4]
 8004c38:	f000 fb32 	bl	80052a0 <BMM150_ReadByte>
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(2);
 8004c40:	2002      	movs	r0, #2
 8004c42:	f001 f8f3 	bl	8005e2c <HAL_Delay>
	rslt = BMM150_ReadByte(bmm, 0x6D,  &readout2);
 8004c46:	f107 030d 	add.w	r3, r7, #13
 8004c4a:	461a      	mov	r2, r3
 8004c4c:	216d      	movs	r1, #109	; 0x6d
 8004c4e:	6878      	ldr	r0, [r7, #4]
 8004c50:	f000 fb26 	bl	80052a0 <BMM150_ReadByte>
 8004c54:	4603      	mov	r3, r0
 8004c56:	73fb      	strb	r3, [r7, #15]
	trim->dig_xyz1 = (readout2 << 8) | readout1;
 8004c58:	7b7b      	ldrb	r3, [r7, #13]
 8004c5a:	021b      	lsls	r3, r3, #8
 8004c5c:	b21a      	sxth	r2, r3
 8004c5e:	7bbb      	ldrb	r3, [r7, #14]
 8004c60:	b21b      	sxth	r3, r3
 8004c62:	4313      	orrs	r3, r2
 8004c64:	b21b      	sxth	r3, r3
 8004c66:	b29a      	uxth	r2, r3
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	81da      	strh	r2, [r3, #14]

	return rslt;
 8004c6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c6e:	4618      	mov	r0, r3
 8004c70:	3710      	adds	r7, #16
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd80      	pop	{r7, pc}

08004c76 <BMM150_Preset>:
	*Rhall = (uint16_t)((raw_field_data[7] << 6) + (raw_field_data[6] >> 2));
	BMM150_ReadByte(bmm, 0x4C,  &debug); //0x4C reg value 0x02 tehát a Force Mode-ban van, miért? nem olvasom ki a data regisztereket
	return rslt;
}

HAL_StatusTypeDef    BMM150_Preset(BMM150 *bmm, uint8_t nXY, uint8_t nZ){
 8004c76:	b580      	push	{r7, lr}
 8004c78:	b084      	sub	sp, #16
 8004c7a:	af00      	add	r7, sp, #0
 8004c7c:	6078      	str	r0, [r7, #4]
 8004c7e:	460b      	mov	r3, r1
 8004c80:	70fb      	strb	r3, [r7, #3]
 8004c82:	4613      	mov	r3, r2
 8004c84:	70bb      	strb	r3, [r7, #2]
	HAL_StatusTypeDef rslt;
	uint8_t REPXY = (nXY-1)/2;
 8004c86:	78fb      	ldrb	r3, [r7, #3]
 8004c88:	3b01      	subs	r3, #1
 8004c8a:	0fda      	lsrs	r2, r3, #31
 8004c8c:	4413      	add	r3, r2
 8004c8e:	105b      	asrs	r3, r3, #1
 8004c90:	73fb      	strb	r3, [r7, #15]
	uint8_t REPZ  = (nZ-1);
 8004c92:	78bb      	ldrb	r3, [r7, #2]
 8004c94:	3b01      	subs	r3, #1
 8004c96:	73bb      	strb	r3, [r7, #14]
	//uint8_t debug;

	rslt = BMM150_WriteByte(bmm, BMM_REPXY_REG, REPXY); // nXY = 9 for 100HZ nXY = 1+2*(REPXY)
 8004c98:	7bfb      	ldrb	r3, [r7, #15]
 8004c9a:	461a      	mov	r2, r3
 8004c9c:	2151      	movs	r1, #81	; 0x51
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	f000 fb36 	bl	8005310 <BMM150_WriteByte>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	737b      	strb	r3, [r7, #13]
	HAL_Delay(10);
 8004ca8:	200a      	movs	r0, #10
 8004caa:	f001 f8bf 	bl	8005e2c <HAL_Delay>
	rslt = BMM150_WriteByte(bmm, BMM_REPZ_REG, REPZ); // nZ = 15 for 100HZ nZ = 1+(REPXY)
 8004cae:	7bbb      	ldrb	r3, [r7, #14]
 8004cb0:	461a      	mov	r2, r3
 8004cb2:	2152      	movs	r1, #82	; 0x52
 8004cb4:	6878      	ldr	r0, [r7, #4]
 8004cb6:	f000 fb2b 	bl	8005310 <BMM150_WriteByte>
 8004cba:	4603      	mov	r3, r0
 8004cbc:	737b      	strb	r3, [r7, #13]

	return rslt;
 8004cbe:	7b7b      	ldrb	r3, [r7, #13]
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	3710      	adds	r7, #16
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bd80      	pop	{r7, pc}

08004cc8 <BMM150_Compensate_x>:


float    BMM150_Compensate_x(int16_t raw_mag_data_x, uint16_t raw_data_r,  BMM150_trim_data *trim){
 8004cc8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004ccc:	b084      	sub	sp, #16
 8004cce:	af00      	add	r7, sp, #0
 8004cd0:	4603      	mov	r3, r0
 8004cd2:	603a      	str	r2, [r7, #0]
 8004cd4:	80fb      	strh	r3, [r7, #6]
 8004cd6:	460b      	mov	r3, r1
 8004cd8:	80bb      	strh	r3, [r7, #4]
	float compensated_X = 0;
 8004cda:	f04f 0300 	mov.w	r3, #0
 8004cde:	60fb      	str	r3, [r7, #12]

	if (raw_mag_data_x != (-4096)) {
 8004ce0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004ce4:	f513 5f80 	cmn.w	r3, #4096	; 0x1000
 8004ce8:	f000 80e8 	beq.w	8004ebc <BMM150_Compensate_x+0x1f4>
		if ((raw_data_r != 0) && (trim->dig_xyz1 != 0)) {
 8004cec:	88bb      	ldrh	r3, [r7, #4]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	f000 80df 	beq.w	8004eb2 <BMM150_Compensate_x+0x1ea>
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	89db      	ldrh	r3, [r3, #14]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	f000 80da 	beq.w	8004eb2 <BMM150_Compensate_x+0x1ea>
			compensated_X = ((((float)trim->dig_xyz1)*16384.0/(float)raw_data_r) - 16384.0);
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	89db      	ldrh	r3, [r3, #14]
 8004d02:	ee07 3a90 	vmov	s15, r3
 8004d06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d0a:	ee17 0a90 	vmov	r0, s15
 8004d0e:	f7fb fc1b 	bl	8000548 <__aeabi_f2d>
 8004d12:	f04f 0200 	mov.w	r2, #0
 8004d16:	4b6f      	ldr	r3, [pc, #444]	; (8004ed4 <BMM150_Compensate_x+0x20c>)
 8004d18:	f7fb fc6e 	bl	80005f8 <__aeabi_dmul>
 8004d1c:	4602      	mov	r2, r0
 8004d1e:	460b      	mov	r3, r1
 8004d20:	4614      	mov	r4, r2
 8004d22:	461d      	mov	r5, r3
 8004d24:	88bb      	ldrh	r3, [r7, #4]
 8004d26:	ee07 3a90 	vmov	s15, r3
 8004d2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d2e:	ee17 0a90 	vmov	r0, s15
 8004d32:	f7fb fc09 	bl	8000548 <__aeabi_f2d>
 8004d36:	4602      	mov	r2, r0
 8004d38:	460b      	mov	r3, r1
 8004d3a:	4620      	mov	r0, r4
 8004d3c:	4629      	mov	r1, r5
 8004d3e:	f7fb fd85 	bl	800084c <__aeabi_ddiv>
 8004d42:	4602      	mov	r2, r0
 8004d44:	460b      	mov	r3, r1
 8004d46:	4610      	mov	r0, r2
 8004d48:	4619      	mov	r1, r3
 8004d4a:	f04f 0200 	mov.w	r2, #0
 8004d4e:	4b61      	ldr	r3, [pc, #388]	; (8004ed4 <BMM150_Compensate_x+0x20c>)
 8004d50:	f7fb fa9a 	bl	8000288 <__aeabi_dsub>
 8004d54:	4602      	mov	r2, r0
 8004d56:	460b      	mov	r3, r1
 8004d58:	4610      	mov	r0, r2
 8004d5a:	4619      	mov	r1, r3
 8004d5c:	f7fb ff44 	bl	8000be8 <__aeabi_d2f>
 8004d60:	4603      	mov	r3, r0
 8004d62:	60fb      	str	r3, [r7, #12]
		}
		else {
			compensated_X = 0.0f;
			return compensated_X;
		}
		compensated_X = ((((float)raw_mag_data_x * ((((((float)(trim->dig_xy2)) *(compensated_X*compensated_X /268435456.0) + compensated_X * ((float)(trim->dig_xy1))
 8004d64:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004d68:	ee07 3a90 	vmov	s15, r3
 8004d6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004d70:	ee17 0a90 	vmov	r0, s15
 8004d74:	f7fb fbe8 	bl	8000548 <__aeabi_f2d>
 8004d78:	4604      	mov	r4, r0
 8004d7a:	460d      	mov	r5, r1
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	f993 300d 	ldrsb.w	r3, [r3, #13]
 8004d82:	ee07 3a90 	vmov	s15, r3
 8004d86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004d8a:	ee17 0a90 	vmov	r0, s15
 8004d8e:	f7fb fbdb 	bl	8000548 <__aeabi_f2d>
 8004d92:	4680      	mov	r8, r0
 8004d94:	4689      	mov	r9, r1
 8004d96:	edd7 7a03 	vldr	s15, [r7, #12]
 8004d9a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004d9e:	ee17 0a90 	vmov	r0, s15
 8004da2:	f7fb fbd1 	bl	8000548 <__aeabi_f2d>
 8004da6:	f04f 0200 	mov.w	r2, #0
 8004daa:	4b4b      	ldr	r3, [pc, #300]	; (8004ed8 <BMM150_Compensate_x+0x210>)
 8004dac:	f7fb fd4e 	bl	800084c <__aeabi_ddiv>
 8004db0:	4602      	mov	r2, r0
 8004db2:	460b      	mov	r3, r1
 8004db4:	4640      	mov	r0, r8
 8004db6:	4649      	mov	r1, r9
 8004db8:	f7fb fc1e 	bl	80005f8 <__aeabi_dmul>
 8004dbc:	4602      	mov	r2, r0
 8004dbe:	460b      	mov	r3, r1
 8004dc0:	4690      	mov	r8, r2
 8004dc2:	4699      	mov	r9, r3
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	7b1b      	ldrb	r3, [r3, #12]
 8004dc8:	ee07 3a90 	vmov	s15, r3
 8004dcc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004dd0:	edd7 7a03 	vldr	s15, [r7, #12]
 8004dd4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004dd8:	ee17 0a90 	vmov	r0, s15
 8004ddc:	f7fb fbb4 	bl	8000548 <__aeabi_f2d>
		/ 16384.0)) + 256.0) *(((float)(trim->dig_x2)) + 160.0)))/ 8192.0)+ (((float)(trim->dig_x1)) *8.0)) / 16.0;
 8004de0:	f04f 0200 	mov.w	r2, #0
 8004de4:	4b3b      	ldr	r3, [pc, #236]	; (8004ed4 <BMM150_Compensate_x+0x20c>)
 8004de6:	f7fb fd31 	bl	800084c <__aeabi_ddiv>
 8004dea:	4602      	mov	r2, r0
 8004dec:	460b      	mov	r3, r1
		compensated_X = ((((float)raw_mag_data_x * ((((((float)(trim->dig_xy2)) *(compensated_X*compensated_X /268435456.0) + compensated_X * ((float)(trim->dig_xy1))
 8004dee:	4640      	mov	r0, r8
 8004df0:	4649      	mov	r1, r9
 8004df2:	f7fb fa4b 	bl	800028c <__adddf3>
 8004df6:	4602      	mov	r2, r0
 8004df8:	460b      	mov	r3, r1
 8004dfa:	4610      	mov	r0, r2
 8004dfc:	4619      	mov	r1, r3
		/ 16384.0)) + 256.0) *(((float)(trim->dig_x2)) + 160.0)))/ 8192.0)+ (((float)(trim->dig_x1)) *8.0)) / 16.0;
 8004dfe:	f04f 0200 	mov.w	r2, #0
 8004e02:	4b36      	ldr	r3, [pc, #216]	; (8004edc <BMM150_Compensate_x+0x214>)
 8004e04:	f7fb fa42 	bl	800028c <__adddf3>
 8004e08:	4602      	mov	r2, r0
 8004e0a:	460b      	mov	r3, r1
 8004e0c:	4690      	mov	r8, r2
 8004e0e:	4699      	mov	r9, r3
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8004e16:	ee07 3a90 	vmov	s15, r3
 8004e1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004e1e:	ee17 0a90 	vmov	r0, s15
 8004e22:	f7fb fb91 	bl	8000548 <__aeabi_f2d>
 8004e26:	f04f 0200 	mov.w	r2, #0
 8004e2a:	4b2d      	ldr	r3, [pc, #180]	; (8004ee0 <BMM150_Compensate_x+0x218>)
 8004e2c:	f7fb fa2e 	bl	800028c <__adddf3>
 8004e30:	4602      	mov	r2, r0
 8004e32:	460b      	mov	r3, r1
 8004e34:	4640      	mov	r0, r8
 8004e36:	4649      	mov	r1, r9
 8004e38:	f7fb fbde 	bl	80005f8 <__aeabi_dmul>
 8004e3c:	4602      	mov	r2, r0
 8004e3e:	460b      	mov	r3, r1
		compensated_X = ((((float)raw_mag_data_x * ((((((float)(trim->dig_xy2)) *(compensated_X*compensated_X /268435456.0) + compensated_X * ((float)(trim->dig_xy1))
 8004e40:	4620      	mov	r0, r4
 8004e42:	4629      	mov	r1, r5
 8004e44:	f7fb fbd8 	bl	80005f8 <__aeabi_dmul>
 8004e48:	4602      	mov	r2, r0
 8004e4a:	460b      	mov	r3, r1
 8004e4c:	4610      	mov	r0, r2
 8004e4e:	4619      	mov	r1, r3
		/ 16384.0)) + 256.0) *(((float)(trim->dig_x2)) + 160.0)))/ 8192.0)+ (((float)(trim->dig_x1)) *8.0)) / 16.0;
 8004e50:	f04f 0200 	mov.w	r2, #0
 8004e54:	4b23      	ldr	r3, [pc, #140]	; (8004ee4 <BMM150_Compensate_x+0x21c>)
 8004e56:	f7fb fcf9 	bl	800084c <__aeabi_ddiv>
 8004e5a:	4602      	mov	r2, r0
 8004e5c:	460b      	mov	r3, r1
 8004e5e:	4614      	mov	r4, r2
 8004e60:	461d      	mov	r5, r3
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	f993 3000 	ldrsb.w	r3, [r3]
 8004e68:	ee07 3a90 	vmov	s15, r3
 8004e6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004e70:	ee17 0a90 	vmov	r0, s15
 8004e74:	f7fb fb68 	bl	8000548 <__aeabi_f2d>
 8004e78:	f04f 0200 	mov.w	r2, #0
 8004e7c:	4b1a      	ldr	r3, [pc, #104]	; (8004ee8 <BMM150_Compensate_x+0x220>)
 8004e7e:	f7fb fbbb 	bl	80005f8 <__aeabi_dmul>
 8004e82:	4602      	mov	r2, r0
 8004e84:	460b      	mov	r3, r1
 8004e86:	4620      	mov	r0, r4
 8004e88:	4629      	mov	r1, r5
 8004e8a:	f7fb f9ff 	bl	800028c <__adddf3>
 8004e8e:	4602      	mov	r2, r0
 8004e90:	460b      	mov	r3, r1
 8004e92:	4610      	mov	r0, r2
 8004e94:	4619      	mov	r1, r3
 8004e96:	f04f 0200 	mov.w	r2, #0
 8004e9a:	4b14      	ldr	r3, [pc, #80]	; (8004eec <BMM150_Compensate_x+0x224>)
 8004e9c:	f7fb fcd6 	bl	800084c <__aeabi_ddiv>
 8004ea0:	4602      	mov	r2, r0
 8004ea2:	460b      	mov	r3, r1
		compensated_X = ((((float)raw_mag_data_x * ((((((float)(trim->dig_xy2)) *(compensated_X*compensated_X /268435456.0) + compensated_X * ((float)(trim->dig_xy1))
 8004ea4:	4610      	mov	r0, r2
 8004ea6:	4619      	mov	r1, r3
 8004ea8:	f7fb fe9e 	bl	8000be8 <__aeabi_d2f>
 8004eac:	4603      	mov	r3, r0
 8004eae:	60fb      	str	r3, [r7, #12]
 8004eb0:	e007      	b.n	8004ec2 <BMM150_Compensate_x+0x1fa>
			compensated_X = 0.0f;
 8004eb2:	f04f 0300 	mov.w	r3, #0
 8004eb6:	60fb      	str	r3, [r7, #12]
			return compensated_X;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	e003      	b.n	8004ec4 <BMM150_Compensate_x+0x1fc>
	}
	else {
		compensated_X = 0.0f;
 8004ebc:	f04f 0300 	mov.w	r3, #0
 8004ec0:	60fb      	str	r3, [r7, #12]
	}
	return compensated_X;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
}
 8004ec4:	ee07 3a90 	vmov	s15, r3
 8004ec8:	eeb0 0a67 	vmov.f32	s0, s15
 8004ecc:	3710      	adds	r7, #16
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004ed4:	40d00000 	.word	0x40d00000
 8004ed8:	41b00000 	.word	0x41b00000
 8004edc:	40700000 	.word	0x40700000
 8004ee0:	40640000 	.word	0x40640000
 8004ee4:	40c00000 	.word	0x40c00000
 8004ee8:	40200000 	.word	0x40200000
 8004eec:	40300000 	.word	0x40300000

08004ef0 <BMM150_Compensate_y>:

float   BMM150_Compensate_y(int16_t raw_mag_data_y, uint16_t raw_data_r,  BMM150_trim_data *trim){
 8004ef0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004ef4:	b084      	sub	sp, #16
 8004ef6:	af00      	add	r7, sp, #0
 8004ef8:	4603      	mov	r3, r0
 8004efa:	603a      	str	r2, [r7, #0]
 8004efc:	80fb      	strh	r3, [r7, #6]
 8004efe:	460b      	mov	r3, r1
 8004f00:	80bb      	strh	r3, [r7, #4]
	float compensated_Y = 0;
 8004f02:	f04f 0300 	mov.w	r3, #0
 8004f06:	60fb      	str	r3, [r7, #12]

	if (raw_mag_data_y != (-4096)) {
 8004f08:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004f0c:	f513 5f80 	cmn.w	r3, #4096	; 0x1000
 8004f10:	f000 80e8 	beq.w	80050e4 <BMM150_Compensate_y+0x1f4>
		if ((raw_data_r != 0)&& (trim->dig_xyz1 != 0)) {
 8004f14:	88bb      	ldrh	r3, [r7, #4]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	f000 80df 	beq.w	80050da <BMM150_Compensate_y+0x1ea>
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	89db      	ldrh	r3, [r3, #14]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	f000 80da 	beq.w	80050da <BMM150_Compensate_y+0x1ea>
			compensated_Y = ((((float)(trim->dig_xyz1))* 16384.0/(float)raw_data_r) - 16384.0);
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	89db      	ldrh	r3, [r3, #14]
 8004f2a:	ee07 3a90 	vmov	s15, r3
 8004f2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f32:	ee17 0a90 	vmov	r0, s15
 8004f36:	f7fb fb07 	bl	8000548 <__aeabi_f2d>
 8004f3a:	f04f 0200 	mov.w	r2, #0
 8004f3e:	4b6f      	ldr	r3, [pc, #444]	; (80050fc <BMM150_Compensate_y+0x20c>)
 8004f40:	f7fb fb5a 	bl	80005f8 <__aeabi_dmul>
 8004f44:	4602      	mov	r2, r0
 8004f46:	460b      	mov	r3, r1
 8004f48:	4614      	mov	r4, r2
 8004f4a:	461d      	mov	r5, r3
 8004f4c:	88bb      	ldrh	r3, [r7, #4]
 8004f4e:	ee07 3a90 	vmov	s15, r3
 8004f52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f56:	ee17 0a90 	vmov	r0, s15
 8004f5a:	f7fb faf5 	bl	8000548 <__aeabi_f2d>
 8004f5e:	4602      	mov	r2, r0
 8004f60:	460b      	mov	r3, r1
 8004f62:	4620      	mov	r0, r4
 8004f64:	4629      	mov	r1, r5
 8004f66:	f7fb fc71 	bl	800084c <__aeabi_ddiv>
 8004f6a:	4602      	mov	r2, r0
 8004f6c:	460b      	mov	r3, r1
 8004f6e:	4610      	mov	r0, r2
 8004f70:	4619      	mov	r1, r3
 8004f72:	f04f 0200 	mov.w	r2, #0
 8004f76:	4b61      	ldr	r3, [pc, #388]	; (80050fc <BMM150_Compensate_y+0x20c>)
 8004f78:	f7fb f986 	bl	8000288 <__aeabi_dsub>
 8004f7c:	4602      	mov	r2, r0
 8004f7e:	460b      	mov	r3, r1
 8004f80:	4610      	mov	r0, r2
 8004f82:	4619      	mov	r1, r3
 8004f84:	f7fb fe30 	bl	8000be8 <__aeabi_d2f>
 8004f88:	4603      	mov	r3, r0
 8004f8a:	60fb      	str	r3, [r7, #12]
		}
		else {
			compensated_Y = 0.0f;
			return compensated_Y;
		}
		compensated_Y = ((((float)raw_mag_data_y * ((((((float)(trim->dig_xy2)) *(compensated_Y*compensated_Y/ 268435456.0) +compensated_Y
 8004f8c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004f90:	ee07 3a90 	vmov	s15, r3
 8004f94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004f98:	ee17 0a90 	vmov	r0, s15
 8004f9c:	f7fb fad4 	bl	8000548 <__aeabi_f2d>
 8004fa0:	4604      	mov	r4, r0
 8004fa2:	460d      	mov	r5, r1
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	f993 300d 	ldrsb.w	r3, [r3, #13]
 8004faa:	ee07 3a90 	vmov	s15, r3
 8004fae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004fb2:	ee17 0a90 	vmov	r0, s15
 8004fb6:	f7fb fac7 	bl	8000548 <__aeabi_f2d>
 8004fba:	4680      	mov	r8, r0
 8004fbc:	4689      	mov	r9, r1
 8004fbe:	edd7 7a03 	vldr	s15, [r7, #12]
 8004fc2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004fc6:	ee17 0a90 	vmov	r0, s15
 8004fca:	f7fb fabd 	bl	8000548 <__aeabi_f2d>
 8004fce:	f04f 0200 	mov.w	r2, #0
 8004fd2:	4b4b      	ldr	r3, [pc, #300]	; (8005100 <BMM150_Compensate_y+0x210>)
 8004fd4:	f7fb fc3a 	bl	800084c <__aeabi_ddiv>
 8004fd8:	4602      	mov	r2, r0
 8004fda:	460b      	mov	r3, r1
 8004fdc:	4640      	mov	r0, r8
 8004fde:	4649      	mov	r1, r9
 8004fe0:	f7fb fb0a 	bl	80005f8 <__aeabi_dmul>
 8004fe4:	4602      	mov	r2, r0
 8004fe6:	460b      	mov	r3, r1
 8004fe8:	4690      	mov	r8, r2
 8004fea:	4699      	mov	r9, r3
		* ((float)(trim->dig_xy1))/ 16384.0)) +256.0) *(((float)(trim->dig_y2)) + 160.0)))/ 8192.0) +(((float)(trim->dig_y1)) * 8.0))/ 16.0;
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	7b1b      	ldrb	r3, [r3, #12]
 8004ff0:	ee07 3a90 	vmov	s15, r3
 8004ff4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004ff8:	edd7 7a03 	vldr	s15, [r7, #12]
 8004ffc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005000:	ee17 0a90 	vmov	r0, s15
 8005004:	f7fb faa0 	bl	8000548 <__aeabi_f2d>
 8005008:	f04f 0200 	mov.w	r2, #0
 800500c:	4b3b      	ldr	r3, [pc, #236]	; (80050fc <BMM150_Compensate_y+0x20c>)
 800500e:	f7fb fc1d 	bl	800084c <__aeabi_ddiv>
 8005012:	4602      	mov	r2, r0
 8005014:	460b      	mov	r3, r1
		compensated_Y = ((((float)raw_mag_data_y * ((((((float)(trim->dig_xy2)) *(compensated_Y*compensated_Y/ 268435456.0) +compensated_Y
 8005016:	4640      	mov	r0, r8
 8005018:	4649      	mov	r1, r9
 800501a:	f7fb f937 	bl	800028c <__adddf3>
 800501e:	4602      	mov	r2, r0
 8005020:	460b      	mov	r3, r1
 8005022:	4610      	mov	r0, r2
 8005024:	4619      	mov	r1, r3
		* ((float)(trim->dig_xy1))/ 16384.0)) +256.0) *(((float)(trim->dig_y2)) + 160.0)))/ 8192.0) +(((float)(trim->dig_y1)) * 8.0))/ 16.0;
 8005026:	f04f 0200 	mov.w	r2, #0
 800502a:	4b36      	ldr	r3, [pc, #216]	; (8005104 <BMM150_Compensate_y+0x214>)
 800502c:	f7fb f92e 	bl	800028c <__adddf3>
 8005030:	4602      	mov	r2, r0
 8005032:	460b      	mov	r3, r1
 8005034:	4690      	mov	r8, r2
 8005036:	4699      	mov	r9, r3
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	f993 3003 	ldrsb.w	r3, [r3, #3]
 800503e:	ee07 3a90 	vmov	s15, r3
 8005042:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005046:	ee17 0a90 	vmov	r0, s15
 800504a:	f7fb fa7d 	bl	8000548 <__aeabi_f2d>
 800504e:	f04f 0200 	mov.w	r2, #0
 8005052:	4b2d      	ldr	r3, [pc, #180]	; (8005108 <BMM150_Compensate_y+0x218>)
 8005054:	f7fb f91a 	bl	800028c <__adddf3>
 8005058:	4602      	mov	r2, r0
 800505a:	460b      	mov	r3, r1
 800505c:	4640      	mov	r0, r8
 800505e:	4649      	mov	r1, r9
 8005060:	f7fb faca 	bl	80005f8 <__aeabi_dmul>
 8005064:	4602      	mov	r2, r0
 8005066:	460b      	mov	r3, r1
		compensated_Y = ((((float)raw_mag_data_y * ((((((float)(trim->dig_xy2)) *(compensated_Y*compensated_Y/ 268435456.0) +compensated_Y
 8005068:	4620      	mov	r0, r4
 800506a:	4629      	mov	r1, r5
 800506c:	f7fb fac4 	bl	80005f8 <__aeabi_dmul>
 8005070:	4602      	mov	r2, r0
 8005072:	460b      	mov	r3, r1
 8005074:	4610      	mov	r0, r2
 8005076:	4619      	mov	r1, r3
		* ((float)(trim->dig_xy1))/ 16384.0)) +256.0) *(((float)(trim->dig_y2)) + 160.0)))/ 8192.0) +(((float)(trim->dig_y1)) * 8.0))/ 16.0;
 8005078:	f04f 0200 	mov.w	r2, #0
 800507c:	4b23      	ldr	r3, [pc, #140]	; (800510c <BMM150_Compensate_y+0x21c>)
 800507e:	f7fb fbe5 	bl	800084c <__aeabi_ddiv>
 8005082:	4602      	mov	r2, r0
 8005084:	460b      	mov	r3, r1
 8005086:	4614      	mov	r4, r2
 8005088:	461d      	mov	r5, r3
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8005090:	ee07 3a90 	vmov	s15, r3
 8005094:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005098:	ee17 0a90 	vmov	r0, s15
 800509c:	f7fb fa54 	bl	8000548 <__aeabi_f2d>
 80050a0:	f04f 0200 	mov.w	r2, #0
 80050a4:	4b1a      	ldr	r3, [pc, #104]	; (8005110 <BMM150_Compensate_y+0x220>)
 80050a6:	f7fb faa7 	bl	80005f8 <__aeabi_dmul>
 80050aa:	4602      	mov	r2, r0
 80050ac:	460b      	mov	r3, r1
 80050ae:	4620      	mov	r0, r4
 80050b0:	4629      	mov	r1, r5
 80050b2:	f7fb f8eb 	bl	800028c <__adddf3>
 80050b6:	4602      	mov	r2, r0
 80050b8:	460b      	mov	r3, r1
 80050ba:	4610      	mov	r0, r2
 80050bc:	4619      	mov	r1, r3
 80050be:	f04f 0200 	mov.w	r2, #0
 80050c2:	4b14      	ldr	r3, [pc, #80]	; (8005114 <BMM150_Compensate_y+0x224>)
 80050c4:	f7fb fbc2 	bl	800084c <__aeabi_ddiv>
 80050c8:	4602      	mov	r2, r0
 80050ca:	460b      	mov	r3, r1
		compensated_Y = ((((float)raw_mag_data_y * ((((((float)(trim->dig_xy2)) *(compensated_Y*compensated_Y/ 268435456.0) +compensated_Y
 80050cc:	4610      	mov	r0, r2
 80050ce:	4619      	mov	r1, r3
 80050d0:	f7fb fd8a 	bl	8000be8 <__aeabi_d2f>
 80050d4:	4603      	mov	r3, r0
 80050d6:	60fb      	str	r3, [r7, #12]
 80050d8:	e007      	b.n	80050ea <BMM150_Compensate_y+0x1fa>
			compensated_Y = 0.0f;
 80050da:	f04f 0300 	mov.w	r3, #0
 80050de:	60fb      	str	r3, [r7, #12]
			return compensated_Y;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	e003      	b.n	80050ec <BMM150_Compensate_y+0x1fc>
	}
	else {
		compensated_Y = 0.0f;
 80050e4:	f04f 0300 	mov.w	r3, #0
 80050e8:	60fb      	str	r3, [r7, #12]
	}
	return compensated_Y;
 80050ea:	68fb      	ldr	r3, [r7, #12]
}
 80050ec:	ee07 3a90 	vmov	s15, r3
 80050f0:	eeb0 0a67 	vmov.f32	s0, s15
 80050f4:	3710      	adds	r7, #16
 80050f6:	46bd      	mov	sp, r7
 80050f8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80050fc:	40d00000 	.word	0x40d00000
 8005100:	41b00000 	.word	0x41b00000
 8005104:	40700000 	.word	0x40700000
 8005108:	40640000 	.word	0x40640000
 800510c:	40c00000 	.word	0x40c00000
 8005110:	40200000 	.word	0x40200000
 8005114:	40300000 	.word	0x40300000

08005118 <BMM150_Compensate_z>:
float    BMM150_Compensate_z(int16_t raw_mag_data_z, uint16_t raw_data_r,  BMM150_trim_data *trim){
 8005118:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800511c:	b084      	sub	sp, #16
 800511e:	af00      	add	r7, sp, #0
 8005120:	4603      	mov	r3, r0
 8005122:	603a      	str	r2, [r7, #0]
 8005124:	80fb      	strh	r3, [r7, #6]
 8005126:	460b      	mov	r3, r1
 8005128:	80bb      	strh	r3, [r7, #4]
	float compensated_Z = 0;
 800512a:	f04f 0300 	mov.w	r3, #0
 800512e:	60fb      	str	r3, [r7, #12]
	if (raw_mag_data_z != (-16384)) {
 8005130:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005134:	f513 4f80 	cmn.w	r3, #16384	; 0x4000
 8005138:	f000 809f 	beq.w	800527a <BMM150_Compensate_z+0x162>
		if ((trim->dig_z2 != 0)&& (trim->dig_z1 != 0)&& (trim->dig_xyz1 != 0)&& (raw_data_r != 0)) {
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8005142:	2b00      	cmp	r3, #0
 8005144:	f000 809c 	beq.w	8005280 <BMM150_Compensate_z+0x168>
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	889b      	ldrh	r3, [r3, #4]
 800514c:	2b00      	cmp	r3, #0
 800514e:	f000 8097 	beq.w	8005280 <BMM150_Compensate_z+0x168>
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	89db      	ldrh	r3, [r3, #14]
 8005156:	2b00      	cmp	r3, #0
 8005158:	f000 8092 	beq.w	8005280 <BMM150_Compensate_z+0x168>
 800515c:	88bb      	ldrh	r3, [r7, #4]
 800515e:	2b00      	cmp	r3, #0
 8005160:	f000 808e 	beq.w	8005280 <BMM150_Compensate_z+0x168>
			compensated_Z = ((((((float)raw_mag_data_z)-((float)trim->dig_z4)) * 131072.0)-(((float)trim->dig_z3)*(((float)raw_data_r)
 8005164:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005168:	ee07 3a90 	vmov	s15, r3
 800516c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8005176:	ee07 3a90 	vmov	s15, r3
 800517a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800517e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005182:	ee17 0a90 	vmov	r0, s15
 8005186:	f7fb f9df 	bl	8000548 <__aeabi_f2d>
 800518a:	f04f 0200 	mov.w	r2, #0
 800518e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 8005192:	f7fb fa31 	bl	80005f8 <__aeabi_dmul>
 8005196:	4602      	mov	r2, r0
 8005198:	460b      	mov	r3, r1
 800519a:	4614      	mov	r4, r2
 800519c:	461d      	mov	r5, r3
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80051a4:	ee07 3a90 	vmov	s15, r3
 80051a8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80051ac:	88bb      	ldrh	r3, [r7, #4]
 80051ae:	ee07 3a90 	vmov	s15, r3
 80051b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
			-((float)trim->dig_xyz1))))/((((float)trim->dig_z2)+((float)trim->dig_z1)*((float)raw_data_r) /32768.0) * 4.0)) / 16.0;
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	89db      	ldrh	r3, [r3, #14]
 80051ba:	ee07 3a90 	vmov	s15, r3
 80051be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051c2:	ee76 7ae7 	vsub.f32	s15, s13, s15
			compensated_Z = ((((((float)raw_mag_data_z)-((float)trim->dig_z4)) * 131072.0)-(((float)trim->dig_z3)*(((float)raw_data_r)
 80051c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051ca:	ee17 0a90 	vmov	r0, s15
 80051ce:	f7fb f9bb 	bl	8000548 <__aeabi_f2d>
 80051d2:	4602      	mov	r2, r0
 80051d4:	460b      	mov	r3, r1
 80051d6:	4620      	mov	r0, r4
 80051d8:	4629      	mov	r1, r5
 80051da:	f7fb f855 	bl	8000288 <__aeabi_dsub>
 80051de:	4602      	mov	r2, r0
 80051e0:	460b      	mov	r3, r1
 80051e2:	4690      	mov	r8, r2
 80051e4:	4699      	mov	r9, r3
			-((float)trim->dig_xyz1))))/((((float)trim->dig_z2)+((float)trim->dig_z1)*((float)raw_data_r) /32768.0) * 4.0)) / 16.0;
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80051ec:	ee07 3a90 	vmov	s15, r3
 80051f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80051f4:	ee17 0a90 	vmov	r0, s15
 80051f8:	f7fb f9a6 	bl	8000548 <__aeabi_f2d>
 80051fc:	4604      	mov	r4, r0
 80051fe:	460d      	mov	r5, r1
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	889b      	ldrh	r3, [r3, #4]
 8005204:	ee07 3a90 	vmov	s15, r3
 8005208:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800520c:	88bb      	ldrh	r3, [r7, #4]
 800520e:	ee07 3a90 	vmov	s15, r3
 8005212:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005216:	ee67 7a27 	vmul.f32	s15, s14, s15
 800521a:	ee17 0a90 	vmov	r0, s15
 800521e:	f7fb f993 	bl	8000548 <__aeabi_f2d>
 8005222:	f04f 0200 	mov.w	r2, #0
 8005226:	4b1b      	ldr	r3, [pc, #108]	; (8005294 <BMM150_Compensate_z+0x17c>)
 8005228:	f7fb fb10 	bl	800084c <__aeabi_ddiv>
 800522c:	4602      	mov	r2, r0
 800522e:	460b      	mov	r3, r1
 8005230:	4620      	mov	r0, r4
 8005232:	4629      	mov	r1, r5
 8005234:	f7fb f82a 	bl	800028c <__adddf3>
 8005238:	4602      	mov	r2, r0
 800523a:	460b      	mov	r3, r1
 800523c:	4610      	mov	r0, r2
 800523e:	4619      	mov	r1, r3
 8005240:	f04f 0200 	mov.w	r2, #0
 8005244:	4b14      	ldr	r3, [pc, #80]	; (8005298 <BMM150_Compensate_z+0x180>)
 8005246:	f7fb f9d7 	bl	80005f8 <__aeabi_dmul>
 800524a:	4602      	mov	r2, r0
 800524c:	460b      	mov	r3, r1
 800524e:	4640      	mov	r0, r8
 8005250:	4649      	mov	r1, r9
 8005252:	f7fb fafb 	bl	800084c <__aeabi_ddiv>
 8005256:	4602      	mov	r2, r0
 8005258:	460b      	mov	r3, r1
 800525a:	4610      	mov	r0, r2
 800525c:	4619      	mov	r1, r3
 800525e:	f04f 0200 	mov.w	r2, #0
 8005262:	4b0e      	ldr	r3, [pc, #56]	; (800529c <BMM150_Compensate_z+0x184>)
 8005264:	f7fb faf2 	bl	800084c <__aeabi_ddiv>
 8005268:	4602      	mov	r2, r0
 800526a:	460b      	mov	r3, r1
			compensated_Z = ((((((float)raw_mag_data_z)-((float)trim->dig_z4)) * 131072.0)-(((float)trim->dig_z3)*(((float)raw_data_r)
 800526c:	4610      	mov	r0, r2
 800526e:	4619      	mov	r1, r3
 8005270:	f7fb fcba 	bl	8000be8 <__aeabi_d2f>
 8005274:	4603      	mov	r3, r0
 8005276:	60fb      	str	r3, [r7, #12]
 8005278:	e002      	b.n	8005280 <BMM150_Compensate_z+0x168>
		}
	}
	else {
		compensated_Z = 0.0f;
 800527a:	f04f 0300 	mov.w	r3, #0
 800527e:	60fb      	str	r3, [r7, #12]
	}
	return (compensated_Z);
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	ee07 3a90 	vmov	s15, r3
}
 8005286:	eeb0 0a67 	vmov.f32	s0, s15
 800528a:	3710      	adds	r7, #16
 800528c:	46bd      	mov	sp, r7
 800528e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005292:	bf00      	nop
 8005294:	40e00000 	.word	0x40e00000
 8005298:	40100000 	.word	0x40100000
 800529c:	40300000 	.word	0x40300000

080052a0 <BMM150_ReadByte>:



HAL_StatusTypeDef	BMM150_ReadByte(BMM150 *bmm, uint8_t regAddr, uint8_t *data){
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b088      	sub	sp, #32
 80052a4:	af04      	add	r7, sp, #16
 80052a6:	60f8      	str	r0, [r7, #12]
 80052a8:	460b      	mov	r3, r1
 80052aa:	607a      	str	r2, [r7, #4]
 80052ac:	72fb      	strb	r3, [r7, #11]
	return HAL_I2C_Mem_Read(bmm->hi2c_handle, BMM150_ADDR << 1, regAddr, I2C_MEMADD_SIZE_8BIT, data, 1, 100);
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	6818      	ldr	r0, [r3, #0]
 80052b2:	7afb      	ldrb	r3, [r7, #11]
 80052b4:	b29a      	uxth	r2, r3
 80052b6:	2364      	movs	r3, #100	; 0x64
 80052b8:	9302      	str	r3, [sp, #8]
 80052ba:	2301      	movs	r3, #1
 80052bc:	9301      	str	r3, [sp, #4]
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	9300      	str	r3, [sp, #0]
 80052c2:	2301      	movs	r3, #1
 80052c4:	2120      	movs	r1, #32
 80052c6:	f002 f971 	bl	80075ac <HAL_I2C_Mem_Read>
 80052ca:	4603      	mov	r3, r0
}
 80052cc:	4618      	mov	r0, r3
 80052ce:	3710      	adds	r7, #16
 80052d0:	46bd      	mov	sp, r7
 80052d2:	bd80      	pop	{r7, pc}

080052d4 <BMM150_ReadMultiBytes>:
HAL_StatusTypeDef	BMM150_ReadMultiBytes(BMM150 *bmm, uint8_t regAddr, uint8_t *data, uint8_t len){
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b088      	sub	sp, #32
 80052d8:	af04      	add	r7, sp, #16
 80052da:	60f8      	str	r0, [r7, #12]
 80052dc:	607a      	str	r2, [r7, #4]
 80052de:	461a      	mov	r2, r3
 80052e0:	460b      	mov	r3, r1
 80052e2:	72fb      	strb	r3, [r7, #11]
 80052e4:	4613      	mov	r3, r2
 80052e6:	72bb      	strb	r3, [r7, #10]
	return HAL_I2C_Mem_Read(bmm->hi2c_handle, BMM150_ADDR << 1, regAddr, I2C_MEMADD_SIZE_8BIT, data, len, 100);
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	6818      	ldr	r0, [r3, #0]
 80052ec:	7afb      	ldrb	r3, [r7, #11]
 80052ee:	b29a      	uxth	r2, r3
 80052f0:	7abb      	ldrb	r3, [r7, #10]
 80052f2:	b29b      	uxth	r3, r3
 80052f4:	2164      	movs	r1, #100	; 0x64
 80052f6:	9102      	str	r1, [sp, #8]
 80052f8:	9301      	str	r3, [sp, #4]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	9300      	str	r3, [sp, #0]
 80052fe:	2301      	movs	r3, #1
 8005300:	2120      	movs	r1, #32
 8005302:	f002 f953 	bl	80075ac <HAL_I2C_Mem_Read>
 8005306:	4603      	mov	r3, r0
}
 8005308:	4618      	mov	r0, r3
 800530a:	3710      	adds	r7, #16
 800530c:	46bd      	mov	sp, r7
 800530e:	bd80      	pop	{r7, pc}

08005310 <BMM150_WriteByte>:
HAL_StatusTypeDef	BMM150_WriteByte(BMM150 *bmm, uint8_t regAddr, uint8_t data){
 8005310:	b580      	push	{r7, lr}
 8005312:	b086      	sub	sp, #24
 8005314:	af04      	add	r7, sp, #16
 8005316:	6078      	str	r0, [r7, #4]
 8005318:	460b      	mov	r3, r1
 800531a:	70fb      	strb	r3, [r7, #3]
 800531c:	4613      	mov	r3, r2
 800531e:	70bb      	strb	r3, [r7, #2]
	return HAL_I2C_Mem_Write(bmm->hi2c_handle, BMM150_ADDR << 1, regAddr, I2C_MEMADD_SIZE_8BIT, &data, 1, 100);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6818      	ldr	r0, [r3, #0]
 8005324:	78fb      	ldrb	r3, [r7, #3]
 8005326:	b29a      	uxth	r2, r3
 8005328:	2364      	movs	r3, #100	; 0x64
 800532a:	9302      	str	r3, [sp, #8]
 800532c:	2301      	movs	r3, #1
 800532e:	9301      	str	r3, [sp, #4]
 8005330:	1cbb      	adds	r3, r7, #2
 8005332:	9300      	str	r3, [sp, #0]
 8005334:	2301      	movs	r3, #1
 8005336:	2120      	movs	r1, #32
 8005338:	f002 f83e 	bl	80073b8 <HAL_I2C_Mem_Write>
 800533c:	4603      	mov	r3, r0
}
 800533e:	4618      	mov	r0, r3
 8005340:	3708      	adds	r7, #8
 8005342:	46bd      	mov	sp, r7
 8005344:	bd80      	pop	{r7, pc}

08005346 <BMP388_Init>:
 *
 *  @return Status of execution
 *  @retval = HAL_OK  		-> Success
 *  @retval != HAL_OK	  	-> Failure Info
 */
HAL_StatusTypeDef BMP388_Init(BMP388_HandleTypeDef *bmp){
 8005346:	b580      	push	{r7, lr}
 8005348:	b084      	sub	sp, #16
 800534a:	af00      	add	r7, sp, #0
 800534c:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef rslt;
	uint8_t chip_id;

	// Read CHIP_ID byte
	rslt = BMP388_ReadBytes(bmp, CHIP_ID, &chip_id, 1);
 800534e:	f107 020e 	add.w	r2, r7, #14
 8005352:	2301      	movs	r3, #1
 8005354:	2100      	movs	r1, #0
 8005356:	6878      	ldr	r0, [r7, #4]
 8005358:	f000 fc07 	bl	8005b6a <BMP388_ReadBytes>
 800535c:	4603      	mov	r3, r0
 800535e:	73fb      	strb	r3, [r7, #15]
	if(rslt == HAL_OK && chip_id == BMP388_CHIP_ID){
 8005360:	7bfb      	ldrb	r3, [r7, #15]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d12a      	bne.n	80053bc <BMP388_Init+0x76>
 8005366:	7bbb      	ldrb	r3, [r7, #14]
 8005368:	2b50      	cmp	r3, #80	; 0x50
 800536a:	d127      	bne.n	80053bc <BMP388_Init+0x76>
		// using softreset command
		rslt = BMP388_SoftReset(bmp);
 800536c:	6878      	ldr	r0, [r7, #4]
 800536e:	f000 f961 	bl	8005634 <BMP388_SoftReset>
 8005372:	4603      	mov	r3, r0
 8005374:	73fb      	strb	r3, [r7, #15]
		if(rslt == HAL_OK){
 8005376:	7bfb      	ldrb	r3, [r7, #15]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d11d      	bne.n	80053b8 <BMP388_Init+0x72>
			// get calibration data
			rslt = BMP388_GetCalibData(bmp);
 800537c:	6878      	ldr	r0, [r7, #4]
 800537e:	f000 f999 	bl	80056b4 <BMP388_GetCalibData>
 8005382:	4603      	mov	r3, r0
 8005384:	73fb      	strb	r3, [r7, #15]
		if(rslt == HAL_OK){
 8005386:	bf00      	nop
		}
	}
	else{
		return rslt;
	}
	uint8_t pwr_ctrl = BMP388_PWR_CTRL_PRESS_ON | BMP388_PWR_CTRL_TEMP_ON | BMP388_PWR_CTRL_MODE_NORMAL;
 8005388:	2333      	movs	r3, #51	; 0x33
 800538a:	737b      	strb	r3, [r7, #13]

	uint8_t oversampling = bmp->_oversampling;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	791b      	ldrb	r3, [r3, #4]
 8005390:	733b      	strb	r3, [r7, #12]
	uint8_t odr = bmp->_odr;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	799b      	ldrb	r3, [r3, #6]
 8005396:	72fb      	strb	r3, [r7, #11]
	uint8_t filtercoeff = bmp->_filtercoeff;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	795b      	ldrb	r3, [r3, #5]
 800539c:	72bb      	strb	r3, [r7, #10]



	// Set OSR register
	rslt = BMP388_WriteBytes(bmp, OSR, &oversampling, 1);
 800539e:	f107 020c 	add.w	r2, r7, #12
 80053a2:	2301      	movs	r3, #1
 80053a4:	211c      	movs	r1, #28
 80053a6:	6878      	ldr	r0, [r7, #4]
 80053a8:	f000 fbfd 	bl	8005ba6 <BMP388_WriteBytes>
 80053ac:	4603      	mov	r3, r0
 80053ae:	73fb      	strb	r3, [r7, #15]
	if(rslt != HAL_OK){
 80053b0:	7bfb      	ldrb	r3, [r7, #15]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d006      	beq.n	80053c4 <BMP388_Init+0x7e>
 80053b6:	e003      	b.n	80053c0 <BMP388_Init+0x7a>
			return rslt;
 80053b8:	7bfb      	ldrb	r3, [r7, #15]
 80053ba:	e03b      	b.n	8005434 <BMP388_Init+0xee>
		return rslt;
 80053bc:	7bfb      	ldrb	r3, [r7, #15]
 80053be:	e039      	b.n	8005434 <BMP388_Init+0xee>
		return rslt;
 80053c0:	7bfb      	ldrb	r3, [r7, #15]
 80053c2:	e037      	b.n	8005434 <BMP388_Init+0xee>
	}
	// Set ODR register
	rslt = BMP388_WriteBytes(bmp, ODR, &odr, 1);
 80053c4:	f107 020b 	add.w	r2, r7, #11
 80053c8:	2301      	movs	r3, #1
 80053ca:	211d      	movs	r1, #29
 80053cc:	6878      	ldr	r0, [r7, #4]
 80053ce:	f000 fbea 	bl	8005ba6 <BMP388_WriteBytes>
 80053d2:	4603      	mov	r3, r0
 80053d4:	73fb      	strb	r3, [r7, #15]
	if(rslt != HAL_OK){
 80053d6:	7bfb      	ldrb	r3, [r7, #15]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d001      	beq.n	80053e0 <BMP388_Init+0x9a>
		return rslt;
 80053dc:	7bfb      	ldrb	r3, [r7, #15]
 80053de:	e029      	b.n	8005434 <BMP388_Init+0xee>
	}
	// Set CONFIG register
	rslt = BMP388_WriteBytes(bmp, CONFIG, &filtercoeff, 1);
 80053e0:	f107 020a 	add.w	r2, r7, #10
 80053e4:	2301      	movs	r3, #1
 80053e6:	211f      	movs	r1, #31
 80053e8:	6878      	ldr	r0, [r7, #4]
 80053ea:	f000 fbdc 	bl	8005ba6 <BMP388_WriteBytes>
 80053ee:	4603      	mov	r3, r0
 80053f0:	73fb      	strb	r3, [r7, #15]
	if(rslt != HAL_OK){
 80053f2:	7bfb      	ldrb	r3, [r7, #15]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d001      	beq.n	80053fc <BMP388_Init+0xb6>
		return rslt;
 80053f8:	7bfb      	ldrb	r3, [r7, #15]
 80053fa:	e01b      	b.n	8005434 <BMP388_Init+0xee>
	}
	// Set PWR_CTRL register
	rslt = BMP388_WriteBytes(bmp, PWR_CTRL, &pwr_ctrl, 1);
 80053fc:	f107 020d 	add.w	r2, r7, #13
 8005400:	2301      	movs	r3, #1
 8005402:	211b      	movs	r1, #27
 8005404:	6878      	ldr	r0, [r7, #4]
 8005406:	f000 fbce 	bl	8005ba6 <BMP388_WriteBytes>
 800540a:	4603      	mov	r3, r0
 800540c:	73fb      	strb	r3, [r7, #15]
	if(rslt != HAL_OK){
 800540e:	7bfb      	ldrb	r3, [r7, #15]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d001      	beq.n	8005418 <BMP388_Init+0xd2>
		return rslt;
 8005414:	7bfb      	ldrb	r3, [r7, #15]
 8005416:	e00d      	b.n	8005434 <BMP388_Init+0xee>
	}

	rslt = BMP388_WriteBytes(bmp, INT_CTRL, 0x40, 1);
 8005418:	2301      	movs	r3, #1
 800541a:	2240      	movs	r2, #64	; 0x40
 800541c:	2119      	movs	r1, #25
 800541e:	6878      	ldr	r0, [r7, #4]
 8005420:	f000 fbc1 	bl	8005ba6 <BMP388_WriteBytes>
 8005424:	4603      	mov	r3, r0
 8005426:	73fb      	strb	r3, [r7, #15]
	if(rslt != HAL_OK){
 8005428:	7bfb      	ldrb	r3, [r7, #15]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d001      	beq.n	8005432 <BMP388_Init+0xec>
		return rslt;
 800542e:	7bfb      	ldrb	r3, [r7, #15]
 8005430:	e000      	b.n	8005434 <BMP388_Init+0xee>
	}

	return rslt;
 8005432:	7bfb      	ldrb	r3, [r7, #15]
}
 8005434:	4618      	mov	r0, r3
 8005436:	3710      	adds	r7, #16
 8005438:	46bd      	mov	sp, r7
 800543a:	bd80      	pop	{r7, pc}

0800543c <BMP388_SetTempOS>:
 *
 *  @return Status of execution
 *  @retval = HAL_OK  		-> Success
 *  @retval != HAL_OK	  	-> Wrong oversampling mode
 */
HAL_StatusTypeDef BMP388_SetTempOS(BMP388_HandleTypeDef *bmp, uint8_t oversample){
 800543c:	b480      	push	{r7}
 800543e:	b083      	sub	sp, #12
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
 8005444:	460b      	mov	r3, r1
 8005446:	70fb      	strb	r3, [r7, #3]
	if(oversample > BMP388_OVERSAMPLING_32X){
 8005448:	78fb      	ldrb	r3, [r7, #3]
 800544a:	2b05      	cmp	r3, #5
 800544c:	d901      	bls.n	8005452 <BMP388_SetTempOS+0x16>
		return HAL_ERROR;
 800544e:	2301      	movs	r3, #1
 8005450:	e00e      	b.n	8005470 <BMP388_SetTempOS+0x34>
	}
	bmp->_oversampling = (bmp->_oversampling & 0b11000111) | (oversample << 3); //& clear the temp OS bits and the | set the temp OS reg
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	791b      	ldrb	r3, [r3, #4]
 8005456:	b25b      	sxtb	r3, r3
 8005458:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 800545c:	b25a      	sxtb	r2, r3
 800545e:	78fb      	ldrb	r3, [r7, #3]
 8005460:	00db      	lsls	r3, r3, #3
 8005462:	b25b      	sxtb	r3, r3
 8005464:	4313      	orrs	r3, r2
 8005466:	b25b      	sxtb	r3, r3
 8005468:	b2da      	uxtb	r2, r3
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	711a      	strb	r2, [r3, #4]
	return HAL_OK;
 800546e:	2300      	movs	r3, #0
}
 8005470:	4618      	mov	r0, r3
 8005472:	370c      	adds	r7, #12
 8005474:	46bd      	mov	sp, r7
 8005476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547a:	4770      	bx	lr

0800547c <BMP388_SetPressOS>:
 *
 *  @return Status of execution
 *  @retval = HAL_OK  		-> Success
 *  @retval != HAL_OK	  	-> Wrong oversampling mode
 */
HAL_StatusTypeDef BMP388_SetPressOS(BMP388_HandleTypeDef *bmp, uint8_t oversample){
 800547c:	b480      	push	{r7}
 800547e:	b083      	sub	sp, #12
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
 8005484:	460b      	mov	r3, r1
 8005486:	70fb      	strb	r3, [r7, #3]
	if(oversample > BMP388_OVERSAMPLING_32X){
 8005488:	78fb      	ldrb	r3, [r7, #3]
 800548a:	2b05      	cmp	r3, #5
 800548c:	d901      	bls.n	8005492 <BMP388_SetPressOS+0x16>
		return HAL_ERROR;
 800548e:	2301      	movs	r3, #1
 8005490:	e00d      	b.n	80054ae <BMP388_SetPressOS+0x32>
	}
	bmp->_oversampling = (bmp->_oversampling & 0b11111000) | oversample; //& clear the press OS bits and the | set the press OS reg
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	791b      	ldrb	r3, [r3, #4]
 8005496:	b25b      	sxtb	r3, r3
 8005498:	f023 0307 	bic.w	r3, r3, #7
 800549c:	b25a      	sxtb	r2, r3
 800549e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80054a2:	4313      	orrs	r3, r2
 80054a4:	b25b      	sxtb	r3, r3
 80054a6:	b2da      	uxtb	r2, r3
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	711a      	strb	r2, [r3, #4]
	return HAL_OK;
 80054ac:	2300      	movs	r3, #0
}
 80054ae:	4618      	mov	r0, r3
 80054b0:	370c      	adds	r7, #12
 80054b2:	46bd      	mov	sp, r7
 80054b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b8:	4770      	bx	lr

080054ba <BMP388_SetIIRFilterCoeff>:
 *
 *  @return Status of execution
 *  @retval = HAL_OK  		-> Success
 *  @retval != HAL_OK	  	-> Wrong filter coefficient
 */
HAL_StatusTypeDef BMP388_SetIIRFilterCoeff(BMP388_HandleTypeDef *bmp, uint8_t filtercoeff){
 80054ba:	b480      	push	{r7}
 80054bc:	b083      	sub	sp, #12
 80054be:	af00      	add	r7, sp, #0
 80054c0:	6078      	str	r0, [r7, #4]
 80054c2:	460b      	mov	r3, r1
 80054c4:	70fb      	strb	r3, [r7, #3]
	if(filtercoeff > BMP3_IIR_FILTER_COEFF_127){
 80054c6:	78fb      	ldrb	r3, [r7, #3]
 80054c8:	2b07      	cmp	r3, #7
 80054ca:	d901      	bls.n	80054d0 <BMP388_SetIIRFilterCoeff+0x16>
		return HAL_ERROR;
 80054cc:	2301      	movs	r3, #1
 80054ce:	e005      	b.n	80054dc <BMP388_SetIIRFilterCoeff+0x22>
	}
	bmp->_filtercoeff = filtercoeff << 1;
 80054d0:	78fb      	ldrb	r3, [r7, #3]
 80054d2:	005b      	lsls	r3, r3, #1
 80054d4:	b2da      	uxtb	r2, r3
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	715a      	strb	r2, [r3, #5]
	return HAL_OK;
 80054da:	2300      	movs	r3, #0
}
 80054dc:	4618      	mov	r0, r3
 80054de:	370c      	adds	r7, #12
 80054e0:	46bd      	mov	sp, r7
 80054e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e6:	4770      	bx	lr

080054e8 <BMP388_SetOutputDataRate>:
 *
 *  @return Status of execution
 *  @retval = HAL_OK  		-> Success
 *  @retval != HAL_OK	  	-> Wrong oversampling mode
 */
HAL_StatusTypeDef BMP388_SetOutputDataRate(BMP388_HandleTypeDef *bmp, uint8_t odr){
 80054e8:	b480      	push	{r7}
 80054ea:	b083      	sub	sp, #12
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
 80054f0:	460b      	mov	r3, r1
 80054f2:	70fb      	strb	r3, [r7, #3]
	if(odr > BMP3_ODR_0_001_HZ){
 80054f4:	78fb      	ldrb	r3, [r7, #3]
 80054f6:	2b11      	cmp	r3, #17
 80054f8:	d901      	bls.n	80054fe <BMP388_SetOutputDataRate+0x16>
		return HAL_ERROR;
 80054fa:	2301      	movs	r3, #1
 80054fc:	e003      	b.n	8005506 <BMP388_SetOutputDataRate+0x1e>
	}
	bmp->_odr = odr;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	78fa      	ldrb	r2, [r7, #3]
 8005502:	719a      	strb	r2, [r3, #6]
	return HAL_OK;
 8005504:	2300      	movs	r3, #0
}
 8005506:	4618      	mov	r0, r3
 8005508:	370c      	adds	r7, #12
 800550a:	46bd      	mov	sp, r7
 800550c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005510:	4770      	bx	lr

08005512 <BMP388_ReadRawPressTempTime>:
 *
 *  @return Status of execution
 *  @retval = HAL_OK  		-> Success
 *  @retval != HAL_OK	  	-> Failure Info
 */
HAL_StatusTypeDef BMP388_ReadRawPressTempTime(BMP388_HandleTypeDef *bmp, uint32_t *raw_pressure, uint32_t *raw_temperature, uint32_t *time){
 8005512:	b580      	push	{r7, lr}
 8005514:	b088      	sub	sp, #32
 8005516:	af00      	add	r7, sp, #0
 8005518:	60f8      	str	r0, [r7, #12]
 800551a:	60b9      	str	r1, [r7, #8]
 800551c:	607a      	str	r2, [r7, #4]
 800551e:	603b      	str	r3, [r7, #0]
	}*/

	uint8_t raw_data[11]; //registers in order 0x04 - 0x06 press data, 0x07 - 0x09 temp data, 0x0A and 0x0B reserved, 0x0C - 0x0E time data -> 11 byte
	// Get raw data for pressure and temperature
	//rslt = BMP388_ReadBytes(bmp, DATA_0, raw_data, 11);
	rslt = BMP388_ReadBytes(bmp, DATA_0, raw_data, 6);
 8005520:	f107 0214 	add.w	r2, r7, #20
 8005524:	2306      	movs	r3, #6
 8005526:	2104      	movs	r1, #4
 8005528:	68f8      	ldr	r0, [r7, #12]
 800552a:	f000 fb1e 	bl	8005b6a <BMP388_ReadBytes>
 800552e:	4603      	mov	r3, r0
 8005530:	77fb      	strb	r3, [r7, #31]
	if(rslt != HAL_OK){
 8005532:	7ffb      	ldrb	r3, [r7, #31]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d001      	beq.n	800553c <BMP388_ReadRawPressTempTime+0x2a>
		return rslt;
 8005538:	7ffb      	ldrb	r3, [r7, #31]
 800553a:	e012      	b.n	8005562 <BMP388_ReadRawPressTempTime+0x50>
//	uint32_t data_xlsb;
//	uint32_t data_lsb;
//	uint32_t data_msb;

	// Parsing pressure data
	*raw_pressure = (uint32_t)raw_data[2] << 16 | (uint32_t)raw_data[1] << 8 | (uint32_t)raw_data[0];
 800553c:	7dbb      	ldrb	r3, [r7, #22]
 800553e:	041a      	lsls	r2, r3, #16
 8005540:	7d7b      	ldrb	r3, [r7, #21]
 8005542:	021b      	lsls	r3, r3, #8
 8005544:	4313      	orrs	r3, r2
 8005546:	7d3a      	ldrb	r2, [r7, #20]
 8005548:	431a      	orrs	r2, r3
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	601a      	str	r2, [r3, #0]

	// Parsing temperature data
	*raw_temperature = (uint32_t)raw_data[5] << 16 | (uint32_t)raw_data[4] << 8 | (uint32_t)raw_data[3];
 800554e:	7e7b      	ldrb	r3, [r7, #25]
 8005550:	041a      	lsls	r2, r3, #16
 8005552:	7e3b      	ldrb	r3, [r7, #24]
 8005554:	021b      	lsls	r3, r3, #8
 8005556:	4313      	orrs	r3, r2
 8005558:	7dfa      	ldrb	r2, [r7, #23]
 800555a:	431a      	orrs	r2, r3
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	601a      	str	r2, [r3, #0]

	// Parsing time bytes
	//*time = (uint32_t)raw_data[10] << 16 | (uint32_t)raw_data[9] << 8 | (uint32_t)raw_data[8];


	return rslt;
 8005560:	7ffb      	ldrb	r3, [r7, #31]
}
 8005562:	4618      	mov	r0, r3
 8005564:	3720      	adds	r7, #32
 8005566:	46bd      	mov	sp, r7
 8005568:	bd80      	pop	{r7, pc}

0800556a <BMP388_CompensateRawPressTemp>:
 *	@param[out]	temperature		: Pointer to the variable that contain temperature.
 *
 *  @return none
 */
void BMP388_CompensateRawPressTemp(BMP388_HandleTypeDef *bmp, uint32_t raw_pressure, uint32_t raw_temperature,
									  	  	  	  	  	  	  float *pressure, float *temperature){
 800556a:	b580      	push	{r7, lr}
 800556c:	b086      	sub	sp, #24
 800556e:	af00      	add	r7, sp, #0
 8005570:	60f8      	str	r0, [r7, #12]
 8005572:	60b9      	str	r1, [r7, #8]
 8005574:	607a      	str	r2, [r7, #4]
 8005576:	603b      	str	r3, [r7, #0]
	float temp;
	float press;

	BMP388_CompensateTemp(bmp, raw_temperature, &temp);
 8005578:	f107 0314 	add.w	r3, r7, #20
 800557c:	461a      	mov	r2, r3
 800557e:	6879      	ldr	r1, [r7, #4]
 8005580:	68f8      	ldr	r0, [r7, #12]
 8005582:	f000 f9eb 	bl	800595c <BMP388_CompensateTemp>
	BMP388_CompensatePress(bmp, temp, raw_pressure, &press);
 8005586:	edd7 7a05 	vldr	s15, [r7, #20]
 800558a:	f107 0310 	add.w	r3, r7, #16
 800558e:	461a      	mov	r2, r3
 8005590:	68b9      	ldr	r1, [r7, #8]
 8005592:	eeb0 0a67 	vmov.f32	s0, s15
 8005596:	68f8      	ldr	r0, [r7, #12]
 8005598:	f000 fa16 	bl	80059c8 <BMP388_CompensatePress>

	*pressure = press;
 800559c:	693a      	ldr	r2, [r7, #16]
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	601a      	str	r2, [r3, #0]
	*temperature = temp;
 80055a2:	697a      	ldr	r2, [r7, #20]
 80055a4:	6a3b      	ldr	r3, [r7, #32]
 80055a6:	601a      	str	r2, [r3, #0]
}
 80055a8:	bf00      	nop
 80055aa:	3718      	adds	r7, #24
 80055ac:	46bd      	mov	sp, r7
 80055ae:	bd80      	pop	{r7, pc}

080055b0 <BMP388_FindAltitude>:
 *	@param[in] ground_pressure	: Pressure at ground
 *  @param[in] pressure			: Pressure that measured at flight.
 *
 *  @return Altitude
 */
float BMP388_FindAltitude(float ground_pressure, float pressure){
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b082      	sub	sp, #8
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	ed87 0a01 	vstr	s0, [r7, #4]
 80055ba:	edc7 0a00 	vstr	s1, [r7]

	// Note that using the equation from wikipedia can give bad results
	// at high altitude. See this thread for more information:
	//  http://forums.adafruit.com/viewtopic.php?f=22&t=58064

	return 44330.0 * (1.0 - pow(pressure / ground_pressure, 0.1903));
 80055be:	ed97 7a00 	vldr	s14, [r7]
 80055c2:	edd7 7a01 	vldr	s15, [r7, #4]
 80055c6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80055ca:	ee16 0a90 	vmov	r0, s13
 80055ce:	f7fa ffbb 	bl	8000548 <__aeabi_f2d>
 80055d2:	4602      	mov	r2, r0
 80055d4:	460b      	mov	r3, r1
 80055d6:	ed9f 1b12 	vldr	d1, [pc, #72]	; 8005620 <BMP388_FindAltitude+0x70>
 80055da:	ec43 2b10 	vmov	d0, r2, r3
 80055de:	f00c f9a7 	bl	8011930 <pow>
 80055e2:	ec53 2b10 	vmov	r2, r3, d0
 80055e6:	f04f 0000 	mov.w	r0, #0
 80055ea:	4911      	ldr	r1, [pc, #68]	; (8005630 <BMP388_FindAltitude+0x80>)
 80055ec:	f7fa fe4c 	bl	8000288 <__aeabi_dsub>
 80055f0:	4602      	mov	r2, r0
 80055f2:	460b      	mov	r3, r1
 80055f4:	4610      	mov	r0, r2
 80055f6:	4619      	mov	r1, r3
 80055f8:	a30b      	add	r3, pc, #44	; (adr r3, 8005628 <BMP388_FindAltitude+0x78>)
 80055fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055fe:	f7fa fffb 	bl	80005f8 <__aeabi_dmul>
 8005602:	4602      	mov	r2, r0
 8005604:	460b      	mov	r3, r1
 8005606:	4610      	mov	r0, r2
 8005608:	4619      	mov	r1, r3
 800560a:	f7fb faed 	bl	8000be8 <__aeabi_d2f>
 800560e:	4603      	mov	r3, r0
 8005610:	ee07 3a90 	vmov	s15, r3
}
 8005614:	eeb0 0a67 	vmov.f32	s0, s15
 8005618:	3708      	adds	r7, #8
 800561a:	46bd      	mov	sp, r7
 800561c:	bd80      	pop	{r7, pc}
 800561e:	bf00      	nop
 8005620:	1a36e2eb 	.word	0x1a36e2eb
 8005624:	3fc85bc0 	.word	0x3fc85bc0
 8005628:	00000000 	.word	0x00000000
 800562c:	40e5a540 	.word	0x40e5a540
 8005630:	3ff00000 	.word	0x3ff00000

08005634 <BMP388_SoftReset>:
 *
 *  @return Status of execution
 *  @retval = HAL_OK  		-> Success
 *  @retval != HAL_OK	  	-> Failure Info
 */
HAL_StatusTypeDef BMP388_SoftReset(BMP388_HandleTypeDef *bmp){
 8005634:	b580      	push	{r7, lr}
 8005636:	b084      	sub	sp, #16
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
	uint8_t rst_cmnd = BMP388_SOFTRESET;
 800563c:	23b6      	movs	r3, #182	; 0xb6
 800563e:	73bb      	strb	r3, [r7, #14]
    uint8_t cmd_err_status;

	HAL_StatusTypeDef rslt;

	// Reading STATUS reg to understand that the BMP388 is ready to receive command
	rslt = BMP388_ReadBytes(bmp, STATUS, &cmd_rdy_status, 1);
 8005640:	f107 020d 	add.w	r2, r7, #13
 8005644:	2301      	movs	r3, #1
 8005646:	2103      	movs	r1, #3
 8005648:	6878      	ldr	r0, [r7, #4]
 800564a:	f000 fa8e 	bl	8005b6a <BMP388_ReadBytes>
 800564e:	4603      	mov	r3, r0
 8005650:	73fb      	strb	r3, [r7, #15]
	if((rslt == HAL_OK) && (cmd_rdy_status & BMP388_CMD_RDY)){
 8005652:	7bfb      	ldrb	r3, [r7, #15]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d128      	bne.n	80056aa <BMP388_SoftReset+0x76>
 8005658:	7b7b      	ldrb	r3, [r7, #13]
 800565a:	f003 0310 	and.w	r3, r3, #16
 800565e:	2b00      	cmp	r3, #0
 8005660:	d023      	beq.n	80056aa <BMP388_SoftReset+0x76>
		// Writing SOFTRESET command to CMD reg
		rslt = BMP388_WriteBytes(bmp, CMD, &rst_cmnd, 1);
 8005662:	f107 020e 	add.w	r2, r7, #14
 8005666:	2301      	movs	r3, #1
 8005668:	217e      	movs	r1, #126	; 0x7e
 800566a:	6878      	ldr	r0, [r7, #4]
 800566c:	f000 fa9b 	bl	8005ba6 <BMP388_WriteBytes>
 8005670:	4603      	mov	r3, r0
 8005672:	73fb      	strb	r3, [r7, #15]
		if(rslt == HAL_OK){
 8005674:	7bfb      	ldrb	r3, [r7, #15]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d115      	bne.n	80056a6 <BMP388_SoftReset+0x72>
			// 2 ms pause then check ERR reg
			HAL_Delay(2);
 800567a:	2002      	movs	r0, #2
 800567c:	f000 fbd6 	bl	8005e2c <HAL_Delay>
			rslt = BMP388_ReadBytes(bmp, ERR_REG, &cmd_err_status, 1);
 8005680:	f107 020c 	add.w	r2, r7, #12
 8005684:	2301      	movs	r3, #1
 8005686:	2102      	movs	r1, #2
 8005688:	6878      	ldr	r0, [r7, #4]
 800568a:	f000 fa6e 	bl	8005b6a <BMP388_ReadBytes>
 800568e:	4603      	mov	r3, r0
 8005690:	73fb      	strb	r3, [r7, #15]
			if((cmd_err_status & CMD) || (rslt != HAL_OK)){
 8005692:	7b3b      	ldrb	r3, [r7, #12]
 8005694:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8005698:	2b00      	cmp	r3, #0
 800569a:	d102      	bne.n	80056a2 <BMP388_SoftReset+0x6e>
 800569c:	7bfb      	ldrb	r3, [r7, #15]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d003      	beq.n	80056aa <BMP388_SoftReset+0x76>
				return rslt;
 80056a2:	7bfb      	ldrb	r3, [r7, #15]
 80056a4:	e002      	b.n	80056ac <BMP388_SoftReset+0x78>
			}
		}
		else{
			return rslt;
 80056a6:	7bfb      	ldrb	r3, [r7, #15]
 80056a8:	e000      	b.n	80056ac <BMP388_SoftReset+0x78>
		}
	}

	return rslt;
 80056aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80056ac:	4618      	mov	r0, r3
 80056ae:	3710      	adds	r7, #16
 80056b0:	46bd      	mov	sp, r7
 80056b2:	bd80      	pop	{r7, pc}

080056b4 <BMP388_GetCalibData>:
 *
 *  @return Status of execution
 *  @retval = HAL_OK  		-> Success
 *  @retval != HAL_OK	  	-> Failure Info
 */
HAL_StatusTypeDef BMP388_GetCalibData(BMP388_HandleTypeDef *bmp){
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b090      	sub	sp, #64	; 0x40
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef rslt;
	uint8_t calib_buff[BMP388_CALIBDATA_LEN] = {0};
 80056bc:	2300      	movs	r3, #0
 80056be:	60fb      	str	r3, [r7, #12]
 80056c0:	f107 0310 	add.w	r3, r7, #16
 80056c4:	2200      	movs	r2, #0
 80056c6:	601a      	str	r2, [r3, #0]
 80056c8:	605a      	str	r2, [r3, #4]
 80056ca:	609a      	str	r2, [r3, #8]
 80056cc:	60da      	str	r2, [r3, #12]
 80056ce:	741a      	strb	r2, [r3, #16]
	int8_t		raw_par_p8;
	int16_t		raw_par_p9;
	int8_t		raw_par_p10;
	int8_t		raw_par_p11;

	rslt = BMP388_ReadBytes(bmp, CALIB_DATA, calib_buff, BMP388_CALIBDATA_LEN);
 80056d0:	f107 020c 	add.w	r2, r7, #12
 80056d4:	2315      	movs	r3, #21
 80056d6:	2131      	movs	r1, #49	; 0x31
 80056d8:	6878      	ldr	r0, [r7, #4]
 80056da:	f000 fa46 	bl	8005b6a <BMP388_ReadBytes>
 80056de:	4603      	mov	r3, r0
 80056e0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	float temp_var;
	if(rslt == HAL_OK){
 80056e4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	f040 812f 	bne.w	800594c <BMP388_GetCalibData+0x298>
		// PAR_T1
		temp_var = 0.00390625f;
 80056ee:	f04f 536e 	mov.w	r3, #998244352	; 0x3b800000
 80056f2:	63bb      	str	r3, [r7, #56]	; 0x38
		raw_par_t1 = ((uint16_t)calib_buff[1] << 8) | (uint16_t)calib_buff[0];
 80056f4:	7b7b      	ldrb	r3, [r7, #13]
 80056f6:	021b      	lsls	r3, r3, #8
 80056f8:	b21a      	sxth	r2, r3
 80056fa:	7b3b      	ldrb	r3, [r7, #12]
 80056fc:	b21b      	sxth	r3, r3
 80056fe:	4313      	orrs	r3, r2
 8005700:	b21b      	sxth	r3, r3
 8005702:	86fb      	strh	r3, [r7, #54]	; 0x36
		bmp->_calib_data.par_t1 = (float)raw_par_t1 / temp_var;
 8005704:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005706:	ee07 3a90 	vmov	s15, r3
 800570a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800570e:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8005712:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	edc3 7a02 	vstr	s15, [r3, #8]
		// PAR_T2
		temp_var = 1073741824.f;
 800571c:	f04f 439d 	mov.w	r3, #1317011456	; 0x4e800000
 8005720:	63bb      	str	r3, [r7, #56]	; 0x38
		raw_par_t2 = ((uint16_t)calib_buff[3] << 8) | (uint16_t)calib_buff[2];
 8005722:	7bfb      	ldrb	r3, [r7, #15]
 8005724:	021b      	lsls	r3, r3, #8
 8005726:	b21a      	sxth	r2, r3
 8005728:	7bbb      	ldrb	r3, [r7, #14]
 800572a:	b21b      	sxth	r3, r3
 800572c:	4313      	orrs	r3, r2
 800572e:	b21b      	sxth	r3, r3
 8005730:	86bb      	strh	r3, [r7, #52]	; 0x34
		bmp->_calib_data.par_t2 = (float)raw_par_t2 / temp_var;
 8005732:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005734:	ee07 3a90 	vmov	s15, r3
 8005738:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800573c:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8005740:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	edc3 7a03 	vstr	s15, [r3, #12]
		// PAR_T3
		temp_var = 281474976710656.f;
 800574a:	f04f 43af 	mov.w	r3, #1468006400	; 0x57800000
 800574e:	63bb      	str	r3, [r7, #56]	; 0x38
		raw_par_t3 = calib_buff[4];
 8005750:	7c3b      	ldrb	r3, [r7, #16]
 8005752:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		bmp->_calib_data.par_t3 = (float)raw_par_t3 / temp_var;
 8005756:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800575a:	ee07 3a90 	vmov	s15, r3
 800575e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8005762:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8005766:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	edc3 7a04 	vstr	s15, [r3, #16]
		// PAR_P1
		temp_var = 1048576.f;
 8005770:	f04f 4393 	mov.w	r3, #1233125376	; 0x49800000
 8005774:	63bb      	str	r3, [r7, #56]	; 0x38
		raw_par_p1 = ((int16_t)calib_buff[6] << 8) | (int16_t)calib_buff[5];
 8005776:	7cbb      	ldrb	r3, [r7, #18]
 8005778:	021b      	lsls	r3, r3, #8
 800577a:	b21a      	sxth	r2, r3
 800577c:	7c7b      	ldrb	r3, [r7, #17]
 800577e:	b21b      	sxth	r3, r3
 8005780:	4313      	orrs	r3, r2
 8005782:	863b      	strh	r3, [r7, #48]	; 0x30
		bmp->_calib_data.par_p1 = ((float)raw_par_p1 - 16384) / temp_var;
 8005784:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8005788:	ee07 3a90 	vmov	s15, r3
 800578c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005790:	ed9f 7a71 	vldr	s14, [pc, #452]	; 8005958 <BMP388_GetCalibData+0x2a4>
 8005794:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8005798:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800579c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	edc3 7a05 	vstr	s15, [r3, #20]
		// PAR_P2
		temp_var = 536870912.f;
 80057a6:	f04f 439c 	mov.w	r3, #1308622848	; 0x4e000000
 80057aa:	63bb      	str	r3, [r7, #56]	; 0x38
		raw_par_p2 = ((int16_t)calib_buff[8] << 8) | (int16_t)calib_buff[7];
 80057ac:	7d3b      	ldrb	r3, [r7, #20]
 80057ae:	021b      	lsls	r3, r3, #8
 80057b0:	b21a      	sxth	r2, r3
 80057b2:	7cfb      	ldrb	r3, [r7, #19]
 80057b4:	b21b      	sxth	r3, r3
 80057b6:	4313      	orrs	r3, r2
 80057b8:	85fb      	strh	r3, [r7, #46]	; 0x2e
		bmp->_calib_data.par_p2 = ((float)raw_par_p2 - 16384) / temp_var;
 80057ba:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 80057be:	ee07 3a90 	vmov	s15, r3
 80057c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80057c6:	ed9f 7a64 	vldr	s14, [pc, #400]	; 8005958 <BMP388_GetCalibData+0x2a4>
 80057ca:	ee77 6ac7 	vsub.f32	s13, s15, s14
 80057ce:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80057d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	edc3 7a06 	vstr	s15, [r3, #24]
		// PAR_P3
		temp_var = 4294967296.f;
 80057dc:	f04f 439f 	mov.w	r3, #1333788672	; 0x4f800000
 80057e0:	63bb      	str	r3, [r7, #56]	; 0x38
		raw_par_p3 = (int8_t)calib_buff[9];
 80057e2:	7d7b      	ldrb	r3, [r7, #21]
 80057e4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
		bmp->_calib_data.par_p3 = (float)raw_par_p3 / temp_var;
 80057e8:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 80057ec:	ee07 3a90 	vmov	s15, r3
 80057f0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80057f4:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80057f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	edc3 7a07 	vstr	s15, [r3, #28]
		// PAR_P4
		temp_var = 137438953472.f;
 8005802:	f04f 43a4 	mov.w	r3, #1375731712	; 0x52000000
 8005806:	63bb      	str	r3, [r7, #56]	; 0x38
		raw_par_p4 = (int8_t)calib_buff[10];
 8005808:	7dbb      	ldrb	r3, [r7, #22]
 800580a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
		bmp->_calib_data.par_p4 = (float)raw_par_p4 / temp_var;
 800580e:	f997 302c 	ldrsb.w	r3, [r7, #44]	; 0x2c
 8005812:	ee07 3a90 	vmov	s15, r3
 8005816:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800581a:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800581e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	edc3 7a08 	vstr	s15, [r3, #32]
		// PAR_P5
		temp_var = 0.125f;
 8005828:	f04f 5378 	mov.w	r3, #1040187392	; 0x3e000000
 800582c:	63bb      	str	r3, [r7, #56]	; 0x38
		raw_par_p5 = ((uint16_t)calib_buff[12] << 8) | (uint16_t)calib_buff[11];
 800582e:	7e3b      	ldrb	r3, [r7, #24]
 8005830:	021b      	lsls	r3, r3, #8
 8005832:	b21a      	sxth	r2, r3
 8005834:	7dfb      	ldrb	r3, [r7, #23]
 8005836:	b21b      	sxth	r3, r3
 8005838:	4313      	orrs	r3, r2
 800583a:	b21b      	sxth	r3, r3
 800583c:	857b      	strh	r3, [r7, #42]	; 0x2a
		bmp->_calib_data.par_p5 = (float)raw_par_p5 / temp_var;
 800583e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005840:	ee07 3a90 	vmov	s15, r3
 8005844:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005848:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800584c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
		// PAR_P6
		temp_var = 64.f;
 8005856:	f04f 4385 	mov.w	r3, #1115684864	; 0x42800000
 800585a:	63bb      	str	r3, [r7, #56]	; 0x38
		raw_par_p6 = ((uint16_t)calib_buff[14] << 8) | (uint16_t)calib_buff[13];
 800585c:	7ebb      	ldrb	r3, [r7, #26]
 800585e:	021b      	lsls	r3, r3, #8
 8005860:	b21a      	sxth	r2, r3
 8005862:	7e7b      	ldrb	r3, [r7, #25]
 8005864:	b21b      	sxth	r3, r3
 8005866:	4313      	orrs	r3, r2
 8005868:	b21b      	sxth	r3, r3
 800586a:	853b      	strh	r3, [r7, #40]	; 0x28
		bmp->_calib_data.par_p6 = (float)raw_par_p6 / temp_var;
 800586c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800586e:	ee07 3a90 	vmov	s15, r3
 8005872:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005876:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800587a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		// PAR_P7
		temp_var = 256.f;
 8005884:	f04f 4387 	mov.w	r3, #1132462080	; 0x43800000
 8005888:	63bb      	str	r3, [r7, #56]	; 0x38
		raw_par_p7 = (int8_t)calib_buff[15];
 800588a:	7efb      	ldrb	r3, [r7, #27]
 800588c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		bmp->_calib_data.par_p7 = (float)raw_par_p7 / temp_var;
 8005890:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005894:	ee07 3a90 	vmov	s15, r3
 8005898:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800589c:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80058a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
		// PAR_P8
		temp_var = 32768.f;
 80058aa:	f04f 438e 	mov.w	r3, #1191182336	; 0x47000000
 80058ae:	63bb      	str	r3, [r7, #56]	; 0x38
		raw_par_p8 = (int8_t)calib_buff[16];
 80058b0:	7f3b      	ldrb	r3, [r7, #28]
 80058b2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		bmp->_calib_data.par_p8 = (float)raw_par_p8 / temp_var;
 80058b6:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
 80058ba:	ee07 3a90 	vmov	s15, r3
 80058be:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80058c2:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80058c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
		// PAR_P9
		temp_var = 281474976710656.f;
 80058d0:	f04f 43af 	mov.w	r3, #1468006400	; 0x57800000
 80058d4:	63bb      	str	r3, [r7, #56]	; 0x38
		raw_par_p9 = ((int16_t)calib_buff[18] << 8) | (int16_t)calib_buff[17];
 80058d6:	7fbb      	ldrb	r3, [r7, #30]
 80058d8:	021b      	lsls	r3, r3, #8
 80058da:	b21a      	sxth	r2, r3
 80058dc:	7f7b      	ldrb	r3, [r7, #29]
 80058de:	b21b      	sxth	r3, r3
 80058e0:	4313      	orrs	r3, r2
 80058e2:	84bb      	strh	r3, [r7, #36]	; 0x24
		bmp->_calib_data.par_p9 = (float)raw_par_p9 / temp_var;
 80058e4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80058e8:	ee07 3a90 	vmov	s15, r3
 80058ec:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80058f0:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80058f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
		// PAR_P10
		temp_var = 281474976710656.f;
 80058fe:	f04f 43af 	mov.w	r3, #1468006400	; 0x57800000
 8005902:	63bb      	str	r3, [r7, #56]	; 0x38
		raw_par_p10 = (int8_t)calib_buff[19];
 8005904:	7ffb      	ldrb	r3, [r7, #31]
 8005906:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		bmp->_calib_data.par_p10 = (float)raw_par_p10 / temp_var;
 800590a:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800590e:	ee07 3a90 	vmov	s15, r3
 8005912:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8005916:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800591a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
		// PAR_P11
		temp_var = 36893488147419103232.f;
 8005924:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8005928:	63bb      	str	r3, [r7, #56]	; 0x38
		raw_par_p11 = (int8_t)calib_buff[20];
 800592a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800592e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		bmp->_calib_data.par_p11 = (float)raw_par_p11 / temp_var;
 8005932:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 8005936:	ee07 3a90 	vmov	s15, r3
 800593a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800593e:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8005942:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
	}
	return rslt;
 800594c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8005950:	4618      	mov	r0, r3
 8005952:	3740      	adds	r7, #64	; 0x40
 8005954:	46bd      	mov	sp, r7
 8005956:	bd80      	pop	{r7, pc}
 8005958:	46800000 	.word	0x46800000

0800595c <BMP388_CompensateTemp>:
 *
 *  @return Status of execution
 *  @retval = HAL_OK  		-> Success
 *  @retval != HAL_OK	  	-> Failure Info
 */
float BMP388_CompensateTemp(BMP388_HandleTypeDef *bmp, uint32_t raw_temp, float *temp){
 800595c:	b480      	push	{r7}
 800595e:	b087      	sub	sp, #28
 8005960:	af00      	add	r7, sp, #0
 8005962:	60f8      	str	r0, [r7, #12]
 8005964:	60b9      	str	r1, [r7, #8]
 8005966:	607a      	str	r2, [r7, #4]
    float partial_data1 = (float)(raw_temp - bmp->_calib_data.par_t1);;
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	ee07 3a90 	vmov	s15, r3
 800596e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	edd3 7a02 	vldr	s15, [r3, #8]
 8005978:	ee77 7a67 	vsub.f32	s15, s14, s15
 800597c:	edc7 7a05 	vstr	s15, [r7, #20]
    float partial_data2 = (float)(partial_data1 * bmp->_calib_data.par_t2);
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	edd3 7a03 	vldr	s15, [r3, #12]
 8005986:	ed97 7a05 	vldr	s14, [r7, #20]
 800598a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800598e:	edc7 7a04 	vstr	s15, [r7, #16]

    *temp = partial_data2 + (partial_data1 * partial_data1) * bmp->_calib_data.par_t3;
 8005992:	edd7 7a05 	vldr	s15, [r7, #20]
 8005996:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	edd3 7a04 	vldr	s15, [r3, #16]
 80059a0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80059a4:	edd7 7a04 	vldr	s15, [r7, #16]
 80059a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	edc3 7a00 	vstr	s15, [r3]

    return *temp;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	ee07 3a90 	vmov	s15, r3
}
 80059ba:	eeb0 0a67 	vmov.f32	s0, s15
 80059be:	371c      	adds	r7, #28
 80059c0:	46bd      	mov	sp, r7
 80059c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c6:	4770      	bx	lr

080059c8 <BMP388_CompensatePress>:
 *	@param[out] press		: Measured pressure in Pa
 *
 *  @return Status of execution
 *  @retval = press			: Compensated pressure value
 */
float BMP388_CompensatePress(BMP388_HandleTypeDef *bmp, float temp, uint32_t raw_press, float *press){
 80059c8:	b480      	push	{r7}
 80059ca:	b08b      	sub	sp, #44	; 0x2c
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	60f8      	str	r0, [r7, #12]
 80059d0:	ed87 0a02 	vstr	s0, [r7, #8]
 80059d4:	6079      	str	r1, [r7, #4]
 80059d6:	603a      	str	r2, [r7, #0]
    float partial_out1;
    float partial_out2;



    partial_data1 = bmp->_calib_data.par_p6 * temp;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80059de:	ed97 7a02 	vldr	s14, [r7, #8]
 80059e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059e6:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    partial_data2 = bmp->_calib_data.par_p7 * (temp * temp);
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 80059f0:	edd7 7a02 	vldr	s15, [r7, #8]
 80059f4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80059f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059fc:	edc7 7a08 	vstr	s15, [r7, #32]
    partial_data3 = bmp->_calib_data.par_p8 * (temp * temp * temp);
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8005a06:	edd7 7a02 	vldr	s15, [r7, #8]
 8005a0a:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8005a0e:	edd7 7a02 	vldr	s15, [r7, #8]
 8005a12:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005a16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a1a:	edc7 7a07 	vstr	s15, [r7, #28]
    partial_out1 = bmp->_calib_data.par_p5 + partial_data1 + partial_data2 + partial_data3;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8005a24:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8005a28:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005a2c:	edd7 7a08 	vldr	s15, [r7, #32]
 8005a30:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005a34:	ed97 7a07 	vldr	s14, [r7, #28]
 8005a38:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005a3c:	edc7 7a06 	vstr	s15, [r7, #24]

    partial_data1 = bmp->_calib_data.par_p2 * temp;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	edd3 7a06 	vldr	s15, [r3, #24]
 8005a46:	ed97 7a02 	vldr	s14, [r7, #8]
 8005a4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a4e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    partial_data2 = bmp->_calib_data.par_p3 * (temp * temp);
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	ed93 7a07 	vldr	s14, [r3, #28]
 8005a58:	edd7 7a02 	vldr	s15, [r7, #8]
 8005a5c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8005a60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a64:	edc7 7a08 	vstr	s15, [r7, #32]
    partial_data3 = bmp->_calib_data.par_p4 * (temp * temp * temp);
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	ed93 7a08 	vldr	s14, [r3, #32]
 8005a6e:	edd7 7a02 	vldr	s15, [r7, #8]
 8005a72:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8005a76:	edd7 7a02 	vldr	s15, [r7, #8]
 8005a7a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005a7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a82:	edc7 7a07 	vstr	s15, [r7, #28]
    partial_out2 = (float)raw_press * (bmp->_calib_data.par_p1 + partial_data1 + partial_data2 + partial_data3);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	ee07 3a90 	vmov	s15, r3
 8005a8c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	edd3 6a05 	vldr	s13, [r3, #20]
 8005a96:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8005a9a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8005a9e:	edd7 7a08 	vldr	s15, [r7, #32]
 8005aa2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8005aa6:	edd7 7a07 	vldr	s15, [r7, #28]
 8005aaa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005aae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ab2:	edc7 7a05 	vstr	s15, [r7, #20]

    partial_data1 = (float)raw_press * (float)raw_press;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	ee07 3a90 	vmov	s15, r3
 8005abc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	ee07 3a90 	vmov	s15, r3
 8005ac6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005aca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ace:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    partial_data2 = bmp->_calib_data.par_p9 + bmp->_calib_data.par_p10 * temp;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 8005ade:	edd7 7a02 	vldr	s15, [r7, #8]
 8005ae2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005ae6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005aea:	edc7 7a08 	vstr	s15, [r7, #32]
    partial_data3 = partial_data1 * partial_data2;
 8005aee:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8005af2:	edd7 7a08 	vldr	s15, [r7, #32]
 8005af6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005afa:	edc7 7a07 	vstr	s15, [r7, #28]
    partial_data4 = partial_data3 + ((float)raw_press * (float)raw_press * (float)raw_press) * bmp->_calib_data.par_p11;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	ee07 3a90 	vmov	s15, r3
 8005b04:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	ee07 3a90 	vmov	s15, r3
 8005b0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b12:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	ee07 3a90 	vmov	s15, r3
 8005b1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b20:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8005b2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b2e:	ed97 7a07 	vldr	s14, [r7, #28]
 8005b32:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005b36:	edc7 7a04 	vstr	s15, [r7, #16]

    *press = partial_out1 + partial_out2 + partial_data4;
 8005b3a:	ed97 7a06 	vldr	s14, [r7, #24]
 8005b3e:	edd7 7a05 	vldr	s15, [r7, #20]
 8005b42:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005b46:	edd7 7a04 	vldr	s15, [r7, #16]
 8005b4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	edc3 7a00 	vstr	s15, [r3]

    return *press;
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	ee07 3a90 	vmov	s15, r3
}
 8005b5c:	eeb0 0a67 	vmov.f32	s0, s15
 8005b60:	372c      	adds	r7, #44	; 0x2c
 8005b62:	46bd      	mov	sp, r7
 8005b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b68:	4770      	bx	lr

08005b6a <BMP388_ReadBytes>:
 *
 *  @return Status of execution
 *  @retval = HAL_OK 		-> Success
 *  @retval != HAL_ERROR 	-> Failure Info
 */
HAL_StatusTypeDef BMP388_ReadBytes(BMP388_HandleTypeDef *bmp, BMP388_regs reg_addr, uint8_t *buff, uint8_t len){
 8005b6a:	b580      	push	{r7, lr}
 8005b6c:	b088      	sub	sp, #32
 8005b6e:	af04      	add	r7, sp, #16
 8005b70:	60f8      	str	r0, [r7, #12]
 8005b72:	607a      	str	r2, [r7, #4]
 8005b74:	461a      	mov	r2, r3
 8005b76:	460b      	mov	r3, r1
 8005b78:	72fb      	strb	r3, [r7, #11]
 8005b7a:	4613      	mov	r3, r2
 8005b7c:	72bb      	strb	r3, [r7, #10]
	return HAL_I2C_Mem_Read(bmp->_hi2c, BMP388_ADDR << 1, reg_addr, I2C_MEMADD_SIZE_8BIT, buff, len, 100);
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	6818      	ldr	r0, [r3, #0]
 8005b82:	7afb      	ldrb	r3, [r7, #11]
 8005b84:	b29a      	uxth	r2, r3
 8005b86:	7abb      	ldrb	r3, [r7, #10]
 8005b88:	b29b      	uxth	r3, r3
 8005b8a:	2164      	movs	r1, #100	; 0x64
 8005b8c:	9102      	str	r1, [sp, #8]
 8005b8e:	9301      	str	r3, [sp, #4]
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	9300      	str	r3, [sp, #0]
 8005b94:	2301      	movs	r3, #1
 8005b96:	21ec      	movs	r1, #236	; 0xec
 8005b98:	f001 fd08 	bl	80075ac <HAL_I2C_Mem_Read>
 8005b9c:	4603      	mov	r3, r0
}
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	3710      	adds	r7, #16
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	bd80      	pop	{r7, pc}

08005ba6 <BMP388_WriteBytes>:
 *
 *  @return Status of execution
 *  @retval = HAL_OK 		-> Success
 *  @retval != HAL_ERROR 	-> Failure Info
 */
HAL_StatusTypeDef BMP388_WriteBytes(BMP388_HandleTypeDef *bmp, BMP388_regs reg_addr, uint8_t *buff, uint8_t len){
 8005ba6:	b580      	push	{r7, lr}
 8005ba8:	b088      	sub	sp, #32
 8005baa:	af04      	add	r7, sp, #16
 8005bac:	60f8      	str	r0, [r7, #12]
 8005bae:	607a      	str	r2, [r7, #4]
 8005bb0:	461a      	mov	r2, r3
 8005bb2:	460b      	mov	r3, r1
 8005bb4:	72fb      	strb	r3, [r7, #11]
 8005bb6:	4613      	mov	r3, r2
 8005bb8:	72bb      	strb	r3, [r7, #10]
	return HAL_I2C_Mem_Write(bmp->_hi2c, BMP388_ADDR << 1, reg_addr, I2C_MEMADD_SIZE_8BIT, buff, len, 100);
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	6818      	ldr	r0, [r3, #0]
 8005bbe:	7afb      	ldrb	r3, [r7, #11]
 8005bc0:	b29a      	uxth	r2, r3
 8005bc2:	7abb      	ldrb	r3, [r7, #10]
 8005bc4:	b29b      	uxth	r3, r3
 8005bc6:	2164      	movs	r1, #100	; 0x64
 8005bc8:	9102      	str	r1, [sp, #8]
 8005bca:	9301      	str	r3, [sp, #4]
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	9300      	str	r3, [sp, #0]
 8005bd0:	2301      	movs	r3, #1
 8005bd2:	21ec      	movs	r1, #236	; 0xec
 8005bd4:	f001 fbf0 	bl	80073b8 <HAL_I2C_Mem_Write>
 8005bd8:	4603      	mov	r3, r0
}
 8005bda:	4618      	mov	r0, r3
 8005bdc:	3710      	adds	r7, #16
 8005bde:	46bd      	mov	sp, r7
 8005be0:	bd80      	pop	{r7, pc}

08005be2 <set_duty_Oneshot42>:
#define P_yaw 5
#define D_yaw 0



void set_duty_Oneshot42(TIM_HandleTypeDef* const pwmHandle1, uint16_t ref_1, uint16_t ref_2, uint16_t ref_3, uint16_t ref_4){
 8005be2:	b480      	push	{r7}
 8005be4:	b085      	sub	sp, #20
 8005be6:	af00      	add	r7, sp, #0
 8005be8:	60f8      	str	r0, [r7, #12]
 8005bea:	4608      	mov	r0, r1
 8005bec:	4611      	mov	r1, r2
 8005bee:	461a      	mov	r2, r3
 8005bf0:	4603      	mov	r3, r0
 8005bf2:	817b      	strh	r3, [r7, #10]
 8005bf4:	460b      	mov	r3, r1
 8005bf6:	813b      	strh	r3, [r7, #8]
 8005bf8:	4613      	mov	r3, r2
 8005bfa:	80fb      	strh	r3, [r7, #6]
	// Multishot42 12 kHz PSC 7-1, ARR 1000-1 -> 1000 = 100%, 500 = stop, ?0 = -100%?
	pwmHandle1 -> Instance -> CCR1 = ref_1;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	897a      	ldrh	r2, [r7, #10]
 8005c02:	635a      	str	r2, [r3, #52]	; 0x34
	pwmHandle1 -> Instance -> CCR2 = ref_2;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	893a      	ldrh	r2, [r7, #8]
 8005c0a:	639a      	str	r2, [r3, #56]	; 0x38
	pwmHandle1 -> Instance -> CCR3 = ref_3;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	88fa      	ldrh	r2, [r7, #6]
 8005c12:	63da      	str	r2, [r3, #60]	; 0x3c
	pwmHandle1 -> Instance -> CCR4 = ref_4;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	8b3a      	ldrh	r2, [r7, #24]
 8005c1a:	641a      	str	r2, [r3, #64]	; 0x40
}
 8005c1c:	bf00      	nop
 8005c1e:	3714      	adds	r7, #20
 8005c20:	46bd      	mov	sp, r7
 8005c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c26:	4770      	bx	lr

08005c28 <CRSFtoDuty>:

float CRSFtoDuty(uint16_t CRSF_val){
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b084      	sub	sp, #16
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	4603      	mov	r3, r0
 8005c30:	80fb      	strh	r3, [r7, #6]
	float Duty;
	Duty = 550+((float)(CRSF_val-172))/4.1; // minimum duty 55% max duty 95%
 8005c32:	88fb      	ldrh	r3, [r7, #6]
 8005c34:	3bac      	subs	r3, #172	; 0xac
 8005c36:	ee07 3a90 	vmov	s15, r3
 8005c3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005c3e:	ee17 0a90 	vmov	r0, s15
 8005c42:	f7fa fc81 	bl	8000548 <__aeabi_f2d>
 8005c46:	a311      	add	r3, pc, #68	; (adr r3, 8005c8c <CRSFtoDuty+0x64>)
 8005c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c4c:	f7fa fdfe 	bl	800084c <__aeabi_ddiv>
 8005c50:	4602      	mov	r2, r0
 8005c52:	460b      	mov	r3, r1
 8005c54:	4610      	mov	r0, r2
 8005c56:	4619      	mov	r1, r3
 8005c58:	f04f 0200 	mov.w	r2, #0
 8005c5c:	4b0a      	ldr	r3, [pc, #40]	; (8005c88 <CRSFtoDuty+0x60>)
 8005c5e:	f7fa fb15 	bl	800028c <__adddf3>
 8005c62:	4602      	mov	r2, r0
 8005c64:	460b      	mov	r3, r1
 8005c66:	4610      	mov	r0, r2
 8005c68:	4619      	mov	r1, r3
 8005c6a:	f7fa ffbd 	bl	8000be8 <__aeabi_d2f>
 8005c6e:	4603      	mov	r3, r0
 8005c70:	60fb      	str	r3, [r7, #12]
	return Duty;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	ee07 3a90 	vmov	s15, r3
}
 8005c78:	eeb0 0a67 	vmov.f32	s0, s15
 8005c7c:	3710      	adds	r7, #16
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	bd80      	pop	{r7, pc}
 8005c82:	bf00      	nop
 8005c84:	f3af 8000 	nop.w
 8005c88:	40813000 	.word	0x40813000
 8005c8c:	66666666 	.word	0x66666666
 8005c90:	40106666 	.word	0x40106666

08005c94 <CRSFtoPitch>:

float CRSFtoPitch(uint16_t CRSF_val){
 8005c94:	b480      	push	{r7}
 8005c96:	b085      	sub	sp, #20
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	4603      	mov	r3, r0
 8005c9c:	80fb      	strh	r3, [r7, #6]
	float pitch;
	pitch = ((float)(CRSF_val-992))/820.0;
 8005c9e:	88fb      	ldrh	r3, [r7, #6]
 8005ca0:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 8005ca4:	ee07 3a90 	vmov	s15, r3
 8005ca8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005cac:	eddf 6a07 	vldr	s13, [pc, #28]	; 8005ccc <CRSFtoPitch+0x38>
 8005cb0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005cb4:	edc7 7a03 	vstr	s15, [r7, #12]
	return pitch;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	ee07 3a90 	vmov	s15, r3
}
 8005cbe:	eeb0 0a67 	vmov.f32	s0, s15
 8005cc2:	3714      	adds	r7, #20
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cca:	4770      	bx	lr
 8005ccc:	444d0000 	.word	0x444d0000

08005cd0 <CRSFtoRoll>:

float CRSFtoRoll(uint16_t CRSF_val){
 8005cd0:	b480      	push	{r7}
 8005cd2:	b085      	sub	sp, #20
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	4603      	mov	r3, r0
 8005cd8:	80fb      	strh	r3, [r7, #6]
	float roll;
	roll = ((float)(CRSF_val-992))/820.0;
 8005cda:	88fb      	ldrh	r3, [r7, #6]
 8005cdc:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 8005ce0:	ee07 3a90 	vmov	s15, r3
 8005ce4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005ce8:	eddf 6a07 	vldr	s13, [pc, #28]	; 8005d08 <CRSFtoRoll+0x38>
 8005cec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005cf0:	edc7 7a03 	vstr	s15, [r7, #12]
	return roll;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	ee07 3a90 	vmov	s15, r3
}
 8005cfa:	eeb0 0a67 	vmov.f32	s0, s15
 8005cfe:	3714      	adds	r7, #20
 8005d00:	46bd      	mov	sp, r7
 8005d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d06:	4770      	bx	lr
 8005d08:	444d0000 	.word	0x444d0000

08005d0c <CRSFtoYaw>:

float CRSFtoYaw(uint16_t CRSF_val){
 8005d0c:	b480      	push	{r7}
 8005d0e:	b085      	sub	sp, #20
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	4603      	mov	r3, r0
 8005d14:	80fb      	strh	r3, [r7, #6]
	float yaw;
	yaw = ((float)(CRSF_val-992))/820.0;
 8005d16:	88fb      	ldrh	r3, [r7, #6]
 8005d18:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 8005d1c:	ee07 3a90 	vmov	s15, r3
 8005d20:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005d24:	eddf 6a07 	vldr	s13, [pc, #28]	; 8005d44 <CRSFtoYaw+0x38>
 8005d28:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005d2c:	edc7 7a03 	vstr	s15, [r7, #12]
	return yaw;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	ee07 3a90 	vmov	s15, r3
}
 8005d36:	eeb0 0a67 	vmov.f32	s0, s15
 8005d3a:	3714      	adds	r7, #20
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d42:	4770      	bx	lr
 8005d44:	444d0000 	.word	0x444d0000

08005d48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005d4c:	4b0e      	ldr	r3, [pc, #56]	; (8005d88 <HAL_Init+0x40>)
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4a0d      	ldr	r2, [pc, #52]	; (8005d88 <HAL_Init+0x40>)
 8005d52:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005d56:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005d58:	4b0b      	ldr	r3, [pc, #44]	; (8005d88 <HAL_Init+0x40>)
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4a0a      	ldr	r2, [pc, #40]	; (8005d88 <HAL_Init+0x40>)
 8005d5e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005d62:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005d64:	4b08      	ldr	r3, [pc, #32]	; (8005d88 <HAL_Init+0x40>)
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	4a07      	ldr	r2, [pc, #28]	; (8005d88 <HAL_Init+0x40>)
 8005d6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d6e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005d70:	2003      	movs	r0, #3
 8005d72:	f000 fbb1 	bl	80064d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005d76:	200f      	movs	r0, #15
 8005d78:	f000 f808 	bl	8005d8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005d7c:	f7fd fbe4 	bl	8003548 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005d80:	2300      	movs	r3, #0
}
 8005d82:	4618      	mov	r0, r3
 8005d84:	bd80      	pop	{r7, pc}
 8005d86:	bf00      	nop
 8005d88:	40023c00 	.word	0x40023c00

08005d8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b082      	sub	sp, #8
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005d94:	4b12      	ldr	r3, [pc, #72]	; (8005de0 <HAL_InitTick+0x54>)
 8005d96:	681a      	ldr	r2, [r3, #0]
 8005d98:	4b12      	ldr	r3, [pc, #72]	; (8005de4 <HAL_InitTick+0x58>)
 8005d9a:	781b      	ldrb	r3, [r3, #0]
 8005d9c:	4619      	mov	r1, r3
 8005d9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005da2:	fbb3 f3f1 	udiv	r3, r3, r1
 8005da6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005daa:	4618      	mov	r0, r3
 8005dac:	f000 fbc9 	bl	8006542 <HAL_SYSTICK_Config>
 8005db0:	4603      	mov	r3, r0
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d001      	beq.n	8005dba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005db6:	2301      	movs	r3, #1
 8005db8:	e00e      	b.n	8005dd8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2b0f      	cmp	r3, #15
 8005dbe:	d80a      	bhi.n	8005dd6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	6879      	ldr	r1, [r7, #4]
 8005dc4:	f04f 30ff 	mov.w	r0, #4294967295
 8005dc8:	f000 fb91 	bl	80064ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005dcc:	4a06      	ldr	r2, [pc, #24]	; (8005de8 <HAL_InitTick+0x5c>)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	e000      	b.n	8005dd8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005dd6:	2301      	movs	r3, #1
}
 8005dd8:	4618      	mov	r0, r3
 8005dda:	3708      	adds	r7, #8
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	bd80      	pop	{r7, pc}
 8005de0:	2000000c 	.word	0x2000000c
 8005de4:	20000014 	.word	0x20000014
 8005de8:	20000010 	.word	0x20000010

08005dec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005dec:	b480      	push	{r7}
 8005dee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005df0:	4b06      	ldr	r3, [pc, #24]	; (8005e0c <HAL_IncTick+0x20>)
 8005df2:	781b      	ldrb	r3, [r3, #0]
 8005df4:	461a      	mov	r2, r3
 8005df6:	4b06      	ldr	r3, [pc, #24]	; (8005e10 <HAL_IncTick+0x24>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	4413      	add	r3, r2
 8005dfc:	4a04      	ldr	r2, [pc, #16]	; (8005e10 <HAL_IncTick+0x24>)
 8005dfe:	6013      	str	r3, [r2, #0]
}
 8005e00:	bf00      	nop
 8005e02:	46bd      	mov	sp, r7
 8005e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e08:	4770      	bx	lr
 8005e0a:	bf00      	nop
 8005e0c:	20000014 	.word	0x20000014
 8005e10:	20002b30 	.word	0x20002b30

08005e14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005e14:	b480      	push	{r7}
 8005e16:	af00      	add	r7, sp, #0
  return uwTick;
 8005e18:	4b03      	ldr	r3, [pc, #12]	; (8005e28 <HAL_GetTick+0x14>)
 8005e1a:	681b      	ldr	r3, [r3, #0]
}
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e24:	4770      	bx	lr
 8005e26:	bf00      	nop
 8005e28:	20002b30 	.word	0x20002b30

08005e2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b084      	sub	sp, #16
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005e34:	f7ff ffee 	bl	8005e14 <HAL_GetTick>
 8005e38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e44:	d005      	beq.n	8005e52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005e46:	4b0a      	ldr	r3, [pc, #40]	; (8005e70 <HAL_Delay+0x44>)
 8005e48:	781b      	ldrb	r3, [r3, #0]
 8005e4a:	461a      	mov	r2, r3
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	4413      	add	r3, r2
 8005e50:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005e52:	bf00      	nop
 8005e54:	f7ff ffde 	bl	8005e14 <HAL_GetTick>
 8005e58:	4602      	mov	r2, r0
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	1ad3      	subs	r3, r2, r3
 8005e5e:	68fa      	ldr	r2, [r7, #12]
 8005e60:	429a      	cmp	r2, r3
 8005e62:	d8f7      	bhi.n	8005e54 <HAL_Delay+0x28>
  {
  }
}
 8005e64:	bf00      	nop
 8005e66:	bf00      	nop
 8005e68:	3710      	adds	r7, #16
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bd80      	pop	{r7, pc}
 8005e6e:	bf00      	nop
 8005e70:	20000014 	.word	0x20000014

08005e74 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b084      	sub	sp, #16
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d101      	bne.n	8005e8a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8005e86:	2301      	movs	r3, #1
 8005e88:	e033      	b.n	8005ef2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d109      	bne.n	8005ea6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005e92:	6878      	ldr	r0, [r7, #4]
 8005e94:	f7fd fb84 	bl	80035a0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eaa:	f003 0310 	and.w	r3, r3, #16
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d118      	bne.n	8005ee4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eb6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005eba:	f023 0302 	bic.w	r3, r3, #2
 8005ebe:	f043 0202 	orr.w	r2, r3, #2
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8005ec6:	6878      	ldr	r0, [r7, #4]
 8005ec8:	f000 f93a 	bl	8006140 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2200      	movs	r2, #0
 8005ed0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ed6:	f023 0303 	bic.w	r3, r3, #3
 8005eda:	f043 0201 	orr.w	r2, r3, #1
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	641a      	str	r2, [r3, #64]	; 0x40
 8005ee2:	e001      	b.n	8005ee8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005ee4:	2301      	movs	r3, #1
 8005ee6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2200      	movs	r2, #0
 8005eec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005ef0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	3710      	adds	r7, #16
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	bd80      	pop	{r7, pc}
	...

08005efc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005efc:	b480      	push	{r7}
 8005efe:	b085      	sub	sp, #20
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
 8005f04:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8005f06:	2300      	movs	r3, #0
 8005f08:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f10:	2b01      	cmp	r3, #1
 8005f12:	d101      	bne.n	8005f18 <HAL_ADC_ConfigChannel+0x1c>
 8005f14:	2302      	movs	r3, #2
 8005f16:	e105      	b.n	8006124 <HAL_ADC_ConfigChannel+0x228>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2201      	movs	r2, #1
 8005f1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	2b09      	cmp	r3, #9
 8005f26:	d925      	bls.n	8005f74 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	68d9      	ldr	r1, [r3, #12]
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	b29b      	uxth	r3, r3
 8005f34:	461a      	mov	r2, r3
 8005f36:	4613      	mov	r3, r2
 8005f38:	005b      	lsls	r3, r3, #1
 8005f3a:	4413      	add	r3, r2
 8005f3c:	3b1e      	subs	r3, #30
 8005f3e:	2207      	movs	r2, #7
 8005f40:	fa02 f303 	lsl.w	r3, r2, r3
 8005f44:	43da      	mvns	r2, r3
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	400a      	ands	r2, r1
 8005f4c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	68d9      	ldr	r1, [r3, #12]
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	689a      	ldr	r2, [r3, #8]
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	b29b      	uxth	r3, r3
 8005f5e:	4618      	mov	r0, r3
 8005f60:	4603      	mov	r3, r0
 8005f62:	005b      	lsls	r3, r3, #1
 8005f64:	4403      	add	r3, r0
 8005f66:	3b1e      	subs	r3, #30
 8005f68:	409a      	lsls	r2, r3
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	430a      	orrs	r2, r1
 8005f70:	60da      	str	r2, [r3, #12]
 8005f72:	e022      	b.n	8005fba <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	6919      	ldr	r1, [r3, #16]
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	b29b      	uxth	r3, r3
 8005f80:	461a      	mov	r2, r3
 8005f82:	4613      	mov	r3, r2
 8005f84:	005b      	lsls	r3, r3, #1
 8005f86:	4413      	add	r3, r2
 8005f88:	2207      	movs	r2, #7
 8005f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8005f8e:	43da      	mvns	r2, r3
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	400a      	ands	r2, r1
 8005f96:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	6919      	ldr	r1, [r3, #16]
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	689a      	ldr	r2, [r3, #8]
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	b29b      	uxth	r3, r3
 8005fa8:	4618      	mov	r0, r3
 8005faa:	4603      	mov	r3, r0
 8005fac:	005b      	lsls	r3, r3, #1
 8005fae:	4403      	add	r3, r0
 8005fb0:	409a      	lsls	r2, r3
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	430a      	orrs	r2, r1
 8005fb8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	685b      	ldr	r3, [r3, #4]
 8005fbe:	2b06      	cmp	r3, #6
 8005fc0:	d824      	bhi.n	800600c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	685a      	ldr	r2, [r3, #4]
 8005fcc:	4613      	mov	r3, r2
 8005fce:	009b      	lsls	r3, r3, #2
 8005fd0:	4413      	add	r3, r2
 8005fd2:	3b05      	subs	r3, #5
 8005fd4:	221f      	movs	r2, #31
 8005fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8005fda:	43da      	mvns	r2, r3
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	400a      	ands	r2, r1
 8005fe2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	b29b      	uxth	r3, r3
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	685a      	ldr	r2, [r3, #4]
 8005ff6:	4613      	mov	r3, r2
 8005ff8:	009b      	lsls	r3, r3, #2
 8005ffa:	4413      	add	r3, r2
 8005ffc:	3b05      	subs	r3, #5
 8005ffe:	fa00 f203 	lsl.w	r2, r0, r3
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	430a      	orrs	r2, r1
 8006008:	635a      	str	r2, [r3, #52]	; 0x34
 800600a:	e04c      	b.n	80060a6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	685b      	ldr	r3, [r3, #4]
 8006010:	2b0c      	cmp	r3, #12
 8006012:	d824      	bhi.n	800605e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	685a      	ldr	r2, [r3, #4]
 800601e:	4613      	mov	r3, r2
 8006020:	009b      	lsls	r3, r3, #2
 8006022:	4413      	add	r3, r2
 8006024:	3b23      	subs	r3, #35	; 0x23
 8006026:	221f      	movs	r2, #31
 8006028:	fa02 f303 	lsl.w	r3, r2, r3
 800602c:	43da      	mvns	r2, r3
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	400a      	ands	r2, r1
 8006034:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	b29b      	uxth	r3, r3
 8006042:	4618      	mov	r0, r3
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	685a      	ldr	r2, [r3, #4]
 8006048:	4613      	mov	r3, r2
 800604a:	009b      	lsls	r3, r3, #2
 800604c:	4413      	add	r3, r2
 800604e:	3b23      	subs	r3, #35	; 0x23
 8006050:	fa00 f203 	lsl.w	r2, r0, r3
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	430a      	orrs	r2, r1
 800605a:	631a      	str	r2, [r3, #48]	; 0x30
 800605c:	e023      	b.n	80060a6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	685a      	ldr	r2, [r3, #4]
 8006068:	4613      	mov	r3, r2
 800606a:	009b      	lsls	r3, r3, #2
 800606c:	4413      	add	r3, r2
 800606e:	3b41      	subs	r3, #65	; 0x41
 8006070:	221f      	movs	r2, #31
 8006072:	fa02 f303 	lsl.w	r3, r2, r3
 8006076:	43da      	mvns	r2, r3
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	400a      	ands	r2, r1
 800607e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	b29b      	uxth	r3, r3
 800608c:	4618      	mov	r0, r3
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	685a      	ldr	r2, [r3, #4]
 8006092:	4613      	mov	r3, r2
 8006094:	009b      	lsls	r3, r3, #2
 8006096:	4413      	add	r3, r2
 8006098:	3b41      	subs	r3, #65	; 0x41
 800609a:	fa00 f203 	lsl.w	r2, r0, r3
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	430a      	orrs	r2, r1
 80060a4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80060a6:	4b22      	ldr	r3, [pc, #136]	; (8006130 <HAL_ADC_ConfigChannel+0x234>)
 80060a8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	4a21      	ldr	r2, [pc, #132]	; (8006134 <HAL_ADC_ConfigChannel+0x238>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d109      	bne.n	80060c8 <HAL_ADC_ConfigChannel+0x1cc>
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	2b12      	cmp	r3, #18
 80060ba:	d105      	bne.n	80060c8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	685b      	ldr	r3, [r3, #4]
 80060c0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	4a19      	ldr	r2, [pc, #100]	; (8006134 <HAL_ADC_ConfigChannel+0x238>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d123      	bne.n	800611a <HAL_ADC_ConfigChannel+0x21e>
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	2b10      	cmp	r3, #16
 80060d8:	d003      	beq.n	80060e2 <HAL_ADC_ConfigChannel+0x1e6>
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	2b11      	cmp	r3, #17
 80060e0:	d11b      	bne.n	800611a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	685b      	ldr	r3, [r3, #4]
 80060e6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	2b10      	cmp	r3, #16
 80060f4:	d111      	bne.n	800611a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80060f6:	4b10      	ldr	r3, [pc, #64]	; (8006138 <HAL_ADC_ConfigChannel+0x23c>)
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	4a10      	ldr	r2, [pc, #64]	; (800613c <HAL_ADC_ConfigChannel+0x240>)
 80060fc:	fba2 2303 	umull	r2, r3, r2, r3
 8006100:	0c9a      	lsrs	r2, r3, #18
 8006102:	4613      	mov	r3, r2
 8006104:	009b      	lsls	r3, r3, #2
 8006106:	4413      	add	r3, r2
 8006108:	005b      	lsls	r3, r3, #1
 800610a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800610c:	e002      	b.n	8006114 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800610e:	68bb      	ldr	r3, [r7, #8]
 8006110:	3b01      	subs	r3, #1
 8006112:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006114:	68bb      	ldr	r3, [r7, #8]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d1f9      	bne.n	800610e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2200      	movs	r2, #0
 800611e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8006122:	2300      	movs	r3, #0
}
 8006124:	4618      	mov	r0, r3
 8006126:	3714      	adds	r7, #20
 8006128:	46bd      	mov	sp, r7
 800612a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612e:	4770      	bx	lr
 8006130:	40012300 	.word	0x40012300
 8006134:	40012000 	.word	0x40012000
 8006138:	2000000c 	.word	0x2000000c
 800613c:	431bde83 	.word	0x431bde83

08006140 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006140:	b480      	push	{r7}
 8006142:	b085      	sub	sp, #20
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006148:	4b79      	ldr	r3, [pc, #484]	; (8006330 <ADC_Init+0x1f0>)
 800614a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	685b      	ldr	r3, [r3, #4]
 8006150:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	685a      	ldr	r2, [r3, #4]
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	685b      	ldr	r3, [r3, #4]
 8006160:	431a      	orrs	r2, r3
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	685a      	ldr	r2, [r3, #4]
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006174:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	6859      	ldr	r1, [r3, #4]
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	691b      	ldr	r3, [r3, #16]
 8006180:	021a      	lsls	r2, r3, #8
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	430a      	orrs	r2, r1
 8006188:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	685a      	ldr	r2, [r3, #4]
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8006198:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	6859      	ldr	r1, [r3, #4]
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	689a      	ldr	r2, [r3, #8]
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	430a      	orrs	r2, r1
 80061aa:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	689a      	ldr	r2, [r3, #8]
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80061ba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	6899      	ldr	r1, [r3, #8]
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	68da      	ldr	r2, [r3, #12]
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	430a      	orrs	r2, r1
 80061cc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061d2:	4a58      	ldr	r2, [pc, #352]	; (8006334 <ADC_Init+0x1f4>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d022      	beq.n	800621e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	689a      	ldr	r2, [r3, #8]
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80061e6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	6899      	ldr	r1, [r3, #8]
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	430a      	orrs	r2, r1
 80061f8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	689a      	ldr	r2, [r3, #8]
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006208:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	6899      	ldr	r1, [r3, #8]
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	430a      	orrs	r2, r1
 800621a:	609a      	str	r2, [r3, #8]
 800621c:	e00f      	b.n	800623e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	689a      	ldr	r2, [r3, #8]
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800622c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	689a      	ldr	r2, [r3, #8]
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800623c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	689a      	ldr	r2, [r3, #8]
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f022 0202 	bic.w	r2, r2, #2
 800624c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	6899      	ldr	r1, [r3, #8]
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	7e1b      	ldrb	r3, [r3, #24]
 8006258:	005a      	lsls	r2, r3, #1
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	430a      	orrs	r2, r1
 8006260:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d01b      	beq.n	80062a4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	685a      	ldr	r2, [r3, #4]
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800627a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	685a      	ldr	r2, [r3, #4]
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800628a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	6859      	ldr	r1, [r3, #4]
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006296:	3b01      	subs	r3, #1
 8006298:	035a      	lsls	r2, r3, #13
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	430a      	orrs	r2, r1
 80062a0:	605a      	str	r2, [r3, #4]
 80062a2:	e007      	b.n	80062b4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	685a      	ldr	r2, [r3, #4]
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80062b2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80062c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	69db      	ldr	r3, [r3, #28]
 80062ce:	3b01      	subs	r3, #1
 80062d0:	051a      	lsls	r2, r3, #20
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	430a      	orrs	r2, r1
 80062d8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	689a      	ldr	r2, [r3, #8]
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80062e8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	6899      	ldr	r1, [r3, #8]
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80062f6:	025a      	lsls	r2, r3, #9
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	430a      	orrs	r2, r1
 80062fe:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	689a      	ldr	r2, [r3, #8]
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800630e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	6899      	ldr	r1, [r3, #8]
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	695b      	ldr	r3, [r3, #20]
 800631a:	029a      	lsls	r2, r3, #10
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	430a      	orrs	r2, r1
 8006322:	609a      	str	r2, [r3, #8]
}
 8006324:	bf00      	nop
 8006326:	3714      	adds	r7, #20
 8006328:	46bd      	mov	sp, r7
 800632a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632e:	4770      	bx	lr
 8006330:	40012300 	.word	0x40012300
 8006334:	0f000001 	.word	0x0f000001

08006338 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006338:	b480      	push	{r7}
 800633a:	b085      	sub	sp, #20
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	f003 0307 	and.w	r3, r3, #7
 8006346:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006348:	4b0c      	ldr	r3, [pc, #48]	; (800637c <__NVIC_SetPriorityGrouping+0x44>)
 800634a:	68db      	ldr	r3, [r3, #12]
 800634c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800634e:	68ba      	ldr	r2, [r7, #8]
 8006350:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006354:	4013      	ands	r3, r2
 8006356:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800635c:	68bb      	ldr	r3, [r7, #8]
 800635e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006360:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006364:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006368:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800636a:	4a04      	ldr	r2, [pc, #16]	; (800637c <__NVIC_SetPriorityGrouping+0x44>)
 800636c:	68bb      	ldr	r3, [r7, #8]
 800636e:	60d3      	str	r3, [r2, #12]
}
 8006370:	bf00      	nop
 8006372:	3714      	adds	r7, #20
 8006374:	46bd      	mov	sp, r7
 8006376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637a:	4770      	bx	lr
 800637c:	e000ed00 	.word	0xe000ed00

08006380 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006380:	b480      	push	{r7}
 8006382:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006384:	4b04      	ldr	r3, [pc, #16]	; (8006398 <__NVIC_GetPriorityGrouping+0x18>)
 8006386:	68db      	ldr	r3, [r3, #12]
 8006388:	0a1b      	lsrs	r3, r3, #8
 800638a:	f003 0307 	and.w	r3, r3, #7
}
 800638e:	4618      	mov	r0, r3
 8006390:	46bd      	mov	sp, r7
 8006392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006396:	4770      	bx	lr
 8006398:	e000ed00 	.word	0xe000ed00

0800639c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800639c:	b480      	push	{r7}
 800639e:	b083      	sub	sp, #12
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	4603      	mov	r3, r0
 80063a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80063a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	db0b      	blt.n	80063c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80063ae:	79fb      	ldrb	r3, [r7, #7]
 80063b0:	f003 021f 	and.w	r2, r3, #31
 80063b4:	4907      	ldr	r1, [pc, #28]	; (80063d4 <__NVIC_EnableIRQ+0x38>)
 80063b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80063ba:	095b      	lsrs	r3, r3, #5
 80063bc:	2001      	movs	r0, #1
 80063be:	fa00 f202 	lsl.w	r2, r0, r2
 80063c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80063c6:	bf00      	nop
 80063c8:	370c      	adds	r7, #12
 80063ca:	46bd      	mov	sp, r7
 80063cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d0:	4770      	bx	lr
 80063d2:	bf00      	nop
 80063d4:	e000e100 	.word	0xe000e100

080063d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80063d8:	b480      	push	{r7}
 80063da:	b083      	sub	sp, #12
 80063dc:	af00      	add	r7, sp, #0
 80063de:	4603      	mov	r3, r0
 80063e0:	6039      	str	r1, [r7, #0]
 80063e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80063e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	db0a      	blt.n	8006402 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	b2da      	uxtb	r2, r3
 80063f0:	490c      	ldr	r1, [pc, #48]	; (8006424 <__NVIC_SetPriority+0x4c>)
 80063f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80063f6:	0112      	lsls	r2, r2, #4
 80063f8:	b2d2      	uxtb	r2, r2
 80063fa:	440b      	add	r3, r1
 80063fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006400:	e00a      	b.n	8006418 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	b2da      	uxtb	r2, r3
 8006406:	4908      	ldr	r1, [pc, #32]	; (8006428 <__NVIC_SetPriority+0x50>)
 8006408:	79fb      	ldrb	r3, [r7, #7]
 800640a:	f003 030f 	and.w	r3, r3, #15
 800640e:	3b04      	subs	r3, #4
 8006410:	0112      	lsls	r2, r2, #4
 8006412:	b2d2      	uxtb	r2, r2
 8006414:	440b      	add	r3, r1
 8006416:	761a      	strb	r2, [r3, #24]
}
 8006418:	bf00      	nop
 800641a:	370c      	adds	r7, #12
 800641c:	46bd      	mov	sp, r7
 800641e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006422:	4770      	bx	lr
 8006424:	e000e100 	.word	0xe000e100
 8006428:	e000ed00 	.word	0xe000ed00

0800642c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800642c:	b480      	push	{r7}
 800642e:	b089      	sub	sp, #36	; 0x24
 8006430:	af00      	add	r7, sp, #0
 8006432:	60f8      	str	r0, [r7, #12]
 8006434:	60b9      	str	r1, [r7, #8]
 8006436:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	f003 0307 	and.w	r3, r3, #7
 800643e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006440:	69fb      	ldr	r3, [r7, #28]
 8006442:	f1c3 0307 	rsb	r3, r3, #7
 8006446:	2b04      	cmp	r3, #4
 8006448:	bf28      	it	cs
 800644a:	2304      	movcs	r3, #4
 800644c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800644e:	69fb      	ldr	r3, [r7, #28]
 8006450:	3304      	adds	r3, #4
 8006452:	2b06      	cmp	r3, #6
 8006454:	d902      	bls.n	800645c <NVIC_EncodePriority+0x30>
 8006456:	69fb      	ldr	r3, [r7, #28]
 8006458:	3b03      	subs	r3, #3
 800645a:	e000      	b.n	800645e <NVIC_EncodePriority+0x32>
 800645c:	2300      	movs	r3, #0
 800645e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006460:	f04f 32ff 	mov.w	r2, #4294967295
 8006464:	69bb      	ldr	r3, [r7, #24]
 8006466:	fa02 f303 	lsl.w	r3, r2, r3
 800646a:	43da      	mvns	r2, r3
 800646c:	68bb      	ldr	r3, [r7, #8]
 800646e:	401a      	ands	r2, r3
 8006470:	697b      	ldr	r3, [r7, #20]
 8006472:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006474:	f04f 31ff 	mov.w	r1, #4294967295
 8006478:	697b      	ldr	r3, [r7, #20]
 800647a:	fa01 f303 	lsl.w	r3, r1, r3
 800647e:	43d9      	mvns	r1, r3
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006484:	4313      	orrs	r3, r2
         );
}
 8006486:	4618      	mov	r0, r3
 8006488:	3724      	adds	r7, #36	; 0x24
 800648a:	46bd      	mov	sp, r7
 800648c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006490:	4770      	bx	lr
	...

08006494 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b082      	sub	sp, #8
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	3b01      	subs	r3, #1
 80064a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80064a4:	d301      	bcc.n	80064aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80064a6:	2301      	movs	r3, #1
 80064a8:	e00f      	b.n	80064ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80064aa:	4a0a      	ldr	r2, [pc, #40]	; (80064d4 <SysTick_Config+0x40>)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	3b01      	subs	r3, #1
 80064b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80064b2:	210f      	movs	r1, #15
 80064b4:	f04f 30ff 	mov.w	r0, #4294967295
 80064b8:	f7ff ff8e 	bl	80063d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80064bc:	4b05      	ldr	r3, [pc, #20]	; (80064d4 <SysTick_Config+0x40>)
 80064be:	2200      	movs	r2, #0
 80064c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80064c2:	4b04      	ldr	r3, [pc, #16]	; (80064d4 <SysTick_Config+0x40>)
 80064c4:	2207      	movs	r2, #7
 80064c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80064c8:	2300      	movs	r3, #0
}
 80064ca:	4618      	mov	r0, r3
 80064cc:	3708      	adds	r7, #8
 80064ce:	46bd      	mov	sp, r7
 80064d0:	bd80      	pop	{r7, pc}
 80064d2:	bf00      	nop
 80064d4:	e000e010 	.word	0xe000e010

080064d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b082      	sub	sp, #8
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80064e0:	6878      	ldr	r0, [r7, #4]
 80064e2:	f7ff ff29 	bl	8006338 <__NVIC_SetPriorityGrouping>
}
 80064e6:	bf00      	nop
 80064e8:	3708      	adds	r7, #8
 80064ea:	46bd      	mov	sp, r7
 80064ec:	bd80      	pop	{r7, pc}

080064ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80064ee:	b580      	push	{r7, lr}
 80064f0:	b086      	sub	sp, #24
 80064f2:	af00      	add	r7, sp, #0
 80064f4:	4603      	mov	r3, r0
 80064f6:	60b9      	str	r1, [r7, #8]
 80064f8:	607a      	str	r2, [r7, #4]
 80064fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80064fc:	2300      	movs	r3, #0
 80064fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006500:	f7ff ff3e 	bl	8006380 <__NVIC_GetPriorityGrouping>
 8006504:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006506:	687a      	ldr	r2, [r7, #4]
 8006508:	68b9      	ldr	r1, [r7, #8]
 800650a:	6978      	ldr	r0, [r7, #20]
 800650c:	f7ff ff8e 	bl	800642c <NVIC_EncodePriority>
 8006510:	4602      	mov	r2, r0
 8006512:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006516:	4611      	mov	r1, r2
 8006518:	4618      	mov	r0, r3
 800651a:	f7ff ff5d 	bl	80063d8 <__NVIC_SetPriority>
}
 800651e:	bf00      	nop
 8006520:	3718      	adds	r7, #24
 8006522:	46bd      	mov	sp, r7
 8006524:	bd80      	pop	{r7, pc}

08006526 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006526:	b580      	push	{r7, lr}
 8006528:	b082      	sub	sp, #8
 800652a:	af00      	add	r7, sp, #0
 800652c:	4603      	mov	r3, r0
 800652e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006530:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006534:	4618      	mov	r0, r3
 8006536:	f7ff ff31 	bl	800639c <__NVIC_EnableIRQ>
}
 800653a:	bf00      	nop
 800653c:	3708      	adds	r7, #8
 800653e:	46bd      	mov	sp, r7
 8006540:	bd80      	pop	{r7, pc}

08006542 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006542:	b580      	push	{r7, lr}
 8006544:	b082      	sub	sp, #8
 8006546:	af00      	add	r7, sp, #0
 8006548:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800654a:	6878      	ldr	r0, [r7, #4]
 800654c:	f7ff ffa2 	bl	8006494 <SysTick_Config>
 8006550:	4603      	mov	r3, r0
}
 8006552:	4618      	mov	r0, r3
 8006554:	3708      	adds	r7, #8
 8006556:	46bd      	mov	sp, r7
 8006558:	bd80      	pop	{r7, pc}
	...

0800655c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b086      	sub	sp, #24
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006564:	2300      	movs	r3, #0
 8006566:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006568:	f7ff fc54 	bl	8005e14 <HAL_GetTick>
 800656c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d101      	bne.n	8006578 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006574:	2301      	movs	r3, #1
 8006576:	e099      	b.n	80066ac <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2202      	movs	r2, #2
 800657c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2200      	movs	r2, #0
 8006584:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	681a      	ldr	r2, [r3, #0]
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f022 0201 	bic.w	r2, r2, #1
 8006596:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006598:	e00f      	b.n	80065ba <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800659a:	f7ff fc3b 	bl	8005e14 <HAL_GetTick>
 800659e:	4602      	mov	r2, r0
 80065a0:	693b      	ldr	r3, [r7, #16]
 80065a2:	1ad3      	subs	r3, r2, r3
 80065a4:	2b05      	cmp	r3, #5
 80065a6:	d908      	bls.n	80065ba <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2220      	movs	r2, #32
 80065ac:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2203      	movs	r2, #3
 80065b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80065b6:	2303      	movs	r3, #3
 80065b8:	e078      	b.n	80066ac <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f003 0301 	and.w	r3, r3, #1
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d1e8      	bne.n	800659a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80065d0:	697a      	ldr	r2, [r7, #20]
 80065d2:	4b38      	ldr	r3, [pc, #224]	; (80066b4 <HAL_DMA_Init+0x158>)
 80065d4:	4013      	ands	r3, r2
 80065d6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	685a      	ldr	r2, [r3, #4]
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	689b      	ldr	r3, [r3, #8]
 80065e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80065e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	691b      	ldr	r3, [r3, #16]
 80065ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80065f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	699b      	ldr	r3, [r3, #24]
 80065f8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80065fe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6a1b      	ldr	r3, [r3, #32]
 8006604:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006606:	697a      	ldr	r2, [r7, #20]
 8006608:	4313      	orrs	r3, r2
 800660a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006610:	2b04      	cmp	r3, #4
 8006612:	d107      	bne.n	8006624 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800661c:	4313      	orrs	r3, r2
 800661e:	697a      	ldr	r2, [r7, #20]
 8006620:	4313      	orrs	r3, r2
 8006622:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	697a      	ldr	r2, [r7, #20]
 800662a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	695b      	ldr	r3, [r3, #20]
 8006632:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006634:	697b      	ldr	r3, [r7, #20]
 8006636:	f023 0307 	bic.w	r3, r3, #7
 800663a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006640:	697a      	ldr	r2, [r7, #20]
 8006642:	4313      	orrs	r3, r2
 8006644:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800664a:	2b04      	cmp	r3, #4
 800664c:	d117      	bne.n	800667e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006652:	697a      	ldr	r2, [r7, #20]
 8006654:	4313      	orrs	r3, r2
 8006656:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800665c:	2b00      	cmp	r3, #0
 800665e:	d00e      	beq.n	800667e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006660:	6878      	ldr	r0, [r7, #4]
 8006662:	f000 fb01 	bl	8006c68 <DMA_CheckFifoParam>
 8006666:	4603      	mov	r3, r0
 8006668:	2b00      	cmp	r3, #0
 800666a:	d008      	beq.n	800667e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2240      	movs	r2, #64	; 0x40
 8006670:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	2201      	movs	r2, #1
 8006676:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800667a:	2301      	movs	r3, #1
 800667c:	e016      	b.n	80066ac <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	697a      	ldr	r2, [r7, #20]
 8006684:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006686:	6878      	ldr	r0, [r7, #4]
 8006688:	f000 fab8 	bl	8006bfc <DMA_CalcBaseAndBitshift>
 800668c:	4603      	mov	r3, r0
 800668e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006694:	223f      	movs	r2, #63	; 0x3f
 8006696:	409a      	lsls	r2, r3
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2200      	movs	r2, #0
 80066a0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2201      	movs	r2, #1
 80066a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80066aa:	2300      	movs	r3, #0
}
 80066ac:	4618      	mov	r0, r3
 80066ae:	3718      	adds	r7, #24
 80066b0:	46bd      	mov	sp, r7
 80066b2:	bd80      	pop	{r7, pc}
 80066b4:	f010803f 	.word	0xf010803f

080066b8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	b086      	sub	sp, #24
 80066bc:	af00      	add	r7, sp, #0
 80066be:	60f8      	str	r0, [r7, #12]
 80066c0:	60b9      	str	r1, [r7, #8]
 80066c2:	607a      	str	r2, [r7, #4]
 80066c4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80066c6:	2300      	movs	r3, #0
 80066c8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066ce:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80066d6:	2b01      	cmp	r3, #1
 80066d8:	d101      	bne.n	80066de <HAL_DMA_Start_IT+0x26>
 80066da:	2302      	movs	r3, #2
 80066dc:	e040      	b.n	8006760 <HAL_DMA_Start_IT+0xa8>
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	2201      	movs	r2, #1
 80066e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80066ec:	b2db      	uxtb	r3, r3
 80066ee:	2b01      	cmp	r3, #1
 80066f0:	d12f      	bne.n	8006752 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	2202      	movs	r2, #2
 80066f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	2200      	movs	r2, #0
 80066fe:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	687a      	ldr	r2, [r7, #4]
 8006704:	68b9      	ldr	r1, [r7, #8]
 8006706:	68f8      	ldr	r0, [r7, #12]
 8006708:	f000 fa4a 	bl	8006ba0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006710:	223f      	movs	r2, #63	; 0x3f
 8006712:	409a      	lsls	r2, r3
 8006714:	693b      	ldr	r3, [r7, #16]
 8006716:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	681a      	ldr	r2, [r3, #0]
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f042 0216 	orr.w	r2, r2, #22
 8006726:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800672c:	2b00      	cmp	r3, #0
 800672e:	d007      	beq.n	8006740 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	681a      	ldr	r2, [r3, #0]
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f042 0208 	orr.w	r2, r2, #8
 800673e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	681a      	ldr	r2, [r3, #0]
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f042 0201 	orr.w	r2, r2, #1
 800674e:	601a      	str	r2, [r3, #0]
 8006750:	e005      	b.n	800675e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	2200      	movs	r2, #0
 8006756:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800675a:	2302      	movs	r3, #2
 800675c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800675e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006760:	4618      	mov	r0, r3
 8006762:	3718      	adds	r7, #24
 8006764:	46bd      	mov	sp, r7
 8006766:	bd80      	pop	{r7, pc}

08006768 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006768:	b580      	push	{r7, lr}
 800676a:	b084      	sub	sp, #16
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006774:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8006776:	f7ff fb4d 	bl	8005e14 <HAL_GetTick>
 800677a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006782:	b2db      	uxtb	r3, r3
 8006784:	2b02      	cmp	r3, #2
 8006786:	d008      	beq.n	800679a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2280      	movs	r2, #128	; 0x80
 800678c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	2200      	movs	r2, #0
 8006792:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8006796:	2301      	movs	r3, #1
 8006798:	e052      	b.n	8006840 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	681a      	ldr	r2, [r3, #0]
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f022 0216 	bic.w	r2, r2, #22
 80067a8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	695a      	ldr	r2, [r3, #20]
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80067b8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d103      	bne.n	80067ca <HAL_DMA_Abort+0x62>
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d007      	beq.n	80067da <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	681a      	ldr	r2, [r3, #0]
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f022 0208 	bic.w	r2, r2, #8
 80067d8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	681a      	ldr	r2, [r3, #0]
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f022 0201 	bic.w	r2, r2, #1
 80067e8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80067ea:	e013      	b.n	8006814 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80067ec:	f7ff fb12 	bl	8005e14 <HAL_GetTick>
 80067f0:	4602      	mov	r2, r0
 80067f2:	68bb      	ldr	r3, [r7, #8]
 80067f4:	1ad3      	subs	r3, r2, r3
 80067f6:	2b05      	cmp	r3, #5
 80067f8:	d90c      	bls.n	8006814 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2220      	movs	r2, #32
 80067fe:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2203      	movs	r2, #3
 8006804:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2200      	movs	r2, #0
 800680c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8006810:	2303      	movs	r3, #3
 8006812:	e015      	b.n	8006840 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f003 0301 	and.w	r3, r3, #1
 800681e:	2b00      	cmp	r3, #0
 8006820:	d1e4      	bne.n	80067ec <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006826:	223f      	movs	r2, #63	; 0x3f
 8006828:	409a      	lsls	r2, r3
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2201      	movs	r2, #1
 8006832:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2200      	movs	r2, #0
 800683a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800683e:	2300      	movs	r3, #0
}
 8006840:	4618      	mov	r0, r3
 8006842:	3710      	adds	r7, #16
 8006844:	46bd      	mov	sp, r7
 8006846:	bd80      	pop	{r7, pc}

08006848 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006848:	b480      	push	{r7}
 800684a:	b083      	sub	sp, #12
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006856:	b2db      	uxtb	r3, r3
 8006858:	2b02      	cmp	r3, #2
 800685a:	d004      	beq.n	8006866 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2280      	movs	r2, #128	; 0x80
 8006860:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006862:	2301      	movs	r3, #1
 8006864:	e00c      	b.n	8006880 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2205      	movs	r2, #5
 800686a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	681a      	ldr	r2, [r3, #0]
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f022 0201 	bic.w	r2, r2, #1
 800687c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800687e:	2300      	movs	r3, #0
}
 8006880:	4618      	mov	r0, r3
 8006882:	370c      	adds	r7, #12
 8006884:	46bd      	mov	sp, r7
 8006886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688a:	4770      	bx	lr

0800688c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800688c:	b580      	push	{r7, lr}
 800688e:	b086      	sub	sp, #24
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8006894:	2300      	movs	r3, #0
 8006896:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006898:	4b8e      	ldr	r3, [pc, #568]	; (8006ad4 <HAL_DMA_IRQHandler+0x248>)
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	4a8e      	ldr	r2, [pc, #568]	; (8006ad8 <HAL_DMA_IRQHandler+0x24c>)
 800689e:	fba2 2303 	umull	r2, r3, r2, r3
 80068a2:	0a9b      	lsrs	r3, r3, #10
 80068a4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068aa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80068ac:	693b      	ldr	r3, [r7, #16]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068b6:	2208      	movs	r2, #8
 80068b8:	409a      	lsls	r2, r3
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	4013      	ands	r3, r2
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d01a      	beq.n	80068f8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f003 0304 	and.w	r3, r3, #4
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d013      	beq.n	80068f8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	681a      	ldr	r2, [r3, #0]
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f022 0204 	bic.w	r2, r2, #4
 80068de:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068e4:	2208      	movs	r2, #8
 80068e6:	409a      	lsls	r2, r3
 80068e8:	693b      	ldr	r3, [r7, #16]
 80068ea:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068f0:	f043 0201 	orr.w	r2, r3, #1
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068fc:	2201      	movs	r2, #1
 80068fe:	409a      	lsls	r2, r3
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	4013      	ands	r3, r2
 8006904:	2b00      	cmp	r3, #0
 8006906:	d012      	beq.n	800692e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	695b      	ldr	r3, [r3, #20]
 800690e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006912:	2b00      	cmp	r3, #0
 8006914:	d00b      	beq.n	800692e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800691a:	2201      	movs	r2, #1
 800691c:	409a      	lsls	r2, r3
 800691e:	693b      	ldr	r3, [r7, #16]
 8006920:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006926:	f043 0202 	orr.w	r2, r3, #2
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006932:	2204      	movs	r2, #4
 8006934:	409a      	lsls	r2, r3
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	4013      	ands	r3, r2
 800693a:	2b00      	cmp	r3, #0
 800693c:	d012      	beq.n	8006964 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f003 0302 	and.w	r3, r3, #2
 8006948:	2b00      	cmp	r3, #0
 800694a:	d00b      	beq.n	8006964 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006950:	2204      	movs	r2, #4
 8006952:	409a      	lsls	r2, r3
 8006954:	693b      	ldr	r3, [r7, #16]
 8006956:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800695c:	f043 0204 	orr.w	r2, r3, #4
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006968:	2210      	movs	r2, #16
 800696a:	409a      	lsls	r2, r3
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	4013      	ands	r3, r2
 8006970:	2b00      	cmp	r3, #0
 8006972:	d043      	beq.n	80069fc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f003 0308 	and.w	r3, r3, #8
 800697e:	2b00      	cmp	r3, #0
 8006980:	d03c      	beq.n	80069fc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006986:	2210      	movs	r2, #16
 8006988:	409a      	lsls	r2, r3
 800698a:	693b      	ldr	r3, [r7, #16]
 800698c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006998:	2b00      	cmp	r3, #0
 800699a:	d018      	beq.n	80069ce <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d108      	bne.n	80069bc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d024      	beq.n	80069fc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069b6:	6878      	ldr	r0, [r7, #4]
 80069b8:	4798      	blx	r3
 80069ba:	e01f      	b.n	80069fc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d01b      	beq.n	80069fc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80069c8:	6878      	ldr	r0, [r7, #4]
 80069ca:	4798      	blx	r3
 80069cc:	e016      	b.n	80069fc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d107      	bne.n	80069ec <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	681a      	ldr	r2, [r3, #0]
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f022 0208 	bic.w	r2, r2, #8
 80069ea:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d003      	beq.n	80069fc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069f8:	6878      	ldr	r0, [r7, #4]
 80069fa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a00:	2220      	movs	r2, #32
 8006a02:	409a      	lsls	r2, r3
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	4013      	ands	r3, r2
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	f000 808f 	beq.w	8006b2c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f003 0310 	and.w	r3, r3, #16
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	f000 8087 	beq.w	8006b2c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a22:	2220      	movs	r2, #32
 8006a24:	409a      	lsls	r2, r3
 8006a26:	693b      	ldr	r3, [r7, #16]
 8006a28:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006a30:	b2db      	uxtb	r3, r3
 8006a32:	2b05      	cmp	r3, #5
 8006a34:	d136      	bne.n	8006aa4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	681a      	ldr	r2, [r3, #0]
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f022 0216 	bic.w	r2, r2, #22
 8006a44:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	695a      	ldr	r2, [r3, #20]
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006a54:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d103      	bne.n	8006a66 <HAL_DMA_IRQHandler+0x1da>
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d007      	beq.n	8006a76 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	681a      	ldr	r2, [r3, #0]
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f022 0208 	bic.w	r2, r2, #8
 8006a74:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a7a:	223f      	movs	r2, #63	; 0x3f
 8006a7c:	409a      	lsls	r2, r3
 8006a7e:	693b      	ldr	r3, [r7, #16]
 8006a80:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2201      	movs	r2, #1
 8006a86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d07e      	beq.n	8006b98 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a9e:	6878      	ldr	r0, [r7, #4]
 8006aa0:	4798      	blx	r3
        }
        return;
 8006aa2:	e079      	b.n	8006b98 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d01d      	beq.n	8006aee <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d10d      	bne.n	8006adc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d031      	beq.n	8006b2c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006acc:	6878      	ldr	r0, [r7, #4]
 8006ace:	4798      	blx	r3
 8006ad0:	e02c      	b.n	8006b2c <HAL_DMA_IRQHandler+0x2a0>
 8006ad2:	bf00      	nop
 8006ad4:	2000000c 	.word	0x2000000c
 8006ad8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d023      	beq.n	8006b2c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ae8:	6878      	ldr	r0, [r7, #4]
 8006aea:	4798      	blx	r3
 8006aec:	e01e      	b.n	8006b2c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d10f      	bne.n	8006b1c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	681a      	ldr	r2, [r3, #0]
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f022 0210 	bic.w	r2, r2, #16
 8006b0a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2201      	movs	r2, #1
 8006b10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2200      	movs	r2, #0
 8006b18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d003      	beq.n	8006b2c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b28:	6878      	ldr	r0, [r7, #4]
 8006b2a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d032      	beq.n	8006b9a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b38:	f003 0301 	and.w	r3, r3, #1
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d022      	beq.n	8006b86 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2205      	movs	r2, #5
 8006b44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	681a      	ldr	r2, [r3, #0]
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f022 0201 	bic.w	r2, r2, #1
 8006b56:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	3301      	adds	r3, #1
 8006b5c:	60bb      	str	r3, [r7, #8]
 8006b5e:	697a      	ldr	r2, [r7, #20]
 8006b60:	429a      	cmp	r2, r3
 8006b62:	d307      	bcc.n	8006b74 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f003 0301 	and.w	r3, r3, #1
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d1f2      	bne.n	8006b58 <HAL_DMA_IRQHandler+0x2cc>
 8006b72:	e000      	b.n	8006b76 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8006b74:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2201      	movs	r2, #1
 8006b7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	2200      	movs	r2, #0
 8006b82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d005      	beq.n	8006b9a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b92:	6878      	ldr	r0, [r7, #4]
 8006b94:	4798      	blx	r3
 8006b96:	e000      	b.n	8006b9a <HAL_DMA_IRQHandler+0x30e>
        return;
 8006b98:	bf00      	nop
    }
  }
}
 8006b9a:	3718      	adds	r7, #24
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	bd80      	pop	{r7, pc}

08006ba0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006ba0:	b480      	push	{r7}
 8006ba2:	b085      	sub	sp, #20
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	60f8      	str	r0, [r7, #12]
 8006ba8:	60b9      	str	r1, [r7, #8]
 8006baa:	607a      	str	r2, [r7, #4]
 8006bac:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	681a      	ldr	r2, [r3, #0]
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006bbc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	683a      	ldr	r2, [r7, #0]
 8006bc4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	689b      	ldr	r3, [r3, #8]
 8006bca:	2b40      	cmp	r3, #64	; 0x40
 8006bcc:	d108      	bne.n	8006be0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	687a      	ldr	r2, [r7, #4]
 8006bd4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	68ba      	ldr	r2, [r7, #8]
 8006bdc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8006bde:	e007      	b.n	8006bf0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	68ba      	ldr	r2, [r7, #8]
 8006be6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	687a      	ldr	r2, [r7, #4]
 8006bee:	60da      	str	r2, [r3, #12]
}
 8006bf0:	bf00      	nop
 8006bf2:	3714      	adds	r7, #20
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfa:	4770      	bx	lr

08006bfc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006bfc:	b480      	push	{r7}
 8006bfe:	b085      	sub	sp, #20
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	b2db      	uxtb	r3, r3
 8006c0a:	3b10      	subs	r3, #16
 8006c0c:	4a14      	ldr	r2, [pc, #80]	; (8006c60 <DMA_CalcBaseAndBitshift+0x64>)
 8006c0e:	fba2 2303 	umull	r2, r3, r2, r3
 8006c12:	091b      	lsrs	r3, r3, #4
 8006c14:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006c16:	4a13      	ldr	r2, [pc, #76]	; (8006c64 <DMA_CalcBaseAndBitshift+0x68>)
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	4413      	add	r3, r2
 8006c1c:	781b      	ldrb	r3, [r3, #0]
 8006c1e:	461a      	mov	r2, r3
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	2b03      	cmp	r3, #3
 8006c28:	d909      	bls.n	8006c3e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006c32:	f023 0303 	bic.w	r3, r3, #3
 8006c36:	1d1a      	adds	r2, r3, #4
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	659a      	str	r2, [r3, #88]	; 0x58
 8006c3c:	e007      	b.n	8006c4e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006c46:	f023 0303 	bic.w	r3, r3, #3
 8006c4a:	687a      	ldr	r2, [r7, #4]
 8006c4c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006c52:	4618      	mov	r0, r3
 8006c54:	3714      	adds	r7, #20
 8006c56:	46bd      	mov	sp, r7
 8006c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5c:	4770      	bx	lr
 8006c5e:	bf00      	nop
 8006c60:	aaaaaaab 	.word	0xaaaaaaab
 8006c64:	08013edc 	.word	0x08013edc

08006c68 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006c68:	b480      	push	{r7}
 8006c6a:	b085      	sub	sp, #20
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006c70:	2300      	movs	r3, #0
 8006c72:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c78:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	699b      	ldr	r3, [r3, #24]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d11f      	bne.n	8006cc2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8006c82:	68bb      	ldr	r3, [r7, #8]
 8006c84:	2b03      	cmp	r3, #3
 8006c86:	d856      	bhi.n	8006d36 <DMA_CheckFifoParam+0xce>
 8006c88:	a201      	add	r2, pc, #4	; (adr r2, 8006c90 <DMA_CheckFifoParam+0x28>)
 8006c8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c8e:	bf00      	nop
 8006c90:	08006ca1 	.word	0x08006ca1
 8006c94:	08006cb3 	.word	0x08006cb3
 8006c98:	08006ca1 	.word	0x08006ca1
 8006c9c:	08006d37 	.word	0x08006d37
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ca4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d046      	beq.n	8006d3a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006cac:	2301      	movs	r3, #1
 8006cae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006cb0:	e043      	b.n	8006d3a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cb6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006cba:	d140      	bne.n	8006d3e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006cbc:	2301      	movs	r3, #1
 8006cbe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006cc0:	e03d      	b.n	8006d3e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	699b      	ldr	r3, [r3, #24]
 8006cc6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006cca:	d121      	bne.n	8006d10 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8006ccc:	68bb      	ldr	r3, [r7, #8]
 8006cce:	2b03      	cmp	r3, #3
 8006cd0:	d837      	bhi.n	8006d42 <DMA_CheckFifoParam+0xda>
 8006cd2:	a201      	add	r2, pc, #4	; (adr r2, 8006cd8 <DMA_CheckFifoParam+0x70>)
 8006cd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cd8:	08006ce9 	.word	0x08006ce9
 8006cdc:	08006cef 	.word	0x08006cef
 8006ce0:	08006ce9 	.word	0x08006ce9
 8006ce4:	08006d01 	.word	0x08006d01
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006ce8:	2301      	movs	r3, #1
 8006cea:	73fb      	strb	r3, [r7, #15]
      break;
 8006cec:	e030      	b.n	8006d50 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cf2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d025      	beq.n	8006d46 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8006cfa:	2301      	movs	r3, #1
 8006cfc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006cfe:	e022      	b.n	8006d46 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d04:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006d08:	d11f      	bne.n	8006d4a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8006d0a:	2301      	movs	r3, #1
 8006d0c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006d0e:	e01c      	b.n	8006d4a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006d10:	68bb      	ldr	r3, [r7, #8]
 8006d12:	2b02      	cmp	r3, #2
 8006d14:	d903      	bls.n	8006d1e <DMA_CheckFifoParam+0xb6>
 8006d16:	68bb      	ldr	r3, [r7, #8]
 8006d18:	2b03      	cmp	r3, #3
 8006d1a:	d003      	beq.n	8006d24 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006d1c:	e018      	b.n	8006d50 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8006d1e:	2301      	movs	r3, #1
 8006d20:	73fb      	strb	r3, [r7, #15]
      break;
 8006d22:	e015      	b.n	8006d50 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d28:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d00e      	beq.n	8006d4e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006d30:	2301      	movs	r3, #1
 8006d32:	73fb      	strb	r3, [r7, #15]
      break;
 8006d34:	e00b      	b.n	8006d4e <DMA_CheckFifoParam+0xe6>
      break;
 8006d36:	bf00      	nop
 8006d38:	e00a      	b.n	8006d50 <DMA_CheckFifoParam+0xe8>
      break;
 8006d3a:	bf00      	nop
 8006d3c:	e008      	b.n	8006d50 <DMA_CheckFifoParam+0xe8>
      break;
 8006d3e:	bf00      	nop
 8006d40:	e006      	b.n	8006d50 <DMA_CheckFifoParam+0xe8>
      break;
 8006d42:	bf00      	nop
 8006d44:	e004      	b.n	8006d50 <DMA_CheckFifoParam+0xe8>
      break;
 8006d46:	bf00      	nop
 8006d48:	e002      	b.n	8006d50 <DMA_CheckFifoParam+0xe8>
      break;   
 8006d4a:	bf00      	nop
 8006d4c:	e000      	b.n	8006d50 <DMA_CheckFifoParam+0xe8>
      break;
 8006d4e:	bf00      	nop
    }
  } 
  
  return status; 
 8006d50:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d52:	4618      	mov	r0, r3
 8006d54:	3714      	adds	r7, #20
 8006d56:	46bd      	mov	sp, r7
 8006d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5c:	4770      	bx	lr
 8006d5e:	bf00      	nop

08006d60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006d60:	b480      	push	{r7}
 8006d62:	b089      	sub	sp, #36	; 0x24
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
 8006d68:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006d6e:	2300      	movs	r3, #0
 8006d70:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006d72:	2300      	movs	r3, #0
 8006d74:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006d76:	2300      	movs	r3, #0
 8006d78:	61fb      	str	r3, [r7, #28]
 8006d7a:	e16b      	b.n	8007054 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006d7c:	2201      	movs	r2, #1
 8006d7e:	69fb      	ldr	r3, [r7, #28]
 8006d80:	fa02 f303 	lsl.w	r3, r2, r3
 8006d84:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	697a      	ldr	r2, [r7, #20]
 8006d8c:	4013      	ands	r3, r2
 8006d8e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006d90:	693a      	ldr	r2, [r7, #16]
 8006d92:	697b      	ldr	r3, [r7, #20]
 8006d94:	429a      	cmp	r2, r3
 8006d96:	f040 815a 	bne.w	800704e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	685b      	ldr	r3, [r3, #4]
 8006d9e:	f003 0303 	and.w	r3, r3, #3
 8006da2:	2b01      	cmp	r3, #1
 8006da4:	d005      	beq.n	8006db2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	685b      	ldr	r3, [r3, #4]
 8006daa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006dae:	2b02      	cmp	r3, #2
 8006db0:	d130      	bne.n	8006e14 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	689b      	ldr	r3, [r3, #8]
 8006db6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006db8:	69fb      	ldr	r3, [r7, #28]
 8006dba:	005b      	lsls	r3, r3, #1
 8006dbc:	2203      	movs	r2, #3
 8006dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8006dc2:	43db      	mvns	r3, r3
 8006dc4:	69ba      	ldr	r2, [r7, #24]
 8006dc6:	4013      	ands	r3, r2
 8006dc8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	68da      	ldr	r2, [r3, #12]
 8006dce:	69fb      	ldr	r3, [r7, #28]
 8006dd0:	005b      	lsls	r3, r3, #1
 8006dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8006dd6:	69ba      	ldr	r2, [r7, #24]
 8006dd8:	4313      	orrs	r3, r2
 8006dda:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	69ba      	ldr	r2, [r7, #24]
 8006de0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	685b      	ldr	r3, [r3, #4]
 8006de6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006de8:	2201      	movs	r2, #1
 8006dea:	69fb      	ldr	r3, [r7, #28]
 8006dec:	fa02 f303 	lsl.w	r3, r2, r3
 8006df0:	43db      	mvns	r3, r3
 8006df2:	69ba      	ldr	r2, [r7, #24]
 8006df4:	4013      	ands	r3, r2
 8006df6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	685b      	ldr	r3, [r3, #4]
 8006dfc:	091b      	lsrs	r3, r3, #4
 8006dfe:	f003 0201 	and.w	r2, r3, #1
 8006e02:	69fb      	ldr	r3, [r7, #28]
 8006e04:	fa02 f303 	lsl.w	r3, r2, r3
 8006e08:	69ba      	ldr	r2, [r7, #24]
 8006e0a:	4313      	orrs	r3, r2
 8006e0c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	69ba      	ldr	r2, [r7, #24]
 8006e12:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	685b      	ldr	r3, [r3, #4]
 8006e18:	f003 0303 	and.w	r3, r3, #3
 8006e1c:	2b03      	cmp	r3, #3
 8006e1e:	d017      	beq.n	8006e50 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	68db      	ldr	r3, [r3, #12]
 8006e24:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006e26:	69fb      	ldr	r3, [r7, #28]
 8006e28:	005b      	lsls	r3, r3, #1
 8006e2a:	2203      	movs	r2, #3
 8006e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8006e30:	43db      	mvns	r3, r3
 8006e32:	69ba      	ldr	r2, [r7, #24]
 8006e34:	4013      	ands	r3, r2
 8006e36:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	689a      	ldr	r2, [r3, #8]
 8006e3c:	69fb      	ldr	r3, [r7, #28]
 8006e3e:	005b      	lsls	r3, r3, #1
 8006e40:	fa02 f303 	lsl.w	r3, r2, r3
 8006e44:	69ba      	ldr	r2, [r7, #24]
 8006e46:	4313      	orrs	r3, r2
 8006e48:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	69ba      	ldr	r2, [r7, #24]
 8006e4e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	685b      	ldr	r3, [r3, #4]
 8006e54:	f003 0303 	and.w	r3, r3, #3
 8006e58:	2b02      	cmp	r3, #2
 8006e5a:	d123      	bne.n	8006ea4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006e5c:	69fb      	ldr	r3, [r7, #28]
 8006e5e:	08da      	lsrs	r2, r3, #3
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	3208      	adds	r2, #8
 8006e64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e68:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006e6a:	69fb      	ldr	r3, [r7, #28]
 8006e6c:	f003 0307 	and.w	r3, r3, #7
 8006e70:	009b      	lsls	r3, r3, #2
 8006e72:	220f      	movs	r2, #15
 8006e74:	fa02 f303 	lsl.w	r3, r2, r3
 8006e78:	43db      	mvns	r3, r3
 8006e7a:	69ba      	ldr	r2, [r7, #24]
 8006e7c:	4013      	ands	r3, r2
 8006e7e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	691a      	ldr	r2, [r3, #16]
 8006e84:	69fb      	ldr	r3, [r7, #28]
 8006e86:	f003 0307 	and.w	r3, r3, #7
 8006e8a:	009b      	lsls	r3, r3, #2
 8006e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8006e90:	69ba      	ldr	r2, [r7, #24]
 8006e92:	4313      	orrs	r3, r2
 8006e94:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006e96:	69fb      	ldr	r3, [r7, #28]
 8006e98:	08da      	lsrs	r2, r3, #3
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	3208      	adds	r2, #8
 8006e9e:	69b9      	ldr	r1, [r7, #24]
 8006ea0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006eaa:	69fb      	ldr	r3, [r7, #28]
 8006eac:	005b      	lsls	r3, r3, #1
 8006eae:	2203      	movs	r2, #3
 8006eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8006eb4:	43db      	mvns	r3, r3
 8006eb6:	69ba      	ldr	r2, [r7, #24]
 8006eb8:	4013      	ands	r3, r2
 8006eba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	685b      	ldr	r3, [r3, #4]
 8006ec0:	f003 0203 	and.w	r2, r3, #3
 8006ec4:	69fb      	ldr	r3, [r7, #28]
 8006ec6:	005b      	lsls	r3, r3, #1
 8006ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8006ecc:	69ba      	ldr	r2, [r7, #24]
 8006ece:	4313      	orrs	r3, r2
 8006ed0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	69ba      	ldr	r2, [r7, #24]
 8006ed6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	685b      	ldr	r3, [r3, #4]
 8006edc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	f000 80b4 	beq.w	800704e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	60fb      	str	r3, [r7, #12]
 8006eea:	4b60      	ldr	r3, [pc, #384]	; (800706c <HAL_GPIO_Init+0x30c>)
 8006eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006eee:	4a5f      	ldr	r2, [pc, #380]	; (800706c <HAL_GPIO_Init+0x30c>)
 8006ef0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006ef4:	6453      	str	r3, [r2, #68]	; 0x44
 8006ef6:	4b5d      	ldr	r3, [pc, #372]	; (800706c <HAL_GPIO_Init+0x30c>)
 8006ef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006efa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006efe:	60fb      	str	r3, [r7, #12]
 8006f00:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006f02:	4a5b      	ldr	r2, [pc, #364]	; (8007070 <HAL_GPIO_Init+0x310>)
 8006f04:	69fb      	ldr	r3, [r7, #28]
 8006f06:	089b      	lsrs	r3, r3, #2
 8006f08:	3302      	adds	r3, #2
 8006f0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006f10:	69fb      	ldr	r3, [r7, #28]
 8006f12:	f003 0303 	and.w	r3, r3, #3
 8006f16:	009b      	lsls	r3, r3, #2
 8006f18:	220f      	movs	r2, #15
 8006f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8006f1e:	43db      	mvns	r3, r3
 8006f20:	69ba      	ldr	r2, [r7, #24]
 8006f22:	4013      	ands	r3, r2
 8006f24:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	4a52      	ldr	r2, [pc, #328]	; (8007074 <HAL_GPIO_Init+0x314>)
 8006f2a:	4293      	cmp	r3, r2
 8006f2c:	d02b      	beq.n	8006f86 <HAL_GPIO_Init+0x226>
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	4a51      	ldr	r2, [pc, #324]	; (8007078 <HAL_GPIO_Init+0x318>)
 8006f32:	4293      	cmp	r3, r2
 8006f34:	d025      	beq.n	8006f82 <HAL_GPIO_Init+0x222>
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	4a50      	ldr	r2, [pc, #320]	; (800707c <HAL_GPIO_Init+0x31c>)
 8006f3a:	4293      	cmp	r3, r2
 8006f3c:	d01f      	beq.n	8006f7e <HAL_GPIO_Init+0x21e>
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	4a4f      	ldr	r2, [pc, #316]	; (8007080 <HAL_GPIO_Init+0x320>)
 8006f42:	4293      	cmp	r3, r2
 8006f44:	d019      	beq.n	8006f7a <HAL_GPIO_Init+0x21a>
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	4a4e      	ldr	r2, [pc, #312]	; (8007084 <HAL_GPIO_Init+0x324>)
 8006f4a:	4293      	cmp	r3, r2
 8006f4c:	d013      	beq.n	8006f76 <HAL_GPIO_Init+0x216>
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	4a4d      	ldr	r2, [pc, #308]	; (8007088 <HAL_GPIO_Init+0x328>)
 8006f52:	4293      	cmp	r3, r2
 8006f54:	d00d      	beq.n	8006f72 <HAL_GPIO_Init+0x212>
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	4a4c      	ldr	r2, [pc, #304]	; (800708c <HAL_GPIO_Init+0x32c>)
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d007      	beq.n	8006f6e <HAL_GPIO_Init+0x20e>
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	4a4b      	ldr	r2, [pc, #300]	; (8007090 <HAL_GPIO_Init+0x330>)
 8006f62:	4293      	cmp	r3, r2
 8006f64:	d101      	bne.n	8006f6a <HAL_GPIO_Init+0x20a>
 8006f66:	2307      	movs	r3, #7
 8006f68:	e00e      	b.n	8006f88 <HAL_GPIO_Init+0x228>
 8006f6a:	2308      	movs	r3, #8
 8006f6c:	e00c      	b.n	8006f88 <HAL_GPIO_Init+0x228>
 8006f6e:	2306      	movs	r3, #6
 8006f70:	e00a      	b.n	8006f88 <HAL_GPIO_Init+0x228>
 8006f72:	2305      	movs	r3, #5
 8006f74:	e008      	b.n	8006f88 <HAL_GPIO_Init+0x228>
 8006f76:	2304      	movs	r3, #4
 8006f78:	e006      	b.n	8006f88 <HAL_GPIO_Init+0x228>
 8006f7a:	2303      	movs	r3, #3
 8006f7c:	e004      	b.n	8006f88 <HAL_GPIO_Init+0x228>
 8006f7e:	2302      	movs	r3, #2
 8006f80:	e002      	b.n	8006f88 <HAL_GPIO_Init+0x228>
 8006f82:	2301      	movs	r3, #1
 8006f84:	e000      	b.n	8006f88 <HAL_GPIO_Init+0x228>
 8006f86:	2300      	movs	r3, #0
 8006f88:	69fa      	ldr	r2, [r7, #28]
 8006f8a:	f002 0203 	and.w	r2, r2, #3
 8006f8e:	0092      	lsls	r2, r2, #2
 8006f90:	4093      	lsls	r3, r2
 8006f92:	69ba      	ldr	r2, [r7, #24]
 8006f94:	4313      	orrs	r3, r2
 8006f96:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006f98:	4935      	ldr	r1, [pc, #212]	; (8007070 <HAL_GPIO_Init+0x310>)
 8006f9a:	69fb      	ldr	r3, [r7, #28]
 8006f9c:	089b      	lsrs	r3, r3, #2
 8006f9e:	3302      	adds	r3, #2
 8006fa0:	69ba      	ldr	r2, [r7, #24]
 8006fa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006fa6:	4b3b      	ldr	r3, [pc, #236]	; (8007094 <HAL_GPIO_Init+0x334>)
 8006fa8:	689b      	ldr	r3, [r3, #8]
 8006faa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006fac:	693b      	ldr	r3, [r7, #16]
 8006fae:	43db      	mvns	r3, r3
 8006fb0:	69ba      	ldr	r2, [r7, #24]
 8006fb2:	4013      	ands	r3, r2
 8006fb4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	685b      	ldr	r3, [r3, #4]
 8006fba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d003      	beq.n	8006fca <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8006fc2:	69ba      	ldr	r2, [r7, #24]
 8006fc4:	693b      	ldr	r3, [r7, #16]
 8006fc6:	4313      	orrs	r3, r2
 8006fc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006fca:	4a32      	ldr	r2, [pc, #200]	; (8007094 <HAL_GPIO_Init+0x334>)
 8006fcc:	69bb      	ldr	r3, [r7, #24]
 8006fce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006fd0:	4b30      	ldr	r3, [pc, #192]	; (8007094 <HAL_GPIO_Init+0x334>)
 8006fd2:	68db      	ldr	r3, [r3, #12]
 8006fd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006fd6:	693b      	ldr	r3, [r7, #16]
 8006fd8:	43db      	mvns	r3, r3
 8006fda:	69ba      	ldr	r2, [r7, #24]
 8006fdc:	4013      	ands	r3, r2
 8006fde:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006fe0:	683b      	ldr	r3, [r7, #0]
 8006fe2:	685b      	ldr	r3, [r3, #4]
 8006fe4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d003      	beq.n	8006ff4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8006fec:	69ba      	ldr	r2, [r7, #24]
 8006fee:	693b      	ldr	r3, [r7, #16]
 8006ff0:	4313      	orrs	r3, r2
 8006ff2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006ff4:	4a27      	ldr	r2, [pc, #156]	; (8007094 <HAL_GPIO_Init+0x334>)
 8006ff6:	69bb      	ldr	r3, [r7, #24]
 8006ff8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006ffa:	4b26      	ldr	r3, [pc, #152]	; (8007094 <HAL_GPIO_Init+0x334>)
 8006ffc:	685b      	ldr	r3, [r3, #4]
 8006ffe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007000:	693b      	ldr	r3, [r7, #16]
 8007002:	43db      	mvns	r3, r3
 8007004:	69ba      	ldr	r2, [r7, #24]
 8007006:	4013      	ands	r3, r2
 8007008:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	685b      	ldr	r3, [r3, #4]
 800700e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007012:	2b00      	cmp	r3, #0
 8007014:	d003      	beq.n	800701e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8007016:	69ba      	ldr	r2, [r7, #24]
 8007018:	693b      	ldr	r3, [r7, #16]
 800701a:	4313      	orrs	r3, r2
 800701c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800701e:	4a1d      	ldr	r2, [pc, #116]	; (8007094 <HAL_GPIO_Init+0x334>)
 8007020:	69bb      	ldr	r3, [r7, #24]
 8007022:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007024:	4b1b      	ldr	r3, [pc, #108]	; (8007094 <HAL_GPIO_Init+0x334>)
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800702a:	693b      	ldr	r3, [r7, #16]
 800702c:	43db      	mvns	r3, r3
 800702e:	69ba      	ldr	r2, [r7, #24]
 8007030:	4013      	ands	r3, r2
 8007032:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	685b      	ldr	r3, [r3, #4]
 8007038:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800703c:	2b00      	cmp	r3, #0
 800703e:	d003      	beq.n	8007048 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8007040:	69ba      	ldr	r2, [r7, #24]
 8007042:	693b      	ldr	r3, [r7, #16]
 8007044:	4313      	orrs	r3, r2
 8007046:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007048:	4a12      	ldr	r2, [pc, #72]	; (8007094 <HAL_GPIO_Init+0x334>)
 800704a:	69bb      	ldr	r3, [r7, #24]
 800704c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800704e:	69fb      	ldr	r3, [r7, #28]
 8007050:	3301      	adds	r3, #1
 8007052:	61fb      	str	r3, [r7, #28]
 8007054:	69fb      	ldr	r3, [r7, #28]
 8007056:	2b0f      	cmp	r3, #15
 8007058:	f67f ae90 	bls.w	8006d7c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800705c:	bf00      	nop
 800705e:	bf00      	nop
 8007060:	3724      	adds	r7, #36	; 0x24
 8007062:	46bd      	mov	sp, r7
 8007064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007068:	4770      	bx	lr
 800706a:	bf00      	nop
 800706c:	40023800 	.word	0x40023800
 8007070:	40013800 	.word	0x40013800
 8007074:	40020000 	.word	0x40020000
 8007078:	40020400 	.word	0x40020400
 800707c:	40020800 	.word	0x40020800
 8007080:	40020c00 	.word	0x40020c00
 8007084:	40021000 	.word	0x40021000
 8007088:	40021400 	.word	0x40021400
 800708c:	40021800 	.word	0x40021800
 8007090:	40021c00 	.word	0x40021c00
 8007094:	40013c00 	.word	0x40013c00

08007098 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007098:	b480      	push	{r7}
 800709a:	b083      	sub	sp, #12
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
 80070a0:	460b      	mov	r3, r1
 80070a2:	807b      	strh	r3, [r7, #2]
 80070a4:	4613      	mov	r3, r2
 80070a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80070a8:	787b      	ldrb	r3, [r7, #1]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d003      	beq.n	80070b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80070ae:	887a      	ldrh	r2, [r7, #2]
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80070b4:	e003      	b.n	80070be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80070b6:	887b      	ldrh	r3, [r7, #2]
 80070b8:	041a      	lsls	r2, r3, #16
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	619a      	str	r2, [r3, #24]
}
 80070be:	bf00      	nop
 80070c0:	370c      	adds	r7, #12
 80070c2:	46bd      	mov	sp, r7
 80070c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c8:	4770      	bx	lr

080070ca <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80070ca:	b480      	push	{r7}
 80070cc:	b085      	sub	sp, #20
 80070ce:	af00      	add	r7, sp, #0
 80070d0:	6078      	str	r0, [r7, #4]
 80070d2:	460b      	mov	r3, r1
 80070d4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	695b      	ldr	r3, [r3, #20]
 80070da:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80070dc:	887a      	ldrh	r2, [r7, #2]
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	4013      	ands	r3, r2
 80070e2:	041a      	lsls	r2, r3, #16
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	43d9      	mvns	r1, r3
 80070e8:	887b      	ldrh	r3, [r7, #2]
 80070ea:	400b      	ands	r3, r1
 80070ec:	431a      	orrs	r2, r3
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	619a      	str	r2, [r3, #24]
}
 80070f2:	bf00      	nop
 80070f4:	3714      	adds	r7, #20
 80070f6:	46bd      	mov	sp, r7
 80070f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fc:	4770      	bx	lr
	...

08007100 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007100:	b580      	push	{r7, lr}
 8007102:	b082      	sub	sp, #8
 8007104:	af00      	add	r7, sp, #0
 8007106:	4603      	mov	r3, r0
 8007108:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800710a:	4b08      	ldr	r3, [pc, #32]	; (800712c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800710c:	695a      	ldr	r2, [r3, #20]
 800710e:	88fb      	ldrh	r3, [r7, #6]
 8007110:	4013      	ands	r3, r2
 8007112:	2b00      	cmp	r3, #0
 8007114:	d006      	beq.n	8007124 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007116:	4a05      	ldr	r2, [pc, #20]	; (800712c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007118:	88fb      	ldrh	r3, [r7, #6]
 800711a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800711c:	88fb      	ldrh	r3, [r7, #6]
 800711e:	4618      	mov	r0, r3
 8007120:	f7fb f87a 	bl	8002218 <HAL_GPIO_EXTI_Callback>
  }
}
 8007124:	bf00      	nop
 8007126:	3708      	adds	r7, #8
 8007128:	46bd      	mov	sp, r7
 800712a:	bd80      	pop	{r7, pc}
 800712c:	40013c00 	.word	0x40013c00

08007130 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007130:	b580      	push	{r7, lr}
 8007132:	b084      	sub	sp, #16
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d101      	bne.n	8007142 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800713e:	2301      	movs	r3, #1
 8007140:	e12b      	b.n	800739a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007148:	b2db      	uxtb	r3, r3
 800714a:	2b00      	cmp	r3, #0
 800714c:	d106      	bne.n	800715c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	2200      	movs	r2, #0
 8007152:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8007156:	6878      	ldr	r0, [r7, #4]
 8007158:	f7fc fac8 	bl	80036ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2224      	movs	r2, #36	; 0x24
 8007160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	681a      	ldr	r2, [r3, #0]
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	f022 0201 	bic.w	r2, r2, #1
 8007172:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	681a      	ldr	r2, [r3, #0]
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007182:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	681a      	ldr	r2, [r3, #0]
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007192:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007194:	f001 fbfc 	bl	8008990 <HAL_RCC_GetPCLK1Freq>
 8007198:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	685b      	ldr	r3, [r3, #4]
 800719e:	4a81      	ldr	r2, [pc, #516]	; (80073a4 <HAL_I2C_Init+0x274>)
 80071a0:	4293      	cmp	r3, r2
 80071a2:	d807      	bhi.n	80071b4 <HAL_I2C_Init+0x84>
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	4a80      	ldr	r2, [pc, #512]	; (80073a8 <HAL_I2C_Init+0x278>)
 80071a8:	4293      	cmp	r3, r2
 80071aa:	bf94      	ite	ls
 80071ac:	2301      	movls	r3, #1
 80071ae:	2300      	movhi	r3, #0
 80071b0:	b2db      	uxtb	r3, r3
 80071b2:	e006      	b.n	80071c2 <HAL_I2C_Init+0x92>
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	4a7d      	ldr	r2, [pc, #500]	; (80073ac <HAL_I2C_Init+0x27c>)
 80071b8:	4293      	cmp	r3, r2
 80071ba:	bf94      	ite	ls
 80071bc:	2301      	movls	r3, #1
 80071be:	2300      	movhi	r3, #0
 80071c0:	b2db      	uxtb	r3, r3
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d001      	beq.n	80071ca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80071c6:	2301      	movs	r3, #1
 80071c8:	e0e7      	b.n	800739a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	4a78      	ldr	r2, [pc, #480]	; (80073b0 <HAL_I2C_Init+0x280>)
 80071ce:	fba2 2303 	umull	r2, r3, r2, r3
 80071d2:	0c9b      	lsrs	r3, r3, #18
 80071d4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	685b      	ldr	r3, [r3, #4]
 80071dc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	68ba      	ldr	r2, [r7, #8]
 80071e6:	430a      	orrs	r2, r1
 80071e8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	6a1b      	ldr	r3, [r3, #32]
 80071f0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	685b      	ldr	r3, [r3, #4]
 80071f8:	4a6a      	ldr	r2, [pc, #424]	; (80073a4 <HAL_I2C_Init+0x274>)
 80071fa:	4293      	cmp	r3, r2
 80071fc:	d802      	bhi.n	8007204 <HAL_I2C_Init+0xd4>
 80071fe:	68bb      	ldr	r3, [r7, #8]
 8007200:	3301      	adds	r3, #1
 8007202:	e009      	b.n	8007218 <HAL_I2C_Init+0xe8>
 8007204:	68bb      	ldr	r3, [r7, #8]
 8007206:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800720a:	fb02 f303 	mul.w	r3, r2, r3
 800720e:	4a69      	ldr	r2, [pc, #420]	; (80073b4 <HAL_I2C_Init+0x284>)
 8007210:	fba2 2303 	umull	r2, r3, r2, r3
 8007214:	099b      	lsrs	r3, r3, #6
 8007216:	3301      	adds	r3, #1
 8007218:	687a      	ldr	r2, [r7, #4]
 800721a:	6812      	ldr	r2, [r2, #0]
 800721c:	430b      	orrs	r3, r1
 800721e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	69db      	ldr	r3, [r3, #28]
 8007226:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800722a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	685b      	ldr	r3, [r3, #4]
 8007232:	495c      	ldr	r1, [pc, #368]	; (80073a4 <HAL_I2C_Init+0x274>)
 8007234:	428b      	cmp	r3, r1
 8007236:	d819      	bhi.n	800726c <HAL_I2C_Init+0x13c>
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	1e59      	subs	r1, r3, #1
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	685b      	ldr	r3, [r3, #4]
 8007240:	005b      	lsls	r3, r3, #1
 8007242:	fbb1 f3f3 	udiv	r3, r1, r3
 8007246:	1c59      	adds	r1, r3, #1
 8007248:	f640 73fc 	movw	r3, #4092	; 0xffc
 800724c:	400b      	ands	r3, r1
 800724e:	2b00      	cmp	r3, #0
 8007250:	d00a      	beq.n	8007268 <HAL_I2C_Init+0x138>
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	1e59      	subs	r1, r3, #1
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	685b      	ldr	r3, [r3, #4]
 800725a:	005b      	lsls	r3, r3, #1
 800725c:	fbb1 f3f3 	udiv	r3, r1, r3
 8007260:	3301      	adds	r3, #1
 8007262:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007266:	e051      	b.n	800730c <HAL_I2C_Init+0x1dc>
 8007268:	2304      	movs	r3, #4
 800726a:	e04f      	b.n	800730c <HAL_I2C_Init+0x1dc>
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	689b      	ldr	r3, [r3, #8]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d111      	bne.n	8007298 <HAL_I2C_Init+0x168>
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	1e58      	subs	r0, r3, #1
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	6859      	ldr	r1, [r3, #4]
 800727c:	460b      	mov	r3, r1
 800727e:	005b      	lsls	r3, r3, #1
 8007280:	440b      	add	r3, r1
 8007282:	fbb0 f3f3 	udiv	r3, r0, r3
 8007286:	3301      	adds	r3, #1
 8007288:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800728c:	2b00      	cmp	r3, #0
 800728e:	bf0c      	ite	eq
 8007290:	2301      	moveq	r3, #1
 8007292:	2300      	movne	r3, #0
 8007294:	b2db      	uxtb	r3, r3
 8007296:	e012      	b.n	80072be <HAL_I2C_Init+0x18e>
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	1e58      	subs	r0, r3, #1
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	6859      	ldr	r1, [r3, #4]
 80072a0:	460b      	mov	r3, r1
 80072a2:	009b      	lsls	r3, r3, #2
 80072a4:	440b      	add	r3, r1
 80072a6:	0099      	lsls	r1, r3, #2
 80072a8:	440b      	add	r3, r1
 80072aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80072ae:	3301      	adds	r3, #1
 80072b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	bf0c      	ite	eq
 80072b8:	2301      	moveq	r3, #1
 80072ba:	2300      	movne	r3, #0
 80072bc:	b2db      	uxtb	r3, r3
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d001      	beq.n	80072c6 <HAL_I2C_Init+0x196>
 80072c2:	2301      	movs	r3, #1
 80072c4:	e022      	b.n	800730c <HAL_I2C_Init+0x1dc>
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	689b      	ldr	r3, [r3, #8]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d10e      	bne.n	80072ec <HAL_I2C_Init+0x1bc>
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	1e58      	subs	r0, r3, #1
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	6859      	ldr	r1, [r3, #4]
 80072d6:	460b      	mov	r3, r1
 80072d8:	005b      	lsls	r3, r3, #1
 80072da:	440b      	add	r3, r1
 80072dc:	fbb0 f3f3 	udiv	r3, r0, r3
 80072e0:	3301      	adds	r3, #1
 80072e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80072e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80072ea:	e00f      	b.n	800730c <HAL_I2C_Init+0x1dc>
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	1e58      	subs	r0, r3, #1
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	6859      	ldr	r1, [r3, #4]
 80072f4:	460b      	mov	r3, r1
 80072f6:	009b      	lsls	r3, r3, #2
 80072f8:	440b      	add	r3, r1
 80072fa:	0099      	lsls	r1, r3, #2
 80072fc:	440b      	add	r3, r1
 80072fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8007302:	3301      	adds	r3, #1
 8007304:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007308:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800730c:	6879      	ldr	r1, [r7, #4]
 800730e:	6809      	ldr	r1, [r1, #0]
 8007310:	4313      	orrs	r3, r2
 8007312:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	69da      	ldr	r2, [r3, #28]
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	6a1b      	ldr	r3, [r3, #32]
 8007326:	431a      	orrs	r2, r3
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	430a      	orrs	r2, r1
 800732e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	689b      	ldr	r3, [r3, #8]
 8007336:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800733a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800733e:	687a      	ldr	r2, [r7, #4]
 8007340:	6911      	ldr	r1, [r2, #16]
 8007342:	687a      	ldr	r2, [r7, #4]
 8007344:	68d2      	ldr	r2, [r2, #12]
 8007346:	4311      	orrs	r1, r2
 8007348:	687a      	ldr	r2, [r7, #4]
 800734a:	6812      	ldr	r2, [r2, #0]
 800734c:	430b      	orrs	r3, r1
 800734e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	68db      	ldr	r3, [r3, #12]
 8007356:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	695a      	ldr	r2, [r3, #20]
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	699b      	ldr	r3, [r3, #24]
 8007362:	431a      	orrs	r2, r3
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	430a      	orrs	r2, r1
 800736a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	681a      	ldr	r2, [r3, #0]
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f042 0201 	orr.w	r2, r2, #1
 800737a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2200      	movs	r2, #0
 8007380:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2220      	movs	r2, #32
 8007386:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	2200      	movs	r2, #0
 800738e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2200      	movs	r2, #0
 8007394:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007398:	2300      	movs	r3, #0
}
 800739a:	4618      	mov	r0, r3
 800739c:	3710      	adds	r7, #16
 800739e:	46bd      	mov	sp, r7
 80073a0:	bd80      	pop	{r7, pc}
 80073a2:	bf00      	nop
 80073a4:	000186a0 	.word	0x000186a0
 80073a8:	001e847f 	.word	0x001e847f
 80073ac:	003d08ff 	.word	0x003d08ff
 80073b0:	431bde83 	.word	0x431bde83
 80073b4:	10624dd3 	.word	0x10624dd3

080073b8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80073b8:	b580      	push	{r7, lr}
 80073ba:	b088      	sub	sp, #32
 80073bc:	af02      	add	r7, sp, #8
 80073be:	60f8      	str	r0, [r7, #12]
 80073c0:	4608      	mov	r0, r1
 80073c2:	4611      	mov	r1, r2
 80073c4:	461a      	mov	r2, r3
 80073c6:	4603      	mov	r3, r0
 80073c8:	817b      	strh	r3, [r7, #10]
 80073ca:	460b      	mov	r3, r1
 80073cc:	813b      	strh	r3, [r7, #8]
 80073ce:	4613      	mov	r3, r2
 80073d0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80073d2:	f7fe fd1f 	bl	8005e14 <HAL_GetTick>
 80073d6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073de:	b2db      	uxtb	r3, r3
 80073e0:	2b20      	cmp	r3, #32
 80073e2:	f040 80d9 	bne.w	8007598 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80073e6:	697b      	ldr	r3, [r7, #20]
 80073e8:	9300      	str	r3, [sp, #0]
 80073ea:	2319      	movs	r3, #25
 80073ec:	2201      	movs	r2, #1
 80073ee:	496d      	ldr	r1, [pc, #436]	; (80075a4 <HAL_I2C_Mem_Write+0x1ec>)
 80073f0:	68f8      	ldr	r0, [r7, #12]
 80073f2:	f000 fc7f 	bl	8007cf4 <I2C_WaitOnFlagUntilTimeout>
 80073f6:	4603      	mov	r3, r0
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d001      	beq.n	8007400 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80073fc:	2302      	movs	r3, #2
 80073fe:	e0cc      	b.n	800759a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007406:	2b01      	cmp	r3, #1
 8007408:	d101      	bne.n	800740e <HAL_I2C_Mem_Write+0x56>
 800740a:	2302      	movs	r3, #2
 800740c:	e0c5      	b.n	800759a <HAL_I2C_Mem_Write+0x1e2>
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	2201      	movs	r2, #1
 8007412:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f003 0301 	and.w	r3, r3, #1
 8007420:	2b01      	cmp	r3, #1
 8007422:	d007      	beq.n	8007434 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	681a      	ldr	r2, [r3, #0]
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f042 0201 	orr.w	r2, r2, #1
 8007432:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	681a      	ldr	r2, [r3, #0]
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007442:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	2221      	movs	r2, #33	; 0x21
 8007448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	2240      	movs	r2, #64	; 0x40
 8007450:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	2200      	movs	r2, #0
 8007458:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	6a3a      	ldr	r2, [r7, #32]
 800745e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007464:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800746a:	b29a      	uxth	r2, r3
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	4a4d      	ldr	r2, [pc, #308]	; (80075a8 <HAL_I2C_Mem_Write+0x1f0>)
 8007474:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007476:	88f8      	ldrh	r0, [r7, #6]
 8007478:	893a      	ldrh	r2, [r7, #8]
 800747a:	8979      	ldrh	r1, [r7, #10]
 800747c:	697b      	ldr	r3, [r7, #20]
 800747e:	9301      	str	r3, [sp, #4]
 8007480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007482:	9300      	str	r3, [sp, #0]
 8007484:	4603      	mov	r3, r0
 8007486:	68f8      	ldr	r0, [r7, #12]
 8007488:	f000 fab6 	bl	80079f8 <I2C_RequestMemoryWrite>
 800748c:	4603      	mov	r3, r0
 800748e:	2b00      	cmp	r3, #0
 8007490:	d052      	beq.n	8007538 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8007492:	2301      	movs	r3, #1
 8007494:	e081      	b.n	800759a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007496:	697a      	ldr	r2, [r7, #20]
 8007498:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800749a:	68f8      	ldr	r0, [r7, #12]
 800749c:	f000 fd00 	bl	8007ea0 <I2C_WaitOnTXEFlagUntilTimeout>
 80074a0:	4603      	mov	r3, r0
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d00d      	beq.n	80074c2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074aa:	2b04      	cmp	r3, #4
 80074ac:	d107      	bne.n	80074be <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	681a      	ldr	r2, [r3, #0]
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80074bc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80074be:	2301      	movs	r3, #1
 80074c0:	e06b      	b.n	800759a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074c6:	781a      	ldrb	r2, [r3, #0]
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074d2:	1c5a      	adds	r2, r3, #1
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074dc:	3b01      	subs	r3, #1
 80074de:	b29a      	uxth	r2, r3
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074e8:	b29b      	uxth	r3, r3
 80074ea:	3b01      	subs	r3, #1
 80074ec:	b29a      	uxth	r2, r3
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	695b      	ldr	r3, [r3, #20]
 80074f8:	f003 0304 	and.w	r3, r3, #4
 80074fc:	2b04      	cmp	r3, #4
 80074fe:	d11b      	bne.n	8007538 <HAL_I2C_Mem_Write+0x180>
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007504:	2b00      	cmp	r3, #0
 8007506:	d017      	beq.n	8007538 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800750c:	781a      	ldrb	r2, [r3, #0]
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007518:	1c5a      	adds	r2, r3, #1
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007522:	3b01      	subs	r3, #1
 8007524:	b29a      	uxth	r2, r3
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800752e:	b29b      	uxth	r3, r3
 8007530:	3b01      	subs	r3, #1
 8007532:	b29a      	uxth	r2, r3
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800753c:	2b00      	cmp	r3, #0
 800753e:	d1aa      	bne.n	8007496 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007540:	697a      	ldr	r2, [r7, #20]
 8007542:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007544:	68f8      	ldr	r0, [r7, #12]
 8007546:	f000 fcec 	bl	8007f22 <I2C_WaitOnBTFFlagUntilTimeout>
 800754a:	4603      	mov	r3, r0
 800754c:	2b00      	cmp	r3, #0
 800754e:	d00d      	beq.n	800756c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007554:	2b04      	cmp	r3, #4
 8007556:	d107      	bne.n	8007568 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	681a      	ldr	r2, [r3, #0]
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007566:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007568:	2301      	movs	r3, #1
 800756a:	e016      	b.n	800759a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	681a      	ldr	r2, [r3, #0]
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800757a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	2220      	movs	r2, #32
 8007580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	2200      	movs	r2, #0
 8007588:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	2200      	movs	r2, #0
 8007590:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007594:	2300      	movs	r3, #0
 8007596:	e000      	b.n	800759a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8007598:	2302      	movs	r3, #2
  }
}
 800759a:	4618      	mov	r0, r3
 800759c:	3718      	adds	r7, #24
 800759e:	46bd      	mov	sp, r7
 80075a0:	bd80      	pop	{r7, pc}
 80075a2:	bf00      	nop
 80075a4:	00100002 	.word	0x00100002
 80075a8:	ffff0000 	.word	0xffff0000

080075ac <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b08c      	sub	sp, #48	; 0x30
 80075b0:	af02      	add	r7, sp, #8
 80075b2:	60f8      	str	r0, [r7, #12]
 80075b4:	4608      	mov	r0, r1
 80075b6:	4611      	mov	r1, r2
 80075b8:	461a      	mov	r2, r3
 80075ba:	4603      	mov	r3, r0
 80075bc:	817b      	strh	r3, [r7, #10]
 80075be:	460b      	mov	r3, r1
 80075c0:	813b      	strh	r3, [r7, #8]
 80075c2:	4613      	mov	r3, r2
 80075c4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80075c6:	f7fe fc25 	bl	8005e14 <HAL_GetTick>
 80075ca:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075d2:	b2db      	uxtb	r3, r3
 80075d4:	2b20      	cmp	r3, #32
 80075d6:	f040 8208 	bne.w	80079ea <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80075da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075dc:	9300      	str	r3, [sp, #0]
 80075de:	2319      	movs	r3, #25
 80075e0:	2201      	movs	r2, #1
 80075e2:	497b      	ldr	r1, [pc, #492]	; (80077d0 <HAL_I2C_Mem_Read+0x224>)
 80075e4:	68f8      	ldr	r0, [r7, #12]
 80075e6:	f000 fb85 	bl	8007cf4 <I2C_WaitOnFlagUntilTimeout>
 80075ea:	4603      	mov	r3, r0
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d001      	beq.n	80075f4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80075f0:	2302      	movs	r3, #2
 80075f2:	e1fb      	b.n	80079ec <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80075fa:	2b01      	cmp	r3, #1
 80075fc:	d101      	bne.n	8007602 <HAL_I2C_Mem_Read+0x56>
 80075fe:	2302      	movs	r3, #2
 8007600:	e1f4      	b.n	80079ec <HAL_I2C_Mem_Read+0x440>
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	2201      	movs	r2, #1
 8007606:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	f003 0301 	and.w	r3, r3, #1
 8007614:	2b01      	cmp	r3, #1
 8007616:	d007      	beq.n	8007628 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	681a      	ldr	r2, [r3, #0]
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f042 0201 	orr.w	r2, r2, #1
 8007626:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	681a      	ldr	r2, [r3, #0]
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007636:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	2222      	movs	r2, #34	; 0x22
 800763c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	2240      	movs	r2, #64	; 0x40
 8007644:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	2200      	movs	r2, #0
 800764c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007652:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8007658:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800765e:	b29a      	uxth	r2, r3
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	4a5b      	ldr	r2, [pc, #364]	; (80077d4 <HAL_I2C_Mem_Read+0x228>)
 8007668:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800766a:	88f8      	ldrh	r0, [r7, #6]
 800766c:	893a      	ldrh	r2, [r7, #8]
 800766e:	8979      	ldrh	r1, [r7, #10]
 8007670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007672:	9301      	str	r3, [sp, #4]
 8007674:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007676:	9300      	str	r3, [sp, #0]
 8007678:	4603      	mov	r3, r0
 800767a:	68f8      	ldr	r0, [r7, #12]
 800767c:	f000 fa52 	bl	8007b24 <I2C_RequestMemoryRead>
 8007680:	4603      	mov	r3, r0
 8007682:	2b00      	cmp	r3, #0
 8007684:	d001      	beq.n	800768a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8007686:	2301      	movs	r3, #1
 8007688:	e1b0      	b.n	80079ec <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800768e:	2b00      	cmp	r3, #0
 8007690:	d113      	bne.n	80076ba <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007692:	2300      	movs	r3, #0
 8007694:	623b      	str	r3, [r7, #32]
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	695b      	ldr	r3, [r3, #20]
 800769c:	623b      	str	r3, [r7, #32]
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	699b      	ldr	r3, [r3, #24]
 80076a4:	623b      	str	r3, [r7, #32]
 80076a6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	681a      	ldr	r2, [r3, #0]
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80076b6:	601a      	str	r2, [r3, #0]
 80076b8:	e184      	b.n	80079c4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80076be:	2b01      	cmp	r3, #1
 80076c0:	d11b      	bne.n	80076fa <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	681a      	ldr	r2, [r3, #0]
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80076d0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80076d2:	2300      	movs	r3, #0
 80076d4:	61fb      	str	r3, [r7, #28]
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	695b      	ldr	r3, [r3, #20]
 80076dc:	61fb      	str	r3, [r7, #28]
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	699b      	ldr	r3, [r3, #24]
 80076e4:	61fb      	str	r3, [r7, #28]
 80076e6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	681a      	ldr	r2, [r3, #0]
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80076f6:	601a      	str	r2, [r3, #0]
 80076f8:	e164      	b.n	80079c4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80076fe:	2b02      	cmp	r3, #2
 8007700:	d11b      	bne.n	800773a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	681a      	ldr	r2, [r3, #0]
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007710:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	681a      	ldr	r2, [r3, #0]
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007720:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007722:	2300      	movs	r3, #0
 8007724:	61bb      	str	r3, [r7, #24]
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	695b      	ldr	r3, [r3, #20]
 800772c:	61bb      	str	r3, [r7, #24]
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	699b      	ldr	r3, [r3, #24]
 8007734:	61bb      	str	r3, [r7, #24]
 8007736:	69bb      	ldr	r3, [r7, #24]
 8007738:	e144      	b.n	80079c4 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800773a:	2300      	movs	r3, #0
 800773c:	617b      	str	r3, [r7, #20]
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	695b      	ldr	r3, [r3, #20]
 8007744:	617b      	str	r3, [r7, #20]
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	699b      	ldr	r3, [r3, #24]
 800774c:	617b      	str	r3, [r7, #20]
 800774e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8007750:	e138      	b.n	80079c4 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007756:	2b03      	cmp	r3, #3
 8007758:	f200 80f1 	bhi.w	800793e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007760:	2b01      	cmp	r3, #1
 8007762:	d123      	bne.n	80077ac <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007764:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007766:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007768:	68f8      	ldr	r0, [r7, #12]
 800776a:	f000 fc1b 	bl	8007fa4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800776e:	4603      	mov	r3, r0
 8007770:	2b00      	cmp	r3, #0
 8007772:	d001      	beq.n	8007778 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8007774:	2301      	movs	r3, #1
 8007776:	e139      	b.n	80079ec <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	691a      	ldr	r2, [r3, #16]
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007782:	b2d2      	uxtb	r2, r2
 8007784:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800778a:	1c5a      	adds	r2, r3, #1
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007794:	3b01      	subs	r3, #1
 8007796:	b29a      	uxth	r2, r3
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077a0:	b29b      	uxth	r3, r3
 80077a2:	3b01      	subs	r3, #1
 80077a4:	b29a      	uxth	r2, r3
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80077aa:	e10b      	b.n	80079c4 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077b0:	2b02      	cmp	r3, #2
 80077b2:	d14e      	bne.n	8007852 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80077b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077b6:	9300      	str	r3, [sp, #0]
 80077b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077ba:	2200      	movs	r2, #0
 80077bc:	4906      	ldr	r1, [pc, #24]	; (80077d8 <HAL_I2C_Mem_Read+0x22c>)
 80077be:	68f8      	ldr	r0, [r7, #12]
 80077c0:	f000 fa98 	bl	8007cf4 <I2C_WaitOnFlagUntilTimeout>
 80077c4:	4603      	mov	r3, r0
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d008      	beq.n	80077dc <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80077ca:	2301      	movs	r3, #1
 80077cc:	e10e      	b.n	80079ec <HAL_I2C_Mem_Read+0x440>
 80077ce:	bf00      	nop
 80077d0:	00100002 	.word	0x00100002
 80077d4:	ffff0000 	.word	0xffff0000
 80077d8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	681a      	ldr	r2, [r3, #0]
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80077ea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	691a      	ldr	r2, [r3, #16]
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077f6:	b2d2      	uxtb	r2, r2
 80077f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077fe:	1c5a      	adds	r2, r3, #1
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007808:	3b01      	subs	r3, #1
 800780a:	b29a      	uxth	r2, r3
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007814:	b29b      	uxth	r3, r3
 8007816:	3b01      	subs	r3, #1
 8007818:	b29a      	uxth	r2, r3
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	691a      	ldr	r2, [r3, #16]
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007828:	b2d2      	uxtb	r2, r2
 800782a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007830:	1c5a      	adds	r2, r3, #1
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800783a:	3b01      	subs	r3, #1
 800783c:	b29a      	uxth	r2, r3
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007846:	b29b      	uxth	r3, r3
 8007848:	3b01      	subs	r3, #1
 800784a:	b29a      	uxth	r2, r3
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007850:	e0b8      	b.n	80079c4 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007854:	9300      	str	r3, [sp, #0]
 8007856:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007858:	2200      	movs	r2, #0
 800785a:	4966      	ldr	r1, [pc, #408]	; (80079f4 <HAL_I2C_Mem_Read+0x448>)
 800785c:	68f8      	ldr	r0, [r7, #12]
 800785e:	f000 fa49 	bl	8007cf4 <I2C_WaitOnFlagUntilTimeout>
 8007862:	4603      	mov	r3, r0
 8007864:	2b00      	cmp	r3, #0
 8007866:	d001      	beq.n	800786c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8007868:	2301      	movs	r3, #1
 800786a:	e0bf      	b.n	80079ec <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	681a      	ldr	r2, [r3, #0]
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800787a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	691a      	ldr	r2, [r3, #16]
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007886:	b2d2      	uxtb	r2, r2
 8007888:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800788e:	1c5a      	adds	r2, r3, #1
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007898:	3b01      	subs	r3, #1
 800789a:	b29a      	uxth	r2, r3
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078a4:	b29b      	uxth	r3, r3
 80078a6:	3b01      	subs	r3, #1
 80078a8:	b29a      	uxth	r2, r3
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80078ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078b0:	9300      	str	r3, [sp, #0]
 80078b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078b4:	2200      	movs	r2, #0
 80078b6:	494f      	ldr	r1, [pc, #316]	; (80079f4 <HAL_I2C_Mem_Read+0x448>)
 80078b8:	68f8      	ldr	r0, [r7, #12]
 80078ba:	f000 fa1b 	bl	8007cf4 <I2C_WaitOnFlagUntilTimeout>
 80078be:	4603      	mov	r3, r0
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d001      	beq.n	80078c8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80078c4:	2301      	movs	r3, #1
 80078c6:	e091      	b.n	80079ec <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	681a      	ldr	r2, [r3, #0]
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80078d6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	691a      	ldr	r2, [r3, #16]
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078e2:	b2d2      	uxtb	r2, r2
 80078e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078ea:	1c5a      	adds	r2, r3, #1
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80078f4:	3b01      	subs	r3, #1
 80078f6:	b29a      	uxth	r2, r3
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007900:	b29b      	uxth	r3, r3
 8007902:	3b01      	subs	r3, #1
 8007904:	b29a      	uxth	r2, r3
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	691a      	ldr	r2, [r3, #16]
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007914:	b2d2      	uxtb	r2, r2
 8007916:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800791c:	1c5a      	adds	r2, r3, #1
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007926:	3b01      	subs	r3, #1
 8007928:	b29a      	uxth	r2, r3
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007932:	b29b      	uxth	r3, r3
 8007934:	3b01      	subs	r3, #1
 8007936:	b29a      	uxth	r2, r3
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800793c:	e042      	b.n	80079c4 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800793e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007940:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007942:	68f8      	ldr	r0, [r7, #12]
 8007944:	f000 fb2e 	bl	8007fa4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007948:	4603      	mov	r3, r0
 800794a:	2b00      	cmp	r3, #0
 800794c:	d001      	beq.n	8007952 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800794e:	2301      	movs	r3, #1
 8007950:	e04c      	b.n	80079ec <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	691a      	ldr	r2, [r3, #16]
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800795c:	b2d2      	uxtb	r2, r2
 800795e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007964:	1c5a      	adds	r2, r3, #1
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800796e:	3b01      	subs	r3, #1
 8007970:	b29a      	uxth	r2, r3
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800797a:	b29b      	uxth	r3, r3
 800797c:	3b01      	subs	r3, #1
 800797e:	b29a      	uxth	r2, r3
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	695b      	ldr	r3, [r3, #20]
 800798a:	f003 0304 	and.w	r3, r3, #4
 800798e:	2b04      	cmp	r3, #4
 8007990:	d118      	bne.n	80079c4 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	691a      	ldr	r2, [r3, #16]
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800799c:	b2d2      	uxtb	r2, r2
 800799e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079a4:	1c5a      	adds	r2, r3, #1
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079ae:	3b01      	subs	r3, #1
 80079b0:	b29a      	uxth	r2, r3
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079ba:	b29b      	uxth	r3, r3
 80079bc:	3b01      	subs	r3, #1
 80079be:	b29a      	uxth	r2, r3
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	f47f aec2 	bne.w	8007752 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	2220      	movs	r2, #32
 80079d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	2200      	movs	r2, #0
 80079da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	2200      	movs	r2, #0
 80079e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80079e6:	2300      	movs	r3, #0
 80079e8:	e000      	b.n	80079ec <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80079ea:	2302      	movs	r3, #2
  }
}
 80079ec:	4618      	mov	r0, r3
 80079ee:	3728      	adds	r7, #40	; 0x28
 80079f0:	46bd      	mov	sp, r7
 80079f2:	bd80      	pop	{r7, pc}
 80079f4:	00010004 	.word	0x00010004

080079f8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b088      	sub	sp, #32
 80079fc:	af02      	add	r7, sp, #8
 80079fe:	60f8      	str	r0, [r7, #12]
 8007a00:	4608      	mov	r0, r1
 8007a02:	4611      	mov	r1, r2
 8007a04:	461a      	mov	r2, r3
 8007a06:	4603      	mov	r3, r0
 8007a08:	817b      	strh	r3, [r7, #10]
 8007a0a:	460b      	mov	r3, r1
 8007a0c:	813b      	strh	r3, [r7, #8]
 8007a0e:	4613      	mov	r3, r2
 8007a10:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	681a      	ldr	r2, [r3, #0]
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007a20:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a24:	9300      	str	r3, [sp, #0]
 8007a26:	6a3b      	ldr	r3, [r7, #32]
 8007a28:	2200      	movs	r2, #0
 8007a2a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007a2e:	68f8      	ldr	r0, [r7, #12]
 8007a30:	f000 f960 	bl	8007cf4 <I2C_WaitOnFlagUntilTimeout>
 8007a34:	4603      	mov	r3, r0
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d00d      	beq.n	8007a56 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a48:	d103      	bne.n	8007a52 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007a50:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007a52:	2303      	movs	r3, #3
 8007a54:	e05f      	b.n	8007b16 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007a56:	897b      	ldrh	r3, [r7, #10]
 8007a58:	b2db      	uxtb	r3, r3
 8007a5a:	461a      	mov	r2, r3
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007a64:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a68:	6a3a      	ldr	r2, [r7, #32]
 8007a6a:	492d      	ldr	r1, [pc, #180]	; (8007b20 <I2C_RequestMemoryWrite+0x128>)
 8007a6c:	68f8      	ldr	r0, [r7, #12]
 8007a6e:	f000 f998 	bl	8007da2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007a72:	4603      	mov	r3, r0
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d001      	beq.n	8007a7c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8007a78:	2301      	movs	r3, #1
 8007a7a:	e04c      	b.n	8007b16 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	617b      	str	r3, [r7, #20]
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	695b      	ldr	r3, [r3, #20]
 8007a86:	617b      	str	r3, [r7, #20]
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	699b      	ldr	r3, [r3, #24]
 8007a8e:	617b      	str	r3, [r7, #20]
 8007a90:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007a92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a94:	6a39      	ldr	r1, [r7, #32]
 8007a96:	68f8      	ldr	r0, [r7, #12]
 8007a98:	f000 fa02 	bl	8007ea0 <I2C_WaitOnTXEFlagUntilTimeout>
 8007a9c:	4603      	mov	r3, r0
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d00d      	beq.n	8007abe <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aa6:	2b04      	cmp	r3, #4
 8007aa8:	d107      	bne.n	8007aba <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	681a      	ldr	r2, [r3, #0]
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007ab8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007aba:	2301      	movs	r3, #1
 8007abc:	e02b      	b.n	8007b16 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007abe:	88fb      	ldrh	r3, [r7, #6]
 8007ac0:	2b01      	cmp	r3, #1
 8007ac2:	d105      	bne.n	8007ad0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007ac4:	893b      	ldrh	r3, [r7, #8]
 8007ac6:	b2da      	uxtb	r2, r3
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	611a      	str	r2, [r3, #16]
 8007ace:	e021      	b.n	8007b14 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007ad0:	893b      	ldrh	r3, [r7, #8]
 8007ad2:	0a1b      	lsrs	r3, r3, #8
 8007ad4:	b29b      	uxth	r3, r3
 8007ad6:	b2da      	uxtb	r2, r3
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007ade:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ae0:	6a39      	ldr	r1, [r7, #32]
 8007ae2:	68f8      	ldr	r0, [r7, #12]
 8007ae4:	f000 f9dc 	bl	8007ea0 <I2C_WaitOnTXEFlagUntilTimeout>
 8007ae8:	4603      	mov	r3, r0
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d00d      	beq.n	8007b0a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007af2:	2b04      	cmp	r3, #4
 8007af4:	d107      	bne.n	8007b06 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	681a      	ldr	r2, [r3, #0]
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007b04:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007b06:	2301      	movs	r3, #1
 8007b08:	e005      	b.n	8007b16 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007b0a:	893b      	ldrh	r3, [r7, #8]
 8007b0c:	b2da      	uxtb	r2, r3
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8007b14:	2300      	movs	r3, #0
}
 8007b16:	4618      	mov	r0, r3
 8007b18:	3718      	adds	r7, #24
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	bd80      	pop	{r7, pc}
 8007b1e:	bf00      	nop
 8007b20:	00010002 	.word	0x00010002

08007b24 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b088      	sub	sp, #32
 8007b28:	af02      	add	r7, sp, #8
 8007b2a:	60f8      	str	r0, [r7, #12]
 8007b2c:	4608      	mov	r0, r1
 8007b2e:	4611      	mov	r1, r2
 8007b30:	461a      	mov	r2, r3
 8007b32:	4603      	mov	r3, r0
 8007b34:	817b      	strh	r3, [r7, #10]
 8007b36:	460b      	mov	r3, r1
 8007b38:	813b      	strh	r3, [r7, #8]
 8007b3a:	4613      	mov	r3, r2
 8007b3c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	681a      	ldr	r2, [r3, #0]
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007b4c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	681a      	ldr	r2, [r3, #0]
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007b5c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b60:	9300      	str	r3, [sp, #0]
 8007b62:	6a3b      	ldr	r3, [r7, #32]
 8007b64:	2200      	movs	r2, #0
 8007b66:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007b6a:	68f8      	ldr	r0, [r7, #12]
 8007b6c:	f000 f8c2 	bl	8007cf4 <I2C_WaitOnFlagUntilTimeout>
 8007b70:	4603      	mov	r3, r0
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d00d      	beq.n	8007b92 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b84:	d103      	bne.n	8007b8e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007b8c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007b8e:	2303      	movs	r3, #3
 8007b90:	e0aa      	b.n	8007ce8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007b92:	897b      	ldrh	r3, [r7, #10]
 8007b94:	b2db      	uxtb	r3, r3
 8007b96:	461a      	mov	r2, r3
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007ba0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ba4:	6a3a      	ldr	r2, [r7, #32]
 8007ba6:	4952      	ldr	r1, [pc, #328]	; (8007cf0 <I2C_RequestMemoryRead+0x1cc>)
 8007ba8:	68f8      	ldr	r0, [r7, #12]
 8007baa:	f000 f8fa 	bl	8007da2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007bae:	4603      	mov	r3, r0
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d001      	beq.n	8007bb8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8007bb4:	2301      	movs	r3, #1
 8007bb6:	e097      	b.n	8007ce8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007bb8:	2300      	movs	r3, #0
 8007bba:	617b      	str	r3, [r7, #20]
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	695b      	ldr	r3, [r3, #20]
 8007bc2:	617b      	str	r3, [r7, #20]
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	699b      	ldr	r3, [r3, #24]
 8007bca:	617b      	str	r3, [r7, #20]
 8007bcc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007bce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007bd0:	6a39      	ldr	r1, [r7, #32]
 8007bd2:	68f8      	ldr	r0, [r7, #12]
 8007bd4:	f000 f964 	bl	8007ea0 <I2C_WaitOnTXEFlagUntilTimeout>
 8007bd8:	4603      	mov	r3, r0
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d00d      	beq.n	8007bfa <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007be2:	2b04      	cmp	r3, #4
 8007be4:	d107      	bne.n	8007bf6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	681a      	ldr	r2, [r3, #0]
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007bf4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007bf6:	2301      	movs	r3, #1
 8007bf8:	e076      	b.n	8007ce8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007bfa:	88fb      	ldrh	r3, [r7, #6]
 8007bfc:	2b01      	cmp	r3, #1
 8007bfe:	d105      	bne.n	8007c0c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007c00:	893b      	ldrh	r3, [r7, #8]
 8007c02:	b2da      	uxtb	r2, r3
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	611a      	str	r2, [r3, #16]
 8007c0a:	e021      	b.n	8007c50 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007c0c:	893b      	ldrh	r3, [r7, #8]
 8007c0e:	0a1b      	lsrs	r3, r3, #8
 8007c10:	b29b      	uxth	r3, r3
 8007c12:	b2da      	uxtb	r2, r3
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007c1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c1c:	6a39      	ldr	r1, [r7, #32]
 8007c1e:	68f8      	ldr	r0, [r7, #12]
 8007c20:	f000 f93e 	bl	8007ea0 <I2C_WaitOnTXEFlagUntilTimeout>
 8007c24:	4603      	mov	r3, r0
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d00d      	beq.n	8007c46 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c2e:	2b04      	cmp	r3, #4
 8007c30:	d107      	bne.n	8007c42 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	681a      	ldr	r2, [r3, #0]
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007c40:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007c42:	2301      	movs	r3, #1
 8007c44:	e050      	b.n	8007ce8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007c46:	893b      	ldrh	r3, [r7, #8]
 8007c48:	b2da      	uxtb	r2, r3
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007c50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c52:	6a39      	ldr	r1, [r7, #32]
 8007c54:	68f8      	ldr	r0, [r7, #12]
 8007c56:	f000 f923 	bl	8007ea0 <I2C_WaitOnTXEFlagUntilTimeout>
 8007c5a:	4603      	mov	r3, r0
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d00d      	beq.n	8007c7c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c64:	2b04      	cmp	r3, #4
 8007c66:	d107      	bne.n	8007c78 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	681a      	ldr	r2, [r3, #0]
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007c76:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007c78:	2301      	movs	r3, #1
 8007c7a:	e035      	b.n	8007ce8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	681a      	ldr	r2, [r3, #0]
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007c8a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c8e:	9300      	str	r3, [sp, #0]
 8007c90:	6a3b      	ldr	r3, [r7, #32]
 8007c92:	2200      	movs	r2, #0
 8007c94:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007c98:	68f8      	ldr	r0, [r7, #12]
 8007c9a:	f000 f82b 	bl	8007cf4 <I2C_WaitOnFlagUntilTimeout>
 8007c9e:	4603      	mov	r3, r0
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d00d      	beq.n	8007cc0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007cae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007cb2:	d103      	bne.n	8007cbc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007cba:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007cbc:	2303      	movs	r3, #3
 8007cbe:	e013      	b.n	8007ce8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007cc0:	897b      	ldrh	r3, [r7, #10]
 8007cc2:	b2db      	uxtb	r3, r3
 8007cc4:	f043 0301 	orr.w	r3, r3, #1
 8007cc8:	b2da      	uxtb	r2, r3
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cd2:	6a3a      	ldr	r2, [r7, #32]
 8007cd4:	4906      	ldr	r1, [pc, #24]	; (8007cf0 <I2C_RequestMemoryRead+0x1cc>)
 8007cd6:	68f8      	ldr	r0, [r7, #12]
 8007cd8:	f000 f863 	bl	8007da2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007cdc:	4603      	mov	r3, r0
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d001      	beq.n	8007ce6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8007ce2:	2301      	movs	r3, #1
 8007ce4:	e000      	b.n	8007ce8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8007ce6:	2300      	movs	r3, #0
}
 8007ce8:	4618      	mov	r0, r3
 8007cea:	3718      	adds	r7, #24
 8007cec:	46bd      	mov	sp, r7
 8007cee:	bd80      	pop	{r7, pc}
 8007cf0:	00010002 	.word	0x00010002

08007cf4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b084      	sub	sp, #16
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	60f8      	str	r0, [r7, #12]
 8007cfc:	60b9      	str	r1, [r7, #8]
 8007cfe:	603b      	str	r3, [r7, #0]
 8007d00:	4613      	mov	r3, r2
 8007d02:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007d04:	e025      	b.n	8007d52 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d06:	683b      	ldr	r3, [r7, #0]
 8007d08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d0c:	d021      	beq.n	8007d52 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d0e:	f7fe f881 	bl	8005e14 <HAL_GetTick>
 8007d12:	4602      	mov	r2, r0
 8007d14:	69bb      	ldr	r3, [r7, #24]
 8007d16:	1ad3      	subs	r3, r2, r3
 8007d18:	683a      	ldr	r2, [r7, #0]
 8007d1a:	429a      	cmp	r2, r3
 8007d1c:	d302      	bcc.n	8007d24 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007d1e:	683b      	ldr	r3, [r7, #0]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d116      	bne.n	8007d52 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	2200      	movs	r2, #0
 8007d28:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	2220      	movs	r2, #32
 8007d2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	2200      	movs	r2, #0
 8007d36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d3e:	f043 0220 	orr.w	r2, r3, #32
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	2200      	movs	r2, #0
 8007d4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007d4e:	2301      	movs	r3, #1
 8007d50:	e023      	b.n	8007d9a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007d52:	68bb      	ldr	r3, [r7, #8]
 8007d54:	0c1b      	lsrs	r3, r3, #16
 8007d56:	b2db      	uxtb	r3, r3
 8007d58:	2b01      	cmp	r3, #1
 8007d5a:	d10d      	bne.n	8007d78 <I2C_WaitOnFlagUntilTimeout+0x84>
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	695b      	ldr	r3, [r3, #20]
 8007d62:	43da      	mvns	r2, r3
 8007d64:	68bb      	ldr	r3, [r7, #8]
 8007d66:	4013      	ands	r3, r2
 8007d68:	b29b      	uxth	r3, r3
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	bf0c      	ite	eq
 8007d6e:	2301      	moveq	r3, #1
 8007d70:	2300      	movne	r3, #0
 8007d72:	b2db      	uxtb	r3, r3
 8007d74:	461a      	mov	r2, r3
 8007d76:	e00c      	b.n	8007d92 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	699b      	ldr	r3, [r3, #24]
 8007d7e:	43da      	mvns	r2, r3
 8007d80:	68bb      	ldr	r3, [r7, #8]
 8007d82:	4013      	ands	r3, r2
 8007d84:	b29b      	uxth	r3, r3
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	bf0c      	ite	eq
 8007d8a:	2301      	moveq	r3, #1
 8007d8c:	2300      	movne	r3, #0
 8007d8e:	b2db      	uxtb	r3, r3
 8007d90:	461a      	mov	r2, r3
 8007d92:	79fb      	ldrb	r3, [r7, #7]
 8007d94:	429a      	cmp	r2, r3
 8007d96:	d0b6      	beq.n	8007d06 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007d98:	2300      	movs	r3, #0
}
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	3710      	adds	r7, #16
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	bd80      	pop	{r7, pc}

08007da2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007da2:	b580      	push	{r7, lr}
 8007da4:	b084      	sub	sp, #16
 8007da6:	af00      	add	r7, sp, #0
 8007da8:	60f8      	str	r0, [r7, #12]
 8007daa:	60b9      	str	r1, [r7, #8]
 8007dac:	607a      	str	r2, [r7, #4]
 8007dae:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007db0:	e051      	b.n	8007e56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	695b      	ldr	r3, [r3, #20]
 8007db8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007dbc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007dc0:	d123      	bne.n	8007e0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	681a      	ldr	r2, [r3, #0]
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007dd0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007dda:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	2200      	movs	r2, #0
 8007de0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	2220      	movs	r2, #32
 8007de6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	2200      	movs	r2, #0
 8007dee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007df6:	f043 0204 	orr.w	r2, r3, #4
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	2200      	movs	r2, #0
 8007e02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007e06:	2301      	movs	r3, #1
 8007e08:	e046      	b.n	8007e98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e10:	d021      	beq.n	8007e56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e12:	f7fd ffff 	bl	8005e14 <HAL_GetTick>
 8007e16:	4602      	mov	r2, r0
 8007e18:	683b      	ldr	r3, [r7, #0]
 8007e1a:	1ad3      	subs	r3, r2, r3
 8007e1c:	687a      	ldr	r2, [r7, #4]
 8007e1e:	429a      	cmp	r2, r3
 8007e20:	d302      	bcc.n	8007e28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d116      	bne.n	8007e56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	2220      	movs	r2, #32
 8007e32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	2200      	movs	r2, #0
 8007e3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e42:	f043 0220 	orr.w	r2, r3, #32
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007e52:	2301      	movs	r3, #1
 8007e54:	e020      	b.n	8007e98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007e56:	68bb      	ldr	r3, [r7, #8]
 8007e58:	0c1b      	lsrs	r3, r3, #16
 8007e5a:	b2db      	uxtb	r3, r3
 8007e5c:	2b01      	cmp	r3, #1
 8007e5e:	d10c      	bne.n	8007e7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	695b      	ldr	r3, [r3, #20]
 8007e66:	43da      	mvns	r2, r3
 8007e68:	68bb      	ldr	r3, [r7, #8]
 8007e6a:	4013      	ands	r3, r2
 8007e6c:	b29b      	uxth	r3, r3
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	bf14      	ite	ne
 8007e72:	2301      	movne	r3, #1
 8007e74:	2300      	moveq	r3, #0
 8007e76:	b2db      	uxtb	r3, r3
 8007e78:	e00b      	b.n	8007e92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	699b      	ldr	r3, [r3, #24]
 8007e80:	43da      	mvns	r2, r3
 8007e82:	68bb      	ldr	r3, [r7, #8]
 8007e84:	4013      	ands	r3, r2
 8007e86:	b29b      	uxth	r3, r3
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	bf14      	ite	ne
 8007e8c:	2301      	movne	r3, #1
 8007e8e:	2300      	moveq	r3, #0
 8007e90:	b2db      	uxtb	r3, r3
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d18d      	bne.n	8007db2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8007e96:	2300      	movs	r3, #0
}
 8007e98:	4618      	mov	r0, r3
 8007e9a:	3710      	adds	r7, #16
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	bd80      	pop	{r7, pc}

08007ea0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b084      	sub	sp, #16
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	60f8      	str	r0, [r7, #12]
 8007ea8:	60b9      	str	r1, [r7, #8]
 8007eaa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007eac:	e02d      	b.n	8007f0a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007eae:	68f8      	ldr	r0, [r7, #12]
 8007eb0:	f000 f8ce 	bl	8008050 <I2C_IsAcknowledgeFailed>
 8007eb4:	4603      	mov	r3, r0
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d001      	beq.n	8007ebe <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007eba:	2301      	movs	r3, #1
 8007ebc:	e02d      	b.n	8007f1a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007ebe:	68bb      	ldr	r3, [r7, #8]
 8007ec0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ec4:	d021      	beq.n	8007f0a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ec6:	f7fd ffa5 	bl	8005e14 <HAL_GetTick>
 8007eca:	4602      	mov	r2, r0
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	1ad3      	subs	r3, r2, r3
 8007ed0:	68ba      	ldr	r2, [r7, #8]
 8007ed2:	429a      	cmp	r2, r3
 8007ed4:	d302      	bcc.n	8007edc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007ed6:	68bb      	ldr	r3, [r7, #8]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d116      	bne.n	8007f0a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	2200      	movs	r2, #0
 8007ee0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	2220      	movs	r2, #32
 8007ee6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	2200      	movs	r2, #0
 8007eee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ef6:	f043 0220 	orr.w	r2, r3, #32
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	2200      	movs	r2, #0
 8007f02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007f06:	2301      	movs	r3, #1
 8007f08:	e007      	b.n	8007f1a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	695b      	ldr	r3, [r3, #20]
 8007f10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f14:	2b80      	cmp	r3, #128	; 0x80
 8007f16:	d1ca      	bne.n	8007eae <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007f18:	2300      	movs	r3, #0
}
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	3710      	adds	r7, #16
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	bd80      	pop	{r7, pc}

08007f22 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007f22:	b580      	push	{r7, lr}
 8007f24:	b084      	sub	sp, #16
 8007f26:	af00      	add	r7, sp, #0
 8007f28:	60f8      	str	r0, [r7, #12]
 8007f2a:	60b9      	str	r1, [r7, #8]
 8007f2c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007f2e:	e02d      	b.n	8007f8c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007f30:	68f8      	ldr	r0, [r7, #12]
 8007f32:	f000 f88d 	bl	8008050 <I2C_IsAcknowledgeFailed>
 8007f36:	4603      	mov	r3, r0
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d001      	beq.n	8007f40 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007f3c:	2301      	movs	r3, #1
 8007f3e:	e02d      	b.n	8007f9c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007f40:	68bb      	ldr	r3, [r7, #8]
 8007f42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f46:	d021      	beq.n	8007f8c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f48:	f7fd ff64 	bl	8005e14 <HAL_GetTick>
 8007f4c:	4602      	mov	r2, r0
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	1ad3      	subs	r3, r2, r3
 8007f52:	68ba      	ldr	r2, [r7, #8]
 8007f54:	429a      	cmp	r2, r3
 8007f56:	d302      	bcc.n	8007f5e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007f58:	68bb      	ldr	r3, [r7, #8]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d116      	bne.n	8007f8c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	2200      	movs	r2, #0
 8007f62:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	2220      	movs	r2, #32
 8007f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	2200      	movs	r2, #0
 8007f70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f78:	f043 0220 	orr.w	r2, r3, #32
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	2200      	movs	r2, #0
 8007f84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007f88:	2301      	movs	r3, #1
 8007f8a:	e007      	b.n	8007f9c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	695b      	ldr	r3, [r3, #20]
 8007f92:	f003 0304 	and.w	r3, r3, #4
 8007f96:	2b04      	cmp	r3, #4
 8007f98:	d1ca      	bne.n	8007f30 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007f9a:	2300      	movs	r3, #0
}
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	3710      	adds	r7, #16
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	bd80      	pop	{r7, pc}

08007fa4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b084      	sub	sp, #16
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	60f8      	str	r0, [r7, #12]
 8007fac:	60b9      	str	r1, [r7, #8]
 8007fae:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007fb0:	e042      	b.n	8008038 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	695b      	ldr	r3, [r3, #20]
 8007fb8:	f003 0310 	and.w	r3, r3, #16
 8007fbc:	2b10      	cmp	r3, #16
 8007fbe:	d119      	bne.n	8007ff4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	f06f 0210 	mvn.w	r2, #16
 8007fc8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	2200      	movs	r2, #0
 8007fce:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	2220      	movs	r2, #32
 8007fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	2200      	movs	r2, #0
 8007fdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	2200      	movs	r2, #0
 8007fec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007ff0:	2301      	movs	r3, #1
 8007ff2:	e029      	b.n	8008048 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ff4:	f7fd ff0e 	bl	8005e14 <HAL_GetTick>
 8007ff8:	4602      	mov	r2, r0
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	1ad3      	subs	r3, r2, r3
 8007ffe:	68ba      	ldr	r2, [r7, #8]
 8008000:	429a      	cmp	r2, r3
 8008002:	d302      	bcc.n	800800a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8008004:	68bb      	ldr	r3, [r7, #8]
 8008006:	2b00      	cmp	r3, #0
 8008008:	d116      	bne.n	8008038 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	2200      	movs	r2, #0
 800800e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	2220      	movs	r2, #32
 8008014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	2200      	movs	r2, #0
 800801c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008024:	f043 0220 	orr.w	r2, r3, #32
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	2200      	movs	r2, #0
 8008030:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008034:	2301      	movs	r3, #1
 8008036:	e007      	b.n	8008048 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	695b      	ldr	r3, [r3, #20]
 800803e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008042:	2b40      	cmp	r3, #64	; 0x40
 8008044:	d1b5      	bne.n	8007fb2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8008046:	2300      	movs	r3, #0
}
 8008048:	4618      	mov	r0, r3
 800804a:	3710      	adds	r7, #16
 800804c:	46bd      	mov	sp, r7
 800804e:	bd80      	pop	{r7, pc}

08008050 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8008050:	b480      	push	{r7}
 8008052:	b083      	sub	sp, #12
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	695b      	ldr	r3, [r3, #20]
 800805e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008062:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008066:	d11b      	bne.n	80080a0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008070:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	2200      	movs	r2, #0
 8008076:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	2220      	movs	r2, #32
 800807c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	2200      	movs	r2, #0
 8008084:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800808c:	f043 0204 	orr.w	r2, r3, #4
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2200      	movs	r2, #0
 8008098:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800809c:	2301      	movs	r3, #1
 800809e:	e000      	b.n	80080a2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80080a0:	2300      	movs	r3, #0
}
 80080a2:	4618      	mov	r0, r3
 80080a4:	370c      	adds	r7, #12
 80080a6:	46bd      	mov	sp, r7
 80080a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ac:	4770      	bx	lr
	...

080080b0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80080b0:	b580      	push	{r7, lr}
 80080b2:	b086      	sub	sp, #24
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d101      	bne.n	80080c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80080be:	2301      	movs	r3, #1
 80080c0:	e267      	b.n	8008592 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	f003 0301 	and.w	r3, r3, #1
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d075      	beq.n	80081ba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80080ce:	4b88      	ldr	r3, [pc, #544]	; (80082f0 <HAL_RCC_OscConfig+0x240>)
 80080d0:	689b      	ldr	r3, [r3, #8]
 80080d2:	f003 030c 	and.w	r3, r3, #12
 80080d6:	2b04      	cmp	r3, #4
 80080d8:	d00c      	beq.n	80080f4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80080da:	4b85      	ldr	r3, [pc, #532]	; (80082f0 <HAL_RCC_OscConfig+0x240>)
 80080dc:	689b      	ldr	r3, [r3, #8]
 80080de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80080e2:	2b08      	cmp	r3, #8
 80080e4:	d112      	bne.n	800810c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80080e6:	4b82      	ldr	r3, [pc, #520]	; (80082f0 <HAL_RCC_OscConfig+0x240>)
 80080e8:	685b      	ldr	r3, [r3, #4]
 80080ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80080ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80080f2:	d10b      	bne.n	800810c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80080f4:	4b7e      	ldr	r3, [pc, #504]	; (80082f0 <HAL_RCC_OscConfig+0x240>)
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d05b      	beq.n	80081b8 <HAL_RCC_OscConfig+0x108>
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	685b      	ldr	r3, [r3, #4]
 8008104:	2b00      	cmp	r3, #0
 8008106:	d157      	bne.n	80081b8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008108:	2301      	movs	r3, #1
 800810a:	e242      	b.n	8008592 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	685b      	ldr	r3, [r3, #4]
 8008110:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008114:	d106      	bne.n	8008124 <HAL_RCC_OscConfig+0x74>
 8008116:	4b76      	ldr	r3, [pc, #472]	; (80082f0 <HAL_RCC_OscConfig+0x240>)
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	4a75      	ldr	r2, [pc, #468]	; (80082f0 <HAL_RCC_OscConfig+0x240>)
 800811c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008120:	6013      	str	r3, [r2, #0]
 8008122:	e01d      	b.n	8008160 <HAL_RCC_OscConfig+0xb0>
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	685b      	ldr	r3, [r3, #4]
 8008128:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800812c:	d10c      	bne.n	8008148 <HAL_RCC_OscConfig+0x98>
 800812e:	4b70      	ldr	r3, [pc, #448]	; (80082f0 <HAL_RCC_OscConfig+0x240>)
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	4a6f      	ldr	r2, [pc, #444]	; (80082f0 <HAL_RCC_OscConfig+0x240>)
 8008134:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008138:	6013      	str	r3, [r2, #0]
 800813a:	4b6d      	ldr	r3, [pc, #436]	; (80082f0 <HAL_RCC_OscConfig+0x240>)
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	4a6c      	ldr	r2, [pc, #432]	; (80082f0 <HAL_RCC_OscConfig+0x240>)
 8008140:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008144:	6013      	str	r3, [r2, #0]
 8008146:	e00b      	b.n	8008160 <HAL_RCC_OscConfig+0xb0>
 8008148:	4b69      	ldr	r3, [pc, #420]	; (80082f0 <HAL_RCC_OscConfig+0x240>)
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	4a68      	ldr	r2, [pc, #416]	; (80082f0 <HAL_RCC_OscConfig+0x240>)
 800814e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008152:	6013      	str	r3, [r2, #0]
 8008154:	4b66      	ldr	r3, [pc, #408]	; (80082f0 <HAL_RCC_OscConfig+0x240>)
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	4a65      	ldr	r2, [pc, #404]	; (80082f0 <HAL_RCC_OscConfig+0x240>)
 800815a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800815e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	685b      	ldr	r3, [r3, #4]
 8008164:	2b00      	cmp	r3, #0
 8008166:	d013      	beq.n	8008190 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008168:	f7fd fe54 	bl	8005e14 <HAL_GetTick>
 800816c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800816e:	e008      	b.n	8008182 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008170:	f7fd fe50 	bl	8005e14 <HAL_GetTick>
 8008174:	4602      	mov	r2, r0
 8008176:	693b      	ldr	r3, [r7, #16]
 8008178:	1ad3      	subs	r3, r2, r3
 800817a:	2b64      	cmp	r3, #100	; 0x64
 800817c:	d901      	bls.n	8008182 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800817e:	2303      	movs	r3, #3
 8008180:	e207      	b.n	8008592 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008182:	4b5b      	ldr	r3, [pc, #364]	; (80082f0 <HAL_RCC_OscConfig+0x240>)
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800818a:	2b00      	cmp	r3, #0
 800818c:	d0f0      	beq.n	8008170 <HAL_RCC_OscConfig+0xc0>
 800818e:	e014      	b.n	80081ba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008190:	f7fd fe40 	bl	8005e14 <HAL_GetTick>
 8008194:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008196:	e008      	b.n	80081aa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008198:	f7fd fe3c 	bl	8005e14 <HAL_GetTick>
 800819c:	4602      	mov	r2, r0
 800819e:	693b      	ldr	r3, [r7, #16]
 80081a0:	1ad3      	subs	r3, r2, r3
 80081a2:	2b64      	cmp	r3, #100	; 0x64
 80081a4:	d901      	bls.n	80081aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80081a6:	2303      	movs	r3, #3
 80081a8:	e1f3      	b.n	8008592 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80081aa:	4b51      	ldr	r3, [pc, #324]	; (80082f0 <HAL_RCC_OscConfig+0x240>)
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d1f0      	bne.n	8008198 <HAL_RCC_OscConfig+0xe8>
 80081b6:	e000      	b.n	80081ba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80081b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	f003 0302 	and.w	r3, r3, #2
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d063      	beq.n	800828e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80081c6:	4b4a      	ldr	r3, [pc, #296]	; (80082f0 <HAL_RCC_OscConfig+0x240>)
 80081c8:	689b      	ldr	r3, [r3, #8]
 80081ca:	f003 030c 	and.w	r3, r3, #12
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d00b      	beq.n	80081ea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80081d2:	4b47      	ldr	r3, [pc, #284]	; (80082f0 <HAL_RCC_OscConfig+0x240>)
 80081d4:	689b      	ldr	r3, [r3, #8]
 80081d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80081da:	2b08      	cmp	r3, #8
 80081dc:	d11c      	bne.n	8008218 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80081de:	4b44      	ldr	r3, [pc, #272]	; (80082f0 <HAL_RCC_OscConfig+0x240>)
 80081e0:	685b      	ldr	r3, [r3, #4]
 80081e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d116      	bne.n	8008218 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80081ea:	4b41      	ldr	r3, [pc, #260]	; (80082f0 <HAL_RCC_OscConfig+0x240>)
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	f003 0302 	and.w	r3, r3, #2
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d005      	beq.n	8008202 <HAL_RCC_OscConfig+0x152>
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	68db      	ldr	r3, [r3, #12]
 80081fa:	2b01      	cmp	r3, #1
 80081fc:	d001      	beq.n	8008202 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80081fe:	2301      	movs	r3, #1
 8008200:	e1c7      	b.n	8008592 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008202:	4b3b      	ldr	r3, [pc, #236]	; (80082f0 <HAL_RCC_OscConfig+0x240>)
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	691b      	ldr	r3, [r3, #16]
 800820e:	00db      	lsls	r3, r3, #3
 8008210:	4937      	ldr	r1, [pc, #220]	; (80082f0 <HAL_RCC_OscConfig+0x240>)
 8008212:	4313      	orrs	r3, r2
 8008214:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008216:	e03a      	b.n	800828e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	68db      	ldr	r3, [r3, #12]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d020      	beq.n	8008262 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008220:	4b34      	ldr	r3, [pc, #208]	; (80082f4 <HAL_RCC_OscConfig+0x244>)
 8008222:	2201      	movs	r2, #1
 8008224:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008226:	f7fd fdf5 	bl	8005e14 <HAL_GetTick>
 800822a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800822c:	e008      	b.n	8008240 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800822e:	f7fd fdf1 	bl	8005e14 <HAL_GetTick>
 8008232:	4602      	mov	r2, r0
 8008234:	693b      	ldr	r3, [r7, #16]
 8008236:	1ad3      	subs	r3, r2, r3
 8008238:	2b02      	cmp	r3, #2
 800823a:	d901      	bls.n	8008240 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800823c:	2303      	movs	r3, #3
 800823e:	e1a8      	b.n	8008592 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008240:	4b2b      	ldr	r3, [pc, #172]	; (80082f0 <HAL_RCC_OscConfig+0x240>)
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	f003 0302 	and.w	r3, r3, #2
 8008248:	2b00      	cmp	r3, #0
 800824a:	d0f0      	beq.n	800822e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800824c:	4b28      	ldr	r3, [pc, #160]	; (80082f0 <HAL_RCC_OscConfig+0x240>)
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	691b      	ldr	r3, [r3, #16]
 8008258:	00db      	lsls	r3, r3, #3
 800825a:	4925      	ldr	r1, [pc, #148]	; (80082f0 <HAL_RCC_OscConfig+0x240>)
 800825c:	4313      	orrs	r3, r2
 800825e:	600b      	str	r3, [r1, #0]
 8008260:	e015      	b.n	800828e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008262:	4b24      	ldr	r3, [pc, #144]	; (80082f4 <HAL_RCC_OscConfig+0x244>)
 8008264:	2200      	movs	r2, #0
 8008266:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008268:	f7fd fdd4 	bl	8005e14 <HAL_GetTick>
 800826c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800826e:	e008      	b.n	8008282 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008270:	f7fd fdd0 	bl	8005e14 <HAL_GetTick>
 8008274:	4602      	mov	r2, r0
 8008276:	693b      	ldr	r3, [r7, #16]
 8008278:	1ad3      	subs	r3, r2, r3
 800827a:	2b02      	cmp	r3, #2
 800827c:	d901      	bls.n	8008282 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800827e:	2303      	movs	r3, #3
 8008280:	e187      	b.n	8008592 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008282:	4b1b      	ldr	r3, [pc, #108]	; (80082f0 <HAL_RCC_OscConfig+0x240>)
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	f003 0302 	and.w	r3, r3, #2
 800828a:	2b00      	cmp	r3, #0
 800828c:	d1f0      	bne.n	8008270 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	f003 0308 	and.w	r3, r3, #8
 8008296:	2b00      	cmp	r3, #0
 8008298:	d036      	beq.n	8008308 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	695b      	ldr	r3, [r3, #20]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d016      	beq.n	80082d0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80082a2:	4b15      	ldr	r3, [pc, #84]	; (80082f8 <HAL_RCC_OscConfig+0x248>)
 80082a4:	2201      	movs	r2, #1
 80082a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80082a8:	f7fd fdb4 	bl	8005e14 <HAL_GetTick>
 80082ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80082ae:	e008      	b.n	80082c2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80082b0:	f7fd fdb0 	bl	8005e14 <HAL_GetTick>
 80082b4:	4602      	mov	r2, r0
 80082b6:	693b      	ldr	r3, [r7, #16]
 80082b8:	1ad3      	subs	r3, r2, r3
 80082ba:	2b02      	cmp	r3, #2
 80082bc:	d901      	bls.n	80082c2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80082be:	2303      	movs	r3, #3
 80082c0:	e167      	b.n	8008592 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80082c2:	4b0b      	ldr	r3, [pc, #44]	; (80082f0 <HAL_RCC_OscConfig+0x240>)
 80082c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80082c6:	f003 0302 	and.w	r3, r3, #2
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d0f0      	beq.n	80082b0 <HAL_RCC_OscConfig+0x200>
 80082ce:	e01b      	b.n	8008308 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80082d0:	4b09      	ldr	r3, [pc, #36]	; (80082f8 <HAL_RCC_OscConfig+0x248>)
 80082d2:	2200      	movs	r2, #0
 80082d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80082d6:	f7fd fd9d 	bl	8005e14 <HAL_GetTick>
 80082da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80082dc:	e00e      	b.n	80082fc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80082de:	f7fd fd99 	bl	8005e14 <HAL_GetTick>
 80082e2:	4602      	mov	r2, r0
 80082e4:	693b      	ldr	r3, [r7, #16]
 80082e6:	1ad3      	subs	r3, r2, r3
 80082e8:	2b02      	cmp	r3, #2
 80082ea:	d907      	bls.n	80082fc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80082ec:	2303      	movs	r3, #3
 80082ee:	e150      	b.n	8008592 <HAL_RCC_OscConfig+0x4e2>
 80082f0:	40023800 	.word	0x40023800
 80082f4:	42470000 	.word	0x42470000
 80082f8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80082fc:	4b88      	ldr	r3, [pc, #544]	; (8008520 <HAL_RCC_OscConfig+0x470>)
 80082fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008300:	f003 0302 	and.w	r3, r3, #2
 8008304:	2b00      	cmp	r3, #0
 8008306:	d1ea      	bne.n	80082de <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	f003 0304 	and.w	r3, r3, #4
 8008310:	2b00      	cmp	r3, #0
 8008312:	f000 8097 	beq.w	8008444 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008316:	2300      	movs	r3, #0
 8008318:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800831a:	4b81      	ldr	r3, [pc, #516]	; (8008520 <HAL_RCC_OscConfig+0x470>)
 800831c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800831e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008322:	2b00      	cmp	r3, #0
 8008324:	d10f      	bne.n	8008346 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008326:	2300      	movs	r3, #0
 8008328:	60bb      	str	r3, [r7, #8]
 800832a:	4b7d      	ldr	r3, [pc, #500]	; (8008520 <HAL_RCC_OscConfig+0x470>)
 800832c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800832e:	4a7c      	ldr	r2, [pc, #496]	; (8008520 <HAL_RCC_OscConfig+0x470>)
 8008330:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008334:	6413      	str	r3, [r2, #64]	; 0x40
 8008336:	4b7a      	ldr	r3, [pc, #488]	; (8008520 <HAL_RCC_OscConfig+0x470>)
 8008338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800833a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800833e:	60bb      	str	r3, [r7, #8]
 8008340:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008342:	2301      	movs	r3, #1
 8008344:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008346:	4b77      	ldr	r3, [pc, #476]	; (8008524 <HAL_RCC_OscConfig+0x474>)
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800834e:	2b00      	cmp	r3, #0
 8008350:	d118      	bne.n	8008384 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008352:	4b74      	ldr	r3, [pc, #464]	; (8008524 <HAL_RCC_OscConfig+0x474>)
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	4a73      	ldr	r2, [pc, #460]	; (8008524 <HAL_RCC_OscConfig+0x474>)
 8008358:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800835c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800835e:	f7fd fd59 	bl	8005e14 <HAL_GetTick>
 8008362:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008364:	e008      	b.n	8008378 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008366:	f7fd fd55 	bl	8005e14 <HAL_GetTick>
 800836a:	4602      	mov	r2, r0
 800836c:	693b      	ldr	r3, [r7, #16]
 800836e:	1ad3      	subs	r3, r2, r3
 8008370:	2b02      	cmp	r3, #2
 8008372:	d901      	bls.n	8008378 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8008374:	2303      	movs	r3, #3
 8008376:	e10c      	b.n	8008592 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008378:	4b6a      	ldr	r3, [pc, #424]	; (8008524 <HAL_RCC_OscConfig+0x474>)
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008380:	2b00      	cmp	r3, #0
 8008382:	d0f0      	beq.n	8008366 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	689b      	ldr	r3, [r3, #8]
 8008388:	2b01      	cmp	r3, #1
 800838a:	d106      	bne.n	800839a <HAL_RCC_OscConfig+0x2ea>
 800838c:	4b64      	ldr	r3, [pc, #400]	; (8008520 <HAL_RCC_OscConfig+0x470>)
 800838e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008390:	4a63      	ldr	r2, [pc, #396]	; (8008520 <HAL_RCC_OscConfig+0x470>)
 8008392:	f043 0301 	orr.w	r3, r3, #1
 8008396:	6713      	str	r3, [r2, #112]	; 0x70
 8008398:	e01c      	b.n	80083d4 <HAL_RCC_OscConfig+0x324>
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	689b      	ldr	r3, [r3, #8]
 800839e:	2b05      	cmp	r3, #5
 80083a0:	d10c      	bne.n	80083bc <HAL_RCC_OscConfig+0x30c>
 80083a2:	4b5f      	ldr	r3, [pc, #380]	; (8008520 <HAL_RCC_OscConfig+0x470>)
 80083a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083a6:	4a5e      	ldr	r2, [pc, #376]	; (8008520 <HAL_RCC_OscConfig+0x470>)
 80083a8:	f043 0304 	orr.w	r3, r3, #4
 80083ac:	6713      	str	r3, [r2, #112]	; 0x70
 80083ae:	4b5c      	ldr	r3, [pc, #368]	; (8008520 <HAL_RCC_OscConfig+0x470>)
 80083b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083b2:	4a5b      	ldr	r2, [pc, #364]	; (8008520 <HAL_RCC_OscConfig+0x470>)
 80083b4:	f043 0301 	orr.w	r3, r3, #1
 80083b8:	6713      	str	r3, [r2, #112]	; 0x70
 80083ba:	e00b      	b.n	80083d4 <HAL_RCC_OscConfig+0x324>
 80083bc:	4b58      	ldr	r3, [pc, #352]	; (8008520 <HAL_RCC_OscConfig+0x470>)
 80083be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083c0:	4a57      	ldr	r2, [pc, #348]	; (8008520 <HAL_RCC_OscConfig+0x470>)
 80083c2:	f023 0301 	bic.w	r3, r3, #1
 80083c6:	6713      	str	r3, [r2, #112]	; 0x70
 80083c8:	4b55      	ldr	r3, [pc, #340]	; (8008520 <HAL_RCC_OscConfig+0x470>)
 80083ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083cc:	4a54      	ldr	r2, [pc, #336]	; (8008520 <HAL_RCC_OscConfig+0x470>)
 80083ce:	f023 0304 	bic.w	r3, r3, #4
 80083d2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	689b      	ldr	r3, [r3, #8]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d015      	beq.n	8008408 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80083dc:	f7fd fd1a 	bl	8005e14 <HAL_GetTick>
 80083e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80083e2:	e00a      	b.n	80083fa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80083e4:	f7fd fd16 	bl	8005e14 <HAL_GetTick>
 80083e8:	4602      	mov	r2, r0
 80083ea:	693b      	ldr	r3, [r7, #16]
 80083ec:	1ad3      	subs	r3, r2, r3
 80083ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80083f2:	4293      	cmp	r3, r2
 80083f4:	d901      	bls.n	80083fa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80083f6:	2303      	movs	r3, #3
 80083f8:	e0cb      	b.n	8008592 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80083fa:	4b49      	ldr	r3, [pc, #292]	; (8008520 <HAL_RCC_OscConfig+0x470>)
 80083fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083fe:	f003 0302 	and.w	r3, r3, #2
 8008402:	2b00      	cmp	r3, #0
 8008404:	d0ee      	beq.n	80083e4 <HAL_RCC_OscConfig+0x334>
 8008406:	e014      	b.n	8008432 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008408:	f7fd fd04 	bl	8005e14 <HAL_GetTick>
 800840c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800840e:	e00a      	b.n	8008426 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008410:	f7fd fd00 	bl	8005e14 <HAL_GetTick>
 8008414:	4602      	mov	r2, r0
 8008416:	693b      	ldr	r3, [r7, #16]
 8008418:	1ad3      	subs	r3, r2, r3
 800841a:	f241 3288 	movw	r2, #5000	; 0x1388
 800841e:	4293      	cmp	r3, r2
 8008420:	d901      	bls.n	8008426 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8008422:	2303      	movs	r3, #3
 8008424:	e0b5      	b.n	8008592 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008426:	4b3e      	ldr	r3, [pc, #248]	; (8008520 <HAL_RCC_OscConfig+0x470>)
 8008428:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800842a:	f003 0302 	and.w	r3, r3, #2
 800842e:	2b00      	cmp	r3, #0
 8008430:	d1ee      	bne.n	8008410 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008432:	7dfb      	ldrb	r3, [r7, #23]
 8008434:	2b01      	cmp	r3, #1
 8008436:	d105      	bne.n	8008444 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008438:	4b39      	ldr	r3, [pc, #228]	; (8008520 <HAL_RCC_OscConfig+0x470>)
 800843a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800843c:	4a38      	ldr	r2, [pc, #224]	; (8008520 <HAL_RCC_OscConfig+0x470>)
 800843e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008442:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	699b      	ldr	r3, [r3, #24]
 8008448:	2b00      	cmp	r3, #0
 800844a:	f000 80a1 	beq.w	8008590 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800844e:	4b34      	ldr	r3, [pc, #208]	; (8008520 <HAL_RCC_OscConfig+0x470>)
 8008450:	689b      	ldr	r3, [r3, #8]
 8008452:	f003 030c 	and.w	r3, r3, #12
 8008456:	2b08      	cmp	r3, #8
 8008458:	d05c      	beq.n	8008514 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	699b      	ldr	r3, [r3, #24]
 800845e:	2b02      	cmp	r3, #2
 8008460:	d141      	bne.n	80084e6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008462:	4b31      	ldr	r3, [pc, #196]	; (8008528 <HAL_RCC_OscConfig+0x478>)
 8008464:	2200      	movs	r2, #0
 8008466:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008468:	f7fd fcd4 	bl	8005e14 <HAL_GetTick>
 800846c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800846e:	e008      	b.n	8008482 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008470:	f7fd fcd0 	bl	8005e14 <HAL_GetTick>
 8008474:	4602      	mov	r2, r0
 8008476:	693b      	ldr	r3, [r7, #16]
 8008478:	1ad3      	subs	r3, r2, r3
 800847a:	2b02      	cmp	r3, #2
 800847c:	d901      	bls.n	8008482 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800847e:	2303      	movs	r3, #3
 8008480:	e087      	b.n	8008592 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008482:	4b27      	ldr	r3, [pc, #156]	; (8008520 <HAL_RCC_OscConfig+0x470>)
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800848a:	2b00      	cmp	r3, #0
 800848c:	d1f0      	bne.n	8008470 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	69da      	ldr	r2, [r3, #28]
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	6a1b      	ldr	r3, [r3, #32]
 8008496:	431a      	orrs	r2, r3
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800849c:	019b      	lsls	r3, r3, #6
 800849e:	431a      	orrs	r2, r3
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084a4:	085b      	lsrs	r3, r3, #1
 80084a6:	3b01      	subs	r3, #1
 80084a8:	041b      	lsls	r3, r3, #16
 80084aa:	431a      	orrs	r2, r3
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084b0:	061b      	lsls	r3, r3, #24
 80084b2:	491b      	ldr	r1, [pc, #108]	; (8008520 <HAL_RCC_OscConfig+0x470>)
 80084b4:	4313      	orrs	r3, r2
 80084b6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80084b8:	4b1b      	ldr	r3, [pc, #108]	; (8008528 <HAL_RCC_OscConfig+0x478>)
 80084ba:	2201      	movs	r2, #1
 80084bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80084be:	f7fd fca9 	bl	8005e14 <HAL_GetTick>
 80084c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80084c4:	e008      	b.n	80084d8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80084c6:	f7fd fca5 	bl	8005e14 <HAL_GetTick>
 80084ca:	4602      	mov	r2, r0
 80084cc:	693b      	ldr	r3, [r7, #16]
 80084ce:	1ad3      	subs	r3, r2, r3
 80084d0:	2b02      	cmp	r3, #2
 80084d2:	d901      	bls.n	80084d8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80084d4:	2303      	movs	r3, #3
 80084d6:	e05c      	b.n	8008592 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80084d8:	4b11      	ldr	r3, [pc, #68]	; (8008520 <HAL_RCC_OscConfig+0x470>)
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d0f0      	beq.n	80084c6 <HAL_RCC_OscConfig+0x416>
 80084e4:	e054      	b.n	8008590 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80084e6:	4b10      	ldr	r3, [pc, #64]	; (8008528 <HAL_RCC_OscConfig+0x478>)
 80084e8:	2200      	movs	r2, #0
 80084ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80084ec:	f7fd fc92 	bl	8005e14 <HAL_GetTick>
 80084f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80084f2:	e008      	b.n	8008506 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80084f4:	f7fd fc8e 	bl	8005e14 <HAL_GetTick>
 80084f8:	4602      	mov	r2, r0
 80084fa:	693b      	ldr	r3, [r7, #16]
 80084fc:	1ad3      	subs	r3, r2, r3
 80084fe:	2b02      	cmp	r3, #2
 8008500:	d901      	bls.n	8008506 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8008502:	2303      	movs	r3, #3
 8008504:	e045      	b.n	8008592 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008506:	4b06      	ldr	r3, [pc, #24]	; (8008520 <HAL_RCC_OscConfig+0x470>)
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800850e:	2b00      	cmp	r3, #0
 8008510:	d1f0      	bne.n	80084f4 <HAL_RCC_OscConfig+0x444>
 8008512:	e03d      	b.n	8008590 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	699b      	ldr	r3, [r3, #24]
 8008518:	2b01      	cmp	r3, #1
 800851a:	d107      	bne.n	800852c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800851c:	2301      	movs	r3, #1
 800851e:	e038      	b.n	8008592 <HAL_RCC_OscConfig+0x4e2>
 8008520:	40023800 	.word	0x40023800
 8008524:	40007000 	.word	0x40007000
 8008528:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800852c:	4b1b      	ldr	r3, [pc, #108]	; (800859c <HAL_RCC_OscConfig+0x4ec>)
 800852e:	685b      	ldr	r3, [r3, #4]
 8008530:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	699b      	ldr	r3, [r3, #24]
 8008536:	2b01      	cmp	r3, #1
 8008538:	d028      	beq.n	800858c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008544:	429a      	cmp	r2, r3
 8008546:	d121      	bne.n	800858c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008552:	429a      	cmp	r2, r3
 8008554:	d11a      	bne.n	800858c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008556:	68fa      	ldr	r2, [r7, #12]
 8008558:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800855c:	4013      	ands	r3, r2
 800855e:	687a      	ldr	r2, [r7, #4]
 8008560:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008562:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008564:	4293      	cmp	r3, r2
 8008566:	d111      	bne.n	800858c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008572:	085b      	lsrs	r3, r3, #1
 8008574:	3b01      	subs	r3, #1
 8008576:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008578:	429a      	cmp	r2, r3
 800857a:	d107      	bne.n	800858c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008586:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008588:	429a      	cmp	r2, r3
 800858a:	d001      	beq.n	8008590 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800858c:	2301      	movs	r3, #1
 800858e:	e000      	b.n	8008592 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8008590:	2300      	movs	r3, #0
}
 8008592:	4618      	mov	r0, r3
 8008594:	3718      	adds	r7, #24
 8008596:	46bd      	mov	sp, r7
 8008598:	bd80      	pop	{r7, pc}
 800859a:	bf00      	nop
 800859c:	40023800 	.word	0x40023800

080085a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80085a0:	b580      	push	{r7, lr}
 80085a2:	b084      	sub	sp, #16
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
 80085a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d101      	bne.n	80085b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80085b0:	2301      	movs	r3, #1
 80085b2:	e0cc      	b.n	800874e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80085b4:	4b68      	ldr	r3, [pc, #416]	; (8008758 <HAL_RCC_ClockConfig+0x1b8>)
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	f003 0307 	and.w	r3, r3, #7
 80085bc:	683a      	ldr	r2, [r7, #0]
 80085be:	429a      	cmp	r2, r3
 80085c0:	d90c      	bls.n	80085dc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80085c2:	4b65      	ldr	r3, [pc, #404]	; (8008758 <HAL_RCC_ClockConfig+0x1b8>)
 80085c4:	683a      	ldr	r2, [r7, #0]
 80085c6:	b2d2      	uxtb	r2, r2
 80085c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80085ca:	4b63      	ldr	r3, [pc, #396]	; (8008758 <HAL_RCC_ClockConfig+0x1b8>)
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	f003 0307 	and.w	r3, r3, #7
 80085d2:	683a      	ldr	r2, [r7, #0]
 80085d4:	429a      	cmp	r2, r3
 80085d6:	d001      	beq.n	80085dc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80085d8:	2301      	movs	r3, #1
 80085da:	e0b8      	b.n	800874e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	f003 0302 	and.w	r3, r3, #2
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d020      	beq.n	800862a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	f003 0304 	and.w	r3, r3, #4
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d005      	beq.n	8008600 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80085f4:	4b59      	ldr	r3, [pc, #356]	; (800875c <HAL_RCC_ClockConfig+0x1bc>)
 80085f6:	689b      	ldr	r3, [r3, #8]
 80085f8:	4a58      	ldr	r2, [pc, #352]	; (800875c <HAL_RCC_ClockConfig+0x1bc>)
 80085fa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80085fe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	f003 0308 	and.w	r3, r3, #8
 8008608:	2b00      	cmp	r3, #0
 800860a:	d005      	beq.n	8008618 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800860c:	4b53      	ldr	r3, [pc, #332]	; (800875c <HAL_RCC_ClockConfig+0x1bc>)
 800860e:	689b      	ldr	r3, [r3, #8]
 8008610:	4a52      	ldr	r2, [pc, #328]	; (800875c <HAL_RCC_ClockConfig+0x1bc>)
 8008612:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008616:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008618:	4b50      	ldr	r3, [pc, #320]	; (800875c <HAL_RCC_ClockConfig+0x1bc>)
 800861a:	689b      	ldr	r3, [r3, #8]
 800861c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	689b      	ldr	r3, [r3, #8]
 8008624:	494d      	ldr	r1, [pc, #308]	; (800875c <HAL_RCC_ClockConfig+0x1bc>)
 8008626:	4313      	orrs	r3, r2
 8008628:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	f003 0301 	and.w	r3, r3, #1
 8008632:	2b00      	cmp	r3, #0
 8008634:	d044      	beq.n	80086c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	685b      	ldr	r3, [r3, #4]
 800863a:	2b01      	cmp	r3, #1
 800863c:	d107      	bne.n	800864e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800863e:	4b47      	ldr	r3, [pc, #284]	; (800875c <HAL_RCC_ClockConfig+0x1bc>)
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008646:	2b00      	cmp	r3, #0
 8008648:	d119      	bne.n	800867e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800864a:	2301      	movs	r3, #1
 800864c:	e07f      	b.n	800874e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	685b      	ldr	r3, [r3, #4]
 8008652:	2b02      	cmp	r3, #2
 8008654:	d003      	beq.n	800865e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800865a:	2b03      	cmp	r3, #3
 800865c:	d107      	bne.n	800866e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800865e:	4b3f      	ldr	r3, [pc, #252]	; (800875c <HAL_RCC_ClockConfig+0x1bc>)
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008666:	2b00      	cmp	r3, #0
 8008668:	d109      	bne.n	800867e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800866a:	2301      	movs	r3, #1
 800866c:	e06f      	b.n	800874e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800866e:	4b3b      	ldr	r3, [pc, #236]	; (800875c <HAL_RCC_ClockConfig+0x1bc>)
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	f003 0302 	and.w	r3, r3, #2
 8008676:	2b00      	cmp	r3, #0
 8008678:	d101      	bne.n	800867e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800867a:	2301      	movs	r3, #1
 800867c:	e067      	b.n	800874e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800867e:	4b37      	ldr	r3, [pc, #220]	; (800875c <HAL_RCC_ClockConfig+0x1bc>)
 8008680:	689b      	ldr	r3, [r3, #8]
 8008682:	f023 0203 	bic.w	r2, r3, #3
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	685b      	ldr	r3, [r3, #4]
 800868a:	4934      	ldr	r1, [pc, #208]	; (800875c <HAL_RCC_ClockConfig+0x1bc>)
 800868c:	4313      	orrs	r3, r2
 800868e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008690:	f7fd fbc0 	bl	8005e14 <HAL_GetTick>
 8008694:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008696:	e00a      	b.n	80086ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008698:	f7fd fbbc 	bl	8005e14 <HAL_GetTick>
 800869c:	4602      	mov	r2, r0
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	1ad3      	subs	r3, r2, r3
 80086a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80086a6:	4293      	cmp	r3, r2
 80086a8:	d901      	bls.n	80086ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80086aa:	2303      	movs	r3, #3
 80086ac:	e04f      	b.n	800874e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80086ae:	4b2b      	ldr	r3, [pc, #172]	; (800875c <HAL_RCC_ClockConfig+0x1bc>)
 80086b0:	689b      	ldr	r3, [r3, #8]
 80086b2:	f003 020c 	and.w	r2, r3, #12
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	685b      	ldr	r3, [r3, #4]
 80086ba:	009b      	lsls	r3, r3, #2
 80086bc:	429a      	cmp	r2, r3
 80086be:	d1eb      	bne.n	8008698 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80086c0:	4b25      	ldr	r3, [pc, #148]	; (8008758 <HAL_RCC_ClockConfig+0x1b8>)
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	f003 0307 	and.w	r3, r3, #7
 80086c8:	683a      	ldr	r2, [r7, #0]
 80086ca:	429a      	cmp	r2, r3
 80086cc:	d20c      	bcs.n	80086e8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80086ce:	4b22      	ldr	r3, [pc, #136]	; (8008758 <HAL_RCC_ClockConfig+0x1b8>)
 80086d0:	683a      	ldr	r2, [r7, #0]
 80086d2:	b2d2      	uxtb	r2, r2
 80086d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80086d6:	4b20      	ldr	r3, [pc, #128]	; (8008758 <HAL_RCC_ClockConfig+0x1b8>)
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	f003 0307 	and.w	r3, r3, #7
 80086de:	683a      	ldr	r2, [r7, #0]
 80086e0:	429a      	cmp	r2, r3
 80086e2:	d001      	beq.n	80086e8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80086e4:	2301      	movs	r3, #1
 80086e6:	e032      	b.n	800874e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	f003 0304 	and.w	r3, r3, #4
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d008      	beq.n	8008706 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80086f4:	4b19      	ldr	r3, [pc, #100]	; (800875c <HAL_RCC_ClockConfig+0x1bc>)
 80086f6:	689b      	ldr	r3, [r3, #8]
 80086f8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	68db      	ldr	r3, [r3, #12]
 8008700:	4916      	ldr	r1, [pc, #88]	; (800875c <HAL_RCC_ClockConfig+0x1bc>)
 8008702:	4313      	orrs	r3, r2
 8008704:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	f003 0308 	and.w	r3, r3, #8
 800870e:	2b00      	cmp	r3, #0
 8008710:	d009      	beq.n	8008726 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008712:	4b12      	ldr	r3, [pc, #72]	; (800875c <HAL_RCC_ClockConfig+0x1bc>)
 8008714:	689b      	ldr	r3, [r3, #8]
 8008716:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	691b      	ldr	r3, [r3, #16]
 800871e:	00db      	lsls	r3, r3, #3
 8008720:	490e      	ldr	r1, [pc, #56]	; (800875c <HAL_RCC_ClockConfig+0x1bc>)
 8008722:	4313      	orrs	r3, r2
 8008724:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008726:	f000 f821 	bl	800876c <HAL_RCC_GetSysClockFreq>
 800872a:	4602      	mov	r2, r0
 800872c:	4b0b      	ldr	r3, [pc, #44]	; (800875c <HAL_RCC_ClockConfig+0x1bc>)
 800872e:	689b      	ldr	r3, [r3, #8]
 8008730:	091b      	lsrs	r3, r3, #4
 8008732:	f003 030f 	and.w	r3, r3, #15
 8008736:	490a      	ldr	r1, [pc, #40]	; (8008760 <HAL_RCC_ClockConfig+0x1c0>)
 8008738:	5ccb      	ldrb	r3, [r1, r3]
 800873a:	fa22 f303 	lsr.w	r3, r2, r3
 800873e:	4a09      	ldr	r2, [pc, #36]	; (8008764 <HAL_RCC_ClockConfig+0x1c4>)
 8008740:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008742:	4b09      	ldr	r3, [pc, #36]	; (8008768 <HAL_RCC_ClockConfig+0x1c8>)
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	4618      	mov	r0, r3
 8008748:	f7fd fb20 	bl	8005d8c <HAL_InitTick>

  return HAL_OK;
 800874c:	2300      	movs	r3, #0
}
 800874e:	4618      	mov	r0, r3
 8008750:	3710      	adds	r7, #16
 8008752:	46bd      	mov	sp, r7
 8008754:	bd80      	pop	{r7, pc}
 8008756:	bf00      	nop
 8008758:	40023c00 	.word	0x40023c00
 800875c:	40023800 	.word	0x40023800
 8008760:	08013ec4 	.word	0x08013ec4
 8008764:	2000000c 	.word	0x2000000c
 8008768:	20000010 	.word	0x20000010

0800876c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800876c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008770:	b094      	sub	sp, #80	; 0x50
 8008772:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008774:	2300      	movs	r3, #0
 8008776:	647b      	str	r3, [r7, #68]	; 0x44
 8008778:	2300      	movs	r3, #0
 800877a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800877c:	2300      	movs	r3, #0
 800877e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8008780:	2300      	movs	r3, #0
 8008782:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008784:	4b79      	ldr	r3, [pc, #484]	; (800896c <HAL_RCC_GetSysClockFreq+0x200>)
 8008786:	689b      	ldr	r3, [r3, #8]
 8008788:	f003 030c 	and.w	r3, r3, #12
 800878c:	2b08      	cmp	r3, #8
 800878e:	d00d      	beq.n	80087ac <HAL_RCC_GetSysClockFreq+0x40>
 8008790:	2b08      	cmp	r3, #8
 8008792:	f200 80e1 	bhi.w	8008958 <HAL_RCC_GetSysClockFreq+0x1ec>
 8008796:	2b00      	cmp	r3, #0
 8008798:	d002      	beq.n	80087a0 <HAL_RCC_GetSysClockFreq+0x34>
 800879a:	2b04      	cmp	r3, #4
 800879c:	d003      	beq.n	80087a6 <HAL_RCC_GetSysClockFreq+0x3a>
 800879e:	e0db      	b.n	8008958 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80087a0:	4b73      	ldr	r3, [pc, #460]	; (8008970 <HAL_RCC_GetSysClockFreq+0x204>)
 80087a2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80087a4:	e0db      	b.n	800895e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80087a6:	4b73      	ldr	r3, [pc, #460]	; (8008974 <HAL_RCC_GetSysClockFreq+0x208>)
 80087a8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80087aa:	e0d8      	b.n	800895e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80087ac:	4b6f      	ldr	r3, [pc, #444]	; (800896c <HAL_RCC_GetSysClockFreq+0x200>)
 80087ae:	685b      	ldr	r3, [r3, #4]
 80087b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80087b4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80087b6:	4b6d      	ldr	r3, [pc, #436]	; (800896c <HAL_RCC_GetSysClockFreq+0x200>)
 80087b8:	685b      	ldr	r3, [r3, #4]
 80087ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d063      	beq.n	800888a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80087c2:	4b6a      	ldr	r3, [pc, #424]	; (800896c <HAL_RCC_GetSysClockFreq+0x200>)
 80087c4:	685b      	ldr	r3, [r3, #4]
 80087c6:	099b      	lsrs	r3, r3, #6
 80087c8:	2200      	movs	r2, #0
 80087ca:	63bb      	str	r3, [r7, #56]	; 0x38
 80087cc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80087ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087d4:	633b      	str	r3, [r7, #48]	; 0x30
 80087d6:	2300      	movs	r3, #0
 80087d8:	637b      	str	r3, [r7, #52]	; 0x34
 80087da:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80087de:	4622      	mov	r2, r4
 80087e0:	462b      	mov	r3, r5
 80087e2:	f04f 0000 	mov.w	r0, #0
 80087e6:	f04f 0100 	mov.w	r1, #0
 80087ea:	0159      	lsls	r1, r3, #5
 80087ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80087f0:	0150      	lsls	r0, r2, #5
 80087f2:	4602      	mov	r2, r0
 80087f4:	460b      	mov	r3, r1
 80087f6:	4621      	mov	r1, r4
 80087f8:	1a51      	subs	r1, r2, r1
 80087fa:	6139      	str	r1, [r7, #16]
 80087fc:	4629      	mov	r1, r5
 80087fe:	eb63 0301 	sbc.w	r3, r3, r1
 8008802:	617b      	str	r3, [r7, #20]
 8008804:	f04f 0200 	mov.w	r2, #0
 8008808:	f04f 0300 	mov.w	r3, #0
 800880c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008810:	4659      	mov	r1, fp
 8008812:	018b      	lsls	r3, r1, #6
 8008814:	4651      	mov	r1, sl
 8008816:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800881a:	4651      	mov	r1, sl
 800881c:	018a      	lsls	r2, r1, #6
 800881e:	4651      	mov	r1, sl
 8008820:	ebb2 0801 	subs.w	r8, r2, r1
 8008824:	4659      	mov	r1, fp
 8008826:	eb63 0901 	sbc.w	r9, r3, r1
 800882a:	f04f 0200 	mov.w	r2, #0
 800882e:	f04f 0300 	mov.w	r3, #0
 8008832:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008836:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800883a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800883e:	4690      	mov	r8, r2
 8008840:	4699      	mov	r9, r3
 8008842:	4623      	mov	r3, r4
 8008844:	eb18 0303 	adds.w	r3, r8, r3
 8008848:	60bb      	str	r3, [r7, #8]
 800884a:	462b      	mov	r3, r5
 800884c:	eb49 0303 	adc.w	r3, r9, r3
 8008850:	60fb      	str	r3, [r7, #12]
 8008852:	f04f 0200 	mov.w	r2, #0
 8008856:	f04f 0300 	mov.w	r3, #0
 800885a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800885e:	4629      	mov	r1, r5
 8008860:	024b      	lsls	r3, r1, #9
 8008862:	4621      	mov	r1, r4
 8008864:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8008868:	4621      	mov	r1, r4
 800886a:	024a      	lsls	r2, r1, #9
 800886c:	4610      	mov	r0, r2
 800886e:	4619      	mov	r1, r3
 8008870:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008872:	2200      	movs	r2, #0
 8008874:	62bb      	str	r3, [r7, #40]	; 0x28
 8008876:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008878:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800887c:	f7f8 fa04 	bl	8000c88 <__aeabi_uldivmod>
 8008880:	4602      	mov	r2, r0
 8008882:	460b      	mov	r3, r1
 8008884:	4613      	mov	r3, r2
 8008886:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008888:	e058      	b.n	800893c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800888a:	4b38      	ldr	r3, [pc, #224]	; (800896c <HAL_RCC_GetSysClockFreq+0x200>)
 800888c:	685b      	ldr	r3, [r3, #4]
 800888e:	099b      	lsrs	r3, r3, #6
 8008890:	2200      	movs	r2, #0
 8008892:	4618      	mov	r0, r3
 8008894:	4611      	mov	r1, r2
 8008896:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800889a:	623b      	str	r3, [r7, #32]
 800889c:	2300      	movs	r3, #0
 800889e:	627b      	str	r3, [r7, #36]	; 0x24
 80088a0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80088a4:	4642      	mov	r2, r8
 80088a6:	464b      	mov	r3, r9
 80088a8:	f04f 0000 	mov.w	r0, #0
 80088ac:	f04f 0100 	mov.w	r1, #0
 80088b0:	0159      	lsls	r1, r3, #5
 80088b2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80088b6:	0150      	lsls	r0, r2, #5
 80088b8:	4602      	mov	r2, r0
 80088ba:	460b      	mov	r3, r1
 80088bc:	4641      	mov	r1, r8
 80088be:	ebb2 0a01 	subs.w	sl, r2, r1
 80088c2:	4649      	mov	r1, r9
 80088c4:	eb63 0b01 	sbc.w	fp, r3, r1
 80088c8:	f04f 0200 	mov.w	r2, #0
 80088cc:	f04f 0300 	mov.w	r3, #0
 80088d0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80088d4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80088d8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80088dc:	ebb2 040a 	subs.w	r4, r2, sl
 80088e0:	eb63 050b 	sbc.w	r5, r3, fp
 80088e4:	f04f 0200 	mov.w	r2, #0
 80088e8:	f04f 0300 	mov.w	r3, #0
 80088ec:	00eb      	lsls	r3, r5, #3
 80088ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80088f2:	00e2      	lsls	r2, r4, #3
 80088f4:	4614      	mov	r4, r2
 80088f6:	461d      	mov	r5, r3
 80088f8:	4643      	mov	r3, r8
 80088fa:	18e3      	adds	r3, r4, r3
 80088fc:	603b      	str	r3, [r7, #0]
 80088fe:	464b      	mov	r3, r9
 8008900:	eb45 0303 	adc.w	r3, r5, r3
 8008904:	607b      	str	r3, [r7, #4]
 8008906:	f04f 0200 	mov.w	r2, #0
 800890a:	f04f 0300 	mov.w	r3, #0
 800890e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008912:	4629      	mov	r1, r5
 8008914:	028b      	lsls	r3, r1, #10
 8008916:	4621      	mov	r1, r4
 8008918:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800891c:	4621      	mov	r1, r4
 800891e:	028a      	lsls	r2, r1, #10
 8008920:	4610      	mov	r0, r2
 8008922:	4619      	mov	r1, r3
 8008924:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008926:	2200      	movs	r2, #0
 8008928:	61bb      	str	r3, [r7, #24]
 800892a:	61fa      	str	r2, [r7, #28]
 800892c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008930:	f7f8 f9aa 	bl	8000c88 <__aeabi_uldivmod>
 8008934:	4602      	mov	r2, r0
 8008936:	460b      	mov	r3, r1
 8008938:	4613      	mov	r3, r2
 800893a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800893c:	4b0b      	ldr	r3, [pc, #44]	; (800896c <HAL_RCC_GetSysClockFreq+0x200>)
 800893e:	685b      	ldr	r3, [r3, #4]
 8008940:	0c1b      	lsrs	r3, r3, #16
 8008942:	f003 0303 	and.w	r3, r3, #3
 8008946:	3301      	adds	r3, #1
 8008948:	005b      	lsls	r3, r3, #1
 800894a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800894c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800894e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008950:	fbb2 f3f3 	udiv	r3, r2, r3
 8008954:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008956:	e002      	b.n	800895e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008958:	4b05      	ldr	r3, [pc, #20]	; (8008970 <HAL_RCC_GetSysClockFreq+0x204>)
 800895a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800895c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800895e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8008960:	4618      	mov	r0, r3
 8008962:	3750      	adds	r7, #80	; 0x50
 8008964:	46bd      	mov	sp, r7
 8008966:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800896a:	bf00      	nop
 800896c:	40023800 	.word	0x40023800
 8008970:	00f42400 	.word	0x00f42400
 8008974:	007a1200 	.word	0x007a1200

08008978 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008978:	b480      	push	{r7}
 800897a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800897c:	4b03      	ldr	r3, [pc, #12]	; (800898c <HAL_RCC_GetHCLKFreq+0x14>)
 800897e:	681b      	ldr	r3, [r3, #0]
}
 8008980:	4618      	mov	r0, r3
 8008982:	46bd      	mov	sp, r7
 8008984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008988:	4770      	bx	lr
 800898a:	bf00      	nop
 800898c:	2000000c 	.word	0x2000000c

08008990 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008990:	b580      	push	{r7, lr}
 8008992:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008994:	f7ff fff0 	bl	8008978 <HAL_RCC_GetHCLKFreq>
 8008998:	4602      	mov	r2, r0
 800899a:	4b05      	ldr	r3, [pc, #20]	; (80089b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800899c:	689b      	ldr	r3, [r3, #8]
 800899e:	0a9b      	lsrs	r3, r3, #10
 80089a0:	f003 0307 	and.w	r3, r3, #7
 80089a4:	4903      	ldr	r1, [pc, #12]	; (80089b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80089a6:	5ccb      	ldrb	r3, [r1, r3]
 80089a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80089ac:	4618      	mov	r0, r3
 80089ae:	bd80      	pop	{r7, pc}
 80089b0:	40023800 	.word	0x40023800
 80089b4:	08013ed4 	.word	0x08013ed4

080089b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80089b8:	b580      	push	{r7, lr}
 80089ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80089bc:	f7ff ffdc 	bl	8008978 <HAL_RCC_GetHCLKFreq>
 80089c0:	4602      	mov	r2, r0
 80089c2:	4b05      	ldr	r3, [pc, #20]	; (80089d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80089c4:	689b      	ldr	r3, [r3, #8]
 80089c6:	0b5b      	lsrs	r3, r3, #13
 80089c8:	f003 0307 	and.w	r3, r3, #7
 80089cc:	4903      	ldr	r1, [pc, #12]	; (80089dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80089ce:	5ccb      	ldrb	r3, [r1, r3]
 80089d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80089d4:	4618      	mov	r0, r3
 80089d6:	bd80      	pop	{r7, pc}
 80089d8:	40023800 	.word	0x40023800
 80089dc:	08013ed4 	.word	0x08013ed4

080089e0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80089e0:	b580      	push	{r7, lr}
 80089e2:	b082      	sub	sp, #8
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d101      	bne.n	80089f2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80089ee:	2301      	movs	r3, #1
 80089f0:	e07b      	b.n	8008aea <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d108      	bne.n	8008a0c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	685b      	ldr	r3, [r3, #4]
 80089fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008a02:	d009      	beq.n	8008a18 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	2200      	movs	r2, #0
 8008a08:	61da      	str	r2, [r3, #28]
 8008a0a:	e005      	b.n	8008a18 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	2200      	movs	r2, #0
 8008a10:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	2200      	movs	r2, #0
 8008a16:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008a24:	b2db      	uxtb	r3, r3
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d106      	bne.n	8008a38 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	2200      	movs	r2, #0
 8008a2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008a32:	6878      	ldr	r0, [r7, #4]
 8008a34:	f7fa ff30 	bl	8003898 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	2202      	movs	r2, #2
 8008a3c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	681a      	ldr	r2, [r3, #0]
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008a4e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	685b      	ldr	r3, [r3, #4]
 8008a54:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	689b      	ldr	r3, [r3, #8]
 8008a5c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008a60:	431a      	orrs	r2, r3
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	68db      	ldr	r3, [r3, #12]
 8008a66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008a6a:	431a      	orrs	r2, r3
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	691b      	ldr	r3, [r3, #16]
 8008a70:	f003 0302 	and.w	r3, r3, #2
 8008a74:	431a      	orrs	r2, r3
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	695b      	ldr	r3, [r3, #20]
 8008a7a:	f003 0301 	and.w	r3, r3, #1
 8008a7e:	431a      	orrs	r2, r3
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	699b      	ldr	r3, [r3, #24]
 8008a84:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008a88:	431a      	orrs	r2, r3
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	69db      	ldr	r3, [r3, #28]
 8008a8e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008a92:	431a      	orrs	r2, r3
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	6a1b      	ldr	r3, [r3, #32]
 8008a98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a9c:	ea42 0103 	orr.w	r1, r2, r3
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008aa4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	430a      	orrs	r2, r1
 8008aae:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	699b      	ldr	r3, [r3, #24]
 8008ab4:	0c1b      	lsrs	r3, r3, #16
 8008ab6:	f003 0104 	and.w	r1, r3, #4
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008abe:	f003 0210 	and.w	r2, r3, #16
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	430a      	orrs	r2, r1
 8008ac8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	69da      	ldr	r2, [r3, #28]
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008ad8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	2200      	movs	r2, #0
 8008ade:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	2201      	movs	r2, #1
 8008ae4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8008ae8:	2300      	movs	r3, #0
}
 8008aea:	4618      	mov	r0, r3
 8008aec:	3708      	adds	r7, #8
 8008aee:	46bd      	mov	sp, r7
 8008af0:	bd80      	pop	{r7, pc}

08008af2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008af2:	b580      	push	{r7, lr}
 8008af4:	b088      	sub	sp, #32
 8008af6:	af00      	add	r7, sp, #0
 8008af8:	60f8      	str	r0, [r7, #12]
 8008afa:	60b9      	str	r1, [r7, #8]
 8008afc:	603b      	str	r3, [r7, #0]
 8008afe:	4613      	mov	r3, r2
 8008b00:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008b02:	2300      	movs	r3, #0
 8008b04:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008b0c:	2b01      	cmp	r3, #1
 8008b0e:	d101      	bne.n	8008b14 <HAL_SPI_Transmit+0x22>
 8008b10:	2302      	movs	r3, #2
 8008b12:	e126      	b.n	8008d62 <HAL_SPI_Transmit+0x270>
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	2201      	movs	r2, #1
 8008b18:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008b1c:	f7fd f97a 	bl	8005e14 <HAL_GetTick>
 8008b20:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8008b22:	88fb      	ldrh	r3, [r7, #6]
 8008b24:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008b2c:	b2db      	uxtb	r3, r3
 8008b2e:	2b01      	cmp	r3, #1
 8008b30:	d002      	beq.n	8008b38 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8008b32:	2302      	movs	r3, #2
 8008b34:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008b36:	e10b      	b.n	8008d50 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8008b38:	68bb      	ldr	r3, [r7, #8]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d002      	beq.n	8008b44 <HAL_SPI_Transmit+0x52>
 8008b3e:	88fb      	ldrh	r3, [r7, #6]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d102      	bne.n	8008b4a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8008b44:	2301      	movs	r3, #1
 8008b46:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008b48:	e102      	b.n	8008d50 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	2203      	movs	r2, #3
 8008b4e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	2200      	movs	r2, #0
 8008b56:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	68ba      	ldr	r2, [r7, #8]
 8008b5c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	88fa      	ldrh	r2, [r7, #6]
 8008b62:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	88fa      	ldrh	r2, [r7, #6]
 8008b68:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	2200      	movs	r2, #0
 8008b6e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	2200      	movs	r2, #0
 8008b74:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	2200      	movs	r2, #0
 8008b7a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	2200      	movs	r2, #0
 8008b80:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	2200      	movs	r2, #0
 8008b86:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	689b      	ldr	r3, [r3, #8]
 8008b8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008b90:	d10f      	bne.n	8008bb2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	681a      	ldr	r2, [r3, #0]
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008ba0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	681a      	ldr	r2, [r3, #0]
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008bb0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bbc:	2b40      	cmp	r3, #64	; 0x40
 8008bbe:	d007      	beq.n	8008bd0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	681a      	ldr	r2, [r3, #0]
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008bce:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	68db      	ldr	r3, [r3, #12]
 8008bd4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008bd8:	d14b      	bne.n	8008c72 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	685b      	ldr	r3, [r3, #4]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d002      	beq.n	8008be8 <HAL_SPI_Transmit+0xf6>
 8008be2:	8afb      	ldrh	r3, [r7, #22]
 8008be4:	2b01      	cmp	r3, #1
 8008be6:	d13e      	bne.n	8008c66 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bec:	881a      	ldrh	r2, [r3, #0]
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bf8:	1c9a      	adds	r2, r3, #2
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008c02:	b29b      	uxth	r3, r3
 8008c04:	3b01      	subs	r3, #1
 8008c06:	b29a      	uxth	r2, r3
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008c0c:	e02b      	b.n	8008c66 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	689b      	ldr	r3, [r3, #8]
 8008c14:	f003 0302 	and.w	r3, r3, #2
 8008c18:	2b02      	cmp	r3, #2
 8008c1a:	d112      	bne.n	8008c42 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c20:	881a      	ldrh	r2, [r3, #0]
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c2c:	1c9a      	adds	r2, r3, #2
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008c36:	b29b      	uxth	r3, r3
 8008c38:	3b01      	subs	r3, #1
 8008c3a:	b29a      	uxth	r2, r3
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	86da      	strh	r2, [r3, #54]	; 0x36
 8008c40:	e011      	b.n	8008c66 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008c42:	f7fd f8e7 	bl	8005e14 <HAL_GetTick>
 8008c46:	4602      	mov	r2, r0
 8008c48:	69bb      	ldr	r3, [r7, #24]
 8008c4a:	1ad3      	subs	r3, r2, r3
 8008c4c:	683a      	ldr	r2, [r7, #0]
 8008c4e:	429a      	cmp	r2, r3
 8008c50:	d803      	bhi.n	8008c5a <HAL_SPI_Transmit+0x168>
 8008c52:	683b      	ldr	r3, [r7, #0]
 8008c54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c58:	d102      	bne.n	8008c60 <HAL_SPI_Transmit+0x16e>
 8008c5a:	683b      	ldr	r3, [r7, #0]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d102      	bne.n	8008c66 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8008c60:	2303      	movs	r3, #3
 8008c62:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008c64:	e074      	b.n	8008d50 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008c6a:	b29b      	uxth	r3, r3
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d1ce      	bne.n	8008c0e <HAL_SPI_Transmit+0x11c>
 8008c70:	e04c      	b.n	8008d0c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	685b      	ldr	r3, [r3, #4]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d002      	beq.n	8008c80 <HAL_SPI_Transmit+0x18e>
 8008c7a:	8afb      	ldrh	r3, [r7, #22]
 8008c7c:	2b01      	cmp	r3, #1
 8008c7e:	d140      	bne.n	8008d02 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	330c      	adds	r3, #12
 8008c8a:	7812      	ldrb	r2, [r2, #0]
 8008c8c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c92:	1c5a      	adds	r2, r3, #1
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008c9c:	b29b      	uxth	r3, r3
 8008c9e:	3b01      	subs	r3, #1
 8008ca0:	b29a      	uxth	r2, r3
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8008ca6:	e02c      	b.n	8008d02 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	689b      	ldr	r3, [r3, #8]
 8008cae:	f003 0302 	and.w	r3, r3, #2
 8008cb2:	2b02      	cmp	r3, #2
 8008cb4:	d113      	bne.n	8008cde <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	330c      	adds	r3, #12
 8008cc0:	7812      	ldrb	r2, [r2, #0]
 8008cc2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cc8:	1c5a      	adds	r2, r3, #1
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008cd2:	b29b      	uxth	r3, r3
 8008cd4:	3b01      	subs	r3, #1
 8008cd6:	b29a      	uxth	r2, r3
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	86da      	strh	r2, [r3, #54]	; 0x36
 8008cdc:	e011      	b.n	8008d02 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008cde:	f7fd f899 	bl	8005e14 <HAL_GetTick>
 8008ce2:	4602      	mov	r2, r0
 8008ce4:	69bb      	ldr	r3, [r7, #24]
 8008ce6:	1ad3      	subs	r3, r2, r3
 8008ce8:	683a      	ldr	r2, [r7, #0]
 8008cea:	429a      	cmp	r2, r3
 8008cec:	d803      	bhi.n	8008cf6 <HAL_SPI_Transmit+0x204>
 8008cee:	683b      	ldr	r3, [r7, #0]
 8008cf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cf4:	d102      	bne.n	8008cfc <HAL_SPI_Transmit+0x20a>
 8008cf6:	683b      	ldr	r3, [r7, #0]
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d102      	bne.n	8008d02 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8008cfc:	2303      	movs	r3, #3
 8008cfe:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008d00:	e026      	b.n	8008d50 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008d06:	b29b      	uxth	r3, r3
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d1cd      	bne.n	8008ca8 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008d0c:	69ba      	ldr	r2, [r7, #24]
 8008d0e:	6839      	ldr	r1, [r7, #0]
 8008d10:	68f8      	ldr	r0, [r7, #12]
 8008d12:	f000 fa63 	bl	80091dc <SPI_EndRxTxTransaction>
 8008d16:	4603      	mov	r3, r0
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d002      	beq.n	8008d22 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	2220      	movs	r2, #32
 8008d20:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	689b      	ldr	r3, [r3, #8]
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d10a      	bne.n	8008d40 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	613b      	str	r3, [r7, #16]
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	68db      	ldr	r3, [r3, #12]
 8008d34:	613b      	str	r3, [r7, #16]
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	689b      	ldr	r3, [r3, #8]
 8008d3c:	613b      	str	r3, [r7, #16]
 8008d3e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d002      	beq.n	8008d4e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8008d48:	2301      	movs	r3, #1
 8008d4a:	77fb      	strb	r3, [r7, #31]
 8008d4c:	e000      	b.n	8008d50 <HAL_SPI_Transmit+0x25e>
  }

error:
 8008d4e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	2201      	movs	r2, #1
 8008d54:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	2200      	movs	r2, #0
 8008d5c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008d60:	7ffb      	ldrb	r3, [r7, #31]
}
 8008d62:	4618      	mov	r0, r3
 8008d64:	3720      	adds	r7, #32
 8008d66:	46bd      	mov	sp, r7
 8008d68:	bd80      	pop	{r7, pc}

08008d6a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008d6a:	b580      	push	{r7, lr}
 8008d6c:	b08c      	sub	sp, #48	; 0x30
 8008d6e:	af00      	add	r7, sp, #0
 8008d70:	60f8      	str	r0, [r7, #12]
 8008d72:	60b9      	str	r1, [r7, #8]
 8008d74:	607a      	str	r2, [r7, #4]
 8008d76:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008d78:	2301      	movs	r3, #1
 8008d7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008d88:	2b01      	cmp	r3, #1
 8008d8a:	d101      	bne.n	8008d90 <HAL_SPI_TransmitReceive+0x26>
 8008d8c:	2302      	movs	r3, #2
 8008d8e:	e18a      	b.n	80090a6 <HAL_SPI_TransmitReceive+0x33c>
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	2201      	movs	r2, #1
 8008d94:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008d98:	f7fd f83c 	bl	8005e14 <HAL_GetTick>
 8008d9c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008da4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	685b      	ldr	r3, [r3, #4]
 8008dac:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8008dae:	887b      	ldrh	r3, [r7, #2]
 8008db0:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008db2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008db6:	2b01      	cmp	r3, #1
 8008db8:	d00f      	beq.n	8008dda <HAL_SPI_TransmitReceive+0x70>
 8008dba:	69fb      	ldr	r3, [r7, #28]
 8008dbc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008dc0:	d107      	bne.n	8008dd2 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	689b      	ldr	r3, [r3, #8]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d103      	bne.n	8008dd2 <HAL_SPI_TransmitReceive+0x68>
 8008dca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008dce:	2b04      	cmp	r3, #4
 8008dd0:	d003      	beq.n	8008dda <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8008dd2:	2302      	movs	r3, #2
 8008dd4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008dd8:	e15b      	b.n	8009092 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008dda:	68bb      	ldr	r3, [r7, #8]
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d005      	beq.n	8008dec <HAL_SPI_TransmitReceive+0x82>
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d002      	beq.n	8008dec <HAL_SPI_TransmitReceive+0x82>
 8008de6:	887b      	ldrh	r3, [r7, #2]
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d103      	bne.n	8008df4 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8008dec:	2301      	movs	r3, #1
 8008dee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008df2:	e14e      	b.n	8009092 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008dfa:	b2db      	uxtb	r3, r3
 8008dfc:	2b04      	cmp	r3, #4
 8008dfe:	d003      	beq.n	8008e08 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	2205      	movs	r2, #5
 8008e04:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	687a      	ldr	r2, [r7, #4]
 8008e12:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	887a      	ldrh	r2, [r7, #2]
 8008e18:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	887a      	ldrh	r2, [r7, #2]
 8008e1e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	68ba      	ldr	r2, [r7, #8]
 8008e24:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	887a      	ldrh	r2, [r7, #2]
 8008e2a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	887a      	ldrh	r2, [r7, #2]
 8008e30:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	2200      	movs	r2, #0
 8008e36:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	2200      	movs	r2, #0
 8008e3c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e48:	2b40      	cmp	r3, #64	; 0x40
 8008e4a:	d007      	beq.n	8008e5c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	681a      	ldr	r2, [r3, #0]
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008e5a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	68db      	ldr	r3, [r3, #12]
 8008e60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008e64:	d178      	bne.n	8008f58 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	685b      	ldr	r3, [r3, #4]
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d002      	beq.n	8008e74 <HAL_SPI_TransmitReceive+0x10a>
 8008e6e:	8b7b      	ldrh	r3, [r7, #26]
 8008e70:	2b01      	cmp	r3, #1
 8008e72:	d166      	bne.n	8008f42 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e78:	881a      	ldrh	r2, [r3, #0]
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e84:	1c9a      	adds	r2, r3, #2
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008e8e:	b29b      	uxth	r3, r3
 8008e90:	3b01      	subs	r3, #1
 8008e92:	b29a      	uxth	r2, r3
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008e98:	e053      	b.n	8008f42 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	689b      	ldr	r3, [r3, #8]
 8008ea0:	f003 0302 	and.w	r3, r3, #2
 8008ea4:	2b02      	cmp	r3, #2
 8008ea6:	d11b      	bne.n	8008ee0 <HAL_SPI_TransmitReceive+0x176>
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008eac:	b29b      	uxth	r3, r3
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d016      	beq.n	8008ee0 <HAL_SPI_TransmitReceive+0x176>
 8008eb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008eb4:	2b01      	cmp	r3, #1
 8008eb6:	d113      	bne.n	8008ee0 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ebc:	881a      	ldrh	r2, [r3, #0]
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ec8:	1c9a      	adds	r2, r3, #2
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008ed2:	b29b      	uxth	r3, r3
 8008ed4:	3b01      	subs	r3, #1
 8008ed6:	b29a      	uxth	r2, r3
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008edc:	2300      	movs	r3, #0
 8008ede:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	689b      	ldr	r3, [r3, #8]
 8008ee6:	f003 0301 	and.w	r3, r3, #1
 8008eea:	2b01      	cmp	r3, #1
 8008eec:	d119      	bne.n	8008f22 <HAL_SPI_TransmitReceive+0x1b8>
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008ef2:	b29b      	uxth	r3, r3
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d014      	beq.n	8008f22 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	68da      	ldr	r2, [r3, #12]
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f02:	b292      	uxth	r2, r2
 8008f04:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f0a:	1c9a      	adds	r2, r3, #2
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008f14:	b29b      	uxth	r3, r3
 8008f16:	3b01      	subs	r3, #1
 8008f18:	b29a      	uxth	r2, r3
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008f1e:	2301      	movs	r3, #1
 8008f20:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008f22:	f7fc ff77 	bl	8005e14 <HAL_GetTick>
 8008f26:	4602      	mov	r2, r0
 8008f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f2a:	1ad3      	subs	r3, r2, r3
 8008f2c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008f2e:	429a      	cmp	r2, r3
 8008f30:	d807      	bhi.n	8008f42 <HAL_SPI_TransmitReceive+0x1d8>
 8008f32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f38:	d003      	beq.n	8008f42 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8008f3a:	2303      	movs	r3, #3
 8008f3c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008f40:	e0a7      	b.n	8009092 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008f46:	b29b      	uxth	r3, r3
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d1a6      	bne.n	8008e9a <HAL_SPI_TransmitReceive+0x130>
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008f50:	b29b      	uxth	r3, r3
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d1a1      	bne.n	8008e9a <HAL_SPI_TransmitReceive+0x130>
 8008f56:	e07c      	b.n	8009052 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	685b      	ldr	r3, [r3, #4]
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d002      	beq.n	8008f66 <HAL_SPI_TransmitReceive+0x1fc>
 8008f60:	8b7b      	ldrh	r3, [r7, #26]
 8008f62:	2b01      	cmp	r3, #1
 8008f64:	d16b      	bne.n	800903e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	330c      	adds	r3, #12
 8008f70:	7812      	ldrb	r2, [r2, #0]
 8008f72:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f78:	1c5a      	adds	r2, r3, #1
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008f82:	b29b      	uxth	r3, r3
 8008f84:	3b01      	subs	r3, #1
 8008f86:	b29a      	uxth	r2, r3
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008f8c:	e057      	b.n	800903e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	689b      	ldr	r3, [r3, #8]
 8008f94:	f003 0302 	and.w	r3, r3, #2
 8008f98:	2b02      	cmp	r3, #2
 8008f9a:	d11c      	bne.n	8008fd6 <HAL_SPI_TransmitReceive+0x26c>
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008fa0:	b29b      	uxth	r3, r3
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d017      	beq.n	8008fd6 <HAL_SPI_TransmitReceive+0x26c>
 8008fa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fa8:	2b01      	cmp	r3, #1
 8008faa:	d114      	bne.n	8008fd6 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	330c      	adds	r3, #12
 8008fb6:	7812      	ldrb	r2, [r2, #0]
 8008fb8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fbe:	1c5a      	adds	r2, r3, #1
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008fc8:	b29b      	uxth	r3, r3
 8008fca:	3b01      	subs	r3, #1
 8008fcc:	b29a      	uxth	r2, r3
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008fd2:	2300      	movs	r3, #0
 8008fd4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	689b      	ldr	r3, [r3, #8]
 8008fdc:	f003 0301 	and.w	r3, r3, #1
 8008fe0:	2b01      	cmp	r3, #1
 8008fe2:	d119      	bne.n	8009018 <HAL_SPI_TransmitReceive+0x2ae>
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008fe8:	b29b      	uxth	r3, r3
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d014      	beq.n	8009018 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	68da      	ldr	r2, [r3, #12]
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ff8:	b2d2      	uxtb	r2, r2
 8008ffa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009000:	1c5a      	adds	r2, r3, #1
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800900a:	b29b      	uxth	r3, r3
 800900c:	3b01      	subs	r3, #1
 800900e:	b29a      	uxth	r2, r3
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009014:	2301      	movs	r3, #1
 8009016:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009018:	f7fc fefc 	bl	8005e14 <HAL_GetTick>
 800901c:	4602      	mov	r2, r0
 800901e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009020:	1ad3      	subs	r3, r2, r3
 8009022:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009024:	429a      	cmp	r2, r3
 8009026:	d803      	bhi.n	8009030 <HAL_SPI_TransmitReceive+0x2c6>
 8009028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800902a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800902e:	d102      	bne.n	8009036 <HAL_SPI_TransmitReceive+0x2cc>
 8009030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009032:	2b00      	cmp	r3, #0
 8009034:	d103      	bne.n	800903e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8009036:	2303      	movs	r3, #3
 8009038:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800903c:	e029      	b.n	8009092 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009042:	b29b      	uxth	r3, r3
 8009044:	2b00      	cmp	r3, #0
 8009046:	d1a2      	bne.n	8008f8e <HAL_SPI_TransmitReceive+0x224>
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800904c:	b29b      	uxth	r3, r3
 800904e:	2b00      	cmp	r3, #0
 8009050:	d19d      	bne.n	8008f8e <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009052:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009054:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009056:	68f8      	ldr	r0, [r7, #12]
 8009058:	f000 f8c0 	bl	80091dc <SPI_EndRxTxTransaction>
 800905c:	4603      	mov	r3, r0
 800905e:	2b00      	cmp	r3, #0
 8009060:	d006      	beq.n	8009070 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8009062:	2301      	movs	r3, #1
 8009064:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	2220      	movs	r2, #32
 800906c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800906e:	e010      	b.n	8009092 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	689b      	ldr	r3, [r3, #8]
 8009074:	2b00      	cmp	r3, #0
 8009076:	d10b      	bne.n	8009090 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009078:	2300      	movs	r3, #0
 800907a:	617b      	str	r3, [r7, #20]
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	68db      	ldr	r3, [r3, #12]
 8009082:	617b      	str	r3, [r7, #20]
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	689b      	ldr	r3, [r3, #8]
 800908a:	617b      	str	r3, [r7, #20]
 800908c:	697b      	ldr	r3, [r7, #20]
 800908e:	e000      	b.n	8009092 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8009090:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	2201      	movs	r2, #1
 8009096:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	2200      	movs	r2, #0
 800909e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80090a2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80090a6:	4618      	mov	r0, r3
 80090a8:	3730      	adds	r7, #48	; 0x30
 80090aa:	46bd      	mov	sp, r7
 80090ac:	bd80      	pop	{r7, pc}

080090ae <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80090ae:	b480      	push	{r7}
 80090b0:	b083      	sub	sp, #12
 80090b2:	af00      	add	r7, sp, #0
 80090b4:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80090bc:	b2db      	uxtb	r3, r3
}
 80090be:	4618      	mov	r0, r3
 80090c0:	370c      	adds	r7, #12
 80090c2:	46bd      	mov	sp, r7
 80090c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c8:	4770      	bx	lr
	...

080090cc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80090cc:	b580      	push	{r7, lr}
 80090ce:	b088      	sub	sp, #32
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	60f8      	str	r0, [r7, #12]
 80090d4:	60b9      	str	r1, [r7, #8]
 80090d6:	603b      	str	r3, [r7, #0]
 80090d8:	4613      	mov	r3, r2
 80090da:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80090dc:	f7fc fe9a 	bl	8005e14 <HAL_GetTick>
 80090e0:	4602      	mov	r2, r0
 80090e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090e4:	1a9b      	subs	r3, r3, r2
 80090e6:	683a      	ldr	r2, [r7, #0]
 80090e8:	4413      	add	r3, r2
 80090ea:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80090ec:	f7fc fe92 	bl	8005e14 <HAL_GetTick>
 80090f0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80090f2:	4b39      	ldr	r3, [pc, #228]	; (80091d8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	015b      	lsls	r3, r3, #5
 80090f8:	0d1b      	lsrs	r3, r3, #20
 80090fa:	69fa      	ldr	r2, [r7, #28]
 80090fc:	fb02 f303 	mul.w	r3, r2, r3
 8009100:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009102:	e054      	b.n	80091ae <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009104:	683b      	ldr	r3, [r7, #0]
 8009106:	f1b3 3fff 	cmp.w	r3, #4294967295
 800910a:	d050      	beq.n	80091ae <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800910c:	f7fc fe82 	bl	8005e14 <HAL_GetTick>
 8009110:	4602      	mov	r2, r0
 8009112:	69bb      	ldr	r3, [r7, #24]
 8009114:	1ad3      	subs	r3, r2, r3
 8009116:	69fa      	ldr	r2, [r7, #28]
 8009118:	429a      	cmp	r2, r3
 800911a:	d902      	bls.n	8009122 <SPI_WaitFlagStateUntilTimeout+0x56>
 800911c:	69fb      	ldr	r3, [r7, #28]
 800911e:	2b00      	cmp	r3, #0
 8009120:	d13d      	bne.n	800919e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	685a      	ldr	r2, [r3, #4]
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009130:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	685b      	ldr	r3, [r3, #4]
 8009136:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800913a:	d111      	bne.n	8009160 <SPI_WaitFlagStateUntilTimeout+0x94>
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	689b      	ldr	r3, [r3, #8]
 8009140:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009144:	d004      	beq.n	8009150 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	689b      	ldr	r3, [r3, #8]
 800914a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800914e:	d107      	bne.n	8009160 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	681a      	ldr	r2, [r3, #0]
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800915e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009164:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009168:	d10f      	bne.n	800918a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	681a      	ldr	r2, [r3, #0]
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009178:	601a      	str	r2, [r3, #0]
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	681a      	ldr	r2, [r3, #0]
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009188:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	2201      	movs	r2, #1
 800918e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	2200      	movs	r2, #0
 8009196:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800919a:	2303      	movs	r3, #3
 800919c:	e017      	b.n	80091ce <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800919e:	697b      	ldr	r3, [r7, #20]
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d101      	bne.n	80091a8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80091a4:	2300      	movs	r3, #0
 80091a6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80091a8:	697b      	ldr	r3, [r7, #20]
 80091aa:	3b01      	subs	r3, #1
 80091ac:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	689a      	ldr	r2, [r3, #8]
 80091b4:	68bb      	ldr	r3, [r7, #8]
 80091b6:	4013      	ands	r3, r2
 80091b8:	68ba      	ldr	r2, [r7, #8]
 80091ba:	429a      	cmp	r2, r3
 80091bc:	bf0c      	ite	eq
 80091be:	2301      	moveq	r3, #1
 80091c0:	2300      	movne	r3, #0
 80091c2:	b2db      	uxtb	r3, r3
 80091c4:	461a      	mov	r2, r3
 80091c6:	79fb      	ldrb	r3, [r7, #7]
 80091c8:	429a      	cmp	r2, r3
 80091ca:	d19b      	bne.n	8009104 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80091cc:	2300      	movs	r3, #0
}
 80091ce:	4618      	mov	r0, r3
 80091d0:	3720      	adds	r7, #32
 80091d2:	46bd      	mov	sp, r7
 80091d4:	bd80      	pop	{r7, pc}
 80091d6:	bf00      	nop
 80091d8:	2000000c 	.word	0x2000000c

080091dc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80091dc:	b580      	push	{r7, lr}
 80091de:	b088      	sub	sp, #32
 80091e0:	af02      	add	r7, sp, #8
 80091e2:	60f8      	str	r0, [r7, #12]
 80091e4:	60b9      	str	r1, [r7, #8]
 80091e6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80091e8:	4b1b      	ldr	r3, [pc, #108]	; (8009258 <SPI_EndRxTxTransaction+0x7c>)
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	4a1b      	ldr	r2, [pc, #108]	; (800925c <SPI_EndRxTxTransaction+0x80>)
 80091ee:	fba2 2303 	umull	r2, r3, r2, r3
 80091f2:	0d5b      	lsrs	r3, r3, #21
 80091f4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80091f8:	fb02 f303 	mul.w	r3, r2, r3
 80091fc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	685b      	ldr	r3, [r3, #4]
 8009202:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009206:	d112      	bne.n	800922e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	9300      	str	r3, [sp, #0]
 800920c:	68bb      	ldr	r3, [r7, #8]
 800920e:	2200      	movs	r2, #0
 8009210:	2180      	movs	r1, #128	; 0x80
 8009212:	68f8      	ldr	r0, [r7, #12]
 8009214:	f7ff ff5a 	bl	80090cc <SPI_WaitFlagStateUntilTimeout>
 8009218:	4603      	mov	r3, r0
 800921a:	2b00      	cmp	r3, #0
 800921c:	d016      	beq.n	800924c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009222:	f043 0220 	orr.w	r2, r3, #32
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800922a:	2303      	movs	r3, #3
 800922c:	e00f      	b.n	800924e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800922e:	697b      	ldr	r3, [r7, #20]
 8009230:	2b00      	cmp	r3, #0
 8009232:	d00a      	beq.n	800924a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8009234:	697b      	ldr	r3, [r7, #20]
 8009236:	3b01      	subs	r3, #1
 8009238:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	689b      	ldr	r3, [r3, #8]
 8009240:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009244:	2b80      	cmp	r3, #128	; 0x80
 8009246:	d0f2      	beq.n	800922e <SPI_EndRxTxTransaction+0x52>
 8009248:	e000      	b.n	800924c <SPI_EndRxTxTransaction+0x70>
        break;
 800924a:	bf00      	nop
  }

  return HAL_OK;
 800924c:	2300      	movs	r3, #0
}
 800924e:	4618      	mov	r0, r3
 8009250:	3718      	adds	r7, #24
 8009252:	46bd      	mov	sp, r7
 8009254:	bd80      	pop	{r7, pc}
 8009256:	bf00      	nop
 8009258:	2000000c 	.word	0x2000000c
 800925c:	165e9f81 	.word	0x165e9f81

08009260 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009260:	b580      	push	{r7, lr}
 8009262:	b082      	sub	sp, #8
 8009264:	af00      	add	r7, sp, #0
 8009266:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	2b00      	cmp	r3, #0
 800926c:	d101      	bne.n	8009272 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800926e:	2301      	movs	r3, #1
 8009270:	e041      	b.n	80092f6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009278:	b2db      	uxtb	r3, r3
 800927a:	2b00      	cmp	r3, #0
 800927c:	d106      	bne.n	800928c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	2200      	movs	r2, #0
 8009282:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009286:	6878      	ldr	r0, [r7, #4]
 8009288:	f7fa fb4e 	bl	8003928 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	2202      	movs	r2, #2
 8009290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681a      	ldr	r2, [r3, #0]
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	3304      	adds	r3, #4
 800929c:	4619      	mov	r1, r3
 800929e:	4610      	mov	r0, r2
 80092a0:	f000 fdec 	bl	8009e7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	2201      	movs	r2, #1
 80092a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	2201      	movs	r2, #1
 80092b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	2201      	movs	r2, #1
 80092b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	2201      	movs	r2, #1
 80092c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	2201      	movs	r2, #1
 80092c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	2201      	movs	r2, #1
 80092d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	2201      	movs	r2, #1
 80092d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	2201      	movs	r2, #1
 80092e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	2201      	movs	r2, #1
 80092e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	2201      	movs	r2, #1
 80092f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80092f4:	2300      	movs	r3, #0
}
 80092f6:	4618      	mov	r0, r3
 80092f8:	3708      	adds	r7, #8
 80092fa:	46bd      	mov	sp, r7
 80092fc:	bd80      	pop	{r7, pc}
	...

08009300 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009300:	b480      	push	{r7}
 8009302:	b085      	sub	sp, #20
 8009304:	af00      	add	r7, sp, #0
 8009306:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800930e:	b2db      	uxtb	r3, r3
 8009310:	2b01      	cmp	r3, #1
 8009312:	d001      	beq.n	8009318 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009314:	2301      	movs	r3, #1
 8009316:	e04e      	b.n	80093b6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	2202      	movs	r2, #2
 800931c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	68da      	ldr	r2, [r3, #12]
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	f042 0201 	orr.w	r2, r2, #1
 800932e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	4a23      	ldr	r2, [pc, #140]	; (80093c4 <HAL_TIM_Base_Start_IT+0xc4>)
 8009336:	4293      	cmp	r3, r2
 8009338:	d022      	beq.n	8009380 <HAL_TIM_Base_Start_IT+0x80>
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009342:	d01d      	beq.n	8009380 <HAL_TIM_Base_Start_IT+0x80>
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	4a1f      	ldr	r2, [pc, #124]	; (80093c8 <HAL_TIM_Base_Start_IT+0xc8>)
 800934a:	4293      	cmp	r3, r2
 800934c:	d018      	beq.n	8009380 <HAL_TIM_Base_Start_IT+0x80>
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	4a1e      	ldr	r2, [pc, #120]	; (80093cc <HAL_TIM_Base_Start_IT+0xcc>)
 8009354:	4293      	cmp	r3, r2
 8009356:	d013      	beq.n	8009380 <HAL_TIM_Base_Start_IT+0x80>
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	4a1c      	ldr	r2, [pc, #112]	; (80093d0 <HAL_TIM_Base_Start_IT+0xd0>)
 800935e:	4293      	cmp	r3, r2
 8009360:	d00e      	beq.n	8009380 <HAL_TIM_Base_Start_IT+0x80>
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	4a1b      	ldr	r2, [pc, #108]	; (80093d4 <HAL_TIM_Base_Start_IT+0xd4>)
 8009368:	4293      	cmp	r3, r2
 800936a:	d009      	beq.n	8009380 <HAL_TIM_Base_Start_IT+0x80>
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	4a19      	ldr	r2, [pc, #100]	; (80093d8 <HAL_TIM_Base_Start_IT+0xd8>)
 8009372:	4293      	cmp	r3, r2
 8009374:	d004      	beq.n	8009380 <HAL_TIM_Base_Start_IT+0x80>
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	4a18      	ldr	r2, [pc, #96]	; (80093dc <HAL_TIM_Base_Start_IT+0xdc>)
 800937c:	4293      	cmp	r3, r2
 800937e:	d111      	bne.n	80093a4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	689b      	ldr	r3, [r3, #8]
 8009386:	f003 0307 	and.w	r3, r3, #7
 800938a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	2b06      	cmp	r3, #6
 8009390:	d010      	beq.n	80093b4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	681a      	ldr	r2, [r3, #0]
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	f042 0201 	orr.w	r2, r2, #1
 80093a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80093a2:	e007      	b.n	80093b4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	681a      	ldr	r2, [r3, #0]
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	f042 0201 	orr.w	r2, r2, #1
 80093b2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80093b4:	2300      	movs	r3, #0
}
 80093b6:	4618      	mov	r0, r3
 80093b8:	3714      	adds	r7, #20
 80093ba:	46bd      	mov	sp, r7
 80093bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c0:	4770      	bx	lr
 80093c2:	bf00      	nop
 80093c4:	40010000 	.word	0x40010000
 80093c8:	40000400 	.word	0x40000400
 80093cc:	40000800 	.word	0x40000800
 80093d0:	40000c00 	.word	0x40000c00
 80093d4:	40010400 	.word	0x40010400
 80093d8:	40014000 	.word	0x40014000
 80093dc:	40001800 	.word	0x40001800

080093e0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80093e0:	b580      	push	{r7, lr}
 80093e2:	b082      	sub	sp, #8
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d101      	bne.n	80093f2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80093ee:	2301      	movs	r3, #1
 80093f0:	e041      	b.n	8009476 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80093f8:	b2db      	uxtb	r3, r3
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d106      	bne.n	800940c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	2200      	movs	r2, #0
 8009402:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009406:	6878      	ldr	r0, [r7, #4]
 8009408:	f000 f839 	bl	800947e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	2202      	movs	r2, #2
 8009410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681a      	ldr	r2, [r3, #0]
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	3304      	adds	r3, #4
 800941c:	4619      	mov	r1, r3
 800941e:	4610      	mov	r0, r2
 8009420:	f000 fd2c 	bl	8009e7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	2201      	movs	r2, #1
 8009428:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	2201      	movs	r2, #1
 8009430:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	2201      	movs	r2, #1
 8009438:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	2201      	movs	r2, #1
 8009440:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	2201      	movs	r2, #1
 8009448:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	2201      	movs	r2, #1
 8009450:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	2201      	movs	r2, #1
 8009458:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	2201      	movs	r2, #1
 8009460:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	2201      	movs	r2, #1
 8009468:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	2201      	movs	r2, #1
 8009470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009474:	2300      	movs	r3, #0
}
 8009476:	4618      	mov	r0, r3
 8009478:	3708      	adds	r7, #8
 800947a:	46bd      	mov	sp, r7
 800947c:	bd80      	pop	{r7, pc}

0800947e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800947e:	b480      	push	{r7}
 8009480:	b083      	sub	sp, #12
 8009482:	af00      	add	r7, sp, #0
 8009484:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009486:	bf00      	nop
 8009488:	370c      	adds	r7, #12
 800948a:	46bd      	mov	sp, r7
 800948c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009490:	4770      	bx	lr
	...

08009494 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009494:	b580      	push	{r7, lr}
 8009496:	b084      	sub	sp, #16
 8009498:	af00      	add	r7, sp, #0
 800949a:	6078      	str	r0, [r7, #4]
 800949c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800949e:	683b      	ldr	r3, [r7, #0]
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d109      	bne.n	80094b8 <HAL_TIM_PWM_Start+0x24>
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80094aa:	b2db      	uxtb	r3, r3
 80094ac:	2b01      	cmp	r3, #1
 80094ae:	bf14      	ite	ne
 80094b0:	2301      	movne	r3, #1
 80094b2:	2300      	moveq	r3, #0
 80094b4:	b2db      	uxtb	r3, r3
 80094b6:	e022      	b.n	80094fe <HAL_TIM_PWM_Start+0x6a>
 80094b8:	683b      	ldr	r3, [r7, #0]
 80094ba:	2b04      	cmp	r3, #4
 80094bc:	d109      	bne.n	80094d2 <HAL_TIM_PWM_Start+0x3e>
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80094c4:	b2db      	uxtb	r3, r3
 80094c6:	2b01      	cmp	r3, #1
 80094c8:	bf14      	ite	ne
 80094ca:	2301      	movne	r3, #1
 80094cc:	2300      	moveq	r3, #0
 80094ce:	b2db      	uxtb	r3, r3
 80094d0:	e015      	b.n	80094fe <HAL_TIM_PWM_Start+0x6a>
 80094d2:	683b      	ldr	r3, [r7, #0]
 80094d4:	2b08      	cmp	r3, #8
 80094d6:	d109      	bne.n	80094ec <HAL_TIM_PWM_Start+0x58>
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80094de:	b2db      	uxtb	r3, r3
 80094e0:	2b01      	cmp	r3, #1
 80094e2:	bf14      	ite	ne
 80094e4:	2301      	movne	r3, #1
 80094e6:	2300      	moveq	r3, #0
 80094e8:	b2db      	uxtb	r3, r3
 80094ea:	e008      	b.n	80094fe <HAL_TIM_PWM_Start+0x6a>
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80094f2:	b2db      	uxtb	r3, r3
 80094f4:	2b01      	cmp	r3, #1
 80094f6:	bf14      	ite	ne
 80094f8:	2301      	movne	r3, #1
 80094fa:	2300      	moveq	r3, #0
 80094fc:	b2db      	uxtb	r3, r3
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d001      	beq.n	8009506 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8009502:	2301      	movs	r3, #1
 8009504:	e07c      	b.n	8009600 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009506:	683b      	ldr	r3, [r7, #0]
 8009508:	2b00      	cmp	r3, #0
 800950a:	d104      	bne.n	8009516 <HAL_TIM_PWM_Start+0x82>
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	2202      	movs	r2, #2
 8009510:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009514:	e013      	b.n	800953e <HAL_TIM_PWM_Start+0xaa>
 8009516:	683b      	ldr	r3, [r7, #0]
 8009518:	2b04      	cmp	r3, #4
 800951a:	d104      	bne.n	8009526 <HAL_TIM_PWM_Start+0x92>
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	2202      	movs	r2, #2
 8009520:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009524:	e00b      	b.n	800953e <HAL_TIM_PWM_Start+0xaa>
 8009526:	683b      	ldr	r3, [r7, #0]
 8009528:	2b08      	cmp	r3, #8
 800952a:	d104      	bne.n	8009536 <HAL_TIM_PWM_Start+0xa2>
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	2202      	movs	r2, #2
 8009530:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009534:	e003      	b.n	800953e <HAL_TIM_PWM_Start+0xaa>
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	2202      	movs	r2, #2
 800953a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	2201      	movs	r2, #1
 8009544:	6839      	ldr	r1, [r7, #0]
 8009546:	4618      	mov	r0, r3
 8009548:	f001 f93e 	bl	800a7c8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	4a2d      	ldr	r2, [pc, #180]	; (8009608 <HAL_TIM_PWM_Start+0x174>)
 8009552:	4293      	cmp	r3, r2
 8009554:	d004      	beq.n	8009560 <HAL_TIM_PWM_Start+0xcc>
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	4a2c      	ldr	r2, [pc, #176]	; (800960c <HAL_TIM_PWM_Start+0x178>)
 800955c:	4293      	cmp	r3, r2
 800955e:	d101      	bne.n	8009564 <HAL_TIM_PWM_Start+0xd0>
 8009560:	2301      	movs	r3, #1
 8009562:	e000      	b.n	8009566 <HAL_TIM_PWM_Start+0xd2>
 8009564:	2300      	movs	r3, #0
 8009566:	2b00      	cmp	r3, #0
 8009568:	d007      	beq.n	800957a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009578:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	4a22      	ldr	r2, [pc, #136]	; (8009608 <HAL_TIM_PWM_Start+0x174>)
 8009580:	4293      	cmp	r3, r2
 8009582:	d022      	beq.n	80095ca <HAL_TIM_PWM_Start+0x136>
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800958c:	d01d      	beq.n	80095ca <HAL_TIM_PWM_Start+0x136>
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	4a1f      	ldr	r2, [pc, #124]	; (8009610 <HAL_TIM_PWM_Start+0x17c>)
 8009594:	4293      	cmp	r3, r2
 8009596:	d018      	beq.n	80095ca <HAL_TIM_PWM_Start+0x136>
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	4a1d      	ldr	r2, [pc, #116]	; (8009614 <HAL_TIM_PWM_Start+0x180>)
 800959e:	4293      	cmp	r3, r2
 80095a0:	d013      	beq.n	80095ca <HAL_TIM_PWM_Start+0x136>
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	4a1c      	ldr	r2, [pc, #112]	; (8009618 <HAL_TIM_PWM_Start+0x184>)
 80095a8:	4293      	cmp	r3, r2
 80095aa:	d00e      	beq.n	80095ca <HAL_TIM_PWM_Start+0x136>
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	4a16      	ldr	r2, [pc, #88]	; (800960c <HAL_TIM_PWM_Start+0x178>)
 80095b2:	4293      	cmp	r3, r2
 80095b4:	d009      	beq.n	80095ca <HAL_TIM_PWM_Start+0x136>
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	4a18      	ldr	r2, [pc, #96]	; (800961c <HAL_TIM_PWM_Start+0x188>)
 80095bc:	4293      	cmp	r3, r2
 80095be:	d004      	beq.n	80095ca <HAL_TIM_PWM_Start+0x136>
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	4a16      	ldr	r2, [pc, #88]	; (8009620 <HAL_TIM_PWM_Start+0x18c>)
 80095c6:	4293      	cmp	r3, r2
 80095c8:	d111      	bne.n	80095ee <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	689b      	ldr	r3, [r3, #8]
 80095d0:	f003 0307 	and.w	r3, r3, #7
 80095d4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	2b06      	cmp	r3, #6
 80095da:	d010      	beq.n	80095fe <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	681a      	ldr	r2, [r3, #0]
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	f042 0201 	orr.w	r2, r2, #1
 80095ea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80095ec:	e007      	b.n	80095fe <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	681a      	ldr	r2, [r3, #0]
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	f042 0201 	orr.w	r2, r2, #1
 80095fc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80095fe:	2300      	movs	r3, #0
}
 8009600:	4618      	mov	r0, r3
 8009602:	3710      	adds	r7, #16
 8009604:	46bd      	mov	sp, r7
 8009606:	bd80      	pop	{r7, pc}
 8009608:	40010000 	.word	0x40010000
 800960c:	40010400 	.word	0x40010400
 8009610:	40000400 	.word	0x40000400
 8009614:	40000800 	.word	0x40000800
 8009618:	40000c00 	.word	0x40000c00
 800961c:	40014000 	.word	0x40014000
 8009620:	40001800 	.word	0x40001800

08009624 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8009624:	b580      	push	{r7, lr}
 8009626:	b082      	sub	sp, #8
 8009628:	af00      	add	r7, sp, #0
 800962a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	2b00      	cmp	r3, #0
 8009630:	d101      	bne.n	8009636 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8009632:	2301      	movs	r3, #1
 8009634:	e041      	b.n	80096ba <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800963c:	b2db      	uxtb	r3, r3
 800963e:	2b00      	cmp	r3, #0
 8009640:	d106      	bne.n	8009650 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	2200      	movs	r2, #0
 8009646:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800964a:	6878      	ldr	r0, [r7, #4]
 800964c:	f000 f839 	bl	80096c2 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	2202      	movs	r2, #2
 8009654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681a      	ldr	r2, [r3, #0]
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	3304      	adds	r3, #4
 8009660:	4619      	mov	r1, r3
 8009662:	4610      	mov	r0, r2
 8009664:	f000 fc0a 	bl	8009e7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	2201      	movs	r2, #1
 800966c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	2201      	movs	r2, #1
 8009674:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	2201      	movs	r2, #1
 800967c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	2201      	movs	r2, #1
 8009684:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	2201      	movs	r2, #1
 800968c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	2201      	movs	r2, #1
 8009694:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	2201      	movs	r2, #1
 800969c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	2201      	movs	r2, #1
 80096a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	2201      	movs	r2, #1
 80096ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	2201      	movs	r2, #1
 80096b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80096b8:	2300      	movs	r3, #0
}
 80096ba:	4618      	mov	r0, r3
 80096bc:	3708      	adds	r7, #8
 80096be:	46bd      	mov	sp, r7
 80096c0:	bd80      	pop	{r7, pc}

080096c2 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80096c2:	b480      	push	{r7}
 80096c4:	b083      	sub	sp, #12
 80096c6:	af00      	add	r7, sp, #0
 80096c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80096ca:	bf00      	nop
 80096cc:	370c      	adds	r7, #12
 80096ce:	46bd      	mov	sp, r7
 80096d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d4:	4770      	bx	lr

080096d6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80096d6:	b580      	push	{r7, lr}
 80096d8:	b082      	sub	sp, #8
 80096da:	af00      	add	r7, sp, #0
 80096dc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	691b      	ldr	r3, [r3, #16]
 80096e4:	f003 0302 	and.w	r3, r3, #2
 80096e8:	2b02      	cmp	r3, #2
 80096ea:	d122      	bne.n	8009732 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	68db      	ldr	r3, [r3, #12]
 80096f2:	f003 0302 	and.w	r3, r3, #2
 80096f6:	2b02      	cmp	r3, #2
 80096f8:	d11b      	bne.n	8009732 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	f06f 0202 	mvn.w	r2, #2
 8009702:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	2201      	movs	r2, #1
 8009708:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	699b      	ldr	r3, [r3, #24]
 8009710:	f003 0303 	and.w	r3, r3, #3
 8009714:	2b00      	cmp	r3, #0
 8009716:	d003      	beq.n	8009720 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009718:	6878      	ldr	r0, [r7, #4]
 800971a:	f7f8 fdc1 	bl	80022a0 <HAL_TIM_IC_CaptureCallback>
 800971e:	e005      	b.n	800972c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009720:	6878      	ldr	r0, [r7, #4]
 8009722:	f000 fb8d 	bl	8009e40 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009726:	6878      	ldr	r0, [r7, #4]
 8009728:	f000 fb94 	bl	8009e54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	2200      	movs	r2, #0
 8009730:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	691b      	ldr	r3, [r3, #16]
 8009738:	f003 0304 	and.w	r3, r3, #4
 800973c:	2b04      	cmp	r3, #4
 800973e:	d122      	bne.n	8009786 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	68db      	ldr	r3, [r3, #12]
 8009746:	f003 0304 	and.w	r3, r3, #4
 800974a:	2b04      	cmp	r3, #4
 800974c:	d11b      	bne.n	8009786 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	f06f 0204 	mvn.w	r2, #4
 8009756:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	2202      	movs	r2, #2
 800975c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	699b      	ldr	r3, [r3, #24]
 8009764:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009768:	2b00      	cmp	r3, #0
 800976a:	d003      	beq.n	8009774 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800976c:	6878      	ldr	r0, [r7, #4]
 800976e:	f7f8 fd97 	bl	80022a0 <HAL_TIM_IC_CaptureCallback>
 8009772:	e005      	b.n	8009780 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009774:	6878      	ldr	r0, [r7, #4]
 8009776:	f000 fb63 	bl	8009e40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800977a:	6878      	ldr	r0, [r7, #4]
 800977c:	f000 fb6a 	bl	8009e54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	2200      	movs	r2, #0
 8009784:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	691b      	ldr	r3, [r3, #16]
 800978c:	f003 0308 	and.w	r3, r3, #8
 8009790:	2b08      	cmp	r3, #8
 8009792:	d122      	bne.n	80097da <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	68db      	ldr	r3, [r3, #12]
 800979a:	f003 0308 	and.w	r3, r3, #8
 800979e:	2b08      	cmp	r3, #8
 80097a0:	d11b      	bne.n	80097da <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	f06f 0208 	mvn.w	r2, #8
 80097aa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	2204      	movs	r2, #4
 80097b0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	69db      	ldr	r3, [r3, #28]
 80097b8:	f003 0303 	and.w	r3, r3, #3
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d003      	beq.n	80097c8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80097c0:	6878      	ldr	r0, [r7, #4]
 80097c2:	f7f8 fd6d 	bl	80022a0 <HAL_TIM_IC_CaptureCallback>
 80097c6:	e005      	b.n	80097d4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80097c8:	6878      	ldr	r0, [r7, #4]
 80097ca:	f000 fb39 	bl	8009e40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80097ce:	6878      	ldr	r0, [r7, #4]
 80097d0:	f000 fb40 	bl	8009e54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	2200      	movs	r2, #0
 80097d8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	691b      	ldr	r3, [r3, #16]
 80097e0:	f003 0310 	and.w	r3, r3, #16
 80097e4:	2b10      	cmp	r3, #16
 80097e6:	d122      	bne.n	800982e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	68db      	ldr	r3, [r3, #12]
 80097ee:	f003 0310 	and.w	r3, r3, #16
 80097f2:	2b10      	cmp	r3, #16
 80097f4:	d11b      	bne.n	800982e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	f06f 0210 	mvn.w	r2, #16
 80097fe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	2208      	movs	r2, #8
 8009804:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	69db      	ldr	r3, [r3, #28]
 800980c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009810:	2b00      	cmp	r3, #0
 8009812:	d003      	beq.n	800981c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009814:	6878      	ldr	r0, [r7, #4]
 8009816:	f7f8 fd43 	bl	80022a0 <HAL_TIM_IC_CaptureCallback>
 800981a:	e005      	b.n	8009828 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800981c:	6878      	ldr	r0, [r7, #4]
 800981e:	f000 fb0f 	bl	8009e40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009822:	6878      	ldr	r0, [r7, #4]
 8009824:	f000 fb16 	bl	8009e54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	2200      	movs	r2, #0
 800982c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	691b      	ldr	r3, [r3, #16]
 8009834:	f003 0301 	and.w	r3, r3, #1
 8009838:	2b01      	cmp	r3, #1
 800983a:	d10e      	bne.n	800985a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	68db      	ldr	r3, [r3, #12]
 8009842:	f003 0301 	and.w	r3, r3, #1
 8009846:	2b01      	cmp	r3, #1
 8009848:	d107      	bne.n	800985a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	f06f 0201 	mvn.w	r2, #1
 8009852:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009854:	6878      	ldr	r0, [r7, #4]
 8009856:	f7f8 fdc5 	bl	80023e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	691b      	ldr	r3, [r3, #16]
 8009860:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009864:	2b80      	cmp	r3, #128	; 0x80
 8009866:	d10e      	bne.n	8009886 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	68db      	ldr	r3, [r3, #12]
 800986e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009872:	2b80      	cmp	r3, #128	; 0x80
 8009874:	d107      	bne.n	8009886 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800987e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009880:	6878      	ldr	r0, [r7, #4]
 8009882:	f001 f84d 	bl	800a920 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	691b      	ldr	r3, [r3, #16]
 800988c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009890:	2b40      	cmp	r3, #64	; 0x40
 8009892:	d10e      	bne.n	80098b2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	68db      	ldr	r3, [r3, #12]
 800989a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800989e:	2b40      	cmp	r3, #64	; 0x40
 80098a0:	d107      	bne.n	80098b2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80098aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80098ac:	6878      	ldr	r0, [r7, #4]
 80098ae:	f000 fadb 	bl	8009e68 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	691b      	ldr	r3, [r3, #16]
 80098b8:	f003 0320 	and.w	r3, r3, #32
 80098bc:	2b20      	cmp	r3, #32
 80098be:	d10e      	bne.n	80098de <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	68db      	ldr	r3, [r3, #12]
 80098c6:	f003 0320 	and.w	r3, r3, #32
 80098ca:	2b20      	cmp	r3, #32
 80098cc:	d107      	bne.n	80098de <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	f06f 0220 	mvn.w	r2, #32
 80098d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80098d8:	6878      	ldr	r0, [r7, #4]
 80098da:	f001 f817 	bl	800a90c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80098de:	bf00      	nop
 80098e0:	3708      	adds	r7, #8
 80098e2:	46bd      	mov	sp, r7
 80098e4:	bd80      	pop	{r7, pc}

080098e6 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80098e6:	b580      	push	{r7, lr}
 80098e8:	b086      	sub	sp, #24
 80098ea:	af00      	add	r7, sp, #0
 80098ec:	60f8      	str	r0, [r7, #12]
 80098ee:	60b9      	str	r1, [r7, #8]
 80098f0:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80098f2:	2300      	movs	r3, #0
 80098f4:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80098fc:	2b01      	cmp	r3, #1
 80098fe:	d101      	bne.n	8009904 <HAL_TIM_IC_ConfigChannel+0x1e>
 8009900:	2302      	movs	r3, #2
 8009902:	e088      	b.n	8009a16 <HAL_TIM_IC_ConfigChannel+0x130>
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	2201      	movs	r2, #1
 8009908:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	2b00      	cmp	r3, #0
 8009910:	d11b      	bne.n	800994a <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	6818      	ldr	r0, [r3, #0]
 8009916:	68bb      	ldr	r3, [r7, #8]
 8009918:	6819      	ldr	r1, [r3, #0]
 800991a:	68bb      	ldr	r3, [r7, #8]
 800991c:	685a      	ldr	r2, [r3, #4]
 800991e:	68bb      	ldr	r3, [r7, #8]
 8009920:	68db      	ldr	r3, [r3, #12]
 8009922:	f000 fd8d 	bl	800a440 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	699a      	ldr	r2, [r3, #24]
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	f022 020c 	bic.w	r2, r2, #12
 8009934:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	6999      	ldr	r1, [r3, #24]
 800993c:	68bb      	ldr	r3, [r7, #8]
 800993e:	689a      	ldr	r2, [r3, #8]
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	430a      	orrs	r2, r1
 8009946:	619a      	str	r2, [r3, #24]
 8009948:	e060      	b.n	8009a0c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	2b04      	cmp	r3, #4
 800994e:	d11c      	bne.n	800998a <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	6818      	ldr	r0, [r3, #0]
 8009954:	68bb      	ldr	r3, [r7, #8]
 8009956:	6819      	ldr	r1, [r3, #0]
 8009958:	68bb      	ldr	r3, [r7, #8]
 800995a:	685a      	ldr	r2, [r3, #4]
 800995c:	68bb      	ldr	r3, [r7, #8]
 800995e:	68db      	ldr	r3, [r3, #12]
 8009960:	f000 fe11 	bl	800a586 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	699a      	ldr	r2, [r3, #24]
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8009972:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	6999      	ldr	r1, [r3, #24]
 800997a:	68bb      	ldr	r3, [r7, #8]
 800997c:	689b      	ldr	r3, [r3, #8]
 800997e:	021a      	lsls	r2, r3, #8
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	430a      	orrs	r2, r1
 8009986:	619a      	str	r2, [r3, #24]
 8009988:	e040      	b.n	8009a0c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	2b08      	cmp	r3, #8
 800998e:	d11b      	bne.n	80099c8 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	6818      	ldr	r0, [r3, #0]
 8009994:	68bb      	ldr	r3, [r7, #8]
 8009996:	6819      	ldr	r1, [r3, #0]
 8009998:	68bb      	ldr	r3, [r7, #8]
 800999a:	685a      	ldr	r2, [r3, #4]
 800999c:	68bb      	ldr	r3, [r7, #8]
 800999e:	68db      	ldr	r3, [r3, #12]
 80099a0:	f000 fe5e 	bl	800a660 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	69da      	ldr	r2, [r3, #28]
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	f022 020c 	bic.w	r2, r2, #12
 80099b2:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	69d9      	ldr	r1, [r3, #28]
 80099ba:	68bb      	ldr	r3, [r7, #8]
 80099bc:	689a      	ldr	r2, [r3, #8]
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	430a      	orrs	r2, r1
 80099c4:	61da      	str	r2, [r3, #28]
 80099c6:	e021      	b.n	8009a0c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	2b0c      	cmp	r3, #12
 80099cc:	d11c      	bne.n	8009a08 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	6818      	ldr	r0, [r3, #0]
 80099d2:	68bb      	ldr	r3, [r7, #8]
 80099d4:	6819      	ldr	r1, [r3, #0]
 80099d6:	68bb      	ldr	r3, [r7, #8]
 80099d8:	685a      	ldr	r2, [r3, #4]
 80099da:	68bb      	ldr	r3, [r7, #8]
 80099dc:	68db      	ldr	r3, [r3, #12]
 80099de:	f000 fe7b 	bl	800a6d8 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	69da      	ldr	r2, [r3, #28]
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80099f0:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	69d9      	ldr	r1, [r3, #28]
 80099f8:	68bb      	ldr	r3, [r7, #8]
 80099fa:	689b      	ldr	r3, [r3, #8]
 80099fc:	021a      	lsls	r2, r3, #8
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	430a      	orrs	r2, r1
 8009a04:	61da      	str	r2, [r3, #28]
 8009a06:	e001      	b.n	8009a0c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8009a08:	2301      	movs	r3, #1
 8009a0a:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	2200      	movs	r2, #0
 8009a10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009a14:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a16:	4618      	mov	r0, r3
 8009a18:	3718      	adds	r7, #24
 8009a1a:	46bd      	mov	sp, r7
 8009a1c:	bd80      	pop	{r7, pc}
	...

08009a20 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009a20:	b580      	push	{r7, lr}
 8009a22:	b086      	sub	sp, #24
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	60f8      	str	r0, [r7, #12]
 8009a28:	60b9      	str	r1, [r7, #8]
 8009a2a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009a2c:	2300      	movs	r3, #0
 8009a2e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009a36:	2b01      	cmp	r3, #1
 8009a38:	d101      	bne.n	8009a3e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009a3a:	2302      	movs	r3, #2
 8009a3c:	e0ae      	b.n	8009b9c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	2201      	movs	r2, #1
 8009a42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	2b0c      	cmp	r3, #12
 8009a4a:	f200 809f 	bhi.w	8009b8c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8009a4e:	a201      	add	r2, pc, #4	; (adr r2, 8009a54 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009a50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a54:	08009a89 	.word	0x08009a89
 8009a58:	08009b8d 	.word	0x08009b8d
 8009a5c:	08009b8d 	.word	0x08009b8d
 8009a60:	08009b8d 	.word	0x08009b8d
 8009a64:	08009ac9 	.word	0x08009ac9
 8009a68:	08009b8d 	.word	0x08009b8d
 8009a6c:	08009b8d 	.word	0x08009b8d
 8009a70:	08009b8d 	.word	0x08009b8d
 8009a74:	08009b0b 	.word	0x08009b0b
 8009a78:	08009b8d 	.word	0x08009b8d
 8009a7c:	08009b8d 	.word	0x08009b8d
 8009a80:	08009b8d 	.word	0x08009b8d
 8009a84:	08009b4b 	.word	0x08009b4b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	68b9      	ldr	r1, [r7, #8]
 8009a8e:	4618      	mov	r0, r3
 8009a90:	f000 fa94 	bl	8009fbc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	699a      	ldr	r2, [r3, #24]
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	f042 0208 	orr.w	r2, r2, #8
 8009aa2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	699a      	ldr	r2, [r3, #24]
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	f022 0204 	bic.w	r2, r2, #4
 8009ab2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	6999      	ldr	r1, [r3, #24]
 8009aba:	68bb      	ldr	r3, [r7, #8]
 8009abc:	691a      	ldr	r2, [r3, #16]
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	430a      	orrs	r2, r1
 8009ac4:	619a      	str	r2, [r3, #24]
      break;
 8009ac6:	e064      	b.n	8009b92 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	68b9      	ldr	r1, [r7, #8]
 8009ace:	4618      	mov	r0, r3
 8009ad0:	f000 fae4 	bl	800a09c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	699a      	ldr	r2, [r3, #24]
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009ae2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	699a      	ldr	r2, [r3, #24]
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009af2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	6999      	ldr	r1, [r3, #24]
 8009afa:	68bb      	ldr	r3, [r7, #8]
 8009afc:	691b      	ldr	r3, [r3, #16]
 8009afe:	021a      	lsls	r2, r3, #8
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	430a      	orrs	r2, r1
 8009b06:	619a      	str	r2, [r3, #24]
      break;
 8009b08:	e043      	b.n	8009b92 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	68b9      	ldr	r1, [r7, #8]
 8009b10:	4618      	mov	r0, r3
 8009b12:	f000 fb39 	bl	800a188 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	69da      	ldr	r2, [r3, #28]
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	f042 0208 	orr.w	r2, r2, #8
 8009b24:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	69da      	ldr	r2, [r3, #28]
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	f022 0204 	bic.w	r2, r2, #4
 8009b34:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	69d9      	ldr	r1, [r3, #28]
 8009b3c:	68bb      	ldr	r3, [r7, #8]
 8009b3e:	691a      	ldr	r2, [r3, #16]
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	430a      	orrs	r2, r1
 8009b46:	61da      	str	r2, [r3, #28]
      break;
 8009b48:	e023      	b.n	8009b92 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	68b9      	ldr	r1, [r7, #8]
 8009b50:	4618      	mov	r0, r3
 8009b52:	f000 fb8d 	bl	800a270 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	69da      	ldr	r2, [r3, #28]
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009b64:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	69da      	ldr	r2, [r3, #28]
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009b74:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	69d9      	ldr	r1, [r3, #28]
 8009b7c:	68bb      	ldr	r3, [r7, #8]
 8009b7e:	691b      	ldr	r3, [r3, #16]
 8009b80:	021a      	lsls	r2, r3, #8
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	430a      	orrs	r2, r1
 8009b88:	61da      	str	r2, [r3, #28]
      break;
 8009b8a:	e002      	b.n	8009b92 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8009b8c:	2301      	movs	r3, #1
 8009b8e:	75fb      	strb	r3, [r7, #23]
      break;
 8009b90:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	2200      	movs	r2, #0
 8009b96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009b9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b9c:	4618      	mov	r0, r3
 8009b9e:	3718      	adds	r7, #24
 8009ba0:	46bd      	mov	sp, r7
 8009ba2:	bd80      	pop	{r7, pc}

08009ba4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009ba4:	b580      	push	{r7, lr}
 8009ba6:	b084      	sub	sp, #16
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	6078      	str	r0, [r7, #4]
 8009bac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009bae:	2300      	movs	r3, #0
 8009bb0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009bb8:	2b01      	cmp	r3, #1
 8009bba:	d101      	bne.n	8009bc0 <HAL_TIM_ConfigClockSource+0x1c>
 8009bbc:	2302      	movs	r3, #2
 8009bbe:	e0b4      	b.n	8009d2a <HAL_TIM_ConfigClockSource+0x186>
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	2201      	movs	r2, #1
 8009bc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	2202      	movs	r2, #2
 8009bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	689b      	ldr	r3, [r3, #8]
 8009bd6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009bd8:	68bb      	ldr	r3, [r7, #8]
 8009bda:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009bde:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009be0:	68bb      	ldr	r3, [r7, #8]
 8009be2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009be6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	68ba      	ldr	r2, [r7, #8]
 8009bee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009bf0:	683b      	ldr	r3, [r7, #0]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009bf8:	d03e      	beq.n	8009c78 <HAL_TIM_ConfigClockSource+0xd4>
 8009bfa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009bfe:	f200 8087 	bhi.w	8009d10 <HAL_TIM_ConfigClockSource+0x16c>
 8009c02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009c06:	f000 8086 	beq.w	8009d16 <HAL_TIM_ConfigClockSource+0x172>
 8009c0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009c0e:	d87f      	bhi.n	8009d10 <HAL_TIM_ConfigClockSource+0x16c>
 8009c10:	2b70      	cmp	r3, #112	; 0x70
 8009c12:	d01a      	beq.n	8009c4a <HAL_TIM_ConfigClockSource+0xa6>
 8009c14:	2b70      	cmp	r3, #112	; 0x70
 8009c16:	d87b      	bhi.n	8009d10 <HAL_TIM_ConfigClockSource+0x16c>
 8009c18:	2b60      	cmp	r3, #96	; 0x60
 8009c1a:	d050      	beq.n	8009cbe <HAL_TIM_ConfigClockSource+0x11a>
 8009c1c:	2b60      	cmp	r3, #96	; 0x60
 8009c1e:	d877      	bhi.n	8009d10 <HAL_TIM_ConfigClockSource+0x16c>
 8009c20:	2b50      	cmp	r3, #80	; 0x50
 8009c22:	d03c      	beq.n	8009c9e <HAL_TIM_ConfigClockSource+0xfa>
 8009c24:	2b50      	cmp	r3, #80	; 0x50
 8009c26:	d873      	bhi.n	8009d10 <HAL_TIM_ConfigClockSource+0x16c>
 8009c28:	2b40      	cmp	r3, #64	; 0x40
 8009c2a:	d058      	beq.n	8009cde <HAL_TIM_ConfigClockSource+0x13a>
 8009c2c:	2b40      	cmp	r3, #64	; 0x40
 8009c2e:	d86f      	bhi.n	8009d10 <HAL_TIM_ConfigClockSource+0x16c>
 8009c30:	2b30      	cmp	r3, #48	; 0x30
 8009c32:	d064      	beq.n	8009cfe <HAL_TIM_ConfigClockSource+0x15a>
 8009c34:	2b30      	cmp	r3, #48	; 0x30
 8009c36:	d86b      	bhi.n	8009d10 <HAL_TIM_ConfigClockSource+0x16c>
 8009c38:	2b20      	cmp	r3, #32
 8009c3a:	d060      	beq.n	8009cfe <HAL_TIM_ConfigClockSource+0x15a>
 8009c3c:	2b20      	cmp	r3, #32
 8009c3e:	d867      	bhi.n	8009d10 <HAL_TIM_ConfigClockSource+0x16c>
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d05c      	beq.n	8009cfe <HAL_TIM_ConfigClockSource+0x15a>
 8009c44:	2b10      	cmp	r3, #16
 8009c46:	d05a      	beq.n	8009cfe <HAL_TIM_ConfigClockSource+0x15a>
 8009c48:	e062      	b.n	8009d10 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	6818      	ldr	r0, [r3, #0]
 8009c4e:	683b      	ldr	r3, [r7, #0]
 8009c50:	6899      	ldr	r1, [r3, #8]
 8009c52:	683b      	ldr	r3, [r7, #0]
 8009c54:	685a      	ldr	r2, [r3, #4]
 8009c56:	683b      	ldr	r3, [r7, #0]
 8009c58:	68db      	ldr	r3, [r3, #12]
 8009c5a:	f000 fd95 	bl	800a788 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	689b      	ldr	r3, [r3, #8]
 8009c64:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009c66:	68bb      	ldr	r3, [r7, #8]
 8009c68:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009c6c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	68ba      	ldr	r2, [r7, #8]
 8009c74:	609a      	str	r2, [r3, #8]
      break;
 8009c76:	e04f      	b.n	8009d18 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	6818      	ldr	r0, [r3, #0]
 8009c7c:	683b      	ldr	r3, [r7, #0]
 8009c7e:	6899      	ldr	r1, [r3, #8]
 8009c80:	683b      	ldr	r3, [r7, #0]
 8009c82:	685a      	ldr	r2, [r3, #4]
 8009c84:	683b      	ldr	r3, [r7, #0]
 8009c86:	68db      	ldr	r3, [r3, #12]
 8009c88:	f000 fd7e 	bl	800a788 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	689a      	ldr	r2, [r3, #8]
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009c9a:	609a      	str	r2, [r3, #8]
      break;
 8009c9c:	e03c      	b.n	8009d18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	6818      	ldr	r0, [r3, #0]
 8009ca2:	683b      	ldr	r3, [r7, #0]
 8009ca4:	6859      	ldr	r1, [r3, #4]
 8009ca6:	683b      	ldr	r3, [r7, #0]
 8009ca8:	68db      	ldr	r3, [r3, #12]
 8009caa:	461a      	mov	r2, r3
 8009cac:	f000 fc3c 	bl	800a528 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	2150      	movs	r1, #80	; 0x50
 8009cb6:	4618      	mov	r0, r3
 8009cb8:	f000 fd4b 	bl	800a752 <TIM_ITRx_SetConfig>
      break;
 8009cbc:	e02c      	b.n	8009d18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	6818      	ldr	r0, [r3, #0]
 8009cc2:	683b      	ldr	r3, [r7, #0]
 8009cc4:	6859      	ldr	r1, [r3, #4]
 8009cc6:	683b      	ldr	r3, [r7, #0]
 8009cc8:	68db      	ldr	r3, [r3, #12]
 8009cca:	461a      	mov	r2, r3
 8009ccc:	f000 fc98 	bl	800a600 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	2160      	movs	r1, #96	; 0x60
 8009cd6:	4618      	mov	r0, r3
 8009cd8:	f000 fd3b 	bl	800a752 <TIM_ITRx_SetConfig>
      break;
 8009cdc:	e01c      	b.n	8009d18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	6818      	ldr	r0, [r3, #0]
 8009ce2:	683b      	ldr	r3, [r7, #0]
 8009ce4:	6859      	ldr	r1, [r3, #4]
 8009ce6:	683b      	ldr	r3, [r7, #0]
 8009ce8:	68db      	ldr	r3, [r3, #12]
 8009cea:	461a      	mov	r2, r3
 8009cec:	f000 fc1c 	bl	800a528 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	2140      	movs	r1, #64	; 0x40
 8009cf6:	4618      	mov	r0, r3
 8009cf8:	f000 fd2b 	bl	800a752 <TIM_ITRx_SetConfig>
      break;
 8009cfc:	e00c      	b.n	8009d18 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	681a      	ldr	r2, [r3, #0]
 8009d02:	683b      	ldr	r3, [r7, #0]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	4619      	mov	r1, r3
 8009d08:	4610      	mov	r0, r2
 8009d0a:	f000 fd22 	bl	800a752 <TIM_ITRx_SetConfig>
      break;
 8009d0e:	e003      	b.n	8009d18 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009d10:	2301      	movs	r3, #1
 8009d12:	73fb      	strb	r3, [r7, #15]
      break;
 8009d14:	e000      	b.n	8009d18 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009d16:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	2201      	movs	r2, #1
 8009d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	2200      	movs	r2, #0
 8009d24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009d28:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d2a:	4618      	mov	r0, r3
 8009d2c:	3710      	adds	r7, #16
 8009d2e:	46bd      	mov	sp, r7
 8009d30:	bd80      	pop	{r7, pc}

08009d32 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8009d32:	b580      	push	{r7, lr}
 8009d34:	b082      	sub	sp, #8
 8009d36:	af00      	add	r7, sp, #0
 8009d38:	6078      	str	r0, [r7, #4]
 8009d3a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009d42:	2b01      	cmp	r3, #1
 8009d44:	d101      	bne.n	8009d4a <HAL_TIM_SlaveConfigSynchro+0x18>
 8009d46:	2302      	movs	r3, #2
 8009d48:	e031      	b.n	8009dae <HAL_TIM_SlaveConfigSynchro+0x7c>
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	2201      	movs	r2, #1
 8009d4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	2202      	movs	r2, #2
 8009d56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8009d5a:	6839      	ldr	r1, [r7, #0]
 8009d5c:	6878      	ldr	r0, [r7, #4]
 8009d5e:	f000 fadd 	bl	800a31c <TIM_SlaveTimer_SetConfig>
 8009d62:	4603      	mov	r3, r0
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d009      	beq.n	8009d7c <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	2201      	movs	r2, #1
 8009d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	2200      	movs	r2, #0
 8009d74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8009d78:	2301      	movs	r3, #1
 8009d7a:	e018      	b.n	8009dae <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	68da      	ldr	r2, [r3, #12]
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009d8a:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	68da      	ldr	r2, [r3, #12]
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009d9a:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	2201      	movs	r2, #1
 8009da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	2200      	movs	r2, #0
 8009da8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009dac:	2300      	movs	r3, #0
}
 8009dae:	4618      	mov	r0, r3
 8009db0:	3708      	adds	r7, #8
 8009db2:	46bd      	mov	sp, r7
 8009db4:	bd80      	pop	{r7, pc}
	...

08009db8 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009db8:	b480      	push	{r7}
 8009dba:	b085      	sub	sp, #20
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	6078      	str	r0, [r7, #4]
 8009dc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8009dc2:	2300      	movs	r3, #0
 8009dc4:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8009dc6:	683b      	ldr	r3, [r7, #0]
 8009dc8:	2b0c      	cmp	r3, #12
 8009dca:	d831      	bhi.n	8009e30 <HAL_TIM_ReadCapturedValue+0x78>
 8009dcc:	a201      	add	r2, pc, #4	; (adr r2, 8009dd4 <HAL_TIM_ReadCapturedValue+0x1c>)
 8009dce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dd2:	bf00      	nop
 8009dd4:	08009e09 	.word	0x08009e09
 8009dd8:	08009e31 	.word	0x08009e31
 8009ddc:	08009e31 	.word	0x08009e31
 8009de0:	08009e31 	.word	0x08009e31
 8009de4:	08009e13 	.word	0x08009e13
 8009de8:	08009e31 	.word	0x08009e31
 8009dec:	08009e31 	.word	0x08009e31
 8009df0:	08009e31 	.word	0x08009e31
 8009df4:	08009e1d 	.word	0x08009e1d
 8009df8:	08009e31 	.word	0x08009e31
 8009dfc:	08009e31 	.word	0x08009e31
 8009e00:	08009e31 	.word	0x08009e31
 8009e04:	08009e27 	.word	0x08009e27
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e0e:	60fb      	str	r3, [r7, #12]

      break;
 8009e10:	e00f      	b.n	8009e32 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e18:	60fb      	str	r3, [r7, #12]

      break;
 8009e1a:	e00a      	b.n	8009e32 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e22:	60fb      	str	r3, [r7, #12]

      break;
 8009e24:	e005      	b.n	8009e32 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e2c:	60fb      	str	r3, [r7, #12]

      break;
 8009e2e:	e000      	b.n	8009e32 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8009e30:	bf00      	nop
  }

  return tmpreg;
 8009e32:	68fb      	ldr	r3, [r7, #12]
}
 8009e34:	4618      	mov	r0, r3
 8009e36:	3714      	adds	r7, #20
 8009e38:	46bd      	mov	sp, r7
 8009e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e3e:	4770      	bx	lr

08009e40 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009e40:	b480      	push	{r7}
 8009e42:	b083      	sub	sp, #12
 8009e44:	af00      	add	r7, sp, #0
 8009e46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009e48:	bf00      	nop
 8009e4a:	370c      	adds	r7, #12
 8009e4c:	46bd      	mov	sp, r7
 8009e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e52:	4770      	bx	lr

08009e54 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009e54:	b480      	push	{r7}
 8009e56:	b083      	sub	sp, #12
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009e5c:	bf00      	nop
 8009e5e:	370c      	adds	r7, #12
 8009e60:	46bd      	mov	sp, r7
 8009e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e66:	4770      	bx	lr

08009e68 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009e68:	b480      	push	{r7}
 8009e6a:	b083      	sub	sp, #12
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009e70:	bf00      	nop
 8009e72:	370c      	adds	r7, #12
 8009e74:	46bd      	mov	sp, r7
 8009e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e7a:	4770      	bx	lr

08009e7c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009e7c:	b480      	push	{r7}
 8009e7e:	b085      	sub	sp, #20
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	6078      	str	r0, [r7, #4]
 8009e84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	4a40      	ldr	r2, [pc, #256]	; (8009f90 <TIM_Base_SetConfig+0x114>)
 8009e90:	4293      	cmp	r3, r2
 8009e92:	d013      	beq.n	8009ebc <TIM_Base_SetConfig+0x40>
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009e9a:	d00f      	beq.n	8009ebc <TIM_Base_SetConfig+0x40>
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	4a3d      	ldr	r2, [pc, #244]	; (8009f94 <TIM_Base_SetConfig+0x118>)
 8009ea0:	4293      	cmp	r3, r2
 8009ea2:	d00b      	beq.n	8009ebc <TIM_Base_SetConfig+0x40>
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	4a3c      	ldr	r2, [pc, #240]	; (8009f98 <TIM_Base_SetConfig+0x11c>)
 8009ea8:	4293      	cmp	r3, r2
 8009eaa:	d007      	beq.n	8009ebc <TIM_Base_SetConfig+0x40>
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	4a3b      	ldr	r2, [pc, #236]	; (8009f9c <TIM_Base_SetConfig+0x120>)
 8009eb0:	4293      	cmp	r3, r2
 8009eb2:	d003      	beq.n	8009ebc <TIM_Base_SetConfig+0x40>
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	4a3a      	ldr	r2, [pc, #232]	; (8009fa0 <TIM_Base_SetConfig+0x124>)
 8009eb8:	4293      	cmp	r3, r2
 8009eba:	d108      	bne.n	8009ece <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ec2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009ec4:	683b      	ldr	r3, [r7, #0]
 8009ec6:	685b      	ldr	r3, [r3, #4]
 8009ec8:	68fa      	ldr	r2, [r7, #12]
 8009eca:	4313      	orrs	r3, r2
 8009ecc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	4a2f      	ldr	r2, [pc, #188]	; (8009f90 <TIM_Base_SetConfig+0x114>)
 8009ed2:	4293      	cmp	r3, r2
 8009ed4:	d02b      	beq.n	8009f2e <TIM_Base_SetConfig+0xb2>
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009edc:	d027      	beq.n	8009f2e <TIM_Base_SetConfig+0xb2>
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	4a2c      	ldr	r2, [pc, #176]	; (8009f94 <TIM_Base_SetConfig+0x118>)
 8009ee2:	4293      	cmp	r3, r2
 8009ee4:	d023      	beq.n	8009f2e <TIM_Base_SetConfig+0xb2>
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	4a2b      	ldr	r2, [pc, #172]	; (8009f98 <TIM_Base_SetConfig+0x11c>)
 8009eea:	4293      	cmp	r3, r2
 8009eec:	d01f      	beq.n	8009f2e <TIM_Base_SetConfig+0xb2>
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	4a2a      	ldr	r2, [pc, #168]	; (8009f9c <TIM_Base_SetConfig+0x120>)
 8009ef2:	4293      	cmp	r3, r2
 8009ef4:	d01b      	beq.n	8009f2e <TIM_Base_SetConfig+0xb2>
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	4a29      	ldr	r2, [pc, #164]	; (8009fa0 <TIM_Base_SetConfig+0x124>)
 8009efa:	4293      	cmp	r3, r2
 8009efc:	d017      	beq.n	8009f2e <TIM_Base_SetConfig+0xb2>
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	4a28      	ldr	r2, [pc, #160]	; (8009fa4 <TIM_Base_SetConfig+0x128>)
 8009f02:	4293      	cmp	r3, r2
 8009f04:	d013      	beq.n	8009f2e <TIM_Base_SetConfig+0xb2>
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	4a27      	ldr	r2, [pc, #156]	; (8009fa8 <TIM_Base_SetConfig+0x12c>)
 8009f0a:	4293      	cmp	r3, r2
 8009f0c:	d00f      	beq.n	8009f2e <TIM_Base_SetConfig+0xb2>
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	4a26      	ldr	r2, [pc, #152]	; (8009fac <TIM_Base_SetConfig+0x130>)
 8009f12:	4293      	cmp	r3, r2
 8009f14:	d00b      	beq.n	8009f2e <TIM_Base_SetConfig+0xb2>
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	4a25      	ldr	r2, [pc, #148]	; (8009fb0 <TIM_Base_SetConfig+0x134>)
 8009f1a:	4293      	cmp	r3, r2
 8009f1c:	d007      	beq.n	8009f2e <TIM_Base_SetConfig+0xb2>
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	4a24      	ldr	r2, [pc, #144]	; (8009fb4 <TIM_Base_SetConfig+0x138>)
 8009f22:	4293      	cmp	r3, r2
 8009f24:	d003      	beq.n	8009f2e <TIM_Base_SetConfig+0xb2>
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	4a23      	ldr	r2, [pc, #140]	; (8009fb8 <TIM_Base_SetConfig+0x13c>)
 8009f2a:	4293      	cmp	r3, r2
 8009f2c:	d108      	bne.n	8009f40 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009f34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009f36:	683b      	ldr	r3, [r7, #0]
 8009f38:	68db      	ldr	r3, [r3, #12]
 8009f3a:	68fa      	ldr	r2, [r7, #12]
 8009f3c:	4313      	orrs	r3, r2
 8009f3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009f46:	683b      	ldr	r3, [r7, #0]
 8009f48:	695b      	ldr	r3, [r3, #20]
 8009f4a:	4313      	orrs	r3, r2
 8009f4c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	68fa      	ldr	r2, [r7, #12]
 8009f52:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009f54:	683b      	ldr	r3, [r7, #0]
 8009f56:	689a      	ldr	r2, [r3, #8]
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009f5c:	683b      	ldr	r3, [r7, #0]
 8009f5e:	681a      	ldr	r2, [r3, #0]
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	4a0a      	ldr	r2, [pc, #40]	; (8009f90 <TIM_Base_SetConfig+0x114>)
 8009f68:	4293      	cmp	r3, r2
 8009f6a:	d003      	beq.n	8009f74 <TIM_Base_SetConfig+0xf8>
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	4a0c      	ldr	r2, [pc, #48]	; (8009fa0 <TIM_Base_SetConfig+0x124>)
 8009f70:	4293      	cmp	r3, r2
 8009f72:	d103      	bne.n	8009f7c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009f74:	683b      	ldr	r3, [r7, #0]
 8009f76:	691a      	ldr	r2, [r3, #16]
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	2201      	movs	r2, #1
 8009f80:	615a      	str	r2, [r3, #20]
}
 8009f82:	bf00      	nop
 8009f84:	3714      	adds	r7, #20
 8009f86:	46bd      	mov	sp, r7
 8009f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f8c:	4770      	bx	lr
 8009f8e:	bf00      	nop
 8009f90:	40010000 	.word	0x40010000
 8009f94:	40000400 	.word	0x40000400
 8009f98:	40000800 	.word	0x40000800
 8009f9c:	40000c00 	.word	0x40000c00
 8009fa0:	40010400 	.word	0x40010400
 8009fa4:	40014000 	.word	0x40014000
 8009fa8:	40014400 	.word	0x40014400
 8009fac:	40014800 	.word	0x40014800
 8009fb0:	40001800 	.word	0x40001800
 8009fb4:	40001c00 	.word	0x40001c00
 8009fb8:	40002000 	.word	0x40002000

08009fbc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009fbc:	b480      	push	{r7}
 8009fbe:	b087      	sub	sp, #28
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	6078      	str	r0, [r7, #4]
 8009fc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	6a1b      	ldr	r3, [r3, #32]
 8009fca:	f023 0201 	bic.w	r2, r3, #1
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	6a1b      	ldr	r3, [r3, #32]
 8009fd6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	685b      	ldr	r3, [r3, #4]
 8009fdc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	699b      	ldr	r3, [r3, #24]
 8009fe2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009fea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	f023 0303 	bic.w	r3, r3, #3
 8009ff2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009ff4:	683b      	ldr	r3, [r7, #0]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	68fa      	ldr	r2, [r7, #12]
 8009ffa:	4313      	orrs	r3, r2
 8009ffc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009ffe:	697b      	ldr	r3, [r7, #20]
 800a000:	f023 0302 	bic.w	r3, r3, #2
 800a004:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a006:	683b      	ldr	r3, [r7, #0]
 800a008:	689b      	ldr	r3, [r3, #8]
 800a00a:	697a      	ldr	r2, [r7, #20]
 800a00c:	4313      	orrs	r3, r2
 800a00e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	4a20      	ldr	r2, [pc, #128]	; (800a094 <TIM_OC1_SetConfig+0xd8>)
 800a014:	4293      	cmp	r3, r2
 800a016:	d003      	beq.n	800a020 <TIM_OC1_SetConfig+0x64>
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	4a1f      	ldr	r2, [pc, #124]	; (800a098 <TIM_OC1_SetConfig+0xdc>)
 800a01c:	4293      	cmp	r3, r2
 800a01e:	d10c      	bne.n	800a03a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a020:	697b      	ldr	r3, [r7, #20]
 800a022:	f023 0308 	bic.w	r3, r3, #8
 800a026:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a028:	683b      	ldr	r3, [r7, #0]
 800a02a:	68db      	ldr	r3, [r3, #12]
 800a02c:	697a      	ldr	r2, [r7, #20]
 800a02e:	4313      	orrs	r3, r2
 800a030:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a032:	697b      	ldr	r3, [r7, #20]
 800a034:	f023 0304 	bic.w	r3, r3, #4
 800a038:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	4a15      	ldr	r2, [pc, #84]	; (800a094 <TIM_OC1_SetConfig+0xd8>)
 800a03e:	4293      	cmp	r3, r2
 800a040:	d003      	beq.n	800a04a <TIM_OC1_SetConfig+0x8e>
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	4a14      	ldr	r2, [pc, #80]	; (800a098 <TIM_OC1_SetConfig+0xdc>)
 800a046:	4293      	cmp	r3, r2
 800a048:	d111      	bne.n	800a06e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a04a:	693b      	ldr	r3, [r7, #16]
 800a04c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a050:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a052:	693b      	ldr	r3, [r7, #16]
 800a054:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a058:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a05a:	683b      	ldr	r3, [r7, #0]
 800a05c:	695b      	ldr	r3, [r3, #20]
 800a05e:	693a      	ldr	r2, [r7, #16]
 800a060:	4313      	orrs	r3, r2
 800a062:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a064:	683b      	ldr	r3, [r7, #0]
 800a066:	699b      	ldr	r3, [r3, #24]
 800a068:	693a      	ldr	r2, [r7, #16]
 800a06a:	4313      	orrs	r3, r2
 800a06c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	693a      	ldr	r2, [r7, #16]
 800a072:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	68fa      	ldr	r2, [r7, #12]
 800a078:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a07a:	683b      	ldr	r3, [r7, #0]
 800a07c:	685a      	ldr	r2, [r3, #4]
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	697a      	ldr	r2, [r7, #20]
 800a086:	621a      	str	r2, [r3, #32]
}
 800a088:	bf00      	nop
 800a08a:	371c      	adds	r7, #28
 800a08c:	46bd      	mov	sp, r7
 800a08e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a092:	4770      	bx	lr
 800a094:	40010000 	.word	0x40010000
 800a098:	40010400 	.word	0x40010400

0800a09c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a09c:	b480      	push	{r7}
 800a09e:	b087      	sub	sp, #28
 800a0a0:	af00      	add	r7, sp, #0
 800a0a2:	6078      	str	r0, [r7, #4]
 800a0a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	6a1b      	ldr	r3, [r3, #32]
 800a0aa:	f023 0210 	bic.w	r2, r3, #16
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	6a1b      	ldr	r3, [r3, #32]
 800a0b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	685b      	ldr	r3, [r3, #4]
 800a0bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	699b      	ldr	r3, [r3, #24]
 800a0c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a0ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a0d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a0d4:	683b      	ldr	r3, [r7, #0]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	021b      	lsls	r3, r3, #8
 800a0da:	68fa      	ldr	r2, [r7, #12]
 800a0dc:	4313      	orrs	r3, r2
 800a0de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a0e0:	697b      	ldr	r3, [r7, #20]
 800a0e2:	f023 0320 	bic.w	r3, r3, #32
 800a0e6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a0e8:	683b      	ldr	r3, [r7, #0]
 800a0ea:	689b      	ldr	r3, [r3, #8]
 800a0ec:	011b      	lsls	r3, r3, #4
 800a0ee:	697a      	ldr	r2, [r7, #20]
 800a0f0:	4313      	orrs	r3, r2
 800a0f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	4a22      	ldr	r2, [pc, #136]	; (800a180 <TIM_OC2_SetConfig+0xe4>)
 800a0f8:	4293      	cmp	r3, r2
 800a0fa:	d003      	beq.n	800a104 <TIM_OC2_SetConfig+0x68>
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	4a21      	ldr	r2, [pc, #132]	; (800a184 <TIM_OC2_SetConfig+0xe8>)
 800a100:	4293      	cmp	r3, r2
 800a102:	d10d      	bne.n	800a120 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a104:	697b      	ldr	r3, [r7, #20]
 800a106:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a10a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a10c:	683b      	ldr	r3, [r7, #0]
 800a10e:	68db      	ldr	r3, [r3, #12]
 800a110:	011b      	lsls	r3, r3, #4
 800a112:	697a      	ldr	r2, [r7, #20]
 800a114:	4313      	orrs	r3, r2
 800a116:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a118:	697b      	ldr	r3, [r7, #20]
 800a11a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a11e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	4a17      	ldr	r2, [pc, #92]	; (800a180 <TIM_OC2_SetConfig+0xe4>)
 800a124:	4293      	cmp	r3, r2
 800a126:	d003      	beq.n	800a130 <TIM_OC2_SetConfig+0x94>
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	4a16      	ldr	r2, [pc, #88]	; (800a184 <TIM_OC2_SetConfig+0xe8>)
 800a12c:	4293      	cmp	r3, r2
 800a12e:	d113      	bne.n	800a158 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a130:	693b      	ldr	r3, [r7, #16]
 800a132:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a136:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a138:	693b      	ldr	r3, [r7, #16]
 800a13a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a13e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a140:	683b      	ldr	r3, [r7, #0]
 800a142:	695b      	ldr	r3, [r3, #20]
 800a144:	009b      	lsls	r3, r3, #2
 800a146:	693a      	ldr	r2, [r7, #16]
 800a148:	4313      	orrs	r3, r2
 800a14a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a14c:	683b      	ldr	r3, [r7, #0]
 800a14e:	699b      	ldr	r3, [r3, #24]
 800a150:	009b      	lsls	r3, r3, #2
 800a152:	693a      	ldr	r2, [r7, #16]
 800a154:	4313      	orrs	r3, r2
 800a156:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	693a      	ldr	r2, [r7, #16]
 800a15c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	68fa      	ldr	r2, [r7, #12]
 800a162:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a164:	683b      	ldr	r3, [r7, #0]
 800a166:	685a      	ldr	r2, [r3, #4]
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	697a      	ldr	r2, [r7, #20]
 800a170:	621a      	str	r2, [r3, #32]
}
 800a172:	bf00      	nop
 800a174:	371c      	adds	r7, #28
 800a176:	46bd      	mov	sp, r7
 800a178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a17c:	4770      	bx	lr
 800a17e:	bf00      	nop
 800a180:	40010000 	.word	0x40010000
 800a184:	40010400 	.word	0x40010400

0800a188 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a188:	b480      	push	{r7}
 800a18a:	b087      	sub	sp, #28
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	6078      	str	r0, [r7, #4]
 800a190:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	6a1b      	ldr	r3, [r3, #32]
 800a196:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	6a1b      	ldr	r3, [r3, #32]
 800a1a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	685b      	ldr	r3, [r3, #4]
 800a1a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	69db      	ldr	r3, [r3, #28]
 800a1ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a1b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	f023 0303 	bic.w	r3, r3, #3
 800a1be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a1c0:	683b      	ldr	r3, [r7, #0]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	68fa      	ldr	r2, [r7, #12]
 800a1c6:	4313      	orrs	r3, r2
 800a1c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a1ca:	697b      	ldr	r3, [r7, #20]
 800a1cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a1d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a1d2:	683b      	ldr	r3, [r7, #0]
 800a1d4:	689b      	ldr	r3, [r3, #8]
 800a1d6:	021b      	lsls	r3, r3, #8
 800a1d8:	697a      	ldr	r2, [r7, #20]
 800a1da:	4313      	orrs	r3, r2
 800a1dc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	4a21      	ldr	r2, [pc, #132]	; (800a268 <TIM_OC3_SetConfig+0xe0>)
 800a1e2:	4293      	cmp	r3, r2
 800a1e4:	d003      	beq.n	800a1ee <TIM_OC3_SetConfig+0x66>
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	4a20      	ldr	r2, [pc, #128]	; (800a26c <TIM_OC3_SetConfig+0xe4>)
 800a1ea:	4293      	cmp	r3, r2
 800a1ec:	d10d      	bne.n	800a20a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a1ee:	697b      	ldr	r3, [r7, #20]
 800a1f0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a1f4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a1f6:	683b      	ldr	r3, [r7, #0]
 800a1f8:	68db      	ldr	r3, [r3, #12]
 800a1fa:	021b      	lsls	r3, r3, #8
 800a1fc:	697a      	ldr	r2, [r7, #20]
 800a1fe:	4313      	orrs	r3, r2
 800a200:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a202:	697b      	ldr	r3, [r7, #20]
 800a204:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a208:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	4a16      	ldr	r2, [pc, #88]	; (800a268 <TIM_OC3_SetConfig+0xe0>)
 800a20e:	4293      	cmp	r3, r2
 800a210:	d003      	beq.n	800a21a <TIM_OC3_SetConfig+0x92>
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	4a15      	ldr	r2, [pc, #84]	; (800a26c <TIM_OC3_SetConfig+0xe4>)
 800a216:	4293      	cmp	r3, r2
 800a218:	d113      	bne.n	800a242 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a21a:	693b      	ldr	r3, [r7, #16]
 800a21c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a220:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a222:	693b      	ldr	r3, [r7, #16]
 800a224:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a228:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a22a:	683b      	ldr	r3, [r7, #0]
 800a22c:	695b      	ldr	r3, [r3, #20]
 800a22e:	011b      	lsls	r3, r3, #4
 800a230:	693a      	ldr	r2, [r7, #16]
 800a232:	4313      	orrs	r3, r2
 800a234:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a236:	683b      	ldr	r3, [r7, #0]
 800a238:	699b      	ldr	r3, [r3, #24]
 800a23a:	011b      	lsls	r3, r3, #4
 800a23c:	693a      	ldr	r2, [r7, #16]
 800a23e:	4313      	orrs	r3, r2
 800a240:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	693a      	ldr	r2, [r7, #16]
 800a246:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	68fa      	ldr	r2, [r7, #12]
 800a24c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a24e:	683b      	ldr	r3, [r7, #0]
 800a250:	685a      	ldr	r2, [r3, #4]
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	697a      	ldr	r2, [r7, #20]
 800a25a:	621a      	str	r2, [r3, #32]
}
 800a25c:	bf00      	nop
 800a25e:	371c      	adds	r7, #28
 800a260:	46bd      	mov	sp, r7
 800a262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a266:	4770      	bx	lr
 800a268:	40010000 	.word	0x40010000
 800a26c:	40010400 	.word	0x40010400

0800a270 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a270:	b480      	push	{r7}
 800a272:	b087      	sub	sp, #28
 800a274:	af00      	add	r7, sp, #0
 800a276:	6078      	str	r0, [r7, #4]
 800a278:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	6a1b      	ldr	r3, [r3, #32]
 800a27e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	6a1b      	ldr	r3, [r3, #32]
 800a28a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	685b      	ldr	r3, [r3, #4]
 800a290:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	69db      	ldr	r3, [r3, #28]
 800a296:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a29e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a2a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a2a8:	683b      	ldr	r3, [r7, #0]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	021b      	lsls	r3, r3, #8
 800a2ae:	68fa      	ldr	r2, [r7, #12]
 800a2b0:	4313      	orrs	r3, r2
 800a2b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a2b4:	693b      	ldr	r3, [r7, #16]
 800a2b6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a2ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a2bc:	683b      	ldr	r3, [r7, #0]
 800a2be:	689b      	ldr	r3, [r3, #8]
 800a2c0:	031b      	lsls	r3, r3, #12
 800a2c2:	693a      	ldr	r2, [r7, #16]
 800a2c4:	4313      	orrs	r3, r2
 800a2c6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	4a12      	ldr	r2, [pc, #72]	; (800a314 <TIM_OC4_SetConfig+0xa4>)
 800a2cc:	4293      	cmp	r3, r2
 800a2ce:	d003      	beq.n	800a2d8 <TIM_OC4_SetConfig+0x68>
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	4a11      	ldr	r2, [pc, #68]	; (800a318 <TIM_OC4_SetConfig+0xa8>)
 800a2d4:	4293      	cmp	r3, r2
 800a2d6:	d109      	bne.n	800a2ec <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a2d8:	697b      	ldr	r3, [r7, #20]
 800a2da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a2de:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a2e0:	683b      	ldr	r3, [r7, #0]
 800a2e2:	695b      	ldr	r3, [r3, #20]
 800a2e4:	019b      	lsls	r3, r3, #6
 800a2e6:	697a      	ldr	r2, [r7, #20]
 800a2e8:	4313      	orrs	r3, r2
 800a2ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	697a      	ldr	r2, [r7, #20]
 800a2f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	68fa      	ldr	r2, [r7, #12]
 800a2f6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a2f8:	683b      	ldr	r3, [r7, #0]
 800a2fa:	685a      	ldr	r2, [r3, #4]
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	693a      	ldr	r2, [r7, #16]
 800a304:	621a      	str	r2, [r3, #32]
}
 800a306:	bf00      	nop
 800a308:	371c      	adds	r7, #28
 800a30a:	46bd      	mov	sp, r7
 800a30c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a310:	4770      	bx	lr
 800a312:	bf00      	nop
 800a314:	40010000 	.word	0x40010000
 800a318:	40010400 	.word	0x40010400

0800a31c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800a31c:	b580      	push	{r7, lr}
 800a31e:	b086      	sub	sp, #24
 800a320:	af00      	add	r7, sp, #0
 800a322:	6078      	str	r0, [r7, #4]
 800a324:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a326:	2300      	movs	r3, #0
 800a328:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	689b      	ldr	r3, [r3, #8]
 800a330:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a332:	693b      	ldr	r3, [r7, #16]
 800a334:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a338:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800a33a:	683b      	ldr	r3, [r7, #0]
 800a33c:	685b      	ldr	r3, [r3, #4]
 800a33e:	693a      	ldr	r2, [r7, #16]
 800a340:	4313      	orrs	r3, r2
 800a342:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800a344:	693b      	ldr	r3, [r7, #16]
 800a346:	f023 0307 	bic.w	r3, r3, #7
 800a34a:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800a34c:	683b      	ldr	r3, [r7, #0]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	693a      	ldr	r2, [r7, #16]
 800a352:	4313      	orrs	r3, r2
 800a354:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	693a      	ldr	r2, [r7, #16]
 800a35c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800a35e:	683b      	ldr	r3, [r7, #0]
 800a360:	685b      	ldr	r3, [r3, #4]
 800a362:	2b70      	cmp	r3, #112	; 0x70
 800a364:	d01a      	beq.n	800a39c <TIM_SlaveTimer_SetConfig+0x80>
 800a366:	2b70      	cmp	r3, #112	; 0x70
 800a368:	d860      	bhi.n	800a42c <TIM_SlaveTimer_SetConfig+0x110>
 800a36a:	2b60      	cmp	r3, #96	; 0x60
 800a36c:	d054      	beq.n	800a418 <TIM_SlaveTimer_SetConfig+0xfc>
 800a36e:	2b60      	cmp	r3, #96	; 0x60
 800a370:	d85c      	bhi.n	800a42c <TIM_SlaveTimer_SetConfig+0x110>
 800a372:	2b50      	cmp	r3, #80	; 0x50
 800a374:	d046      	beq.n	800a404 <TIM_SlaveTimer_SetConfig+0xe8>
 800a376:	2b50      	cmp	r3, #80	; 0x50
 800a378:	d858      	bhi.n	800a42c <TIM_SlaveTimer_SetConfig+0x110>
 800a37a:	2b40      	cmp	r3, #64	; 0x40
 800a37c:	d019      	beq.n	800a3b2 <TIM_SlaveTimer_SetConfig+0x96>
 800a37e:	2b40      	cmp	r3, #64	; 0x40
 800a380:	d854      	bhi.n	800a42c <TIM_SlaveTimer_SetConfig+0x110>
 800a382:	2b30      	cmp	r3, #48	; 0x30
 800a384:	d055      	beq.n	800a432 <TIM_SlaveTimer_SetConfig+0x116>
 800a386:	2b30      	cmp	r3, #48	; 0x30
 800a388:	d850      	bhi.n	800a42c <TIM_SlaveTimer_SetConfig+0x110>
 800a38a:	2b20      	cmp	r3, #32
 800a38c:	d051      	beq.n	800a432 <TIM_SlaveTimer_SetConfig+0x116>
 800a38e:	2b20      	cmp	r3, #32
 800a390:	d84c      	bhi.n	800a42c <TIM_SlaveTimer_SetConfig+0x110>
 800a392:	2b00      	cmp	r3, #0
 800a394:	d04d      	beq.n	800a432 <TIM_SlaveTimer_SetConfig+0x116>
 800a396:	2b10      	cmp	r3, #16
 800a398:	d04b      	beq.n	800a432 <TIM_SlaveTimer_SetConfig+0x116>
 800a39a:	e047      	b.n	800a42c <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	6818      	ldr	r0, [r3, #0]
 800a3a0:	683b      	ldr	r3, [r7, #0]
 800a3a2:	68d9      	ldr	r1, [r3, #12]
 800a3a4:	683b      	ldr	r3, [r7, #0]
 800a3a6:	689a      	ldr	r2, [r3, #8]
 800a3a8:	683b      	ldr	r3, [r7, #0]
 800a3aa:	691b      	ldr	r3, [r3, #16]
 800a3ac:	f000 f9ec 	bl	800a788 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 800a3b0:	e040      	b.n	800a434 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800a3b2:	683b      	ldr	r3, [r7, #0]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	2b05      	cmp	r3, #5
 800a3b8:	d101      	bne.n	800a3be <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 800a3ba:	2301      	movs	r3, #1
 800a3bc:	e03b      	b.n	800a436 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	6a1b      	ldr	r3, [r3, #32]
 800a3c4:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	6a1a      	ldr	r2, [r3, #32]
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	f022 0201 	bic.w	r2, r2, #1
 800a3d4:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	699b      	ldr	r3, [r3, #24]
 800a3dc:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a3de:	68bb      	ldr	r3, [r7, #8]
 800a3e0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a3e4:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800a3e6:	683b      	ldr	r3, [r7, #0]
 800a3e8:	691b      	ldr	r3, [r3, #16]
 800a3ea:	011b      	lsls	r3, r3, #4
 800a3ec:	68ba      	ldr	r2, [r7, #8]
 800a3ee:	4313      	orrs	r3, r2
 800a3f0:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	68ba      	ldr	r2, [r7, #8]
 800a3f8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	68fa      	ldr	r2, [r7, #12]
 800a400:	621a      	str	r2, [r3, #32]
      break;
 800a402:	e017      	b.n	800a434 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	6818      	ldr	r0, [r3, #0]
 800a408:	683b      	ldr	r3, [r7, #0]
 800a40a:	6899      	ldr	r1, [r3, #8]
 800a40c:	683b      	ldr	r3, [r7, #0]
 800a40e:	691b      	ldr	r3, [r3, #16]
 800a410:	461a      	mov	r2, r3
 800a412:	f000 f889 	bl	800a528 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800a416:	e00d      	b.n	800a434 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	6818      	ldr	r0, [r3, #0]
 800a41c:	683b      	ldr	r3, [r7, #0]
 800a41e:	6899      	ldr	r1, [r3, #8]
 800a420:	683b      	ldr	r3, [r7, #0]
 800a422:	691b      	ldr	r3, [r3, #16]
 800a424:	461a      	mov	r2, r3
 800a426:	f000 f8eb 	bl	800a600 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800a42a:	e003      	b.n	800a434 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 800a42c:	2301      	movs	r3, #1
 800a42e:	75fb      	strb	r3, [r7, #23]
      break;
 800a430:	e000      	b.n	800a434 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 800a432:	bf00      	nop
  }

  return status;
 800a434:	7dfb      	ldrb	r3, [r7, #23]
}
 800a436:	4618      	mov	r0, r3
 800a438:	3718      	adds	r7, #24
 800a43a:	46bd      	mov	sp, r7
 800a43c:	bd80      	pop	{r7, pc}
	...

0800a440 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800a440:	b480      	push	{r7}
 800a442:	b087      	sub	sp, #28
 800a444:	af00      	add	r7, sp, #0
 800a446:	60f8      	str	r0, [r7, #12]
 800a448:	60b9      	str	r1, [r7, #8]
 800a44a:	607a      	str	r2, [r7, #4]
 800a44c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	6a1b      	ldr	r3, [r3, #32]
 800a452:	f023 0201 	bic.w	r2, r3, #1
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	699b      	ldr	r3, [r3, #24]
 800a45e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	6a1b      	ldr	r3, [r3, #32]
 800a464:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	4a28      	ldr	r2, [pc, #160]	; (800a50c <TIM_TI1_SetConfig+0xcc>)
 800a46a:	4293      	cmp	r3, r2
 800a46c:	d01b      	beq.n	800a4a6 <TIM_TI1_SetConfig+0x66>
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a474:	d017      	beq.n	800a4a6 <TIM_TI1_SetConfig+0x66>
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	4a25      	ldr	r2, [pc, #148]	; (800a510 <TIM_TI1_SetConfig+0xd0>)
 800a47a:	4293      	cmp	r3, r2
 800a47c:	d013      	beq.n	800a4a6 <TIM_TI1_SetConfig+0x66>
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	4a24      	ldr	r2, [pc, #144]	; (800a514 <TIM_TI1_SetConfig+0xd4>)
 800a482:	4293      	cmp	r3, r2
 800a484:	d00f      	beq.n	800a4a6 <TIM_TI1_SetConfig+0x66>
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	4a23      	ldr	r2, [pc, #140]	; (800a518 <TIM_TI1_SetConfig+0xd8>)
 800a48a:	4293      	cmp	r3, r2
 800a48c:	d00b      	beq.n	800a4a6 <TIM_TI1_SetConfig+0x66>
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	4a22      	ldr	r2, [pc, #136]	; (800a51c <TIM_TI1_SetConfig+0xdc>)
 800a492:	4293      	cmp	r3, r2
 800a494:	d007      	beq.n	800a4a6 <TIM_TI1_SetConfig+0x66>
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	4a21      	ldr	r2, [pc, #132]	; (800a520 <TIM_TI1_SetConfig+0xe0>)
 800a49a:	4293      	cmp	r3, r2
 800a49c:	d003      	beq.n	800a4a6 <TIM_TI1_SetConfig+0x66>
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	4a20      	ldr	r2, [pc, #128]	; (800a524 <TIM_TI1_SetConfig+0xe4>)
 800a4a2:	4293      	cmp	r3, r2
 800a4a4:	d101      	bne.n	800a4aa <TIM_TI1_SetConfig+0x6a>
 800a4a6:	2301      	movs	r3, #1
 800a4a8:	e000      	b.n	800a4ac <TIM_TI1_SetConfig+0x6c>
 800a4aa:	2300      	movs	r3, #0
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d008      	beq.n	800a4c2 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800a4b0:	697b      	ldr	r3, [r7, #20]
 800a4b2:	f023 0303 	bic.w	r3, r3, #3
 800a4b6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800a4b8:	697a      	ldr	r2, [r7, #20]
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	4313      	orrs	r3, r2
 800a4be:	617b      	str	r3, [r7, #20]
 800a4c0:	e003      	b.n	800a4ca <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800a4c2:	697b      	ldr	r3, [r7, #20]
 800a4c4:	f043 0301 	orr.w	r3, r3, #1
 800a4c8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a4ca:	697b      	ldr	r3, [r7, #20]
 800a4cc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a4d0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800a4d2:	683b      	ldr	r3, [r7, #0]
 800a4d4:	011b      	lsls	r3, r3, #4
 800a4d6:	b2db      	uxtb	r3, r3
 800a4d8:	697a      	ldr	r2, [r7, #20]
 800a4da:	4313      	orrs	r3, r2
 800a4dc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a4de:	693b      	ldr	r3, [r7, #16]
 800a4e0:	f023 030a 	bic.w	r3, r3, #10
 800a4e4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800a4e6:	68bb      	ldr	r3, [r7, #8]
 800a4e8:	f003 030a 	and.w	r3, r3, #10
 800a4ec:	693a      	ldr	r2, [r7, #16]
 800a4ee:	4313      	orrs	r3, r2
 800a4f0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	697a      	ldr	r2, [r7, #20]
 800a4f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	693a      	ldr	r2, [r7, #16]
 800a4fc:	621a      	str	r2, [r3, #32]
}
 800a4fe:	bf00      	nop
 800a500:	371c      	adds	r7, #28
 800a502:	46bd      	mov	sp, r7
 800a504:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a508:	4770      	bx	lr
 800a50a:	bf00      	nop
 800a50c:	40010000 	.word	0x40010000
 800a510:	40000400 	.word	0x40000400
 800a514:	40000800 	.word	0x40000800
 800a518:	40000c00 	.word	0x40000c00
 800a51c:	40010400 	.word	0x40010400
 800a520:	40014000 	.word	0x40014000
 800a524:	40001800 	.word	0x40001800

0800a528 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a528:	b480      	push	{r7}
 800a52a:	b087      	sub	sp, #28
 800a52c:	af00      	add	r7, sp, #0
 800a52e:	60f8      	str	r0, [r7, #12]
 800a530:	60b9      	str	r1, [r7, #8]
 800a532:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	6a1b      	ldr	r3, [r3, #32]
 800a538:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	6a1b      	ldr	r3, [r3, #32]
 800a53e:	f023 0201 	bic.w	r2, r3, #1
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	699b      	ldr	r3, [r3, #24]
 800a54a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a54c:	693b      	ldr	r3, [r7, #16]
 800a54e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a552:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	011b      	lsls	r3, r3, #4
 800a558:	693a      	ldr	r2, [r7, #16]
 800a55a:	4313      	orrs	r3, r2
 800a55c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a55e:	697b      	ldr	r3, [r7, #20]
 800a560:	f023 030a 	bic.w	r3, r3, #10
 800a564:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a566:	697a      	ldr	r2, [r7, #20]
 800a568:	68bb      	ldr	r3, [r7, #8]
 800a56a:	4313      	orrs	r3, r2
 800a56c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	693a      	ldr	r2, [r7, #16]
 800a572:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	697a      	ldr	r2, [r7, #20]
 800a578:	621a      	str	r2, [r3, #32]
}
 800a57a:	bf00      	nop
 800a57c:	371c      	adds	r7, #28
 800a57e:	46bd      	mov	sp, r7
 800a580:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a584:	4770      	bx	lr

0800a586 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a586:	b480      	push	{r7}
 800a588:	b087      	sub	sp, #28
 800a58a:	af00      	add	r7, sp, #0
 800a58c:	60f8      	str	r0, [r7, #12]
 800a58e:	60b9      	str	r1, [r7, #8]
 800a590:	607a      	str	r2, [r7, #4]
 800a592:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	6a1b      	ldr	r3, [r3, #32]
 800a598:	f023 0210 	bic.w	r2, r3, #16
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	699b      	ldr	r3, [r3, #24]
 800a5a4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	6a1b      	ldr	r3, [r3, #32]
 800a5aa:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800a5ac:	697b      	ldr	r3, [r7, #20]
 800a5ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a5b2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	021b      	lsls	r3, r3, #8
 800a5b8:	697a      	ldr	r2, [r7, #20]
 800a5ba:	4313      	orrs	r3, r2
 800a5bc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a5be:	697b      	ldr	r3, [r7, #20]
 800a5c0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a5c4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800a5c6:	683b      	ldr	r3, [r7, #0]
 800a5c8:	031b      	lsls	r3, r3, #12
 800a5ca:	b29b      	uxth	r3, r3
 800a5cc:	697a      	ldr	r2, [r7, #20]
 800a5ce:	4313      	orrs	r3, r2
 800a5d0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a5d2:	693b      	ldr	r3, [r7, #16]
 800a5d4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a5d8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800a5da:	68bb      	ldr	r3, [r7, #8]
 800a5dc:	011b      	lsls	r3, r3, #4
 800a5de:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800a5e2:	693a      	ldr	r2, [r7, #16]
 800a5e4:	4313      	orrs	r3, r2
 800a5e6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	697a      	ldr	r2, [r7, #20]
 800a5ec:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	693a      	ldr	r2, [r7, #16]
 800a5f2:	621a      	str	r2, [r3, #32]
}
 800a5f4:	bf00      	nop
 800a5f6:	371c      	adds	r7, #28
 800a5f8:	46bd      	mov	sp, r7
 800a5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5fe:	4770      	bx	lr

0800a600 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a600:	b480      	push	{r7}
 800a602:	b087      	sub	sp, #28
 800a604:	af00      	add	r7, sp, #0
 800a606:	60f8      	str	r0, [r7, #12]
 800a608:	60b9      	str	r1, [r7, #8]
 800a60a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	6a1b      	ldr	r3, [r3, #32]
 800a610:	f023 0210 	bic.w	r2, r3, #16
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	699b      	ldr	r3, [r3, #24]
 800a61c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	6a1b      	ldr	r3, [r3, #32]
 800a622:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a624:	697b      	ldr	r3, [r7, #20]
 800a626:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a62a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	031b      	lsls	r3, r3, #12
 800a630:	697a      	ldr	r2, [r7, #20]
 800a632:	4313      	orrs	r3, r2
 800a634:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a636:	693b      	ldr	r3, [r7, #16]
 800a638:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a63c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a63e:	68bb      	ldr	r3, [r7, #8]
 800a640:	011b      	lsls	r3, r3, #4
 800a642:	693a      	ldr	r2, [r7, #16]
 800a644:	4313      	orrs	r3, r2
 800a646:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	697a      	ldr	r2, [r7, #20]
 800a64c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	693a      	ldr	r2, [r7, #16]
 800a652:	621a      	str	r2, [r3, #32]
}
 800a654:	bf00      	nop
 800a656:	371c      	adds	r7, #28
 800a658:	46bd      	mov	sp, r7
 800a65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a65e:	4770      	bx	lr

0800a660 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a660:	b480      	push	{r7}
 800a662:	b087      	sub	sp, #28
 800a664:	af00      	add	r7, sp, #0
 800a666:	60f8      	str	r0, [r7, #12]
 800a668:	60b9      	str	r1, [r7, #8]
 800a66a:	607a      	str	r2, [r7, #4]
 800a66c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	6a1b      	ldr	r3, [r3, #32]
 800a672:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	69db      	ldr	r3, [r3, #28]
 800a67e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	6a1b      	ldr	r3, [r3, #32]
 800a684:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800a686:	697b      	ldr	r3, [r7, #20]
 800a688:	f023 0303 	bic.w	r3, r3, #3
 800a68c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800a68e:	697a      	ldr	r2, [r7, #20]
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	4313      	orrs	r3, r2
 800a694:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800a696:	697b      	ldr	r3, [r7, #20]
 800a698:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a69c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800a69e:	683b      	ldr	r3, [r7, #0]
 800a6a0:	011b      	lsls	r3, r3, #4
 800a6a2:	b2db      	uxtb	r3, r3
 800a6a4:	697a      	ldr	r2, [r7, #20]
 800a6a6:	4313      	orrs	r3, r2
 800a6a8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800a6aa:	693b      	ldr	r3, [r7, #16]
 800a6ac:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800a6b0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800a6b2:	68bb      	ldr	r3, [r7, #8]
 800a6b4:	021b      	lsls	r3, r3, #8
 800a6b6:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800a6ba:	693a      	ldr	r2, [r7, #16]
 800a6bc:	4313      	orrs	r3, r2
 800a6be:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	697a      	ldr	r2, [r7, #20]
 800a6c4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	693a      	ldr	r2, [r7, #16]
 800a6ca:	621a      	str	r2, [r3, #32]
}
 800a6cc:	bf00      	nop
 800a6ce:	371c      	adds	r7, #28
 800a6d0:	46bd      	mov	sp, r7
 800a6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d6:	4770      	bx	lr

0800a6d8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a6d8:	b480      	push	{r7}
 800a6da:	b087      	sub	sp, #28
 800a6dc:	af00      	add	r7, sp, #0
 800a6de:	60f8      	str	r0, [r7, #12]
 800a6e0:	60b9      	str	r1, [r7, #8]
 800a6e2:	607a      	str	r2, [r7, #4]
 800a6e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	6a1b      	ldr	r3, [r3, #32]
 800a6ea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	69db      	ldr	r3, [r3, #28]
 800a6f6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	6a1b      	ldr	r3, [r3, #32]
 800a6fc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800a6fe:	697b      	ldr	r3, [r7, #20]
 800a700:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a704:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	021b      	lsls	r3, r3, #8
 800a70a:	697a      	ldr	r2, [r7, #20]
 800a70c:	4313      	orrs	r3, r2
 800a70e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800a710:	697b      	ldr	r3, [r7, #20]
 800a712:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a716:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800a718:	683b      	ldr	r3, [r7, #0]
 800a71a:	031b      	lsls	r3, r3, #12
 800a71c:	b29b      	uxth	r3, r3
 800a71e:	697a      	ldr	r2, [r7, #20]
 800a720:	4313      	orrs	r3, r2
 800a722:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800a724:	693b      	ldr	r3, [r7, #16]
 800a726:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800a72a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800a72c:	68bb      	ldr	r3, [r7, #8]
 800a72e:	031b      	lsls	r3, r3, #12
 800a730:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800a734:	693a      	ldr	r2, [r7, #16]
 800a736:	4313      	orrs	r3, r2
 800a738:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	697a      	ldr	r2, [r7, #20]
 800a73e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	693a      	ldr	r2, [r7, #16]
 800a744:	621a      	str	r2, [r3, #32]
}
 800a746:	bf00      	nop
 800a748:	371c      	adds	r7, #28
 800a74a:	46bd      	mov	sp, r7
 800a74c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a750:	4770      	bx	lr

0800a752 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a752:	b480      	push	{r7}
 800a754:	b085      	sub	sp, #20
 800a756:	af00      	add	r7, sp, #0
 800a758:	6078      	str	r0, [r7, #4]
 800a75a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	689b      	ldr	r3, [r3, #8]
 800a760:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a768:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a76a:	683a      	ldr	r2, [r7, #0]
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	4313      	orrs	r3, r2
 800a770:	f043 0307 	orr.w	r3, r3, #7
 800a774:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	68fa      	ldr	r2, [r7, #12]
 800a77a:	609a      	str	r2, [r3, #8]
}
 800a77c:	bf00      	nop
 800a77e:	3714      	adds	r7, #20
 800a780:	46bd      	mov	sp, r7
 800a782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a786:	4770      	bx	lr

0800a788 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a788:	b480      	push	{r7}
 800a78a:	b087      	sub	sp, #28
 800a78c:	af00      	add	r7, sp, #0
 800a78e:	60f8      	str	r0, [r7, #12]
 800a790:	60b9      	str	r1, [r7, #8]
 800a792:	607a      	str	r2, [r7, #4]
 800a794:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	689b      	ldr	r3, [r3, #8]
 800a79a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a79c:	697b      	ldr	r3, [r7, #20]
 800a79e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a7a2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a7a4:	683b      	ldr	r3, [r7, #0]
 800a7a6:	021a      	lsls	r2, r3, #8
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	431a      	orrs	r2, r3
 800a7ac:	68bb      	ldr	r3, [r7, #8]
 800a7ae:	4313      	orrs	r3, r2
 800a7b0:	697a      	ldr	r2, [r7, #20]
 800a7b2:	4313      	orrs	r3, r2
 800a7b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	697a      	ldr	r2, [r7, #20]
 800a7ba:	609a      	str	r2, [r3, #8]
}
 800a7bc:	bf00      	nop
 800a7be:	371c      	adds	r7, #28
 800a7c0:	46bd      	mov	sp, r7
 800a7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c6:	4770      	bx	lr

0800a7c8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a7c8:	b480      	push	{r7}
 800a7ca:	b087      	sub	sp, #28
 800a7cc:	af00      	add	r7, sp, #0
 800a7ce:	60f8      	str	r0, [r7, #12]
 800a7d0:	60b9      	str	r1, [r7, #8]
 800a7d2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a7d4:	68bb      	ldr	r3, [r7, #8]
 800a7d6:	f003 031f 	and.w	r3, r3, #31
 800a7da:	2201      	movs	r2, #1
 800a7dc:	fa02 f303 	lsl.w	r3, r2, r3
 800a7e0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	6a1a      	ldr	r2, [r3, #32]
 800a7e6:	697b      	ldr	r3, [r7, #20]
 800a7e8:	43db      	mvns	r3, r3
 800a7ea:	401a      	ands	r2, r3
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	6a1a      	ldr	r2, [r3, #32]
 800a7f4:	68bb      	ldr	r3, [r7, #8]
 800a7f6:	f003 031f 	and.w	r3, r3, #31
 800a7fa:	6879      	ldr	r1, [r7, #4]
 800a7fc:	fa01 f303 	lsl.w	r3, r1, r3
 800a800:	431a      	orrs	r2, r3
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	621a      	str	r2, [r3, #32]
}
 800a806:	bf00      	nop
 800a808:	371c      	adds	r7, #28
 800a80a:	46bd      	mov	sp, r7
 800a80c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a810:	4770      	bx	lr
	...

0800a814 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a814:	b480      	push	{r7}
 800a816:	b085      	sub	sp, #20
 800a818:	af00      	add	r7, sp, #0
 800a81a:	6078      	str	r0, [r7, #4]
 800a81c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a824:	2b01      	cmp	r3, #1
 800a826:	d101      	bne.n	800a82c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a828:	2302      	movs	r3, #2
 800a82a:	e05a      	b.n	800a8e2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	2201      	movs	r2, #1
 800a830:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	2202      	movs	r2, #2
 800a838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	685b      	ldr	r3, [r3, #4]
 800a842:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	689b      	ldr	r3, [r3, #8]
 800a84a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a852:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a854:	683b      	ldr	r3, [r7, #0]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	68fa      	ldr	r2, [r7, #12]
 800a85a:	4313      	orrs	r3, r2
 800a85c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	68fa      	ldr	r2, [r7, #12]
 800a864:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	4a21      	ldr	r2, [pc, #132]	; (800a8f0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800a86c:	4293      	cmp	r3, r2
 800a86e:	d022      	beq.n	800a8b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a878:	d01d      	beq.n	800a8b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	4a1d      	ldr	r2, [pc, #116]	; (800a8f4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800a880:	4293      	cmp	r3, r2
 800a882:	d018      	beq.n	800a8b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	4a1b      	ldr	r2, [pc, #108]	; (800a8f8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800a88a:	4293      	cmp	r3, r2
 800a88c:	d013      	beq.n	800a8b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	4a1a      	ldr	r2, [pc, #104]	; (800a8fc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800a894:	4293      	cmp	r3, r2
 800a896:	d00e      	beq.n	800a8b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	4a18      	ldr	r2, [pc, #96]	; (800a900 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800a89e:	4293      	cmp	r3, r2
 800a8a0:	d009      	beq.n	800a8b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	4a17      	ldr	r2, [pc, #92]	; (800a904 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a8a8:	4293      	cmp	r3, r2
 800a8aa:	d004      	beq.n	800a8b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	4a15      	ldr	r2, [pc, #84]	; (800a908 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a8b2:	4293      	cmp	r3, r2
 800a8b4:	d10c      	bne.n	800a8d0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a8b6:	68bb      	ldr	r3, [r7, #8]
 800a8b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a8bc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a8be:	683b      	ldr	r3, [r7, #0]
 800a8c0:	685b      	ldr	r3, [r3, #4]
 800a8c2:	68ba      	ldr	r2, [r7, #8]
 800a8c4:	4313      	orrs	r3, r2
 800a8c6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	68ba      	ldr	r2, [r7, #8]
 800a8ce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	2201      	movs	r2, #1
 800a8d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	2200      	movs	r2, #0
 800a8dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a8e0:	2300      	movs	r3, #0
}
 800a8e2:	4618      	mov	r0, r3
 800a8e4:	3714      	adds	r7, #20
 800a8e6:	46bd      	mov	sp, r7
 800a8e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ec:	4770      	bx	lr
 800a8ee:	bf00      	nop
 800a8f0:	40010000 	.word	0x40010000
 800a8f4:	40000400 	.word	0x40000400
 800a8f8:	40000800 	.word	0x40000800
 800a8fc:	40000c00 	.word	0x40000c00
 800a900:	40010400 	.word	0x40010400
 800a904:	40014000 	.word	0x40014000
 800a908:	40001800 	.word	0x40001800

0800a90c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a90c:	b480      	push	{r7}
 800a90e:	b083      	sub	sp, #12
 800a910:	af00      	add	r7, sp, #0
 800a912:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a914:	bf00      	nop
 800a916:	370c      	adds	r7, #12
 800a918:	46bd      	mov	sp, r7
 800a91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a91e:	4770      	bx	lr

0800a920 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a920:	b480      	push	{r7}
 800a922:	b083      	sub	sp, #12
 800a924:	af00      	add	r7, sp, #0
 800a926:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a928:	bf00      	nop
 800a92a:	370c      	adds	r7, #12
 800a92c:	46bd      	mov	sp, r7
 800a92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a932:	4770      	bx	lr

0800a934 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a934:	b580      	push	{r7, lr}
 800a936:	b082      	sub	sp, #8
 800a938:	af00      	add	r7, sp, #0
 800a93a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d101      	bne.n	800a946 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a942:	2301      	movs	r3, #1
 800a944:	e03f      	b.n	800a9c6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a94c:	b2db      	uxtb	r3, r3
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d106      	bne.n	800a960 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	2200      	movs	r2, #0
 800a956:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a95a:	6878      	ldr	r0, [r7, #4]
 800a95c:	f7f9 f8f4 	bl	8003b48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	2224      	movs	r2, #36	; 0x24
 800a964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	68da      	ldr	r2, [r3, #12]
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a976:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a978:	6878      	ldr	r0, [r7, #4]
 800a97a:	f000 ffd7 	bl	800b92c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	691a      	ldr	r2, [r3, #16]
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a98c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	695a      	ldr	r2, [r3, #20]
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a99c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	68da      	ldr	r2, [r3, #12]
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a9ac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	2200      	movs	r2, #0
 800a9b2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	2220      	movs	r2, #32
 800a9b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	2220      	movs	r2, #32
 800a9c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800a9c4:	2300      	movs	r3, #0
}
 800a9c6:	4618      	mov	r0, r3
 800a9c8:	3708      	adds	r7, #8
 800a9ca:	46bd      	mov	sp, r7
 800a9cc:	bd80      	pop	{r7, pc}

0800a9ce <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a9ce:	b580      	push	{r7, lr}
 800a9d0:	b08a      	sub	sp, #40	; 0x28
 800a9d2:	af02      	add	r7, sp, #8
 800a9d4:	60f8      	str	r0, [r7, #12]
 800a9d6:	60b9      	str	r1, [r7, #8]
 800a9d8:	603b      	str	r3, [r7, #0]
 800a9da:	4613      	mov	r3, r2
 800a9dc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800a9de:	2300      	movs	r3, #0
 800a9e0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a9e8:	b2db      	uxtb	r3, r3
 800a9ea:	2b20      	cmp	r3, #32
 800a9ec:	d17c      	bne.n	800aae8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800a9ee:	68bb      	ldr	r3, [r7, #8]
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d002      	beq.n	800a9fa <HAL_UART_Transmit+0x2c>
 800a9f4:	88fb      	ldrh	r3, [r7, #6]
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d101      	bne.n	800a9fe <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800a9fa:	2301      	movs	r3, #1
 800a9fc:	e075      	b.n	800aaea <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aa04:	2b01      	cmp	r3, #1
 800aa06:	d101      	bne.n	800aa0c <HAL_UART_Transmit+0x3e>
 800aa08:	2302      	movs	r3, #2
 800aa0a:	e06e      	b.n	800aaea <HAL_UART_Transmit+0x11c>
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	2201      	movs	r2, #1
 800aa10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	2200      	movs	r2, #0
 800aa18:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	2221      	movs	r2, #33	; 0x21
 800aa1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800aa22:	f7fb f9f7 	bl	8005e14 <HAL_GetTick>
 800aa26:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	88fa      	ldrh	r2, [r7, #6]
 800aa2c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	88fa      	ldrh	r2, [r7, #6]
 800aa32:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	689b      	ldr	r3, [r3, #8]
 800aa38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aa3c:	d108      	bne.n	800aa50 <HAL_UART_Transmit+0x82>
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	691b      	ldr	r3, [r3, #16]
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d104      	bne.n	800aa50 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800aa46:	2300      	movs	r3, #0
 800aa48:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800aa4a:	68bb      	ldr	r3, [r7, #8]
 800aa4c:	61bb      	str	r3, [r7, #24]
 800aa4e:	e003      	b.n	800aa58 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800aa50:	68bb      	ldr	r3, [r7, #8]
 800aa52:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800aa54:	2300      	movs	r3, #0
 800aa56:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	2200      	movs	r2, #0
 800aa5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800aa60:	e02a      	b.n	800aab8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800aa62:	683b      	ldr	r3, [r7, #0]
 800aa64:	9300      	str	r3, [sp, #0]
 800aa66:	697b      	ldr	r3, [r7, #20]
 800aa68:	2200      	movs	r2, #0
 800aa6a:	2180      	movs	r1, #128	; 0x80
 800aa6c:	68f8      	ldr	r0, [r7, #12]
 800aa6e:	f000 fc51 	bl	800b314 <UART_WaitOnFlagUntilTimeout>
 800aa72:	4603      	mov	r3, r0
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d001      	beq.n	800aa7c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800aa78:	2303      	movs	r3, #3
 800aa7a:	e036      	b.n	800aaea <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800aa7c:	69fb      	ldr	r3, [r7, #28]
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d10b      	bne.n	800aa9a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800aa82:	69bb      	ldr	r3, [r7, #24]
 800aa84:	881b      	ldrh	r3, [r3, #0]
 800aa86:	461a      	mov	r2, r3
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800aa90:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800aa92:	69bb      	ldr	r3, [r7, #24]
 800aa94:	3302      	adds	r3, #2
 800aa96:	61bb      	str	r3, [r7, #24]
 800aa98:	e007      	b.n	800aaaa <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800aa9a:	69fb      	ldr	r3, [r7, #28]
 800aa9c:	781a      	ldrb	r2, [r3, #0]
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800aaa4:	69fb      	ldr	r3, [r7, #28]
 800aaa6:	3301      	adds	r3, #1
 800aaa8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800aaae:	b29b      	uxth	r3, r3
 800aab0:	3b01      	subs	r3, #1
 800aab2:	b29a      	uxth	r2, r3
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800aabc:	b29b      	uxth	r3, r3
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d1cf      	bne.n	800aa62 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800aac2:	683b      	ldr	r3, [r7, #0]
 800aac4:	9300      	str	r3, [sp, #0]
 800aac6:	697b      	ldr	r3, [r7, #20]
 800aac8:	2200      	movs	r2, #0
 800aaca:	2140      	movs	r1, #64	; 0x40
 800aacc:	68f8      	ldr	r0, [r7, #12]
 800aace:	f000 fc21 	bl	800b314 <UART_WaitOnFlagUntilTimeout>
 800aad2:	4603      	mov	r3, r0
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d001      	beq.n	800aadc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800aad8:	2303      	movs	r3, #3
 800aada:	e006      	b.n	800aaea <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	2220      	movs	r2, #32
 800aae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800aae4:	2300      	movs	r3, #0
 800aae6:	e000      	b.n	800aaea <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800aae8:	2302      	movs	r3, #2
  }
}
 800aaea:	4618      	mov	r0, r3
 800aaec:	3720      	adds	r7, #32
 800aaee:	46bd      	mov	sp, r7
 800aaf0:	bd80      	pop	{r7, pc}

0800aaf2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800aaf2:	b580      	push	{r7, lr}
 800aaf4:	b084      	sub	sp, #16
 800aaf6:	af00      	add	r7, sp, #0
 800aaf8:	60f8      	str	r0, [r7, #12]
 800aafa:	60b9      	str	r1, [r7, #8]
 800aafc:	4613      	mov	r3, r2
 800aafe:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ab06:	b2db      	uxtb	r3, r3
 800ab08:	2b20      	cmp	r3, #32
 800ab0a:	d11d      	bne.n	800ab48 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800ab0c:	68bb      	ldr	r3, [r7, #8]
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d002      	beq.n	800ab18 <HAL_UART_Receive_IT+0x26>
 800ab12:	88fb      	ldrh	r3, [r7, #6]
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d101      	bne.n	800ab1c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800ab18:	2301      	movs	r3, #1
 800ab1a:	e016      	b.n	800ab4a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ab22:	2b01      	cmp	r3, #1
 800ab24:	d101      	bne.n	800ab2a <HAL_UART_Receive_IT+0x38>
 800ab26:	2302      	movs	r3, #2
 800ab28:	e00f      	b.n	800ab4a <HAL_UART_Receive_IT+0x58>
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	2201      	movs	r2, #1
 800ab2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	2200      	movs	r2, #0
 800ab36:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800ab38:	88fb      	ldrh	r3, [r7, #6]
 800ab3a:	461a      	mov	r2, r3
 800ab3c:	68b9      	ldr	r1, [r7, #8]
 800ab3e:	68f8      	ldr	r0, [r7, #12]
 800ab40:	f000 fc56 	bl	800b3f0 <UART_Start_Receive_IT>
 800ab44:	4603      	mov	r3, r0
 800ab46:	e000      	b.n	800ab4a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800ab48:	2302      	movs	r3, #2
  }
}
 800ab4a:	4618      	mov	r0, r3
 800ab4c:	3710      	adds	r7, #16
 800ab4e:	46bd      	mov	sp, r7
 800ab50:	bd80      	pop	{r7, pc}

0800ab52 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ab52:	b580      	push	{r7, lr}
 800ab54:	b084      	sub	sp, #16
 800ab56:	af00      	add	r7, sp, #0
 800ab58:	60f8      	str	r0, [r7, #12]
 800ab5a:	60b9      	str	r1, [r7, #8]
 800ab5c:	4613      	mov	r3, r2
 800ab5e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ab66:	b2db      	uxtb	r3, r3
 800ab68:	2b20      	cmp	r3, #32
 800ab6a:	d11d      	bne.n	800aba8 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800ab6c:	68bb      	ldr	r3, [r7, #8]
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d002      	beq.n	800ab78 <HAL_UART_Receive_DMA+0x26>
 800ab72:	88fb      	ldrh	r3, [r7, #6]
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d101      	bne.n	800ab7c <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800ab78:	2301      	movs	r3, #1
 800ab7a:	e016      	b.n	800abaa <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ab82:	2b01      	cmp	r3, #1
 800ab84:	d101      	bne.n	800ab8a <HAL_UART_Receive_DMA+0x38>
 800ab86:	2302      	movs	r3, #2
 800ab88:	e00f      	b.n	800abaa <HAL_UART_Receive_DMA+0x58>
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	2201      	movs	r2, #1
 800ab8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	2200      	movs	r2, #0
 800ab96:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800ab98:	88fb      	ldrh	r3, [r7, #6]
 800ab9a:	461a      	mov	r2, r3
 800ab9c:	68b9      	ldr	r1, [r7, #8]
 800ab9e:	68f8      	ldr	r0, [r7, #12]
 800aba0:	f000 fc64 	bl	800b46c <UART_Start_Receive_DMA>
 800aba4:	4603      	mov	r3, r0
 800aba6:	e000      	b.n	800abaa <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800aba8:	2302      	movs	r3, #2
  }
}
 800abaa:	4618      	mov	r0, r3
 800abac:	3710      	adds	r7, #16
 800abae:	46bd      	mov	sp, r7
 800abb0:	bd80      	pop	{r7, pc}
	...

0800abb4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800abb4:	b580      	push	{r7, lr}
 800abb6:	b0ba      	sub	sp, #232	; 0xe8
 800abb8:	af00      	add	r7, sp, #0
 800abba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	68db      	ldr	r3, [r3, #12]
 800abcc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	695b      	ldr	r3, [r3, #20]
 800abd6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800abda:	2300      	movs	r3, #0
 800abdc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800abe0:	2300      	movs	r3, #0
 800abe2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800abe6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800abea:	f003 030f 	and.w	r3, r3, #15
 800abee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800abf2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d10f      	bne.n	800ac1a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800abfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800abfe:	f003 0320 	and.w	r3, r3, #32
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d009      	beq.n	800ac1a <HAL_UART_IRQHandler+0x66>
 800ac06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ac0a:	f003 0320 	and.w	r3, r3, #32
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d003      	beq.n	800ac1a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800ac12:	6878      	ldr	r0, [r7, #4]
 800ac14:	f000 fdcf 	bl	800b7b6 <UART_Receive_IT>
      return;
 800ac18:	e256      	b.n	800b0c8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800ac1a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	f000 80de 	beq.w	800ade0 <HAL_UART_IRQHandler+0x22c>
 800ac24:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ac28:	f003 0301 	and.w	r3, r3, #1
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d106      	bne.n	800ac3e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800ac30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ac34:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	f000 80d1 	beq.w	800ade0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800ac3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ac42:	f003 0301 	and.w	r3, r3, #1
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d00b      	beq.n	800ac62 <HAL_UART_IRQHandler+0xae>
 800ac4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ac4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d005      	beq.n	800ac62 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac5a:	f043 0201 	orr.w	r2, r3, #1
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ac62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ac66:	f003 0304 	and.w	r3, r3, #4
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d00b      	beq.n	800ac86 <HAL_UART_IRQHandler+0xd2>
 800ac6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ac72:	f003 0301 	and.w	r3, r3, #1
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d005      	beq.n	800ac86 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac7e:	f043 0202 	orr.w	r2, r3, #2
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ac86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ac8a:	f003 0302 	and.w	r3, r3, #2
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d00b      	beq.n	800acaa <HAL_UART_IRQHandler+0xf6>
 800ac92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ac96:	f003 0301 	and.w	r3, r3, #1
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d005      	beq.n	800acaa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aca2:	f043 0204 	orr.w	r2, r3, #4
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800acaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800acae:	f003 0308 	and.w	r3, r3, #8
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d011      	beq.n	800acda <HAL_UART_IRQHandler+0x126>
 800acb6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800acba:	f003 0320 	and.w	r3, r3, #32
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d105      	bne.n	800acce <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800acc2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800acc6:	f003 0301 	and.w	r3, r3, #1
 800acca:	2b00      	cmp	r3, #0
 800accc:	d005      	beq.n	800acda <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acd2:	f043 0208 	orr.w	r2, r3, #8
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acde:	2b00      	cmp	r3, #0
 800ace0:	f000 81ed 	beq.w	800b0be <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800ace4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ace8:	f003 0320 	and.w	r3, r3, #32
 800acec:	2b00      	cmp	r3, #0
 800acee:	d008      	beq.n	800ad02 <HAL_UART_IRQHandler+0x14e>
 800acf0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800acf4:	f003 0320 	and.w	r3, r3, #32
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d002      	beq.n	800ad02 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800acfc:	6878      	ldr	r0, [r7, #4]
 800acfe:	f000 fd5a 	bl	800b7b6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	695b      	ldr	r3, [r3, #20]
 800ad08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad0c:	2b40      	cmp	r3, #64	; 0x40
 800ad0e:	bf0c      	ite	eq
 800ad10:	2301      	moveq	r3, #1
 800ad12:	2300      	movne	r3, #0
 800ad14:	b2db      	uxtb	r3, r3
 800ad16:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad1e:	f003 0308 	and.w	r3, r3, #8
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d103      	bne.n	800ad2e <HAL_UART_IRQHandler+0x17a>
 800ad26:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d04f      	beq.n	800adce <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ad2e:	6878      	ldr	r0, [r7, #4]
 800ad30:	f000 fc62 	bl	800b5f8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	695b      	ldr	r3, [r3, #20]
 800ad3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad3e:	2b40      	cmp	r3, #64	; 0x40
 800ad40:	d141      	bne.n	800adc6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	3314      	adds	r3, #20
 800ad48:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad4c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ad50:	e853 3f00 	ldrex	r3, [r3]
 800ad54:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800ad58:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ad5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ad60:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	3314      	adds	r3, #20
 800ad6a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800ad6e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800ad72:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad76:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800ad7a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800ad7e:	e841 2300 	strex	r3, r2, [r1]
 800ad82:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800ad86:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d1d9      	bne.n	800ad42 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d013      	beq.n	800adbe <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad9a:	4a7d      	ldr	r2, [pc, #500]	; (800af90 <HAL_UART_IRQHandler+0x3dc>)
 800ad9c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ada2:	4618      	mov	r0, r3
 800ada4:	f7fb fd50 	bl	8006848 <HAL_DMA_Abort_IT>
 800ada8:	4603      	mov	r3, r0
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d016      	beq.n	800addc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800adb4:	687a      	ldr	r2, [r7, #4]
 800adb6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800adb8:	4610      	mov	r0, r2
 800adba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800adbc:	e00e      	b.n	800addc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800adbe:	6878      	ldr	r0, [r7, #4]
 800adc0:	f000 f99a 	bl	800b0f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800adc4:	e00a      	b.n	800addc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800adc6:	6878      	ldr	r0, [r7, #4]
 800adc8:	f000 f996 	bl	800b0f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800adcc:	e006      	b.n	800addc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800adce:	6878      	ldr	r0, [r7, #4]
 800add0:	f000 f992 	bl	800b0f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	2200      	movs	r2, #0
 800add8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800adda:	e170      	b.n	800b0be <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800addc:	bf00      	nop
    return;
 800adde:	e16e      	b.n	800b0be <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ade4:	2b01      	cmp	r3, #1
 800ade6:	f040 814a 	bne.w	800b07e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800adea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800adee:	f003 0310 	and.w	r3, r3, #16
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	f000 8143 	beq.w	800b07e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800adf8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800adfc:	f003 0310 	and.w	r3, r3, #16
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	f000 813c 	beq.w	800b07e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800ae06:	2300      	movs	r3, #0
 800ae08:	60bb      	str	r3, [r7, #8]
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	60bb      	str	r3, [r7, #8]
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	685b      	ldr	r3, [r3, #4]
 800ae18:	60bb      	str	r3, [r7, #8]
 800ae1a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	695b      	ldr	r3, [r3, #20]
 800ae22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae26:	2b40      	cmp	r3, #64	; 0x40
 800ae28:	f040 80b4 	bne.w	800af94 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	685b      	ldr	r3, [r3, #4]
 800ae34:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800ae38:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	f000 8140 	beq.w	800b0c2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800ae46:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800ae4a:	429a      	cmp	r2, r3
 800ae4c:	f080 8139 	bcs.w	800b0c2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800ae56:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae5c:	69db      	ldr	r3, [r3, #28]
 800ae5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ae62:	f000 8088 	beq.w	800af76 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	330c      	adds	r3, #12
 800ae6c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae70:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ae74:	e853 3f00 	ldrex	r3, [r3]
 800ae78:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800ae7c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ae80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ae84:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	330c      	adds	r3, #12
 800ae8e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800ae92:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800ae96:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae9a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800ae9e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800aea2:	e841 2300 	strex	r3, r2, [r1]
 800aea6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800aeaa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d1d9      	bne.n	800ae66 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	3314      	adds	r3, #20
 800aeb8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aeba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800aebc:	e853 3f00 	ldrex	r3, [r3]
 800aec0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800aec2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800aec4:	f023 0301 	bic.w	r3, r3, #1
 800aec8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	3314      	adds	r3, #20
 800aed2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800aed6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800aeda:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aedc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800aede:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800aee2:	e841 2300 	strex	r3, r2, [r1]
 800aee6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800aee8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d1e1      	bne.n	800aeb2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	3314      	adds	r3, #20
 800aef4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aef6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800aef8:	e853 3f00 	ldrex	r3, [r3]
 800aefc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800aefe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800af00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800af04:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	3314      	adds	r3, #20
 800af0e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800af12:	66fa      	str	r2, [r7, #108]	; 0x6c
 800af14:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af16:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800af18:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800af1a:	e841 2300 	strex	r3, r2, [r1]
 800af1e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800af20:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800af22:	2b00      	cmp	r3, #0
 800af24:	d1e3      	bne.n	800aeee <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	2220      	movs	r2, #32
 800af2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	2200      	movs	r2, #0
 800af32:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	330c      	adds	r3, #12
 800af3a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800af3e:	e853 3f00 	ldrex	r3, [r3]
 800af42:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800af44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800af46:	f023 0310 	bic.w	r3, r3, #16
 800af4a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	330c      	adds	r3, #12
 800af54:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800af58:	65ba      	str	r2, [r7, #88]	; 0x58
 800af5a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af5c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800af5e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800af60:	e841 2300 	strex	r3, r2, [r1]
 800af64:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800af66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d1e3      	bne.n	800af34 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af70:	4618      	mov	r0, r3
 800af72:	f7fb fbf9 	bl	8006768 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800af7e:	b29b      	uxth	r3, r3
 800af80:	1ad3      	subs	r3, r2, r3
 800af82:	b29b      	uxth	r3, r3
 800af84:	4619      	mov	r1, r3
 800af86:	6878      	ldr	r0, [r7, #4]
 800af88:	f000 f8c0 	bl	800b10c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800af8c:	e099      	b.n	800b0c2 <HAL_UART_IRQHandler+0x50e>
 800af8e:	bf00      	nop
 800af90:	0800b6bf 	.word	0x0800b6bf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800af9c:	b29b      	uxth	r3, r3
 800af9e:	1ad3      	subs	r3, r2, r3
 800afa0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800afa8:	b29b      	uxth	r3, r3
 800afaa:	2b00      	cmp	r3, #0
 800afac:	f000 808b 	beq.w	800b0c6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800afb0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	f000 8086 	beq.w	800b0c6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	330c      	adds	r3, #12
 800afc0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afc4:	e853 3f00 	ldrex	r3, [r3]
 800afc8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800afca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800afcc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800afd0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	330c      	adds	r3, #12
 800afda:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800afde:	647a      	str	r2, [r7, #68]	; 0x44
 800afe0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afe2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800afe4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800afe6:	e841 2300 	strex	r3, r2, [r1]
 800afea:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800afec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d1e3      	bne.n	800afba <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	3314      	adds	r3, #20
 800aff8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800affa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800affc:	e853 3f00 	ldrex	r3, [r3]
 800b000:	623b      	str	r3, [r7, #32]
   return(result);
 800b002:	6a3b      	ldr	r3, [r7, #32]
 800b004:	f023 0301 	bic.w	r3, r3, #1
 800b008:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	3314      	adds	r3, #20
 800b012:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b016:	633a      	str	r2, [r7, #48]	; 0x30
 800b018:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b01a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b01c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b01e:	e841 2300 	strex	r3, r2, [r1]
 800b022:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b026:	2b00      	cmp	r3, #0
 800b028:	d1e3      	bne.n	800aff2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	2220      	movs	r2, #32
 800b02e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	2200      	movs	r2, #0
 800b036:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	330c      	adds	r3, #12
 800b03e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b040:	693b      	ldr	r3, [r7, #16]
 800b042:	e853 3f00 	ldrex	r3, [r3]
 800b046:	60fb      	str	r3, [r7, #12]
   return(result);
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	f023 0310 	bic.w	r3, r3, #16
 800b04e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	330c      	adds	r3, #12
 800b058:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800b05c:	61fa      	str	r2, [r7, #28]
 800b05e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b060:	69b9      	ldr	r1, [r7, #24]
 800b062:	69fa      	ldr	r2, [r7, #28]
 800b064:	e841 2300 	strex	r3, r2, [r1]
 800b068:	617b      	str	r3, [r7, #20]
   return(result);
 800b06a:	697b      	ldr	r3, [r7, #20]
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d1e3      	bne.n	800b038 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b070:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b074:	4619      	mov	r1, r3
 800b076:	6878      	ldr	r0, [r7, #4]
 800b078:	f000 f848 	bl	800b10c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b07c:	e023      	b.n	800b0c6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800b07e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b082:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b086:	2b00      	cmp	r3, #0
 800b088:	d009      	beq.n	800b09e <HAL_UART_IRQHandler+0x4ea>
 800b08a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b08e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b092:	2b00      	cmp	r3, #0
 800b094:	d003      	beq.n	800b09e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800b096:	6878      	ldr	r0, [r7, #4]
 800b098:	f000 fb25 	bl	800b6e6 <UART_Transmit_IT>
    return;
 800b09c:	e014      	b.n	800b0c8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800b09e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b0a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d00e      	beq.n	800b0c8 <HAL_UART_IRQHandler+0x514>
 800b0aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b0ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d008      	beq.n	800b0c8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800b0b6:	6878      	ldr	r0, [r7, #4]
 800b0b8:	f000 fb65 	bl	800b786 <UART_EndTransmit_IT>
    return;
 800b0bc:	e004      	b.n	800b0c8 <HAL_UART_IRQHandler+0x514>
    return;
 800b0be:	bf00      	nop
 800b0c0:	e002      	b.n	800b0c8 <HAL_UART_IRQHandler+0x514>
      return;
 800b0c2:	bf00      	nop
 800b0c4:	e000      	b.n	800b0c8 <HAL_UART_IRQHandler+0x514>
      return;
 800b0c6:	bf00      	nop
  }
}
 800b0c8:	37e8      	adds	r7, #232	; 0xe8
 800b0ca:	46bd      	mov	sp, r7
 800b0cc:	bd80      	pop	{r7, pc}
 800b0ce:	bf00      	nop

0800b0d0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b0d0:	b480      	push	{r7}
 800b0d2:	b083      	sub	sp, #12
 800b0d4:	af00      	add	r7, sp, #0
 800b0d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800b0d8:	bf00      	nop
 800b0da:	370c      	adds	r7, #12
 800b0dc:	46bd      	mov	sp, r7
 800b0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e2:	4770      	bx	lr

0800b0e4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b0e4:	b480      	push	{r7}
 800b0e6:	b083      	sub	sp, #12
 800b0e8:	af00      	add	r7, sp, #0
 800b0ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800b0ec:	bf00      	nop
 800b0ee:	370c      	adds	r7, #12
 800b0f0:	46bd      	mov	sp, r7
 800b0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0f6:	4770      	bx	lr

0800b0f8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b0f8:	b480      	push	{r7}
 800b0fa:	b083      	sub	sp, #12
 800b0fc:	af00      	add	r7, sp, #0
 800b0fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800b100:	bf00      	nop
 800b102:	370c      	adds	r7, #12
 800b104:	46bd      	mov	sp, r7
 800b106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b10a:	4770      	bx	lr

0800b10c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b10c:	b480      	push	{r7}
 800b10e:	b083      	sub	sp, #12
 800b110:	af00      	add	r7, sp, #0
 800b112:	6078      	str	r0, [r7, #4]
 800b114:	460b      	mov	r3, r1
 800b116:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b118:	bf00      	nop
 800b11a:	370c      	adds	r7, #12
 800b11c:	46bd      	mov	sp, r7
 800b11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b122:	4770      	bx	lr

0800b124 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b124:	b580      	push	{r7, lr}
 800b126:	b09c      	sub	sp, #112	; 0x70
 800b128:	af00      	add	r7, sp, #0
 800b12a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b130:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d172      	bne.n	800b226 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800b140:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b142:	2200      	movs	r2, #0
 800b144:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b146:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	330c      	adds	r3, #12
 800b14c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b14e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b150:	e853 3f00 	ldrex	r3, [r3]
 800b154:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b156:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b158:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b15c:	66bb      	str	r3, [r7, #104]	; 0x68
 800b15e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	330c      	adds	r3, #12
 800b164:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b166:	65ba      	str	r2, [r7, #88]	; 0x58
 800b168:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b16a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b16c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b16e:	e841 2300 	strex	r3, r2, [r1]
 800b172:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b174:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b176:	2b00      	cmp	r3, #0
 800b178:	d1e5      	bne.n	800b146 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b17a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	3314      	adds	r3, #20
 800b180:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b184:	e853 3f00 	ldrex	r3, [r3]
 800b188:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b18a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b18c:	f023 0301 	bic.w	r3, r3, #1
 800b190:	667b      	str	r3, [r7, #100]	; 0x64
 800b192:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	3314      	adds	r3, #20
 800b198:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b19a:	647a      	str	r2, [r7, #68]	; 0x44
 800b19c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b19e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b1a0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b1a2:	e841 2300 	strex	r3, r2, [r1]
 800b1a6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b1a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d1e5      	bne.n	800b17a <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b1ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	3314      	adds	r3, #20
 800b1b4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1b8:	e853 3f00 	ldrex	r3, [r3]
 800b1bc:	623b      	str	r3, [r7, #32]
   return(result);
 800b1be:	6a3b      	ldr	r3, [r7, #32]
 800b1c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b1c4:	663b      	str	r3, [r7, #96]	; 0x60
 800b1c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	3314      	adds	r3, #20
 800b1cc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b1ce:	633a      	str	r2, [r7, #48]	; 0x30
 800b1d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b1d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b1d6:	e841 2300 	strex	r3, r2, [r1]
 800b1da:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b1dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d1e5      	bne.n	800b1ae <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b1e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b1e4:	2220      	movs	r2, #32
 800b1e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b1ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b1ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1ee:	2b01      	cmp	r3, #1
 800b1f0:	d119      	bne.n	800b226 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b1f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	330c      	adds	r3, #12
 800b1f8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1fa:	693b      	ldr	r3, [r7, #16]
 800b1fc:	e853 3f00 	ldrex	r3, [r3]
 800b200:	60fb      	str	r3, [r7, #12]
   return(result);
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	f023 0310 	bic.w	r3, r3, #16
 800b208:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b20a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	330c      	adds	r3, #12
 800b210:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b212:	61fa      	str	r2, [r7, #28]
 800b214:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b216:	69b9      	ldr	r1, [r7, #24]
 800b218:	69fa      	ldr	r2, [r7, #28]
 800b21a:	e841 2300 	strex	r3, r2, [r1]
 800b21e:	617b      	str	r3, [r7, #20]
   return(result);
 800b220:	697b      	ldr	r3, [r7, #20]
 800b222:	2b00      	cmp	r3, #0
 800b224:	d1e5      	bne.n	800b1f2 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b226:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b22a:	2b01      	cmp	r3, #1
 800b22c:	d106      	bne.n	800b23c <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b22e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b230:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b232:	4619      	mov	r1, r3
 800b234:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800b236:	f7ff ff69 	bl	800b10c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b23a:	e002      	b.n	800b242 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800b23c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800b23e:	f7f7 f8f1 	bl	8002424 <HAL_UART_RxCpltCallback>
}
 800b242:	bf00      	nop
 800b244:	3770      	adds	r7, #112	; 0x70
 800b246:	46bd      	mov	sp, r7
 800b248:	bd80      	pop	{r7, pc}

0800b24a <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b24a:	b580      	push	{r7, lr}
 800b24c:	b084      	sub	sp, #16
 800b24e:	af00      	add	r7, sp, #0
 800b250:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b256:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b25c:	2b01      	cmp	r3, #1
 800b25e:	d108      	bne.n	800b272 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b264:	085b      	lsrs	r3, r3, #1
 800b266:	b29b      	uxth	r3, r3
 800b268:	4619      	mov	r1, r3
 800b26a:	68f8      	ldr	r0, [r7, #12]
 800b26c:	f7ff ff4e 	bl	800b10c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b270:	e002      	b.n	800b278 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800b272:	68f8      	ldr	r0, [r7, #12]
 800b274:	f7ff ff36 	bl	800b0e4 <HAL_UART_RxHalfCpltCallback>
}
 800b278:	bf00      	nop
 800b27a:	3710      	adds	r7, #16
 800b27c:	46bd      	mov	sp, r7
 800b27e:	bd80      	pop	{r7, pc}

0800b280 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b280:	b580      	push	{r7, lr}
 800b282:	b084      	sub	sp, #16
 800b284:	af00      	add	r7, sp, #0
 800b286:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800b288:	2300      	movs	r3, #0
 800b28a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b290:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800b292:	68bb      	ldr	r3, [r7, #8]
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	695b      	ldr	r3, [r3, #20]
 800b298:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b29c:	2b80      	cmp	r3, #128	; 0x80
 800b29e:	bf0c      	ite	eq
 800b2a0:	2301      	moveq	r3, #1
 800b2a2:	2300      	movne	r3, #0
 800b2a4:	b2db      	uxtb	r3, r3
 800b2a6:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800b2a8:	68bb      	ldr	r3, [r7, #8]
 800b2aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b2ae:	b2db      	uxtb	r3, r3
 800b2b0:	2b21      	cmp	r3, #33	; 0x21
 800b2b2:	d108      	bne.n	800b2c6 <UART_DMAError+0x46>
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d005      	beq.n	800b2c6 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800b2ba:	68bb      	ldr	r3, [r7, #8]
 800b2bc:	2200      	movs	r2, #0
 800b2be:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800b2c0:	68b8      	ldr	r0, [r7, #8]
 800b2c2:	f000 f971 	bl	800b5a8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b2c6:	68bb      	ldr	r3, [r7, #8]
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	695b      	ldr	r3, [r3, #20]
 800b2cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b2d0:	2b40      	cmp	r3, #64	; 0x40
 800b2d2:	bf0c      	ite	eq
 800b2d4:	2301      	moveq	r3, #1
 800b2d6:	2300      	movne	r3, #0
 800b2d8:	b2db      	uxtb	r3, r3
 800b2da:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800b2dc:	68bb      	ldr	r3, [r7, #8]
 800b2de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b2e2:	b2db      	uxtb	r3, r3
 800b2e4:	2b22      	cmp	r3, #34	; 0x22
 800b2e6:	d108      	bne.n	800b2fa <UART_DMAError+0x7a>
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d005      	beq.n	800b2fa <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800b2ee:	68bb      	ldr	r3, [r7, #8]
 800b2f0:	2200      	movs	r2, #0
 800b2f2:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800b2f4:	68b8      	ldr	r0, [r7, #8]
 800b2f6:	f000 f97f 	bl	800b5f8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b2fa:	68bb      	ldr	r3, [r7, #8]
 800b2fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2fe:	f043 0210 	orr.w	r2, r3, #16
 800b302:	68bb      	ldr	r3, [r7, #8]
 800b304:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b306:	68b8      	ldr	r0, [r7, #8]
 800b308:	f7ff fef6 	bl	800b0f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b30c:	bf00      	nop
 800b30e:	3710      	adds	r7, #16
 800b310:	46bd      	mov	sp, r7
 800b312:	bd80      	pop	{r7, pc}

0800b314 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800b314:	b580      	push	{r7, lr}
 800b316:	b090      	sub	sp, #64	; 0x40
 800b318:	af00      	add	r7, sp, #0
 800b31a:	60f8      	str	r0, [r7, #12]
 800b31c:	60b9      	str	r1, [r7, #8]
 800b31e:	603b      	str	r3, [r7, #0]
 800b320:	4613      	mov	r3, r2
 800b322:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b324:	e050      	b.n	800b3c8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b326:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b328:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b32c:	d04c      	beq.n	800b3c8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800b32e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b330:	2b00      	cmp	r3, #0
 800b332:	d007      	beq.n	800b344 <UART_WaitOnFlagUntilTimeout+0x30>
 800b334:	f7fa fd6e 	bl	8005e14 <HAL_GetTick>
 800b338:	4602      	mov	r2, r0
 800b33a:	683b      	ldr	r3, [r7, #0]
 800b33c:	1ad3      	subs	r3, r2, r3
 800b33e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b340:	429a      	cmp	r2, r3
 800b342:	d241      	bcs.n	800b3c8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	330c      	adds	r3, #12
 800b34a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b34c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b34e:	e853 3f00 	ldrex	r3, [r3]
 800b352:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b356:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b35a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	330c      	adds	r3, #12
 800b362:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b364:	637a      	str	r2, [r7, #52]	; 0x34
 800b366:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b368:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b36a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b36c:	e841 2300 	strex	r3, r2, [r1]
 800b370:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b374:	2b00      	cmp	r3, #0
 800b376:	d1e5      	bne.n	800b344 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	3314      	adds	r3, #20
 800b37e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b380:	697b      	ldr	r3, [r7, #20]
 800b382:	e853 3f00 	ldrex	r3, [r3]
 800b386:	613b      	str	r3, [r7, #16]
   return(result);
 800b388:	693b      	ldr	r3, [r7, #16]
 800b38a:	f023 0301 	bic.w	r3, r3, #1
 800b38e:	63bb      	str	r3, [r7, #56]	; 0x38
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	3314      	adds	r3, #20
 800b396:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b398:	623a      	str	r2, [r7, #32]
 800b39a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b39c:	69f9      	ldr	r1, [r7, #28]
 800b39e:	6a3a      	ldr	r2, [r7, #32]
 800b3a0:	e841 2300 	strex	r3, r2, [r1]
 800b3a4:	61bb      	str	r3, [r7, #24]
   return(result);
 800b3a6:	69bb      	ldr	r3, [r7, #24]
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d1e5      	bne.n	800b378 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	2220      	movs	r2, #32
 800b3b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	2220      	movs	r2, #32
 800b3b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	2200      	movs	r2, #0
 800b3c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800b3c4:	2303      	movs	r3, #3
 800b3c6:	e00f      	b.n	800b3e8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	681a      	ldr	r2, [r3, #0]
 800b3ce:	68bb      	ldr	r3, [r7, #8]
 800b3d0:	4013      	ands	r3, r2
 800b3d2:	68ba      	ldr	r2, [r7, #8]
 800b3d4:	429a      	cmp	r2, r3
 800b3d6:	bf0c      	ite	eq
 800b3d8:	2301      	moveq	r3, #1
 800b3da:	2300      	movne	r3, #0
 800b3dc:	b2db      	uxtb	r3, r3
 800b3de:	461a      	mov	r2, r3
 800b3e0:	79fb      	ldrb	r3, [r7, #7]
 800b3e2:	429a      	cmp	r2, r3
 800b3e4:	d09f      	beq.n	800b326 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b3e6:	2300      	movs	r3, #0
}
 800b3e8:	4618      	mov	r0, r3
 800b3ea:	3740      	adds	r7, #64	; 0x40
 800b3ec:	46bd      	mov	sp, r7
 800b3ee:	bd80      	pop	{r7, pc}

0800b3f0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b3f0:	b480      	push	{r7}
 800b3f2:	b085      	sub	sp, #20
 800b3f4:	af00      	add	r7, sp, #0
 800b3f6:	60f8      	str	r0, [r7, #12]
 800b3f8:	60b9      	str	r1, [r7, #8]
 800b3fa:	4613      	mov	r3, r2
 800b3fc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	68ba      	ldr	r2, [r7, #8]
 800b402:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	88fa      	ldrh	r2, [r7, #6]
 800b408:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	88fa      	ldrh	r2, [r7, #6]
 800b40e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	2200      	movs	r2, #0
 800b414:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	2222      	movs	r2, #34	; 0x22
 800b41a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	2200      	movs	r2, #0
 800b422:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	691b      	ldr	r3, [r3, #16]
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d007      	beq.n	800b43e <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	68da      	ldr	r2, [r3, #12]
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b43c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	695a      	ldr	r2, [r3, #20]
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	f042 0201 	orr.w	r2, r2, #1
 800b44c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	68da      	ldr	r2, [r3, #12]
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	f042 0220 	orr.w	r2, r2, #32
 800b45c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b45e:	2300      	movs	r3, #0
}
 800b460:	4618      	mov	r0, r3
 800b462:	3714      	adds	r7, #20
 800b464:	46bd      	mov	sp, r7
 800b466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b46a:	4770      	bx	lr

0800b46c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b46c:	b580      	push	{r7, lr}
 800b46e:	b098      	sub	sp, #96	; 0x60
 800b470:	af00      	add	r7, sp, #0
 800b472:	60f8      	str	r0, [r7, #12]
 800b474:	60b9      	str	r1, [r7, #8]
 800b476:	4613      	mov	r3, r2
 800b478:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800b47a:	68ba      	ldr	r2, [r7, #8]
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	88fa      	ldrh	r2, [r7, #6]
 800b484:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	2200      	movs	r2, #0
 800b48a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	2222      	movs	r2, #34	; 0x22
 800b490:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b498:	4a40      	ldr	r2, [pc, #256]	; (800b59c <UART_Start_Receive_DMA+0x130>)
 800b49a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4a0:	4a3f      	ldr	r2, [pc, #252]	; (800b5a0 <UART_Start_Receive_DMA+0x134>)
 800b4a2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4a8:	4a3e      	ldr	r2, [pc, #248]	; (800b5a4 <UART_Start_Receive_DMA+0x138>)
 800b4aa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4b0:	2200      	movs	r2, #0
 800b4b2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800b4b4:	f107 0308 	add.w	r3, r7, #8
 800b4b8:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	3304      	adds	r3, #4
 800b4c4:	4619      	mov	r1, r3
 800b4c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b4c8:	681a      	ldr	r2, [r3, #0]
 800b4ca:	88fb      	ldrh	r3, [r7, #6]
 800b4cc:	f7fb f8f4 	bl	80066b8 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800b4d0:	2300      	movs	r3, #0
 800b4d2:	613b      	str	r3, [r7, #16]
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	613b      	str	r3, [r7, #16]
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	685b      	ldr	r3, [r3, #4]
 800b4e2:	613b      	str	r3, [r7, #16]
 800b4e4:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	2200      	movs	r2, #0
 800b4ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	691b      	ldr	r3, [r3, #16]
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d019      	beq.n	800b52a <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	330c      	adds	r3, #12
 800b4fc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b500:	e853 3f00 	ldrex	r3, [r3]
 800b504:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b506:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b508:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b50c:	65bb      	str	r3, [r7, #88]	; 0x58
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	330c      	adds	r3, #12
 800b514:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b516:	64fa      	str	r2, [r7, #76]	; 0x4c
 800b518:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b51a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800b51c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b51e:	e841 2300 	strex	r3, r2, [r1]
 800b522:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800b524:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b526:	2b00      	cmp	r3, #0
 800b528:	d1e5      	bne.n	800b4f6 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	3314      	adds	r3, #20
 800b530:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b534:	e853 3f00 	ldrex	r3, [r3]
 800b538:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b53a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b53c:	f043 0301 	orr.w	r3, r3, #1
 800b540:	657b      	str	r3, [r7, #84]	; 0x54
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	3314      	adds	r3, #20
 800b548:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b54a:	63ba      	str	r2, [r7, #56]	; 0x38
 800b54c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b54e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b550:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b552:	e841 2300 	strex	r3, r2, [r1]
 800b556:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d1e5      	bne.n	800b52a <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	3314      	adds	r3, #20
 800b564:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b566:	69bb      	ldr	r3, [r7, #24]
 800b568:	e853 3f00 	ldrex	r3, [r3]
 800b56c:	617b      	str	r3, [r7, #20]
   return(result);
 800b56e:	697b      	ldr	r3, [r7, #20]
 800b570:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b574:	653b      	str	r3, [r7, #80]	; 0x50
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	3314      	adds	r3, #20
 800b57c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b57e:	627a      	str	r2, [r7, #36]	; 0x24
 800b580:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b582:	6a39      	ldr	r1, [r7, #32]
 800b584:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b586:	e841 2300 	strex	r3, r2, [r1]
 800b58a:	61fb      	str	r3, [r7, #28]
   return(result);
 800b58c:	69fb      	ldr	r3, [r7, #28]
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d1e5      	bne.n	800b55e <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800b592:	2300      	movs	r3, #0
}
 800b594:	4618      	mov	r0, r3
 800b596:	3760      	adds	r7, #96	; 0x60
 800b598:	46bd      	mov	sp, r7
 800b59a:	bd80      	pop	{r7, pc}
 800b59c:	0800b125 	.word	0x0800b125
 800b5a0:	0800b24b 	.word	0x0800b24b
 800b5a4:	0800b281 	.word	0x0800b281

0800b5a8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b5a8:	b480      	push	{r7}
 800b5aa:	b089      	sub	sp, #36	; 0x24
 800b5ac:	af00      	add	r7, sp, #0
 800b5ae:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	330c      	adds	r3, #12
 800b5b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	e853 3f00 	ldrex	r3, [r3]
 800b5be:	60bb      	str	r3, [r7, #8]
   return(result);
 800b5c0:	68bb      	ldr	r3, [r7, #8]
 800b5c2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800b5c6:	61fb      	str	r3, [r7, #28]
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	330c      	adds	r3, #12
 800b5ce:	69fa      	ldr	r2, [r7, #28]
 800b5d0:	61ba      	str	r2, [r7, #24]
 800b5d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5d4:	6979      	ldr	r1, [r7, #20]
 800b5d6:	69ba      	ldr	r2, [r7, #24]
 800b5d8:	e841 2300 	strex	r3, r2, [r1]
 800b5dc:	613b      	str	r3, [r7, #16]
   return(result);
 800b5de:	693b      	ldr	r3, [r7, #16]
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d1e5      	bne.n	800b5b0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	2220      	movs	r2, #32
 800b5e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800b5ec:	bf00      	nop
 800b5ee:	3724      	adds	r7, #36	; 0x24
 800b5f0:	46bd      	mov	sp, r7
 800b5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5f6:	4770      	bx	lr

0800b5f8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b5f8:	b480      	push	{r7}
 800b5fa:	b095      	sub	sp, #84	; 0x54
 800b5fc:	af00      	add	r7, sp, #0
 800b5fe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	330c      	adds	r3, #12
 800b606:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b608:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b60a:	e853 3f00 	ldrex	r3, [r3]
 800b60e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b612:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b616:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	330c      	adds	r3, #12
 800b61e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b620:	643a      	str	r2, [r7, #64]	; 0x40
 800b622:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b624:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b626:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b628:	e841 2300 	strex	r3, r2, [r1]
 800b62c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b62e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b630:	2b00      	cmp	r3, #0
 800b632:	d1e5      	bne.n	800b600 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	3314      	adds	r3, #20
 800b63a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b63c:	6a3b      	ldr	r3, [r7, #32]
 800b63e:	e853 3f00 	ldrex	r3, [r3]
 800b642:	61fb      	str	r3, [r7, #28]
   return(result);
 800b644:	69fb      	ldr	r3, [r7, #28]
 800b646:	f023 0301 	bic.w	r3, r3, #1
 800b64a:	64bb      	str	r3, [r7, #72]	; 0x48
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	3314      	adds	r3, #20
 800b652:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b654:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b656:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b658:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b65a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b65c:	e841 2300 	strex	r3, r2, [r1]
 800b660:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b664:	2b00      	cmp	r3, #0
 800b666:	d1e5      	bne.n	800b634 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b66c:	2b01      	cmp	r3, #1
 800b66e:	d119      	bne.n	800b6a4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	330c      	adds	r3, #12
 800b676:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	e853 3f00 	ldrex	r3, [r3]
 800b67e:	60bb      	str	r3, [r7, #8]
   return(result);
 800b680:	68bb      	ldr	r3, [r7, #8]
 800b682:	f023 0310 	bic.w	r3, r3, #16
 800b686:	647b      	str	r3, [r7, #68]	; 0x44
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	330c      	adds	r3, #12
 800b68e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b690:	61ba      	str	r2, [r7, #24]
 800b692:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b694:	6979      	ldr	r1, [r7, #20]
 800b696:	69ba      	ldr	r2, [r7, #24]
 800b698:	e841 2300 	strex	r3, r2, [r1]
 800b69c:	613b      	str	r3, [r7, #16]
   return(result);
 800b69e:	693b      	ldr	r3, [r7, #16]
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d1e5      	bne.n	800b670 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	2220      	movs	r2, #32
 800b6a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	2200      	movs	r2, #0
 800b6b0:	631a      	str	r2, [r3, #48]	; 0x30
}
 800b6b2:	bf00      	nop
 800b6b4:	3754      	adds	r7, #84	; 0x54
 800b6b6:	46bd      	mov	sp, r7
 800b6b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6bc:	4770      	bx	lr

0800b6be <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b6be:	b580      	push	{r7, lr}
 800b6c0:	b084      	sub	sp, #16
 800b6c2:	af00      	add	r7, sp, #0
 800b6c4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6ca:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	2200      	movs	r2, #0
 800b6d0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	2200      	movs	r2, #0
 800b6d6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b6d8:	68f8      	ldr	r0, [r7, #12]
 800b6da:	f7ff fd0d 	bl	800b0f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b6de:	bf00      	nop
 800b6e0:	3710      	adds	r7, #16
 800b6e2:	46bd      	mov	sp, r7
 800b6e4:	bd80      	pop	{r7, pc}

0800b6e6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800b6e6:	b480      	push	{r7}
 800b6e8:	b085      	sub	sp, #20
 800b6ea:	af00      	add	r7, sp, #0
 800b6ec:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b6f4:	b2db      	uxtb	r3, r3
 800b6f6:	2b21      	cmp	r3, #33	; 0x21
 800b6f8:	d13e      	bne.n	800b778 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	689b      	ldr	r3, [r3, #8]
 800b6fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b702:	d114      	bne.n	800b72e <UART_Transmit_IT+0x48>
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	691b      	ldr	r3, [r3, #16]
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d110      	bne.n	800b72e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	6a1b      	ldr	r3, [r3, #32]
 800b710:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	881b      	ldrh	r3, [r3, #0]
 800b716:	461a      	mov	r2, r3
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b720:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	6a1b      	ldr	r3, [r3, #32]
 800b726:	1c9a      	adds	r2, r3, #2
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	621a      	str	r2, [r3, #32]
 800b72c:	e008      	b.n	800b740 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	6a1b      	ldr	r3, [r3, #32]
 800b732:	1c59      	adds	r1, r3, #1
 800b734:	687a      	ldr	r2, [r7, #4]
 800b736:	6211      	str	r1, [r2, #32]
 800b738:	781a      	ldrb	r2, [r3, #0]
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b744:	b29b      	uxth	r3, r3
 800b746:	3b01      	subs	r3, #1
 800b748:	b29b      	uxth	r3, r3
 800b74a:	687a      	ldr	r2, [r7, #4]
 800b74c:	4619      	mov	r1, r3
 800b74e:	84d1      	strh	r1, [r2, #38]	; 0x26
 800b750:	2b00      	cmp	r3, #0
 800b752:	d10f      	bne.n	800b774 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	68da      	ldr	r2, [r3, #12]
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b762:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	68da      	ldr	r2, [r3, #12]
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b772:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800b774:	2300      	movs	r3, #0
 800b776:	e000      	b.n	800b77a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800b778:	2302      	movs	r3, #2
  }
}
 800b77a:	4618      	mov	r0, r3
 800b77c:	3714      	adds	r7, #20
 800b77e:	46bd      	mov	sp, r7
 800b780:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b784:	4770      	bx	lr

0800b786 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b786:	b580      	push	{r7, lr}
 800b788:	b082      	sub	sp, #8
 800b78a:	af00      	add	r7, sp, #0
 800b78c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	68da      	ldr	r2, [r3, #12]
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b79c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	2220      	movs	r2, #32
 800b7a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b7a6:	6878      	ldr	r0, [r7, #4]
 800b7a8:	f7ff fc92 	bl	800b0d0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800b7ac:	2300      	movs	r3, #0
}
 800b7ae:	4618      	mov	r0, r3
 800b7b0:	3708      	adds	r7, #8
 800b7b2:	46bd      	mov	sp, r7
 800b7b4:	bd80      	pop	{r7, pc}

0800b7b6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800b7b6:	b580      	push	{r7, lr}
 800b7b8:	b08c      	sub	sp, #48	; 0x30
 800b7ba:	af00      	add	r7, sp, #0
 800b7bc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b7c4:	b2db      	uxtb	r3, r3
 800b7c6:	2b22      	cmp	r3, #34	; 0x22
 800b7c8:	f040 80ab 	bne.w	800b922 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	689b      	ldr	r3, [r3, #8]
 800b7d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b7d4:	d117      	bne.n	800b806 <UART_Receive_IT+0x50>
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	691b      	ldr	r3, [r3, #16]
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d113      	bne.n	800b806 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800b7de:	2300      	movs	r3, #0
 800b7e0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b7e6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	685b      	ldr	r3, [r3, #4]
 800b7ee:	b29b      	uxth	r3, r3
 800b7f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b7f4:	b29a      	uxth	r2, r3
 800b7f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7f8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b7fe:	1c9a      	adds	r2, r3, #2
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	629a      	str	r2, [r3, #40]	; 0x28
 800b804:	e026      	b.n	800b854 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b80a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800b80c:	2300      	movs	r3, #0
 800b80e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	689b      	ldr	r3, [r3, #8]
 800b814:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b818:	d007      	beq.n	800b82a <UART_Receive_IT+0x74>
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	689b      	ldr	r3, [r3, #8]
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d10a      	bne.n	800b838 <UART_Receive_IT+0x82>
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	691b      	ldr	r3, [r3, #16]
 800b826:	2b00      	cmp	r3, #0
 800b828:	d106      	bne.n	800b838 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	685b      	ldr	r3, [r3, #4]
 800b830:	b2da      	uxtb	r2, r3
 800b832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b834:	701a      	strb	r2, [r3, #0]
 800b836:	e008      	b.n	800b84a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	685b      	ldr	r3, [r3, #4]
 800b83e:	b2db      	uxtb	r3, r3
 800b840:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b844:	b2da      	uxtb	r2, r3
 800b846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b848:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b84e:	1c5a      	adds	r2, r3, #1
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b858:	b29b      	uxth	r3, r3
 800b85a:	3b01      	subs	r3, #1
 800b85c:	b29b      	uxth	r3, r3
 800b85e:	687a      	ldr	r2, [r7, #4]
 800b860:	4619      	mov	r1, r3
 800b862:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800b864:	2b00      	cmp	r3, #0
 800b866:	d15a      	bne.n	800b91e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	68da      	ldr	r2, [r3, #12]
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	f022 0220 	bic.w	r2, r2, #32
 800b876:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	68da      	ldr	r2, [r3, #12]
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b886:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	695a      	ldr	r2, [r3, #20]
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	f022 0201 	bic.w	r2, r2, #1
 800b896:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	2220      	movs	r2, #32
 800b89c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b8a4:	2b01      	cmp	r3, #1
 800b8a6:	d135      	bne.n	800b914 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	2200      	movs	r2, #0
 800b8ac:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	330c      	adds	r3, #12
 800b8b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8b6:	697b      	ldr	r3, [r7, #20]
 800b8b8:	e853 3f00 	ldrex	r3, [r3]
 800b8bc:	613b      	str	r3, [r7, #16]
   return(result);
 800b8be:	693b      	ldr	r3, [r7, #16]
 800b8c0:	f023 0310 	bic.w	r3, r3, #16
 800b8c4:	627b      	str	r3, [r7, #36]	; 0x24
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	330c      	adds	r3, #12
 800b8cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b8ce:	623a      	str	r2, [r7, #32]
 800b8d0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8d2:	69f9      	ldr	r1, [r7, #28]
 800b8d4:	6a3a      	ldr	r2, [r7, #32]
 800b8d6:	e841 2300 	strex	r3, r2, [r1]
 800b8da:	61bb      	str	r3, [r7, #24]
   return(result);
 800b8dc:	69bb      	ldr	r3, [r7, #24]
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d1e5      	bne.n	800b8ae <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	f003 0310 	and.w	r3, r3, #16
 800b8ec:	2b10      	cmp	r3, #16
 800b8ee:	d10a      	bne.n	800b906 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b8f0:	2300      	movs	r3, #0
 800b8f2:	60fb      	str	r3, [r7, #12]
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	60fb      	str	r3, [r7, #12]
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	685b      	ldr	r3, [r3, #4]
 800b902:	60fb      	str	r3, [r7, #12]
 800b904:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b90a:	4619      	mov	r1, r3
 800b90c:	6878      	ldr	r0, [r7, #4]
 800b90e:	f7ff fbfd 	bl	800b10c <HAL_UARTEx_RxEventCallback>
 800b912:	e002      	b.n	800b91a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800b914:	6878      	ldr	r0, [r7, #4]
 800b916:	f7f6 fd85 	bl	8002424 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800b91a:	2300      	movs	r3, #0
 800b91c:	e002      	b.n	800b924 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800b91e:	2300      	movs	r3, #0
 800b920:	e000      	b.n	800b924 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800b922:	2302      	movs	r3, #2
  }
}
 800b924:	4618      	mov	r0, r3
 800b926:	3730      	adds	r7, #48	; 0x30
 800b928:	46bd      	mov	sp, r7
 800b92a:	bd80      	pop	{r7, pc}

0800b92c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b92c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b930:	b0c0      	sub	sp, #256	; 0x100
 800b932:	af00      	add	r7, sp, #0
 800b934:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b938:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	691b      	ldr	r3, [r3, #16]
 800b940:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800b944:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b948:	68d9      	ldr	r1, [r3, #12]
 800b94a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b94e:	681a      	ldr	r2, [r3, #0]
 800b950:	ea40 0301 	orr.w	r3, r0, r1
 800b954:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b956:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b95a:	689a      	ldr	r2, [r3, #8]
 800b95c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b960:	691b      	ldr	r3, [r3, #16]
 800b962:	431a      	orrs	r2, r3
 800b964:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b968:	695b      	ldr	r3, [r3, #20]
 800b96a:	431a      	orrs	r2, r3
 800b96c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b970:	69db      	ldr	r3, [r3, #28]
 800b972:	4313      	orrs	r3, r2
 800b974:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800b978:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	68db      	ldr	r3, [r3, #12]
 800b980:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800b984:	f021 010c 	bic.w	r1, r1, #12
 800b988:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b98c:	681a      	ldr	r2, [r3, #0]
 800b98e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b992:	430b      	orrs	r3, r1
 800b994:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b996:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	695b      	ldr	r3, [r3, #20]
 800b99e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800b9a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b9a6:	6999      	ldr	r1, [r3, #24]
 800b9a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b9ac:	681a      	ldr	r2, [r3, #0]
 800b9ae:	ea40 0301 	orr.w	r3, r0, r1
 800b9b2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b9b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b9b8:	681a      	ldr	r2, [r3, #0]
 800b9ba:	4b8f      	ldr	r3, [pc, #572]	; (800bbf8 <UART_SetConfig+0x2cc>)
 800b9bc:	429a      	cmp	r2, r3
 800b9be:	d005      	beq.n	800b9cc <UART_SetConfig+0xa0>
 800b9c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b9c4:	681a      	ldr	r2, [r3, #0]
 800b9c6:	4b8d      	ldr	r3, [pc, #564]	; (800bbfc <UART_SetConfig+0x2d0>)
 800b9c8:	429a      	cmp	r2, r3
 800b9ca:	d104      	bne.n	800b9d6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b9cc:	f7fc fff4 	bl	80089b8 <HAL_RCC_GetPCLK2Freq>
 800b9d0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800b9d4:	e003      	b.n	800b9de <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b9d6:	f7fc ffdb 	bl	8008990 <HAL_RCC_GetPCLK1Freq>
 800b9da:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b9de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b9e2:	69db      	ldr	r3, [r3, #28]
 800b9e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b9e8:	f040 810c 	bne.w	800bc04 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b9ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b9f0:	2200      	movs	r2, #0
 800b9f2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b9f6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800b9fa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800b9fe:	4622      	mov	r2, r4
 800ba00:	462b      	mov	r3, r5
 800ba02:	1891      	adds	r1, r2, r2
 800ba04:	65b9      	str	r1, [r7, #88]	; 0x58
 800ba06:	415b      	adcs	r3, r3
 800ba08:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ba0a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800ba0e:	4621      	mov	r1, r4
 800ba10:	eb12 0801 	adds.w	r8, r2, r1
 800ba14:	4629      	mov	r1, r5
 800ba16:	eb43 0901 	adc.w	r9, r3, r1
 800ba1a:	f04f 0200 	mov.w	r2, #0
 800ba1e:	f04f 0300 	mov.w	r3, #0
 800ba22:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800ba26:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800ba2a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800ba2e:	4690      	mov	r8, r2
 800ba30:	4699      	mov	r9, r3
 800ba32:	4623      	mov	r3, r4
 800ba34:	eb18 0303 	adds.w	r3, r8, r3
 800ba38:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800ba3c:	462b      	mov	r3, r5
 800ba3e:	eb49 0303 	adc.w	r3, r9, r3
 800ba42:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800ba46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ba4a:	685b      	ldr	r3, [r3, #4]
 800ba4c:	2200      	movs	r2, #0
 800ba4e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800ba52:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800ba56:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800ba5a:	460b      	mov	r3, r1
 800ba5c:	18db      	adds	r3, r3, r3
 800ba5e:	653b      	str	r3, [r7, #80]	; 0x50
 800ba60:	4613      	mov	r3, r2
 800ba62:	eb42 0303 	adc.w	r3, r2, r3
 800ba66:	657b      	str	r3, [r7, #84]	; 0x54
 800ba68:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800ba6c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800ba70:	f7f5 f90a 	bl	8000c88 <__aeabi_uldivmod>
 800ba74:	4602      	mov	r2, r0
 800ba76:	460b      	mov	r3, r1
 800ba78:	4b61      	ldr	r3, [pc, #388]	; (800bc00 <UART_SetConfig+0x2d4>)
 800ba7a:	fba3 2302 	umull	r2, r3, r3, r2
 800ba7e:	095b      	lsrs	r3, r3, #5
 800ba80:	011c      	lsls	r4, r3, #4
 800ba82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ba86:	2200      	movs	r2, #0
 800ba88:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ba8c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800ba90:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800ba94:	4642      	mov	r2, r8
 800ba96:	464b      	mov	r3, r9
 800ba98:	1891      	adds	r1, r2, r2
 800ba9a:	64b9      	str	r1, [r7, #72]	; 0x48
 800ba9c:	415b      	adcs	r3, r3
 800ba9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800baa0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800baa4:	4641      	mov	r1, r8
 800baa6:	eb12 0a01 	adds.w	sl, r2, r1
 800baaa:	4649      	mov	r1, r9
 800baac:	eb43 0b01 	adc.w	fp, r3, r1
 800bab0:	f04f 0200 	mov.w	r2, #0
 800bab4:	f04f 0300 	mov.w	r3, #0
 800bab8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800babc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800bac0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800bac4:	4692      	mov	sl, r2
 800bac6:	469b      	mov	fp, r3
 800bac8:	4643      	mov	r3, r8
 800baca:	eb1a 0303 	adds.w	r3, sl, r3
 800bace:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800bad2:	464b      	mov	r3, r9
 800bad4:	eb4b 0303 	adc.w	r3, fp, r3
 800bad8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800badc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bae0:	685b      	ldr	r3, [r3, #4]
 800bae2:	2200      	movs	r2, #0
 800bae4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800bae8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800baec:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800baf0:	460b      	mov	r3, r1
 800baf2:	18db      	adds	r3, r3, r3
 800baf4:	643b      	str	r3, [r7, #64]	; 0x40
 800baf6:	4613      	mov	r3, r2
 800baf8:	eb42 0303 	adc.w	r3, r2, r3
 800bafc:	647b      	str	r3, [r7, #68]	; 0x44
 800bafe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800bb02:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800bb06:	f7f5 f8bf 	bl	8000c88 <__aeabi_uldivmod>
 800bb0a:	4602      	mov	r2, r0
 800bb0c:	460b      	mov	r3, r1
 800bb0e:	4611      	mov	r1, r2
 800bb10:	4b3b      	ldr	r3, [pc, #236]	; (800bc00 <UART_SetConfig+0x2d4>)
 800bb12:	fba3 2301 	umull	r2, r3, r3, r1
 800bb16:	095b      	lsrs	r3, r3, #5
 800bb18:	2264      	movs	r2, #100	; 0x64
 800bb1a:	fb02 f303 	mul.w	r3, r2, r3
 800bb1e:	1acb      	subs	r3, r1, r3
 800bb20:	00db      	lsls	r3, r3, #3
 800bb22:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800bb26:	4b36      	ldr	r3, [pc, #216]	; (800bc00 <UART_SetConfig+0x2d4>)
 800bb28:	fba3 2302 	umull	r2, r3, r3, r2
 800bb2c:	095b      	lsrs	r3, r3, #5
 800bb2e:	005b      	lsls	r3, r3, #1
 800bb30:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800bb34:	441c      	add	r4, r3
 800bb36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bb3a:	2200      	movs	r2, #0
 800bb3c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800bb40:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800bb44:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800bb48:	4642      	mov	r2, r8
 800bb4a:	464b      	mov	r3, r9
 800bb4c:	1891      	adds	r1, r2, r2
 800bb4e:	63b9      	str	r1, [r7, #56]	; 0x38
 800bb50:	415b      	adcs	r3, r3
 800bb52:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bb54:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800bb58:	4641      	mov	r1, r8
 800bb5a:	1851      	adds	r1, r2, r1
 800bb5c:	6339      	str	r1, [r7, #48]	; 0x30
 800bb5e:	4649      	mov	r1, r9
 800bb60:	414b      	adcs	r3, r1
 800bb62:	637b      	str	r3, [r7, #52]	; 0x34
 800bb64:	f04f 0200 	mov.w	r2, #0
 800bb68:	f04f 0300 	mov.w	r3, #0
 800bb6c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800bb70:	4659      	mov	r1, fp
 800bb72:	00cb      	lsls	r3, r1, #3
 800bb74:	4651      	mov	r1, sl
 800bb76:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800bb7a:	4651      	mov	r1, sl
 800bb7c:	00ca      	lsls	r2, r1, #3
 800bb7e:	4610      	mov	r0, r2
 800bb80:	4619      	mov	r1, r3
 800bb82:	4603      	mov	r3, r0
 800bb84:	4642      	mov	r2, r8
 800bb86:	189b      	adds	r3, r3, r2
 800bb88:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800bb8c:	464b      	mov	r3, r9
 800bb8e:	460a      	mov	r2, r1
 800bb90:	eb42 0303 	adc.w	r3, r2, r3
 800bb94:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800bb98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bb9c:	685b      	ldr	r3, [r3, #4]
 800bb9e:	2200      	movs	r2, #0
 800bba0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800bba4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800bba8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800bbac:	460b      	mov	r3, r1
 800bbae:	18db      	adds	r3, r3, r3
 800bbb0:	62bb      	str	r3, [r7, #40]	; 0x28
 800bbb2:	4613      	mov	r3, r2
 800bbb4:	eb42 0303 	adc.w	r3, r2, r3
 800bbb8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bbba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800bbbe:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800bbc2:	f7f5 f861 	bl	8000c88 <__aeabi_uldivmod>
 800bbc6:	4602      	mov	r2, r0
 800bbc8:	460b      	mov	r3, r1
 800bbca:	4b0d      	ldr	r3, [pc, #52]	; (800bc00 <UART_SetConfig+0x2d4>)
 800bbcc:	fba3 1302 	umull	r1, r3, r3, r2
 800bbd0:	095b      	lsrs	r3, r3, #5
 800bbd2:	2164      	movs	r1, #100	; 0x64
 800bbd4:	fb01 f303 	mul.w	r3, r1, r3
 800bbd8:	1ad3      	subs	r3, r2, r3
 800bbda:	00db      	lsls	r3, r3, #3
 800bbdc:	3332      	adds	r3, #50	; 0x32
 800bbde:	4a08      	ldr	r2, [pc, #32]	; (800bc00 <UART_SetConfig+0x2d4>)
 800bbe0:	fba2 2303 	umull	r2, r3, r2, r3
 800bbe4:	095b      	lsrs	r3, r3, #5
 800bbe6:	f003 0207 	and.w	r2, r3, #7
 800bbea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	4422      	add	r2, r4
 800bbf2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800bbf4:	e105      	b.n	800be02 <UART_SetConfig+0x4d6>
 800bbf6:	bf00      	nop
 800bbf8:	40011000 	.word	0x40011000
 800bbfc:	40011400 	.word	0x40011400
 800bc00:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800bc04:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bc08:	2200      	movs	r2, #0
 800bc0a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800bc0e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800bc12:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800bc16:	4642      	mov	r2, r8
 800bc18:	464b      	mov	r3, r9
 800bc1a:	1891      	adds	r1, r2, r2
 800bc1c:	6239      	str	r1, [r7, #32]
 800bc1e:	415b      	adcs	r3, r3
 800bc20:	627b      	str	r3, [r7, #36]	; 0x24
 800bc22:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800bc26:	4641      	mov	r1, r8
 800bc28:	1854      	adds	r4, r2, r1
 800bc2a:	4649      	mov	r1, r9
 800bc2c:	eb43 0501 	adc.w	r5, r3, r1
 800bc30:	f04f 0200 	mov.w	r2, #0
 800bc34:	f04f 0300 	mov.w	r3, #0
 800bc38:	00eb      	lsls	r3, r5, #3
 800bc3a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800bc3e:	00e2      	lsls	r2, r4, #3
 800bc40:	4614      	mov	r4, r2
 800bc42:	461d      	mov	r5, r3
 800bc44:	4643      	mov	r3, r8
 800bc46:	18e3      	adds	r3, r4, r3
 800bc48:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800bc4c:	464b      	mov	r3, r9
 800bc4e:	eb45 0303 	adc.w	r3, r5, r3
 800bc52:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800bc56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bc5a:	685b      	ldr	r3, [r3, #4]
 800bc5c:	2200      	movs	r2, #0
 800bc5e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800bc62:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800bc66:	f04f 0200 	mov.w	r2, #0
 800bc6a:	f04f 0300 	mov.w	r3, #0
 800bc6e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800bc72:	4629      	mov	r1, r5
 800bc74:	008b      	lsls	r3, r1, #2
 800bc76:	4621      	mov	r1, r4
 800bc78:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bc7c:	4621      	mov	r1, r4
 800bc7e:	008a      	lsls	r2, r1, #2
 800bc80:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800bc84:	f7f5 f800 	bl	8000c88 <__aeabi_uldivmod>
 800bc88:	4602      	mov	r2, r0
 800bc8a:	460b      	mov	r3, r1
 800bc8c:	4b60      	ldr	r3, [pc, #384]	; (800be10 <UART_SetConfig+0x4e4>)
 800bc8e:	fba3 2302 	umull	r2, r3, r3, r2
 800bc92:	095b      	lsrs	r3, r3, #5
 800bc94:	011c      	lsls	r4, r3, #4
 800bc96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bc9a:	2200      	movs	r2, #0
 800bc9c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800bca0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800bca4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800bca8:	4642      	mov	r2, r8
 800bcaa:	464b      	mov	r3, r9
 800bcac:	1891      	adds	r1, r2, r2
 800bcae:	61b9      	str	r1, [r7, #24]
 800bcb0:	415b      	adcs	r3, r3
 800bcb2:	61fb      	str	r3, [r7, #28]
 800bcb4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800bcb8:	4641      	mov	r1, r8
 800bcba:	1851      	adds	r1, r2, r1
 800bcbc:	6139      	str	r1, [r7, #16]
 800bcbe:	4649      	mov	r1, r9
 800bcc0:	414b      	adcs	r3, r1
 800bcc2:	617b      	str	r3, [r7, #20]
 800bcc4:	f04f 0200 	mov.w	r2, #0
 800bcc8:	f04f 0300 	mov.w	r3, #0
 800bccc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800bcd0:	4659      	mov	r1, fp
 800bcd2:	00cb      	lsls	r3, r1, #3
 800bcd4:	4651      	mov	r1, sl
 800bcd6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800bcda:	4651      	mov	r1, sl
 800bcdc:	00ca      	lsls	r2, r1, #3
 800bcde:	4610      	mov	r0, r2
 800bce0:	4619      	mov	r1, r3
 800bce2:	4603      	mov	r3, r0
 800bce4:	4642      	mov	r2, r8
 800bce6:	189b      	adds	r3, r3, r2
 800bce8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800bcec:	464b      	mov	r3, r9
 800bcee:	460a      	mov	r2, r1
 800bcf0:	eb42 0303 	adc.w	r3, r2, r3
 800bcf4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800bcf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bcfc:	685b      	ldr	r3, [r3, #4]
 800bcfe:	2200      	movs	r2, #0
 800bd00:	67bb      	str	r3, [r7, #120]	; 0x78
 800bd02:	67fa      	str	r2, [r7, #124]	; 0x7c
 800bd04:	f04f 0200 	mov.w	r2, #0
 800bd08:	f04f 0300 	mov.w	r3, #0
 800bd0c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800bd10:	4649      	mov	r1, r9
 800bd12:	008b      	lsls	r3, r1, #2
 800bd14:	4641      	mov	r1, r8
 800bd16:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bd1a:	4641      	mov	r1, r8
 800bd1c:	008a      	lsls	r2, r1, #2
 800bd1e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800bd22:	f7f4 ffb1 	bl	8000c88 <__aeabi_uldivmod>
 800bd26:	4602      	mov	r2, r0
 800bd28:	460b      	mov	r3, r1
 800bd2a:	4b39      	ldr	r3, [pc, #228]	; (800be10 <UART_SetConfig+0x4e4>)
 800bd2c:	fba3 1302 	umull	r1, r3, r3, r2
 800bd30:	095b      	lsrs	r3, r3, #5
 800bd32:	2164      	movs	r1, #100	; 0x64
 800bd34:	fb01 f303 	mul.w	r3, r1, r3
 800bd38:	1ad3      	subs	r3, r2, r3
 800bd3a:	011b      	lsls	r3, r3, #4
 800bd3c:	3332      	adds	r3, #50	; 0x32
 800bd3e:	4a34      	ldr	r2, [pc, #208]	; (800be10 <UART_SetConfig+0x4e4>)
 800bd40:	fba2 2303 	umull	r2, r3, r2, r3
 800bd44:	095b      	lsrs	r3, r3, #5
 800bd46:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bd4a:	441c      	add	r4, r3
 800bd4c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bd50:	2200      	movs	r2, #0
 800bd52:	673b      	str	r3, [r7, #112]	; 0x70
 800bd54:	677a      	str	r2, [r7, #116]	; 0x74
 800bd56:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800bd5a:	4642      	mov	r2, r8
 800bd5c:	464b      	mov	r3, r9
 800bd5e:	1891      	adds	r1, r2, r2
 800bd60:	60b9      	str	r1, [r7, #8]
 800bd62:	415b      	adcs	r3, r3
 800bd64:	60fb      	str	r3, [r7, #12]
 800bd66:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800bd6a:	4641      	mov	r1, r8
 800bd6c:	1851      	adds	r1, r2, r1
 800bd6e:	6039      	str	r1, [r7, #0]
 800bd70:	4649      	mov	r1, r9
 800bd72:	414b      	adcs	r3, r1
 800bd74:	607b      	str	r3, [r7, #4]
 800bd76:	f04f 0200 	mov.w	r2, #0
 800bd7a:	f04f 0300 	mov.w	r3, #0
 800bd7e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800bd82:	4659      	mov	r1, fp
 800bd84:	00cb      	lsls	r3, r1, #3
 800bd86:	4651      	mov	r1, sl
 800bd88:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800bd8c:	4651      	mov	r1, sl
 800bd8e:	00ca      	lsls	r2, r1, #3
 800bd90:	4610      	mov	r0, r2
 800bd92:	4619      	mov	r1, r3
 800bd94:	4603      	mov	r3, r0
 800bd96:	4642      	mov	r2, r8
 800bd98:	189b      	adds	r3, r3, r2
 800bd9a:	66bb      	str	r3, [r7, #104]	; 0x68
 800bd9c:	464b      	mov	r3, r9
 800bd9e:	460a      	mov	r2, r1
 800bda0:	eb42 0303 	adc.w	r3, r2, r3
 800bda4:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bda6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bdaa:	685b      	ldr	r3, [r3, #4]
 800bdac:	2200      	movs	r2, #0
 800bdae:	663b      	str	r3, [r7, #96]	; 0x60
 800bdb0:	667a      	str	r2, [r7, #100]	; 0x64
 800bdb2:	f04f 0200 	mov.w	r2, #0
 800bdb6:	f04f 0300 	mov.w	r3, #0
 800bdba:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800bdbe:	4649      	mov	r1, r9
 800bdc0:	008b      	lsls	r3, r1, #2
 800bdc2:	4641      	mov	r1, r8
 800bdc4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bdc8:	4641      	mov	r1, r8
 800bdca:	008a      	lsls	r2, r1, #2
 800bdcc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800bdd0:	f7f4 ff5a 	bl	8000c88 <__aeabi_uldivmod>
 800bdd4:	4602      	mov	r2, r0
 800bdd6:	460b      	mov	r3, r1
 800bdd8:	4b0d      	ldr	r3, [pc, #52]	; (800be10 <UART_SetConfig+0x4e4>)
 800bdda:	fba3 1302 	umull	r1, r3, r3, r2
 800bdde:	095b      	lsrs	r3, r3, #5
 800bde0:	2164      	movs	r1, #100	; 0x64
 800bde2:	fb01 f303 	mul.w	r3, r1, r3
 800bde6:	1ad3      	subs	r3, r2, r3
 800bde8:	011b      	lsls	r3, r3, #4
 800bdea:	3332      	adds	r3, #50	; 0x32
 800bdec:	4a08      	ldr	r2, [pc, #32]	; (800be10 <UART_SetConfig+0x4e4>)
 800bdee:	fba2 2303 	umull	r2, r3, r2, r3
 800bdf2:	095b      	lsrs	r3, r3, #5
 800bdf4:	f003 020f 	and.w	r2, r3, #15
 800bdf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	4422      	add	r2, r4
 800be00:	609a      	str	r2, [r3, #8]
}
 800be02:	bf00      	nop
 800be04:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800be08:	46bd      	mov	sp, r7
 800be0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800be0e:	bf00      	nop
 800be10:	51eb851f 	.word	0x51eb851f

0800be14 <FusionDegreesToRadians>:
/**
 * @brief Converts degrees to radians.
 * @param degrees Degrees.
 * @return Radians.
 */
static inline float FusionDegreesToRadians(const float degrees) {
 800be14:	b480      	push	{r7}
 800be16:	b083      	sub	sp, #12
 800be18:	af00      	add	r7, sp, #0
 800be1a:	ed87 0a01 	vstr	s0, [r7, #4]
    return degrees * ((float) M_PI / 180.0f);
 800be1e:	edd7 7a01 	vldr	s15, [r7, #4]
 800be22:	ed9f 7a05 	vldr	s14, [pc, #20]	; 800be38 <FusionDegreesToRadians+0x24>
 800be26:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800be2a:	eeb0 0a67 	vmov.f32	s0, s15
 800be2e:	370c      	adds	r7, #12
 800be30:	46bd      	mov	sp, r7
 800be32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be36:	4770      	bx	lr
 800be38:	3c8efa35 	.word	0x3c8efa35

0800be3c <FusionFastInverseSqrt>:
 * @brief Calculates the reciprocal of the square root.
 * See https://pizer.wordpress.com/2008/10/12/fast-inverse-square-root/
 * @param x Operand.
 * @return Reciprocal of the square root of x.
 */
static inline float FusionFastInverseSqrt(const float x) {
 800be3c:	b480      	push	{r7}
 800be3e:	b085      	sub	sp, #20
 800be40:	af00      	add	r7, sp, #0
 800be42:	ed87 0a01 	vstr	s0, [r7, #4]
    typedef union {
        float f;
        int32_t i;
    } Union32;

    Union32 union32 = {.f = x};
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	60fb      	str	r3, [r7, #12]
    union32.i = 0x5F1F1412 - (union32.i >> 1);
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	105a      	asrs	r2, r3, #1
 800be4e:	4b10      	ldr	r3, [pc, #64]	; (800be90 <FusionFastInverseSqrt+0x54>)
 800be50:	1a9b      	subs	r3, r3, r2
 800be52:	60fb      	str	r3, [r7, #12]
    return union32.f * (1.69000231f - 0.714158168f * x * union32.f * union32.f);
 800be54:	ed97 7a03 	vldr	s14, [r7, #12]
 800be58:	edd7 7a01 	vldr	s15, [r7, #4]
 800be5c:	eddf 6a0d 	vldr	s13, [pc, #52]	; 800be94 <FusionFastInverseSqrt+0x58>
 800be60:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800be64:	edd7 7a03 	vldr	s15, [r7, #12]
 800be68:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800be6c:	edd7 7a03 	vldr	s15, [r7, #12]
 800be70:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800be74:	eddf 6a08 	vldr	s13, [pc, #32]	; 800be98 <FusionFastInverseSqrt+0x5c>
 800be78:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800be7c:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 800be80:	eeb0 0a67 	vmov.f32	s0, s15
 800be84:	3714      	adds	r7, #20
 800be86:	46bd      	mov	sp, r7
 800be88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be8c:	4770      	bx	lr
 800be8e:	bf00      	nop
 800be90:	5f1f1412 	.word	0x5f1f1412
 800be94:	3f36d312 	.word	0x3f36d312
 800be98:	3fd851ff 	.word	0x3fd851ff

0800be9c <FusionVectorIsZero>:
/**
 * @brief Returns true if the vector is zero.
 * @param vector Vector.
 * @return True if the vector is zero.
 */
static inline bool FusionVectorIsZero(const FusionVector vector) {
 800be9c:	b480      	push	{r7}
 800be9e:	b085      	sub	sp, #20
 800bea0:	af00      	add	r7, sp, #0
 800bea2:	eef0 6a40 	vmov.f32	s13, s0
 800bea6:	eeb0 7a60 	vmov.f32	s14, s1
 800beaa:	eef0 7a41 	vmov.f32	s15, s2
 800beae:	edc7 6a01 	vstr	s13, [r7, #4]
 800beb2:	ed87 7a02 	vstr	s14, [r7, #8]
 800beb6:	edc7 7a03 	vstr	s15, [r7, #12]
    return (vector.axis.x == 0.0f) && (vector.axis.y == 0.0f) && (vector.axis.z == 0.0f);
 800beba:	edd7 7a01 	vldr	s15, [r7, #4]
 800bebe:	eef5 7a40 	vcmp.f32	s15, #0.0
 800bec2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bec6:	d10f      	bne.n	800bee8 <FusionVectorIsZero+0x4c>
 800bec8:	edd7 7a02 	vldr	s15, [r7, #8]
 800becc:	eef5 7a40 	vcmp.f32	s15, #0.0
 800bed0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bed4:	d108      	bne.n	800bee8 <FusionVectorIsZero+0x4c>
 800bed6:	edd7 7a03 	vldr	s15, [r7, #12]
 800beda:	eef5 7a40 	vcmp.f32	s15, #0.0
 800bede:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bee2:	d101      	bne.n	800bee8 <FusionVectorIsZero+0x4c>
 800bee4:	2301      	movs	r3, #1
 800bee6:	e000      	b.n	800beea <FusionVectorIsZero+0x4e>
 800bee8:	2300      	movs	r3, #0
 800beea:	f003 0301 	and.w	r3, r3, #1
 800beee:	b2db      	uxtb	r3, r3
}
 800bef0:	4618      	mov	r0, r3
 800bef2:	3714      	adds	r7, #20
 800bef4:	46bd      	mov	sp, r7
 800bef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800befa:	4770      	bx	lr

0800befc <FusionVectorAdd>:
 * @brief Returns the sum of two vectors.
 * @param vectorA Vector A.
 * @param vectorB Vector B.
 * @return Sum of two vectors.
 */
static inline FusionVector FusionVectorAdd(const FusionVector vectorA, const FusionVector vectorB) {
 800befc:	b480      	push	{r7}
 800befe:	b091      	sub	sp, #68	; 0x44
 800bf00:	af00      	add	r7, sp, #0
 800bf02:	eeb0 5a40 	vmov.f32	s10, s0
 800bf06:	eef0 5a60 	vmov.f32	s11, s1
 800bf0a:	eeb0 6a41 	vmov.f32	s12, s2
 800bf0e:	eef0 6a61 	vmov.f32	s13, s3
 800bf12:	eeb0 7a42 	vmov.f32	s14, s4
 800bf16:	eef0 7a62 	vmov.f32	s15, s5
 800bf1a:	ed87 5a07 	vstr	s10, [r7, #28]
 800bf1e:	edc7 5a08 	vstr	s11, [r7, #32]
 800bf22:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 800bf26:	edc7 6a04 	vstr	s13, [r7, #16]
 800bf2a:	ed87 7a05 	vstr	s14, [r7, #20]
 800bf2e:	edc7 7a06 	vstr	s15, [r7, #24]
    const FusionVector result = {.axis = {
            .x = vectorA.axis.x + vectorB.axis.x,
 800bf32:	ed97 7a07 	vldr	s14, [r7, #28]
 800bf36:	edd7 7a04 	vldr	s15, [r7, #16]
 800bf3a:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800bf3e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = vectorA.axis.y + vectorB.axis.y,
 800bf42:	ed97 7a08 	vldr	s14, [r7, #32]
 800bf46:	edd7 7a05 	vldr	s15, [r7, #20]
 800bf4a:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800bf4e:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = vectorA.axis.z + vectorB.axis.z,
 800bf52:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800bf56:	edd7 7a06 	vldr	s15, [r7, #24]
 800bf5a:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800bf5e:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    }};
    return result;
 800bf62:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800bf66:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800bf6a:	ca07      	ldmia	r2, {r0, r1, r2}
 800bf6c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800bf70:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800bf72:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bf74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf76:	ee06 1a90 	vmov	s13, r1
 800bf7a:	ee07 2a10 	vmov	s14, r2
 800bf7e:	ee07 3a90 	vmov	s15, r3
}
 800bf82:	eeb0 0a66 	vmov.f32	s0, s13
 800bf86:	eef0 0a47 	vmov.f32	s1, s14
 800bf8a:	eeb0 1a67 	vmov.f32	s2, s15
 800bf8e:	3744      	adds	r7, #68	; 0x44
 800bf90:	46bd      	mov	sp, r7
 800bf92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf96:	4770      	bx	lr

0800bf98 <FusionVectorSum>:
/**
 * @brief Returns the sum of the elements.
 * @param vector Vector.
 * @return Sum of the elements.
 */
static inline float FusionVectorSum(const FusionVector vector) {
 800bf98:	b480      	push	{r7}
 800bf9a:	b085      	sub	sp, #20
 800bf9c:	af00      	add	r7, sp, #0
 800bf9e:	eef0 6a40 	vmov.f32	s13, s0
 800bfa2:	eeb0 7a60 	vmov.f32	s14, s1
 800bfa6:	eef0 7a41 	vmov.f32	s15, s2
 800bfaa:	edc7 6a01 	vstr	s13, [r7, #4]
 800bfae:	ed87 7a02 	vstr	s14, [r7, #8]
 800bfb2:	edc7 7a03 	vstr	s15, [r7, #12]
    return vector.axis.x + vector.axis.y + vector.axis.z;
 800bfb6:	ed97 7a01 	vldr	s14, [r7, #4]
 800bfba:	edd7 7a02 	vldr	s15, [r7, #8]
 800bfbe:	ee37 7a27 	vadd.f32	s14, s14, s15
 800bfc2:	edd7 7a03 	vldr	s15, [r7, #12]
 800bfc6:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 800bfca:	eeb0 0a67 	vmov.f32	s0, s15
 800bfce:	3714      	adds	r7, #20
 800bfd0:	46bd      	mov	sp, r7
 800bfd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfd6:	4770      	bx	lr

0800bfd8 <FusionVectorMultiplyScalar>:
 * @brief Returns the multiplication of a vector by a scalar.
 * @param vector Vector.
 * @param scalar Scalar.
 * @return Multiplication of a vector by a scalar.
 */
static inline FusionVector FusionVectorMultiplyScalar(const FusionVector vector, const float scalar) {
 800bfd8:	b480      	push	{r7}
 800bfda:	b08f      	sub	sp, #60	; 0x3c
 800bfdc:	af00      	add	r7, sp, #0
 800bfde:	eef0 6a40 	vmov.f32	s13, s0
 800bfe2:	eeb0 7a60 	vmov.f32	s14, s1
 800bfe6:	eef0 7a41 	vmov.f32	s15, s2
 800bfea:	edc7 1a04 	vstr	s3, [r7, #16]
 800bfee:	edc7 6a05 	vstr	s13, [r7, #20]
 800bff2:	ed87 7a06 	vstr	s14, [r7, #24]
 800bff6:	edc7 7a07 	vstr	s15, [r7, #28]
    const FusionVector result = {.axis = {
            .x = vector.axis.x * scalar,
 800bffa:	ed97 7a05 	vldr	s14, [r7, #20]
 800bffe:	edd7 7a04 	vldr	s15, [r7, #16]
 800c002:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800c006:	edc7 7a08 	vstr	s15, [r7, #32]
            .y = vector.axis.y * scalar,
 800c00a:	ed97 7a06 	vldr	s14, [r7, #24]
 800c00e:	edd7 7a04 	vldr	s15, [r7, #16]
 800c012:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800c016:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            .z = vector.axis.z * scalar,
 800c01a:	ed97 7a07 	vldr	s14, [r7, #28]
 800c01e:	edd7 7a04 	vldr	s15, [r7, #16]
 800c022:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800c026:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    }};
    return result;
 800c02a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800c02e:	f107 0220 	add.w	r2, r7, #32
 800c032:	ca07      	ldmia	r2, {r0, r1, r2}
 800c034:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800c038:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c03a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c03c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c03e:	ee06 1a90 	vmov	s13, r1
 800c042:	ee07 2a10 	vmov	s14, r2
 800c046:	ee07 3a90 	vmov	s15, r3
}
 800c04a:	eeb0 0a66 	vmov.f32	s0, s13
 800c04e:	eef0 0a47 	vmov.f32	s1, s14
 800c052:	eeb0 1a67 	vmov.f32	s2, s15
 800c056:	373c      	adds	r7, #60	; 0x3c
 800c058:	46bd      	mov	sp, r7
 800c05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c05e:	4770      	bx	lr

0800c060 <FusionVectorHadamardProduct>:
 * @brief Calculates the Hadamard product (element-wise multiplication).
 * @param vectorA Vector A.
 * @param vectorB Vector B.
 * @return Hadamard product.
 */
static inline FusionVector FusionVectorHadamardProduct(const FusionVector vectorA, const FusionVector vectorB) {
 800c060:	b480      	push	{r7}
 800c062:	b091      	sub	sp, #68	; 0x44
 800c064:	af00      	add	r7, sp, #0
 800c066:	eeb0 5a40 	vmov.f32	s10, s0
 800c06a:	eef0 5a60 	vmov.f32	s11, s1
 800c06e:	eeb0 6a41 	vmov.f32	s12, s2
 800c072:	eef0 6a61 	vmov.f32	s13, s3
 800c076:	eeb0 7a42 	vmov.f32	s14, s4
 800c07a:	eef0 7a62 	vmov.f32	s15, s5
 800c07e:	ed87 5a07 	vstr	s10, [r7, #28]
 800c082:	edc7 5a08 	vstr	s11, [r7, #32]
 800c086:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 800c08a:	edc7 6a04 	vstr	s13, [r7, #16]
 800c08e:	ed87 7a05 	vstr	s14, [r7, #20]
 800c092:	edc7 7a06 	vstr	s15, [r7, #24]
    const FusionVector result = {.axis = {
            .x = vectorA.axis.x * vectorB.axis.x,
 800c096:	ed97 7a07 	vldr	s14, [r7, #28]
 800c09a:	edd7 7a04 	vldr	s15, [r7, #16]
 800c09e:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800c0a2:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = vectorA.axis.y * vectorB.axis.y,
 800c0a6:	ed97 7a08 	vldr	s14, [r7, #32]
 800c0aa:	edd7 7a05 	vldr	s15, [r7, #20]
 800c0ae:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800c0b2:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = vectorA.axis.z * vectorB.axis.z,
 800c0b6:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800c0ba:	edd7 7a06 	vldr	s15, [r7, #24]
 800c0be:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800c0c2:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    }};
    return result;
 800c0c6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800c0ca:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800c0ce:	ca07      	ldmia	r2, {r0, r1, r2}
 800c0d0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800c0d4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c0d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c0d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c0da:	ee06 1a90 	vmov	s13, r1
 800c0de:	ee07 2a10 	vmov	s14, r2
 800c0e2:	ee07 3a90 	vmov	s15, r3
}
 800c0e6:	eeb0 0a66 	vmov.f32	s0, s13
 800c0ea:	eef0 0a47 	vmov.f32	s1, s14
 800c0ee:	eeb0 1a67 	vmov.f32	s2, s15
 800c0f2:	3744      	adds	r7, #68	; 0x44
 800c0f4:	46bd      	mov	sp, r7
 800c0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0fa:	4770      	bx	lr

0800c0fc <FusionVectorCrossProduct>:
 * @brief Returns the cross product.
 * @param vectorA Vector A.
 * @param vectorB Vector B.
 * @return Cross product.
 */
static inline FusionVector FusionVectorCrossProduct(const FusionVector vectorA, const FusionVector vectorB) {
 800c0fc:	b480      	push	{r7}
 800c0fe:	b091      	sub	sp, #68	; 0x44
 800c100:	af00      	add	r7, sp, #0
 800c102:	eeb0 5a40 	vmov.f32	s10, s0
 800c106:	eef0 5a60 	vmov.f32	s11, s1
 800c10a:	eeb0 6a41 	vmov.f32	s12, s2
 800c10e:	eef0 6a61 	vmov.f32	s13, s3
 800c112:	eeb0 7a42 	vmov.f32	s14, s4
 800c116:	eef0 7a62 	vmov.f32	s15, s5
 800c11a:	ed87 5a07 	vstr	s10, [r7, #28]
 800c11e:	edc7 5a08 	vstr	s11, [r7, #32]
 800c122:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 800c126:	edc7 6a04 	vstr	s13, [r7, #16]
 800c12a:	ed87 7a05 	vstr	s14, [r7, #20]
 800c12e:	edc7 7a06 	vstr	s15, [r7, #24]
#define A vectorA.axis
#define B vectorB.axis
    const FusionVector result = {.axis = {
            .x = A.y * B.z - A.z * B.y,
 800c132:	ed97 7a08 	vldr	s14, [r7, #32]
 800c136:	edd7 7a06 	vldr	s15, [r7, #24]
 800c13a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c13e:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800c142:	edd7 7a05 	vldr	s15, [r7, #20]
 800c146:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c14a:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800c14e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = A.z * B.x - A.x * B.z,
 800c152:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800c156:	edd7 7a04 	vldr	s15, [r7, #16]
 800c15a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c15e:	edd7 6a07 	vldr	s13, [r7, #28]
 800c162:	edd7 7a06 	vldr	s15, [r7, #24]
 800c166:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c16a:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800c16e:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = A.x * B.y - A.y * B.x,
 800c172:	ed97 7a07 	vldr	s14, [r7, #28]
 800c176:	edd7 7a05 	vldr	s15, [r7, #20]
 800c17a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c17e:	edd7 6a08 	vldr	s13, [r7, #32]
 800c182:	edd7 7a04 	vldr	s15, [r7, #16]
 800c186:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c18a:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800c18e:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    }};
    return result;
 800c192:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800c196:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800c19a:	ca07      	ldmia	r2, {r0, r1, r2}
 800c19c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800c1a0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c1a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c1a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c1a6:	ee06 1a90 	vmov	s13, r1
 800c1aa:	ee07 2a10 	vmov	s14, r2
 800c1ae:	ee07 3a90 	vmov	s15, r3
#undef A
#undef B
}
 800c1b2:	eeb0 0a66 	vmov.f32	s0, s13
 800c1b6:	eef0 0a47 	vmov.f32	s1, s14
 800c1ba:	eeb0 1a67 	vmov.f32	s2, s15
 800c1be:	3744      	adds	r7, #68	; 0x44
 800c1c0:	46bd      	mov	sp, r7
 800c1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1c6:	4770      	bx	lr

0800c1c8 <FusionVectorDotProduct>:
 * @brief Returns the dot product.
 * @param vectorA Vector A.
 * @param vectorB Vector B.
 * @return Dot product.
 */
static inline float FusionVectorDotProduct(const FusionVector vectorA, const FusionVector vectorB) {
 800c1c8:	b580      	push	{r7, lr}
 800c1ca:	b08a      	sub	sp, #40	; 0x28
 800c1cc:	af00      	add	r7, sp, #0
 800c1ce:	eeb0 5a40 	vmov.f32	s10, s0
 800c1d2:	eef0 5a60 	vmov.f32	s11, s1
 800c1d6:	eeb0 6a41 	vmov.f32	s12, s2
 800c1da:	eef0 6a61 	vmov.f32	s13, s3
 800c1de:	eeb0 7a42 	vmov.f32	s14, s4
 800c1e2:	eef0 7a62 	vmov.f32	s15, s5
 800c1e6:	ed87 5a03 	vstr	s10, [r7, #12]
 800c1ea:	edc7 5a04 	vstr	s11, [r7, #16]
 800c1ee:	ed87 6a05 	vstr	s12, [r7, #20]
 800c1f2:	edc7 6a00 	vstr	s13, [r7]
 800c1f6:	ed87 7a01 	vstr	s14, [r7, #4]
 800c1fa:	edc7 7a02 	vstr	s15, [r7, #8]
    return FusionVectorSum(FusionVectorHadamardProduct(vectorA, vectorB));
 800c1fe:	ed97 5a00 	vldr	s10, [r7]
 800c202:	edd7 5a01 	vldr	s11, [r7, #4]
 800c206:	ed97 6a02 	vldr	s12, [r7, #8]
 800c20a:	edd7 6a03 	vldr	s13, [r7, #12]
 800c20e:	ed97 7a04 	vldr	s14, [r7, #16]
 800c212:	edd7 7a05 	vldr	s15, [r7, #20]
 800c216:	eef0 1a45 	vmov.f32	s3, s10
 800c21a:	eeb0 2a65 	vmov.f32	s4, s11
 800c21e:	eef0 2a46 	vmov.f32	s5, s12
 800c222:	eeb0 0a66 	vmov.f32	s0, s13
 800c226:	eef0 0a47 	vmov.f32	s1, s14
 800c22a:	eeb0 1a67 	vmov.f32	s2, s15
 800c22e:	f7ff ff17 	bl	800c060 <FusionVectorHadamardProduct>
 800c232:	eef0 6a40 	vmov.f32	s13, s0
 800c236:	eeb0 7a60 	vmov.f32	s14, s1
 800c23a:	eef0 7a41 	vmov.f32	s15, s2
 800c23e:	edc7 6a07 	vstr	s13, [r7, #28]
 800c242:	ed87 7a08 	vstr	s14, [r7, #32]
 800c246:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 800c24a:	edd7 6a07 	vldr	s13, [r7, #28]
 800c24e:	ed97 7a08 	vldr	s14, [r7, #32]
 800c252:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800c256:	eeb0 0a66 	vmov.f32	s0, s13
 800c25a:	eef0 0a47 	vmov.f32	s1, s14
 800c25e:	eeb0 1a67 	vmov.f32	s2, s15
 800c262:	f7ff fe99 	bl	800bf98 <FusionVectorSum>
 800c266:	eef0 7a40 	vmov.f32	s15, s0
}
 800c26a:	eeb0 0a67 	vmov.f32	s0, s15
 800c26e:	3728      	adds	r7, #40	; 0x28
 800c270:	46bd      	mov	sp, r7
 800c272:	bd80      	pop	{r7, pc}

0800c274 <FusionVectorMagnitudeSquared>:
/**
 * @brief Returns the vector magnitude squared.
 * @param vector Vector.
 * @return Vector magnitude squared.
 */
static inline float FusionVectorMagnitudeSquared(const FusionVector vector) {
 800c274:	b580      	push	{r7, lr}
 800c276:	b088      	sub	sp, #32
 800c278:	af00      	add	r7, sp, #0
 800c27a:	eef0 6a40 	vmov.f32	s13, s0
 800c27e:	eeb0 7a60 	vmov.f32	s14, s1
 800c282:	eef0 7a41 	vmov.f32	s15, s2
 800c286:	edc7 6a01 	vstr	s13, [r7, #4]
 800c28a:	ed87 7a02 	vstr	s14, [r7, #8]
 800c28e:	edc7 7a03 	vstr	s15, [r7, #12]
    return FusionVectorSum(FusionVectorHadamardProduct(vector, vector));
 800c292:	ed97 5a01 	vldr	s10, [r7, #4]
 800c296:	edd7 5a02 	vldr	s11, [r7, #8]
 800c29a:	ed97 6a03 	vldr	s12, [r7, #12]
 800c29e:	edd7 6a01 	vldr	s13, [r7, #4]
 800c2a2:	ed97 7a02 	vldr	s14, [r7, #8]
 800c2a6:	edd7 7a03 	vldr	s15, [r7, #12]
 800c2aa:	eef0 1a45 	vmov.f32	s3, s10
 800c2ae:	eeb0 2a65 	vmov.f32	s4, s11
 800c2b2:	eef0 2a46 	vmov.f32	s5, s12
 800c2b6:	eeb0 0a66 	vmov.f32	s0, s13
 800c2ba:	eef0 0a47 	vmov.f32	s1, s14
 800c2be:	eeb0 1a67 	vmov.f32	s2, s15
 800c2c2:	f7ff fecd 	bl	800c060 <FusionVectorHadamardProduct>
 800c2c6:	eef0 6a40 	vmov.f32	s13, s0
 800c2ca:	eeb0 7a60 	vmov.f32	s14, s1
 800c2ce:	eef0 7a41 	vmov.f32	s15, s2
 800c2d2:	edc7 6a05 	vstr	s13, [r7, #20]
 800c2d6:	ed87 7a06 	vstr	s14, [r7, #24]
 800c2da:	edc7 7a07 	vstr	s15, [r7, #28]
 800c2de:	edd7 6a05 	vldr	s13, [r7, #20]
 800c2e2:	ed97 7a06 	vldr	s14, [r7, #24]
 800c2e6:	edd7 7a07 	vldr	s15, [r7, #28]
 800c2ea:	eeb0 0a66 	vmov.f32	s0, s13
 800c2ee:	eef0 0a47 	vmov.f32	s1, s14
 800c2f2:	eeb0 1a67 	vmov.f32	s2, s15
 800c2f6:	f7ff fe4f 	bl	800bf98 <FusionVectorSum>
 800c2fa:	eef0 7a40 	vmov.f32	s15, s0
}
 800c2fe:	eeb0 0a67 	vmov.f32	s0, s15
 800c302:	3720      	adds	r7, #32
 800c304:	46bd      	mov	sp, r7
 800c306:	bd80      	pop	{r7, pc}

0800c308 <FusionVectorNormalise>:
/**
 * @brief Returns the normalised vector.
 * @param vector Vector.
 * @return Normalised vector.
 */
static inline FusionVector FusionVectorNormalise(const FusionVector vector) {
 800c308:	b580      	push	{r7, lr}
 800c30a:	b08c      	sub	sp, #48	; 0x30
 800c30c:	af00      	add	r7, sp, #0
 800c30e:	eef0 6a40 	vmov.f32	s13, s0
 800c312:	eeb0 7a60 	vmov.f32	s14, s1
 800c316:	eef0 7a41 	vmov.f32	s15, s2
 800c31a:	edc7 6a05 	vstr	s13, [r7, #20]
 800c31e:	ed87 7a06 	vstr	s14, [r7, #24]
 800c322:	edc7 7a07 	vstr	s15, [r7, #28]
#ifdef FUSION_USE_NORMAL_SQRT
    const float magnitudeReciprocal = 1.0f / sqrtf(FusionVectorMagnitudeSquared(vector));
#else
    const float magnitudeReciprocal = FusionFastInverseSqrt(FusionVectorMagnitudeSquared(vector));
 800c326:	edd7 6a05 	vldr	s13, [r7, #20]
 800c32a:	ed97 7a06 	vldr	s14, [r7, #24]
 800c32e:	edd7 7a07 	vldr	s15, [r7, #28]
 800c332:	eeb0 0a66 	vmov.f32	s0, s13
 800c336:	eef0 0a47 	vmov.f32	s1, s14
 800c33a:	eeb0 1a67 	vmov.f32	s2, s15
 800c33e:	f7ff ff99 	bl	800c274 <FusionVectorMagnitudeSquared>
 800c342:	eef0 7a40 	vmov.f32	s15, s0
 800c346:	eeb0 0a67 	vmov.f32	s0, s15
 800c34a:	f7ff fd77 	bl	800be3c <FusionFastInverseSqrt>
 800c34e:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
#endif
    return FusionVectorMultiplyScalar(vector, magnitudeReciprocal);
 800c352:	edd7 6a05 	vldr	s13, [r7, #20]
 800c356:	ed97 7a06 	vldr	s14, [r7, #24]
 800c35a:	edd7 7a07 	vldr	s15, [r7, #28]
 800c35e:	edd7 1a0b 	vldr	s3, [r7, #44]	; 0x2c
 800c362:	eeb0 0a66 	vmov.f32	s0, s13
 800c366:	eef0 0a47 	vmov.f32	s1, s14
 800c36a:	eeb0 1a67 	vmov.f32	s2, s15
 800c36e:	f7ff fe33 	bl	800bfd8 <FusionVectorMultiplyScalar>
 800c372:	eef0 6a40 	vmov.f32	s13, s0
 800c376:	eeb0 7a60 	vmov.f32	s14, s1
 800c37a:	eef0 7a41 	vmov.f32	s15, s2
 800c37e:	edc7 6a08 	vstr	s13, [r7, #32]
 800c382:	ed87 7a09 	vstr	s14, [r7, #36]	; 0x24
 800c386:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 800c38a:	6a39      	ldr	r1, [r7, #32]
 800c38c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c38e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c390:	ee06 1a90 	vmov	s13, r1
 800c394:	ee07 2a10 	vmov	s14, r2
 800c398:	ee07 3a90 	vmov	s15, r3
}
 800c39c:	eeb0 0a66 	vmov.f32	s0, s13
 800c3a0:	eef0 0a47 	vmov.f32	s1, s14
 800c3a4:	eeb0 1a67 	vmov.f32	s2, s15
 800c3a8:	3730      	adds	r7, #48	; 0x30
 800c3aa:	46bd      	mov	sp, r7
 800c3ac:	bd80      	pop	{r7, pc}

0800c3ae <FusionQuaternionAdd>:
 * @brief Returns the sum of two quaternions.
 * @param quaternionA Quaternion A.
 * @param quaternionB Quaternion B.
 * @return Sum of two quaternions.
 */
static inline FusionQuaternion FusionQuaternionAdd(const FusionQuaternion quaternionA, const FusionQuaternion quaternionB) {
 800c3ae:	b490      	push	{r4, r7}
 800c3b0:	b094      	sub	sp, #80	; 0x50
 800c3b2:	af00      	add	r7, sp, #0
 800c3b4:	eeb0 4a40 	vmov.f32	s8, s0
 800c3b8:	eef0 4a60 	vmov.f32	s9, s1
 800c3bc:	eeb0 5a41 	vmov.f32	s10, s2
 800c3c0:	eef0 5a61 	vmov.f32	s11, s3
 800c3c4:	eeb0 6a42 	vmov.f32	s12, s4
 800c3c8:	eef0 6a62 	vmov.f32	s13, s5
 800c3cc:	eeb0 7a43 	vmov.f32	s14, s6
 800c3d0:	eef0 7a63 	vmov.f32	s15, s7
 800c3d4:	ed87 4a08 	vstr	s8, [r7, #32]
 800c3d8:	edc7 4a09 	vstr	s9, [r7, #36]	; 0x24
 800c3dc:	ed87 5a0a 	vstr	s10, [r7, #40]	; 0x28
 800c3e0:	edc7 5a0b 	vstr	s11, [r7, #44]	; 0x2c
 800c3e4:	ed87 6a04 	vstr	s12, [r7, #16]
 800c3e8:	edc7 6a05 	vstr	s13, [r7, #20]
 800c3ec:	ed87 7a06 	vstr	s14, [r7, #24]
 800c3f0:	edc7 7a07 	vstr	s15, [r7, #28]
    const FusionQuaternion result = {.element = {
            .w = quaternionA.element.w + quaternionB.element.w,
 800c3f4:	ed97 7a08 	vldr	s14, [r7, #32]
 800c3f8:	edd7 7a04 	vldr	s15, [r7, #16]
 800c3fc:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 800c400:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
            .x = quaternionA.element.x + quaternionB.element.x,
 800c404:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800c408:	edd7 7a05 	vldr	s15, [r7, #20]
 800c40c:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 800c410:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
            .y = quaternionA.element.y + quaternionB.element.y,
 800c414:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c418:	edd7 7a06 	vldr	s15, [r7, #24]
 800c41c:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 800c420:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
            .z = quaternionA.element.z + quaternionB.element.z,
 800c424:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800c428:	edd7 7a07 	vldr	s15, [r7, #28]
 800c42c:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 800c430:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    }};
    return result;
 800c434:	f107 0440 	add.w	r4, r7, #64	; 0x40
 800c438:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c43c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c43e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800c442:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800c444:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c446:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c448:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c44a:	ee06 0a10 	vmov	s12, r0
 800c44e:	ee06 1a90 	vmov	s13, r1
 800c452:	ee07 2a10 	vmov	s14, r2
 800c456:	ee07 3a90 	vmov	s15, r3
}
 800c45a:	eeb0 0a46 	vmov.f32	s0, s12
 800c45e:	eef0 0a66 	vmov.f32	s1, s13
 800c462:	eeb0 1a47 	vmov.f32	s2, s14
 800c466:	eef0 1a67 	vmov.f32	s3, s15
 800c46a:	3750      	adds	r7, #80	; 0x50
 800c46c:	46bd      	mov	sp, r7
 800c46e:	bc90      	pop	{r4, r7}
 800c470:	4770      	bx	lr

0800c472 <FusionQuaternionMultiplyVector>:
 * multiplied by the vector.
 * @param quaternion Quaternion.
 * @param vector Vector.
 * @return Multiplication of a quaternion with a vector.
 */
static inline FusionQuaternion FusionQuaternionMultiplyVector(const FusionQuaternion quaternion, const FusionVector vector) {
 800c472:	b490      	push	{r4, r7}
 800c474:	b094      	sub	sp, #80	; 0x50
 800c476:	af00      	add	r7, sp, #0
 800c478:	eef0 4a40 	vmov.f32	s9, s0
 800c47c:	eeb0 5a60 	vmov.f32	s10, s1
 800c480:	eef0 5a41 	vmov.f32	s11, s2
 800c484:	eeb0 6a61 	vmov.f32	s12, s3
 800c488:	eef0 6a42 	vmov.f32	s13, s4
 800c48c:	eeb0 7a62 	vmov.f32	s14, s5
 800c490:	eef0 7a43 	vmov.f32	s15, s6
 800c494:	edc7 4a08 	vstr	s9, [r7, #32]
 800c498:	ed87 5a09 	vstr	s10, [r7, #36]	; 0x24
 800c49c:	edc7 5a0a 	vstr	s11, [r7, #40]	; 0x28
 800c4a0:	ed87 6a0b 	vstr	s12, [r7, #44]	; 0x2c
 800c4a4:	edc7 6a05 	vstr	s13, [r7, #20]
 800c4a8:	ed87 7a06 	vstr	s14, [r7, #24]
 800c4ac:	edc7 7a07 	vstr	s15, [r7, #28]
#define Q quaternion.element
#define V vector.axis
    const FusionQuaternion result = {.element = {
            .w = -Q.x * V.x - Q.y * V.y - Q.z * V.z,
 800c4b0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800c4b4:	eeb1 7a67 	vneg.f32	s14, s15
 800c4b8:	edd7 7a05 	vldr	s15, [r7, #20]
 800c4bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c4c0:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800c4c4:	edd7 7a06 	vldr	s15, [r7, #24]
 800c4c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c4cc:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c4d0:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800c4d4:	edd7 7a07 	vldr	s15, [r7, #28]
 800c4d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c4dc:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 800c4e0:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
            .x = Q.w * V.x + Q.y * V.z - Q.z * V.y,
 800c4e4:	ed97 7a08 	vldr	s14, [r7, #32]
 800c4e8:	edd7 7a05 	vldr	s15, [r7, #20]
 800c4ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c4f0:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800c4f4:	edd7 7a07 	vldr	s15, [r7, #28]
 800c4f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c4fc:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c500:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800c504:	edd7 7a06 	vldr	s15, [r7, #24]
 800c508:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c50c:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 800c510:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
            .y = Q.w * V.y - Q.x * V.z + Q.z * V.x,
 800c514:	ed97 7a08 	vldr	s14, [r7, #32]
 800c518:	edd7 7a06 	vldr	s15, [r7, #24]
 800c51c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c520:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800c524:	edd7 7a07 	vldr	s15, [r7, #28]
 800c528:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c52c:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c530:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800c534:	edd7 7a05 	vldr	s15, [r7, #20]
 800c538:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c53c:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 800c540:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
            .z = Q.w * V.z + Q.x * V.y - Q.y * V.x,
 800c544:	ed97 7a08 	vldr	s14, [r7, #32]
 800c548:	edd7 7a07 	vldr	s15, [r7, #28]
 800c54c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c550:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800c554:	edd7 7a06 	vldr	s15, [r7, #24]
 800c558:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c55c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c560:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800c564:	edd7 7a05 	vldr	s15, [r7, #20]
 800c568:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c56c:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 800c570:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    }};
    return result;
 800c574:	f107 0440 	add.w	r4, r7, #64	; 0x40
 800c578:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c57c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c57e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800c582:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800c584:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c586:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c588:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c58a:	ee06 0a10 	vmov	s12, r0
 800c58e:	ee06 1a90 	vmov	s13, r1
 800c592:	ee07 2a10 	vmov	s14, r2
 800c596:	ee07 3a90 	vmov	s15, r3
#undef Q
#undef V
}
 800c59a:	eeb0 0a46 	vmov.f32	s0, s12
 800c59e:	eef0 0a66 	vmov.f32	s1, s13
 800c5a2:	eeb0 1a47 	vmov.f32	s2, s14
 800c5a6:	eef0 1a67 	vmov.f32	s3, s15
 800c5aa:	3750      	adds	r7, #80	; 0x50
 800c5ac:	46bd      	mov	sp, r7
 800c5ae:	bc90      	pop	{r4, r7}
 800c5b0:	4770      	bx	lr

0800c5b2 <FusionQuaternionNormalise>:
/**
 * @brief Returns the normalised quaternion.
 * @param quaternion Quaternion.
 * @return Normalised quaternion.
 */
static inline FusionQuaternion FusionQuaternionNormalise(const FusionQuaternion quaternion) {
 800c5b2:	b590      	push	{r4, r7, lr}
 800c5b4:	b093      	sub	sp, #76	; 0x4c
 800c5b6:	af00      	add	r7, sp, #0
 800c5b8:	eeb0 6a40 	vmov.f32	s12, s0
 800c5bc:	eef0 6a60 	vmov.f32	s13, s1
 800c5c0:	eeb0 7a41 	vmov.f32	s14, s2
 800c5c4:	eef0 7a61 	vmov.f32	s15, s3
 800c5c8:	ed87 6a04 	vstr	s12, [r7, #16]
 800c5cc:	edc7 6a05 	vstr	s13, [r7, #20]
 800c5d0:	ed87 7a06 	vstr	s14, [r7, #24]
 800c5d4:	edc7 7a07 	vstr	s15, [r7, #28]
#define Q quaternion.element
#ifdef FUSION_USE_NORMAL_SQRT
    const float magnitudeReciprocal = 1.0f / sqrtf(Q.w * Q.w + Q.x * Q.x + Q.y * Q.y + Q.z * Q.z);
#else
    const float magnitudeReciprocal = FusionFastInverseSqrt(Q.w * Q.w + Q.x * Q.x + Q.y * Q.y + Q.z * Q.z);
 800c5d8:	ed97 7a04 	vldr	s14, [r7, #16]
 800c5dc:	edd7 7a04 	vldr	s15, [r7, #16]
 800c5e0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c5e4:	edd7 6a05 	vldr	s13, [r7, #20]
 800c5e8:	edd7 7a05 	vldr	s15, [r7, #20]
 800c5ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c5f0:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c5f4:	edd7 6a06 	vldr	s13, [r7, #24]
 800c5f8:	edd7 7a06 	vldr	s15, [r7, #24]
 800c5fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c600:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c604:	edd7 6a07 	vldr	s13, [r7, #28]
 800c608:	edd7 7a07 	vldr	s15, [r7, #28]
 800c60c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c610:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c614:	eeb0 0a67 	vmov.f32	s0, s15
 800c618:	f7ff fc10 	bl	800be3c <FusionFastInverseSqrt>
 800c61c:	ed87 0a11 	vstr	s0, [r7, #68]	; 0x44
#endif
    const FusionQuaternion result = {.element = {
            .w = Q.w * magnitudeReciprocal,
 800c620:	ed97 7a04 	vldr	s14, [r7, #16]
 800c624:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800c628:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 800c62c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            .x = Q.x * magnitudeReciprocal,
 800c630:	ed97 7a05 	vldr	s14, [r7, #20]
 800c634:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800c638:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 800c63c:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = Q.y * magnitudeReciprocal,
 800c640:	ed97 7a06 	vldr	s14, [r7, #24]
 800c644:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800c648:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 800c64c:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = Q.z * magnitudeReciprocal,
 800c650:	ed97 7a07 	vldr	s14, [r7, #28]
 800c654:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800c658:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 800c65c:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    }};
    return result;
 800c660:	f107 0434 	add.w	r4, r7, #52	; 0x34
 800c664:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c668:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c66a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800c66e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800c670:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c672:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c674:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c676:	ee06 0a10 	vmov	s12, r0
 800c67a:	ee06 1a90 	vmov	s13, r1
 800c67e:	ee07 2a10 	vmov	s14, r2
 800c682:	ee07 3a90 	vmov	s15, r3
#undef Q
}
 800c686:	eeb0 0a46 	vmov.f32	s0, s12
 800c68a:	eef0 0a66 	vmov.f32	s1, s13
 800c68e:	eeb0 1a47 	vmov.f32	s2, s14
 800c692:	eef0 1a67 	vmov.f32	s3, s15
 800c696:	374c      	adds	r7, #76	; 0x4c
 800c698:	46bd      	mov	sp, r7
 800c69a:	bd90      	pop	{r4, r7, pc}

0800c69c <FusionAhrsInitialise>:

/**
 * @brief Initialises the AHRS algorithm structure.
 * @param ahrs AHRS algorithm structure.
 */
void FusionAhrsInitialise(FusionAhrs *const ahrs) {
 800c69c:	b5b0      	push	{r4, r5, r7, lr}
 800c69e:	b088      	sub	sp, #32
 800c6a0:	af00      	add	r7, sp, #0
 800c6a2:	6078      	str	r0, [r7, #4]
    const FusionAhrsSettings settings = {
 800c6a4:	4b0b      	ldr	r3, [pc, #44]	; (800c6d4 <FusionAhrsInitialise+0x38>)
 800c6a6:	f107 0408 	add.w	r4, r7, #8
 800c6aa:	461d      	mov	r5, r3
 800c6ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c6ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c6b0:	e895 0003 	ldmia.w	r5, {r0, r1}
 800c6b4:	e884 0003 	stmia.w	r4, {r0, r1}
            .gyroscopeRange = 0.0f,
            .accelerationRejection = 90.0f,
            .magneticRejection = 90.0f,
            .recoveryTriggerPeriod = 0,
    };
    FusionAhrsSetSettings(ahrs, &settings);
 800c6b8:	f107 0308 	add.w	r3, r7, #8
 800c6bc:	4619      	mov	r1, r3
 800c6be:	6878      	ldr	r0, [r7, #4]
 800c6c0:	f000 f86e 	bl	800c7a0 <FusionAhrsSetSettings>
    FusionAhrsReset(ahrs);
 800c6c4:	6878      	ldr	r0, [r7, #4]
 800c6c6:	f000 f807 	bl	800c6d8 <FusionAhrsReset>
}
 800c6ca:	bf00      	nop
 800c6cc:	3720      	adds	r7, #32
 800c6ce:	46bd      	mov	sp, r7
 800c6d0:	bdb0      	pop	{r4, r5, r7, pc}
 800c6d2:	bf00      	nop
 800c6d4:	08013ea4 	.word	0x08013ea4

0800c6d8 <FusionAhrsReset>:
/**
 * @brief Resets the AHRS algorithm.  This is equivalent to reinitialising the
 * algorithm while maintaining the current settings.
 * @param ahrs AHRS algorithm structure.
 */
void FusionAhrsReset(FusionAhrs *const ahrs) {
 800c6d8:	b480      	push	{r7}
 800c6da:	b091      	sub	sp, #68	; 0x44
 800c6dc:	af00      	add	r7, sp, #0
 800c6de:	6078      	str	r0, [r7, #4]
    ahrs->quaternion = FUSION_IDENTITY_QUATERNION;
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800c6e6:	619a      	str	r2, [r3, #24]
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	f04f 0200 	mov.w	r2, #0
 800c6ee:	61da      	str	r2, [r3, #28]
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	f04f 0200 	mov.w	r2, #0
 800c6f6:	621a      	str	r2, [r3, #32]
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	f04f 0200 	mov.w	r2, #0
 800c6fe:	625a      	str	r2, [r3, #36]	; 0x24
    ahrs->accelerometer = FUSION_VECTOR_ZERO;
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	f04f 0200 	mov.w	r2, #0
 800c706:	629a      	str	r2, [r3, #40]	; 0x28
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	f04f 0200 	mov.w	r2, #0
 800c70e:	62da      	str	r2, [r3, #44]	; 0x2c
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	f04f 0200 	mov.w	r2, #0
 800c716:	631a      	str	r2, [r3, #48]	; 0x30
    ahrs->initialising = true;
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	2201      	movs	r2, #1
 800c71c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    ahrs->rampedGain = INITIAL_GAIN;
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	4a1e      	ldr	r2, [pc, #120]	; (800c79c <FusionAhrsReset+0xc4>)
 800c724:	639a      	str	r2, [r3, #56]	; 0x38
    ahrs->angularRateRecovery = false;
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	2200      	movs	r2, #0
 800c72a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    ahrs->halfAccelerometerFeedback = FUSION_VECTOR_ZERO;
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	f04f 0200 	mov.w	r2, #0
 800c734:	645a      	str	r2, [r3, #68]	; 0x44
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	f04f 0200 	mov.w	r2, #0
 800c73c:	649a      	str	r2, [r3, #72]	; 0x48
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	f04f 0200 	mov.w	r2, #0
 800c744:	64da      	str	r2, [r3, #76]	; 0x4c
    ahrs->halfMagnetometerFeedback = FUSION_VECTOR_ZERO;
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	f04f 0200 	mov.w	r2, #0
 800c74c:	651a      	str	r2, [r3, #80]	; 0x50
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	f04f 0200 	mov.w	r2, #0
 800c754:	655a      	str	r2, [r3, #84]	; 0x54
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	f04f 0200 	mov.w	r2, #0
 800c75c:	659a      	str	r2, [r3, #88]	; 0x58
    ahrs->accelerometerIgnored = false;
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	2200      	movs	r2, #0
 800c762:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
    ahrs->accelerationRecoveryTrigger = 0;
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	2200      	movs	r2, #0
 800c76a:	661a      	str	r2, [r3, #96]	; 0x60
    ahrs->accelerationRecoveryTimeout = ahrs->settings.recoveryTriggerPeriod;
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	695b      	ldr	r3, [r3, #20]
 800c770:	461a      	mov	r2, r3
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	665a      	str	r2, [r3, #100]	; 0x64
    ahrs->magnetometerIgnored = false;
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	2200      	movs	r2, #0
 800c77a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    ahrs->magneticRecoveryTrigger = 0;
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	2200      	movs	r2, #0
 800c782:	66da      	str	r2, [r3, #108]	; 0x6c
    ahrs->magneticRecoveryTimeout = ahrs->settings.recoveryTriggerPeriod;
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	695b      	ldr	r3, [r3, #20]
 800c788:	461a      	mov	r2, r3
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	671a      	str	r2, [r3, #112]	; 0x70
}
 800c78e:	bf00      	nop
 800c790:	3744      	adds	r7, #68	; 0x44
 800c792:	46bd      	mov	sp, r7
 800c794:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c798:	4770      	bx	lr
 800c79a:	bf00      	nop
 800c79c:	41200000 	.word	0x41200000

0800c7a0 <FusionAhrsSetSettings>:
/**
 * @brief Sets the AHRS algorithm settings.
 * @param ahrs AHRS algorithm structure.
 * @param settings Settings.
 */
void FusionAhrsSetSettings(FusionAhrs *const ahrs, const FusionAhrsSettings *const settings) {
 800c7a0:	b580      	push	{r7, lr}
 800c7a2:	b082      	sub	sp, #8
 800c7a4:	af00      	add	r7, sp, #0
 800c7a6:	6078      	str	r0, [r7, #4]
 800c7a8:	6039      	str	r1, [r7, #0]
    ahrs->settings.convention = settings->convention;
 800c7aa:	683b      	ldr	r3, [r7, #0]
 800c7ac:	781a      	ldrb	r2, [r3, #0]
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	701a      	strb	r2, [r3, #0]
    ahrs->settings.gain = settings->gain;
 800c7b2:	683b      	ldr	r3, [r7, #0]
 800c7b4:	685a      	ldr	r2, [r3, #4]
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	605a      	str	r2, [r3, #4]
    ahrs->settings.gyroscopeRange = settings->gyroscopeRange == 0.0f ? FLT_MAX : 0.98f * settings->gyroscopeRange;
 800c7ba:	683b      	ldr	r3, [r7, #0]
 800c7bc:	edd3 7a02 	vldr	s15, [r3, #8]
 800c7c0:	eef5 7a40 	vcmp.f32	s15, #0.0
 800c7c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c7c8:	d007      	beq.n	800c7da <FusionAhrsSetSettings+0x3a>
 800c7ca:	683b      	ldr	r3, [r7, #0]
 800c7cc:	edd3 7a02 	vldr	s15, [r3, #8]
 800c7d0:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 800c904 <FusionAhrsSetSettings+0x164>
 800c7d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c7d8:	e001      	b.n	800c7de <FusionAhrsSetSettings+0x3e>
 800c7da:	eddf 7a4b 	vldr	s15, [pc, #300]	; 800c908 <FusionAhrsSetSettings+0x168>
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	edc3 7a02 	vstr	s15, [r3, #8]
    ahrs->settings.accelerationRejection = settings->accelerationRejection == 0.0f ? FLT_MAX : powf(0.5f * sinf(FusionDegreesToRadians(settings->accelerationRejection)), 2);
 800c7e4:	683b      	ldr	r3, [r7, #0]
 800c7e6:	edd3 7a03 	vldr	s15, [r3, #12]
 800c7ea:	eef5 7a40 	vcmp.f32	s15, #0.0
 800c7ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c7f2:	d01b      	beq.n	800c82c <FusionAhrsSetSettings+0x8c>
 800c7f4:	683b      	ldr	r3, [r7, #0]
 800c7f6:	edd3 7a03 	vldr	s15, [r3, #12]
 800c7fa:	eeb0 0a67 	vmov.f32	s0, s15
 800c7fe:	f7ff fb09 	bl	800be14 <FusionDegreesToRadians>
 800c802:	eef0 7a40 	vmov.f32	s15, s0
 800c806:	eeb0 0a67 	vmov.f32	s0, s15
 800c80a:	f005 f84b 	bl	80118a4 <sinf>
 800c80e:	eef0 7a40 	vmov.f32	s15, s0
 800c812:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800c816:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c81a:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 800c81e:	eeb0 0a67 	vmov.f32	s0, s15
 800c822:	f005 f923 	bl	8011a6c <powf>
 800c826:	eef0 7a40 	vmov.f32	s15, s0
 800c82a:	e001      	b.n	800c830 <FusionAhrsSetSettings+0x90>
 800c82c:	eddf 7a36 	vldr	s15, [pc, #216]	; 800c908 <FusionAhrsSetSettings+0x168>
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	edc3 7a03 	vstr	s15, [r3, #12]
    ahrs->settings.magneticRejection = settings->magneticRejection == 0.0f ? FLT_MAX : powf(0.5f * sinf(FusionDegreesToRadians(settings->magneticRejection)), 2);
 800c836:	683b      	ldr	r3, [r7, #0]
 800c838:	edd3 7a04 	vldr	s15, [r3, #16]
 800c83c:	eef5 7a40 	vcmp.f32	s15, #0.0
 800c840:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c844:	d01b      	beq.n	800c87e <FusionAhrsSetSettings+0xde>
 800c846:	683b      	ldr	r3, [r7, #0]
 800c848:	edd3 7a04 	vldr	s15, [r3, #16]
 800c84c:	eeb0 0a67 	vmov.f32	s0, s15
 800c850:	f7ff fae0 	bl	800be14 <FusionDegreesToRadians>
 800c854:	eef0 7a40 	vmov.f32	s15, s0
 800c858:	eeb0 0a67 	vmov.f32	s0, s15
 800c85c:	f005 f822 	bl	80118a4 <sinf>
 800c860:	eef0 7a40 	vmov.f32	s15, s0
 800c864:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800c868:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c86c:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 800c870:	eeb0 0a67 	vmov.f32	s0, s15
 800c874:	f005 f8fa 	bl	8011a6c <powf>
 800c878:	eef0 7a40 	vmov.f32	s15, s0
 800c87c:	e001      	b.n	800c882 <FusionAhrsSetSettings+0xe2>
 800c87e:	eddf 7a22 	vldr	s15, [pc, #136]	; 800c908 <FusionAhrsSetSettings+0x168>
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	edc3 7a04 	vstr	s15, [r3, #16]
    ahrs->settings.recoveryTriggerPeriod = settings->recoveryTriggerPeriod;
 800c888:	683b      	ldr	r3, [r7, #0]
 800c88a:	695a      	ldr	r2, [r3, #20]
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	615a      	str	r2, [r3, #20]
    ahrs->accelerationRecoveryTimeout = ahrs->settings.recoveryTriggerPeriod;
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	695b      	ldr	r3, [r3, #20]
 800c894:	461a      	mov	r2, r3
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	665a      	str	r2, [r3, #100]	; 0x64
    ahrs->magneticRecoveryTimeout = ahrs->settings.recoveryTriggerPeriod;
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	695b      	ldr	r3, [r3, #20]
 800c89e:	461a      	mov	r2, r3
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	671a      	str	r2, [r3, #112]	; 0x70
    if ((settings->gain == 0.0f) || (settings->recoveryTriggerPeriod == 0)) { // disable acceleration and magnetic rejection features if gain is zero
 800c8a4:	683b      	ldr	r3, [r7, #0]
 800c8a6:	edd3 7a01 	vldr	s15, [r3, #4]
 800c8aa:	eef5 7a40 	vcmp.f32	s15, #0.0
 800c8ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c8b2:	d003      	beq.n	800c8bc <FusionAhrsSetSettings+0x11c>
 800c8b4:	683b      	ldr	r3, [r7, #0]
 800c8b6:	695b      	ldr	r3, [r3, #20]
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	d105      	bne.n	800c8c8 <FusionAhrsSetSettings+0x128>
        ahrs->settings.accelerationRejection = FLT_MAX;
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	4a13      	ldr	r2, [pc, #76]	; (800c90c <FusionAhrsSetSettings+0x16c>)
 800c8c0:	60da      	str	r2, [r3, #12]
        ahrs->settings.magneticRejection = FLT_MAX;
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	4a11      	ldr	r2, [pc, #68]	; (800c90c <FusionAhrsSetSettings+0x16c>)
 800c8c6:	611a      	str	r2, [r3, #16]
    }
    if (ahrs->initialising == false) {
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c8ce:	f083 0301 	eor.w	r3, r3, #1
 800c8d2:	b2db      	uxtb	r3, r3
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d003      	beq.n	800c8e0 <FusionAhrsSetSettings+0x140>
        ahrs->rampedGain = ahrs->settings.gain;
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	685a      	ldr	r2, [r3, #4]
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	639a      	str	r2, [r3, #56]	; 0x38
    }
    ahrs->rampedGainStep = (INITIAL_GAIN - ahrs->settings.gain) / INITIALISATION_PERIOD;
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	edd3 7a01 	vldr	s15, [r3, #4]
 800c8e6:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800c8ea:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c8ee:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 800c8f2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
}
 800c8fc:	bf00      	nop
 800c8fe:	3708      	adds	r7, #8
 800c900:	46bd      	mov	sp, r7
 800c902:	bd80      	pop	{r7, pc}
 800c904:	3f7ae148 	.word	0x3f7ae148
 800c908:	7f7fffff 	.word	0x7f7fffff
 800c90c:	7f7fffff 	.word	0x7f7fffff

0800c910 <FusionAhrsUpdate>:
 * @param gyroscope Gyroscope measurement in degrees per second.
 * @param accelerometer Accelerometer measurement in g.
 * @param magnetometer Magnetometer measurement in arbitrary units.
 * @param deltaTime Delta time in seconds.
 */
void FusionAhrsUpdate(FusionAhrs *const ahrs, const FusionVector gyroscope, const FusionVector accelerometer, const FusionVector magnetometer, const float deltaTime) {
 800c910:	b590      	push	{r4, r7, lr}
 800c912:	b0bf      	sub	sp, #252	; 0xfc
 800c914:	af00      	add	r7, sp, #0
 800c916:	62f8      	str	r0, [r7, #44]	; 0x2c
 800c918:	eeb0 5a61 	vmov.f32	s10, s3
 800c91c:	eef0 5a42 	vmov.f32	s11, s4
 800c920:	eeb0 6a62 	vmov.f32	s12, s5
 800c924:	eef0 6a43 	vmov.f32	s13, s6
 800c928:	eeb0 7a63 	vmov.f32	s14, s7
 800c92c:	eef0 7a44 	vmov.f32	s15, s8
 800c930:	edc7 4a01 	vstr	s9, [r7, #4]
 800c934:	ed87 0a08 	vstr	s0, [r7, #32]
 800c938:	edc7 0a09 	vstr	s1, [r7, #36]	; 0x24
 800c93c:	ed87 1a0a 	vstr	s2, [r7, #40]	; 0x28
 800c940:	ed87 5a05 	vstr	s10, [r7, #20]
 800c944:	edc7 5a06 	vstr	s11, [r7, #24]
 800c948:	ed87 6a07 	vstr	s12, [r7, #28]
 800c94c:	edc7 6a02 	vstr	s13, [r7, #8]
 800c950:	ed87 7a03 	vstr	s14, [r7, #12]
 800c954:	edc7 7a04 	vstr	s15, [r7, #16]
#define Q ahrs->quaternion.element

    // Store accelerometer
    ahrs->accelerometer = accelerometer;
 800c958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c95a:	3328      	adds	r3, #40	; 0x28
 800c95c:	f107 0214 	add.w	r2, r7, #20
 800c960:	ca07      	ldmia	r2, {r0, r1, r2}
 800c962:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    // Reinitialise if gyroscope range exceeded
    if ((fabs(gyroscope.axis.x) > ahrs->settings.gyroscopeRange) || (fabs(gyroscope.axis.y) > ahrs->settings.gyroscopeRange) || (fabs(gyroscope.axis.z) > ahrs->settings.gyroscopeRange)) {
 800c966:	edd7 7a08 	vldr	s15, [r7, #32]
 800c96a:	eeb0 7ae7 	vabs.f32	s14, s15
 800c96e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c970:	edd3 7a02 	vldr	s15, [r3, #8]
 800c974:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c978:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c97c:	dc17      	bgt.n	800c9ae <FusionAhrsUpdate+0x9e>
 800c97e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800c982:	eeb0 7ae7 	vabs.f32	s14, s15
 800c986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c988:	edd3 7a02 	vldr	s15, [r3, #8]
 800c98c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c990:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c994:	dc0b      	bgt.n	800c9ae <FusionAhrsUpdate+0x9e>
 800c996:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c99a:	eeb0 7ae7 	vabs.f32	s14, s15
 800c99e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9a0:	edd3 7a02 	vldr	s15, [r3, #8]
 800c9a4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c9a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c9ac:	dd15      	ble.n	800c9da <FusionAhrsUpdate+0xca>
        const FusionQuaternion quaternion = ahrs->quaternion;
 800c9ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9b0:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 800c9b4:	3318      	adds	r3, #24
 800c9b6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c9b8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        FusionAhrsReset(ahrs);
 800c9bc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c9be:	f7ff fe8b 	bl	800c6d8 <FusionAhrsReset>
        ahrs->quaternion = quaternion;
 800c9c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9c4:	f103 0418 	add.w	r4, r3, #24
 800c9c8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800c9cc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c9ce:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        ahrs->angularRateRecovery = true;
 800c9d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9d4:	2201      	movs	r2, #1
 800c9d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    }

    // Ramp down gain during initialisation
    if (ahrs->initialising == true) {
 800c9da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9dc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d02d      	beq.n	800ca40 <FusionAhrsUpdate+0x130>
        ahrs->rampedGain -= ahrs->rampedGainStep * deltaTime;
 800c9e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9e6:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 800c9ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9ec:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 800c9f0:	edd7 7a01 	vldr	s15, [r7, #4]
 800c9f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c9f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c9fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9fe:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
        if ((ahrs->rampedGain < ahrs->settings.gain) || (ahrs->settings.gain == 0.0f)) {
 800ca02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca04:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 800ca08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca0a:	edd3 7a01 	vldr	s15, [r3, #4]
 800ca0e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ca12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca16:	d407      	bmi.n	800ca28 <FusionAhrsUpdate+0x118>
 800ca18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca1a:	edd3 7a01 	vldr	s15, [r3, #4]
 800ca1e:	eef5 7a40 	vcmp.f32	s15, #0.0
 800ca22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca26:	d10b      	bne.n	800ca40 <FusionAhrsUpdate+0x130>
            ahrs->rampedGain = ahrs->settings.gain;
 800ca28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca2a:	685a      	ldr	r2, [r3, #4]
 800ca2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca2e:	639a      	str	r2, [r3, #56]	; 0x38
            ahrs->initialising = false;
 800ca30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca32:	2200      	movs	r2, #0
 800ca34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
            ahrs->angularRateRecovery = false;
 800ca38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca3a:	2200      	movs	r2, #0
 800ca3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        }
    }

    // Calculate direction of gravity indicated by algorithm
    const FusionVector halfGravity = HalfGravity(ahrs);
 800ca40:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ca42:	f000 faf4 	bl	800d02e <HalfGravity>
 800ca46:	eef0 6a40 	vmov.f32	s13, s0
 800ca4a:	eeb0 7a60 	vmov.f32	s14, s1
 800ca4e:	eef0 7a41 	vmov.f32	s15, s2
 800ca52:	edc7 6a25 	vstr	s13, [r7, #148]	; 0x94
 800ca56:	ed87 7a26 	vstr	s14, [r7, #152]	; 0x98
 800ca5a:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c

    // Calculate accelerometer feedback
    FusionVector halfAccelerometerFeedback = FUSION_VECTOR_ZERO;
 800ca5e:	f04f 0300 	mov.w	r3, #0
 800ca62:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800ca66:	f04f 0300 	mov.w	r3, #0
 800ca6a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800ca6e:	f04f 0300 	mov.w	r3, #0
 800ca72:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    ahrs->accelerometerIgnored = true;
 800ca76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca78:	2201      	movs	r2, #1
 800ca7a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
    if (FusionVectorIsZero(accelerometer) == false) {
 800ca7e:	edd7 6a05 	vldr	s13, [r7, #20]
 800ca82:	ed97 7a06 	vldr	s14, [r7, #24]
 800ca86:	edd7 7a07 	vldr	s15, [r7, #28]
 800ca8a:	eeb0 0a66 	vmov.f32	s0, s13
 800ca8e:	eef0 0a47 	vmov.f32	s1, s14
 800ca92:	eeb0 1a67 	vmov.f32	s2, s15
 800ca96:	f7ff fa01 	bl	800be9c <FusionVectorIsZero>
 800ca9a:	4603      	mov	r3, r0
 800ca9c:	f083 0301 	eor.w	r3, r3, #1
 800caa0:	b2db      	uxtb	r3, r3
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	f000 809c 	beq.w	800cbe0 <FusionAhrsUpdate+0x2d0>

        // Calculate accelerometer feedback scaled by 0.5
        ahrs->halfAccelerometerFeedback = Feedback(FusionVectorNormalise(accelerometer), halfGravity);
 800caa8:	edd7 6a05 	vldr	s13, [r7, #20]
 800caac:	ed97 7a06 	vldr	s14, [r7, #24]
 800cab0:	edd7 7a07 	vldr	s15, [r7, #28]
 800cab4:	eeb0 0a66 	vmov.f32	s0, s13
 800cab8:	eef0 0a47 	vmov.f32	s1, s14
 800cabc:	eeb0 1a67 	vmov.f32	s2, s15
 800cac0:	f7ff fc22 	bl	800c308 <FusionVectorNormalise>
 800cac4:	eef0 6a40 	vmov.f32	s13, s0
 800cac8:	eeb0 7a60 	vmov.f32	s14, s1
 800cacc:	eef0 7a41 	vmov.f32	s15, s2
 800cad0:	edc7 6a28 	vstr	s13, [r7, #160]	; 0xa0
 800cad4:	ed87 7a29 	vstr	s14, [r7, #164]	; 0xa4
 800cad8:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
 800cadc:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 800cade:	ed97 5a25 	vldr	s10, [r7, #148]	; 0x94
 800cae2:	edd7 5a26 	vldr	s11, [r7, #152]	; 0x98
 800cae6:	ed97 6a27 	vldr	s12, [r7, #156]	; 0x9c
 800caea:	edd7 6a28 	vldr	s13, [r7, #160]	; 0xa0
 800caee:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 800caf2:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800caf6:	eef0 1a45 	vmov.f32	s3, s10
 800cafa:	eeb0 2a65 	vmov.f32	s4, s11
 800cafe:	eef0 2a46 	vmov.f32	s5, s12
 800cb02:	eeb0 0a66 	vmov.f32	s0, s13
 800cb06:	eef0 0a47 	vmov.f32	s1, s14
 800cb0a:	eeb0 1a67 	vmov.f32	s2, s15
 800cb0e:	f000 fc55 	bl	800d3bc <Feedback>
 800cb12:	eef0 6a40 	vmov.f32	s13, s0
 800cb16:	eeb0 7a60 	vmov.f32	s14, s1
 800cb1a:	eef0 7a41 	vmov.f32	s15, s2
 800cb1e:	edc4 6a11 	vstr	s13, [r4, #68]	; 0x44
 800cb22:	ed84 7a12 	vstr	s14, [r4, #72]	; 0x48
 800cb26:	edc4 7a13 	vstr	s15, [r4, #76]	; 0x4c

        // Don't ignore accelerometer if acceleration error below threshold
        if ((ahrs->initialising == true) || ((FusionVectorMagnitudeSquared(ahrs->halfAccelerometerFeedback) <= ahrs->settings.accelerationRejection))) {
 800cb2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb2c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d118      	bne.n	800cb66 <FusionAhrsUpdate+0x256>
 800cb34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb36:	edd3 6a11 	vldr	s13, [r3, #68]	; 0x44
 800cb3a:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 800cb3e:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 800cb42:	eeb0 0a66 	vmov.f32	s0, s13
 800cb46:	eef0 0a47 	vmov.f32	s1, s14
 800cb4a:	eeb0 1a67 	vmov.f32	s2, s15
 800cb4e:	f7ff fb91 	bl	800c274 <FusionVectorMagnitudeSquared>
 800cb52:	eeb0 7a40 	vmov.f32	s14, s0
 800cb56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb58:	edd3 7a03 	vldr	s15, [r3, #12]
 800cb5c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800cb60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb64:	d80a      	bhi.n	800cb7c <FusionAhrsUpdate+0x26c>
            ahrs->accelerometerIgnored = false;
 800cb66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb68:	2200      	movs	r2, #0
 800cb6a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
            ahrs->accelerationRecoveryTrigger -= 9;
 800cb6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cb72:	f1a3 0209 	sub.w	r2, r3, #9
 800cb76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb78:	661a      	str	r2, [r3, #96]	; 0x60
 800cb7a:	e004      	b.n	800cb86 <FusionAhrsUpdate+0x276>
        } else {
            ahrs->accelerationRecoveryTrigger += 1;
 800cb7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cb80:	1c5a      	adds	r2, r3, #1
 800cb82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb84:	661a      	str	r2, [r3, #96]	; 0x60
        }

        // Don't ignore accelerometer during acceleration recovery
        if (ahrs->accelerationRecoveryTrigger > ahrs->accelerationRecoveryTimeout) {
 800cb86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb88:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800cb8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb8c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cb8e:	429a      	cmp	r2, r3
 800cb90:	dd07      	ble.n	800cba2 <FusionAhrsUpdate+0x292>
            ahrs->accelerationRecoveryTimeout = 0;
 800cb92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb94:	2200      	movs	r2, #0
 800cb96:	665a      	str	r2, [r3, #100]	; 0x64
            ahrs->accelerometerIgnored = false;
 800cb98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb9a:	2200      	movs	r2, #0
 800cb9c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 800cba0:	e004      	b.n	800cbac <FusionAhrsUpdate+0x29c>
        } else {
            ahrs->accelerationRecoveryTimeout = ahrs->settings.recoveryTriggerPeriod;
 800cba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cba4:	695b      	ldr	r3, [r3, #20]
 800cba6:	461a      	mov	r2, r3
 800cba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbaa:	665a      	str	r2, [r3, #100]	; 0x64
        }
        ahrs->accelerationRecoveryTrigger = Clamp(ahrs->accelerationRecoveryTrigger, 0, ahrs->settings.recoveryTriggerPeriod);
 800cbac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbae:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800cbb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbb2:	695b      	ldr	r3, [r3, #20]
 800cbb4:	461a      	mov	r2, r3
 800cbb6:	2100      	movs	r1, #0
 800cbb8:	f000 fcb5 	bl	800d526 <Clamp>
 800cbbc:	4602      	mov	r2, r0
 800cbbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbc0:	661a      	str	r2, [r3, #96]	; 0x60

        // Apply accelerometer feedback
        if (ahrs->accelerometerIgnored == false) {
 800cbc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbc4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800cbc8:	f083 0301 	eor.w	r3, r3, #1
 800cbcc:	b2db      	uxtb	r3, r3
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d006      	beq.n	800cbe0 <FusionAhrsUpdate+0x2d0>
            halfAccelerometerFeedback = ahrs->halfAccelerometerFeedback;
 800cbd2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cbd4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800cbd8:	3244      	adds	r2, #68	; 0x44
 800cbda:	ca07      	ldmia	r2, {r0, r1, r2}
 800cbdc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        }
    }

    // Calculate magnetometer feedback
    FusionVector halfMagnetometerFeedback = FUSION_VECTOR_ZERO;
 800cbe0:	f04f 0300 	mov.w	r3, #0
 800cbe4:	673b      	str	r3, [r7, #112]	; 0x70
 800cbe6:	f04f 0300 	mov.w	r3, #0
 800cbea:	677b      	str	r3, [r7, #116]	; 0x74
 800cbec:	f04f 0300 	mov.w	r3, #0
 800cbf0:	67bb      	str	r3, [r7, #120]	; 0x78
    ahrs->magnetometerIgnored = false;
 800cbf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbf4:	2200      	movs	r2, #0
 800cbf6:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    if (FusionVectorIsZero(magnetometer) == false) {
 800cbfa:	edd7 6a02 	vldr	s13, [r7, #8]
 800cbfe:	ed97 7a03 	vldr	s14, [r7, #12]
 800cc02:	edd7 7a04 	vldr	s15, [r7, #16]
 800cc06:	eeb0 0a66 	vmov.f32	s0, s13
 800cc0a:	eef0 0a47 	vmov.f32	s1, s14
 800cc0e:	eeb0 1a67 	vmov.f32	s2, s15
 800cc12:	f7ff f943 	bl	800be9c <FusionVectorIsZero>
 800cc16:	4603      	mov	r3, r0
 800cc18:	f083 0301 	eor.w	r3, r3, #1
 800cc1c:	b2db      	uxtb	r3, r3
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	f000 80d1 	beq.w	800cdc6 <FusionAhrsUpdate+0x4b6>

        // Calculate direction of magnetic field indicated by algorithm
        const FusionVector halfMagnetic = HalfMagnetic(ahrs);
 800cc24:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cc26:	f000 fabf 	bl	800d1a8 <HalfMagnetic>
 800cc2a:	eef0 6a40 	vmov.f32	s13, s0
 800cc2e:	eeb0 7a60 	vmov.f32	s14, s1
 800cc32:	eef0 7a41 	vmov.f32	s15, s2
 800cc36:	edc7 6a0c 	vstr	s13, [r7, #48]	; 0x30
 800cc3a:	ed87 7a0d 	vstr	s14, [r7, #52]	; 0x34
 800cc3e:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38

        // Calculate magnetometer feedback scaled by 0.5
        ahrs->halfMagnetometerFeedback = Feedback(FusionVectorNormalise(FusionVectorCrossProduct(halfGravity, magnetometer)), halfMagnetic);
 800cc42:	ed97 5a02 	vldr	s10, [r7, #8]
 800cc46:	edd7 5a03 	vldr	s11, [r7, #12]
 800cc4a:	ed97 6a04 	vldr	s12, [r7, #16]
 800cc4e:	edd7 6a25 	vldr	s13, [r7, #148]	; 0x94
 800cc52:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800cc56:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800cc5a:	eef0 1a45 	vmov.f32	s3, s10
 800cc5e:	eeb0 2a65 	vmov.f32	s4, s11
 800cc62:	eef0 2a46 	vmov.f32	s5, s12
 800cc66:	eeb0 0a66 	vmov.f32	s0, s13
 800cc6a:	eef0 0a47 	vmov.f32	s1, s14
 800cc6e:	eeb0 1a67 	vmov.f32	s2, s15
 800cc72:	f7ff fa43 	bl	800c0fc <FusionVectorCrossProduct>
 800cc76:	eef0 6a40 	vmov.f32	s13, s0
 800cc7a:	eeb0 7a60 	vmov.f32	s14, s1
 800cc7e:	eef0 7a41 	vmov.f32	s15, s2
 800cc82:	edc7 6a2b 	vstr	s13, [r7, #172]	; 0xac
 800cc86:	ed87 7a2c 	vstr	s14, [r7, #176]	; 0xb0
 800cc8a:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
 800cc8e:	edd7 6a2b 	vldr	s13, [r7, #172]	; 0xac
 800cc92:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 800cc96:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 800cc9a:	eeb0 0a66 	vmov.f32	s0, s13
 800cc9e:	eef0 0a47 	vmov.f32	s1, s14
 800cca2:	eeb0 1a67 	vmov.f32	s2, s15
 800cca6:	f7ff fb2f 	bl	800c308 <FusionVectorNormalise>
 800ccaa:	eef0 6a40 	vmov.f32	s13, s0
 800ccae:	eeb0 7a60 	vmov.f32	s14, s1
 800ccb2:	eef0 7a41 	vmov.f32	s15, s2
 800ccb6:	edc7 6a2e 	vstr	s13, [r7, #184]	; 0xb8
 800ccba:	ed87 7a2f 	vstr	s14, [r7, #188]	; 0xbc
 800ccbe:	edc7 7a30 	vstr	s15, [r7, #192]	; 0xc0
 800ccc2:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 800ccc4:	ed97 5a0c 	vldr	s10, [r7, #48]	; 0x30
 800ccc8:	edd7 5a0d 	vldr	s11, [r7, #52]	; 0x34
 800cccc:	ed97 6a0e 	vldr	s12, [r7, #56]	; 0x38
 800ccd0:	edd7 6a2e 	vldr	s13, [r7, #184]	; 0xb8
 800ccd4:	ed97 7a2f 	vldr	s14, [r7, #188]	; 0xbc
 800ccd8:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 800ccdc:	eef0 1a45 	vmov.f32	s3, s10
 800cce0:	eeb0 2a65 	vmov.f32	s4, s11
 800cce4:	eef0 2a46 	vmov.f32	s5, s12
 800cce8:	eeb0 0a66 	vmov.f32	s0, s13
 800ccec:	eef0 0a47 	vmov.f32	s1, s14
 800ccf0:	eeb0 1a67 	vmov.f32	s2, s15
 800ccf4:	f000 fb62 	bl	800d3bc <Feedback>
 800ccf8:	eef0 6a40 	vmov.f32	s13, s0
 800ccfc:	eeb0 7a60 	vmov.f32	s14, s1
 800cd00:	eef0 7a41 	vmov.f32	s15, s2
 800cd04:	edc4 6a14 	vstr	s13, [r4, #80]	; 0x50
 800cd08:	ed84 7a15 	vstr	s14, [r4, #84]	; 0x54
 800cd0c:	edc4 7a16 	vstr	s15, [r4, #88]	; 0x58

        // Don't ignore magnetometer if magnetic error below threshold
        if ((ahrs->initialising == true) || ((FusionVectorMagnitudeSquared(ahrs->halfMagnetometerFeedback) <= ahrs->settings.magneticRejection))) {
 800cd10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd12:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d118      	bne.n	800cd4c <FusionAhrsUpdate+0x43c>
 800cd1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd1c:	edd3 6a14 	vldr	s13, [r3, #80]	; 0x50
 800cd20:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 800cd24:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800cd28:	eeb0 0a66 	vmov.f32	s0, s13
 800cd2c:	eef0 0a47 	vmov.f32	s1, s14
 800cd30:	eeb0 1a67 	vmov.f32	s2, s15
 800cd34:	f7ff fa9e 	bl	800c274 <FusionVectorMagnitudeSquared>
 800cd38:	eeb0 7a40 	vmov.f32	s14, s0
 800cd3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd3e:	edd3 7a04 	vldr	s15, [r3, #16]
 800cd42:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800cd46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd4a:	d80a      	bhi.n	800cd62 <FusionAhrsUpdate+0x452>
            ahrs->magnetometerIgnored = false;
 800cd4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd4e:	2200      	movs	r2, #0
 800cd50:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
            ahrs->magneticRecoveryTrigger -= 9;
 800cd54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cd58:	f1a3 0209 	sub.w	r2, r3, #9
 800cd5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd5e:	66da      	str	r2, [r3, #108]	; 0x6c
 800cd60:	e004      	b.n	800cd6c <FusionAhrsUpdate+0x45c>
        } else {
            ahrs->magneticRecoveryTrigger += 1;
 800cd62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cd66:	1c5a      	adds	r2, r3, #1
 800cd68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd6a:	66da      	str	r2, [r3, #108]	; 0x6c
        }

        // Don't ignore magnetometer during magnetic recovery
        if (ahrs->magneticRecoveryTrigger > ahrs->magneticRecoveryTimeout) {
 800cd6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd6e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800cd70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cd74:	429a      	cmp	r2, r3
 800cd76:	dd07      	ble.n	800cd88 <FusionAhrsUpdate+0x478>
            ahrs->magneticRecoveryTimeout = 0;
 800cd78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd7a:	2200      	movs	r2, #0
 800cd7c:	671a      	str	r2, [r3, #112]	; 0x70
            ahrs->magnetometerIgnored = false;
 800cd7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd80:	2200      	movs	r2, #0
 800cd82:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 800cd86:	e004      	b.n	800cd92 <FusionAhrsUpdate+0x482>
        } else {
            ahrs->magneticRecoveryTimeout = ahrs->settings.recoveryTriggerPeriod;
 800cd88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd8a:	695b      	ldr	r3, [r3, #20]
 800cd8c:	461a      	mov	r2, r3
 800cd8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd90:	671a      	str	r2, [r3, #112]	; 0x70
        }
        ahrs->magneticRecoveryTrigger = Clamp(ahrs->magneticRecoveryTrigger, 0, ahrs->settings.recoveryTriggerPeriod);
 800cd92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd94:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800cd96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd98:	695b      	ldr	r3, [r3, #20]
 800cd9a:	461a      	mov	r2, r3
 800cd9c:	2100      	movs	r1, #0
 800cd9e:	f000 fbc2 	bl	800d526 <Clamp>
 800cda2:	4602      	mov	r2, r0
 800cda4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cda6:	66da      	str	r2, [r3, #108]	; 0x6c

        // Apply magnetometer feedback
        if (ahrs->magnetometerIgnored == false) {
 800cda8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdaa:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800cdae:	f083 0301 	eor.w	r3, r3, #1
 800cdb2:	b2db      	uxtb	r3, r3
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	d006      	beq.n	800cdc6 <FusionAhrsUpdate+0x4b6>
            halfMagnetometerFeedback = ahrs->halfMagnetometerFeedback;
 800cdb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cdba:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800cdbe:	3250      	adds	r2, #80	; 0x50
 800cdc0:	ca07      	ldmia	r2, {r0, r1, r2}
 800cdc2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        }
    }

    // Convert gyroscope to radians per second scaled by 0.5
    const FusionVector halfGyroscope = FusionVectorMultiplyScalar(gyroscope, FusionDegreesToRadians(0.5f));
 800cdc6:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 800cdca:	f7ff f823 	bl	800be14 <FusionDegreesToRadians>
 800cdce:	eeb0 6a40 	vmov.f32	s12, s0
 800cdd2:	edd7 6a08 	vldr	s13, [r7, #32]
 800cdd6:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800cdda:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cdde:	eef0 1a46 	vmov.f32	s3, s12
 800cde2:	eeb0 0a66 	vmov.f32	s0, s13
 800cde6:	eef0 0a47 	vmov.f32	s1, s14
 800cdea:	eeb0 1a67 	vmov.f32	s2, s15
 800cdee:	f7ff f8f3 	bl	800bfd8 <FusionVectorMultiplyScalar>
 800cdf2:	eef0 6a40 	vmov.f32	s13, s0
 800cdf6:	eeb0 7a60 	vmov.f32	s14, s1
 800cdfa:	eef0 7a41 	vmov.f32	s15, s2
 800cdfe:	edc7 6a16 	vstr	s13, [r7, #88]	; 0x58
 800ce02:	ed87 7a17 	vstr	s14, [r7, #92]	; 0x5c
 800ce06:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60

    // Apply feedback to gyroscope
    const FusionVector adjustedHalfGyroscope = FusionVectorAdd(halfGyroscope, FusionVectorMultiplyScalar(FusionVectorAdd(halfAccelerometerFeedback, halfMagnetometerFeedback), ahrs->rampedGain));
 800ce0a:	ed97 5a1c 	vldr	s10, [r7, #112]	; 0x70
 800ce0e:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 800ce12:	ed97 6a1e 	vldr	s12, [r7, #120]	; 0x78
 800ce16:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 800ce1a:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 800ce1e:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 800ce22:	eef0 1a45 	vmov.f32	s3, s10
 800ce26:	eeb0 2a65 	vmov.f32	s4, s11
 800ce2a:	eef0 2a46 	vmov.f32	s5, s12
 800ce2e:	eeb0 0a66 	vmov.f32	s0, s13
 800ce32:	eef0 0a47 	vmov.f32	s1, s14
 800ce36:	eeb0 1a67 	vmov.f32	s2, s15
 800ce3a:	f7ff f85f 	bl	800befc <FusionVectorAdd>
 800ce3e:	eef0 6a40 	vmov.f32	s13, s0
 800ce42:	eeb0 7a60 	vmov.f32	s14, s1
 800ce46:	eef0 7a41 	vmov.f32	s15, s2
 800ce4a:	edc7 6a31 	vstr	s13, [r7, #196]	; 0xc4
 800ce4e:	ed87 7a32 	vstr	s14, [r7, #200]	; 0xc8
 800ce52:	edc7 7a33 	vstr	s15, [r7, #204]	; 0xcc
 800ce56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce58:	ed93 6a0e 	vldr	s12, [r3, #56]	; 0x38
 800ce5c:	edd7 6a31 	vldr	s13, [r7, #196]	; 0xc4
 800ce60:	ed97 7a32 	vldr	s14, [r7, #200]	; 0xc8
 800ce64:	edd7 7a33 	vldr	s15, [r7, #204]	; 0xcc
 800ce68:	eef0 1a46 	vmov.f32	s3, s12
 800ce6c:	eeb0 0a66 	vmov.f32	s0, s13
 800ce70:	eef0 0a47 	vmov.f32	s1, s14
 800ce74:	eeb0 1a67 	vmov.f32	s2, s15
 800ce78:	f7ff f8ae 	bl	800bfd8 <FusionVectorMultiplyScalar>
 800ce7c:	eef0 6a40 	vmov.f32	s13, s0
 800ce80:	eeb0 7a60 	vmov.f32	s14, s1
 800ce84:	eef0 7a41 	vmov.f32	s15, s2
 800ce88:	edc7 6a34 	vstr	s13, [r7, #208]	; 0xd0
 800ce8c:	ed87 7a35 	vstr	s14, [r7, #212]	; 0xd4
 800ce90:	edc7 7a36 	vstr	s15, [r7, #216]	; 0xd8
 800ce94:	ed97 5a34 	vldr	s10, [r7, #208]	; 0xd0
 800ce98:	edd7 5a35 	vldr	s11, [r7, #212]	; 0xd4
 800ce9c:	ed97 6a36 	vldr	s12, [r7, #216]	; 0xd8
 800cea0:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 800cea4:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800cea8:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800ceac:	eef0 1a45 	vmov.f32	s3, s10
 800ceb0:	eeb0 2a65 	vmov.f32	s4, s11
 800ceb4:	eef0 2a46 	vmov.f32	s5, s12
 800ceb8:	eeb0 0a66 	vmov.f32	s0, s13
 800cebc:	eef0 0a47 	vmov.f32	s1, s14
 800cec0:	eeb0 1a67 	vmov.f32	s2, s15
 800cec4:	f7ff f81a 	bl	800befc <FusionVectorAdd>
 800cec8:	eef0 6a40 	vmov.f32	s13, s0
 800cecc:	eeb0 7a60 	vmov.f32	s14, s1
 800ced0:	eef0 7a41 	vmov.f32	s15, s2
 800ced4:	edc7 6a13 	vstr	s13, [r7, #76]	; 0x4c
 800ced8:	ed87 7a14 	vstr	s14, [r7, #80]	; 0x50
 800cedc:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

    // Integrate rate of change of quaternion
    ahrs->quaternion = FusionQuaternionAdd(ahrs->quaternion, FusionQuaternionMultiplyVector(ahrs->quaternion, FusionVectorMultiplyScalar(adjustedHalfGyroscope, deltaTime)));
 800cee0:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 800cee4:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800cee8:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800ceec:	edd7 1a01 	vldr	s3, [r7, #4]
 800cef0:	eeb0 0a66 	vmov.f32	s0, s13
 800cef4:	eef0 0a47 	vmov.f32	s1, s14
 800cef8:	eeb0 1a67 	vmov.f32	s2, s15
 800cefc:	f7ff f86c 	bl	800bfd8 <FusionVectorMultiplyScalar>
 800cf00:	eef0 6a40 	vmov.f32	s13, s0
 800cf04:	eeb0 7a60 	vmov.f32	s14, s1
 800cf08:	eef0 7a41 	vmov.f32	s15, s2
 800cf0c:	edc7 6a37 	vstr	s13, [r7, #220]	; 0xdc
 800cf10:	ed87 7a38 	vstr	s14, [r7, #224]	; 0xe0
 800cf14:	edc7 7a39 	vstr	s15, [r7, #228]	; 0xe4
 800cf18:	edd7 4a37 	vldr	s9, [r7, #220]	; 0xdc
 800cf1c:	ed97 5a38 	vldr	s10, [r7, #224]	; 0xe0
 800cf20:	edd7 5a39 	vldr	s11, [r7, #228]	; 0xe4
 800cf24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf26:	ed93 6a06 	vldr	s12, [r3, #24]
 800cf2a:	edd3 6a07 	vldr	s13, [r3, #28]
 800cf2e:	ed93 7a08 	vldr	s14, [r3, #32]
 800cf32:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800cf36:	eeb0 2a64 	vmov.f32	s4, s9
 800cf3a:	eef0 2a45 	vmov.f32	s5, s10
 800cf3e:	eeb0 3a65 	vmov.f32	s6, s11
 800cf42:	eeb0 0a46 	vmov.f32	s0, s12
 800cf46:	eef0 0a66 	vmov.f32	s1, s13
 800cf4a:	eeb0 1a47 	vmov.f32	s2, s14
 800cf4e:	eef0 1a67 	vmov.f32	s3, s15
 800cf52:	f7ff fa8e 	bl	800c472 <FusionQuaternionMultiplyVector>
 800cf56:	eeb0 6a40 	vmov.f32	s12, s0
 800cf5a:	eef0 6a60 	vmov.f32	s13, s1
 800cf5e:	eeb0 7a41 	vmov.f32	s14, s2
 800cf62:	eef0 7a61 	vmov.f32	s15, s3
 800cf66:	ed87 6a3a 	vstr	s12, [r7, #232]	; 0xe8
 800cf6a:	edc7 6a3b 	vstr	s13, [r7, #236]	; 0xec
 800cf6e:	ed87 7a3c 	vstr	s14, [r7, #240]	; 0xf0
 800cf72:	edc7 7a3d 	vstr	s15, [r7, #244]	; 0xf4
 800cf76:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 800cf78:	ed97 4a3a 	vldr	s8, [r7, #232]	; 0xe8
 800cf7c:	edd7 4a3b 	vldr	s9, [r7, #236]	; 0xec
 800cf80:	ed97 5a3c 	vldr	s10, [r7, #240]	; 0xf0
 800cf84:	edd7 5a3d 	vldr	s11, [r7, #244]	; 0xf4
 800cf88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf8a:	ed93 6a06 	vldr	s12, [r3, #24]
 800cf8e:	edd3 6a07 	vldr	s13, [r3, #28]
 800cf92:	ed93 7a08 	vldr	s14, [r3, #32]
 800cf96:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800cf9a:	eeb0 2a44 	vmov.f32	s4, s8
 800cf9e:	eef0 2a64 	vmov.f32	s5, s9
 800cfa2:	eeb0 3a45 	vmov.f32	s6, s10
 800cfa6:	eef0 3a65 	vmov.f32	s7, s11
 800cfaa:	eeb0 0a46 	vmov.f32	s0, s12
 800cfae:	eef0 0a66 	vmov.f32	s1, s13
 800cfb2:	eeb0 1a47 	vmov.f32	s2, s14
 800cfb6:	eef0 1a67 	vmov.f32	s3, s15
 800cfba:	f7ff f9f8 	bl	800c3ae <FusionQuaternionAdd>
 800cfbe:	eeb0 6a40 	vmov.f32	s12, s0
 800cfc2:	eef0 6a60 	vmov.f32	s13, s1
 800cfc6:	eeb0 7a41 	vmov.f32	s14, s2
 800cfca:	eef0 7a61 	vmov.f32	s15, s3
 800cfce:	ed84 6a06 	vstr	s12, [r4, #24]
 800cfd2:	edc4 6a07 	vstr	s13, [r4, #28]
 800cfd6:	ed84 7a08 	vstr	s14, [r4, #32]
 800cfda:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24

    // Normalise quaternion
    ahrs->quaternion = FusionQuaternionNormalise(ahrs->quaternion);
 800cfde:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 800cfe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfe2:	ed93 6a06 	vldr	s12, [r3, #24]
 800cfe6:	edd3 6a07 	vldr	s13, [r3, #28]
 800cfea:	ed93 7a08 	vldr	s14, [r3, #32]
 800cfee:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800cff2:	eeb0 0a46 	vmov.f32	s0, s12
 800cff6:	eef0 0a66 	vmov.f32	s1, s13
 800cffa:	eeb0 1a47 	vmov.f32	s2, s14
 800cffe:	eef0 1a67 	vmov.f32	s3, s15
 800d002:	f7ff fad6 	bl	800c5b2 <FusionQuaternionNormalise>
 800d006:	eeb0 6a40 	vmov.f32	s12, s0
 800d00a:	eef0 6a60 	vmov.f32	s13, s1
 800d00e:	eeb0 7a41 	vmov.f32	s14, s2
 800d012:	eef0 7a61 	vmov.f32	s15, s3
 800d016:	ed84 6a06 	vstr	s12, [r4, #24]
 800d01a:	edc4 6a07 	vstr	s13, [r4, #28]
 800d01e:	ed84 7a08 	vstr	s14, [r4, #32]
 800d022:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
#undef Q
}
 800d026:	bf00      	nop
 800d028:	37fc      	adds	r7, #252	; 0xfc
 800d02a:	46bd      	mov	sp, r7
 800d02c:	bd90      	pop	{r4, r7, pc}

0800d02e <HalfGravity>:
/**
 * @brief Returns the direction of gravity scaled by 0.5.
 * @param ahrs AHRS algorithm structure.
 * @return Direction of gravity scaled by 0.5.
 */
static inline FusionVector HalfGravity(const FusionAhrs *const ahrs) {
 800d02e:	b480      	push	{r7}
 800d030:	b093      	sub	sp, #76	; 0x4c
 800d032:	af00      	add	r7, sp, #0
 800d034:	6178      	str	r0, [r7, #20]
#define Q ahrs->quaternion.element
    switch (ahrs->settings.convention) {
 800d036:	697b      	ldr	r3, [r7, #20]
 800d038:	781b      	ldrb	r3, [r3, #0]
 800d03a:	2b01      	cmp	r3, #1
 800d03c:	dc02      	bgt.n	800d044 <HalfGravity+0x16>
 800d03e:	2b00      	cmp	r3, #0
 800d040:	da03      	bge.n	800d04a <HalfGravity+0x1c>
 800d042:	e094      	b.n	800d16e <HalfGravity+0x140>
 800d044:	2b02      	cmp	r3, #2
 800d046:	d048      	beq.n	800d0da <HalfGravity+0xac>
 800d048:	e091      	b.n	800d16e <HalfGravity+0x140>
        case FusionConventionNwu:
        case FusionConventionEnu: {
            const FusionVector halfGravity = {.axis = {
                    .x = Q.x * Q.z - Q.w * Q.y,
 800d04a:	697b      	ldr	r3, [r7, #20]
 800d04c:	ed93 7a07 	vldr	s14, [r3, #28]
 800d050:	697b      	ldr	r3, [r7, #20]
 800d052:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800d056:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d05a:	697b      	ldr	r3, [r7, #20]
 800d05c:	edd3 6a06 	vldr	s13, [r3, #24]
 800d060:	697b      	ldr	r3, [r7, #20]
 800d062:	edd3 7a08 	vldr	s15, [r3, #32]
 800d066:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d06a:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfGravity = {.axis = {
 800d06e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                    .y = Q.y * Q.z + Q.w * Q.x,
 800d072:	697b      	ldr	r3, [r7, #20]
 800d074:	ed93 7a08 	vldr	s14, [r3, #32]
 800d078:	697b      	ldr	r3, [r7, #20]
 800d07a:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800d07e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d082:	697b      	ldr	r3, [r7, #20]
 800d084:	edd3 6a06 	vldr	s13, [r3, #24]
 800d088:	697b      	ldr	r3, [r7, #20]
 800d08a:	edd3 7a07 	vldr	s15, [r3, #28]
 800d08e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d092:	ee77 7a27 	vadd.f32	s15, s14, s15
            const FusionVector halfGravity = {.axis = {
 800d096:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
                    .z = Q.w * Q.w - 0.5f + Q.z * Q.z,
 800d09a:	697b      	ldr	r3, [r7, #20]
 800d09c:	ed93 7a06 	vldr	s14, [r3, #24]
 800d0a0:	697b      	ldr	r3, [r7, #20]
 800d0a2:	edd3 7a06 	vldr	s15, [r3, #24]
 800d0a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d0aa:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800d0ae:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800d0b2:	697b      	ldr	r3, [r7, #20]
 800d0b4:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 800d0b8:	697b      	ldr	r3, [r7, #20]
 800d0ba:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800d0be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d0c2:	ee77 7a27 	vadd.f32	s15, s14, s15
            const FusionVector halfGravity = {.axis = {
 800d0c6:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            }}; // third column of transposed rotation matrix scaled by 0.5
            return halfGravity;
 800d0ca:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800d0ce:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800d0d2:	ca07      	ldmia	r2, {r0, r1, r2}
 800d0d4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800d0d8:	e052      	b.n	800d180 <HalfGravity+0x152>
        }
        case FusionConventionNed: {
            const FusionVector halfGravity = {.axis = {
                    .x = Q.w * Q.y - Q.x * Q.z,
 800d0da:	697b      	ldr	r3, [r7, #20]
 800d0dc:	ed93 7a06 	vldr	s14, [r3, #24]
 800d0e0:	697b      	ldr	r3, [r7, #20]
 800d0e2:	edd3 7a08 	vldr	s15, [r3, #32]
 800d0e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d0ea:	697b      	ldr	r3, [r7, #20]
 800d0ec:	edd3 6a07 	vldr	s13, [r3, #28]
 800d0f0:	697b      	ldr	r3, [r7, #20]
 800d0f2:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800d0f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d0fa:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfGravity = {.axis = {
 800d0fe:	edc7 7a06 	vstr	s15, [r7, #24]
                    .y = -1.0f * (Q.y * Q.z + Q.w * Q.x),
 800d102:	697b      	ldr	r3, [r7, #20]
 800d104:	ed93 7a08 	vldr	s14, [r3, #32]
 800d108:	697b      	ldr	r3, [r7, #20]
 800d10a:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800d10e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d112:	697b      	ldr	r3, [r7, #20]
 800d114:	edd3 6a06 	vldr	s13, [r3, #24]
 800d118:	697b      	ldr	r3, [r7, #20]
 800d11a:	edd3 7a07 	vldr	s15, [r3, #28]
 800d11e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d122:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d126:	eef1 7a67 	vneg.f32	s15, s15
            const FusionVector halfGravity = {.axis = {
 800d12a:	edc7 7a07 	vstr	s15, [r7, #28]
                    .z = 0.5f - Q.w * Q.w - Q.z * Q.z,
 800d12e:	697b      	ldr	r3, [r7, #20]
 800d130:	ed93 7a06 	vldr	s14, [r3, #24]
 800d134:	697b      	ldr	r3, [r7, #20]
 800d136:	edd3 7a06 	vldr	s15, [r3, #24]
 800d13a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d13e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800d142:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d146:	697b      	ldr	r3, [r7, #20]
 800d148:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 800d14c:	697b      	ldr	r3, [r7, #20]
 800d14e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800d152:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d156:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfGravity = {.axis = {
 800d15a:	edc7 7a08 	vstr	s15, [r7, #32]
            }}; // third column of transposed rotation matrix scaled by -0.5
            return halfGravity;
 800d15e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800d162:	f107 0218 	add.w	r2, r7, #24
 800d166:	ca07      	ldmia	r2, {r0, r1, r2}
 800d168:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800d16c:	e008      	b.n	800d180 <HalfGravity+0x152>
        }
    }
    return FUSION_VECTOR_ZERO; // avoid compiler warning
 800d16e:	f04f 0300 	mov.w	r3, #0
 800d172:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d174:	f04f 0300 	mov.w	r3, #0
 800d178:	643b      	str	r3, [r7, #64]	; 0x40
 800d17a:	f04f 0300 	mov.w	r3, #0
 800d17e:	647b      	str	r3, [r7, #68]	; 0x44
#undef Q
}
 800d180:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d182:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d184:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d186:	ee06 1a90 	vmov	s13, r1
 800d18a:	ee07 2a10 	vmov	s14, r2
 800d18e:	ee07 3a90 	vmov	s15, r3
 800d192:	eeb0 0a66 	vmov.f32	s0, s13
 800d196:	eef0 0a47 	vmov.f32	s1, s14
 800d19a:	eeb0 1a67 	vmov.f32	s2, s15
 800d19e:	374c      	adds	r7, #76	; 0x4c
 800d1a0:	46bd      	mov	sp, r7
 800d1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1a6:	4770      	bx	lr

0800d1a8 <HalfMagnetic>:
/**
 * @brief Returns the direction of the magnetic field scaled by 0.5.
 * @param ahrs AHRS algorithm structure.
 * @return Direction of the magnetic field scaled by 0.5.
 */
static inline FusionVector HalfMagnetic(const FusionAhrs *const ahrs) {
 800d1a8:	b480      	push	{r7}
 800d1aa:	b097      	sub	sp, #92	; 0x5c
 800d1ac:	af00      	add	r7, sp, #0
 800d1ae:	6178      	str	r0, [r7, #20]
#define Q ahrs->quaternion.element
    switch (ahrs->settings.convention) {
 800d1b0:	697b      	ldr	r3, [r7, #20]
 800d1b2:	781b      	ldrb	r3, [r3, #0]
 800d1b4:	2b02      	cmp	r3, #2
 800d1b6:	f000 809a 	beq.w	800d2ee <HalfMagnetic+0x146>
 800d1ba:	2b02      	cmp	r3, #2
 800d1bc:	f300 80e1 	bgt.w	800d382 <HalfMagnetic+0x1da>
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	d002      	beq.n	800d1ca <HalfMagnetic+0x22>
 800d1c4:	2b01      	cmp	r3, #1
 800d1c6:	d048      	beq.n	800d25a <HalfMagnetic+0xb2>
 800d1c8:	e0db      	b.n	800d382 <HalfMagnetic+0x1da>
        case FusionConventionNwu: {
            const FusionVector halfMagnetic = {.axis = {
                    .x = Q.x * Q.y + Q.w * Q.z,
 800d1ca:	697b      	ldr	r3, [r7, #20]
 800d1cc:	ed93 7a07 	vldr	s14, [r3, #28]
 800d1d0:	697b      	ldr	r3, [r7, #20]
 800d1d2:	edd3 7a08 	vldr	s15, [r3, #32]
 800d1d6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d1da:	697b      	ldr	r3, [r7, #20]
 800d1dc:	edd3 6a06 	vldr	s13, [r3, #24]
 800d1e0:	697b      	ldr	r3, [r7, #20]
 800d1e2:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800d1e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d1ea:	ee77 7a27 	vadd.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 800d1ee:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
                    .y = Q.w * Q.w - 0.5f + Q.y * Q.y,
 800d1f2:	697b      	ldr	r3, [r7, #20]
 800d1f4:	ed93 7a06 	vldr	s14, [r3, #24]
 800d1f8:	697b      	ldr	r3, [r7, #20]
 800d1fa:	edd3 7a06 	vldr	s15, [r3, #24]
 800d1fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d202:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800d206:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800d20a:	697b      	ldr	r3, [r7, #20]
 800d20c:	edd3 6a08 	vldr	s13, [r3, #32]
 800d210:	697b      	ldr	r3, [r7, #20]
 800d212:	edd3 7a08 	vldr	s15, [r3, #32]
 800d216:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d21a:	ee77 7a27 	vadd.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 800d21e:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
                    .z = Q.y * Q.z - Q.w * Q.x,
 800d222:	697b      	ldr	r3, [r7, #20]
 800d224:	ed93 7a08 	vldr	s14, [r3, #32]
 800d228:	697b      	ldr	r3, [r7, #20]
 800d22a:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800d22e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d232:	697b      	ldr	r3, [r7, #20]
 800d234:	edd3 6a06 	vldr	s13, [r3, #24]
 800d238:	697b      	ldr	r3, [r7, #20]
 800d23a:	edd3 7a07 	vldr	s15, [r3, #28]
 800d23e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d242:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 800d246:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
            }}; // second column of transposed rotation matrix scaled by 0.5
            return halfMagnetic;
 800d24a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800d24e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800d252:	ca07      	ldmia	r2, {r0, r1, r2}
 800d254:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800d258:	e09c      	b.n	800d394 <HalfMagnetic+0x1ec>
        }
        case FusionConventionEnu: {
            const FusionVector halfMagnetic = {.axis = {
                    .x = 0.5f - Q.w * Q.w - Q.x * Q.x,
 800d25a:	697b      	ldr	r3, [r7, #20]
 800d25c:	ed93 7a06 	vldr	s14, [r3, #24]
 800d260:	697b      	ldr	r3, [r7, #20]
 800d262:	edd3 7a06 	vldr	s15, [r3, #24]
 800d266:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d26a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800d26e:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d272:	697b      	ldr	r3, [r7, #20]
 800d274:	edd3 6a07 	vldr	s13, [r3, #28]
 800d278:	697b      	ldr	r3, [r7, #20]
 800d27a:	edd3 7a07 	vldr	s15, [r3, #28]
 800d27e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d282:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 800d286:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
                    .y = Q.w * Q.z - Q.x * Q.y,
 800d28a:	697b      	ldr	r3, [r7, #20]
 800d28c:	ed93 7a06 	vldr	s14, [r3, #24]
 800d290:	697b      	ldr	r3, [r7, #20]
 800d292:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800d296:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d29a:	697b      	ldr	r3, [r7, #20]
 800d29c:	edd3 6a07 	vldr	s13, [r3, #28]
 800d2a0:	697b      	ldr	r3, [r7, #20]
 800d2a2:	edd3 7a08 	vldr	s15, [r3, #32]
 800d2a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d2aa:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 800d2ae:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
                    .z = -1.0f * (Q.x * Q.z + Q.w * Q.y),
 800d2b2:	697b      	ldr	r3, [r7, #20]
 800d2b4:	ed93 7a07 	vldr	s14, [r3, #28]
 800d2b8:	697b      	ldr	r3, [r7, #20]
 800d2ba:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800d2be:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d2c2:	697b      	ldr	r3, [r7, #20]
 800d2c4:	edd3 6a06 	vldr	s13, [r3, #24]
 800d2c8:	697b      	ldr	r3, [r7, #20]
 800d2ca:	edd3 7a08 	vldr	s15, [r3, #32]
 800d2ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d2d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d2d6:	eef1 7a67 	vneg.f32	s15, s15
            const FusionVector halfMagnetic = {.axis = {
 800d2da:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
            }}; // first column of transposed rotation matrix scaled by -0.5
            return halfMagnetic;
 800d2de:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800d2e2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800d2e6:	ca07      	ldmia	r2, {r0, r1, r2}
 800d2e8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800d2ec:	e052      	b.n	800d394 <HalfMagnetic+0x1ec>
        }
        case FusionConventionNed: {
            const FusionVector halfMagnetic = {.axis = {
                    .x = -1.0f * (Q.x * Q.y + Q.w * Q.z),
 800d2ee:	697b      	ldr	r3, [r7, #20]
 800d2f0:	ed93 7a07 	vldr	s14, [r3, #28]
 800d2f4:	697b      	ldr	r3, [r7, #20]
 800d2f6:	edd3 7a08 	vldr	s15, [r3, #32]
 800d2fa:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d2fe:	697b      	ldr	r3, [r7, #20]
 800d300:	edd3 6a06 	vldr	s13, [r3, #24]
 800d304:	697b      	ldr	r3, [r7, #20]
 800d306:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800d30a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d30e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d312:	eef1 7a67 	vneg.f32	s15, s15
            const FusionVector halfMagnetic = {.axis = {
 800d316:	edc7 7a07 	vstr	s15, [r7, #28]
                    .y = 0.5f - Q.w * Q.w - Q.y * Q.y,
 800d31a:	697b      	ldr	r3, [r7, #20]
 800d31c:	ed93 7a06 	vldr	s14, [r3, #24]
 800d320:	697b      	ldr	r3, [r7, #20]
 800d322:	edd3 7a06 	vldr	s15, [r3, #24]
 800d326:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d32a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800d32e:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d332:	697b      	ldr	r3, [r7, #20]
 800d334:	edd3 6a08 	vldr	s13, [r3, #32]
 800d338:	697b      	ldr	r3, [r7, #20]
 800d33a:	edd3 7a08 	vldr	s15, [r3, #32]
 800d33e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d342:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 800d346:	edc7 7a08 	vstr	s15, [r7, #32]
                    .z = Q.w * Q.x - Q.y * Q.z,
 800d34a:	697b      	ldr	r3, [r7, #20]
 800d34c:	ed93 7a06 	vldr	s14, [r3, #24]
 800d350:	697b      	ldr	r3, [r7, #20]
 800d352:	edd3 7a07 	vldr	s15, [r3, #28]
 800d356:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d35a:	697b      	ldr	r3, [r7, #20]
 800d35c:	edd3 6a08 	vldr	s13, [r3, #32]
 800d360:	697b      	ldr	r3, [r7, #20]
 800d362:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800d366:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d36a:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 800d36e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            }}; // second column of transposed rotation matrix scaled by -0.5
            return halfMagnetic;
 800d372:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800d376:	f107 021c 	add.w	r2, r7, #28
 800d37a:	ca07      	ldmia	r2, {r0, r1, r2}
 800d37c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800d380:	e008      	b.n	800d394 <HalfMagnetic+0x1ec>
        }
    }
    return FUSION_VECTOR_ZERO; // avoid compiler warning
 800d382:	f04f 0300 	mov.w	r3, #0
 800d386:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d388:	f04f 0300 	mov.w	r3, #0
 800d38c:	653b      	str	r3, [r7, #80]	; 0x50
 800d38e:	f04f 0300 	mov.w	r3, #0
 800d392:	657b      	str	r3, [r7, #84]	; 0x54
#undef Q
}
 800d394:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800d396:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d398:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d39a:	ee06 1a90 	vmov	s13, r1
 800d39e:	ee07 2a10 	vmov	s14, r2
 800d3a2:	ee07 3a90 	vmov	s15, r3
 800d3a6:	eeb0 0a66 	vmov.f32	s0, s13
 800d3aa:	eef0 0a47 	vmov.f32	s1, s14
 800d3ae:	eeb0 1a67 	vmov.f32	s2, s15
 800d3b2:	375c      	adds	r7, #92	; 0x5c
 800d3b4:	46bd      	mov	sp, r7
 800d3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ba:	4770      	bx	lr

0800d3bc <Feedback>:
 * @brief Returns the feedback.
 * @param sensor Sensor.
 * @param reference Reference.
 * @return Feedback.
 */
static inline FusionVector Feedback(const FusionVector sensor, const FusionVector reference) {
 800d3bc:	b580      	push	{r7, lr}
 800d3be:	b090      	sub	sp, #64	; 0x40
 800d3c0:	af00      	add	r7, sp, #0
 800d3c2:	eeb0 5a40 	vmov.f32	s10, s0
 800d3c6:	eef0 5a60 	vmov.f32	s11, s1
 800d3ca:	eeb0 6a41 	vmov.f32	s12, s2
 800d3ce:	eef0 6a61 	vmov.f32	s13, s3
 800d3d2:	eeb0 7a42 	vmov.f32	s14, s4
 800d3d6:	eef0 7a62 	vmov.f32	s15, s5
 800d3da:	ed87 5a07 	vstr	s10, [r7, #28]
 800d3de:	edc7 5a08 	vstr	s11, [r7, #32]
 800d3e2:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 800d3e6:	edc7 6a04 	vstr	s13, [r7, #16]
 800d3ea:	ed87 7a05 	vstr	s14, [r7, #20]
 800d3ee:	edc7 7a06 	vstr	s15, [r7, #24]
    if (FusionVectorDotProduct(sensor, reference) < 0.0f) { // if error is >90 degrees
 800d3f2:	ed97 5a04 	vldr	s10, [r7, #16]
 800d3f6:	edd7 5a05 	vldr	s11, [r7, #20]
 800d3fa:	ed97 6a06 	vldr	s12, [r7, #24]
 800d3fe:	edd7 6a07 	vldr	s13, [r7, #28]
 800d402:	ed97 7a08 	vldr	s14, [r7, #32]
 800d406:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800d40a:	eef0 1a45 	vmov.f32	s3, s10
 800d40e:	eeb0 2a65 	vmov.f32	s4, s11
 800d412:	eef0 2a46 	vmov.f32	s5, s12
 800d416:	eeb0 0a66 	vmov.f32	s0, s13
 800d41a:	eef0 0a47 	vmov.f32	s1, s14
 800d41e:	eeb0 1a67 	vmov.f32	s2, s15
 800d422:	f7fe fed1 	bl	800c1c8 <FusionVectorDotProduct>
 800d426:	eef0 7a40 	vmov.f32	s15, s0
 800d42a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d42e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d432:	d540      	bpl.n	800d4b6 <Feedback+0xfa>
        return FusionVectorNormalise(FusionVectorCrossProduct(sensor, reference));
 800d434:	ed97 5a04 	vldr	s10, [r7, #16]
 800d438:	edd7 5a05 	vldr	s11, [r7, #20]
 800d43c:	ed97 6a06 	vldr	s12, [r7, #24]
 800d440:	edd7 6a07 	vldr	s13, [r7, #28]
 800d444:	ed97 7a08 	vldr	s14, [r7, #32]
 800d448:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800d44c:	eef0 1a45 	vmov.f32	s3, s10
 800d450:	eeb0 2a65 	vmov.f32	s4, s11
 800d454:	eef0 2a46 	vmov.f32	s5, s12
 800d458:	eeb0 0a66 	vmov.f32	s0, s13
 800d45c:	eef0 0a47 	vmov.f32	s1, s14
 800d460:	eeb0 1a67 	vmov.f32	s2, s15
 800d464:	f7fe fe4a 	bl	800c0fc <FusionVectorCrossProduct>
 800d468:	eef0 6a40 	vmov.f32	s13, s0
 800d46c:	eeb0 7a60 	vmov.f32	s14, s1
 800d470:	eef0 7a41 	vmov.f32	s15, s2
 800d474:	edc7 6a0d 	vstr	s13, [r7, #52]	; 0x34
 800d478:	ed87 7a0e 	vstr	s14, [r7, #56]	; 0x38
 800d47c:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
 800d480:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 800d484:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800d488:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800d48c:	eeb0 0a66 	vmov.f32	s0, s13
 800d490:	eef0 0a47 	vmov.f32	s1, s14
 800d494:	eeb0 1a67 	vmov.f32	s2, s15
 800d498:	f7fe ff36 	bl	800c308 <FusionVectorNormalise>
 800d49c:	eef0 6a40 	vmov.f32	s13, s0
 800d4a0:	eeb0 7a60 	vmov.f32	s14, s1
 800d4a4:	eef0 7a41 	vmov.f32	s15, s2
 800d4a8:	edc7 6a0a 	vstr	s13, [r7, #40]	; 0x28
 800d4ac:	ed87 7a0b 	vstr	s14, [r7, #44]	; 0x2c
 800d4b0:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 800d4b4:	e025      	b.n	800d502 <Feedback+0x146>
    }
    return FusionVectorCrossProduct(sensor, reference);
 800d4b6:	ed97 5a04 	vldr	s10, [r7, #16]
 800d4ba:	edd7 5a05 	vldr	s11, [r7, #20]
 800d4be:	ed97 6a06 	vldr	s12, [r7, #24]
 800d4c2:	edd7 6a07 	vldr	s13, [r7, #28]
 800d4c6:	ed97 7a08 	vldr	s14, [r7, #32]
 800d4ca:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800d4ce:	eef0 1a45 	vmov.f32	s3, s10
 800d4d2:	eeb0 2a65 	vmov.f32	s4, s11
 800d4d6:	eef0 2a46 	vmov.f32	s5, s12
 800d4da:	eeb0 0a66 	vmov.f32	s0, s13
 800d4de:	eef0 0a47 	vmov.f32	s1, s14
 800d4e2:	eeb0 1a67 	vmov.f32	s2, s15
 800d4e6:	f7fe fe09 	bl	800c0fc <FusionVectorCrossProduct>
 800d4ea:	eef0 6a40 	vmov.f32	s13, s0
 800d4ee:	eeb0 7a60 	vmov.f32	s14, s1
 800d4f2:	eef0 7a41 	vmov.f32	s15, s2
 800d4f6:	edc7 6a0a 	vstr	s13, [r7, #40]	; 0x28
 800d4fa:	ed87 7a0b 	vstr	s14, [r7, #44]	; 0x2c
 800d4fe:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
}
 800d502:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d504:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d508:	ee06 1a90 	vmov	s13, r1
 800d50c:	ee07 2a10 	vmov	s14, r2
 800d510:	ee07 3a90 	vmov	s15, r3
 800d514:	eeb0 0a66 	vmov.f32	s0, s13
 800d518:	eef0 0a47 	vmov.f32	s1, s14
 800d51c:	eeb0 1a67 	vmov.f32	s2, s15
 800d520:	3740      	adds	r7, #64	; 0x40
 800d522:	46bd      	mov	sp, r7
 800d524:	bd80      	pop	{r7, pc}

0800d526 <Clamp>:
 * @param value Value.
 * @param min Minimum value.
 * @param max Maximum value.
 * @return Value limited to maximum and minimum.
 */
static inline int Clamp(const int value, const int min, const int max) {
 800d526:	b480      	push	{r7}
 800d528:	b085      	sub	sp, #20
 800d52a:	af00      	add	r7, sp, #0
 800d52c:	60f8      	str	r0, [r7, #12]
 800d52e:	60b9      	str	r1, [r7, #8]
 800d530:	607a      	str	r2, [r7, #4]
    if (value < min) {
 800d532:	68fa      	ldr	r2, [r7, #12]
 800d534:	68bb      	ldr	r3, [r7, #8]
 800d536:	429a      	cmp	r2, r3
 800d538:	da01      	bge.n	800d53e <Clamp+0x18>
        return min;
 800d53a:	68bb      	ldr	r3, [r7, #8]
 800d53c:	e006      	b.n	800d54c <Clamp+0x26>
    }
    if (value > max) {
 800d53e:	68fa      	ldr	r2, [r7, #12]
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	429a      	cmp	r2, r3
 800d544:	dd01      	ble.n	800d54a <Clamp+0x24>
        return max;
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	e000      	b.n	800d54c <Clamp+0x26>
    }
    return value;
 800d54a:	68fb      	ldr	r3, [r7, #12]
}
 800d54c:	4618      	mov	r0, r3
 800d54e:	3714      	adds	r7, #20
 800d550:	46bd      	mov	sp, r7
 800d552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d556:	4770      	bx	lr

0800d558 <FusionAhrsGetQuaternion>:
/**
 * @brief Returns the quaternion describing the sensor relative to the Earth.
 * @param ahrs AHRS algorithm structure.
 * @return Quaternion describing the sensor relative to the Earth.
 */
FusionQuaternion FusionAhrsGetQuaternion(const FusionAhrs *const ahrs) {
 800d558:	b490      	push	{r4, r7}
 800d55a:	b08a      	sub	sp, #40	; 0x28
 800d55c:	af00      	add	r7, sp, #0
 800d55e:	6178      	str	r0, [r7, #20]
    return ahrs->quaternion;
 800d560:	697b      	ldr	r3, [r7, #20]
 800d562:	f107 0418 	add.w	r4, r7, #24
 800d566:	3318      	adds	r3, #24
 800d568:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d56a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800d56e:	69b8      	ldr	r0, [r7, #24]
 800d570:	69f9      	ldr	r1, [r7, #28]
 800d572:	6a3a      	ldr	r2, [r7, #32]
 800d574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d576:	ee06 0a10 	vmov	s12, r0
 800d57a:	ee06 1a90 	vmov	s13, r1
 800d57e:	ee07 2a10 	vmov	s14, r2
 800d582:	ee07 3a90 	vmov	s15, r3
}
 800d586:	eeb0 0a46 	vmov.f32	s0, s12
 800d58a:	eef0 0a66 	vmov.f32	s1, s13
 800d58e:	eeb0 1a47 	vmov.f32	s2, s14
 800d592:	eef0 1a67 	vmov.f32	s3, s15
 800d596:	3728      	adds	r7, #40	; 0x28
 800d598:	46bd      	mov	sp, r7
 800d59a:	bc90      	pop	{r4, r7}
 800d59c:	4770      	bx	lr

0800d59e <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800d59e:	b480      	push	{r7}
 800d5a0:	b085      	sub	sp, #20
 800d5a2:	af00      	add	r7, sp, #0
 800d5a4:	4603      	mov	r3, r0
 800d5a6:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800d5a8:	2300      	movs	r3, #0
 800d5aa:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800d5ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d5b0:	2b84      	cmp	r3, #132	; 0x84
 800d5b2:	d005      	beq.n	800d5c0 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800d5b4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800d5b8:	68fb      	ldr	r3, [r7, #12]
 800d5ba:	4413      	add	r3, r2
 800d5bc:	3303      	adds	r3, #3
 800d5be:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800d5c0:	68fb      	ldr	r3, [r7, #12]
}
 800d5c2:	4618      	mov	r0, r3
 800d5c4:	3714      	adds	r7, #20
 800d5c6:	46bd      	mov	sp, r7
 800d5c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5cc:	4770      	bx	lr

0800d5ce <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800d5ce:	b580      	push	{r7, lr}
 800d5d0:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800d5d2:	f000 fadf 	bl	800db94 <vTaskStartScheduler>
  
  return osOK;
 800d5d6:	2300      	movs	r3, #0
}
 800d5d8:	4618      	mov	r0, r3
 800d5da:	bd80      	pop	{r7, pc}

0800d5dc <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800d5dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d5de:	b089      	sub	sp, #36	; 0x24
 800d5e0:	af04      	add	r7, sp, #16
 800d5e2:	6078      	str	r0, [r7, #4]
 800d5e4:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	695b      	ldr	r3, [r3, #20]
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	d020      	beq.n	800d630 <osThreadCreate+0x54>
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	699b      	ldr	r3, [r3, #24]
 800d5f2:	2b00      	cmp	r3, #0
 800d5f4:	d01c      	beq.n	800d630 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	685c      	ldr	r4, [r3, #4]
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	681d      	ldr	r5, [r3, #0]
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	691e      	ldr	r6, [r3, #16]
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800d608:	4618      	mov	r0, r3
 800d60a:	f7ff ffc8 	bl	800d59e <makeFreeRtosPriority>
 800d60e:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	695b      	ldr	r3, [r3, #20]
 800d614:	687a      	ldr	r2, [r7, #4]
 800d616:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d618:	9202      	str	r2, [sp, #8]
 800d61a:	9301      	str	r3, [sp, #4]
 800d61c:	9100      	str	r1, [sp, #0]
 800d61e:	683b      	ldr	r3, [r7, #0]
 800d620:	4632      	mov	r2, r6
 800d622:	4629      	mov	r1, r5
 800d624:	4620      	mov	r0, r4
 800d626:	f000 f8ed 	bl	800d804 <xTaskCreateStatic>
 800d62a:	4603      	mov	r3, r0
 800d62c:	60fb      	str	r3, [r7, #12]
 800d62e:	e01c      	b.n	800d66a <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	685c      	ldr	r4, [r3, #4]
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d63c:	b29e      	uxth	r6, r3
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800d644:	4618      	mov	r0, r3
 800d646:	f7ff ffaa 	bl	800d59e <makeFreeRtosPriority>
 800d64a:	4602      	mov	r2, r0
 800d64c:	f107 030c 	add.w	r3, r7, #12
 800d650:	9301      	str	r3, [sp, #4]
 800d652:	9200      	str	r2, [sp, #0]
 800d654:	683b      	ldr	r3, [r7, #0]
 800d656:	4632      	mov	r2, r6
 800d658:	4629      	mov	r1, r5
 800d65a:	4620      	mov	r0, r4
 800d65c:	f000 f92f 	bl	800d8be <xTaskCreate>
 800d660:	4603      	mov	r3, r0
 800d662:	2b01      	cmp	r3, #1
 800d664:	d001      	beq.n	800d66a <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800d666:	2300      	movs	r3, #0
 800d668:	e000      	b.n	800d66c <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800d66a:	68fb      	ldr	r3, [r7, #12]
}
 800d66c:	4618      	mov	r0, r3
 800d66e:	3714      	adds	r7, #20
 800d670:	46bd      	mov	sp, r7
 800d672:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d674 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800d674:	b580      	push	{r7, lr}
 800d676:	b084      	sub	sp, #16
 800d678:	af00      	add	r7, sp, #0
 800d67a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800d680:	68fb      	ldr	r3, [r7, #12]
 800d682:	2b00      	cmp	r3, #0
 800d684:	d001      	beq.n	800d68a <osDelay+0x16>
 800d686:	68fb      	ldr	r3, [r7, #12]
 800d688:	e000      	b.n	800d68c <osDelay+0x18>
 800d68a:	2301      	movs	r3, #1
 800d68c:	4618      	mov	r0, r3
 800d68e:	f000 fa4d 	bl	800db2c <vTaskDelay>
  
  return osOK;
 800d692:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800d694:	4618      	mov	r0, r3
 800d696:	3710      	adds	r7, #16
 800d698:	46bd      	mov	sp, r7
 800d69a:	bd80      	pop	{r7, pc}

0800d69c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800d69c:	b480      	push	{r7}
 800d69e:	b083      	sub	sp, #12
 800d6a0:	af00      	add	r7, sp, #0
 800d6a2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	f103 0208 	add.w	r2, r3, #8
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	f04f 32ff 	mov.w	r2, #4294967295
 800d6b4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	f103 0208 	add.w	r2, r3, #8
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	f103 0208 	add.w	r2, r3, #8
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	2200      	movs	r2, #0
 800d6ce:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800d6d0:	bf00      	nop
 800d6d2:	370c      	adds	r7, #12
 800d6d4:	46bd      	mov	sp, r7
 800d6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6da:	4770      	bx	lr

0800d6dc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800d6dc:	b480      	push	{r7}
 800d6de:	b083      	sub	sp, #12
 800d6e0:	af00      	add	r7, sp, #0
 800d6e2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	2200      	movs	r2, #0
 800d6e8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800d6ea:	bf00      	nop
 800d6ec:	370c      	adds	r7, #12
 800d6ee:	46bd      	mov	sp, r7
 800d6f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6f4:	4770      	bx	lr

0800d6f6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d6f6:	b480      	push	{r7}
 800d6f8:	b085      	sub	sp, #20
 800d6fa:	af00      	add	r7, sp, #0
 800d6fc:	6078      	str	r0, [r7, #4]
 800d6fe:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	685b      	ldr	r3, [r3, #4]
 800d704:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800d706:	683b      	ldr	r3, [r7, #0]
 800d708:	68fa      	ldr	r2, [r7, #12]
 800d70a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d70c:	68fb      	ldr	r3, [r7, #12]
 800d70e:	689a      	ldr	r2, [r3, #8]
 800d710:	683b      	ldr	r3, [r7, #0]
 800d712:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d714:	68fb      	ldr	r3, [r7, #12]
 800d716:	689b      	ldr	r3, [r3, #8]
 800d718:	683a      	ldr	r2, [r7, #0]
 800d71a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800d71c:	68fb      	ldr	r3, [r7, #12]
 800d71e:	683a      	ldr	r2, [r7, #0]
 800d720:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800d722:	683b      	ldr	r3, [r7, #0]
 800d724:	687a      	ldr	r2, [r7, #4]
 800d726:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	681b      	ldr	r3, [r3, #0]
 800d72c:	1c5a      	adds	r2, r3, #1
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	601a      	str	r2, [r3, #0]
}
 800d732:	bf00      	nop
 800d734:	3714      	adds	r7, #20
 800d736:	46bd      	mov	sp, r7
 800d738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d73c:	4770      	bx	lr

0800d73e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d73e:	b480      	push	{r7}
 800d740:	b085      	sub	sp, #20
 800d742:	af00      	add	r7, sp, #0
 800d744:	6078      	str	r0, [r7, #4]
 800d746:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d748:	683b      	ldr	r3, [r7, #0]
 800d74a:	681b      	ldr	r3, [r3, #0]
 800d74c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800d74e:	68bb      	ldr	r3, [r7, #8]
 800d750:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d754:	d103      	bne.n	800d75e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	691b      	ldr	r3, [r3, #16]
 800d75a:	60fb      	str	r3, [r7, #12]
 800d75c:	e00c      	b.n	800d778 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	3308      	adds	r3, #8
 800d762:	60fb      	str	r3, [r7, #12]
 800d764:	e002      	b.n	800d76c <vListInsert+0x2e>
 800d766:	68fb      	ldr	r3, [r7, #12]
 800d768:	685b      	ldr	r3, [r3, #4]
 800d76a:	60fb      	str	r3, [r7, #12]
 800d76c:	68fb      	ldr	r3, [r7, #12]
 800d76e:	685b      	ldr	r3, [r3, #4]
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	68ba      	ldr	r2, [r7, #8]
 800d774:	429a      	cmp	r2, r3
 800d776:	d2f6      	bcs.n	800d766 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800d778:	68fb      	ldr	r3, [r7, #12]
 800d77a:	685a      	ldr	r2, [r3, #4]
 800d77c:	683b      	ldr	r3, [r7, #0]
 800d77e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d780:	683b      	ldr	r3, [r7, #0]
 800d782:	685b      	ldr	r3, [r3, #4]
 800d784:	683a      	ldr	r2, [r7, #0]
 800d786:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800d788:	683b      	ldr	r3, [r7, #0]
 800d78a:	68fa      	ldr	r2, [r7, #12]
 800d78c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800d78e:	68fb      	ldr	r3, [r7, #12]
 800d790:	683a      	ldr	r2, [r7, #0]
 800d792:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800d794:	683b      	ldr	r3, [r7, #0]
 800d796:	687a      	ldr	r2, [r7, #4]
 800d798:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	681b      	ldr	r3, [r3, #0]
 800d79e:	1c5a      	adds	r2, r3, #1
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	601a      	str	r2, [r3, #0]
}
 800d7a4:	bf00      	nop
 800d7a6:	3714      	adds	r7, #20
 800d7a8:	46bd      	mov	sp, r7
 800d7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ae:	4770      	bx	lr

0800d7b0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800d7b0:	b480      	push	{r7}
 800d7b2:	b085      	sub	sp, #20
 800d7b4:	af00      	add	r7, sp, #0
 800d7b6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	691b      	ldr	r3, [r3, #16]
 800d7bc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	685b      	ldr	r3, [r3, #4]
 800d7c2:	687a      	ldr	r2, [r7, #4]
 800d7c4:	6892      	ldr	r2, [r2, #8]
 800d7c6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	689b      	ldr	r3, [r3, #8]
 800d7cc:	687a      	ldr	r2, [r7, #4]
 800d7ce:	6852      	ldr	r2, [r2, #4]
 800d7d0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800d7d2:	68fb      	ldr	r3, [r7, #12]
 800d7d4:	685b      	ldr	r3, [r3, #4]
 800d7d6:	687a      	ldr	r2, [r7, #4]
 800d7d8:	429a      	cmp	r2, r3
 800d7da:	d103      	bne.n	800d7e4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	689a      	ldr	r2, [r3, #8]
 800d7e0:	68fb      	ldr	r3, [r7, #12]
 800d7e2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	2200      	movs	r2, #0
 800d7e8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800d7ea:	68fb      	ldr	r3, [r7, #12]
 800d7ec:	681b      	ldr	r3, [r3, #0]
 800d7ee:	1e5a      	subs	r2, r3, #1
 800d7f0:	68fb      	ldr	r3, [r7, #12]
 800d7f2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800d7f4:	68fb      	ldr	r3, [r7, #12]
 800d7f6:	681b      	ldr	r3, [r3, #0]
}
 800d7f8:	4618      	mov	r0, r3
 800d7fa:	3714      	adds	r7, #20
 800d7fc:	46bd      	mov	sp, r7
 800d7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d802:	4770      	bx	lr

0800d804 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d804:	b580      	push	{r7, lr}
 800d806:	b08e      	sub	sp, #56	; 0x38
 800d808:	af04      	add	r7, sp, #16
 800d80a:	60f8      	str	r0, [r7, #12]
 800d80c:	60b9      	str	r1, [r7, #8]
 800d80e:	607a      	str	r2, [r7, #4]
 800d810:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d812:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d814:	2b00      	cmp	r3, #0
 800d816:	d10a      	bne.n	800d82e <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800d818:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d81c:	f383 8811 	msr	BASEPRI, r3
 800d820:	f3bf 8f6f 	isb	sy
 800d824:	f3bf 8f4f 	dsb	sy
 800d828:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800d82a:	bf00      	nop
 800d82c:	e7fe      	b.n	800d82c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800d82e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d830:	2b00      	cmp	r3, #0
 800d832:	d10a      	bne.n	800d84a <xTaskCreateStatic+0x46>
	__asm volatile
 800d834:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d838:	f383 8811 	msr	BASEPRI, r3
 800d83c:	f3bf 8f6f 	isb	sy
 800d840:	f3bf 8f4f 	dsb	sy
 800d844:	61fb      	str	r3, [r7, #28]
}
 800d846:	bf00      	nop
 800d848:	e7fe      	b.n	800d848 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d84a:	2354      	movs	r3, #84	; 0x54
 800d84c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d84e:	693b      	ldr	r3, [r7, #16]
 800d850:	2b54      	cmp	r3, #84	; 0x54
 800d852:	d00a      	beq.n	800d86a <xTaskCreateStatic+0x66>
	__asm volatile
 800d854:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d858:	f383 8811 	msr	BASEPRI, r3
 800d85c:	f3bf 8f6f 	isb	sy
 800d860:	f3bf 8f4f 	dsb	sy
 800d864:	61bb      	str	r3, [r7, #24]
}
 800d866:	bf00      	nop
 800d868:	e7fe      	b.n	800d868 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d86a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d86c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d86e:	2b00      	cmp	r3, #0
 800d870:	d01e      	beq.n	800d8b0 <xTaskCreateStatic+0xac>
 800d872:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d874:	2b00      	cmp	r3, #0
 800d876:	d01b      	beq.n	800d8b0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d87a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d87c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d87e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d880:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d884:	2202      	movs	r2, #2
 800d886:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d88a:	2300      	movs	r3, #0
 800d88c:	9303      	str	r3, [sp, #12]
 800d88e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d890:	9302      	str	r3, [sp, #8]
 800d892:	f107 0314 	add.w	r3, r7, #20
 800d896:	9301      	str	r3, [sp, #4]
 800d898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d89a:	9300      	str	r3, [sp, #0]
 800d89c:	683b      	ldr	r3, [r7, #0]
 800d89e:	687a      	ldr	r2, [r7, #4]
 800d8a0:	68b9      	ldr	r1, [r7, #8]
 800d8a2:	68f8      	ldr	r0, [r7, #12]
 800d8a4:	f000 f850 	bl	800d948 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d8a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d8aa:	f000 f8d5 	bl	800da58 <prvAddNewTaskToReadyList>
 800d8ae:	e001      	b.n	800d8b4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800d8b0:	2300      	movs	r3, #0
 800d8b2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d8b4:	697b      	ldr	r3, [r7, #20]
	}
 800d8b6:	4618      	mov	r0, r3
 800d8b8:	3728      	adds	r7, #40	; 0x28
 800d8ba:	46bd      	mov	sp, r7
 800d8bc:	bd80      	pop	{r7, pc}

0800d8be <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d8be:	b580      	push	{r7, lr}
 800d8c0:	b08c      	sub	sp, #48	; 0x30
 800d8c2:	af04      	add	r7, sp, #16
 800d8c4:	60f8      	str	r0, [r7, #12]
 800d8c6:	60b9      	str	r1, [r7, #8]
 800d8c8:	603b      	str	r3, [r7, #0]
 800d8ca:	4613      	mov	r3, r2
 800d8cc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d8ce:	88fb      	ldrh	r3, [r7, #6]
 800d8d0:	009b      	lsls	r3, r3, #2
 800d8d2:	4618      	mov	r0, r3
 800d8d4:	f000 fee8 	bl	800e6a8 <pvPortMalloc>
 800d8d8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d8da:	697b      	ldr	r3, [r7, #20]
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	d00e      	beq.n	800d8fe <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d8e0:	2054      	movs	r0, #84	; 0x54
 800d8e2:	f000 fee1 	bl	800e6a8 <pvPortMalloc>
 800d8e6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d8e8:	69fb      	ldr	r3, [r7, #28]
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	d003      	beq.n	800d8f6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d8ee:	69fb      	ldr	r3, [r7, #28]
 800d8f0:	697a      	ldr	r2, [r7, #20]
 800d8f2:	631a      	str	r2, [r3, #48]	; 0x30
 800d8f4:	e005      	b.n	800d902 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d8f6:	6978      	ldr	r0, [r7, #20]
 800d8f8:	f000 ffa2 	bl	800e840 <vPortFree>
 800d8fc:	e001      	b.n	800d902 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d8fe:	2300      	movs	r3, #0
 800d900:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d902:	69fb      	ldr	r3, [r7, #28]
 800d904:	2b00      	cmp	r3, #0
 800d906:	d017      	beq.n	800d938 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d908:	69fb      	ldr	r3, [r7, #28]
 800d90a:	2200      	movs	r2, #0
 800d90c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d910:	88fa      	ldrh	r2, [r7, #6]
 800d912:	2300      	movs	r3, #0
 800d914:	9303      	str	r3, [sp, #12]
 800d916:	69fb      	ldr	r3, [r7, #28]
 800d918:	9302      	str	r3, [sp, #8]
 800d91a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d91c:	9301      	str	r3, [sp, #4]
 800d91e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d920:	9300      	str	r3, [sp, #0]
 800d922:	683b      	ldr	r3, [r7, #0]
 800d924:	68b9      	ldr	r1, [r7, #8]
 800d926:	68f8      	ldr	r0, [r7, #12]
 800d928:	f000 f80e 	bl	800d948 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d92c:	69f8      	ldr	r0, [r7, #28]
 800d92e:	f000 f893 	bl	800da58 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d932:	2301      	movs	r3, #1
 800d934:	61bb      	str	r3, [r7, #24]
 800d936:	e002      	b.n	800d93e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d938:	f04f 33ff 	mov.w	r3, #4294967295
 800d93c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d93e:	69bb      	ldr	r3, [r7, #24]
	}
 800d940:	4618      	mov	r0, r3
 800d942:	3720      	adds	r7, #32
 800d944:	46bd      	mov	sp, r7
 800d946:	bd80      	pop	{r7, pc}

0800d948 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d948:	b580      	push	{r7, lr}
 800d94a:	b088      	sub	sp, #32
 800d94c:	af00      	add	r7, sp, #0
 800d94e:	60f8      	str	r0, [r7, #12]
 800d950:	60b9      	str	r1, [r7, #8]
 800d952:	607a      	str	r2, [r7, #4]
 800d954:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d958:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800d960:	3b01      	subs	r3, #1
 800d962:	009b      	lsls	r3, r3, #2
 800d964:	4413      	add	r3, r2
 800d966:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d968:	69bb      	ldr	r3, [r7, #24]
 800d96a:	f023 0307 	bic.w	r3, r3, #7
 800d96e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d970:	69bb      	ldr	r3, [r7, #24]
 800d972:	f003 0307 	and.w	r3, r3, #7
 800d976:	2b00      	cmp	r3, #0
 800d978:	d00a      	beq.n	800d990 <prvInitialiseNewTask+0x48>
	__asm volatile
 800d97a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d97e:	f383 8811 	msr	BASEPRI, r3
 800d982:	f3bf 8f6f 	isb	sy
 800d986:	f3bf 8f4f 	dsb	sy
 800d98a:	617b      	str	r3, [r7, #20]
}
 800d98c:	bf00      	nop
 800d98e:	e7fe      	b.n	800d98e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d990:	68bb      	ldr	r3, [r7, #8]
 800d992:	2b00      	cmp	r3, #0
 800d994:	d01f      	beq.n	800d9d6 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d996:	2300      	movs	r3, #0
 800d998:	61fb      	str	r3, [r7, #28]
 800d99a:	e012      	b.n	800d9c2 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d99c:	68ba      	ldr	r2, [r7, #8]
 800d99e:	69fb      	ldr	r3, [r7, #28]
 800d9a0:	4413      	add	r3, r2
 800d9a2:	7819      	ldrb	r1, [r3, #0]
 800d9a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d9a6:	69fb      	ldr	r3, [r7, #28]
 800d9a8:	4413      	add	r3, r2
 800d9aa:	3334      	adds	r3, #52	; 0x34
 800d9ac:	460a      	mov	r2, r1
 800d9ae:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d9b0:	68ba      	ldr	r2, [r7, #8]
 800d9b2:	69fb      	ldr	r3, [r7, #28]
 800d9b4:	4413      	add	r3, r2
 800d9b6:	781b      	ldrb	r3, [r3, #0]
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	d006      	beq.n	800d9ca <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d9bc:	69fb      	ldr	r3, [r7, #28]
 800d9be:	3301      	adds	r3, #1
 800d9c0:	61fb      	str	r3, [r7, #28]
 800d9c2:	69fb      	ldr	r3, [r7, #28]
 800d9c4:	2b0f      	cmp	r3, #15
 800d9c6:	d9e9      	bls.n	800d99c <prvInitialiseNewTask+0x54>
 800d9c8:	e000      	b.n	800d9cc <prvInitialiseNewTask+0x84>
			{
				break;
 800d9ca:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d9cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9ce:	2200      	movs	r2, #0
 800d9d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d9d4:	e003      	b.n	800d9de <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d9d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9d8:	2200      	movs	r2, #0
 800d9da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d9de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9e0:	2b06      	cmp	r3, #6
 800d9e2:	d901      	bls.n	800d9e8 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d9e4:	2306      	movs	r3, #6
 800d9e6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d9e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d9ec:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d9ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d9f2:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800d9f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9f6:	2200      	movs	r2, #0
 800d9f8:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d9fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9fc:	3304      	adds	r3, #4
 800d9fe:	4618      	mov	r0, r3
 800da00:	f7ff fe6c 	bl	800d6dc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800da04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da06:	3318      	adds	r3, #24
 800da08:	4618      	mov	r0, r3
 800da0a:	f7ff fe67 	bl	800d6dc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800da0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800da12:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800da14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da16:	f1c3 0207 	rsb	r2, r3, #7
 800da1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da1c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800da1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800da22:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800da24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da26:	2200      	movs	r2, #0
 800da28:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800da2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da2c:	2200      	movs	r2, #0
 800da2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800da32:	683a      	ldr	r2, [r7, #0]
 800da34:	68f9      	ldr	r1, [r7, #12]
 800da36:	69b8      	ldr	r0, [r7, #24]
 800da38:	f000 fc24 	bl	800e284 <pxPortInitialiseStack>
 800da3c:	4602      	mov	r2, r0
 800da3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da40:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800da42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da44:	2b00      	cmp	r3, #0
 800da46:	d002      	beq.n	800da4e <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800da48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da4a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800da4c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800da4e:	bf00      	nop
 800da50:	3720      	adds	r7, #32
 800da52:	46bd      	mov	sp, r7
 800da54:	bd80      	pop	{r7, pc}
	...

0800da58 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800da58:	b580      	push	{r7, lr}
 800da5a:	b082      	sub	sp, #8
 800da5c:	af00      	add	r7, sp, #0
 800da5e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800da60:	f000 fd40 	bl	800e4e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800da64:	4b2a      	ldr	r3, [pc, #168]	; (800db10 <prvAddNewTaskToReadyList+0xb8>)
 800da66:	681b      	ldr	r3, [r3, #0]
 800da68:	3301      	adds	r3, #1
 800da6a:	4a29      	ldr	r2, [pc, #164]	; (800db10 <prvAddNewTaskToReadyList+0xb8>)
 800da6c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800da6e:	4b29      	ldr	r3, [pc, #164]	; (800db14 <prvAddNewTaskToReadyList+0xbc>)
 800da70:	681b      	ldr	r3, [r3, #0]
 800da72:	2b00      	cmp	r3, #0
 800da74:	d109      	bne.n	800da8a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800da76:	4a27      	ldr	r2, [pc, #156]	; (800db14 <prvAddNewTaskToReadyList+0xbc>)
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800da7c:	4b24      	ldr	r3, [pc, #144]	; (800db10 <prvAddNewTaskToReadyList+0xb8>)
 800da7e:	681b      	ldr	r3, [r3, #0]
 800da80:	2b01      	cmp	r3, #1
 800da82:	d110      	bne.n	800daa6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800da84:	f000 fabc 	bl	800e000 <prvInitialiseTaskLists>
 800da88:	e00d      	b.n	800daa6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800da8a:	4b23      	ldr	r3, [pc, #140]	; (800db18 <prvAddNewTaskToReadyList+0xc0>)
 800da8c:	681b      	ldr	r3, [r3, #0]
 800da8e:	2b00      	cmp	r3, #0
 800da90:	d109      	bne.n	800daa6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800da92:	4b20      	ldr	r3, [pc, #128]	; (800db14 <prvAddNewTaskToReadyList+0xbc>)
 800da94:	681b      	ldr	r3, [r3, #0]
 800da96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da9c:	429a      	cmp	r2, r3
 800da9e:	d802      	bhi.n	800daa6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800daa0:	4a1c      	ldr	r2, [pc, #112]	; (800db14 <prvAddNewTaskToReadyList+0xbc>)
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800daa6:	4b1d      	ldr	r3, [pc, #116]	; (800db1c <prvAddNewTaskToReadyList+0xc4>)
 800daa8:	681b      	ldr	r3, [r3, #0]
 800daaa:	3301      	adds	r3, #1
 800daac:	4a1b      	ldr	r2, [pc, #108]	; (800db1c <prvAddNewTaskToReadyList+0xc4>)
 800daae:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dab4:	2201      	movs	r2, #1
 800dab6:	409a      	lsls	r2, r3
 800dab8:	4b19      	ldr	r3, [pc, #100]	; (800db20 <prvAddNewTaskToReadyList+0xc8>)
 800daba:	681b      	ldr	r3, [r3, #0]
 800dabc:	4313      	orrs	r3, r2
 800dabe:	4a18      	ldr	r2, [pc, #96]	; (800db20 <prvAddNewTaskToReadyList+0xc8>)
 800dac0:	6013      	str	r3, [r2, #0]
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dac6:	4613      	mov	r3, r2
 800dac8:	009b      	lsls	r3, r3, #2
 800daca:	4413      	add	r3, r2
 800dacc:	009b      	lsls	r3, r3, #2
 800dace:	4a15      	ldr	r2, [pc, #84]	; (800db24 <prvAddNewTaskToReadyList+0xcc>)
 800dad0:	441a      	add	r2, r3
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	3304      	adds	r3, #4
 800dad6:	4619      	mov	r1, r3
 800dad8:	4610      	mov	r0, r2
 800dada:	f7ff fe0c 	bl	800d6f6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800dade:	f000 fd31 	bl	800e544 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800dae2:	4b0d      	ldr	r3, [pc, #52]	; (800db18 <prvAddNewTaskToReadyList+0xc0>)
 800dae4:	681b      	ldr	r3, [r3, #0]
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	d00e      	beq.n	800db08 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800daea:	4b0a      	ldr	r3, [pc, #40]	; (800db14 <prvAddNewTaskToReadyList+0xbc>)
 800daec:	681b      	ldr	r3, [r3, #0]
 800daee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800daf4:	429a      	cmp	r2, r3
 800daf6:	d207      	bcs.n	800db08 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800daf8:	4b0b      	ldr	r3, [pc, #44]	; (800db28 <prvAddNewTaskToReadyList+0xd0>)
 800dafa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dafe:	601a      	str	r2, [r3, #0]
 800db00:	f3bf 8f4f 	dsb	sy
 800db04:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800db08:	bf00      	nop
 800db0a:	3708      	adds	r7, #8
 800db0c:	46bd      	mov	sp, r7
 800db0e:	bd80      	pop	{r7, pc}
 800db10:	20002c34 	.word	0x20002c34
 800db14:	20002b34 	.word	0x20002b34
 800db18:	20002c40 	.word	0x20002c40
 800db1c:	20002c50 	.word	0x20002c50
 800db20:	20002c3c 	.word	0x20002c3c
 800db24:	20002b38 	.word	0x20002b38
 800db28:	e000ed04 	.word	0xe000ed04

0800db2c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800db2c:	b580      	push	{r7, lr}
 800db2e:	b084      	sub	sp, #16
 800db30:	af00      	add	r7, sp, #0
 800db32:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800db34:	2300      	movs	r3, #0
 800db36:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	d017      	beq.n	800db6e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800db3e:	4b13      	ldr	r3, [pc, #76]	; (800db8c <vTaskDelay+0x60>)
 800db40:	681b      	ldr	r3, [r3, #0]
 800db42:	2b00      	cmp	r3, #0
 800db44:	d00a      	beq.n	800db5c <vTaskDelay+0x30>
	__asm volatile
 800db46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db4a:	f383 8811 	msr	BASEPRI, r3
 800db4e:	f3bf 8f6f 	isb	sy
 800db52:	f3bf 8f4f 	dsb	sy
 800db56:	60bb      	str	r3, [r7, #8]
}
 800db58:	bf00      	nop
 800db5a:	e7fe      	b.n	800db5a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800db5c:	f000 f87a 	bl	800dc54 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800db60:	2100      	movs	r1, #0
 800db62:	6878      	ldr	r0, [r7, #4]
 800db64:	f000 fb28 	bl	800e1b8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800db68:	f000 f882 	bl	800dc70 <xTaskResumeAll>
 800db6c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800db6e:	68fb      	ldr	r3, [r7, #12]
 800db70:	2b00      	cmp	r3, #0
 800db72:	d107      	bne.n	800db84 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800db74:	4b06      	ldr	r3, [pc, #24]	; (800db90 <vTaskDelay+0x64>)
 800db76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800db7a:	601a      	str	r2, [r3, #0]
 800db7c:	f3bf 8f4f 	dsb	sy
 800db80:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800db84:	bf00      	nop
 800db86:	3710      	adds	r7, #16
 800db88:	46bd      	mov	sp, r7
 800db8a:	bd80      	pop	{r7, pc}
 800db8c:	20002c5c 	.word	0x20002c5c
 800db90:	e000ed04 	.word	0xe000ed04

0800db94 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800db94:	b580      	push	{r7, lr}
 800db96:	b08a      	sub	sp, #40	; 0x28
 800db98:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800db9a:	2300      	movs	r3, #0
 800db9c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800db9e:	2300      	movs	r3, #0
 800dba0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800dba2:	463a      	mov	r2, r7
 800dba4:	1d39      	adds	r1, r7, #4
 800dba6:	f107 0308 	add.w	r3, r7, #8
 800dbaa:	4618      	mov	r0, r3
 800dbac:	f7f3 f9ee 	bl	8000f8c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800dbb0:	6839      	ldr	r1, [r7, #0]
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	68ba      	ldr	r2, [r7, #8]
 800dbb6:	9202      	str	r2, [sp, #8]
 800dbb8:	9301      	str	r3, [sp, #4]
 800dbba:	2300      	movs	r3, #0
 800dbbc:	9300      	str	r3, [sp, #0]
 800dbbe:	2300      	movs	r3, #0
 800dbc0:	460a      	mov	r2, r1
 800dbc2:	491e      	ldr	r1, [pc, #120]	; (800dc3c <vTaskStartScheduler+0xa8>)
 800dbc4:	481e      	ldr	r0, [pc, #120]	; (800dc40 <vTaskStartScheduler+0xac>)
 800dbc6:	f7ff fe1d 	bl	800d804 <xTaskCreateStatic>
 800dbca:	4603      	mov	r3, r0
 800dbcc:	4a1d      	ldr	r2, [pc, #116]	; (800dc44 <vTaskStartScheduler+0xb0>)
 800dbce:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800dbd0:	4b1c      	ldr	r3, [pc, #112]	; (800dc44 <vTaskStartScheduler+0xb0>)
 800dbd2:	681b      	ldr	r3, [r3, #0]
 800dbd4:	2b00      	cmp	r3, #0
 800dbd6:	d002      	beq.n	800dbde <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800dbd8:	2301      	movs	r3, #1
 800dbda:	617b      	str	r3, [r7, #20]
 800dbdc:	e001      	b.n	800dbe2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800dbde:	2300      	movs	r3, #0
 800dbe0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800dbe2:	697b      	ldr	r3, [r7, #20]
 800dbe4:	2b01      	cmp	r3, #1
 800dbe6:	d116      	bne.n	800dc16 <vTaskStartScheduler+0x82>
	__asm volatile
 800dbe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbec:	f383 8811 	msr	BASEPRI, r3
 800dbf0:	f3bf 8f6f 	isb	sy
 800dbf4:	f3bf 8f4f 	dsb	sy
 800dbf8:	613b      	str	r3, [r7, #16]
}
 800dbfa:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800dbfc:	4b12      	ldr	r3, [pc, #72]	; (800dc48 <vTaskStartScheduler+0xb4>)
 800dbfe:	f04f 32ff 	mov.w	r2, #4294967295
 800dc02:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800dc04:	4b11      	ldr	r3, [pc, #68]	; (800dc4c <vTaskStartScheduler+0xb8>)
 800dc06:	2201      	movs	r2, #1
 800dc08:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800dc0a:	4b11      	ldr	r3, [pc, #68]	; (800dc50 <vTaskStartScheduler+0xbc>)
 800dc0c:	2200      	movs	r2, #0
 800dc0e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800dc10:	f000 fbc6 	bl	800e3a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800dc14:	e00e      	b.n	800dc34 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800dc16:	697b      	ldr	r3, [r7, #20]
 800dc18:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc1c:	d10a      	bne.n	800dc34 <vTaskStartScheduler+0xa0>
	__asm volatile
 800dc1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc22:	f383 8811 	msr	BASEPRI, r3
 800dc26:	f3bf 8f6f 	isb	sy
 800dc2a:	f3bf 8f4f 	dsb	sy
 800dc2e:	60fb      	str	r3, [r7, #12]
}
 800dc30:	bf00      	nop
 800dc32:	e7fe      	b.n	800dc32 <vTaskStartScheduler+0x9e>
}
 800dc34:	bf00      	nop
 800dc36:	3718      	adds	r7, #24
 800dc38:	46bd      	mov	sp, r7
 800dc3a:	bd80      	pop	{r7, pc}
 800dc3c:	08013ebc 	.word	0x08013ebc
 800dc40:	0800dfd1 	.word	0x0800dfd1
 800dc44:	20002c58 	.word	0x20002c58
 800dc48:	20002c54 	.word	0x20002c54
 800dc4c:	20002c40 	.word	0x20002c40
 800dc50:	20002c38 	.word	0x20002c38

0800dc54 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800dc54:	b480      	push	{r7}
 800dc56:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800dc58:	4b04      	ldr	r3, [pc, #16]	; (800dc6c <vTaskSuspendAll+0x18>)
 800dc5a:	681b      	ldr	r3, [r3, #0]
 800dc5c:	3301      	adds	r3, #1
 800dc5e:	4a03      	ldr	r2, [pc, #12]	; (800dc6c <vTaskSuspendAll+0x18>)
 800dc60:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800dc62:	bf00      	nop
 800dc64:	46bd      	mov	sp, r7
 800dc66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc6a:	4770      	bx	lr
 800dc6c:	20002c5c 	.word	0x20002c5c

0800dc70 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800dc70:	b580      	push	{r7, lr}
 800dc72:	b084      	sub	sp, #16
 800dc74:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800dc76:	2300      	movs	r3, #0
 800dc78:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800dc7a:	2300      	movs	r3, #0
 800dc7c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800dc7e:	4b41      	ldr	r3, [pc, #260]	; (800dd84 <xTaskResumeAll+0x114>)
 800dc80:	681b      	ldr	r3, [r3, #0]
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d10a      	bne.n	800dc9c <xTaskResumeAll+0x2c>
	__asm volatile
 800dc86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc8a:	f383 8811 	msr	BASEPRI, r3
 800dc8e:	f3bf 8f6f 	isb	sy
 800dc92:	f3bf 8f4f 	dsb	sy
 800dc96:	603b      	str	r3, [r7, #0]
}
 800dc98:	bf00      	nop
 800dc9a:	e7fe      	b.n	800dc9a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800dc9c:	f000 fc22 	bl	800e4e4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800dca0:	4b38      	ldr	r3, [pc, #224]	; (800dd84 <xTaskResumeAll+0x114>)
 800dca2:	681b      	ldr	r3, [r3, #0]
 800dca4:	3b01      	subs	r3, #1
 800dca6:	4a37      	ldr	r2, [pc, #220]	; (800dd84 <xTaskResumeAll+0x114>)
 800dca8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dcaa:	4b36      	ldr	r3, [pc, #216]	; (800dd84 <xTaskResumeAll+0x114>)
 800dcac:	681b      	ldr	r3, [r3, #0]
 800dcae:	2b00      	cmp	r3, #0
 800dcb0:	d161      	bne.n	800dd76 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800dcb2:	4b35      	ldr	r3, [pc, #212]	; (800dd88 <xTaskResumeAll+0x118>)
 800dcb4:	681b      	ldr	r3, [r3, #0]
 800dcb6:	2b00      	cmp	r3, #0
 800dcb8:	d05d      	beq.n	800dd76 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800dcba:	e02e      	b.n	800dd1a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dcbc:	4b33      	ldr	r3, [pc, #204]	; (800dd8c <xTaskResumeAll+0x11c>)
 800dcbe:	68db      	ldr	r3, [r3, #12]
 800dcc0:	68db      	ldr	r3, [r3, #12]
 800dcc2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800dcc4:	68fb      	ldr	r3, [r7, #12]
 800dcc6:	3318      	adds	r3, #24
 800dcc8:	4618      	mov	r0, r3
 800dcca:	f7ff fd71 	bl	800d7b0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dcce:	68fb      	ldr	r3, [r7, #12]
 800dcd0:	3304      	adds	r3, #4
 800dcd2:	4618      	mov	r0, r3
 800dcd4:	f7ff fd6c 	bl	800d7b0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800dcd8:	68fb      	ldr	r3, [r7, #12]
 800dcda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dcdc:	2201      	movs	r2, #1
 800dcde:	409a      	lsls	r2, r3
 800dce0:	4b2b      	ldr	r3, [pc, #172]	; (800dd90 <xTaskResumeAll+0x120>)
 800dce2:	681b      	ldr	r3, [r3, #0]
 800dce4:	4313      	orrs	r3, r2
 800dce6:	4a2a      	ldr	r2, [pc, #168]	; (800dd90 <xTaskResumeAll+0x120>)
 800dce8:	6013      	str	r3, [r2, #0]
 800dcea:	68fb      	ldr	r3, [r7, #12]
 800dcec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dcee:	4613      	mov	r3, r2
 800dcf0:	009b      	lsls	r3, r3, #2
 800dcf2:	4413      	add	r3, r2
 800dcf4:	009b      	lsls	r3, r3, #2
 800dcf6:	4a27      	ldr	r2, [pc, #156]	; (800dd94 <xTaskResumeAll+0x124>)
 800dcf8:	441a      	add	r2, r3
 800dcfa:	68fb      	ldr	r3, [r7, #12]
 800dcfc:	3304      	adds	r3, #4
 800dcfe:	4619      	mov	r1, r3
 800dd00:	4610      	mov	r0, r2
 800dd02:	f7ff fcf8 	bl	800d6f6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800dd06:	68fb      	ldr	r3, [r7, #12]
 800dd08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd0a:	4b23      	ldr	r3, [pc, #140]	; (800dd98 <xTaskResumeAll+0x128>)
 800dd0c:	681b      	ldr	r3, [r3, #0]
 800dd0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd10:	429a      	cmp	r2, r3
 800dd12:	d302      	bcc.n	800dd1a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800dd14:	4b21      	ldr	r3, [pc, #132]	; (800dd9c <xTaskResumeAll+0x12c>)
 800dd16:	2201      	movs	r2, #1
 800dd18:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800dd1a:	4b1c      	ldr	r3, [pc, #112]	; (800dd8c <xTaskResumeAll+0x11c>)
 800dd1c:	681b      	ldr	r3, [r3, #0]
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	d1cc      	bne.n	800dcbc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800dd22:	68fb      	ldr	r3, [r7, #12]
 800dd24:	2b00      	cmp	r3, #0
 800dd26:	d001      	beq.n	800dd2c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800dd28:	f000 fa08 	bl	800e13c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800dd2c:	4b1c      	ldr	r3, [pc, #112]	; (800dda0 <xTaskResumeAll+0x130>)
 800dd2e:	681b      	ldr	r3, [r3, #0]
 800dd30:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	2b00      	cmp	r3, #0
 800dd36:	d010      	beq.n	800dd5a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800dd38:	f000 f836 	bl	800dda8 <xTaskIncrementTick>
 800dd3c:	4603      	mov	r3, r0
 800dd3e:	2b00      	cmp	r3, #0
 800dd40:	d002      	beq.n	800dd48 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800dd42:	4b16      	ldr	r3, [pc, #88]	; (800dd9c <xTaskResumeAll+0x12c>)
 800dd44:	2201      	movs	r2, #1
 800dd46:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	3b01      	subs	r3, #1
 800dd4c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	d1f1      	bne.n	800dd38 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800dd54:	4b12      	ldr	r3, [pc, #72]	; (800dda0 <xTaskResumeAll+0x130>)
 800dd56:	2200      	movs	r2, #0
 800dd58:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800dd5a:	4b10      	ldr	r3, [pc, #64]	; (800dd9c <xTaskResumeAll+0x12c>)
 800dd5c:	681b      	ldr	r3, [r3, #0]
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	d009      	beq.n	800dd76 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800dd62:	2301      	movs	r3, #1
 800dd64:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800dd66:	4b0f      	ldr	r3, [pc, #60]	; (800dda4 <xTaskResumeAll+0x134>)
 800dd68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dd6c:	601a      	str	r2, [r3, #0]
 800dd6e:	f3bf 8f4f 	dsb	sy
 800dd72:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800dd76:	f000 fbe5 	bl	800e544 <vPortExitCritical>

	return xAlreadyYielded;
 800dd7a:	68bb      	ldr	r3, [r7, #8]
}
 800dd7c:	4618      	mov	r0, r3
 800dd7e:	3710      	adds	r7, #16
 800dd80:	46bd      	mov	sp, r7
 800dd82:	bd80      	pop	{r7, pc}
 800dd84:	20002c5c 	.word	0x20002c5c
 800dd88:	20002c34 	.word	0x20002c34
 800dd8c:	20002bf4 	.word	0x20002bf4
 800dd90:	20002c3c 	.word	0x20002c3c
 800dd94:	20002b38 	.word	0x20002b38
 800dd98:	20002b34 	.word	0x20002b34
 800dd9c:	20002c48 	.word	0x20002c48
 800dda0:	20002c44 	.word	0x20002c44
 800dda4:	e000ed04 	.word	0xe000ed04

0800dda8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800dda8:	b580      	push	{r7, lr}
 800ddaa:	b086      	sub	sp, #24
 800ddac:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ddae:	2300      	movs	r3, #0
 800ddb0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ddb2:	4b4e      	ldr	r3, [pc, #312]	; (800deec <xTaskIncrementTick+0x144>)
 800ddb4:	681b      	ldr	r3, [r3, #0]
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	f040 808e 	bne.w	800ded8 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ddbc:	4b4c      	ldr	r3, [pc, #304]	; (800def0 <xTaskIncrementTick+0x148>)
 800ddbe:	681b      	ldr	r3, [r3, #0]
 800ddc0:	3301      	adds	r3, #1
 800ddc2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ddc4:	4a4a      	ldr	r2, [pc, #296]	; (800def0 <xTaskIncrementTick+0x148>)
 800ddc6:	693b      	ldr	r3, [r7, #16]
 800ddc8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ddca:	693b      	ldr	r3, [r7, #16]
 800ddcc:	2b00      	cmp	r3, #0
 800ddce:	d120      	bne.n	800de12 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800ddd0:	4b48      	ldr	r3, [pc, #288]	; (800def4 <xTaskIncrementTick+0x14c>)
 800ddd2:	681b      	ldr	r3, [r3, #0]
 800ddd4:	681b      	ldr	r3, [r3, #0]
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	d00a      	beq.n	800ddf0 <xTaskIncrementTick+0x48>
	__asm volatile
 800ddda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddde:	f383 8811 	msr	BASEPRI, r3
 800dde2:	f3bf 8f6f 	isb	sy
 800dde6:	f3bf 8f4f 	dsb	sy
 800ddea:	603b      	str	r3, [r7, #0]
}
 800ddec:	bf00      	nop
 800ddee:	e7fe      	b.n	800ddee <xTaskIncrementTick+0x46>
 800ddf0:	4b40      	ldr	r3, [pc, #256]	; (800def4 <xTaskIncrementTick+0x14c>)
 800ddf2:	681b      	ldr	r3, [r3, #0]
 800ddf4:	60fb      	str	r3, [r7, #12]
 800ddf6:	4b40      	ldr	r3, [pc, #256]	; (800def8 <xTaskIncrementTick+0x150>)
 800ddf8:	681b      	ldr	r3, [r3, #0]
 800ddfa:	4a3e      	ldr	r2, [pc, #248]	; (800def4 <xTaskIncrementTick+0x14c>)
 800ddfc:	6013      	str	r3, [r2, #0]
 800ddfe:	4a3e      	ldr	r2, [pc, #248]	; (800def8 <xTaskIncrementTick+0x150>)
 800de00:	68fb      	ldr	r3, [r7, #12]
 800de02:	6013      	str	r3, [r2, #0]
 800de04:	4b3d      	ldr	r3, [pc, #244]	; (800defc <xTaskIncrementTick+0x154>)
 800de06:	681b      	ldr	r3, [r3, #0]
 800de08:	3301      	adds	r3, #1
 800de0a:	4a3c      	ldr	r2, [pc, #240]	; (800defc <xTaskIncrementTick+0x154>)
 800de0c:	6013      	str	r3, [r2, #0]
 800de0e:	f000 f995 	bl	800e13c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800de12:	4b3b      	ldr	r3, [pc, #236]	; (800df00 <xTaskIncrementTick+0x158>)
 800de14:	681b      	ldr	r3, [r3, #0]
 800de16:	693a      	ldr	r2, [r7, #16]
 800de18:	429a      	cmp	r2, r3
 800de1a:	d348      	bcc.n	800deae <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800de1c:	4b35      	ldr	r3, [pc, #212]	; (800def4 <xTaskIncrementTick+0x14c>)
 800de1e:	681b      	ldr	r3, [r3, #0]
 800de20:	681b      	ldr	r3, [r3, #0]
 800de22:	2b00      	cmp	r3, #0
 800de24:	d104      	bne.n	800de30 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800de26:	4b36      	ldr	r3, [pc, #216]	; (800df00 <xTaskIncrementTick+0x158>)
 800de28:	f04f 32ff 	mov.w	r2, #4294967295
 800de2c:	601a      	str	r2, [r3, #0]
					break;
 800de2e:	e03e      	b.n	800deae <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800de30:	4b30      	ldr	r3, [pc, #192]	; (800def4 <xTaskIncrementTick+0x14c>)
 800de32:	681b      	ldr	r3, [r3, #0]
 800de34:	68db      	ldr	r3, [r3, #12]
 800de36:	68db      	ldr	r3, [r3, #12]
 800de38:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800de3a:	68bb      	ldr	r3, [r7, #8]
 800de3c:	685b      	ldr	r3, [r3, #4]
 800de3e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800de40:	693a      	ldr	r2, [r7, #16]
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	429a      	cmp	r2, r3
 800de46:	d203      	bcs.n	800de50 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800de48:	4a2d      	ldr	r2, [pc, #180]	; (800df00 <xTaskIncrementTick+0x158>)
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800de4e:	e02e      	b.n	800deae <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800de50:	68bb      	ldr	r3, [r7, #8]
 800de52:	3304      	adds	r3, #4
 800de54:	4618      	mov	r0, r3
 800de56:	f7ff fcab 	bl	800d7b0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800de5a:	68bb      	ldr	r3, [r7, #8]
 800de5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800de5e:	2b00      	cmp	r3, #0
 800de60:	d004      	beq.n	800de6c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800de62:	68bb      	ldr	r3, [r7, #8]
 800de64:	3318      	adds	r3, #24
 800de66:	4618      	mov	r0, r3
 800de68:	f7ff fca2 	bl	800d7b0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800de6c:	68bb      	ldr	r3, [r7, #8]
 800de6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de70:	2201      	movs	r2, #1
 800de72:	409a      	lsls	r2, r3
 800de74:	4b23      	ldr	r3, [pc, #140]	; (800df04 <xTaskIncrementTick+0x15c>)
 800de76:	681b      	ldr	r3, [r3, #0]
 800de78:	4313      	orrs	r3, r2
 800de7a:	4a22      	ldr	r2, [pc, #136]	; (800df04 <xTaskIncrementTick+0x15c>)
 800de7c:	6013      	str	r3, [r2, #0]
 800de7e:	68bb      	ldr	r3, [r7, #8]
 800de80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de82:	4613      	mov	r3, r2
 800de84:	009b      	lsls	r3, r3, #2
 800de86:	4413      	add	r3, r2
 800de88:	009b      	lsls	r3, r3, #2
 800de8a:	4a1f      	ldr	r2, [pc, #124]	; (800df08 <xTaskIncrementTick+0x160>)
 800de8c:	441a      	add	r2, r3
 800de8e:	68bb      	ldr	r3, [r7, #8]
 800de90:	3304      	adds	r3, #4
 800de92:	4619      	mov	r1, r3
 800de94:	4610      	mov	r0, r2
 800de96:	f7ff fc2e 	bl	800d6f6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800de9a:	68bb      	ldr	r3, [r7, #8]
 800de9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de9e:	4b1b      	ldr	r3, [pc, #108]	; (800df0c <xTaskIncrementTick+0x164>)
 800dea0:	681b      	ldr	r3, [r3, #0]
 800dea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dea4:	429a      	cmp	r2, r3
 800dea6:	d3b9      	bcc.n	800de1c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800dea8:	2301      	movs	r3, #1
 800deaa:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800deac:	e7b6      	b.n	800de1c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800deae:	4b17      	ldr	r3, [pc, #92]	; (800df0c <xTaskIncrementTick+0x164>)
 800deb0:	681b      	ldr	r3, [r3, #0]
 800deb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800deb4:	4914      	ldr	r1, [pc, #80]	; (800df08 <xTaskIncrementTick+0x160>)
 800deb6:	4613      	mov	r3, r2
 800deb8:	009b      	lsls	r3, r3, #2
 800deba:	4413      	add	r3, r2
 800debc:	009b      	lsls	r3, r3, #2
 800debe:	440b      	add	r3, r1
 800dec0:	681b      	ldr	r3, [r3, #0]
 800dec2:	2b01      	cmp	r3, #1
 800dec4:	d901      	bls.n	800deca <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800dec6:	2301      	movs	r3, #1
 800dec8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800deca:	4b11      	ldr	r3, [pc, #68]	; (800df10 <xTaskIncrementTick+0x168>)
 800decc:	681b      	ldr	r3, [r3, #0]
 800dece:	2b00      	cmp	r3, #0
 800ded0:	d007      	beq.n	800dee2 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800ded2:	2301      	movs	r3, #1
 800ded4:	617b      	str	r3, [r7, #20]
 800ded6:	e004      	b.n	800dee2 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800ded8:	4b0e      	ldr	r3, [pc, #56]	; (800df14 <xTaskIncrementTick+0x16c>)
 800deda:	681b      	ldr	r3, [r3, #0]
 800dedc:	3301      	adds	r3, #1
 800dede:	4a0d      	ldr	r2, [pc, #52]	; (800df14 <xTaskIncrementTick+0x16c>)
 800dee0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800dee2:	697b      	ldr	r3, [r7, #20]
}
 800dee4:	4618      	mov	r0, r3
 800dee6:	3718      	adds	r7, #24
 800dee8:	46bd      	mov	sp, r7
 800deea:	bd80      	pop	{r7, pc}
 800deec:	20002c5c 	.word	0x20002c5c
 800def0:	20002c38 	.word	0x20002c38
 800def4:	20002bec 	.word	0x20002bec
 800def8:	20002bf0 	.word	0x20002bf0
 800defc:	20002c4c 	.word	0x20002c4c
 800df00:	20002c54 	.word	0x20002c54
 800df04:	20002c3c 	.word	0x20002c3c
 800df08:	20002b38 	.word	0x20002b38
 800df0c:	20002b34 	.word	0x20002b34
 800df10:	20002c48 	.word	0x20002c48
 800df14:	20002c44 	.word	0x20002c44

0800df18 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800df18:	b480      	push	{r7}
 800df1a:	b087      	sub	sp, #28
 800df1c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800df1e:	4b27      	ldr	r3, [pc, #156]	; (800dfbc <vTaskSwitchContext+0xa4>)
 800df20:	681b      	ldr	r3, [r3, #0]
 800df22:	2b00      	cmp	r3, #0
 800df24:	d003      	beq.n	800df2e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800df26:	4b26      	ldr	r3, [pc, #152]	; (800dfc0 <vTaskSwitchContext+0xa8>)
 800df28:	2201      	movs	r2, #1
 800df2a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800df2c:	e03f      	b.n	800dfae <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800df2e:	4b24      	ldr	r3, [pc, #144]	; (800dfc0 <vTaskSwitchContext+0xa8>)
 800df30:	2200      	movs	r2, #0
 800df32:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800df34:	4b23      	ldr	r3, [pc, #140]	; (800dfc4 <vTaskSwitchContext+0xac>)
 800df36:	681b      	ldr	r3, [r3, #0]
 800df38:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800df3a:	68fb      	ldr	r3, [r7, #12]
 800df3c:	fab3 f383 	clz	r3, r3
 800df40:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800df42:	7afb      	ldrb	r3, [r7, #11]
 800df44:	f1c3 031f 	rsb	r3, r3, #31
 800df48:	617b      	str	r3, [r7, #20]
 800df4a:	491f      	ldr	r1, [pc, #124]	; (800dfc8 <vTaskSwitchContext+0xb0>)
 800df4c:	697a      	ldr	r2, [r7, #20]
 800df4e:	4613      	mov	r3, r2
 800df50:	009b      	lsls	r3, r3, #2
 800df52:	4413      	add	r3, r2
 800df54:	009b      	lsls	r3, r3, #2
 800df56:	440b      	add	r3, r1
 800df58:	681b      	ldr	r3, [r3, #0]
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	d10a      	bne.n	800df74 <vTaskSwitchContext+0x5c>
	__asm volatile
 800df5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df62:	f383 8811 	msr	BASEPRI, r3
 800df66:	f3bf 8f6f 	isb	sy
 800df6a:	f3bf 8f4f 	dsb	sy
 800df6e:	607b      	str	r3, [r7, #4]
}
 800df70:	bf00      	nop
 800df72:	e7fe      	b.n	800df72 <vTaskSwitchContext+0x5a>
 800df74:	697a      	ldr	r2, [r7, #20]
 800df76:	4613      	mov	r3, r2
 800df78:	009b      	lsls	r3, r3, #2
 800df7a:	4413      	add	r3, r2
 800df7c:	009b      	lsls	r3, r3, #2
 800df7e:	4a12      	ldr	r2, [pc, #72]	; (800dfc8 <vTaskSwitchContext+0xb0>)
 800df80:	4413      	add	r3, r2
 800df82:	613b      	str	r3, [r7, #16]
 800df84:	693b      	ldr	r3, [r7, #16]
 800df86:	685b      	ldr	r3, [r3, #4]
 800df88:	685a      	ldr	r2, [r3, #4]
 800df8a:	693b      	ldr	r3, [r7, #16]
 800df8c:	605a      	str	r2, [r3, #4]
 800df8e:	693b      	ldr	r3, [r7, #16]
 800df90:	685a      	ldr	r2, [r3, #4]
 800df92:	693b      	ldr	r3, [r7, #16]
 800df94:	3308      	adds	r3, #8
 800df96:	429a      	cmp	r2, r3
 800df98:	d104      	bne.n	800dfa4 <vTaskSwitchContext+0x8c>
 800df9a:	693b      	ldr	r3, [r7, #16]
 800df9c:	685b      	ldr	r3, [r3, #4]
 800df9e:	685a      	ldr	r2, [r3, #4]
 800dfa0:	693b      	ldr	r3, [r7, #16]
 800dfa2:	605a      	str	r2, [r3, #4]
 800dfa4:	693b      	ldr	r3, [r7, #16]
 800dfa6:	685b      	ldr	r3, [r3, #4]
 800dfa8:	68db      	ldr	r3, [r3, #12]
 800dfaa:	4a08      	ldr	r2, [pc, #32]	; (800dfcc <vTaskSwitchContext+0xb4>)
 800dfac:	6013      	str	r3, [r2, #0]
}
 800dfae:	bf00      	nop
 800dfb0:	371c      	adds	r7, #28
 800dfb2:	46bd      	mov	sp, r7
 800dfb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfb8:	4770      	bx	lr
 800dfba:	bf00      	nop
 800dfbc:	20002c5c 	.word	0x20002c5c
 800dfc0:	20002c48 	.word	0x20002c48
 800dfc4:	20002c3c 	.word	0x20002c3c
 800dfc8:	20002b38 	.word	0x20002b38
 800dfcc:	20002b34 	.word	0x20002b34

0800dfd0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800dfd0:	b580      	push	{r7, lr}
 800dfd2:	b082      	sub	sp, #8
 800dfd4:	af00      	add	r7, sp, #0
 800dfd6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800dfd8:	f000 f852 	bl	800e080 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800dfdc:	4b06      	ldr	r3, [pc, #24]	; (800dff8 <prvIdleTask+0x28>)
 800dfde:	681b      	ldr	r3, [r3, #0]
 800dfe0:	2b01      	cmp	r3, #1
 800dfe2:	d9f9      	bls.n	800dfd8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800dfe4:	4b05      	ldr	r3, [pc, #20]	; (800dffc <prvIdleTask+0x2c>)
 800dfe6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dfea:	601a      	str	r2, [r3, #0]
 800dfec:	f3bf 8f4f 	dsb	sy
 800dff0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800dff4:	e7f0      	b.n	800dfd8 <prvIdleTask+0x8>
 800dff6:	bf00      	nop
 800dff8:	20002b38 	.word	0x20002b38
 800dffc:	e000ed04 	.word	0xe000ed04

0800e000 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e000:	b580      	push	{r7, lr}
 800e002:	b082      	sub	sp, #8
 800e004:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e006:	2300      	movs	r3, #0
 800e008:	607b      	str	r3, [r7, #4]
 800e00a:	e00c      	b.n	800e026 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e00c:	687a      	ldr	r2, [r7, #4]
 800e00e:	4613      	mov	r3, r2
 800e010:	009b      	lsls	r3, r3, #2
 800e012:	4413      	add	r3, r2
 800e014:	009b      	lsls	r3, r3, #2
 800e016:	4a12      	ldr	r2, [pc, #72]	; (800e060 <prvInitialiseTaskLists+0x60>)
 800e018:	4413      	add	r3, r2
 800e01a:	4618      	mov	r0, r3
 800e01c:	f7ff fb3e 	bl	800d69c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	3301      	adds	r3, #1
 800e024:	607b      	str	r3, [r7, #4]
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	2b06      	cmp	r3, #6
 800e02a:	d9ef      	bls.n	800e00c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e02c:	480d      	ldr	r0, [pc, #52]	; (800e064 <prvInitialiseTaskLists+0x64>)
 800e02e:	f7ff fb35 	bl	800d69c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e032:	480d      	ldr	r0, [pc, #52]	; (800e068 <prvInitialiseTaskLists+0x68>)
 800e034:	f7ff fb32 	bl	800d69c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e038:	480c      	ldr	r0, [pc, #48]	; (800e06c <prvInitialiseTaskLists+0x6c>)
 800e03a:	f7ff fb2f 	bl	800d69c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e03e:	480c      	ldr	r0, [pc, #48]	; (800e070 <prvInitialiseTaskLists+0x70>)
 800e040:	f7ff fb2c 	bl	800d69c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e044:	480b      	ldr	r0, [pc, #44]	; (800e074 <prvInitialiseTaskLists+0x74>)
 800e046:	f7ff fb29 	bl	800d69c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e04a:	4b0b      	ldr	r3, [pc, #44]	; (800e078 <prvInitialiseTaskLists+0x78>)
 800e04c:	4a05      	ldr	r2, [pc, #20]	; (800e064 <prvInitialiseTaskLists+0x64>)
 800e04e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e050:	4b0a      	ldr	r3, [pc, #40]	; (800e07c <prvInitialiseTaskLists+0x7c>)
 800e052:	4a05      	ldr	r2, [pc, #20]	; (800e068 <prvInitialiseTaskLists+0x68>)
 800e054:	601a      	str	r2, [r3, #0]
}
 800e056:	bf00      	nop
 800e058:	3708      	adds	r7, #8
 800e05a:	46bd      	mov	sp, r7
 800e05c:	bd80      	pop	{r7, pc}
 800e05e:	bf00      	nop
 800e060:	20002b38 	.word	0x20002b38
 800e064:	20002bc4 	.word	0x20002bc4
 800e068:	20002bd8 	.word	0x20002bd8
 800e06c:	20002bf4 	.word	0x20002bf4
 800e070:	20002c08 	.word	0x20002c08
 800e074:	20002c20 	.word	0x20002c20
 800e078:	20002bec 	.word	0x20002bec
 800e07c:	20002bf0 	.word	0x20002bf0

0800e080 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e080:	b580      	push	{r7, lr}
 800e082:	b082      	sub	sp, #8
 800e084:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e086:	e019      	b.n	800e0bc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e088:	f000 fa2c 	bl	800e4e4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e08c:	4b10      	ldr	r3, [pc, #64]	; (800e0d0 <prvCheckTasksWaitingTermination+0x50>)
 800e08e:	68db      	ldr	r3, [r3, #12]
 800e090:	68db      	ldr	r3, [r3, #12]
 800e092:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	3304      	adds	r3, #4
 800e098:	4618      	mov	r0, r3
 800e09a:	f7ff fb89 	bl	800d7b0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e09e:	4b0d      	ldr	r3, [pc, #52]	; (800e0d4 <prvCheckTasksWaitingTermination+0x54>)
 800e0a0:	681b      	ldr	r3, [r3, #0]
 800e0a2:	3b01      	subs	r3, #1
 800e0a4:	4a0b      	ldr	r2, [pc, #44]	; (800e0d4 <prvCheckTasksWaitingTermination+0x54>)
 800e0a6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e0a8:	4b0b      	ldr	r3, [pc, #44]	; (800e0d8 <prvCheckTasksWaitingTermination+0x58>)
 800e0aa:	681b      	ldr	r3, [r3, #0]
 800e0ac:	3b01      	subs	r3, #1
 800e0ae:	4a0a      	ldr	r2, [pc, #40]	; (800e0d8 <prvCheckTasksWaitingTermination+0x58>)
 800e0b0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e0b2:	f000 fa47 	bl	800e544 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e0b6:	6878      	ldr	r0, [r7, #4]
 800e0b8:	f000 f810 	bl	800e0dc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e0bc:	4b06      	ldr	r3, [pc, #24]	; (800e0d8 <prvCheckTasksWaitingTermination+0x58>)
 800e0be:	681b      	ldr	r3, [r3, #0]
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	d1e1      	bne.n	800e088 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e0c4:	bf00      	nop
 800e0c6:	bf00      	nop
 800e0c8:	3708      	adds	r7, #8
 800e0ca:	46bd      	mov	sp, r7
 800e0cc:	bd80      	pop	{r7, pc}
 800e0ce:	bf00      	nop
 800e0d0:	20002c08 	.word	0x20002c08
 800e0d4:	20002c34 	.word	0x20002c34
 800e0d8:	20002c1c 	.word	0x20002c1c

0800e0dc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e0dc:	b580      	push	{r7, lr}
 800e0de:	b084      	sub	sp, #16
 800e0e0:	af00      	add	r7, sp, #0
 800e0e2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e0ea:	2b00      	cmp	r3, #0
 800e0ec:	d108      	bne.n	800e100 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e0f2:	4618      	mov	r0, r3
 800e0f4:	f000 fba4 	bl	800e840 <vPortFree>
				vPortFree( pxTCB );
 800e0f8:	6878      	ldr	r0, [r7, #4]
 800e0fa:	f000 fba1 	bl	800e840 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e0fe:	e018      	b.n	800e132 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e106:	2b01      	cmp	r3, #1
 800e108:	d103      	bne.n	800e112 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800e10a:	6878      	ldr	r0, [r7, #4]
 800e10c:	f000 fb98 	bl	800e840 <vPortFree>
	}
 800e110:	e00f      	b.n	800e132 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e118:	2b02      	cmp	r3, #2
 800e11a:	d00a      	beq.n	800e132 <prvDeleteTCB+0x56>
	__asm volatile
 800e11c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e120:	f383 8811 	msr	BASEPRI, r3
 800e124:	f3bf 8f6f 	isb	sy
 800e128:	f3bf 8f4f 	dsb	sy
 800e12c:	60fb      	str	r3, [r7, #12]
}
 800e12e:	bf00      	nop
 800e130:	e7fe      	b.n	800e130 <prvDeleteTCB+0x54>
	}
 800e132:	bf00      	nop
 800e134:	3710      	adds	r7, #16
 800e136:	46bd      	mov	sp, r7
 800e138:	bd80      	pop	{r7, pc}
	...

0800e13c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e13c:	b480      	push	{r7}
 800e13e:	b083      	sub	sp, #12
 800e140:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e142:	4b0c      	ldr	r3, [pc, #48]	; (800e174 <prvResetNextTaskUnblockTime+0x38>)
 800e144:	681b      	ldr	r3, [r3, #0]
 800e146:	681b      	ldr	r3, [r3, #0]
 800e148:	2b00      	cmp	r3, #0
 800e14a:	d104      	bne.n	800e156 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e14c:	4b0a      	ldr	r3, [pc, #40]	; (800e178 <prvResetNextTaskUnblockTime+0x3c>)
 800e14e:	f04f 32ff 	mov.w	r2, #4294967295
 800e152:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e154:	e008      	b.n	800e168 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e156:	4b07      	ldr	r3, [pc, #28]	; (800e174 <prvResetNextTaskUnblockTime+0x38>)
 800e158:	681b      	ldr	r3, [r3, #0]
 800e15a:	68db      	ldr	r3, [r3, #12]
 800e15c:	68db      	ldr	r3, [r3, #12]
 800e15e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	685b      	ldr	r3, [r3, #4]
 800e164:	4a04      	ldr	r2, [pc, #16]	; (800e178 <prvResetNextTaskUnblockTime+0x3c>)
 800e166:	6013      	str	r3, [r2, #0]
}
 800e168:	bf00      	nop
 800e16a:	370c      	adds	r7, #12
 800e16c:	46bd      	mov	sp, r7
 800e16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e172:	4770      	bx	lr
 800e174:	20002bec 	.word	0x20002bec
 800e178:	20002c54 	.word	0x20002c54

0800e17c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e17c:	b480      	push	{r7}
 800e17e:	b083      	sub	sp, #12
 800e180:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e182:	4b0b      	ldr	r3, [pc, #44]	; (800e1b0 <xTaskGetSchedulerState+0x34>)
 800e184:	681b      	ldr	r3, [r3, #0]
 800e186:	2b00      	cmp	r3, #0
 800e188:	d102      	bne.n	800e190 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e18a:	2301      	movs	r3, #1
 800e18c:	607b      	str	r3, [r7, #4]
 800e18e:	e008      	b.n	800e1a2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e190:	4b08      	ldr	r3, [pc, #32]	; (800e1b4 <xTaskGetSchedulerState+0x38>)
 800e192:	681b      	ldr	r3, [r3, #0]
 800e194:	2b00      	cmp	r3, #0
 800e196:	d102      	bne.n	800e19e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e198:	2302      	movs	r3, #2
 800e19a:	607b      	str	r3, [r7, #4]
 800e19c:	e001      	b.n	800e1a2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e19e:	2300      	movs	r3, #0
 800e1a0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e1a2:	687b      	ldr	r3, [r7, #4]
	}
 800e1a4:	4618      	mov	r0, r3
 800e1a6:	370c      	adds	r7, #12
 800e1a8:	46bd      	mov	sp, r7
 800e1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1ae:	4770      	bx	lr
 800e1b0:	20002c40 	.word	0x20002c40
 800e1b4:	20002c5c 	.word	0x20002c5c

0800e1b8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e1b8:	b580      	push	{r7, lr}
 800e1ba:	b084      	sub	sp, #16
 800e1bc:	af00      	add	r7, sp, #0
 800e1be:	6078      	str	r0, [r7, #4]
 800e1c0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e1c2:	4b29      	ldr	r3, [pc, #164]	; (800e268 <prvAddCurrentTaskToDelayedList+0xb0>)
 800e1c4:	681b      	ldr	r3, [r3, #0]
 800e1c6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e1c8:	4b28      	ldr	r3, [pc, #160]	; (800e26c <prvAddCurrentTaskToDelayedList+0xb4>)
 800e1ca:	681b      	ldr	r3, [r3, #0]
 800e1cc:	3304      	adds	r3, #4
 800e1ce:	4618      	mov	r0, r3
 800e1d0:	f7ff faee 	bl	800d7b0 <uxListRemove>
 800e1d4:	4603      	mov	r3, r0
 800e1d6:	2b00      	cmp	r3, #0
 800e1d8:	d10b      	bne.n	800e1f2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800e1da:	4b24      	ldr	r3, [pc, #144]	; (800e26c <prvAddCurrentTaskToDelayedList+0xb4>)
 800e1dc:	681b      	ldr	r3, [r3, #0]
 800e1de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1e0:	2201      	movs	r2, #1
 800e1e2:	fa02 f303 	lsl.w	r3, r2, r3
 800e1e6:	43da      	mvns	r2, r3
 800e1e8:	4b21      	ldr	r3, [pc, #132]	; (800e270 <prvAddCurrentTaskToDelayedList+0xb8>)
 800e1ea:	681b      	ldr	r3, [r3, #0]
 800e1ec:	4013      	ands	r3, r2
 800e1ee:	4a20      	ldr	r2, [pc, #128]	; (800e270 <prvAddCurrentTaskToDelayedList+0xb8>)
 800e1f0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e1f8:	d10a      	bne.n	800e210 <prvAddCurrentTaskToDelayedList+0x58>
 800e1fa:	683b      	ldr	r3, [r7, #0]
 800e1fc:	2b00      	cmp	r3, #0
 800e1fe:	d007      	beq.n	800e210 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e200:	4b1a      	ldr	r3, [pc, #104]	; (800e26c <prvAddCurrentTaskToDelayedList+0xb4>)
 800e202:	681b      	ldr	r3, [r3, #0]
 800e204:	3304      	adds	r3, #4
 800e206:	4619      	mov	r1, r3
 800e208:	481a      	ldr	r0, [pc, #104]	; (800e274 <prvAddCurrentTaskToDelayedList+0xbc>)
 800e20a:	f7ff fa74 	bl	800d6f6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e20e:	e026      	b.n	800e25e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e210:	68fa      	ldr	r2, [r7, #12]
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	4413      	add	r3, r2
 800e216:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e218:	4b14      	ldr	r3, [pc, #80]	; (800e26c <prvAddCurrentTaskToDelayedList+0xb4>)
 800e21a:	681b      	ldr	r3, [r3, #0]
 800e21c:	68ba      	ldr	r2, [r7, #8]
 800e21e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e220:	68ba      	ldr	r2, [r7, #8]
 800e222:	68fb      	ldr	r3, [r7, #12]
 800e224:	429a      	cmp	r2, r3
 800e226:	d209      	bcs.n	800e23c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e228:	4b13      	ldr	r3, [pc, #76]	; (800e278 <prvAddCurrentTaskToDelayedList+0xc0>)
 800e22a:	681a      	ldr	r2, [r3, #0]
 800e22c:	4b0f      	ldr	r3, [pc, #60]	; (800e26c <prvAddCurrentTaskToDelayedList+0xb4>)
 800e22e:	681b      	ldr	r3, [r3, #0]
 800e230:	3304      	adds	r3, #4
 800e232:	4619      	mov	r1, r3
 800e234:	4610      	mov	r0, r2
 800e236:	f7ff fa82 	bl	800d73e <vListInsert>
}
 800e23a:	e010      	b.n	800e25e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e23c:	4b0f      	ldr	r3, [pc, #60]	; (800e27c <prvAddCurrentTaskToDelayedList+0xc4>)
 800e23e:	681a      	ldr	r2, [r3, #0]
 800e240:	4b0a      	ldr	r3, [pc, #40]	; (800e26c <prvAddCurrentTaskToDelayedList+0xb4>)
 800e242:	681b      	ldr	r3, [r3, #0]
 800e244:	3304      	adds	r3, #4
 800e246:	4619      	mov	r1, r3
 800e248:	4610      	mov	r0, r2
 800e24a:	f7ff fa78 	bl	800d73e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e24e:	4b0c      	ldr	r3, [pc, #48]	; (800e280 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e250:	681b      	ldr	r3, [r3, #0]
 800e252:	68ba      	ldr	r2, [r7, #8]
 800e254:	429a      	cmp	r2, r3
 800e256:	d202      	bcs.n	800e25e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800e258:	4a09      	ldr	r2, [pc, #36]	; (800e280 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e25a:	68bb      	ldr	r3, [r7, #8]
 800e25c:	6013      	str	r3, [r2, #0]
}
 800e25e:	bf00      	nop
 800e260:	3710      	adds	r7, #16
 800e262:	46bd      	mov	sp, r7
 800e264:	bd80      	pop	{r7, pc}
 800e266:	bf00      	nop
 800e268:	20002c38 	.word	0x20002c38
 800e26c:	20002b34 	.word	0x20002b34
 800e270:	20002c3c 	.word	0x20002c3c
 800e274:	20002c20 	.word	0x20002c20
 800e278:	20002bf0 	.word	0x20002bf0
 800e27c:	20002bec 	.word	0x20002bec
 800e280:	20002c54 	.word	0x20002c54

0800e284 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e284:	b480      	push	{r7}
 800e286:	b085      	sub	sp, #20
 800e288:	af00      	add	r7, sp, #0
 800e28a:	60f8      	str	r0, [r7, #12]
 800e28c:	60b9      	str	r1, [r7, #8]
 800e28e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e290:	68fb      	ldr	r3, [r7, #12]
 800e292:	3b04      	subs	r3, #4
 800e294:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e296:	68fb      	ldr	r3, [r7, #12]
 800e298:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800e29c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e29e:	68fb      	ldr	r3, [r7, #12]
 800e2a0:	3b04      	subs	r3, #4
 800e2a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e2a4:	68bb      	ldr	r3, [r7, #8]
 800e2a6:	f023 0201 	bic.w	r2, r3, #1
 800e2aa:	68fb      	ldr	r3, [r7, #12]
 800e2ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e2ae:	68fb      	ldr	r3, [r7, #12]
 800e2b0:	3b04      	subs	r3, #4
 800e2b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e2b4:	4a0c      	ldr	r2, [pc, #48]	; (800e2e8 <pxPortInitialiseStack+0x64>)
 800e2b6:	68fb      	ldr	r3, [r7, #12]
 800e2b8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e2ba:	68fb      	ldr	r3, [r7, #12]
 800e2bc:	3b14      	subs	r3, #20
 800e2be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e2c0:	687a      	ldr	r2, [r7, #4]
 800e2c2:	68fb      	ldr	r3, [r7, #12]
 800e2c4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e2c6:	68fb      	ldr	r3, [r7, #12]
 800e2c8:	3b04      	subs	r3, #4
 800e2ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e2cc:	68fb      	ldr	r3, [r7, #12]
 800e2ce:	f06f 0202 	mvn.w	r2, #2
 800e2d2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e2d4:	68fb      	ldr	r3, [r7, #12]
 800e2d6:	3b20      	subs	r3, #32
 800e2d8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e2da:	68fb      	ldr	r3, [r7, #12]
}
 800e2dc:	4618      	mov	r0, r3
 800e2de:	3714      	adds	r7, #20
 800e2e0:	46bd      	mov	sp, r7
 800e2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2e6:	4770      	bx	lr
 800e2e8:	0800e2ed 	.word	0x0800e2ed

0800e2ec <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e2ec:	b480      	push	{r7}
 800e2ee:	b085      	sub	sp, #20
 800e2f0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e2f2:	2300      	movs	r3, #0
 800e2f4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e2f6:	4b12      	ldr	r3, [pc, #72]	; (800e340 <prvTaskExitError+0x54>)
 800e2f8:	681b      	ldr	r3, [r3, #0]
 800e2fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e2fe:	d00a      	beq.n	800e316 <prvTaskExitError+0x2a>
	__asm volatile
 800e300:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e304:	f383 8811 	msr	BASEPRI, r3
 800e308:	f3bf 8f6f 	isb	sy
 800e30c:	f3bf 8f4f 	dsb	sy
 800e310:	60fb      	str	r3, [r7, #12]
}
 800e312:	bf00      	nop
 800e314:	e7fe      	b.n	800e314 <prvTaskExitError+0x28>
	__asm volatile
 800e316:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e31a:	f383 8811 	msr	BASEPRI, r3
 800e31e:	f3bf 8f6f 	isb	sy
 800e322:	f3bf 8f4f 	dsb	sy
 800e326:	60bb      	str	r3, [r7, #8]
}
 800e328:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e32a:	bf00      	nop
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	2b00      	cmp	r3, #0
 800e330:	d0fc      	beq.n	800e32c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e332:	bf00      	nop
 800e334:	bf00      	nop
 800e336:	3714      	adds	r7, #20
 800e338:	46bd      	mov	sp, r7
 800e33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e33e:	4770      	bx	lr
 800e340:	20000018 	.word	0x20000018
	...

0800e350 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e350:	4b07      	ldr	r3, [pc, #28]	; (800e370 <pxCurrentTCBConst2>)
 800e352:	6819      	ldr	r1, [r3, #0]
 800e354:	6808      	ldr	r0, [r1, #0]
 800e356:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e35a:	f380 8809 	msr	PSP, r0
 800e35e:	f3bf 8f6f 	isb	sy
 800e362:	f04f 0000 	mov.w	r0, #0
 800e366:	f380 8811 	msr	BASEPRI, r0
 800e36a:	4770      	bx	lr
 800e36c:	f3af 8000 	nop.w

0800e370 <pxCurrentTCBConst2>:
 800e370:	20002b34 	.word	0x20002b34
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e374:	bf00      	nop
 800e376:	bf00      	nop

0800e378 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e378:	4808      	ldr	r0, [pc, #32]	; (800e39c <prvPortStartFirstTask+0x24>)
 800e37a:	6800      	ldr	r0, [r0, #0]
 800e37c:	6800      	ldr	r0, [r0, #0]
 800e37e:	f380 8808 	msr	MSP, r0
 800e382:	f04f 0000 	mov.w	r0, #0
 800e386:	f380 8814 	msr	CONTROL, r0
 800e38a:	b662      	cpsie	i
 800e38c:	b661      	cpsie	f
 800e38e:	f3bf 8f4f 	dsb	sy
 800e392:	f3bf 8f6f 	isb	sy
 800e396:	df00      	svc	0
 800e398:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e39a:	bf00      	nop
 800e39c:	e000ed08 	.word	0xe000ed08

0800e3a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e3a0:	b580      	push	{r7, lr}
 800e3a2:	b086      	sub	sp, #24
 800e3a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e3a6:	4b46      	ldr	r3, [pc, #280]	; (800e4c0 <xPortStartScheduler+0x120>)
 800e3a8:	681b      	ldr	r3, [r3, #0]
 800e3aa:	4a46      	ldr	r2, [pc, #280]	; (800e4c4 <xPortStartScheduler+0x124>)
 800e3ac:	4293      	cmp	r3, r2
 800e3ae:	d10a      	bne.n	800e3c6 <xPortStartScheduler+0x26>
	__asm volatile
 800e3b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3b4:	f383 8811 	msr	BASEPRI, r3
 800e3b8:	f3bf 8f6f 	isb	sy
 800e3bc:	f3bf 8f4f 	dsb	sy
 800e3c0:	613b      	str	r3, [r7, #16]
}
 800e3c2:	bf00      	nop
 800e3c4:	e7fe      	b.n	800e3c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e3c6:	4b3e      	ldr	r3, [pc, #248]	; (800e4c0 <xPortStartScheduler+0x120>)
 800e3c8:	681b      	ldr	r3, [r3, #0]
 800e3ca:	4a3f      	ldr	r2, [pc, #252]	; (800e4c8 <xPortStartScheduler+0x128>)
 800e3cc:	4293      	cmp	r3, r2
 800e3ce:	d10a      	bne.n	800e3e6 <xPortStartScheduler+0x46>
	__asm volatile
 800e3d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3d4:	f383 8811 	msr	BASEPRI, r3
 800e3d8:	f3bf 8f6f 	isb	sy
 800e3dc:	f3bf 8f4f 	dsb	sy
 800e3e0:	60fb      	str	r3, [r7, #12]
}
 800e3e2:	bf00      	nop
 800e3e4:	e7fe      	b.n	800e3e4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e3e6:	4b39      	ldr	r3, [pc, #228]	; (800e4cc <xPortStartScheduler+0x12c>)
 800e3e8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e3ea:	697b      	ldr	r3, [r7, #20]
 800e3ec:	781b      	ldrb	r3, [r3, #0]
 800e3ee:	b2db      	uxtb	r3, r3
 800e3f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e3f2:	697b      	ldr	r3, [r7, #20]
 800e3f4:	22ff      	movs	r2, #255	; 0xff
 800e3f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e3f8:	697b      	ldr	r3, [r7, #20]
 800e3fa:	781b      	ldrb	r3, [r3, #0]
 800e3fc:	b2db      	uxtb	r3, r3
 800e3fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e400:	78fb      	ldrb	r3, [r7, #3]
 800e402:	b2db      	uxtb	r3, r3
 800e404:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800e408:	b2da      	uxtb	r2, r3
 800e40a:	4b31      	ldr	r3, [pc, #196]	; (800e4d0 <xPortStartScheduler+0x130>)
 800e40c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e40e:	4b31      	ldr	r3, [pc, #196]	; (800e4d4 <xPortStartScheduler+0x134>)
 800e410:	2207      	movs	r2, #7
 800e412:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e414:	e009      	b.n	800e42a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800e416:	4b2f      	ldr	r3, [pc, #188]	; (800e4d4 <xPortStartScheduler+0x134>)
 800e418:	681b      	ldr	r3, [r3, #0]
 800e41a:	3b01      	subs	r3, #1
 800e41c:	4a2d      	ldr	r2, [pc, #180]	; (800e4d4 <xPortStartScheduler+0x134>)
 800e41e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e420:	78fb      	ldrb	r3, [r7, #3]
 800e422:	b2db      	uxtb	r3, r3
 800e424:	005b      	lsls	r3, r3, #1
 800e426:	b2db      	uxtb	r3, r3
 800e428:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e42a:	78fb      	ldrb	r3, [r7, #3]
 800e42c:	b2db      	uxtb	r3, r3
 800e42e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e432:	2b80      	cmp	r3, #128	; 0x80
 800e434:	d0ef      	beq.n	800e416 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e436:	4b27      	ldr	r3, [pc, #156]	; (800e4d4 <xPortStartScheduler+0x134>)
 800e438:	681b      	ldr	r3, [r3, #0]
 800e43a:	f1c3 0307 	rsb	r3, r3, #7
 800e43e:	2b04      	cmp	r3, #4
 800e440:	d00a      	beq.n	800e458 <xPortStartScheduler+0xb8>
	__asm volatile
 800e442:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e446:	f383 8811 	msr	BASEPRI, r3
 800e44a:	f3bf 8f6f 	isb	sy
 800e44e:	f3bf 8f4f 	dsb	sy
 800e452:	60bb      	str	r3, [r7, #8]
}
 800e454:	bf00      	nop
 800e456:	e7fe      	b.n	800e456 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e458:	4b1e      	ldr	r3, [pc, #120]	; (800e4d4 <xPortStartScheduler+0x134>)
 800e45a:	681b      	ldr	r3, [r3, #0]
 800e45c:	021b      	lsls	r3, r3, #8
 800e45e:	4a1d      	ldr	r2, [pc, #116]	; (800e4d4 <xPortStartScheduler+0x134>)
 800e460:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e462:	4b1c      	ldr	r3, [pc, #112]	; (800e4d4 <xPortStartScheduler+0x134>)
 800e464:	681b      	ldr	r3, [r3, #0]
 800e466:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e46a:	4a1a      	ldr	r2, [pc, #104]	; (800e4d4 <xPortStartScheduler+0x134>)
 800e46c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	b2da      	uxtb	r2, r3
 800e472:	697b      	ldr	r3, [r7, #20]
 800e474:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e476:	4b18      	ldr	r3, [pc, #96]	; (800e4d8 <xPortStartScheduler+0x138>)
 800e478:	681b      	ldr	r3, [r3, #0]
 800e47a:	4a17      	ldr	r2, [pc, #92]	; (800e4d8 <xPortStartScheduler+0x138>)
 800e47c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e480:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e482:	4b15      	ldr	r3, [pc, #84]	; (800e4d8 <xPortStartScheduler+0x138>)
 800e484:	681b      	ldr	r3, [r3, #0]
 800e486:	4a14      	ldr	r2, [pc, #80]	; (800e4d8 <xPortStartScheduler+0x138>)
 800e488:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800e48c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e48e:	f000 f8dd 	bl	800e64c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e492:	4b12      	ldr	r3, [pc, #72]	; (800e4dc <xPortStartScheduler+0x13c>)
 800e494:	2200      	movs	r2, #0
 800e496:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e498:	f000 f8fc 	bl	800e694 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e49c:	4b10      	ldr	r3, [pc, #64]	; (800e4e0 <xPortStartScheduler+0x140>)
 800e49e:	681b      	ldr	r3, [r3, #0]
 800e4a0:	4a0f      	ldr	r2, [pc, #60]	; (800e4e0 <xPortStartScheduler+0x140>)
 800e4a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800e4a6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e4a8:	f7ff ff66 	bl	800e378 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e4ac:	f7ff fd34 	bl	800df18 <vTaskSwitchContext>
	prvTaskExitError();
 800e4b0:	f7ff ff1c 	bl	800e2ec <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e4b4:	2300      	movs	r3, #0
}
 800e4b6:	4618      	mov	r0, r3
 800e4b8:	3718      	adds	r7, #24
 800e4ba:	46bd      	mov	sp, r7
 800e4bc:	bd80      	pop	{r7, pc}
 800e4be:	bf00      	nop
 800e4c0:	e000ed00 	.word	0xe000ed00
 800e4c4:	410fc271 	.word	0x410fc271
 800e4c8:	410fc270 	.word	0x410fc270
 800e4cc:	e000e400 	.word	0xe000e400
 800e4d0:	20002c60 	.word	0x20002c60
 800e4d4:	20002c64 	.word	0x20002c64
 800e4d8:	e000ed20 	.word	0xe000ed20
 800e4dc:	20000018 	.word	0x20000018
 800e4e0:	e000ef34 	.word	0xe000ef34

0800e4e4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e4e4:	b480      	push	{r7}
 800e4e6:	b083      	sub	sp, #12
 800e4e8:	af00      	add	r7, sp, #0
	__asm volatile
 800e4ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4ee:	f383 8811 	msr	BASEPRI, r3
 800e4f2:	f3bf 8f6f 	isb	sy
 800e4f6:	f3bf 8f4f 	dsb	sy
 800e4fa:	607b      	str	r3, [r7, #4]
}
 800e4fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e4fe:	4b0f      	ldr	r3, [pc, #60]	; (800e53c <vPortEnterCritical+0x58>)
 800e500:	681b      	ldr	r3, [r3, #0]
 800e502:	3301      	adds	r3, #1
 800e504:	4a0d      	ldr	r2, [pc, #52]	; (800e53c <vPortEnterCritical+0x58>)
 800e506:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e508:	4b0c      	ldr	r3, [pc, #48]	; (800e53c <vPortEnterCritical+0x58>)
 800e50a:	681b      	ldr	r3, [r3, #0]
 800e50c:	2b01      	cmp	r3, #1
 800e50e:	d10f      	bne.n	800e530 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e510:	4b0b      	ldr	r3, [pc, #44]	; (800e540 <vPortEnterCritical+0x5c>)
 800e512:	681b      	ldr	r3, [r3, #0]
 800e514:	b2db      	uxtb	r3, r3
 800e516:	2b00      	cmp	r3, #0
 800e518:	d00a      	beq.n	800e530 <vPortEnterCritical+0x4c>
	__asm volatile
 800e51a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e51e:	f383 8811 	msr	BASEPRI, r3
 800e522:	f3bf 8f6f 	isb	sy
 800e526:	f3bf 8f4f 	dsb	sy
 800e52a:	603b      	str	r3, [r7, #0]
}
 800e52c:	bf00      	nop
 800e52e:	e7fe      	b.n	800e52e <vPortEnterCritical+0x4a>
	}
}
 800e530:	bf00      	nop
 800e532:	370c      	adds	r7, #12
 800e534:	46bd      	mov	sp, r7
 800e536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e53a:	4770      	bx	lr
 800e53c:	20000018 	.word	0x20000018
 800e540:	e000ed04 	.word	0xe000ed04

0800e544 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e544:	b480      	push	{r7}
 800e546:	b083      	sub	sp, #12
 800e548:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e54a:	4b12      	ldr	r3, [pc, #72]	; (800e594 <vPortExitCritical+0x50>)
 800e54c:	681b      	ldr	r3, [r3, #0]
 800e54e:	2b00      	cmp	r3, #0
 800e550:	d10a      	bne.n	800e568 <vPortExitCritical+0x24>
	__asm volatile
 800e552:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e556:	f383 8811 	msr	BASEPRI, r3
 800e55a:	f3bf 8f6f 	isb	sy
 800e55e:	f3bf 8f4f 	dsb	sy
 800e562:	607b      	str	r3, [r7, #4]
}
 800e564:	bf00      	nop
 800e566:	e7fe      	b.n	800e566 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800e568:	4b0a      	ldr	r3, [pc, #40]	; (800e594 <vPortExitCritical+0x50>)
 800e56a:	681b      	ldr	r3, [r3, #0]
 800e56c:	3b01      	subs	r3, #1
 800e56e:	4a09      	ldr	r2, [pc, #36]	; (800e594 <vPortExitCritical+0x50>)
 800e570:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e572:	4b08      	ldr	r3, [pc, #32]	; (800e594 <vPortExitCritical+0x50>)
 800e574:	681b      	ldr	r3, [r3, #0]
 800e576:	2b00      	cmp	r3, #0
 800e578:	d105      	bne.n	800e586 <vPortExitCritical+0x42>
 800e57a:	2300      	movs	r3, #0
 800e57c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800e57e:	683b      	ldr	r3, [r7, #0]
 800e580:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800e584:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800e586:	bf00      	nop
 800e588:	370c      	adds	r7, #12
 800e58a:	46bd      	mov	sp, r7
 800e58c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e590:	4770      	bx	lr
 800e592:	bf00      	nop
 800e594:	20000018 	.word	0x20000018
	...

0800e5a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e5a0:	f3ef 8009 	mrs	r0, PSP
 800e5a4:	f3bf 8f6f 	isb	sy
 800e5a8:	4b15      	ldr	r3, [pc, #84]	; (800e600 <pxCurrentTCBConst>)
 800e5aa:	681a      	ldr	r2, [r3, #0]
 800e5ac:	f01e 0f10 	tst.w	lr, #16
 800e5b0:	bf08      	it	eq
 800e5b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e5b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5ba:	6010      	str	r0, [r2, #0]
 800e5bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e5c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800e5c4:	f380 8811 	msr	BASEPRI, r0
 800e5c8:	f3bf 8f4f 	dsb	sy
 800e5cc:	f3bf 8f6f 	isb	sy
 800e5d0:	f7ff fca2 	bl	800df18 <vTaskSwitchContext>
 800e5d4:	f04f 0000 	mov.w	r0, #0
 800e5d8:	f380 8811 	msr	BASEPRI, r0
 800e5dc:	bc09      	pop	{r0, r3}
 800e5de:	6819      	ldr	r1, [r3, #0]
 800e5e0:	6808      	ldr	r0, [r1, #0]
 800e5e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5e6:	f01e 0f10 	tst.w	lr, #16
 800e5ea:	bf08      	it	eq
 800e5ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e5f0:	f380 8809 	msr	PSP, r0
 800e5f4:	f3bf 8f6f 	isb	sy
 800e5f8:	4770      	bx	lr
 800e5fa:	bf00      	nop
 800e5fc:	f3af 8000 	nop.w

0800e600 <pxCurrentTCBConst>:
 800e600:	20002b34 	.word	0x20002b34
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e604:	bf00      	nop
 800e606:	bf00      	nop

0800e608 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e608:	b580      	push	{r7, lr}
 800e60a:	b082      	sub	sp, #8
 800e60c:	af00      	add	r7, sp, #0
	__asm volatile
 800e60e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e612:	f383 8811 	msr	BASEPRI, r3
 800e616:	f3bf 8f6f 	isb	sy
 800e61a:	f3bf 8f4f 	dsb	sy
 800e61e:	607b      	str	r3, [r7, #4]
}
 800e620:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e622:	f7ff fbc1 	bl	800dda8 <xTaskIncrementTick>
 800e626:	4603      	mov	r3, r0
 800e628:	2b00      	cmp	r3, #0
 800e62a:	d003      	beq.n	800e634 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e62c:	4b06      	ldr	r3, [pc, #24]	; (800e648 <xPortSysTickHandler+0x40>)
 800e62e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e632:	601a      	str	r2, [r3, #0]
 800e634:	2300      	movs	r3, #0
 800e636:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e638:	683b      	ldr	r3, [r7, #0]
 800e63a:	f383 8811 	msr	BASEPRI, r3
}
 800e63e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e640:	bf00      	nop
 800e642:	3708      	adds	r7, #8
 800e644:	46bd      	mov	sp, r7
 800e646:	bd80      	pop	{r7, pc}
 800e648:	e000ed04 	.word	0xe000ed04

0800e64c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e64c:	b480      	push	{r7}
 800e64e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e650:	4b0b      	ldr	r3, [pc, #44]	; (800e680 <vPortSetupTimerInterrupt+0x34>)
 800e652:	2200      	movs	r2, #0
 800e654:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e656:	4b0b      	ldr	r3, [pc, #44]	; (800e684 <vPortSetupTimerInterrupt+0x38>)
 800e658:	2200      	movs	r2, #0
 800e65a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e65c:	4b0a      	ldr	r3, [pc, #40]	; (800e688 <vPortSetupTimerInterrupt+0x3c>)
 800e65e:	681b      	ldr	r3, [r3, #0]
 800e660:	4a0a      	ldr	r2, [pc, #40]	; (800e68c <vPortSetupTimerInterrupt+0x40>)
 800e662:	fba2 2303 	umull	r2, r3, r2, r3
 800e666:	099b      	lsrs	r3, r3, #6
 800e668:	4a09      	ldr	r2, [pc, #36]	; (800e690 <vPortSetupTimerInterrupt+0x44>)
 800e66a:	3b01      	subs	r3, #1
 800e66c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e66e:	4b04      	ldr	r3, [pc, #16]	; (800e680 <vPortSetupTimerInterrupt+0x34>)
 800e670:	2207      	movs	r2, #7
 800e672:	601a      	str	r2, [r3, #0]
}
 800e674:	bf00      	nop
 800e676:	46bd      	mov	sp, r7
 800e678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e67c:	4770      	bx	lr
 800e67e:	bf00      	nop
 800e680:	e000e010 	.word	0xe000e010
 800e684:	e000e018 	.word	0xe000e018
 800e688:	2000000c 	.word	0x2000000c
 800e68c:	10624dd3 	.word	0x10624dd3
 800e690:	e000e014 	.word	0xe000e014

0800e694 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e694:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800e6a4 <vPortEnableVFP+0x10>
 800e698:	6801      	ldr	r1, [r0, #0]
 800e69a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800e69e:	6001      	str	r1, [r0, #0]
 800e6a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e6a2:	bf00      	nop
 800e6a4:	e000ed88 	.word	0xe000ed88

0800e6a8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e6a8:	b580      	push	{r7, lr}
 800e6aa:	b08a      	sub	sp, #40	; 0x28
 800e6ac:	af00      	add	r7, sp, #0
 800e6ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e6b0:	2300      	movs	r3, #0
 800e6b2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e6b4:	f7ff face 	bl	800dc54 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e6b8:	4b5b      	ldr	r3, [pc, #364]	; (800e828 <pvPortMalloc+0x180>)
 800e6ba:	681b      	ldr	r3, [r3, #0]
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	d101      	bne.n	800e6c4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e6c0:	f000 f920 	bl	800e904 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e6c4:	4b59      	ldr	r3, [pc, #356]	; (800e82c <pvPortMalloc+0x184>)
 800e6c6:	681a      	ldr	r2, [r3, #0]
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	4013      	ands	r3, r2
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	f040 8093 	bne.w	800e7f8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	d01d      	beq.n	800e714 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800e6d8:	2208      	movs	r2, #8
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	4413      	add	r3, r2
 800e6de:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	f003 0307 	and.w	r3, r3, #7
 800e6e6:	2b00      	cmp	r3, #0
 800e6e8:	d014      	beq.n	800e714 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	f023 0307 	bic.w	r3, r3, #7
 800e6f0:	3308      	adds	r3, #8
 800e6f2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	f003 0307 	and.w	r3, r3, #7
 800e6fa:	2b00      	cmp	r3, #0
 800e6fc:	d00a      	beq.n	800e714 <pvPortMalloc+0x6c>
	__asm volatile
 800e6fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e702:	f383 8811 	msr	BASEPRI, r3
 800e706:	f3bf 8f6f 	isb	sy
 800e70a:	f3bf 8f4f 	dsb	sy
 800e70e:	617b      	str	r3, [r7, #20]
}
 800e710:	bf00      	nop
 800e712:	e7fe      	b.n	800e712 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	2b00      	cmp	r3, #0
 800e718:	d06e      	beq.n	800e7f8 <pvPortMalloc+0x150>
 800e71a:	4b45      	ldr	r3, [pc, #276]	; (800e830 <pvPortMalloc+0x188>)
 800e71c:	681b      	ldr	r3, [r3, #0]
 800e71e:	687a      	ldr	r2, [r7, #4]
 800e720:	429a      	cmp	r2, r3
 800e722:	d869      	bhi.n	800e7f8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e724:	4b43      	ldr	r3, [pc, #268]	; (800e834 <pvPortMalloc+0x18c>)
 800e726:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e728:	4b42      	ldr	r3, [pc, #264]	; (800e834 <pvPortMalloc+0x18c>)
 800e72a:	681b      	ldr	r3, [r3, #0]
 800e72c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e72e:	e004      	b.n	800e73a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800e730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e732:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e736:	681b      	ldr	r3, [r3, #0]
 800e738:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e73a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e73c:	685b      	ldr	r3, [r3, #4]
 800e73e:	687a      	ldr	r2, [r7, #4]
 800e740:	429a      	cmp	r2, r3
 800e742:	d903      	bls.n	800e74c <pvPortMalloc+0xa4>
 800e744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e746:	681b      	ldr	r3, [r3, #0]
 800e748:	2b00      	cmp	r3, #0
 800e74a:	d1f1      	bne.n	800e730 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e74c:	4b36      	ldr	r3, [pc, #216]	; (800e828 <pvPortMalloc+0x180>)
 800e74e:	681b      	ldr	r3, [r3, #0]
 800e750:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e752:	429a      	cmp	r2, r3
 800e754:	d050      	beq.n	800e7f8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e756:	6a3b      	ldr	r3, [r7, #32]
 800e758:	681b      	ldr	r3, [r3, #0]
 800e75a:	2208      	movs	r2, #8
 800e75c:	4413      	add	r3, r2
 800e75e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e762:	681a      	ldr	r2, [r3, #0]
 800e764:	6a3b      	ldr	r3, [r7, #32]
 800e766:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e76a:	685a      	ldr	r2, [r3, #4]
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	1ad2      	subs	r2, r2, r3
 800e770:	2308      	movs	r3, #8
 800e772:	005b      	lsls	r3, r3, #1
 800e774:	429a      	cmp	r2, r3
 800e776:	d91f      	bls.n	800e7b8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e778:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	4413      	add	r3, r2
 800e77e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e780:	69bb      	ldr	r3, [r7, #24]
 800e782:	f003 0307 	and.w	r3, r3, #7
 800e786:	2b00      	cmp	r3, #0
 800e788:	d00a      	beq.n	800e7a0 <pvPortMalloc+0xf8>
	__asm volatile
 800e78a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e78e:	f383 8811 	msr	BASEPRI, r3
 800e792:	f3bf 8f6f 	isb	sy
 800e796:	f3bf 8f4f 	dsb	sy
 800e79a:	613b      	str	r3, [r7, #16]
}
 800e79c:	bf00      	nop
 800e79e:	e7fe      	b.n	800e79e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e7a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7a2:	685a      	ldr	r2, [r3, #4]
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	1ad2      	subs	r2, r2, r3
 800e7a8:	69bb      	ldr	r3, [r7, #24]
 800e7aa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e7ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7ae:	687a      	ldr	r2, [r7, #4]
 800e7b0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e7b2:	69b8      	ldr	r0, [r7, #24]
 800e7b4:	f000 f908 	bl	800e9c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e7b8:	4b1d      	ldr	r3, [pc, #116]	; (800e830 <pvPortMalloc+0x188>)
 800e7ba:	681a      	ldr	r2, [r3, #0]
 800e7bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7be:	685b      	ldr	r3, [r3, #4]
 800e7c0:	1ad3      	subs	r3, r2, r3
 800e7c2:	4a1b      	ldr	r2, [pc, #108]	; (800e830 <pvPortMalloc+0x188>)
 800e7c4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e7c6:	4b1a      	ldr	r3, [pc, #104]	; (800e830 <pvPortMalloc+0x188>)
 800e7c8:	681a      	ldr	r2, [r3, #0]
 800e7ca:	4b1b      	ldr	r3, [pc, #108]	; (800e838 <pvPortMalloc+0x190>)
 800e7cc:	681b      	ldr	r3, [r3, #0]
 800e7ce:	429a      	cmp	r2, r3
 800e7d0:	d203      	bcs.n	800e7da <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e7d2:	4b17      	ldr	r3, [pc, #92]	; (800e830 <pvPortMalloc+0x188>)
 800e7d4:	681b      	ldr	r3, [r3, #0]
 800e7d6:	4a18      	ldr	r2, [pc, #96]	; (800e838 <pvPortMalloc+0x190>)
 800e7d8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e7da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7dc:	685a      	ldr	r2, [r3, #4]
 800e7de:	4b13      	ldr	r3, [pc, #76]	; (800e82c <pvPortMalloc+0x184>)
 800e7e0:	681b      	ldr	r3, [r3, #0]
 800e7e2:	431a      	orrs	r2, r3
 800e7e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7e6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e7e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7ea:	2200      	movs	r2, #0
 800e7ec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800e7ee:	4b13      	ldr	r3, [pc, #76]	; (800e83c <pvPortMalloc+0x194>)
 800e7f0:	681b      	ldr	r3, [r3, #0]
 800e7f2:	3301      	adds	r3, #1
 800e7f4:	4a11      	ldr	r2, [pc, #68]	; (800e83c <pvPortMalloc+0x194>)
 800e7f6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e7f8:	f7ff fa3a 	bl	800dc70 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e7fc:	69fb      	ldr	r3, [r7, #28]
 800e7fe:	f003 0307 	and.w	r3, r3, #7
 800e802:	2b00      	cmp	r3, #0
 800e804:	d00a      	beq.n	800e81c <pvPortMalloc+0x174>
	__asm volatile
 800e806:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e80a:	f383 8811 	msr	BASEPRI, r3
 800e80e:	f3bf 8f6f 	isb	sy
 800e812:	f3bf 8f4f 	dsb	sy
 800e816:	60fb      	str	r3, [r7, #12]
}
 800e818:	bf00      	nop
 800e81a:	e7fe      	b.n	800e81a <pvPortMalloc+0x172>
	return pvReturn;
 800e81c:	69fb      	ldr	r3, [r7, #28]
}
 800e81e:	4618      	mov	r0, r3
 800e820:	3728      	adds	r7, #40	; 0x28
 800e822:	46bd      	mov	sp, r7
 800e824:	bd80      	pop	{r7, pc}
 800e826:	bf00      	nop
 800e828:	20006870 	.word	0x20006870
 800e82c:	20006884 	.word	0x20006884
 800e830:	20006874 	.word	0x20006874
 800e834:	20006868 	.word	0x20006868
 800e838:	20006878 	.word	0x20006878
 800e83c:	2000687c 	.word	0x2000687c

0800e840 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e840:	b580      	push	{r7, lr}
 800e842:	b086      	sub	sp, #24
 800e844:	af00      	add	r7, sp, #0
 800e846:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	2b00      	cmp	r3, #0
 800e850:	d04d      	beq.n	800e8ee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e852:	2308      	movs	r3, #8
 800e854:	425b      	negs	r3, r3
 800e856:	697a      	ldr	r2, [r7, #20]
 800e858:	4413      	add	r3, r2
 800e85a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e85c:	697b      	ldr	r3, [r7, #20]
 800e85e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e860:	693b      	ldr	r3, [r7, #16]
 800e862:	685a      	ldr	r2, [r3, #4]
 800e864:	4b24      	ldr	r3, [pc, #144]	; (800e8f8 <vPortFree+0xb8>)
 800e866:	681b      	ldr	r3, [r3, #0]
 800e868:	4013      	ands	r3, r2
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	d10a      	bne.n	800e884 <vPortFree+0x44>
	__asm volatile
 800e86e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e872:	f383 8811 	msr	BASEPRI, r3
 800e876:	f3bf 8f6f 	isb	sy
 800e87a:	f3bf 8f4f 	dsb	sy
 800e87e:	60fb      	str	r3, [r7, #12]
}
 800e880:	bf00      	nop
 800e882:	e7fe      	b.n	800e882 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e884:	693b      	ldr	r3, [r7, #16]
 800e886:	681b      	ldr	r3, [r3, #0]
 800e888:	2b00      	cmp	r3, #0
 800e88a:	d00a      	beq.n	800e8a2 <vPortFree+0x62>
	__asm volatile
 800e88c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e890:	f383 8811 	msr	BASEPRI, r3
 800e894:	f3bf 8f6f 	isb	sy
 800e898:	f3bf 8f4f 	dsb	sy
 800e89c:	60bb      	str	r3, [r7, #8]
}
 800e89e:	bf00      	nop
 800e8a0:	e7fe      	b.n	800e8a0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e8a2:	693b      	ldr	r3, [r7, #16]
 800e8a4:	685a      	ldr	r2, [r3, #4]
 800e8a6:	4b14      	ldr	r3, [pc, #80]	; (800e8f8 <vPortFree+0xb8>)
 800e8a8:	681b      	ldr	r3, [r3, #0]
 800e8aa:	4013      	ands	r3, r2
 800e8ac:	2b00      	cmp	r3, #0
 800e8ae:	d01e      	beq.n	800e8ee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e8b0:	693b      	ldr	r3, [r7, #16]
 800e8b2:	681b      	ldr	r3, [r3, #0]
 800e8b4:	2b00      	cmp	r3, #0
 800e8b6:	d11a      	bne.n	800e8ee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e8b8:	693b      	ldr	r3, [r7, #16]
 800e8ba:	685a      	ldr	r2, [r3, #4]
 800e8bc:	4b0e      	ldr	r3, [pc, #56]	; (800e8f8 <vPortFree+0xb8>)
 800e8be:	681b      	ldr	r3, [r3, #0]
 800e8c0:	43db      	mvns	r3, r3
 800e8c2:	401a      	ands	r2, r3
 800e8c4:	693b      	ldr	r3, [r7, #16]
 800e8c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e8c8:	f7ff f9c4 	bl	800dc54 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e8cc:	693b      	ldr	r3, [r7, #16]
 800e8ce:	685a      	ldr	r2, [r3, #4]
 800e8d0:	4b0a      	ldr	r3, [pc, #40]	; (800e8fc <vPortFree+0xbc>)
 800e8d2:	681b      	ldr	r3, [r3, #0]
 800e8d4:	4413      	add	r3, r2
 800e8d6:	4a09      	ldr	r2, [pc, #36]	; (800e8fc <vPortFree+0xbc>)
 800e8d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e8da:	6938      	ldr	r0, [r7, #16]
 800e8dc:	f000 f874 	bl	800e9c8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800e8e0:	4b07      	ldr	r3, [pc, #28]	; (800e900 <vPortFree+0xc0>)
 800e8e2:	681b      	ldr	r3, [r3, #0]
 800e8e4:	3301      	adds	r3, #1
 800e8e6:	4a06      	ldr	r2, [pc, #24]	; (800e900 <vPortFree+0xc0>)
 800e8e8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800e8ea:	f7ff f9c1 	bl	800dc70 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e8ee:	bf00      	nop
 800e8f0:	3718      	adds	r7, #24
 800e8f2:	46bd      	mov	sp, r7
 800e8f4:	bd80      	pop	{r7, pc}
 800e8f6:	bf00      	nop
 800e8f8:	20006884 	.word	0x20006884
 800e8fc:	20006874 	.word	0x20006874
 800e900:	20006880 	.word	0x20006880

0800e904 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e904:	b480      	push	{r7}
 800e906:	b085      	sub	sp, #20
 800e908:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e90a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800e90e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e910:	4b27      	ldr	r3, [pc, #156]	; (800e9b0 <prvHeapInit+0xac>)
 800e912:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e914:	68fb      	ldr	r3, [r7, #12]
 800e916:	f003 0307 	and.w	r3, r3, #7
 800e91a:	2b00      	cmp	r3, #0
 800e91c:	d00c      	beq.n	800e938 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e91e:	68fb      	ldr	r3, [r7, #12]
 800e920:	3307      	adds	r3, #7
 800e922:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e924:	68fb      	ldr	r3, [r7, #12]
 800e926:	f023 0307 	bic.w	r3, r3, #7
 800e92a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e92c:	68ba      	ldr	r2, [r7, #8]
 800e92e:	68fb      	ldr	r3, [r7, #12]
 800e930:	1ad3      	subs	r3, r2, r3
 800e932:	4a1f      	ldr	r2, [pc, #124]	; (800e9b0 <prvHeapInit+0xac>)
 800e934:	4413      	add	r3, r2
 800e936:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e938:	68fb      	ldr	r3, [r7, #12]
 800e93a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e93c:	4a1d      	ldr	r2, [pc, #116]	; (800e9b4 <prvHeapInit+0xb0>)
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e942:	4b1c      	ldr	r3, [pc, #112]	; (800e9b4 <prvHeapInit+0xb0>)
 800e944:	2200      	movs	r2, #0
 800e946:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	68ba      	ldr	r2, [r7, #8]
 800e94c:	4413      	add	r3, r2
 800e94e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e950:	2208      	movs	r2, #8
 800e952:	68fb      	ldr	r3, [r7, #12]
 800e954:	1a9b      	subs	r3, r3, r2
 800e956:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e958:	68fb      	ldr	r3, [r7, #12]
 800e95a:	f023 0307 	bic.w	r3, r3, #7
 800e95e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e960:	68fb      	ldr	r3, [r7, #12]
 800e962:	4a15      	ldr	r2, [pc, #84]	; (800e9b8 <prvHeapInit+0xb4>)
 800e964:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e966:	4b14      	ldr	r3, [pc, #80]	; (800e9b8 <prvHeapInit+0xb4>)
 800e968:	681b      	ldr	r3, [r3, #0]
 800e96a:	2200      	movs	r2, #0
 800e96c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e96e:	4b12      	ldr	r3, [pc, #72]	; (800e9b8 <prvHeapInit+0xb4>)
 800e970:	681b      	ldr	r3, [r3, #0]
 800e972:	2200      	movs	r2, #0
 800e974:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e97a:	683b      	ldr	r3, [r7, #0]
 800e97c:	68fa      	ldr	r2, [r7, #12]
 800e97e:	1ad2      	subs	r2, r2, r3
 800e980:	683b      	ldr	r3, [r7, #0]
 800e982:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e984:	4b0c      	ldr	r3, [pc, #48]	; (800e9b8 <prvHeapInit+0xb4>)
 800e986:	681a      	ldr	r2, [r3, #0]
 800e988:	683b      	ldr	r3, [r7, #0]
 800e98a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e98c:	683b      	ldr	r3, [r7, #0]
 800e98e:	685b      	ldr	r3, [r3, #4]
 800e990:	4a0a      	ldr	r2, [pc, #40]	; (800e9bc <prvHeapInit+0xb8>)
 800e992:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e994:	683b      	ldr	r3, [r7, #0]
 800e996:	685b      	ldr	r3, [r3, #4]
 800e998:	4a09      	ldr	r2, [pc, #36]	; (800e9c0 <prvHeapInit+0xbc>)
 800e99a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e99c:	4b09      	ldr	r3, [pc, #36]	; (800e9c4 <prvHeapInit+0xc0>)
 800e99e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800e9a2:	601a      	str	r2, [r3, #0]
}
 800e9a4:	bf00      	nop
 800e9a6:	3714      	adds	r7, #20
 800e9a8:	46bd      	mov	sp, r7
 800e9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9ae:	4770      	bx	lr
 800e9b0:	20002c68 	.word	0x20002c68
 800e9b4:	20006868 	.word	0x20006868
 800e9b8:	20006870 	.word	0x20006870
 800e9bc:	20006878 	.word	0x20006878
 800e9c0:	20006874 	.word	0x20006874
 800e9c4:	20006884 	.word	0x20006884

0800e9c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e9c8:	b480      	push	{r7}
 800e9ca:	b085      	sub	sp, #20
 800e9cc:	af00      	add	r7, sp, #0
 800e9ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e9d0:	4b28      	ldr	r3, [pc, #160]	; (800ea74 <prvInsertBlockIntoFreeList+0xac>)
 800e9d2:	60fb      	str	r3, [r7, #12]
 800e9d4:	e002      	b.n	800e9dc <prvInsertBlockIntoFreeList+0x14>
 800e9d6:	68fb      	ldr	r3, [r7, #12]
 800e9d8:	681b      	ldr	r3, [r3, #0]
 800e9da:	60fb      	str	r3, [r7, #12]
 800e9dc:	68fb      	ldr	r3, [r7, #12]
 800e9de:	681b      	ldr	r3, [r3, #0]
 800e9e0:	687a      	ldr	r2, [r7, #4]
 800e9e2:	429a      	cmp	r2, r3
 800e9e4:	d8f7      	bhi.n	800e9d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e9e6:	68fb      	ldr	r3, [r7, #12]
 800e9e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e9ea:	68fb      	ldr	r3, [r7, #12]
 800e9ec:	685b      	ldr	r3, [r3, #4]
 800e9ee:	68ba      	ldr	r2, [r7, #8]
 800e9f0:	4413      	add	r3, r2
 800e9f2:	687a      	ldr	r2, [r7, #4]
 800e9f4:	429a      	cmp	r2, r3
 800e9f6:	d108      	bne.n	800ea0a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e9f8:	68fb      	ldr	r3, [r7, #12]
 800e9fa:	685a      	ldr	r2, [r3, #4]
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	685b      	ldr	r3, [r3, #4]
 800ea00:	441a      	add	r2, r3
 800ea02:	68fb      	ldr	r3, [r7, #12]
 800ea04:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ea06:	68fb      	ldr	r3, [r7, #12]
 800ea08:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	685b      	ldr	r3, [r3, #4]
 800ea12:	68ba      	ldr	r2, [r7, #8]
 800ea14:	441a      	add	r2, r3
 800ea16:	68fb      	ldr	r3, [r7, #12]
 800ea18:	681b      	ldr	r3, [r3, #0]
 800ea1a:	429a      	cmp	r2, r3
 800ea1c:	d118      	bne.n	800ea50 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ea1e:	68fb      	ldr	r3, [r7, #12]
 800ea20:	681a      	ldr	r2, [r3, #0]
 800ea22:	4b15      	ldr	r3, [pc, #84]	; (800ea78 <prvInsertBlockIntoFreeList+0xb0>)
 800ea24:	681b      	ldr	r3, [r3, #0]
 800ea26:	429a      	cmp	r2, r3
 800ea28:	d00d      	beq.n	800ea46 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	685a      	ldr	r2, [r3, #4]
 800ea2e:	68fb      	ldr	r3, [r7, #12]
 800ea30:	681b      	ldr	r3, [r3, #0]
 800ea32:	685b      	ldr	r3, [r3, #4]
 800ea34:	441a      	add	r2, r3
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ea3a:	68fb      	ldr	r3, [r7, #12]
 800ea3c:	681b      	ldr	r3, [r3, #0]
 800ea3e:	681a      	ldr	r2, [r3, #0]
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	601a      	str	r2, [r3, #0]
 800ea44:	e008      	b.n	800ea58 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ea46:	4b0c      	ldr	r3, [pc, #48]	; (800ea78 <prvInsertBlockIntoFreeList+0xb0>)
 800ea48:	681a      	ldr	r2, [r3, #0]
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	601a      	str	r2, [r3, #0]
 800ea4e:	e003      	b.n	800ea58 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ea50:	68fb      	ldr	r3, [r7, #12]
 800ea52:	681a      	ldr	r2, [r3, #0]
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ea58:	68fa      	ldr	r2, [r7, #12]
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	429a      	cmp	r2, r3
 800ea5e:	d002      	beq.n	800ea66 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ea60:	68fb      	ldr	r3, [r7, #12]
 800ea62:	687a      	ldr	r2, [r7, #4]
 800ea64:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ea66:	bf00      	nop
 800ea68:	3714      	adds	r7, #20
 800ea6a:	46bd      	mov	sp, r7
 800ea6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea70:	4770      	bx	lr
 800ea72:	bf00      	nop
 800ea74:	20006868 	.word	0x20006868
 800ea78:	20006870 	.word	0x20006870

0800ea7c <__errno>:
 800ea7c:	4b01      	ldr	r3, [pc, #4]	; (800ea84 <__errno+0x8>)
 800ea7e:	6818      	ldr	r0, [r3, #0]
 800ea80:	4770      	bx	lr
 800ea82:	bf00      	nop
 800ea84:	2000001c 	.word	0x2000001c

0800ea88 <__libc_init_array>:
 800ea88:	b570      	push	{r4, r5, r6, lr}
 800ea8a:	4d0d      	ldr	r5, [pc, #52]	; (800eac0 <__libc_init_array+0x38>)
 800ea8c:	4c0d      	ldr	r4, [pc, #52]	; (800eac4 <__libc_init_array+0x3c>)
 800ea8e:	1b64      	subs	r4, r4, r5
 800ea90:	10a4      	asrs	r4, r4, #2
 800ea92:	2600      	movs	r6, #0
 800ea94:	42a6      	cmp	r6, r4
 800ea96:	d109      	bne.n	800eaac <__libc_init_array+0x24>
 800ea98:	4d0b      	ldr	r5, [pc, #44]	; (800eac8 <__libc_init_array+0x40>)
 800ea9a:	4c0c      	ldr	r4, [pc, #48]	; (800eacc <__libc_init_array+0x44>)
 800ea9c:	f005 f960 	bl	8013d60 <_init>
 800eaa0:	1b64      	subs	r4, r4, r5
 800eaa2:	10a4      	asrs	r4, r4, #2
 800eaa4:	2600      	movs	r6, #0
 800eaa6:	42a6      	cmp	r6, r4
 800eaa8:	d105      	bne.n	800eab6 <__libc_init_array+0x2e>
 800eaaa:	bd70      	pop	{r4, r5, r6, pc}
 800eaac:	f855 3b04 	ldr.w	r3, [r5], #4
 800eab0:	4798      	blx	r3
 800eab2:	3601      	adds	r6, #1
 800eab4:	e7ee      	b.n	800ea94 <__libc_init_array+0xc>
 800eab6:	f855 3b04 	ldr.w	r3, [r5], #4
 800eaba:	4798      	blx	r3
 800eabc:	3601      	adds	r6, #1
 800eabe:	e7f2      	b.n	800eaa6 <__libc_init_array+0x1e>
 800eac0:	08014718 	.word	0x08014718
 800eac4:	08014718 	.word	0x08014718
 800eac8:	08014718 	.word	0x08014718
 800eacc:	0801471c 	.word	0x0801471c

0800ead0 <memcpy>:
 800ead0:	440a      	add	r2, r1
 800ead2:	4291      	cmp	r1, r2
 800ead4:	f100 33ff 	add.w	r3, r0, #4294967295
 800ead8:	d100      	bne.n	800eadc <memcpy+0xc>
 800eada:	4770      	bx	lr
 800eadc:	b510      	push	{r4, lr}
 800eade:	f811 4b01 	ldrb.w	r4, [r1], #1
 800eae2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800eae6:	4291      	cmp	r1, r2
 800eae8:	d1f9      	bne.n	800eade <memcpy+0xe>
 800eaea:	bd10      	pop	{r4, pc}

0800eaec <memset>:
 800eaec:	4402      	add	r2, r0
 800eaee:	4603      	mov	r3, r0
 800eaf0:	4293      	cmp	r3, r2
 800eaf2:	d100      	bne.n	800eaf6 <memset+0xa>
 800eaf4:	4770      	bx	lr
 800eaf6:	f803 1b01 	strb.w	r1, [r3], #1
 800eafa:	e7f9      	b.n	800eaf0 <memset+0x4>

0800eafc <__cvt>:
 800eafc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800eb00:	ec55 4b10 	vmov	r4, r5, d0
 800eb04:	2d00      	cmp	r5, #0
 800eb06:	460e      	mov	r6, r1
 800eb08:	4619      	mov	r1, r3
 800eb0a:	462b      	mov	r3, r5
 800eb0c:	bfbb      	ittet	lt
 800eb0e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800eb12:	461d      	movlt	r5, r3
 800eb14:	2300      	movge	r3, #0
 800eb16:	232d      	movlt	r3, #45	; 0x2d
 800eb18:	700b      	strb	r3, [r1, #0]
 800eb1a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800eb1c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800eb20:	4691      	mov	r9, r2
 800eb22:	f023 0820 	bic.w	r8, r3, #32
 800eb26:	bfbc      	itt	lt
 800eb28:	4622      	movlt	r2, r4
 800eb2a:	4614      	movlt	r4, r2
 800eb2c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800eb30:	d005      	beq.n	800eb3e <__cvt+0x42>
 800eb32:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800eb36:	d100      	bne.n	800eb3a <__cvt+0x3e>
 800eb38:	3601      	adds	r6, #1
 800eb3a:	2102      	movs	r1, #2
 800eb3c:	e000      	b.n	800eb40 <__cvt+0x44>
 800eb3e:	2103      	movs	r1, #3
 800eb40:	ab03      	add	r3, sp, #12
 800eb42:	9301      	str	r3, [sp, #4]
 800eb44:	ab02      	add	r3, sp, #8
 800eb46:	9300      	str	r3, [sp, #0]
 800eb48:	ec45 4b10 	vmov	d0, r4, r5
 800eb4c:	4653      	mov	r3, sl
 800eb4e:	4632      	mov	r2, r6
 800eb50:	f000 fcea 	bl	800f528 <_dtoa_r>
 800eb54:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800eb58:	4607      	mov	r7, r0
 800eb5a:	d102      	bne.n	800eb62 <__cvt+0x66>
 800eb5c:	f019 0f01 	tst.w	r9, #1
 800eb60:	d022      	beq.n	800eba8 <__cvt+0xac>
 800eb62:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800eb66:	eb07 0906 	add.w	r9, r7, r6
 800eb6a:	d110      	bne.n	800eb8e <__cvt+0x92>
 800eb6c:	783b      	ldrb	r3, [r7, #0]
 800eb6e:	2b30      	cmp	r3, #48	; 0x30
 800eb70:	d10a      	bne.n	800eb88 <__cvt+0x8c>
 800eb72:	2200      	movs	r2, #0
 800eb74:	2300      	movs	r3, #0
 800eb76:	4620      	mov	r0, r4
 800eb78:	4629      	mov	r1, r5
 800eb7a:	f7f1 ffa5 	bl	8000ac8 <__aeabi_dcmpeq>
 800eb7e:	b918      	cbnz	r0, 800eb88 <__cvt+0x8c>
 800eb80:	f1c6 0601 	rsb	r6, r6, #1
 800eb84:	f8ca 6000 	str.w	r6, [sl]
 800eb88:	f8da 3000 	ldr.w	r3, [sl]
 800eb8c:	4499      	add	r9, r3
 800eb8e:	2200      	movs	r2, #0
 800eb90:	2300      	movs	r3, #0
 800eb92:	4620      	mov	r0, r4
 800eb94:	4629      	mov	r1, r5
 800eb96:	f7f1 ff97 	bl	8000ac8 <__aeabi_dcmpeq>
 800eb9a:	b108      	cbz	r0, 800eba0 <__cvt+0xa4>
 800eb9c:	f8cd 900c 	str.w	r9, [sp, #12]
 800eba0:	2230      	movs	r2, #48	; 0x30
 800eba2:	9b03      	ldr	r3, [sp, #12]
 800eba4:	454b      	cmp	r3, r9
 800eba6:	d307      	bcc.n	800ebb8 <__cvt+0xbc>
 800eba8:	9b03      	ldr	r3, [sp, #12]
 800ebaa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ebac:	1bdb      	subs	r3, r3, r7
 800ebae:	4638      	mov	r0, r7
 800ebb0:	6013      	str	r3, [r2, #0]
 800ebb2:	b004      	add	sp, #16
 800ebb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ebb8:	1c59      	adds	r1, r3, #1
 800ebba:	9103      	str	r1, [sp, #12]
 800ebbc:	701a      	strb	r2, [r3, #0]
 800ebbe:	e7f0      	b.n	800eba2 <__cvt+0xa6>

0800ebc0 <__exponent>:
 800ebc0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ebc2:	4603      	mov	r3, r0
 800ebc4:	2900      	cmp	r1, #0
 800ebc6:	bfb8      	it	lt
 800ebc8:	4249      	neglt	r1, r1
 800ebca:	f803 2b02 	strb.w	r2, [r3], #2
 800ebce:	bfb4      	ite	lt
 800ebd0:	222d      	movlt	r2, #45	; 0x2d
 800ebd2:	222b      	movge	r2, #43	; 0x2b
 800ebd4:	2909      	cmp	r1, #9
 800ebd6:	7042      	strb	r2, [r0, #1]
 800ebd8:	dd2a      	ble.n	800ec30 <__exponent+0x70>
 800ebda:	f10d 0407 	add.w	r4, sp, #7
 800ebde:	46a4      	mov	ip, r4
 800ebe0:	270a      	movs	r7, #10
 800ebe2:	46a6      	mov	lr, r4
 800ebe4:	460a      	mov	r2, r1
 800ebe6:	fb91 f6f7 	sdiv	r6, r1, r7
 800ebea:	fb07 1516 	mls	r5, r7, r6, r1
 800ebee:	3530      	adds	r5, #48	; 0x30
 800ebf0:	2a63      	cmp	r2, #99	; 0x63
 800ebf2:	f104 34ff 	add.w	r4, r4, #4294967295
 800ebf6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800ebfa:	4631      	mov	r1, r6
 800ebfc:	dcf1      	bgt.n	800ebe2 <__exponent+0x22>
 800ebfe:	3130      	adds	r1, #48	; 0x30
 800ec00:	f1ae 0502 	sub.w	r5, lr, #2
 800ec04:	f804 1c01 	strb.w	r1, [r4, #-1]
 800ec08:	1c44      	adds	r4, r0, #1
 800ec0a:	4629      	mov	r1, r5
 800ec0c:	4561      	cmp	r1, ip
 800ec0e:	d30a      	bcc.n	800ec26 <__exponent+0x66>
 800ec10:	f10d 0209 	add.w	r2, sp, #9
 800ec14:	eba2 020e 	sub.w	r2, r2, lr
 800ec18:	4565      	cmp	r5, ip
 800ec1a:	bf88      	it	hi
 800ec1c:	2200      	movhi	r2, #0
 800ec1e:	4413      	add	r3, r2
 800ec20:	1a18      	subs	r0, r3, r0
 800ec22:	b003      	add	sp, #12
 800ec24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ec26:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ec2a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800ec2e:	e7ed      	b.n	800ec0c <__exponent+0x4c>
 800ec30:	2330      	movs	r3, #48	; 0x30
 800ec32:	3130      	adds	r1, #48	; 0x30
 800ec34:	7083      	strb	r3, [r0, #2]
 800ec36:	70c1      	strb	r1, [r0, #3]
 800ec38:	1d03      	adds	r3, r0, #4
 800ec3a:	e7f1      	b.n	800ec20 <__exponent+0x60>

0800ec3c <_printf_float>:
 800ec3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec40:	ed2d 8b02 	vpush	{d8}
 800ec44:	b08d      	sub	sp, #52	; 0x34
 800ec46:	460c      	mov	r4, r1
 800ec48:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800ec4c:	4616      	mov	r6, r2
 800ec4e:	461f      	mov	r7, r3
 800ec50:	4605      	mov	r5, r0
 800ec52:	f001 fa57 	bl	8010104 <_localeconv_r>
 800ec56:	f8d0 a000 	ldr.w	sl, [r0]
 800ec5a:	4650      	mov	r0, sl
 800ec5c:	f7f1 fab8 	bl	80001d0 <strlen>
 800ec60:	2300      	movs	r3, #0
 800ec62:	930a      	str	r3, [sp, #40]	; 0x28
 800ec64:	6823      	ldr	r3, [r4, #0]
 800ec66:	9305      	str	r3, [sp, #20]
 800ec68:	f8d8 3000 	ldr.w	r3, [r8]
 800ec6c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800ec70:	3307      	adds	r3, #7
 800ec72:	f023 0307 	bic.w	r3, r3, #7
 800ec76:	f103 0208 	add.w	r2, r3, #8
 800ec7a:	f8c8 2000 	str.w	r2, [r8]
 800ec7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec82:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800ec86:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800ec8a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ec8e:	9307      	str	r3, [sp, #28]
 800ec90:	f8cd 8018 	str.w	r8, [sp, #24]
 800ec94:	ee08 0a10 	vmov	s16, r0
 800ec98:	4b9f      	ldr	r3, [pc, #636]	; (800ef18 <_printf_float+0x2dc>)
 800ec9a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ec9e:	f04f 32ff 	mov.w	r2, #4294967295
 800eca2:	f7f1 ff43 	bl	8000b2c <__aeabi_dcmpun>
 800eca6:	bb88      	cbnz	r0, 800ed0c <_printf_float+0xd0>
 800eca8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ecac:	4b9a      	ldr	r3, [pc, #616]	; (800ef18 <_printf_float+0x2dc>)
 800ecae:	f04f 32ff 	mov.w	r2, #4294967295
 800ecb2:	f7f1 ff1d 	bl	8000af0 <__aeabi_dcmple>
 800ecb6:	bb48      	cbnz	r0, 800ed0c <_printf_float+0xd0>
 800ecb8:	2200      	movs	r2, #0
 800ecba:	2300      	movs	r3, #0
 800ecbc:	4640      	mov	r0, r8
 800ecbe:	4649      	mov	r1, r9
 800ecc0:	f7f1 ff0c 	bl	8000adc <__aeabi_dcmplt>
 800ecc4:	b110      	cbz	r0, 800eccc <_printf_float+0x90>
 800ecc6:	232d      	movs	r3, #45	; 0x2d
 800ecc8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800eccc:	4b93      	ldr	r3, [pc, #588]	; (800ef1c <_printf_float+0x2e0>)
 800ecce:	4894      	ldr	r0, [pc, #592]	; (800ef20 <_printf_float+0x2e4>)
 800ecd0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800ecd4:	bf94      	ite	ls
 800ecd6:	4698      	movls	r8, r3
 800ecd8:	4680      	movhi	r8, r0
 800ecda:	2303      	movs	r3, #3
 800ecdc:	6123      	str	r3, [r4, #16]
 800ecde:	9b05      	ldr	r3, [sp, #20]
 800ece0:	f023 0204 	bic.w	r2, r3, #4
 800ece4:	6022      	str	r2, [r4, #0]
 800ece6:	f04f 0900 	mov.w	r9, #0
 800ecea:	9700      	str	r7, [sp, #0]
 800ecec:	4633      	mov	r3, r6
 800ecee:	aa0b      	add	r2, sp, #44	; 0x2c
 800ecf0:	4621      	mov	r1, r4
 800ecf2:	4628      	mov	r0, r5
 800ecf4:	f000 f9d8 	bl	800f0a8 <_printf_common>
 800ecf8:	3001      	adds	r0, #1
 800ecfa:	f040 8090 	bne.w	800ee1e <_printf_float+0x1e2>
 800ecfe:	f04f 30ff 	mov.w	r0, #4294967295
 800ed02:	b00d      	add	sp, #52	; 0x34
 800ed04:	ecbd 8b02 	vpop	{d8}
 800ed08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed0c:	4642      	mov	r2, r8
 800ed0e:	464b      	mov	r3, r9
 800ed10:	4640      	mov	r0, r8
 800ed12:	4649      	mov	r1, r9
 800ed14:	f7f1 ff0a 	bl	8000b2c <__aeabi_dcmpun>
 800ed18:	b140      	cbz	r0, 800ed2c <_printf_float+0xf0>
 800ed1a:	464b      	mov	r3, r9
 800ed1c:	2b00      	cmp	r3, #0
 800ed1e:	bfbc      	itt	lt
 800ed20:	232d      	movlt	r3, #45	; 0x2d
 800ed22:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800ed26:	487f      	ldr	r0, [pc, #508]	; (800ef24 <_printf_float+0x2e8>)
 800ed28:	4b7f      	ldr	r3, [pc, #508]	; (800ef28 <_printf_float+0x2ec>)
 800ed2a:	e7d1      	b.n	800ecd0 <_printf_float+0x94>
 800ed2c:	6863      	ldr	r3, [r4, #4]
 800ed2e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800ed32:	9206      	str	r2, [sp, #24]
 800ed34:	1c5a      	adds	r2, r3, #1
 800ed36:	d13f      	bne.n	800edb8 <_printf_float+0x17c>
 800ed38:	2306      	movs	r3, #6
 800ed3a:	6063      	str	r3, [r4, #4]
 800ed3c:	9b05      	ldr	r3, [sp, #20]
 800ed3e:	6861      	ldr	r1, [r4, #4]
 800ed40:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800ed44:	2300      	movs	r3, #0
 800ed46:	9303      	str	r3, [sp, #12]
 800ed48:	ab0a      	add	r3, sp, #40	; 0x28
 800ed4a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800ed4e:	ab09      	add	r3, sp, #36	; 0x24
 800ed50:	ec49 8b10 	vmov	d0, r8, r9
 800ed54:	9300      	str	r3, [sp, #0]
 800ed56:	6022      	str	r2, [r4, #0]
 800ed58:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800ed5c:	4628      	mov	r0, r5
 800ed5e:	f7ff fecd 	bl	800eafc <__cvt>
 800ed62:	9b06      	ldr	r3, [sp, #24]
 800ed64:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ed66:	2b47      	cmp	r3, #71	; 0x47
 800ed68:	4680      	mov	r8, r0
 800ed6a:	d108      	bne.n	800ed7e <_printf_float+0x142>
 800ed6c:	1cc8      	adds	r0, r1, #3
 800ed6e:	db02      	blt.n	800ed76 <_printf_float+0x13a>
 800ed70:	6863      	ldr	r3, [r4, #4]
 800ed72:	4299      	cmp	r1, r3
 800ed74:	dd41      	ble.n	800edfa <_printf_float+0x1be>
 800ed76:	f1ab 0b02 	sub.w	fp, fp, #2
 800ed7a:	fa5f fb8b 	uxtb.w	fp, fp
 800ed7e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ed82:	d820      	bhi.n	800edc6 <_printf_float+0x18a>
 800ed84:	3901      	subs	r1, #1
 800ed86:	465a      	mov	r2, fp
 800ed88:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ed8c:	9109      	str	r1, [sp, #36]	; 0x24
 800ed8e:	f7ff ff17 	bl	800ebc0 <__exponent>
 800ed92:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ed94:	1813      	adds	r3, r2, r0
 800ed96:	2a01      	cmp	r2, #1
 800ed98:	4681      	mov	r9, r0
 800ed9a:	6123      	str	r3, [r4, #16]
 800ed9c:	dc02      	bgt.n	800eda4 <_printf_float+0x168>
 800ed9e:	6822      	ldr	r2, [r4, #0]
 800eda0:	07d2      	lsls	r2, r2, #31
 800eda2:	d501      	bpl.n	800eda8 <_printf_float+0x16c>
 800eda4:	3301      	adds	r3, #1
 800eda6:	6123      	str	r3, [r4, #16]
 800eda8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800edac:	2b00      	cmp	r3, #0
 800edae:	d09c      	beq.n	800ecea <_printf_float+0xae>
 800edb0:	232d      	movs	r3, #45	; 0x2d
 800edb2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800edb6:	e798      	b.n	800ecea <_printf_float+0xae>
 800edb8:	9a06      	ldr	r2, [sp, #24]
 800edba:	2a47      	cmp	r2, #71	; 0x47
 800edbc:	d1be      	bne.n	800ed3c <_printf_float+0x100>
 800edbe:	2b00      	cmp	r3, #0
 800edc0:	d1bc      	bne.n	800ed3c <_printf_float+0x100>
 800edc2:	2301      	movs	r3, #1
 800edc4:	e7b9      	b.n	800ed3a <_printf_float+0xfe>
 800edc6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800edca:	d118      	bne.n	800edfe <_printf_float+0x1c2>
 800edcc:	2900      	cmp	r1, #0
 800edce:	6863      	ldr	r3, [r4, #4]
 800edd0:	dd0b      	ble.n	800edea <_printf_float+0x1ae>
 800edd2:	6121      	str	r1, [r4, #16]
 800edd4:	b913      	cbnz	r3, 800eddc <_printf_float+0x1a0>
 800edd6:	6822      	ldr	r2, [r4, #0]
 800edd8:	07d0      	lsls	r0, r2, #31
 800edda:	d502      	bpl.n	800ede2 <_printf_float+0x1a6>
 800eddc:	3301      	adds	r3, #1
 800edde:	440b      	add	r3, r1
 800ede0:	6123      	str	r3, [r4, #16]
 800ede2:	65a1      	str	r1, [r4, #88]	; 0x58
 800ede4:	f04f 0900 	mov.w	r9, #0
 800ede8:	e7de      	b.n	800eda8 <_printf_float+0x16c>
 800edea:	b913      	cbnz	r3, 800edf2 <_printf_float+0x1b6>
 800edec:	6822      	ldr	r2, [r4, #0]
 800edee:	07d2      	lsls	r2, r2, #31
 800edf0:	d501      	bpl.n	800edf6 <_printf_float+0x1ba>
 800edf2:	3302      	adds	r3, #2
 800edf4:	e7f4      	b.n	800ede0 <_printf_float+0x1a4>
 800edf6:	2301      	movs	r3, #1
 800edf8:	e7f2      	b.n	800ede0 <_printf_float+0x1a4>
 800edfa:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800edfe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ee00:	4299      	cmp	r1, r3
 800ee02:	db05      	blt.n	800ee10 <_printf_float+0x1d4>
 800ee04:	6823      	ldr	r3, [r4, #0]
 800ee06:	6121      	str	r1, [r4, #16]
 800ee08:	07d8      	lsls	r0, r3, #31
 800ee0a:	d5ea      	bpl.n	800ede2 <_printf_float+0x1a6>
 800ee0c:	1c4b      	adds	r3, r1, #1
 800ee0e:	e7e7      	b.n	800ede0 <_printf_float+0x1a4>
 800ee10:	2900      	cmp	r1, #0
 800ee12:	bfd4      	ite	le
 800ee14:	f1c1 0202 	rsble	r2, r1, #2
 800ee18:	2201      	movgt	r2, #1
 800ee1a:	4413      	add	r3, r2
 800ee1c:	e7e0      	b.n	800ede0 <_printf_float+0x1a4>
 800ee1e:	6823      	ldr	r3, [r4, #0]
 800ee20:	055a      	lsls	r2, r3, #21
 800ee22:	d407      	bmi.n	800ee34 <_printf_float+0x1f8>
 800ee24:	6923      	ldr	r3, [r4, #16]
 800ee26:	4642      	mov	r2, r8
 800ee28:	4631      	mov	r1, r6
 800ee2a:	4628      	mov	r0, r5
 800ee2c:	47b8      	blx	r7
 800ee2e:	3001      	adds	r0, #1
 800ee30:	d12c      	bne.n	800ee8c <_printf_float+0x250>
 800ee32:	e764      	b.n	800ecfe <_printf_float+0xc2>
 800ee34:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ee38:	f240 80e0 	bls.w	800effc <_printf_float+0x3c0>
 800ee3c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ee40:	2200      	movs	r2, #0
 800ee42:	2300      	movs	r3, #0
 800ee44:	f7f1 fe40 	bl	8000ac8 <__aeabi_dcmpeq>
 800ee48:	2800      	cmp	r0, #0
 800ee4a:	d034      	beq.n	800eeb6 <_printf_float+0x27a>
 800ee4c:	4a37      	ldr	r2, [pc, #220]	; (800ef2c <_printf_float+0x2f0>)
 800ee4e:	2301      	movs	r3, #1
 800ee50:	4631      	mov	r1, r6
 800ee52:	4628      	mov	r0, r5
 800ee54:	47b8      	blx	r7
 800ee56:	3001      	adds	r0, #1
 800ee58:	f43f af51 	beq.w	800ecfe <_printf_float+0xc2>
 800ee5c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ee60:	429a      	cmp	r2, r3
 800ee62:	db02      	blt.n	800ee6a <_printf_float+0x22e>
 800ee64:	6823      	ldr	r3, [r4, #0]
 800ee66:	07d8      	lsls	r0, r3, #31
 800ee68:	d510      	bpl.n	800ee8c <_printf_float+0x250>
 800ee6a:	ee18 3a10 	vmov	r3, s16
 800ee6e:	4652      	mov	r2, sl
 800ee70:	4631      	mov	r1, r6
 800ee72:	4628      	mov	r0, r5
 800ee74:	47b8      	blx	r7
 800ee76:	3001      	adds	r0, #1
 800ee78:	f43f af41 	beq.w	800ecfe <_printf_float+0xc2>
 800ee7c:	f04f 0800 	mov.w	r8, #0
 800ee80:	f104 091a 	add.w	r9, r4, #26
 800ee84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ee86:	3b01      	subs	r3, #1
 800ee88:	4543      	cmp	r3, r8
 800ee8a:	dc09      	bgt.n	800eea0 <_printf_float+0x264>
 800ee8c:	6823      	ldr	r3, [r4, #0]
 800ee8e:	079b      	lsls	r3, r3, #30
 800ee90:	f100 8105 	bmi.w	800f09e <_printf_float+0x462>
 800ee94:	68e0      	ldr	r0, [r4, #12]
 800ee96:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ee98:	4298      	cmp	r0, r3
 800ee9a:	bfb8      	it	lt
 800ee9c:	4618      	movlt	r0, r3
 800ee9e:	e730      	b.n	800ed02 <_printf_float+0xc6>
 800eea0:	2301      	movs	r3, #1
 800eea2:	464a      	mov	r2, r9
 800eea4:	4631      	mov	r1, r6
 800eea6:	4628      	mov	r0, r5
 800eea8:	47b8      	blx	r7
 800eeaa:	3001      	adds	r0, #1
 800eeac:	f43f af27 	beq.w	800ecfe <_printf_float+0xc2>
 800eeb0:	f108 0801 	add.w	r8, r8, #1
 800eeb4:	e7e6      	b.n	800ee84 <_printf_float+0x248>
 800eeb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eeb8:	2b00      	cmp	r3, #0
 800eeba:	dc39      	bgt.n	800ef30 <_printf_float+0x2f4>
 800eebc:	4a1b      	ldr	r2, [pc, #108]	; (800ef2c <_printf_float+0x2f0>)
 800eebe:	2301      	movs	r3, #1
 800eec0:	4631      	mov	r1, r6
 800eec2:	4628      	mov	r0, r5
 800eec4:	47b8      	blx	r7
 800eec6:	3001      	adds	r0, #1
 800eec8:	f43f af19 	beq.w	800ecfe <_printf_float+0xc2>
 800eecc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800eed0:	4313      	orrs	r3, r2
 800eed2:	d102      	bne.n	800eeda <_printf_float+0x29e>
 800eed4:	6823      	ldr	r3, [r4, #0]
 800eed6:	07d9      	lsls	r1, r3, #31
 800eed8:	d5d8      	bpl.n	800ee8c <_printf_float+0x250>
 800eeda:	ee18 3a10 	vmov	r3, s16
 800eede:	4652      	mov	r2, sl
 800eee0:	4631      	mov	r1, r6
 800eee2:	4628      	mov	r0, r5
 800eee4:	47b8      	blx	r7
 800eee6:	3001      	adds	r0, #1
 800eee8:	f43f af09 	beq.w	800ecfe <_printf_float+0xc2>
 800eeec:	f04f 0900 	mov.w	r9, #0
 800eef0:	f104 0a1a 	add.w	sl, r4, #26
 800eef4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eef6:	425b      	negs	r3, r3
 800eef8:	454b      	cmp	r3, r9
 800eefa:	dc01      	bgt.n	800ef00 <_printf_float+0x2c4>
 800eefc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eefe:	e792      	b.n	800ee26 <_printf_float+0x1ea>
 800ef00:	2301      	movs	r3, #1
 800ef02:	4652      	mov	r2, sl
 800ef04:	4631      	mov	r1, r6
 800ef06:	4628      	mov	r0, r5
 800ef08:	47b8      	blx	r7
 800ef0a:	3001      	adds	r0, #1
 800ef0c:	f43f aef7 	beq.w	800ecfe <_printf_float+0xc2>
 800ef10:	f109 0901 	add.w	r9, r9, #1
 800ef14:	e7ee      	b.n	800eef4 <_printf_float+0x2b8>
 800ef16:	bf00      	nop
 800ef18:	7fefffff 	.word	0x7fefffff
 800ef1c:	08013ee8 	.word	0x08013ee8
 800ef20:	08013eec 	.word	0x08013eec
 800ef24:	08013ef4 	.word	0x08013ef4
 800ef28:	08013ef0 	.word	0x08013ef0
 800ef2c:	08013ef8 	.word	0x08013ef8
 800ef30:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ef32:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ef34:	429a      	cmp	r2, r3
 800ef36:	bfa8      	it	ge
 800ef38:	461a      	movge	r2, r3
 800ef3a:	2a00      	cmp	r2, #0
 800ef3c:	4691      	mov	r9, r2
 800ef3e:	dc37      	bgt.n	800efb0 <_printf_float+0x374>
 800ef40:	f04f 0b00 	mov.w	fp, #0
 800ef44:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ef48:	f104 021a 	add.w	r2, r4, #26
 800ef4c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ef4e:	9305      	str	r3, [sp, #20]
 800ef50:	eba3 0309 	sub.w	r3, r3, r9
 800ef54:	455b      	cmp	r3, fp
 800ef56:	dc33      	bgt.n	800efc0 <_printf_float+0x384>
 800ef58:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ef5c:	429a      	cmp	r2, r3
 800ef5e:	db3b      	blt.n	800efd8 <_printf_float+0x39c>
 800ef60:	6823      	ldr	r3, [r4, #0]
 800ef62:	07da      	lsls	r2, r3, #31
 800ef64:	d438      	bmi.n	800efd8 <_printf_float+0x39c>
 800ef66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ef68:	9a05      	ldr	r2, [sp, #20]
 800ef6a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ef6c:	1a9a      	subs	r2, r3, r2
 800ef6e:	eba3 0901 	sub.w	r9, r3, r1
 800ef72:	4591      	cmp	r9, r2
 800ef74:	bfa8      	it	ge
 800ef76:	4691      	movge	r9, r2
 800ef78:	f1b9 0f00 	cmp.w	r9, #0
 800ef7c:	dc35      	bgt.n	800efea <_printf_float+0x3ae>
 800ef7e:	f04f 0800 	mov.w	r8, #0
 800ef82:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ef86:	f104 0a1a 	add.w	sl, r4, #26
 800ef8a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ef8e:	1a9b      	subs	r3, r3, r2
 800ef90:	eba3 0309 	sub.w	r3, r3, r9
 800ef94:	4543      	cmp	r3, r8
 800ef96:	f77f af79 	ble.w	800ee8c <_printf_float+0x250>
 800ef9a:	2301      	movs	r3, #1
 800ef9c:	4652      	mov	r2, sl
 800ef9e:	4631      	mov	r1, r6
 800efa0:	4628      	mov	r0, r5
 800efa2:	47b8      	blx	r7
 800efa4:	3001      	adds	r0, #1
 800efa6:	f43f aeaa 	beq.w	800ecfe <_printf_float+0xc2>
 800efaa:	f108 0801 	add.w	r8, r8, #1
 800efae:	e7ec      	b.n	800ef8a <_printf_float+0x34e>
 800efb0:	4613      	mov	r3, r2
 800efb2:	4631      	mov	r1, r6
 800efb4:	4642      	mov	r2, r8
 800efb6:	4628      	mov	r0, r5
 800efb8:	47b8      	blx	r7
 800efba:	3001      	adds	r0, #1
 800efbc:	d1c0      	bne.n	800ef40 <_printf_float+0x304>
 800efbe:	e69e      	b.n	800ecfe <_printf_float+0xc2>
 800efc0:	2301      	movs	r3, #1
 800efc2:	4631      	mov	r1, r6
 800efc4:	4628      	mov	r0, r5
 800efc6:	9205      	str	r2, [sp, #20]
 800efc8:	47b8      	blx	r7
 800efca:	3001      	adds	r0, #1
 800efcc:	f43f ae97 	beq.w	800ecfe <_printf_float+0xc2>
 800efd0:	9a05      	ldr	r2, [sp, #20]
 800efd2:	f10b 0b01 	add.w	fp, fp, #1
 800efd6:	e7b9      	b.n	800ef4c <_printf_float+0x310>
 800efd8:	ee18 3a10 	vmov	r3, s16
 800efdc:	4652      	mov	r2, sl
 800efde:	4631      	mov	r1, r6
 800efe0:	4628      	mov	r0, r5
 800efe2:	47b8      	blx	r7
 800efe4:	3001      	adds	r0, #1
 800efe6:	d1be      	bne.n	800ef66 <_printf_float+0x32a>
 800efe8:	e689      	b.n	800ecfe <_printf_float+0xc2>
 800efea:	9a05      	ldr	r2, [sp, #20]
 800efec:	464b      	mov	r3, r9
 800efee:	4442      	add	r2, r8
 800eff0:	4631      	mov	r1, r6
 800eff2:	4628      	mov	r0, r5
 800eff4:	47b8      	blx	r7
 800eff6:	3001      	adds	r0, #1
 800eff8:	d1c1      	bne.n	800ef7e <_printf_float+0x342>
 800effa:	e680      	b.n	800ecfe <_printf_float+0xc2>
 800effc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800effe:	2a01      	cmp	r2, #1
 800f000:	dc01      	bgt.n	800f006 <_printf_float+0x3ca>
 800f002:	07db      	lsls	r3, r3, #31
 800f004:	d538      	bpl.n	800f078 <_printf_float+0x43c>
 800f006:	2301      	movs	r3, #1
 800f008:	4642      	mov	r2, r8
 800f00a:	4631      	mov	r1, r6
 800f00c:	4628      	mov	r0, r5
 800f00e:	47b8      	blx	r7
 800f010:	3001      	adds	r0, #1
 800f012:	f43f ae74 	beq.w	800ecfe <_printf_float+0xc2>
 800f016:	ee18 3a10 	vmov	r3, s16
 800f01a:	4652      	mov	r2, sl
 800f01c:	4631      	mov	r1, r6
 800f01e:	4628      	mov	r0, r5
 800f020:	47b8      	blx	r7
 800f022:	3001      	adds	r0, #1
 800f024:	f43f ae6b 	beq.w	800ecfe <_printf_float+0xc2>
 800f028:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f02c:	2200      	movs	r2, #0
 800f02e:	2300      	movs	r3, #0
 800f030:	f7f1 fd4a 	bl	8000ac8 <__aeabi_dcmpeq>
 800f034:	b9d8      	cbnz	r0, 800f06e <_printf_float+0x432>
 800f036:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f038:	f108 0201 	add.w	r2, r8, #1
 800f03c:	3b01      	subs	r3, #1
 800f03e:	4631      	mov	r1, r6
 800f040:	4628      	mov	r0, r5
 800f042:	47b8      	blx	r7
 800f044:	3001      	adds	r0, #1
 800f046:	d10e      	bne.n	800f066 <_printf_float+0x42a>
 800f048:	e659      	b.n	800ecfe <_printf_float+0xc2>
 800f04a:	2301      	movs	r3, #1
 800f04c:	4652      	mov	r2, sl
 800f04e:	4631      	mov	r1, r6
 800f050:	4628      	mov	r0, r5
 800f052:	47b8      	blx	r7
 800f054:	3001      	adds	r0, #1
 800f056:	f43f ae52 	beq.w	800ecfe <_printf_float+0xc2>
 800f05a:	f108 0801 	add.w	r8, r8, #1
 800f05e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f060:	3b01      	subs	r3, #1
 800f062:	4543      	cmp	r3, r8
 800f064:	dcf1      	bgt.n	800f04a <_printf_float+0x40e>
 800f066:	464b      	mov	r3, r9
 800f068:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800f06c:	e6dc      	b.n	800ee28 <_printf_float+0x1ec>
 800f06e:	f04f 0800 	mov.w	r8, #0
 800f072:	f104 0a1a 	add.w	sl, r4, #26
 800f076:	e7f2      	b.n	800f05e <_printf_float+0x422>
 800f078:	2301      	movs	r3, #1
 800f07a:	4642      	mov	r2, r8
 800f07c:	e7df      	b.n	800f03e <_printf_float+0x402>
 800f07e:	2301      	movs	r3, #1
 800f080:	464a      	mov	r2, r9
 800f082:	4631      	mov	r1, r6
 800f084:	4628      	mov	r0, r5
 800f086:	47b8      	blx	r7
 800f088:	3001      	adds	r0, #1
 800f08a:	f43f ae38 	beq.w	800ecfe <_printf_float+0xc2>
 800f08e:	f108 0801 	add.w	r8, r8, #1
 800f092:	68e3      	ldr	r3, [r4, #12]
 800f094:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f096:	1a5b      	subs	r3, r3, r1
 800f098:	4543      	cmp	r3, r8
 800f09a:	dcf0      	bgt.n	800f07e <_printf_float+0x442>
 800f09c:	e6fa      	b.n	800ee94 <_printf_float+0x258>
 800f09e:	f04f 0800 	mov.w	r8, #0
 800f0a2:	f104 0919 	add.w	r9, r4, #25
 800f0a6:	e7f4      	b.n	800f092 <_printf_float+0x456>

0800f0a8 <_printf_common>:
 800f0a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f0ac:	4616      	mov	r6, r2
 800f0ae:	4699      	mov	r9, r3
 800f0b0:	688a      	ldr	r2, [r1, #8]
 800f0b2:	690b      	ldr	r3, [r1, #16]
 800f0b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f0b8:	4293      	cmp	r3, r2
 800f0ba:	bfb8      	it	lt
 800f0bc:	4613      	movlt	r3, r2
 800f0be:	6033      	str	r3, [r6, #0]
 800f0c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f0c4:	4607      	mov	r7, r0
 800f0c6:	460c      	mov	r4, r1
 800f0c8:	b10a      	cbz	r2, 800f0ce <_printf_common+0x26>
 800f0ca:	3301      	adds	r3, #1
 800f0cc:	6033      	str	r3, [r6, #0]
 800f0ce:	6823      	ldr	r3, [r4, #0]
 800f0d0:	0699      	lsls	r1, r3, #26
 800f0d2:	bf42      	ittt	mi
 800f0d4:	6833      	ldrmi	r3, [r6, #0]
 800f0d6:	3302      	addmi	r3, #2
 800f0d8:	6033      	strmi	r3, [r6, #0]
 800f0da:	6825      	ldr	r5, [r4, #0]
 800f0dc:	f015 0506 	ands.w	r5, r5, #6
 800f0e0:	d106      	bne.n	800f0f0 <_printf_common+0x48>
 800f0e2:	f104 0a19 	add.w	sl, r4, #25
 800f0e6:	68e3      	ldr	r3, [r4, #12]
 800f0e8:	6832      	ldr	r2, [r6, #0]
 800f0ea:	1a9b      	subs	r3, r3, r2
 800f0ec:	42ab      	cmp	r3, r5
 800f0ee:	dc26      	bgt.n	800f13e <_printf_common+0x96>
 800f0f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f0f4:	1e13      	subs	r3, r2, #0
 800f0f6:	6822      	ldr	r2, [r4, #0]
 800f0f8:	bf18      	it	ne
 800f0fa:	2301      	movne	r3, #1
 800f0fc:	0692      	lsls	r2, r2, #26
 800f0fe:	d42b      	bmi.n	800f158 <_printf_common+0xb0>
 800f100:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f104:	4649      	mov	r1, r9
 800f106:	4638      	mov	r0, r7
 800f108:	47c0      	blx	r8
 800f10a:	3001      	adds	r0, #1
 800f10c:	d01e      	beq.n	800f14c <_printf_common+0xa4>
 800f10e:	6823      	ldr	r3, [r4, #0]
 800f110:	68e5      	ldr	r5, [r4, #12]
 800f112:	6832      	ldr	r2, [r6, #0]
 800f114:	f003 0306 	and.w	r3, r3, #6
 800f118:	2b04      	cmp	r3, #4
 800f11a:	bf08      	it	eq
 800f11c:	1aad      	subeq	r5, r5, r2
 800f11e:	68a3      	ldr	r3, [r4, #8]
 800f120:	6922      	ldr	r2, [r4, #16]
 800f122:	bf0c      	ite	eq
 800f124:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f128:	2500      	movne	r5, #0
 800f12a:	4293      	cmp	r3, r2
 800f12c:	bfc4      	itt	gt
 800f12e:	1a9b      	subgt	r3, r3, r2
 800f130:	18ed      	addgt	r5, r5, r3
 800f132:	2600      	movs	r6, #0
 800f134:	341a      	adds	r4, #26
 800f136:	42b5      	cmp	r5, r6
 800f138:	d11a      	bne.n	800f170 <_printf_common+0xc8>
 800f13a:	2000      	movs	r0, #0
 800f13c:	e008      	b.n	800f150 <_printf_common+0xa8>
 800f13e:	2301      	movs	r3, #1
 800f140:	4652      	mov	r2, sl
 800f142:	4649      	mov	r1, r9
 800f144:	4638      	mov	r0, r7
 800f146:	47c0      	blx	r8
 800f148:	3001      	adds	r0, #1
 800f14a:	d103      	bne.n	800f154 <_printf_common+0xac>
 800f14c:	f04f 30ff 	mov.w	r0, #4294967295
 800f150:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f154:	3501      	adds	r5, #1
 800f156:	e7c6      	b.n	800f0e6 <_printf_common+0x3e>
 800f158:	18e1      	adds	r1, r4, r3
 800f15a:	1c5a      	adds	r2, r3, #1
 800f15c:	2030      	movs	r0, #48	; 0x30
 800f15e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f162:	4422      	add	r2, r4
 800f164:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f168:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f16c:	3302      	adds	r3, #2
 800f16e:	e7c7      	b.n	800f100 <_printf_common+0x58>
 800f170:	2301      	movs	r3, #1
 800f172:	4622      	mov	r2, r4
 800f174:	4649      	mov	r1, r9
 800f176:	4638      	mov	r0, r7
 800f178:	47c0      	blx	r8
 800f17a:	3001      	adds	r0, #1
 800f17c:	d0e6      	beq.n	800f14c <_printf_common+0xa4>
 800f17e:	3601      	adds	r6, #1
 800f180:	e7d9      	b.n	800f136 <_printf_common+0x8e>
	...

0800f184 <_printf_i>:
 800f184:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f188:	7e0f      	ldrb	r7, [r1, #24]
 800f18a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f18c:	2f78      	cmp	r7, #120	; 0x78
 800f18e:	4691      	mov	r9, r2
 800f190:	4680      	mov	r8, r0
 800f192:	460c      	mov	r4, r1
 800f194:	469a      	mov	sl, r3
 800f196:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f19a:	d807      	bhi.n	800f1ac <_printf_i+0x28>
 800f19c:	2f62      	cmp	r7, #98	; 0x62
 800f19e:	d80a      	bhi.n	800f1b6 <_printf_i+0x32>
 800f1a0:	2f00      	cmp	r7, #0
 800f1a2:	f000 80d8 	beq.w	800f356 <_printf_i+0x1d2>
 800f1a6:	2f58      	cmp	r7, #88	; 0x58
 800f1a8:	f000 80a3 	beq.w	800f2f2 <_printf_i+0x16e>
 800f1ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f1b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f1b4:	e03a      	b.n	800f22c <_printf_i+0xa8>
 800f1b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f1ba:	2b15      	cmp	r3, #21
 800f1bc:	d8f6      	bhi.n	800f1ac <_printf_i+0x28>
 800f1be:	a101      	add	r1, pc, #4	; (adr r1, 800f1c4 <_printf_i+0x40>)
 800f1c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f1c4:	0800f21d 	.word	0x0800f21d
 800f1c8:	0800f231 	.word	0x0800f231
 800f1cc:	0800f1ad 	.word	0x0800f1ad
 800f1d0:	0800f1ad 	.word	0x0800f1ad
 800f1d4:	0800f1ad 	.word	0x0800f1ad
 800f1d8:	0800f1ad 	.word	0x0800f1ad
 800f1dc:	0800f231 	.word	0x0800f231
 800f1e0:	0800f1ad 	.word	0x0800f1ad
 800f1e4:	0800f1ad 	.word	0x0800f1ad
 800f1e8:	0800f1ad 	.word	0x0800f1ad
 800f1ec:	0800f1ad 	.word	0x0800f1ad
 800f1f0:	0800f33d 	.word	0x0800f33d
 800f1f4:	0800f261 	.word	0x0800f261
 800f1f8:	0800f31f 	.word	0x0800f31f
 800f1fc:	0800f1ad 	.word	0x0800f1ad
 800f200:	0800f1ad 	.word	0x0800f1ad
 800f204:	0800f35f 	.word	0x0800f35f
 800f208:	0800f1ad 	.word	0x0800f1ad
 800f20c:	0800f261 	.word	0x0800f261
 800f210:	0800f1ad 	.word	0x0800f1ad
 800f214:	0800f1ad 	.word	0x0800f1ad
 800f218:	0800f327 	.word	0x0800f327
 800f21c:	682b      	ldr	r3, [r5, #0]
 800f21e:	1d1a      	adds	r2, r3, #4
 800f220:	681b      	ldr	r3, [r3, #0]
 800f222:	602a      	str	r2, [r5, #0]
 800f224:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f228:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f22c:	2301      	movs	r3, #1
 800f22e:	e0a3      	b.n	800f378 <_printf_i+0x1f4>
 800f230:	6820      	ldr	r0, [r4, #0]
 800f232:	6829      	ldr	r1, [r5, #0]
 800f234:	0606      	lsls	r6, r0, #24
 800f236:	f101 0304 	add.w	r3, r1, #4
 800f23a:	d50a      	bpl.n	800f252 <_printf_i+0xce>
 800f23c:	680e      	ldr	r6, [r1, #0]
 800f23e:	602b      	str	r3, [r5, #0]
 800f240:	2e00      	cmp	r6, #0
 800f242:	da03      	bge.n	800f24c <_printf_i+0xc8>
 800f244:	232d      	movs	r3, #45	; 0x2d
 800f246:	4276      	negs	r6, r6
 800f248:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f24c:	485e      	ldr	r0, [pc, #376]	; (800f3c8 <_printf_i+0x244>)
 800f24e:	230a      	movs	r3, #10
 800f250:	e019      	b.n	800f286 <_printf_i+0x102>
 800f252:	680e      	ldr	r6, [r1, #0]
 800f254:	602b      	str	r3, [r5, #0]
 800f256:	f010 0f40 	tst.w	r0, #64	; 0x40
 800f25a:	bf18      	it	ne
 800f25c:	b236      	sxthne	r6, r6
 800f25e:	e7ef      	b.n	800f240 <_printf_i+0xbc>
 800f260:	682b      	ldr	r3, [r5, #0]
 800f262:	6820      	ldr	r0, [r4, #0]
 800f264:	1d19      	adds	r1, r3, #4
 800f266:	6029      	str	r1, [r5, #0]
 800f268:	0601      	lsls	r1, r0, #24
 800f26a:	d501      	bpl.n	800f270 <_printf_i+0xec>
 800f26c:	681e      	ldr	r6, [r3, #0]
 800f26e:	e002      	b.n	800f276 <_printf_i+0xf2>
 800f270:	0646      	lsls	r6, r0, #25
 800f272:	d5fb      	bpl.n	800f26c <_printf_i+0xe8>
 800f274:	881e      	ldrh	r6, [r3, #0]
 800f276:	4854      	ldr	r0, [pc, #336]	; (800f3c8 <_printf_i+0x244>)
 800f278:	2f6f      	cmp	r7, #111	; 0x6f
 800f27a:	bf0c      	ite	eq
 800f27c:	2308      	moveq	r3, #8
 800f27e:	230a      	movne	r3, #10
 800f280:	2100      	movs	r1, #0
 800f282:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f286:	6865      	ldr	r5, [r4, #4]
 800f288:	60a5      	str	r5, [r4, #8]
 800f28a:	2d00      	cmp	r5, #0
 800f28c:	bfa2      	ittt	ge
 800f28e:	6821      	ldrge	r1, [r4, #0]
 800f290:	f021 0104 	bicge.w	r1, r1, #4
 800f294:	6021      	strge	r1, [r4, #0]
 800f296:	b90e      	cbnz	r6, 800f29c <_printf_i+0x118>
 800f298:	2d00      	cmp	r5, #0
 800f29a:	d04d      	beq.n	800f338 <_printf_i+0x1b4>
 800f29c:	4615      	mov	r5, r2
 800f29e:	fbb6 f1f3 	udiv	r1, r6, r3
 800f2a2:	fb03 6711 	mls	r7, r3, r1, r6
 800f2a6:	5dc7      	ldrb	r7, [r0, r7]
 800f2a8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f2ac:	4637      	mov	r7, r6
 800f2ae:	42bb      	cmp	r3, r7
 800f2b0:	460e      	mov	r6, r1
 800f2b2:	d9f4      	bls.n	800f29e <_printf_i+0x11a>
 800f2b4:	2b08      	cmp	r3, #8
 800f2b6:	d10b      	bne.n	800f2d0 <_printf_i+0x14c>
 800f2b8:	6823      	ldr	r3, [r4, #0]
 800f2ba:	07de      	lsls	r6, r3, #31
 800f2bc:	d508      	bpl.n	800f2d0 <_printf_i+0x14c>
 800f2be:	6923      	ldr	r3, [r4, #16]
 800f2c0:	6861      	ldr	r1, [r4, #4]
 800f2c2:	4299      	cmp	r1, r3
 800f2c4:	bfde      	ittt	le
 800f2c6:	2330      	movle	r3, #48	; 0x30
 800f2c8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f2cc:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f2d0:	1b52      	subs	r2, r2, r5
 800f2d2:	6122      	str	r2, [r4, #16]
 800f2d4:	f8cd a000 	str.w	sl, [sp]
 800f2d8:	464b      	mov	r3, r9
 800f2da:	aa03      	add	r2, sp, #12
 800f2dc:	4621      	mov	r1, r4
 800f2de:	4640      	mov	r0, r8
 800f2e0:	f7ff fee2 	bl	800f0a8 <_printf_common>
 800f2e4:	3001      	adds	r0, #1
 800f2e6:	d14c      	bne.n	800f382 <_printf_i+0x1fe>
 800f2e8:	f04f 30ff 	mov.w	r0, #4294967295
 800f2ec:	b004      	add	sp, #16
 800f2ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f2f2:	4835      	ldr	r0, [pc, #212]	; (800f3c8 <_printf_i+0x244>)
 800f2f4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800f2f8:	6829      	ldr	r1, [r5, #0]
 800f2fa:	6823      	ldr	r3, [r4, #0]
 800f2fc:	f851 6b04 	ldr.w	r6, [r1], #4
 800f300:	6029      	str	r1, [r5, #0]
 800f302:	061d      	lsls	r5, r3, #24
 800f304:	d514      	bpl.n	800f330 <_printf_i+0x1ac>
 800f306:	07df      	lsls	r7, r3, #31
 800f308:	bf44      	itt	mi
 800f30a:	f043 0320 	orrmi.w	r3, r3, #32
 800f30e:	6023      	strmi	r3, [r4, #0]
 800f310:	b91e      	cbnz	r6, 800f31a <_printf_i+0x196>
 800f312:	6823      	ldr	r3, [r4, #0]
 800f314:	f023 0320 	bic.w	r3, r3, #32
 800f318:	6023      	str	r3, [r4, #0]
 800f31a:	2310      	movs	r3, #16
 800f31c:	e7b0      	b.n	800f280 <_printf_i+0xfc>
 800f31e:	6823      	ldr	r3, [r4, #0]
 800f320:	f043 0320 	orr.w	r3, r3, #32
 800f324:	6023      	str	r3, [r4, #0]
 800f326:	2378      	movs	r3, #120	; 0x78
 800f328:	4828      	ldr	r0, [pc, #160]	; (800f3cc <_printf_i+0x248>)
 800f32a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f32e:	e7e3      	b.n	800f2f8 <_printf_i+0x174>
 800f330:	0659      	lsls	r1, r3, #25
 800f332:	bf48      	it	mi
 800f334:	b2b6      	uxthmi	r6, r6
 800f336:	e7e6      	b.n	800f306 <_printf_i+0x182>
 800f338:	4615      	mov	r5, r2
 800f33a:	e7bb      	b.n	800f2b4 <_printf_i+0x130>
 800f33c:	682b      	ldr	r3, [r5, #0]
 800f33e:	6826      	ldr	r6, [r4, #0]
 800f340:	6961      	ldr	r1, [r4, #20]
 800f342:	1d18      	adds	r0, r3, #4
 800f344:	6028      	str	r0, [r5, #0]
 800f346:	0635      	lsls	r5, r6, #24
 800f348:	681b      	ldr	r3, [r3, #0]
 800f34a:	d501      	bpl.n	800f350 <_printf_i+0x1cc>
 800f34c:	6019      	str	r1, [r3, #0]
 800f34e:	e002      	b.n	800f356 <_printf_i+0x1d2>
 800f350:	0670      	lsls	r0, r6, #25
 800f352:	d5fb      	bpl.n	800f34c <_printf_i+0x1c8>
 800f354:	8019      	strh	r1, [r3, #0]
 800f356:	2300      	movs	r3, #0
 800f358:	6123      	str	r3, [r4, #16]
 800f35a:	4615      	mov	r5, r2
 800f35c:	e7ba      	b.n	800f2d4 <_printf_i+0x150>
 800f35e:	682b      	ldr	r3, [r5, #0]
 800f360:	1d1a      	adds	r2, r3, #4
 800f362:	602a      	str	r2, [r5, #0]
 800f364:	681d      	ldr	r5, [r3, #0]
 800f366:	6862      	ldr	r2, [r4, #4]
 800f368:	2100      	movs	r1, #0
 800f36a:	4628      	mov	r0, r5
 800f36c:	f7f0 ff38 	bl	80001e0 <memchr>
 800f370:	b108      	cbz	r0, 800f376 <_printf_i+0x1f2>
 800f372:	1b40      	subs	r0, r0, r5
 800f374:	6060      	str	r0, [r4, #4]
 800f376:	6863      	ldr	r3, [r4, #4]
 800f378:	6123      	str	r3, [r4, #16]
 800f37a:	2300      	movs	r3, #0
 800f37c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f380:	e7a8      	b.n	800f2d4 <_printf_i+0x150>
 800f382:	6923      	ldr	r3, [r4, #16]
 800f384:	462a      	mov	r2, r5
 800f386:	4649      	mov	r1, r9
 800f388:	4640      	mov	r0, r8
 800f38a:	47d0      	blx	sl
 800f38c:	3001      	adds	r0, #1
 800f38e:	d0ab      	beq.n	800f2e8 <_printf_i+0x164>
 800f390:	6823      	ldr	r3, [r4, #0]
 800f392:	079b      	lsls	r3, r3, #30
 800f394:	d413      	bmi.n	800f3be <_printf_i+0x23a>
 800f396:	68e0      	ldr	r0, [r4, #12]
 800f398:	9b03      	ldr	r3, [sp, #12]
 800f39a:	4298      	cmp	r0, r3
 800f39c:	bfb8      	it	lt
 800f39e:	4618      	movlt	r0, r3
 800f3a0:	e7a4      	b.n	800f2ec <_printf_i+0x168>
 800f3a2:	2301      	movs	r3, #1
 800f3a4:	4632      	mov	r2, r6
 800f3a6:	4649      	mov	r1, r9
 800f3a8:	4640      	mov	r0, r8
 800f3aa:	47d0      	blx	sl
 800f3ac:	3001      	adds	r0, #1
 800f3ae:	d09b      	beq.n	800f2e8 <_printf_i+0x164>
 800f3b0:	3501      	adds	r5, #1
 800f3b2:	68e3      	ldr	r3, [r4, #12]
 800f3b4:	9903      	ldr	r1, [sp, #12]
 800f3b6:	1a5b      	subs	r3, r3, r1
 800f3b8:	42ab      	cmp	r3, r5
 800f3ba:	dcf2      	bgt.n	800f3a2 <_printf_i+0x21e>
 800f3bc:	e7eb      	b.n	800f396 <_printf_i+0x212>
 800f3be:	2500      	movs	r5, #0
 800f3c0:	f104 0619 	add.w	r6, r4, #25
 800f3c4:	e7f5      	b.n	800f3b2 <_printf_i+0x22e>
 800f3c6:	bf00      	nop
 800f3c8:	08013efa 	.word	0x08013efa
 800f3cc:	08013f0b 	.word	0x08013f0b

0800f3d0 <siprintf>:
 800f3d0:	b40e      	push	{r1, r2, r3}
 800f3d2:	b500      	push	{lr}
 800f3d4:	b09c      	sub	sp, #112	; 0x70
 800f3d6:	ab1d      	add	r3, sp, #116	; 0x74
 800f3d8:	9002      	str	r0, [sp, #8]
 800f3da:	9006      	str	r0, [sp, #24]
 800f3dc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f3e0:	4809      	ldr	r0, [pc, #36]	; (800f408 <siprintf+0x38>)
 800f3e2:	9107      	str	r1, [sp, #28]
 800f3e4:	9104      	str	r1, [sp, #16]
 800f3e6:	4909      	ldr	r1, [pc, #36]	; (800f40c <siprintf+0x3c>)
 800f3e8:	f853 2b04 	ldr.w	r2, [r3], #4
 800f3ec:	9105      	str	r1, [sp, #20]
 800f3ee:	6800      	ldr	r0, [r0, #0]
 800f3f0:	9301      	str	r3, [sp, #4]
 800f3f2:	a902      	add	r1, sp, #8
 800f3f4:	f001 fb68 	bl	8010ac8 <_svfiprintf_r>
 800f3f8:	9b02      	ldr	r3, [sp, #8]
 800f3fa:	2200      	movs	r2, #0
 800f3fc:	701a      	strb	r2, [r3, #0]
 800f3fe:	b01c      	add	sp, #112	; 0x70
 800f400:	f85d eb04 	ldr.w	lr, [sp], #4
 800f404:	b003      	add	sp, #12
 800f406:	4770      	bx	lr
 800f408:	2000001c 	.word	0x2000001c
 800f40c:	ffff0208 	.word	0xffff0208

0800f410 <quorem>:
 800f410:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f414:	6903      	ldr	r3, [r0, #16]
 800f416:	690c      	ldr	r4, [r1, #16]
 800f418:	42a3      	cmp	r3, r4
 800f41a:	4607      	mov	r7, r0
 800f41c:	f2c0 8081 	blt.w	800f522 <quorem+0x112>
 800f420:	3c01      	subs	r4, #1
 800f422:	f101 0814 	add.w	r8, r1, #20
 800f426:	f100 0514 	add.w	r5, r0, #20
 800f42a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f42e:	9301      	str	r3, [sp, #4]
 800f430:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800f434:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f438:	3301      	adds	r3, #1
 800f43a:	429a      	cmp	r2, r3
 800f43c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800f440:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800f444:	fbb2 f6f3 	udiv	r6, r2, r3
 800f448:	d331      	bcc.n	800f4ae <quorem+0x9e>
 800f44a:	f04f 0e00 	mov.w	lr, #0
 800f44e:	4640      	mov	r0, r8
 800f450:	46ac      	mov	ip, r5
 800f452:	46f2      	mov	sl, lr
 800f454:	f850 2b04 	ldr.w	r2, [r0], #4
 800f458:	b293      	uxth	r3, r2
 800f45a:	fb06 e303 	mla	r3, r6, r3, lr
 800f45e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800f462:	b29b      	uxth	r3, r3
 800f464:	ebaa 0303 	sub.w	r3, sl, r3
 800f468:	f8dc a000 	ldr.w	sl, [ip]
 800f46c:	0c12      	lsrs	r2, r2, #16
 800f46e:	fa13 f38a 	uxtah	r3, r3, sl
 800f472:	fb06 e202 	mla	r2, r6, r2, lr
 800f476:	9300      	str	r3, [sp, #0]
 800f478:	9b00      	ldr	r3, [sp, #0]
 800f47a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800f47e:	b292      	uxth	r2, r2
 800f480:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800f484:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f488:	f8bd 3000 	ldrh.w	r3, [sp]
 800f48c:	4581      	cmp	r9, r0
 800f48e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f492:	f84c 3b04 	str.w	r3, [ip], #4
 800f496:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800f49a:	d2db      	bcs.n	800f454 <quorem+0x44>
 800f49c:	f855 300b 	ldr.w	r3, [r5, fp]
 800f4a0:	b92b      	cbnz	r3, 800f4ae <quorem+0x9e>
 800f4a2:	9b01      	ldr	r3, [sp, #4]
 800f4a4:	3b04      	subs	r3, #4
 800f4a6:	429d      	cmp	r5, r3
 800f4a8:	461a      	mov	r2, r3
 800f4aa:	d32e      	bcc.n	800f50a <quorem+0xfa>
 800f4ac:	613c      	str	r4, [r7, #16]
 800f4ae:	4638      	mov	r0, r7
 800f4b0:	f001 f8b6 	bl	8010620 <__mcmp>
 800f4b4:	2800      	cmp	r0, #0
 800f4b6:	db24      	blt.n	800f502 <quorem+0xf2>
 800f4b8:	3601      	adds	r6, #1
 800f4ba:	4628      	mov	r0, r5
 800f4bc:	f04f 0c00 	mov.w	ip, #0
 800f4c0:	f858 2b04 	ldr.w	r2, [r8], #4
 800f4c4:	f8d0 e000 	ldr.w	lr, [r0]
 800f4c8:	b293      	uxth	r3, r2
 800f4ca:	ebac 0303 	sub.w	r3, ip, r3
 800f4ce:	0c12      	lsrs	r2, r2, #16
 800f4d0:	fa13 f38e 	uxtah	r3, r3, lr
 800f4d4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800f4d8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f4dc:	b29b      	uxth	r3, r3
 800f4de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f4e2:	45c1      	cmp	r9, r8
 800f4e4:	f840 3b04 	str.w	r3, [r0], #4
 800f4e8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800f4ec:	d2e8      	bcs.n	800f4c0 <quorem+0xb0>
 800f4ee:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f4f2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f4f6:	b922      	cbnz	r2, 800f502 <quorem+0xf2>
 800f4f8:	3b04      	subs	r3, #4
 800f4fa:	429d      	cmp	r5, r3
 800f4fc:	461a      	mov	r2, r3
 800f4fe:	d30a      	bcc.n	800f516 <quorem+0x106>
 800f500:	613c      	str	r4, [r7, #16]
 800f502:	4630      	mov	r0, r6
 800f504:	b003      	add	sp, #12
 800f506:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f50a:	6812      	ldr	r2, [r2, #0]
 800f50c:	3b04      	subs	r3, #4
 800f50e:	2a00      	cmp	r2, #0
 800f510:	d1cc      	bne.n	800f4ac <quorem+0x9c>
 800f512:	3c01      	subs	r4, #1
 800f514:	e7c7      	b.n	800f4a6 <quorem+0x96>
 800f516:	6812      	ldr	r2, [r2, #0]
 800f518:	3b04      	subs	r3, #4
 800f51a:	2a00      	cmp	r2, #0
 800f51c:	d1f0      	bne.n	800f500 <quorem+0xf0>
 800f51e:	3c01      	subs	r4, #1
 800f520:	e7eb      	b.n	800f4fa <quorem+0xea>
 800f522:	2000      	movs	r0, #0
 800f524:	e7ee      	b.n	800f504 <quorem+0xf4>
	...

0800f528 <_dtoa_r>:
 800f528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f52c:	ed2d 8b04 	vpush	{d8-d9}
 800f530:	ec57 6b10 	vmov	r6, r7, d0
 800f534:	b093      	sub	sp, #76	; 0x4c
 800f536:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800f538:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800f53c:	9106      	str	r1, [sp, #24]
 800f53e:	ee10 aa10 	vmov	sl, s0
 800f542:	4604      	mov	r4, r0
 800f544:	9209      	str	r2, [sp, #36]	; 0x24
 800f546:	930c      	str	r3, [sp, #48]	; 0x30
 800f548:	46bb      	mov	fp, r7
 800f54a:	b975      	cbnz	r5, 800f56a <_dtoa_r+0x42>
 800f54c:	2010      	movs	r0, #16
 800f54e:	f000 fddd 	bl	801010c <malloc>
 800f552:	4602      	mov	r2, r0
 800f554:	6260      	str	r0, [r4, #36]	; 0x24
 800f556:	b920      	cbnz	r0, 800f562 <_dtoa_r+0x3a>
 800f558:	4ba7      	ldr	r3, [pc, #668]	; (800f7f8 <_dtoa_r+0x2d0>)
 800f55a:	21ea      	movs	r1, #234	; 0xea
 800f55c:	48a7      	ldr	r0, [pc, #668]	; (800f7fc <_dtoa_r+0x2d4>)
 800f55e:	f001 fbc3 	bl	8010ce8 <__assert_func>
 800f562:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800f566:	6005      	str	r5, [r0, #0]
 800f568:	60c5      	str	r5, [r0, #12]
 800f56a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f56c:	6819      	ldr	r1, [r3, #0]
 800f56e:	b151      	cbz	r1, 800f586 <_dtoa_r+0x5e>
 800f570:	685a      	ldr	r2, [r3, #4]
 800f572:	604a      	str	r2, [r1, #4]
 800f574:	2301      	movs	r3, #1
 800f576:	4093      	lsls	r3, r2
 800f578:	608b      	str	r3, [r1, #8]
 800f57a:	4620      	mov	r0, r4
 800f57c:	f000 fe0e 	bl	801019c <_Bfree>
 800f580:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f582:	2200      	movs	r2, #0
 800f584:	601a      	str	r2, [r3, #0]
 800f586:	1e3b      	subs	r3, r7, #0
 800f588:	bfaa      	itet	ge
 800f58a:	2300      	movge	r3, #0
 800f58c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800f590:	f8c8 3000 	strge.w	r3, [r8]
 800f594:	4b9a      	ldr	r3, [pc, #616]	; (800f800 <_dtoa_r+0x2d8>)
 800f596:	bfbc      	itt	lt
 800f598:	2201      	movlt	r2, #1
 800f59a:	f8c8 2000 	strlt.w	r2, [r8]
 800f59e:	ea33 030b 	bics.w	r3, r3, fp
 800f5a2:	d11b      	bne.n	800f5dc <_dtoa_r+0xb4>
 800f5a4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f5a6:	f242 730f 	movw	r3, #9999	; 0x270f
 800f5aa:	6013      	str	r3, [r2, #0]
 800f5ac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f5b0:	4333      	orrs	r3, r6
 800f5b2:	f000 8592 	beq.w	80100da <_dtoa_r+0xbb2>
 800f5b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f5b8:	b963      	cbnz	r3, 800f5d4 <_dtoa_r+0xac>
 800f5ba:	4b92      	ldr	r3, [pc, #584]	; (800f804 <_dtoa_r+0x2dc>)
 800f5bc:	e022      	b.n	800f604 <_dtoa_r+0xdc>
 800f5be:	4b92      	ldr	r3, [pc, #584]	; (800f808 <_dtoa_r+0x2e0>)
 800f5c0:	9301      	str	r3, [sp, #4]
 800f5c2:	3308      	adds	r3, #8
 800f5c4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800f5c6:	6013      	str	r3, [r2, #0]
 800f5c8:	9801      	ldr	r0, [sp, #4]
 800f5ca:	b013      	add	sp, #76	; 0x4c
 800f5cc:	ecbd 8b04 	vpop	{d8-d9}
 800f5d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f5d4:	4b8b      	ldr	r3, [pc, #556]	; (800f804 <_dtoa_r+0x2dc>)
 800f5d6:	9301      	str	r3, [sp, #4]
 800f5d8:	3303      	adds	r3, #3
 800f5da:	e7f3      	b.n	800f5c4 <_dtoa_r+0x9c>
 800f5dc:	2200      	movs	r2, #0
 800f5de:	2300      	movs	r3, #0
 800f5e0:	4650      	mov	r0, sl
 800f5e2:	4659      	mov	r1, fp
 800f5e4:	f7f1 fa70 	bl	8000ac8 <__aeabi_dcmpeq>
 800f5e8:	ec4b ab19 	vmov	d9, sl, fp
 800f5ec:	4680      	mov	r8, r0
 800f5ee:	b158      	cbz	r0, 800f608 <_dtoa_r+0xe0>
 800f5f0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f5f2:	2301      	movs	r3, #1
 800f5f4:	6013      	str	r3, [r2, #0]
 800f5f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f5f8:	2b00      	cmp	r3, #0
 800f5fa:	f000 856b 	beq.w	80100d4 <_dtoa_r+0xbac>
 800f5fe:	4883      	ldr	r0, [pc, #524]	; (800f80c <_dtoa_r+0x2e4>)
 800f600:	6018      	str	r0, [r3, #0]
 800f602:	1e43      	subs	r3, r0, #1
 800f604:	9301      	str	r3, [sp, #4]
 800f606:	e7df      	b.n	800f5c8 <_dtoa_r+0xa0>
 800f608:	ec4b ab10 	vmov	d0, sl, fp
 800f60c:	aa10      	add	r2, sp, #64	; 0x40
 800f60e:	a911      	add	r1, sp, #68	; 0x44
 800f610:	4620      	mov	r0, r4
 800f612:	f001 f8ab 	bl	801076c <__d2b>
 800f616:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800f61a:	ee08 0a10 	vmov	s16, r0
 800f61e:	2d00      	cmp	r5, #0
 800f620:	f000 8084 	beq.w	800f72c <_dtoa_r+0x204>
 800f624:	ee19 3a90 	vmov	r3, s19
 800f628:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f62c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800f630:	4656      	mov	r6, sl
 800f632:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800f636:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800f63a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800f63e:	4b74      	ldr	r3, [pc, #464]	; (800f810 <_dtoa_r+0x2e8>)
 800f640:	2200      	movs	r2, #0
 800f642:	4630      	mov	r0, r6
 800f644:	4639      	mov	r1, r7
 800f646:	f7f0 fe1f 	bl	8000288 <__aeabi_dsub>
 800f64a:	a365      	add	r3, pc, #404	; (adr r3, 800f7e0 <_dtoa_r+0x2b8>)
 800f64c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f650:	f7f0 ffd2 	bl	80005f8 <__aeabi_dmul>
 800f654:	a364      	add	r3, pc, #400	; (adr r3, 800f7e8 <_dtoa_r+0x2c0>)
 800f656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f65a:	f7f0 fe17 	bl	800028c <__adddf3>
 800f65e:	4606      	mov	r6, r0
 800f660:	4628      	mov	r0, r5
 800f662:	460f      	mov	r7, r1
 800f664:	f7f0 ff5e 	bl	8000524 <__aeabi_i2d>
 800f668:	a361      	add	r3, pc, #388	; (adr r3, 800f7f0 <_dtoa_r+0x2c8>)
 800f66a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f66e:	f7f0 ffc3 	bl	80005f8 <__aeabi_dmul>
 800f672:	4602      	mov	r2, r0
 800f674:	460b      	mov	r3, r1
 800f676:	4630      	mov	r0, r6
 800f678:	4639      	mov	r1, r7
 800f67a:	f7f0 fe07 	bl	800028c <__adddf3>
 800f67e:	4606      	mov	r6, r0
 800f680:	460f      	mov	r7, r1
 800f682:	f7f1 fa69 	bl	8000b58 <__aeabi_d2iz>
 800f686:	2200      	movs	r2, #0
 800f688:	9000      	str	r0, [sp, #0]
 800f68a:	2300      	movs	r3, #0
 800f68c:	4630      	mov	r0, r6
 800f68e:	4639      	mov	r1, r7
 800f690:	f7f1 fa24 	bl	8000adc <__aeabi_dcmplt>
 800f694:	b150      	cbz	r0, 800f6ac <_dtoa_r+0x184>
 800f696:	9800      	ldr	r0, [sp, #0]
 800f698:	f7f0 ff44 	bl	8000524 <__aeabi_i2d>
 800f69c:	4632      	mov	r2, r6
 800f69e:	463b      	mov	r3, r7
 800f6a0:	f7f1 fa12 	bl	8000ac8 <__aeabi_dcmpeq>
 800f6a4:	b910      	cbnz	r0, 800f6ac <_dtoa_r+0x184>
 800f6a6:	9b00      	ldr	r3, [sp, #0]
 800f6a8:	3b01      	subs	r3, #1
 800f6aa:	9300      	str	r3, [sp, #0]
 800f6ac:	9b00      	ldr	r3, [sp, #0]
 800f6ae:	2b16      	cmp	r3, #22
 800f6b0:	d85a      	bhi.n	800f768 <_dtoa_r+0x240>
 800f6b2:	9a00      	ldr	r2, [sp, #0]
 800f6b4:	4b57      	ldr	r3, [pc, #348]	; (800f814 <_dtoa_r+0x2ec>)
 800f6b6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f6ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6be:	ec51 0b19 	vmov	r0, r1, d9
 800f6c2:	f7f1 fa0b 	bl	8000adc <__aeabi_dcmplt>
 800f6c6:	2800      	cmp	r0, #0
 800f6c8:	d050      	beq.n	800f76c <_dtoa_r+0x244>
 800f6ca:	9b00      	ldr	r3, [sp, #0]
 800f6cc:	3b01      	subs	r3, #1
 800f6ce:	9300      	str	r3, [sp, #0]
 800f6d0:	2300      	movs	r3, #0
 800f6d2:	930b      	str	r3, [sp, #44]	; 0x2c
 800f6d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f6d6:	1b5d      	subs	r5, r3, r5
 800f6d8:	1e6b      	subs	r3, r5, #1
 800f6da:	9305      	str	r3, [sp, #20]
 800f6dc:	bf45      	ittet	mi
 800f6de:	f1c5 0301 	rsbmi	r3, r5, #1
 800f6e2:	9304      	strmi	r3, [sp, #16]
 800f6e4:	2300      	movpl	r3, #0
 800f6e6:	2300      	movmi	r3, #0
 800f6e8:	bf4c      	ite	mi
 800f6ea:	9305      	strmi	r3, [sp, #20]
 800f6ec:	9304      	strpl	r3, [sp, #16]
 800f6ee:	9b00      	ldr	r3, [sp, #0]
 800f6f0:	2b00      	cmp	r3, #0
 800f6f2:	db3d      	blt.n	800f770 <_dtoa_r+0x248>
 800f6f4:	9b05      	ldr	r3, [sp, #20]
 800f6f6:	9a00      	ldr	r2, [sp, #0]
 800f6f8:	920a      	str	r2, [sp, #40]	; 0x28
 800f6fa:	4413      	add	r3, r2
 800f6fc:	9305      	str	r3, [sp, #20]
 800f6fe:	2300      	movs	r3, #0
 800f700:	9307      	str	r3, [sp, #28]
 800f702:	9b06      	ldr	r3, [sp, #24]
 800f704:	2b09      	cmp	r3, #9
 800f706:	f200 8089 	bhi.w	800f81c <_dtoa_r+0x2f4>
 800f70a:	2b05      	cmp	r3, #5
 800f70c:	bfc4      	itt	gt
 800f70e:	3b04      	subgt	r3, #4
 800f710:	9306      	strgt	r3, [sp, #24]
 800f712:	9b06      	ldr	r3, [sp, #24]
 800f714:	f1a3 0302 	sub.w	r3, r3, #2
 800f718:	bfcc      	ite	gt
 800f71a:	2500      	movgt	r5, #0
 800f71c:	2501      	movle	r5, #1
 800f71e:	2b03      	cmp	r3, #3
 800f720:	f200 8087 	bhi.w	800f832 <_dtoa_r+0x30a>
 800f724:	e8df f003 	tbb	[pc, r3]
 800f728:	59383a2d 	.word	0x59383a2d
 800f72c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800f730:	441d      	add	r5, r3
 800f732:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800f736:	2b20      	cmp	r3, #32
 800f738:	bfc1      	itttt	gt
 800f73a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800f73e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800f742:	fa0b f303 	lslgt.w	r3, fp, r3
 800f746:	fa26 f000 	lsrgt.w	r0, r6, r0
 800f74a:	bfda      	itte	le
 800f74c:	f1c3 0320 	rsble	r3, r3, #32
 800f750:	fa06 f003 	lslle.w	r0, r6, r3
 800f754:	4318      	orrgt	r0, r3
 800f756:	f7f0 fed5 	bl	8000504 <__aeabi_ui2d>
 800f75a:	2301      	movs	r3, #1
 800f75c:	4606      	mov	r6, r0
 800f75e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800f762:	3d01      	subs	r5, #1
 800f764:	930e      	str	r3, [sp, #56]	; 0x38
 800f766:	e76a      	b.n	800f63e <_dtoa_r+0x116>
 800f768:	2301      	movs	r3, #1
 800f76a:	e7b2      	b.n	800f6d2 <_dtoa_r+0x1aa>
 800f76c:	900b      	str	r0, [sp, #44]	; 0x2c
 800f76e:	e7b1      	b.n	800f6d4 <_dtoa_r+0x1ac>
 800f770:	9b04      	ldr	r3, [sp, #16]
 800f772:	9a00      	ldr	r2, [sp, #0]
 800f774:	1a9b      	subs	r3, r3, r2
 800f776:	9304      	str	r3, [sp, #16]
 800f778:	4253      	negs	r3, r2
 800f77a:	9307      	str	r3, [sp, #28]
 800f77c:	2300      	movs	r3, #0
 800f77e:	930a      	str	r3, [sp, #40]	; 0x28
 800f780:	e7bf      	b.n	800f702 <_dtoa_r+0x1da>
 800f782:	2300      	movs	r3, #0
 800f784:	9308      	str	r3, [sp, #32]
 800f786:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f788:	2b00      	cmp	r3, #0
 800f78a:	dc55      	bgt.n	800f838 <_dtoa_r+0x310>
 800f78c:	2301      	movs	r3, #1
 800f78e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800f792:	461a      	mov	r2, r3
 800f794:	9209      	str	r2, [sp, #36]	; 0x24
 800f796:	e00c      	b.n	800f7b2 <_dtoa_r+0x28a>
 800f798:	2301      	movs	r3, #1
 800f79a:	e7f3      	b.n	800f784 <_dtoa_r+0x25c>
 800f79c:	2300      	movs	r3, #0
 800f79e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f7a0:	9308      	str	r3, [sp, #32]
 800f7a2:	9b00      	ldr	r3, [sp, #0]
 800f7a4:	4413      	add	r3, r2
 800f7a6:	9302      	str	r3, [sp, #8]
 800f7a8:	3301      	adds	r3, #1
 800f7aa:	2b01      	cmp	r3, #1
 800f7ac:	9303      	str	r3, [sp, #12]
 800f7ae:	bfb8      	it	lt
 800f7b0:	2301      	movlt	r3, #1
 800f7b2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800f7b4:	2200      	movs	r2, #0
 800f7b6:	6042      	str	r2, [r0, #4]
 800f7b8:	2204      	movs	r2, #4
 800f7ba:	f102 0614 	add.w	r6, r2, #20
 800f7be:	429e      	cmp	r6, r3
 800f7c0:	6841      	ldr	r1, [r0, #4]
 800f7c2:	d93d      	bls.n	800f840 <_dtoa_r+0x318>
 800f7c4:	4620      	mov	r0, r4
 800f7c6:	f000 fca9 	bl	801011c <_Balloc>
 800f7ca:	9001      	str	r0, [sp, #4]
 800f7cc:	2800      	cmp	r0, #0
 800f7ce:	d13b      	bne.n	800f848 <_dtoa_r+0x320>
 800f7d0:	4b11      	ldr	r3, [pc, #68]	; (800f818 <_dtoa_r+0x2f0>)
 800f7d2:	4602      	mov	r2, r0
 800f7d4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800f7d8:	e6c0      	b.n	800f55c <_dtoa_r+0x34>
 800f7da:	2301      	movs	r3, #1
 800f7dc:	e7df      	b.n	800f79e <_dtoa_r+0x276>
 800f7de:	bf00      	nop
 800f7e0:	636f4361 	.word	0x636f4361
 800f7e4:	3fd287a7 	.word	0x3fd287a7
 800f7e8:	8b60c8b3 	.word	0x8b60c8b3
 800f7ec:	3fc68a28 	.word	0x3fc68a28
 800f7f0:	509f79fb 	.word	0x509f79fb
 800f7f4:	3fd34413 	.word	0x3fd34413
 800f7f8:	08013f29 	.word	0x08013f29
 800f7fc:	08013f40 	.word	0x08013f40
 800f800:	7ff00000 	.word	0x7ff00000
 800f804:	08013f25 	.word	0x08013f25
 800f808:	08013f1c 	.word	0x08013f1c
 800f80c:	08013ef9 	.word	0x08013ef9
 800f810:	3ff80000 	.word	0x3ff80000
 800f814:	08014030 	.word	0x08014030
 800f818:	08013f9b 	.word	0x08013f9b
 800f81c:	2501      	movs	r5, #1
 800f81e:	2300      	movs	r3, #0
 800f820:	9306      	str	r3, [sp, #24]
 800f822:	9508      	str	r5, [sp, #32]
 800f824:	f04f 33ff 	mov.w	r3, #4294967295
 800f828:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800f82c:	2200      	movs	r2, #0
 800f82e:	2312      	movs	r3, #18
 800f830:	e7b0      	b.n	800f794 <_dtoa_r+0x26c>
 800f832:	2301      	movs	r3, #1
 800f834:	9308      	str	r3, [sp, #32]
 800f836:	e7f5      	b.n	800f824 <_dtoa_r+0x2fc>
 800f838:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f83a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800f83e:	e7b8      	b.n	800f7b2 <_dtoa_r+0x28a>
 800f840:	3101      	adds	r1, #1
 800f842:	6041      	str	r1, [r0, #4]
 800f844:	0052      	lsls	r2, r2, #1
 800f846:	e7b8      	b.n	800f7ba <_dtoa_r+0x292>
 800f848:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f84a:	9a01      	ldr	r2, [sp, #4]
 800f84c:	601a      	str	r2, [r3, #0]
 800f84e:	9b03      	ldr	r3, [sp, #12]
 800f850:	2b0e      	cmp	r3, #14
 800f852:	f200 809d 	bhi.w	800f990 <_dtoa_r+0x468>
 800f856:	2d00      	cmp	r5, #0
 800f858:	f000 809a 	beq.w	800f990 <_dtoa_r+0x468>
 800f85c:	9b00      	ldr	r3, [sp, #0]
 800f85e:	2b00      	cmp	r3, #0
 800f860:	dd32      	ble.n	800f8c8 <_dtoa_r+0x3a0>
 800f862:	4ab7      	ldr	r2, [pc, #732]	; (800fb40 <_dtoa_r+0x618>)
 800f864:	f003 030f 	and.w	r3, r3, #15
 800f868:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800f86c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f870:	9b00      	ldr	r3, [sp, #0]
 800f872:	05d8      	lsls	r0, r3, #23
 800f874:	ea4f 1723 	mov.w	r7, r3, asr #4
 800f878:	d516      	bpl.n	800f8a8 <_dtoa_r+0x380>
 800f87a:	4bb2      	ldr	r3, [pc, #712]	; (800fb44 <_dtoa_r+0x61c>)
 800f87c:	ec51 0b19 	vmov	r0, r1, d9
 800f880:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f884:	f7f0 ffe2 	bl	800084c <__aeabi_ddiv>
 800f888:	f007 070f 	and.w	r7, r7, #15
 800f88c:	4682      	mov	sl, r0
 800f88e:	468b      	mov	fp, r1
 800f890:	2503      	movs	r5, #3
 800f892:	4eac      	ldr	r6, [pc, #688]	; (800fb44 <_dtoa_r+0x61c>)
 800f894:	b957      	cbnz	r7, 800f8ac <_dtoa_r+0x384>
 800f896:	4642      	mov	r2, r8
 800f898:	464b      	mov	r3, r9
 800f89a:	4650      	mov	r0, sl
 800f89c:	4659      	mov	r1, fp
 800f89e:	f7f0 ffd5 	bl	800084c <__aeabi_ddiv>
 800f8a2:	4682      	mov	sl, r0
 800f8a4:	468b      	mov	fp, r1
 800f8a6:	e028      	b.n	800f8fa <_dtoa_r+0x3d2>
 800f8a8:	2502      	movs	r5, #2
 800f8aa:	e7f2      	b.n	800f892 <_dtoa_r+0x36a>
 800f8ac:	07f9      	lsls	r1, r7, #31
 800f8ae:	d508      	bpl.n	800f8c2 <_dtoa_r+0x39a>
 800f8b0:	4640      	mov	r0, r8
 800f8b2:	4649      	mov	r1, r9
 800f8b4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800f8b8:	f7f0 fe9e 	bl	80005f8 <__aeabi_dmul>
 800f8bc:	3501      	adds	r5, #1
 800f8be:	4680      	mov	r8, r0
 800f8c0:	4689      	mov	r9, r1
 800f8c2:	107f      	asrs	r7, r7, #1
 800f8c4:	3608      	adds	r6, #8
 800f8c6:	e7e5      	b.n	800f894 <_dtoa_r+0x36c>
 800f8c8:	f000 809b 	beq.w	800fa02 <_dtoa_r+0x4da>
 800f8cc:	9b00      	ldr	r3, [sp, #0]
 800f8ce:	4f9d      	ldr	r7, [pc, #628]	; (800fb44 <_dtoa_r+0x61c>)
 800f8d0:	425e      	negs	r6, r3
 800f8d2:	4b9b      	ldr	r3, [pc, #620]	; (800fb40 <_dtoa_r+0x618>)
 800f8d4:	f006 020f 	and.w	r2, r6, #15
 800f8d8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f8dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8e0:	ec51 0b19 	vmov	r0, r1, d9
 800f8e4:	f7f0 fe88 	bl	80005f8 <__aeabi_dmul>
 800f8e8:	1136      	asrs	r6, r6, #4
 800f8ea:	4682      	mov	sl, r0
 800f8ec:	468b      	mov	fp, r1
 800f8ee:	2300      	movs	r3, #0
 800f8f0:	2502      	movs	r5, #2
 800f8f2:	2e00      	cmp	r6, #0
 800f8f4:	d17a      	bne.n	800f9ec <_dtoa_r+0x4c4>
 800f8f6:	2b00      	cmp	r3, #0
 800f8f8:	d1d3      	bne.n	800f8a2 <_dtoa_r+0x37a>
 800f8fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f8fc:	2b00      	cmp	r3, #0
 800f8fe:	f000 8082 	beq.w	800fa06 <_dtoa_r+0x4de>
 800f902:	4b91      	ldr	r3, [pc, #580]	; (800fb48 <_dtoa_r+0x620>)
 800f904:	2200      	movs	r2, #0
 800f906:	4650      	mov	r0, sl
 800f908:	4659      	mov	r1, fp
 800f90a:	f7f1 f8e7 	bl	8000adc <__aeabi_dcmplt>
 800f90e:	2800      	cmp	r0, #0
 800f910:	d079      	beq.n	800fa06 <_dtoa_r+0x4de>
 800f912:	9b03      	ldr	r3, [sp, #12]
 800f914:	2b00      	cmp	r3, #0
 800f916:	d076      	beq.n	800fa06 <_dtoa_r+0x4de>
 800f918:	9b02      	ldr	r3, [sp, #8]
 800f91a:	2b00      	cmp	r3, #0
 800f91c:	dd36      	ble.n	800f98c <_dtoa_r+0x464>
 800f91e:	9b00      	ldr	r3, [sp, #0]
 800f920:	4650      	mov	r0, sl
 800f922:	4659      	mov	r1, fp
 800f924:	1e5f      	subs	r7, r3, #1
 800f926:	2200      	movs	r2, #0
 800f928:	4b88      	ldr	r3, [pc, #544]	; (800fb4c <_dtoa_r+0x624>)
 800f92a:	f7f0 fe65 	bl	80005f8 <__aeabi_dmul>
 800f92e:	9e02      	ldr	r6, [sp, #8]
 800f930:	4682      	mov	sl, r0
 800f932:	468b      	mov	fp, r1
 800f934:	3501      	adds	r5, #1
 800f936:	4628      	mov	r0, r5
 800f938:	f7f0 fdf4 	bl	8000524 <__aeabi_i2d>
 800f93c:	4652      	mov	r2, sl
 800f93e:	465b      	mov	r3, fp
 800f940:	f7f0 fe5a 	bl	80005f8 <__aeabi_dmul>
 800f944:	4b82      	ldr	r3, [pc, #520]	; (800fb50 <_dtoa_r+0x628>)
 800f946:	2200      	movs	r2, #0
 800f948:	f7f0 fca0 	bl	800028c <__adddf3>
 800f94c:	46d0      	mov	r8, sl
 800f94e:	46d9      	mov	r9, fp
 800f950:	4682      	mov	sl, r0
 800f952:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800f956:	2e00      	cmp	r6, #0
 800f958:	d158      	bne.n	800fa0c <_dtoa_r+0x4e4>
 800f95a:	4b7e      	ldr	r3, [pc, #504]	; (800fb54 <_dtoa_r+0x62c>)
 800f95c:	2200      	movs	r2, #0
 800f95e:	4640      	mov	r0, r8
 800f960:	4649      	mov	r1, r9
 800f962:	f7f0 fc91 	bl	8000288 <__aeabi_dsub>
 800f966:	4652      	mov	r2, sl
 800f968:	465b      	mov	r3, fp
 800f96a:	4680      	mov	r8, r0
 800f96c:	4689      	mov	r9, r1
 800f96e:	f7f1 f8d3 	bl	8000b18 <__aeabi_dcmpgt>
 800f972:	2800      	cmp	r0, #0
 800f974:	f040 8295 	bne.w	800fea2 <_dtoa_r+0x97a>
 800f978:	4652      	mov	r2, sl
 800f97a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800f97e:	4640      	mov	r0, r8
 800f980:	4649      	mov	r1, r9
 800f982:	f7f1 f8ab 	bl	8000adc <__aeabi_dcmplt>
 800f986:	2800      	cmp	r0, #0
 800f988:	f040 8289 	bne.w	800fe9e <_dtoa_r+0x976>
 800f98c:	ec5b ab19 	vmov	sl, fp, d9
 800f990:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f992:	2b00      	cmp	r3, #0
 800f994:	f2c0 8148 	blt.w	800fc28 <_dtoa_r+0x700>
 800f998:	9a00      	ldr	r2, [sp, #0]
 800f99a:	2a0e      	cmp	r2, #14
 800f99c:	f300 8144 	bgt.w	800fc28 <_dtoa_r+0x700>
 800f9a0:	4b67      	ldr	r3, [pc, #412]	; (800fb40 <_dtoa_r+0x618>)
 800f9a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f9a6:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f9aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f9ac:	2b00      	cmp	r3, #0
 800f9ae:	f280 80d5 	bge.w	800fb5c <_dtoa_r+0x634>
 800f9b2:	9b03      	ldr	r3, [sp, #12]
 800f9b4:	2b00      	cmp	r3, #0
 800f9b6:	f300 80d1 	bgt.w	800fb5c <_dtoa_r+0x634>
 800f9ba:	f040 826f 	bne.w	800fe9c <_dtoa_r+0x974>
 800f9be:	4b65      	ldr	r3, [pc, #404]	; (800fb54 <_dtoa_r+0x62c>)
 800f9c0:	2200      	movs	r2, #0
 800f9c2:	4640      	mov	r0, r8
 800f9c4:	4649      	mov	r1, r9
 800f9c6:	f7f0 fe17 	bl	80005f8 <__aeabi_dmul>
 800f9ca:	4652      	mov	r2, sl
 800f9cc:	465b      	mov	r3, fp
 800f9ce:	f7f1 f899 	bl	8000b04 <__aeabi_dcmpge>
 800f9d2:	9e03      	ldr	r6, [sp, #12]
 800f9d4:	4637      	mov	r7, r6
 800f9d6:	2800      	cmp	r0, #0
 800f9d8:	f040 8245 	bne.w	800fe66 <_dtoa_r+0x93e>
 800f9dc:	9d01      	ldr	r5, [sp, #4]
 800f9de:	2331      	movs	r3, #49	; 0x31
 800f9e0:	f805 3b01 	strb.w	r3, [r5], #1
 800f9e4:	9b00      	ldr	r3, [sp, #0]
 800f9e6:	3301      	adds	r3, #1
 800f9e8:	9300      	str	r3, [sp, #0]
 800f9ea:	e240      	b.n	800fe6e <_dtoa_r+0x946>
 800f9ec:	07f2      	lsls	r2, r6, #31
 800f9ee:	d505      	bpl.n	800f9fc <_dtoa_r+0x4d4>
 800f9f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f9f4:	f7f0 fe00 	bl	80005f8 <__aeabi_dmul>
 800f9f8:	3501      	adds	r5, #1
 800f9fa:	2301      	movs	r3, #1
 800f9fc:	1076      	asrs	r6, r6, #1
 800f9fe:	3708      	adds	r7, #8
 800fa00:	e777      	b.n	800f8f2 <_dtoa_r+0x3ca>
 800fa02:	2502      	movs	r5, #2
 800fa04:	e779      	b.n	800f8fa <_dtoa_r+0x3d2>
 800fa06:	9f00      	ldr	r7, [sp, #0]
 800fa08:	9e03      	ldr	r6, [sp, #12]
 800fa0a:	e794      	b.n	800f936 <_dtoa_r+0x40e>
 800fa0c:	9901      	ldr	r1, [sp, #4]
 800fa0e:	4b4c      	ldr	r3, [pc, #304]	; (800fb40 <_dtoa_r+0x618>)
 800fa10:	4431      	add	r1, r6
 800fa12:	910d      	str	r1, [sp, #52]	; 0x34
 800fa14:	9908      	ldr	r1, [sp, #32]
 800fa16:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800fa1a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800fa1e:	2900      	cmp	r1, #0
 800fa20:	d043      	beq.n	800faaa <_dtoa_r+0x582>
 800fa22:	494d      	ldr	r1, [pc, #308]	; (800fb58 <_dtoa_r+0x630>)
 800fa24:	2000      	movs	r0, #0
 800fa26:	f7f0 ff11 	bl	800084c <__aeabi_ddiv>
 800fa2a:	4652      	mov	r2, sl
 800fa2c:	465b      	mov	r3, fp
 800fa2e:	f7f0 fc2b 	bl	8000288 <__aeabi_dsub>
 800fa32:	9d01      	ldr	r5, [sp, #4]
 800fa34:	4682      	mov	sl, r0
 800fa36:	468b      	mov	fp, r1
 800fa38:	4649      	mov	r1, r9
 800fa3a:	4640      	mov	r0, r8
 800fa3c:	f7f1 f88c 	bl	8000b58 <__aeabi_d2iz>
 800fa40:	4606      	mov	r6, r0
 800fa42:	f7f0 fd6f 	bl	8000524 <__aeabi_i2d>
 800fa46:	4602      	mov	r2, r0
 800fa48:	460b      	mov	r3, r1
 800fa4a:	4640      	mov	r0, r8
 800fa4c:	4649      	mov	r1, r9
 800fa4e:	f7f0 fc1b 	bl	8000288 <__aeabi_dsub>
 800fa52:	3630      	adds	r6, #48	; 0x30
 800fa54:	f805 6b01 	strb.w	r6, [r5], #1
 800fa58:	4652      	mov	r2, sl
 800fa5a:	465b      	mov	r3, fp
 800fa5c:	4680      	mov	r8, r0
 800fa5e:	4689      	mov	r9, r1
 800fa60:	f7f1 f83c 	bl	8000adc <__aeabi_dcmplt>
 800fa64:	2800      	cmp	r0, #0
 800fa66:	d163      	bne.n	800fb30 <_dtoa_r+0x608>
 800fa68:	4642      	mov	r2, r8
 800fa6a:	464b      	mov	r3, r9
 800fa6c:	4936      	ldr	r1, [pc, #216]	; (800fb48 <_dtoa_r+0x620>)
 800fa6e:	2000      	movs	r0, #0
 800fa70:	f7f0 fc0a 	bl	8000288 <__aeabi_dsub>
 800fa74:	4652      	mov	r2, sl
 800fa76:	465b      	mov	r3, fp
 800fa78:	f7f1 f830 	bl	8000adc <__aeabi_dcmplt>
 800fa7c:	2800      	cmp	r0, #0
 800fa7e:	f040 80b5 	bne.w	800fbec <_dtoa_r+0x6c4>
 800fa82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fa84:	429d      	cmp	r5, r3
 800fa86:	d081      	beq.n	800f98c <_dtoa_r+0x464>
 800fa88:	4b30      	ldr	r3, [pc, #192]	; (800fb4c <_dtoa_r+0x624>)
 800fa8a:	2200      	movs	r2, #0
 800fa8c:	4650      	mov	r0, sl
 800fa8e:	4659      	mov	r1, fp
 800fa90:	f7f0 fdb2 	bl	80005f8 <__aeabi_dmul>
 800fa94:	4b2d      	ldr	r3, [pc, #180]	; (800fb4c <_dtoa_r+0x624>)
 800fa96:	4682      	mov	sl, r0
 800fa98:	468b      	mov	fp, r1
 800fa9a:	4640      	mov	r0, r8
 800fa9c:	4649      	mov	r1, r9
 800fa9e:	2200      	movs	r2, #0
 800faa0:	f7f0 fdaa 	bl	80005f8 <__aeabi_dmul>
 800faa4:	4680      	mov	r8, r0
 800faa6:	4689      	mov	r9, r1
 800faa8:	e7c6      	b.n	800fa38 <_dtoa_r+0x510>
 800faaa:	4650      	mov	r0, sl
 800faac:	4659      	mov	r1, fp
 800faae:	f7f0 fda3 	bl	80005f8 <__aeabi_dmul>
 800fab2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fab4:	9d01      	ldr	r5, [sp, #4]
 800fab6:	930f      	str	r3, [sp, #60]	; 0x3c
 800fab8:	4682      	mov	sl, r0
 800faba:	468b      	mov	fp, r1
 800fabc:	4649      	mov	r1, r9
 800fabe:	4640      	mov	r0, r8
 800fac0:	f7f1 f84a 	bl	8000b58 <__aeabi_d2iz>
 800fac4:	4606      	mov	r6, r0
 800fac6:	f7f0 fd2d 	bl	8000524 <__aeabi_i2d>
 800faca:	3630      	adds	r6, #48	; 0x30
 800facc:	4602      	mov	r2, r0
 800face:	460b      	mov	r3, r1
 800fad0:	4640      	mov	r0, r8
 800fad2:	4649      	mov	r1, r9
 800fad4:	f7f0 fbd8 	bl	8000288 <__aeabi_dsub>
 800fad8:	f805 6b01 	strb.w	r6, [r5], #1
 800fadc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fade:	429d      	cmp	r5, r3
 800fae0:	4680      	mov	r8, r0
 800fae2:	4689      	mov	r9, r1
 800fae4:	f04f 0200 	mov.w	r2, #0
 800fae8:	d124      	bne.n	800fb34 <_dtoa_r+0x60c>
 800faea:	4b1b      	ldr	r3, [pc, #108]	; (800fb58 <_dtoa_r+0x630>)
 800faec:	4650      	mov	r0, sl
 800faee:	4659      	mov	r1, fp
 800faf0:	f7f0 fbcc 	bl	800028c <__adddf3>
 800faf4:	4602      	mov	r2, r0
 800faf6:	460b      	mov	r3, r1
 800faf8:	4640      	mov	r0, r8
 800fafa:	4649      	mov	r1, r9
 800fafc:	f7f1 f80c 	bl	8000b18 <__aeabi_dcmpgt>
 800fb00:	2800      	cmp	r0, #0
 800fb02:	d173      	bne.n	800fbec <_dtoa_r+0x6c4>
 800fb04:	4652      	mov	r2, sl
 800fb06:	465b      	mov	r3, fp
 800fb08:	4913      	ldr	r1, [pc, #76]	; (800fb58 <_dtoa_r+0x630>)
 800fb0a:	2000      	movs	r0, #0
 800fb0c:	f7f0 fbbc 	bl	8000288 <__aeabi_dsub>
 800fb10:	4602      	mov	r2, r0
 800fb12:	460b      	mov	r3, r1
 800fb14:	4640      	mov	r0, r8
 800fb16:	4649      	mov	r1, r9
 800fb18:	f7f0 ffe0 	bl	8000adc <__aeabi_dcmplt>
 800fb1c:	2800      	cmp	r0, #0
 800fb1e:	f43f af35 	beq.w	800f98c <_dtoa_r+0x464>
 800fb22:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800fb24:	1e6b      	subs	r3, r5, #1
 800fb26:	930f      	str	r3, [sp, #60]	; 0x3c
 800fb28:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800fb2c:	2b30      	cmp	r3, #48	; 0x30
 800fb2e:	d0f8      	beq.n	800fb22 <_dtoa_r+0x5fa>
 800fb30:	9700      	str	r7, [sp, #0]
 800fb32:	e049      	b.n	800fbc8 <_dtoa_r+0x6a0>
 800fb34:	4b05      	ldr	r3, [pc, #20]	; (800fb4c <_dtoa_r+0x624>)
 800fb36:	f7f0 fd5f 	bl	80005f8 <__aeabi_dmul>
 800fb3a:	4680      	mov	r8, r0
 800fb3c:	4689      	mov	r9, r1
 800fb3e:	e7bd      	b.n	800fabc <_dtoa_r+0x594>
 800fb40:	08014030 	.word	0x08014030
 800fb44:	08014008 	.word	0x08014008
 800fb48:	3ff00000 	.word	0x3ff00000
 800fb4c:	40240000 	.word	0x40240000
 800fb50:	401c0000 	.word	0x401c0000
 800fb54:	40140000 	.word	0x40140000
 800fb58:	3fe00000 	.word	0x3fe00000
 800fb5c:	9d01      	ldr	r5, [sp, #4]
 800fb5e:	4656      	mov	r6, sl
 800fb60:	465f      	mov	r7, fp
 800fb62:	4642      	mov	r2, r8
 800fb64:	464b      	mov	r3, r9
 800fb66:	4630      	mov	r0, r6
 800fb68:	4639      	mov	r1, r7
 800fb6a:	f7f0 fe6f 	bl	800084c <__aeabi_ddiv>
 800fb6e:	f7f0 fff3 	bl	8000b58 <__aeabi_d2iz>
 800fb72:	4682      	mov	sl, r0
 800fb74:	f7f0 fcd6 	bl	8000524 <__aeabi_i2d>
 800fb78:	4642      	mov	r2, r8
 800fb7a:	464b      	mov	r3, r9
 800fb7c:	f7f0 fd3c 	bl	80005f8 <__aeabi_dmul>
 800fb80:	4602      	mov	r2, r0
 800fb82:	460b      	mov	r3, r1
 800fb84:	4630      	mov	r0, r6
 800fb86:	4639      	mov	r1, r7
 800fb88:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800fb8c:	f7f0 fb7c 	bl	8000288 <__aeabi_dsub>
 800fb90:	f805 6b01 	strb.w	r6, [r5], #1
 800fb94:	9e01      	ldr	r6, [sp, #4]
 800fb96:	9f03      	ldr	r7, [sp, #12]
 800fb98:	1bae      	subs	r6, r5, r6
 800fb9a:	42b7      	cmp	r7, r6
 800fb9c:	4602      	mov	r2, r0
 800fb9e:	460b      	mov	r3, r1
 800fba0:	d135      	bne.n	800fc0e <_dtoa_r+0x6e6>
 800fba2:	f7f0 fb73 	bl	800028c <__adddf3>
 800fba6:	4642      	mov	r2, r8
 800fba8:	464b      	mov	r3, r9
 800fbaa:	4606      	mov	r6, r0
 800fbac:	460f      	mov	r7, r1
 800fbae:	f7f0 ffb3 	bl	8000b18 <__aeabi_dcmpgt>
 800fbb2:	b9d0      	cbnz	r0, 800fbea <_dtoa_r+0x6c2>
 800fbb4:	4642      	mov	r2, r8
 800fbb6:	464b      	mov	r3, r9
 800fbb8:	4630      	mov	r0, r6
 800fbba:	4639      	mov	r1, r7
 800fbbc:	f7f0 ff84 	bl	8000ac8 <__aeabi_dcmpeq>
 800fbc0:	b110      	cbz	r0, 800fbc8 <_dtoa_r+0x6a0>
 800fbc2:	f01a 0f01 	tst.w	sl, #1
 800fbc6:	d110      	bne.n	800fbea <_dtoa_r+0x6c2>
 800fbc8:	4620      	mov	r0, r4
 800fbca:	ee18 1a10 	vmov	r1, s16
 800fbce:	f000 fae5 	bl	801019c <_Bfree>
 800fbd2:	2300      	movs	r3, #0
 800fbd4:	9800      	ldr	r0, [sp, #0]
 800fbd6:	702b      	strb	r3, [r5, #0]
 800fbd8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fbda:	3001      	adds	r0, #1
 800fbdc:	6018      	str	r0, [r3, #0]
 800fbde:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fbe0:	2b00      	cmp	r3, #0
 800fbe2:	f43f acf1 	beq.w	800f5c8 <_dtoa_r+0xa0>
 800fbe6:	601d      	str	r5, [r3, #0]
 800fbe8:	e4ee      	b.n	800f5c8 <_dtoa_r+0xa0>
 800fbea:	9f00      	ldr	r7, [sp, #0]
 800fbec:	462b      	mov	r3, r5
 800fbee:	461d      	mov	r5, r3
 800fbf0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fbf4:	2a39      	cmp	r2, #57	; 0x39
 800fbf6:	d106      	bne.n	800fc06 <_dtoa_r+0x6de>
 800fbf8:	9a01      	ldr	r2, [sp, #4]
 800fbfa:	429a      	cmp	r2, r3
 800fbfc:	d1f7      	bne.n	800fbee <_dtoa_r+0x6c6>
 800fbfe:	9901      	ldr	r1, [sp, #4]
 800fc00:	2230      	movs	r2, #48	; 0x30
 800fc02:	3701      	adds	r7, #1
 800fc04:	700a      	strb	r2, [r1, #0]
 800fc06:	781a      	ldrb	r2, [r3, #0]
 800fc08:	3201      	adds	r2, #1
 800fc0a:	701a      	strb	r2, [r3, #0]
 800fc0c:	e790      	b.n	800fb30 <_dtoa_r+0x608>
 800fc0e:	4ba6      	ldr	r3, [pc, #664]	; (800fea8 <_dtoa_r+0x980>)
 800fc10:	2200      	movs	r2, #0
 800fc12:	f7f0 fcf1 	bl	80005f8 <__aeabi_dmul>
 800fc16:	2200      	movs	r2, #0
 800fc18:	2300      	movs	r3, #0
 800fc1a:	4606      	mov	r6, r0
 800fc1c:	460f      	mov	r7, r1
 800fc1e:	f7f0 ff53 	bl	8000ac8 <__aeabi_dcmpeq>
 800fc22:	2800      	cmp	r0, #0
 800fc24:	d09d      	beq.n	800fb62 <_dtoa_r+0x63a>
 800fc26:	e7cf      	b.n	800fbc8 <_dtoa_r+0x6a0>
 800fc28:	9a08      	ldr	r2, [sp, #32]
 800fc2a:	2a00      	cmp	r2, #0
 800fc2c:	f000 80d7 	beq.w	800fdde <_dtoa_r+0x8b6>
 800fc30:	9a06      	ldr	r2, [sp, #24]
 800fc32:	2a01      	cmp	r2, #1
 800fc34:	f300 80ba 	bgt.w	800fdac <_dtoa_r+0x884>
 800fc38:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800fc3a:	2a00      	cmp	r2, #0
 800fc3c:	f000 80b2 	beq.w	800fda4 <_dtoa_r+0x87c>
 800fc40:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800fc44:	9e07      	ldr	r6, [sp, #28]
 800fc46:	9d04      	ldr	r5, [sp, #16]
 800fc48:	9a04      	ldr	r2, [sp, #16]
 800fc4a:	441a      	add	r2, r3
 800fc4c:	9204      	str	r2, [sp, #16]
 800fc4e:	9a05      	ldr	r2, [sp, #20]
 800fc50:	2101      	movs	r1, #1
 800fc52:	441a      	add	r2, r3
 800fc54:	4620      	mov	r0, r4
 800fc56:	9205      	str	r2, [sp, #20]
 800fc58:	f000 fb58 	bl	801030c <__i2b>
 800fc5c:	4607      	mov	r7, r0
 800fc5e:	2d00      	cmp	r5, #0
 800fc60:	dd0c      	ble.n	800fc7c <_dtoa_r+0x754>
 800fc62:	9b05      	ldr	r3, [sp, #20]
 800fc64:	2b00      	cmp	r3, #0
 800fc66:	dd09      	ble.n	800fc7c <_dtoa_r+0x754>
 800fc68:	42ab      	cmp	r3, r5
 800fc6a:	9a04      	ldr	r2, [sp, #16]
 800fc6c:	bfa8      	it	ge
 800fc6e:	462b      	movge	r3, r5
 800fc70:	1ad2      	subs	r2, r2, r3
 800fc72:	9204      	str	r2, [sp, #16]
 800fc74:	9a05      	ldr	r2, [sp, #20]
 800fc76:	1aed      	subs	r5, r5, r3
 800fc78:	1ad3      	subs	r3, r2, r3
 800fc7a:	9305      	str	r3, [sp, #20]
 800fc7c:	9b07      	ldr	r3, [sp, #28]
 800fc7e:	b31b      	cbz	r3, 800fcc8 <_dtoa_r+0x7a0>
 800fc80:	9b08      	ldr	r3, [sp, #32]
 800fc82:	2b00      	cmp	r3, #0
 800fc84:	f000 80af 	beq.w	800fde6 <_dtoa_r+0x8be>
 800fc88:	2e00      	cmp	r6, #0
 800fc8a:	dd13      	ble.n	800fcb4 <_dtoa_r+0x78c>
 800fc8c:	4639      	mov	r1, r7
 800fc8e:	4632      	mov	r2, r6
 800fc90:	4620      	mov	r0, r4
 800fc92:	f000 fbfb 	bl	801048c <__pow5mult>
 800fc96:	ee18 2a10 	vmov	r2, s16
 800fc9a:	4601      	mov	r1, r0
 800fc9c:	4607      	mov	r7, r0
 800fc9e:	4620      	mov	r0, r4
 800fca0:	f000 fb4a 	bl	8010338 <__multiply>
 800fca4:	ee18 1a10 	vmov	r1, s16
 800fca8:	4680      	mov	r8, r0
 800fcaa:	4620      	mov	r0, r4
 800fcac:	f000 fa76 	bl	801019c <_Bfree>
 800fcb0:	ee08 8a10 	vmov	s16, r8
 800fcb4:	9b07      	ldr	r3, [sp, #28]
 800fcb6:	1b9a      	subs	r2, r3, r6
 800fcb8:	d006      	beq.n	800fcc8 <_dtoa_r+0x7a0>
 800fcba:	ee18 1a10 	vmov	r1, s16
 800fcbe:	4620      	mov	r0, r4
 800fcc0:	f000 fbe4 	bl	801048c <__pow5mult>
 800fcc4:	ee08 0a10 	vmov	s16, r0
 800fcc8:	2101      	movs	r1, #1
 800fcca:	4620      	mov	r0, r4
 800fccc:	f000 fb1e 	bl	801030c <__i2b>
 800fcd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fcd2:	2b00      	cmp	r3, #0
 800fcd4:	4606      	mov	r6, r0
 800fcd6:	f340 8088 	ble.w	800fdea <_dtoa_r+0x8c2>
 800fcda:	461a      	mov	r2, r3
 800fcdc:	4601      	mov	r1, r0
 800fcde:	4620      	mov	r0, r4
 800fce0:	f000 fbd4 	bl	801048c <__pow5mult>
 800fce4:	9b06      	ldr	r3, [sp, #24]
 800fce6:	2b01      	cmp	r3, #1
 800fce8:	4606      	mov	r6, r0
 800fcea:	f340 8081 	ble.w	800fdf0 <_dtoa_r+0x8c8>
 800fcee:	f04f 0800 	mov.w	r8, #0
 800fcf2:	6933      	ldr	r3, [r6, #16]
 800fcf4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800fcf8:	6918      	ldr	r0, [r3, #16]
 800fcfa:	f000 fab7 	bl	801026c <__hi0bits>
 800fcfe:	f1c0 0020 	rsb	r0, r0, #32
 800fd02:	9b05      	ldr	r3, [sp, #20]
 800fd04:	4418      	add	r0, r3
 800fd06:	f010 001f 	ands.w	r0, r0, #31
 800fd0a:	f000 8092 	beq.w	800fe32 <_dtoa_r+0x90a>
 800fd0e:	f1c0 0320 	rsb	r3, r0, #32
 800fd12:	2b04      	cmp	r3, #4
 800fd14:	f340 808a 	ble.w	800fe2c <_dtoa_r+0x904>
 800fd18:	f1c0 001c 	rsb	r0, r0, #28
 800fd1c:	9b04      	ldr	r3, [sp, #16]
 800fd1e:	4403      	add	r3, r0
 800fd20:	9304      	str	r3, [sp, #16]
 800fd22:	9b05      	ldr	r3, [sp, #20]
 800fd24:	4403      	add	r3, r0
 800fd26:	4405      	add	r5, r0
 800fd28:	9305      	str	r3, [sp, #20]
 800fd2a:	9b04      	ldr	r3, [sp, #16]
 800fd2c:	2b00      	cmp	r3, #0
 800fd2e:	dd07      	ble.n	800fd40 <_dtoa_r+0x818>
 800fd30:	ee18 1a10 	vmov	r1, s16
 800fd34:	461a      	mov	r2, r3
 800fd36:	4620      	mov	r0, r4
 800fd38:	f000 fc02 	bl	8010540 <__lshift>
 800fd3c:	ee08 0a10 	vmov	s16, r0
 800fd40:	9b05      	ldr	r3, [sp, #20]
 800fd42:	2b00      	cmp	r3, #0
 800fd44:	dd05      	ble.n	800fd52 <_dtoa_r+0x82a>
 800fd46:	4631      	mov	r1, r6
 800fd48:	461a      	mov	r2, r3
 800fd4a:	4620      	mov	r0, r4
 800fd4c:	f000 fbf8 	bl	8010540 <__lshift>
 800fd50:	4606      	mov	r6, r0
 800fd52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fd54:	2b00      	cmp	r3, #0
 800fd56:	d06e      	beq.n	800fe36 <_dtoa_r+0x90e>
 800fd58:	ee18 0a10 	vmov	r0, s16
 800fd5c:	4631      	mov	r1, r6
 800fd5e:	f000 fc5f 	bl	8010620 <__mcmp>
 800fd62:	2800      	cmp	r0, #0
 800fd64:	da67      	bge.n	800fe36 <_dtoa_r+0x90e>
 800fd66:	9b00      	ldr	r3, [sp, #0]
 800fd68:	3b01      	subs	r3, #1
 800fd6a:	ee18 1a10 	vmov	r1, s16
 800fd6e:	9300      	str	r3, [sp, #0]
 800fd70:	220a      	movs	r2, #10
 800fd72:	2300      	movs	r3, #0
 800fd74:	4620      	mov	r0, r4
 800fd76:	f000 fa33 	bl	80101e0 <__multadd>
 800fd7a:	9b08      	ldr	r3, [sp, #32]
 800fd7c:	ee08 0a10 	vmov	s16, r0
 800fd80:	2b00      	cmp	r3, #0
 800fd82:	f000 81b1 	beq.w	80100e8 <_dtoa_r+0xbc0>
 800fd86:	2300      	movs	r3, #0
 800fd88:	4639      	mov	r1, r7
 800fd8a:	220a      	movs	r2, #10
 800fd8c:	4620      	mov	r0, r4
 800fd8e:	f000 fa27 	bl	80101e0 <__multadd>
 800fd92:	9b02      	ldr	r3, [sp, #8]
 800fd94:	2b00      	cmp	r3, #0
 800fd96:	4607      	mov	r7, r0
 800fd98:	f300 808e 	bgt.w	800feb8 <_dtoa_r+0x990>
 800fd9c:	9b06      	ldr	r3, [sp, #24]
 800fd9e:	2b02      	cmp	r3, #2
 800fda0:	dc51      	bgt.n	800fe46 <_dtoa_r+0x91e>
 800fda2:	e089      	b.n	800feb8 <_dtoa_r+0x990>
 800fda4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800fda6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800fdaa:	e74b      	b.n	800fc44 <_dtoa_r+0x71c>
 800fdac:	9b03      	ldr	r3, [sp, #12]
 800fdae:	1e5e      	subs	r6, r3, #1
 800fdb0:	9b07      	ldr	r3, [sp, #28]
 800fdb2:	42b3      	cmp	r3, r6
 800fdb4:	bfbf      	itttt	lt
 800fdb6:	9b07      	ldrlt	r3, [sp, #28]
 800fdb8:	9607      	strlt	r6, [sp, #28]
 800fdba:	1af2      	sublt	r2, r6, r3
 800fdbc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800fdbe:	bfb6      	itet	lt
 800fdc0:	189b      	addlt	r3, r3, r2
 800fdc2:	1b9e      	subge	r6, r3, r6
 800fdc4:	930a      	strlt	r3, [sp, #40]	; 0x28
 800fdc6:	9b03      	ldr	r3, [sp, #12]
 800fdc8:	bfb8      	it	lt
 800fdca:	2600      	movlt	r6, #0
 800fdcc:	2b00      	cmp	r3, #0
 800fdce:	bfb7      	itett	lt
 800fdd0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800fdd4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800fdd8:	1a9d      	sublt	r5, r3, r2
 800fdda:	2300      	movlt	r3, #0
 800fddc:	e734      	b.n	800fc48 <_dtoa_r+0x720>
 800fdde:	9e07      	ldr	r6, [sp, #28]
 800fde0:	9d04      	ldr	r5, [sp, #16]
 800fde2:	9f08      	ldr	r7, [sp, #32]
 800fde4:	e73b      	b.n	800fc5e <_dtoa_r+0x736>
 800fde6:	9a07      	ldr	r2, [sp, #28]
 800fde8:	e767      	b.n	800fcba <_dtoa_r+0x792>
 800fdea:	9b06      	ldr	r3, [sp, #24]
 800fdec:	2b01      	cmp	r3, #1
 800fdee:	dc18      	bgt.n	800fe22 <_dtoa_r+0x8fa>
 800fdf0:	f1ba 0f00 	cmp.w	sl, #0
 800fdf4:	d115      	bne.n	800fe22 <_dtoa_r+0x8fa>
 800fdf6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800fdfa:	b993      	cbnz	r3, 800fe22 <_dtoa_r+0x8fa>
 800fdfc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800fe00:	0d1b      	lsrs	r3, r3, #20
 800fe02:	051b      	lsls	r3, r3, #20
 800fe04:	b183      	cbz	r3, 800fe28 <_dtoa_r+0x900>
 800fe06:	9b04      	ldr	r3, [sp, #16]
 800fe08:	3301      	adds	r3, #1
 800fe0a:	9304      	str	r3, [sp, #16]
 800fe0c:	9b05      	ldr	r3, [sp, #20]
 800fe0e:	3301      	adds	r3, #1
 800fe10:	9305      	str	r3, [sp, #20]
 800fe12:	f04f 0801 	mov.w	r8, #1
 800fe16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fe18:	2b00      	cmp	r3, #0
 800fe1a:	f47f af6a 	bne.w	800fcf2 <_dtoa_r+0x7ca>
 800fe1e:	2001      	movs	r0, #1
 800fe20:	e76f      	b.n	800fd02 <_dtoa_r+0x7da>
 800fe22:	f04f 0800 	mov.w	r8, #0
 800fe26:	e7f6      	b.n	800fe16 <_dtoa_r+0x8ee>
 800fe28:	4698      	mov	r8, r3
 800fe2a:	e7f4      	b.n	800fe16 <_dtoa_r+0x8ee>
 800fe2c:	f43f af7d 	beq.w	800fd2a <_dtoa_r+0x802>
 800fe30:	4618      	mov	r0, r3
 800fe32:	301c      	adds	r0, #28
 800fe34:	e772      	b.n	800fd1c <_dtoa_r+0x7f4>
 800fe36:	9b03      	ldr	r3, [sp, #12]
 800fe38:	2b00      	cmp	r3, #0
 800fe3a:	dc37      	bgt.n	800feac <_dtoa_r+0x984>
 800fe3c:	9b06      	ldr	r3, [sp, #24]
 800fe3e:	2b02      	cmp	r3, #2
 800fe40:	dd34      	ble.n	800feac <_dtoa_r+0x984>
 800fe42:	9b03      	ldr	r3, [sp, #12]
 800fe44:	9302      	str	r3, [sp, #8]
 800fe46:	9b02      	ldr	r3, [sp, #8]
 800fe48:	b96b      	cbnz	r3, 800fe66 <_dtoa_r+0x93e>
 800fe4a:	4631      	mov	r1, r6
 800fe4c:	2205      	movs	r2, #5
 800fe4e:	4620      	mov	r0, r4
 800fe50:	f000 f9c6 	bl	80101e0 <__multadd>
 800fe54:	4601      	mov	r1, r0
 800fe56:	4606      	mov	r6, r0
 800fe58:	ee18 0a10 	vmov	r0, s16
 800fe5c:	f000 fbe0 	bl	8010620 <__mcmp>
 800fe60:	2800      	cmp	r0, #0
 800fe62:	f73f adbb 	bgt.w	800f9dc <_dtoa_r+0x4b4>
 800fe66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fe68:	9d01      	ldr	r5, [sp, #4]
 800fe6a:	43db      	mvns	r3, r3
 800fe6c:	9300      	str	r3, [sp, #0]
 800fe6e:	f04f 0800 	mov.w	r8, #0
 800fe72:	4631      	mov	r1, r6
 800fe74:	4620      	mov	r0, r4
 800fe76:	f000 f991 	bl	801019c <_Bfree>
 800fe7a:	2f00      	cmp	r7, #0
 800fe7c:	f43f aea4 	beq.w	800fbc8 <_dtoa_r+0x6a0>
 800fe80:	f1b8 0f00 	cmp.w	r8, #0
 800fe84:	d005      	beq.n	800fe92 <_dtoa_r+0x96a>
 800fe86:	45b8      	cmp	r8, r7
 800fe88:	d003      	beq.n	800fe92 <_dtoa_r+0x96a>
 800fe8a:	4641      	mov	r1, r8
 800fe8c:	4620      	mov	r0, r4
 800fe8e:	f000 f985 	bl	801019c <_Bfree>
 800fe92:	4639      	mov	r1, r7
 800fe94:	4620      	mov	r0, r4
 800fe96:	f000 f981 	bl	801019c <_Bfree>
 800fe9a:	e695      	b.n	800fbc8 <_dtoa_r+0x6a0>
 800fe9c:	2600      	movs	r6, #0
 800fe9e:	4637      	mov	r7, r6
 800fea0:	e7e1      	b.n	800fe66 <_dtoa_r+0x93e>
 800fea2:	9700      	str	r7, [sp, #0]
 800fea4:	4637      	mov	r7, r6
 800fea6:	e599      	b.n	800f9dc <_dtoa_r+0x4b4>
 800fea8:	40240000 	.word	0x40240000
 800feac:	9b08      	ldr	r3, [sp, #32]
 800feae:	2b00      	cmp	r3, #0
 800feb0:	f000 80ca 	beq.w	8010048 <_dtoa_r+0xb20>
 800feb4:	9b03      	ldr	r3, [sp, #12]
 800feb6:	9302      	str	r3, [sp, #8]
 800feb8:	2d00      	cmp	r5, #0
 800feba:	dd05      	ble.n	800fec8 <_dtoa_r+0x9a0>
 800febc:	4639      	mov	r1, r7
 800febe:	462a      	mov	r2, r5
 800fec0:	4620      	mov	r0, r4
 800fec2:	f000 fb3d 	bl	8010540 <__lshift>
 800fec6:	4607      	mov	r7, r0
 800fec8:	f1b8 0f00 	cmp.w	r8, #0
 800fecc:	d05b      	beq.n	800ff86 <_dtoa_r+0xa5e>
 800fece:	6879      	ldr	r1, [r7, #4]
 800fed0:	4620      	mov	r0, r4
 800fed2:	f000 f923 	bl	801011c <_Balloc>
 800fed6:	4605      	mov	r5, r0
 800fed8:	b928      	cbnz	r0, 800fee6 <_dtoa_r+0x9be>
 800feda:	4b87      	ldr	r3, [pc, #540]	; (80100f8 <_dtoa_r+0xbd0>)
 800fedc:	4602      	mov	r2, r0
 800fede:	f240 21ea 	movw	r1, #746	; 0x2ea
 800fee2:	f7ff bb3b 	b.w	800f55c <_dtoa_r+0x34>
 800fee6:	693a      	ldr	r2, [r7, #16]
 800fee8:	3202      	adds	r2, #2
 800feea:	0092      	lsls	r2, r2, #2
 800feec:	f107 010c 	add.w	r1, r7, #12
 800fef0:	300c      	adds	r0, #12
 800fef2:	f7fe fded 	bl	800ead0 <memcpy>
 800fef6:	2201      	movs	r2, #1
 800fef8:	4629      	mov	r1, r5
 800fefa:	4620      	mov	r0, r4
 800fefc:	f000 fb20 	bl	8010540 <__lshift>
 800ff00:	9b01      	ldr	r3, [sp, #4]
 800ff02:	f103 0901 	add.w	r9, r3, #1
 800ff06:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800ff0a:	4413      	add	r3, r2
 800ff0c:	9305      	str	r3, [sp, #20]
 800ff0e:	f00a 0301 	and.w	r3, sl, #1
 800ff12:	46b8      	mov	r8, r7
 800ff14:	9304      	str	r3, [sp, #16]
 800ff16:	4607      	mov	r7, r0
 800ff18:	4631      	mov	r1, r6
 800ff1a:	ee18 0a10 	vmov	r0, s16
 800ff1e:	f7ff fa77 	bl	800f410 <quorem>
 800ff22:	4641      	mov	r1, r8
 800ff24:	9002      	str	r0, [sp, #8]
 800ff26:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ff2a:	ee18 0a10 	vmov	r0, s16
 800ff2e:	f000 fb77 	bl	8010620 <__mcmp>
 800ff32:	463a      	mov	r2, r7
 800ff34:	9003      	str	r0, [sp, #12]
 800ff36:	4631      	mov	r1, r6
 800ff38:	4620      	mov	r0, r4
 800ff3a:	f000 fb8d 	bl	8010658 <__mdiff>
 800ff3e:	68c2      	ldr	r2, [r0, #12]
 800ff40:	f109 3bff 	add.w	fp, r9, #4294967295
 800ff44:	4605      	mov	r5, r0
 800ff46:	bb02      	cbnz	r2, 800ff8a <_dtoa_r+0xa62>
 800ff48:	4601      	mov	r1, r0
 800ff4a:	ee18 0a10 	vmov	r0, s16
 800ff4e:	f000 fb67 	bl	8010620 <__mcmp>
 800ff52:	4602      	mov	r2, r0
 800ff54:	4629      	mov	r1, r5
 800ff56:	4620      	mov	r0, r4
 800ff58:	9207      	str	r2, [sp, #28]
 800ff5a:	f000 f91f 	bl	801019c <_Bfree>
 800ff5e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800ff62:	ea43 0102 	orr.w	r1, r3, r2
 800ff66:	9b04      	ldr	r3, [sp, #16]
 800ff68:	430b      	orrs	r3, r1
 800ff6a:	464d      	mov	r5, r9
 800ff6c:	d10f      	bne.n	800ff8e <_dtoa_r+0xa66>
 800ff6e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ff72:	d02a      	beq.n	800ffca <_dtoa_r+0xaa2>
 800ff74:	9b03      	ldr	r3, [sp, #12]
 800ff76:	2b00      	cmp	r3, #0
 800ff78:	dd02      	ble.n	800ff80 <_dtoa_r+0xa58>
 800ff7a:	9b02      	ldr	r3, [sp, #8]
 800ff7c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800ff80:	f88b a000 	strb.w	sl, [fp]
 800ff84:	e775      	b.n	800fe72 <_dtoa_r+0x94a>
 800ff86:	4638      	mov	r0, r7
 800ff88:	e7ba      	b.n	800ff00 <_dtoa_r+0x9d8>
 800ff8a:	2201      	movs	r2, #1
 800ff8c:	e7e2      	b.n	800ff54 <_dtoa_r+0xa2c>
 800ff8e:	9b03      	ldr	r3, [sp, #12]
 800ff90:	2b00      	cmp	r3, #0
 800ff92:	db04      	blt.n	800ff9e <_dtoa_r+0xa76>
 800ff94:	9906      	ldr	r1, [sp, #24]
 800ff96:	430b      	orrs	r3, r1
 800ff98:	9904      	ldr	r1, [sp, #16]
 800ff9a:	430b      	orrs	r3, r1
 800ff9c:	d122      	bne.n	800ffe4 <_dtoa_r+0xabc>
 800ff9e:	2a00      	cmp	r2, #0
 800ffa0:	ddee      	ble.n	800ff80 <_dtoa_r+0xa58>
 800ffa2:	ee18 1a10 	vmov	r1, s16
 800ffa6:	2201      	movs	r2, #1
 800ffa8:	4620      	mov	r0, r4
 800ffaa:	f000 fac9 	bl	8010540 <__lshift>
 800ffae:	4631      	mov	r1, r6
 800ffb0:	ee08 0a10 	vmov	s16, r0
 800ffb4:	f000 fb34 	bl	8010620 <__mcmp>
 800ffb8:	2800      	cmp	r0, #0
 800ffba:	dc03      	bgt.n	800ffc4 <_dtoa_r+0xa9c>
 800ffbc:	d1e0      	bne.n	800ff80 <_dtoa_r+0xa58>
 800ffbe:	f01a 0f01 	tst.w	sl, #1
 800ffc2:	d0dd      	beq.n	800ff80 <_dtoa_r+0xa58>
 800ffc4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ffc8:	d1d7      	bne.n	800ff7a <_dtoa_r+0xa52>
 800ffca:	2339      	movs	r3, #57	; 0x39
 800ffcc:	f88b 3000 	strb.w	r3, [fp]
 800ffd0:	462b      	mov	r3, r5
 800ffd2:	461d      	mov	r5, r3
 800ffd4:	3b01      	subs	r3, #1
 800ffd6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ffda:	2a39      	cmp	r2, #57	; 0x39
 800ffdc:	d071      	beq.n	80100c2 <_dtoa_r+0xb9a>
 800ffde:	3201      	adds	r2, #1
 800ffe0:	701a      	strb	r2, [r3, #0]
 800ffe2:	e746      	b.n	800fe72 <_dtoa_r+0x94a>
 800ffe4:	2a00      	cmp	r2, #0
 800ffe6:	dd07      	ble.n	800fff8 <_dtoa_r+0xad0>
 800ffe8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ffec:	d0ed      	beq.n	800ffca <_dtoa_r+0xaa2>
 800ffee:	f10a 0301 	add.w	r3, sl, #1
 800fff2:	f88b 3000 	strb.w	r3, [fp]
 800fff6:	e73c      	b.n	800fe72 <_dtoa_r+0x94a>
 800fff8:	9b05      	ldr	r3, [sp, #20]
 800fffa:	f809 ac01 	strb.w	sl, [r9, #-1]
 800fffe:	4599      	cmp	r9, r3
 8010000:	d047      	beq.n	8010092 <_dtoa_r+0xb6a>
 8010002:	ee18 1a10 	vmov	r1, s16
 8010006:	2300      	movs	r3, #0
 8010008:	220a      	movs	r2, #10
 801000a:	4620      	mov	r0, r4
 801000c:	f000 f8e8 	bl	80101e0 <__multadd>
 8010010:	45b8      	cmp	r8, r7
 8010012:	ee08 0a10 	vmov	s16, r0
 8010016:	f04f 0300 	mov.w	r3, #0
 801001a:	f04f 020a 	mov.w	r2, #10
 801001e:	4641      	mov	r1, r8
 8010020:	4620      	mov	r0, r4
 8010022:	d106      	bne.n	8010032 <_dtoa_r+0xb0a>
 8010024:	f000 f8dc 	bl	80101e0 <__multadd>
 8010028:	4680      	mov	r8, r0
 801002a:	4607      	mov	r7, r0
 801002c:	f109 0901 	add.w	r9, r9, #1
 8010030:	e772      	b.n	800ff18 <_dtoa_r+0x9f0>
 8010032:	f000 f8d5 	bl	80101e0 <__multadd>
 8010036:	4639      	mov	r1, r7
 8010038:	4680      	mov	r8, r0
 801003a:	2300      	movs	r3, #0
 801003c:	220a      	movs	r2, #10
 801003e:	4620      	mov	r0, r4
 8010040:	f000 f8ce 	bl	80101e0 <__multadd>
 8010044:	4607      	mov	r7, r0
 8010046:	e7f1      	b.n	801002c <_dtoa_r+0xb04>
 8010048:	9b03      	ldr	r3, [sp, #12]
 801004a:	9302      	str	r3, [sp, #8]
 801004c:	9d01      	ldr	r5, [sp, #4]
 801004e:	ee18 0a10 	vmov	r0, s16
 8010052:	4631      	mov	r1, r6
 8010054:	f7ff f9dc 	bl	800f410 <quorem>
 8010058:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801005c:	9b01      	ldr	r3, [sp, #4]
 801005e:	f805 ab01 	strb.w	sl, [r5], #1
 8010062:	1aea      	subs	r2, r5, r3
 8010064:	9b02      	ldr	r3, [sp, #8]
 8010066:	4293      	cmp	r3, r2
 8010068:	dd09      	ble.n	801007e <_dtoa_r+0xb56>
 801006a:	ee18 1a10 	vmov	r1, s16
 801006e:	2300      	movs	r3, #0
 8010070:	220a      	movs	r2, #10
 8010072:	4620      	mov	r0, r4
 8010074:	f000 f8b4 	bl	80101e0 <__multadd>
 8010078:	ee08 0a10 	vmov	s16, r0
 801007c:	e7e7      	b.n	801004e <_dtoa_r+0xb26>
 801007e:	9b02      	ldr	r3, [sp, #8]
 8010080:	2b00      	cmp	r3, #0
 8010082:	bfc8      	it	gt
 8010084:	461d      	movgt	r5, r3
 8010086:	9b01      	ldr	r3, [sp, #4]
 8010088:	bfd8      	it	le
 801008a:	2501      	movle	r5, #1
 801008c:	441d      	add	r5, r3
 801008e:	f04f 0800 	mov.w	r8, #0
 8010092:	ee18 1a10 	vmov	r1, s16
 8010096:	2201      	movs	r2, #1
 8010098:	4620      	mov	r0, r4
 801009a:	f000 fa51 	bl	8010540 <__lshift>
 801009e:	4631      	mov	r1, r6
 80100a0:	ee08 0a10 	vmov	s16, r0
 80100a4:	f000 fabc 	bl	8010620 <__mcmp>
 80100a8:	2800      	cmp	r0, #0
 80100aa:	dc91      	bgt.n	800ffd0 <_dtoa_r+0xaa8>
 80100ac:	d102      	bne.n	80100b4 <_dtoa_r+0xb8c>
 80100ae:	f01a 0f01 	tst.w	sl, #1
 80100b2:	d18d      	bne.n	800ffd0 <_dtoa_r+0xaa8>
 80100b4:	462b      	mov	r3, r5
 80100b6:	461d      	mov	r5, r3
 80100b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80100bc:	2a30      	cmp	r2, #48	; 0x30
 80100be:	d0fa      	beq.n	80100b6 <_dtoa_r+0xb8e>
 80100c0:	e6d7      	b.n	800fe72 <_dtoa_r+0x94a>
 80100c2:	9a01      	ldr	r2, [sp, #4]
 80100c4:	429a      	cmp	r2, r3
 80100c6:	d184      	bne.n	800ffd2 <_dtoa_r+0xaaa>
 80100c8:	9b00      	ldr	r3, [sp, #0]
 80100ca:	3301      	adds	r3, #1
 80100cc:	9300      	str	r3, [sp, #0]
 80100ce:	2331      	movs	r3, #49	; 0x31
 80100d0:	7013      	strb	r3, [r2, #0]
 80100d2:	e6ce      	b.n	800fe72 <_dtoa_r+0x94a>
 80100d4:	4b09      	ldr	r3, [pc, #36]	; (80100fc <_dtoa_r+0xbd4>)
 80100d6:	f7ff ba95 	b.w	800f604 <_dtoa_r+0xdc>
 80100da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80100dc:	2b00      	cmp	r3, #0
 80100de:	f47f aa6e 	bne.w	800f5be <_dtoa_r+0x96>
 80100e2:	4b07      	ldr	r3, [pc, #28]	; (8010100 <_dtoa_r+0xbd8>)
 80100e4:	f7ff ba8e 	b.w	800f604 <_dtoa_r+0xdc>
 80100e8:	9b02      	ldr	r3, [sp, #8]
 80100ea:	2b00      	cmp	r3, #0
 80100ec:	dcae      	bgt.n	801004c <_dtoa_r+0xb24>
 80100ee:	9b06      	ldr	r3, [sp, #24]
 80100f0:	2b02      	cmp	r3, #2
 80100f2:	f73f aea8 	bgt.w	800fe46 <_dtoa_r+0x91e>
 80100f6:	e7a9      	b.n	801004c <_dtoa_r+0xb24>
 80100f8:	08013f9b 	.word	0x08013f9b
 80100fc:	08013ef8 	.word	0x08013ef8
 8010100:	08013f1c 	.word	0x08013f1c

08010104 <_localeconv_r>:
 8010104:	4800      	ldr	r0, [pc, #0]	; (8010108 <_localeconv_r+0x4>)
 8010106:	4770      	bx	lr
 8010108:	20000170 	.word	0x20000170

0801010c <malloc>:
 801010c:	4b02      	ldr	r3, [pc, #8]	; (8010118 <malloc+0xc>)
 801010e:	4601      	mov	r1, r0
 8010110:	6818      	ldr	r0, [r3, #0]
 8010112:	f000 bc09 	b.w	8010928 <_malloc_r>
 8010116:	bf00      	nop
 8010118:	2000001c 	.word	0x2000001c

0801011c <_Balloc>:
 801011c:	b570      	push	{r4, r5, r6, lr}
 801011e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010120:	4604      	mov	r4, r0
 8010122:	460d      	mov	r5, r1
 8010124:	b976      	cbnz	r6, 8010144 <_Balloc+0x28>
 8010126:	2010      	movs	r0, #16
 8010128:	f7ff fff0 	bl	801010c <malloc>
 801012c:	4602      	mov	r2, r0
 801012e:	6260      	str	r0, [r4, #36]	; 0x24
 8010130:	b920      	cbnz	r0, 801013c <_Balloc+0x20>
 8010132:	4b18      	ldr	r3, [pc, #96]	; (8010194 <_Balloc+0x78>)
 8010134:	4818      	ldr	r0, [pc, #96]	; (8010198 <_Balloc+0x7c>)
 8010136:	2166      	movs	r1, #102	; 0x66
 8010138:	f000 fdd6 	bl	8010ce8 <__assert_func>
 801013c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010140:	6006      	str	r6, [r0, #0]
 8010142:	60c6      	str	r6, [r0, #12]
 8010144:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8010146:	68f3      	ldr	r3, [r6, #12]
 8010148:	b183      	cbz	r3, 801016c <_Balloc+0x50>
 801014a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801014c:	68db      	ldr	r3, [r3, #12]
 801014e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010152:	b9b8      	cbnz	r0, 8010184 <_Balloc+0x68>
 8010154:	2101      	movs	r1, #1
 8010156:	fa01 f605 	lsl.w	r6, r1, r5
 801015a:	1d72      	adds	r2, r6, #5
 801015c:	0092      	lsls	r2, r2, #2
 801015e:	4620      	mov	r0, r4
 8010160:	f000 fb60 	bl	8010824 <_calloc_r>
 8010164:	b160      	cbz	r0, 8010180 <_Balloc+0x64>
 8010166:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801016a:	e00e      	b.n	801018a <_Balloc+0x6e>
 801016c:	2221      	movs	r2, #33	; 0x21
 801016e:	2104      	movs	r1, #4
 8010170:	4620      	mov	r0, r4
 8010172:	f000 fb57 	bl	8010824 <_calloc_r>
 8010176:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010178:	60f0      	str	r0, [r6, #12]
 801017a:	68db      	ldr	r3, [r3, #12]
 801017c:	2b00      	cmp	r3, #0
 801017e:	d1e4      	bne.n	801014a <_Balloc+0x2e>
 8010180:	2000      	movs	r0, #0
 8010182:	bd70      	pop	{r4, r5, r6, pc}
 8010184:	6802      	ldr	r2, [r0, #0]
 8010186:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801018a:	2300      	movs	r3, #0
 801018c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010190:	e7f7      	b.n	8010182 <_Balloc+0x66>
 8010192:	bf00      	nop
 8010194:	08013f29 	.word	0x08013f29
 8010198:	08013fac 	.word	0x08013fac

0801019c <_Bfree>:
 801019c:	b570      	push	{r4, r5, r6, lr}
 801019e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80101a0:	4605      	mov	r5, r0
 80101a2:	460c      	mov	r4, r1
 80101a4:	b976      	cbnz	r6, 80101c4 <_Bfree+0x28>
 80101a6:	2010      	movs	r0, #16
 80101a8:	f7ff ffb0 	bl	801010c <malloc>
 80101ac:	4602      	mov	r2, r0
 80101ae:	6268      	str	r0, [r5, #36]	; 0x24
 80101b0:	b920      	cbnz	r0, 80101bc <_Bfree+0x20>
 80101b2:	4b09      	ldr	r3, [pc, #36]	; (80101d8 <_Bfree+0x3c>)
 80101b4:	4809      	ldr	r0, [pc, #36]	; (80101dc <_Bfree+0x40>)
 80101b6:	218a      	movs	r1, #138	; 0x8a
 80101b8:	f000 fd96 	bl	8010ce8 <__assert_func>
 80101bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80101c0:	6006      	str	r6, [r0, #0]
 80101c2:	60c6      	str	r6, [r0, #12]
 80101c4:	b13c      	cbz	r4, 80101d6 <_Bfree+0x3a>
 80101c6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80101c8:	6862      	ldr	r2, [r4, #4]
 80101ca:	68db      	ldr	r3, [r3, #12]
 80101cc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80101d0:	6021      	str	r1, [r4, #0]
 80101d2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80101d6:	bd70      	pop	{r4, r5, r6, pc}
 80101d8:	08013f29 	.word	0x08013f29
 80101dc:	08013fac 	.word	0x08013fac

080101e0 <__multadd>:
 80101e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80101e4:	690d      	ldr	r5, [r1, #16]
 80101e6:	4607      	mov	r7, r0
 80101e8:	460c      	mov	r4, r1
 80101ea:	461e      	mov	r6, r3
 80101ec:	f101 0c14 	add.w	ip, r1, #20
 80101f0:	2000      	movs	r0, #0
 80101f2:	f8dc 3000 	ldr.w	r3, [ip]
 80101f6:	b299      	uxth	r1, r3
 80101f8:	fb02 6101 	mla	r1, r2, r1, r6
 80101fc:	0c1e      	lsrs	r6, r3, #16
 80101fe:	0c0b      	lsrs	r3, r1, #16
 8010200:	fb02 3306 	mla	r3, r2, r6, r3
 8010204:	b289      	uxth	r1, r1
 8010206:	3001      	adds	r0, #1
 8010208:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801020c:	4285      	cmp	r5, r0
 801020e:	f84c 1b04 	str.w	r1, [ip], #4
 8010212:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8010216:	dcec      	bgt.n	80101f2 <__multadd+0x12>
 8010218:	b30e      	cbz	r6, 801025e <__multadd+0x7e>
 801021a:	68a3      	ldr	r3, [r4, #8]
 801021c:	42ab      	cmp	r3, r5
 801021e:	dc19      	bgt.n	8010254 <__multadd+0x74>
 8010220:	6861      	ldr	r1, [r4, #4]
 8010222:	4638      	mov	r0, r7
 8010224:	3101      	adds	r1, #1
 8010226:	f7ff ff79 	bl	801011c <_Balloc>
 801022a:	4680      	mov	r8, r0
 801022c:	b928      	cbnz	r0, 801023a <__multadd+0x5a>
 801022e:	4602      	mov	r2, r0
 8010230:	4b0c      	ldr	r3, [pc, #48]	; (8010264 <__multadd+0x84>)
 8010232:	480d      	ldr	r0, [pc, #52]	; (8010268 <__multadd+0x88>)
 8010234:	21b5      	movs	r1, #181	; 0xb5
 8010236:	f000 fd57 	bl	8010ce8 <__assert_func>
 801023a:	6922      	ldr	r2, [r4, #16]
 801023c:	3202      	adds	r2, #2
 801023e:	f104 010c 	add.w	r1, r4, #12
 8010242:	0092      	lsls	r2, r2, #2
 8010244:	300c      	adds	r0, #12
 8010246:	f7fe fc43 	bl	800ead0 <memcpy>
 801024a:	4621      	mov	r1, r4
 801024c:	4638      	mov	r0, r7
 801024e:	f7ff ffa5 	bl	801019c <_Bfree>
 8010252:	4644      	mov	r4, r8
 8010254:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010258:	3501      	adds	r5, #1
 801025a:	615e      	str	r6, [r3, #20]
 801025c:	6125      	str	r5, [r4, #16]
 801025e:	4620      	mov	r0, r4
 8010260:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010264:	08013f9b 	.word	0x08013f9b
 8010268:	08013fac 	.word	0x08013fac

0801026c <__hi0bits>:
 801026c:	0c03      	lsrs	r3, r0, #16
 801026e:	041b      	lsls	r3, r3, #16
 8010270:	b9d3      	cbnz	r3, 80102a8 <__hi0bits+0x3c>
 8010272:	0400      	lsls	r0, r0, #16
 8010274:	2310      	movs	r3, #16
 8010276:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801027a:	bf04      	itt	eq
 801027c:	0200      	lsleq	r0, r0, #8
 801027e:	3308      	addeq	r3, #8
 8010280:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8010284:	bf04      	itt	eq
 8010286:	0100      	lsleq	r0, r0, #4
 8010288:	3304      	addeq	r3, #4
 801028a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801028e:	bf04      	itt	eq
 8010290:	0080      	lsleq	r0, r0, #2
 8010292:	3302      	addeq	r3, #2
 8010294:	2800      	cmp	r0, #0
 8010296:	db05      	blt.n	80102a4 <__hi0bits+0x38>
 8010298:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801029c:	f103 0301 	add.w	r3, r3, #1
 80102a0:	bf08      	it	eq
 80102a2:	2320      	moveq	r3, #32
 80102a4:	4618      	mov	r0, r3
 80102a6:	4770      	bx	lr
 80102a8:	2300      	movs	r3, #0
 80102aa:	e7e4      	b.n	8010276 <__hi0bits+0xa>

080102ac <__lo0bits>:
 80102ac:	6803      	ldr	r3, [r0, #0]
 80102ae:	f013 0207 	ands.w	r2, r3, #7
 80102b2:	4601      	mov	r1, r0
 80102b4:	d00b      	beq.n	80102ce <__lo0bits+0x22>
 80102b6:	07da      	lsls	r2, r3, #31
 80102b8:	d423      	bmi.n	8010302 <__lo0bits+0x56>
 80102ba:	0798      	lsls	r0, r3, #30
 80102bc:	bf49      	itett	mi
 80102be:	085b      	lsrmi	r3, r3, #1
 80102c0:	089b      	lsrpl	r3, r3, #2
 80102c2:	2001      	movmi	r0, #1
 80102c4:	600b      	strmi	r3, [r1, #0]
 80102c6:	bf5c      	itt	pl
 80102c8:	600b      	strpl	r3, [r1, #0]
 80102ca:	2002      	movpl	r0, #2
 80102cc:	4770      	bx	lr
 80102ce:	b298      	uxth	r0, r3
 80102d0:	b9a8      	cbnz	r0, 80102fe <__lo0bits+0x52>
 80102d2:	0c1b      	lsrs	r3, r3, #16
 80102d4:	2010      	movs	r0, #16
 80102d6:	b2da      	uxtb	r2, r3
 80102d8:	b90a      	cbnz	r2, 80102de <__lo0bits+0x32>
 80102da:	3008      	adds	r0, #8
 80102dc:	0a1b      	lsrs	r3, r3, #8
 80102de:	071a      	lsls	r2, r3, #28
 80102e0:	bf04      	itt	eq
 80102e2:	091b      	lsreq	r3, r3, #4
 80102e4:	3004      	addeq	r0, #4
 80102e6:	079a      	lsls	r2, r3, #30
 80102e8:	bf04      	itt	eq
 80102ea:	089b      	lsreq	r3, r3, #2
 80102ec:	3002      	addeq	r0, #2
 80102ee:	07da      	lsls	r2, r3, #31
 80102f0:	d403      	bmi.n	80102fa <__lo0bits+0x4e>
 80102f2:	085b      	lsrs	r3, r3, #1
 80102f4:	f100 0001 	add.w	r0, r0, #1
 80102f8:	d005      	beq.n	8010306 <__lo0bits+0x5a>
 80102fa:	600b      	str	r3, [r1, #0]
 80102fc:	4770      	bx	lr
 80102fe:	4610      	mov	r0, r2
 8010300:	e7e9      	b.n	80102d6 <__lo0bits+0x2a>
 8010302:	2000      	movs	r0, #0
 8010304:	4770      	bx	lr
 8010306:	2020      	movs	r0, #32
 8010308:	4770      	bx	lr
	...

0801030c <__i2b>:
 801030c:	b510      	push	{r4, lr}
 801030e:	460c      	mov	r4, r1
 8010310:	2101      	movs	r1, #1
 8010312:	f7ff ff03 	bl	801011c <_Balloc>
 8010316:	4602      	mov	r2, r0
 8010318:	b928      	cbnz	r0, 8010326 <__i2b+0x1a>
 801031a:	4b05      	ldr	r3, [pc, #20]	; (8010330 <__i2b+0x24>)
 801031c:	4805      	ldr	r0, [pc, #20]	; (8010334 <__i2b+0x28>)
 801031e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8010322:	f000 fce1 	bl	8010ce8 <__assert_func>
 8010326:	2301      	movs	r3, #1
 8010328:	6144      	str	r4, [r0, #20]
 801032a:	6103      	str	r3, [r0, #16]
 801032c:	bd10      	pop	{r4, pc}
 801032e:	bf00      	nop
 8010330:	08013f9b 	.word	0x08013f9b
 8010334:	08013fac 	.word	0x08013fac

08010338 <__multiply>:
 8010338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801033c:	4691      	mov	r9, r2
 801033e:	690a      	ldr	r2, [r1, #16]
 8010340:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010344:	429a      	cmp	r2, r3
 8010346:	bfb8      	it	lt
 8010348:	460b      	movlt	r3, r1
 801034a:	460c      	mov	r4, r1
 801034c:	bfbc      	itt	lt
 801034e:	464c      	movlt	r4, r9
 8010350:	4699      	movlt	r9, r3
 8010352:	6927      	ldr	r7, [r4, #16]
 8010354:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8010358:	68a3      	ldr	r3, [r4, #8]
 801035a:	6861      	ldr	r1, [r4, #4]
 801035c:	eb07 060a 	add.w	r6, r7, sl
 8010360:	42b3      	cmp	r3, r6
 8010362:	b085      	sub	sp, #20
 8010364:	bfb8      	it	lt
 8010366:	3101      	addlt	r1, #1
 8010368:	f7ff fed8 	bl	801011c <_Balloc>
 801036c:	b930      	cbnz	r0, 801037c <__multiply+0x44>
 801036e:	4602      	mov	r2, r0
 8010370:	4b44      	ldr	r3, [pc, #272]	; (8010484 <__multiply+0x14c>)
 8010372:	4845      	ldr	r0, [pc, #276]	; (8010488 <__multiply+0x150>)
 8010374:	f240 115d 	movw	r1, #349	; 0x15d
 8010378:	f000 fcb6 	bl	8010ce8 <__assert_func>
 801037c:	f100 0514 	add.w	r5, r0, #20
 8010380:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8010384:	462b      	mov	r3, r5
 8010386:	2200      	movs	r2, #0
 8010388:	4543      	cmp	r3, r8
 801038a:	d321      	bcc.n	80103d0 <__multiply+0x98>
 801038c:	f104 0314 	add.w	r3, r4, #20
 8010390:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8010394:	f109 0314 	add.w	r3, r9, #20
 8010398:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801039c:	9202      	str	r2, [sp, #8]
 801039e:	1b3a      	subs	r2, r7, r4
 80103a0:	3a15      	subs	r2, #21
 80103a2:	f022 0203 	bic.w	r2, r2, #3
 80103a6:	3204      	adds	r2, #4
 80103a8:	f104 0115 	add.w	r1, r4, #21
 80103ac:	428f      	cmp	r7, r1
 80103ae:	bf38      	it	cc
 80103b0:	2204      	movcc	r2, #4
 80103b2:	9201      	str	r2, [sp, #4]
 80103b4:	9a02      	ldr	r2, [sp, #8]
 80103b6:	9303      	str	r3, [sp, #12]
 80103b8:	429a      	cmp	r2, r3
 80103ba:	d80c      	bhi.n	80103d6 <__multiply+0x9e>
 80103bc:	2e00      	cmp	r6, #0
 80103be:	dd03      	ble.n	80103c8 <__multiply+0x90>
 80103c0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80103c4:	2b00      	cmp	r3, #0
 80103c6:	d05a      	beq.n	801047e <__multiply+0x146>
 80103c8:	6106      	str	r6, [r0, #16]
 80103ca:	b005      	add	sp, #20
 80103cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80103d0:	f843 2b04 	str.w	r2, [r3], #4
 80103d4:	e7d8      	b.n	8010388 <__multiply+0x50>
 80103d6:	f8b3 a000 	ldrh.w	sl, [r3]
 80103da:	f1ba 0f00 	cmp.w	sl, #0
 80103de:	d024      	beq.n	801042a <__multiply+0xf2>
 80103e0:	f104 0e14 	add.w	lr, r4, #20
 80103e4:	46a9      	mov	r9, r5
 80103e6:	f04f 0c00 	mov.w	ip, #0
 80103ea:	f85e 2b04 	ldr.w	r2, [lr], #4
 80103ee:	f8d9 1000 	ldr.w	r1, [r9]
 80103f2:	fa1f fb82 	uxth.w	fp, r2
 80103f6:	b289      	uxth	r1, r1
 80103f8:	fb0a 110b 	mla	r1, sl, fp, r1
 80103fc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8010400:	f8d9 2000 	ldr.w	r2, [r9]
 8010404:	4461      	add	r1, ip
 8010406:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801040a:	fb0a c20b 	mla	r2, sl, fp, ip
 801040e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8010412:	b289      	uxth	r1, r1
 8010414:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8010418:	4577      	cmp	r7, lr
 801041a:	f849 1b04 	str.w	r1, [r9], #4
 801041e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8010422:	d8e2      	bhi.n	80103ea <__multiply+0xb2>
 8010424:	9a01      	ldr	r2, [sp, #4]
 8010426:	f845 c002 	str.w	ip, [r5, r2]
 801042a:	9a03      	ldr	r2, [sp, #12]
 801042c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8010430:	3304      	adds	r3, #4
 8010432:	f1b9 0f00 	cmp.w	r9, #0
 8010436:	d020      	beq.n	801047a <__multiply+0x142>
 8010438:	6829      	ldr	r1, [r5, #0]
 801043a:	f104 0c14 	add.w	ip, r4, #20
 801043e:	46ae      	mov	lr, r5
 8010440:	f04f 0a00 	mov.w	sl, #0
 8010444:	f8bc b000 	ldrh.w	fp, [ip]
 8010448:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801044c:	fb09 220b 	mla	r2, r9, fp, r2
 8010450:	4492      	add	sl, r2
 8010452:	b289      	uxth	r1, r1
 8010454:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8010458:	f84e 1b04 	str.w	r1, [lr], #4
 801045c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8010460:	f8be 1000 	ldrh.w	r1, [lr]
 8010464:	0c12      	lsrs	r2, r2, #16
 8010466:	fb09 1102 	mla	r1, r9, r2, r1
 801046a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 801046e:	4567      	cmp	r7, ip
 8010470:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8010474:	d8e6      	bhi.n	8010444 <__multiply+0x10c>
 8010476:	9a01      	ldr	r2, [sp, #4]
 8010478:	50a9      	str	r1, [r5, r2]
 801047a:	3504      	adds	r5, #4
 801047c:	e79a      	b.n	80103b4 <__multiply+0x7c>
 801047e:	3e01      	subs	r6, #1
 8010480:	e79c      	b.n	80103bc <__multiply+0x84>
 8010482:	bf00      	nop
 8010484:	08013f9b 	.word	0x08013f9b
 8010488:	08013fac 	.word	0x08013fac

0801048c <__pow5mult>:
 801048c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010490:	4615      	mov	r5, r2
 8010492:	f012 0203 	ands.w	r2, r2, #3
 8010496:	4606      	mov	r6, r0
 8010498:	460f      	mov	r7, r1
 801049a:	d007      	beq.n	80104ac <__pow5mult+0x20>
 801049c:	4c25      	ldr	r4, [pc, #148]	; (8010534 <__pow5mult+0xa8>)
 801049e:	3a01      	subs	r2, #1
 80104a0:	2300      	movs	r3, #0
 80104a2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80104a6:	f7ff fe9b 	bl	80101e0 <__multadd>
 80104aa:	4607      	mov	r7, r0
 80104ac:	10ad      	asrs	r5, r5, #2
 80104ae:	d03d      	beq.n	801052c <__pow5mult+0xa0>
 80104b0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80104b2:	b97c      	cbnz	r4, 80104d4 <__pow5mult+0x48>
 80104b4:	2010      	movs	r0, #16
 80104b6:	f7ff fe29 	bl	801010c <malloc>
 80104ba:	4602      	mov	r2, r0
 80104bc:	6270      	str	r0, [r6, #36]	; 0x24
 80104be:	b928      	cbnz	r0, 80104cc <__pow5mult+0x40>
 80104c0:	4b1d      	ldr	r3, [pc, #116]	; (8010538 <__pow5mult+0xac>)
 80104c2:	481e      	ldr	r0, [pc, #120]	; (801053c <__pow5mult+0xb0>)
 80104c4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80104c8:	f000 fc0e 	bl	8010ce8 <__assert_func>
 80104cc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80104d0:	6004      	str	r4, [r0, #0]
 80104d2:	60c4      	str	r4, [r0, #12]
 80104d4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80104d8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80104dc:	b94c      	cbnz	r4, 80104f2 <__pow5mult+0x66>
 80104de:	f240 2171 	movw	r1, #625	; 0x271
 80104e2:	4630      	mov	r0, r6
 80104e4:	f7ff ff12 	bl	801030c <__i2b>
 80104e8:	2300      	movs	r3, #0
 80104ea:	f8c8 0008 	str.w	r0, [r8, #8]
 80104ee:	4604      	mov	r4, r0
 80104f0:	6003      	str	r3, [r0, #0]
 80104f2:	f04f 0900 	mov.w	r9, #0
 80104f6:	07eb      	lsls	r3, r5, #31
 80104f8:	d50a      	bpl.n	8010510 <__pow5mult+0x84>
 80104fa:	4639      	mov	r1, r7
 80104fc:	4622      	mov	r2, r4
 80104fe:	4630      	mov	r0, r6
 8010500:	f7ff ff1a 	bl	8010338 <__multiply>
 8010504:	4639      	mov	r1, r7
 8010506:	4680      	mov	r8, r0
 8010508:	4630      	mov	r0, r6
 801050a:	f7ff fe47 	bl	801019c <_Bfree>
 801050e:	4647      	mov	r7, r8
 8010510:	106d      	asrs	r5, r5, #1
 8010512:	d00b      	beq.n	801052c <__pow5mult+0xa0>
 8010514:	6820      	ldr	r0, [r4, #0]
 8010516:	b938      	cbnz	r0, 8010528 <__pow5mult+0x9c>
 8010518:	4622      	mov	r2, r4
 801051a:	4621      	mov	r1, r4
 801051c:	4630      	mov	r0, r6
 801051e:	f7ff ff0b 	bl	8010338 <__multiply>
 8010522:	6020      	str	r0, [r4, #0]
 8010524:	f8c0 9000 	str.w	r9, [r0]
 8010528:	4604      	mov	r4, r0
 801052a:	e7e4      	b.n	80104f6 <__pow5mult+0x6a>
 801052c:	4638      	mov	r0, r7
 801052e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010532:	bf00      	nop
 8010534:	080140f8 	.word	0x080140f8
 8010538:	08013f29 	.word	0x08013f29
 801053c:	08013fac 	.word	0x08013fac

08010540 <__lshift>:
 8010540:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010544:	460c      	mov	r4, r1
 8010546:	6849      	ldr	r1, [r1, #4]
 8010548:	6923      	ldr	r3, [r4, #16]
 801054a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801054e:	68a3      	ldr	r3, [r4, #8]
 8010550:	4607      	mov	r7, r0
 8010552:	4691      	mov	r9, r2
 8010554:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010558:	f108 0601 	add.w	r6, r8, #1
 801055c:	42b3      	cmp	r3, r6
 801055e:	db0b      	blt.n	8010578 <__lshift+0x38>
 8010560:	4638      	mov	r0, r7
 8010562:	f7ff fddb 	bl	801011c <_Balloc>
 8010566:	4605      	mov	r5, r0
 8010568:	b948      	cbnz	r0, 801057e <__lshift+0x3e>
 801056a:	4602      	mov	r2, r0
 801056c:	4b2a      	ldr	r3, [pc, #168]	; (8010618 <__lshift+0xd8>)
 801056e:	482b      	ldr	r0, [pc, #172]	; (801061c <__lshift+0xdc>)
 8010570:	f240 11d9 	movw	r1, #473	; 0x1d9
 8010574:	f000 fbb8 	bl	8010ce8 <__assert_func>
 8010578:	3101      	adds	r1, #1
 801057a:	005b      	lsls	r3, r3, #1
 801057c:	e7ee      	b.n	801055c <__lshift+0x1c>
 801057e:	2300      	movs	r3, #0
 8010580:	f100 0114 	add.w	r1, r0, #20
 8010584:	f100 0210 	add.w	r2, r0, #16
 8010588:	4618      	mov	r0, r3
 801058a:	4553      	cmp	r3, sl
 801058c:	db37      	blt.n	80105fe <__lshift+0xbe>
 801058e:	6920      	ldr	r0, [r4, #16]
 8010590:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010594:	f104 0314 	add.w	r3, r4, #20
 8010598:	f019 091f 	ands.w	r9, r9, #31
 801059c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80105a0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80105a4:	d02f      	beq.n	8010606 <__lshift+0xc6>
 80105a6:	f1c9 0e20 	rsb	lr, r9, #32
 80105aa:	468a      	mov	sl, r1
 80105ac:	f04f 0c00 	mov.w	ip, #0
 80105b0:	681a      	ldr	r2, [r3, #0]
 80105b2:	fa02 f209 	lsl.w	r2, r2, r9
 80105b6:	ea42 020c 	orr.w	r2, r2, ip
 80105ba:	f84a 2b04 	str.w	r2, [sl], #4
 80105be:	f853 2b04 	ldr.w	r2, [r3], #4
 80105c2:	4298      	cmp	r0, r3
 80105c4:	fa22 fc0e 	lsr.w	ip, r2, lr
 80105c8:	d8f2      	bhi.n	80105b0 <__lshift+0x70>
 80105ca:	1b03      	subs	r3, r0, r4
 80105cc:	3b15      	subs	r3, #21
 80105ce:	f023 0303 	bic.w	r3, r3, #3
 80105d2:	3304      	adds	r3, #4
 80105d4:	f104 0215 	add.w	r2, r4, #21
 80105d8:	4290      	cmp	r0, r2
 80105da:	bf38      	it	cc
 80105dc:	2304      	movcc	r3, #4
 80105de:	f841 c003 	str.w	ip, [r1, r3]
 80105e2:	f1bc 0f00 	cmp.w	ip, #0
 80105e6:	d001      	beq.n	80105ec <__lshift+0xac>
 80105e8:	f108 0602 	add.w	r6, r8, #2
 80105ec:	3e01      	subs	r6, #1
 80105ee:	4638      	mov	r0, r7
 80105f0:	612e      	str	r6, [r5, #16]
 80105f2:	4621      	mov	r1, r4
 80105f4:	f7ff fdd2 	bl	801019c <_Bfree>
 80105f8:	4628      	mov	r0, r5
 80105fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80105fe:	f842 0f04 	str.w	r0, [r2, #4]!
 8010602:	3301      	adds	r3, #1
 8010604:	e7c1      	b.n	801058a <__lshift+0x4a>
 8010606:	3904      	subs	r1, #4
 8010608:	f853 2b04 	ldr.w	r2, [r3], #4
 801060c:	f841 2f04 	str.w	r2, [r1, #4]!
 8010610:	4298      	cmp	r0, r3
 8010612:	d8f9      	bhi.n	8010608 <__lshift+0xc8>
 8010614:	e7ea      	b.n	80105ec <__lshift+0xac>
 8010616:	bf00      	nop
 8010618:	08013f9b 	.word	0x08013f9b
 801061c:	08013fac 	.word	0x08013fac

08010620 <__mcmp>:
 8010620:	b530      	push	{r4, r5, lr}
 8010622:	6902      	ldr	r2, [r0, #16]
 8010624:	690c      	ldr	r4, [r1, #16]
 8010626:	1b12      	subs	r2, r2, r4
 8010628:	d10e      	bne.n	8010648 <__mcmp+0x28>
 801062a:	f100 0314 	add.w	r3, r0, #20
 801062e:	3114      	adds	r1, #20
 8010630:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8010634:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8010638:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801063c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8010640:	42a5      	cmp	r5, r4
 8010642:	d003      	beq.n	801064c <__mcmp+0x2c>
 8010644:	d305      	bcc.n	8010652 <__mcmp+0x32>
 8010646:	2201      	movs	r2, #1
 8010648:	4610      	mov	r0, r2
 801064a:	bd30      	pop	{r4, r5, pc}
 801064c:	4283      	cmp	r3, r0
 801064e:	d3f3      	bcc.n	8010638 <__mcmp+0x18>
 8010650:	e7fa      	b.n	8010648 <__mcmp+0x28>
 8010652:	f04f 32ff 	mov.w	r2, #4294967295
 8010656:	e7f7      	b.n	8010648 <__mcmp+0x28>

08010658 <__mdiff>:
 8010658:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801065c:	460c      	mov	r4, r1
 801065e:	4606      	mov	r6, r0
 8010660:	4611      	mov	r1, r2
 8010662:	4620      	mov	r0, r4
 8010664:	4690      	mov	r8, r2
 8010666:	f7ff ffdb 	bl	8010620 <__mcmp>
 801066a:	1e05      	subs	r5, r0, #0
 801066c:	d110      	bne.n	8010690 <__mdiff+0x38>
 801066e:	4629      	mov	r1, r5
 8010670:	4630      	mov	r0, r6
 8010672:	f7ff fd53 	bl	801011c <_Balloc>
 8010676:	b930      	cbnz	r0, 8010686 <__mdiff+0x2e>
 8010678:	4b3a      	ldr	r3, [pc, #232]	; (8010764 <__mdiff+0x10c>)
 801067a:	4602      	mov	r2, r0
 801067c:	f240 2132 	movw	r1, #562	; 0x232
 8010680:	4839      	ldr	r0, [pc, #228]	; (8010768 <__mdiff+0x110>)
 8010682:	f000 fb31 	bl	8010ce8 <__assert_func>
 8010686:	2301      	movs	r3, #1
 8010688:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801068c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010690:	bfa4      	itt	ge
 8010692:	4643      	movge	r3, r8
 8010694:	46a0      	movge	r8, r4
 8010696:	4630      	mov	r0, r6
 8010698:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801069c:	bfa6      	itte	ge
 801069e:	461c      	movge	r4, r3
 80106a0:	2500      	movge	r5, #0
 80106a2:	2501      	movlt	r5, #1
 80106a4:	f7ff fd3a 	bl	801011c <_Balloc>
 80106a8:	b920      	cbnz	r0, 80106b4 <__mdiff+0x5c>
 80106aa:	4b2e      	ldr	r3, [pc, #184]	; (8010764 <__mdiff+0x10c>)
 80106ac:	4602      	mov	r2, r0
 80106ae:	f44f 7110 	mov.w	r1, #576	; 0x240
 80106b2:	e7e5      	b.n	8010680 <__mdiff+0x28>
 80106b4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80106b8:	6926      	ldr	r6, [r4, #16]
 80106ba:	60c5      	str	r5, [r0, #12]
 80106bc:	f104 0914 	add.w	r9, r4, #20
 80106c0:	f108 0514 	add.w	r5, r8, #20
 80106c4:	f100 0e14 	add.w	lr, r0, #20
 80106c8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80106cc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80106d0:	f108 0210 	add.w	r2, r8, #16
 80106d4:	46f2      	mov	sl, lr
 80106d6:	2100      	movs	r1, #0
 80106d8:	f859 3b04 	ldr.w	r3, [r9], #4
 80106dc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80106e0:	fa1f f883 	uxth.w	r8, r3
 80106e4:	fa11 f18b 	uxtah	r1, r1, fp
 80106e8:	0c1b      	lsrs	r3, r3, #16
 80106ea:	eba1 0808 	sub.w	r8, r1, r8
 80106ee:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80106f2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80106f6:	fa1f f888 	uxth.w	r8, r8
 80106fa:	1419      	asrs	r1, r3, #16
 80106fc:	454e      	cmp	r6, r9
 80106fe:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8010702:	f84a 3b04 	str.w	r3, [sl], #4
 8010706:	d8e7      	bhi.n	80106d8 <__mdiff+0x80>
 8010708:	1b33      	subs	r3, r6, r4
 801070a:	3b15      	subs	r3, #21
 801070c:	f023 0303 	bic.w	r3, r3, #3
 8010710:	3304      	adds	r3, #4
 8010712:	3415      	adds	r4, #21
 8010714:	42a6      	cmp	r6, r4
 8010716:	bf38      	it	cc
 8010718:	2304      	movcc	r3, #4
 801071a:	441d      	add	r5, r3
 801071c:	4473      	add	r3, lr
 801071e:	469e      	mov	lr, r3
 8010720:	462e      	mov	r6, r5
 8010722:	4566      	cmp	r6, ip
 8010724:	d30e      	bcc.n	8010744 <__mdiff+0xec>
 8010726:	f10c 0203 	add.w	r2, ip, #3
 801072a:	1b52      	subs	r2, r2, r5
 801072c:	f022 0203 	bic.w	r2, r2, #3
 8010730:	3d03      	subs	r5, #3
 8010732:	45ac      	cmp	ip, r5
 8010734:	bf38      	it	cc
 8010736:	2200      	movcc	r2, #0
 8010738:	441a      	add	r2, r3
 801073a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801073e:	b17b      	cbz	r3, 8010760 <__mdiff+0x108>
 8010740:	6107      	str	r7, [r0, #16]
 8010742:	e7a3      	b.n	801068c <__mdiff+0x34>
 8010744:	f856 8b04 	ldr.w	r8, [r6], #4
 8010748:	fa11 f288 	uxtah	r2, r1, r8
 801074c:	1414      	asrs	r4, r2, #16
 801074e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8010752:	b292      	uxth	r2, r2
 8010754:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8010758:	f84e 2b04 	str.w	r2, [lr], #4
 801075c:	1421      	asrs	r1, r4, #16
 801075e:	e7e0      	b.n	8010722 <__mdiff+0xca>
 8010760:	3f01      	subs	r7, #1
 8010762:	e7ea      	b.n	801073a <__mdiff+0xe2>
 8010764:	08013f9b 	.word	0x08013f9b
 8010768:	08013fac 	.word	0x08013fac

0801076c <__d2b>:
 801076c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010770:	4689      	mov	r9, r1
 8010772:	2101      	movs	r1, #1
 8010774:	ec57 6b10 	vmov	r6, r7, d0
 8010778:	4690      	mov	r8, r2
 801077a:	f7ff fccf 	bl	801011c <_Balloc>
 801077e:	4604      	mov	r4, r0
 8010780:	b930      	cbnz	r0, 8010790 <__d2b+0x24>
 8010782:	4602      	mov	r2, r0
 8010784:	4b25      	ldr	r3, [pc, #148]	; (801081c <__d2b+0xb0>)
 8010786:	4826      	ldr	r0, [pc, #152]	; (8010820 <__d2b+0xb4>)
 8010788:	f240 310a 	movw	r1, #778	; 0x30a
 801078c:	f000 faac 	bl	8010ce8 <__assert_func>
 8010790:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8010794:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8010798:	bb35      	cbnz	r5, 80107e8 <__d2b+0x7c>
 801079a:	2e00      	cmp	r6, #0
 801079c:	9301      	str	r3, [sp, #4]
 801079e:	d028      	beq.n	80107f2 <__d2b+0x86>
 80107a0:	4668      	mov	r0, sp
 80107a2:	9600      	str	r6, [sp, #0]
 80107a4:	f7ff fd82 	bl	80102ac <__lo0bits>
 80107a8:	9900      	ldr	r1, [sp, #0]
 80107aa:	b300      	cbz	r0, 80107ee <__d2b+0x82>
 80107ac:	9a01      	ldr	r2, [sp, #4]
 80107ae:	f1c0 0320 	rsb	r3, r0, #32
 80107b2:	fa02 f303 	lsl.w	r3, r2, r3
 80107b6:	430b      	orrs	r3, r1
 80107b8:	40c2      	lsrs	r2, r0
 80107ba:	6163      	str	r3, [r4, #20]
 80107bc:	9201      	str	r2, [sp, #4]
 80107be:	9b01      	ldr	r3, [sp, #4]
 80107c0:	61a3      	str	r3, [r4, #24]
 80107c2:	2b00      	cmp	r3, #0
 80107c4:	bf14      	ite	ne
 80107c6:	2202      	movne	r2, #2
 80107c8:	2201      	moveq	r2, #1
 80107ca:	6122      	str	r2, [r4, #16]
 80107cc:	b1d5      	cbz	r5, 8010804 <__d2b+0x98>
 80107ce:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80107d2:	4405      	add	r5, r0
 80107d4:	f8c9 5000 	str.w	r5, [r9]
 80107d8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80107dc:	f8c8 0000 	str.w	r0, [r8]
 80107e0:	4620      	mov	r0, r4
 80107e2:	b003      	add	sp, #12
 80107e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80107e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80107ec:	e7d5      	b.n	801079a <__d2b+0x2e>
 80107ee:	6161      	str	r1, [r4, #20]
 80107f0:	e7e5      	b.n	80107be <__d2b+0x52>
 80107f2:	a801      	add	r0, sp, #4
 80107f4:	f7ff fd5a 	bl	80102ac <__lo0bits>
 80107f8:	9b01      	ldr	r3, [sp, #4]
 80107fa:	6163      	str	r3, [r4, #20]
 80107fc:	2201      	movs	r2, #1
 80107fe:	6122      	str	r2, [r4, #16]
 8010800:	3020      	adds	r0, #32
 8010802:	e7e3      	b.n	80107cc <__d2b+0x60>
 8010804:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010808:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801080c:	f8c9 0000 	str.w	r0, [r9]
 8010810:	6918      	ldr	r0, [r3, #16]
 8010812:	f7ff fd2b 	bl	801026c <__hi0bits>
 8010816:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801081a:	e7df      	b.n	80107dc <__d2b+0x70>
 801081c:	08013f9b 	.word	0x08013f9b
 8010820:	08013fac 	.word	0x08013fac

08010824 <_calloc_r>:
 8010824:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010826:	fba1 2402 	umull	r2, r4, r1, r2
 801082a:	b94c      	cbnz	r4, 8010840 <_calloc_r+0x1c>
 801082c:	4611      	mov	r1, r2
 801082e:	9201      	str	r2, [sp, #4]
 8010830:	f000 f87a 	bl	8010928 <_malloc_r>
 8010834:	9a01      	ldr	r2, [sp, #4]
 8010836:	4605      	mov	r5, r0
 8010838:	b930      	cbnz	r0, 8010848 <_calloc_r+0x24>
 801083a:	4628      	mov	r0, r5
 801083c:	b003      	add	sp, #12
 801083e:	bd30      	pop	{r4, r5, pc}
 8010840:	220c      	movs	r2, #12
 8010842:	6002      	str	r2, [r0, #0]
 8010844:	2500      	movs	r5, #0
 8010846:	e7f8      	b.n	801083a <_calloc_r+0x16>
 8010848:	4621      	mov	r1, r4
 801084a:	f7fe f94f 	bl	800eaec <memset>
 801084e:	e7f4      	b.n	801083a <_calloc_r+0x16>

08010850 <_free_r>:
 8010850:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010852:	2900      	cmp	r1, #0
 8010854:	d044      	beq.n	80108e0 <_free_r+0x90>
 8010856:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801085a:	9001      	str	r0, [sp, #4]
 801085c:	2b00      	cmp	r3, #0
 801085e:	f1a1 0404 	sub.w	r4, r1, #4
 8010862:	bfb8      	it	lt
 8010864:	18e4      	addlt	r4, r4, r3
 8010866:	f000 fa9b 	bl	8010da0 <__malloc_lock>
 801086a:	4a1e      	ldr	r2, [pc, #120]	; (80108e4 <_free_r+0x94>)
 801086c:	9801      	ldr	r0, [sp, #4]
 801086e:	6813      	ldr	r3, [r2, #0]
 8010870:	b933      	cbnz	r3, 8010880 <_free_r+0x30>
 8010872:	6063      	str	r3, [r4, #4]
 8010874:	6014      	str	r4, [r2, #0]
 8010876:	b003      	add	sp, #12
 8010878:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801087c:	f000 ba96 	b.w	8010dac <__malloc_unlock>
 8010880:	42a3      	cmp	r3, r4
 8010882:	d908      	bls.n	8010896 <_free_r+0x46>
 8010884:	6825      	ldr	r5, [r4, #0]
 8010886:	1961      	adds	r1, r4, r5
 8010888:	428b      	cmp	r3, r1
 801088a:	bf01      	itttt	eq
 801088c:	6819      	ldreq	r1, [r3, #0]
 801088e:	685b      	ldreq	r3, [r3, #4]
 8010890:	1949      	addeq	r1, r1, r5
 8010892:	6021      	streq	r1, [r4, #0]
 8010894:	e7ed      	b.n	8010872 <_free_r+0x22>
 8010896:	461a      	mov	r2, r3
 8010898:	685b      	ldr	r3, [r3, #4]
 801089a:	b10b      	cbz	r3, 80108a0 <_free_r+0x50>
 801089c:	42a3      	cmp	r3, r4
 801089e:	d9fa      	bls.n	8010896 <_free_r+0x46>
 80108a0:	6811      	ldr	r1, [r2, #0]
 80108a2:	1855      	adds	r5, r2, r1
 80108a4:	42a5      	cmp	r5, r4
 80108a6:	d10b      	bne.n	80108c0 <_free_r+0x70>
 80108a8:	6824      	ldr	r4, [r4, #0]
 80108aa:	4421      	add	r1, r4
 80108ac:	1854      	adds	r4, r2, r1
 80108ae:	42a3      	cmp	r3, r4
 80108b0:	6011      	str	r1, [r2, #0]
 80108b2:	d1e0      	bne.n	8010876 <_free_r+0x26>
 80108b4:	681c      	ldr	r4, [r3, #0]
 80108b6:	685b      	ldr	r3, [r3, #4]
 80108b8:	6053      	str	r3, [r2, #4]
 80108ba:	4421      	add	r1, r4
 80108bc:	6011      	str	r1, [r2, #0]
 80108be:	e7da      	b.n	8010876 <_free_r+0x26>
 80108c0:	d902      	bls.n	80108c8 <_free_r+0x78>
 80108c2:	230c      	movs	r3, #12
 80108c4:	6003      	str	r3, [r0, #0]
 80108c6:	e7d6      	b.n	8010876 <_free_r+0x26>
 80108c8:	6825      	ldr	r5, [r4, #0]
 80108ca:	1961      	adds	r1, r4, r5
 80108cc:	428b      	cmp	r3, r1
 80108ce:	bf04      	itt	eq
 80108d0:	6819      	ldreq	r1, [r3, #0]
 80108d2:	685b      	ldreq	r3, [r3, #4]
 80108d4:	6063      	str	r3, [r4, #4]
 80108d6:	bf04      	itt	eq
 80108d8:	1949      	addeq	r1, r1, r5
 80108da:	6021      	streq	r1, [r4, #0]
 80108dc:	6054      	str	r4, [r2, #4]
 80108de:	e7ca      	b.n	8010876 <_free_r+0x26>
 80108e0:	b003      	add	sp, #12
 80108e2:	bd30      	pop	{r4, r5, pc}
 80108e4:	20006888 	.word	0x20006888

080108e8 <sbrk_aligned>:
 80108e8:	b570      	push	{r4, r5, r6, lr}
 80108ea:	4e0e      	ldr	r6, [pc, #56]	; (8010924 <sbrk_aligned+0x3c>)
 80108ec:	460c      	mov	r4, r1
 80108ee:	6831      	ldr	r1, [r6, #0]
 80108f0:	4605      	mov	r5, r0
 80108f2:	b911      	cbnz	r1, 80108fa <sbrk_aligned+0x12>
 80108f4:	f000 f9e8 	bl	8010cc8 <_sbrk_r>
 80108f8:	6030      	str	r0, [r6, #0]
 80108fa:	4621      	mov	r1, r4
 80108fc:	4628      	mov	r0, r5
 80108fe:	f000 f9e3 	bl	8010cc8 <_sbrk_r>
 8010902:	1c43      	adds	r3, r0, #1
 8010904:	d00a      	beq.n	801091c <sbrk_aligned+0x34>
 8010906:	1cc4      	adds	r4, r0, #3
 8010908:	f024 0403 	bic.w	r4, r4, #3
 801090c:	42a0      	cmp	r0, r4
 801090e:	d007      	beq.n	8010920 <sbrk_aligned+0x38>
 8010910:	1a21      	subs	r1, r4, r0
 8010912:	4628      	mov	r0, r5
 8010914:	f000 f9d8 	bl	8010cc8 <_sbrk_r>
 8010918:	3001      	adds	r0, #1
 801091a:	d101      	bne.n	8010920 <sbrk_aligned+0x38>
 801091c:	f04f 34ff 	mov.w	r4, #4294967295
 8010920:	4620      	mov	r0, r4
 8010922:	bd70      	pop	{r4, r5, r6, pc}
 8010924:	2000688c 	.word	0x2000688c

08010928 <_malloc_r>:
 8010928:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801092c:	1ccd      	adds	r5, r1, #3
 801092e:	f025 0503 	bic.w	r5, r5, #3
 8010932:	3508      	adds	r5, #8
 8010934:	2d0c      	cmp	r5, #12
 8010936:	bf38      	it	cc
 8010938:	250c      	movcc	r5, #12
 801093a:	2d00      	cmp	r5, #0
 801093c:	4607      	mov	r7, r0
 801093e:	db01      	blt.n	8010944 <_malloc_r+0x1c>
 8010940:	42a9      	cmp	r1, r5
 8010942:	d905      	bls.n	8010950 <_malloc_r+0x28>
 8010944:	230c      	movs	r3, #12
 8010946:	603b      	str	r3, [r7, #0]
 8010948:	2600      	movs	r6, #0
 801094a:	4630      	mov	r0, r6
 801094c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010950:	4e2e      	ldr	r6, [pc, #184]	; (8010a0c <_malloc_r+0xe4>)
 8010952:	f000 fa25 	bl	8010da0 <__malloc_lock>
 8010956:	6833      	ldr	r3, [r6, #0]
 8010958:	461c      	mov	r4, r3
 801095a:	bb34      	cbnz	r4, 80109aa <_malloc_r+0x82>
 801095c:	4629      	mov	r1, r5
 801095e:	4638      	mov	r0, r7
 8010960:	f7ff ffc2 	bl	80108e8 <sbrk_aligned>
 8010964:	1c43      	adds	r3, r0, #1
 8010966:	4604      	mov	r4, r0
 8010968:	d14d      	bne.n	8010a06 <_malloc_r+0xde>
 801096a:	6834      	ldr	r4, [r6, #0]
 801096c:	4626      	mov	r6, r4
 801096e:	2e00      	cmp	r6, #0
 8010970:	d140      	bne.n	80109f4 <_malloc_r+0xcc>
 8010972:	6823      	ldr	r3, [r4, #0]
 8010974:	4631      	mov	r1, r6
 8010976:	4638      	mov	r0, r7
 8010978:	eb04 0803 	add.w	r8, r4, r3
 801097c:	f000 f9a4 	bl	8010cc8 <_sbrk_r>
 8010980:	4580      	cmp	r8, r0
 8010982:	d13a      	bne.n	80109fa <_malloc_r+0xd2>
 8010984:	6821      	ldr	r1, [r4, #0]
 8010986:	3503      	adds	r5, #3
 8010988:	1a6d      	subs	r5, r5, r1
 801098a:	f025 0503 	bic.w	r5, r5, #3
 801098e:	3508      	adds	r5, #8
 8010990:	2d0c      	cmp	r5, #12
 8010992:	bf38      	it	cc
 8010994:	250c      	movcc	r5, #12
 8010996:	4629      	mov	r1, r5
 8010998:	4638      	mov	r0, r7
 801099a:	f7ff ffa5 	bl	80108e8 <sbrk_aligned>
 801099e:	3001      	adds	r0, #1
 80109a0:	d02b      	beq.n	80109fa <_malloc_r+0xd2>
 80109a2:	6823      	ldr	r3, [r4, #0]
 80109a4:	442b      	add	r3, r5
 80109a6:	6023      	str	r3, [r4, #0]
 80109a8:	e00e      	b.n	80109c8 <_malloc_r+0xa0>
 80109aa:	6822      	ldr	r2, [r4, #0]
 80109ac:	1b52      	subs	r2, r2, r5
 80109ae:	d41e      	bmi.n	80109ee <_malloc_r+0xc6>
 80109b0:	2a0b      	cmp	r2, #11
 80109b2:	d916      	bls.n	80109e2 <_malloc_r+0xba>
 80109b4:	1961      	adds	r1, r4, r5
 80109b6:	42a3      	cmp	r3, r4
 80109b8:	6025      	str	r5, [r4, #0]
 80109ba:	bf18      	it	ne
 80109bc:	6059      	strne	r1, [r3, #4]
 80109be:	6863      	ldr	r3, [r4, #4]
 80109c0:	bf08      	it	eq
 80109c2:	6031      	streq	r1, [r6, #0]
 80109c4:	5162      	str	r2, [r4, r5]
 80109c6:	604b      	str	r3, [r1, #4]
 80109c8:	4638      	mov	r0, r7
 80109ca:	f104 060b 	add.w	r6, r4, #11
 80109ce:	f000 f9ed 	bl	8010dac <__malloc_unlock>
 80109d2:	f026 0607 	bic.w	r6, r6, #7
 80109d6:	1d23      	adds	r3, r4, #4
 80109d8:	1af2      	subs	r2, r6, r3
 80109da:	d0b6      	beq.n	801094a <_malloc_r+0x22>
 80109dc:	1b9b      	subs	r3, r3, r6
 80109de:	50a3      	str	r3, [r4, r2]
 80109e0:	e7b3      	b.n	801094a <_malloc_r+0x22>
 80109e2:	6862      	ldr	r2, [r4, #4]
 80109e4:	42a3      	cmp	r3, r4
 80109e6:	bf0c      	ite	eq
 80109e8:	6032      	streq	r2, [r6, #0]
 80109ea:	605a      	strne	r2, [r3, #4]
 80109ec:	e7ec      	b.n	80109c8 <_malloc_r+0xa0>
 80109ee:	4623      	mov	r3, r4
 80109f0:	6864      	ldr	r4, [r4, #4]
 80109f2:	e7b2      	b.n	801095a <_malloc_r+0x32>
 80109f4:	4634      	mov	r4, r6
 80109f6:	6876      	ldr	r6, [r6, #4]
 80109f8:	e7b9      	b.n	801096e <_malloc_r+0x46>
 80109fa:	230c      	movs	r3, #12
 80109fc:	603b      	str	r3, [r7, #0]
 80109fe:	4638      	mov	r0, r7
 8010a00:	f000 f9d4 	bl	8010dac <__malloc_unlock>
 8010a04:	e7a1      	b.n	801094a <_malloc_r+0x22>
 8010a06:	6025      	str	r5, [r4, #0]
 8010a08:	e7de      	b.n	80109c8 <_malloc_r+0xa0>
 8010a0a:	bf00      	nop
 8010a0c:	20006888 	.word	0x20006888

08010a10 <__ssputs_r>:
 8010a10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010a14:	688e      	ldr	r6, [r1, #8]
 8010a16:	429e      	cmp	r6, r3
 8010a18:	4682      	mov	sl, r0
 8010a1a:	460c      	mov	r4, r1
 8010a1c:	4690      	mov	r8, r2
 8010a1e:	461f      	mov	r7, r3
 8010a20:	d838      	bhi.n	8010a94 <__ssputs_r+0x84>
 8010a22:	898a      	ldrh	r2, [r1, #12]
 8010a24:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010a28:	d032      	beq.n	8010a90 <__ssputs_r+0x80>
 8010a2a:	6825      	ldr	r5, [r4, #0]
 8010a2c:	6909      	ldr	r1, [r1, #16]
 8010a2e:	eba5 0901 	sub.w	r9, r5, r1
 8010a32:	6965      	ldr	r5, [r4, #20]
 8010a34:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010a38:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010a3c:	3301      	adds	r3, #1
 8010a3e:	444b      	add	r3, r9
 8010a40:	106d      	asrs	r5, r5, #1
 8010a42:	429d      	cmp	r5, r3
 8010a44:	bf38      	it	cc
 8010a46:	461d      	movcc	r5, r3
 8010a48:	0553      	lsls	r3, r2, #21
 8010a4a:	d531      	bpl.n	8010ab0 <__ssputs_r+0xa0>
 8010a4c:	4629      	mov	r1, r5
 8010a4e:	f7ff ff6b 	bl	8010928 <_malloc_r>
 8010a52:	4606      	mov	r6, r0
 8010a54:	b950      	cbnz	r0, 8010a6c <__ssputs_r+0x5c>
 8010a56:	230c      	movs	r3, #12
 8010a58:	f8ca 3000 	str.w	r3, [sl]
 8010a5c:	89a3      	ldrh	r3, [r4, #12]
 8010a5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010a62:	81a3      	strh	r3, [r4, #12]
 8010a64:	f04f 30ff 	mov.w	r0, #4294967295
 8010a68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010a6c:	6921      	ldr	r1, [r4, #16]
 8010a6e:	464a      	mov	r2, r9
 8010a70:	f7fe f82e 	bl	800ead0 <memcpy>
 8010a74:	89a3      	ldrh	r3, [r4, #12]
 8010a76:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010a7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010a7e:	81a3      	strh	r3, [r4, #12]
 8010a80:	6126      	str	r6, [r4, #16]
 8010a82:	6165      	str	r5, [r4, #20]
 8010a84:	444e      	add	r6, r9
 8010a86:	eba5 0509 	sub.w	r5, r5, r9
 8010a8a:	6026      	str	r6, [r4, #0]
 8010a8c:	60a5      	str	r5, [r4, #8]
 8010a8e:	463e      	mov	r6, r7
 8010a90:	42be      	cmp	r6, r7
 8010a92:	d900      	bls.n	8010a96 <__ssputs_r+0x86>
 8010a94:	463e      	mov	r6, r7
 8010a96:	6820      	ldr	r0, [r4, #0]
 8010a98:	4632      	mov	r2, r6
 8010a9a:	4641      	mov	r1, r8
 8010a9c:	f000 f966 	bl	8010d6c <memmove>
 8010aa0:	68a3      	ldr	r3, [r4, #8]
 8010aa2:	1b9b      	subs	r3, r3, r6
 8010aa4:	60a3      	str	r3, [r4, #8]
 8010aa6:	6823      	ldr	r3, [r4, #0]
 8010aa8:	4433      	add	r3, r6
 8010aaa:	6023      	str	r3, [r4, #0]
 8010aac:	2000      	movs	r0, #0
 8010aae:	e7db      	b.n	8010a68 <__ssputs_r+0x58>
 8010ab0:	462a      	mov	r2, r5
 8010ab2:	f000 f981 	bl	8010db8 <_realloc_r>
 8010ab6:	4606      	mov	r6, r0
 8010ab8:	2800      	cmp	r0, #0
 8010aba:	d1e1      	bne.n	8010a80 <__ssputs_r+0x70>
 8010abc:	6921      	ldr	r1, [r4, #16]
 8010abe:	4650      	mov	r0, sl
 8010ac0:	f7ff fec6 	bl	8010850 <_free_r>
 8010ac4:	e7c7      	b.n	8010a56 <__ssputs_r+0x46>
	...

08010ac8 <_svfiprintf_r>:
 8010ac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010acc:	4698      	mov	r8, r3
 8010ace:	898b      	ldrh	r3, [r1, #12]
 8010ad0:	061b      	lsls	r3, r3, #24
 8010ad2:	b09d      	sub	sp, #116	; 0x74
 8010ad4:	4607      	mov	r7, r0
 8010ad6:	460d      	mov	r5, r1
 8010ad8:	4614      	mov	r4, r2
 8010ada:	d50e      	bpl.n	8010afa <_svfiprintf_r+0x32>
 8010adc:	690b      	ldr	r3, [r1, #16]
 8010ade:	b963      	cbnz	r3, 8010afa <_svfiprintf_r+0x32>
 8010ae0:	2140      	movs	r1, #64	; 0x40
 8010ae2:	f7ff ff21 	bl	8010928 <_malloc_r>
 8010ae6:	6028      	str	r0, [r5, #0]
 8010ae8:	6128      	str	r0, [r5, #16]
 8010aea:	b920      	cbnz	r0, 8010af6 <_svfiprintf_r+0x2e>
 8010aec:	230c      	movs	r3, #12
 8010aee:	603b      	str	r3, [r7, #0]
 8010af0:	f04f 30ff 	mov.w	r0, #4294967295
 8010af4:	e0d1      	b.n	8010c9a <_svfiprintf_r+0x1d2>
 8010af6:	2340      	movs	r3, #64	; 0x40
 8010af8:	616b      	str	r3, [r5, #20]
 8010afa:	2300      	movs	r3, #0
 8010afc:	9309      	str	r3, [sp, #36]	; 0x24
 8010afe:	2320      	movs	r3, #32
 8010b00:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010b04:	f8cd 800c 	str.w	r8, [sp, #12]
 8010b08:	2330      	movs	r3, #48	; 0x30
 8010b0a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8010cb4 <_svfiprintf_r+0x1ec>
 8010b0e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010b12:	f04f 0901 	mov.w	r9, #1
 8010b16:	4623      	mov	r3, r4
 8010b18:	469a      	mov	sl, r3
 8010b1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010b1e:	b10a      	cbz	r2, 8010b24 <_svfiprintf_r+0x5c>
 8010b20:	2a25      	cmp	r2, #37	; 0x25
 8010b22:	d1f9      	bne.n	8010b18 <_svfiprintf_r+0x50>
 8010b24:	ebba 0b04 	subs.w	fp, sl, r4
 8010b28:	d00b      	beq.n	8010b42 <_svfiprintf_r+0x7a>
 8010b2a:	465b      	mov	r3, fp
 8010b2c:	4622      	mov	r2, r4
 8010b2e:	4629      	mov	r1, r5
 8010b30:	4638      	mov	r0, r7
 8010b32:	f7ff ff6d 	bl	8010a10 <__ssputs_r>
 8010b36:	3001      	adds	r0, #1
 8010b38:	f000 80aa 	beq.w	8010c90 <_svfiprintf_r+0x1c8>
 8010b3c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010b3e:	445a      	add	r2, fp
 8010b40:	9209      	str	r2, [sp, #36]	; 0x24
 8010b42:	f89a 3000 	ldrb.w	r3, [sl]
 8010b46:	2b00      	cmp	r3, #0
 8010b48:	f000 80a2 	beq.w	8010c90 <_svfiprintf_r+0x1c8>
 8010b4c:	2300      	movs	r3, #0
 8010b4e:	f04f 32ff 	mov.w	r2, #4294967295
 8010b52:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010b56:	f10a 0a01 	add.w	sl, sl, #1
 8010b5a:	9304      	str	r3, [sp, #16]
 8010b5c:	9307      	str	r3, [sp, #28]
 8010b5e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010b62:	931a      	str	r3, [sp, #104]	; 0x68
 8010b64:	4654      	mov	r4, sl
 8010b66:	2205      	movs	r2, #5
 8010b68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010b6c:	4851      	ldr	r0, [pc, #324]	; (8010cb4 <_svfiprintf_r+0x1ec>)
 8010b6e:	f7ef fb37 	bl	80001e0 <memchr>
 8010b72:	9a04      	ldr	r2, [sp, #16]
 8010b74:	b9d8      	cbnz	r0, 8010bae <_svfiprintf_r+0xe6>
 8010b76:	06d0      	lsls	r0, r2, #27
 8010b78:	bf44      	itt	mi
 8010b7a:	2320      	movmi	r3, #32
 8010b7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010b80:	0711      	lsls	r1, r2, #28
 8010b82:	bf44      	itt	mi
 8010b84:	232b      	movmi	r3, #43	; 0x2b
 8010b86:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010b8a:	f89a 3000 	ldrb.w	r3, [sl]
 8010b8e:	2b2a      	cmp	r3, #42	; 0x2a
 8010b90:	d015      	beq.n	8010bbe <_svfiprintf_r+0xf6>
 8010b92:	9a07      	ldr	r2, [sp, #28]
 8010b94:	4654      	mov	r4, sl
 8010b96:	2000      	movs	r0, #0
 8010b98:	f04f 0c0a 	mov.w	ip, #10
 8010b9c:	4621      	mov	r1, r4
 8010b9e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010ba2:	3b30      	subs	r3, #48	; 0x30
 8010ba4:	2b09      	cmp	r3, #9
 8010ba6:	d94e      	bls.n	8010c46 <_svfiprintf_r+0x17e>
 8010ba8:	b1b0      	cbz	r0, 8010bd8 <_svfiprintf_r+0x110>
 8010baa:	9207      	str	r2, [sp, #28]
 8010bac:	e014      	b.n	8010bd8 <_svfiprintf_r+0x110>
 8010bae:	eba0 0308 	sub.w	r3, r0, r8
 8010bb2:	fa09 f303 	lsl.w	r3, r9, r3
 8010bb6:	4313      	orrs	r3, r2
 8010bb8:	9304      	str	r3, [sp, #16]
 8010bba:	46a2      	mov	sl, r4
 8010bbc:	e7d2      	b.n	8010b64 <_svfiprintf_r+0x9c>
 8010bbe:	9b03      	ldr	r3, [sp, #12]
 8010bc0:	1d19      	adds	r1, r3, #4
 8010bc2:	681b      	ldr	r3, [r3, #0]
 8010bc4:	9103      	str	r1, [sp, #12]
 8010bc6:	2b00      	cmp	r3, #0
 8010bc8:	bfbb      	ittet	lt
 8010bca:	425b      	neglt	r3, r3
 8010bcc:	f042 0202 	orrlt.w	r2, r2, #2
 8010bd0:	9307      	strge	r3, [sp, #28]
 8010bd2:	9307      	strlt	r3, [sp, #28]
 8010bd4:	bfb8      	it	lt
 8010bd6:	9204      	strlt	r2, [sp, #16]
 8010bd8:	7823      	ldrb	r3, [r4, #0]
 8010bda:	2b2e      	cmp	r3, #46	; 0x2e
 8010bdc:	d10c      	bne.n	8010bf8 <_svfiprintf_r+0x130>
 8010bde:	7863      	ldrb	r3, [r4, #1]
 8010be0:	2b2a      	cmp	r3, #42	; 0x2a
 8010be2:	d135      	bne.n	8010c50 <_svfiprintf_r+0x188>
 8010be4:	9b03      	ldr	r3, [sp, #12]
 8010be6:	1d1a      	adds	r2, r3, #4
 8010be8:	681b      	ldr	r3, [r3, #0]
 8010bea:	9203      	str	r2, [sp, #12]
 8010bec:	2b00      	cmp	r3, #0
 8010bee:	bfb8      	it	lt
 8010bf0:	f04f 33ff 	movlt.w	r3, #4294967295
 8010bf4:	3402      	adds	r4, #2
 8010bf6:	9305      	str	r3, [sp, #20]
 8010bf8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8010cc4 <_svfiprintf_r+0x1fc>
 8010bfc:	7821      	ldrb	r1, [r4, #0]
 8010bfe:	2203      	movs	r2, #3
 8010c00:	4650      	mov	r0, sl
 8010c02:	f7ef faed 	bl	80001e0 <memchr>
 8010c06:	b140      	cbz	r0, 8010c1a <_svfiprintf_r+0x152>
 8010c08:	2340      	movs	r3, #64	; 0x40
 8010c0a:	eba0 000a 	sub.w	r0, r0, sl
 8010c0e:	fa03 f000 	lsl.w	r0, r3, r0
 8010c12:	9b04      	ldr	r3, [sp, #16]
 8010c14:	4303      	orrs	r3, r0
 8010c16:	3401      	adds	r4, #1
 8010c18:	9304      	str	r3, [sp, #16]
 8010c1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010c1e:	4826      	ldr	r0, [pc, #152]	; (8010cb8 <_svfiprintf_r+0x1f0>)
 8010c20:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010c24:	2206      	movs	r2, #6
 8010c26:	f7ef fadb 	bl	80001e0 <memchr>
 8010c2a:	2800      	cmp	r0, #0
 8010c2c:	d038      	beq.n	8010ca0 <_svfiprintf_r+0x1d8>
 8010c2e:	4b23      	ldr	r3, [pc, #140]	; (8010cbc <_svfiprintf_r+0x1f4>)
 8010c30:	bb1b      	cbnz	r3, 8010c7a <_svfiprintf_r+0x1b2>
 8010c32:	9b03      	ldr	r3, [sp, #12]
 8010c34:	3307      	adds	r3, #7
 8010c36:	f023 0307 	bic.w	r3, r3, #7
 8010c3a:	3308      	adds	r3, #8
 8010c3c:	9303      	str	r3, [sp, #12]
 8010c3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010c40:	4433      	add	r3, r6
 8010c42:	9309      	str	r3, [sp, #36]	; 0x24
 8010c44:	e767      	b.n	8010b16 <_svfiprintf_r+0x4e>
 8010c46:	fb0c 3202 	mla	r2, ip, r2, r3
 8010c4a:	460c      	mov	r4, r1
 8010c4c:	2001      	movs	r0, #1
 8010c4e:	e7a5      	b.n	8010b9c <_svfiprintf_r+0xd4>
 8010c50:	2300      	movs	r3, #0
 8010c52:	3401      	adds	r4, #1
 8010c54:	9305      	str	r3, [sp, #20]
 8010c56:	4619      	mov	r1, r3
 8010c58:	f04f 0c0a 	mov.w	ip, #10
 8010c5c:	4620      	mov	r0, r4
 8010c5e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010c62:	3a30      	subs	r2, #48	; 0x30
 8010c64:	2a09      	cmp	r2, #9
 8010c66:	d903      	bls.n	8010c70 <_svfiprintf_r+0x1a8>
 8010c68:	2b00      	cmp	r3, #0
 8010c6a:	d0c5      	beq.n	8010bf8 <_svfiprintf_r+0x130>
 8010c6c:	9105      	str	r1, [sp, #20]
 8010c6e:	e7c3      	b.n	8010bf8 <_svfiprintf_r+0x130>
 8010c70:	fb0c 2101 	mla	r1, ip, r1, r2
 8010c74:	4604      	mov	r4, r0
 8010c76:	2301      	movs	r3, #1
 8010c78:	e7f0      	b.n	8010c5c <_svfiprintf_r+0x194>
 8010c7a:	ab03      	add	r3, sp, #12
 8010c7c:	9300      	str	r3, [sp, #0]
 8010c7e:	462a      	mov	r2, r5
 8010c80:	4b0f      	ldr	r3, [pc, #60]	; (8010cc0 <_svfiprintf_r+0x1f8>)
 8010c82:	a904      	add	r1, sp, #16
 8010c84:	4638      	mov	r0, r7
 8010c86:	f7fd ffd9 	bl	800ec3c <_printf_float>
 8010c8a:	1c42      	adds	r2, r0, #1
 8010c8c:	4606      	mov	r6, r0
 8010c8e:	d1d6      	bne.n	8010c3e <_svfiprintf_r+0x176>
 8010c90:	89ab      	ldrh	r3, [r5, #12]
 8010c92:	065b      	lsls	r3, r3, #25
 8010c94:	f53f af2c 	bmi.w	8010af0 <_svfiprintf_r+0x28>
 8010c98:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010c9a:	b01d      	add	sp, #116	; 0x74
 8010c9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ca0:	ab03      	add	r3, sp, #12
 8010ca2:	9300      	str	r3, [sp, #0]
 8010ca4:	462a      	mov	r2, r5
 8010ca6:	4b06      	ldr	r3, [pc, #24]	; (8010cc0 <_svfiprintf_r+0x1f8>)
 8010ca8:	a904      	add	r1, sp, #16
 8010caa:	4638      	mov	r0, r7
 8010cac:	f7fe fa6a 	bl	800f184 <_printf_i>
 8010cb0:	e7eb      	b.n	8010c8a <_svfiprintf_r+0x1c2>
 8010cb2:	bf00      	nop
 8010cb4:	08014104 	.word	0x08014104
 8010cb8:	0801410e 	.word	0x0801410e
 8010cbc:	0800ec3d 	.word	0x0800ec3d
 8010cc0:	08010a11 	.word	0x08010a11
 8010cc4:	0801410a 	.word	0x0801410a

08010cc8 <_sbrk_r>:
 8010cc8:	b538      	push	{r3, r4, r5, lr}
 8010cca:	4d06      	ldr	r5, [pc, #24]	; (8010ce4 <_sbrk_r+0x1c>)
 8010ccc:	2300      	movs	r3, #0
 8010cce:	4604      	mov	r4, r0
 8010cd0:	4608      	mov	r0, r1
 8010cd2:	602b      	str	r3, [r5, #0]
 8010cd4:	f7f3 f960 	bl	8003f98 <_sbrk>
 8010cd8:	1c43      	adds	r3, r0, #1
 8010cda:	d102      	bne.n	8010ce2 <_sbrk_r+0x1a>
 8010cdc:	682b      	ldr	r3, [r5, #0]
 8010cde:	b103      	cbz	r3, 8010ce2 <_sbrk_r+0x1a>
 8010ce0:	6023      	str	r3, [r4, #0]
 8010ce2:	bd38      	pop	{r3, r4, r5, pc}
 8010ce4:	20006890 	.word	0x20006890

08010ce8 <__assert_func>:
 8010ce8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010cea:	4614      	mov	r4, r2
 8010cec:	461a      	mov	r2, r3
 8010cee:	4b09      	ldr	r3, [pc, #36]	; (8010d14 <__assert_func+0x2c>)
 8010cf0:	681b      	ldr	r3, [r3, #0]
 8010cf2:	4605      	mov	r5, r0
 8010cf4:	68d8      	ldr	r0, [r3, #12]
 8010cf6:	b14c      	cbz	r4, 8010d0c <__assert_func+0x24>
 8010cf8:	4b07      	ldr	r3, [pc, #28]	; (8010d18 <__assert_func+0x30>)
 8010cfa:	9100      	str	r1, [sp, #0]
 8010cfc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010d00:	4906      	ldr	r1, [pc, #24]	; (8010d1c <__assert_func+0x34>)
 8010d02:	462b      	mov	r3, r5
 8010d04:	f000 f80e 	bl	8010d24 <fiprintf>
 8010d08:	f000 faac 	bl	8011264 <abort>
 8010d0c:	4b04      	ldr	r3, [pc, #16]	; (8010d20 <__assert_func+0x38>)
 8010d0e:	461c      	mov	r4, r3
 8010d10:	e7f3      	b.n	8010cfa <__assert_func+0x12>
 8010d12:	bf00      	nop
 8010d14:	2000001c 	.word	0x2000001c
 8010d18:	08014115 	.word	0x08014115
 8010d1c:	08014122 	.word	0x08014122
 8010d20:	08014150 	.word	0x08014150

08010d24 <fiprintf>:
 8010d24:	b40e      	push	{r1, r2, r3}
 8010d26:	b503      	push	{r0, r1, lr}
 8010d28:	4601      	mov	r1, r0
 8010d2a:	ab03      	add	r3, sp, #12
 8010d2c:	4805      	ldr	r0, [pc, #20]	; (8010d44 <fiprintf+0x20>)
 8010d2e:	f853 2b04 	ldr.w	r2, [r3], #4
 8010d32:	6800      	ldr	r0, [r0, #0]
 8010d34:	9301      	str	r3, [sp, #4]
 8010d36:	f000 f897 	bl	8010e68 <_vfiprintf_r>
 8010d3a:	b002      	add	sp, #8
 8010d3c:	f85d eb04 	ldr.w	lr, [sp], #4
 8010d40:	b003      	add	sp, #12
 8010d42:	4770      	bx	lr
 8010d44:	2000001c 	.word	0x2000001c

08010d48 <__ascii_mbtowc>:
 8010d48:	b082      	sub	sp, #8
 8010d4a:	b901      	cbnz	r1, 8010d4e <__ascii_mbtowc+0x6>
 8010d4c:	a901      	add	r1, sp, #4
 8010d4e:	b142      	cbz	r2, 8010d62 <__ascii_mbtowc+0x1a>
 8010d50:	b14b      	cbz	r3, 8010d66 <__ascii_mbtowc+0x1e>
 8010d52:	7813      	ldrb	r3, [r2, #0]
 8010d54:	600b      	str	r3, [r1, #0]
 8010d56:	7812      	ldrb	r2, [r2, #0]
 8010d58:	1e10      	subs	r0, r2, #0
 8010d5a:	bf18      	it	ne
 8010d5c:	2001      	movne	r0, #1
 8010d5e:	b002      	add	sp, #8
 8010d60:	4770      	bx	lr
 8010d62:	4610      	mov	r0, r2
 8010d64:	e7fb      	b.n	8010d5e <__ascii_mbtowc+0x16>
 8010d66:	f06f 0001 	mvn.w	r0, #1
 8010d6a:	e7f8      	b.n	8010d5e <__ascii_mbtowc+0x16>

08010d6c <memmove>:
 8010d6c:	4288      	cmp	r0, r1
 8010d6e:	b510      	push	{r4, lr}
 8010d70:	eb01 0402 	add.w	r4, r1, r2
 8010d74:	d902      	bls.n	8010d7c <memmove+0x10>
 8010d76:	4284      	cmp	r4, r0
 8010d78:	4623      	mov	r3, r4
 8010d7a:	d807      	bhi.n	8010d8c <memmove+0x20>
 8010d7c:	1e43      	subs	r3, r0, #1
 8010d7e:	42a1      	cmp	r1, r4
 8010d80:	d008      	beq.n	8010d94 <memmove+0x28>
 8010d82:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010d86:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010d8a:	e7f8      	b.n	8010d7e <memmove+0x12>
 8010d8c:	4402      	add	r2, r0
 8010d8e:	4601      	mov	r1, r0
 8010d90:	428a      	cmp	r2, r1
 8010d92:	d100      	bne.n	8010d96 <memmove+0x2a>
 8010d94:	bd10      	pop	{r4, pc}
 8010d96:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010d9a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010d9e:	e7f7      	b.n	8010d90 <memmove+0x24>

08010da0 <__malloc_lock>:
 8010da0:	4801      	ldr	r0, [pc, #4]	; (8010da8 <__malloc_lock+0x8>)
 8010da2:	f000 bc1f 	b.w	80115e4 <__retarget_lock_acquire_recursive>
 8010da6:	bf00      	nop
 8010da8:	20006894 	.word	0x20006894

08010dac <__malloc_unlock>:
 8010dac:	4801      	ldr	r0, [pc, #4]	; (8010db4 <__malloc_unlock+0x8>)
 8010dae:	f000 bc1a 	b.w	80115e6 <__retarget_lock_release_recursive>
 8010db2:	bf00      	nop
 8010db4:	20006894 	.word	0x20006894

08010db8 <_realloc_r>:
 8010db8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010dbc:	4680      	mov	r8, r0
 8010dbe:	4614      	mov	r4, r2
 8010dc0:	460e      	mov	r6, r1
 8010dc2:	b921      	cbnz	r1, 8010dce <_realloc_r+0x16>
 8010dc4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010dc8:	4611      	mov	r1, r2
 8010dca:	f7ff bdad 	b.w	8010928 <_malloc_r>
 8010dce:	b92a      	cbnz	r2, 8010ddc <_realloc_r+0x24>
 8010dd0:	f7ff fd3e 	bl	8010850 <_free_r>
 8010dd4:	4625      	mov	r5, r4
 8010dd6:	4628      	mov	r0, r5
 8010dd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010ddc:	f000 fc6a 	bl	80116b4 <_malloc_usable_size_r>
 8010de0:	4284      	cmp	r4, r0
 8010de2:	4607      	mov	r7, r0
 8010de4:	d802      	bhi.n	8010dec <_realloc_r+0x34>
 8010de6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8010dea:	d812      	bhi.n	8010e12 <_realloc_r+0x5a>
 8010dec:	4621      	mov	r1, r4
 8010dee:	4640      	mov	r0, r8
 8010df0:	f7ff fd9a 	bl	8010928 <_malloc_r>
 8010df4:	4605      	mov	r5, r0
 8010df6:	2800      	cmp	r0, #0
 8010df8:	d0ed      	beq.n	8010dd6 <_realloc_r+0x1e>
 8010dfa:	42bc      	cmp	r4, r7
 8010dfc:	4622      	mov	r2, r4
 8010dfe:	4631      	mov	r1, r6
 8010e00:	bf28      	it	cs
 8010e02:	463a      	movcs	r2, r7
 8010e04:	f7fd fe64 	bl	800ead0 <memcpy>
 8010e08:	4631      	mov	r1, r6
 8010e0a:	4640      	mov	r0, r8
 8010e0c:	f7ff fd20 	bl	8010850 <_free_r>
 8010e10:	e7e1      	b.n	8010dd6 <_realloc_r+0x1e>
 8010e12:	4635      	mov	r5, r6
 8010e14:	e7df      	b.n	8010dd6 <_realloc_r+0x1e>

08010e16 <__sfputc_r>:
 8010e16:	6893      	ldr	r3, [r2, #8]
 8010e18:	3b01      	subs	r3, #1
 8010e1a:	2b00      	cmp	r3, #0
 8010e1c:	b410      	push	{r4}
 8010e1e:	6093      	str	r3, [r2, #8]
 8010e20:	da08      	bge.n	8010e34 <__sfputc_r+0x1e>
 8010e22:	6994      	ldr	r4, [r2, #24]
 8010e24:	42a3      	cmp	r3, r4
 8010e26:	db01      	blt.n	8010e2c <__sfputc_r+0x16>
 8010e28:	290a      	cmp	r1, #10
 8010e2a:	d103      	bne.n	8010e34 <__sfputc_r+0x1e>
 8010e2c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010e30:	f000 b94a 	b.w	80110c8 <__swbuf_r>
 8010e34:	6813      	ldr	r3, [r2, #0]
 8010e36:	1c58      	adds	r0, r3, #1
 8010e38:	6010      	str	r0, [r2, #0]
 8010e3a:	7019      	strb	r1, [r3, #0]
 8010e3c:	4608      	mov	r0, r1
 8010e3e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010e42:	4770      	bx	lr

08010e44 <__sfputs_r>:
 8010e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010e46:	4606      	mov	r6, r0
 8010e48:	460f      	mov	r7, r1
 8010e4a:	4614      	mov	r4, r2
 8010e4c:	18d5      	adds	r5, r2, r3
 8010e4e:	42ac      	cmp	r4, r5
 8010e50:	d101      	bne.n	8010e56 <__sfputs_r+0x12>
 8010e52:	2000      	movs	r0, #0
 8010e54:	e007      	b.n	8010e66 <__sfputs_r+0x22>
 8010e56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010e5a:	463a      	mov	r2, r7
 8010e5c:	4630      	mov	r0, r6
 8010e5e:	f7ff ffda 	bl	8010e16 <__sfputc_r>
 8010e62:	1c43      	adds	r3, r0, #1
 8010e64:	d1f3      	bne.n	8010e4e <__sfputs_r+0xa>
 8010e66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010e68 <_vfiprintf_r>:
 8010e68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e6c:	460d      	mov	r5, r1
 8010e6e:	b09d      	sub	sp, #116	; 0x74
 8010e70:	4614      	mov	r4, r2
 8010e72:	4698      	mov	r8, r3
 8010e74:	4606      	mov	r6, r0
 8010e76:	b118      	cbz	r0, 8010e80 <_vfiprintf_r+0x18>
 8010e78:	6983      	ldr	r3, [r0, #24]
 8010e7a:	b90b      	cbnz	r3, 8010e80 <_vfiprintf_r+0x18>
 8010e7c:	f000 fb14 	bl	80114a8 <__sinit>
 8010e80:	4b89      	ldr	r3, [pc, #548]	; (80110a8 <_vfiprintf_r+0x240>)
 8010e82:	429d      	cmp	r5, r3
 8010e84:	d11b      	bne.n	8010ebe <_vfiprintf_r+0x56>
 8010e86:	6875      	ldr	r5, [r6, #4]
 8010e88:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010e8a:	07d9      	lsls	r1, r3, #31
 8010e8c:	d405      	bmi.n	8010e9a <_vfiprintf_r+0x32>
 8010e8e:	89ab      	ldrh	r3, [r5, #12]
 8010e90:	059a      	lsls	r2, r3, #22
 8010e92:	d402      	bmi.n	8010e9a <_vfiprintf_r+0x32>
 8010e94:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010e96:	f000 fba5 	bl	80115e4 <__retarget_lock_acquire_recursive>
 8010e9a:	89ab      	ldrh	r3, [r5, #12]
 8010e9c:	071b      	lsls	r3, r3, #28
 8010e9e:	d501      	bpl.n	8010ea4 <_vfiprintf_r+0x3c>
 8010ea0:	692b      	ldr	r3, [r5, #16]
 8010ea2:	b9eb      	cbnz	r3, 8010ee0 <_vfiprintf_r+0x78>
 8010ea4:	4629      	mov	r1, r5
 8010ea6:	4630      	mov	r0, r6
 8010ea8:	f000 f96e 	bl	8011188 <__swsetup_r>
 8010eac:	b1c0      	cbz	r0, 8010ee0 <_vfiprintf_r+0x78>
 8010eae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010eb0:	07dc      	lsls	r4, r3, #31
 8010eb2:	d50e      	bpl.n	8010ed2 <_vfiprintf_r+0x6a>
 8010eb4:	f04f 30ff 	mov.w	r0, #4294967295
 8010eb8:	b01d      	add	sp, #116	; 0x74
 8010eba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ebe:	4b7b      	ldr	r3, [pc, #492]	; (80110ac <_vfiprintf_r+0x244>)
 8010ec0:	429d      	cmp	r5, r3
 8010ec2:	d101      	bne.n	8010ec8 <_vfiprintf_r+0x60>
 8010ec4:	68b5      	ldr	r5, [r6, #8]
 8010ec6:	e7df      	b.n	8010e88 <_vfiprintf_r+0x20>
 8010ec8:	4b79      	ldr	r3, [pc, #484]	; (80110b0 <_vfiprintf_r+0x248>)
 8010eca:	429d      	cmp	r5, r3
 8010ecc:	bf08      	it	eq
 8010ece:	68f5      	ldreq	r5, [r6, #12]
 8010ed0:	e7da      	b.n	8010e88 <_vfiprintf_r+0x20>
 8010ed2:	89ab      	ldrh	r3, [r5, #12]
 8010ed4:	0598      	lsls	r0, r3, #22
 8010ed6:	d4ed      	bmi.n	8010eb4 <_vfiprintf_r+0x4c>
 8010ed8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010eda:	f000 fb84 	bl	80115e6 <__retarget_lock_release_recursive>
 8010ede:	e7e9      	b.n	8010eb4 <_vfiprintf_r+0x4c>
 8010ee0:	2300      	movs	r3, #0
 8010ee2:	9309      	str	r3, [sp, #36]	; 0x24
 8010ee4:	2320      	movs	r3, #32
 8010ee6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010eea:	f8cd 800c 	str.w	r8, [sp, #12]
 8010eee:	2330      	movs	r3, #48	; 0x30
 8010ef0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80110b4 <_vfiprintf_r+0x24c>
 8010ef4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010ef8:	f04f 0901 	mov.w	r9, #1
 8010efc:	4623      	mov	r3, r4
 8010efe:	469a      	mov	sl, r3
 8010f00:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010f04:	b10a      	cbz	r2, 8010f0a <_vfiprintf_r+0xa2>
 8010f06:	2a25      	cmp	r2, #37	; 0x25
 8010f08:	d1f9      	bne.n	8010efe <_vfiprintf_r+0x96>
 8010f0a:	ebba 0b04 	subs.w	fp, sl, r4
 8010f0e:	d00b      	beq.n	8010f28 <_vfiprintf_r+0xc0>
 8010f10:	465b      	mov	r3, fp
 8010f12:	4622      	mov	r2, r4
 8010f14:	4629      	mov	r1, r5
 8010f16:	4630      	mov	r0, r6
 8010f18:	f7ff ff94 	bl	8010e44 <__sfputs_r>
 8010f1c:	3001      	adds	r0, #1
 8010f1e:	f000 80aa 	beq.w	8011076 <_vfiprintf_r+0x20e>
 8010f22:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010f24:	445a      	add	r2, fp
 8010f26:	9209      	str	r2, [sp, #36]	; 0x24
 8010f28:	f89a 3000 	ldrb.w	r3, [sl]
 8010f2c:	2b00      	cmp	r3, #0
 8010f2e:	f000 80a2 	beq.w	8011076 <_vfiprintf_r+0x20e>
 8010f32:	2300      	movs	r3, #0
 8010f34:	f04f 32ff 	mov.w	r2, #4294967295
 8010f38:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010f3c:	f10a 0a01 	add.w	sl, sl, #1
 8010f40:	9304      	str	r3, [sp, #16]
 8010f42:	9307      	str	r3, [sp, #28]
 8010f44:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010f48:	931a      	str	r3, [sp, #104]	; 0x68
 8010f4a:	4654      	mov	r4, sl
 8010f4c:	2205      	movs	r2, #5
 8010f4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010f52:	4858      	ldr	r0, [pc, #352]	; (80110b4 <_vfiprintf_r+0x24c>)
 8010f54:	f7ef f944 	bl	80001e0 <memchr>
 8010f58:	9a04      	ldr	r2, [sp, #16]
 8010f5a:	b9d8      	cbnz	r0, 8010f94 <_vfiprintf_r+0x12c>
 8010f5c:	06d1      	lsls	r1, r2, #27
 8010f5e:	bf44      	itt	mi
 8010f60:	2320      	movmi	r3, #32
 8010f62:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010f66:	0713      	lsls	r3, r2, #28
 8010f68:	bf44      	itt	mi
 8010f6a:	232b      	movmi	r3, #43	; 0x2b
 8010f6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010f70:	f89a 3000 	ldrb.w	r3, [sl]
 8010f74:	2b2a      	cmp	r3, #42	; 0x2a
 8010f76:	d015      	beq.n	8010fa4 <_vfiprintf_r+0x13c>
 8010f78:	9a07      	ldr	r2, [sp, #28]
 8010f7a:	4654      	mov	r4, sl
 8010f7c:	2000      	movs	r0, #0
 8010f7e:	f04f 0c0a 	mov.w	ip, #10
 8010f82:	4621      	mov	r1, r4
 8010f84:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010f88:	3b30      	subs	r3, #48	; 0x30
 8010f8a:	2b09      	cmp	r3, #9
 8010f8c:	d94e      	bls.n	801102c <_vfiprintf_r+0x1c4>
 8010f8e:	b1b0      	cbz	r0, 8010fbe <_vfiprintf_r+0x156>
 8010f90:	9207      	str	r2, [sp, #28]
 8010f92:	e014      	b.n	8010fbe <_vfiprintf_r+0x156>
 8010f94:	eba0 0308 	sub.w	r3, r0, r8
 8010f98:	fa09 f303 	lsl.w	r3, r9, r3
 8010f9c:	4313      	orrs	r3, r2
 8010f9e:	9304      	str	r3, [sp, #16]
 8010fa0:	46a2      	mov	sl, r4
 8010fa2:	e7d2      	b.n	8010f4a <_vfiprintf_r+0xe2>
 8010fa4:	9b03      	ldr	r3, [sp, #12]
 8010fa6:	1d19      	adds	r1, r3, #4
 8010fa8:	681b      	ldr	r3, [r3, #0]
 8010faa:	9103      	str	r1, [sp, #12]
 8010fac:	2b00      	cmp	r3, #0
 8010fae:	bfbb      	ittet	lt
 8010fb0:	425b      	neglt	r3, r3
 8010fb2:	f042 0202 	orrlt.w	r2, r2, #2
 8010fb6:	9307      	strge	r3, [sp, #28]
 8010fb8:	9307      	strlt	r3, [sp, #28]
 8010fba:	bfb8      	it	lt
 8010fbc:	9204      	strlt	r2, [sp, #16]
 8010fbe:	7823      	ldrb	r3, [r4, #0]
 8010fc0:	2b2e      	cmp	r3, #46	; 0x2e
 8010fc2:	d10c      	bne.n	8010fde <_vfiprintf_r+0x176>
 8010fc4:	7863      	ldrb	r3, [r4, #1]
 8010fc6:	2b2a      	cmp	r3, #42	; 0x2a
 8010fc8:	d135      	bne.n	8011036 <_vfiprintf_r+0x1ce>
 8010fca:	9b03      	ldr	r3, [sp, #12]
 8010fcc:	1d1a      	adds	r2, r3, #4
 8010fce:	681b      	ldr	r3, [r3, #0]
 8010fd0:	9203      	str	r2, [sp, #12]
 8010fd2:	2b00      	cmp	r3, #0
 8010fd4:	bfb8      	it	lt
 8010fd6:	f04f 33ff 	movlt.w	r3, #4294967295
 8010fda:	3402      	adds	r4, #2
 8010fdc:	9305      	str	r3, [sp, #20]
 8010fde:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80110c4 <_vfiprintf_r+0x25c>
 8010fe2:	7821      	ldrb	r1, [r4, #0]
 8010fe4:	2203      	movs	r2, #3
 8010fe6:	4650      	mov	r0, sl
 8010fe8:	f7ef f8fa 	bl	80001e0 <memchr>
 8010fec:	b140      	cbz	r0, 8011000 <_vfiprintf_r+0x198>
 8010fee:	2340      	movs	r3, #64	; 0x40
 8010ff0:	eba0 000a 	sub.w	r0, r0, sl
 8010ff4:	fa03 f000 	lsl.w	r0, r3, r0
 8010ff8:	9b04      	ldr	r3, [sp, #16]
 8010ffa:	4303      	orrs	r3, r0
 8010ffc:	3401      	adds	r4, #1
 8010ffe:	9304      	str	r3, [sp, #16]
 8011000:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011004:	482c      	ldr	r0, [pc, #176]	; (80110b8 <_vfiprintf_r+0x250>)
 8011006:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801100a:	2206      	movs	r2, #6
 801100c:	f7ef f8e8 	bl	80001e0 <memchr>
 8011010:	2800      	cmp	r0, #0
 8011012:	d03f      	beq.n	8011094 <_vfiprintf_r+0x22c>
 8011014:	4b29      	ldr	r3, [pc, #164]	; (80110bc <_vfiprintf_r+0x254>)
 8011016:	bb1b      	cbnz	r3, 8011060 <_vfiprintf_r+0x1f8>
 8011018:	9b03      	ldr	r3, [sp, #12]
 801101a:	3307      	adds	r3, #7
 801101c:	f023 0307 	bic.w	r3, r3, #7
 8011020:	3308      	adds	r3, #8
 8011022:	9303      	str	r3, [sp, #12]
 8011024:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011026:	443b      	add	r3, r7
 8011028:	9309      	str	r3, [sp, #36]	; 0x24
 801102a:	e767      	b.n	8010efc <_vfiprintf_r+0x94>
 801102c:	fb0c 3202 	mla	r2, ip, r2, r3
 8011030:	460c      	mov	r4, r1
 8011032:	2001      	movs	r0, #1
 8011034:	e7a5      	b.n	8010f82 <_vfiprintf_r+0x11a>
 8011036:	2300      	movs	r3, #0
 8011038:	3401      	adds	r4, #1
 801103a:	9305      	str	r3, [sp, #20]
 801103c:	4619      	mov	r1, r3
 801103e:	f04f 0c0a 	mov.w	ip, #10
 8011042:	4620      	mov	r0, r4
 8011044:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011048:	3a30      	subs	r2, #48	; 0x30
 801104a:	2a09      	cmp	r2, #9
 801104c:	d903      	bls.n	8011056 <_vfiprintf_r+0x1ee>
 801104e:	2b00      	cmp	r3, #0
 8011050:	d0c5      	beq.n	8010fde <_vfiprintf_r+0x176>
 8011052:	9105      	str	r1, [sp, #20]
 8011054:	e7c3      	b.n	8010fde <_vfiprintf_r+0x176>
 8011056:	fb0c 2101 	mla	r1, ip, r1, r2
 801105a:	4604      	mov	r4, r0
 801105c:	2301      	movs	r3, #1
 801105e:	e7f0      	b.n	8011042 <_vfiprintf_r+0x1da>
 8011060:	ab03      	add	r3, sp, #12
 8011062:	9300      	str	r3, [sp, #0]
 8011064:	462a      	mov	r2, r5
 8011066:	4b16      	ldr	r3, [pc, #88]	; (80110c0 <_vfiprintf_r+0x258>)
 8011068:	a904      	add	r1, sp, #16
 801106a:	4630      	mov	r0, r6
 801106c:	f7fd fde6 	bl	800ec3c <_printf_float>
 8011070:	4607      	mov	r7, r0
 8011072:	1c78      	adds	r0, r7, #1
 8011074:	d1d6      	bne.n	8011024 <_vfiprintf_r+0x1bc>
 8011076:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011078:	07d9      	lsls	r1, r3, #31
 801107a:	d405      	bmi.n	8011088 <_vfiprintf_r+0x220>
 801107c:	89ab      	ldrh	r3, [r5, #12]
 801107e:	059a      	lsls	r2, r3, #22
 8011080:	d402      	bmi.n	8011088 <_vfiprintf_r+0x220>
 8011082:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011084:	f000 faaf 	bl	80115e6 <__retarget_lock_release_recursive>
 8011088:	89ab      	ldrh	r3, [r5, #12]
 801108a:	065b      	lsls	r3, r3, #25
 801108c:	f53f af12 	bmi.w	8010eb4 <_vfiprintf_r+0x4c>
 8011090:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011092:	e711      	b.n	8010eb8 <_vfiprintf_r+0x50>
 8011094:	ab03      	add	r3, sp, #12
 8011096:	9300      	str	r3, [sp, #0]
 8011098:	462a      	mov	r2, r5
 801109a:	4b09      	ldr	r3, [pc, #36]	; (80110c0 <_vfiprintf_r+0x258>)
 801109c:	a904      	add	r1, sp, #16
 801109e:	4630      	mov	r0, r6
 80110a0:	f7fe f870 	bl	800f184 <_printf_i>
 80110a4:	e7e4      	b.n	8011070 <_vfiprintf_r+0x208>
 80110a6:	bf00      	nop
 80110a8:	0801427c 	.word	0x0801427c
 80110ac:	0801429c 	.word	0x0801429c
 80110b0:	0801425c 	.word	0x0801425c
 80110b4:	08014104 	.word	0x08014104
 80110b8:	0801410e 	.word	0x0801410e
 80110bc:	0800ec3d 	.word	0x0800ec3d
 80110c0:	08010e45 	.word	0x08010e45
 80110c4:	0801410a 	.word	0x0801410a

080110c8 <__swbuf_r>:
 80110c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80110ca:	460e      	mov	r6, r1
 80110cc:	4614      	mov	r4, r2
 80110ce:	4605      	mov	r5, r0
 80110d0:	b118      	cbz	r0, 80110da <__swbuf_r+0x12>
 80110d2:	6983      	ldr	r3, [r0, #24]
 80110d4:	b90b      	cbnz	r3, 80110da <__swbuf_r+0x12>
 80110d6:	f000 f9e7 	bl	80114a8 <__sinit>
 80110da:	4b21      	ldr	r3, [pc, #132]	; (8011160 <__swbuf_r+0x98>)
 80110dc:	429c      	cmp	r4, r3
 80110de:	d12b      	bne.n	8011138 <__swbuf_r+0x70>
 80110e0:	686c      	ldr	r4, [r5, #4]
 80110e2:	69a3      	ldr	r3, [r4, #24]
 80110e4:	60a3      	str	r3, [r4, #8]
 80110e6:	89a3      	ldrh	r3, [r4, #12]
 80110e8:	071a      	lsls	r2, r3, #28
 80110ea:	d52f      	bpl.n	801114c <__swbuf_r+0x84>
 80110ec:	6923      	ldr	r3, [r4, #16]
 80110ee:	b36b      	cbz	r3, 801114c <__swbuf_r+0x84>
 80110f0:	6923      	ldr	r3, [r4, #16]
 80110f2:	6820      	ldr	r0, [r4, #0]
 80110f4:	1ac0      	subs	r0, r0, r3
 80110f6:	6963      	ldr	r3, [r4, #20]
 80110f8:	b2f6      	uxtb	r6, r6
 80110fa:	4283      	cmp	r3, r0
 80110fc:	4637      	mov	r7, r6
 80110fe:	dc04      	bgt.n	801110a <__swbuf_r+0x42>
 8011100:	4621      	mov	r1, r4
 8011102:	4628      	mov	r0, r5
 8011104:	f000 f93c 	bl	8011380 <_fflush_r>
 8011108:	bb30      	cbnz	r0, 8011158 <__swbuf_r+0x90>
 801110a:	68a3      	ldr	r3, [r4, #8]
 801110c:	3b01      	subs	r3, #1
 801110e:	60a3      	str	r3, [r4, #8]
 8011110:	6823      	ldr	r3, [r4, #0]
 8011112:	1c5a      	adds	r2, r3, #1
 8011114:	6022      	str	r2, [r4, #0]
 8011116:	701e      	strb	r6, [r3, #0]
 8011118:	6963      	ldr	r3, [r4, #20]
 801111a:	3001      	adds	r0, #1
 801111c:	4283      	cmp	r3, r0
 801111e:	d004      	beq.n	801112a <__swbuf_r+0x62>
 8011120:	89a3      	ldrh	r3, [r4, #12]
 8011122:	07db      	lsls	r3, r3, #31
 8011124:	d506      	bpl.n	8011134 <__swbuf_r+0x6c>
 8011126:	2e0a      	cmp	r6, #10
 8011128:	d104      	bne.n	8011134 <__swbuf_r+0x6c>
 801112a:	4621      	mov	r1, r4
 801112c:	4628      	mov	r0, r5
 801112e:	f000 f927 	bl	8011380 <_fflush_r>
 8011132:	b988      	cbnz	r0, 8011158 <__swbuf_r+0x90>
 8011134:	4638      	mov	r0, r7
 8011136:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011138:	4b0a      	ldr	r3, [pc, #40]	; (8011164 <__swbuf_r+0x9c>)
 801113a:	429c      	cmp	r4, r3
 801113c:	d101      	bne.n	8011142 <__swbuf_r+0x7a>
 801113e:	68ac      	ldr	r4, [r5, #8]
 8011140:	e7cf      	b.n	80110e2 <__swbuf_r+0x1a>
 8011142:	4b09      	ldr	r3, [pc, #36]	; (8011168 <__swbuf_r+0xa0>)
 8011144:	429c      	cmp	r4, r3
 8011146:	bf08      	it	eq
 8011148:	68ec      	ldreq	r4, [r5, #12]
 801114a:	e7ca      	b.n	80110e2 <__swbuf_r+0x1a>
 801114c:	4621      	mov	r1, r4
 801114e:	4628      	mov	r0, r5
 8011150:	f000 f81a 	bl	8011188 <__swsetup_r>
 8011154:	2800      	cmp	r0, #0
 8011156:	d0cb      	beq.n	80110f0 <__swbuf_r+0x28>
 8011158:	f04f 37ff 	mov.w	r7, #4294967295
 801115c:	e7ea      	b.n	8011134 <__swbuf_r+0x6c>
 801115e:	bf00      	nop
 8011160:	0801427c 	.word	0x0801427c
 8011164:	0801429c 	.word	0x0801429c
 8011168:	0801425c 	.word	0x0801425c

0801116c <__ascii_wctomb>:
 801116c:	b149      	cbz	r1, 8011182 <__ascii_wctomb+0x16>
 801116e:	2aff      	cmp	r2, #255	; 0xff
 8011170:	bf85      	ittet	hi
 8011172:	238a      	movhi	r3, #138	; 0x8a
 8011174:	6003      	strhi	r3, [r0, #0]
 8011176:	700a      	strbls	r2, [r1, #0]
 8011178:	f04f 30ff 	movhi.w	r0, #4294967295
 801117c:	bf98      	it	ls
 801117e:	2001      	movls	r0, #1
 8011180:	4770      	bx	lr
 8011182:	4608      	mov	r0, r1
 8011184:	4770      	bx	lr
	...

08011188 <__swsetup_r>:
 8011188:	4b32      	ldr	r3, [pc, #200]	; (8011254 <__swsetup_r+0xcc>)
 801118a:	b570      	push	{r4, r5, r6, lr}
 801118c:	681d      	ldr	r5, [r3, #0]
 801118e:	4606      	mov	r6, r0
 8011190:	460c      	mov	r4, r1
 8011192:	b125      	cbz	r5, 801119e <__swsetup_r+0x16>
 8011194:	69ab      	ldr	r3, [r5, #24]
 8011196:	b913      	cbnz	r3, 801119e <__swsetup_r+0x16>
 8011198:	4628      	mov	r0, r5
 801119a:	f000 f985 	bl	80114a8 <__sinit>
 801119e:	4b2e      	ldr	r3, [pc, #184]	; (8011258 <__swsetup_r+0xd0>)
 80111a0:	429c      	cmp	r4, r3
 80111a2:	d10f      	bne.n	80111c4 <__swsetup_r+0x3c>
 80111a4:	686c      	ldr	r4, [r5, #4]
 80111a6:	89a3      	ldrh	r3, [r4, #12]
 80111a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80111ac:	0719      	lsls	r1, r3, #28
 80111ae:	d42c      	bmi.n	801120a <__swsetup_r+0x82>
 80111b0:	06dd      	lsls	r5, r3, #27
 80111b2:	d411      	bmi.n	80111d8 <__swsetup_r+0x50>
 80111b4:	2309      	movs	r3, #9
 80111b6:	6033      	str	r3, [r6, #0]
 80111b8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80111bc:	81a3      	strh	r3, [r4, #12]
 80111be:	f04f 30ff 	mov.w	r0, #4294967295
 80111c2:	e03e      	b.n	8011242 <__swsetup_r+0xba>
 80111c4:	4b25      	ldr	r3, [pc, #148]	; (801125c <__swsetup_r+0xd4>)
 80111c6:	429c      	cmp	r4, r3
 80111c8:	d101      	bne.n	80111ce <__swsetup_r+0x46>
 80111ca:	68ac      	ldr	r4, [r5, #8]
 80111cc:	e7eb      	b.n	80111a6 <__swsetup_r+0x1e>
 80111ce:	4b24      	ldr	r3, [pc, #144]	; (8011260 <__swsetup_r+0xd8>)
 80111d0:	429c      	cmp	r4, r3
 80111d2:	bf08      	it	eq
 80111d4:	68ec      	ldreq	r4, [r5, #12]
 80111d6:	e7e6      	b.n	80111a6 <__swsetup_r+0x1e>
 80111d8:	0758      	lsls	r0, r3, #29
 80111da:	d512      	bpl.n	8011202 <__swsetup_r+0x7a>
 80111dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80111de:	b141      	cbz	r1, 80111f2 <__swsetup_r+0x6a>
 80111e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80111e4:	4299      	cmp	r1, r3
 80111e6:	d002      	beq.n	80111ee <__swsetup_r+0x66>
 80111e8:	4630      	mov	r0, r6
 80111ea:	f7ff fb31 	bl	8010850 <_free_r>
 80111ee:	2300      	movs	r3, #0
 80111f0:	6363      	str	r3, [r4, #52]	; 0x34
 80111f2:	89a3      	ldrh	r3, [r4, #12]
 80111f4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80111f8:	81a3      	strh	r3, [r4, #12]
 80111fa:	2300      	movs	r3, #0
 80111fc:	6063      	str	r3, [r4, #4]
 80111fe:	6923      	ldr	r3, [r4, #16]
 8011200:	6023      	str	r3, [r4, #0]
 8011202:	89a3      	ldrh	r3, [r4, #12]
 8011204:	f043 0308 	orr.w	r3, r3, #8
 8011208:	81a3      	strh	r3, [r4, #12]
 801120a:	6923      	ldr	r3, [r4, #16]
 801120c:	b94b      	cbnz	r3, 8011222 <__swsetup_r+0x9a>
 801120e:	89a3      	ldrh	r3, [r4, #12]
 8011210:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011214:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011218:	d003      	beq.n	8011222 <__swsetup_r+0x9a>
 801121a:	4621      	mov	r1, r4
 801121c:	4630      	mov	r0, r6
 801121e:	f000 fa09 	bl	8011634 <__smakebuf_r>
 8011222:	89a0      	ldrh	r0, [r4, #12]
 8011224:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011228:	f010 0301 	ands.w	r3, r0, #1
 801122c:	d00a      	beq.n	8011244 <__swsetup_r+0xbc>
 801122e:	2300      	movs	r3, #0
 8011230:	60a3      	str	r3, [r4, #8]
 8011232:	6963      	ldr	r3, [r4, #20]
 8011234:	425b      	negs	r3, r3
 8011236:	61a3      	str	r3, [r4, #24]
 8011238:	6923      	ldr	r3, [r4, #16]
 801123a:	b943      	cbnz	r3, 801124e <__swsetup_r+0xc6>
 801123c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8011240:	d1ba      	bne.n	80111b8 <__swsetup_r+0x30>
 8011242:	bd70      	pop	{r4, r5, r6, pc}
 8011244:	0781      	lsls	r1, r0, #30
 8011246:	bf58      	it	pl
 8011248:	6963      	ldrpl	r3, [r4, #20]
 801124a:	60a3      	str	r3, [r4, #8]
 801124c:	e7f4      	b.n	8011238 <__swsetup_r+0xb0>
 801124e:	2000      	movs	r0, #0
 8011250:	e7f7      	b.n	8011242 <__swsetup_r+0xba>
 8011252:	bf00      	nop
 8011254:	2000001c 	.word	0x2000001c
 8011258:	0801427c 	.word	0x0801427c
 801125c:	0801429c 	.word	0x0801429c
 8011260:	0801425c 	.word	0x0801425c

08011264 <abort>:
 8011264:	b508      	push	{r3, lr}
 8011266:	2006      	movs	r0, #6
 8011268:	f000 fa54 	bl	8011714 <raise>
 801126c:	2001      	movs	r0, #1
 801126e:	f7f2 fe1b 	bl	8003ea8 <_exit>
	...

08011274 <__sflush_r>:
 8011274:	898a      	ldrh	r2, [r1, #12]
 8011276:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801127a:	4605      	mov	r5, r0
 801127c:	0710      	lsls	r0, r2, #28
 801127e:	460c      	mov	r4, r1
 8011280:	d458      	bmi.n	8011334 <__sflush_r+0xc0>
 8011282:	684b      	ldr	r3, [r1, #4]
 8011284:	2b00      	cmp	r3, #0
 8011286:	dc05      	bgt.n	8011294 <__sflush_r+0x20>
 8011288:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801128a:	2b00      	cmp	r3, #0
 801128c:	dc02      	bgt.n	8011294 <__sflush_r+0x20>
 801128e:	2000      	movs	r0, #0
 8011290:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011294:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011296:	2e00      	cmp	r6, #0
 8011298:	d0f9      	beq.n	801128e <__sflush_r+0x1a>
 801129a:	2300      	movs	r3, #0
 801129c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80112a0:	682f      	ldr	r7, [r5, #0]
 80112a2:	602b      	str	r3, [r5, #0]
 80112a4:	d032      	beq.n	801130c <__sflush_r+0x98>
 80112a6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80112a8:	89a3      	ldrh	r3, [r4, #12]
 80112aa:	075a      	lsls	r2, r3, #29
 80112ac:	d505      	bpl.n	80112ba <__sflush_r+0x46>
 80112ae:	6863      	ldr	r3, [r4, #4]
 80112b0:	1ac0      	subs	r0, r0, r3
 80112b2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80112b4:	b10b      	cbz	r3, 80112ba <__sflush_r+0x46>
 80112b6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80112b8:	1ac0      	subs	r0, r0, r3
 80112ba:	2300      	movs	r3, #0
 80112bc:	4602      	mov	r2, r0
 80112be:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80112c0:	6a21      	ldr	r1, [r4, #32]
 80112c2:	4628      	mov	r0, r5
 80112c4:	47b0      	blx	r6
 80112c6:	1c43      	adds	r3, r0, #1
 80112c8:	89a3      	ldrh	r3, [r4, #12]
 80112ca:	d106      	bne.n	80112da <__sflush_r+0x66>
 80112cc:	6829      	ldr	r1, [r5, #0]
 80112ce:	291d      	cmp	r1, #29
 80112d0:	d82c      	bhi.n	801132c <__sflush_r+0xb8>
 80112d2:	4a2a      	ldr	r2, [pc, #168]	; (801137c <__sflush_r+0x108>)
 80112d4:	40ca      	lsrs	r2, r1
 80112d6:	07d6      	lsls	r6, r2, #31
 80112d8:	d528      	bpl.n	801132c <__sflush_r+0xb8>
 80112da:	2200      	movs	r2, #0
 80112dc:	6062      	str	r2, [r4, #4]
 80112de:	04d9      	lsls	r1, r3, #19
 80112e0:	6922      	ldr	r2, [r4, #16]
 80112e2:	6022      	str	r2, [r4, #0]
 80112e4:	d504      	bpl.n	80112f0 <__sflush_r+0x7c>
 80112e6:	1c42      	adds	r2, r0, #1
 80112e8:	d101      	bne.n	80112ee <__sflush_r+0x7a>
 80112ea:	682b      	ldr	r3, [r5, #0]
 80112ec:	b903      	cbnz	r3, 80112f0 <__sflush_r+0x7c>
 80112ee:	6560      	str	r0, [r4, #84]	; 0x54
 80112f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80112f2:	602f      	str	r7, [r5, #0]
 80112f4:	2900      	cmp	r1, #0
 80112f6:	d0ca      	beq.n	801128e <__sflush_r+0x1a>
 80112f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80112fc:	4299      	cmp	r1, r3
 80112fe:	d002      	beq.n	8011306 <__sflush_r+0x92>
 8011300:	4628      	mov	r0, r5
 8011302:	f7ff faa5 	bl	8010850 <_free_r>
 8011306:	2000      	movs	r0, #0
 8011308:	6360      	str	r0, [r4, #52]	; 0x34
 801130a:	e7c1      	b.n	8011290 <__sflush_r+0x1c>
 801130c:	6a21      	ldr	r1, [r4, #32]
 801130e:	2301      	movs	r3, #1
 8011310:	4628      	mov	r0, r5
 8011312:	47b0      	blx	r6
 8011314:	1c41      	adds	r1, r0, #1
 8011316:	d1c7      	bne.n	80112a8 <__sflush_r+0x34>
 8011318:	682b      	ldr	r3, [r5, #0]
 801131a:	2b00      	cmp	r3, #0
 801131c:	d0c4      	beq.n	80112a8 <__sflush_r+0x34>
 801131e:	2b1d      	cmp	r3, #29
 8011320:	d001      	beq.n	8011326 <__sflush_r+0xb2>
 8011322:	2b16      	cmp	r3, #22
 8011324:	d101      	bne.n	801132a <__sflush_r+0xb6>
 8011326:	602f      	str	r7, [r5, #0]
 8011328:	e7b1      	b.n	801128e <__sflush_r+0x1a>
 801132a:	89a3      	ldrh	r3, [r4, #12]
 801132c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011330:	81a3      	strh	r3, [r4, #12]
 8011332:	e7ad      	b.n	8011290 <__sflush_r+0x1c>
 8011334:	690f      	ldr	r7, [r1, #16]
 8011336:	2f00      	cmp	r7, #0
 8011338:	d0a9      	beq.n	801128e <__sflush_r+0x1a>
 801133a:	0793      	lsls	r3, r2, #30
 801133c:	680e      	ldr	r6, [r1, #0]
 801133e:	bf08      	it	eq
 8011340:	694b      	ldreq	r3, [r1, #20]
 8011342:	600f      	str	r7, [r1, #0]
 8011344:	bf18      	it	ne
 8011346:	2300      	movne	r3, #0
 8011348:	eba6 0807 	sub.w	r8, r6, r7
 801134c:	608b      	str	r3, [r1, #8]
 801134e:	f1b8 0f00 	cmp.w	r8, #0
 8011352:	dd9c      	ble.n	801128e <__sflush_r+0x1a>
 8011354:	6a21      	ldr	r1, [r4, #32]
 8011356:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011358:	4643      	mov	r3, r8
 801135a:	463a      	mov	r2, r7
 801135c:	4628      	mov	r0, r5
 801135e:	47b0      	blx	r6
 8011360:	2800      	cmp	r0, #0
 8011362:	dc06      	bgt.n	8011372 <__sflush_r+0xfe>
 8011364:	89a3      	ldrh	r3, [r4, #12]
 8011366:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801136a:	81a3      	strh	r3, [r4, #12]
 801136c:	f04f 30ff 	mov.w	r0, #4294967295
 8011370:	e78e      	b.n	8011290 <__sflush_r+0x1c>
 8011372:	4407      	add	r7, r0
 8011374:	eba8 0800 	sub.w	r8, r8, r0
 8011378:	e7e9      	b.n	801134e <__sflush_r+0xda>
 801137a:	bf00      	nop
 801137c:	20400001 	.word	0x20400001

08011380 <_fflush_r>:
 8011380:	b538      	push	{r3, r4, r5, lr}
 8011382:	690b      	ldr	r3, [r1, #16]
 8011384:	4605      	mov	r5, r0
 8011386:	460c      	mov	r4, r1
 8011388:	b913      	cbnz	r3, 8011390 <_fflush_r+0x10>
 801138a:	2500      	movs	r5, #0
 801138c:	4628      	mov	r0, r5
 801138e:	bd38      	pop	{r3, r4, r5, pc}
 8011390:	b118      	cbz	r0, 801139a <_fflush_r+0x1a>
 8011392:	6983      	ldr	r3, [r0, #24]
 8011394:	b90b      	cbnz	r3, 801139a <_fflush_r+0x1a>
 8011396:	f000 f887 	bl	80114a8 <__sinit>
 801139a:	4b14      	ldr	r3, [pc, #80]	; (80113ec <_fflush_r+0x6c>)
 801139c:	429c      	cmp	r4, r3
 801139e:	d11b      	bne.n	80113d8 <_fflush_r+0x58>
 80113a0:	686c      	ldr	r4, [r5, #4]
 80113a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80113a6:	2b00      	cmp	r3, #0
 80113a8:	d0ef      	beq.n	801138a <_fflush_r+0xa>
 80113aa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80113ac:	07d0      	lsls	r0, r2, #31
 80113ae:	d404      	bmi.n	80113ba <_fflush_r+0x3a>
 80113b0:	0599      	lsls	r1, r3, #22
 80113b2:	d402      	bmi.n	80113ba <_fflush_r+0x3a>
 80113b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80113b6:	f000 f915 	bl	80115e4 <__retarget_lock_acquire_recursive>
 80113ba:	4628      	mov	r0, r5
 80113bc:	4621      	mov	r1, r4
 80113be:	f7ff ff59 	bl	8011274 <__sflush_r>
 80113c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80113c4:	07da      	lsls	r2, r3, #31
 80113c6:	4605      	mov	r5, r0
 80113c8:	d4e0      	bmi.n	801138c <_fflush_r+0xc>
 80113ca:	89a3      	ldrh	r3, [r4, #12]
 80113cc:	059b      	lsls	r3, r3, #22
 80113ce:	d4dd      	bmi.n	801138c <_fflush_r+0xc>
 80113d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80113d2:	f000 f908 	bl	80115e6 <__retarget_lock_release_recursive>
 80113d6:	e7d9      	b.n	801138c <_fflush_r+0xc>
 80113d8:	4b05      	ldr	r3, [pc, #20]	; (80113f0 <_fflush_r+0x70>)
 80113da:	429c      	cmp	r4, r3
 80113dc:	d101      	bne.n	80113e2 <_fflush_r+0x62>
 80113de:	68ac      	ldr	r4, [r5, #8]
 80113e0:	e7df      	b.n	80113a2 <_fflush_r+0x22>
 80113e2:	4b04      	ldr	r3, [pc, #16]	; (80113f4 <_fflush_r+0x74>)
 80113e4:	429c      	cmp	r4, r3
 80113e6:	bf08      	it	eq
 80113e8:	68ec      	ldreq	r4, [r5, #12]
 80113ea:	e7da      	b.n	80113a2 <_fflush_r+0x22>
 80113ec:	0801427c 	.word	0x0801427c
 80113f0:	0801429c 	.word	0x0801429c
 80113f4:	0801425c 	.word	0x0801425c

080113f8 <std>:
 80113f8:	2300      	movs	r3, #0
 80113fa:	b510      	push	{r4, lr}
 80113fc:	4604      	mov	r4, r0
 80113fe:	e9c0 3300 	strd	r3, r3, [r0]
 8011402:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011406:	6083      	str	r3, [r0, #8]
 8011408:	8181      	strh	r1, [r0, #12]
 801140a:	6643      	str	r3, [r0, #100]	; 0x64
 801140c:	81c2      	strh	r2, [r0, #14]
 801140e:	6183      	str	r3, [r0, #24]
 8011410:	4619      	mov	r1, r3
 8011412:	2208      	movs	r2, #8
 8011414:	305c      	adds	r0, #92	; 0x5c
 8011416:	f7fd fb69 	bl	800eaec <memset>
 801141a:	4b05      	ldr	r3, [pc, #20]	; (8011430 <std+0x38>)
 801141c:	6263      	str	r3, [r4, #36]	; 0x24
 801141e:	4b05      	ldr	r3, [pc, #20]	; (8011434 <std+0x3c>)
 8011420:	62a3      	str	r3, [r4, #40]	; 0x28
 8011422:	4b05      	ldr	r3, [pc, #20]	; (8011438 <std+0x40>)
 8011424:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011426:	4b05      	ldr	r3, [pc, #20]	; (801143c <std+0x44>)
 8011428:	6224      	str	r4, [r4, #32]
 801142a:	6323      	str	r3, [r4, #48]	; 0x30
 801142c:	bd10      	pop	{r4, pc}
 801142e:	bf00      	nop
 8011430:	0801174d 	.word	0x0801174d
 8011434:	0801176f 	.word	0x0801176f
 8011438:	080117a7 	.word	0x080117a7
 801143c:	080117cb 	.word	0x080117cb

08011440 <_cleanup_r>:
 8011440:	4901      	ldr	r1, [pc, #4]	; (8011448 <_cleanup_r+0x8>)
 8011442:	f000 b8af 	b.w	80115a4 <_fwalk_reent>
 8011446:	bf00      	nop
 8011448:	08011381 	.word	0x08011381

0801144c <__sfmoreglue>:
 801144c:	b570      	push	{r4, r5, r6, lr}
 801144e:	2268      	movs	r2, #104	; 0x68
 8011450:	1e4d      	subs	r5, r1, #1
 8011452:	4355      	muls	r5, r2
 8011454:	460e      	mov	r6, r1
 8011456:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801145a:	f7ff fa65 	bl	8010928 <_malloc_r>
 801145e:	4604      	mov	r4, r0
 8011460:	b140      	cbz	r0, 8011474 <__sfmoreglue+0x28>
 8011462:	2100      	movs	r1, #0
 8011464:	e9c0 1600 	strd	r1, r6, [r0]
 8011468:	300c      	adds	r0, #12
 801146a:	60a0      	str	r0, [r4, #8]
 801146c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8011470:	f7fd fb3c 	bl	800eaec <memset>
 8011474:	4620      	mov	r0, r4
 8011476:	bd70      	pop	{r4, r5, r6, pc}

08011478 <__sfp_lock_acquire>:
 8011478:	4801      	ldr	r0, [pc, #4]	; (8011480 <__sfp_lock_acquire+0x8>)
 801147a:	f000 b8b3 	b.w	80115e4 <__retarget_lock_acquire_recursive>
 801147e:	bf00      	nop
 8011480:	20006895 	.word	0x20006895

08011484 <__sfp_lock_release>:
 8011484:	4801      	ldr	r0, [pc, #4]	; (801148c <__sfp_lock_release+0x8>)
 8011486:	f000 b8ae 	b.w	80115e6 <__retarget_lock_release_recursive>
 801148a:	bf00      	nop
 801148c:	20006895 	.word	0x20006895

08011490 <__sinit_lock_acquire>:
 8011490:	4801      	ldr	r0, [pc, #4]	; (8011498 <__sinit_lock_acquire+0x8>)
 8011492:	f000 b8a7 	b.w	80115e4 <__retarget_lock_acquire_recursive>
 8011496:	bf00      	nop
 8011498:	20006896 	.word	0x20006896

0801149c <__sinit_lock_release>:
 801149c:	4801      	ldr	r0, [pc, #4]	; (80114a4 <__sinit_lock_release+0x8>)
 801149e:	f000 b8a2 	b.w	80115e6 <__retarget_lock_release_recursive>
 80114a2:	bf00      	nop
 80114a4:	20006896 	.word	0x20006896

080114a8 <__sinit>:
 80114a8:	b510      	push	{r4, lr}
 80114aa:	4604      	mov	r4, r0
 80114ac:	f7ff fff0 	bl	8011490 <__sinit_lock_acquire>
 80114b0:	69a3      	ldr	r3, [r4, #24]
 80114b2:	b11b      	cbz	r3, 80114bc <__sinit+0x14>
 80114b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80114b8:	f7ff bff0 	b.w	801149c <__sinit_lock_release>
 80114bc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80114c0:	6523      	str	r3, [r4, #80]	; 0x50
 80114c2:	4b13      	ldr	r3, [pc, #76]	; (8011510 <__sinit+0x68>)
 80114c4:	4a13      	ldr	r2, [pc, #76]	; (8011514 <__sinit+0x6c>)
 80114c6:	681b      	ldr	r3, [r3, #0]
 80114c8:	62a2      	str	r2, [r4, #40]	; 0x28
 80114ca:	42a3      	cmp	r3, r4
 80114cc:	bf04      	itt	eq
 80114ce:	2301      	moveq	r3, #1
 80114d0:	61a3      	streq	r3, [r4, #24]
 80114d2:	4620      	mov	r0, r4
 80114d4:	f000 f820 	bl	8011518 <__sfp>
 80114d8:	6060      	str	r0, [r4, #4]
 80114da:	4620      	mov	r0, r4
 80114dc:	f000 f81c 	bl	8011518 <__sfp>
 80114e0:	60a0      	str	r0, [r4, #8]
 80114e2:	4620      	mov	r0, r4
 80114e4:	f000 f818 	bl	8011518 <__sfp>
 80114e8:	2200      	movs	r2, #0
 80114ea:	60e0      	str	r0, [r4, #12]
 80114ec:	2104      	movs	r1, #4
 80114ee:	6860      	ldr	r0, [r4, #4]
 80114f0:	f7ff ff82 	bl	80113f8 <std>
 80114f4:	68a0      	ldr	r0, [r4, #8]
 80114f6:	2201      	movs	r2, #1
 80114f8:	2109      	movs	r1, #9
 80114fa:	f7ff ff7d 	bl	80113f8 <std>
 80114fe:	68e0      	ldr	r0, [r4, #12]
 8011500:	2202      	movs	r2, #2
 8011502:	2112      	movs	r1, #18
 8011504:	f7ff ff78 	bl	80113f8 <std>
 8011508:	2301      	movs	r3, #1
 801150a:	61a3      	str	r3, [r4, #24]
 801150c:	e7d2      	b.n	80114b4 <__sinit+0xc>
 801150e:	bf00      	nop
 8011510:	08013ee4 	.word	0x08013ee4
 8011514:	08011441 	.word	0x08011441

08011518 <__sfp>:
 8011518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801151a:	4607      	mov	r7, r0
 801151c:	f7ff ffac 	bl	8011478 <__sfp_lock_acquire>
 8011520:	4b1e      	ldr	r3, [pc, #120]	; (801159c <__sfp+0x84>)
 8011522:	681e      	ldr	r6, [r3, #0]
 8011524:	69b3      	ldr	r3, [r6, #24]
 8011526:	b913      	cbnz	r3, 801152e <__sfp+0x16>
 8011528:	4630      	mov	r0, r6
 801152a:	f7ff ffbd 	bl	80114a8 <__sinit>
 801152e:	3648      	adds	r6, #72	; 0x48
 8011530:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8011534:	3b01      	subs	r3, #1
 8011536:	d503      	bpl.n	8011540 <__sfp+0x28>
 8011538:	6833      	ldr	r3, [r6, #0]
 801153a:	b30b      	cbz	r3, 8011580 <__sfp+0x68>
 801153c:	6836      	ldr	r6, [r6, #0]
 801153e:	e7f7      	b.n	8011530 <__sfp+0x18>
 8011540:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8011544:	b9d5      	cbnz	r5, 801157c <__sfp+0x64>
 8011546:	4b16      	ldr	r3, [pc, #88]	; (80115a0 <__sfp+0x88>)
 8011548:	60e3      	str	r3, [r4, #12]
 801154a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801154e:	6665      	str	r5, [r4, #100]	; 0x64
 8011550:	f000 f847 	bl	80115e2 <__retarget_lock_init_recursive>
 8011554:	f7ff ff96 	bl	8011484 <__sfp_lock_release>
 8011558:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801155c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8011560:	6025      	str	r5, [r4, #0]
 8011562:	61a5      	str	r5, [r4, #24]
 8011564:	2208      	movs	r2, #8
 8011566:	4629      	mov	r1, r5
 8011568:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801156c:	f7fd fabe 	bl	800eaec <memset>
 8011570:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8011574:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8011578:	4620      	mov	r0, r4
 801157a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801157c:	3468      	adds	r4, #104	; 0x68
 801157e:	e7d9      	b.n	8011534 <__sfp+0x1c>
 8011580:	2104      	movs	r1, #4
 8011582:	4638      	mov	r0, r7
 8011584:	f7ff ff62 	bl	801144c <__sfmoreglue>
 8011588:	4604      	mov	r4, r0
 801158a:	6030      	str	r0, [r6, #0]
 801158c:	2800      	cmp	r0, #0
 801158e:	d1d5      	bne.n	801153c <__sfp+0x24>
 8011590:	f7ff ff78 	bl	8011484 <__sfp_lock_release>
 8011594:	230c      	movs	r3, #12
 8011596:	603b      	str	r3, [r7, #0]
 8011598:	e7ee      	b.n	8011578 <__sfp+0x60>
 801159a:	bf00      	nop
 801159c:	08013ee4 	.word	0x08013ee4
 80115a0:	ffff0001 	.word	0xffff0001

080115a4 <_fwalk_reent>:
 80115a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80115a8:	4606      	mov	r6, r0
 80115aa:	4688      	mov	r8, r1
 80115ac:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80115b0:	2700      	movs	r7, #0
 80115b2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80115b6:	f1b9 0901 	subs.w	r9, r9, #1
 80115ba:	d505      	bpl.n	80115c8 <_fwalk_reent+0x24>
 80115bc:	6824      	ldr	r4, [r4, #0]
 80115be:	2c00      	cmp	r4, #0
 80115c0:	d1f7      	bne.n	80115b2 <_fwalk_reent+0xe>
 80115c2:	4638      	mov	r0, r7
 80115c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80115c8:	89ab      	ldrh	r3, [r5, #12]
 80115ca:	2b01      	cmp	r3, #1
 80115cc:	d907      	bls.n	80115de <_fwalk_reent+0x3a>
 80115ce:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80115d2:	3301      	adds	r3, #1
 80115d4:	d003      	beq.n	80115de <_fwalk_reent+0x3a>
 80115d6:	4629      	mov	r1, r5
 80115d8:	4630      	mov	r0, r6
 80115da:	47c0      	blx	r8
 80115dc:	4307      	orrs	r7, r0
 80115de:	3568      	adds	r5, #104	; 0x68
 80115e0:	e7e9      	b.n	80115b6 <_fwalk_reent+0x12>

080115e2 <__retarget_lock_init_recursive>:
 80115e2:	4770      	bx	lr

080115e4 <__retarget_lock_acquire_recursive>:
 80115e4:	4770      	bx	lr

080115e6 <__retarget_lock_release_recursive>:
 80115e6:	4770      	bx	lr

080115e8 <__swhatbuf_r>:
 80115e8:	b570      	push	{r4, r5, r6, lr}
 80115ea:	460e      	mov	r6, r1
 80115ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80115f0:	2900      	cmp	r1, #0
 80115f2:	b096      	sub	sp, #88	; 0x58
 80115f4:	4614      	mov	r4, r2
 80115f6:	461d      	mov	r5, r3
 80115f8:	da08      	bge.n	801160c <__swhatbuf_r+0x24>
 80115fa:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80115fe:	2200      	movs	r2, #0
 8011600:	602a      	str	r2, [r5, #0]
 8011602:	061a      	lsls	r2, r3, #24
 8011604:	d410      	bmi.n	8011628 <__swhatbuf_r+0x40>
 8011606:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801160a:	e00e      	b.n	801162a <__swhatbuf_r+0x42>
 801160c:	466a      	mov	r2, sp
 801160e:	f000 f903 	bl	8011818 <_fstat_r>
 8011612:	2800      	cmp	r0, #0
 8011614:	dbf1      	blt.n	80115fa <__swhatbuf_r+0x12>
 8011616:	9a01      	ldr	r2, [sp, #4]
 8011618:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801161c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011620:	425a      	negs	r2, r3
 8011622:	415a      	adcs	r2, r3
 8011624:	602a      	str	r2, [r5, #0]
 8011626:	e7ee      	b.n	8011606 <__swhatbuf_r+0x1e>
 8011628:	2340      	movs	r3, #64	; 0x40
 801162a:	2000      	movs	r0, #0
 801162c:	6023      	str	r3, [r4, #0]
 801162e:	b016      	add	sp, #88	; 0x58
 8011630:	bd70      	pop	{r4, r5, r6, pc}
	...

08011634 <__smakebuf_r>:
 8011634:	898b      	ldrh	r3, [r1, #12]
 8011636:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011638:	079d      	lsls	r5, r3, #30
 801163a:	4606      	mov	r6, r0
 801163c:	460c      	mov	r4, r1
 801163e:	d507      	bpl.n	8011650 <__smakebuf_r+0x1c>
 8011640:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011644:	6023      	str	r3, [r4, #0]
 8011646:	6123      	str	r3, [r4, #16]
 8011648:	2301      	movs	r3, #1
 801164a:	6163      	str	r3, [r4, #20]
 801164c:	b002      	add	sp, #8
 801164e:	bd70      	pop	{r4, r5, r6, pc}
 8011650:	ab01      	add	r3, sp, #4
 8011652:	466a      	mov	r2, sp
 8011654:	f7ff ffc8 	bl	80115e8 <__swhatbuf_r>
 8011658:	9900      	ldr	r1, [sp, #0]
 801165a:	4605      	mov	r5, r0
 801165c:	4630      	mov	r0, r6
 801165e:	f7ff f963 	bl	8010928 <_malloc_r>
 8011662:	b948      	cbnz	r0, 8011678 <__smakebuf_r+0x44>
 8011664:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011668:	059a      	lsls	r2, r3, #22
 801166a:	d4ef      	bmi.n	801164c <__smakebuf_r+0x18>
 801166c:	f023 0303 	bic.w	r3, r3, #3
 8011670:	f043 0302 	orr.w	r3, r3, #2
 8011674:	81a3      	strh	r3, [r4, #12]
 8011676:	e7e3      	b.n	8011640 <__smakebuf_r+0xc>
 8011678:	4b0d      	ldr	r3, [pc, #52]	; (80116b0 <__smakebuf_r+0x7c>)
 801167a:	62b3      	str	r3, [r6, #40]	; 0x28
 801167c:	89a3      	ldrh	r3, [r4, #12]
 801167e:	6020      	str	r0, [r4, #0]
 8011680:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011684:	81a3      	strh	r3, [r4, #12]
 8011686:	9b00      	ldr	r3, [sp, #0]
 8011688:	6163      	str	r3, [r4, #20]
 801168a:	9b01      	ldr	r3, [sp, #4]
 801168c:	6120      	str	r0, [r4, #16]
 801168e:	b15b      	cbz	r3, 80116a8 <__smakebuf_r+0x74>
 8011690:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011694:	4630      	mov	r0, r6
 8011696:	f000 f8d1 	bl	801183c <_isatty_r>
 801169a:	b128      	cbz	r0, 80116a8 <__smakebuf_r+0x74>
 801169c:	89a3      	ldrh	r3, [r4, #12]
 801169e:	f023 0303 	bic.w	r3, r3, #3
 80116a2:	f043 0301 	orr.w	r3, r3, #1
 80116a6:	81a3      	strh	r3, [r4, #12]
 80116a8:	89a0      	ldrh	r0, [r4, #12]
 80116aa:	4305      	orrs	r5, r0
 80116ac:	81a5      	strh	r5, [r4, #12]
 80116ae:	e7cd      	b.n	801164c <__smakebuf_r+0x18>
 80116b0:	08011441 	.word	0x08011441

080116b4 <_malloc_usable_size_r>:
 80116b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80116b8:	1f18      	subs	r0, r3, #4
 80116ba:	2b00      	cmp	r3, #0
 80116bc:	bfbc      	itt	lt
 80116be:	580b      	ldrlt	r3, [r1, r0]
 80116c0:	18c0      	addlt	r0, r0, r3
 80116c2:	4770      	bx	lr

080116c4 <_raise_r>:
 80116c4:	291f      	cmp	r1, #31
 80116c6:	b538      	push	{r3, r4, r5, lr}
 80116c8:	4604      	mov	r4, r0
 80116ca:	460d      	mov	r5, r1
 80116cc:	d904      	bls.n	80116d8 <_raise_r+0x14>
 80116ce:	2316      	movs	r3, #22
 80116d0:	6003      	str	r3, [r0, #0]
 80116d2:	f04f 30ff 	mov.w	r0, #4294967295
 80116d6:	bd38      	pop	{r3, r4, r5, pc}
 80116d8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80116da:	b112      	cbz	r2, 80116e2 <_raise_r+0x1e>
 80116dc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80116e0:	b94b      	cbnz	r3, 80116f6 <_raise_r+0x32>
 80116e2:	4620      	mov	r0, r4
 80116e4:	f000 f830 	bl	8011748 <_getpid_r>
 80116e8:	462a      	mov	r2, r5
 80116ea:	4601      	mov	r1, r0
 80116ec:	4620      	mov	r0, r4
 80116ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80116f2:	f000 b817 	b.w	8011724 <_kill_r>
 80116f6:	2b01      	cmp	r3, #1
 80116f8:	d00a      	beq.n	8011710 <_raise_r+0x4c>
 80116fa:	1c59      	adds	r1, r3, #1
 80116fc:	d103      	bne.n	8011706 <_raise_r+0x42>
 80116fe:	2316      	movs	r3, #22
 8011700:	6003      	str	r3, [r0, #0]
 8011702:	2001      	movs	r0, #1
 8011704:	e7e7      	b.n	80116d6 <_raise_r+0x12>
 8011706:	2400      	movs	r4, #0
 8011708:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801170c:	4628      	mov	r0, r5
 801170e:	4798      	blx	r3
 8011710:	2000      	movs	r0, #0
 8011712:	e7e0      	b.n	80116d6 <_raise_r+0x12>

08011714 <raise>:
 8011714:	4b02      	ldr	r3, [pc, #8]	; (8011720 <raise+0xc>)
 8011716:	4601      	mov	r1, r0
 8011718:	6818      	ldr	r0, [r3, #0]
 801171a:	f7ff bfd3 	b.w	80116c4 <_raise_r>
 801171e:	bf00      	nop
 8011720:	2000001c 	.word	0x2000001c

08011724 <_kill_r>:
 8011724:	b538      	push	{r3, r4, r5, lr}
 8011726:	4d07      	ldr	r5, [pc, #28]	; (8011744 <_kill_r+0x20>)
 8011728:	2300      	movs	r3, #0
 801172a:	4604      	mov	r4, r0
 801172c:	4608      	mov	r0, r1
 801172e:	4611      	mov	r1, r2
 8011730:	602b      	str	r3, [r5, #0]
 8011732:	f7f2 fba9 	bl	8003e88 <_kill>
 8011736:	1c43      	adds	r3, r0, #1
 8011738:	d102      	bne.n	8011740 <_kill_r+0x1c>
 801173a:	682b      	ldr	r3, [r5, #0]
 801173c:	b103      	cbz	r3, 8011740 <_kill_r+0x1c>
 801173e:	6023      	str	r3, [r4, #0]
 8011740:	bd38      	pop	{r3, r4, r5, pc}
 8011742:	bf00      	nop
 8011744:	20006890 	.word	0x20006890

08011748 <_getpid_r>:
 8011748:	f7f2 bb96 	b.w	8003e78 <_getpid>

0801174c <__sread>:
 801174c:	b510      	push	{r4, lr}
 801174e:	460c      	mov	r4, r1
 8011750:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011754:	f000 f894 	bl	8011880 <_read_r>
 8011758:	2800      	cmp	r0, #0
 801175a:	bfab      	itete	ge
 801175c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801175e:	89a3      	ldrhlt	r3, [r4, #12]
 8011760:	181b      	addge	r3, r3, r0
 8011762:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011766:	bfac      	ite	ge
 8011768:	6563      	strge	r3, [r4, #84]	; 0x54
 801176a:	81a3      	strhlt	r3, [r4, #12]
 801176c:	bd10      	pop	{r4, pc}

0801176e <__swrite>:
 801176e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011772:	461f      	mov	r7, r3
 8011774:	898b      	ldrh	r3, [r1, #12]
 8011776:	05db      	lsls	r3, r3, #23
 8011778:	4605      	mov	r5, r0
 801177a:	460c      	mov	r4, r1
 801177c:	4616      	mov	r6, r2
 801177e:	d505      	bpl.n	801178c <__swrite+0x1e>
 8011780:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011784:	2302      	movs	r3, #2
 8011786:	2200      	movs	r2, #0
 8011788:	f000 f868 	bl	801185c <_lseek_r>
 801178c:	89a3      	ldrh	r3, [r4, #12]
 801178e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011792:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011796:	81a3      	strh	r3, [r4, #12]
 8011798:	4632      	mov	r2, r6
 801179a:	463b      	mov	r3, r7
 801179c:	4628      	mov	r0, r5
 801179e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80117a2:	f000 b817 	b.w	80117d4 <_write_r>

080117a6 <__sseek>:
 80117a6:	b510      	push	{r4, lr}
 80117a8:	460c      	mov	r4, r1
 80117aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80117ae:	f000 f855 	bl	801185c <_lseek_r>
 80117b2:	1c43      	adds	r3, r0, #1
 80117b4:	89a3      	ldrh	r3, [r4, #12]
 80117b6:	bf15      	itete	ne
 80117b8:	6560      	strne	r0, [r4, #84]	; 0x54
 80117ba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80117be:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80117c2:	81a3      	strheq	r3, [r4, #12]
 80117c4:	bf18      	it	ne
 80117c6:	81a3      	strhne	r3, [r4, #12]
 80117c8:	bd10      	pop	{r4, pc}

080117ca <__sclose>:
 80117ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80117ce:	f000 b813 	b.w	80117f8 <_close_r>
	...

080117d4 <_write_r>:
 80117d4:	b538      	push	{r3, r4, r5, lr}
 80117d6:	4d07      	ldr	r5, [pc, #28]	; (80117f4 <_write_r+0x20>)
 80117d8:	4604      	mov	r4, r0
 80117da:	4608      	mov	r0, r1
 80117dc:	4611      	mov	r1, r2
 80117de:	2200      	movs	r2, #0
 80117e0:	602a      	str	r2, [r5, #0]
 80117e2:	461a      	mov	r2, r3
 80117e4:	f7f2 fb87 	bl	8003ef6 <_write>
 80117e8:	1c43      	adds	r3, r0, #1
 80117ea:	d102      	bne.n	80117f2 <_write_r+0x1e>
 80117ec:	682b      	ldr	r3, [r5, #0]
 80117ee:	b103      	cbz	r3, 80117f2 <_write_r+0x1e>
 80117f0:	6023      	str	r3, [r4, #0]
 80117f2:	bd38      	pop	{r3, r4, r5, pc}
 80117f4:	20006890 	.word	0x20006890

080117f8 <_close_r>:
 80117f8:	b538      	push	{r3, r4, r5, lr}
 80117fa:	4d06      	ldr	r5, [pc, #24]	; (8011814 <_close_r+0x1c>)
 80117fc:	2300      	movs	r3, #0
 80117fe:	4604      	mov	r4, r0
 8011800:	4608      	mov	r0, r1
 8011802:	602b      	str	r3, [r5, #0]
 8011804:	f7f2 fb93 	bl	8003f2e <_close>
 8011808:	1c43      	adds	r3, r0, #1
 801180a:	d102      	bne.n	8011812 <_close_r+0x1a>
 801180c:	682b      	ldr	r3, [r5, #0]
 801180e:	b103      	cbz	r3, 8011812 <_close_r+0x1a>
 8011810:	6023      	str	r3, [r4, #0]
 8011812:	bd38      	pop	{r3, r4, r5, pc}
 8011814:	20006890 	.word	0x20006890

08011818 <_fstat_r>:
 8011818:	b538      	push	{r3, r4, r5, lr}
 801181a:	4d07      	ldr	r5, [pc, #28]	; (8011838 <_fstat_r+0x20>)
 801181c:	2300      	movs	r3, #0
 801181e:	4604      	mov	r4, r0
 8011820:	4608      	mov	r0, r1
 8011822:	4611      	mov	r1, r2
 8011824:	602b      	str	r3, [r5, #0]
 8011826:	f7f2 fb8e 	bl	8003f46 <_fstat>
 801182a:	1c43      	adds	r3, r0, #1
 801182c:	d102      	bne.n	8011834 <_fstat_r+0x1c>
 801182e:	682b      	ldr	r3, [r5, #0]
 8011830:	b103      	cbz	r3, 8011834 <_fstat_r+0x1c>
 8011832:	6023      	str	r3, [r4, #0]
 8011834:	bd38      	pop	{r3, r4, r5, pc}
 8011836:	bf00      	nop
 8011838:	20006890 	.word	0x20006890

0801183c <_isatty_r>:
 801183c:	b538      	push	{r3, r4, r5, lr}
 801183e:	4d06      	ldr	r5, [pc, #24]	; (8011858 <_isatty_r+0x1c>)
 8011840:	2300      	movs	r3, #0
 8011842:	4604      	mov	r4, r0
 8011844:	4608      	mov	r0, r1
 8011846:	602b      	str	r3, [r5, #0]
 8011848:	f7f2 fb8d 	bl	8003f66 <_isatty>
 801184c:	1c43      	adds	r3, r0, #1
 801184e:	d102      	bne.n	8011856 <_isatty_r+0x1a>
 8011850:	682b      	ldr	r3, [r5, #0]
 8011852:	b103      	cbz	r3, 8011856 <_isatty_r+0x1a>
 8011854:	6023      	str	r3, [r4, #0]
 8011856:	bd38      	pop	{r3, r4, r5, pc}
 8011858:	20006890 	.word	0x20006890

0801185c <_lseek_r>:
 801185c:	b538      	push	{r3, r4, r5, lr}
 801185e:	4d07      	ldr	r5, [pc, #28]	; (801187c <_lseek_r+0x20>)
 8011860:	4604      	mov	r4, r0
 8011862:	4608      	mov	r0, r1
 8011864:	4611      	mov	r1, r2
 8011866:	2200      	movs	r2, #0
 8011868:	602a      	str	r2, [r5, #0]
 801186a:	461a      	mov	r2, r3
 801186c:	f7f2 fb86 	bl	8003f7c <_lseek>
 8011870:	1c43      	adds	r3, r0, #1
 8011872:	d102      	bne.n	801187a <_lseek_r+0x1e>
 8011874:	682b      	ldr	r3, [r5, #0]
 8011876:	b103      	cbz	r3, 801187a <_lseek_r+0x1e>
 8011878:	6023      	str	r3, [r4, #0]
 801187a:	bd38      	pop	{r3, r4, r5, pc}
 801187c:	20006890 	.word	0x20006890

08011880 <_read_r>:
 8011880:	b538      	push	{r3, r4, r5, lr}
 8011882:	4d07      	ldr	r5, [pc, #28]	; (80118a0 <_read_r+0x20>)
 8011884:	4604      	mov	r4, r0
 8011886:	4608      	mov	r0, r1
 8011888:	4611      	mov	r1, r2
 801188a:	2200      	movs	r2, #0
 801188c:	602a      	str	r2, [r5, #0]
 801188e:	461a      	mov	r2, r3
 8011890:	f7f2 fb14 	bl	8003ebc <_read>
 8011894:	1c43      	adds	r3, r0, #1
 8011896:	d102      	bne.n	801189e <_read_r+0x1e>
 8011898:	682b      	ldr	r3, [r5, #0]
 801189a:	b103      	cbz	r3, 801189e <_read_r+0x1e>
 801189c:	6023      	str	r3, [r4, #0]
 801189e:	bd38      	pop	{r3, r4, r5, pc}
 80118a0:	20006890 	.word	0x20006890

080118a4 <sinf>:
 80118a4:	ee10 3a10 	vmov	r3, s0
 80118a8:	b507      	push	{r0, r1, r2, lr}
 80118aa:	4a1f      	ldr	r2, [pc, #124]	; (8011928 <sinf+0x84>)
 80118ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80118b0:	4293      	cmp	r3, r2
 80118b2:	dc07      	bgt.n	80118c4 <sinf+0x20>
 80118b4:	eddf 0a1d 	vldr	s1, [pc, #116]	; 801192c <sinf+0x88>
 80118b8:	2000      	movs	r0, #0
 80118ba:	b003      	add	sp, #12
 80118bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80118c0:	f001 bf78 	b.w	80137b4 <__kernel_sinf>
 80118c4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80118c8:	db04      	blt.n	80118d4 <sinf+0x30>
 80118ca:	ee30 0a40 	vsub.f32	s0, s0, s0
 80118ce:	b003      	add	sp, #12
 80118d0:	f85d fb04 	ldr.w	pc, [sp], #4
 80118d4:	4668      	mov	r0, sp
 80118d6:	f001 fb57 	bl	8012f88 <__ieee754_rem_pio2f>
 80118da:	f000 0003 	and.w	r0, r0, #3
 80118de:	2801      	cmp	r0, #1
 80118e0:	d00a      	beq.n	80118f8 <sinf+0x54>
 80118e2:	2802      	cmp	r0, #2
 80118e4:	d00f      	beq.n	8011906 <sinf+0x62>
 80118e6:	b9c0      	cbnz	r0, 801191a <sinf+0x76>
 80118e8:	eddd 0a01 	vldr	s1, [sp, #4]
 80118ec:	ed9d 0a00 	vldr	s0, [sp]
 80118f0:	2001      	movs	r0, #1
 80118f2:	f001 ff5f 	bl	80137b4 <__kernel_sinf>
 80118f6:	e7ea      	b.n	80118ce <sinf+0x2a>
 80118f8:	eddd 0a01 	vldr	s1, [sp, #4]
 80118fc:	ed9d 0a00 	vldr	s0, [sp]
 8011900:	f001 fc82 	bl	8013208 <__kernel_cosf>
 8011904:	e7e3      	b.n	80118ce <sinf+0x2a>
 8011906:	eddd 0a01 	vldr	s1, [sp, #4]
 801190a:	ed9d 0a00 	vldr	s0, [sp]
 801190e:	2001      	movs	r0, #1
 8011910:	f001 ff50 	bl	80137b4 <__kernel_sinf>
 8011914:	eeb1 0a40 	vneg.f32	s0, s0
 8011918:	e7d9      	b.n	80118ce <sinf+0x2a>
 801191a:	eddd 0a01 	vldr	s1, [sp, #4]
 801191e:	ed9d 0a00 	vldr	s0, [sp]
 8011922:	f001 fc71 	bl	8013208 <__kernel_cosf>
 8011926:	e7f5      	b.n	8011914 <sinf+0x70>
 8011928:	3f490fd8 	.word	0x3f490fd8
 801192c:	00000000 	.word	0x00000000

08011930 <pow>:
 8011930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011932:	ed2d 8b02 	vpush	{d8}
 8011936:	eeb0 8a40 	vmov.f32	s16, s0
 801193a:	eef0 8a60 	vmov.f32	s17, s1
 801193e:	ec55 4b11 	vmov	r4, r5, d1
 8011942:	f000 f8ed 	bl	8011b20 <__ieee754_pow>
 8011946:	4622      	mov	r2, r4
 8011948:	462b      	mov	r3, r5
 801194a:	4620      	mov	r0, r4
 801194c:	4629      	mov	r1, r5
 801194e:	ec57 6b10 	vmov	r6, r7, d0
 8011952:	f7ef f8eb 	bl	8000b2c <__aeabi_dcmpun>
 8011956:	2800      	cmp	r0, #0
 8011958:	d13b      	bne.n	80119d2 <pow+0xa2>
 801195a:	ec51 0b18 	vmov	r0, r1, d8
 801195e:	2200      	movs	r2, #0
 8011960:	2300      	movs	r3, #0
 8011962:	f7ef f8b1 	bl	8000ac8 <__aeabi_dcmpeq>
 8011966:	b1b8      	cbz	r0, 8011998 <pow+0x68>
 8011968:	2200      	movs	r2, #0
 801196a:	2300      	movs	r3, #0
 801196c:	4620      	mov	r0, r4
 801196e:	4629      	mov	r1, r5
 8011970:	f7ef f8aa 	bl	8000ac8 <__aeabi_dcmpeq>
 8011974:	2800      	cmp	r0, #0
 8011976:	d146      	bne.n	8011a06 <pow+0xd6>
 8011978:	ec45 4b10 	vmov	d0, r4, r5
 801197c:	f001 ffbd 	bl	80138fa <finite>
 8011980:	b338      	cbz	r0, 80119d2 <pow+0xa2>
 8011982:	2200      	movs	r2, #0
 8011984:	2300      	movs	r3, #0
 8011986:	4620      	mov	r0, r4
 8011988:	4629      	mov	r1, r5
 801198a:	f7ef f8a7 	bl	8000adc <__aeabi_dcmplt>
 801198e:	b300      	cbz	r0, 80119d2 <pow+0xa2>
 8011990:	f7fd f874 	bl	800ea7c <__errno>
 8011994:	2322      	movs	r3, #34	; 0x22
 8011996:	e01b      	b.n	80119d0 <pow+0xa0>
 8011998:	ec47 6b10 	vmov	d0, r6, r7
 801199c:	f001 ffad 	bl	80138fa <finite>
 80119a0:	b9e0      	cbnz	r0, 80119dc <pow+0xac>
 80119a2:	eeb0 0a48 	vmov.f32	s0, s16
 80119a6:	eef0 0a68 	vmov.f32	s1, s17
 80119aa:	f001 ffa6 	bl	80138fa <finite>
 80119ae:	b1a8      	cbz	r0, 80119dc <pow+0xac>
 80119b0:	ec45 4b10 	vmov	d0, r4, r5
 80119b4:	f001 ffa1 	bl	80138fa <finite>
 80119b8:	b180      	cbz	r0, 80119dc <pow+0xac>
 80119ba:	4632      	mov	r2, r6
 80119bc:	463b      	mov	r3, r7
 80119be:	4630      	mov	r0, r6
 80119c0:	4639      	mov	r1, r7
 80119c2:	f7ef f8b3 	bl	8000b2c <__aeabi_dcmpun>
 80119c6:	2800      	cmp	r0, #0
 80119c8:	d0e2      	beq.n	8011990 <pow+0x60>
 80119ca:	f7fd f857 	bl	800ea7c <__errno>
 80119ce:	2321      	movs	r3, #33	; 0x21
 80119d0:	6003      	str	r3, [r0, #0]
 80119d2:	ecbd 8b02 	vpop	{d8}
 80119d6:	ec47 6b10 	vmov	d0, r6, r7
 80119da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80119dc:	2200      	movs	r2, #0
 80119de:	2300      	movs	r3, #0
 80119e0:	4630      	mov	r0, r6
 80119e2:	4639      	mov	r1, r7
 80119e4:	f7ef f870 	bl	8000ac8 <__aeabi_dcmpeq>
 80119e8:	2800      	cmp	r0, #0
 80119ea:	d0f2      	beq.n	80119d2 <pow+0xa2>
 80119ec:	eeb0 0a48 	vmov.f32	s0, s16
 80119f0:	eef0 0a68 	vmov.f32	s1, s17
 80119f4:	f001 ff81 	bl	80138fa <finite>
 80119f8:	2800      	cmp	r0, #0
 80119fa:	d0ea      	beq.n	80119d2 <pow+0xa2>
 80119fc:	ec45 4b10 	vmov	d0, r4, r5
 8011a00:	f001 ff7b 	bl	80138fa <finite>
 8011a04:	e7c3      	b.n	801198e <pow+0x5e>
 8011a06:	4f01      	ldr	r7, [pc, #4]	; (8011a0c <pow+0xdc>)
 8011a08:	2600      	movs	r6, #0
 8011a0a:	e7e2      	b.n	80119d2 <pow+0xa2>
 8011a0c:	3ff00000 	.word	0x3ff00000

08011a10 <asinf>:
 8011a10:	b508      	push	{r3, lr}
 8011a12:	ed2d 8b02 	vpush	{d8}
 8011a16:	eeb0 8a40 	vmov.f32	s16, s0
 8011a1a:	f000 fe61 	bl	80126e0 <__ieee754_asinf>
 8011a1e:	eeb4 8a48 	vcmp.f32	s16, s16
 8011a22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a26:	eef0 8a40 	vmov.f32	s17, s0
 8011a2a:	d615      	bvs.n	8011a58 <asinf+0x48>
 8011a2c:	eeb0 0a48 	vmov.f32	s0, s16
 8011a30:	f002 f8c8 	bl	8013bc4 <fabsf>
 8011a34:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8011a38:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8011a3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a40:	dd0a      	ble.n	8011a58 <asinf+0x48>
 8011a42:	f7fd f81b 	bl	800ea7c <__errno>
 8011a46:	ecbd 8b02 	vpop	{d8}
 8011a4a:	2321      	movs	r3, #33	; 0x21
 8011a4c:	6003      	str	r3, [r0, #0]
 8011a4e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8011a52:	4804      	ldr	r0, [pc, #16]	; (8011a64 <asinf+0x54>)
 8011a54:	f002 b90c 	b.w	8013c70 <nanf>
 8011a58:	eeb0 0a68 	vmov.f32	s0, s17
 8011a5c:	ecbd 8b02 	vpop	{d8}
 8011a60:	bd08      	pop	{r3, pc}
 8011a62:	bf00      	nop
 8011a64:	08014150 	.word	0x08014150

08011a68 <atan2f>:
 8011a68:	f000 bf20 	b.w	80128ac <__ieee754_atan2f>

08011a6c <powf>:
 8011a6c:	b508      	push	{r3, lr}
 8011a6e:	ed2d 8b04 	vpush	{d8-d9}
 8011a72:	eeb0 8a60 	vmov.f32	s16, s1
 8011a76:	eeb0 9a40 	vmov.f32	s18, s0
 8011a7a:	f000 ffb7 	bl	80129ec <__ieee754_powf>
 8011a7e:	eeb4 8a48 	vcmp.f32	s16, s16
 8011a82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a86:	eef0 8a40 	vmov.f32	s17, s0
 8011a8a:	d63e      	bvs.n	8011b0a <powf+0x9e>
 8011a8c:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8011a90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a94:	d112      	bne.n	8011abc <powf+0x50>
 8011a96:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8011a9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a9e:	d039      	beq.n	8011b14 <powf+0xa8>
 8011aa0:	eeb0 0a48 	vmov.f32	s0, s16
 8011aa4:	f002 f895 	bl	8013bd2 <finitef>
 8011aa8:	b378      	cbz	r0, 8011b0a <powf+0x9e>
 8011aaa:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8011aae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ab2:	d52a      	bpl.n	8011b0a <powf+0x9e>
 8011ab4:	f7fc ffe2 	bl	800ea7c <__errno>
 8011ab8:	2322      	movs	r3, #34	; 0x22
 8011aba:	e014      	b.n	8011ae6 <powf+0x7a>
 8011abc:	f002 f889 	bl	8013bd2 <finitef>
 8011ac0:	b998      	cbnz	r0, 8011aea <powf+0x7e>
 8011ac2:	eeb0 0a49 	vmov.f32	s0, s18
 8011ac6:	f002 f884 	bl	8013bd2 <finitef>
 8011aca:	b170      	cbz	r0, 8011aea <powf+0x7e>
 8011acc:	eeb0 0a48 	vmov.f32	s0, s16
 8011ad0:	f002 f87f 	bl	8013bd2 <finitef>
 8011ad4:	b148      	cbz	r0, 8011aea <powf+0x7e>
 8011ad6:	eef4 8a68 	vcmp.f32	s17, s17
 8011ada:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ade:	d7e9      	bvc.n	8011ab4 <powf+0x48>
 8011ae0:	f7fc ffcc 	bl	800ea7c <__errno>
 8011ae4:	2321      	movs	r3, #33	; 0x21
 8011ae6:	6003      	str	r3, [r0, #0]
 8011ae8:	e00f      	b.n	8011b0a <powf+0x9e>
 8011aea:	eef5 8a40 	vcmp.f32	s17, #0.0
 8011aee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011af2:	d10a      	bne.n	8011b0a <powf+0x9e>
 8011af4:	eeb0 0a49 	vmov.f32	s0, s18
 8011af8:	f002 f86b 	bl	8013bd2 <finitef>
 8011afc:	b128      	cbz	r0, 8011b0a <powf+0x9e>
 8011afe:	eeb0 0a48 	vmov.f32	s0, s16
 8011b02:	f002 f866 	bl	8013bd2 <finitef>
 8011b06:	2800      	cmp	r0, #0
 8011b08:	d1d4      	bne.n	8011ab4 <powf+0x48>
 8011b0a:	eeb0 0a68 	vmov.f32	s0, s17
 8011b0e:	ecbd 8b04 	vpop	{d8-d9}
 8011b12:	bd08      	pop	{r3, pc}
 8011b14:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8011b18:	e7f7      	b.n	8011b0a <powf+0x9e>
 8011b1a:	0000      	movs	r0, r0
 8011b1c:	0000      	movs	r0, r0
	...

08011b20 <__ieee754_pow>:
 8011b20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b24:	ed2d 8b06 	vpush	{d8-d10}
 8011b28:	b089      	sub	sp, #36	; 0x24
 8011b2a:	ed8d 1b00 	vstr	d1, [sp]
 8011b2e:	e9dd 2900 	ldrd	r2, r9, [sp]
 8011b32:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8011b36:	ea58 0102 	orrs.w	r1, r8, r2
 8011b3a:	ec57 6b10 	vmov	r6, r7, d0
 8011b3e:	d115      	bne.n	8011b6c <__ieee754_pow+0x4c>
 8011b40:	19b3      	adds	r3, r6, r6
 8011b42:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8011b46:	4152      	adcs	r2, r2
 8011b48:	4299      	cmp	r1, r3
 8011b4a:	4b89      	ldr	r3, [pc, #548]	; (8011d70 <__ieee754_pow+0x250>)
 8011b4c:	4193      	sbcs	r3, r2
 8011b4e:	f080 84d2 	bcs.w	80124f6 <__ieee754_pow+0x9d6>
 8011b52:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011b56:	4630      	mov	r0, r6
 8011b58:	4639      	mov	r1, r7
 8011b5a:	f7ee fb97 	bl	800028c <__adddf3>
 8011b5e:	ec41 0b10 	vmov	d0, r0, r1
 8011b62:	b009      	add	sp, #36	; 0x24
 8011b64:	ecbd 8b06 	vpop	{d8-d10}
 8011b68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b6c:	4b81      	ldr	r3, [pc, #516]	; (8011d74 <__ieee754_pow+0x254>)
 8011b6e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8011b72:	429c      	cmp	r4, r3
 8011b74:	ee10 aa10 	vmov	sl, s0
 8011b78:	463d      	mov	r5, r7
 8011b7a:	dc06      	bgt.n	8011b8a <__ieee754_pow+0x6a>
 8011b7c:	d101      	bne.n	8011b82 <__ieee754_pow+0x62>
 8011b7e:	2e00      	cmp	r6, #0
 8011b80:	d1e7      	bne.n	8011b52 <__ieee754_pow+0x32>
 8011b82:	4598      	cmp	r8, r3
 8011b84:	dc01      	bgt.n	8011b8a <__ieee754_pow+0x6a>
 8011b86:	d10f      	bne.n	8011ba8 <__ieee754_pow+0x88>
 8011b88:	b172      	cbz	r2, 8011ba8 <__ieee754_pow+0x88>
 8011b8a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8011b8e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8011b92:	ea55 050a 	orrs.w	r5, r5, sl
 8011b96:	d1dc      	bne.n	8011b52 <__ieee754_pow+0x32>
 8011b98:	e9dd 3200 	ldrd	r3, r2, [sp]
 8011b9c:	18db      	adds	r3, r3, r3
 8011b9e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8011ba2:	4152      	adcs	r2, r2
 8011ba4:	429d      	cmp	r5, r3
 8011ba6:	e7d0      	b.n	8011b4a <__ieee754_pow+0x2a>
 8011ba8:	2d00      	cmp	r5, #0
 8011baa:	da3b      	bge.n	8011c24 <__ieee754_pow+0x104>
 8011bac:	4b72      	ldr	r3, [pc, #456]	; (8011d78 <__ieee754_pow+0x258>)
 8011bae:	4598      	cmp	r8, r3
 8011bb0:	dc51      	bgt.n	8011c56 <__ieee754_pow+0x136>
 8011bb2:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8011bb6:	4598      	cmp	r8, r3
 8011bb8:	f340 84ac 	ble.w	8012514 <__ieee754_pow+0x9f4>
 8011bbc:	ea4f 5328 	mov.w	r3, r8, asr #20
 8011bc0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8011bc4:	2b14      	cmp	r3, #20
 8011bc6:	dd0f      	ble.n	8011be8 <__ieee754_pow+0xc8>
 8011bc8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8011bcc:	fa22 f103 	lsr.w	r1, r2, r3
 8011bd0:	fa01 f303 	lsl.w	r3, r1, r3
 8011bd4:	4293      	cmp	r3, r2
 8011bd6:	f040 849d 	bne.w	8012514 <__ieee754_pow+0x9f4>
 8011bda:	f001 0101 	and.w	r1, r1, #1
 8011bde:	f1c1 0302 	rsb	r3, r1, #2
 8011be2:	9304      	str	r3, [sp, #16]
 8011be4:	b182      	cbz	r2, 8011c08 <__ieee754_pow+0xe8>
 8011be6:	e05f      	b.n	8011ca8 <__ieee754_pow+0x188>
 8011be8:	2a00      	cmp	r2, #0
 8011bea:	d15b      	bne.n	8011ca4 <__ieee754_pow+0x184>
 8011bec:	f1c3 0314 	rsb	r3, r3, #20
 8011bf0:	fa48 f103 	asr.w	r1, r8, r3
 8011bf4:	fa01 f303 	lsl.w	r3, r1, r3
 8011bf8:	4543      	cmp	r3, r8
 8011bfa:	f040 8488 	bne.w	801250e <__ieee754_pow+0x9ee>
 8011bfe:	f001 0101 	and.w	r1, r1, #1
 8011c02:	f1c1 0302 	rsb	r3, r1, #2
 8011c06:	9304      	str	r3, [sp, #16]
 8011c08:	4b5c      	ldr	r3, [pc, #368]	; (8011d7c <__ieee754_pow+0x25c>)
 8011c0a:	4598      	cmp	r8, r3
 8011c0c:	d132      	bne.n	8011c74 <__ieee754_pow+0x154>
 8011c0e:	f1b9 0f00 	cmp.w	r9, #0
 8011c12:	f280 8478 	bge.w	8012506 <__ieee754_pow+0x9e6>
 8011c16:	4959      	ldr	r1, [pc, #356]	; (8011d7c <__ieee754_pow+0x25c>)
 8011c18:	4632      	mov	r2, r6
 8011c1a:	463b      	mov	r3, r7
 8011c1c:	2000      	movs	r0, #0
 8011c1e:	f7ee fe15 	bl	800084c <__aeabi_ddiv>
 8011c22:	e79c      	b.n	8011b5e <__ieee754_pow+0x3e>
 8011c24:	2300      	movs	r3, #0
 8011c26:	9304      	str	r3, [sp, #16]
 8011c28:	2a00      	cmp	r2, #0
 8011c2a:	d13d      	bne.n	8011ca8 <__ieee754_pow+0x188>
 8011c2c:	4b51      	ldr	r3, [pc, #324]	; (8011d74 <__ieee754_pow+0x254>)
 8011c2e:	4598      	cmp	r8, r3
 8011c30:	d1ea      	bne.n	8011c08 <__ieee754_pow+0xe8>
 8011c32:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8011c36:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8011c3a:	ea53 030a 	orrs.w	r3, r3, sl
 8011c3e:	f000 845a 	beq.w	80124f6 <__ieee754_pow+0x9d6>
 8011c42:	4b4f      	ldr	r3, [pc, #316]	; (8011d80 <__ieee754_pow+0x260>)
 8011c44:	429c      	cmp	r4, r3
 8011c46:	dd08      	ble.n	8011c5a <__ieee754_pow+0x13a>
 8011c48:	f1b9 0f00 	cmp.w	r9, #0
 8011c4c:	f2c0 8457 	blt.w	80124fe <__ieee754_pow+0x9de>
 8011c50:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011c54:	e783      	b.n	8011b5e <__ieee754_pow+0x3e>
 8011c56:	2302      	movs	r3, #2
 8011c58:	e7e5      	b.n	8011c26 <__ieee754_pow+0x106>
 8011c5a:	f1b9 0f00 	cmp.w	r9, #0
 8011c5e:	f04f 0000 	mov.w	r0, #0
 8011c62:	f04f 0100 	mov.w	r1, #0
 8011c66:	f6bf af7a 	bge.w	8011b5e <__ieee754_pow+0x3e>
 8011c6a:	e9dd 0300 	ldrd	r0, r3, [sp]
 8011c6e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8011c72:	e774      	b.n	8011b5e <__ieee754_pow+0x3e>
 8011c74:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8011c78:	d106      	bne.n	8011c88 <__ieee754_pow+0x168>
 8011c7a:	4632      	mov	r2, r6
 8011c7c:	463b      	mov	r3, r7
 8011c7e:	4630      	mov	r0, r6
 8011c80:	4639      	mov	r1, r7
 8011c82:	f7ee fcb9 	bl	80005f8 <__aeabi_dmul>
 8011c86:	e76a      	b.n	8011b5e <__ieee754_pow+0x3e>
 8011c88:	4b3e      	ldr	r3, [pc, #248]	; (8011d84 <__ieee754_pow+0x264>)
 8011c8a:	4599      	cmp	r9, r3
 8011c8c:	d10c      	bne.n	8011ca8 <__ieee754_pow+0x188>
 8011c8e:	2d00      	cmp	r5, #0
 8011c90:	db0a      	blt.n	8011ca8 <__ieee754_pow+0x188>
 8011c92:	ec47 6b10 	vmov	d0, r6, r7
 8011c96:	b009      	add	sp, #36	; 0x24
 8011c98:	ecbd 8b06 	vpop	{d8-d10}
 8011c9c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ca0:	f000 bc6c 	b.w	801257c <__ieee754_sqrt>
 8011ca4:	2300      	movs	r3, #0
 8011ca6:	9304      	str	r3, [sp, #16]
 8011ca8:	ec47 6b10 	vmov	d0, r6, r7
 8011cac:	f001 fe1c 	bl	80138e8 <fabs>
 8011cb0:	ec51 0b10 	vmov	r0, r1, d0
 8011cb4:	f1ba 0f00 	cmp.w	sl, #0
 8011cb8:	d129      	bne.n	8011d0e <__ieee754_pow+0x1ee>
 8011cba:	b124      	cbz	r4, 8011cc6 <__ieee754_pow+0x1a6>
 8011cbc:	4b2f      	ldr	r3, [pc, #188]	; (8011d7c <__ieee754_pow+0x25c>)
 8011cbe:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8011cc2:	429a      	cmp	r2, r3
 8011cc4:	d123      	bne.n	8011d0e <__ieee754_pow+0x1ee>
 8011cc6:	f1b9 0f00 	cmp.w	r9, #0
 8011cca:	da05      	bge.n	8011cd8 <__ieee754_pow+0x1b8>
 8011ccc:	4602      	mov	r2, r0
 8011cce:	460b      	mov	r3, r1
 8011cd0:	2000      	movs	r0, #0
 8011cd2:	492a      	ldr	r1, [pc, #168]	; (8011d7c <__ieee754_pow+0x25c>)
 8011cd4:	f7ee fdba 	bl	800084c <__aeabi_ddiv>
 8011cd8:	2d00      	cmp	r5, #0
 8011cda:	f6bf af40 	bge.w	8011b5e <__ieee754_pow+0x3e>
 8011cde:	9b04      	ldr	r3, [sp, #16]
 8011ce0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8011ce4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8011ce8:	4323      	orrs	r3, r4
 8011cea:	d108      	bne.n	8011cfe <__ieee754_pow+0x1de>
 8011cec:	4602      	mov	r2, r0
 8011cee:	460b      	mov	r3, r1
 8011cf0:	4610      	mov	r0, r2
 8011cf2:	4619      	mov	r1, r3
 8011cf4:	f7ee fac8 	bl	8000288 <__aeabi_dsub>
 8011cf8:	4602      	mov	r2, r0
 8011cfa:	460b      	mov	r3, r1
 8011cfc:	e78f      	b.n	8011c1e <__ieee754_pow+0xfe>
 8011cfe:	9b04      	ldr	r3, [sp, #16]
 8011d00:	2b01      	cmp	r3, #1
 8011d02:	f47f af2c 	bne.w	8011b5e <__ieee754_pow+0x3e>
 8011d06:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011d0a:	4619      	mov	r1, r3
 8011d0c:	e727      	b.n	8011b5e <__ieee754_pow+0x3e>
 8011d0e:	0feb      	lsrs	r3, r5, #31
 8011d10:	3b01      	subs	r3, #1
 8011d12:	9306      	str	r3, [sp, #24]
 8011d14:	9a06      	ldr	r2, [sp, #24]
 8011d16:	9b04      	ldr	r3, [sp, #16]
 8011d18:	4313      	orrs	r3, r2
 8011d1a:	d102      	bne.n	8011d22 <__ieee754_pow+0x202>
 8011d1c:	4632      	mov	r2, r6
 8011d1e:	463b      	mov	r3, r7
 8011d20:	e7e6      	b.n	8011cf0 <__ieee754_pow+0x1d0>
 8011d22:	4b19      	ldr	r3, [pc, #100]	; (8011d88 <__ieee754_pow+0x268>)
 8011d24:	4598      	cmp	r8, r3
 8011d26:	f340 80fb 	ble.w	8011f20 <__ieee754_pow+0x400>
 8011d2a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8011d2e:	4598      	cmp	r8, r3
 8011d30:	4b13      	ldr	r3, [pc, #76]	; (8011d80 <__ieee754_pow+0x260>)
 8011d32:	dd0c      	ble.n	8011d4e <__ieee754_pow+0x22e>
 8011d34:	429c      	cmp	r4, r3
 8011d36:	dc0f      	bgt.n	8011d58 <__ieee754_pow+0x238>
 8011d38:	f1b9 0f00 	cmp.w	r9, #0
 8011d3c:	da0f      	bge.n	8011d5e <__ieee754_pow+0x23e>
 8011d3e:	2000      	movs	r0, #0
 8011d40:	b009      	add	sp, #36	; 0x24
 8011d42:	ecbd 8b06 	vpop	{d8-d10}
 8011d46:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d4a:	f001 bda2 	b.w	8013892 <__math_oflow>
 8011d4e:	429c      	cmp	r4, r3
 8011d50:	dbf2      	blt.n	8011d38 <__ieee754_pow+0x218>
 8011d52:	4b0a      	ldr	r3, [pc, #40]	; (8011d7c <__ieee754_pow+0x25c>)
 8011d54:	429c      	cmp	r4, r3
 8011d56:	dd19      	ble.n	8011d8c <__ieee754_pow+0x26c>
 8011d58:	f1b9 0f00 	cmp.w	r9, #0
 8011d5c:	dcef      	bgt.n	8011d3e <__ieee754_pow+0x21e>
 8011d5e:	2000      	movs	r0, #0
 8011d60:	b009      	add	sp, #36	; 0x24
 8011d62:	ecbd 8b06 	vpop	{d8-d10}
 8011d66:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d6a:	f001 bd89 	b.w	8013880 <__math_uflow>
 8011d6e:	bf00      	nop
 8011d70:	fff00000 	.word	0xfff00000
 8011d74:	7ff00000 	.word	0x7ff00000
 8011d78:	433fffff 	.word	0x433fffff
 8011d7c:	3ff00000 	.word	0x3ff00000
 8011d80:	3fefffff 	.word	0x3fefffff
 8011d84:	3fe00000 	.word	0x3fe00000
 8011d88:	41e00000 	.word	0x41e00000
 8011d8c:	4b60      	ldr	r3, [pc, #384]	; (8011f10 <__ieee754_pow+0x3f0>)
 8011d8e:	2200      	movs	r2, #0
 8011d90:	f7ee fa7a 	bl	8000288 <__aeabi_dsub>
 8011d94:	a354      	add	r3, pc, #336	; (adr r3, 8011ee8 <__ieee754_pow+0x3c8>)
 8011d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d9a:	4604      	mov	r4, r0
 8011d9c:	460d      	mov	r5, r1
 8011d9e:	f7ee fc2b 	bl	80005f8 <__aeabi_dmul>
 8011da2:	a353      	add	r3, pc, #332	; (adr r3, 8011ef0 <__ieee754_pow+0x3d0>)
 8011da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011da8:	4606      	mov	r6, r0
 8011daa:	460f      	mov	r7, r1
 8011dac:	4620      	mov	r0, r4
 8011dae:	4629      	mov	r1, r5
 8011db0:	f7ee fc22 	bl	80005f8 <__aeabi_dmul>
 8011db4:	4b57      	ldr	r3, [pc, #348]	; (8011f14 <__ieee754_pow+0x3f4>)
 8011db6:	4682      	mov	sl, r0
 8011db8:	468b      	mov	fp, r1
 8011dba:	2200      	movs	r2, #0
 8011dbc:	4620      	mov	r0, r4
 8011dbe:	4629      	mov	r1, r5
 8011dc0:	f7ee fc1a 	bl	80005f8 <__aeabi_dmul>
 8011dc4:	4602      	mov	r2, r0
 8011dc6:	460b      	mov	r3, r1
 8011dc8:	a14b      	add	r1, pc, #300	; (adr r1, 8011ef8 <__ieee754_pow+0x3d8>)
 8011dca:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011dce:	f7ee fa5b 	bl	8000288 <__aeabi_dsub>
 8011dd2:	4622      	mov	r2, r4
 8011dd4:	462b      	mov	r3, r5
 8011dd6:	f7ee fc0f 	bl	80005f8 <__aeabi_dmul>
 8011dda:	4602      	mov	r2, r0
 8011ddc:	460b      	mov	r3, r1
 8011dde:	2000      	movs	r0, #0
 8011de0:	494d      	ldr	r1, [pc, #308]	; (8011f18 <__ieee754_pow+0x3f8>)
 8011de2:	f7ee fa51 	bl	8000288 <__aeabi_dsub>
 8011de6:	4622      	mov	r2, r4
 8011de8:	4680      	mov	r8, r0
 8011dea:	4689      	mov	r9, r1
 8011dec:	462b      	mov	r3, r5
 8011dee:	4620      	mov	r0, r4
 8011df0:	4629      	mov	r1, r5
 8011df2:	f7ee fc01 	bl	80005f8 <__aeabi_dmul>
 8011df6:	4602      	mov	r2, r0
 8011df8:	460b      	mov	r3, r1
 8011dfa:	4640      	mov	r0, r8
 8011dfc:	4649      	mov	r1, r9
 8011dfe:	f7ee fbfb 	bl	80005f8 <__aeabi_dmul>
 8011e02:	a33f      	add	r3, pc, #252	; (adr r3, 8011f00 <__ieee754_pow+0x3e0>)
 8011e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e08:	f7ee fbf6 	bl	80005f8 <__aeabi_dmul>
 8011e0c:	4602      	mov	r2, r0
 8011e0e:	460b      	mov	r3, r1
 8011e10:	4650      	mov	r0, sl
 8011e12:	4659      	mov	r1, fp
 8011e14:	f7ee fa38 	bl	8000288 <__aeabi_dsub>
 8011e18:	4602      	mov	r2, r0
 8011e1a:	460b      	mov	r3, r1
 8011e1c:	4680      	mov	r8, r0
 8011e1e:	4689      	mov	r9, r1
 8011e20:	4630      	mov	r0, r6
 8011e22:	4639      	mov	r1, r7
 8011e24:	f7ee fa32 	bl	800028c <__adddf3>
 8011e28:	2000      	movs	r0, #0
 8011e2a:	4632      	mov	r2, r6
 8011e2c:	463b      	mov	r3, r7
 8011e2e:	4604      	mov	r4, r0
 8011e30:	460d      	mov	r5, r1
 8011e32:	f7ee fa29 	bl	8000288 <__aeabi_dsub>
 8011e36:	4602      	mov	r2, r0
 8011e38:	460b      	mov	r3, r1
 8011e3a:	4640      	mov	r0, r8
 8011e3c:	4649      	mov	r1, r9
 8011e3e:	f7ee fa23 	bl	8000288 <__aeabi_dsub>
 8011e42:	9b04      	ldr	r3, [sp, #16]
 8011e44:	9a06      	ldr	r2, [sp, #24]
 8011e46:	3b01      	subs	r3, #1
 8011e48:	4313      	orrs	r3, r2
 8011e4a:	4682      	mov	sl, r0
 8011e4c:	468b      	mov	fp, r1
 8011e4e:	f040 81e7 	bne.w	8012220 <__ieee754_pow+0x700>
 8011e52:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8011f08 <__ieee754_pow+0x3e8>
 8011e56:	eeb0 8a47 	vmov.f32	s16, s14
 8011e5a:	eef0 8a67 	vmov.f32	s17, s15
 8011e5e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8011e62:	2600      	movs	r6, #0
 8011e64:	4632      	mov	r2, r6
 8011e66:	463b      	mov	r3, r7
 8011e68:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011e6c:	f7ee fa0c 	bl	8000288 <__aeabi_dsub>
 8011e70:	4622      	mov	r2, r4
 8011e72:	462b      	mov	r3, r5
 8011e74:	f7ee fbc0 	bl	80005f8 <__aeabi_dmul>
 8011e78:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011e7c:	4680      	mov	r8, r0
 8011e7e:	4689      	mov	r9, r1
 8011e80:	4650      	mov	r0, sl
 8011e82:	4659      	mov	r1, fp
 8011e84:	f7ee fbb8 	bl	80005f8 <__aeabi_dmul>
 8011e88:	4602      	mov	r2, r0
 8011e8a:	460b      	mov	r3, r1
 8011e8c:	4640      	mov	r0, r8
 8011e8e:	4649      	mov	r1, r9
 8011e90:	f7ee f9fc 	bl	800028c <__adddf3>
 8011e94:	4632      	mov	r2, r6
 8011e96:	463b      	mov	r3, r7
 8011e98:	4680      	mov	r8, r0
 8011e9a:	4689      	mov	r9, r1
 8011e9c:	4620      	mov	r0, r4
 8011e9e:	4629      	mov	r1, r5
 8011ea0:	f7ee fbaa 	bl	80005f8 <__aeabi_dmul>
 8011ea4:	460b      	mov	r3, r1
 8011ea6:	4604      	mov	r4, r0
 8011ea8:	460d      	mov	r5, r1
 8011eaa:	4602      	mov	r2, r0
 8011eac:	4649      	mov	r1, r9
 8011eae:	4640      	mov	r0, r8
 8011eb0:	f7ee f9ec 	bl	800028c <__adddf3>
 8011eb4:	4b19      	ldr	r3, [pc, #100]	; (8011f1c <__ieee754_pow+0x3fc>)
 8011eb6:	4299      	cmp	r1, r3
 8011eb8:	ec45 4b19 	vmov	d9, r4, r5
 8011ebc:	4606      	mov	r6, r0
 8011ebe:	460f      	mov	r7, r1
 8011ec0:	468b      	mov	fp, r1
 8011ec2:	f340 82f1 	ble.w	80124a8 <__ieee754_pow+0x988>
 8011ec6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8011eca:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8011ece:	4303      	orrs	r3, r0
 8011ed0:	f000 81e4 	beq.w	801229c <__ieee754_pow+0x77c>
 8011ed4:	ec51 0b18 	vmov	r0, r1, d8
 8011ed8:	2200      	movs	r2, #0
 8011eda:	2300      	movs	r3, #0
 8011edc:	f7ee fdfe 	bl	8000adc <__aeabi_dcmplt>
 8011ee0:	3800      	subs	r0, #0
 8011ee2:	bf18      	it	ne
 8011ee4:	2001      	movne	r0, #1
 8011ee6:	e72b      	b.n	8011d40 <__ieee754_pow+0x220>
 8011ee8:	60000000 	.word	0x60000000
 8011eec:	3ff71547 	.word	0x3ff71547
 8011ef0:	f85ddf44 	.word	0xf85ddf44
 8011ef4:	3e54ae0b 	.word	0x3e54ae0b
 8011ef8:	55555555 	.word	0x55555555
 8011efc:	3fd55555 	.word	0x3fd55555
 8011f00:	652b82fe 	.word	0x652b82fe
 8011f04:	3ff71547 	.word	0x3ff71547
 8011f08:	00000000 	.word	0x00000000
 8011f0c:	bff00000 	.word	0xbff00000
 8011f10:	3ff00000 	.word	0x3ff00000
 8011f14:	3fd00000 	.word	0x3fd00000
 8011f18:	3fe00000 	.word	0x3fe00000
 8011f1c:	408fffff 	.word	0x408fffff
 8011f20:	4bd5      	ldr	r3, [pc, #852]	; (8012278 <__ieee754_pow+0x758>)
 8011f22:	402b      	ands	r3, r5
 8011f24:	2200      	movs	r2, #0
 8011f26:	b92b      	cbnz	r3, 8011f34 <__ieee754_pow+0x414>
 8011f28:	4bd4      	ldr	r3, [pc, #848]	; (801227c <__ieee754_pow+0x75c>)
 8011f2a:	f7ee fb65 	bl	80005f8 <__aeabi_dmul>
 8011f2e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8011f32:	460c      	mov	r4, r1
 8011f34:	1523      	asrs	r3, r4, #20
 8011f36:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8011f3a:	4413      	add	r3, r2
 8011f3c:	9305      	str	r3, [sp, #20]
 8011f3e:	4bd0      	ldr	r3, [pc, #832]	; (8012280 <__ieee754_pow+0x760>)
 8011f40:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8011f44:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8011f48:	429c      	cmp	r4, r3
 8011f4a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8011f4e:	dd08      	ble.n	8011f62 <__ieee754_pow+0x442>
 8011f50:	4bcc      	ldr	r3, [pc, #816]	; (8012284 <__ieee754_pow+0x764>)
 8011f52:	429c      	cmp	r4, r3
 8011f54:	f340 8162 	ble.w	801221c <__ieee754_pow+0x6fc>
 8011f58:	9b05      	ldr	r3, [sp, #20]
 8011f5a:	3301      	adds	r3, #1
 8011f5c:	9305      	str	r3, [sp, #20]
 8011f5e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8011f62:	2400      	movs	r4, #0
 8011f64:	00e3      	lsls	r3, r4, #3
 8011f66:	9307      	str	r3, [sp, #28]
 8011f68:	4bc7      	ldr	r3, [pc, #796]	; (8012288 <__ieee754_pow+0x768>)
 8011f6a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8011f6e:	ed93 7b00 	vldr	d7, [r3]
 8011f72:	4629      	mov	r1, r5
 8011f74:	ec53 2b17 	vmov	r2, r3, d7
 8011f78:	eeb0 9a47 	vmov.f32	s18, s14
 8011f7c:	eef0 9a67 	vmov.f32	s19, s15
 8011f80:	4682      	mov	sl, r0
 8011f82:	f7ee f981 	bl	8000288 <__aeabi_dsub>
 8011f86:	4652      	mov	r2, sl
 8011f88:	4606      	mov	r6, r0
 8011f8a:	460f      	mov	r7, r1
 8011f8c:	462b      	mov	r3, r5
 8011f8e:	ec51 0b19 	vmov	r0, r1, d9
 8011f92:	f7ee f97b 	bl	800028c <__adddf3>
 8011f96:	4602      	mov	r2, r0
 8011f98:	460b      	mov	r3, r1
 8011f9a:	2000      	movs	r0, #0
 8011f9c:	49bb      	ldr	r1, [pc, #748]	; (801228c <__ieee754_pow+0x76c>)
 8011f9e:	f7ee fc55 	bl	800084c <__aeabi_ddiv>
 8011fa2:	ec41 0b1a 	vmov	d10, r0, r1
 8011fa6:	4602      	mov	r2, r0
 8011fa8:	460b      	mov	r3, r1
 8011faa:	4630      	mov	r0, r6
 8011fac:	4639      	mov	r1, r7
 8011fae:	f7ee fb23 	bl	80005f8 <__aeabi_dmul>
 8011fb2:	2300      	movs	r3, #0
 8011fb4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011fb8:	9302      	str	r3, [sp, #8]
 8011fba:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8011fbe:	46ab      	mov	fp, r5
 8011fc0:	106d      	asrs	r5, r5, #1
 8011fc2:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8011fc6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8011fca:	ec41 0b18 	vmov	d8, r0, r1
 8011fce:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8011fd2:	2200      	movs	r2, #0
 8011fd4:	4640      	mov	r0, r8
 8011fd6:	4649      	mov	r1, r9
 8011fd8:	4614      	mov	r4, r2
 8011fda:	461d      	mov	r5, r3
 8011fdc:	f7ee fb0c 	bl	80005f8 <__aeabi_dmul>
 8011fe0:	4602      	mov	r2, r0
 8011fe2:	460b      	mov	r3, r1
 8011fe4:	4630      	mov	r0, r6
 8011fe6:	4639      	mov	r1, r7
 8011fe8:	f7ee f94e 	bl	8000288 <__aeabi_dsub>
 8011fec:	ec53 2b19 	vmov	r2, r3, d9
 8011ff0:	4606      	mov	r6, r0
 8011ff2:	460f      	mov	r7, r1
 8011ff4:	4620      	mov	r0, r4
 8011ff6:	4629      	mov	r1, r5
 8011ff8:	f7ee f946 	bl	8000288 <__aeabi_dsub>
 8011ffc:	4602      	mov	r2, r0
 8011ffe:	460b      	mov	r3, r1
 8012000:	4650      	mov	r0, sl
 8012002:	4659      	mov	r1, fp
 8012004:	f7ee f940 	bl	8000288 <__aeabi_dsub>
 8012008:	4642      	mov	r2, r8
 801200a:	464b      	mov	r3, r9
 801200c:	f7ee faf4 	bl	80005f8 <__aeabi_dmul>
 8012010:	4602      	mov	r2, r0
 8012012:	460b      	mov	r3, r1
 8012014:	4630      	mov	r0, r6
 8012016:	4639      	mov	r1, r7
 8012018:	f7ee f936 	bl	8000288 <__aeabi_dsub>
 801201c:	ec53 2b1a 	vmov	r2, r3, d10
 8012020:	f7ee faea 	bl	80005f8 <__aeabi_dmul>
 8012024:	ec53 2b18 	vmov	r2, r3, d8
 8012028:	ec41 0b19 	vmov	d9, r0, r1
 801202c:	ec51 0b18 	vmov	r0, r1, d8
 8012030:	f7ee fae2 	bl	80005f8 <__aeabi_dmul>
 8012034:	a37c      	add	r3, pc, #496	; (adr r3, 8012228 <__ieee754_pow+0x708>)
 8012036:	e9d3 2300 	ldrd	r2, r3, [r3]
 801203a:	4604      	mov	r4, r0
 801203c:	460d      	mov	r5, r1
 801203e:	f7ee fadb 	bl	80005f8 <__aeabi_dmul>
 8012042:	a37b      	add	r3, pc, #492	; (adr r3, 8012230 <__ieee754_pow+0x710>)
 8012044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012048:	f7ee f920 	bl	800028c <__adddf3>
 801204c:	4622      	mov	r2, r4
 801204e:	462b      	mov	r3, r5
 8012050:	f7ee fad2 	bl	80005f8 <__aeabi_dmul>
 8012054:	a378      	add	r3, pc, #480	; (adr r3, 8012238 <__ieee754_pow+0x718>)
 8012056:	e9d3 2300 	ldrd	r2, r3, [r3]
 801205a:	f7ee f917 	bl	800028c <__adddf3>
 801205e:	4622      	mov	r2, r4
 8012060:	462b      	mov	r3, r5
 8012062:	f7ee fac9 	bl	80005f8 <__aeabi_dmul>
 8012066:	a376      	add	r3, pc, #472	; (adr r3, 8012240 <__ieee754_pow+0x720>)
 8012068:	e9d3 2300 	ldrd	r2, r3, [r3]
 801206c:	f7ee f90e 	bl	800028c <__adddf3>
 8012070:	4622      	mov	r2, r4
 8012072:	462b      	mov	r3, r5
 8012074:	f7ee fac0 	bl	80005f8 <__aeabi_dmul>
 8012078:	a373      	add	r3, pc, #460	; (adr r3, 8012248 <__ieee754_pow+0x728>)
 801207a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801207e:	f7ee f905 	bl	800028c <__adddf3>
 8012082:	4622      	mov	r2, r4
 8012084:	462b      	mov	r3, r5
 8012086:	f7ee fab7 	bl	80005f8 <__aeabi_dmul>
 801208a:	a371      	add	r3, pc, #452	; (adr r3, 8012250 <__ieee754_pow+0x730>)
 801208c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012090:	f7ee f8fc 	bl	800028c <__adddf3>
 8012094:	4622      	mov	r2, r4
 8012096:	4606      	mov	r6, r0
 8012098:	460f      	mov	r7, r1
 801209a:	462b      	mov	r3, r5
 801209c:	4620      	mov	r0, r4
 801209e:	4629      	mov	r1, r5
 80120a0:	f7ee faaa 	bl	80005f8 <__aeabi_dmul>
 80120a4:	4602      	mov	r2, r0
 80120a6:	460b      	mov	r3, r1
 80120a8:	4630      	mov	r0, r6
 80120aa:	4639      	mov	r1, r7
 80120ac:	f7ee faa4 	bl	80005f8 <__aeabi_dmul>
 80120b0:	4642      	mov	r2, r8
 80120b2:	4604      	mov	r4, r0
 80120b4:	460d      	mov	r5, r1
 80120b6:	464b      	mov	r3, r9
 80120b8:	ec51 0b18 	vmov	r0, r1, d8
 80120bc:	f7ee f8e6 	bl	800028c <__adddf3>
 80120c0:	ec53 2b19 	vmov	r2, r3, d9
 80120c4:	f7ee fa98 	bl	80005f8 <__aeabi_dmul>
 80120c8:	4622      	mov	r2, r4
 80120ca:	462b      	mov	r3, r5
 80120cc:	f7ee f8de 	bl	800028c <__adddf3>
 80120d0:	4642      	mov	r2, r8
 80120d2:	4682      	mov	sl, r0
 80120d4:	468b      	mov	fp, r1
 80120d6:	464b      	mov	r3, r9
 80120d8:	4640      	mov	r0, r8
 80120da:	4649      	mov	r1, r9
 80120dc:	f7ee fa8c 	bl	80005f8 <__aeabi_dmul>
 80120e0:	4b6b      	ldr	r3, [pc, #428]	; (8012290 <__ieee754_pow+0x770>)
 80120e2:	2200      	movs	r2, #0
 80120e4:	4606      	mov	r6, r0
 80120e6:	460f      	mov	r7, r1
 80120e8:	f7ee f8d0 	bl	800028c <__adddf3>
 80120ec:	4652      	mov	r2, sl
 80120ee:	465b      	mov	r3, fp
 80120f0:	f7ee f8cc 	bl	800028c <__adddf3>
 80120f4:	2000      	movs	r0, #0
 80120f6:	4604      	mov	r4, r0
 80120f8:	460d      	mov	r5, r1
 80120fa:	4602      	mov	r2, r0
 80120fc:	460b      	mov	r3, r1
 80120fe:	4640      	mov	r0, r8
 8012100:	4649      	mov	r1, r9
 8012102:	f7ee fa79 	bl	80005f8 <__aeabi_dmul>
 8012106:	4b62      	ldr	r3, [pc, #392]	; (8012290 <__ieee754_pow+0x770>)
 8012108:	4680      	mov	r8, r0
 801210a:	4689      	mov	r9, r1
 801210c:	2200      	movs	r2, #0
 801210e:	4620      	mov	r0, r4
 8012110:	4629      	mov	r1, r5
 8012112:	f7ee f8b9 	bl	8000288 <__aeabi_dsub>
 8012116:	4632      	mov	r2, r6
 8012118:	463b      	mov	r3, r7
 801211a:	f7ee f8b5 	bl	8000288 <__aeabi_dsub>
 801211e:	4602      	mov	r2, r0
 8012120:	460b      	mov	r3, r1
 8012122:	4650      	mov	r0, sl
 8012124:	4659      	mov	r1, fp
 8012126:	f7ee f8af 	bl	8000288 <__aeabi_dsub>
 801212a:	ec53 2b18 	vmov	r2, r3, d8
 801212e:	f7ee fa63 	bl	80005f8 <__aeabi_dmul>
 8012132:	4622      	mov	r2, r4
 8012134:	4606      	mov	r6, r0
 8012136:	460f      	mov	r7, r1
 8012138:	462b      	mov	r3, r5
 801213a:	ec51 0b19 	vmov	r0, r1, d9
 801213e:	f7ee fa5b 	bl	80005f8 <__aeabi_dmul>
 8012142:	4602      	mov	r2, r0
 8012144:	460b      	mov	r3, r1
 8012146:	4630      	mov	r0, r6
 8012148:	4639      	mov	r1, r7
 801214a:	f7ee f89f 	bl	800028c <__adddf3>
 801214e:	4606      	mov	r6, r0
 8012150:	460f      	mov	r7, r1
 8012152:	4602      	mov	r2, r0
 8012154:	460b      	mov	r3, r1
 8012156:	4640      	mov	r0, r8
 8012158:	4649      	mov	r1, r9
 801215a:	f7ee f897 	bl	800028c <__adddf3>
 801215e:	a33e      	add	r3, pc, #248	; (adr r3, 8012258 <__ieee754_pow+0x738>)
 8012160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012164:	2000      	movs	r0, #0
 8012166:	4604      	mov	r4, r0
 8012168:	460d      	mov	r5, r1
 801216a:	f7ee fa45 	bl	80005f8 <__aeabi_dmul>
 801216e:	4642      	mov	r2, r8
 8012170:	ec41 0b18 	vmov	d8, r0, r1
 8012174:	464b      	mov	r3, r9
 8012176:	4620      	mov	r0, r4
 8012178:	4629      	mov	r1, r5
 801217a:	f7ee f885 	bl	8000288 <__aeabi_dsub>
 801217e:	4602      	mov	r2, r0
 8012180:	460b      	mov	r3, r1
 8012182:	4630      	mov	r0, r6
 8012184:	4639      	mov	r1, r7
 8012186:	f7ee f87f 	bl	8000288 <__aeabi_dsub>
 801218a:	a335      	add	r3, pc, #212	; (adr r3, 8012260 <__ieee754_pow+0x740>)
 801218c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012190:	f7ee fa32 	bl	80005f8 <__aeabi_dmul>
 8012194:	a334      	add	r3, pc, #208	; (adr r3, 8012268 <__ieee754_pow+0x748>)
 8012196:	e9d3 2300 	ldrd	r2, r3, [r3]
 801219a:	4606      	mov	r6, r0
 801219c:	460f      	mov	r7, r1
 801219e:	4620      	mov	r0, r4
 80121a0:	4629      	mov	r1, r5
 80121a2:	f7ee fa29 	bl	80005f8 <__aeabi_dmul>
 80121a6:	4602      	mov	r2, r0
 80121a8:	460b      	mov	r3, r1
 80121aa:	4630      	mov	r0, r6
 80121ac:	4639      	mov	r1, r7
 80121ae:	f7ee f86d 	bl	800028c <__adddf3>
 80121b2:	9a07      	ldr	r2, [sp, #28]
 80121b4:	4b37      	ldr	r3, [pc, #220]	; (8012294 <__ieee754_pow+0x774>)
 80121b6:	4413      	add	r3, r2
 80121b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121bc:	f7ee f866 	bl	800028c <__adddf3>
 80121c0:	4682      	mov	sl, r0
 80121c2:	9805      	ldr	r0, [sp, #20]
 80121c4:	468b      	mov	fp, r1
 80121c6:	f7ee f9ad 	bl	8000524 <__aeabi_i2d>
 80121ca:	9a07      	ldr	r2, [sp, #28]
 80121cc:	4b32      	ldr	r3, [pc, #200]	; (8012298 <__ieee754_pow+0x778>)
 80121ce:	4413      	add	r3, r2
 80121d0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80121d4:	4606      	mov	r6, r0
 80121d6:	460f      	mov	r7, r1
 80121d8:	4652      	mov	r2, sl
 80121da:	465b      	mov	r3, fp
 80121dc:	ec51 0b18 	vmov	r0, r1, d8
 80121e0:	f7ee f854 	bl	800028c <__adddf3>
 80121e4:	4642      	mov	r2, r8
 80121e6:	464b      	mov	r3, r9
 80121e8:	f7ee f850 	bl	800028c <__adddf3>
 80121ec:	4632      	mov	r2, r6
 80121ee:	463b      	mov	r3, r7
 80121f0:	f7ee f84c 	bl	800028c <__adddf3>
 80121f4:	2000      	movs	r0, #0
 80121f6:	4632      	mov	r2, r6
 80121f8:	463b      	mov	r3, r7
 80121fa:	4604      	mov	r4, r0
 80121fc:	460d      	mov	r5, r1
 80121fe:	f7ee f843 	bl	8000288 <__aeabi_dsub>
 8012202:	4642      	mov	r2, r8
 8012204:	464b      	mov	r3, r9
 8012206:	f7ee f83f 	bl	8000288 <__aeabi_dsub>
 801220a:	ec53 2b18 	vmov	r2, r3, d8
 801220e:	f7ee f83b 	bl	8000288 <__aeabi_dsub>
 8012212:	4602      	mov	r2, r0
 8012214:	460b      	mov	r3, r1
 8012216:	4650      	mov	r0, sl
 8012218:	4659      	mov	r1, fp
 801221a:	e610      	b.n	8011e3e <__ieee754_pow+0x31e>
 801221c:	2401      	movs	r4, #1
 801221e:	e6a1      	b.n	8011f64 <__ieee754_pow+0x444>
 8012220:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8012270 <__ieee754_pow+0x750>
 8012224:	e617      	b.n	8011e56 <__ieee754_pow+0x336>
 8012226:	bf00      	nop
 8012228:	4a454eef 	.word	0x4a454eef
 801222c:	3fca7e28 	.word	0x3fca7e28
 8012230:	93c9db65 	.word	0x93c9db65
 8012234:	3fcd864a 	.word	0x3fcd864a
 8012238:	a91d4101 	.word	0xa91d4101
 801223c:	3fd17460 	.word	0x3fd17460
 8012240:	518f264d 	.word	0x518f264d
 8012244:	3fd55555 	.word	0x3fd55555
 8012248:	db6fabff 	.word	0xdb6fabff
 801224c:	3fdb6db6 	.word	0x3fdb6db6
 8012250:	33333303 	.word	0x33333303
 8012254:	3fe33333 	.word	0x3fe33333
 8012258:	e0000000 	.word	0xe0000000
 801225c:	3feec709 	.word	0x3feec709
 8012260:	dc3a03fd 	.word	0xdc3a03fd
 8012264:	3feec709 	.word	0x3feec709
 8012268:	145b01f5 	.word	0x145b01f5
 801226c:	be3e2fe0 	.word	0xbe3e2fe0
 8012270:	00000000 	.word	0x00000000
 8012274:	3ff00000 	.word	0x3ff00000
 8012278:	7ff00000 	.word	0x7ff00000
 801227c:	43400000 	.word	0x43400000
 8012280:	0003988e 	.word	0x0003988e
 8012284:	000bb679 	.word	0x000bb679
 8012288:	080142c0 	.word	0x080142c0
 801228c:	3ff00000 	.word	0x3ff00000
 8012290:	40080000 	.word	0x40080000
 8012294:	080142e0 	.word	0x080142e0
 8012298:	080142d0 	.word	0x080142d0
 801229c:	a3b5      	add	r3, pc, #724	; (adr r3, 8012574 <__ieee754_pow+0xa54>)
 801229e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122a2:	4640      	mov	r0, r8
 80122a4:	4649      	mov	r1, r9
 80122a6:	f7ed fff1 	bl	800028c <__adddf3>
 80122aa:	4622      	mov	r2, r4
 80122ac:	ec41 0b1a 	vmov	d10, r0, r1
 80122b0:	462b      	mov	r3, r5
 80122b2:	4630      	mov	r0, r6
 80122b4:	4639      	mov	r1, r7
 80122b6:	f7ed ffe7 	bl	8000288 <__aeabi_dsub>
 80122ba:	4602      	mov	r2, r0
 80122bc:	460b      	mov	r3, r1
 80122be:	ec51 0b1a 	vmov	r0, r1, d10
 80122c2:	f7ee fc29 	bl	8000b18 <__aeabi_dcmpgt>
 80122c6:	2800      	cmp	r0, #0
 80122c8:	f47f ae04 	bne.w	8011ed4 <__ieee754_pow+0x3b4>
 80122cc:	4aa4      	ldr	r2, [pc, #656]	; (8012560 <__ieee754_pow+0xa40>)
 80122ce:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80122d2:	4293      	cmp	r3, r2
 80122d4:	f340 8108 	ble.w	80124e8 <__ieee754_pow+0x9c8>
 80122d8:	151b      	asrs	r3, r3, #20
 80122da:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80122de:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80122e2:	fa4a f303 	asr.w	r3, sl, r3
 80122e6:	445b      	add	r3, fp
 80122e8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80122ec:	4e9d      	ldr	r6, [pc, #628]	; (8012564 <__ieee754_pow+0xa44>)
 80122ee:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80122f2:	4116      	asrs	r6, r2
 80122f4:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80122f8:	2000      	movs	r0, #0
 80122fa:	ea23 0106 	bic.w	r1, r3, r6
 80122fe:	f1c2 0214 	rsb	r2, r2, #20
 8012302:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8012306:	fa4a fa02 	asr.w	sl, sl, r2
 801230a:	f1bb 0f00 	cmp.w	fp, #0
 801230e:	4602      	mov	r2, r0
 8012310:	460b      	mov	r3, r1
 8012312:	4620      	mov	r0, r4
 8012314:	4629      	mov	r1, r5
 8012316:	bfb8      	it	lt
 8012318:	f1ca 0a00 	rsblt	sl, sl, #0
 801231c:	f7ed ffb4 	bl	8000288 <__aeabi_dsub>
 8012320:	ec41 0b19 	vmov	d9, r0, r1
 8012324:	4642      	mov	r2, r8
 8012326:	464b      	mov	r3, r9
 8012328:	ec51 0b19 	vmov	r0, r1, d9
 801232c:	f7ed ffae 	bl	800028c <__adddf3>
 8012330:	a37b      	add	r3, pc, #492	; (adr r3, 8012520 <__ieee754_pow+0xa00>)
 8012332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012336:	2000      	movs	r0, #0
 8012338:	4604      	mov	r4, r0
 801233a:	460d      	mov	r5, r1
 801233c:	f7ee f95c 	bl	80005f8 <__aeabi_dmul>
 8012340:	ec53 2b19 	vmov	r2, r3, d9
 8012344:	4606      	mov	r6, r0
 8012346:	460f      	mov	r7, r1
 8012348:	4620      	mov	r0, r4
 801234a:	4629      	mov	r1, r5
 801234c:	f7ed ff9c 	bl	8000288 <__aeabi_dsub>
 8012350:	4602      	mov	r2, r0
 8012352:	460b      	mov	r3, r1
 8012354:	4640      	mov	r0, r8
 8012356:	4649      	mov	r1, r9
 8012358:	f7ed ff96 	bl	8000288 <__aeabi_dsub>
 801235c:	a372      	add	r3, pc, #456	; (adr r3, 8012528 <__ieee754_pow+0xa08>)
 801235e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012362:	f7ee f949 	bl	80005f8 <__aeabi_dmul>
 8012366:	a372      	add	r3, pc, #456	; (adr r3, 8012530 <__ieee754_pow+0xa10>)
 8012368:	e9d3 2300 	ldrd	r2, r3, [r3]
 801236c:	4680      	mov	r8, r0
 801236e:	4689      	mov	r9, r1
 8012370:	4620      	mov	r0, r4
 8012372:	4629      	mov	r1, r5
 8012374:	f7ee f940 	bl	80005f8 <__aeabi_dmul>
 8012378:	4602      	mov	r2, r0
 801237a:	460b      	mov	r3, r1
 801237c:	4640      	mov	r0, r8
 801237e:	4649      	mov	r1, r9
 8012380:	f7ed ff84 	bl	800028c <__adddf3>
 8012384:	4604      	mov	r4, r0
 8012386:	460d      	mov	r5, r1
 8012388:	4602      	mov	r2, r0
 801238a:	460b      	mov	r3, r1
 801238c:	4630      	mov	r0, r6
 801238e:	4639      	mov	r1, r7
 8012390:	f7ed ff7c 	bl	800028c <__adddf3>
 8012394:	4632      	mov	r2, r6
 8012396:	463b      	mov	r3, r7
 8012398:	4680      	mov	r8, r0
 801239a:	4689      	mov	r9, r1
 801239c:	f7ed ff74 	bl	8000288 <__aeabi_dsub>
 80123a0:	4602      	mov	r2, r0
 80123a2:	460b      	mov	r3, r1
 80123a4:	4620      	mov	r0, r4
 80123a6:	4629      	mov	r1, r5
 80123a8:	f7ed ff6e 	bl	8000288 <__aeabi_dsub>
 80123ac:	4642      	mov	r2, r8
 80123ae:	4606      	mov	r6, r0
 80123b0:	460f      	mov	r7, r1
 80123b2:	464b      	mov	r3, r9
 80123b4:	4640      	mov	r0, r8
 80123b6:	4649      	mov	r1, r9
 80123b8:	f7ee f91e 	bl	80005f8 <__aeabi_dmul>
 80123bc:	a35e      	add	r3, pc, #376	; (adr r3, 8012538 <__ieee754_pow+0xa18>)
 80123be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123c2:	4604      	mov	r4, r0
 80123c4:	460d      	mov	r5, r1
 80123c6:	f7ee f917 	bl	80005f8 <__aeabi_dmul>
 80123ca:	a35d      	add	r3, pc, #372	; (adr r3, 8012540 <__ieee754_pow+0xa20>)
 80123cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123d0:	f7ed ff5a 	bl	8000288 <__aeabi_dsub>
 80123d4:	4622      	mov	r2, r4
 80123d6:	462b      	mov	r3, r5
 80123d8:	f7ee f90e 	bl	80005f8 <__aeabi_dmul>
 80123dc:	a35a      	add	r3, pc, #360	; (adr r3, 8012548 <__ieee754_pow+0xa28>)
 80123de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123e2:	f7ed ff53 	bl	800028c <__adddf3>
 80123e6:	4622      	mov	r2, r4
 80123e8:	462b      	mov	r3, r5
 80123ea:	f7ee f905 	bl	80005f8 <__aeabi_dmul>
 80123ee:	a358      	add	r3, pc, #352	; (adr r3, 8012550 <__ieee754_pow+0xa30>)
 80123f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123f4:	f7ed ff48 	bl	8000288 <__aeabi_dsub>
 80123f8:	4622      	mov	r2, r4
 80123fa:	462b      	mov	r3, r5
 80123fc:	f7ee f8fc 	bl	80005f8 <__aeabi_dmul>
 8012400:	a355      	add	r3, pc, #340	; (adr r3, 8012558 <__ieee754_pow+0xa38>)
 8012402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012406:	f7ed ff41 	bl	800028c <__adddf3>
 801240a:	4622      	mov	r2, r4
 801240c:	462b      	mov	r3, r5
 801240e:	f7ee f8f3 	bl	80005f8 <__aeabi_dmul>
 8012412:	4602      	mov	r2, r0
 8012414:	460b      	mov	r3, r1
 8012416:	4640      	mov	r0, r8
 8012418:	4649      	mov	r1, r9
 801241a:	f7ed ff35 	bl	8000288 <__aeabi_dsub>
 801241e:	4604      	mov	r4, r0
 8012420:	460d      	mov	r5, r1
 8012422:	4602      	mov	r2, r0
 8012424:	460b      	mov	r3, r1
 8012426:	4640      	mov	r0, r8
 8012428:	4649      	mov	r1, r9
 801242a:	f7ee f8e5 	bl	80005f8 <__aeabi_dmul>
 801242e:	2200      	movs	r2, #0
 8012430:	ec41 0b19 	vmov	d9, r0, r1
 8012434:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8012438:	4620      	mov	r0, r4
 801243a:	4629      	mov	r1, r5
 801243c:	f7ed ff24 	bl	8000288 <__aeabi_dsub>
 8012440:	4602      	mov	r2, r0
 8012442:	460b      	mov	r3, r1
 8012444:	ec51 0b19 	vmov	r0, r1, d9
 8012448:	f7ee fa00 	bl	800084c <__aeabi_ddiv>
 801244c:	4632      	mov	r2, r6
 801244e:	4604      	mov	r4, r0
 8012450:	460d      	mov	r5, r1
 8012452:	463b      	mov	r3, r7
 8012454:	4640      	mov	r0, r8
 8012456:	4649      	mov	r1, r9
 8012458:	f7ee f8ce 	bl	80005f8 <__aeabi_dmul>
 801245c:	4632      	mov	r2, r6
 801245e:	463b      	mov	r3, r7
 8012460:	f7ed ff14 	bl	800028c <__adddf3>
 8012464:	4602      	mov	r2, r0
 8012466:	460b      	mov	r3, r1
 8012468:	4620      	mov	r0, r4
 801246a:	4629      	mov	r1, r5
 801246c:	f7ed ff0c 	bl	8000288 <__aeabi_dsub>
 8012470:	4642      	mov	r2, r8
 8012472:	464b      	mov	r3, r9
 8012474:	f7ed ff08 	bl	8000288 <__aeabi_dsub>
 8012478:	460b      	mov	r3, r1
 801247a:	4602      	mov	r2, r0
 801247c:	493a      	ldr	r1, [pc, #232]	; (8012568 <__ieee754_pow+0xa48>)
 801247e:	2000      	movs	r0, #0
 8012480:	f7ed ff02 	bl	8000288 <__aeabi_dsub>
 8012484:	ec41 0b10 	vmov	d0, r0, r1
 8012488:	ee10 3a90 	vmov	r3, s1
 801248c:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8012490:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8012494:	da2b      	bge.n	80124ee <__ieee754_pow+0x9ce>
 8012496:	4650      	mov	r0, sl
 8012498:	f001 fa3a 	bl	8013910 <scalbn>
 801249c:	ec51 0b10 	vmov	r0, r1, d0
 80124a0:	ec53 2b18 	vmov	r2, r3, d8
 80124a4:	f7ff bbed 	b.w	8011c82 <__ieee754_pow+0x162>
 80124a8:	4b30      	ldr	r3, [pc, #192]	; (801256c <__ieee754_pow+0xa4c>)
 80124aa:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80124ae:	429e      	cmp	r6, r3
 80124b0:	f77f af0c 	ble.w	80122cc <__ieee754_pow+0x7ac>
 80124b4:	4b2e      	ldr	r3, [pc, #184]	; (8012570 <__ieee754_pow+0xa50>)
 80124b6:	440b      	add	r3, r1
 80124b8:	4303      	orrs	r3, r0
 80124ba:	d009      	beq.n	80124d0 <__ieee754_pow+0x9b0>
 80124bc:	ec51 0b18 	vmov	r0, r1, d8
 80124c0:	2200      	movs	r2, #0
 80124c2:	2300      	movs	r3, #0
 80124c4:	f7ee fb0a 	bl	8000adc <__aeabi_dcmplt>
 80124c8:	3800      	subs	r0, #0
 80124ca:	bf18      	it	ne
 80124cc:	2001      	movne	r0, #1
 80124ce:	e447      	b.n	8011d60 <__ieee754_pow+0x240>
 80124d0:	4622      	mov	r2, r4
 80124d2:	462b      	mov	r3, r5
 80124d4:	f7ed fed8 	bl	8000288 <__aeabi_dsub>
 80124d8:	4642      	mov	r2, r8
 80124da:	464b      	mov	r3, r9
 80124dc:	f7ee fb12 	bl	8000b04 <__aeabi_dcmpge>
 80124e0:	2800      	cmp	r0, #0
 80124e2:	f43f aef3 	beq.w	80122cc <__ieee754_pow+0x7ac>
 80124e6:	e7e9      	b.n	80124bc <__ieee754_pow+0x99c>
 80124e8:	f04f 0a00 	mov.w	sl, #0
 80124ec:	e71a      	b.n	8012324 <__ieee754_pow+0x804>
 80124ee:	ec51 0b10 	vmov	r0, r1, d0
 80124f2:	4619      	mov	r1, r3
 80124f4:	e7d4      	b.n	80124a0 <__ieee754_pow+0x980>
 80124f6:	491c      	ldr	r1, [pc, #112]	; (8012568 <__ieee754_pow+0xa48>)
 80124f8:	2000      	movs	r0, #0
 80124fa:	f7ff bb30 	b.w	8011b5e <__ieee754_pow+0x3e>
 80124fe:	2000      	movs	r0, #0
 8012500:	2100      	movs	r1, #0
 8012502:	f7ff bb2c 	b.w	8011b5e <__ieee754_pow+0x3e>
 8012506:	4630      	mov	r0, r6
 8012508:	4639      	mov	r1, r7
 801250a:	f7ff bb28 	b.w	8011b5e <__ieee754_pow+0x3e>
 801250e:	9204      	str	r2, [sp, #16]
 8012510:	f7ff bb7a 	b.w	8011c08 <__ieee754_pow+0xe8>
 8012514:	2300      	movs	r3, #0
 8012516:	f7ff bb64 	b.w	8011be2 <__ieee754_pow+0xc2>
 801251a:	bf00      	nop
 801251c:	f3af 8000 	nop.w
 8012520:	00000000 	.word	0x00000000
 8012524:	3fe62e43 	.word	0x3fe62e43
 8012528:	fefa39ef 	.word	0xfefa39ef
 801252c:	3fe62e42 	.word	0x3fe62e42
 8012530:	0ca86c39 	.word	0x0ca86c39
 8012534:	be205c61 	.word	0xbe205c61
 8012538:	72bea4d0 	.word	0x72bea4d0
 801253c:	3e663769 	.word	0x3e663769
 8012540:	c5d26bf1 	.word	0xc5d26bf1
 8012544:	3ebbbd41 	.word	0x3ebbbd41
 8012548:	af25de2c 	.word	0xaf25de2c
 801254c:	3f11566a 	.word	0x3f11566a
 8012550:	16bebd93 	.word	0x16bebd93
 8012554:	3f66c16c 	.word	0x3f66c16c
 8012558:	5555553e 	.word	0x5555553e
 801255c:	3fc55555 	.word	0x3fc55555
 8012560:	3fe00000 	.word	0x3fe00000
 8012564:	000fffff 	.word	0x000fffff
 8012568:	3ff00000 	.word	0x3ff00000
 801256c:	4090cbff 	.word	0x4090cbff
 8012570:	3f6f3400 	.word	0x3f6f3400
 8012574:	652b82fe 	.word	0x652b82fe
 8012578:	3c971547 	.word	0x3c971547

0801257c <__ieee754_sqrt>:
 801257c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012580:	ec55 4b10 	vmov	r4, r5, d0
 8012584:	4e55      	ldr	r6, [pc, #340]	; (80126dc <__ieee754_sqrt+0x160>)
 8012586:	43ae      	bics	r6, r5
 8012588:	ee10 0a10 	vmov	r0, s0
 801258c:	ee10 3a10 	vmov	r3, s0
 8012590:	462a      	mov	r2, r5
 8012592:	4629      	mov	r1, r5
 8012594:	d110      	bne.n	80125b8 <__ieee754_sqrt+0x3c>
 8012596:	ee10 2a10 	vmov	r2, s0
 801259a:	462b      	mov	r3, r5
 801259c:	f7ee f82c 	bl	80005f8 <__aeabi_dmul>
 80125a0:	4602      	mov	r2, r0
 80125a2:	460b      	mov	r3, r1
 80125a4:	4620      	mov	r0, r4
 80125a6:	4629      	mov	r1, r5
 80125a8:	f7ed fe70 	bl	800028c <__adddf3>
 80125ac:	4604      	mov	r4, r0
 80125ae:	460d      	mov	r5, r1
 80125b0:	ec45 4b10 	vmov	d0, r4, r5
 80125b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80125b8:	2d00      	cmp	r5, #0
 80125ba:	dc10      	bgt.n	80125de <__ieee754_sqrt+0x62>
 80125bc:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80125c0:	4330      	orrs	r0, r6
 80125c2:	d0f5      	beq.n	80125b0 <__ieee754_sqrt+0x34>
 80125c4:	b15d      	cbz	r5, 80125de <__ieee754_sqrt+0x62>
 80125c6:	ee10 2a10 	vmov	r2, s0
 80125ca:	462b      	mov	r3, r5
 80125cc:	ee10 0a10 	vmov	r0, s0
 80125d0:	f7ed fe5a 	bl	8000288 <__aeabi_dsub>
 80125d4:	4602      	mov	r2, r0
 80125d6:	460b      	mov	r3, r1
 80125d8:	f7ee f938 	bl	800084c <__aeabi_ddiv>
 80125dc:	e7e6      	b.n	80125ac <__ieee754_sqrt+0x30>
 80125de:	1512      	asrs	r2, r2, #20
 80125e0:	d074      	beq.n	80126cc <__ieee754_sqrt+0x150>
 80125e2:	07d4      	lsls	r4, r2, #31
 80125e4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80125e8:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 80125ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80125f0:	bf5e      	ittt	pl
 80125f2:	0fda      	lsrpl	r2, r3, #31
 80125f4:	005b      	lslpl	r3, r3, #1
 80125f6:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 80125fa:	2400      	movs	r4, #0
 80125fc:	0fda      	lsrs	r2, r3, #31
 80125fe:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8012602:	107f      	asrs	r7, r7, #1
 8012604:	005b      	lsls	r3, r3, #1
 8012606:	2516      	movs	r5, #22
 8012608:	4620      	mov	r0, r4
 801260a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 801260e:	1886      	adds	r6, r0, r2
 8012610:	428e      	cmp	r6, r1
 8012612:	bfde      	ittt	le
 8012614:	1b89      	suble	r1, r1, r6
 8012616:	18b0      	addle	r0, r6, r2
 8012618:	18a4      	addle	r4, r4, r2
 801261a:	0049      	lsls	r1, r1, #1
 801261c:	3d01      	subs	r5, #1
 801261e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8012622:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8012626:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801262a:	d1f0      	bne.n	801260e <__ieee754_sqrt+0x92>
 801262c:	462a      	mov	r2, r5
 801262e:	f04f 0e20 	mov.w	lr, #32
 8012632:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8012636:	4281      	cmp	r1, r0
 8012638:	eb06 0c05 	add.w	ip, r6, r5
 801263c:	dc02      	bgt.n	8012644 <__ieee754_sqrt+0xc8>
 801263e:	d113      	bne.n	8012668 <__ieee754_sqrt+0xec>
 8012640:	459c      	cmp	ip, r3
 8012642:	d811      	bhi.n	8012668 <__ieee754_sqrt+0xec>
 8012644:	f1bc 0f00 	cmp.w	ip, #0
 8012648:	eb0c 0506 	add.w	r5, ip, r6
 801264c:	da43      	bge.n	80126d6 <__ieee754_sqrt+0x15a>
 801264e:	2d00      	cmp	r5, #0
 8012650:	db41      	blt.n	80126d6 <__ieee754_sqrt+0x15a>
 8012652:	f100 0801 	add.w	r8, r0, #1
 8012656:	1a09      	subs	r1, r1, r0
 8012658:	459c      	cmp	ip, r3
 801265a:	bf88      	it	hi
 801265c:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8012660:	eba3 030c 	sub.w	r3, r3, ip
 8012664:	4432      	add	r2, r6
 8012666:	4640      	mov	r0, r8
 8012668:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 801266c:	f1be 0e01 	subs.w	lr, lr, #1
 8012670:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8012674:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8012678:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801267c:	d1db      	bne.n	8012636 <__ieee754_sqrt+0xba>
 801267e:	430b      	orrs	r3, r1
 8012680:	d006      	beq.n	8012690 <__ieee754_sqrt+0x114>
 8012682:	1c50      	adds	r0, r2, #1
 8012684:	bf13      	iteet	ne
 8012686:	3201      	addne	r2, #1
 8012688:	3401      	addeq	r4, #1
 801268a:	4672      	moveq	r2, lr
 801268c:	f022 0201 	bicne.w	r2, r2, #1
 8012690:	1063      	asrs	r3, r4, #1
 8012692:	0852      	lsrs	r2, r2, #1
 8012694:	07e1      	lsls	r1, r4, #31
 8012696:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 801269a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 801269e:	bf48      	it	mi
 80126a0:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 80126a4:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 80126a8:	4614      	mov	r4, r2
 80126aa:	e781      	b.n	80125b0 <__ieee754_sqrt+0x34>
 80126ac:	0ad9      	lsrs	r1, r3, #11
 80126ae:	3815      	subs	r0, #21
 80126b0:	055b      	lsls	r3, r3, #21
 80126b2:	2900      	cmp	r1, #0
 80126b4:	d0fa      	beq.n	80126ac <__ieee754_sqrt+0x130>
 80126b6:	02cd      	lsls	r5, r1, #11
 80126b8:	d50a      	bpl.n	80126d0 <__ieee754_sqrt+0x154>
 80126ba:	f1c2 0420 	rsb	r4, r2, #32
 80126be:	fa23 f404 	lsr.w	r4, r3, r4
 80126c2:	1e55      	subs	r5, r2, #1
 80126c4:	4093      	lsls	r3, r2
 80126c6:	4321      	orrs	r1, r4
 80126c8:	1b42      	subs	r2, r0, r5
 80126ca:	e78a      	b.n	80125e2 <__ieee754_sqrt+0x66>
 80126cc:	4610      	mov	r0, r2
 80126ce:	e7f0      	b.n	80126b2 <__ieee754_sqrt+0x136>
 80126d0:	0049      	lsls	r1, r1, #1
 80126d2:	3201      	adds	r2, #1
 80126d4:	e7ef      	b.n	80126b6 <__ieee754_sqrt+0x13a>
 80126d6:	4680      	mov	r8, r0
 80126d8:	e7bd      	b.n	8012656 <__ieee754_sqrt+0xda>
 80126da:	bf00      	nop
 80126dc:	7ff00000 	.word	0x7ff00000

080126e0 <__ieee754_asinf>:
 80126e0:	b538      	push	{r3, r4, r5, lr}
 80126e2:	ee10 5a10 	vmov	r5, s0
 80126e6:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 80126ea:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 80126ee:	ed2d 8b04 	vpush	{d8-d9}
 80126f2:	d10c      	bne.n	801270e <__ieee754_asinf+0x2e>
 80126f4:	eddf 7a5d 	vldr	s15, [pc, #372]	; 801286c <__ieee754_asinf+0x18c>
 80126f8:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8012870 <__ieee754_asinf+0x190>
 80126fc:	ee60 7a27 	vmul.f32	s15, s0, s15
 8012700:	eee0 7a07 	vfma.f32	s15, s0, s14
 8012704:	eeb0 0a67 	vmov.f32	s0, s15
 8012708:	ecbd 8b04 	vpop	{d8-d9}
 801270c:	bd38      	pop	{r3, r4, r5, pc}
 801270e:	dd04      	ble.n	801271a <__ieee754_asinf+0x3a>
 8012710:	ee70 7a40 	vsub.f32	s15, s0, s0
 8012714:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8012718:	e7f6      	b.n	8012708 <__ieee754_asinf+0x28>
 801271a:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 801271e:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8012722:	da0b      	bge.n	801273c <__ieee754_asinf+0x5c>
 8012724:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 8012728:	da52      	bge.n	80127d0 <__ieee754_asinf+0xf0>
 801272a:	eddf 7a52 	vldr	s15, [pc, #328]	; 8012874 <__ieee754_asinf+0x194>
 801272e:	ee70 7a27 	vadd.f32	s15, s0, s15
 8012732:	eef4 7ae8 	vcmpe.f32	s15, s17
 8012736:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801273a:	dce5      	bgt.n	8012708 <__ieee754_asinf+0x28>
 801273c:	f001 fa42 	bl	8013bc4 <fabsf>
 8012740:	ee38 0ac0 	vsub.f32	s0, s17, s0
 8012744:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 8012748:	ee20 8a08 	vmul.f32	s16, s0, s16
 801274c:	eddf 7a4a 	vldr	s15, [pc, #296]	; 8012878 <__ieee754_asinf+0x198>
 8012750:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 801287c <__ieee754_asinf+0x19c>
 8012754:	ed9f 9a4a 	vldr	s18, [pc, #296]	; 8012880 <__ieee754_asinf+0x1a0>
 8012758:	eea8 7a27 	vfma.f32	s14, s16, s15
 801275c:	eddf 7a49 	vldr	s15, [pc, #292]	; 8012884 <__ieee754_asinf+0x1a4>
 8012760:	eee7 7a08 	vfma.f32	s15, s14, s16
 8012764:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8012888 <__ieee754_asinf+0x1a8>
 8012768:	eea7 7a88 	vfma.f32	s14, s15, s16
 801276c:	eddf 7a47 	vldr	s15, [pc, #284]	; 801288c <__ieee754_asinf+0x1ac>
 8012770:	eee7 7a08 	vfma.f32	s15, s14, s16
 8012774:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8012890 <__ieee754_asinf+0x1b0>
 8012778:	eea7 9a88 	vfma.f32	s18, s15, s16
 801277c:	eddf 7a45 	vldr	s15, [pc, #276]	; 8012894 <__ieee754_asinf+0x1b4>
 8012780:	eee8 7a07 	vfma.f32	s15, s16, s14
 8012784:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8012898 <__ieee754_asinf+0x1b8>
 8012788:	eea7 7a88 	vfma.f32	s14, s15, s16
 801278c:	eddf 7a43 	vldr	s15, [pc, #268]	; 801289c <__ieee754_asinf+0x1bc>
 8012790:	eee7 7a08 	vfma.f32	s15, s14, s16
 8012794:	eeb0 0a48 	vmov.f32	s0, s16
 8012798:	eee7 8a88 	vfma.f32	s17, s15, s16
 801279c:	f000 fd30 	bl	8013200 <__ieee754_sqrtf>
 80127a0:	4b3f      	ldr	r3, [pc, #252]	; (80128a0 <__ieee754_asinf+0x1c0>)
 80127a2:	ee29 9a08 	vmul.f32	s18, s18, s16
 80127a6:	429c      	cmp	r4, r3
 80127a8:	ee89 6a28 	vdiv.f32	s12, s18, s17
 80127ac:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80127b0:	dd3d      	ble.n	801282e <__ieee754_asinf+0x14e>
 80127b2:	eea0 0a06 	vfma.f32	s0, s0, s12
 80127b6:	eddf 7a3b 	vldr	s15, [pc, #236]	; 80128a4 <__ieee754_asinf+0x1c4>
 80127ba:	eee0 7a26 	vfma.f32	s15, s0, s13
 80127be:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8012870 <__ieee754_asinf+0x190>
 80127c2:	ee30 0a67 	vsub.f32	s0, s0, s15
 80127c6:	2d00      	cmp	r5, #0
 80127c8:	bfd8      	it	le
 80127ca:	eeb1 0a40 	vnegle.f32	s0, s0
 80127ce:	e79b      	b.n	8012708 <__ieee754_asinf+0x28>
 80127d0:	ee60 7a00 	vmul.f32	s15, s0, s0
 80127d4:	eddf 6a28 	vldr	s13, [pc, #160]	; 8012878 <__ieee754_asinf+0x198>
 80127d8:	ed9f 7a28 	vldr	s14, [pc, #160]	; 801287c <__ieee754_asinf+0x19c>
 80127dc:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 8012890 <__ieee754_asinf+0x1b0>
 80127e0:	eea7 7aa6 	vfma.f32	s14, s15, s13
 80127e4:	eddf 6a27 	vldr	s13, [pc, #156]	; 8012884 <__ieee754_asinf+0x1a4>
 80127e8:	eee7 6a27 	vfma.f32	s13, s14, s15
 80127ec:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8012888 <__ieee754_asinf+0x1a8>
 80127f0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80127f4:	eddf 6a25 	vldr	s13, [pc, #148]	; 801288c <__ieee754_asinf+0x1ac>
 80127f8:	eee7 6a27 	vfma.f32	s13, s14, s15
 80127fc:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8012880 <__ieee754_asinf+0x1a0>
 8012800:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8012804:	eddf 6a23 	vldr	s13, [pc, #140]	; 8012894 <__ieee754_asinf+0x1b4>
 8012808:	eee7 6a86 	vfma.f32	s13, s15, s12
 801280c:	ed9f 6a22 	vldr	s12, [pc, #136]	; 8012898 <__ieee754_asinf+0x1b8>
 8012810:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8012814:	eddf 6a21 	vldr	s13, [pc, #132]	; 801289c <__ieee754_asinf+0x1bc>
 8012818:	eee6 6a27 	vfma.f32	s13, s12, s15
 801281c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8012820:	eee6 8aa7 	vfma.f32	s17, s13, s15
 8012824:	eec7 7a28 	vdiv.f32	s15, s14, s17
 8012828:	eea0 0a27 	vfma.f32	s0, s0, s15
 801282c:	e76c      	b.n	8012708 <__ieee754_asinf+0x28>
 801282e:	ee10 3a10 	vmov	r3, s0
 8012832:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8012836:	f023 030f 	bic.w	r3, r3, #15
 801283a:	ee07 3a10 	vmov	s14, r3
 801283e:	eea7 8a47 	vfms.f32	s16, s14, s14
 8012842:	ee70 7a07 	vadd.f32	s15, s0, s14
 8012846:	ee30 0a00 	vadd.f32	s0, s0, s0
 801284a:	eec8 5a27 	vdiv.f32	s11, s16, s15
 801284e:	eddf 7a07 	vldr	s15, [pc, #28]	; 801286c <__ieee754_asinf+0x18c>
 8012852:	eee5 7ae6 	vfms.f32	s15, s11, s13
 8012856:	eed0 7a06 	vfnms.f32	s15, s0, s12
 801285a:	ed9f 0a13 	vldr	s0, [pc, #76]	; 80128a8 <__ieee754_asinf+0x1c8>
 801285e:	eeb0 6a40 	vmov.f32	s12, s0
 8012862:	eea7 6a66 	vfms.f32	s12, s14, s13
 8012866:	ee77 7ac6 	vsub.f32	s15, s15, s12
 801286a:	e7aa      	b.n	80127c2 <__ieee754_asinf+0xe2>
 801286c:	b33bbd2e 	.word	0xb33bbd2e
 8012870:	3fc90fdb 	.word	0x3fc90fdb
 8012874:	7149f2ca 	.word	0x7149f2ca
 8012878:	3811ef08 	.word	0x3811ef08
 801287c:	3a4f7f04 	.word	0x3a4f7f04
 8012880:	3e2aaaab 	.word	0x3e2aaaab
 8012884:	bd241146 	.word	0xbd241146
 8012888:	3e4e0aa8 	.word	0x3e4e0aa8
 801288c:	bea6b090 	.word	0xbea6b090
 8012890:	3d9dc62e 	.word	0x3d9dc62e
 8012894:	bf303361 	.word	0xbf303361
 8012898:	4001572d 	.word	0x4001572d
 801289c:	c019d139 	.word	0xc019d139
 80128a0:	3f799999 	.word	0x3f799999
 80128a4:	333bbd2e 	.word	0x333bbd2e
 80128a8:	3f490fdb 	.word	0x3f490fdb

080128ac <__ieee754_atan2f>:
 80128ac:	ee10 2a90 	vmov	r2, s1
 80128b0:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 80128b4:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80128b8:	b510      	push	{r4, lr}
 80128ba:	eef0 7a40 	vmov.f32	s15, s0
 80128be:	dc06      	bgt.n	80128ce <__ieee754_atan2f+0x22>
 80128c0:	ee10 0a10 	vmov	r0, s0
 80128c4:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 80128c8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80128cc:	dd04      	ble.n	80128d8 <__ieee754_atan2f+0x2c>
 80128ce:	ee77 7aa0 	vadd.f32	s15, s15, s1
 80128d2:	eeb0 0a67 	vmov.f32	s0, s15
 80128d6:	bd10      	pop	{r4, pc}
 80128d8:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 80128dc:	d103      	bne.n	80128e6 <__ieee754_atan2f+0x3a>
 80128de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80128e2:	f001 b89b 	b.w	8013a1c <atanf>
 80128e6:	1794      	asrs	r4, r2, #30
 80128e8:	f004 0402 	and.w	r4, r4, #2
 80128ec:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 80128f0:	b943      	cbnz	r3, 8012904 <__ieee754_atan2f+0x58>
 80128f2:	2c02      	cmp	r4, #2
 80128f4:	d05e      	beq.n	80129b4 <__ieee754_atan2f+0x108>
 80128f6:	ed9f 7a34 	vldr	s14, [pc, #208]	; 80129c8 <__ieee754_atan2f+0x11c>
 80128fa:	2c03      	cmp	r4, #3
 80128fc:	bf08      	it	eq
 80128fe:	eef0 7a47 	vmoveq.f32	s15, s14
 8012902:	e7e6      	b.n	80128d2 <__ieee754_atan2f+0x26>
 8012904:	b941      	cbnz	r1, 8012918 <__ieee754_atan2f+0x6c>
 8012906:	eddf 7a31 	vldr	s15, [pc, #196]	; 80129cc <__ieee754_atan2f+0x120>
 801290a:	ed9f 0a31 	vldr	s0, [pc, #196]	; 80129d0 <__ieee754_atan2f+0x124>
 801290e:	2800      	cmp	r0, #0
 8012910:	bfb8      	it	lt
 8012912:	eef0 7a40 	vmovlt.f32	s15, s0
 8012916:	e7dc      	b.n	80128d2 <__ieee754_atan2f+0x26>
 8012918:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 801291c:	d110      	bne.n	8012940 <__ieee754_atan2f+0x94>
 801291e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8012922:	f104 34ff 	add.w	r4, r4, #4294967295
 8012926:	d107      	bne.n	8012938 <__ieee754_atan2f+0x8c>
 8012928:	2c02      	cmp	r4, #2
 801292a:	d846      	bhi.n	80129ba <__ieee754_atan2f+0x10e>
 801292c:	4b29      	ldr	r3, [pc, #164]	; (80129d4 <__ieee754_atan2f+0x128>)
 801292e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8012932:	edd4 7a00 	vldr	s15, [r4]
 8012936:	e7cc      	b.n	80128d2 <__ieee754_atan2f+0x26>
 8012938:	2c02      	cmp	r4, #2
 801293a:	d841      	bhi.n	80129c0 <__ieee754_atan2f+0x114>
 801293c:	4b26      	ldr	r3, [pc, #152]	; (80129d8 <__ieee754_atan2f+0x12c>)
 801293e:	e7f6      	b.n	801292e <__ieee754_atan2f+0x82>
 8012940:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8012944:	d0df      	beq.n	8012906 <__ieee754_atan2f+0x5a>
 8012946:	1a5b      	subs	r3, r3, r1
 8012948:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 801294c:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8012950:	da1a      	bge.n	8012988 <__ieee754_atan2f+0xdc>
 8012952:	2a00      	cmp	r2, #0
 8012954:	da01      	bge.n	801295a <__ieee754_atan2f+0xae>
 8012956:	313c      	adds	r1, #60	; 0x3c
 8012958:	db19      	blt.n	801298e <__ieee754_atan2f+0xe2>
 801295a:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 801295e:	f001 f931 	bl	8013bc4 <fabsf>
 8012962:	f001 f85b 	bl	8013a1c <atanf>
 8012966:	eef0 7a40 	vmov.f32	s15, s0
 801296a:	2c01      	cmp	r4, #1
 801296c:	d012      	beq.n	8012994 <__ieee754_atan2f+0xe8>
 801296e:	2c02      	cmp	r4, #2
 8012970:	d017      	beq.n	80129a2 <__ieee754_atan2f+0xf6>
 8012972:	2c00      	cmp	r4, #0
 8012974:	d0ad      	beq.n	80128d2 <__ieee754_atan2f+0x26>
 8012976:	ed9f 0a19 	vldr	s0, [pc, #100]	; 80129dc <__ieee754_atan2f+0x130>
 801297a:	ee77 7a80 	vadd.f32	s15, s15, s0
 801297e:	ed9f 0a18 	vldr	s0, [pc, #96]	; 80129e0 <__ieee754_atan2f+0x134>
 8012982:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8012986:	e7a4      	b.n	80128d2 <__ieee754_atan2f+0x26>
 8012988:	eddf 7a10 	vldr	s15, [pc, #64]	; 80129cc <__ieee754_atan2f+0x120>
 801298c:	e7ed      	b.n	801296a <__ieee754_atan2f+0xbe>
 801298e:	eddf 7a15 	vldr	s15, [pc, #84]	; 80129e4 <__ieee754_atan2f+0x138>
 8012992:	e7ea      	b.n	801296a <__ieee754_atan2f+0xbe>
 8012994:	ee17 3a90 	vmov	r3, s15
 8012998:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801299c:	ee07 3a90 	vmov	s15, r3
 80129a0:	e797      	b.n	80128d2 <__ieee754_atan2f+0x26>
 80129a2:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 80129dc <__ieee754_atan2f+0x130>
 80129a6:	ee77 7a80 	vadd.f32	s15, s15, s0
 80129aa:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 80129e0 <__ieee754_atan2f+0x134>
 80129ae:	ee70 7a67 	vsub.f32	s15, s0, s15
 80129b2:	e78e      	b.n	80128d2 <__ieee754_atan2f+0x26>
 80129b4:	eddf 7a0a 	vldr	s15, [pc, #40]	; 80129e0 <__ieee754_atan2f+0x134>
 80129b8:	e78b      	b.n	80128d2 <__ieee754_atan2f+0x26>
 80129ba:	eddf 7a0b 	vldr	s15, [pc, #44]	; 80129e8 <__ieee754_atan2f+0x13c>
 80129be:	e788      	b.n	80128d2 <__ieee754_atan2f+0x26>
 80129c0:	eddf 7a08 	vldr	s15, [pc, #32]	; 80129e4 <__ieee754_atan2f+0x138>
 80129c4:	e785      	b.n	80128d2 <__ieee754_atan2f+0x26>
 80129c6:	bf00      	nop
 80129c8:	c0490fdb 	.word	0xc0490fdb
 80129cc:	3fc90fdb 	.word	0x3fc90fdb
 80129d0:	bfc90fdb 	.word	0xbfc90fdb
 80129d4:	080142f0 	.word	0x080142f0
 80129d8:	080142fc 	.word	0x080142fc
 80129dc:	33bbbd2e 	.word	0x33bbbd2e
 80129e0:	40490fdb 	.word	0x40490fdb
 80129e4:	00000000 	.word	0x00000000
 80129e8:	3f490fdb 	.word	0x3f490fdb

080129ec <__ieee754_powf>:
 80129ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80129f0:	ee10 4a90 	vmov	r4, s1
 80129f4:	f034 4800 	bics.w	r8, r4, #2147483648	; 0x80000000
 80129f8:	ed2d 8b02 	vpush	{d8}
 80129fc:	ee10 6a10 	vmov	r6, s0
 8012a00:	eeb0 8a40 	vmov.f32	s16, s0
 8012a04:	eef0 8a60 	vmov.f32	s17, s1
 8012a08:	d10c      	bne.n	8012a24 <__ieee754_powf+0x38>
 8012a0a:	f486 0680 	eor.w	r6, r6, #4194304	; 0x400000
 8012a0e:	0076      	lsls	r6, r6, #1
 8012a10:	f516 0f00 	cmn.w	r6, #8388608	; 0x800000
 8012a14:	f240 8296 	bls.w	8012f44 <__ieee754_powf+0x558>
 8012a18:	ee38 0a28 	vadd.f32	s0, s16, s17
 8012a1c:	ecbd 8b02 	vpop	{d8}
 8012a20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012a24:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8012a28:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8012a2c:	dcf4      	bgt.n	8012a18 <__ieee754_powf+0x2c>
 8012a2e:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 8012a32:	dd08      	ble.n	8012a46 <__ieee754_powf+0x5a>
 8012a34:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
 8012a38:	d1ee      	bne.n	8012a18 <__ieee754_powf+0x2c>
 8012a3a:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 8012a3e:	0064      	lsls	r4, r4, #1
 8012a40:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 8012a44:	e7e6      	b.n	8012a14 <__ieee754_powf+0x28>
 8012a46:	2e00      	cmp	r6, #0
 8012a48:	da20      	bge.n	8012a8c <__ieee754_powf+0xa0>
 8012a4a:	f1b8 4f97 	cmp.w	r8, #1266679808	; 0x4b800000
 8012a4e:	da2d      	bge.n	8012aac <__ieee754_powf+0xc0>
 8012a50:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 8012a54:	f2c0 827f 	blt.w	8012f56 <__ieee754_powf+0x56a>
 8012a58:	ea4f 53e8 	mov.w	r3, r8, asr #23
 8012a5c:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8012a60:	fa48 f703 	asr.w	r7, r8, r3
 8012a64:	fa07 f303 	lsl.w	r3, r7, r3
 8012a68:	4543      	cmp	r3, r8
 8012a6a:	f040 8274 	bne.w	8012f56 <__ieee754_powf+0x56a>
 8012a6e:	f007 0701 	and.w	r7, r7, #1
 8012a72:	f1c7 0702 	rsb	r7, r7, #2
 8012a76:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 8012a7a:	d11f      	bne.n	8012abc <__ieee754_powf+0xd0>
 8012a7c:	2c00      	cmp	r4, #0
 8012a7e:	f280 8267 	bge.w	8012f50 <__ieee754_powf+0x564>
 8012a82:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8012a86:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8012a8a:	e7c7      	b.n	8012a1c <__ieee754_powf+0x30>
 8012a8c:	2700      	movs	r7, #0
 8012a8e:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 8012a92:	d1f0      	bne.n	8012a76 <__ieee754_powf+0x8a>
 8012a94:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 8012a98:	f000 8254 	beq.w	8012f44 <__ieee754_powf+0x558>
 8012a9c:	dd08      	ble.n	8012ab0 <__ieee754_powf+0xc4>
 8012a9e:	ed9f 0ac2 	vldr	s0, [pc, #776]	; 8012da8 <__ieee754_powf+0x3bc>
 8012aa2:	2c00      	cmp	r4, #0
 8012aa4:	bfa8      	it	ge
 8012aa6:	eeb0 0a68 	vmovge.f32	s0, s17
 8012aaa:	e7b7      	b.n	8012a1c <__ieee754_powf+0x30>
 8012aac:	2702      	movs	r7, #2
 8012aae:	e7ee      	b.n	8012a8e <__ieee754_powf+0xa2>
 8012ab0:	2c00      	cmp	r4, #0
 8012ab2:	f280 824a 	bge.w	8012f4a <__ieee754_powf+0x55e>
 8012ab6:	eeb1 0a68 	vneg.f32	s0, s17
 8012aba:	e7af      	b.n	8012a1c <__ieee754_powf+0x30>
 8012abc:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 8012ac0:	d102      	bne.n	8012ac8 <__ieee754_powf+0xdc>
 8012ac2:	ee28 0a08 	vmul.f32	s0, s16, s16
 8012ac6:	e7a9      	b.n	8012a1c <__ieee754_powf+0x30>
 8012ac8:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 8012acc:	eeb0 0a48 	vmov.f32	s0, s16
 8012ad0:	d107      	bne.n	8012ae2 <__ieee754_powf+0xf6>
 8012ad2:	2e00      	cmp	r6, #0
 8012ad4:	db05      	blt.n	8012ae2 <__ieee754_powf+0xf6>
 8012ad6:	ecbd 8b02 	vpop	{d8}
 8012ada:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012ade:	f000 bb8f 	b.w	8013200 <__ieee754_sqrtf>
 8012ae2:	f001 f86f 	bl	8013bc4 <fabsf>
 8012ae6:	b125      	cbz	r5, 8012af2 <__ieee754_powf+0x106>
 8012ae8:	f026 4340 	bic.w	r3, r6, #3221225472	; 0xc0000000
 8012aec:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8012af0:	d116      	bne.n	8012b20 <__ieee754_powf+0x134>
 8012af2:	2c00      	cmp	r4, #0
 8012af4:	bfbc      	itt	lt
 8012af6:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 8012afa:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8012afe:	2e00      	cmp	r6, #0
 8012b00:	da8c      	bge.n	8012a1c <__ieee754_powf+0x30>
 8012b02:	f1a5 557e 	sub.w	r5, r5, #1065353216	; 0x3f800000
 8012b06:	ea55 0307 	orrs.w	r3, r5, r7
 8012b0a:	d104      	bne.n	8012b16 <__ieee754_powf+0x12a>
 8012b0c:	ee70 7a40 	vsub.f32	s15, s0, s0
 8012b10:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8012b14:	e782      	b.n	8012a1c <__ieee754_powf+0x30>
 8012b16:	2f01      	cmp	r7, #1
 8012b18:	d180      	bne.n	8012a1c <__ieee754_powf+0x30>
 8012b1a:	eeb1 0a40 	vneg.f32	s0, s0
 8012b1e:	e77d      	b.n	8012a1c <__ieee754_powf+0x30>
 8012b20:	0ff0      	lsrs	r0, r6, #31
 8012b22:	3801      	subs	r0, #1
 8012b24:	ea57 0300 	orrs.w	r3, r7, r0
 8012b28:	d104      	bne.n	8012b34 <__ieee754_powf+0x148>
 8012b2a:	ee38 8a48 	vsub.f32	s16, s16, s16
 8012b2e:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8012b32:	e773      	b.n	8012a1c <__ieee754_powf+0x30>
 8012b34:	f1b8 4f9a 	cmp.w	r8, #1291845632	; 0x4d000000
 8012b38:	dd74      	ble.n	8012c24 <__ieee754_powf+0x238>
 8012b3a:	4b9c      	ldr	r3, [pc, #624]	; (8012dac <__ieee754_powf+0x3c0>)
 8012b3c:	429d      	cmp	r5, r3
 8012b3e:	dc08      	bgt.n	8012b52 <__ieee754_powf+0x166>
 8012b40:	2c00      	cmp	r4, #0
 8012b42:	da0b      	bge.n	8012b5c <__ieee754_powf+0x170>
 8012b44:	2000      	movs	r0, #0
 8012b46:	ecbd 8b02 	vpop	{d8}
 8012b4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012b4e:	f000 bec5 	b.w	80138dc <__math_oflowf>
 8012b52:	4b97      	ldr	r3, [pc, #604]	; (8012db0 <__ieee754_powf+0x3c4>)
 8012b54:	429d      	cmp	r5, r3
 8012b56:	dd08      	ble.n	8012b6a <__ieee754_powf+0x17e>
 8012b58:	2c00      	cmp	r4, #0
 8012b5a:	dcf3      	bgt.n	8012b44 <__ieee754_powf+0x158>
 8012b5c:	2000      	movs	r0, #0
 8012b5e:	ecbd 8b02 	vpop	{d8}
 8012b62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012b66:	f000 beb3 	b.w	80138d0 <__math_uflowf>
 8012b6a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8012b6e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8012b72:	eddf 6a90 	vldr	s13, [pc, #576]	; 8012db4 <__ieee754_powf+0x3c8>
 8012b76:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8012b7a:	eee0 6a67 	vfms.f32	s13, s0, s15
 8012b7e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8012b82:	eee6 7ac0 	vfms.f32	s15, s13, s0
 8012b86:	ee20 7a00 	vmul.f32	s14, s0, s0
 8012b8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012b8e:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8012db8 <__ieee754_powf+0x3cc>
 8012b92:	ee67 7a67 	vnmul.f32	s15, s14, s15
 8012b96:	ed9f 7a89 	vldr	s14, [pc, #548]	; 8012dbc <__ieee754_powf+0x3d0>
 8012b9a:	eee0 7a07 	vfma.f32	s15, s0, s14
 8012b9e:	ed9f 7a88 	vldr	s14, [pc, #544]	; 8012dc0 <__ieee754_powf+0x3d4>
 8012ba2:	eef0 6a67 	vmov.f32	s13, s15
 8012ba6:	eee0 6a07 	vfma.f32	s13, s0, s14
 8012baa:	ee16 3a90 	vmov	r3, s13
 8012bae:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8012bb2:	f023 030f 	bic.w	r3, r3, #15
 8012bb6:	ee00 3a90 	vmov	s1, r3
 8012bba:	eee0 0a47 	vfms.f32	s1, s0, s14
 8012bbe:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8012bc2:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 8012bc6:	f024 040f 	bic.w	r4, r4, #15
 8012bca:	ee07 4a10 	vmov	s14, r4
 8012bce:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8012bd2:	ee38 7ac7 	vsub.f32	s14, s17, s14
 8012bd6:	ee07 3a90 	vmov	s15, r3
 8012bda:	eee7 0a27 	vfma.f32	s1, s14, s15
 8012bde:	3f01      	subs	r7, #1
 8012be0:	ea57 0200 	orrs.w	r2, r7, r0
 8012be4:	ee07 4a10 	vmov	s14, r4
 8012be8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012bec:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8012bf0:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8012bf4:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8012bf8:	ee17 4a10 	vmov	r4, s14
 8012bfc:	bf08      	it	eq
 8012bfe:	eeb0 8a40 	vmoveq.f32	s16, s0
 8012c02:	2c00      	cmp	r4, #0
 8012c04:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8012c08:	f340 817e 	ble.w	8012f08 <__ieee754_powf+0x51c>
 8012c0c:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 8012c10:	f340 80f8 	ble.w	8012e04 <__ieee754_powf+0x418>
 8012c14:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8012c18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c1c:	bf4c      	ite	mi
 8012c1e:	2001      	movmi	r0, #1
 8012c20:	2000      	movpl	r0, #0
 8012c22:	e790      	b.n	8012b46 <__ieee754_powf+0x15a>
 8012c24:	f016 4fff 	tst.w	r6, #2139095040	; 0x7f800000
 8012c28:	bf01      	itttt	eq
 8012c2a:	eddf 7a66 	vldreq	s15, [pc, #408]	; 8012dc4 <__ieee754_powf+0x3d8>
 8012c2e:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 8012c32:	f06f 0217 	mvneq.w	r2, #23
 8012c36:	ee17 5a90 	vmoveq	r5, s15
 8012c3a:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8012c3e:	bf18      	it	ne
 8012c40:	2200      	movne	r2, #0
 8012c42:	3b7f      	subs	r3, #127	; 0x7f
 8012c44:	4413      	add	r3, r2
 8012c46:	4a60      	ldr	r2, [pc, #384]	; (8012dc8 <__ieee754_powf+0x3dc>)
 8012c48:	f3c5 0516 	ubfx	r5, r5, #0, #23
 8012c4c:	4295      	cmp	r5, r2
 8012c4e:	f045 517e 	orr.w	r1, r5, #1065353216	; 0x3f800000
 8012c52:	dd06      	ble.n	8012c62 <__ieee754_powf+0x276>
 8012c54:	4a5d      	ldr	r2, [pc, #372]	; (8012dcc <__ieee754_powf+0x3e0>)
 8012c56:	4295      	cmp	r5, r2
 8012c58:	f340 80a4 	ble.w	8012da4 <__ieee754_powf+0x3b8>
 8012c5c:	3301      	adds	r3, #1
 8012c5e:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8012c62:	2500      	movs	r5, #0
 8012c64:	4a5a      	ldr	r2, [pc, #360]	; (8012dd0 <__ieee754_powf+0x3e4>)
 8012c66:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 8012c6a:	ee07 1a90 	vmov	s15, r1
 8012c6e:	ed92 7a00 	vldr	s14, [r2]
 8012c72:	4a58      	ldr	r2, [pc, #352]	; (8012dd4 <__ieee754_powf+0x3e8>)
 8012c74:	ee37 6a27 	vadd.f32	s12, s14, s15
 8012c78:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8012c7c:	eec5 6a86 	vdiv.f32	s13, s11, s12
 8012c80:	1049      	asrs	r1, r1, #1
 8012c82:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8012c86:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 8012c8a:	eb01 5145 	add.w	r1, r1, r5, lsl #21
 8012c8e:	ee37 5ac7 	vsub.f32	s10, s15, s14
 8012c92:	ee06 1a10 	vmov	s12, r1
 8012c96:	ee65 4a26 	vmul.f32	s9, s10, s13
 8012c9a:	ee36 7a47 	vsub.f32	s14, s12, s14
 8012c9e:	ee14 6a90 	vmov	r6, s9
 8012ca2:	4016      	ands	r6, r2
 8012ca4:	ee05 6a90 	vmov	s11, r6
 8012ca8:	eea5 5ac6 	vfms.f32	s10, s11, s12
 8012cac:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012cb0:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8012dd8 <__ieee754_powf+0x3ec>
 8012cb4:	eea5 5ae7 	vfms.f32	s10, s11, s15
 8012cb8:	ee64 7aa4 	vmul.f32	s15, s9, s9
 8012cbc:	ee25 6a26 	vmul.f32	s12, s10, s13
 8012cc0:	eddf 6a46 	vldr	s13, [pc, #280]	; 8012ddc <__ieee754_powf+0x3f0>
 8012cc4:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8012cc8:	eddf 6a45 	vldr	s13, [pc, #276]	; 8012de0 <__ieee754_powf+0x3f4>
 8012ccc:	eee7 6a27 	vfma.f32	s13, s14, s15
 8012cd0:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8012db4 <__ieee754_powf+0x3c8>
 8012cd4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8012cd8:	eddf 6a42 	vldr	s13, [pc, #264]	; 8012de4 <__ieee754_powf+0x3f8>
 8012cdc:	eee7 6a27 	vfma.f32	s13, s14, s15
 8012ce0:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8012de8 <__ieee754_powf+0x3fc>
 8012ce4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8012ce8:	ee74 6aa5 	vadd.f32	s13, s9, s11
 8012cec:	ee27 5aa7 	vmul.f32	s10, s15, s15
 8012cf0:	ee66 6a86 	vmul.f32	s13, s13, s12
 8012cf4:	eee5 6a07 	vfma.f32	s13, s10, s14
 8012cf8:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 8012cfc:	eef0 7a45 	vmov.f32	s15, s10
 8012d00:	eee5 7aa5 	vfma.f32	s15, s11, s11
 8012d04:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012d08:	ee17 1a90 	vmov	r1, s15
 8012d0c:	4011      	ands	r1, r2
 8012d0e:	ee07 1a90 	vmov	s15, r1
 8012d12:	ee37 7ac5 	vsub.f32	s14, s15, s10
 8012d16:	eea5 7ae5 	vfms.f32	s14, s11, s11
 8012d1a:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8012d1e:	ee27 7a24 	vmul.f32	s14, s14, s9
 8012d22:	eea6 7a27 	vfma.f32	s14, s12, s15
 8012d26:	eeb0 6a47 	vmov.f32	s12, s14
 8012d2a:	eea5 6aa7 	vfma.f32	s12, s11, s15
 8012d2e:	ee16 1a10 	vmov	r1, s12
 8012d32:	4011      	ands	r1, r2
 8012d34:	ee06 1a90 	vmov	s13, r1
 8012d38:	eee5 6ae7 	vfms.f32	s13, s11, s15
 8012d3c:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8012dec <__ieee754_powf+0x400>
 8012d40:	eddf 5a2b 	vldr	s11, [pc, #172]	; 8012df0 <__ieee754_powf+0x404>
 8012d44:	ee37 7a66 	vsub.f32	s14, s14, s13
 8012d48:	ee06 1a10 	vmov	s12, r1
 8012d4c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8012d50:	eddf 7a28 	vldr	s15, [pc, #160]	; 8012df4 <__ieee754_powf+0x408>
 8012d54:	4928      	ldr	r1, [pc, #160]	; (8012df8 <__ieee754_powf+0x40c>)
 8012d56:	eea6 7a27 	vfma.f32	s14, s12, s15
 8012d5a:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 8012d5e:	edd1 7a00 	vldr	s15, [r1]
 8012d62:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012d66:	ee07 3a90 	vmov	s15, r3
 8012d6a:	4b24      	ldr	r3, [pc, #144]	; (8012dfc <__ieee754_powf+0x410>)
 8012d6c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8012d70:	eef0 7a47 	vmov.f32	s15, s14
 8012d74:	eee6 7a25 	vfma.f32	s15, s12, s11
 8012d78:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8012d7c:	edd5 0a00 	vldr	s1, [r5]
 8012d80:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8012d84:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012d88:	ee17 3a90 	vmov	r3, s15
 8012d8c:	4013      	ands	r3, r2
 8012d8e:	ee07 3a90 	vmov	s15, r3
 8012d92:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8012d96:	ee76 6ae0 	vsub.f32	s13, s13, s1
 8012d9a:	eee6 6a65 	vfms.f32	s13, s12, s11
 8012d9e:	ee77 7a66 	vsub.f32	s15, s14, s13
 8012da2:	e70e      	b.n	8012bc2 <__ieee754_powf+0x1d6>
 8012da4:	2501      	movs	r5, #1
 8012da6:	e75d      	b.n	8012c64 <__ieee754_powf+0x278>
 8012da8:	00000000 	.word	0x00000000
 8012dac:	3f7ffff3 	.word	0x3f7ffff3
 8012db0:	3f800007 	.word	0x3f800007
 8012db4:	3eaaaaab 	.word	0x3eaaaaab
 8012db8:	3fb8aa3b 	.word	0x3fb8aa3b
 8012dbc:	36eca570 	.word	0x36eca570
 8012dc0:	3fb8aa00 	.word	0x3fb8aa00
 8012dc4:	4b800000 	.word	0x4b800000
 8012dc8:	001cc471 	.word	0x001cc471
 8012dcc:	005db3d6 	.word	0x005db3d6
 8012dd0:	08014308 	.word	0x08014308
 8012dd4:	fffff000 	.word	0xfffff000
 8012dd8:	3e6c3255 	.word	0x3e6c3255
 8012ddc:	3e53f142 	.word	0x3e53f142
 8012de0:	3e8ba305 	.word	0x3e8ba305
 8012de4:	3edb6db7 	.word	0x3edb6db7
 8012de8:	3f19999a 	.word	0x3f19999a
 8012dec:	3f76384f 	.word	0x3f76384f
 8012df0:	3f763800 	.word	0x3f763800
 8012df4:	369dc3a0 	.word	0x369dc3a0
 8012df8:	08014318 	.word	0x08014318
 8012dfc:	08014310 	.word	0x08014310
 8012e00:	3338aa3c 	.word	0x3338aa3c
 8012e04:	f040 8095 	bne.w	8012f32 <__ieee754_powf+0x546>
 8012e08:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 8012e00 <__ieee754_powf+0x414>
 8012e0c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8012e10:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8012e14:	eef4 6ac7 	vcmpe.f32	s13, s14
 8012e18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e1c:	f73f aefa 	bgt.w	8012c14 <__ieee754_powf+0x228>
 8012e20:	15db      	asrs	r3, r3, #23
 8012e22:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 8012e26:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8012e2a:	4103      	asrs	r3, r0
 8012e2c:	4423      	add	r3, r4
 8012e2e:	494b      	ldr	r1, [pc, #300]	; (8012f5c <__ieee754_powf+0x570>)
 8012e30:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8012e34:	3a7f      	subs	r2, #127	; 0x7f
 8012e36:	4111      	asrs	r1, r2
 8012e38:	ea23 0101 	bic.w	r1, r3, r1
 8012e3c:	ee07 1a10 	vmov	s14, r1
 8012e40:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8012e44:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8012e48:	f1c2 0217 	rsb	r2, r2, #23
 8012e4c:	4110      	asrs	r0, r2
 8012e4e:	2c00      	cmp	r4, #0
 8012e50:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012e54:	bfb8      	it	lt
 8012e56:	4240      	neglt	r0, r0
 8012e58:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8012e5c:	ed9f 0a40 	vldr	s0, [pc, #256]	; 8012f60 <__ieee754_powf+0x574>
 8012e60:	eddf 6a40 	vldr	s13, [pc, #256]	; 8012f64 <__ieee754_powf+0x578>
 8012e64:	ee17 3a10 	vmov	r3, s14
 8012e68:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8012e6c:	f023 030f 	bic.w	r3, r3, #15
 8012e70:	ee07 3a10 	vmov	s14, r3
 8012e74:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012e78:	ee27 0a00 	vmul.f32	s0, s14, s0
 8012e7c:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8012e80:	eddf 7a39 	vldr	s15, [pc, #228]	; 8012f68 <__ieee754_powf+0x57c>
 8012e84:	eea0 0aa7 	vfma.f32	s0, s1, s15
 8012e88:	eef0 7a40 	vmov.f32	s15, s0
 8012e8c:	eee7 7a26 	vfma.f32	s15, s14, s13
 8012e90:	eeb0 6a67 	vmov.f32	s12, s15
 8012e94:	eea7 6a66 	vfms.f32	s12, s14, s13
 8012e98:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8012e9c:	ee30 0a46 	vsub.f32	s0, s0, s12
 8012ea0:	eddf 6a32 	vldr	s13, [pc, #200]	; 8012f6c <__ieee754_powf+0x580>
 8012ea4:	ed9f 6a32 	vldr	s12, [pc, #200]	; 8012f70 <__ieee754_powf+0x584>
 8012ea8:	eee7 6a06 	vfma.f32	s13, s14, s12
 8012eac:	ed9f 6a31 	vldr	s12, [pc, #196]	; 8012f74 <__ieee754_powf+0x588>
 8012eb0:	eea6 6a87 	vfma.f32	s12, s13, s14
 8012eb4:	eddf 6a30 	vldr	s13, [pc, #192]	; 8012f78 <__ieee754_powf+0x58c>
 8012eb8:	eee6 6a07 	vfma.f32	s13, s12, s14
 8012ebc:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 8012f7c <__ieee754_powf+0x590>
 8012ec0:	eea6 6a87 	vfma.f32	s12, s13, s14
 8012ec4:	eef0 6a67 	vmov.f32	s13, s15
 8012ec8:	eee6 6a47 	vfms.f32	s13, s12, s14
 8012ecc:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8012ed0:	ee27 6aa6 	vmul.f32	s12, s15, s13
 8012ed4:	ee76 6ac7 	vsub.f32	s13, s13, s14
 8012ed8:	eea7 0a80 	vfma.f32	s0, s15, s0
 8012edc:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8012ee0:	ee37 0a40 	vsub.f32	s0, s14, s0
 8012ee4:	ee70 7a67 	vsub.f32	s15, s0, s15
 8012ee8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8012eec:	ee30 0a67 	vsub.f32	s0, s0, s15
 8012ef0:	ee10 3a10 	vmov	r3, s0
 8012ef4:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8012ef8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8012efc:	da1f      	bge.n	8012f3e <__ieee754_powf+0x552>
 8012efe:	f000 febd 	bl	8013c7c <scalbnf>
 8012f02:	ee20 0a08 	vmul.f32	s0, s0, s16
 8012f06:	e589      	b.n	8012a1c <__ieee754_powf+0x30>
 8012f08:	4a1d      	ldr	r2, [pc, #116]	; (8012f80 <__ieee754_powf+0x594>)
 8012f0a:	4293      	cmp	r3, r2
 8012f0c:	dd07      	ble.n	8012f1e <__ieee754_powf+0x532>
 8012f0e:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8012f12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012f16:	bf4c      	ite	mi
 8012f18:	2001      	movmi	r0, #1
 8012f1a:	2000      	movpl	r0, #0
 8012f1c:	e61f      	b.n	8012b5e <__ieee754_powf+0x172>
 8012f1e:	d108      	bne.n	8012f32 <__ieee754_powf+0x546>
 8012f20:	ee37 7a67 	vsub.f32	s14, s14, s15
 8012f24:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8012f28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012f2c:	f6ff af78 	blt.w	8012e20 <__ieee754_powf+0x434>
 8012f30:	e7ed      	b.n	8012f0e <__ieee754_powf+0x522>
 8012f32:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 8012f36:	f73f af73 	bgt.w	8012e20 <__ieee754_powf+0x434>
 8012f3a:	2000      	movs	r0, #0
 8012f3c:	e78c      	b.n	8012e58 <__ieee754_powf+0x46c>
 8012f3e:	ee00 3a10 	vmov	s0, r3
 8012f42:	e7de      	b.n	8012f02 <__ieee754_powf+0x516>
 8012f44:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8012f48:	e568      	b.n	8012a1c <__ieee754_powf+0x30>
 8012f4a:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8012f84 <__ieee754_powf+0x598>
 8012f4e:	e565      	b.n	8012a1c <__ieee754_powf+0x30>
 8012f50:	eeb0 0a48 	vmov.f32	s0, s16
 8012f54:	e562      	b.n	8012a1c <__ieee754_powf+0x30>
 8012f56:	2700      	movs	r7, #0
 8012f58:	e58d      	b.n	8012a76 <__ieee754_powf+0x8a>
 8012f5a:	bf00      	nop
 8012f5c:	007fffff 	.word	0x007fffff
 8012f60:	35bfbe8c 	.word	0x35bfbe8c
 8012f64:	3f317200 	.word	0x3f317200
 8012f68:	3f317218 	.word	0x3f317218
 8012f6c:	b5ddea0e 	.word	0xb5ddea0e
 8012f70:	3331bb4c 	.word	0x3331bb4c
 8012f74:	388ab355 	.word	0x388ab355
 8012f78:	bb360b61 	.word	0xbb360b61
 8012f7c:	3e2aaaab 	.word	0x3e2aaaab
 8012f80:	43160000 	.word	0x43160000
 8012f84:	00000000 	.word	0x00000000

08012f88 <__ieee754_rem_pio2f>:
 8012f88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012f8a:	ee10 6a10 	vmov	r6, s0
 8012f8e:	4b8e      	ldr	r3, [pc, #568]	; (80131c8 <__ieee754_rem_pio2f+0x240>)
 8012f90:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8012f94:	429d      	cmp	r5, r3
 8012f96:	b087      	sub	sp, #28
 8012f98:	eef0 7a40 	vmov.f32	s15, s0
 8012f9c:	4604      	mov	r4, r0
 8012f9e:	dc05      	bgt.n	8012fac <__ieee754_rem_pio2f+0x24>
 8012fa0:	2300      	movs	r3, #0
 8012fa2:	ed80 0a00 	vstr	s0, [r0]
 8012fa6:	6043      	str	r3, [r0, #4]
 8012fa8:	2000      	movs	r0, #0
 8012faa:	e01a      	b.n	8012fe2 <__ieee754_rem_pio2f+0x5a>
 8012fac:	4b87      	ldr	r3, [pc, #540]	; (80131cc <__ieee754_rem_pio2f+0x244>)
 8012fae:	429d      	cmp	r5, r3
 8012fb0:	dc46      	bgt.n	8013040 <__ieee754_rem_pio2f+0xb8>
 8012fb2:	2e00      	cmp	r6, #0
 8012fb4:	ed9f 0a86 	vldr	s0, [pc, #536]	; 80131d0 <__ieee754_rem_pio2f+0x248>
 8012fb8:	4b86      	ldr	r3, [pc, #536]	; (80131d4 <__ieee754_rem_pio2f+0x24c>)
 8012fba:	f025 050f 	bic.w	r5, r5, #15
 8012fbe:	dd1f      	ble.n	8013000 <__ieee754_rem_pio2f+0x78>
 8012fc0:	429d      	cmp	r5, r3
 8012fc2:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8012fc6:	d00e      	beq.n	8012fe6 <__ieee754_rem_pio2f+0x5e>
 8012fc8:	ed9f 7a83 	vldr	s14, [pc, #524]	; 80131d8 <__ieee754_rem_pio2f+0x250>
 8012fcc:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8012fd0:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8012fd4:	ed80 0a00 	vstr	s0, [r0]
 8012fd8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012fdc:	2001      	movs	r0, #1
 8012fde:	edc4 7a01 	vstr	s15, [r4, #4]
 8012fe2:	b007      	add	sp, #28
 8012fe4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012fe6:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 80131dc <__ieee754_rem_pio2f+0x254>
 8012fea:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 80131e0 <__ieee754_rem_pio2f+0x258>
 8012fee:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8012ff2:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8012ff6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8012ffa:	edc0 6a00 	vstr	s13, [r0]
 8012ffe:	e7eb      	b.n	8012fd8 <__ieee754_rem_pio2f+0x50>
 8013000:	429d      	cmp	r5, r3
 8013002:	ee77 7a80 	vadd.f32	s15, s15, s0
 8013006:	d00e      	beq.n	8013026 <__ieee754_rem_pio2f+0x9e>
 8013008:	ed9f 7a73 	vldr	s14, [pc, #460]	; 80131d8 <__ieee754_rem_pio2f+0x250>
 801300c:	ee37 0a87 	vadd.f32	s0, s15, s14
 8013010:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8013014:	ed80 0a00 	vstr	s0, [r0]
 8013018:	ee77 7a87 	vadd.f32	s15, s15, s14
 801301c:	f04f 30ff 	mov.w	r0, #4294967295
 8013020:	edc4 7a01 	vstr	s15, [r4, #4]
 8013024:	e7dd      	b.n	8012fe2 <__ieee754_rem_pio2f+0x5a>
 8013026:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 80131dc <__ieee754_rem_pio2f+0x254>
 801302a:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 80131e0 <__ieee754_rem_pio2f+0x258>
 801302e:	ee77 7a80 	vadd.f32	s15, s15, s0
 8013032:	ee77 6a87 	vadd.f32	s13, s15, s14
 8013036:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801303a:	edc0 6a00 	vstr	s13, [r0]
 801303e:	e7eb      	b.n	8013018 <__ieee754_rem_pio2f+0x90>
 8013040:	4b68      	ldr	r3, [pc, #416]	; (80131e4 <__ieee754_rem_pio2f+0x25c>)
 8013042:	429d      	cmp	r5, r3
 8013044:	dc72      	bgt.n	801312c <__ieee754_rem_pio2f+0x1a4>
 8013046:	f000 fdbd 	bl	8013bc4 <fabsf>
 801304a:	ed9f 7a67 	vldr	s14, [pc, #412]	; 80131e8 <__ieee754_rem_pio2f+0x260>
 801304e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8013052:	eee0 7a07 	vfma.f32	s15, s0, s14
 8013056:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801305a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801305e:	ee17 0a90 	vmov	r0, s15
 8013062:	eddf 7a5b 	vldr	s15, [pc, #364]	; 80131d0 <__ieee754_rem_pio2f+0x248>
 8013066:	eea7 0a67 	vfms.f32	s0, s14, s15
 801306a:	281f      	cmp	r0, #31
 801306c:	eddf 7a5a 	vldr	s15, [pc, #360]	; 80131d8 <__ieee754_rem_pio2f+0x250>
 8013070:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013074:	eeb1 6a47 	vneg.f32	s12, s14
 8013078:	ee70 6a67 	vsub.f32	s13, s0, s15
 801307c:	ee16 2a90 	vmov	r2, s13
 8013080:	dc1c      	bgt.n	80130bc <__ieee754_rem_pio2f+0x134>
 8013082:	495a      	ldr	r1, [pc, #360]	; (80131ec <__ieee754_rem_pio2f+0x264>)
 8013084:	1e47      	subs	r7, r0, #1
 8013086:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 801308a:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 801308e:	428b      	cmp	r3, r1
 8013090:	d014      	beq.n	80130bc <__ieee754_rem_pio2f+0x134>
 8013092:	6022      	str	r2, [r4, #0]
 8013094:	ed94 7a00 	vldr	s14, [r4]
 8013098:	ee30 0a47 	vsub.f32	s0, s0, s14
 801309c:	2e00      	cmp	r6, #0
 801309e:	ee30 0a67 	vsub.f32	s0, s0, s15
 80130a2:	ed84 0a01 	vstr	s0, [r4, #4]
 80130a6:	da9c      	bge.n	8012fe2 <__ieee754_rem_pio2f+0x5a>
 80130a8:	eeb1 7a47 	vneg.f32	s14, s14
 80130ac:	eeb1 0a40 	vneg.f32	s0, s0
 80130b0:	ed84 7a00 	vstr	s14, [r4]
 80130b4:	ed84 0a01 	vstr	s0, [r4, #4]
 80130b8:	4240      	negs	r0, r0
 80130ba:	e792      	b.n	8012fe2 <__ieee754_rem_pio2f+0x5a>
 80130bc:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80130c0:	15eb      	asrs	r3, r5, #23
 80130c2:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 80130c6:	2d08      	cmp	r5, #8
 80130c8:	dde3      	ble.n	8013092 <__ieee754_rem_pio2f+0x10a>
 80130ca:	eddf 7a44 	vldr	s15, [pc, #272]	; 80131dc <__ieee754_rem_pio2f+0x254>
 80130ce:	eddf 5a44 	vldr	s11, [pc, #272]	; 80131e0 <__ieee754_rem_pio2f+0x258>
 80130d2:	eef0 6a40 	vmov.f32	s13, s0
 80130d6:	eee6 6a27 	vfma.f32	s13, s12, s15
 80130da:	ee30 0a66 	vsub.f32	s0, s0, s13
 80130de:	eea6 0a27 	vfma.f32	s0, s12, s15
 80130e2:	eef0 7a40 	vmov.f32	s15, s0
 80130e6:	eed7 7a25 	vfnms.f32	s15, s14, s11
 80130ea:	ee76 5ae7 	vsub.f32	s11, s13, s15
 80130ee:	ee15 2a90 	vmov	r2, s11
 80130f2:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80130f6:	1a5b      	subs	r3, r3, r1
 80130f8:	2b19      	cmp	r3, #25
 80130fa:	dc04      	bgt.n	8013106 <__ieee754_rem_pio2f+0x17e>
 80130fc:	edc4 5a00 	vstr	s11, [r4]
 8013100:	eeb0 0a66 	vmov.f32	s0, s13
 8013104:	e7c6      	b.n	8013094 <__ieee754_rem_pio2f+0x10c>
 8013106:	eddf 5a3a 	vldr	s11, [pc, #232]	; 80131f0 <__ieee754_rem_pio2f+0x268>
 801310a:	eeb0 0a66 	vmov.f32	s0, s13
 801310e:	eea6 0a25 	vfma.f32	s0, s12, s11
 8013112:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8013116:	eddf 6a37 	vldr	s13, [pc, #220]	; 80131f4 <__ieee754_rem_pio2f+0x26c>
 801311a:	eee6 7a25 	vfma.f32	s15, s12, s11
 801311e:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8013122:	ee30 7a67 	vsub.f32	s14, s0, s15
 8013126:	ed84 7a00 	vstr	s14, [r4]
 801312a:	e7b3      	b.n	8013094 <__ieee754_rem_pio2f+0x10c>
 801312c:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8013130:	db06      	blt.n	8013140 <__ieee754_rem_pio2f+0x1b8>
 8013132:	ee70 7a40 	vsub.f32	s15, s0, s0
 8013136:	edc0 7a01 	vstr	s15, [r0, #4]
 801313a:	edc0 7a00 	vstr	s15, [r0]
 801313e:	e733      	b.n	8012fa8 <__ieee754_rem_pio2f+0x20>
 8013140:	15ea      	asrs	r2, r5, #23
 8013142:	3a86      	subs	r2, #134	; 0x86
 8013144:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8013148:	ee07 3a90 	vmov	s15, r3
 801314c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8013150:	eddf 6a29 	vldr	s13, [pc, #164]	; 80131f8 <__ieee754_rem_pio2f+0x270>
 8013154:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8013158:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801315c:	ed8d 7a03 	vstr	s14, [sp, #12]
 8013160:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8013164:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8013168:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801316c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013170:	ed8d 7a04 	vstr	s14, [sp, #16]
 8013174:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8013178:	eef5 7a40 	vcmp.f32	s15, #0.0
 801317c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013180:	edcd 7a05 	vstr	s15, [sp, #20]
 8013184:	d11e      	bne.n	80131c4 <__ieee754_rem_pio2f+0x23c>
 8013186:	eeb5 7a40 	vcmp.f32	s14, #0.0
 801318a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801318e:	bf14      	ite	ne
 8013190:	2302      	movne	r3, #2
 8013192:	2301      	moveq	r3, #1
 8013194:	4919      	ldr	r1, [pc, #100]	; (80131fc <__ieee754_rem_pio2f+0x274>)
 8013196:	9101      	str	r1, [sp, #4]
 8013198:	2102      	movs	r1, #2
 801319a:	9100      	str	r1, [sp, #0]
 801319c:	a803      	add	r0, sp, #12
 801319e:	4621      	mov	r1, r4
 80131a0:	f000 f892 	bl	80132c8 <__kernel_rem_pio2f>
 80131a4:	2e00      	cmp	r6, #0
 80131a6:	f6bf af1c 	bge.w	8012fe2 <__ieee754_rem_pio2f+0x5a>
 80131aa:	edd4 7a00 	vldr	s15, [r4]
 80131ae:	eef1 7a67 	vneg.f32	s15, s15
 80131b2:	edc4 7a00 	vstr	s15, [r4]
 80131b6:	edd4 7a01 	vldr	s15, [r4, #4]
 80131ba:	eef1 7a67 	vneg.f32	s15, s15
 80131be:	edc4 7a01 	vstr	s15, [r4, #4]
 80131c2:	e779      	b.n	80130b8 <__ieee754_rem_pio2f+0x130>
 80131c4:	2303      	movs	r3, #3
 80131c6:	e7e5      	b.n	8013194 <__ieee754_rem_pio2f+0x20c>
 80131c8:	3f490fd8 	.word	0x3f490fd8
 80131cc:	4016cbe3 	.word	0x4016cbe3
 80131d0:	3fc90f80 	.word	0x3fc90f80
 80131d4:	3fc90fd0 	.word	0x3fc90fd0
 80131d8:	37354443 	.word	0x37354443
 80131dc:	37354400 	.word	0x37354400
 80131e0:	2e85a308 	.word	0x2e85a308
 80131e4:	43490f80 	.word	0x43490f80
 80131e8:	3f22f984 	.word	0x3f22f984
 80131ec:	08014320 	.word	0x08014320
 80131f0:	2e85a300 	.word	0x2e85a300
 80131f4:	248d3132 	.word	0x248d3132
 80131f8:	43800000 	.word	0x43800000
 80131fc:	080143a0 	.word	0x080143a0

08013200 <__ieee754_sqrtf>:
 8013200:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8013204:	4770      	bx	lr
	...

08013208 <__kernel_cosf>:
 8013208:	ee10 3a10 	vmov	r3, s0
 801320c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8013210:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8013214:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8013218:	da05      	bge.n	8013226 <__kernel_cosf+0x1e>
 801321a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801321e:	ee17 2a90 	vmov	r2, s15
 8013222:	2a00      	cmp	r2, #0
 8013224:	d03d      	beq.n	80132a2 <__kernel_cosf+0x9a>
 8013226:	ee60 5a00 	vmul.f32	s11, s0, s0
 801322a:	eddf 7a1f 	vldr	s15, [pc, #124]	; 80132a8 <__kernel_cosf+0xa0>
 801322e:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80132ac <__kernel_cosf+0xa4>
 8013232:	eddf 6a1f 	vldr	s13, [pc, #124]	; 80132b0 <__kernel_cosf+0xa8>
 8013236:	4a1f      	ldr	r2, [pc, #124]	; (80132b4 <__kernel_cosf+0xac>)
 8013238:	eea5 7aa7 	vfma.f32	s14, s11, s15
 801323c:	4293      	cmp	r3, r2
 801323e:	eddf 7a1e 	vldr	s15, [pc, #120]	; 80132b8 <__kernel_cosf+0xb0>
 8013242:	eee7 7a25 	vfma.f32	s15, s14, s11
 8013246:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80132bc <__kernel_cosf+0xb4>
 801324a:	eea7 7aa5 	vfma.f32	s14, s15, s11
 801324e:	eddf 7a1c 	vldr	s15, [pc, #112]	; 80132c0 <__kernel_cosf+0xb8>
 8013252:	eee7 7a25 	vfma.f32	s15, s14, s11
 8013256:	eeb0 7a66 	vmov.f32	s14, s13
 801325a:	eea7 7aa5 	vfma.f32	s14, s15, s11
 801325e:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8013262:	ee65 7aa6 	vmul.f32	s15, s11, s13
 8013266:	ee67 6a25 	vmul.f32	s13, s14, s11
 801326a:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 801326e:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8013272:	dc04      	bgt.n	801327e <__kernel_cosf+0x76>
 8013274:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8013278:	ee36 0a47 	vsub.f32	s0, s12, s14
 801327c:	4770      	bx	lr
 801327e:	4a11      	ldr	r2, [pc, #68]	; (80132c4 <__kernel_cosf+0xbc>)
 8013280:	4293      	cmp	r3, r2
 8013282:	bfda      	itte	le
 8013284:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8013288:	ee06 3a90 	vmovle	s13, r3
 801328c:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 8013290:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8013294:	ee36 0a66 	vsub.f32	s0, s12, s13
 8013298:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801329c:	ee30 0a67 	vsub.f32	s0, s0, s15
 80132a0:	4770      	bx	lr
 80132a2:	eeb0 0a46 	vmov.f32	s0, s12
 80132a6:	4770      	bx	lr
 80132a8:	ad47d74e 	.word	0xad47d74e
 80132ac:	310f74f6 	.word	0x310f74f6
 80132b0:	3d2aaaab 	.word	0x3d2aaaab
 80132b4:	3e999999 	.word	0x3e999999
 80132b8:	b493f27c 	.word	0xb493f27c
 80132bc:	37d00d01 	.word	0x37d00d01
 80132c0:	bab60b61 	.word	0xbab60b61
 80132c4:	3f480000 	.word	0x3f480000

080132c8 <__kernel_rem_pio2f>:
 80132c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80132cc:	ed2d 8b04 	vpush	{d8-d9}
 80132d0:	b0d9      	sub	sp, #356	; 0x164
 80132d2:	4688      	mov	r8, r1
 80132d4:	9002      	str	r0, [sp, #8]
 80132d6:	49bb      	ldr	r1, [pc, #748]	; (80135c4 <__kernel_rem_pio2f+0x2fc>)
 80132d8:	9866      	ldr	r0, [sp, #408]	; 0x198
 80132da:	9301      	str	r3, [sp, #4]
 80132dc:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 80132e0:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 80132e4:	1e59      	subs	r1, r3, #1
 80132e6:	1d13      	adds	r3, r2, #4
 80132e8:	db27      	blt.n	801333a <__kernel_rem_pio2f+0x72>
 80132ea:	f1b2 0b03 	subs.w	fp, r2, #3
 80132ee:	bf48      	it	mi
 80132f0:	f102 0b04 	addmi.w	fp, r2, #4
 80132f4:	ea4f 00eb 	mov.w	r0, fp, asr #3
 80132f8:	1c45      	adds	r5, r0, #1
 80132fa:	00ec      	lsls	r4, r5, #3
 80132fc:	1a47      	subs	r7, r0, r1
 80132fe:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 80135d4 <__kernel_rem_pio2f+0x30c>
 8013302:	9403      	str	r4, [sp, #12]
 8013304:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 8013308:	eb0a 0c01 	add.w	ip, sl, r1
 801330c:	ae1c      	add	r6, sp, #112	; 0x70
 801330e:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 8013312:	2400      	movs	r4, #0
 8013314:	4564      	cmp	r4, ip
 8013316:	dd12      	ble.n	801333e <__kernel_rem_pio2f+0x76>
 8013318:	9b01      	ldr	r3, [sp, #4]
 801331a:	ac1c      	add	r4, sp, #112	; 0x70
 801331c:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8013320:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 8013324:	f04f 0c00 	mov.w	ip, #0
 8013328:	45d4      	cmp	ip, sl
 801332a:	dc27      	bgt.n	801337c <__kernel_rem_pio2f+0xb4>
 801332c:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8013330:	eddf 7aa8 	vldr	s15, [pc, #672]	; 80135d4 <__kernel_rem_pio2f+0x30c>
 8013334:	4627      	mov	r7, r4
 8013336:	2600      	movs	r6, #0
 8013338:	e016      	b.n	8013368 <__kernel_rem_pio2f+0xa0>
 801333a:	2000      	movs	r0, #0
 801333c:	e7dc      	b.n	80132f8 <__kernel_rem_pio2f+0x30>
 801333e:	42e7      	cmn	r7, r4
 8013340:	bf5d      	ittte	pl
 8013342:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 8013346:	ee07 3a90 	vmovpl	s15, r3
 801334a:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 801334e:	eef0 7a47 	vmovmi.f32	s15, s14
 8013352:	ece6 7a01 	vstmia	r6!, {s15}
 8013356:	3401      	adds	r4, #1
 8013358:	e7dc      	b.n	8013314 <__kernel_rem_pio2f+0x4c>
 801335a:	ecf9 6a01 	vldmia	r9!, {s13}
 801335e:	ed97 7a00 	vldr	s14, [r7]
 8013362:	eee6 7a87 	vfma.f32	s15, s13, s14
 8013366:	3601      	adds	r6, #1
 8013368:	428e      	cmp	r6, r1
 801336a:	f1a7 0704 	sub.w	r7, r7, #4
 801336e:	ddf4      	ble.n	801335a <__kernel_rem_pio2f+0x92>
 8013370:	eceb 7a01 	vstmia	fp!, {s15}
 8013374:	f10c 0c01 	add.w	ip, ip, #1
 8013378:	3404      	adds	r4, #4
 801337a:	e7d5      	b.n	8013328 <__kernel_rem_pio2f+0x60>
 801337c:	ab08      	add	r3, sp, #32
 801337e:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8013382:	eddf 8a93 	vldr	s17, [pc, #588]	; 80135d0 <__kernel_rem_pio2f+0x308>
 8013386:	ed9f 9a91 	vldr	s18, [pc, #580]	; 80135cc <__kernel_rem_pio2f+0x304>
 801338a:	9304      	str	r3, [sp, #16]
 801338c:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 8013390:	4656      	mov	r6, sl
 8013392:	00b3      	lsls	r3, r6, #2
 8013394:	9305      	str	r3, [sp, #20]
 8013396:	ab58      	add	r3, sp, #352	; 0x160
 8013398:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 801339c:	ac08      	add	r4, sp, #32
 801339e:	ab44      	add	r3, sp, #272	; 0x110
 80133a0:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 80133a4:	46a4      	mov	ip, r4
 80133a6:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 80133aa:	4637      	mov	r7, r6
 80133ac:	2f00      	cmp	r7, #0
 80133ae:	f1a0 0004 	sub.w	r0, r0, #4
 80133b2:	dc4f      	bgt.n	8013454 <__kernel_rem_pio2f+0x18c>
 80133b4:	4628      	mov	r0, r5
 80133b6:	e9cd 1206 	strd	r1, r2, [sp, #24]
 80133ba:	f000 fc5f 	bl	8013c7c <scalbnf>
 80133be:	eeb0 8a40 	vmov.f32	s16, s0
 80133c2:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 80133c6:	ee28 0a00 	vmul.f32	s0, s16, s0
 80133ca:	f000 fc0f 	bl	8013bec <floorf>
 80133ce:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 80133d2:	eea0 8a67 	vfms.f32	s16, s0, s15
 80133d6:	2d00      	cmp	r5, #0
 80133d8:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 80133dc:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 80133e0:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 80133e4:	ee17 9a90 	vmov	r9, s15
 80133e8:	ee38 8a40 	vsub.f32	s16, s16, s0
 80133ec:	dd44      	ble.n	8013478 <__kernel_rem_pio2f+0x1b0>
 80133ee:	f106 3cff 	add.w	ip, r6, #4294967295
 80133f2:	ab08      	add	r3, sp, #32
 80133f4:	f1c5 0e08 	rsb	lr, r5, #8
 80133f8:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 80133fc:	fa47 f00e 	asr.w	r0, r7, lr
 8013400:	4481      	add	r9, r0
 8013402:	fa00 f00e 	lsl.w	r0, r0, lr
 8013406:	1a3f      	subs	r7, r7, r0
 8013408:	f1c5 0007 	rsb	r0, r5, #7
 801340c:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 8013410:	4107      	asrs	r7, r0
 8013412:	2f00      	cmp	r7, #0
 8013414:	dd3f      	ble.n	8013496 <__kernel_rem_pio2f+0x1ce>
 8013416:	f04f 0e00 	mov.w	lr, #0
 801341a:	f109 0901 	add.w	r9, r9, #1
 801341e:	4673      	mov	r3, lr
 8013420:	4576      	cmp	r6, lr
 8013422:	dc6b      	bgt.n	80134fc <__kernel_rem_pio2f+0x234>
 8013424:	2d00      	cmp	r5, #0
 8013426:	dd04      	ble.n	8013432 <__kernel_rem_pio2f+0x16a>
 8013428:	2d01      	cmp	r5, #1
 801342a:	d078      	beq.n	801351e <__kernel_rem_pio2f+0x256>
 801342c:	2d02      	cmp	r5, #2
 801342e:	f000 8081 	beq.w	8013534 <__kernel_rem_pio2f+0x26c>
 8013432:	2f02      	cmp	r7, #2
 8013434:	d12f      	bne.n	8013496 <__kernel_rem_pio2f+0x1ce>
 8013436:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801343a:	ee30 8a48 	vsub.f32	s16, s0, s16
 801343e:	b353      	cbz	r3, 8013496 <__kernel_rem_pio2f+0x1ce>
 8013440:	4628      	mov	r0, r5
 8013442:	e9cd 1206 	strd	r1, r2, [sp, #24]
 8013446:	f000 fc19 	bl	8013c7c <scalbnf>
 801344a:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 801344e:	ee38 8a40 	vsub.f32	s16, s16, s0
 8013452:	e020      	b.n	8013496 <__kernel_rem_pio2f+0x1ce>
 8013454:	ee60 7a28 	vmul.f32	s15, s0, s17
 8013458:	3f01      	subs	r7, #1
 801345a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801345e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013462:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8013466:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801346a:	ecac 0a01 	vstmia	ip!, {s0}
 801346e:	ed90 0a00 	vldr	s0, [r0]
 8013472:	ee37 0a80 	vadd.f32	s0, s15, s0
 8013476:	e799      	b.n	80133ac <__kernel_rem_pio2f+0xe4>
 8013478:	d105      	bne.n	8013486 <__kernel_rem_pio2f+0x1be>
 801347a:	1e70      	subs	r0, r6, #1
 801347c:	ab08      	add	r3, sp, #32
 801347e:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 8013482:	11ff      	asrs	r7, r7, #7
 8013484:	e7c5      	b.n	8013412 <__kernel_rem_pio2f+0x14a>
 8013486:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801348a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801348e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013492:	da31      	bge.n	80134f8 <__kernel_rem_pio2f+0x230>
 8013494:	2700      	movs	r7, #0
 8013496:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801349a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801349e:	f040 809b 	bne.w	80135d8 <__kernel_rem_pio2f+0x310>
 80134a2:	1e74      	subs	r4, r6, #1
 80134a4:	46a4      	mov	ip, r4
 80134a6:	2000      	movs	r0, #0
 80134a8:	45d4      	cmp	ip, sl
 80134aa:	da4a      	bge.n	8013542 <__kernel_rem_pio2f+0x27a>
 80134ac:	2800      	cmp	r0, #0
 80134ae:	d07a      	beq.n	80135a6 <__kernel_rem_pio2f+0x2de>
 80134b0:	ab08      	add	r3, sp, #32
 80134b2:	3d08      	subs	r5, #8
 80134b4:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80134b8:	2b00      	cmp	r3, #0
 80134ba:	f000 8081 	beq.w	80135c0 <__kernel_rem_pio2f+0x2f8>
 80134be:	4628      	mov	r0, r5
 80134c0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80134c4:	00a5      	lsls	r5, r4, #2
 80134c6:	f000 fbd9 	bl	8013c7c <scalbnf>
 80134ca:	aa44      	add	r2, sp, #272	; 0x110
 80134cc:	1d2b      	adds	r3, r5, #4
 80134ce:	ed9f 7a40 	vldr	s14, [pc, #256]	; 80135d0 <__kernel_rem_pio2f+0x308>
 80134d2:	18d1      	adds	r1, r2, r3
 80134d4:	4622      	mov	r2, r4
 80134d6:	2a00      	cmp	r2, #0
 80134d8:	f280 80ae 	bge.w	8013638 <__kernel_rem_pio2f+0x370>
 80134dc:	4622      	mov	r2, r4
 80134de:	2a00      	cmp	r2, #0
 80134e0:	f2c0 80cc 	blt.w	801367c <__kernel_rem_pio2f+0x3b4>
 80134e4:	a944      	add	r1, sp, #272	; 0x110
 80134e6:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 80134ea:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 80135c8 <__kernel_rem_pio2f+0x300>
 80134ee:	eddf 7a39 	vldr	s15, [pc, #228]	; 80135d4 <__kernel_rem_pio2f+0x30c>
 80134f2:	2000      	movs	r0, #0
 80134f4:	1aa1      	subs	r1, r4, r2
 80134f6:	e0b6      	b.n	8013666 <__kernel_rem_pio2f+0x39e>
 80134f8:	2702      	movs	r7, #2
 80134fa:	e78c      	b.n	8013416 <__kernel_rem_pio2f+0x14e>
 80134fc:	6820      	ldr	r0, [r4, #0]
 80134fe:	b94b      	cbnz	r3, 8013514 <__kernel_rem_pio2f+0x24c>
 8013500:	b118      	cbz	r0, 801350a <__kernel_rem_pio2f+0x242>
 8013502:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8013506:	6020      	str	r0, [r4, #0]
 8013508:	2001      	movs	r0, #1
 801350a:	f10e 0e01 	add.w	lr, lr, #1
 801350e:	3404      	adds	r4, #4
 8013510:	4603      	mov	r3, r0
 8013512:	e785      	b.n	8013420 <__kernel_rem_pio2f+0x158>
 8013514:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 8013518:	6020      	str	r0, [r4, #0]
 801351a:	4618      	mov	r0, r3
 801351c:	e7f5      	b.n	801350a <__kernel_rem_pio2f+0x242>
 801351e:	1e74      	subs	r4, r6, #1
 8013520:	a808      	add	r0, sp, #32
 8013522:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8013526:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 801352a:	f10d 0c20 	add.w	ip, sp, #32
 801352e:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 8013532:	e77e      	b.n	8013432 <__kernel_rem_pio2f+0x16a>
 8013534:	1e74      	subs	r4, r6, #1
 8013536:	a808      	add	r0, sp, #32
 8013538:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 801353c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8013540:	e7f3      	b.n	801352a <__kernel_rem_pio2f+0x262>
 8013542:	ab08      	add	r3, sp, #32
 8013544:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8013548:	f10c 3cff 	add.w	ip, ip, #4294967295
 801354c:	4318      	orrs	r0, r3
 801354e:	e7ab      	b.n	80134a8 <__kernel_rem_pio2f+0x1e0>
 8013550:	f10c 0c01 	add.w	ip, ip, #1
 8013554:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 8013558:	2c00      	cmp	r4, #0
 801355a:	d0f9      	beq.n	8013550 <__kernel_rem_pio2f+0x288>
 801355c:	9b05      	ldr	r3, [sp, #20]
 801355e:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8013562:	eb0d 0003 	add.w	r0, sp, r3
 8013566:	9b01      	ldr	r3, [sp, #4]
 8013568:	18f4      	adds	r4, r6, r3
 801356a:	ab1c      	add	r3, sp, #112	; 0x70
 801356c:	1c77      	adds	r7, r6, #1
 801356e:	384c      	subs	r0, #76	; 0x4c
 8013570:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8013574:	4466      	add	r6, ip
 8013576:	42be      	cmp	r6, r7
 8013578:	f6ff af0b 	blt.w	8013392 <__kernel_rem_pio2f+0xca>
 801357c:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 8013580:	f8dd e008 	ldr.w	lr, [sp, #8]
 8013584:	ee07 3a90 	vmov	s15, r3
 8013588:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801358c:	f04f 0c00 	mov.w	ip, #0
 8013590:	ece4 7a01 	vstmia	r4!, {s15}
 8013594:	eddf 7a0f 	vldr	s15, [pc, #60]	; 80135d4 <__kernel_rem_pio2f+0x30c>
 8013598:	46a1      	mov	r9, r4
 801359a:	458c      	cmp	ip, r1
 801359c:	dd07      	ble.n	80135ae <__kernel_rem_pio2f+0x2e6>
 801359e:	ece0 7a01 	vstmia	r0!, {s15}
 80135a2:	3701      	adds	r7, #1
 80135a4:	e7e7      	b.n	8013576 <__kernel_rem_pio2f+0x2ae>
 80135a6:	9804      	ldr	r0, [sp, #16]
 80135a8:	f04f 0c01 	mov.w	ip, #1
 80135ac:	e7d2      	b.n	8013554 <__kernel_rem_pio2f+0x28c>
 80135ae:	ecfe 6a01 	vldmia	lr!, {s13}
 80135b2:	ed39 7a01 	vldmdb	r9!, {s14}
 80135b6:	f10c 0c01 	add.w	ip, ip, #1
 80135ba:	eee6 7a87 	vfma.f32	s15, s13, s14
 80135be:	e7ec      	b.n	801359a <__kernel_rem_pio2f+0x2d2>
 80135c0:	3c01      	subs	r4, #1
 80135c2:	e775      	b.n	80134b0 <__kernel_rem_pio2f+0x1e8>
 80135c4:	080146e4 	.word	0x080146e4
 80135c8:	080146b8 	.word	0x080146b8
 80135cc:	43800000 	.word	0x43800000
 80135d0:	3b800000 	.word	0x3b800000
 80135d4:	00000000 	.word	0x00000000
 80135d8:	9b03      	ldr	r3, [sp, #12]
 80135da:	eeb0 0a48 	vmov.f32	s0, s16
 80135de:	1a98      	subs	r0, r3, r2
 80135e0:	f000 fb4c 	bl	8013c7c <scalbnf>
 80135e4:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 80135cc <__kernel_rem_pio2f+0x304>
 80135e8:	eeb4 0ac7 	vcmpe.f32	s0, s14
 80135ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80135f0:	db19      	blt.n	8013626 <__kernel_rem_pio2f+0x35e>
 80135f2:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 80135d0 <__kernel_rem_pio2f+0x308>
 80135f6:	ee60 7a27 	vmul.f32	s15, s0, s15
 80135fa:	aa08      	add	r2, sp, #32
 80135fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013600:	1c74      	adds	r4, r6, #1
 8013602:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013606:	3508      	adds	r5, #8
 8013608:	eea7 0ac7 	vfms.f32	s0, s15, s14
 801360c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013610:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8013614:	ee10 3a10 	vmov	r3, s0
 8013618:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 801361c:	ee17 3a90 	vmov	r3, s15
 8013620:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8013624:	e74b      	b.n	80134be <__kernel_rem_pio2f+0x1f6>
 8013626:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801362a:	aa08      	add	r2, sp, #32
 801362c:	ee10 3a10 	vmov	r3, s0
 8013630:	4634      	mov	r4, r6
 8013632:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8013636:	e742      	b.n	80134be <__kernel_rem_pio2f+0x1f6>
 8013638:	a808      	add	r0, sp, #32
 801363a:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 801363e:	9001      	str	r0, [sp, #4]
 8013640:	ee07 0a90 	vmov	s15, r0
 8013644:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013648:	3a01      	subs	r2, #1
 801364a:	ee67 7a80 	vmul.f32	s15, s15, s0
 801364e:	ee20 0a07 	vmul.f32	s0, s0, s14
 8013652:	ed61 7a01 	vstmdb	r1!, {s15}
 8013656:	e73e      	b.n	80134d6 <__kernel_rem_pio2f+0x20e>
 8013658:	ecfc 6a01 	vldmia	ip!, {s13}
 801365c:	ecb6 7a01 	vldmia	r6!, {s14}
 8013660:	eee6 7a87 	vfma.f32	s15, s13, s14
 8013664:	3001      	adds	r0, #1
 8013666:	4550      	cmp	r0, sl
 8013668:	dc01      	bgt.n	801366e <__kernel_rem_pio2f+0x3a6>
 801366a:	4288      	cmp	r0, r1
 801366c:	ddf4      	ble.n	8013658 <__kernel_rem_pio2f+0x390>
 801366e:	a858      	add	r0, sp, #352	; 0x160
 8013670:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8013674:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 8013678:	3a01      	subs	r2, #1
 801367a:	e730      	b.n	80134de <__kernel_rem_pio2f+0x216>
 801367c:	9a66      	ldr	r2, [sp, #408]	; 0x198
 801367e:	2a02      	cmp	r2, #2
 8013680:	dc09      	bgt.n	8013696 <__kernel_rem_pio2f+0x3ce>
 8013682:	2a00      	cmp	r2, #0
 8013684:	dc2a      	bgt.n	80136dc <__kernel_rem_pio2f+0x414>
 8013686:	d043      	beq.n	8013710 <__kernel_rem_pio2f+0x448>
 8013688:	f009 0007 	and.w	r0, r9, #7
 801368c:	b059      	add	sp, #356	; 0x164
 801368e:	ecbd 8b04 	vpop	{d8-d9}
 8013692:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013696:	9b66      	ldr	r3, [sp, #408]	; 0x198
 8013698:	2b03      	cmp	r3, #3
 801369a:	d1f5      	bne.n	8013688 <__kernel_rem_pio2f+0x3c0>
 801369c:	ab30      	add	r3, sp, #192	; 0xc0
 801369e:	442b      	add	r3, r5
 80136a0:	461a      	mov	r2, r3
 80136a2:	4619      	mov	r1, r3
 80136a4:	4620      	mov	r0, r4
 80136a6:	2800      	cmp	r0, #0
 80136a8:	f1a1 0104 	sub.w	r1, r1, #4
 80136ac:	dc51      	bgt.n	8013752 <__kernel_rem_pio2f+0x48a>
 80136ae:	4621      	mov	r1, r4
 80136b0:	2901      	cmp	r1, #1
 80136b2:	f1a2 0204 	sub.w	r2, r2, #4
 80136b6:	dc5c      	bgt.n	8013772 <__kernel_rem_pio2f+0x4aa>
 80136b8:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 80135d4 <__kernel_rem_pio2f+0x30c>
 80136bc:	3304      	adds	r3, #4
 80136be:	2c01      	cmp	r4, #1
 80136c0:	dc67      	bgt.n	8013792 <__kernel_rem_pio2f+0x4ca>
 80136c2:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 80136c6:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 80136ca:	2f00      	cmp	r7, #0
 80136cc:	d167      	bne.n	801379e <__kernel_rem_pio2f+0x4d6>
 80136ce:	edc8 6a00 	vstr	s13, [r8]
 80136d2:	ed88 7a01 	vstr	s14, [r8, #4]
 80136d6:	edc8 7a02 	vstr	s15, [r8, #8]
 80136da:	e7d5      	b.n	8013688 <__kernel_rem_pio2f+0x3c0>
 80136dc:	aa30      	add	r2, sp, #192	; 0xc0
 80136de:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 80135d4 <__kernel_rem_pio2f+0x30c>
 80136e2:	4413      	add	r3, r2
 80136e4:	4622      	mov	r2, r4
 80136e6:	2a00      	cmp	r2, #0
 80136e8:	da24      	bge.n	8013734 <__kernel_rem_pio2f+0x46c>
 80136ea:	b34f      	cbz	r7, 8013740 <__kernel_rem_pio2f+0x478>
 80136ec:	eef1 7a47 	vneg.f32	s15, s14
 80136f0:	edc8 7a00 	vstr	s15, [r8]
 80136f4:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 80136f8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80136fc:	aa31      	add	r2, sp, #196	; 0xc4
 80136fe:	2301      	movs	r3, #1
 8013700:	429c      	cmp	r4, r3
 8013702:	da20      	bge.n	8013746 <__kernel_rem_pio2f+0x47e>
 8013704:	b10f      	cbz	r7, 801370a <__kernel_rem_pio2f+0x442>
 8013706:	eef1 7a67 	vneg.f32	s15, s15
 801370a:	edc8 7a01 	vstr	s15, [r8, #4]
 801370e:	e7bb      	b.n	8013688 <__kernel_rem_pio2f+0x3c0>
 8013710:	aa30      	add	r2, sp, #192	; 0xc0
 8013712:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 80135d4 <__kernel_rem_pio2f+0x30c>
 8013716:	4413      	add	r3, r2
 8013718:	2c00      	cmp	r4, #0
 801371a:	da05      	bge.n	8013728 <__kernel_rem_pio2f+0x460>
 801371c:	b10f      	cbz	r7, 8013722 <__kernel_rem_pio2f+0x45a>
 801371e:	eef1 7a67 	vneg.f32	s15, s15
 8013722:	edc8 7a00 	vstr	s15, [r8]
 8013726:	e7af      	b.n	8013688 <__kernel_rem_pio2f+0x3c0>
 8013728:	ed33 7a01 	vldmdb	r3!, {s14}
 801372c:	3c01      	subs	r4, #1
 801372e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013732:	e7f1      	b.n	8013718 <__kernel_rem_pio2f+0x450>
 8013734:	ed73 7a01 	vldmdb	r3!, {s15}
 8013738:	3a01      	subs	r2, #1
 801373a:	ee37 7a27 	vadd.f32	s14, s14, s15
 801373e:	e7d2      	b.n	80136e6 <__kernel_rem_pio2f+0x41e>
 8013740:	eef0 7a47 	vmov.f32	s15, s14
 8013744:	e7d4      	b.n	80136f0 <__kernel_rem_pio2f+0x428>
 8013746:	ecb2 7a01 	vldmia	r2!, {s14}
 801374a:	3301      	adds	r3, #1
 801374c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013750:	e7d6      	b.n	8013700 <__kernel_rem_pio2f+0x438>
 8013752:	edd1 7a00 	vldr	s15, [r1]
 8013756:	edd1 6a01 	vldr	s13, [r1, #4]
 801375a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801375e:	3801      	subs	r0, #1
 8013760:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013764:	ed81 7a00 	vstr	s14, [r1]
 8013768:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801376c:	edc1 7a01 	vstr	s15, [r1, #4]
 8013770:	e799      	b.n	80136a6 <__kernel_rem_pio2f+0x3de>
 8013772:	edd2 7a00 	vldr	s15, [r2]
 8013776:	edd2 6a01 	vldr	s13, [r2, #4]
 801377a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801377e:	3901      	subs	r1, #1
 8013780:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013784:	ed82 7a00 	vstr	s14, [r2]
 8013788:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801378c:	edc2 7a01 	vstr	s15, [r2, #4]
 8013790:	e78e      	b.n	80136b0 <__kernel_rem_pio2f+0x3e8>
 8013792:	ed33 7a01 	vldmdb	r3!, {s14}
 8013796:	3c01      	subs	r4, #1
 8013798:	ee77 7a87 	vadd.f32	s15, s15, s14
 801379c:	e78f      	b.n	80136be <__kernel_rem_pio2f+0x3f6>
 801379e:	eef1 6a66 	vneg.f32	s13, s13
 80137a2:	eeb1 7a47 	vneg.f32	s14, s14
 80137a6:	edc8 6a00 	vstr	s13, [r8]
 80137aa:	ed88 7a01 	vstr	s14, [r8, #4]
 80137ae:	eef1 7a67 	vneg.f32	s15, s15
 80137b2:	e790      	b.n	80136d6 <__kernel_rem_pio2f+0x40e>

080137b4 <__kernel_sinf>:
 80137b4:	ee10 3a10 	vmov	r3, s0
 80137b8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80137bc:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80137c0:	da04      	bge.n	80137cc <__kernel_sinf+0x18>
 80137c2:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80137c6:	ee17 3a90 	vmov	r3, s15
 80137ca:	b35b      	cbz	r3, 8013824 <__kernel_sinf+0x70>
 80137cc:	ee20 7a00 	vmul.f32	s14, s0, s0
 80137d0:	eddf 7a15 	vldr	s15, [pc, #84]	; 8013828 <__kernel_sinf+0x74>
 80137d4:	ed9f 6a15 	vldr	s12, [pc, #84]	; 801382c <__kernel_sinf+0x78>
 80137d8:	eea7 6a27 	vfma.f32	s12, s14, s15
 80137dc:	eddf 7a14 	vldr	s15, [pc, #80]	; 8013830 <__kernel_sinf+0x7c>
 80137e0:	eee6 7a07 	vfma.f32	s15, s12, s14
 80137e4:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8013834 <__kernel_sinf+0x80>
 80137e8:	eea7 6a87 	vfma.f32	s12, s15, s14
 80137ec:	eddf 7a12 	vldr	s15, [pc, #72]	; 8013838 <__kernel_sinf+0x84>
 80137f0:	ee60 6a07 	vmul.f32	s13, s0, s14
 80137f4:	eee6 7a07 	vfma.f32	s15, s12, s14
 80137f8:	b930      	cbnz	r0, 8013808 <__kernel_sinf+0x54>
 80137fa:	ed9f 6a10 	vldr	s12, [pc, #64]	; 801383c <__kernel_sinf+0x88>
 80137fe:	eea7 6a27 	vfma.f32	s12, s14, s15
 8013802:	eea6 0a26 	vfma.f32	s0, s12, s13
 8013806:	4770      	bx	lr
 8013808:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 801380c:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8013810:	eee0 7a86 	vfma.f32	s15, s1, s12
 8013814:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8013818:	eddf 7a09 	vldr	s15, [pc, #36]	; 8013840 <__kernel_sinf+0x8c>
 801381c:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8013820:	ee30 0a60 	vsub.f32	s0, s0, s1
 8013824:	4770      	bx	lr
 8013826:	bf00      	nop
 8013828:	2f2ec9d3 	.word	0x2f2ec9d3
 801382c:	b2d72f34 	.word	0xb2d72f34
 8013830:	3638ef1b 	.word	0x3638ef1b
 8013834:	b9500d01 	.word	0xb9500d01
 8013838:	3c088889 	.word	0x3c088889
 801383c:	be2aaaab 	.word	0xbe2aaaab
 8013840:	3e2aaaab 	.word	0x3e2aaaab

08013844 <with_errno>:
 8013844:	b570      	push	{r4, r5, r6, lr}
 8013846:	4604      	mov	r4, r0
 8013848:	460d      	mov	r5, r1
 801384a:	4616      	mov	r6, r2
 801384c:	f7fb f916 	bl	800ea7c <__errno>
 8013850:	4629      	mov	r1, r5
 8013852:	6006      	str	r6, [r0, #0]
 8013854:	4620      	mov	r0, r4
 8013856:	bd70      	pop	{r4, r5, r6, pc}

08013858 <xflow>:
 8013858:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801385a:	4614      	mov	r4, r2
 801385c:	461d      	mov	r5, r3
 801385e:	b108      	cbz	r0, 8013864 <xflow+0xc>
 8013860:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8013864:	e9cd 2300 	strd	r2, r3, [sp]
 8013868:	e9dd 2300 	ldrd	r2, r3, [sp]
 801386c:	4620      	mov	r0, r4
 801386e:	4629      	mov	r1, r5
 8013870:	f7ec fec2 	bl	80005f8 <__aeabi_dmul>
 8013874:	2222      	movs	r2, #34	; 0x22
 8013876:	b003      	add	sp, #12
 8013878:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801387c:	f7ff bfe2 	b.w	8013844 <with_errno>

08013880 <__math_uflow>:
 8013880:	b508      	push	{r3, lr}
 8013882:	2200      	movs	r2, #0
 8013884:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8013888:	f7ff ffe6 	bl	8013858 <xflow>
 801388c:	ec41 0b10 	vmov	d0, r0, r1
 8013890:	bd08      	pop	{r3, pc}

08013892 <__math_oflow>:
 8013892:	b508      	push	{r3, lr}
 8013894:	2200      	movs	r2, #0
 8013896:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 801389a:	f7ff ffdd 	bl	8013858 <xflow>
 801389e:	ec41 0b10 	vmov	d0, r0, r1
 80138a2:	bd08      	pop	{r3, pc}

080138a4 <with_errnof>:
 80138a4:	b513      	push	{r0, r1, r4, lr}
 80138a6:	4604      	mov	r4, r0
 80138a8:	ed8d 0a01 	vstr	s0, [sp, #4]
 80138ac:	f7fb f8e6 	bl	800ea7c <__errno>
 80138b0:	ed9d 0a01 	vldr	s0, [sp, #4]
 80138b4:	6004      	str	r4, [r0, #0]
 80138b6:	b002      	add	sp, #8
 80138b8:	bd10      	pop	{r4, pc}

080138ba <xflowf>:
 80138ba:	b130      	cbz	r0, 80138ca <xflowf+0x10>
 80138bc:	eef1 7a40 	vneg.f32	s15, s0
 80138c0:	ee27 0a80 	vmul.f32	s0, s15, s0
 80138c4:	2022      	movs	r0, #34	; 0x22
 80138c6:	f7ff bfed 	b.w	80138a4 <with_errnof>
 80138ca:	eef0 7a40 	vmov.f32	s15, s0
 80138ce:	e7f7      	b.n	80138c0 <xflowf+0x6>

080138d0 <__math_uflowf>:
 80138d0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80138d8 <__math_uflowf+0x8>
 80138d4:	f7ff bff1 	b.w	80138ba <xflowf>
 80138d8:	10000000 	.word	0x10000000

080138dc <__math_oflowf>:
 80138dc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80138e4 <__math_oflowf+0x8>
 80138e0:	f7ff bfeb 	b.w	80138ba <xflowf>
 80138e4:	70000000 	.word	0x70000000

080138e8 <fabs>:
 80138e8:	ec51 0b10 	vmov	r0, r1, d0
 80138ec:	ee10 2a10 	vmov	r2, s0
 80138f0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80138f4:	ec43 2b10 	vmov	d0, r2, r3
 80138f8:	4770      	bx	lr

080138fa <finite>:
 80138fa:	b082      	sub	sp, #8
 80138fc:	ed8d 0b00 	vstr	d0, [sp]
 8013900:	9801      	ldr	r0, [sp, #4]
 8013902:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8013906:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801390a:	0fc0      	lsrs	r0, r0, #31
 801390c:	b002      	add	sp, #8
 801390e:	4770      	bx	lr

08013910 <scalbn>:
 8013910:	b570      	push	{r4, r5, r6, lr}
 8013912:	ec55 4b10 	vmov	r4, r5, d0
 8013916:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801391a:	4606      	mov	r6, r0
 801391c:	462b      	mov	r3, r5
 801391e:	b99a      	cbnz	r2, 8013948 <scalbn+0x38>
 8013920:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8013924:	4323      	orrs	r3, r4
 8013926:	d036      	beq.n	8013996 <scalbn+0x86>
 8013928:	4b39      	ldr	r3, [pc, #228]	; (8013a10 <scalbn+0x100>)
 801392a:	4629      	mov	r1, r5
 801392c:	ee10 0a10 	vmov	r0, s0
 8013930:	2200      	movs	r2, #0
 8013932:	f7ec fe61 	bl	80005f8 <__aeabi_dmul>
 8013936:	4b37      	ldr	r3, [pc, #220]	; (8013a14 <scalbn+0x104>)
 8013938:	429e      	cmp	r6, r3
 801393a:	4604      	mov	r4, r0
 801393c:	460d      	mov	r5, r1
 801393e:	da10      	bge.n	8013962 <scalbn+0x52>
 8013940:	a32b      	add	r3, pc, #172	; (adr r3, 80139f0 <scalbn+0xe0>)
 8013942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013946:	e03a      	b.n	80139be <scalbn+0xae>
 8013948:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801394c:	428a      	cmp	r2, r1
 801394e:	d10c      	bne.n	801396a <scalbn+0x5a>
 8013950:	ee10 2a10 	vmov	r2, s0
 8013954:	4620      	mov	r0, r4
 8013956:	4629      	mov	r1, r5
 8013958:	f7ec fc98 	bl	800028c <__adddf3>
 801395c:	4604      	mov	r4, r0
 801395e:	460d      	mov	r5, r1
 8013960:	e019      	b.n	8013996 <scalbn+0x86>
 8013962:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8013966:	460b      	mov	r3, r1
 8013968:	3a36      	subs	r2, #54	; 0x36
 801396a:	4432      	add	r2, r6
 801396c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8013970:	428a      	cmp	r2, r1
 8013972:	dd08      	ble.n	8013986 <scalbn+0x76>
 8013974:	2d00      	cmp	r5, #0
 8013976:	a120      	add	r1, pc, #128	; (adr r1, 80139f8 <scalbn+0xe8>)
 8013978:	e9d1 0100 	ldrd	r0, r1, [r1]
 801397c:	da1c      	bge.n	80139b8 <scalbn+0xa8>
 801397e:	a120      	add	r1, pc, #128	; (adr r1, 8013a00 <scalbn+0xf0>)
 8013980:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013984:	e018      	b.n	80139b8 <scalbn+0xa8>
 8013986:	2a00      	cmp	r2, #0
 8013988:	dd08      	ble.n	801399c <scalbn+0x8c>
 801398a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801398e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8013992:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8013996:	ec45 4b10 	vmov	d0, r4, r5
 801399a:	bd70      	pop	{r4, r5, r6, pc}
 801399c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80139a0:	da19      	bge.n	80139d6 <scalbn+0xc6>
 80139a2:	f24c 3350 	movw	r3, #50000	; 0xc350
 80139a6:	429e      	cmp	r6, r3
 80139a8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80139ac:	dd0a      	ble.n	80139c4 <scalbn+0xb4>
 80139ae:	a112      	add	r1, pc, #72	; (adr r1, 80139f8 <scalbn+0xe8>)
 80139b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80139b4:	2b00      	cmp	r3, #0
 80139b6:	d1e2      	bne.n	801397e <scalbn+0x6e>
 80139b8:	a30f      	add	r3, pc, #60	; (adr r3, 80139f8 <scalbn+0xe8>)
 80139ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80139be:	f7ec fe1b 	bl	80005f8 <__aeabi_dmul>
 80139c2:	e7cb      	b.n	801395c <scalbn+0x4c>
 80139c4:	a10a      	add	r1, pc, #40	; (adr r1, 80139f0 <scalbn+0xe0>)
 80139c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80139ca:	2b00      	cmp	r3, #0
 80139cc:	d0b8      	beq.n	8013940 <scalbn+0x30>
 80139ce:	a10e      	add	r1, pc, #56	; (adr r1, 8013a08 <scalbn+0xf8>)
 80139d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80139d4:	e7b4      	b.n	8013940 <scalbn+0x30>
 80139d6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80139da:	3236      	adds	r2, #54	; 0x36
 80139dc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80139e0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80139e4:	4620      	mov	r0, r4
 80139e6:	4b0c      	ldr	r3, [pc, #48]	; (8013a18 <scalbn+0x108>)
 80139e8:	2200      	movs	r2, #0
 80139ea:	e7e8      	b.n	80139be <scalbn+0xae>
 80139ec:	f3af 8000 	nop.w
 80139f0:	c2f8f359 	.word	0xc2f8f359
 80139f4:	01a56e1f 	.word	0x01a56e1f
 80139f8:	8800759c 	.word	0x8800759c
 80139fc:	7e37e43c 	.word	0x7e37e43c
 8013a00:	8800759c 	.word	0x8800759c
 8013a04:	fe37e43c 	.word	0xfe37e43c
 8013a08:	c2f8f359 	.word	0xc2f8f359
 8013a0c:	81a56e1f 	.word	0x81a56e1f
 8013a10:	43500000 	.word	0x43500000
 8013a14:	ffff3cb0 	.word	0xffff3cb0
 8013a18:	3c900000 	.word	0x3c900000

08013a1c <atanf>:
 8013a1c:	b538      	push	{r3, r4, r5, lr}
 8013a1e:	ee10 5a10 	vmov	r5, s0
 8013a22:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8013a26:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 8013a2a:	eef0 7a40 	vmov.f32	s15, s0
 8013a2e:	db10      	blt.n	8013a52 <atanf+0x36>
 8013a30:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8013a34:	dd04      	ble.n	8013a40 <atanf+0x24>
 8013a36:	ee70 7a00 	vadd.f32	s15, s0, s0
 8013a3a:	eeb0 0a67 	vmov.f32	s0, s15
 8013a3e:	bd38      	pop	{r3, r4, r5, pc}
 8013a40:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8013b78 <atanf+0x15c>
 8013a44:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 8013b7c <atanf+0x160>
 8013a48:	2d00      	cmp	r5, #0
 8013a4a:	bfd8      	it	le
 8013a4c:	eef0 7a40 	vmovle.f32	s15, s0
 8013a50:	e7f3      	b.n	8013a3a <atanf+0x1e>
 8013a52:	4b4b      	ldr	r3, [pc, #300]	; (8013b80 <atanf+0x164>)
 8013a54:	429c      	cmp	r4, r3
 8013a56:	dc10      	bgt.n	8013a7a <atanf+0x5e>
 8013a58:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8013a5c:	da0a      	bge.n	8013a74 <atanf+0x58>
 8013a5e:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8013b84 <atanf+0x168>
 8013a62:	ee30 7a07 	vadd.f32	s14, s0, s14
 8013a66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8013a6a:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8013a6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013a72:	dce2      	bgt.n	8013a3a <atanf+0x1e>
 8013a74:	f04f 33ff 	mov.w	r3, #4294967295
 8013a78:	e013      	b.n	8013aa2 <atanf+0x86>
 8013a7a:	f000 f8a3 	bl	8013bc4 <fabsf>
 8013a7e:	4b42      	ldr	r3, [pc, #264]	; (8013b88 <atanf+0x16c>)
 8013a80:	429c      	cmp	r4, r3
 8013a82:	dc4f      	bgt.n	8013b24 <atanf+0x108>
 8013a84:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8013a88:	429c      	cmp	r4, r3
 8013a8a:	dc41      	bgt.n	8013b10 <atanf+0xf4>
 8013a8c:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8013a90:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8013a94:	eea0 7a27 	vfma.f32	s14, s0, s15
 8013a98:	2300      	movs	r3, #0
 8013a9a:	ee30 0a27 	vadd.f32	s0, s0, s15
 8013a9e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8013aa2:	1c5a      	adds	r2, r3, #1
 8013aa4:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8013aa8:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8013b8c <atanf+0x170>
 8013aac:	eddf 5a38 	vldr	s11, [pc, #224]	; 8013b90 <atanf+0x174>
 8013ab0:	ed9f 5a38 	vldr	s10, [pc, #224]	; 8013b94 <atanf+0x178>
 8013ab4:	ee66 6a06 	vmul.f32	s13, s12, s12
 8013ab8:	eee6 5a87 	vfma.f32	s11, s13, s14
 8013abc:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8013b98 <atanf+0x17c>
 8013ac0:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8013ac4:	eddf 5a35 	vldr	s11, [pc, #212]	; 8013b9c <atanf+0x180>
 8013ac8:	eee7 5a26 	vfma.f32	s11, s14, s13
 8013acc:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8013ba0 <atanf+0x184>
 8013ad0:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8013ad4:	eddf 5a33 	vldr	s11, [pc, #204]	; 8013ba4 <atanf+0x188>
 8013ad8:	eee7 5a26 	vfma.f32	s11, s14, s13
 8013adc:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8013ba8 <atanf+0x18c>
 8013ae0:	eea6 5a87 	vfma.f32	s10, s13, s14
 8013ae4:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8013bac <atanf+0x190>
 8013ae8:	eea5 7a26 	vfma.f32	s14, s10, s13
 8013aec:	ed9f 5a30 	vldr	s10, [pc, #192]	; 8013bb0 <atanf+0x194>
 8013af0:	eea7 5a26 	vfma.f32	s10, s14, s13
 8013af4:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8013bb4 <atanf+0x198>
 8013af8:	eea5 7a26 	vfma.f32	s14, s10, s13
 8013afc:	ee27 7a26 	vmul.f32	s14, s14, s13
 8013b00:	eea5 7a86 	vfma.f32	s14, s11, s12
 8013b04:	ee27 7a87 	vmul.f32	s14, s15, s14
 8013b08:	d121      	bne.n	8013b4e <atanf+0x132>
 8013b0a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013b0e:	e794      	b.n	8013a3a <atanf+0x1e>
 8013b10:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8013b14:	ee30 7a67 	vsub.f32	s14, s0, s15
 8013b18:	ee30 0a27 	vadd.f32	s0, s0, s15
 8013b1c:	2301      	movs	r3, #1
 8013b1e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8013b22:	e7be      	b.n	8013aa2 <atanf+0x86>
 8013b24:	4b24      	ldr	r3, [pc, #144]	; (8013bb8 <atanf+0x19c>)
 8013b26:	429c      	cmp	r4, r3
 8013b28:	dc0b      	bgt.n	8013b42 <atanf+0x126>
 8013b2a:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8013b2e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8013b32:	eea0 7a27 	vfma.f32	s14, s0, s15
 8013b36:	2302      	movs	r3, #2
 8013b38:	ee70 6a67 	vsub.f32	s13, s0, s15
 8013b3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013b40:	e7af      	b.n	8013aa2 <atanf+0x86>
 8013b42:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8013b46:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8013b4a:	2303      	movs	r3, #3
 8013b4c:	e7a9      	b.n	8013aa2 <atanf+0x86>
 8013b4e:	4a1b      	ldr	r2, [pc, #108]	; (8013bbc <atanf+0x1a0>)
 8013b50:	491b      	ldr	r1, [pc, #108]	; (8013bc0 <atanf+0x1a4>)
 8013b52:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8013b56:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8013b5a:	ed93 0a00 	vldr	s0, [r3]
 8013b5e:	ee37 7a40 	vsub.f32	s14, s14, s0
 8013b62:	ed92 0a00 	vldr	s0, [r2]
 8013b66:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013b6a:	2d00      	cmp	r5, #0
 8013b6c:	ee70 7a67 	vsub.f32	s15, s0, s15
 8013b70:	bfb8      	it	lt
 8013b72:	eef1 7a67 	vneglt.f32	s15, s15
 8013b76:	e760      	b.n	8013a3a <atanf+0x1e>
 8013b78:	3fc90fdb 	.word	0x3fc90fdb
 8013b7c:	bfc90fdb 	.word	0xbfc90fdb
 8013b80:	3edfffff 	.word	0x3edfffff
 8013b84:	7149f2ca 	.word	0x7149f2ca
 8013b88:	3f97ffff 	.word	0x3f97ffff
 8013b8c:	3c8569d7 	.word	0x3c8569d7
 8013b90:	3d4bda59 	.word	0x3d4bda59
 8013b94:	bd6ef16b 	.word	0xbd6ef16b
 8013b98:	3d886b35 	.word	0x3d886b35
 8013b9c:	3dba2e6e 	.word	0x3dba2e6e
 8013ba0:	3e124925 	.word	0x3e124925
 8013ba4:	3eaaaaab 	.word	0x3eaaaaab
 8013ba8:	bd15a221 	.word	0xbd15a221
 8013bac:	bd9d8795 	.word	0xbd9d8795
 8013bb0:	bde38e38 	.word	0xbde38e38
 8013bb4:	be4ccccd 	.word	0xbe4ccccd
 8013bb8:	401bffff 	.word	0x401bffff
 8013bbc:	080146f0 	.word	0x080146f0
 8013bc0:	08014700 	.word	0x08014700

08013bc4 <fabsf>:
 8013bc4:	ee10 3a10 	vmov	r3, s0
 8013bc8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8013bcc:	ee00 3a10 	vmov	s0, r3
 8013bd0:	4770      	bx	lr

08013bd2 <finitef>:
 8013bd2:	b082      	sub	sp, #8
 8013bd4:	ed8d 0a01 	vstr	s0, [sp, #4]
 8013bd8:	9801      	ldr	r0, [sp, #4]
 8013bda:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8013bde:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8013be2:	bfac      	ite	ge
 8013be4:	2000      	movge	r0, #0
 8013be6:	2001      	movlt	r0, #1
 8013be8:	b002      	add	sp, #8
 8013bea:	4770      	bx	lr

08013bec <floorf>:
 8013bec:	ee10 3a10 	vmov	r3, s0
 8013bf0:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8013bf4:	3a7f      	subs	r2, #127	; 0x7f
 8013bf6:	2a16      	cmp	r2, #22
 8013bf8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8013bfc:	dc2a      	bgt.n	8013c54 <floorf+0x68>
 8013bfe:	2a00      	cmp	r2, #0
 8013c00:	da11      	bge.n	8013c26 <floorf+0x3a>
 8013c02:	eddf 7a18 	vldr	s15, [pc, #96]	; 8013c64 <floorf+0x78>
 8013c06:	ee30 0a27 	vadd.f32	s0, s0, s15
 8013c0a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8013c0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013c12:	dd05      	ble.n	8013c20 <floorf+0x34>
 8013c14:	2b00      	cmp	r3, #0
 8013c16:	da23      	bge.n	8013c60 <floorf+0x74>
 8013c18:	4a13      	ldr	r2, [pc, #76]	; (8013c68 <floorf+0x7c>)
 8013c1a:	2900      	cmp	r1, #0
 8013c1c:	bf18      	it	ne
 8013c1e:	4613      	movne	r3, r2
 8013c20:	ee00 3a10 	vmov	s0, r3
 8013c24:	4770      	bx	lr
 8013c26:	4911      	ldr	r1, [pc, #68]	; (8013c6c <floorf+0x80>)
 8013c28:	4111      	asrs	r1, r2
 8013c2a:	420b      	tst	r3, r1
 8013c2c:	d0fa      	beq.n	8013c24 <floorf+0x38>
 8013c2e:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8013c64 <floorf+0x78>
 8013c32:	ee30 0a27 	vadd.f32	s0, s0, s15
 8013c36:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8013c3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013c3e:	ddef      	ble.n	8013c20 <floorf+0x34>
 8013c40:	2b00      	cmp	r3, #0
 8013c42:	bfbe      	ittt	lt
 8013c44:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8013c48:	fa40 f202 	asrlt.w	r2, r0, r2
 8013c4c:	189b      	addlt	r3, r3, r2
 8013c4e:	ea23 0301 	bic.w	r3, r3, r1
 8013c52:	e7e5      	b.n	8013c20 <floorf+0x34>
 8013c54:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8013c58:	d3e4      	bcc.n	8013c24 <floorf+0x38>
 8013c5a:	ee30 0a00 	vadd.f32	s0, s0, s0
 8013c5e:	4770      	bx	lr
 8013c60:	2300      	movs	r3, #0
 8013c62:	e7dd      	b.n	8013c20 <floorf+0x34>
 8013c64:	7149f2ca 	.word	0x7149f2ca
 8013c68:	bf800000 	.word	0xbf800000
 8013c6c:	007fffff 	.word	0x007fffff

08013c70 <nanf>:
 8013c70:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8013c78 <nanf+0x8>
 8013c74:	4770      	bx	lr
 8013c76:	bf00      	nop
 8013c78:	7fc00000 	.word	0x7fc00000

08013c7c <scalbnf>:
 8013c7c:	ee10 3a10 	vmov	r3, s0
 8013c80:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8013c84:	d025      	beq.n	8013cd2 <scalbnf+0x56>
 8013c86:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8013c8a:	d302      	bcc.n	8013c92 <scalbnf+0x16>
 8013c8c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8013c90:	4770      	bx	lr
 8013c92:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8013c96:	d122      	bne.n	8013cde <scalbnf+0x62>
 8013c98:	4b2a      	ldr	r3, [pc, #168]	; (8013d44 <scalbnf+0xc8>)
 8013c9a:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8013d48 <scalbnf+0xcc>
 8013c9e:	4298      	cmp	r0, r3
 8013ca0:	ee20 0a27 	vmul.f32	s0, s0, s15
 8013ca4:	db16      	blt.n	8013cd4 <scalbnf+0x58>
 8013ca6:	ee10 3a10 	vmov	r3, s0
 8013caa:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8013cae:	3a19      	subs	r2, #25
 8013cb0:	4402      	add	r2, r0
 8013cb2:	2afe      	cmp	r2, #254	; 0xfe
 8013cb4:	dd15      	ble.n	8013ce2 <scalbnf+0x66>
 8013cb6:	ee10 3a10 	vmov	r3, s0
 8013cba:	eddf 7a24 	vldr	s15, [pc, #144]	; 8013d4c <scalbnf+0xd0>
 8013cbe:	eddf 6a24 	vldr	s13, [pc, #144]	; 8013d50 <scalbnf+0xd4>
 8013cc2:	2b00      	cmp	r3, #0
 8013cc4:	eeb0 7a67 	vmov.f32	s14, s15
 8013cc8:	bfb8      	it	lt
 8013cca:	eef0 7a66 	vmovlt.f32	s15, s13
 8013cce:	ee27 0a27 	vmul.f32	s0, s14, s15
 8013cd2:	4770      	bx	lr
 8013cd4:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8013d54 <scalbnf+0xd8>
 8013cd8:	ee20 0a27 	vmul.f32	s0, s0, s15
 8013cdc:	4770      	bx	lr
 8013cde:	0dd2      	lsrs	r2, r2, #23
 8013ce0:	e7e6      	b.n	8013cb0 <scalbnf+0x34>
 8013ce2:	2a00      	cmp	r2, #0
 8013ce4:	dd06      	ble.n	8013cf4 <scalbnf+0x78>
 8013ce6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8013cea:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8013cee:	ee00 3a10 	vmov	s0, r3
 8013cf2:	4770      	bx	lr
 8013cf4:	f112 0f16 	cmn.w	r2, #22
 8013cf8:	da1a      	bge.n	8013d30 <scalbnf+0xb4>
 8013cfa:	f24c 3350 	movw	r3, #50000	; 0xc350
 8013cfe:	4298      	cmp	r0, r3
 8013d00:	ee10 3a10 	vmov	r3, s0
 8013d04:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013d08:	dd0a      	ble.n	8013d20 <scalbnf+0xa4>
 8013d0a:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8013d4c <scalbnf+0xd0>
 8013d0e:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8013d50 <scalbnf+0xd4>
 8013d12:	eef0 7a40 	vmov.f32	s15, s0
 8013d16:	2b00      	cmp	r3, #0
 8013d18:	bf18      	it	ne
 8013d1a:	eeb0 0a47 	vmovne.f32	s0, s14
 8013d1e:	e7db      	b.n	8013cd8 <scalbnf+0x5c>
 8013d20:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8013d54 <scalbnf+0xd8>
 8013d24:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8013d58 <scalbnf+0xdc>
 8013d28:	eef0 7a40 	vmov.f32	s15, s0
 8013d2c:	2b00      	cmp	r3, #0
 8013d2e:	e7f3      	b.n	8013d18 <scalbnf+0x9c>
 8013d30:	3219      	adds	r2, #25
 8013d32:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8013d36:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8013d3a:	eddf 7a08 	vldr	s15, [pc, #32]	; 8013d5c <scalbnf+0xe0>
 8013d3e:	ee07 3a10 	vmov	s14, r3
 8013d42:	e7c4      	b.n	8013cce <scalbnf+0x52>
 8013d44:	ffff3cb0 	.word	0xffff3cb0
 8013d48:	4c000000 	.word	0x4c000000
 8013d4c:	7149f2ca 	.word	0x7149f2ca
 8013d50:	f149f2ca 	.word	0xf149f2ca
 8013d54:	0da24260 	.word	0x0da24260
 8013d58:	8da24260 	.word	0x8da24260
 8013d5c:	33000000 	.word	0x33000000

08013d60 <_init>:
 8013d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013d62:	bf00      	nop
 8013d64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013d66:	bc08      	pop	{r3}
 8013d68:	469e      	mov	lr, r3
 8013d6a:	4770      	bx	lr

08013d6c <_fini>:
 8013d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013d6e:	bf00      	nop
 8013d70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013d72:	bc08      	pop	{r3}
 8013d74:	469e      	mov	lr, r3
 8013d76:	4770      	bx	lr
