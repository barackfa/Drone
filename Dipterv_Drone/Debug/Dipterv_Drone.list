
Dipterv_Drone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015d38  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009e8  08015ec8  08015ec8  00025ec8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080168b0  080168b0  00030248  2**0
                  CONTENTS
  4 .ARM          00000008  080168b0  080168b0  000268b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080168b8  080168b8  00030248  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080168b8  080168b8  000268b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080168bc  080168bc  000268bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000248  20000000  080168c0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030248  2**0
                  CONTENTS
 10 .bss          0000671c  20000248  20000248  00030248  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20006964  20006964  00030248  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030248  2**0
                  CONTENTS, READONLY
 13 .debug_info   00022987  00000000  00000000  00030278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004550  00000000  00000000  00052bff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001e28  00000000  00000000  00057150  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001c78  00000000  00000000  00058f78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025e76  00000000  00000000  0005abf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002271d  00000000  00000000  00080a66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e0ff4  00000000  00000000  000a3183  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00184177  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00009960  00000000  00000000  001841c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000248 	.word	0x20000248
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08015eb0 	.word	0x08015eb0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000024c 	.word	0x2000024c
 80001cc:	08015eb0 	.word	0x08015eb0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b974 	b.w	8000f88 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468e      	mov	lr, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14d      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4694      	mov	ip, r2
 8000cca:	d969      	bls.n	8000da0 <__udivmoddi4+0xe8>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b152      	cbz	r2, 8000ce8 <__udivmoddi4+0x30>
 8000cd2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cd6:	f1c2 0120 	rsb	r1, r2, #32
 8000cda:	fa20 f101 	lsr.w	r1, r0, r1
 8000cde:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ce6:	4094      	lsls	r4, r2
 8000ce8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cec:	0c21      	lsrs	r1, r4, #16
 8000cee:	fbbe f6f8 	udiv	r6, lr, r8
 8000cf2:	fa1f f78c 	uxth.w	r7, ip
 8000cf6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cfa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cfe:	fb06 f107 	mul.w	r1, r6, r7
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d0e:	f080 811f 	bcs.w	8000f50 <__udivmoddi4+0x298>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 811c 	bls.w	8000f50 <__udivmoddi4+0x298>
 8000d18:	3e02      	subs	r6, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a5b      	subs	r3, r3, r1
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d24:	fb08 3310 	mls	r3, r8, r0, r3
 8000d28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d2c:	fb00 f707 	mul.w	r7, r0, r7
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	d90a      	bls.n	8000d4a <__udivmoddi4+0x92>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3c:	f080 810a 	bcs.w	8000f54 <__udivmoddi4+0x29c>
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	f240 8107 	bls.w	8000f54 <__udivmoddi4+0x29c>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4e:	1be4      	subs	r4, r4, r7
 8000d50:	2600      	movs	r6, #0
 8000d52:	b11d      	cbz	r5, 8000d5c <__udivmoddi4+0xa4>
 8000d54:	40d4      	lsrs	r4, r2
 8000d56:	2300      	movs	r3, #0
 8000d58:	e9c5 4300 	strd	r4, r3, [r5]
 8000d5c:	4631      	mov	r1, r6
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d909      	bls.n	8000d7a <__udivmoddi4+0xc2>
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	f000 80ef 	beq.w	8000f4a <__udivmoddi4+0x292>
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d72:	4630      	mov	r0, r6
 8000d74:	4631      	mov	r1, r6
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	fab3 f683 	clz	r6, r3
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	d14a      	bne.n	8000e18 <__udivmoddi4+0x160>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0xd4>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 80f9 	bhi.w	8000f7e <__udivmoddi4+0x2c6>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	469e      	mov	lr, r3
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d0e0      	beq.n	8000d5c <__udivmoddi4+0xa4>
 8000d9a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d9e:	e7dd      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000da0:	b902      	cbnz	r2, 8000da4 <__udivmoddi4+0xec>
 8000da2:	deff      	udf	#255	; 0xff
 8000da4:	fab2 f282 	clz	r2, r2
 8000da8:	2a00      	cmp	r2, #0
 8000daa:	f040 8092 	bne.w	8000ed2 <__udivmoddi4+0x21a>
 8000dae:	eba1 010c 	sub.w	r1, r1, ip
 8000db2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db6:	fa1f fe8c 	uxth.w	lr, ip
 8000dba:	2601      	movs	r6, #1
 8000dbc:	0c20      	lsrs	r0, r4, #16
 8000dbe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dc2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dc6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dca:	fb0e f003 	mul.w	r0, lr, r3
 8000dce:	4288      	cmp	r0, r1
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x12c>
 8000dd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x12a>
 8000ddc:	4288      	cmp	r0, r1
 8000dde:	f200 80cb 	bhi.w	8000f78 <__udivmoddi4+0x2c0>
 8000de2:	4643      	mov	r3, r8
 8000de4:	1a09      	subs	r1, r1, r0
 8000de6:	b2a4      	uxth	r4, r4
 8000de8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dec:	fb07 1110 	mls	r1, r7, r0, r1
 8000df0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000df4:	fb0e fe00 	mul.w	lr, lr, r0
 8000df8:	45a6      	cmp	lr, r4
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x156>
 8000dfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000e00:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e04:	d202      	bcs.n	8000e0c <__udivmoddi4+0x154>
 8000e06:	45a6      	cmp	lr, r4
 8000e08:	f200 80bb 	bhi.w	8000f82 <__udivmoddi4+0x2ca>
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	eba4 040e 	sub.w	r4, r4, lr
 8000e12:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e16:	e79c      	b.n	8000d52 <__udivmoddi4+0x9a>
 8000e18:	f1c6 0720 	rsb	r7, r6, #32
 8000e1c:	40b3      	lsls	r3, r6
 8000e1e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e22:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e26:	fa20 f407 	lsr.w	r4, r0, r7
 8000e2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	40f9      	lsrs	r1, r7
 8000e32:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e36:	fa00 f306 	lsl.w	r3, r0, r6
 8000e3a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e3e:	0c20      	lsrs	r0, r4, #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fb09 1118 	mls	r1, r9, r8, r1
 8000e48:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e4c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e50:	4288      	cmp	r0, r1
 8000e52:	fa02 f206 	lsl.w	r2, r2, r6
 8000e56:	d90b      	bls.n	8000e70 <__udivmoddi4+0x1b8>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e60:	f080 8088 	bcs.w	8000f74 <__udivmoddi4+0x2bc>
 8000e64:	4288      	cmp	r0, r1
 8000e66:	f240 8085 	bls.w	8000f74 <__udivmoddi4+0x2bc>
 8000e6a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e78:	fb09 1110 	mls	r1, r9, r0, r1
 8000e7c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e80:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e84:	458e      	cmp	lr, r1
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x1e2>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e90:	d26c      	bcs.n	8000f6c <__udivmoddi4+0x2b4>
 8000e92:	458e      	cmp	lr, r1
 8000e94:	d96a      	bls.n	8000f6c <__udivmoddi4+0x2b4>
 8000e96:	3802      	subs	r0, #2
 8000e98:	4461      	add	r1, ip
 8000e9a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e9e:	fba0 9402 	umull	r9, r4, r0, r2
 8000ea2:	eba1 010e 	sub.w	r1, r1, lr
 8000ea6:	42a1      	cmp	r1, r4
 8000ea8:	46c8      	mov	r8, r9
 8000eaa:	46a6      	mov	lr, r4
 8000eac:	d356      	bcc.n	8000f5c <__udivmoddi4+0x2a4>
 8000eae:	d053      	beq.n	8000f58 <__udivmoddi4+0x2a0>
 8000eb0:	b15d      	cbz	r5, 8000eca <__udivmoddi4+0x212>
 8000eb2:	ebb3 0208 	subs.w	r2, r3, r8
 8000eb6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eba:	fa01 f707 	lsl.w	r7, r1, r7
 8000ebe:	fa22 f306 	lsr.w	r3, r2, r6
 8000ec2:	40f1      	lsrs	r1, r6
 8000ec4:	431f      	orrs	r7, r3
 8000ec6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eca:	2600      	movs	r6, #0
 8000ecc:	4631      	mov	r1, r6
 8000ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed2:	f1c2 0320 	rsb	r3, r2, #32
 8000ed6:	40d8      	lsrs	r0, r3
 8000ed8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000edc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ee0:	4091      	lsls	r1, r2
 8000ee2:	4301      	orrs	r1, r0
 8000ee4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee8:	fa1f fe8c 	uxth.w	lr, ip
 8000eec:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ef0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ef4:	0c0b      	lsrs	r3, r1, #16
 8000ef6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000efa:	fb00 f60e 	mul.w	r6, r0, lr
 8000efe:	429e      	cmp	r6, r3
 8000f00:	fa04 f402 	lsl.w	r4, r4, r2
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x260>
 8000f06:	eb1c 0303 	adds.w	r3, ip, r3
 8000f0a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f0e:	d22f      	bcs.n	8000f70 <__udivmoddi4+0x2b8>
 8000f10:	429e      	cmp	r6, r3
 8000f12:	d92d      	bls.n	8000f70 <__udivmoddi4+0x2b8>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4463      	add	r3, ip
 8000f18:	1b9b      	subs	r3, r3, r6
 8000f1a:	b289      	uxth	r1, r1
 8000f1c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f20:	fb07 3316 	mls	r3, r7, r6, r3
 8000f24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f28:	fb06 f30e 	mul.w	r3, r6, lr
 8000f2c:	428b      	cmp	r3, r1
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x28a>
 8000f30:	eb1c 0101 	adds.w	r1, ip, r1
 8000f34:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f38:	d216      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d914      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3e:	3e02      	subs	r6, #2
 8000f40:	4461      	add	r1, ip
 8000f42:	1ac9      	subs	r1, r1, r3
 8000f44:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f48:	e738      	b.n	8000dbc <__udivmoddi4+0x104>
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e705      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e3      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6f8      	b.n	8000d4a <__udivmoddi4+0x92>
 8000f58:	454b      	cmp	r3, r9
 8000f5a:	d2a9      	bcs.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f5c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f60:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7a3      	b.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f68:	4646      	mov	r6, r8
 8000f6a:	e7ea      	b.n	8000f42 <__udivmoddi4+0x28a>
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	e794      	b.n	8000e9a <__udivmoddi4+0x1e2>
 8000f70:	4640      	mov	r0, r8
 8000f72:	e7d1      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f74:	46d0      	mov	r8, sl
 8000f76:	e77b      	b.n	8000e70 <__udivmoddi4+0x1b8>
 8000f78:	3b02      	subs	r3, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	e732      	b.n	8000de4 <__udivmoddi4+0x12c>
 8000f7e:	4630      	mov	r0, r6
 8000f80:	e709      	b.n	8000d96 <__udivmoddi4+0xde>
 8000f82:	4464      	add	r4, ip
 8000f84:	3802      	subs	r0, #2
 8000f86:	e742      	b.n	8000e0e <__udivmoddi4+0x156>

08000f88 <__aeabi_idiv0>:
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop

08000f8c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b085      	sub	sp, #20
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	60f8      	str	r0, [r7, #12]
 8000f94:	60b9      	str	r1, [r7, #8]
 8000f96:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	4a07      	ldr	r2, [pc, #28]	; (8000fb8 <vApplicationGetIdleTaskMemory+0x2c>)
 8000f9c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000f9e:	68bb      	ldr	r3, [r7, #8]
 8000fa0:	4a06      	ldr	r2, [pc, #24]	; (8000fbc <vApplicationGetIdleTaskMemory+0x30>)
 8000fa2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	2280      	movs	r2, #128	; 0x80
 8000fa8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000faa:	bf00      	nop
 8000fac:	3714      	adds	r7, #20
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	20000264 	.word	0x20000264
 8000fbc:	200002b8 	.word	0x200002b8

08000fc0 <FusionRadiansToDegrees>:
/**
 * @brief Converts radians to degrees.
 * @param radians Radians.
 * @return Degrees.
 */
static inline float FusionRadiansToDegrees(const float radians) {
 8000fc0:	b480      	push	{r7}
 8000fc2:	b083      	sub	sp, #12
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	ed87 0a01 	vstr	s0, [r7, #4]
    return radians * (180.0f / (float) M_PI);
 8000fca:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fce:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8000fe4 <FusionRadiansToDegrees+0x24>
 8000fd2:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8000fd6:	eeb0 0a67 	vmov.f32	s0, s15
 8000fda:	370c      	adds	r7, #12
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr
 8000fe4:	42652ee0 	.word	0x42652ee0

08000fe8 <FusionAsin>:
/**
 * @brief Returns the arc sine of the value.
 * @param value Value.
 * @return Arc sine of the value.
 */
static inline float FusionAsin(const float value) {
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	ed87 0a01 	vstr	s0, [r7, #4]
    if (value <= -1.0f) {
 8000ff2:	edd7 7a01 	vldr	s15, [r7, #4]
 8000ff6:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8000ffa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000ffe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001002:	d802      	bhi.n	800100a <FusionAsin+0x22>
        return (float) M_PI / -2.0f;
 8001004:	eddf 7a0c 	vldr	s15, [pc, #48]	; 8001038 <FusionAsin+0x50>
 8001008:	e011      	b.n	800102e <FusionAsin+0x46>
    }
    if (value >= 1.0f) {
 800100a:	edd7 7a01 	vldr	s15, [r7, #4]
 800100e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001012:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001016:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800101a:	db02      	blt.n	8001022 <FusionAsin+0x3a>
        return (float) M_PI / 2.0f;
 800101c:	eddf 7a07 	vldr	s15, [pc, #28]	; 800103c <FusionAsin+0x54>
 8001020:	e005      	b.n	800102e <FusionAsin+0x46>
    }
    return asinf(value);
 8001022:	ed97 0a01 	vldr	s0, [r7, #4]
 8001026:	f012 fd9b 	bl	8013b60 <asinf>
 800102a:	eef0 7a40 	vmov.f32	s15, s0
}
 800102e:	eeb0 0a67 	vmov.f32	s0, s15
 8001032:	3708      	adds	r7, #8
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	bfc90fdb 	.word	0xbfc90fdb
 800103c:	3fc90fdb 	.word	0x3fc90fdb

08001040 <FusionVectorSubtract>:
 * @brief Returns vector B subtracted from vector A.
 * @param vectorA Vector A.
 * @param vectorB Vector B.
 * @return Vector B subtracted from vector A.
 */
static inline FusionVector FusionVectorSubtract(const FusionVector vectorA, const FusionVector vectorB) {
 8001040:	b480      	push	{r7}
 8001042:	b091      	sub	sp, #68	; 0x44
 8001044:	af00      	add	r7, sp, #0
 8001046:	eeb0 5a40 	vmov.f32	s10, s0
 800104a:	eef0 5a60 	vmov.f32	s11, s1
 800104e:	eeb0 6a41 	vmov.f32	s12, s2
 8001052:	eef0 6a61 	vmov.f32	s13, s3
 8001056:	eeb0 7a42 	vmov.f32	s14, s4
 800105a:	eef0 7a62 	vmov.f32	s15, s5
 800105e:	ed87 5a07 	vstr	s10, [r7, #28]
 8001062:	edc7 5a08 	vstr	s11, [r7, #32]
 8001066:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 800106a:	edc7 6a04 	vstr	s13, [r7, #16]
 800106e:	ed87 7a05 	vstr	s14, [r7, #20]
 8001072:	edc7 7a06 	vstr	s15, [r7, #24]
    const FusionVector result = {.axis = {
            .x = vectorA.axis.x - vectorB.axis.x,
 8001076:	ed97 7a07 	vldr	s14, [r7, #28]
 800107a:	edd7 7a04 	vldr	s15, [r7, #16]
 800107e:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8001082:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = vectorA.axis.y - vectorB.axis.y,
 8001086:	ed97 7a08 	vldr	s14, [r7, #32]
 800108a:	edd7 7a05 	vldr	s15, [r7, #20]
 800108e:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8001092:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = vectorA.axis.z - vectorB.axis.z,
 8001096:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800109a:	edd7 7a06 	vldr	s15, [r7, #24]
 800109e:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80010a2:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    }};
    return result;
 80010a6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80010aa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80010ae:	ca07      	ldmia	r2, {r0, r1, r2}
 80010b0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80010b4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80010b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80010b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80010ba:	ee06 1a90 	vmov	s13, r1
 80010be:	ee07 2a10 	vmov	s14, r2
 80010c2:	ee07 3a90 	vmov	s15, r3
}
 80010c6:	eeb0 0a66 	vmov.f32	s0, s13
 80010ca:	eef0 0a47 	vmov.f32	s1, s14
 80010ce:	eeb0 1a67 	vmov.f32	s2, s15
 80010d2:	3744      	adds	r7, #68	; 0x44
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr

080010dc <FusionVectorMultiplyScalar>:
 * @brief Returns the multiplication of a vector by a scalar.
 * @param vector Vector.
 * @param scalar Scalar.
 * @return Multiplication of a vector by a scalar.
 */
static inline FusionVector FusionVectorMultiplyScalar(const FusionVector vector, const float scalar) {
 80010dc:	b480      	push	{r7}
 80010de:	b08f      	sub	sp, #60	; 0x3c
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	eef0 6a40 	vmov.f32	s13, s0
 80010e6:	eeb0 7a60 	vmov.f32	s14, s1
 80010ea:	eef0 7a41 	vmov.f32	s15, s2
 80010ee:	edc7 1a04 	vstr	s3, [r7, #16]
 80010f2:	edc7 6a05 	vstr	s13, [r7, #20]
 80010f6:	ed87 7a06 	vstr	s14, [r7, #24]
 80010fa:	edc7 7a07 	vstr	s15, [r7, #28]
    const FusionVector result = {.axis = {
            .x = vector.axis.x * scalar,
 80010fe:	ed97 7a05 	vldr	s14, [r7, #20]
 8001102:	edd7 7a04 	vldr	s15, [r7, #16]
 8001106:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800110a:	edc7 7a08 	vstr	s15, [r7, #32]
            .y = vector.axis.y * scalar,
 800110e:	ed97 7a06 	vldr	s14, [r7, #24]
 8001112:	edd7 7a04 	vldr	s15, [r7, #16]
 8001116:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800111a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            .z = vector.axis.z * scalar,
 800111e:	ed97 7a07 	vldr	s14, [r7, #28]
 8001122:	edd7 7a04 	vldr	s15, [r7, #16]
 8001126:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800112a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    }};
    return result;
 800112e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001132:	f107 0220 	add.w	r2, r7, #32
 8001136:	ca07      	ldmia	r2, {r0, r1, r2}
 8001138:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800113c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800113e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001140:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001142:	ee06 1a90 	vmov	s13, r1
 8001146:	ee07 2a10 	vmov	s14, r2
 800114a:	ee07 3a90 	vmov	s15, r3
}
 800114e:	eeb0 0a66 	vmov.f32	s0, s13
 8001152:	eef0 0a47 	vmov.f32	s1, s14
 8001156:	eeb0 1a67 	vmov.f32	s2, s15
 800115a:	373c      	adds	r7, #60	; 0x3c
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr

08001164 <FusionMatrixMultiplyVector>:
 * @brief Returns the multiplication of a matrix with a vector.
 * @param matrix Matrix.
 * @param vector Vector.
 * @return Multiplication of a matrix with a vector.
 */
static inline FusionVector FusionMatrixMultiplyVector(const FusionMatrix matrix, const FusionVector vector) {
 8001164:	b084      	sub	sp, #16
 8001166:	b480      	push	{r7}
 8001168:	b08f      	sub	sp, #60	; 0x3c
 800116a:	af00      	add	r7, sp, #0
 800116c:	f107 0c40 	add.w	ip, r7, #64	; 0x40
 8001170:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 8001174:	eef0 6a40 	vmov.f32	s13, s0
 8001178:	eeb0 7a60 	vmov.f32	s14, s1
 800117c:	eef0 7a41 	vmov.f32	s15, s2
 8001180:	edc7 6a05 	vstr	s13, [r7, #20]
 8001184:	ed87 7a06 	vstr	s14, [r7, #24]
 8001188:	edc7 7a07 	vstr	s15, [r7, #28]
#define R matrix.element
    const FusionVector result = {.axis = {
            .x = R.xx * vector.axis.x + R.xy * vector.axis.y + R.xz * vector.axis.z,
 800118c:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001190:	edd7 7a05 	vldr	s15, [r7, #20]
 8001194:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001198:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 800119c:	edd7 7a06 	vldr	s15, [r7, #24]
 80011a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011a4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80011a8:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 80011ac:	edd7 7a07 	vldr	s15, [r7, #28]
 80011b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011b4:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80011b8:	edc7 7a08 	vstr	s15, [r7, #32]
            .y = R.yx * vector.axis.x + R.yy * vector.axis.y + R.yz * vector.axis.z,
 80011bc:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80011c0:	edd7 7a05 	vldr	s15, [r7, #20]
 80011c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011c8:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 80011cc:	edd7 7a06 	vldr	s15, [r7, #24]
 80011d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011d4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80011d8:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 80011dc:	edd7 7a07 	vldr	s15, [r7, #28]
 80011e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011e4:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80011e8:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            .z = R.zx * vector.axis.x + R.zy * vector.axis.y + R.zz * vector.axis.z,
 80011ec:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80011f0:	edd7 7a05 	vldr	s15, [r7, #20]
 80011f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011f8:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 80011fc:	edd7 7a06 	vldr	s15, [r7, #24]
 8001200:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001204:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001208:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 800120c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001210:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001214:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8001218:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    }};
    return result;
 800121c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001220:	f107 0220 	add.w	r2, r7, #32
 8001224:	ca07      	ldmia	r2, {r0, r1, r2}
 8001226:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800122a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800122c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800122e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001230:	ee06 1a90 	vmov	s13, r1
 8001234:	ee07 2a10 	vmov	s14, r2
 8001238:	ee07 3a90 	vmov	s15, r3
#undef R
}
 800123c:	eeb0 0a66 	vmov.f32	s0, s13
 8001240:	eef0 0a47 	vmov.f32	s1, s14
 8001244:	eeb0 1a67 	vmov.f32	s2, s15
 8001248:	373c      	adds	r7, #60	; 0x3c
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	b004      	add	sp, #16
 8001252:	4770      	bx	lr

08001254 <FusionQuaternionToMatrix>:
/**
 * @brief Converts a quaternion to a rotation matrix.
 * @param quaternion Quaternion.
 * @return Rotation matrix.
 */
static inline FusionMatrix FusionQuaternionToMatrix(const FusionQuaternion quaternion) {
 8001254:	b4b0      	push	{r4, r5, r7}
 8001256:	b097      	sub	sp, #92	; 0x5c
 8001258:	af00      	add	r7, sp, #0
 800125a:	6178      	str	r0, [r7, #20]
 800125c:	eeb0 6a40 	vmov.f32	s12, s0
 8001260:	eef0 6a60 	vmov.f32	s13, s1
 8001264:	eeb0 7a41 	vmov.f32	s14, s2
 8001268:	eef0 7a61 	vmov.f32	s15, s3
 800126c:	ed87 6a01 	vstr	s12, [r7, #4]
 8001270:	edc7 6a02 	vstr	s13, [r7, #8]
 8001274:	ed87 7a03 	vstr	s14, [r7, #12]
 8001278:	edc7 7a04 	vstr	s15, [r7, #16]
#define Q quaternion.element
    const float qwqw = Q.w * Q.w; // calculate common terms to avoid repeated operations
 800127c:	ed97 7a01 	vldr	s14, [r7, #4]
 8001280:	edd7 7a01 	vldr	s15, [r7, #4]
 8001284:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001288:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    const float qwqx = Q.w * Q.x;
 800128c:	ed97 7a01 	vldr	s14, [r7, #4]
 8001290:	edd7 7a02 	vldr	s15, [r7, #8]
 8001294:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001298:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    const float qwqy = Q.w * Q.y;
 800129c:	ed97 7a01 	vldr	s14, [r7, #4]
 80012a0:	edd7 7a03 	vldr	s15, [r7, #12]
 80012a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012a8:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    const float qwqz = Q.w * Q.z;
 80012ac:	ed97 7a01 	vldr	s14, [r7, #4]
 80012b0:	edd7 7a04 	vldr	s15, [r7, #16]
 80012b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012b8:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    const float qxqy = Q.x * Q.y;
 80012bc:	ed97 7a02 	vldr	s14, [r7, #8]
 80012c0:	edd7 7a03 	vldr	s15, [r7, #12]
 80012c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012c8:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    const float qxqz = Q.x * Q.z;
 80012cc:	ed97 7a02 	vldr	s14, [r7, #8]
 80012d0:	edd7 7a04 	vldr	s15, [r7, #16]
 80012d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012d8:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    const float qyqz = Q.y * Q.z;
 80012dc:	ed97 7a03 	vldr	s14, [r7, #12]
 80012e0:	edd7 7a04 	vldr	s15, [r7, #16]
 80012e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012e8:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    const FusionMatrix matrix = {.element = {
            .xx = 2.0f * (qwqw - 0.5f + Q.x * Q.x),
 80012ec:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80012f0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80012f4:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80012f8:	edd7 6a02 	vldr	s13, [r7, #8]
 80012fc:	edd7 7a02 	vldr	s15, [r7, #8]
 8001300:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001304:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001308:	ee77 7aa7 	vadd.f32	s15, s15, s15
    const FusionMatrix matrix = {.element = {
 800130c:	edc7 7a06 	vstr	s15, [r7, #24]
            .xy = 2.0f * (qxqy - qwqz),
 8001310:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8001314:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001318:	ee77 7a67 	vsub.f32	s15, s14, s15
 800131c:	ee77 7aa7 	vadd.f32	s15, s15, s15
    const FusionMatrix matrix = {.element = {
 8001320:	edc7 7a07 	vstr	s15, [r7, #28]
            .xz = 2.0f * (qxqz + qwqy),
 8001324:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001328:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800132c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001330:	ee77 7aa7 	vadd.f32	s15, s15, s15
    const FusionMatrix matrix = {.element = {
 8001334:	edc7 7a08 	vstr	s15, [r7, #32]
            .yx = 2.0f * (qxqy + qwqz),
 8001338:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 800133c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001340:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001344:	ee77 7aa7 	vadd.f32	s15, s15, s15
    const FusionMatrix matrix = {.element = {
 8001348:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            .yy = 2.0f * (qwqw - 0.5f + Q.y * Q.y),
 800134c:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001350:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001354:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001358:	edd7 6a03 	vldr	s13, [r7, #12]
 800135c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001360:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001364:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001368:	ee77 7aa7 	vadd.f32	s15, s15, s15
    const FusionMatrix matrix = {.element = {
 800136c:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .yz = 2.0f * (qyqz - qwqx),
 8001370:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8001374:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8001378:	ee77 7a67 	vsub.f32	s15, s14, s15
 800137c:	ee77 7aa7 	vadd.f32	s15, s15, s15
    const FusionMatrix matrix = {.element = {
 8001380:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .zx = 2.0f * (qxqz - qwqy),
 8001384:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001388:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800138c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001390:	ee77 7aa7 	vadd.f32	s15, s15, s15
    const FusionMatrix matrix = {.element = {
 8001394:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
            .zy = 2.0f * (qyqz + qwqx),
 8001398:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800139c:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80013a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013a4:	ee77 7aa7 	vadd.f32	s15, s15, s15
    const FusionMatrix matrix = {.element = {
 80013a8:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
            .zz = 2.0f * (qwqw - 0.5f + Q.z * Q.z),
 80013ac:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80013b0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80013b4:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80013b8:	edd7 6a04 	vldr	s13, [r7, #16]
 80013bc:	edd7 7a04 	vldr	s15, [r7, #16]
 80013c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013c8:	ee77 7aa7 	vadd.f32	s15, s15, s15
    const FusionMatrix matrix = {.element = {
 80013cc:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
    }};
    return matrix;
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	461d      	mov	r5, r3
 80013d4:	f107 0418 	add.w	r4, r7, #24
 80013d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013e0:	6823      	ldr	r3, [r4, #0]
 80013e2:	602b      	str	r3, [r5, #0]
#undef Q
}
 80013e4:	6978      	ldr	r0, [r7, #20]
 80013e6:	375c      	adds	r7, #92	; 0x5c
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bcb0      	pop	{r4, r5, r7}
 80013ec:	4770      	bx	lr

080013ee <FusionQuaternionToEuler>:
/**
 * @brief Converts a quaternion to ZYX Euler angles in degrees.
 * @param quaternion Quaternion.
 * @return Euler angles in degrees.
 */
static inline FusionEuler FusionQuaternionToEuler(const FusionQuaternion quaternion) {
 80013ee:	b580      	push	{r7, lr}
 80013f0:	b090      	sub	sp, #64	; 0x40
 80013f2:	af00      	add	r7, sp, #0
 80013f4:	eeb0 6a40 	vmov.f32	s12, s0
 80013f8:	eef0 6a60 	vmov.f32	s13, s1
 80013fc:	eeb0 7a41 	vmov.f32	s14, s2
 8001400:	eef0 7a61 	vmov.f32	s15, s3
 8001404:	ed87 6a04 	vstr	s12, [r7, #16]
 8001408:	edc7 6a05 	vstr	s13, [r7, #20]
 800140c:	ed87 7a06 	vstr	s14, [r7, #24]
 8001410:	edc7 7a07 	vstr	s15, [r7, #28]
#define Q quaternion.element
    const float halfMinusQySquared = 0.5f - Q.y * Q.y; // calculate common terms to avoid repeated operations
 8001414:	ed97 7a06 	vldr	s14, [r7, #24]
 8001418:	edd7 7a06 	vldr	s15, [r7, #24]
 800141c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001420:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001424:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001428:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    const FusionEuler euler = {.angle = {
            .roll = FusionRadiansToDegrees(atan2f(Q.w * Q.x + Q.y * Q.z, halfMinusQySquared - Q.x * Q.x)),
 800142c:	ed97 7a04 	vldr	s14, [r7, #16]
 8001430:	edd7 7a05 	vldr	s15, [r7, #20]
 8001434:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001438:	edd7 6a06 	vldr	s13, [r7, #24]
 800143c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001440:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001444:	ee77 6a27 	vadd.f32	s13, s14, s15
 8001448:	ed97 7a05 	vldr	s14, [r7, #20]
 800144c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001450:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001454:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8001458:	ee77 7a67 	vsub.f32	s15, s14, s15
 800145c:	eef0 0a67 	vmov.f32	s1, s15
 8001460:	eeb0 0a66 	vmov.f32	s0, s13
 8001464:	f012 fba8 	bl	8013bb8 <atan2f>
 8001468:	eef0 7a40 	vmov.f32	s15, s0
 800146c:	eeb0 0a67 	vmov.f32	s0, s15
 8001470:	f7ff fda6 	bl	8000fc0 <FusionRadiansToDegrees>
 8001474:	eef0 7a40 	vmov.f32	s15, s0
    const FusionEuler euler = {.angle = {
 8001478:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            .pitch = FusionRadiansToDegrees(FusionAsin(2.0f * (Q.w * Q.y - Q.z * Q.x))),
 800147c:	ed97 7a04 	vldr	s14, [r7, #16]
 8001480:	edd7 7a06 	vldr	s15, [r7, #24]
 8001484:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001488:	edd7 6a07 	vldr	s13, [r7, #28]
 800148c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001490:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001494:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001498:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800149c:	eeb0 0a67 	vmov.f32	s0, s15
 80014a0:	f7ff fda2 	bl	8000fe8 <FusionAsin>
 80014a4:	eef0 7a40 	vmov.f32	s15, s0
 80014a8:	eeb0 0a67 	vmov.f32	s0, s15
 80014ac:	f7ff fd88 	bl	8000fc0 <FusionRadiansToDegrees>
 80014b0:	eef0 7a40 	vmov.f32	s15, s0
    const FusionEuler euler = {.angle = {
 80014b4:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .yaw = FusionRadiansToDegrees(atan2f(Q.w * Q.z + Q.x * Q.y, halfMinusQySquared - Q.z * Q.z)),
 80014b8:	ed97 7a04 	vldr	s14, [r7, #16]
 80014bc:	edd7 7a07 	vldr	s15, [r7, #28]
 80014c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014c4:	edd7 6a05 	vldr	s13, [r7, #20]
 80014c8:	edd7 7a06 	vldr	s15, [r7, #24]
 80014cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014d0:	ee77 6a27 	vadd.f32	s13, s14, s15
 80014d4:	ed97 7a07 	vldr	s14, [r7, #28]
 80014d8:	edd7 7a07 	vldr	s15, [r7, #28]
 80014dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014e0:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80014e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014e8:	eef0 0a67 	vmov.f32	s1, s15
 80014ec:	eeb0 0a66 	vmov.f32	s0, s13
 80014f0:	f012 fb62 	bl	8013bb8 <atan2f>
 80014f4:	eef0 7a40 	vmov.f32	s15, s0
 80014f8:	eeb0 0a67 	vmov.f32	s0, s15
 80014fc:	f7ff fd60 	bl	8000fc0 <FusionRadiansToDegrees>
 8001500:	eef0 7a40 	vmov.f32	s15, s0
    const FusionEuler euler = {.angle = {
 8001504:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    }};
    return euler;
 8001508:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800150c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001510:	ca07      	ldmia	r2, {r0, r1, r2}
 8001512:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001516:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001518:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800151a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800151c:	ee06 1a90 	vmov	s13, r1
 8001520:	ee07 2a10 	vmov	s14, r2
 8001524:	ee07 3a90 	vmov	s15, r3
#undef Q
}
 8001528:	eeb0 0a66 	vmov.f32	s0, s13
 800152c:	eef0 0a47 	vmov.f32	s1, s14
 8001530:	eeb0 1a67 	vmov.f32	s2, s15
 8001534:	3740      	adds	r7, #64	; 0x40
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
	...

0800153c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800153c:	b5b0      	push	{r4, r5, r7, lr}
 800153e:	b096      	sub	sp, #88	; 0x58
 8001540:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001542:	f004 fd21 	bl	8005f88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001546:	f000 f8a1 	bl	800168c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800154a:	f000 fda9 	bl	80020a0 <MX_GPIO_Init>
  MX_DMA_Init();
 800154e:	f000 fd87 	bl	8002060 <MX_DMA_Init>
  MX_TIM2_Init();
 8001552:	f000 fabb 	bl	8001acc <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8001556:	f000 fd05 	bl	8001f64 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800155a:	f000 f9f7 	bl	800194c <MX_I2C1_Init>
  MX_I2C2_Init();
 800155e:	f000 fa23 	bl	80019a8 <MX_I2C2_Init>
  MX_I2C3_Init();
 8001562:	f000 fa4f 	bl	8001a04 <MX_I2C3_Init>
  MX_TIM3_Init();
 8001566:	f000 fb21 	bl	8001bac <MX_TIM3_Init>
  MX_TIM4_Init();
 800156a:	f000 fbcd 	bl	8001d08 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 800156e:	f000 fccf 	bl	8001f10 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8001572:	f000 fd21 	bl	8001fb8 <MX_USART3_UART_Init>
  MX_SPI2_Init();
 8001576:	f000 fa73 	bl	8001a60 <MX_SPI2_Init>
  MX_USART6_UART_Init();
 800157a:	f000 fd47 	bl	800200c <MX_USART6_UART_Init>
  MX_ADC1_Init();
 800157e:	f000 f8ef 	bl	8001760 <MX_ADC1_Init>
  MX_ADC2_Init();
 8001582:	f000 f93f 	bl	8001804 <MX_ADC2_Init>
  MX_ADC3_Init();
 8001586:	f000 f98f 	bl	80018a8 <MX_ADC3_Init>
  MX_TIM6_Init();
 800158a:	f000 fc31 	bl	8001df0 <MX_TIM6_Init>
  MX_TIM7_Init();
 800158e:	f000 fc65 	bl	8001e5c <MX_TIM7_Init>
  MX_TIM10_Init();
 8001592:	f000 fc99 	bl	8001ec8 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */




  __HAL_SPI_ENABLE(&hspi2);
 8001596:	4b32      	ldr	r3, [pc, #200]	; (8001660 <main+0x124>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	681a      	ldr	r2, [r3, #0]
 800159c:	4b30      	ldr	r3, [pc, #192]	; (8001660 <main+0x124>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80015a4:	601a      	str	r2, [r3, #0]
  HAL_TIM_PWM_Start  ( &htim3,  TIM_CHANNEL_1  );
 80015a6:	2100      	movs	r1, #0
 80015a8:	482e      	ldr	r0, [pc, #184]	; (8001664 <main+0x128>)
 80015aa:	f008 fa29 	bl	8009a00 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start  ( &htim3,  TIM_CHANNEL_2  );
 80015ae:	2104      	movs	r1, #4
 80015b0:	482c      	ldr	r0, [pc, #176]	; (8001664 <main+0x128>)
 80015b2:	f008 fa25 	bl	8009a00 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start  ( &htim3,  TIM_CHANNEL_3  );
 80015b6:	2108      	movs	r1, #8
 80015b8:	482a      	ldr	r0, [pc, #168]	; (8001664 <main+0x128>)
 80015ba:	f008 fa21 	bl	8009a00 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start  ( &htim3,  TIM_CHANNEL_4  );
 80015be:	210c      	movs	r1, #12
 80015c0:	4828      	ldr	r0, [pc, #160]	; (8001664 <main+0x128>)
 80015c2:	f008 fa1d 	bl	8009a00 <HAL_TIM_PWM_Start>

  HAL_TIM_Base_Start  ( &htim10 );
 80015c6:	4828      	ldr	r0, [pc, #160]	; (8001668 <main+0x12c>)
 80015c8:	f008 f8e8 	bl	800979c <HAL_TIM_Base_Start>
  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  telemetria_Queue = xQueueCreate( 3, 3*sizeof( float ) );
 80015cc:	2200      	movs	r2, #0
 80015ce:	210c      	movs	r1, #12
 80015d0:	2003      	movs	r0, #3
 80015d2:	f00d fc57 	bl	800ee84 <xQueueGenericCreate>
 80015d6:	4603      	mov	r3, r0
 80015d8:	4a24      	ldr	r2, [pc, #144]	; (800166c <main+0x130>)
 80015da:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityBelowNormal, 0, 500);
 80015dc:	4b24      	ldr	r3, [pc, #144]	; (8001670 <main+0x134>)
 80015de:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80015e2:	461d      	mov	r5, r3
 80015e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015e8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80015ec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80015f0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80015f4:	2100      	movs	r1, #0
 80015f6:	4618      	mov	r0, r3
 80015f8:	f00d fac7 	bl	800eb8a <osThreadCreate>
 80015fc:	4603      	mov	r3, r0
 80015fe:	4a1d      	ldr	r2, [pc, #116]	; (8001674 <main+0x138>)
 8001600:	6013      	str	r3, [r2, #0]

  /* definition and creation of Data_Reading */
  osThreadDef(Data_Reading, Start_Data_Reading, osPriorityNormal, 0, 800);
 8001602:	4b1d      	ldr	r3, [pc, #116]	; (8001678 <main+0x13c>)
 8001604:	f107 0420 	add.w	r4, r7, #32
 8001608:	461d      	mov	r5, r3
 800160a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800160c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800160e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001612:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Data_ReadingHandle = osThreadCreate(osThread(Data_Reading), NULL);
 8001616:	f107 0320 	add.w	r3, r7, #32
 800161a:	2100      	movs	r1, #0
 800161c:	4618      	mov	r0, r3
 800161e:	f00d fab4 	bl	800eb8a <osThreadCreate>
 8001622:	4603      	mov	r3, r0
 8001624:	4a15      	ldr	r2, [pc, #84]	; (800167c <main+0x140>)
 8001626:	6013      	str	r3, [r2, #0]

  /* definition and creation of Orientation_cal */
  osThreadDef(Orientation_cal, Start_Orientation, osPriorityBelowNormal, 0, 200);
 8001628:	4b15      	ldr	r3, [pc, #84]	; (8001680 <main+0x144>)
 800162a:	1d3c      	adds	r4, r7, #4
 800162c:	461d      	mov	r5, r3
 800162e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001630:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001632:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001636:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Orientation_calHandle = osThreadCreate(osThread(Orientation_cal), NULL);
 800163a:	1d3b      	adds	r3, r7, #4
 800163c:	2100      	movs	r1, #0
 800163e:	4618      	mov	r0, r3
 8001640:	f00d faa3 	bl	800eb8a <osThreadCreate>
 8001644:	4603      	mov	r3, r0
 8001646:	4a0f      	ldr	r2, [pc, #60]	; (8001684 <main+0x148>)
 8001648:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800164a:	f00d fa97 	bl	800eb7c <osKernelStart>

  while (1)
  {


	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 800164e:	2108      	movs	r1, #8
 8001650:	480d      	ldr	r0, [pc, #52]	; (8001688 <main+0x14c>)
 8001652:	f005 fe5a 	bl	800730a <HAL_GPIO_TogglePin>

	  HAL_Delay(3);
 8001656:	2003      	movs	r0, #3
 8001658:	f004 fd08 	bl	800606c <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 800165c:	e7f7      	b.n	800164e <main+0x112>
 800165e:	bf00      	nop
 8001660:	2000068c 	.word	0x2000068c
 8001664:	2000072c 	.word	0x2000072c
 8001668:	2000084c 	.word	0x2000084c
 800166c:	20002bec 	.word	0x20002bec
 8001670:	08015ef4 	.word	0x08015ef4
 8001674:	20000a04 	.word	0x20000a04
 8001678:	08015f10 	.word	0x08015f10
 800167c:	20000a08 	.word	0x20000a08
 8001680:	08015f2c 	.word	0x08015f2c
 8001684:	20000a0c 	.word	0x20000a0c
 8001688:	40020400 	.word	0x40020400

0800168c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b094      	sub	sp, #80	; 0x50
 8001690:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001692:	f107 0320 	add.w	r3, r7, #32
 8001696:	2230      	movs	r2, #48	; 0x30
 8001698:	2100      	movs	r1, #0
 800169a:	4618      	mov	r0, r3
 800169c:	f00f face 	bl	8010c3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016a0:	f107 030c 	add.w	r3, r7, #12
 80016a4:	2200      	movs	r2, #0
 80016a6:	601a      	str	r2, [r3, #0]
 80016a8:	605a      	str	r2, [r3, #4]
 80016aa:	609a      	str	r2, [r3, #8]
 80016ac:	60da      	str	r2, [r3, #12]
 80016ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80016b0:	2300      	movs	r3, #0
 80016b2:	60bb      	str	r3, [r7, #8]
 80016b4:	4b28      	ldr	r3, [pc, #160]	; (8001758 <SystemClock_Config+0xcc>)
 80016b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b8:	4a27      	ldr	r2, [pc, #156]	; (8001758 <SystemClock_Config+0xcc>)
 80016ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016be:	6413      	str	r3, [r2, #64]	; 0x40
 80016c0:	4b25      	ldr	r3, [pc, #148]	; (8001758 <SystemClock_Config+0xcc>)
 80016c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016c8:	60bb      	str	r3, [r7, #8]
 80016ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80016cc:	2300      	movs	r3, #0
 80016ce:	607b      	str	r3, [r7, #4]
 80016d0:	4b22      	ldr	r3, [pc, #136]	; (800175c <SystemClock_Config+0xd0>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a21      	ldr	r2, [pc, #132]	; (800175c <SystemClock_Config+0xd0>)
 80016d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016da:	6013      	str	r3, [r2, #0]
 80016dc:	4b1f      	ldr	r3, [pc, #124]	; (800175c <SystemClock_Config+0xd0>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016e4:	607b      	str	r3, [r7, #4]
 80016e6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80016e8:	2301      	movs	r3, #1
 80016ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80016ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016f0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016f2:	2302      	movs	r3, #2
 80016f4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016f6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80016fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80016fc:	2304      	movs	r3, #4
 80016fe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001700:	23a8      	movs	r3, #168	; 0xa8
 8001702:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001704:	2302      	movs	r3, #2
 8001706:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001708:	2304      	movs	r3, #4
 800170a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800170c:	f107 0320 	add.w	r3, r7, #32
 8001710:	4618      	mov	r0, r3
 8001712:	f006 ff1b 	bl	800854c <HAL_RCC_OscConfig>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d001      	beq.n	8001720 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800171c:	f002 f970 	bl	8003a00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001720:	230f      	movs	r3, #15
 8001722:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001724:	2302      	movs	r3, #2
 8001726:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001728:	2300      	movs	r3, #0
 800172a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800172c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001730:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001732:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001736:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001738:	f107 030c 	add.w	r3, r7, #12
 800173c:	2105      	movs	r1, #5
 800173e:	4618      	mov	r0, r3
 8001740:	f007 f97c 	bl	8008a3c <HAL_RCC_ClockConfig>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d001      	beq.n	800174e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800174a:	f002 f959 	bl	8003a00 <Error_Handler>
  }
}
 800174e:	bf00      	nop
 8001750:	3750      	adds	r7, #80	; 0x50
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	40023800 	.word	0x40023800
 800175c:	40007000 	.word	0x40007000

08001760 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b084      	sub	sp, #16
 8001764:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001766:	463b      	mov	r3, r7
 8001768:	2200      	movs	r2, #0
 800176a:	601a      	str	r2, [r3, #0]
 800176c:	605a      	str	r2, [r3, #4]
 800176e:	609a      	str	r2, [r3, #8]
 8001770:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001772:	4b21      	ldr	r3, [pc, #132]	; (80017f8 <MX_ADC1_Init+0x98>)
 8001774:	4a21      	ldr	r2, [pc, #132]	; (80017fc <MX_ADC1_Init+0x9c>)
 8001776:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 8001778:	4b1f      	ldr	r3, [pc, #124]	; (80017f8 <MX_ADC1_Init+0x98>)
 800177a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800177e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001780:	4b1d      	ldr	r3, [pc, #116]	; (80017f8 <MX_ADC1_Init+0x98>)
 8001782:	2200      	movs	r2, #0
 8001784:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001786:	4b1c      	ldr	r3, [pc, #112]	; (80017f8 <MX_ADC1_Init+0x98>)
 8001788:	2200      	movs	r2, #0
 800178a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800178c:	4b1a      	ldr	r3, [pc, #104]	; (80017f8 <MX_ADC1_Init+0x98>)
 800178e:	2200      	movs	r2, #0
 8001790:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001792:	4b19      	ldr	r3, [pc, #100]	; (80017f8 <MX_ADC1_Init+0x98>)
 8001794:	2200      	movs	r2, #0
 8001796:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800179a:	4b17      	ldr	r3, [pc, #92]	; (80017f8 <MX_ADC1_Init+0x98>)
 800179c:	2200      	movs	r2, #0
 800179e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80017a0:	4b15      	ldr	r3, [pc, #84]	; (80017f8 <MX_ADC1_Init+0x98>)
 80017a2:	4a17      	ldr	r2, [pc, #92]	; (8001800 <MX_ADC1_Init+0xa0>)
 80017a4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80017a6:	4b14      	ldr	r3, [pc, #80]	; (80017f8 <MX_ADC1_Init+0x98>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80017ac:	4b12      	ldr	r3, [pc, #72]	; (80017f8 <MX_ADC1_Init+0x98>)
 80017ae:	2201      	movs	r2, #1
 80017b0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80017b2:	4b11      	ldr	r3, [pc, #68]	; (80017f8 <MX_ADC1_Init+0x98>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80017ba:	4b0f      	ldr	r3, [pc, #60]	; (80017f8 <MX_ADC1_Init+0x98>)
 80017bc:	2201      	movs	r2, #1
 80017be:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80017c0:	480d      	ldr	r0, [pc, #52]	; (80017f8 <MX_ADC1_Init+0x98>)
 80017c2:	f004 fc77 	bl	80060b4 <HAL_ADC_Init>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d001      	beq.n	80017d0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80017cc:	f002 f918 	bl	8003a00 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80017d0:	2305      	movs	r3, #5
 80017d2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80017d4:	2301      	movs	r3, #1
 80017d6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80017d8:	2300      	movs	r3, #0
 80017da:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017dc:	463b      	mov	r3, r7
 80017de:	4619      	mov	r1, r3
 80017e0:	4805      	ldr	r0, [pc, #20]	; (80017f8 <MX_ADC1_Init+0x98>)
 80017e2:	f004 fcab 	bl	800613c <HAL_ADC_ConfigChannel>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d001      	beq.n	80017f0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80017ec:	f002 f908 	bl	8003a00 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80017f0:	bf00      	nop
 80017f2:	3710      	adds	r7, #16
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	200004b8 	.word	0x200004b8
 80017fc:	40012000 	.word	0x40012000
 8001800:	0f000001 	.word	0x0f000001

08001804 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b084      	sub	sp, #16
 8001808:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800180a:	463b      	mov	r3, r7
 800180c:	2200      	movs	r2, #0
 800180e:	601a      	str	r2, [r3, #0]
 8001810:	605a      	str	r2, [r3, #4]
 8001812:	609a      	str	r2, [r3, #8]
 8001814:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8001816:	4b21      	ldr	r3, [pc, #132]	; (800189c <MX_ADC2_Init+0x98>)
 8001818:	4a21      	ldr	r2, [pc, #132]	; (80018a0 <MX_ADC2_Init+0x9c>)
 800181a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 800181c:	4b1f      	ldr	r3, [pc, #124]	; (800189c <MX_ADC2_Init+0x98>)
 800181e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001822:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001824:	4b1d      	ldr	r3, [pc, #116]	; (800189c <MX_ADC2_Init+0x98>)
 8001826:	2200      	movs	r2, #0
 8001828:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 800182a:	4b1c      	ldr	r3, [pc, #112]	; (800189c <MX_ADC2_Init+0x98>)
 800182c:	2200      	movs	r2, #0
 800182e:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001830:	4b1a      	ldr	r3, [pc, #104]	; (800189c <MX_ADC2_Init+0x98>)
 8001832:	2200      	movs	r2, #0
 8001834:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001836:	4b19      	ldr	r3, [pc, #100]	; (800189c <MX_ADC2_Init+0x98>)
 8001838:	2200      	movs	r2, #0
 800183a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800183e:	4b17      	ldr	r3, [pc, #92]	; (800189c <MX_ADC2_Init+0x98>)
 8001840:	2200      	movs	r2, #0
 8001842:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001844:	4b15      	ldr	r3, [pc, #84]	; (800189c <MX_ADC2_Init+0x98>)
 8001846:	4a17      	ldr	r2, [pc, #92]	; (80018a4 <MX_ADC2_Init+0xa0>)
 8001848:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800184a:	4b14      	ldr	r3, [pc, #80]	; (800189c <MX_ADC2_Init+0x98>)
 800184c:	2200      	movs	r2, #0
 800184e:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8001850:	4b12      	ldr	r3, [pc, #72]	; (800189c <MX_ADC2_Init+0x98>)
 8001852:	2201      	movs	r2, #1
 8001854:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001856:	4b11      	ldr	r3, [pc, #68]	; (800189c <MX_ADC2_Init+0x98>)
 8001858:	2200      	movs	r2, #0
 800185a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800185e:	4b0f      	ldr	r3, [pc, #60]	; (800189c <MX_ADC2_Init+0x98>)
 8001860:	2201      	movs	r2, #1
 8001862:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001864:	480d      	ldr	r0, [pc, #52]	; (800189c <MX_ADC2_Init+0x98>)
 8001866:	f004 fc25 	bl	80060b4 <HAL_ADC_Init>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d001      	beq.n	8001874 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8001870:	f002 f8c6 	bl	8003a00 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001874:	2304      	movs	r3, #4
 8001876:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001878:	2301      	movs	r3, #1
 800187a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800187c:	2300      	movs	r3, #0
 800187e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001880:	463b      	mov	r3, r7
 8001882:	4619      	mov	r1, r3
 8001884:	4805      	ldr	r0, [pc, #20]	; (800189c <MX_ADC2_Init+0x98>)
 8001886:	f004 fc59 	bl	800613c <HAL_ADC_ConfigChannel>
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	d001      	beq.n	8001894 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8001890:	f002 f8b6 	bl	8003a00 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001894:	bf00      	nop
 8001896:	3710      	adds	r7, #16
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}
 800189c:	20000500 	.word	0x20000500
 80018a0:	40012100 	.word	0x40012100
 80018a4:	0f000001 	.word	0x0f000001

080018a8 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b084      	sub	sp, #16
 80018ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80018ae:	463b      	mov	r3, r7
 80018b0:	2200      	movs	r2, #0
 80018b2:	601a      	str	r2, [r3, #0]
 80018b4:	605a      	str	r2, [r3, #4]
 80018b6:	609a      	str	r2, [r3, #8]
 80018b8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80018ba:	4b21      	ldr	r3, [pc, #132]	; (8001940 <MX_ADC3_Init+0x98>)
 80018bc:	4a21      	ldr	r2, [pc, #132]	; (8001944 <MX_ADC3_Init+0x9c>)
 80018be:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 80018c0:	4b1f      	ldr	r3, [pc, #124]	; (8001940 <MX_ADC3_Init+0x98>)
 80018c2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80018c6:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80018c8:	4b1d      	ldr	r3, [pc, #116]	; (8001940 <MX_ADC3_Init+0x98>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 80018ce:	4b1c      	ldr	r3, [pc, #112]	; (8001940 <MX_ADC3_Init+0x98>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80018d4:	4b1a      	ldr	r3, [pc, #104]	; (8001940 <MX_ADC3_Init+0x98>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80018da:	4b19      	ldr	r3, [pc, #100]	; (8001940 <MX_ADC3_Init+0x98>)
 80018dc:	2200      	movs	r2, #0
 80018de:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80018e2:	4b17      	ldr	r3, [pc, #92]	; (8001940 <MX_ADC3_Init+0x98>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80018e8:	4b15      	ldr	r3, [pc, #84]	; (8001940 <MX_ADC3_Init+0x98>)
 80018ea:	4a17      	ldr	r2, [pc, #92]	; (8001948 <MX_ADC3_Init+0xa0>)
 80018ec:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80018ee:	4b14      	ldr	r3, [pc, #80]	; (8001940 <MX_ADC3_Init+0x98>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 80018f4:	4b12      	ldr	r3, [pc, #72]	; (8001940 <MX_ADC3_Init+0x98>)
 80018f6:	2201      	movs	r2, #1
 80018f8:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80018fa:	4b11      	ldr	r3, [pc, #68]	; (8001940 <MX_ADC3_Init+0x98>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001902:	4b0f      	ldr	r3, [pc, #60]	; (8001940 <MX_ADC3_Init+0x98>)
 8001904:	2201      	movs	r2, #1
 8001906:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001908:	480d      	ldr	r0, [pc, #52]	; (8001940 <MX_ADC3_Init+0x98>)
 800190a:	f004 fbd3 	bl	80060b4 <HAL_ADC_Init>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	d001      	beq.n	8001918 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8001914:	f002 f874 	bl	8003a00 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8001918:	230d      	movs	r3, #13
 800191a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800191c:	2301      	movs	r3, #1
 800191e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001920:	2300      	movs	r3, #0
 8001922:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001924:	463b      	mov	r3, r7
 8001926:	4619      	mov	r1, r3
 8001928:	4805      	ldr	r0, [pc, #20]	; (8001940 <MX_ADC3_Init+0x98>)
 800192a:	f004 fc07 	bl	800613c <HAL_ADC_ConfigChannel>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	d001      	beq.n	8001938 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8001934:	f002 f864 	bl	8003a00 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001938:	bf00      	nop
 800193a:	3710      	adds	r7, #16
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}
 8001940:	20000548 	.word	0x20000548
 8001944:	40012200 	.word	0x40012200
 8001948:	0f000001 	.word	0x0f000001

0800194c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001950:	4b12      	ldr	r3, [pc, #72]	; (800199c <MX_I2C1_Init+0x50>)
 8001952:	4a13      	ldr	r2, [pc, #76]	; (80019a0 <MX_I2C1_Init+0x54>)
 8001954:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001956:	4b11      	ldr	r3, [pc, #68]	; (800199c <MX_I2C1_Init+0x50>)
 8001958:	4a12      	ldr	r2, [pc, #72]	; (80019a4 <MX_I2C1_Init+0x58>)
 800195a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800195c:	4b0f      	ldr	r3, [pc, #60]	; (800199c <MX_I2C1_Init+0x50>)
 800195e:	2200      	movs	r2, #0
 8001960:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001962:	4b0e      	ldr	r3, [pc, #56]	; (800199c <MX_I2C1_Init+0x50>)
 8001964:	2200      	movs	r2, #0
 8001966:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001968:	4b0c      	ldr	r3, [pc, #48]	; (800199c <MX_I2C1_Init+0x50>)
 800196a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800196e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001970:	4b0a      	ldr	r3, [pc, #40]	; (800199c <MX_I2C1_Init+0x50>)
 8001972:	2200      	movs	r2, #0
 8001974:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001976:	4b09      	ldr	r3, [pc, #36]	; (800199c <MX_I2C1_Init+0x50>)
 8001978:	2200      	movs	r2, #0
 800197a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800197c:	4b07      	ldr	r3, [pc, #28]	; (800199c <MX_I2C1_Init+0x50>)
 800197e:	2200      	movs	r2, #0
 8001980:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001982:	4b06      	ldr	r3, [pc, #24]	; (800199c <MX_I2C1_Init+0x50>)
 8001984:	2200      	movs	r2, #0
 8001986:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001988:	4804      	ldr	r0, [pc, #16]	; (800199c <MX_I2C1_Init+0x50>)
 800198a:	f005 fcf1 	bl	8007370 <HAL_I2C_Init>
 800198e:	4603      	mov	r3, r0
 8001990:	2b00      	cmp	r3, #0
 8001992:	d001      	beq.n	8001998 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001994:	f002 f834 	bl	8003a00 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001998:	bf00      	nop
 800199a:	bd80      	pop	{r7, pc}
 800199c:	20000590 	.word	0x20000590
 80019a0:	40005400 	.word	0x40005400
 80019a4:	00061a80 	.word	0x00061a80

080019a8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80019ac:	4b12      	ldr	r3, [pc, #72]	; (80019f8 <MX_I2C2_Init+0x50>)
 80019ae:	4a13      	ldr	r2, [pc, #76]	; (80019fc <MX_I2C2_Init+0x54>)
 80019b0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 80019b2:	4b11      	ldr	r3, [pc, #68]	; (80019f8 <MX_I2C2_Init+0x50>)
 80019b4:	4a12      	ldr	r2, [pc, #72]	; (8001a00 <MX_I2C2_Init+0x58>)
 80019b6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80019b8:	4b0f      	ldr	r3, [pc, #60]	; (80019f8 <MX_I2C2_Init+0x50>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80019be:	4b0e      	ldr	r3, [pc, #56]	; (80019f8 <MX_I2C2_Init+0x50>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80019c4:	4b0c      	ldr	r3, [pc, #48]	; (80019f8 <MX_I2C2_Init+0x50>)
 80019c6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80019ca:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80019cc:	4b0a      	ldr	r3, [pc, #40]	; (80019f8 <MX_I2C2_Init+0x50>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80019d2:	4b09      	ldr	r3, [pc, #36]	; (80019f8 <MX_I2C2_Init+0x50>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80019d8:	4b07      	ldr	r3, [pc, #28]	; (80019f8 <MX_I2C2_Init+0x50>)
 80019da:	2200      	movs	r2, #0
 80019dc:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80019de:	4b06      	ldr	r3, [pc, #24]	; (80019f8 <MX_I2C2_Init+0x50>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80019e4:	4804      	ldr	r0, [pc, #16]	; (80019f8 <MX_I2C2_Init+0x50>)
 80019e6:	f005 fcc3 	bl	8007370 <HAL_I2C_Init>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d001      	beq.n	80019f4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80019f0:	f002 f806 	bl	8003a00 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80019f4:	bf00      	nop
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	200005e4 	.word	0x200005e4
 80019fc:	40005800 	.word	0x40005800
 8001a00:	00061a80 	.word	0x00061a80

08001a04 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001a08:	4b12      	ldr	r3, [pc, #72]	; (8001a54 <MX_I2C3_Init+0x50>)
 8001a0a:	4a13      	ldr	r2, [pc, #76]	; (8001a58 <MX_I2C3_Init+0x54>)
 8001a0c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 8001a0e:	4b11      	ldr	r3, [pc, #68]	; (8001a54 <MX_I2C3_Init+0x50>)
 8001a10:	4a12      	ldr	r2, [pc, #72]	; (8001a5c <MX_I2C3_Init+0x58>)
 8001a12:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001a14:	4b0f      	ldr	r3, [pc, #60]	; (8001a54 <MX_I2C3_Init+0x50>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001a1a:	4b0e      	ldr	r3, [pc, #56]	; (8001a54 <MX_I2C3_Init+0x50>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a20:	4b0c      	ldr	r3, [pc, #48]	; (8001a54 <MX_I2C3_Init+0x50>)
 8001a22:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a26:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a28:	4b0a      	ldr	r3, [pc, #40]	; (8001a54 <MX_I2C3_Init+0x50>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001a2e:	4b09      	ldr	r3, [pc, #36]	; (8001a54 <MX_I2C3_Init+0x50>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a34:	4b07      	ldr	r3, [pc, #28]	; (8001a54 <MX_I2C3_Init+0x50>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a3a:	4b06      	ldr	r3, [pc, #24]	; (8001a54 <MX_I2C3_Init+0x50>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001a40:	4804      	ldr	r0, [pc, #16]	; (8001a54 <MX_I2C3_Init+0x50>)
 8001a42:	f005 fc95 	bl	8007370 <HAL_I2C_Init>
 8001a46:	4603      	mov	r3, r0
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d001      	beq.n	8001a50 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001a4c:	f001 ffd8 	bl	8003a00 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001a50:	bf00      	nop
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	20000638 	.word	0x20000638
 8001a58:	40005c00 	.word	0x40005c00
 8001a5c:	00061a80 	.word	0x00061a80

08001a60 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001a64:	4b17      	ldr	r3, [pc, #92]	; (8001ac4 <MX_SPI2_Init+0x64>)
 8001a66:	4a18      	ldr	r2, [pc, #96]	; (8001ac8 <MX_SPI2_Init+0x68>)
 8001a68:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001a6a:	4b16      	ldr	r3, [pc, #88]	; (8001ac4 <MX_SPI2_Init+0x64>)
 8001a6c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001a70:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001a72:	4b14      	ldr	r3, [pc, #80]	; (8001ac4 <MX_SPI2_Init+0x64>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a78:	4b12      	ldr	r3, [pc, #72]	; (8001ac4 <MX_SPI2_Init+0x64>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a7e:	4b11      	ldr	r3, [pc, #68]	; (8001ac4 <MX_SPI2_Init+0x64>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a84:	4b0f      	ldr	r3, [pc, #60]	; (8001ac4 <MX_SPI2_Init+0x64>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001a8a:	4b0e      	ldr	r3, [pc, #56]	; (8001ac4 <MX_SPI2_Init+0x64>)
 8001a8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a90:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001a92:	4b0c      	ldr	r3, [pc, #48]	; (8001ac4 <MX_SPI2_Init+0x64>)
 8001a94:	2220      	movs	r2, #32
 8001a96:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a98:	4b0a      	ldr	r3, [pc, #40]	; (8001ac4 <MX_SPI2_Init+0x64>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a9e:	4b09      	ldr	r3, [pc, #36]	; (8001ac4 <MX_SPI2_Init+0x64>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001aa4:	4b07      	ldr	r3, [pc, #28]	; (8001ac4 <MX_SPI2_Init+0x64>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001aaa:	4b06      	ldr	r3, [pc, #24]	; (8001ac4 <MX_SPI2_Init+0x64>)
 8001aac:	220a      	movs	r2, #10
 8001aae:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001ab0:	4804      	ldr	r0, [pc, #16]	; (8001ac4 <MX_SPI2_Init+0x64>)
 8001ab2:	f007 f9e3 	bl	8008e7c <HAL_SPI_Init>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d001      	beq.n	8001ac0 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001abc:	f001 ffa0 	bl	8003a00 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001ac0:	bf00      	nop
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	2000068c 	.word	0x2000068c
 8001ac8:	40003800 	.word	0x40003800

08001acc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b08a      	sub	sp, #40	; 0x28
 8001ad0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ad2:	f107 0318 	add.w	r3, r7, #24
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	601a      	str	r2, [r3, #0]
 8001ada:	605a      	str	r2, [r3, #4]
 8001adc:	609a      	str	r2, [r3, #8]
 8001ade:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ae0:	f107 0310 	add.w	r3, r7, #16
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	601a      	str	r2, [r3, #0]
 8001ae8:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001aea:	463b      	mov	r3, r7
 8001aec:	2200      	movs	r2, #0
 8001aee:	601a      	str	r2, [r3, #0]
 8001af0:	605a      	str	r2, [r3, #4]
 8001af2:	609a      	str	r2, [r3, #8]
 8001af4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001af6:	4b2c      	ldr	r3, [pc, #176]	; (8001ba8 <MX_TIM2_Init+0xdc>)
 8001af8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001afc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 8001afe:	4b2a      	ldr	r3, [pc, #168]	; (8001ba8 <MX_TIM2_Init+0xdc>)
 8001b00:	2253      	movs	r2, #83	; 0x53
 8001b02:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b04:	4b28      	ldr	r3, [pc, #160]	; (8001ba8 <MX_TIM2_Init+0xdc>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8001b0a:	4b27      	ldr	r3, [pc, #156]	; (8001ba8 <MX_TIM2_Init+0xdc>)
 8001b0c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001b10:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b12:	4b25      	ldr	r3, [pc, #148]	; (8001ba8 <MX_TIM2_Init+0xdc>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b18:	4b23      	ldr	r3, [pc, #140]	; (8001ba8 <MX_TIM2_Init+0xdc>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001b1e:	4822      	ldr	r0, [pc, #136]	; (8001ba8 <MX_TIM2_Init+0xdc>)
 8001b20:	f007 fdec 	bl	80096fc <HAL_TIM_Base_Init>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d001      	beq.n	8001b2e <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 8001b2a:	f001 ff69 	bl	8003a00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b32:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001b34:	f107 0318 	add.w	r3, r7, #24
 8001b38:	4619      	mov	r1, r3
 8001b3a:	481b      	ldr	r0, [pc, #108]	; (8001ba8 <MX_TIM2_Init+0xdc>)
 8001b3c:	f008 fae8 	bl	800a110 <HAL_TIM_ConfigClockSource>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d001      	beq.n	8001b4a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001b46:	f001 ff5b 	bl	8003a00 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001b4a:	4817      	ldr	r0, [pc, #92]	; (8001ba8 <MX_TIM2_Init+0xdc>)
 8001b4c:	f008 f820 	bl	8009b90 <HAL_TIM_IC_Init>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d001      	beq.n	8001b5a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001b56:	f001 ff53 	bl	8003a00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b62:	f107 0310 	add.w	r3, r7, #16
 8001b66:	4619      	mov	r1, r3
 8001b68:	480f      	ldr	r0, [pc, #60]	; (8001ba8 <MX_TIM2_Init+0xdc>)
 8001b6a:	f009 f909 	bl	800ad80 <HAL_TIMEx_MasterConfigSynchronization>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d001      	beq.n	8001b78 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8001b74:	f001 ff44 	bl	8003a00 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001b80:	2300      	movs	r3, #0
 8001b82:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001b84:	2300      	movs	r3, #0
 8001b86:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001b88:	463b      	mov	r3, r7
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	4806      	ldr	r0, [pc, #24]	; (8001ba8 <MX_TIM2_Init+0xdc>)
 8001b90:	f008 f95f 	bl	8009e52 <HAL_TIM_IC_ConfigChannel>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d001      	beq.n	8001b9e <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 8001b9a:	f001 ff31 	bl	8003a00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001b9e:	bf00      	nop
 8001ba0:	3728      	adds	r7, #40	; 0x28
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	200006e4 	.word	0x200006e4

08001bac <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b092      	sub	sp, #72	; 0x48
 8001bb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bb2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	601a      	str	r2, [r3, #0]
 8001bba:	605a      	str	r2, [r3, #4]
 8001bbc:	609a      	str	r2, [r3, #8]
 8001bbe:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001bc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	601a      	str	r2, [r3, #0]
 8001bc8:	605a      	str	r2, [r3, #4]
 8001bca:	609a      	str	r2, [r3, #8]
 8001bcc:	60da      	str	r2, [r3, #12]
 8001bce:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bd0:	f107 031c 	add.w	r3, r7, #28
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	601a      	str	r2, [r3, #0]
 8001bd8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001bda:	463b      	mov	r3, r7
 8001bdc:	2200      	movs	r2, #0
 8001bde:	601a      	str	r2, [r3, #0]
 8001be0:	605a      	str	r2, [r3, #4]
 8001be2:	609a      	str	r2, [r3, #8]
 8001be4:	60da      	str	r2, [r3, #12]
 8001be6:	611a      	str	r2, [r3, #16]
 8001be8:	615a      	str	r2, [r3, #20]
 8001bea:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001bec:	4b44      	ldr	r3, [pc, #272]	; (8001d00 <MX_TIM3_Init+0x154>)
 8001bee:	4a45      	ldr	r2, [pc, #276]	; (8001d04 <MX_TIM3_Init+0x158>)
 8001bf0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7-1;
 8001bf2:	4b43      	ldr	r3, [pc, #268]	; (8001d00 <MX_TIM3_Init+0x154>)
 8001bf4:	2206      	movs	r2, #6
 8001bf6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bf8:	4b41      	ldr	r3, [pc, #260]	; (8001d00 <MX_TIM3_Init+0x154>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8001bfe:	4b40      	ldr	r3, [pc, #256]	; (8001d00 <MX_TIM3_Init+0x154>)
 8001c00:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001c04:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c06:	4b3e      	ldr	r3, [pc, #248]	; (8001d00 <MX_TIM3_Init+0x154>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c0c:	4b3c      	ldr	r3, [pc, #240]	; (8001d00 <MX_TIM3_Init+0x154>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001c12:	483b      	ldr	r0, [pc, #236]	; (8001d00 <MX_TIM3_Init+0x154>)
 8001c14:	f007 fd72 	bl	80096fc <HAL_TIM_Base_Init>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d001      	beq.n	8001c22 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001c1e:	f001 feef 	bl	8003a00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c26:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001c28:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	4834      	ldr	r0, [pc, #208]	; (8001d00 <MX_TIM3_Init+0x154>)
 8001c30:	f008 fa6e 	bl	800a110 <HAL_TIM_ConfigClockSource>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d001      	beq.n	8001c3e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001c3a:	f001 fee1 	bl	8003a00 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001c3e:	4830      	ldr	r0, [pc, #192]	; (8001d00 <MX_TIM3_Init+0x154>)
 8001c40:	f007 fe84 	bl	800994c <HAL_TIM_PWM_Init>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d001      	beq.n	8001c4e <MX_TIM3_Init+0xa2>
  {
    Error_Handler();
 8001c4a:	f001 fed9 	bl	8003a00 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.InputTrigger = TIM_TS_ITR3;
 8001c52:	2330      	movs	r3, #48	; 0x30
 8001c54:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8001c56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	4828      	ldr	r0, [pc, #160]	; (8001d00 <MX_TIM3_Init+0x154>)
 8001c5e:	f008 fb1e 	bl	800a29e <HAL_TIM_SlaveConfigSynchro>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d001      	beq.n	8001c6c <MX_TIM3_Init+0xc0>
  {
    Error_Handler();
 8001c68:	f001 feca 	bl	8003a00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c70:	2300      	movs	r3, #0
 8001c72:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001c74:	f107 031c 	add.w	r3, r7, #28
 8001c78:	4619      	mov	r1, r3
 8001c7a:	4821      	ldr	r0, [pc, #132]	; (8001d00 <MX_TIM3_Init+0x154>)
 8001c7c:	f009 f880 	bl	800ad80 <HAL_TIMEx_MasterConfigSynchronization>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d001      	beq.n	8001c8a <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 8001c86:	f001 febb 	bl	8003a00 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c8a:	2360      	movs	r3, #96	; 0x60
 8001c8c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c92:	2300      	movs	r3, #0
 8001c94:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c96:	2300      	movs	r3, #0
 8001c98:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c9a:	463b      	mov	r3, r7
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	4817      	ldr	r0, [pc, #92]	; (8001d00 <MX_TIM3_Init+0x154>)
 8001ca2:	f008 f973 	bl	8009f8c <HAL_TIM_PWM_ConfigChannel>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d001      	beq.n	8001cb0 <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 8001cac:	f001 fea8 	bl	8003a00 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001cb0:	463b      	mov	r3, r7
 8001cb2:	2204      	movs	r2, #4
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	4812      	ldr	r0, [pc, #72]	; (8001d00 <MX_TIM3_Init+0x154>)
 8001cb8:	f008 f968 	bl	8009f8c <HAL_TIM_PWM_ConfigChannel>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d001      	beq.n	8001cc6 <MX_TIM3_Init+0x11a>
  {
    Error_Handler();
 8001cc2:	f001 fe9d 	bl	8003a00 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001cc6:	463b      	mov	r3, r7
 8001cc8:	2208      	movs	r2, #8
 8001cca:	4619      	mov	r1, r3
 8001ccc:	480c      	ldr	r0, [pc, #48]	; (8001d00 <MX_TIM3_Init+0x154>)
 8001cce:	f008 f95d 	bl	8009f8c <HAL_TIM_PWM_ConfigChannel>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d001      	beq.n	8001cdc <MX_TIM3_Init+0x130>
  {
    Error_Handler();
 8001cd8:	f001 fe92 	bl	8003a00 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001cdc:	463b      	mov	r3, r7
 8001cde:	220c      	movs	r2, #12
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	4807      	ldr	r0, [pc, #28]	; (8001d00 <MX_TIM3_Init+0x154>)
 8001ce4:	f008 f952 	bl	8009f8c <HAL_TIM_PWM_ConfigChannel>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d001      	beq.n	8001cf2 <MX_TIM3_Init+0x146>
  {
    Error_Handler();
 8001cee:	f001 fe87 	bl	8003a00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001cf2:	4803      	ldr	r0, [pc, #12]	; (8001d00 <MX_TIM3_Init+0x154>)
 8001cf4:	f002 f946 	bl	8003f84 <HAL_TIM_MspPostInit>

}
 8001cf8:	bf00      	nop
 8001cfa:	3748      	adds	r7, #72	; 0x48
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	2000072c 	.word	0x2000072c
 8001d04:	40000400 	.word	0x40000400

08001d08 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b08e      	sub	sp, #56	; 0x38
 8001d0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d0e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d12:	2200      	movs	r2, #0
 8001d14:	601a      	str	r2, [r3, #0]
 8001d16:	605a      	str	r2, [r3, #4]
 8001d18:	609a      	str	r2, [r3, #8]
 8001d1a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d1c:	f107 0320 	add.w	r3, r7, #32
 8001d20:	2200      	movs	r2, #0
 8001d22:	601a      	str	r2, [r3, #0]
 8001d24:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d26:	1d3b      	adds	r3, r7, #4
 8001d28:	2200      	movs	r2, #0
 8001d2a:	601a      	str	r2, [r3, #0]
 8001d2c:	605a      	str	r2, [r3, #4]
 8001d2e:	609a      	str	r2, [r3, #8]
 8001d30:	60da      	str	r2, [r3, #12]
 8001d32:	611a      	str	r2, [r3, #16]
 8001d34:	615a      	str	r2, [r3, #20]
 8001d36:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001d38:	4b2b      	ldr	r3, [pc, #172]	; (8001de8 <MX_TIM4_Init+0xe0>)
 8001d3a:	4a2c      	ldr	r2, [pc, #176]	; (8001dec <MX_TIM4_Init+0xe4>)
 8001d3c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001d3e:	4b2a      	ldr	r3, [pc, #168]	; (8001de8 <MX_TIM4_Init+0xe0>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d44:	4b28      	ldr	r3, [pc, #160]	; (8001de8 <MX_TIM4_Init+0xe0>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001d4a:	4b27      	ldr	r3, [pc, #156]	; (8001de8 <MX_TIM4_Init+0xe0>)
 8001d4c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d50:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d52:	4b25      	ldr	r3, [pc, #148]	; (8001de8 <MX_TIM4_Init+0xe0>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d58:	4b23      	ldr	r3, [pc, #140]	; (8001de8 <MX_TIM4_Init+0xe0>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001d5e:	4822      	ldr	r0, [pc, #136]	; (8001de8 <MX_TIM4_Init+0xe0>)
 8001d60:	f007 fccc 	bl	80096fc <HAL_TIM_Base_Init>
 8001d64:	4603      	mov	r3, r0
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d001      	beq.n	8001d6e <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8001d6a:	f001 fe49 	bl	8003a00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d72:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001d74:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d78:	4619      	mov	r1, r3
 8001d7a:	481b      	ldr	r0, [pc, #108]	; (8001de8 <MX_TIM4_Init+0xe0>)
 8001d7c:	f008 f9c8 	bl	800a110 <HAL_TIM_ConfigClockSource>
 8001d80:	4603      	mov	r3, r0
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d001      	beq.n	8001d8a <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8001d86:	f001 fe3b 	bl	8003a00 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001d8a:	4817      	ldr	r0, [pc, #92]	; (8001de8 <MX_TIM4_Init+0xe0>)
 8001d8c:	f007 fdde 	bl	800994c <HAL_TIM_PWM_Init>
 8001d90:	4603      	mov	r3, r0
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d001      	beq.n	8001d9a <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001d96:	f001 fe33 	bl	8003a00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001da2:	f107 0320 	add.w	r3, r7, #32
 8001da6:	4619      	mov	r1, r3
 8001da8:	480f      	ldr	r0, [pc, #60]	; (8001de8 <MX_TIM4_Init+0xe0>)
 8001daa:	f008 ffe9 	bl	800ad80 <HAL_TIMEx_MasterConfigSynchronization>
 8001dae:	4603      	mov	r3, r0
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d001      	beq.n	8001db8 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001db4:	f001 fe24 	bl	8003a00 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001db8:	2360      	movs	r3, #96	; 0x60
 8001dba:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001dc8:	1d3b      	adds	r3, r7, #4
 8001dca:	2200      	movs	r2, #0
 8001dcc:	4619      	mov	r1, r3
 8001dce:	4806      	ldr	r0, [pc, #24]	; (8001de8 <MX_TIM4_Init+0xe0>)
 8001dd0:	f008 f8dc 	bl	8009f8c <HAL_TIM_PWM_ConfigChannel>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d001      	beq.n	8001dde <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8001dda:	f001 fe11 	bl	8003a00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001dde:	bf00      	nop
 8001de0:	3738      	adds	r7, #56	; 0x38
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	20000774 	.word	0x20000774
 8001dec:	40000800 	.word	0x40000800

08001df0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b082      	sub	sp, #8
 8001df4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001df6:	463b      	mov	r3, r7
 8001df8:	2200      	movs	r2, #0
 8001dfa:	601a      	str	r2, [r3, #0]
 8001dfc:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001dfe:	4b15      	ldr	r3, [pc, #84]	; (8001e54 <MX_TIM6_Init+0x64>)
 8001e00:	4a15      	ldr	r2, [pc, #84]	; (8001e58 <MX_TIM6_Init+0x68>)
 8001e02:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 84-1;
 8001e04:	4b13      	ldr	r3, [pc, #76]	; (8001e54 <MX_TIM6_Init+0x64>)
 8001e06:	2253      	movs	r2, #83	; 0x53
 8001e08:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e0a:	4b12      	ldr	r3, [pc, #72]	; (8001e54 <MX_TIM6_Init+0x64>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65000;
 8001e10:	4b10      	ldr	r3, [pc, #64]	; (8001e54 <MX_TIM6_Init+0x64>)
 8001e12:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 8001e16:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e18:	4b0e      	ldr	r3, [pc, #56]	; (8001e54 <MX_TIM6_Init+0x64>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001e1e:	480d      	ldr	r0, [pc, #52]	; (8001e54 <MX_TIM6_Init+0x64>)
 8001e20:	f007 fc6c 	bl	80096fc <HAL_TIM_Base_Init>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d001      	beq.n	8001e2e <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8001e2a:	f001 fde9 	bl	8003a00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e32:	2300      	movs	r3, #0
 8001e34:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001e36:	463b      	mov	r3, r7
 8001e38:	4619      	mov	r1, r3
 8001e3a:	4806      	ldr	r0, [pc, #24]	; (8001e54 <MX_TIM6_Init+0x64>)
 8001e3c:	f008 ffa0 	bl	800ad80 <HAL_TIMEx_MasterConfigSynchronization>
 8001e40:	4603      	mov	r3, r0
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d001      	beq.n	8001e4a <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8001e46:	f001 fddb 	bl	8003a00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001e4a:	bf00      	nop
 8001e4c:	3708      	adds	r7, #8
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	200007bc 	.word	0x200007bc
 8001e58:	40001000 	.word	0x40001000

08001e5c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b082      	sub	sp, #8
 8001e60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e62:	463b      	mov	r3, r7
 8001e64:	2200      	movs	r2, #0
 8001e66:	601a      	str	r2, [r3, #0]
 8001e68:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001e6a:	4b15      	ldr	r3, [pc, #84]	; (8001ec0 <MX_TIM7_Init+0x64>)
 8001e6c:	4a15      	ldr	r2, [pc, #84]	; (8001ec4 <MX_TIM7_Init+0x68>)
 8001e6e:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 84-1;
 8001e70:	4b13      	ldr	r3, [pc, #76]	; (8001ec0 <MX_TIM7_Init+0x64>)
 8001e72:	2253      	movs	r2, #83	; 0x53
 8001e74:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e76:	4b12      	ldr	r3, [pc, #72]	; (8001ec0 <MX_TIM7_Init+0x64>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 60000-1;
 8001e7c:	4b10      	ldr	r3, [pc, #64]	; (8001ec0 <MX_TIM7_Init+0x64>)
 8001e7e:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8001e82:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e84:	4b0e      	ldr	r3, [pc, #56]	; (8001ec0 <MX_TIM7_Init+0x64>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001e8a:	480d      	ldr	r0, [pc, #52]	; (8001ec0 <MX_TIM7_Init+0x64>)
 8001e8c:	f007 fc36 	bl	80096fc <HAL_TIM_Base_Init>
 8001e90:	4603      	mov	r3, r0
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d001      	beq.n	8001e9a <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8001e96:	f001 fdb3 	bl	8003a00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001ea2:	463b      	mov	r3, r7
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	4806      	ldr	r0, [pc, #24]	; (8001ec0 <MX_TIM7_Init+0x64>)
 8001ea8:	f008 ff6a 	bl	800ad80 <HAL_TIMEx_MasterConfigSynchronization>
 8001eac:	4603      	mov	r3, r0
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d001      	beq.n	8001eb6 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8001eb2:	f001 fda5 	bl	8003a00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001eb6:	bf00      	nop
 8001eb8:	3708      	adds	r7, #8
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	20000804 	.word	0x20000804
 8001ec4:	40001400 	.word	0x40001400

08001ec8 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001ecc:	4b0e      	ldr	r3, [pc, #56]	; (8001f08 <MX_TIM10_Init+0x40>)
 8001ece:	4a0f      	ldr	r2, [pc, #60]	; (8001f0c <MX_TIM10_Init+0x44>)
 8001ed0:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 168-1;
 8001ed2:	4b0d      	ldr	r3, [pc, #52]	; (8001f08 <MX_TIM10_Init+0x40>)
 8001ed4:	22a7      	movs	r2, #167	; 0xa7
 8001ed6:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ed8:	4b0b      	ldr	r3, [pc, #44]	; (8001f08 <MX_TIM10_Init+0x40>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 8001ede:	4b0a      	ldr	r3, [pc, #40]	; (8001f08 <MX_TIM10_Init+0x40>)
 8001ee0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ee4:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ee6:	4b08      	ldr	r3, [pc, #32]	; (8001f08 <MX_TIM10_Init+0x40>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001eec:	4b06      	ldr	r3, [pc, #24]	; (8001f08 <MX_TIM10_Init+0x40>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001ef2:	4805      	ldr	r0, [pc, #20]	; (8001f08 <MX_TIM10_Init+0x40>)
 8001ef4:	f007 fc02 	bl	80096fc <HAL_TIM_Base_Init>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d001      	beq.n	8001f02 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8001efe:	f001 fd7f 	bl	8003a00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8001f02:	bf00      	nop
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	2000084c 	.word	0x2000084c
 8001f0c:	40014400 	.word	0x40014400

08001f10 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001f14:	4b10      	ldr	r3, [pc, #64]	; (8001f58 <MX_USART1_UART_Init+0x48>)
 8001f16:	4a11      	ldr	r2, [pc, #68]	; (8001f5c <MX_USART1_UART_Init+0x4c>)
 8001f18:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 420000;
 8001f1a:	4b0f      	ldr	r3, [pc, #60]	; (8001f58 <MX_USART1_UART_Init+0x48>)
 8001f1c:	4a10      	ldr	r2, [pc, #64]	; (8001f60 <MX_USART1_UART_Init+0x50>)
 8001f1e:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001f20:	4b0d      	ldr	r3, [pc, #52]	; (8001f58 <MX_USART1_UART_Init+0x48>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001f26:	4b0c      	ldr	r3, [pc, #48]	; (8001f58 <MX_USART1_UART_Init+0x48>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001f2c:	4b0a      	ldr	r3, [pc, #40]	; (8001f58 <MX_USART1_UART_Init+0x48>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001f32:	4b09      	ldr	r3, [pc, #36]	; (8001f58 <MX_USART1_UART_Init+0x48>)
 8001f34:	220c      	movs	r2, #12
 8001f36:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f38:	4b07      	ldr	r3, [pc, #28]	; (8001f58 <MX_USART1_UART_Init+0x48>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f3e:	4b06      	ldr	r3, [pc, #24]	; (8001f58 <MX_USART1_UART_Init+0x48>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001f44:	4804      	ldr	r0, [pc, #16]	; (8001f58 <MX_USART1_UART_Init+0x48>)
 8001f46:	f008 ffab 	bl	800aea0 <HAL_UART_Init>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d001      	beq.n	8001f54 <MX_USART1_UART_Init+0x44>
  {
    Error_Handler();
 8001f50:	f001 fd56 	bl	8003a00 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001f54:	bf00      	nop
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	20000894 	.word	0x20000894
 8001f5c:	40011000 	.word	0x40011000
 8001f60:	000668a0 	.word	0x000668a0

08001f64 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001f68:	4b11      	ldr	r3, [pc, #68]	; (8001fb0 <MX_USART2_UART_Init+0x4c>)
 8001f6a:	4a12      	ldr	r2, [pc, #72]	; (8001fb4 <MX_USART2_UART_Init+0x50>)
 8001f6c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001f6e:	4b10      	ldr	r3, [pc, #64]	; (8001fb0 <MX_USART2_UART_Init+0x4c>)
 8001f70:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f74:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001f76:	4b0e      	ldr	r3, [pc, #56]	; (8001fb0 <MX_USART2_UART_Init+0x4c>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001f7c:	4b0c      	ldr	r3, [pc, #48]	; (8001fb0 <MX_USART2_UART_Init+0x4c>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001f82:	4b0b      	ldr	r3, [pc, #44]	; (8001fb0 <MX_USART2_UART_Init+0x4c>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001f88:	4b09      	ldr	r3, [pc, #36]	; (8001fb0 <MX_USART2_UART_Init+0x4c>)
 8001f8a:	220c      	movs	r2, #12
 8001f8c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f8e:	4b08      	ldr	r3, [pc, #32]	; (8001fb0 <MX_USART2_UART_Init+0x4c>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f94:	4b06      	ldr	r3, [pc, #24]	; (8001fb0 <MX_USART2_UART_Init+0x4c>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001f9a:	4805      	ldr	r0, [pc, #20]	; (8001fb0 <MX_USART2_UART_Init+0x4c>)
 8001f9c:	f008 ff80 	bl	800aea0 <HAL_UART_Init>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d001      	beq.n	8001faa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001fa6:	f001 fd2b 	bl	8003a00 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001faa:	bf00      	nop
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	200008d8 	.word	0x200008d8
 8001fb4:	40004400 	.word	0x40004400

08001fb8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001fbc:	4b11      	ldr	r3, [pc, #68]	; (8002004 <MX_USART3_UART_Init+0x4c>)
 8001fbe:	4a12      	ldr	r2, [pc, #72]	; (8002008 <MX_USART3_UART_Init+0x50>)
 8001fc0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001fc2:	4b10      	ldr	r3, [pc, #64]	; (8002004 <MX_USART3_UART_Init+0x4c>)
 8001fc4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001fc8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001fca:	4b0e      	ldr	r3, [pc, #56]	; (8002004 <MX_USART3_UART_Init+0x4c>)
 8001fcc:	2200      	movs	r2, #0
 8001fce:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001fd0:	4b0c      	ldr	r3, [pc, #48]	; (8002004 <MX_USART3_UART_Init+0x4c>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001fd6:	4b0b      	ldr	r3, [pc, #44]	; (8002004 <MX_USART3_UART_Init+0x4c>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001fdc:	4b09      	ldr	r3, [pc, #36]	; (8002004 <MX_USART3_UART_Init+0x4c>)
 8001fde:	220c      	movs	r2, #12
 8001fe0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fe2:	4b08      	ldr	r3, [pc, #32]	; (8002004 <MX_USART3_UART_Init+0x4c>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fe8:	4b06      	ldr	r3, [pc, #24]	; (8002004 <MX_USART3_UART_Init+0x4c>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001fee:	4805      	ldr	r0, [pc, #20]	; (8002004 <MX_USART3_UART_Init+0x4c>)
 8001ff0:	f008 ff56 	bl	800aea0 <HAL_UART_Init>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d001      	beq.n	8001ffe <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001ffa:	f001 fd01 	bl	8003a00 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001ffe:	bf00      	nop
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	2000091c 	.word	0x2000091c
 8002008:	40004800 	.word	0x40004800

0800200c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002010:	4b11      	ldr	r3, [pc, #68]	; (8002058 <MX_USART6_UART_Init+0x4c>)
 8002012:	4a12      	ldr	r2, [pc, #72]	; (800205c <MX_USART6_UART_Init+0x50>)
 8002014:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8002016:	4b10      	ldr	r3, [pc, #64]	; (8002058 <MX_USART6_UART_Init+0x4c>)
 8002018:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800201c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800201e:	4b0e      	ldr	r3, [pc, #56]	; (8002058 <MX_USART6_UART_Init+0x4c>)
 8002020:	2200      	movs	r2, #0
 8002022:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002024:	4b0c      	ldr	r3, [pc, #48]	; (8002058 <MX_USART6_UART_Init+0x4c>)
 8002026:	2200      	movs	r2, #0
 8002028:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800202a:	4b0b      	ldr	r3, [pc, #44]	; (8002058 <MX_USART6_UART_Init+0x4c>)
 800202c:	2200      	movs	r2, #0
 800202e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002030:	4b09      	ldr	r3, [pc, #36]	; (8002058 <MX_USART6_UART_Init+0x4c>)
 8002032:	220c      	movs	r2, #12
 8002034:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002036:	4b08      	ldr	r3, [pc, #32]	; (8002058 <MX_USART6_UART_Init+0x4c>)
 8002038:	2200      	movs	r2, #0
 800203a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800203c:	4b06      	ldr	r3, [pc, #24]	; (8002058 <MX_USART6_UART_Init+0x4c>)
 800203e:	2200      	movs	r2, #0
 8002040:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002042:	4805      	ldr	r0, [pc, #20]	; (8002058 <MX_USART6_UART_Init+0x4c>)
 8002044:	f008 ff2c 	bl	800aea0 <HAL_UART_Init>
 8002048:	4603      	mov	r3, r0
 800204a:	2b00      	cmp	r3, #0
 800204c:	d001      	beq.n	8002052 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800204e:	f001 fcd7 	bl	8003a00 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002052:	bf00      	nop
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	20000960 	.word	0x20000960
 800205c:	40011400 	.word	0x40011400

08002060 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b082      	sub	sp, #8
 8002064:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002066:	2300      	movs	r3, #0
 8002068:	607b      	str	r3, [r7, #4]
 800206a:	4b0c      	ldr	r3, [pc, #48]	; (800209c <MX_DMA_Init+0x3c>)
 800206c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800206e:	4a0b      	ldr	r2, [pc, #44]	; (800209c <MX_DMA_Init+0x3c>)
 8002070:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002074:	6313      	str	r3, [r2, #48]	; 0x30
 8002076:	4b09      	ldr	r3, [pc, #36]	; (800209c <MX_DMA_Init+0x3c>)
 8002078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800207a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800207e:	607b      	str	r3, [r7, #4]
 8002080:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8002082:	2200      	movs	r2, #0
 8002084:	2105      	movs	r1, #5
 8002086:	203a      	movs	r0, #58	; 0x3a
 8002088:	f004 fb51 	bl	800672e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800208c:	203a      	movs	r0, #58	; 0x3a
 800208e:	f004 fb6a 	bl	8006766 <HAL_NVIC_EnableIRQ>

}
 8002092:	bf00      	nop
 8002094:	3708      	adds	r7, #8
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	40023800 	.word	0x40023800

080020a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b08a      	sub	sp, #40	; 0x28
 80020a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020a6:	f107 0314 	add.w	r3, r7, #20
 80020aa:	2200      	movs	r2, #0
 80020ac:	601a      	str	r2, [r3, #0]
 80020ae:	605a      	str	r2, [r3, #4]
 80020b0:	609a      	str	r2, [r3, #8]
 80020b2:	60da      	str	r2, [r3, #12]
 80020b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80020b6:	2300      	movs	r3, #0
 80020b8:	613b      	str	r3, [r7, #16]
 80020ba:	4b6d      	ldr	r3, [pc, #436]	; (8002270 <MX_GPIO_Init+0x1d0>)
 80020bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020be:	4a6c      	ldr	r2, [pc, #432]	; (8002270 <MX_GPIO_Init+0x1d0>)
 80020c0:	f043 0304 	orr.w	r3, r3, #4
 80020c4:	6313      	str	r3, [r2, #48]	; 0x30
 80020c6:	4b6a      	ldr	r3, [pc, #424]	; (8002270 <MX_GPIO_Init+0x1d0>)
 80020c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ca:	f003 0304 	and.w	r3, r3, #4
 80020ce:	613b      	str	r3, [r7, #16]
 80020d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80020d2:	2300      	movs	r3, #0
 80020d4:	60fb      	str	r3, [r7, #12]
 80020d6:	4b66      	ldr	r3, [pc, #408]	; (8002270 <MX_GPIO_Init+0x1d0>)
 80020d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020da:	4a65      	ldr	r2, [pc, #404]	; (8002270 <MX_GPIO_Init+0x1d0>)
 80020dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020e0:	6313      	str	r3, [r2, #48]	; 0x30
 80020e2:	4b63      	ldr	r3, [pc, #396]	; (8002270 <MX_GPIO_Init+0x1d0>)
 80020e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020ea:	60fb      	str	r3, [r7, #12]
 80020ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020ee:	2300      	movs	r3, #0
 80020f0:	60bb      	str	r3, [r7, #8]
 80020f2:	4b5f      	ldr	r3, [pc, #380]	; (8002270 <MX_GPIO_Init+0x1d0>)
 80020f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f6:	4a5e      	ldr	r2, [pc, #376]	; (8002270 <MX_GPIO_Init+0x1d0>)
 80020f8:	f043 0301 	orr.w	r3, r3, #1
 80020fc:	6313      	str	r3, [r2, #48]	; 0x30
 80020fe:	4b5c      	ldr	r3, [pc, #368]	; (8002270 <MX_GPIO_Init+0x1d0>)
 8002100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002102:	f003 0301 	and.w	r3, r3, #1
 8002106:	60bb      	str	r3, [r7, #8]
 8002108:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800210a:	2300      	movs	r3, #0
 800210c:	607b      	str	r3, [r7, #4]
 800210e:	4b58      	ldr	r3, [pc, #352]	; (8002270 <MX_GPIO_Init+0x1d0>)
 8002110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002112:	4a57      	ldr	r2, [pc, #348]	; (8002270 <MX_GPIO_Init+0x1d0>)
 8002114:	f043 0302 	orr.w	r3, r3, #2
 8002118:	6313      	str	r3, [r2, #48]	; 0x30
 800211a:	4b55      	ldr	r3, [pc, #340]	; (8002270 <MX_GPIO_Init+0x1d0>)
 800211c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211e:	f003 0302 	and.w	r3, r3, #2
 8002122:	607b      	str	r3, [r7, #4]
 8002124:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002126:	2300      	movs	r3, #0
 8002128:	603b      	str	r3, [r7, #0]
 800212a:	4b51      	ldr	r3, [pc, #324]	; (8002270 <MX_GPIO_Init+0x1d0>)
 800212c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212e:	4a50      	ldr	r2, [pc, #320]	; (8002270 <MX_GPIO_Init+0x1d0>)
 8002130:	f043 0308 	orr.w	r3, r3, #8
 8002134:	6313      	str	r3, [r2, #48]	; 0x30
 8002136:	4b4e      	ldr	r3, [pc, #312]	; (8002270 <MX_GPIO_Init+0x1d0>)
 8002138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213a:	f003 0308 	and.w	r3, r3, #8
 800213e:	603b      	str	r3, [r7, #0]
 8002140:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TRIG_Pin|GNSS_RST_Pin, GPIO_PIN_RESET);
 8002142:	2200      	movs	r2, #0
 8002144:	f248 0102 	movw	r1, #32770	; 0x8002
 8002148:	484a      	ldr	r0, [pc, #296]	; (8002274 <MX_GPIO_Init+0x1d4>)
 800214a:	f005 f8c5 	bl	80072d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CS_GYRO_Pin|GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 800214e:	2200      	movs	r2, #0
 8002150:	f241 0118 	movw	r1, #4120	; 0x1018
 8002154:	4848      	ldr	r0, [pc, #288]	; (8002278 <MX_GPIO_Init+0x1d8>)
 8002156:	f005 f8bf 	bl	80072d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_ACC_GPIO_Port, CS_ACC_Pin, GPIO_PIN_RESET);
 800215a:	2200      	movs	r2, #0
 800215c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002160:	4846      	ldr	r0, [pc, #280]	; (800227c <MX_GPIO_Init+0x1dc>)
 8002162:	f005 f8b9 	bl	80072d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8002166:	2200      	movs	r2, #0
 8002168:	2104      	movs	r1, #4
 800216a:	4845      	ldr	r0, [pc, #276]	; (8002280 <MX_GPIO_Init+0x1e0>)
 800216c:	f005 f8b4 	bl	80072d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : IT_MAGN_Pin BUTTON_Pin */
  GPIO_InitStruct.Pin = IT_MAGN_Pin|BUTTON_Pin;
 8002170:	f242 0301 	movw	r3, #8193	; 0x2001
 8002174:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002176:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800217a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800217c:	2300      	movs	r3, #0
 800217e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002180:	f107 0314 	add.w	r3, r7, #20
 8002184:	4619      	mov	r1, r3
 8002186:	483d      	ldr	r0, [pc, #244]	; (800227c <MX_GPIO_Init+0x1dc>)
 8002188:	f004 ff0a 	bl	8006fa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : TRIG_Pin GNSS_RST_Pin */
  GPIO_InitStruct.Pin = TRIG_Pin|GNSS_RST_Pin;
 800218c:	f248 0302 	movw	r3, #32770	; 0x8002
 8002190:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002192:	2301      	movs	r3, #1
 8002194:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002196:	2300      	movs	r3, #0
 8002198:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800219a:	2300      	movs	r3, #0
 800219c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800219e:	f107 0314 	add.w	r3, r7, #20
 80021a2:	4619      	mov	r1, r3
 80021a4:	4833      	ldr	r0, [pc, #204]	; (8002274 <MX_GPIO_Init+0x1d4>)
 80021a6:	f004 fefb 	bl	8006fa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : IT_PRESS_Pin */
  GPIO_InitStruct.Pin = IT_PRESS_Pin;
 80021aa:	2304      	movs	r3, #4
 80021ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80021ae:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80021b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b4:	2300      	movs	r3, #0
 80021b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IT_PRESS_GPIO_Port, &GPIO_InitStruct);
 80021b8:	f107 0314 	add.w	r3, r7, #20
 80021bc:	4619      	mov	r1, r3
 80021be:	482e      	ldr	r0, [pc, #184]	; (8002278 <MX_GPIO_Init+0x1d8>)
 80021c0:	f004 feee 	bl	8006fa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_GYRO_Pin PB3 PB4 */
  GPIO_InitStruct.Pin = CS_GYRO_Pin|GPIO_PIN_3|GPIO_PIN_4;
 80021c4:	f241 0318 	movw	r3, #4120	; 0x1018
 80021c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021ca:	2301      	movs	r3, #1
 80021cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ce:	2300      	movs	r3, #0
 80021d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021d2:	2300      	movs	r3, #0
 80021d4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021d6:	f107 0314 	add.w	r3, r7, #20
 80021da:	4619      	mov	r1, r3
 80021dc:	4826      	ldr	r0, [pc, #152]	; (8002278 <MX_GPIO_Init+0x1d8>)
 80021de:	f004 fedf 	bl	8006fa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_ACC_Pin */
  GPIO_InitStruct.Pin = CS_ACC_Pin;
 80021e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021e8:	2301      	movs	r3, #1
 80021ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ec:	2300      	movs	r3, #0
 80021ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021f0:	2300      	movs	r3, #0
 80021f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CS_ACC_GPIO_Port, &GPIO_InitStruct);
 80021f4:	f107 0314 	add.w	r3, r7, #20
 80021f8:	4619      	mov	r1, r3
 80021fa:	4820      	ldr	r0, [pc, #128]	; (800227c <MX_GPIO_Init+0x1dc>)
 80021fc:	f004 fed0 	bl	8006fa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : IT_GYRO_Pin IT_ACC_Pin */
  GPIO_InitStruct.Pin = IT_GYRO_Pin|IT_ACC_Pin;
 8002200:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002204:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002206:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800220a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800220c:	2300      	movs	r3, #0
 800220e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002210:	f107 0314 	add.w	r3, r7, #20
 8002214:	4619      	mov	r1, r3
 8002216:	4817      	ldr	r0, [pc, #92]	; (8002274 <MX_GPIO_Init+0x1d4>)
 8002218:	f004 fec2 	bl	8006fa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800221c:	2304      	movs	r3, #4
 800221e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002220:	2301      	movs	r3, #1
 8002222:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002224:	2300      	movs	r3, #0
 8002226:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002228:	2300      	movs	r3, #0
 800222a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800222c:	f107 0314 	add.w	r3, r7, #20
 8002230:	4619      	mov	r1, r3
 8002232:	4813      	ldr	r0, [pc, #76]	; (8002280 <MX_GPIO_Init+0x1e0>)
 8002234:	f004 feb4 	bl	8006fa0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8002238:	2200      	movs	r2, #0
 800223a:	2105      	movs	r1, #5
 800223c:	2006      	movs	r0, #6
 800223e:	f004 fa76 	bl	800672e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002242:	2006      	movs	r0, #6
 8002244:	f004 fa8f 	bl	8006766 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8002248:	2200      	movs	r2, #0
 800224a:	2105      	movs	r1, #5
 800224c:	2008      	movs	r0, #8
 800224e:	f004 fa6e 	bl	800672e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8002252:	2008      	movs	r0, #8
 8002254:	f004 fa87 	bl	8006766 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8002258:	2200      	movs	r2, #0
 800225a:	2105      	movs	r1, #5
 800225c:	2028      	movs	r0, #40	; 0x28
 800225e:	f004 fa66 	bl	800672e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002262:	2028      	movs	r0, #40	; 0x28
 8002264:	f004 fa7f 	bl	8006766 <HAL_NVIC_EnableIRQ>

}
 8002268:	bf00      	nop
 800226a:	3728      	adds	r7, #40	; 0x28
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}
 8002270:	40023800 	.word	0x40023800
 8002274:	40020000 	.word	0x40020000
 8002278:	40020400 	.word	0x40020400
 800227c:	40020800 	.word	0x40020800
 8002280:	40020c00 	.word	0x40020c00

08002284 <set_config>:

/* USER CODE BEGIN 4 */
static int8_t set_config(struct bmm150_dev *dev) {
 8002284:	b580      	push	{r7, lr}
 8002286:	b088      	sub	sp, #32
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    struct bmm150_settings settings;

    /* Set powermode as normal mode */
    settings.pwr_mode = BMM150_POWERMODE_NORMAL;
 800228c:	2300      	movs	r3, #0
 800228e:	737b      	strb	r3, [r7, #13]
    rslt = bmm150_set_op_mode(&settings, dev);
 8002290:	f107 030c 	add.w	r3, r7, #12
 8002294:	6879      	ldr	r1, [r7, #4]
 8002296:	4618      	mov	r0, r3
 8002298:	f00b fc04 	bl	800daa4 <bmm150_set_op_mode>
 800229c:	4603      	mov	r3, r0
 800229e:	77fb      	strb	r3, [r7, #31]
    bmm150_error_codes_print_result("bmm150_set_op_mode", rslt);
 80022a0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80022a4:	4619      	mov	r1, r3
 80022a6:	481d      	ldr	r0, [pc, #116]	; (800231c <set_config+0x98>)
 80022a8:	f00c fc2c 	bl	800eb04 <bmm150_error_codes_print_result>

    if (rslt == BMM150_OK) {
 80022ac:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d12d      	bne.n	8002310 <set_config+0x8c>
        /* Setting the preset mode as Low power mode
         * i.e. data rate = 10Hz, XY-rep = 1, Z-rep = 2
         */
        settings.preset_mode = BMM150_PRESETMODE_FORCED200;//BMM150_PRESETMODE_HIGHACCURACY;                  // TODO Change it to the desired preset
 80022b4:	2305      	movs	r3, #5
 80022b6:	747b      	strb	r3, [r7, #17]
        rslt = bmm150_set_presetmode(&settings, dev);
 80022b8:	f107 030c 	add.w	r3, r7, #12
 80022bc:	6879      	ldr	r1, [r7, #4]
 80022be:	4618      	mov	r0, r3
 80022c0:	f00b fc5c 	bl	800db7c <bmm150_set_presetmode>
 80022c4:	4603      	mov	r3, r0
 80022c6:	77fb      	strb	r3, [r7, #31]
        settings.data_rate = BMM150_DATA_RATE_30HZ;                             // TODO Change it to the desired ODR
 80022c8:	2307      	movs	r3, #7
 80022ca:	73bb      	strb	r3, [r7, #14]
        bmm150_set_sensor_settings(BMM150_SEL_DATA_RATE, &settings, dev);
 80022cc:	f107 030c 	add.w	r3, r7, #12
 80022d0:	687a      	ldr	r2, [r7, #4]
 80022d2:	4619      	mov	r1, r3
 80022d4:	2001      	movs	r0, #1
 80022d6:	f00b fccd 	bl	800dc74 <bmm150_set_sensor_settings>
        bmm150_error_codes_print_result("bmm150_set_presetmode", rslt);
 80022da:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80022de:	4619      	mov	r1, r3
 80022e0:	480f      	ldr	r0, [pc, #60]	; (8002320 <set_config+0x9c>)
 80022e2:	f00c fc0f 	bl	800eb04 <bmm150_error_codes_print_result>

        if (rslt == BMM150_OK) {
 80022e6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d110      	bne.n	8002310 <set_config+0x8c>
            /* Map the data interrupt pin */
            settings.int_settings.drdy_pin_en = 0x01;
 80022ee:	2301      	movs	r3, #1
 80022f0:	74bb      	strb	r3, [r7, #18]
            rslt = bmm150_set_sensor_settings(BMM150_SEL_DRDY_PIN_EN, &settings, dev);
 80022f2:	f107 030c 	add.w	r3, r7, #12
 80022f6:	687a      	ldr	r2, [r7, #4]
 80022f8:	4619      	mov	r1, r3
 80022fa:	2010      	movs	r0, #16
 80022fc:	f00b fcba 	bl	800dc74 <bmm150_set_sensor_settings>
 8002300:	4603      	mov	r3, r0
 8002302:	77fb      	strb	r3, [r7, #31]
            bmm150_error_codes_print_result("bmm150_set_sensor_settings", rslt);
 8002304:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002308:	4619      	mov	r1, r3
 800230a:	4806      	ldr	r0, [pc, #24]	; (8002324 <set_config+0xa0>)
 800230c:	f00c fbfa 	bl	800eb04 <bmm150_error_codes_print_result>
        }
    }

    return rslt;
 8002310:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8002314:	4618      	mov	r0, r3
 8002316:	3720      	adds	r7, #32
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}
 800231c:	08015f48 	.word	0x08015f48
 8002320:	08015f5c 	.word	0x08015f5c
 8002324:	08015f74 	.word	0x08015f74

08002328 <HAL_GPIO_EXTI_Callback>:

    return reversed;
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002328:	b480      	push	{r7}
 800232a:	b083      	sub	sp, #12
 800232c:	af00      	add	r7, sp, #0
 800232e:	4603      	mov	r3, r0
 8002330:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == BUTTON_Pin) {
 8002332:	88fb      	ldrh	r3, [r7, #6]
 8002334:	2b01      	cmp	r3, #1
 8002336:	d11c      	bne.n	8002372 <HAL_GPIO_EXTI_Callback+0x4a>
		if(state == 4){state = 5;}
 8002338:	4b1a      	ldr	r3, [pc, #104]	; (80023a4 <HAL_GPIO_EXTI_Callback+0x7c>)
 800233a:	781b      	ldrb	r3, [r3, #0]
 800233c:	2b04      	cmp	r3, #4
 800233e:	d102      	bne.n	8002346 <HAL_GPIO_EXTI_Callback+0x1e>
 8002340:	4b18      	ldr	r3, [pc, #96]	; (80023a4 <HAL_GPIO_EXTI_Callback+0x7c>)
 8002342:	2205      	movs	r2, #5
 8002344:	701a      	strb	r2, [r3, #0]
		if(state == 3){state = 4;}
 8002346:	4b17      	ldr	r3, [pc, #92]	; (80023a4 <HAL_GPIO_EXTI_Callback+0x7c>)
 8002348:	781b      	ldrb	r3, [r3, #0]
 800234a:	2b03      	cmp	r3, #3
 800234c:	d102      	bne.n	8002354 <HAL_GPIO_EXTI_Callback+0x2c>
 800234e:	4b15      	ldr	r3, [pc, #84]	; (80023a4 <HAL_GPIO_EXTI_Callback+0x7c>)
 8002350:	2204      	movs	r2, #4
 8002352:	701a      	strb	r2, [r3, #0]
		if(state == 2){state = 3;}
 8002354:	4b13      	ldr	r3, [pc, #76]	; (80023a4 <HAL_GPIO_EXTI_Callback+0x7c>)
 8002356:	781b      	ldrb	r3, [r3, #0]
 8002358:	2b02      	cmp	r3, #2
 800235a:	d102      	bne.n	8002362 <HAL_GPIO_EXTI_Callback+0x3a>
 800235c:	4b11      	ldr	r3, [pc, #68]	; (80023a4 <HAL_GPIO_EXTI_Callback+0x7c>)
 800235e:	2203      	movs	r2, #3
 8002360:	701a      	strb	r2, [r3, #0]
		if(state == 1){state = 2;}
 8002362:	4b10      	ldr	r3, [pc, #64]	; (80023a4 <HAL_GPIO_EXTI_Callback+0x7c>)
 8002364:	781b      	ldrb	r3, [r3, #0]
 8002366:	2b01      	cmp	r3, #1
 8002368:	d104      	bne.n	8002374 <HAL_GPIO_EXTI_Callback+0x4c>
 800236a:	4b0e      	ldr	r3, [pc, #56]	; (80023a4 <HAL_GPIO_EXTI_Callback+0x7c>)
 800236c:	2202      	movs	r2, #2
 800236e:	701a      	strb	r2, [r3, #0]
 8002370:	e000      	b.n	8002374 <HAL_GPIO_EXTI_Callback+0x4c>
	  } else {
	      __NOP();
 8002372:	bf00      	nop
	  }

	if(GPIO_Pin == IT_ACC_Pin) {
 8002374:	88fb      	ldrh	r3, [r7, #6]
 8002376:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800237a:	d103      	bne.n	8002384 <HAL_GPIO_EXTI_Callback+0x5c>

	 readstart = 1;
 800237c:	4b0a      	ldr	r3, [pc, #40]	; (80023a8 <HAL_GPIO_EXTI_Callback+0x80>)
 800237e:	2201      	movs	r2, #1
 8002380:	701a      	strb	r2, [r3, #0]
 8002382:	e000      	b.n	8002386 <HAL_GPIO_EXTI_Callback+0x5e>
  } else {
      __NOP();
 8002384:	bf00      	nop
  }
  if(GPIO_Pin == IT_MAGN_Pin) {
 8002386:	88fb      	ldrh	r3, [r7, #6]
 8002388:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800238c:	d103      	bne.n	8002396 <HAL_GPIO_EXTI_Callback+0x6e>
  	 //HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);

  	 billent = 1;
 800238e:	4b07      	ldr	r3, [pc, #28]	; (80023ac <HAL_GPIO_EXTI_Callback+0x84>)
 8002390:	2201      	movs	r2, #1
 8002392:	701a      	strb	r2, [r3, #0]
    } else {
        __NOP();
    }
}
 8002394:	e000      	b.n	8002398 <HAL_GPIO_EXTI_Callback+0x70>
        __NOP();
 8002396:	bf00      	nop
}
 8002398:	bf00      	nop
 800239a:	370c      	adds	r7, #12
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr
 80023a4:	20000009 	.word	0x20000009
 80023a8:	20000008 	.word	0x20000008
 80023ac:	20000aa8 	.word	0x20000aa8

080023b0 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b082      	sub	sp, #8
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
	if (htim == &htim2 )
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	4a47      	ldr	r2, [pc, #284]	; (80024d8 <HAL_TIM_IC_CaptureCallback+0x128>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	f040 8083 	bne.w	80024c8 <HAL_TIM_IC_CaptureCallback+0x118>
	  {
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);
 80023c2:	2110      	movs	r1, #16
 80023c4:	4845      	ldr	r0, [pc, #276]	; (80024dc <HAL_TIM_IC_CaptureCallback+0x12c>)
 80023c6:	f004 ffa0 	bl	800730a <HAL_GPIO_TogglePin>
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // if the interrupt source is channel1
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	7f1b      	ldrb	r3, [r3, #28]
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	d17a      	bne.n	80024c8 <HAL_TIM_IC_CaptureCallback+0x118>
		{
			if (Is_First_Captured==0) // if the first value is not captured
 80023d2:	4b43      	ldr	r3, [pc, #268]	; (80024e0 <HAL_TIM_IC_CaptureCallback+0x130>)
 80023d4:	781b      	ldrb	r3, [r3, #0]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d11a      	bne.n	8002410 <HAL_TIM_IC_CaptureCallback+0x60>
			{
				IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 80023da:	2100      	movs	r1, #0
 80023dc:	6878      	ldr	r0, [r7, #4]
 80023de:	f007 ffa1 	bl	800a324 <HAL_TIM_ReadCapturedValue>
 80023e2:	4603      	mov	r3, r0
 80023e4:	4a3f      	ldr	r2, [pc, #252]	; (80024e4 <HAL_TIM_IC_CaptureCallback+0x134>)
 80023e6:	6013      	str	r3, [r2, #0]
				Is_First_Captured = 1;  // set the first captured as true
 80023e8:	4b3d      	ldr	r3, [pc, #244]	; (80024e0 <HAL_TIM_IC_CaptureCallback+0x130>)
 80023ea:	2201      	movs	r2, #1
 80023ec:	701a      	strb	r2, [r3, #0]
				// Now change the polarity to falling edge
				__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	6a1a      	ldr	r2, [r3, #32]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f022 020a 	bic.w	r2, r2, #10
 80023fc:	621a      	str	r2, [r3, #32]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	6a1a      	ldr	r2, [r3, #32]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f042 0202 	orr.w	r2, r2, #2
 800240c:	621a      	str	r2, [r3, #32]
				__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
				//__HAL_TIM_DISABLE_IT(&htim2, TIM_IT_CC1);
			}
		}
	  }
}
 800240e:	e05b      	b.n	80024c8 <HAL_TIM_IC_CaptureCallback+0x118>
			else if (Is_First_Captured==1)   // if the first is already captured
 8002410:	4b33      	ldr	r3, [pc, #204]	; (80024e0 <HAL_TIM_IC_CaptureCallback+0x130>)
 8002412:	781b      	ldrb	r3, [r3, #0]
 8002414:	2b01      	cmp	r3, #1
 8002416:	d157      	bne.n	80024c8 <HAL_TIM_IC_CaptureCallback+0x118>
				IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
 8002418:	2100      	movs	r1, #0
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	f007 ff82 	bl	800a324 <HAL_TIM_ReadCapturedValue>
 8002420:	4603      	mov	r3, r0
 8002422:	4a31      	ldr	r2, [pc, #196]	; (80024e8 <HAL_TIM_IC_CaptureCallback+0x138>)
 8002424:	6013      	str	r3, [r2, #0]
				__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	2200      	movs	r2, #0
 800242c:	625a      	str	r2, [r3, #36]	; 0x24
				if (IC_Val2 > IC_Val1)
 800242e:	4b2e      	ldr	r3, [pc, #184]	; (80024e8 <HAL_TIM_IC_CaptureCallback+0x138>)
 8002430:	681a      	ldr	r2, [r3, #0]
 8002432:	4b2c      	ldr	r3, [pc, #176]	; (80024e4 <HAL_TIM_IC_CaptureCallback+0x134>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	429a      	cmp	r2, r3
 8002438:	d907      	bls.n	800244a <HAL_TIM_IC_CaptureCallback+0x9a>
					Difference = IC_Val2-IC_Val1;
 800243a:	4b2b      	ldr	r3, [pc, #172]	; (80024e8 <HAL_TIM_IC_CaptureCallback+0x138>)
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	4b29      	ldr	r3, [pc, #164]	; (80024e4 <HAL_TIM_IC_CaptureCallback+0x134>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	1ad3      	subs	r3, r2, r3
 8002444:	4a29      	ldr	r2, [pc, #164]	; (80024ec <HAL_TIM_IC_CaptureCallback+0x13c>)
 8002446:	6013      	str	r3, [r2, #0]
 8002448:	e00f      	b.n	800246a <HAL_TIM_IC_CaptureCallback+0xba>
				else if (IC_Val1 > IC_Val2)
 800244a:	4b26      	ldr	r3, [pc, #152]	; (80024e4 <HAL_TIM_IC_CaptureCallback+0x134>)
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	4b26      	ldr	r3, [pc, #152]	; (80024e8 <HAL_TIM_IC_CaptureCallback+0x138>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	429a      	cmp	r2, r3
 8002454:	d909      	bls.n	800246a <HAL_TIM_IC_CaptureCallback+0xba>
					Difference = (0xffff - IC_Val1) + IC_Val2;
 8002456:	4b24      	ldr	r3, [pc, #144]	; (80024e8 <HAL_TIM_IC_CaptureCallback+0x138>)
 8002458:	681a      	ldr	r2, [r3, #0]
 800245a:	4b22      	ldr	r3, [pc, #136]	; (80024e4 <HAL_TIM_IC_CaptureCallback+0x134>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	1ad3      	subs	r3, r2, r3
 8002460:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8002464:	33ff      	adds	r3, #255	; 0xff
 8002466:	4a21      	ldr	r2, [pc, #132]	; (80024ec <HAL_TIM_IC_CaptureCallback+0x13c>)
 8002468:	6013      	str	r3, [r2, #0]
				Distance = Difference * .34/2;
 800246a:	4b20      	ldr	r3, [pc, #128]	; (80024ec <HAL_TIM_IC_CaptureCallback+0x13c>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4618      	mov	r0, r3
 8002470:	f7fe f848 	bl	8000504 <__aeabi_ui2d>
 8002474:	a316      	add	r3, pc, #88	; (adr r3, 80024d0 <HAL_TIM_IC_CaptureCallback+0x120>)
 8002476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800247a:	f7fe f8bd 	bl	80005f8 <__aeabi_dmul>
 800247e:	4602      	mov	r2, r0
 8002480:	460b      	mov	r3, r1
 8002482:	4610      	mov	r0, r2
 8002484:	4619      	mov	r1, r3
 8002486:	f04f 0200 	mov.w	r2, #0
 800248a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800248e:	f7fe f9dd 	bl	800084c <__aeabi_ddiv>
 8002492:	4602      	mov	r2, r0
 8002494:	460b      	mov	r3, r1
 8002496:	4610      	mov	r0, r2
 8002498:	4619      	mov	r1, r3
 800249a:	f7fe fb85 	bl	8000ba8 <__aeabi_d2uiz>
 800249e:	4603      	mov	r3, r0
 80024a0:	b2da      	uxtb	r2, r3
 80024a2:	4b13      	ldr	r3, [pc, #76]	; (80024f0 <HAL_TIM_IC_CaptureCallback+0x140>)
 80024a4:	701a      	strb	r2, [r3, #0]
				Is_First_Captured = 0; // set it back to false
 80024a6:	4b0e      	ldr	r3, [pc, #56]	; (80024e0 <HAL_TIM_IC_CaptureCallback+0x130>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	701a      	strb	r2, [r3, #0]
				__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	6a1a      	ldr	r2, [r3, #32]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f022 020a 	bic.w	r2, r2, #10
 80024ba:	621a      	str	r2, [r3, #32]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681a      	ldr	r2, [r3, #0]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	6a12      	ldr	r2, [r2, #32]
 80024c6:	621a      	str	r2, [r3, #32]
}
 80024c8:	bf00      	nop
 80024ca:	3708      	adds	r7, #8
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}
 80024d0:	5c28f5c3 	.word	0x5c28f5c3
 80024d4:	3fd5c28f 	.word	0x3fd5c28f
 80024d8:	200006e4 	.word	0x200006e4
 80024dc:	40020400 	.word	0x40020400
 80024e0:	20000bec 	.word	0x20000bec
 80024e4:	20000be0 	.word	0x20000be0
 80024e8:	20000be4 	.word	0x20000be4
 80024ec:	20000be8 	.word	0x20000be8
 80024f0:	20000bed 	.word	0x20000bed

080024f4 <HAL_TIM_PeriodElapsedCallback>:

// Callback: timer has rolled over
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b083      	sub	sp, #12
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  // Check which version of the timer triggered this callback and toggle LED
  if (htim == &htim6 )
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	4a0b      	ldr	r2, [pc, #44]	; (800252c <HAL_TIM_PeriodElapsedCallback+0x38>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d10d      	bne.n	8002520 <HAL_TIM_PeriodElapsedCallback+0x2c>
  {
	  if(timerse == 1){timerse =0;}
 8002504:	4b0a      	ldr	r3, [pc, #40]	; (8002530 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8002506:	781b      	ldrb	r3, [r3, #0]
 8002508:	2b01      	cmp	r3, #1
 800250a:	d102      	bne.n	8002512 <HAL_TIM_PeriodElapsedCallback+0x1e>
 800250c:	4b08      	ldr	r3, [pc, #32]	; (8002530 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800250e:	2200      	movs	r2, #0
 8002510:	701a      	strb	r2, [r3, #0]
	  if(timerse == 0){timerse =1;}
 8002512:	4b07      	ldr	r3, [pc, #28]	; (8002530 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8002514:	781b      	ldrb	r3, [r3, #0]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d102      	bne.n	8002520 <HAL_TIM_PeriodElapsedCallback+0x2c>
 800251a:	4b05      	ldr	r3, [pc, #20]	; (8002530 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800251c:	2201      	movs	r2, #1
 800251e:	701a      	strb	r2, [r3, #0]
  }
  if(htim == &htim7){

  }
}
 8002520:	bf00      	nop
 8002522:	370c      	adds	r7, #12
 8002524:	46bd      	mov	sp, r7
 8002526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252a:	4770      	bx	lr
 800252c:	200007bc 	.word	0x200007bc
 8002530:	20000c00 	.word	0x20000c00

08002534 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002534:	b480      	push	{r7}
 8002536:	b083      	sub	sp, #12
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
	if(huart == &huart2){
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	4a06      	ldr	r2, [pc, #24]	; (8002558 <HAL_UART_TxCpltCallback+0x24>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d102      	bne.n	800254a <HAL_UART_TxCpltCallback+0x16>
			telemetria_data_sent = 1;
 8002544:	4b05      	ldr	r3, [pc, #20]	; (800255c <HAL_UART_TxCpltCallback+0x28>)
 8002546:	2201      	movs	r2, #1
 8002548:	701a      	strb	r2, [r3, #0]
	}
}
 800254a:	bf00      	nop
 800254c:	370c      	adds	r7, #12
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr
 8002556:	bf00      	nop
 8002558:	200008d8 	.word	0x200008d8
 800255c:	20000bfa 	.word	0x20000bfa

08002560 <HAL_UART_RxCpltCallback>:



void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b082      	sub	sp, #8
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
	if(huart ==&huart1){
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	4a4b      	ldr	r2, [pc, #300]	; (8002698 <HAL_UART_RxCpltCallback+0x138>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d17b      	bne.n	8002668 <HAL_UART_RxCpltCallback+0x108>
		debug_i = __HAL_TIM_GET_COUNTER(&htim6);
 8002570:	4b4a      	ldr	r3, [pc, #296]	; (800269c <HAL_UART_RxCpltCallback+0x13c>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002576:	461a      	mov	r2, r3
 8002578:	4b49      	ldr	r3, [pc, #292]	; (80026a0 <HAL_UART_RxCpltCallback+0x140>)
 800257a:	601a      	str	r2, [r3, #0]
		if(debug_i < 100){
 800257c:	4b48      	ldr	r3, [pc, #288]	; (80026a0 <HAL_UART_RxCpltCallback+0x140>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	2b63      	cmp	r3, #99	; 0x63
 8002582:	dc0d      	bgt.n	80025a0 <HAL_UART_RxCpltCallback+0x40>
			CRSF_debug[CRSF_i] = UART1_rxBuffer[0];
 8002584:	4b47      	ldr	r3, [pc, #284]	; (80026a4 <HAL_UART_RxCpltCallback+0x144>)
 8002586:	781b      	ldrb	r3, [r3, #0]
 8002588:	461a      	mov	r2, r3
 800258a:	4b47      	ldr	r3, [pc, #284]	; (80026a8 <HAL_UART_RxCpltCallback+0x148>)
 800258c:	7819      	ldrb	r1, [r3, #0]
 800258e:	4b47      	ldr	r3, [pc, #284]	; (80026ac <HAL_UART_RxCpltCallback+0x14c>)
 8002590:	5499      	strb	r1, [r3, r2]
			CRSF_i++;
 8002592:	4b44      	ldr	r3, [pc, #272]	; (80026a4 <HAL_UART_RxCpltCallback+0x144>)
 8002594:	781b      	ldrb	r3, [r3, #0]
 8002596:	3301      	adds	r3, #1
 8002598:	b2da      	uxtb	r2, r3
 800259a:	4b42      	ldr	r3, [pc, #264]	; (80026a4 <HAL_UART_RxCpltCallback+0x144>)
 800259c:	701a      	strb	r2, [r3, #0]
 800259e:	e05f      	b.n	8002660 <HAL_UART_RxCpltCallback+0x100>
		}
		else{
			if(CRSF_debug[2] == 0x16){
 80025a0:	4b42      	ldr	r3, [pc, #264]	; (80026ac <HAL_UART_RxCpltCallback+0x14c>)
 80025a2:	789b      	ldrb	r3, [r3, #2]
 80025a4:	2b16      	cmp	r3, #22
 80025a6:	d154      	bne.n	8002652 <HAL_UART_RxCpltCallback+0xf2>
				RX_roll = (((uint16_t)(CRSF_debug[4] & 0b00000111)) << 8) + (uint16_t)(CRSF_debug[3]);
 80025a8:	4b40      	ldr	r3, [pc, #256]	; (80026ac <HAL_UART_RxCpltCallback+0x14c>)
 80025aa:	791b      	ldrb	r3, [r3, #4]
 80025ac:	021b      	lsls	r3, r3, #8
 80025ae:	b29b      	uxth	r3, r3
 80025b0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80025b4:	b29a      	uxth	r2, r3
 80025b6:	4b3d      	ldr	r3, [pc, #244]	; (80026ac <HAL_UART_RxCpltCallback+0x14c>)
 80025b8:	78db      	ldrb	r3, [r3, #3]
 80025ba:	b29b      	uxth	r3, r3
 80025bc:	4413      	add	r3, r2
 80025be:	b29a      	uxth	r2, r3
 80025c0:	4b3b      	ldr	r3, [pc, #236]	; (80026b0 <HAL_UART_RxCpltCallback+0x150>)
 80025c2:	801a      	strh	r2, [r3, #0]
				RX_pitch = (((uint16_t)(CRSF_debug[5] & 0b00111111)) << 5) + (((uint16_t)(CRSF_debug[4] & 0b11111000)) >> 3);
 80025c4:	4b39      	ldr	r3, [pc, #228]	; (80026ac <HAL_UART_RxCpltCallback+0x14c>)
 80025c6:	795b      	ldrb	r3, [r3, #5]
 80025c8:	015b      	lsls	r3, r3, #5
 80025ca:	b29b      	uxth	r3, r3
 80025cc:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80025d0:	b29a      	uxth	r2, r3
 80025d2:	4b36      	ldr	r3, [pc, #216]	; (80026ac <HAL_UART_RxCpltCallback+0x14c>)
 80025d4:	791b      	ldrb	r3, [r3, #4]
 80025d6:	08db      	lsrs	r3, r3, #3
 80025d8:	b2db      	uxtb	r3, r3
 80025da:	b29b      	uxth	r3, r3
 80025dc:	4413      	add	r3, r2
 80025de:	b29a      	uxth	r2, r3
 80025e0:	4b34      	ldr	r3, [pc, #208]	; (80026b4 <HAL_UART_RxCpltCallback+0x154>)
 80025e2:	801a      	strh	r2, [r3, #0]
				RX_throttle = (((uint16_t)(CRSF_debug[7] & 0b00000001)) << 10)+ (((uint16_t)(CRSF_debug[6])) << 2) + (((uint16_t)(CRSF_debug[5] & 0b11000000)) >> 6);
 80025e4:	4b31      	ldr	r3, [pc, #196]	; (80026ac <HAL_UART_RxCpltCallback+0x14c>)
 80025e6:	79db      	ldrb	r3, [r3, #7]
 80025e8:	029b      	lsls	r3, r3, #10
 80025ea:	b29b      	uxth	r3, r3
 80025ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025f0:	b29a      	uxth	r2, r3
 80025f2:	4b2e      	ldr	r3, [pc, #184]	; (80026ac <HAL_UART_RxCpltCallback+0x14c>)
 80025f4:	799b      	ldrb	r3, [r3, #6]
 80025f6:	b29b      	uxth	r3, r3
 80025f8:	009b      	lsls	r3, r3, #2
 80025fa:	b29b      	uxth	r3, r3
 80025fc:	4413      	add	r3, r2
 80025fe:	b29a      	uxth	r2, r3
 8002600:	4b2a      	ldr	r3, [pc, #168]	; (80026ac <HAL_UART_RxCpltCallback+0x14c>)
 8002602:	795b      	ldrb	r3, [r3, #5]
 8002604:	099b      	lsrs	r3, r3, #6
 8002606:	b2db      	uxtb	r3, r3
 8002608:	b29b      	uxth	r3, r3
 800260a:	4413      	add	r3, r2
 800260c:	b29a      	uxth	r2, r3
 800260e:	4b2a      	ldr	r3, [pc, #168]	; (80026b8 <HAL_UART_RxCpltCallback+0x158>)
 8002610:	801a      	strh	r2, [r3, #0]
				RX_yaw = (((uint16_t)(CRSF_debug[8] & 0b00001111)) << 7) + (((uint16_t)(CRSF_debug[7] & 0b11111110)) >> 1);
 8002612:	4b26      	ldr	r3, [pc, #152]	; (80026ac <HAL_UART_RxCpltCallback+0x14c>)
 8002614:	7a1b      	ldrb	r3, [r3, #8]
 8002616:	01db      	lsls	r3, r3, #7
 8002618:	b29b      	uxth	r3, r3
 800261a:	f403 63f0 	and.w	r3, r3, #1920	; 0x780
 800261e:	b29a      	uxth	r2, r3
 8002620:	4b22      	ldr	r3, [pc, #136]	; (80026ac <HAL_UART_RxCpltCallback+0x14c>)
 8002622:	79db      	ldrb	r3, [r3, #7]
 8002624:	085b      	lsrs	r3, r3, #1
 8002626:	b2db      	uxtb	r3, r3
 8002628:	b29b      	uxth	r3, r3
 800262a:	4413      	add	r3, r2
 800262c:	b29a      	uxth	r2, r3
 800262e:	4b23      	ldr	r3, [pc, #140]	; (80026bc <HAL_UART_RxCpltCallback+0x15c>)
 8002630:	801a      	strh	r2, [r3, #0]
				RX_arm = (((uint16_t)(CRSF_debug[9] & 0b01111111)) << 4) + (((uint16_t)(CRSF_debug[8] & 0b11110000)) >> 4);
 8002632:	4b1e      	ldr	r3, [pc, #120]	; (80026ac <HAL_UART_RxCpltCallback+0x14c>)
 8002634:	7a5b      	ldrb	r3, [r3, #9]
 8002636:	011b      	lsls	r3, r3, #4
 8002638:	b29b      	uxth	r3, r3
 800263a:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800263e:	b29a      	uxth	r2, r3
 8002640:	4b1a      	ldr	r3, [pc, #104]	; (80026ac <HAL_UART_RxCpltCallback+0x14c>)
 8002642:	7a1b      	ldrb	r3, [r3, #8]
 8002644:	091b      	lsrs	r3, r3, #4
 8002646:	b2db      	uxtb	r3, r3
 8002648:	b29b      	uxth	r3, r3
 800264a:	4413      	add	r3, r2
 800264c:	b29a      	uxth	r2, r3
 800264e:	4b1c      	ldr	r3, [pc, #112]	; (80026c0 <HAL_UART_RxCpltCallback+0x160>)
 8002650:	801a      	strh	r2, [r3, #0]
			}
			CRSF_debug[0] = UART1_rxBuffer[0];
 8002652:	4b15      	ldr	r3, [pc, #84]	; (80026a8 <HAL_UART_RxCpltCallback+0x148>)
 8002654:	781a      	ldrb	r2, [r3, #0]
 8002656:	4b15      	ldr	r3, [pc, #84]	; (80026ac <HAL_UART_RxCpltCallback+0x14c>)
 8002658:	701a      	strb	r2, [r3, #0]
			CRSF_i = 1;
 800265a:	4b12      	ldr	r3, [pc, #72]	; (80026a4 <HAL_UART_RxCpltCallback+0x144>)
 800265c:	2201      	movs	r2, #1
 800265e:	701a      	strb	r2, [r3, #0]
		}
		htim6.Instance->CNT = 0;
 8002660:	4b0e      	ldr	r3, [pc, #56]	; (800269c <HAL_UART_RxCpltCallback+0x13c>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	2200      	movs	r2, #0
 8002666:	625a      	str	r2, [r3, #36]	; 0x24
	}
	if(huart == &huart2){
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	4a16      	ldr	r2, [pc, #88]	; (80026c4 <HAL_UART_RxCpltCallback+0x164>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d10e      	bne.n	800268e <HAL_UART_RxCpltCallback+0x12e>
		if(uart_telemetria == 1){
 8002670:	4b15      	ldr	r3, [pc, #84]	; (80026c8 <HAL_UART_RxCpltCallback+0x168>)
 8002672:	781b      	ldrb	r3, [r3, #0]
 8002674:	2b01      	cmp	r3, #1
 8002676:	d105      	bne.n	8002684 <HAL_UART_RxCpltCallback+0x124>
			HAL_UART_Receive_IT(&huart2, telem, 11);
 8002678:	220b      	movs	r2, #11
 800267a:	4914      	ldr	r1, [pc, #80]	; (80026cc <HAL_UART_RxCpltCallback+0x16c>)
 800267c:	4811      	ldr	r0, [pc, #68]	; (80026c4 <HAL_UART_RxCpltCallback+0x164>)
 800267e:	f008 fca1 	bl	800afc4 <HAL_UART_Receive_IT>
		}
		else
			HAL_UART_Receive_IT(&huart2, telem, 11);
	}
}
 8002682:	e004      	b.n	800268e <HAL_UART_RxCpltCallback+0x12e>
			HAL_UART_Receive_IT(&huart2, telem, 11);
 8002684:	220b      	movs	r2, #11
 8002686:	4911      	ldr	r1, [pc, #68]	; (80026cc <HAL_UART_RxCpltCallback+0x16c>)
 8002688:	480e      	ldr	r0, [pc, #56]	; (80026c4 <HAL_UART_RxCpltCallback+0x164>)
 800268a:	f008 fc9b 	bl	800afc4 <HAL_UART_Receive_IT>
}
 800268e:	bf00      	nop
 8002690:	3708      	adds	r7, #8
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop
 8002698:	20000894 	.word	0x20000894
 800269c:	200007bc 	.word	0x200007bc
 80026a0:	20000bfc 	.word	0x20000bfc
 80026a4:	20002bc4 	.word	0x20002bc4
 80026a8:	20002bc8 	.word	0x20002bc8
 80026ac:	20002b84 	.word	0x20002b84
 80026b0:	20002bca 	.word	0x20002bca
 80026b4:	20002bcc 	.word	0x20002bcc
 80026b8:	20002bd0 	.word	0x20002bd0
 80026bc:	20002bce 	.word	0x20002bce
 80026c0:	20002bd2 	.word	0x20002bd2
 80026c4:	200008d8 	.word	0x200008d8
 80026c8:	20000bee 	.word	0x20000bee
 80026cc:	20000000 	.word	0x20000000

080026d0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80026d0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80026d4:	b094      	sub	sp, #80	; 0x50
 80026d6:	af04      	add	r7, sp, #16
 80026d8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	//HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
//	uint8_t telemetria[8];
	uint8_t telemetria_data[40] = "HELLO WORLD \r\n";
 80026da:	4b6c      	ldr	r3, [pc, #432]	; (800288c <StartDefaultTask+0x1bc>)
 80026dc:	f107 0418 	add.w	r4, r7, #24
 80026e0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80026e2:	c407      	stmia	r4!, {r0, r1, r2}
 80026e4:	8023      	strh	r3, [r4, #0]
 80026e6:	3402      	adds	r4, #2
 80026e8:	0c1b      	lsrs	r3, r3, #16
 80026ea:	7023      	strb	r3, [r4, #0]
 80026ec:	f107 0327 	add.w	r3, r7, #39	; 0x27
 80026f0:	2200      	movs	r2, #0
 80026f2:	601a      	str	r2, [r3, #0]
 80026f4:	605a      	str	r2, [r3, #4]
 80026f6:	609a      	str	r2, [r3, #8]
 80026f8:	60da      	str	r2, [r3, #12]
 80026fa:	611a      	str	r2, [r3, #16]
 80026fc:	615a      	str	r2, [r3, #20]
 80026fe:	761a      	strb	r2, [r3, #24]


  /* Infinite loop */
  for(;;)
  {
	  if(uart_telemetria == 1){
 8002700:	4b63      	ldr	r3, [pc, #396]	; (8002890 <StartDefaultTask+0x1c0>)
 8002702:	781b      	ldrb	r3, [r3, #0]
 8002704:	2b01      	cmp	r3, #1
 8002706:	f040 8086 	bne.w	8002816 <StartDefaultTask+0x146>
		  if(telem[0] == 'P'){
 800270a:	4b62      	ldr	r3, [pc, #392]	; (8002894 <StartDefaultTask+0x1c4>)
 800270c:	781b      	ldrb	r3, [r3, #0]
 800270e:	2b50      	cmp	r3, #80	; 0x50
 8002710:	d13e      	bne.n	8002790 <StartDefaultTask+0xc0>
			  telem_P = (float)(((uint32_t)telem[1]-48)*1000000+((uint32_t)telem[2]-48)*100000+((uint32_t)telem[3]-48)*10000+((uint32_t)telem[4]-48)*1000+((uint32_t)telem[5]-48)*100+((uint32_t)telem[6]-48)*10+((uint32_t)telem[7]-48))/100000;
 8002712:	4b60      	ldr	r3, [pc, #384]	; (8002894 <StartDefaultTask+0x1c4>)
 8002714:	785b      	ldrb	r3, [r3, #1]
 8002716:	461a      	mov	r2, r3
 8002718:	4b5f      	ldr	r3, [pc, #380]	; (8002898 <StartDefaultTask+0x1c8>)
 800271a:	fb03 f202 	mul.w	r2, r3, r2
 800271e:	4b5d      	ldr	r3, [pc, #372]	; (8002894 <StartDefaultTask+0x1c4>)
 8002720:	789b      	ldrb	r3, [r3, #2]
 8002722:	4619      	mov	r1, r3
 8002724:	4b5d      	ldr	r3, [pc, #372]	; (800289c <StartDefaultTask+0x1cc>)
 8002726:	fb01 f303 	mul.w	r3, r1, r3
 800272a:	441a      	add	r2, r3
 800272c:	4b59      	ldr	r3, [pc, #356]	; (8002894 <StartDefaultTask+0x1c4>)
 800272e:	78db      	ldrb	r3, [r3, #3]
 8002730:	4619      	mov	r1, r3
 8002732:	f242 7310 	movw	r3, #10000	; 0x2710
 8002736:	fb01 f303 	mul.w	r3, r1, r3
 800273a:	441a      	add	r2, r3
 800273c:	4b55      	ldr	r3, [pc, #340]	; (8002894 <StartDefaultTask+0x1c4>)
 800273e:	791b      	ldrb	r3, [r3, #4]
 8002740:	4619      	mov	r1, r3
 8002742:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002746:	fb01 f303 	mul.w	r3, r1, r3
 800274a:	441a      	add	r2, r3
 800274c:	4b51      	ldr	r3, [pc, #324]	; (8002894 <StartDefaultTask+0x1c4>)
 800274e:	795b      	ldrb	r3, [r3, #5]
 8002750:	4619      	mov	r1, r3
 8002752:	2364      	movs	r3, #100	; 0x64
 8002754:	fb01 f303 	mul.w	r3, r1, r3
 8002758:	441a      	add	r2, r3
 800275a:	4b4e      	ldr	r3, [pc, #312]	; (8002894 <StartDefaultTask+0x1c4>)
 800275c:	799b      	ldrb	r3, [r3, #6]
 800275e:	4619      	mov	r1, r3
 8002760:	460b      	mov	r3, r1
 8002762:	009b      	lsls	r3, r3, #2
 8002764:	440b      	add	r3, r1
 8002766:	005b      	lsls	r3, r3, #1
 8002768:	4413      	add	r3, r2
 800276a:	4a4a      	ldr	r2, [pc, #296]	; (8002894 <StartDefaultTask+0x1c4>)
 800276c:	79d2      	ldrb	r2, [r2, #7]
 800276e:	441a      	add	r2, r3
 8002770:	4b4b      	ldr	r3, [pc, #300]	; (80028a0 <StartDefaultTask+0x1d0>)
 8002772:	4413      	add	r3, r2
 8002774:	ee07 3a90 	vmov	s15, r3
 8002778:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800277c:	eddf 6a49 	vldr	s13, [pc, #292]	; 80028a4 <StartDefaultTask+0x1d4>
 8002780:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002784:	4b48      	ldr	r3, [pc, #288]	; (80028a8 <StartDefaultTask+0x1d8>)
 8002786:	edc3 7a00 	vstr	s15, [r3]
			  new_P = 1;
 800278a:	4b48      	ldr	r3, [pc, #288]	; (80028ac <StartDefaultTask+0x1dc>)
 800278c:	2201      	movs	r2, #1
 800278e:	701a      	strb	r2, [r3, #0]
		  }
		  if(telem[0] == 'D'){
 8002790:	4b40      	ldr	r3, [pc, #256]	; (8002894 <StartDefaultTask+0x1c4>)
 8002792:	781b      	ldrb	r3, [r3, #0]
 8002794:	2b44      	cmp	r3, #68	; 0x44
 8002796:	d13e      	bne.n	8002816 <StartDefaultTask+0x146>
			  telem_D = (float)(((uint32_t)telem[1]-48)*1000000+((uint32_t)telem[2]-48)*100000+((uint32_t)telem[3]-48)*10000+((uint32_t)telem[4]-48)*1000+((uint32_t)telem[5]-48)*100+((uint32_t)telem[6]-48)*10+((uint32_t)telem[7]-48))/100000;
 8002798:	4b3e      	ldr	r3, [pc, #248]	; (8002894 <StartDefaultTask+0x1c4>)
 800279a:	785b      	ldrb	r3, [r3, #1]
 800279c:	461a      	mov	r2, r3
 800279e:	4b3e      	ldr	r3, [pc, #248]	; (8002898 <StartDefaultTask+0x1c8>)
 80027a0:	fb03 f202 	mul.w	r2, r3, r2
 80027a4:	4b3b      	ldr	r3, [pc, #236]	; (8002894 <StartDefaultTask+0x1c4>)
 80027a6:	789b      	ldrb	r3, [r3, #2]
 80027a8:	4619      	mov	r1, r3
 80027aa:	4b3c      	ldr	r3, [pc, #240]	; (800289c <StartDefaultTask+0x1cc>)
 80027ac:	fb01 f303 	mul.w	r3, r1, r3
 80027b0:	441a      	add	r2, r3
 80027b2:	4b38      	ldr	r3, [pc, #224]	; (8002894 <StartDefaultTask+0x1c4>)
 80027b4:	78db      	ldrb	r3, [r3, #3]
 80027b6:	4619      	mov	r1, r3
 80027b8:	f242 7310 	movw	r3, #10000	; 0x2710
 80027bc:	fb01 f303 	mul.w	r3, r1, r3
 80027c0:	441a      	add	r2, r3
 80027c2:	4b34      	ldr	r3, [pc, #208]	; (8002894 <StartDefaultTask+0x1c4>)
 80027c4:	791b      	ldrb	r3, [r3, #4]
 80027c6:	4619      	mov	r1, r3
 80027c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027cc:	fb01 f303 	mul.w	r3, r1, r3
 80027d0:	441a      	add	r2, r3
 80027d2:	4b30      	ldr	r3, [pc, #192]	; (8002894 <StartDefaultTask+0x1c4>)
 80027d4:	795b      	ldrb	r3, [r3, #5]
 80027d6:	4619      	mov	r1, r3
 80027d8:	2364      	movs	r3, #100	; 0x64
 80027da:	fb01 f303 	mul.w	r3, r1, r3
 80027de:	441a      	add	r2, r3
 80027e0:	4b2c      	ldr	r3, [pc, #176]	; (8002894 <StartDefaultTask+0x1c4>)
 80027e2:	799b      	ldrb	r3, [r3, #6]
 80027e4:	4619      	mov	r1, r3
 80027e6:	460b      	mov	r3, r1
 80027e8:	009b      	lsls	r3, r3, #2
 80027ea:	440b      	add	r3, r1
 80027ec:	005b      	lsls	r3, r3, #1
 80027ee:	4413      	add	r3, r2
 80027f0:	4a28      	ldr	r2, [pc, #160]	; (8002894 <StartDefaultTask+0x1c4>)
 80027f2:	79d2      	ldrb	r2, [r2, #7]
 80027f4:	441a      	add	r2, r3
 80027f6:	4b2a      	ldr	r3, [pc, #168]	; (80028a0 <StartDefaultTask+0x1d0>)
 80027f8:	4413      	add	r3, r2
 80027fa:	ee07 3a90 	vmov	s15, r3
 80027fe:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002802:	eddf 6a28 	vldr	s13, [pc, #160]	; 80028a4 <StartDefaultTask+0x1d4>
 8002806:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800280a:	4b29      	ldr	r3, [pc, #164]	; (80028b0 <StartDefaultTask+0x1e0>)
 800280c:	edc3 7a00 	vstr	s15, [r3]
			  new_D = 1;
 8002810:	4b28      	ldr	r3, [pc, #160]	; (80028b4 <StartDefaultTask+0x1e4>)
 8002812:	2201      	movs	r2, #1
 8002814:	701a      	strb	r2, [r3, #0]
		  }
	  }
	  if (xQueueReceive(telemetria_Queue, (void*)&telemetria_send, 0) == pdTRUE){
 8002816:	4b28      	ldr	r3, [pc, #160]	; (80028b8 <StartDefaultTask+0x1e8>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f107 010c 	add.w	r1, r7, #12
 800281e:	2200      	movs	r2, #0
 8002820:	4618      	mov	r0, r3
 8002822:	f00c fc87 	bl	800f134 <xQueueReceive>
 8002826:	4603      	mov	r3, r0
 8002828:	2b01      	cmp	r3, #1
 800282a:	d12a      	bne.n	8002882 <StartDefaultTask+0x1b2>
//		  sprintf((char*)telemetria_data, "Raw:0,0,0,0,0,0,%d,%d,%d\r\n", (int)((drone_angle[0])*10), (int)((drone_angle[1])*10), (int)(drone_angle[2])*10); //%5.2f
	//	  sprintf((char*)telemetria_data, "Yaw: 115.47\r\n");
		  HAL_UART_Transmit (&huart2, telemetria_data, sizeof (telemetria_data), 200);
*/

		  if(telemetria_data_sent == 1){
 800282c:	4b23      	ldr	r3, [pc, #140]	; (80028bc <StartDefaultTask+0x1ec>)
 800282e:	781b      	ldrb	r3, [r3, #0]
 8002830:	2b01      	cmp	r3, #1
 8002832:	d126      	bne.n	8002882 <StartDefaultTask+0x1b2>
		  			  sprintf((char*)telemetria_data, "%4.3f,%4.3f,%4.3f\r\n", telemetria_send[0], telemetria_send[1], telemetria_send[2]); //%5.2f
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	4618      	mov	r0, r3
 8002838:	f7fd fe86 	bl	8000548 <__aeabi_f2d>
 800283c:	4680      	mov	r8, r0
 800283e:	4689      	mov	r9, r1
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	4618      	mov	r0, r3
 8002844:	f7fd fe80 	bl	8000548 <__aeabi_f2d>
 8002848:	4604      	mov	r4, r0
 800284a:	460d      	mov	r5, r1
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	4618      	mov	r0, r3
 8002850:	f7fd fe7a 	bl	8000548 <__aeabi_f2d>
 8002854:	4602      	mov	r2, r0
 8002856:	460b      	mov	r3, r1
 8002858:	f107 0018 	add.w	r0, r7, #24
 800285c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002860:	e9cd 4500 	strd	r4, r5, [sp]
 8002864:	4642      	mov	r2, r8
 8002866:	464b      	mov	r3, r9
 8002868:	4915      	ldr	r1, [pc, #84]	; (80028c0 <StartDefaultTask+0x1f0>)
 800286a:	f00e fe59 	bl	8011520 <siprintf>
//		  			  sprintf((char*)telemetria_data, "%2.2f, %2.2f, %2.2f, %3.2f, %3.2f, %3.2f, %4.1f, %4.1f, %4.1f, %3.1f, %3.1f, %3.1f, %3.1f, %3.1f, %3.1f, %3.1f, %3.1f, %3.1f, %3.1f\r\n", telemetria_send[0], telemetria_send[1], telemetria_send[2], telemetria_send[3], telemetria_send[4], telemetria_send[5], telemetria_send[6], telemetria_send[7], telemetria_send[8], telemetria_send[9], telemetria_send[10], telemetria_send[11], telemetria_send[12],telemetria_send[13], telemetria_send[14], telemetria_send[15], telemetria_send[16], telemetria_send[17], telemetria_send[18]); //%5.2f
		  			  HAL_UART_Transmit_IT(&huart2, telemetria_data, sizeof (telemetria_data));
 800286e:	f107 0318 	add.w	r3, r7, #24
 8002872:	2228      	movs	r2, #40	; 0x28
 8002874:	4619      	mov	r1, r3
 8002876:	4813      	ldr	r0, [pc, #76]	; (80028c4 <StartDefaultTask+0x1f4>)
 8002878:	f008 fb5f 	bl	800af3a <HAL_UART_Transmit_IT>
		  			  telemetria_data_sent = 0;
 800287c:	4b0f      	ldr	r3, [pc, #60]	; (80028bc <StartDefaultTask+0x1ec>)
 800287e:	2200      	movs	r2, #0
 8002880:	701a      	strb	r2, [r3, #0]
		  		  }
	  }


	  osDelay(20);
 8002882:	2014      	movs	r0, #20
 8002884:	f00c f9cd 	bl	800ec22 <osDelay>
	  if(uart_telemetria == 1){
 8002888:	e73a      	b.n	8002700 <StartDefaultTask+0x30>
 800288a:	bf00      	nop
 800288c:	08015fa4 	.word	0x08015fa4
 8002890:	20000bee 	.word	0x20000bee
 8002894:	20000000 	.word	0x20000000
 8002898:	000f4240 	.word	0x000f4240
 800289c:	000186a0 	.word	0x000186a0
 80028a0:	fcd232b0 	.word	0xfcd232b0
 80028a4:	47c35000 	.word	0x47c35000
 80028a8:	20000bf0 	.word	0x20000bf0
 80028ac:	20000bf8 	.word	0x20000bf8
 80028b0:	20000bf4 	.word	0x20000bf4
 80028b4:	20000bf9 	.word	0x20000bf9
 80028b8:	20002bec 	.word	0x20002bec
 80028bc:	20000bfa 	.word	0x20000bfa
 80028c0:	08015f90 	.word	0x08015f90
 80028c4:	200008d8 	.word	0x200008d8

080028c8 <Start_Data_Reading>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_Data_Reading */
void Start_Data_Reading(void const * argument)
{
 80028c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028ca:	f5ad 7d03 	sub.w	sp, sp, #524	; 0x20c
 80028ce:	af06      	add	r7, sp, #24
 80028d0:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 80028d4:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80028d8:	6018      	str	r0, [r3, #0]
	//Magneto 1.2 calibration
//	FusionVector magneto_offset = {-10.254290, 1.8038, -4.628919};
//	FusionMatrix magneto_transform = {1.030904, 0.011754, -0.008844, 0.011754, 1.040290, -0.000902, -0.008844, -0.000902, 1.008504};

	//Magneto 1.2 calibration, kinda works
	FusionVector magneto_offset = {-10.254290, 1.8038, -4.628919};
 80028da:	4a6a      	ldr	r2, [pc, #424]	; (8002a84 <Start_Data_Reading+0x1bc>)
 80028dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80028e0:	ca07      	ldmia	r2, {r0, r1, r2}
 80028e2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	FusionMatrix magneto_transform = {1.030904, 0.011754, -0.008844, 0.011754, 1.040290, -0.000902, -0.008844, -0.000902, 1.008504};
 80028e6:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 80028ea:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80028ee:	4a66      	ldr	r2, [pc, #408]	; (8002a88 <Start_Data_Reading+0x1c0>)
 80028f0:	461c      	mov	r4, r3
 80028f2:	4615      	mov	r5, r2
 80028f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80028f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80028f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80028fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80028fc:	682b      	ldr	r3, [r5, #0]
 80028fe:	6023      	str	r3, [r4, #0]
//	FusionVector magneto_offset = {0, 0, 0};
//	FusionMatrix magneto_transform = {1,0,0,0,1,0,0,0,1};
	FusionVector magneto_data;

	//pitch angle velocity control params
	float err_pitch = 0;
 8002900:	f04f 0300 	mov.w	r3, #0
 8002904:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
	float errd_pitch = 0;
 8002908:	f04f 0300 	mov.w	r3, #0
 800290c:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
	float prev_err_pitch = 0;
 8002910:	f04f 0300 	mov.w	r3, #0
 8002914:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
	float control_pitch = 0;
 8002918:	f04f 0300 	mov.w	r3, #0
 800291c:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
	float P_pitch = 20;
 8002920:	4b5a      	ldr	r3, [pc, #360]	; (8002a8c <Start_Data_Reading+0x1c4>)
 8002922:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
	float D_pitch = 0.1;
 8002926:	4b5a      	ldr	r3, [pc, #360]	; (8002a90 <Start_Data_Reading+0x1c8>)
 8002928:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0

	//pitch angle control params
	float err_angle_pitch = 0;
 800292c:	f04f 0300 	mov.w	r3, #0
 8002930:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
	float errd_angle_pitch = 0;
 8002934:	f04f 0300 	mov.w	r3, #0
 8002938:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
	float prev_err_angle_pitch = 0;
 800293c:	f04f 0300 	mov.w	r3, #0
 8002940:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
	float angle_control_pitch = 0;
 8002944:	f04f 0300 	mov.w	r3, #0
 8002948:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
	float P_angle_pitch = 0.04;
 800294c:	4b51      	ldr	r3, [pc, #324]	; (8002a94 <Start_Data_Reading+0x1cc>)
 800294e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
	float D_angle_pitch = 0.0001;//0.005;
 8002952:	4b51      	ldr	r3, [pc, #324]	; (8002a98 <Start_Data_Reading+0x1d0>)
 8002954:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c

	//roll angle velocity control params
	float err_roll = 0;
 8002958:	f04f 0300 	mov.w	r3, #0
 800295c:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
	float errd_roll = 0;
 8002960:	f04f 0300 	mov.w	r3, #0
 8002964:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
	float prev_err_roll = 0;
 8002968:	f04f 0300 	mov.w	r3, #0
 800296c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
	float control_roll = 0;
 8002970:	f04f 0300 	mov.w	r3, #0
 8002974:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
	float P_roll = 5;
 8002978:	4b48      	ldr	r3, [pc, #288]	; (8002a9c <Start_Data_Reading+0x1d4>)
 800297a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
	float D_roll = 0.1;//0.4
 800297e:	4b44      	ldr	r3, [pc, #272]	; (8002a90 <Start_Data_Reading+0x1c8>)
 8002980:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188

	//roll angle control params
	float P_angle_roll = 0.2;
 8002984:	4b46      	ldr	r3, [pc, #280]	; (8002aa0 <Start_Data_Reading+0x1d8>)
 8002986:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
	float D_angle_roll = 0.0001;//0.005;
 800298a:	4b43      	ldr	r3, [pc, #268]	; (8002a98 <Start_Data_Reading+0x1d0>)
 800298c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
	float err_angle_roll = 0;
 8002990:	f04f 0300 	mov.w	r3, #0
 8002994:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
	float errd_angle_roll = 0;
 8002998:	f04f 0300 	mov.w	r3, #0
 800299c:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
	float prev_err_angle_roll = 0;
 80029a0:	f04f 0300 	mov.w	r3, #0
 80029a4:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
	float angle_control_roll = 0;
 80029a8:	f04f 0300 	mov.w	r3, #0
 80029ac:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174

	//yaw angle velocity control params
	float err_yaw = 0;
 80029b0:	f04f 0300 	mov.w	r3, #0
 80029b4:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
	float errd_yaw = 0;
 80029b8:	f04f 0300 	mov.w	r3, #0
 80029bc:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
	float prev_err_yaw = 0;
 80029c0:	f04f 0300 	mov.w	r3, #0
 80029c4:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
	float control_yaw = 0;
 80029c8:	f04f 0300 	mov.w	r3, #0
 80029cc:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
	float P_yaw = 20;
 80029d0:	4b2e      	ldr	r3, [pc, #184]	; (8002a8c <Start_Data_Reading+0x1c4>)
 80029d2:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
	float D_yaw = 0.1;
 80029d6:	4b2e      	ldr	r3, [pc, #184]	; (8002a90 <Start_Data_Reading+0x1c8>)
 80029d8:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4

	//yaw angle control params
	float P_angle_yaw = 0.8;//0.04;
 80029dc:	4b31      	ldr	r3, [pc, #196]	; (8002aa4 <Start_Data_Reading+0x1dc>)
 80029de:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
	float D_angle_yaw = 0.000;//0.005;
 80029e2:	f04f 0300 	mov.w	r3, #0
 80029e6:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
	float err_angle_yaw = 0;
 80029ea:	f04f 0300 	mov.w	r3, #0
 80029ee:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
	float errd_angle_yaw = 0;
 80029f2:	f04f 0300 	mov.w	r3, #0
 80029f6:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
	float prev_err_angle_yaw = 0;
 80029fa:	f04f 0300 	mov.w	r3, #0
 80029fe:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
	float angle_control_yaw = 0;
 8002a02:	f04f 0300 	mov.w	r3, #0
 8002a06:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154

	float yaw_angle = 0;
 8002a0a:	f04f 0300 	mov.w	r3, #0
 8002a0e:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
	float prev_euler_yaw = 0;
 8002a12:	f04f 0300 	mov.w	r3, #0
 8002a16:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
	int n = 0;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8



	//imu init function
	BMI088_Init(&imu, &hspi2, CS_ACC_GPIO_Port, CS_ACC_Pin, CS_GYRO_GPIO_Port, CS_GYRO_Pin);
 8002a20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a24:	9301      	str	r3, [sp, #4]
 8002a26:	4b20      	ldr	r3, [pc, #128]	; (8002aa8 <Start_Data_Reading+0x1e0>)
 8002a28:	9300      	str	r3, [sp, #0]
 8002a2a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a2e:	4a1f      	ldr	r2, [pc, #124]	; (8002aac <Start_Data_Reading+0x1e4>)
 8002a30:	491f      	ldr	r1, [pc, #124]	; (8002ab0 <Start_Data_Reading+0x1e8>)
 8002a32:	4820      	ldr	r0, [pc, #128]	; (8002ab4 <Start_Data_Reading+0x1ec>)
 8002a34:	f002 faa4 	bl	8004f80 <BMI088_Init>


	//bmp388 pressure sensor init
	bmp._hi2c = &hi2c2;
 8002a38:	4b1f      	ldr	r3, [pc, #124]	; (8002ab8 <Start_Data_Reading+0x1f0>)
 8002a3a:	4a20      	ldr	r2, [pc, #128]	; (8002abc <Start_Data_Reading+0x1f4>)
 8002a3c:	601a      	str	r2, [r3, #0]


	BMP388_SetTempOS(&bmp, 0);
 8002a3e:	2100      	movs	r1, #0
 8002a40:	481d      	ldr	r0, [pc, #116]	; (8002ab8 <Start_Data_Reading+0x1f0>)
 8002a42:	f002 fe0e 	bl	8005662 <BMP388_SetTempOS>
	HAL_Delay(10);
 8002a46:	200a      	movs	r0, #10
 8002a48:	f003 fb10 	bl	800606c <HAL_Delay>
	BMP388_SetPressOS(&bmp, 0x03); //0 volt, de adatlap alapján 8x-nek megfelelő 0x03 beírva
 8002a4c:	2103      	movs	r1, #3
 8002a4e:	481a      	ldr	r0, [pc, #104]	; (8002ab8 <Start_Data_Reading+0x1f0>)
 8002a50:	f002 fe27 	bl	80056a2 <BMP388_SetPressOS>
	HAL_Delay(10);
 8002a54:	200a      	movs	r0, #10
 8002a56:	f003 fb09 	bl	800606c <HAL_Delay>
	BMP388_SetIIRFilterCoeff(&bmp, 2);
 8002a5a:	2102      	movs	r1, #2
 8002a5c:	4816      	ldr	r0, [pc, #88]	; (8002ab8 <Start_Data_Reading+0x1f0>)
 8002a5e:	f002 fe3f 	bl	80056e0 <BMP388_SetIIRFilterCoeff>
	HAL_Delay(10);
 8002a62:	200a      	movs	r0, #10
 8002a64:	f003 fb02 	bl	800606c <HAL_Delay>
	BMP388_SetOutputDataRate(&bmp, 0x02);
 8002a68:	2102      	movs	r1, #2
 8002a6a:	4813      	ldr	r0, [pc, #76]	; (8002ab8 <Start_Data_Reading+0x1f0>)
 8002a6c:	f002 fe4f 	bl	800570e <BMP388_SetOutputDataRate>
	HAL_Delay(10);
 8002a70:	200a      	movs	r0, #10
 8002a72:	f003 fafb 	bl	800606c <HAL_Delay>
	BMP388_Init(&bmp);
 8002a76:	4810      	ldr	r0, [pc, #64]	; (8002ab8 <Start_Data_Reading+0x1f0>)
 8002a78:	f002 fd78 	bl	800556c <BMP388_Init>

	for(int i_init = 0; i_init<2000; i_init++ ){
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002a82:	e091      	b.n	8002ba8 <Start_Data_Reading+0x2e0>
 8002a84:	08016000 	.word	0x08016000
 8002a88:	0801600c 	.word	0x0801600c
 8002a8c:	41a00000 	.word	0x41a00000
 8002a90:	3dcccccd 	.word	0x3dcccccd
 8002a94:	3d23d70a 	.word	0x3d23d70a
 8002a98:	38d1b717 	.word	0x38d1b717
 8002a9c:	40a00000 	.word	0x40a00000
 8002aa0:	3e4ccccd 	.word	0x3e4ccccd
 8002aa4:	3f4ccccd 	.word	0x3f4ccccd
 8002aa8:	40020400 	.word	0x40020400
 8002aac:	40020800 	.word	0x40020800
 8002ab0:	2000068c 	.word	0x2000068c
 8002ab4:	20000a10 	.word	0x20000a10
 8002ab8:	20000a60 	.word	0x20000a60
 8002abc:	200005e4 	.word	0x200005e4
	  if(i_init % 5 == 4){
 8002ac0:	f8d7 11c4 	ldr.w	r1, [r7, #452]	; 0x1c4
 8002ac4:	4bc0      	ldr	r3, [pc, #768]	; (8002dc8 <Start_Data_Reading+0x500>)
 8002ac6:	fb83 2301 	smull	r2, r3, r3, r1
 8002aca:	105a      	asrs	r2, r3, #1
 8002acc:	17cb      	asrs	r3, r1, #31
 8002ace:	1ad2      	subs	r2, r2, r3
 8002ad0:	4613      	mov	r3, r2
 8002ad2:	009b      	lsls	r3, r3, #2
 8002ad4:	4413      	add	r3, r2
 8002ad6:	1aca      	subs	r2, r1, r3
 8002ad8:	2a04      	cmp	r2, #4
 8002ada:	d12d      	bne.n	8002b38 <Start_Data_Reading+0x270>
		  BMP388_ReadRawPressTempTime(&bmp, &raw_press, &raw_temp, &raw_time);
 8002adc:	4bbb      	ldr	r3, [pc, #748]	; (8002dcc <Start_Data_Reading+0x504>)
 8002ade:	4abc      	ldr	r2, [pc, #752]	; (8002dd0 <Start_Data_Reading+0x508>)
 8002ae0:	49bc      	ldr	r1, [pc, #752]	; (8002dd4 <Start_Data_Reading+0x50c>)
 8002ae2:	48bd      	ldr	r0, [pc, #756]	; (8002dd8 <Start_Data_Reading+0x510>)
 8002ae4:	f002 fe28 	bl	8005738 <BMP388_ReadRawPressTempTime>
		  BMP388_CompensateRawPressTemp(&bmp, raw_press, raw_temp, &press, &temp);
 8002ae8:	4bba      	ldr	r3, [pc, #744]	; (8002dd4 <Start_Data_Reading+0x50c>)
 8002aea:	6819      	ldr	r1, [r3, #0]
 8002aec:	4bb8      	ldr	r3, [pc, #736]	; (8002dd0 <Start_Data_Reading+0x508>)
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	4bba      	ldr	r3, [pc, #744]	; (8002ddc <Start_Data_Reading+0x514>)
 8002af2:	9300      	str	r3, [sp, #0]
 8002af4:	4bba      	ldr	r3, [pc, #744]	; (8002de0 <Start_Data_Reading+0x518>)
 8002af6:	48b8      	ldr	r0, [pc, #736]	; (8002dd8 <Start_Data_Reading+0x510>)
 8002af8:	f002 fe4a 	bl	8005790 <BMP388_CompensateRawPressTemp>
		  h0 += BMP388_FindAltitude(ground_pressure, press);
 8002afc:	4bb8      	ldr	r3, [pc, #736]	; (8002de0 <Start_Data_Reading+0x518>)
 8002afe:	edd3 7a00 	vldr	s15, [r3]
 8002b02:	eef0 0a67 	vmov.f32	s1, s15
 8002b06:	ed9f 0ab7 	vldr	s0, [pc, #732]	; 8002de4 <Start_Data_Reading+0x51c>
 8002b0a:	f002 fe65 	bl	80057d8 <BMP388_FindAltitude>
 8002b0e:	eeb0 7a40 	vmov.f32	s14, s0
 8002b12:	4bb5      	ldr	r3, [pc, #724]	; (8002de8 <Start_Data_Reading+0x520>)
 8002b14:	edd3 7a00 	vldr	s15, [r3]
 8002b18:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b1c:	4bb2      	ldr	r3, [pc, #712]	; (8002de8 <Start_Data_Reading+0x520>)
 8002b1e:	edc3 7a00 	vstr	s15, [r3]
		  p0 += press;
 8002b22:	4bb2      	ldr	r3, [pc, #712]	; (8002dec <Start_Data_Reading+0x524>)
 8002b24:	ed93 7a00 	vldr	s14, [r3]
 8002b28:	4bad      	ldr	r3, [pc, #692]	; (8002de0 <Start_Data_Reading+0x518>)
 8002b2a:	edd3 7a00 	vldr	s15, [r3]
 8002b2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b32:	4bae      	ldr	r3, [pc, #696]	; (8002dec <Start_Data_Reading+0x524>)
 8002b34:	edc3 7a00 	vstr	s15, [r3]
	  }
	  BMI088_ReadGyroscope(&imu);
 8002b38:	48ad      	ldr	r0, [pc, #692]	; (8002df0 <Start_Data_Reading+0x528>)
 8002b3a:	f002 fc9f 	bl	800547c <BMI088_ReadGyroscope>
	  gyro_offset_x_calc += imu.gyr_rps[0];
 8002b3e:	4bac      	ldr	r3, [pc, #688]	; (8002df0 <Start_Data_Reading+0x528>)
 8002b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b42:	4618      	mov	r0, r3
 8002b44:	f7fd fd00 	bl	8000548 <__aeabi_f2d>
 8002b48:	4baa      	ldr	r3, [pc, #680]	; (8002df4 <Start_Data_Reading+0x52c>)
 8002b4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b4e:	f7fd fb9d 	bl	800028c <__adddf3>
 8002b52:	4602      	mov	r2, r0
 8002b54:	460b      	mov	r3, r1
 8002b56:	49a7      	ldr	r1, [pc, #668]	; (8002df4 <Start_Data_Reading+0x52c>)
 8002b58:	e9c1 2300 	strd	r2, r3, [r1]
	  gyro_offset_y_calc += imu.gyr_rps[1];
 8002b5c:	4ba4      	ldr	r3, [pc, #656]	; (8002df0 <Start_Data_Reading+0x528>)
 8002b5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b60:	4618      	mov	r0, r3
 8002b62:	f7fd fcf1 	bl	8000548 <__aeabi_f2d>
 8002b66:	4ba4      	ldr	r3, [pc, #656]	; (8002df8 <Start_Data_Reading+0x530>)
 8002b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b6c:	f7fd fb8e 	bl	800028c <__adddf3>
 8002b70:	4602      	mov	r2, r0
 8002b72:	460b      	mov	r3, r1
 8002b74:	49a0      	ldr	r1, [pc, #640]	; (8002df8 <Start_Data_Reading+0x530>)
 8002b76:	e9c1 2300 	strd	r2, r3, [r1]
	  gyro_offset_z_calc += imu.gyr_rps[2];
 8002b7a:	4b9d      	ldr	r3, [pc, #628]	; (8002df0 <Start_Data_Reading+0x528>)
 8002b7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f7fd fce2 	bl	8000548 <__aeabi_f2d>
 8002b84:	4b9d      	ldr	r3, [pc, #628]	; (8002dfc <Start_Data_Reading+0x534>)
 8002b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b8a:	f7fd fb7f 	bl	800028c <__adddf3>
 8002b8e:	4602      	mov	r2, r0
 8002b90:	460b      	mov	r3, r1
 8002b92:	499a      	ldr	r1, [pc, #616]	; (8002dfc <Start_Data_Reading+0x534>)
 8002b94:	e9c1 2300 	strd	r2, r3, [r1]
	  osDelay(5);
 8002b98:	2005      	movs	r0, #5
 8002b9a:	f00c f842 	bl	800ec22 <osDelay>
	for(int i_init = 0; i_init<2000; i_init++ ){
 8002b9e:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8002ba2:	3301      	adds	r3, #1
 8002ba4:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002ba8:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8002bac:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002bb0:	db86      	blt.n	8002ac0 <Start_Data_Reading+0x1f8>
	}
	h0 /= 400;
 8002bb2:	4b8d      	ldr	r3, [pc, #564]	; (8002de8 <Start_Data_Reading+0x520>)
 8002bb4:	ed93 7a00 	vldr	s14, [r3]
 8002bb8:	eddf 6a91 	vldr	s13, [pc, #580]	; 8002e00 <Start_Data_Reading+0x538>
 8002bbc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002bc0:	4b89      	ldr	r3, [pc, #548]	; (8002de8 <Start_Data_Reading+0x520>)
 8002bc2:	edc3 7a00 	vstr	s15, [r3]
	p0 /= 400;
 8002bc6:	4b89      	ldr	r3, [pc, #548]	; (8002dec <Start_Data_Reading+0x524>)
 8002bc8:	ed93 7a00 	vldr	s14, [r3]
 8002bcc:	eddf 6a8c 	vldr	s13, [pc, #560]	; 8002e00 <Start_Data_Reading+0x538>
 8002bd0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002bd4:	4b85      	ldr	r3, [pc, #532]	; (8002dec <Start_Data_Reading+0x524>)
 8002bd6:	edc3 7a00 	vstr	s15, [r3]
	p0 -= ground_pressure;
 8002bda:	4b84      	ldr	r3, [pc, #528]	; (8002dec <Start_Data_Reading+0x524>)
 8002bdc:	edd3 7a00 	vldr	s15, [r3]
 8002be0:	ed9f 7a80 	vldr	s14, [pc, #512]	; 8002de4 <Start_Data_Reading+0x51c>
 8002be4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002be8:	4b80      	ldr	r3, [pc, #512]	; (8002dec <Start_Data_Reading+0x524>)
 8002bea:	edc3 7a00 	vstr	s15, [r3]
	gyro_offset_x = gyro_offset_x_calc/2000;
 8002bee:	4b81      	ldr	r3, [pc, #516]	; (8002df4 <Start_Data_Reading+0x52c>)
 8002bf0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002bf4:	f04f 0200 	mov.w	r2, #0
 8002bf8:	4b82      	ldr	r3, [pc, #520]	; (8002e04 <Start_Data_Reading+0x53c>)
 8002bfa:	f7fd fe27 	bl	800084c <__aeabi_ddiv>
 8002bfe:	4602      	mov	r2, r0
 8002c00:	460b      	mov	r3, r1
 8002c02:	4981      	ldr	r1, [pc, #516]	; (8002e08 <Start_Data_Reading+0x540>)
 8002c04:	e9c1 2300 	strd	r2, r3, [r1]
	gyro_offset_y = gyro_offset_y_calc/2000;
 8002c08:	4b7b      	ldr	r3, [pc, #492]	; (8002df8 <Start_Data_Reading+0x530>)
 8002c0a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002c0e:	f04f 0200 	mov.w	r2, #0
 8002c12:	4b7c      	ldr	r3, [pc, #496]	; (8002e04 <Start_Data_Reading+0x53c>)
 8002c14:	f7fd fe1a 	bl	800084c <__aeabi_ddiv>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	460b      	mov	r3, r1
 8002c1c:	497b      	ldr	r1, [pc, #492]	; (8002e0c <Start_Data_Reading+0x544>)
 8002c1e:	e9c1 2300 	strd	r2, r3, [r1]
	gyro_offset_z = gyro_offset_z_calc/2000;
 8002c22:	4b76      	ldr	r3, [pc, #472]	; (8002dfc <Start_Data_Reading+0x534>)
 8002c24:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002c28:	f04f 0200 	mov.w	r2, #0
 8002c2c:	4b75      	ldr	r3, [pc, #468]	; (8002e04 <Start_Data_Reading+0x53c>)
 8002c2e:	f7fd fe0d 	bl	800084c <__aeabi_ddiv>
 8002c32:	4602      	mov	r2, r0
 8002c34:	460b      	mov	r3, r1
 8002c36:	4976      	ldr	r1, [pc, #472]	; (8002e10 <Start_Data_Reading+0x548>)
 8002c38:	e9c1 2300 	strd	r2, r3, [r1]
	struct bmm150_settings settings;

	/* Status of api are returned to this variable */
	int8_t rslt;

	rslt = bmm150_interface_selection(&dev);
 8002c3c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002c40:	4618      	mov	r0, r3
 8002c42:	f00b ff19 	bl	800ea78 <bmm150_interface_selection>
 8002c46:	4603      	mov	r3, r0
 8002c48:	f887 314f 	strb.w	r3, [r7, #335]	; 0x14f
	bmm150_error_codes_print_result("bmm150_interface_selection", rslt);
 8002c4c:	f997 314f 	ldrsb.w	r3, [r7, #335]	; 0x14f
 8002c50:	4619      	mov	r1, r3
 8002c52:	4870      	ldr	r0, [pc, #448]	; (8002e14 <Start_Data_Reading+0x54c>)
 8002c54:	f00b ff56 	bl	800eb04 <bmm150_error_codes_print_result>

	if (rslt == BMM150_OK) {
 8002c58:	f997 314f 	ldrsb.w	r3, [r7, #335]	; 0x14f
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d11f      	bne.n	8002ca0 <Start_Data_Reading+0x3d8>
	        rslt = bmm150_init(&dev);
 8002c60:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002c64:	4618      	mov	r0, r3
 8002c66:	f00a fe8a 	bl	800d97e <bmm150_init>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	f887 314f 	strb.w	r3, [r7, #335]	; 0x14f
	        bmm150_error_codes_print_result("bmm150_init", rslt);
 8002c70:	f997 314f 	ldrsb.w	r3, [r7, #335]	; 0x14f
 8002c74:	4619      	mov	r1, r3
 8002c76:	4868      	ldr	r0, [pc, #416]	; (8002e18 <Start_Data_Reading+0x550>)
 8002c78:	f00b ff44 	bl	800eb04 <bmm150_error_codes_print_result>

	        if (rslt == BMM150_OK) {
 8002c7c:	f997 314f 	ldrsb.w	r3, [r7, #335]	; 0x14f
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d10d      	bne.n	8002ca0 <Start_Data_Reading+0x3d8>
	            rslt = set_config(&dev);
 8002c84:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f7ff fafb 	bl	8002284 <set_config>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	f887 314f 	strb.w	r3, [r7, #335]	; 0x14f
	            bmm150_error_codes_print_result("set_config", rslt);
 8002c94:	f997 314f 	ldrsb.w	r3, [r7, #335]	; 0x14f
 8002c98:	4619      	mov	r1, r3
 8002c9a:	4860      	ldr	r0, [pc, #384]	; (8002e1c <Start_Data_Reading+0x554>)
 8002c9c:	f00b ff32 	bl	800eb04 <bmm150_error_codes_print_result>
	uint8_t transmit_data[40];
	float telemetria_float[3];



	q.SEq_1=1;
 8002ca0:	4b5f      	ldr	r3, [pc, #380]	; (8002e20 <Start_Data_Reading+0x558>)
 8002ca2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002ca6:	601a      	str	r2, [r3, #0]
	q.SEq_2=0;
 8002ca8:	4b5d      	ldr	r3, [pc, #372]	; (8002e20 <Start_Data_Reading+0x558>)
 8002caa:	f04f 0200 	mov.w	r2, #0
 8002cae:	605a      	str	r2, [r3, #4]
	q.SEq_3=0;
 8002cb0:	4b5b      	ldr	r3, [pc, #364]	; (8002e20 <Start_Data_Reading+0x558>)
 8002cb2:	f04f 0200 	mov.w	r2, #0
 8002cb6:	609a      	str	r2, [r3, #8]
	q.SEq_4=0;
 8002cb8:	4b59      	ldr	r3, [pc, #356]	; (8002e20 <Start_Data_Reading+0x558>)
 8002cba:	f04f 0200 	mov.w	r2, #0
 8002cbe:	60da      	str	r2, [r3, #12]

	w.w_bx=0;
 8002cc0:	4b58      	ldr	r3, [pc, #352]	; (8002e24 <Start_Data_Reading+0x55c>)
 8002cc2:	f04f 0200 	mov.w	r2, #0
 8002cc6:	601a      	str	r2, [r3, #0]
	w.w_by=0;
 8002cc8:	4b56      	ldr	r3, [pc, #344]	; (8002e24 <Start_Data_Reading+0x55c>)
 8002cca:	f04f 0200 	mov.w	r2, #0
 8002cce:	605a      	str	r2, [r3, #4]
	w.w_bz=0;
 8002cd0:	4b54      	ldr	r3, [pc, #336]	; (8002e24 <Start_Data_Reading+0x55c>)
 8002cd2:	f04f 0200 	mov.w	r2, #0
 8002cd6:	609a      	str	r2, [r3, #8]
//	P_prev.a32 = 0;
//	P_prev.a33 = 0;
//	meas.a11=0;
//	meas.a21=0;

	HAL_TIM_Base_Start_IT(&htim6);
 8002cd8:	4853      	ldr	r0, [pc, #332]	; (8002e28 <Start_Data_Reading+0x560>)
 8002cda:	f006 fdc7 	bl	800986c <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim7);
 8002cde:	4853      	ldr	r0, [pc, #332]	; (8002e2c <Start_Data_Reading+0x564>)
 8002ce0:	f006 fdc4 	bl	800986c <HAL_TIM_Base_Start_IT>
	FusionAhrsInitialise(&ahrs);
 8002ce4:	4852      	ldr	r0, [pc, #328]	; (8002e30 <Start_Data_Reading+0x568>)
 8002ce6:	f009 fec9 	bl	800ca7c <FusionAhrsInitialise>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8002cea:	2200      	movs	r2, #0
 8002cec:	2108      	movs	r1, #8
 8002cee:	4851      	ldr	r0, [pc, #324]	; (8002e34 <Start_Data_Reading+0x56c>)
 8002cf0:	f004 faf2 	bl	80072d8 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8002cf4:	2064      	movs	r0, #100	; 0x64
 8002cf6:	f003 f9b9 	bl	800606c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	2108      	movs	r1, #8
 8002cfe:	484d      	ldr	r0, [pc, #308]	; (8002e34 <Start_Data_Reading+0x56c>)
 8002d00:	f004 faea 	bl	80072d8 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8002d04:	2064      	movs	r0, #100	; 0x64
 8002d06:	f003 f9b1 	bl	800606c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	2108      	movs	r1, #8
 8002d0e:	4849      	ldr	r0, [pc, #292]	; (8002e34 <Start_Data_Reading+0x56c>)
 8002d10:	f004 fae2 	bl	80072d8 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8002d14:	2064      	movs	r0, #100	; 0x64
 8002d16:	f003 f9a9 	bl	800606c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	2108      	movs	r1, #8
 8002d1e:	4845      	ldr	r0, [pc, #276]	; (8002e34 <Start_Data_Reading+0x56c>)
 8002d20:	f004 fada 	bl	80072d8 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8002d24:	2064      	movs	r0, #100	; 0x64
 8002d26:	f003 f9a1 	bl	800606c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	2108      	movs	r1, #8
 8002d2e:	4841      	ldr	r0, [pc, #260]	; (8002e34 <Start_Data_Reading+0x56c>)
 8002d30:	f004 fad2 	bl	80072d8 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8002d34:	2064      	movs	r0, #100	; 0x64
 8002d36:	f003 f999 	bl	800606c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	2108      	movs	r1, #8
 8002d3e:	483d      	ldr	r0, [pc, #244]	; (8002e34 <Start_Data_Reading+0x56c>)
 8002d40:	f004 faca 	bl	80072d8 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8002d44:	2064      	movs	r0, #100	; 0x64
 8002d46:	f003 f991 	bl	800606c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	2108      	movs	r1, #8
 8002d4e:	4839      	ldr	r0, [pc, #228]	; (8002e34 <Start_Data_Reading+0x56c>)
 8002d50:	f004 fac2 	bl	80072d8 <HAL_GPIO_WritePin>

	HAL_UART_Receive_DMA(&huart1, UART1_rxBuffer, bytetoread);
 8002d54:	4b38      	ldr	r3, [pc, #224]	; (8002e38 <Start_Data_Reading+0x570>)
 8002d56:	781b      	ldrb	r3, [r3, #0]
 8002d58:	b29b      	uxth	r3, r3
 8002d5a:	461a      	mov	r2, r3
 8002d5c:	4937      	ldr	r1, [pc, #220]	; (8002e3c <Start_Data_Reading+0x574>)
 8002d5e:	4838      	ldr	r0, [pc, #224]	; (8002e40 <Start_Data_Reading+0x578>)
 8002d60:	f008 f960 	bl	800b024 <HAL_UART_Receive_DMA>
	HAL_UART_Transmit_IT(&huart2, transmit_data, sizeof (transmit_data));
 8002d64:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002d68:	2228      	movs	r2, #40	; 0x28
 8002d6a:	4619      	mov	r1, r3
 8002d6c:	4835      	ldr	r0, [pc, #212]	; (8002e44 <Start_Data_Reading+0x57c>)
 8002d6e:	f008 f8e4 	bl	800af3a <HAL_UART_Transmit_IT>
//	HAL_UART_Receive_IT(&huart2, telem, 11);


	vTaskResume( defaultTaskHandle );
 8002d72:	4b35      	ldr	r3, [pc, #212]	; (8002e48 <Start_Data_Reading+0x580>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4618      	mov	r0, r3
 8002d78:	f00c fdc6 	bl	800f908 <vTaskResume>
  /* Infinite loop */
  for(;;)
  {


	  	  htim7.Instance->CNT = 0;
 8002d7c:	4b2b      	ldr	r3, [pc, #172]	; (8002e2c <Start_Data_Reading+0x564>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	2200      	movs	r2, #0
 8002d82:	625a      	str	r2, [r3, #36]	; 0x24

	  	  //BOSCH API magneto end

	  	  //BOSCH API FORCED MAGNETO START

	  	  bmm150_read_mag_data(&mag_data, &dev);
 8002d84:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8002d88:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002d8c:	4611      	mov	r1, r2
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f00a ffd5 	bl	800dd3e <bmm150_read_mag_data>

	  	  settings.pwr_mode = BMM150_POWERMODE_FORCED;
 8002d94:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8002d98:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	705a      	strb	r2, [r3, #1]
	  	  rslt = bmm150_set_op_mode(&settings, &dev);
 8002da0:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8002da4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002da8:	4611      	mov	r1, r2
 8002daa:	4618      	mov	r0, r3
 8002dac:	f00a fe7a 	bl	800daa4 <bmm150_set_op_mode>
 8002db0:	4603      	mov	r3, r0
 8002db2:	f887 314f 	strb.w	r3, [r7, #335]	; 0x14f
	  	  bmm150_error_codes_print_result("bmm150_set_op_mode", rslt);
 8002db6:	f997 314f 	ldrsb.w	r3, [r7, #335]	; 0x14f
 8002dba:	4619      	mov	r1, r3
 8002dbc:	4823      	ldr	r0, [pc, #140]	; (8002e4c <Start_Data_Reading+0x584>)
 8002dbe:	f00b fea1 	bl	800eb04 <bmm150_error_codes_print_result>

		  // magnetic field data in uT
//		  mag_data_x = BMM150_Compensate_x(field_x, Rhall,  &trim_data); //magn data compensation 33.4 us
//		  mag_data_y = BMM150_Compensate_y(field_y, Rhall,  &trim_data);
//		  mag_data_z = BMM150_Compensate_z(field_z, Rhall,  &trim_data);
		  magneto_data.axis.x = mag_data.y;
 8002dc2:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8002dc6:	e043      	b.n	8002e50 <Start_Data_Reading+0x588>
 8002dc8:	66666667 	.word	0x66666667
 8002dcc:	20000ab4 	.word	0x20000ab4
 8002dd0:	20000ab0 	.word	0x20000ab0
 8002dd4:	20000aac 	.word	0x20000aac
 8002dd8:	20000a60 	.word	0x20000a60
 8002ddc:	20000abc 	.word	0x20000abc
 8002de0:	20000ab8 	.word	0x20000ab8
 8002de4:	47c5e680 	.word	0x47c5e680
 8002de8:	20000ac4 	.word	0x20000ac4
 8002dec:	20000ac8 	.word	0x20000ac8
 8002df0:	20000a10 	.word	0x20000a10
 8002df4:	20000c08 	.word	0x20000c08
 8002df8:	20000c10 	.word	0x20000c10
 8002dfc:	20000c18 	.word	0x20000c18
 8002e00:	43c80000 	.word	0x43c80000
 8002e04:	409f4000 	.word	0x409f4000
 8002e08:	20000c20 	.word	0x20000c20
 8002e0c:	20000c28 	.word	0x20000c28
 8002e10:	20000c30 	.word	0x20000c30
 8002e14:	08015fcc 	.word	0x08015fcc
 8002e18:	08015fe8 	.word	0x08015fe8
 8002e1c:	08015ff4 	.word	0x08015ff4
 8002e20:	20000ad8 	.word	0x20000ad8
 8002e24:	20000ae8 	.word	0x20000ae8
 8002e28:	200007bc 	.word	0x200007bc
 8002e2c:	20000804 	.word	0x20000804
 8002e30:	20000af8 	.word	0x20000af8
 8002e34:	40020400 	.word	0x40020400
 8002e38:	2000000a 	.word	0x2000000a
 8002e3c:	20002bc8 	.word	0x20002bc8
 8002e40:	20000894 	.word	0x20000894
 8002e44:	200008d8 	.word	0x200008d8
 8002e48:	20000a04 	.word	0x20000a04
 8002e4c:	08015f48 	.word	0x08015f48
 8002e50:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002e54:	685a      	ldr	r2, [r3, #4]
 8002e56:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8002e5a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002e5e:	601a      	str	r2, [r3, #0]
		  magneto_data.axis.y = -mag_data.x;
 8002e60:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8002e64:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002e68:	edd3 7a00 	vldr	s15, [r3]
 8002e6c:	eef1 7a67 	vneg.f32	s15, s15
 8002e70:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8002e74:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002e78:	edc3 7a01 	vstr	s15, [r3, #4]
		  magneto_data.axis.z = mag_data.z;
 8002e7c:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8002e80:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002e84:	689a      	ldr	r2, [r3, #8]
 8002e86:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8002e8a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002e8e:	609a      	str	r2, [r3, #8]

		  if(i_mag < 1000){
 8002e90:	4bc9      	ldr	r3, [pc, #804]	; (80031b8 <Start_Data_Reading+0x8f0>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e98:	da14      	bge.n	8002ec4 <Start_Data_Reading+0x5fc>
			  mag_debug_x[i_mag] = mag_data_x;
 8002e9a:	4bc7      	ldr	r3, [pc, #796]	; (80031b8 <Start_Data_Reading+0x8f0>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4ac7      	ldr	r2, [pc, #796]	; (80031bc <Start_Data_Reading+0x8f4>)
 8002ea0:	6812      	ldr	r2, [r2, #0]
 8002ea2:	49c7      	ldr	r1, [pc, #796]	; (80031c0 <Start_Data_Reading+0x8f8>)
 8002ea4:	009b      	lsls	r3, r3, #2
 8002ea6:	440b      	add	r3, r1
 8002ea8:	601a      	str	r2, [r3, #0]
			  mag_debug_y[i_mag] = mag_data_y;
 8002eaa:	4bc3      	ldr	r3, [pc, #780]	; (80031b8 <Start_Data_Reading+0x8f0>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4ac5      	ldr	r2, [pc, #788]	; (80031c4 <Start_Data_Reading+0x8fc>)
 8002eb0:	6812      	ldr	r2, [r2, #0]
 8002eb2:	49c5      	ldr	r1, [pc, #788]	; (80031c8 <Start_Data_Reading+0x900>)
 8002eb4:	009b      	lsls	r3, r3, #2
 8002eb6:	440b      	add	r3, r1
 8002eb8:	601a      	str	r2, [r3, #0]
			  i_mag++;
 8002eba:	4bbf      	ldr	r3, [pc, #764]	; (80031b8 <Start_Data_Reading+0x8f0>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	3301      	adds	r3, #1
 8002ec0:	4abd      	ldr	r2, [pc, #756]	; (80031b8 <Start_Data_Reading+0x8f0>)
 8002ec2:	6013      	str	r3, [r2, #0]
		  }

		  //read IMU
		  BMI088_ReadGyroscope(&imu);	// imu read 119 us
 8002ec4:	48c1      	ldr	r0, [pc, #772]	; (80031cc <Start_Data_Reading+0x904>)
 8002ec6:	f002 fad9 	bl	800547c <BMI088_ReadGyroscope>
		  BMI088_ReadAccelerometer(&imu);
 8002eca:	48c0      	ldr	r0, [pc, #768]	; (80031cc <Start_Data_Reading+0x904>)
 8002ecc:	f002 fa62 	bl	8005394 <BMI088_ReadAccelerometer>


		  BMP388_ReadRawPressTempTime(&bmp, &raw_press, &raw_temp, &raw_time); //2.46 ms - 400kHz
 8002ed0:	4bbf      	ldr	r3, [pc, #764]	; (80031d0 <Start_Data_Reading+0x908>)
 8002ed2:	4ac0      	ldr	r2, [pc, #768]	; (80031d4 <Start_Data_Reading+0x90c>)
 8002ed4:	49c0      	ldr	r1, [pc, #768]	; (80031d8 <Start_Data_Reading+0x910>)
 8002ed6:	48c1      	ldr	r0, [pc, #772]	; (80031dc <Start_Data_Reading+0x914>)
 8002ed8:	f002 fc2e 	bl	8005738 <BMP388_ReadRawPressTempTime>


		  BMP388_CompensateRawPressTemp(&bmp, raw_press, raw_temp, &press, &temp); //2.7 us
 8002edc:	4bbe      	ldr	r3, [pc, #760]	; (80031d8 <Start_Data_Reading+0x910>)
 8002ede:	6819      	ldr	r1, [r3, #0]
 8002ee0:	4bbc      	ldr	r3, [pc, #752]	; (80031d4 <Start_Data_Reading+0x90c>)
 8002ee2:	681a      	ldr	r2, [r3, #0]
 8002ee4:	4bbe      	ldr	r3, [pc, #760]	; (80031e0 <Start_Data_Reading+0x918>)
 8002ee6:	9300      	str	r3, [sp, #0]
 8002ee8:	4bbe      	ldr	r3, [pc, #760]	; (80031e4 <Start_Data_Reading+0x91c>)
 8002eea:	48bc      	ldr	r0, [pc, #752]	; (80031dc <Start_Data_Reading+0x914>)
 8002eec:	f002 fc50 	bl	8005790 <BMP388_CompensateRawPressTemp>
		  //full loop time 2.94 ms, without time read 2.48 ms
//		  hz = BMP388_FindAltitude(ground_pressure, press)-h0;
		  hz = BMP388_FindAltitude(ground_pressure, press-p0);
 8002ef0:	4bbc      	ldr	r3, [pc, #752]	; (80031e4 <Start_Data_Reading+0x91c>)
 8002ef2:	ed93 7a00 	vldr	s14, [r3]
 8002ef6:	4bbc      	ldr	r3, [pc, #752]	; (80031e8 <Start_Data_Reading+0x920>)
 8002ef8:	edd3 7a00 	vldr	s15, [r3]
 8002efc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f00:	eef0 0a67 	vmov.f32	s1, s15
 8002f04:	ed9f 0ab9 	vldr	s0, [pc, #740]	; 80031ec <Start_Data_Reading+0x924>
 8002f08:	f002 fc66 	bl	80057d8 <BMP388_FindAltitude>
 8002f0c:	eef0 7a40 	vmov.f32	s15, s0
 8002f10:	4bb7      	ldr	r3, [pc, #732]	; (80031f0 <Start_Data_Reading+0x928>)
 8002f12:	edc3 7a00 	vstr	s15, [r3]
		  //filterUpdate((imu.gyr_rps[0]-gyro_offset_x), (imu.gyr_rps[1]-gyro_offset_y), imu.gyr_rps[2], imu.acc_mps2[0], imu.acc_mps2[1], (imu.gyr_rps[2]-gyro_offset_z), mag_data_y, -mag_data_x, mag_data_z, &q, &f, &w);


		  //eulerAngles(q, &roll, &pitch, &yaw);

		  gyro_x_degree = ((imu.gyr_rps[0]-gyro_offset_x)*57.29);
 8002f16:	4bad      	ldr	r3, [pc, #692]	; (80031cc <Start_Data_Reading+0x904>)
 8002f18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f7fd fb14 	bl	8000548 <__aeabi_f2d>
 8002f20:	4bb4      	ldr	r3, [pc, #720]	; (80031f4 <Start_Data_Reading+0x92c>)
 8002f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f26:	f7fd f9af 	bl	8000288 <__aeabi_dsub>
 8002f2a:	4602      	mov	r2, r0
 8002f2c:	460b      	mov	r3, r1
 8002f2e:	4610      	mov	r0, r2
 8002f30:	4619      	mov	r1, r3
 8002f32:	a39d      	add	r3, pc, #628	; (adr r3, 80031a8 <Start_Data_Reading+0x8e0>)
 8002f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f38:	f7fd fb5e 	bl	80005f8 <__aeabi_dmul>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	460b      	mov	r3, r1
 8002f40:	4610      	mov	r0, r2
 8002f42:	4619      	mov	r1, r3
 8002f44:	f7fd fe50 	bl	8000be8 <__aeabi_d2f>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	4aab      	ldr	r2, [pc, #684]	; (80031f8 <Start_Data_Reading+0x930>)
 8002f4c:	6013      	str	r3, [r2, #0]
		  gyro_y_degree = ((imu.gyr_rps[1]-gyro_offset_x)*57.29);
 8002f4e:	4b9f      	ldr	r3, [pc, #636]	; (80031cc <Start_Data_Reading+0x904>)
 8002f50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f52:	4618      	mov	r0, r3
 8002f54:	f7fd faf8 	bl	8000548 <__aeabi_f2d>
 8002f58:	4ba6      	ldr	r3, [pc, #664]	; (80031f4 <Start_Data_Reading+0x92c>)
 8002f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f5e:	f7fd f993 	bl	8000288 <__aeabi_dsub>
 8002f62:	4602      	mov	r2, r0
 8002f64:	460b      	mov	r3, r1
 8002f66:	4610      	mov	r0, r2
 8002f68:	4619      	mov	r1, r3
 8002f6a:	a38f      	add	r3, pc, #572	; (adr r3, 80031a8 <Start_Data_Reading+0x8e0>)
 8002f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f70:	f7fd fb42 	bl	80005f8 <__aeabi_dmul>
 8002f74:	4602      	mov	r2, r0
 8002f76:	460b      	mov	r3, r1
 8002f78:	4610      	mov	r0, r2
 8002f7a:	4619      	mov	r1, r3
 8002f7c:	f7fd fe34 	bl	8000be8 <__aeabi_d2f>
 8002f80:	4603      	mov	r3, r0
 8002f82:	4a9e      	ldr	r2, [pc, #632]	; (80031fc <Start_Data_Reading+0x934>)
 8002f84:	6013      	str	r3, [r2, #0]
		  gyro_z_degree = ((imu.gyr_rps[2]-gyro_offset_x)*57.29);
 8002f86:	4b91      	ldr	r3, [pc, #580]	; (80031cc <Start_Data_Reading+0x904>)
 8002f88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f7fd fadc 	bl	8000548 <__aeabi_f2d>
 8002f90:	4b98      	ldr	r3, [pc, #608]	; (80031f4 <Start_Data_Reading+0x92c>)
 8002f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f96:	f7fd f977 	bl	8000288 <__aeabi_dsub>
 8002f9a:	4602      	mov	r2, r0
 8002f9c:	460b      	mov	r3, r1
 8002f9e:	4610      	mov	r0, r2
 8002fa0:	4619      	mov	r1, r3
 8002fa2:	a381      	add	r3, pc, #516	; (adr r3, 80031a8 <Start_Data_Reading+0x8e0>)
 8002fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fa8:	f7fd fb26 	bl	80005f8 <__aeabi_dmul>
 8002fac:	4602      	mov	r2, r0
 8002fae:	460b      	mov	r3, r1
 8002fb0:	4610      	mov	r0, r2
 8002fb2:	4619      	mov	r1, r3
 8002fb4:	f7fd fe18 	bl	8000be8 <__aeabi_d2f>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	4a91      	ldr	r2, [pc, #580]	; (8003200 <Start_Data_Reading+0x938>)
 8002fbc:	6013      	str	r3, [r2, #0]


//		  magneto_data = FusionVectorSubtract(magneto_data, magneto_offset);
		  magneto_data = FusionMatrixMultiplyVector(magneto_transform, FusionVectorSubtract(magneto_data, magneto_offset));
 8002fbe:	ed97 5a42 	vldr	s10, [r7, #264]	; 0x108
 8002fc2:	edd7 5a43 	vldr	s11, [r7, #268]	; 0x10c
 8002fc6:	ed97 6a44 	vldr	s12, [r7, #272]	; 0x110
 8002fca:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8002fce:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002fd2:	edd3 6a00 	vldr	s13, [r3]
 8002fd6:	ed93 7a01 	vldr	s14, [r3, #4]
 8002fda:	edd3 7a02 	vldr	s15, [r3, #8]
 8002fde:	eef0 1a45 	vmov.f32	s3, s10
 8002fe2:	eeb0 2a65 	vmov.f32	s4, s11
 8002fe6:	eef0 2a46 	vmov.f32	s5, s12
 8002fea:	eeb0 0a66 	vmov.f32	s0, s13
 8002fee:	eef0 0a47 	vmov.f32	s1, s14
 8002ff2:	eeb0 1a67 	vmov.f32	s2, s15
 8002ff6:	f7fe f823 	bl	8001040 <FusionVectorSubtract>
 8002ffa:	eef0 6a40 	vmov.f32	s13, s0
 8002ffe:	eeb0 7a60 	vmov.f32	s14, s1
 8003002:	eef0 7a41 	vmov.f32	s15, s2
 8003006:	edc7 6a45 	vstr	s13, [r7, #276]	; 0x114
 800300a:	ed87 7a46 	vstr	s14, [r7, #280]	; 0x118
 800300e:	edc7 7a47 	vstr	s15, [r7, #284]	; 0x11c
 8003012:	edd7 6a45 	vldr	s13, [r7, #276]	; 0x114
 8003016:	ed97 7a46 	vldr	s14, [r7, #280]	; 0x118
 800301a:	edd7 7a47 	vldr	s15, [r7, #284]	; 0x11c
 800301e:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8003022:	f5a3 7686 	sub.w	r6, r3, #268	; 0x10c
 8003026:	466d      	mov	r5, sp
 8003028:	f106 0410 	add.w	r4, r6, #16
 800302c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800302e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003030:	6823      	ldr	r3, [r4, #0]
 8003032:	602b      	str	r3, [r5, #0]
 8003034:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8003038:	eeb0 0a66 	vmov.f32	s0, s13
 800303c:	eef0 0a47 	vmov.f32	s1, s14
 8003040:	eeb0 1a67 	vmov.f32	s2, s15
 8003044:	f7fe f88e 	bl	8001164 <FusionMatrixMultiplyVector>
 8003048:	eef0 6a40 	vmov.f32	s13, s0
 800304c:	eeb0 7a60 	vmov.f32	s14, s1
 8003050:	eef0 7a41 	vmov.f32	s15, s2
 8003054:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8003058:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800305c:	edc3 6a00 	vstr	s13, [r3]
 8003060:	ed83 7a01 	vstr	s14, [r3, #4]
 8003064:	edc3 7a02 	vstr	s15, [r3, #8]

		  const FusionVector gyroscope = {gyro_x_degree, gyro_y_degree, gyro_z_degree};
 8003068:	4b63      	ldr	r3, [pc, #396]	; (80031f8 <Start_Data_Reading+0x930>)
 800306a:	681a      	ldr	r2, [r3, #0]
 800306c:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8003070:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 8003074:	601a      	str	r2, [r3, #0]
 8003076:	4b61      	ldr	r3, [pc, #388]	; (80031fc <Start_Data_Reading+0x934>)
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 800307e:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 8003082:	605a      	str	r2, [r3, #4]
 8003084:	4b5e      	ldr	r3, [pc, #376]	; (8003200 <Start_Data_Reading+0x938>)
 8003086:	681a      	ldr	r2, [r3, #0]
 8003088:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 800308c:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 8003090:	609a      	str	r2, [r3, #8]
		  const FusionVector accelerometer = {imu.acc_mps2[0]/9.81, imu.acc_mps2[1]/9.81, imu.acc_mps2[2]/9.81};
 8003092:	4b4e      	ldr	r3, [pc, #312]	; (80031cc <Start_Data_Reading+0x904>)
 8003094:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003096:	4618      	mov	r0, r3
 8003098:	f7fd fa56 	bl	8000548 <__aeabi_f2d>
 800309c:	a344      	add	r3, pc, #272	; (adr r3, 80031b0 <Start_Data_Reading+0x8e8>)
 800309e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030a2:	f7fd fbd3 	bl	800084c <__aeabi_ddiv>
 80030a6:	4602      	mov	r2, r0
 80030a8:	460b      	mov	r3, r1
 80030aa:	4610      	mov	r0, r2
 80030ac:	4619      	mov	r1, r3
 80030ae:	f7fd fd9b 	bl	8000be8 <__aeabi_d2f>
 80030b2:	4602      	mov	r2, r0
 80030b4:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 80030b8:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80030bc:	601a      	str	r2, [r3, #0]
 80030be:	4b43      	ldr	r3, [pc, #268]	; (80031cc <Start_Data_Reading+0x904>)
 80030c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030c2:	4618      	mov	r0, r3
 80030c4:	f7fd fa40 	bl	8000548 <__aeabi_f2d>
 80030c8:	a339      	add	r3, pc, #228	; (adr r3, 80031b0 <Start_Data_Reading+0x8e8>)
 80030ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030ce:	f7fd fbbd 	bl	800084c <__aeabi_ddiv>
 80030d2:	4602      	mov	r2, r0
 80030d4:	460b      	mov	r3, r1
 80030d6:	4610      	mov	r0, r2
 80030d8:	4619      	mov	r1, r3
 80030da:	f7fd fd85 	bl	8000be8 <__aeabi_d2f>
 80030de:	4602      	mov	r2, r0
 80030e0:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 80030e4:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80030e8:	605a      	str	r2, [r3, #4]
 80030ea:	4b38      	ldr	r3, [pc, #224]	; (80031cc <Start_Data_Reading+0x904>)
 80030ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ee:	4618      	mov	r0, r3
 80030f0:	f7fd fa2a 	bl	8000548 <__aeabi_f2d>
 80030f4:	a32e      	add	r3, pc, #184	; (adr r3, 80031b0 <Start_Data_Reading+0x8e8>)
 80030f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030fa:	f7fd fba7 	bl	800084c <__aeabi_ddiv>
 80030fe:	4602      	mov	r2, r0
 8003100:	460b      	mov	r3, r1
 8003102:	4610      	mov	r0, r2
 8003104:	4619      	mov	r1, r3
 8003106:	f7fd fd6f 	bl	8000be8 <__aeabi_d2f>
 800310a:	4602      	mov	r2, r0
 800310c:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8003110:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003114:	609a      	str	r2, [r3, #8]
		  const FusionVector magnetometer = {magneto_data.axis.x, magneto_data.axis.y, magneto_data.axis.z};
 8003116:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 800311a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800311e:	681a      	ldr	r2, [r3, #0]
 8003120:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8003124:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003128:	601a      	str	r2, [r3, #0]
 800312a:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 800312e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003132:	685a      	ldr	r2, [r3, #4]
 8003134:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8003138:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800313c:	605a      	str	r2, [r3, #4]
 800313e:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8003142:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003146:	689a      	ldr	r2, [r3, #8]
 8003148:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 800314c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003150:	609a      	str	r2, [r3, #8]

		  //no magnetometer AHRS
//		  FusionAhrsUpdateNoMagnetometer(&ahrs, gyroscope, accelerometer, SAMPLE_PERIOD);

		  //magnetometer AHRS
		  FusionAhrsUpdate(&ahrs, gyroscope, accelerometer, magnetometer, SAMPLE_PERIOD);
 8003152:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8003156:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800315a:	ed93 3a00 	vldr	s6, [r3]
 800315e:	edd3 3a01 	vldr	s7, [r3, #4]
 8003162:	ed93 4a02 	vldr	s8, [r3, #8]
 8003166:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 800316a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800316e:	ed93 5a00 	vldr	s10, [r3]
 8003172:	edd3 5a01 	vldr	s11, [r3, #4]
 8003176:	ed93 6a02 	vldr	s12, [r3, #8]
 800317a:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 800317e:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 8003182:	edd3 6a00 	vldr	s13, [r3]
 8003186:	ed93 7a01 	vldr	s14, [r3, #4]
 800318a:	edd3 7a02 	vldr	s15, [r3, #8]
 800318e:	eddf 4a1d 	vldr	s9, [pc, #116]	; 8003204 <Start_Data_Reading+0x93c>
 8003192:	eef0 1a45 	vmov.f32	s3, s10
 8003196:	eeb0 2a65 	vmov.f32	s4, s11
 800319a:	eef0 2a46 	vmov.f32	s5, s12
 800319e:	eeb0 0a66 	vmov.f32	s0, s13
 80031a2:	e031      	b.n	8003208 <Start_Data_Reading+0x940>
 80031a4:	f3af 8000 	nop.w
 80031a8:	b851eb85 	.word	0xb851eb85
 80031ac:	404ca51e 	.word	0x404ca51e
 80031b0:	51eb851f 	.word	0x51eb851f
 80031b4:	40239eb8 	.word	0x40239eb8
 80031b8:	20002b78 	.word	0x20002b78
 80031bc:	20000aa0 	.word	0x20000aa0
 80031c0:	20000c38 	.word	0x20000c38
 80031c4:	20000aa4 	.word	0x20000aa4
 80031c8:	20001bd8 	.word	0x20001bd8
 80031cc:	20000a10 	.word	0x20000a10
 80031d0:	20000ab4 	.word	0x20000ab4
 80031d4:	20000ab0 	.word	0x20000ab0
 80031d8:	20000aac 	.word	0x20000aac
 80031dc:	20000a60 	.word	0x20000a60
 80031e0:	20000abc 	.word	0x20000abc
 80031e4:	20000ab8 	.word	0x20000ab8
 80031e8:	20000ac8 	.word	0x20000ac8
 80031ec:	47c5e680 	.word	0x47c5e680
 80031f0:	20000ac0 	.word	0x20000ac0
 80031f4:	20000c20 	.word	0x20000c20
 80031f8:	20000acc 	.word	0x20000acc
 80031fc:	20000ad0 	.word	0x20000ad0
 8003200:	20000ad4 	.word	0x20000ad4
 8003204:	3ba3d70a 	.word	0x3ba3d70a
 8003208:	eef0 0a47 	vmov.f32	s1, s14
 800320c:	eeb0 1a67 	vmov.f32	s2, s15
 8003210:	48d7      	ldr	r0, [pc, #860]	; (8003570 <Start_Data_Reading+0xca8>)
 8003212:	f009 fd6d 	bl	800ccf0 <FusionAhrsUpdate>

		  euler = FusionQuaternionToEuler(FusionAhrsGetQuaternion(&ahrs));
 8003216:	48d6      	ldr	r0, [pc, #856]	; (8003570 <Start_Data_Reading+0xca8>)
 8003218:	f00a fb8e 	bl	800d938 <FusionAhrsGetQuaternion>
 800321c:	eeb0 6a40 	vmov.f32	s12, s0
 8003220:	eef0 6a60 	vmov.f32	s13, s1
 8003224:	eeb0 7a41 	vmov.f32	s14, s2
 8003228:	eef0 7a61 	vmov.f32	s15, s3
 800322c:	ed87 6a48 	vstr	s12, [r7, #288]	; 0x120
 8003230:	edc7 6a49 	vstr	s13, [r7, #292]	; 0x124
 8003234:	ed87 7a4a 	vstr	s14, [r7, #296]	; 0x128
 8003238:	edc7 7a4b 	vstr	s15, [r7, #300]	; 0x12c
 800323c:	ed97 6a48 	vldr	s12, [r7, #288]	; 0x120
 8003240:	edd7 6a49 	vldr	s13, [r7, #292]	; 0x124
 8003244:	ed97 7a4a 	vldr	s14, [r7, #296]	; 0x128
 8003248:	edd7 7a4b 	vldr	s15, [r7, #300]	; 0x12c
 800324c:	eeb0 0a46 	vmov.f32	s0, s12
 8003250:	eef0 0a66 	vmov.f32	s1, s13
 8003254:	eeb0 1a47 	vmov.f32	s2, s14
 8003258:	eef0 1a67 	vmov.f32	s3, s15
 800325c:	f7fe f8c7 	bl	80013ee <FusionQuaternionToEuler>
 8003260:	eef0 6a40 	vmov.f32	s13, s0
 8003264:	eeb0 7a60 	vmov.f32	s14, s1
 8003268:	eef0 7a41 	vmov.f32	s15, s2
 800326c:	4bc1      	ldr	r3, [pc, #772]	; (8003574 <Start_Data_Reading+0xcac>)
 800326e:	edc3 6a00 	vstr	s13, [r3]
 8003272:	ed83 7a01 	vstr	s14, [r3, #4]
 8003276:	edc3 7a02 	vstr	s15, [r3, #8]
		  // Rotation matrix from sensor frame to earth(NWU) frame
		  ERS = FusionQuaternionToMatrix(FusionAhrsGetQuaternion(&ahrs));
 800327a:	48bd      	ldr	r0, [pc, #756]	; (8003570 <Start_Data_Reading+0xca8>)
 800327c:	f00a fb5c 	bl	800d938 <FusionAhrsGetQuaternion>
 8003280:	eeb0 6a40 	vmov.f32	s12, s0
 8003284:	eef0 6a60 	vmov.f32	s13, s1
 8003288:	eeb0 7a41 	vmov.f32	s14, s2
 800328c:	eef0 7a61 	vmov.f32	s15, s3
 8003290:	ed87 6a4c 	vstr	s12, [r7, #304]	; 0x130
 8003294:	edc7 6a4d 	vstr	s13, [r7, #308]	; 0x134
 8003298:	ed87 7a4e 	vstr	s14, [r7, #312]	; 0x138
 800329c:	edc7 7a4f 	vstr	s15, [r7, #316]	; 0x13c
 80032a0:	4cb5      	ldr	r4, [pc, #724]	; (8003578 <Start_Data_Reading+0xcb0>)
 80032a2:	463b      	mov	r3, r7
 80032a4:	ed97 6a4c 	vldr	s12, [r7, #304]	; 0x130
 80032a8:	edd7 6a4d 	vldr	s13, [r7, #308]	; 0x134
 80032ac:	ed97 7a4e 	vldr	s14, [r7, #312]	; 0x138
 80032b0:	edd7 7a4f 	vldr	s15, [r7, #316]	; 0x13c
 80032b4:	eeb0 0a46 	vmov.f32	s0, s12
 80032b8:	eef0 0a66 	vmov.f32	s1, s13
 80032bc:	eeb0 1a47 	vmov.f32	s2, s14
 80032c0:	eef0 1a67 	vmov.f32	s3, s15
 80032c4:	4618      	mov	r0, r3
 80032c6:	f7fd ffc5 	bl	8001254 <FusionQuaternionToMatrix>
 80032ca:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 80032ce:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 80032d2:	461d      	mov	r5, r3
 80032d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80032d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80032d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80032da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80032dc:	682b      	ldr	r3, [r5, #0]
 80032de:	6023      	str	r3, [r4, #0]
		  aE = FusionMatrixMultiplyVector(ERS, FusionVectorMultiplyScalar(accelerometer, 9.81));
 80032e0:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 80032e4:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80032e8:	edd3 6a00 	vldr	s13, [r3]
 80032ec:	ed93 7a01 	vldr	s14, [r3, #4]
 80032f0:	edd3 7a02 	vldr	s15, [r3, #8]
 80032f4:	eddf 1aa1 	vldr	s3, [pc, #644]	; 800357c <Start_Data_Reading+0xcb4>
 80032f8:	eeb0 0a66 	vmov.f32	s0, s13
 80032fc:	eef0 0a47 	vmov.f32	s1, s14
 8003300:	eeb0 1a67 	vmov.f32	s2, s15
 8003304:	f7fd feea 	bl	80010dc <FusionVectorMultiplyScalar>
 8003308:	eef0 6a40 	vmov.f32	s13, s0
 800330c:	eeb0 7a60 	vmov.f32	s14, s1
 8003310:	eef0 7a41 	vmov.f32	s15, s2
 8003314:	edc7 6a50 	vstr	s13, [r7, #320]	; 0x140
 8003318:	ed87 7a51 	vstr	s14, [r7, #324]	; 0x144
 800331c:	edc7 7a52 	vstr	s15, [r7, #328]	; 0x148
 8003320:	edd7 6a50 	vldr	s13, [r7, #320]	; 0x140
 8003324:	ed97 7a51 	vldr	s14, [r7, #324]	; 0x144
 8003328:	edd7 7a52 	vldr	s15, [r7, #328]	; 0x148
 800332c:	4e92      	ldr	r6, [pc, #584]	; (8003578 <Start_Data_Reading+0xcb0>)
 800332e:	466d      	mov	r5, sp
 8003330:	f106 0410 	add.w	r4, r6, #16
 8003334:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003336:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003338:	6823      	ldr	r3, [r4, #0]
 800333a:	602b      	str	r3, [r5, #0]
 800333c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8003340:	eeb0 0a66 	vmov.f32	s0, s13
 8003344:	eef0 0a47 	vmov.f32	s1, s14
 8003348:	eeb0 1a67 	vmov.f32	s2, s15
 800334c:	f7fd ff0a 	bl	8001164 <FusionMatrixMultiplyVector>
 8003350:	eef0 6a40 	vmov.f32	s13, s0
 8003354:	eeb0 7a60 	vmov.f32	s14, s1
 8003358:	eef0 7a41 	vmov.f32	s15, s2
 800335c:	4b88      	ldr	r3, [pc, #544]	; (8003580 <Start_Data_Reading+0xcb8>)
 800335e:	edc3 6a00 	vstr	s13, [r3]
 8003362:	ed83 7a01 	vstr	s14, [r3, #4]
 8003366:	edc3 7a02 	vstr	s15, [r3, #8]
		  aE.axis.z -=9.85173;
 800336a:	4b85      	ldr	r3, [pc, #532]	; (8003580 <Start_Data_Reading+0xcb8>)
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	4618      	mov	r0, r3
 8003370:	f7fd f8ea 	bl	8000548 <__aeabi_f2d>
 8003374:	a37a      	add	r3, pc, #488	; (adr r3, 8003560 <Start_Data_Reading+0xc98>)
 8003376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800337a:	f7fc ff85 	bl	8000288 <__aeabi_dsub>
 800337e:	4602      	mov	r2, r0
 8003380:	460b      	mov	r3, r1
 8003382:	4610      	mov	r0, r2
 8003384:	4619      	mov	r1, r3
 8003386:	f7fd fc2f 	bl	8000be8 <__aeabi_d2f>
 800338a:	4603      	mov	r3, r0
 800338c:	4a7c      	ldr	r2, [pc, #496]	; (8003580 <Start_Data_Reading+0xcb8>)
 800338e:	6093      	str	r3, [r2, #8]


		  meas.a11 = hz;
 8003390:	4b7c      	ldr	r3, [pc, #496]	; (8003584 <Start_Data_Reading+0xcbc>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a7c      	ldr	r2, [pc, #496]	; (8003588 <Start_Data_Reading+0xcc0>)
 8003396:	6013      	str	r3, [r2, #0]
		  meas.a21 = aE.axis.z;
 8003398:	4b79      	ldr	r3, [pc, #484]	; (8003580 <Start_Data_Reading+0xcb8>)
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	4a7a      	ldr	r2, [pc, #488]	; (8003588 <Start_Data_Reading+0xcc0>)
 800339e:	6053      	str	r3, [r2, #4]
		  altitudeKF(prev_state, &current_state, P_prev, &P, meas);
 80033a0:	4b79      	ldr	r3, [pc, #484]	; (8003588 <Start_Data_Reading+0xcc0>)
 80033a2:	ed93 4a00 	vldr	s8, [r3]
 80033a6:	edd3 4a01 	vldr	s9, [r3, #4]
 80033aa:	4b78      	ldr	r3, [pc, #480]	; (800358c <Start_Data_Reading+0xcc4>)
 80033ac:	ed93 5a00 	vldr	s10, [r3]
 80033b0:	edd3 5a01 	vldr	s11, [r3, #4]
 80033b4:	ed93 6a02 	vldr	s12, [r3, #8]
 80033b8:	edd3 6a03 	vldr	s13, [r3, #12]
 80033bc:	4b74      	ldr	r3, [pc, #464]	; (8003590 <Start_Data_Reading+0xcc8>)
 80033be:	ed93 7a00 	vldr	s14, [r3]
 80033c2:	edd3 7a01 	vldr	s15, [r3, #4]
 80033c6:	eeb0 3a44 	vmov.f32	s6, s8
 80033ca:	eef0 3a64 	vmov.f32	s7, s9
 80033ce:	4971      	ldr	r1, [pc, #452]	; (8003594 <Start_Data_Reading+0xccc>)
 80033d0:	eeb0 1a45 	vmov.f32	s2, s10
 80033d4:	eef0 1a65 	vmov.f32	s3, s11
 80033d8:	eeb0 2a46 	vmov.f32	s4, s12
 80033dc:	eef0 2a66 	vmov.f32	s5, s13
 80033e0:	486d      	ldr	r0, [pc, #436]	; (8003598 <Start_Data_Reading+0xcd0>)
 80033e2:	eeb0 0a47 	vmov.f32	s0, s14
 80033e6:	eef0 0a67 	vmov.f32	s1, s15
 80033ea:	f001 f8bf 	bl	800456c <altitudeKF>


		  // calculate rotation around yaw axis
		  if(prev_euler_yaw > 170 && euler.angle.yaw < 0){
 80033ee:	edd7 7a73 	vldr	s15, [r7, #460]	; 0x1cc
 80033f2:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 800359c <Start_Data_Reading+0xcd4>
 80033f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033fe:	dd0c      	ble.n	800341a <Start_Data_Reading+0xb52>
 8003400:	4b5c      	ldr	r3, [pc, #368]	; (8003574 <Start_Data_Reading+0xcac>)
 8003402:	edd3 7a02 	vldr	s15, [r3, #8]
 8003406:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800340a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800340e:	d504      	bpl.n	800341a <Start_Data_Reading+0xb52>
			  n++;
 8003410:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8003414:	3301      	adds	r3, #1
 8003416:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
		  }
		  if(prev_euler_yaw < -170 && euler.angle.yaw > 0){
 800341a:	edd7 7a73 	vldr	s15, [r7, #460]	; 0x1cc
 800341e:	ed9f 7a60 	vldr	s14, [pc, #384]	; 80035a0 <Start_Data_Reading+0xcd8>
 8003422:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003426:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800342a:	d50c      	bpl.n	8003446 <Start_Data_Reading+0xb7e>
 800342c:	4b51      	ldr	r3, [pc, #324]	; (8003574 <Start_Data_Reading+0xcac>)
 800342e:	edd3 7a02 	vldr	s15, [r3, #8]
 8003432:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003436:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800343a:	dd04      	ble.n	8003446 <Start_Data_Reading+0xb7e>
			  n--;
 800343c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8003440:	3b01      	subs	r3, #1
 8003442:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
		  }
		  yaw_angle = euler.angle.yaw + n * 360.0;
 8003446:	4b4b      	ldr	r3, [pc, #300]	; (8003574 <Start_Data_Reading+0xcac>)
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	4618      	mov	r0, r3
 800344c:	f7fd f87c 	bl	8000548 <__aeabi_f2d>
 8003450:	4604      	mov	r4, r0
 8003452:	460d      	mov	r5, r1
 8003454:	f8d7 01c8 	ldr.w	r0, [r7, #456]	; 0x1c8
 8003458:	f7fd f864 	bl	8000524 <__aeabi_i2d>
 800345c:	f04f 0200 	mov.w	r2, #0
 8003460:	4b50      	ldr	r3, [pc, #320]	; (80035a4 <Start_Data_Reading+0xcdc>)
 8003462:	f7fd f8c9 	bl	80005f8 <__aeabi_dmul>
 8003466:	4602      	mov	r2, r0
 8003468:	460b      	mov	r3, r1
 800346a:	4620      	mov	r0, r4
 800346c:	4629      	mov	r1, r5
 800346e:	f7fc ff0d 	bl	800028c <__adddf3>
 8003472:	4602      	mov	r2, r0
 8003474:	460b      	mov	r3, r1
 8003476:	4610      	mov	r0, r2
 8003478:	4619      	mov	r1, r3
 800347a:	f7fd fbb5 	bl	8000be8 <__aeabi_d2f>
 800347e:	4603      	mov	r3, r0
 8003480:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
		  abs_yaw = yaw_angle;
 8003484:	4a48      	ldr	r2, [pc, #288]	; (80035a8 <Start_Data_Reading+0xce0>)
 8003486:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800348a:	6013      	str	r3, [r2, #0]
		  prev_euler_yaw = euler.angle.yaw;
 800348c:	4b39      	ldr	r3, [pc, #228]	; (8003574 <Start_Data_Reading+0xcac>)
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
//		  HAL_UART_Transmit (&huart2, transmit_data, sizeof (transmit_data), 500);



		  //radio control references
		  M_throttle = CRSFtoDuty(RX_throttle);
 8003494:	4b45      	ldr	r3, [pc, #276]	; (80035ac <Start_Data_Reading+0xce4>)
 8003496:	881b      	ldrh	r3, [r3, #0]
 8003498:	4618      	mov	r0, r3
 800349a:	f002 fcd9 	bl	8005e50 <CRSFtoDuty>
 800349e:	eef0 7a40 	vmov.f32	s15, s0
 80034a2:	4b43      	ldr	r3, [pc, #268]	; (80035b0 <Start_Data_Reading+0xce8>)
 80034a4:	edc3 7a00 	vstr	s15, [r3]
		  M_pitch = CRSFtoPitch(RX_pitch)*25;
 80034a8:	4b42      	ldr	r3, [pc, #264]	; (80035b4 <Start_Data_Reading+0xcec>)
 80034aa:	881b      	ldrh	r3, [r3, #0]
 80034ac:	4618      	mov	r0, r3
 80034ae:	f002 fd11 	bl	8005ed4 <CRSFtoPitch>
 80034b2:	eef0 7a40 	vmov.f32	s15, s0
 80034b6:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 80034ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80034be:	4b3e      	ldr	r3, [pc, #248]	; (80035b8 <Start_Data_Reading+0xcf0>)
 80034c0:	edc3 7a00 	vstr	s15, [r3]
		  M_roll = CRSFtoRoll(RX_roll)*15;
 80034c4:	4b3d      	ldr	r3, [pc, #244]	; (80035bc <Start_Data_Reading+0xcf4>)
 80034c6:	881b      	ldrh	r3, [r3, #0]
 80034c8:	4618      	mov	r0, r3
 80034ca:	f002 fd21 	bl	8005f10 <CRSFtoRoll>
 80034ce:	eef0 7a40 	vmov.f32	s15, s0
 80034d2:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 80034d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80034da:	4b39      	ldr	r3, [pc, #228]	; (80035c0 <Start_Data_Reading+0xcf8>)
 80034dc:	edc3 7a00 	vstr	s15, [r3]
		  M_yaw += CRSFtoYaw(RX_yaw)*0.3;
 80034e0:	4b38      	ldr	r3, [pc, #224]	; (80035c4 <Start_Data_Reading+0xcfc>)
 80034e2:	881b      	ldrh	r3, [r3, #0]
 80034e4:	4618      	mov	r0, r3
 80034e6:	f002 fd31 	bl	8005f4c <CRSFtoYaw>
 80034ea:	ee10 3a10 	vmov	r3, s0
 80034ee:	4618      	mov	r0, r3
 80034f0:	f7fd f82a 	bl	8000548 <__aeabi_f2d>
 80034f4:	a31c      	add	r3, pc, #112	; (adr r3, 8003568 <Start_Data_Reading+0xca0>)
 80034f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034fa:	f7fd f87d 	bl	80005f8 <__aeabi_dmul>
 80034fe:	4602      	mov	r2, r0
 8003500:	460b      	mov	r3, r1
 8003502:	4614      	mov	r4, r2
 8003504:	461d      	mov	r5, r3
 8003506:	4b30      	ldr	r3, [pc, #192]	; (80035c8 <Start_Data_Reading+0xd00>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4618      	mov	r0, r3
 800350c:	f7fd f81c 	bl	8000548 <__aeabi_f2d>
 8003510:	4602      	mov	r2, r0
 8003512:	460b      	mov	r3, r1
 8003514:	4620      	mov	r0, r4
 8003516:	4629      	mov	r1, r5
 8003518:	f7fc feb8 	bl	800028c <__adddf3>
 800351c:	4602      	mov	r2, r0
 800351e:	460b      	mov	r3, r1
 8003520:	4610      	mov	r0, r2
 8003522:	4619      	mov	r1, r3
 8003524:	f7fd fb60 	bl	8000be8 <__aeabi_d2f>
 8003528:	4603      	mov	r3, r0
 800352a:	4a27      	ldr	r2, [pc, #156]	; (80035c8 <Start_Data_Reading+0xd00>)
 800352c:	6013      	str	r3, [r2, #0]

		  //pitch angle control
		  err_angle_pitch = M_pitch - euler.angle.pitch;
 800352e:	4b22      	ldr	r3, [pc, #136]	; (80035b8 <Start_Data_Reading+0xcf0>)
 8003530:	ed93 7a00 	vldr	s14, [r3]
 8003534:	4b0f      	ldr	r3, [pc, #60]	; (8003574 <Start_Data_Reading+0xcac>)
 8003536:	edd3 7a01 	vldr	s15, [r3, #4]
 800353a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800353e:	edc7 7a6b 	vstr	s15, [r7, #428]	; 0x1ac
		  errd_angle_pitch = (err_angle_pitch - prev_err_angle_pitch)/SAMPLE_PERIOD;
 8003542:	ed97 7a6b 	vldr	s14, [r7, #428]	; 0x1ac
 8003546:	edd7 7a7a 	vldr	s15, [r7, #488]	; 0x1e8
 800354a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800354e:	eddf 6a1f 	vldr	s13, [pc, #124]	; 80035cc <Start_Data_Reading+0xd04>
 8003552:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003556:	edc7 7a6a 	vstr	s15, [r7, #424]	; 0x1a8
 800355a:	e039      	b.n	80035d0 <Start_Data_Reading+0xd08>
 800355c:	f3af 8000 	nop.w
 8003560:	f45e0b4e 	.word	0xf45e0b4e
 8003564:	4023b415 	.word	0x4023b415
 8003568:	33333333 	.word	0x33333333
 800356c:	3fd33333 	.word	0x3fd33333
 8003570:	20000af8 	.word	0x20000af8
 8003574:	20000b6c 	.word	0x20000b6c
 8003578:	20000b78 	.word	0x20000b78
 800357c:	411cf5c3 	.word	0x411cf5c3
 8003580:	20000b9c 	.word	0x20000b9c
 8003584:	20000ac0 	.word	0x20000ac0
 8003588:	20000bd8 	.word	0x20000bd8
 800358c:	20000bb8 	.word	0x20000bb8
 8003590:	20000ba8 	.word	0x20000ba8
 8003594:	20000bc8 	.word	0x20000bc8
 8003598:	20000bb0 	.word	0x20000bb0
 800359c:	432a0000 	.word	0x432a0000
 80035a0:	c32a0000 	.word	0xc32a0000
 80035a4:	40768000 	.word	0x40768000
 80035a8:	20000af4 	.word	0x20000af4
 80035ac:	20002bd0 	.word	0x20002bd0
 80035b0:	20002bd4 	.word	0x20002bd4
 80035b4:	20002bcc 	.word	0x20002bcc
 80035b8:	20002bd8 	.word	0x20002bd8
 80035bc:	20002bca 	.word	0x20002bca
 80035c0:	20002bdc 	.word	0x20002bdc
 80035c4:	20002bce 	.word	0x20002bce
 80035c8:	20002be0 	.word	0x20002be0
 80035cc:	3ba3d70a 	.word	0x3ba3d70a
		  angle_control_pitch = P_angle_pitch * err_angle_pitch + D_angle_pitch * errd_angle_pitch;
 80035d0:	ed97 7a68 	vldr	s14, [r7, #416]	; 0x1a0
 80035d4:	edd7 7a6b 	vldr	s15, [r7, #428]	; 0x1ac
 80035d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80035dc:	edd7 6a67 	vldr	s13, [r7, #412]	; 0x19c
 80035e0:	edd7 7a6a 	vldr	s15, [r7, #424]	; 0x1a8
 80035e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80035e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80035ec:	edc7 7a69 	vstr	s15, [r7, #420]	; 0x1a4
		  prev_err_angle_pitch = err_angle_pitch;
 80035f0:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80035f4:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
		  //debug_control1 = err_angle_pitch;

		  //pitch angle velocity control
		  err_pitch = angle_control_pitch - imu.gyr_rps[1];
 80035f8:	4bb0      	ldr	r3, [pc, #704]	; (80038bc <Start_Data_Reading+0xff4>)
 80035fa:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 80035fe:	ed97 7a69 	vldr	s14, [r7, #420]	; 0x1a4
 8003602:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003606:	edc7 7a70 	vstr	s15, [r7, #448]	; 0x1c0
		  errd_pitch = (err_pitch - prev_err_pitch)/SAMPLE_PERIOD;
 800360a:	ed97 7a70 	vldr	s14, [r7, #448]	; 0x1c0
 800360e:	edd7 7a7b 	vldr	s15, [r7, #492]	; 0x1ec
 8003612:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003616:	eddf 6aaa 	vldr	s13, [pc, #680]	; 80038c0 <Start_Data_Reading+0xff8>
 800361a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800361e:	edc7 7a6f 	vstr	s15, [r7, #444]	; 0x1bc
		  prev_err_pitch = err_pitch;
 8003622:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8003626:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
		  control_pitch = P_pitch * err_pitch + D_pitch * errd_pitch;
 800362a:	ed97 7a6d 	vldr	s14, [r7, #436]	; 0x1b4
 800362e:	edd7 7a70 	vldr	s15, [r7, #448]	; 0x1c0
 8003632:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003636:	edd7 6a6c 	vldr	s13, [r7, #432]	; 0x1b0
 800363a:	edd7 7a6f 	vldr	s15, [r7, #444]	; 0x1bc
 800363e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003642:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003646:	edc7 7a6e 	vstr	s15, [r7, #440]	; 0x1b8

		  //roll angle control
		  err_angle_roll = M_roll - euler.angle.roll;
 800364a:	4b9e      	ldr	r3, [pc, #632]	; (80038c4 <Start_Data_Reading+0xffc>)
 800364c:	ed93 7a00 	vldr	s14, [r3]
 8003650:	4b9d      	ldr	r3, [pc, #628]	; (80038c8 <Start_Data_Reading+0x1000>)
 8003652:	edd3 7a00 	vldr	s15, [r3]
 8003656:	ee77 7a67 	vsub.f32	s15, s14, s15
 800365a:	edc7 7a5f 	vstr	s15, [r7, #380]	; 0x17c
		  errd_angle_roll = (err_angle_roll - prev_err_angle_roll)/SAMPLE_PERIOD;
 800365e:	ed97 7a5f 	vldr	s14, [r7, #380]	; 0x17c
 8003662:	edd7 7a78 	vldr	s15, [r7, #480]	; 0x1e0
 8003666:	ee37 7a67 	vsub.f32	s14, s14, s15
 800366a:	eddf 6a95 	vldr	s13, [pc, #596]	; 80038c0 <Start_Data_Reading+0xff8>
 800366e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003672:	edc7 7a5e 	vstr	s15, [r7, #376]	; 0x178
		  angle_control_roll = P_angle_roll * err_angle_roll + D_angle_roll * errd_angle_roll;
 8003676:	ed97 7a61 	vldr	s14, [r7, #388]	; 0x184
 800367a:	edd7 7a5f 	vldr	s15, [r7, #380]	; 0x17c
 800367e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003682:	edd7 6a60 	vldr	s13, [r7, #384]	; 0x180
 8003686:	edd7 7a5e 	vldr	s15, [r7, #376]	; 0x178
 800368a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800368e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003692:	edc7 7a5d 	vstr	s15, [r7, #372]	; 0x174
		  prev_err_angle_roll = err_angle_roll;
 8003696:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 800369a:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
		  debug_control1 = err_angle_roll;
 800369e:	4a8b      	ldr	r2, [pc, #556]	; (80038cc <Start_Data_Reading+0x1004>)
 80036a0:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 80036a4:	6013      	str	r3, [r2, #0]


		  //roll angle velocity control
		  err_roll = angle_control_roll - imu.gyr_rps[0]; //M_roll
 80036a6:	4b85      	ldr	r3, [pc, #532]	; (80038bc <Start_Data_Reading+0xff4>)
 80036a8:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80036ac:	ed97 7a5d 	vldr	s14, [r7, #372]	; 0x174
 80036b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80036b4:	edc7 7a66 	vstr	s15, [r7, #408]	; 0x198
		  errd_roll = (err_roll - prev_err_roll)/SAMPLE_PERIOD;
 80036b8:	ed97 7a66 	vldr	s14, [r7, #408]	; 0x198
 80036bc:	edd7 7a79 	vldr	s15, [r7, #484]	; 0x1e4
 80036c0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80036c4:	eddf 6a7e 	vldr	s13, [pc, #504]	; 80038c0 <Start_Data_Reading+0xff8>
 80036c8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80036cc:	edc7 7a65 	vstr	s15, [r7, #404]	; 0x194
		  prev_err_roll = err_roll;
 80036d0:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 80036d4:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
		  control_roll = P_roll * err_roll + D_roll * errd_roll;
 80036d8:	ed97 7a63 	vldr	s14, [r7, #396]	; 0x18c
 80036dc:	edd7 7a66 	vldr	s15, [r7, #408]	; 0x198
 80036e0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80036e4:	edd7 6a62 	vldr	s13, [r7, #392]	; 0x188
 80036e8:	edd7 7a65 	vldr	s15, [r7, #404]	; 0x194
 80036ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80036f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036f4:	edc7 7a64 	vstr	s15, [r7, #400]	; 0x190
		  debug_control2 = control_roll;
 80036f8:	4a75      	ldr	r2, [pc, #468]	; (80038d0 <Start_Data_Reading+0x1008>)
 80036fa:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80036fe:	6013      	str	r3, [r2, #0]


		  //yaw angle control
		  err_angle_yaw = M_yaw - euler.angle.yaw;
 8003700:	4b74      	ldr	r3, [pc, #464]	; (80038d4 <Start_Data_Reading+0x100c>)
 8003702:	ed93 7a00 	vldr	s14, [r3]
 8003706:	4b70      	ldr	r3, [pc, #448]	; (80038c8 <Start_Data_Reading+0x1000>)
 8003708:	edd3 7a02 	vldr	s15, [r3, #8]
 800370c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003710:	edc7 7a57 	vstr	s15, [r7, #348]	; 0x15c
		  errd_angle_yaw = (err_angle_yaw - prev_err_angle_yaw)/SAMPLE_PERIOD;
 8003714:	ed97 7a57 	vldr	s14, [r7, #348]	; 0x15c
 8003718:	edd7 7a74 	vldr	s15, [r7, #464]	; 0x1d0
 800371c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003720:	eddf 6a67 	vldr	s13, [pc, #412]	; 80038c0 <Start_Data_Reading+0xff8>
 8003724:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003728:	edc7 7a56 	vstr	s15, [r7, #344]	; 0x158
		  angle_control_yaw = P_angle_yaw * err_angle_yaw + D_angle_yaw * errd_angle_yaw;
 800372c:	ed97 7a59 	vldr	s14, [r7, #356]	; 0x164
 8003730:	edd7 7a57 	vldr	s15, [r7, #348]	; 0x15c
 8003734:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003738:	edd7 6a58 	vldr	s13, [r7, #352]	; 0x160
 800373c:	edd7 7a56 	vldr	s15, [r7, #344]	; 0x158
 8003740:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003744:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003748:	edc7 7a55 	vstr	s15, [r7, #340]	; 0x154
		  prev_err_angle_yaw = err_angle_yaw;
 800374c:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8003750:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0



		  //yaw angle velocity control
		  err_yaw = angle_control_yaw - imu.gyr_rps[2]; //angle_control_yaw
 8003754:	4b59      	ldr	r3, [pc, #356]	; (80038bc <Start_Data_Reading+0xff4>)
 8003756:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 800375a:	ed97 7a55 	vldr	s14, [r7, #340]	; 0x154
 800375e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003762:	edc7 7a5c 	vstr	s15, [r7, #368]	; 0x170
		  errd_yaw = (err_yaw - prev_err_yaw)/SAMPLE_PERIOD;
 8003766:	ed97 7a5c 	vldr	s14, [r7, #368]	; 0x170
 800376a:	edd7 7a77 	vldr	s15, [r7, #476]	; 0x1dc
 800376e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003772:	eddf 6a53 	vldr	s13, [pc, #332]	; 80038c0 <Start_Data_Reading+0xff8>
 8003776:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800377a:	edc7 7a5b 	vstr	s15, [r7, #364]	; 0x16c
		  prev_err_yaw = err_yaw;
 800377e:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8003782:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
		  control_yaw = P_yaw * err_yaw + D_yaw * errd_yaw;
 8003786:	ed97 7a76 	vldr	s14, [r7, #472]	; 0x1d8
 800378a:	edd7 7a5c 	vldr	s15, [r7, #368]	; 0x170
 800378e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003792:	edd7 6a75 	vldr	s13, [r7, #468]	; 0x1d4
 8003796:	edd7 7a5b 	vldr	s15, [r7, #364]	; 0x16c
 800379a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800379e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80037a2:	edc7 7a5a 	vstr	s15, [r7, #360]	; 0x168



		  if(RX_arm > 1000){
 80037a6:	4b4c      	ldr	r3, [pc, #304]	; (80038d8 <Start_Data_Reading+0x1010>)
 80037a8:	881b      	ldrh	r3, [r3, #0]
 80037aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80037ae:	f240 80a1 	bls.w	80038f4 <Start_Data_Reading+0x102c>
			  uart_telemetria = 0;
 80037b2:	4b4a      	ldr	r3, [pc, #296]	; (80038dc <Start_Data_Reading+0x1014>)
 80037b4:	2200      	movs	r2, #0
 80037b6:	701a      	strb	r2, [r3, #0]
//			  ref2 = (uint16_t)(M_throttle + control_yaw);
//			  ref3 = (uint16_t)(M_throttle - control_yaw);
//			  ref4 = (uint16_t)(M_throttle + control_yaw);

			  //all together
			  ref1 = (uint16_t)(M_throttle - control_yaw - control_pitch + control_roll);
 80037b8:	4b49      	ldr	r3, [pc, #292]	; (80038e0 <Start_Data_Reading+0x1018>)
 80037ba:	ed93 7a00 	vldr	s14, [r3]
 80037be:	edd7 7a5a 	vldr	s15, [r7, #360]	; 0x168
 80037c2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80037c6:	edd7 7a6e 	vldr	s15, [r7, #440]	; 0x1b8
 80037ca:	ee37 7a67 	vsub.f32	s14, s14, s15
 80037ce:	edd7 7a64 	vldr	s15, [r7, #400]	; 0x190
 80037d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80037d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80037da:	ee17 3a90 	vmov	r3, s15
 80037de:	b29a      	uxth	r2, r3
 80037e0:	4b40      	ldr	r3, [pc, #256]	; (80038e4 <Start_Data_Reading+0x101c>)
 80037e2:	801a      	strh	r2, [r3, #0]
			  ref2 = (uint16_t)(M_throttle + control_yaw - control_pitch - control_roll);
 80037e4:	4b3e      	ldr	r3, [pc, #248]	; (80038e0 <Start_Data_Reading+0x1018>)
 80037e6:	ed93 7a00 	vldr	s14, [r3]
 80037ea:	edd7 7a5a 	vldr	s15, [r7, #360]	; 0x168
 80037ee:	ee37 7a27 	vadd.f32	s14, s14, s15
 80037f2:	edd7 7a6e 	vldr	s15, [r7, #440]	; 0x1b8
 80037f6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80037fa:	edd7 7a64 	vldr	s15, [r7, #400]	; 0x190
 80037fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003802:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003806:	ee17 3a90 	vmov	r3, s15
 800380a:	b29a      	uxth	r2, r3
 800380c:	4b36      	ldr	r3, [pc, #216]	; (80038e8 <Start_Data_Reading+0x1020>)
 800380e:	801a      	strh	r2, [r3, #0]
			  ref3 = (uint16_t)(M_throttle - control_yaw + control_pitch - control_roll);
 8003810:	4b33      	ldr	r3, [pc, #204]	; (80038e0 <Start_Data_Reading+0x1018>)
 8003812:	ed93 7a00 	vldr	s14, [r3]
 8003816:	edd7 7a5a 	vldr	s15, [r7, #360]	; 0x168
 800381a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800381e:	edd7 7a6e 	vldr	s15, [r7, #440]	; 0x1b8
 8003822:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003826:	edd7 7a64 	vldr	s15, [r7, #400]	; 0x190
 800382a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800382e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003832:	ee17 3a90 	vmov	r3, s15
 8003836:	b29a      	uxth	r2, r3
 8003838:	4b2c      	ldr	r3, [pc, #176]	; (80038ec <Start_Data_Reading+0x1024>)
 800383a:	801a      	strh	r2, [r3, #0]
			  ref4 = (uint16_t)(M_throttle + control_yaw + control_pitch + control_roll);
 800383c:	4b28      	ldr	r3, [pc, #160]	; (80038e0 <Start_Data_Reading+0x1018>)
 800383e:	ed93 7a00 	vldr	s14, [r3]
 8003842:	edd7 7a5a 	vldr	s15, [r7, #360]	; 0x168
 8003846:	ee37 7a27 	vadd.f32	s14, s14, s15
 800384a:	edd7 7a6e 	vldr	s15, [r7, #440]	; 0x1b8
 800384e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003852:	edd7 7a64 	vldr	s15, [r7, #400]	; 0x190
 8003856:	ee77 7a27 	vadd.f32	s15, s14, s15
 800385a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800385e:	ee17 3a90 	vmov	r3, s15
 8003862:	b29a      	uxth	r2, r3
 8003864:	4b22      	ldr	r3, [pc, #136]	; (80038f0 <Start_Data_Reading+0x1028>)
 8003866:	801a      	strh	r2, [r3, #0]
//			  ref1 = (uint16_t)(M_throttle);
//			  ref2 = (uint16_t)(M_throttle);
//			  ref3 = (uint16_t)(M_throttle);
//			  ref4 = (uint16_t)(M_throttle);

			  if(ref1<550) ref1 = 550;
 8003868:	4b1e      	ldr	r3, [pc, #120]	; (80038e4 <Start_Data_Reading+0x101c>)
 800386a:	881b      	ldrh	r3, [r3, #0]
 800386c:	f240 2225 	movw	r2, #549	; 0x225
 8003870:	4293      	cmp	r3, r2
 8003872:	d803      	bhi.n	800387c <Start_Data_Reading+0xfb4>
 8003874:	4b1b      	ldr	r3, [pc, #108]	; (80038e4 <Start_Data_Reading+0x101c>)
 8003876:	f240 2226 	movw	r2, #550	; 0x226
 800387a:	801a      	strh	r2, [r3, #0]
			  if(ref2<550) ref2 = 550;
 800387c:	4b1a      	ldr	r3, [pc, #104]	; (80038e8 <Start_Data_Reading+0x1020>)
 800387e:	881b      	ldrh	r3, [r3, #0]
 8003880:	f240 2225 	movw	r2, #549	; 0x225
 8003884:	4293      	cmp	r3, r2
 8003886:	d803      	bhi.n	8003890 <Start_Data_Reading+0xfc8>
 8003888:	4b17      	ldr	r3, [pc, #92]	; (80038e8 <Start_Data_Reading+0x1020>)
 800388a:	f240 2226 	movw	r2, #550	; 0x226
 800388e:	801a      	strh	r2, [r3, #0]
			  if(ref3<550) ref3 = 550;
 8003890:	4b16      	ldr	r3, [pc, #88]	; (80038ec <Start_Data_Reading+0x1024>)
 8003892:	881b      	ldrh	r3, [r3, #0]
 8003894:	f240 2225 	movw	r2, #549	; 0x225
 8003898:	4293      	cmp	r3, r2
 800389a:	d803      	bhi.n	80038a4 <Start_Data_Reading+0xfdc>
 800389c:	4b13      	ldr	r3, [pc, #76]	; (80038ec <Start_Data_Reading+0x1024>)
 800389e:	f240 2226 	movw	r2, #550	; 0x226
 80038a2:	801a      	strh	r2, [r3, #0]
			  if(ref4<550) ref4 = 550;
 80038a4:	4b12      	ldr	r3, [pc, #72]	; (80038f0 <Start_Data_Reading+0x1028>)
 80038a6:	881b      	ldrh	r3, [r3, #0]
 80038a8:	f240 2225 	movw	r2, #549	; 0x225
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d84a      	bhi.n	8003946 <Start_Data_Reading+0x107e>
 80038b0:	4b0f      	ldr	r3, [pc, #60]	; (80038f0 <Start_Data_Reading+0x1028>)
 80038b2:	f240 2226 	movw	r2, #550	; 0x226
 80038b6:	801a      	strh	r2, [r3, #0]
 80038b8:	e045      	b.n	8003946 <Start_Data_Reading+0x107e>
 80038ba:	bf00      	nop
 80038bc:	20000a10 	.word	0x20000a10
 80038c0:	3ba3d70a 	.word	0x3ba3d70a
 80038c4:	20002bdc 	.word	0x20002bdc
 80038c8:	20000b6c 	.word	0x20000b6c
 80038cc:	20002be4 	.word	0x20002be4
 80038d0:	20002be8 	.word	0x20002be8
 80038d4:	20002be0 	.word	0x20002be0
 80038d8:	20002bd2 	.word	0x20002bd2
 80038dc:	20000bee 	.word	0x20000bee
 80038e0:	20002bd4 	.word	0x20002bd4
 80038e4:	20002b7c 	.word	0x20002b7c
 80038e8:	20002b7e 	.word	0x20002b7e
 80038ec:	20002b80 	.word	0x20002b80
 80038f0:	20002b82 	.word	0x20002b82

		  }
		  else{
			  uart_telemetria = 1;
 80038f4:	4b2e      	ldr	r3, [pc, #184]	; (80039b0 <Start_Data_Reading+0x10e8>)
 80038f6:	2201      	movs	r2, #1
 80038f8:	701a      	strb	r2, [r3, #0]
			  if(new_P == 1){
 80038fa:	4b2e      	ldr	r3, [pc, #184]	; (80039b4 <Start_Data_Reading+0x10ec>)
 80038fc:	781b      	ldrb	r3, [r3, #0]
 80038fe:	2b01      	cmp	r3, #1
 8003900:	d106      	bne.n	8003910 <Start_Data_Reading+0x1048>
				  P_yaw = telem_P;
 8003902:	4b2d      	ldr	r3, [pc, #180]	; (80039b8 <Start_Data_Reading+0x10f0>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
				  new_P = 0;
 800390a:	4b2a      	ldr	r3, [pc, #168]	; (80039b4 <Start_Data_Reading+0x10ec>)
 800390c:	2200      	movs	r2, #0
 800390e:	701a      	strb	r2, [r3, #0]
			  }
			  if(new_D == 1){
 8003910:	4b2a      	ldr	r3, [pc, #168]	; (80039bc <Start_Data_Reading+0x10f4>)
 8003912:	781b      	ldrb	r3, [r3, #0]
 8003914:	2b01      	cmp	r3, #1
 8003916:	d106      	bne.n	8003926 <Start_Data_Reading+0x105e>
				  D_yaw = telem_D;
 8003918:	4b29      	ldr	r3, [pc, #164]	; (80039c0 <Start_Data_Reading+0x10f8>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
				  new_D = 0;
 8003920:	4b26      	ldr	r3, [pc, #152]	; (80039bc <Start_Data_Reading+0x10f4>)
 8003922:	2200      	movs	r2, #0
 8003924:	701a      	strb	r2, [r3, #0]
			  }
			  ref1 = 550;
 8003926:	4b27      	ldr	r3, [pc, #156]	; (80039c4 <Start_Data_Reading+0x10fc>)
 8003928:	f240 2226 	movw	r2, #550	; 0x226
 800392c:	801a      	strh	r2, [r3, #0]
			  ref2 = 550;
 800392e:	4b26      	ldr	r3, [pc, #152]	; (80039c8 <Start_Data_Reading+0x1100>)
 8003930:	f240 2226 	movw	r2, #550	; 0x226
 8003934:	801a      	strh	r2, [r3, #0]
			  ref3 = 550;
 8003936:	4b25      	ldr	r3, [pc, #148]	; (80039cc <Start_Data_Reading+0x1104>)
 8003938:	f240 2226 	movw	r2, #550	; 0x226
 800393c:	801a      	strh	r2, [r3, #0]
			  ref4 = 550;
 800393e:	4b24      	ldr	r3, [pc, #144]	; (80039d0 <Start_Data_Reading+0x1108>)
 8003940:	f240 2226 	movw	r2, #550	; 0x226
 8003944:	801a      	strh	r2, [r3, #0]

//		  telemetria_float[0] = magneto_data.axis.x;
//		  telemetria_float[1] = magneto_data.axis.y;
//		  telemetria_float[2] = magneto_data.axis.z;

		  telemetria_float[0] = hz;
 8003946:	4b23      	ldr	r3, [pc, #140]	; (80039d4 <Start_Data_Reading+0x110c>)
 8003948:	681a      	ldr	r2, [r3, #0]
 800394a:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 800394e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003952:	601a      	str	r2, [r3, #0]
		  telemetria_float[1] = press;
 8003954:	4b20      	ldr	r3, [pc, #128]	; (80039d8 <Start_Data_Reading+0x1110>)
 8003956:	681a      	ldr	r2, [r3, #0]
 8003958:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 800395c:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003960:	605a      	str	r2, [r3, #4]
		  telemetria_float[2] = p0;//mytimer;//euler.angle.yaw;
 8003962:	4b1e      	ldr	r3, [pc, #120]	; (80039dc <Start_Data_Reading+0x1114>)
 8003964:	681a      	ldr	r2, [r3, #0]
 8003966:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 800396a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800396e:	609a      	str	r2, [r3, #8]
		  xQueueSendToFront(telemetria_Queue, (void*)&telemetria_float, 0);
 8003970:	4b1b      	ldr	r3, [pc, #108]	; (80039e0 <Start_Data_Reading+0x1118>)
 8003972:	6818      	ldr	r0, [r3, #0]
 8003974:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8003978:	2301      	movs	r3, #1
 800397a:	2200      	movs	r2, #0
 800397c:	f00b fadc 	bl	800ef38 <xQueueGenericSend>



//		  set_duty_Oneshot42(&htim3, 550, 550, 550, 550);
		  set_duty_Oneshot42(&htim3, ref1, ref2, ref3, ref4);
 8003980:	4b10      	ldr	r3, [pc, #64]	; (80039c4 <Start_Data_Reading+0x10fc>)
 8003982:	8819      	ldrh	r1, [r3, #0]
 8003984:	4b10      	ldr	r3, [pc, #64]	; (80039c8 <Start_Data_Reading+0x1100>)
 8003986:	881a      	ldrh	r2, [r3, #0]
 8003988:	4b10      	ldr	r3, [pc, #64]	; (80039cc <Start_Data_Reading+0x1104>)
 800398a:	8818      	ldrh	r0, [r3, #0]
 800398c:	4b10      	ldr	r3, [pc, #64]	; (80039d0 <Start_Data_Reading+0x1108>)
 800398e:	881b      	ldrh	r3, [r3, #0]
 8003990:	9300      	str	r3, [sp, #0]
 8003992:	4603      	mov	r3, r0
 8003994:	4813      	ldr	r0, [pc, #76]	; (80039e4 <Start_Data_Reading+0x111c>)
 8003996:	f002 fa38 	bl	8005e0a <set_duty_Oneshot42>
		  mytimer = __HAL_TIM_GET_COUNTER(&htim7);
 800399a:	4b13      	ldr	r3, [pc, #76]	; (80039e8 <Start_Data_Reading+0x1120>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a0:	461a      	mov	r2, r3
 80039a2:	4b12      	ldr	r3, [pc, #72]	; (80039ec <Start_Data_Reading+0x1124>)
 80039a4:	601a      	str	r2, [r3, #0]
	osDelay(4);
 80039a6:	2004      	movs	r0, #4
 80039a8:	f00b f93b 	bl	800ec22 <osDelay>
  {
 80039ac:	f7ff b9e6 	b.w	8002d7c <Start_Data_Reading+0x4b4>
 80039b0:	20000bee 	.word	0x20000bee
 80039b4:	20000bf8 	.word	0x20000bf8
 80039b8:	20000bf0 	.word	0x20000bf0
 80039bc:	20000bf9 	.word	0x20000bf9
 80039c0:	20000bf4 	.word	0x20000bf4
 80039c4:	20002b7c 	.word	0x20002b7c
 80039c8:	20002b7e 	.word	0x20002b7e
 80039cc:	20002b80 	.word	0x20002b80
 80039d0:	20002b82 	.word	0x20002b82
 80039d4:	20000ac0 	.word	0x20000ac0
 80039d8:	20000ab8 	.word	0x20000ab8
 80039dc:	20000ac8 	.word	0x20000ac8
 80039e0:	20002bec 	.word	0x20002bec
 80039e4:	2000072c 	.word	0x2000072c
 80039e8:	20000804 	.word	0x20000804
 80039ec:	20000c04 	.word	0x20000c04

080039f0 <Start_Orientation>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_Orientation */
void Start_Orientation(void const * argument)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b082      	sub	sp, #8
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
//		//filterUpdateIMU(imu.gyr_rps[0], imu.gyr_rps[1], imu.gyr_rps[2], imu.acc_mps2[0], imu.acc_mps2[1], imu.acc_mps2[2], &q );
//		filterUpdate(imu.gyr_rps[0], imu.gyr_rps[1], imu.gyr_rps[2], imu.acc_mps2[0], imu.acc_mps2[1], imu.acc_mps2[2], mag_data_y, -mag_data_x, mag_data_z, &q, &f);
//		eulerAngles(q, &roll, &pitch, &yaw);
//		oricalc = 0;
//	  }
    osDelay(1);
 80039f8:	2001      	movs	r0, #1
 80039fa:	f00b f912 	bl	800ec22 <osDelay>
 80039fe:	e7fb      	b.n	80039f8 <Start_Orientation+0x8>

08003a00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003a00:	b480      	push	{r7}
 8003a02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003a04:	b672      	cpsid	i
}
 8003a06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003a08:	e7fe      	b.n	8003a08 <Error_Handler+0x8>
	...

08003a0c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b082      	sub	sp, #8
 8003a10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a12:	2300      	movs	r3, #0
 8003a14:	607b      	str	r3, [r7, #4]
 8003a16:	4b12      	ldr	r3, [pc, #72]	; (8003a60 <HAL_MspInit+0x54>)
 8003a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a1a:	4a11      	ldr	r2, [pc, #68]	; (8003a60 <HAL_MspInit+0x54>)
 8003a1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a20:	6453      	str	r3, [r2, #68]	; 0x44
 8003a22:	4b0f      	ldr	r3, [pc, #60]	; (8003a60 <HAL_MspInit+0x54>)
 8003a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a2a:	607b      	str	r3, [r7, #4]
 8003a2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003a2e:	2300      	movs	r3, #0
 8003a30:	603b      	str	r3, [r7, #0]
 8003a32:	4b0b      	ldr	r3, [pc, #44]	; (8003a60 <HAL_MspInit+0x54>)
 8003a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a36:	4a0a      	ldr	r2, [pc, #40]	; (8003a60 <HAL_MspInit+0x54>)
 8003a38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a3c:	6413      	str	r3, [r2, #64]	; 0x40
 8003a3e:	4b08      	ldr	r3, [pc, #32]	; (8003a60 <HAL_MspInit+0x54>)
 8003a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a46:	603b      	str	r3, [r7, #0]
 8003a48:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	210f      	movs	r1, #15
 8003a4e:	f06f 0001 	mvn.w	r0, #1
 8003a52:	f002 fe6c 	bl	800672e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003a56:	bf00      	nop
 8003a58:	3708      	adds	r7, #8
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}
 8003a5e:	bf00      	nop
 8003a60:	40023800 	.word	0x40023800

08003a64 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b08e      	sub	sp, #56	; 0x38
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a70:	2200      	movs	r2, #0
 8003a72:	601a      	str	r2, [r3, #0]
 8003a74:	605a      	str	r2, [r3, #4]
 8003a76:	609a      	str	r2, [r3, #8]
 8003a78:	60da      	str	r2, [r3, #12]
 8003a7a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a45      	ldr	r2, [pc, #276]	; (8003b98 <HAL_ADC_MspInit+0x134>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d128      	bne.n	8003ad8 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003a86:	2300      	movs	r3, #0
 8003a88:	623b      	str	r3, [r7, #32]
 8003a8a:	4b44      	ldr	r3, [pc, #272]	; (8003b9c <HAL_ADC_MspInit+0x138>)
 8003a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a8e:	4a43      	ldr	r2, [pc, #268]	; (8003b9c <HAL_ADC_MspInit+0x138>)
 8003a90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a94:	6453      	str	r3, [r2, #68]	; 0x44
 8003a96:	4b41      	ldr	r3, [pc, #260]	; (8003b9c <HAL_ADC_MspInit+0x138>)
 8003a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a9e:	623b      	str	r3, [r7, #32]
 8003aa0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	61fb      	str	r3, [r7, #28]
 8003aa6:	4b3d      	ldr	r3, [pc, #244]	; (8003b9c <HAL_ADC_MspInit+0x138>)
 8003aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aaa:	4a3c      	ldr	r2, [pc, #240]	; (8003b9c <HAL_ADC_MspInit+0x138>)
 8003aac:	f043 0301 	orr.w	r3, r3, #1
 8003ab0:	6313      	str	r3, [r2, #48]	; 0x30
 8003ab2:	4b3a      	ldr	r3, [pc, #232]	; (8003b9c <HAL_ADC_MspInit+0x138>)
 8003ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ab6:	f003 0301 	and.w	r3, r3, #1
 8003aba:	61fb      	str	r3, [r7, #28]
 8003abc:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = CRNT_Pin;
 8003abe:	2320      	movs	r3, #32
 8003ac0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003ac2:	2303      	movs	r3, #3
 8003ac4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CRNT_GPIO_Port, &GPIO_InitStruct);
 8003aca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ace:	4619      	mov	r1, r3
 8003ad0:	4833      	ldr	r0, [pc, #204]	; (8003ba0 <HAL_ADC_MspInit+0x13c>)
 8003ad2:	f003 fa65 	bl	8006fa0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8003ad6:	e05a      	b.n	8003b8e <HAL_ADC_MspInit+0x12a>
  else if(hadc->Instance==ADC2)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a31      	ldr	r2, [pc, #196]	; (8003ba4 <HAL_ADC_MspInit+0x140>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d128      	bne.n	8003b34 <HAL_ADC_MspInit+0xd0>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	61bb      	str	r3, [r7, #24]
 8003ae6:	4b2d      	ldr	r3, [pc, #180]	; (8003b9c <HAL_ADC_MspInit+0x138>)
 8003ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aea:	4a2c      	ldr	r2, [pc, #176]	; (8003b9c <HAL_ADC_MspInit+0x138>)
 8003aec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003af0:	6453      	str	r3, [r2, #68]	; 0x44
 8003af2:	4b2a      	ldr	r3, [pc, #168]	; (8003b9c <HAL_ADC_MspInit+0x138>)
 8003af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003af6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003afa:	61bb      	str	r3, [r7, #24]
 8003afc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003afe:	2300      	movs	r3, #0
 8003b00:	617b      	str	r3, [r7, #20]
 8003b02:	4b26      	ldr	r3, [pc, #152]	; (8003b9c <HAL_ADC_MspInit+0x138>)
 8003b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b06:	4a25      	ldr	r2, [pc, #148]	; (8003b9c <HAL_ADC_MspInit+0x138>)
 8003b08:	f043 0301 	orr.w	r3, r3, #1
 8003b0c:	6313      	str	r3, [r2, #48]	; 0x30
 8003b0e:	4b23      	ldr	r3, [pc, #140]	; (8003b9c <HAL_ADC_MspInit+0x138>)
 8003b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b12:	f003 0301 	and.w	r3, r3, #1
 8003b16:	617b      	str	r3, [r7, #20]
 8003b18:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003b1a:	2310      	movs	r3, #16
 8003b1c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003b1e:	2303      	movs	r3, #3
 8003b20:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b22:	2300      	movs	r3, #0
 8003b24:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b2a:	4619      	mov	r1, r3
 8003b2c:	481c      	ldr	r0, [pc, #112]	; (8003ba0 <HAL_ADC_MspInit+0x13c>)
 8003b2e:	f003 fa37 	bl	8006fa0 <HAL_GPIO_Init>
}
 8003b32:	e02c      	b.n	8003b8e <HAL_ADC_MspInit+0x12a>
  else if(hadc->Instance==ADC3)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a1b      	ldr	r2, [pc, #108]	; (8003ba8 <HAL_ADC_MspInit+0x144>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d127      	bne.n	8003b8e <HAL_ADC_MspInit+0x12a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8003b3e:	2300      	movs	r3, #0
 8003b40:	613b      	str	r3, [r7, #16]
 8003b42:	4b16      	ldr	r3, [pc, #88]	; (8003b9c <HAL_ADC_MspInit+0x138>)
 8003b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b46:	4a15      	ldr	r2, [pc, #84]	; (8003b9c <HAL_ADC_MspInit+0x138>)
 8003b48:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003b4c:	6453      	str	r3, [r2, #68]	; 0x44
 8003b4e:	4b13      	ldr	r3, [pc, #76]	; (8003b9c <HAL_ADC_MspInit+0x138>)
 8003b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b56:	613b      	str	r3, [r7, #16]
 8003b58:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	60fb      	str	r3, [r7, #12]
 8003b5e:	4b0f      	ldr	r3, [pc, #60]	; (8003b9c <HAL_ADC_MspInit+0x138>)
 8003b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b62:	4a0e      	ldr	r2, [pc, #56]	; (8003b9c <HAL_ADC_MspInit+0x138>)
 8003b64:	f043 0304 	orr.w	r3, r3, #4
 8003b68:	6313      	str	r3, [r2, #48]	; 0x30
 8003b6a:	4b0c      	ldr	r3, [pc, #48]	; (8003b9c <HAL_ADC_MspInit+0x138>)
 8003b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b6e:	f003 0304 	and.w	r3, r3, #4
 8003b72:	60fb      	str	r3, [r7, #12]
 8003b74:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003b76:	2308      	movs	r3, #8
 8003b78:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003b7a:	2303      	movs	r3, #3
 8003b7c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b86:	4619      	mov	r1, r3
 8003b88:	4808      	ldr	r0, [pc, #32]	; (8003bac <HAL_ADC_MspInit+0x148>)
 8003b8a:	f003 fa09 	bl	8006fa0 <HAL_GPIO_Init>
}
 8003b8e:	bf00      	nop
 8003b90:	3738      	adds	r7, #56	; 0x38
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}
 8003b96:	bf00      	nop
 8003b98:	40012000 	.word	0x40012000
 8003b9c:	40023800 	.word	0x40023800
 8003ba0:	40020000 	.word	0x40020000
 8003ba4:	40012100 	.word	0x40012100
 8003ba8:	40012200 	.word	0x40012200
 8003bac:	40020800 	.word	0x40020800

08003bb0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b08e      	sub	sp, #56	; 0x38
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	601a      	str	r2, [r3, #0]
 8003bc0:	605a      	str	r2, [r3, #4]
 8003bc2:	609a      	str	r2, [r3, #8]
 8003bc4:	60da      	str	r2, [r3, #12]
 8003bc6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a5c      	ldr	r2, [pc, #368]	; (8003d40 <HAL_I2C_MspInit+0x190>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d12d      	bne.n	8003c2e <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	623b      	str	r3, [r7, #32]
 8003bd6:	4b5b      	ldr	r3, [pc, #364]	; (8003d44 <HAL_I2C_MspInit+0x194>)
 8003bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bda:	4a5a      	ldr	r2, [pc, #360]	; (8003d44 <HAL_I2C_MspInit+0x194>)
 8003bdc:	f043 0302 	orr.w	r3, r3, #2
 8003be0:	6313      	str	r3, [r2, #48]	; 0x30
 8003be2:	4b58      	ldr	r3, [pc, #352]	; (8003d44 <HAL_I2C_MspInit+0x194>)
 8003be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003be6:	f003 0302 	and.w	r3, r3, #2
 8003bea:	623b      	str	r3, [r7, #32]
 8003bec:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = MAGN_SCL_Pin|MAGN_SDA_Pin;
 8003bee:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003bf2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003bf4:	2312      	movs	r3, #18
 8003bf6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003bfc:	2303      	movs	r3, #3
 8003bfe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003c00:	2304      	movs	r3, #4
 8003c02:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c08:	4619      	mov	r1, r3
 8003c0a:	484f      	ldr	r0, [pc, #316]	; (8003d48 <HAL_I2C_MspInit+0x198>)
 8003c0c:	f003 f9c8 	bl	8006fa0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003c10:	2300      	movs	r3, #0
 8003c12:	61fb      	str	r3, [r7, #28]
 8003c14:	4b4b      	ldr	r3, [pc, #300]	; (8003d44 <HAL_I2C_MspInit+0x194>)
 8003c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c18:	4a4a      	ldr	r2, [pc, #296]	; (8003d44 <HAL_I2C_MspInit+0x194>)
 8003c1a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003c1e:	6413      	str	r3, [r2, #64]	; 0x40
 8003c20:	4b48      	ldr	r3, [pc, #288]	; (8003d44 <HAL_I2C_MspInit+0x194>)
 8003c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c28:	61fb      	str	r3, [r7, #28]
 8003c2a:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8003c2c:	e083      	b.n	8003d36 <HAL_I2C_MspInit+0x186>
  else if(hi2c->Instance==I2C2)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a46      	ldr	r2, [pc, #280]	; (8003d4c <HAL_I2C_MspInit+0x19c>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d12d      	bne.n	8003c94 <HAL_I2C_MspInit+0xe4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c38:	2300      	movs	r3, #0
 8003c3a:	61bb      	str	r3, [r7, #24]
 8003c3c:	4b41      	ldr	r3, [pc, #260]	; (8003d44 <HAL_I2C_MspInit+0x194>)
 8003c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c40:	4a40      	ldr	r2, [pc, #256]	; (8003d44 <HAL_I2C_MspInit+0x194>)
 8003c42:	f043 0302 	orr.w	r3, r3, #2
 8003c46:	6313      	str	r3, [r2, #48]	; 0x30
 8003c48:	4b3e      	ldr	r3, [pc, #248]	; (8003d44 <HAL_I2C_MspInit+0x194>)
 8003c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c4c:	f003 0302 	and.w	r3, r3, #2
 8003c50:	61bb      	str	r3, [r7, #24]
 8003c52:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = PRESS_SCL_Pin|PRESS_SDA_Pin;
 8003c54:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003c58:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003c5a:	2312      	movs	r3, #18
 8003c5c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c5e:	2300      	movs	r3, #0
 8003c60:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c62:	2303      	movs	r3, #3
 8003c64:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003c66:	2304      	movs	r3, #4
 8003c68:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c6e:	4619      	mov	r1, r3
 8003c70:	4835      	ldr	r0, [pc, #212]	; (8003d48 <HAL_I2C_MspInit+0x198>)
 8003c72:	f003 f995 	bl	8006fa0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003c76:	2300      	movs	r3, #0
 8003c78:	617b      	str	r3, [r7, #20]
 8003c7a:	4b32      	ldr	r3, [pc, #200]	; (8003d44 <HAL_I2C_MspInit+0x194>)
 8003c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c7e:	4a31      	ldr	r2, [pc, #196]	; (8003d44 <HAL_I2C_MspInit+0x194>)
 8003c80:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003c84:	6413      	str	r3, [r2, #64]	; 0x40
 8003c86:	4b2f      	ldr	r3, [pc, #188]	; (8003d44 <HAL_I2C_MspInit+0x194>)
 8003c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c8e:	617b      	str	r3, [r7, #20]
 8003c90:	697b      	ldr	r3, [r7, #20]
}
 8003c92:	e050      	b.n	8003d36 <HAL_I2C_MspInit+0x186>
  else if(hi2c->Instance==I2C3)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a2d      	ldr	r2, [pc, #180]	; (8003d50 <HAL_I2C_MspInit+0x1a0>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d14b      	bne.n	8003d36 <HAL_I2C_MspInit+0x186>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	613b      	str	r3, [r7, #16]
 8003ca2:	4b28      	ldr	r3, [pc, #160]	; (8003d44 <HAL_I2C_MspInit+0x194>)
 8003ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ca6:	4a27      	ldr	r2, [pc, #156]	; (8003d44 <HAL_I2C_MspInit+0x194>)
 8003ca8:	f043 0304 	orr.w	r3, r3, #4
 8003cac:	6313      	str	r3, [r2, #48]	; 0x30
 8003cae:	4b25      	ldr	r3, [pc, #148]	; (8003d44 <HAL_I2C_MspInit+0x194>)
 8003cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cb2:	f003 0304 	and.w	r3, r3, #4
 8003cb6:	613b      	str	r3, [r7, #16]
 8003cb8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003cba:	2300      	movs	r3, #0
 8003cbc:	60fb      	str	r3, [r7, #12]
 8003cbe:	4b21      	ldr	r3, [pc, #132]	; (8003d44 <HAL_I2C_MspInit+0x194>)
 8003cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cc2:	4a20      	ldr	r2, [pc, #128]	; (8003d44 <HAL_I2C_MspInit+0x194>)
 8003cc4:	f043 0301 	orr.w	r3, r3, #1
 8003cc8:	6313      	str	r3, [r2, #48]	; 0x30
 8003cca:	4b1e      	ldr	r3, [pc, #120]	; (8003d44 <HAL_I2C_MspInit+0x194>)
 8003ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cce:	f003 0301 	and.w	r3, r3, #1
 8003cd2:	60fb      	str	r3, [r7, #12]
 8003cd4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003cd6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003cda:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003cdc:	2312      	movs	r3, #18
 8003cde:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ce4:	2303      	movs	r3, #3
 8003ce6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003ce8:	2304      	movs	r3, #4
 8003cea:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003cec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003cf0:	4619      	mov	r1, r3
 8003cf2:	4818      	ldr	r0, [pc, #96]	; (8003d54 <HAL_I2C_MspInit+0x1a4>)
 8003cf4:	f003 f954 	bl	8006fa0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003cf8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003cfc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003cfe:	2312      	movs	r3, #18
 8003d00:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d02:	2300      	movs	r3, #0
 8003d04:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d06:	2303      	movs	r3, #3
 8003d08:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003d0a:	2304      	movs	r3, #4
 8003d0c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d12:	4619      	mov	r1, r3
 8003d14:	4810      	ldr	r0, [pc, #64]	; (8003d58 <HAL_I2C_MspInit+0x1a8>)
 8003d16:	f003 f943 	bl	8006fa0 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	60bb      	str	r3, [r7, #8]
 8003d1e:	4b09      	ldr	r3, [pc, #36]	; (8003d44 <HAL_I2C_MspInit+0x194>)
 8003d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d22:	4a08      	ldr	r2, [pc, #32]	; (8003d44 <HAL_I2C_MspInit+0x194>)
 8003d24:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003d28:	6413      	str	r3, [r2, #64]	; 0x40
 8003d2a:	4b06      	ldr	r3, [pc, #24]	; (8003d44 <HAL_I2C_MspInit+0x194>)
 8003d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d2e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003d32:	60bb      	str	r3, [r7, #8]
 8003d34:	68bb      	ldr	r3, [r7, #8]
}
 8003d36:	bf00      	nop
 8003d38:	3738      	adds	r7, #56	; 0x38
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd80      	pop	{r7, pc}
 8003d3e:	bf00      	nop
 8003d40:	40005400 	.word	0x40005400
 8003d44:	40023800 	.word	0x40023800
 8003d48:	40020400 	.word	0x40020400
 8003d4c:	40005800 	.word	0x40005800
 8003d50:	40005c00 	.word	0x40005c00
 8003d54:	40020800 	.word	0x40020800
 8003d58:	40020000 	.word	0x40020000

08003d5c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b08a      	sub	sp, #40	; 0x28
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d64:	f107 0314 	add.w	r3, r7, #20
 8003d68:	2200      	movs	r2, #0
 8003d6a:	601a      	str	r2, [r3, #0]
 8003d6c:	605a      	str	r2, [r3, #4]
 8003d6e:	609a      	str	r2, [r3, #8]
 8003d70:	60da      	str	r2, [r3, #12]
 8003d72:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a19      	ldr	r2, [pc, #100]	; (8003de0 <HAL_SPI_MspInit+0x84>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d12c      	bne.n	8003dd8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003d7e:	2300      	movs	r3, #0
 8003d80:	613b      	str	r3, [r7, #16]
 8003d82:	4b18      	ldr	r3, [pc, #96]	; (8003de4 <HAL_SPI_MspInit+0x88>)
 8003d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d86:	4a17      	ldr	r2, [pc, #92]	; (8003de4 <HAL_SPI_MspInit+0x88>)
 8003d88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003d8c:	6413      	str	r3, [r2, #64]	; 0x40
 8003d8e:	4b15      	ldr	r3, [pc, #84]	; (8003de4 <HAL_SPI_MspInit+0x88>)
 8003d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d96:	613b      	str	r3, [r7, #16]
 8003d98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	60fb      	str	r3, [r7, #12]
 8003d9e:	4b11      	ldr	r3, [pc, #68]	; (8003de4 <HAL_SPI_MspInit+0x88>)
 8003da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003da2:	4a10      	ldr	r2, [pc, #64]	; (8003de4 <HAL_SPI_MspInit+0x88>)
 8003da4:	f043 0302 	orr.w	r3, r3, #2
 8003da8:	6313      	str	r3, [r2, #48]	; 0x30
 8003daa:	4b0e      	ldr	r3, [pc, #56]	; (8003de4 <HAL_SPI_MspInit+0x88>)
 8003dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dae:	f003 0302 	and.w	r3, r3, #2
 8003db2:	60fb      	str	r3, [r7, #12]
 8003db4:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = IMU_SCK_Pin|IMU_MISO_Pin|IMU_MOSI_Pin;
 8003db6:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8003dba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dbc:	2302      	movs	r3, #2
 8003dbe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003dc4:	2303      	movs	r3, #3
 8003dc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003dc8:	2305      	movs	r3, #5
 8003dca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003dcc:	f107 0314 	add.w	r3, r7, #20
 8003dd0:	4619      	mov	r1, r3
 8003dd2:	4805      	ldr	r0, [pc, #20]	; (8003de8 <HAL_SPI_MspInit+0x8c>)
 8003dd4:	f003 f8e4 	bl	8006fa0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8003dd8:	bf00      	nop
 8003dda:	3728      	adds	r7, #40	; 0x28
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bd80      	pop	{r7, pc}
 8003de0:	40003800 	.word	0x40003800
 8003de4:	40023800 	.word	0x40023800
 8003de8:	40020400 	.word	0x40020400

08003dec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b08e      	sub	sp, #56	; 0x38
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003df4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003df8:	2200      	movs	r2, #0
 8003dfa:	601a      	str	r2, [r3, #0]
 8003dfc:	605a      	str	r2, [r3, #4]
 8003dfe:	609a      	str	r2, [r3, #8]
 8003e00:	60da      	str	r2, [r3, #12]
 8003e02:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e0c:	d134      	bne.n	8003e78 <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003e0e:	2300      	movs	r3, #0
 8003e10:	623b      	str	r3, [r7, #32]
 8003e12:	4b55      	ldr	r3, [pc, #340]	; (8003f68 <HAL_TIM_Base_MspInit+0x17c>)
 8003e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e16:	4a54      	ldr	r2, [pc, #336]	; (8003f68 <HAL_TIM_Base_MspInit+0x17c>)
 8003e18:	f043 0301 	orr.w	r3, r3, #1
 8003e1c:	6413      	str	r3, [r2, #64]	; 0x40
 8003e1e:	4b52      	ldr	r3, [pc, #328]	; (8003f68 <HAL_TIM_Base_MspInit+0x17c>)
 8003e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e22:	f003 0301 	and.w	r3, r3, #1
 8003e26:	623b      	str	r3, [r7, #32]
 8003e28:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	61fb      	str	r3, [r7, #28]
 8003e2e:	4b4e      	ldr	r3, [pc, #312]	; (8003f68 <HAL_TIM_Base_MspInit+0x17c>)
 8003e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e32:	4a4d      	ldr	r2, [pc, #308]	; (8003f68 <HAL_TIM_Base_MspInit+0x17c>)
 8003e34:	f043 0301 	orr.w	r3, r3, #1
 8003e38:	6313      	str	r3, [r2, #48]	; 0x30
 8003e3a:	4b4b      	ldr	r3, [pc, #300]	; (8003f68 <HAL_TIM_Base_MspInit+0x17c>)
 8003e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e3e:	f003 0301 	and.w	r3, r3, #1
 8003e42:	61fb      	str	r3, [r7, #28]
 8003e44:	69fb      	ldr	r3, [r7, #28]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = ECHO_Pin;
 8003e46:	2301      	movs	r3, #1
 8003e48:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e4a:	2302      	movs	r3, #2
 8003e4c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e52:	2300      	movs	r3, #0
 8003e54:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003e56:	2301      	movs	r3, #1
 8003e58:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ECHO_GPIO_Port, &GPIO_InitStruct);
 8003e5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003e5e:	4619      	mov	r1, r3
 8003e60:	4842      	ldr	r0, [pc, #264]	; (8003f6c <HAL_TIM_Base_MspInit+0x180>)
 8003e62:	f003 f89d 	bl	8006fa0 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8003e66:	2200      	movs	r2, #0
 8003e68:	2105      	movs	r1, #5
 8003e6a:	201c      	movs	r0, #28
 8003e6c:	f002 fc5f 	bl	800672e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003e70:	201c      	movs	r0, #28
 8003e72:	f002 fc78 	bl	8006766 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8003e76:	e072      	b.n	8003f5e <HAL_TIM_Base_MspInit+0x172>
  else if(htim_base->Instance==TIM3)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a3c      	ldr	r2, [pc, #240]	; (8003f70 <HAL_TIM_Base_MspInit+0x184>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d10e      	bne.n	8003ea0 <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003e82:	2300      	movs	r3, #0
 8003e84:	61bb      	str	r3, [r7, #24]
 8003e86:	4b38      	ldr	r3, [pc, #224]	; (8003f68 <HAL_TIM_Base_MspInit+0x17c>)
 8003e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e8a:	4a37      	ldr	r2, [pc, #220]	; (8003f68 <HAL_TIM_Base_MspInit+0x17c>)
 8003e8c:	f043 0302 	orr.w	r3, r3, #2
 8003e90:	6413      	str	r3, [r2, #64]	; 0x40
 8003e92:	4b35      	ldr	r3, [pc, #212]	; (8003f68 <HAL_TIM_Base_MspInit+0x17c>)
 8003e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e96:	f003 0302 	and.w	r3, r3, #2
 8003e9a:	61bb      	str	r3, [r7, #24]
 8003e9c:	69bb      	ldr	r3, [r7, #24]
}
 8003e9e:	e05e      	b.n	8003f5e <HAL_TIM_Base_MspInit+0x172>
  else if(htim_base->Instance==TIM4)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a33      	ldr	r2, [pc, #204]	; (8003f74 <HAL_TIM_Base_MspInit+0x188>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d10e      	bne.n	8003ec8 <HAL_TIM_Base_MspInit+0xdc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003eaa:	2300      	movs	r3, #0
 8003eac:	617b      	str	r3, [r7, #20]
 8003eae:	4b2e      	ldr	r3, [pc, #184]	; (8003f68 <HAL_TIM_Base_MspInit+0x17c>)
 8003eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb2:	4a2d      	ldr	r2, [pc, #180]	; (8003f68 <HAL_TIM_Base_MspInit+0x17c>)
 8003eb4:	f043 0304 	orr.w	r3, r3, #4
 8003eb8:	6413      	str	r3, [r2, #64]	; 0x40
 8003eba:	4b2b      	ldr	r3, [pc, #172]	; (8003f68 <HAL_TIM_Base_MspInit+0x17c>)
 8003ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ebe:	f003 0304 	and.w	r3, r3, #4
 8003ec2:	617b      	str	r3, [r7, #20]
 8003ec4:	697b      	ldr	r3, [r7, #20]
}
 8003ec6:	e04a      	b.n	8003f5e <HAL_TIM_Base_MspInit+0x172>
  else if(htim_base->Instance==TIM6)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a2a      	ldr	r2, [pc, #168]	; (8003f78 <HAL_TIM_Base_MspInit+0x18c>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d116      	bne.n	8003f00 <HAL_TIM_Base_MspInit+0x114>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	613b      	str	r3, [r7, #16]
 8003ed6:	4b24      	ldr	r3, [pc, #144]	; (8003f68 <HAL_TIM_Base_MspInit+0x17c>)
 8003ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eda:	4a23      	ldr	r2, [pc, #140]	; (8003f68 <HAL_TIM_Base_MspInit+0x17c>)
 8003edc:	f043 0310 	orr.w	r3, r3, #16
 8003ee0:	6413      	str	r3, [r2, #64]	; 0x40
 8003ee2:	4b21      	ldr	r3, [pc, #132]	; (8003f68 <HAL_TIM_Base_MspInit+0x17c>)
 8003ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee6:	f003 0310 	and.w	r3, r3, #16
 8003eea:	613b      	str	r3, [r7, #16]
 8003eec:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8003eee:	2200      	movs	r2, #0
 8003ef0:	2105      	movs	r1, #5
 8003ef2:	2036      	movs	r0, #54	; 0x36
 8003ef4:	f002 fc1b 	bl	800672e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003ef8:	2036      	movs	r0, #54	; 0x36
 8003efa:	f002 fc34 	bl	8006766 <HAL_NVIC_EnableIRQ>
}
 8003efe:	e02e      	b.n	8003f5e <HAL_TIM_Base_MspInit+0x172>
  else if(htim_base->Instance==TIM7)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a1d      	ldr	r2, [pc, #116]	; (8003f7c <HAL_TIM_Base_MspInit+0x190>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d116      	bne.n	8003f38 <HAL_TIM_Base_MspInit+0x14c>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	60fb      	str	r3, [r7, #12]
 8003f0e:	4b16      	ldr	r3, [pc, #88]	; (8003f68 <HAL_TIM_Base_MspInit+0x17c>)
 8003f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f12:	4a15      	ldr	r2, [pc, #84]	; (8003f68 <HAL_TIM_Base_MspInit+0x17c>)
 8003f14:	f043 0320 	orr.w	r3, r3, #32
 8003f18:	6413      	str	r3, [r2, #64]	; 0x40
 8003f1a:	4b13      	ldr	r3, [pc, #76]	; (8003f68 <HAL_TIM_Base_MspInit+0x17c>)
 8003f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f1e:	f003 0320 	and.w	r3, r3, #32
 8003f22:	60fb      	str	r3, [r7, #12]
 8003f24:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 8003f26:	2200      	movs	r2, #0
 8003f28:	2105      	movs	r1, #5
 8003f2a:	2037      	movs	r0, #55	; 0x37
 8003f2c:	f002 fbff 	bl	800672e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8003f30:	2037      	movs	r0, #55	; 0x37
 8003f32:	f002 fc18 	bl	8006766 <HAL_NVIC_EnableIRQ>
}
 8003f36:	e012      	b.n	8003f5e <HAL_TIM_Base_MspInit+0x172>
  else if(htim_base->Instance==TIM10)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a10      	ldr	r2, [pc, #64]	; (8003f80 <HAL_TIM_Base_MspInit+0x194>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d10d      	bne.n	8003f5e <HAL_TIM_Base_MspInit+0x172>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8003f42:	2300      	movs	r3, #0
 8003f44:	60bb      	str	r3, [r7, #8]
 8003f46:	4b08      	ldr	r3, [pc, #32]	; (8003f68 <HAL_TIM_Base_MspInit+0x17c>)
 8003f48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f4a:	4a07      	ldr	r2, [pc, #28]	; (8003f68 <HAL_TIM_Base_MspInit+0x17c>)
 8003f4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f50:	6453      	str	r3, [r2, #68]	; 0x44
 8003f52:	4b05      	ldr	r3, [pc, #20]	; (8003f68 <HAL_TIM_Base_MspInit+0x17c>)
 8003f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f5a:	60bb      	str	r3, [r7, #8]
 8003f5c:	68bb      	ldr	r3, [r7, #8]
}
 8003f5e:	bf00      	nop
 8003f60:	3738      	adds	r7, #56	; 0x38
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}
 8003f66:	bf00      	nop
 8003f68:	40023800 	.word	0x40023800
 8003f6c:	40020000 	.word	0x40020000
 8003f70:	40000400 	.word	0x40000400
 8003f74:	40000800 	.word	0x40000800
 8003f78:	40001000 	.word	0x40001000
 8003f7c:	40001400 	.word	0x40001400
 8003f80:	40014400 	.word	0x40014400

08003f84 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b08a      	sub	sp, #40	; 0x28
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f8c:	f107 0314 	add.w	r3, r7, #20
 8003f90:	2200      	movs	r2, #0
 8003f92:	601a      	str	r2, [r3, #0]
 8003f94:	605a      	str	r2, [r3, #4]
 8003f96:	609a      	str	r2, [r3, #8]
 8003f98:	60da      	str	r2, [r3, #12]
 8003f9a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a21      	ldr	r2, [pc, #132]	; (8004028 <HAL_TIM_MspPostInit+0xa4>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d13b      	bne.n	800401e <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	613b      	str	r3, [r7, #16]
 8003faa:	4b20      	ldr	r3, [pc, #128]	; (800402c <HAL_TIM_MspPostInit+0xa8>)
 8003fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fae:	4a1f      	ldr	r2, [pc, #124]	; (800402c <HAL_TIM_MspPostInit+0xa8>)
 8003fb0:	f043 0301 	orr.w	r3, r3, #1
 8003fb4:	6313      	str	r3, [r2, #48]	; 0x30
 8003fb6:	4b1d      	ldr	r3, [pc, #116]	; (800402c <HAL_TIM_MspPostInit+0xa8>)
 8003fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fba:	f003 0301 	and.w	r3, r3, #1
 8003fbe:	613b      	str	r3, [r7, #16]
 8003fc0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	60fb      	str	r3, [r7, #12]
 8003fc6:	4b19      	ldr	r3, [pc, #100]	; (800402c <HAL_TIM_MspPostInit+0xa8>)
 8003fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fca:	4a18      	ldr	r2, [pc, #96]	; (800402c <HAL_TIM_MspPostInit+0xa8>)
 8003fcc:	f043 0302 	orr.w	r3, r3, #2
 8003fd0:	6313      	str	r3, [r2, #48]	; 0x30
 8003fd2:	4b16      	ldr	r3, [pc, #88]	; (800402c <HAL_TIM_MspPostInit+0xa8>)
 8003fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fd6:	f003 0302 	and.w	r3, r3, #2
 8003fda:	60fb      	str	r3, [r7, #12]
 8003fdc:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = PWM1_Pin|PWM2_Pin;
 8003fde:	23c0      	movs	r3, #192	; 0xc0
 8003fe0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fe2:	2302      	movs	r3, #2
 8003fe4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fea:	2300      	movs	r3, #0
 8003fec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003fee:	2302      	movs	r3, #2
 8003ff0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ff2:	f107 0314 	add.w	r3, r7, #20
 8003ff6:	4619      	mov	r1, r3
 8003ff8:	480d      	ldr	r0, [pc, #52]	; (8004030 <HAL_TIM_MspPostInit+0xac>)
 8003ffa:	f002 ffd1 	bl	8006fa0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PWM3_Pin|PWM4_Pin;
 8003ffe:	2303      	movs	r3, #3
 8004000:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004002:	2302      	movs	r3, #2
 8004004:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004006:	2300      	movs	r3, #0
 8004008:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800400a:	2300      	movs	r3, #0
 800400c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800400e:	2302      	movs	r3, #2
 8004010:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004012:	f107 0314 	add.w	r3, r7, #20
 8004016:	4619      	mov	r1, r3
 8004018:	4806      	ldr	r0, [pc, #24]	; (8004034 <HAL_TIM_MspPostInit+0xb0>)
 800401a:	f002 ffc1 	bl	8006fa0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800401e:	bf00      	nop
 8004020:	3728      	adds	r7, #40	; 0x28
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}
 8004026:	bf00      	nop
 8004028:	40000400 	.word	0x40000400
 800402c:	40023800 	.word	0x40023800
 8004030:	40020000 	.word	0x40020000
 8004034:	40020400 	.word	0x40020400

08004038 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b090      	sub	sp, #64	; 0x40
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004040:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004044:	2200      	movs	r2, #0
 8004046:	601a      	str	r2, [r3, #0]
 8004048:	605a      	str	r2, [r3, #4]
 800404a:	609a      	str	r2, [r3, #8]
 800404c:	60da      	str	r2, [r3, #12]
 800404e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a81      	ldr	r2, [pc, #516]	; (800425c <HAL_UART_MspInit+0x224>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d15d      	bne.n	8004116 <HAL_UART_MspInit+0xde>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800405a:	2300      	movs	r3, #0
 800405c:	62bb      	str	r3, [r7, #40]	; 0x28
 800405e:	4b80      	ldr	r3, [pc, #512]	; (8004260 <HAL_UART_MspInit+0x228>)
 8004060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004062:	4a7f      	ldr	r2, [pc, #508]	; (8004260 <HAL_UART_MspInit+0x228>)
 8004064:	f043 0310 	orr.w	r3, r3, #16
 8004068:	6453      	str	r3, [r2, #68]	; 0x44
 800406a:	4b7d      	ldr	r3, [pc, #500]	; (8004260 <HAL_UART_MspInit+0x228>)
 800406c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800406e:	f003 0310 	and.w	r3, r3, #16
 8004072:	62bb      	str	r3, [r7, #40]	; 0x28
 8004074:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004076:	2300      	movs	r3, #0
 8004078:	627b      	str	r3, [r7, #36]	; 0x24
 800407a:	4b79      	ldr	r3, [pc, #484]	; (8004260 <HAL_UART_MspInit+0x228>)
 800407c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800407e:	4a78      	ldr	r2, [pc, #480]	; (8004260 <HAL_UART_MspInit+0x228>)
 8004080:	f043 0301 	orr.w	r3, r3, #1
 8004084:	6313      	str	r3, [r2, #48]	; 0x30
 8004086:	4b76      	ldr	r3, [pc, #472]	; (8004260 <HAL_UART_MspInit+0x228>)
 8004088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800408a:	f003 0301 	and.w	r3, r3, #1
 800408e:	627b      	str	r3, [r7, #36]	; 0x24
 8004090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = RECEIVER_TX_Pin|RECEIVER_RX_Pin;
 8004092:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8004096:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004098:	2302      	movs	r3, #2
 800409a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800409c:	2300      	movs	r3, #0
 800409e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040a0:	2303      	movs	r3, #3
 80040a2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80040a4:	2307      	movs	r3, #7
 80040a6:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040a8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80040ac:	4619      	mov	r1, r3
 80040ae:	486d      	ldr	r0, [pc, #436]	; (8004264 <HAL_UART_MspInit+0x22c>)
 80040b0:	f002 ff76 	bl	8006fa0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80040b4:	4b6c      	ldr	r3, [pc, #432]	; (8004268 <HAL_UART_MspInit+0x230>)
 80040b6:	4a6d      	ldr	r2, [pc, #436]	; (800426c <HAL_UART_MspInit+0x234>)
 80040b8:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80040ba:	4b6b      	ldr	r3, [pc, #428]	; (8004268 <HAL_UART_MspInit+0x230>)
 80040bc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80040c0:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80040c2:	4b69      	ldr	r3, [pc, #420]	; (8004268 <HAL_UART_MspInit+0x230>)
 80040c4:	2200      	movs	r2, #0
 80040c6:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80040c8:	4b67      	ldr	r3, [pc, #412]	; (8004268 <HAL_UART_MspInit+0x230>)
 80040ca:	2200      	movs	r2, #0
 80040cc:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80040ce:	4b66      	ldr	r3, [pc, #408]	; (8004268 <HAL_UART_MspInit+0x230>)
 80040d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80040d4:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80040d6:	4b64      	ldr	r3, [pc, #400]	; (8004268 <HAL_UART_MspInit+0x230>)
 80040d8:	2200      	movs	r2, #0
 80040da:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80040dc:	4b62      	ldr	r3, [pc, #392]	; (8004268 <HAL_UART_MspInit+0x230>)
 80040de:	2200      	movs	r2, #0
 80040e0:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80040e2:	4b61      	ldr	r3, [pc, #388]	; (8004268 <HAL_UART_MspInit+0x230>)
 80040e4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80040e8:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80040ea:	4b5f      	ldr	r3, [pc, #380]	; (8004268 <HAL_UART_MspInit+0x230>)
 80040ec:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80040f0:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80040f2:	4b5d      	ldr	r3, [pc, #372]	; (8004268 <HAL_UART_MspInit+0x230>)
 80040f4:	2200      	movs	r2, #0
 80040f6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80040f8:	485b      	ldr	r0, [pc, #364]	; (8004268 <HAL_UART_MspInit+0x230>)
 80040fa:	f002 fb4f 	bl	800679c <HAL_DMA_Init>
 80040fe:	4603      	mov	r3, r0
 8004100:	2b00      	cmp	r3, #0
 8004102:	d001      	beq.n	8004108 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 8004104:	f7ff fc7c 	bl	8003a00 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	4a57      	ldr	r2, [pc, #348]	; (8004268 <HAL_UART_MspInit+0x230>)
 800410c:	639a      	str	r2, [r3, #56]	; 0x38
 800410e:	4a56      	ldr	r2, [pc, #344]	; (8004268 <HAL_UART_MspInit+0x230>)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8004114:	e09d      	b.n	8004252 <HAL_UART_MspInit+0x21a>
  else if(huart->Instance==USART2)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a55      	ldr	r2, [pc, #340]	; (8004270 <HAL_UART_MspInit+0x238>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d134      	bne.n	800418a <HAL_UART_MspInit+0x152>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004120:	2300      	movs	r3, #0
 8004122:	623b      	str	r3, [r7, #32]
 8004124:	4b4e      	ldr	r3, [pc, #312]	; (8004260 <HAL_UART_MspInit+0x228>)
 8004126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004128:	4a4d      	ldr	r2, [pc, #308]	; (8004260 <HAL_UART_MspInit+0x228>)
 800412a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800412e:	6413      	str	r3, [r2, #64]	; 0x40
 8004130:	4b4b      	ldr	r3, [pc, #300]	; (8004260 <HAL_UART_MspInit+0x228>)
 8004132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004134:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004138:	623b      	str	r3, [r7, #32]
 800413a:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800413c:	2300      	movs	r3, #0
 800413e:	61fb      	str	r3, [r7, #28]
 8004140:	4b47      	ldr	r3, [pc, #284]	; (8004260 <HAL_UART_MspInit+0x228>)
 8004142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004144:	4a46      	ldr	r2, [pc, #280]	; (8004260 <HAL_UART_MspInit+0x228>)
 8004146:	f043 0301 	orr.w	r3, r3, #1
 800414a:	6313      	str	r3, [r2, #48]	; 0x30
 800414c:	4b44      	ldr	r3, [pc, #272]	; (8004260 <HAL_UART_MspInit+0x228>)
 800414e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004150:	f003 0301 	and.w	r3, r3, #1
 8004154:	61fb      	str	r3, [r7, #28]
 8004156:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004158:	230c      	movs	r3, #12
 800415a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800415c:	2302      	movs	r3, #2
 800415e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004160:	2300      	movs	r3, #0
 8004162:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004164:	2303      	movs	r3, #3
 8004166:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004168:	2307      	movs	r3, #7
 800416a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800416c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004170:	4619      	mov	r1, r3
 8004172:	483c      	ldr	r0, [pc, #240]	; (8004264 <HAL_UART_MspInit+0x22c>)
 8004174:	f002 ff14 	bl	8006fa0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8004178:	2200      	movs	r2, #0
 800417a:	2105      	movs	r1, #5
 800417c:	2026      	movs	r0, #38	; 0x26
 800417e:	f002 fad6 	bl	800672e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004182:	2026      	movs	r0, #38	; 0x26
 8004184:	f002 faef 	bl	8006766 <HAL_NVIC_EnableIRQ>
}
 8004188:	e063      	b.n	8004252 <HAL_UART_MspInit+0x21a>
  else if(huart->Instance==USART3)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a39      	ldr	r2, [pc, #228]	; (8004274 <HAL_UART_MspInit+0x23c>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d12d      	bne.n	80041f0 <HAL_UART_MspInit+0x1b8>
    __HAL_RCC_USART3_CLK_ENABLE();
 8004194:	2300      	movs	r3, #0
 8004196:	61bb      	str	r3, [r7, #24]
 8004198:	4b31      	ldr	r3, [pc, #196]	; (8004260 <HAL_UART_MspInit+0x228>)
 800419a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800419c:	4a30      	ldr	r2, [pc, #192]	; (8004260 <HAL_UART_MspInit+0x228>)
 800419e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80041a2:	6413      	str	r3, [r2, #64]	; 0x40
 80041a4:	4b2e      	ldr	r3, [pc, #184]	; (8004260 <HAL_UART_MspInit+0x228>)
 80041a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80041ac:	61bb      	str	r3, [r7, #24]
 80041ae:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80041b0:	2300      	movs	r3, #0
 80041b2:	617b      	str	r3, [r7, #20]
 80041b4:	4b2a      	ldr	r3, [pc, #168]	; (8004260 <HAL_UART_MspInit+0x228>)
 80041b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041b8:	4a29      	ldr	r2, [pc, #164]	; (8004260 <HAL_UART_MspInit+0x228>)
 80041ba:	f043 0304 	orr.w	r3, r3, #4
 80041be:	6313      	str	r3, [r2, #48]	; 0x30
 80041c0:	4b27      	ldr	r3, [pc, #156]	; (8004260 <HAL_UART_MspInit+0x228>)
 80041c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041c4:	f003 0304 	and.w	r3, r3, #4
 80041c8:	617b      	str	r3, [r7, #20]
 80041ca:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GNSS_TX_Pin|GNSS_RX_Pin;
 80041cc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80041d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041d2:	2302      	movs	r3, #2
 80041d4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041d6:	2300      	movs	r3, #0
 80041d8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80041da:	2303      	movs	r3, #3
 80041dc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80041de:	2307      	movs	r3, #7
 80041e0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80041e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80041e6:	4619      	mov	r1, r3
 80041e8:	4823      	ldr	r0, [pc, #140]	; (8004278 <HAL_UART_MspInit+0x240>)
 80041ea:	f002 fed9 	bl	8006fa0 <HAL_GPIO_Init>
}
 80041ee:	e030      	b.n	8004252 <HAL_UART_MspInit+0x21a>
  else if(huart->Instance==USART6)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a21      	ldr	r2, [pc, #132]	; (800427c <HAL_UART_MspInit+0x244>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d12b      	bne.n	8004252 <HAL_UART_MspInit+0x21a>
    __HAL_RCC_USART6_CLK_ENABLE();
 80041fa:	2300      	movs	r3, #0
 80041fc:	613b      	str	r3, [r7, #16]
 80041fe:	4b18      	ldr	r3, [pc, #96]	; (8004260 <HAL_UART_MspInit+0x228>)
 8004200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004202:	4a17      	ldr	r2, [pc, #92]	; (8004260 <HAL_UART_MspInit+0x228>)
 8004204:	f043 0320 	orr.w	r3, r3, #32
 8004208:	6453      	str	r3, [r2, #68]	; 0x44
 800420a:	4b15      	ldr	r3, [pc, #84]	; (8004260 <HAL_UART_MspInit+0x228>)
 800420c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800420e:	f003 0320 	and.w	r3, r3, #32
 8004212:	613b      	str	r3, [r7, #16]
 8004214:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004216:	2300      	movs	r3, #0
 8004218:	60fb      	str	r3, [r7, #12]
 800421a:	4b11      	ldr	r3, [pc, #68]	; (8004260 <HAL_UART_MspInit+0x228>)
 800421c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800421e:	4a10      	ldr	r2, [pc, #64]	; (8004260 <HAL_UART_MspInit+0x228>)
 8004220:	f043 0304 	orr.w	r3, r3, #4
 8004224:	6313      	str	r3, [r2, #48]	; 0x30
 8004226:	4b0e      	ldr	r3, [pc, #56]	; (8004260 <HAL_UART_MspInit+0x228>)
 8004228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800422a:	f003 0304 	and.w	r3, r3, #4
 800422e:	60fb      	str	r3, [r7, #12]
 8004230:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004232:	23c0      	movs	r3, #192	; 0xc0
 8004234:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004236:	2302      	movs	r3, #2
 8004238:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800423a:	2300      	movs	r3, #0
 800423c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800423e:	2303      	movs	r3, #3
 8004240:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8004242:	2308      	movs	r3, #8
 8004244:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004246:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800424a:	4619      	mov	r1, r3
 800424c:	480a      	ldr	r0, [pc, #40]	; (8004278 <HAL_UART_MspInit+0x240>)
 800424e:	f002 fea7 	bl	8006fa0 <HAL_GPIO_Init>
}
 8004252:	bf00      	nop
 8004254:	3740      	adds	r7, #64	; 0x40
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}
 800425a:	bf00      	nop
 800425c:	40011000 	.word	0x40011000
 8004260:	40023800 	.word	0x40023800
 8004264:	40020000 	.word	0x40020000
 8004268:	200009a4 	.word	0x200009a4
 800426c:	40026440 	.word	0x40026440
 8004270:	40004400 	.word	0x40004400
 8004274:	40004800 	.word	0x40004800
 8004278:	40020800 	.word	0x40020800
 800427c:	40011400 	.word	0x40011400

08004280 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004280:	b480      	push	{r7}
 8004282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004284:	e7fe      	b.n	8004284 <NMI_Handler+0x4>

08004286 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004286:	b480      	push	{r7}
 8004288:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800428a:	e7fe      	b.n	800428a <HardFault_Handler+0x4>

0800428c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800428c:	b480      	push	{r7}
 800428e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004290:	e7fe      	b.n	8004290 <MemManage_Handler+0x4>

08004292 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004292:	b480      	push	{r7}
 8004294:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004296:	e7fe      	b.n	8004296 <BusFault_Handler+0x4>

08004298 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004298:	b480      	push	{r7}
 800429a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800429c:	e7fe      	b.n	800429c <UsageFault_Handler+0x4>

0800429e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800429e:	b480      	push	{r7}
 80042a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80042a2:	bf00      	nop
 80042a4:	46bd      	mov	sp, r7
 80042a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042aa:	4770      	bx	lr

080042ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80042b0:	f001 febc 	bl	800602c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80042b4:	f00b ff84 	bl	80101c0 <xTaskGetSchedulerState>
 80042b8:	4603      	mov	r3, r0
 80042ba:	2b01      	cmp	r3, #1
 80042bc:	d001      	beq.n	80042c2 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80042be:	f00c fa4b 	bl	8010758 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80042c2:	bf00      	nop
 80042c4:	bd80      	pop	{r7, pc}

080042c6 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80042c6:	b580      	push	{r7, lr}
 80042c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_Pin);
 80042ca:	2001      	movs	r0, #1
 80042cc:	f003 f838 	bl	8007340 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80042d0:	bf00      	nop
 80042d2:	bd80      	pop	{r7, pc}

080042d4 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IT_PRESS_Pin);
 80042d8:	2004      	movs	r0, #4
 80042da:	f003 f831 	bl	8007340 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80042de:	bf00      	nop
 80042e0:	bd80      	pop	{r7, pc}
	...

080042e4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80042e8:	4802      	ldr	r0, [pc, #8]	; (80042f4 <TIM2_IRQHandler+0x10>)
 80042ea:	f005 fcaa 	bl	8009c42 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80042ee:	bf00      	nop
 80042f0:	bd80      	pop	{r7, pc}
 80042f2:	bf00      	nop
 80042f4:	200006e4 	.word	0x200006e4

080042f8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80042fc:	4802      	ldr	r0, [pc, #8]	; (8004308 <USART2_IRQHandler+0x10>)
 80042fe:	f006 fec1 	bl	800b084 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004302:	bf00      	nop
 8004304:	bd80      	pop	{r7, pc}
 8004306:	bf00      	nop
 8004308:	200008d8 	.word	0x200008d8

0800430c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IT_GYRO_Pin);
 8004310:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004314:	f003 f814 	bl	8007340 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(IT_ACC_Pin);
 8004318:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800431c:	f003 f810 	bl	8007340 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(IT_MAGN_Pin);
 8004320:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004324:	f003 f80c 	bl	8007340 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004328:	bf00      	nop
 800432a:	bd80      	pop	{r7, pc}

0800432c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004330:	4802      	ldr	r0, [pc, #8]	; (800433c <TIM6_DAC_IRQHandler+0x10>)
 8004332:	f005 fc86 	bl	8009c42 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8004336:	bf00      	nop
 8004338:	bd80      	pop	{r7, pc}
 800433a:	bf00      	nop
 800433c:	200007bc 	.word	0x200007bc

08004340 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8004344:	4802      	ldr	r0, [pc, #8]	; (8004350 <TIM7_IRQHandler+0x10>)
 8004346:	f005 fc7c 	bl	8009c42 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800434a:	bf00      	nop
 800434c:	bd80      	pop	{r7, pc}
 800434e:	bf00      	nop
 8004350:	20000804 	.word	0x20000804

08004354 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8004358:	4802      	ldr	r0, [pc, #8]	; (8004364 <DMA2_Stream2_IRQHandler+0x10>)
 800435a:	f002 fbb7 	bl	8006acc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800435e:	bf00      	nop
 8004360:	bd80      	pop	{r7, pc}
 8004362:	bf00      	nop
 8004364:	200009a4 	.word	0x200009a4

08004368 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004368:	b480      	push	{r7}
 800436a:	af00      	add	r7, sp, #0
  return 1;
 800436c:	2301      	movs	r3, #1
}
 800436e:	4618      	mov	r0, r3
 8004370:	46bd      	mov	sp, r7
 8004372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004376:	4770      	bx	lr

08004378 <_kill>:

int _kill(int pid, int sig)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b082      	sub	sp, #8
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
 8004380:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004382:	f00c fc23 	bl	8010bcc <__errno>
 8004386:	4603      	mov	r3, r0
 8004388:	2216      	movs	r2, #22
 800438a:	601a      	str	r2, [r3, #0]
  return -1;
 800438c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004390:	4618      	mov	r0, r3
 8004392:	3708      	adds	r7, #8
 8004394:	46bd      	mov	sp, r7
 8004396:	bd80      	pop	{r7, pc}

08004398 <_exit>:

void _exit (int status)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b082      	sub	sp, #8
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80043a0:	f04f 31ff 	mov.w	r1, #4294967295
 80043a4:	6878      	ldr	r0, [r7, #4]
 80043a6:	f7ff ffe7 	bl	8004378 <_kill>
  while (1) {}    /* Make sure we hang here */
 80043aa:	e7fe      	b.n	80043aa <_exit+0x12>

080043ac <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b086      	sub	sp, #24
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	60f8      	str	r0, [r7, #12]
 80043b4:	60b9      	str	r1, [r7, #8]
 80043b6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80043b8:	2300      	movs	r3, #0
 80043ba:	617b      	str	r3, [r7, #20]
 80043bc:	e00a      	b.n	80043d4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80043be:	f3af 8000 	nop.w
 80043c2:	4601      	mov	r1, r0
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	1c5a      	adds	r2, r3, #1
 80043c8:	60ba      	str	r2, [r7, #8]
 80043ca:	b2ca      	uxtb	r2, r1
 80043cc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	3301      	adds	r3, #1
 80043d2:	617b      	str	r3, [r7, #20]
 80043d4:	697a      	ldr	r2, [r7, #20]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	429a      	cmp	r2, r3
 80043da:	dbf0      	blt.n	80043be <_read+0x12>
  }

  return len;
 80043dc:	687b      	ldr	r3, [r7, #4]
}
 80043de:	4618      	mov	r0, r3
 80043e0:	3718      	adds	r7, #24
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd80      	pop	{r7, pc}

080043e6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80043e6:	b580      	push	{r7, lr}
 80043e8:	b086      	sub	sp, #24
 80043ea:	af00      	add	r7, sp, #0
 80043ec:	60f8      	str	r0, [r7, #12]
 80043ee:	60b9      	str	r1, [r7, #8]
 80043f0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80043f2:	2300      	movs	r3, #0
 80043f4:	617b      	str	r3, [r7, #20]
 80043f6:	e009      	b.n	800440c <_write+0x26>
  {
    __io_putchar(*ptr++);
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	1c5a      	adds	r2, r3, #1
 80043fc:	60ba      	str	r2, [r7, #8]
 80043fe:	781b      	ldrb	r3, [r3, #0]
 8004400:	4618      	mov	r0, r3
 8004402:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	3301      	adds	r3, #1
 800440a:	617b      	str	r3, [r7, #20]
 800440c:	697a      	ldr	r2, [r7, #20]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	429a      	cmp	r2, r3
 8004412:	dbf1      	blt.n	80043f8 <_write+0x12>
  }
  return len;
 8004414:	687b      	ldr	r3, [r7, #4]
}
 8004416:	4618      	mov	r0, r3
 8004418:	3718      	adds	r7, #24
 800441a:	46bd      	mov	sp, r7
 800441c:	bd80      	pop	{r7, pc}

0800441e <_close>:

int _close(int file)
{
 800441e:	b480      	push	{r7}
 8004420:	b083      	sub	sp, #12
 8004422:	af00      	add	r7, sp, #0
 8004424:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004426:	f04f 33ff 	mov.w	r3, #4294967295
}
 800442a:	4618      	mov	r0, r3
 800442c:	370c      	adds	r7, #12
 800442e:	46bd      	mov	sp, r7
 8004430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004434:	4770      	bx	lr

08004436 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004436:	b480      	push	{r7}
 8004438:	b083      	sub	sp, #12
 800443a:	af00      	add	r7, sp, #0
 800443c:	6078      	str	r0, [r7, #4]
 800443e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004446:	605a      	str	r2, [r3, #4]
  return 0;
 8004448:	2300      	movs	r3, #0
}
 800444a:	4618      	mov	r0, r3
 800444c:	370c      	adds	r7, #12
 800444e:	46bd      	mov	sp, r7
 8004450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004454:	4770      	bx	lr

08004456 <_isatty>:

int _isatty(int file)
{
 8004456:	b480      	push	{r7}
 8004458:	b083      	sub	sp, #12
 800445a:	af00      	add	r7, sp, #0
 800445c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800445e:	2301      	movs	r3, #1
}
 8004460:	4618      	mov	r0, r3
 8004462:	370c      	adds	r7, #12
 8004464:	46bd      	mov	sp, r7
 8004466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446a:	4770      	bx	lr

0800446c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800446c:	b480      	push	{r7}
 800446e:	b085      	sub	sp, #20
 8004470:	af00      	add	r7, sp, #0
 8004472:	60f8      	str	r0, [r7, #12]
 8004474:	60b9      	str	r1, [r7, #8]
 8004476:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004478:	2300      	movs	r3, #0
}
 800447a:	4618      	mov	r0, r3
 800447c:	3714      	adds	r7, #20
 800447e:	46bd      	mov	sp, r7
 8004480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004484:	4770      	bx	lr
	...

08004488 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b086      	sub	sp, #24
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004490:	4a14      	ldr	r2, [pc, #80]	; (80044e4 <_sbrk+0x5c>)
 8004492:	4b15      	ldr	r3, [pc, #84]	; (80044e8 <_sbrk+0x60>)
 8004494:	1ad3      	subs	r3, r2, r3
 8004496:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004498:	697b      	ldr	r3, [r7, #20]
 800449a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800449c:	4b13      	ldr	r3, [pc, #76]	; (80044ec <_sbrk+0x64>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d102      	bne.n	80044aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80044a4:	4b11      	ldr	r3, [pc, #68]	; (80044ec <_sbrk+0x64>)
 80044a6:	4a12      	ldr	r2, [pc, #72]	; (80044f0 <_sbrk+0x68>)
 80044a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80044aa:	4b10      	ldr	r3, [pc, #64]	; (80044ec <_sbrk+0x64>)
 80044ac:	681a      	ldr	r2, [r3, #0]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	4413      	add	r3, r2
 80044b2:	693a      	ldr	r2, [r7, #16]
 80044b4:	429a      	cmp	r2, r3
 80044b6:	d207      	bcs.n	80044c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80044b8:	f00c fb88 	bl	8010bcc <__errno>
 80044bc:	4603      	mov	r3, r0
 80044be:	220c      	movs	r2, #12
 80044c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80044c2:	f04f 33ff 	mov.w	r3, #4294967295
 80044c6:	e009      	b.n	80044dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80044c8:	4b08      	ldr	r3, [pc, #32]	; (80044ec <_sbrk+0x64>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80044ce:	4b07      	ldr	r3, [pc, #28]	; (80044ec <_sbrk+0x64>)
 80044d0:	681a      	ldr	r2, [r3, #0]
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	4413      	add	r3, r2
 80044d6:	4a05      	ldr	r2, [pc, #20]	; (80044ec <_sbrk+0x64>)
 80044d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80044da:	68fb      	ldr	r3, [r7, #12]
}
 80044dc:	4618      	mov	r0, r3
 80044de:	3718      	adds	r7, #24
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bd80      	pop	{r7, pc}
 80044e4:	20020000 	.word	0x20020000
 80044e8:	00000400 	.word	0x00000400
 80044ec:	20002bf0 	.word	0x20002bf0
 80044f0:	20006968 	.word	0x20006968

080044f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80044f4:	b480      	push	{r7}
 80044f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80044f8:	4b06      	ldr	r3, [pc, #24]	; (8004514 <SystemInit+0x20>)
 80044fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044fe:	4a05      	ldr	r2, [pc, #20]	; (8004514 <SystemInit+0x20>)
 8004500:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004504:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004508:	bf00      	nop
 800450a:	46bd      	mov	sp, r7
 800450c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004510:	4770      	bx	lr
 8004512:	bf00      	nop
 8004514:	e000ed00 	.word	0xe000ed00

08004518 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004518:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004550 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800451c:	480d      	ldr	r0, [pc, #52]	; (8004554 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800451e:	490e      	ldr	r1, [pc, #56]	; (8004558 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004520:	4a0e      	ldr	r2, [pc, #56]	; (800455c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004522:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004524:	e002      	b.n	800452c <LoopCopyDataInit>

08004526 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004526:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004528:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800452a:	3304      	adds	r3, #4

0800452c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800452c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800452e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004530:	d3f9      	bcc.n	8004526 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004532:	4a0b      	ldr	r2, [pc, #44]	; (8004560 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004534:	4c0b      	ldr	r4, [pc, #44]	; (8004564 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004536:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004538:	e001      	b.n	800453e <LoopFillZerobss>

0800453a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800453a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800453c:	3204      	adds	r2, #4

0800453e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800453e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004540:	d3fb      	bcc.n	800453a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004542:	f7ff ffd7 	bl	80044f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004546:	f00c fb47 	bl	8010bd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800454a:	f7fc fff7 	bl	800153c <main>
  bx  lr    
 800454e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004550:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004554:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004558:	20000248 	.word	0x20000248
  ldr r2, =_sidata
 800455c:	080168c0 	.word	0x080168c0
  ldr r2, =_sbss
 8004560:	20000248 	.word	0x20000248
  ldr r4, =_ebss
 8004564:	20006964 	.word	0x20006964

08004568 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004568:	e7fe      	b.n	8004568 <ADC_IRQHandler>
	...

0800456c <altitudeKF>:
KF_Matrix22 Q = {0.25*SAMPLE_PERIOD*SAMPLE_PERIOD*SAMPLE_PERIOD*SAMPLE_PERIOD,0.5*SAMPLE_PERIOD*SAMPLE_PERIOD*SAMPLE_PERIOD,0.5*SAMPLE_PERIOD*SAMPLE_PERIOD*SAMPLE_PERIOD,SAMPLE_PERIOD*SAMPLE_PERIOD};
float R = 0.3*0.3;
float Lk = 0;
KF_Matrix22 eye = {1,0,0,1};

void altitudeKF(KF_Matrix21 prev_state, KF_Matrix21 *current_state, KF_Matrix22 P_prev, KF_Matrix22 *P, KF_Matrix21 meas){
 800456c:	b580      	push	{r7, lr}
 800456e:	b0ae      	sub	sp, #184	; 0xb8
 8004570:	af00      	add	r7, sp, #0
 8004572:	eeb0 4a40 	vmov.f32	s8, s0
 8004576:	eef0 4a60 	vmov.f32	s9, s1
 800457a:	61f8      	str	r0, [r7, #28]
 800457c:	eeb0 5a41 	vmov.f32	s10, s2
 8004580:	eef0 5a61 	vmov.f32	s11, s3
 8004584:	eeb0 6a42 	vmov.f32	s12, s4
 8004588:	eef0 6a62 	vmov.f32	s13, s5
 800458c:	60b9      	str	r1, [r7, #8]
 800458e:	eeb0 7a43 	vmov.f32	s14, s6
 8004592:	eef0 7a63 	vmov.f32	s15, s7
 8004596:	ed87 4a08 	vstr	s8, [r7, #32]
 800459a:	edc7 4a09 	vstr	s9, [r7, #36]	; 0x24
 800459e:	ed87 5a03 	vstr	s10, [r7, #12]
 80045a2:	edc7 5a04 	vstr	s11, [r7, #16]
 80045a6:	ed87 6a05 	vstr	s12, [r7, #20]
 80045aa:	edc7 6a06 	vstr	s13, [r7, #24]
 80045ae:	ed87 7a00 	vstr	s14, [r7]
 80045b2:	edc7 7a01 	vstr	s15, [r7, #4]
	// meas.a21 accz
	// meas.a11 h


	// prediction
	Sk = KF_matrix_add21(KF_matrix_multiply22_21(F, prev_state), KF_matrix_scalar_multi_21(G, meas.a21));
 80045b6:	ed97 5a08 	vldr	s10, [r7, #32]
 80045ba:	edd7 5a09 	vldr	s11, [r7, #36]	; 0x24
 80045be:	4bf8      	ldr	r3, [pc, #992]	; (80049a0 <altitudeKF+0x434>)
 80045c0:	ed93 6a00 	vldr	s12, [r3]
 80045c4:	edd3 6a01 	vldr	s13, [r3, #4]
 80045c8:	ed93 7a02 	vldr	s14, [r3, #8]
 80045cc:	edd3 7a03 	vldr	s15, [r3, #12]
 80045d0:	eeb0 2a45 	vmov.f32	s4, s10
 80045d4:	eef0 2a65 	vmov.f32	s5, s11
 80045d8:	eeb0 0a46 	vmov.f32	s0, s12
 80045dc:	eef0 0a66 	vmov.f32	s1, s13
 80045e0:	eeb0 1a47 	vmov.f32	s2, s14
 80045e4:	eef0 1a67 	vmov.f32	s3, s15
 80045e8:	f000 faa0 	bl	8004b2c <KF_matrix_multiply22_21>
 80045ec:	eeb0 7a40 	vmov.f32	s14, s0
 80045f0:	eef0 7a60 	vmov.f32	s15, s1
 80045f4:	ed87 7a16 	vstr	s14, [r7, #88]	; 0x58
 80045f8:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
 80045fc:	edd7 6a01 	vldr	s13, [r7, #4]
 8004600:	4be8      	ldr	r3, [pc, #928]	; (80049a4 <altitudeKF+0x438>)
 8004602:	ed93 7a00 	vldr	s14, [r3]
 8004606:	edd3 7a01 	vldr	s15, [r3, #4]
 800460a:	eeb0 1a66 	vmov.f32	s2, s13
 800460e:	eeb0 0a47 	vmov.f32	s0, s14
 8004612:	eef0 0a67 	vmov.f32	s1, s15
 8004616:	f000 fc7f 	bl	8004f18 <KF_matrix_scalar_multi_21>
 800461a:	eeb0 7a40 	vmov.f32	s14, s0
 800461e:	eef0 7a60 	vmov.f32	s15, s1
 8004622:	ed87 7a18 	vstr	s14, [r7, #96]	; 0x60
 8004626:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
 800462a:	ed97 6a18 	vldr	s12, [r7, #96]	; 0x60
 800462e:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 8004632:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8004636:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800463a:	eeb0 1a46 	vmov.f32	s2, s12
 800463e:	eef0 1a66 	vmov.f32	s3, s13
 8004642:	eeb0 0a47 	vmov.f32	s0, s14
 8004646:	eef0 0a67 	vmov.f32	s1, s15
 800464a:	f000 fb75 	bl	8004d38 <KF_matrix_add21>
 800464e:	eeb0 7a40 	vmov.f32	s14, s0
 8004652:	eef0 7a60 	vmov.f32	s15, s1
 8004656:	ed87 7a14 	vstr	s14, [r7, #80]	; 0x50
 800465a:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
	Pk = KF_matrix_add22(KF_matrix_multiply22_22(KF_matrix_multiply22_22(F, P_prev),FT),KF_matrix_scalar_multi_22(Q,0.01));
 800465e:	ed97 4a03 	vldr	s8, [r7, #12]
 8004662:	edd7 4a04 	vldr	s9, [r7, #16]
 8004666:	ed97 5a05 	vldr	s10, [r7, #20]
 800466a:	edd7 5a06 	vldr	s11, [r7, #24]
 800466e:	4bcc      	ldr	r3, [pc, #816]	; (80049a0 <altitudeKF+0x434>)
 8004670:	ed93 6a00 	vldr	s12, [r3]
 8004674:	edd3 6a01 	vldr	s13, [r3, #4]
 8004678:	ed93 7a02 	vldr	s14, [r3, #8]
 800467c:	edd3 7a03 	vldr	s15, [r3, #12]
 8004680:	eeb0 2a44 	vmov.f32	s4, s8
 8004684:	eef0 2a64 	vmov.f32	s5, s9
 8004688:	eeb0 3a45 	vmov.f32	s6, s10
 800468c:	eef0 3a65 	vmov.f32	s7, s11
 8004690:	eeb0 0a46 	vmov.f32	s0, s12
 8004694:	eef0 0a66 	vmov.f32	s1, s13
 8004698:	eeb0 1a47 	vmov.f32	s2, s14
 800469c:	eef0 1a67 	vmov.f32	s3, s15
 80046a0:	f000 f9c2 	bl	8004a28 <KF_matrix_multiply22_22>
 80046a4:	eeb0 6a40 	vmov.f32	s12, s0
 80046a8:	eef0 6a60 	vmov.f32	s13, s1
 80046ac:	eeb0 7a41 	vmov.f32	s14, s2
 80046b0:	eef0 7a61 	vmov.f32	s15, s3
 80046b4:	ed87 6a1a 	vstr	s12, [r7, #104]	; 0x68
 80046b8:	edc7 6a1b 	vstr	s13, [r7, #108]	; 0x6c
 80046bc:	ed87 7a1c 	vstr	s14, [r7, #112]	; 0x70
 80046c0:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
 80046c4:	4bb8      	ldr	r3, [pc, #736]	; (80049a8 <altitudeKF+0x43c>)
 80046c6:	ed93 4a00 	vldr	s8, [r3]
 80046ca:	edd3 4a01 	vldr	s9, [r3, #4]
 80046ce:	ed93 5a02 	vldr	s10, [r3, #8]
 80046d2:	edd3 5a03 	vldr	s11, [r3, #12]
 80046d6:	ed97 6a1a 	vldr	s12, [r7, #104]	; 0x68
 80046da:	edd7 6a1b 	vldr	s13, [r7, #108]	; 0x6c
 80046de:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 80046e2:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80046e6:	eeb0 2a44 	vmov.f32	s4, s8
 80046ea:	eef0 2a64 	vmov.f32	s5, s9
 80046ee:	eeb0 3a45 	vmov.f32	s6, s10
 80046f2:	eef0 3a65 	vmov.f32	s7, s11
 80046f6:	eeb0 0a46 	vmov.f32	s0, s12
 80046fa:	eef0 0a66 	vmov.f32	s1, s13
 80046fe:	eeb0 1a47 	vmov.f32	s2, s14
 8004702:	eef0 1a67 	vmov.f32	s3, s15
 8004706:	f000 f98f 	bl	8004a28 <KF_matrix_multiply22_22>
 800470a:	eeb0 6a40 	vmov.f32	s12, s0
 800470e:	eef0 6a60 	vmov.f32	s13, s1
 8004712:	eeb0 7a41 	vmov.f32	s14, s2
 8004716:	eef0 7a61 	vmov.f32	s15, s3
 800471a:	ed87 6a1e 	vstr	s12, [r7, #120]	; 0x78
 800471e:	edc7 6a1f 	vstr	s13, [r7, #124]	; 0x7c
 8004722:	ed87 7a20 	vstr	s14, [r7, #128]	; 0x80
 8004726:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
 800472a:	4ba0      	ldr	r3, [pc, #640]	; (80049ac <altitudeKF+0x440>)
 800472c:	ed93 6a00 	vldr	s12, [r3]
 8004730:	edd3 6a01 	vldr	s13, [r3, #4]
 8004734:	ed93 7a02 	vldr	s14, [r3, #8]
 8004738:	edd3 7a03 	vldr	s15, [r3, #12]
 800473c:	ed9f 2a9c 	vldr	s4, [pc, #624]	; 80049b0 <altitudeKF+0x444>
 8004740:	eeb0 0a46 	vmov.f32	s0, s12
 8004744:	eef0 0a66 	vmov.f32	s1, s13
 8004748:	eeb0 1a47 	vmov.f32	s2, s14
 800474c:	eef0 1a67 	vmov.f32	s3, s15
 8004750:	f000 fb8e 	bl	8004e70 <KF_matrix_scalar_multi_22>
 8004754:	eeb0 6a40 	vmov.f32	s12, s0
 8004758:	eef0 6a60 	vmov.f32	s13, s1
 800475c:	eeb0 7a41 	vmov.f32	s14, s2
 8004760:	eef0 7a61 	vmov.f32	s15, s3
 8004764:	ed87 6a22 	vstr	s12, [r7, #136]	; 0x88
 8004768:	edc7 6a23 	vstr	s13, [r7, #140]	; 0x8c
 800476c:	ed87 7a24 	vstr	s14, [r7, #144]	; 0x90
 8004770:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
 8004774:	ed97 4a22 	vldr	s8, [r7, #136]	; 0x88
 8004778:	edd7 4a23 	vldr	s9, [r7, #140]	; 0x8c
 800477c:	ed97 5a24 	vldr	s10, [r7, #144]	; 0x90
 8004780:	edd7 5a25 	vldr	s11, [r7, #148]	; 0x94
 8004784:	ed97 6a1e 	vldr	s12, [r7, #120]	; 0x78
 8004788:	edd7 6a1f 	vldr	s13, [r7, #124]	; 0x7c
 800478c:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8004790:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8004794:	eeb0 2a44 	vmov.f32	s4, s8
 8004798:	eef0 2a64 	vmov.f32	s5, s9
 800479c:	eeb0 3a45 	vmov.f32	s6, s10
 80047a0:	eef0 3a65 	vmov.f32	s7, s11
 80047a4:	eeb0 0a46 	vmov.f32	s0, s12
 80047a8:	eef0 0a66 	vmov.f32	s1, s13
 80047ac:	eeb0 1a47 	vmov.f32	s2, s14
 80047b0:	eef0 1a67 	vmov.f32	s3, s15
 80047b4:	f000 fa5e 	bl	8004c74 <KF_matrix_add22>
 80047b8:	eeb0 6a40 	vmov.f32	s12, s0
 80047bc:	eef0 6a60 	vmov.f32	s13, s1
 80047c0:	eeb0 7a41 	vmov.f32	s14, s2
 80047c4:	eef0 7a61 	vmov.f32	s15, s3
 80047c8:	ed87 6a10 	vstr	s12, [r7, #64]	; 0x40
 80047cc:	edc7 6a11 	vstr	s13, [r7, #68]	; 0x44
 80047d0:	ed87 7a12 	vstr	s14, [r7, #72]	; 0x48
 80047d4:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c

	//correction
	Lk = Pk.a11 + R;
 80047d8:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80047dc:	4b75      	ldr	r3, [pc, #468]	; (80049b4 <altitudeKF+0x448>)
 80047de:	edd3 7a00 	vldr	s15, [r3]
 80047e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80047e6:	4b74      	ldr	r3, [pc, #464]	; (80049b8 <altitudeKF+0x44c>)
 80047e8:	edc3 7a00 	vstr	s15, [r3]
	Kk = KF_matrix_scalar_multi_21(KF_matrix_multiply22_21(Pk, HT),1/Lk);
 80047ec:	4b73      	ldr	r3, [pc, #460]	; (80049bc <altitudeKF+0x450>)
 80047ee:	ed93 5a00 	vldr	s10, [r3]
 80047f2:	edd3 5a01 	vldr	s11, [r3, #4]
 80047f6:	ed97 6a10 	vldr	s12, [r7, #64]	; 0x40
 80047fa:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 80047fe:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8004802:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8004806:	eeb0 2a45 	vmov.f32	s4, s10
 800480a:	eef0 2a65 	vmov.f32	s5, s11
 800480e:	eeb0 0a46 	vmov.f32	s0, s12
 8004812:	eef0 0a66 	vmov.f32	s1, s13
 8004816:	eeb0 1a47 	vmov.f32	s2, s14
 800481a:	eef0 1a67 	vmov.f32	s3, s15
 800481e:	f000 f985 	bl	8004b2c <KF_matrix_multiply22_21>
 8004822:	eeb0 7a40 	vmov.f32	s14, s0
 8004826:	eef0 7a60 	vmov.f32	s15, s1
 800482a:	ed87 7a26 	vstr	s14, [r7, #152]	; 0x98
 800482e:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
 8004832:	4b61      	ldr	r3, [pc, #388]	; (80049b8 <altitudeKF+0x44c>)
 8004834:	edd3 7a00 	vldr	s15, [r3]
 8004838:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800483c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004840:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8004844:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8004848:	eeb0 1a66 	vmov.f32	s2, s13
 800484c:	eeb0 0a47 	vmov.f32	s0, s14
 8004850:	eef0 0a67 	vmov.f32	s1, s15
 8004854:	f000 fb60 	bl	8004f18 <KF_matrix_scalar_multi_21>
 8004858:	eeb0 7a40 	vmov.f32	s14, s0
 800485c:	eef0 7a60 	vmov.f32	s15, s1
 8004860:	ed87 7a0a 	vstr	s14, [r7, #40]	; 0x28
 8004864:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

	Sk = KF_matrix_add21(Sk,KF_matrix_scalar_multi_21(Kk,(meas.a11-Sk.a11)));
 8004868:	ed97 7a00 	vldr	s14, [r7]
 800486c:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8004870:	ee77 6a67 	vsub.f32	s13, s14, s15
 8004874:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8004878:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800487c:	eeb0 1a66 	vmov.f32	s2, s13
 8004880:	eeb0 0a47 	vmov.f32	s0, s14
 8004884:	eef0 0a67 	vmov.f32	s1, s15
 8004888:	f000 fb46 	bl	8004f18 <KF_matrix_scalar_multi_21>
 800488c:	eeb0 7a40 	vmov.f32	s14, s0
 8004890:	eef0 7a60 	vmov.f32	s15, s1
 8004894:	ed87 7a28 	vstr	s14, [r7, #160]	; 0xa0
 8004898:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
 800489c:	ed97 6a28 	vldr	s12, [r7, #160]	; 0xa0
 80048a0:	edd7 6a29 	vldr	s13, [r7, #164]	; 0xa4
 80048a4:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80048a8:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80048ac:	eeb0 1a46 	vmov.f32	s2, s12
 80048b0:	eef0 1a66 	vmov.f32	s3, s13
 80048b4:	eeb0 0a47 	vmov.f32	s0, s14
 80048b8:	eef0 0a67 	vmov.f32	s1, s15
 80048bc:	f000 fa3c 	bl	8004d38 <KF_matrix_add21>
 80048c0:	eeb0 7a40 	vmov.f32	s14, s0
 80048c4:	eef0 7a60 	vmov.f32	s15, s1
 80048c8:	ed87 7a14 	vstr	s14, [r7, #80]	; 0x50
 80048cc:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
	*current_state = Sk;
 80048d0:	69fb      	ldr	r3, [r7, #28]
 80048d2:	461a      	mov	r2, r3
 80048d4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80048d8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80048dc:	e882 0003 	stmia.w	r2, {r0, r1}
	Pcalc = KF_matrix_sub22(eye, KF_matrix_multiply21_12(Kk, H));
 80048e0:	4b37      	ldr	r3, [pc, #220]	; (80049c0 <altitudeKF+0x454>)
 80048e2:	ed93 6a00 	vldr	s12, [r3]
 80048e6:	edd3 6a01 	vldr	s13, [r3, #4]
 80048ea:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80048ee:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80048f2:	eeb0 1a46 	vmov.f32	s2, s12
 80048f6:	eef0 1a66 	vmov.f32	s3, s13
 80048fa:	eeb0 0a47 	vmov.f32	s0, s14
 80048fe:	eef0 0a67 	vmov.f32	s1, s15
 8004902:	f000 f965 	bl	8004bd0 <KF_matrix_multiply21_12>
 8004906:	eeb0 6a40 	vmov.f32	s12, s0
 800490a:	eef0 6a60 	vmov.f32	s13, s1
 800490e:	eeb0 7a41 	vmov.f32	s14, s2
 8004912:	eef0 7a61 	vmov.f32	s15, s3
 8004916:	ed87 6a2a 	vstr	s12, [r7, #168]	; 0xa8
 800491a:	edc7 6a2b 	vstr	s13, [r7, #172]	; 0xac
 800491e:	ed87 7a2c 	vstr	s14, [r7, #176]	; 0xb0
 8004922:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
 8004926:	ed97 4a2a 	vldr	s8, [r7, #168]	; 0xa8
 800492a:	edd7 4a2b 	vldr	s9, [r7, #172]	; 0xac
 800492e:	ed97 5a2c 	vldr	s10, [r7, #176]	; 0xb0
 8004932:	edd7 5a2d 	vldr	s11, [r7, #180]	; 0xb4
 8004936:	4b23      	ldr	r3, [pc, #140]	; (80049c4 <altitudeKF+0x458>)
 8004938:	ed93 6a00 	vldr	s12, [r3]
 800493c:	edd3 6a01 	vldr	s13, [r3, #4]
 8004940:	ed93 7a02 	vldr	s14, [r3, #8]
 8004944:	edd3 7a03 	vldr	s15, [r3, #12]
 8004948:	eeb0 2a44 	vmov.f32	s4, s8
 800494c:	eef0 2a64 	vmov.f32	s5, s9
 8004950:	eeb0 3a45 	vmov.f32	s6, s10
 8004954:	eef0 3a65 	vmov.f32	s7, s11
 8004958:	eeb0 0a46 	vmov.f32	s0, s12
 800495c:	eef0 0a66 	vmov.f32	s1, s13
 8004960:	eeb0 1a47 	vmov.f32	s2, s14
 8004964:	eef0 1a67 	vmov.f32	s3, s15
 8004968:	f000 fa20 	bl	8004dac <KF_matrix_sub22>
 800496c:	eeb0 6a40 	vmov.f32	s12, s0
 8004970:	eef0 6a60 	vmov.f32	s13, s1
 8004974:	eeb0 7a41 	vmov.f32	s14, s2
 8004978:	eef0 7a61 	vmov.f32	s15, s3
 800497c:	ed87 6a0c 	vstr	s12, [r7, #48]	; 0x30
 8004980:	edc7 6a0d 	vstr	s13, [r7, #52]	; 0x34
 8004984:	ed87 7a0e 	vstr	s14, [r7, #56]	; 0x38
 8004988:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	*P = KF_matrix_multiply22_22(Pcalc, Pk);
 800498c:	ed97 4a10 	vldr	s8, [r7, #64]	; 0x40
 8004990:	edd7 4a11 	vldr	s9, [r7, #68]	; 0x44
 8004994:	ed97 5a12 	vldr	s10, [r7, #72]	; 0x48
 8004998:	edd7 5a13 	vldr	s11, [r7, #76]	; 0x4c
 800499c:	e014      	b.n	80049c8 <altitudeKF+0x45c>
 800499e:	bf00      	nop
 80049a0:	20000010 	.word	0x20000010
 80049a4:	20000030 	.word	0x20000030
 80049a8:	20000020 	.word	0x20000020
 80049ac:	20000048 	.word	0x20000048
 80049b0:	3c23d70a 	.word	0x3c23d70a
 80049b4:	20000058 	.word	0x20000058
 80049b8:	20002bf4 	.word	0x20002bf4
 80049bc:	20000040 	.word	0x20000040
 80049c0:	20000038 	.word	0x20000038
 80049c4:	2000005c 	.word	0x2000005c
 80049c8:	ed97 6a0c 	vldr	s12, [r7, #48]	; 0x30
 80049cc:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 80049d0:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80049d4:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80049d8:	eeb0 2a44 	vmov.f32	s4, s8
 80049dc:	eef0 2a64 	vmov.f32	s5, s9
 80049e0:	eeb0 3a45 	vmov.f32	s6, s10
 80049e4:	eef0 3a65 	vmov.f32	s7, s11
 80049e8:	eeb0 0a46 	vmov.f32	s0, s12
 80049ec:	eef0 0a66 	vmov.f32	s1, s13
 80049f0:	eeb0 1a47 	vmov.f32	s2, s14
 80049f4:	eef0 1a67 	vmov.f32	s3, s15
 80049f8:	f000 f816 	bl	8004a28 <KF_matrix_multiply22_22>
 80049fc:	eeb0 6a40 	vmov.f32	s12, s0
 8004a00:	eef0 6a60 	vmov.f32	s13, s1
 8004a04:	eeb0 7a41 	vmov.f32	s14, s2
 8004a08:	eef0 7a61 	vmov.f32	s15, s3
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	ed83 6a00 	vstr	s12, [r3]
 8004a12:	edc3 6a01 	vstr	s13, [r3, #4]
 8004a16:	ed83 7a02 	vstr	s14, [r3, #8]
 8004a1a:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8004a1e:	bf00      	nop
 8004a20:	37b8      	adds	r7, #184	; 0xb8
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bd80      	pop	{r7, pc}
 8004a26:	bf00      	nop

08004a28 <KF_matrix_multiply22_22>:


//matrix multiply by matrix
KF_Matrix22 KF_matrix_multiply22_22(KF_Matrix22 left, KF_Matrix22 right){
 8004a28:	b490      	push	{r4, r7}
 8004a2a:	b094      	sub	sp, #80	; 0x50
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	eeb0 4a40 	vmov.f32	s8, s0
 8004a32:	eef0 4a60 	vmov.f32	s9, s1
 8004a36:	eeb0 5a41 	vmov.f32	s10, s2
 8004a3a:	eef0 5a61 	vmov.f32	s11, s3
 8004a3e:	eeb0 6a42 	vmov.f32	s12, s4
 8004a42:	eef0 6a62 	vmov.f32	s13, s5
 8004a46:	eeb0 7a43 	vmov.f32	s14, s6
 8004a4a:	eef0 7a63 	vmov.f32	s15, s7
 8004a4e:	ed87 4a08 	vstr	s8, [r7, #32]
 8004a52:	edc7 4a09 	vstr	s9, [r7, #36]	; 0x24
 8004a56:	ed87 5a0a 	vstr	s10, [r7, #40]	; 0x28
 8004a5a:	edc7 5a0b 	vstr	s11, [r7, #44]	; 0x2c
 8004a5e:	ed87 6a04 	vstr	s12, [r7, #16]
 8004a62:	edc7 6a05 	vstr	s13, [r7, #20]
 8004a66:	ed87 7a06 	vstr	s14, [r7, #24]
 8004a6a:	edc7 7a07 	vstr	s15, [r7, #28]
    KF_Matrix22 results;
    results.a11 = left.a11 * right.a11 + left.a12 * right.a21;
 8004a6e:	ed97 7a08 	vldr	s14, [r7, #32]
 8004a72:	edd7 7a04 	vldr	s15, [r7, #16]
 8004a76:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004a7a:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8004a7e:	edd7 7a06 	vldr	s15, [r7, #24]
 8004a82:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004a86:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004a8a:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    results.a12 = left.a11 * right.a12 + left.a12 * right.a22;
 8004a8e:	ed97 7a08 	vldr	s14, [r7, #32]
 8004a92:	edd7 7a05 	vldr	s15, [r7, #20]
 8004a96:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004a9a:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8004a9e:	edd7 7a07 	vldr	s15, [r7, #28]
 8004aa2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004aa6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004aaa:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
    results.a21 = left.a21 * right.a11 + left.a22 * right.a21;
 8004aae:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8004ab2:	edd7 7a04 	vldr	s15, [r7, #16]
 8004ab6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004aba:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8004abe:	edd7 7a06 	vldr	s15, [r7, #24]
 8004ac2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004ac6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004aca:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
    results.a22 = left.a21 * right.a12 + left.a22 * right.a22;
 8004ace:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8004ad2:	edd7 7a05 	vldr	s15, [r7, #20]
 8004ad6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004ada:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8004ade:	edd7 7a07 	vldr	s15, [r7, #28]
 8004ae2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004ae6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004aea:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    return results;
 8004aee:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8004af2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004af6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004af8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8004afc:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8004afe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004b00:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004b02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b04:	ee06 0a10 	vmov	s12, r0
 8004b08:	ee06 1a90 	vmov	s13, r1
 8004b0c:	ee07 2a10 	vmov	s14, r2
 8004b10:	ee07 3a90 	vmov	s15, r3
}
 8004b14:	eeb0 0a46 	vmov.f32	s0, s12
 8004b18:	eef0 0a66 	vmov.f32	s1, s13
 8004b1c:	eeb0 1a47 	vmov.f32	s2, s14
 8004b20:	eef0 1a67 	vmov.f32	s3, s15
 8004b24:	3750      	adds	r7, #80	; 0x50
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bc90      	pop	{r4, r7}
 8004b2a:	4770      	bx	lr

08004b2c <KF_matrix_multiply22_21>:

KF_Matrix21 KF_matrix_multiply22_21(KF_Matrix22 left, KF_Matrix21 right) {
 8004b2c:	b480      	push	{r7}
 8004b2e:	b08d      	sub	sp, #52	; 0x34
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	eeb0 5a40 	vmov.f32	s10, s0
 8004b36:	eef0 5a60 	vmov.f32	s11, s1
 8004b3a:	eeb0 6a41 	vmov.f32	s12, s2
 8004b3e:	eef0 6a61 	vmov.f32	s13, s3
 8004b42:	eeb0 7a42 	vmov.f32	s14, s4
 8004b46:	eef0 7a62 	vmov.f32	s15, s5
 8004b4a:	ed87 5a04 	vstr	s10, [r7, #16]
 8004b4e:	edc7 5a05 	vstr	s11, [r7, #20]
 8004b52:	ed87 6a06 	vstr	s12, [r7, #24]
 8004b56:	edc7 6a07 	vstr	s13, [r7, #28]
 8004b5a:	ed87 7a02 	vstr	s14, [r7, #8]
 8004b5e:	edc7 7a03 	vstr	s15, [r7, #12]
    KF_Matrix21 result;
    result.a11 = left.a11 * right.a11 + left.a12 * right.a21;
 8004b62:	ed97 7a04 	vldr	s14, [r7, #16]
 8004b66:	edd7 7a02 	vldr	s15, [r7, #8]
 8004b6a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004b6e:	edd7 6a05 	vldr	s13, [r7, #20]
 8004b72:	edd7 7a03 	vldr	s15, [r7, #12]
 8004b76:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004b7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004b7e:	edc7 7a08 	vstr	s15, [r7, #32]
    result.a21 = left.a21 * right.a11 + left.a22 * right.a21;
 8004b82:	ed97 7a06 	vldr	s14, [r7, #24]
 8004b86:	edd7 7a02 	vldr	s15, [r7, #8]
 8004b8a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004b8e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b92:	edd7 7a03 	vldr	s15, [r7, #12]
 8004b96:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004b9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004b9e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    return result;
 8004ba2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004ba6:	f107 0220 	add.w	r2, r7, #32
 8004baa:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004bae:	e883 0003 	stmia.w	r3, {r0, r1}
 8004bb2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004bb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bb6:	ee07 2a10 	vmov	s14, r2
 8004bba:	ee07 3a90 	vmov	s15, r3
}
 8004bbe:	eeb0 0a47 	vmov.f32	s0, s14
 8004bc2:	eef0 0a67 	vmov.f32	s1, s15
 8004bc6:	3734      	adds	r7, #52	; 0x34
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bce:	4770      	bx	lr

08004bd0 <KF_matrix_multiply21_12>:
    float result;
    result = left.a11 * right.a11 + left.a12 * right.a21;
    return result;
}

KF_Matrix22 KF_matrix_multiply21_12(KF_Matrix21 left, KF_Matrix12 right) {
 8004bd0:	b490      	push	{r4, r7}
 8004bd2:	b090      	sub	sp, #64	; 0x40
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	eeb0 6a40 	vmov.f32	s12, s0
 8004bda:	eef0 6a60 	vmov.f32	s13, s1
 8004bde:	eeb0 7a41 	vmov.f32	s14, s2
 8004be2:	eef0 7a61 	vmov.f32	s15, s3
 8004be6:	ed87 6a06 	vstr	s12, [r7, #24]
 8004bea:	edc7 6a07 	vstr	s13, [r7, #28]
 8004bee:	ed87 7a04 	vstr	s14, [r7, #16]
 8004bf2:	edc7 7a05 	vstr	s15, [r7, #20]
    KF_Matrix22 result;
    result.a11 = left.a11 * right.a11;
 8004bf6:	ed97 7a06 	vldr	s14, [r7, #24]
 8004bfa:	edd7 7a04 	vldr	s15, [r7, #16]
 8004bfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c02:	edc7 7a08 	vstr	s15, [r7, #32]
    result.a12 = left.a21 * right.a11;
 8004c06:	ed97 7a07 	vldr	s14, [r7, #28]
 8004c0a:	edd7 7a04 	vldr	s15, [r7, #16]
 8004c0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c12:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    result.a21 = left.a11 * right.a12;
 8004c16:	ed97 7a06 	vldr	s14, [r7, #24]
 8004c1a:	edd7 7a05 	vldr	s15, [r7, #20]
 8004c1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c22:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    result.a22 = left.a21 * right.a12;
 8004c26:	ed97 7a07 	vldr	s14, [r7, #28]
 8004c2a:	edd7 7a05 	vldr	s15, [r7, #20]
 8004c2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c32:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    return result;
 8004c36:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8004c3a:	f107 0320 	add.w	r3, r7, #32
 8004c3e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004c40:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8004c44:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004c46:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004c48:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004c4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c4c:	ee06 0a10 	vmov	s12, r0
 8004c50:	ee06 1a90 	vmov	s13, r1
 8004c54:	ee07 2a10 	vmov	s14, r2
 8004c58:	ee07 3a90 	vmov	s15, r3
}
 8004c5c:	eeb0 0a46 	vmov.f32	s0, s12
 8004c60:	eef0 0a66 	vmov.f32	s1, s13
 8004c64:	eeb0 1a47 	vmov.f32	s2, s14
 8004c68:	eef0 1a67 	vmov.f32	s3, s15
 8004c6c:	3740      	adds	r7, #64	; 0x40
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bc90      	pop	{r4, r7}
 8004c72:	4770      	bx	lr

08004c74 <KF_matrix_add22>:
    results.a12 = matrix.a21;
    return results;
}

//mx add
KF_Matrix22 KF_matrix_add22(KF_Matrix22 mx1, KF_Matrix22 mx2){
 8004c74:	b490      	push	{r4, r7}
 8004c76:	b094      	sub	sp, #80	; 0x50
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	eeb0 4a40 	vmov.f32	s8, s0
 8004c7e:	eef0 4a60 	vmov.f32	s9, s1
 8004c82:	eeb0 5a41 	vmov.f32	s10, s2
 8004c86:	eef0 5a61 	vmov.f32	s11, s3
 8004c8a:	eeb0 6a42 	vmov.f32	s12, s4
 8004c8e:	eef0 6a62 	vmov.f32	s13, s5
 8004c92:	eeb0 7a43 	vmov.f32	s14, s6
 8004c96:	eef0 7a63 	vmov.f32	s15, s7
 8004c9a:	ed87 4a08 	vstr	s8, [r7, #32]
 8004c9e:	edc7 4a09 	vstr	s9, [r7, #36]	; 0x24
 8004ca2:	ed87 5a0a 	vstr	s10, [r7, #40]	; 0x28
 8004ca6:	edc7 5a0b 	vstr	s11, [r7, #44]	; 0x2c
 8004caa:	ed87 6a04 	vstr	s12, [r7, #16]
 8004cae:	edc7 6a05 	vstr	s13, [r7, #20]
 8004cb2:	ed87 7a06 	vstr	s14, [r7, #24]
 8004cb6:	edc7 7a07 	vstr	s15, [r7, #28]
    KF_Matrix22 results;
    results.a11 = mx1.a11 + mx2.a11;
 8004cba:	ed97 7a08 	vldr	s14, [r7, #32]
 8004cbe:	edd7 7a04 	vldr	s15, [r7, #16]
 8004cc2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004cc6:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    results.a12 = mx1.a12 + mx2.a12;
 8004cca:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8004cce:	edd7 7a05 	vldr	s15, [r7, #20]
 8004cd2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004cd6:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
    results.a21 = mx1.a21 + mx2.a21;
 8004cda:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8004cde:	edd7 7a06 	vldr	s15, [r7, #24]
 8004ce2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004ce6:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
    results.a22 = mx1.a22 + mx2.a22;
 8004cea:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8004cee:	edd7 7a07 	vldr	s15, [r7, #28]
 8004cf2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004cf6:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    return results;
 8004cfa:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8004cfe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004d02:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004d04:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8004d08:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8004d0a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004d0c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004d0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d10:	ee06 0a10 	vmov	s12, r0
 8004d14:	ee06 1a90 	vmov	s13, r1
 8004d18:	ee07 2a10 	vmov	s14, r2
 8004d1c:	ee07 3a90 	vmov	s15, r3
}
 8004d20:	eeb0 0a46 	vmov.f32	s0, s12
 8004d24:	eef0 0a66 	vmov.f32	s1, s13
 8004d28:	eeb0 1a47 	vmov.f32	s2, s14
 8004d2c:	eef0 1a67 	vmov.f32	s3, s15
 8004d30:	3750      	adds	r7, #80	; 0x50
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bc90      	pop	{r4, r7}
 8004d36:	4770      	bx	lr

08004d38 <KF_matrix_add21>:

KF_Matrix21 KF_matrix_add21(KF_Matrix21 mx1, KF_Matrix21 mx2){
 8004d38:	b480      	push	{r7}
 8004d3a:	b08b      	sub	sp, #44	; 0x2c
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	eeb0 6a40 	vmov.f32	s12, s0
 8004d42:	eef0 6a60 	vmov.f32	s13, s1
 8004d46:	eeb0 7a41 	vmov.f32	s14, s2
 8004d4a:	eef0 7a61 	vmov.f32	s15, s3
 8004d4e:	ed87 6a04 	vstr	s12, [r7, #16]
 8004d52:	edc7 6a05 	vstr	s13, [r7, #20]
 8004d56:	ed87 7a02 	vstr	s14, [r7, #8]
 8004d5a:	edc7 7a03 	vstr	s15, [r7, #12]
    KF_Matrix21 results;
    results.a11 = mx1.a11 + mx2.a11;
 8004d5e:	ed97 7a04 	vldr	s14, [r7, #16]
 8004d62:	edd7 7a02 	vldr	s15, [r7, #8]
 8004d66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004d6a:	edc7 7a06 	vstr	s15, [r7, #24]
    results.a21 = mx1.a21 + mx2.a21;
 8004d6e:	ed97 7a05 	vldr	s14, [r7, #20]
 8004d72:	edd7 7a03 	vldr	s15, [r7, #12]
 8004d76:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004d7a:	edc7 7a07 	vstr	s15, [r7, #28]
    return results;
 8004d7e:	f107 0320 	add.w	r3, r7, #32
 8004d82:	f107 0218 	add.w	r2, r7, #24
 8004d86:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004d8a:	e883 0003 	stmia.w	r3, {r0, r1}
 8004d8e:	6a3a      	ldr	r2, [r7, #32]
 8004d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d92:	ee07 2a10 	vmov	s14, r2
 8004d96:	ee07 3a90 	vmov	s15, r3
}
 8004d9a:	eeb0 0a47 	vmov.f32	s0, s14
 8004d9e:	eef0 0a67 	vmov.f32	s1, s15
 8004da2:	372c      	adds	r7, #44	; 0x2c
 8004da4:	46bd      	mov	sp, r7
 8004da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004daa:	4770      	bx	lr

08004dac <KF_matrix_sub22>:

//mx sub
KF_Matrix22 KF_matrix_sub22(KF_Matrix22 mx1, KF_Matrix22 mx2){
 8004dac:	b490      	push	{r4, r7}
 8004dae:	b094      	sub	sp, #80	; 0x50
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	eeb0 4a40 	vmov.f32	s8, s0
 8004db6:	eef0 4a60 	vmov.f32	s9, s1
 8004dba:	eeb0 5a41 	vmov.f32	s10, s2
 8004dbe:	eef0 5a61 	vmov.f32	s11, s3
 8004dc2:	eeb0 6a42 	vmov.f32	s12, s4
 8004dc6:	eef0 6a62 	vmov.f32	s13, s5
 8004dca:	eeb0 7a43 	vmov.f32	s14, s6
 8004dce:	eef0 7a63 	vmov.f32	s15, s7
 8004dd2:	ed87 4a08 	vstr	s8, [r7, #32]
 8004dd6:	edc7 4a09 	vstr	s9, [r7, #36]	; 0x24
 8004dda:	ed87 5a0a 	vstr	s10, [r7, #40]	; 0x28
 8004dde:	edc7 5a0b 	vstr	s11, [r7, #44]	; 0x2c
 8004de2:	ed87 6a04 	vstr	s12, [r7, #16]
 8004de6:	edc7 6a05 	vstr	s13, [r7, #20]
 8004dea:	ed87 7a06 	vstr	s14, [r7, #24]
 8004dee:	edc7 7a07 	vstr	s15, [r7, #28]
    KF_Matrix22 results;
    results.a11 = mx1.a11 - mx2.a11;
 8004df2:	ed97 7a08 	vldr	s14, [r7, #32]
 8004df6:	edd7 7a04 	vldr	s15, [r7, #16]
 8004dfa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004dfe:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    results.a12 = mx1.a12 - mx2.a12;
 8004e02:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8004e06:	edd7 7a05 	vldr	s15, [r7, #20]
 8004e0a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004e0e:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
    results.a21 = mx1.a21 - mx2.a21;
 8004e12:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8004e16:	edd7 7a06 	vldr	s15, [r7, #24]
 8004e1a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004e1e:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
    results.a22 = mx1.a22 - mx2.a22;
 8004e22:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8004e26:	edd7 7a07 	vldr	s15, [r7, #28]
 8004e2a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004e2e:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    return results;
 8004e32:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8004e36:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004e3a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004e3c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8004e40:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8004e42:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004e44:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004e46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e48:	ee06 0a10 	vmov	s12, r0
 8004e4c:	ee06 1a90 	vmov	s13, r1
 8004e50:	ee07 2a10 	vmov	s14, r2
 8004e54:	ee07 3a90 	vmov	s15, r3
}
 8004e58:	eeb0 0a46 	vmov.f32	s0, s12
 8004e5c:	eef0 0a66 	vmov.f32	s1, s13
 8004e60:	eeb0 1a47 	vmov.f32	s2, s14
 8004e64:	eef0 1a67 	vmov.f32	s3, s15
 8004e68:	3750      	adds	r7, #80	; 0x50
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bc90      	pop	{r4, r7}
 8004e6e:	4770      	bx	lr

08004e70 <KF_matrix_scalar_multi_22>:
    results.a21 = mx1.a21 - mx2.a21;
    return results;
}

//mx multiply by scalar
KF_Matrix22 KF_matrix_scalar_multi_22(KF_Matrix22 mx, float scalar){
 8004e70:	b490      	push	{r4, r7}
 8004e72:	b092      	sub	sp, #72	; 0x48
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	eeb0 6a40 	vmov.f32	s12, s0
 8004e7a:	eef0 6a60 	vmov.f32	s13, s1
 8004e7e:	eeb0 7a41 	vmov.f32	s14, s2
 8004e82:	eef0 7a61 	vmov.f32	s15, s3
 8004e86:	ed87 2a05 	vstr	s4, [r7, #20]
 8004e8a:	ed87 6a06 	vstr	s12, [r7, #24]
 8004e8e:	edc7 6a07 	vstr	s13, [r7, #28]
 8004e92:	ed87 7a08 	vstr	s14, [r7, #32]
 8004e96:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    KF_Matrix22 results;
    results.a11 = mx.a11 * scalar;
 8004e9a:	ed97 7a06 	vldr	s14, [r7, #24]
 8004e9e:	edd7 7a05 	vldr	s15, [r7, #20]
 8004ea2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ea6:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    results.a12 = mx.a12 * scalar;
 8004eaa:	ed97 7a07 	vldr	s14, [r7, #28]
 8004eae:	edd7 7a05 	vldr	s15, [r7, #20]
 8004eb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004eb6:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    results.a21 = mx.a21 * scalar;
 8004eba:	ed97 7a08 	vldr	s14, [r7, #32]
 8004ebe:	edd7 7a05 	vldr	s15, [r7, #20]
 8004ec2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ec6:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    results.a22 = mx.a22 * scalar;
 8004eca:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8004ece:	edd7 7a05 	vldr	s15, [r7, #20]
 8004ed2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ed6:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
    return results;
 8004eda:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8004ede:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004ee2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004ee4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8004ee8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004eea:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004eec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004eee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ef0:	ee06 0a10 	vmov	s12, r0
 8004ef4:	ee06 1a90 	vmov	s13, r1
 8004ef8:	ee07 2a10 	vmov	s14, r2
 8004efc:	ee07 3a90 	vmov	s15, r3
}
 8004f00:	eeb0 0a46 	vmov.f32	s0, s12
 8004f04:	eef0 0a66 	vmov.f32	s1, s13
 8004f08:	eeb0 1a47 	vmov.f32	s2, s14
 8004f0c:	eef0 1a67 	vmov.f32	s3, s15
 8004f10:	3748      	adds	r7, #72	; 0x48
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bc90      	pop	{r4, r7}
 8004f16:	4770      	bx	lr

08004f18 <KF_matrix_scalar_multi_21>:

KF_Matrix21 KF_matrix_scalar_multi_21(KF_Matrix21 mx, float scalar){
 8004f18:	b480      	push	{r7}
 8004f1a:	b08b      	sub	sp, #44	; 0x2c
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	eeb0 7a40 	vmov.f32	s14, s0
 8004f22:	eef0 7a60 	vmov.f32	s15, s1
 8004f26:	ed87 1a03 	vstr	s2, [r7, #12]
 8004f2a:	ed87 7a04 	vstr	s14, [r7, #16]
 8004f2e:	edc7 7a05 	vstr	s15, [r7, #20]
    KF_Matrix21 results;
    results.a11 = mx.a11 * scalar;
 8004f32:	ed97 7a04 	vldr	s14, [r7, #16]
 8004f36:	edd7 7a03 	vldr	s15, [r7, #12]
 8004f3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f3e:	edc7 7a06 	vstr	s15, [r7, #24]
    results.a21 = mx.a21 * scalar;
 8004f42:	ed97 7a05 	vldr	s14, [r7, #20]
 8004f46:	edd7 7a03 	vldr	s15, [r7, #12]
 8004f4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f4e:	edc7 7a07 	vstr	s15, [r7, #28]
    return results;
 8004f52:	f107 0320 	add.w	r3, r7, #32
 8004f56:	f107 0218 	add.w	r2, r7, #24
 8004f5a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004f5e:	e883 0003 	stmia.w	r3, {r0, r1}
 8004f62:	6a3a      	ldr	r2, [r7, #32]
 8004f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f66:	ee07 2a10 	vmov	s14, r2
 8004f6a:	ee07 3a90 	vmov	s15, r3
}
 8004f6e:	eeb0 0a47 	vmov.f32	s0, s14
 8004f72:	eef0 0a67 	vmov.f32	s1, s15
 8004f76:	372c      	adds	r7, #44	; 0x2c
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7e:	4770      	bx	lr

08004f80 <BMI088_Init>:
 *
 */
uint8_t BMI088_Init(BMI088 *imu,
				 SPI_HandleTypeDef *spiHandle,
				 GPIO_TypeDef *csAccPinBank, uint16_t csAccPin,
				 GPIO_TypeDef *csGyrPinBank, uint16_t csGyrPin) {
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b086      	sub	sp, #24
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	60f8      	str	r0, [r7, #12]
 8004f88:	60b9      	str	r1, [r7, #8]
 8004f8a:	607a      	str	r2, [r7, #4]
 8004f8c:	807b      	strh	r3, [r7, #2]

	/* Store interface parameters in struct */
	imu->spiHandle 		= spiHandle;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	68ba      	ldr	r2, [r7, #8]
 8004f92:	601a      	str	r2, [r3, #0]
	imu->csAccPinBank 	= csAccPinBank;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	687a      	ldr	r2, [r7, #4]
 8004f98:	605a      	str	r2, [r3, #4]
	imu->csAccPin 		= csAccPin;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	887a      	ldrh	r2, [r7, #2]
 8004f9e:	819a      	strh	r2, [r3, #12]
	imu->csGyrPinBank 	= csGyrPinBank;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	6a3a      	ldr	r2, [r7, #32]
 8004fa4:	609a      	str	r2, [r3, #8]
	imu->csGyrPin 		= csGyrPin;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004faa:	81da      	strh	r2, [r3, #14]

	/* Clear DMA flags */
	imu->readingAcc = 0;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	2200      	movs	r2, #0
 8004fb0:	741a      	strb	r2, [r3, #16]
	imu->readingGyr = 0;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	745a      	strb	r2, [r3, #17]

	uint8_t status = 0;
 8004fb8:	2300      	movs	r3, #0
 8004fba:	75fb      	strb	r3, [r7, #23]
	/*
	 *
	 * ACCELEROMETER
	 *
	 */
	uint8_t chipID=2;
 8004fbc:	2302      	movs	r3, #2
 8004fbe:	75bb      	strb	r3, [r7, #22]
		}
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
		HAL_Delay(200);
	}*/
	/* Accelerometer requires rising edge on CSB at start-up to activate SPI */
	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_RESET);
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	6858      	ldr	r0, [r3, #4]
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	899b      	ldrh	r3, [r3, #12]
 8004fc8:	2200      	movs	r2, #0
 8004fca:	4619      	mov	r1, r3
 8004fcc:	f002 f984 	bl	80072d8 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8004fd0:	2001      	movs	r0, #1
 8004fd2:	f001 f84b 	bl	800606c <HAL_Delay>
	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_SET);
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	6858      	ldr	r0, [r3, #4]
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	899b      	ldrh	r3, [r3, #12]
 8004fde:	2201      	movs	r2, #1
 8004fe0:	4619      	mov	r1, r3
 8004fe2:	f002 f979 	bl	80072d8 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8004fe6:	2032      	movs	r0, #50	; 0x32
 8004fe8:	f001 f840 	bl	800606c <HAL_Delay>

	/* Perform accelerometer soft reset */
	status += BMI088_WriteAccRegister(imu, BMI_ACC_SOFTRESET, 0xB6);
 8004fec:	22b6      	movs	r2, #182	; 0xb6
 8004fee:	217e      	movs	r1, #126	; 0x7e
 8004ff0:	68f8      	ldr	r0, [r7, #12]
 8004ff2:	f000 f95b 	bl	80052ac <BMI088_WriteAccRegister>
 8004ff6:	4603      	mov	r3, r0
 8004ff8:	461a      	mov	r2, r3
 8004ffa:	7dfb      	ldrb	r3, [r7, #23]
 8004ffc:	4413      	add	r3, r2
 8004ffe:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(50);
 8005000:	2032      	movs	r0, #50	; 0x32
 8005002:	f001 f833 	bl	800606c <HAL_Delay>

	/* Check chip ID */
	chipID=2;
 8005006:	2302      	movs	r3, #2
 8005008:	75bb      	strb	r3, [r7, #22]

	status += BMI088_ReadAccRegister(imu, BMI_ACC_CHIP_ID, &chipID);
 800500a:	f107 0316 	add.w	r3, r7, #22
 800500e:	461a      	mov	r2, r3
 8005010:	2100      	movs	r1, #0
 8005012:	68f8      	ldr	r0, [r7, #12]
 8005014:	f000 f8d0 	bl	80051b8 <BMI088_ReadAccRegister>
 8005018:	4603      	mov	r3, r0
 800501a:	461a      	mov	r2, r3
 800501c:	7dfb      	ldrb	r3, [r7, #23]
 800501e:	4413      	add	r3, r2
 8005020:	75fb      	strb	r3, [r7, #23]

	/*HAL_Delay(10);
	//status += BMI088_ReadAccRegister(imu, 0x02, &chipID); //0x02 ACC_ERR_REG return 0xFF ->fatal error
	status += BMI088_ReadAccRegister(imu, 0x02, &chipID);*/

	HAL_Delay(10);
 8005022:	200a      	movs	r0, #10
 8005024:	f001 f822 	bl	800606c <HAL_Delay>

	/* Configure accelerometer  */

	status += BMI088_WriteAccRegister(imu, BMI_ACC_CONF, 0xA9); /* (0xA8 no oversampling, ODR = 100 Hz, BW = 40 Hz), 200 Hz no oversampling 0xA9, 0x99 200Hz OSR2  */
 8005028:	22a9      	movs	r2, #169	; 0xa9
 800502a:	2140      	movs	r1, #64	; 0x40
 800502c:	68f8      	ldr	r0, [r7, #12]
 800502e:	f000 f93d 	bl	80052ac <BMI088_WriteAccRegister>
 8005032:	4603      	mov	r3, r0
 8005034:	461a      	mov	r2, r3
 8005036:	7dfb      	ldrb	r3, [r7, #23]
 8005038:	4413      	add	r3, r2
 800503a:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 800503c:	200a      	movs	r0, #10
 800503e:	f001 f815 	bl	800606c <HAL_Delay>


	status += BMI088_WriteAccRegister(imu, BMI_ACC_RANGE, 0x00); /* +- 3g range */
 8005042:	2200      	movs	r2, #0
 8005044:	2141      	movs	r1, #65	; 0x41
 8005046:	68f8      	ldr	r0, [r7, #12]
 8005048:	f000 f930 	bl	80052ac <BMI088_WriteAccRegister>
 800504c:	4603      	mov	r3, r0
 800504e:	461a      	mov	r2, r3
 8005050:	7dfb      	ldrb	r3, [r7, #23]
 8005052:	4413      	add	r3, r2
 8005054:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8005056:	200a      	movs	r0, #10
 8005058:	f001 f808 	bl	800606c <HAL_Delay>


	/* Enable accelerometer data ready interrupt */
	status += BMI088_WriteAccRegister(imu, BMI_INT1_IO_CONF, 0x0A); /* INT1 = push-pull output, active high */
 800505c:	220a      	movs	r2, #10
 800505e:	2153      	movs	r1, #83	; 0x53
 8005060:	68f8      	ldr	r0, [r7, #12]
 8005062:	f000 f923 	bl	80052ac <BMI088_WriteAccRegister>
 8005066:	4603      	mov	r3, r0
 8005068:	461a      	mov	r2, r3
 800506a:	7dfb      	ldrb	r3, [r7, #23]
 800506c:	4413      	add	r3, r2
 800506e:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8005070:	200a      	movs	r0, #10
 8005072:	f000 fffb 	bl	800606c <HAL_Delay>

	status += BMI088_WriteAccRegister(imu, BMI_INT1_INT2_MAP_DATA, 0x04);//ACC INT -> INT1
 8005076:	2204      	movs	r2, #4
 8005078:	2158      	movs	r1, #88	; 0x58
 800507a:	68f8      	ldr	r0, [r7, #12]
 800507c:	f000 f916 	bl	80052ac <BMI088_WriteAccRegister>
 8005080:	4603      	mov	r3, r0
 8005082:	461a      	mov	r2, r3
 8005084:	7dfb      	ldrb	r3, [r7, #23]
 8005086:	4413      	add	r3, r2
 8005088:	75fb      	strb	r3, [r7, #23]

	HAL_Delay(10);
 800508a:	200a      	movs	r0, #10
 800508c:	f000 ffee 	bl	800606c <HAL_Delay>

	/* Put accelerometer into active mode */
	status += BMI088_WriteAccRegister(imu, BMI_ACC_PWR_CONF, 0x00);
 8005090:	2200      	movs	r2, #0
 8005092:	217c      	movs	r1, #124	; 0x7c
 8005094:	68f8      	ldr	r0, [r7, #12]
 8005096:	f000 f909 	bl	80052ac <BMI088_WriteAccRegister>
 800509a:	4603      	mov	r3, r0
 800509c:	461a      	mov	r2, r3
 800509e:	7dfb      	ldrb	r3, [r7, #23]
 80050a0:	4413      	add	r3, r2
 80050a2:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 80050a4:	200a      	movs	r0, #10
 80050a6:	f000 ffe1 	bl	800606c <HAL_Delay>

	/* Turn accelerometer on */
	status += BMI088_WriteAccRegister(imu, BMI_ACC_PWR_CTRL, 0x04);
 80050aa:	2204      	movs	r2, #4
 80050ac:	217d      	movs	r1, #125	; 0x7d
 80050ae:	68f8      	ldr	r0, [r7, #12]
 80050b0:	f000 f8fc 	bl	80052ac <BMI088_WriteAccRegister>
 80050b4:	4603      	mov	r3, r0
 80050b6:	461a      	mov	r2, r3
 80050b8:	7dfb      	ldrb	r3, [r7, #23]
 80050ba:	4413      	add	r3, r2
 80050bc:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 80050be:	200a      	movs	r0, #10
 80050c0:	f000 ffd4 	bl	800606c <HAL_Delay>

	/* Pre-compute accelerometer conversion constant (raw to m/s^2), 9.81 g-constant, 32768 normalize raw data, 2^(<0x41>+1)*1.5, <0x41> is the acc range register */
	imu->accConversion = 9.81f / 32768.0f * 2.0f * 1.5f; /* Datasheet page 27 */
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	4a3a      	ldr	r2, [pc, #232]	; (80051b0 <BMI088_Init+0x230>)
 80050c8:	631a      	str	r2, [r3, #48]	; 0x30
	
	/* Set accelerometer TX buffer for DMA */
	imu->accTxBuf[0] = BMI_ACC_DATA | 0x80;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	2292      	movs	r2, #146	; 0x92
 80050ce:	749a      	strb	r2, [r3, #18]
	 *
	 * GYROSCOPE
	 *
	 */

	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_SET);
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	6898      	ldr	r0, [r3, #8]
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	89db      	ldrh	r3, [r3, #14]
 80050d8:	2201      	movs	r2, #1
 80050da:	4619      	mov	r1, r3
 80050dc:	f002 f8fc 	bl	80072d8 <HAL_GPIO_WritePin>

	/* Perform gyro soft reset */
	status += BMI088_WriteGyrRegister(imu, BMI_GYR_SOFTRESET, 0xB6);
 80050e0:	22b6      	movs	r2, #182	; 0xb6
 80050e2:	2114      	movs	r1, #20
 80050e4:	68f8      	ldr	r0, [r7, #12]
 80050e6:	f000 f91b 	bl	8005320 <BMI088_WriteGyrRegister>
 80050ea:	4603      	mov	r3, r0
 80050ec:	461a      	mov	r2, r3
 80050ee:	7dfb      	ldrb	r3, [r7, #23]
 80050f0:	4413      	add	r3, r2
 80050f2:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(250);
 80050f4:	20fa      	movs	r0, #250	; 0xfa
 80050f6:	f000 ffb9 	bl	800606c <HAL_Delay>

	/* Check chip ID */
	status += BMI088_ReadGyrRegister(imu, BMI_GYR_CHIP_ID, &chipID);
 80050fa:	f107 0316 	add.w	r3, r7, #22
 80050fe:	461a      	mov	r2, r3
 8005100:	2100      	movs	r1, #0
 8005102:	68f8      	ldr	r0, [r7, #12]
 8005104:	f000 f896 	bl	8005234 <BMI088_ReadGyrRegister>
 8005108:	4603      	mov	r3, r0
 800510a:	461a      	mov	r2, r3
 800510c:	7dfb      	ldrb	r3, [r7, #23]
 800510e:	4413      	add	r3, r2
 8005110:	75fb      	strb	r3, [r7, #23]

		//return 0;

	}

	HAL_Delay(10);
 8005112:	200a      	movs	r0, #10
 8005114:	f000 ffaa 	bl	800606c <HAL_Delay>

	/* Configure gyroscope */
	status += BMI088_WriteGyrRegister(imu, BMI_GYR_RANGE, 0x01); /* +- 1000 deg/s */
 8005118:	2201      	movs	r2, #1
 800511a:	210f      	movs	r1, #15
 800511c:	68f8      	ldr	r0, [r7, #12]
 800511e:	f000 f8ff 	bl	8005320 <BMI088_WriteGyrRegister>
 8005122:	4603      	mov	r3, r0
 8005124:	461a      	mov	r2, r3
 8005126:	7dfb      	ldrb	r3, [r7, #23]
 8005128:	4413      	add	r3, r2
 800512a:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 800512c:	200a      	movs	r0, #10
 800512e:	f000 ff9d 	bl	800606c <HAL_Delay>


	status += BMI088_WriteGyrRegister(imu, BMI_GYR_BANDWIDTH, 0x06); /* 0x07 ODR = 100 Hz, Filter bandwidth = 32 Hz, 0x06 BW = 64Hz ODR = 200 Hz, 0x04 ODR = 200Hz BW = 23Hz */
 8005132:	2206      	movs	r2, #6
 8005134:	2110      	movs	r1, #16
 8005136:	68f8      	ldr	r0, [r7, #12]
 8005138:	f000 f8f2 	bl	8005320 <BMI088_WriteGyrRegister>
 800513c:	4603      	mov	r3, r0
 800513e:	461a      	mov	r2, r3
 8005140:	7dfb      	ldrb	r3, [r7, #23]
 8005142:	4413      	add	r3, r2
 8005144:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8005146:	200a      	movs	r0, #10
 8005148:	f000 ff90 	bl	800606c <HAL_Delay>

	/* Enable gyroscope data ready interrupt */
	status += BMI088_WriteGyrRegister(imu, BMI_GYR_INT_CTRL, 0x80); /* New data interrupt enabled */
 800514c:	2280      	movs	r2, #128	; 0x80
 800514e:	2115      	movs	r1, #21
 8005150:	68f8      	ldr	r0, [r7, #12]
 8005152:	f000 f8e5 	bl	8005320 <BMI088_WriteGyrRegister>
 8005156:	4603      	mov	r3, r0
 8005158:	461a      	mov	r2, r3
 800515a:	7dfb      	ldrb	r3, [r7, #23]
 800515c:	4413      	add	r3, r2
 800515e:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8005160:	200a      	movs	r0, #10
 8005162:	f000 ff83 	bl	800606c <HAL_Delay>

	status += BMI088_WriteGyrRegister(imu, BMI_INT3_INT4_IO_CONF, 0x01); /* INT3 = push-pull, active high */
 8005166:	2201      	movs	r2, #1
 8005168:	2116      	movs	r1, #22
 800516a:	68f8      	ldr	r0, [r7, #12]
 800516c:	f000 f8d8 	bl	8005320 <BMI088_WriteGyrRegister>
 8005170:	4603      	mov	r3, r0
 8005172:	461a      	mov	r2, r3
 8005174:	7dfb      	ldrb	r3, [r7, #23]
 8005176:	4413      	add	r3, r2
 8005178:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 800517a:	200a      	movs	r0, #10
 800517c:	f000 ff76 	bl	800606c <HAL_Delay>

	status += BMI088_WriteGyrRegister(imu, BMI_INT3_INT4_IO_MAP, 0x01); /* Data ready interrupt mapped to INT3 pin */
 8005180:	2201      	movs	r2, #1
 8005182:	2118      	movs	r1, #24
 8005184:	68f8      	ldr	r0, [r7, #12]
 8005186:	f000 f8cb 	bl	8005320 <BMI088_WriteGyrRegister>
 800518a:	4603      	mov	r3, r0
 800518c:	461a      	mov	r2, r3
 800518e:	7dfb      	ldrb	r3, [r7, #23]
 8005190:	4413      	add	r3, r2
 8005192:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8005194:	200a      	movs	r0, #10
 8005196:	f000 ff69 	bl	800606c <HAL_Delay>

	/* Pre-compute gyroscope conversion constant (raw to rad/s) 0.017 °/s -> rad/s, 1000 the range, 32768 normalize the raw data*/
	imu->gyrConversion = 0.01745329251f * 1000.0f / 32768.0f; /* Datasheet page 39 */
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	4a05      	ldr	r2, [pc, #20]	; (80051b4 <BMI088_Init+0x234>)
 800519e:	635a      	str	r2, [r3, #52]	; 0x34
	
	/* Set gyroscope TX buffer for DMA */
	imu->gyrTxBuf[0] = BMI_GYR_DATA | 0x80;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	2282      	movs	r2, #130	; 0x82
 80051a4:	769a      	strb	r2, [r3, #26]

	return status;
 80051a6:	7dfb      	ldrb	r3, [r7, #23]

}
 80051a8:	4618      	mov	r0, r3
 80051aa:	3718      	adds	r7, #24
 80051ac:	46bd      	mov	sp, r7
 80051ae:	bd80      	pop	{r7, pc}
 80051b0:	3a6b70a4 	.word	0x3a6b70a4
 80051b4:	3a0ba058 	.word	0x3a0ba058

080051b8 <BMI088_ReadAccRegister>:
 * LOW-LEVEL REGISTER FUNCTIONS
 *
 */

/* ACCELEROMETER READS ARE DIFFERENT TO GYROSCOPE READS. SEND ONE BYTE ADDRESS, READ ONE DUMMY BYTE, READ TRUE DATA !!! */
uint8_t BMI088_ReadAccRegister(BMI088 *imu, uint8_t regAddr, uint8_t *data) {
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b088      	sub	sp, #32
 80051bc:	af02      	add	r7, sp, #8
 80051be:	60f8      	str	r0, [r7, #12]
 80051c0:	460b      	mov	r3, r1
 80051c2:	607a      	str	r2, [r7, #4]
 80051c4:	72fb      	strb	r3, [r7, #11]

	uint8_t txBuf[3] = {regAddr | 0x80, 0x00, 0x00};
 80051c6:	7afb      	ldrb	r3, [r7, #11]
 80051c8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80051cc:	b2db      	uxtb	r3, r3
 80051ce:	753b      	strb	r3, [r7, #20]
 80051d0:	2300      	movs	r3, #0
 80051d2:	757b      	strb	r3, [r7, #21]
 80051d4:	2300      	movs	r3, #0
 80051d6:	75bb      	strb	r3, [r7, #22]
	uint8_t rxBuf[3];

	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_RESET);
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	6858      	ldr	r0, [r3, #4]
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	899b      	ldrh	r3, [r3, #12]
 80051e0:	2200      	movs	r2, #0
 80051e2:	4619      	mov	r1, r3
 80051e4:	f002 f878 	bl	80072d8 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_TransmitReceive(imu->spiHandle, txBuf, rxBuf, 3, HAL_MAX_DELAY) == HAL_OK);
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	6818      	ldr	r0, [r3, #0]
 80051ec:	f107 0210 	add.w	r2, r7, #16
 80051f0:	f107 0114 	add.w	r1, r7, #20
 80051f4:	f04f 33ff 	mov.w	r3, #4294967295
 80051f8:	9300      	str	r3, [sp, #0]
 80051fa:	2303      	movs	r3, #3
 80051fc:	f004 f803 	bl	8009206 <HAL_SPI_TransmitReceive>
 8005200:	4603      	mov	r3, r0
 8005202:	2b00      	cmp	r3, #0
 8005204:	bf0c      	ite	eq
 8005206:	2301      	moveq	r3, #1
 8005208:	2300      	movne	r3, #0
 800520a:	b2db      	uxtb	r3, r3
 800520c:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_SET);
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	6858      	ldr	r0, [r3, #4]
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	899b      	ldrh	r3, [r3, #12]
 8005216:	2201      	movs	r2, #1
 8005218:	4619      	mov	r1, r3
 800521a:	f002 f85d 	bl	80072d8 <HAL_GPIO_WritePin>

	if (status == 1) {
 800521e:	7dfb      	ldrb	r3, [r7, #23]
 8005220:	2b01      	cmp	r3, #1
 8005222:	d102      	bne.n	800522a <BMI088_ReadAccRegister+0x72>

		*data = rxBuf[2];
 8005224:	7cba      	ldrb	r2, [r7, #18]
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	701a      	strb	r2, [r3, #0]

	}

	return status;
 800522a:	7dfb      	ldrb	r3, [r7, #23]

}
 800522c:	4618      	mov	r0, r3
 800522e:	3718      	adds	r7, #24
 8005230:	46bd      	mov	sp, r7
 8005232:	bd80      	pop	{r7, pc}

08005234 <BMI088_ReadGyrRegister>:

uint8_t BMI088_ReadGyrRegister(BMI088 *imu, uint8_t regAddr, uint8_t *data) {
 8005234:	b580      	push	{r7, lr}
 8005236:	b088      	sub	sp, #32
 8005238:	af02      	add	r7, sp, #8
 800523a:	60f8      	str	r0, [r7, #12]
 800523c:	460b      	mov	r3, r1
 800523e:	607a      	str	r2, [r7, #4]
 8005240:	72fb      	strb	r3, [r7, #11]

	uint8_t txBuf[2] = {regAddr | 0x80, 0x00}; //0x80
 8005242:	7afb      	ldrb	r3, [r7, #11]
 8005244:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005248:	b2db      	uxtb	r3, r3
 800524a:	753b      	strb	r3, [r7, #20]
 800524c:	2300      	movs	r3, #0
 800524e:	757b      	strb	r3, [r7, #21]
	uint8_t rxBuf[2];

	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_RESET);
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	6898      	ldr	r0, [r3, #8]
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	89db      	ldrh	r3, [r3, #14]
 8005258:	2200      	movs	r2, #0
 800525a:	4619      	mov	r1, r3
 800525c:	f002 f83c 	bl	80072d8 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_TransmitReceive(imu->spiHandle, txBuf, rxBuf, 2, HAL_MAX_DELAY) == HAL_OK);
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	6818      	ldr	r0, [r3, #0]
 8005264:	f107 0210 	add.w	r2, r7, #16
 8005268:	f107 0114 	add.w	r1, r7, #20
 800526c:	f04f 33ff 	mov.w	r3, #4294967295
 8005270:	9300      	str	r3, [sp, #0]
 8005272:	2302      	movs	r3, #2
 8005274:	f003 ffc7 	bl	8009206 <HAL_SPI_TransmitReceive>
 8005278:	4603      	mov	r3, r0
 800527a:	2b00      	cmp	r3, #0
 800527c:	bf0c      	ite	eq
 800527e:	2301      	moveq	r3, #1
 8005280:	2300      	movne	r3, #0
 8005282:	b2db      	uxtb	r3, r3
 8005284:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_SET);
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	6898      	ldr	r0, [r3, #8]
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	89db      	ldrh	r3, [r3, #14]
 800528e:	2201      	movs	r2, #1
 8005290:	4619      	mov	r1, r3
 8005292:	f002 f821 	bl	80072d8 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_RESET);
	uint8_t status = (HAL_SPI_TransmitReceive(imu->spiHandle, txBuf, rxBuf, 3, HAL_MAX_DELAY) == HAL_OK);
	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_SET);*/

	if (status == 1) {
 8005296:	7dfb      	ldrb	r3, [r7, #23]
 8005298:	2b01      	cmp	r3, #1
 800529a:	d102      	bne.n	80052a2 <BMI088_ReadGyrRegister+0x6e>

		*data = rxBuf[1];
 800529c:	7c7a      	ldrb	r2, [r7, #17]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	701a      	strb	r2, [r3, #0]

	}

	return status;
 80052a2:	7dfb      	ldrb	r3, [r7, #23]

}
 80052a4:	4618      	mov	r0, r3
 80052a6:	3718      	adds	r7, #24
 80052a8:	46bd      	mov	sp, r7
 80052aa:	bd80      	pop	{r7, pc}

080052ac <BMI088_WriteAccRegister>:

uint8_t BMI088_WriteAccRegister(BMI088 *imu, uint8_t regAddr, uint8_t data) {
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b084      	sub	sp, #16
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
 80052b4:	460b      	mov	r3, r1
 80052b6:	70fb      	strb	r3, [r7, #3]
 80052b8:	4613      	mov	r3, r2
 80052ba:	70bb      	strb	r3, [r7, #2]

	uint8_t txBuf[2] = {regAddr, data};
 80052bc:	78fb      	ldrb	r3, [r7, #3]
 80052be:	733b      	strb	r3, [r7, #12]
 80052c0:	78bb      	ldrb	r3, [r7, #2]
 80052c2:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_RESET);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6858      	ldr	r0, [r3, #4]
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	899b      	ldrh	r3, [r3, #12]
 80052cc:	2200      	movs	r2, #0
 80052ce:	4619      	mov	r1, r3
 80052d0:	f002 f802 	bl	80072d8 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_Transmit(imu->spiHandle, txBuf, 2, HAL_MAX_DELAY) == HAL_OK);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6818      	ldr	r0, [r3, #0]
 80052d8:	f107 010c 	add.w	r1, r7, #12
 80052dc:	f04f 33ff 	mov.w	r3, #4294967295
 80052e0:	2202      	movs	r2, #2
 80052e2:	f003 fe54 	bl	8008f8e <HAL_SPI_Transmit>
 80052e6:	4603      	mov	r3, r0
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	bf0c      	ite	eq
 80052ec:	2301      	moveq	r3, #1
 80052ee:	2300      	movne	r3, #0
 80052f0:	b2db      	uxtb	r3, r3
 80052f2:	73fb      	strb	r3, [r7, #15]
	while(HAL_SPI_GetState(imu->spiHandle) != HAL_SPI_STATE_READY);
 80052f4:	bf00      	nop
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4618      	mov	r0, r3
 80052fc:	f004 f925 	bl	800954a <HAL_SPI_GetState>
 8005300:	4603      	mov	r3, r0
 8005302:	2b01      	cmp	r3, #1
 8005304:	d1f7      	bne.n	80052f6 <BMI088_WriteAccRegister+0x4a>
	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_SET);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6858      	ldr	r0, [r3, #4]
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	899b      	ldrh	r3, [r3, #12]
 800530e:	2201      	movs	r2, #1
 8005310:	4619      	mov	r1, r3
 8005312:	f001 ffe1 	bl	80072d8 <HAL_GPIO_WritePin>

	return status;
 8005316:	7bfb      	ldrb	r3, [r7, #15]

}
 8005318:	4618      	mov	r0, r3
 800531a:	3710      	adds	r7, #16
 800531c:	46bd      	mov	sp, r7
 800531e:	bd80      	pop	{r7, pc}

08005320 <BMI088_WriteGyrRegister>:

uint8_t BMI088_WriteGyrRegister(BMI088 *imu, uint8_t regAddr, uint8_t data) {
 8005320:	b580      	push	{r7, lr}
 8005322:	b084      	sub	sp, #16
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
 8005328:	460b      	mov	r3, r1
 800532a:	70fb      	strb	r3, [r7, #3]
 800532c:	4613      	mov	r3, r2
 800532e:	70bb      	strb	r3, [r7, #2]

	uint8_t txBuf[2] = {regAddr, data};
 8005330:	78fb      	ldrb	r3, [r7, #3]
 8005332:	733b      	strb	r3, [r7, #12]
 8005334:	78bb      	ldrb	r3, [r7, #2]
 8005336:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_RESET);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6898      	ldr	r0, [r3, #8]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	89db      	ldrh	r3, [r3, #14]
 8005340:	2200      	movs	r2, #0
 8005342:	4619      	mov	r1, r3
 8005344:	f001 ffc8 	bl	80072d8 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_Transmit(imu->spiHandle, txBuf, 2, HAL_MAX_DELAY) == HAL_OK);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6818      	ldr	r0, [r3, #0]
 800534c:	f107 010c 	add.w	r1, r7, #12
 8005350:	f04f 33ff 	mov.w	r3, #4294967295
 8005354:	2202      	movs	r2, #2
 8005356:	f003 fe1a 	bl	8008f8e <HAL_SPI_Transmit>
 800535a:	4603      	mov	r3, r0
 800535c:	2b00      	cmp	r3, #0
 800535e:	bf0c      	ite	eq
 8005360:	2301      	moveq	r3, #1
 8005362:	2300      	movne	r3, #0
 8005364:	b2db      	uxtb	r3, r3
 8005366:	73fb      	strb	r3, [r7, #15]
	while(HAL_SPI_GetState(imu->spiHandle) != HAL_SPI_STATE_READY);
 8005368:	bf00      	nop
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4618      	mov	r0, r3
 8005370:	f004 f8eb 	bl	800954a <HAL_SPI_GetState>
 8005374:	4603      	mov	r3, r0
 8005376:	2b01      	cmp	r3, #1
 8005378:	d1f7      	bne.n	800536a <BMI088_WriteGyrRegister+0x4a>
	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_SET);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6898      	ldr	r0, [r3, #8]
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	89db      	ldrh	r3, [r3, #14]
 8005382:	2201      	movs	r2, #1
 8005384:	4619      	mov	r1, r3
 8005386:	f001 ffa7 	bl	80072d8 <HAL_GPIO_WritePin>

	return status;
 800538a:	7bfb      	ldrb	r3, [r7, #15]

}
 800538c:	4618      	mov	r0, r3
 800538e:	3710      	adds	r7, #16
 8005390:	46bd      	mov	sp, r7
 8005392:	bd80      	pop	{r7, pc}

08005394 <BMI088_ReadAccelerometer>:
/*
 *
 * POLLING
 *
 */
uint8_t BMI088_ReadAccelerometer(BMI088 *imu) {
 8005394:	b580      	push	{r7, lr}
 8005396:	b08a      	sub	sp, #40	; 0x28
 8005398:	af02      	add	r7, sp, #8
 800539a:	6078      	str	r0, [r7, #4]

	/* Read raw accelerometer data */
	uint8_t txBuf[8] = {(BMI_ACC_DATA | 0x80), 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}; /* Register addr, 1 byte dummy, 6 bytes data */
 800539c:	4a36      	ldr	r2, [pc, #216]	; (8005478 <BMI088_ReadAccelerometer+0xe4>)
 800539e:	f107 0310 	add.w	r3, r7, #16
 80053a2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80053a6:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t rxBuf[8];

	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_RESET);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6858      	ldr	r0, [r3, #4]
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	899b      	ldrh	r3, [r3, #12]
 80053b2:	2200      	movs	r2, #0
 80053b4:	4619      	mov	r1, r3
 80053b6:	f001 ff8f 	bl	80072d8 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_TransmitReceive(imu->spiHandle, txBuf, rxBuf, 8, HAL_MAX_DELAY) == HAL_OK);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6818      	ldr	r0, [r3, #0]
 80053be:	f107 0208 	add.w	r2, r7, #8
 80053c2:	f107 0110 	add.w	r1, r7, #16
 80053c6:	f04f 33ff 	mov.w	r3, #4294967295
 80053ca:	9300      	str	r3, [sp, #0]
 80053cc:	2308      	movs	r3, #8
 80053ce:	f003 ff1a 	bl	8009206 <HAL_SPI_TransmitReceive>
 80053d2:	4603      	mov	r3, r0
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	bf0c      	ite	eq
 80053d8:	2301      	moveq	r3, #1
 80053da:	2300      	movne	r3, #0
 80053dc:	b2db      	uxtb	r3, r3
 80053de:	77fb      	strb	r3, [r7, #31]
	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_SET);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6858      	ldr	r0, [r3, #4]
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	899b      	ldrh	r3, [r3, #12]
 80053e8:	2201      	movs	r2, #1
 80053ea:	4619      	mov	r1, r3
 80053ec:	f001 ff74 	bl	80072d8 <HAL_GPIO_WritePin>

	/* Form signed 16-bit integers */
	int16_t accX = (int16_t) ((rxBuf[3] << 8) | rxBuf[2]);
 80053f0:	7afb      	ldrb	r3, [r7, #11]
 80053f2:	021b      	lsls	r3, r3, #8
 80053f4:	b21a      	sxth	r2, r3
 80053f6:	7abb      	ldrb	r3, [r7, #10]
 80053f8:	b21b      	sxth	r3, r3
 80053fa:	4313      	orrs	r3, r2
 80053fc:	83bb      	strh	r3, [r7, #28]
	int16_t accY = (int16_t) ((rxBuf[5] << 8) | rxBuf[4]);
 80053fe:	7b7b      	ldrb	r3, [r7, #13]
 8005400:	021b      	lsls	r3, r3, #8
 8005402:	b21a      	sxth	r2, r3
 8005404:	7b3b      	ldrb	r3, [r7, #12]
 8005406:	b21b      	sxth	r3, r3
 8005408:	4313      	orrs	r3, r2
 800540a:	837b      	strh	r3, [r7, #26]
	int16_t accZ = (int16_t) ((rxBuf[7] << 8) | rxBuf[6]);
 800540c:	7bfb      	ldrb	r3, [r7, #15]
 800540e:	021b      	lsls	r3, r3, #8
 8005410:	b21a      	sxth	r2, r3
 8005412:	7bbb      	ldrb	r3, [r7, #14]
 8005414:	b21b      	sxth	r3, r3
 8005416:	4313      	orrs	r3, r2
 8005418:	833b      	strh	r3, [r7, #24]

	/* Convert to m/s^2 */
	imu->acc_mps2[0] = imu->accConversion * accX;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8005420:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8005424:	ee07 3a90 	vmov	s15, r3
 8005428:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800542c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
	imu->acc_mps2[1] = imu->accConversion * accY;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 800543c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8005440:	ee07 3a90 	vmov	s15, r3
 8005444:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005448:	ee67 7a27 	vmul.f32	s15, s14, s15
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
	imu->acc_mps2[2] = imu->accConversion * accZ;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8005458:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800545c:	ee07 3a90 	vmov	s15, r3
 8005460:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005464:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40

	return status;
 800546e:	7ffb      	ldrb	r3, [r7, #31]

}
 8005470:	4618      	mov	r0, r3
 8005472:	3720      	adds	r7, #32
 8005474:	46bd      	mov	sp, r7
 8005476:	bd80      	pop	{r7, pc}
 8005478:	08016030 	.word	0x08016030

0800547c <BMI088_ReadGyroscope>:

uint8_t BMI088_ReadGyroscope(BMI088 *imu) {
 800547c:	b580      	push	{r7, lr}
 800547e:	b08a      	sub	sp, #40	; 0x28
 8005480:	af02      	add	r7, sp, #8
 8005482:	6078      	str	r0, [r7, #4]

	/* Read raw gyroscope data */
	uint8_t txBuf[7] = {(BMI_GYR_DATA | 0x80), 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}; /* Register addr, 6 bytes data */
 8005484:	4a38      	ldr	r2, [pc, #224]	; (8005568 <BMI088_ReadGyroscope+0xec>)
 8005486:	f107 0310 	add.w	r3, r7, #16
 800548a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800548e:	6018      	str	r0, [r3, #0]
 8005490:	3304      	adds	r3, #4
 8005492:	8019      	strh	r1, [r3, #0]
 8005494:	3302      	adds	r3, #2
 8005496:	0c0a      	lsrs	r2, r1, #16
 8005498:	701a      	strb	r2, [r3, #0]
	uint8_t rxBuf[7];

	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_RESET);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6898      	ldr	r0, [r3, #8]
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	89db      	ldrh	r3, [r3, #14]
 80054a2:	2200      	movs	r2, #0
 80054a4:	4619      	mov	r1, r3
 80054a6:	f001 ff17 	bl	80072d8 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_TransmitReceive(imu->spiHandle, txBuf, rxBuf, 7, HAL_MAX_DELAY) == HAL_OK);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6818      	ldr	r0, [r3, #0]
 80054ae:	f107 0208 	add.w	r2, r7, #8
 80054b2:	f107 0110 	add.w	r1, r7, #16
 80054b6:	f04f 33ff 	mov.w	r3, #4294967295
 80054ba:	9300      	str	r3, [sp, #0]
 80054bc:	2307      	movs	r3, #7
 80054be:	f003 fea2 	bl	8009206 <HAL_SPI_TransmitReceive>
 80054c2:	4603      	mov	r3, r0
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	bf0c      	ite	eq
 80054c8:	2301      	moveq	r3, #1
 80054ca:	2300      	movne	r3, #0
 80054cc:	b2db      	uxtb	r3, r3
 80054ce:	77fb      	strb	r3, [r7, #31]
	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_SET);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6898      	ldr	r0, [r3, #8]
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	89db      	ldrh	r3, [r3, #14]
 80054d8:	2201      	movs	r2, #1
 80054da:	4619      	mov	r1, r3
 80054dc:	f001 fefc 	bl	80072d8 <HAL_GPIO_WritePin>

	/* Form signed 16-bit integers */
	int16_t gyrX = (int16_t) ((rxBuf[2] << 8) | rxBuf[1]);
 80054e0:	7abb      	ldrb	r3, [r7, #10]
 80054e2:	021b      	lsls	r3, r3, #8
 80054e4:	b21a      	sxth	r2, r3
 80054e6:	7a7b      	ldrb	r3, [r7, #9]
 80054e8:	b21b      	sxth	r3, r3
 80054ea:	4313      	orrs	r3, r2
 80054ec:	83bb      	strh	r3, [r7, #28]
	int16_t gyrY = (int16_t) ((rxBuf[4] << 8) | rxBuf[3]);
 80054ee:	7b3b      	ldrb	r3, [r7, #12]
 80054f0:	021b      	lsls	r3, r3, #8
 80054f2:	b21a      	sxth	r2, r3
 80054f4:	7afb      	ldrb	r3, [r7, #11]
 80054f6:	b21b      	sxth	r3, r3
 80054f8:	4313      	orrs	r3, r2
 80054fa:	837b      	strh	r3, [r7, #26]
	int16_t gyrZ = (int16_t) ((rxBuf[6] << 8) | rxBuf[5]);
 80054fc:	7bbb      	ldrb	r3, [r7, #14]
 80054fe:	021b      	lsls	r3, r3, #8
 8005500:	b21a      	sxth	r2, r3
 8005502:	7b7b      	ldrb	r3, [r7, #13]
 8005504:	b21b      	sxth	r3, r3
 8005506:	4313      	orrs	r3, r2
 8005508:	833b      	strh	r3, [r7, #24]

	/* Convert to rad/s */
	imu->gyr_rps[0] = imu->gyrConversion * gyrX;//-0.0000661263;//-0.000220318;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8005510:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8005514:	ee07 3a90 	vmov	s15, r3
 8005518:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800551c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
	imu->gyr_rps[1] = imu->gyrConversion * gyrY;//-0.000491353;//-0.001161367;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 800552c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8005530:	ee07 3a90 	vmov	s15, r3
 8005534:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005538:	ee67 7a27 	vmul.f32	s15, s14, s15
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
	imu->gyr_rps[2] = imu->gyrConversion * gyrZ;//-0.002349043;//-0.002582031;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8005548:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800554c:	ee07 3a90 	vmov	s15, r3
 8005550:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005554:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c

	//own code line
	//if(status == 1) HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);
	return status;
 800555e:	7ffb      	ldrb	r3, [r7, #31]

}
 8005560:	4618      	mov	r0, r3
 8005562:	3720      	adds	r7, #32
 8005564:	46bd      	mov	sp, r7
 8005566:	bd80      	pop	{r7, pc}
 8005568:	08016038 	.word	0x08016038

0800556c <BMP388_Init>:
 *
 *  @return Status of execution
 *  @retval = HAL_OK  		-> Success
 *  @retval != HAL_OK	  	-> Failure Info
 */
HAL_StatusTypeDef BMP388_Init(BMP388_HandleTypeDef *bmp){
 800556c:	b580      	push	{r7, lr}
 800556e:	b084      	sub	sp, #16
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef rslt;
	uint8_t chip_id;

	// Read CHIP_ID byte
	rslt = BMP388_ReadBytes(bmp, CHIP_ID, &chip_id, 1);
 8005574:	f107 020e 	add.w	r2, r7, #14
 8005578:	2301      	movs	r3, #1
 800557a:	2100      	movs	r1, #0
 800557c:	6878      	ldr	r0, [r7, #4]
 800557e:	f000 fc08 	bl	8005d92 <BMP388_ReadBytes>
 8005582:	4603      	mov	r3, r0
 8005584:	73fb      	strb	r3, [r7, #15]
	if(rslt == HAL_OK && chip_id == BMP388_CHIP_ID){
 8005586:	7bfb      	ldrb	r3, [r7, #15]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d12a      	bne.n	80055e2 <BMP388_Init+0x76>
 800558c:	7bbb      	ldrb	r3, [r7, #14]
 800558e:	2b50      	cmp	r3, #80	; 0x50
 8005590:	d127      	bne.n	80055e2 <BMP388_Init+0x76>
		// using softreset command
		rslt = BMP388_SoftReset(bmp);
 8005592:	6878      	ldr	r0, [r7, #4]
 8005594:	f000 f962 	bl	800585c <BMP388_SoftReset>
 8005598:	4603      	mov	r3, r0
 800559a:	73fb      	strb	r3, [r7, #15]
		if(rslt == HAL_OK){
 800559c:	7bfb      	ldrb	r3, [r7, #15]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d11d      	bne.n	80055de <BMP388_Init+0x72>
			// get calibration data
			rslt = BMP388_GetCalibData(bmp);
 80055a2:	6878      	ldr	r0, [r7, #4]
 80055a4:	f000 f99a 	bl	80058dc <BMP388_GetCalibData>
 80055a8:	4603      	mov	r3, r0
 80055aa:	73fb      	strb	r3, [r7, #15]
		if(rslt == HAL_OK){
 80055ac:	bf00      	nop
		}
	}
	else{
		return rslt;
	}
	uint8_t pwr_ctrl = BMP388_PWR_CTRL_PRESS_ON | BMP388_PWR_CTRL_TEMP_ON | BMP388_PWR_CTRL_MODE_NORMAL;
 80055ae:	2333      	movs	r3, #51	; 0x33
 80055b0:	737b      	strb	r3, [r7, #13]

	uint8_t oversampling = bmp->_oversampling;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	791b      	ldrb	r3, [r3, #4]
 80055b6:	733b      	strb	r3, [r7, #12]
	uint8_t odr = bmp->_odr;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	799b      	ldrb	r3, [r3, #6]
 80055bc:	72fb      	strb	r3, [r7, #11]
	uint8_t filtercoeff = bmp->_filtercoeff;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	795b      	ldrb	r3, [r3, #5]
 80055c2:	72bb      	strb	r3, [r7, #10]



	// Set OSR register
	rslt = BMP388_WriteBytes(bmp, OSR, &oversampling, 1);
 80055c4:	f107 020c 	add.w	r2, r7, #12
 80055c8:	2301      	movs	r3, #1
 80055ca:	211c      	movs	r1, #28
 80055cc:	6878      	ldr	r0, [r7, #4]
 80055ce:	f000 fbfe 	bl	8005dce <BMP388_WriteBytes>
 80055d2:	4603      	mov	r3, r0
 80055d4:	73fb      	strb	r3, [r7, #15]
	if(rslt != HAL_OK){
 80055d6:	7bfb      	ldrb	r3, [r7, #15]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d006      	beq.n	80055ea <BMP388_Init+0x7e>
 80055dc:	e003      	b.n	80055e6 <BMP388_Init+0x7a>
			return rslt;
 80055de:	7bfb      	ldrb	r3, [r7, #15]
 80055e0:	e03b      	b.n	800565a <BMP388_Init+0xee>
		return rslt;
 80055e2:	7bfb      	ldrb	r3, [r7, #15]
 80055e4:	e039      	b.n	800565a <BMP388_Init+0xee>
		return rslt;
 80055e6:	7bfb      	ldrb	r3, [r7, #15]
 80055e8:	e037      	b.n	800565a <BMP388_Init+0xee>
	}
	// Set ODR register
	rslt = BMP388_WriteBytes(bmp, ODR, &odr, 1);
 80055ea:	f107 020b 	add.w	r2, r7, #11
 80055ee:	2301      	movs	r3, #1
 80055f0:	211d      	movs	r1, #29
 80055f2:	6878      	ldr	r0, [r7, #4]
 80055f4:	f000 fbeb 	bl	8005dce <BMP388_WriteBytes>
 80055f8:	4603      	mov	r3, r0
 80055fa:	73fb      	strb	r3, [r7, #15]
	if(rslt != HAL_OK){
 80055fc:	7bfb      	ldrb	r3, [r7, #15]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d001      	beq.n	8005606 <BMP388_Init+0x9a>
		return rslt;
 8005602:	7bfb      	ldrb	r3, [r7, #15]
 8005604:	e029      	b.n	800565a <BMP388_Init+0xee>
	}
	// Set CONFIG register
	rslt = BMP388_WriteBytes(bmp, CONFIG, &filtercoeff, 1);
 8005606:	f107 020a 	add.w	r2, r7, #10
 800560a:	2301      	movs	r3, #1
 800560c:	211f      	movs	r1, #31
 800560e:	6878      	ldr	r0, [r7, #4]
 8005610:	f000 fbdd 	bl	8005dce <BMP388_WriteBytes>
 8005614:	4603      	mov	r3, r0
 8005616:	73fb      	strb	r3, [r7, #15]
	if(rslt != HAL_OK){
 8005618:	7bfb      	ldrb	r3, [r7, #15]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d001      	beq.n	8005622 <BMP388_Init+0xb6>
		return rslt;
 800561e:	7bfb      	ldrb	r3, [r7, #15]
 8005620:	e01b      	b.n	800565a <BMP388_Init+0xee>
	}
	// Set PWR_CTRL register
	rslt = BMP388_WriteBytes(bmp, PWR_CTRL, &pwr_ctrl, 1);
 8005622:	f107 020d 	add.w	r2, r7, #13
 8005626:	2301      	movs	r3, #1
 8005628:	211b      	movs	r1, #27
 800562a:	6878      	ldr	r0, [r7, #4]
 800562c:	f000 fbcf 	bl	8005dce <BMP388_WriteBytes>
 8005630:	4603      	mov	r3, r0
 8005632:	73fb      	strb	r3, [r7, #15]
	if(rslt != HAL_OK){
 8005634:	7bfb      	ldrb	r3, [r7, #15]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d001      	beq.n	800563e <BMP388_Init+0xd2>
		return rslt;
 800563a:	7bfb      	ldrb	r3, [r7, #15]
 800563c:	e00d      	b.n	800565a <BMP388_Init+0xee>
	}

	rslt = BMP388_WriteBytes(bmp, INT_CTRL, 0x40, 1);
 800563e:	2301      	movs	r3, #1
 8005640:	2240      	movs	r2, #64	; 0x40
 8005642:	2119      	movs	r1, #25
 8005644:	6878      	ldr	r0, [r7, #4]
 8005646:	f000 fbc2 	bl	8005dce <BMP388_WriteBytes>
 800564a:	4603      	mov	r3, r0
 800564c:	73fb      	strb	r3, [r7, #15]
	if(rslt != HAL_OK){
 800564e:	7bfb      	ldrb	r3, [r7, #15]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d001      	beq.n	8005658 <BMP388_Init+0xec>
		return rslt;
 8005654:	7bfb      	ldrb	r3, [r7, #15]
 8005656:	e000      	b.n	800565a <BMP388_Init+0xee>
	}

	return rslt;
 8005658:	7bfb      	ldrb	r3, [r7, #15]
}
 800565a:	4618      	mov	r0, r3
 800565c:	3710      	adds	r7, #16
 800565e:	46bd      	mov	sp, r7
 8005660:	bd80      	pop	{r7, pc}

08005662 <BMP388_SetTempOS>:
 *
 *  @return Status of execution
 *  @retval = HAL_OK  		-> Success
 *  @retval != HAL_OK	  	-> Wrong oversampling mode
 */
HAL_StatusTypeDef BMP388_SetTempOS(BMP388_HandleTypeDef *bmp, uint8_t oversample){
 8005662:	b480      	push	{r7}
 8005664:	b083      	sub	sp, #12
 8005666:	af00      	add	r7, sp, #0
 8005668:	6078      	str	r0, [r7, #4]
 800566a:	460b      	mov	r3, r1
 800566c:	70fb      	strb	r3, [r7, #3]
	if(oversample > BMP388_OVERSAMPLING_32X){
 800566e:	78fb      	ldrb	r3, [r7, #3]
 8005670:	2b05      	cmp	r3, #5
 8005672:	d901      	bls.n	8005678 <BMP388_SetTempOS+0x16>
		return HAL_ERROR;
 8005674:	2301      	movs	r3, #1
 8005676:	e00e      	b.n	8005696 <BMP388_SetTempOS+0x34>
	}
	bmp->_oversampling = (bmp->_oversampling & 0b11000111) | (oversample << 3); //& clear the temp OS bits and the | set the temp OS reg
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	791b      	ldrb	r3, [r3, #4]
 800567c:	b25b      	sxtb	r3, r3
 800567e:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8005682:	b25a      	sxtb	r2, r3
 8005684:	78fb      	ldrb	r3, [r7, #3]
 8005686:	00db      	lsls	r3, r3, #3
 8005688:	b25b      	sxtb	r3, r3
 800568a:	4313      	orrs	r3, r2
 800568c:	b25b      	sxtb	r3, r3
 800568e:	b2da      	uxtb	r2, r3
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	711a      	strb	r2, [r3, #4]
	return HAL_OK;
 8005694:	2300      	movs	r3, #0
}
 8005696:	4618      	mov	r0, r3
 8005698:	370c      	adds	r7, #12
 800569a:	46bd      	mov	sp, r7
 800569c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a0:	4770      	bx	lr

080056a2 <BMP388_SetPressOS>:
 *
 *  @return Status of execution
 *  @retval = HAL_OK  		-> Success
 *  @retval != HAL_OK	  	-> Wrong oversampling mode
 */
HAL_StatusTypeDef BMP388_SetPressOS(BMP388_HandleTypeDef *bmp, uint8_t oversample){
 80056a2:	b480      	push	{r7}
 80056a4:	b083      	sub	sp, #12
 80056a6:	af00      	add	r7, sp, #0
 80056a8:	6078      	str	r0, [r7, #4]
 80056aa:	460b      	mov	r3, r1
 80056ac:	70fb      	strb	r3, [r7, #3]
	if(oversample > BMP388_OVERSAMPLING_32X){
 80056ae:	78fb      	ldrb	r3, [r7, #3]
 80056b0:	2b05      	cmp	r3, #5
 80056b2:	d901      	bls.n	80056b8 <BMP388_SetPressOS+0x16>
		return HAL_ERROR;
 80056b4:	2301      	movs	r3, #1
 80056b6:	e00d      	b.n	80056d4 <BMP388_SetPressOS+0x32>
	}
	bmp->_oversampling = (bmp->_oversampling & 0b11111000) | oversample; //& clear the press OS bits and the | set the press OS reg
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	791b      	ldrb	r3, [r3, #4]
 80056bc:	b25b      	sxtb	r3, r3
 80056be:	f023 0307 	bic.w	r3, r3, #7
 80056c2:	b25a      	sxtb	r2, r3
 80056c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80056c8:	4313      	orrs	r3, r2
 80056ca:	b25b      	sxtb	r3, r3
 80056cc:	b2da      	uxtb	r2, r3
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	711a      	strb	r2, [r3, #4]
	return HAL_OK;
 80056d2:	2300      	movs	r3, #0
}
 80056d4:	4618      	mov	r0, r3
 80056d6:	370c      	adds	r7, #12
 80056d8:	46bd      	mov	sp, r7
 80056da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056de:	4770      	bx	lr

080056e0 <BMP388_SetIIRFilterCoeff>:
 *
 *  @return Status of execution
 *  @retval = HAL_OK  		-> Success
 *  @retval != HAL_OK	  	-> Wrong filter coefficient
 */
HAL_StatusTypeDef BMP388_SetIIRFilterCoeff(BMP388_HandleTypeDef *bmp, uint8_t filtercoeff){
 80056e0:	b480      	push	{r7}
 80056e2:	b083      	sub	sp, #12
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
 80056e8:	460b      	mov	r3, r1
 80056ea:	70fb      	strb	r3, [r7, #3]
	if(filtercoeff > BMP3_IIR_FILTER_COEFF_127){
 80056ec:	78fb      	ldrb	r3, [r7, #3]
 80056ee:	2b07      	cmp	r3, #7
 80056f0:	d901      	bls.n	80056f6 <BMP388_SetIIRFilterCoeff+0x16>
		return HAL_ERROR;
 80056f2:	2301      	movs	r3, #1
 80056f4:	e005      	b.n	8005702 <BMP388_SetIIRFilterCoeff+0x22>
	}
	bmp->_filtercoeff = filtercoeff << 1;
 80056f6:	78fb      	ldrb	r3, [r7, #3]
 80056f8:	005b      	lsls	r3, r3, #1
 80056fa:	b2da      	uxtb	r2, r3
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	715a      	strb	r2, [r3, #5]
	return HAL_OK;
 8005700:	2300      	movs	r3, #0
}
 8005702:	4618      	mov	r0, r3
 8005704:	370c      	adds	r7, #12
 8005706:	46bd      	mov	sp, r7
 8005708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570c:	4770      	bx	lr

0800570e <BMP388_SetOutputDataRate>:
 *
 *  @return Status of execution
 *  @retval = HAL_OK  		-> Success
 *  @retval != HAL_OK	  	-> Wrong oversampling mode
 */
HAL_StatusTypeDef BMP388_SetOutputDataRate(BMP388_HandleTypeDef *bmp, uint8_t odr){
 800570e:	b480      	push	{r7}
 8005710:	b083      	sub	sp, #12
 8005712:	af00      	add	r7, sp, #0
 8005714:	6078      	str	r0, [r7, #4]
 8005716:	460b      	mov	r3, r1
 8005718:	70fb      	strb	r3, [r7, #3]
	if(odr > BMP3_ODR_0_001_HZ){
 800571a:	78fb      	ldrb	r3, [r7, #3]
 800571c:	2b11      	cmp	r3, #17
 800571e:	d901      	bls.n	8005724 <BMP388_SetOutputDataRate+0x16>
		return HAL_ERROR;
 8005720:	2301      	movs	r3, #1
 8005722:	e003      	b.n	800572c <BMP388_SetOutputDataRate+0x1e>
	}
	bmp->_odr = odr;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	78fa      	ldrb	r2, [r7, #3]
 8005728:	719a      	strb	r2, [r3, #6]
	return HAL_OK;
 800572a:	2300      	movs	r3, #0
}
 800572c:	4618      	mov	r0, r3
 800572e:	370c      	adds	r7, #12
 8005730:	46bd      	mov	sp, r7
 8005732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005736:	4770      	bx	lr

08005738 <BMP388_ReadRawPressTempTime>:
 *
 *  @return Status of execution
 *  @retval = HAL_OK  		-> Success
 *  @retval != HAL_OK	  	-> Failure Info
 */
HAL_StatusTypeDef BMP388_ReadRawPressTempTime(BMP388_HandleTypeDef *bmp, uint32_t *raw_pressure, uint32_t *raw_temperature, uint32_t *time){
 8005738:	b580      	push	{r7, lr}
 800573a:	b088      	sub	sp, #32
 800573c:	af00      	add	r7, sp, #0
 800573e:	60f8      	str	r0, [r7, #12]
 8005740:	60b9      	str	r1, [r7, #8]
 8005742:	607a      	str	r2, [r7, #4]
 8005744:	603b      	str	r3, [r7, #0]
	}*/

	uint8_t raw_data[11]; //registers in order 0x04 - 0x06 press data, 0x07 - 0x09 temp data, 0x0A and 0x0B reserved, 0x0C - 0x0E time data -> 11 byte
	// Get raw data for pressure and temperature
	//rslt = BMP388_ReadBytes(bmp, DATA_0, raw_data, 11);
	rslt = BMP388_ReadBytes(bmp, DATA_0, raw_data, 6);
 8005746:	f107 0214 	add.w	r2, r7, #20
 800574a:	2306      	movs	r3, #6
 800574c:	2104      	movs	r1, #4
 800574e:	68f8      	ldr	r0, [r7, #12]
 8005750:	f000 fb1f 	bl	8005d92 <BMP388_ReadBytes>
 8005754:	4603      	mov	r3, r0
 8005756:	77fb      	strb	r3, [r7, #31]
	if(rslt != HAL_OK){
 8005758:	7ffb      	ldrb	r3, [r7, #31]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d001      	beq.n	8005762 <BMP388_ReadRawPressTempTime+0x2a>
		return rslt;
 800575e:	7ffb      	ldrb	r3, [r7, #31]
 8005760:	e012      	b.n	8005788 <BMP388_ReadRawPressTempTime+0x50>
//	uint32_t data_xlsb;
//	uint32_t data_lsb;
//	uint32_t data_msb;

	// Parsing pressure data
	*raw_pressure = (uint32_t)raw_data[2] << 16 | (uint32_t)raw_data[1] << 8 | (uint32_t)raw_data[0];
 8005762:	7dbb      	ldrb	r3, [r7, #22]
 8005764:	041a      	lsls	r2, r3, #16
 8005766:	7d7b      	ldrb	r3, [r7, #21]
 8005768:	021b      	lsls	r3, r3, #8
 800576a:	4313      	orrs	r3, r2
 800576c:	7d3a      	ldrb	r2, [r7, #20]
 800576e:	431a      	orrs	r2, r3
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	601a      	str	r2, [r3, #0]

	// Parsing temperature data
	*raw_temperature = (uint32_t)raw_data[5] << 16 | (uint32_t)raw_data[4] << 8 | (uint32_t)raw_data[3];
 8005774:	7e7b      	ldrb	r3, [r7, #25]
 8005776:	041a      	lsls	r2, r3, #16
 8005778:	7e3b      	ldrb	r3, [r7, #24]
 800577a:	021b      	lsls	r3, r3, #8
 800577c:	4313      	orrs	r3, r2
 800577e:	7dfa      	ldrb	r2, [r7, #23]
 8005780:	431a      	orrs	r2, r3
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	601a      	str	r2, [r3, #0]

	// Parsing time bytes
	//*time = (uint32_t)raw_data[10] << 16 | (uint32_t)raw_data[9] << 8 | (uint32_t)raw_data[8];


	return rslt;
 8005786:	7ffb      	ldrb	r3, [r7, #31]
}
 8005788:	4618      	mov	r0, r3
 800578a:	3720      	adds	r7, #32
 800578c:	46bd      	mov	sp, r7
 800578e:	bd80      	pop	{r7, pc}

08005790 <BMP388_CompensateRawPressTemp>:
 *	@param[out]	temperature		: Pointer to the variable that contain temperature.
 *
 *  @return none
 */
void BMP388_CompensateRawPressTemp(BMP388_HandleTypeDef *bmp, uint32_t raw_pressure, uint32_t raw_temperature,
									  	  	  	  	  	  	  float *pressure, float *temperature){
 8005790:	b580      	push	{r7, lr}
 8005792:	b086      	sub	sp, #24
 8005794:	af00      	add	r7, sp, #0
 8005796:	60f8      	str	r0, [r7, #12]
 8005798:	60b9      	str	r1, [r7, #8]
 800579a:	607a      	str	r2, [r7, #4]
 800579c:	603b      	str	r3, [r7, #0]
	float temp;
	float press;

	BMP388_CompensateTemp(bmp, raw_temperature, &temp);
 800579e:	f107 0314 	add.w	r3, r7, #20
 80057a2:	461a      	mov	r2, r3
 80057a4:	6879      	ldr	r1, [r7, #4]
 80057a6:	68f8      	ldr	r0, [r7, #12]
 80057a8:	f000 f9ec 	bl	8005b84 <BMP388_CompensateTemp>
	BMP388_CompensatePress(bmp, temp, raw_pressure, &press);
 80057ac:	edd7 7a05 	vldr	s15, [r7, #20]
 80057b0:	f107 0310 	add.w	r3, r7, #16
 80057b4:	461a      	mov	r2, r3
 80057b6:	68b9      	ldr	r1, [r7, #8]
 80057b8:	eeb0 0a67 	vmov.f32	s0, s15
 80057bc:	68f8      	ldr	r0, [r7, #12]
 80057be:	f000 fa17 	bl	8005bf0 <BMP388_CompensatePress>

	*pressure = press;
 80057c2:	693a      	ldr	r2, [r7, #16]
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	601a      	str	r2, [r3, #0]
	*temperature = temp;
 80057c8:	697a      	ldr	r2, [r7, #20]
 80057ca:	6a3b      	ldr	r3, [r7, #32]
 80057cc:	601a      	str	r2, [r3, #0]
}
 80057ce:	bf00      	nop
 80057d0:	3718      	adds	r7, #24
 80057d2:	46bd      	mov	sp, r7
 80057d4:	bd80      	pop	{r7, pc}
	...

080057d8 <BMP388_FindAltitude>:
 *	@param[in] ground_pressure	: Pressure at ground
 *  @param[in] pressure			: Pressure that measured at flight.
 *
 *  @return Altitude
 */
float BMP388_FindAltitude(float ground_pressure, float pressure){
 80057d8:	b580      	push	{r7, lr}
 80057da:	b082      	sub	sp, #8
 80057dc:	af00      	add	r7, sp, #0
 80057de:	ed87 0a01 	vstr	s0, [r7, #4]
 80057e2:	edc7 0a00 	vstr	s1, [r7]

	// Note that using the equation from wikipedia can give bad results
	// at high altitude. See this thread for more information:
	//  http://forums.adafruit.com/viewtopic.php?f=22&t=58064

	return 44330.0 * (1.0 - pow(pressure / ground_pressure, 0.1903));
 80057e6:	ed97 7a00 	vldr	s14, [r7]
 80057ea:	edd7 7a01 	vldr	s15, [r7, #4]
 80057ee:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80057f2:	ee16 0a90 	vmov	r0, s13
 80057f6:	f7fa fea7 	bl	8000548 <__aeabi_f2d>
 80057fa:	4602      	mov	r2, r0
 80057fc:	460b      	mov	r3, r1
 80057fe:	ed9f 1b12 	vldr	d1, [pc, #72]	; 8005848 <BMP388_FindAltitude+0x70>
 8005802:	ec43 2b10 	vmov	d0, r2, r3
 8005806:	f00e f93b 	bl	8013a80 <pow>
 800580a:	ec53 2b10 	vmov	r2, r3, d0
 800580e:	f04f 0000 	mov.w	r0, #0
 8005812:	4911      	ldr	r1, [pc, #68]	; (8005858 <BMP388_FindAltitude+0x80>)
 8005814:	f7fa fd38 	bl	8000288 <__aeabi_dsub>
 8005818:	4602      	mov	r2, r0
 800581a:	460b      	mov	r3, r1
 800581c:	4610      	mov	r0, r2
 800581e:	4619      	mov	r1, r3
 8005820:	a30b      	add	r3, pc, #44	; (adr r3, 8005850 <BMP388_FindAltitude+0x78>)
 8005822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005826:	f7fa fee7 	bl	80005f8 <__aeabi_dmul>
 800582a:	4602      	mov	r2, r0
 800582c:	460b      	mov	r3, r1
 800582e:	4610      	mov	r0, r2
 8005830:	4619      	mov	r1, r3
 8005832:	f7fb f9d9 	bl	8000be8 <__aeabi_d2f>
 8005836:	4603      	mov	r3, r0
 8005838:	ee07 3a90 	vmov	s15, r3
}
 800583c:	eeb0 0a67 	vmov.f32	s0, s15
 8005840:	3708      	adds	r7, #8
 8005842:	46bd      	mov	sp, r7
 8005844:	bd80      	pop	{r7, pc}
 8005846:	bf00      	nop
 8005848:	1a36e2eb 	.word	0x1a36e2eb
 800584c:	3fc85bc0 	.word	0x3fc85bc0
 8005850:	00000000 	.word	0x00000000
 8005854:	40e5a540 	.word	0x40e5a540
 8005858:	3ff00000 	.word	0x3ff00000

0800585c <BMP388_SoftReset>:
 *
 *  @return Status of execution
 *  @retval = HAL_OK  		-> Success
 *  @retval != HAL_OK	  	-> Failure Info
 */
HAL_StatusTypeDef BMP388_SoftReset(BMP388_HandleTypeDef *bmp){
 800585c:	b580      	push	{r7, lr}
 800585e:	b084      	sub	sp, #16
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
	uint8_t rst_cmnd = BMP388_SOFTRESET;
 8005864:	23b6      	movs	r3, #182	; 0xb6
 8005866:	73bb      	strb	r3, [r7, #14]
    uint8_t cmd_err_status;

	HAL_StatusTypeDef rslt;

	// Reading STATUS reg to understand that the BMP388 is ready to receive command
	rslt = BMP388_ReadBytes(bmp, STATUS, &cmd_rdy_status, 1);
 8005868:	f107 020d 	add.w	r2, r7, #13
 800586c:	2301      	movs	r3, #1
 800586e:	2103      	movs	r1, #3
 8005870:	6878      	ldr	r0, [r7, #4]
 8005872:	f000 fa8e 	bl	8005d92 <BMP388_ReadBytes>
 8005876:	4603      	mov	r3, r0
 8005878:	73fb      	strb	r3, [r7, #15]
	if((rslt == HAL_OK) && (cmd_rdy_status & BMP388_CMD_RDY)){
 800587a:	7bfb      	ldrb	r3, [r7, #15]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d128      	bne.n	80058d2 <BMP388_SoftReset+0x76>
 8005880:	7b7b      	ldrb	r3, [r7, #13]
 8005882:	f003 0310 	and.w	r3, r3, #16
 8005886:	2b00      	cmp	r3, #0
 8005888:	d023      	beq.n	80058d2 <BMP388_SoftReset+0x76>
		// Writing SOFTRESET command to CMD reg
		rslt = BMP388_WriteBytes(bmp, CMD, &rst_cmnd, 1);
 800588a:	f107 020e 	add.w	r2, r7, #14
 800588e:	2301      	movs	r3, #1
 8005890:	217e      	movs	r1, #126	; 0x7e
 8005892:	6878      	ldr	r0, [r7, #4]
 8005894:	f000 fa9b 	bl	8005dce <BMP388_WriteBytes>
 8005898:	4603      	mov	r3, r0
 800589a:	73fb      	strb	r3, [r7, #15]
		if(rslt == HAL_OK){
 800589c:	7bfb      	ldrb	r3, [r7, #15]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d115      	bne.n	80058ce <BMP388_SoftReset+0x72>
			// 2 ms pause then check ERR reg
			HAL_Delay(2);
 80058a2:	2002      	movs	r0, #2
 80058a4:	f000 fbe2 	bl	800606c <HAL_Delay>
			rslt = BMP388_ReadBytes(bmp, ERR_REG, &cmd_err_status, 1);
 80058a8:	f107 020c 	add.w	r2, r7, #12
 80058ac:	2301      	movs	r3, #1
 80058ae:	2102      	movs	r1, #2
 80058b0:	6878      	ldr	r0, [r7, #4]
 80058b2:	f000 fa6e 	bl	8005d92 <BMP388_ReadBytes>
 80058b6:	4603      	mov	r3, r0
 80058b8:	73fb      	strb	r3, [r7, #15]
			if((cmd_err_status & CMD) || (rslt != HAL_OK)){
 80058ba:	7b3b      	ldrb	r3, [r7, #12]
 80058bc:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d102      	bne.n	80058ca <BMP388_SoftReset+0x6e>
 80058c4:	7bfb      	ldrb	r3, [r7, #15]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d003      	beq.n	80058d2 <BMP388_SoftReset+0x76>
				return rslt;
 80058ca:	7bfb      	ldrb	r3, [r7, #15]
 80058cc:	e002      	b.n	80058d4 <BMP388_SoftReset+0x78>
			}
		}
		else{
			return rslt;
 80058ce:	7bfb      	ldrb	r3, [r7, #15]
 80058d0:	e000      	b.n	80058d4 <BMP388_SoftReset+0x78>
		}
	}

	return rslt;
 80058d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80058d4:	4618      	mov	r0, r3
 80058d6:	3710      	adds	r7, #16
 80058d8:	46bd      	mov	sp, r7
 80058da:	bd80      	pop	{r7, pc}

080058dc <BMP388_GetCalibData>:
 *
 *  @return Status of execution
 *  @retval = HAL_OK  		-> Success
 *  @retval != HAL_OK	  	-> Failure Info
 */
HAL_StatusTypeDef BMP388_GetCalibData(BMP388_HandleTypeDef *bmp){
 80058dc:	b580      	push	{r7, lr}
 80058de:	b090      	sub	sp, #64	; 0x40
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef rslt;
	uint8_t calib_buff[BMP388_CALIBDATA_LEN] = {0};
 80058e4:	2300      	movs	r3, #0
 80058e6:	60fb      	str	r3, [r7, #12]
 80058e8:	f107 0310 	add.w	r3, r7, #16
 80058ec:	2200      	movs	r2, #0
 80058ee:	601a      	str	r2, [r3, #0]
 80058f0:	605a      	str	r2, [r3, #4]
 80058f2:	609a      	str	r2, [r3, #8]
 80058f4:	60da      	str	r2, [r3, #12]
 80058f6:	741a      	strb	r2, [r3, #16]
	int8_t		raw_par_p8;
	int16_t		raw_par_p9;
	int8_t		raw_par_p10;
	int8_t		raw_par_p11;

	rslt = BMP388_ReadBytes(bmp, CALIB_DATA, calib_buff, BMP388_CALIBDATA_LEN);
 80058f8:	f107 020c 	add.w	r2, r7, #12
 80058fc:	2315      	movs	r3, #21
 80058fe:	2131      	movs	r1, #49	; 0x31
 8005900:	6878      	ldr	r0, [r7, #4]
 8005902:	f000 fa46 	bl	8005d92 <BMP388_ReadBytes>
 8005906:	4603      	mov	r3, r0
 8005908:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	float temp_var;
	if(rslt == HAL_OK){
 800590c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005910:	2b00      	cmp	r3, #0
 8005912:	f040 812f 	bne.w	8005b74 <BMP388_GetCalibData+0x298>
		// PAR_T1
		temp_var = 0.00390625f;
 8005916:	f04f 536e 	mov.w	r3, #998244352	; 0x3b800000
 800591a:	63bb      	str	r3, [r7, #56]	; 0x38
		raw_par_t1 = ((uint16_t)calib_buff[1] << 8) | (uint16_t)calib_buff[0];
 800591c:	7b7b      	ldrb	r3, [r7, #13]
 800591e:	021b      	lsls	r3, r3, #8
 8005920:	b21a      	sxth	r2, r3
 8005922:	7b3b      	ldrb	r3, [r7, #12]
 8005924:	b21b      	sxth	r3, r3
 8005926:	4313      	orrs	r3, r2
 8005928:	b21b      	sxth	r3, r3
 800592a:	86fb      	strh	r3, [r7, #54]	; 0x36
		bmp->_calib_data.par_t1 = (float)raw_par_t1 / temp_var;
 800592c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800592e:	ee07 3a90 	vmov	s15, r3
 8005932:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005936:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800593a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	edc3 7a02 	vstr	s15, [r3, #8]
		// PAR_T2
		temp_var = 1073741824.f;
 8005944:	f04f 439d 	mov.w	r3, #1317011456	; 0x4e800000
 8005948:	63bb      	str	r3, [r7, #56]	; 0x38
		raw_par_t2 = ((uint16_t)calib_buff[3] << 8) | (uint16_t)calib_buff[2];
 800594a:	7bfb      	ldrb	r3, [r7, #15]
 800594c:	021b      	lsls	r3, r3, #8
 800594e:	b21a      	sxth	r2, r3
 8005950:	7bbb      	ldrb	r3, [r7, #14]
 8005952:	b21b      	sxth	r3, r3
 8005954:	4313      	orrs	r3, r2
 8005956:	b21b      	sxth	r3, r3
 8005958:	86bb      	strh	r3, [r7, #52]	; 0x34
		bmp->_calib_data.par_t2 = (float)raw_par_t2 / temp_var;
 800595a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800595c:	ee07 3a90 	vmov	s15, r3
 8005960:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005964:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8005968:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	edc3 7a03 	vstr	s15, [r3, #12]
		// PAR_T3
		temp_var = 281474976710656.f;
 8005972:	f04f 43af 	mov.w	r3, #1468006400	; 0x57800000
 8005976:	63bb      	str	r3, [r7, #56]	; 0x38
		raw_par_t3 = calib_buff[4];
 8005978:	7c3b      	ldrb	r3, [r7, #16]
 800597a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		bmp->_calib_data.par_t3 = (float)raw_par_t3 / temp_var;
 800597e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005982:	ee07 3a90 	vmov	s15, r3
 8005986:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800598a:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800598e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	edc3 7a04 	vstr	s15, [r3, #16]
		// PAR_P1
		temp_var = 1048576.f;
 8005998:	f04f 4393 	mov.w	r3, #1233125376	; 0x49800000
 800599c:	63bb      	str	r3, [r7, #56]	; 0x38
		raw_par_p1 = ((int16_t)calib_buff[6] << 8) | (int16_t)calib_buff[5];
 800599e:	7cbb      	ldrb	r3, [r7, #18]
 80059a0:	021b      	lsls	r3, r3, #8
 80059a2:	b21a      	sxth	r2, r3
 80059a4:	7c7b      	ldrb	r3, [r7, #17]
 80059a6:	b21b      	sxth	r3, r3
 80059a8:	4313      	orrs	r3, r2
 80059aa:	863b      	strh	r3, [r7, #48]	; 0x30
		bmp->_calib_data.par_p1 = ((float)raw_par_p1 - 16384) / temp_var;
 80059ac:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 80059b0:	ee07 3a90 	vmov	s15, r3
 80059b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80059b8:	ed9f 7a71 	vldr	s14, [pc, #452]	; 8005b80 <BMP388_GetCalibData+0x2a4>
 80059bc:	ee77 6ac7 	vsub.f32	s13, s15, s14
 80059c0:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80059c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	edc3 7a05 	vstr	s15, [r3, #20]
		// PAR_P2
		temp_var = 536870912.f;
 80059ce:	f04f 439c 	mov.w	r3, #1308622848	; 0x4e000000
 80059d2:	63bb      	str	r3, [r7, #56]	; 0x38
		raw_par_p2 = ((int16_t)calib_buff[8] << 8) | (int16_t)calib_buff[7];
 80059d4:	7d3b      	ldrb	r3, [r7, #20]
 80059d6:	021b      	lsls	r3, r3, #8
 80059d8:	b21a      	sxth	r2, r3
 80059da:	7cfb      	ldrb	r3, [r7, #19]
 80059dc:	b21b      	sxth	r3, r3
 80059de:	4313      	orrs	r3, r2
 80059e0:	85fb      	strh	r3, [r7, #46]	; 0x2e
		bmp->_calib_data.par_p2 = ((float)raw_par_p2 - 16384) / temp_var;
 80059e2:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 80059e6:	ee07 3a90 	vmov	s15, r3
 80059ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80059ee:	ed9f 7a64 	vldr	s14, [pc, #400]	; 8005b80 <BMP388_GetCalibData+0x2a4>
 80059f2:	ee77 6ac7 	vsub.f32	s13, s15, s14
 80059f6:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80059fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	edc3 7a06 	vstr	s15, [r3, #24]
		// PAR_P3
		temp_var = 4294967296.f;
 8005a04:	f04f 439f 	mov.w	r3, #1333788672	; 0x4f800000
 8005a08:	63bb      	str	r3, [r7, #56]	; 0x38
		raw_par_p3 = (int8_t)calib_buff[9];
 8005a0a:	7d7b      	ldrb	r3, [r7, #21]
 8005a0c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
		bmp->_calib_data.par_p3 = (float)raw_par_p3 / temp_var;
 8005a10:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 8005a14:	ee07 3a90 	vmov	s15, r3
 8005a18:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8005a1c:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8005a20:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	edc3 7a07 	vstr	s15, [r3, #28]
		// PAR_P4
		temp_var = 137438953472.f;
 8005a2a:	f04f 43a4 	mov.w	r3, #1375731712	; 0x52000000
 8005a2e:	63bb      	str	r3, [r7, #56]	; 0x38
		raw_par_p4 = (int8_t)calib_buff[10];
 8005a30:	7dbb      	ldrb	r3, [r7, #22]
 8005a32:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
		bmp->_calib_data.par_p4 = (float)raw_par_p4 / temp_var;
 8005a36:	f997 302c 	ldrsb.w	r3, [r7, #44]	; 0x2c
 8005a3a:	ee07 3a90 	vmov	s15, r3
 8005a3e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8005a42:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8005a46:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	edc3 7a08 	vstr	s15, [r3, #32]
		// PAR_P5
		temp_var = 0.125f;
 8005a50:	f04f 5378 	mov.w	r3, #1040187392	; 0x3e000000
 8005a54:	63bb      	str	r3, [r7, #56]	; 0x38
		raw_par_p5 = ((uint16_t)calib_buff[12] << 8) | (uint16_t)calib_buff[11];
 8005a56:	7e3b      	ldrb	r3, [r7, #24]
 8005a58:	021b      	lsls	r3, r3, #8
 8005a5a:	b21a      	sxth	r2, r3
 8005a5c:	7dfb      	ldrb	r3, [r7, #23]
 8005a5e:	b21b      	sxth	r3, r3
 8005a60:	4313      	orrs	r3, r2
 8005a62:	b21b      	sxth	r3, r3
 8005a64:	857b      	strh	r3, [r7, #42]	; 0x2a
		bmp->_calib_data.par_p5 = (float)raw_par_p5 / temp_var;
 8005a66:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005a68:	ee07 3a90 	vmov	s15, r3
 8005a6c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a70:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8005a74:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
		// PAR_P6
		temp_var = 64.f;
 8005a7e:	f04f 4385 	mov.w	r3, #1115684864	; 0x42800000
 8005a82:	63bb      	str	r3, [r7, #56]	; 0x38
		raw_par_p6 = ((uint16_t)calib_buff[14] << 8) | (uint16_t)calib_buff[13];
 8005a84:	7ebb      	ldrb	r3, [r7, #26]
 8005a86:	021b      	lsls	r3, r3, #8
 8005a88:	b21a      	sxth	r2, r3
 8005a8a:	7e7b      	ldrb	r3, [r7, #25]
 8005a8c:	b21b      	sxth	r3, r3
 8005a8e:	4313      	orrs	r3, r2
 8005a90:	b21b      	sxth	r3, r3
 8005a92:	853b      	strh	r3, [r7, #40]	; 0x28
		bmp->_calib_data.par_p6 = (float)raw_par_p6 / temp_var;
 8005a94:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005a96:	ee07 3a90 	vmov	s15, r3
 8005a9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a9e:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8005aa2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		// PAR_P7
		temp_var = 256.f;
 8005aac:	f04f 4387 	mov.w	r3, #1132462080	; 0x43800000
 8005ab0:	63bb      	str	r3, [r7, #56]	; 0x38
		raw_par_p7 = (int8_t)calib_buff[15];
 8005ab2:	7efb      	ldrb	r3, [r7, #27]
 8005ab4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		bmp->_calib_data.par_p7 = (float)raw_par_p7 / temp_var;
 8005ab8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005abc:	ee07 3a90 	vmov	s15, r3
 8005ac0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8005ac4:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8005ac8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
		// PAR_P8
		temp_var = 32768.f;
 8005ad2:	f04f 438e 	mov.w	r3, #1191182336	; 0x47000000
 8005ad6:	63bb      	str	r3, [r7, #56]	; 0x38
		raw_par_p8 = (int8_t)calib_buff[16];
 8005ad8:	7f3b      	ldrb	r3, [r7, #28]
 8005ada:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		bmp->_calib_data.par_p8 = (float)raw_par_p8 / temp_var;
 8005ade:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
 8005ae2:	ee07 3a90 	vmov	s15, r3
 8005ae6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8005aea:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8005aee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
		// PAR_P9
		temp_var = 281474976710656.f;
 8005af8:	f04f 43af 	mov.w	r3, #1468006400	; 0x57800000
 8005afc:	63bb      	str	r3, [r7, #56]	; 0x38
		raw_par_p9 = ((int16_t)calib_buff[18] << 8) | (int16_t)calib_buff[17];
 8005afe:	7fbb      	ldrb	r3, [r7, #30]
 8005b00:	021b      	lsls	r3, r3, #8
 8005b02:	b21a      	sxth	r2, r3
 8005b04:	7f7b      	ldrb	r3, [r7, #29]
 8005b06:	b21b      	sxth	r3, r3
 8005b08:	4313      	orrs	r3, r2
 8005b0a:	84bb      	strh	r3, [r7, #36]	; 0x24
		bmp->_calib_data.par_p9 = (float)raw_par_p9 / temp_var;
 8005b0c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8005b10:	ee07 3a90 	vmov	s15, r3
 8005b14:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8005b18:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8005b1c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
		// PAR_P10
		temp_var = 281474976710656.f;
 8005b26:	f04f 43af 	mov.w	r3, #1468006400	; 0x57800000
 8005b2a:	63bb      	str	r3, [r7, #56]	; 0x38
		raw_par_p10 = (int8_t)calib_buff[19];
 8005b2c:	7ffb      	ldrb	r3, [r7, #31]
 8005b2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		bmp->_calib_data.par_p10 = (float)raw_par_p10 / temp_var;
 8005b32:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8005b36:	ee07 3a90 	vmov	s15, r3
 8005b3a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8005b3e:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8005b42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
		// PAR_P11
		temp_var = 36893488147419103232.f;
 8005b4c:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8005b50:	63bb      	str	r3, [r7, #56]	; 0x38
		raw_par_p11 = (int8_t)calib_buff[20];
 8005b52:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005b56:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		bmp->_calib_data.par_p11 = (float)raw_par_p11 / temp_var;
 8005b5a:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 8005b5e:	ee07 3a90 	vmov	s15, r3
 8005b62:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8005b66:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8005b6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
	}
	return rslt;
 8005b74:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8005b78:	4618      	mov	r0, r3
 8005b7a:	3740      	adds	r7, #64	; 0x40
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	bd80      	pop	{r7, pc}
 8005b80:	46800000 	.word	0x46800000

08005b84 <BMP388_CompensateTemp>:
 *
 *  @return Status of execution
 *  @retval = HAL_OK  		-> Success
 *  @retval != HAL_OK	  	-> Failure Info
 */
float BMP388_CompensateTemp(BMP388_HandleTypeDef *bmp, uint32_t raw_temp, float *temp){
 8005b84:	b480      	push	{r7}
 8005b86:	b087      	sub	sp, #28
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	60f8      	str	r0, [r7, #12]
 8005b8c:	60b9      	str	r1, [r7, #8]
 8005b8e:	607a      	str	r2, [r7, #4]
    float partial_data1 = (float)(raw_temp - bmp->_calib_data.par_t1);;
 8005b90:	68bb      	ldr	r3, [r7, #8]
 8005b92:	ee07 3a90 	vmov	s15, r3
 8005b96:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	edd3 7a02 	vldr	s15, [r3, #8]
 8005ba0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005ba4:	edc7 7a05 	vstr	s15, [r7, #20]
    float partial_data2 = (float)(partial_data1 * bmp->_calib_data.par_t2);
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	edd3 7a03 	vldr	s15, [r3, #12]
 8005bae:	ed97 7a05 	vldr	s14, [r7, #20]
 8005bb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bb6:	edc7 7a04 	vstr	s15, [r7, #16]

    *temp = partial_data2 + (partial_data1 * partial_data1) * bmp->_calib_data.par_t3;
 8005bba:	edd7 7a05 	vldr	s15, [r7, #20]
 8005bbe:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	edd3 7a04 	vldr	s15, [r3, #16]
 8005bc8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005bcc:	edd7 7a04 	vldr	s15, [r7, #16]
 8005bd0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	edc3 7a00 	vstr	s15, [r3]

    return *temp;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	ee07 3a90 	vmov	s15, r3
}
 8005be2:	eeb0 0a67 	vmov.f32	s0, s15
 8005be6:	371c      	adds	r7, #28
 8005be8:	46bd      	mov	sp, r7
 8005bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bee:	4770      	bx	lr

08005bf0 <BMP388_CompensatePress>:
 *	@param[out] press		: Measured pressure in Pa
 *
 *  @return Status of execution
 *  @retval = press			: Compensated pressure value
 */
float BMP388_CompensatePress(BMP388_HandleTypeDef *bmp, float temp, uint32_t raw_press, float *press){
 8005bf0:	b480      	push	{r7}
 8005bf2:	b08b      	sub	sp, #44	; 0x2c
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	60f8      	str	r0, [r7, #12]
 8005bf8:	ed87 0a02 	vstr	s0, [r7, #8]
 8005bfc:	6079      	str	r1, [r7, #4]
 8005bfe:	603a      	str	r2, [r7, #0]
    float partial_out1;
    float partial_out2;



    partial_data1 = bmp->_calib_data.par_p6 * temp;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8005c06:	ed97 7a02 	vldr	s14, [r7, #8]
 8005c0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c0e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    partial_data2 = bmp->_calib_data.par_p7 * (temp * temp);
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8005c18:	edd7 7a02 	vldr	s15, [r7, #8]
 8005c1c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8005c20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c24:	edc7 7a08 	vstr	s15, [r7, #32]
    partial_data3 = bmp->_calib_data.par_p8 * (temp * temp * temp);
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8005c2e:	edd7 7a02 	vldr	s15, [r7, #8]
 8005c32:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8005c36:	edd7 7a02 	vldr	s15, [r7, #8]
 8005c3a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005c3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c42:	edc7 7a07 	vstr	s15, [r7, #28]
    partial_out1 = bmp->_calib_data.par_p5 + partial_data1 + partial_data2 + partial_data3;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8005c4c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8005c50:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005c54:	edd7 7a08 	vldr	s15, [r7, #32]
 8005c58:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005c5c:	ed97 7a07 	vldr	s14, [r7, #28]
 8005c60:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005c64:	edc7 7a06 	vstr	s15, [r7, #24]

    partial_data1 = bmp->_calib_data.par_p2 * temp;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	edd3 7a06 	vldr	s15, [r3, #24]
 8005c6e:	ed97 7a02 	vldr	s14, [r7, #8]
 8005c72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c76:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    partial_data2 = bmp->_calib_data.par_p3 * (temp * temp);
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	ed93 7a07 	vldr	s14, [r3, #28]
 8005c80:	edd7 7a02 	vldr	s15, [r7, #8]
 8005c84:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8005c88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c8c:	edc7 7a08 	vstr	s15, [r7, #32]
    partial_data3 = bmp->_calib_data.par_p4 * (temp * temp * temp);
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	ed93 7a08 	vldr	s14, [r3, #32]
 8005c96:	edd7 7a02 	vldr	s15, [r7, #8]
 8005c9a:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8005c9e:	edd7 7a02 	vldr	s15, [r7, #8]
 8005ca2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005ca6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005caa:	edc7 7a07 	vstr	s15, [r7, #28]
    partial_out2 = (float)raw_press * (bmp->_calib_data.par_p1 + partial_data1 + partial_data2 + partial_data3);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	ee07 3a90 	vmov	s15, r3
 8005cb4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	edd3 6a05 	vldr	s13, [r3, #20]
 8005cbe:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8005cc2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8005cc6:	edd7 7a08 	vldr	s15, [r7, #32]
 8005cca:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8005cce:	edd7 7a07 	vldr	s15, [r7, #28]
 8005cd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005cd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cda:	edc7 7a05 	vstr	s15, [r7, #20]

    partial_data1 = (float)raw_press * (float)raw_press;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	ee07 3a90 	vmov	s15, r3
 8005ce4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	ee07 3a90 	vmov	s15, r3
 8005cee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cf6:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    partial_data2 = bmp->_calib_data.par_p9 + bmp->_calib_data.par_p10 * temp;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 8005d06:	edd7 7a02 	vldr	s15, [r7, #8]
 8005d0a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005d0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005d12:	edc7 7a08 	vstr	s15, [r7, #32]
    partial_data3 = partial_data1 * partial_data2;
 8005d16:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8005d1a:	edd7 7a08 	vldr	s15, [r7, #32]
 8005d1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d22:	edc7 7a07 	vstr	s15, [r7, #28]
    partial_data4 = partial_data3 + ((float)raw_press * (float)raw_press * (float)raw_press) * bmp->_calib_data.par_p11;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	ee07 3a90 	vmov	s15, r3
 8005d2c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	ee07 3a90 	vmov	s15, r3
 8005d36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d3a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	ee07 3a90 	vmov	s15, r3
 8005d44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d48:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8005d52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d56:	ed97 7a07 	vldr	s14, [r7, #28]
 8005d5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005d5e:	edc7 7a04 	vstr	s15, [r7, #16]

    *press = partial_out1 + partial_out2 + partial_data4;
 8005d62:	ed97 7a06 	vldr	s14, [r7, #24]
 8005d66:	edd7 7a05 	vldr	s15, [r7, #20]
 8005d6a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005d6e:	edd7 7a04 	vldr	s15, [r7, #16]
 8005d72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	edc3 7a00 	vstr	s15, [r3]

    return *press;
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	ee07 3a90 	vmov	s15, r3
}
 8005d84:	eeb0 0a67 	vmov.f32	s0, s15
 8005d88:	372c      	adds	r7, #44	; 0x2c
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d90:	4770      	bx	lr

08005d92 <BMP388_ReadBytes>:
 *
 *  @return Status of execution
 *  @retval = HAL_OK 		-> Success
 *  @retval != HAL_ERROR 	-> Failure Info
 */
HAL_StatusTypeDef BMP388_ReadBytes(BMP388_HandleTypeDef *bmp, BMP388_regs reg_addr, uint8_t *buff, uint8_t len){
 8005d92:	b580      	push	{r7, lr}
 8005d94:	b088      	sub	sp, #32
 8005d96:	af04      	add	r7, sp, #16
 8005d98:	60f8      	str	r0, [r7, #12]
 8005d9a:	607a      	str	r2, [r7, #4]
 8005d9c:	461a      	mov	r2, r3
 8005d9e:	460b      	mov	r3, r1
 8005da0:	72fb      	strb	r3, [r7, #11]
 8005da2:	4613      	mov	r3, r2
 8005da4:	72bb      	strb	r3, [r7, #10]
	return HAL_I2C_Mem_Read(bmp->_hi2c, BMP388_ADDR << 1, reg_addr, I2C_MEMADD_SIZE_8BIT, buff, len, 100);
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	6818      	ldr	r0, [r3, #0]
 8005daa:	7afb      	ldrb	r3, [r7, #11]
 8005dac:	b29a      	uxth	r2, r3
 8005dae:	7abb      	ldrb	r3, [r7, #10]
 8005db0:	b29b      	uxth	r3, r3
 8005db2:	2164      	movs	r1, #100	; 0x64
 8005db4:	9102      	str	r1, [sp, #8]
 8005db6:	9301      	str	r3, [sp, #4]
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	9300      	str	r3, [sp, #0]
 8005dbc:	2301      	movs	r3, #1
 8005dbe:	21ec      	movs	r1, #236	; 0xec
 8005dc0:	f001 fd14 	bl	80077ec <HAL_I2C_Mem_Read>
 8005dc4:	4603      	mov	r3, r0
}
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	3710      	adds	r7, #16
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bd80      	pop	{r7, pc}

08005dce <BMP388_WriteBytes>:
 *
 *  @return Status of execution
 *  @retval = HAL_OK 		-> Success
 *  @retval != HAL_ERROR 	-> Failure Info
 */
HAL_StatusTypeDef BMP388_WriteBytes(BMP388_HandleTypeDef *bmp, BMP388_regs reg_addr, uint8_t *buff, uint8_t len){
 8005dce:	b580      	push	{r7, lr}
 8005dd0:	b088      	sub	sp, #32
 8005dd2:	af04      	add	r7, sp, #16
 8005dd4:	60f8      	str	r0, [r7, #12]
 8005dd6:	607a      	str	r2, [r7, #4]
 8005dd8:	461a      	mov	r2, r3
 8005dda:	460b      	mov	r3, r1
 8005ddc:	72fb      	strb	r3, [r7, #11]
 8005dde:	4613      	mov	r3, r2
 8005de0:	72bb      	strb	r3, [r7, #10]
	return HAL_I2C_Mem_Write(bmp->_hi2c, BMP388_ADDR << 1, reg_addr, I2C_MEMADD_SIZE_8BIT, buff, len, 100);
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	6818      	ldr	r0, [r3, #0]
 8005de6:	7afb      	ldrb	r3, [r7, #11]
 8005de8:	b29a      	uxth	r2, r3
 8005dea:	7abb      	ldrb	r3, [r7, #10]
 8005dec:	b29b      	uxth	r3, r3
 8005dee:	2164      	movs	r1, #100	; 0x64
 8005df0:	9102      	str	r1, [sp, #8]
 8005df2:	9301      	str	r3, [sp, #4]
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	9300      	str	r3, [sp, #0]
 8005df8:	2301      	movs	r3, #1
 8005dfa:	21ec      	movs	r1, #236	; 0xec
 8005dfc:	f001 fbfc 	bl	80075f8 <HAL_I2C_Mem_Write>
 8005e00:	4603      	mov	r3, r0
}
 8005e02:	4618      	mov	r0, r3
 8005e04:	3710      	adds	r7, #16
 8005e06:	46bd      	mov	sp, r7
 8005e08:	bd80      	pop	{r7, pc}

08005e0a <set_duty_Oneshot42>:
#define P_yaw 5
#define D_yaw 0



void set_duty_Oneshot42(TIM_HandleTypeDef* const pwmHandle1, uint16_t ref_1, uint16_t ref_2, uint16_t ref_3, uint16_t ref_4){
 8005e0a:	b480      	push	{r7}
 8005e0c:	b085      	sub	sp, #20
 8005e0e:	af00      	add	r7, sp, #0
 8005e10:	60f8      	str	r0, [r7, #12]
 8005e12:	4608      	mov	r0, r1
 8005e14:	4611      	mov	r1, r2
 8005e16:	461a      	mov	r2, r3
 8005e18:	4603      	mov	r3, r0
 8005e1a:	817b      	strh	r3, [r7, #10]
 8005e1c:	460b      	mov	r3, r1
 8005e1e:	813b      	strh	r3, [r7, #8]
 8005e20:	4613      	mov	r3, r2
 8005e22:	80fb      	strh	r3, [r7, #6]
	// Multishot42 12 kHz PSC 7-1, ARR 1000-1 -> 1000 = 100%, 500 = stop, ?0 = -100%?
	pwmHandle1 -> Instance -> CCR1 = ref_1;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	897a      	ldrh	r2, [r7, #10]
 8005e2a:	635a      	str	r2, [r3, #52]	; 0x34
	pwmHandle1 -> Instance -> CCR2 = ref_2;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	893a      	ldrh	r2, [r7, #8]
 8005e32:	639a      	str	r2, [r3, #56]	; 0x38
	pwmHandle1 -> Instance -> CCR3 = ref_3;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	88fa      	ldrh	r2, [r7, #6]
 8005e3a:	63da      	str	r2, [r3, #60]	; 0x3c
	pwmHandle1 -> Instance -> CCR4 = ref_4;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	8b3a      	ldrh	r2, [r7, #24]
 8005e42:	641a      	str	r2, [r3, #64]	; 0x40
}
 8005e44:	bf00      	nop
 8005e46:	3714      	adds	r7, #20
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4e:	4770      	bx	lr

08005e50 <CRSFtoDuty>:

float CRSFtoDuty(uint16_t CRSF_val){
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b084      	sub	sp, #16
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	4603      	mov	r3, r0
 8005e58:	80fb      	strh	r3, [r7, #6]
	float Duty;
//	Duty = 550+((float)(CRSF_val-172))/4.1; // minimum duty 55% max duty 95%
	Duty = 550+((float)(CRSF_val-172))/4.1*0.6; //for safety reasons minimum duty 55% max duty 79%
 8005e5a:	88fb      	ldrh	r3, [r7, #6]
 8005e5c:	3bac      	subs	r3, #172	; 0xac
 8005e5e:	ee07 3a90 	vmov	s15, r3
 8005e62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005e66:	ee17 0a90 	vmov	r0, s15
 8005e6a:	f7fa fb6d 	bl	8000548 <__aeabi_f2d>
 8005e6e:	a315      	add	r3, pc, #84	; (adr r3, 8005ec4 <CRSFtoDuty+0x74>)
 8005e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e74:	f7fa fcea 	bl	800084c <__aeabi_ddiv>
 8005e78:	4602      	mov	r2, r0
 8005e7a:	460b      	mov	r3, r1
 8005e7c:	4610      	mov	r0, r2
 8005e7e:	4619      	mov	r1, r3
 8005e80:	a312      	add	r3, pc, #72	; (adr r3, 8005ecc <CRSFtoDuty+0x7c>)
 8005e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e86:	f7fa fbb7 	bl	80005f8 <__aeabi_dmul>
 8005e8a:	4602      	mov	r2, r0
 8005e8c:	460b      	mov	r3, r1
 8005e8e:	4610      	mov	r0, r2
 8005e90:	4619      	mov	r1, r3
 8005e92:	f04f 0200 	mov.w	r2, #0
 8005e96:	4b0a      	ldr	r3, [pc, #40]	; (8005ec0 <CRSFtoDuty+0x70>)
 8005e98:	f7fa f9f8 	bl	800028c <__adddf3>
 8005e9c:	4602      	mov	r2, r0
 8005e9e:	460b      	mov	r3, r1
 8005ea0:	4610      	mov	r0, r2
 8005ea2:	4619      	mov	r1, r3
 8005ea4:	f7fa fea0 	bl	8000be8 <__aeabi_d2f>
 8005ea8:	4603      	mov	r3, r0
 8005eaa:	60fb      	str	r3, [r7, #12]
	return Duty;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	ee07 3a90 	vmov	s15, r3
}
 8005eb2:	eeb0 0a67 	vmov.f32	s0, s15
 8005eb6:	3710      	adds	r7, #16
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	bd80      	pop	{r7, pc}
 8005ebc:	f3af 8000 	nop.w
 8005ec0:	40813000 	.word	0x40813000
 8005ec4:	66666666 	.word	0x66666666
 8005ec8:	40106666 	.word	0x40106666
 8005ecc:	33333333 	.word	0x33333333
 8005ed0:	3fe33333 	.word	0x3fe33333

08005ed4 <CRSFtoPitch>:

float CRSFtoPitch(uint16_t CRSF_val){
 8005ed4:	b480      	push	{r7}
 8005ed6:	b085      	sub	sp, #20
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	4603      	mov	r3, r0
 8005edc:	80fb      	strh	r3, [r7, #6]
	float pitch;
	pitch = ((float)(CRSF_val-992))/820.0;
 8005ede:	88fb      	ldrh	r3, [r7, #6]
 8005ee0:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 8005ee4:	ee07 3a90 	vmov	s15, r3
 8005ee8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005eec:	eddf 6a07 	vldr	s13, [pc, #28]	; 8005f0c <CRSFtoPitch+0x38>
 8005ef0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005ef4:	edc7 7a03 	vstr	s15, [r7, #12]
	return pitch;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	ee07 3a90 	vmov	s15, r3
}
 8005efe:	eeb0 0a67 	vmov.f32	s0, s15
 8005f02:	3714      	adds	r7, #20
 8005f04:	46bd      	mov	sp, r7
 8005f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0a:	4770      	bx	lr
 8005f0c:	444d0000 	.word	0x444d0000

08005f10 <CRSFtoRoll>:

float CRSFtoRoll(uint16_t CRSF_val){
 8005f10:	b480      	push	{r7}
 8005f12:	b085      	sub	sp, #20
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	4603      	mov	r3, r0
 8005f18:	80fb      	strh	r3, [r7, #6]
	float roll;
	roll = ((float)(CRSF_val-992))/820.0;
 8005f1a:	88fb      	ldrh	r3, [r7, #6]
 8005f1c:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 8005f20:	ee07 3a90 	vmov	s15, r3
 8005f24:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005f28:	eddf 6a07 	vldr	s13, [pc, #28]	; 8005f48 <CRSFtoRoll+0x38>
 8005f2c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005f30:	edc7 7a03 	vstr	s15, [r7, #12]
	return roll;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	ee07 3a90 	vmov	s15, r3
}
 8005f3a:	eeb0 0a67 	vmov.f32	s0, s15
 8005f3e:	3714      	adds	r7, #20
 8005f40:	46bd      	mov	sp, r7
 8005f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f46:	4770      	bx	lr
 8005f48:	444d0000 	.word	0x444d0000

08005f4c <CRSFtoYaw>:

float CRSFtoYaw(uint16_t CRSF_val){
 8005f4c:	b480      	push	{r7}
 8005f4e:	b085      	sub	sp, #20
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	4603      	mov	r3, r0
 8005f54:	80fb      	strh	r3, [r7, #6]
	float yaw;
	yaw = ((float)(CRSF_val-992))/820.0;
 8005f56:	88fb      	ldrh	r3, [r7, #6]
 8005f58:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 8005f5c:	ee07 3a90 	vmov	s15, r3
 8005f60:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005f64:	eddf 6a07 	vldr	s13, [pc, #28]	; 8005f84 <CRSFtoYaw+0x38>
 8005f68:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005f6c:	edc7 7a03 	vstr	s15, [r7, #12]
	return yaw;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	ee07 3a90 	vmov	s15, r3
}
 8005f76:	eeb0 0a67 	vmov.f32	s0, s15
 8005f7a:	3714      	adds	r7, #20
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f82:	4770      	bx	lr
 8005f84:	444d0000 	.word	0x444d0000

08005f88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005f8c:	4b0e      	ldr	r3, [pc, #56]	; (8005fc8 <HAL_Init+0x40>)
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	4a0d      	ldr	r2, [pc, #52]	; (8005fc8 <HAL_Init+0x40>)
 8005f92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005f96:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005f98:	4b0b      	ldr	r3, [pc, #44]	; (8005fc8 <HAL_Init+0x40>)
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4a0a      	ldr	r2, [pc, #40]	; (8005fc8 <HAL_Init+0x40>)
 8005f9e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005fa2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005fa4:	4b08      	ldr	r3, [pc, #32]	; (8005fc8 <HAL_Init+0x40>)
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	4a07      	ldr	r2, [pc, #28]	; (8005fc8 <HAL_Init+0x40>)
 8005faa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005fae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005fb0:	2003      	movs	r0, #3
 8005fb2:	f000 fbb1 	bl	8006718 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005fb6:	200f      	movs	r0, #15
 8005fb8:	f000 f808 	bl	8005fcc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005fbc:	f7fd fd26 	bl	8003a0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005fc0:	2300      	movs	r3, #0
}
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	bd80      	pop	{r7, pc}
 8005fc6:	bf00      	nop
 8005fc8:	40023c00 	.word	0x40023c00

08005fcc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b082      	sub	sp, #8
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005fd4:	4b12      	ldr	r3, [pc, #72]	; (8006020 <HAL_InitTick+0x54>)
 8005fd6:	681a      	ldr	r2, [r3, #0]
 8005fd8:	4b12      	ldr	r3, [pc, #72]	; (8006024 <HAL_InitTick+0x58>)
 8005fda:	781b      	ldrb	r3, [r3, #0]
 8005fdc:	4619      	mov	r1, r3
 8005fde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005fe2:	fbb3 f3f1 	udiv	r3, r3, r1
 8005fe6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fea:	4618      	mov	r0, r3
 8005fec:	f000 fbc9 	bl	8006782 <HAL_SYSTICK_Config>
 8005ff0:	4603      	mov	r3, r0
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d001      	beq.n	8005ffa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	e00e      	b.n	8006018 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	2b0f      	cmp	r3, #15
 8005ffe:	d80a      	bhi.n	8006016 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006000:	2200      	movs	r2, #0
 8006002:	6879      	ldr	r1, [r7, #4]
 8006004:	f04f 30ff 	mov.w	r0, #4294967295
 8006008:	f000 fb91 	bl	800672e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800600c:	4a06      	ldr	r2, [pc, #24]	; (8006028 <HAL_InitTick+0x5c>)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006012:	2300      	movs	r3, #0
 8006014:	e000      	b.n	8006018 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006016:	2301      	movs	r3, #1
}
 8006018:	4618      	mov	r0, r3
 800601a:	3708      	adds	r7, #8
 800601c:	46bd      	mov	sp, r7
 800601e:	bd80      	pop	{r7, pc}
 8006020:	2000000c 	.word	0x2000000c
 8006024:	20000070 	.word	0x20000070
 8006028:	2000006c 	.word	0x2000006c

0800602c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800602c:	b480      	push	{r7}
 800602e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006030:	4b06      	ldr	r3, [pc, #24]	; (800604c <HAL_IncTick+0x20>)
 8006032:	781b      	ldrb	r3, [r3, #0]
 8006034:	461a      	mov	r2, r3
 8006036:	4b06      	ldr	r3, [pc, #24]	; (8006050 <HAL_IncTick+0x24>)
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	4413      	add	r3, r2
 800603c:	4a04      	ldr	r2, [pc, #16]	; (8006050 <HAL_IncTick+0x24>)
 800603e:	6013      	str	r3, [r2, #0]
}
 8006040:	bf00      	nop
 8006042:	46bd      	mov	sp, r7
 8006044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006048:	4770      	bx	lr
 800604a:	bf00      	nop
 800604c:	20000070 	.word	0x20000070
 8006050:	20002bf8 	.word	0x20002bf8

08006054 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006054:	b480      	push	{r7}
 8006056:	af00      	add	r7, sp, #0
  return uwTick;
 8006058:	4b03      	ldr	r3, [pc, #12]	; (8006068 <HAL_GetTick+0x14>)
 800605a:	681b      	ldr	r3, [r3, #0]
}
 800605c:	4618      	mov	r0, r3
 800605e:	46bd      	mov	sp, r7
 8006060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006064:	4770      	bx	lr
 8006066:	bf00      	nop
 8006068:	20002bf8 	.word	0x20002bf8

0800606c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b084      	sub	sp, #16
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006074:	f7ff ffee 	bl	8006054 <HAL_GetTick>
 8006078:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006084:	d005      	beq.n	8006092 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006086:	4b0a      	ldr	r3, [pc, #40]	; (80060b0 <HAL_Delay+0x44>)
 8006088:	781b      	ldrb	r3, [r3, #0]
 800608a:	461a      	mov	r2, r3
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	4413      	add	r3, r2
 8006090:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006092:	bf00      	nop
 8006094:	f7ff ffde 	bl	8006054 <HAL_GetTick>
 8006098:	4602      	mov	r2, r0
 800609a:	68bb      	ldr	r3, [r7, #8]
 800609c:	1ad3      	subs	r3, r2, r3
 800609e:	68fa      	ldr	r2, [r7, #12]
 80060a0:	429a      	cmp	r2, r3
 80060a2:	d8f7      	bhi.n	8006094 <HAL_Delay+0x28>
  {
  }
}
 80060a4:	bf00      	nop
 80060a6:	bf00      	nop
 80060a8:	3710      	adds	r7, #16
 80060aa:	46bd      	mov	sp, r7
 80060ac:	bd80      	pop	{r7, pc}
 80060ae:	bf00      	nop
 80060b0:	20000070 	.word	0x20000070

080060b4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b084      	sub	sp, #16
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80060bc:	2300      	movs	r3, #0
 80060be:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d101      	bne.n	80060ca <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80060c6:	2301      	movs	r3, #1
 80060c8:	e033      	b.n	8006132 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d109      	bne.n	80060e6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80060d2:	6878      	ldr	r0, [r7, #4]
 80060d4:	f7fd fcc6 	bl	8003a64 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2200      	movs	r2, #0
 80060dc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2200      	movs	r2, #0
 80060e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ea:	f003 0310 	and.w	r3, r3, #16
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d118      	bne.n	8006124 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060f6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80060fa:	f023 0302 	bic.w	r3, r3, #2
 80060fe:	f043 0202 	orr.w	r2, r3, #2
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8006106:	6878      	ldr	r0, [r7, #4]
 8006108:	f000 f93a 	bl	8006380 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2200      	movs	r2, #0
 8006110:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006116:	f023 0303 	bic.w	r3, r3, #3
 800611a:	f043 0201 	orr.w	r2, r3, #1
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	641a      	str	r2, [r3, #64]	; 0x40
 8006122:	e001      	b.n	8006128 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8006124:	2301      	movs	r3, #1
 8006126:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2200      	movs	r2, #0
 800612c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8006130:	7bfb      	ldrb	r3, [r7, #15]
}
 8006132:	4618      	mov	r0, r3
 8006134:	3710      	adds	r7, #16
 8006136:	46bd      	mov	sp, r7
 8006138:	bd80      	pop	{r7, pc}
	...

0800613c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800613c:	b480      	push	{r7}
 800613e:	b085      	sub	sp, #20
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
 8006144:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8006146:	2300      	movs	r3, #0
 8006148:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006150:	2b01      	cmp	r3, #1
 8006152:	d101      	bne.n	8006158 <HAL_ADC_ConfigChannel+0x1c>
 8006154:	2302      	movs	r3, #2
 8006156:	e105      	b.n	8006364 <HAL_ADC_ConfigChannel+0x228>
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2201      	movs	r2, #1
 800615c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	2b09      	cmp	r3, #9
 8006166:	d925      	bls.n	80061b4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	68d9      	ldr	r1, [r3, #12]
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	b29b      	uxth	r3, r3
 8006174:	461a      	mov	r2, r3
 8006176:	4613      	mov	r3, r2
 8006178:	005b      	lsls	r3, r3, #1
 800617a:	4413      	add	r3, r2
 800617c:	3b1e      	subs	r3, #30
 800617e:	2207      	movs	r2, #7
 8006180:	fa02 f303 	lsl.w	r3, r2, r3
 8006184:	43da      	mvns	r2, r3
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	400a      	ands	r2, r1
 800618c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	68d9      	ldr	r1, [r3, #12]
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	689a      	ldr	r2, [r3, #8]
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	b29b      	uxth	r3, r3
 800619e:	4618      	mov	r0, r3
 80061a0:	4603      	mov	r3, r0
 80061a2:	005b      	lsls	r3, r3, #1
 80061a4:	4403      	add	r3, r0
 80061a6:	3b1e      	subs	r3, #30
 80061a8:	409a      	lsls	r2, r3
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	430a      	orrs	r2, r1
 80061b0:	60da      	str	r2, [r3, #12]
 80061b2:	e022      	b.n	80061fa <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	6919      	ldr	r1, [r3, #16]
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	b29b      	uxth	r3, r3
 80061c0:	461a      	mov	r2, r3
 80061c2:	4613      	mov	r3, r2
 80061c4:	005b      	lsls	r3, r3, #1
 80061c6:	4413      	add	r3, r2
 80061c8:	2207      	movs	r2, #7
 80061ca:	fa02 f303 	lsl.w	r3, r2, r3
 80061ce:	43da      	mvns	r2, r3
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	400a      	ands	r2, r1
 80061d6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	6919      	ldr	r1, [r3, #16]
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	689a      	ldr	r2, [r3, #8]
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	b29b      	uxth	r3, r3
 80061e8:	4618      	mov	r0, r3
 80061ea:	4603      	mov	r3, r0
 80061ec:	005b      	lsls	r3, r3, #1
 80061ee:	4403      	add	r3, r0
 80061f0:	409a      	lsls	r2, r3
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	430a      	orrs	r2, r1
 80061f8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	685b      	ldr	r3, [r3, #4]
 80061fe:	2b06      	cmp	r3, #6
 8006200:	d824      	bhi.n	800624c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	685a      	ldr	r2, [r3, #4]
 800620c:	4613      	mov	r3, r2
 800620e:	009b      	lsls	r3, r3, #2
 8006210:	4413      	add	r3, r2
 8006212:	3b05      	subs	r3, #5
 8006214:	221f      	movs	r2, #31
 8006216:	fa02 f303 	lsl.w	r3, r2, r3
 800621a:	43da      	mvns	r2, r3
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	400a      	ands	r2, r1
 8006222:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	b29b      	uxth	r3, r3
 8006230:	4618      	mov	r0, r3
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	685a      	ldr	r2, [r3, #4]
 8006236:	4613      	mov	r3, r2
 8006238:	009b      	lsls	r3, r3, #2
 800623a:	4413      	add	r3, r2
 800623c:	3b05      	subs	r3, #5
 800623e:	fa00 f203 	lsl.w	r2, r0, r3
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	430a      	orrs	r2, r1
 8006248:	635a      	str	r2, [r3, #52]	; 0x34
 800624a:	e04c      	b.n	80062e6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	685b      	ldr	r3, [r3, #4]
 8006250:	2b0c      	cmp	r3, #12
 8006252:	d824      	bhi.n	800629e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	685a      	ldr	r2, [r3, #4]
 800625e:	4613      	mov	r3, r2
 8006260:	009b      	lsls	r3, r3, #2
 8006262:	4413      	add	r3, r2
 8006264:	3b23      	subs	r3, #35	; 0x23
 8006266:	221f      	movs	r2, #31
 8006268:	fa02 f303 	lsl.w	r3, r2, r3
 800626c:	43da      	mvns	r2, r3
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	400a      	ands	r2, r1
 8006274:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	b29b      	uxth	r3, r3
 8006282:	4618      	mov	r0, r3
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	685a      	ldr	r2, [r3, #4]
 8006288:	4613      	mov	r3, r2
 800628a:	009b      	lsls	r3, r3, #2
 800628c:	4413      	add	r3, r2
 800628e:	3b23      	subs	r3, #35	; 0x23
 8006290:	fa00 f203 	lsl.w	r2, r0, r3
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	430a      	orrs	r2, r1
 800629a:	631a      	str	r2, [r3, #48]	; 0x30
 800629c:	e023      	b.n	80062e6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	685a      	ldr	r2, [r3, #4]
 80062a8:	4613      	mov	r3, r2
 80062aa:	009b      	lsls	r3, r3, #2
 80062ac:	4413      	add	r3, r2
 80062ae:	3b41      	subs	r3, #65	; 0x41
 80062b0:	221f      	movs	r2, #31
 80062b2:	fa02 f303 	lsl.w	r3, r2, r3
 80062b6:	43da      	mvns	r2, r3
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	400a      	ands	r2, r1
 80062be:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	b29b      	uxth	r3, r3
 80062cc:	4618      	mov	r0, r3
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	685a      	ldr	r2, [r3, #4]
 80062d2:	4613      	mov	r3, r2
 80062d4:	009b      	lsls	r3, r3, #2
 80062d6:	4413      	add	r3, r2
 80062d8:	3b41      	subs	r3, #65	; 0x41
 80062da:	fa00 f203 	lsl.w	r2, r0, r3
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	430a      	orrs	r2, r1
 80062e4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80062e6:	4b22      	ldr	r3, [pc, #136]	; (8006370 <HAL_ADC_ConfigChannel+0x234>)
 80062e8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	4a21      	ldr	r2, [pc, #132]	; (8006374 <HAL_ADC_ConfigChannel+0x238>)
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d109      	bne.n	8006308 <HAL_ADC_ConfigChannel+0x1cc>
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	2b12      	cmp	r3, #18
 80062fa:	d105      	bne.n	8006308 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	685b      	ldr	r3, [r3, #4]
 8006300:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	4a19      	ldr	r2, [pc, #100]	; (8006374 <HAL_ADC_ConfigChannel+0x238>)
 800630e:	4293      	cmp	r3, r2
 8006310:	d123      	bne.n	800635a <HAL_ADC_ConfigChannel+0x21e>
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	2b10      	cmp	r3, #16
 8006318:	d003      	beq.n	8006322 <HAL_ADC_ConfigChannel+0x1e6>
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	2b11      	cmp	r3, #17
 8006320:	d11b      	bne.n	800635a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	685b      	ldr	r3, [r3, #4]
 8006326:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	2b10      	cmp	r3, #16
 8006334:	d111      	bne.n	800635a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8006336:	4b10      	ldr	r3, [pc, #64]	; (8006378 <HAL_ADC_ConfigChannel+0x23c>)
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	4a10      	ldr	r2, [pc, #64]	; (800637c <HAL_ADC_ConfigChannel+0x240>)
 800633c:	fba2 2303 	umull	r2, r3, r2, r3
 8006340:	0c9a      	lsrs	r2, r3, #18
 8006342:	4613      	mov	r3, r2
 8006344:	009b      	lsls	r3, r3, #2
 8006346:	4413      	add	r3, r2
 8006348:	005b      	lsls	r3, r3, #1
 800634a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800634c:	e002      	b.n	8006354 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800634e:	68bb      	ldr	r3, [r7, #8]
 8006350:	3b01      	subs	r3, #1
 8006352:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006354:	68bb      	ldr	r3, [r7, #8]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d1f9      	bne.n	800634e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2200      	movs	r2, #0
 800635e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8006362:	2300      	movs	r3, #0
}
 8006364:	4618      	mov	r0, r3
 8006366:	3714      	adds	r7, #20
 8006368:	46bd      	mov	sp, r7
 800636a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636e:	4770      	bx	lr
 8006370:	40012300 	.word	0x40012300
 8006374:	40012000 	.word	0x40012000
 8006378:	2000000c 	.word	0x2000000c
 800637c:	431bde83 	.word	0x431bde83

08006380 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006380:	b480      	push	{r7}
 8006382:	b085      	sub	sp, #20
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006388:	4b79      	ldr	r3, [pc, #484]	; (8006570 <ADC_Init+0x1f0>)
 800638a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	685b      	ldr	r3, [r3, #4]
 8006390:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	685a      	ldr	r2, [r3, #4]
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	685b      	ldr	r3, [r3, #4]
 80063a0:	431a      	orrs	r2, r3
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	685a      	ldr	r2, [r3, #4]
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80063b4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	6859      	ldr	r1, [r3, #4]
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	691b      	ldr	r3, [r3, #16]
 80063c0:	021a      	lsls	r2, r3, #8
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	430a      	orrs	r2, r1
 80063c8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	685a      	ldr	r2, [r3, #4]
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80063d8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	6859      	ldr	r1, [r3, #4]
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	689a      	ldr	r2, [r3, #8]
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	430a      	orrs	r2, r1
 80063ea:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	689a      	ldr	r2, [r3, #8]
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80063fa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	6899      	ldr	r1, [r3, #8]
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	68da      	ldr	r2, [r3, #12]
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	430a      	orrs	r2, r1
 800640c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006412:	4a58      	ldr	r2, [pc, #352]	; (8006574 <ADC_Init+0x1f4>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d022      	beq.n	800645e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	689a      	ldr	r2, [r3, #8]
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006426:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	6899      	ldr	r1, [r3, #8]
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	430a      	orrs	r2, r1
 8006438:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	689a      	ldr	r2, [r3, #8]
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006448:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	6899      	ldr	r1, [r3, #8]
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	430a      	orrs	r2, r1
 800645a:	609a      	str	r2, [r3, #8]
 800645c:	e00f      	b.n	800647e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	689a      	ldr	r2, [r3, #8]
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800646c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	689a      	ldr	r2, [r3, #8]
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800647c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	689a      	ldr	r2, [r3, #8]
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f022 0202 	bic.w	r2, r2, #2
 800648c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	6899      	ldr	r1, [r3, #8]
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	7e1b      	ldrb	r3, [r3, #24]
 8006498:	005a      	lsls	r2, r3, #1
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	430a      	orrs	r2, r1
 80064a0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d01b      	beq.n	80064e4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	685a      	ldr	r2, [r3, #4]
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80064ba:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	685a      	ldr	r2, [r3, #4]
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80064ca:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	6859      	ldr	r1, [r3, #4]
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064d6:	3b01      	subs	r3, #1
 80064d8:	035a      	lsls	r2, r3, #13
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	430a      	orrs	r2, r1
 80064e0:	605a      	str	r2, [r3, #4]
 80064e2:	e007      	b.n	80064f4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	685a      	ldr	r2, [r3, #4]
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80064f2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8006502:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	69db      	ldr	r3, [r3, #28]
 800650e:	3b01      	subs	r3, #1
 8006510:	051a      	lsls	r2, r3, #20
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	430a      	orrs	r2, r1
 8006518:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	689a      	ldr	r2, [r3, #8]
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006528:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	6899      	ldr	r1, [r3, #8]
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006536:	025a      	lsls	r2, r3, #9
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	430a      	orrs	r2, r1
 800653e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	689a      	ldr	r2, [r3, #8]
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800654e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	6899      	ldr	r1, [r3, #8]
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	695b      	ldr	r3, [r3, #20]
 800655a:	029a      	lsls	r2, r3, #10
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	430a      	orrs	r2, r1
 8006562:	609a      	str	r2, [r3, #8]
}
 8006564:	bf00      	nop
 8006566:	3714      	adds	r7, #20
 8006568:	46bd      	mov	sp, r7
 800656a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656e:	4770      	bx	lr
 8006570:	40012300 	.word	0x40012300
 8006574:	0f000001 	.word	0x0f000001

08006578 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006578:	b480      	push	{r7}
 800657a:	b085      	sub	sp, #20
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	f003 0307 	and.w	r3, r3, #7
 8006586:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006588:	4b0c      	ldr	r3, [pc, #48]	; (80065bc <__NVIC_SetPriorityGrouping+0x44>)
 800658a:	68db      	ldr	r3, [r3, #12]
 800658c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800658e:	68ba      	ldr	r2, [r7, #8]
 8006590:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006594:	4013      	ands	r3, r2
 8006596:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80065a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80065a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80065a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80065aa:	4a04      	ldr	r2, [pc, #16]	; (80065bc <__NVIC_SetPriorityGrouping+0x44>)
 80065ac:	68bb      	ldr	r3, [r7, #8]
 80065ae:	60d3      	str	r3, [r2, #12]
}
 80065b0:	bf00      	nop
 80065b2:	3714      	adds	r7, #20
 80065b4:	46bd      	mov	sp, r7
 80065b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ba:	4770      	bx	lr
 80065bc:	e000ed00 	.word	0xe000ed00

080065c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80065c0:	b480      	push	{r7}
 80065c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80065c4:	4b04      	ldr	r3, [pc, #16]	; (80065d8 <__NVIC_GetPriorityGrouping+0x18>)
 80065c6:	68db      	ldr	r3, [r3, #12]
 80065c8:	0a1b      	lsrs	r3, r3, #8
 80065ca:	f003 0307 	and.w	r3, r3, #7
}
 80065ce:	4618      	mov	r0, r3
 80065d0:	46bd      	mov	sp, r7
 80065d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d6:	4770      	bx	lr
 80065d8:	e000ed00 	.word	0xe000ed00

080065dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80065dc:	b480      	push	{r7}
 80065de:	b083      	sub	sp, #12
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	4603      	mov	r3, r0
 80065e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80065e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	db0b      	blt.n	8006606 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80065ee:	79fb      	ldrb	r3, [r7, #7]
 80065f0:	f003 021f 	and.w	r2, r3, #31
 80065f4:	4907      	ldr	r1, [pc, #28]	; (8006614 <__NVIC_EnableIRQ+0x38>)
 80065f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80065fa:	095b      	lsrs	r3, r3, #5
 80065fc:	2001      	movs	r0, #1
 80065fe:	fa00 f202 	lsl.w	r2, r0, r2
 8006602:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006606:	bf00      	nop
 8006608:	370c      	adds	r7, #12
 800660a:	46bd      	mov	sp, r7
 800660c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006610:	4770      	bx	lr
 8006612:	bf00      	nop
 8006614:	e000e100 	.word	0xe000e100

08006618 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006618:	b480      	push	{r7}
 800661a:	b083      	sub	sp, #12
 800661c:	af00      	add	r7, sp, #0
 800661e:	4603      	mov	r3, r0
 8006620:	6039      	str	r1, [r7, #0]
 8006622:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006624:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006628:	2b00      	cmp	r3, #0
 800662a:	db0a      	blt.n	8006642 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	b2da      	uxtb	r2, r3
 8006630:	490c      	ldr	r1, [pc, #48]	; (8006664 <__NVIC_SetPriority+0x4c>)
 8006632:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006636:	0112      	lsls	r2, r2, #4
 8006638:	b2d2      	uxtb	r2, r2
 800663a:	440b      	add	r3, r1
 800663c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006640:	e00a      	b.n	8006658 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	b2da      	uxtb	r2, r3
 8006646:	4908      	ldr	r1, [pc, #32]	; (8006668 <__NVIC_SetPriority+0x50>)
 8006648:	79fb      	ldrb	r3, [r7, #7]
 800664a:	f003 030f 	and.w	r3, r3, #15
 800664e:	3b04      	subs	r3, #4
 8006650:	0112      	lsls	r2, r2, #4
 8006652:	b2d2      	uxtb	r2, r2
 8006654:	440b      	add	r3, r1
 8006656:	761a      	strb	r2, [r3, #24]
}
 8006658:	bf00      	nop
 800665a:	370c      	adds	r7, #12
 800665c:	46bd      	mov	sp, r7
 800665e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006662:	4770      	bx	lr
 8006664:	e000e100 	.word	0xe000e100
 8006668:	e000ed00 	.word	0xe000ed00

0800666c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800666c:	b480      	push	{r7}
 800666e:	b089      	sub	sp, #36	; 0x24
 8006670:	af00      	add	r7, sp, #0
 8006672:	60f8      	str	r0, [r7, #12]
 8006674:	60b9      	str	r1, [r7, #8]
 8006676:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	f003 0307 	and.w	r3, r3, #7
 800667e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006680:	69fb      	ldr	r3, [r7, #28]
 8006682:	f1c3 0307 	rsb	r3, r3, #7
 8006686:	2b04      	cmp	r3, #4
 8006688:	bf28      	it	cs
 800668a:	2304      	movcs	r3, #4
 800668c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800668e:	69fb      	ldr	r3, [r7, #28]
 8006690:	3304      	adds	r3, #4
 8006692:	2b06      	cmp	r3, #6
 8006694:	d902      	bls.n	800669c <NVIC_EncodePriority+0x30>
 8006696:	69fb      	ldr	r3, [r7, #28]
 8006698:	3b03      	subs	r3, #3
 800669a:	e000      	b.n	800669e <NVIC_EncodePriority+0x32>
 800669c:	2300      	movs	r3, #0
 800669e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80066a0:	f04f 32ff 	mov.w	r2, #4294967295
 80066a4:	69bb      	ldr	r3, [r7, #24]
 80066a6:	fa02 f303 	lsl.w	r3, r2, r3
 80066aa:	43da      	mvns	r2, r3
 80066ac:	68bb      	ldr	r3, [r7, #8]
 80066ae:	401a      	ands	r2, r3
 80066b0:	697b      	ldr	r3, [r7, #20]
 80066b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80066b4:	f04f 31ff 	mov.w	r1, #4294967295
 80066b8:	697b      	ldr	r3, [r7, #20]
 80066ba:	fa01 f303 	lsl.w	r3, r1, r3
 80066be:	43d9      	mvns	r1, r3
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80066c4:	4313      	orrs	r3, r2
         );
}
 80066c6:	4618      	mov	r0, r3
 80066c8:	3724      	adds	r7, #36	; 0x24
 80066ca:	46bd      	mov	sp, r7
 80066cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d0:	4770      	bx	lr
	...

080066d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b082      	sub	sp, #8
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	3b01      	subs	r3, #1
 80066e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80066e4:	d301      	bcc.n	80066ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80066e6:	2301      	movs	r3, #1
 80066e8:	e00f      	b.n	800670a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80066ea:	4a0a      	ldr	r2, [pc, #40]	; (8006714 <SysTick_Config+0x40>)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	3b01      	subs	r3, #1
 80066f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80066f2:	210f      	movs	r1, #15
 80066f4:	f04f 30ff 	mov.w	r0, #4294967295
 80066f8:	f7ff ff8e 	bl	8006618 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80066fc:	4b05      	ldr	r3, [pc, #20]	; (8006714 <SysTick_Config+0x40>)
 80066fe:	2200      	movs	r2, #0
 8006700:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006702:	4b04      	ldr	r3, [pc, #16]	; (8006714 <SysTick_Config+0x40>)
 8006704:	2207      	movs	r2, #7
 8006706:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006708:	2300      	movs	r3, #0
}
 800670a:	4618      	mov	r0, r3
 800670c:	3708      	adds	r7, #8
 800670e:	46bd      	mov	sp, r7
 8006710:	bd80      	pop	{r7, pc}
 8006712:	bf00      	nop
 8006714:	e000e010 	.word	0xe000e010

08006718 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b082      	sub	sp, #8
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006720:	6878      	ldr	r0, [r7, #4]
 8006722:	f7ff ff29 	bl	8006578 <__NVIC_SetPriorityGrouping>
}
 8006726:	bf00      	nop
 8006728:	3708      	adds	r7, #8
 800672a:	46bd      	mov	sp, r7
 800672c:	bd80      	pop	{r7, pc}

0800672e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800672e:	b580      	push	{r7, lr}
 8006730:	b086      	sub	sp, #24
 8006732:	af00      	add	r7, sp, #0
 8006734:	4603      	mov	r3, r0
 8006736:	60b9      	str	r1, [r7, #8]
 8006738:	607a      	str	r2, [r7, #4]
 800673a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800673c:	2300      	movs	r3, #0
 800673e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006740:	f7ff ff3e 	bl	80065c0 <__NVIC_GetPriorityGrouping>
 8006744:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006746:	687a      	ldr	r2, [r7, #4]
 8006748:	68b9      	ldr	r1, [r7, #8]
 800674a:	6978      	ldr	r0, [r7, #20]
 800674c:	f7ff ff8e 	bl	800666c <NVIC_EncodePriority>
 8006750:	4602      	mov	r2, r0
 8006752:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006756:	4611      	mov	r1, r2
 8006758:	4618      	mov	r0, r3
 800675a:	f7ff ff5d 	bl	8006618 <__NVIC_SetPriority>
}
 800675e:	bf00      	nop
 8006760:	3718      	adds	r7, #24
 8006762:	46bd      	mov	sp, r7
 8006764:	bd80      	pop	{r7, pc}

08006766 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006766:	b580      	push	{r7, lr}
 8006768:	b082      	sub	sp, #8
 800676a:	af00      	add	r7, sp, #0
 800676c:	4603      	mov	r3, r0
 800676e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006770:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006774:	4618      	mov	r0, r3
 8006776:	f7ff ff31 	bl	80065dc <__NVIC_EnableIRQ>
}
 800677a:	bf00      	nop
 800677c:	3708      	adds	r7, #8
 800677e:	46bd      	mov	sp, r7
 8006780:	bd80      	pop	{r7, pc}

08006782 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006782:	b580      	push	{r7, lr}
 8006784:	b082      	sub	sp, #8
 8006786:	af00      	add	r7, sp, #0
 8006788:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800678a:	6878      	ldr	r0, [r7, #4]
 800678c:	f7ff ffa2 	bl	80066d4 <SysTick_Config>
 8006790:	4603      	mov	r3, r0
}
 8006792:	4618      	mov	r0, r3
 8006794:	3708      	adds	r7, #8
 8006796:	46bd      	mov	sp, r7
 8006798:	bd80      	pop	{r7, pc}
	...

0800679c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b086      	sub	sp, #24
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80067a4:	2300      	movs	r3, #0
 80067a6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80067a8:	f7ff fc54 	bl	8006054 <HAL_GetTick>
 80067ac:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d101      	bne.n	80067b8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80067b4:	2301      	movs	r3, #1
 80067b6:	e099      	b.n	80068ec <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2202      	movs	r2, #2
 80067bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2200      	movs	r2, #0
 80067c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	681a      	ldr	r2, [r3, #0]
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f022 0201 	bic.w	r2, r2, #1
 80067d6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80067d8:	e00f      	b.n	80067fa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80067da:	f7ff fc3b 	bl	8006054 <HAL_GetTick>
 80067de:	4602      	mov	r2, r0
 80067e0:	693b      	ldr	r3, [r7, #16]
 80067e2:	1ad3      	subs	r3, r2, r3
 80067e4:	2b05      	cmp	r3, #5
 80067e6:	d908      	bls.n	80067fa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2220      	movs	r2, #32
 80067ec:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2203      	movs	r2, #3
 80067f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80067f6:	2303      	movs	r3, #3
 80067f8:	e078      	b.n	80068ec <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f003 0301 	and.w	r3, r3, #1
 8006804:	2b00      	cmp	r3, #0
 8006806:	d1e8      	bne.n	80067da <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006810:	697a      	ldr	r2, [r7, #20]
 8006812:	4b38      	ldr	r3, [pc, #224]	; (80068f4 <HAL_DMA_Init+0x158>)
 8006814:	4013      	ands	r3, r2
 8006816:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	685a      	ldr	r2, [r3, #4]
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	689b      	ldr	r3, [r3, #8]
 8006820:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006826:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	691b      	ldr	r3, [r3, #16]
 800682c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006832:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	699b      	ldr	r3, [r3, #24]
 8006838:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800683e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	6a1b      	ldr	r3, [r3, #32]
 8006844:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006846:	697a      	ldr	r2, [r7, #20]
 8006848:	4313      	orrs	r3, r2
 800684a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006850:	2b04      	cmp	r3, #4
 8006852:	d107      	bne.n	8006864 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800685c:	4313      	orrs	r3, r2
 800685e:	697a      	ldr	r2, [r7, #20]
 8006860:	4313      	orrs	r3, r2
 8006862:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	697a      	ldr	r2, [r7, #20]
 800686a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	695b      	ldr	r3, [r3, #20]
 8006872:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006874:	697b      	ldr	r3, [r7, #20]
 8006876:	f023 0307 	bic.w	r3, r3, #7
 800687a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006880:	697a      	ldr	r2, [r7, #20]
 8006882:	4313      	orrs	r3, r2
 8006884:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800688a:	2b04      	cmp	r3, #4
 800688c:	d117      	bne.n	80068be <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006892:	697a      	ldr	r2, [r7, #20]
 8006894:	4313      	orrs	r3, r2
 8006896:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800689c:	2b00      	cmp	r3, #0
 800689e:	d00e      	beq.n	80068be <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80068a0:	6878      	ldr	r0, [r7, #4]
 80068a2:	f000 fb01 	bl	8006ea8 <DMA_CheckFifoParam>
 80068a6:	4603      	mov	r3, r0
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d008      	beq.n	80068be <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2240      	movs	r2, #64	; 0x40
 80068b0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2201      	movs	r2, #1
 80068b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80068ba:	2301      	movs	r3, #1
 80068bc:	e016      	b.n	80068ec <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	697a      	ldr	r2, [r7, #20]
 80068c4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80068c6:	6878      	ldr	r0, [r7, #4]
 80068c8:	f000 fab8 	bl	8006e3c <DMA_CalcBaseAndBitshift>
 80068cc:	4603      	mov	r3, r0
 80068ce:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068d4:	223f      	movs	r2, #63	; 0x3f
 80068d6:	409a      	lsls	r2, r3
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2200      	movs	r2, #0
 80068e0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2201      	movs	r2, #1
 80068e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80068ea:	2300      	movs	r3, #0
}
 80068ec:	4618      	mov	r0, r3
 80068ee:	3718      	adds	r7, #24
 80068f0:	46bd      	mov	sp, r7
 80068f2:	bd80      	pop	{r7, pc}
 80068f4:	f010803f 	.word	0xf010803f

080068f8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b086      	sub	sp, #24
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	60f8      	str	r0, [r7, #12]
 8006900:	60b9      	str	r1, [r7, #8]
 8006902:	607a      	str	r2, [r7, #4]
 8006904:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006906:	2300      	movs	r3, #0
 8006908:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800690e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006916:	2b01      	cmp	r3, #1
 8006918:	d101      	bne.n	800691e <HAL_DMA_Start_IT+0x26>
 800691a:	2302      	movs	r3, #2
 800691c:	e040      	b.n	80069a0 <HAL_DMA_Start_IT+0xa8>
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	2201      	movs	r2, #1
 8006922:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800692c:	b2db      	uxtb	r3, r3
 800692e:	2b01      	cmp	r3, #1
 8006930:	d12f      	bne.n	8006992 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	2202      	movs	r2, #2
 8006936:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	2200      	movs	r2, #0
 800693e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	687a      	ldr	r2, [r7, #4]
 8006944:	68b9      	ldr	r1, [r7, #8]
 8006946:	68f8      	ldr	r0, [r7, #12]
 8006948:	f000 fa4a 	bl	8006de0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006950:	223f      	movs	r2, #63	; 0x3f
 8006952:	409a      	lsls	r2, r3
 8006954:	693b      	ldr	r3, [r7, #16]
 8006956:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	681a      	ldr	r2, [r3, #0]
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f042 0216 	orr.w	r2, r2, #22
 8006966:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800696c:	2b00      	cmp	r3, #0
 800696e:	d007      	beq.n	8006980 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	681a      	ldr	r2, [r3, #0]
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f042 0208 	orr.w	r2, r2, #8
 800697e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	681a      	ldr	r2, [r3, #0]
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f042 0201 	orr.w	r2, r2, #1
 800698e:	601a      	str	r2, [r3, #0]
 8006990:	e005      	b.n	800699e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	2200      	movs	r2, #0
 8006996:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800699a:	2302      	movs	r3, #2
 800699c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800699e:	7dfb      	ldrb	r3, [r7, #23]
}
 80069a0:	4618      	mov	r0, r3
 80069a2:	3718      	adds	r7, #24
 80069a4:	46bd      	mov	sp, r7
 80069a6:	bd80      	pop	{r7, pc}

080069a8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b084      	sub	sp, #16
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069b4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80069b6:	f7ff fb4d 	bl	8006054 <HAL_GetTick>
 80069ba:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80069c2:	b2db      	uxtb	r3, r3
 80069c4:	2b02      	cmp	r3, #2
 80069c6:	d008      	beq.n	80069da <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2280      	movs	r2, #128	; 0x80
 80069cc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	2200      	movs	r2, #0
 80069d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80069d6:	2301      	movs	r3, #1
 80069d8:	e052      	b.n	8006a80 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	681a      	ldr	r2, [r3, #0]
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f022 0216 	bic.w	r2, r2, #22
 80069e8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	695a      	ldr	r2, [r3, #20]
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80069f8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d103      	bne.n	8006a0a <HAL_DMA_Abort+0x62>
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d007      	beq.n	8006a1a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	681a      	ldr	r2, [r3, #0]
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f022 0208 	bic.w	r2, r2, #8
 8006a18:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	681a      	ldr	r2, [r3, #0]
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f022 0201 	bic.w	r2, r2, #1
 8006a28:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006a2a:	e013      	b.n	8006a54 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006a2c:	f7ff fb12 	bl	8006054 <HAL_GetTick>
 8006a30:	4602      	mov	r2, r0
 8006a32:	68bb      	ldr	r3, [r7, #8]
 8006a34:	1ad3      	subs	r3, r2, r3
 8006a36:	2b05      	cmp	r3, #5
 8006a38:	d90c      	bls.n	8006a54 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2220      	movs	r2, #32
 8006a3e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2203      	movs	r2, #3
 8006a44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8006a50:	2303      	movs	r3, #3
 8006a52:	e015      	b.n	8006a80 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f003 0301 	and.w	r3, r3, #1
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d1e4      	bne.n	8006a2c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a66:	223f      	movs	r2, #63	; 0x3f
 8006a68:	409a      	lsls	r2, r3
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	2201      	movs	r2, #1
 8006a72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2200      	movs	r2, #0
 8006a7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8006a7e:	2300      	movs	r3, #0
}
 8006a80:	4618      	mov	r0, r3
 8006a82:	3710      	adds	r7, #16
 8006a84:	46bd      	mov	sp, r7
 8006a86:	bd80      	pop	{r7, pc}

08006a88 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006a88:	b480      	push	{r7}
 8006a8a:	b083      	sub	sp, #12
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006a96:	b2db      	uxtb	r3, r3
 8006a98:	2b02      	cmp	r3, #2
 8006a9a:	d004      	beq.n	8006aa6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2280      	movs	r2, #128	; 0x80
 8006aa0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006aa2:	2301      	movs	r3, #1
 8006aa4:	e00c      	b.n	8006ac0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	2205      	movs	r2, #5
 8006aaa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	681a      	ldr	r2, [r3, #0]
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f022 0201 	bic.w	r2, r2, #1
 8006abc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8006abe:	2300      	movs	r3, #0
}
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	370c      	adds	r7, #12
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aca:	4770      	bx	lr

08006acc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b086      	sub	sp, #24
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006ad8:	4b8e      	ldr	r3, [pc, #568]	; (8006d14 <HAL_DMA_IRQHandler+0x248>)
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	4a8e      	ldr	r2, [pc, #568]	; (8006d18 <HAL_DMA_IRQHandler+0x24c>)
 8006ade:	fba2 2303 	umull	r2, r3, r2, r3
 8006ae2:	0a9b      	lsrs	r3, r3, #10
 8006ae4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006aea:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8006aec:	693b      	ldr	r3, [r7, #16]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006af6:	2208      	movs	r2, #8
 8006af8:	409a      	lsls	r2, r3
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	4013      	ands	r3, r2
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d01a      	beq.n	8006b38 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f003 0304 	and.w	r3, r3, #4
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d013      	beq.n	8006b38 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	681a      	ldr	r2, [r3, #0]
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f022 0204 	bic.w	r2, r2, #4
 8006b1e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b24:	2208      	movs	r2, #8
 8006b26:	409a      	lsls	r2, r3
 8006b28:	693b      	ldr	r3, [r7, #16]
 8006b2a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b30:	f043 0201 	orr.w	r2, r3, #1
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b3c:	2201      	movs	r2, #1
 8006b3e:	409a      	lsls	r2, r3
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	4013      	ands	r3, r2
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d012      	beq.n	8006b6e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	695b      	ldr	r3, [r3, #20]
 8006b4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d00b      	beq.n	8006b6e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b5a:	2201      	movs	r2, #1
 8006b5c:	409a      	lsls	r2, r3
 8006b5e:	693b      	ldr	r3, [r7, #16]
 8006b60:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b66:	f043 0202 	orr.w	r2, r3, #2
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b72:	2204      	movs	r2, #4
 8006b74:	409a      	lsls	r2, r3
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	4013      	ands	r3, r2
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d012      	beq.n	8006ba4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f003 0302 	and.w	r3, r3, #2
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d00b      	beq.n	8006ba4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b90:	2204      	movs	r2, #4
 8006b92:	409a      	lsls	r2, r3
 8006b94:	693b      	ldr	r3, [r7, #16]
 8006b96:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b9c:	f043 0204 	orr.w	r2, r3, #4
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ba8:	2210      	movs	r2, #16
 8006baa:	409a      	lsls	r2, r3
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	4013      	ands	r3, r2
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d043      	beq.n	8006c3c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f003 0308 	and.w	r3, r3, #8
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d03c      	beq.n	8006c3c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bc6:	2210      	movs	r2, #16
 8006bc8:	409a      	lsls	r2, r3
 8006bca:	693b      	ldr	r3, [r7, #16]
 8006bcc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d018      	beq.n	8006c0e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d108      	bne.n	8006bfc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d024      	beq.n	8006c3c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bf6:	6878      	ldr	r0, [r7, #4]
 8006bf8:	4798      	blx	r3
 8006bfa:	e01f      	b.n	8006c3c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d01b      	beq.n	8006c3c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c08:	6878      	ldr	r0, [r7, #4]
 8006c0a:	4798      	blx	r3
 8006c0c:	e016      	b.n	8006c3c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d107      	bne.n	8006c2c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	681a      	ldr	r2, [r3, #0]
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f022 0208 	bic.w	r2, r2, #8
 8006c2a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d003      	beq.n	8006c3c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c38:	6878      	ldr	r0, [r7, #4]
 8006c3a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c40:	2220      	movs	r2, #32
 8006c42:	409a      	lsls	r2, r3
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	4013      	ands	r3, r2
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	f000 808f 	beq.w	8006d6c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	f003 0310 	and.w	r3, r3, #16
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	f000 8087 	beq.w	8006d6c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c62:	2220      	movs	r2, #32
 8006c64:	409a      	lsls	r2, r3
 8006c66:	693b      	ldr	r3, [r7, #16]
 8006c68:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006c70:	b2db      	uxtb	r3, r3
 8006c72:	2b05      	cmp	r3, #5
 8006c74:	d136      	bne.n	8006ce4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	681a      	ldr	r2, [r3, #0]
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f022 0216 	bic.w	r2, r2, #22
 8006c84:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	695a      	ldr	r2, [r3, #20]
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006c94:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d103      	bne.n	8006ca6 <HAL_DMA_IRQHandler+0x1da>
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d007      	beq.n	8006cb6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	681a      	ldr	r2, [r3, #0]
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f022 0208 	bic.w	r2, r2, #8
 8006cb4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006cba:	223f      	movs	r2, #63	; 0x3f
 8006cbc:	409a      	lsls	r2, r3
 8006cbe:	693b      	ldr	r3, [r7, #16]
 8006cc0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2201      	movs	r2, #1
 8006cc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	2200      	movs	r2, #0
 8006cce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d07e      	beq.n	8006dd8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cde:	6878      	ldr	r0, [r7, #4]
 8006ce0:	4798      	blx	r3
        }
        return;
 8006ce2:	e079      	b.n	8006dd8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d01d      	beq.n	8006d2e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d10d      	bne.n	8006d1c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d031      	beq.n	8006d6c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d0c:	6878      	ldr	r0, [r7, #4]
 8006d0e:	4798      	blx	r3
 8006d10:	e02c      	b.n	8006d6c <HAL_DMA_IRQHandler+0x2a0>
 8006d12:	bf00      	nop
 8006d14:	2000000c 	.word	0x2000000c
 8006d18:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d023      	beq.n	8006d6c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d28:	6878      	ldr	r0, [r7, #4]
 8006d2a:	4798      	blx	r3
 8006d2c:	e01e      	b.n	8006d6c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d10f      	bne.n	8006d5c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	681a      	ldr	r2, [r3, #0]
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f022 0210 	bic.w	r2, r2, #16
 8006d4a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2201      	movs	r2, #1
 8006d50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2200      	movs	r2, #0
 8006d58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d003      	beq.n	8006d6c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d68:	6878      	ldr	r0, [r7, #4]
 8006d6a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d032      	beq.n	8006dda <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d78:	f003 0301 	and.w	r3, r3, #1
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d022      	beq.n	8006dc6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2205      	movs	r2, #5
 8006d84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	681a      	ldr	r2, [r3, #0]
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	f022 0201 	bic.w	r2, r2, #1
 8006d96:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006d98:	68bb      	ldr	r3, [r7, #8]
 8006d9a:	3301      	adds	r3, #1
 8006d9c:	60bb      	str	r3, [r7, #8]
 8006d9e:	697a      	ldr	r2, [r7, #20]
 8006da0:	429a      	cmp	r2, r3
 8006da2:	d307      	bcc.n	8006db4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f003 0301 	and.w	r3, r3, #1
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d1f2      	bne.n	8006d98 <HAL_DMA_IRQHandler+0x2cc>
 8006db2:	e000      	b.n	8006db6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8006db4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2201      	movs	r2, #1
 8006dba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d005      	beq.n	8006dda <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006dd2:	6878      	ldr	r0, [r7, #4]
 8006dd4:	4798      	blx	r3
 8006dd6:	e000      	b.n	8006dda <HAL_DMA_IRQHandler+0x30e>
        return;
 8006dd8:	bf00      	nop
    }
  }
}
 8006dda:	3718      	adds	r7, #24
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	bd80      	pop	{r7, pc}

08006de0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006de0:	b480      	push	{r7}
 8006de2:	b085      	sub	sp, #20
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	60f8      	str	r0, [r7, #12]
 8006de8:	60b9      	str	r1, [r7, #8]
 8006dea:	607a      	str	r2, [r7, #4]
 8006dec:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	681a      	ldr	r2, [r3, #0]
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006dfc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	683a      	ldr	r2, [r7, #0]
 8006e04:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	689b      	ldr	r3, [r3, #8]
 8006e0a:	2b40      	cmp	r3, #64	; 0x40
 8006e0c:	d108      	bne.n	8006e20 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	687a      	ldr	r2, [r7, #4]
 8006e14:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	68ba      	ldr	r2, [r7, #8]
 8006e1c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8006e1e:	e007      	b.n	8006e30 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	68ba      	ldr	r2, [r7, #8]
 8006e26:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	687a      	ldr	r2, [r7, #4]
 8006e2e:	60da      	str	r2, [r3, #12]
}
 8006e30:	bf00      	nop
 8006e32:	3714      	adds	r7, #20
 8006e34:	46bd      	mov	sp, r7
 8006e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3a:	4770      	bx	lr

08006e3c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006e3c:	b480      	push	{r7}
 8006e3e:	b085      	sub	sp, #20
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	b2db      	uxtb	r3, r3
 8006e4a:	3b10      	subs	r3, #16
 8006e4c:	4a14      	ldr	r2, [pc, #80]	; (8006ea0 <DMA_CalcBaseAndBitshift+0x64>)
 8006e4e:	fba2 2303 	umull	r2, r3, r2, r3
 8006e52:	091b      	lsrs	r3, r3, #4
 8006e54:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006e56:	4a13      	ldr	r2, [pc, #76]	; (8006ea4 <DMA_CalcBaseAndBitshift+0x68>)
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	4413      	add	r3, r2
 8006e5c:	781b      	ldrb	r3, [r3, #0]
 8006e5e:	461a      	mov	r2, r3
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	2b03      	cmp	r3, #3
 8006e68:	d909      	bls.n	8006e7e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006e72:	f023 0303 	bic.w	r3, r3, #3
 8006e76:	1d1a      	adds	r2, r3, #4
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	659a      	str	r2, [r3, #88]	; 0x58
 8006e7c:	e007      	b.n	8006e8e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006e86:	f023 0303 	bic.w	r3, r3, #3
 8006e8a:	687a      	ldr	r2, [r7, #4]
 8006e8c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006e92:	4618      	mov	r0, r3
 8006e94:	3714      	adds	r7, #20
 8006e96:	46bd      	mov	sp, r7
 8006e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9c:	4770      	bx	lr
 8006e9e:	bf00      	nop
 8006ea0:	aaaaaaab 	.word	0xaaaaaaab
 8006ea4:	08016078 	.word	0x08016078

08006ea8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006ea8:	b480      	push	{r7}
 8006eaa:	b085      	sub	sp, #20
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006eb8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	699b      	ldr	r3, [r3, #24]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d11f      	bne.n	8006f02 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8006ec2:	68bb      	ldr	r3, [r7, #8]
 8006ec4:	2b03      	cmp	r3, #3
 8006ec6:	d856      	bhi.n	8006f76 <DMA_CheckFifoParam+0xce>
 8006ec8:	a201      	add	r2, pc, #4	; (adr r2, 8006ed0 <DMA_CheckFifoParam+0x28>)
 8006eca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ece:	bf00      	nop
 8006ed0:	08006ee1 	.word	0x08006ee1
 8006ed4:	08006ef3 	.word	0x08006ef3
 8006ed8:	08006ee1 	.word	0x08006ee1
 8006edc:	08006f77 	.word	0x08006f77
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ee4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d046      	beq.n	8006f7a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006eec:	2301      	movs	r3, #1
 8006eee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006ef0:	e043      	b.n	8006f7a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ef6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006efa:	d140      	bne.n	8006f7e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006efc:	2301      	movs	r3, #1
 8006efe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006f00:	e03d      	b.n	8006f7e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	699b      	ldr	r3, [r3, #24]
 8006f06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f0a:	d121      	bne.n	8006f50 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8006f0c:	68bb      	ldr	r3, [r7, #8]
 8006f0e:	2b03      	cmp	r3, #3
 8006f10:	d837      	bhi.n	8006f82 <DMA_CheckFifoParam+0xda>
 8006f12:	a201      	add	r2, pc, #4	; (adr r2, 8006f18 <DMA_CheckFifoParam+0x70>)
 8006f14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f18:	08006f29 	.word	0x08006f29
 8006f1c:	08006f2f 	.word	0x08006f2f
 8006f20:	08006f29 	.word	0x08006f29
 8006f24:	08006f41 	.word	0x08006f41
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006f28:	2301      	movs	r3, #1
 8006f2a:	73fb      	strb	r3, [r7, #15]
      break;
 8006f2c:	e030      	b.n	8006f90 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f32:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d025      	beq.n	8006f86 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8006f3a:	2301      	movs	r3, #1
 8006f3c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006f3e:	e022      	b.n	8006f86 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f44:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006f48:	d11f      	bne.n	8006f8a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8006f4a:	2301      	movs	r3, #1
 8006f4c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006f4e:	e01c      	b.n	8006f8a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006f50:	68bb      	ldr	r3, [r7, #8]
 8006f52:	2b02      	cmp	r3, #2
 8006f54:	d903      	bls.n	8006f5e <DMA_CheckFifoParam+0xb6>
 8006f56:	68bb      	ldr	r3, [r7, #8]
 8006f58:	2b03      	cmp	r3, #3
 8006f5a:	d003      	beq.n	8006f64 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006f5c:	e018      	b.n	8006f90 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8006f5e:	2301      	movs	r3, #1
 8006f60:	73fb      	strb	r3, [r7, #15]
      break;
 8006f62:	e015      	b.n	8006f90 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f68:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d00e      	beq.n	8006f8e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006f70:	2301      	movs	r3, #1
 8006f72:	73fb      	strb	r3, [r7, #15]
      break;
 8006f74:	e00b      	b.n	8006f8e <DMA_CheckFifoParam+0xe6>
      break;
 8006f76:	bf00      	nop
 8006f78:	e00a      	b.n	8006f90 <DMA_CheckFifoParam+0xe8>
      break;
 8006f7a:	bf00      	nop
 8006f7c:	e008      	b.n	8006f90 <DMA_CheckFifoParam+0xe8>
      break;
 8006f7e:	bf00      	nop
 8006f80:	e006      	b.n	8006f90 <DMA_CheckFifoParam+0xe8>
      break;
 8006f82:	bf00      	nop
 8006f84:	e004      	b.n	8006f90 <DMA_CheckFifoParam+0xe8>
      break;
 8006f86:	bf00      	nop
 8006f88:	e002      	b.n	8006f90 <DMA_CheckFifoParam+0xe8>
      break;   
 8006f8a:	bf00      	nop
 8006f8c:	e000      	b.n	8006f90 <DMA_CheckFifoParam+0xe8>
      break;
 8006f8e:	bf00      	nop
    }
  } 
  
  return status; 
 8006f90:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f92:	4618      	mov	r0, r3
 8006f94:	3714      	adds	r7, #20
 8006f96:	46bd      	mov	sp, r7
 8006f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9c:	4770      	bx	lr
 8006f9e:	bf00      	nop

08006fa0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006fa0:	b480      	push	{r7}
 8006fa2:	b089      	sub	sp, #36	; 0x24
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
 8006fa8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006faa:	2300      	movs	r3, #0
 8006fac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006fae:	2300      	movs	r3, #0
 8006fb0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	61fb      	str	r3, [r7, #28]
 8006fba:	e16b      	b.n	8007294 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006fbc:	2201      	movs	r2, #1
 8006fbe:	69fb      	ldr	r3, [r7, #28]
 8006fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8006fc4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	697a      	ldr	r2, [r7, #20]
 8006fcc:	4013      	ands	r3, r2
 8006fce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006fd0:	693a      	ldr	r2, [r7, #16]
 8006fd2:	697b      	ldr	r3, [r7, #20]
 8006fd4:	429a      	cmp	r2, r3
 8006fd6:	f040 815a 	bne.w	800728e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	685b      	ldr	r3, [r3, #4]
 8006fde:	f003 0303 	and.w	r3, r3, #3
 8006fe2:	2b01      	cmp	r3, #1
 8006fe4:	d005      	beq.n	8006ff2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	685b      	ldr	r3, [r3, #4]
 8006fea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006fee:	2b02      	cmp	r3, #2
 8006ff0:	d130      	bne.n	8007054 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	689b      	ldr	r3, [r3, #8]
 8006ff6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006ff8:	69fb      	ldr	r3, [r7, #28]
 8006ffa:	005b      	lsls	r3, r3, #1
 8006ffc:	2203      	movs	r2, #3
 8006ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8007002:	43db      	mvns	r3, r3
 8007004:	69ba      	ldr	r2, [r7, #24]
 8007006:	4013      	ands	r3, r2
 8007008:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	68da      	ldr	r2, [r3, #12]
 800700e:	69fb      	ldr	r3, [r7, #28]
 8007010:	005b      	lsls	r3, r3, #1
 8007012:	fa02 f303 	lsl.w	r3, r2, r3
 8007016:	69ba      	ldr	r2, [r7, #24]
 8007018:	4313      	orrs	r3, r2
 800701a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	69ba      	ldr	r2, [r7, #24]
 8007020:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	685b      	ldr	r3, [r3, #4]
 8007026:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007028:	2201      	movs	r2, #1
 800702a:	69fb      	ldr	r3, [r7, #28]
 800702c:	fa02 f303 	lsl.w	r3, r2, r3
 8007030:	43db      	mvns	r3, r3
 8007032:	69ba      	ldr	r2, [r7, #24]
 8007034:	4013      	ands	r3, r2
 8007036:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	685b      	ldr	r3, [r3, #4]
 800703c:	091b      	lsrs	r3, r3, #4
 800703e:	f003 0201 	and.w	r2, r3, #1
 8007042:	69fb      	ldr	r3, [r7, #28]
 8007044:	fa02 f303 	lsl.w	r3, r2, r3
 8007048:	69ba      	ldr	r2, [r7, #24]
 800704a:	4313      	orrs	r3, r2
 800704c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	69ba      	ldr	r2, [r7, #24]
 8007052:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	685b      	ldr	r3, [r3, #4]
 8007058:	f003 0303 	and.w	r3, r3, #3
 800705c:	2b03      	cmp	r3, #3
 800705e:	d017      	beq.n	8007090 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	68db      	ldr	r3, [r3, #12]
 8007064:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007066:	69fb      	ldr	r3, [r7, #28]
 8007068:	005b      	lsls	r3, r3, #1
 800706a:	2203      	movs	r2, #3
 800706c:	fa02 f303 	lsl.w	r3, r2, r3
 8007070:	43db      	mvns	r3, r3
 8007072:	69ba      	ldr	r2, [r7, #24]
 8007074:	4013      	ands	r3, r2
 8007076:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	689a      	ldr	r2, [r3, #8]
 800707c:	69fb      	ldr	r3, [r7, #28]
 800707e:	005b      	lsls	r3, r3, #1
 8007080:	fa02 f303 	lsl.w	r3, r2, r3
 8007084:	69ba      	ldr	r2, [r7, #24]
 8007086:	4313      	orrs	r3, r2
 8007088:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	69ba      	ldr	r2, [r7, #24]
 800708e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	685b      	ldr	r3, [r3, #4]
 8007094:	f003 0303 	and.w	r3, r3, #3
 8007098:	2b02      	cmp	r3, #2
 800709a:	d123      	bne.n	80070e4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800709c:	69fb      	ldr	r3, [r7, #28]
 800709e:	08da      	lsrs	r2, r3, #3
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	3208      	adds	r2, #8
 80070a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80070aa:	69fb      	ldr	r3, [r7, #28]
 80070ac:	f003 0307 	and.w	r3, r3, #7
 80070b0:	009b      	lsls	r3, r3, #2
 80070b2:	220f      	movs	r2, #15
 80070b4:	fa02 f303 	lsl.w	r3, r2, r3
 80070b8:	43db      	mvns	r3, r3
 80070ba:	69ba      	ldr	r2, [r7, #24]
 80070bc:	4013      	ands	r3, r2
 80070be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	691a      	ldr	r2, [r3, #16]
 80070c4:	69fb      	ldr	r3, [r7, #28]
 80070c6:	f003 0307 	and.w	r3, r3, #7
 80070ca:	009b      	lsls	r3, r3, #2
 80070cc:	fa02 f303 	lsl.w	r3, r2, r3
 80070d0:	69ba      	ldr	r2, [r7, #24]
 80070d2:	4313      	orrs	r3, r2
 80070d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80070d6:	69fb      	ldr	r3, [r7, #28]
 80070d8:	08da      	lsrs	r2, r3, #3
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	3208      	adds	r2, #8
 80070de:	69b9      	ldr	r1, [r7, #24]
 80070e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80070ea:	69fb      	ldr	r3, [r7, #28]
 80070ec:	005b      	lsls	r3, r3, #1
 80070ee:	2203      	movs	r2, #3
 80070f0:	fa02 f303 	lsl.w	r3, r2, r3
 80070f4:	43db      	mvns	r3, r3
 80070f6:	69ba      	ldr	r2, [r7, #24]
 80070f8:	4013      	ands	r3, r2
 80070fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	685b      	ldr	r3, [r3, #4]
 8007100:	f003 0203 	and.w	r2, r3, #3
 8007104:	69fb      	ldr	r3, [r7, #28]
 8007106:	005b      	lsls	r3, r3, #1
 8007108:	fa02 f303 	lsl.w	r3, r2, r3
 800710c:	69ba      	ldr	r2, [r7, #24]
 800710e:	4313      	orrs	r3, r2
 8007110:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	69ba      	ldr	r2, [r7, #24]
 8007116:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	685b      	ldr	r3, [r3, #4]
 800711c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007120:	2b00      	cmp	r3, #0
 8007122:	f000 80b4 	beq.w	800728e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007126:	2300      	movs	r3, #0
 8007128:	60fb      	str	r3, [r7, #12]
 800712a:	4b60      	ldr	r3, [pc, #384]	; (80072ac <HAL_GPIO_Init+0x30c>)
 800712c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800712e:	4a5f      	ldr	r2, [pc, #380]	; (80072ac <HAL_GPIO_Init+0x30c>)
 8007130:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007134:	6453      	str	r3, [r2, #68]	; 0x44
 8007136:	4b5d      	ldr	r3, [pc, #372]	; (80072ac <HAL_GPIO_Init+0x30c>)
 8007138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800713a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800713e:	60fb      	str	r3, [r7, #12]
 8007140:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007142:	4a5b      	ldr	r2, [pc, #364]	; (80072b0 <HAL_GPIO_Init+0x310>)
 8007144:	69fb      	ldr	r3, [r7, #28]
 8007146:	089b      	lsrs	r3, r3, #2
 8007148:	3302      	adds	r3, #2
 800714a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800714e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007150:	69fb      	ldr	r3, [r7, #28]
 8007152:	f003 0303 	and.w	r3, r3, #3
 8007156:	009b      	lsls	r3, r3, #2
 8007158:	220f      	movs	r2, #15
 800715a:	fa02 f303 	lsl.w	r3, r2, r3
 800715e:	43db      	mvns	r3, r3
 8007160:	69ba      	ldr	r2, [r7, #24]
 8007162:	4013      	ands	r3, r2
 8007164:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	4a52      	ldr	r2, [pc, #328]	; (80072b4 <HAL_GPIO_Init+0x314>)
 800716a:	4293      	cmp	r3, r2
 800716c:	d02b      	beq.n	80071c6 <HAL_GPIO_Init+0x226>
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	4a51      	ldr	r2, [pc, #324]	; (80072b8 <HAL_GPIO_Init+0x318>)
 8007172:	4293      	cmp	r3, r2
 8007174:	d025      	beq.n	80071c2 <HAL_GPIO_Init+0x222>
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	4a50      	ldr	r2, [pc, #320]	; (80072bc <HAL_GPIO_Init+0x31c>)
 800717a:	4293      	cmp	r3, r2
 800717c:	d01f      	beq.n	80071be <HAL_GPIO_Init+0x21e>
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	4a4f      	ldr	r2, [pc, #316]	; (80072c0 <HAL_GPIO_Init+0x320>)
 8007182:	4293      	cmp	r3, r2
 8007184:	d019      	beq.n	80071ba <HAL_GPIO_Init+0x21a>
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	4a4e      	ldr	r2, [pc, #312]	; (80072c4 <HAL_GPIO_Init+0x324>)
 800718a:	4293      	cmp	r3, r2
 800718c:	d013      	beq.n	80071b6 <HAL_GPIO_Init+0x216>
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	4a4d      	ldr	r2, [pc, #308]	; (80072c8 <HAL_GPIO_Init+0x328>)
 8007192:	4293      	cmp	r3, r2
 8007194:	d00d      	beq.n	80071b2 <HAL_GPIO_Init+0x212>
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	4a4c      	ldr	r2, [pc, #304]	; (80072cc <HAL_GPIO_Init+0x32c>)
 800719a:	4293      	cmp	r3, r2
 800719c:	d007      	beq.n	80071ae <HAL_GPIO_Init+0x20e>
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	4a4b      	ldr	r2, [pc, #300]	; (80072d0 <HAL_GPIO_Init+0x330>)
 80071a2:	4293      	cmp	r3, r2
 80071a4:	d101      	bne.n	80071aa <HAL_GPIO_Init+0x20a>
 80071a6:	2307      	movs	r3, #7
 80071a8:	e00e      	b.n	80071c8 <HAL_GPIO_Init+0x228>
 80071aa:	2308      	movs	r3, #8
 80071ac:	e00c      	b.n	80071c8 <HAL_GPIO_Init+0x228>
 80071ae:	2306      	movs	r3, #6
 80071b0:	e00a      	b.n	80071c8 <HAL_GPIO_Init+0x228>
 80071b2:	2305      	movs	r3, #5
 80071b4:	e008      	b.n	80071c8 <HAL_GPIO_Init+0x228>
 80071b6:	2304      	movs	r3, #4
 80071b8:	e006      	b.n	80071c8 <HAL_GPIO_Init+0x228>
 80071ba:	2303      	movs	r3, #3
 80071bc:	e004      	b.n	80071c8 <HAL_GPIO_Init+0x228>
 80071be:	2302      	movs	r3, #2
 80071c0:	e002      	b.n	80071c8 <HAL_GPIO_Init+0x228>
 80071c2:	2301      	movs	r3, #1
 80071c4:	e000      	b.n	80071c8 <HAL_GPIO_Init+0x228>
 80071c6:	2300      	movs	r3, #0
 80071c8:	69fa      	ldr	r2, [r7, #28]
 80071ca:	f002 0203 	and.w	r2, r2, #3
 80071ce:	0092      	lsls	r2, r2, #2
 80071d0:	4093      	lsls	r3, r2
 80071d2:	69ba      	ldr	r2, [r7, #24]
 80071d4:	4313      	orrs	r3, r2
 80071d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80071d8:	4935      	ldr	r1, [pc, #212]	; (80072b0 <HAL_GPIO_Init+0x310>)
 80071da:	69fb      	ldr	r3, [r7, #28]
 80071dc:	089b      	lsrs	r3, r3, #2
 80071de:	3302      	adds	r3, #2
 80071e0:	69ba      	ldr	r2, [r7, #24]
 80071e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80071e6:	4b3b      	ldr	r3, [pc, #236]	; (80072d4 <HAL_GPIO_Init+0x334>)
 80071e8:	689b      	ldr	r3, [r3, #8]
 80071ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80071ec:	693b      	ldr	r3, [r7, #16]
 80071ee:	43db      	mvns	r3, r3
 80071f0:	69ba      	ldr	r2, [r7, #24]
 80071f2:	4013      	ands	r3, r2
 80071f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	685b      	ldr	r3, [r3, #4]
 80071fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d003      	beq.n	800720a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8007202:	69ba      	ldr	r2, [r7, #24]
 8007204:	693b      	ldr	r3, [r7, #16]
 8007206:	4313      	orrs	r3, r2
 8007208:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800720a:	4a32      	ldr	r2, [pc, #200]	; (80072d4 <HAL_GPIO_Init+0x334>)
 800720c:	69bb      	ldr	r3, [r7, #24]
 800720e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007210:	4b30      	ldr	r3, [pc, #192]	; (80072d4 <HAL_GPIO_Init+0x334>)
 8007212:	68db      	ldr	r3, [r3, #12]
 8007214:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007216:	693b      	ldr	r3, [r7, #16]
 8007218:	43db      	mvns	r3, r3
 800721a:	69ba      	ldr	r2, [r7, #24]
 800721c:	4013      	ands	r3, r2
 800721e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	685b      	ldr	r3, [r3, #4]
 8007224:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007228:	2b00      	cmp	r3, #0
 800722a:	d003      	beq.n	8007234 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800722c:	69ba      	ldr	r2, [r7, #24]
 800722e:	693b      	ldr	r3, [r7, #16]
 8007230:	4313      	orrs	r3, r2
 8007232:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007234:	4a27      	ldr	r2, [pc, #156]	; (80072d4 <HAL_GPIO_Init+0x334>)
 8007236:	69bb      	ldr	r3, [r7, #24]
 8007238:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800723a:	4b26      	ldr	r3, [pc, #152]	; (80072d4 <HAL_GPIO_Init+0x334>)
 800723c:	685b      	ldr	r3, [r3, #4]
 800723e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007240:	693b      	ldr	r3, [r7, #16]
 8007242:	43db      	mvns	r3, r3
 8007244:	69ba      	ldr	r2, [r7, #24]
 8007246:	4013      	ands	r3, r2
 8007248:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800724a:	683b      	ldr	r3, [r7, #0]
 800724c:	685b      	ldr	r3, [r3, #4]
 800724e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007252:	2b00      	cmp	r3, #0
 8007254:	d003      	beq.n	800725e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8007256:	69ba      	ldr	r2, [r7, #24]
 8007258:	693b      	ldr	r3, [r7, #16]
 800725a:	4313      	orrs	r3, r2
 800725c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800725e:	4a1d      	ldr	r2, [pc, #116]	; (80072d4 <HAL_GPIO_Init+0x334>)
 8007260:	69bb      	ldr	r3, [r7, #24]
 8007262:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007264:	4b1b      	ldr	r3, [pc, #108]	; (80072d4 <HAL_GPIO_Init+0x334>)
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800726a:	693b      	ldr	r3, [r7, #16]
 800726c:	43db      	mvns	r3, r3
 800726e:	69ba      	ldr	r2, [r7, #24]
 8007270:	4013      	ands	r3, r2
 8007272:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	685b      	ldr	r3, [r3, #4]
 8007278:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800727c:	2b00      	cmp	r3, #0
 800727e:	d003      	beq.n	8007288 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8007280:	69ba      	ldr	r2, [r7, #24]
 8007282:	693b      	ldr	r3, [r7, #16]
 8007284:	4313      	orrs	r3, r2
 8007286:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007288:	4a12      	ldr	r2, [pc, #72]	; (80072d4 <HAL_GPIO_Init+0x334>)
 800728a:	69bb      	ldr	r3, [r7, #24]
 800728c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800728e:	69fb      	ldr	r3, [r7, #28]
 8007290:	3301      	adds	r3, #1
 8007292:	61fb      	str	r3, [r7, #28]
 8007294:	69fb      	ldr	r3, [r7, #28]
 8007296:	2b0f      	cmp	r3, #15
 8007298:	f67f ae90 	bls.w	8006fbc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800729c:	bf00      	nop
 800729e:	bf00      	nop
 80072a0:	3724      	adds	r7, #36	; 0x24
 80072a2:	46bd      	mov	sp, r7
 80072a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a8:	4770      	bx	lr
 80072aa:	bf00      	nop
 80072ac:	40023800 	.word	0x40023800
 80072b0:	40013800 	.word	0x40013800
 80072b4:	40020000 	.word	0x40020000
 80072b8:	40020400 	.word	0x40020400
 80072bc:	40020800 	.word	0x40020800
 80072c0:	40020c00 	.word	0x40020c00
 80072c4:	40021000 	.word	0x40021000
 80072c8:	40021400 	.word	0x40021400
 80072cc:	40021800 	.word	0x40021800
 80072d0:	40021c00 	.word	0x40021c00
 80072d4:	40013c00 	.word	0x40013c00

080072d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80072d8:	b480      	push	{r7}
 80072da:	b083      	sub	sp, #12
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
 80072e0:	460b      	mov	r3, r1
 80072e2:	807b      	strh	r3, [r7, #2]
 80072e4:	4613      	mov	r3, r2
 80072e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80072e8:	787b      	ldrb	r3, [r7, #1]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d003      	beq.n	80072f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80072ee:	887a      	ldrh	r2, [r7, #2]
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80072f4:	e003      	b.n	80072fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80072f6:	887b      	ldrh	r3, [r7, #2]
 80072f8:	041a      	lsls	r2, r3, #16
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	619a      	str	r2, [r3, #24]
}
 80072fe:	bf00      	nop
 8007300:	370c      	adds	r7, #12
 8007302:	46bd      	mov	sp, r7
 8007304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007308:	4770      	bx	lr

0800730a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800730a:	b480      	push	{r7}
 800730c:	b085      	sub	sp, #20
 800730e:	af00      	add	r7, sp, #0
 8007310:	6078      	str	r0, [r7, #4]
 8007312:	460b      	mov	r3, r1
 8007314:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	695b      	ldr	r3, [r3, #20]
 800731a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800731c:	887a      	ldrh	r2, [r7, #2]
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	4013      	ands	r3, r2
 8007322:	041a      	lsls	r2, r3, #16
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	43d9      	mvns	r1, r3
 8007328:	887b      	ldrh	r3, [r7, #2]
 800732a:	400b      	ands	r3, r1
 800732c:	431a      	orrs	r2, r3
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	619a      	str	r2, [r3, #24]
}
 8007332:	bf00      	nop
 8007334:	3714      	adds	r7, #20
 8007336:	46bd      	mov	sp, r7
 8007338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733c:	4770      	bx	lr
	...

08007340 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007340:	b580      	push	{r7, lr}
 8007342:	b082      	sub	sp, #8
 8007344:	af00      	add	r7, sp, #0
 8007346:	4603      	mov	r3, r0
 8007348:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800734a:	4b08      	ldr	r3, [pc, #32]	; (800736c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800734c:	695a      	ldr	r2, [r3, #20]
 800734e:	88fb      	ldrh	r3, [r7, #6]
 8007350:	4013      	ands	r3, r2
 8007352:	2b00      	cmp	r3, #0
 8007354:	d006      	beq.n	8007364 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007356:	4a05      	ldr	r2, [pc, #20]	; (800736c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007358:	88fb      	ldrh	r3, [r7, #6]
 800735a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800735c:	88fb      	ldrh	r3, [r7, #6]
 800735e:	4618      	mov	r0, r3
 8007360:	f7fa ffe2 	bl	8002328 <HAL_GPIO_EXTI_Callback>
  }
}
 8007364:	bf00      	nop
 8007366:	3708      	adds	r7, #8
 8007368:	46bd      	mov	sp, r7
 800736a:	bd80      	pop	{r7, pc}
 800736c:	40013c00 	.word	0x40013c00

08007370 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007370:	b580      	push	{r7, lr}
 8007372:	b084      	sub	sp, #16
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d101      	bne.n	8007382 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800737e:	2301      	movs	r3, #1
 8007380:	e12b      	b.n	80075da <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007388:	b2db      	uxtb	r3, r3
 800738a:	2b00      	cmp	r3, #0
 800738c:	d106      	bne.n	800739c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	2200      	movs	r2, #0
 8007392:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8007396:	6878      	ldr	r0, [r7, #4]
 8007398:	f7fc fc0a 	bl	8003bb0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2224      	movs	r2, #36	; 0x24
 80073a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	681a      	ldr	r2, [r3, #0]
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f022 0201 	bic.w	r2, r2, #1
 80073b2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	681a      	ldr	r2, [r3, #0]
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80073c2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	681a      	ldr	r2, [r3, #0]
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80073d2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80073d4:	f001 fd2a 	bl	8008e2c <HAL_RCC_GetPCLK1Freq>
 80073d8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	685b      	ldr	r3, [r3, #4]
 80073de:	4a81      	ldr	r2, [pc, #516]	; (80075e4 <HAL_I2C_Init+0x274>)
 80073e0:	4293      	cmp	r3, r2
 80073e2:	d807      	bhi.n	80073f4 <HAL_I2C_Init+0x84>
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	4a80      	ldr	r2, [pc, #512]	; (80075e8 <HAL_I2C_Init+0x278>)
 80073e8:	4293      	cmp	r3, r2
 80073ea:	bf94      	ite	ls
 80073ec:	2301      	movls	r3, #1
 80073ee:	2300      	movhi	r3, #0
 80073f0:	b2db      	uxtb	r3, r3
 80073f2:	e006      	b.n	8007402 <HAL_I2C_Init+0x92>
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	4a7d      	ldr	r2, [pc, #500]	; (80075ec <HAL_I2C_Init+0x27c>)
 80073f8:	4293      	cmp	r3, r2
 80073fa:	bf94      	ite	ls
 80073fc:	2301      	movls	r3, #1
 80073fe:	2300      	movhi	r3, #0
 8007400:	b2db      	uxtb	r3, r3
 8007402:	2b00      	cmp	r3, #0
 8007404:	d001      	beq.n	800740a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8007406:	2301      	movs	r3, #1
 8007408:	e0e7      	b.n	80075da <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	4a78      	ldr	r2, [pc, #480]	; (80075f0 <HAL_I2C_Init+0x280>)
 800740e:	fba2 2303 	umull	r2, r3, r2, r3
 8007412:	0c9b      	lsrs	r3, r3, #18
 8007414:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	685b      	ldr	r3, [r3, #4]
 800741c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	68ba      	ldr	r2, [r7, #8]
 8007426:	430a      	orrs	r2, r1
 8007428:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	6a1b      	ldr	r3, [r3, #32]
 8007430:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	685b      	ldr	r3, [r3, #4]
 8007438:	4a6a      	ldr	r2, [pc, #424]	; (80075e4 <HAL_I2C_Init+0x274>)
 800743a:	4293      	cmp	r3, r2
 800743c:	d802      	bhi.n	8007444 <HAL_I2C_Init+0xd4>
 800743e:	68bb      	ldr	r3, [r7, #8]
 8007440:	3301      	adds	r3, #1
 8007442:	e009      	b.n	8007458 <HAL_I2C_Init+0xe8>
 8007444:	68bb      	ldr	r3, [r7, #8]
 8007446:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800744a:	fb02 f303 	mul.w	r3, r2, r3
 800744e:	4a69      	ldr	r2, [pc, #420]	; (80075f4 <HAL_I2C_Init+0x284>)
 8007450:	fba2 2303 	umull	r2, r3, r2, r3
 8007454:	099b      	lsrs	r3, r3, #6
 8007456:	3301      	adds	r3, #1
 8007458:	687a      	ldr	r2, [r7, #4]
 800745a:	6812      	ldr	r2, [r2, #0]
 800745c:	430b      	orrs	r3, r1
 800745e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	69db      	ldr	r3, [r3, #28]
 8007466:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800746a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	685b      	ldr	r3, [r3, #4]
 8007472:	495c      	ldr	r1, [pc, #368]	; (80075e4 <HAL_I2C_Init+0x274>)
 8007474:	428b      	cmp	r3, r1
 8007476:	d819      	bhi.n	80074ac <HAL_I2C_Init+0x13c>
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	1e59      	subs	r1, r3, #1
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	685b      	ldr	r3, [r3, #4]
 8007480:	005b      	lsls	r3, r3, #1
 8007482:	fbb1 f3f3 	udiv	r3, r1, r3
 8007486:	1c59      	adds	r1, r3, #1
 8007488:	f640 73fc 	movw	r3, #4092	; 0xffc
 800748c:	400b      	ands	r3, r1
 800748e:	2b00      	cmp	r3, #0
 8007490:	d00a      	beq.n	80074a8 <HAL_I2C_Init+0x138>
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	1e59      	subs	r1, r3, #1
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	685b      	ldr	r3, [r3, #4]
 800749a:	005b      	lsls	r3, r3, #1
 800749c:	fbb1 f3f3 	udiv	r3, r1, r3
 80074a0:	3301      	adds	r3, #1
 80074a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80074a6:	e051      	b.n	800754c <HAL_I2C_Init+0x1dc>
 80074a8:	2304      	movs	r3, #4
 80074aa:	e04f      	b.n	800754c <HAL_I2C_Init+0x1dc>
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	689b      	ldr	r3, [r3, #8]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d111      	bne.n	80074d8 <HAL_I2C_Init+0x168>
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	1e58      	subs	r0, r3, #1
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	6859      	ldr	r1, [r3, #4]
 80074bc:	460b      	mov	r3, r1
 80074be:	005b      	lsls	r3, r3, #1
 80074c0:	440b      	add	r3, r1
 80074c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80074c6:	3301      	adds	r3, #1
 80074c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	bf0c      	ite	eq
 80074d0:	2301      	moveq	r3, #1
 80074d2:	2300      	movne	r3, #0
 80074d4:	b2db      	uxtb	r3, r3
 80074d6:	e012      	b.n	80074fe <HAL_I2C_Init+0x18e>
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	1e58      	subs	r0, r3, #1
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	6859      	ldr	r1, [r3, #4]
 80074e0:	460b      	mov	r3, r1
 80074e2:	009b      	lsls	r3, r3, #2
 80074e4:	440b      	add	r3, r1
 80074e6:	0099      	lsls	r1, r3, #2
 80074e8:	440b      	add	r3, r1
 80074ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80074ee:	3301      	adds	r3, #1
 80074f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	bf0c      	ite	eq
 80074f8:	2301      	moveq	r3, #1
 80074fa:	2300      	movne	r3, #0
 80074fc:	b2db      	uxtb	r3, r3
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d001      	beq.n	8007506 <HAL_I2C_Init+0x196>
 8007502:	2301      	movs	r3, #1
 8007504:	e022      	b.n	800754c <HAL_I2C_Init+0x1dc>
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	689b      	ldr	r3, [r3, #8]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d10e      	bne.n	800752c <HAL_I2C_Init+0x1bc>
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	1e58      	subs	r0, r3, #1
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	6859      	ldr	r1, [r3, #4]
 8007516:	460b      	mov	r3, r1
 8007518:	005b      	lsls	r3, r3, #1
 800751a:	440b      	add	r3, r1
 800751c:	fbb0 f3f3 	udiv	r3, r0, r3
 8007520:	3301      	adds	r3, #1
 8007522:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007526:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800752a:	e00f      	b.n	800754c <HAL_I2C_Init+0x1dc>
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	1e58      	subs	r0, r3, #1
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	6859      	ldr	r1, [r3, #4]
 8007534:	460b      	mov	r3, r1
 8007536:	009b      	lsls	r3, r3, #2
 8007538:	440b      	add	r3, r1
 800753a:	0099      	lsls	r1, r3, #2
 800753c:	440b      	add	r3, r1
 800753e:	fbb0 f3f3 	udiv	r3, r0, r3
 8007542:	3301      	adds	r3, #1
 8007544:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007548:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800754c:	6879      	ldr	r1, [r7, #4]
 800754e:	6809      	ldr	r1, [r1, #0]
 8007550:	4313      	orrs	r3, r2
 8007552:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	69da      	ldr	r2, [r3, #28]
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	6a1b      	ldr	r3, [r3, #32]
 8007566:	431a      	orrs	r2, r3
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	430a      	orrs	r2, r1
 800756e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	689b      	ldr	r3, [r3, #8]
 8007576:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800757a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800757e:	687a      	ldr	r2, [r7, #4]
 8007580:	6911      	ldr	r1, [r2, #16]
 8007582:	687a      	ldr	r2, [r7, #4]
 8007584:	68d2      	ldr	r2, [r2, #12]
 8007586:	4311      	orrs	r1, r2
 8007588:	687a      	ldr	r2, [r7, #4]
 800758a:	6812      	ldr	r2, [r2, #0]
 800758c:	430b      	orrs	r3, r1
 800758e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	68db      	ldr	r3, [r3, #12]
 8007596:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	695a      	ldr	r2, [r3, #20]
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	699b      	ldr	r3, [r3, #24]
 80075a2:	431a      	orrs	r2, r3
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	430a      	orrs	r2, r1
 80075aa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	681a      	ldr	r2, [r3, #0]
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	f042 0201 	orr.w	r2, r2, #1
 80075ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2200      	movs	r2, #0
 80075c0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	2220      	movs	r2, #32
 80075c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	2200      	movs	r2, #0
 80075ce:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2200      	movs	r2, #0
 80075d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80075d8:	2300      	movs	r3, #0
}
 80075da:	4618      	mov	r0, r3
 80075dc:	3710      	adds	r7, #16
 80075de:	46bd      	mov	sp, r7
 80075e0:	bd80      	pop	{r7, pc}
 80075e2:	bf00      	nop
 80075e4:	000186a0 	.word	0x000186a0
 80075e8:	001e847f 	.word	0x001e847f
 80075ec:	003d08ff 	.word	0x003d08ff
 80075f0:	431bde83 	.word	0x431bde83
 80075f4:	10624dd3 	.word	0x10624dd3

080075f8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b088      	sub	sp, #32
 80075fc:	af02      	add	r7, sp, #8
 80075fe:	60f8      	str	r0, [r7, #12]
 8007600:	4608      	mov	r0, r1
 8007602:	4611      	mov	r1, r2
 8007604:	461a      	mov	r2, r3
 8007606:	4603      	mov	r3, r0
 8007608:	817b      	strh	r3, [r7, #10]
 800760a:	460b      	mov	r3, r1
 800760c:	813b      	strh	r3, [r7, #8]
 800760e:	4613      	mov	r3, r2
 8007610:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007612:	f7fe fd1f 	bl	8006054 <HAL_GetTick>
 8007616:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800761e:	b2db      	uxtb	r3, r3
 8007620:	2b20      	cmp	r3, #32
 8007622:	f040 80d9 	bne.w	80077d8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007626:	697b      	ldr	r3, [r7, #20]
 8007628:	9300      	str	r3, [sp, #0]
 800762a:	2319      	movs	r3, #25
 800762c:	2201      	movs	r2, #1
 800762e:	496d      	ldr	r1, [pc, #436]	; (80077e4 <HAL_I2C_Mem_Write+0x1ec>)
 8007630:	68f8      	ldr	r0, [r7, #12]
 8007632:	f000 fdad 	bl	8008190 <I2C_WaitOnFlagUntilTimeout>
 8007636:	4603      	mov	r3, r0
 8007638:	2b00      	cmp	r3, #0
 800763a:	d001      	beq.n	8007640 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800763c:	2302      	movs	r3, #2
 800763e:	e0cc      	b.n	80077da <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007646:	2b01      	cmp	r3, #1
 8007648:	d101      	bne.n	800764e <HAL_I2C_Mem_Write+0x56>
 800764a:	2302      	movs	r3, #2
 800764c:	e0c5      	b.n	80077da <HAL_I2C_Mem_Write+0x1e2>
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	2201      	movs	r2, #1
 8007652:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f003 0301 	and.w	r3, r3, #1
 8007660:	2b01      	cmp	r3, #1
 8007662:	d007      	beq.n	8007674 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	681a      	ldr	r2, [r3, #0]
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	f042 0201 	orr.w	r2, r2, #1
 8007672:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	681a      	ldr	r2, [r3, #0]
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007682:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	2221      	movs	r2, #33	; 0x21
 8007688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	2240      	movs	r2, #64	; 0x40
 8007690:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	2200      	movs	r2, #0
 8007698:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	6a3a      	ldr	r2, [r7, #32]
 800769e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80076a4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076aa:	b29a      	uxth	r2, r3
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	4a4d      	ldr	r2, [pc, #308]	; (80077e8 <HAL_I2C_Mem_Write+0x1f0>)
 80076b4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80076b6:	88f8      	ldrh	r0, [r7, #6]
 80076b8:	893a      	ldrh	r2, [r7, #8]
 80076ba:	8979      	ldrh	r1, [r7, #10]
 80076bc:	697b      	ldr	r3, [r7, #20]
 80076be:	9301      	str	r3, [sp, #4]
 80076c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076c2:	9300      	str	r3, [sp, #0]
 80076c4:	4603      	mov	r3, r0
 80076c6:	68f8      	ldr	r0, [r7, #12]
 80076c8:	f000 fbe4 	bl	8007e94 <I2C_RequestMemoryWrite>
 80076cc:	4603      	mov	r3, r0
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d052      	beq.n	8007778 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80076d2:	2301      	movs	r3, #1
 80076d4:	e081      	b.n	80077da <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80076d6:	697a      	ldr	r2, [r7, #20]
 80076d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80076da:	68f8      	ldr	r0, [r7, #12]
 80076dc:	f000 fe2e 	bl	800833c <I2C_WaitOnTXEFlagUntilTimeout>
 80076e0:	4603      	mov	r3, r0
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d00d      	beq.n	8007702 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076ea:	2b04      	cmp	r3, #4
 80076ec:	d107      	bne.n	80076fe <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	681a      	ldr	r2, [r3, #0]
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80076fc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80076fe:	2301      	movs	r3, #1
 8007700:	e06b      	b.n	80077da <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007706:	781a      	ldrb	r2, [r3, #0]
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007712:	1c5a      	adds	r2, r3, #1
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800771c:	3b01      	subs	r3, #1
 800771e:	b29a      	uxth	r2, r3
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007728:	b29b      	uxth	r3, r3
 800772a:	3b01      	subs	r3, #1
 800772c:	b29a      	uxth	r2, r3
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	695b      	ldr	r3, [r3, #20]
 8007738:	f003 0304 	and.w	r3, r3, #4
 800773c:	2b04      	cmp	r3, #4
 800773e:	d11b      	bne.n	8007778 <HAL_I2C_Mem_Write+0x180>
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007744:	2b00      	cmp	r3, #0
 8007746:	d017      	beq.n	8007778 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800774c:	781a      	ldrb	r2, [r3, #0]
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007758:	1c5a      	adds	r2, r3, #1
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007762:	3b01      	subs	r3, #1
 8007764:	b29a      	uxth	r2, r3
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800776e:	b29b      	uxth	r3, r3
 8007770:	3b01      	subs	r3, #1
 8007772:	b29a      	uxth	r2, r3
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800777c:	2b00      	cmp	r3, #0
 800777e:	d1aa      	bne.n	80076d6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007780:	697a      	ldr	r2, [r7, #20]
 8007782:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007784:	68f8      	ldr	r0, [r7, #12]
 8007786:	f000 fe1a 	bl	80083be <I2C_WaitOnBTFFlagUntilTimeout>
 800778a:	4603      	mov	r3, r0
 800778c:	2b00      	cmp	r3, #0
 800778e:	d00d      	beq.n	80077ac <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007794:	2b04      	cmp	r3, #4
 8007796:	d107      	bne.n	80077a8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	681a      	ldr	r2, [r3, #0]
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80077a6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80077a8:	2301      	movs	r3, #1
 80077aa:	e016      	b.n	80077da <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	681a      	ldr	r2, [r3, #0]
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80077ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	2220      	movs	r2, #32
 80077c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	2200      	movs	r2, #0
 80077c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	2200      	movs	r2, #0
 80077d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80077d4:	2300      	movs	r3, #0
 80077d6:	e000      	b.n	80077da <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80077d8:	2302      	movs	r3, #2
  }
}
 80077da:	4618      	mov	r0, r3
 80077dc:	3718      	adds	r7, #24
 80077de:	46bd      	mov	sp, r7
 80077e0:	bd80      	pop	{r7, pc}
 80077e2:	bf00      	nop
 80077e4:	00100002 	.word	0x00100002
 80077e8:	ffff0000 	.word	0xffff0000

080077ec <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b08c      	sub	sp, #48	; 0x30
 80077f0:	af02      	add	r7, sp, #8
 80077f2:	60f8      	str	r0, [r7, #12]
 80077f4:	4608      	mov	r0, r1
 80077f6:	4611      	mov	r1, r2
 80077f8:	461a      	mov	r2, r3
 80077fa:	4603      	mov	r3, r0
 80077fc:	817b      	strh	r3, [r7, #10]
 80077fe:	460b      	mov	r3, r1
 8007800:	813b      	strh	r3, [r7, #8]
 8007802:	4613      	mov	r3, r2
 8007804:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007806:	f7fe fc25 	bl	8006054 <HAL_GetTick>
 800780a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007812:	b2db      	uxtb	r3, r3
 8007814:	2b20      	cmp	r3, #32
 8007816:	f040 8208 	bne.w	8007c2a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800781a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800781c:	9300      	str	r3, [sp, #0]
 800781e:	2319      	movs	r3, #25
 8007820:	2201      	movs	r2, #1
 8007822:	497b      	ldr	r1, [pc, #492]	; (8007a10 <HAL_I2C_Mem_Read+0x224>)
 8007824:	68f8      	ldr	r0, [r7, #12]
 8007826:	f000 fcb3 	bl	8008190 <I2C_WaitOnFlagUntilTimeout>
 800782a:	4603      	mov	r3, r0
 800782c:	2b00      	cmp	r3, #0
 800782e:	d001      	beq.n	8007834 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8007830:	2302      	movs	r3, #2
 8007832:	e1fb      	b.n	8007c2c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800783a:	2b01      	cmp	r3, #1
 800783c:	d101      	bne.n	8007842 <HAL_I2C_Mem_Read+0x56>
 800783e:	2302      	movs	r3, #2
 8007840:	e1f4      	b.n	8007c2c <HAL_I2C_Mem_Read+0x440>
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	2201      	movs	r2, #1
 8007846:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	f003 0301 	and.w	r3, r3, #1
 8007854:	2b01      	cmp	r3, #1
 8007856:	d007      	beq.n	8007868 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	681a      	ldr	r2, [r3, #0]
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	f042 0201 	orr.w	r2, r2, #1
 8007866:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	681a      	ldr	r2, [r3, #0]
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007876:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	2222      	movs	r2, #34	; 0x22
 800787c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	2240      	movs	r2, #64	; 0x40
 8007884:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	2200      	movs	r2, #0
 800788c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007892:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8007898:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800789e:	b29a      	uxth	r2, r3
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	4a5b      	ldr	r2, [pc, #364]	; (8007a14 <HAL_I2C_Mem_Read+0x228>)
 80078a8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80078aa:	88f8      	ldrh	r0, [r7, #6]
 80078ac:	893a      	ldrh	r2, [r7, #8]
 80078ae:	8979      	ldrh	r1, [r7, #10]
 80078b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078b2:	9301      	str	r3, [sp, #4]
 80078b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078b6:	9300      	str	r3, [sp, #0]
 80078b8:	4603      	mov	r3, r0
 80078ba:	68f8      	ldr	r0, [r7, #12]
 80078bc:	f000 fb80 	bl	8007fc0 <I2C_RequestMemoryRead>
 80078c0:	4603      	mov	r3, r0
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d001      	beq.n	80078ca <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80078c6:	2301      	movs	r3, #1
 80078c8:	e1b0      	b.n	8007c2c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d113      	bne.n	80078fa <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80078d2:	2300      	movs	r3, #0
 80078d4:	623b      	str	r3, [r7, #32]
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	695b      	ldr	r3, [r3, #20]
 80078dc:	623b      	str	r3, [r7, #32]
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	699b      	ldr	r3, [r3, #24]
 80078e4:	623b      	str	r3, [r7, #32]
 80078e6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	681a      	ldr	r2, [r3, #0]
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80078f6:	601a      	str	r2, [r3, #0]
 80078f8:	e184      	b.n	8007c04 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80078fe:	2b01      	cmp	r3, #1
 8007900:	d11b      	bne.n	800793a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	681a      	ldr	r2, [r3, #0]
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007910:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007912:	2300      	movs	r3, #0
 8007914:	61fb      	str	r3, [r7, #28]
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	695b      	ldr	r3, [r3, #20]
 800791c:	61fb      	str	r3, [r7, #28]
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	699b      	ldr	r3, [r3, #24]
 8007924:	61fb      	str	r3, [r7, #28]
 8007926:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	681a      	ldr	r2, [r3, #0]
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007936:	601a      	str	r2, [r3, #0]
 8007938:	e164      	b.n	8007c04 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800793e:	2b02      	cmp	r3, #2
 8007940:	d11b      	bne.n	800797a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	681a      	ldr	r2, [r3, #0]
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007950:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	681a      	ldr	r2, [r3, #0]
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007960:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007962:	2300      	movs	r3, #0
 8007964:	61bb      	str	r3, [r7, #24]
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	695b      	ldr	r3, [r3, #20]
 800796c:	61bb      	str	r3, [r7, #24]
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	699b      	ldr	r3, [r3, #24]
 8007974:	61bb      	str	r3, [r7, #24]
 8007976:	69bb      	ldr	r3, [r7, #24]
 8007978:	e144      	b.n	8007c04 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800797a:	2300      	movs	r3, #0
 800797c:	617b      	str	r3, [r7, #20]
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	695b      	ldr	r3, [r3, #20]
 8007984:	617b      	str	r3, [r7, #20]
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	699b      	ldr	r3, [r3, #24]
 800798c:	617b      	str	r3, [r7, #20]
 800798e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8007990:	e138      	b.n	8007c04 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007996:	2b03      	cmp	r3, #3
 8007998:	f200 80f1 	bhi.w	8007b7e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079a0:	2b01      	cmp	r3, #1
 80079a2:	d123      	bne.n	80079ec <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80079a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079a6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80079a8:	68f8      	ldr	r0, [r7, #12]
 80079aa:	f000 fd49 	bl	8008440 <I2C_WaitOnRXNEFlagUntilTimeout>
 80079ae:	4603      	mov	r3, r0
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d001      	beq.n	80079b8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80079b4:	2301      	movs	r3, #1
 80079b6:	e139      	b.n	8007c2c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	691a      	ldr	r2, [r3, #16]
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079c2:	b2d2      	uxtb	r2, r2
 80079c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079ca:	1c5a      	adds	r2, r3, #1
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079d4:	3b01      	subs	r3, #1
 80079d6:	b29a      	uxth	r2, r3
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079e0:	b29b      	uxth	r3, r3
 80079e2:	3b01      	subs	r3, #1
 80079e4:	b29a      	uxth	r2, r3
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80079ea:	e10b      	b.n	8007c04 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079f0:	2b02      	cmp	r3, #2
 80079f2:	d14e      	bne.n	8007a92 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80079f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079f6:	9300      	str	r3, [sp, #0]
 80079f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079fa:	2200      	movs	r2, #0
 80079fc:	4906      	ldr	r1, [pc, #24]	; (8007a18 <HAL_I2C_Mem_Read+0x22c>)
 80079fe:	68f8      	ldr	r0, [r7, #12]
 8007a00:	f000 fbc6 	bl	8008190 <I2C_WaitOnFlagUntilTimeout>
 8007a04:	4603      	mov	r3, r0
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d008      	beq.n	8007a1c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8007a0a:	2301      	movs	r3, #1
 8007a0c:	e10e      	b.n	8007c2c <HAL_I2C_Mem_Read+0x440>
 8007a0e:	bf00      	nop
 8007a10:	00100002 	.word	0x00100002
 8007a14:	ffff0000 	.word	0xffff0000
 8007a18:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	681a      	ldr	r2, [r3, #0]
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007a2a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	691a      	ldr	r2, [r3, #16]
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a36:	b2d2      	uxtb	r2, r2
 8007a38:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a3e:	1c5a      	adds	r2, r3, #1
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a48:	3b01      	subs	r3, #1
 8007a4a:	b29a      	uxth	r2, r3
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a54:	b29b      	uxth	r3, r3
 8007a56:	3b01      	subs	r3, #1
 8007a58:	b29a      	uxth	r2, r3
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	691a      	ldr	r2, [r3, #16]
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a68:	b2d2      	uxtb	r2, r2
 8007a6a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a70:	1c5a      	adds	r2, r3, #1
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a7a:	3b01      	subs	r3, #1
 8007a7c:	b29a      	uxth	r2, r3
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a86:	b29b      	uxth	r3, r3
 8007a88:	3b01      	subs	r3, #1
 8007a8a:	b29a      	uxth	r2, r3
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007a90:	e0b8      	b.n	8007c04 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a94:	9300      	str	r3, [sp, #0]
 8007a96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a98:	2200      	movs	r2, #0
 8007a9a:	4966      	ldr	r1, [pc, #408]	; (8007c34 <HAL_I2C_Mem_Read+0x448>)
 8007a9c:	68f8      	ldr	r0, [r7, #12]
 8007a9e:	f000 fb77 	bl	8008190 <I2C_WaitOnFlagUntilTimeout>
 8007aa2:	4603      	mov	r3, r0
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d001      	beq.n	8007aac <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8007aa8:	2301      	movs	r3, #1
 8007aaa:	e0bf      	b.n	8007c2c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	681a      	ldr	r2, [r3, #0]
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007aba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	691a      	ldr	r2, [r3, #16]
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ac6:	b2d2      	uxtb	r2, r2
 8007ac8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ace:	1c5a      	adds	r2, r3, #1
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ad8:	3b01      	subs	r3, #1
 8007ada:	b29a      	uxth	r2, r3
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ae4:	b29b      	uxth	r3, r3
 8007ae6:	3b01      	subs	r3, #1
 8007ae8:	b29a      	uxth	r2, r3
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007af0:	9300      	str	r3, [sp, #0]
 8007af2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007af4:	2200      	movs	r2, #0
 8007af6:	494f      	ldr	r1, [pc, #316]	; (8007c34 <HAL_I2C_Mem_Read+0x448>)
 8007af8:	68f8      	ldr	r0, [r7, #12]
 8007afa:	f000 fb49 	bl	8008190 <I2C_WaitOnFlagUntilTimeout>
 8007afe:	4603      	mov	r3, r0
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d001      	beq.n	8007b08 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8007b04:	2301      	movs	r3, #1
 8007b06:	e091      	b.n	8007c2c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	681a      	ldr	r2, [r3, #0]
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007b16:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	691a      	ldr	r2, [r3, #16]
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b22:	b2d2      	uxtb	r2, r2
 8007b24:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b2a:	1c5a      	adds	r2, r3, #1
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b34:	3b01      	subs	r3, #1
 8007b36:	b29a      	uxth	r2, r3
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b40:	b29b      	uxth	r3, r3
 8007b42:	3b01      	subs	r3, #1
 8007b44:	b29a      	uxth	r2, r3
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	691a      	ldr	r2, [r3, #16]
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b54:	b2d2      	uxtb	r2, r2
 8007b56:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b5c:	1c5a      	adds	r2, r3, #1
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b66:	3b01      	subs	r3, #1
 8007b68:	b29a      	uxth	r2, r3
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b72:	b29b      	uxth	r3, r3
 8007b74:	3b01      	subs	r3, #1
 8007b76:	b29a      	uxth	r2, r3
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007b7c:	e042      	b.n	8007c04 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007b7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b80:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007b82:	68f8      	ldr	r0, [r7, #12]
 8007b84:	f000 fc5c 	bl	8008440 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007b88:	4603      	mov	r3, r0
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d001      	beq.n	8007b92 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8007b8e:	2301      	movs	r3, #1
 8007b90:	e04c      	b.n	8007c2c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	691a      	ldr	r2, [r3, #16]
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b9c:	b2d2      	uxtb	r2, r2
 8007b9e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ba4:	1c5a      	adds	r2, r3, #1
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007bae:	3b01      	subs	r3, #1
 8007bb0:	b29a      	uxth	r2, r3
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bba:	b29b      	uxth	r3, r3
 8007bbc:	3b01      	subs	r3, #1
 8007bbe:	b29a      	uxth	r2, r3
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	695b      	ldr	r3, [r3, #20]
 8007bca:	f003 0304 	and.w	r3, r3, #4
 8007bce:	2b04      	cmp	r3, #4
 8007bd0:	d118      	bne.n	8007c04 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	691a      	ldr	r2, [r3, #16]
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bdc:	b2d2      	uxtb	r2, r2
 8007bde:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007be4:	1c5a      	adds	r2, r3, #1
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007bee:	3b01      	subs	r3, #1
 8007bf0:	b29a      	uxth	r2, r3
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bfa:	b29b      	uxth	r3, r3
 8007bfc:	3b01      	subs	r3, #1
 8007bfe:	b29a      	uxth	r2, r3
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	f47f aec2 	bne.w	8007992 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	2220      	movs	r2, #32
 8007c12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	2200      	movs	r2, #0
 8007c1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	2200      	movs	r2, #0
 8007c22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007c26:	2300      	movs	r3, #0
 8007c28:	e000      	b.n	8007c2c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8007c2a:	2302      	movs	r3, #2
  }
}
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	3728      	adds	r7, #40	; 0x28
 8007c30:	46bd      	mov	sp, r7
 8007c32:	bd80      	pop	{r7, pc}
 8007c34:	00010004 	.word	0x00010004

08007c38 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b08a      	sub	sp, #40	; 0x28
 8007c3c:	af02      	add	r7, sp, #8
 8007c3e:	60f8      	str	r0, [r7, #12]
 8007c40:	607a      	str	r2, [r7, #4]
 8007c42:	603b      	str	r3, [r7, #0]
 8007c44:	460b      	mov	r3, r1
 8007c46:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8007c48:	f7fe fa04 	bl	8006054 <HAL_GetTick>
 8007c4c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8007c4e:	2300      	movs	r3, #0
 8007c50:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c58:	b2db      	uxtb	r3, r3
 8007c5a:	2b20      	cmp	r3, #32
 8007c5c:	f040 8111 	bne.w	8007e82 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007c60:	69fb      	ldr	r3, [r7, #28]
 8007c62:	9300      	str	r3, [sp, #0]
 8007c64:	2319      	movs	r3, #25
 8007c66:	2201      	movs	r2, #1
 8007c68:	4988      	ldr	r1, [pc, #544]	; (8007e8c <HAL_I2C_IsDeviceReady+0x254>)
 8007c6a:	68f8      	ldr	r0, [r7, #12]
 8007c6c:	f000 fa90 	bl	8008190 <I2C_WaitOnFlagUntilTimeout>
 8007c70:	4603      	mov	r3, r0
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d001      	beq.n	8007c7a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8007c76:	2302      	movs	r3, #2
 8007c78:	e104      	b.n	8007e84 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c80:	2b01      	cmp	r3, #1
 8007c82:	d101      	bne.n	8007c88 <HAL_I2C_IsDeviceReady+0x50>
 8007c84:	2302      	movs	r3, #2
 8007c86:	e0fd      	b.n	8007e84 <HAL_I2C_IsDeviceReady+0x24c>
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	2201      	movs	r2, #1
 8007c8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	f003 0301 	and.w	r3, r3, #1
 8007c9a:	2b01      	cmp	r3, #1
 8007c9c:	d007      	beq.n	8007cae <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	681a      	ldr	r2, [r3, #0]
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	f042 0201 	orr.w	r2, r2, #1
 8007cac:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	681a      	ldr	r2, [r3, #0]
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007cbc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	2224      	movs	r2, #36	; 0x24
 8007cc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	2200      	movs	r2, #0
 8007cca:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	4a70      	ldr	r2, [pc, #448]	; (8007e90 <HAL_I2C_IsDeviceReady+0x258>)
 8007cd0:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	681a      	ldr	r2, [r3, #0]
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007ce0:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8007ce2:	69fb      	ldr	r3, [r7, #28]
 8007ce4:	9300      	str	r3, [sp, #0]
 8007ce6:	683b      	ldr	r3, [r7, #0]
 8007ce8:	2200      	movs	r2, #0
 8007cea:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007cee:	68f8      	ldr	r0, [r7, #12]
 8007cf0:	f000 fa4e 	bl	8008190 <I2C_WaitOnFlagUntilTimeout>
 8007cf4:	4603      	mov	r3, r0
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d00d      	beq.n	8007d16 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d08:	d103      	bne.n	8007d12 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007d10:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8007d12:	2303      	movs	r3, #3
 8007d14:	e0b6      	b.n	8007e84 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007d16:	897b      	ldrh	r3, [r7, #10]
 8007d18:	b2db      	uxtb	r3, r3
 8007d1a:	461a      	mov	r2, r3
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007d24:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8007d26:	f7fe f995 	bl	8006054 <HAL_GetTick>
 8007d2a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	695b      	ldr	r3, [r3, #20]
 8007d32:	f003 0302 	and.w	r3, r3, #2
 8007d36:	2b02      	cmp	r3, #2
 8007d38:	bf0c      	ite	eq
 8007d3a:	2301      	moveq	r3, #1
 8007d3c:	2300      	movne	r3, #0
 8007d3e:	b2db      	uxtb	r3, r3
 8007d40:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	695b      	ldr	r3, [r3, #20]
 8007d48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007d4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d50:	bf0c      	ite	eq
 8007d52:	2301      	moveq	r3, #1
 8007d54:	2300      	movne	r3, #0
 8007d56:	b2db      	uxtb	r3, r3
 8007d58:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8007d5a:	e025      	b.n	8007da8 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007d5c:	f7fe f97a 	bl	8006054 <HAL_GetTick>
 8007d60:	4602      	mov	r2, r0
 8007d62:	69fb      	ldr	r3, [r7, #28]
 8007d64:	1ad3      	subs	r3, r2, r3
 8007d66:	683a      	ldr	r2, [r7, #0]
 8007d68:	429a      	cmp	r2, r3
 8007d6a:	d302      	bcc.n	8007d72 <HAL_I2C_IsDeviceReady+0x13a>
 8007d6c:	683b      	ldr	r3, [r7, #0]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d103      	bne.n	8007d7a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	22a0      	movs	r2, #160	; 0xa0
 8007d76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	695b      	ldr	r3, [r3, #20]
 8007d80:	f003 0302 	and.w	r3, r3, #2
 8007d84:	2b02      	cmp	r3, #2
 8007d86:	bf0c      	ite	eq
 8007d88:	2301      	moveq	r3, #1
 8007d8a:	2300      	movne	r3, #0
 8007d8c:	b2db      	uxtb	r3, r3
 8007d8e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	695b      	ldr	r3, [r3, #20]
 8007d96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007d9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d9e:	bf0c      	ite	eq
 8007da0:	2301      	moveq	r3, #1
 8007da2:	2300      	movne	r3, #0
 8007da4:	b2db      	uxtb	r3, r3
 8007da6:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007dae:	b2db      	uxtb	r3, r3
 8007db0:	2ba0      	cmp	r3, #160	; 0xa0
 8007db2:	d005      	beq.n	8007dc0 <HAL_I2C_IsDeviceReady+0x188>
 8007db4:	7dfb      	ldrb	r3, [r7, #23]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d102      	bne.n	8007dc0 <HAL_I2C_IsDeviceReady+0x188>
 8007dba:	7dbb      	ldrb	r3, [r7, #22]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d0cd      	beq.n	8007d5c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	2220      	movs	r2, #32
 8007dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	695b      	ldr	r3, [r3, #20]
 8007dce:	f003 0302 	and.w	r3, r3, #2
 8007dd2:	2b02      	cmp	r3, #2
 8007dd4:	d129      	bne.n	8007e2a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	681a      	ldr	r2, [r3, #0]
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007de4:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007de6:	2300      	movs	r3, #0
 8007de8:	613b      	str	r3, [r7, #16]
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	695b      	ldr	r3, [r3, #20]
 8007df0:	613b      	str	r3, [r7, #16]
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	699b      	ldr	r3, [r3, #24]
 8007df8:	613b      	str	r3, [r7, #16]
 8007dfa:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007dfc:	69fb      	ldr	r3, [r7, #28]
 8007dfe:	9300      	str	r3, [sp, #0]
 8007e00:	2319      	movs	r3, #25
 8007e02:	2201      	movs	r2, #1
 8007e04:	4921      	ldr	r1, [pc, #132]	; (8007e8c <HAL_I2C_IsDeviceReady+0x254>)
 8007e06:	68f8      	ldr	r0, [r7, #12]
 8007e08:	f000 f9c2 	bl	8008190 <I2C_WaitOnFlagUntilTimeout>
 8007e0c:	4603      	mov	r3, r0
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d001      	beq.n	8007e16 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8007e12:	2301      	movs	r3, #1
 8007e14:	e036      	b.n	8007e84 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	2220      	movs	r2, #32
 8007e1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	2200      	movs	r2, #0
 8007e22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8007e26:	2300      	movs	r3, #0
 8007e28:	e02c      	b.n	8007e84 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	681a      	ldr	r2, [r3, #0]
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007e38:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007e42:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007e44:	69fb      	ldr	r3, [r7, #28]
 8007e46:	9300      	str	r3, [sp, #0]
 8007e48:	2319      	movs	r3, #25
 8007e4a:	2201      	movs	r2, #1
 8007e4c:	490f      	ldr	r1, [pc, #60]	; (8007e8c <HAL_I2C_IsDeviceReady+0x254>)
 8007e4e:	68f8      	ldr	r0, [r7, #12]
 8007e50:	f000 f99e 	bl	8008190 <I2C_WaitOnFlagUntilTimeout>
 8007e54:	4603      	mov	r3, r0
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d001      	beq.n	8007e5e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8007e5a:	2301      	movs	r3, #1
 8007e5c:	e012      	b.n	8007e84 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8007e5e:	69bb      	ldr	r3, [r7, #24]
 8007e60:	3301      	adds	r3, #1
 8007e62:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8007e64:	69ba      	ldr	r2, [r7, #24]
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	429a      	cmp	r2, r3
 8007e6a:	f4ff af32 	bcc.w	8007cd2 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	2220      	movs	r2, #32
 8007e72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	2200      	movs	r2, #0
 8007e7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007e7e:	2301      	movs	r3, #1
 8007e80:	e000      	b.n	8007e84 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8007e82:	2302      	movs	r3, #2
  }
}
 8007e84:	4618      	mov	r0, r3
 8007e86:	3720      	adds	r7, #32
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	bd80      	pop	{r7, pc}
 8007e8c:	00100002 	.word	0x00100002
 8007e90:	ffff0000 	.word	0xffff0000

08007e94 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b088      	sub	sp, #32
 8007e98:	af02      	add	r7, sp, #8
 8007e9a:	60f8      	str	r0, [r7, #12]
 8007e9c:	4608      	mov	r0, r1
 8007e9e:	4611      	mov	r1, r2
 8007ea0:	461a      	mov	r2, r3
 8007ea2:	4603      	mov	r3, r0
 8007ea4:	817b      	strh	r3, [r7, #10]
 8007ea6:	460b      	mov	r3, r1
 8007ea8:	813b      	strh	r3, [r7, #8]
 8007eaa:	4613      	mov	r3, r2
 8007eac:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	681a      	ldr	r2, [r3, #0]
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007ebc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ec0:	9300      	str	r3, [sp, #0]
 8007ec2:	6a3b      	ldr	r3, [r7, #32]
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007eca:	68f8      	ldr	r0, [r7, #12]
 8007ecc:	f000 f960 	bl	8008190 <I2C_WaitOnFlagUntilTimeout>
 8007ed0:	4603      	mov	r3, r0
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d00d      	beq.n	8007ef2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ee0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ee4:	d103      	bne.n	8007eee <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007eec:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007eee:	2303      	movs	r3, #3
 8007ef0:	e05f      	b.n	8007fb2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007ef2:	897b      	ldrh	r3, [r7, #10]
 8007ef4:	b2db      	uxtb	r3, r3
 8007ef6:	461a      	mov	r2, r3
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007f00:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f04:	6a3a      	ldr	r2, [r7, #32]
 8007f06:	492d      	ldr	r1, [pc, #180]	; (8007fbc <I2C_RequestMemoryWrite+0x128>)
 8007f08:	68f8      	ldr	r0, [r7, #12]
 8007f0a:	f000 f998 	bl	800823e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007f0e:	4603      	mov	r3, r0
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d001      	beq.n	8007f18 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8007f14:	2301      	movs	r3, #1
 8007f16:	e04c      	b.n	8007fb2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007f18:	2300      	movs	r3, #0
 8007f1a:	617b      	str	r3, [r7, #20]
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	695b      	ldr	r3, [r3, #20]
 8007f22:	617b      	str	r3, [r7, #20]
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	699b      	ldr	r3, [r3, #24]
 8007f2a:	617b      	str	r3, [r7, #20]
 8007f2c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007f2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f30:	6a39      	ldr	r1, [r7, #32]
 8007f32:	68f8      	ldr	r0, [r7, #12]
 8007f34:	f000 fa02 	bl	800833c <I2C_WaitOnTXEFlagUntilTimeout>
 8007f38:	4603      	mov	r3, r0
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d00d      	beq.n	8007f5a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f42:	2b04      	cmp	r3, #4
 8007f44:	d107      	bne.n	8007f56 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	681a      	ldr	r2, [r3, #0]
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007f54:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007f56:	2301      	movs	r3, #1
 8007f58:	e02b      	b.n	8007fb2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007f5a:	88fb      	ldrh	r3, [r7, #6]
 8007f5c:	2b01      	cmp	r3, #1
 8007f5e:	d105      	bne.n	8007f6c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007f60:	893b      	ldrh	r3, [r7, #8]
 8007f62:	b2da      	uxtb	r2, r3
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	611a      	str	r2, [r3, #16]
 8007f6a:	e021      	b.n	8007fb0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007f6c:	893b      	ldrh	r3, [r7, #8]
 8007f6e:	0a1b      	lsrs	r3, r3, #8
 8007f70:	b29b      	uxth	r3, r3
 8007f72:	b2da      	uxtb	r2, r3
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007f7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f7c:	6a39      	ldr	r1, [r7, #32]
 8007f7e:	68f8      	ldr	r0, [r7, #12]
 8007f80:	f000 f9dc 	bl	800833c <I2C_WaitOnTXEFlagUntilTimeout>
 8007f84:	4603      	mov	r3, r0
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d00d      	beq.n	8007fa6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f8e:	2b04      	cmp	r3, #4
 8007f90:	d107      	bne.n	8007fa2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	681a      	ldr	r2, [r3, #0]
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007fa0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007fa2:	2301      	movs	r3, #1
 8007fa4:	e005      	b.n	8007fb2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007fa6:	893b      	ldrh	r3, [r7, #8]
 8007fa8:	b2da      	uxtb	r2, r3
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8007fb0:	2300      	movs	r3, #0
}
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	3718      	adds	r7, #24
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	bd80      	pop	{r7, pc}
 8007fba:	bf00      	nop
 8007fbc:	00010002 	.word	0x00010002

08007fc0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b088      	sub	sp, #32
 8007fc4:	af02      	add	r7, sp, #8
 8007fc6:	60f8      	str	r0, [r7, #12]
 8007fc8:	4608      	mov	r0, r1
 8007fca:	4611      	mov	r1, r2
 8007fcc:	461a      	mov	r2, r3
 8007fce:	4603      	mov	r3, r0
 8007fd0:	817b      	strh	r3, [r7, #10]
 8007fd2:	460b      	mov	r3, r1
 8007fd4:	813b      	strh	r3, [r7, #8]
 8007fd6:	4613      	mov	r3, r2
 8007fd8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	681a      	ldr	r2, [r3, #0]
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007fe8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	681a      	ldr	r2, [r3, #0]
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007ff8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ffc:	9300      	str	r3, [sp, #0]
 8007ffe:	6a3b      	ldr	r3, [r7, #32]
 8008000:	2200      	movs	r2, #0
 8008002:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008006:	68f8      	ldr	r0, [r7, #12]
 8008008:	f000 f8c2 	bl	8008190 <I2C_WaitOnFlagUntilTimeout>
 800800c:	4603      	mov	r3, r0
 800800e:	2b00      	cmp	r3, #0
 8008010:	d00d      	beq.n	800802e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800801c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008020:	d103      	bne.n	800802a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008028:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800802a:	2303      	movs	r3, #3
 800802c:	e0aa      	b.n	8008184 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800802e:	897b      	ldrh	r3, [r7, #10]
 8008030:	b2db      	uxtb	r3, r3
 8008032:	461a      	mov	r2, r3
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800803c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800803e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008040:	6a3a      	ldr	r2, [r7, #32]
 8008042:	4952      	ldr	r1, [pc, #328]	; (800818c <I2C_RequestMemoryRead+0x1cc>)
 8008044:	68f8      	ldr	r0, [r7, #12]
 8008046:	f000 f8fa 	bl	800823e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800804a:	4603      	mov	r3, r0
 800804c:	2b00      	cmp	r3, #0
 800804e:	d001      	beq.n	8008054 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8008050:	2301      	movs	r3, #1
 8008052:	e097      	b.n	8008184 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008054:	2300      	movs	r3, #0
 8008056:	617b      	str	r3, [r7, #20]
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	695b      	ldr	r3, [r3, #20]
 800805e:	617b      	str	r3, [r7, #20]
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	699b      	ldr	r3, [r3, #24]
 8008066:	617b      	str	r3, [r7, #20]
 8008068:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800806a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800806c:	6a39      	ldr	r1, [r7, #32]
 800806e:	68f8      	ldr	r0, [r7, #12]
 8008070:	f000 f964 	bl	800833c <I2C_WaitOnTXEFlagUntilTimeout>
 8008074:	4603      	mov	r3, r0
 8008076:	2b00      	cmp	r3, #0
 8008078:	d00d      	beq.n	8008096 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800807e:	2b04      	cmp	r3, #4
 8008080:	d107      	bne.n	8008092 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	681a      	ldr	r2, [r3, #0]
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008090:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008092:	2301      	movs	r3, #1
 8008094:	e076      	b.n	8008184 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008096:	88fb      	ldrh	r3, [r7, #6]
 8008098:	2b01      	cmp	r3, #1
 800809a:	d105      	bne.n	80080a8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800809c:	893b      	ldrh	r3, [r7, #8]
 800809e:	b2da      	uxtb	r2, r3
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	611a      	str	r2, [r3, #16]
 80080a6:	e021      	b.n	80080ec <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80080a8:	893b      	ldrh	r3, [r7, #8]
 80080aa:	0a1b      	lsrs	r3, r3, #8
 80080ac:	b29b      	uxth	r3, r3
 80080ae:	b2da      	uxtb	r2, r3
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80080b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080b8:	6a39      	ldr	r1, [r7, #32]
 80080ba:	68f8      	ldr	r0, [r7, #12]
 80080bc:	f000 f93e 	bl	800833c <I2C_WaitOnTXEFlagUntilTimeout>
 80080c0:	4603      	mov	r3, r0
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d00d      	beq.n	80080e2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080ca:	2b04      	cmp	r3, #4
 80080cc:	d107      	bne.n	80080de <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	681a      	ldr	r2, [r3, #0]
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80080dc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80080de:	2301      	movs	r3, #1
 80080e0:	e050      	b.n	8008184 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80080e2:	893b      	ldrh	r3, [r7, #8]
 80080e4:	b2da      	uxtb	r2, r3
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80080ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080ee:	6a39      	ldr	r1, [r7, #32]
 80080f0:	68f8      	ldr	r0, [r7, #12]
 80080f2:	f000 f923 	bl	800833c <I2C_WaitOnTXEFlagUntilTimeout>
 80080f6:	4603      	mov	r3, r0
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d00d      	beq.n	8008118 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008100:	2b04      	cmp	r3, #4
 8008102:	d107      	bne.n	8008114 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	681a      	ldr	r2, [r3, #0]
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008112:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008114:	2301      	movs	r3, #1
 8008116:	e035      	b.n	8008184 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	681a      	ldr	r2, [r3, #0]
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008126:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800812a:	9300      	str	r3, [sp, #0]
 800812c:	6a3b      	ldr	r3, [r7, #32]
 800812e:	2200      	movs	r2, #0
 8008130:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008134:	68f8      	ldr	r0, [r7, #12]
 8008136:	f000 f82b 	bl	8008190 <I2C_WaitOnFlagUntilTimeout>
 800813a:	4603      	mov	r3, r0
 800813c:	2b00      	cmp	r3, #0
 800813e:	d00d      	beq.n	800815c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800814a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800814e:	d103      	bne.n	8008158 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008156:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008158:	2303      	movs	r3, #3
 800815a:	e013      	b.n	8008184 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800815c:	897b      	ldrh	r3, [r7, #10]
 800815e:	b2db      	uxtb	r3, r3
 8008160:	f043 0301 	orr.w	r3, r3, #1
 8008164:	b2da      	uxtb	r2, r3
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800816c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800816e:	6a3a      	ldr	r2, [r7, #32]
 8008170:	4906      	ldr	r1, [pc, #24]	; (800818c <I2C_RequestMemoryRead+0x1cc>)
 8008172:	68f8      	ldr	r0, [r7, #12]
 8008174:	f000 f863 	bl	800823e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008178:	4603      	mov	r3, r0
 800817a:	2b00      	cmp	r3, #0
 800817c:	d001      	beq.n	8008182 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800817e:	2301      	movs	r3, #1
 8008180:	e000      	b.n	8008184 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8008182:	2300      	movs	r3, #0
}
 8008184:	4618      	mov	r0, r3
 8008186:	3718      	adds	r7, #24
 8008188:	46bd      	mov	sp, r7
 800818a:	bd80      	pop	{r7, pc}
 800818c:	00010002 	.word	0x00010002

08008190 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8008190:	b580      	push	{r7, lr}
 8008192:	b084      	sub	sp, #16
 8008194:	af00      	add	r7, sp, #0
 8008196:	60f8      	str	r0, [r7, #12]
 8008198:	60b9      	str	r1, [r7, #8]
 800819a:	603b      	str	r3, [r7, #0]
 800819c:	4613      	mov	r3, r2
 800819e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80081a0:	e025      	b.n	80081ee <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80081a2:	683b      	ldr	r3, [r7, #0]
 80081a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081a8:	d021      	beq.n	80081ee <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80081aa:	f7fd ff53 	bl	8006054 <HAL_GetTick>
 80081ae:	4602      	mov	r2, r0
 80081b0:	69bb      	ldr	r3, [r7, #24]
 80081b2:	1ad3      	subs	r3, r2, r3
 80081b4:	683a      	ldr	r2, [r7, #0]
 80081b6:	429a      	cmp	r2, r3
 80081b8:	d302      	bcc.n	80081c0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80081ba:	683b      	ldr	r3, [r7, #0]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d116      	bne.n	80081ee <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	2200      	movs	r2, #0
 80081c4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	2220      	movs	r2, #32
 80081ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	2200      	movs	r2, #0
 80081d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081da:	f043 0220 	orr.w	r2, r3, #32
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	2200      	movs	r2, #0
 80081e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80081ea:	2301      	movs	r3, #1
 80081ec:	e023      	b.n	8008236 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80081ee:	68bb      	ldr	r3, [r7, #8]
 80081f0:	0c1b      	lsrs	r3, r3, #16
 80081f2:	b2db      	uxtb	r3, r3
 80081f4:	2b01      	cmp	r3, #1
 80081f6:	d10d      	bne.n	8008214 <I2C_WaitOnFlagUntilTimeout+0x84>
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	695b      	ldr	r3, [r3, #20]
 80081fe:	43da      	mvns	r2, r3
 8008200:	68bb      	ldr	r3, [r7, #8]
 8008202:	4013      	ands	r3, r2
 8008204:	b29b      	uxth	r3, r3
 8008206:	2b00      	cmp	r3, #0
 8008208:	bf0c      	ite	eq
 800820a:	2301      	moveq	r3, #1
 800820c:	2300      	movne	r3, #0
 800820e:	b2db      	uxtb	r3, r3
 8008210:	461a      	mov	r2, r3
 8008212:	e00c      	b.n	800822e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	699b      	ldr	r3, [r3, #24]
 800821a:	43da      	mvns	r2, r3
 800821c:	68bb      	ldr	r3, [r7, #8]
 800821e:	4013      	ands	r3, r2
 8008220:	b29b      	uxth	r3, r3
 8008222:	2b00      	cmp	r3, #0
 8008224:	bf0c      	ite	eq
 8008226:	2301      	moveq	r3, #1
 8008228:	2300      	movne	r3, #0
 800822a:	b2db      	uxtb	r3, r3
 800822c:	461a      	mov	r2, r3
 800822e:	79fb      	ldrb	r3, [r7, #7]
 8008230:	429a      	cmp	r2, r3
 8008232:	d0b6      	beq.n	80081a2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008234:	2300      	movs	r3, #0
}
 8008236:	4618      	mov	r0, r3
 8008238:	3710      	adds	r7, #16
 800823a:	46bd      	mov	sp, r7
 800823c:	bd80      	pop	{r7, pc}

0800823e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800823e:	b580      	push	{r7, lr}
 8008240:	b084      	sub	sp, #16
 8008242:	af00      	add	r7, sp, #0
 8008244:	60f8      	str	r0, [r7, #12]
 8008246:	60b9      	str	r1, [r7, #8]
 8008248:	607a      	str	r2, [r7, #4]
 800824a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800824c:	e051      	b.n	80082f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	695b      	ldr	r3, [r3, #20]
 8008254:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008258:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800825c:	d123      	bne.n	80082a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	681a      	ldr	r2, [r3, #0]
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800826c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008276:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	2200      	movs	r2, #0
 800827c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	2220      	movs	r2, #32
 8008282:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	2200      	movs	r2, #0
 800828a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008292:	f043 0204 	orr.w	r2, r3, #4
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	2200      	movs	r2, #0
 800829e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80082a2:	2301      	movs	r3, #1
 80082a4:	e046      	b.n	8008334 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082ac:	d021      	beq.n	80082f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80082ae:	f7fd fed1 	bl	8006054 <HAL_GetTick>
 80082b2:	4602      	mov	r2, r0
 80082b4:	683b      	ldr	r3, [r7, #0]
 80082b6:	1ad3      	subs	r3, r2, r3
 80082b8:	687a      	ldr	r2, [r7, #4]
 80082ba:	429a      	cmp	r2, r3
 80082bc:	d302      	bcc.n	80082c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d116      	bne.n	80082f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	2200      	movs	r2, #0
 80082c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	2220      	movs	r2, #32
 80082ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	2200      	movs	r2, #0
 80082d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082de:	f043 0220 	orr.w	r2, r3, #32
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	2200      	movs	r2, #0
 80082ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80082ee:	2301      	movs	r3, #1
 80082f0:	e020      	b.n	8008334 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80082f2:	68bb      	ldr	r3, [r7, #8]
 80082f4:	0c1b      	lsrs	r3, r3, #16
 80082f6:	b2db      	uxtb	r3, r3
 80082f8:	2b01      	cmp	r3, #1
 80082fa:	d10c      	bne.n	8008316 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	695b      	ldr	r3, [r3, #20]
 8008302:	43da      	mvns	r2, r3
 8008304:	68bb      	ldr	r3, [r7, #8]
 8008306:	4013      	ands	r3, r2
 8008308:	b29b      	uxth	r3, r3
 800830a:	2b00      	cmp	r3, #0
 800830c:	bf14      	ite	ne
 800830e:	2301      	movne	r3, #1
 8008310:	2300      	moveq	r3, #0
 8008312:	b2db      	uxtb	r3, r3
 8008314:	e00b      	b.n	800832e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	699b      	ldr	r3, [r3, #24]
 800831c:	43da      	mvns	r2, r3
 800831e:	68bb      	ldr	r3, [r7, #8]
 8008320:	4013      	ands	r3, r2
 8008322:	b29b      	uxth	r3, r3
 8008324:	2b00      	cmp	r3, #0
 8008326:	bf14      	ite	ne
 8008328:	2301      	movne	r3, #1
 800832a:	2300      	moveq	r3, #0
 800832c:	b2db      	uxtb	r3, r3
 800832e:	2b00      	cmp	r3, #0
 8008330:	d18d      	bne.n	800824e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8008332:	2300      	movs	r3, #0
}
 8008334:	4618      	mov	r0, r3
 8008336:	3710      	adds	r7, #16
 8008338:	46bd      	mov	sp, r7
 800833a:	bd80      	pop	{r7, pc}

0800833c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800833c:	b580      	push	{r7, lr}
 800833e:	b084      	sub	sp, #16
 8008340:	af00      	add	r7, sp, #0
 8008342:	60f8      	str	r0, [r7, #12]
 8008344:	60b9      	str	r1, [r7, #8]
 8008346:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008348:	e02d      	b.n	80083a6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800834a:	68f8      	ldr	r0, [r7, #12]
 800834c:	f000 f8ce 	bl	80084ec <I2C_IsAcknowledgeFailed>
 8008350:	4603      	mov	r3, r0
 8008352:	2b00      	cmp	r3, #0
 8008354:	d001      	beq.n	800835a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008356:	2301      	movs	r3, #1
 8008358:	e02d      	b.n	80083b6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800835a:	68bb      	ldr	r3, [r7, #8]
 800835c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008360:	d021      	beq.n	80083a6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008362:	f7fd fe77 	bl	8006054 <HAL_GetTick>
 8008366:	4602      	mov	r2, r0
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	1ad3      	subs	r3, r2, r3
 800836c:	68ba      	ldr	r2, [r7, #8]
 800836e:	429a      	cmp	r2, r3
 8008370:	d302      	bcc.n	8008378 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8008372:	68bb      	ldr	r3, [r7, #8]
 8008374:	2b00      	cmp	r3, #0
 8008376:	d116      	bne.n	80083a6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	2200      	movs	r2, #0
 800837c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	2220      	movs	r2, #32
 8008382:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	2200      	movs	r2, #0
 800838a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008392:	f043 0220 	orr.w	r2, r3, #32
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	2200      	movs	r2, #0
 800839e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80083a2:	2301      	movs	r3, #1
 80083a4:	e007      	b.n	80083b6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	695b      	ldr	r3, [r3, #20]
 80083ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083b0:	2b80      	cmp	r3, #128	; 0x80
 80083b2:	d1ca      	bne.n	800834a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80083b4:	2300      	movs	r3, #0
}
 80083b6:	4618      	mov	r0, r3
 80083b8:	3710      	adds	r7, #16
 80083ba:	46bd      	mov	sp, r7
 80083bc:	bd80      	pop	{r7, pc}

080083be <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80083be:	b580      	push	{r7, lr}
 80083c0:	b084      	sub	sp, #16
 80083c2:	af00      	add	r7, sp, #0
 80083c4:	60f8      	str	r0, [r7, #12]
 80083c6:	60b9      	str	r1, [r7, #8]
 80083c8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80083ca:	e02d      	b.n	8008428 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80083cc:	68f8      	ldr	r0, [r7, #12]
 80083ce:	f000 f88d 	bl	80084ec <I2C_IsAcknowledgeFailed>
 80083d2:	4603      	mov	r3, r0
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d001      	beq.n	80083dc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80083d8:	2301      	movs	r3, #1
 80083da:	e02d      	b.n	8008438 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80083dc:	68bb      	ldr	r3, [r7, #8]
 80083de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083e2:	d021      	beq.n	8008428 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80083e4:	f7fd fe36 	bl	8006054 <HAL_GetTick>
 80083e8:	4602      	mov	r2, r0
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	1ad3      	subs	r3, r2, r3
 80083ee:	68ba      	ldr	r2, [r7, #8]
 80083f0:	429a      	cmp	r2, r3
 80083f2:	d302      	bcc.n	80083fa <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80083f4:	68bb      	ldr	r3, [r7, #8]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d116      	bne.n	8008428 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	2200      	movs	r2, #0
 80083fe:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	2220      	movs	r2, #32
 8008404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	2200      	movs	r2, #0
 800840c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008414:	f043 0220 	orr.w	r2, r3, #32
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	2200      	movs	r2, #0
 8008420:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008424:	2301      	movs	r3, #1
 8008426:	e007      	b.n	8008438 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	695b      	ldr	r3, [r3, #20]
 800842e:	f003 0304 	and.w	r3, r3, #4
 8008432:	2b04      	cmp	r3, #4
 8008434:	d1ca      	bne.n	80083cc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008436:	2300      	movs	r3, #0
}
 8008438:	4618      	mov	r0, r3
 800843a:	3710      	adds	r7, #16
 800843c:	46bd      	mov	sp, r7
 800843e:	bd80      	pop	{r7, pc}

08008440 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008440:	b580      	push	{r7, lr}
 8008442:	b084      	sub	sp, #16
 8008444:	af00      	add	r7, sp, #0
 8008446:	60f8      	str	r0, [r7, #12]
 8008448:	60b9      	str	r1, [r7, #8]
 800844a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800844c:	e042      	b.n	80084d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	695b      	ldr	r3, [r3, #20]
 8008454:	f003 0310 	and.w	r3, r3, #16
 8008458:	2b10      	cmp	r3, #16
 800845a:	d119      	bne.n	8008490 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	f06f 0210 	mvn.w	r2, #16
 8008464:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	2200      	movs	r2, #0
 800846a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	2220      	movs	r2, #32
 8008470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	2200      	movs	r2, #0
 8008478:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	2200      	movs	r2, #0
 8008488:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800848c:	2301      	movs	r3, #1
 800848e:	e029      	b.n	80084e4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008490:	f7fd fde0 	bl	8006054 <HAL_GetTick>
 8008494:	4602      	mov	r2, r0
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	1ad3      	subs	r3, r2, r3
 800849a:	68ba      	ldr	r2, [r7, #8]
 800849c:	429a      	cmp	r2, r3
 800849e:	d302      	bcc.n	80084a6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80084a0:	68bb      	ldr	r3, [r7, #8]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d116      	bne.n	80084d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	2200      	movs	r2, #0
 80084aa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	2220      	movs	r2, #32
 80084b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	2200      	movs	r2, #0
 80084b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084c0:	f043 0220 	orr.w	r2, r3, #32
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	2200      	movs	r2, #0
 80084cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80084d0:	2301      	movs	r3, #1
 80084d2:	e007      	b.n	80084e4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	695b      	ldr	r3, [r3, #20]
 80084da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084de:	2b40      	cmp	r3, #64	; 0x40
 80084e0:	d1b5      	bne.n	800844e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80084e2:	2300      	movs	r3, #0
}
 80084e4:	4618      	mov	r0, r3
 80084e6:	3710      	adds	r7, #16
 80084e8:	46bd      	mov	sp, r7
 80084ea:	bd80      	pop	{r7, pc}

080084ec <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80084ec:	b480      	push	{r7}
 80084ee:	b083      	sub	sp, #12
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	695b      	ldr	r3, [r3, #20]
 80084fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80084fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008502:	d11b      	bne.n	800853c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800850c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	2200      	movs	r2, #0
 8008512:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	2220      	movs	r2, #32
 8008518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	2200      	movs	r2, #0
 8008520:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008528:	f043 0204 	orr.w	r2, r3, #4
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	2200      	movs	r2, #0
 8008534:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8008538:	2301      	movs	r3, #1
 800853a:	e000      	b.n	800853e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800853c:	2300      	movs	r3, #0
}
 800853e:	4618      	mov	r0, r3
 8008540:	370c      	adds	r7, #12
 8008542:	46bd      	mov	sp, r7
 8008544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008548:	4770      	bx	lr
	...

0800854c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800854c:	b580      	push	{r7, lr}
 800854e:	b086      	sub	sp, #24
 8008550:	af00      	add	r7, sp, #0
 8008552:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d101      	bne.n	800855e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800855a:	2301      	movs	r3, #1
 800855c:	e267      	b.n	8008a2e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	f003 0301 	and.w	r3, r3, #1
 8008566:	2b00      	cmp	r3, #0
 8008568:	d075      	beq.n	8008656 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800856a:	4b88      	ldr	r3, [pc, #544]	; (800878c <HAL_RCC_OscConfig+0x240>)
 800856c:	689b      	ldr	r3, [r3, #8]
 800856e:	f003 030c 	and.w	r3, r3, #12
 8008572:	2b04      	cmp	r3, #4
 8008574:	d00c      	beq.n	8008590 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008576:	4b85      	ldr	r3, [pc, #532]	; (800878c <HAL_RCC_OscConfig+0x240>)
 8008578:	689b      	ldr	r3, [r3, #8]
 800857a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800857e:	2b08      	cmp	r3, #8
 8008580:	d112      	bne.n	80085a8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008582:	4b82      	ldr	r3, [pc, #520]	; (800878c <HAL_RCC_OscConfig+0x240>)
 8008584:	685b      	ldr	r3, [r3, #4]
 8008586:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800858a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800858e:	d10b      	bne.n	80085a8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008590:	4b7e      	ldr	r3, [pc, #504]	; (800878c <HAL_RCC_OscConfig+0x240>)
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008598:	2b00      	cmp	r3, #0
 800859a:	d05b      	beq.n	8008654 <HAL_RCC_OscConfig+0x108>
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	685b      	ldr	r3, [r3, #4]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d157      	bne.n	8008654 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80085a4:	2301      	movs	r3, #1
 80085a6:	e242      	b.n	8008a2e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	685b      	ldr	r3, [r3, #4]
 80085ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80085b0:	d106      	bne.n	80085c0 <HAL_RCC_OscConfig+0x74>
 80085b2:	4b76      	ldr	r3, [pc, #472]	; (800878c <HAL_RCC_OscConfig+0x240>)
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	4a75      	ldr	r2, [pc, #468]	; (800878c <HAL_RCC_OscConfig+0x240>)
 80085b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80085bc:	6013      	str	r3, [r2, #0]
 80085be:	e01d      	b.n	80085fc <HAL_RCC_OscConfig+0xb0>
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	685b      	ldr	r3, [r3, #4]
 80085c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80085c8:	d10c      	bne.n	80085e4 <HAL_RCC_OscConfig+0x98>
 80085ca:	4b70      	ldr	r3, [pc, #448]	; (800878c <HAL_RCC_OscConfig+0x240>)
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	4a6f      	ldr	r2, [pc, #444]	; (800878c <HAL_RCC_OscConfig+0x240>)
 80085d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80085d4:	6013      	str	r3, [r2, #0]
 80085d6:	4b6d      	ldr	r3, [pc, #436]	; (800878c <HAL_RCC_OscConfig+0x240>)
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	4a6c      	ldr	r2, [pc, #432]	; (800878c <HAL_RCC_OscConfig+0x240>)
 80085dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80085e0:	6013      	str	r3, [r2, #0]
 80085e2:	e00b      	b.n	80085fc <HAL_RCC_OscConfig+0xb0>
 80085e4:	4b69      	ldr	r3, [pc, #420]	; (800878c <HAL_RCC_OscConfig+0x240>)
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	4a68      	ldr	r2, [pc, #416]	; (800878c <HAL_RCC_OscConfig+0x240>)
 80085ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80085ee:	6013      	str	r3, [r2, #0]
 80085f0:	4b66      	ldr	r3, [pc, #408]	; (800878c <HAL_RCC_OscConfig+0x240>)
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	4a65      	ldr	r2, [pc, #404]	; (800878c <HAL_RCC_OscConfig+0x240>)
 80085f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80085fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	685b      	ldr	r3, [r3, #4]
 8008600:	2b00      	cmp	r3, #0
 8008602:	d013      	beq.n	800862c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008604:	f7fd fd26 	bl	8006054 <HAL_GetTick>
 8008608:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800860a:	e008      	b.n	800861e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800860c:	f7fd fd22 	bl	8006054 <HAL_GetTick>
 8008610:	4602      	mov	r2, r0
 8008612:	693b      	ldr	r3, [r7, #16]
 8008614:	1ad3      	subs	r3, r2, r3
 8008616:	2b64      	cmp	r3, #100	; 0x64
 8008618:	d901      	bls.n	800861e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800861a:	2303      	movs	r3, #3
 800861c:	e207      	b.n	8008a2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800861e:	4b5b      	ldr	r3, [pc, #364]	; (800878c <HAL_RCC_OscConfig+0x240>)
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008626:	2b00      	cmp	r3, #0
 8008628:	d0f0      	beq.n	800860c <HAL_RCC_OscConfig+0xc0>
 800862a:	e014      	b.n	8008656 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800862c:	f7fd fd12 	bl	8006054 <HAL_GetTick>
 8008630:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008632:	e008      	b.n	8008646 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008634:	f7fd fd0e 	bl	8006054 <HAL_GetTick>
 8008638:	4602      	mov	r2, r0
 800863a:	693b      	ldr	r3, [r7, #16]
 800863c:	1ad3      	subs	r3, r2, r3
 800863e:	2b64      	cmp	r3, #100	; 0x64
 8008640:	d901      	bls.n	8008646 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008642:	2303      	movs	r3, #3
 8008644:	e1f3      	b.n	8008a2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008646:	4b51      	ldr	r3, [pc, #324]	; (800878c <HAL_RCC_OscConfig+0x240>)
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800864e:	2b00      	cmp	r3, #0
 8008650:	d1f0      	bne.n	8008634 <HAL_RCC_OscConfig+0xe8>
 8008652:	e000      	b.n	8008656 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008654:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	f003 0302 	and.w	r3, r3, #2
 800865e:	2b00      	cmp	r3, #0
 8008660:	d063      	beq.n	800872a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008662:	4b4a      	ldr	r3, [pc, #296]	; (800878c <HAL_RCC_OscConfig+0x240>)
 8008664:	689b      	ldr	r3, [r3, #8]
 8008666:	f003 030c 	and.w	r3, r3, #12
 800866a:	2b00      	cmp	r3, #0
 800866c:	d00b      	beq.n	8008686 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800866e:	4b47      	ldr	r3, [pc, #284]	; (800878c <HAL_RCC_OscConfig+0x240>)
 8008670:	689b      	ldr	r3, [r3, #8]
 8008672:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008676:	2b08      	cmp	r3, #8
 8008678:	d11c      	bne.n	80086b4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800867a:	4b44      	ldr	r3, [pc, #272]	; (800878c <HAL_RCC_OscConfig+0x240>)
 800867c:	685b      	ldr	r3, [r3, #4]
 800867e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008682:	2b00      	cmp	r3, #0
 8008684:	d116      	bne.n	80086b4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008686:	4b41      	ldr	r3, [pc, #260]	; (800878c <HAL_RCC_OscConfig+0x240>)
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	f003 0302 	and.w	r3, r3, #2
 800868e:	2b00      	cmp	r3, #0
 8008690:	d005      	beq.n	800869e <HAL_RCC_OscConfig+0x152>
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	68db      	ldr	r3, [r3, #12]
 8008696:	2b01      	cmp	r3, #1
 8008698:	d001      	beq.n	800869e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800869a:	2301      	movs	r3, #1
 800869c:	e1c7      	b.n	8008a2e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800869e:	4b3b      	ldr	r3, [pc, #236]	; (800878c <HAL_RCC_OscConfig+0x240>)
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	691b      	ldr	r3, [r3, #16]
 80086aa:	00db      	lsls	r3, r3, #3
 80086ac:	4937      	ldr	r1, [pc, #220]	; (800878c <HAL_RCC_OscConfig+0x240>)
 80086ae:	4313      	orrs	r3, r2
 80086b0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80086b2:	e03a      	b.n	800872a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	68db      	ldr	r3, [r3, #12]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d020      	beq.n	80086fe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80086bc:	4b34      	ldr	r3, [pc, #208]	; (8008790 <HAL_RCC_OscConfig+0x244>)
 80086be:	2201      	movs	r2, #1
 80086c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086c2:	f7fd fcc7 	bl	8006054 <HAL_GetTick>
 80086c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80086c8:	e008      	b.n	80086dc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80086ca:	f7fd fcc3 	bl	8006054 <HAL_GetTick>
 80086ce:	4602      	mov	r2, r0
 80086d0:	693b      	ldr	r3, [r7, #16]
 80086d2:	1ad3      	subs	r3, r2, r3
 80086d4:	2b02      	cmp	r3, #2
 80086d6:	d901      	bls.n	80086dc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80086d8:	2303      	movs	r3, #3
 80086da:	e1a8      	b.n	8008a2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80086dc:	4b2b      	ldr	r3, [pc, #172]	; (800878c <HAL_RCC_OscConfig+0x240>)
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	f003 0302 	and.w	r3, r3, #2
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d0f0      	beq.n	80086ca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80086e8:	4b28      	ldr	r3, [pc, #160]	; (800878c <HAL_RCC_OscConfig+0x240>)
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	691b      	ldr	r3, [r3, #16]
 80086f4:	00db      	lsls	r3, r3, #3
 80086f6:	4925      	ldr	r1, [pc, #148]	; (800878c <HAL_RCC_OscConfig+0x240>)
 80086f8:	4313      	orrs	r3, r2
 80086fa:	600b      	str	r3, [r1, #0]
 80086fc:	e015      	b.n	800872a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80086fe:	4b24      	ldr	r3, [pc, #144]	; (8008790 <HAL_RCC_OscConfig+0x244>)
 8008700:	2200      	movs	r2, #0
 8008702:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008704:	f7fd fca6 	bl	8006054 <HAL_GetTick>
 8008708:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800870a:	e008      	b.n	800871e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800870c:	f7fd fca2 	bl	8006054 <HAL_GetTick>
 8008710:	4602      	mov	r2, r0
 8008712:	693b      	ldr	r3, [r7, #16]
 8008714:	1ad3      	subs	r3, r2, r3
 8008716:	2b02      	cmp	r3, #2
 8008718:	d901      	bls.n	800871e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800871a:	2303      	movs	r3, #3
 800871c:	e187      	b.n	8008a2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800871e:	4b1b      	ldr	r3, [pc, #108]	; (800878c <HAL_RCC_OscConfig+0x240>)
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	f003 0302 	and.w	r3, r3, #2
 8008726:	2b00      	cmp	r3, #0
 8008728:	d1f0      	bne.n	800870c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	f003 0308 	and.w	r3, r3, #8
 8008732:	2b00      	cmp	r3, #0
 8008734:	d036      	beq.n	80087a4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	695b      	ldr	r3, [r3, #20]
 800873a:	2b00      	cmp	r3, #0
 800873c:	d016      	beq.n	800876c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800873e:	4b15      	ldr	r3, [pc, #84]	; (8008794 <HAL_RCC_OscConfig+0x248>)
 8008740:	2201      	movs	r2, #1
 8008742:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008744:	f7fd fc86 	bl	8006054 <HAL_GetTick>
 8008748:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800874a:	e008      	b.n	800875e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800874c:	f7fd fc82 	bl	8006054 <HAL_GetTick>
 8008750:	4602      	mov	r2, r0
 8008752:	693b      	ldr	r3, [r7, #16]
 8008754:	1ad3      	subs	r3, r2, r3
 8008756:	2b02      	cmp	r3, #2
 8008758:	d901      	bls.n	800875e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800875a:	2303      	movs	r3, #3
 800875c:	e167      	b.n	8008a2e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800875e:	4b0b      	ldr	r3, [pc, #44]	; (800878c <HAL_RCC_OscConfig+0x240>)
 8008760:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008762:	f003 0302 	and.w	r3, r3, #2
 8008766:	2b00      	cmp	r3, #0
 8008768:	d0f0      	beq.n	800874c <HAL_RCC_OscConfig+0x200>
 800876a:	e01b      	b.n	80087a4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800876c:	4b09      	ldr	r3, [pc, #36]	; (8008794 <HAL_RCC_OscConfig+0x248>)
 800876e:	2200      	movs	r2, #0
 8008770:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008772:	f7fd fc6f 	bl	8006054 <HAL_GetTick>
 8008776:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008778:	e00e      	b.n	8008798 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800877a:	f7fd fc6b 	bl	8006054 <HAL_GetTick>
 800877e:	4602      	mov	r2, r0
 8008780:	693b      	ldr	r3, [r7, #16]
 8008782:	1ad3      	subs	r3, r2, r3
 8008784:	2b02      	cmp	r3, #2
 8008786:	d907      	bls.n	8008798 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008788:	2303      	movs	r3, #3
 800878a:	e150      	b.n	8008a2e <HAL_RCC_OscConfig+0x4e2>
 800878c:	40023800 	.word	0x40023800
 8008790:	42470000 	.word	0x42470000
 8008794:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008798:	4b88      	ldr	r3, [pc, #544]	; (80089bc <HAL_RCC_OscConfig+0x470>)
 800879a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800879c:	f003 0302 	and.w	r3, r3, #2
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d1ea      	bne.n	800877a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	f003 0304 	and.w	r3, r3, #4
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	f000 8097 	beq.w	80088e0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80087b2:	2300      	movs	r3, #0
 80087b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80087b6:	4b81      	ldr	r3, [pc, #516]	; (80089bc <HAL_RCC_OscConfig+0x470>)
 80087b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d10f      	bne.n	80087e2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80087c2:	2300      	movs	r3, #0
 80087c4:	60bb      	str	r3, [r7, #8]
 80087c6:	4b7d      	ldr	r3, [pc, #500]	; (80089bc <HAL_RCC_OscConfig+0x470>)
 80087c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087ca:	4a7c      	ldr	r2, [pc, #496]	; (80089bc <HAL_RCC_OscConfig+0x470>)
 80087cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80087d0:	6413      	str	r3, [r2, #64]	; 0x40
 80087d2:	4b7a      	ldr	r3, [pc, #488]	; (80089bc <HAL_RCC_OscConfig+0x470>)
 80087d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80087da:	60bb      	str	r3, [r7, #8]
 80087dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80087de:	2301      	movs	r3, #1
 80087e0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80087e2:	4b77      	ldr	r3, [pc, #476]	; (80089c0 <HAL_RCC_OscConfig+0x474>)
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d118      	bne.n	8008820 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80087ee:	4b74      	ldr	r3, [pc, #464]	; (80089c0 <HAL_RCC_OscConfig+0x474>)
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	4a73      	ldr	r2, [pc, #460]	; (80089c0 <HAL_RCC_OscConfig+0x474>)
 80087f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80087f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80087fa:	f7fd fc2b 	bl	8006054 <HAL_GetTick>
 80087fe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008800:	e008      	b.n	8008814 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008802:	f7fd fc27 	bl	8006054 <HAL_GetTick>
 8008806:	4602      	mov	r2, r0
 8008808:	693b      	ldr	r3, [r7, #16]
 800880a:	1ad3      	subs	r3, r2, r3
 800880c:	2b02      	cmp	r3, #2
 800880e:	d901      	bls.n	8008814 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8008810:	2303      	movs	r3, #3
 8008812:	e10c      	b.n	8008a2e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008814:	4b6a      	ldr	r3, [pc, #424]	; (80089c0 <HAL_RCC_OscConfig+0x474>)
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800881c:	2b00      	cmp	r3, #0
 800881e:	d0f0      	beq.n	8008802 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	689b      	ldr	r3, [r3, #8]
 8008824:	2b01      	cmp	r3, #1
 8008826:	d106      	bne.n	8008836 <HAL_RCC_OscConfig+0x2ea>
 8008828:	4b64      	ldr	r3, [pc, #400]	; (80089bc <HAL_RCC_OscConfig+0x470>)
 800882a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800882c:	4a63      	ldr	r2, [pc, #396]	; (80089bc <HAL_RCC_OscConfig+0x470>)
 800882e:	f043 0301 	orr.w	r3, r3, #1
 8008832:	6713      	str	r3, [r2, #112]	; 0x70
 8008834:	e01c      	b.n	8008870 <HAL_RCC_OscConfig+0x324>
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	689b      	ldr	r3, [r3, #8]
 800883a:	2b05      	cmp	r3, #5
 800883c:	d10c      	bne.n	8008858 <HAL_RCC_OscConfig+0x30c>
 800883e:	4b5f      	ldr	r3, [pc, #380]	; (80089bc <HAL_RCC_OscConfig+0x470>)
 8008840:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008842:	4a5e      	ldr	r2, [pc, #376]	; (80089bc <HAL_RCC_OscConfig+0x470>)
 8008844:	f043 0304 	orr.w	r3, r3, #4
 8008848:	6713      	str	r3, [r2, #112]	; 0x70
 800884a:	4b5c      	ldr	r3, [pc, #368]	; (80089bc <HAL_RCC_OscConfig+0x470>)
 800884c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800884e:	4a5b      	ldr	r2, [pc, #364]	; (80089bc <HAL_RCC_OscConfig+0x470>)
 8008850:	f043 0301 	orr.w	r3, r3, #1
 8008854:	6713      	str	r3, [r2, #112]	; 0x70
 8008856:	e00b      	b.n	8008870 <HAL_RCC_OscConfig+0x324>
 8008858:	4b58      	ldr	r3, [pc, #352]	; (80089bc <HAL_RCC_OscConfig+0x470>)
 800885a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800885c:	4a57      	ldr	r2, [pc, #348]	; (80089bc <HAL_RCC_OscConfig+0x470>)
 800885e:	f023 0301 	bic.w	r3, r3, #1
 8008862:	6713      	str	r3, [r2, #112]	; 0x70
 8008864:	4b55      	ldr	r3, [pc, #340]	; (80089bc <HAL_RCC_OscConfig+0x470>)
 8008866:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008868:	4a54      	ldr	r2, [pc, #336]	; (80089bc <HAL_RCC_OscConfig+0x470>)
 800886a:	f023 0304 	bic.w	r3, r3, #4
 800886e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	689b      	ldr	r3, [r3, #8]
 8008874:	2b00      	cmp	r3, #0
 8008876:	d015      	beq.n	80088a4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008878:	f7fd fbec 	bl	8006054 <HAL_GetTick>
 800887c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800887e:	e00a      	b.n	8008896 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008880:	f7fd fbe8 	bl	8006054 <HAL_GetTick>
 8008884:	4602      	mov	r2, r0
 8008886:	693b      	ldr	r3, [r7, #16]
 8008888:	1ad3      	subs	r3, r2, r3
 800888a:	f241 3288 	movw	r2, #5000	; 0x1388
 800888e:	4293      	cmp	r3, r2
 8008890:	d901      	bls.n	8008896 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8008892:	2303      	movs	r3, #3
 8008894:	e0cb      	b.n	8008a2e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008896:	4b49      	ldr	r3, [pc, #292]	; (80089bc <HAL_RCC_OscConfig+0x470>)
 8008898:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800889a:	f003 0302 	and.w	r3, r3, #2
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d0ee      	beq.n	8008880 <HAL_RCC_OscConfig+0x334>
 80088a2:	e014      	b.n	80088ce <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80088a4:	f7fd fbd6 	bl	8006054 <HAL_GetTick>
 80088a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80088aa:	e00a      	b.n	80088c2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80088ac:	f7fd fbd2 	bl	8006054 <HAL_GetTick>
 80088b0:	4602      	mov	r2, r0
 80088b2:	693b      	ldr	r3, [r7, #16]
 80088b4:	1ad3      	subs	r3, r2, r3
 80088b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80088ba:	4293      	cmp	r3, r2
 80088bc:	d901      	bls.n	80088c2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80088be:	2303      	movs	r3, #3
 80088c0:	e0b5      	b.n	8008a2e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80088c2:	4b3e      	ldr	r3, [pc, #248]	; (80089bc <HAL_RCC_OscConfig+0x470>)
 80088c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088c6:	f003 0302 	and.w	r3, r3, #2
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d1ee      	bne.n	80088ac <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80088ce:	7dfb      	ldrb	r3, [r7, #23]
 80088d0:	2b01      	cmp	r3, #1
 80088d2:	d105      	bne.n	80088e0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80088d4:	4b39      	ldr	r3, [pc, #228]	; (80089bc <HAL_RCC_OscConfig+0x470>)
 80088d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088d8:	4a38      	ldr	r2, [pc, #224]	; (80089bc <HAL_RCC_OscConfig+0x470>)
 80088da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80088de:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	699b      	ldr	r3, [r3, #24]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	f000 80a1 	beq.w	8008a2c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80088ea:	4b34      	ldr	r3, [pc, #208]	; (80089bc <HAL_RCC_OscConfig+0x470>)
 80088ec:	689b      	ldr	r3, [r3, #8]
 80088ee:	f003 030c 	and.w	r3, r3, #12
 80088f2:	2b08      	cmp	r3, #8
 80088f4:	d05c      	beq.n	80089b0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	699b      	ldr	r3, [r3, #24]
 80088fa:	2b02      	cmp	r3, #2
 80088fc:	d141      	bne.n	8008982 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80088fe:	4b31      	ldr	r3, [pc, #196]	; (80089c4 <HAL_RCC_OscConfig+0x478>)
 8008900:	2200      	movs	r2, #0
 8008902:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008904:	f7fd fba6 	bl	8006054 <HAL_GetTick>
 8008908:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800890a:	e008      	b.n	800891e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800890c:	f7fd fba2 	bl	8006054 <HAL_GetTick>
 8008910:	4602      	mov	r2, r0
 8008912:	693b      	ldr	r3, [r7, #16]
 8008914:	1ad3      	subs	r3, r2, r3
 8008916:	2b02      	cmp	r3, #2
 8008918:	d901      	bls.n	800891e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800891a:	2303      	movs	r3, #3
 800891c:	e087      	b.n	8008a2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800891e:	4b27      	ldr	r3, [pc, #156]	; (80089bc <HAL_RCC_OscConfig+0x470>)
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008926:	2b00      	cmp	r3, #0
 8008928:	d1f0      	bne.n	800890c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	69da      	ldr	r2, [r3, #28]
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	6a1b      	ldr	r3, [r3, #32]
 8008932:	431a      	orrs	r2, r3
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008938:	019b      	lsls	r3, r3, #6
 800893a:	431a      	orrs	r2, r3
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008940:	085b      	lsrs	r3, r3, #1
 8008942:	3b01      	subs	r3, #1
 8008944:	041b      	lsls	r3, r3, #16
 8008946:	431a      	orrs	r2, r3
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800894c:	061b      	lsls	r3, r3, #24
 800894e:	491b      	ldr	r1, [pc, #108]	; (80089bc <HAL_RCC_OscConfig+0x470>)
 8008950:	4313      	orrs	r3, r2
 8008952:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008954:	4b1b      	ldr	r3, [pc, #108]	; (80089c4 <HAL_RCC_OscConfig+0x478>)
 8008956:	2201      	movs	r2, #1
 8008958:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800895a:	f7fd fb7b 	bl	8006054 <HAL_GetTick>
 800895e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008960:	e008      	b.n	8008974 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008962:	f7fd fb77 	bl	8006054 <HAL_GetTick>
 8008966:	4602      	mov	r2, r0
 8008968:	693b      	ldr	r3, [r7, #16]
 800896a:	1ad3      	subs	r3, r2, r3
 800896c:	2b02      	cmp	r3, #2
 800896e:	d901      	bls.n	8008974 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008970:	2303      	movs	r3, #3
 8008972:	e05c      	b.n	8008a2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008974:	4b11      	ldr	r3, [pc, #68]	; (80089bc <HAL_RCC_OscConfig+0x470>)
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800897c:	2b00      	cmp	r3, #0
 800897e:	d0f0      	beq.n	8008962 <HAL_RCC_OscConfig+0x416>
 8008980:	e054      	b.n	8008a2c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008982:	4b10      	ldr	r3, [pc, #64]	; (80089c4 <HAL_RCC_OscConfig+0x478>)
 8008984:	2200      	movs	r2, #0
 8008986:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008988:	f7fd fb64 	bl	8006054 <HAL_GetTick>
 800898c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800898e:	e008      	b.n	80089a2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008990:	f7fd fb60 	bl	8006054 <HAL_GetTick>
 8008994:	4602      	mov	r2, r0
 8008996:	693b      	ldr	r3, [r7, #16]
 8008998:	1ad3      	subs	r3, r2, r3
 800899a:	2b02      	cmp	r3, #2
 800899c:	d901      	bls.n	80089a2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800899e:	2303      	movs	r3, #3
 80089a0:	e045      	b.n	8008a2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80089a2:	4b06      	ldr	r3, [pc, #24]	; (80089bc <HAL_RCC_OscConfig+0x470>)
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d1f0      	bne.n	8008990 <HAL_RCC_OscConfig+0x444>
 80089ae:	e03d      	b.n	8008a2c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	699b      	ldr	r3, [r3, #24]
 80089b4:	2b01      	cmp	r3, #1
 80089b6:	d107      	bne.n	80089c8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80089b8:	2301      	movs	r3, #1
 80089ba:	e038      	b.n	8008a2e <HAL_RCC_OscConfig+0x4e2>
 80089bc:	40023800 	.word	0x40023800
 80089c0:	40007000 	.word	0x40007000
 80089c4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80089c8:	4b1b      	ldr	r3, [pc, #108]	; (8008a38 <HAL_RCC_OscConfig+0x4ec>)
 80089ca:	685b      	ldr	r3, [r3, #4]
 80089cc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	699b      	ldr	r3, [r3, #24]
 80089d2:	2b01      	cmp	r3, #1
 80089d4:	d028      	beq.n	8008a28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80089e0:	429a      	cmp	r2, r3
 80089e2:	d121      	bne.n	8008a28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80089ee:	429a      	cmp	r2, r3
 80089f0:	d11a      	bne.n	8008a28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80089f2:	68fa      	ldr	r2, [r7, #12]
 80089f4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80089f8:	4013      	ands	r3, r2
 80089fa:	687a      	ldr	r2, [r7, #4]
 80089fc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80089fe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008a00:	4293      	cmp	r3, r2
 8008a02:	d111      	bne.n	8008a28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a0e:	085b      	lsrs	r3, r3, #1
 8008a10:	3b01      	subs	r3, #1
 8008a12:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008a14:	429a      	cmp	r2, r3
 8008a16:	d107      	bne.n	8008a28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a22:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008a24:	429a      	cmp	r2, r3
 8008a26:	d001      	beq.n	8008a2c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8008a28:	2301      	movs	r3, #1
 8008a2a:	e000      	b.n	8008a2e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8008a2c:	2300      	movs	r3, #0
}
 8008a2e:	4618      	mov	r0, r3
 8008a30:	3718      	adds	r7, #24
 8008a32:	46bd      	mov	sp, r7
 8008a34:	bd80      	pop	{r7, pc}
 8008a36:	bf00      	nop
 8008a38:	40023800 	.word	0x40023800

08008a3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008a3c:	b580      	push	{r7, lr}
 8008a3e:	b084      	sub	sp, #16
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
 8008a44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d101      	bne.n	8008a50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008a4c:	2301      	movs	r3, #1
 8008a4e:	e0cc      	b.n	8008bea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008a50:	4b68      	ldr	r3, [pc, #416]	; (8008bf4 <HAL_RCC_ClockConfig+0x1b8>)
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	f003 0307 	and.w	r3, r3, #7
 8008a58:	683a      	ldr	r2, [r7, #0]
 8008a5a:	429a      	cmp	r2, r3
 8008a5c:	d90c      	bls.n	8008a78 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008a5e:	4b65      	ldr	r3, [pc, #404]	; (8008bf4 <HAL_RCC_ClockConfig+0x1b8>)
 8008a60:	683a      	ldr	r2, [r7, #0]
 8008a62:	b2d2      	uxtb	r2, r2
 8008a64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008a66:	4b63      	ldr	r3, [pc, #396]	; (8008bf4 <HAL_RCC_ClockConfig+0x1b8>)
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	f003 0307 	and.w	r3, r3, #7
 8008a6e:	683a      	ldr	r2, [r7, #0]
 8008a70:	429a      	cmp	r2, r3
 8008a72:	d001      	beq.n	8008a78 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008a74:	2301      	movs	r3, #1
 8008a76:	e0b8      	b.n	8008bea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	f003 0302 	and.w	r3, r3, #2
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d020      	beq.n	8008ac6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	f003 0304 	and.w	r3, r3, #4
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d005      	beq.n	8008a9c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008a90:	4b59      	ldr	r3, [pc, #356]	; (8008bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8008a92:	689b      	ldr	r3, [r3, #8]
 8008a94:	4a58      	ldr	r2, [pc, #352]	; (8008bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8008a96:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008a9a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	f003 0308 	and.w	r3, r3, #8
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d005      	beq.n	8008ab4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008aa8:	4b53      	ldr	r3, [pc, #332]	; (8008bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8008aaa:	689b      	ldr	r3, [r3, #8]
 8008aac:	4a52      	ldr	r2, [pc, #328]	; (8008bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8008aae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008ab2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008ab4:	4b50      	ldr	r3, [pc, #320]	; (8008bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8008ab6:	689b      	ldr	r3, [r3, #8]
 8008ab8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	689b      	ldr	r3, [r3, #8]
 8008ac0:	494d      	ldr	r1, [pc, #308]	; (8008bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8008ac2:	4313      	orrs	r3, r2
 8008ac4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	f003 0301 	and.w	r3, r3, #1
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d044      	beq.n	8008b5c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	685b      	ldr	r3, [r3, #4]
 8008ad6:	2b01      	cmp	r3, #1
 8008ad8:	d107      	bne.n	8008aea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008ada:	4b47      	ldr	r3, [pc, #284]	; (8008bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d119      	bne.n	8008b1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008ae6:	2301      	movs	r3, #1
 8008ae8:	e07f      	b.n	8008bea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	685b      	ldr	r3, [r3, #4]
 8008aee:	2b02      	cmp	r3, #2
 8008af0:	d003      	beq.n	8008afa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008af6:	2b03      	cmp	r3, #3
 8008af8:	d107      	bne.n	8008b0a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008afa:	4b3f      	ldr	r3, [pc, #252]	; (8008bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d109      	bne.n	8008b1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008b06:	2301      	movs	r3, #1
 8008b08:	e06f      	b.n	8008bea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008b0a:	4b3b      	ldr	r3, [pc, #236]	; (8008bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	f003 0302 	and.w	r3, r3, #2
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d101      	bne.n	8008b1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008b16:	2301      	movs	r3, #1
 8008b18:	e067      	b.n	8008bea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008b1a:	4b37      	ldr	r3, [pc, #220]	; (8008bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8008b1c:	689b      	ldr	r3, [r3, #8]
 8008b1e:	f023 0203 	bic.w	r2, r3, #3
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	685b      	ldr	r3, [r3, #4]
 8008b26:	4934      	ldr	r1, [pc, #208]	; (8008bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8008b28:	4313      	orrs	r3, r2
 8008b2a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008b2c:	f7fd fa92 	bl	8006054 <HAL_GetTick>
 8008b30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008b32:	e00a      	b.n	8008b4a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008b34:	f7fd fa8e 	bl	8006054 <HAL_GetTick>
 8008b38:	4602      	mov	r2, r0
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	1ad3      	subs	r3, r2, r3
 8008b3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b42:	4293      	cmp	r3, r2
 8008b44:	d901      	bls.n	8008b4a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008b46:	2303      	movs	r3, #3
 8008b48:	e04f      	b.n	8008bea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008b4a:	4b2b      	ldr	r3, [pc, #172]	; (8008bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8008b4c:	689b      	ldr	r3, [r3, #8]
 8008b4e:	f003 020c 	and.w	r2, r3, #12
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	685b      	ldr	r3, [r3, #4]
 8008b56:	009b      	lsls	r3, r3, #2
 8008b58:	429a      	cmp	r2, r3
 8008b5a:	d1eb      	bne.n	8008b34 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008b5c:	4b25      	ldr	r3, [pc, #148]	; (8008bf4 <HAL_RCC_ClockConfig+0x1b8>)
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	f003 0307 	and.w	r3, r3, #7
 8008b64:	683a      	ldr	r2, [r7, #0]
 8008b66:	429a      	cmp	r2, r3
 8008b68:	d20c      	bcs.n	8008b84 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008b6a:	4b22      	ldr	r3, [pc, #136]	; (8008bf4 <HAL_RCC_ClockConfig+0x1b8>)
 8008b6c:	683a      	ldr	r2, [r7, #0]
 8008b6e:	b2d2      	uxtb	r2, r2
 8008b70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008b72:	4b20      	ldr	r3, [pc, #128]	; (8008bf4 <HAL_RCC_ClockConfig+0x1b8>)
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	f003 0307 	and.w	r3, r3, #7
 8008b7a:	683a      	ldr	r2, [r7, #0]
 8008b7c:	429a      	cmp	r2, r3
 8008b7e:	d001      	beq.n	8008b84 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008b80:	2301      	movs	r3, #1
 8008b82:	e032      	b.n	8008bea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	f003 0304 	and.w	r3, r3, #4
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d008      	beq.n	8008ba2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008b90:	4b19      	ldr	r3, [pc, #100]	; (8008bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8008b92:	689b      	ldr	r3, [r3, #8]
 8008b94:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	68db      	ldr	r3, [r3, #12]
 8008b9c:	4916      	ldr	r1, [pc, #88]	; (8008bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8008b9e:	4313      	orrs	r3, r2
 8008ba0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	f003 0308 	and.w	r3, r3, #8
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d009      	beq.n	8008bc2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008bae:	4b12      	ldr	r3, [pc, #72]	; (8008bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8008bb0:	689b      	ldr	r3, [r3, #8]
 8008bb2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	691b      	ldr	r3, [r3, #16]
 8008bba:	00db      	lsls	r3, r3, #3
 8008bbc:	490e      	ldr	r1, [pc, #56]	; (8008bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8008bbe:	4313      	orrs	r3, r2
 8008bc0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008bc2:	f000 f821 	bl	8008c08 <HAL_RCC_GetSysClockFreq>
 8008bc6:	4602      	mov	r2, r0
 8008bc8:	4b0b      	ldr	r3, [pc, #44]	; (8008bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8008bca:	689b      	ldr	r3, [r3, #8]
 8008bcc:	091b      	lsrs	r3, r3, #4
 8008bce:	f003 030f 	and.w	r3, r3, #15
 8008bd2:	490a      	ldr	r1, [pc, #40]	; (8008bfc <HAL_RCC_ClockConfig+0x1c0>)
 8008bd4:	5ccb      	ldrb	r3, [r1, r3]
 8008bd6:	fa22 f303 	lsr.w	r3, r2, r3
 8008bda:	4a09      	ldr	r2, [pc, #36]	; (8008c00 <HAL_RCC_ClockConfig+0x1c4>)
 8008bdc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008bde:	4b09      	ldr	r3, [pc, #36]	; (8008c04 <HAL_RCC_ClockConfig+0x1c8>)
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	4618      	mov	r0, r3
 8008be4:	f7fd f9f2 	bl	8005fcc <HAL_InitTick>

  return HAL_OK;
 8008be8:	2300      	movs	r3, #0
}
 8008bea:	4618      	mov	r0, r3
 8008bec:	3710      	adds	r7, #16
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	bd80      	pop	{r7, pc}
 8008bf2:	bf00      	nop
 8008bf4:	40023c00 	.word	0x40023c00
 8008bf8:	40023800 	.word	0x40023800
 8008bfc:	08016060 	.word	0x08016060
 8008c00:	2000000c 	.word	0x2000000c
 8008c04:	2000006c 	.word	0x2000006c

08008c08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008c08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008c0c:	b094      	sub	sp, #80	; 0x50
 8008c0e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008c10:	2300      	movs	r3, #0
 8008c12:	647b      	str	r3, [r7, #68]	; 0x44
 8008c14:	2300      	movs	r3, #0
 8008c16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008c18:	2300      	movs	r3, #0
 8008c1a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8008c1c:	2300      	movs	r3, #0
 8008c1e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008c20:	4b79      	ldr	r3, [pc, #484]	; (8008e08 <HAL_RCC_GetSysClockFreq+0x200>)
 8008c22:	689b      	ldr	r3, [r3, #8]
 8008c24:	f003 030c 	and.w	r3, r3, #12
 8008c28:	2b08      	cmp	r3, #8
 8008c2a:	d00d      	beq.n	8008c48 <HAL_RCC_GetSysClockFreq+0x40>
 8008c2c:	2b08      	cmp	r3, #8
 8008c2e:	f200 80e1 	bhi.w	8008df4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d002      	beq.n	8008c3c <HAL_RCC_GetSysClockFreq+0x34>
 8008c36:	2b04      	cmp	r3, #4
 8008c38:	d003      	beq.n	8008c42 <HAL_RCC_GetSysClockFreq+0x3a>
 8008c3a:	e0db      	b.n	8008df4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008c3c:	4b73      	ldr	r3, [pc, #460]	; (8008e0c <HAL_RCC_GetSysClockFreq+0x204>)
 8008c3e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8008c40:	e0db      	b.n	8008dfa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008c42:	4b73      	ldr	r3, [pc, #460]	; (8008e10 <HAL_RCC_GetSysClockFreq+0x208>)
 8008c44:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008c46:	e0d8      	b.n	8008dfa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008c48:	4b6f      	ldr	r3, [pc, #444]	; (8008e08 <HAL_RCC_GetSysClockFreq+0x200>)
 8008c4a:	685b      	ldr	r3, [r3, #4]
 8008c4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008c50:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008c52:	4b6d      	ldr	r3, [pc, #436]	; (8008e08 <HAL_RCC_GetSysClockFreq+0x200>)
 8008c54:	685b      	ldr	r3, [r3, #4]
 8008c56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d063      	beq.n	8008d26 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008c5e:	4b6a      	ldr	r3, [pc, #424]	; (8008e08 <HAL_RCC_GetSysClockFreq+0x200>)
 8008c60:	685b      	ldr	r3, [r3, #4]
 8008c62:	099b      	lsrs	r3, r3, #6
 8008c64:	2200      	movs	r2, #0
 8008c66:	63bb      	str	r3, [r7, #56]	; 0x38
 8008c68:	63fa      	str	r2, [r7, #60]	; 0x3c
 8008c6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c70:	633b      	str	r3, [r7, #48]	; 0x30
 8008c72:	2300      	movs	r3, #0
 8008c74:	637b      	str	r3, [r7, #52]	; 0x34
 8008c76:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8008c7a:	4622      	mov	r2, r4
 8008c7c:	462b      	mov	r3, r5
 8008c7e:	f04f 0000 	mov.w	r0, #0
 8008c82:	f04f 0100 	mov.w	r1, #0
 8008c86:	0159      	lsls	r1, r3, #5
 8008c88:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008c8c:	0150      	lsls	r0, r2, #5
 8008c8e:	4602      	mov	r2, r0
 8008c90:	460b      	mov	r3, r1
 8008c92:	4621      	mov	r1, r4
 8008c94:	1a51      	subs	r1, r2, r1
 8008c96:	6139      	str	r1, [r7, #16]
 8008c98:	4629      	mov	r1, r5
 8008c9a:	eb63 0301 	sbc.w	r3, r3, r1
 8008c9e:	617b      	str	r3, [r7, #20]
 8008ca0:	f04f 0200 	mov.w	r2, #0
 8008ca4:	f04f 0300 	mov.w	r3, #0
 8008ca8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008cac:	4659      	mov	r1, fp
 8008cae:	018b      	lsls	r3, r1, #6
 8008cb0:	4651      	mov	r1, sl
 8008cb2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008cb6:	4651      	mov	r1, sl
 8008cb8:	018a      	lsls	r2, r1, #6
 8008cba:	4651      	mov	r1, sl
 8008cbc:	ebb2 0801 	subs.w	r8, r2, r1
 8008cc0:	4659      	mov	r1, fp
 8008cc2:	eb63 0901 	sbc.w	r9, r3, r1
 8008cc6:	f04f 0200 	mov.w	r2, #0
 8008cca:	f04f 0300 	mov.w	r3, #0
 8008cce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008cd2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008cd6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008cda:	4690      	mov	r8, r2
 8008cdc:	4699      	mov	r9, r3
 8008cde:	4623      	mov	r3, r4
 8008ce0:	eb18 0303 	adds.w	r3, r8, r3
 8008ce4:	60bb      	str	r3, [r7, #8]
 8008ce6:	462b      	mov	r3, r5
 8008ce8:	eb49 0303 	adc.w	r3, r9, r3
 8008cec:	60fb      	str	r3, [r7, #12]
 8008cee:	f04f 0200 	mov.w	r2, #0
 8008cf2:	f04f 0300 	mov.w	r3, #0
 8008cf6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8008cfa:	4629      	mov	r1, r5
 8008cfc:	024b      	lsls	r3, r1, #9
 8008cfe:	4621      	mov	r1, r4
 8008d00:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8008d04:	4621      	mov	r1, r4
 8008d06:	024a      	lsls	r2, r1, #9
 8008d08:	4610      	mov	r0, r2
 8008d0a:	4619      	mov	r1, r3
 8008d0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d0e:	2200      	movs	r2, #0
 8008d10:	62bb      	str	r3, [r7, #40]	; 0x28
 8008d12:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008d14:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008d18:	f7f7 ffb6 	bl	8000c88 <__aeabi_uldivmod>
 8008d1c:	4602      	mov	r2, r0
 8008d1e:	460b      	mov	r3, r1
 8008d20:	4613      	mov	r3, r2
 8008d22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008d24:	e058      	b.n	8008dd8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008d26:	4b38      	ldr	r3, [pc, #224]	; (8008e08 <HAL_RCC_GetSysClockFreq+0x200>)
 8008d28:	685b      	ldr	r3, [r3, #4]
 8008d2a:	099b      	lsrs	r3, r3, #6
 8008d2c:	2200      	movs	r2, #0
 8008d2e:	4618      	mov	r0, r3
 8008d30:	4611      	mov	r1, r2
 8008d32:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8008d36:	623b      	str	r3, [r7, #32]
 8008d38:	2300      	movs	r3, #0
 8008d3a:	627b      	str	r3, [r7, #36]	; 0x24
 8008d3c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8008d40:	4642      	mov	r2, r8
 8008d42:	464b      	mov	r3, r9
 8008d44:	f04f 0000 	mov.w	r0, #0
 8008d48:	f04f 0100 	mov.w	r1, #0
 8008d4c:	0159      	lsls	r1, r3, #5
 8008d4e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008d52:	0150      	lsls	r0, r2, #5
 8008d54:	4602      	mov	r2, r0
 8008d56:	460b      	mov	r3, r1
 8008d58:	4641      	mov	r1, r8
 8008d5a:	ebb2 0a01 	subs.w	sl, r2, r1
 8008d5e:	4649      	mov	r1, r9
 8008d60:	eb63 0b01 	sbc.w	fp, r3, r1
 8008d64:	f04f 0200 	mov.w	r2, #0
 8008d68:	f04f 0300 	mov.w	r3, #0
 8008d6c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8008d70:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8008d74:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8008d78:	ebb2 040a 	subs.w	r4, r2, sl
 8008d7c:	eb63 050b 	sbc.w	r5, r3, fp
 8008d80:	f04f 0200 	mov.w	r2, #0
 8008d84:	f04f 0300 	mov.w	r3, #0
 8008d88:	00eb      	lsls	r3, r5, #3
 8008d8a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008d8e:	00e2      	lsls	r2, r4, #3
 8008d90:	4614      	mov	r4, r2
 8008d92:	461d      	mov	r5, r3
 8008d94:	4643      	mov	r3, r8
 8008d96:	18e3      	adds	r3, r4, r3
 8008d98:	603b      	str	r3, [r7, #0]
 8008d9a:	464b      	mov	r3, r9
 8008d9c:	eb45 0303 	adc.w	r3, r5, r3
 8008da0:	607b      	str	r3, [r7, #4]
 8008da2:	f04f 0200 	mov.w	r2, #0
 8008da6:	f04f 0300 	mov.w	r3, #0
 8008daa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008dae:	4629      	mov	r1, r5
 8008db0:	028b      	lsls	r3, r1, #10
 8008db2:	4621      	mov	r1, r4
 8008db4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008db8:	4621      	mov	r1, r4
 8008dba:	028a      	lsls	r2, r1, #10
 8008dbc:	4610      	mov	r0, r2
 8008dbe:	4619      	mov	r1, r3
 8008dc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008dc2:	2200      	movs	r2, #0
 8008dc4:	61bb      	str	r3, [r7, #24]
 8008dc6:	61fa      	str	r2, [r7, #28]
 8008dc8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008dcc:	f7f7 ff5c 	bl	8000c88 <__aeabi_uldivmod>
 8008dd0:	4602      	mov	r2, r0
 8008dd2:	460b      	mov	r3, r1
 8008dd4:	4613      	mov	r3, r2
 8008dd6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008dd8:	4b0b      	ldr	r3, [pc, #44]	; (8008e08 <HAL_RCC_GetSysClockFreq+0x200>)
 8008dda:	685b      	ldr	r3, [r3, #4]
 8008ddc:	0c1b      	lsrs	r3, r3, #16
 8008dde:	f003 0303 	and.w	r3, r3, #3
 8008de2:	3301      	adds	r3, #1
 8008de4:	005b      	lsls	r3, r3, #1
 8008de6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8008de8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008dea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008dec:	fbb2 f3f3 	udiv	r3, r2, r3
 8008df0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008df2:	e002      	b.n	8008dfa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008df4:	4b05      	ldr	r3, [pc, #20]	; (8008e0c <HAL_RCC_GetSysClockFreq+0x204>)
 8008df6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008df8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008dfa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	3750      	adds	r7, #80	; 0x50
 8008e00:	46bd      	mov	sp, r7
 8008e02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008e06:	bf00      	nop
 8008e08:	40023800 	.word	0x40023800
 8008e0c:	00f42400 	.word	0x00f42400
 8008e10:	007a1200 	.word	0x007a1200

08008e14 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008e14:	b480      	push	{r7}
 8008e16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008e18:	4b03      	ldr	r3, [pc, #12]	; (8008e28 <HAL_RCC_GetHCLKFreq+0x14>)
 8008e1a:	681b      	ldr	r3, [r3, #0]
}
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	46bd      	mov	sp, r7
 8008e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e24:	4770      	bx	lr
 8008e26:	bf00      	nop
 8008e28:	2000000c 	.word	0x2000000c

08008e2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008e2c:	b580      	push	{r7, lr}
 8008e2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008e30:	f7ff fff0 	bl	8008e14 <HAL_RCC_GetHCLKFreq>
 8008e34:	4602      	mov	r2, r0
 8008e36:	4b05      	ldr	r3, [pc, #20]	; (8008e4c <HAL_RCC_GetPCLK1Freq+0x20>)
 8008e38:	689b      	ldr	r3, [r3, #8]
 8008e3a:	0a9b      	lsrs	r3, r3, #10
 8008e3c:	f003 0307 	and.w	r3, r3, #7
 8008e40:	4903      	ldr	r1, [pc, #12]	; (8008e50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008e42:	5ccb      	ldrb	r3, [r1, r3]
 8008e44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008e48:	4618      	mov	r0, r3
 8008e4a:	bd80      	pop	{r7, pc}
 8008e4c:	40023800 	.word	0x40023800
 8008e50:	08016070 	.word	0x08016070

08008e54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008e54:	b580      	push	{r7, lr}
 8008e56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008e58:	f7ff ffdc 	bl	8008e14 <HAL_RCC_GetHCLKFreq>
 8008e5c:	4602      	mov	r2, r0
 8008e5e:	4b05      	ldr	r3, [pc, #20]	; (8008e74 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008e60:	689b      	ldr	r3, [r3, #8]
 8008e62:	0b5b      	lsrs	r3, r3, #13
 8008e64:	f003 0307 	and.w	r3, r3, #7
 8008e68:	4903      	ldr	r1, [pc, #12]	; (8008e78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008e6a:	5ccb      	ldrb	r3, [r1, r3]
 8008e6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008e70:	4618      	mov	r0, r3
 8008e72:	bd80      	pop	{r7, pc}
 8008e74:	40023800 	.word	0x40023800
 8008e78:	08016070 	.word	0x08016070

08008e7c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	b082      	sub	sp, #8
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d101      	bne.n	8008e8e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008e8a:	2301      	movs	r3, #1
 8008e8c:	e07b      	b.n	8008f86 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d108      	bne.n	8008ea8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	685b      	ldr	r3, [r3, #4]
 8008e9a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008e9e:	d009      	beq.n	8008eb4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	2200      	movs	r2, #0
 8008ea4:	61da      	str	r2, [r3, #28]
 8008ea6:	e005      	b.n	8008eb4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	2200      	movs	r2, #0
 8008eac:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	2200      	movs	r2, #0
 8008eb2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	2200      	movs	r2, #0
 8008eb8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008ec0:	b2db      	uxtb	r3, r3
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d106      	bne.n	8008ed4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	2200      	movs	r2, #0
 8008eca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008ece:	6878      	ldr	r0, [r7, #4]
 8008ed0:	f7fa ff44 	bl	8003d5c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	2202      	movs	r2, #2
 8008ed8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	681a      	ldr	r2, [r3, #0]
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008eea:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	685b      	ldr	r3, [r3, #4]
 8008ef0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	689b      	ldr	r3, [r3, #8]
 8008ef8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008efc:	431a      	orrs	r2, r3
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	68db      	ldr	r3, [r3, #12]
 8008f02:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008f06:	431a      	orrs	r2, r3
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	691b      	ldr	r3, [r3, #16]
 8008f0c:	f003 0302 	and.w	r3, r3, #2
 8008f10:	431a      	orrs	r2, r3
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	695b      	ldr	r3, [r3, #20]
 8008f16:	f003 0301 	and.w	r3, r3, #1
 8008f1a:	431a      	orrs	r2, r3
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	699b      	ldr	r3, [r3, #24]
 8008f20:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008f24:	431a      	orrs	r2, r3
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	69db      	ldr	r3, [r3, #28]
 8008f2a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008f2e:	431a      	orrs	r2, r3
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	6a1b      	ldr	r3, [r3, #32]
 8008f34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f38:	ea42 0103 	orr.w	r1, r2, r3
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f40:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	430a      	orrs	r2, r1
 8008f4a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	699b      	ldr	r3, [r3, #24]
 8008f50:	0c1b      	lsrs	r3, r3, #16
 8008f52:	f003 0104 	and.w	r1, r3, #4
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f5a:	f003 0210 	and.w	r2, r3, #16
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	430a      	orrs	r2, r1
 8008f64:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	69da      	ldr	r2, [r3, #28]
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008f74:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	2200      	movs	r2, #0
 8008f7a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	2201      	movs	r2, #1
 8008f80:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8008f84:	2300      	movs	r3, #0
}
 8008f86:	4618      	mov	r0, r3
 8008f88:	3708      	adds	r7, #8
 8008f8a:	46bd      	mov	sp, r7
 8008f8c:	bd80      	pop	{r7, pc}

08008f8e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008f8e:	b580      	push	{r7, lr}
 8008f90:	b088      	sub	sp, #32
 8008f92:	af00      	add	r7, sp, #0
 8008f94:	60f8      	str	r0, [r7, #12]
 8008f96:	60b9      	str	r1, [r7, #8]
 8008f98:	603b      	str	r3, [r7, #0]
 8008f9a:	4613      	mov	r3, r2
 8008f9c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008f9e:	2300      	movs	r3, #0
 8008fa0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008fa8:	2b01      	cmp	r3, #1
 8008faa:	d101      	bne.n	8008fb0 <HAL_SPI_Transmit+0x22>
 8008fac:	2302      	movs	r3, #2
 8008fae:	e126      	b.n	80091fe <HAL_SPI_Transmit+0x270>
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	2201      	movs	r2, #1
 8008fb4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008fb8:	f7fd f84c 	bl	8006054 <HAL_GetTick>
 8008fbc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8008fbe:	88fb      	ldrh	r3, [r7, #6]
 8008fc0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008fc8:	b2db      	uxtb	r3, r3
 8008fca:	2b01      	cmp	r3, #1
 8008fcc:	d002      	beq.n	8008fd4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8008fce:	2302      	movs	r3, #2
 8008fd0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008fd2:	e10b      	b.n	80091ec <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8008fd4:	68bb      	ldr	r3, [r7, #8]
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d002      	beq.n	8008fe0 <HAL_SPI_Transmit+0x52>
 8008fda:	88fb      	ldrh	r3, [r7, #6]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d102      	bne.n	8008fe6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8008fe0:	2301      	movs	r3, #1
 8008fe2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008fe4:	e102      	b.n	80091ec <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	2203      	movs	r2, #3
 8008fea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	2200      	movs	r2, #0
 8008ff2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	68ba      	ldr	r2, [r7, #8]
 8008ff8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	88fa      	ldrh	r2, [r7, #6]
 8008ffe:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	88fa      	ldrh	r2, [r7, #6]
 8009004:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	2200      	movs	r2, #0
 800900a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	2200      	movs	r2, #0
 8009010:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	2200      	movs	r2, #0
 8009016:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	2200      	movs	r2, #0
 800901c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	2200      	movs	r2, #0
 8009022:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	689b      	ldr	r3, [r3, #8]
 8009028:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800902c:	d10f      	bne.n	800904e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	681a      	ldr	r2, [r3, #0]
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800903c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	681a      	ldr	r2, [r3, #0]
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800904c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009058:	2b40      	cmp	r3, #64	; 0x40
 800905a:	d007      	beq.n	800906c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	681a      	ldr	r2, [r3, #0]
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800906a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	68db      	ldr	r3, [r3, #12]
 8009070:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009074:	d14b      	bne.n	800910e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	685b      	ldr	r3, [r3, #4]
 800907a:	2b00      	cmp	r3, #0
 800907c:	d002      	beq.n	8009084 <HAL_SPI_Transmit+0xf6>
 800907e:	8afb      	ldrh	r3, [r7, #22]
 8009080:	2b01      	cmp	r3, #1
 8009082:	d13e      	bne.n	8009102 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009088:	881a      	ldrh	r2, [r3, #0]
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009094:	1c9a      	adds	r2, r3, #2
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800909e:	b29b      	uxth	r3, r3
 80090a0:	3b01      	subs	r3, #1
 80090a2:	b29a      	uxth	r2, r3
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80090a8:	e02b      	b.n	8009102 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	689b      	ldr	r3, [r3, #8]
 80090b0:	f003 0302 	and.w	r3, r3, #2
 80090b4:	2b02      	cmp	r3, #2
 80090b6:	d112      	bne.n	80090de <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090bc:	881a      	ldrh	r2, [r3, #0]
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090c8:	1c9a      	adds	r2, r3, #2
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80090d2:	b29b      	uxth	r3, r3
 80090d4:	3b01      	subs	r3, #1
 80090d6:	b29a      	uxth	r2, r3
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	86da      	strh	r2, [r3, #54]	; 0x36
 80090dc:	e011      	b.n	8009102 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80090de:	f7fc ffb9 	bl	8006054 <HAL_GetTick>
 80090e2:	4602      	mov	r2, r0
 80090e4:	69bb      	ldr	r3, [r7, #24]
 80090e6:	1ad3      	subs	r3, r2, r3
 80090e8:	683a      	ldr	r2, [r7, #0]
 80090ea:	429a      	cmp	r2, r3
 80090ec:	d803      	bhi.n	80090f6 <HAL_SPI_Transmit+0x168>
 80090ee:	683b      	ldr	r3, [r7, #0]
 80090f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090f4:	d102      	bne.n	80090fc <HAL_SPI_Transmit+0x16e>
 80090f6:	683b      	ldr	r3, [r7, #0]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d102      	bne.n	8009102 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80090fc:	2303      	movs	r3, #3
 80090fe:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009100:	e074      	b.n	80091ec <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009106:	b29b      	uxth	r3, r3
 8009108:	2b00      	cmp	r3, #0
 800910a:	d1ce      	bne.n	80090aa <HAL_SPI_Transmit+0x11c>
 800910c:	e04c      	b.n	80091a8 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	685b      	ldr	r3, [r3, #4]
 8009112:	2b00      	cmp	r3, #0
 8009114:	d002      	beq.n	800911c <HAL_SPI_Transmit+0x18e>
 8009116:	8afb      	ldrh	r3, [r7, #22]
 8009118:	2b01      	cmp	r3, #1
 800911a:	d140      	bne.n	800919e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	330c      	adds	r3, #12
 8009126:	7812      	ldrb	r2, [r2, #0]
 8009128:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800912e:	1c5a      	adds	r2, r3, #1
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009138:	b29b      	uxth	r3, r3
 800913a:	3b01      	subs	r3, #1
 800913c:	b29a      	uxth	r2, r3
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8009142:	e02c      	b.n	800919e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	689b      	ldr	r3, [r3, #8]
 800914a:	f003 0302 	and.w	r3, r3, #2
 800914e:	2b02      	cmp	r3, #2
 8009150:	d113      	bne.n	800917a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	330c      	adds	r3, #12
 800915c:	7812      	ldrb	r2, [r2, #0]
 800915e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009164:	1c5a      	adds	r2, r3, #1
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800916e:	b29b      	uxth	r3, r3
 8009170:	3b01      	subs	r3, #1
 8009172:	b29a      	uxth	r2, r3
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	86da      	strh	r2, [r3, #54]	; 0x36
 8009178:	e011      	b.n	800919e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800917a:	f7fc ff6b 	bl	8006054 <HAL_GetTick>
 800917e:	4602      	mov	r2, r0
 8009180:	69bb      	ldr	r3, [r7, #24]
 8009182:	1ad3      	subs	r3, r2, r3
 8009184:	683a      	ldr	r2, [r7, #0]
 8009186:	429a      	cmp	r2, r3
 8009188:	d803      	bhi.n	8009192 <HAL_SPI_Transmit+0x204>
 800918a:	683b      	ldr	r3, [r7, #0]
 800918c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009190:	d102      	bne.n	8009198 <HAL_SPI_Transmit+0x20a>
 8009192:	683b      	ldr	r3, [r7, #0]
 8009194:	2b00      	cmp	r3, #0
 8009196:	d102      	bne.n	800919e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8009198:	2303      	movs	r3, #3
 800919a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800919c:	e026      	b.n	80091ec <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80091a2:	b29b      	uxth	r3, r3
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d1cd      	bne.n	8009144 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80091a8:	69ba      	ldr	r2, [r7, #24]
 80091aa:	6839      	ldr	r1, [r7, #0]
 80091ac:	68f8      	ldr	r0, [r7, #12]
 80091ae:	f000 fa63 	bl	8009678 <SPI_EndRxTxTransaction>
 80091b2:	4603      	mov	r3, r0
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d002      	beq.n	80091be <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	2220      	movs	r2, #32
 80091bc:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	689b      	ldr	r3, [r3, #8]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d10a      	bne.n	80091dc <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80091c6:	2300      	movs	r3, #0
 80091c8:	613b      	str	r3, [r7, #16]
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	68db      	ldr	r3, [r3, #12]
 80091d0:	613b      	str	r3, [r7, #16]
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	689b      	ldr	r3, [r3, #8]
 80091d8:	613b      	str	r3, [r7, #16]
 80091da:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d002      	beq.n	80091ea <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80091e4:	2301      	movs	r3, #1
 80091e6:	77fb      	strb	r3, [r7, #31]
 80091e8:	e000      	b.n	80091ec <HAL_SPI_Transmit+0x25e>
  }

error:
 80091ea:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	2201      	movs	r2, #1
 80091f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	2200      	movs	r2, #0
 80091f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80091fc:	7ffb      	ldrb	r3, [r7, #31]
}
 80091fe:	4618      	mov	r0, r3
 8009200:	3720      	adds	r7, #32
 8009202:	46bd      	mov	sp, r7
 8009204:	bd80      	pop	{r7, pc}

08009206 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8009206:	b580      	push	{r7, lr}
 8009208:	b08c      	sub	sp, #48	; 0x30
 800920a:	af00      	add	r7, sp, #0
 800920c:	60f8      	str	r0, [r7, #12]
 800920e:	60b9      	str	r1, [r7, #8]
 8009210:	607a      	str	r2, [r7, #4]
 8009212:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8009214:	2301      	movs	r3, #1
 8009216:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8009218:	2300      	movs	r3, #0
 800921a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009224:	2b01      	cmp	r3, #1
 8009226:	d101      	bne.n	800922c <HAL_SPI_TransmitReceive+0x26>
 8009228:	2302      	movs	r3, #2
 800922a:	e18a      	b.n	8009542 <HAL_SPI_TransmitReceive+0x33c>
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	2201      	movs	r2, #1
 8009230:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009234:	f7fc ff0e 	bl	8006054 <HAL_GetTick>
 8009238:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009240:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	685b      	ldr	r3, [r3, #4]
 8009248:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800924a:	887b      	ldrh	r3, [r7, #2]
 800924c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800924e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009252:	2b01      	cmp	r3, #1
 8009254:	d00f      	beq.n	8009276 <HAL_SPI_TransmitReceive+0x70>
 8009256:	69fb      	ldr	r3, [r7, #28]
 8009258:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800925c:	d107      	bne.n	800926e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	689b      	ldr	r3, [r3, #8]
 8009262:	2b00      	cmp	r3, #0
 8009264:	d103      	bne.n	800926e <HAL_SPI_TransmitReceive+0x68>
 8009266:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800926a:	2b04      	cmp	r3, #4
 800926c:	d003      	beq.n	8009276 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800926e:	2302      	movs	r3, #2
 8009270:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8009274:	e15b      	b.n	800952e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009276:	68bb      	ldr	r3, [r7, #8]
 8009278:	2b00      	cmp	r3, #0
 800927a:	d005      	beq.n	8009288 <HAL_SPI_TransmitReceive+0x82>
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	2b00      	cmp	r3, #0
 8009280:	d002      	beq.n	8009288 <HAL_SPI_TransmitReceive+0x82>
 8009282:	887b      	ldrh	r3, [r7, #2]
 8009284:	2b00      	cmp	r3, #0
 8009286:	d103      	bne.n	8009290 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8009288:	2301      	movs	r3, #1
 800928a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800928e:	e14e      	b.n	800952e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009296:	b2db      	uxtb	r3, r3
 8009298:	2b04      	cmp	r3, #4
 800929a:	d003      	beq.n	80092a4 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	2205      	movs	r2, #5
 80092a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	2200      	movs	r2, #0
 80092a8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	687a      	ldr	r2, [r7, #4]
 80092ae:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	887a      	ldrh	r2, [r7, #2]
 80092b4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	887a      	ldrh	r2, [r7, #2]
 80092ba:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	68ba      	ldr	r2, [r7, #8]
 80092c0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	887a      	ldrh	r2, [r7, #2]
 80092c6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	887a      	ldrh	r2, [r7, #2]
 80092cc:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	2200      	movs	r2, #0
 80092d2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	2200      	movs	r2, #0
 80092d8:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092e4:	2b40      	cmp	r3, #64	; 0x40
 80092e6:	d007      	beq.n	80092f8 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	681a      	ldr	r2, [r3, #0]
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80092f6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	68db      	ldr	r3, [r3, #12]
 80092fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009300:	d178      	bne.n	80093f4 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	685b      	ldr	r3, [r3, #4]
 8009306:	2b00      	cmp	r3, #0
 8009308:	d002      	beq.n	8009310 <HAL_SPI_TransmitReceive+0x10a>
 800930a:	8b7b      	ldrh	r3, [r7, #26]
 800930c:	2b01      	cmp	r3, #1
 800930e:	d166      	bne.n	80093de <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009314:	881a      	ldrh	r2, [r3, #0]
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009320:	1c9a      	adds	r2, r3, #2
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800932a:	b29b      	uxth	r3, r3
 800932c:	3b01      	subs	r3, #1
 800932e:	b29a      	uxth	r2, r3
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009334:	e053      	b.n	80093de <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	689b      	ldr	r3, [r3, #8]
 800933c:	f003 0302 	and.w	r3, r3, #2
 8009340:	2b02      	cmp	r3, #2
 8009342:	d11b      	bne.n	800937c <HAL_SPI_TransmitReceive+0x176>
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009348:	b29b      	uxth	r3, r3
 800934a:	2b00      	cmp	r3, #0
 800934c:	d016      	beq.n	800937c <HAL_SPI_TransmitReceive+0x176>
 800934e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009350:	2b01      	cmp	r3, #1
 8009352:	d113      	bne.n	800937c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009358:	881a      	ldrh	r2, [r3, #0]
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009364:	1c9a      	adds	r2, r3, #2
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800936e:	b29b      	uxth	r3, r3
 8009370:	3b01      	subs	r3, #1
 8009372:	b29a      	uxth	r2, r3
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009378:	2300      	movs	r3, #0
 800937a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	689b      	ldr	r3, [r3, #8]
 8009382:	f003 0301 	and.w	r3, r3, #1
 8009386:	2b01      	cmp	r3, #1
 8009388:	d119      	bne.n	80093be <HAL_SPI_TransmitReceive+0x1b8>
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800938e:	b29b      	uxth	r3, r3
 8009390:	2b00      	cmp	r3, #0
 8009392:	d014      	beq.n	80093be <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	68da      	ldr	r2, [r3, #12]
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800939e:	b292      	uxth	r2, r2
 80093a0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093a6:	1c9a      	adds	r2, r3, #2
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80093b0:	b29b      	uxth	r3, r3
 80093b2:	3b01      	subs	r3, #1
 80093b4:	b29a      	uxth	r2, r3
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80093ba:	2301      	movs	r3, #1
 80093bc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80093be:	f7fc fe49 	bl	8006054 <HAL_GetTick>
 80093c2:	4602      	mov	r2, r0
 80093c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093c6:	1ad3      	subs	r3, r2, r3
 80093c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80093ca:	429a      	cmp	r2, r3
 80093cc:	d807      	bhi.n	80093de <HAL_SPI_TransmitReceive+0x1d8>
 80093ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093d4:	d003      	beq.n	80093de <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80093d6:	2303      	movs	r3, #3
 80093d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80093dc:	e0a7      	b.n	800952e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80093e2:	b29b      	uxth	r3, r3
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d1a6      	bne.n	8009336 <HAL_SPI_TransmitReceive+0x130>
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80093ec:	b29b      	uxth	r3, r3
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d1a1      	bne.n	8009336 <HAL_SPI_TransmitReceive+0x130>
 80093f2:	e07c      	b.n	80094ee <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	685b      	ldr	r3, [r3, #4]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d002      	beq.n	8009402 <HAL_SPI_TransmitReceive+0x1fc>
 80093fc:	8b7b      	ldrh	r3, [r7, #26]
 80093fe:	2b01      	cmp	r3, #1
 8009400:	d16b      	bne.n	80094da <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	330c      	adds	r3, #12
 800940c:	7812      	ldrb	r2, [r2, #0]
 800940e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009414:	1c5a      	adds	r2, r3, #1
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800941e:	b29b      	uxth	r3, r3
 8009420:	3b01      	subs	r3, #1
 8009422:	b29a      	uxth	r2, r3
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009428:	e057      	b.n	80094da <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	689b      	ldr	r3, [r3, #8]
 8009430:	f003 0302 	and.w	r3, r3, #2
 8009434:	2b02      	cmp	r3, #2
 8009436:	d11c      	bne.n	8009472 <HAL_SPI_TransmitReceive+0x26c>
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800943c:	b29b      	uxth	r3, r3
 800943e:	2b00      	cmp	r3, #0
 8009440:	d017      	beq.n	8009472 <HAL_SPI_TransmitReceive+0x26c>
 8009442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009444:	2b01      	cmp	r3, #1
 8009446:	d114      	bne.n	8009472 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	330c      	adds	r3, #12
 8009452:	7812      	ldrb	r2, [r2, #0]
 8009454:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800945a:	1c5a      	adds	r2, r3, #1
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009464:	b29b      	uxth	r3, r3
 8009466:	3b01      	subs	r3, #1
 8009468:	b29a      	uxth	r2, r3
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800946e:	2300      	movs	r3, #0
 8009470:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	689b      	ldr	r3, [r3, #8]
 8009478:	f003 0301 	and.w	r3, r3, #1
 800947c:	2b01      	cmp	r3, #1
 800947e:	d119      	bne.n	80094b4 <HAL_SPI_TransmitReceive+0x2ae>
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009484:	b29b      	uxth	r3, r3
 8009486:	2b00      	cmp	r3, #0
 8009488:	d014      	beq.n	80094b4 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	68da      	ldr	r2, [r3, #12]
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009494:	b2d2      	uxtb	r2, r2
 8009496:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800949c:	1c5a      	adds	r2, r3, #1
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80094a6:	b29b      	uxth	r3, r3
 80094a8:	3b01      	subs	r3, #1
 80094aa:	b29a      	uxth	r2, r3
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80094b0:	2301      	movs	r3, #1
 80094b2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80094b4:	f7fc fdce 	bl	8006054 <HAL_GetTick>
 80094b8:	4602      	mov	r2, r0
 80094ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094bc:	1ad3      	subs	r3, r2, r3
 80094be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80094c0:	429a      	cmp	r2, r3
 80094c2:	d803      	bhi.n	80094cc <HAL_SPI_TransmitReceive+0x2c6>
 80094c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094ca:	d102      	bne.n	80094d2 <HAL_SPI_TransmitReceive+0x2cc>
 80094cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d103      	bne.n	80094da <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80094d2:	2303      	movs	r3, #3
 80094d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80094d8:	e029      	b.n	800952e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80094de:	b29b      	uxth	r3, r3
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d1a2      	bne.n	800942a <HAL_SPI_TransmitReceive+0x224>
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80094e8:	b29b      	uxth	r3, r3
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d19d      	bne.n	800942a <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80094ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80094f0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80094f2:	68f8      	ldr	r0, [r7, #12]
 80094f4:	f000 f8c0 	bl	8009678 <SPI_EndRxTxTransaction>
 80094f8:	4603      	mov	r3, r0
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d006      	beq.n	800950c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80094fe:	2301      	movs	r3, #1
 8009500:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	2220      	movs	r2, #32
 8009508:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800950a:	e010      	b.n	800952e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	689b      	ldr	r3, [r3, #8]
 8009510:	2b00      	cmp	r3, #0
 8009512:	d10b      	bne.n	800952c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009514:	2300      	movs	r3, #0
 8009516:	617b      	str	r3, [r7, #20]
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	68db      	ldr	r3, [r3, #12]
 800951e:	617b      	str	r3, [r7, #20]
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	689b      	ldr	r3, [r3, #8]
 8009526:	617b      	str	r3, [r7, #20]
 8009528:	697b      	ldr	r3, [r7, #20]
 800952a:	e000      	b.n	800952e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800952c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	2201      	movs	r2, #1
 8009532:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	2200      	movs	r2, #0
 800953a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800953e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8009542:	4618      	mov	r0, r3
 8009544:	3730      	adds	r7, #48	; 0x30
 8009546:	46bd      	mov	sp, r7
 8009548:	bd80      	pop	{r7, pc}

0800954a <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800954a:	b480      	push	{r7}
 800954c:	b083      	sub	sp, #12
 800954e:	af00      	add	r7, sp, #0
 8009550:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009558:	b2db      	uxtb	r3, r3
}
 800955a:	4618      	mov	r0, r3
 800955c:	370c      	adds	r7, #12
 800955e:	46bd      	mov	sp, r7
 8009560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009564:	4770      	bx	lr
	...

08009568 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009568:	b580      	push	{r7, lr}
 800956a:	b088      	sub	sp, #32
 800956c:	af00      	add	r7, sp, #0
 800956e:	60f8      	str	r0, [r7, #12]
 8009570:	60b9      	str	r1, [r7, #8]
 8009572:	603b      	str	r3, [r7, #0]
 8009574:	4613      	mov	r3, r2
 8009576:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009578:	f7fc fd6c 	bl	8006054 <HAL_GetTick>
 800957c:	4602      	mov	r2, r0
 800957e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009580:	1a9b      	subs	r3, r3, r2
 8009582:	683a      	ldr	r2, [r7, #0]
 8009584:	4413      	add	r3, r2
 8009586:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009588:	f7fc fd64 	bl	8006054 <HAL_GetTick>
 800958c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800958e:	4b39      	ldr	r3, [pc, #228]	; (8009674 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	015b      	lsls	r3, r3, #5
 8009594:	0d1b      	lsrs	r3, r3, #20
 8009596:	69fa      	ldr	r2, [r7, #28]
 8009598:	fb02 f303 	mul.w	r3, r2, r3
 800959c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800959e:	e054      	b.n	800964a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80095a0:	683b      	ldr	r3, [r7, #0]
 80095a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095a6:	d050      	beq.n	800964a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80095a8:	f7fc fd54 	bl	8006054 <HAL_GetTick>
 80095ac:	4602      	mov	r2, r0
 80095ae:	69bb      	ldr	r3, [r7, #24]
 80095b0:	1ad3      	subs	r3, r2, r3
 80095b2:	69fa      	ldr	r2, [r7, #28]
 80095b4:	429a      	cmp	r2, r3
 80095b6:	d902      	bls.n	80095be <SPI_WaitFlagStateUntilTimeout+0x56>
 80095b8:	69fb      	ldr	r3, [r7, #28]
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d13d      	bne.n	800963a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	685a      	ldr	r2, [r3, #4]
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80095cc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	685b      	ldr	r3, [r3, #4]
 80095d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80095d6:	d111      	bne.n	80095fc <SPI_WaitFlagStateUntilTimeout+0x94>
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	689b      	ldr	r3, [r3, #8]
 80095dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80095e0:	d004      	beq.n	80095ec <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	689b      	ldr	r3, [r3, #8]
 80095e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80095ea:	d107      	bne.n	80095fc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	681a      	ldr	r2, [r3, #0]
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80095fa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009600:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009604:	d10f      	bne.n	8009626 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	681a      	ldr	r2, [r3, #0]
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009614:	601a      	str	r2, [r3, #0]
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	681a      	ldr	r2, [r3, #0]
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009624:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	2201      	movs	r2, #1
 800962a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	2200      	movs	r2, #0
 8009632:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8009636:	2303      	movs	r3, #3
 8009638:	e017      	b.n	800966a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800963a:	697b      	ldr	r3, [r7, #20]
 800963c:	2b00      	cmp	r3, #0
 800963e:	d101      	bne.n	8009644 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009640:	2300      	movs	r3, #0
 8009642:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009644:	697b      	ldr	r3, [r7, #20]
 8009646:	3b01      	subs	r3, #1
 8009648:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	689a      	ldr	r2, [r3, #8]
 8009650:	68bb      	ldr	r3, [r7, #8]
 8009652:	4013      	ands	r3, r2
 8009654:	68ba      	ldr	r2, [r7, #8]
 8009656:	429a      	cmp	r2, r3
 8009658:	bf0c      	ite	eq
 800965a:	2301      	moveq	r3, #1
 800965c:	2300      	movne	r3, #0
 800965e:	b2db      	uxtb	r3, r3
 8009660:	461a      	mov	r2, r3
 8009662:	79fb      	ldrb	r3, [r7, #7]
 8009664:	429a      	cmp	r2, r3
 8009666:	d19b      	bne.n	80095a0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009668:	2300      	movs	r3, #0
}
 800966a:	4618      	mov	r0, r3
 800966c:	3720      	adds	r7, #32
 800966e:	46bd      	mov	sp, r7
 8009670:	bd80      	pop	{r7, pc}
 8009672:	bf00      	nop
 8009674:	2000000c 	.word	0x2000000c

08009678 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009678:	b580      	push	{r7, lr}
 800967a:	b088      	sub	sp, #32
 800967c:	af02      	add	r7, sp, #8
 800967e:	60f8      	str	r0, [r7, #12]
 8009680:	60b9      	str	r1, [r7, #8]
 8009682:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009684:	4b1b      	ldr	r3, [pc, #108]	; (80096f4 <SPI_EndRxTxTransaction+0x7c>)
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	4a1b      	ldr	r2, [pc, #108]	; (80096f8 <SPI_EndRxTxTransaction+0x80>)
 800968a:	fba2 2303 	umull	r2, r3, r2, r3
 800968e:	0d5b      	lsrs	r3, r3, #21
 8009690:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009694:	fb02 f303 	mul.w	r3, r2, r3
 8009698:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	685b      	ldr	r3, [r3, #4]
 800969e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80096a2:	d112      	bne.n	80096ca <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	9300      	str	r3, [sp, #0]
 80096a8:	68bb      	ldr	r3, [r7, #8]
 80096aa:	2200      	movs	r2, #0
 80096ac:	2180      	movs	r1, #128	; 0x80
 80096ae:	68f8      	ldr	r0, [r7, #12]
 80096b0:	f7ff ff5a 	bl	8009568 <SPI_WaitFlagStateUntilTimeout>
 80096b4:	4603      	mov	r3, r0
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d016      	beq.n	80096e8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096be:	f043 0220 	orr.w	r2, r3, #32
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80096c6:	2303      	movs	r3, #3
 80096c8:	e00f      	b.n	80096ea <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80096ca:	697b      	ldr	r3, [r7, #20]
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d00a      	beq.n	80096e6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80096d0:	697b      	ldr	r3, [r7, #20]
 80096d2:	3b01      	subs	r3, #1
 80096d4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	689b      	ldr	r3, [r3, #8]
 80096dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80096e0:	2b80      	cmp	r3, #128	; 0x80
 80096e2:	d0f2      	beq.n	80096ca <SPI_EndRxTxTransaction+0x52>
 80096e4:	e000      	b.n	80096e8 <SPI_EndRxTxTransaction+0x70>
        break;
 80096e6:	bf00      	nop
  }

  return HAL_OK;
 80096e8:	2300      	movs	r3, #0
}
 80096ea:	4618      	mov	r0, r3
 80096ec:	3718      	adds	r7, #24
 80096ee:	46bd      	mov	sp, r7
 80096f0:	bd80      	pop	{r7, pc}
 80096f2:	bf00      	nop
 80096f4:	2000000c 	.word	0x2000000c
 80096f8:	165e9f81 	.word	0x165e9f81

080096fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80096fc:	b580      	push	{r7, lr}
 80096fe:	b082      	sub	sp, #8
 8009700:	af00      	add	r7, sp, #0
 8009702:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	2b00      	cmp	r3, #0
 8009708:	d101      	bne.n	800970e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800970a:	2301      	movs	r3, #1
 800970c:	e041      	b.n	8009792 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009714:	b2db      	uxtb	r3, r3
 8009716:	2b00      	cmp	r3, #0
 8009718:	d106      	bne.n	8009728 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	2200      	movs	r2, #0
 800971e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009722:	6878      	ldr	r0, [r7, #4]
 8009724:	f7fa fb62 	bl	8003dec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	2202      	movs	r2, #2
 800972c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681a      	ldr	r2, [r3, #0]
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	3304      	adds	r3, #4
 8009738:	4619      	mov	r1, r3
 800973a:	4610      	mov	r0, r2
 800973c:	f000 fe54 	bl	800a3e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	2201      	movs	r2, #1
 8009744:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	2201      	movs	r2, #1
 800974c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	2201      	movs	r2, #1
 8009754:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	2201      	movs	r2, #1
 800975c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	2201      	movs	r2, #1
 8009764:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	2201      	movs	r2, #1
 800976c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	2201      	movs	r2, #1
 8009774:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	2201      	movs	r2, #1
 800977c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	2201      	movs	r2, #1
 8009784:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	2201      	movs	r2, #1
 800978c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009790:	2300      	movs	r3, #0
}
 8009792:	4618      	mov	r0, r3
 8009794:	3708      	adds	r7, #8
 8009796:	46bd      	mov	sp, r7
 8009798:	bd80      	pop	{r7, pc}
	...

0800979c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800979c:	b480      	push	{r7}
 800979e:	b085      	sub	sp, #20
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80097aa:	b2db      	uxtb	r3, r3
 80097ac:	2b01      	cmp	r3, #1
 80097ae:	d001      	beq.n	80097b4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80097b0:	2301      	movs	r3, #1
 80097b2:	e046      	b.n	8009842 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	2202      	movs	r2, #2
 80097b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	4a23      	ldr	r2, [pc, #140]	; (8009850 <HAL_TIM_Base_Start+0xb4>)
 80097c2:	4293      	cmp	r3, r2
 80097c4:	d022      	beq.n	800980c <HAL_TIM_Base_Start+0x70>
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80097ce:	d01d      	beq.n	800980c <HAL_TIM_Base_Start+0x70>
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	4a1f      	ldr	r2, [pc, #124]	; (8009854 <HAL_TIM_Base_Start+0xb8>)
 80097d6:	4293      	cmp	r3, r2
 80097d8:	d018      	beq.n	800980c <HAL_TIM_Base_Start+0x70>
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	4a1e      	ldr	r2, [pc, #120]	; (8009858 <HAL_TIM_Base_Start+0xbc>)
 80097e0:	4293      	cmp	r3, r2
 80097e2:	d013      	beq.n	800980c <HAL_TIM_Base_Start+0x70>
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	4a1c      	ldr	r2, [pc, #112]	; (800985c <HAL_TIM_Base_Start+0xc0>)
 80097ea:	4293      	cmp	r3, r2
 80097ec:	d00e      	beq.n	800980c <HAL_TIM_Base_Start+0x70>
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	4a1b      	ldr	r2, [pc, #108]	; (8009860 <HAL_TIM_Base_Start+0xc4>)
 80097f4:	4293      	cmp	r3, r2
 80097f6:	d009      	beq.n	800980c <HAL_TIM_Base_Start+0x70>
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	4a19      	ldr	r2, [pc, #100]	; (8009864 <HAL_TIM_Base_Start+0xc8>)
 80097fe:	4293      	cmp	r3, r2
 8009800:	d004      	beq.n	800980c <HAL_TIM_Base_Start+0x70>
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	4a18      	ldr	r2, [pc, #96]	; (8009868 <HAL_TIM_Base_Start+0xcc>)
 8009808:	4293      	cmp	r3, r2
 800980a:	d111      	bne.n	8009830 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	689b      	ldr	r3, [r3, #8]
 8009812:	f003 0307 	and.w	r3, r3, #7
 8009816:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	2b06      	cmp	r3, #6
 800981c:	d010      	beq.n	8009840 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	681a      	ldr	r2, [r3, #0]
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	f042 0201 	orr.w	r2, r2, #1
 800982c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800982e:	e007      	b.n	8009840 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	681a      	ldr	r2, [r3, #0]
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	f042 0201 	orr.w	r2, r2, #1
 800983e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009840:	2300      	movs	r3, #0
}
 8009842:	4618      	mov	r0, r3
 8009844:	3714      	adds	r7, #20
 8009846:	46bd      	mov	sp, r7
 8009848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800984c:	4770      	bx	lr
 800984e:	bf00      	nop
 8009850:	40010000 	.word	0x40010000
 8009854:	40000400 	.word	0x40000400
 8009858:	40000800 	.word	0x40000800
 800985c:	40000c00 	.word	0x40000c00
 8009860:	40010400 	.word	0x40010400
 8009864:	40014000 	.word	0x40014000
 8009868:	40001800 	.word	0x40001800

0800986c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800986c:	b480      	push	{r7}
 800986e:	b085      	sub	sp, #20
 8009870:	af00      	add	r7, sp, #0
 8009872:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800987a:	b2db      	uxtb	r3, r3
 800987c:	2b01      	cmp	r3, #1
 800987e:	d001      	beq.n	8009884 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009880:	2301      	movs	r3, #1
 8009882:	e04e      	b.n	8009922 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	2202      	movs	r2, #2
 8009888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	68da      	ldr	r2, [r3, #12]
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	f042 0201 	orr.w	r2, r2, #1
 800989a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	4a23      	ldr	r2, [pc, #140]	; (8009930 <HAL_TIM_Base_Start_IT+0xc4>)
 80098a2:	4293      	cmp	r3, r2
 80098a4:	d022      	beq.n	80098ec <HAL_TIM_Base_Start_IT+0x80>
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80098ae:	d01d      	beq.n	80098ec <HAL_TIM_Base_Start_IT+0x80>
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	4a1f      	ldr	r2, [pc, #124]	; (8009934 <HAL_TIM_Base_Start_IT+0xc8>)
 80098b6:	4293      	cmp	r3, r2
 80098b8:	d018      	beq.n	80098ec <HAL_TIM_Base_Start_IT+0x80>
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	4a1e      	ldr	r2, [pc, #120]	; (8009938 <HAL_TIM_Base_Start_IT+0xcc>)
 80098c0:	4293      	cmp	r3, r2
 80098c2:	d013      	beq.n	80098ec <HAL_TIM_Base_Start_IT+0x80>
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	4a1c      	ldr	r2, [pc, #112]	; (800993c <HAL_TIM_Base_Start_IT+0xd0>)
 80098ca:	4293      	cmp	r3, r2
 80098cc:	d00e      	beq.n	80098ec <HAL_TIM_Base_Start_IT+0x80>
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	4a1b      	ldr	r2, [pc, #108]	; (8009940 <HAL_TIM_Base_Start_IT+0xd4>)
 80098d4:	4293      	cmp	r3, r2
 80098d6:	d009      	beq.n	80098ec <HAL_TIM_Base_Start_IT+0x80>
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	4a19      	ldr	r2, [pc, #100]	; (8009944 <HAL_TIM_Base_Start_IT+0xd8>)
 80098de:	4293      	cmp	r3, r2
 80098e0:	d004      	beq.n	80098ec <HAL_TIM_Base_Start_IT+0x80>
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	4a18      	ldr	r2, [pc, #96]	; (8009948 <HAL_TIM_Base_Start_IT+0xdc>)
 80098e8:	4293      	cmp	r3, r2
 80098ea:	d111      	bne.n	8009910 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	689b      	ldr	r3, [r3, #8]
 80098f2:	f003 0307 	and.w	r3, r3, #7
 80098f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	2b06      	cmp	r3, #6
 80098fc:	d010      	beq.n	8009920 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	681a      	ldr	r2, [r3, #0]
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	f042 0201 	orr.w	r2, r2, #1
 800990c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800990e:	e007      	b.n	8009920 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	681a      	ldr	r2, [r3, #0]
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	f042 0201 	orr.w	r2, r2, #1
 800991e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009920:	2300      	movs	r3, #0
}
 8009922:	4618      	mov	r0, r3
 8009924:	3714      	adds	r7, #20
 8009926:	46bd      	mov	sp, r7
 8009928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800992c:	4770      	bx	lr
 800992e:	bf00      	nop
 8009930:	40010000 	.word	0x40010000
 8009934:	40000400 	.word	0x40000400
 8009938:	40000800 	.word	0x40000800
 800993c:	40000c00 	.word	0x40000c00
 8009940:	40010400 	.word	0x40010400
 8009944:	40014000 	.word	0x40014000
 8009948:	40001800 	.word	0x40001800

0800994c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800994c:	b580      	push	{r7, lr}
 800994e:	b082      	sub	sp, #8
 8009950:	af00      	add	r7, sp, #0
 8009952:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	2b00      	cmp	r3, #0
 8009958:	d101      	bne.n	800995e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800995a:	2301      	movs	r3, #1
 800995c:	e041      	b.n	80099e2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009964:	b2db      	uxtb	r3, r3
 8009966:	2b00      	cmp	r3, #0
 8009968:	d106      	bne.n	8009978 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	2200      	movs	r2, #0
 800996e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009972:	6878      	ldr	r0, [r7, #4]
 8009974:	f000 f839 	bl	80099ea <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	2202      	movs	r2, #2
 800997c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	681a      	ldr	r2, [r3, #0]
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	3304      	adds	r3, #4
 8009988:	4619      	mov	r1, r3
 800998a:	4610      	mov	r0, r2
 800998c:	f000 fd2c 	bl	800a3e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	2201      	movs	r2, #1
 8009994:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	2201      	movs	r2, #1
 800999c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	2201      	movs	r2, #1
 80099a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	2201      	movs	r2, #1
 80099ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	2201      	movs	r2, #1
 80099b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	2201      	movs	r2, #1
 80099bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	2201      	movs	r2, #1
 80099c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	2201      	movs	r2, #1
 80099cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	2201      	movs	r2, #1
 80099d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	2201      	movs	r2, #1
 80099dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80099e0:	2300      	movs	r3, #0
}
 80099e2:	4618      	mov	r0, r3
 80099e4:	3708      	adds	r7, #8
 80099e6:	46bd      	mov	sp, r7
 80099e8:	bd80      	pop	{r7, pc}

080099ea <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80099ea:	b480      	push	{r7}
 80099ec:	b083      	sub	sp, #12
 80099ee:	af00      	add	r7, sp, #0
 80099f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80099f2:	bf00      	nop
 80099f4:	370c      	adds	r7, #12
 80099f6:	46bd      	mov	sp, r7
 80099f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099fc:	4770      	bx	lr
	...

08009a00 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009a00:	b580      	push	{r7, lr}
 8009a02:	b084      	sub	sp, #16
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	6078      	str	r0, [r7, #4]
 8009a08:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009a0a:	683b      	ldr	r3, [r7, #0]
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d109      	bne.n	8009a24 <HAL_TIM_PWM_Start+0x24>
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009a16:	b2db      	uxtb	r3, r3
 8009a18:	2b01      	cmp	r3, #1
 8009a1a:	bf14      	ite	ne
 8009a1c:	2301      	movne	r3, #1
 8009a1e:	2300      	moveq	r3, #0
 8009a20:	b2db      	uxtb	r3, r3
 8009a22:	e022      	b.n	8009a6a <HAL_TIM_PWM_Start+0x6a>
 8009a24:	683b      	ldr	r3, [r7, #0]
 8009a26:	2b04      	cmp	r3, #4
 8009a28:	d109      	bne.n	8009a3e <HAL_TIM_PWM_Start+0x3e>
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009a30:	b2db      	uxtb	r3, r3
 8009a32:	2b01      	cmp	r3, #1
 8009a34:	bf14      	ite	ne
 8009a36:	2301      	movne	r3, #1
 8009a38:	2300      	moveq	r3, #0
 8009a3a:	b2db      	uxtb	r3, r3
 8009a3c:	e015      	b.n	8009a6a <HAL_TIM_PWM_Start+0x6a>
 8009a3e:	683b      	ldr	r3, [r7, #0]
 8009a40:	2b08      	cmp	r3, #8
 8009a42:	d109      	bne.n	8009a58 <HAL_TIM_PWM_Start+0x58>
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009a4a:	b2db      	uxtb	r3, r3
 8009a4c:	2b01      	cmp	r3, #1
 8009a4e:	bf14      	ite	ne
 8009a50:	2301      	movne	r3, #1
 8009a52:	2300      	moveq	r3, #0
 8009a54:	b2db      	uxtb	r3, r3
 8009a56:	e008      	b.n	8009a6a <HAL_TIM_PWM_Start+0x6a>
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009a5e:	b2db      	uxtb	r3, r3
 8009a60:	2b01      	cmp	r3, #1
 8009a62:	bf14      	ite	ne
 8009a64:	2301      	movne	r3, #1
 8009a66:	2300      	moveq	r3, #0
 8009a68:	b2db      	uxtb	r3, r3
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d001      	beq.n	8009a72 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8009a6e:	2301      	movs	r3, #1
 8009a70:	e07c      	b.n	8009b6c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009a72:	683b      	ldr	r3, [r7, #0]
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d104      	bne.n	8009a82 <HAL_TIM_PWM_Start+0x82>
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	2202      	movs	r2, #2
 8009a7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009a80:	e013      	b.n	8009aaa <HAL_TIM_PWM_Start+0xaa>
 8009a82:	683b      	ldr	r3, [r7, #0]
 8009a84:	2b04      	cmp	r3, #4
 8009a86:	d104      	bne.n	8009a92 <HAL_TIM_PWM_Start+0x92>
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	2202      	movs	r2, #2
 8009a8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009a90:	e00b      	b.n	8009aaa <HAL_TIM_PWM_Start+0xaa>
 8009a92:	683b      	ldr	r3, [r7, #0]
 8009a94:	2b08      	cmp	r3, #8
 8009a96:	d104      	bne.n	8009aa2 <HAL_TIM_PWM_Start+0xa2>
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	2202      	movs	r2, #2
 8009a9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009aa0:	e003      	b.n	8009aaa <HAL_TIM_PWM_Start+0xaa>
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	2202      	movs	r2, #2
 8009aa6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	2201      	movs	r2, #1
 8009ab0:	6839      	ldr	r1, [r7, #0]
 8009ab2:	4618      	mov	r0, r3
 8009ab4:	f001 f93e 	bl	800ad34 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	4a2d      	ldr	r2, [pc, #180]	; (8009b74 <HAL_TIM_PWM_Start+0x174>)
 8009abe:	4293      	cmp	r3, r2
 8009ac0:	d004      	beq.n	8009acc <HAL_TIM_PWM_Start+0xcc>
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	4a2c      	ldr	r2, [pc, #176]	; (8009b78 <HAL_TIM_PWM_Start+0x178>)
 8009ac8:	4293      	cmp	r3, r2
 8009aca:	d101      	bne.n	8009ad0 <HAL_TIM_PWM_Start+0xd0>
 8009acc:	2301      	movs	r3, #1
 8009ace:	e000      	b.n	8009ad2 <HAL_TIM_PWM_Start+0xd2>
 8009ad0:	2300      	movs	r3, #0
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d007      	beq.n	8009ae6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009ae4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	4a22      	ldr	r2, [pc, #136]	; (8009b74 <HAL_TIM_PWM_Start+0x174>)
 8009aec:	4293      	cmp	r3, r2
 8009aee:	d022      	beq.n	8009b36 <HAL_TIM_PWM_Start+0x136>
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009af8:	d01d      	beq.n	8009b36 <HAL_TIM_PWM_Start+0x136>
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	4a1f      	ldr	r2, [pc, #124]	; (8009b7c <HAL_TIM_PWM_Start+0x17c>)
 8009b00:	4293      	cmp	r3, r2
 8009b02:	d018      	beq.n	8009b36 <HAL_TIM_PWM_Start+0x136>
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	4a1d      	ldr	r2, [pc, #116]	; (8009b80 <HAL_TIM_PWM_Start+0x180>)
 8009b0a:	4293      	cmp	r3, r2
 8009b0c:	d013      	beq.n	8009b36 <HAL_TIM_PWM_Start+0x136>
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	4a1c      	ldr	r2, [pc, #112]	; (8009b84 <HAL_TIM_PWM_Start+0x184>)
 8009b14:	4293      	cmp	r3, r2
 8009b16:	d00e      	beq.n	8009b36 <HAL_TIM_PWM_Start+0x136>
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	4a16      	ldr	r2, [pc, #88]	; (8009b78 <HAL_TIM_PWM_Start+0x178>)
 8009b1e:	4293      	cmp	r3, r2
 8009b20:	d009      	beq.n	8009b36 <HAL_TIM_PWM_Start+0x136>
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	4a18      	ldr	r2, [pc, #96]	; (8009b88 <HAL_TIM_PWM_Start+0x188>)
 8009b28:	4293      	cmp	r3, r2
 8009b2a:	d004      	beq.n	8009b36 <HAL_TIM_PWM_Start+0x136>
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	4a16      	ldr	r2, [pc, #88]	; (8009b8c <HAL_TIM_PWM_Start+0x18c>)
 8009b32:	4293      	cmp	r3, r2
 8009b34:	d111      	bne.n	8009b5a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	689b      	ldr	r3, [r3, #8]
 8009b3c:	f003 0307 	and.w	r3, r3, #7
 8009b40:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	2b06      	cmp	r3, #6
 8009b46:	d010      	beq.n	8009b6a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	681a      	ldr	r2, [r3, #0]
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	f042 0201 	orr.w	r2, r2, #1
 8009b56:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009b58:	e007      	b.n	8009b6a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	681a      	ldr	r2, [r3, #0]
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	f042 0201 	orr.w	r2, r2, #1
 8009b68:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009b6a:	2300      	movs	r3, #0
}
 8009b6c:	4618      	mov	r0, r3
 8009b6e:	3710      	adds	r7, #16
 8009b70:	46bd      	mov	sp, r7
 8009b72:	bd80      	pop	{r7, pc}
 8009b74:	40010000 	.word	0x40010000
 8009b78:	40010400 	.word	0x40010400
 8009b7c:	40000400 	.word	0x40000400
 8009b80:	40000800 	.word	0x40000800
 8009b84:	40000c00 	.word	0x40000c00
 8009b88:	40014000 	.word	0x40014000
 8009b8c:	40001800 	.word	0x40001800

08009b90 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8009b90:	b580      	push	{r7, lr}
 8009b92:	b082      	sub	sp, #8
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d101      	bne.n	8009ba2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8009b9e:	2301      	movs	r3, #1
 8009ba0:	e041      	b.n	8009c26 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009ba8:	b2db      	uxtb	r3, r3
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d106      	bne.n	8009bbc <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	2200      	movs	r2, #0
 8009bb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8009bb6:	6878      	ldr	r0, [r7, #4]
 8009bb8:	f000 f839 	bl	8009c2e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	2202      	movs	r2, #2
 8009bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	681a      	ldr	r2, [r3, #0]
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	3304      	adds	r3, #4
 8009bcc:	4619      	mov	r1, r3
 8009bce:	4610      	mov	r0, r2
 8009bd0:	f000 fc0a 	bl	800a3e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	2201      	movs	r2, #1
 8009bd8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	2201      	movs	r2, #1
 8009be0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	2201      	movs	r2, #1
 8009be8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	2201      	movs	r2, #1
 8009bf0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	2201      	movs	r2, #1
 8009bf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	2201      	movs	r2, #1
 8009c00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	2201      	movs	r2, #1
 8009c08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	2201      	movs	r2, #1
 8009c10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	2201      	movs	r2, #1
 8009c18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	2201      	movs	r2, #1
 8009c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009c24:	2300      	movs	r3, #0
}
 8009c26:	4618      	mov	r0, r3
 8009c28:	3708      	adds	r7, #8
 8009c2a:	46bd      	mov	sp, r7
 8009c2c:	bd80      	pop	{r7, pc}

08009c2e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8009c2e:	b480      	push	{r7}
 8009c30:	b083      	sub	sp, #12
 8009c32:	af00      	add	r7, sp, #0
 8009c34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8009c36:	bf00      	nop
 8009c38:	370c      	adds	r7, #12
 8009c3a:	46bd      	mov	sp, r7
 8009c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c40:	4770      	bx	lr

08009c42 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009c42:	b580      	push	{r7, lr}
 8009c44:	b082      	sub	sp, #8
 8009c46:	af00      	add	r7, sp, #0
 8009c48:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	691b      	ldr	r3, [r3, #16]
 8009c50:	f003 0302 	and.w	r3, r3, #2
 8009c54:	2b02      	cmp	r3, #2
 8009c56:	d122      	bne.n	8009c9e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	68db      	ldr	r3, [r3, #12]
 8009c5e:	f003 0302 	and.w	r3, r3, #2
 8009c62:	2b02      	cmp	r3, #2
 8009c64:	d11b      	bne.n	8009c9e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	f06f 0202 	mvn.w	r2, #2
 8009c6e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	2201      	movs	r2, #1
 8009c74:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	699b      	ldr	r3, [r3, #24]
 8009c7c:	f003 0303 	and.w	r3, r3, #3
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d003      	beq.n	8009c8c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009c84:	6878      	ldr	r0, [r7, #4]
 8009c86:	f7f8 fb93 	bl	80023b0 <HAL_TIM_IC_CaptureCallback>
 8009c8a:	e005      	b.n	8009c98 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009c8c:	6878      	ldr	r0, [r7, #4]
 8009c8e:	f000 fb8d 	bl	800a3ac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009c92:	6878      	ldr	r0, [r7, #4]
 8009c94:	f000 fb94 	bl	800a3c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	2200      	movs	r2, #0
 8009c9c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	691b      	ldr	r3, [r3, #16]
 8009ca4:	f003 0304 	and.w	r3, r3, #4
 8009ca8:	2b04      	cmp	r3, #4
 8009caa:	d122      	bne.n	8009cf2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	68db      	ldr	r3, [r3, #12]
 8009cb2:	f003 0304 	and.w	r3, r3, #4
 8009cb6:	2b04      	cmp	r3, #4
 8009cb8:	d11b      	bne.n	8009cf2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	f06f 0204 	mvn.w	r2, #4
 8009cc2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	2202      	movs	r2, #2
 8009cc8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	699b      	ldr	r3, [r3, #24]
 8009cd0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d003      	beq.n	8009ce0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009cd8:	6878      	ldr	r0, [r7, #4]
 8009cda:	f7f8 fb69 	bl	80023b0 <HAL_TIM_IC_CaptureCallback>
 8009cde:	e005      	b.n	8009cec <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009ce0:	6878      	ldr	r0, [r7, #4]
 8009ce2:	f000 fb63 	bl	800a3ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009ce6:	6878      	ldr	r0, [r7, #4]
 8009ce8:	f000 fb6a 	bl	800a3c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	2200      	movs	r2, #0
 8009cf0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	691b      	ldr	r3, [r3, #16]
 8009cf8:	f003 0308 	and.w	r3, r3, #8
 8009cfc:	2b08      	cmp	r3, #8
 8009cfe:	d122      	bne.n	8009d46 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	68db      	ldr	r3, [r3, #12]
 8009d06:	f003 0308 	and.w	r3, r3, #8
 8009d0a:	2b08      	cmp	r3, #8
 8009d0c:	d11b      	bne.n	8009d46 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	f06f 0208 	mvn.w	r2, #8
 8009d16:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	2204      	movs	r2, #4
 8009d1c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	69db      	ldr	r3, [r3, #28]
 8009d24:	f003 0303 	and.w	r3, r3, #3
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d003      	beq.n	8009d34 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009d2c:	6878      	ldr	r0, [r7, #4]
 8009d2e:	f7f8 fb3f 	bl	80023b0 <HAL_TIM_IC_CaptureCallback>
 8009d32:	e005      	b.n	8009d40 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009d34:	6878      	ldr	r0, [r7, #4]
 8009d36:	f000 fb39 	bl	800a3ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009d3a:	6878      	ldr	r0, [r7, #4]
 8009d3c:	f000 fb40 	bl	800a3c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	2200      	movs	r2, #0
 8009d44:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	691b      	ldr	r3, [r3, #16]
 8009d4c:	f003 0310 	and.w	r3, r3, #16
 8009d50:	2b10      	cmp	r3, #16
 8009d52:	d122      	bne.n	8009d9a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	68db      	ldr	r3, [r3, #12]
 8009d5a:	f003 0310 	and.w	r3, r3, #16
 8009d5e:	2b10      	cmp	r3, #16
 8009d60:	d11b      	bne.n	8009d9a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	f06f 0210 	mvn.w	r2, #16
 8009d6a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	2208      	movs	r2, #8
 8009d70:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	69db      	ldr	r3, [r3, #28]
 8009d78:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d003      	beq.n	8009d88 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009d80:	6878      	ldr	r0, [r7, #4]
 8009d82:	f7f8 fb15 	bl	80023b0 <HAL_TIM_IC_CaptureCallback>
 8009d86:	e005      	b.n	8009d94 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009d88:	6878      	ldr	r0, [r7, #4]
 8009d8a:	f000 fb0f 	bl	800a3ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009d8e:	6878      	ldr	r0, [r7, #4]
 8009d90:	f000 fb16 	bl	800a3c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	2200      	movs	r2, #0
 8009d98:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	691b      	ldr	r3, [r3, #16]
 8009da0:	f003 0301 	and.w	r3, r3, #1
 8009da4:	2b01      	cmp	r3, #1
 8009da6:	d10e      	bne.n	8009dc6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	68db      	ldr	r3, [r3, #12]
 8009dae:	f003 0301 	and.w	r3, r3, #1
 8009db2:	2b01      	cmp	r3, #1
 8009db4:	d107      	bne.n	8009dc6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	f06f 0201 	mvn.w	r2, #1
 8009dbe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009dc0:	6878      	ldr	r0, [r7, #4]
 8009dc2:	f7f8 fb97 	bl	80024f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	691b      	ldr	r3, [r3, #16]
 8009dcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009dd0:	2b80      	cmp	r3, #128	; 0x80
 8009dd2:	d10e      	bne.n	8009df2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	68db      	ldr	r3, [r3, #12]
 8009dda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009dde:	2b80      	cmp	r3, #128	; 0x80
 8009de0:	d107      	bne.n	8009df2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009dea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009dec:	6878      	ldr	r0, [r7, #4]
 8009dee:	f001 f84d 	bl	800ae8c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	691b      	ldr	r3, [r3, #16]
 8009df8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009dfc:	2b40      	cmp	r3, #64	; 0x40
 8009dfe:	d10e      	bne.n	8009e1e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	68db      	ldr	r3, [r3, #12]
 8009e06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e0a:	2b40      	cmp	r3, #64	; 0x40
 8009e0c:	d107      	bne.n	8009e1e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009e16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009e18:	6878      	ldr	r0, [r7, #4]
 8009e1a:	f000 fadb 	bl	800a3d4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	691b      	ldr	r3, [r3, #16]
 8009e24:	f003 0320 	and.w	r3, r3, #32
 8009e28:	2b20      	cmp	r3, #32
 8009e2a:	d10e      	bne.n	8009e4a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	68db      	ldr	r3, [r3, #12]
 8009e32:	f003 0320 	and.w	r3, r3, #32
 8009e36:	2b20      	cmp	r3, #32
 8009e38:	d107      	bne.n	8009e4a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	f06f 0220 	mvn.w	r2, #32
 8009e42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009e44:	6878      	ldr	r0, [r7, #4]
 8009e46:	f001 f817 	bl	800ae78 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009e4a:	bf00      	nop
 8009e4c:	3708      	adds	r7, #8
 8009e4e:	46bd      	mov	sp, r7
 8009e50:	bd80      	pop	{r7, pc}

08009e52 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8009e52:	b580      	push	{r7, lr}
 8009e54:	b086      	sub	sp, #24
 8009e56:	af00      	add	r7, sp, #0
 8009e58:	60f8      	str	r0, [r7, #12]
 8009e5a:	60b9      	str	r1, [r7, #8]
 8009e5c:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009e5e:	2300      	movs	r3, #0
 8009e60:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009e68:	2b01      	cmp	r3, #1
 8009e6a:	d101      	bne.n	8009e70 <HAL_TIM_IC_ConfigChannel+0x1e>
 8009e6c:	2302      	movs	r3, #2
 8009e6e:	e088      	b.n	8009f82 <HAL_TIM_IC_ConfigChannel+0x130>
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	2201      	movs	r2, #1
 8009e74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d11b      	bne.n	8009eb6 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	6818      	ldr	r0, [r3, #0]
 8009e82:	68bb      	ldr	r3, [r7, #8]
 8009e84:	6819      	ldr	r1, [r3, #0]
 8009e86:	68bb      	ldr	r3, [r7, #8]
 8009e88:	685a      	ldr	r2, [r3, #4]
 8009e8a:	68bb      	ldr	r3, [r7, #8]
 8009e8c:	68db      	ldr	r3, [r3, #12]
 8009e8e:	f000 fd8d 	bl	800a9ac <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	699a      	ldr	r2, [r3, #24]
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	f022 020c 	bic.w	r2, r2, #12
 8009ea0:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	6999      	ldr	r1, [r3, #24]
 8009ea8:	68bb      	ldr	r3, [r7, #8]
 8009eaa:	689a      	ldr	r2, [r3, #8]
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	430a      	orrs	r2, r1
 8009eb2:	619a      	str	r2, [r3, #24]
 8009eb4:	e060      	b.n	8009f78 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	2b04      	cmp	r3, #4
 8009eba:	d11c      	bne.n	8009ef6 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	6818      	ldr	r0, [r3, #0]
 8009ec0:	68bb      	ldr	r3, [r7, #8]
 8009ec2:	6819      	ldr	r1, [r3, #0]
 8009ec4:	68bb      	ldr	r3, [r7, #8]
 8009ec6:	685a      	ldr	r2, [r3, #4]
 8009ec8:	68bb      	ldr	r3, [r7, #8]
 8009eca:	68db      	ldr	r3, [r3, #12]
 8009ecc:	f000 fe11 	bl	800aaf2 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	699a      	ldr	r2, [r3, #24]
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8009ede:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	6999      	ldr	r1, [r3, #24]
 8009ee6:	68bb      	ldr	r3, [r7, #8]
 8009ee8:	689b      	ldr	r3, [r3, #8]
 8009eea:	021a      	lsls	r2, r3, #8
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	430a      	orrs	r2, r1
 8009ef2:	619a      	str	r2, [r3, #24]
 8009ef4:	e040      	b.n	8009f78 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	2b08      	cmp	r3, #8
 8009efa:	d11b      	bne.n	8009f34 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	6818      	ldr	r0, [r3, #0]
 8009f00:	68bb      	ldr	r3, [r7, #8]
 8009f02:	6819      	ldr	r1, [r3, #0]
 8009f04:	68bb      	ldr	r3, [r7, #8]
 8009f06:	685a      	ldr	r2, [r3, #4]
 8009f08:	68bb      	ldr	r3, [r7, #8]
 8009f0a:	68db      	ldr	r3, [r3, #12]
 8009f0c:	f000 fe5e 	bl	800abcc <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	69da      	ldr	r2, [r3, #28]
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	f022 020c 	bic.w	r2, r2, #12
 8009f1e:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	69d9      	ldr	r1, [r3, #28]
 8009f26:	68bb      	ldr	r3, [r7, #8]
 8009f28:	689a      	ldr	r2, [r3, #8]
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	430a      	orrs	r2, r1
 8009f30:	61da      	str	r2, [r3, #28]
 8009f32:	e021      	b.n	8009f78 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	2b0c      	cmp	r3, #12
 8009f38:	d11c      	bne.n	8009f74 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	6818      	ldr	r0, [r3, #0]
 8009f3e:	68bb      	ldr	r3, [r7, #8]
 8009f40:	6819      	ldr	r1, [r3, #0]
 8009f42:	68bb      	ldr	r3, [r7, #8]
 8009f44:	685a      	ldr	r2, [r3, #4]
 8009f46:	68bb      	ldr	r3, [r7, #8]
 8009f48:	68db      	ldr	r3, [r3, #12]
 8009f4a:	f000 fe7b 	bl	800ac44 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	69da      	ldr	r2, [r3, #28]
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8009f5c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	69d9      	ldr	r1, [r3, #28]
 8009f64:	68bb      	ldr	r3, [r7, #8]
 8009f66:	689b      	ldr	r3, [r3, #8]
 8009f68:	021a      	lsls	r2, r3, #8
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	430a      	orrs	r2, r1
 8009f70:	61da      	str	r2, [r3, #28]
 8009f72:	e001      	b.n	8009f78 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8009f74:	2301      	movs	r3, #1
 8009f76:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	2200      	movs	r2, #0
 8009f7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009f80:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f82:	4618      	mov	r0, r3
 8009f84:	3718      	adds	r7, #24
 8009f86:	46bd      	mov	sp, r7
 8009f88:	bd80      	pop	{r7, pc}
	...

08009f8c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009f8c:	b580      	push	{r7, lr}
 8009f8e:	b086      	sub	sp, #24
 8009f90:	af00      	add	r7, sp, #0
 8009f92:	60f8      	str	r0, [r7, #12]
 8009f94:	60b9      	str	r1, [r7, #8]
 8009f96:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009f98:	2300      	movs	r3, #0
 8009f9a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009fa2:	2b01      	cmp	r3, #1
 8009fa4:	d101      	bne.n	8009faa <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009fa6:	2302      	movs	r3, #2
 8009fa8:	e0ae      	b.n	800a108 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	2201      	movs	r2, #1
 8009fae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	2b0c      	cmp	r3, #12
 8009fb6:	f200 809f 	bhi.w	800a0f8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8009fba:	a201      	add	r2, pc, #4	; (adr r2, 8009fc0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009fbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fc0:	08009ff5 	.word	0x08009ff5
 8009fc4:	0800a0f9 	.word	0x0800a0f9
 8009fc8:	0800a0f9 	.word	0x0800a0f9
 8009fcc:	0800a0f9 	.word	0x0800a0f9
 8009fd0:	0800a035 	.word	0x0800a035
 8009fd4:	0800a0f9 	.word	0x0800a0f9
 8009fd8:	0800a0f9 	.word	0x0800a0f9
 8009fdc:	0800a0f9 	.word	0x0800a0f9
 8009fe0:	0800a077 	.word	0x0800a077
 8009fe4:	0800a0f9 	.word	0x0800a0f9
 8009fe8:	0800a0f9 	.word	0x0800a0f9
 8009fec:	0800a0f9 	.word	0x0800a0f9
 8009ff0:	0800a0b7 	.word	0x0800a0b7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	68b9      	ldr	r1, [r7, #8]
 8009ffa:	4618      	mov	r0, r3
 8009ffc:	f000 fa94 	bl	800a528 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	699a      	ldr	r2, [r3, #24]
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	f042 0208 	orr.w	r2, r2, #8
 800a00e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	699a      	ldr	r2, [r3, #24]
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	f022 0204 	bic.w	r2, r2, #4
 800a01e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	6999      	ldr	r1, [r3, #24]
 800a026:	68bb      	ldr	r3, [r7, #8]
 800a028:	691a      	ldr	r2, [r3, #16]
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	430a      	orrs	r2, r1
 800a030:	619a      	str	r2, [r3, #24]
      break;
 800a032:	e064      	b.n	800a0fe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	68b9      	ldr	r1, [r7, #8]
 800a03a:	4618      	mov	r0, r3
 800a03c:	f000 fae4 	bl	800a608 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	699a      	ldr	r2, [r3, #24]
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a04e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	699a      	ldr	r2, [r3, #24]
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a05e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	6999      	ldr	r1, [r3, #24]
 800a066:	68bb      	ldr	r3, [r7, #8]
 800a068:	691b      	ldr	r3, [r3, #16]
 800a06a:	021a      	lsls	r2, r3, #8
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	430a      	orrs	r2, r1
 800a072:	619a      	str	r2, [r3, #24]
      break;
 800a074:	e043      	b.n	800a0fe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	68b9      	ldr	r1, [r7, #8]
 800a07c:	4618      	mov	r0, r3
 800a07e:	f000 fb39 	bl	800a6f4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	69da      	ldr	r2, [r3, #28]
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	f042 0208 	orr.w	r2, r2, #8
 800a090:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	69da      	ldr	r2, [r3, #28]
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	f022 0204 	bic.w	r2, r2, #4
 800a0a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	69d9      	ldr	r1, [r3, #28]
 800a0a8:	68bb      	ldr	r3, [r7, #8]
 800a0aa:	691a      	ldr	r2, [r3, #16]
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	430a      	orrs	r2, r1
 800a0b2:	61da      	str	r2, [r3, #28]
      break;
 800a0b4:	e023      	b.n	800a0fe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	68b9      	ldr	r1, [r7, #8]
 800a0bc:	4618      	mov	r0, r3
 800a0be:	f000 fb8d 	bl	800a7dc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	69da      	ldr	r2, [r3, #28]
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a0d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	69da      	ldr	r2, [r3, #28]
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a0e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	69d9      	ldr	r1, [r3, #28]
 800a0e8:	68bb      	ldr	r3, [r7, #8]
 800a0ea:	691b      	ldr	r3, [r3, #16]
 800a0ec:	021a      	lsls	r2, r3, #8
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	430a      	orrs	r2, r1
 800a0f4:	61da      	str	r2, [r3, #28]
      break;
 800a0f6:	e002      	b.n	800a0fe <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800a0f8:	2301      	movs	r3, #1
 800a0fa:	75fb      	strb	r3, [r7, #23]
      break;
 800a0fc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	2200      	movs	r2, #0
 800a102:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a106:	7dfb      	ldrb	r3, [r7, #23]
}
 800a108:	4618      	mov	r0, r3
 800a10a:	3718      	adds	r7, #24
 800a10c:	46bd      	mov	sp, r7
 800a10e:	bd80      	pop	{r7, pc}

0800a110 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a110:	b580      	push	{r7, lr}
 800a112:	b084      	sub	sp, #16
 800a114:	af00      	add	r7, sp, #0
 800a116:	6078      	str	r0, [r7, #4]
 800a118:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a11a:	2300      	movs	r3, #0
 800a11c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a124:	2b01      	cmp	r3, #1
 800a126:	d101      	bne.n	800a12c <HAL_TIM_ConfigClockSource+0x1c>
 800a128:	2302      	movs	r3, #2
 800a12a:	e0b4      	b.n	800a296 <HAL_TIM_ConfigClockSource+0x186>
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	2201      	movs	r2, #1
 800a130:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	2202      	movs	r2, #2
 800a138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	689b      	ldr	r3, [r3, #8]
 800a142:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a144:	68bb      	ldr	r3, [r7, #8]
 800a146:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a14a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a14c:	68bb      	ldr	r3, [r7, #8]
 800a14e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a152:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	68ba      	ldr	r2, [r7, #8]
 800a15a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a15c:	683b      	ldr	r3, [r7, #0]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a164:	d03e      	beq.n	800a1e4 <HAL_TIM_ConfigClockSource+0xd4>
 800a166:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a16a:	f200 8087 	bhi.w	800a27c <HAL_TIM_ConfigClockSource+0x16c>
 800a16e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a172:	f000 8086 	beq.w	800a282 <HAL_TIM_ConfigClockSource+0x172>
 800a176:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a17a:	d87f      	bhi.n	800a27c <HAL_TIM_ConfigClockSource+0x16c>
 800a17c:	2b70      	cmp	r3, #112	; 0x70
 800a17e:	d01a      	beq.n	800a1b6 <HAL_TIM_ConfigClockSource+0xa6>
 800a180:	2b70      	cmp	r3, #112	; 0x70
 800a182:	d87b      	bhi.n	800a27c <HAL_TIM_ConfigClockSource+0x16c>
 800a184:	2b60      	cmp	r3, #96	; 0x60
 800a186:	d050      	beq.n	800a22a <HAL_TIM_ConfigClockSource+0x11a>
 800a188:	2b60      	cmp	r3, #96	; 0x60
 800a18a:	d877      	bhi.n	800a27c <HAL_TIM_ConfigClockSource+0x16c>
 800a18c:	2b50      	cmp	r3, #80	; 0x50
 800a18e:	d03c      	beq.n	800a20a <HAL_TIM_ConfigClockSource+0xfa>
 800a190:	2b50      	cmp	r3, #80	; 0x50
 800a192:	d873      	bhi.n	800a27c <HAL_TIM_ConfigClockSource+0x16c>
 800a194:	2b40      	cmp	r3, #64	; 0x40
 800a196:	d058      	beq.n	800a24a <HAL_TIM_ConfigClockSource+0x13a>
 800a198:	2b40      	cmp	r3, #64	; 0x40
 800a19a:	d86f      	bhi.n	800a27c <HAL_TIM_ConfigClockSource+0x16c>
 800a19c:	2b30      	cmp	r3, #48	; 0x30
 800a19e:	d064      	beq.n	800a26a <HAL_TIM_ConfigClockSource+0x15a>
 800a1a0:	2b30      	cmp	r3, #48	; 0x30
 800a1a2:	d86b      	bhi.n	800a27c <HAL_TIM_ConfigClockSource+0x16c>
 800a1a4:	2b20      	cmp	r3, #32
 800a1a6:	d060      	beq.n	800a26a <HAL_TIM_ConfigClockSource+0x15a>
 800a1a8:	2b20      	cmp	r3, #32
 800a1aa:	d867      	bhi.n	800a27c <HAL_TIM_ConfigClockSource+0x16c>
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d05c      	beq.n	800a26a <HAL_TIM_ConfigClockSource+0x15a>
 800a1b0:	2b10      	cmp	r3, #16
 800a1b2:	d05a      	beq.n	800a26a <HAL_TIM_ConfigClockSource+0x15a>
 800a1b4:	e062      	b.n	800a27c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	6818      	ldr	r0, [r3, #0]
 800a1ba:	683b      	ldr	r3, [r7, #0]
 800a1bc:	6899      	ldr	r1, [r3, #8]
 800a1be:	683b      	ldr	r3, [r7, #0]
 800a1c0:	685a      	ldr	r2, [r3, #4]
 800a1c2:	683b      	ldr	r3, [r7, #0]
 800a1c4:	68db      	ldr	r3, [r3, #12]
 800a1c6:	f000 fd95 	bl	800acf4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	689b      	ldr	r3, [r3, #8]
 800a1d0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a1d2:	68bb      	ldr	r3, [r7, #8]
 800a1d4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a1d8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	68ba      	ldr	r2, [r7, #8]
 800a1e0:	609a      	str	r2, [r3, #8]
      break;
 800a1e2:	e04f      	b.n	800a284 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	6818      	ldr	r0, [r3, #0]
 800a1e8:	683b      	ldr	r3, [r7, #0]
 800a1ea:	6899      	ldr	r1, [r3, #8]
 800a1ec:	683b      	ldr	r3, [r7, #0]
 800a1ee:	685a      	ldr	r2, [r3, #4]
 800a1f0:	683b      	ldr	r3, [r7, #0]
 800a1f2:	68db      	ldr	r3, [r3, #12]
 800a1f4:	f000 fd7e 	bl	800acf4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	689a      	ldr	r2, [r3, #8]
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a206:	609a      	str	r2, [r3, #8]
      break;
 800a208:	e03c      	b.n	800a284 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	6818      	ldr	r0, [r3, #0]
 800a20e:	683b      	ldr	r3, [r7, #0]
 800a210:	6859      	ldr	r1, [r3, #4]
 800a212:	683b      	ldr	r3, [r7, #0]
 800a214:	68db      	ldr	r3, [r3, #12]
 800a216:	461a      	mov	r2, r3
 800a218:	f000 fc3c 	bl	800aa94 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	2150      	movs	r1, #80	; 0x50
 800a222:	4618      	mov	r0, r3
 800a224:	f000 fd4b 	bl	800acbe <TIM_ITRx_SetConfig>
      break;
 800a228:	e02c      	b.n	800a284 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	6818      	ldr	r0, [r3, #0]
 800a22e:	683b      	ldr	r3, [r7, #0]
 800a230:	6859      	ldr	r1, [r3, #4]
 800a232:	683b      	ldr	r3, [r7, #0]
 800a234:	68db      	ldr	r3, [r3, #12]
 800a236:	461a      	mov	r2, r3
 800a238:	f000 fc98 	bl	800ab6c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	2160      	movs	r1, #96	; 0x60
 800a242:	4618      	mov	r0, r3
 800a244:	f000 fd3b 	bl	800acbe <TIM_ITRx_SetConfig>
      break;
 800a248:	e01c      	b.n	800a284 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	6818      	ldr	r0, [r3, #0]
 800a24e:	683b      	ldr	r3, [r7, #0]
 800a250:	6859      	ldr	r1, [r3, #4]
 800a252:	683b      	ldr	r3, [r7, #0]
 800a254:	68db      	ldr	r3, [r3, #12]
 800a256:	461a      	mov	r2, r3
 800a258:	f000 fc1c 	bl	800aa94 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	2140      	movs	r1, #64	; 0x40
 800a262:	4618      	mov	r0, r3
 800a264:	f000 fd2b 	bl	800acbe <TIM_ITRx_SetConfig>
      break;
 800a268:	e00c      	b.n	800a284 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	681a      	ldr	r2, [r3, #0]
 800a26e:	683b      	ldr	r3, [r7, #0]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	4619      	mov	r1, r3
 800a274:	4610      	mov	r0, r2
 800a276:	f000 fd22 	bl	800acbe <TIM_ITRx_SetConfig>
      break;
 800a27a:	e003      	b.n	800a284 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a27c:	2301      	movs	r3, #1
 800a27e:	73fb      	strb	r3, [r7, #15]
      break;
 800a280:	e000      	b.n	800a284 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a282:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	2201      	movs	r2, #1
 800a288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	2200      	movs	r2, #0
 800a290:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a294:	7bfb      	ldrb	r3, [r7, #15]
}
 800a296:	4618      	mov	r0, r3
 800a298:	3710      	adds	r7, #16
 800a29a:	46bd      	mov	sp, r7
 800a29c:	bd80      	pop	{r7, pc}

0800a29e <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800a29e:	b580      	push	{r7, lr}
 800a2a0:	b082      	sub	sp, #8
 800a2a2:	af00      	add	r7, sp, #0
 800a2a4:	6078      	str	r0, [r7, #4]
 800a2a6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a2ae:	2b01      	cmp	r3, #1
 800a2b0:	d101      	bne.n	800a2b6 <HAL_TIM_SlaveConfigSynchro+0x18>
 800a2b2:	2302      	movs	r3, #2
 800a2b4:	e031      	b.n	800a31a <HAL_TIM_SlaveConfigSynchro+0x7c>
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	2201      	movs	r2, #1
 800a2ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	2202      	movs	r2, #2
 800a2c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800a2c6:	6839      	ldr	r1, [r7, #0]
 800a2c8:	6878      	ldr	r0, [r7, #4]
 800a2ca:	f000 fadd 	bl	800a888 <TIM_SlaveTimer_SetConfig>
 800a2ce:	4603      	mov	r3, r0
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d009      	beq.n	800a2e8 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	2201      	movs	r2, #1
 800a2d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	2200      	movs	r2, #0
 800a2e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800a2e4:	2301      	movs	r3, #1
 800a2e6:	e018      	b.n	800a31a <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	68da      	ldr	r2, [r3, #12]
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a2f6:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	68da      	ldr	r2, [r3, #12]
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800a306:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	2201      	movs	r2, #1
 800a30c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	2200      	movs	r2, #0
 800a314:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a318:	2300      	movs	r3, #0
}
 800a31a:	4618      	mov	r0, r3
 800a31c:	3708      	adds	r7, #8
 800a31e:	46bd      	mov	sp, r7
 800a320:	bd80      	pop	{r7, pc}
	...

0800a324 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a324:	b480      	push	{r7}
 800a326:	b085      	sub	sp, #20
 800a328:	af00      	add	r7, sp, #0
 800a32a:	6078      	str	r0, [r7, #4]
 800a32c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800a32e:	2300      	movs	r3, #0
 800a330:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800a332:	683b      	ldr	r3, [r7, #0]
 800a334:	2b0c      	cmp	r3, #12
 800a336:	d831      	bhi.n	800a39c <HAL_TIM_ReadCapturedValue+0x78>
 800a338:	a201      	add	r2, pc, #4	; (adr r2, 800a340 <HAL_TIM_ReadCapturedValue+0x1c>)
 800a33a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a33e:	bf00      	nop
 800a340:	0800a375 	.word	0x0800a375
 800a344:	0800a39d 	.word	0x0800a39d
 800a348:	0800a39d 	.word	0x0800a39d
 800a34c:	0800a39d 	.word	0x0800a39d
 800a350:	0800a37f 	.word	0x0800a37f
 800a354:	0800a39d 	.word	0x0800a39d
 800a358:	0800a39d 	.word	0x0800a39d
 800a35c:	0800a39d 	.word	0x0800a39d
 800a360:	0800a389 	.word	0x0800a389
 800a364:	0800a39d 	.word	0x0800a39d
 800a368:	0800a39d 	.word	0x0800a39d
 800a36c:	0800a39d 	.word	0x0800a39d
 800a370:	0800a393 	.word	0x0800a393
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a37a:	60fb      	str	r3, [r7, #12]

      break;
 800a37c:	e00f      	b.n	800a39e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a384:	60fb      	str	r3, [r7, #12]

      break;
 800a386:	e00a      	b.n	800a39e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a38e:	60fb      	str	r3, [r7, #12]

      break;
 800a390:	e005      	b.n	800a39e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a398:	60fb      	str	r3, [r7, #12]

      break;
 800a39a:	e000      	b.n	800a39e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800a39c:	bf00      	nop
  }

  return tmpreg;
 800a39e:	68fb      	ldr	r3, [r7, #12]
}
 800a3a0:	4618      	mov	r0, r3
 800a3a2:	3714      	adds	r7, #20
 800a3a4:	46bd      	mov	sp, r7
 800a3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3aa:	4770      	bx	lr

0800a3ac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a3ac:	b480      	push	{r7}
 800a3ae:	b083      	sub	sp, #12
 800a3b0:	af00      	add	r7, sp, #0
 800a3b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a3b4:	bf00      	nop
 800a3b6:	370c      	adds	r7, #12
 800a3b8:	46bd      	mov	sp, r7
 800a3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3be:	4770      	bx	lr

0800a3c0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a3c0:	b480      	push	{r7}
 800a3c2:	b083      	sub	sp, #12
 800a3c4:	af00      	add	r7, sp, #0
 800a3c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a3c8:	bf00      	nop
 800a3ca:	370c      	adds	r7, #12
 800a3cc:	46bd      	mov	sp, r7
 800a3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d2:	4770      	bx	lr

0800a3d4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a3d4:	b480      	push	{r7}
 800a3d6:	b083      	sub	sp, #12
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a3dc:	bf00      	nop
 800a3de:	370c      	adds	r7, #12
 800a3e0:	46bd      	mov	sp, r7
 800a3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e6:	4770      	bx	lr

0800a3e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a3e8:	b480      	push	{r7}
 800a3ea:	b085      	sub	sp, #20
 800a3ec:	af00      	add	r7, sp, #0
 800a3ee:	6078      	str	r0, [r7, #4]
 800a3f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	4a40      	ldr	r2, [pc, #256]	; (800a4fc <TIM_Base_SetConfig+0x114>)
 800a3fc:	4293      	cmp	r3, r2
 800a3fe:	d013      	beq.n	800a428 <TIM_Base_SetConfig+0x40>
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a406:	d00f      	beq.n	800a428 <TIM_Base_SetConfig+0x40>
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	4a3d      	ldr	r2, [pc, #244]	; (800a500 <TIM_Base_SetConfig+0x118>)
 800a40c:	4293      	cmp	r3, r2
 800a40e:	d00b      	beq.n	800a428 <TIM_Base_SetConfig+0x40>
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	4a3c      	ldr	r2, [pc, #240]	; (800a504 <TIM_Base_SetConfig+0x11c>)
 800a414:	4293      	cmp	r3, r2
 800a416:	d007      	beq.n	800a428 <TIM_Base_SetConfig+0x40>
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	4a3b      	ldr	r2, [pc, #236]	; (800a508 <TIM_Base_SetConfig+0x120>)
 800a41c:	4293      	cmp	r3, r2
 800a41e:	d003      	beq.n	800a428 <TIM_Base_SetConfig+0x40>
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	4a3a      	ldr	r2, [pc, #232]	; (800a50c <TIM_Base_SetConfig+0x124>)
 800a424:	4293      	cmp	r3, r2
 800a426:	d108      	bne.n	800a43a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a42e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a430:	683b      	ldr	r3, [r7, #0]
 800a432:	685b      	ldr	r3, [r3, #4]
 800a434:	68fa      	ldr	r2, [r7, #12]
 800a436:	4313      	orrs	r3, r2
 800a438:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	4a2f      	ldr	r2, [pc, #188]	; (800a4fc <TIM_Base_SetConfig+0x114>)
 800a43e:	4293      	cmp	r3, r2
 800a440:	d02b      	beq.n	800a49a <TIM_Base_SetConfig+0xb2>
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a448:	d027      	beq.n	800a49a <TIM_Base_SetConfig+0xb2>
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	4a2c      	ldr	r2, [pc, #176]	; (800a500 <TIM_Base_SetConfig+0x118>)
 800a44e:	4293      	cmp	r3, r2
 800a450:	d023      	beq.n	800a49a <TIM_Base_SetConfig+0xb2>
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	4a2b      	ldr	r2, [pc, #172]	; (800a504 <TIM_Base_SetConfig+0x11c>)
 800a456:	4293      	cmp	r3, r2
 800a458:	d01f      	beq.n	800a49a <TIM_Base_SetConfig+0xb2>
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	4a2a      	ldr	r2, [pc, #168]	; (800a508 <TIM_Base_SetConfig+0x120>)
 800a45e:	4293      	cmp	r3, r2
 800a460:	d01b      	beq.n	800a49a <TIM_Base_SetConfig+0xb2>
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	4a29      	ldr	r2, [pc, #164]	; (800a50c <TIM_Base_SetConfig+0x124>)
 800a466:	4293      	cmp	r3, r2
 800a468:	d017      	beq.n	800a49a <TIM_Base_SetConfig+0xb2>
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	4a28      	ldr	r2, [pc, #160]	; (800a510 <TIM_Base_SetConfig+0x128>)
 800a46e:	4293      	cmp	r3, r2
 800a470:	d013      	beq.n	800a49a <TIM_Base_SetConfig+0xb2>
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	4a27      	ldr	r2, [pc, #156]	; (800a514 <TIM_Base_SetConfig+0x12c>)
 800a476:	4293      	cmp	r3, r2
 800a478:	d00f      	beq.n	800a49a <TIM_Base_SetConfig+0xb2>
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	4a26      	ldr	r2, [pc, #152]	; (800a518 <TIM_Base_SetConfig+0x130>)
 800a47e:	4293      	cmp	r3, r2
 800a480:	d00b      	beq.n	800a49a <TIM_Base_SetConfig+0xb2>
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	4a25      	ldr	r2, [pc, #148]	; (800a51c <TIM_Base_SetConfig+0x134>)
 800a486:	4293      	cmp	r3, r2
 800a488:	d007      	beq.n	800a49a <TIM_Base_SetConfig+0xb2>
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	4a24      	ldr	r2, [pc, #144]	; (800a520 <TIM_Base_SetConfig+0x138>)
 800a48e:	4293      	cmp	r3, r2
 800a490:	d003      	beq.n	800a49a <TIM_Base_SetConfig+0xb2>
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	4a23      	ldr	r2, [pc, #140]	; (800a524 <TIM_Base_SetConfig+0x13c>)
 800a496:	4293      	cmp	r3, r2
 800a498:	d108      	bne.n	800a4ac <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a4a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a4a2:	683b      	ldr	r3, [r7, #0]
 800a4a4:	68db      	ldr	r3, [r3, #12]
 800a4a6:	68fa      	ldr	r2, [r7, #12]
 800a4a8:	4313      	orrs	r3, r2
 800a4aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a4b2:	683b      	ldr	r3, [r7, #0]
 800a4b4:	695b      	ldr	r3, [r3, #20]
 800a4b6:	4313      	orrs	r3, r2
 800a4b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	68fa      	ldr	r2, [r7, #12]
 800a4be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a4c0:	683b      	ldr	r3, [r7, #0]
 800a4c2:	689a      	ldr	r2, [r3, #8]
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a4c8:	683b      	ldr	r3, [r7, #0]
 800a4ca:	681a      	ldr	r2, [r3, #0]
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	4a0a      	ldr	r2, [pc, #40]	; (800a4fc <TIM_Base_SetConfig+0x114>)
 800a4d4:	4293      	cmp	r3, r2
 800a4d6:	d003      	beq.n	800a4e0 <TIM_Base_SetConfig+0xf8>
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	4a0c      	ldr	r2, [pc, #48]	; (800a50c <TIM_Base_SetConfig+0x124>)
 800a4dc:	4293      	cmp	r3, r2
 800a4de:	d103      	bne.n	800a4e8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a4e0:	683b      	ldr	r3, [r7, #0]
 800a4e2:	691a      	ldr	r2, [r3, #16]
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	2201      	movs	r2, #1
 800a4ec:	615a      	str	r2, [r3, #20]
}
 800a4ee:	bf00      	nop
 800a4f0:	3714      	adds	r7, #20
 800a4f2:	46bd      	mov	sp, r7
 800a4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f8:	4770      	bx	lr
 800a4fa:	bf00      	nop
 800a4fc:	40010000 	.word	0x40010000
 800a500:	40000400 	.word	0x40000400
 800a504:	40000800 	.word	0x40000800
 800a508:	40000c00 	.word	0x40000c00
 800a50c:	40010400 	.word	0x40010400
 800a510:	40014000 	.word	0x40014000
 800a514:	40014400 	.word	0x40014400
 800a518:	40014800 	.word	0x40014800
 800a51c:	40001800 	.word	0x40001800
 800a520:	40001c00 	.word	0x40001c00
 800a524:	40002000 	.word	0x40002000

0800a528 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a528:	b480      	push	{r7}
 800a52a:	b087      	sub	sp, #28
 800a52c:	af00      	add	r7, sp, #0
 800a52e:	6078      	str	r0, [r7, #4]
 800a530:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	6a1b      	ldr	r3, [r3, #32]
 800a536:	f023 0201 	bic.w	r2, r3, #1
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	6a1b      	ldr	r3, [r3, #32]
 800a542:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	685b      	ldr	r3, [r3, #4]
 800a548:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	699b      	ldr	r3, [r3, #24]
 800a54e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a556:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	f023 0303 	bic.w	r3, r3, #3
 800a55e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a560:	683b      	ldr	r3, [r7, #0]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	68fa      	ldr	r2, [r7, #12]
 800a566:	4313      	orrs	r3, r2
 800a568:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a56a:	697b      	ldr	r3, [r7, #20]
 800a56c:	f023 0302 	bic.w	r3, r3, #2
 800a570:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a572:	683b      	ldr	r3, [r7, #0]
 800a574:	689b      	ldr	r3, [r3, #8]
 800a576:	697a      	ldr	r2, [r7, #20]
 800a578:	4313      	orrs	r3, r2
 800a57a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	4a20      	ldr	r2, [pc, #128]	; (800a600 <TIM_OC1_SetConfig+0xd8>)
 800a580:	4293      	cmp	r3, r2
 800a582:	d003      	beq.n	800a58c <TIM_OC1_SetConfig+0x64>
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	4a1f      	ldr	r2, [pc, #124]	; (800a604 <TIM_OC1_SetConfig+0xdc>)
 800a588:	4293      	cmp	r3, r2
 800a58a:	d10c      	bne.n	800a5a6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a58c:	697b      	ldr	r3, [r7, #20]
 800a58e:	f023 0308 	bic.w	r3, r3, #8
 800a592:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a594:	683b      	ldr	r3, [r7, #0]
 800a596:	68db      	ldr	r3, [r3, #12]
 800a598:	697a      	ldr	r2, [r7, #20]
 800a59a:	4313      	orrs	r3, r2
 800a59c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a59e:	697b      	ldr	r3, [r7, #20]
 800a5a0:	f023 0304 	bic.w	r3, r3, #4
 800a5a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	4a15      	ldr	r2, [pc, #84]	; (800a600 <TIM_OC1_SetConfig+0xd8>)
 800a5aa:	4293      	cmp	r3, r2
 800a5ac:	d003      	beq.n	800a5b6 <TIM_OC1_SetConfig+0x8e>
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	4a14      	ldr	r2, [pc, #80]	; (800a604 <TIM_OC1_SetConfig+0xdc>)
 800a5b2:	4293      	cmp	r3, r2
 800a5b4:	d111      	bne.n	800a5da <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a5b6:	693b      	ldr	r3, [r7, #16]
 800a5b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a5bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a5be:	693b      	ldr	r3, [r7, #16]
 800a5c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a5c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a5c6:	683b      	ldr	r3, [r7, #0]
 800a5c8:	695b      	ldr	r3, [r3, #20]
 800a5ca:	693a      	ldr	r2, [r7, #16]
 800a5cc:	4313      	orrs	r3, r2
 800a5ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a5d0:	683b      	ldr	r3, [r7, #0]
 800a5d2:	699b      	ldr	r3, [r3, #24]
 800a5d4:	693a      	ldr	r2, [r7, #16]
 800a5d6:	4313      	orrs	r3, r2
 800a5d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	693a      	ldr	r2, [r7, #16]
 800a5de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	68fa      	ldr	r2, [r7, #12]
 800a5e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a5e6:	683b      	ldr	r3, [r7, #0]
 800a5e8:	685a      	ldr	r2, [r3, #4]
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	697a      	ldr	r2, [r7, #20]
 800a5f2:	621a      	str	r2, [r3, #32]
}
 800a5f4:	bf00      	nop
 800a5f6:	371c      	adds	r7, #28
 800a5f8:	46bd      	mov	sp, r7
 800a5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5fe:	4770      	bx	lr
 800a600:	40010000 	.word	0x40010000
 800a604:	40010400 	.word	0x40010400

0800a608 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a608:	b480      	push	{r7}
 800a60a:	b087      	sub	sp, #28
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	6078      	str	r0, [r7, #4]
 800a610:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	6a1b      	ldr	r3, [r3, #32]
 800a616:	f023 0210 	bic.w	r2, r3, #16
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	6a1b      	ldr	r3, [r3, #32]
 800a622:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	685b      	ldr	r3, [r3, #4]
 800a628:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	699b      	ldr	r3, [r3, #24]
 800a62e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a636:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a63e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a640:	683b      	ldr	r3, [r7, #0]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	021b      	lsls	r3, r3, #8
 800a646:	68fa      	ldr	r2, [r7, #12]
 800a648:	4313      	orrs	r3, r2
 800a64a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a64c:	697b      	ldr	r3, [r7, #20]
 800a64e:	f023 0320 	bic.w	r3, r3, #32
 800a652:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a654:	683b      	ldr	r3, [r7, #0]
 800a656:	689b      	ldr	r3, [r3, #8]
 800a658:	011b      	lsls	r3, r3, #4
 800a65a:	697a      	ldr	r2, [r7, #20]
 800a65c:	4313      	orrs	r3, r2
 800a65e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	4a22      	ldr	r2, [pc, #136]	; (800a6ec <TIM_OC2_SetConfig+0xe4>)
 800a664:	4293      	cmp	r3, r2
 800a666:	d003      	beq.n	800a670 <TIM_OC2_SetConfig+0x68>
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	4a21      	ldr	r2, [pc, #132]	; (800a6f0 <TIM_OC2_SetConfig+0xe8>)
 800a66c:	4293      	cmp	r3, r2
 800a66e:	d10d      	bne.n	800a68c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a670:	697b      	ldr	r3, [r7, #20]
 800a672:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a676:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a678:	683b      	ldr	r3, [r7, #0]
 800a67a:	68db      	ldr	r3, [r3, #12]
 800a67c:	011b      	lsls	r3, r3, #4
 800a67e:	697a      	ldr	r2, [r7, #20]
 800a680:	4313      	orrs	r3, r2
 800a682:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a684:	697b      	ldr	r3, [r7, #20]
 800a686:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a68a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	4a17      	ldr	r2, [pc, #92]	; (800a6ec <TIM_OC2_SetConfig+0xe4>)
 800a690:	4293      	cmp	r3, r2
 800a692:	d003      	beq.n	800a69c <TIM_OC2_SetConfig+0x94>
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	4a16      	ldr	r2, [pc, #88]	; (800a6f0 <TIM_OC2_SetConfig+0xe8>)
 800a698:	4293      	cmp	r3, r2
 800a69a:	d113      	bne.n	800a6c4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a69c:	693b      	ldr	r3, [r7, #16]
 800a69e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a6a2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a6a4:	693b      	ldr	r3, [r7, #16]
 800a6a6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a6aa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a6ac:	683b      	ldr	r3, [r7, #0]
 800a6ae:	695b      	ldr	r3, [r3, #20]
 800a6b0:	009b      	lsls	r3, r3, #2
 800a6b2:	693a      	ldr	r2, [r7, #16]
 800a6b4:	4313      	orrs	r3, r2
 800a6b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a6b8:	683b      	ldr	r3, [r7, #0]
 800a6ba:	699b      	ldr	r3, [r3, #24]
 800a6bc:	009b      	lsls	r3, r3, #2
 800a6be:	693a      	ldr	r2, [r7, #16]
 800a6c0:	4313      	orrs	r3, r2
 800a6c2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	693a      	ldr	r2, [r7, #16]
 800a6c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	68fa      	ldr	r2, [r7, #12]
 800a6ce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a6d0:	683b      	ldr	r3, [r7, #0]
 800a6d2:	685a      	ldr	r2, [r3, #4]
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	697a      	ldr	r2, [r7, #20]
 800a6dc:	621a      	str	r2, [r3, #32]
}
 800a6de:	bf00      	nop
 800a6e0:	371c      	adds	r7, #28
 800a6e2:	46bd      	mov	sp, r7
 800a6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e8:	4770      	bx	lr
 800a6ea:	bf00      	nop
 800a6ec:	40010000 	.word	0x40010000
 800a6f0:	40010400 	.word	0x40010400

0800a6f4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a6f4:	b480      	push	{r7}
 800a6f6:	b087      	sub	sp, #28
 800a6f8:	af00      	add	r7, sp, #0
 800a6fa:	6078      	str	r0, [r7, #4]
 800a6fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	6a1b      	ldr	r3, [r3, #32]
 800a702:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	6a1b      	ldr	r3, [r3, #32]
 800a70e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	685b      	ldr	r3, [r3, #4]
 800a714:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	69db      	ldr	r3, [r3, #28]
 800a71a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a722:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	f023 0303 	bic.w	r3, r3, #3
 800a72a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a72c:	683b      	ldr	r3, [r7, #0]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	68fa      	ldr	r2, [r7, #12]
 800a732:	4313      	orrs	r3, r2
 800a734:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a736:	697b      	ldr	r3, [r7, #20]
 800a738:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a73c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a73e:	683b      	ldr	r3, [r7, #0]
 800a740:	689b      	ldr	r3, [r3, #8]
 800a742:	021b      	lsls	r3, r3, #8
 800a744:	697a      	ldr	r2, [r7, #20]
 800a746:	4313      	orrs	r3, r2
 800a748:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	4a21      	ldr	r2, [pc, #132]	; (800a7d4 <TIM_OC3_SetConfig+0xe0>)
 800a74e:	4293      	cmp	r3, r2
 800a750:	d003      	beq.n	800a75a <TIM_OC3_SetConfig+0x66>
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	4a20      	ldr	r2, [pc, #128]	; (800a7d8 <TIM_OC3_SetConfig+0xe4>)
 800a756:	4293      	cmp	r3, r2
 800a758:	d10d      	bne.n	800a776 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a75a:	697b      	ldr	r3, [r7, #20]
 800a75c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a760:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a762:	683b      	ldr	r3, [r7, #0]
 800a764:	68db      	ldr	r3, [r3, #12]
 800a766:	021b      	lsls	r3, r3, #8
 800a768:	697a      	ldr	r2, [r7, #20]
 800a76a:	4313      	orrs	r3, r2
 800a76c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a76e:	697b      	ldr	r3, [r7, #20]
 800a770:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a774:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	4a16      	ldr	r2, [pc, #88]	; (800a7d4 <TIM_OC3_SetConfig+0xe0>)
 800a77a:	4293      	cmp	r3, r2
 800a77c:	d003      	beq.n	800a786 <TIM_OC3_SetConfig+0x92>
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	4a15      	ldr	r2, [pc, #84]	; (800a7d8 <TIM_OC3_SetConfig+0xe4>)
 800a782:	4293      	cmp	r3, r2
 800a784:	d113      	bne.n	800a7ae <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a786:	693b      	ldr	r3, [r7, #16]
 800a788:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a78c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a78e:	693b      	ldr	r3, [r7, #16]
 800a790:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a794:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a796:	683b      	ldr	r3, [r7, #0]
 800a798:	695b      	ldr	r3, [r3, #20]
 800a79a:	011b      	lsls	r3, r3, #4
 800a79c:	693a      	ldr	r2, [r7, #16]
 800a79e:	4313      	orrs	r3, r2
 800a7a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a7a2:	683b      	ldr	r3, [r7, #0]
 800a7a4:	699b      	ldr	r3, [r3, #24]
 800a7a6:	011b      	lsls	r3, r3, #4
 800a7a8:	693a      	ldr	r2, [r7, #16]
 800a7aa:	4313      	orrs	r3, r2
 800a7ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	693a      	ldr	r2, [r7, #16]
 800a7b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	68fa      	ldr	r2, [r7, #12]
 800a7b8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a7ba:	683b      	ldr	r3, [r7, #0]
 800a7bc:	685a      	ldr	r2, [r3, #4]
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	697a      	ldr	r2, [r7, #20]
 800a7c6:	621a      	str	r2, [r3, #32]
}
 800a7c8:	bf00      	nop
 800a7ca:	371c      	adds	r7, #28
 800a7cc:	46bd      	mov	sp, r7
 800a7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d2:	4770      	bx	lr
 800a7d4:	40010000 	.word	0x40010000
 800a7d8:	40010400 	.word	0x40010400

0800a7dc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a7dc:	b480      	push	{r7}
 800a7de:	b087      	sub	sp, #28
 800a7e0:	af00      	add	r7, sp, #0
 800a7e2:	6078      	str	r0, [r7, #4]
 800a7e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	6a1b      	ldr	r3, [r3, #32]
 800a7ea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	6a1b      	ldr	r3, [r3, #32]
 800a7f6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	685b      	ldr	r3, [r3, #4]
 800a7fc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	69db      	ldr	r3, [r3, #28]
 800a802:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a80a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a812:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a814:	683b      	ldr	r3, [r7, #0]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	021b      	lsls	r3, r3, #8
 800a81a:	68fa      	ldr	r2, [r7, #12]
 800a81c:	4313      	orrs	r3, r2
 800a81e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a820:	693b      	ldr	r3, [r7, #16]
 800a822:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a826:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a828:	683b      	ldr	r3, [r7, #0]
 800a82a:	689b      	ldr	r3, [r3, #8]
 800a82c:	031b      	lsls	r3, r3, #12
 800a82e:	693a      	ldr	r2, [r7, #16]
 800a830:	4313      	orrs	r3, r2
 800a832:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	4a12      	ldr	r2, [pc, #72]	; (800a880 <TIM_OC4_SetConfig+0xa4>)
 800a838:	4293      	cmp	r3, r2
 800a83a:	d003      	beq.n	800a844 <TIM_OC4_SetConfig+0x68>
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	4a11      	ldr	r2, [pc, #68]	; (800a884 <TIM_OC4_SetConfig+0xa8>)
 800a840:	4293      	cmp	r3, r2
 800a842:	d109      	bne.n	800a858 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a844:	697b      	ldr	r3, [r7, #20]
 800a846:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a84a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a84c:	683b      	ldr	r3, [r7, #0]
 800a84e:	695b      	ldr	r3, [r3, #20]
 800a850:	019b      	lsls	r3, r3, #6
 800a852:	697a      	ldr	r2, [r7, #20]
 800a854:	4313      	orrs	r3, r2
 800a856:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	697a      	ldr	r2, [r7, #20]
 800a85c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	68fa      	ldr	r2, [r7, #12]
 800a862:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a864:	683b      	ldr	r3, [r7, #0]
 800a866:	685a      	ldr	r2, [r3, #4]
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	693a      	ldr	r2, [r7, #16]
 800a870:	621a      	str	r2, [r3, #32]
}
 800a872:	bf00      	nop
 800a874:	371c      	adds	r7, #28
 800a876:	46bd      	mov	sp, r7
 800a878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a87c:	4770      	bx	lr
 800a87e:	bf00      	nop
 800a880:	40010000 	.word	0x40010000
 800a884:	40010400 	.word	0x40010400

0800a888 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800a888:	b580      	push	{r7, lr}
 800a88a:	b086      	sub	sp, #24
 800a88c:	af00      	add	r7, sp, #0
 800a88e:	6078      	str	r0, [r7, #4]
 800a890:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a892:	2300      	movs	r3, #0
 800a894:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	689b      	ldr	r3, [r3, #8]
 800a89c:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a89e:	693b      	ldr	r3, [r7, #16]
 800a8a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a8a4:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800a8a6:	683b      	ldr	r3, [r7, #0]
 800a8a8:	685b      	ldr	r3, [r3, #4]
 800a8aa:	693a      	ldr	r2, [r7, #16]
 800a8ac:	4313      	orrs	r3, r2
 800a8ae:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800a8b0:	693b      	ldr	r3, [r7, #16]
 800a8b2:	f023 0307 	bic.w	r3, r3, #7
 800a8b6:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800a8b8:	683b      	ldr	r3, [r7, #0]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	693a      	ldr	r2, [r7, #16]
 800a8be:	4313      	orrs	r3, r2
 800a8c0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	693a      	ldr	r2, [r7, #16]
 800a8c8:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800a8ca:	683b      	ldr	r3, [r7, #0]
 800a8cc:	685b      	ldr	r3, [r3, #4]
 800a8ce:	2b70      	cmp	r3, #112	; 0x70
 800a8d0:	d01a      	beq.n	800a908 <TIM_SlaveTimer_SetConfig+0x80>
 800a8d2:	2b70      	cmp	r3, #112	; 0x70
 800a8d4:	d860      	bhi.n	800a998 <TIM_SlaveTimer_SetConfig+0x110>
 800a8d6:	2b60      	cmp	r3, #96	; 0x60
 800a8d8:	d054      	beq.n	800a984 <TIM_SlaveTimer_SetConfig+0xfc>
 800a8da:	2b60      	cmp	r3, #96	; 0x60
 800a8dc:	d85c      	bhi.n	800a998 <TIM_SlaveTimer_SetConfig+0x110>
 800a8de:	2b50      	cmp	r3, #80	; 0x50
 800a8e0:	d046      	beq.n	800a970 <TIM_SlaveTimer_SetConfig+0xe8>
 800a8e2:	2b50      	cmp	r3, #80	; 0x50
 800a8e4:	d858      	bhi.n	800a998 <TIM_SlaveTimer_SetConfig+0x110>
 800a8e6:	2b40      	cmp	r3, #64	; 0x40
 800a8e8:	d019      	beq.n	800a91e <TIM_SlaveTimer_SetConfig+0x96>
 800a8ea:	2b40      	cmp	r3, #64	; 0x40
 800a8ec:	d854      	bhi.n	800a998 <TIM_SlaveTimer_SetConfig+0x110>
 800a8ee:	2b30      	cmp	r3, #48	; 0x30
 800a8f0:	d055      	beq.n	800a99e <TIM_SlaveTimer_SetConfig+0x116>
 800a8f2:	2b30      	cmp	r3, #48	; 0x30
 800a8f4:	d850      	bhi.n	800a998 <TIM_SlaveTimer_SetConfig+0x110>
 800a8f6:	2b20      	cmp	r3, #32
 800a8f8:	d051      	beq.n	800a99e <TIM_SlaveTimer_SetConfig+0x116>
 800a8fa:	2b20      	cmp	r3, #32
 800a8fc:	d84c      	bhi.n	800a998 <TIM_SlaveTimer_SetConfig+0x110>
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d04d      	beq.n	800a99e <TIM_SlaveTimer_SetConfig+0x116>
 800a902:	2b10      	cmp	r3, #16
 800a904:	d04b      	beq.n	800a99e <TIM_SlaveTimer_SetConfig+0x116>
 800a906:	e047      	b.n	800a998 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	6818      	ldr	r0, [r3, #0]
 800a90c:	683b      	ldr	r3, [r7, #0]
 800a90e:	68d9      	ldr	r1, [r3, #12]
 800a910:	683b      	ldr	r3, [r7, #0]
 800a912:	689a      	ldr	r2, [r3, #8]
 800a914:	683b      	ldr	r3, [r7, #0]
 800a916:	691b      	ldr	r3, [r3, #16]
 800a918:	f000 f9ec 	bl	800acf4 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 800a91c:	e040      	b.n	800a9a0 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800a91e:	683b      	ldr	r3, [r7, #0]
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	2b05      	cmp	r3, #5
 800a924:	d101      	bne.n	800a92a <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 800a926:	2301      	movs	r3, #1
 800a928:	e03b      	b.n	800a9a2 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	6a1b      	ldr	r3, [r3, #32]
 800a930:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	6a1a      	ldr	r2, [r3, #32]
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	f022 0201 	bic.w	r2, r2, #1
 800a940:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	699b      	ldr	r3, [r3, #24]
 800a948:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a94a:	68bb      	ldr	r3, [r7, #8]
 800a94c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a950:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800a952:	683b      	ldr	r3, [r7, #0]
 800a954:	691b      	ldr	r3, [r3, #16]
 800a956:	011b      	lsls	r3, r3, #4
 800a958:	68ba      	ldr	r2, [r7, #8]
 800a95a:	4313      	orrs	r3, r2
 800a95c:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	68ba      	ldr	r2, [r7, #8]
 800a964:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	68fa      	ldr	r2, [r7, #12]
 800a96c:	621a      	str	r2, [r3, #32]
      break;
 800a96e:	e017      	b.n	800a9a0 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	6818      	ldr	r0, [r3, #0]
 800a974:	683b      	ldr	r3, [r7, #0]
 800a976:	6899      	ldr	r1, [r3, #8]
 800a978:	683b      	ldr	r3, [r7, #0]
 800a97a:	691b      	ldr	r3, [r3, #16]
 800a97c:	461a      	mov	r2, r3
 800a97e:	f000 f889 	bl	800aa94 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800a982:	e00d      	b.n	800a9a0 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	6818      	ldr	r0, [r3, #0]
 800a988:	683b      	ldr	r3, [r7, #0]
 800a98a:	6899      	ldr	r1, [r3, #8]
 800a98c:	683b      	ldr	r3, [r7, #0]
 800a98e:	691b      	ldr	r3, [r3, #16]
 800a990:	461a      	mov	r2, r3
 800a992:	f000 f8eb 	bl	800ab6c <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800a996:	e003      	b.n	800a9a0 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 800a998:	2301      	movs	r3, #1
 800a99a:	75fb      	strb	r3, [r7, #23]
      break;
 800a99c:	e000      	b.n	800a9a0 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 800a99e:	bf00      	nop
  }

  return status;
 800a9a0:	7dfb      	ldrb	r3, [r7, #23]
}
 800a9a2:	4618      	mov	r0, r3
 800a9a4:	3718      	adds	r7, #24
 800a9a6:	46bd      	mov	sp, r7
 800a9a8:	bd80      	pop	{r7, pc}
	...

0800a9ac <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800a9ac:	b480      	push	{r7}
 800a9ae:	b087      	sub	sp, #28
 800a9b0:	af00      	add	r7, sp, #0
 800a9b2:	60f8      	str	r0, [r7, #12]
 800a9b4:	60b9      	str	r1, [r7, #8]
 800a9b6:	607a      	str	r2, [r7, #4]
 800a9b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	6a1b      	ldr	r3, [r3, #32]
 800a9be:	f023 0201 	bic.w	r2, r3, #1
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	699b      	ldr	r3, [r3, #24]
 800a9ca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	6a1b      	ldr	r3, [r3, #32]
 800a9d0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	4a28      	ldr	r2, [pc, #160]	; (800aa78 <TIM_TI1_SetConfig+0xcc>)
 800a9d6:	4293      	cmp	r3, r2
 800a9d8:	d01b      	beq.n	800aa12 <TIM_TI1_SetConfig+0x66>
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a9e0:	d017      	beq.n	800aa12 <TIM_TI1_SetConfig+0x66>
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	4a25      	ldr	r2, [pc, #148]	; (800aa7c <TIM_TI1_SetConfig+0xd0>)
 800a9e6:	4293      	cmp	r3, r2
 800a9e8:	d013      	beq.n	800aa12 <TIM_TI1_SetConfig+0x66>
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	4a24      	ldr	r2, [pc, #144]	; (800aa80 <TIM_TI1_SetConfig+0xd4>)
 800a9ee:	4293      	cmp	r3, r2
 800a9f0:	d00f      	beq.n	800aa12 <TIM_TI1_SetConfig+0x66>
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	4a23      	ldr	r2, [pc, #140]	; (800aa84 <TIM_TI1_SetConfig+0xd8>)
 800a9f6:	4293      	cmp	r3, r2
 800a9f8:	d00b      	beq.n	800aa12 <TIM_TI1_SetConfig+0x66>
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	4a22      	ldr	r2, [pc, #136]	; (800aa88 <TIM_TI1_SetConfig+0xdc>)
 800a9fe:	4293      	cmp	r3, r2
 800aa00:	d007      	beq.n	800aa12 <TIM_TI1_SetConfig+0x66>
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	4a21      	ldr	r2, [pc, #132]	; (800aa8c <TIM_TI1_SetConfig+0xe0>)
 800aa06:	4293      	cmp	r3, r2
 800aa08:	d003      	beq.n	800aa12 <TIM_TI1_SetConfig+0x66>
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	4a20      	ldr	r2, [pc, #128]	; (800aa90 <TIM_TI1_SetConfig+0xe4>)
 800aa0e:	4293      	cmp	r3, r2
 800aa10:	d101      	bne.n	800aa16 <TIM_TI1_SetConfig+0x6a>
 800aa12:	2301      	movs	r3, #1
 800aa14:	e000      	b.n	800aa18 <TIM_TI1_SetConfig+0x6c>
 800aa16:	2300      	movs	r3, #0
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d008      	beq.n	800aa2e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800aa1c:	697b      	ldr	r3, [r7, #20]
 800aa1e:	f023 0303 	bic.w	r3, r3, #3
 800aa22:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800aa24:	697a      	ldr	r2, [r7, #20]
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	4313      	orrs	r3, r2
 800aa2a:	617b      	str	r3, [r7, #20]
 800aa2c:	e003      	b.n	800aa36 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800aa2e:	697b      	ldr	r3, [r7, #20]
 800aa30:	f043 0301 	orr.w	r3, r3, #1
 800aa34:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800aa36:	697b      	ldr	r3, [r7, #20]
 800aa38:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800aa3c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800aa3e:	683b      	ldr	r3, [r7, #0]
 800aa40:	011b      	lsls	r3, r3, #4
 800aa42:	b2db      	uxtb	r3, r3
 800aa44:	697a      	ldr	r2, [r7, #20]
 800aa46:	4313      	orrs	r3, r2
 800aa48:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800aa4a:	693b      	ldr	r3, [r7, #16]
 800aa4c:	f023 030a 	bic.w	r3, r3, #10
 800aa50:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800aa52:	68bb      	ldr	r3, [r7, #8]
 800aa54:	f003 030a 	and.w	r3, r3, #10
 800aa58:	693a      	ldr	r2, [r7, #16]
 800aa5a:	4313      	orrs	r3, r2
 800aa5c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	697a      	ldr	r2, [r7, #20]
 800aa62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	693a      	ldr	r2, [r7, #16]
 800aa68:	621a      	str	r2, [r3, #32]
}
 800aa6a:	bf00      	nop
 800aa6c:	371c      	adds	r7, #28
 800aa6e:	46bd      	mov	sp, r7
 800aa70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa74:	4770      	bx	lr
 800aa76:	bf00      	nop
 800aa78:	40010000 	.word	0x40010000
 800aa7c:	40000400 	.word	0x40000400
 800aa80:	40000800 	.word	0x40000800
 800aa84:	40000c00 	.word	0x40000c00
 800aa88:	40010400 	.word	0x40010400
 800aa8c:	40014000 	.word	0x40014000
 800aa90:	40001800 	.word	0x40001800

0800aa94 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800aa94:	b480      	push	{r7}
 800aa96:	b087      	sub	sp, #28
 800aa98:	af00      	add	r7, sp, #0
 800aa9a:	60f8      	str	r0, [r7, #12]
 800aa9c:	60b9      	str	r1, [r7, #8]
 800aa9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	6a1b      	ldr	r3, [r3, #32]
 800aaa4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	6a1b      	ldr	r3, [r3, #32]
 800aaaa:	f023 0201 	bic.w	r2, r3, #1
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	699b      	ldr	r3, [r3, #24]
 800aab6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800aab8:	693b      	ldr	r3, [r7, #16]
 800aaba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800aabe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	011b      	lsls	r3, r3, #4
 800aac4:	693a      	ldr	r2, [r7, #16]
 800aac6:	4313      	orrs	r3, r2
 800aac8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800aaca:	697b      	ldr	r3, [r7, #20]
 800aacc:	f023 030a 	bic.w	r3, r3, #10
 800aad0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800aad2:	697a      	ldr	r2, [r7, #20]
 800aad4:	68bb      	ldr	r3, [r7, #8]
 800aad6:	4313      	orrs	r3, r2
 800aad8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	693a      	ldr	r2, [r7, #16]
 800aade:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	697a      	ldr	r2, [r7, #20]
 800aae4:	621a      	str	r2, [r3, #32]
}
 800aae6:	bf00      	nop
 800aae8:	371c      	adds	r7, #28
 800aaea:	46bd      	mov	sp, r7
 800aaec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf0:	4770      	bx	lr

0800aaf2 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800aaf2:	b480      	push	{r7}
 800aaf4:	b087      	sub	sp, #28
 800aaf6:	af00      	add	r7, sp, #0
 800aaf8:	60f8      	str	r0, [r7, #12]
 800aafa:	60b9      	str	r1, [r7, #8]
 800aafc:	607a      	str	r2, [r7, #4]
 800aafe:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	6a1b      	ldr	r3, [r3, #32]
 800ab04:	f023 0210 	bic.w	r2, r3, #16
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	699b      	ldr	r3, [r3, #24]
 800ab10:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	6a1b      	ldr	r3, [r3, #32]
 800ab16:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800ab18:	697b      	ldr	r3, [r7, #20]
 800ab1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ab1e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	021b      	lsls	r3, r3, #8
 800ab24:	697a      	ldr	r2, [r7, #20]
 800ab26:	4313      	orrs	r3, r2
 800ab28:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ab2a:	697b      	ldr	r3, [r7, #20]
 800ab2c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ab30:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800ab32:	683b      	ldr	r3, [r7, #0]
 800ab34:	031b      	lsls	r3, r3, #12
 800ab36:	b29b      	uxth	r3, r3
 800ab38:	697a      	ldr	r2, [r7, #20]
 800ab3a:	4313      	orrs	r3, r2
 800ab3c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ab3e:	693b      	ldr	r3, [r7, #16]
 800ab40:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800ab44:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800ab46:	68bb      	ldr	r3, [r7, #8]
 800ab48:	011b      	lsls	r3, r3, #4
 800ab4a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800ab4e:	693a      	ldr	r2, [r7, #16]
 800ab50:	4313      	orrs	r3, r2
 800ab52:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	697a      	ldr	r2, [r7, #20]
 800ab58:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	693a      	ldr	r2, [r7, #16]
 800ab5e:	621a      	str	r2, [r3, #32]
}
 800ab60:	bf00      	nop
 800ab62:	371c      	adds	r7, #28
 800ab64:	46bd      	mov	sp, r7
 800ab66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab6a:	4770      	bx	lr

0800ab6c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ab6c:	b480      	push	{r7}
 800ab6e:	b087      	sub	sp, #28
 800ab70:	af00      	add	r7, sp, #0
 800ab72:	60f8      	str	r0, [r7, #12]
 800ab74:	60b9      	str	r1, [r7, #8]
 800ab76:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	6a1b      	ldr	r3, [r3, #32]
 800ab7c:	f023 0210 	bic.w	r2, r3, #16
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	699b      	ldr	r3, [r3, #24]
 800ab88:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	6a1b      	ldr	r3, [r3, #32]
 800ab8e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ab90:	697b      	ldr	r3, [r7, #20]
 800ab92:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ab96:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	031b      	lsls	r3, r3, #12
 800ab9c:	697a      	ldr	r2, [r7, #20]
 800ab9e:	4313      	orrs	r3, r2
 800aba0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800aba2:	693b      	ldr	r3, [r7, #16]
 800aba4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800aba8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800abaa:	68bb      	ldr	r3, [r7, #8]
 800abac:	011b      	lsls	r3, r3, #4
 800abae:	693a      	ldr	r2, [r7, #16]
 800abb0:	4313      	orrs	r3, r2
 800abb2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	697a      	ldr	r2, [r7, #20]
 800abb8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	693a      	ldr	r2, [r7, #16]
 800abbe:	621a      	str	r2, [r3, #32]
}
 800abc0:	bf00      	nop
 800abc2:	371c      	adds	r7, #28
 800abc4:	46bd      	mov	sp, r7
 800abc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abca:	4770      	bx	lr

0800abcc <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800abcc:	b480      	push	{r7}
 800abce:	b087      	sub	sp, #28
 800abd0:	af00      	add	r7, sp, #0
 800abd2:	60f8      	str	r0, [r7, #12]
 800abd4:	60b9      	str	r1, [r7, #8]
 800abd6:	607a      	str	r2, [r7, #4]
 800abd8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	6a1b      	ldr	r3, [r3, #32]
 800abde:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	69db      	ldr	r3, [r3, #28]
 800abea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	6a1b      	ldr	r3, [r3, #32]
 800abf0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800abf2:	697b      	ldr	r3, [r7, #20]
 800abf4:	f023 0303 	bic.w	r3, r3, #3
 800abf8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800abfa:	697a      	ldr	r2, [r7, #20]
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	4313      	orrs	r3, r2
 800ac00:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800ac02:	697b      	ldr	r3, [r7, #20]
 800ac04:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ac08:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800ac0a:	683b      	ldr	r3, [r7, #0]
 800ac0c:	011b      	lsls	r3, r3, #4
 800ac0e:	b2db      	uxtb	r3, r3
 800ac10:	697a      	ldr	r2, [r7, #20]
 800ac12:	4313      	orrs	r3, r2
 800ac14:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800ac16:	693b      	ldr	r3, [r7, #16]
 800ac18:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800ac1c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800ac1e:	68bb      	ldr	r3, [r7, #8]
 800ac20:	021b      	lsls	r3, r3, #8
 800ac22:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800ac26:	693a      	ldr	r2, [r7, #16]
 800ac28:	4313      	orrs	r3, r2
 800ac2a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	697a      	ldr	r2, [r7, #20]
 800ac30:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	693a      	ldr	r2, [r7, #16]
 800ac36:	621a      	str	r2, [r3, #32]
}
 800ac38:	bf00      	nop
 800ac3a:	371c      	adds	r7, #28
 800ac3c:	46bd      	mov	sp, r7
 800ac3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac42:	4770      	bx	lr

0800ac44 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800ac44:	b480      	push	{r7}
 800ac46:	b087      	sub	sp, #28
 800ac48:	af00      	add	r7, sp, #0
 800ac4a:	60f8      	str	r0, [r7, #12]
 800ac4c:	60b9      	str	r1, [r7, #8]
 800ac4e:	607a      	str	r2, [r7, #4]
 800ac50:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	6a1b      	ldr	r3, [r3, #32]
 800ac56:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	69db      	ldr	r3, [r3, #28]
 800ac62:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	6a1b      	ldr	r3, [r3, #32]
 800ac68:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800ac6a:	697b      	ldr	r3, [r7, #20]
 800ac6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ac70:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	021b      	lsls	r3, r3, #8
 800ac76:	697a      	ldr	r2, [r7, #20]
 800ac78:	4313      	orrs	r3, r2
 800ac7a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800ac7c:	697b      	ldr	r3, [r7, #20]
 800ac7e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ac82:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800ac84:	683b      	ldr	r3, [r7, #0]
 800ac86:	031b      	lsls	r3, r3, #12
 800ac88:	b29b      	uxth	r3, r3
 800ac8a:	697a      	ldr	r2, [r7, #20]
 800ac8c:	4313      	orrs	r3, r2
 800ac8e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800ac90:	693b      	ldr	r3, [r7, #16]
 800ac92:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800ac96:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800ac98:	68bb      	ldr	r3, [r7, #8]
 800ac9a:	031b      	lsls	r3, r3, #12
 800ac9c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800aca0:	693a      	ldr	r2, [r7, #16]
 800aca2:	4313      	orrs	r3, r2
 800aca4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	697a      	ldr	r2, [r7, #20]
 800acaa:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	693a      	ldr	r2, [r7, #16]
 800acb0:	621a      	str	r2, [r3, #32]
}
 800acb2:	bf00      	nop
 800acb4:	371c      	adds	r7, #28
 800acb6:	46bd      	mov	sp, r7
 800acb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acbc:	4770      	bx	lr

0800acbe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800acbe:	b480      	push	{r7}
 800acc0:	b085      	sub	sp, #20
 800acc2:	af00      	add	r7, sp, #0
 800acc4:	6078      	str	r0, [r7, #4]
 800acc6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	689b      	ldr	r3, [r3, #8]
 800accc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800acd4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800acd6:	683a      	ldr	r2, [r7, #0]
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	4313      	orrs	r3, r2
 800acdc:	f043 0307 	orr.w	r3, r3, #7
 800ace0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	68fa      	ldr	r2, [r7, #12]
 800ace6:	609a      	str	r2, [r3, #8]
}
 800ace8:	bf00      	nop
 800acea:	3714      	adds	r7, #20
 800acec:	46bd      	mov	sp, r7
 800acee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf2:	4770      	bx	lr

0800acf4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800acf4:	b480      	push	{r7}
 800acf6:	b087      	sub	sp, #28
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	60f8      	str	r0, [r7, #12]
 800acfc:	60b9      	str	r1, [r7, #8]
 800acfe:	607a      	str	r2, [r7, #4]
 800ad00:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	689b      	ldr	r3, [r3, #8]
 800ad06:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ad08:	697b      	ldr	r3, [r7, #20]
 800ad0a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ad0e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ad10:	683b      	ldr	r3, [r7, #0]
 800ad12:	021a      	lsls	r2, r3, #8
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	431a      	orrs	r2, r3
 800ad18:	68bb      	ldr	r3, [r7, #8]
 800ad1a:	4313      	orrs	r3, r2
 800ad1c:	697a      	ldr	r2, [r7, #20]
 800ad1e:	4313      	orrs	r3, r2
 800ad20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	697a      	ldr	r2, [r7, #20]
 800ad26:	609a      	str	r2, [r3, #8]
}
 800ad28:	bf00      	nop
 800ad2a:	371c      	adds	r7, #28
 800ad2c:	46bd      	mov	sp, r7
 800ad2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad32:	4770      	bx	lr

0800ad34 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ad34:	b480      	push	{r7}
 800ad36:	b087      	sub	sp, #28
 800ad38:	af00      	add	r7, sp, #0
 800ad3a:	60f8      	str	r0, [r7, #12]
 800ad3c:	60b9      	str	r1, [r7, #8]
 800ad3e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ad40:	68bb      	ldr	r3, [r7, #8]
 800ad42:	f003 031f 	and.w	r3, r3, #31
 800ad46:	2201      	movs	r2, #1
 800ad48:	fa02 f303 	lsl.w	r3, r2, r3
 800ad4c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	6a1a      	ldr	r2, [r3, #32]
 800ad52:	697b      	ldr	r3, [r7, #20]
 800ad54:	43db      	mvns	r3, r3
 800ad56:	401a      	ands	r2, r3
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	6a1a      	ldr	r2, [r3, #32]
 800ad60:	68bb      	ldr	r3, [r7, #8]
 800ad62:	f003 031f 	and.w	r3, r3, #31
 800ad66:	6879      	ldr	r1, [r7, #4]
 800ad68:	fa01 f303 	lsl.w	r3, r1, r3
 800ad6c:	431a      	orrs	r2, r3
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	621a      	str	r2, [r3, #32]
}
 800ad72:	bf00      	nop
 800ad74:	371c      	adds	r7, #28
 800ad76:	46bd      	mov	sp, r7
 800ad78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad7c:	4770      	bx	lr
	...

0800ad80 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ad80:	b480      	push	{r7}
 800ad82:	b085      	sub	sp, #20
 800ad84:	af00      	add	r7, sp, #0
 800ad86:	6078      	str	r0, [r7, #4]
 800ad88:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ad90:	2b01      	cmp	r3, #1
 800ad92:	d101      	bne.n	800ad98 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ad94:	2302      	movs	r3, #2
 800ad96:	e05a      	b.n	800ae4e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	2201      	movs	r2, #1
 800ad9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	2202      	movs	r2, #2
 800ada4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	685b      	ldr	r3, [r3, #4]
 800adae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	689b      	ldr	r3, [r3, #8]
 800adb6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800adbe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800adc0:	683b      	ldr	r3, [r7, #0]
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	68fa      	ldr	r2, [r7, #12]
 800adc6:	4313      	orrs	r3, r2
 800adc8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	68fa      	ldr	r2, [r7, #12]
 800add0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	4a21      	ldr	r2, [pc, #132]	; (800ae5c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800add8:	4293      	cmp	r3, r2
 800adda:	d022      	beq.n	800ae22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ade4:	d01d      	beq.n	800ae22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	4a1d      	ldr	r2, [pc, #116]	; (800ae60 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800adec:	4293      	cmp	r3, r2
 800adee:	d018      	beq.n	800ae22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	4a1b      	ldr	r2, [pc, #108]	; (800ae64 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800adf6:	4293      	cmp	r3, r2
 800adf8:	d013      	beq.n	800ae22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	4a1a      	ldr	r2, [pc, #104]	; (800ae68 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800ae00:	4293      	cmp	r3, r2
 800ae02:	d00e      	beq.n	800ae22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	4a18      	ldr	r2, [pc, #96]	; (800ae6c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800ae0a:	4293      	cmp	r3, r2
 800ae0c:	d009      	beq.n	800ae22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	4a17      	ldr	r2, [pc, #92]	; (800ae70 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800ae14:	4293      	cmp	r3, r2
 800ae16:	d004      	beq.n	800ae22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	4a15      	ldr	r2, [pc, #84]	; (800ae74 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800ae1e:	4293      	cmp	r3, r2
 800ae20:	d10c      	bne.n	800ae3c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ae22:	68bb      	ldr	r3, [r7, #8]
 800ae24:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ae28:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ae2a:	683b      	ldr	r3, [r7, #0]
 800ae2c:	685b      	ldr	r3, [r3, #4]
 800ae2e:	68ba      	ldr	r2, [r7, #8]
 800ae30:	4313      	orrs	r3, r2
 800ae32:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	68ba      	ldr	r2, [r7, #8]
 800ae3a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	2201      	movs	r2, #1
 800ae40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	2200      	movs	r2, #0
 800ae48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ae4c:	2300      	movs	r3, #0
}
 800ae4e:	4618      	mov	r0, r3
 800ae50:	3714      	adds	r7, #20
 800ae52:	46bd      	mov	sp, r7
 800ae54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae58:	4770      	bx	lr
 800ae5a:	bf00      	nop
 800ae5c:	40010000 	.word	0x40010000
 800ae60:	40000400 	.word	0x40000400
 800ae64:	40000800 	.word	0x40000800
 800ae68:	40000c00 	.word	0x40000c00
 800ae6c:	40010400 	.word	0x40010400
 800ae70:	40014000 	.word	0x40014000
 800ae74:	40001800 	.word	0x40001800

0800ae78 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ae78:	b480      	push	{r7}
 800ae7a:	b083      	sub	sp, #12
 800ae7c:	af00      	add	r7, sp, #0
 800ae7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ae80:	bf00      	nop
 800ae82:	370c      	adds	r7, #12
 800ae84:	46bd      	mov	sp, r7
 800ae86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae8a:	4770      	bx	lr

0800ae8c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ae8c:	b480      	push	{r7}
 800ae8e:	b083      	sub	sp, #12
 800ae90:	af00      	add	r7, sp, #0
 800ae92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ae94:	bf00      	nop
 800ae96:	370c      	adds	r7, #12
 800ae98:	46bd      	mov	sp, r7
 800ae9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae9e:	4770      	bx	lr

0800aea0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800aea0:	b580      	push	{r7, lr}
 800aea2:	b082      	sub	sp, #8
 800aea4:	af00      	add	r7, sp, #0
 800aea6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d101      	bne.n	800aeb2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800aeae:	2301      	movs	r3, #1
 800aeb0:	e03f      	b.n	800af32 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aeb8:	b2db      	uxtb	r3, r3
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d106      	bne.n	800aecc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	2200      	movs	r2, #0
 800aec2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800aec6:	6878      	ldr	r0, [r7, #4]
 800aec8:	f7f9 f8b6 	bl	8004038 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	2224      	movs	r2, #36	; 0x24
 800aed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	68da      	ldr	r2, [r3, #12]
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800aee2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800aee4:	6878      	ldr	r0, [r7, #4]
 800aee6:	f000 ff11 	bl	800bd0c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	691a      	ldr	r2, [r3, #16]
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800aef8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	695a      	ldr	r2, [r3, #20]
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800af08:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	68da      	ldr	r2, [r3, #12]
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800af18:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	2200      	movs	r2, #0
 800af1e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	2220      	movs	r2, #32
 800af24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	2220      	movs	r2, #32
 800af2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800af30:	2300      	movs	r3, #0
}
 800af32:	4618      	mov	r0, r3
 800af34:	3708      	adds	r7, #8
 800af36:	46bd      	mov	sp, r7
 800af38:	bd80      	pop	{r7, pc}

0800af3a <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800af3a:	b480      	push	{r7}
 800af3c:	b085      	sub	sp, #20
 800af3e:	af00      	add	r7, sp, #0
 800af40:	60f8      	str	r0, [r7, #12]
 800af42:	60b9      	str	r1, [r7, #8]
 800af44:	4613      	mov	r3, r2
 800af46:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800af4e:	b2db      	uxtb	r3, r3
 800af50:	2b20      	cmp	r3, #32
 800af52:	d130      	bne.n	800afb6 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800af54:	68bb      	ldr	r3, [r7, #8]
 800af56:	2b00      	cmp	r3, #0
 800af58:	d002      	beq.n	800af60 <HAL_UART_Transmit_IT+0x26>
 800af5a:	88fb      	ldrh	r3, [r7, #6]
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d101      	bne.n	800af64 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800af60:	2301      	movs	r3, #1
 800af62:	e029      	b.n	800afb8 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800af6a:	2b01      	cmp	r3, #1
 800af6c:	d101      	bne.n	800af72 <HAL_UART_Transmit_IT+0x38>
 800af6e:	2302      	movs	r3, #2
 800af70:	e022      	b.n	800afb8 <HAL_UART_Transmit_IT+0x7e>
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	2201      	movs	r2, #1
 800af76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	68ba      	ldr	r2, [r7, #8]
 800af7e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	88fa      	ldrh	r2, [r7, #6]
 800af84:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	88fa      	ldrh	r2, [r7, #6]
 800af8a:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	2200      	movs	r2, #0
 800af90:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	2221      	movs	r2, #33	; 0x21
 800af96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	2200      	movs	r2, #0
 800af9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	68da      	ldr	r2, [r3, #12]
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800afb0:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800afb2:	2300      	movs	r3, #0
 800afb4:	e000      	b.n	800afb8 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800afb6:	2302      	movs	r3, #2
  }
}
 800afb8:	4618      	mov	r0, r3
 800afba:	3714      	adds	r7, #20
 800afbc:	46bd      	mov	sp, r7
 800afbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afc2:	4770      	bx	lr

0800afc4 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800afc4:	b580      	push	{r7, lr}
 800afc6:	b084      	sub	sp, #16
 800afc8:	af00      	add	r7, sp, #0
 800afca:	60f8      	str	r0, [r7, #12]
 800afcc:	60b9      	str	r1, [r7, #8]
 800afce:	4613      	mov	r3, r2
 800afd0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800afd8:	b2db      	uxtb	r3, r3
 800afda:	2b20      	cmp	r3, #32
 800afdc:	d11d      	bne.n	800b01a <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800afde:	68bb      	ldr	r3, [r7, #8]
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d002      	beq.n	800afea <HAL_UART_Receive_IT+0x26>
 800afe4:	88fb      	ldrh	r3, [r7, #6]
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d101      	bne.n	800afee <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800afea:	2301      	movs	r3, #1
 800afec:	e016      	b.n	800b01c <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aff4:	2b01      	cmp	r3, #1
 800aff6:	d101      	bne.n	800affc <HAL_UART_Receive_IT+0x38>
 800aff8:	2302      	movs	r3, #2
 800affa:	e00f      	b.n	800b01c <HAL_UART_Receive_IT+0x58>
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	2201      	movs	r2, #1
 800b000:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	2200      	movs	r2, #0
 800b008:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800b00a:	88fb      	ldrh	r3, [r7, #6]
 800b00c:	461a      	mov	r2, r3
 800b00e:	68b9      	ldr	r1, [r7, #8]
 800b010:	68f8      	ldr	r0, [r7, #12]
 800b012:	f000 fbdd 	bl	800b7d0 <UART_Start_Receive_IT>
 800b016:	4603      	mov	r3, r0
 800b018:	e000      	b.n	800b01c <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800b01a:	2302      	movs	r3, #2
  }
}
 800b01c:	4618      	mov	r0, r3
 800b01e:	3710      	adds	r7, #16
 800b020:	46bd      	mov	sp, r7
 800b022:	bd80      	pop	{r7, pc}

0800b024 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b024:	b580      	push	{r7, lr}
 800b026:	b084      	sub	sp, #16
 800b028:	af00      	add	r7, sp, #0
 800b02a:	60f8      	str	r0, [r7, #12]
 800b02c:	60b9      	str	r1, [r7, #8]
 800b02e:	4613      	mov	r3, r2
 800b030:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b038:	b2db      	uxtb	r3, r3
 800b03a:	2b20      	cmp	r3, #32
 800b03c:	d11d      	bne.n	800b07a <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800b03e:	68bb      	ldr	r3, [r7, #8]
 800b040:	2b00      	cmp	r3, #0
 800b042:	d002      	beq.n	800b04a <HAL_UART_Receive_DMA+0x26>
 800b044:	88fb      	ldrh	r3, [r7, #6]
 800b046:	2b00      	cmp	r3, #0
 800b048:	d101      	bne.n	800b04e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800b04a:	2301      	movs	r3, #1
 800b04c:	e016      	b.n	800b07c <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b054:	2b01      	cmp	r3, #1
 800b056:	d101      	bne.n	800b05c <HAL_UART_Receive_DMA+0x38>
 800b058:	2302      	movs	r3, #2
 800b05a:	e00f      	b.n	800b07c <HAL_UART_Receive_DMA+0x58>
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	2201      	movs	r2, #1
 800b060:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	2200      	movs	r2, #0
 800b068:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800b06a:	88fb      	ldrh	r3, [r7, #6]
 800b06c:	461a      	mov	r2, r3
 800b06e:	68b9      	ldr	r1, [r7, #8]
 800b070:	68f8      	ldr	r0, [r7, #12]
 800b072:	f000 fbeb 	bl	800b84c <UART_Start_Receive_DMA>
 800b076:	4603      	mov	r3, r0
 800b078:	e000      	b.n	800b07c <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800b07a:	2302      	movs	r3, #2
  }
}
 800b07c:	4618      	mov	r0, r3
 800b07e:	3710      	adds	r7, #16
 800b080:	46bd      	mov	sp, r7
 800b082:	bd80      	pop	{r7, pc}

0800b084 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b084:	b580      	push	{r7, lr}
 800b086:	b0ba      	sub	sp, #232	; 0xe8
 800b088:	af00      	add	r7, sp, #0
 800b08a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	68db      	ldr	r3, [r3, #12]
 800b09c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	695b      	ldr	r3, [r3, #20]
 800b0a6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800b0aa:	2300      	movs	r3, #0
 800b0ac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800b0b0:	2300      	movs	r3, #0
 800b0b2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800b0b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b0ba:	f003 030f 	and.w	r3, r3, #15
 800b0be:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800b0c2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d10f      	bne.n	800b0ea <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b0ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b0ce:	f003 0320 	and.w	r3, r3, #32
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d009      	beq.n	800b0ea <HAL_UART_IRQHandler+0x66>
 800b0d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b0da:	f003 0320 	and.w	r3, r3, #32
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d003      	beq.n	800b0ea <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800b0e2:	6878      	ldr	r0, [r7, #4]
 800b0e4:	f000 fd57 	bl	800bb96 <UART_Receive_IT>
      return;
 800b0e8:	e256      	b.n	800b598 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800b0ea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	f000 80de 	beq.w	800b2b0 <HAL_UART_IRQHandler+0x22c>
 800b0f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b0f8:	f003 0301 	and.w	r3, r3, #1
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d106      	bne.n	800b10e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800b100:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b104:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800b108:	2b00      	cmp	r3, #0
 800b10a:	f000 80d1 	beq.w	800b2b0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800b10e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b112:	f003 0301 	and.w	r3, r3, #1
 800b116:	2b00      	cmp	r3, #0
 800b118:	d00b      	beq.n	800b132 <HAL_UART_IRQHandler+0xae>
 800b11a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b11e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b122:	2b00      	cmp	r3, #0
 800b124:	d005      	beq.n	800b132 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b12a:	f043 0201 	orr.w	r2, r3, #1
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b132:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b136:	f003 0304 	and.w	r3, r3, #4
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d00b      	beq.n	800b156 <HAL_UART_IRQHandler+0xd2>
 800b13e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b142:	f003 0301 	and.w	r3, r3, #1
 800b146:	2b00      	cmp	r3, #0
 800b148:	d005      	beq.n	800b156 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b14e:	f043 0202 	orr.w	r2, r3, #2
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b156:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b15a:	f003 0302 	and.w	r3, r3, #2
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d00b      	beq.n	800b17a <HAL_UART_IRQHandler+0xf6>
 800b162:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b166:	f003 0301 	and.w	r3, r3, #1
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d005      	beq.n	800b17a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b172:	f043 0204 	orr.w	r2, r3, #4
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800b17a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b17e:	f003 0308 	and.w	r3, r3, #8
 800b182:	2b00      	cmp	r3, #0
 800b184:	d011      	beq.n	800b1aa <HAL_UART_IRQHandler+0x126>
 800b186:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b18a:	f003 0320 	and.w	r3, r3, #32
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d105      	bne.n	800b19e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800b192:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b196:	f003 0301 	and.w	r3, r3, #1
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d005      	beq.n	800b1aa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1a2:	f043 0208 	orr.w	r2, r3, #8
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	f000 81ed 	beq.w	800b58e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b1b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b1b8:	f003 0320 	and.w	r3, r3, #32
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d008      	beq.n	800b1d2 <HAL_UART_IRQHandler+0x14e>
 800b1c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b1c4:	f003 0320 	and.w	r3, r3, #32
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d002      	beq.n	800b1d2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800b1cc:	6878      	ldr	r0, [r7, #4]
 800b1ce:	f000 fce2 	bl	800bb96 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	695b      	ldr	r3, [r3, #20]
 800b1d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b1dc:	2b40      	cmp	r3, #64	; 0x40
 800b1de:	bf0c      	ite	eq
 800b1e0:	2301      	moveq	r3, #1
 800b1e2:	2300      	movne	r3, #0
 800b1e4:	b2db      	uxtb	r3, r3
 800b1e6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1ee:	f003 0308 	and.w	r3, r3, #8
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d103      	bne.n	800b1fe <HAL_UART_IRQHandler+0x17a>
 800b1f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d04f      	beq.n	800b29e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b1fe:	6878      	ldr	r0, [r7, #4]
 800b200:	f000 fbea 	bl	800b9d8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	695b      	ldr	r3, [r3, #20]
 800b20a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b20e:	2b40      	cmp	r3, #64	; 0x40
 800b210:	d141      	bne.n	800b296 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	3314      	adds	r3, #20
 800b218:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b21c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b220:	e853 3f00 	ldrex	r3, [r3]
 800b224:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800b228:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b22c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b230:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	3314      	adds	r3, #20
 800b23a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b23e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b242:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b246:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b24a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b24e:	e841 2300 	strex	r3, r2, [r1]
 800b252:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800b256:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d1d9      	bne.n	800b212 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b262:	2b00      	cmp	r3, #0
 800b264:	d013      	beq.n	800b28e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b26a:	4a7d      	ldr	r2, [pc, #500]	; (800b460 <HAL_UART_IRQHandler+0x3dc>)
 800b26c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b272:	4618      	mov	r0, r3
 800b274:	f7fb fc08 	bl	8006a88 <HAL_DMA_Abort_IT>
 800b278:	4603      	mov	r3, r0
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d016      	beq.n	800b2ac <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b282:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b284:	687a      	ldr	r2, [r7, #4]
 800b286:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800b288:	4610      	mov	r0, r2
 800b28a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b28c:	e00e      	b.n	800b2ac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b28e:	6878      	ldr	r0, [r7, #4]
 800b290:	f000 f990 	bl	800b5b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b294:	e00a      	b.n	800b2ac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b296:	6878      	ldr	r0, [r7, #4]
 800b298:	f000 f98c 	bl	800b5b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b29c:	e006      	b.n	800b2ac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b29e:	6878      	ldr	r0, [r7, #4]
 800b2a0:	f000 f988 	bl	800b5b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	2200      	movs	r2, #0
 800b2a8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800b2aa:	e170      	b.n	800b58e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b2ac:	bf00      	nop
    return;
 800b2ae:	e16e      	b.n	800b58e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2b4:	2b01      	cmp	r3, #1
 800b2b6:	f040 814a 	bne.w	800b54e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800b2ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b2be:	f003 0310 	and.w	r3, r3, #16
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	f000 8143 	beq.w	800b54e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800b2c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b2cc:	f003 0310 	and.w	r3, r3, #16
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	f000 813c 	beq.w	800b54e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b2d6:	2300      	movs	r3, #0
 800b2d8:	60bb      	str	r3, [r7, #8]
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	60bb      	str	r3, [r7, #8]
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	685b      	ldr	r3, [r3, #4]
 800b2e8:	60bb      	str	r3, [r7, #8]
 800b2ea:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	695b      	ldr	r3, [r3, #20]
 800b2f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b2f6:	2b40      	cmp	r3, #64	; 0x40
 800b2f8:	f040 80b4 	bne.w	800b464 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	685b      	ldr	r3, [r3, #4]
 800b304:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b308:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	f000 8140 	beq.w	800b592 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b316:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b31a:	429a      	cmp	r2, r3
 800b31c:	f080 8139 	bcs.w	800b592 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b326:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b32c:	69db      	ldr	r3, [r3, #28]
 800b32e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b332:	f000 8088 	beq.w	800b446 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	330c      	adds	r3, #12
 800b33c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b340:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b344:	e853 3f00 	ldrex	r3, [r3]
 800b348:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b34c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b350:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b354:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	330c      	adds	r3, #12
 800b35e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800b362:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b366:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b36a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b36e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b372:	e841 2300 	strex	r3, r2, [r1]
 800b376:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b37a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d1d9      	bne.n	800b336 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	3314      	adds	r3, #20
 800b388:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b38a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b38c:	e853 3f00 	ldrex	r3, [r3]
 800b390:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b392:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b394:	f023 0301 	bic.w	r3, r3, #1
 800b398:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	3314      	adds	r3, #20
 800b3a2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b3a6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b3aa:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3ac:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b3ae:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b3b2:	e841 2300 	strex	r3, r2, [r1]
 800b3b6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b3b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d1e1      	bne.n	800b382 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	3314      	adds	r3, #20
 800b3c4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b3c8:	e853 3f00 	ldrex	r3, [r3]
 800b3cc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b3ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b3d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b3d4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	3314      	adds	r3, #20
 800b3de:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b3e2:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b3e4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3e6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b3e8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b3ea:	e841 2300 	strex	r3, r2, [r1]
 800b3ee:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b3f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d1e3      	bne.n	800b3be <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	2220      	movs	r2, #32
 800b3fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	2200      	movs	r2, #0
 800b402:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	330c      	adds	r3, #12
 800b40a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b40c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b40e:	e853 3f00 	ldrex	r3, [r3]
 800b412:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b414:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b416:	f023 0310 	bic.w	r3, r3, #16
 800b41a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	330c      	adds	r3, #12
 800b424:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800b428:	65ba      	str	r2, [r7, #88]	; 0x58
 800b42a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b42c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b42e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b430:	e841 2300 	strex	r3, r2, [r1]
 800b434:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b436:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d1e3      	bne.n	800b404 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b440:	4618      	mov	r0, r3
 800b442:	f7fb fab1 	bl	80069a8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b44e:	b29b      	uxth	r3, r3
 800b450:	1ad3      	subs	r3, r2, r3
 800b452:	b29b      	uxth	r3, r3
 800b454:	4619      	mov	r1, r3
 800b456:	6878      	ldr	r0, [r7, #4]
 800b458:	f000 f8b6 	bl	800b5c8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b45c:	e099      	b.n	800b592 <HAL_UART_IRQHandler+0x50e>
 800b45e:	bf00      	nop
 800b460:	0800ba9f 	.word	0x0800ba9f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b46c:	b29b      	uxth	r3, r3
 800b46e:	1ad3      	subs	r3, r2, r3
 800b470:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b478:	b29b      	uxth	r3, r3
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	f000 808b 	beq.w	800b596 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800b480:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b484:	2b00      	cmp	r3, #0
 800b486:	f000 8086 	beq.w	800b596 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	330c      	adds	r3, #12
 800b490:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b492:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b494:	e853 3f00 	ldrex	r3, [r3]
 800b498:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b49a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b49c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b4a0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	330c      	adds	r3, #12
 800b4aa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800b4ae:	647a      	str	r2, [r7, #68]	; 0x44
 800b4b0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4b2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b4b4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b4b6:	e841 2300 	strex	r3, r2, [r1]
 800b4ba:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b4bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d1e3      	bne.n	800b48a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	3314      	adds	r3, #20
 800b4c8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4cc:	e853 3f00 	ldrex	r3, [r3]
 800b4d0:	623b      	str	r3, [r7, #32]
   return(result);
 800b4d2:	6a3b      	ldr	r3, [r7, #32]
 800b4d4:	f023 0301 	bic.w	r3, r3, #1
 800b4d8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	3314      	adds	r3, #20
 800b4e2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b4e6:	633a      	str	r2, [r7, #48]	; 0x30
 800b4e8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b4ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b4ee:	e841 2300 	strex	r3, r2, [r1]
 800b4f2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b4f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d1e3      	bne.n	800b4c2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	2220      	movs	r2, #32
 800b4fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	2200      	movs	r2, #0
 800b506:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	330c      	adds	r3, #12
 800b50e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b510:	693b      	ldr	r3, [r7, #16]
 800b512:	e853 3f00 	ldrex	r3, [r3]
 800b516:	60fb      	str	r3, [r7, #12]
   return(result);
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	f023 0310 	bic.w	r3, r3, #16
 800b51e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	330c      	adds	r3, #12
 800b528:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800b52c:	61fa      	str	r2, [r7, #28]
 800b52e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b530:	69b9      	ldr	r1, [r7, #24]
 800b532:	69fa      	ldr	r2, [r7, #28]
 800b534:	e841 2300 	strex	r3, r2, [r1]
 800b538:	617b      	str	r3, [r7, #20]
   return(result);
 800b53a:	697b      	ldr	r3, [r7, #20]
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d1e3      	bne.n	800b508 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b540:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b544:	4619      	mov	r1, r3
 800b546:	6878      	ldr	r0, [r7, #4]
 800b548:	f000 f83e 	bl	800b5c8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b54c:	e023      	b.n	800b596 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800b54e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b552:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b556:	2b00      	cmp	r3, #0
 800b558:	d009      	beq.n	800b56e <HAL_UART_IRQHandler+0x4ea>
 800b55a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b55e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b562:	2b00      	cmp	r3, #0
 800b564:	d003      	beq.n	800b56e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800b566:	6878      	ldr	r0, [r7, #4]
 800b568:	f000 faad 	bl	800bac6 <UART_Transmit_IT>
    return;
 800b56c:	e014      	b.n	800b598 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800b56e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b572:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b576:	2b00      	cmp	r3, #0
 800b578:	d00e      	beq.n	800b598 <HAL_UART_IRQHandler+0x514>
 800b57a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b57e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b582:	2b00      	cmp	r3, #0
 800b584:	d008      	beq.n	800b598 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800b586:	6878      	ldr	r0, [r7, #4]
 800b588:	f000 faed 	bl	800bb66 <UART_EndTransmit_IT>
    return;
 800b58c:	e004      	b.n	800b598 <HAL_UART_IRQHandler+0x514>
    return;
 800b58e:	bf00      	nop
 800b590:	e002      	b.n	800b598 <HAL_UART_IRQHandler+0x514>
      return;
 800b592:	bf00      	nop
 800b594:	e000      	b.n	800b598 <HAL_UART_IRQHandler+0x514>
      return;
 800b596:	bf00      	nop
  }
}
 800b598:	37e8      	adds	r7, #232	; 0xe8
 800b59a:	46bd      	mov	sp, r7
 800b59c:	bd80      	pop	{r7, pc}
 800b59e:	bf00      	nop

0800b5a0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b5a0:	b480      	push	{r7}
 800b5a2:	b083      	sub	sp, #12
 800b5a4:	af00      	add	r7, sp, #0
 800b5a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800b5a8:	bf00      	nop
 800b5aa:	370c      	adds	r7, #12
 800b5ac:	46bd      	mov	sp, r7
 800b5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5b2:	4770      	bx	lr

0800b5b4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b5b4:	b480      	push	{r7}
 800b5b6:	b083      	sub	sp, #12
 800b5b8:	af00      	add	r7, sp, #0
 800b5ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800b5bc:	bf00      	nop
 800b5be:	370c      	adds	r7, #12
 800b5c0:	46bd      	mov	sp, r7
 800b5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c6:	4770      	bx	lr

0800b5c8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b5c8:	b480      	push	{r7}
 800b5ca:	b083      	sub	sp, #12
 800b5cc:	af00      	add	r7, sp, #0
 800b5ce:	6078      	str	r0, [r7, #4]
 800b5d0:	460b      	mov	r3, r1
 800b5d2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b5d4:	bf00      	nop
 800b5d6:	370c      	adds	r7, #12
 800b5d8:	46bd      	mov	sp, r7
 800b5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5de:	4770      	bx	lr

0800b5e0 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b5e0:	b580      	push	{r7, lr}
 800b5e2:	b09c      	sub	sp, #112	; 0x70
 800b5e4:	af00      	add	r7, sp, #0
 800b5e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5ec:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d172      	bne.n	800b6e2 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800b5fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b5fe:	2200      	movs	r2, #0
 800b600:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b602:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	330c      	adds	r3, #12
 800b608:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b60a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b60c:	e853 3f00 	ldrex	r3, [r3]
 800b610:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b612:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b614:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b618:	66bb      	str	r3, [r7, #104]	; 0x68
 800b61a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	330c      	adds	r3, #12
 800b620:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b622:	65ba      	str	r2, [r7, #88]	; 0x58
 800b624:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b626:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b628:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b62a:	e841 2300 	strex	r3, r2, [r1]
 800b62e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b630:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b632:	2b00      	cmp	r3, #0
 800b634:	d1e5      	bne.n	800b602 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b636:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	3314      	adds	r3, #20
 800b63c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b63e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b640:	e853 3f00 	ldrex	r3, [r3]
 800b644:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b646:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b648:	f023 0301 	bic.w	r3, r3, #1
 800b64c:	667b      	str	r3, [r7, #100]	; 0x64
 800b64e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	3314      	adds	r3, #20
 800b654:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b656:	647a      	str	r2, [r7, #68]	; 0x44
 800b658:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b65a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b65c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b65e:	e841 2300 	strex	r3, r2, [r1]
 800b662:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b664:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b666:	2b00      	cmp	r3, #0
 800b668:	d1e5      	bne.n	800b636 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b66a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	3314      	adds	r3, #20
 800b670:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b674:	e853 3f00 	ldrex	r3, [r3]
 800b678:	623b      	str	r3, [r7, #32]
   return(result);
 800b67a:	6a3b      	ldr	r3, [r7, #32]
 800b67c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b680:	663b      	str	r3, [r7, #96]	; 0x60
 800b682:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	3314      	adds	r3, #20
 800b688:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b68a:	633a      	str	r2, [r7, #48]	; 0x30
 800b68c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b68e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b690:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b692:	e841 2300 	strex	r3, r2, [r1]
 800b696:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d1e5      	bne.n	800b66a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b69e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b6a0:	2220      	movs	r2, #32
 800b6a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b6a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b6a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6aa:	2b01      	cmp	r3, #1
 800b6ac:	d119      	bne.n	800b6e2 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b6ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	330c      	adds	r3, #12
 800b6b4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6b6:	693b      	ldr	r3, [r7, #16]
 800b6b8:	e853 3f00 	ldrex	r3, [r3]
 800b6bc:	60fb      	str	r3, [r7, #12]
   return(result);
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	f023 0310 	bic.w	r3, r3, #16
 800b6c4:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b6c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	330c      	adds	r3, #12
 800b6cc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b6ce:	61fa      	str	r2, [r7, #28]
 800b6d0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6d2:	69b9      	ldr	r1, [r7, #24]
 800b6d4:	69fa      	ldr	r2, [r7, #28]
 800b6d6:	e841 2300 	strex	r3, r2, [r1]
 800b6da:	617b      	str	r3, [r7, #20]
   return(result);
 800b6dc:	697b      	ldr	r3, [r7, #20]
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d1e5      	bne.n	800b6ae <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b6e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b6e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6e6:	2b01      	cmp	r3, #1
 800b6e8:	d106      	bne.n	800b6f8 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b6ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b6ec:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b6ee:	4619      	mov	r1, r3
 800b6f0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800b6f2:	f7ff ff69 	bl	800b5c8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b6f6:	e002      	b.n	800b6fe <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800b6f8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800b6fa:	f7f6 ff31 	bl	8002560 <HAL_UART_RxCpltCallback>
}
 800b6fe:	bf00      	nop
 800b700:	3770      	adds	r7, #112	; 0x70
 800b702:	46bd      	mov	sp, r7
 800b704:	bd80      	pop	{r7, pc}

0800b706 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b706:	b580      	push	{r7, lr}
 800b708:	b084      	sub	sp, #16
 800b70a:	af00      	add	r7, sp, #0
 800b70c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b712:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b718:	2b01      	cmp	r3, #1
 800b71a:	d108      	bne.n	800b72e <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b720:	085b      	lsrs	r3, r3, #1
 800b722:	b29b      	uxth	r3, r3
 800b724:	4619      	mov	r1, r3
 800b726:	68f8      	ldr	r0, [r7, #12]
 800b728:	f7ff ff4e 	bl	800b5c8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b72c:	e002      	b.n	800b734 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800b72e:	68f8      	ldr	r0, [r7, #12]
 800b730:	f7ff ff36 	bl	800b5a0 <HAL_UART_RxHalfCpltCallback>
}
 800b734:	bf00      	nop
 800b736:	3710      	adds	r7, #16
 800b738:	46bd      	mov	sp, r7
 800b73a:	bd80      	pop	{r7, pc}

0800b73c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b73c:	b580      	push	{r7, lr}
 800b73e:	b084      	sub	sp, #16
 800b740:	af00      	add	r7, sp, #0
 800b742:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800b744:	2300      	movs	r3, #0
 800b746:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b74c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800b74e:	68bb      	ldr	r3, [r7, #8]
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	695b      	ldr	r3, [r3, #20]
 800b754:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b758:	2b80      	cmp	r3, #128	; 0x80
 800b75a:	bf0c      	ite	eq
 800b75c:	2301      	moveq	r3, #1
 800b75e:	2300      	movne	r3, #0
 800b760:	b2db      	uxtb	r3, r3
 800b762:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800b764:	68bb      	ldr	r3, [r7, #8]
 800b766:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b76a:	b2db      	uxtb	r3, r3
 800b76c:	2b21      	cmp	r3, #33	; 0x21
 800b76e:	d108      	bne.n	800b782 <UART_DMAError+0x46>
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	2b00      	cmp	r3, #0
 800b774:	d005      	beq.n	800b782 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800b776:	68bb      	ldr	r3, [r7, #8]
 800b778:	2200      	movs	r2, #0
 800b77a:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800b77c:	68b8      	ldr	r0, [r7, #8]
 800b77e:	f000 f903 	bl	800b988 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b782:	68bb      	ldr	r3, [r7, #8]
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	695b      	ldr	r3, [r3, #20]
 800b788:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b78c:	2b40      	cmp	r3, #64	; 0x40
 800b78e:	bf0c      	ite	eq
 800b790:	2301      	moveq	r3, #1
 800b792:	2300      	movne	r3, #0
 800b794:	b2db      	uxtb	r3, r3
 800b796:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800b798:	68bb      	ldr	r3, [r7, #8]
 800b79a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b79e:	b2db      	uxtb	r3, r3
 800b7a0:	2b22      	cmp	r3, #34	; 0x22
 800b7a2:	d108      	bne.n	800b7b6 <UART_DMAError+0x7a>
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d005      	beq.n	800b7b6 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800b7aa:	68bb      	ldr	r3, [r7, #8]
 800b7ac:	2200      	movs	r2, #0
 800b7ae:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800b7b0:	68b8      	ldr	r0, [r7, #8]
 800b7b2:	f000 f911 	bl	800b9d8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b7b6:	68bb      	ldr	r3, [r7, #8]
 800b7b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7ba:	f043 0210 	orr.w	r2, r3, #16
 800b7be:	68bb      	ldr	r3, [r7, #8]
 800b7c0:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b7c2:	68b8      	ldr	r0, [r7, #8]
 800b7c4:	f7ff fef6 	bl	800b5b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b7c8:	bf00      	nop
 800b7ca:	3710      	adds	r7, #16
 800b7cc:	46bd      	mov	sp, r7
 800b7ce:	bd80      	pop	{r7, pc}

0800b7d0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b7d0:	b480      	push	{r7}
 800b7d2:	b085      	sub	sp, #20
 800b7d4:	af00      	add	r7, sp, #0
 800b7d6:	60f8      	str	r0, [r7, #12]
 800b7d8:	60b9      	str	r1, [r7, #8]
 800b7da:	4613      	mov	r3, r2
 800b7dc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	68ba      	ldr	r2, [r7, #8]
 800b7e2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	88fa      	ldrh	r2, [r7, #6]
 800b7e8:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	88fa      	ldrh	r2, [r7, #6]
 800b7ee:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	2200      	movs	r2, #0
 800b7f4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	2222      	movs	r2, #34	; 0x22
 800b7fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	2200      	movs	r2, #0
 800b802:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	691b      	ldr	r3, [r3, #16]
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d007      	beq.n	800b81e <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	68da      	ldr	r2, [r3, #12]
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b81c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	695a      	ldr	r2, [r3, #20]
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	f042 0201 	orr.w	r2, r2, #1
 800b82c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	68da      	ldr	r2, [r3, #12]
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	f042 0220 	orr.w	r2, r2, #32
 800b83c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b83e:	2300      	movs	r3, #0
}
 800b840:	4618      	mov	r0, r3
 800b842:	3714      	adds	r7, #20
 800b844:	46bd      	mov	sp, r7
 800b846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b84a:	4770      	bx	lr

0800b84c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b84c:	b580      	push	{r7, lr}
 800b84e:	b098      	sub	sp, #96	; 0x60
 800b850:	af00      	add	r7, sp, #0
 800b852:	60f8      	str	r0, [r7, #12]
 800b854:	60b9      	str	r1, [r7, #8]
 800b856:	4613      	mov	r3, r2
 800b858:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800b85a:	68ba      	ldr	r2, [r7, #8]
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	88fa      	ldrh	r2, [r7, #6]
 800b864:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	2200      	movs	r2, #0
 800b86a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	2222      	movs	r2, #34	; 0x22
 800b870:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b878:	4a40      	ldr	r2, [pc, #256]	; (800b97c <UART_Start_Receive_DMA+0x130>)
 800b87a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b880:	4a3f      	ldr	r2, [pc, #252]	; (800b980 <UART_Start_Receive_DMA+0x134>)
 800b882:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b888:	4a3e      	ldr	r2, [pc, #248]	; (800b984 <UART_Start_Receive_DMA+0x138>)
 800b88a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b890:	2200      	movs	r2, #0
 800b892:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800b894:	f107 0308 	add.w	r3, r7, #8
 800b898:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	3304      	adds	r3, #4
 800b8a4:	4619      	mov	r1, r3
 800b8a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b8a8:	681a      	ldr	r2, [r3, #0]
 800b8aa:	88fb      	ldrh	r3, [r7, #6]
 800b8ac:	f7fb f824 	bl	80068f8 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800b8b0:	2300      	movs	r3, #0
 800b8b2:	613b      	str	r3, [r7, #16]
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	613b      	str	r3, [r7, #16]
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	685b      	ldr	r3, [r3, #4]
 800b8c2:	613b      	str	r3, [r7, #16]
 800b8c4:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	2200      	movs	r2, #0
 800b8ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	691b      	ldr	r3, [r3, #16]
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d019      	beq.n	800b90a <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	330c      	adds	r3, #12
 800b8dc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b8e0:	e853 3f00 	ldrex	r3, [r3]
 800b8e4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b8e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b8e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b8ec:	65bb      	str	r3, [r7, #88]	; 0x58
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	330c      	adds	r3, #12
 800b8f4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b8f6:	64fa      	str	r2, [r7, #76]	; 0x4c
 800b8f8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8fa:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800b8fc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b8fe:	e841 2300 	strex	r3, r2, [r1]
 800b902:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800b904:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b906:	2b00      	cmp	r3, #0
 800b908:	d1e5      	bne.n	800b8d6 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	3314      	adds	r3, #20
 800b910:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b914:	e853 3f00 	ldrex	r3, [r3]
 800b918:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b91a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b91c:	f043 0301 	orr.w	r3, r3, #1
 800b920:	657b      	str	r3, [r7, #84]	; 0x54
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	3314      	adds	r3, #20
 800b928:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b92a:	63ba      	str	r2, [r7, #56]	; 0x38
 800b92c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b92e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b930:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b932:	e841 2300 	strex	r3, r2, [r1]
 800b936:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d1e5      	bne.n	800b90a <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	3314      	adds	r3, #20
 800b944:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b946:	69bb      	ldr	r3, [r7, #24]
 800b948:	e853 3f00 	ldrex	r3, [r3]
 800b94c:	617b      	str	r3, [r7, #20]
   return(result);
 800b94e:	697b      	ldr	r3, [r7, #20]
 800b950:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b954:	653b      	str	r3, [r7, #80]	; 0x50
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	3314      	adds	r3, #20
 800b95c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b95e:	627a      	str	r2, [r7, #36]	; 0x24
 800b960:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b962:	6a39      	ldr	r1, [r7, #32]
 800b964:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b966:	e841 2300 	strex	r3, r2, [r1]
 800b96a:	61fb      	str	r3, [r7, #28]
   return(result);
 800b96c:	69fb      	ldr	r3, [r7, #28]
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d1e5      	bne.n	800b93e <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800b972:	2300      	movs	r3, #0
}
 800b974:	4618      	mov	r0, r3
 800b976:	3760      	adds	r7, #96	; 0x60
 800b978:	46bd      	mov	sp, r7
 800b97a:	bd80      	pop	{r7, pc}
 800b97c:	0800b5e1 	.word	0x0800b5e1
 800b980:	0800b707 	.word	0x0800b707
 800b984:	0800b73d 	.word	0x0800b73d

0800b988 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b988:	b480      	push	{r7}
 800b98a:	b089      	sub	sp, #36	; 0x24
 800b98c:	af00      	add	r7, sp, #0
 800b98e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	330c      	adds	r3, #12
 800b996:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	e853 3f00 	ldrex	r3, [r3]
 800b99e:	60bb      	str	r3, [r7, #8]
   return(result);
 800b9a0:	68bb      	ldr	r3, [r7, #8]
 800b9a2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800b9a6:	61fb      	str	r3, [r7, #28]
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	330c      	adds	r3, #12
 800b9ae:	69fa      	ldr	r2, [r7, #28]
 800b9b0:	61ba      	str	r2, [r7, #24]
 800b9b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9b4:	6979      	ldr	r1, [r7, #20]
 800b9b6:	69ba      	ldr	r2, [r7, #24]
 800b9b8:	e841 2300 	strex	r3, r2, [r1]
 800b9bc:	613b      	str	r3, [r7, #16]
   return(result);
 800b9be:	693b      	ldr	r3, [r7, #16]
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d1e5      	bne.n	800b990 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	2220      	movs	r2, #32
 800b9c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800b9cc:	bf00      	nop
 800b9ce:	3724      	adds	r7, #36	; 0x24
 800b9d0:	46bd      	mov	sp, r7
 800b9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9d6:	4770      	bx	lr

0800b9d8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b9d8:	b480      	push	{r7}
 800b9da:	b095      	sub	sp, #84	; 0x54
 800b9dc:	af00      	add	r7, sp, #0
 800b9de:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	330c      	adds	r3, #12
 800b9e6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9ea:	e853 3f00 	ldrex	r3, [r3]
 800b9ee:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b9f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9f2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b9f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	330c      	adds	r3, #12
 800b9fe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ba00:	643a      	str	r2, [r7, #64]	; 0x40
 800ba02:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba04:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ba06:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ba08:	e841 2300 	strex	r3, r2, [r1]
 800ba0c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ba0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d1e5      	bne.n	800b9e0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	3314      	adds	r3, #20
 800ba1a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba1c:	6a3b      	ldr	r3, [r7, #32]
 800ba1e:	e853 3f00 	ldrex	r3, [r3]
 800ba22:	61fb      	str	r3, [r7, #28]
   return(result);
 800ba24:	69fb      	ldr	r3, [r7, #28]
 800ba26:	f023 0301 	bic.w	r3, r3, #1
 800ba2a:	64bb      	str	r3, [r7, #72]	; 0x48
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	3314      	adds	r3, #20
 800ba32:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ba34:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ba36:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba38:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ba3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ba3c:	e841 2300 	strex	r3, r2, [r1]
 800ba40:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ba42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d1e5      	bne.n	800ba14 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba4c:	2b01      	cmp	r3, #1
 800ba4e:	d119      	bne.n	800ba84 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	330c      	adds	r3, #12
 800ba56:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	e853 3f00 	ldrex	r3, [r3]
 800ba5e:	60bb      	str	r3, [r7, #8]
   return(result);
 800ba60:	68bb      	ldr	r3, [r7, #8]
 800ba62:	f023 0310 	bic.w	r3, r3, #16
 800ba66:	647b      	str	r3, [r7, #68]	; 0x44
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	330c      	adds	r3, #12
 800ba6e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ba70:	61ba      	str	r2, [r7, #24]
 800ba72:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba74:	6979      	ldr	r1, [r7, #20]
 800ba76:	69ba      	ldr	r2, [r7, #24]
 800ba78:	e841 2300 	strex	r3, r2, [r1]
 800ba7c:	613b      	str	r3, [r7, #16]
   return(result);
 800ba7e:	693b      	ldr	r3, [r7, #16]
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d1e5      	bne.n	800ba50 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	2220      	movs	r2, #32
 800ba88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	2200      	movs	r2, #0
 800ba90:	631a      	str	r2, [r3, #48]	; 0x30
}
 800ba92:	bf00      	nop
 800ba94:	3754      	adds	r7, #84	; 0x54
 800ba96:	46bd      	mov	sp, r7
 800ba98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba9c:	4770      	bx	lr

0800ba9e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ba9e:	b580      	push	{r7, lr}
 800baa0:	b084      	sub	sp, #16
 800baa2:	af00      	add	r7, sp, #0
 800baa4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800baaa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	2200      	movs	r2, #0
 800bab0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	2200      	movs	r2, #0
 800bab6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bab8:	68f8      	ldr	r0, [r7, #12]
 800baba:	f7ff fd7b 	bl	800b5b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800babe:	bf00      	nop
 800bac0:	3710      	adds	r7, #16
 800bac2:	46bd      	mov	sp, r7
 800bac4:	bd80      	pop	{r7, pc}

0800bac6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800bac6:	b480      	push	{r7}
 800bac8:	b085      	sub	sp, #20
 800baca:	af00      	add	r7, sp, #0
 800bacc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bad4:	b2db      	uxtb	r3, r3
 800bad6:	2b21      	cmp	r3, #33	; 0x21
 800bad8:	d13e      	bne.n	800bb58 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	689b      	ldr	r3, [r3, #8]
 800bade:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bae2:	d114      	bne.n	800bb0e <UART_Transmit_IT+0x48>
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	691b      	ldr	r3, [r3, #16]
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d110      	bne.n	800bb0e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	6a1b      	ldr	r3, [r3, #32]
 800baf0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	881b      	ldrh	r3, [r3, #0]
 800baf6:	461a      	mov	r2, r3
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bb00:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	6a1b      	ldr	r3, [r3, #32]
 800bb06:	1c9a      	adds	r2, r3, #2
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	621a      	str	r2, [r3, #32]
 800bb0c:	e008      	b.n	800bb20 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	6a1b      	ldr	r3, [r3, #32]
 800bb12:	1c59      	adds	r1, r3, #1
 800bb14:	687a      	ldr	r2, [r7, #4]
 800bb16:	6211      	str	r1, [r2, #32]
 800bb18:	781a      	ldrb	r2, [r3, #0]
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800bb24:	b29b      	uxth	r3, r3
 800bb26:	3b01      	subs	r3, #1
 800bb28:	b29b      	uxth	r3, r3
 800bb2a:	687a      	ldr	r2, [r7, #4]
 800bb2c:	4619      	mov	r1, r3
 800bb2e:	84d1      	strh	r1, [r2, #38]	; 0x26
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d10f      	bne.n	800bb54 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	68da      	ldr	r2, [r3, #12]
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800bb42:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	68da      	ldr	r2, [r3, #12]
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bb52:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800bb54:	2300      	movs	r3, #0
 800bb56:	e000      	b.n	800bb5a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800bb58:	2302      	movs	r3, #2
  }
}
 800bb5a:	4618      	mov	r0, r3
 800bb5c:	3714      	adds	r7, #20
 800bb5e:	46bd      	mov	sp, r7
 800bb60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb64:	4770      	bx	lr

0800bb66 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800bb66:	b580      	push	{r7, lr}
 800bb68:	b082      	sub	sp, #8
 800bb6a:	af00      	add	r7, sp, #0
 800bb6c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	68da      	ldr	r2, [r3, #12]
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bb7c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	2220      	movs	r2, #32
 800bb82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800bb86:	6878      	ldr	r0, [r7, #4]
 800bb88:	f7f6 fcd4 	bl	8002534 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800bb8c:	2300      	movs	r3, #0
}
 800bb8e:	4618      	mov	r0, r3
 800bb90:	3708      	adds	r7, #8
 800bb92:	46bd      	mov	sp, r7
 800bb94:	bd80      	pop	{r7, pc}

0800bb96 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800bb96:	b580      	push	{r7, lr}
 800bb98:	b08c      	sub	sp, #48	; 0x30
 800bb9a:	af00      	add	r7, sp, #0
 800bb9c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800bba4:	b2db      	uxtb	r3, r3
 800bba6:	2b22      	cmp	r3, #34	; 0x22
 800bba8:	f040 80ab 	bne.w	800bd02 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	689b      	ldr	r3, [r3, #8]
 800bbb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bbb4:	d117      	bne.n	800bbe6 <UART_Receive_IT+0x50>
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	691b      	ldr	r3, [r3, #16]
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d113      	bne.n	800bbe6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800bbbe:	2300      	movs	r3, #0
 800bbc0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bbc6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	685b      	ldr	r3, [r3, #4]
 800bbce:	b29b      	uxth	r3, r3
 800bbd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bbd4:	b29a      	uxth	r2, r3
 800bbd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbd8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bbde:	1c9a      	adds	r2, r3, #2
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	629a      	str	r2, [r3, #40]	; 0x28
 800bbe4:	e026      	b.n	800bc34 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bbea:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800bbec:	2300      	movs	r3, #0
 800bbee:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	689b      	ldr	r3, [r3, #8]
 800bbf4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bbf8:	d007      	beq.n	800bc0a <UART_Receive_IT+0x74>
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	689b      	ldr	r3, [r3, #8]
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d10a      	bne.n	800bc18 <UART_Receive_IT+0x82>
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	691b      	ldr	r3, [r3, #16]
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d106      	bne.n	800bc18 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	685b      	ldr	r3, [r3, #4]
 800bc10:	b2da      	uxtb	r2, r3
 800bc12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc14:	701a      	strb	r2, [r3, #0]
 800bc16:	e008      	b.n	800bc2a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	685b      	ldr	r3, [r3, #4]
 800bc1e:	b2db      	uxtb	r3, r3
 800bc20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bc24:	b2da      	uxtb	r2, r3
 800bc26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc28:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc2e:	1c5a      	adds	r2, r3, #1
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bc38:	b29b      	uxth	r3, r3
 800bc3a:	3b01      	subs	r3, #1
 800bc3c:	b29b      	uxth	r3, r3
 800bc3e:	687a      	ldr	r2, [r7, #4]
 800bc40:	4619      	mov	r1, r3
 800bc42:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d15a      	bne.n	800bcfe <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	68da      	ldr	r2, [r3, #12]
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	f022 0220 	bic.w	r2, r2, #32
 800bc56:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	68da      	ldr	r2, [r3, #12]
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800bc66:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	695a      	ldr	r2, [r3, #20]
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	f022 0201 	bic.w	r2, r2, #1
 800bc76:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	2220      	movs	r2, #32
 800bc7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc84:	2b01      	cmp	r3, #1
 800bc86:	d135      	bne.n	800bcf4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	2200      	movs	r2, #0
 800bc8c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	330c      	adds	r3, #12
 800bc94:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc96:	697b      	ldr	r3, [r7, #20]
 800bc98:	e853 3f00 	ldrex	r3, [r3]
 800bc9c:	613b      	str	r3, [r7, #16]
   return(result);
 800bc9e:	693b      	ldr	r3, [r7, #16]
 800bca0:	f023 0310 	bic.w	r3, r3, #16
 800bca4:	627b      	str	r3, [r7, #36]	; 0x24
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	330c      	adds	r3, #12
 800bcac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bcae:	623a      	str	r2, [r7, #32]
 800bcb0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcb2:	69f9      	ldr	r1, [r7, #28]
 800bcb4:	6a3a      	ldr	r2, [r7, #32]
 800bcb6:	e841 2300 	strex	r3, r2, [r1]
 800bcba:	61bb      	str	r3, [r7, #24]
   return(result);
 800bcbc:	69bb      	ldr	r3, [r7, #24]
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d1e5      	bne.n	800bc8e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	f003 0310 	and.w	r3, r3, #16
 800bccc:	2b10      	cmp	r3, #16
 800bcce:	d10a      	bne.n	800bce6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800bcd0:	2300      	movs	r3, #0
 800bcd2:	60fb      	str	r3, [r7, #12]
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	60fb      	str	r3, [r7, #12]
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	685b      	ldr	r3, [r3, #4]
 800bce2:	60fb      	str	r3, [r7, #12]
 800bce4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800bcea:	4619      	mov	r1, r3
 800bcec:	6878      	ldr	r0, [r7, #4]
 800bcee:	f7ff fc6b 	bl	800b5c8 <HAL_UARTEx_RxEventCallback>
 800bcf2:	e002      	b.n	800bcfa <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800bcf4:	6878      	ldr	r0, [r7, #4]
 800bcf6:	f7f6 fc33 	bl	8002560 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800bcfa:	2300      	movs	r3, #0
 800bcfc:	e002      	b.n	800bd04 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800bcfe:	2300      	movs	r3, #0
 800bd00:	e000      	b.n	800bd04 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800bd02:	2302      	movs	r3, #2
  }
}
 800bd04:	4618      	mov	r0, r3
 800bd06:	3730      	adds	r7, #48	; 0x30
 800bd08:	46bd      	mov	sp, r7
 800bd0a:	bd80      	pop	{r7, pc}

0800bd0c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bd0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bd10:	b0c0      	sub	sp, #256	; 0x100
 800bd12:	af00      	add	r7, sp, #0
 800bd14:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bd18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	691b      	ldr	r3, [r3, #16]
 800bd20:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800bd24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bd28:	68d9      	ldr	r1, [r3, #12]
 800bd2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bd2e:	681a      	ldr	r2, [r3, #0]
 800bd30:	ea40 0301 	orr.w	r3, r0, r1
 800bd34:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800bd36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bd3a:	689a      	ldr	r2, [r3, #8]
 800bd3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bd40:	691b      	ldr	r3, [r3, #16]
 800bd42:	431a      	orrs	r2, r3
 800bd44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bd48:	695b      	ldr	r3, [r3, #20]
 800bd4a:	431a      	orrs	r2, r3
 800bd4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bd50:	69db      	ldr	r3, [r3, #28]
 800bd52:	4313      	orrs	r3, r2
 800bd54:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800bd58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	68db      	ldr	r3, [r3, #12]
 800bd60:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800bd64:	f021 010c 	bic.w	r1, r1, #12
 800bd68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bd6c:	681a      	ldr	r2, [r3, #0]
 800bd6e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800bd72:	430b      	orrs	r3, r1
 800bd74:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800bd76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	695b      	ldr	r3, [r3, #20]
 800bd7e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800bd82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bd86:	6999      	ldr	r1, [r3, #24]
 800bd88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bd8c:	681a      	ldr	r2, [r3, #0]
 800bd8e:	ea40 0301 	orr.w	r3, r0, r1
 800bd92:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800bd94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bd98:	681a      	ldr	r2, [r3, #0]
 800bd9a:	4b8f      	ldr	r3, [pc, #572]	; (800bfd8 <UART_SetConfig+0x2cc>)
 800bd9c:	429a      	cmp	r2, r3
 800bd9e:	d005      	beq.n	800bdac <UART_SetConfig+0xa0>
 800bda0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bda4:	681a      	ldr	r2, [r3, #0]
 800bda6:	4b8d      	ldr	r3, [pc, #564]	; (800bfdc <UART_SetConfig+0x2d0>)
 800bda8:	429a      	cmp	r2, r3
 800bdaa:	d104      	bne.n	800bdb6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800bdac:	f7fd f852 	bl	8008e54 <HAL_RCC_GetPCLK2Freq>
 800bdb0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800bdb4:	e003      	b.n	800bdbe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800bdb6:	f7fd f839 	bl	8008e2c <HAL_RCC_GetPCLK1Freq>
 800bdba:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bdbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bdc2:	69db      	ldr	r3, [r3, #28]
 800bdc4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bdc8:	f040 810c 	bne.w	800bfe4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800bdcc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bdd0:	2200      	movs	r2, #0
 800bdd2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800bdd6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800bdda:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800bdde:	4622      	mov	r2, r4
 800bde0:	462b      	mov	r3, r5
 800bde2:	1891      	adds	r1, r2, r2
 800bde4:	65b9      	str	r1, [r7, #88]	; 0x58
 800bde6:	415b      	adcs	r3, r3
 800bde8:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bdea:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800bdee:	4621      	mov	r1, r4
 800bdf0:	eb12 0801 	adds.w	r8, r2, r1
 800bdf4:	4629      	mov	r1, r5
 800bdf6:	eb43 0901 	adc.w	r9, r3, r1
 800bdfa:	f04f 0200 	mov.w	r2, #0
 800bdfe:	f04f 0300 	mov.w	r3, #0
 800be02:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800be06:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800be0a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800be0e:	4690      	mov	r8, r2
 800be10:	4699      	mov	r9, r3
 800be12:	4623      	mov	r3, r4
 800be14:	eb18 0303 	adds.w	r3, r8, r3
 800be18:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800be1c:	462b      	mov	r3, r5
 800be1e:	eb49 0303 	adc.w	r3, r9, r3
 800be22:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800be26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800be2a:	685b      	ldr	r3, [r3, #4]
 800be2c:	2200      	movs	r2, #0
 800be2e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800be32:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800be36:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800be3a:	460b      	mov	r3, r1
 800be3c:	18db      	adds	r3, r3, r3
 800be3e:	653b      	str	r3, [r7, #80]	; 0x50
 800be40:	4613      	mov	r3, r2
 800be42:	eb42 0303 	adc.w	r3, r2, r3
 800be46:	657b      	str	r3, [r7, #84]	; 0x54
 800be48:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800be4c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800be50:	f7f4 ff1a 	bl	8000c88 <__aeabi_uldivmod>
 800be54:	4602      	mov	r2, r0
 800be56:	460b      	mov	r3, r1
 800be58:	4b61      	ldr	r3, [pc, #388]	; (800bfe0 <UART_SetConfig+0x2d4>)
 800be5a:	fba3 2302 	umull	r2, r3, r3, r2
 800be5e:	095b      	lsrs	r3, r3, #5
 800be60:	011c      	lsls	r4, r3, #4
 800be62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800be66:	2200      	movs	r2, #0
 800be68:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800be6c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800be70:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800be74:	4642      	mov	r2, r8
 800be76:	464b      	mov	r3, r9
 800be78:	1891      	adds	r1, r2, r2
 800be7a:	64b9      	str	r1, [r7, #72]	; 0x48
 800be7c:	415b      	adcs	r3, r3
 800be7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800be80:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800be84:	4641      	mov	r1, r8
 800be86:	eb12 0a01 	adds.w	sl, r2, r1
 800be8a:	4649      	mov	r1, r9
 800be8c:	eb43 0b01 	adc.w	fp, r3, r1
 800be90:	f04f 0200 	mov.w	r2, #0
 800be94:	f04f 0300 	mov.w	r3, #0
 800be98:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800be9c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800bea0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800bea4:	4692      	mov	sl, r2
 800bea6:	469b      	mov	fp, r3
 800bea8:	4643      	mov	r3, r8
 800beaa:	eb1a 0303 	adds.w	r3, sl, r3
 800beae:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800beb2:	464b      	mov	r3, r9
 800beb4:	eb4b 0303 	adc.w	r3, fp, r3
 800beb8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800bebc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bec0:	685b      	ldr	r3, [r3, #4]
 800bec2:	2200      	movs	r2, #0
 800bec4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800bec8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800becc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800bed0:	460b      	mov	r3, r1
 800bed2:	18db      	adds	r3, r3, r3
 800bed4:	643b      	str	r3, [r7, #64]	; 0x40
 800bed6:	4613      	mov	r3, r2
 800bed8:	eb42 0303 	adc.w	r3, r2, r3
 800bedc:	647b      	str	r3, [r7, #68]	; 0x44
 800bede:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800bee2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800bee6:	f7f4 fecf 	bl	8000c88 <__aeabi_uldivmod>
 800beea:	4602      	mov	r2, r0
 800beec:	460b      	mov	r3, r1
 800beee:	4611      	mov	r1, r2
 800bef0:	4b3b      	ldr	r3, [pc, #236]	; (800bfe0 <UART_SetConfig+0x2d4>)
 800bef2:	fba3 2301 	umull	r2, r3, r3, r1
 800bef6:	095b      	lsrs	r3, r3, #5
 800bef8:	2264      	movs	r2, #100	; 0x64
 800befa:	fb02 f303 	mul.w	r3, r2, r3
 800befe:	1acb      	subs	r3, r1, r3
 800bf00:	00db      	lsls	r3, r3, #3
 800bf02:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800bf06:	4b36      	ldr	r3, [pc, #216]	; (800bfe0 <UART_SetConfig+0x2d4>)
 800bf08:	fba3 2302 	umull	r2, r3, r3, r2
 800bf0c:	095b      	lsrs	r3, r3, #5
 800bf0e:	005b      	lsls	r3, r3, #1
 800bf10:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800bf14:	441c      	add	r4, r3
 800bf16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bf1a:	2200      	movs	r2, #0
 800bf1c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800bf20:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800bf24:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800bf28:	4642      	mov	r2, r8
 800bf2a:	464b      	mov	r3, r9
 800bf2c:	1891      	adds	r1, r2, r2
 800bf2e:	63b9      	str	r1, [r7, #56]	; 0x38
 800bf30:	415b      	adcs	r3, r3
 800bf32:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bf34:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800bf38:	4641      	mov	r1, r8
 800bf3a:	1851      	adds	r1, r2, r1
 800bf3c:	6339      	str	r1, [r7, #48]	; 0x30
 800bf3e:	4649      	mov	r1, r9
 800bf40:	414b      	adcs	r3, r1
 800bf42:	637b      	str	r3, [r7, #52]	; 0x34
 800bf44:	f04f 0200 	mov.w	r2, #0
 800bf48:	f04f 0300 	mov.w	r3, #0
 800bf4c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800bf50:	4659      	mov	r1, fp
 800bf52:	00cb      	lsls	r3, r1, #3
 800bf54:	4651      	mov	r1, sl
 800bf56:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800bf5a:	4651      	mov	r1, sl
 800bf5c:	00ca      	lsls	r2, r1, #3
 800bf5e:	4610      	mov	r0, r2
 800bf60:	4619      	mov	r1, r3
 800bf62:	4603      	mov	r3, r0
 800bf64:	4642      	mov	r2, r8
 800bf66:	189b      	adds	r3, r3, r2
 800bf68:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800bf6c:	464b      	mov	r3, r9
 800bf6e:	460a      	mov	r2, r1
 800bf70:	eb42 0303 	adc.w	r3, r2, r3
 800bf74:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800bf78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bf7c:	685b      	ldr	r3, [r3, #4]
 800bf7e:	2200      	movs	r2, #0
 800bf80:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800bf84:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800bf88:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800bf8c:	460b      	mov	r3, r1
 800bf8e:	18db      	adds	r3, r3, r3
 800bf90:	62bb      	str	r3, [r7, #40]	; 0x28
 800bf92:	4613      	mov	r3, r2
 800bf94:	eb42 0303 	adc.w	r3, r2, r3
 800bf98:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bf9a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800bf9e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800bfa2:	f7f4 fe71 	bl	8000c88 <__aeabi_uldivmod>
 800bfa6:	4602      	mov	r2, r0
 800bfa8:	460b      	mov	r3, r1
 800bfaa:	4b0d      	ldr	r3, [pc, #52]	; (800bfe0 <UART_SetConfig+0x2d4>)
 800bfac:	fba3 1302 	umull	r1, r3, r3, r2
 800bfb0:	095b      	lsrs	r3, r3, #5
 800bfb2:	2164      	movs	r1, #100	; 0x64
 800bfb4:	fb01 f303 	mul.w	r3, r1, r3
 800bfb8:	1ad3      	subs	r3, r2, r3
 800bfba:	00db      	lsls	r3, r3, #3
 800bfbc:	3332      	adds	r3, #50	; 0x32
 800bfbe:	4a08      	ldr	r2, [pc, #32]	; (800bfe0 <UART_SetConfig+0x2d4>)
 800bfc0:	fba2 2303 	umull	r2, r3, r2, r3
 800bfc4:	095b      	lsrs	r3, r3, #5
 800bfc6:	f003 0207 	and.w	r2, r3, #7
 800bfca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	4422      	add	r2, r4
 800bfd2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800bfd4:	e105      	b.n	800c1e2 <UART_SetConfig+0x4d6>
 800bfd6:	bf00      	nop
 800bfd8:	40011000 	.word	0x40011000
 800bfdc:	40011400 	.word	0x40011400
 800bfe0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800bfe4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bfe8:	2200      	movs	r2, #0
 800bfea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800bfee:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800bff2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800bff6:	4642      	mov	r2, r8
 800bff8:	464b      	mov	r3, r9
 800bffa:	1891      	adds	r1, r2, r2
 800bffc:	6239      	str	r1, [r7, #32]
 800bffe:	415b      	adcs	r3, r3
 800c000:	627b      	str	r3, [r7, #36]	; 0x24
 800c002:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800c006:	4641      	mov	r1, r8
 800c008:	1854      	adds	r4, r2, r1
 800c00a:	4649      	mov	r1, r9
 800c00c:	eb43 0501 	adc.w	r5, r3, r1
 800c010:	f04f 0200 	mov.w	r2, #0
 800c014:	f04f 0300 	mov.w	r3, #0
 800c018:	00eb      	lsls	r3, r5, #3
 800c01a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c01e:	00e2      	lsls	r2, r4, #3
 800c020:	4614      	mov	r4, r2
 800c022:	461d      	mov	r5, r3
 800c024:	4643      	mov	r3, r8
 800c026:	18e3      	adds	r3, r4, r3
 800c028:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c02c:	464b      	mov	r3, r9
 800c02e:	eb45 0303 	adc.w	r3, r5, r3
 800c032:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c036:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c03a:	685b      	ldr	r3, [r3, #4]
 800c03c:	2200      	movs	r2, #0
 800c03e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c042:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800c046:	f04f 0200 	mov.w	r2, #0
 800c04a:	f04f 0300 	mov.w	r3, #0
 800c04e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800c052:	4629      	mov	r1, r5
 800c054:	008b      	lsls	r3, r1, #2
 800c056:	4621      	mov	r1, r4
 800c058:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c05c:	4621      	mov	r1, r4
 800c05e:	008a      	lsls	r2, r1, #2
 800c060:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800c064:	f7f4 fe10 	bl	8000c88 <__aeabi_uldivmod>
 800c068:	4602      	mov	r2, r0
 800c06a:	460b      	mov	r3, r1
 800c06c:	4b60      	ldr	r3, [pc, #384]	; (800c1f0 <UART_SetConfig+0x4e4>)
 800c06e:	fba3 2302 	umull	r2, r3, r3, r2
 800c072:	095b      	lsrs	r3, r3, #5
 800c074:	011c      	lsls	r4, r3, #4
 800c076:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c07a:	2200      	movs	r2, #0
 800c07c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800c080:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800c084:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800c088:	4642      	mov	r2, r8
 800c08a:	464b      	mov	r3, r9
 800c08c:	1891      	adds	r1, r2, r2
 800c08e:	61b9      	str	r1, [r7, #24]
 800c090:	415b      	adcs	r3, r3
 800c092:	61fb      	str	r3, [r7, #28]
 800c094:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c098:	4641      	mov	r1, r8
 800c09a:	1851      	adds	r1, r2, r1
 800c09c:	6139      	str	r1, [r7, #16]
 800c09e:	4649      	mov	r1, r9
 800c0a0:	414b      	adcs	r3, r1
 800c0a2:	617b      	str	r3, [r7, #20]
 800c0a4:	f04f 0200 	mov.w	r2, #0
 800c0a8:	f04f 0300 	mov.w	r3, #0
 800c0ac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800c0b0:	4659      	mov	r1, fp
 800c0b2:	00cb      	lsls	r3, r1, #3
 800c0b4:	4651      	mov	r1, sl
 800c0b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c0ba:	4651      	mov	r1, sl
 800c0bc:	00ca      	lsls	r2, r1, #3
 800c0be:	4610      	mov	r0, r2
 800c0c0:	4619      	mov	r1, r3
 800c0c2:	4603      	mov	r3, r0
 800c0c4:	4642      	mov	r2, r8
 800c0c6:	189b      	adds	r3, r3, r2
 800c0c8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c0cc:	464b      	mov	r3, r9
 800c0ce:	460a      	mov	r2, r1
 800c0d0:	eb42 0303 	adc.w	r3, r2, r3
 800c0d4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c0d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c0dc:	685b      	ldr	r3, [r3, #4]
 800c0de:	2200      	movs	r2, #0
 800c0e0:	67bb      	str	r3, [r7, #120]	; 0x78
 800c0e2:	67fa      	str	r2, [r7, #124]	; 0x7c
 800c0e4:	f04f 0200 	mov.w	r2, #0
 800c0e8:	f04f 0300 	mov.w	r3, #0
 800c0ec:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800c0f0:	4649      	mov	r1, r9
 800c0f2:	008b      	lsls	r3, r1, #2
 800c0f4:	4641      	mov	r1, r8
 800c0f6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c0fa:	4641      	mov	r1, r8
 800c0fc:	008a      	lsls	r2, r1, #2
 800c0fe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800c102:	f7f4 fdc1 	bl	8000c88 <__aeabi_uldivmod>
 800c106:	4602      	mov	r2, r0
 800c108:	460b      	mov	r3, r1
 800c10a:	4b39      	ldr	r3, [pc, #228]	; (800c1f0 <UART_SetConfig+0x4e4>)
 800c10c:	fba3 1302 	umull	r1, r3, r3, r2
 800c110:	095b      	lsrs	r3, r3, #5
 800c112:	2164      	movs	r1, #100	; 0x64
 800c114:	fb01 f303 	mul.w	r3, r1, r3
 800c118:	1ad3      	subs	r3, r2, r3
 800c11a:	011b      	lsls	r3, r3, #4
 800c11c:	3332      	adds	r3, #50	; 0x32
 800c11e:	4a34      	ldr	r2, [pc, #208]	; (800c1f0 <UART_SetConfig+0x4e4>)
 800c120:	fba2 2303 	umull	r2, r3, r2, r3
 800c124:	095b      	lsrs	r3, r3, #5
 800c126:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c12a:	441c      	add	r4, r3
 800c12c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c130:	2200      	movs	r2, #0
 800c132:	673b      	str	r3, [r7, #112]	; 0x70
 800c134:	677a      	str	r2, [r7, #116]	; 0x74
 800c136:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800c13a:	4642      	mov	r2, r8
 800c13c:	464b      	mov	r3, r9
 800c13e:	1891      	adds	r1, r2, r2
 800c140:	60b9      	str	r1, [r7, #8]
 800c142:	415b      	adcs	r3, r3
 800c144:	60fb      	str	r3, [r7, #12]
 800c146:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c14a:	4641      	mov	r1, r8
 800c14c:	1851      	adds	r1, r2, r1
 800c14e:	6039      	str	r1, [r7, #0]
 800c150:	4649      	mov	r1, r9
 800c152:	414b      	adcs	r3, r1
 800c154:	607b      	str	r3, [r7, #4]
 800c156:	f04f 0200 	mov.w	r2, #0
 800c15a:	f04f 0300 	mov.w	r3, #0
 800c15e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800c162:	4659      	mov	r1, fp
 800c164:	00cb      	lsls	r3, r1, #3
 800c166:	4651      	mov	r1, sl
 800c168:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c16c:	4651      	mov	r1, sl
 800c16e:	00ca      	lsls	r2, r1, #3
 800c170:	4610      	mov	r0, r2
 800c172:	4619      	mov	r1, r3
 800c174:	4603      	mov	r3, r0
 800c176:	4642      	mov	r2, r8
 800c178:	189b      	adds	r3, r3, r2
 800c17a:	66bb      	str	r3, [r7, #104]	; 0x68
 800c17c:	464b      	mov	r3, r9
 800c17e:	460a      	mov	r2, r1
 800c180:	eb42 0303 	adc.w	r3, r2, r3
 800c184:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c186:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c18a:	685b      	ldr	r3, [r3, #4]
 800c18c:	2200      	movs	r2, #0
 800c18e:	663b      	str	r3, [r7, #96]	; 0x60
 800c190:	667a      	str	r2, [r7, #100]	; 0x64
 800c192:	f04f 0200 	mov.w	r2, #0
 800c196:	f04f 0300 	mov.w	r3, #0
 800c19a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800c19e:	4649      	mov	r1, r9
 800c1a0:	008b      	lsls	r3, r1, #2
 800c1a2:	4641      	mov	r1, r8
 800c1a4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c1a8:	4641      	mov	r1, r8
 800c1aa:	008a      	lsls	r2, r1, #2
 800c1ac:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800c1b0:	f7f4 fd6a 	bl	8000c88 <__aeabi_uldivmod>
 800c1b4:	4602      	mov	r2, r0
 800c1b6:	460b      	mov	r3, r1
 800c1b8:	4b0d      	ldr	r3, [pc, #52]	; (800c1f0 <UART_SetConfig+0x4e4>)
 800c1ba:	fba3 1302 	umull	r1, r3, r3, r2
 800c1be:	095b      	lsrs	r3, r3, #5
 800c1c0:	2164      	movs	r1, #100	; 0x64
 800c1c2:	fb01 f303 	mul.w	r3, r1, r3
 800c1c6:	1ad3      	subs	r3, r2, r3
 800c1c8:	011b      	lsls	r3, r3, #4
 800c1ca:	3332      	adds	r3, #50	; 0x32
 800c1cc:	4a08      	ldr	r2, [pc, #32]	; (800c1f0 <UART_SetConfig+0x4e4>)
 800c1ce:	fba2 2303 	umull	r2, r3, r2, r3
 800c1d2:	095b      	lsrs	r3, r3, #5
 800c1d4:	f003 020f 	and.w	r2, r3, #15
 800c1d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	4422      	add	r2, r4
 800c1e0:	609a      	str	r2, [r3, #8]
}
 800c1e2:	bf00      	nop
 800c1e4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800c1e8:	46bd      	mov	sp, r7
 800c1ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c1ee:	bf00      	nop
 800c1f0:	51eb851f 	.word	0x51eb851f

0800c1f4 <FusionDegreesToRadians>:
/**
 * @brief Converts degrees to radians.
 * @param degrees Degrees.
 * @return Radians.
 */
static inline float FusionDegreesToRadians(const float degrees) {
 800c1f4:	b480      	push	{r7}
 800c1f6:	b083      	sub	sp, #12
 800c1f8:	af00      	add	r7, sp, #0
 800c1fa:	ed87 0a01 	vstr	s0, [r7, #4]
    return degrees * ((float) M_PI / 180.0f);
 800c1fe:	edd7 7a01 	vldr	s15, [r7, #4]
 800c202:	ed9f 7a05 	vldr	s14, [pc, #20]	; 800c218 <FusionDegreesToRadians+0x24>
 800c206:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800c20a:	eeb0 0a67 	vmov.f32	s0, s15
 800c20e:	370c      	adds	r7, #12
 800c210:	46bd      	mov	sp, r7
 800c212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c216:	4770      	bx	lr
 800c218:	3c8efa35 	.word	0x3c8efa35

0800c21c <FusionFastInverseSqrt>:
 * @brief Calculates the reciprocal of the square root.
 * See https://pizer.wordpress.com/2008/10/12/fast-inverse-square-root/
 * @param x Operand.
 * @return Reciprocal of the square root of x.
 */
static inline float FusionFastInverseSqrt(const float x) {
 800c21c:	b480      	push	{r7}
 800c21e:	b085      	sub	sp, #20
 800c220:	af00      	add	r7, sp, #0
 800c222:	ed87 0a01 	vstr	s0, [r7, #4]
    typedef union {
        float f;
        int32_t i;
    } Union32;

    Union32 union32 = {.f = x};
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	60fb      	str	r3, [r7, #12]
    union32.i = 0x5F1F1412 - (union32.i >> 1);
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	105a      	asrs	r2, r3, #1
 800c22e:	4b10      	ldr	r3, [pc, #64]	; (800c270 <FusionFastInverseSqrt+0x54>)
 800c230:	1a9b      	subs	r3, r3, r2
 800c232:	60fb      	str	r3, [r7, #12]
    return union32.f * (1.69000231f - 0.714158168f * x * union32.f * union32.f);
 800c234:	ed97 7a03 	vldr	s14, [r7, #12]
 800c238:	edd7 7a01 	vldr	s15, [r7, #4]
 800c23c:	eddf 6a0d 	vldr	s13, [pc, #52]	; 800c274 <FusionFastInverseSqrt+0x58>
 800c240:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800c244:	edd7 7a03 	vldr	s15, [r7, #12]
 800c248:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800c24c:	edd7 7a03 	vldr	s15, [r7, #12]
 800c250:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c254:	eddf 6a08 	vldr	s13, [pc, #32]	; 800c278 <FusionFastInverseSqrt+0x5c>
 800c258:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800c25c:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 800c260:	eeb0 0a67 	vmov.f32	s0, s15
 800c264:	3714      	adds	r7, #20
 800c266:	46bd      	mov	sp, r7
 800c268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c26c:	4770      	bx	lr
 800c26e:	bf00      	nop
 800c270:	5f1f1412 	.word	0x5f1f1412
 800c274:	3f36d312 	.word	0x3f36d312
 800c278:	3fd851ff 	.word	0x3fd851ff

0800c27c <FusionVectorIsZero>:
/**
 * @brief Returns true if the vector is zero.
 * @param vector Vector.
 * @return True if the vector is zero.
 */
static inline bool FusionVectorIsZero(const FusionVector vector) {
 800c27c:	b480      	push	{r7}
 800c27e:	b085      	sub	sp, #20
 800c280:	af00      	add	r7, sp, #0
 800c282:	eef0 6a40 	vmov.f32	s13, s0
 800c286:	eeb0 7a60 	vmov.f32	s14, s1
 800c28a:	eef0 7a41 	vmov.f32	s15, s2
 800c28e:	edc7 6a01 	vstr	s13, [r7, #4]
 800c292:	ed87 7a02 	vstr	s14, [r7, #8]
 800c296:	edc7 7a03 	vstr	s15, [r7, #12]
    return (vector.axis.x == 0.0f) && (vector.axis.y == 0.0f) && (vector.axis.z == 0.0f);
 800c29a:	edd7 7a01 	vldr	s15, [r7, #4]
 800c29e:	eef5 7a40 	vcmp.f32	s15, #0.0
 800c2a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c2a6:	d10f      	bne.n	800c2c8 <FusionVectorIsZero+0x4c>
 800c2a8:	edd7 7a02 	vldr	s15, [r7, #8]
 800c2ac:	eef5 7a40 	vcmp.f32	s15, #0.0
 800c2b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c2b4:	d108      	bne.n	800c2c8 <FusionVectorIsZero+0x4c>
 800c2b6:	edd7 7a03 	vldr	s15, [r7, #12]
 800c2ba:	eef5 7a40 	vcmp.f32	s15, #0.0
 800c2be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c2c2:	d101      	bne.n	800c2c8 <FusionVectorIsZero+0x4c>
 800c2c4:	2301      	movs	r3, #1
 800c2c6:	e000      	b.n	800c2ca <FusionVectorIsZero+0x4e>
 800c2c8:	2300      	movs	r3, #0
 800c2ca:	f003 0301 	and.w	r3, r3, #1
 800c2ce:	b2db      	uxtb	r3, r3
}
 800c2d0:	4618      	mov	r0, r3
 800c2d2:	3714      	adds	r7, #20
 800c2d4:	46bd      	mov	sp, r7
 800c2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2da:	4770      	bx	lr

0800c2dc <FusionVectorAdd>:
 * @brief Returns the sum of two vectors.
 * @param vectorA Vector A.
 * @param vectorB Vector B.
 * @return Sum of two vectors.
 */
static inline FusionVector FusionVectorAdd(const FusionVector vectorA, const FusionVector vectorB) {
 800c2dc:	b480      	push	{r7}
 800c2de:	b091      	sub	sp, #68	; 0x44
 800c2e0:	af00      	add	r7, sp, #0
 800c2e2:	eeb0 5a40 	vmov.f32	s10, s0
 800c2e6:	eef0 5a60 	vmov.f32	s11, s1
 800c2ea:	eeb0 6a41 	vmov.f32	s12, s2
 800c2ee:	eef0 6a61 	vmov.f32	s13, s3
 800c2f2:	eeb0 7a42 	vmov.f32	s14, s4
 800c2f6:	eef0 7a62 	vmov.f32	s15, s5
 800c2fa:	ed87 5a07 	vstr	s10, [r7, #28]
 800c2fe:	edc7 5a08 	vstr	s11, [r7, #32]
 800c302:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 800c306:	edc7 6a04 	vstr	s13, [r7, #16]
 800c30a:	ed87 7a05 	vstr	s14, [r7, #20]
 800c30e:	edc7 7a06 	vstr	s15, [r7, #24]
    const FusionVector result = {.axis = {
            .x = vectorA.axis.x + vectorB.axis.x,
 800c312:	ed97 7a07 	vldr	s14, [r7, #28]
 800c316:	edd7 7a04 	vldr	s15, [r7, #16]
 800c31a:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800c31e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = vectorA.axis.y + vectorB.axis.y,
 800c322:	ed97 7a08 	vldr	s14, [r7, #32]
 800c326:	edd7 7a05 	vldr	s15, [r7, #20]
 800c32a:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800c32e:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = vectorA.axis.z + vectorB.axis.z,
 800c332:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800c336:	edd7 7a06 	vldr	s15, [r7, #24]
 800c33a:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800c33e:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    }};
    return result;
 800c342:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800c346:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800c34a:	ca07      	ldmia	r2, {r0, r1, r2}
 800c34c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800c350:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c352:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c354:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c356:	ee06 1a90 	vmov	s13, r1
 800c35a:	ee07 2a10 	vmov	s14, r2
 800c35e:	ee07 3a90 	vmov	s15, r3
}
 800c362:	eeb0 0a66 	vmov.f32	s0, s13
 800c366:	eef0 0a47 	vmov.f32	s1, s14
 800c36a:	eeb0 1a67 	vmov.f32	s2, s15
 800c36e:	3744      	adds	r7, #68	; 0x44
 800c370:	46bd      	mov	sp, r7
 800c372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c376:	4770      	bx	lr

0800c378 <FusionVectorSum>:
/**
 * @brief Returns the sum of the elements.
 * @param vector Vector.
 * @return Sum of the elements.
 */
static inline float FusionVectorSum(const FusionVector vector) {
 800c378:	b480      	push	{r7}
 800c37a:	b085      	sub	sp, #20
 800c37c:	af00      	add	r7, sp, #0
 800c37e:	eef0 6a40 	vmov.f32	s13, s0
 800c382:	eeb0 7a60 	vmov.f32	s14, s1
 800c386:	eef0 7a41 	vmov.f32	s15, s2
 800c38a:	edc7 6a01 	vstr	s13, [r7, #4]
 800c38e:	ed87 7a02 	vstr	s14, [r7, #8]
 800c392:	edc7 7a03 	vstr	s15, [r7, #12]
    return vector.axis.x + vector.axis.y + vector.axis.z;
 800c396:	ed97 7a01 	vldr	s14, [r7, #4]
 800c39a:	edd7 7a02 	vldr	s15, [r7, #8]
 800c39e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c3a2:	edd7 7a03 	vldr	s15, [r7, #12]
 800c3a6:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 800c3aa:	eeb0 0a67 	vmov.f32	s0, s15
 800c3ae:	3714      	adds	r7, #20
 800c3b0:	46bd      	mov	sp, r7
 800c3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3b6:	4770      	bx	lr

0800c3b8 <FusionVectorMultiplyScalar>:
 * @brief Returns the multiplication of a vector by a scalar.
 * @param vector Vector.
 * @param scalar Scalar.
 * @return Multiplication of a vector by a scalar.
 */
static inline FusionVector FusionVectorMultiplyScalar(const FusionVector vector, const float scalar) {
 800c3b8:	b480      	push	{r7}
 800c3ba:	b08f      	sub	sp, #60	; 0x3c
 800c3bc:	af00      	add	r7, sp, #0
 800c3be:	eef0 6a40 	vmov.f32	s13, s0
 800c3c2:	eeb0 7a60 	vmov.f32	s14, s1
 800c3c6:	eef0 7a41 	vmov.f32	s15, s2
 800c3ca:	edc7 1a04 	vstr	s3, [r7, #16]
 800c3ce:	edc7 6a05 	vstr	s13, [r7, #20]
 800c3d2:	ed87 7a06 	vstr	s14, [r7, #24]
 800c3d6:	edc7 7a07 	vstr	s15, [r7, #28]
    const FusionVector result = {.axis = {
            .x = vector.axis.x * scalar,
 800c3da:	ed97 7a05 	vldr	s14, [r7, #20]
 800c3de:	edd7 7a04 	vldr	s15, [r7, #16]
 800c3e2:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800c3e6:	edc7 7a08 	vstr	s15, [r7, #32]
            .y = vector.axis.y * scalar,
 800c3ea:	ed97 7a06 	vldr	s14, [r7, #24]
 800c3ee:	edd7 7a04 	vldr	s15, [r7, #16]
 800c3f2:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800c3f6:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            .z = vector.axis.z * scalar,
 800c3fa:	ed97 7a07 	vldr	s14, [r7, #28]
 800c3fe:	edd7 7a04 	vldr	s15, [r7, #16]
 800c402:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800c406:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    }};
    return result;
 800c40a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800c40e:	f107 0220 	add.w	r2, r7, #32
 800c412:	ca07      	ldmia	r2, {r0, r1, r2}
 800c414:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800c418:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c41a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c41c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c41e:	ee06 1a90 	vmov	s13, r1
 800c422:	ee07 2a10 	vmov	s14, r2
 800c426:	ee07 3a90 	vmov	s15, r3
}
 800c42a:	eeb0 0a66 	vmov.f32	s0, s13
 800c42e:	eef0 0a47 	vmov.f32	s1, s14
 800c432:	eeb0 1a67 	vmov.f32	s2, s15
 800c436:	373c      	adds	r7, #60	; 0x3c
 800c438:	46bd      	mov	sp, r7
 800c43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c43e:	4770      	bx	lr

0800c440 <FusionVectorHadamardProduct>:
 * @brief Calculates the Hadamard product (element-wise multiplication).
 * @param vectorA Vector A.
 * @param vectorB Vector B.
 * @return Hadamard product.
 */
static inline FusionVector FusionVectorHadamardProduct(const FusionVector vectorA, const FusionVector vectorB) {
 800c440:	b480      	push	{r7}
 800c442:	b091      	sub	sp, #68	; 0x44
 800c444:	af00      	add	r7, sp, #0
 800c446:	eeb0 5a40 	vmov.f32	s10, s0
 800c44a:	eef0 5a60 	vmov.f32	s11, s1
 800c44e:	eeb0 6a41 	vmov.f32	s12, s2
 800c452:	eef0 6a61 	vmov.f32	s13, s3
 800c456:	eeb0 7a42 	vmov.f32	s14, s4
 800c45a:	eef0 7a62 	vmov.f32	s15, s5
 800c45e:	ed87 5a07 	vstr	s10, [r7, #28]
 800c462:	edc7 5a08 	vstr	s11, [r7, #32]
 800c466:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 800c46a:	edc7 6a04 	vstr	s13, [r7, #16]
 800c46e:	ed87 7a05 	vstr	s14, [r7, #20]
 800c472:	edc7 7a06 	vstr	s15, [r7, #24]
    const FusionVector result = {.axis = {
            .x = vectorA.axis.x * vectorB.axis.x,
 800c476:	ed97 7a07 	vldr	s14, [r7, #28]
 800c47a:	edd7 7a04 	vldr	s15, [r7, #16]
 800c47e:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800c482:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = vectorA.axis.y * vectorB.axis.y,
 800c486:	ed97 7a08 	vldr	s14, [r7, #32]
 800c48a:	edd7 7a05 	vldr	s15, [r7, #20]
 800c48e:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800c492:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = vectorA.axis.z * vectorB.axis.z,
 800c496:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800c49a:	edd7 7a06 	vldr	s15, [r7, #24]
 800c49e:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800c4a2:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    }};
    return result;
 800c4a6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800c4aa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800c4ae:	ca07      	ldmia	r2, {r0, r1, r2}
 800c4b0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800c4b4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c4b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c4b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c4ba:	ee06 1a90 	vmov	s13, r1
 800c4be:	ee07 2a10 	vmov	s14, r2
 800c4c2:	ee07 3a90 	vmov	s15, r3
}
 800c4c6:	eeb0 0a66 	vmov.f32	s0, s13
 800c4ca:	eef0 0a47 	vmov.f32	s1, s14
 800c4ce:	eeb0 1a67 	vmov.f32	s2, s15
 800c4d2:	3744      	adds	r7, #68	; 0x44
 800c4d4:	46bd      	mov	sp, r7
 800c4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4da:	4770      	bx	lr

0800c4dc <FusionVectorCrossProduct>:
 * @brief Returns the cross product.
 * @param vectorA Vector A.
 * @param vectorB Vector B.
 * @return Cross product.
 */
static inline FusionVector FusionVectorCrossProduct(const FusionVector vectorA, const FusionVector vectorB) {
 800c4dc:	b480      	push	{r7}
 800c4de:	b091      	sub	sp, #68	; 0x44
 800c4e0:	af00      	add	r7, sp, #0
 800c4e2:	eeb0 5a40 	vmov.f32	s10, s0
 800c4e6:	eef0 5a60 	vmov.f32	s11, s1
 800c4ea:	eeb0 6a41 	vmov.f32	s12, s2
 800c4ee:	eef0 6a61 	vmov.f32	s13, s3
 800c4f2:	eeb0 7a42 	vmov.f32	s14, s4
 800c4f6:	eef0 7a62 	vmov.f32	s15, s5
 800c4fa:	ed87 5a07 	vstr	s10, [r7, #28]
 800c4fe:	edc7 5a08 	vstr	s11, [r7, #32]
 800c502:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 800c506:	edc7 6a04 	vstr	s13, [r7, #16]
 800c50a:	ed87 7a05 	vstr	s14, [r7, #20]
 800c50e:	edc7 7a06 	vstr	s15, [r7, #24]
#define A vectorA.axis
#define B vectorB.axis
    const FusionVector result = {.axis = {
            .x = A.y * B.z - A.z * B.y,
 800c512:	ed97 7a08 	vldr	s14, [r7, #32]
 800c516:	edd7 7a06 	vldr	s15, [r7, #24]
 800c51a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c51e:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800c522:	edd7 7a05 	vldr	s15, [r7, #20]
 800c526:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c52a:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800c52e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = A.z * B.x - A.x * B.z,
 800c532:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800c536:	edd7 7a04 	vldr	s15, [r7, #16]
 800c53a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c53e:	edd7 6a07 	vldr	s13, [r7, #28]
 800c542:	edd7 7a06 	vldr	s15, [r7, #24]
 800c546:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c54a:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800c54e:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = A.x * B.y - A.y * B.x,
 800c552:	ed97 7a07 	vldr	s14, [r7, #28]
 800c556:	edd7 7a05 	vldr	s15, [r7, #20]
 800c55a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c55e:	edd7 6a08 	vldr	s13, [r7, #32]
 800c562:	edd7 7a04 	vldr	s15, [r7, #16]
 800c566:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c56a:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800c56e:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    }};
    return result;
 800c572:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800c576:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800c57a:	ca07      	ldmia	r2, {r0, r1, r2}
 800c57c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800c580:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c582:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c584:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c586:	ee06 1a90 	vmov	s13, r1
 800c58a:	ee07 2a10 	vmov	s14, r2
 800c58e:	ee07 3a90 	vmov	s15, r3
#undef A
#undef B
}
 800c592:	eeb0 0a66 	vmov.f32	s0, s13
 800c596:	eef0 0a47 	vmov.f32	s1, s14
 800c59a:	eeb0 1a67 	vmov.f32	s2, s15
 800c59e:	3744      	adds	r7, #68	; 0x44
 800c5a0:	46bd      	mov	sp, r7
 800c5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5a6:	4770      	bx	lr

0800c5a8 <FusionVectorDotProduct>:
 * @brief Returns the dot product.
 * @param vectorA Vector A.
 * @param vectorB Vector B.
 * @return Dot product.
 */
static inline float FusionVectorDotProduct(const FusionVector vectorA, const FusionVector vectorB) {
 800c5a8:	b580      	push	{r7, lr}
 800c5aa:	b08a      	sub	sp, #40	; 0x28
 800c5ac:	af00      	add	r7, sp, #0
 800c5ae:	eeb0 5a40 	vmov.f32	s10, s0
 800c5b2:	eef0 5a60 	vmov.f32	s11, s1
 800c5b6:	eeb0 6a41 	vmov.f32	s12, s2
 800c5ba:	eef0 6a61 	vmov.f32	s13, s3
 800c5be:	eeb0 7a42 	vmov.f32	s14, s4
 800c5c2:	eef0 7a62 	vmov.f32	s15, s5
 800c5c6:	ed87 5a03 	vstr	s10, [r7, #12]
 800c5ca:	edc7 5a04 	vstr	s11, [r7, #16]
 800c5ce:	ed87 6a05 	vstr	s12, [r7, #20]
 800c5d2:	edc7 6a00 	vstr	s13, [r7]
 800c5d6:	ed87 7a01 	vstr	s14, [r7, #4]
 800c5da:	edc7 7a02 	vstr	s15, [r7, #8]
    return FusionVectorSum(FusionVectorHadamardProduct(vectorA, vectorB));
 800c5de:	ed97 5a00 	vldr	s10, [r7]
 800c5e2:	edd7 5a01 	vldr	s11, [r7, #4]
 800c5e6:	ed97 6a02 	vldr	s12, [r7, #8]
 800c5ea:	edd7 6a03 	vldr	s13, [r7, #12]
 800c5ee:	ed97 7a04 	vldr	s14, [r7, #16]
 800c5f2:	edd7 7a05 	vldr	s15, [r7, #20]
 800c5f6:	eef0 1a45 	vmov.f32	s3, s10
 800c5fa:	eeb0 2a65 	vmov.f32	s4, s11
 800c5fe:	eef0 2a46 	vmov.f32	s5, s12
 800c602:	eeb0 0a66 	vmov.f32	s0, s13
 800c606:	eef0 0a47 	vmov.f32	s1, s14
 800c60a:	eeb0 1a67 	vmov.f32	s2, s15
 800c60e:	f7ff ff17 	bl	800c440 <FusionVectorHadamardProduct>
 800c612:	eef0 6a40 	vmov.f32	s13, s0
 800c616:	eeb0 7a60 	vmov.f32	s14, s1
 800c61a:	eef0 7a41 	vmov.f32	s15, s2
 800c61e:	edc7 6a07 	vstr	s13, [r7, #28]
 800c622:	ed87 7a08 	vstr	s14, [r7, #32]
 800c626:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 800c62a:	edd7 6a07 	vldr	s13, [r7, #28]
 800c62e:	ed97 7a08 	vldr	s14, [r7, #32]
 800c632:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800c636:	eeb0 0a66 	vmov.f32	s0, s13
 800c63a:	eef0 0a47 	vmov.f32	s1, s14
 800c63e:	eeb0 1a67 	vmov.f32	s2, s15
 800c642:	f7ff fe99 	bl	800c378 <FusionVectorSum>
 800c646:	eef0 7a40 	vmov.f32	s15, s0
}
 800c64a:	eeb0 0a67 	vmov.f32	s0, s15
 800c64e:	3728      	adds	r7, #40	; 0x28
 800c650:	46bd      	mov	sp, r7
 800c652:	bd80      	pop	{r7, pc}

0800c654 <FusionVectorMagnitudeSquared>:
/**
 * @brief Returns the vector magnitude squared.
 * @param vector Vector.
 * @return Vector magnitude squared.
 */
static inline float FusionVectorMagnitudeSquared(const FusionVector vector) {
 800c654:	b580      	push	{r7, lr}
 800c656:	b088      	sub	sp, #32
 800c658:	af00      	add	r7, sp, #0
 800c65a:	eef0 6a40 	vmov.f32	s13, s0
 800c65e:	eeb0 7a60 	vmov.f32	s14, s1
 800c662:	eef0 7a41 	vmov.f32	s15, s2
 800c666:	edc7 6a01 	vstr	s13, [r7, #4]
 800c66a:	ed87 7a02 	vstr	s14, [r7, #8]
 800c66e:	edc7 7a03 	vstr	s15, [r7, #12]
    return FusionVectorSum(FusionVectorHadamardProduct(vector, vector));
 800c672:	ed97 5a01 	vldr	s10, [r7, #4]
 800c676:	edd7 5a02 	vldr	s11, [r7, #8]
 800c67a:	ed97 6a03 	vldr	s12, [r7, #12]
 800c67e:	edd7 6a01 	vldr	s13, [r7, #4]
 800c682:	ed97 7a02 	vldr	s14, [r7, #8]
 800c686:	edd7 7a03 	vldr	s15, [r7, #12]
 800c68a:	eef0 1a45 	vmov.f32	s3, s10
 800c68e:	eeb0 2a65 	vmov.f32	s4, s11
 800c692:	eef0 2a46 	vmov.f32	s5, s12
 800c696:	eeb0 0a66 	vmov.f32	s0, s13
 800c69a:	eef0 0a47 	vmov.f32	s1, s14
 800c69e:	eeb0 1a67 	vmov.f32	s2, s15
 800c6a2:	f7ff fecd 	bl	800c440 <FusionVectorHadamardProduct>
 800c6a6:	eef0 6a40 	vmov.f32	s13, s0
 800c6aa:	eeb0 7a60 	vmov.f32	s14, s1
 800c6ae:	eef0 7a41 	vmov.f32	s15, s2
 800c6b2:	edc7 6a05 	vstr	s13, [r7, #20]
 800c6b6:	ed87 7a06 	vstr	s14, [r7, #24]
 800c6ba:	edc7 7a07 	vstr	s15, [r7, #28]
 800c6be:	edd7 6a05 	vldr	s13, [r7, #20]
 800c6c2:	ed97 7a06 	vldr	s14, [r7, #24]
 800c6c6:	edd7 7a07 	vldr	s15, [r7, #28]
 800c6ca:	eeb0 0a66 	vmov.f32	s0, s13
 800c6ce:	eef0 0a47 	vmov.f32	s1, s14
 800c6d2:	eeb0 1a67 	vmov.f32	s2, s15
 800c6d6:	f7ff fe4f 	bl	800c378 <FusionVectorSum>
 800c6da:	eef0 7a40 	vmov.f32	s15, s0
}
 800c6de:	eeb0 0a67 	vmov.f32	s0, s15
 800c6e2:	3720      	adds	r7, #32
 800c6e4:	46bd      	mov	sp, r7
 800c6e6:	bd80      	pop	{r7, pc}

0800c6e8 <FusionVectorNormalise>:
/**
 * @brief Returns the normalised vector.
 * @param vector Vector.
 * @return Normalised vector.
 */
static inline FusionVector FusionVectorNormalise(const FusionVector vector) {
 800c6e8:	b580      	push	{r7, lr}
 800c6ea:	b08c      	sub	sp, #48	; 0x30
 800c6ec:	af00      	add	r7, sp, #0
 800c6ee:	eef0 6a40 	vmov.f32	s13, s0
 800c6f2:	eeb0 7a60 	vmov.f32	s14, s1
 800c6f6:	eef0 7a41 	vmov.f32	s15, s2
 800c6fa:	edc7 6a05 	vstr	s13, [r7, #20]
 800c6fe:	ed87 7a06 	vstr	s14, [r7, #24]
 800c702:	edc7 7a07 	vstr	s15, [r7, #28]
#ifdef FUSION_USE_NORMAL_SQRT
    const float magnitudeReciprocal = 1.0f / sqrtf(FusionVectorMagnitudeSquared(vector));
#else
    const float magnitudeReciprocal = FusionFastInverseSqrt(FusionVectorMagnitudeSquared(vector));
 800c706:	edd7 6a05 	vldr	s13, [r7, #20]
 800c70a:	ed97 7a06 	vldr	s14, [r7, #24]
 800c70e:	edd7 7a07 	vldr	s15, [r7, #28]
 800c712:	eeb0 0a66 	vmov.f32	s0, s13
 800c716:	eef0 0a47 	vmov.f32	s1, s14
 800c71a:	eeb0 1a67 	vmov.f32	s2, s15
 800c71e:	f7ff ff99 	bl	800c654 <FusionVectorMagnitudeSquared>
 800c722:	eef0 7a40 	vmov.f32	s15, s0
 800c726:	eeb0 0a67 	vmov.f32	s0, s15
 800c72a:	f7ff fd77 	bl	800c21c <FusionFastInverseSqrt>
 800c72e:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
#endif
    return FusionVectorMultiplyScalar(vector, magnitudeReciprocal);
 800c732:	edd7 6a05 	vldr	s13, [r7, #20]
 800c736:	ed97 7a06 	vldr	s14, [r7, #24]
 800c73a:	edd7 7a07 	vldr	s15, [r7, #28]
 800c73e:	edd7 1a0b 	vldr	s3, [r7, #44]	; 0x2c
 800c742:	eeb0 0a66 	vmov.f32	s0, s13
 800c746:	eef0 0a47 	vmov.f32	s1, s14
 800c74a:	eeb0 1a67 	vmov.f32	s2, s15
 800c74e:	f7ff fe33 	bl	800c3b8 <FusionVectorMultiplyScalar>
 800c752:	eef0 6a40 	vmov.f32	s13, s0
 800c756:	eeb0 7a60 	vmov.f32	s14, s1
 800c75a:	eef0 7a41 	vmov.f32	s15, s2
 800c75e:	edc7 6a08 	vstr	s13, [r7, #32]
 800c762:	ed87 7a09 	vstr	s14, [r7, #36]	; 0x24
 800c766:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 800c76a:	6a39      	ldr	r1, [r7, #32]
 800c76c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c76e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c770:	ee06 1a90 	vmov	s13, r1
 800c774:	ee07 2a10 	vmov	s14, r2
 800c778:	ee07 3a90 	vmov	s15, r3
}
 800c77c:	eeb0 0a66 	vmov.f32	s0, s13
 800c780:	eef0 0a47 	vmov.f32	s1, s14
 800c784:	eeb0 1a67 	vmov.f32	s2, s15
 800c788:	3730      	adds	r7, #48	; 0x30
 800c78a:	46bd      	mov	sp, r7
 800c78c:	bd80      	pop	{r7, pc}

0800c78e <FusionQuaternionAdd>:
 * @brief Returns the sum of two quaternions.
 * @param quaternionA Quaternion A.
 * @param quaternionB Quaternion B.
 * @return Sum of two quaternions.
 */
static inline FusionQuaternion FusionQuaternionAdd(const FusionQuaternion quaternionA, const FusionQuaternion quaternionB) {
 800c78e:	b490      	push	{r4, r7}
 800c790:	b094      	sub	sp, #80	; 0x50
 800c792:	af00      	add	r7, sp, #0
 800c794:	eeb0 4a40 	vmov.f32	s8, s0
 800c798:	eef0 4a60 	vmov.f32	s9, s1
 800c79c:	eeb0 5a41 	vmov.f32	s10, s2
 800c7a0:	eef0 5a61 	vmov.f32	s11, s3
 800c7a4:	eeb0 6a42 	vmov.f32	s12, s4
 800c7a8:	eef0 6a62 	vmov.f32	s13, s5
 800c7ac:	eeb0 7a43 	vmov.f32	s14, s6
 800c7b0:	eef0 7a63 	vmov.f32	s15, s7
 800c7b4:	ed87 4a08 	vstr	s8, [r7, #32]
 800c7b8:	edc7 4a09 	vstr	s9, [r7, #36]	; 0x24
 800c7bc:	ed87 5a0a 	vstr	s10, [r7, #40]	; 0x28
 800c7c0:	edc7 5a0b 	vstr	s11, [r7, #44]	; 0x2c
 800c7c4:	ed87 6a04 	vstr	s12, [r7, #16]
 800c7c8:	edc7 6a05 	vstr	s13, [r7, #20]
 800c7cc:	ed87 7a06 	vstr	s14, [r7, #24]
 800c7d0:	edc7 7a07 	vstr	s15, [r7, #28]
    const FusionQuaternion result = {.element = {
            .w = quaternionA.element.w + quaternionB.element.w,
 800c7d4:	ed97 7a08 	vldr	s14, [r7, #32]
 800c7d8:	edd7 7a04 	vldr	s15, [r7, #16]
 800c7dc:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 800c7e0:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
            .x = quaternionA.element.x + quaternionB.element.x,
 800c7e4:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800c7e8:	edd7 7a05 	vldr	s15, [r7, #20]
 800c7ec:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 800c7f0:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
            .y = quaternionA.element.y + quaternionB.element.y,
 800c7f4:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c7f8:	edd7 7a06 	vldr	s15, [r7, #24]
 800c7fc:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 800c800:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
            .z = quaternionA.element.z + quaternionB.element.z,
 800c804:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800c808:	edd7 7a07 	vldr	s15, [r7, #28]
 800c80c:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 800c810:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    }};
    return result;
 800c814:	f107 0440 	add.w	r4, r7, #64	; 0x40
 800c818:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c81c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c81e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800c822:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800c824:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c826:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c828:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c82a:	ee06 0a10 	vmov	s12, r0
 800c82e:	ee06 1a90 	vmov	s13, r1
 800c832:	ee07 2a10 	vmov	s14, r2
 800c836:	ee07 3a90 	vmov	s15, r3
}
 800c83a:	eeb0 0a46 	vmov.f32	s0, s12
 800c83e:	eef0 0a66 	vmov.f32	s1, s13
 800c842:	eeb0 1a47 	vmov.f32	s2, s14
 800c846:	eef0 1a67 	vmov.f32	s3, s15
 800c84a:	3750      	adds	r7, #80	; 0x50
 800c84c:	46bd      	mov	sp, r7
 800c84e:	bc90      	pop	{r4, r7}
 800c850:	4770      	bx	lr

0800c852 <FusionQuaternionMultiplyVector>:
 * multiplied by the vector.
 * @param quaternion Quaternion.
 * @param vector Vector.
 * @return Multiplication of a quaternion with a vector.
 */
static inline FusionQuaternion FusionQuaternionMultiplyVector(const FusionQuaternion quaternion, const FusionVector vector) {
 800c852:	b490      	push	{r4, r7}
 800c854:	b094      	sub	sp, #80	; 0x50
 800c856:	af00      	add	r7, sp, #0
 800c858:	eef0 4a40 	vmov.f32	s9, s0
 800c85c:	eeb0 5a60 	vmov.f32	s10, s1
 800c860:	eef0 5a41 	vmov.f32	s11, s2
 800c864:	eeb0 6a61 	vmov.f32	s12, s3
 800c868:	eef0 6a42 	vmov.f32	s13, s4
 800c86c:	eeb0 7a62 	vmov.f32	s14, s5
 800c870:	eef0 7a43 	vmov.f32	s15, s6
 800c874:	edc7 4a08 	vstr	s9, [r7, #32]
 800c878:	ed87 5a09 	vstr	s10, [r7, #36]	; 0x24
 800c87c:	edc7 5a0a 	vstr	s11, [r7, #40]	; 0x28
 800c880:	ed87 6a0b 	vstr	s12, [r7, #44]	; 0x2c
 800c884:	edc7 6a05 	vstr	s13, [r7, #20]
 800c888:	ed87 7a06 	vstr	s14, [r7, #24]
 800c88c:	edc7 7a07 	vstr	s15, [r7, #28]
#define Q quaternion.element
#define V vector.axis
    const FusionQuaternion result = {.element = {
            .w = -Q.x * V.x - Q.y * V.y - Q.z * V.z,
 800c890:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800c894:	eeb1 7a67 	vneg.f32	s14, s15
 800c898:	edd7 7a05 	vldr	s15, [r7, #20]
 800c89c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c8a0:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800c8a4:	edd7 7a06 	vldr	s15, [r7, #24]
 800c8a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c8ac:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c8b0:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800c8b4:	edd7 7a07 	vldr	s15, [r7, #28]
 800c8b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c8bc:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 800c8c0:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
            .x = Q.w * V.x + Q.y * V.z - Q.z * V.y,
 800c8c4:	ed97 7a08 	vldr	s14, [r7, #32]
 800c8c8:	edd7 7a05 	vldr	s15, [r7, #20]
 800c8cc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c8d0:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800c8d4:	edd7 7a07 	vldr	s15, [r7, #28]
 800c8d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c8dc:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c8e0:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800c8e4:	edd7 7a06 	vldr	s15, [r7, #24]
 800c8e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c8ec:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 800c8f0:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
            .y = Q.w * V.y - Q.x * V.z + Q.z * V.x,
 800c8f4:	ed97 7a08 	vldr	s14, [r7, #32]
 800c8f8:	edd7 7a06 	vldr	s15, [r7, #24]
 800c8fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c900:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800c904:	edd7 7a07 	vldr	s15, [r7, #28]
 800c908:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c90c:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c910:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800c914:	edd7 7a05 	vldr	s15, [r7, #20]
 800c918:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c91c:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 800c920:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
            .z = Q.w * V.z + Q.x * V.y - Q.y * V.x,
 800c924:	ed97 7a08 	vldr	s14, [r7, #32]
 800c928:	edd7 7a07 	vldr	s15, [r7, #28]
 800c92c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c930:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800c934:	edd7 7a06 	vldr	s15, [r7, #24]
 800c938:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c93c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c940:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800c944:	edd7 7a05 	vldr	s15, [r7, #20]
 800c948:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c94c:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 800c950:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    }};
    return result;
 800c954:	f107 0440 	add.w	r4, r7, #64	; 0x40
 800c958:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c95c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c95e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800c962:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800c964:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c966:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c968:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c96a:	ee06 0a10 	vmov	s12, r0
 800c96e:	ee06 1a90 	vmov	s13, r1
 800c972:	ee07 2a10 	vmov	s14, r2
 800c976:	ee07 3a90 	vmov	s15, r3
#undef Q
#undef V
}
 800c97a:	eeb0 0a46 	vmov.f32	s0, s12
 800c97e:	eef0 0a66 	vmov.f32	s1, s13
 800c982:	eeb0 1a47 	vmov.f32	s2, s14
 800c986:	eef0 1a67 	vmov.f32	s3, s15
 800c98a:	3750      	adds	r7, #80	; 0x50
 800c98c:	46bd      	mov	sp, r7
 800c98e:	bc90      	pop	{r4, r7}
 800c990:	4770      	bx	lr

0800c992 <FusionQuaternionNormalise>:
/**
 * @brief Returns the normalised quaternion.
 * @param quaternion Quaternion.
 * @return Normalised quaternion.
 */
static inline FusionQuaternion FusionQuaternionNormalise(const FusionQuaternion quaternion) {
 800c992:	b590      	push	{r4, r7, lr}
 800c994:	b093      	sub	sp, #76	; 0x4c
 800c996:	af00      	add	r7, sp, #0
 800c998:	eeb0 6a40 	vmov.f32	s12, s0
 800c99c:	eef0 6a60 	vmov.f32	s13, s1
 800c9a0:	eeb0 7a41 	vmov.f32	s14, s2
 800c9a4:	eef0 7a61 	vmov.f32	s15, s3
 800c9a8:	ed87 6a04 	vstr	s12, [r7, #16]
 800c9ac:	edc7 6a05 	vstr	s13, [r7, #20]
 800c9b0:	ed87 7a06 	vstr	s14, [r7, #24]
 800c9b4:	edc7 7a07 	vstr	s15, [r7, #28]
#define Q quaternion.element
#ifdef FUSION_USE_NORMAL_SQRT
    const float magnitudeReciprocal = 1.0f / sqrtf(Q.w * Q.w + Q.x * Q.x + Q.y * Q.y + Q.z * Q.z);
#else
    const float magnitudeReciprocal = FusionFastInverseSqrt(Q.w * Q.w + Q.x * Q.x + Q.y * Q.y + Q.z * Q.z);
 800c9b8:	ed97 7a04 	vldr	s14, [r7, #16]
 800c9bc:	edd7 7a04 	vldr	s15, [r7, #16]
 800c9c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c9c4:	edd7 6a05 	vldr	s13, [r7, #20]
 800c9c8:	edd7 7a05 	vldr	s15, [r7, #20]
 800c9cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c9d0:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c9d4:	edd7 6a06 	vldr	s13, [r7, #24]
 800c9d8:	edd7 7a06 	vldr	s15, [r7, #24]
 800c9dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c9e0:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c9e4:	edd7 6a07 	vldr	s13, [r7, #28]
 800c9e8:	edd7 7a07 	vldr	s15, [r7, #28]
 800c9ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c9f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c9f4:	eeb0 0a67 	vmov.f32	s0, s15
 800c9f8:	f7ff fc10 	bl	800c21c <FusionFastInverseSqrt>
 800c9fc:	ed87 0a11 	vstr	s0, [r7, #68]	; 0x44
#endif
    const FusionQuaternion result = {.element = {
            .w = Q.w * magnitudeReciprocal,
 800ca00:	ed97 7a04 	vldr	s14, [r7, #16]
 800ca04:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800ca08:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 800ca0c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            .x = Q.x * magnitudeReciprocal,
 800ca10:	ed97 7a05 	vldr	s14, [r7, #20]
 800ca14:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800ca18:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 800ca1c:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = Q.y * magnitudeReciprocal,
 800ca20:	ed97 7a06 	vldr	s14, [r7, #24]
 800ca24:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800ca28:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 800ca2c:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = Q.z * magnitudeReciprocal,
 800ca30:	ed97 7a07 	vldr	s14, [r7, #28]
 800ca34:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800ca38:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 800ca3c:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    }};
    return result;
 800ca40:	f107 0434 	add.w	r4, r7, #52	; 0x34
 800ca44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ca48:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ca4a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800ca4e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ca50:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ca52:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ca54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ca56:	ee06 0a10 	vmov	s12, r0
 800ca5a:	ee06 1a90 	vmov	s13, r1
 800ca5e:	ee07 2a10 	vmov	s14, r2
 800ca62:	ee07 3a90 	vmov	s15, r3
#undef Q
}
 800ca66:	eeb0 0a46 	vmov.f32	s0, s12
 800ca6a:	eef0 0a66 	vmov.f32	s1, s13
 800ca6e:	eeb0 1a47 	vmov.f32	s2, s14
 800ca72:	eef0 1a67 	vmov.f32	s3, s15
 800ca76:	374c      	adds	r7, #76	; 0x4c
 800ca78:	46bd      	mov	sp, r7
 800ca7a:	bd90      	pop	{r4, r7, pc}

0800ca7c <FusionAhrsInitialise>:

/**
 * @brief Initialises the AHRS algorithm structure.
 * @param ahrs AHRS algorithm structure.
 */
void FusionAhrsInitialise(FusionAhrs *const ahrs) {
 800ca7c:	b5b0      	push	{r4, r5, r7, lr}
 800ca7e:	b088      	sub	sp, #32
 800ca80:	af00      	add	r7, sp, #0
 800ca82:	6078      	str	r0, [r7, #4]
    const FusionAhrsSettings settings = {
 800ca84:	4b0b      	ldr	r3, [pc, #44]	; (800cab4 <FusionAhrsInitialise+0x38>)
 800ca86:	f107 0408 	add.w	r4, r7, #8
 800ca8a:	461d      	mov	r5, r3
 800ca8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ca8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ca90:	e895 0003 	ldmia.w	r5, {r0, r1}
 800ca94:	e884 0003 	stmia.w	r4, {r0, r1}
            .gyroscopeRange = 0.0f,
            .accelerationRejection = 90.0f,
            .magneticRejection = 90.0f,
            .recoveryTriggerPeriod = 0,
    };
    FusionAhrsSetSettings(ahrs, &settings);
 800ca98:	f107 0308 	add.w	r3, r7, #8
 800ca9c:	4619      	mov	r1, r3
 800ca9e:	6878      	ldr	r0, [r7, #4]
 800caa0:	f000 f86e 	bl	800cb80 <FusionAhrsSetSettings>
    FusionAhrsReset(ahrs);
 800caa4:	6878      	ldr	r0, [r7, #4]
 800caa6:	f000 f807 	bl	800cab8 <FusionAhrsReset>
}
 800caaa:	bf00      	nop
 800caac:	3720      	adds	r7, #32
 800caae:	46bd      	mov	sp, r7
 800cab0:	bdb0      	pop	{r4, r5, r7, pc}
 800cab2:	bf00      	nop
 800cab4:	08016040 	.word	0x08016040

0800cab8 <FusionAhrsReset>:
/**
 * @brief Resets the AHRS algorithm.  This is equivalent to reinitialising the
 * algorithm while maintaining the current settings.
 * @param ahrs AHRS algorithm structure.
 */
void FusionAhrsReset(FusionAhrs *const ahrs) {
 800cab8:	b480      	push	{r7}
 800caba:	b091      	sub	sp, #68	; 0x44
 800cabc:	af00      	add	r7, sp, #0
 800cabe:	6078      	str	r0, [r7, #4]
    ahrs->quaternion = FUSION_IDENTITY_QUATERNION;
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800cac6:	619a      	str	r2, [r3, #24]
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	f04f 0200 	mov.w	r2, #0
 800cace:	61da      	str	r2, [r3, #28]
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	f04f 0200 	mov.w	r2, #0
 800cad6:	621a      	str	r2, [r3, #32]
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	f04f 0200 	mov.w	r2, #0
 800cade:	625a      	str	r2, [r3, #36]	; 0x24
    ahrs->accelerometer = FUSION_VECTOR_ZERO;
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	f04f 0200 	mov.w	r2, #0
 800cae6:	629a      	str	r2, [r3, #40]	; 0x28
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	f04f 0200 	mov.w	r2, #0
 800caee:	62da      	str	r2, [r3, #44]	; 0x2c
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	f04f 0200 	mov.w	r2, #0
 800caf6:	631a      	str	r2, [r3, #48]	; 0x30
    ahrs->initialising = true;
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	2201      	movs	r2, #1
 800cafc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    ahrs->rampedGain = INITIAL_GAIN;
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	4a1e      	ldr	r2, [pc, #120]	; (800cb7c <FusionAhrsReset+0xc4>)
 800cb04:	639a      	str	r2, [r3, #56]	; 0x38
    ahrs->angularRateRecovery = false;
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	2200      	movs	r2, #0
 800cb0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    ahrs->halfAccelerometerFeedback = FUSION_VECTOR_ZERO;
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	f04f 0200 	mov.w	r2, #0
 800cb14:	645a      	str	r2, [r3, #68]	; 0x44
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	f04f 0200 	mov.w	r2, #0
 800cb1c:	649a      	str	r2, [r3, #72]	; 0x48
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	f04f 0200 	mov.w	r2, #0
 800cb24:	64da      	str	r2, [r3, #76]	; 0x4c
    ahrs->halfMagnetometerFeedback = FUSION_VECTOR_ZERO;
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	f04f 0200 	mov.w	r2, #0
 800cb2c:	651a      	str	r2, [r3, #80]	; 0x50
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	f04f 0200 	mov.w	r2, #0
 800cb34:	655a      	str	r2, [r3, #84]	; 0x54
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	f04f 0200 	mov.w	r2, #0
 800cb3c:	659a      	str	r2, [r3, #88]	; 0x58
    ahrs->accelerometerIgnored = false;
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	2200      	movs	r2, #0
 800cb42:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
    ahrs->accelerationRecoveryTrigger = 0;
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	2200      	movs	r2, #0
 800cb4a:	661a      	str	r2, [r3, #96]	; 0x60
    ahrs->accelerationRecoveryTimeout = ahrs->settings.recoveryTriggerPeriod;
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	695b      	ldr	r3, [r3, #20]
 800cb50:	461a      	mov	r2, r3
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	665a      	str	r2, [r3, #100]	; 0x64
    ahrs->magnetometerIgnored = false;
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	2200      	movs	r2, #0
 800cb5a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    ahrs->magneticRecoveryTrigger = 0;
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	2200      	movs	r2, #0
 800cb62:	66da      	str	r2, [r3, #108]	; 0x6c
    ahrs->magneticRecoveryTimeout = ahrs->settings.recoveryTriggerPeriod;
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	695b      	ldr	r3, [r3, #20]
 800cb68:	461a      	mov	r2, r3
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	671a      	str	r2, [r3, #112]	; 0x70
}
 800cb6e:	bf00      	nop
 800cb70:	3744      	adds	r7, #68	; 0x44
 800cb72:	46bd      	mov	sp, r7
 800cb74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb78:	4770      	bx	lr
 800cb7a:	bf00      	nop
 800cb7c:	41200000 	.word	0x41200000

0800cb80 <FusionAhrsSetSettings>:
/**
 * @brief Sets the AHRS algorithm settings.
 * @param ahrs AHRS algorithm structure.
 * @param settings Settings.
 */
void FusionAhrsSetSettings(FusionAhrs *const ahrs, const FusionAhrsSettings *const settings) {
 800cb80:	b580      	push	{r7, lr}
 800cb82:	b082      	sub	sp, #8
 800cb84:	af00      	add	r7, sp, #0
 800cb86:	6078      	str	r0, [r7, #4]
 800cb88:	6039      	str	r1, [r7, #0]
    ahrs->settings.convention = settings->convention;
 800cb8a:	683b      	ldr	r3, [r7, #0]
 800cb8c:	781a      	ldrb	r2, [r3, #0]
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	701a      	strb	r2, [r3, #0]
    ahrs->settings.gain = settings->gain;
 800cb92:	683b      	ldr	r3, [r7, #0]
 800cb94:	685a      	ldr	r2, [r3, #4]
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	605a      	str	r2, [r3, #4]
    ahrs->settings.gyroscopeRange = settings->gyroscopeRange == 0.0f ? FLT_MAX : 0.98f * settings->gyroscopeRange;
 800cb9a:	683b      	ldr	r3, [r7, #0]
 800cb9c:	edd3 7a02 	vldr	s15, [r3, #8]
 800cba0:	eef5 7a40 	vcmp.f32	s15, #0.0
 800cba4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cba8:	d007      	beq.n	800cbba <FusionAhrsSetSettings+0x3a>
 800cbaa:	683b      	ldr	r3, [r7, #0]
 800cbac:	edd3 7a02 	vldr	s15, [r3, #8]
 800cbb0:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 800cce4 <FusionAhrsSetSettings+0x164>
 800cbb4:	ee67 7a87 	vmul.f32	s15, s15, s14
 800cbb8:	e001      	b.n	800cbbe <FusionAhrsSetSettings+0x3e>
 800cbba:	eddf 7a4b 	vldr	s15, [pc, #300]	; 800cce8 <FusionAhrsSetSettings+0x168>
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	edc3 7a02 	vstr	s15, [r3, #8]
    ahrs->settings.accelerationRejection = settings->accelerationRejection == 0.0f ? FLT_MAX : powf(0.5f * sinf(FusionDegreesToRadians(settings->accelerationRejection)), 2);
 800cbc4:	683b      	ldr	r3, [r7, #0]
 800cbc6:	edd3 7a03 	vldr	s15, [r3, #12]
 800cbca:	eef5 7a40 	vcmp.f32	s15, #0.0
 800cbce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cbd2:	d01b      	beq.n	800cc0c <FusionAhrsSetSettings+0x8c>
 800cbd4:	683b      	ldr	r3, [r7, #0]
 800cbd6:	edd3 7a03 	vldr	s15, [r3, #12]
 800cbda:	eeb0 0a67 	vmov.f32	s0, s15
 800cbde:	f7ff fb09 	bl	800c1f4 <FusionDegreesToRadians>
 800cbe2:	eef0 7a40 	vmov.f32	s15, s0
 800cbe6:	eeb0 0a67 	vmov.f32	s0, s15
 800cbea:	f006 ff03 	bl	80139f4 <sinf>
 800cbee:	eef0 7a40 	vmov.f32	s15, s0
 800cbf2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800cbf6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800cbfa:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 800cbfe:	eeb0 0a67 	vmov.f32	s0, s15
 800cc02:	f006 ffdb 	bl	8013bbc <powf>
 800cc06:	eef0 7a40 	vmov.f32	s15, s0
 800cc0a:	e001      	b.n	800cc10 <FusionAhrsSetSettings+0x90>
 800cc0c:	eddf 7a36 	vldr	s15, [pc, #216]	; 800cce8 <FusionAhrsSetSettings+0x168>
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	edc3 7a03 	vstr	s15, [r3, #12]
    ahrs->settings.magneticRejection = settings->magneticRejection == 0.0f ? FLT_MAX : powf(0.5f * sinf(FusionDegreesToRadians(settings->magneticRejection)), 2);
 800cc16:	683b      	ldr	r3, [r7, #0]
 800cc18:	edd3 7a04 	vldr	s15, [r3, #16]
 800cc1c:	eef5 7a40 	vcmp.f32	s15, #0.0
 800cc20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc24:	d01b      	beq.n	800cc5e <FusionAhrsSetSettings+0xde>
 800cc26:	683b      	ldr	r3, [r7, #0]
 800cc28:	edd3 7a04 	vldr	s15, [r3, #16]
 800cc2c:	eeb0 0a67 	vmov.f32	s0, s15
 800cc30:	f7ff fae0 	bl	800c1f4 <FusionDegreesToRadians>
 800cc34:	eef0 7a40 	vmov.f32	s15, s0
 800cc38:	eeb0 0a67 	vmov.f32	s0, s15
 800cc3c:	f006 feda 	bl	80139f4 <sinf>
 800cc40:	eef0 7a40 	vmov.f32	s15, s0
 800cc44:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800cc48:	ee67 7a87 	vmul.f32	s15, s15, s14
 800cc4c:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 800cc50:	eeb0 0a67 	vmov.f32	s0, s15
 800cc54:	f006 ffb2 	bl	8013bbc <powf>
 800cc58:	eef0 7a40 	vmov.f32	s15, s0
 800cc5c:	e001      	b.n	800cc62 <FusionAhrsSetSettings+0xe2>
 800cc5e:	eddf 7a22 	vldr	s15, [pc, #136]	; 800cce8 <FusionAhrsSetSettings+0x168>
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	edc3 7a04 	vstr	s15, [r3, #16]
    ahrs->settings.recoveryTriggerPeriod = settings->recoveryTriggerPeriod;
 800cc68:	683b      	ldr	r3, [r7, #0]
 800cc6a:	695a      	ldr	r2, [r3, #20]
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	615a      	str	r2, [r3, #20]
    ahrs->accelerationRecoveryTimeout = ahrs->settings.recoveryTriggerPeriod;
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	695b      	ldr	r3, [r3, #20]
 800cc74:	461a      	mov	r2, r3
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	665a      	str	r2, [r3, #100]	; 0x64
    ahrs->magneticRecoveryTimeout = ahrs->settings.recoveryTriggerPeriod;
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	695b      	ldr	r3, [r3, #20]
 800cc7e:	461a      	mov	r2, r3
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	671a      	str	r2, [r3, #112]	; 0x70
    if ((settings->gain == 0.0f) || (settings->recoveryTriggerPeriod == 0)) { // disable acceleration and magnetic rejection features if gain is zero
 800cc84:	683b      	ldr	r3, [r7, #0]
 800cc86:	edd3 7a01 	vldr	s15, [r3, #4]
 800cc8a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800cc8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc92:	d003      	beq.n	800cc9c <FusionAhrsSetSettings+0x11c>
 800cc94:	683b      	ldr	r3, [r7, #0]
 800cc96:	695b      	ldr	r3, [r3, #20]
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	d105      	bne.n	800cca8 <FusionAhrsSetSettings+0x128>
        ahrs->settings.accelerationRejection = FLT_MAX;
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	4a13      	ldr	r2, [pc, #76]	; (800ccec <FusionAhrsSetSettings+0x16c>)
 800cca0:	60da      	str	r2, [r3, #12]
        ahrs->settings.magneticRejection = FLT_MAX;
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	4a11      	ldr	r2, [pc, #68]	; (800ccec <FusionAhrsSetSettings+0x16c>)
 800cca6:	611a      	str	r2, [r3, #16]
    }
    if (ahrs->initialising == false) {
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ccae:	f083 0301 	eor.w	r3, r3, #1
 800ccb2:	b2db      	uxtb	r3, r3
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d003      	beq.n	800ccc0 <FusionAhrsSetSettings+0x140>
        ahrs->rampedGain = ahrs->settings.gain;
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	685a      	ldr	r2, [r3, #4]
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	639a      	str	r2, [r3, #56]	; 0x38
    }
    ahrs->rampedGainStep = (INITIAL_GAIN - ahrs->settings.gain) / INITIALISATION_PERIOD;
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	edd3 7a01 	vldr	s15, [r3, #4]
 800ccc6:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800ccca:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ccce:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 800ccd2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
}
 800ccdc:	bf00      	nop
 800ccde:	3708      	adds	r7, #8
 800cce0:	46bd      	mov	sp, r7
 800cce2:	bd80      	pop	{r7, pc}
 800cce4:	3f7ae148 	.word	0x3f7ae148
 800cce8:	7f7fffff 	.word	0x7f7fffff
 800ccec:	7f7fffff 	.word	0x7f7fffff

0800ccf0 <FusionAhrsUpdate>:
 * @param gyroscope Gyroscope measurement in degrees per second.
 * @param accelerometer Accelerometer measurement in g.
 * @param magnetometer Magnetometer measurement in arbitrary units.
 * @param deltaTime Delta time in seconds.
 */
void FusionAhrsUpdate(FusionAhrs *const ahrs, const FusionVector gyroscope, const FusionVector accelerometer, const FusionVector magnetometer, const float deltaTime) {
 800ccf0:	b590      	push	{r4, r7, lr}
 800ccf2:	b0bf      	sub	sp, #252	; 0xfc
 800ccf4:	af00      	add	r7, sp, #0
 800ccf6:	62f8      	str	r0, [r7, #44]	; 0x2c
 800ccf8:	eeb0 5a61 	vmov.f32	s10, s3
 800ccfc:	eef0 5a42 	vmov.f32	s11, s4
 800cd00:	eeb0 6a62 	vmov.f32	s12, s5
 800cd04:	eef0 6a43 	vmov.f32	s13, s6
 800cd08:	eeb0 7a63 	vmov.f32	s14, s7
 800cd0c:	eef0 7a44 	vmov.f32	s15, s8
 800cd10:	edc7 4a01 	vstr	s9, [r7, #4]
 800cd14:	ed87 0a08 	vstr	s0, [r7, #32]
 800cd18:	edc7 0a09 	vstr	s1, [r7, #36]	; 0x24
 800cd1c:	ed87 1a0a 	vstr	s2, [r7, #40]	; 0x28
 800cd20:	ed87 5a05 	vstr	s10, [r7, #20]
 800cd24:	edc7 5a06 	vstr	s11, [r7, #24]
 800cd28:	ed87 6a07 	vstr	s12, [r7, #28]
 800cd2c:	edc7 6a02 	vstr	s13, [r7, #8]
 800cd30:	ed87 7a03 	vstr	s14, [r7, #12]
 800cd34:	edc7 7a04 	vstr	s15, [r7, #16]
#define Q ahrs->quaternion.element

    // Store accelerometer
    ahrs->accelerometer = accelerometer;
 800cd38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd3a:	3328      	adds	r3, #40	; 0x28
 800cd3c:	f107 0214 	add.w	r2, r7, #20
 800cd40:	ca07      	ldmia	r2, {r0, r1, r2}
 800cd42:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    // Reinitialise if gyroscope range exceeded
    if ((fabs(gyroscope.axis.x) > ahrs->settings.gyroscopeRange) || (fabs(gyroscope.axis.y) > ahrs->settings.gyroscopeRange) || (fabs(gyroscope.axis.z) > ahrs->settings.gyroscopeRange)) {
 800cd46:	edd7 7a08 	vldr	s15, [r7, #32]
 800cd4a:	eeb0 7ae7 	vabs.f32	s14, s15
 800cd4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd50:	edd3 7a02 	vldr	s15, [r3, #8]
 800cd54:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800cd58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd5c:	dc17      	bgt.n	800cd8e <FusionAhrsUpdate+0x9e>
 800cd5e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800cd62:	eeb0 7ae7 	vabs.f32	s14, s15
 800cd66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd68:	edd3 7a02 	vldr	s15, [r3, #8]
 800cd6c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800cd70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd74:	dc0b      	bgt.n	800cd8e <FusionAhrsUpdate+0x9e>
 800cd76:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cd7a:	eeb0 7ae7 	vabs.f32	s14, s15
 800cd7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd80:	edd3 7a02 	vldr	s15, [r3, #8]
 800cd84:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800cd88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd8c:	dd15      	ble.n	800cdba <FusionAhrsUpdate+0xca>
        const FusionQuaternion quaternion = ahrs->quaternion;
 800cd8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd90:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 800cd94:	3318      	adds	r3, #24
 800cd96:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800cd98:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        FusionAhrsReset(ahrs);
 800cd9c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cd9e:	f7ff fe8b 	bl	800cab8 <FusionAhrsReset>
        ahrs->quaternion = quaternion;
 800cda2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cda4:	f103 0418 	add.w	r4, r3, #24
 800cda8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800cdac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800cdae:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        ahrs->angularRateRecovery = true;
 800cdb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdb4:	2201      	movs	r2, #1
 800cdb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    }

    // Ramp down gain during initialisation
    if (ahrs->initialising == true) {
 800cdba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdbc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d02d      	beq.n	800ce20 <FusionAhrsUpdate+0x130>
        ahrs->rampedGain -= ahrs->rampedGainStep * deltaTime;
 800cdc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdc6:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 800cdca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdcc:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 800cdd0:	edd7 7a01 	vldr	s15, [r7, #4]
 800cdd4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800cdd8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdde:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
        if ((ahrs->rampedGain < ahrs->settings.gain) || (ahrs->settings.gain == 0.0f)) {
 800cde2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cde4:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 800cde8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdea:	edd3 7a01 	vldr	s15, [r3, #4]
 800cdee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800cdf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cdf6:	d407      	bmi.n	800ce08 <FusionAhrsUpdate+0x118>
 800cdf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdfa:	edd3 7a01 	vldr	s15, [r3, #4]
 800cdfe:	eef5 7a40 	vcmp.f32	s15, #0.0
 800ce02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce06:	d10b      	bne.n	800ce20 <FusionAhrsUpdate+0x130>
            ahrs->rampedGain = ahrs->settings.gain;
 800ce08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce0a:	685a      	ldr	r2, [r3, #4]
 800ce0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce0e:	639a      	str	r2, [r3, #56]	; 0x38
            ahrs->initialising = false;
 800ce10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce12:	2200      	movs	r2, #0
 800ce14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
            ahrs->angularRateRecovery = false;
 800ce18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce1a:	2200      	movs	r2, #0
 800ce1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        }
    }

    // Calculate direction of gravity indicated by algorithm
    const FusionVector halfGravity = HalfGravity(ahrs);
 800ce20:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ce22:	f000 faf4 	bl	800d40e <HalfGravity>
 800ce26:	eef0 6a40 	vmov.f32	s13, s0
 800ce2a:	eeb0 7a60 	vmov.f32	s14, s1
 800ce2e:	eef0 7a41 	vmov.f32	s15, s2
 800ce32:	edc7 6a25 	vstr	s13, [r7, #148]	; 0x94
 800ce36:	ed87 7a26 	vstr	s14, [r7, #152]	; 0x98
 800ce3a:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c

    // Calculate accelerometer feedback
    FusionVector halfAccelerometerFeedback = FUSION_VECTOR_ZERO;
 800ce3e:	f04f 0300 	mov.w	r3, #0
 800ce42:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800ce46:	f04f 0300 	mov.w	r3, #0
 800ce4a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800ce4e:	f04f 0300 	mov.w	r3, #0
 800ce52:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    ahrs->accelerometerIgnored = true;
 800ce56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce58:	2201      	movs	r2, #1
 800ce5a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
    if (FusionVectorIsZero(accelerometer) == false) {
 800ce5e:	edd7 6a05 	vldr	s13, [r7, #20]
 800ce62:	ed97 7a06 	vldr	s14, [r7, #24]
 800ce66:	edd7 7a07 	vldr	s15, [r7, #28]
 800ce6a:	eeb0 0a66 	vmov.f32	s0, s13
 800ce6e:	eef0 0a47 	vmov.f32	s1, s14
 800ce72:	eeb0 1a67 	vmov.f32	s2, s15
 800ce76:	f7ff fa01 	bl	800c27c <FusionVectorIsZero>
 800ce7a:	4603      	mov	r3, r0
 800ce7c:	f083 0301 	eor.w	r3, r3, #1
 800ce80:	b2db      	uxtb	r3, r3
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	f000 809c 	beq.w	800cfc0 <FusionAhrsUpdate+0x2d0>

        // Calculate accelerometer feedback scaled by 0.5
        ahrs->halfAccelerometerFeedback = Feedback(FusionVectorNormalise(accelerometer), halfGravity);
 800ce88:	edd7 6a05 	vldr	s13, [r7, #20]
 800ce8c:	ed97 7a06 	vldr	s14, [r7, #24]
 800ce90:	edd7 7a07 	vldr	s15, [r7, #28]
 800ce94:	eeb0 0a66 	vmov.f32	s0, s13
 800ce98:	eef0 0a47 	vmov.f32	s1, s14
 800ce9c:	eeb0 1a67 	vmov.f32	s2, s15
 800cea0:	f7ff fc22 	bl	800c6e8 <FusionVectorNormalise>
 800cea4:	eef0 6a40 	vmov.f32	s13, s0
 800cea8:	eeb0 7a60 	vmov.f32	s14, s1
 800ceac:	eef0 7a41 	vmov.f32	s15, s2
 800ceb0:	edc7 6a28 	vstr	s13, [r7, #160]	; 0xa0
 800ceb4:	ed87 7a29 	vstr	s14, [r7, #164]	; 0xa4
 800ceb8:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
 800cebc:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 800cebe:	ed97 5a25 	vldr	s10, [r7, #148]	; 0x94
 800cec2:	edd7 5a26 	vldr	s11, [r7, #152]	; 0x98
 800cec6:	ed97 6a27 	vldr	s12, [r7, #156]	; 0x9c
 800ceca:	edd7 6a28 	vldr	s13, [r7, #160]	; 0xa0
 800cece:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 800ced2:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800ced6:	eef0 1a45 	vmov.f32	s3, s10
 800ceda:	eeb0 2a65 	vmov.f32	s4, s11
 800cede:	eef0 2a46 	vmov.f32	s5, s12
 800cee2:	eeb0 0a66 	vmov.f32	s0, s13
 800cee6:	eef0 0a47 	vmov.f32	s1, s14
 800ceea:	eeb0 1a67 	vmov.f32	s2, s15
 800ceee:	f000 fc55 	bl	800d79c <Feedback>
 800cef2:	eef0 6a40 	vmov.f32	s13, s0
 800cef6:	eeb0 7a60 	vmov.f32	s14, s1
 800cefa:	eef0 7a41 	vmov.f32	s15, s2
 800cefe:	edc4 6a11 	vstr	s13, [r4, #68]	; 0x44
 800cf02:	ed84 7a12 	vstr	s14, [r4, #72]	; 0x48
 800cf06:	edc4 7a13 	vstr	s15, [r4, #76]	; 0x4c

        // Don't ignore accelerometer if acceleration error below threshold
        if ((ahrs->initialising == true) || ((FusionVectorMagnitudeSquared(ahrs->halfAccelerometerFeedback) <= ahrs->settings.accelerationRejection))) {
 800cf0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf0c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	d118      	bne.n	800cf46 <FusionAhrsUpdate+0x256>
 800cf14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf16:	edd3 6a11 	vldr	s13, [r3, #68]	; 0x44
 800cf1a:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 800cf1e:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 800cf22:	eeb0 0a66 	vmov.f32	s0, s13
 800cf26:	eef0 0a47 	vmov.f32	s1, s14
 800cf2a:	eeb0 1a67 	vmov.f32	s2, s15
 800cf2e:	f7ff fb91 	bl	800c654 <FusionVectorMagnitudeSquared>
 800cf32:	eeb0 7a40 	vmov.f32	s14, s0
 800cf36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf38:	edd3 7a03 	vldr	s15, [r3, #12]
 800cf3c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800cf40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf44:	d80a      	bhi.n	800cf5c <FusionAhrsUpdate+0x26c>
            ahrs->accelerometerIgnored = false;
 800cf46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf48:	2200      	movs	r2, #0
 800cf4a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
            ahrs->accelerationRecoveryTrigger -= 9;
 800cf4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cf52:	f1a3 0209 	sub.w	r2, r3, #9
 800cf56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf58:	661a      	str	r2, [r3, #96]	; 0x60
 800cf5a:	e004      	b.n	800cf66 <FusionAhrsUpdate+0x276>
        } else {
            ahrs->accelerationRecoveryTrigger += 1;
 800cf5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cf60:	1c5a      	adds	r2, r3, #1
 800cf62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf64:	661a      	str	r2, [r3, #96]	; 0x60
        }

        // Don't ignore accelerometer during acceleration recovery
        if (ahrs->accelerationRecoveryTrigger > ahrs->accelerationRecoveryTimeout) {
 800cf66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf68:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800cf6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf6c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cf6e:	429a      	cmp	r2, r3
 800cf70:	dd07      	ble.n	800cf82 <FusionAhrsUpdate+0x292>
            ahrs->accelerationRecoveryTimeout = 0;
 800cf72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf74:	2200      	movs	r2, #0
 800cf76:	665a      	str	r2, [r3, #100]	; 0x64
            ahrs->accelerometerIgnored = false;
 800cf78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf7a:	2200      	movs	r2, #0
 800cf7c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 800cf80:	e004      	b.n	800cf8c <FusionAhrsUpdate+0x29c>
        } else {
            ahrs->accelerationRecoveryTimeout = ahrs->settings.recoveryTriggerPeriod;
 800cf82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf84:	695b      	ldr	r3, [r3, #20]
 800cf86:	461a      	mov	r2, r3
 800cf88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf8a:	665a      	str	r2, [r3, #100]	; 0x64
        }
        ahrs->accelerationRecoveryTrigger = Clamp(ahrs->accelerationRecoveryTrigger, 0, ahrs->settings.recoveryTriggerPeriod);
 800cf8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf8e:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800cf90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf92:	695b      	ldr	r3, [r3, #20]
 800cf94:	461a      	mov	r2, r3
 800cf96:	2100      	movs	r1, #0
 800cf98:	f000 fcb5 	bl	800d906 <Clamp>
 800cf9c:	4602      	mov	r2, r0
 800cf9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfa0:	661a      	str	r2, [r3, #96]	; 0x60

        // Apply accelerometer feedback
        if (ahrs->accelerometerIgnored == false) {
 800cfa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfa4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800cfa8:	f083 0301 	eor.w	r3, r3, #1
 800cfac:	b2db      	uxtb	r3, r3
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d006      	beq.n	800cfc0 <FusionAhrsUpdate+0x2d0>
            halfAccelerometerFeedback = ahrs->halfAccelerometerFeedback;
 800cfb2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cfb4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800cfb8:	3244      	adds	r2, #68	; 0x44
 800cfba:	ca07      	ldmia	r2, {r0, r1, r2}
 800cfbc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        }
    }

    // Calculate magnetometer feedback
    FusionVector halfMagnetometerFeedback = FUSION_VECTOR_ZERO;
 800cfc0:	f04f 0300 	mov.w	r3, #0
 800cfc4:	673b      	str	r3, [r7, #112]	; 0x70
 800cfc6:	f04f 0300 	mov.w	r3, #0
 800cfca:	677b      	str	r3, [r7, #116]	; 0x74
 800cfcc:	f04f 0300 	mov.w	r3, #0
 800cfd0:	67bb      	str	r3, [r7, #120]	; 0x78
    ahrs->magnetometerIgnored = false;
 800cfd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfd4:	2200      	movs	r2, #0
 800cfd6:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    if (FusionVectorIsZero(magnetometer) == false) {
 800cfda:	edd7 6a02 	vldr	s13, [r7, #8]
 800cfde:	ed97 7a03 	vldr	s14, [r7, #12]
 800cfe2:	edd7 7a04 	vldr	s15, [r7, #16]
 800cfe6:	eeb0 0a66 	vmov.f32	s0, s13
 800cfea:	eef0 0a47 	vmov.f32	s1, s14
 800cfee:	eeb0 1a67 	vmov.f32	s2, s15
 800cff2:	f7ff f943 	bl	800c27c <FusionVectorIsZero>
 800cff6:	4603      	mov	r3, r0
 800cff8:	f083 0301 	eor.w	r3, r3, #1
 800cffc:	b2db      	uxtb	r3, r3
 800cffe:	2b00      	cmp	r3, #0
 800d000:	f000 80d1 	beq.w	800d1a6 <FusionAhrsUpdate+0x4b6>

        // Calculate direction of magnetic field indicated by algorithm
        const FusionVector halfMagnetic = HalfMagnetic(ahrs);
 800d004:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d006:	f000 fabf 	bl	800d588 <HalfMagnetic>
 800d00a:	eef0 6a40 	vmov.f32	s13, s0
 800d00e:	eeb0 7a60 	vmov.f32	s14, s1
 800d012:	eef0 7a41 	vmov.f32	s15, s2
 800d016:	edc7 6a0c 	vstr	s13, [r7, #48]	; 0x30
 800d01a:	ed87 7a0d 	vstr	s14, [r7, #52]	; 0x34
 800d01e:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38

        // Calculate magnetometer feedback scaled by 0.5
        ahrs->halfMagnetometerFeedback = Feedback(FusionVectorNormalise(FusionVectorCrossProduct(halfGravity, magnetometer)), halfMagnetic);
 800d022:	ed97 5a02 	vldr	s10, [r7, #8]
 800d026:	edd7 5a03 	vldr	s11, [r7, #12]
 800d02a:	ed97 6a04 	vldr	s12, [r7, #16]
 800d02e:	edd7 6a25 	vldr	s13, [r7, #148]	; 0x94
 800d032:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800d036:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800d03a:	eef0 1a45 	vmov.f32	s3, s10
 800d03e:	eeb0 2a65 	vmov.f32	s4, s11
 800d042:	eef0 2a46 	vmov.f32	s5, s12
 800d046:	eeb0 0a66 	vmov.f32	s0, s13
 800d04a:	eef0 0a47 	vmov.f32	s1, s14
 800d04e:	eeb0 1a67 	vmov.f32	s2, s15
 800d052:	f7ff fa43 	bl	800c4dc <FusionVectorCrossProduct>
 800d056:	eef0 6a40 	vmov.f32	s13, s0
 800d05a:	eeb0 7a60 	vmov.f32	s14, s1
 800d05e:	eef0 7a41 	vmov.f32	s15, s2
 800d062:	edc7 6a2b 	vstr	s13, [r7, #172]	; 0xac
 800d066:	ed87 7a2c 	vstr	s14, [r7, #176]	; 0xb0
 800d06a:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
 800d06e:	edd7 6a2b 	vldr	s13, [r7, #172]	; 0xac
 800d072:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 800d076:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 800d07a:	eeb0 0a66 	vmov.f32	s0, s13
 800d07e:	eef0 0a47 	vmov.f32	s1, s14
 800d082:	eeb0 1a67 	vmov.f32	s2, s15
 800d086:	f7ff fb2f 	bl	800c6e8 <FusionVectorNormalise>
 800d08a:	eef0 6a40 	vmov.f32	s13, s0
 800d08e:	eeb0 7a60 	vmov.f32	s14, s1
 800d092:	eef0 7a41 	vmov.f32	s15, s2
 800d096:	edc7 6a2e 	vstr	s13, [r7, #184]	; 0xb8
 800d09a:	ed87 7a2f 	vstr	s14, [r7, #188]	; 0xbc
 800d09e:	edc7 7a30 	vstr	s15, [r7, #192]	; 0xc0
 800d0a2:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 800d0a4:	ed97 5a0c 	vldr	s10, [r7, #48]	; 0x30
 800d0a8:	edd7 5a0d 	vldr	s11, [r7, #52]	; 0x34
 800d0ac:	ed97 6a0e 	vldr	s12, [r7, #56]	; 0x38
 800d0b0:	edd7 6a2e 	vldr	s13, [r7, #184]	; 0xb8
 800d0b4:	ed97 7a2f 	vldr	s14, [r7, #188]	; 0xbc
 800d0b8:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 800d0bc:	eef0 1a45 	vmov.f32	s3, s10
 800d0c0:	eeb0 2a65 	vmov.f32	s4, s11
 800d0c4:	eef0 2a46 	vmov.f32	s5, s12
 800d0c8:	eeb0 0a66 	vmov.f32	s0, s13
 800d0cc:	eef0 0a47 	vmov.f32	s1, s14
 800d0d0:	eeb0 1a67 	vmov.f32	s2, s15
 800d0d4:	f000 fb62 	bl	800d79c <Feedback>
 800d0d8:	eef0 6a40 	vmov.f32	s13, s0
 800d0dc:	eeb0 7a60 	vmov.f32	s14, s1
 800d0e0:	eef0 7a41 	vmov.f32	s15, s2
 800d0e4:	edc4 6a14 	vstr	s13, [r4, #80]	; 0x50
 800d0e8:	ed84 7a15 	vstr	s14, [r4, #84]	; 0x54
 800d0ec:	edc4 7a16 	vstr	s15, [r4, #88]	; 0x58

        // Don't ignore magnetometer if magnetic error below threshold
        if ((ahrs->initialising == true) || ((FusionVectorMagnitudeSquared(ahrs->halfMagnetometerFeedback) <= ahrs->settings.magneticRejection))) {
 800d0f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0f2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	d118      	bne.n	800d12c <FusionAhrsUpdate+0x43c>
 800d0fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0fc:	edd3 6a14 	vldr	s13, [r3, #80]	; 0x50
 800d100:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 800d104:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800d108:	eeb0 0a66 	vmov.f32	s0, s13
 800d10c:	eef0 0a47 	vmov.f32	s1, s14
 800d110:	eeb0 1a67 	vmov.f32	s2, s15
 800d114:	f7ff fa9e 	bl	800c654 <FusionVectorMagnitudeSquared>
 800d118:	eeb0 7a40 	vmov.f32	s14, s0
 800d11c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d11e:	edd3 7a04 	vldr	s15, [r3, #16]
 800d122:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d126:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d12a:	d80a      	bhi.n	800d142 <FusionAhrsUpdate+0x452>
            ahrs->magnetometerIgnored = false;
 800d12c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d12e:	2200      	movs	r2, #0
 800d130:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
            ahrs->magneticRecoveryTrigger -= 9;
 800d134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d136:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d138:	f1a3 0209 	sub.w	r2, r3, #9
 800d13c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d13e:	66da      	str	r2, [r3, #108]	; 0x6c
 800d140:	e004      	b.n	800d14c <FusionAhrsUpdate+0x45c>
        } else {
            ahrs->magneticRecoveryTrigger += 1;
 800d142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d144:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d146:	1c5a      	adds	r2, r3, #1
 800d148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d14a:	66da      	str	r2, [r3, #108]	; 0x6c
        }

        // Don't ignore magnetometer during magnetic recovery
        if (ahrs->magneticRecoveryTrigger > ahrs->magneticRecoveryTimeout) {
 800d14c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d14e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800d150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d152:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d154:	429a      	cmp	r2, r3
 800d156:	dd07      	ble.n	800d168 <FusionAhrsUpdate+0x478>
            ahrs->magneticRecoveryTimeout = 0;
 800d158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d15a:	2200      	movs	r2, #0
 800d15c:	671a      	str	r2, [r3, #112]	; 0x70
            ahrs->magnetometerIgnored = false;
 800d15e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d160:	2200      	movs	r2, #0
 800d162:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 800d166:	e004      	b.n	800d172 <FusionAhrsUpdate+0x482>
        } else {
            ahrs->magneticRecoveryTimeout = ahrs->settings.recoveryTriggerPeriod;
 800d168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d16a:	695b      	ldr	r3, [r3, #20]
 800d16c:	461a      	mov	r2, r3
 800d16e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d170:	671a      	str	r2, [r3, #112]	; 0x70
        }
        ahrs->magneticRecoveryTrigger = Clamp(ahrs->magneticRecoveryTrigger, 0, ahrs->settings.recoveryTriggerPeriod);
 800d172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d174:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800d176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d178:	695b      	ldr	r3, [r3, #20]
 800d17a:	461a      	mov	r2, r3
 800d17c:	2100      	movs	r1, #0
 800d17e:	f000 fbc2 	bl	800d906 <Clamp>
 800d182:	4602      	mov	r2, r0
 800d184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d186:	66da      	str	r2, [r3, #108]	; 0x6c

        // Apply magnetometer feedback
        if (ahrs->magnetometerIgnored == false) {
 800d188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d18a:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800d18e:	f083 0301 	eor.w	r3, r3, #1
 800d192:	b2db      	uxtb	r3, r3
 800d194:	2b00      	cmp	r3, #0
 800d196:	d006      	beq.n	800d1a6 <FusionAhrsUpdate+0x4b6>
            halfMagnetometerFeedback = ahrs->halfMagnetometerFeedback;
 800d198:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d19a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800d19e:	3250      	adds	r2, #80	; 0x50
 800d1a0:	ca07      	ldmia	r2, {r0, r1, r2}
 800d1a2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        }
    }

    // Convert gyroscope to radians per second scaled by 0.5
    const FusionVector halfGyroscope = FusionVectorMultiplyScalar(gyroscope, FusionDegreesToRadians(0.5f));
 800d1a6:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 800d1aa:	f7ff f823 	bl	800c1f4 <FusionDegreesToRadians>
 800d1ae:	eeb0 6a40 	vmov.f32	s12, s0
 800d1b2:	edd7 6a08 	vldr	s13, [r7, #32]
 800d1b6:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800d1ba:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d1be:	eef0 1a46 	vmov.f32	s3, s12
 800d1c2:	eeb0 0a66 	vmov.f32	s0, s13
 800d1c6:	eef0 0a47 	vmov.f32	s1, s14
 800d1ca:	eeb0 1a67 	vmov.f32	s2, s15
 800d1ce:	f7ff f8f3 	bl	800c3b8 <FusionVectorMultiplyScalar>
 800d1d2:	eef0 6a40 	vmov.f32	s13, s0
 800d1d6:	eeb0 7a60 	vmov.f32	s14, s1
 800d1da:	eef0 7a41 	vmov.f32	s15, s2
 800d1de:	edc7 6a16 	vstr	s13, [r7, #88]	; 0x58
 800d1e2:	ed87 7a17 	vstr	s14, [r7, #92]	; 0x5c
 800d1e6:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60

    // Apply feedback to gyroscope
    const FusionVector adjustedHalfGyroscope = FusionVectorAdd(halfGyroscope, FusionVectorMultiplyScalar(FusionVectorAdd(halfAccelerometerFeedback, halfMagnetometerFeedback), ahrs->rampedGain));
 800d1ea:	ed97 5a1c 	vldr	s10, [r7, #112]	; 0x70
 800d1ee:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 800d1f2:	ed97 6a1e 	vldr	s12, [r7, #120]	; 0x78
 800d1f6:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 800d1fa:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 800d1fe:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 800d202:	eef0 1a45 	vmov.f32	s3, s10
 800d206:	eeb0 2a65 	vmov.f32	s4, s11
 800d20a:	eef0 2a46 	vmov.f32	s5, s12
 800d20e:	eeb0 0a66 	vmov.f32	s0, s13
 800d212:	eef0 0a47 	vmov.f32	s1, s14
 800d216:	eeb0 1a67 	vmov.f32	s2, s15
 800d21a:	f7ff f85f 	bl	800c2dc <FusionVectorAdd>
 800d21e:	eef0 6a40 	vmov.f32	s13, s0
 800d222:	eeb0 7a60 	vmov.f32	s14, s1
 800d226:	eef0 7a41 	vmov.f32	s15, s2
 800d22a:	edc7 6a31 	vstr	s13, [r7, #196]	; 0xc4
 800d22e:	ed87 7a32 	vstr	s14, [r7, #200]	; 0xc8
 800d232:	edc7 7a33 	vstr	s15, [r7, #204]	; 0xcc
 800d236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d238:	ed93 6a0e 	vldr	s12, [r3, #56]	; 0x38
 800d23c:	edd7 6a31 	vldr	s13, [r7, #196]	; 0xc4
 800d240:	ed97 7a32 	vldr	s14, [r7, #200]	; 0xc8
 800d244:	edd7 7a33 	vldr	s15, [r7, #204]	; 0xcc
 800d248:	eef0 1a46 	vmov.f32	s3, s12
 800d24c:	eeb0 0a66 	vmov.f32	s0, s13
 800d250:	eef0 0a47 	vmov.f32	s1, s14
 800d254:	eeb0 1a67 	vmov.f32	s2, s15
 800d258:	f7ff f8ae 	bl	800c3b8 <FusionVectorMultiplyScalar>
 800d25c:	eef0 6a40 	vmov.f32	s13, s0
 800d260:	eeb0 7a60 	vmov.f32	s14, s1
 800d264:	eef0 7a41 	vmov.f32	s15, s2
 800d268:	edc7 6a34 	vstr	s13, [r7, #208]	; 0xd0
 800d26c:	ed87 7a35 	vstr	s14, [r7, #212]	; 0xd4
 800d270:	edc7 7a36 	vstr	s15, [r7, #216]	; 0xd8
 800d274:	ed97 5a34 	vldr	s10, [r7, #208]	; 0xd0
 800d278:	edd7 5a35 	vldr	s11, [r7, #212]	; 0xd4
 800d27c:	ed97 6a36 	vldr	s12, [r7, #216]	; 0xd8
 800d280:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 800d284:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800d288:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800d28c:	eef0 1a45 	vmov.f32	s3, s10
 800d290:	eeb0 2a65 	vmov.f32	s4, s11
 800d294:	eef0 2a46 	vmov.f32	s5, s12
 800d298:	eeb0 0a66 	vmov.f32	s0, s13
 800d29c:	eef0 0a47 	vmov.f32	s1, s14
 800d2a0:	eeb0 1a67 	vmov.f32	s2, s15
 800d2a4:	f7ff f81a 	bl	800c2dc <FusionVectorAdd>
 800d2a8:	eef0 6a40 	vmov.f32	s13, s0
 800d2ac:	eeb0 7a60 	vmov.f32	s14, s1
 800d2b0:	eef0 7a41 	vmov.f32	s15, s2
 800d2b4:	edc7 6a13 	vstr	s13, [r7, #76]	; 0x4c
 800d2b8:	ed87 7a14 	vstr	s14, [r7, #80]	; 0x50
 800d2bc:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

    // Integrate rate of change of quaternion
    ahrs->quaternion = FusionQuaternionAdd(ahrs->quaternion, FusionQuaternionMultiplyVector(ahrs->quaternion, FusionVectorMultiplyScalar(adjustedHalfGyroscope, deltaTime)));
 800d2c0:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 800d2c4:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800d2c8:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800d2cc:	edd7 1a01 	vldr	s3, [r7, #4]
 800d2d0:	eeb0 0a66 	vmov.f32	s0, s13
 800d2d4:	eef0 0a47 	vmov.f32	s1, s14
 800d2d8:	eeb0 1a67 	vmov.f32	s2, s15
 800d2dc:	f7ff f86c 	bl	800c3b8 <FusionVectorMultiplyScalar>
 800d2e0:	eef0 6a40 	vmov.f32	s13, s0
 800d2e4:	eeb0 7a60 	vmov.f32	s14, s1
 800d2e8:	eef0 7a41 	vmov.f32	s15, s2
 800d2ec:	edc7 6a37 	vstr	s13, [r7, #220]	; 0xdc
 800d2f0:	ed87 7a38 	vstr	s14, [r7, #224]	; 0xe0
 800d2f4:	edc7 7a39 	vstr	s15, [r7, #228]	; 0xe4
 800d2f8:	edd7 4a37 	vldr	s9, [r7, #220]	; 0xdc
 800d2fc:	ed97 5a38 	vldr	s10, [r7, #224]	; 0xe0
 800d300:	edd7 5a39 	vldr	s11, [r7, #228]	; 0xe4
 800d304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d306:	ed93 6a06 	vldr	s12, [r3, #24]
 800d30a:	edd3 6a07 	vldr	s13, [r3, #28]
 800d30e:	ed93 7a08 	vldr	s14, [r3, #32]
 800d312:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800d316:	eeb0 2a64 	vmov.f32	s4, s9
 800d31a:	eef0 2a45 	vmov.f32	s5, s10
 800d31e:	eeb0 3a65 	vmov.f32	s6, s11
 800d322:	eeb0 0a46 	vmov.f32	s0, s12
 800d326:	eef0 0a66 	vmov.f32	s1, s13
 800d32a:	eeb0 1a47 	vmov.f32	s2, s14
 800d32e:	eef0 1a67 	vmov.f32	s3, s15
 800d332:	f7ff fa8e 	bl	800c852 <FusionQuaternionMultiplyVector>
 800d336:	eeb0 6a40 	vmov.f32	s12, s0
 800d33a:	eef0 6a60 	vmov.f32	s13, s1
 800d33e:	eeb0 7a41 	vmov.f32	s14, s2
 800d342:	eef0 7a61 	vmov.f32	s15, s3
 800d346:	ed87 6a3a 	vstr	s12, [r7, #232]	; 0xe8
 800d34a:	edc7 6a3b 	vstr	s13, [r7, #236]	; 0xec
 800d34e:	ed87 7a3c 	vstr	s14, [r7, #240]	; 0xf0
 800d352:	edc7 7a3d 	vstr	s15, [r7, #244]	; 0xf4
 800d356:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 800d358:	ed97 4a3a 	vldr	s8, [r7, #232]	; 0xe8
 800d35c:	edd7 4a3b 	vldr	s9, [r7, #236]	; 0xec
 800d360:	ed97 5a3c 	vldr	s10, [r7, #240]	; 0xf0
 800d364:	edd7 5a3d 	vldr	s11, [r7, #244]	; 0xf4
 800d368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d36a:	ed93 6a06 	vldr	s12, [r3, #24]
 800d36e:	edd3 6a07 	vldr	s13, [r3, #28]
 800d372:	ed93 7a08 	vldr	s14, [r3, #32]
 800d376:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800d37a:	eeb0 2a44 	vmov.f32	s4, s8
 800d37e:	eef0 2a64 	vmov.f32	s5, s9
 800d382:	eeb0 3a45 	vmov.f32	s6, s10
 800d386:	eef0 3a65 	vmov.f32	s7, s11
 800d38a:	eeb0 0a46 	vmov.f32	s0, s12
 800d38e:	eef0 0a66 	vmov.f32	s1, s13
 800d392:	eeb0 1a47 	vmov.f32	s2, s14
 800d396:	eef0 1a67 	vmov.f32	s3, s15
 800d39a:	f7ff f9f8 	bl	800c78e <FusionQuaternionAdd>
 800d39e:	eeb0 6a40 	vmov.f32	s12, s0
 800d3a2:	eef0 6a60 	vmov.f32	s13, s1
 800d3a6:	eeb0 7a41 	vmov.f32	s14, s2
 800d3aa:	eef0 7a61 	vmov.f32	s15, s3
 800d3ae:	ed84 6a06 	vstr	s12, [r4, #24]
 800d3b2:	edc4 6a07 	vstr	s13, [r4, #28]
 800d3b6:	ed84 7a08 	vstr	s14, [r4, #32]
 800d3ba:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24

    // Normalise quaternion
    ahrs->quaternion = FusionQuaternionNormalise(ahrs->quaternion);
 800d3be:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 800d3c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3c2:	ed93 6a06 	vldr	s12, [r3, #24]
 800d3c6:	edd3 6a07 	vldr	s13, [r3, #28]
 800d3ca:	ed93 7a08 	vldr	s14, [r3, #32]
 800d3ce:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800d3d2:	eeb0 0a46 	vmov.f32	s0, s12
 800d3d6:	eef0 0a66 	vmov.f32	s1, s13
 800d3da:	eeb0 1a47 	vmov.f32	s2, s14
 800d3de:	eef0 1a67 	vmov.f32	s3, s15
 800d3e2:	f7ff fad6 	bl	800c992 <FusionQuaternionNormalise>
 800d3e6:	eeb0 6a40 	vmov.f32	s12, s0
 800d3ea:	eef0 6a60 	vmov.f32	s13, s1
 800d3ee:	eeb0 7a41 	vmov.f32	s14, s2
 800d3f2:	eef0 7a61 	vmov.f32	s15, s3
 800d3f6:	ed84 6a06 	vstr	s12, [r4, #24]
 800d3fa:	edc4 6a07 	vstr	s13, [r4, #28]
 800d3fe:	ed84 7a08 	vstr	s14, [r4, #32]
 800d402:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
#undef Q
}
 800d406:	bf00      	nop
 800d408:	37fc      	adds	r7, #252	; 0xfc
 800d40a:	46bd      	mov	sp, r7
 800d40c:	bd90      	pop	{r4, r7, pc}

0800d40e <HalfGravity>:
/**
 * @brief Returns the direction of gravity scaled by 0.5.
 * @param ahrs AHRS algorithm structure.
 * @return Direction of gravity scaled by 0.5.
 */
static inline FusionVector HalfGravity(const FusionAhrs *const ahrs) {
 800d40e:	b480      	push	{r7}
 800d410:	b093      	sub	sp, #76	; 0x4c
 800d412:	af00      	add	r7, sp, #0
 800d414:	6178      	str	r0, [r7, #20]
#define Q ahrs->quaternion.element
    switch (ahrs->settings.convention) {
 800d416:	697b      	ldr	r3, [r7, #20]
 800d418:	781b      	ldrb	r3, [r3, #0]
 800d41a:	2b01      	cmp	r3, #1
 800d41c:	dc02      	bgt.n	800d424 <HalfGravity+0x16>
 800d41e:	2b00      	cmp	r3, #0
 800d420:	da03      	bge.n	800d42a <HalfGravity+0x1c>
 800d422:	e094      	b.n	800d54e <HalfGravity+0x140>
 800d424:	2b02      	cmp	r3, #2
 800d426:	d048      	beq.n	800d4ba <HalfGravity+0xac>
 800d428:	e091      	b.n	800d54e <HalfGravity+0x140>
        case FusionConventionNwu:
        case FusionConventionEnu: {
            const FusionVector halfGravity = {.axis = {
                    .x = Q.x * Q.z - Q.w * Q.y,
 800d42a:	697b      	ldr	r3, [r7, #20]
 800d42c:	ed93 7a07 	vldr	s14, [r3, #28]
 800d430:	697b      	ldr	r3, [r7, #20]
 800d432:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800d436:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d43a:	697b      	ldr	r3, [r7, #20]
 800d43c:	edd3 6a06 	vldr	s13, [r3, #24]
 800d440:	697b      	ldr	r3, [r7, #20]
 800d442:	edd3 7a08 	vldr	s15, [r3, #32]
 800d446:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d44a:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfGravity = {.axis = {
 800d44e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                    .y = Q.y * Q.z + Q.w * Q.x,
 800d452:	697b      	ldr	r3, [r7, #20]
 800d454:	ed93 7a08 	vldr	s14, [r3, #32]
 800d458:	697b      	ldr	r3, [r7, #20]
 800d45a:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800d45e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d462:	697b      	ldr	r3, [r7, #20]
 800d464:	edd3 6a06 	vldr	s13, [r3, #24]
 800d468:	697b      	ldr	r3, [r7, #20]
 800d46a:	edd3 7a07 	vldr	s15, [r3, #28]
 800d46e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d472:	ee77 7a27 	vadd.f32	s15, s14, s15
            const FusionVector halfGravity = {.axis = {
 800d476:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
                    .z = Q.w * Q.w - 0.5f + Q.z * Q.z,
 800d47a:	697b      	ldr	r3, [r7, #20]
 800d47c:	ed93 7a06 	vldr	s14, [r3, #24]
 800d480:	697b      	ldr	r3, [r7, #20]
 800d482:	edd3 7a06 	vldr	s15, [r3, #24]
 800d486:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d48a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800d48e:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800d492:	697b      	ldr	r3, [r7, #20]
 800d494:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 800d498:	697b      	ldr	r3, [r7, #20]
 800d49a:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800d49e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d4a2:	ee77 7a27 	vadd.f32	s15, s14, s15
            const FusionVector halfGravity = {.axis = {
 800d4a6:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            }}; // third column of transposed rotation matrix scaled by 0.5
            return halfGravity;
 800d4aa:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800d4ae:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800d4b2:	ca07      	ldmia	r2, {r0, r1, r2}
 800d4b4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800d4b8:	e052      	b.n	800d560 <HalfGravity+0x152>
        }
        case FusionConventionNed: {
            const FusionVector halfGravity = {.axis = {
                    .x = Q.w * Q.y - Q.x * Q.z,
 800d4ba:	697b      	ldr	r3, [r7, #20]
 800d4bc:	ed93 7a06 	vldr	s14, [r3, #24]
 800d4c0:	697b      	ldr	r3, [r7, #20]
 800d4c2:	edd3 7a08 	vldr	s15, [r3, #32]
 800d4c6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d4ca:	697b      	ldr	r3, [r7, #20]
 800d4cc:	edd3 6a07 	vldr	s13, [r3, #28]
 800d4d0:	697b      	ldr	r3, [r7, #20]
 800d4d2:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800d4d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d4da:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfGravity = {.axis = {
 800d4de:	edc7 7a06 	vstr	s15, [r7, #24]
                    .y = -1.0f * (Q.y * Q.z + Q.w * Q.x),
 800d4e2:	697b      	ldr	r3, [r7, #20]
 800d4e4:	ed93 7a08 	vldr	s14, [r3, #32]
 800d4e8:	697b      	ldr	r3, [r7, #20]
 800d4ea:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800d4ee:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d4f2:	697b      	ldr	r3, [r7, #20]
 800d4f4:	edd3 6a06 	vldr	s13, [r3, #24]
 800d4f8:	697b      	ldr	r3, [r7, #20]
 800d4fa:	edd3 7a07 	vldr	s15, [r3, #28]
 800d4fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d502:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d506:	eef1 7a67 	vneg.f32	s15, s15
            const FusionVector halfGravity = {.axis = {
 800d50a:	edc7 7a07 	vstr	s15, [r7, #28]
                    .z = 0.5f - Q.w * Q.w - Q.z * Q.z,
 800d50e:	697b      	ldr	r3, [r7, #20]
 800d510:	ed93 7a06 	vldr	s14, [r3, #24]
 800d514:	697b      	ldr	r3, [r7, #20]
 800d516:	edd3 7a06 	vldr	s15, [r3, #24]
 800d51a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d51e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800d522:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d526:	697b      	ldr	r3, [r7, #20]
 800d528:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 800d52c:	697b      	ldr	r3, [r7, #20]
 800d52e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800d532:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d536:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfGravity = {.axis = {
 800d53a:	edc7 7a08 	vstr	s15, [r7, #32]
            }}; // third column of transposed rotation matrix scaled by -0.5
            return halfGravity;
 800d53e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800d542:	f107 0218 	add.w	r2, r7, #24
 800d546:	ca07      	ldmia	r2, {r0, r1, r2}
 800d548:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800d54c:	e008      	b.n	800d560 <HalfGravity+0x152>
        }
    }
    return FUSION_VECTOR_ZERO; // avoid compiler warning
 800d54e:	f04f 0300 	mov.w	r3, #0
 800d552:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d554:	f04f 0300 	mov.w	r3, #0
 800d558:	643b      	str	r3, [r7, #64]	; 0x40
 800d55a:	f04f 0300 	mov.w	r3, #0
 800d55e:	647b      	str	r3, [r7, #68]	; 0x44
#undef Q
}
 800d560:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d562:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d564:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d566:	ee06 1a90 	vmov	s13, r1
 800d56a:	ee07 2a10 	vmov	s14, r2
 800d56e:	ee07 3a90 	vmov	s15, r3
 800d572:	eeb0 0a66 	vmov.f32	s0, s13
 800d576:	eef0 0a47 	vmov.f32	s1, s14
 800d57a:	eeb0 1a67 	vmov.f32	s2, s15
 800d57e:	374c      	adds	r7, #76	; 0x4c
 800d580:	46bd      	mov	sp, r7
 800d582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d586:	4770      	bx	lr

0800d588 <HalfMagnetic>:
/**
 * @brief Returns the direction of the magnetic field scaled by 0.5.
 * @param ahrs AHRS algorithm structure.
 * @return Direction of the magnetic field scaled by 0.5.
 */
static inline FusionVector HalfMagnetic(const FusionAhrs *const ahrs) {
 800d588:	b480      	push	{r7}
 800d58a:	b097      	sub	sp, #92	; 0x5c
 800d58c:	af00      	add	r7, sp, #0
 800d58e:	6178      	str	r0, [r7, #20]
#define Q ahrs->quaternion.element
    switch (ahrs->settings.convention) {
 800d590:	697b      	ldr	r3, [r7, #20]
 800d592:	781b      	ldrb	r3, [r3, #0]
 800d594:	2b02      	cmp	r3, #2
 800d596:	f000 809a 	beq.w	800d6ce <HalfMagnetic+0x146>
 800d59a:	2b02      	cmp	r3, #2
 800d59c:	f300 80e1 	bgt.w	800d762 <HalfMagnetic+0x1da>
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	d002      	beq.n	800d5aa <HalfMagnetic+0x22>
 800d5a4:	2b01      	cmp	r3, #1
 800d5a6:	d048      	beq.n	800d63a <HalfMagnetic+0xb2>
 800d5a8:	e0db      	b.n	800d762 <HalfMagnetic+0x1da>
        case FusionConventionNwu: {
            const FusionVector halfMagnetic = {.axis = {
                    .x = Q.x * Q.y + Q.w * Q.z,
 800d5aa:	697b      	ldr	r3, [r7, #20]
 800d5ac:	ed93 7a07 	vldr	s14, [r3, #28]
 800d5b0:	697b      	ldr	r3, [r7, #20]
 800d5b2:	edd3 7a08 	vldr	s15, [r3, #32]
 800d5b6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d5ba:	697b      	ldr	r3, [r7, #20]
 800d5bc:	edd3 6a06 	vldr	s13, [r3, #24]
 800d5c0:	697b      	ldr	r3, [r7, #20]
 800d5c2:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800d5c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d5ca:	ee77 7a27 	vadd.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 800d5ce:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
                    .y = Q.w * Q.w - 0.5f + Q.y * Q.y,
 800d5d2:	697b      	ldr	r3, [r7, #20]
 800d5d4:	ed93 7a06 	vldr	s14, [r3, #24]
 800d5d8:	697b      	ldr	r3, [r7, #20]
 800d5da:	edd3 7a06 	vldr	s15, [r3, #24]
 800d5de:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d5e2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800d5e6:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800d5ea:	697b      	ldr	r3, [r7, #20]
 800d5ec:	edd3 6a08 	vldr	s13, [r3, #32]
 800d5f0:	697b      	ldr	r3, [r7, #20]
 800d5f2:	edd3 7a08 	vldr	s15, [r3, #32]
 800d5f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d5fa:	ee77 7a27 	vadd.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 800d5fe:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
                    .z = Q.y * Q.z - Q.w * Q.x,
 800d602:	697b      	ldr	r3, [r7, #20]
 800d604:	ed93 7a08 	vldr	s14, [r3, #32]
 800d608:	697b      	ldr	r3, [r7, #20]
 800d60a:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800d60e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d612:	697b      	ldr	r3, [r7, #20]
 800d614:	edd3 6a06 	vldr	s13, [r3, #24]
 800d618:	697b      	ldr	r3, [r7, #20]
 800d61a:	edd3 7a07 	vldr	s15, [r3, #28]
 800d61e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d622:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 800d626:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
            }}; // second column of transposed rotation matrix scaled by 0.5
            return halfMagnetic;
 800d62a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800d62e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800d632:	ca07      	ldmia	r2, {r0, r1, r2}
 800d634:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800d638:	e09c      	b.n	800d774 <HalfMagnetic+0x1ec>
        }
        case FusionConventionEnu: {
            const FusionVector halfMagnetic = {.axis = {
                    .x = 0.5f - Q.w * Q.w - Q.x * Q.x,
 800d63a:	697b      	ldr	r3, [r7, #20]
 800d63c:	ed93 7a06 	vldr	s14, [r3, #24]
 800d640:	697b      	ldr	r3, [r7, #20]
 800d642:	edd3 7a06 	vldr	s15, [r3, #24]
 800d646:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d64a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800d64e:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d652:	697b      	ldr	r3, [r7, #20]
 800d654:	edd3 6a07 	vldr	s13, [r3, #28]
 800d658:	697b      	ldr	r3, [r7, #20]
 800d65a:	edd3 7a07 	vldr	s15, [r3, #28]
 800d65e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d662:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 800d666:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
                    .y = Q.w * Q.z - Q.x * Q.y,
 800d66a:	697b      	ldr	r3, [r7, #20]
 800d66c:	ed93 7a06 	vldr	s14, [r3, #24]
 800d670:	697b      	ldr	r3, [r7, #20]
 800d672:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800d676:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d67a:	697b      	ldr	r3, [r7, #20]
 800d67c:	edd3 6a07 	vldr	s13, [r3, #28]
 800d680:	697b      	ldr	r3, [r7, #20]
 800d682:	edd3 7a08 	vldr	s15, [r3, #32]
 800d686:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d68a:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 800d68e:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
                    .z = -1.0f * (Q.x * Q.z + Q.w * Q.y),
 800d692:	697b      	ldr	r3, [r7, #20]
 800d694:	ed93 7a07 	vldr	s14, [r3, #28]
 800d698:	697b      	ldr	r3, [r7, #20]
 800d69a:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800d69e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d6a2:	697b      	ldr	r3, [r7, #20]
 800d6a4:	edd3 6a06 	vldr	s13, [r3, #24]
 800d6a8:	697b      	ldr	r3, [r7, #20]
 800d6aa:	edd3 7a08 	vldr	s15, [r3, #32]
 800d6ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d6b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d6b6:	eef1 7a67 	vneg.f32	s15, s15
            const FusionVector halfMagnetic = {.axis = {
 800d6ba:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
            }}; // first column of transposed rotation matrix scaled by -0.5
            return halfMagnetic;
 800d6be:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800d6c2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800d6c6:	ca07      	ldmia	r2, {r0, r1, r2}
 800d6c8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800d6cc:	e052      	b.n	800d774 <HalfMagnetic+0x1ec>
        }
        case FusionConventionNed: {
            const FusionVector halfMagnetic = {.axis = {
                    .x = -1.0f * (Q.x * Q.y + Q.w * Q.z),
 800d6ce:	697b      	ldr	r3, [r7, #20]
 800d6d0:	ed93 7a07 	vldr	s14, [r3, #28]
 800d6d4:	697b      	ldr	r3, [r7, #20]
 800d6d6:	edd3 7a08 	vldr	s15, [r3, #32]
 800d6da:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d6de:	697b      	ldr	r3, [r7, #20]
 800d6e0:	edd3 6a06 	vldr	s13, [r3, #24]
 800d6e4:	697b      	ldr	r3, [r7, #20]
 800d6e6:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800d6ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d6ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d6f2:	eef1 7a67 	vneg.f32	s15, s15
            const FusionVector halfMagnetic = {.axis = {
 800d6f6:	edc7 7a07 	vstr	s15, [r7, #28]
                    .y = 0.5f - Q.w * Q.w - Q.y * Q.y,
 800d6fa:	697b      	ldr	r3, [r7, #20]
 800d6fc:	ed93 7a06 	vldr	s14, [r3, #24]
 800d700:	697b      	ldr	r3, [r7, #20]
 800d702:	edd3 7a06 	vldr	s15, [r3, #24]
 800d706:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d70a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800d70e:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d712:	697b      	ldr	r3, [r7, #20]
 800d714:	edd3 6a08 	vldr	s13, [r3, #32]
 800d718:	697b      	ldr	r3, [r7, #20]
 800d71a:	edd3 7a08 	vldr	s15, [r3, #32]
 800d71e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d722:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 800d726:	edc7 7a08 	vstr	s15, [r7, #32]
                    .z = Q.w * Q.x - Q.y * Q.z,
 800d72a:	697b      	ldr	r3, [r7, #20]
 800d72c:	ed93 7a06 	vldr	s14, [r3, #24]
 800d730:	697b      	ldr	r3, [r7, #20]
 800d732:	edd3 7a07 	vldr	s15, [r3, #28]
 800d736:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d73a:	697b      	ldr	r3, [r7, #20]
 800d73c:	edd3 6a08 	vldr	s13, [r3, #32]
 800d740:	697b      	ldr	r3, [r7, #20]
 800d742:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800d746:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d74a:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 800d74e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            }}; // second column of transposed rotation matrix scaled by -0.5
            return halfMagnetic;
 800d752:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800d756:	f107 021c 	add.w	r2, r7, #28
 800d75a:	ca07      	ldmia	r2, {r0, r1, r2}
 800d75c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800d760:	e008      	b.n	800d774 <HalfMagnetic+0x1ec>
        }
    }
    return FUSION_VECTOR_ZERO; // avoid compiler warning
 800d762:	f04f 0300 	mov.w	r3, #0
 800d766:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d768:	f04f 0300 	mov.w	r3, #0
 800d76c:	653b      	str	r3, [r7, #80]	; 0x50
 800d76e:	f04f 0300 	mov.w	r3, #0
 800d772:	657b      	str	r3, [r7, #84]	; 0x54
#undef Q
}
 800d774:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800d776:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d778:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d77a:	ee06 1a90 	vmov	s13, r1
 800d77e:	ee07 2a10 	vmov	s14, r2
 800d782:	ee07 3a90 	vmov	s15, r3
 800d786:	eeb0 0a66 	vmov.f32	s0, s13
 800d78a:	eef0 0a47 	vmov.f32	s1, s14
 800d78e:	eeb0 1a67 	vmov.f32	s2, s15
 800d792:	375c      	adds	r7, #92	; 0x5c
 800d794:	46bd      	mov	sp, r7
 800d796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d79a:	4770      	bx	lr

0800d79c <Feedback>:
 * @brief Returns the feedback.
 * @param sensor Sensor.
 * @param reference Reference.
 * @return Feedback.
 */
static inline FusionVector Feedback(const FusionVector sensor, const FusionVector reference) {
 800d79c:	b580      	push	{r7, lr}
 800d79e:	b090      	sub	sp, #64	; 0x40
 800d7a0:	af00      	add	r7, sp, #0
 800d7a2:	eeb0 5a40 	vmov.f32	s10, s0
 800d7a6:	eef0 5a60 	vmov.f32	s11, s1
 800d7aa:	eeb0 6a41 	vmov.f32	s12, s2
 800d7ae:	eef0 6a61 	vmov.f32	s13, s3
 800d7b2:	eeb0 7a42 	vmov.f32	s14, s4
 800d7b6:	eef0 7a62 	vmov.f32	s15, s5
 800d7ba:	ed87 5a07 	vstr	s10, [r7, #28]
 800d7be:	edc7 5a08 	vstr	s11, [r7, #32]
 800d7c2:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 800d7c6:	edc7 6a04 	vstr	s13, [r7, #16]
 800d7ca:	ed87 7a05 	vstr	s14, [r7, #20]
 800d7ce:	edc7 7a06 	vstr	s15, [r7, #24]
    if (FusionVectorDotProduct(sensor, reference) < 0.0f) { // if error is >90 degrees
 800d7d2:	ed97 5a04 	vldr	s10, [r7, #16]
 800d7d6:	edd7 5a05 	vldr	s11, [r7, #20]
 800d7da:	ed97 6a06 	vldr	s12, [r7, #24]
 800d7de:	edd7 6a07 	vldr	s13, [r7, #28]
 800d7e2:	ed97 7a08 	vldr	s14, [r7, #32]
 800d7e6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800d7ea:	eef0 1a45 	vmov.f32	s3, s10
 800d7ee:	eeb0 2a65 	vmov.f32	s4, s11
 800d7f2:	eef0 2a46 	vmov.f32	s5, s12
 800d7f6:	eeb0 0a66 	vmov.f32	s0, s13
 800d7fa:	eef0 0a47 	vmov.f32	s1, s14
 800d7fe:	eeb0 1a67 	vmov.f32	s2, s15
 800d802:	f7fe fed1 	bl	800c5a8 <FusionVectorDotProduct>
 800d806:	eef0 7a40 	vmov.f32	s15, s0
 800d80a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d80e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d812:	d540      	bpl.n	800d896 <Feedback+0xfa>
        return FusionVectorNormalise(FusionVectorCrossProduct(sensor, reference));
 800d814:	ed97 5a04 	vldr	s10, [r7, #16]
 800d818:	edd7 5a05 	vldr	s11, [r7, #20]
 800d81c:	ed97 6a06 	vldr	s12, [r7, #24]
 800d820:	edd7 6a07 	vldr	s13, [r7, #28]
 800d824:	ed97 7a08 	vldr	s14, [r7, #32]
 800d828:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800d82c:	eef0 1a45 	vmov.f32	s3, s10
 800d830:	eeb0 2a65 	vmov.f32	s4, s11
 800d834:	eef0 2a46 	vmov.f32	s5, s12
 800d838:	eeb0 0a66 	vmov.f32	s0, s13
 800d83c:	eef0 0a47 	vmov.f32	s1, s14
 800d840:	eeb0 1a67 	vmov.f32	s2, s15
 800d844:	f7fe fe4a 	bl	800c4dc <FusionVectorCrossProduct>
 800d848:	eef0 6a40 	vmov.f32	s13, s0
 800d84c:	eeb0 7a60 	vmov.f32	s14, s1
 800d850:	eef0 7a41 	vmov.f32	s15, s2
 800d854:	edc7 6a0d 	vstr	s13, [r7, #52]	; 0x34
 800d858:	ed87 7a0e 	vstr	s14, [r7, #56]	; 0x38
 800d85c:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
 800d860:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 800d864:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800d868:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800d86c:	eeb0 0a66 	vmov.f32	s0, s13
 800d870:	eef0 0a47 	vmov.f32	s1, s14
 800d874:	eeb0 1a67 	vmov.f32	s2, s15
 800d878:	f7fe ff36 	bl	800c6e8 <FusionVectorNormalise>
 800d87c:	eef0 6a40 	vmov.f32	s13, s0
 800d880:	eeb0 7a60 	vmov.f32	s14, s1
 800d884:	eef0 7a41 	vmov.f32	s15, s2
 800d888:	edc7 6a0a 	vstr	s13, [r7, #40]	; 0x28
 800d88c:	ed87 7a0b 	vstr	s14, [r7, #44]	; 0x2c
 800d890:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 800d894:	e025      	b.n	800d8e2 <Feedback+0x146>
    }
    return FusionVectorCrossProduct(sensor, reference);
 800d896:	ed97 5a04 	vldr	s10, [r7, #16]
 800d89a:	edd7 5a05 	vldr	s11, [r7, #20]
 800d89e:	ed97 6a06 	vldr	s12, [r7, #24]
 800d8a2:	edd7 6a07 	vldr	s13, [r7, #28]
 800d8a6:	ed97 7a08 	vldr	s14, [r7, #32]
 800d8aa:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800d8ae:	eef0 1a45 	vmov.f32	s3, s10
 800d8b2:	eeb0 2a65 	vmov.f32	s4, s11
 800d8b6:	eef0 2a46 	vmov.f32	s5, s12
 800d8ba:	eeb0 0a66 	vmov.f32	s0, s13
 800d8be:	eef0 0a47 	vmov.f32	s1, s14
 800d8c2:	eeb0 1a67 	vmov.f32	s2, s15
 800d8c6:	f7fe fe09 	bl	800c4dc <FusionVectorCrossProduct>
 800d8ca:	eef0 6a40 	vmov.f32	s13, s0
 800d8ce:	eeb0 7a60 	vmov.f32	s14, s1
 800d8d2:	eef0 7a41 	vmov.f32	s15, s2
 800d8d6:	edc7 6a0a 	vstr	s13, [r7, #40]	; 0x28
 800d8da:	ed87 7a0b 	vstr	s14, [r7, #44]	; 0x2c
 800d8de:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
}
 800d8e2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d8e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d8e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8e8:	ee06 1a90 	vmov	s13, r1
 800d8ec:	ee07 2a10 	vmov	s14, r2
 800d8f0:	ee07 3a90 	vmov	s15, r3
 800d8f4:	eeb0 0a66 	vmov.f32	s0, s13
 800d8f8:	eef0 0a47 	vmov.f32	s1, s14
 800d8fc:	eeb0 1a67 	vmov.f32	s2, s15
 800d900:	3740      	adds	r7, #64	; 0x40
 800d902:	46bd      	mov	sp, r7
 800d904:	bd80      	pop	{r7, pc}

0800d906 <Clamp>:
 * @param value Value.
 * @param min Minimum value.
 * @param max Maximum value.
 * @return Value limited to maximum and minimum.
 */
static inline int Clamp(const int value, const int min, const int max) {
 800d906:	b480      	push	{r7}
 800d908:	b085      	sub	sp, #20
 800d90a:	af00      	add	r7, sp, #0
 800d90c:	60f8      	str	r0, [r7, #12]
 800d90e:	60b9      	str	r1, [r7, #8]
 800d910:	607a      	str	r2, [r7, #4]
    if (value < min) {
 800d912:	68fa      	ldr	r2, [r7, #12]
 800d914:	68bb      	ldr	r3, [r7, #8]
 800d916:	429a      	cmp	r2, r3
 800d918:	da01      	bge.n	800d91e <Clamp+0x18>
        return min;
 800d91a:	68bb      	ldr	r3, [r7, #8]
 800d91c:	e006      	b.n	800d92c <Clamp+0x26>
    }
    if (value > max) {
 800d91e:	68fa      	ldr	r2, [r7, #12]
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	429a      	cmp	r2, r3
 800d924:	dd01      	ble.n	800d92a <Clamp+0x24>
        return max;
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	e000      	b.n	800d92c <Clamp+0x26>
    }
    return value;
 800d92a:	68fb      	ldr	r3, [r7, #12]
}
 800d92c:	4618      	mov	r0, r3
 800d92e:	3714      	adds	r7, #20
 800d930:	46bd      	mov	sp, r7
 800d932:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d936:	4770      	bx	lr

0800d938 <FusionAhrsGetQuaternion>:
/**
 * @brief Returns the quaternion describing the sensor relative to the Earth.
 * @param ahrs AHRS algorithm structure.
 * @return Quaternion describing the sensor relative to the Earth.
 */
FusionQuaternion FusionAhrsGetQuaternion(const FusionAhrs *const ahrs) {
 800d938:	b490      	push	{r4, r7}
 800d93a:	b08a      	sub	sp, #40	; 0x28
 800d93c:	af00      	add	r7, sp, #0
 800d93e:	6178      	str	r0, [r7, #20]
    return ahrs->quaternion;
 800d940:	697b      	ldr	r3, [r7, #20]
 800d942:	f107 0418 	add.w	r4, r7, #24
 800d946:	3318      	adds	r3, #24
 800d948:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d94a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800d94e:	69b8      	ldr	r0, [r7, #24]
 800d950:	69f9      	ldr	r1, [r7, #28]
 800d952:	6a3a      	ldr	r2, [r7, #32]
 800d954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d956:	ee06 0a10 	vmov	s12, r0
 800d95a:	ee06 1a90 	vmov	s13, r1
 800d95e:	ee07 2a10 	vmov	s14, r2
 800d962:	ee07 3a90 	vmov	s15, r3
}
 800d966:	eeb0 0a46 	vmov.f32	s0, s12
 800d96a:	eef0 0a66 	vmov.f32	s1, s13
 800d96e:	eeb0 1a47 	vmov.f32	s2, s14
 800d972:	eef0 1a67 	vmov.f32	s3, s15
 800d976:	3728      	adds	r7, #40	; 0x28
 800d978:	46bd      	mov	sp, r7
 800d97a:	bc90      	pop	{r4, r7}
 800d97c:	4770      	bx	lr

0800d97e <bmm150_init>:
 *  @brief This API is the entry point, Call this API before using other APIs.
 *  This API reads the chip-id of the sensor which is the first step to
 *  verify the sensor and updates the trim parameters of the sensor.
 */
int8_t bmm150_init(struct bmm150_dev *dev)
{
 800d97e:	b580      	push	{r7, lr}
 800d980:	b084      	sub	sp, #16
 800d982:	af00      	add	r7, sp, #0
 800d984:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t chip_id = 0;
 800d986:	2300      	movs	r3, #0
 800d988:	73bb      	strb	r3, [r7, #14]

    /* Power up the sensor from suspend to sleep mode */
    rslt = set_power_control_bit(BMM150_POWER_CNTRL_ENABLE, dev);
 800d98a:	6879      	ldr	r1, [r7, #4]
 800d98c:	2001      	movs	r0, #1
 800d98e:	f000 fa77 	bl	800de80 <set_power_control_bit>
 800d992:	4603      	mov	r3, r0
 800d994:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMM150_OK)
 800d996:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	d11f      	bne.n	800d9de <bmm150_init+0x60>
    {
        /* Start-up time delay of 3ms */
        dev->delay_us(BMM150_START_UP_TIME, dev->intf_ptr);
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	695b      	ldr	r3, [r3, #20]
 800d9a2:	687a      	ldr	r2, [r7, #4]
 800d9a4:	6852      	ldr	r2, [r2, #4]
 800d9a6:	4611      	mov	r1, r2
 800d9a8:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800d9ac:	4798      	blx	r3

        /* Chip ID of the sensor is read */
        rslt = bmm150_get_regs(BMM150_REG_CHIP_ID, &chip_id, 1, dev);
 800d9ae:	f107 010e 	add.w	r1, r7, #14
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	2201      	movs	r2, #1
 800d9b6:	2040      	movs	r0, #64	; 0x40
 800d9b8:	f000 f843 	bl	800da42 <bmm150_get_regs>
 800d9bc:	4603      	mov	r3, r0
 800d9be:	73fb      	strb	r3, [r7, #15]

        /* Proceed if everything is fine until now */
        if (rslt == BMM150_OK)
 800d9c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d10a      	bne.n	800d9de <bmm150_init+0x60>
        {
            /* Check for chip id validity */
            if (chip_id == BMM150_CHIP_ID)
 800d9c8:	7bbb      	ldrb	r3, [r7, #14]
 800d9ca:	2b32      	cmp	r3, #50	; 0x32
 800d9cc:	d107      	bne.n	800d9de <bmm150_init+0x60>
            {
                dev->chip_id = chip_id;
 800d9ce:	7bba      	ldrb	r2, [r7, #14]
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	701a      	strb	r2, [r3, #0]

                /* Function to update trim values */
                rslt = read_trim_registers(dev);
 800d9d4:	6878      	ldr	r0, [r7, #4]
 800d9d6:	f000 fa8d 	bl	800def4 <read_trim_registers>
 800d9da:	4603      	mov	r3, r0
 800d9dc:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 800d9de:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d9e2:	4618      	mov	r0, r3
 800d9e4:	3710      	adds	r7, #16
 800d9e6:	46bd      	mov	sp, r7
 800d9e8:	bd80      	pop	{r7, pc}

0800d9ea <bmm150_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of the sensor.
 */
int8_t bmm150_set_regs(uint8_t reg_addr, const uint8_t *reg_data, uint32_t len, struct bmm150_dev *dev)
{
 800d9ea:	b590      	push	{r4, r7, lr}
 800d9ec:	b087      	sub	sp, #28
 800d9ee:	af00      	add	r7, sp, #0
 800d9f0:	60b9      	str	r1, [r7, #8]
 800d9f2:	607a      	str	r2, [r7, #4]
 800d9f4:	603b      	str	r3, [r7, #0]
 800d9f6:	4603      	mov	r3, r0
 800d9f8:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 800d9fa:	6838      	ldr	r0, [r7, #0]
 800d9fc:	f000 fa1c 	bl	800de38 <null_ptr_check>
 800da00:	4603      	mov	r3, r0
 800da02:	75fb      	strb	r3, [r7, #23]

    /* Proceed if null check is fine */
    if ((rslt == BMM150_OK) && (reg_data != NULL) && (len != 0))
 800da04:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800da08:	2b00      	cmp	r3, #0
 800da0a:	d112      	bne.n	800da32 <bmm150_set_regs+0x48>
 800da0c:	68bb      	ldr	r3, [r7, #8]
 800da0e:	2b00      	cmp	r3, #0
 800da10:	d00f      	beq.n	800da32 <bmm150_set_regs+0x48>
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	2b00      	cmp	r3, #0
 800da16:	d00c      	beq.n	800da32 <bmm150_set_regs+0x48>
        /* Write the data to the reg_addr */

        /* SPI write requires to set The MSB of reg_addr as 0
         * but in default the MSB is always 0
         */
        dev->intf_rslt = dev->write(reg_addr, reg_data, len, dev->intf_ptr);
 800da18:	683b      	ldr	r3, [r7, #0]
 800da1a:	691c      	ldr	r4, [r3, #16]
 800da1c:	683b      	ldr	r3, [r7, #0]
 800da1e:	685b      	ldr	r3, [r3, #4]
 800da20:	7bf8      	ldrb	r0, [r7, #15]
 800da22:	687a      	ldr	r2, [r7, #4]
 800da24:	68b9      	ldr	r1, [r7, #8]
 800da26:	47a0      	blx	r4
 800da28:	4603      	mov	r3, r0
 800da2a:	461a      	mov	r2, r3
 800da2c:	683b      	ldr	r3, [r7, #0]
 800da2e:	721a      	strb	r2, [r3, #8]
 800da30:	e001      	b.n	800da36 <bmm150_set_regs+0x4c>
    }
    else
    {
        rslt = BMM150_E_NULL_PTR;
 800da32:	23ff      	movs	r3, #255	; 0xff
 800da34:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 800da36:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800da3a:	4618      	mov	r0, r3
 800da3c:	371c      	adds	r7, #28
 800da3e:	46bd      	mov	sp, r7
 800da40:	bd90      	pop	{r4, r7, pc}

0800da42 <bmm150_get_regs>:

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bmm150_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, struct bmm150_dev *dev)
{
 800da42:	b590      	push	{r4, r7, lr}
 800da44:	b087      	sub	sp, #28
 800da46:	af00      	add	r7, sp, #0
 800da48:	60b9      	str	r1, [r7, #8]
 800da4a:	607a      	str	r2, [r7, #4]
 800da4c:	603b      	str	r3, [r7, #0]
 800da4e:	4603      	mov	r3, r0
 800da50:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 800da52:	6838      	ldr	r0, [r7, #0]
 800da54:	f000 f9f0 	bl	800de38 <null_ptr_check>
 800da58:	4603      	mov	r3, r0
 800da5a:	75fb      	strb	r3, [r7, #23]

    /* Proceed if null check is fine */
    if ((rslt == BMM150_OK) && (reg_data != NULL))
 800da5c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800da60:	2b00      	cmp	r3, #0
 800da62:	d117      	bne.n	800da94 <bmm150_get_regs+0x52>
 800da64:	68bb      	ldr	r3, [r7, #8]
 800da66:	2b00      	cmp	r3, #0
 800da68:	d014      	beq.n	800da94 <bmm150_get_regs+0x52>
    {
        if (dev->intf != BMM150_I2C_INTF)
 800da6a:	683b      	ldr	r3, [r7, #0]
 800da6c:	785b      	ldrb	r3, [r3, #1]
 800da6e:	2b01      	cmp	r3, #1
 800da70:	d003      	beq.n	800da7a <bmm150_get_regs+0x38>
        {
            /* If interface selected is SPI */
            reg_addr = reg_addr | 0x80;
 800da72:	7bfb      	ldrb	r3, [r7, #15]
 800da74:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800da78:	73fb      	strb	r3, [r7, #15]
        }

        /* Read the data from the reg_addr */
        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 800da7a:	683b      	ldr	r3, [r7, #0]
 800da7c:	68dc      	ldr	r4, [r3, #12]
 800da7e:	683b      	ldr	r3, [r7, #0]
 800da80:	685b      	ldr	r3, [r3, #4]
 800da82:	7bf8      	ldrb	r0, [r7, #15]
 800da84:	687a      	ldr	r2, [r7, #4]
 800da86:	68b9      	ldr	r1, [r7, #8]
 800da88:	47a0      	blx	r4
 800da8a:	4603      	mov	r3, r0
 800da8c:	461a      	mov	r2, r3
 800da8e:	683b      	ldr	r3, [r7, #0]
 800da90:	721a      	strb	r2, [r3, #8]
 800da92:	e001      	b.n	800da98 <bmm150_get_regs+0x56>
    }
    else
    {
        rslt = BMM150_E_NULL_PTR;
 800da94:	23ff      	movs	r3, #255	; 0xff
 800da96:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 800da98:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800da9c:	4618      	mov	r0, r3
 800da9e:	371c      	adds	r7, #28
 800daa0:	46bd      	mov	sp, r7
 800daa2:	bd90      	pop	{r4, r7, pc}

0800daa4 <bmm150_set_op_mode>:

/*!
 * @brief This API is used to set the power mode of the sensor.
 */
int8_t bmm150_set_op_mode(const struct bmm150_settings *settings, struct bmm150_dev *dev)
{
 800daa4:	b580      	push	{r7, lr}
 800daa6:	b084      	sub	sp, #16
 800daa8:	af00      	add	r7, sp, #0
 800daaa:	6078      	str	r0, [r7, #4]
 800daac:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t pwr_mode;

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 800daae:	6838      	ldr	r0, [r7, #0]
 800dab0:	f000 f9c2 	bl	800de38 <null_ptr_check>
 800dab4:	4603      	mov	r3, r0
 800dab6:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BMM150_OK)
 800dab8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d150      	bne.n	800db62 <bmm150_set_op_mode+0xbe>
    {
        pwr_mode = settings->pwr_mode;
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	785b      	ldrb	r3, [r3, #1]
 800dac4:	73bb      	strb	r3, [r7, #14]

        /* Select the power mode to set */
        switch (pwr_mode)
 800dac6:	7bbb      	ldrb	r3, [r7, #14]
 800dac8:	2b04      	cmp	r3, #4
 800daca:	d847      	bhi.n	800db5c <bmm150_set_op_mode+0xb8>
 800dacc:	a201      	add	r2, pc, #4	; (adr r2, 800dad4 <bmm150_set_op_mode+0x30>)
 800dace:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dad2:	bf00      	nop
 800dad4:	0800dae9 	.word	0x0800dae9
 800dad8:	0800db0b 	.word	0x0800db0b
 800dadc:	0800db5d 	.word	0x0800db5d
 800dae0:	0800db2d 	.word	0x0800db2d
 800dae4:	0800db4f 	.word	0x0800db4f
            case BMM150_POWERMODE_NORMAL:

                /* If the sensor is in suspend mode
                 * put the device to sleep mode
                 */
                rslt = suspend_to_sleep_mode(dev);
 800dae8:	6838      	ldr	r0, [r7, #0]
 800daea:	f000 fac7 	bl	800e07c <suspend_to_sleep_mode>
 800daee:	4603      	mov	r3, r0
 800daf0:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMM150_OK)
 800daf2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	d135      	bne.n	800db66 <bmm150_set_op_mode+0xc2>
                {
                    /* write the op mode */
                    rslt = write_op_mode(pwr_mode, dev);
 800dafa:	7bbb      	ldrb	r3, [r7, #14]
 800dafc:	6839      	ldr	r1, [r7, #0]
 800dafe:	4618      	mov	r0, r3
 800db00:	f000 fa8b 	bl	800e01a <write_op_mode>
 800db04:	4603      	mov	r3, r0
 800db06:	73fb      	strb	r3, [r7, #15]
                }

                break;
 800db08:	e02d      	b.n	800db66 <bmm150_set_op_mode+0xc2>
            case BMM150_POWERMODE_FORCED:

                /* If the sensor is in suspend mode
                 * put the device to sleep mode
                 */
                rslt = suspend_to_sleep_mode(dev);
 800db0a:	6838      	ldr	r0, [r7, #0]
 800db0c:	f000 fab6 	bl	800e07c <suspend_to_sleep_mode>
 800db10:	4603      	mov	r3, r0
 800db12:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMM150_OK)
 800db14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800db18:	2b00      	cmp	r3, #0
 800db1a:	d126      	bne.n	800db6a <bmm150_set_op_mode+0xc6>
                {
                    /* write the op mode */
                    rslt = write_op_mode(pwr_mode, dev);
 800db1c:	7bbb      	ldrb	r3, [r7, #14]
 800db1e:	6839      	ldr	r1, [r7, #0]
 800db20:	4618      	mov	r0, r3
 800db22:	f000 fa7a 	bl	800e01a <write_op_mode>
 800db26:	4603      	mov	r3, r0
 800db28:	73fb      	strb	r3, [r7, #15]
                }

                break;
 800db2a:	e01e      	b.n	800db6a <bmm150_set_op_mode+0xc6>
            case BMM150_POWERMODE_SLEEP:

                /* If the sensor is in suspend mode
                 * put the device to sleep mode
                 */
                rslt = suspend_to_sleep_mode(dev);
 800db2c:	6838      	ldr	r0, [r7, #0]
 800db2e:	f000 faa5 	bl	800e07c <suspend_to_sleep_mode>
 800db32:	4603      	mov	r3, r0
 800db34:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMM150_OK)
 800db36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	d117      	bne.n	800db6e <bmm150_set_op_mode+0xca>
                {
                    /* write the op mode */
                    rslt = write_op_mode(pwr_mode, dev);
 800db3e:	7bbb      	ldrb	r3, [r7, #14]
 800db40:	6839      	ldr	r1, [r7, #0]
 800db42:	4618      	mov	r0, r3
 800db44:	f000 fa69 	bl	800e01a <write_op_mode>
 800db48:	4603      	mov	r3, r0
 800db4a:	73fb      	strb	r3, [r7, #15]
                }

                break;
 800db4c:	e00f      	b.n	800db6e <bmm150_set_op_mode+0xca>
            case BMM150_POWERMODE_SUSPEND:

                /* Set the power control bit to zero */
                rslt = set_power_control_bit(BMM150_POWER_CNTRL_DISABLE, dev);
 800db4e:	6839      	ldr	r1, [r7, #0]
 800db50:	2000      	movs	r0, #0
 800db52:	f000 f995 	bl	800de80 <set_power_control_bit>
 800db56:	4603      	mov	r3, r0
 800db58:	73fb      	strb	r3, [r7, #15]
                break;
 800db5a:	e009      	b.n	800db70 <bmm150_set_op_mode+0xcc>
            default:
                rslt = BMM150_E_INVALID_CONFIG;
 800db5c:	23fd      	movs	r3, #253	; 0xfd
 800db5e:	73fb      	strb	r3, [r7, #15]
                break;
 800db60:	e006      	b.n	800db70 <bmm150_set_op_mode+0xcc>
        }
    }
 800db62:	bf00      	nop
 800db64:	e004      	b.n	800db70 <bmm150_set_op_mode+0xcc>
                break;
 800db66:	bf00      	nop
 800db68:	e002      	b.n	800db70 <bmm150_set_op_mode+0xcc>
                break;
 800db6a:	bf00      	nop
 800db6c:	e000      	b.n	800db70 <bmm150_set_op_mode+0xcc>
                break;
 800db6e:	bf00      	nop

    return rslt;
 800db70:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800db74:	4618      	mov	r0, r3
 800db76:	3710      	adds	r7, #16
 800db78:	46bd      	mov	sp, r7
 800db7a:	bd80      	pop	{r7, pc}

0800db7c <bmm150_set_presetmode>:

/*!
 * @brief This API is used to set the preset mode of the sensor.
 */
int8_t bmm150_set_presetmode(struct bmm150_settings *settings, struct bmm150_dev *dev)
{
 800db7c:	b580      	push	{r7, lr}
 800db7e:	b084      	sub	sp, #16
 800db80:	af00      	add	r7, sp, #0
 800db82:	6078      	str	r0, [r7, #4]
 800db84:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t preset_mode;

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 800db86:	6838      	ldr	r0, [r7, #0]
 800db88:	f000 f956 	bl	800de38 <null_ptr_check>
 800db8c:	4603      	mov	r3, r0
 800db8e:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BMM150_OK)
 800db90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800db94:	2b00      	cmp	r3, #0
 800db96:	d166      	bne.n	800dc66 <bmm150_set_presetmode+0xea>
    {
        preset_mode = settings->preset_mode;
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	795b      	ldrb	r3, [r3, #5]
 800db9c:	73bb      	strb	r3, [r7, #14]

        switch (preset_mode)
 800db9e:	7bbb      	ldrb	r3, [r7, #14]
 800dba0:	3b01      	subs	r3, #1
 800dba2:	2b04      	cmp	r3, #4
 800dba4:	d85c      	bhi.n	800dc60 <bmm150_set_presetmode+0xe4>
 800dba6:	a201      	add	r2, pc, #4	; (adr r2, 800dbac <bmm150_set_presetmode+0x30>)
 800dba8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dbac:	0800dbc1 	.word	0x0800dbc1
 800dbb0:	0800dbe1 	.word	0x0800dbe1
 800dbb4:	0800dc01 	.word	0x0800dc01
 800dbb8:	0800dc21 	.word	0x0800dc21
 800dbbc:	0800dc41 	.word	0x0800dc41
            case BMM150_PRESETMODE_LOWPOWER:

                /* Set the data rate x,y,z repetition
                 * for Low Power mode
                 */
                settings->data_rate = BMM150_DATA_RATE_10HZ;
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	2200      	movs	r2, #0
 800dbc4:	709a      	strb	r2, [r3, #2]
                settings->xy_rep = BMM150_REPXY_LOWPOWER;
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	2201      	movs	r2, #1
 800dbca:	70da      	strb	r2, [r3, #3]
                settings->z_rep = BMM150_REPZ_LOWPOWER;
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	2201      	movs	r2, #1
 800dbd0:	711a      	strb	r2, [r3, #4]
                rslt = set_odr_xyz_rep(settings, dev);
 800dbd2:	6839      	ldr	r1, [r7, #0]
 800dbd4:	6878      	ldr	r0, [r7, #4]
 800dbd6:	f000 fad6 	bl	800e186 <set_odr_xyz_rep>
 800dbda:	4603      	mov	r3, r0
 800dbdc:	73fb      	strb	r3, [r7, #15]
                break;
 800dbde:	e043      	b.n	800dc68 <bmm150_set_presetmode+0xec>
            case BMM150_PRESETMODE_REGULAR:

                /* Set the data rate x,y,z repetition
                 * for Regular mode
                 */
                settings->data_rate = BMM150_DATA_RATE_10HZ;
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	2200      	movs	r2, #0
 800dbe4:	709a      	strb	r2, [r3, #2]
                settings->xy_rep = BMM150_REPXY_REGULAR;
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	2204      	movs	r2, #4
 800dbea:	70da      	strb	r2, [r3, #3]
                settings->z_rep = BMM150_REPZ_REGULAR;
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	2207      	movs	r2, #7
 800dbf0:	711a      	strb	r2, [r3, #4]
                rslt = set_odr_xyz_rep(settings, dev);
 800dbf2:	6839      	ldr	r1, [r7, #0]
 800dbf4:	6878      	ldr	r0, [r7, #4]
 800dbf6:	f000 fac6 	bl	800e186 <set_odr_xyz_rep>
 800dbfa:	4603      	mov	r3, r0
 800dbfc:	73fb      	strb	r3, [r7, #15]
                break;
 800dbfe:	e033      	b.n	800dc68 <bmm150_set_presetmode+0xec>
            case BMM150_PRESETMODE_HIGHACCURACY:

                /* Set the data rate x,y,z repetition
                 * for High Accuracy mode *
                 */
                settings->data_rate = BMM150_DATA_RATE_20HZ;
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	2205      	movs	r2, #5
 800dc04:	709a      	strb	r2, [r3, #2]
                settings->xy_rep = BMM150_REPXY_HIGHACCURACY;
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	2217      	movs	r2, #23
 800dc0a:	70da      	strb	r2, [r3, #3]
                settings->z_rep = BMM150_REPZ_HIGHACCURACY;
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	2229      	movs	r2, #41	; 0x29
 800dc10:	711a      	strb	r2, [r3, #4]
                rslt = set_odr_xyz_rep(settings, dev);
 800dc12:	6839      	ldr	r1, [r7, #0]
 800dc14:	6878      	ldr	r0, [r7, #4]
 800dc16:	f000 fab6 	bl	800e186 <set_odr_xyz_rep>
 800dc1a:	4603      	mov	r3, r0
 800dc1c:	73fb      	strb	r3, [r7, #15]
                break;
 800dc1e:	e023      	b.n	800dc68 <bmm150_set_presetmode+0xec>
            case BMM150_PRESETMODE_ENHANCED:

                /* Set the data rate x,y,z repetition
                 * for Enhanced Accuracy mode
                 */
                settings->data_rate = BMM150_DATA_RATE_10HZ;
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	2200      	movs	r2, #0
 800dc24:	709a      	strb	r2, [r3, #2]
                settings->xy_rep = BMM150_REPXY_ENHANCED;
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	2207      	movs	r2, #7
 800dc2a:	70da      	strb	r2, [r3, #3]
                settings->z_rep = BMM150_REPZ_ENHANCED;
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	220d      	movs	r2, #13
 800dc30:	711a      	strb	r2, [r3, #4]
                rslt = set_odr_xyz_rep(settings, dev);
 800dc32:	6839      	ldr	r1, [r7, #0]
 800dc34:	6878      	ldr	r0, [r7, #4]
 800dc36:	f000 faa6 	bl	800e186 <set_odr_xyz_rep>
 800dc3a:	4603      	mov	r3, r0
 800dc3c:	73fb      	strb	r3, [r7, #15]
                break;
 800dc3e:	e013      	b.n	800dc68 <bmm150_set_presetmode+0xec>
            case BMM150_PRESETMODE_FORCED200:

				/* Set the data rate x,y,z repetition
				 * for Enhanced Accuracy mode
				 */
				settings->data_rate = BMM150_DATA_RATE_30HZ;
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	2207      	movs	r2, #7
 800dc44:	709a      	strb	r2, [r3, #2]
				settings->xy_rep = BMM150_REPXY_FORCED200;
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	2202      	movs	r2, #2
 800dc4a:	70da      	strb	r2, [r3, #3]
				settings->z_rep = BMM150_REPZ_FORCED200;
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	2202      	movs	r2, #2
 800dc50:	711a      	strb	r2, [r3, #4]
				rslt = set_odr_xyz_rep(settings, dev);
 800dc52:	6839      	ldr	r1, [r7, #0]
 800dc54:	6878      	ldr	r0, [r7, #4]
 800dc56:	f000 fa96 	bl	800e186 <set_odr_xyz_rep>
 800dc5a:	4603      	mov	r3, r0
 800dc5c:	73fb      	strb	r3, [r7, #15]
				break;
 800dc5e:	e003      	b.n	800dc68 <bmm150_set_presetmode+0xec>
            default:
                rslt = BMM150_E_INVALID_CONFIG;
 800dc60:	23fd      	movs	r3, #253	; 0xfd
 800dc62:	73fb      	strb	r3, [r7, #15]
                break;
 800dc64:	e000      	b.n	800dc68 <bmm150_set_presetmode+0xec>
        }
    }
 800dc66:	bf00      	nop

    return rslt;
 800dc68:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800dc6c:	4618      	mov	r0, r3
 800dc6e:	3710      	adds	r7, #16
 800dc70:	46bd      	mov	sp, r7
 800dc72:	bd80      	pop	{r7, pc}

0800dc74 <bmm150_set_sensor_settings>:
 * and the dev structure configuration
 */
int8_t bmm150_set_sensor_settings(uint16_t desired_settings,
                                  const struct bmm150_settings *settings,
                                  struct bmm150_dev *dev)
{
 800dc74:	b580      	push	{r7, lr}
 800dc76:	b086      	sub	sp, #24
 800dc78:	af00      	add	r7, sp, #0
 800dc7a:	4603      	mov	r3, r0
 800dc7c:	60b9      	str	r1, [r7, #8]
 800dc7e:	607a      	str	r2, [r7, #4]
 800dc80:	81fb      	strh	r3, [r7, #14]
    int8_t rslt;

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 800dc82:	6878      	ldr	r0, [r7, #4]
 800dc84:	f000 f8d8 	bl	800de38 <null_ptr_check>
 800dc88:	4603      	mov	r3, r0
 800dc8a:	75fb      	strb	r3, [r7, #23]

    /* Proceed if null check is fine */
    if (rslt == BMM150_OK)
 800dc8c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	d14e      	bne.n	800dd32 <bmm150_set_sensor_settings+0xbe>
    {
        if (are_settings_changed(MODE_SETTING_SEL, desired_settings))
 800dc94:	89fb      	ldrh	r3, [r7, #14]
 800dc96:	4619      	mov	r1, r3
 800dc98:	200f      	movs	r0, #15
 800dc9a:	f000 faca 	bl	800e232 <are_settings_changed>
 800dc9e:	4603      	mov	r3, r0
 800dca0:	2b00      	cmp	r3, #0
 800dca2:	d007      	beq.n	800dcb4 <bmm150_set_sensor_settings+0x40>
        {
            /* ODR, Control measurement, XY,Z repetition values */
            rslt = mode_settings(desired_settings, settings, dev);
 800dca4:	89fb      	ldrh	r3, [r7, #14]
 800dca6:	687a      	ldr	r2, [r7, #4]
 800dca8:	68b9      	ldr	r1, [r7, #8]
 800dcaa:	4618      	mov	r0, r3
 800dcac:	f000 fadb 	bl	800e266 <mode_settings>
 800dcb0:	4603      	mov	r3, r0
 800dcb2:	75fb      	strb	r3, [r7, #23]
        }

        if ((!rslt) && are_settings_changed(INTERRUPT_PIN_SETTING_SEL, desired_settings))
 800dcb4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d110      	bne.n	800dcde <bmm150_set_sensor_settings+0x6a>
 800dcbc:	89fb      	ldrh	r3, [r7, #14]
 800dcbe:	4619      	mov	r1, r3
 800dcc0:	f44f 70f8 	mov.w	r0, #496	; 0x1f0
 800dcc4:	f000 fab5 	bl	800e232 <are_settings_changed>
 800dcc8:	4603      	mov	r3, r0
 800dcca:	2b00      	cmp	r3, #0
 800dccc:	d007      	beq.n	800dcde <bmm150_set_sensor_settings+0x6a>
        {
            /* Interrupt pin settings */
            rslt = interrupt_pin_settings(desired_settings, settings, dev);
 800dcce:	89fb      	ldrh	r3, [r7, #14]
 800dcd0:	687a      	ldr	r2, [r7, #4]
 800dcd2:	68b9      	ldr	r1, [r7, #8]
 800dcd4:	4618      	mov	r0, r3
 800dcd6:	f000 fb01 	bl	800e2dc <interrupt_pin_settings>
 800dcda:	4603      	mov	r3, r0
 800dcdc:	75fb      	strb	r3, [r7, #23]
        }

        if ((!rslt) && are_settings_changed(INTERRUPT_CONFIG_SEL, desired_settings))
 800dcde:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800dce2:	2b00      	cmp	r3, #0
 800dce4:	d110      	bne.n	800dd08 <bmm150_set_sensor_settings+0x94>
 800dce6:	89fb      	ldrh	r3, [r7, #14]
 800dce8:	4619      	mov	r1, r3
 800dcea:	f44f 50f0 	mov.w	r0, #7680	; 0x1e00
 800dcee:	f000 faa0 	bl	800e232 <are_settings_changed>
 800dcf2:	4603      	mov	r3, r0
 800dcf4:	2b00      	cmp	r3, #0
 800dcf6:	d007      	beq.n	800dd08 <bmm150_set_sensor_settings+0x94>
        {
            /* Interrupt configuration settings */
            rslt = interrupt_config(desired_settings, settings, dev);
 800dcf8:	89fb      	ldrh	r3, [r7, #14]
 800dcfa:	687a      	ldr	r2, [r7, #4]
 800dcfc:	68b9      	ldr	r1, [r7, #8]
 800dcfe:	4618      	mov	r0, r3
 800dd00:	f000 fb7a 	bl	800e3f8 <interrupt_config>
 800dd04:	4603      	mov	r3, r0
 800dd06:	75fb      	strb	r3, [r7, #23]
        }

        if ((!rslt) && are_settings_changed(INTERRUPT_THRESHOLD_CONFIG_SEL, desired_settings))
 800dd08:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	d110      	bne.n	800dd32 <bmm150_set_sensor_settings+0xbe>
 800dd10:	89fb      	ldrh	r3, [r7, #14]
 800dd12:	4619      	mov	r1, r3
 800dd14:	f44f 40c0 	mov.w	r0, #24576	; 0x6000
 800dd18:	f000 fa8b 	bl	800e232 <are_settings_changed>
 800dd1c:	4603      	mov	r3, r0
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	d007      	beq.n	800dd32 <bmm150_set_sensor_settings+0xbe>
        {
            /* Interrupt threshold settings */
            rslt = interrupt_threshold_settings(desired_settings, settings, dev);
 800dd22:	89fb      	ldrh	r3, [r7, #14]
 800dd24:	687a      	ldr	r2, [r7, #4]
 800dd26:	68b9      	ldr	r1, [r7, #8]
 800dd28:	4618      	mov	r0, r3
 800dd2a:	f000 fbdf 	bl	800e4ec <interrupt_threshold_settings>
 800dd2e:	4603      	mov	r3, r0
 800dd30:	75fb      	strb	r3, [r7, #23]
        }
    }

    return rslt;
 800dd32:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800dd36:	4618      	mov	r0, r3
 800dd38:	3718      	adds	r7, #24
 800dd3a:	46bd      	mov	sp, r7
 800dd3c:	bd80      	pop	{r7, pc}

0800dd3e <bmm150_read_mag_data>:
 * @brief This API is used to read the magnetometer data from registers
 * 0x42 to 0x49 and update the dev structure with the
 * compensated mag data in micro-tesla.
 */
int8_t bmm150_read_mag_data(struct bmm150_mag_data *mag_data, struct bmm150_dev *dev)
{
 800dd3e:	b580      	push	{r7, lr}
 800dd40:	b088      	sub	sp, #32
 800dd42:	af00      	add	r7, sp, #0
 800dd44:	6078      	str	r0, [r7, #4]
 800dd46:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    int16_t msb_data;
    uint8_t reg_data[BMM150_LEN_XYZR_DATA] = { 0 };
 800dd48:	2300      	movs	r3, #0
 800dd4a:	617b      	str	r3, [r7, #20]
 800dd4c:	2300      	movs	r3, #0
 800dd4e:	61bb      	str	r3, [r7, #24]
    struct bmm150_raw_mag_data raw_mag_data;

    /* Read the mag data registers */
    rslt = bmm150_get_regs(BMM150_REG_DATA_X_LSB, reg_data, BMM150_LEN_XYZR_DATA, dev);
 800dd50:	f107 0114 	add.w	r1, r7, #20
 800dd54:	683b      	ldr	r3, [r7, #0]
 800dd56:	2208      	movs	r2, #8
 800dd58:	2042      	movs	r0, #66	; 0x42
 800dd5a:	f7ff fe72 	bl	800da42 <bmm150_get_regs>
 800dd5e:	4603      	mov	r3, r0
 800dd60:	77fb      	strb	r3, [r7, #31]

    if (rslt == BMM150_OK)
 800dd62:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	d160      	bne.n	800de2c <bmm150_read_mag_data+0xee>
    {
        /* Mag X axis data */
        reg_data[0] = BMM150_GET_BITS(reg_data[0], BMM150_DATA_X);
 800dd6a:	7d3b      	ldrb	r3, [r7, #20]
 800dd6c:	08db      	lsrs	r3, r3, #3
 800dd6e:	b2db      	uxtb	r3, r3
 800dd70:	753b      	strb	r3, [r7, #20]

        /* Shift the MSB data to left by 5 bits */
        /* Multiply by 32 to get the shift left by 5 value */
        msb_data = ((int16_t)((int8_t)reg_data[1])) * 32;
 800dd72:	7d7b      	ldrb	r3, [r7, #21]
 800dd74:	b25b      	sxtb	r3, r3
 800dd76:	b29b      	uxth	r3, r3
 800dd78:	015b      	lsls	r3, r3, #5
 800dd7a:	b29b      	uxth	r3, r3
 800dd7c:	83bb      	strh	r3, [r7, #28]

        /* Raw mag X axis data */
        raw_mag_data.raw_datax = (int16_t)(msb_data | reg_data[0]);
 800dd7e:	7d3b      	ldrb	r3, [r7, #20]
 800dd80:	b21a      	sxth	r2, r3
 800dd82:	8bbb      	ldrh	r3, [r7, #28]
 800dd84:	4313      	orrs	r3, r2
 800dd86:	b21b      	sxth	r3, r3
 800dd88:	81bb      	strh	r3, [r7, #12]

        /* Mag Y axis data */
        reg_data[2] = BMM150_GET_BITS(reg_data[2], BMM150_DATA_Y);
 800dd8a:	7dbb      	ldrb	r3, [r7, #22]
 800dd8c:	08db      	lsrs	r3, r3, #3
 800dd8e:	b2db      	uxtb	r3, r3
 800dd90:	75bb      	strb	r3, [r7, #22]

        /* Shift the MSB data to left by 5 bits */
        /* Multiply by 32 to get the shift left by 5 value */
        msb_data = ((int16_t)((int8_t)reg_data[3])) * 32;
 800dd92:	7dfb      	ldrb	r3, [r7, #23]
 800dd94:	b25b      	sxtb	r3, r3
 800dd96:	b29b      	uxth	r3, r3
 800dd98:	015b      	lsls	r3, r3, #5
 800dd9a:	b29b      	uxth	r3, r3
 800dd9c:	83bb      	strh	r3, [r7, #28]

        /* Raw mag Y axis data */
        raw_mag_data.raw_datay = (int16_t)(msb_data | reg_data[2]);
 800dd9e:	7dbb      	ldrb	r3, [r7, #22]
 800dda0:	b21a      	sxth	r2, r3
 800dda2:	8bbb      	ldrh	r3, [r7, #28]
 800dda4:	4313      	orrs	r3, r2
 800dda6:	b21b      	sxth	r3, r3
 800dda8:	81fb      	strh	r3, [r7, #14]

        /* Mag Z axis data */
        reg_data[4] = BMM150_GET_BITS(reg_data[4], BMM150_DATA_Z);
 800ddaa:	7e3b      	ldrb	r3, [r7, #24]
 800ddac:	085b      	lsrs	r3, r3, #1
 800ddae:	b2db      	uxtb	r3, r3
 800ddb0:	763b      	strb	r3, [r7, #24]

        /* Shift the MSB data to left by 7 bits */
        /* Multiply by 128 to get the shift left by 7 value */
        msb_data = ((int16_t)((int8_t)reg_data[5])) * 128;
 800ddb2:	7e7b      	ldrb	r3, [r7, #25]
 800ddb4:	b25b      	sxtb	r3, r3
 800ddb6:	b29b      	uxth	r3, r3
 800ddb8:	01db      	lsls	r3, r3, #7
 800ddba:	b29b      	uxth	r3, r3
 800ddbc:	83bb      	strh	r3, [r7, #28]

        /* Raw mag Z axis data */
        raw_mag_data.raw_dataz = (int16_t)(msb_data | reg_data[4]);
 800ddbe:	7e3b      	ldrb	r3, [r7, #24]
 800ddc0:	b21a      	sxth	r2, r3
 800ddc2:	8bbb      	ldrh	r3, [r7, #28]
 800ddc4:	4313      	orrs	r3, r2
 800ddc6:	b21b      	sxth	r3, r3
 800ddc8:	823b      	strh	r3, [r7, #16]

        /* Mag R-HALL data */
        reg_data[6] = BMM150_GET_BITS(reg_data[6], BMM150_DATA_RHALL);
 800ddca:	7ebb      	ldrb	r3, [r7, #26]
 800ddcc:	089b      	lsrs	r3, r3, #2
 800ddce:	b2db      	uxtb	r3, r3
 800ddd0:	76bb      	strb	r3, [r7, #26]
        raw_mag_data.raw_data_r = (uint16_t)(((uint16_t)reg_data[7] << 6) | reg_data[6]);
 800ddd2:	7efb      	ldrb	r3, [r7, #27]
 800ddd4:	019b      	lsls	r3, r3, #6
 800ddd6:	b21a      	sxth	r2, r3
 800ddd8:	7ebb      	ldrb	r3, [r7, #26]
 800ddda:	b21b      	sxth	r3, r3
 800dddc:	4313      	orrs	r3, r2
 800ddde:	b21b      	sxth	r3, r3
 800dde0:	b29b      	uxth	r3, r3
 800dde2:	827b      	strh	r3, [r7, #18]

        /* Compensated Mag X data in int16_t format */
        mag_data->x = compensate_x(raw_mag_data.raw_datax, raw_mag_data.raw_data_r, dev);
 800dde4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800dde8:	8a79      	ldrh	r1, [r7, #18]
 800ddea:	683a      	ldr	r2, [r7, #0]
 800ddec:	4618      	mov	r0, r3
 800ddee:	f000 fbaf 	bl	800e550 <compensate_x>
 800ddf2:	eef0 7a40 	vmov.f32	s15, s0
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	edc3 7a00 	vstr	s15, [r3]

        /* Compensated Mag Y data in int16_t format */
        mag_data->y = compensate_y(raw_mag_data.raw_datay, raw_mag_data.raw_data_r, dev);
 800ddfc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800de00:	8a79      	ldrh	r1, [r7, #18]
 800de02:	683a      	ldr	r2, [r7, #0]
 800de04:	4618      	mov	r0, r3
 800de06:	f000 fc51 	bl	800e6ac <compensate_y>
 800de0a:	eef0 7a40 	vmov.f32	s15, s0
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	edc3 7a01 	vstr	s15, [r3, #4]

        /* Compensated Mag Z data in int16_t format */
        mag_data->z = compensate_z(raw_mag_data.raw_dataz, raw_mag_data.raw_data_r, dev);
 800de14:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800de18:	8a79      	ldrh	r1, [r7, #18]
 800de1a:	683a      	ldr	r2, [r7, #0]
 800de1c:	4618      	mov	r0, r3
 800de1e:	f000 fcf3 	bl	800e808 <compensate_z>
 800de22:	eef0 7a40 	vmov.f32	s15, s0
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	edc3 7a02 	vstr	s15, [r3, #8]
    }

    return rslt;
 800de2c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800de30:	4618      	mov	r0, r3
 800de32:	3720      	adds	r7, #32
 800de34:	46bd      	mov	sp, r7
 800de36:	bd80      	pop	{r7, pc}

0800de38 <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bmm150_dev *dev)
{
 800de38:	b480      	push	{r7}
 800de3a:	b085      	sub	sp, #20
 800de3c:	af00      	add	r7, sp, #0
 800de3e:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL) ||
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	2b00      	cmp	r3, #0
 800de44:	d00f      	beq.n	800de66 <null_ptr_check+0x2e>
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	68db      	ldr	r3, [r3, #12]
 800de4a:	2b00      	cmp	r3, #0
 800de4c:	d00b      	beq.n	800de66 <null_ptr_check+0x2e>
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	691b      	ldr	r3, [r3, #16]
 800de52:	2b00      	cmp	r3, #0
 800de54:	d007      	beq.n	800de66 <null_ptr_check+0x2e>
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	695b      	ldr	r3, [r3, #20]
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	d003      	beq.n	800de66 <null_ptr_check+0x2e>
        (dev->intf_ptr == NULL))
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	685b      	ldr	r3, [r3, #4]
    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL) ||
 800de62:	2b00      	cmp	r3, #0
 800de64:	d102      	bne.n	800de6c <null_ptr_check+0x34>
    {
        /* Device structure pointer is not valid */
        rslt = BMM150_E_NULL_PTR;
 800de66:	23ff      	movs	r3, #255	; 0xff
 800de68:	73fb      	strb	r3, [r7, #15]
 800de6a:	e001      	b.n	800de70 <null_ptr_check+0x38>
    }
    else
    {
        /* Device structure is fine */
        rslt = BMM150_OK;
 800de6c:	2300      	movs	r3, #0
 800de6e:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800de70:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800de74:	4618      	mov	r0, r3
 800de76:	3714      	adds	r7, #20
 800de78:	46bd      	mov	sp, r7
 800de7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de7e:	4770      	bx	lr

0800de80 <set_power_control_bit>:

/*!
 * @brief This internal API sets/resets the power control bit of 0x4B register.
 */
static int8_t set_power_control_bit(uint8_t pwrcntrl_bit, struct bmm150_dev *dev)
{
 800de80:	b580      	push	{r7, lr}
 800de82:	b084      	sub	sp, #16
 800de84:	af00      	add	r7, sp, #0
 800de86:	4603      	mov	r3, r0
 800de88:	6039      	str	r1, [r7, #0]
 800de8a:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;
    uint8_t reg_data = 0;
 800de8c:	2300      	movs	r3, #0
 800de8e:	73bb      	strb	r3, [r7, #14]

    /* Power control register 0x4B is read */
    rslt = bmm150_get_regs(BMM150_REG_POWER_CONTROL, &reg_data, 1, dev);
 800de90:	f107 010e 	add.w	r1, r7, #14
 800de94:	683b      	ldr	r3, [r7, #0]
 800de96:	2201      	movs	r2, #1
 800de98:	204b      	movs	r0, #75	; 0x4b
 800de9a:	f7ff fdd2 	bl	800da42 <bmm150_get_regs>
 800de9e:	4603      	mov	r3, r0
 800dea0:	73fb      	strb	r3, [r7, #15]

    /* Proceed if everything is fine until now */
    if (rslt == BMM150_OK)
 800dea2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	d11e      	bne.n	800dee8 <set_power_control_bit+0x68>
    {
        /* Sets the value of power control bit */
        reg_data = BMM150_SET_BITS_POS_0(reg_data, BMM150_PWR_CNTRL, pwrcntrl_bit);
 800deaa:	7bbb      	ldrb	r3, [r7, #14]
 800deac:	b25b      	sxtb	r3, r3
 800deae:	f023 0301 	bic.w	r3, r3, #1
 800deb2:	b25a      	sxtb	r2, r3
 800deb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800deb8:	f003 0301 	and.w	r3, r3, #1
 800debc:	b25b      	sxtb	r3, r3
 800debe:	4313      	orrs	r3, r2
 800dec0:	b25b      	sxtb	r3, r3
 800dec2:	b2db      	uxtb	r3, r3
 800dec4:	73bb      	strb	r3, [r7, #14]
        rslt = bmm150_set_regs(BMM150_REG_POWER_CONTROL, &reg_data, 1, dev);
 800dec6:	f107 010e 	add.w	r1, r7, #14
 800deca:	683b      	ldr	r3, [r7, #0]
 800decc:	2201      	movs	r2, #1
 800dece:	204b      	movs	r0, #75	; 0x4b
 800ded0:	f7ff fd8b 	bl	800d9ea <bmm150_set_regs>
 800ded4:	4603      	mov	r3, r0
 800ded6:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMM150_OK)
 800ded8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dedc:	2b00      	cmp	r3, #0
 800dede:	d103      	bne.n	800dee8 <set_power_control_bit+0x68>
        {
            /* Store the power control bit
             * value in dev structure
             */
            dev->pwr_cntrl_bit = pwrcntrl_bit;
 800dee0:	683b      	ldr	r3, [r7, #0]
 800dee2:	79fa      	ldrb	r2, [r7, #7]
 800dee4:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
        }
    }

    return rslt;
 800dee8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800deec:	4618      	mov	r0, r3
 800deee:	3710      	adds	r7, #16
 800def0:	46bd      	mov	sp, r7
 800def2:	bd80      	pop	{r7, pc}

0800def4 <read_trim_registers>:
/*!
 * @brief This internal API reads the trim registers of the sensor and stores
 * the trim values in the "trim_data" of device structure.
 */
static int8_t read_trim_registers(struct bmm150_dev *dev)
{
 800def4:	b580      	push	{r7, lr}
 800def6:	b088      	sub	sp, #32
 800def8:	af00      	add	r7, sp, #0
 800defa:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t trim_x1y1[2] = { 0 };
 800defc:	2300      	movs	r3, #0
 800defe:	833b      	strh	r3, [r7, #24]
    uint8_t trim_xyz_data[4] = { 0 };
 800df00:	2300      	movs	r3, #0
 800df02:	617b      	str	r3, [r7, #20]
    uint8_t trim_xy1xy2[10] = { 0 };
 800df04:	2300      	movs	r3, #0
 800df06:	60bb      	str	r3, [r7, #8]
 800df08:	f107 030c 	add.w	r3, r7, #12
 800df0c:	2200      	movs	r2, #0
 800df0e:	601a      	str	r2, [r3, #0]
 800df10:	809a      	strh	r2, [r3, #4]
    uint16_t temp_msb = 0;
 800df12:	2300      	movs	r3, #0
 800df14:	83bb      	strh	r3, [r7, #28]

    /* Trim register value is read */
    rslt = bmm150_get_regs(BMM150_DIG_X1, trim_x1y1, 2, dev);
 800df16:	f107 0118 	add.w	r1, r7, #24
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	2202      	movs	r2, #2
 800df1e:	205d      	movs	r0, #93	; 0x5d
 800df20:	f7ff fd8f 	bl	800da42 <bmm150_get_regs>
 800df24:	4603      	mov	r3, r0
 800df26:	77fb      	strb	r3, [r7, #31]

    if (rslt == BMM150_OK)
 800df28:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800df2c:	2b00      	cmp	r3, #0
 800df2e:	d16e      	bne.n	800e00e <read_trim_registers+0x11a>
    {
        rslt = bmm150_get_regs(BMM150_DIG_Z4_LSB, trim_xyz_data, 4, dev);
 800df30:	f107 0114 	add.w	r1, r7, #20
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	2204      	movs	r2, #4
 800df38:	2062      	movs	r0, #98	; 0x62
 800df3a:	f7ff fd82 	bl	800da42 <bmm150_get_regs>
 800df3e:	4603      	mov	r3, r0
 800df40:	77fb      	strb	r3, [r7, #31]

        if (rslt == BMM150_OK)
 800df42:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800df46:	2b00      	cmp	r3, #0
 800df48:	d161      	bne.n	800e00e <read_trim_registers+0x11a>
        {
            rslt = bmm150_get_regs(BMM150_DIG_Z2_LSB, trim_xy1xy2, 10, dev);
 800df4a:	f107 0108 	add.w	r1, r7, #8
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	220a      	movs	r2, #10
 800df52:	2068      	movs	r0, #104	; 0x68
 800df54:	f7ff fd75 	bl	800da42 <bmm150_get_regs>
 800df58:	4603      	mov	r3, r0
 800df5a:	77fb      	strb	r3, [r7, #31]

            if (rslt == BMM150_OK)
 800df5c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800df60:	2b00      	cmp	r3, #0
 800df62:	d154      	bne.n	800e00e <read_trim_registers+0x11a>
            {
                /* Trim data which is read is updated
                 * in the device structure
                 */
                dev->trim_data.dig_x1 = (int8_t)trim_x1y1[0];//
 800df64:	7e3b      	ldrb	r3, [r7, #24]
 800df66:	b25a      	sxtb	r2, r3
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	761a      	strb	r2, [r3, #24]
                dev->trim_data.dig_y1 = (int8_t)trim_x1y1[1];//
 800df6c:	7e7b      	ldrb	r3, [r7, #25]
 800df6e:	b25a      	sxtb	r2, r3
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	765a      	strb	r2, [r3, #25]
                dev->trim_data.dig_x2 = (int8_t)trim_xyz_data[2];//
 800df74:	7dbb      	ldrb	r3, [r7, #22]
 800df76:	b25a      	sxtb	r2, r3
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	769a      	strb	r2, [r3, #26]
                dev->trim_data.dig_y2 = (int8_t)trim_xyz_data[3];//
 800df7c:	7dfb      	ldrb	r3, [r7, #23]
 800df7e:	b25a      	sxtb	r2, r3
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	76da      	strb	r2, [r3, #27]
                temp_msb = ((uint16_t)trim_xy1xy2[3]) << 8;
 800df84:	7afb      	ldrb	r3, [r7, #11]
 800df86:	b29b      	uxth	r3, r3
 800df88:	021b      	lsls	r3, r3, #8
 800df8a:	83bb      	strh	r3, [r7, #28]
                dev->trim_data.dig_z1 = (uint16_t)(temp_msb | trim_xy1xy2[2]);//
 800df8c:	7abb      	ldrb	r3, [r7, #10]
 800df8e:	b29a      	uxth	r2, r3
 800df90:	8bbb      	ldrh	r3, [r7, #28]
 800df92:	4313      	orrs	r3, r2
 800df94:	b29a      	uxth	r2, r3
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	839a      	strh	r2, [r3, #28]
                temp_msb = ((uint16_t)trim_xy1xy2[1]) << 8;
 800df9a:	7a7b      	ldrb	r3, [r7, #9]
 800df9c:	b29b      	uxth	r3, r3
 800df9e:	021b      	lsls	r3, r3, #8
 800dfa0:	83bb      	strh	r3, [r7, #28]
                dev->trim_data.dig_z2 = (int16_t)(temp_msb | trim_xy1xy2[0]);//
 800dfa2:	7a3b      	ldrb	r3, [r7, #8]
 800dfa4:	b29a      	uxth	r2, r3
 800dfa6:	8bbb      	ldrh	r3, [r7, #28]
 800dfa8:	4313      	orrs	r3, r2
 800dfaa:	b29b      	uxth	r3, r3
 800dfac:	b21a      	sxth	r2, r3
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	83da      	strh	r2, [r3, #30]
                temp_msb = ((uint16_t)trim_xy1xy2[7]) << 8;
 800dfb2:	7bfb      	ldrb	r3, [r7, #15]
 800dfb4:	b29b      	uxth	r3, r3
 800dfb6:	021b      	lsls	r3, r3, #8
 800dfb8:	83bb      	strh	r3, [r7, #28]
                dev->trim_data.dig_z3 = (int16_t)(temp_msb | trim_xy1xy2[6]);//
 800dfba:	7bbb      	ldrb	r3, [r7, #14]
 800dfbc:	b29a      	uxth	r2, r3
 800dfbe:	8bbb      	ldrh	r3, [r7, #28]
 800dfc0:	4313      	orrs	r3, r2
 800dfc2:	b29b      	uxth	r3, r3
 800dfc4:	b21a      	sxth	r2, r3
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	841a      	strh	r2, [r3, #32]
                temp_msb = ((uint16_t)trim_xyz_data[1]) << 8;
 800dfca:	7d7b      	ldrb	r3, [r7, #21]
 800dfcc:	b29b      	uxth	r3, r3
 800dfce:	021b      	lsls	r3, r3, #8
 800dfd0:	83bb      	strh	r3, [r7, #28]
                dev->trim_data.dig_z4 = (int16_t)(temp_msb | trim_xyz_data[0]);//
 800dfd2:	7d3b      	ldrb	r3, [r7, #20]
 800dfd4:	b29a      	uxth	r2, r3
 800dfd6:	8bbb      	ldrh	r3, [r7, #28]
 800dfd8:	4313      	orrs	r3, r2
 800dfda:	b29b      	uxth	r3, r3
 800dfdc:	b21a      	sxth	r2, r3
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	845a      	strh	r2, [r3, #34]	; 0x22
                dev->trim_data.dig_xy1 = trim_xy1xy2[9];//
 800dfe2:	7c7a      	ldrb	r2, [r7, #17]
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
                dev->trim_data.dig_xy2 = (int8_t)trim_xy1xy2[8];//
 800dfea:	7c3b      	ldrb	r3, [r7, #16]
 800dfec:	b25a      	sxtb	r2, r3
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
                temp_msb = ((uint16_t)(trim_xy1xy2[5] & 0x7F)) << 8;
 800dff4:	7b7b      	ldrb	r3, [r7, #13]
 800dff6:	021b      	lsls	r3, r3, #8
 800dff8:	b29b      	uxth	r3, r3
 800dffa:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 800dffe:	83bb      	strh	r3, [r7, #28]
                dev->trim_data.dig_xyz1 = (uint16_t)(temp_msb | trim_xy1xy2[4]);//
 800e000:	7b3b      	ldrb	r3, [r7, #12]
 800e002:	b29a      	uxth	r2, r3
 800e004:	8bbb      	ldrh	r3, [r7, #28]
 800e006:	4313      	orrs	r3, r2
 800e008:	b29a      	uxth	r2, r3
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	84da      	strh	r2, [r3, #38]	; 0x26
            }
        }
    }

    return rslt;
 800e00e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800e012:	4618      	mov	r0, r3
 800e014:	3720      	adds	r7, #32
 800e016:	46bd      	mov	sp, r7
 800e018:	bd80      	pop	{r7, pc}

0800e01a <write_op_mode>:
/*!
 * @brief This internal API writes the op_mode value in the Opmode bits
 * (bits 1 and 2) of 0x4C register.
 */
static int8_t write_op_mode(uint8_t op_mode, struct bmm150_dev *dev)
{
 800e01a:	b580      	push	{r7, lr}
 800e01c:	b084      	sub	sp, #16
 800e01e:	af00      	add	r7, sp, #0
 800e020:	4603      	mov	r3, r0
 800e022:	6039      	str	r1, [r7, #0]
 800e024:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;
    uint8_t reg_data;

    /* Read the 0x4C register */
    rslt = bmm150_get_regs(BMM150_REG_OP_MODE, &reg_data, 1, dev);
 800e026:	f107 010e 	add.w	r1, r7, #14
 800e02a:	683b      	ldr	r3, [r7, #0]
 800e02c:	2201      	movs	r2, #1
 800e02e:	204c      	movs	r0, #76	; 0x4c
 800e030:	f7ff fd07 	bl	800da42 <bmm150_get_regs>
 800e034:	4603      	mov	r3, r0
 800e036:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMM150_OK)
 800e038:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	d117      	bne.n	800e070 <write_op_mode+0x56>
    {
        /* Set the op_mode value in Opmode bits of 0x4C */
        reg_data = BMM150_SET_BITS(reg_data, BMM150_OP_MODE, op_mode);
 800e040:	7bbb      	ldrb	r3, [r7, #14]
 800e042:	b25b      	sxtb	r3, r3
 800e044:	f023 0306 	bic.w	r3, r3, #6
 800e048:	b25a      	sxtb	r2, r3
 800e04a:	79fb      	ldrb	r3, [r7, #7]
 800e04c:	005b      	lsls	r3, r3, #1
 800e04e:	b25b      	sxtb	r3, r3
 800e050:	f003 0306 	and.w	r3, r3, #6
 800e054:	b25b      	sxtb	r3, r3
 800e056:	4313      	orrs	r3, r2
 800e058:	b25b      	sxtb	r3, r3
 800e05a:	b2db      	uxtb	r3, r3
 800e05c:	73bb      	strb	r3, [r7, #14]
        rslt = bmm150_set_regs(BMM150_REG_OP_MODE, &reg_data, 1, dev);
 800e05e:	f107 010e 	add.w	r1, r7, #14
 800e062:	683b      	ldr	r3, [r7, #0]
 800e064:	2201      	movs	r2, #1
 800e066:	204c      	movs	r0, #76	; 0x4c
 800e068:	f7ff fcbf 	bl	800d9ea <bmm150_set_regs>
 800e06c:	4603      	mov	r3, r0
 800e06e:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800e070:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e074:	4618      	mov	r0, r3
 800e076:	3710      	adds	r7, #16
 800e078:	46bd      	mov	sp, r7
 800e07a:	bd80      	pop	{r7, pc}

0800e07c <suspend_to_sleep_mode>:
/*!
 * @brief This internal API sets the device from suspend to sleep mode
 * by setting the power control bit to '1' of 0x4B register
 */
static int8_t suspend_to_sleep_mode(struct bmm150_dev *dev)
{
 800e07c:	b580      	push	{r7, lr}
 800e07e:	b084      	sub	sp, #16
 800e080:	af00      	add	r7, sp, #0
 800e082:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 800e084:	6878      	ldr	r0, [r7, #4]
 800e086:	f7ff fed7 	bl	800de38 <null_ptr_check>
 800e08a:	4603      	mov	r3, r0
 800e08c:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BMM150_OK)
 800e08e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e092:	2b00      	cmp	r3, #0
 800e094:	d112      	bne.n	800e0bc <suspend_to_sleep_mode+0x40>
    {
        if (dev->pwr_cntrl_bit == BMM150_POWER_CNTRL_DISABLE)
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	d10d      	bne.n	800e0bc <suspend_to_sleep_mode+0x40>
        {
            rslt = set_power_control_bit(BMM150_POWER_CNTRL_ENABLE, dev);
 800e0a0:	6879      	ldr	r1, [r7, #4]
 800e0a2:	2001      	movs	r0, #1
 800e0a4:	f7ff feec 	bl	800de80 <set_power_control_bit>
 800e0a8:	4603      	mov	r3, r0
 800e0aa:	73fb      	strb	r3, [r7, #15]

            /* Start-up time delay of 3ms */
            dev->delay_us(BMM150_START_UP_TIME, dev->intf_ptr);
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	695b      	ldr	r3, [r3, #20]
 800e0b0:	687a      	ldr	r2, [r7, #4]
 800e0b2:	6852      	ldr	r2, [r2, #4]
 800e0b4:	4611      	mov	r1, r2
 800e0b6:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800e0ba:	4798      	blx	r3
        }
    }

    return rslt;
 800e0bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e0c0:	4618      	mov	r0, r3
 800e0c2:	3710      	adds	r7, #16
 800e0c4:	46bd      	mov	sp, r7
 800e0c6:	bd80      	pop	{r7, pc}

0800e0c8 <set_xy_rep>:

/*!
 * @brief This internal API sets the xy repetition value in the 0x51 register.
 */
static int8_t set_xy_rep(const struct bmm150_settings *settings, struct bmm150_dev *dev)
{
 800e0c8:	b580      	push	{r7, lr}
 800e0ca:	b084      	sub	sp, #16
 800e0cc:	af00      	add	r7, sp, #0
 800e0ce:	6078      	str	r0, [r7, #4]
 800e0d0:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t rep_xy;

    /* Set the xy repetition */
    rep_xy = settings->xy_rep;
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	78db      	ldrb	r3, [r3, #3]
 800e0d6:	73bb      	strb	r3, [r7, #14]
    rslt = bmm150_set_regs(BMM150_REG_REP_XY, &rep_xy, 1, dev);
 800e0d8:	f107 010e 	add.w	r1, r7, #14
 800e0dc:	683b      	ldr	r3, [r7, #0]
 800e0de:	2201      	movs	r2, #1
 800e0e0:	2051      	movs	r0, #81	; 0x51
 800e0e2:	f7ff fc82 	bl	800d9ea <bmm150_set_regs>
 800e0e6:	4603      	mov	r3, r0
 800e0e8:	73fb      	strb	r3, [r7, #15]

    return rslt;
 800e0ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e0ee:	4618      	mov	r0, r3
 800e0f0:	3710      	adds	r7, #16
 800e0f2:	46bd      	mov	sp, r7
 800e0f4:	bd80      	pop	{r7, pc}

0800e0f6 <set_z_rep>:

/*!
 * @brief This internal API sets the z repetition value in the 0x52 register.
 */
static int8_t set_z_rep(const struct bmm150_settings *settings, struct bmm150_dev *dev)
{
 800e0f6:	b580      	push	{r7, lr}
 800e0f8:	b084      	sub	sp, #16
 800e0fa:	af00      	add	r7, sp, #0
 800e0fc:	6078      	str	r0, [r7, #4]
 800e0fe:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t rep_z;

    /* Set the z repetition */
    rep_z = settings->z_rep;
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	791b      	ldrb	r3, [r3, #4]
 800e104:	73bb      	strb	r3, [r7, #14]
    rslt = bmm150_set_regs(BMM150_REG_REP_Z, &rep_z, 1, dev);
 800e106:	f107 010e 	add.w	r1, r7, #14
 800e10a:	683b      	ldr	r3, [r7, #0]
 800e10c:	2201      	movs	r2, #1
 800e10e:	2052      	movs	r0, #82	; 0x52
 800e110:	f7ff fc6b 	bl	800d9ea <bmm150_set_regs>
 800e114:	4603      	mov	r3, r0
 800e116:	73fb      	strb	r3, [r7, #15]

    return rslt;
 800e118:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e11c:	4618      	mov	r0, r3
 800e11e:	3710      	adds	r7, #16
 800e120:	46bd      	mov	sp, r7
 800e122:	bd80      	pop	{r7, pc}

0800e124 <set_odr>:

/*!
 * @brief This internal API is used to set the output data rate of the sensor.
 */
static int8_t set_odr(const struct bmm150_settings *settings, struct bmm150_dev *dev)
{
 800e124:	b580      	push	{r7, lr}
 800e126:	b084      	sub	sp, #16
 800e128:	af00      	add	r7, sp, #0
 800e12a:	6078      	str	r0, [r7, #4]
 800e12c:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_data;

    /* Read the 0x4C register */
    rslt = bmm150_get_regs(BMM150_REG_OP_MODE, &reg_data, 1, dev);
 800e12e:	f107 010e 	add.w	r1, r7, #14
 800e132:	683b      	ldr	r3, [r7, #0]
 800e134:	2201      	movs	r2, #1
 800e136:	204c      	movs	r0, #76	; 0x4c
 800e138:	f7ff fc83 	bl	800da42 <bmm150_get_regs>
 800e13c:	4603      	mov	r3, r0
 800e13e:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMM150_OK)
 800e140:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e144:	2b00      	cmp	r3, #0
 800e146:	d118      	bne.n	800e17a <set_odr+0x56>
    {
        /* Set the ODR value */
        reg_data = BMM150_SET_BITS(reg_data, BMM150_ODR, settings->data_rate);
 800e148:	7bbb      	ldrb	r3, [r7, #14]
 800e14a:	b25b      	sxtb	r3, r3
 800e14c:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 800e150:	b25a      	sxtb	r2, r3
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	789b      	ldrb	r3, [r3, #2]
 800e156:	00db      	lsls	r3, r3, #3
 800e158:	b25b      	sxtb	r3, r3
 800e15a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e15e:	b25b      	sxtb	r3, r3
 800e160:	4313      	orrs	r3, r2
 800e162:	b25b      	sxtb	r3, r3
 800e164:	b2db      	uxtb	r3, r3
 800e166:	73bb      	strb	r3, [r7, #14]
        rslt = bmm150_set_regs(BMM150_REG_OP_MODE, &reg_data, 1, dev);
 800e168:	f107 010e 	add.w	r1, r7, #14
 800e16c:	683b      	ldr	r3, [r7, #0]
 800e16e:	2201      	movs	r2, #1
 800e170:	204c      	movs	r0, #76	; 0x4c
 800e172:	f7ff fc3a 	bl	800d9ea <bmm150_set_regs>
 800e176:	4603      	mov	r3, r0
 800e178:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800e17a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e17e:	4618      	mov	r0, r3
 800e180:	3710      	adds	r7, #16
 800e182:	46bd      	mov	sp, r7
 800e184:	bd80      	pop	{r7, pc}

0800e186 <set_odr_xyz_rep>:

/*!
 * @brief This internal API sets the preset mode ODR and repetition settings.
 */
static int8_t set_odr_xyz_rep(const struct bmm150_settings *settings, struct bmm150_dev *dev)
{
 800e186:	b580      	push	{r7, lr}
 800e188:	b084      	sub	sp, #16
 800e18a:	af00      	add	r7, sp, #0
 800e18c:	6078      	str	r0, [r7, #4]
 800e18e:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Set the ODR */
    rslt = set_odr(settings, dev);
 800e190:	6839      	ldr	r1, [r7, #0]
 800e192:	6878      	ldr	r0, [r7, #4]
 800e194:	f7ff ffc6 	bl	800e124 <set_odr>
 800e198:	4603      	mov	r3, r0
 800e19a:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMM150_OK)
 800e19c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e1a0:	2b00      	cmp	r3, #0
 800e1a2:	d10f      	bne.n	800e1c4 <set_odr_xyz_rep+0x3e>
    {
        /* Set the XY-repetitions number */
        rslt = set_xy_rep(settings, dev);
 800e1a4:	6839      	ldr	r1, [r7, #0]
 800e1a6:	6878      	ldr	r0, [r7, #4]
 800e1a8:	f7ff ff8e 	bl	800e0c8 <set_xy_rep>
 800e1ac:	4603      	mov	r3, r0
 800e1ae:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMM150_OK)
 800e1b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e1b4:	2b00      	cmp	r3, #0
 800e1b6:	d105      	bne.n	800e1c4 <set_odr_xyz_rep+0x3e>
        {
            /* Set the Z-repetitions number */
            rslt = set_z_rep(settings, dev);
 800e1b8:	6839      	ldr	r1, [r7, #0]
 800e1ba:	6878      	ldr	r0, [r7, #4]
 800e1bc:	f7ff ff9b 	bl	800e0f6 <set_z_rep>
 800e1c0:	4603      	mov	r3, r0
 800e1c2:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 800e1c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e1c8:	4618      	mov	r0, r3
 800e1ca:	3710      	adds	r7, #16
 800e1cc:	46bd      	mov	sp, r7
 800e1ce:	bd80      	pop	{r7, pc}

0800e1d0 <set_control_measurement_xyz>:
/*!
 * @brief This internal API is used to enable or disable the magnetic
 * measurement of x,y,z axes based on the value of xyz_axes_control.
 */
static int8_t set_control_measurement_xyz(const struct bmm150_settings *settings, struct bmm150_dev *dev)
{
 800e1d0:	b580      	push	{r7, lr}
 800e1d2:	b084      	sub	sp, #16
 800e1d4:	af00      	add	r7, sp, #0
 800e1d6:	6078      	str	r0, [r7, #4]
 800e1d8:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_data;

    rslt = bmm150_get_regs(BMM150_REG_AXES_ENABLE, &reg_data, 1, dev);
 800e1da:	f107 010e 	add.w	r1, r7, #14
 800e1de:	683b      	ldr	r3, [r7, #0]
 800e1e0:	2201      	movs	r2, #1
 800e1e2:	204e      	movs	r0, #78	; 0x4e
 800e1e4:	f7ff fc2d 	bl	800da42 <bmm150_get_regs>
 800e1e8:	4603      	mov	r3, r0
 800e1ea:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMM150_OK)
 800e1ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e1f0:	2b00      	cmp	r3, #0
 800e1f2:	d118      	bne.n	800e226 <set_control_measurement_xyz+0x56>
    {
        /* Set the axes to be enabled/disabled */
        reg_data = BMM150_SET_BITS(reg_data, BMM150_CONTROL_MEASURE, settings->xyz_axes_control);
 800e1f4:	7bbb      	ldrb	r3, [r7, #14]
 800e1f6:	b25b      	sxtb	r3, r3
 800e1f8:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 800e1fc:	b25a      	sxtb	r2, r3
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	781b      	ldrb	r3, [r3, #0]
 800e202:	00db      	lsls	r3, r3, #3
 800e204:	b25b      	sxtb	r3, r3
 800e206:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e20a:	b25b      	sxtb	r3, r3
 800e20c:	4313      	orrs	r3, r2
 800e20e:	b25b      	sxtb	r3, r3
 800e210:	b2db      	uxtb	r3, r3
 800e212:	73bb      	strb	r3, [r7, #14]
        rslt = bmm150_set_regs(BMM150_REG_AXES_ENABLE, &reg_data, 1, dev);
 800e214:	f107 010e 	add.w	r1, r7, #14
 800e218:	683b      	ldr	r3, [r7, #0]
 800e21a:	2201      	movs	r2, #1
 800e21c:	204e      	movs	r0, #78	; 0x4e
 800e21e:	f7ff fbe4 	bl	800d9ea <bmm150_set_regs>
 800e222:	4603      	mov	r3, r0
 800e224:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800e226:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e22a:	4618      	mov	r0, r3
 800e22c:	3710      	adds	r7, #16
 800e22e:	46bd      	mov	sp, r7
 800e230:	bd80      	pop	{r7, pc}

0800e232 <are_settings_changed>:
/*!
 * @brief This internal API is used to identify the settings which the user
 * wants to modify in the sensor.
 */
static uint8_t are_settings_changed(uint16_t sub_settings, uint16_t desired_settings)
{
 800e232:	b480      	push	{r7}
 800e234:	b085      	sub	sp, #20
 800e236:	af00      	add	r7, sp, #0
 800e238:	4603      	mov	r3, r0
 800e23a:	460a      	mov	r2, r1
 800e23c:	80fb      	strh	r3, [r7, #6]
 800e23e:	4613      	mov	r3, r2
 800e240:	80bb      	strh	r3, [r7, #4]
    uint8_t settings_changed;

    if (sub_settings & desired_settings)
 800e242:	88fa      	ldrh	r2, [r7, #6]
 800e244:	88bb      	ldrh	r3, [r7, #4]
 800e246:	4013      	ands	r3, r2
 800e248:	b29b      	uxth	r3, r3
 800e24a:	2b00      	cmp	r3, #0
 800e24c:	d002      	beq.n	800e254 <are_settings_changed+0x22>
    {
        /* User wants to modify this particular settings */
        settings_changed = BMM150_TRUE;
 800e24e:	2301      	movs	r3, #1
 800e250:	73fb      	strb	r3, [r7, #15]
 800e252:	e001      	b.n	800e258 <are_settings_changed+0x26>
    }
    else
    {
        /* User don't want to modify this particular settings */
        settings_changed = BMM150_FALSE;
 800e254:	2300      	movs	r3, #0
 800e256:	73fb      	strb	r3, [r7, #15]
    }

    return settings_changed;
 800e258:	7bfb      	ldrb	r3, [r7, #15]
}
 800e25a:	4618      	mov	r0, r3
 800e25c:	3714      	adds	r7, #20
 800e25e:	46bd      	mov	sp, r7
 800e260:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e264:	4770      	bx	lr

0800e266 <mode_settings>:
/*!
 * @brief This API sets the ODR , measurement axes control ,
 * repetition values of xy,z.
 */
static int8_t mode_settings(uint16_t desired_settings, const struct bmm150_settings *settings, struct bmm150_dev *dev)
{
 800e266:	b580      	push	{r7, lr}
 800e268:	b086      	sub	sp, #24
 800e26a:	af00      	add	r7, sp, #0
 800e26c:	4603      	mov	r3, r0
 800e26e:	60b9      	str	r1, [r7, #8]
 800e270:	607a      	str	r2, [r7, #4]
 800e272:	81fb      	strh	r3, [r7, #14]
    int8_t rslt = BMM150_E_INVALID_CONFIG;
 800e274:	23fd      	movs	r3, #253	; 0xfd
 800e276:	75fb      	strb	r3, [r7, #23]

    if (desired_settings & BMM150_SEL_DATA_RATE)
 800e278:	89fb      	ldrh	r3, [r7, #14]
 800e27a:	f003 0301 	and.w	r3, r3, #1
 800e27e:	2b00      	cmp	r3, #0
 800e280:	d005      	beq.n	800e28e <mode_settings+0x28>
    {
        /* Sets the ODR */
        rslt = set_odr(settings, dev);
 800e282:	6879      	ldr	r1, [r7, #4]
 800e284:	68b8      	ldr	r0, [r7, #8]
 800e286:	f7ff ff4d 	bl	800e124 <set_odr>
 800e28a:	4603      	mov	r3, r0
 800e28c:	75fb      	strb	r3, [r7, #23]
    }

    if (desired_settings & BMM150_SEL_CONTROL_MEASURE)
 800e28e:	89fb      	ldrh	r3, [r7, #14]
 800e290:	f003 0302 	and.w	r3, r3, #2
 800e294:	2b00      	cmp	r3, #0
 800e296:	d005      	beq.n	800e2a4 <mode_settings+0x3e>
    {
        /* Enables/Disables the control measurement axes */
        rslt = set_control_measurement_xyz(settings, dev);
 800e298:	6879      	ldr	r1, [r7, #4]
 800e29a:	68b8      	ldr	r0, [r7, #8]
 800e29c:	f7ff ff98 	bl	800e1d0 <set_control_measurement_xyz>
 800e2a0:	4603      	mov	r3, r0
 800e2a2:	75fb      	strb	r3, [r7, #23]
    }

    if (desired_settings & BMM150_SEL_XY_REP)
 800e2a4:	89fb      	ldrh	r3, [r7, #14]
 800e2a6:	f003 0304 	and.w	r3, r3, #4
 800e2aa:	2b00      	cmp	r3, #0
 800e2ac:	d005      	beq.n	800e2ba <mode_settings+0x54>
    {
        /* Sets the XY repetition */
        rslt = set_xy_rep(settings, dev);
 800e2ae:	6879      	ldr	r1, [r7, #4]
 800e2b0:	68b8      	ldr	r0, [r7, #8]
 800e2b2:	f7ff ff09 	bl	800e0c8 <set_xy_rep>
 800e2b6:	4603      	mov	r3, r0
 800e2b8:	75fb      	strb	r3, [r7, #23]
    }

    if (desired_settings & BMM150_SEL_Z_REP)
 800e2ba:	89fb      	ldrh	r3, [r7, #14]
 800e2bc:	f003 0308 	and.w	r3, r3, #8
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	d005      	beq.n	800e2d0 <mode_settings+0x6a>
    {
        /* Sets the Z repetition */
        rslt = set_z_rep(settings, dev);
 800e2c4:	6879      	ldr	r1, [r7, #4]
 800e2c6:	68b8      	ldr	r0, [r7, #8]
 800e2c8:	f7ff ff15 	bl	800e0f6 <set_z_rep>
 800e2cc:	4603      	mov	r3, r0
 800e2ce:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 800e2d0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e2d4:	4618      	mov	r0, r3
 800e2d6:	3718      	adds	r7, #24
 800e2d8:	46bd      	mov	sp, r7
 800e2da:	bd80      	pop	{r7, pc}

0800e2dc <interrupt_pin_settings>:
 * polarity , latch settings for the interrupt pins.
 */
static int8_t interrupt_pin_settings(uint16_t desired_settings,
                                     const struct bmm150_settings *settings,
                                     struct bmm150_dev *dev)
{
 800e2dc:	b580      	push	{r7, lr}
 800e2de:	b088      	sub	sp, #32
 800e2e0:	af00      	add	r7, sp, #0
 800e2e2:	4603      	mov	r3, r0
 800e2e4:	60b9      	str	r1, [r7, #8]
 800e2e6:	607a      	str	r2, [r7, #4]
 800e2e8:	81fb      	strh	r3, [r7, #14]
    int8_t rslt;
    uint8_t reg_data;
    struct bmm150_int_ctrl_settings int_settings;

    rslt = bmm150_get_regs(BMM150_REG_AXES_ENABLE, &reg_data, 1, dev);
 800e2ea:	f107 011e 	add.w	r1, r7, #30
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	2201      	movs	r2, #1
 800e2f2:	204e      	movs	r0, #78	; 0x4e
 800e2f4:	f7ff fba5 	bl	800da42 <bmm150_get_regs>
 800e2f8:	4603      	mov	r3, r0
 800e2fa:	77fb      	strb	r3, [r7, #31]

    if (rslt == BMM150_OK)
 800e2fc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e300:	2b00      	cmp	r3, #0
 800e302:	d173      	bne.n	800e3ec <interrupt_pin_settings+0x110>
    {
        int_settings = settings->int_settings;
 800e304:	68ba      	ldr	r2, [r7, #8]
 800e306:	f107 0310 	add.w	r3, r7, #16
 800e30a:	3206      	adds	r2, #6
 800e30c:	6810      	ldr	r0, [r2, #0]
 800e30e:	6851      	ldr	r1, [r2, #4]
 800e310:	c303      	stmia	r3!, {r0, r1}
 800e312:	8911      	ldrh	r1, [r2, #8]
 800e314:	7a92      	ldrb	r2, [r2, #10]
 800e316:	8019      	strh	r1, [r3, #0]
 800e318:	709a      	strb	r2, [r3, #2]
        if (desired_settings & BMM150_SEL_DRDY_PIN_EN)
 800e31a:	89fb      	ldrh	r3, [r7, #14]
 800e31c:	f003 0310 	and.w	r3, r3, #16
 800e320:	2b00      	cmp	r3, #0
 800e322:	d00b      	beq.n	800e33c <interrupt_pin_settings+0x60>
        {
            /* Enables the Data ready interrupt and
             * maps it to the DRDY pin of the sensor
             */
            reg_data = BMM150_SET_BITS(reg_data, BMM150_DRDY_EN, int_settings.drdy_pin_en);
 800e324:	7fbb      	ldrb	r3, [r7, #30]
 800e326:	b25b      	sxtb	r3, r3
 800e328:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e32c:	b25a      	sxtb	r2, r3
 800e32e:	7c3b      	ldrb	r3, [r7, #16]
 800e330:	01db      	lsls	r3, r3, #7
 800e332:	b25b      	sxtb	r3, r3
 800e334:	4313      	orrs	r3, r2
 800e336:	b25b      	sxtb	r3, r3
 800e338:	b2db      	uxtb	r3, r3
 800e33a:	77bb      	strb	r3, [r7, #30]
        }

        if (desired_settings & BMM150_SEL_INT_PIN_EN)
 800e33c:	89fb      	ldrh	r3, [r7, #14]
 800e33e:	f003 0320 	and.w	r3, r3, #32
 800e342:	2b00      	cmp	r3, #0
 800e344:	d00e      	beq.n	800e364 <interrupt_pin_settings+0x88>
        {
            /* Sets interrupt pin enable */
            reg_data = BMM150_SET_BITS(reg_data, BMM150_INT_PIN_EN, int_settings.int_pin_en);
 800e346:	7fbb      	ldrb	r3, [r7, #30]
 800e348:	b25b      	sxtb	r3, r3
 800e34a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e34e:	b25a      	sxtb	r2, r3
 800e350:	7c7b      	ldrb	r3, [r7, #17]
 800e352:	019b      	lsls	r3, r3, #6
 800e354:	b25b      	sxtb	r3, r3
 800e356:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e35a:	b25b      	sxtb	r3, r3
 800e35c:	4313      	orrs	r3, r2
 800e35e:	b25b      	sxtb	r3, r3
 800e360:	b2db      	uxtb	r3, r3
 800e362:	77bb      	strb	r3, [r7, #30]
        }

        if (desired_settings & BMM150_SEL_DRDY_POLARITY)
 800e364:	89fb      	ldrh	r3, [r7, #14]
 800e366:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e36a:	2b00      	cmp	r3, #0
 800e36c:	d00e      	beq.n	800e38c <interrupt_pin_settings+0xb0>
        {
            /* Sets Data ready pin's polarity */
            reg_data = BMM150_SET_BITS(reg_data, BMM150_DRDY_POLARITY, int_settings.drdy_polarity);
 800e36e:	7fbb      	ldrb	r3, [r7, #30]
 800e370:	b25b      	sxtb	r3, r3
 800e372:	f023 0304 	bic.w	r3, r3, #4
 800e376:	b25a      	sxtb	r2, r3
 800e378:	7cbb      	ldrb	r3, [r7, #18]
 800e37a:	009b      	lsls	r3, r3, #2
 800e37c:	b25b      	sxtb	r3, r3
 800e37e:	f003 0304 	and.w	r3, r3, #4
 800e382:	b25b      	sxtb	r3, r3
 800e384:	4313      	orrs	r3, r2
 800e386:	b25b      	sxtb	r3, r3
 800e388:	b2db      	uxtb	r3, r3
 800e38a:	77bb      	strb	r3, [r7, #30]
        }

        if (desired_settings & BMM150_SEL_INT_LATCH)
 800e38c:	89fb      	ldrh	r3, [r7, #14]
 800e38e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e392:	2b00      	cmp	r3, #0
 800e394:	d00e      	beq.n	800e3b4 <interrupt_pin_settings+0xd8>
        {
            /* Sets Interrupt in latched or non-latched mode */
            reg_data = BMM150_SET_BITS(reg_data, BMM150_INT_LATCH, int_settings.int_latch);
 800e396:	7fbb      	ldrb	r3, [r7, #30]
 800e398:	b25b      	sxtb	r3, r3
 800e39a:	f023 0302 	bic.w	r3, r3, #2
 800e39e:	b25a      	sxtb	r2, r3
 800e3a0:	7cfb      	ldrb	r3, [r7, #19]
 800e3a2:	005b      	lsls	r3, r3, #1
 800e3a4:	b25b      	sxtb	r3, r3
 800e3a6:	f003 0302 	and.w	r3, r3, #2
 800e3aa:	b25b      	sxtb	r3, r3
 800e3ac:	4313      	orrs	r3, r2
 800e3ae:	b25b      	sxtb	r3, r3
 800e3b0:	b2db      	uxtb	r3, r3
 800e3b2:	77bb      	strb	r3, [r7, #30]
        }

        if (desired_settings & BMM150_SEL_INT_POLARITY)
 800e3b4:	89fb      	ldrh	r3, [r7, #14]
 800e3b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e3ba:	2b00      	cmp	r3, #0
 800e3bc:	d00d      	beq.n	800e3da <interrupt_pin_settings+0xfe>
        {
            /* Sets Interrupt pin's polarity */
            reg_data = BMM150_SET_BITS_POS_0(reg_data, BMM150_INT_POLARITY, int_settings.int_polarity);
 800e3be:	7fbb      	ldrb	r3, [r7, #30]
 800e3c0:	b25b      	sxtb	r3, r3
 800e3c2:	f023 0301 	bic.w	r3, r3, #1
 800e3c6:	b25a      	sxtb	r2, r3
 800e3c8:	7d3b      	ldrb	r3, [r7, #20]
 800e3ca:	b25b      	sxtb	r3, r3
 800e3cc:	f003 0301 	and.w	r3, r3, #1
 800e3d0:	b25b      	sxtb	r3, r3
 800e3d2:	4313      	orrs	r3, r2
 800e3d4:	b25b      	sxtb	r3, r3
 800e3d6:	b2db      	uxtb	r3, r3
 800e3d8:	77bb      	strb	r3, [r7, #30]
        }

        /* Set the interrupt configurations in the 0x4E register */
        rslt = bmm150_set_regs(BMM150_REG_AXES_ENABLE, &reg_data, 1, dev);
 800e3da:	f107 011e 	add.w	r1, r7, #30
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	2201      	movs	r2, #1
 800e3e2:	204e      	movs	r0, #78	; 0x4e
 800e3e4:	f7ff fb01 	bl	800d9ea <bmm150_set_regs>
 800e3e8:	4603      	mov	r3, r0
 800e3ea:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 800e3ec:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800e3f0:	4618      	mov	r0, r3
 800e3f2:	3720      	adds	r7, #32
 800e3f4:	46bd      	mov	sp, r7
 800e3f6:	bd80      	pop	{r7, pc}

0800e3f8 <interrupt_config>:
 * threshold values set by the user in the High threshold (0x50) and
 * Low threshold (0x4F) registers.
 */
static int8_t interrupt_config(uint16_t desired_settings, const struct bmm150_settings *settings,
                               struct bmm150_dev *dev)
{
 800e3f8:	b580      	push	{r7, lr}
 800e3fa:	b088      	sub	sp, #32
 800e3fc:	af00      	add	r7, sp, #0
 800e3fe:	4603      	mov	r3, r0
 800e400:	60b9      	str	r1, [r7, #8]
 800e402:	607a      	str	r2, [r7, #4]
 800e404:	81fb      	strh	r3, [r7, #14]
    int8_t rslt;
    uint8_t reg_data;
    struct bmm150_int_ctrl_settings int_settings;

    rslt = bmm150_get_regs(BMM150_REG_INT_CONFIG, &reg_data, 1, dev);
 800e406:	f107 011e 	add.w	r1, r7, #30
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	2201      	movs	r2, #1
 800e40e:	204d      	movs	r0, #77	; 0x4d
 800e410:	f7ff fb17 	bl	800da42 <bmm150_get_regs>
 800e414:	4603      	mov	r3, r0
 800e416:	77fb      	strb	r3, [r7, #31]

    if (rslt == BMM150_OK)
 800e418:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e41c:	2b00      	cmp	r3, #0
 800e41e:	d15f      	bne.n	800e4e0 <interrupt_config+0xe8>
    {
        int_settings = settings->int_settings;
 800e420:	68ba      	ldr	r2, [r7, #8]
 800e422:	f107 0310 	add.w	r3, r7, #16
 800e426:	3206      	adds	r2, #6
 800e428:	6810      	ldr	r0, [r2, #0]
 800e42a:	6851      	ldr	r1, [r2, #4]
 800e42c:	c303      	stmia	r3!, {r0, r1}
 800e42e:	8911      	ldrh	r1, [r2, #8]
 800e430:	7a92      	ldrb	r2, [r2, #10]
 800e432:	8019      	strh	r1, [r3, #0]
 800e434:	709a      	strb	r2, [r3, #2]
        if (desired_settings & BMM150_SEL_DATA_OVERRUN_INT)
 800e436:	89fb      	ldrh	r3, [r7, #14]
 800e438:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e43c:	2b00      	cmp	r3, #0
 800e43e:	d00b      	beq.n	800e458 <interrupt_config+0x60>
        {
            /* Sets Data overrun interrupt */
            reg_data = BMM150_SET_BITS(reg_data, BMM150_DATA_OVERRUN_INT, int_settings.data_overrun_en);
 800e440:	7fbb      	ldrb	r3, [r7, #30]
 800e442:	b25b      	sxtb	r3, r3
 800e444:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e448:	b25a      	sxtb	r2, r3
 800e44a:	7d7b      	ldrb	r3, [r7, #21]
 800e44c:	01db      	lsls	r3, r3, #7
 800e44e:	b25b      	sxtb	r3, r3
 800e450:	4313      	orrs	r3, r2
 800e452:	b25b      	sxtb	r3, r3
 800e454:	b2db      	uxtb	r3, r3
 800e456:	77bb      	strb	r3, [r7, #30]
        }

        if (desired_settings & BMM150_SEL_OVERFLOW_INT)
 800e458:	89fb      	ldrh	r3, [r7, #14]
 800e45a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e45e:	2b00      	cmp	r3, #0
 800e460:	d00e      	beq.n	800e480 <interrupt_config+0x88>
        {
            /* Sets Data overflow interrupt */
            reg_data = BMM150_SET_BITS(reg_data, BMM150_OVERFLOW_INT, int_settings.overflow_int_en);
 800e462:	7fbb      	ldrb	r3, [r7, #30]
 800e464:	b25b      	sxtb	r3, r3
 800e466:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e46a:	b25a      	sxtb	r2, r3
 800e46c:	7dbb      	ldrb	r3, [r7, #22]
 800e46e:	019b      	lsls	r3, r3, #6
 800e470:	b25b      	sxtb	r3, r3
 800e472:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e476:	b25b      	sxtb	r3, r3
 800e478:	4313      	orrs	r3, r2
 800e47a:	b25b      	sxtb	r3, r3
 800e47c:	b2db      	uxtb	r3, r3
 800e47e:	77bb      	strb	r3, [r7, #30]
        }

        if (desired_settings & BMM150_SEL_HIGH_THRESHOLD_INT)
 800e480:	89fb      	ldrh	r3, [r7, #14]
 800e482:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e486:	2b00      	cmp	r3, #0
 800e488:	d00e      	beq.n	800e4a8 <interrupt_config+0xb0>
        {
            /* Sets high threshold interrupt */
            reg_data = BMM150_SET_BITS(reg_data, BMM150_HIGH_THRESHOLD_INT, int_settings.high_int_en);
 800e48a:	7fbb      	ldrb	r3, [r7, #30]
 800e48c:	b25b      	sxtb	r3, r3
 800e48e:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 800e492:	b25a      	sxtb	r2, r3
 800e494:	7dfb      	ldrb	r3, [r7, #23]
 800e496:	00db      	lsls	r3, r3, #3
 800e498:	b25b      	sxtb	r3, r3
 800e49a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e49e:	b25b      	sxtb	r3, r3
 800e4a0:	4313      	orrs	r3, r2
 800e4a2:	b25b      	sxtb	r3, r3
 800e4a4:	b2db      	uxtb	r3, r3
 800e4a6:	77bb      	strb	r3, [r7, #30]
        }

        if (desired_settings & BMM150_SEL_LOW_THRESHOLD_INT)
 800e4a8:	89fb      	ldrh	r3, [r7, #14]
 800e4aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800e4ae:	2b00      	cmp	r3, #0
 800e4b0:	d00d      	beq.n	800e4ce <interrupt_config+0xd6>
        {
            /* Sets low threshold interrupt */
            reg_data = BMM150_SET_BITS_POS_0(reg_data, BMM150_LOW_THRESHOLD_INT, int_settings.low_int_en);
 800e4b2:	7fbb      	ldrb	r3, [r7, #30]
 800e4b4:	b25b      	sxtb	r3, r3
 800e4b6:	f023 0307 	bic.w	r3, r3, #7
 800e4ba:	b25a      	sxtb	r2, r3
 800e4bc:	7e3b      	ldrb	r3, [r7, #24]
 800e4be:	b25b      	sxtb	r3, r3
 800e4c0:	f003 0307 	and.w	r3, r3, #7
 800e4c4:	b25b      	sxtb	r3, r3
 800e4c6:	4313      	orrs	r3, r2
 800e4c8:	b25b      	sxtb	r3, r3
 800e4ca:	b2db      	uxtb	r3, r3
 800e4cc:	77bb      	strb	r3, [r7, #30]
        }

        /* Set the interrupt configurations in the 0x4D register */
        rslt = bmm150_set_regs(BMM150_REG_INT_CONFIG, &reg_data, 1, dev);
 800e4ce:	f107 011e 	add.w	r1, r7, #30
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	2201      	movs	r2, #1
 800e4d6:	204d      	movs	r0, #77	; 0x4d
 800e4d8:	f7ff fa87 	bl	800d9ea <bmm150_set_regs>
 800e4dc:	4603      	mov	r3, r0
 800e4de:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 800e4e0:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800e4e4:	4618      	mov	r0, r3
 800e4e6:	3720      	adds	r7, #32
 800e4e8:	46bd      	mov	sp, r7
 800e4ea:	bd80      	pop	{r7, pc}

0800e4ec <interrupt_threshold_settings>:
 * as a reference to generate the high/low threshold interrupt.
 */
static int8_t interrupt_threshold_settings(uint16_t desired_settings,
                                           const struct bmm150_settings *settings,
                                           struct bmm150_dev *dev)
{
 800e4ec:	b580      	push	{r7, lr}
 800e4ee:	b086      	sub	sp, #24
 800e4f0:	af00      	add	r7, sp, #0
 800e4f2:	4603      	mov	r3, r0
 800e4f4:	60b9      	str	r1, [r7, #8]
 800e4f6:	607a      	str	r2, [r7, #4]
 800e4f8:	81fb      	strh	r3, [r7, #14]
    int8_t rslt = BMM150_E_INVALID_CONFIG;
 800e4fa:	23fd      	movs	r3, #253	; 0xfd
 800e4fc:	75fb      	strb	r3, [r7, #23]
    uint8_t reg_data;

    if (desired_settings & BMM150_SEL_LOW_THRESHOLD_SETTING)
 800e4fe:	89fb      	ldrh	r3, [r7, #14]
 800e500:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e504:	2b00      	cmp	r3, #0
 800e506:	d00b      	beq.n	800e520 <interrupt_threshold_settings+0x34>
    {
        /* Sets the Low threshold value to trigger interrupt */
        reg_data = settings->int_settings.low_threshold;
 800e508:	68bb      	ldr	r3, [r7, #8]
 800e50a:	7bdb      	ldrb	r3, [r3, #15]
 800e50c:	75bb      	strb	r3, [r7, #22]
        rslt = bmm150_set_regs(BMM150_REG_LOW_THRESHOLD, &reg_data, 1, dev);
 800e50e:	f107 0116 	add.w	r1, r7, #22
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	2201      	movs	r2, #1
 800e516:	204f      	movs	r0, #79	; 0x4f
 800e518:	f7ff fa67 	bl	800d9ea <bmm150_set_regs>
 800e51c:	4603      	mov	r3, r0
 800e51e:	75fb      	strb	r3, [r7, #23]
    }

    if (desired_settings & BMM150_SEL_HIGH_THRESHOLD_SETTING)
 800e520:	89fb      	ldrh	r3, [r7, #14]
 800e522:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e526:	2b00      	cmp	r3, #0
 800e528:	d00b      	beq.n	800e542 <interrupt_threshold_settings+0x56>
    {
        /* Sets the High threshold value to trigger interrupt */
        reg_data = settings->int_settings.high_threshold;
 800e52a:	68bb      	ldr	r3, [r7, #8]
 800e52c:	7c1b      	ldrb	r3, [r3, #16]
 800e52e:	75bb      	strb	r3, [r7, #22]
        rslt = bmm150_set_regs(BMM150_REG_HIGH_THRESHOLD, &reg_data, 1, dev);
 800e530:	f107 0116 	add.w	r1, r7, #22
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	2201      	movs	r2, #1
 800e538:	2050      	movs	r0, #80	; 0x50
 800e53a:	f7ff fa56 	bl	800d9ea <bmm150_set_regs>
 800e53e:	4603      	mov	r3, r0
 800e540:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 800e542:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e546:	4618      	mov	r0, r3
 800e548:	3718      	adds	r7, #24
 800e54a:	46bd      	mov	sp, r7
 800e54c:	bd80      	pop	{r7, pc}
	...

0800e550 <compensate_x>:
/*!
 * @brief This internal API is used to obtain the compensated
 * magnetometer x axis data(micro-tesla) in float.
 */
static float compensate_x(int16_t mag_data_x, uint16_t data_rhall, const struct bmm150_dev *dev)
{
 800e550:	b480      	push	{r7}
 800e552:	b089      	sub	sp, #36	; 0x24
 800e554:	af00      	add	r7, sp, #0
 800e556:	4603      	mov	r3, r0
 800e558:	603a      	str	r2, [r7, #0]
 800e55a:	80fb      	strh	r3, [r7, #6]
 800e55c:	460b      	mov	r3, r1
 800e55e:	80bb      	strh	r3, [r7, #4]
    float retval = 0;
 800e560:	f04f 0300 	mov.w	r3, #0
 800e564:	61fb      	str	r3, [r7, #28]
    float process_comp_x2;
    float process_comp_x3;
    float process_comp_x4;

    /* Overflow condition check */
    if ((mag_data_x != BMM150_OVERFLOW_ADCVAL_XYAXES_FLIP) && (data_rhall != 0) && (dev->trim_data.dig_xyz1 != 0))
 800e566:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800e56a:	f513 5f80 	cmn.w	r3, #4096	; 0x1000
 800e56e:	f000 8086 	beq.w	800e67e <compensate_x+0x12e>
 800e572:	88bb      	ldrh	r3, [r7, #4]
 800e574:	2b00      	cmp	r3, #0
 800e576:	f000 8082 	beq.w	800e67e <compensate_x+0x12e>
 800e57a:	683b      	ldr	r3, [r7, #0]
 800e57c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800e57e:	2b00      	cmp	r3, #0
 800e580:	d07d      	beq.n	800e67e <compensate_x+0x12e>
    {
        /* Processing compensation equations */
        process_comp_x0 = (((float)dev->trim_data.dig_xyz1) * 16384.0f / data_rhall);
 800e582:	683b      	ldr	r3, [r7, #0]
 800e584:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800e586:	ee07 3a90 	vmov	s15, r3
 800e58a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e58e:	ed9f 7a42 	vldr	s14, [pc, #264]	; 800e698 <compensate_x+0x148>
 800e592:	ee67 6a87 	vmul.f32	s13, s15, s14
 800e596:	88bb      	ldrh	r3, [r7, #4]
 800e598:	ee07 3a90 	vmov	s15, r3
 800e59c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e5a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e5a4:	edc7 7a06 	vstr	s15, [r7, #24]
        retval = (process_comp_x0 - 16384.0f);
 800e5a8:	edd7 7a06 	vldr	s15, [r7, #24]
 800e5ac:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 800e698 <compensate_x+0x148>
 800e5b0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e5b4:	edc7 7a07 	vstr	s15, [r7, #28]
        process_comp_x1 = ((float)dev->trim_data.dig_xy2) * (retval * retval / 268435456.0f);
 800e5b8:	683b      	ldr	r3, [r7, #0]
 800e5ba:	f993 3025 	ldrsb.w	r3, [r3, #37]	; 0x25
 800e5be:	ee07 3a90 	vmov	s15, r3
 800e5c2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e5c6:	edd7 7a07 	vldr	s15, [r7, #28]
 800e5ca:	ee67 6aa7 	vmul.f32	s13, s15, s15
 800e5ce:	ed9f 6a33 	vldr	s12, [pc, #204]	; 800e69c <compensate_x+0x14c>
 800e5d2:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800e5d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e5da:	edc7 7a05 	vstr	s15, [r7, #20]
        process_comp_x2 = process_comp_x1 + retval * ((float)dev->trim_data.dig_xy1) / 16384.0f;
 800e5de:	683b      	ldr	r3, [r7, #0]
 800e5e0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800e5e4:	ee07 3a90 	vmov	s15, r3
 800e5e8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800e5ec:	edd7 7a07 	vldr	s15, [r7, #28]
 800e5f0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e5f4:	eddf 6a28 	vldr	s13, [pc, #160]	; 800e698 <compensate_x+0x148>
 800e5f8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800e5fc:	ed97 7a05 	vldr	s14, [r7, #20]
 800e600:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e604:	edc7 7a04 	vstr	s15, [r7, #16]
        process_comp_x3 = ((float)dev->trim_data.dig_x2) + 160.0f;
 800e608:	683b      	ldr	r3, [r7, #0]
 800e60a:	f993 301a 	ldrsb.w	r3, [r3, #26]
 800e60e:	ee07 3a90 	vmov	s15, r3
 800e612:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e616:	ed9f 7a22 	vldr	s14, [pc, #136]	; 800e6a0 <compensate_x+0x150>
 800e61a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e61e:	edc7 7a03 	vstr	s15, [r7, #12]
        process_comp_x4 = mag_data_x * ((process_comp_x2 + 256.0f) * process_comp_x3);
 800e622:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800e626:	ee07 3a90 	vmov	s15, r3
 800e62a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e62e:	edd7 7a04 	vldr	s15, [r7, #16]
 800e632:	eddf 6a1c 	vldr	s13, [pc, #112]	; 800e6a4 <compensate_x+0x154>
 800e636:	ee77 6aa6 	vadd.f32	s13, s15, s13
 800e63a:	edd7 7a03 	vldr	s15, [r7, #12]
 800e63e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e642:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e646:	edc7 7a02 	vstr	s15, [r7, #8]
        retval = ((process_comp_x4 / 8192.0f) + (((float)dev->trim_data.dig_x1) * 8.0f)) / 16.0f;
 800e64a:	edd7 7a02 	vldr	s15, [r7, #8]
 800e64e:	eddf 6a16 	vldr	s13, [pc, #88]	; 800e6a8 <compensate_x+0x158>
 800e652:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800e656:	683b      	ldr	r3, [r7, #0]
 800e658:	f993 3018 	ldrsb.w	r3, [r3, #24]
 800e65c:	ee07 3a90 	vmov	s15, r3
 800e660:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e664:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 800e668:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800e66c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e670:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 800e674:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800e678:	edc7 7a07 	vstr	s15, [r7, #28]
 800e67c:	e002      	b.n	800e684 <compensate_x+0x134>
    }
    else
    {
        /* Overflow, set output to 0.0f */
        retval = BMM150_OVERFLOW_OUTPUT_FLOAT;
 800e67e:	f04f 0300 	mov.w	r3, #0
 800e682:	61fb      	str	r3, [r7, #28]
    }

    return retval;
 800e684:	69fb      	ldr	r3, [r7, #28]
 800e686:	ee07 3a90 	vmov	s15, r3
}
 800e68a:	eeb0 0a67 	vmov.f32	s0, s15
 800e68e:	3724      	adds	r7, #36	; 0x24
 800e690:	46bd      	mov	sp, r7
 800e692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e696:	4770      	bx	lr
 800e698:	46800000 	.word	0x46800000
 800e69c:	4d800000 	.word	0x4d800000
 800e6a0:	43200000 	.word	0x43200000
 800e6a4:	43800000 	.word	0x43800000
 800e6a8:	46000000 	.word	0x46000000

0800e6ac <compensate_y>:
/*!
 * @brief This internal API is used to obtain the compensated
 * magnetometer y axis data(micro-tesla) in float.
 */
static float compensate_y(int16_t mag_data_y, uint16_t data_rhall, const struct bmm150_dev *dev)
{
 800e6ac:	b480      	push	{r7}
 800e6ae:	b089      	sub	sp, #36	; 0x24
 800e6b0:	af00      	add	r7, sp, #0
 800e6b2:	4603      	mov	r3, r0
 800e6b4:	603a      	str	r2, [r7, #0]
 800e6b6:	80fb      	strh	r3, [r7, #6]
 800e6b8:	460b      	mov	r3, r1
 800e6ba:	80bb      	strh	r3, [r7, #4]
    float retval = 0;
 800e6bc:	f04f 0300 	mov.w	r3, #0
 800e6c0:	61fb      	str	r3, [r7, #28]
    float process_comp_y2;
    float process_comp_y3;
    float process_comp_y4;

    /* Overflow condition check */
    if ((mag_data_y != BMM150_OVERFLOW_ADCVAL_XYAXES_FLIP) && (data_rhall != 0) && (dev->trim_data.dig_xyz1 != 0))
 800e6c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800e6c6:	f513 5f80 	cmn.w	r3, #4096	; 0x1000
 800e6ca:	f000 8086 	beq.w	800e7da <compensate_y+0x12e>
 800e6ce:	88bb      	ldrh	r3, [r7, #4]
 800e6d0:	2b00      	cmp	r3, #0
 800e6d2:	f000 8082 	beq.w	800e7da <compensate_y+0x12e>
 800e6d6:	683b      	ldr	r3, [r7, #0]
 800e6d8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	d07d      	beq.n	800e7da <compensate_y+0x12e>
    {
        /* Processing compensation equations */
        process_comp_y0 = ((float)dev->trim_data.dig_xyz1) * 16384.0f / data_rhall;
 800e6de:	683b      	ldr	r3, [r7, #0]
 800e6e0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800e6e2:	ee07 3a90 	vmov	s15, r3
 800e6e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e6ea:	ed9f 7a42 	vldr	s14, [pc, #264]	; 800e7f4 <compensate_y+0x148>
 800e6ee:	ee67 6a87 	vmul.f32	s13, s15, s14
 800e6f2:	88bb      	ldrh	r3, [r7, #4]
 800e6f4:	ee07 3a90 	vmov	s15, r3
 800e6f8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e6fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e700:	edc7 7a06 	vstr	s15, [r7, #24]
        retval = process_comp_y0 - 16384.0f;
 800e704:	edd7 7a06 	vldr	s15, [r7, #24]
 800e708:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 800e7f4 <compensate_y+0x148>
 800e70c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e710:	edc7 7a07 	vstr	s15, [r7, #28]
        process_comp_y1 = ((float)dev->trim_data.dig_xy2) * (retval * retval / 268435456.0f);
 800e714:	683b      	ldr	r3, [r7, #0]
 800e716:	f993 3025 	ldrsb.w	r3, [r3, #37]	; 0x25
 800e71a:	ee07 3a90 	vmov	s15, r3
 800e71e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e722:	edd7 7a07 	vldr	s15, [r7, #28]
 800e726:	ee67 6aa7 	vmul.f32	s13, s15, s15
 800e72a:	ed9f 6a33 	vldr	s12, [pc, #204]	; 800e7f8 <compensate_y+0x14c>
 800e72e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800e732:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e736:	edc7 7a05 	vstr	s15, [r7, #20]
        process_comp_y2 = process_comp_y1 + retval * ((float)dev->trim_data.dig_xy1) / 16384.0f;
 800e73a:	683b      	ldr	r3, [r7, #0]
 800e73c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800e740:	ee07 3a90 	vmov	s15, r3
 800e744:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800e748:	edd7 7a07 	vldr	s15, [r7, #28]
 800e74c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e750:	eddf 6a28 	vldr	s13, [pc, #160]	; 800e7f4 <compensate_y+0x148>
 800e754:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800e758:	ed97 7a05 	vldr	s14, [r7, #20]
 800e75c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e760:	edc7 7a04 	vstr	s15, [r7, #16]
        process_comp_y3 = ((float)dev->trim_data.dig_y2) + 160.0f;
 800e764:	683b      	ldr	r3, [r7, #0]
 800e766:	f993 301b 	ldrsb.w	r3, [r3, #27]
 800e76a:	ee07 3a90 	vmov	s15, r3
 800e76e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e772:	ed9f 7a22 	vldr	s14, [pc, #136]	; 800e7fc <compensate_y+0x150>
 800e776:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e77a:	edc7 7a03 	vstr	s15, [r7, #12]
        process_comp_y4 = mag_data_y * (((process_comp_y2) + 256.0f) * process_comp_y3);
 800e77e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800e782:	ee07 3a90 	vmov	s15, r3
 800e786:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e78a:	edd7 7a04 	vldr	s15, [r7, #16]
 800e78e:	eddf 6a1c 	vldr	s13, [pc, #112]	; 800e800 <compensate_y+0x154>
 800e792:	ee77 6aa6 	vadd.f32	s13, s15, s13
 800e796:	edd7 7a03 	vldr	s15, [r7, #12]
 800e79a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e79e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e7a2:	edc7 7a02 	vstr	s15, [r7, #8]
        retval = ((process_comp_y4 / 8192.0f) + (((float)dev->trim_data.dig_y1) * 8.0f)) / 16.0f;
 800e7a6:	edd7 7a02 	vldr	s15, [r7, #8]
 800e7aa:	eddf 6a16 	vldr	s13, [pc, #88]	; 800e804 <compensate_y+0x158>
 800e7ae:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800e7b2:	683b      	ldr	r3, [r7, #0]
 800e7b4:	f993 3019 	ldrsb.w	r3, [r3, #25]
 800e7b8:	ee07 3a90 	vmov	s15, r3
 800e7bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e7c0:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 800e7c4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800e7c8:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e7cc:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 800e7d0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800e7d4:	edc7 7a07 	vstr	s15, [r7, #28]
 800e7d8:	e002      	b.n	800e7e0 <compensate_y+0x134>
    }
    else
    {
        /* Overflow, set output to 0.0f */
        retval = BMM150_OVERFLOW_OUTPUT_FLOAT;
 800e7da:	f04f 0300 	mov.w	r3, #0
 800e7de:	61fb      	str	r3, [r7, #28]
    }

    return retval;
 800e7e0:	69fb      	ldr	r3, [r7, #28]
 800e7e2:	ee07 3a90 	vmov	s15, r3
}
 800e7e6:	eeb0 0a67 	vmov.f32	s0, s15
 800e7ea:	3724      	adds	r7, #36	; 0x24
 800e7ec:	46bd      	mov	sp, r7
 800e7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7f2:	4770      	bx	lr
 800e7f4:	46800000 	.word	0x46800000
 800e7f8:	4d800000 	.word	0x4d800000
 800e7fc:	43200000 	.word	0x43200000
 800e800:	43800000 	.word	0x43800000
 800e804:	46000000 	.word	0x46000000

0800e808 <compensate_z>:
/*!
 * @brief This internal API is used to obtain the compensated
 * magnetometer z axis data(micro-tesla) in float.
 */
static float compensate_z(int16_t mag_data_z, uint16_t data_rhall, const struct bmm150_dev *dev)
{
 800e808:	b480      	push	{r7}
 800e80a:	b08b      	sub	sp, #44	; 0x2c
 800e80c:	af00      	add	r7, sp, #0
 800e80e:	4603      	mov	r3, r0
 800e810:	603a      	str	r2, [r7, #0]
 800e812:	80fb      	strh	r3, [r7, #6]
 800e814:	460b      	mov	r3, r1
 800e816:	80bb      	strh	r3, [r7, #4]
    float retval = 0;
 800e818:	f04f 0300 	mov.w	r3, #0
 800e81c:	627b      	str	r3, [r7, #36]	; 0x24
    float process_comp_z3;
    float process_comp_z4;
    float process_comp_z5;

    /* Overflow condition check */
    if ((mag_data_z != BMM150_OVERFLOW_ADCVAL_ZAXIS_HALL) && (dev->trim_data.dig_z2 != 0) &&
 800e81e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800e822:	f513 4f80 	cmn.w	r3, #16384	; 0x4000
 800e826:	d079      	beq.n	800e91c <compensate_z+0x114>
 800e828:	683b      	ldr	r3, [r7, #0]
 800e82a:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 800e82e:	2b00      	cmp	r3, #0
 800e830:	d074      	beq.n	800e91c <compensate_z+0x114>
        (dev->trim_data.dig_z1 != 0) && (dev->trim_data.dig_xyz1 != 0) && (data_rhall != 0))
 800e832:	683b      	ldr	r3, [r7, #0]
 800e834:	8b9b      	ldrh	r3, [r3, #28]
    if ((mag_data_z != BMM150_OVERFLOW_ADCVAL_ZAXIS_HALL) && (dev->trim_data.dig_z2 != 0) &&
 800e836:	2b00      	cmp	r3, #0
 800e838:	d070      	beq.n	800e91c <compensate_z+0x114>
        (dev->trim_data.dig_z1 != 0) && (dev->trim_data.dig_xyz1 != 0) && (data_rhall != 0))
 800e83a:	683b      	ldr	r3, [r7, #0]
 800e83c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800e83e:	2b00      	cmp	r3, #0
 800e840:	d06c      	beq.n	800e91c <compensate_z+0x114>
 800e842:	88bb      	ldrh	r3, [r7, #4]
 800e844:	2b00      	cmp	r3, #0
 800e846:	d069      	beq.n	800e91c <compensate_z+0x114>
    {
        /* Processing compensation equations */
        process_comp_z0 = ((float)mag_data_z) - ((float)dev->trim_data.dig_z4);
 800e848:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800e84c:	ee07 3a90 	vmov	s15, r3
 800e850:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e854:	683b      	ldr	r3, [r7, #0]
 800e856:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 800e85a:	ee07 3a90 	vmov	s15, r3
 800e85e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e862:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e866:	edc7 7a08 	vstr	s15, [r7, #32]
        process_comp_z1 = ((float)data_rhall) - ((float)dev->trim_data.dig_xyz1);
 800e86a:	88bb      	ldrh	r3, [r7, #4]
 800e86c:	ee07 3a90 	vmov	s15, r3
 800e870:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800e874:	683b      	ldr	r3, [r7, #0]
 800e876:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800e878:	ee07 3a90 	vmov	s15, r3
 800e87c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e880:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e884:	edc7 7a07 	vstr	s15, [r7, #28]
        process_comp_z2 = (((float)dev->trim_data.dig_z3) * process_comp_z1);
 800e888:	683b      	ldr	r3, [r7, #0]
 800e88a:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 800e88e:	ee07 3a90 	vmov	s15, r3
 800e892:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e896:	ed97 7a07 	vldr	s14, [r7, #28]
 800e89a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e89e:	edc7 7a06 	vstr	s15, [r7, #24]
        process_comp_z3 = ((float)dev->trim_data.dig_z1) * ((float)data_rhall) / 32768.0f;
 800e8a2:	683b      	ldr	r3, [r7, #0]
 800e8a4:	8b9b      	ldrh	r3, [r3, #28]
 800e8a6:	ee07 3a90 	vmov	s15, r3
 800e8aa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800e8ae:	88bb      	ldrh	r3, [r7, #4]
 800e8b0:	ee07 3a90 	vmov	s15, r3
 800e8b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e8b8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e8bc:	eddf 6a1e 	vldr	s13, [pc, #120]	; 800e938 <compensate_z+0x130>
 800e8c0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800e8c4:	edc7 7a05 	vstr	s15, [r7, #20]
        process_comp_z4 = ((float)dev->trim_data.dig_z2) + process_comp_z3;
 800e8c8:	683b      	ldr	r3, [r7, #0]
 800e8ca:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 800e8ce:	ee07 3a90 	vmov	s15, r3
 800e8d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e8d6:	ed97 7a05 	vldr	s14, [r7, #20]
 800e8da:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e8de:	edc7 7a04 	vstr	s15, [r7, #16]
        process_comp_z5 = (process_comp_z0 * 131072.0f) - process_comp_z2;
 800e8e2:	edd7 7a08 	vldr	s15, [r7, #32]
 800e8e6:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800e93c <compensate_z+0x134>
 800e8ea:	ee27 7a87 	vmul.f32	s14, s15, s14
 800e8ee:	edd7 7a06 	vldr	s15, [r7, #24]
 800e8f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e8f6:	edc7 7a03 	vstr	s15, [r7, #12]
        retval = (process_comp_z5 / ((process_comp_z4) * 4.0f)) / 16.0f;
 800e8fa:	edd7 7a04 	vldr	s15, [r7, #16]
 800e8fe:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800e902:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e906:	edd7 6a03 	vldr	s13, [r7, #12]
 800e90a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e90e:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 800e912:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800e916:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 800e91a:	e002      	b.n	800e922 <compensate_z+0x11a>
    }
    else
    {
        /* Overflow, set output to 0.0f */
        retval = BMM150_OVERFLOW_OUTPUT_FLOAT;
 800e91c:	f04f 0300 	mov.w	r3, #0
 800e920:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return retval;
 800e922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e924:	ee07 3a90 	vmov	s15, r3
}
 800e928:	eeb0 0a67 	vmov.f32	s0, s15
 800e92c:	372c      	adds	r7, #44	; 0x2c
 800e92e:	46bd      	mov	sp, r7
 800e930:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e934:	4770      	bx	lr
 800e936:	bf00      	nop
 800e938:	47000000 	.word	0x47000000
 800e93c:	48000000 	.word	0x48000000

0800e940 <bmm150_user_i2c_init>:
/*!                User interface functions                                   */

/*!
 * @brief Function for initialization of I2C bus.
 */
int8_t bmm150_user_i2c_init(void) {
 800e940:	b580      	push	{r7, lr}
 800e942:	af00      	add	r7, sp, #0
    /* Implement I2C bus initialization according to the target machine. */

    if (HAL_I2C_IsDeviceReady(&hi2c1, BMM150_DEFAULT_I2C_ADDRESS << 1, 2, 2000) == HAL_OK) {
 800e944:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800e948:	2202      	movs	r2, #2
 800e94a:	2120      	movs	r1, #32
 800e94c:	4805      	ldr	r0, [pc, #20]	; (800e964 <bmm150_user_i2c_init+0x24>)
 800e94e:	f7f9 f973 	bl	8007c38 <HAL_I2C_IsDeviceReady>
 800e952:	4603      	mov	r3, r0
 800e954:	2b00      	cmp	r3, #0
 800e956:	d101      	bne.n	800e95c <bmm150_user_i2c_init+0x1c>
//        printf("BMM150 is ready\n");
        return 0;
 800e958:	2300      	movs	r3, #0
 800e95a:	e000      	b.n	800e95e <bmm150_user_i2c_init+0x1e>
    }
    return 1;
 800e95c:	2301      	movs	r3, #1
}
 800e95e:	4618      	mov	r0, r3
 800e960:	bd80      	pop	{r7, pc}
 800e962:	bf00      	nop
 800e964:	20000590 	.word	0x20000590

0800e968 <bmm150_user_spi_init>:

/*!
 * @brief Function for initialization of SPI bus.
 */
int8_t bmm150_user_spi_init(void) {
 800e968:	b480      	push	{r7}
 800e96a:	af00      	add	r7, sp, #0

    /* Implement SPI bus initialization according to the target machine. */
    return 0;
 800e96c:	2300      	movs	r3, #0
}
 800e96e:	4618      	mov	r0, r3
 800e970:	46bd      	mov	sp, r7
 800e972:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e976:	4770      	bx	lr

0800e978 <bmm150_user_delay_us>:

/*!
 * @brief This function provides the delay for required time (Microseconds) as per the input provided in some of the
 * APIs.
 */
void bmm150_user_delay_us(uint32_t period_us, void *intf_ptr) {
 800e978:	b480      	push	{r7}
 800e97a:	b083      	sub	sp, #12
 800e97c:	af00      	add	r7, sp, #0
 800e97e:	6078      	str	r0, [r7, #4]
 800e980:	6039      	str	r1, [r7, #0]
	htim10.Instance->CNT = 0;  // set the counter value a 0
 800e982:	4b09      	ldr	r3, [pc, #36]	; (800e9a8 <bmm150_user_delay_us+0x30>)
 800e984:	681b      	ldr	r3, [r3, #0]
 800e986:	2200      	movs	r2, #0
 800e988:	625a      	str	r2, [r3, #36]	; 0x24
    while (htim10.Instance->CNT < period_us);  // wait for the counter to reach the us input in the parameter
 800e98a:	bf00      	nop
 800e98c:	4b06      	ldr	r3, [pc, #24]	; (800e9a8 <bmm150_user_delay_us+0x30>)
 800e98e:	681b      	ldr	r3, [r3, #0]
 800e990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e992:	687a      	ldr	r2, [r7, #4]
 800e994:	429a      	cmp	r2, r3
 800e996:	d8f9      	bhi.n	800e98c <bmm150_user_delay_us+0x14>
    /* Wait for a period amount of microseconds. */
}
 800e998:	bf00      	nop
 800e99a:	bf00      	nop
 800e99c:	370c      	adds	r7, #12
 800e99e:	46bd      	mov	sp, r7
 800e9a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9a4:	4770      	bx	lr
 800e9a6:	bf00      	nop
 800e9a8:	2000084c 	.word	0x2000084c

0800e9ac <bmm150_user_i2c_reg_write>:

/*!
 * @brief This function is for writing the sensor's registers through I2C bus.
 */
int8_t bmm150_user_i2c_reg_write(uint8_t reg_addr, const uint8_t *reg_data, uint32_t length, void *intf_ptr) {
 800e9ac:	b580      	push	{r7, lr}
 800e9ae:	b088      	sub	sp, #32
 800e9b0:	af04      	add	r7, sp, #16
 800e9b2:	60b9      	str	r1, [r7, #8]
 800e9b4:	607a      	str	r2, [r7, #4]
 800e9b6:	603b      	str	r3, [r7, #0]
 800e9b8:	4603      	mov	r3, r0
 800e9ba:	73fb      	strb	r3, [r7, #15]

    /* Write to registers using I2C. Return 0 for a successful execution. */
    if (HAL_I2C_Mem_Write(&hi2c1, BMM150_DEFAULT_I2C_ADDRESS << 1, reg_addr, 1, reg_data, length, 1000) == HAL_OK) {
 800e9bc:	7bfb      	ldrb	r3, [r7, #15]
 800e9be:	b29a      	uxth	r2, r3
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	b29b      	uxth	r3, r3
 800e9c4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800e9c8:	9102      	str	r1, [sp, #8]
 800e9ca:	9301      	str	r3, [sp, #4]
 800e9cc:	68bb      	ldr	r3, [r7, #8]
 800e9ce:	9300      	str	r3, [sp, #0]
 800e9d0:	2301      	movs	r3, #1
 800e9d2:	2120      	movs	r1, #32
 800e9d4:	4806      	ldr	r0, [pc, #24]	; (800e9f0 <bmm150_user_i2c_reg_write+0x44>)
 800e9d6:	f7f8 fe0f 	bl	80075f8 <HAL_I2C_Mem_Write>
 800e9da:	4603      	mov	r3, r0
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	d101      	bne.n	800e9e4 <bmm150_user_i2c_reg_write+0x38>
        return BMM150_OK;
 800e9e0:	2300      	movs	r3, #0
 800e9e2:	e000      	b.n	800e9e6 <bmm150_user_i2c_reg_write+0x3a>
    };
    return 1;
 800e9e4:	2301      	movs	r3, #1
}
 800e9e6:	4618      	mov	r0, r3
 800e9e8:	3710      	adds	r7, #16
 800e9ea:	46bd      	mov	sp, r7
 800e9ec:	bd80      	pop	{r7, pc}
 800e9ee:	bf00      	nop
 800e9f0:	20000590 	.word	0x20000590

0800e9f4 <bmm150_user_i2c_reg_read>:

/*!
 * @brief This function is for reading the sensor's registers through I2C bus.
 */
int8_t bmm150_user_i2c_reg_read(uint8_t reg_addr, uint8_t *reg_data, uint32_t length, void *intf_ptr) {
 800e9f4:	b580      	push	{r7, lr}
 800e9f6:	b088      	sub	sp, #32
 800e9f8:	af04      	add	r7, sp, #16
 800e9fa:	60b9      	str	r1, [r7, #8]
 800e9fc:	607a      	str	r2, [r7, #4]
 800e9fe:	603b      	str	r3, [r7, #0]
 800ea00:	4603      	mov	r3, r0
 800ea02:	73fb      	strb	r3, [r7, #15]

    /* Read from registers using I2C. Return 0 for a successful execution. */
    if (HAL_I2C_Mem_Read(&hi2c1, BMM150_DEFAULT_I2C_ADDRESS << 1, reg_addr, 1, reg_data, length, 1000) == HAL_OK) {
 800ea04:	7bfb      	ldrb	r3, [r7, #15]
 800ea06:	b29a      	uxth	r2, r3
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	b29b      	uxth	r3, r3
 800ea0c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800ea10:	9102      	str	r1, [sp, #8]
 800ea12:	9301      	str	r3, [sp, #4]
 800ea14:	68bb      	ldr	r3, [r7, #8]
 800ea16:	9300      	str	r3, [sp, #0]
 800ea18:	2301      	movs	r3, #1
 800ea1a:	2120      	movs	r1, #32
 800ea1c:	4806      	ldr	r0, [pc, #24]	; (800ea38 <bmm150_user_i2c_reg_read+0x44>)
 800ea1e:	f7f8 fee5 	bl	80077ec <HAL_I2C_Mem_Read>
 800ea22:	4603      	mov	r3, r0
 800ea24:	2b00      	cmp	r3, #0
 800ea26:	d101      	bne.n	800ea2c <bmm150_user_i2c_reg_read+0x38>
        return BMM150_OK;
 800ea28:	2300      	movs	r3, #0
 800ea2a:	e000      	b.n	800ea2e <bmm150_user_i2c_reg_read+0x3a>
    };
    return 1;
 800ea2c:	2301      	movs	r3, #1
}
 800ea2e:	4618      	mov	r0, r3
 800ea30:	3710      	adds	r7, #16
 800ea32:	46bd      	mov	sp, r7
 800ea34:	bd80      	pop	{r7, pc}
 800ea36:	bf00      	nop
 800ea38:	20000590 	.word	0x20000590

0800ea3c <bmm150_user_spi_reg_write>:

/*!
 * @brief This function is for writing the sensor's registers through SPI bus.
 */
int8_t bmm150_user_spi_reg_write(uint8_t reg_addr, const uint8_t *reg_data, uint32_t length, void *intf_ptr) {
 800ea3c:	b480      	push	{r7}
 800ea3e:	b085      	sub	sp, #20
 800ea40:	af00      	add	r7, sp, #0
 800ea42:	60b9      	str	r1, [r7, #8]
 800ea44:	607a      	str	r2, [r7, #4]
 800ea46:	603b      	str	r3, [r7, #0]
 800ea48:	4603      	mov	r3, r0
 800ea4a:	73fb      	strb	r3, [r7, #15]

    /* Write to registers using SPI. Return 0 for a successful execution. */
    return 0;
 800ea4c:	2300      	movs	r3, #0
}
 800ea4e:	4618      	mov	r0, r3
 800ea50:	3714      	adds	r7, #20
 800ea52:	46bd      	mov	sp, r7
 800ea54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea58:	4770      	bx	lr

0800ea5a <bmm150_user_spi_reg_read>:

/*!
 * @brief This function is for reading the sensor's registers through SPI bus.
 */
int8_t bmm150_user_spi_reg_read(uint8_t reg_addr, uint8_t *reg_data, uint32_t length, void *intf_ptr) {
 800ea5a:	b480      	push	{r7}
 800ea5c:	b085      	sub	sp, #20
 800ea5e:	af00      	add	r7, sp, #0
 800ea60:	60b9      	str	r1, [r7, #8]
 800ea62:	607a      	str	r2, [r7, #4]
 800ea64:	603b      	str	r3, [r7, #0]
 800ea66:	4603      	mov	r3, r0
 800ea68:	73fb      	strb	r3, [r7, #15]

    /* Read from registers using SPI. Return 0 for a successful execution. */
    return 0;
 800ea6a:	2300      	movs	r3, #0
}
 800ea6c:	4618      	mov	r0, r3
 800ea6e:	3714      	adds	r7, #20
 800ea70:	46bd      	mov	sp, r7
 800ea72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea76:	4770      	bx	lr

0800ea78 <bmm150_interface_selection>:

/*!
 *  @brief This function is to select the interface between SPI and I2C.
 */
int8_t bmm150_interface_selection(struct bmm150_dev *dev) {
 800ea78:	b580      	push	{r7, lr}
 800ea7a:	b084      	sub	sp, #16
 800ea7c:	af00      	add	r7, sp, #0
 800ea7e:	6078      	str	r0, [r7, #4]
    int8_t rslt = BMM150_OK;
 800ea80:	2300      	movs	r3, #0
 800ea82:	73fb      	strb	r3, [r7, #15]

    if (dev != NULL) {
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	2b00      	cmp	r3, #0
 800ea88:	d028      	beq.n	800eadc <bmm150_interface_selection+0x64>
        /* Select the interface for execution
         * For I2C : BMM150_I2C_INTF
         * For SPI : BMM150_SPI_INTF
         */
        dev->intf = BMM150_I2C_INTF;
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	2201      	movs	r2, #1
 800ea8e:	705a      	strb	r2, [r3, #1]

        /* Bus configuration : I2C */
        if (dev->intf == BMM150_I2C_INTF) {
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	785b      	ldrb	r3, [r3, #1]
 800ea94:	2b01      	cmp	r3, #1
 800ea96:	d10b      	bne.n	800eab0 <bmm150_interface_selection+0x38>
//            printf("I2C Interface \n");

            /* To initialize the user I2C function */
            bmm150_user_i2c_init();
 800ea98:	f7ff ff52 	bl	800e940 <bmm150_user_i2c_init>

            dev_addr = BMM150_DEFAULT_I2C_ADDRESS;
 800ea9c:	4b13      	ldr	r3, [pc, #76]	; (800eaec <bmm150_interface_selection+0x74>)
 800ea9e:	2210      	movs	r2, #16
 800eaa0:	701a      	strb	r2, [r3, #0]
            dev->read = bmm150_user_i2c_reg_read;
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	4a12      	ldr	r2, [pc, #72]	; (800eaf0 <bmm150_interface_selection+0x78>)
 800eaa6:	60da      	str	r2, [r3, #12]
            dev->write = bmm150_user_i2c_reg_write;
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	4a12      	ldr	r2, [pc, #72]	; (800eaf4 <bmm150_interface_selection+0x7c>)
 800eaac:	611a      	str	r2, [r3, #16]
 800eaae:	e00e      	b.n	800eace <bmm150_interface_selection+0x56>
        }
            /* Bus configuration : SPI */
        else if (dev->intf == BMM150_SPI_INTF) {
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	785b      	ldrb	r3, [r3, #1]
 800eab4:	2b00      	cmp	r3, #0
 800eab6:	d10a      	bne.n	800eace <bmm150_interface_selection+0x56>
//            printf("SPI Interface \n");

            /* To initialize the user SPI function */
            bmm150_user_spi_init();
 800eab8:	f7ff ff56 	bl	800e968 <bmm150_user_spi_init>

            dev_addr = 0;
 800eabc:	4b0b      	ldr	r3, [pc, #44]	; (800eaec <bmm150_interface_selection+0x74>)
 800eabe:	2200      	movs	r2, #0
 800eac0:	701a      	strb	r2, [r3, #0]
            dev->read = bmm150_user_spi_reg_read;
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	4a0c      	ldr	r2, [pc, #48]	; (800eaf8 <bmm150_interface_selection+0x80>)
 800eac6:	60da      	str	r2, [r3, #12]
            dev->write = bmm150_user_spi_reg_write;
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	4a0c      	ldr	r2, [pc, #48]	; (800eafc <bmm150_interface_selection+0x84>)
 800eacc:	611a      	str	r2, [r3, #16]
        }

        /* Assign device address to interface pointer */
        dev->intf_ptr = &dev_addr;
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	4a06      	ldr	r2, [pc, #24]	; (800eaec <bmm150_interface_selection+0x74>)
 800ead2:	605a      	str	r2, [r3, #4]

        /* Configure delay in microseconds */
        dev->delay_us = bmm150_user_delay_us;
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	4a0a      	ldr	r2, [pc, #40]	; (800eb00 <bmm150_interface_selection+0x88>)
 800ead8:	615a      	str	r2, [r3, #20]
 800eada:	e001      	b.n	800eae0 <bmm150_interface_selection+0x68>
    } else {
        rslt = BMM150_E_NULL_PTR;
 800eadc:	23ff      	movs	r3, #255	; 0xff
 800eade:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800eae0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800eae4:	4618      	mov	r0, r3
 800eae6:	3710      	adds	r7, #16
 800eae8:	46bd      	mov	sp, r7
 800eaea:	bd80      	pop	{r7, pc}
 800eaec:	20002bfc 	.word	0x20002bfc
 800eaf0:	0800e9f5 	.word	0x0800e9f5
 800eaf4:	0800e9ad 	.word	0x0800e9ad
 800eaf8:	0800ea5b 	.word	0x0800ea5b
 800eafc:	0800ea3d 	.word	0x0800ea3d
 800eb00:	0800e979 	.word	0x0800e979

0800eb04 <bmm150_error_codes_print_result>:

/*!
 * @brief This internal API prints the execution status
 */
void bmm150_error_codes_print_result(const char api_name[], int8_t rslt) {
 800eb04:	b480      	push	{r7}
 800eb06:	b083      	sub	sp, #12
 800eb08:	af00      	add	r7, sp, #0
 800eb0a:	6078      	str	r0, [r7, #4]
 800eb0c:	460b      	mov	r3, r1
 800eb0e:	70fb      	strb	r3, [r7, #3]
    if (rslt != BMM150_OK) {
 800eb10:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800eb14:	2b00      	cmp	r3, #0
 800eb16:	d00f      	beq.n	800eb38 <bmm150_error_codes_print_result+0x34>
//        printf("%s\t", api_name);

        switch (rslt) {
 800eb18:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800eb1c:	3304      	adds	r3, #4
 800eb1e:	2b03      	cmp	r3, #3
 800eb20:	d80c      	bhi.n	800eb3c <bmm150_error_codes_print_result+0x38>
 800eb22:	a201      	add	r2, pc, #4	; (adr r2, 800eb28 <bmm150_error_codes_print_result+0x24>)
 800eb24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb28:	0800eb3d 	.word	0x0800eb3d
 800eb2c:	0800eb3d 	.word	0x0800eb3d
 800eb30:	0800eb3d 	.word	0x0800eb3d
 800eb34:	0800eb3d 	.word	0x0800eb3d

            default:
//                printf("Error [%d] : Unknown error code\r\n", rslt);
                break;
        }
    }
 800eb38:	bf00      	nop
 800eb3a:	e000      	b.n	800eb3e <bmm150_error_codes_print_result+0x3a>
                break;
 800eb3c:	bf00      	nop
}
 800eb3e:	bf00      	nop
 800eb40:	370c      	adds	r7, #12
 800eb42:	46bd      	mov	sp, r7
 800eb44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb48:	4770      	bx	lr
 800eb4a:	bf00      	nop

0800eb4c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800eb4c:	b480      	push	{r7}
 800eb4e:	b085      	sub	sp, #20
 800eb50:	af00      	add	r7, sp, #0
 800eb52:	4603      	mov	r3, r0
 800eb54:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800eb56:	2300      	movs	r3, #0
 800eb58:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800eb5a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800eb5e:	2b84      	cmp	r3, #132	; 0x84
 800eb60:	d005      	beq.n	800eb6e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800eb62:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800eb66:	68fb      	ldr	r3, [r7, #12]
 800eb68:	4413      	add	r3, r2
 800eb6a:	3303      	adds	r3, #3
 800eb6c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800eb6e:	68fb      	ldr	r3, [r7, #12]
}
 800eb70:	4618      	mov	r0, r3
 800eb72:	3714      	adds	r7, #20
 800eb74:	46bd      	mov	sp, r7
 800eb76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb7a:	4770      	bx	lr

0800eb7c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800eb7c:	b580      	push	{r7, lr}
 800eb7e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800eb80:	f000 ff20 	bl	800f9c4 <vTaskStartScheduler>
  
  return osOK;
 800eb84:	2300      	movs	r3, #0
}
 800eb86:	4618      	mov	r0, r3
 800eb88:	bd80      	pop	{r7, pc}

0800eb8a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800eb8a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eb8c:	b089      	sub	sp, #36	; 0x24
 800eb8e:	af04      	add	r7, sp, #16
 800eb90:	6078      	str	r0, [r7, #4]
 800eb92:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	695b      	ldr	r3, [r3, #20]
 800eb98:	2b00      	cmp	r3, #0
 800eb9a:	d020      	beq.n	800ebde <osThreadCreate+0x54>
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	699b      	ldr	r3, [r3, #24]
 800eba0:	2b00      	cmp	r3, #0
 800eba2:	d01c      	beq.n	800ebde <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	685c      	ldr	r4, [r3, #4]
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	681d      	ldr	r5, [r3, #0]
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	691e      	ldr	r6, [r3, #16]
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800ebb6:	4618      	mov	r0, r3
 800ebb8:	f7ff ffc8 	bl	800eb4c <makeFreeRtosPriority>
 800ebbc:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	695b      	ldr	r3, [r3, #20]
 800ebc2:	687a      	ldr	r2, [r7, #4]
 800ebc4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ebc6:	9202      	str	r2, [sp, #8]
 800ebc8:	9301      	str	r3, [sp, #4]
 800ebca:	9100      	str	r1, [sp, #0]
 800ebcc:	683b      	ldr	r3, [r7, #0]
 800ebce:	4632      	mov	r2, r6
 800ebd0:	4629      	mov	r1, r5
 800ebd2:	4620      	mov	r0, r4
 800ebd4:	f000 fc9e 	bl	800f514 <xTaskCreateStatic>
 800ebd8:	4603      	mov	r3, r0
 800ebda:	60fb      	str	r3, [r7, #12]
 800ebdc:	e01c      	b.n	800ec18 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	685c      	ldr	r4, [r3, #4]
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ebea:	b29e      	uxth	r6, r3
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800ebf2:	4618      	mov	r0, r3
 800ebf4:	f7ff ffaa 	bl	800eb4c <makeFreeRtosPriority>
 800ebf8:	4602      	mov	r2, r0
 800ebfa:	f107 030c 	add.w	r3, r7, #12
 800ebfe:	9301      	str	r3, [sp, #4]
 800ec00:	9200      	str	r2, [sp, #0]
 800ec02:	683b      	ldr	r3, [r7, #0]
 800ec04:	4632      	mov	r2, r6
 800ec06:	4629      	mov	r1, r5
 800ec08:	4620      	mov	r0, r4
 800ec0a:	f000 fce0 	bl	800f5ce <xTaskCreate>
 800ec0e:	4603      	mov	r3, r0
 800ec10:	2b01      	cmp	r3, #1
 800ec12:	d001      	beq.n	800ec18 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800ec14:	2300      	movs	r3, #0
 800ec16:	e000      	b.n	800ec1a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800ec18:	68fb      	ldr	r3, [r7, #12]
}
 800ec1a:	4618      	mov	r0, r3
 800ec1c:	3714      	adds	r7, #20
 800ec1e:	46bd      	mov	sp, r7
 800ec20:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ec22 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800ec22:	b580      	push	{r7, lr}
 800ec24:	b084      	sub	sp, #16
 800ec26:	af00      	add	r7, sp, #0
 800ec28:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800ec2e:	68fb      	ldr	r3, [r7, #12]
 800ec30:	2b00      	cmp	r3, #0
 800ec32:	d001      	beq.n	800ec38 <osDelay+0x16>
 800ec34:	68fb      	ldr	r3, [r7, #12]
 800ec36:	e000      	b.n	800ec3a <osDelay+0x18>
 800ec38:	2301      	movs	r3, #1
 800ec3a:	4618      	mov	r0, r3
 800ec3c:	f000 fdfe 	bl	800f83c <vTaskDelay>
  
  return osOK;
 800ec40:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800ec42:	4618      	mov	r0, r3
 800ec44:	3710      	adds	r7, #16
 800ec46:	46bd      	mov	sp, r7
 800ec48:	bd80      	pop	{r7, pc}

0800ec4a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800ec4a:	b480      	push	{r7}
 800ec4c:	b083      	sub	sp, #12
 800ec4e:	af00      	add	r7, sp, #0
 800ec50:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	f103 0208 	add.w	r2, r3, #8
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	f04f 32ff 	mov.w	r2, #4294967295
 800ec62:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	f103 0208 	add.w	r2, r3, #8
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	f103 0208 	add.w	r2, r3, #8
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	2200      	movs	r2, #0
 800ec7c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800ec7e:	bf00      	nop
 800ec80:	370c      	adds	r7, #12
 800ec82:	46bd      	mov	sp, r7
 800ec84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec88:	4770      	bx	lr

0800ec8a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800ec8a:	b480      	push	{r7}
 800ec8c:	b083      	sub	sp, #12
 800ec8e:	af00      	add	r7, sp, #0
 800ec90:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	2200      	movs	r2, #0
 800ec96:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800ec98:	bf00      	nop
 800ec9a:	370c      	adds	r7, #12
 800ec9c:	46bd      	mov	sp, r7
 800ec9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eca2:	4770      	bx	lr

0800eca4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800eca4:	b480      	push	{r7}
 800eca6:	b085      	sub	sp, #20
 800eca8:	af00      	add	r7, sp, #0
 800ecaa:	6078      	str	r0, [r7, #4]
 800ecac:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	685b      	ldr	r3, [r3, #4]
 800ecb2:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800ecb4:	683b      	ldr	r3, [r7, #0]
 800ecb6:	68fa      	ldr	r2, [r7, #12]
 800ecb8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ecba:	68fb      	ldr	r3, [r7, #12]
 800ecbc:	689a      	ldr	r2, [r3, #8]
 800ecbe:	683b      	ldr	r3, [r7, #0]
 800ecc0:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ecc2:	68fb      	ldr	r3, [r7, #12]
 800ecc4:	689b      	ldr	r3, [r3, #8]
 800ecc6:	683a      	ldr	r2, [r7, #0]
 800ecc8:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ecca:	68fb      	ldr	r3, [r7, #12]
 800eccc:	683a      	ldr	r2, [r7, #0]
 800ecce:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800ecd0:	683b      	ldr	r3, [r7, #0]
 800ecd2:	687a      	ldr	r2, [r7, #4]
 800ecd4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	681b      	ldr	r3, [r3, #0]
 800ecda:	1c5a      	adds	r2, r3, #1
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	601a      	str	r2, [r3, #0]
}
 800ece0:	bf00      	nop
 800ece2:	3714      	adds	r7, #20
 800ece4:	46bd      	mov	sp, r7
 800ece6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecea:	4770      	bx	lr

0800ecec <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ecec:	b480      	push	{r7}
 800ecee:	b085      	sub	sp, #20
 800ecf0:	af00      	add	r7, sp, #0
 800ecf2:	6078      	str	r0, [r7, #4]
 800ecf4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800ecf6:	683b      	ldr	r3, [r7, #0]
 800ecf8:	681b      	ldr	r3, [r3, #0]
 800ecfa:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800ecfc:	68bb      	ldr	r3, [r7, #8]
 800ecfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed02:	d103      	bne.n	800ed0c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	691b      	ldr	r3, [r3, #16]
 800ed08:	60fb      	str	r3, [r7, #12]
 800ed0a:	e00c      	b.n	800ed26 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	3308      	adds	r3, #8
 800ed10:	60fb      	str	r3, [r7, #12]
 800ed12:	e002      	b.n	800ed1a <vListInsert+0x2e>
 800ed14:	68fb      	ldr	r3, [r7, #12]
 800ed16:	685b      	ldr	r3, [r3, #4]
 800ed18:	60fb      	str	r3, [r7, #12]
 800ed1a:	68fb      	ldr	r3, [r7, #12]
 800ed1c:	685b      	ldr	r3, [r3, #4]
 800ed1e:	681b      	ldr	r3, [r3, #0]
 800ed20:	68ba      	ldr	r2, [r7, #8]
 800ed22:	429a      	cmp	r2, r3
 800ed24:	d2f6      	bcs.n	800ed14 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ed26:	68fb      	ldr	r3, [r7, #12]
 800ed28:	685a      	ldr	r2, [r3, #4]
 800ed2a:	683b      	ldr	r3, [r7, #0]
 800ed2c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ed2e:	683b      	ldr	r3, [r7, #0]
 800ed30:	685b      	ldr	r3, [r3, #4]
 800ed32:	683a      	ldr	r2, [r7, #0]
 800ed34:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ed36:	683b      	ldr	r3, [r7, #0]
 800ed38:	68fa      	ldr	r2, [r7, #12]
 800ed3a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800ed3c:	68fb      	ldr	r3, [r7, #12]
 800ed3e:	683a      	ldr	r2, [r7, #0]
 800ed40:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800ed42:	683b      	ldr	r3, [r7, #0]
 800ed44:	687a      	ldr	r2, [r7, #4]
 800ed46:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	681b      	ldr	r3, [r3, #0]
 800ed4c:	1c5a      	adds	r2, r3, #1
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	601a      	str	r2, [r3, #0]
}
 800ed52:	bf00      	nop
 800ed54:	3714      	adds	r7, #20
 800ed56:	46bd      	mov	sp, r7
 800ed58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed5c:	4770      	bx	lr

0800ed5e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800ed5e:	b480      	push	{r7}
 800ed60:	b085      	sub	sp, #20
 800ed62:	af00      	add	r7, sp, #0
 800ed64:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	691b      	ldr	r3, [r3, #16]
 800ed6a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	685b      	ldr	r3, [r3, #4]
 800ed70:	687a      	ldr	r2, [r7, #4]
 800ed72:	6892      	ldr	r2, [r2, #8]
 800ed74:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	689b      	ldr	r3, [r3, #8]
 800ed7a:	687a      	ldr	r2, [r7, #4]
 800ed7c:	6852      	ldr	r2, [r2, #4]
 800ed7e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ed80:	68fb      	ldr	r3, [r7, #12]
 800ed82:	685b      	ldr	r3, [r3, #4]
 800ed84:	687a      	ldr	r2, [r7, #4]
 800ed86:	429a      	cmp	r2, r3
 800ed88:	d103      	bne.n	800ed92 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	689a      	ldr	r2, [r3, #8]
 800ed8e:	68fb      	ldr	r3, [r7, #12]
 800ed90:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	2200      	movs	r2, #0
 800ed96:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ed98:	68fb      	ldr	r3, [r7, #12]
 800ed9a:	681b      	ldr	r3, [r3, #0]
 800ed9c:	1e5a      	subs	r2, r3, #1
 800ed9e:	68fb      	ldr	r3, [r7, #12]
 800eda0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800eda2:	68fb      	ldr	r3, [r7, #12]
 800eda4:	681b      	ldr	r3, [r3, #0]
}
 800eda6:	4618      	mov	r0, r3
 800eda8:	3714      	adds	r7, #20
 800edaa:	46bd      	mov	sp, r7
 800edac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edb0:	4770      	bx	lr
	...

0800edb4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800edb4:	b580      	push	{r7, lr}
 800edb6:	b084      	sub	sp, #16
 800edb8:	af00      	add	r7, sp, #0
 800edba:	6078      	str	r0, [r7, #4]
 800edbc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800edc2:	68fb      	ldr	r3, [r7, #12]
 800edc4:	2b00      	cmp	r3, #0
 800edc6:	d10a      	bne.n	800edde <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800edc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edcc:	f383 8811 	msr	BASEPRI, r3
 800edd0:	f3bf 8f6f 	isb	sy
 800edd4:	f3bf 8f4f 	dsb	sy
 800edd8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800edda:	bf00      	nop
 800eddc:	e7fe      	b.n	800eddc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800edde:	f001 fc29 	bl	8010634 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ede2:	68fb      	ldr	r3, [r7, #12]
 800ede4:	681a      	ldr	r2, [r3, #0]
 800ede6:	68fb      	ldr	r3, [r7, #12]
 800ede8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800edea:	68f9      	ldr	r1, [r7, #12]
 800edec:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800edee:	fb01 f303 	mul.w	r3, r1, r3
 800edf2:	441a      	add	r2, r3
 800edf4:	68fb      	ldr	r3, [r7, #12]
 800edf6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800edf8:	68fb      	ldr	r3, [r7, #12]
 800edfa:	2200      	movs	r2, #0
 800edfc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800edfe:	68fb      	ldr	r3, [r7, #12]
 800ee00:	681a      	ldr	r2, [r3, #0]
 800ee02:	68fb      	ldr	r3, [r7, #12]
 800ee04:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ee06:	68fb      	ldr	r3, [r7, #12]
 800ee08:	681a      	ldr	r2, [r3, #0]
 800ee0a:	68fb      	ldr	r3, [r7, #12]
 800ee0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ee0e:	3b01      	subs	r3, #1
 800ee10:	68f9      	ldr	r1, [r7, #12]
 800ee12:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ee14:	fb01 f303 	mul.w	r3, r1, r3
 800ee18:	441a      	add	r2, r3
 800ee1a:	68fb      	ldr	r3, [r7, #12]
 800ee1c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800ee1e:	68fb      	ldr	r3, [r7, #12]
 800ee20:	22ff      	movs	r2, #255	; 0xff
 800ee22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800ee26:	68fb      	ldr	r3, [r7, #12]
 800ee28:	22ff      	movs	r2, #255	; 0xff
 800ee2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800ee2e:	683b      	ldr	r3, [r7, #0]
 800ee30:	2b00      	cmp	r3, #0
 800ee32:	d114      	bne.n	800ee5e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ee34:	68fb      	ldr	r3, [r7, #12]
 800ee36:	691b      	ldr	r3, [r3, #16]
 800ee38:	2b00      	cmp	r3, #0
 800ee3a:	d01a      	beq.n	800ee72 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ee3c:	68fb      	ldr	r3, [r7, #12]
 800ee3e:	3310      	adds	r3, #16
 800ee40:	4618      	mov	r0, r3
 800ee42:	f001 f801 	bl	800fe48 <xTaskRemoveFromEventList>
 800ee46:	4603      	mov	r3, r0
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	d012      	beq.n	800ee72 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800ee4c:	4b0c      	ldr	r3, [pc, #48]	; (800ee80 <xQueueGenericReset+0xcc>)
 800ee4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ee52:	601a      	str	r2, [r3, #0]
 800ee54:	f3bf 8f4f 	dsb	sy
 800ee58:	f3bf 8f6f 	isb	sy
 800ee5c:	e009      	b.n	800ee72 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800ee5e:	68fb      	ldr	r3, [r7, #12]
 800ee60:	3310      	adds	r3, #16
 800ee62:	4618      	mov	r0, r3
 800ee64:	f7ff fef1 	bl	800ec4a <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ee68:	68fb      	ldr	r3, [r7, #12]
 800ee6a:	3324      	adds	r3, #36	; 0x24
 800ee6c:	4618      	mov	r0, r3
 800ee6e:	f7ff feec 	bl	800ec4a <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800ee72:	f001 fc0f 	bl	8010694 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800ee76:	2301      	movs	r3, #1
}
 800ee78:	4618      	mov	r0, r3
 800ee7a:	3710      	adds	r7, #16
 800ee7c:	46bd      	mov	sp, r7
 800ee7e:	bd80      	pop	{r7, pc}
 800ee80:	e000ed04 	.word	0xe000ed04

0800ee84 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800ee84:	b580      	push	{r7, lr}
 800ee86:	b08a      	sub	sp, #40	; 0x28
 800ee88:	af02      	add	r7, sp, #8
 800ee8a:	60f8      	str	r0, [r7, #12]
 800ee8c:	60b9      	str	r1, [r7, #8]
 800ee8e:	4613      	mov	r3, r2
 800ee90:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ee92:	68fb      	ldr	r3, [r7, #12]
 800ee94:	2b00      	cmp	r3, #0
 800ee96:	d10a      	bne.n	800eeae <xQueueGenericCreate+0x2a>
	__asm volatile
 800ee98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee9c:	f383 8811 	msr	BASEPRI, r3
 800eea0:	f3bf 8f6f 	isb	sy
 800eea4:	f3bf 8f4f 	dsb	sy
 800eea8:	613b      	str	r3, [r7, #16]
}
 800eeaa:	bf00      	nop
 800eeac:	e7fe      	b.n	800eeac <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800eeae:	68fb      	ldr	r3, [r7, #12]
 800eeb0:	68ba      	ldr	r2, [r7, #8]
 800eeb2:	fb02 f303 	mul.w	r3, r2, r3
 800eeb6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800eeb8:	69fb      	ldr	r3, [r7, #28]
 800eeba:	3348      	adds	r3, #72	; 0x48
 800eebc:	4618      	mov	r0, r3
 800eebe:	f001 fc9b 	bl	80107f8 <pvPortMalloc>
 800eec2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800eec4:	69bb      	ldr	r3, [r7, #24]
 800eec6:	2b00      	cmp	r3, #0
 800eec8:	d011      	beq.n	800eeee <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800eeca:	69bb      	ldr	r3, [r7, #24]
 800eecc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800eece:	697b      	ldr	r3, [r7, #20]
 800eed0:	3348      	adds	r3, #72	; 0x48
 800eed2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800eed4:	69bb      	ldr	r3, [r7, #24]
 800eed6:	2200      	movs	r2, #0
 800eed8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800eedc:	79fa      	ldrb	r2, [r7, #7]
 800eede:	69bb      	ldr	r3, [r7, #24]
 800eee0:	9300      	str	r3, [sp, #0]
 800eee2:	4613      	mov	r3, r2
 800eee4:	697a      	ldr	r2, [r7, #20]
 800eee6:	68b9      	ldr	r1, [r7, #8]
 800eee8:	68f8      	ldr	r0, [r7, #12]
 800eeea:	f000 f805 	bl	800eef8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800eeee:	69bb      	ldr	r3, [r7, #24]
	}
 800eef0:	4618      	mov	r0, r3
 800eef2:	3720      	adds	r7, #32
 800eef4:	46bd      	mov	sp, r7
 800eef6:	bd80      	pop	{r7, pc}

0800eef8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800eef8:	b580      	push	{r7, lr}
 800eefa:	b084      	sub	sp, #16
 800eefc:	af00      	add	r7, sp, #0
 800eefe:	60f8      	str	r0, [r7, #12]
 800ef00:	60b9      	str	r1, [r7, #8]
 800ef02:	607a      	str	r2, [r7, #4]
 800ef04:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ef06:	68bb      	ldr	r3, [r7, #8]
 800ef08:	2b00      	cmp	r3, #0
 800ef0a:	d103      	bne.n	800ef14 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ef0c:	69bb      	ldr	r3, [r7, #24]
 800ef0e:	69ba      	ldr	r2, [r7, #24]
 800ef10:	601a      	str	r2, [r3, #0]
 800ef12:	e002      	b.n	800ef1a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ef14:	69bb      	ldr	r3, [r7, #24]
 800ef16:	687a      	ldr	r2, [r7, #4]
 800ef18:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ef1a:	69bb      	ldr	r3, [r7, #24]
 800ef1c:	68fa      	ldr	r2, [r7, #12]
 800ef1e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ef20:	69bb      	ldr	r3, [r7, #24]
 800ef22:	68ba      	ldr	r2, [r7, #8]
 800ef24:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ef26:	2101      	movs	r1, #1
 800ef28:	69b8      	ldr	r0, [r7, #24]
 800ef2a:	f7ff ff43 	bl	800edb4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ef2e:	bf00      	nop
 800ef30:	3710      	adds	r7, #16
 800ef32:	46bd      	mov	sp, r7
 800ef34:	bd80      	pop	{r7, pc}
	...

0800ef38 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800ef38:	b580      	push	{r7, lr}
 800ef3a:	b08e      	sub	sp, #56	; 0x38
 800ef3c:	af00      	add	r7, sp, #0
 800ef3e:	60f8      	str	r0, [r7, #12]
 800ef40:	60b9      	str	r1, [r7, #8]
 800ef42:	607a      	str	r2, [r7, #4]
 800ef44:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800ef46:	2300      	movs	r3, #0
 800ef48:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ef4a:	68fb      	ldr	r3, [r7, #12]
 800ef4c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ef4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef50:	2b00      	cmp	r3, #0
 800ef52:	d10a      	bne.n	800ef6a <xQueueGenericSend+0x32>
	__asm volatile
 800ef54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef58:	f383 8811 	msr	BASEPRI, r3
 800ef5c:	f3bf 8f6f 	isb	sy
 800ef60:	f3bf 8f4f 	dsb	sy
 800ef64:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ef66:	bf00      	nop
 800ef68:	e7fe      	b.n	800ef68 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ef6a:	68bb      	ldr	r3, [r7, #8]
 800ef6c:	2b00      	cmp	r3, #0
 800ef6e:	d103      	bne.n	800ef78 <xQueueGenericSend+0x40>
 800ef70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ef74:	2b00      	cmp	r3, #0
 800ef76:	d101      	bne.n	800ef7c <xQueueGenericSend+0x44>
 800ef78:	2301      	movs	r3, #1
 800ef7a:	e000      	b.n	800ef7e <xQueueGenericSend+0x46>
 800ef7c:	2300      	movs	r3, #0
 800ef7e:	2b00      	cmp	r3, #0
 800ef80:	d10a      	bne.n	800ef98 <xQueueGenericSend+0x60>
	__asm volatile
 800ef82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef86:	f383 8811 	msr	BASEPRI, r3
 800ef8a:	f3bf 8f6f 	isb	sy
 800ef8e:	f3bf 8f4f 	dsb	sy
 800ef92:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ef94:	bf00      	nop
 800ef96:	e7fe      	b.n	800ef96 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ef98:	683b      	ldr	r3, [r7, #0]
 800ef9a:	2b02      	cmp	r3, #2
 800ef9c:	d103      	bne.n	800efa6 <xQueueGenericSend+0x6e>
 800ef9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800efa2:	2b01      	cmp	r3, #1
 800efa4:	d101      	bne.n	800efaa <xQueueGenericSend+0x72>
 800efa6:	2301      	movs	r3, #1
 800efa8:	e000      	b.n	800efac <xQueueGenericSend+0x74>
 800efaa:	2300      	movs	r3, #0
 800efac:	2b00      	cmp	r3, #0
 800efae:	d10a      	bne.n	800efc6 <xQueueGenericSend+0x8e>
	__asm volatile
 800efb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efb4:	f383 8811 	msr	BASEPRI, r3
 800efb8:	f3bf 8f6f 	isb	sy
 800efbc:	f3bf 8f4f 	dsb	sy
 800efc0:	623b      	str	r3, [r7, #32]
}
 800efc2:	bf00      	nop
 800efc4:	e7fe      	b.n	800efc4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800efc6:	f001 f8fb 	bl	80101c0 <xTaskGetSchedulerState>
 800efca:	4603      	mov	r3, r0
 800efcc:	2b00      	cmp	r3, #0
 800efce:	d102      	bne.n	800efd6 <xQueueGenericSend+0x9e>
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	2b00      	cmp	r3, #0
 800efd4:	d101      	bne.n	800efda <xQueueGenericSend+0xa2>
 800efd6:	2301      	movs	r3, #1
 800efd8:	e000      	b.n	800efdc <xQueueGenericSend+0xa4>
 800efda:	2300      	movs	r3, #0
 800efdc:	2b00      	cmp	r3, #0
 800efde:	d10a      	bne.n	800eff6 <xQueueGenericSend+0xbe>
	__asm volatile
 800efe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efe4:	f383 8811 	msr	BASEPRI, r3
 800efe8:	f3bf 8f6f 	isb	sy
 800efec:	f3bf 8f4f 	dsb	sy
 800eff0:	61fb      	str	r3, [r7, #28]
}
 800eff2:	bf00      	nop
 800eff4:	e7fe      	b.n	800eff4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800eff6:	f001 fb1d 	bl	8010634 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800effa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800effc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800effe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f000:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f002:	429a      	cmp	r2, r3
 800f004:	d302      	bcc.n	800f00c <xQueueGenericSend+0xd4>
 800f006:	683b      	ldr	r3, [r7, #0]
 800f008:	2b02      	cmp	r3, #2
 800f00a:	d129      	bne.n	800f060 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f00c:	683a      	ldr	r2, [r7, #0]
 800f00e:	68b9      	ldr	r1, [r7, #8]
 800f010:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f012:	f000 f96f 	bl	800f2f4 <prvCopyDataToQueue>
 800f016:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f01a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f01c:	2b00      	cmp	r3, #0
 800f01e:	d010      	beq.n	800f042 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f022:	3324      	adds	r3, #36	; 0x24
 800f024:	4618      	mov	r0, r3
 800f026:	f000 ff0f 	bl	800fe48 <xTaskRemoveFromEventList>
 800f02a:	4603      	mov	r3, r0
 800f02c:	2b00      	cmp	r3, #0
 800f02e:	d013      	beq.n	800f058 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800f030:	4b3f      	ldr	r3, [pc, #252]	; (800f130 <xQueueGenericSend+0x1f8>)
 800f032:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f036:	601a      	str	r2, [r3, #0]
 800f038:	f3bf 8f4f 	dsb	sy
 800f03c:	f3bf 8f6f 	isb	sy
 800f040:	e00a      	b.n	800f058 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800f042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f044:	2b00      	cmp	r3, #0
 800f046:	d007      	beq.n	800f058 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800f048:	4b39      	ldr	r3, [pc, #228]	; (800f130 <xQueueGenericSend+0x1f8>)
 800f04a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f04e:	601a      	str	r2, [r3, #0]
 800f050:	f3bf 8f4f 	dsb	sy
 800f054:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800f058:	f001 fb1c 	bl	8010694 <vPortExitCritical>
				return pdPASS;
 800f05c:	2301      	movs	r3, #1
 800f05e:	e063      	b.n	800f128 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	2b00      	cmp	r3, #0
 800f064:	d103      	bne.n	800f06e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f066:	f001 fb15 	bl	8010694 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800f06a:	2300      	movs	r3, #0
 800f06c:	e05c      	b.n	800f128 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f06e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f070:	2b00      	cmp	r3, #0
 800f072:	d106      	bne.n	800f082 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f074:	f107 0314 	add.w	r3, r7, #20
 800f078:	4618      	mov	r0, r3
 800f07a:	f000 ff47 	bl	800ff0c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f07e:	2301      	movs	r3, #1
 800f080:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f082:	f001 fb07 	bl	8010694 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f086:	f000 fcfd 	bl	800fa84 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f08a:	f001 fad3 	bl	8010634 <vPortEnterCritical>
 800f08e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f090:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f094:	b25b      	sxtb	r3, r3
 800f096:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f09a:	d103      	bne.n	800f0a4 <xQueueGenericSend+0x16c>
 800f09c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f09e:	2200      	movs	r2, #0
 800f0a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f0a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f0aa:	b25b      	sxtb	r3, r3
 800f0ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f0b0:	d103      	bne.n	800f0ba <xQueueGenericSend+0x182>
 800f0b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0b4:	2200      	movs	r2, #0
 800f0b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f0ba:	f001 faeb 	bl	8010694 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f0be:	1d3a      	adds	r2, r7, #4
 800f0c0:	f107 0314 	add.w	r3, r7, #20
 800f0c4:	4611      	mov	r1, r2
 800f0c6:	4618      	mov	r0, r3
 800f0c8:	f000 ff36 	bl	800ff38 <xTaskCheckForTimeOut>
 800f0cc:	4603      	mov	r3, r0
 800f0ce:	2b00      	cmp	r3, #0
 800f0d0:	d124      	bne.n	800f11c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800f0d2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f0d4:	f000 fa06 	bl	800f4e4 <prvIsQueueFull>
 800f0d8:	4603      	mov	r3, r0
 800f0da:	2b00      	cmp	r3, #0
 800f0dc:	d018      	beq.n	800f110 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800f0de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0e0:	3310      	adds	r3, #16
 800f0e2:	687a      	ldr	r2, [r7, #4]
 800f0e4:	4611      	mov	r1, r2
 800f0e6:	4618      	mov	r0, r3
 800f0e8:	f000 fe8a 	bl	800fe00 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800f0ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f0ee:	f000 f991 	bl	800f414 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800f0f2:	f000 fcd5 	bl	800faa0 <xTaskResumeAll>
 800f0f6:	4603      	mov	r3, r0
 800f0f8:	2b00      	cmp	r3, #0
 800f0fa:	f47f af7c 	bne.w	800eff6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800f0fe:	4b0c      	ldr	r3, [pc, #48]	; (800f130 <xQueueGenericSend+0x1f8>)
 800f100:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f104:	601a      	str	r2, [r3, #0]
 800f106:	f3bf 8f4f 	dsb	sy
 800f10a:	f3bf 8f6f 	isb	sy
 800f10e:	e772      	b.n	800eff6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800f110:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f112:	f000 f97f 	bl	800f414 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f116:	f000 fcc3 	bl	800faa0 <xTaskResumeAll>
 800f11a:	e76c      	b.n	800eff6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800f11c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f11e:	f000 f979 	bl	800f414 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f122:	f000 fcbd 	bl	800faa0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800f126:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800f128:	4618      	mov	r0, r3
 800f12a:	3738      	adds	r7, #56	; 0x38
 800f12c:	46bd      	mov	sp, r7
 800f12e:	bd80      	pop	{r7, pc}
 800f130:	e000ed04 	.word	0xe000ed04

0800f134 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800f134:	b580      	push	{r7, lr}
 800f136:	b08c      	sub	sp, #48	; 0x30
 800f138:	af00      	add	r7, sp, #0
 800f13a:	60f8      	str	r0, [r7, #12]
 800f13c:	60b9      	str	r1, [r7, #8]
 800f13e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800f140:	2300      	movs	r3, #0
 800f142:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f144:	68fb      	ldr	r3, [r7, #12]
 800f146:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800f148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f14a:	2b00      	cmp	r3, #0
 800f14c:	d10a      	bne.n	800f164 <xQueueReceive+0x30>
	__asm volatile
 800f14e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f152:	f383 8811 	msr	BASEPRI, r3
 800f156:	f3bf 8f6f 	isb	sy
 800f15a:	f3bf 8f4f 	dsb	sy
 800f15e:	623b      	str	r3, [r7, #32]
}
 800f160:	bf00      	nop
 800f162:	e7fe      	b.n	800f162 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f164:	68bb      	ldr	r3, [r7, #8]
 800f166:	2b00      	cmp	r3, #0
 800f168:	d103      	bne.n	800f172 <xQueueReceive+0x3e>
 800f16a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f16c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f16e:	2b00      	cmp	r3, #0
 800f170:	d101      	bne.n	800f176 <xQueueReceive+0x42>
 800f172:	2301      	movs	r3, #1
 800f174:	e000      	b.n	800f178 <xQueueReceive+0x44>
 800f176:	2300      	movs	r3, #0
 800f178:	2b00      	cmp	r3, #0
 800f17a:	d10a      	bne.n	800f192 <xQueueReceive+0x5e>
	__asm volatile
 800f17c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f180:	f383 8811 	msr	BASEPRI, r3
 800f184:	f3bf 8f6f 	isb	sy
 800f188:	f3bf 8f4f 	dsb	sy
 800f18c:	61fb      	str	r3, [r7, #28]
}
 800f18e:	bf00      	nop
 800f190:	e7fe      	b.n	800f190 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f192:	f001 f815 	bl	80101c0 <xTaskGetSchedulerState>
 800f196:	4603      	mov	r3, r0
 800f198:	2b00      	cmp	r3, #0
 800f19a:	d102      	bne.n	800f1a2 <xQueueReceive+0x6e>
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	2b00      	cmp	r3, #0
 800f1a0:	d101      	bne.n	800f1a6 <xQueueReceive+0x72>
 800f1a2:	2301      	movs	r3, #1
 800f1a4:	e000      	b.n	800f1a8 <xQueueReceive+0x74>
 800f1a6:	2300      	movs	r3, #0
 800f1a8:	2b00      	cmp	r3, #0
 800f1aa:	d10a      	bne.n	800f1c2 <xQueueReceive+0x8e>
	__asm volatile
 800f1ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1b0:	f383 8811 	msr	BASEPRI, r3
 800f1b4:	f3bf 8f6f 	isb	sy
 800f1b8:	f3bf 8f4f 	dsb	sy
 800f1bc:	61bb      	str	r3, [r7, #24]
}
 800f1be:	bf00      	nop
 800f1c0:	e7fe      	b.n	800f1c0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f1c2:	f001 fa37 	bl	8010634 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f1c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f1ca:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f1cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1ce:	2b00      	cmp	r3, #0
 800f1d0:	d01f      	beq.n	800f212 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f1d2:	68b9      	ldr	r1, [r7, #8]
 800f1d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f1d6:	f000 f8f7 	bl	800f3c8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800f1da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1dc:	1e5a      	subs	r2, r3, #1
 800f1de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1e0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f1e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1e4:	691b      	ldr	r3, [r3, #16]
 800f1e6:	2b00      	cmp	r3, #0
 800f1e8:	d00f      	beq.n	800f20a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f1ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1ec:	3310      	adds	r3, #16
 800f1ee:	4618      	mov	r0, r3
 800f1f0:	f000 fe2a 	bl	800fe48 <xTaskRemoveFromEventList>
 800f1f4:	4603      	mov	r3, r0
 800f1f6:	2b00      	cmp	r3, #0
 800f1f8:	d007      	beq.n	800f20a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800f1fa:	4b3d      	ldr	r3, [pc, #244]	; (800f2f0 <xQueueReceive+0x1bc>)
 800f1fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f200:	601a      	str	r2, [r3, #0]
 800f202:	f3bf 8f4f 	dsb	sy
 800f206:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800f20a:	f001 fa43 	bl	8010694 <vPortExitCritical>
				return pdPASS;
 800f20e:	2301      	movs	r3, #1
 800f210:	e069      	b.n	800f2e6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f212:	687b      	ldr	r3, [r7, #4]
 800f214:	2b00      	cmp	r3, #0
 800f216:	d103      	bne.n	800f220 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f218:	f001 fa3c 	bl	8010694 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800f21c:	2300      	movs	r3, #0
 800f21e:	e062      	b.n	800f2e6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f222:	2b00      	cmp	r3, #0
 800f224:	d106      	bne.n	800f234 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f226:	f107 0310 	add.w	r3, r7, #16
 800f22a:	4618      	mov	r0, r3
 800f22c:	f000 fe6e 	bl	800ff0c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f230:	2301      	movs	r3, #1
 800f232:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f234:	f001 fa2e 	bl	8010694 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f238:	f000 fc24 	bl	800fa84 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f23c:	f001 f9fa 	bl	8010634 <vPortEnterCritical>
 800f240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f242:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f246:	b25b      	sxtb	r3, r3
 800f248:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f24c:	d103      	bne.n	800f256 <xQueueReceive+0x122>
 800f24e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f250:	2200      	movs	r2, #0
 800f252:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f258:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f25c:	b25b      	sxtb	r3, r3
 800f25e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f262:	d103      	bne.n	800f26c <xQueueReceive+0x138>
 800f264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f266:	2200      	movs	r2, #0
 800f268:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f26c:	f001 fa12 	bl	8010694 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f270:	1d3a      	adds	r2, r7, #4
 800f272:	f107 0310 	add.w	r3, r7, #16
 800f276:	4611      	mov	r1, r2
 800f278:	4618      	mov	r0, r3
 800f27a:	f000 fe5d 	bl	800ff38 <xTaskCheckForTimeOut>
 800f27e:	4603      	mov	r3, r0
 800f280:	2b00      	cmp	r3, #0
 800f282:	d123      	bne.n	800f2cc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f284:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f286:	f000 f917 	bl	800f4b8 <prvIsQueueEmpty>
 800f28a:	4603      	mov	r3, r0
 800f28c:	2b00      	cmp	r3, #0
 800f28e:	d017      	beq.n	800f2c0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f292:	3324      	adds	r3, #36	; 0x24
 800f294:	687a      	ldr	r2, [r7, #4]
 800f296:	4611      	mov	r1, r2
 800f298:	4618      	mov	r0, r3
 800f29a:	f000 fdb1 	bl	800fe00 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f29e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f2a0:	f000 f8b8 	bl	800f414 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f2a4:	f000 fbfc 	bl	800faa0 <xTaskResumeAll>
 800f2a8:	4603      	mov	r3, r0
 800f2aa:	2b00      	cmp	r3, #0
 800f2ac:	d189      	bne.n	800f1c2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800f2ae:	4b10      	ldr	r3, [pc, #64]	; (800f2f0 <xQueueReceive+0x1bc>)
 800f2b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f2b4:	601a      	str	r2, [r3, #0]
 800f2b6:	f3bf 8f4f 	dsb	sy
 800f2ba:	f3bf 8f6f 	isb	sy
 800f2be:	e780      	b.n	800f1c2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800f2c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f2c2:	f000 f8a7 	bl	800f414 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f2c6:	f000 fbeb 	bl	800faa0 <xTaskResumeAll>
 800f2ca:	e77a      	b.n	800f1c2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800f2cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f2ce:	f000 f8a1 	bl	800f414 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f2d2:	f000 fbe5 	bl	800faa0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f2d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f2d8:	f000 f8ee 	bl	800f4b8 <prvIsQueueEmpty>
 800f2dc:	4603      	mov	r3, r0
 800f2de:	2b00      	cmp	r3, #0
 800f2e0:	f43f af6f 	beq.w	800f1c2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800f2e4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800f2e6:	4618      	mov	r0, r3
 800f2e8:	3730      	adds	r7, #48	; 0x30
 800f2ea:	46bd      	mov	sp, r7
 800f2ec:	bd80      	pop	{r7, pc}
 800f2ee:	bf00      	nop
 800f2f0:	e000ed04 	.word	0xe000ed04

0800f2f4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800f2f4:	b580      	push	{r7, lr}
 800f2f6:	b086      	sub	sp, #24
 800f2f8:	af00      	add	r7, sp, #0
 800f2fa:	60f8      	str	r0, [r7, #12]
 800f2fc:	60b9      	str	r1, [r7, #8]
 800f2fe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800f300:	2300      	movs	r3, #0
 800f302:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f304:	68fb      	ldr	r3, [r7, #12]
 800f306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f308:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800f30a:	68fb      	ldr	r3, [r7, #12]
 800f30c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f30e:	2b00      	cmp	r3, #0
 800f310:	d10d      	bne.n	800f32e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f312:	68fb      	ldr	r3, [r7, #12]
 800f314:	681b      	ldr	r3, [r3, #0]
 800f316:	2b00      	cmp	r3, #0
 800f318:	d14d      	bne.n	800f3b6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800f31a:	68fb      	ldr	r3, [r7, #12]
 800f31c:	689b      	ldr	r3, [r3, #8]
 800f31e:	4618      	mov	r0, r3
 800f320:	f000 ff6c 	bl	80101fc <xTaskPriorityDisinherit>
 800f324:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800f326:	68fb      	ldr	r3, [r7, #12]
 800f328:	2200      	movs	r2, #0
 800f32a:	609a      	str	r2, [r3, #8]
 800f32c:	e043      	b.n	800f3b6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	2b00      	cmp	r3, #0
 800f332:	d119      	bne.n	800f368 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f334:	68fb      	ldr	r3, [r7, #12]
 800f336:	6858      	ldr	r0, [r3, #4]
 800f338:	68fb      	ldr	r3, [r7, #12]
 800f33a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f33c:	461a      	mov	r2, r3
 800f33e:	68b9      	ldr	r1, [r7, #8]
 800f340:	f001 fc6e 	bl	8010c20 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f344:	68fb      	ldr	r3, [r7, #12]
 800f346:	685a      	ldr	r2, [r3, #4]
 800f348:	68fb      	ldr	r3, [r7, #12]
 800f34a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f34c:	441a      	add	r2, r3
 800f34e:	68fb      	ldr	r3, [r7, #12]
 800f350:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f352:	68fb      	ldr	r3, [r7, #12]
 800f354:	685a      	ldr	r2, [r3, #4]
 800f356:	68fb      	ldr	r3, [r7, #12]
 800f358:	689b      	ldr	r3, [r3, #8]
 800f35a:	429a      	cmp	r2, r3
 800f35c:	d32b      	bcc.n	800f3b6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800f35e:	68fb      	ldr	r3, [r7, #12]
 800f360:	681a      	ldr	r2, [r3, #0]
 800f362:	68fb      	ldr	r3, [r7, #12]
 800f364:	605a      	str	r2, [r3, #4]
 800f366:	e026      	b.n	800f3b6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800f368:	68fb      	ldr	r3, [r7, #12]
 800f36a:	68d8      	ldr	r0, [r3, #12]
 800f36c:	68fb      	ldr	r3, [r7, #12]
 800f36e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f370:	461a      	mov	r2, r3
 800f372:	68b9      	ldr	r1, [r7, #8]
 800f374:	f001 fc54 	bl	8010c20 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800f378:	68fb      	ldr	r3, [r7, #12]
 800f37a:	68da      	ldr	r2, [r3, #12]
 800f37c:	68fb      	ldr	r3, [r7, #12]
 800f37e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f380:	425b      	negs	r3, r3
 800f382:	441a      	add	r2, r3
 800f384:	68fb      	ldr	r3, [r7, #12]
 800f386:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f388:	68fb      	ldr	r3, [r7, #12]
 800f38a:	68da      	ldr	r2, [r3, #12]
 800f38c:	68fb      	ldr	r3, [r7, #12]
 800f38e:	681b      	ldr	r3, [r3, #0]
 800f390:	429a      	cmp	r2, r3
 800f392:	d207      	bcs.n	800f3a4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800f394:	68fb      	ldr	r3, [r7, #12]
 800f396:	689a      	ldr	r2, [r3, #8]
 800f398:	68fb      	ldr	r3, [r7, #12]
 800f39a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f39c:	425b      	negs	r3, r3
 800f39e:	441a      	add	r2, r3
 800f3a0:	68fb      	ldr	r3, [r7, #12]
 800f3a2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	2b02      	cmp	r3, #2
 800f3a8:	d105      	bne.n	800f3b6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f3aa:	693b      	ldr	r3, [r7, #16]
 800f3ac:	2b00      	cmp	r3, #0
 800f3ae:	d002      	beq.n	800f3b6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800f3b0:	693b      	ldr	r3, [r7, #16]
 800f3b2:	3b01      	subs	r3, #1
 800f3b4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800f3b6:	693b      	ldr	r3, [r7, #16]
 800f3b8:	1c5a      	adds	r2, r3, #1
 800f3ba:	68fb      	ldr	r3, [r7, #12]
 800f3bc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800f3be:	697b      	ldr	r3, [r7, #20]
}
 800f3c0:	4618      	mov	r0, r3
 800f3c2:	3718      	adds	r7, #24
 800f3c4:	46bd      	mov	sp, r7
 800f3c6:	bd80      	pop	{r7, pc}

0800f3c8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800f3c8:	b580      	push	{r7, lr}
 800f3ca:	b082      	sub	sp, #8
 800f3cc:	af00      	add	r7, sp, #0
 800f3ce:	6078      	str	r0, [r7, #4]
 800f3d0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f3d6:	2b00      	cmp	r3, #0
 800f3d8:	d018      	beq.n	800f40c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	68da      	ldr	r2, [r3, #12]
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f3e2:	441a      	add	r2, r3
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	68da      	ldr	r2, [r3, #12]
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	689b      	ldr	r3, [r3, #8]
 800f3f0:	429a      	cmp	r2, r3
 800f3f2:	d303      	bcc.n	800f3fc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	681a      	ldr	r2, [r3, #0]
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	68d9      	ldr	r1, [r3, #12]
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f404:	461a      	mov	r2, r3
 800f406:	6838      	ldr	r0, [r7, #0]
 800f408:	f001 fc0a 	bl	8010c20 <memcpy>
	}
}
 800f40c:	bf00      	nop
 800f40e:	3708      	adds	r7, #8
 800f410:	46bd      	mov	sp, r7
 800f412:	bd80      	pop	{r7, pc}

0800f414 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800f414:	b580      	push	{r7, lr}
 800f416:	b084      	sub	sp, #16
 800f418:	af00      	add	r7, sp, #0
 800f41a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800f41c:	f001 f90a 	bl	8010634 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f426:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f428:	e011      	b.n	800f44e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f42e:	2b00      	cmp	r3, #0
 800f430:	d012      	beq.n	800f458 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	3324      	adds	r3, #36	; 0x24
 800f436:	4618      	mov	r0, r3
 800f438:	f000 fd06 	bl	800fe48 <xTaskRemoveFromEventList>
 800f43c:	4603      	mov	r3, r0
 800f43e:	2b00      	cmp	r3, #0
 800f440:	d001      	beq.n	800f446 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800f442:	f000 fddb 	bl	800fffc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800f446:	7bfb      	ldrb	r3, [r7, #15]
 800f448:	3b01      	subs	r3, #1
 800f44a:	b2db      	uxtb	r3, r3
 800f44c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f44e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f452:	2b00      	cmp	r3, #0
 800f454:	dce9      	bgt.n	800f42a <prvUnlockQueue+0x16>
 800f456:	e000      	b.n	800f45a <prvUnlockQueue+0x46>
					break;
 800f458:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	22ff      	movs	r2, #255	; 0xff
 800f45e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800f462:	f001 f917 	bl	8010694 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800f466:	f001 f8e5 	bl	8010634 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f470:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f472:	e011      	b.n	800f498 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	691b      	ldr	r3, [r3, #16]
 800f478:	2b00      	cmp	r3, #0
 800f47a:	d012      	beq.n	800f4a2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	3310      	adds	r3, #16
 800f480:	4618      	mov	r0, r3
 800f482:	f000 fce1 	bl	800fe48 <xTaskRemoveFromEventList>
 800f486:	4603      	mov	r3, r0
 800f488:	2b00      	cmp	r3, #0
 800f48a:	d001      	beq.n	800f490 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800f48c:	f000 fdb6 	bl	800fffc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800f490:	7bbb      	ldrb	r3, [r7, #14]
 800f492:	3b01      	subs	r3, #1
 800f494:	b2db      	uxtb	r3, r3
 800f496:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f498:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f49c:	2b00      	cmp	r3, #0
 800f49e:	dce9      	bgt.n	800f474 <prvUnlockQueue+0x60>
 800f4a0:	e000      	b.n	800f4a4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800f4a2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	22ff      	movs	r2, #255	; 0xff
 800f4a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800f4ac:	f001 f8f2 	bl	8010694 <vPortExitCritical>
}
 800f4b0:	bf00      	nop
 800f4b2:	3710      	adds	r7, #16
 800f4b4:	46bd      	mov	sp, r7
 800f4b6:	bd80      	pop	{r7, pc}

0800f4b8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800f4b8:	b580      	push	{r7, lr}
 800f4ba:	b084      	sub	sp, #16
 800f4bc:	af00      	add	r7, sp, #0
 800f4be:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f4c0:	f001 f8b8 	bl	8010634 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f4c8:	2b00      	cmp	r3, #0
 800f4ca:	d102      	bne.n	800f4d2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800f4cc:	2301      	movs	r3, #1
 800f4ce:	60fb      	str	r3, [r7, #12]
 800f4d0:	e001      	b.n	800f4d6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800f4d2:	2300      	movs	r3, #0
 800f4d4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f4d6:	f001 f8dd 	bl	8010694 <vPortExitCritical>

	return xReturn;
 800f4da:	68fb      	ldr	r3, [r7, #12]
}
 800f4dc:	4618      	mov	r0, r3
 800f4de:	3710      	adds	r7, #16
 800f4e0:	46bd      	mov	sp, r7
 800f4e2:	bd80      	pop	{r7, pc}

0800f4e4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800f4e4:	b580      	push	{r7, lr}
 800f4e6:	b084      	sub	sp, #16
 800f4e8:	af00      	add	r7, sp, #0
 800f4ea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f4ec:	f001 f8a2 	bl	8010634 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f4f8:	429a      	cmp	r2, r3
 800f4fa:	d102      	bne.n	800f502 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800f4fc:	2301      	movs	r3, #1
 800f4fe:	60fb      	str	r3, [r7, #12]
 800f500:	e001      	b.n	800f506 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800f502:	2300      	movs	r3, #0
 800f504:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f506:	f001 f8c5 	bl	8010694 <vPortExitCritical>

	return xReturn;
 800f50a:	68fb      	ldr	r3, [r7, #12]
}
 800f50c:	4618      	mov	r0, r3
 800f50e:	3710      	adds	r7, #16
 800f510:	46bd      	mov	sp, r7
 800f512:	bd80      	pop	{r7, pc}

0800f514 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800f514:	b580      	push	{r7, lr}
 800f516:	b08e      	sub	sp, #56	; 0x38
 800f518:	af04      	add	r7, sp, #16
 800f51a:	60f8      	str	r0, [r7, #12]
 800f51c:	60b9      	str	r1, [r7, #8]
 800f51e:	607a      	str	r2, [r7, #4]
 800f520:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800f522:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f524:	2b00      	cmp	r3, #0
 800f526:	d10a      	bne.n	800f53e <xTaskCreateStatic+0x2a>
	__asm volatile
 800f528:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f52c:	f383 8811 	msr	BASEPRI, r3
 800f530:	f3bf 8f6f 	isb	sy
 800f534:	f3bf 8f4f 	dsb	sy
 800f538:	623b      	str	r3, [r7, #32]
}
 800f53a:	bf00      	nop
 800f53c:	e7fe      	b.n	800f53c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800f53e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f540:	2b00      	cmp	r3, #0
 800f542:	d10a      	bne.n	800f55a <xTaskCreateStatic+0x46>
	__asm volatile
 800f544:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f548:	f383 8811 	msr	BASEPRI, r3
 800f54c:	f3bf 8f6f 	isb	sy
 800f550:	f3bf 8f4f 	dsb	sy
 800f554:	61fb      	str	r3, [r7, #28]
}
 800f556:	bf00      	nop
 800f558:	e7fe      	b.n	800f558 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800f55a:	2354      	movs	r3, #84	; 0x54
 800f55c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800f55e:	693b      	ldr	r3, [r7, #16]
 800f560:	2b54      	cmp	r3, #84	; 0x54
 800f562:	d00a      	beq.n	800f57a <xTaskCreateStatic+0x66>
	__asm volatile
 800f564:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f568:	f383 8811 	msr	BASEPRI, r3
 800f56c:	f3bf 8f6f 	isb	sy
 800f570:	f3bf 8f4f 	dsb	sy
 800f574:	61bb      	str	r3, [r7, #24]
}
 800f576:	bf00      	nop
 800f578:	e7fe      	b.n	800f578 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800f57a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800f57c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f57e:	2b00      	cmp	r3, #0
 800f580:	d01e      	beq.n	800f5c0 <xTaskCreateStatic+0xac>
 800f582:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f584:	2b00      	cmp	r3, #0
 800f586:	d01b      	beq.n	800f5c0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f58a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800f58c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f58e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f590:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800f592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f594:	2202      	movs	r2, #2
 800f596:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800f59a:	2300      	movs	r3, #0
 800f59c:	9303      	str	r3, [sp, #12]
 800f59e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5a0:	9302      	str	r3, [sp, #8]
 800f5a2:	f107 0314 	add.w	r3, r7, #20
 800f5a6:	9301      	str	r3, [sp, #4]
 800f5a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5aa:	9300      	str	r3, [sp, #0]
 800f5ac:	683b      	ldr	r3, [r7, #0]
 800f5ae:	687a      	ldr	r2, [r7, #4]
 800f5b0:	68b9      	ldr	r1, [r7, #8]
 800f5b2:	68f8      	ldr	r0, [r7, #12]
 800f5b4:	f000 f850 	bl	800f658 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f5b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f5ba:	f000 f8d5 	bl	800f768 <prvAddNewTaskToReadyList>
 800f5be:	e001      	b.n	800f5c4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800f5c0:	2300      	movs	r3, #0
 800f5c2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800f5c4:	697b      	ldr	r3, [r7, #20]
	}
 800f5c6:	4618      	mov	r0, r3
 800f5c8:	3728      	adds	r7, #40	; 0x28
 800f5ca:	46bd      	mov	sp, r7
 800f5cc:	bd80      	pop	{r7, pc}

0800f5ce <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800f5ce:	b580      	push	{r7, lr}
 800f5d0:	b08c      	sub	sp, #48	; 0x30
 800f5d2:	af04      	add	r7, sp, #16
 800f5d4:	60f8      	str	r0, [r7, #12]
 800f5d6:	60b9      	str	r1, [r7, #8]
 800f5d8:	603b      	str	r3, [r7, #0]
 800f5da:	4613      	mov	r3, r2
 800f5dc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800f5de:	88fb      	ldrh	r3, [r7, #6]
 800f5e0:	009b      	lsls	r3, r3, #2
 800f5e2:	4618      	mov	r0, r3
 800f5e4:	f001 f908 	bl	80107f8 <pvPortMalloc>
 800f5e8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800f5ea:	697b      	ldr	r3, [r7, #20]
 800f5ec:	2b00      	cmp	r3, #0
 800f5ee:	d00e      	beq.n	800f60e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800f5f0:	2054      	movs	r0, #84	; 0x54
 800f5f2:	f001 f901 	bl	80107f8 <pvPortMalloc>
 800f5f6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800f5f8:	69fb      	ldr	r3, [r7, #28]
 800f5fa:	2b00      	cmp	r3, #0
 800f5fc:	d003      	beq.n	800f606 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800f5fe:	69fb      	ldr	r3, [r7, #28]
 800f600:	697a      	ldr	r2, [r7, #20]
 800f602:	631a      	str	r2, [r3, #48]	; 0x30
 800f604:	e005      	b.n	800f612 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800f606:	6978      	ldr	r0, [r7, #20]
 800f608:	f001 f9c2 	bl	8010990 <vPortFree>
 800f60c:	e001      	b.n	800f612 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800f60e:	2300      	movs	r3, #0
 800f610:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800f612:	69fb      	ldr	r3, [r7, #28]
 800f614:	2b00      	cmp	r3, #0
 800f616:	d017      	beq.n	800f648 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800f618:	69fb      	ldr	r3, [r7, #28]
 800f61a:	2200      	movs	r2, #0
 800f61c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800f620:	88fa      	ldrh	r2, [r7, #6]
 800f622:	2300      	movs	r3, #0
 800f624:	9303      	str	r3, [sp, #12]
 800f626:	69fb      	ldr	r3, [r7, #28]
 800f628:	9302      	str	r3, [sp, #8]
 800f62a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f62c:	9301      	str	r3, [sp, #4]
 800f62e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f630:	9300      	str	r3, [sp, #0]
 800f632:	683b      	ldr	r3, [r7, #0]
 800f634:	68b9      	ldr	r1, [r7, #8]
 800f636:	68f8      	ldr	r0, [r7, #12]
 800f638:	f000 f80e 	bl	800f658 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f63c:	69f8      	ldr	r0, [r7, #28]
 800f63e:	f000 f893 	bl	800f768 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800f642:	2301      	movs	r3, #1
 800f644:	61bb      	str	r3, [r7, #24]
 800f646:	e002      	b.n	800f64e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800f648:	f04f 33ff 	mov.w	r3, #4294967295
 800f64c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800f64e:	69bb      	ldr	r3, [r7, #24]
	}
 800f650:	4618      	mov	r0, r3
 800f652:	3720      	adds	r7, #32
 800f654:	46bd      	mov	sp, r7
 800f656:	bd80      	pop	{r7, pc}

0800f658 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800f658:	b580      	push	{r7, lr}
 800f65a:	b088      	sub	sp, #32
 800f65c:	af00      	add	r7, sp, #0
 800f65e:	60f8      	str	r0, [r7, #12]
 800f660:	60b9      	str	r1, [r7, #8]
 800f662:	607a      	str	r2, [r7, #4]
 800f664:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800f666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f668:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800f670:	3b01      	subs	r3, #1
 800f672:	009b      	lsls	r3, r3, #2
 800f674:	4413      	add	r3, r2
 800f676:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800f678:	69bb      	ldr	r3, [r7, #24]
 800f67a:	f023 0307 	bic.w	r3, r3, #7
 800f67e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800f680:	69bb      	ldr	r3, [r7, #24]
 800f682:	f003 0307 	and.w	r3, r3, #7
 800f686:	2b00      	cmp	r3, #0
 800f688:	d00a      	beq.n	800f6a0 <prvInitialiseNewTask+0x48>
	__asm volatile
 800f68a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f68e:	f383 8811 	msr	BASEPRI, r3
 800f692:	f3bf 8f6f 	isb	sy
 800f696:	f3bf 8f4f 	dsb	sy
 800f69a:	617b      	str	r3, [r7, #20]
}
 800f69c:	bf00      	nop
 800f69e:	e7fe      	b.n	800f69e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800f6a0:	68bb      	ldr	r3, [r7, #8]
 800f6a2:	2b00      	cmp	r3, #0
 800f6a4:	d01f      	beq.n	800f6e6 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f6a6:	2300      	movs	r3, #0
 800f6a8:	61fb      	str	r3, [r7, #28]
 800f6aa:	e012      	b.n	800f6d2 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800f6ac:	68ba      	ldr	r2, [r7, #8]
 800f6ae:	69fb      	ldr	r3, [r7, #28]
 800f6b0:	4413      	add	r3, r2
 800f6b2:	7819      	ldrb	r1, [r3, #0]
 800f6b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f6b6:	69fb      	ldr	r3, [r7, #28]
 800f6b8:	4413      	add	r3, r2
 800f6ba:	3334      	adds	r3, #52	; 0x34
 800f6bc:	460a      	mov	r2, r1
 800f6be:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800f6c0:	68ba      	ldr	r2, [r7, #8]
 800f6c2:	69fb      	ldr	r3, [r7, #28]
 800f6c4:	4413      	add	r3, r2
 800f6c6:	781b      	ldrb	r3, [r3, #0]
 800f6c8:	2b00      	cmp	r3, #0
 800f6ca:	d006      	beq.n	800f6da <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f6cc:	69fb      	ldr	r3, [r7, #28]
 800f6ce:	3301      	adds	r3, #1
 800f6d0:	61fb      	str	r3, [r7, #28]
 800f6d2:	69fb      	ldr	r3, [r7, #28]
 800f6d4:	2b0f      	cmp	r3, #15
 800f6d6:	d9e9      	bls.n	800f6ac <prvInitialiseNewTask+0x54>
 800f6d8:	e000      	b.n	800f6dc <prvInitialiseNewTask+0x84>
			{
				break;
 800f6da:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800f6dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6de:	2200      	movs	r2, #0
 800f6e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f6e4:	e003      	b.n	800f6ee <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800f6e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6e8:	2200      	movs	r2, #0
 800f6ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800f6ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6f0:	2b06      	cmp	r3, #6
 800f6f2:	d901      	bls.n	800f6f8 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800f6f4:	2306      	movs	r3, #6
 800f6f6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800f6f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f6fc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800f6fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f700:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f702:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800f704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f706:	2200      	movs	r2, #0
 800f708:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800f70a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f70c:	3304      	adds	r3, #4
 800f70e:	4618      	mov	r0, r3
 800f710:	f7ff fabb 	bl	800ec8a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800f714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f716:	3318      	adds	r3, #24
 800f718:	4618      	mov	r0, r3
 800f71a:	f7ff fab6 	bl	800ec8a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800f71e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f720:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f722:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f726:	f1c3 0207 	rsb	r2, r3, #7
 800f72a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f72c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800f72e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f730:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f732:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800f734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f736:	2200      	movs	r2, #0
 800f738:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800f73a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f73c:	2200      	movs	r2, #0
 800f73e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800f742:	683a      	ldr	r2, [r7, #0]
 800f744:	68f9      	ldr	r1, [r7, #12]
 800f746:	69b8      	ldr	r0, [r7, #24]
 800f748:	f000 fe44 	bl	80103d4 <pxPortInitialiseStack>
 800f74c:	4602      	mov	r2, r0
 800f74e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f750:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800f752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f754:	2b00      	cmp	r3, #0
 800f756:	d002      	beq.n	800f75e <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800f758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f75a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f75c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f75e:	bf00      	nop
 800f760:	3720      	adds	r7, #32
 800f762:	46bd      	mov	sp, r7
 800f764:	bd80      	pop	{r7, pc}
	...

0800f768 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800f768:	b580      	push	{r7, lr}
 800f76a:	b082      	sub	sp, #8
 800f76c:	af00      	add	r7, sp, #0
 800f76e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800f770:	f000 ff60 	bl	8010634 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800f774:	4b2a      	ldr	r3, [pc, #168]	; (800f820 <prvAddNewTaskToReadyList+0xb8>)
 800f776:	681b      	ldr	r3, [r3, #0]
 800f778:	3301      	adds	r3, #1
 800f77a:	4a29      	ldr	r2, [pc, #164]	; (800f820 <prvAddNewTaskToReadyList+0xb8>)
 800f77c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800f77e:	4b29      	ldr	r3, [pc, #164]	; (800f824 <prvAddNewTaskToReadyList+0xbc>)
 800f780:	681b      	ldr	r3, [r3, #0]
 800f782:	2b00      	cmp	r3, #0
 800f784:	d109      	bne.n	800f79a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800f786:	4a27      	ldr	r2, [pc, #156]	; (800f824 <prvAddNewTaskToReadyList+0xbc>)
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800f78c:	4b24      	ldr	r3, [pc, #144]	; (800f820 <prvAddNewTaskToReadyList+0xb8>)
 800f78e:	681b      	ldr	r3, [r3, #0]
 800f790:	2b01      	cmp	r3, #1
 800f792:	d110      	bne.n	800f7b6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800f794:	f000 fc56 	bl	8010044 <prvInitialiseTaskLists>
 800f798:	e00d      	b.n	800f7b6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800f79a:	4b23      	ldr	r3, [pc, #140]	; (800f828 <prvAddNewTaskToReadyList+0xc0>)
 800f79c:	681b      	ldr	r3, [r3, #0]
 800f79e:	2b00      	cmp	r3, #0
 800f7a0:	d109      	bne.n	800f7b6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800f7a2:	4b20      	ldr	r3, [pc, #128]	; (800f824 <prvAddNewTaskToReadyList+0xbc>)
 800f7a4:	681b      	ldr	r3, [r3, #0]
 800f7a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f7ac:	429a      	cmp	r2, r3
 800f7ae:	d802      	bhi.n	800f7b6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800f7b0:	4a1c      	ldr	r2, [pc, #112]	; (800f824 <prvAddNewTaskToReadyList+0xbc>)
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800f7b6:	4b1d      	ldr	r3, [pc, #116]	; (800f82c <prvAddNewTaskToReadyList+0xc4>)
 800f7b8:	681b      	ldr	r3, [r3, #0]
 800f7ba:	3301      	adds	r3, #1
 800f7bc:	4a1b      	ldr	r2, [pc, #108]	; (800f82c <prvAddNewTaskToReadyList+0xc4>)
 800f7be:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f7c4:	2201      	movs	r2, #1
 800f7c6:	409a      	lsls	r2, r3
 800f7c8:	4b19      	ldr	r3, [pc, #100]	; (800f830 <prvAddNewTaskToReadyList+0xc8>)
 800f7ca:	681b      	ldr	r3, [r3, #0]
 800f7cc:	4313      	orrs	r3, r2
 800f7ce:	4a18      	ldr	r2, [pc, #96]	; (800f830 <prvAddNewTaskToReadyList+0xc8>)
 800f7d0:	6013      	str	r3, [r2, #0]
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f7d6:	4613      	mov	r3, r2
 800f7d8:	009b      	lsls	r3, r3, #2
 800f7da:	4413      	add	r3, r2
 800f7dc:	009b      	lsls	r3, r3, #2
 800f7de:	4a15      	ldr	r2, [pc, #84]	; (800f834 <prvAddNewTaskToReadyList+0xcc>)
 800f7e0:	441a      	add	r2, r3
 800f7e2:	687b      	ldr	r3, [r7, #4]
 800f7e4:	3304      	adds	r3, #4
 800f7e6:	4619      	mov	r1, r3
 800f7e8:	4610      	mov	r0, r2
 800f7ea:	f7ff fa5b 	bl	800eca4 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800f7ee:	f000 ff51 	bl	8010694 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800f7f2:	4b0d      	ldr	r3, [pc, #52]	; (800f828 <prvAddNewTaskToReadyList+0xc0>)
 800f7f4:	681b      	ldr	r3, [r3, #0]
 800f7f6:	2b00      	cmp	r3, #0
 800f7f8:	d00e      	beq.n	800f818 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800f7fa:	4b0a      	ldr	r3, [pc, #40]	; (800f824 <prvAddNewTaskToReadyList+0xbc>)
 800f7fc:	681b      	ldr	r3, [r3, #0]
 800f7fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f804:	429a      	cmp	r2, r3
 800f806:	d207      	bcs.n	800f818 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800f808:	4b0b      	ldr	r3, [pc, #44]	; (800f838 <prvAddNewTaskToReadyList+0xd0>)
 800f80a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f80e:	601a      	str	r2, [r3, #0]
 800f810:	f3bf 8f4f 	dsb	sy
 800f814:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f818:	bf00      	nop
 800f81a:	3708      	adds	r7, #8
 800f81c:	46bd      	mov	sp, r7
 800f81e:	bd80      	pop	{r7, pc}
 800f820:	20002d00 	.word	0x20002d00
 800f824:	20002c00 	.word	0x20002c00
 800f828:	20002d0c 	.word	0x20002d0c
 800f82c:	20002d1c 	.word	0x20002d1c
 800f830:	20002d08 	.word	0x20002d08
 800f834:	20002c04 	.word	0x20002c04
 800f838:	e000ed04 	.word	0xe000ed04

0800f83c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800f83c:	b580      	push	{r7, lr}
 800f83e:	b084      	sub	sp, #16
 800f840:	af00      	add	r7, sp, #0
 800f842:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800f844:	2300      	movs	r3, #0
 800f846:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800f848:	687b      	ldr	r3, [r7, #4]
 800f84a:	2b00      	cmp	r3, #0
 800f84c:	d017      	beq.n	800f87e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800f84e:	4b13      	ldr	r3, [pc, #76]	; (800f89c <vTaskDelay+0x60>)
 800f850:	681b      	ldr	r3, [r3, #0]
 800f852:	2b00      	cmp	r3, #0
 800f854:	d00a      	beq.n	800f86c <vTaskDelay+0x30>
	__asm volatile
 800f856:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f85a:	f383 8811 	msr	BASEPRI, r3
 800f85e:	f3bf 8f6f 	isb	sy
 800f862:	f3bf 8f4f 	dsb	sy
 800f866:	60bb      	str	r3, [r7, #8]
}
 800f868:	bf00      	nop
 800f86a:	e7fe      	b.n	800f86a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800f86c:	f000 f90a 	bl	800fa84 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800f870:	2100      	movs	r1, #0
 800f872:	6878      	ldr	r0, [r7, #4]
 800f874:	f000 fd48 	bl	8010308 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800f878:	f000 f912 	bl	800faa0 <xTaskResumeAll>
 800f87c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800f87e:	68fb      	ldr	r3, [r7, #12]
 800f880:	2b00      	cmp	r3, #0
 800f882:	d107      	bne.n	800f894 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800f884:	4b06      	ldr	r3, [pc, #24]	; (800f8a0 <vTaskDelay+0x64>)
 800f886:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f88a:	601a      	str	r2, [r3, #0]
 800f88c:	f3bf 8f4f 	dsb	sy
 800f890:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f894:	bf00      	nop
 800f896:	3710      	adds	r7, #16
 800f898:	46bd      	mov	sp, r7
 800f89a:	bd80      	pop	{r7, pc}
 800f89c:	20002d28 	.word	0x20002d28
 800f8a0:	e000ed04 	.word	0xe000ed04

0800f8a4 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 800f8a4:	b480      	push	{r7}
 800f8a6:	b087      	sub	sp, #28
 800f8a8:	af00      	add	r7, sp, #0
 800f8aa:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 800f8ac:	2300      	movs	r3, #0
 800f8ae:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	2b00      	cmp	r3, #0
 800f8b8:	d10a      	bne.n	800f8d0 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 800f8ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8be:	f383 8811 	msr	BASEPRI, r3
 800f8c2:	f3bf 8f6f 	isb	sy
 800f8c6:	f3bf 8f4f 	dsb	sy
 800f8ca:	60fb      	str	r3, [r7, #12]
}
 800f8cc:	bf00      	nop
 800f8ce:	e7fe      	b.n	800f8ce <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800f8d0:	693b      	ldr	r3, [r7, #16]
 800f8d2:	695b      	ldr	r3, [r3, #20]
 800f8d4:	4a0a      	ldr	r2, [pc, #40]	; (800f900 <prvTaskIsTaskSuspended+0x5c>)
 800f8d6:	4293      	cmp	r3, r2
 800f8d8:	d10a      	bne.n	800f8f0 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800f8da:	693b      	ldr	r3, [r7, #16]
 800f8dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f8de:	4a09      	ldr	r2, [pc, #36]	; (800f904 <prvTaskIsTaskSuspended+0x60>)
 800f8e0:	4293      	cmp	r3, r2
 800f8e2:	d005      	beq.n	800f8f0 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 800f8e4:	693b      	ldr	r3, [r7, #16]
 800f8e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f8e8:	2b00      	cmp	r3, #0
 800f8ea:	d101      	bne.n	800f8f0 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 800f8ec:	2301      	movs	r3, #1
 800f8ee:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800f8f0:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800f8f2:	4618      	mov	r0, r3
 800f8f4:	371c      	adds	r7, #28
 800f8f6:	46bd      	mov	sp, r7
 800f8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8fc:	4770      	bx	lr
 800f8fe:	bf00      	nop
 800f900:	20002cec 	.word	0x20002cec
 800f904:	20002cc0 	.word	0x20002cc0

0800f908 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 800f908:	b580      	push	{r7, lr}
 800f90a:	b084      	sub	sp, #16
 800f90c:	af00      	add	r7, sp, #0
 800f90e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	2b00      	cmp	r3, #0
 800f918:	d10a      	bne.n	800f930 <vTaskResume+0x28>
	__asm volatile
 800f91a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f91e:	f383 8811 	msr	BASEPRI, r3
 800f922:	f3bf 8f6f 	isb	sy
 800f926:	f3bf 8f4f 	dsb	sy
 800f92a:	60bb      	str	r3, [r7, #8]
}
 800f92c:	bf00      	nop
 800f92e:	e7fe      	b.n	800f92e <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 800f930:	4b20      	ldr	r3, [pc, #128]	; (800f9b4 <vTaskResume+0xac>)
 800f932:	681b      	ldr	r3, [r3, #0]
 800f934:	68fa      	ldr	r2, [r7, #12]
 800f936:	429a      	cmp	r2, r3
 800f938:	d037      	beq.n	800f9aa <vTaskResume+0xa2>
 800f93a:	68fb      	ldr	r3, [r7, #12]
 800f93c:	2b00      	cmp	r3, #0
 800f93e:	d034      	beq.n	800f9aa <vTaskResume+0xa2>
		{
			taskENTER_CRITICAL();
 800f940:	f000 fe78 	bl	8010634 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800f944:	68f8      	ldr	r0, [r7, #12]
 800f946:	f7ff ffad 	bl	800f8a4 <prvTaskIsTaskSuspended>
 800f94a:	4603      	mov	r3, r0
 800f94c:	2b00      	cmp	r3, #0
 800f94e:	d02a      	beq.n	800f9a6 <vTaskResume+0x9e>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 800f950:	68fb      	ldr	r3, [r7, #12]
 800f952:	3304      	adds	r3, #4
 800f954:	4618      	mov	r0, r3
 800f956:	f7ff fa02 	bl	800ed5e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f95a:	68fb      	ldr	r3, [r7, #12]
 800f95c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f95e:	2201      	movs	r2, #1
 800f960:	409a      	lsls	r2, r3
 800f962:	4b15      	ldr	r3, [pc, #84]	; (800f9b8 <vTaskResume+0xb0>)
 800f964:	681b      	ldr	r3, [r3, #0]
 800f966:	4313      	orrs	r3, r2
 800f968:	4a13      	ldr	r2, [pc, #76]	; (800f9b8 <vTaskResume+0xb0>)
 800f96a:	6013      	str	r3, [r2, #0]
 800f96c:	68fb      	ldr	r3, [r7, #12]
 800f96e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f970:	4613      	mov	r3, r2
 800f972:	009b      	lsls	r3, r3, #2
 800f974:	4413      	add	r3, r2
 800f976:	009b      	lsls	r3, r3, #2
 800f978:	4a10      	ldr	r2, [pc, #64]	; (800f9bc <vTaskResume+0xb4>)
 800f97a:	441a      	add	r2, r3
 800f97c:	68fb      	ldr	r3, [r7, #12]
 800f97e:	3304      	adds	r3, #4
 800f980:	4619      	mov	r1, r3
 800f982:	4610      	mov	r0, r2
 800f984:	f7ff f98e 	bl	800eca4 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f988:	68fb      	ldr	r3, [r7, #12]
 800f98a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f98c:	4b09      	ldr	r3, [pc, #36]	; (800f9b4 <vTaskResume+0xac>)
 800f98e:	681b      	ldr	r3, [r3, #0]
 800f990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f992:	429a      	cmp	r2, r3
 800f994:	d307      	bcc.n	800f9a6 <vTaskResume+0x9e>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 800f996:	4b0a      	ldr	r3, [pc, #40]	; (800f9c0 <vTaskResume+0xb8>)
 800f998:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f99c:	601a      	str	r2, [r3, #0]
 800f99e:	f3bf 8f4f 	dsb	sy
 800f9a2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 800f9a6:	f000 fe75 	bl	8010694 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f9aa:	bf00      	nop
 800f9ac:	3710      	adds	r7, #16
 800f9ae:	46bd      	mov	sp, r7
 800f9b0:	bd80      	pop	{r7, pc}
 800f9b2:	bf00      	nop
 800f9b4:	20002c00 	.word	0x20002c00
 800f9b8:	20002d08 	.word	0x20002d08
 800f9bc:	20002c04 	.word	0x20002c04
 800f9c0:	e000ed04 	.word	0xe000ed04

0800f9c4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800f9c4:	b580      	push	{r7, lr}
 800f9c6:	b08a      	sub	sp, #40	; 0x28
 800f9c8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800f9ca:	2300      	movs	r3, #0
 800f9cc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800f9ce:	2300      	movs	r3, #0
 800f9d0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800f9d2:	463a      	mov	r2, r7
 800f9d4:	1d39      	adds	r1, r7, #4
 800f9d6:	f107 0308 	add.w	r3, r7, #8
 800f9da:	4618      	mov	r0, r3
 800f9dc:	f7f1 fad6 	bl	8000f8c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800f9e0:	6839      	ldr	r1, [r7, #0]
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	68ba      	ldr	r2, [r7, #8]
 800f9e6:	9202      	str	r2, [sp, #8]
 800f9e8:	9301      	str	r3, [sp, #4]
 800f9ea:	2300      	movs	r3, #0
 800f9ec:	9300      	str	r3, [sp, #0]
 800f9ee:	2300      	movs	r3, #0
 800f9f0:	460a      	mov	r2, r1
 800f9f2:	491e      	ldr	r1, [pc, #120]	; (800fa6c <vTaskStartScheduler+0xa8>)
 800f9f4:	481e      	ldr	r0, [pc, #120]	; (800fa70 <vTaskStartScheduler+0xac>)
 800f9f6:	f7ff fd8d 	bl	800f514 <xTaskCreateStatic>
 800f9fa:	4603      	mov	r3, r0
 800f9fc:	4a1d      	ldr	r2, [pc, #116]	; (800fa74 <vTaskStartScheduler+0xb0>)
 800f9fe:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800fa00:	4b1c      	ldr	r3, [pc, #112]	; (800fa74 <vTaskStartScheduler+0xb0>)
 800fa02:	681b      	ldr	r3, [r3, #0]
 800fa04:	2b00      	cmp	r3, #0
 800fa06:	d002      	beq.n	800fa0e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800fa08:	2301      	movs	r3, #1
 800fa0a:	617b      	str	r3, [r7, #20]
 800fa0c:	e001      	b.n	800fa12 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800fa0e:	2300      	movs	r3, #0
 800fa10:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800fa12:	697b      	ldr	r3, [r7, #20]
 800fa14:	2b01      	cmp	r3, #1
 800fa16:	d116      	bne.n	800fa46 <vTaskStartScheduler+0x82>
	__asm volatile
 800fa18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa1c:	f383 8811 	msr	BASEPRI, r3
 800fa20:	f3bf 8f6f 	isb	sy
 800fa24:	f3bf 8f4f 	dsb	sy
 800fa28:	613b      	str	r3, [r7, #16]
}
 800fa2a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800fa2c:	4b12      	ldr	r3, [pc, #72]	; (800fa78 <vTaskStartScheduler+0xb4>)
 800fa2e:	f04f 32ff 	mov.w	r2, #4294967295
 800fa32:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800fa34:	4b11      	ldr	r3, [pc, #68]	; (800fa7c <vTaskStartScheduler+0xb8>)
 800fa36:	2201      	movs	r2, #1
 800fa38:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800fa3a:	4b11      	ldr	r3, [pc, #68]	; (800fa80 <vTaskStartScheduler+0xbc>)
 800fa3c:	2200      	movs	r2, #0
 800fa3e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800fa40:	f000 fd56 	bl	80104f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800fa44:	e00e      	b.n	800fa64 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800fa46:	697b      	ldr	r3, [r7, #20]
 800fa48:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fa4c:	d10a      	bne.n	800fa64 <vTaskStartScheduler+0xa0>
	__asm volatile
 800fa4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa52:	f383 8811 	msr	BASEPRI, r3
 800fa56:	f3bf 8f6f 	isb	sy
 800fa5a:	f3bf 8f4f 	dsb	sy
 800fa5e:	60fb      	str	r3, [r7, #12]
}
 800fa60:	bf00      	nop
 800fa62:	e7fe      	b.n	800fa62 <vTaskStartScheduler+0x9e>
}
 800fa64:	bf00      	nop
 800fa66:	3718      	adds	r7, #24
 800fa68:	46bd      	mov	sp, r7
 800fa6a:	bd80      	pop	{r7, pc}
 800fa6c:	08016058 	.word	0x08016058
 800fa70:	08010015 	.word	0x08010015
 800fa74:	20002d24 	.word	0x20002d24
 800fa78:	20002d20 	.word	0x20002d20
 800fa7c:	20002d0c 	.word	0x20002d0c
 800fa80:	20002d04 	.word	0x20002d04

0800fa84 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800fa84:	b480      	push	{r7}
 800fa86:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800fa88:	4b04      	ldr	r3, [pc, #16]	; (800fa9c <vTaskSuspendAll+0x18>)
 800fa8a:	681b      	ldr	r3, [r3, #0]
 800fa8c:	3301      	adds	r3, #1
 800fa8e:	4a03      	ldr	r2, [pc, #12]	; (800fa9c <vTaskSuspendAll+0x18>)
 800fa90:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800fa92:	bf00      	nop
 800fa94:	46bd      	mov	sp, r7
 800fa96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa9a:	4770      	bx	lr
 800fa9c:	20002d28 	.word	0x20002d28

0800faa0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800faa0:	b580      	push	{r7, lr}
 800faa2:	b084      	sub	sp, #16
 800faa4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800faa6:	2300      	movs	r3, #0
 800faa8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800faaa:	2300      	movs	r3, #0
 800faac:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800faae:	4b41      	ldr	r3, [pc, #260]	; (800fbb4 <xTaskResumeAll+0x114>)
 800fab0:	681b      	ldr	r3, [r3, #0]
 800fab2:	2b00      	cmp	r3, #0
 800fab4:	d10a      	bne.n	800facc <xTaskResumeAll+0x2c>
	__asm volatile
 800fab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800faba:	f383 8811 	msr	BASEPRI, r3
 800fabe:	f3bf 8f6f 	isb	sy
 800fac2:	f3bf 8f4f 	dsb	sy
 800fac6:	603b      	str	r3, [r7, #0]
}
 800fac8:	bf00      	nop
 800faca:	e7fe      	b.n	800faca <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800facc:	f000 fdb2 	bl	8010634 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800fad0:	4b38      	ldr	r3, [pc, #224]	; (800fbb4 <xTaskResumeAll+0x114>)
 800fad2:	681b      	ldr	r3, [r3, #0]
 800fad4:	3b01      	subs	r3, #1
 800fad6:	4a37      	ldr	r2, [pc, #220]	; (800fbb4 <xTaskResumeAll+0x114>)
 800fad8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fada:	4b36      	ldr	r3, [pc, #216]	; (800fbb4 <xTaskResumeAll+0x114>)
 800fadc:	681b      	ldr	r3, [r3, #0]
 800fade:	2b00      	cmp	r3, #0
 800fae0:	d161      	bne.n	800fba6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800fae2:	4b35      	ldr	r3, [pc, #212]	; (800fbb8 <xTaskResumeAll+0x118>)
 800fae4:	681b      	ldr	r3, [r3, #0]
 800fae6:	2b00      	cmp	r3, #0
 800fae8:	d05d      	beq.n	800fba6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800faea:	e02e      	b.n	800fb4a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800faec:	4b33      	ldr	r3, [pc, #204]	; (800fbbc <xTaskResumeAll+0x11c>)
 800faee:	68db      	ldr	r3, [r3, #12]
 800faf0:	68db      	ldr	r3, [r3, #12]
 800faf2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800faf4:	68fb      	ldr	r3, [r7, #12]
 800faf6:	3318      	adds	r3, #24
 800faf8:	4618      	mov	r0, r3
 800fafa:	f7ff f930 	bl	800ed5e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fafe:	68fb      	ldr	r3, [r7, #12]
 800fb00:	3304      	adds	r3, #4
 800fb02:	4618      	mov	r0, r3
 800fb04:	f7ff f92b 	bl	800ed5e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800fb08:	68fb      	ldr	r3, [r7, #12]
 800fb0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb0c:	2201      	movs	r2, #1
 800fb0e:	409a      	lsls	r2, r3
 800fb10:	4b2b      	ldr	r3, [pc, #172]	; (800fbc0 <xTaskResumeAll+0x120>)
 800fb12:	681b      	ldr	r3, [r3, #0]
 800fb14:	4313      	orrs	r3, r2
 800fb16:	4a2a      	ldr	r2, [pc, #168]	; (800fbc0 <xTaskResumeAll+0x120>)
 800fb18:	6013      	str	r3, [r2, #0]
 800fb1a:	68fb      	ldr	r3, [r7, #12]
 800fb1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fb1e:	4613      	mov	r3, r2
 800fb20:	009b      	lsls	r3, r3, #2
 800fb22:	4413      	add	r3, r2
 800fb24:	009b      	lsls	r3, r3, #2
 800fb26:	4a27      	ldr	r2, [pc, #156]	; (800fbc4 <xTaskResumeAll+0x124>)
 800fb28:	441a      	add	r2, r3
 800fb2a:	68fb      	ldr	r3, [r7, #12]
 800fb2c:	3304      	adds	r3, #4
 800fb2e:	4619      	mov	r1, r3
 800fb30:	4610      	mov	r0, r2
 800fb32:	f7ff f8b7 	bl	800eca4 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800fb36:	68fb      	ldr	r3, [r7, #12]
 800fb38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fb3a:	4b23      	ldr	r3, [pc, #140]	; (800fbc8 <xTaskResumeAll+0x128>)
 800fb3c:	681b      	ldr	r3, [r3, #0]
 800fb3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb40:	429a      	cmp	r2, r3
 800fb42:	d302      	bcc.n	800fb4a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800fb44:	4b21      	ldr	r3, [pc, #132]	; (800fbcc <xTaskResumeAll+0x12c>)
 800fb46:	2201      	movs	r2, #1
 800fb48:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800fb4a:	4b1c      	ldr	r3, [pc, #112]	; (800fbbc <xTaskResumeAll+0x11c>)
 800fb4c:	681b      	ldr	r3, [r3, #0]
 800fb4e:	2b00      	cmp	r3, #0
 800fb50:	d1cc      	bne.n	800faec <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800fb52:	68fb      	ldr	r3, [r7, #12]
 800fb54:	2b00      	cmp	r3, #0
 800fb56:	d001      	beq.n	800fb5c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800fb58:	f000 fb12 	bl	8010180 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800fb5c:	4b1c      	ldr	r3, [pc, #112]	; (800fbd0 <xTaskResumeAll+0x130>)
 800fb5e:	681b      	ldr	r3, [r3, #0]
 800fb60:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	2b00      	cmp	r3, #0
 800fb66:	d010      	beq.n	800fb8a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800fb68:	f000 f836 	bl	800fbd8 <xTaskIncrementTick>
 800fb6c:	4603      	mov	r3, r0
 800fb6e:	2b00      	cmp	r3, #0
 800fb70:	d002      	beq.n	800fb78 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800fb72:	4b16      	ldr	r3, [pc, #88]	; (800fbcc <xTaskResumeAll+0x12c>)
 800fb74:	2201      	movs	r2, #1
 800fb76:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	3b01      	subs	r3, #1
 800fb7c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	2b00      	cmp	r3, #0
 800fb82:	d1f1      	bne.n	800fb68 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800fb84:	4b12      	ldr	r3, [pc, #72]	; (800fbd0 <xTaskResumeAll+0x130>)
 800fb86:	2200      	movs	r2, #0
 800fb88:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800fb8a:	4b10      	ldr	r3, [pc, #64]	; (800fbcc <xTaskResumeAll+0x12c>)
 800fb8c:	681b      	ldr	r3, [r3, #0]
 800fb8e:	2b00      	cmp	r3, #0
 800fb90:	d009      	beq.n	800fba6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800fb92:	2301      	movs	r3, #1
 800fb94:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800fb96:	4b0f      	ldr	r3, [pc, #60]	; (800fbd4 <xTaskResumeAll+0x134>)
 800fb98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fb9c:	601a      	str	r2, [r3, #0]
 800fb9e:	f3bf 8f4f 	dsb	sy
 800fba2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800fba6:	f000 fd75 	bl	8010694 <vPortExitCritical>

	return xAlreadyYielded;
 800fbaa:	68bb      	ldr	r3, [r7, #8]
}
 800fbac:	4618      	mov	r0, r3
 800fbae:	3710      	adds	r7, #16
 800fbb0:	46bd      	mov	sp, r7
 800fbb2:	bd80      	pop	{r7, pc}
 800fbb4:	20002d28 	.word	0x20002d28
 800fbb8:	20002d00 	.word	0x20002d00
 800fbbc:	20002cc0 	.word	0x20002cc0
 800fbc0:	20002d08 	.word	0x20002d08
 800fbc4:	20002c04 	.word	0x20002c04
 800fbc8:	20002c00 	.word	0x20002c00
 800fbcc:	20002d14 	.word	0x20002d14
 800fbd0:	20002d10 	.word	0x20002d10
 800fbd4:	e000ed04 	.word	0xe000ed04

0800fbd8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800fbd8:	b580      	push	{r7, lr}
 800fbda:	b086      	sub	sp, #24
 800fbdc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800fbde:	2300      	movs	r3, #0
 800fbe0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fbe2:	4b4e      	ldr	r3, [pc, #312]	; (800fd1c <xTaskIncrementTick+0x144>)
 800fbe4:	681b      	ldr	r3, [r3, #0]
 800fbe6:	2b00      	cmp	r3, #0
 800fbe8:	f040 808e 	bne.w	800fd08 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800fbec:	4b4c      	ldr	r3, [pc, #304]	; (800fd20 <xTaskIncrementTick+0x148>)
 800fbee:	681b      	ldr	r3, [r3, #0]
 800fbf0:	3301      	adds	r3, #1
 800fbf2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800fbf4:	4a4a      	ldr	r2, [pc, #296]	; (800fd20 <xTaskIncrementTick+0x148>)
 800fbf6:	693b      	ldr	r3, [r7, #16]
 800fbf8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800fbfa:	693b      	ldr	r3, [r7, #16]
 800fbfc:	2b00      	cmp	r3, #0
 800fbfe:	d120      	bne.n	800fc42 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800fc00:	4b48      	ldr	r3, [pc, #288]	; (800fd24 <xTaskIncrementTick+0x14c>)
 800fc02:	681b      	ldr	r3, [r3, #0]
 800fc04:	681b      	ldr	r3, [r3, #0]
 800fc06:	2b00      	cmp	r3, #0
 800fc08:	d00a      	beq.n	800fc20 <xTaskIncrementTick+0x48>
	__asm volatile
 800fc0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc0e:	f383 8811 	msr	BASEPRI, r3
 800fc12:	f3bf 8f6f 	isb	sy
 800fc16:	f3bf 8f4f 	dsb	sy
 800fc1a:	603b      	str	r3, [r7, #0]
}
 800fc1c:	bf00      	nop
 800fc1e:	e7fe      	b.n	800fc1e <xTaskIncrementTick+0x46>
 800fc20:	4b40      	ldr	r3, [pc, #256]	; (800fd24 <xTaskIncrementTick+0x14c>)
 800fc22:	681b      	ldr	r3, [r3, #0]
 800fc24:	60fb      	str	r3, [r7, #12]
 800fc26:	4b40      	ldr	r3, [pc, #256]	; (800fd28 <xTaskIncrementTick+0x150>)
 800fc28:	681b      	ldr	r3, [r3, #0]
 800fc2a:	4a3e      	ldr	r2, [pc, #248]	; (800fd24 <xTaskIncrementTick+0x14c>)
 800fc2c:	6013      	str	r3, [r2, #0]
 800fc2e:	4a3e      	ldr	r2, [pc, #248]	; (800fd28 <xTaskIncrementTick+0x150>)
 800fc30:	68fb      	ldr	r3, [r7, #12]
 800fc32:	6013      	str	r3, [r2, #0]
 800fc34:	4b3d      	ldr	r3, [pc, #244]	; (800fd2c <xTaskIncrementTick+0x154>)
 800fc36:	681b      	ldr	r3, [r3, #0]
 800fc38:	3301      	adds	r3, #1
 800fc3a:	4a3c      	ldr	r2, [pc, #240]	; (800fd2c <xTaskIncrementTick+0x154>)
 800fc3c:	6013      	str	r3, [r2, #0]
 800fc3e:	f000 fa9f 	bl	8010180 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800fc42:	4b3b      	ldr	r3, [pc, #236]	; (800fd30 <xTaskIncrementTick+0x158>)
 800fc44:	681b      	ldr	r3, [r3, #0]
 800fc46:	693a      	ldr	r2, [r7, #16]
 800fc48:	429a      	cmp	r2, r3
 800fc4a:	d348      	bcc.n	800fcde <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fc4c:	4b35      	ldr	r3, [pc, #212]	; (800fd24 <xTaskIncrementTick+0x14c>)
 800fc4e:	681b      	ldr	r3, [r3, #0]
 800fc50:	681b      	ldr	r3, [r3, #0]
 800fc52:	2b00      	cmp	r3, #0
 800fc54:	d104      	bne.n	800fc60 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fc56:	4b36      	ldr	r3, [pc, #216]	; (800fd30 <xTaskIncrementTick+0x158>)
 800fc58:	f04f 32ff 	mov.w	r2, #4294967295
 800fc5c:	601a      	str	r2, [r3, #0]
					break;
 800fc5e:	e03e      	b.n	800fcde <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fc60:	4b30      	ldr	r3, [pc, #192]	; (800fd24 <xTaskIncrementTick+0x14c>)
 800fc62:	681b      	ldr	r3, [r3, #0]
 800fc64:	68db      	ldr	r3, [r3, #12]
 800fc66:	68db      	ldr	r3, [r3, #12]
 800fc68:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800fc6a:	68bb      	ldr	r3, [r7, #8]
 800fc6c:	685b      	ldr	r3, [r3, #4]
 800fc6e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800fc70:	693a      	ldr	r2, [r7, #16]
 800fc72:	687b      	ldr	r3, [r7, #4]
 800fc74:	429a      	cmp	r2, r3
 800fc76:	d203      	bcs.n	800fc80 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800fc78:	4a2d      	ldr	r2, [pc, #180]	; (800fd30 <xTaskIncrementTick+0x158>)
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800fc7e:	e02e      	b.n	800fcde <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fc80:	68bb      	ldr	r3, [r7, #8]
 800fc82:	3304      	adds	r3, #4
 800fc84:	4618      	mov	r0, r3
 800fc86:	f7ff f86a 	bl	800ed5e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800fc8a:	68bb      	ldr	r3, [r7, #8]
 800fc8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fc8e:	2b00      	cmp	r3, #0
 800fc90:	d004      	beq.n	800fc9c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800fc92:	68bb      	ldr	r3, [r7, #8]
 800fc94:	3318      	adds	r3, #24
 800fc96:	4618      	mov	r0, r3
 800fc98:	f7ff f861 	bl	800ed5e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800fc9c:	68bb      	ldr	r3, [r7, #8]
 800fc9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fca0:	2201      	movs	r2, #1
 800fca2:	409a      	lsls	r2, r3
 800fca4:	4b23      	ldr	r3, [pc, #140]	; (800fd34 <xTaskIncrementTick+0x15c>)
 800fca6:	681b      	ldr	r3, [r3, #0]
 800fca8:	4313      	orrs	r3, r2
 800fcaa:	4a22      	ldr	r2, [pc, #136]	; (800fd34 <xTaskIncrementTick+0x15c>)
 800fcac:	6013      	str	r3, [r2, #0]
 800fcae:	68bb      	ldr	r3, [r7, #8]
 800fcb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fcb2:	4613      	mov	r3, r2
 800fcb4:	009b      	lsls	r3, r3, #2
 800fcb6:	4413      	add	r3, r2
 800fcb8:	009b      	lsls	r3, r3, #2
 800fcba:	4a1f      	ldr	r2, [pc, #124]	; (800fd38 <xTaskIncrementTick+0x160>)
 800fcbc:	441a      	add	r2, r3
 800fcbe:	68bb      	ldr	r3, [r7, #8]
 800fcc0:	3304      	adds	r3, #4
 800fcc2:	4619      	mov	r1, r3
 800fcc4:	4610      	mov	r0, r2
 800fcc6:	f7fe ffed 	bl	800eca4 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800fcca:	68bb      	ldr	r3, [r7, #8]
 800fccc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fcce:	4b1b      	ldr	r3, [pc, #108]	; (800fd3c <xTaskIncrementTick+0x164>)
 800fcd0:	681b      	ldr	r3, [r3, #0]
 800fcd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fcd4:	429a      	cmp	r2, r3
 800fcd6:	d3b9      	bcc.n	800fc4c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800fcd8:	2301      	movs	r3, #1
 800fcda:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fcdc:	e7b6      	b.n	800fc4c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800fcde:	4b17      	ldr	r3, [pc, #92]	; (800fd3c <xTaskIncrementTick+0x164>)
 800fce0:	681b      	ldr	r3, [r3, #0]
 800fce2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fce4:	4914      	ldr	r1, [pc, #80]	; (800fd38 <xTaskIncrementTick+0x160>)
 800fce6:	4613      	mov	r3, r2
 800fce8:	009b      	lsls	r3, r3, #2
 800fcea:	4413      	add	r3, r2
 800fcec:	009b      	lsls	r3, r3, #2
 800fcee:	440b      	add	r3, r1
 800fcf0:	681b      	ldr	r3, [r3, #0]
 800fcf2:	2b01      	cmp	r3, #1
 800fcf4:	d901      	bls.n	800fcfa <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800fcf6:	2301      	movs	r3, #1
 800fcf8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800fcfa:	4b11      	ldr	r3, [pc, #68]	; (800fd40 <xTaskIncrementTick+0x168>)
 800fcfc:	681b      	ldr	r3, [r3, #0]
 800fcfe:	2b00      	cmp	r3, #0
 800fd00:	d007      	beq.n	800fd12 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800fd02:	2301      	movs	r3, #1
 800fd04:	617b      	str	r3, [r7, #20]
 800fd06:	e004      	b.n	800fd12 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800fd08:	4b0e      	ldr	r3, [pc, #56]	; (800fd44 <xTaskIncrementTick+0x16c>)
 800fd0a:	681b      	ldr	r3, [r3, #0]
 800fd0c:	3301      	adds	r3, #1
 800fd0e:	4a0d      	ldr	r2, [pc, #52]	; (800fd44 <xTaskIncrementTick+0x16c>)
 800fd10:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800fd12:	697b      	ldr	r3, [r7, #20]
}
 800fd14:	4618      	mov	r0, r3
 800fd16:	3718      	adds	r7, #24
 800fd18:	46bd      	mov	sp, r7
 800fd1a:	bd80      	pop	{r7, pc}
 800fd1c:	20002d28 	.word	0x20002d28
 800fd20:	20002d04 	.word	0x20002d04
 800fd24:	20002cb8 	.word	0x20002cb8
 800fd28:	20002cbc 	.word	0x20002cbc
 800fd2c:	20002d18 	.word	0x20002d18
 800fd30:	20002d20 	.word	0x20002d20
 800fd34:	20002d08 	.word	0x20002d08
 800fd38:	20002c04 	.word	0x20002c04
 800fd3c:	20002c00 	.word	0x20002c00
 800fd40:	20002d14 	.word	0x20002d14
 800fd44:	20002d10 	.word	0x20002d10

0800fd48 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800fd48:	b480      	push	{r7}
 800fd4a:	b087      	sub	sp, #28
 800fd4c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800fd4e:	4b27      	ldr	r3, [pc, #156]	; (800fdec <vTaskSwitchContext+0xa4>)
 800fd50:	681b      	ldr	r3, [r3, #0]
 800fd52:	2b00      	cmp	r3, #0
 800fd54:	d003      	beq.n	800fd5e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800fd56:	4b26      	ldr	r3, [pc, #152]	; (800fdf0 <vTaskSwitchContext+0xa8>)
 800fd58:	2201      	movs	r2, #1
 800fd5a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800fd5c:	e03f      	b.n	800fdde <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800fd5e:	4b24      	ldr	r3, [pc, #144]	; (800fdf0 <vTaskSwitchContext+0xa8>)
 800fd60:	2200      	movs	r2, #0
 800fd62:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fd64:	4b23      	ldr	r3, [pc, #140]	; (800fdf4 <vTaskSwitchContext+0xac>)
 800fd66:	681b      	ldr	r3, [r3, #0]
 800fd68:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800fd6a:	68fb      	ldr	r3, [r7, #12]
 800fd6c:	fab3 f383 	clz	r3, r3
 800fd70:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800fd72:	7afb      	ldrb	r3, [r7, #11]
 800fd74:	f1c3 031f 	rsb	r3, r3, #31
 800fd78:	617b      	str	r3, [r7, #20]
 800fd7a:	491f      	ldr	r1, [pc, #124]	; (800fdf8 <vTaskSwitchContext+0xb0>)
 800fd7c:	697a      	ldr	r2, [r7, #20]
 800fd7e:	4613      	mov	r3, r2
 800fd80:	009b      	lsls	r3, r3, #2
 800fd82:	4413      	add	r3, r2
 800fd84:	009b      	lsls	r3, r3, #2
 800fd86:	440b      	add	r3, r1
 800fd88:	681b      	ldr	r3, [r3, #0]
 800fd8a:	2b00      	cmp	r3, #0
 800fd8c:	d10a      	bne.n	800fda4 <vTaskSwitchContext+0x5c>
	__asm volatile
 800fd8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd92:	f383 8811 	msr	BASEPRI, r3
 800fd96:	f3bf 8f6f 	isb	sy
 800fd9a:	f3bf 8f4f 	dsb	sy
 800fd9e:	607b      	str	r3, [r7, #4]
}
 800fda0:	bf00      	nop
 800fda2:	e7fe      	b.n	800fda2 <vTaskSwitchContext+0x5a>
 800fda4:	697a      	ldr	r2, [r7, #20]
 800fda6:	4613      	mov	r3, r2
 800fda8:	009b      	lsls	r3, r3, #2
 800fdaa:	4413      	add	r3, r2
 800fdac:	009b      	lsls	r3, r3, #2
 800fdae:	4a12      	ldr	r2, [pc, #72]	; (800fdf8 <vTaskSwitchContext+0xb0>)
 800fdb0:	4413      	add	r3, r2
 800fdb2:	613b      	str	r3, [r7, #16]
 800fdb4:	693b      	ldr	r3, [r7, #16]
 800fdb6:	685b      	ldr	r3, [r3, #4]
 800fdb8:	685a      	ldr	r2, [r3, #4]
 800fdba:	693b      	ldr	r3, [r7, #16]
 800fdbc:	605a      	str	r2, [r3, #4]
 800fdbe:	693b      	ldr	r3, [r7, #16]
 800fdc0:	685a      	ldr	r2, [r3, #4]
 800fdc2:	693b      	ldr	r3, [r7, #16]
 800fdc4:	3308      	adds	r3, #8
 800fdc6:	429a      	cmp	r2, r3
 800fdc8:	d104      	bne.n	800fdd4 <vTaskSwitchContext+0x8c>
 800fdca:	693b      	ldr	r3, [r7, #16]
 800fdcc:	685b      	ldr	r3, [r3, #4]
 800fdce:	685a      	ldr	r2, [r3, #4]
 800fdd0:	693b      	ldr	r3, [r7, #16]
 800fdd2:	605a      	str	r2, [r3, #4]
 800fdd4:	693b      	ldr	r3, [r7, #16]
 800fdd6:	685b      	ldr	r3, [r3, #4]
 800fdd8:	68db      	ldr	r3, [r3, #12]
 800fdda:	4a08      	ldr	r2, [pc, #32]	; (800fdfc <vTaskSwitchContext+0xb4>)
 800fddc:	6013      	str	r3, [r2, #0]
}
 800fdde:	bf00      	nop
 800fde0:	371c      	adds	r7, #28
 800fde2:	46bd      	mov	sp, r7
 800fde4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fde8:	4770      	bx	lr
 800fdea:	bf00      	nop
 800fdec:	20002d28 	.word	0x20002d28
 800fdf0:	20002d14 	.word	0x20002d14
 800fdf4:	20002d08 	.word	0x20002d08
 800fdf8:	20002c04 	.word	0x20002c04
 800fdfc:	20002c00 	.word	0x20002c00

0800fe00 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800fe00:	b580      	push	{r7, lr}
 800fe02:	b084      	sub	sp, #16
 800fe04:	af00      	add	r7, sp, #0
 800fe06:	6078      	str	r0, [r7, #4]
 800fe08:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800fe0a:	687b      	ldr	r3, [r7, #4]
 800fe0c:	2b00      	cmp	r3, #0
 800fe0e:	d10a      	bne.n	800fe26 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800fe10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe14:	f383 8811 	msr	BASEPRI, r3
 800fe18:	f3bf 8f6f 	isb	sy
 800fe1c:	f3bf 8f4f 	dsb	sy
 800fe20:	60fb      	str	r3, [r7, #12]
}
 800fe22:	bf00      	nop
 800fe24:	e7fe      	b.n	800fe24 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800fe26:	4b07      	ldr	r3, [pc, #28]	; (800fe44 <vTaskPlaceOnEventList+0x44>)
 800fe28:	681b      	ldr	r3, [r3, #0]
 800fe2a:	3318      	adds	r3, #24
 800fe2c:	4619      	mov	r1, r3
 800fe2e:	6878      	ldr	r0, [r7, #4]
 800fe30:	f7fe ff5c 	bl	800ecec <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800fe34:	2101      	movs	r1, #1
 800fe36:	6838      	ldr	r0, [r7, #0]
 800fe38:	f000 fa66 	bl	8010308 <prvAddCurrentTaskToDelayedList>
}
 800fe3c:	bf00      	nop
 800fe3e:	3710      	adds	r7, #16
 800fe40:	46bd      	mov	sp, r7
 800fe42:	bd80      	pop	{r7, pc}
 800fe44:	20002c00 	.word	0x20002c00

0800fe48 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800fe48:	b580      	push	{r7, lr}
 800fe4a:	b086      	sub	sp, #24
 800fe4c:	af00      	add	r7, sp, #0
 800fe4e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fe50:	687b      	ldr	r3, [r7, #4]
 800fe52:	68db      	ldr	r3, [r3, #12]
 800fe54:	68db      	ldr	r3, [r3, #12]
 800fe56:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800fe58:	693b      	ldr	r3, [r7, #16]
 800fe5a:	2b00      	cmp	r3, #0
 800fe5c:	d10a      	bne.n	800fe74 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800fe5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe62:	f383 8811 	msr	BASEPRI, r3
 800fe66:	f3bf 8f6f 	isb	sy
 800fe6a:	f3bf 8f4f 	dsb	sy
 800fe6e:	60fb      	str	r3, [r7, #12]
}
 800fe70:	bf00      	nop
 800fe72:	e7fe      	b.n	800fe72 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800fe74:	693b      	ldr	r3, [r7, #16]
 800fe76:	3318      	adds	r3, #24
 800fe78:	4618      	mov	r0, r3
 800fe7a:	f7fe ff70 	bl	800ed5e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fe7e:	4b1d      	ldr	r3, [pc, #116]	; (800fef4 <xTaskRemoveFromEventList+0xac>)
 800fe80:	681b      	ldr	r3, [r3, #0]
 800fe82:	2b00      	cmp	r3, #0
 800fe84:	d11c      	bne.n	800fec0 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800fe86:	693b      	ldr	r3, [r7, #16]
 800fe88:	3304      	adds	r3, #4
 800fe8a:	4618      	mov	r0, r3
 800fe8c:	f7fe ff67 	bl	800ed5e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800fe90:	693b      	ldr	r3, [r7, #16]
 800fe92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe94:	2201      	movs	r2, #1
 800fe96:	409a      	lsls	r2, r3
 800fe98:	4b17      	ldr	r3, [pc, #92]	; (800fef8 <xTaskRemoveFromEventList+0xb0>)
 800fe9a:	681b      	ldr	r3, [r3, #0]
 800fe9c:	4313      	orrs	r3, r2
 800fe9e:	4a16      	ldr	r2, [pc, #88]	; (800fef8 <xTaskRemoveFromEventList+0xb0>)
 800fea0:	6013      	str	r3, [r2, #0]
 800fea2:	693b      	ldr	r3, [r7, #16]
 800fea4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fea6:	4613      	mov	r3, r2
 800fea8:	009b      	lsls	r3, r3, #2
 800feaa:	4413      	add	r3, r2
 800feac:	009b      	lsls	r3, r3, #2
 800feae:	4a13      	ldr	r2, [pc, #76]	; (800fefc <xTaskRemoveFromEventList+0xb4>)
 800feb0:	441a      	add	r2, r3
 800feb2:	693b      	ldr	r3, [r7, #16]
 800feb4:	3304      	adds	r3, #4
 800feb6:	4619      	mov	r1, r3
 800feb8:	4610      	mov	r0, r2
 800feba:	f7fe fef3 	bl	800eca4 <vListInsertEnd>
 800febe:	e005      	b.n	800fecc <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800fec0:	693b      	ldr	r3, [r7, #16]
 800fec2:	3318      	adds	r3, #24
 800fec4:	4619      	mov	r1, r3
 800fec6:	480e      	ldr	r0, [pc, #56]	; (800ff00 <xTaskRemoveFromEventList+0xb8>)
 800fec8:	f7fe feec 	bl	800eca4 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800fecc:	693b      	ldr	r3, [r7, #16]
 800fece:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fed0:	4b0c      	ldr	r3, [pc, #48]	; (800ff04 <xTaskRemoveFromEventList+0xbc>)
 800fed2:	681b      	ldr	r3, [r3, #0]
 800fed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fed6:	429a      	cmp	r2, r3
 800fed8:	d905      	bls.n	800fee6 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800feda:	2301      	movs	r3, #1
 800fedc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800fede:	4b0a      	ldr	r3, [pc, #40]	; (800ff08 <xTaskRemoveFromEventList+0xc0>)
 800fee0:	2201      	movs	r2, #1
 800fee2:	601a      	str	r2, [r3, #0]
 800fee4:	e001      	b.n	800feea <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800fee6:	2300      	movs	r3, #0
 800fee8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800feea:	697b      	ldr	r3, [r7, #20]
}
 800feec:	4618      	mov	r0, r3
 800feee:	3718      	adds	r7, #24
 800fef0:	46bd      	mov	sp, r7
 800fef2:	bd80      	pop	{r7, pc}
 800fef4:	20002d28 	.word	0x20002d28
 800fef8:	20002d08 	.word	0x20002d08
 800fefc:	20002c04 	.word	0x20002c04
 800ff00:	20002cc0 	.word	0x20002cc0
 800ff04:	20002c00 	.word	0x20002c00
 800ff08:	20002d14 	.word	0x20002d14

0800ff0c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ff0c:	b480      	push	{r7}
 800ff0e:	b083      	sub	sp, #12
 800ff10:	af00      	add	r7, sp, #0
 800ff12:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ff14:	4b06      	ldr	r3, [pc, #24]	; (800ff30 <vTaskInternalSetTimeOutState+0x24>)
 800ff16:	681a      	ldr	r2, [r3, #0]
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ff1c:	4b05      	ldr	r3, [pc, #20]	; (800ff34 <vTaskInternalSetTimeOutState+0x28>)
 800ff1e:	681a      	ldr	r2, [r3, #0]
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	605a      	str	r2, [r3, #4]
}
 800ff24:	bf00      	nop
 800ff26:	370c      	adds	r7, #12
 800ff28:	46bd      	mov	sp, r7
 800ff2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff2e:	4770      	bx	lr
 800ff30:	20002d18 	.word	0x20002d18
 800ff34:	20002d04 	.word	0x20002d04

0800ff38 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ff38:	b580      	push	{r7, lr}
 800ff3a:	b088      	sub	sp, #32
 800ff3c:	af00      	add	r7, sp, #0
 800ff3e:	6078      	str	r0, [r7, #4]
 800ff40:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	2b00      	cmp	r3, #0
 800ff46:	d10a      	bne.n	800ff5e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800ff48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff4c:	f383 8811 	msr	BASEPRI, r3
 800ff50:	f3bf 8f6f 	isb	sy
 800ff54:	f3bf 8f4f 	dsb	sy
 800ff58:	613b      	str	r3, [r7, #16]
}
 800ff5a:	bf00      	nop
 800ff5c:	e7fe      	b.n	800ff5c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800ff5e:	683b      	ldr	r3, [r7, #0]
 800ff60:	2b00      	cmp	r3, #0
 800ff62:	d10a      	bne.n	800ff7a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800ff64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff68:	f383 8811 	msr	BASEPRI, r3
 800ff6c:	f3bf 8f6f 	isb	sy
 800ff70:	f3bf 8f4f 	dsb	sy
 800ff74:	60fb      	str	r3, [r7, #12]
}
 800ff76:	bf00      	nop
 800ff78:	e7fe      	b.n	800ff78 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800ff7a:	f000 fb5b 	bl	8010634 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ff7e:	4b1d      	ldr	r3, [pc, #116]	; (800fff4 <xTaskCheckForTimeOut+0xbc>)
 800ff80:	681b      	ldr	r3, [r3, #0]
 800ff82:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ff84:	687b      	ldr	r3, [r7, #4]
 800ff86:	685b      	ldr	r3, [r3, #4]
 800ff88:	69ba      	ldr	r2, [r7, #24]
 800ff8a:	1ad3      	subs	r3, r2, r3
 800ff8c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ff8e:	683b      	ldr	r3, [r7, #0]
 800ff90:	681b      	ldr	r3, [r3, #0]
 800ff92:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ff96:	d102      	bne.n	800ff9e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ff98:	2300      	movs	r3, #0
 800ff9a:	61fb      	str	r3, [r7, #28]
 800ff9c:	e023      	b.n	800ffe6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	681a      	ldr	r2, [r3, #0]
 800ffa2:	4b15      	ldr	r3, [pc, #84]	; (800fff8 <xTaskCheckForTimeOut+0xc0>)
 800ffa4:	681b      	ldr	r3, [r3, #0]
 800ffa6:	429a      	cmp	r2, r3
 800ffa8:	d007      	beq.n	800ffba <xTaskCheckForTimeOut+0x82>
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	685b      	ldr	r3, [r3, #4]
 800ffae:	69ba      	ldr	r2, [r7, #24]
 800ffb0:	429a      	cmp	r2, r3
 800ffb2:	d302      	bcc.n	800ffba <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ffb4:	2301      	movs	r3, #1
 800ffb6:	61fb      	str	r3, [r7, #28]
 800ffb8:	e015      	b.n	800ffe6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ffba:	683b      	ldr	r3, [r7, #0]
 800ffbc:	681b      	ldr	r3, [r3, #0]
 800ffbe:	697a      	ldr	r2, [r7, #20]
 800ffc0:	429a      	cmp	r2, r3
 800ffc2:	d20b      	bcs.n	800ffdc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ffc4:	683b      	ldr	r3, [r7, #0]
 800ffc6:	681a      	ldr	r2, [r3, #0]
 800ffc8:	697b      	ldr	r3, [r7, #20]
 800ffca:	1ad2      	subs	r2, r2, r3
 800ffcc:	683b      	ldr	r3, [r7, #0]
 800ffce:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ffd0:	6878      	ldr	r0, [r7, #4]
 800ffd2:	f7ff ff9b 	bl	800ff0c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ffd6:	2300      	movs	r3, #0
 800ffd8:	61fb      	str	r3, [r7, #28]
 800ffda:	e004      	b.n	800ffe6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800ffdc:	683b      	ldr	r3, [r7, #0]
 800ffde:	2200      	movs	r2, #0
 800ffe0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ffe2:	2301      	movs	r3, #1
 800ffe4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ffe6:	f000 fb55 	bl	8010694 <vPortExitCritical>

	return xReturn;
 800ffea:	69fb      	ldr	r3, [r7, #28]
}
 800ffec:	4618      	mov	r0, r3
 800ffee:	3720      	adds	r7, #32
 800fff0:	46bd      	mov	sp, r7
 800fff2:	bd80      	pop	{r7, pc}
 800fff4:	20002d04 	.word	0x20002d04
 800fff8:	20002d18 	.word	0x20002d18

0800fffc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800fffc:	b480      	push	{r7}
 800fffe:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8010000:	4b03      	ldr	r3, [pc, #12]	; (8010010 <vTaskMissedYield+0x14>)
 8010002:	2201      	movs	r2, #1
 8010004:	601a      	str	r2, [r3, #0]
}
 8010006:	bf00      	nop
 8010008:	46bd      	mov	sp, r7
 801000a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801000e:	4770      	bx	lr
 8010010:	20002d14 	.word	0x20002d14

08010014 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8010014:	b580      	push	{r7, lr}
 8010016:	b082      	sub	sp, #8
 8010018:	af00      	add	r7, sp, #0
 801001a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 801001c:	f000 f852 	bl	80100c4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8010020:	4b06      	ldr	r3, [pc, #24]	; (801003c <prvIdleTask+0x28>)
 8010022:	681b      	ldr	r3, [r3, #0]
 8010024:	2b01      	cmp	r3, #1
 8010026:	d9f9      	bls.n	801001c <prvIdleTask+0x8>
			{
				taskYIELD();
 8010028:	4b05      	ldr	r3, [pc, #20]	; (8010040 <prvIdleTask+0x2c>)
 801002a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801002e:	601a      	str	r2, [r3, #0]
 8010030:	f3bf 8f4f 	dsb	sy
 8010034:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8010038:	e7f0      	b.n	801001c <prvIdleTask+0x8>
 801003a:	bf00      	nop
 801003c:	20002c04 	.word	0x20002c04
 8010040:	e000ed04 	.word	0xe000ed04

08010044 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8010044:	b580      	push	{r7, lr}
 8010046:	b082      	sub	sp, #8
 8010048:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801004a:	2300      	movs	r3, #0
 801004c:	607b      	str	r3, [r7, #4]
 801004e:	e00c      	b.n	801006a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8010050:	687a      	ldr	r2, [r7, #4]
 8010052:	4613      	mov	r3, r2
 8010054:	009b      	lsls	r3, r3, #2
 8010056:	4413      	add	r3, r2
 8010058:	009b      	lsls	r3, r3, #2
 801005a:	4a12      	ldr	r2, [pc, #72]	; (80100a4 <prvInitialiseTaskLists+0x60>)
 801005c:	4413      	add	r3, r2
 801005e:	4618      	mov	r0, r3
 8010060:	f7fe fdf3 	bl	800ec4a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010064:	687b      	ldr	r3, [r7, #4]
 8010066:	3301      	adds	r3, #1
 8010068:	607b      	str	r3, [r7, #4]
 801006a:	687b      	ldr	r3, [r7, #4]
 801006c:	2b06      	cmp	r3, #6
 801006e:	d9ef      	bls.n	8010050 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8010070:	480d      	ldr	r0, [pc, #52]	; (80100a8 <prvInitialiseTaskLists+0x64>)
 8010072:	f7fe fdea 	bl	800ec4a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8010076:	480d      	ldr	r0, [pc, #52]	; (80100ac <prvInitialiseTaskLists+0x68>)
 8010078:	f7fe fde7 	bl	800ec4a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 801007c:	480c      	ldr	r0, [pc, #48]	; (80100b0 <prvInitialiseTaskLists+0x6c>)
 801007e:	f7fe fde4 	bl	800ec4a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8010082:	480c      	ldr	r0, [pc, #48]	; (80100b4 <prvInitialiseTaskLists+0x70>)
 8010084:	f7fe fde1 	bl	800ec4a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8010088:	480b      	ldr	r0, [pc, #44]	; (80100b8 <prvInitialiseTaskLists+0x74>)
 801008a:	f7fe fdde 	bl	800ec4a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801008e:	4b0b      	ldr	r3, [pc, #44]	; (80100bc <prvInitialiseTaskLists+0x78>)
 8010090:	4a05      	ldr	r2, [pc, #20]	; (80100a8 <prvInitialiseTaskLists+0x64>)
 8010092:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8010094:	4b0a      	ldr	r3, [pc, #40]	; (80100c0 <prvInitialiseTaskLists+0x7c>)
 8010096:	4a05      	ldr	r2, [pc, #20]	; (80100ac <prvInitialiseTaskLists+0x68>)
 8010098:	601a      	str	r2, [r3, #0]
}
 801009a:	bf00      	nop
 801009c:	3708      	adds	r7, #8
 801009e:	46bd      	mov	sp, r7
 80100a0:	bd80      	pop	{r7, pc}
 80100a2:	bf00      	nop
 80100a4:	20002c04 	.word	0x20002c04
 80100a8:	20002c90 	.word	0x20002c90
 80100ac:	20002ca4 	.word	0x20002ca4
 80100b0:	20002cc0 	.word	0x20002cc0
 80100b4:	20002cd4 	.word	0x20002cd4
 80100b8:	20002cec 	.word	0x20002cec
 80100bc:	20002cb8 	.word	0x20002cb8
 80100c0:	20002cbc 	.word	0x20002cbc

080100c4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80100c4:	b580      	push	{r7, lr}
 80100c6:	b082      	sub	sp, #8
 80100c8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80100ca:	e019      	b.n	8010100 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80100cc:	f000 fab2 	bl	8010634 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80100d0:	4b10      	ldr	r3, [pc, #64]	; (8010114 <prvCheckTasksWaitingTermination+0x50>)
 80100d2:	68db      	ldr	r3, [r3, #12]
 80100d4:	68db      	ldr	r3, [r3, #12]
 80100d6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	3304      	adds	r3, #4
 80100dc:	4618      	mov	r0, r3
 80100de:	f7fe fe3e 	bl	800ed5e <uxListRemove>
				--uxCurrentNumberOfTasks;
 80100e2:	4b0d      	ldr	r3, [pc, #52]	; (8010118 <prvCheckTasksWaitingTermination+0x54>)
 80100e4:	681b      	ldr	r3, [r3, #0]
 80100e6:	3b01      	subs	r3, #1
 80100e8:	4a0b      	ldr	r2, [pc, #44]	; (8010118 <prvCheckTasksWaitingTermination+0x54>)
 80100ea:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80100ec:	4b0b      	ldr	r3, [pc, #44]	; (801011c <prvCheckTasksWaitingTermination+0x58>)
 80100ee:	681b      	ldr	r3, [r3, #0]
 80100f0:	3b01      	subs	r3, #1
 80100f2:	4a0a      	ldr	r2, [pc, #40]	; (801011c <prvCheckTasksWaitingTermination+0x58>)
 80100f4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80100f6:	f000 facd 	bl	8010694 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80100fa:	6878      	ldr	r0, [r7, #4]
 80100fc:	f000 f810 	bl	8010120 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010100:	4b06      	ldr	r3, [pc, #24]	; (801011c <prvCheckTasksWaitingTermination+0x58>)
 8010102:	681b      	ldr	r3, [r3, #0]
 8010104:	2b00      	cmp	r3, #0
 8010106:	d1e1      	bne.n	80100cc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8010108:	bf00      	nop
 801010a:	bf00      	nop
 801010c:	3708      	adds	r7, #8
 801010e:	46bd      	mov	sp, r7
 8010110:	bd80      	pop	{r7, pc}
 8010112:	bf00      	nop
 8010114:	20002cd4 	.word	0x20002cd4
 8010118:	20002d00 	.word	0x20002d00
 801011c:	20002ce8 	.word	0x20002ce8

08010120 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8010120:	b580      	push	{r7, lr}
 8010122:	b084      	sub	sp, #16
 8010124:	af00      	add	r7, sp, #0
 8010126:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801012e:	2b00      	cmp	r3, #0
 8010130:	d108      	bne.n	8010144 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010136:	4618      	mov	r0, r3
 8010138:	f000 fc2a 	bl	8010990 <vPortFree>
				vPortFree( pxTCB );
 801013c:	6878      	ldr	r0, [r7, #4]
 801013e:	f000 fc27 	bl	8010990 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8010142:	e018      	b.n	8010176 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801014a:	2b01      	cmp	r3, #1
 801014c:	d103      	bne.n	8010156 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 801014e:	6878      	ldr	r0, [r7, #4]
 8010150:	f000 fc1e 	bl	8010990 <vPortFree>
	}
 8010154:	e00f      	b.n	8010176 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8010156:	687b      	ldr	r3, [r7, #4]
 8010158:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801015c:	2b02      	cmp	r3, #2
 801015e:	d00a      	beq.n	8010176 <prvDeleteTCB+0x56>
	__asm volatile
 8010160:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010164:	f383 8811 	msr	BASEPRI, r3
 8010168:	f3bf 8f6f 	isb	sy
 801016c:	f3bf 8f4f 	dsb	sy
 8010170:	60fb      	str	r3, [r7, #12]
}
 8010172:	bf00      	nop
 8010174:	e7fe      	b.n	8010174 <prvDeleteTCB+0x54>
	}
 8010176:	bf00      	nop
 8010178:	3710      	adds	r7, #16
 801017a:	46bd      	mov	sp, r7
 801017c:	bd80      	pop	{r7, pc}
	...

08010180 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8010180:	b480      	push	{r7}
 8010182:	b083      	sub	sp, #12
 8010184:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010186:	4b0c      	ldr	r3, [pc, #48]	; (80101b8 <prvResetNextTaskUnblockTime+0x38>)
 8010188:	681b      	ldr	r3, [r3, #0]
 801018a:	681b      	ldr	r3, [r3, #0]
 801018c:	2b00      	cmp	r3, #0
 801018e:	d104      	bne.n	801019a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8010190:	4b0a      	ldr	r3, [pc, #40]	; (80101bc <prvResetNextTaskUnblockTime+0x3c>)
 8010192:	f04f 32ff 	mov.w	r2, #4294967295
 8010196:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8010198:	e008      	b.n	80101ac <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801019a:	4b07      	ldr	r3, [pc, #28]	; (80101b8 <prvResetNextTaskUnblockTime+0x38>)
 801019c:	681b      	ldr	r3, [r3, #0]
 801019e:	68db      	ldr	r3, [r3, #12]
 80101a0:	68db      	ldr	r3, [r3, #12]
 80101a2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	685b      	ldr	r3, [r3, #4]
 80101a8:	4a04      	ldr	r2, [pc, #16]	; (80101bc <prvResetNextTaskUnblockTime+0x3c>)
 80101aa:	6013      	str	r3, [r2, #0]
}
 80101ac:	bf00      	nop
 80101ae:	370c      	adds	r7, #12
 80101b0:	46bd      	mov	sp, r7
 80101b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101b6:	4770      	bx	lr
 80101b8:	20002cb8 	.word	0x20002cb8
 80101bc:	20002d20 	.word	0x20002d20

080101c0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80101c0:	b480      	push	{r7}
 80101c2:	b083      	sub	sp, #12
 80101c4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80101c6:	4b0b      	ldr	r3, [pc, #44]	; (80101f4 <xTaskGetSchedulerState+0x34>)
 80101c8:	681b      	ldr	r3, [r3, #0]
 80101ca:	2b00      	cmp	r3, #0
 80101cc:	d102      	bne.n	80101d4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80101ce:	2301      	movs	r3, #1
 80101d0:	607b      	str	r3, [r7, #4]
 80101d2:	e008      	b.n	80101e6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80101d4:	4b08      	ldr	r3, [pc, #32]	; (80101f8 <xTaskGetSchedulerState+0x38>)
 80101d6:	681b      	ldr	r3, [r3, #0]
 80101d8:	2b00      	cmp	r3, #0
 80101da:	d102      	bne.n	80101e2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80101dc:	2302      	movs	r3, #2
 80101de:	607b      	str	r3, [r7, #4]
 80101e0:	e001      	b.n	80101e6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80101e2:	2300      	movs	r3, #0
 80101e4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80101e6:	687b      	ldr	r3, [r7, #4]
	}
 80101e8:	4618      	mov	r0, r3
 80101ea:	370c      	adds	r7, #12
 80101ec:	46bd      	mov	sp, r7
 80101ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101f2:	4770      	bx	lr
 80101f4:	20002d0c 	.word	0x20002d0c
 80101f8:	20002d28 	.word	0x20002d28

080101fc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80101fc:	b580      	push	{r7, lr}
 80101fe:	b086      	sub	sp, #24
 8010200:	af00      	add	r7, sp, #0
 8010202:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8010204:	687b      	ldr	r3, [r7, #4]
 8010206:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8010208:	2300      	movs	r3, #0
 801020a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801020c:	687b      	ldr	r3, [r7, #4]
 801020e:	2b00      	cmp	r3, #0
 8010210:	d06e      	beq.n	80102f0 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8010212:	4b3a      	ldr	r3, [pc, #232]	; (80102fc <xTaskPriorityDisinherit+0x100>)
 8010214:	681b      	ldr	r3, [r3, #0]
 8010216:	693a      	ldr	r2, [r7, #16]
 8010218:	429a      	cmp	r2, r3
 801021a:	d00a      	beq.n	8010232 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 801021c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010220:	f383 8811 	msr	BASEPRI, r3
 8010224:	f3bf 8f6f 	isb	sy
 8010228:	f3bf 8f4f 	dsb	sy
 801022c:	60fb      	str	r3, [r7, #12]
}
 801022e:	bf00      	nop
 8010230:	e7fe      	b.n	8010230 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8010232:	693b      	ldr	r3, [r7, #16]
 8010234:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010236:	2b00      	cmp	r3, #0
 8010238:	d10a      	bne.n	8010250 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 801023a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801023e:	f383 8811 	msr	BASEPRI, r3
 8010242:	f3bf 8f6f 	isb	sy
 8010246:	f3bf 8f4f 	dsb	sy
 801024a:	60bb      	str	r3, [r7, #8]
}
 801024c:	bf00      	nop
 801024e:	e7fe      	b.n	801024e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8010250:	693b      	ldr	r3, [r7, #16]
 8010252:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010254:	1e5a      	subs	r2, r3, #1
 8010256:	693b      	ldr	r3, [r7, #16]
 8010258:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801025a:	693b      	ldr	r3, [r7, #16]
 801025c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801025e:	693b      	ldr	r3, [r7, #16]
 8010260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010262:	429a      	cmp	r2, r3
 8010264:	d044      	beq.n	80102f0 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8010266:	693b      	ldr	r3, [r7, #16]
 8010268:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801026a:	2b00      	cmp	r3, #0
 801026c:	d140      	bne.n	80102f0 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801026e:	693b      	ldr	r3, [r7, #16]
 8010270:	3304      	adds	r3, #4
 8010272:	4618      	mov	r0, r3
 8010274:	f7fe fd73 	bl	800ed5e <uxListRemove>
 8010278:	4603      	mov	r3, r0
 801027a:	2b00      	cmp	r3, #0
 801027c:	d115      	bne.n	80102aa <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 801027e:	693b      	ldr	r3, [r7, #16]
 8010280:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010282:	491f      	ldr	r1, [pc, #124]	; (8010300 <xTaskPriorityDisinherit+0x104>)
 8010284:	4613      	mov	r3, r2
 8010286:	009b      	lsls	r3, r3, #2
 8010288:	4413      	add	r3, r2
 801028a:	009b      	lsls	r3, r3, #2
 801028c:	440b      	add	r3, r1
 801028e:	681b      	ldr	r3, [r3, #0]
 8010290:	2b00      	cmp	r3, #0
 8010292:	d10a      	bne.n	80102aa <xTaskPriorityDisinherit+0xae>
 8010294:	693b      	ldr	r3, [r7, #16]
 8010296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010298:	2201      	movs	r2, #1
 801029a:	fa02 f303 	lsl.w	r3, r2, r3
 801029e:	43da      	mvns	r2, r3
 80102a0:	4b18      	ldr	r3, [pc, #96]	; (8010304 <xTaskPriorityDisinherit+0x108>)
 80102a2:	681b      	ldr	r3, [r3, #0]
 80102a4:	4013      	ands	r3, r2
 80102a6:	4a17      	ldr	r2, [pc, #92]	; (8010304 <xTaskPriorityDisinherit+0x108>)
 80102a8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80102aa:	693b      	ldr	r3, [r7, #16]
 80102ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80102ae:	693b      	ldr	r3, [r7, #16]
 80102b0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80102b2:	693b      	ldr	r3, [r7, #16]
 80102b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80102b6:	f1c3 0207 	rsb	r2, r3, #7
 80102ba:	693b      	ldr	r3, [r7, #16]
 80102bc:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80102be:	693b      	ldr	r3, [r7, #16]
 80102c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80102c2:	2201      	movs	r2, #1
 80102c4:	409a      	lsls	r2, r3
 80102c6:	4b0f      	ldr	r3, [pc, #60]	; (8010304 <xTaskPriorityDisinherit+0x108>)
 80102c8:	681b      	ldr	r3, [r3, #0]
 80102ca:	4313      	orrs	r3, r2
 80102cc:	4a0d      	ldr	r2, [pc, #52]	; (8010304 <xTaskPriorityDisinherit+0x108>)
 80102ce:	6013      	str	r3, [r2, #0]
 80102d0:	693b      	ldr	r3, [r7, #16]
 80102d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80102d4:	4613      	mov	r3, r2
 80102d6:	009b      	lsls	r3, r3, #2
 80102d8:	4413      	add	r3, r2
 80102da:	009b      	lsls	r3, r3, #2
 80102dc:	4a08      	ldr	r2, [pc, #32]	; (8010300 <xTaskPriorityDisinherit+0x104>)
 80102de:	441a      	add	r2, r3
 80102e0:	693b      	ldr	r3, [r7, #16]
 80102e2:	3304      	adds	r3, #4
 80102e4:	4619      	mov	r1, r3
 80102e6:	4610      	mov	r0, r2
 80102e8:	f7fe fcdc 	bl	800eca4 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80102ec:	2301      	movs	r3, #1
 80102ee:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80102f0:	697b      	ldr	r3, [r7, #20]
	}
 80102f2:	4618      	mov	r0, r3
 80102f4:	3718      	adds	r7, #24
 80102f6:	46bd      	mov	sp, r7
 80102f8:	bd80      	pop	{r7, pc}
 80102fa:	bf00      	nop
 80102fc:	20002c00 	.word	0x20002c00
 8010300:	20002c04 	.word	0x20002c04
 8010304:	20002d08 	.word	0x20002d08

08010308 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8010308:	b580      	push	{r7, lr}
 801030a:	b084      	sub	sp, #16
 801030c:	af00      	add	r7, sp, #0
 801030e:	6078      	str	r0, [r7, #4]
 8010310:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8010312:	4b29      	ldr	r3, [pc, #164]	; (80103b8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8010314:	681b      	ldr	r3, [r3, #0]
 8010316:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010318:	4b28      	ldr	r3, [pc, #160]	; (80103bc <prvAddCurrentTaskToDelayedList+0xb4>)
 801031a:	681b      	ldr	r3, [r3, #0]
 801031c:	3304      	adds	r3, #4
 801031e:	4618      	mov	r0, r3
 8010320:	f7fe fd1d 	bl	800ed5e <uxListRemove>
 8010324:	4603      	mov	r3, r0
 8010326:	2b00      	cmp	r3, #0
 8010328:	d10b      	bne.n	8010342 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 801032a:	4b24      	ldr	r3, [pc, #144]	; (80103bc <prvAddCurrentTaskToDelayedList+0xb4>)
 801032c:	681b      	ldr	r3, [r3, #0]
 801032e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010330:	2201      	movs	r2, #1
 8010332:	fa02 f303 	lsl.w	r3, r2, r3
 8010336:	43da      	mvns	r2, r3
 8010338:	4b21      	ldr	r3, [pc, #132]	; (80103c0 <prvAddCurrentTaskToDelayedList+0xb8>)
 801033a:	681b      	ldr	r3, [r3, #0]
 801033c:	4013      	ands	r3, r2
 801033e:	4a20      	ldr	r2, [pc, #128]	; (80103c0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8010340:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010348:	d10a      	bne.n	8010360 <prvAddCurrentTaskToDelayedList+0x58>
 801034a:	683b      	ldr	r3, [r7, #0]
 801034c:	2b00      	cmp	r3, #0
 801034e:	d007      	beq.n	8010360 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010350:	4b1a      	ldr	r3, [pc, #104]	; (80103bc <prvAddCurrentTaskToDelayedList+0xb4>)
 8010352:	681b      	ldr	r3, [r3, #0]
 8010354:	3304      	adds	r3, #4
 8010356:	4619      	mov	r1, r3
 8010358:	481a      	ldr	r0, [pc, #104]	; (80103c4 <prvAddCurrentTaskToDelayedList+0xbc>)
 801035a:	f7fe fca3 	bl	800eca4 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801035e:	e026      	b.n	80103ae <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8010360:	68fa      	ldr	r2, [r7, #12]
 8010362:	687b      	ldr	r3, [r7, #4]
 8010364:	4413      	add	r3, r2
 8010366:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8010368:	4b14      	ldr	r3, [pc, #80]	; (80103bc <prvAddCurrentTaskToDelayedList+0xb4>)
 801036a:	681b      	ldr	r3, [r3, #0]
 801036c:	68ba      	ldr	r2, [r7, #8]
 801036e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8010370:	68ba      	ldr	r2, [r7, #8]
 8010372:	68fb      	ldr	r3, [r7, #12]
 8010374:	429a      	cmp	r2, r3
 8010376:	d209      	bcs.n	801038c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010378:	4b13      	ldr	r3, [pc, #76]	; (80103c8 <prvAddCurrentTaskToDelayedList+0xc0>)
 801037a:	681a      	ldr	r2, [r3, #0]
 801037c:	4b0f      	ldr	r3, [pc, #60]	; (80103bc <prvAddCurrentTaskToDelayedList+0xb4>)
 801037e:	681b      	ldr	r3, [r3, #0]
 8010380:	3304      	adds	r3, #4
 8010382:	4619      	mov	r1, r3
 8010384:	4610      	mov	r0, r2
 8010386:	f7fe fcb1 	bl	800ecec <vListInsert>
}
 801038a:	e010      	b.n	80103ae <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801038c:	4b0f      	ldr	r3, [pc, #60]	; (80103cc <prvAddCurrentTaskToDelayedList+0xc4>)
 801038e:	681a      	ldr	r2, [r3, #0]
 8010390:	4b0a      	ldr	r3, [pc, #40]	; (80103bc <prvAddCurrentTaskToDelayedList+0xb4>)
 8010392:	681b      	ldr	r3, [r3, #0]
 8010394:	3304      	adds	r3, #4
 8010396:	4619      	mov	r1, r3
 8010398:	4610      	mov	r0, r2
 801039a:	f7fe fca7 	bl	800ecec <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801039e:	4b0c      	ldr	r3, [pc, #48]	; (80103d0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80103a0:	681b      	ldr	r3, [r3, #0]
 80103a2:	68ba      	ldr	r2, [r7, #8]
 80103a4:	429a      	cmp	r2, r3
 80103a6:	d202      	bcs.n	80103ae <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80103a8:	4a09      	ldr	r2, [pc, #36]	; (80103d0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80103aa:	68bb      	ldr	r3, [r7, #8]
 80103ac:	6013      	str	r3, [r2, #0]
}
 80103ae:	bf00      	nop
 80103b0:	3710      	adds	r7, #16
 80103b2:	46bd      	mov	sp, r7
 80103b4:	bd80      	pop	{r7, pc}
 80103b6:	bf00      	nop
 80103b8:	20002d04 	.word	0x20002d04
 80103bc:	20002c00 	.word	0x20002c00
 80103c0:	20002d08 	.word	0x20002d08
 80103c4:	20002cec 	.word	0x20002cec
 80103c8:	20002cbc 	.word	0x20002cbc
 80103cc:	20002cb8 	.word	0x20002cb8
 80103d0:	20002d20 	.word	0x20002d20

080103d4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80103d4:	b480      	push	{r7}
 80103d6:	b085      	sub	sp, #20
 80103d8:	af00      	add	r7, sp, #0
 80103da:	60f8      	str	r0, [r7, #12]
 80103dc:	60b9      	str	r1, [r7, #8]
 80103de:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80103e0:	68fb      	ldr	r3, [r7, #12]
 80103e2:	3b04      	subs	r3, #4
 80103e4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80103e6:	68fb      	ldr	r3, [r7, #12]
 80103e8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80103ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80103ee:	68fb      	ldr	r3, [r7, #12]
 80103f0:	3b04      	subs	r3, #4
 80103f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80103f4:	68bb      	ldr	r3, [r7, #8]
 80103f6:	f023 0201 	bic.w	r2, r3, #1
 80103fa:	68fb      	ldr	r3, [r7, #12]
 80103fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80103fe:	68fb      	ldr	r3, [r7, #12]
 8010400:	3b04      	subs	r3, #4
 8010402:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8010404:	4a0c      	ldr	r2, [pc, #48]	; (8010438 <pxPortInitialiseStack+0x64>)
 8010406:	68fb      	ldr	r3, [r7, #12]
 8010408:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801040a:	68fb      	ldr	r3, [r7, #12]
 801040c:	3b14      	subs	r3, #20
 801040e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8010410:	687a      	ldr	r2, [r7, #4]
 8010412:	68fb      	ldr	r3, [r7, #12]
 8010414:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8010416:	68fb      	ldr	r3, [r7, #12]
 8010418:	3b04      	subs	r3, #4
 801041a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801041c:	68fb      	ldr	r3, [r7, #12]
 801041e:	f06f 0202 	mvn.w	r2, #2
 8010422:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8010424:	68fb      	ldr	r3, [r7, #12]
 8010426:	3b20      	subs	r3, #32
 8010428:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801042a:	68fb      	ldr	r3, [r7, #12]
}
 801042c:	4618      	mov	r0, r3
 801042e:	3714      	adds	r7, #20
 8010430:	46bd      	mov	sp, r7
 8010432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010436:	4770      	bx	lr
 8010438:	0801043d 	.word	0x0801043d

0801043c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 801043c:	b480      	push	{r7}
 801043e:	b085      	sub	sp, #20
 8010440:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8010442:	2300      	movs	r3, #0
 8010444:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8010446:	4b12      	ldr	r3, [pc, #72]	; (8010490 <prvTaskExitError+0x54>)
 8010448:	681b      	ldr	r3, [r3, #0]
 801044a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801044e:	d00a      	beq.n	8010466 <prvTaskExitError+0x2a>
	__asm volatile
 8010450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010454:	f383 8811 	msr	BASEPRI, r3
 8010458:	f3bf 8f6f 	isb	sy
 801045c:	f3bf 8f4f 	dsb	sy
 8010460:	60fb      	str	r3, [r7, #12]
}
 8010462:	bf00      	nop
 8010464:	e7fe      	b.n	8010464 <prvTaskExitError+0x28>
	__asm volatile
 8010466:	f04f 0350 	mov.w	r3, #80	; 0x50
 801046a:	f383 8811 	msr	BASEPRI, r3
 801046e:	f3bf 8f6f 	isb	sy
 8010472:	f3bf 8f4f 	dsb	sy
 8010476:	60bb      	str	r3, [r7, #8]
}
 8010478:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801047a:	bf00      	nop
 801047c:	687b      	ldr	r3, [r7, #4]
 801047e:	2b00      	cmp	r3, #0
 8010480:	d0fc      	beq.n	801047c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8010482:	bf00      	nop
 8010484:	bf00      	nop
 8010486:	3714      	adds	r7, #20
 8010488:	46bd      	mov	sp, r7
 801048a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801048e:	4770      	bx	lr
 8010490:	20000074 	.word	0x20000074
	...

080104a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80104a0:	4b07      	ldr	r3, [pc, #28]	; (80104c0 <pxCurrentTCBConst2>)
 80104a2:	6819      	ldr	r1, [r3, #0]
 80104a4:	6808      	ldr	r0, [r1, #0]
 80104a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80104aa:	f380 8809 	msr	PSP, r0
 80104ae:	f3bf 8f6f 	isb	sy
 80104b2:	f04f 0000 	mov.w	r0, #0
 80104b6:	f380 8811 	msr	BASEPRI, r0
 80104ba:	4770      	bx	lr
 80104bc:	f3af 8000 	nop.w

080104c0 <pxCurrentTCBConst2>:
 80104c0:	20002c00 	.word	0x20002c00
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80104c4:	bf00      	nop
 80104c6:	bf00      	nop

080104c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80104c8:	4808      	ldr	r0, [pc, #32]	; (80104ec <prvPortStartFirstTask+0x24>)
 80104ca:	6800      	ldr	r0, [r0, #0]
 80104cc:	6800      	ldr	r0, [r0, #0]
 80104ce:	f380 8808 	msr	MSP, r0
 80104d2:	f04f 0000 	mov.w	r0, #0
 80104d6:	f380 8814 	msr	CONTROL, r0
 80104da:	b662      	cpsie	i
 80104dc:	b661      	cpsie	f
 80104de:	f3bf 8f4f 	dsb	sy
 80104e2:	f3bf 8f6f 	isb	sy
 80104e6:	df00      	svc	0
 80104e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80104ea:	bf00      	nop
 80104ec:	e000ed08 	.word	0xe000ed08

080104f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80104f0:	b580      	push	{r7, lr}
 80104f2:	b086      	sub	sp, #24
 80104f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80104f6:	4b46      	ldr	r3, [pc, #280]	; (8010610 <xPortStartScheduler+0x120>)
 80104f8:	681b      	ldr	r3, [r3, #0]
 80104fa:	4a46      	ldr	r2, [pc, #280]	; (8010614 <xPortStartScheduler+0x124>)
 80104fc:	4293      	cmp	r3, r2
 80104fe:	d10a      	bne.n	8010516 <xPortStartScheduler+0x26>
	__asm volatile
 8010500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010504:	f383 8811 	msr	BASEPRI, r3
 8010508:	f3bf 8f6f 	isb	sy
 801050c:	f3bf 8f4f 	dsb	sy
 8010510:	613b      	str	r3, [r7, #16]
}
 8010512:	bf00      	nop
 8010514:	e7fe      	b.n	8010514 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8010516:	4b3e      	ldr	r3, [pc, #248]	; (8010610 <xPortStartScheduler+0x120>)
 8010518:	681b      	ldr	r3, [r3, #0]
 801051a:	4a3f      	ldr	r2, [pc, #252]	; (8010618 <xPortStartScheduler+0x128>)
 801051c:	4293      	cmp	r3, r2
 801051e:	d10a      	bne.n	8010536 <xPortStartScheduler+0x46>
	__asm volatile
 8010520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010524:	f383 8811 	msr	BASEPRI, r3
 8010528:	f3bf 8f6f 	isb	sy
 801052c:	f3bf 8f4f 	dsb	sy
 8010530:	60fb      	str	r3, [r7, #12]
}
 8010532:	bf00      	nop
 8010534:	e7fe      	b.n	8010534 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8010536:	4b39      	ldr	r3, [pc, #228]	; (801061c <xPortStartScheduler+0x12c>)
 8010538:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801053a:	697b      	ldr	r3, [r7, #20]
 801053c:	781b      	ldrb	r3, [r3, #0]
 801053e:	b2db      	uxtb	r3, r3
 8010540:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8010542:	697b      	ldr	r3, [r7, #20]
 8010544:	22ff      	movs	r2, #255	; 0xff
 8010546:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8010548:	697b      	ldr	r3, [r7, #20]
 801054a:	781b      	ldrb	r3, [r3, #0]
 801054c:	b2db      	uxtb	r3, r3
 801054e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8010550:	78fb      	ldrb	r3, [r7, #3]
 8010552:	b2db      	uxtb	r3, r3
 8010554:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8010558:	b2da      	uxtb	r2, r3
 801055a:	4b31      	ldr	r3, [pc, #196]	; (8010620 <xPortStartScheduler+0x130>)
 801055c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801055e:	4b31      	ldr	r3, [pc, #196]	; (8010624 <xPortStartScheduler+0x134>)
 8010560:	2207      	movs	r2, #7
 8010562:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010564:	e009      	b.n	801057a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8010566:	4b2f      	ldr	r3, [pc, #188]	; (8010624 <xPortStartScheduler+0x134>)
 8010568:	681b      	ldr	r3, [r3, #0]
 801056a:	3b01      	subs	r3, #1
 801056c:	4a2d      	ldr	r2, [pc, #180]	; (8010624 <xPortStartScheduler+0x134>)
 801056e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8010570:	78fb      	ldrb	r3, [r7, #3]
 8010572:	b2db      	uxtb	r3, r3
 8010574:	005b      	lsls	r3, r3, #1
 8010576:	b2db      	uxtb	r3, r3
 8010578:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801057a:	78fb      	ldrb	r3, [r7, #3]
 801057c:	b2db      	uxtb	r3, r3
 801057e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010582:	2b80      	cmp	r3, #128	; 0x80
 8010584:	d0ef      	beq.n	8010566 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8010586:	4b27      	ldr	r3, [pc, #156]	; (8010624 <xPortStartScheduler+0x134>)
 8010588:	681b      	ldr	r3, [r3, #0]
 801058a:	f1c3 0307 	rsb	r3, r3, #7
 801058e:	2b04      	cmp	r3, #4
 8010590:	d00a      	beq.n	80105a8 <xPortStartScheduler+0xb8>
	__asm volatile
 8010592:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010596:	f383 8811 	msr	BASEPRI, r3
 801059a:	f3bf 8f6f 	isb	sy
 801059e:	f3bf 8f4f 	dsb	sy
 80105a2:	60bb      	str	r3, [r7, #8]
}
 80105a4:	bf00      	nop
 80105a6:	e7fe      	b.n	80105a6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80105a8:	4b1e      	ldr	r3, [pc, #120]	; (8010624 <xPortStartScheduler+0x134>)
 80105aa:	681b      	ldr	r3, [r3, #0]
 80105ac:	021b      	lsls	r3, r3, #8
 80105ae:	4a1d      	ldr	r2, [pc, #116]	; (8010624 <xPortStartScheduler+0x134>)
 80105b0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80105b2:	4b1c      	ldr	r3, [pc, #112]	; (8010624 <xPortStartScheduler+0x134>)
 80105b4:	681b      	ldr	r3, [r3, #0]
 80105b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80105ba:	4a1a      	ldr	r2, [pc, #104]	; (8010624 <xPortStartScheduler+0x134>)
 80105bc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80105be:	687b      	ldr	r3, [r7, #4]
 80105c0:	b2da      	uxtb	r2, r3
 80105c2:	697b      	ldr	r3, [r7, #20]
 80105c4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80105c6:	4b18      	ldr	r3, [pc, #96]	; (8010628 <xPortStartScheduler+0x138>)
 80105c8:	681b      	ldr	r3, [r3, #0]
 80105ca:	4a17      	ldr	r2, [pc, #92]	; (8010628 <xPortStartScheduler+0x138>)
 80105cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80105d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80105d2:	4b15      	ldr	r3, [pc, #84]	; (8010628 <xPortStartScheduler+0x138>)
 80105d4:	681b      	ldr	r3, [r3, #0]
 80105d6:	4a14      	ldr	r2, [pc, #80]	; (8010628 <xPortStartScheduler+0x138>)
 80105d8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80105dc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80105de:	f000 f8dd 	bl	801079c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80105e2:	4b12      	ldr	r3, [pc, #72]	; (801062c <xPortStartScheduler+0x13c>)
 80105e4:	2200      	movs	r2, #0
 80105e6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80105e8:	f000 f8fc 	bl	80107e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80105ec:	4b10      	ldr	r3, [pc, #64]	; (8010630 <xPortStartScheduler+0x140>)
 80105ee:	681b      	ldr	r3, [r3, #0]
 80105f0:	4a0f      	ldr	r2, [pc, #60]	; (8010630 <xPortStartScheduler+0x140>)
 80105f2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80105f6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80105f8:	f7ff ff66 	bl	80104c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80105fc:	f7ff fba4 	bl	800fd48 <vTaskSwitchContext>
	prvTaskExitError();
 8010600:	f7ff ff1c 	bl	801043c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8010604:	2300      	movs	r3, #0
}
 8010606:	4618      	mov	r0, r3
 8010608:	3718      	adds	r7, #24
 801060a:	46bd      	mov	sp, r7
 801060c:	bd80      	pop	{r7, pc}
 801060e:	bf00      	nop
 8010610:	e000ed00 	.word	0xe000ed00
 8010614:	410fc271 	.word	0x410fc271
 8010618:	410fc270 	.word	0x410fc270
 801061c:	e000e400 	.word	0xe000e400
 8010620:	20002d2c 	.word	0x20002d2c
 8010624:	20002d30 	.word	0x20002d30
 8010628:	e000ed20 	.word	0xe000ed20
 801062c:	20000074 	.word	0x20000074
 8010630:	e000ef34 	.word	0xe000ef34

08010634 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8010634:	b480      	push	{r7}
 8010636:	b083      	sub	sp, #12
 8010638:	af00      	add	r7, sp, #0
	__asm volatile
 801063a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801063e:	f383 8811 	msr	BASEPRI, r3
 8010642:	f3bf 8f6f 	isb	sy
 8010646:	f3bf 8f4f 	dsb	sy
 801064a:	607b      	str	r3, [r7, #4]
}
 801064c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801064e:	4b0f      	ldr	r3, [pc, #60]	; (801068c <vPortEnterCritical+0x58>)
 8010650:	681b      	ldr	r3, [r3, #0]
 8010652:	3301      	adds	r3, #1
 8010654:	4a0d      	ldr	r2, [pc, #52]	; (801068c <vPortEnterCritical+0x58>)
 8010656:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8010658:	4b0c      	ldr	r3, [pc, #48]	; (801068c <vPortEnterCritical+0x58>)
 801065a:	681b      	ldr	r3, [r3, #0]
 801065c:	2b01      	cmp	r3, #1
 801065e:	d10f      	bne.n	8010680 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8010660:	4b0b      	ldr	r3, [pc, #44]	; (8010690 <vPortEnterCritical+0x5c>)
 8010662:	681b      	ldr	r3, [r3, #0]
 8010664:	b2db      	uxtb	r3, r3
 8010666:	2b00      	cmp	r3, #0
 8010668:	d00a      	beq.n	8010680 <vPortEnterCritical+0x4c>
	__asm volatile
 801066a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801066e:	f383 8811 	msr	BASEPRI, r3
 8010672:	f3bf 8f6f 	isb	sy
 8010676:	f3bf 8f4f 	dsb	sy
 801067a:	603b      	str	r3, [r7, #0]
}
 801067c:	bf00      	nop
 801067e:	e7fe      	b.n	801067e <vPortEnterCritical+0x4a>
	}
}
 8010680:	bf00      	nop
 8010682:	370c      	adds	r7, #12
 8010684:	46bd      	mov	sp, r7
 8010686:	f85d 7b04 	ldr.w	r7, [sp], #4
 801068a:	4770      	bx	lr
 801068c:	20000074 	.word	0x20000074
 8010690:	e000ed04 	.word	0xe000ed04

08010694 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8010694:	b480      	push	{r7}
 8010696:	b083      	sub	sp, #12
 8010698:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801069a:	4b12      	ldr	r3, [pc, #72]	; (80106e4 <vPortExitCritical+0x50>)
 801069c:	681b      	ldr	r3, [r3, #0]
 801069e:	2b00      	cmp	r3, #0
 80106a0:	d10a      	bne.n	80106b8 <vPortExitCritical+0x24>
	__asm volatile
 80106a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106a6:	f383 8811 	msr	BASEPRI, r3
 80106aa:	f3bf 8f6f 	isb	sy
 80106ae:	f3bf 8f4f 	dsb	sy
 80106b2:	607b      	str	r3, [r7, #4]
}
 80106b4:	bf00      	nop
 80106b6:	e7fe      	b.n	80106b6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80106b8:	4b0a      	ldr	r3, [pc, #40]	; (80106e4 <vPortExitCritical+0x50>)
 80106ba:	681b      	ldr	r3, [r3, #0]
 80106bc:	3b01      	subs	r3, #1
 80106be:	4a09      	ldr	r2, [pc, #36]	; (80106e4 <vPortExitCritical+0x50>)
 80106c0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80106c2:	4b08      	ldr	r3, [pc, #32]	; (80106e4 <vPortExitCritical+0x50>)
 80106c4:	681b      	ldr	r3, [r3, #0]
 80106c6:	2b00      	cmp	r3, #0
 80106c8:	d105      	bne.n	80106d6 <vPortExitCritical+0x42>
 80106ca:	2300      	movs	r3, #0
 80106cc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80106ce:	683b      	ldr	r3, [r7, #0]
 80106d0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80106d4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80106d6:	bf00      	nop
 80106d8:	370c      	adds	r7, #12
 80106da:	46bd      	mov	sp, r7
 80106dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106e0:	4770      	bx	lr
 80106e2:	bf00      	nop
 80106e4:	20000074 	.word	0x20000074
	...

080106f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80106f0:	f3ef 8009 	mrs	r0, PSP
 80106f4:	f3bf 8f6f 	isb	sy
 80106f8:	4b15      	ldr	r3, [pc, #84]	; (8010750 <pxCurrentTCBConst>)
 80106fa:	681a      	ldr	r2, [r3, #0]
 80106fc:	f01e 0f10 	tst.w	lr, #16
 8010700:	bf08      	it	eq
 8010702:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8010706:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801070a:	6010      	str	r0, [r2, #0]
 801070c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8010710:	f04f 0050 	mov.w	r0, #80	; 0x50
 8010714:	f380 8811 	msr	BASEPRI, r0
 8010718:	f3bf 8f4f 	dsb	sy
 801071c:	f3bf 8f6f 	isb	sy
 8010720:	f7ff fb12 	bl	800fd48 <vTaskSwitchContext>
 8010724:	f04f 0000 	mov.w	r0, #0
 8010728:	f380 8811 	msr	BASEPRI, r0
 801072c:	bc09      	pop	{r0, r3}
 801072e:	6819      	ldr	r1, [r3, #0]
 8010730:	6808      	ldr	r0, [r1, #0]
 8010732:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010736:	f01e 0f10 	tst.w	lr, #16
 801073a:	bf08      	it	eq
 801073c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8010740:	f380 8809 	msr	PSP, r0
 8010744:	f3bf 8f6f 	isb	sy
 8010748:	4770      	bx	lr
 801074a:	bf00      	nop
 801074c:	f3af 8000 	nop.w

08010750 <pxCurrentTCBConst>:
 8010750:	20002c00 	.word	0x20002c00
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8010754:	bf00      	nop
 8010756:	bf00      	nop

08010758 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8010758:	b580      	push	{r7, lr}
 801075a:	b082      	sub	sp, #8
 801075c:	af00      	add	r7, sp, #0
	__asm volatile
 801075e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010762:	f383 8811 	msr	BASEPRI, r3
 8010766:	f3bf 8f6f 	isb	sy
 801076a:	f3bf 8f4f 	dsb	sy
 801076e:	607b      	str	r3, [r7, #4]
}
 8010770:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8010772:	f7ff fa31 	bl	800fbd8 <xTaskIncrementTick>
 8010776:	4603      	mov	r3, r0
 8010778:	2b00      	cmp	r3, #0
 801077a:	d003      	beq.n	8010784 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801077c:	4b06      	ldr	r3, [pc, #24]	; (8010798 <xPortSysTickHandler+0x40>)
 801077e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010782:	601a      	str	r2, [r3, #0]
 8010784:	2300      	movs	r3, #0
 8010786:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010788:	683b      	ldr	r3, [r7, #0]
 801078a:	f383 8811 	msr	BASEPRI, r3
}
 801078e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8010790:	bf00      	nop
 8010792:	3708      	adds	r7, #8
 8010794:	46bd      	mov	sp, r7
 8010796:	bd80      	pop	{r7, pc}
 8010798:	e000ed04 	.word	0xe000ed04

0801079c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801079c:	b480      	push	{r7}
 801079e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80107a0:	4b0b      	ldr	r3, [pc, #44]	; (80107d0 <vPortSetupTimerInterrupt+0x34>)
 80107a2:	2200      	movs	r2, #0
 80107a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80107a6:	4b0b      	ldr	r3, [pc, #44]	; (80107d4 <vPortSetupTimerInterrupt+0x38>)
 80107a8:	2200      	movs	r2, #0
 80107aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80107ac:	4b0a      	ldr	r3, [pc, #40]	; (80107d8 <vPortSetupTimerInterrupt+0x3c>)
 80107ae:	681b      	ldr	r3, [r3, #0]
 80107b0:	4a0a      	ldr	r2, [pc, #40]	; (80107dc <vPortSetupTimerInterrupt+0x40>)
 80107b2:	fba2 2303 	umull	r2, r3, r2, r3
 80107b6:	099b      	lsrs	r3, r3, #6
 80107b8:	4a09      	ldr	r2, [pc, #36]	; (80107e0 <vPortSetupTimerInterrupt+0x44>)
 80107ba:	3b01      	subs	r3, #1
 80107bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80107be:	4b04      	ldr	r3, [pc, #16]	; (80107d0 <vPortSetupTimerInterrupt+0x34>)
 80107c0:	2207      	movs	r2, #7
 80107c2:	601a      	str	r2, [r3, #0]
}
 80107c4:	bf00      	nop
 80107c6:	46bd      	mov	sp, r7
 80107c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107cc:	4770      	bx	lr
 80107ce:	bf00      	nop
 80107d0:	e000e010 	.word	0xe000e010
 80107d4:	e000e018 	.word	0xe000e018
 80107d8:	2000000c 	.word	0x2000000c
 80107dc:	10624dd3 	.word	0x10624dd3
 80107e0:	e000e014 	.word	0xe000e014

080107e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80107e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80107f4 <vPortEnableVFP+0x10>
 80107e8:	6801      	ldr	r1, [r0, #0]
 80107ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80107ee:	6001      	str	r1, [r0, #0]
 80107f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80107f2:	bf00      	nop
 80107f4:	e000ed88 	.word	0xe000ed88

080107f8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80107f8:	b580      	push	{r7, lr}
 80107fa:	b08a      	sub	sp, #40	; 0x28
 80107fc:	af00      	add	r7, sp, #0
 80107fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8010800:	2300      	movs	r3, #0
 8010802:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8010804:	f7ff f93e 	bl	800fa84 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8010808:	4b5b      	ldr	r3, [pc, #364]	; (8010978 <pvPortMalloc+0x180>)
 801080a:	681b      	ldr	r3, [r3, #0]
 801080c:	2b00      	cmp	r3, #0
 801080e:	d101      	bne.n	8010814 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8010810:	f000 f920 	bl	8010a54 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8010814:	4b59      	ldr	r3, [pc, #356]	; (801097c <pvPortMalloc+0x184>)
 8010816:	681a      	ldr	r2, [r3, #0]
 8010818:	687b      	ldr	r3, [r7, #4]
 801081a:	4013      	ands	r3, r2
 801081c:	2b00      	cmp	r3, #0
 801081e:	f040 8093 	bne.w	8010948 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8010822:	687b      	ldr	r3, [r7, #4]
 8010824:	2b00      	cmp	r3, #0
 8010826:	d01d      	beq.n	8010864 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8010828:	2208      	movs	r2, #8
 801082a:	687b      	ldr	r3, [r7, #4]
 801082c:	4413      	add	r3, r2
 801082e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8010830:	687b      	ldr	r3, [r7, #4]
 8010832:	f003 0307 	and.w	r3, r3, #7
 8010836:	2b00      	cmp	r3, #0
 8010838:	d014      	beq.n	8010864 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801083a:	687b      	ldr	r3, [r7, #4]
 801083c:	f023 0307 	bic.w	r3, r3, #7
 8010840:	3308      	adds	r3, #8
 8010842:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010844:	687b      	ldr	r3, [r7, #4]
 8010846:	f003 0307 	and.w	r3, r3, #7
 801084a:	2b00      	cmp	r3, #0
 801084c:	d00a      	beq.n	8010864 <pvPortMalloc+0x6c>
	__asm volatile
 801084e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010852:	f383 8811 	msr	BASEPRI, r3
 8010856:	f3bf 8f6f 	isb	sy
 801085a:	f3bf 8f4f 	dsb	sy
 801085e:	617b      	str	r3, [r7, #20]
}
 8010860:	bf00      	nop
 8010862:	e7fe      	b.n	8010862 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8010864:	687b      	ldr	r3, [r7, #4]
 8010866:	2b00      	cmp	r3, #0
 8010868:	d06e      	beq.n	8010948 <pvPortMalloc+0x150>
 801086a:	4b45      	ldr	r3, [pc, #276]	; (8010980 <pvPortMalloc+0x188>)
 801086c:	681b      	ldr	r3, [r3, #0]
 801086e:	687a      	ldr	r2, [r7, #4]
 8010870:	429a      	cmp	r2, r3
 8010872:	d869      	bhi.n	8010948 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8010874:	4b43      	ldr	r3, [pc, #268]	; (8010984 <pvPortMalloc+0x18c>)
 8010876:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8010878:	4b42      	ldr	r3, [pc, #264]	; (8010984 <pvPortMalloc+0x18c>)
 801087a:	681b      	ldr	r3, [r3, #0]
 801087c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801087e:	e004      	b.n	801088a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8010880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010882:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8010884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010886:	681b      	ldr	r3, [r3, #0]
 8010888:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801088a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801088c:	685b      	ldr	r3, [r3, #4]
 801088e:	687a      	ldr	r2, [r7, #4]
 8010890:	429a      	cmp	r2, r3
 8010892:	d903      	bls.n	801089c <pvPortMalloc+0xa4>
 8010894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010896:	681b      	ldr	r3, [r3, #0]
 8010898:	2b00      	cmp	r3, #0
 801089a:	d1f1      	bne.n	8010880 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801089c:	4b36      	ldr	r3, [pc, #216]	; (8010978 <pvPortMalloc+0x180>)
 801089e:	681b      	ldr	r3, [r3, #0]
 80108a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80108a2:	429a      	cmp	r2, r3
 80108a4:	d050      	beq.n	8010948 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80108a6:	6a3b      	ldr	r3, [r7, #32]
 80108a8:	681b      	ldr	r3, [r3, #0]
 80108aa:	2208      	movs	r2, #8
 80108ac:	4413      	add	r3, r2
 80108ae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80108b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108b2:	681a      	ldr	r2, [r3, #0]
 80108b4:	6a3b      	ldr	r3, [r7, #32]
 80108b6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80108b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108ba:	685a      	ldr	r2, [r3, #4]
 80108bc:	687b      	ldr	r3, [r7, #4]
 80108be:	1ad2      	subs	r2, r2, r3
 80108c0:	2308      	movs	r3, #8
 80108c2:	005b      	lsls	r3, r3, #1
 80108c4:	429a      	cmp	r2, r3
 80108c6:	d91f      	bls.n	8010908 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80108c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80108ca:	687b      	ldr	r3, [r7, #4]
 80108cc:	4413      	add	r3, r2
 80108ce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80108d0:	69bb      	ldr	r3, [r7, #24]
 80108d2:	f003 0307 	and.w	r3, r3, #7
 80108d6:	2b00      	cmp	r3, #0
 80108d8:	d00a      	beq.n	80108f0 <pvPortMalloc+0xf8>
	__asm volatile
 80108da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108de:	f383 8811 	msr	BASEPRI, r3
 80108e2:	f3bf 8f6f 	isb	sy
 80108e6:	f3bf 8f4f 	dsb	sy
 80108ea:	613b      	str	r3, [r7, #16]
}
 80108ec:	bf00      	nop
 80108ee:	e7fe      	b.n	80108ee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80108f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108f2:	685a      	ldr	r2, [r3, #4]
 80108f4:	687b      	ldr	r3, [r7, #4]
 80108f6:	1ad2      	subs	r2, r2, r3
 80108f8:	69bb      	ldr	r3, [r7, #24]
 80108fa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80108fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108fe:	687a      	ldr	r2, [r7, #4]
 8010900:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8010902:	69b8      	ldr	r0, [r7, #24]
 8010904:	f000 f908 	bl	8010b18 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8010908:	4b1d      	ldr	r3, [pc, #116]	; (8010980 <pvPortMalloc+0x188>)
 801090a:	681a      	ldr	r2, [r3, #0]
 801090c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801090e:	685b      	ldr	r3, [r3, #4]
 8010910:	1ad3      	subs	r3, r2, r3
 8010912:	4a1b      	ldr	r2, [pc, #108]	; (8010980 <pvPortMalloc+0x188>)
 8010914:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8010916:	4b1a      	ldr	r3, [pc, #104]	; (8010980 <pvPortMalloc+0x188>)
 8010918:	681a      	ldr	r2, [r3, #0]
 801091a:	4b1b      	ldr	r3, [pc, #108]	; (8010988 <pvPortMalloc+0x190>)
 801091c:	681b      	ldr	r3, [r3, #0]
 801091e:	429a      	cmp	r2, r3
 8010920:	d203      	bcs.n	801092a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8010922:	4b17      	ldr	r3, [pc, #92]	; (8010980 <pvPortMalloc+0x188>)
 8010924:	681b      	ldr	r3, [r3, #0]
 8010926:	4a18      	ldr	r2, [pc, #96]	; (8010988 <pvPortMalloc+0x190>)
 8010928:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801092a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801092c:	685a      	ldr	r2, [r3, #4]
 801092e:	4b13      	ldr	r3, [pc, #76]	; (801097c <pvPortMalloc+0x184>)
 8010930:	681b      	ldr	r3, [r3, #0]
 8010932:	431a      	orrs	r2, r3
 8010934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010936:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8010938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801093a:	2200      	movs	r2, #0
 801093c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801093e:	4b13      	ldr	r3, [pc, #76]	; (801098c <pvPortMalloc+0x194>)
 8010940:	681b      	ldr	r3, [r3, #0]
 8010942:	3301      	adds	r3, #1
 8010944:	4a11      	ldr	r2, [pc, #68]	; (801098c <pvPortMalloc+0x194>)
 8010946:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8010948:	f7ff f8aa 	bl	800faa0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801094c:	69fb      	ldr	r3, [r7, #28]
 801094e:	f003 0307 	and.w	r3, r3, #7
 8010952:	2b00      	cmp	r3, #0
 8010954:	d00a      	beq.n	801096c <pvPortMalloc+0x174>
	__asm volatile
 8010956:	f04f 0350 	mov.w	r3, #80	; 0x50
 801095a:	f383 8811 	msr	BASEPRI, r3
 801095e:	f3bf 8f6f 	isb	sy
 8010962:	f3bf 8f4f 	dsb	sy
 8010966:	60fb      	str	r3, [r7, #12]
}
 8010968:	bf00      	nop
 801096a:	e7fe      	b.n	801096a <pvPortMalloc+0x172>
	return pvReturn;
 801096c:	69fb      	ldr	r3, [r7, #28]
}
 801096e:	4618      	mov	r0, r3
 8010970:	3728      	adds	r7, #40	; 0x28
 8010972:	46bd      	mov	sp, r7
 8010974:	bd80      	pop	{r7, pc}
 8010976:	bf00      	nop
 8010978:	2000693c 	.word	0x2000693c
 801097c:	20006950 	.word	0x20006950
 8010980:	20006940 	.word	0x20006940
 8010984:	20006934 	.word	0x20006934
 8010988:	20006944 	.word	0x20006944
 801098c:	20006948 	.word	0x20006948

08010990 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8010990:	b580      	push	{r7, lr}
 8010992:	b086      	sub	sp, #24
 8010994:	af00      	add	r7, sp, #0
 8010996:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8010998:	687b      	ldr	r3, [r7, #4]
 801099a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801099c:	687b      	ldr	r3, [r7, #4]
 801099e:	2b00      	cmp	r3, #0
 80109a0:	d04d      	beq.n	8010a3e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80109a2:	2308      	movs	r3, #8
 80109a4:	425b      	negs	r3, r3
 80109a6:	697a      	ldr	r2, [r7, #20]
 80109a8:	4413      	add	r3, r2
 80109aa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80109ac:	697b      	ldr	r3, [r7, #20]
 80109ae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80109b0:	693b      	ldr	r3, [r7, #16]
 80109b2:	685a      	ldr	r2, [r3, #4]
 80109b4:	4b24      	ldr	r3, [pc, #144]	; (8010a48 <vPortFree+0xb8>)
 80109b6:	681b      	ldr	r3, [r3, #0]
 80109b8:	4013      	ands	r3, r2
 80109ba:	2b00      	cmp	r3, #0
 80109bc:	d10a      	bne.n	80109d4 <vPortFree+0x44>
	__asm volatile
 80109be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109c2:	f383 8811 	msr	BASEPRI, r3
 80109c6:	f3bf 8f6f 	isb	sy
 80109ca:	f3bf 8f4f 	dsb	sy
 80109ce:	60fb      	str	r3, [r7, #12]
}
 80109d0:	bf00      	nop
 80109d2:	e7fe      	b.n	80109d2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80109d4:	693b      	ldr	r3, [r7, #16]
 80109d6:	681b      	ldr	r3, [r3, #0]
 80109d8:	2b00      	cmp	r3, #0
 80109da:	d00a      	beq.n	80109f2 <vPortFree+0x62>
	__asm volatile
 80109dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109e0:	f383 8811 	msr	BASEPRI, r3
 80109e4:	f3bf 8f6f 	isb	sy
 80109e8:	f3bf 8f4f 	dsb	sy
 80109ec:	60bb      	str	r3, [r7, #8]
}
 80109ee:	bf00      	nop
 80109f0:	e7fe      	b.n	80109f0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80109f2:	693b      	ldr	r3, [r7, #16]
 80109f4:	685a      	ldr	r2, [r3, #4]
 80109f6:	4b14      	ldr	r3, [pc, #80]	; (8010a48 <vPortFree+0xb8>)
 80109f8:	681b      	ldr	r3, [r3, #0]
 80109fa:	4013      	ands	r3, r2
 80109fc:	2b00      	cmp	r3, #0
 80109fe:	d01e      	beq.n	8010a3e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8010a00:	693b      	ldr	r3, [r7, #16]
 8010a02:	681b      	ldr	r3, [r3, #0]
 8010a04:	2b00      	cmp	r3, #0
 8010a06:	d11a      	bne.n	8010a3e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8010a08:	693b      	ldr	r3, [r7, #16]
 8010a0a:	685a      	ldr	r2, [r3, #4]
 8010a0c:	4b0e      	ldr	r3, [pc, #56]	; (8010a48 <vPortFree+0xb8>)
 8010a0e:	681b      	ldr	r3, [r3, #0]
 8010a10:	43db      	mvns	r3, r3
 8010a12:	401a      	ands	r2, r3
 8010a14:	693b      	ldr	r3, [r7, #16]
 8010a16:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8010a18:	f7ff f834 	bl	800fa84 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8010a1c:	693b      	ldr	r3, [r7, #16]
 8010a1e:	685a      	ldr	r2, [r3, #4]
 8010a20:	4b0a      	ldr	r3, [pc, #40]	; (8010a4c <vPortFree+0xbc>)
 8010a22:	681b      	ldr	r3, [r3, #0]
 8010a24:	4413      	add	r3, r2
 8010a26:	4a09      	ldr	r2, [pc, #36]	; (8010a4c <vPortFree+0xbc>)
 8010a28:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8010a2a:	6938      	ldr	r0, [r7, #16]
 8010a2c:	f000 f874 	bl	8010b18 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8010a30:	4b07      	ldr	r3, [pc, #28]	; (8010a50 <vPortFree+0xc0>)
 8010a32:	681b      	ldr	r3, [r3, #0]
 8010a34:	3301      	adds	r3, #1
 8010a36:	4a06      	ldr	r2, [pc, #24]	; (8010a50 <vPortFree+0xc0>)
 8010a38:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8010a3a:	f7ff f831 	bl	800faa0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8010a3e:	bf00      	nop
 8010a40:	3718      	adds	r7, #24
 8010a42:	46bd      	mov	sp, r7
 8010a44:	bd80      	pop	{r7, pc}
 8010a46:	bf00      	nop
 8010a48:	20006950 	.word	0x20006950
 8010a4c:	20006940 	.word	0x20006940
 8010a50:	2000694c 	.word	0x2000694c

08010a54 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8010a54:	b480      	push	{r7}
 8010a56:	b085      	sub	sp, #20
 8010a58:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8010a5a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8010a5e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8010a60:	4b27      	ldr	r3, [pc, #156]	; (8010b00 <prvHeapInit+0xac>)
 8010a62:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8010a64:	68fb      	ldr	r3, [r7, #12]
 8010a66:	f003 0307 	and.w	r3, r3, #7
 8010a6a:	2b00      	cmp	r3, #0
 8010a6c:	d00c      	beq.n	8010a88 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8010a6e:	68fb      	ldr	r3, [r7, #12]
 8010a70:	3307      	adds	r3, #7
 8010a72:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010a74:	68fb      	ldr	r3, [r7, #12]
 8010a76:	f023 0307 	bic.w	r3, r3, #7
 8010a7a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8010a7c:	68ba      	ldr	r2, [r7, #8]
 8010a7e:	68fb      	ldr	r3, [r7, #12]
 8010a80:	1ad3      	subs	r3, r2, r3
 8010a82:	4a1f      	ldr	r2, [pc, #124]	; (8010b00 <prvHeapInit+0xac>)
 8010a84:	4413      	add	r3, r2
 8010a86:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8010a88:	68fb      	ldr	r3, [r7, #12]
 8010a8a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8010a8c:	4a1d      	ldr	r2, [pc, #116]	; (8010b04 <prvHeapInit+0xb0>)
 8010a8e:	687b      	ldr	r3, [r7, #4]
 8010a90:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8010a92:	4b1c      	ldr	r3, [pc, #112]	; (8010b04 <prvHeapInit+0xb0>)
 8010a94:	2200      	movs	r2, #0
 8010a96:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8010a98:	687b      	ldr	r3, [r7, #4]
 8010a9a:	68ba      	ldr	r2, [r7, #8]
 8010a9c:	4413      	add	r3, r2
 8010a9e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8010aa0:	2208      	movs	r2, #8
 8010aa2:	68fb      	ldr	r3, [r7, #12]
 8010aa4:	1a9b      	subs	r3, r3, r2
 8010aa6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010aa8:	68fb      	ldr	r3, [r7, #12]
 8010aaa:	f023 0307 	bic.w	r3, r3, #7
 8010aae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8010ab0:	68fb      	ldr	r3, [r7, #12]
 8010ab2:	4a15      	ldr	r2, [pc, #84]	; (8010b08 <prvHeapInit+0xb4>)
 8010ab4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8010ab6:	4b14      	ldr	r3, [pc, #80]	; (8010b08 <prvHeapInit+0xb4>)
 8010ab8:	681b      	ldr	r3, [r3, #0]
 8010aba:	2200      	movs	r2, #0
 8010abc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8010abe:	4b12      	ldr	r3, [pc, #72]	; (8010b08 <prvHeapInit+0xb4>)
 8010ac0:	681b      	ldr	r3, [r3, #0]
 8010ac2:	2200      	movs	r2, #0
 8010ac4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8010ac6:	687b      	ldr	r3, [r7, #4]
 8010ac8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8010aca:	683b      	ldr	r3, [r7, #0]
 8010acc:	68fa      	ldr	r2, [r7, #12]
 8010ace:	1ad2      	subs	r2, r2, r3
 8010ad0:	683b      	ldr	r3, [r7, #0]
 8010ad2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8010ad4:	4b0c      	ldr	r3, [pc, #48]	; (8010b08 <prvHeapInit+0xb4>)
 8010ad6:	681a      	ldr	r2, [r3, #0]
 8010ad8:	683b      	ldr	r3, [r7, #0]
 8010ada:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010adc:	683b      	ldr	r3, [r7, #0]
 8010ade:	685b      	ldr	r3, [r3, #4]
 8010ae0:	4a0a      	ldr	r2, [pc, #40]	; (8010b0c <prvHeapInit+0xb8>)
 8010ae2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010ae4:	683b      	ldr	r3, [r7, #0]
 8010ae6:	685b      	ldr	r3, [r3, #4]
 8010ae8:	4a09      	ldr	r2, [pc, #36]	; (8010b10 <prvHeapInit+0xbc>)
 8010aea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8010aec:	4b09      	ldr	r3, [pc, #36]	; (8010b14 <prvHeapInit+0xc0>)
 8010aee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8010af2:	601a      	str	r2, [r3, #0]
}
 8010af4:	bf00      	nop
 8010af6:	3714      	adds	r7, #20
 8010af8:	46bd      	mov	sp, r7
 8010afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010afe:	4770      	bx	lr
 8010b00:	20002d34 	.word	0x20002d34
 8010b04:	20006934 	.word	0x20006934
 8010b08:	2000693c 	.word	0x2000693c
 8010b0c:	20006944 	.word	0x20006944
 8010b10:	20006940 	.word	0x20006940
 8010b14:	20006950 	.word	0x20006950

08010b18 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8010b18:	b480      	push	{r7}
 8010b1a:	b085      	sub	sp, #20
 8010b1c:	af00      	add	r7, sp, #0
 8010b1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8010b20:	4b28      	ldr	r3, [pc, #160]	; (8010bc4 <prvInsertBlockIntoFreeList+0xac>)
 8010b22:	60fb      	str	r3, [r7, #12]
 8010b24:	e002      	b.n	8010b2c <prvInsertBlockIntoFreeList+0x14>
 8010b26:	68fb      	ldr	r3, [r7, #12]
 8010b28:	681b      	ldr	r3, [r3, #0]
 8010b2a:	60fb      	str	r3, [r7, #12]
 8010b2c:	68fb      	ldr	r3, [r7, #12]
 8010b2e:	681b      	ldr	r3, [r3, #0]
 8010b30:	687a      	ldr	r2, [r7, #4]
 8010b32:	429a      	cmp	r2, r3
 8010b34:	d8f7      	bhi.n	8010b26 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8010b36:	68fb      	ldr	r3, [r7, #12]
 8010b38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8010b3a:	68fb      	ldr	r3, [r7, #12]
 8010b3c:	685b      	ldr	r3, [r3, #4]
 8010b3e:	68ba      	ldr	r2, [r7, #8]
 8010b40:	4413      	add	r3, r2
 8010b42:	687a      	ldr	r2, [r7, #4]
 8010b44:	429a      	cmp	r2, r3
 8010b46:	d108      	bne.n	8010b5a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8010b48:	68fb      	ldr	r3, [r7, #12]
 8010b4a:	685a      	ldr	r2, [r3, #4]
 8010b4c:	687b      	ldr	r3, [r7, #4]
 8010b4e:	685b      	ldr	r3, [r3, #4]
 8010b50:	441a      	add	r2, r3
 8010b52:	68fb      	ldr	r3, [r7, #12]
 8010b54:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8010b56:	68fb      	ldr	r3, [r7, #12]
 8010b58:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8010b5a:	687b      	ldr	r3, [r7, #4]
 8010b5c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8010b5e:	687b      	ldr	r3, [r7, #4]
 8010b60:	685b      	ldr	r3, [r3, #4]
 8010b62:	68ba      	ldr	r2, [r7, #8]
 8010b64:	441a      	add	r2, r3
 8010b66:	68fb      	ldr	r3, [r7, #12]
 8010b68:	681b      	ldr	r3, [r3, #0]
 8010b6a:	429a      	cmp	r2, r3
 8010b6c:	d118      	bne.n	8010ba0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8010b6e:	68fb      	ldr	r3, [r7, #12]
 8010b70:	681a      	ldr	r2, [r3, #0]
 8010b72:	4b15      	ldr	r3, [pc, #84]	; (8010bc8 <prvInsertBlockIntoFreeList+0xb0>)
 8010b74:	681b      	ldr	r3, [r3, #0]
 8010b76:	429a      	cmp	r2, r3
 8010b78:	d00d      	beq.n	8010b96 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8010b7a:	687b      	ldr	r3, [r7, #4]
 8010b7c:	685a      	ldr	r2, [r3, #4]
 8010b7e:	68fb      	ldr	r3, [r7, #12]
 8010b80:	681b      	ldr	r3, [r3, #0]
 8010b82:	685b      	ldr	r3, [r3, #4]
 8010b84:	441a      	add	r2, r3
 8010b86:	687b      	ldr	r3, [r7, #4]
 8010b88:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8010b8a:	68fb      	ldr	r3, [r7, #12]
 8010b8c:	681b      	ldr	r3, [r3, #0]
 8010b8e:	681a      	ldr	r2, [r3, #0]
 8010b90:	687b      	ldr	r3, [r7, #4]
 8010b92:	601a      	str	r2, [r3, #0]
 8010b94:	e008      	b.n	8010ba8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8010b96:	4b0c      	ldr	r3, [pc, #48]	; (8010bc8 <prvInsertBlockIntoFreeList+0xb0>)
 8010b98:	681a      	ldr	r2, [r3, #0]
 8010b9a:	687b      	ldr	r3, [r7, #4]
 8010b9c:	601a      	str	r2, [r3, #0]
 8010b9e:	e003      	b.n	8010ba8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8010ba0:	68fb      	ldr	r3, [r7, #12]
 8010ba2:	681a      	ldr	r2, [r3, #0]
 8010ba4:	687b      	ldr	r3, [r7, #4]
 8010ba6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8010ba8:	68fa      	ldr	r2, [r7, #12]
 8010baa:	687b      	ldr	r3, [r7, #4]
 8010bac:	429a      	cmp	r2, r3
 8010bae:	d002      	beq.n	8010bb6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8010bb0:	68fb      	ldr	r3, [r7, #12]
 8010bb2:	687a      	ldr	r2, [r7, #4]
 8010bb4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010bb6:	bf00      	nop
 8010bb8:	3714      	adds	r7, #20
 8010bba:	46bd      	mov	sp, r7
 8010bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bc0:	4770      	bx	lr
 8010bc2:	bf00      	nop
 8010bc4:	20006934 	.word	0x20006934
 8010bc8:	2000693c 	.word	0x2000693c

08010bcc <__errno>:
 8010bcc:	4b01      	ldr	r3, [pc, #4]	; (8010bd4 <__errno+0x8>)
 8010bce:	6818      	ldr	r0, [r3, #0]
 8010bd0:	4770      	bx	lr
 8010bd2:	bf00      	nop
 8010bd4:	20000078 	.word	0x20000078

08010bd8 <__libc_init_array>:
 8010bd8:	b570      	push	{r4, r5, r6, lr}
 8010bda:	4d0d      	ldr	r5, [pc, #52]	; (8010c10 <__libc_init_array+0x38>)
 8010bdc:	4c0d      	ldr	r4, [pc, #52]	; (8010c14 <__libc_init_array+0x3c>)
 8010bde:	1b64      	subs	r4, r4, r5
 8010be0:	10a4      	asrs	r4, r4, #2
 8010be2:	2600      	movs	r6, #0
 8010be4:	42a6      	cmp	r6, r4
 8010be6:	d109      	bne.n	8010bfc <__libc_init_array+0x24>
 8010be8:	4d0b      	ldr	r5, [pc, #44]	; (8010c18 <__libc_init_array+0x40>)
 8010bea:	4c0c      	ldr	r4, [pc, #48]	; (8010c1c <__libc_init_array+0x44>)
 8010bec:	f005 f960 	bl	8015eb0 <_init>
 8010bf0:	1b64      	subs	r4, r4, r5
 8010bf2:	10a4      	asrs	r4, r4, #2
 8010bf4:	2600      	movs	r6, #0
 8010bf6:	42a6      	cmp	r6, r4
 8010bf8:	d105      	bne.n	8010c06 <__libc_init_array+0x2e>
 8010bfa:	bd70      	pop	{r4, r5, r6, pc}
 8010bfc:	f855 3b04 	ldr.w	r3, [r5], #4
 8010c00:	4798      	blx	r3
 8010c02:	3601      	adds	r6, #1
 8010c04:	e7ee      	b.n	8010be4 <__libc_init_array+0xc>
 8010c06:	f855 3b04 	ldr.w	r3, [r5], #4
 8010c0a:	4798      	blx	r3
 8010c0c:	3601      	adds	r6, #1
 8010c0e:	e7f2      	b.n	8010bf6 <__libc_init_array+0x1e>
 8010c10:	080168b8 	.word	0x080168b8
 8010c14:	080168b8 	.word	0x080168b8
 8010c18:	080168b8 	.word	0x080168b8
 8010c1c:	080168bc 	.word	0x080168bc

08010c20 <memcpy>:
 8010c20:	440a      	add	r2, r1
 8010c22:	4291      	cmp	r1, r2
 8010c24:	f100 33ff 	add.w	r3, r0, #4294967295
 8010c28:	d100      	bne.n	8010c2c <memcpy+0xc>
 8010c2a:	4770      	bx	lr
 8010c2c:	b510      	push	{r4, lr}
 8010c2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010c32:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010c36:	4291      	cmp	r1, r2
 8010c38:	d1f9      	bne.n	8010c2e <memcpy+0xe>
 8010c3a:	bd10      	pop	{r4, pc}

08010c3c <memset>:
 8010c3c:	4402      	add	r2, r0
 8010c3e:	4603      	mov	r3, r0
 8010c40:	4293      	cmp	r3, r2
 8010c42:	d100      	bne.n	8010c46 <memset+0xa>
 8010c44:	4770      	bx	lr
 8010c46:	f803 1b01 	strb.w	r1, [r3], #1
 8010c4a:	e7f9      	b.n	8010c40 <memset+0x4>

08010c4c <__cvt>:
 8010c4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010c50:	ec55 4b10 	vmov	r4, r5, d0
 8010c54:	2d00      	cmp	r5, #0
 8010c56:	460e      	mov	r6, r1
 8010c58:	4619      	mov	r1, r3
 8010c5a:	462b      	mov	r3, r5
 8010c5c:	bfbb      	ittet	lt
 8010c5e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8010c62:	461d      	movlt	r5, r3
 8010c64:	2300      	movge	r3, #0
 8010c66:	232d      	movlt	r3, #45	; 0x2d
 8010c68:	700b      	strb	r3, [r1, #0]
 8010c6a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010c6c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8010c70:	4691      	mov	r9, r2
 8010c72:	f023 0820 	bic.w	r8, r3, #32
 8010c76:	bfbc      	itt	lt
 8010c78:	4622      	movlt	r2, r4
 8010c7a:	4614      	movlt	r4, r2
 8010c7c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8010c80:	d005      	beq.n	8010c8e <__cvt+0x42>
 8010c82:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8010c86:	d100      	bne.n	8010c8a <__cvt+0x3e>
 8010c88:	3601      	adds	r6, #1
 8010c8a:	2102      	movs	r1, #2
 8010c8c:	e000      	b.n	8010c90 <__cvt+0x44>
 8010c8e:	2103      	movs	r1, #3
 8010c90:	ab03      	add	r3, sp, #12
 8010c92:	9301      	str	r3, [sp, #4]
 8010c94:	ab02      	add	r3, sp, #8
 8010c96:	9300      	str	r3, [sp, #0]
 8010c98:	ec45 4b10 	vmov	d0, r4, r5
 8010c9c:	4653      	mov	r3, sl
 8010c9e:	4632      	mov	r2, r6
 8010ca0:	f000 fcea 	bl	8011678 <_dtoa_r>
 8010ca4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8010ca8:	4607      	mov	r7, r0
 8010caa:	d102      	bne.n	8010cb2 <__cvt+0x66>
 8010cac:	f019 0f01 	tst.w	r9, #1
 8010cb0:	d022      	beq.n	8010cf8 <__cvt+0xac>
 8010cb2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8010cb6:	eb07 0906 	add.w	r9, r7, r6
 8010cba:	d110      	bne.n	8010cde <__cvt+0x92>
 8010cbc:	783b      	ldrb	r3, [r7, #0]
 8010cbe:	2b30      	cmp	r3, #48	; 0x30
 8010cc0:	d10a      	bne.n	8010cd8 <__cvt+0x8c>
 8010cc2:	2200      	movs	r2, #0
 8010cc4:	2300      	movs	r3, #0
 8010cc6:	4620      	mov	r0, r4
 8010cc8:	4629      	mov	r1, r5
 8010cca:	f7ef fefd 	bl	8000ac8 <__aeabi_dcmpeq>
 8010cce:	b918      	cbnz	r0, 8010cd8 <__cvt+0x8c>
 8010cd0:	f1c6 0601 	rsb	r6, r6, #1
 8010cd4:	f8ca 6000 	str.w	r6, [sl]
 8010cd8:	f8da 3000 	ldr.w	r3, [sl]
 8010cdc:	4499      	add	r9, r3
 8010cde:	2200      	movs	r2, #0
 8010ce0:	2300      	movs	r3, #0
 8010ce2:	4620      	mov	r0, r4
 8010ce4:	4629      	mov	r1, r5
 8010ce6:	f7ef feef 	bl	8000ac8 <__aeabi_dcmpeq>
 8010cea:	b108      	cbz	r0, 8010cf0 <__cvt+0xa4>
 8010cec:	f8cd 900c 	str.w	r9, [sp, #12]
 8010cf0:	2230      	movs	r2, #48	; 0x30
 8010cf2:	9b03      	ldr	r3, [sp, #12]
 8010cf4:	454b      	cmp	r3, r9
 8010cf6:	d307      	bcc.n	8010d08 <__cvt+0xbc>
 8010cf8:	9b03      	ldr	r3, [sp, #12]
 8010cfa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010cfc:	1bdb      	subs	r3, r3, r7
 8010cfe:	4638      	mov	r0, r7
 8010d00:	6013      	str	r3, [r2, #0]
 8010d02:	b004      	add	sp, #16
 8010d04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010d08:	1c59      	adds	r1, r3, #1
 8010d0a:	9103      	str	r1, [sp, #12]
 8010d0c:	701a      	strb	r2, [r3, #0]
 8010d0e:	e7f0      	b.n	8010cf2 <__cvt+0xa6>

08010d10 <__exponent>:
 8010d10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010d12:	4603      	mov	r3, r0
 8010d14:	2900      	cmp	r1, #0
 8010d16:	bfb8      	it	lt
 8010d18:	4249      	neglt	r1, r1
 8010d1a:	f803 2b02 	strb.w	r2, [r3], #2
 8010d1e:	bfb4      	ite	lt
 8010d20:	222d      	movlt	r2, #45	; 0x2d
 8010d22:	222b      	movge	r2, #43	; 0x2b
 8010d24:	2909      	cmp	r1, #9
 8010d26:	7042      	strb	r2, [r0, #1]
 8010d28:	dd2a      	ble.n	8010d80 <__exponent+0x70>
 8010d2a:	f10d 0407 	add.w	r4, sp, #7
 8010d2e:	46a4      	mov	ip, r4
 8010d30:	270a      	movs	r7, #10
 8010d32:	46a6      	mov	lr, r4
 8010d34:	460a      	mov	r2, r1
 8010d36:	fb91 f6f7 	sdiv	r6, r1, r7
 8010d3a:	fb07 1516 	mls	r5, r7, r6, r1
 8010d3e:	3530      	adds	r5, #48	; 0x30
 8010d40:	2a63      	cmp	r2, #99	; 0x63
 8010d42:	f104 34ff 	add.w	r4, r4, #4294967295
 8010d46:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8010d4a:	4631      	mov	r1, r6
 8010d4c:	dcf1      	bgt.n	8010d32 <__exponent+0x22>
 8010d4e:	3130      	adds	r1, #48	; 0x30
 8010d50:	f1ae 0502 	sub.w	r5, lr, #2
 8010d54:	f804 1c01 	strb.w	r1, [r4, #-1]
 8010d58:	1c44      	adds	r4, r0, #1
 8010d5a:	4629      	mov	r1, r5
 8010d5c:	4561      	cmp	r1, ip
 8010d5e:	d30a      	bcc.n	8010d76 <__exponent+0x66>
 8010d60:	f10d 0209 	add.w	r2, sp, #9
 8010d64:	eba2 020e 	sub.w	r2, r2, lr
 8010d68:	4565      	cmp	r5, ip
 8010d6a:	bf88      	it	hi
 8010d6c:	2200      	movhi	r2, #0
 8010d6e:	4413      	add	r3, r2
 8010d70:	1a18      	subs	r0, r3, r0
 8010d72:	b003      	add	sp, #12
 8010d74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010d76:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010d7a:	f804 2f01 	strb.w	r2, [r4, #1]!
 8010d7e:	e7ed      	b.n	8010d5c <__exponent+0x4c>
 8010d80:	2330      	movs	r3, #48	; 0x30
 8010d82:	3130      	adds	r1, #48	; 0x30
 8010d84:	7083      	strb	r3, [r0, #2]
 8010d86:	70c1      	strb	r1, [r0, #3]
 8010d88:	1d03      	adds	r3, r0, #4
 8010d8a:	e7f1      	b.n	8010d70 <__exponent+0x60>

08010d8c <_printf_float>:
 8010d8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d90:	ed2d 8b02 	vpush	{d8}
 8010d94:	b08d      	sub	sp, #52	; 0x34
 8010d96:	460c      	mov	r4, r1
 8010d98:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8010d9c:	4616      	mov	r6, r2
 8010d9e:	461f      	mov	r7, r3
 8010da0:	4605      	mov	r5, r0
 8010da2:	f001 fa57 	bl	8012254 <_localeconv_r>
 8010da6:	f8d0 a000 	ldr.w	sl, [r0]
 8010daa:	4650      	mov	r0, sl
 8010dac:	f7ef fa10 	bl	80001d0 <strlen>
 8010db0:	2300      	movs	r3, #0
 8010db2:	930a      	str	r3, [sp, #40]	; 0x28
 8010db4:	6823      	ldr	r3, [r4, #0]
 8010db6:	9305      	str	r3, [sp, #20]
 8010db8:	f8d8 3000 	ldr.w	r3, [r8]
 8010dbc:	f894 b018 	ldrb.w	fp, [r4, #24]
 8010dc0:	3307      	adds	r3, #7
 8010dc2:	f023 0307 	bic.w	r3, r3, #7
 8010dc6:	f103 0208 	add.w	r2, r3, #8
 8010dca:	f8c8 2000 	str.w	r2, [r8]
 8010dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010dd2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8010dd6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8010dda:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8010dde:	9307      	str	r3, [sp, #28]
 8010de0:	f8cd 8018 	str.w	r8, [sp, #24]
 8010de4:	ee08 0a10 	vmov	s16, r0
 8010de8:	4b9f      	ldr	r3, [pc, #636]	; (8011068 <_printf_float+0x2dc>)
 8010dea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010dee:	f04f 32ff 	mov.w	r2, #4294967295
 8010df2:	f7ef fe9b 	bl	8000b2c <__aeabi_dcmpun>
 8010df6:	bb88      	cbnz	r0, 8010e5c <_printf_float+0xd0>
 8010df8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010dfc:	4b9a      	ldr	r3, [pc, #616]	; (8011068 <_printf_float+0x2dc>)
 8010dfe:	f04f 32ff 	mov.w	r2, #4294967295
 8010e02:	f7ef fe75 	bl	8000af0 <__aeabi_dcmple>
 8010e06:	bb48      	cbnz	r0, 8010e5c <_printf_float+0xd0>
 8010e08:	2200      	movs	r2, #0
 8010e0a:	2300      	movs	r3, #0
 8010e0c:	4640      	mov	r0, r8
 8010e0e:	4649      	mov	r1, r9
 8010e10:	f7ef fe64 	bl	8000adc <__aeabi_dcmplt>
 8010e14:	b110      	cbz	r0, 8010e1c <_printf_float+0x90>
 8010e16:	232d      	movs	r3, #45	; 0x2d
 8010e18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010e1c:	4b93      	ldr	r3, [pc, #588]	; (801106c <_printf_float+0x2e0>)
 8010e1e:	4894      	ldr	r0, [pc, #592]	; (8011070 <_printf_float+0x2e4>)
 8010e20:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8010e24:	bf94      	ite	ls
 8010e26:	4698      	movls	r8, r3
 8010e28:	4680      	movhi	r8, r0
 8010e2a:	2303      	movs	r3, #3
 8010e2c:	6123      	str	r3, [r4, #16]
 8010e2e:	9b05      	ldr	r3, [sp, #20]
 8010e30:	f023 0204 	bic.w	r2, r3, #4
 8010e34:	6022      	str	r2, [r4, #0]
 8010e36:	f04f 0900 	mov.w	r9, #0
 8010e3a:	9700      	str	r7, [sp, #0]
 8010e3c:	4633      	mov	r3, r6
 8010e3e:	aa0b      	add	r2, sp, #44	; 0x2c
 8010e40:	4621      	mov	r1, r4
 8010e42:	4628      	mov	r0, r5
 8010e44:	f000 f9d8 	bl	80111f8 <_printf_common>
 8010e48:	3001      	adds	r0, #1
 8010e4a:	f040 8090 	bne.w	8010f6e <_printf_float+0x1e2>
 8010e4e:	f04f 30ff 	mov.w	r0, #4294967295
 8010e52:	b00d      	add	sp, #52	; 0x34
 8010e54:	ecbd 8b02 	vpop	{d8}
 8010e58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e5c:	4642      	mov	r2, r8
 8010e5e:	464b      	mov	r3, r9
 8010e60:	4640      	mov	r0, r8
 8010e62:	4649      	mov	r1, r9
 8010e64:	f7ef fe62 	bl	8000b2c <__aeabi_dcmpun>
 8010e68:	b140      	cbz	r0, 8010e7c <_printf_float+0xf0>
 8010e6a:	464b      	mov	r3, r9
 8010e6c:	2b00      	cmp	r3, #0
 8010e6e:	bfbc      	itt	lt
 8010e70:	232d      	movlt	r3, #45	; 0x2d
 8010e72:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8010e76:	487f      	ldr	r0, [pc, #508]	; (8011074 <_printf_float+0x2e8>)
 8010e78:	4b7f      	ldr	r3, [pc, #508]	; (8011078 <_printf_float+0x2ec>)
 8010e7a:	e7d1      	b.n	8010e20 <_printf_float+0x94>
 8010e7c:	6863      	ldr	r3, [r4, #4]
 8010e7e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8010e82:	9206      	str	r2, [sp, #24]
 8010e84:	1c5a      	adds	r2, r3, #1
 8010e86:	d13f      	bne.n	8010f08 <_printf_float+0x17c>
 8010e88:	2306      	movs	r3, #6
 8010e8a:	6063      	str	r3, [r4, #4]
 8010e8c:	9b05      	ldr	r3, [sp, #20]
 8010e8e:	6861      	ldr	r1, [r4, #4]
 8010e90:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8010e94:	2300      	movs	r3, #0
 8010e96:	9303      	str	r3, [sp, #12]
 8010e98:	ab0a      	add	r3, sp, #40	; 0x28
 8010e9a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8010e9e:	ab09      	add	r3, sp, #36	; 0x24
 8010ea0:	ec49 8b10 	vmov	d0, r8, r9
 8010ea4:	9300      	str	r3, [sp, #0]
 8010ea6:	6022      	str	r2, [r4, #0]
 8010ea8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8010eac:	4628      	mov	r0, r5
 8010eae:	f7ff fecd 	bl	8010c4c <__cvt>
 8010eb2:	9b06      	ldr	r3, [sp, #24]
 8010eb4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010eb6:	2b47      	cmp	r3, #71	; 0x47
 8010eb8:	4680      	mov	r8, r0
 8010eba:	d108      	bne.n	8010ece <_printf_float+0x142>
 8010ebc:	1cc8      	adds	r0, r1, #3
 8010ebe:	db02      	blt.n	8010ec6 <_printf_float+0x13a>
 8010ec0:	6863      	ldr	r3, [r4, #4]
 8010ec2:	4299      	cmp	r1, r3
 8010ec4:	dd41      	ble.n	8010f4a <_printf_float+0x1be>
 8010ec6:	f1ab 0b02 	sub.w	fp, fp, #2
 8010eca:	fa5f fb8b 	uxtb.w	fp, fp
 8010ece:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8010ed2:	d820      	bhi.n	8010f16 <_printf_float+0x18a>
 8010ed4:	3901      	subs	r1, #1
 8010ed6:	465a      	mov	r2, fp
 8010ed8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8010edc:	9109      	str	r1, [sp, #36]	; 0x24
 8010ede:	f7ff ff17 	bl	8010d10 <__exponent>
 8010ee2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010ee4:	1813      	adds	r3, r2, r0
 8010ee6:	2a01      	cmp	r2, #1
 8010ee8:	4681      	mov	r9, r0
 8010eea:	6123      	str	r3, [r4, #16]
 8010eec:	dc02      	bgt.n	8010ef4 <_printf_float+0x168>
 8010eee:	6822      	ldr	r2, [r4, #0]
 8010ef0:	07d2      	lsls	r2, r2, #31
 8010ef2:	d501      	bpl.n	8010ef8 <_printf_float+0x16c>
 8010ef4:	3301      	adds	r3, #1
 8010ef6:	6123      	str	r3, [r4, #16]
 8010ef8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8010efc:	2b00      	cmp	r3, #0
 8010efe:	d09c      	beq.n	8010e3a <_printf_float+0xae>
 8010f00:	232d      	movs	r3, #45	; 0x2d
 8010f02:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010f06:	e798      	b.n	8010e3a <_printf_float+0xae>
 8010f08:	9a06      	ldr	r2, [sp, #24]
 8010f0a:	2a47      	cmp	r2, #71	; 0x47
 8010f0c:	d1be      	bne.n	8010e8c <_printf_float+0x100>
 8010f0e:	2b00      	cmp	r3, #0
 8010f10:	d1bc      	bne.n	8010e8c <_printf_float+0x100>
 8010f12:	2301      	movs	r3, #1
 8010f14:	e7b9      	b.n	8010e8a <_printf_float+0xfe>
 8010f16:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8010f1a:	d118      	bne.n	8010f4e <_printf_float+0x1c2>
 8010f1c:	2900      	cmp	r1, #0
 8010f1e:	6863      	ldr	r3, [r4, #4]
 8010f20:	dd0b      	ble.n	8010f3a <_printf_float+0x1ae>
 8010f22:	6121      	str	r1, [r4, #16]
 8010f24:	b913      	cbnz	r3, 8010f2c <_printf_float+0x1a0>
 8010f26:	6822      	ldr	r2, [r4, #0]
 8010f28:	07d0      	lsls	r0, r2, #31
 8010f2a:	d502      	bpl.n	8010f32 <_printf_float+0x1a6>
 8010f2c:	3301      	adds	r3, #1
 8010f2e:	440b      	add	r3, r1
 8010f30:	6123      	str	r3, [r4, #16]
 8010f32:	65a1      	str	r1, [r4, #88]	; 0x58
 8010f34:	f04f 0900 	mov.w	r9, #0
 8010f38:	e7de      	b.n	8010ef8 <_printf_float+0x16c>
 8010f3a:	b913      	cbnz	r3, 8010f42 <_printf_float+0x1b6>
 8010f3c:	6822      	ldr	r2, [r4, #0]
 8010f3e:	07d2      	lsls	r2, r2, #31
 8010f40:	d501      	bpl.n	8010f46 <_printf_float+0x1ba>
 8010f42:	3302      	adds	r3, #2
 8010f44:	e7f4      	b.n	8010f30 <_printf_float+0x1a4>
 8010f46:	2301      	movs	r3, #1
 8010f48:	e7f2      	b.n	8010f30 <_printf_float+0x1a4>
 8010f4a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8010f4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010f50:	4299      	cmp	r1, r3
 8010f52:	db05      	blt.n	8010f60 <_printf_float+0x1d4>
 8010f54:	6823      	ldr	r3, [r4, #0]
 8010f56:	6121      	str	r1, [r4, #16]
 8010f58:	07d8      	lsls	r0, r3, #31
 8010f5a:	d5ea      	bpl.n	8010f32 <_printf_float+0x1a6>
 8010f5c:	1c4b      	adds	r3, r1, #1
 8010f5e:	e7e7      	b.n	8010f30 <_printf_float+0x1a4>
 8010f60:	2900      	cmp	r1, #0
 8010f62:	bfd4      	ite	le
 8010f64:	f1c1 0202 	rsble	r2, r1, #2
 8010f68:	2201      	movgt	r2, #1
 8010f6a:	4413      	add	r3, r2
 8010f6c:	e7e0      	b.n	8010f30 <_printf_float+0x1a4>
 8010f6e:	6823      	ldr	r3, [r4, #0]
 8010f70:	055a      	lsls	r2, r3, #21
 8010f72:	d407      	bmi.n	8010f84 <_printf_float+0x1f8>
 8010f74:	6923      	ldr	r3, [r4, #16]
 8010f76:	4642      	mov	r2, r8
 8010f78:	4631      	mov	r1, r6
 8010f7a:	4628      	mov	r0, r5
 8010f7c:	47b8      	blx	r7
 8010f7e:	3001      	adds	r0, #1
 8010f80:	d12c      	bne.n	8010fdc <_printf_float+0x250>
 8010f82:	e764      	b.n	8010e4e <_printf_float+0xc2>
 8010f84:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8010f88:	f240 80e0 	bls.w	801114c <_printf_float+0x3c0>
 8010f8c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8010f90:	2200      	movs	r2, #0
 8010f92:	2300      	movs	r3, #0
 8010f94:	f7ef fd98 	bl	8000ac8 <__aeabi_dcmpeq>
 8010f98:	2800      	cmp	r0, #0
 8010f9a:	d034      	beq.n	8011006 <_printf_float+0x27a>
 8010f9c:	4a37      	ldr	r2, [pc, #220]	; (801107c <_printf_float+0x2f0>)
 8010f9e:	2301      	movs	r3, #1
 8010fa0:	4631      	mov	r1, r6
 8010fa2:	4628      	mov	r0, r5
 8010fa4:	47b8      	blx	r7
 8010fa6:	3001      	adds	r0, #1
 8010fa8:	f43f af51 	beq.w	8010e4e <_printf_float+0xc2>
 8010fac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010fb0:	429a      	cmp	r2, r3
 8010fb2:	db02      	blt.n	8010fba <_printf_float+0x22e>
 8010fb4:	6823      	ldr	r3, [r4, #0]
 8010fb6:	07d8      	lsls	r0, r3, #31
 8010fb8:	d510      	bpl.n	8010fdc <_printf_float+0x250>
 8010fba:	ee18 3a10 	vmov	r3, s16
 8010fbe:	4652      	mov	r2, sl
 8010fc0:	4631      	mov	r1, r6
 8010fc2:	4628      	mov	r0, r5
 8010fc4:	47b8      	blx	r7
 8010fc6:	3001      	adds	r0, #1
 8010fc8:	f43f af41 	beq.w	8010e4e <_printf_float+0xc2>
 8010fcc:	f04f 0800 	mov.w	r8, #0
 8010fd0:	f104 091a 	add.w	r9, r4, #26
 8010fd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010fd6:	3b01      	subs	r3, #1
 8010fd8:	4543      	cmp	r3, r8
 8010fda:	dc09      	bgt.n	8010ff0 <_printf_float+0x264>
 8010fdc:	6823      	ldr	r3, [r4, #0]
 8010fde:	079b      	lsls	r3, r3, #30
 8010fe0:	f100 8105 	bmi.w	80111ee <_printf_float+0x462>
 8010fe4:	68e0      	ldr	r0, [r4, #12]
 8010fe6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010fe8:	4298      	cmp	r0, r3
 8010fea:	bfb8      	it	lt
 8010fec:	4618      	movlt	r0, r3
 8010fee:	e730      	b.n	8010e52 <_printf_float+0xc6>
 8010ff0:	2301      	movs	r3, #1
 8010ff2:	464a      	mov	r2, r9
 8010ff4:	4631      	mov	r1, r6
 8010ff6:	4628      	mov	r0, r5
 8010ff8:	47b8      	blx	r7
 8010ffa:	3001      	adds	r0, #1
 8010ffc:	f43f af27 	beq.w	8010e4e <_printf_float+0xc2>
 8011000:	f108 0801 	add.w	r8, r8, #1
 8011004:	e7e6      	b.n	8010fd4 <_printf_float+0x248>
 8011006:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011008:	2b00      	cmp	r3, #0
 801100a:	dc39      	bgt.n	8011080 <_printf_float+0x2f4>
 801100c:	4a1b      	ldr	r2, [pc, #108]	; (801107c <_printf_float+0x2f0>)
 801100e:	2301      	movs	r3, #1
 8011010:	4631      	mov	r1, r6
 8011012:	4628      	mov	r0, r5
 8011014:	47b8      	blx	r7
 8011016:	3001      	adds	r0, #1
 8011018:	f43f af19 	beq.w	8010e4e <_printf_float+0xc2>
 801101c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011020:	4313      	orrs	r3, r2
 8011022:	d102      	bne.n	801102a <_printf_float+0x29e>
 8011024:	6823      	ldr	r3, [r4, #0]
 8011026:	07d9      	lsls	r1, r3, #31
 8011028:	d5d8      	bpl.n	8010fdc <_printf_float+0x250>
 801102a:	ee18 3a10 	vmov	r3, s16
 801102e:	4652      	mov	r2, sl
 8011030:	4631      	mov	r1, r6
 8011032:	4628      	mov	r0, r5
 8011034:	47b8      	blx	r7
 8011036:	3001      	adds	r0, #1
 8011038:	f43f af09 	beq.w	8010e4e <_printf_float+0xc2>
 801103c:	f04f 0900 	mov.w	r9, #0
 8011040:	f104 0a1a 	add.w	sl, r4, #26
 8011044:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011046:	425b      	negs	r3, r3
 8011048:	454b      	cmp	r3, r9
 801104a:	dc01      	bgt.n	8011050 <_printf_float+0x2c4>
 801104c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801104e:	e792      	b.n	8010f76 <_printf_float+0x1ea>
 8011050:	2301      	movs	r3, #1
 8011052:	4652      	mov	r2, sl
 8011054:	4631      	mov	r1, r6
 8011056:	4628      	mov	r0, r5
 8011058:	47b8      	blx	r7
 801105a:	3001      	adds	r0, #1
 801105c:	f43f aef7 	beq.w	8010e4e <_printf_float+0xc2>
 8011060:	f109 0901 	add.w	r9, r9, #1
 8011064:	e7ee      	b.n	8011044 <_printf_float+0x2b8>
 8011066:	bf00      	nop
 8011068:	7fefffff 	.word	0x7fefffff
 801106c:	08016084 	.word	0x08016084
 8011070:	08016088 	.word	0x08016088
 8011074:	08016090 	.word	0x08016090
 8011078:	0801608c 	.word	0x0801608c
 801107c:	08016094 	.word	0x08016094
 8011080:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011082:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011084:	429a      	cmp	r2, r3
 8011086:	bfa8      	it	ge
 8011088:	461a      	movge	r2, r3
 801108a:	2a00      	cmp	r2, #0
 801108c:	4691      	mov	r9, r2
 801108e:	dc37      	bgt.n	8011100 <_printf_float+0x374>
 8011090:	f04f 0b00 	mov.w	fp, #0
 8011094:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011098:	f104 021a 	add.w	r2, r4, #26
 801109c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801109e:	9305      	str	r3, [sp, #20]
 80110a0:	eba3 0309 	sub.w	r3, r3, r9
 80110a4:	455b      	cmp	r3, fp
 80110a6:	dc33      	bgt.n	8011110 <_printf_float+0x384>
 80110a8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80110ac:	429a      	cmp	r2, r3
 80110ae:	db3b      	blt.n	8011128 <_printf_float+0x39c>
 80110b0:	6823      	ldr	r3, [r4, #0]
 80110b2:	07da      	lsls	r2, r3, #31
 80110b4:	d438      	bmi.n	8011128 <_printf_float+0x39c>
 80110b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80110b8:	9a05      	ldr	r2, [sp, #20]
 80110ba:	9909      	ldr	r1, [sp, #36]	; 0x24
 80110bc:	1a9a      	subs	r2, r3, r2
 80110be:	eba3 0901 	sub.w	r9, r3, r1
 80110c2:	4591      	cmp	r9, r2
 80110c4:	bfa8      	it	ge
 80110c6:	4691      	movge	r9, r2
 80110c8:	f1b9 0f00 	cmp.w	r9, #0
 80110cc:	dc35      	bgt.n	801113a <_printf_float+0x3ae>
 80110ce:	f04f 0800 	mov.w	r8, #0
 80110d2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80110d6:	f104 0a1a 	add.w	sl, r4, #26
 80110da:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80110de:	1a9b      	subs	r3, r3, r2
 80110e0:	eba3 0309 	sub.w	r3, r3, r9
 80110e4:	4543      	cmp	r3, r8
 80110e6:	f77f af79 	ble.w	8010fdc <_printf_float+0x250>
 80110ea:	2301      	movs	r3, #1
 80110ec:	4652      	mov	r2, sl
 80110ee:	4631      	mov	r1, r6
 80110f0:	4628      	mov	r0, r5
 80110f2:	47b8      	blx	r7
 80110f4:	3001      	adds	r0, #1
 80110f6:	f43f aeaa 	beq.w	8010e4e <_printf_float+0xc2>
 80110fa:	f108 0801 	add.w	r8, r8, #1
 80110fe:	e7ec      	b.n	80110da <_printf_float+0x34e>
 8011100:	4613      	mov	r3, r2
 8011102:	4631      	mov	r1, r6
 8011104:	4642      	mov	r2, r8
 8011106:	4628      	mov	r0, r5
 8011108:	47b8      	blx	r7
 801110a:	3001      	adds	r0, #1
 801110c:	d1c0      	bne.n	8011090 <_printf_float+0x304>
 801110e:	e69e      	b.n	8010e4e <_printf_float+0xc2>
 8011110:	2301      	movs	r3, #1
 8011112:	4631      	mov	r1, r6
 8011114:	4628      	mov	r0, r5
 8011116:	9205      	str	r2, [sp, #20]
 8011118:	47b8      	blx	r7
 801111a:	3001      	adds	r0, #1
 801111c:	f43f ae97 	beq.w	8010e4e <_printf_float+0xc2>
 8011120:	9a05      	ldr	r2, [sp, #20]
 8011122:	f10b 0b01 	add.w	fp, fp, #1
 8011126:	e7b9      	b.n	801109c <_printf_float+0x310>
 8011128:	ee18 3a10 	vmov	r3, s16
 801112c:	4652      	mov	r2, sl
 801112e:	4631      	mov	r1, r6
 8011130:	4628      	mov	r0, r5
 8011132:	47b8      	blx	r7
 8011134:	3001      	adds	r0, #1
 8011136:	d1be      	bne.n	80110b6 <_printf_float+0x32a>
 8011138:	e689      	b.n	8010e4e <_printf_float+0xc2>
 801113a:	9a05      	ldr	r2, [sp, #20]
 801113c:	464b      	mov	r3, r9
 801113e:	4442      	add	r2, r8
 8011140:	4631      	mov	r1, r6
 8011142:	4628      	mov	r0, r5
 8011144:	47b8      	blx	r7
 8011146:	3001      	adds	r0, #1
 8011148:	d1c1      	bne.n	80110ce <_printf_float+0x342>
 801114a:	e680      	b.n	8010e4e <_printf_float+0xc2>
 801114c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801114e:	2a01      	cmp	r2, #1
 8011150:	dc01      	bgt.n	8011156 <_printf_float+0x3ca>
 8011152:	07db      	lsls	r3, r3, #31
 8011154:	d538      	bpl.n	80111c8 <_printf_float+0x43c>
 8011156:	2301      	movs	r3, #1
 8011158:	4642      	mov	r2, r8
 801115a:	4631      	mov	r1, r6
 801115c:	4628      	mov	r0, r5
 801115e:	47b8      	blx	r7
 8011160:	3001      	adds	r0, #1
 8011162:	f43f ae74 	beq.w	8010e4e <_printf_float+0xc2>
 8011166:	ee18 3a10 	vmov	r3, s16
 801116a:	4652      	mov	r2, sl
 801116c:	4631      	mov	r1, r6
 801116e:	4628      	mov	r0, r5
 8011170:	47b8      	blx	r7
 8011172:	3001      	adds	r0, #1
 8011174:	f43f ae6b 	beq.w	8010e4e <_printf_float+0xc2>
 8011178:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801117c:	2200      	movs	r2, #0
 801117e:	2300      	movs	r3, #0
 8011180:	f7ef fca2 	bl	8000ac8 <__aeabi_dcmpeq>
 8011184:	b9d8      	cbnz	r0, 80111be <_printf_float+0x432>
 8011186:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011188:	f108 0201 	add.w	r2, r8, #1
 801118c:	3b01      	subs	r3, #1
 801118e:	4631      	mov	r1, r6
 8011190:	4628      	mov	r0, r5
 8011192:	47b8      	blx	r7
 8011194:	3001      	adds	r0, #1
 8011196:	d10e      	bne.n	80111b6 <_printf_float+0x42a>
 8011198:	e659      	b.n	8010e4e <_printf_float+0xc2>
 801119a:	2301      	movs	r3, #1
 801119c:	4652      	mov	r2, sl
 801119e:	4631      	mov	r1, r6
 80111a0:	4628      	mov	r0, r5
 80111a2:	47b8      	blx	r7
 80111a4:	3001      	adds	r0, #1
 80111a6:	f43f ae52 	beq.w	8010e4e <_printf_float+0xc2>
 80111aa:	f108 0801 	add.w	r8, r8, #1
 80111ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80111b0:	3b01      	subs	r3, #1
 80111b2:	4543      	cmp	r3, r8
 80111b4:	dcf1      	bgt.n	801119a <_printf_float+0x40e>
 80111b6:	464b      	mov	r3, r9
 80111b8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80111bc:	e6dc      	b.n	8010f78 <_printf_float+0x1ec>
 80111be:	f04f 0800 	mov.w	r8, #0
 80111c2:	f104 0a1a 	add.w	sl, r4, #26
 80111c6:	e7f2      	b.n	80111ae <_printf_float+0x422>
 80111c8:	2301      	movs	r3, #1
 80111ca:	4642      	mov	r2, r8
 80111cc:	e7df      	b.n	801118e <_printf_float+0x402>
 80111ce:	2301      	movs	r3, #1
 80111d0:	464a      	mov	r2, r9
 80111d2:	4631      	mov	r1, r6
 80111d4:	4628      	mov	r0, r5
 80111d6:	47b8      	blx	r7
 80111d8:	3001      	adds	r0, #1
 80111da:	f43f ae38 	beq.w	8010e4e <_printf_float+0xc2>
 80111de:	f108 0801 	add.w	r8, r8, #1
 80111e2:	68e3      	ldr	r3, [r4, #12]
 80111e4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80111e6:	1a5b      	subs	r3, r3, r1
 80111e8:	4543      	cmp	r3, r8
 80111ea:	dcf0      	bgt.n	80111ce <_printf_float+0x442>
 80111ec:	e6fa      	b.n	8010fe4 <_printf_float+0x258>
 80111ee:	f04f 0800 	mov.w	r8, #0
 80111f2:	f104 0919 	add.w	r9, r4, #25
 80111f6:	e7f4      	b.n	80111e2 <_printf_float+0x456>

080111f8 <_printf_common>:
 80111f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80111fc:	4616      	mov	r6, r2
 80111fe:	4699      	mov	r9, r3
 8011200:	688a      	ldr	r2, [r1, #8]
 8011202:	690b      	ldr	r3, [r1, #16]
 8011204:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011208:	4293      	cmp	r3, r2
 801120a:	bfb8      	it	lt
 801120c:	4613      	movlt	r3, r2
 801120e:	6033      	str	r3, [r6, #0]
 8011210:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011214:	4607      	mov	r7, r0
 8011216:	460c      	mov	r4, r1
 8011218:	b10a      	cbz	r2, 801121e <_printf_common+0x26>
 801121a:	3301      	adds	r3, #1
 801121c:	6033      	str	r3, [r6, #0]
 801121e:	6823      	ldr	r3, [r4, #0]
 8011220:	0699      	lsls	r1, r3, #26
 8011222:	bf42      	ittt	mi
 8011224:	6833      	ldrmi	r3, [r6, #0]
 8011226:	3302      	addmi	r3, #2
 8011228:	6033      	strmi	r3, [r6, #0]
 801122a:	6825      	ldr	r5, [r4, #0]
 801122c:	f015 0506 	ands.w	r5, r5, #6
 8011230:	d106      	bne.n	8011240 <_printf_common+0x48>
 8011232:	f104 0a19 	add.w	sl, r4, #25
 8011236:	68e3      	ldr	r3, [r4, #12]
 8011238:	6832      	ldr	r2, [r6, #0]
 801123a:	1a9b      	subs	r3, r3, r2
 801123c:	42ab      	cmp	r3, r5
 801123e:	dc26      	bgt.n	801128e <_printf_common+0x96>
 8011240:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8011244:	1e13      	subs	r3, r2, #0
 8011246:	6822      	ldr	r2, [r4, #0]
 8011248:	bf18      	it	ne
 801124a:	2301      	movne	r3, #1
 801124c:	0692      	lsls	r2, r2, #26
 801124e:	d42b      	bmi.n	80112a8 <_printf_common+0xb0>
 8011250:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011254:	4649      	mov	r1, r9
 8011256:	4638      	mov	r0, r7
 8011258:	47c0      	blx	r8
 801125a:	3001      	adds	r0, #1
 801125c:	d01e      	beq.n	801129c <_printf_common+0xa4>
 801125e:	6823      	ldr	r3, [r4, #0]
 8011260:	68e5      	ldr	r5, [r4, #12]
 8011262:	6832      	ldr	r2, [r6, #0]
 8011264:	f003 0306 	and.w	r3, r3, #6
 8011268:	2b04      	cmp	r3, #4
 801126a:	bf08      	it	eq
 801126c:	1aad      	subeq	r5, r5, r2
 801126e:	68a3      	ldr	r3, [r4, #8]
 8011270:	6922      	ldr	r2, [r4, #16]
 8011272:	bf0c      	ite	eq
 8011274:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011278:	2500      	movne	r5, #0
 801127a:	4293      	cmp	r3, r2
 801127c:	bfc4      	itt	gt
 801127e:	1a9b      	subgt	r3, r3, r2
 8011280:	18ed      	addgt	r5, r5, r3
 8011282:	2600      	movs	r6, #0
 8011284:	341a      	adds	r4, #26
 8011286:	42b5      	cmp	r5, r6
 8011288:	d11a      	bne.n	80112c0 <_printf_common+0xc8>
 801128a:	2000      	movs	r0, #0
 801128c:	e008      	b.n	80112a0 <_printf_common+0xa8>
 801128e:	2301      	movs	r3, #1
 8011290:	4652      	mov	r2, sl
 8011292:	4649      	mov	r1, r9
 8011294:	4638      	mov	r0, r7
 8011296:	47c0      	blx	r8
 8011298:	3001      	adds	r0, #1
 801129a:	d103      	bne.n	80112a4 <_printf_common+0xac>
 801129c:	f04f 30ff 	mov.w	r0, #4294967295
 80112a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80112a4:	3501      	adds	r5, #1
 80112a6:	e7c6      	b.n	8011236 <_printf_common+0x3e>
 80112a8:	18e1      	adds	r1, r4, r3
 80112aa:	1c5a      	adds	r2, r3, #1
 80112ac:	2030      	movs	r0, #48	; 0x30
 80112ae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80112b2:	4422      	add	r2, r4
 80112b4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80112b8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80112bc:	3302      	adds	r3, #2
 80112be:	e7c7      	b.n	8011250 <_printf_common+0x58>
 80112c0:	2301      	movs	r3, #1
 80112c2:	4622      	mov	r2, r4
 80112c4:	4649      	mov	r1, r9
 80112c6:	4638      	mov	r0, r7
 80112c8:	47c0      	blx	r8
 80112ca:	3001      	adds	r0, #1
 80112cc:	d0e6      	beq.n	801129c <_printf_common+0xa4>
 80112ce:	3601      	adds	r6, #1
 80112d0:	e7d9      	b.n	8011286 <_printf_common+0x8e>
	...

080112d4 <_printf_i>:
 80112d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80112d8:	7e0f      	ldrb	r7, [r1, #24]
 80112da:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80112dc:	2f78      	cmp	r7, #120	; 0x78
 80112de:	4691      	mov	r9, r2
 80112e0:	4680      	mov	r8, r0
 80112e2:	460c      	mov	r4, r1
 80112e4:	469a      	mov	sl, r3
 80112e6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80112ea:	d807      	bhi.n	80112fc <_printf_i+0x28>
 80112ec:	2f62      	cmp	r7, #98	; 0x62
 80112ee:	d80a      	bhi.n	8011306 <_printf_i+0x32>
 80112f0:	2f00      	cmp	r7, #0
 80112f2:	f000 80d8 	beq.w	80114a6 <_printf_i+0x1d2>
 80112f6:	2f58      	cmp	r7, #88	; 0x58
 80112f8:	f000 80a3 	beq.w	8011442 <_printf_i+0x16e>
 80112fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011300:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8011304:	e03a      	b.n	801137c <_printf_i+0xa8>
 8011306:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801130a:	2b15      	cmp	r3, #21
 801130c:	d8f6      	bhi.n	80112fc <_printf_i+0x28>
 801130e:	a101      	add	r1, pc, #4	; (adr r1, 8011314 <_printf_i+0x40>)
 8011310:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011314:	0801136d 	.word	0x0801136d
 8011318:	08011381 	.word	0x08011381
 801131c:	080112fd 	.word	0x080112fd
 8011320:	080112fd 	.word	0x080112fd
 8011324:	080112fd 	.word	0x080112fd
 8011328:	080112fd 	.word	0x080112fd
 801132c:	08011381 	.word	0x08011381
 8011330:	080112fd 	.word	0x080112fd
 8011334:	080112fd 	.word	0x080112fd
 8011338:	080112fd 	.word	0x080112fd
 801133c:	080112fd 	.word	0x080112fd
 8011340:	0801148d 	.word	0x0801148d
 8011344:	080113b1 	.word	0x080113b1
 8011348:	0801146f 	.word	0x0801146f
 801134c:	080112fd 	.word	0x080112fd
 8011350:	080112fd 	.word	0x080112fd
 8011354:	080114af 	.word	0x080114af
 8011358:	080112fd 	.word	0x080112fd
 801135c:	080113b1 	.word	0x080113b1
 8011360:	080112fd 	.word	0x080112fd
 8011364:	080112fd 	.word	0x080112fd
 8011368:	08011477 	.word	0x08011477
 801136c:	682b      	ldr	r3, [r5, #0]
 801136e:	1d1a      	adds	r2, r3, #4
 8011370:	681b      	ldr	r3, [r3, #0]
 8011372:	602a      	str	r2, [r5, #0]
 8011374:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011378:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801137c:	2301      	movs	r3, #1
 801137e:	e0a3      	b.n	80114c8 <_printf_i+0x1f4>
 8011380:	6820      	ldr	r0, [r4, #0]
 8011382:	6829      	ldr	r1, [r5, #0]
 8011384:	0606      	lsls	r6, r0, #24
 8011386:	f101 0304 	add.w	r3, r1, #4
 801138a:	d50a      	bpl.n	80113a2 <_printf_i+0xce>
 801138c:	680e      	ldr	r6, [r1, #0]
 801138e:	602b      	str	r3, [r5, #0]
 8011390:	2e00      	cmp	r6, #0
 8011392:	da03      	bge.n	801139c <_printf_i+0xc8>
 8011394:	232d      	movs	r3, #45	; 0x2d
 8011396:	4276      	negs	r6, r6
 8011398:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801139c:	485e      	ldr	r0, [pc, #376]	; (8011518 <_printf_i+0x244>)
 801139e:	230a      	movs	r3, #10
 80113a0:	e019      	b.n	80113d6 <_printf_i+0x102>
 80113a2:	680e      	ldr	r6, [r1, #0]
 80113a4:	602b      	str	r3, [r5, #0]
 80113a6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80113aa:	bf18      	it	ne
 80113ac:	b236      	sxthne	r6, r6
 80113ae:	e7ef      	b.n	8011390 <_printf_i+0xbc>
 80113b0:	682b      	ldr	r3, [r5, #0]
 80113b2:	6820      	ldr	r0, [r4, #0]
 80113b4:	1d19      	adds	r1, r3, #4
 80113b6:	6029      	str	r1, [r5, #0]
 80113b8:	0601      	lsls	r1, r0, #24
 80113ba:	d501      	bpl.n	80113c0 <_printf_i+0xec>
 80113bc:	681e      	ldr	r6, [r3, #0]
 80113be:	e002      	b.n	80113c6 <_printf_i+0xf2>
 80113c0:	0646      	lsls	r6, r0, #25
 80113c2:	d5fb      	bpl.n	80113bc <_printf_i+0xe8>
 80113c4:	881e      	ldrh	r6, [r3, #0]
 80113c6:	4854      	ldr	r0, [pc, #336]	; (8011518 <_printf_i+0x244>)
 80113c8:	2f6f      	cmp	r7, #111	; 0x6f
 80113ca:	bf0c      	ite	eq
 80113cc:	2308      	moveq	r3, #8
 80113ce:	230a      	movne	r3, #10
 80113d0:	2100      	movs	r1, #0
 80113d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80113d6:	6865      	ldr	r5, [r4, #4]
 80113d8:	60a5      	str	r5, [r4, #8]
 80113da:	2d00      	cmp	r5, #0
 80113dc:	bfa2      	ittt	ge
 80113de:	6821      	ldrge	r1, [r4, #0]
 80113e0:	f021 0104 	bicge.w	r1, r1, #4
 80113e4:	6021      	strge	r1, [r4, #0]
 80113e6:	b90e      	cbnz	r6, 80113ec <_printf_i+0x118>
 80113e8:	2d00      	cmp	r5, #0
 80113ea:	d04d      	beq.n	8011488 <_printf_i+0x1b4>
 80113ec:	4615      	mov	r5, r2
 80113ee:	fbb6 f1f3 	udiv	r1, r6, r3
 80113f2:	fb03 6711 	mls	r7, r3, r1, r6
 80113f6:	5dc7      	ldrb	r7, [r0, r7]
 80113f8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80113fc:	4637      	mov	r7, r6
 80113fe:	42bb      	cmp	r3, r7
 8011400:	460e      	mov	r6, r1
 8011402:	d9f4      	bls.n	80113ee <_printf_i+0x11a>
 8011404:	2b08      	cmp	r3, #8
 8011406:	d10b      	bne.n	8011420 <_printf_i+0x14c>
 8011408:	6823      	ldr	r3, [r4, #0]
 801140a:	07de      	lsls	r6, r3, #31
 801140c:	d508      	bpl.n	8011420 <_printf_i+0x14c>
 801140e:	6923      	ldr	r3, [r4, #16]
 8011410:	6861      	ldr	r1, [r4, #4]
 8011412:	4299      	cmp	r1, r3
 8011414:	bfde      	ittt	le
 8011416:	2330      	movle	r3, #48	; 0x30
 8011418:	f805 3c01 	strble.w	r3, [r5, #-1]
 801141c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8011420:	1b52      	subs	r2, r2, r5
 8011422:	6122      	str	r2, [r4, #16]
 8011424:	f8cd a000 	str.w	sl, [sp]
 8011428:	464b      	mov	r3, r9
 801142a:	aa03      	add	r2, sp, #12
 801142c:	4621      	mov	r1, r4
 801142e:	4640      	mov	r0, r8
 8011430:	f7ff fee2 	bl	80111f8 <_printf_common>
 8011434:	3001      	adds	r0, #1
 8011436:	d14c      	bne.n	80114d2 <_printf_i+0x1fe>
 8011438:	f04f 30ff 	mov.w	r0, #4294967295
 801143c:	b004      	add	sp, #16
 801143e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011442:	4835      	ldr	r0, [pc, #212]	; (8011518 <_printf_i+0x244>)
 8011444:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8011448:	6829      	ldr	r1, [r5, #0]
 801144a:	6823      	ldr	r3, [r4, #0]
 801144c:	f851 6b04 	ldr.w	r6, [r1], #4
 8011450:	6029      	str	r1, [r5, #0]
 8011452:	061d      	lsls	r5, r3, #24
 8011454:	d514      	bpl.n	8011480 <_printf_i+0x1ac>
 8011456:	07df      	lsls	r7, r3, #31
 8011458:	bf44      	itt	mi
 801145a:	f043 0320 	orrmi.w	r3, r3, #32
 801145e:	6023      	strmi	r3, [r4, #0]
 8011460:	b91e      	cbnz	r6, 801146a <_printf_i+0x196>
 8011462:	6823      	ldr	r3, [r4, #0]
 8011464:	f023 0320 	bic.w	r3, r3, #32
 8011468:	6023      	str	r3, [r4, #0]
 801146a:	2310      	movs	r3, #16
 801146c:	e7b0      	b.n	80113d0 <_printf_i+0xfc>
 801146e:	6823      	ldr	r3, [r4, #0]
 8011470:	f043 0320 	orr.w	r3, r3, #32
 8011474:	6023      	str	r3, [r4, #0]
 8011476:	2378      	movs	r3, #120	; 0x78
 8011478:	4828      	ldr	r0, [pc, #160]	; (801151c <_printf_i+0x248>)
 801147a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801147e:	e7e3      	b.n	8011448 <_printf_i+0x174>
 8011480:	0659      	lsls	r1, r3, #25
 8011482:	bf48      	it	mi
 8011484:	b2b6      	uxthmi	r6, r6
 8011486:	e7e6      	b.n	8011456 <_printf_i+0x182>
 8011488:	4615      	mov	r5, r2
 801148a:	e7bb      	b.n	8011404 <_printf_i+0x130>
 801148c:	682b      	ldr	r3, [r5, #0]
 801148e:	6826      	ldr	r6, [r4, #0]
 8011490:	6961      	ldr	r1, [r4, #20]
 8011492:	1d18      	adds	r0, r3, #4
 8011494:	6028      	str	r0, [r5, #0]
 8011496:	0635      	lsls	r5, r6, #24
 8011498:	681b      	ldr	r3, [r3, #0]
 801149a:	d501      	bpl.n	80114a0 <_printf_i+0x1cc>
 801149c:	6019      	str	r1, [r3, #0]
 801149e:	e002      	b.n	80114a6 <_printf_i+0x1d2>
 80114a0:	0670      	lsls	r0, r6, #25
 80114a2:	d5fb      	bpl.n	801149c <_printf_i+0x1c8>
 80114a4:	8019      	strh	r1, [r3, #0]
 80114a6:	2300      	movs	r3, #0
 80114a8:	6123      	str	r3, [r4, #16]
 80114aa:	4615      	mov	r5, r2
 80114ac:	e7ba      	b.n	8011424 <_printf_i+0x150>
 80114ae:	682b      	ldr	r3, [r5, #0]
 80114b0:	1d1a      	adds	r2, r3, #4
 80114b2:	602a      	str	r2, [r5, #0]
 80114b4:	681d      	ldr	r5, [r3, #0]
 80114b6:	6862      	ldr	r2, [r4, #4]
 80114b8:	2100      	movs	r1, #0
 80114ba:	4628      	mov	r0, r5
 80114bc:	f7ee fe90 	bl	80001e0 <memchr>
 80114c0:	b108      	cbz	r0, 80114c6 <_printf_i+0x1f2>
 80114c2:	1b40      	subs	r0, r0, r5
 80114c4:	6060      	str	r0, [r4, #4]
 80114c6:	6863      	ldr	r3, [r4, #4]
 80114c8:	6123      	str	r3, [r4, #16]
 80114ca:	2300      	movs	r3, #0
 80114cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80114d0:	e7a8      	b.n	8011424 <_printf_i+0x150>
 80114d2:	6923      	ldr	r3, [r4, #16]
 80114d4:	462a      	mov	r2, r5
 80114d6:	4649      	mov	r1, r9
 80114d8:	4640      	mov	r0, r8
 80114da:	47d0      	blx	sl
 80114dc:	3001      	adds	r0, #1
 80114de:	d0ab      	beq.n	8011438 <_printf_i+0x164>
 80114e0:	6823      	ldr	r3, [r4, #0]
 80114e2:	079b      	lsls	r3, r3, #30
 80114e4:	d413      	bmi.n	801150e <_printf_i+0x23a>
 80114e6:	68e0      	ldr	r0, [r4, #12]
 80114e8:	9b03      	ldr	r3, [sp, #12]
 80114ea:	4298      	cmp	r0, r3
 80114ec:	bfb8      	it	lt
 80114ee:	4618      	movlt	r0, r3
 80114f0:	e7a4      	b.n	801143c <_printf_i+0x168>
 80114f2:	2301      	movs	r3, #1
 80114f4:	4632      	mov	r2, r6
 80114f6:	4649      	mov	r1, r9
 80114f8:	4640      	mov	r0, r8
 80114fa:	47d0      	blx	sl
 80114fc:	3001      	adds	r0, #1
 80114fe:	d09b      	beq.n	8011438 <_printf_i+0x164>
 8011500:	3501      	adds	r5, #1
 8011502:	68e3      	ldr	r3, [r4, #12]
 8011504:	9903      	ldr	r1, [sp, #12]
 8011506:	1a5b      	subs	r3, r3, r1
 8011508:	42ab      	cmp	r3, r5
 801150a:	dcf2      	bgt.n	80114f2 <_printf_i+0x21e>
 801150c:	e7eb      	b.n	80114e6 <_printf_i+0x212>
 801150e:	2500      	movs	r5, #0
 8011510:	f104 0619 	add.w	r6, r4, #25
 8011514:	e7f5      	b.n	8011502 <_printf_i+0x22e>
 8011516:	bf00      	nop
 8011518:	08016096 	.word	0x08016096
 801151c:	080160a7 	.word	0x080160a7

08011520 <siprintf>:
 8011520:	b40e      	push	{r1, r2, r3}
 8011522:	b500      	push	{lr}
 8011524:	b09c      	sub	sp, #112	; 0x70
 8011526:	ab1d      	add	r3, sp, #116	; 0x74
 8011528:	9002      	str	r0, [sp, #8]
 801152a:	9006      	str	r0, [sp, #24]
 801152c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8011530:	4809      	ldr	r0, [pc, #36]	; (8011558 <siprintf+0x38>)
 8011532:	9107      	str	r1, [sp, #28]
 8011534:	9104      	str	r1, [sp, #16]
 8011536:	4909      	ldr	r1, [pc, #36]	; (801155c <siprintf+0x3c>)
 8011538:	f853 2b04 	ldr.w	r2, [r3], #4
 801153c:	9105      	str	r1, [sp, #20]
 801153e:	6800      	ldr	r0, [r0, #0]
 8011540:	9301      	str	r3, [sp, #4]
 8011542:	a902      	add	r1, sp, #8
 8011544:	f001 fb68 	bl	8012c18 <_svfiprintf_r>
 8011548:	9b02      	ldr	r3, [sp, #8]
 801154a:	2200      	movs	r2, #0
 801154c:	701a      	strb	r2, [r3, #0]
 801154e:	b01c      	add	sp, #112	; 0x70
 8011550:	f85d eb04 	ldr.w	lr, [sp], #4
 8011554:	b003      	add	sp, #12
 8011556:	4770      	bx	lr
 8011558:	20000078 	.word	0x20000078
 801155c:	ffff0208 	.word	0xffff0208

08011560 <quorem>:
 8011560:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011564:	6903      	ldr	r3, [r0, #16]
 8011566:	690c      	ldr	r4, [r1, #16]
 8011568:	42a3      	cmp	r3, r4
 801156a:	4607      	mov	r7, r0
 801156c:	f2c0 8081 	blt.w	8011672 <quorem+0x112>
 8011570:	3c01      	subs	r4, #1
 8011572:	f101 0814 	add.w	r8, r1, #20
 8011576:	f100 0514 	add.w	r5, r0, #20
 801157a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801157e:	9301      	str	r3, [sp, #4]
 8011580:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8011584:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011588:	3301      	adds	r3, #1
 801158a:	429a      	cmp	r2, r3
 801158c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8011590:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8011594:	fbb2 f6f3 	udiv	r6, r2, r3
 8011598:	d331      	bcc.n	80115fe <quorem+0x9e>
 801159a:	f04f 0e00 	mov.w	lr, #0
 801159e:	4640      	mov	r0, r8
 80115a0:	46ac      	mov	ip, r5
 80115a2:	46f2      	mov	sl, lr
 80115a4:	f850 2b04 	ldr.w	r2, [r0], #4
 80115a8:	b293      	uxth	r3, r2
 80115aa:	fb06 e303 	mla	r3, r6, r3, lr
 80115ae:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80115b2:	b29b      	uxth	r3, r3
 80115b4:	ebaa 0303 	sub.w	r3, sl, r3
 80115b8:	f8dc a000 	ldr.w	sl, [ip]
 80115bc:	0c12      	lsrs	r2, r2, #16
 80115be:	fa13 f38a 	uxtah	r3, r3, sl
 80115c2:	fb06 e202 	mla	r2, r6, r2, lr
 80115c6:	9300      	str	r3, [sp, #0]
 80115c8:	9b00      	ldr	r3, [sp, #0]
 80115ca:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80115ce:	b292      	uxth	r2, r2
 80115d0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80115d4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80115d8:	f8bd 3000 	ldrh.w	r3, [sp]
 80115dc:	4581      	cmp	r9, r0
 80115de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80115e2:	f84c 3b04 	str.w	r3, [ip], #4
 80115e6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80115ea:	d2db      	bcs.n	80115a4 <quorem+0x44>
 80115ec:	f855 300b 	ldr.w	r3, [r5, fp]
 80115f0:	b92b      	cbnz	r3, 80115fe <quorem+0x9e>
 80115f2:	9b01      	ldr	r3, [sp, #4]
 80115f4:	3b04      	subs	r3, #4
 80115f6:	429d      	cmp	r5, r3
 80115f8:	461a      	mov	r2, r3
 80115fa:	d32e      	bcc.n	801165a <quorem+0xfa>
 80115fc:	613c      	str	r4, [r7, #16]
 80115fe:	4638      	mov	r0, r7
 8011600:	f001 f8b6 	bl	8012770 <__mcmp>
 8011604:	2800      	cmp	r0, #0
 8011606:	db24      	blt.n	8011652 <quorem+0xf2>
 8011608:	3601      	adds	r6, #1
 801160a:	4628      	mov	r0, r5
 801160c:	f04f 0c00 	mov.w	ip, #0
 8011610:	f858 2b04 	ldr.w	r2, [r8], #4
 8011614:	f8d0 e000 	ldr.w	lr, [r0]
 8011618:	b293      	uxth	r3, r2
 801161a:	ebac 0303 	sub.w	r3, ip, r3
 801161e:	0c12      	lsrs	r2, r2, #16
 8011620:	fa13 f38e 	uxtah	r3, r3, lr
 8011624:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8011628:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801162c:	b29b      	uxth	r3, r3
 801162e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011632:	45c1      	cmp	r9, r8
 8011634:	f840 3b04 	str.w	r3, [r0], #4
 8011638:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801163c:	d2e8      	bcs.n	8011610 <quorem+0xb0>
 801163e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011642:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011646:	b922      	cbnz	r2, 8011652 <quorem+0xf2>
 8011648:	3b04      	subs	r3, #4
 801164a:	429d      	cmp	r5, r3
 801164c:	461a      	mov	r2, r3
 801164e:	d30a      	bcc.n	8011666 <quorem+0x106>
 8011650:	613c      	str	r4, [r7, #16]
 8011652:	4630      	mov	r0, r6
 8011654:	b003      	add	sp, #12
 8011656:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801165a:	6812      	ldr	r2, [r2, #0]
 801165c:	3b04      	subs	r3, #4
 801165e:	2a00      	cmp	r2, #0
 8011660:	d1cc      	bne.n	80115fc <quorem+0x9c>
 8011662:	3c01      	subs	r4, #1
 8011664:	e7c7      	b.n	80115f6 <quorem+0x96>
 8011666:	6812      	ldr	r2, [r2, #0]
 8011668:	3b04      	subs	r3, #4
 801166a:	2a00      	cmp	r2, #0
 801166c:	d1f0      	bne.n	8011650 <quorem+0xf0>
 801166e:	3c01      	subs	r4, #1
 8011670:	e7eb      	b.n	801164a <quorem+0xea>
 8011672:	2000      	movs	r0, #0
 8011674:	e7ee      	b.n	8011654 <quorem+0xf4>
	...

08011678 <_dtoa_r>:
 8011678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801167c:	ed2d 8b04 	vpush	{d8-d9}
 8011680:	ec57 6b10 	vmov	r6, r7, d0
 8011684:	b093      	sub	sp, #76	; 0x4c
 8011686:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8011688:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801168c:	9106      	str	r1, [sp, #24]
 801168e:	ee10 aa10 	vmov	sl, s0
 8011692:	4604      	mov	r4, r0
 8011694:	9209      	str	r2, [sp, #36]	; 0x24
 8011696:	930c      	str	r3, [sp, #48]	; 0x30
 8011698:	46bb      	mov	fp, r7
 801169a:	b975      	cbnz	r5, 80116ba <_dtoa_r+0x42>
 801169c:	2010      	movs	r0, #16
 801169e:	f000 fddd 	bl	801225c <malloc>
 80116a2:	4602      	mov	r2, r0
 80116a4:	6260      	str	r0, [r4, #36]	; 0x24
 80116a6:	b920      	cbnz	r0, 80116b2 <_dtoa_r+0x3a>
 80116a8:	4ba7      	ldr	r3, [pc, #668]	; (8011948 <_dtoa_r+0x2d0>)
 80116aa:	21ea      	movs	r1, #234	; 0xea
 80116ac:	48a7      	ldr	r0, [pc, #668]	; (801194c <_dtoa_r+0x2d4>)
 80116ae:	f001 fbc3 	bl	8012e38 <__assert_func>
 80116b2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80116b6:	6005      	str	r5, [r0, #0]
 80116b8:	60c5      	str	r5, [r0, #12]
 80116ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80116bc:	6819      	ldr	r1, [r3, #0]
 80116be:	b151      	cbz	r1, 80116d6 <_dtoa_r+0x5e>
 80116c0:	685a      	ldr	r2, [r3, #4]
 80116c2:	604a      	str	r2, [r1, #4]
 80116c4:	2301      	movs	r3, #1
 80116c6:	4093      	lsls	r3, r2
 80116c8:	608b      	str	r3, [r1, #8]
 80116ca:	4620      	mov	r0, r4
 80116cc:	f000 fe0e 	bl	80122ec <_Bfree>
 80116d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80116d2:	2200      	movs	r2, #0
 80116d4:	601a      	str	r2, [r3, #0]
 80116d6:	1e3b      	subs	r3, r7, #0
 80116d8:	bfaa      	itet	ge
 80116da:	2300      	movge	r3, #0
 80116dc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80116e0:	f8c8 3000 	strge.w	r3, [r8]
 80116e4:	4b9a      	ldr	r3, [pc, #616]	; (8011950 <_dtoa_r+0x2d8>)
 80116e6:	bfbc      	itt	lt
 80116e8:	2201      	movlt	r2, #1
 80116ea:	f8c8 2000 	strlt.w	r2, [r8]
 80116ee:	ea33 030b 	bics.w	r3, r3, fp
 80116f2:	d11b      	bne.n	801172c <_dtoa_r+0xb4>
 80116f4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80116f6:	f242 730f 	movw	r3, #9999	; 0x270f
 80116fa:	6013      	str	r3, [r2, #0]
 80116fc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011700:	4333      	orrs	r3, r6
 8011702:	f000 8592 	beq.w	801222a <_dtoa_r+0xbb2>
 8011706:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011708:	b963      	cbnz	r3, 8011724 <_dtoa_r+0xac>
 801170a:	4b92      	ldr	r3, [pc, #584]	; (8011954 <_dtoa_r+0x2dc>)
 801170c:	e022      	b.n	8011754 <_dtoa_r+0xdc>
 801170e:	4b92      	ldr	r3, [pc, #584]	; (8011958 <_dtoa_r+0x2e0>)
 8011710:	9301      	str	r3, [sp, #4]
 8011712:	3308      	adds	r3, #8
 8011714:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8011716:	6013      	str	r3, [r2, #0]
 8011718:	9801      	ldr	r0, [sp, #4]
 801171a:	b013      	add	sp, #76	; 0x4c
 801171c:	ecbd 8b04 	vpop	{d8-d9}
 8011720:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011724:	4b8b      	ldr	r3, [pc, #556]	; (8011954 <_dtoa_r+0x2dc>)
 8011726:	9301      	str	r3, [sp, #4]
 8011728:	3303      	adds	r3, #3
 801172a:	e7f3      	b.n	8011714 <_dtoa_r+0x9c>
 801172c:	2200      	movs	r2, #0
 801172e:	2300      	movs	r3, #0
 8011730:	4650      	mov	r0, sl
 8011732:	4659      	mov	r1, fp
 8011734:	f7ef f9c8 	bl	8000ac8 <__aeabi_dcmpeq>
 8011738:	ec4b ab19 	vmov	d9, sl, fp
 801173c:	4680      	mov	r8, r0
 801173e:	b158      	cbz	r0, 8011758 <_dtoa_r+0xe0>
 8011740:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011742:	2301      	movs	r3, #1
 8011744:	6013      	str	r3, [r2, #0]
 8011746:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011748:	2b00      	cmp	r3, #0
 801174a:	f000 856b 	beq.w	8012224 <_dtoa_r+0xbac>
 801174e:	4883      	ldr	r0, [pc, #524]	; (801195c <_dtoa_r+0x2e4>)
 8011750:	6018      	str	r0, [r3, #0]
 8011752:	1e43      	subs	r3, r0, #1
 8011754:	9301      	str	r3, [sp, #4]
 8011756:	e7df      	b.n	8011718 <_dtoa_r+0xa0>
 8011758:	ec4b ab10 	vmov	d0, sl, fp
 801175c:	aa10      	add	r2, sp, #64	; 0x40
 801175e:	a911      	add	r1, sp, #68	; 0x44
 8011760:	4620      	mov	r0, r4
 8011762:	f001 f8ab 	bl	80128bc <__d2b>
 8011766:	f3cb 550a 	ubfx	r5, fp, #20, #11
 801176a:	ee08 0a10 	vmov	s16, r0
 801176e:	2d00      	cmp	r5, #0
 8011770:	f000 8084 	beq.w	801187c <_dtoa_r+0x204>
 8011774:	ee19 3a90 	vmov	r3, s19
 8011778:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801177c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8011780:	4656      	mov	r6, sl
 8011782:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8011786:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801178a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 801178e:	4b74      	ldr	r3, [pc, #464]	; (8011960 <_dtoa_r+0x2e8>)
 8011790:	2200      	movs	r2, #0
 8011792:	4630      	mov	r0, r6
 8011794:	4639      	mov	r1, r7
 8011796:	f7ee fd77 	bl	8000288 <__aeabi_dsub>
 801179a:	a365      	add	r3, pc, #404	; (adr r3, 8011930 <_dtoa_r+0x2b8>)
 801179c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117a0:	f7ee ff2a 	bl	80005f8 <__aeabi_dmul>
 80117a4:	a364      	add	r3, pc, #400	; (adr r3, 8011938 <_dtoa_r+0x2c0>)
 80117a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117aa:	f7ee fd6f 	bl	800028c <__adddf3>
 80117ae:	4606      	mov	r6, r0
 80117b0:	4628      	mov	r0, r5
 80117b2:	460f      	mov	r7, r1
 80117b4:	f7ee feb6 	bl	8000524 <__aeabi_i2d>
 80117b8:	a361      	add	r3, pc, #388	; (adr r3, 8011940 <_dtoa_r+0x2c8>)
 80117ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117be:	f7ee ff1b 	bl	80005f8 <__aeabi_dmul>
 80117c2:	4602      	mov	r2, r0
 80117c4:	460b      	mov	r3, r1
 80117c6:	4630      	mov	r0, r6
 80117c8:	4639      	mov	r1, r7
 80117ca:	f7ee fd5f 	bl	800028c <__adddf3>
 80117ce:	4606      	mov	r6, r0
 80117d0:	460f      	mov	r7, r1
 80117d2:	f7ef f9c1 	bl	8000b58 <__aeabi_d2iz>
 80117d6:	2200      	movs	r2, #0
 80117d8:	9000      	str	r0, [sp, #0]
 80117da:	2300      	movs	r3, #0
 80117dc:	4630      	mov	r0, r6
 80117de:	4639      	mov	r1, r7
 80117e0:	f7ef f97c 	bl	8000adc <__aeabi_dcmplt>
 80117e4:	b150      	cbz	r0, 80117fc <_dtoa_r+0x184>
 80117e6:	9800      	ldr	r0, [sp, #0]
 80117e8:	f7ee fe9c 	bl	8000524 <__aeabi_i2d>
 80117ec:	4632      	mov	r2, r6
 80117ee:	463b      	mov	r3, r7
 80117f0:	f7ef f96a 	bl	8000ac8 <__aeabi_dcmpeq>
 80117f4:	b910      	cbnz	r0, 80117fc <_dtoa_r+0x184>
 80117f6:	9b00      	ldr	r3, [sp, #0]
 80117f8:	3b01      	subs	r3, #1
 80117fa:	9300      	str	r3, [sp, #0]
 80117fc:	9b00      	ldr	r3, [sp, #0]
 80117fe:	2b16      	cmp	r3, #22
 8011800:	d85a      	bhi.n	80118b8 <_dtoa_r+0x240>
 8011802:	9a00      	ldr	r2, [sp, #0]
 8011804:	4b57      	ldr	r3, [pc, #348]	; (8011964 <_dtoa_r+0x2ec>)
 8011806:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801180a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801180e:	ec51 0b19 	vmov	r0, r1, d9
 8011812:	f7ef f963 	bl	8000adc <__aeabi_dcmplt>
 8011816:	2800      	cmp	r0, #0
 8011818:	d050      	beq.n	80118bc <_dtoa_r+0x244>
 801181a:	9b00      	ldr	r3, [sp, #0]
 801181c:	3b01      	subs	r3, #1
 801181e:	9300      	str	r3, [sp, #0]
 8011820:	2300      	movs	r3, #0
 8011822:	930b      	str	r3, [sp, #44]	; 0x2c
 8011824:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011826:	1b5d      	subs	r5, r3, r5
 8011828:	1e6b      	subs	r3, r5, #1
 801182a:	9305      	str	r3, [sp, #20]
 801182c:	bf45      	ittet	mi
 801182e:	f1c5 0301 	rsbmi	r3, r5, #1
 8011832:	9304      	strmi	r3, [sp, #16]
 8011834:	2300      	movpl	r3, #0
 8011836:	2300      	movmi	r3, #0
 8011838:	bf4c      	ite	mi
 801183a:	9305      	strmi	r3, [sp, #20]
 801183c:	9304      	strpl	r3, [sp, #16]
 801183e:	9b00      	ldr	r3, [sp, #0]
 8011840:	2b00      	cmp	r3, #0
 8011842:	db3d      	blt.n	80118c0 <_dtoa_r+0x248>
 8011844:	9b05      	ldr	r3, [sp, #20]
 8011846:	9a00      	ldr	r2, [sp, #0]
 8011848:	920a      	str	r2, [sp, #40]	; 0x28
 801184a:	4413      	add	r3, r2
 801184c:	9305      	str	r3, [sp, #20]
 801184e:	2300      	movs	r3, #0
 8011850:	9307      	str	r3, [sp, #28]
 8011852:	9b06      	ldr	r3, [sp, #24]
 8011854:	2b09      	cmp	r3, #9
 8011856:	f200 8089 	bhi.w	801196c <_dtoa_r+0x2f4>
 801185a:	2b05      	cmp	r3, #5
 801185c:	bfc4      	itt	gt
 801185e:	3b04      	subgt	r3, #4
 8011860:	9306      	strgt	r3, [sp, #24]
 8011862:	9b06      	ldr	r3, [sp, #24]
 8011864:	f1a3 0302 	sub.w	r3, r3, #2
 8011868:	bfcc      	ite	gt
 801186a:	2500      	movgt	r5, #0
 801186c:	2501      	movle	r5, #1
 801186e:	2b03      	cmp	r3, #3
 8011870:	f200 8087 	bhi.w	8011982 <_dtoa_r+0x30a>
 8011874:	e8df f003 	tbb	[pc, r3]
 8011878:	59383a2d 	.word	0x59383a2d
 801187c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8011880:	441d      	add	r5, r3
 8011882:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8011886:	2b20      	cmp	r3, #32
 8011888:	bfc1      	itttt	gt
 801188a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801188e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8011892:	fa0b f303 	lslgt.w	r3, fp, r3
 8011896:	fa26 f000 	lsrgt.w	r0, r6, r0
 801189a:	bfda      	itte	le
 801189c:	f1c3 0320 	rsble	r3, r3, #32
 80118a0:	fa06 f003 	lslle.w	r0, r6, r3
 80118a4:	4318      	orrgt	r0, r3
 80118a6:	f7ee fe2d 	bl	8000504 <__aeabi_ui2d>
 80118aa:	2301      	movs	r3, #1
 80118ac:	4606      	mov	r6, r0
 80118ae:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80118b2:	3d01      	subs	r5, #1
 80118b4:	930e      	str	r3, [sp, #56]	; 0x38
 80118b6:	e76a      	b.n	801178e <_dtoa_r+0x116>
 80118b8:	2301      	movs	r3, #1
 80118ba:	e7b2      	b.n	8011822 <_dtoa_r+0x1aa>
 80118bc:	900b      	str	r0, [sp, #44]	; 0x2c
 80118be:	e7b1      	b.n	8011824 <_dtoa_r+0x1ac>
 80118c0:	9b04      	ldr	r3, [sp, #16]
 80118c2:	9a00      	ldr	r2, [sp, #0]
 80118c4:	1a9b      	subs	r3, r3, r2
 80118c6:	9304      	str	r3, [sp, #16]
 80118c8:	4253      	negs	r3, r2
 80118ca:	9307      	str	r3, [sp, #28]
 80118cc:	2300      	movs	r3, #0
 80118ce:	930a      	str	r3, [sp, #40]	; 0x28
 80118d0:	e7bf      	b.n	8011852 <_dtoa_r+0x1da>
 80118d2:	2300      	movs	r3, #0
 80118d4:	9308      	str	r3, [sp, #32]
 80118d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80118d8:	2b00      	cmp	r3, #0
 80118da:	dc55      	bgt.n	8011988 <_dtoa_r+0x310>
 80118dc:	2301      	movs	r3, #1
 80118de:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80118e2:	461a      	mov	r2, r3
 80118e4:	9209      	str	r2, [sp, #36]	; 0x24
 80118e6:	e00c      	b.n	8011902 <_dtoa_r+0x28a>
 80118e8:	2301      	movs	r3, #1
 80118ea:	e7f3      	b.n	80118d4 <_dtoa_r+0x25c>
 80118ec:	2300      	movs	r3, #0
 80118ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80118f0:	9308      	str	r3, [sp, #32]
 80118f2:	9b00      	ldr	r3, [sp, #0]
 80118f4:	4413      	add	r3, r2
 80118f6:	9302      	str	r3, [sp, #8]
 80118f8:	3301      	adds	r3, #1
 80118fa:	2b01      	cmp	r3, #1
 80118fc:	9303      	str	r3, [sp, #12]
 80118fe:	bfb8      	it	lt
 8011900:	2301      	movlt	r3, #1
 8011902:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8011904:	2200      	movs	r2, #0
 8011906:	6042      	str	r2, [r0, #4]
 8011908:	2204      	movs	r2, #4
 801190a:	f102 0614 	add.w	r6, r2, #20
 801190e:	429e      	cmp	r6, r3
 8011910:	6841      	ldr	r1, [r0, #4]
 8011912:	d93d      	bls.n	8011990 <_dtoa_r+0x318>
 8011914:	4620      	mov	r0, r4
 8011916:	f000 fca9 	bl	801226c <_Balloc>
 801191a:	9001      	str	r0, [sp, #4]
 801191c:	2800      	cmp	r0, #0
 801191e:	d13b      	bne.n	8011998 <_dtoa_r+0x320>
 8011920:	4b11      	ldr	r3, [pc, #68]	; (8011968 <_dtoa_r+0x2f0>)
 8011922:	4602      	mov	r2, r0
 8011924:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8011928:	e6c0      	b.n	80116ac <_dtoa_r+0x34>
 801192a:	2301      	movs	r3, #1
 801192c:	e7df      	b.n	80118ee <_dtoa_r+0x276>
 801192e:	bf00      	nop
 8011930:	636f4361 	.word	0x636f4361
 8011934:	3fd287a7 	.word	0x3fd287a7
 8011938:	8b60c8b3 	.word	0x8b60c8b3
 801193c:	3fc68a28 	.word	0x3fc68a28
 8011940:	509f79fb 	.word	0x509f79fb
 8011944:	3fd34413 	.word	0x3fd34413
 8011948:	080160c5 	.word	0x080160c5
 801194c:	080160dc 	.word	0x080160dc
 8011950:	7ff00000 	.word	0x7ff00000
 8011954:	080160c1 	.word	0x080160c1
 8011958:	080160b8 	.word	0x080160b8
 801195c:	08016095 	.word	0x08016095
 8011960:	3ff80000 	.word	0x3ff80000
 8011964:	080161d0 	.word	0x080161d0
 8011968:	08016137 	.word	0x08016137
 801196c:	2501      	movs	r5, #1
 801196e:	2300      	movs	r3, #0
 8011970:	9306      	str	r3, [sp, #24]
 8011972:	9508      	str	r5, [sp, #32]
 8011974:	f04f 33ff 	mov.w	r3, #4294967295
 8011978:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801197c:	2200      	movs	r2, #0
 801197e:	2312      	movs	r3, #18
 8011980:	e7b0      	b.n	80118e4 <_dtoa_r+0x26c>
 8011982:	2301      	movs	r3, #1
 8011984:	9308      	str	r3, [sp, #32]
 8011986:	e7f5      	b.n	8011974 <_dtoa_r+0x2fc>
 8011988:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801198a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801198e:	e7b8      	b.n	8011902 <_dtoa_r+0x28a>
 8011990:	3101      	adds	r1, #1
 8011992:	6041      	str	r1, [r0, #4]
 8011994:	0052      	lsls	r2, r2, #1
 8011996:	e7b8      	b.n	801190a <_dtoa_r+0x292>
 8011998:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801199a:	9a01      	ldr	r2, [sp, #4]
 801199c:	601a      	str	r2, [r3, #0]
 801199e:	9b03      	ldr	r3, [sp, #12]
 80119a0:	2b0e      	cmp	r3, #14
 80119a2:	f200 809d 	bhi.w	8011ae0 <_dtoa_r+0x468>
 80119a6:	2d00      	cmp	r5, #0
 80119a8:	f000 809a 	beq.w	8011ae0 <_dtoa_r+0x468>
 80119ac:	9b00      	ldr	r3, [sp, #0]
 80119ae:	2b00      	cmp	r3, #0
 80119b0:	dd32      	ble.n	8011a18 <_dtoa_r+0x3a0>
 80119b2:	4ab7      	ldr	r2, [pc, #732]	; (8011c90 <_dtoa_r+0x618>)
 80119b4:	f003 030f 	and.w	r3, r3, #15
 80119b8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80119bc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80119c0:	9b00      	ldr	r3, [sp, #0]
 80119c2:	05d8      	lsls	r0, r3, #23
 80119c4:	ea4f 1723 	mov.w	r7, r3, asr #4
 80119c8:	d516      	bpl.n	80119f8 <_dtoa_r+0x380>
 80119ca:	4bb2      	ldr	r3, [pc, #712]	; (8011c94 <_dtoa_r+0x61c>)
 80119cc:	ec51 0b19 	vmov	r0, r1, d9
 80119d0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80119d4:	f7ee ff3a 	bl	800084c <__aeabi_ddiv>
 80119d8:	f007 070f 	and.w	r7, r7, #15
 80119dc:	4682      	mov	sl, r0
 80119de:	468b      	mov	fp, r1
 80119e0:	2503      	movs	r5, #3
 80119e2:	4eac      	ldr	r6, [pc, #688]	; (8011c94 <_dtoa_r+0x61c>)
 80119e4:	b957      	cbnz	r7, 80119fc <_dtoa_r+0x384>
 80119e6:	4642      	mov	r2, r8
 80119e8:	464b      	mov	r3, r9
 80119ea:	4650      	mov	r0, sl
 80119ec:	4659      	mov	r1, fp
 80119ee:	f7ee ff2d 	bl	800084c <__aeabi_ddiv>
 80119f2:	4682      	mov	sl, r0
 80119f4:	468b      	mov	fp, r1
 80119f6:	e028      	b.n	8011a4a <_dtoa_r+0x3d2>
 80119f8:	2502      	movs	r5, #2
 80119fa:	e7f2      	b.n	80119e2 <_dtoa_r+0x36a>
 80119fc:	07f9      	lsls	r1, r7, #31
 80119fe:	d508      	bpl.n	8011a12 <_dtoa_r+0x39a>
 8011a00:	4640      	mov	r0, r8
 8011a02:	4649      	mov	r1, r9
 8011a04:	e9d6 2300 	ldrd	r2, r3, [r6]
 8011a08:	f7ee fdf6 	bl	80005f8 <__aeabi_dmul>
 8011a0c:	3501      	adds	r5, #1
 8011a0e:	4680      	mov	r8, r0
 8011a10:	4689      	mov	r9, r1
 8011a12:	107f      	asrs	r7, r7, #1
 8011a14:	3608      	adds	r6, #8
 8011a16:	e7e5      	b.n	80119e4 <_dtoa_r+0x36c>
 8011a18:	f000 809b 	beq.w	8011b52 <_dtoa_r+0x4da>
 8011a1c:	9b00      	ldr	r3, [sp, #0]
 8011a1e:	4f9d      	ldr	r7, [pc, #628]	; (8011c94 <_dtoa_r+0x61c>)
 8011a20:	425e      	negs	r6, r3
 8011a22:	4b9b      	ldr	r3, [pc, #620]	; (8011c90 <_dtoa_r+0x618>)
 8011a24:	f006 020f 	and.w	r2, r6, #15
 8011a28:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a30:	ec51 0b19 	vmov	r0, r1, d9
 8011a34:	f7ee fde0 	bl	80005f8 <__aeabi_dmul>
 8011a38:	1136      	asrs	r6, r6, #4
 8011a3a:	4682      	mov	sl, r0
 8011a3c:	468b      	mov	fp, r1
 8011a3e:	2300      	movs	r3, #0
 8011a40:	2502      	movs	r5, #2
 8011a42:	2e00      	cmp	r6, #0
 8011a44:	d17a      	bne.n	8011b3c <_dtoa_r+0x4c4>
 8011a46:	2b00      	cmp	r3, #0
 8011a48:	d1d3      	bne.n	80119f2 <_dtoa_r+0x37a>
 8011a4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011a4c:	2b00      	cmp	r3, #0
 8011a4e:	f000 8082 	beq.w	8011b56 <_dtoa_r+0x4de>
 8011a52:	4b91      	ldr	r3, [pc, #580]	; (8011c98 <_dtoa_r+0x620>)
 8011a54:	2200      	movs	r2, #0
 8011a56:	4650      	mov	r0, sl
 8011a58:	4659      	mov	r1, fp
 8011a5a:	f7ef f83f 	bl	8000adc <__aeabi_dcmplt>
 8011a5e:	2800      	cmp	r0, #0
 8011a60:	d079      	beq.n	8011b56 <_dtoa_r+0x4de>
 8011a62:	9b03      	ldr	r3, [sp, #12]
 8011a64:	2b00      	cmp	r3, #0
 8011a66:	d076      	beq.n	8011b56 <_dtoa_r+0x4de>
 8011a68:	9b02      	ldr	r3, [sp, #8]
 8011a6a:	2b00      	cmp	r3, #0
 8011a6c:	dd36      	ble.n	8011adc <_dtoa_r+0x464>
 8011a6e:	9b00      	ldr	r3, [sp, #0]
 8011a70:	4650      	mov	r0, sl
 8011a72:	4659      	mov	r1, fp
 8011a74:	1e5f      	subs	r7, r3, #1
 8011a76:	2200      	movs	r2, #0
 8011a78:	4b88      	ldr	r3, [pc, #544]	; (8011c9c <_dtoa_r+0x624>)
 8011a7a:	f7ee fdbd 	bl	80005f8 <__aeabi_dmul>
 8011a7e:	9e02      	ldr	r6, [sp, #8]
 8011a80:	4682      	mov	sl, r0
 8011a82:	468b      	mov	fp, r1
 8011a84:	3501      	adds	r5, #1
 8011a86:	4628      	mov	r0, r5
 8011a88:	f7ee fd4c 	bl	8000524 <__aeabi_i2d>
 8011a8c:	4652      	mov	r2, sl
 8011a8e:	465b      	mov	r3, fp
 8011a90:	f7ee fdb2 	bl	80005f8 <__aeabi_dmul>
 8011a94:	4b82      	ldr	r3, [pc, #520]	; (8011ca0 <_dtoa_r+0x628>)
 8011a96:	2200      	movs	r2, #0
 8011a98:	f7ee fbf8 	bl	800028c <__adddf3>
 8011a9c:	46d0      	mov	r8, sl
 8011a9e:	46d9      	mov	r9, fp
 8011aa0:	4682      	mov	sl, r0
 8011aa2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8011aa6:	2e00      	cmp	r6, #0
 8011aa8:	d158      	bne.n	8011b5c <_dtoa_r+0x4e4>
 8011aaa:	4b7e      	ldr	r3, [pc, #504]	; (8011ca4 <_dtoa_r+0x62c>)
 8011aac:	2200      	movs	r2, #0
 8011aae:	4640      	mov	r0, r8
 8011ab0:	4649      	mov	r1, r9
 8011ab2:	f7ee fbe9 	bl	8000288 <__aeabi_dsub>
 8011ab6:	4652      	mov	r2, sl
 8011ab8:	465b      	mov	r3, fp
 8011aba:	4680      	mov	r8, r0
 8011abc:	4689      	mov	r9, r1
 8011abe:	f7ef f82b 	bl	8000b18 <__aeabi_dcmpgt>
 8011ac2:	2800      	cmp	r0, #0
 8011ac4:	f040 8295 	bne.w	8011ff2 <_dtoa_r+0x97a>
 8011ac8:	4652      	mov	r2, sl
 8011aca:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8011ace:	4640      	mov	r0, r8
 8011ad0:	4649      	mov	r1, r9
 8011ad2:	f7ef f803 	bl	8000adc <__aeabi_dcmplt>
 8011ad6:	2800      	cmp	r0, #0
 8011ad8:	f040 8289 	bne.w	8011fee <_dtoa_r+0x976>
 8011adc:	ec5b ab19 	vmov	sl, fp, d9
 8011ae0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011ae2:	2b00      	cmp	r3, #0
 8011ae4:	f2c0 8148 	blt.w	8011d78 <_dtoa_r+0x700>
 8011ae8:	9a00      	ldr	r2, [sp, #0]
 8011aea:	2a0e      	cmp	r2, #14
 8011aec:	f300 8144 	bgt.w	8011d78 <_dtoa_r+0x700>
 8011af0:	4b67      	ldr	r3, [pc, #412]	; (8011c90 <_dtoa_r+0x618>)
 8011af2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011af6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011afa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011afc:	2b00      	cmp	r3, #0
 8011afe:	f280 80d5 	bge.w	8011cac <_dtoa_r+0x634>
 8011b02:	9b03      	ldr	r3, [sp, #12]
 8011b04:	2b00      	cmp	r3, #0
 8011b06:	f300 80d1 	bgt.w	8011cac <_dtoa_r+0x634>
 8011b0a:	f040 826f 	bne.w	8011fec <_dtoa_r+0x974>
 8011b0e:	4b65      	ldr	r3, [pc, #404]	; (8011ca4 <_dtoa_r+0x62c>)
 8011b10:	2200      	movs	r2, #0
 8011b12:	4640      	mov	r0, r8
 8011b14:	4649      	mov	r1, r9
 8011b16:	f7ee fd6f 	bl	80005f8 <__aeabi_dmul>
 8011b1a:	4652      	mov	r2, sl
 8011b1c:	465b      	mov	r3, fp
 8011b1e:	f7ee fff1 	bl	8000b04 <__aeabi_dcmpge>
 8011b22:	9e03      	ldr	r6, [sp, #12]
 8011b24:	4637      	mov	r7, r6
 8011b26:	2800      	cmp	r0, #0
 8011b28:	f040 8245 	bne.w	8011fb6 <_dtoa_r+0x93e>
 8011b2c:	9d01      	ldr	r5, [sp, #4]
 8011b2e:	2331      	movs	r3, #49	; 0x31
 8011b30:	f805 3b01 	strb.w	r3, [r5], #1
 8011b34:	9b00      	ldr	r3, [sp, #0]
 8011b36:	3301      	adds	r3, #1
 8011b38:	9300      	str	r3, [sp, #0]
 8011b3a:	e240      	b.n	8011fbe <_dtoa_r+0x946>
 8011b3c:	07f2      	lsls	r2, r6, #31
 8011b3e:	d505      	bpl.n	8011b4c <_dtoa_r+0x4d4>
 8011b40:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011b44:	f7ee fd58 	bl	80005f8 <__aeabi_dmul>
 8011b48:	3501      	adds	r5, #1
 8011b4a:	2301      	movs	r3, #1
 8011b4c:	1076      	asrs	r6, r6, #1
 8011b4e:	3708      	adds	r7, #8
 8011b50:	e777      	b.n	8011a42 <_dtoa_r+0x3ca>
 8011b52:	2502      	movs	r5, #2
 8011b54:	e779      	b.n	8011a4a <_dtoa_r+0x3d2>
 8011b56:	9f00      	ldr	r7, [sp, #0]
 8011b58:	9e03      	ldr	r6, [sp, #12]
 8011b5a:	e794      	b.n	8011a86 <_dtoa_r+0x40e>
 8011b5c:	9901      	ldr	r1, [sp, #4]
 8011b5e:	4b4c      	ldr	r3, [pc, #304]	; (8011c90 <_dtoa_r+0x618>)
 8011b60:	4431      	add	r1, r6
 8011b62:	910d      	str	r1, [sp, #52]	; 0x34
 8011b64:	9908      	ldr	r1, [sp, #32]
 8011b66:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8011b6a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8011b6e:	2900      	cmp	r1, #0
 8011b70:	d043      	beq.n	8011bfa <_dtoa_r+0x582>
 8011b72:	494d      	ldr	r1, [pc, #308]	; (8011ca8 <_dtoa_r+0x630>)
 8011b74:	2000      	movs	r0, #0
 8011b76:	f7ee fe69 	bl	800084c <__aeabi_ddiv>
 8011b7a:	4652      	mov	r2, sl
 8011b7c:	465b      	mov	r3, fp
 8011b7e:	f7ee fb83 	bl	8000288 <__aeabi_dsub>
 8011b82:	9d01      	ldr	r5, [sp, #4]
 8011b84:	4682      	mov	sl, r0
 8011b86:	468b      	mov	fp, r1
 8011b88:	4649      	mov	r1, r9
 8011b8a:	4640      	mov	r0, r8
 8011b8c:	f7ee ffe4 	bl	8000b58 <__aeabi_d2iz>
 8011b90:	4606      	mov	r6, r0
 8011b92:	f7ee fcc7 	bl	8000524 <__aeabi_i2d>
 8011b96:	4602      	mov	r2, r0
 8011b98:	460b      	mov	r3, r1
 8011b9a:	4640      	mov	r0, r8
 8011b9c:	4649      	mov	r1, r9
 8011b9e:	f7ee fb73 	bl	8000288 <__aeabi_dsub>
 8011ba2:	3630      	adds	r6, #48	; 0x30
 8011ba4:	f805 6b01 	strb.w	r6, [r5], #1
 8011ba8:	4652      	mov	r2, sl
 8011baa:	465b      	mov	r3, fp
 8011bac:	4680      	mov	r8, r0
 8011bae:	4689      	mov	r9, r1
 8011bb0:	f7ee ff94 	bl	8000adc <__aeabi_dcmplt>
 8011bb4:	2800      	cmp	r0, #0
 8011bb6:	d163      	bne.n	8011c80 <_dtoa_r+0x608>
 8011bb8:	4642      	mov	r2, r8
 8011bba:	464b      	mov	r3, r9
 8011bbc:	4936      	ldr	r1, [pc, #216]	; (8011c98 <_dtoa_r+0x620>)
 8011bbe:	2000      	movs	r0, #0
 8011bc0:	f7ee fb62 	bl	8000288 <__aeabi_dsub>
 8011bc4:	4652      	mov	r2, sl
 8011bc6:	465b      	mov	r3, fp
 8011bc8:	f7ee ff88 	bl	8000adc <__aeabi_dcmplt>
 8011bcc:	2800      	cmp	r0, #0
 8011bce:	f040 80b5 	bne.w	8011d3c <_dtoa_r+0x6c4>
 8011bd2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011bd4:	429d      	cmp	r5, r3
 8011bd6:	d081      	beq.n	8011adc <_dtoa_r+0x464>
 8011bd8:	4b30      	ldr	r3, [pc, #192]	; (8011c9c <_dtoa_r+0x624>)
 8011bda:	2200      	movs	r2, #0
 8011bdc:	4650      	mov	r0, sl
 8011bde:	4659      	mov	r1, fp
 8011be0:	f7ee fd0a 	bl	80005f8 <__aeabi_dmul>
 8011be4:	4b2d      	ldr	r3, [pc, #180]	; (8011c9c <_dtoa_r+0x624>)
 8011be6:	4682      	mov	sl, r0
 8011be8:	468b      	mov	fp, r1
 8011bea:	4640      	mov	r0, r8
 8011bec:	4649      	mov	r1, r9
 8011bee:	2200      	movs	r2, #0
 8011bf0:	f7ee fd02 	bl	80005f8 <__aeabi_dmul>
 8011bf4:	4680      	mov	r8, r0
 8011bf6:	4689      	mov	r9, r1
 8011bf8:	e7c6      	b.n	8011b88 <_dtoa_r+0x510>
 8011bfa:	4650      	mov	r0, sl
 8011bfc:	4659      	mov	r1, fp
 8011bfe:	f7ee fcfb 	bl	80005f8 <__aeabi_dmul>
 8011c02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011c04:	9d01      	ldr	r5, [sp, #4]
 8011c06:	930f      	str	r3, [sp, #60]	; 0x3c
 8011c08:	4682      	mov	sl, r0
 8011c0a:	468b      	mov	fp, r1
 8011c0c:	4649      	mov	r1, r9
 8011c0e:	4640      	mov	r0, r8
 8011c10:	f7ee ffa2 	bl	8000b58 <__aeabi_d2iz>
 8011c14:	4606      	mov	r6, r0
 8011c16:	f7ee fc85 	bl	8000524 <__aeabi_i2d>
 8011c1a:	3630      	adds	r6, #48	; 0x30
 8011c1c:	4602      	mov	r2, r0
 8011c1e:	460b      	mov	r3, r1
 8011c20:	4640      	mov	r0, r8
 8011c22:	4649      	mov	r1, r9
 8011c24:	f7ee fb30 	bl	8000288 <__aeabi_dsub>
 8011c28:	f805 6b01 	strb.w	r6, [r5], #1
 8011c2c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011c2e:	429d      	cmp	r5, r3
 8011c30:	4680      	mov	r8, r0
 8011c32:	4689      	mov	r9, r1
 8011c34:	f04f 0200 	mov.w	r2, #0
 8011c38:	d124      	bne.n	8011c84 <_dtoa_r+0x60c>
 8011c3a:	4b1b      	ldr	r3, [pc, #108]	; (8011ca8 <_dtoa_r+0x630>)
 8011c3c:	4650      	mov	r0, sl
 8011c3e:	4659      	mov	r1, fp
 8011c40:	f7ee fb24 	bl	800028c <__adddf3>
 8011c44:	4602      	mov	r2, r0
 8011c46:	460b      	mov	r3, r1
 8011c48:	4640      	mov	r0, r8
 8011c4a:	4649      	mov	r1, r9
 8011c4c:	f7ee ff64 	bl	8000b18 <__aeabi_dcmpgt>
 8011c50:	2800      	cmp	r0, #0
 8011c52:	d173      	bne.n	8011d3c <_dtoa_r+0x6c4>
 8011c54:	4652      	mov	r2, sl
 8011c56:	465b      	mov	r3, fp
 8011c58:	4913      	ldr	r1, [pc, #76]	; (8011ca8 <_dtoa_r+0x630>)
 8011c5a:	2000      	movs	r0, #0
 8011c5c:	f7ee fb14 	bl	8000288 <__aeabi_dsub>
 8011c60:	4602      	mov	r2, r0
 8011c62:	460b      	mov	r3, r1
 8011c64:	4640      	mov	r0, r8
 8011c66:	4649      	mov	r1, r9
 8011c68:	f7ee ff38 	bl	8000adc <__aeabi_dcmplt>
 8011c6c:	2800      	cmp	r0, #0
 8011c6e:	f43f af35 	beq.w	8011adc <_dtoa_r+0x464>
 8011c72:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8011c74:	1e6b      	subs	r3, r5, #1
 8011c76:	930f      	str	r3, [sp, #60]	; 0x3c
 8011c78:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8011c7c:	2b30      	cmp	r3, #48	; 0x30
 8011c7e:	d0f8      	beq.n	8011c72 <_dtoa_r+0x5fa>
 8011c80:	9700      	str	r7, [sp, #0]
 8011c82:	e049      	b.n	8011d18 <_dtoa_r+0x6a0>
 8011c84:	4b05      	ldr	r3, [pc, #20]	; (8011c9c <_dtoa_r+0x624>)
 8011c86:	f7ee fcb7 	bl	80005f8 <__aeabi_dmul>
 8011c8a:	4680      	mov	r8, r0
 8011c8c:	4689      	mov	r9, r1
 8011c8e:	e7bd      	b.n	8011c0c <_dtoa_r+0x594>
 8011c90:	080161d0 	.word	0x080161d0
 8011c94:	080161a8 	.word	0x080161a8
 8011c98:	3ff00000 	.word	0x3ff00000
 8011c9c:	40240000 	.word	0x40240000
 8011ca0:	401c0000 	.word	0x401c0000
 8011ca4:	40140000 	.word	0x40140000
 8011ca8:	3fe00000 	.word	0x3fe00000
 8011cac:	9d01      	ldr	r5, [sp, #4]
 8011cae:	4656      	mov	r6, sl
 8011cb0:	465f      	mov	r7, fp
 8011cb2:	4642      	mov	r2, r8
 8011cb4:	464b      	mov	r3, r9
 8011cb6:	4630      	mov	r0, r6
 8011cb8:	4639      	mov	r1, r7
 8011cba:	f7ee fdc7 	bl	800084c <__aeabi_ddiv>
 8011cbe:	f7ee ff4b 	bl	8000b58 <__aeabi_d2iz>
 8011cc2:	4682      	mov	sl, r0
 8011cc4:	f7ee fc2e 	bl	8000524 <__aeabi_i2d>
 8011cc8:	4642      	mov	r2, r8
 8011cca:	464b      	mov	r3, r9
 8011ccc:	f7ee fc94 	bl	80005f8 <__aeabi_dmul>
 8011cd0:	4602      	mov	r2, r0
 8011cd2:	460b      	mov	r3, r1
 8011cd4:	4630      	mov	r0, r6
 8011cd6:	4639      	mov	r1, r7
 8011cd8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8011cdc:	f7ee fad4 	bl	8000288 <__aeabi_dsub>
 8011ce0:	f805 6b01 	strb.w	r6, [r5], #1
 8011ce4:	9e01      	ldr	r6, [sp, #4]
 8011ce6:	9f03      	ldr	r7, [sp, #12]
 8011ce8:	1bae      	subs	r6, r5, r6
 8011cea:	42b7      	cmp	r7, r6
 8011cec:	4602      	mov	r2, r0
 8011cee:	460b      	mov	r3, r1
 8011cf0:	d135      	bne.n	8011d5e <_dtoa_r+0x6e6>
 8011cf2:	f7ee facb 	bl	800028c <__adddf3>
 8011cf6:	4642      	mov	r2, r8
 8011cf8:	464b      	mov	r3, r9
 8011cfa:	4606      	mov	r6, r0
 8011cfc:	460f      	mov	r7, r1
 8011cfe:	f7ee ff0b 	bl	8000b18 <__aeabi_dcmpgt>
 8011d02:	b9d0      	cbnz	r0, 8011d3a <_dtoa_r+0x6c2>
 8011d04:	4642      	mov	r2, r8
 8011d06:	464b      	mov	r3, r9
 8011d08:	4630      	mov	r0, r6
 8011d0a:	4639      	mov	r1, r7
 8011d0c:	f7ee fedc 	bl	8000ac8 <__aeabi_dcmpeq>
 8011d10:	b110      	cbz	r0, 8011d18 <_dtoa_r+0x6a0>
 8011d12:	f01a 0f01 	tst.w	sl, #1
 8011d16:	d110      	bne.n	8011d3a <_dtoa_r+0x6c2>
 8011d18:	4620      	mov	r0, r4
 8011d1a:	ee18 1a10 	vmov	r1, s16
 8011d1e:	f000 fae5 	bl	80122ec <_Bfree>
 8011d22:	2300      	movs	r3, #0
 8011d24:	9800      	ldr	r0, [sp, #0]
 8011d26:	702b      	strb	r3, [r5, #0]
 8011d28:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011d2a:	3001      	adds	r0, #1
 8011d2c:	6018      	str	r0, [r3, #0]
 8011d2e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011d30:	2b00      	cmp	r3, #0
 8011d32:	f43f acf1 	beq.w	8011718 <_dtoa_r+0xa0>
 8011d36:	601d      	str	r5, [r3, #0]
 8011d38:	e4ee      	b.n	8011718 <_dtoa_r+0xa0>
 8011d3a:	9f00      	ldr	r7, [sp, #0]
 8011d3c:	462b      	mov	r3, r5
 8011d3e:	461d      	mov	r5, r3
 8011d40:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011d44:	2a39      	cmp	r2, #57	; 0x39
 8011d46:	d106      	bne.n	8011d56 <_dtoa_r+0x6de>
 8011d48:	9a01      	ldr	r2, [sp, #4]
 8011d4a:	429a      	cmp	r2, r3
 8011d4c:	d1f7      	bne.n	8011d3e <_dtoa_r+0x6c6>
 8011d4e:	9901      	ldr	r1, [sp, #4]
 8011d50:	2230      	movs	r2, #48	; 0x30
 8011d52:	3701      	adds	r7, #1
 8011d54:	700a      	strb	r2, [r1, #0]
 8011d56:	781a      	ldrb	r2, [r3, #0]
 8011d58:	3201      	adds	r2, #1
 8011d5a:	701a      	strb	r2, [r3, #0]
 8011d5c:	e790      	b.n	8011c80 <_dtoa_r+0x608>
 8011d5e:	4ba6      	ldr	r3, [pc, #664]	; (8011ff8 <_dtoa_r+0x980>)
 8011d60:	2200      	movs	r2, #0
 8011d62:	f7ee fc49 	bl	80005f8 <__aeabi_dmul>
 8011d66:	2200      	movs	r2, #0
 8011d68:	2300      	movs	r3, #0
 8011d6a:	4606      	mov	r6, r0
 8011d6c:	460f      	mov	r7, r1
 8011d6e:	f7ee feab 	bl	8000ac8 <__aeabi_dcmpeq>
 8011d72:	2800      	cmp	r0, #0
 8011d74:	d09d      	beq.n	8011cb2 <_dtoa_r+0x63a>
 8011d76:	e7cf      	b.n	8011d18 <_dtoa_r+0x6a0>
 8011d78:	9a08      	ldr	r2, [sp, #32]
 8011d7a:	2a00      	cmp	r2, #0
 8011d7c:	f000 80d7 	beq.w	8011f2e <_dtoa_r+0x8b6>
 8011d80:	9a06      	ldr	r2, [sp, #24]
 8011d82:	2a01      	cmp	r2, #1
 8011d84:	f300 80ba 	bgt.w	8011efc <_dtoa_r+0x884>
 8011d88:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011d8a:	2a00      	cmp	r2, #0
 8011d8c:	f000 80b2 	beq.w	8011ef4 <_dtoa_r+0x87c>
 8011d90:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8011d94:	9e07      	ldr	r6, [sp, #28]
 8011d96:	9d04      	ldr	r5, [sp, #16]
 8011d98:	9a04      	ldr	r2, [sp, #16]
 8011d9a:	441a      	add	r2, r3
 8011d9c:	9204      	str	r2, [sp, #16]
 8011d9e:	9a05      	ldr	r2, [sp, #20]
 8011da0:	2101      	movs	r1, #1
 8011da2:	441a      	add	r2, r3
 8011da4:	4620      	mov	r0, r4
 8011da6:	9205      	str	r2, [sp, #20]
 8011da8:	f000 fb58 	bl	801245c <__i2b>
 8011dac:	4607      	mov	r7, r0
 8011dae:	2d00      	cmp	r5, #0
 8011db0:	dd0c      	ble.n	8011dcc <_dtoa_r+0x754>
 8011db2:	9b05      	ldr	r3, [sp, #20]
 8011db4:	2b00      	cmp	r3, #0
 8011db6:	dd09      	ble.n	8011dcc <_dtoa_r+0x754>
 8011db8:	42ab      	cmp	r3, r5
 8011dba:	9a04      	ldr	r2, [sp, #16]
 8011dbc:	bfa8      	it	ge
 8011dbe:	462b      	movge	r3, r5
 8011dc0:	1ad2      	subs	r2, r2, r3
 8011dc2:	9204      	str	r2, [sp, #16]
 8011dc4:	9a05      	ldr	r2, [sp, #20]
 8011dc6:	1aed      	subs	r5, r5, r3
 8011dc8:	1ad3      	subs	r3, r2, r3
 8011dca:	9305      	str	r3, [sp, #20]
 8011dcc:	9b07      	ldr	r3, [sp, #28]
 8011dce:	b31b      	cbz	r3, 8011e18 <_dtoa_r+0x7a0>
 8011dd0:	9b08      	ldr	r3, [sp, #32]
 8011dd2:	2b00      	cmp	r3, #0
 8011dd4:	f000 80af 	beq.w	8011f36 <_dtoa_r+0x8be>
 8011dd8:	2e00      	cmp	r6, #0
 8011dda:	dd13      	ble.n	8011e04 <_dtoa_r+0x78c>
 8011ddc:	4639      	mov	r1, r7
 8011dde:	4632      	mov	r2, r6
 8011de0:	4620      	mov	r0, r4
 8011de2:	f000 fbfb 	bl	80125dc <__pow5mult>
 8011de6:	ee18 2a10 	vmov	r2, s16
 8011dea:	4601      	mov	r1, r0
 8011dec:	4607      	mov	r7, r0
 8011dee:	4620      	mov	r0, r4
 8011df0:	f000 fb4a 	bl	8012488 <__multiply>
 8011df4:	ee18 1a10 	vmov	r1, s16
 8011df8:	4680      	mov	r8, r0
 8011dfa:	4620      	mov	r0, r4
 8011dfc:	f000 fa76 	bl	80122ec <_Bfree>
 8011e00:	ee08 8a10 	vmov	s16, r8
 8011e04:	9b07      	ldr	r3, [sp, #28]
 8011e06:	1b9a      	subs	r2, r3, r6
 8011e08:	d006      	beq.n	8011e18 <_dtoa_r+0x7a0>
 8011e0a:	ee18 1a10 	vmov	r1, s16
 8011e0e:	4620      	mov	r0, r4
 8011e10:	f000 fbe4 	bl	80125dc <__pow5mult>
 8011e14:	ee08 0a10 	vmov	s16, r0
 8011e18:	2101      	movs	r1, #1
 8011e1a:	4620      	mov	r0, r4
 8011e1c:	f000 fb1e 	bl	801245c <__i2b>
 8011e20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011e22:	2b00      	cmp	r3, #0
 8011e24:	4606      	mov	r6, r0
 8011e26:	f340 8088 	ble.w	8011f3a <_dtoa_r+0x8c2>
 8011e2a:	461a      	mov	r2, r3
 8011e2c:	4601      	mov	r1, r0
 8011e2e:	4620      	mov	r0, r4
 8011e30:	f000 fbd4 	bl	80125dc <__pow5mult>
 8011e34:	9b06      	ldr	r3, [sp, #24]
 8011e36:	2b01      	cmp	r3, #1
 8011e38:	4606      	mov	r6, r0
 8011e3a:	f340 8081 	ble.w	8011f40 <_dtoa_r+0x8c8>
 8011e3e:	f04f 0800 	mov.w	r8, #0
 8011e42:	6933      	ldr	r3, [r6, #16]
 8011e44:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8011e48:	6918      	ldr	r0, [r3, #16]
 8011e4a:	f000 fab7 	bl	80123bc <__hi0bits>
 8011e4e:	f1c0 0020 	rsb	r0, r0, #32
 8011e52:	9b05      	ldr	r3, [sp, #20]
 8011e54:	4418      	add	r0, r3
 8011e56:	f010 001f 	ands.w	r0, r0, #31
 8011e5a:	f000 8092 	beq.w	8011f82 <_dtoa_r+0x90a>
 8011e5e:	f1c0 0320 	rsb	r3, r0, #32
 8011e62:	2b04      	cmp	r3, #4
 8011e64:	f340 808a 	ble.w	8011f7c <_dtoa_r+0x904>
 8011e68:	f1c0 001c 	rsb	r0, r0, #28
 8011e6c:	9b04      	ldr	r3, [sp, #16]
 8011e6e:	4403      	add	r3, r0
 8011e70:	9304      	str	r3, [sp, #16]
 8011e72:	9b05      	ldr	r3, [sp, #20]
 8011e74:	4403      	add	r3, r0
 8011e76:	4405      	add	r5, r0
 8011e78:	9305      	str	r3, [sp, #20]
 8011e7a:	9b04      	ldr	r3, [sp, #16]
 8011e7c:	2b00      	cmp	r3, #0
 8011e7e:	dd07      	ble.n	8011e90 <_dtoa_r+0x818>
 8011e80:	ee18 1a10 	vmov	r1, s16
 8011e84:	461a      	mov	r2, r3
 8011e86:	4620      	mov	r0, r4
 8011e88:	f000 fc02 	bl	8012690 <__lshift>
 8011e8c:	ee08 0a10 	vmov	s16, r0
 8011e90:	9b05      	ldr	r3, [sp, #20]
 8011e92:	2b00      	cmp	r3, #0
 8011e94:	dd05      	ble.n	8011ea2 <_dtoa_r+0x82a>
 8011e96:	4631      	mov	r1, r6
 8011e98:	461a      	mov	r2, r3
 8011e9a:	4620      	mov	r0, r4
 8011e9c:	f000 fbf8 	bl	8012690 <__lshift>
 8011ea0:	4606      	mov	r6, r0
 8011ea2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011ea4:	2b00      	cmp	r3, #0
 8011ea6:	d06e      	beq.n	8011f86 <_dtoa_r+0x90e>
 8011ea8:	ee18 0a10 	vmov	r0, s16
 8011eac:	4631      	mov	r1, r6
 8011eae:	f000 fc5f 	bl	8012770 <__mcmp>
 8011eb2:	2800      	cmp	r0, #0
 8011eb4:	da67      	bge.n	8011f86 <_dtoa_r+0x90e>
 8011eb6:	9b00      	ldr	r3, [sp, #0]
 8011eb8:	3b01      	subs	r3, #1
 8011eba:	ee18 1a10 	vmov	r1, s16
 8011ebe:	9300      	str	r3, [sp, #0]
 8011ec0:	220a      	movs	r2, #10
 8011ec2:	2300      	movs	r3, #0
 8011ec4:	4620      	mov	r0, r4
 8011ec6:	f000 fa33 	bl	8012330 <__multadd>
 8011eca:	9b08      	ldr	r3, [sp, #32]
 8011ecc:	ee08 0a10 	vmov	s16, r0
 8011ed0:	2b00      	cmp	r3, #0
 8011ed2:	f000 81b1 	beq.w	8012238 <_dtoa_r+0xbc0>
 8011ed6:	2300      	movs	r3, #0
 8011ed8:	4639      	mov	r1, r7
 8011eda:	220a      	movs	r2, #10
 8011edc:	4620      	mov	r0, r4
 8011ede:	f000 fa27 	bl	8012330 <__multadd>
 8011ee2:	9b02      	ldr	r3, [sp, #8]
 8011ee4:	2b00      	cmp	r3, #0
 8011ee6:	4607      	mov	r7, r0
 8011ee8:	f300 808e 	bgt.w	8012008 <_dtoa_r+0x990>
 8011eec:	9b06      	ldr	r3, [sp, #24]
 8011eee:	2b02      	cmp	r3, #2
 8011ef0:	dc51      	bgt.n	8011f96 <_dtoa_r+0x91e>
 8011ef2:	e089      	b.n	8012008 <_dtoa_r+0x990>
 8011ef4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011ef6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8011efa:	e74b      	b.n	8011d94 <_dtoa_r+0x71c>
 8011efc:	9b03      	ldr	r3, [sp, #12]
 8011efe:	1e5e      	subs	r6, r3, #1
 8011f00:	9b07      	ldr	r3, [sp, #28]
 8011f02:	42b3      	cmp	r3, r6
 8011f04:	bfbf      	itttt	lt
 8011f06:	9b07      	ldrlt	r3, [sp, #28]
 8011f08:	9607      	strlt	r6, [sp, #28]
 8011f0a:	1af2      	sublt	r2, r6, r3
 8011f0c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8011f0e:	bfb6      	itet	lt
 8011f10:	189b      	addlt	r3, r3, r2
 8011f12:	1b9e      	subge	r6, r3, r6
 8011f14:	930a      	strlt	r3, [sp, #40]	; 0x28
 8011f16:	9b03      	ldr	r3, [sp, #12]
 8011f18:	bfb8      	it	lt
 8011f1a:	2600      	movlt	r6, #0
 8011f1c:	2b00      	cmp	r3, #0
 8011f1e:	bfb7      	itett	lt
 8011f20:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8011f24:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8011f28:	1a9d      	sublt	r5, r3, r2
 8011f2a:	2300      	movlt	r3, #0
 8011f2c:	e734      	b.n	8011d98 <_dtoa_r+0x720>
 8011f2e:	9e07      	ldr	r6, [sp, #28]
 8011f30:	9d04      	ldr	r5, [sp, #16]
 8011f32:	9f08      	ldr	r7, [sp, #32]
 8011f34:	e73b      	b.n	8011dae <_dtoa_r+0x736>
 8011f36:	9a07      	ldr	r2, [sp, #28]
 8011f38:	e767      	b.n	8011e0a <_dtoa_r+0x792>
 8011f3a:	9b06      	ldr	r3, [sp, #24]
 8011f3c:	2b01      	cmp	r3, #1
 8011f3e:	dc18      	bgt.n	8011f72 <_dtoa_r+0x8fa>
 8011f40:	f1ba 0f00 	cmp.w	sl, #0
 8011f44:	d115      	bne.n	8011f72 <_dtoa_r+0x8fa>
 8011f46:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011f4a:	b993      	cbnz	r3, 8011f72 <_dtoa_r+0x8fa>
 8011f4c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8011f50:	0d1b      	lsrs	r3, r3, #20
 8011f52:	051b      	lsls	r3, r3, #20
 8011f54:	b183      	cbz	r3, 8011f78 <_dtoa_r+0x900>
 8011f56:	9b04      	ldr	r3, [sp, #16]
 8011f58:	3301      	adds	r3, #1
 8011f5a:	9304      	str	r3, [sp, #16]
 8011f5c:	9b05      	ldr	r3, [sp, #20]
 8011f5e:	3301      	adds	r3, #1
 8011f60:	9305      	str	r3, [sp, #20]
 8011f62:	f04f 0801 	mov.w	r8, #1
 8011f66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011f68:	2b00      	cmp	r3, #0
 8011f6a:	f47f af6a 	bne.w	8011e42 <_dtoa_r+0x7ca>
 8011f6e:	2001      	movs	r0, #1
 8011f70:	e76f      	b.n	8011e52 <_dtoa_r+0x7da>
 8011f72:	f04f 0800 	mov.w	r8, #0
 8011f76:	e7f6      	b.n	8011f66 <_dtoa_r+0x8ee>
 8011f78:	4698      	mov	r8, r3
 8011f7a:	e7f4      	b.n	8011f66 <_dtoa_r+0x8ee>
 8011f7c:	f43f af7d 	beq.w	8011e7a <_dtoa_r+0x802>
 8011f80:	4618      	mov	r0, r3
 8011f82:	301c      	adds	r0, #28
 8011f84:	e772      	b.n	8011e6c <_dtoa_r+0x7f4>
 8011f86:	9b03      	ldr	r3, [sp, #12]
 8011f88:	2b00      	cmp	r3, #0
 8011f8a:	dc37      	bgt.n	8011ffc <_dtoa_r+0x984>
 8011f8c:	9b06      	ldr	r3, [sp, #24]
 8011f8e:	2b02      	cmp	r3, #2
 8011f90:	dd34      	ble.n	8011ffc <_dtoa_r+0x984>
 8011f92:	9b03      	ldr	r3, [sp, #12]
 8011f94:	9302      	str	r3, [sp, #8]
 8011f96:	9b02      	ldr	r3, [sp, #8]
 8011f98:	b96b      	cbnz	r3, 8011fb6 <_dtoa_r+0x93e>
 8011f9a:	4631      	mov	r1, r6
 8011f9c:	2205      	movs	r2, #5
 8011f9e:	4620      	mov	r0, r4
 8011fa0:	f000 f9c6 	bl	8012330 <__multadd>
 8011fa4:	4601      	mov	r1, r0
 8011fa6:	4606      	mov	r6, r0
 8011fa8:	ee18 0a10 	vmov	r0, s16
 8011fac:	f000 fbe0 	bl	8012770 <__mcmp>
 8011fb0:	2800      	cmp	r0, #0
 8011fb2:	f73f adbb 	bgt.w	8011b2c <_dtoa_r+0x4b4>
 8011fb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011fb8:	9d01      	ldr	r5, [sp, #4]
 8011fba:	43db      	mvns	r3, r3
 8011fbc:	9300      	str	r3, [sp, #0]
 8011fbe:	f04f 0800 	mov.w	r8, #0
 8011fc2:	4631      	mov	r1, r6
 8011fc4:	4620      	mov	r0, r4
 8011fc6:	f000 f991 	bl	80122ec <_Bfree>
 8011fca:	2f00      	cmp	r7, #0
 8011fcc:	f43f aea4 	beq.w	8011d18 <_dtoa_r+0x6a0>
 8011fd0:	f1b8 0f00 	cmp.w	r8, #0
 8011fd4:	d005      	beq.n	8011fe2 <_dtoa_r+0x96a>
 8011fd6:	45b8      	cmp	r8, r7
 8011fd8:	d003      	beq.n	8011fe2 <_dtoa_r+0x96a>
 8011fda:	4641      	mov	r1, r8
 8011fdc:	4620      	mov	r0, r4
 8011fde:	f000 f985 	bl	80122ec <_Bfree>
 8011fe2:	4639      	mov	r1, r7
 8011fe4:	4620      	mov	r0, r4
 8011fe6:	f000 f981 	bl	80122ec <_Bfree>
 8011fea:	e695      	b.n	8011d18 <_dtoa_r+0x6a0>
 8011fec:	2600      	movs	r6, #0
 8011fee:	4637      	mov	r7, r6
 8011ff0:	e7e1      	b.n	8011fb6 <_dtoa_r+0x93e>
 8011ff2:	9700      	str	r7, [sp, #0]
 8011ff4:	4637      	mov	r7, r6
 8011ff6:	e599      	b.n	8011b2c <_dtoa_r+0x4b4>
 8011ff8:	40240000 	.word	0x40240000
 8011ffc:	9b08      	ldr	r3, [sp, #32]
 8011ffe:	2b00      	cmp	r3, #0
 8012000:	f000 80ca 	beq.w	8012198 <_dtoa_r+0xb20>
 8012004:	9b03      	ldr	r3, [sp, #12]
 8012006:	9302      	str	r3, [sp, #8]
 8012008:	2d00      	cmp	r5, #0
 801200a:	dd05      	ble.n	8012018 <_dtoa_r+0x9a0>
 801200c:	4639      	mov	r1, r7
 801200e:	462a      	mov	r2, r5
 8012010:	4620      	mov	r0, r4
 8012012:	f000 fb3d 	bl	8012690 <__lshift>
 8012016:	4607      	mov	r7, r0
 8012018:	f1b8 0f00 	cmp.w	r8, #0
 801201c:	d05b      	beq.n	80120d6 <_dtoa_r+0xa5e>
 801201e:	6879      	ldr	r1, [r7, #4]
 8012020:	4620      	mov	r0, r4
 8012022:	f000 f923 	bl	801226c <_Balloc>
 8012026:	4605      	mov	r5, r0
 8012028:	b928      	cbnz	r0, 8012036 <_dtoa_r+0x9be>
 801202a:	4b87      	ldr	r3, [pc, #540]	; (8012248 <_dtoa_r+0xbd0>)
 801202c:	4602      	mov	r2, r0
 801202e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8012032:	f7ff bb3b 	b.w	80116ac <_dtoa_r+0x34>
 8012036:	693a      	ldr	r2, [r7, #16]
 8012038:	3202      	adds	r2, #2
 801203a:	0092      	lsls	r2, r2, #2
 801203c:	f107 010c 	add.w	r1, r7, #12
 8012040:	300c      	adds	r0, #12
 8012042:	f7fe fded 	bl	8010c20 <memcpy>
 8012046:	2201      	movs	r2, #1
 8012048:	4629      	mov	r1, r5
 801204a:	4620      	mov	r0, r4
 801204c:	f000 fb20 	bl	8012690 <__lshift>
 8012050:	9b01      	ldr	r3, [sp, #4]
 8012052:	f103 0901 	add.w	r9, r3, #1
 8012056:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801205a:	4413      	add	r3, r2
 801205c:	9305      	str	r3, [sp, #20]
 801205e:	f00a 0301 	and.w	r3, sl, #1
 8012062:	46b8      	mov	r8, r7
 8012064:	9304      	str	r3, [sp, #16]
 8012066:	4607      	mov	r7, r0
 8012068:	4631      	mov	r1, r6
 801206a:	ee18 0a10 	vmov	r0, s16
 801206e:	f7ff fa77 	bl	8011560 <quorem>
 8012072:	4641      	mov	r1, r8
 8012074:	9002      	str	r0, [sp, #8]
 8012076:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801207a:	ee18 0a10 	vmov	r0, s16
 801207e:	f000 fb77 	bl	8012770 <__mcmp>
 8012082:	463a      	mov	r2, r7
 8012084:	9003      	str	r0, [sp, #12]
 8012086:	4631      	mov	r1, r6
 8012088:	4620      	mov	r0, r4
 801208a:	f000 fb8d 	bl	80127a8 <__mdiff>
 801208e:	68c2      	ldr	r2, [r0, #12]
 8012090:	f109 3bff 	add.w	fp, r9, #4294967295
 8012094:	4605      	mov	r5, r0
 8012096:	bb02      	cbnz	r2, 80120da <_dtoa_r+0xa62>
 8012098:	4601      	mov	r1, r0
 801209a:	ee18 0a10 	vmov	r0, s16
 801209e:	f000 fb67 	bl	8012770 <__mcmp>
 80120a2:	4602      	mov	r2, r0
 80120a4:	4629      	mov	r1, r5
 80120a6:	4620      	mov	r0, r4
 80120a8:	9207      	str	r2, [sp, #28]
 80120aa:	f000 f91f 	bl	80122ec <_Bfree>
 80120ae:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80120b2:	ea43 0102 	orr.w	r1, r3, r2
 80120b6:	9b04      	ldr	r3, [sp, #16]
 80120b8:	430b      	orrs	r3, r1
 80120ba:	464d      	mov	r5, r9
 80120bc:	d10f      	bne.n	80120de <_dtoa_r+0xa66>
 80120be:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80120c2:	d02a      	beq.n	801211a <_dtoa_r+0xaa2>
 80120c4:	9b03      	ldr	r3, [sp, #12]
 80120c6:	2b00      	cmp	r3, #0
 80120c8:	dd02      	ble.n	80120d0 <_dtoa_r+0xa58>
 80120ca:	9b02      	ldr	r3, [sp, #8]
 80120cc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80120d0:	f88b a000 	strb.w	sl, [fp]
 80120d4:	e775      	b.n	8011fc2 <_dtoa_r+0x94a>
 80120d6:	4638      	mov	r0, r7
 80120d8:	e7ba      	b.n	8012050 <_dtoa_r+0x9d8>
 80120da:	2201      	movs	r2, #1
 80120dc:	e7e2      	b.n	80120a4 <_dtoa_r+0xa2c>
 80120de:	9b03      	ldr	r3, [sp, #12]
 80120e0:	2b00      	cmp	r3, #0
 80120e2:	db04      	blt.n	80120ee <_dtoa_r+0xa76>
 80120e4:	9906      	ldr	r1, [sp, #24]
 80120e6:	430b      	orrs	r3, r1
 80120e8:	9904      	ldr	r1, [sp, #16]
 80120ea:	430b      	orrs	r3, r1
 80120ec:	d122      	bne.n	8012134 <_dtoa_r+0xabc>
 80120ee:	2a00      	cmp	r2, #0
 80120f0:	ddee      	ble.n	80120d0 <_dtoa_r+0xa58>
 80120f2:	ee18 1a10 	vmov	r1, s16
 80120f6:	2201      	movs	r2, #1
 80120f8:	4620      	mov	r0, r4
 80120fa:	f000 fac9 	bl	8012690 <__lshift>
 80120fe:	4631      	mov	r1, r6
 8012100:	ee08 0a10 	vmov	s16, r0
 8012104:	f000 fb34 	bl	8012770 <__mcmp>
 8012108:	2800      	cmp	r0, #0
 801210a:	dc03      	bgt.n	8012114 <_dtoa_r+0xa9c>
 801210c:	d1e0      	bne.n	80120d0 <_dtoa_r+0xa58>
 801210e:	f01a 0f01 	tst.w	sl, #1
 8012112:	d0dd      	beq.n	80120d0 <_dtoa_r+0xa58>
 8012114:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8012118:	d1d7      	bne.n	80120ca <_dtoa_r+0xa52>
 801211a:	2339      	movs	r3, #57	; 0x39
 801211c:	f88b 3000 	strb.w	r3, [fp]
 8012120:	462b      	mov	r3, r5
 8012122:	461d      	mov	r5, r3
 8012124:	3b01      	subs	r3, #1
 8012126:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801212a:	2a39      	cmp	r2, #57	; 0x39
 801212c:	d071      	beq.n	8012212 <_dtoa_r+0xb9a>
 801212e:	3201      	adds	r2, #1
 8012130:	701a      	strb	r2, [r3, #0]
 8012132:	e746      	b.n	8011fc2 <_dtoa_r+0x94a>
 8012134:	2a00      	cmp	r2, #0
 8012136:	dd07      	ble.n	8012148 <_dtoa_r+0xad0>
 8012138:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801213c:	d0ed      	beq.n	801211a <_dtoa_r+0xaa2>
 801213e:	f10a 0301 	add.w	r3, sl, #1
 8012142:	f88b 3000 	strb.w	r3, [fp]
 8012146:	e73c      	b.n	8011fc2 <_dtoa_r+0x94a>
 8012148:	9b05      	ldr	r3, [sp, #20]
 801214a:	f809 ac01 	strb.w	sl, [r9, #-1]
 801214e:	4599      	cmp	r9, r3
 8012150:	d047      	beq.n	80121e2 <_dtoa_r+0xb6a>
 8012152:	ee18 1a10 	vmov	r1, s16
 8012156:	2300      	movs	r3, #0
 8012158:	220a      	movs	r2, #10
 801215a:	4620      	mov	r0, r4
 801215c:	f000 f8e8 	bl	8012330 <__multadd>
 8012160:	45b8      	cmp	r8, r7
 8012162:	ee08 0a10 	vmov	s16, r0
 8012166:	f04f 0300 	mov.w	r3, #0
 801216a:	f04f 020a 	mov.w	r2, #10
 801216e:	4641      	mov	r1, r8
 8012170:	4620      	mov	r0, r4
 8012172:	d106      	bne.n	8012182 <_dtoa_r+0xb0a>
 8012174:	f000 f8dc 	bl	8012330 <__multadd>
 8012178:	4680      	mov	r8, r0
 801217a:	4607      	mov	r7, r0
 801217c:	f109 0901 	add.w	r9, r9, #1
 8012180:	e772      	b.n	8012068 <_dtoa_r+0x9f0>
 8012182:	f000 f8d5 	bl	8012330 <__multadd>
 8012186:	4639      	mov	r1, r7
 8012188:	4680      	mov	r8, r0
 801218a:	2300      	movs	r3, #0
 801218c:	220a      	movs	r2, #10
 801218e:	4620      	mov	r0, r4
 8012190:	f000 f8ce 	bl	8012330 <__multadd>
 8012194:	4607      	mov	r7, r0
 8012196:	e7f1      	b.n	801217c <_dtoa_r+0xb04>
 8012198:	9b03      	ldr	r3, [sp, #12]
 801219a:	9302      	str	r3, [sp, #8]
 801219c:	9d01      	ldr	r5, [sp, #4]
 801219e:	ee18 0a10 	vmov	r0, s16
 80121a2:	4631      	mov	r1, r6
 80121a4:	f7ff f9dc 	bl	8011560 <quorem>
 80121a8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80121ac:	9b01      	ldr	r3, [sp, #4]
 80121ae:	f805 ab01 	strb.w	sl, [r5], #1
 80121b2:	1aea      	subs	r2, r5, r3
 80121b4:	9b02      	ldr	r3, [sp, #8]
 80121b6:	4293      	cmp	r3, r2
 80121b8:	dd09      	ble.n	80121ce <_dtoa_r+0xb56>
 80121ba:	ee18 1a10 	vmov	r1, s16
 80121be:	2300      	movs	r3, #0
 80121c0:	220a      	movs	r2, #10
 80121c2:	4620      	mov	r0, r4
 80121c4:	f000 f8b4 	bl	8012330 <__multadd>
 80121c8:	ee08 0a10 	vmov	s16, r0
 80121cc:	e7e7      	b.n	801219e <_dtoa_r+0xb26>
 80121ce:	9b02      	ldr	r3, [sp, #8]
 80121d0:	2b00      	cmp	r3, #0
 80121d2:	bfc8      	it	gt
 80121d4:	461d      	movgt	r5, r3
 80121d6:	9b01      	ldr	r3, [sp, #4]
 80121d8:	bfd8      	it	le
 80121da:	2501      	movle	r5, #1
 80121dc:	441d      	add	r5, r3
 80121de:	f04f 0800 	mov.w	r8, #0
 80121e2:	ee18 1a10 	vmov	r1, s16
 80121e6:	2201      	movs	r2, #1
 80121e8:	4620      	mov	r0, r4
 80121ea:	f000 fa51 	bl	8012690 <__lshift>
 80121ee:	4631      	mov	r1, r6
 80121f0:	ee08 0a10 	vmov	s16, r0
 80121f4:	f000 fabc 	bl	8012770 <__mcmp>
 80121f8:	2800      	cmp	r0, #0
 80121fa:	dc91      	bgt.n	8012120 <_dtoa_r+0xaa8>
 80121fc:	d102      	bne.n	8012204 <_dtoa_r+0xb8c>
 80121fe:	f01a 0f01 	tst.w	sl, #1
 8012202:	d18d      	bne.n	8012120 <_dtoa_r+0xaa8>
 8012204:	462b      	mov	r3, r5
 8012206:	461d      	mov	r5, r3
 8012208:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801220c:	2a30      	cmp	r2, #48	; 0x30
 801220e:	d0fa      	beq.n	8012206 <_dtoa_r+0xb8e>
 8012210:	e6d7      	b.n	8011fc2 <_dtoa_r+0x94a>
 8012212:	9a01      	ldr	r2, [sp, #4]
 8012214:	429a      	cmp	r2, r3
 8012216:	d184      	bne.n	8012122 <_dtoa_r+0xaaa>
 8012218:	9b00      	ldr	r3, [sp, #0]
 801221a:	3301      	adds	r3, #1
 801221c:	9300      	str	r3, [sp, #0]
 801221e:	2331      	movs	r3, #49	; 0x31
 8012220:	7013      	strb	r3, [r2, #0]
 8012222:	e6ce      	b.n	8011fc2 <_dtoa_r+0x94a>
 8012224:	4b09      	ldr	r3, [pc, #36]	; (801224c <_dtoa_r+0xbd4>)
 8012226:	f7ff ba95 	b.w	8011754 <_dtoa_r+0xdc>
 801222a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801222c:	2b00      	cmp	r3, #0
 801222e:	f47f aa6e 	bne.w	801170e <_dtoa_r+0x96>
 8012232:	4b07      	ldr	r3, [pc, #28]	; (8012250 <_dtoa_r+0xbd8>)
 8012234:	f7ff ba8e 	b.w	8011754 <_dtoa_r+0xdc>
 8012238:	9b02      	ldr	r3, [sp, #8]
 801223a:	2b00      	cmp	r3, #0
 801223c:	dcae      	bgt.n	801219c <_dtoa_r+0xb24>
 801223e:	9b06      	ldr	r3, [sp, #24]
 8012240:	2b02      	cmp	r3, #2
 8012242:	f73f aea8 	bgt.w	8011f96 <_dtoa_r+0x91e>
 8012246:	e7a9      	b.n	801219c <_dtoa_r+0xb24>
 8012248:	08016137 	.word	0x08016137
 801224c:	08016094 	.word	0x08016094
 8012250:	080160b8 	.word	0x080160b8

08012254 <_localeconv_r>:
 8012254:	4800      	ldr	r0, [pc, #0]	; (8012258 <_localeconv_r+0x4>)
 8012256:	4770      	bx	lr
 8012258:	200001cc 	.word	0x200001cc

0801225c <malloc>:
 801225c:	4b02      	ldr	r3, [pc, #8]	; (8012268 <malloc+0xc>)
 801225e:	4601      	mov	r1, r0
 8012260:	6818      	ldr	r0, [r3, #0]
 8012262:	f000 bc09 	b.w	8012a78 <_malloc_r>
 8012266:	bf00      	nop
 8012268:	20000078 	.word	0x20000078

0801226c <_Balloc>:
 801226c:	b570      	push	{r4, r5, r6, lr}
 801226e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8012270:	4604      	mov	r4, r0
 8012272:	460d      	mov	r5, r1
 8012274:	b976      	cbnz	r6, 8012294 <_Balloc+0x28>
 8012276:	2010      	movs	r0, #16
 8012278:	f7ff fff0 	bl	801225c <malloc>
 801227c:	4602      	mov	r2, r0
 801227e:	6260      	str	r0, [r4, #36]	; 0x24
 8012280:	b920      	cbnz	r0, 801228c <_Balloc+0x20>
 8012282:	4b18      	ldr	r3, [pc, #96]	; (80122e4 <_Balloc+0x78>)
 8012284:	4818      	ldr	r0, [pc, #96]	; (80122e8 <_Balloc+0x7c>)
 8012286:	2166      	movs	r1, #102	; 0x66
 8012288:	f000 fdd6 	bl	8012e38 <__assert_func>
 801228c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012290:	6006      	str	r6, [r0, #0]
 8012292:	60c6      	str	r6, [r0, #12]
 8012294:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8012296:	68f3      	ldr	r3, [r6, #12]
 8012298:	b183      	cbz	r3, 80122bc <_Balloc+0x50>
 801229a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801229c:	68db      	ldr	r3, [r3, #12]
 801229e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80122a2:	b9b8      	cbnz	r0, 80122d4 <_Balloc+0x68>
 80122a4:	2101      	movs	r1, #1
 80122a6:	fa01 f605 	lsl.w	r6, r1, r5
 80122aa:	1d72      	adds	r2, r6, #5
 80122ac:	0092      	lsls	r2, r2, #2
 80122ae:	4620      	mov	r0, r4
 80122b0:	f000 fb60 	bl	8012974 <_calloc_r>
 80122b4:	b160      	cbz	r0, 80122d0 <_Balloc+0x64>
 80122b6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80122ba:	e00e      	b.n	80122da <_Balloc+0x6e>
 80122bc:	2221      	movs	r2, #33	; 0x21
 80122be:	2104      	movs	r1, #4
 80122c0:	4620      	mov	r0, r4
 80122c2:	f000 fb57 	bl	8012974 <_calloc_r>
 80122c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80122c8:	60f0      	str	r0, [r6, #12]
 80122ca:	68db      	ldr	r3, [r3, #12]
 80122cc:	2b00      	cmp	r3, #0
 80122ce:	d1e4      	bne.n	801229a <_Balloc+0x2e>
 80122d0:	2000      	movs	r0, #0
 80122d2:	bd70      	pop	{r4, r5, r6, pc}
 80122d4:	6802      	ldr	r2, [r0, #0]
 80122d6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80122da:	2300      	movs	r3, #0
 80122dc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80122e0:	e7f7      	b.n	80122d2 <_Balloc+0x66>
 80122e2:	bf00      	nop
 80122e4:	080160c5 	.word	0x080160c5
 80122e8:	08016148 	.word	0x08016148

080122ec <_Bfree>:
 80122ec:	b570      	push	{r4, r5, r6, lr}
 80122ee:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80122f0:	4605      	mov	r5, r0
 80122f2:	460c      	mov	r4, r1
 80122f4:	b976      	cbnz	r6, 8012314 <_Bfree+0x28>
 80122f6:	2010      	movs	r0, #16
 80122f8:	f7ff ffb0 	bl	801225c <malloc>
 80122fc:	4602      	mov	r2, r0
 80122fe:	6268      	str	r0, [r5, #36]	; 0x24
 8012300:	b920      	cbnz	r0, 801230c <_Bfree+0x20>
 8012302:	4b09      	ldr	r3, [pc, #36]	; (8012328 <_Bfree+0x3c>)
 8012304:	4809      	ldr	r0, [pc, #36]	; (801232c <_Bfree+0x40>)
 8012306:	218a      	movs	r1, #138	; 0x8a
 8012308:	f000 fd96 	bl	8012e38 <__assert_func>
 801230c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012310:	6006      	str	r6, [r0, #0]
 8012312:	60c6      	str	r6, [r0, #12]
 8012314:	b13c      	cbz	r4, 8012326 <_Bfree+0x3a>
 8012316:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8012318:	6862      	ldr	r2, [r4, #4]
 801231a:	68db      	ldr	r3, [r3, #12]
 801231c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012320:	6021      	str	r1, [r4, #0]
 8012322:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8012326:	bd70      	pop	{r4, r5, r6, pc}
 8012328:	080160c5 	.word	0x080160c5
 801232c:	08016148 	.word	0x08016148

08012330 <__multadd>:
 8012330:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012334:	690d      	ldr	r5, [r1, #16]
 8012336:	4607      	mov	r7, r0
 8012338:	460c      	mov	r4, r1
 801233a:	461e      	mov	r6, r3
 801233c:	f101 0c14 	add.w	ip, r1, #20
 8012340:	2000      	movs	r0, #0
 8012342:	f8dc 3000 	ldr.w	r3, [ip]
 8012346:	b299      	uxth	r1, r3
 8012348:	fb02 6101 	mla	r1, r2, r1, r6
 801234c:	0c1e      	lsrs	r6, r3, #16
 801234e:	0c0b      	lsrs	r3, r1, #16
 8012350:	fb02 3306 	mla	r3, r2, r6, r3
 8012354:	b289      	uxth	r1, r1
 8012356:	3001      	adds	r0, #1
 8012358:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801235c:	4285      	cmp	r5, r0
 801235e:	f84c 1b04 	str.w	r1, [ip], #4
 8012362:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8012366:	dcec      	bgt.n	8012342 <__multadd+0x12>
 8012368:	b30e      	cbz	r6, 80123ae <__multadd+0x7e>
 801236a:	68a3      	ldr	r3, [r4, #8]
 801236c:	42ab      	cmp	r3, r5
 801236e:	dc19      	bgt.n	80123a4 <__multadd+0x74>
 8012370:	6861      	ldr	r1, [r4, #4]
 8012372:	4638      	mov	r0, r7
 8012374:	3101      	adds	r1, #1
 8012376:	f7ff ff79 	bl	801226c <_Balloc>
 801237a:	4680      	mov	r8, r0
 801237c:	b928      	cbnz	r0, 801238a <__multadd+0x5a>
 801237e:	4602      	mov	r2, r0
 8012380:	4b0c      	ldr	r3, [pc, #48]	; (80123b4 <__multadd+0x84>)
 8012382:	480d      	ldr	r0, [pc, #52]	; (80123b8 <__multadd+0x88>)
 8012384:	21b5      	movs	r1, #181	; 0xb5
 8012386:	f000 fd57 	bl	8012e38 <__assert_func>
 801238a:	6922      	ldr	r2, [r4, #16]
 801238c:	3202      	adds	r2, #2
 801238e:	f104 010c 	add.w	r1, r4, #12
 8012392:	0092      	lsls	r2, r2, #2
 8012394:	300c      	adds	r0, #12
 8012396:	f7fe fc43 	bl	8010c20 <memcpy>
 801239a:	4621      	mov	r1, r4
 801239c:	4638      	mov	r0, r7
 801239e:	f7ff ffa5 	bl	80122ec <_Bfree>
 80123a2:	4644      	mov	r4, r8
 80123a4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80123a8:	3501      	adds	r5, #1
 80123aa:	615e      	str	r6, [r3, #20]
 80123ac:	6125      	str	r5, [r4, #16]
 80123ae:	4620      	mov	r0, r4
 80123b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80123b4:	08016137 	.word	0x08016137
 80123b8:	08016148 	.word	0x08016148

080123bc <__hi0bits>:
 80123bc:	0c03      	lsrs	r3, r0, #16
 80123be:	041b      	lsls	r3, r3, #16
 80123c0:	b9d3      	cbnz	r3, 80123f8 <__hi0bits+0x3c>
 80123c2:	0400      	lsls	r0, r0, #16
 80123c4:	2310      	movs	r3, #16
 80123c6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80123ca:	bf04      	itt	eq
 80123cc:	0200      	lsleq	r0, r0, #8
 80123ce:	3308      	addeq	r3, #8
 80123d0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80123d4:	bf04      	itt	eq
 80123d6:	0100      	lsleq	r0, r0, #4
 80123d8:	3304      	addeq	r3, #4
 80123da:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80123de:	bf04      	itt	eq
 80123e0:	0080      	lsleq	r0, r0, #2
 80123e2:	3302      	addeq	r3, #2
 80123e4:	2800      	cmp	r0, #0
 80123e6:	db05      	blt.n	80123f4 <__hi0bits+0x38>
 80123e8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80123ec:	f103 0301 	add.w	r3, r3, #1
 80123f0:	bf08      	it	eq
 80123f2:	2320      	moveq	r3, #32
 80123f4:	4618      	mov	r0, r3
 80123f6:	4770      	bx	lr
 80123f8:	2300      	movs	r3, #0
 80123fa:	e7e4      	b.n	80123c6 <__hi0bits+0xa>

080123fc <__lo0bits>:
 80123fc:	6803      	ldr	r3, [r0, #0]
 80123fe:	f013 0207 	ands.w	r2, r3, #7
 8012402:	4601      	mov	r1, r0
 8012404:	d00b      	beq.n	801241e <__lo0bits+0x22>
 8012406:	07da      	lsls	r2, r3, #31
 8012408:	d423      	bmi.n	8012452 <__lo0bits+0x56>
 801240a:	0798      	lsls	r0, r3, #30
 801240c:	bf49      	itett	mi
 801240e:	085b      	lsrmi	r3, r3, #1
 8012410:	089b      	lsrpl	r3, r3, #2
 8012412:	2001      	movmi	r0, #1
 8012414:	600b      	strmi	r3, [r1, #0]
 8012416:	bf5c      	itt	pl
 8012418:	600b      	strpl	r3, [r1, #0]
 801241a:	2002      	movpl	r0, #2
 801241c:	4770      	bx	lr
 801241e:	b298      	uxth	r0, r3
 8012420:	b9a8      	cbnz	r0, 801244e <__lo0bits+0x52>
 8012422:	0c1b      	lsrs	r3, r3, #16
 8012424:	2010      	movs	r0, #16
 8012426:	b2da      	uxtb	r2, r3
 8012428:	b90a      	cbnz	r2, 801242e <__lo0bits+0x32>
 801242a:	3008      	adds	r0, #8
 801242c:	0a1b      	lsrs	r3, r3, #8
 801242e:	071a      	lsls	r2, r3, #28
 8012430:	bf04      	itt	eq
 8012432:	091b      	lsreq	r3, r3, #4
 8012434:	3004      	addeq	r0, #4
 8012436:	079a      	lsls	r2, r3, #30
 8012438:	bf04      	itt	eq
 801243a:	089b      	lsreq	r3, r3, #2
 801243c:	3002      	addeq	r0, #2
 801243e:	07da      	lsls	r2, r3, #31
 8012440:	d403      	bmi.n	801244a <__lo0bits+0x4e>
 8012442:	085b      	lsrs	r3, r3, #1
 8012444:	f100 0001 	add.w	r0, r0, #1
 8012448:	d005      	beq.n	8012456 <__lo0bits+0x5a>
 801244a:	600b      	str	r3, [r1, #0]
 801244c:	4770      	bx	lr
 801244e:	4610      	mov	r0, r2
 8012450:	e7e9      	b.n	8012426 <__lo0bits+0x2a>
 8012452:	2000      	movs	r0, #0
 8012454:	4770      	bx	lr
 8012456:	2020      	movs	r0, #32
 8012458:	4770      	bx	lr
	...

0801245c <__i2b>:
 801245c:	b510      	push	{r4, lr}
 801245e:	460c      	mov	r4, r1
 8012460:	2101      	movs	r1, #1
 8012462:	f7ff ff03 	bl	801226c <_Balloc>
 8012466:	4602      	mov	r2, r0
 8012468:	b928      	cbnz	r0, 8012476 <__i2b+0x1a>
 801246a:	4b05      	ldr	r3, [pc, #20]	; (8012480 <__i2b+0x24>)
 801246c:	4805      	ldr	r0, [pc, #20]	; (8012484 <__i2b+0x28>)
 801246e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8012472:	f000 fce1 	bl	8012e38 <__assert_func>
 8012476:	2301      	movs	r3, #1
 8012478:	6144      	str	r4, [r0, #20]
 801247a:	6103      	str	r3, [r0, #16]
 801247c:	bd10      	pop	{r4, pc}
 801247e:	bf00      	nop
 8012480:	08016137 	.word	0x08016137
 8012484:	08016148 	.word	0x08016148

08012488 <__multiply>:
 8012488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801248c:	4691      	mov	r9, r2
 801248e:	690a      	ldr	r2, [r1, #16]
 8012490:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8012494:	429a      	cmp	r2, r3
 8012496:	bfb8      	it	lt
 8012498:	460b      	movlt	r3, r1
 801249a:	460c      	mov	r4, r1
 801249c:	bfbc      	itt	lt
 801249e:	464c      	movlt	r4, r9
 80124a0:	4699      	movlt	r9, r3
 80124a2:	6927      	ldr	r7, [r4, #16]
 80124a4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80124a8:	68a3      	ldr	r3, [r4, #8]
 80124aa:	6861      	ldr	r1, [r4, #4]
 80124ac:	eb07 060a 	add.w	r6, r7, sl
 80124b0:	42b3      	cmp	r3, r6
 80124b2:	b085      	sub	sp, #20
 80124b4:	bfb8      	it	lt
 80124b6:	3101      	addlt	r1, #1
 80124b8:	f7ff fed8 	bl	801226c <_Balloc>
 80124bc:	b930      	cbnz	r0, 80124cc <__multiply+0x44>
 80124be:	4602      	mov	r2, r0
 80124c0:	4b44      	ldr	r3, [pc, #272]	; (80125d4 <__multiply+0x14c>)
 80124c2:	4845      	ldr	r0, [pc, #276]	; (80125d8 <__multiply+0x150>)
 80124c4:	f240 115d 	movw	r1, #349	; 0x15d
 80124c8:	f000 fcb6 	bl	8012e38 <__assert_func>
 80124cc:	f100 0514 	add.w	r5, r0, #20
 80124d0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80124d4:	462b      	mov	r3, r5
 80124d6:	2200      	movs	r2, #0
 80124d8:	4543      	cmp	r3, r8
 80124da:	d321      	bcc.n	8012520 <__multiply+0x98>
 80124dc:	f104 0314 	add.w	r3, r4, #20
 80124e0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80124e4:	f109 0314 	add.w	r3, r9, #20
 80124e8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80124ec:	9202      	str	r2, [sp, #8]
 80124ee:	1b3a      	subs	r2, r7, r4
 80124f0:	3a15      	subs	r2, #21
 80124f2:	f022 0203 	bic.w	r2, r2, #3
 80124f6:	3204      	adds	r2, #4
 80124f8:	f104 0115 	add.w	r1, r4, #21
 80124fc:	428f      	cmp	r7, r1
 80124fe:	bf38      	it	cc
 8012500:	2204      	movcc	r2, #4
 8012502:	9201      	str	r2, [sp, #4]
 8012504:	9a02      	ldr	r2, [sp, #8]
 8012506:	9303      	str	r3, [sp, #12]
 8012508:	429a      	cmp	r2, r3
 801250a:	d80c      	bhi.n	8012526 <__multiply+0x9e>
 801250c:	2e00      	cmp	r6, #0
 801250e:	dd03      	ble.n	8012518 <__multiply+0x90>
 8012510:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8012514:	2b00      	cmp	r3, #0
 8012516:	d05a      	beq.n	80125ce <__multiply+0x146>
 8012518:	6106      	str	r6, [r0, #16]
 801251a:	b005      	add	sp, #20
 801251c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012520:	f843 2b04 	str.w	r2, [r3], #4
 8012524:	e7d8      	b.n	80124d8 <__multiply+0x50>
 8012526:	f8b3 a000 	ldrh.w	sl, [r3]
 801252a:	f1ba 0f00 	cmp.w	sl, #0
 801252e:	d024      	beq.n	801257a <__multiply+0xf2>
 8012530:	f104 0e14 	add.w	lr, r4, #20
 8012534:	46a9      	mov	r9, r5
 8012536:	f04f 0c00 	mov.w	ip, #0
 801253a:	f85e 2b04 	ldr.w	r2, [lr], #4
 801253e:	f8d9 1000 	ldr.w	r1, [r9]
 8012542:	fa1f fb82 	uxth.w	fp, r2
 8012546:	b289      	uxth	r1, r1
 8012548:	fb0a 110b 	mla	r1, sl, fp, r1
 801254c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8012550:	f8d9 2000 	ldr.w	r2, [r9]
 8012554:	4461      	add	r1, ip
 8012556:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801255a:	fb0a c20b 	mla	r2, sl, fp, ip
 801255e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8012562:	b289      	uxth	r1, r1
 8012564:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8012568:	4577      	cmp	r7, lr
 801256a:	f849 1b04 	str.w	r1, [r9], #4
 801256e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8012572:	d8e2      	bhi.n	801253a <__multiply+0xb2>
 8012574:	9a01      	ldr	r2, [sp, #4]
 8012576:	f845 c002 	str.w	ip, [r5, r2]
 801257a:	9a03      	ldr	r2, [sp, #12]
 801257c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8012580:	3304      	adds	r3, #4
 8012582:	f1b9 0f00 	cmp.w	r9, #0
 8012586:	d020      	beq.n	80125ca <__multiply+0x142>
 8012588:	6829      	ldr	r1, [r5, #0]
 801258a:	f104 0c14 	add.w	ip, r4, #20
 801258e:	46ae      	mov	lr, r5
 8012590:	f04f 0a00 	mov.w	sl, #0
 8012594:	f8bc b000 	ldrh.w	fp, [ip]
 8012598:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801259c:	fb09 220b 	mla	r2, r9, fp, r2
 80125a0:	4492      	add	sl, r2
 80125a2:	b289      	uxth	r1, r1
 80125a4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80125a8:	f84e 1b04 	str.w	r1, [lr], #4
 80125ac:	f85c 2b04 	ldr.w	r2, [ip], #4
 80125b0:	f8be 1000 	ldrh.w	r1, [lr]
 80125b4:	0c12      	lsrs	r2, r2, #16
 80125b6:	fb09 1102 	mla	r1, r9, r2, r1
 80125ba:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80125be:	4567      	cmp	r7, ip
 80125c0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80125c4:	d8e6      	bhi.n	8012594 <__multiply+0x10c>
 80125c6:	9a01      	ldr	r2, [sp, #4]
 80125c8:	50a9      	str	r1, [r5, r2]
 80125ca:	3504      	adds	r5, #4
 80125cc:	e79a      	b.n	8012504 <__multiply+0x7c>
 80125ce:	3e01      	subs	r6, #1
 80125d0:	e79c      	b.n	801250c <__multiply+0x84>
 80125d2:	bf00      	nop
 80125d4:	08016137 	.word	0x08016137
 80125d8:	08016148 	.word	0x08016148

080125dc <__pow5mult>:
 80125dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80125e0:	4615      	mov	r5, r2
 80125e2:	f012 0203 	ands.w	r2, r2, #3
 80125e6:	4606      	mov	r6, r0
 80125e8:	460f      	mov	r7, r1
 80125ea:	d007      	beq.n	80125fc <__pow5mult+0x20>
 80125ec:	4c25      	ldr	r4, [pc, #148]	; (8012684 <__pow5mult+0xa8>)
 80125ee:	3a01      	subs	r2, #1
 80125f0:	2300      	movs	r3, #0
 80125f2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80125f6:	f7ff fe9b 	bl	8012330 <__multadd>
 80125fa:	4607      	mov	r7, r0
 80125fc:	10ad      	asrs	r5, r5, #2
 80125fe:	d03d      	beq.n	801267c <__pow5mult+0xa0>
 8012600:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8012602:	b97c      	cbnz	r4, 8012624 <__pow5mult+0x48>
 8012604:	2010      	movs	r0, #16
 8012606:	f7ff fe29 	bl	801225c <malloc>
 801260a:	4602      	mov	r2, r0
 801260c:	6270      	str	r0, [r6, #36]	; 0x24
 801260e:	b928      	cbnz	r0, 801261c <__pow5mult+0x40>
 8012610:	4b1d      	ldr	r3, [pc, #116]	; (8012688 <__pow5mult+0xac>)
 8012612:	481e      	ldr	r0, [pc, #120]	; (801268c <__pow5mult+0xb0>)
 8012614:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8012618:	f000 fc0e 	bl	8012e38 <__assert_func>
 801261c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8012620:	6004      	str	r4, [r0, #0]
 8012622:	60c4      	str	r4, [r0, #12]
 8012624:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8012628:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801262c:	b94c      	cbnz	r4, 8012642 <__pow5mult+0x66>
 801262e:	f240 2171 	movw	r1, #625	; 0x271
 8012632:	4630      	mov	r0, r6
 8012634:	f7ff ff12 	bl	801245c <__i2b>
 8012638:	2300      	movs	r3, #0
 801263a:	f8c8 0008 	str.w	r0, [r8, #8]
 801263e:	4604      	mov	r4, r0
 8012640:	6003      	str	r3, [r0, #0]
 8012642:	f04f 0900 	mov.w	r9, #0
 8012646:	07eb      	lsls	r3, r5, #31
 8012648:	d50a      	bpl.n	8012660 <__pow5mult+0x84>
 801264a:	4639      	mov	r1, r7
 801264c:	4622      	mov	r2, r4
 801264e:	4630      	mov	r0, r6
 8012650:	f7ff ff1a 	bl	8012488 <__multiply>
 8012654:	4639      	mov	r1, r7
 8012656:	4680      	mov	r8, r0
 8012658:	4630      	mov	r0, r6
 801265a:	f7ff fe47 	bl	80122ec <_Bfree>
 801265e:	4647      	mov	r7, r8
 8012660:	106d      	asrs	r5, r5, #1
 8012662:	d00b      	beq.n	801267c <__pow5mult+0xa0>
 8012664:	6820      	ldr	r0, [r4, #0]
 8012666:	b938      	cbnz	r0, 8012678 <__pow5mult+0x9c>
 8012668:	4622      	mov	r2, r4
 801266a:	4621      	mov	r1, r4
 801266c:	4630      	mov	r0, r6
 801266e:	f7ff ff0b 	bl	8012488 <__multiply>
 8012672:	6020      	str	r0, [r4, #0]
 8012674:	f8c0 9000 	str.w	r9, [r0]
 8012678:	4604      	mov	r4, r0
 801267a:	e7e4      	b.n	8012646 <__pow5mult+0x6a>
 801267c:	4638      	mov	r0, r7
 801267e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012682:	bf00      	nop
 8012684:	08016298 	.word	0x08016298
 8012688:	080160c5 	.word	0x080160c5
 801268c:	08016148 	.word	0x08016148

08012690 <__lshift>:
 8012690:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012694:	460c      	mov	r4, r1
 8012696:	6849      	ldr	r1, [r1, #4]
 8012698:	6923      	ldr	r3, [r4, #16]
 801269a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801269e:	68a3      	ldr	r3, [r4, #8]
 80126a0:	4607      	mov	r7, r0
 80126a2:	4691      	mov	r9, r2
 80126a4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80126a8:	f108 0601 	add.w	r6, r8, #1
 80126ac:	42b3      	cmp	r3, r6
 80126ae:	db0b      	blt.n	80126c8 <__lshift+0x38>
 80126b0:	4638      	mov	r0, r7
 80126b2:	f7ff fddb 	bl	801226c <_Balloc>
 80126b6:	4605      	mov	r5, r0
 80126b8:	b948      	cbnz	r0, 80126ce <__lshift+0x3e>
 80126ba:	4602      	mov	r2, r0
 80126bc:	4b2a      	ldr	r3, [pc, #168]	; (8012768 <__lshift+0xd8>)
 80126be:	482b      	ldr	r0, [pc, #172]	; (801276c <__lshift+0xdc>)
 80126c0:	f240 11d9 	movw	r1, #473	; 0x1d9
 80126c4:	f000 fbb8 	bl	8012e38 <__assert_func>
 80126c8:	3101      	adds	r1, #1
 80126ca:	005b      	lsls	r3, r3, #1
 80126cc:	e7ee      	b.n	80126ac <__lshift+0x1c>
 80126ce:	2300      	movs	r3, #0
 80126d0:	f100 0114 	add.w	r1, r0, #20
 80126d4:	f100 0210 	add.w	r2, r0, #16
 80126d8:	4618      	mov	r0, r3
 80126da:	4553      	cmp	r3, sl
 80126dc:	db37      	blt.n	801274e <__lshift+0xbe>
 80126de:	6920      	ldr	r0, [r4, #16]
 80126e0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80126e4:	f104 0314 	add.w	r3, r4, #20
 80126e8:	f019 091f 	ands.w	r9, r9, #31
 80126ec:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80126f0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80126f4:	d02f      	beq.n	8012756 <__lshift+0xc6>
 80126f6:	f1c9 0e20 	rsb	lr, r9, #32
 80126fa:	468a      	mov	sl, r1
 80126fc:	f04f 0c00 	mov.w	ip, #0
 8012700:	681a      	ldr	r2, [r3, #0]
 8012702:	fa02 f209 	lsl.w	r2, r2, r9
 8012706:	ea42 020c 	orr.w	r2, r2, ip
 801270a:	f84a 2b04 	str.w	r2, [sl], #4
 801270e:	f853 2b04 	ldr.w	r2, [r3], #4
 8012712:	4298      	cmp	r0, r3
 8012714:	fa22 fc0e 	lsr.w	ip, r2, lr
 8012718:	d8f2      	bhi.n	8012700 <__lshift+0x70>
 801271a:	1b03      	subs	r3, r0, r4
 801271c:	3b15      	subs	r3, #21
 801271e:	f023 0303 	bic.w	r3, r3, #3
 8012722:	3304      	adds	r3, #4
 8012724:	f104 0215 	add.w	r2, r4, #21
 8012728:	4290      	cmp	r0, r2
 801272a:	bf38      	it	cc
 801272c:	2304      	movcc	r3, #4
 801272e:	f841 c003 	str.w	ip, [r1, r3]
 8012732:	f1bc 0f00 	cmp.w	ip, #0
 8012736:	d001      	beq.n	801273c <__lshift+0xac>
 8012738:	f108 0602 	add.w	r6, r8, #2
 801273c:	3e01      	subs	r6, #1
 801273e:	4638      	mov	r0, r7
 8012740:	612e      	str	r6, [r5, #16]
 8012742:	4621      	mov	r1, r4
 8012744:	f7ff fdd2 	bl	80122ec <_Bfree>
 8012748:	4628      	mov	r0, r5
 801274a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801274e:	f842 0f04 	str.w	r0, [r2, #4]!
 8012752:	3301      	adds	r3, #1
 8012754:	e7c1      	b.n	80126da <__lshift+0x4a>
 8012756:	3904      	subs	r1, #4
 8012758:	f853 2b04 	ldr.w	r2, [r3], #4
 801275c:	f841 2f04 	str.w	r2, [r1, #4]!
 8012760:	4298      	cmp	r0, r3
 8012762:	d8f9      	bhi.n	8012758 <__lshift+0xc8>
 8012764:	e7ea      	b.n	801273c <__lshift+0xac>
 8012766:	bf00      	nop
 8012768:	08016137 	.word	0x08016137
 801276c:	08016148 	.word	0x08016148

08012770 <__mcmp>:
 8012770:	b530      	push	{r4, r5, lr}
 8012772:	6902      	ldr	r2, [r0, #16]
 8012774:	690c      	ldr	r4, [r1, #16]
 8012776:	1b12      	subs	r2, r2, r4
 8012778:	d10e      	bne.n	8012798 <__mcmp+0x28>
 801277a:	f100 0314 	add.w	r3, r0, #20
 801277e:	3114      	adds	r1, #20
 8012780:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8012784:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8012788:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801278c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8012790:	42a5      	cmp	r5, r4
 8012792:	d003      	beq.n	801279c <__mcmp+0x2c>
 8012794:	d305      	bcc.n	80127a2 <__mcmp+0x32>
 8012796:	2201      	movs	r2, #1
 8012798:	4610      	mov	r0, r2
 801279a:	bd30      	pop	{r4, r5, pc}
 801279c:	4283      	cmp	r3, r0
 801279e:	d3f3      	bcc.n	8012788 <__mcmp+0x18>
 80127a0:	e7fa      	b.n	8012798 <__mcmp+0x28>
 80127a2:	f04f 32ff 	mov.w	r2, #4294967295
 80127a6:	e7f7      	b.n	8012798 <__mcmp+0x28>

080127a8 <__mdiff>:
 80127a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80127ac:	460c      	mov	r4, r1
 80127ae:	4606      	mov	r6, r0
 80127b0:	4611      	mov	r1, r2
 80127b2:	4620      	mov	r0, r4
 80127b4:	4690      	mov	r8, r2
 80127b6:	f7ff ffdb 	bl	8012770 <__mcmp>
 80127ba:	1e05      	subs	r5, r0, #0
 80127bc:	d110      	bne.n	80127e0 <__mdiff+0x38>
 80127be:	4629      	mov	r1, r5
 80127c0:	4630      	mov	r0, r6
 80127c2:	f7ff fd53 	bl	801226c <_Balloc>
 80127c6:	b930      	cbnz	r0, 80127d6 <__mdiff+0x2e>
 80127c8:	4b3a      	ldr	r3, [pc, #232]	; (80128b4 <__mdiff+0x10c>)
 80127ca:	4602      	mov	r2, r0
 80127cc:	f240 2132 	movw	r1, #562	; 0x232
 80127d0:	4839      	ldr	r0, [pc, #228]	; (80128b8 <__mdiff+0x110>)
 80127d2:	f000 fb31 	bl	8012e38 <__assert_func>
 80127d6:	2301      	movs	r3, #1
 80127d8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80127dc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80127e0:	bfa4      	itt	ge
 80127e2:	4643      	movge	r3, r8
 80127e4:	46a0      	movge	r8, r4
 80127e6:	4630      	mov	r0, r6
 80127e8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80127ec:	bfa6      	itte	ge
 80127ee:	461c      	movge	r4, r3
 80127f0:	2500      	movge	r5, #0
 80127f2:	2501      	movlt	r5, #1
 80127f4:	f7ff fd3a 	bl	801226c <_Balloc>
 80127f8:	b920      	cbnz	r0, 8012804 <__mdiff+0x5c>
 80127fa:	4b2e      	ldr	r3, [pc, #184]	; (80128b4 <__mdiff+0x10c>)
 80127fc:	4602      	mov	r2, r0
 80127fe:	f44f 7110 	mov.w	r1, #576	; 0x240
 8012802:	e7e5      	b.n	80127d0 <__mdiff+0x28>
 8012804:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8012808:	6926      	ldr	r6, [r4, #16]
 801280a:	60c5      	str	r5, [r0, #12]
 801280c:	f104 0914 	add.w	r9, r4, #20
 8012810:	f108 0514 	add.w	r5, r8, #20
 8012814:	f100 0e14 	add.w	lr, r0, #20
 8012818:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801281c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8012820:	f108 0210 	add.w	r2, r8, #16
 8012824:	46f2      	mov	sl, lr
 8012826:	2100      	movs	r1, #0
 8012828:	f859 3b04 	ldr.w	r3, [r9], #4
 801282c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8012830:	fa1f f883 	uxth.w	r8, r3
 8012834:	fa11 f18b 	uxtah	r1, r1, fp
 8012838:	0c1b      	lsrs	r3, r3, #16
 801283a:	eba1 0808 	sub.w	r8, r1, r8
 801283e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8012842:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8012846:	fa1f f888 	uxth.w	r8, r8
 801284a:	1419      	asrs	r1, r3, #16
 801284c:	454e      	cmp	r6, r9
 801284e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8012852:	f84a 3b04 	str.w	r3, [sl], #4
 8012856:	d8e7      	bhi.n	8012828 <__mdiff+0x80>
 8012858:	1b33      	subs	r3, r6, r4
 801285a:	3b15      	subs	r3, #21
 801285c:	f023 0303 	bic.w	r3, r3, #3
 8012860:	3304      	adds	r3, #4
 8012862:	3415      	adds	r4, #21
 8012864:	42a6      	cmp	r6, r4
 8012866:	bf38      	it	cc
 8012868:	2304      	movcc	r3, #4
 801286a:	441d      	add	r5, r3
 801286c:	4473      	add	r3, lr
 801286e:	469e      	mov	lr, r3
 8012870:	462e      	mov	r6, r5
 8012872:	4566      	cmp	r6, ip
 8012874:	d30e      	bcc.n	8012894 <__mdiff+0xec>
 8012876:	f10c 0203 	add.w	r2, ip, #3
 801287a:	1b52      	subs	r2, r2, r5
 801287c:	f022 0203 	bic.w	r2, r2, #3
 8012880:	3d03      	subs	r5, #3
 8012882:	45ac      	cmp	ip, r5
 8012884:	bf38      	it	cc
 8012886:	2200      	movcc	r2, #0
 8012888:	441a      	add	r2, r3
 801288a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801288e:	b17b      	cbz	r3, 80128b0 <__mdiff+0x108>
 8012890:	6107      	str	r7, [r0, #16]
 8012892:	e7a3      	b.n	80127dc <__mdiff+0x34>
 8012894:	f856 8b04 	ldr.w	r8, [r6], #4
 8012898:	fa11 f288 	uxtah	r2, r1, r8
 801289c:	1414      	asrs	r4, r2, #16
 801289e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80128a2:	b292      	uxth	r2, r2
 80128a4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80128a8:	f84e 2b04 	str.w	r2, [lr], #4
 80128ac:	1421      	asrs	r1, r4, #16
 80128ae:	e7e0      	b.n	8012872 <__mdiff+0xca>
 80128b0:	3f01      	subs	r7, #1
 80128b2:	e7ea      	b.n	801288a <__mdiff+0xe2>
 80128b4:	08016137 	.word	0x08016137
 80128b8:	08016148 	.word	0x08016148

080128bc <__d2b>:
 80128bc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80128c0:	4689      	mov	r9, r1
 80128c2:	2101      	movs	r1, #1
 80128c4:	ec57 6b10 	vmov	r6, r7, d0
 80128c8:	4690      	mov	r8, r2
 80128ca:	f7ff fccf 	bl	801226c <_Balloc>
 80128ce:	4604      	mov	r4, r0
 80128d0:	b930      	cbnz	r0, 80128e0 <__d2b+0x24>
 80128d2:	4602      	mov	r2, r0
 80128d4:	4b25      	ldr	r3, [pc, #148]	; (801296c <__d2b+0xb0>)
 80128d6:	4826      	ldr	r0, [pc, #152]	; (8012970 <__d2b+0xb4>)
 80128d8:	f240 310a 	movw	r1, #778	; 0x30a
 80128dc:	f000 faac 	bl	8012e38 <__assert_func>
 80128e0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80128e4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80128e8:	bb35      	cbnz	r5, 8012938 <__d2b+0x7c>
 80128ea:	2e00      	cmp	r6, #0
 80128ec:	9301      	str	r3, [sp, #4]
 80128ee:	d028      	beq.n	8012942 <__d2b+0x86>
 80128f0:	4668      	mov	r0, sp
 80128f2:	9600      	str	r6, [sp, #0]
 80128f4:	f7ff fd82 	bl	80123fc <__lo0bits>
 80128f8:	9900      	ldr	r1, [sp, #0]
 80128fa:	b300      	cbz	r0, 801293e <__d2b+0x82>
 80128fc:	9a01      	ldr	r2, [sp, #4]
 80128fe:	f1c0 0320 	rsb	r3, r0, #32
 8012902:	fa02 f303 	lsl.w	r3, r2, r3
 8012906:	430b      	orrs	r3, r1
 8012908:	40c2      	lsrs	r2, r0
 801290a:	6163      	str	r3, [r4, #20]
 801290c:	9201      	str	r2, [sp, #4]
 801290e:	9b01      	ldr	r3, [sp, #4]
 8012910:	61a3      	str	r3, [r4, #24]
 8012912:	2b00      	cmp	r3, #0
 8012914:	bf14      	ite	ne
 8012916:	2202      	movne	r2, #2
 8012918:	2201      	moveq	r2, #1
 801291a:	6122      	str	r2, [r4, #16]
 801291c:	b1d5      	cbz	r5, 8012954 <__d2b+0x98>
 801291e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8012922:	4405      	add	r5, r0
 8012924:	f8c9 5000 	str.w	r5, [r9]
 8012928:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801292c:	f8c8 0000 	str.w	r0, [r8]
 8012930:	4620      	mov	r0, r4
 8012932:	b003      	add	sp, #12
 8012934:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012938:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801293c:	e7d5      	b.n	80128ea <__d2b+0x2e>
 801293e:	6161      	str	r1, [r4, #20]
 8012940:	e7e5      	b.n	801290e <__d2b+0x52>
 8012942:	a801      	add	r0, sp, #4
 8012944:	f7ff fd5a 	bl	80123fc <__lo0bits>
 8012948:	9b01      	ldr	r3, [sp, #4]
 801294a:	6163      	str	r3, [r4, #20]
 801294c:	2201      	movs	r2, #1
 801294e:	6122      	str	r2, [r4, #16]
 8012950:	3020      	adds	r0, #32
 8012952:	e7e3      	b.n	801291c <__d2b+0x60>
 8012954:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8012958:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801295c:	f8c9 0000 	str.w	r0, [r9]
 8012960:	6918      	ldr	r0, [r3, #16]
 8012962:	f7ff fd2b 	bl	80123bc <__hi0bits>
 8012966:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801296a:	e7df      	b.n	801292c <__d2b+0x70>
 801296c:	08016137 	.word	0x08016137
 8012970:	08016148 	.word	0x08016148

08012974 <_calloc_r>:
 8012974:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012976:	fba1 2402 	umull	r2, r4, r1, r2
 801297a:	b94c      	cbnz	r4, 8012990 <_calloc_r+0x1c>
 801297c:	4611      	mov	r1, r2
 801297e:	9201      	str	r2, [sp, #4]
 8012980:	f000 f87a 	bl	8012a78 <_malloc_r>
 8012984:	9a01      	ldr	r2, [sp, #4]
 8012986:	4605      	mov	r5, r0
 8012988:	b930      	cbnz	r0, 8012998 <_calloc_r+0x24>
 801298a:	4628      	mov	r0, r5
 801298c:	b003      	add	sp, #12
 801298e:	bd30      	pop	{r4, r5, pc}
 8012990:	220c      	movs	r2, #12
 8012992:	6002      	str	r2, [r0, #0]
 8012994:	2500      	movs	r5, #0
 8012996:	e7f8      	b.n	801298a <_calloc_r+0x16>
 8012998:	4621      	mov	r1, r4
 801299a:	f7fe f94f 	bl	8010c3c <memset>
 801299e:	e7f4      	b.n	801298a <_calloc_r+0x16>

080129a0 <_free_r>:
 80129a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80129a2:	2900      	cmp	r1, #0
 80129a4:	d044      	beq.n	8012a30 <_free_r+0x90>
 80129a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80129aa:	9001      	str	r0, [sp, #4]
 80129ac:	2b00      	cmp	r3, #0
 80129ae:	f1a1 0404 	sub.w	r4, r1, #4
 80129b2:	bfb8      	it	lt
 80129b4:	18e4      	addlt	r4, r4, r3
 80129b6:	f000 fa9b 	bl	8012ef0 <__malloc_lock>
 80129ba:	4a1e      	ldr	r2, [pc, #120]	; (8012a34 <_free_r+0x94>)
 80129bc:	9801      	ldr	r0, [sp, #4]
 80129be:	6813      	ldr	r3, [r2, #0]
 80129c0:	b933      	cbnz	r3, 80129d0 <_free_r+0x30>
 80129c2:	6063      	str	r3, [r4, #4]
 80129c4:	6014      	str	r4, [r2, #0]
 80129c6:	b003      	add	sp, #12
 80129c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80129cc:	f000 ba96 	b.w	8012efc <__malloc_unlock>
 80129d0:	42a3      	cmp	r3, r4
 80129d2:	d908      	bls.n	80129e6 <_free_r+0x46>
 80129d4:	6825      	ldr	r5, [r4, #0]
 80129d6:	1961      	adds	r1, r4, r5
 80129d8:	428b      	cmp	r3, r1
 80129da:	bf01      	itttt	eq
 80129dc:	6819      	ldreq	r1, [r3, #0]
 80129de:	685b      	ldreq	r3, [r3, #4]
 80129e0:	1949      	addeq	r1, r1, r5
 80129e2:	6021      	streq	r1, [r4, #0]
 80129e4:	e7ed      	b.n	80129c2 <_free_r+0x22>
 80129e6:	461a      	mov	r2, r3
 80129e8:	685b      	ldr	r3, [r3, #4]
 80129ea:	b10b      	cbz	r3, 80129f0 <_free_r+0x50>
 80129ec:	42a3      	cmp	r3, r4
 80129ee:	d9fa      	bls.n	80129e6 <_free_r+0x46>
 80129f0:	6811      	ldr	r1, [r2, #0]
 80129f2:	1855      	adds	r5, r2, r1
 80129f4:	42a5      	cmp	r5, r4
 80129f6:	d10b      	bne.n	8012a10 <_free_r+0x70>
 80129f8:	6824      	ldr	r4, [r4, #0]
 80129fa:	4421      	add	r1, r4
 80129fc:	1854      	adds	r4, r2, r1
 80129fe:	42a3      	cmp	r3, r4
 8012a00:	6011      	str	r1, [r2, #0]
 8012a02:	d1e0      	bne.n	80129c6 <_free_r+0x26>
 8012a04:	681c      	ldr	r4, [r3, #0]
 8012a06:	685b      	ldr	r3, [r3, #4]
 8012a08:	6053      	str	r3, [r2, #4]
 8012a0a:	4421      	add	r1, r4
 8012a0c:	6011      	str	r1, [r2, #0]
 8012a0e:	e7da      	b.n	80129c6 <_free_r+0x26>
 8012a10:	d902      	bls.n	8012a18 <_free_r+0x78>
 8012a12:	230c      	movs	r3, #12
 8012a14:	6003      	str	r3, [r0, #0]
 8012a16:	e7d6      	b.n	80129c6 <_free_r+0x26>
 8012a18:	6825      	ldr	r5, [r4, #0]
 8012a1a:	1961      	adds	r1, r4, r5
 8012a1c:	428b      	cmp	r3, r1
 8012a1e:	bf04      	itt	eq
 8012a20:	6819      	ldreq	r1, [r3, #0]
 8012a22:	685b      	ldreq	r3, [r3, #4]
 8012a24:	6063      	str	r3, [r4, #4]
 8012a26:	bf04      	itt	eq
 8012a28:	1949      	addeq	r1, r1, r5
 8012a2a:	6021      	streq	r1, [r4, #0]
 8012a2c:	6054      	str	r4, [r2, #4]
 8012a2e:	e7ca      	b.n	80129c6 <_free_r+0x26>
 8012a30:	b003      	add	sp, #12
 8012a32:	bd30      	pop	{r4, r5, pc}
 8012a34:	20006954 	.word	0x20006954

08012a38 <sbrk_aligned>:
 8012a38:	b570      	push	{r4, r5, r6, lr}
 8012a3a:	4e0e      	ldr	r6, [pc, #56]	; (8012a74 <sbrk_aligned+0x3c>)
 8012a3c:	460c      	mov	r4, r1
 8012a3e:	6831      	ldr	r1, [r6, #0]
 8012a40:	4605      	mov	r5, r0
 8012a42:	b911      	cbnz	r1, 8012a4a <sbrk_aligned+0x12>
 8012a44:	f000 f9e8 	bl	8012e18 <_sbrk_r>
 8012a48:	6030      	str	r0, [r6, #0]
 8012a4a:	4621      	mov	r1, r4
 8012a4c:	4628      	mov	r0, r5
 8012a4e:	f000 f9e3 	bl	8012e18 <_sbrk_r>
 8012a52:	1c43      	adds	r3, r0, #1
 8012a54:	d00a      	beq.n	8012a6c <sbrk_aligned+0x34>
 8012a56:	1cc4      	adds	r4, r0, #3
 8012a58:	f024 0403 	bic.w	r4, r4, #3
 8012a5c:	42a0      	cmp	r0, r4
 8012a5e:	d007      	beq.n	8012a70 <sbrk_aligned+0x38>
 8012a60:	1a21      	subs	r1, r4, r0
 8012a62:	4628      	mov	r0, r5
 8012a64:	f000 f9d8 	bl	8012e18 <_sbrk_r>
 8012a68:	3001      	adds	r0, #1
 8012a6a:	d101      	bne.n	8012a70 <sbrk_aligned+0x38>
 8012a6c:	f04f 34ff 	mov.w	r4, #4294967295
 8012a70:	4620      	mov	r0, r4
 8012a72:	bd70      	pop	{r4, r5, r6, pc}
 8012a74:	20006958 	.word	0x20006958

08012a78 <_malloc_r>:
 8012a78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012a7c:	1ccd      	adds	r5, r1, #3
 8012a7e:	f025 0503 	bic.w	r5, r5, #3
 8012a82:	3508      	adds	r5, #8
 8012a84:	2d0c      	cmp	r5, #12
 8012a86:	bf38      	it	cc
 8012a88:	250c      	movcc	r5, #12
 8012a8a:	2d00      	cmp	r5, #0
 8012a8c:	4607      	mov	r7, r0
 8012a8e:	db01      	blt.n	8012a94 <_malloc_r+0x1c>
 8012a90:	42a9      	cmp	r1, r5
 8012a92:	d905      	bls.n	8012aa0 <_malloc_r+0x28>
 8012a94:	230c      	movs	r3, #12
 8012a96:	603b      	str	r3, [r7, #0]
 8012a98:	2600      	movs	r6, #0
 8012a9a:	4630      	mov	r0, r6
 8012a9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012aa0:	4e2e      	ldr	r6, [pc, #184]	; (8012b5c <_malloc_r+0xe4>)
 8012aa2:	f000 fa25 	bl	8012ef0 <__malloc_lock>
 8012aa6:	6833      	ldr	r3, [r6, #0]
 8012aa8:	461c      	mov	r4, r3
 8012aaa:	bb34      	cbnz	r4, 8012afa <_malloc_r+0x82>
 8012aac:	4629      	mov	r1, r5
 8012aae:	4638      	mov	r0, r7
 8012ab0:	f7ff ffc2 	bl	8012a38 <sbrk_aligned>
 8012ab4:	1c43      	adds	r3, r0, #1
 8012ab6:	4604      	mov	r4, r0
 8012ab8:	d14d      	bne.n	8012b56 <_malloc_r+0xde>
 8012aba:	6834      	ldr	r4, [r6, #0]
 8012abc:	4626      	mov	r6, r4
 8012abe:	2e00      	cmp	r6, #0
 8012ac0:	d140      	bne.n	8012b44 <_malloc_r+0xcc>
 8012ac2:	6823      	ldr	r3, [r4, #0]
 8012ac4:	4631      	mov	r1, r6
 8012ac6:	4638      	mov	r0, r7
 8012ac8:	eb04 0803 	add.w	r8, r4, r3
 8012acc:	f000 f9a4 	bl	8012e18 <_sbrk_r>
 8012ad0:	4580      	cmp	r8, r0
 8012ad2:	d13a      	bne.n	8012b4a <_malloc_r+0xd2>
 8012ad4:	6821      	ldr	r1, [r4, #0]
 8012ad6:	3503      	adds	r5, #3
 8012ad8:	1a6d      	subs	r5, r5, r1
 8012ada:	f025 0503 	bic.w	r5, r5, #3
 8012ade:	3508      	adds	r5, #8
 8012ae0:	2d0c      	cmp	r5, #12
 8012ae2:	bf38      	it	cc
 8012ae4:	250c      	movcc	r5, #12
 8012ae6:	4629      	mov	r1, r5
 8012ae8:	4638      	mov	r0, r7
 8012aea:	f7ff ffa5 	bl	8012a38 <sbrk_aligned>
 8012aee:	3001      	adds	r0, #1
 8012af0:	d02b      	beq.n	8012b4a <_malloc_r+0xd2>
 8012af2:	6823      	ldr	r3, [r4, #0]
 8012af4:	442b      	add	r3, r5
 8012af6:	6023      	str	r3, [r4, #0]
 8012af8:	e00e      	b.n	8012b18 <_malloc_r+0xa0>
 8012afa:	6822      	ldr	r2, [r4, #0]
 8012afc:	1b52      	subs	r2, r2, r5
 8012afe:	d41e      	bmi.n	8012b3e <_malloc_r+0xc6>
 8012b00:	2a0b      	cmp	r2, #11
 8012b02:	d916      	bls.n	8012b32 <_malloc_r+0xba>
 8012b04:	1961      	adds	r1, r4, r5
 8012b06:	42a3      	cmp	r3, r4
 8012b08:	6025      	str	r5, [r4, #0]
 8012b0a:	bf18      	it	ne
 8012b0c:	6059      	strne	r1, [r3, #4]
 8012b0e:	6863      	ldr	r3, [r4, #4]
 8012b10:	bf08      	it	eq
 8012b12:	6031      	streq	r1, [r6, #0]
 8012b14:	5162      	str	r2, [r4, r5]
 8012b16:	604b      	str	r3, [r1, #4]
 8012b18:	4638      	mov	r0, r7
 8012b1a:	f104 060b 	add.w	r6, r4, #11
 8012b1e:	f000 f9ed 	bl	8012efc <__malloc_unlock>
 8012b22:	f026 0607 	bic.w	r6, r6, #7
 8012b26:	1d23      	adds	r3, r4, #4
 8012b28:	1af2      	subs	r2, r6, r3
 8012b2a:	d0b6      	beq.n	8012a9a <_malloc_r+0x22>
 8012b2c:	1b9b      	subs	r3, r3, r6
 8012b2e:	50a3      	str	r3, [r4, r2]
 8012b30:	e7b3      	b.n	8012a9a <_malloc_r+0x22>
 8012b32:	6862      	ldr	r2, [r4, #4]
 8012b34:	42a3      	cmp	r3, r4
 8012b36:	bf0c      	ite	eq
 8012b38:	6032      	streq	r2, [r6, #0]
 8012b3a:	605a      	strne	r2, [r3, #4]
 8012b3c:	e7ec      	b.n	8012b18 <_malloc_r+0xa0>
 8012b3e:	4623      	mov	r3, r4
 8012b40:	6864      	ldr	r4, [r4, #4]
 8012b42:	e7b2      	b.n	8012aaa <_malloc_r+0x32>
 8012b44:	4634      	mov	r4, r6
 8012b46:	6876      	ldr	r6, [r6, #4]
 8012b48:	e7b9      	b.n	8012abe <_malloc_r+0x46>
 8012b4a:	230c      	movs	r3, #12
 8012b4c:	603b      	str	r3, [r7, #0]
 8012b4e:	4638      	mov	r0, r7
 8012b50:	f000 f9d4 	bl	8012efc <__malloc_unlock>
 8012b54:	e7a1      	b.n	8012a9a <_malloc_r+0x22>
 8012b56:	6025      	str	r5, [r4, #0]
 8012b58:	e7de      	b.n	8012b18 <_malloc_r+0xa0>
 8012b5a:	bf00      	nop
 8012b5c:	20006954 	.word	0x20006954

08012b60 <__ssputs_r>:
 8012b60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012b64:	688e      	ldr	r6, [r1, #8]
 8012b66:	429e      	cmp	r6, r3
 8012b68:	4682      	mov	sl, r0
 8012b6a:	460c      	mov	r4, r1
 8012b6c:	4690      	mov	r8, r2
 8012b6e:	461f      	mov	r7, r3
 8012b70:	d838      	bhi.n	8012be4 <__ssputs_r+0x84>
 8012b72:	898a      	ldrh	r2, [r1, #12]
 8012b74:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8012b78:	d032      	beq.n	8012be0 <__ssputs_r+0x80>
 8012b7a:	6825      	ldr	r5, [r4, #0]
 8012b7c:	6909      	ldr	r1, [r1, #16]
 8012b7e:	eba5 0901 	sub.w	r9, r5, r1
 8012b82:	6965      	ldr	r5, [r4, #20]
 8012b84:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012b88:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012b8c:	3301      	adds	r3, #1
 8012b8e:	444b      	add	r3, r9
 8012b90:	106d      	asrs	r5, r5, #1
 8012b92:	429d      	cmp	r5, r3
 8012b94:	bf38      	it	cc
 8012b96:	461d      	movcc	r5, r3
 8012b98:	0553      	lsls	r3, r2, #21
 8012b9a:	d531      	bpl.n	8012c00 <__ssputs_r+0xa0>
 8012b9c:	4629      	mov	r1, r5
 8012b9e:	f7ff ff6b 	bl	8012a78 <_malloc_r>
 8012ba2:	4606      	mov	r6, r0
 8012ba4:	b950      	cbnz	r0, 8012bbc <__ssputs_r+0x5c>
 8012ba6:	230c      	movs	r3, #12
 8012ba8:	f8ca 3000 	str.w	r3, [sl]
 8012bac:	89a3      	ldrh	r3, [r4, #12]
 8012bae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012bb2:	81a3      	strh	r3, [r4, #12]
 8012bb4:	f04f 30ff 	mov.w	r0, #4294967295
 8012bb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012bbc:	6921      	ldr	r1, [r4, #16]
 8012bbe:	464a      	mov	r2, r9
 8012bc0:	f7fe f82e 	bl	8010c20 <memcpy>
 8012bc4:	89a3      	ldrh	r3, [r4, #12]
 8012bc6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8012bca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012bce:	81a3      	strh	r3, [r4, #12]
 8012bd0:	6126      	str	r6, [r4, #16]
 8012bd2:	6165      	str	r5, [r4, #20]
 8012bd4:	444e      	add	r6, r9
 8012bd6:	eba5 0509 	sub.w	r5, r5, r9
 8012bda:	6026      	str	r6, [r4, #0]
 8012bdc:	60a5      	str	r5, [r4, #8]
 8012bde:	463e      	mov	r6, r7
 8012be0:	42be      	cmp	r6, r7
 8012be2:	d900      	bls.n	8012be6 <__ssputs_r+0x86>
 8012be4:	463e      	mov	r6, r7
 8012be6:	6820      	ldr	r0, [r4, #0]
 8012be8:	4632      	mov	r2, r6
 8012bea:	4641      	mov	r1, r8
 8012bec:	f000 f966 	bl	8012ebc <memmove>
 8012bf0:	68a3      	ldr	r3, [r4, #8]
 8012bf2:	1b9b      	subs	r3, r3, r6
 8012bf4:	60a3      	str	r3, [r4, #8]
 8012bf6:	6823      	ldr	r3, [r4, #0]
 8012bf8:	4433      	add	r3, r6
 8012bfa:	6023      	str	r3, [r4, #0]
 8012bfc:	2000      	movs	r0, #0
 8012bfe:	e7db      	b.n	8012bb8 <__ssputs_r+0x58>
 8012c00:	462a      	mov	r2, r5
 8012c02:	f000 f981 	bl	8012f08 <_realloc_r>
 8012c06:	4606      	mov	r6, r0
 8012c08:	2800      	cmp	r0, #0
 8012c0a:	d1e1      	bne.n	8012bd0 <__ssputs_r+0x70>
 8012c0c:	6921      	ldr	r1, [r4, #16]
 8012c0e:	4650      	mov	r0, sl
 8012c10:	f7ff fec6 	bl	80129a0 <_free_r>
 8012c14:	e7c7      	b.n	8012ba6 <__ssputs_r+0x46>
	...

08012c18 <_svfiprintf_r>:
 8012c18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c1c:	4698      	mov	r8, r3
 8012c1e:	898b      	ldrh	r3, [r1, #12]
 8012c20:	061b      	lsls	r3, r3, #24
 8012c22:	b09d      	sub	sp, #116	; 0x74
 8012c24:	4607      	mov	r7, r0
 8012c26:	460d      	mov	r5, r1
 8012c28:	4614      	mov	r4, r2
 8012c2a:	d50e      	bpl.n	8012c4a <_svfiprintf_r+0x32>
 8012c2c:	690b      	ldr	r3, [r1, #16]
 8012c2e:	b963      	cbnz	r3, 8012c4a <_svfiprintf_r+0x32>
 8012c30:	2140      	movs	r1, #64	; 0x40
 8012c32:	f7ff ff21 	bl	8012a78 <_malloc_r>
 8012c36:	6028      	str	r0, [r5, #0]
 8012c38:	6128      	str	r0, [r5, #16]
 8012c3a:	b920      	cbnz	r0, 8012c46 <_svfiprintf_r+0x2e>
 8012c3c:	230c      	movs	r3, #12
 8012c3e:	603b      	str	r3, [r7, #0]
 8012c40:	f04f 30ff 	mov.w	r0, #4294967295
 8012c44:	e0d1      	b.n	8012dea <_svfiprintf_r+0x1d2>
 8012c46:	2340      	movs	r3, #64	; 0x40
 8012c48:	616b      	str	r3, [r5, #20]
 8012c4a:	2300      	movs	r3, #0
 8012c4c:	9309      	str	r3, [sp, #36]	; 0x24
 8012c4e:	2320      	movs	r3, #32
 8012c50:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012c54:	f8cd 800c 	str.w	r8, [sp, #12]
 8012c58:	2330      	movs	r3, #48	; 0x30
 8012c5a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8012e04 <_svfiprintf_r+0x1ec>
 8012c5e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012c62:	f04f 0901 	mov.w	r9, #1
 8012c66:	4623      	mov	r3, r4
 8012c68:	469a      	mov	sl, r3
 8012c6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012c6e:	b10a      	cbz	r2, 8012c74 <_svfiprintf_r+0x5c>
 8012c70:	2a25      	cmp	r2, #37	; 0x25
 8012c72:	d1f9      	bne.n	8012c68 <_svfiprintf_r+0x50>
 8012c74:	ebba 0b04 	subs.w	fp, sl, r4
 8012c78:	d00b      	beq.n	8012c92 <_svfiprintf_r+0x7a>
 8012c7a:	465b      	mov	r3, fp
 8012c7c:	4622      	mov	r2, r4
 8012c7e:	4629      	mov	r1, r5
 8012c80:	4638      	mov	r0, r7
 8012c82:	f7ff ff6d 	bl	8012b60 <__ssputs_r>
 8012c86:	3001      	adds	r0, #1
 8012c88:	f000 80aa 	beq.w	8012de0 <_svfiprintf_r+0x1c8>
 8012c8c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012c8e:	445a      	add	r2, fp
 8012c90:	9209      	str	r2, [sp, #36]	; 0x24
 8012c92:	f89a 3000 	ldrb.w	r3, [sl]
 8012c96:	2b00      	cmp	r3, #0
 8012c98:	f000 80a2 	beq.w	8012de0 <_svfiprintf_r+0x1c8>
 8012c9c:	2300      	movs	r3, #0
 8012c9e:	f04f 32ff 	mov.w	r2, #4294967295
 8012ca2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012ca6:	f10a 0a01 	add.w	sl, sl, #1
 8012caa:	9304      	str	r3, [sp, #16]
 8012cac:	9307      	str	r3, [sp, #28]
 8012cae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012cb2:	931a      	str	r3, [sp, #104]	; 0x68
 8012cb4:	4654      	mov	r4, sl
 8012cb6:	2205      	movs	r2, #5
 8012cb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012cbc:	4851      	ldr	r0, [pc, #324]	; (8012e04 <_svfiprintf_r+0x1ec>)
 8012cbe:	f7ed fa8f 	bl	80001e0 <memchr>
 8012cc2:	9a04      	ldr	r2, [sp, #16]
 8012cc4:	b9d8      	cbnz	r0, 8012cfe <_svfiprintf_r+0xe6>
 8012cc6:	06d0      	lsls	r0, r2, #27
 8012cc8:	bf44      	itt	mi
 8012cca:	2320      	movmi	r3, #32
 8012ccc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012cd0:	0711      	lsls	r1, r2, #28
 8012cd2:	bf44      	itt	mi
 8012cd4:	232b      	movmi	r3, #43	; 0x2b
 8012cd6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012cda:	f89a 3000 	ldrb.w	r3, [sl]
 8012cde:	2b2a      	cmp	r3, #42	; 0x2a
 8012ce0:	d015      	beq.n	8012d0e <_svfiprintf_r+0xf6>
 8012ce2:	9a07      	ldr	r2, [sp, #28]
 8012ce4:	4654      	mov	r4, sl
 8012ce6:	2000      	movs	r0, #0
 8012ce8:	f04f 0c0a 	mov.w	ip, #10
 8012cec:	4621      	mov	r1, r4
 8012cee:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012cf2:	3b30      	subs	r3, #48	; 0x30
 8012cf4:	2b09      	cmp	r3, #9
 8012cf6:	d94e      	bls.n	8012d96 <_svfiprintf_r+0x17e>
 8012cf8:	b1b0      	cbz	r0, 8012d28 <_svfiprintf_r+0x110>
 8012cfa:	9207      	str	r2, [sp, #28]
 8012cfc:	e014      	b.n	8012d28 <_svfiprintf_r+0x110>
 8012cfe:	eba0 0308 	sub.w	r3, r0, r8
 8012d02:	fa09 f303 	lsl.w	r3, r9, r3
 8012d06:	4313      	orrs	r3, r2
 8012d08:	9304      	str	r3, [sp, #16]
 8012d0a:	46a2      	mov	sl, r4
 8012d0c:	e7d2      	b.n	8012cb4 <_svfiprintf_r+0x9c>
 8012d0e:	9b03      	ldr	r3, [sp, #12]
 8012d10:	1d19      	adds	r1, r3, #4
 8012d12:	681b      	ldr	r3, [r3, #0]
 8012d14:	9103      	str	r1, [sp, #12]
 8012d16:	2b00      	cmp	r3, #0
 8012d18:	bfbb      	ittet	lt
 8012d1a:	425b      	neglt	r3, r3
 8012d1c:	f042 0202 	orrlt.w	r2, r2, #2
 8012d20:	9307      	strge	r3, [sp, #28]
 8012d22:	9307      	strlt	r3, [sp, #28]
 8012d24:	bfb8      	it	lt
 8012d26:	9204      	strlt	r2, [sp, #16]
 8012d28:	7823      	ldrb	r3, [r4, #0]
 8012d2a:	2b2e      	cmp	r3, #46	; 0x2e
 8012d2c:	d10c      	bne.n	8012d48 <_svfiprintf_r+0x130>
 8012d2e:	7863      	ldrb	r3, [r4, #1]
 8012d30:	2b2a      	cmp	r3, #42	; 0x2a
 8012d32:	d135      	bne.n	8012da0 <_svfiprintf_r+0x188>
 8012d34:	9b03      	ldr	r3, [sp, #12]
 8012d36:	1d1a      	adds	r2, r3, #4
 8012d38:	681b      	ldr	r3, [r3, #0]
 8012d3a:	9203      	str	r2, [sp, #12]
 8012d3c:	2b00      	cmp	r3, #0
 8012d3e:	bfb8      	it	lt
 8012d40:	f04f 33ff 	movlt.w	r3, #4294967295
 8012d44:	3402      	adds	r4, #2
 8012d46:	9305      	str	r3, [sp, #20]
 8012d48:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8012e14 <_svfiprintf_r+0x1fc>
 8012d4c:	7821      	ldrb	r1, [r4, #0]
 8012d4e:	2203      	movs	r2, #3
 8012d50:	4650      	mov	r0, sl
 8012d52:	f7ed fa45 	bl	80001e0 <memchr>
 8012d56:	b140      	cbz	r0, 8012d6a <_svfiprintf_r+0x152>
 8012d58:	2340      	movs	r3, #64	; 0x40
 8012d5a:	eba0 000a 	sub.w	r0, r0, sl
 8012d5e:	fa03 f000 	lsl.w	r0, r3, r0
 8012d62:	9b04      	ldr	r3, [sp, #16]
 8012d64:	4303      	orrs	r3, r0
 8012d66:	3401      	adds	r4, #1
 8012d68:	9304      	str	r3, [sp, #16]
 8012d6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012d6e:	4826      	ldr	r0, [pc, #152]	; (8012e08 <_svfiprintf_r+0x1f0>)
 8012d70:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012d74:	2206      	movs	r2, #6
 8012d76:	f7ed fa33 	bl	80001e0 <memchr>
 8012d7a:	2800      	cmp	r0, #0
 8012d7c:	d038      	beq.n	8012df0 <_svfiprintf_r+0x1d8>
 8012d7e:	4b23      	ldr	r3, [pc, #140]	; (8012e0c <_svfiprintf_r+0x1f4>)
 8012d80:	bb1b      	cbnz	r3, 8012dca <_svfiprintf_r+0x1b2>
 8012d82:	9b03      	ldr	r3, [sp, #12]
 8012d84:	3307      	adds	r3, #7
 8012d86:	f023 0307 	bic.w	r3, r3, #7
 8012d8a:	3308      	adds	r3, #8
 8012d8c:	9303      	str	r3, [sp, #12]
 8012d8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012d90:	4433      	add	r3, r6
 8012d92:	9309      	str	r3, [sp, #36]	; 0x24
 8012d94:	e767      	b.n	8012c66 <_svfiprintf_r+0x4e>
 8012d96:	fb0c 3202 	mla	r2, ip, r2, r3
 8012d9a:	460c      	mov	r4, r1
 8012d9c:	2001      	movs	r0, #1
 8012d9e:	e7a5      	b.n	8012cec <_svfiprintf_r+0xd4>
 8012da0:	2300      	movs	r3, #0
 8012da2:	3401      	adds	r4, #1
 8012da4:	9305      	str	r3, [sp, #20]
 8012da6:	4619      	mov	r1, r3
 8012da8:	f04f 0c0a 	mov.w	ip, #10
 8012dac:	4620      	mov	r0, r4
 8012dae:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012db2:	3a30      	subs	r2, #48	; 0x30
 8012db4:	2a09      	cmp	r2, #9
 8012db6:	d903      	bls.n	8012dc0 <_svfiprintf_r+0x1a8>
 8012db8:	2b00      	cmp	r3, #0
 8012dba:	d0c5      	beq.n	8012d48 <_svfiprintf_r+0x130>
 8012dbc:	9105      	str	r1, [sp, #20]
 8012dbe:	e7c3      	b.n	8012d48 <_svfiprintf_r+0x130>
 8012dc0:	fb0c 2101 	mla	r1, ip, r1, r2
 8012dc4:	4604      	mov	r4, r0
 8012dc6:	2301      	movs	r3, #1
 8012dc8:	e7f0      	b.n	8012dac <_svfiprintf_r+0x194>
 8012dca:	ab03      	add	r3, sp, #12
 8012dcc:	9300      	str	r3, [sp, #0]
 8012dce:	462a      	mov	r2, r5
 8012dd0:	4b0f      	ldr	r3, [pc, #60]	; (8012e10 <_svfiprintf_r+0x1f8>)
 8012dd2:	a904      	add	r1, sp, #16
 8012dd4:	4638      	mov	r0, r7
 8012dd6:	f7fd ffd9 	bl	8010d8c <_printf_float>
 8012dda:	1c42      	adds	r2, r0, #1
 8012ddc:	4606      	mov	r6, r0
 8012dde:	d1d6      	bne.n	8012d8e <_svfiprintf_r+0x176>
 8012de0:	89ab      	ldrh	r3, [r5, #12]
 8012de2:	065b      	lsls	r3, r3, #25
 8012de4:	f53f af2c 	bmi.w	8012c40 <_svfiprintf_r+0x28>
 8012de8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012dea:	b01d      	add	sp, #116	; 0x74
 8012dec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012df0:	ab03      	add	r3, sp, #12
 8012df2:	9300      	str	r3, [sp, #0]
 8012df4:	462a      	mov	r2, r5
 8012df6:	4b06      	ldr	r3, [pc, #24]	; (8012e10 <_svfiprintf_r+0x1f8>)
 8012df8:	a904      	add	r1, sp, #16
 8012dfa:	4638      	mov	r0, r7
 8012dfc:	f7fe fa6a 	bl	80112d4 <_printf_i>
 8012e00:	e7eb      	b.n	8012dda <_svfiprintf_r+0x1c2>
 8012e02:	bf00      	nop
 8012e04:	080162a4 	.word	0x080162a4
 8012e08:	080162ae 	.word	0x080162ae
 8012e0c:	08010d8d 	.word	0x08010d8d
 8012e10:	08012b61 	.word	0x08012b61
 8012e14:	080162aa 	.word	0x080162aa

08012e18 <_sbrk_r>:
 8012e18:	b538      	push	{r3, r4, r5, lr}
 8012e1a:	4d06      	ldr	r5, [pc, #24]	; (8012e34 <_sbrk_r+0x1c>)
 8012e1c:	2300      	movs	r3, #0
 8012e1e:	4604      	mov	r4, r0
 8012e20:	4608      	mov	r0, r1
 8012e22:	602b      	str	r3, [r5, #0]
 8012e24:	f7f1 fb30 	bl	8004488 <_sbrk>
 8012e28:	1c43      	adds	r3, r0, #1
 8012e2a:	d102      	bne.n	8012e32 <_sbrk_r+0x1a>
 8012e2c:	682b      	ldr	r3, [r5, #0]
 8012e2e:	b103      	cbz	r3, 8012e32 <_sbrk_r+0x1a>
 8012e30:	6023      	str	r3, [r4, #0]
 8012e32:	bd38      	pop	{r3, r4, r5, pc}
 8012e34:	2000695c 	.word	0x2000695c

08012e38 <__assert_func>:
 8012e38:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012e3a:	4614      	mov	r4, r2
 8012e3c:	461a      	mov	r2, r3
 8012e3e:	4b09      	ldr	r3, [pc, #36]	; (8012e64 <__assert_func+0x2c>)
 8012e40:	681b      	ldr	r3, [r3, #0]
 8012e42:	4605      	mov	r5, r0
 8012e44:	68d8      	ldr	r0, [r3, #12]
 8012e46:	b14c      	cbz	r4, 8012e5c <__assert_func+0x24>
 8012e48:	4b07      	ldr	r3, [pc, #28]	; (8012e68 <__assert_func+0x30>)
 8012e4a:	9100      	str	r1, [sp, #0]
 8012e4c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012e50:	4906      	ldr	r1, [pc, #24]	; (8012e6c <__assert_func+0x34>)
 8012e52:	462b      	mov	r3, r5
 8012e54:	f000 f80e 	bl	8012e74 <fiprintf>
 8012e58:	f000 faac 	bl	80133b4 <abort>
 8012e5c:	4b04      	ldr	r3, [pc, #16]	; (8012e70 <__assert_func+0x38>)
 8012e5e:	461c      	mov	r4, r3
 8012e60:	e7f3      	b.n	8012e4a <__assert_func+0x12>
 8012e62:	bf00      	nop
 8012e64:	20000078 	.word	0x20000078
 8012e68:	080162b5 	.word	0x080162b5
 8012e6c:	080162c2 	.word	0x080162c2
 8012e70:	080162f0 	.word	0x080162f0

08012e74 <fiprintf>:
 8012e74:	b40e      	push	{r1, r2, r3}
 8012e76:	b503      	push	{r0, r1, lr}
 8012e78:	4601      	mov	r1, r0
 8012e7a:	ab03      	add	r3, sp, #12
 8012e7c:	4805      	ldr	r0, [pc, #20]	; (8012e94 <fiprintf+0x20>)
 8012e7e:	f853 2b04 	ldr.w	r2, [r3], #4
 8012e82:	6800      	ldr	r0, [r0, #0]
 8012e84:	9301      	str	r3, [sp, #4]
 8012e86:	f000 f897 	bl	8012fb8 <_vfiprintf_r>
 8012e8a:	b002      	add	sp, #8
 8012e8c:	f85d eb04 	ldr.w	lr, [sp], #4
 8012e90:	b003      	add	sp, #12
 8012e92:	4770      	bx	lr
 8012e94:	20000078 	.word	0x20000078

08012e98 <__ascii_mbtowc>:
 8012e98:	b082      	sub	sp, #8
 8012e9a:	b901      	cbnz	r1, 8012e9e <__ascii_mbtowc+0x6>
 8012e9c:	a901      	add	r1, sp, #4
 8012e9e:	b142      	cbz	r2, 8012eb2 <__ascii_mbtowc+0x1a>
 8012ea0:	b14b      	cbz	r3, 8012eb6 <__ascii_mbtowc+0x1e>
 8012ea2:	7813      	ldrb	r3, [r2, #0]
 8012ea4:	600b      	str	r3, [r1, #0]
 8012ea6:	7812      	ldrb	r2, [r2, #0]
 8012ea8:	1e10      	subs	r0, r2, #0
 8012eaa:	bf18      	it	ne
 8012eac:	2001      	movne	r0, #1
 8012eae:	b002      	add	sp, #8
 8012eb0:	4770      	bx	lr
 8012eb2:	4610      	mov	r0, r2
 8012eb4:	e7fb      	b.n	8012eae <__ascii_mbtowc+0x16>
 8012eb6:	f06f 0001 	mvn.w	r0, #1
 8012eba:	e7f8      	b.n	8012eae <__ascii_mbtowc+0x16>

08012ebc <memmove>:
 8012ebc:	4288      	cmp	r0, r1
 8012ebe:	b510      	push	{r4, lr}
 8012ec0:	eb01 0402 	add.w	r4, r1, r2
 8012ec4:	d902      	bls.n	8012ecc <memmove+0x10>
 8012ec6:	4284      	cmp	r4, r0
 8012ec8:	4623      	mov	r3, r4
 8012eca:	d807      	bhi.n	8012edc <memmove+0x20>
 8012ecc:	1e43      	subs	r3, r0, #1
 8012ece:	42a1      	cmp	r1, r4
 8012ed0:	d008      	beq.n	8012ee4 <memmove+0x28>
 8012ed2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012ed6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012eda:	e7f8      	b.n	8012ece <memmove+0x12>
 8012edc:	4402      	add	r2, r0
 8012ede:	4601      	mov	r1, r0
 8012ee0:	428a      	cmp	r2, r1
 8012ee2:	d100      	bne.n	8012ee6 <memmove+0x2a>
 8012ee4:	bd10      	pop	{r4, pc}
 8012ee6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012eea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012eee:	e7f7      	b.n	8012ee0 <memmove+0x24>

08012ef0 <__malloc_lock>:
 8012ef0:	4801      	ldr	r0, [pc, #4]	; (8012ef8 <__malloc_lock+0x8>)
 8012ef2:	f000 bc1f 	b.w	8013734 <__retarget_lock_acquire_recursive>
 8012ef6:	bf00      	nop
 8012ef8:	20006960 	.word	0x20006960

08012efc <__malloc_unlock>:
 8012efc:	4801      	ldr	r0, [pc, #4]	; (8012f04 <__malloc_unlock+0x8>)
 8012efe:	f000 bc1a 	b.w	8013736 <__retarget_lock_release_recursive>
 8012f02:	bf00      	nop
 8012f04:	20006960 	.word	0x20006960

08012f08 <_realloc_r>:
 8012f08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012f0c:	4680      	mov	r8, r0
 8012f0e:	4614      	mov	r4, r2
 8012f10:	460e      	mov	r6, r1
 8012f12:	b921      	cbnz	r1, 8012f1e <_realloc_r+0x16>
 8012f14:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012f18:	4611      	mov	r1, r2
 8012f1a:	f7ff bdad 	b.w	8012a78 <_malloc_r>
 8012f1e:	b92a      	cbnz	r2, 8012f2c <_realloc_r+0x24>
 8012f20:	f7ff fd3e 	bl	80129a0 <_free_r>
 8012f24:	4625      	mov	r5, r4
 8012f26:	4628      	mov	r0, r5
 8012f28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012f2c:	f000 fc6a 	bl	8013804 <_malloc_usable_size_r>
 8012f30:	4284      	cmp	r4, r0
 8012f32:	4607      	mov	r7, r0
 8012f34:	d802      	bhi.n	8012f3c <_realloc_r+0x34>
 8012f36:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8012f3a:	d812      	bhi.n	8012f62 <_realloc_r+0x5a>
 8012f3c:	4621      	mov	r1, r4
 8012f3e:	4640      	mov	r0, r8
 8012f40:	f7ff fd9a 	bl	8012a78 <_malloc_r>
 8012f44:	4605      	mov	r5, r0
 8012f46:	2800      	cmp	r0, #0
 8012f48:	d0ed      	beq.n	8012f26 <_realloc_r+0x1e>
 8012f4a:	42bc      	cmp	r4, r7
 8012f4c:	4622      	mov	r2, r4
 8012f4e:	4631      	mov	r1, r6
 8012f50:	bf28      	it	cs
 8012f52:	463a      	movcs	r2, r7
 8012f54:	f7fd fe64 	bl	8010c20 <memcpy>
 8012f58:	4631      	mov	r1, r6
 8012f5a:	4640      	mov	r0, r8
 8012f5c:	f7ff fd20 	bl	80129a0 <_free_r>
 8012f60:	e7e1      	b.n	8012f26 <_realloc_r+0x1e>
 8012f62:	4635      	mov	r5, r6
 8012f64:	e7df      	b.n	8012f26 <_realloc_r+0x1e>

08012f66 <__sfputc_r>:
 8012f66:	6893      	ldr	r3, [r2, #8]
 8012f68:	3b01      	subs	r3, #1
 8012f6a:	2b00      	cmp	r3, #0
 8012f6c:	b410      	push	{r4}
 8012f6e:	6093      	str	r3, [r2, #8]
 8012f70:	da08      	bge.n	8012f84 <__sfputc_r+0x1e>
 8012f72:	6994      	ldr	r4, [r2, #24]
 8012f74:	42a3      	cmp	r3, r4
 8012f76:	db01      	blt.n	8012f7c <__sfputc_r+0x16>
 8012f78:	290a      	cmp	r1, #10
 8012f7a:	d103      	bne.n	8012f84 <__sfputc_r+0x1e>
 8012f7c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012f80:	f000 b94a 	b.w	8013218 <__swbuf_r>
 8012f84:	6813      	ldr	r3, [r2, #0]
 8012f86:	1c58      	adds	r0, r3, #1
 8012f88:	6010      	str	r0, [r2, #0]
 8012f8a:	7019      	strb	r1, [r3, #0]
 8012f8c:	4608      	mov	r0, r1
 8012f8e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012f92:	4770      	bx	lr

08012f94 <__sfputs_r>:
 8012f94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012f96:	4606      	mov	r6, r0
 8012f98:	460f      	mov	r7, r1
 8012f9a:	4614      	mov	r4, r2
 8012f9c:	18d5      	adds	r5, r2, r3
 8012f9e:	42ac      	cmp	r4, r5
 8012fa0:	d101      	bne.n	8012fa6 <__sfputs_r+0x12>
 8012fa2:	2000      	movs	r0, #0
 8012fa4:	e007      	b.n	8012fb6 <__sfputs_r+0x22>
 8012fa6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012faa:	463a      	mov	r2, r7
 8012fac:	4630      	mov	r0, r6
 8012fae:	f7ff ffda 	bl	8012f66 <__sfputc_r>
 8012fb2:	1c43      	adds	r3, r0, #1
 8012fb4:	d1f3      	bne.n	8012f9e <__sfputs_r+0xa>
 8012fb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012fb8 <_vfiprintf_r>:
 8012fb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012fbc:	460d      	mov	r5, r1
 8012fbe:	b09d      	sub	sp, #116	; 0x74
 8012fc0:	4614      	mov	r4, r2
 8012fc2:	4698      	mov	r8, r3
 8012fc4:	4606      	mov	r6, r0
 8012fc6:	b118      	cbz	r0, 8012fd0 <_vfiprintf_r+0x18>
 8012fc8:	6983      	ldr	r3, [r0, #24]
 8012fca:	b90b      	cbnz	r3, 8012fd0 <_vfiprintf_r+0x18>
 8012fcc:	f000 fb14 	bl	80135f8 <__sinit>
 8012fd0:	4b89      	ldr	r3, [pc, #548]	; (80131f8 <_vfiprintf_r+0x240>)
 8012fd2:	429d      	cmp	r5, r3
 8012fd4:	d11b      	bne.n	801300e <_vfiprintf_r+0x56>
 8012fd6:	6875      	ldr	r5, [r6, #4]
 8012fd8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012fda:	07d9      	lsls	r1, r3, #31
 8012fdc:	d405      	bmi.n	8012fea <_vfiprintf_r+0x32>
 8012fde:	89ab      	ldrh	r3, [r5, #12]
 8012fe0:	059a      	lsls	r2, r3, #22
 8012fe2:	d402      	bmi.n	8012fea <_vfiprintf_r+0x32>
 8012fe4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012fe6:	f000 fba5 	bl	8013734 <__retarget_lock_acquire_recursive>
 8012fea:	89ab      	ldrh	r3, [r5, #12]
 8012fec:	071b      	lsls	r3, r3, #28
 8012fee:	d501      	bpl.n	8012ff4 <_vfiprintf_r+0x3c>
 8012ff0:	692b      	ldr	r3, [r5, #16]
 8012ff2:	b9eb      	cbnz	r3, 8013030 <_vfiprintf_r+0x78>
 8012ff4:	4629      	mov	r1, r5
 8012ff6:	4630      	mov	r0, r6
 8012ff8:	f000 f96e 	bl	80132d8 <__swsetup_r>
 8012ffc:	b1c0      	cbz	r0, 8013030 <_vfiprintf_r+0x78>
 8012ffe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013000:	07dc      	lsls	r4, r3, #31
 8013002:	d50e      	bpl.n	8013022 <_vfiprintf_r+0x6a>
 8013004:	f04f 30ff 	mov.w	r0, #4294967295
 8013008:	b01d      	add	sp, #116	; 0x74
 801300a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801300e:	4b7b      	ldr	r3, [pc, #492]	; (80131fc <_vfiprintf_r+0x244>)
 8013010:	429d      	cmp	r5, r3
 8013012:	d101      	bne.n	8013018 <_vfiprintf_r+0x60>
 8013014:	68b5      	ldr	r5, [r6, #8]
 8013016:	e7df      	b.n	8012fd8 <_vfiprintf_r+0x20>
 8013018:	4b79      	ldr	r3, [pc, #484]	; (8013200 <_vfiprintf_r+0x248>)
 801301a:	429d      	cmp	r5, r3
 801301c:	bf08      	it	eq
 801301e:	68f5      	ldreq	r5, [r6, #12]
 8013020:	e7da      	b.n	8012fd8 <_vfiprintf_r+0x20>
 8013022:	89ab      	ldrh	r3, [r5, #12]
 8013024:	0598      	lsls	r0, r3, #22
 8013026:	d4ed      	bmi.n	8013004 <_vfiprintf_r+0x4c>
 8013028:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801302a:	f000 fb84 	bl	8013736 <__retarget_lock_release_recursive>
 801302e:	e7e9      	b.n	8013004 <_vfiprintf_r+0x4c>
 8013030:	2300      	movs	r3, #0
 8013032:	9309      	str	r3, [sp, #36]	; 0x24
 8013034:	2320      	movs	r3, #32
 8013036:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801303a:	f8cd 800c 	str.w	r8, [sp, #12]
 801303e:	2330      	movs	r3, #48	; 0x30
 8013040:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8013204 <_vfiprintf_r+0x24c>
 8013044:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013048:	f04f 0901 	mov.w	r9, #1
 801304c:	4623      	mov	r3, r4
 801304e:	469a      	mov	sl, r3
 8013050:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013054:	b10a      	cbz	r2, 801305a <_vfiprintf_r+0xa2>
 8013056:	2a25      	cmp	r2, #37	; 0x25
 8013058:	d1f9      	bne.n	801304e <_vfiprintf_r+0x96>
 801305a:	ebba 0b04 	subs.w	fp, sl, r4
 801305e:	d00b      	beq.n	8013078 <_vfiprintf_r+0xc0>
 8013060:	465b      	mov	r3, fp
 8013062:	4622      	mov	r2, r4
 8013064:	4629      	mov	r1, r5
 8013066:	4630      	mov	r0, r6
 8013068:	f7ff ff94 	bl	8012f94 <__sfputs_r>
 801306c:	3001      	adds	r0, #1
 801306e:	f000 80aa 	beq.w	80131c6 <_vfiprintf_r+0x20e>
 8013072:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013074:	445a      	add	r2, fp
 8013076:	9209      	str	r2, [sp, #36]	; 0x24
 8013078:	f89a 3000 	ldrb.w	r3, [sl]
 801307c:	2b00      	cmp	r3, #0
 801307e:	f000 80a2 	beq.w	80131c6 <_vfiprintf_r+0x20e>
 8013082:	2300      	movs	r3, #0
 8013084:	f04f 32ff 	mov.w	r2, #4294967295
 8013088:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801308c:	f10a 0a01 	add.w	sl, sl, #1
 8013090:	9304      	str	r3, [sp, #16]
 8013092:	9307      	str	r3, [sp, #28]
 8013094:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013098:	931a      	str	r3, [sp, #104]	; 0x68
 801309a:	4654      	mov	r4, sl
 801309c:	2205      	movs	r2, #5
 801309e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80130a2:	4858      	ldr	r0, [pc, #352]	; (8013204 <_vfiprintf_r+0x24c>)
 80130a4:	f7ed f89c 	bl	80001e0 <memchr>
 80130a8:	9a04      	ldr	r2, [sp, #16]
 80130aa:	b9d8      	cbnz	r0, 80130e4 <_vfiprintf_r+0x12c>
 80130ac:	06d1      	lsls	r1, r2, #27
 80130ae:	bf44      	itt	mi
 80130b0:	2320      	movmi	r3, #32
 80130b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80130b6:	0713      	lsls	r3, r2, #28
 80130b8:	bf44      	itt	mi
 80130ba:	232b      	movmi	r3, #43	; 0x2b
 80130bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80130c0:	f89a 3000 	ldrb.w	r3, [sl]
 80130c4:	2b2a      	cmp	r3, #42	; 0x2a
 80130c6:	d015      	beq.n	80130f4 <_vfiprintf_r+0x13c>
 80130c8:	9a07      	ldr	r2, [sp, #28]
 80130ca:	4654      	mov	r4, sl
 80130cc:	2000      	movs	r0, #0
 80130ce:	f04f 0c0a 	mov.w	ip, #10
 80130d2:	4621      	mov	r1, r4
 80130d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80130d8:	3b30      	subs	r3, #48	; 0x30
 80130da:	2b09      	cmp	r3, #9
 80130dc:	d94e      	bls.n	801317c <_vfiprintf_r+0x1c4>
 80130de:	b1b0      	cbz	r0, 801310e <_vfiprintf_r+0x156>
 80130e0:	9207      	str	r2, [sp, #28]
 80130e2:	e014      	b.n	801310e <_vfiprintf_r+0x156>
 80130e4:	eba0 0308 	sub.w	r3, r0, r8
 80130e8:	fa09 f303 	lsl.w	r3, r9, r3
 80130ec:	4313      	orrs	r3, r2
 80130ee:	9304      	str	r3, [sp, #16]
 80130f0:	46a2      	mov	sl, r4
 80130f2:	e7d2      	b.n	801309a <_vfiprintf_r+0xe2>
 80130f4:	9b03      	ldr	r3, [sp, #12]
 80130f6:	1d19      	adds	r1, r3, #4
 80130f8:	681b      	ldr	r3, [r3, #0]
 80130fa:	9103      	str	r1, [sp, #12]
 80130fc:	2b00      	cmp	r3, #0
 80130fe:	bfbb      	ittet	lt
 8013100:	425b      	neglt	r3, r3
 8013102:	f042 0202 	orrlt.w	r2, r2, #2
 8013106:	9307      	strge	r3, [sp, #28]
 8013108:	9307      	strlt	r3, [sp, #28]
 801310a:	bfb8      	it	lt
 801310c:	9204      	strlt	r2, [sp, #16]
 801310e:	7823      	ldrb	r3, [r4, #0]
 8013110:	2b2e      	cmp	r3, #46	; 0x2e
 8013112:	d10c      	bne.n	801312e <_vfiprintf_r+0x176>
 8013114:	7863      	ldrb	r3, [r4, #1]
 8013116:	2b2a      	cmp	r3, #42	; 0x2a
 8013118:	d135      	bne.n	8013186 <_vfiprintf_r+0x1ce>
 801311a:	9b03      	ldr	r3, [sp, #12]
 801311c:	1d1a      	adds	r2, r3, #4
 801311e:	681b      	ldr	r3, [r3, #0]
 8013120:	9203      	str	r2, [sp, #12]
 8013122:	2b00      	cmp	r3, #0
 8013124:	bfb8      	it	lt
 8013126:	f04f 33ff 	movlt.w	r3, #4294967295
 801312a:	3402      	adds	r4, #2
 801312c:	9305      	str	r3, [sp, #20]
 801312e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8013214 <_vfiprintf_r+0x25c>
 8013132:	7821      	ldrb	r1, [r4, #0]
 8013134:	2203      	movs	r2, #3
 8013136:	4650      	mov	r0, sl
 8013138:	f7ed f852 	bl	80001e0 <memchr>
 801313c:	b140      	cbz	r0, 8013150 <_vfiprintf_r+0x198>
 801313e:	2340      	movs	r3, #64	; 0x40
 8013140:	eba0 000a 	sub.w	r0, r0, sl
 8013144:	fa03 f000 	lsl.w	r0, r3, r0
 8013148:	9b04      	ldr	r3, [sp, #16]
 801314a:	4303      	orrs	r3, r0
 801314c:	3401      	adds	r4, #1
 801314e:	9304      	str	r3, [sp, #16]
 8013150:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013154:	482c      	ldr	r0, [pc, #176]	; (8013208 <_vfiprintf_r+0x250>)
 8013156:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801315a:	2206      	movs	r2, #6
 801315c:	f7ed f840 	bl	80001e0 <memchr>
 8013160:	2800      	cmp	r0, #0
 8013162:	d03f      	beq.n	80131e4 <_vfiprintf_r+0x22c>
 8013164:	4b29      	ldr	r3, [pc, #164]	; (801320c <_vfiprintf_r+0x254>)
 8013166:	bb1b      	cbnz	r3, 80131b0 <_vfiprintf_r+0x1f8>
 8013168:	9b03      	ldr	r3, [sp, #12]
 801316a:	3307      	adds	r3, #7
 801316c:	f023 0307 	bic.w	r3, r3, #7
 8013170:	3308      	adds	r3, #8
 8013172:	9303      	str	r3, [sp, #12]
 8013174:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013176:	443b      	add	r3, r7
 8013178:	9309      	str	r3, [sp, #36]	; 0x24
 801317a:	e767      	b.n	801304c <_vfiprintf_r+0x94>
 801317c:	fb0c 3202 	mla	r2, ip, r2, r3
 8013180:	460c      	mov	r4, r1
 8013182:	2001      	movs	r0, #1
 8013184:	e7a5      	b.n	80130d2 <_vfiprintf_r+0x11a>
 8013186:	2300      	movs	r3, #0
 8013188:	3401      	adds	r4, #1
 801318a:	9305      	str	r3, [sp, #20]
 801318c:	4619      	mov	r1, r3
 801318e:	f04f 0c0a 	mov.w	ip, #10
 8013192:	4620      	mov	r0, r4
 8013194:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013198:	3a30      	subs	r2, #48	; 0x30
 801319a:	2a09      	cmp	r2, #9
 801319c:	d903      	bls.n	80131a6 <_vfiprintf_r+0x1ee>
 801319e:	2b00      	cmp	r3, #0
 80131a0:	d0c5      	beq.n	801312e <_vfiprintf_r+0x176>
 80131a2:	9105      	str	r1, [sp, #20]
 80131a4:	e7c3      	b.n	801312e <_vfiprintf_r+0x176>
 80131a6:	fb0c 2101 	mla	r1, ip, r1, r2
 80131aa:	4604      	mov	r4, r0
 80131ac:	2301      	movs	r3, #1
 80131ae:	e7f0      	b.n	8013192 <_vfiprintf_r+0x1da>
 80131b0:	ab03      	add	r3, sp, #12
 80131b2:	9300      	str	r3, [sp, #0]
 80131b4:	462a      	mov	r2, r5
 80131b6:	4b16      	ldr	r3, [pc, #88]	; (8013210 <_vfiprintf_r+0x258>)
 80131b8:	a904      	add	r1, sp, #16
 80131ba:	4630      	mov	r0, r6
 80131bc:	f7fd fde6 	bl	8010d8c <_printf_float>
 80131c0:	4607      	mov	r7, r0
 80131c2:	1c78      	adds	r0, r7, #1
 80131c4:	d1d6      	bne.n	8013174 <_vfiprintf_r+0x1bc>
 80131c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80131c8:	07d9      	lsls	r1, r3, #31
 80131ca:	d405      	bmi.n	80131d8 <_vfiprintf_r+0x220>
 80131cc:	89ab      	ldrh	r3, [r5, #12]
 80131ce:	059a      	lsls	r2, r3, #22
 80131d0:	d402      	bmi.n	80131d8 <_vfiprintf_r+0x220>
 80131d2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80131d4:	f000 faaf 	bl	8013736 <__retarget_lock_release_recursive>
 80131d8:	89ab      	ldrh	r3, [r5, #12]
 80131da:	065b      	lsls	r3, r3, #25
 80131dc:	f53f af12 	bmi.w	8013004 <_vfiprintf_r+0x4c>
 80131e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80131e2:	e711      	b.n	8013008 <_vfiprintf_r+0x50>
 80131e4:	ab03      	add	r3, sp, #12
 80131e6:	9300      	str	r3, [sp, #0]
 80131e8:	462a      	mov	r2, r5
 80131ea:	4b09      	ldr	r3, [pc, #36]	; (8013210 <_vfiprintf_r+0x258>)
 80131ec:	a904      	add	r1, sp, #16
 80131ee:	4630      	mov	r0, r6
 80131f0:	f7fe f870 	bl	80112d4 <_printf_i>
 80131f4:	e7e4      	b.n	80131c0 <_vfiprintf_r+0x208>
 80131f6:	bf00      	nop
 80131f8:	0801641c 	.word	0x0801641c
 80131fc:	0801643c 	.word	0x0801643c
 8013200:	080163fc 	.word	0x080163fc
 8013204:	080162a4 	.word	0x080162a4
 8013208:	080162ae 	.word	0x080162ae
 801320c:	08010d8d 	.word	0x08010d8d
 8013210:	08012f95 	.word	0x08012f95
 8013214:	080162aa 	.word	0x080162aa

08013218 <__swbuf_r>:
 8013218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801321a:	460e      	mov	r6, r1
 801321c:	4614      	mov	r4, r2
 801321e:	4605      	mov	r5, r0
 8013220:	b118      	cbz	r0, 801322a <__swbuf_r+0x12>
 8013222:	6983      	ldr	r3, [r0, #24]
 8013224:	b90b      	cbnz	r3, 801322a <__swbuf_r+0x12>
 8013226:	f000 f9e7 	bl	80135f8 <__sinit>
 801322a:	4b21      	ldr	r3, [pc, #132]	; (80132b0 <__swbuf_r+0x98>)
 801322c:	429c      	cmp	r4, r3
 801322e:	d12b      	bne.n	8013288 <__swbuf_r+0x70>
 8013230:	686c      	ldr	r4, [r5, #4]
 8013232:	69a3      	ldr	r3, [r4, #24]
 8013234:	60a3      	str	r3, [r4, #8]
 8013236:	89a3      	ldrh	r3, [r4, #12]
 8013238:	071a      	lsls	r2, r3, #28
 801323a:	d52f      	bpl.n	801329c <__swbuf_r+0x84>
 801323c:	6923      	ldr	r3, [r4, #16]
 801323e:	b36b      	cbz	r3, 801329c <__swbuf_r+0x84>
 8013240:	6923      	ldr	r3, [r4, #16]
 8013242:	6820      	ldr	r0, [r4, #0]
 8013244:	1ac0      	subs	r0, r0, r3
 8013246:	6963      	ldr	r3, [r4, #20]
 8013248:	b2f6      	uxtb	r6, r6
 801324a:	4283      	cmp	r3, r0
 801324c:	4637      	mov	r7, r6
 801324e:	dc04      	bgt.n	801325a <__swbuf_r+0x42>
 8013250:	4621      	mov	r1, r4
 8013252:	4628      	mov	r0, r5
 8013254:	f000 f93c 	bl	80134d0 <_fflush_r>
 8013258:	bb30      	cbnz	r0, 80132a8 <__swbuf_r+0x90>
 801325a:	68a3      	ldr	r3, [r4, #8]
 801325c:	3b01      	subs	r3, #1
 801325e:	60a3      	str	r3, [r4, #8]
 8013260:	6823      	ldr	r3, [r4, #0]
 8013262:	1c5a      	adds	r2, r3, #1
 8013264:	6022      	str	r2, [r4, #0]
 8013266:	701e      	strb	r6, [r3, #0]
 8013268:	6963      	ldr	r3, [r4, #20]
 801326a:	3001      	adds	r0, #1
 801326c:	4283      	cmp	r3, r0
 801326e:	d004      	beq.n	801327a <__swbuf_r+0x62>
 8013270:	89a3      	ldrh	r3, [r4, #12]
 8013272:	07db      	lsls	r3, r3, #31
 8013274:	d506      	bpl.n	8013284 <__swbuf_r+0x6c>
 8013276:	2e0a      	cmp	r6, #10
 8013278:	d104      	bne.n	8013284 <__swbuf_r+0x6c>
 801327a:	4621      	mov	r1, r4
 801327c:	4628      	mov	r0, r5
 801327e:	f000 f927 	bl	80134d0 <_fflush_r>
 8013282:	b988      	cbnz	r0, 80132a8 <__swbuf_r+0x90>
 8013284:	4638      	mov	r0, r7
 8013286:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013288:	4b0a      	ldr	r3, [pc, #40]	; (80132b4 <__swbuf_r+0x9c>)
 801328a:	429c      	cmp	r4, r3
 801328c:	d101      	bne.n	8013292 <__swbuf_r+0x7a>
 801328e:	68ac      	ldr	r4, [r5, #8]
 8013290:	e7cf      	b.n	8013232 <__swbuf_r+0x1a>
 8013292:	4b09      	ldr	r3, [pc, #36]	; (80132b8 <__swbuf_r+0xa0>)
 8013294:	429c      	cmp	r4, r3
 8013296:	bf08      	it	eq
 8013298:	68ec      	ldreq	r4, [r5, #12]
 801329a:	e7ca      	b.n	8013232 <__swbuf_r+0x1a>
 801329c:	4621      	mov	r1, r4
 801329e:	4628      	mov	r0, r5
 80132a0:	f000 f81a 	bl	80132d8 <__swsetup_r>
 80132a4:	2800      	cmp	r0, #0
 80132a6:	d0cb      	beq.n	8013240 <__swbuf_r+0x28>
 80132a8:	f04f 37ff 	mov.w	r7, #4294967295
 80132ac:	e7ea      	b.n	8013284 <__swbuf_r+0x6c>
 80132ae:	bf00      	nop
 80132b0:	0801641c 	.word	0x0801641c
 80132b4:	0801643c 	.word	0x0801643c
 80132b8:	080163fc 	.word	0x080163fc

080132bc <__ascii_wctomb>:
 80132bc:	b149      	cbz	r1, 80132d2 <__ascii_wctomb+0x16>
 80132be:	2aff      	cmp	r2, #255	; 0xff
 80132c0:	bf85      	ittet	hi
 80132c2:	238a      	movhi	r3, #138	; 0x8a
 80132c4:	6003      	strhi	r3, [r0, #0]
 80132c6:	700a      	strbls	r2, [r1, #0]
 80132c8:	f04f 30ff 	movhi.w	r0, #4294967295
 80132cc:	bf98      	it	ls
 80132ce:	2001      	movls	r0, #1
 80132d0:	4770      	bx	lr
 80132d2:	4608      	mov	r0, r1
 80132d4:	4770      	bx	lr
	...

080132d8 <__swsetup_r>:
 80132d8:	4b32      	ldr	r3, [pc, #200]	; (80133a4 <__swsetup_r+0xcc>)
 80132da:	b570      	push	{r4, r5, r6, lr}
 80132dc:	681d      	ldr	r5, [r3, #0]
 80132de:	4606      	mov	r6, r0
 80132e0:	460c      	mov	r4, r1
 80132e2:	b125      	cbz	r5, 80132ee <__swsetup_r+0x16>
 80132e4:	69ab      	ldr	r3, [r5, #24]
 80132e6:	b913      	cbnz	r3, 80132ee <__swsetup_r+0x16>
 80132e8:	4628      	mov	r0, r5
 80132ea:	f000 f985 	bl	80135f8 <__sinit>
 80132ee:	4b2e      	ldr	r3, [pc, #184]	; (80133a8 <__swsetup_r+0xd0>)
 80132f0:	429c      	cmp	r4, r3
 80132f2:	d10f      	bne.n	8013314 <__swsetup_r+0x3c>
 80132f4:	686c      	ldr	r4, [r5, #4]
 80132f6:	89a3      	ldrh	r3, [r4, #12]
 80132f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80132fc:	0719      	lsls	r1, r3, #28
 80132fe:	d42c      	bmi.n	801335a <__swsetup_r+0x82>
 8013300:	06dd      	lsls	r5, r3, #27
 8013302:	d411      	bmi.n	8013328 <__swsetup_r+0x50>
 8013304:	2309      	movs	r3, #9
 8013306:	6033      	str	r3, [r6, #0]
 8013308:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801330c:	81a3      	strh	r3, [r4, #12]
 801330e:	f04f 30ff 	mov.w	r0, #4294967295
 8013312:	e03e      	b.n	8013392 <__swsetup_r+0xba>
 8013314:	4b25      	ldr	r3, [pc, #148]	; (80133ac <__swsetup_r+0xd4>)
 8013316:	429c      	cmp	r4, r3
 8013318:	d101      	bne.n	801331e <__swsetup_r+0x46>
 801331a:	68ac      	ldr	r4, [r5, #8]
 801331c:	e7eb      	b.n	80132f6 <__swsetup_r+0x1e>
 801331e:	4b24      	ldr	r3, [pc, #144]	; (80133b0 <__swsetup_r+0xd8>)
 8013320:	429c      	cmp	r4, r3
 8013322:	bf08      	it	eq
 8013324:	68ec      	ldreq	r4, [r5, #12]
 8013326:	e7e6      	b.n	80132f6 <__swsetup_r+0x1e>
 8013328:	0758      	lsls	r0, r3, #29
 801332a:	d512      	bpl.n	8013352 <__swsetup_r+0x7a>
 801332c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801332e:	b141      	cbz	r1, 8013342 <__swsetup_r+0x6a>
 8013330:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013334:	4299      	cmp	r1, r3
 8013336:	d002      	beq.n	801333e <__swsetup_r+0x66>
 8013338:	4630      	mov	r0, r6
 801333a:	f7ff fb31 	bl	80129a0 <_free_r>
 801333e:	2300      	movs	r3, #0
 8013340:	6363      	str	r3, [r4, #52]	; 0x34
 8013342:	89a3      	ldrh	r3, [r4, #12]
 8013344:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8013348:	81a3      	strh	r3, [r4, #12]
 801334a:	2300      	movs	r3, #0
 801334c:	6063      	str	r3, [r4, #4]
 801334e:	6923      	ldr	r3, [r4, #16]
 8013350:	6023      	str	r3, [r4, #0]
 8013352:	89a3      	ldrh	r3, [r4, #12]
 8013354:	f043 0308 	orr.w	r3, r3, #8
 8013358:	81a3      	strh	r3, [r4, #12]
 801335a:	6923      	ldr	r3, [r4, #16]
 801335c:	b94b      	cbnz	r3, 8013372 <__swsetup_r+0x9a>
 801335e:	89a3      	ldrh	r3, [r4, #12]
 8013360:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8013364:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013368:	d003      	beq.n	8013372 <__swsetup_r+0x9a>
 801336a:	4621      	mov	r1, r4
 801336c:	4630      	mov	r0, r6
 801336e:	f000 fa09 	bl	8013784 <__smakebuf_r>
 8013372:	89a0      	ldrh	r0, [r4, #12]
 8013374:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013378:	f010 0301 	ands.w	r3, r0, #1
 801337c:	d00a      	beq.n	8013394 <__swsetup_r+0xbc>
 801337e:	2300      	movs	r3, #0
 8013380:	60a3      	str	r3, [r4, #8]
 8013382:	6963      	ldr	r3, [r4, #20]
 8013384:	425b      	negs	r3, r3
 8013386:	61a3      	str	r3, [r4, #24]
 8013388:	6923      	ldr	r3, [r4, #16]
 801338a:	b943      	cbnz	r3, 801339e <__swsetup_r+0xc6>
 801338c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8013390:	d1ba      	bne.n	8013308 <__swsetup_r+0x30>
 8013392:	bd70      	pop	{r4, r5, r6, pc}
 8013394:	0781      	lsls	r1, r0, #30
 8013396:	bf58      	it	pl
 8013398:	6963      	ldrpl	r3, [r4, #20]
 801339a:	60a3      	str	r3, [r4, #8]
 801339c:	e7f4      	b.n	8013388 <__swsetup_r+0xb0>
 801339e:	2000      	movs	r0, #0
 80133a0:	e7f7      	b.n	8013392 <__swsetup_r+0xba>
 80133a2:	bf00      	nop
 80133a4:	20000078 	.word	0x20000078
 80133a8:	0801641c 	.word	0x0801641c
 80133ac:	0801643c 	.word	0x0801643c
 80133b0:	080163fc 	.word	0x080163fc

080133b4 <abort>:
 80133b4:	b508      	push	{r3, lr}
 80133b6:	2006      	movs	r0, #6
 80133b8:	f000 fa54 	bl	8013864 <raise>
 80133bc:	2001      	movs	r0, #1
 80133be:	f7f0 ffeb 	bl	8004398 <_exit>
	...

080133c4 <__sflush_r>:
 80133c4:	898a      	ldrh	r2, [r1, #12]
 80133c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80133ca:	4605      	mov	r5, r0
 80133cc:	0710      	lsls	r0, r2, #28
 80133ce:	460c      	mov	r4, r1
 80133d0:	d458      	bmi.n	8013484 <__sflush_r+0xc0>
 80133d2:	684b      	ldr	r3, [r1, #4]
 80133d4:	2b00      	cmp	r3, #0
 80133d6:	dc05      	bgt.n	80133e4 <__sflush_r+0x20>
 80133d8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80133da:	2b00      	cmp	r3, #0
 80133dc:	dc02      	bgt.n	80133e4 <__sflush_r+0x20>
 80133de:	2000      	movs	r0, #0
 80133e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80133e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80133e6:	2e00      	cmp	r6, #0
 80133e8:	d0f9      	beq.n	80133de <__sflush_r+0x1a>
 80133ea:	2300      	movs	r3, #0
 80133ec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80133f0:	682f      	ldr	r7, [r5, #0]
 80133f2:	602b      	str	r3, [r5, #0]
 80133f4:	d032      	beq.n	801345c <__sflush_r+0x98>
 80133f6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80133f8:	89a3      	ldrh	r3, [r4, #12]
 80133fa:	075a      	lsls	r2, r3, #29
 80133fc:	d505      	bpl.n	801340a <__sflush_r+0x46>
 80133fe:	6863      	ldr	r3, [r4, #4]
 8013400:	1ac0      	subs	r0, r0, r3
 8013402:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013404:	b10b      	cbz	r3, 801340a <__sflush_r+0x46>
 8013406:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013408:	1ac0      	subs	r0, r0, r3
 801340a:	2300      	movs	r3, #0
 801340c:	4602      	mov	r2, r0
 801340e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013410:	6a21      	ldr	r1, [r4, #32]
 8013412:	4628      	mov	r0, r5
 8013414:	47b0      	blx	r6
 8013416:	1c43      	adds	r3, r0, #1
 8013418:	89a3      	ldrh	r3, [r4, #12]
 801341a:	d106      	bne.n	801342a <__sflush_r+0x66>
 801341c:	6829      	ldr	r1, [r5, #0]
 801341e:	291d      	cmp	r1, #29
 8013420:	d82c      	bhi.n	801347c <__sflush_r+0xb8>
 8013422:	4a2a      	ldr	r2, [pc, #168]	; (80134cc <__sflush_r+0x108>)
 8013424:	40ca      	lsrs	r2, r1
 8013426:	07d6      	lsls	r6, r2, #31
 8013428:	d528      	bpl.n	801347c <__sflush_r+0xb8>
 801342a:	2200      	movs	r2, #0
 801342c:	6062      	str	r2, [r4, #4]
 801342e:	04d9      	lsls	r1, r3, #19
 8013430:	6922      	ldr	r2, [r4, #16]
 8013432:	6022      	str	r2, [r4, #0]
 8013434:	d504      	bpl.n	8013440 <__sflush_r+0x7c>
 8013436:	1c42      	adds	r2, r0, #1
 8013438:	d101      	bne.n	801343e <__sflush_r+0x7a>
 801343a:	682b      	ldr	r3, [r5, #0]
 801343c:	b903      	cbnz	r3, 8013440 <__sflush_r+0x7c>
 801343e:	6560      	str	r0, [r4, #84]	; 0x54
 8013440:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013442:	602f      	str	r7, [r5, #0]
 8013444:	2900      	cmp	r1, #0
 8013446:	d0ca      	beq.n	80133de <__sflush_r+0x1a>
 8013448:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801344c:	4299      	cmp	r1, r3
 801344e:	d002      	beq.n	8013456 <__sflush_r+0x92>
 8013450:	4628      	mov	r0, r5
 8013452:	f7ff faa5 	bl	80129a0 <_free_r>
 8013456:	2000      	movs	r0, #0
 8013458:	6360      	str	r0, [r4, #52]	; 0x34
 801345a:	e7c1      	b.n	80133e0 <__sflush_r+0x1c>
 801345c:	6a21      	ldr	r1, [r4, #32]
 801345e:	2301      	movs	r3, #1
 8013460:	4628      	mov	r0, r5
 8013462:	47b0      	blx	r6
 8013464:	1c41      	adds	r1, r0, #1
 8013466:	d1c7      	bne.n	80133f8 <__sflush_r+0x34>
 8013468:	682b      	ldr	r3, [r5, #0]
 801346a:	2b00      	cmp	r3, #0
 801346c:	d0c4      	beq.n	80133f8 <__sflush_r+0x34>
 801346e:	2b1d      	cmp	r3, #29
 8013470:	d001      	beq.n	8013476 <__sflush_r+0xb2>
 8013472:	2b16      	cmp	r3, #22
 8013474:	d101      	bne.n	801347a <__sflush_r+0xb6>
 8013476:	602f      	str	r7, [r5, #0]
 8013478:	e7b1      	b.n	80133de <__sflush_r+0x1a>
 801347a:	89a3      	ldrh	r3, [r4, #12]
 801347c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013480:	81a3      	strh	r3, [r4, #12]
 8013482:	e7ad      	b.n	80133e0 <__sflush_r+0x1c>
 8013484:	690f      	ldr	r7, [r1, #16]
 8013486:	2f00      	cmp	r7, #0
 8013488:	d0a9      	beq.n	80133de <__sflush_r+0x1a>
 801348a:	0793      	lsls	r3, r2, #30
 801348c:	680e      	ldr	r6, [r1, #0]
 801348e:	bf08      	it	eq
 8013490:	694b      	ldreq	r3, [r1, #20]
 8013492:	600f      	str	r7, [r1, #0]
 8013494:	bf18      	it	ne
 8013496:	2300      	movne	r3, #0
 8013498:	eba6 0807 	sub.w	r8, r6, r7
 801349c:	608b      	str	r3, [r1, #8]
 801349e:	f1b8 0f00 	cmp.w	r8, #0
 80134a2:	dd9c      	ble.n	80133de <__sflush_r+0x1a>
 80134a4:	6a21      	ldr	r1, [r4, #32]
 80134a6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80134a8:	4643      	mov	r3, r8
 80134aa:	463a      	mov	r2, r7
 80134ac:	4628      	mov	r0, r5
 80134ae:	47b0      	blx	r6
 80134b0:	2800      	cmp	r0, #0
 80134b2:	dc06      	bgt.n	80134c2 <__sflush_r+0xfe>
 80134b4:	89a3      	ldrh	r3, [r4, #12]
 80134b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80134ba:	81a3      	strh	r3, [r4, #12]
 80134bc:	f04f 30ff 	mov.w	r0, #4294967295
 80134c0:	e78e      	b.n	80133e0 <__sflush_r+0x1c>
 80134c2:	4407      	add	r7, r0
 80134c4:	eba8 0800 	sub.w	r8, r8, r0
 80134c8:	e7e9      	b.n	801349e <__sflush_r+0xda>
 80134ca:	bf00      	nop
 80134cc:	20400001 	.word	0x20400001

080134d0 <_fflush_r>:
 80134d0:	b538      	push	{r3, r4, r5, lr}
 80134d2:	690b      	ldr	r3, [r1, #16]
 80134d4:	4605      	mov	r5, r0
 80134d6:	460c      	mov	r4, r1
 80134d8:	b913      	cbnz	r3, 80134e0 <_fflush_r+0x10>
 80134da:	2500      	movs	r5, #0
 80134dc:	4628      	mov	r0, r5
 80134de:	bd38      	pop	{r3, r4, r5, pc}
 80134e0:	b118      	cbz	r0, 80134ea <_fflush_r+0x1a>
 80134e2:	6983      	ldr	r3, [r0, #24]
 80134e4:	b90b      	cbnz	r3, 80134ea <_fflush_r+0x1a>
 80134e6:	f000 f887 	bl	80135f8 <__sinit>
 80134ea:	4b14      	ldr	r3, [pc, #80]	; (801353c <_fflush_r+0x6c>)
 80134ec:	429c      	cmp	r4, r3
 80134ee:	d11b      	bne.n	8013528 <_fflush_r+0x58>
 80134f0:	686c      	ldr	r4, [r5, #4]
 80134f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80134f6:	2b00      	cmp	r3, #0
 80134f8:	d0ef      	beq.n	80134da <_fflush_r+0xa>
 80134fa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80134fc:	07d0      	lsls	r0, r2, #31
 80134fe:	d404      	bmi.n	801350a <_fflush_r+0x3a>
 8013500:	0599      	lsls	r1, r3, #22
 8013502:	d402      	bmi.n	801350a <_fflush_r+0x3a>
 8013504:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013506:	f000 f915 	bl	8013734 <__retarget_lock_acquire_recursive>
 801350a:	4628      	mov	r0, r5
 801350c:	4621      	mov	r1, r4
 801350e:	f7ff ff59 	bl	80133c4 <__sflush_r>
 8013512:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013514:	07da      	lsls	r2, r3, #31
 8013516:	4605      	mov	r5, r0
 8013518:	d4e0      	bmi.n	80134dc <_fflush_r+0xc>
 801351a:	89a3      	ldrh	r3, [r4, #12]
 801351c:	059b      	lsls	r3, r3, #22
 801351e:	d4dd      	bmi.n	80134dc <_fflush_r+0xc>
 8013520:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013522:	f000 f908 	bl	8013736 <__retarget_lock_release_recursive>
 8013526:	e7d9      	b.n	80134dc <_fflush_r+0xc>
 8013528:	4b05      	ldr	r3, [pc, #20]	; (8013540 <_fflush_r+0x70>)
 801352a:	429c      	cmp	r4, r3
 801352c:	d101      	bne.n	8013532 <_fflush_r+0x62>
 801352e:	68ac      	ldr	r4, [r5, #8]
 8013530:	e7df      	b.n	80134f2 <_fflush_r+0x22>
 8013532:	4b04      	ldr	r3, [pc, #16]	; (8013544 <_fflush_r+0x74>)
 8013534:	429c      	cmp	r4, r3
 8013536:	bf08      	it	eq
 8013538:	68ec      	ldreq	r4, [r5, #12]
 801353a:	e7da      	b.n	80134f2 <_fflush_r+0x22>
 801353c:	0801641c 	.word	0x0801641c
 8013540:	0801643c 	.word	0x0801643c
 8013544:	080163fc 	.word	0x080163fc

08013548 <std>:
 8013548:	2300      	movs	r3, #0
 801354a:	b510      	push	{r4, lr}
 801354c:	4604      	mov	r4, r0
 801354e:	e9c0 3300 	strd	r3, r3, [r0]
 8013552:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8013556:	6083      	str	r3, [r0, #8]
 8013558:	8181      	strh	r1, [r0, #12]
 801355a:	6643      	str	r3, [r0, #100]	; 0x64
 801355c:	81c2      	strh	r2, [r0, #14]
 801355e:	6183      	str	r3, [r0, #24]
 8013560:	4619      	mov	r1, r3
 8013562:	2208      	movs	r2, #8
 8013564:	305c      	adds	r0, #92	; 0x5c
 8013566:	f7fd fb69 	bl	8010c3c <memset>
 801356a:	4b05      	ldr	r3, [pc, #20]	; (8013580 <std+0x38>)
 801356c:	6263      	str	r3, [r4, #36]	; 0x24
 801356e:	4b05      	ldr	r3, [pc, #20]	; (8013584 <std+0x3c>)
 8013570:	62a3      	str	r3, [r4, #40]	; 0x28
 8013572:	4b05      	ldr	r3, [pc, #20]	; (8013588 <std+0x40>)
 8013574:	62e3      	str	r3, [r4, #44]	; 0x2c
 8013576:	4b05      	ldr	r3, [pc, #20]	; (801358c <std+0x44>)
 8013578:	6224      	str	r4, [r4, #32]
 801357a:	6323      	str	r3, [r4, #48]	; 0x30
 801357c:	bd10      	pop	{r4, pc}
 801357e:	bf00      	nop
 8013580:	0801389d 	.word	0x0801389d
 8013584:	080138bf 	.word	0x080138bf
 8013588:	080138f7 	.word	0x080138f7
 801358c:	0801391b 	.word	0x0801391b

08013590 <_cleanup_r>:
 8013590:	4901      	ldr	r1, [pc, #4]	; (8013598 <_cleanup_r+0x8>)
 8013592:	f000 b8af 	b.w	80136f4 <_fwalk_reent>
 8013596:	bf00      	nop
 8013598:	080134d1 	.word	0x080134d1

0801359c <__sfmoreglue>:
 801359c:	b570      	push	{r4, r5, r6, lr}
 801359e:	2268      	movs	r2, #104	; 0x68
 80135a0:	1e4d      	subs	r5, r1, #1
 80135a2:	4355      	muls	r5, r2
 80135a4:	460e      	mov	r6, r1
 80135a6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80135aa:	f7ff fa65 	bl	8012a78 <_malloc_r>
 80135ae:	4604      	mov	r4, r0
 80135b0:	b140      	cbz	r0, 80135c4 <__sfmoreglue+0x28>
 80135b2:	2100      	movs	r1, #0
 80135b4:	e9c0 1600 	strd	r1, r6, [r0]
 80135b8:	300c      	adds	r0, #12
 80135ba:	60a0      	str	r0, [r4, #8]
 80135bc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80135c0:	f7fd fb3c 	bl	8010c3c <memset>
 80135c4:	4620      	mov	r0, r4
 80135c6:	bd70      	pop	{r4, r5, r6, pc}

080135c8 <__sfp_lock_acquire>:
 80135c8:	4801      	ldr	r0, [pc, #4]	; (80135d0 <__sfp_lock_acquire+0x8>)
 80135ca:	f000 b8b3 	b.w	8013734 <__retarget_lock_acquire_recursive>
 80135ce:	bf00      	nop
 80135d0:	20006961 	.word	0x20006961

080135d4 <__sfp_lock_release>:
 80135d4:	4801      	ldr	r0, [pc, #4]	; (80135dc <__sfp_lock_release+0x8>)
 80135d6:	f000 b8ae 	b.w	8013736 <__retarget_lock_release_recursive>
 80135da:	bf00      	nop
 80135dc:	20006961 	.word	0x20006961

080135e0 <__sinit_lock_acquire>:
 80135e0:	4801      	ldr	r0, [pc, #4]	; (80135e8 <__sinit_lock_acquire+0x8>)
 80135e2:	f000 b8a7 	b.w	8013734 <__retarget_lock_acquire_recursive>
 80135e6:	bf00      	nop
 80135e8:	20006962 	.word	0x20006962

080135ec <__sinit_lock_release>:
 80135ec:	4801      	ldr	r0, [pc, #4]	; (80135f4 <__sinit_lock_release+0x8>)
 80135ee:	f000 b8a2 	b.w	8013736 <__retarget_lock_release_recursive>
 80135f2:	bf00      	nop
 80135f4:	20006962 	.word	0x20006962

080135f8 <__sinit>:
 80135f8:	b510      	push	{r4, lr}
 80135fa:	4604      	mov	r4, r0
 80135fc:	f7ff fff0 	bl	80135e0 <__sinit_lock_acquire>
 8013600:	69a3      	ldr	r3, [r4, #24]
 8013602:	b11b      	cbz	r3, 801360c <__sinit+0x14>
 8013604:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013608:	f7ff bff0 	b.w	80135ec <__sinit_lock_release>
 801360c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8013610:	6523      	str	r3, [r4, #80]	; 0x50
 8013612:	4b13      	ldr	r3, [pc, #76]	; (8013660 <__sinit+0x68>)
 8013614:	4a13      	ldr	r2, [pc, #76]	; (8013664 <__sinit+0x6c>)
 8013616:	681b      	ldr	r3, [r3, #0]
 8013618:	62a2      	str	r2, [r4, #40]	; 0x28
 801361a:	42a3      	cmp	r3, r4
 801361c:	bf04      	itt	eq
 801361e:	2301      	moveq	r3, #1
 8013620:	61a3      	streq	r3, [r4, #24]
 8013622:	4620      	mov	r0, r4
 8013624:	f000 f820 	bl	8013668 <__sfp>
 8013628:	6060      	str	r0, [r4, #4]
 801362a:	4620      	mov	r0, r4
 801362c:	f000 f81c 	bl	8013668 <__sfp>
 8013630:	60a0      	str	r0, [r4, #8]
 8013632:	4620      	mov	r0, r4
 8013634:	f000 f818 	bl	8013668 <__sfp>
 8013638:	2200      	movs	r2, #0
 801363a:	60e0      	str	r0, [r4, #12]
 801363c:	2104      	movs	r1, #4
 801363e:	6860      	ldr	r0, [r4, #4]
 8013640:	f7ff ff82 	bl	8013548 <std>
 8013644:	68a0      	ldr	r0, [r4, #8]
 8013646:	2201      	movs	r2, #1
 8013648:	2109      	movs	r1, #9
 801364a:	f7ff ff7d 	bl	8013548 <std>
 801364e:	68e0      	ldr	r0, [r4, #12]
 8013650:	2202      	movs	r2, #2
 8013652:	2112      	movs	r1, #18
 8013654:	f7ff ff78 	bl	8013548 <std>
 8013658:	2301      	movs	r3, #1
 801365a:	61a3      	str	r3, [r4, #24]
 801365c:	e7d2      	b.n	8013604 <__sinit+0xc>
 801365e:	bf00      	nop
 8013660:	08016080 	.word	0x08016080
 8013664:	08013591 	.word	0x08013591

08013668 <__sfp>:
 8013668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801366a:	4607      	mov	r7, r0
 801366c:	f7ff ffac 	bl	80135c8 <__sfp_lock_acquire>
 8013670:	4b1e      	ldr	r3, [pc, #120]	; (80136ec <__sfp+0x84>)
 8013672:	681e      	ldr	r6, [r3, #0]
 8013674:	69b3      	ldr	r3, [r6, #24]
 8013676:	b913      	cbnz	r3, 801367e <__sfp+0x16>
 8013678:	4630      	mov	r0, r6
 801367a:	f7ff ffbd 	bl	80135f8 <__sinit>
 801367e:	3648      	adds	r6, #72	; 0x48
 8013680:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8013684:	3b01      	subs	r3, #1
 8013686:	d503      	bpl.n	8013690 <__sfp+0x28>
 8013688:	6833      	ldr	r3, [r6, #0]
 801368a:	b30b      	cbz	r3, 80136d0 <__sfp+0x68>
 801368c:	6836      	ldr	r6, [r6, #0]
 801368e:	e7f7      	b.n	8013680 <__sfp+0x18>
 8013690:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8013694:	b9d5      	cbnz	r5, 80136cc <__sfp+0x64>
 8013696:	4b16      	ldr	r3, [pc, #88]	; (80136f0 <__sfp+0x88>)
 8013698:	60e3      	str	r3, [r4, #12]
 801369a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801369e:	6665      	str	r5, [r4, #100]	; 0x64
 80136a0:	f000 f847 	bl	8013732 <__retarget_lock_init_recursive>
 80136a4:	f7ff ff96 	bl	80135d4 <__sfp_lock_release>
 80136a8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80136ac:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80136b0:	6025      	str	r5, [r4, #0]
 80136b2:	61a5      	str	r5, [r4, #24]
 80136b4:	2208      	movs	r2, #8
 80136b6:	4629      	mov	r1, r5
 80136b8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80136bc:	f7fd fabe 	bl	8010c3c <memset>
 80136c0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80136c4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80136c8:	4620      	mov	r0, r4
 80136ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80136cc:	3468      	adds	r4, #104	; 0x68
 80136ce:	e7d9      	b.n	8013684 <__sfp+0x1c>
 80136d0:	2104      	movs	r1, #4
 80136d2:	4638      	mov	r0, r7
 80136d4:	f7ff ff62 	bl	801359c <__sfmoreglue>
 80136d8:	4604      	mov	r4, r0
 80136da:	6030      	str	r0, [r6, #0]
 80136dc:	2800      	cmp	r0, #0
 80136de:	d1d5      	bne.n	801368c <__sfp+0x24>
 80136e0:	f7ff ff78 	bl	80135d4 <__sfp_lock_release>
 80136e4:	230c      	movs	r3, #12
 80136e6:	603b      	str	r3, [r7, #0]
 80136e8:	e7ee      	b.n	80136c8 <__sfp+0x60>
 80136ea:	bf00      	nop
 80136ec:	08016080 	.word	0x08016080
 80136f0:	ffff0001 	.word	0xffff0001

080136f4 <_fwalk_reent>:
 80136f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80136f8:	4606      	mov	r6, r0
 80136fa:	4688      	mov	r8, r1
 80136fc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8013700:	2700      	movs	r7, #0
 8013702:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8013706:	f1b9 0901 	subs.w	r9, r9, #1
 801370a:	d505      	bpl.n	8013718 <_fwalk_reent+0x24>
 801370c:	6824      	ldr	r4, [r4, #0]
 801370e:	2c00      	cmp	r4, #0
 8013710:	d1f7      	bne.n	8013702 <_fwalk_reent+0xe>
 8013712:	4638      	mov	r0, r7
 8013714:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013718:	89ab      	ldrh	r3, [r5, #12]
 801371a:	2b01      	cmp	r3, #1
 801371c:	d907      	bls.n	801372e <_fwalk_reent+0x3a>
 801371e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013722:	3301      	adds	r3, #1
 8013724:	d003      	beq.n	801372e <_fwalk_reent+0x3a>
 8013726:	4629      	mov	r1, r5
 8013728:	4630      	mov	r0, r6
 801372a:	47c0      	blx	r8
 801372c:	4307      	orrs	r7, r0
 801372e:	3568      	adds	r5, #104	; 0x68
 8013730:	e7e9      	b.n	8013706 <_fwalk_reent+0x12>

08013732 <__retarget_lock_init_recursive>:
 8013732:	4770      	bx	lr

08013734 <__retarget_lock_acquire_recursive>:
 8013734:	4770      	bx	lr

08013736 <__retarget_lock_release_recursive>:
 8013736:	4770      	bx	lr

08013738 <__swhatbuf_r>:
 8013738:	b570      	push	{r4, r5, r6, lr}
 801373a:	460e      	mov	r6, r1
 801373c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013740:	2900      	cmp	r1, #0
 8013742:	b096      	sub	sp, #88	; 0x58
 8013744:	4614      	mov	r4, r2
 8013746:	461d      	mov	r5, r3
 8013748:	da08      	bge.n	801375c <__swhatbuf_r+0x24>
 801374a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801374e:	2200      	movs	r2, #0
 8013750:	602a      	str	r2, [r5, #0]
 8013752:	061a      	lsls	r2, r3, #24
 8013754:	d410      	bmi.n	8013778 <__swhatbuf_r+0x40>
 8013756:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801375a:	e00e      	b.n	801377a <__swhatbuf_r+0x42>
 801375c:	466a      	mov	r2, sp
 801375e:	f000 f903 	bl	8013968 <_fstat_r>
 8013762:	2800      	cmp	r0, #0
 8013764:	dbf1      	blt.n	801374a <__swhatbuf_r+0x12>
 8013766:	9a01      	ldr	r2, [sp, #4]
 8013768:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801376c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8013770:	425a      	negs	r2, r3
 8013772:	415a      	adcs	r2, r3
 8013774:	602a      	str	r2, [r5, #0]
 8013776:	e7ee      	b.n	8013756 <__swhatbuf_r+0x1e>
 8013778:	2340      	movs	r3, #64	; 0x40
 801377a:	2000      	movs	r0, #0
 801377c:	6023      	str	r3, [r4, #0]
 801377e:	b016      	add	sp, #88	; 0x58
 8013780:	bd70      	pop	{r4, r5, r6, pc}
	...

08013784 <__smakebuf_r>:
 8013784:	898b      	ldrh	r3, [r1, #12]
 8013786:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013788:	079d      	lsls	r5, r3, #30
 801378a:	4606      	mov	r6, r0
 801378c:	460c      	mov	r4, r1
 801378e:	d507      	bpl.n	80137a0 <__smakebuf_r+0x1c>
 8013790:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013794:	6023      	str	r3, [r4, #0]
 8013796:	6123      	str	r3, [r4, #16]
 8013798:	2301      	movs	r3, #1
 801379a:	6163      	str	r3, [r4, #20]
 801379c:	b002      	add	sp, #8
 801379e:	bd70      	pop	{r4, r5, r6, pc}
 80137a0:	ab01      	add	r3, sp, #4
 80137a2:	466a      	mov	r2, sp
 80137a4:	f7ff ffc8 	bl	8013738 <__swhatbuf_r>
 80137a8:	9900      	ldr	r1, [sp, #0]
 80137aa:	4605      	mov	r5, r0
 80137ac:	4630      	mov	r0, r6
 80137ae:	f7ff f963 	bl	8012a78 <_malloc_r>
 80137b2:	b948      	cbnz	r0, 80137c8 <__smakebuf_r+0x44>
 80137b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80137b8:	059a      	lsls	r2, r3, #22
 80137ba:	d4ef      	bmi.n	801379c <__smakebuf_r+0x18>
 80137bc:	f023 0303 	bic.w	r3, r3, #3
 80137c0:	f043 0302 	orr.w	r3, r3, #2
 80137c4:	81a3      	strh	r3, [r4, #12]
 80137c6:	e7e3      	b.n	8013790 <__smakebuf_r+0xc>
 80137c8:	4b0d      	ldr	r3, [pc, #52]	; (8013800 <__smakebuf_r+0x7c>)
 80137ca:	62b3      	str	r3, [r6, #40]	; 0x28
 80137cc:	89a3      	ldrh	r3, [r4, #12]
 80137ce:	6020      	str	r0, [r4, #0]
 80137d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80137d4:	81a3      	strh	r3, [r4, #12]
 80137d6:	9b00      	ldr	r3, [sp, #0]
 80137d8:	6163      	str	r3, [r4, #20]
 80137da:	9b01      	ldr	r3, [sp, #4]
 80137dc:	6120      	str	r0, [r4, #16]
 80137de:	b15b      	cbz	r3, 80137f8 <__smakebuf_r+0x74>
 80137e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80137e4:	4630      	mov	r0, r6
 80137e6:	f000 f8d1 	bl	801398c <_isatty_r>
 80137ea:	b128      	cbz	r0, 80137f8 <__smakebuf_r+0x74>
 80137ec:	89a3      	ldrh	r3, [r4, #12]
 80137ee:	f023 0303 	bic.w	r3, r3, #3
 80137f2:	f043 0301 	orr.w	r3, r3, #1
 80137f6:	81a3      	strh	r3, [r4, #12]
 80137f8:	89a0      	ldrh	r0, [r4, #12]
 80137fa:	4305      	orrs	r5, r0
 80137fc:	81a5      	strh	r5, [r4, #12]
 80137fe:	e7cd      	b.n	801379c <__smakebuf_r+0x18>
 8013800:	08013591 	.word	0x08013591

08013804 <_malloc_usable_size_r>:
 8013804:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013808:	1f18      	subs	r0, r3, #4
 801380a:	2b00      	cmp	r3, #0
 801380c:	bfbc      	itt	lt
 801380e:	580b      	ldrlt	r3, [r1, r0]
 8013810:	18c0      	addlt	r0, r0, r3
 8013812:	4770      	bx	lr

08013814 <_raise_r>:
 8013814:	291f      	cmp	r1, #31
 8013816:	b538      	push	{r3, r4, r5, lr}
 8013818:	4604      	mov	r4, r0
 801381a:	460d      	mov	r5, r1
 801381c:	d904      	bls.n	8013828 <_raise_r+0x14>
 801381e:	2316      	movs	r3, #22
 8013820:	6003      	str	r3, [r0, #0]
 8013822:	f04f 30ff 	mov.w	r0, #4294967295
 8013826:	bd38      	pop	{r3, r4, r5, pc}
 8013828:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801382a:	b112      	cbz	r2, 8013832 <_raise_r+0x1e>
 801382c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013830:	b94b      	cbnz	r3, 8013846 <_raise_r+0x32>
 8013832:	4620      	mov	r0, r4
 8013834:	f000 f830 	bl	8013898 <_getpid_r>
 8013838:	462a      	mov	r2, r5
 801383a:	4601      	mov	r1, r0
 801383c:	4620      	mov	r0, r4
 801383e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013842:	f000 b817 	b.w	8013874 <_kill_r>
 8013846:	2b01      	cmp	r3, #1
 8013848:	d00a      	beq.n	8013860 <_raise_r+0x4c>
 801384a:	1c59      	adds	r1, r3, #1
 801384c:	d103      	bne.n	8013856 <_raise_r+0x42>
 801384e:	2316      	movs	r3, #22
 8013850:	6003      	str	r3, [r0, #0]
 8013852:	2001      	movs	r0, #1
 8013854:	e7e7      	b.n	8013826 <_raise_r+0x12>
 8013856:	2400      	movs	r4, #0
 8013858:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801385c:	4628      	mov	r0, r5
 801385e:	4798      	blx	r3
 8013860:	2000      	movs	r0, #0
 8013862:	e7e0      	b.n	8013826 <_raise_r+0x12>

08013864 <raise>:
 8013864:	4b02      	ldr	r3, [pc, #8]	; (8013870 <raise+0xc>)
 8013866:	4601      	mov	r1, r0
 8013868:	6818      	ldr	r0, [r3, #0]
 801386a:	f7ff bfd3 	b.w	8013814 <_raise_r>
 801386e:	bf00      	nop
 8013870:	20000078 	.word	0x20000078

08013874 <_kill_r>:
 8013874:	b538      	push	{r3, r4, r5, lr}
 8013876:	4d07      	ldr	r5, [pc, #28]	; (8013894 <_kill_r+0x20>)
 8013878:	2300      	movs	r3, #0
 801387a:	4604      	mov	r4, r0
 801387c:	4608      	mov	r0, r1
 801387e:	4611      	mov	r1, r2
 8013880:	602b      	str	r3, [r5, #0]
 8013882:	f7f0 fd79 	bl	8004378 <_kill>
 8013886:	1c43      	adds	r3, r0, #1
 8013888:	d102      	bne.n	8013890 <_kill_r+0x1c>
 801388a:	682b      	ldr	r3, [r5, #0]
 801388c:	b103      	cbz	r3, 8013890 <_kill_r+0x1c>
 801388e:	6023      	str	r3, [r4, #0]
 8013890:	bd38      	pop	{r3, r4, r5, pc}
 8013892:	bf00      	nop
 8013894:	2000695c 	.word	0x2000695c

08013898 <_getpid_r>:
 8013898:	f7f0 bd66 	b.w	8004368 <_getpid>

0801389c <__sread>:
 801389c:	b510      	push	{r4, lr}
 801389e:	460c      	mov	r4, r1
 80138a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80138a4:	f000 f894 	bl	80139d0 <_read_r>
 80138a8:	2800      	cmp	r0, #0
 80138aa:	bfab      	itete	ge
 80138ac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80138ae:	89a3      	ldrhlt	r3, [r4, #12]
 80138b0:	181b      	addge	r3, r3, r0
 80138b2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80138b6:	bfac      	ite	ge
 80138b8:	6563      	strge	r3, [r4, #84]	; 0x54
 80138ba:	81a3      	strhlt	r3, [r4, #12]
 80138bc:	bd10      	pop	{r4, pc}

080138be <__swrite>:
 80138be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80138c2:	461f      	mov	r7, r3
 80138c4:	898b      	ldrh	r3, [r1, #12]
 80138c6:	05db      	lsls	r3, r3, #23
 80138c8:	4605      	mov	r5, r0
 80138ca:	460c      	mov	r4, r1
 80138cc:	4616      	mov	r6, r2
 80138ce:	d505      	bpl.n	80138dc <__swrite+0x1e>
 80138d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80138d4:	2302      	movs	r3, #2
 80138d6:	2200      	movs	r2, #0
 80138d8:	f000 f868 	bl	80139ac <_lseek_r>
 80138dc:	89a3      	ldrh	r3, [r4, #12]
 80138de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80138e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80138e6:	81a3      	strh	r3, [r4, #12]
 80138e8:	4632      	mov	r2, r6
 80138ea:	463b      	mov	r3, r7
 80138ec:	4628      	mov	r0, r5
 80138ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80138f2:	f000 b817 	b.w	8013924 <_write_r>

080138f6 <__sseek>:
 80138f6:	b510      	push	{r4, lr}
 80138f8:	460c      	mov	r4, r1
 80138fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80138fe:	f000 f855 	bl	80139ac <_lseek_r>
 8013902:	1c43      	adds	r3, r0, #1
 8013904:	89a3      	ldrh	r3, [r4, #12]
 8013906:	bf15      	itete	ne
 8013908:	6560      	strne	r0, [r4, #84]	; 0x54
 801390a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801390e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8013912:	81a3      	strheq	r3, [r4, #12]
 8013914:	bf18      	it	ne
 8013916:	81a3      	strhne	r3, [r4, #12]
 8013918:	bd10      	pop	{r4, pc}

0801391a <__sclose>:
 801391a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801391e:	f000 b813 	b.w	8013948 <_close_r>
	...

08013924 <_write_r>:
 8013924:	b538      	push	{r3, r4, r5, lr}
 8013926:	4d07      	ldr	r5, [pc, #28]	; (8013944 <_write_r+0x20>)
 8013928:	4604      	mov	r4, r0
 801392a:	4608      	mov	r0, r1
 801392c:	4611      	mov	r1, r2
 801392e:	2200      	movs	r2, #0
 8013930:	602a      	str	r2, [r5, #0]
 8013932:	461a      	mov	r2, r3
 8013934:	f7f0 fd57 	bl	80043e6 <_write>
 8013938:	1c43      	adds	r3, r0, #1
 801393a:	d102      	bne.n	8013942 <_write_r+0x1e>
 801393c:	682b      	ldr	r3, [r5, #0]
 801393e:	b103      	cbz	r3, 8013942 <_write_r+0x1e>
 8013940:	6023      	str	r3, [r4, #0]
 8013942:	bd38      	pop	{r3, r4, r5, pc}
 8013944:	2000695c 	.word	0x2000695c

08013948 <_close_r>:
 8013948:	b538      	push	{r3, r4, r5, lr}
 801394a:	4d06      	ldr	r5, [pc, #24]	; (8013964 <_close_r+0x1c>)
 801394c:	2300      	movs	r3, #0
 801394e:	4604      	mov	r4, r0
 8013950:	4608      	mov	r0, r1
 8013952:	602b      	str	r3, [r5, #0]
 8013954:	f7f0 fd63 	bl	800441e <_close>
 8013958:	1c43      	adds	r3, r0, #1
 801395a:	d102      	bne.n	8013962 <_close_r+0x1a>
 801395c:	682b      	ldr	r3, [r5, #0]
 801395e:	b103      	cbz	r3, 8013962 <_close_r+0x1a>
 8013960:	6023      	str	r3, [r4, #0]
 8013962:	bd38      	pop	{r3, r4, r5, pc}
 8013964:	2000695c 	.word	0x2000695c

08013968 <_fstat_r>:
 8013968:	b538      	push	{r3, r4, r5, lr}
 801396a:	4d07      	ldr	r5, [pc, #28]	; (8013988 <_fstat_r+0x20>)
 801396c:	2300      	movs	r3, #0
 801396e:	4604      	mov	r4, r0
 8013970:	4608      	mov	r0, r1
 8013972:	4611      	mov	r1, r2
 8013974:	602b      	str	r3, [r5, #0]
 8013976:	f7f0 fd5e 	bl	8004436 <_fstat>
 801397a:	1c43      	adds	r3, r0, #1
 801397c:	d102      	bne.n	8013984 <_fstat_r+0x1c>
 801397e:	682b      	ldr	r3, [r5, #0]
 8013980:	b103      	cbz	r3, 8013984 <_fstat_r+0x1c>
 8013982:	6023      	str	r3, [r4, #0]
 8013984:	bd38      	pop	{r3, r4, r5, pc}
 8013986:	bf00      	nop
 8013988:	2000695c 	.word	0x2000695c

0801398c <_isatty_r>:
 801398c:	b538      	push	{r3, r4, r5, lr}
 801398e:	4d06      	ldr	r5, [pc, #24]	; (80139a8 <_isatty_r+0x1c>)
 8013990:	2300      	movs	r3, #0
 8013992:	4604      	mov	r4, r0
 8013994:	4608      	mov	r0, r1
 8013996:	602b      	str	r3, [r5, #0]
 8013998:	f7f0 fd5d 	bl	8004456 <_isatty>
 801399c:	1c43      	adds	r3, r0, #1
 801399e:	d102      	bne.n	80139a6 <_isatty_r+0x1a>
 80139a0:	682b      	ldr	r3, [r5, #0]
 80139a2:	b103      	cbz	r3, 80139a6 <_isatty_r+0x1a>
 80139a4:	6023      	str	r3, [r4, #0]
 80139a6:	bd38      	pop	{r3, r4, r5, pc}
 80139a8:	2000695c 	.word	0x2000695c

080139ac <_lseek_r>:
 80139ac:	b538      	push	{r3, r4, r5, lr}
 80139ae:	4d07      	ldr	r5, [pc, #28]	; (80139cc <_lseek_r+0x20>)
 80139b0:	4604      	mov	r4, r0
 80139b2:	4608      	mov	r0, r1
 80139b4:	4611      	mov	r1, r2
 80139b6:	2200      	movs	r2, #0
 80139b8:	602a      	str	r2, [r5, #0]
 80139ba:	461a      	mov	r2, r3
 80139bc:	f7f0 fd56 	bl	800446c <_lseek>
 80139c0:	1c43      	adds	r3, r0, #1
 80139c2:	d102      	bne.n	80139ca <_lseek_r+0x1e>
 80139c4:	682b      	ldr	r3, [r5, #0]
 80139c6:	b103      	cbz	r3, 80139ca <_lseek_r+0x1e>
 80139c8:	6023      	str	r3, [r4, #0]
 80139ca:	bd38      	pop	{r3, r4, r5, pc}
 80139cc:	2000695c 	.word	0x2000695c

080139d0 <_read_r>:
 80139d0:	b538      	push	{r3, r4, r5, lr}
 80139d2:	4d07      	ldr	r5, [pc, #28]	; (80139f0 <_read_r+0x20>)
 80139d4:	4604      	mov	r4, r0
 80139d6:	4608      	mov	r0, r1
 80139d8:	4611      	mov	r1, r2
 80139da:	2200      	movs	r2, #0
 80139dc:	602a      	str	r2, [r5, #0]
 80139de:	461a      	mov	r2, r3
 80139e0:	f7f0 fce4 	bl	80043ac <_read>
 80139e4:	1c43      	adds	r3, r0, #1
 80139e6:	d102      	bne.n	80139ee <_read_r+0x1e>
 80139e8:	682b      	ldr	r3, [r5, #0]
 80139ea:	b103      	cbz	r3, 80139ee <_read_r+0x1e>
 80139ec:	6023      	str	r3, [r4, #0]
 80139ee:	bd38      	pop	{r3, r4, r5, pc}
 80139f0:	2000695c 	.word	0x2000695c

080139f4 <sinf>:
 80139f4:	ee10 3a10 	vmov	r3, s0
 80139f8:	b507      	push	{r0, r1, r2, lr}
 80139fa:	4a1f      	ldr	r2, [pc, #124]	; (8013a78 <sinf+0x84>)
 80139fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8013a00:	4293      	cmp	r3, r2
 8013a02:	dc07      	bgt.n	8013a14 <sinf+0x20>
 8013a04:	eddf 0a1d 	vldr	s1, [pc, #116]	; 8013a7c <sinf+0x88>
 8013a08:	2000      	movs	r0, #0
 8013a0a:	b003      	add	sp, #12
 8013a0c:	f85d eb04 	ldr.w	lr, [sp], #4
 8013a10:	f001 bf78 	b.w	8015904 <__kernel_sinf>
 8013a14:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8013a18:	db04      	blt.n	8013a24 <sinf+0x30>
 8013a1a:	ee30 0a40 	vsub.f32	s0, s0, s0
 8013a1e:	b003      	add	sp, #12
 8013a20:	f85d fb04 	ldr.w	pc, [sp], #4
 8013a24:	4668      	mov	r0, sp
 8013a26:	f001 fb57 	bl	80150d8 <__ieee754_rem_pio2f>
 8013a2a:	f000 0003 	and.w	r0, r0, #3
 8013a2e:	2801      	cmp	r0, #1
 8013a30:	d00a      	beq.n	8013a48 <sinf+0x54>
 8013a32:	2802      	cmp	r0, #2
 8013a34:	d00f      	beq.n	8013a56 <sinf+0x62>
 8013a36:	b9c0      	cbnz	r0, 8013a6a <sinf+0x76>
 8013a38:	eddd 0a01 	vldr	s1, [sp, #4]
 8013a3c:	ed9d 0a00 	vldr	s0, [sp]
 8013a40:	2001      	movs	r0, #1
 8013a42:	f001 ff5f 	bl	8015904 <__kernel_sinf>
 8013a46:	e7ea      	b.n	8013a1e <sinf+0x2a>
 8013a48:	eddd 0a01 	vldr	s1, [sp, #4]
 8013a4c:	ed9d 0a00 	vldr	s0, [sp]
 8013a50:	f001 fc82 	bl	8015358 <__kernel_cosf>
 8013a54:	e7e3      	b.n	8013a1e <sinf+0x2a>
 8013a56:	eddd 0a01 	vldr	s1, [sp, #4]
 8013a5a:	ed9d 0a00 	vldr	s0, [sp]
 8013a5e:	2001      	movs	r0, #1
 8013a60:	f001 ff50 	bl	8015904 <__kernel_sinf>
 8013a64:	eeb1 0a40 	vneg.f32	s0, s0
 8013a68:	e7d9      	b.n	8013a1e <sinf+0x2a>
 8013a6a:	eddd 0a01 	vldr	s1, [sp, #4]
 8013a6e:	ed9d 0a00 	vldr	s0, [sp]
 8013a72:	f001 fc71 	bl	8015358 <__kernel_cosf>
 8013a76:	e7f5      	b.n	8013a64 <sinf+0x70>
 8013a78:	3f490fd8 	.word	0x3f490fd8
 8013a7c:	00000000 	.word	0x00000000

08013a80 <pow>:
 8013a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013a82:	ed2d 8b02 	vpush	{d8}
 8013a86:	eeb0 8a40 	vmov.f32	s16, s0
 8013a8a:	eef0 8a60 	vmov.f32	s17, s1
 8013a8e:	ec55 4b11 	vmov	r4, r5, d1
 8013a92:	f000 f8ed 	bl	8013c70 <__ieee754_pow>
 8013a96:	4622      	mov	r2, r4
 8013a98:	462b      	mov	r3, r5
 8013a9a:	4620      	mov	r0, r4
 8013a9c:	4629      	mov	r1, r5
 8013a9e:	ec57 6b10 	vmov	r6, r7, d0
 8013aa2:	f7ed f843 	bl	8000b2c <__aeabi_dcmpun>
 8013aa6:	2800      	cmp	r0, #0
 8013aa8:	d13b      	bne.n	8013b22 <pow+0xa2>
 8013aaa:	ec51 0b18 	vmov	r0, r1, d8
 8013aae:	2200      	movs	r2, #0
 8013ab0:	2300      	movs	r3, #0
 8013ab2:	f7ed f809 	bl	8000ac8 <__aeabi_dcmpeq>
 8013ab6:	b1b8      	cbz	r0, 8013ae8 <pow+0x68>
 8013ab8:	2200      	movs	r2, #0
 8013aba:	2300      	movs	r3, #0
 8013abc:	4620      	mov	r0, r4
 8013abe:	4629      	mov	r1, r5
 8013ac0:	f7ed f802 	bl	8000ac8 <__aeabi_dcmpeq>
 8013ac4:	2800      	cmp	r0, #0
 8013ac6:	d146      	bne.n	8013b56 <pow+0xd6>
 8013ac8:	ec45 4b10 	vmov	d0, r4, r5
 8013acc:	f001 ffbd 	bl	8015a4a <finite>
 8013ad0:	b338      	cbz	r0, 8013b22 <pow+0xa2>
 8013ad2:	2200      	movs	r2, #0
 8013ad4:	2300      	movs	r3, #0
 8013ad6:	4620      	mov	r0, r4
 8013ad8:	4629      	mov	r1, r5
 8013ada:	f7ec ffff 	bl	8000adc <__aeabi_dcmplt>
 8013ade:	b300      	cbz	r0, 8013b22 <pow+0xa2>
 8013ae0:	f7fd f874 	bl	8010bcc <__errno>
 8013ae4:	2322      	movs	r3, #34	; 0x22
 8013ae6:	e01b      	b.n	8013b20 <pow+0xa0>
 8013ae8:	ec47 6b10 	vmov	d0, r6, r7
 8013aec:	f001 ffad 	bl	8015a4a <finite>
 8013af0:	b9e0      	cbnz	r0, 8013b2c <pow+0xac>
 8013af2:	eeb0 0a48 	vmov.f32	s0, s16
 8013af6:	eef0 0a68 	vmov.f32	s1, s17
 8013afa:	f001 ffa6 	bl	8015a4a <finite>
 8013afe:	b1a8      	cbz	r0, 8013b2c <pow+0xac>
 8013b00:	ec45 4b10 	vmov	d0, r4, r5
 8013b04:	f001 ffa1 	bl	8015a4a <finite>
 8013b08:	b180      	cbz	r0, 8013b2c <pow+0xac>
 8013b0a:	4632      	mov	r2, r6
 8013b0c:	463b      	mov	r3, r7
 8013b0e:	4630      	mov	r0, r6
 8013b10:	4639      	mov	r1, r7
 8013b12:	f7ed f80b 	bl	8000b2c <__aeabi_dcmpun>
 8013b16:	2800      	cmp	r0, #0
 8013b18:	d0e2      	beq.n	8013ae0 <pow+0x60>
 8013b1a:	f7fd f857 	bl	8010bcc <__errno>
 8013b1e:	2321      	movs	r3, #33	; 0x21
 8013b20:	6003      	str	r3, [r0, #0]
 8013b22:	ecbd 8b02 	vpop	{d8}
 8013b26:	ec47 6b10 	vmov	d0, r6, r7
 8013b2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013b2c:	2200      	movs	r2, #0
 8013b2e:	2300      	movs	r3, #0
 8013b30:	4630      	mov	r0, r6
 8013b32:	4639      	mov	r1, r7
 8013b34:	f7ec ffc8 	bl	8000ac8 <__aeabi_dcmpeq>
 8013b38:	2800      	cmp	r0, #0
 8013b3a:	d0f2      	beq.n	8013b22 <pow+0xa2>
 8013b3c:	eeb0 0a48 	vmov.f32	s0, s16
 8013b40:	eef0 0a68 	vmov.f32	s1, s17
 8013b44:	f001 ff81 	bl	8015a4a <finite>
 8013b48:	2800      	cmp	r0, #0
 8013b4a:	d0ea      	beq.n	8013b22 <pow+0xa2>
 8013b4c:	ec45 4b10 	vmov	d0, r4, r5
 8013b50:	f001 ff7b 	bl	8015a4a <finite>
 8013b54:	e7c3      	b.n	8013ade <pow+0x5e>
 8013b56:	4f01      	ldr	r7, [pc, #4]	; (8013b5c <pow+0xdc>)
 8013b58:	2600      	movs	r6, #0
 8013b5a:	e7e2      	b.n	8013b22 <pow+0xa2>
 8013b5c:	3ff00000 	.word	0x3ff00000

08013b60 <asinf>:
 8013b60:	b508      	push	{r3, lr}
 8013b62:	ed2d 8b02 	vpush	{d8}
 8013b66:	eeb0 8a40 	vmov.f32	s16, s0
 8013b6a:	f000 fe61 	bl	8014830 <__ieee754_asinf>
 8013b6e:	eeb4 8a48 	vcmp.f32	s16, s16
 8013b72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b76:	eef0 8a40 	vmov.f32	s17, s0
 8013b7a:	d615      	bvs.n	8013ba8 <asinf+0x48>
 8013b7c:	eeb0 0a48 	vmov.f32	s0, s16
 8013b80:	f002 f8c8 	bl	8015d14 <fabsf>
 8013b84:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8013b88:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8013b8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b90:	dd0a      	ble.n	8013ba8 <asinf+0x48>
 8013b92:	f7fd f81b 	bl	8010bcc <__errno>
 8013b96:	ecbd 8b02 	vpop	{d8}
 8013b9a:	2321      	movs	r3, #33	; 0x21
 8013b9c:	6003      	str	r3, [r0, #0]
 8013b9e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8013ba2:	4804      	ldr	r0, [pc, #16]	; (8013bb4 <asinf+0x54>)
 8013ba4:	f002 b90c 	b.w	8015dc0 <nanf>
 8013ba8:	eeb0 0a68 	vmov.f32	s0, s17
 8013bac:	ecbd 8b02 	vpop	{d8}
 8013bb0:	bd08      	pop	{r3, pc}
 8013bb2:	bf00      	nop
 8013bb4:	080162f0 	.word	0x080162f0

08013bb8 <atan2f>:
 8013bb8:	f000 bf20 	b.w	80149fc <__ieee754_atan2f>

08013bbc <powf>:
 8013bbc:	b508      	push	{r3, lr}
 8013bbe:	ed2d 8b04 	vpush	{d8-d9}
 8013bc2:	eeb0 8a60 	vmov.f32	s16, s1
 8013bc6:	eeb0 9a40 	vmov.f32	s18, s0
 8013bca:	f000 ffb7 	bl	8014b3c <__ieee754_powf>
 8013bce:	eeb4 8a48 	vcmp.f32	s16, s16
 8013bd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013bd6:	eef0 8a40 	vmov.f32	s17, s0
 8013bda:	d63e      	bvs.n	8013c5a <powf+0x9e>
 8013bdc:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8013be0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013be4:	d112      	bne.n	8013c0c <powf+0x50>
 8013be6:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8013bea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013bee:	d039      	beq.n	8013c64 <powf+0xa8>
 8013bf0:	eeb0 0a48 	vmov.f32	s0, s16
 8013bf4:	f002 f895 	bl	8015d22 <finitef>
 8013bf8:	b378      	cbz	r0, 8013c5a <powf+0x9e>
 8013bfa:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8013bfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013c02:	d52a      	bpl.n	8013c5a <powf+0x9e>
 8013c04:	f7fc ffe2 	bl	8010bcc <__errno>
 8013c08:	2322      	movs	r3, #34	; 0x22
 8013c0a:	e014      	b.n	8013c36 <powf+0x7a>
 8013c0c:	f002 f889 	bl	8015d22 <finitef>
 8013c10:	b998      	cbnz	r0, 8013c3a <powf+0x7e>
 8013c12:	eeb0 0a49 	vmov.f32	s0, s18
 8013c16:	f002 f884 	bl	8015d22 <finitef>
 8013c1a:	b170      	cbz	r0, 8013c3a <powf+0x7e>
 8013c1c:	eeb0 0a48 	vmov.f32	s0, s16
 8013c20:	f002 f87f 	bl	8015d22 <finitef>
 8013c24:	b148      	cbz	r0, 8013c3a <powf+0x7e>
 8013c26:	eef4 8a68 	vcmp.f32	s17, s17
 8013c2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013c2e:	d7e9      	bvc.n	8013c04 <powf+0x48>
 8013c30:	f7fc ffcc 	bl	8010bcc <__errno>
 8013c34:	2321      	movs	r3, #33	; 0x21
 8013c36:	6003      	str	r3, [r0, #0]
 8013c38:	e00f      	b.n	8013c5a <powf+0x9e>
 8013c3a:	eef5 8a40 	vcmp.f32	s17, #0.0
 8013c3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013c42:	d10a      	bne.n	8013c5a <powf+0x9e>
 8013c44:	eeb0 0a49 	vmov.f32	s0, s18
 8013c48:	f002 f86b 	bl	8015d22 <finitef>
 8013c4c:	b128      	cbz	r0, 8013c5a <powf+0x9e>
 8013c4e:	eeb0 0a48 	vmov.f32	s0, s16
 8013c52:	f002 f866 	bl	8015d22 <finitef>
 8013c56:	2800      	cmp	r0, #0
 8013c58:	d1d4      	bne.n	8013c04 <powf+0x48>
 8013c5a:	eeb0 0a68 	vmov.f32	s0, s17
 8013c5e:	ecbd 8b04 	vpop	{d8-d9}
 8013c62:	bd08      	pop	{r3, pc}
 8013c64:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8013c68:	e7f7      	b.n	8013c5a <powf+0x9e>
 8013c6a:	0000      	movs	r0, r0
 8013c6c:	0000      	movs	r0, r0
	...

08013c70 <__ieee754_pow>:
 8013c70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013c74:	ed2d 8b06 	vpush	{d8-d10}
 8013c78:	b089      	sub	sp, #36	; 0x24
 8013c7a:	ed8d 1b00 	vstr	d1, [sp]
 8013c7e:	e9dd 2900 	ldrd	r2, r9, [sp]
 8013c82:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8013c86:	ea58 0102 	orrs.w	r1, r8, r2
 8013c8a:	ec57 6b10 	vmov	r6, r7, d0
 8013c8e:	d115      	bne.n	8013cbc <__ieee754_pow+0x4c>
 8013c90:	19b3      	adds	r3, r6, r6
 8013c92:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8013c96:	4152      	adcs	r2, r2
 8013c98:	4299      	cmp	r1, r3
 8013c9a:	4b89      	ldr	r3, [pc, #548]	; (8013ec0 <__ieee754_pow+0x250>)
 8013c9c:	4193      	sbcs	r3, r2
 8013c9e:	f080 84d2 	bcs.w	8014646 <__ieee754_pow+0x9d6>
 8013ca2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013ca6:	4630      	mov	r0, r6
 8013ca8:	4639      	mov	r1, r7
 8013caa:	f7ec faef 	bl	800028c <__adddf3>
 8013cae:	ec41 0b10 	vmov	d0, r0, r1
 8013cb2:	b009      	add	sp, #36	; 0x24
 8013cb4:	ecbd 8b06 	vpop	{d8-d10}
 8013cb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013cbc:	4b81      	ldr	r3, [pc, #516]	; (8013ec4 <__ieee754_pow+0x254>)
 8013cbe:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8013cc2:	429c      	cmp	r4, r3
 8013cc4:	ee10 aa10 	vmov	sl, s0
 8013cc8:	463d      	mov	r5, r7
 8013cca:	dc06      	bgt.n	8013cda <__ieee754_pow+0x6a>
 8013ccc:	d101      	bne.n	8013cd2 <__ieee754_pow+0x62>
 8013cce:	2e00      	cmp	r6, #0
 8013cd0:	d1e7      	bne.n	8013ca2 <__ieee754_pow+0x32>
 8013cd2:	4598      	cmp	r8, r3
 8013cd4:	dc01      	bgt.n	8013cda <__ieee754_pow+0x6a>
 8013cd6:	d10f      	bne.n	8013cf8 <__ieee754_pow+0x88>
 8013cd8:	b172      	cbz	r2, 8013cf8 <__ieee754_pow+0x88>
 8013cda:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8013cde:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8013ce2:	ea55 050a 	orrs.w	r5, r5, sl
 8013ce6:	d1dc      	bne.n	8013ca2 <__ieee754_pow+0x32>
 8013ce8:	e9dd 3200 	ldrd	r3, r2, [sp]
 8013cec:	18db      	adds	r3, r3, r3
 8013cee:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8013cf2:	4152      	adcs	r2, r2
 8013cf4:	429d      	cmp	r5, r3
 8013cf6:	e7d0      	b.n	8013c9a <__ieee754_pow+0x2a>
 8013cf8:	2d00      	cmp	r5, #0
 8013cfa:	da3b      	bge.n	8013d74 <__ieee754_pow+0x104>
 8013cfc:	4b72      	ldr	r3, [pc, #456]	; (8013ec8 <__ieee754_pow+0x258>)
 8013cfe:	4598      	cmp	r8, r3
 8013d00:	dc51      	bgt.n	8013da6 <__ieee754_pow+0x136>
 8013d02:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8013d06:	4598      	cmp	r8, r3
 8013d08:	f340 84ac 	ble.w	8014664 <__ieee754_pow+0x9f4>
 8013d0c:	ea4f 5328 	mov.w	r3, r8, asr #20
 8013d10:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8013d14:	2b14      	cmp	r3, #20
 8013d16:	dd0f      	ble.n	8013d38 <__ieee754_pow+0xc8>
 8013d18:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8013d1c:	fa22 f103 	lsr.w	r1, r2, r3
 8013d20:	fa01 f303 	lsl.w	r3, r1, r3
 8013d24:	4293      	cmp	r3, r2
 8013d26:	f040 849d 	bne.w	8014664 <__ieee754_pow+0x9f4>
 8013d2a:	f001 0101 	and.w	r1, r1, #1
 8013d2e:	f1c1 0302 	rsb	r3, r1, #2
 8013d32:	9304      	str	r3, [sp, #16]
 8013d34:	b182      	cbz	r2, 8013d58 <__ieee754_pow+0xe8>
 8013d36:	e05f      	b.n	8013df8 <__ieee754_pow+0x188>
 8013d38:	2a00      	cmp	r2, #0
 8013d3a:	d15b      	bne.n	8013df4 <__ieee754_pow+0x184>
 8013d3c:	f1c3 0314 	rsb	r3, r3, #20
 8013d40:	fa48 f103 	asr.w	r1, r8, r3
 8013d44:	fa01 f303 	lsl.w	r3, r1, r3
 8013d48:	4543      	cmp	r3, r8
 8013d4a:	f040 8488 	bne.w	801465e <__ieee754_pow+0x9ee>
 8013d4e:	f001 0101 	and.w	r1, r1, #1
 8013d52:	f1c1 0302 	rsb	r3, r1, #2
 8013d56:	9304      	str	r3, [sp, #16]
 8013d58:	4b5c      	ldr	r3, [pc, #368]	; (8013ecc <__ieee754_pow+0x25c>)
 8013d5a:	4598      	cmp	r8, r3
 8013d5c:	d132      	bne.n	8013dc4 <__ieee754_pow+0x154>
 8013d5e:	f1b9 0f00 	cmp.w	r9, #0
 8013d62:	f280 8478 	bge.w	8014656 <__ieee754_pow+0x9e6>
 8013d66:	4959      	ldr	r1, [pc, #356]	; (8013ecc <__ieee754_pow+0x25c>)
 8013d68:	4632      	mov	r2, r6
 8013d6a:	463b      	mov	r3, r7
 8013d6c:	2000      	movs	r0, #0
 8013d6e:	f7ec fd6d 	bl	800084c <__aeabi_ddiv>
 8013d72:	e79c      	b.n	8013cae <__ieee754_pow+0x3e>
 8013d74:	2300      	movs	r3, #0
 8013d76:	9304      	str	r3, [sp, #16]
 8013d78:	2a00      	cmp	r2, #0
 8013d7a:	d13d      	bne.n	8013df8 <__ieee754_pow+0x188>
 8013d7c:	4b51      	ldr	r3, [pc, #324]	; (8013ec4 <__ieee754_pow+0x254>)
 8013d7e:	4598      	cmp	r8, r3
 8013d80:	d1ea      	bne.n	8013d58 <__ieee754_pow+0xe8>
 8013d82:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8013d86:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8013d8a:	ea53 030a 	orrs.w	r3, r3, sl
 8013d8e:	f000 845a 	beq.w	8014646 <__ieee754_pow+0x9d6>
 8013d92:	4b4f      	ldr	r3, [pc, #316]	; (8013ed0 <__ieee754_pow+0x260>)
 8013d94:	429c      	cmp	r4, r3
 8013d96:	dd08      	ble.n	8013daa <__ieee754_pow+0x13a>
 8013d98:	f1b9 0f00 	cmp.w	r9, #0
 8013d9c:	f2c0 8457 	blt.w	801464e <__ieee754_pow+0x9de>
 8013da0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013da4:	e783      	b.n	8013cae <__ieee754_pow+0x3e>
 8013da6:	2302      	movs	r3, #2
 8013da8:	e7e5      	b.n	8013d76 <__ieee754_pow+0x106>
 8013daa:	f1b9 0f00 	cmp.w	r9, #0
 8013dae:	f04f 0000 	mov.w	r0, #0
 8013db2:	f04f 0100 	mov.w	r1, #0
 8013db6:	f6bf af7a 	bge.w	8013cae <__ieee754_pow+0x3e>
 8013dba:	e9dd 0300 	ldrd	r0, r3, [sp]
 8013dbe:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8013dc2:	e774      	b.n	8013cae <__ieee754_pow+0x3e>
 8013dc4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8013dc8:	d106      	bne.n	8013dd8 <__ieee754_pow+0x168>
 8013dca:	4632      	mov	r2, r6
 8013dcc:	463b      	mov	r3, r7
 8013dce:	4630      	mov	r0, r6
 8013dd0:	4639      	mov	r1, r7
 8013dd2:	f7ec fc11 	bl	80005f8 <__aeabi_dmul>
 8013dd6:	e76a      	b.n	8013cae <__ieee754_pow+0x3e>
 8013dd8:	4b3e      	ldr	r3, [pc, #248]	; (8013ed4 <__ieee754_pow+0x264>)
 8013dda:	4599      	cmp	r9, r3
 8013ddc:	d10c      	bne.n	8013df8 <__ieee754_pow+0x188>
 8013dde:	2d00      	cmp	r5, #0
 8013de0:	db0a      	blt.n	8013df8 <__ieee754_pow+0x188>
 8013de2:	ec47 6b10 	vmov	d0, r6, r7
 8013de6:	b009      	add	sp, #36	; 0x24
 8013de8:	ecbd 8b06 	vpop	{d8-d10}
 8013dec:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013df0:	f000 bc6c 	b.w	80146cc <__ieee754_sqrt>
 8013df4:	2300      	movs	r3, #0
 8013df6:	9304      	str	r3, [sp, #16]
 8013df8:	ec47 6b10 	vmov	d0, r6, r7
 8013dfc:	f001 fe1c 	bl	8015a38 <fabs>
 8013e00:	ec51 0b10 	vmov	r0, r1, d0
 8013e04:	f1ba 0f00 	cmp.w	sl, #0
 8013e08:	d129      	bne.n	8013e5e <__ieee754_pow+0x1ee>
 8013e0a:	b124      	cbz	r4, 8013e16 <__ieee754_pow+0x1a6>
 8013e0c:	4b2f      	ldr	r3, [pc, #188]	; (8013ecc <__ieee754_pow+0x25c>)
 8013e0e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8013e12:	429a      	cmp	r2, r3
 8013e14:	d123      	bne.n	8013e5e <__ieee754_pow+0x1ee>
 8013e16:	f1b9 0f00 	cmp.w	r9, #0
 8013e1a:	da05      	bge.n	8013e28 <__ieee754_pow+0x1b8>
 8013e1c:	4602      	mov	r2, r0
 8013e1e:	460b      	mov	r3, r1
 8013e20:	2000      	movs	r0, #0
 8013e22:	492a      	ldr	r1, [pc, #168]	; (8013ecc <__ieee754_pow+0x25c>)
 8013e24:	f7ec fd12 	bl	800084c <__aeabi_ddiv>
 8013e28:	2d00      	cmp	r5, #0
 8013e2a:	f6bf af40 	bge.w	8013cae <__ieee754_pow+0x3e>
 8013e2e:	9b04      	ldr	r3, [sp, #16]
 8013e30:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8013e34:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8013e38:	4323      	orrs	r3, r4
 8013e3a:	d108      	bne.n	8013e4e <__ieee754_pow+0x1de>
 8013e3c:	4602      	mov	r2, r0
 8013e3e:	460b      	mov	r3, r1
 8013e40:	4610      	mov	r0, r2
 8013e42:	4619      	mov	r1, r3
 8013e44:	f7ec fa20 	bl	8000288 <__aeabi_dsub>
 8013e48:	4602      	mov	r2, r0
 8013e4a:	460b      	mov	r3, r1
 8013e4c:	e78f      	b.n	8013d6e <__ieee754_pow+0xfe>
 8013e4e:	9b04      	ldr	r3, [sp, #16]
 8013e50:	2b01      	cmp	r3, #1
 8013e52:	f47f af2c 	bne.w	8013cae <__ieee754_pow+0x3e>
 8013e56:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013e5a:	4619      	mov	r1, r3
 8013e5c:	e727      	b.n	8013cae <__ieee754_pow+0x3e>
 8013e5e:	0feb      	lsrs	r3, r5, #31
 8013e60:	3b01      	subs	r3, #1
 8013e62:	9306      	str	r3, [sp, #24]
 8013e64:	9a06      	ldr	r2, [sp, #24]
 8013e66:	9b04      	ldr	r3, [sp, #16]
 8013e68:	4313      	orrs	r3, r2
 8013e6a:	d102      	bne.n	8013e72 <__ieee754_pow+0x202>
 8013e6c:	4632      	mov	r2, r6
 8013e6e:	463b      	mov	r3, r7
 8013e70:	e7e6      	b.n	8013e40 <__ieee754_pow+0x1d0>
 8013e72:	4b19      	ldr	r3, [pc, #100]	; (8013ed8 <__ieee754_pow+0x268>)
 8013e74:	4598      	cmp	r8, r3
 8013e76:	f340 80fb 	ble.w	8014070 <__ieee754_pow+0x400>
 8013e7a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8013e7e:	4598      	cmp	r8, r3
 8013e80:	4b13      	ldr	r3, [pc, #76]	; (8013ed0 <__ieee754_pow+0x260>)
 8013e82:	dd0c      	ble.n	8013e9e <__ieee754_pow+0x22e>
 8013e84:	429c      	cmp	r4, r3
 8013e86:	dc0f      	bgt.n	8013ea8 <__ieee754_pow+0x238>
 8013e88:	f1b9 0f00 	cmp.w	r9, #0
 8013e8c:	da0f      	bge.n	8013eae <__ieee754_pow+0x23e>
 8013e8e:	2000      	movs	r0, #0
 8013e90:	b009      	add	sp, #36	; 0x24
 8013e92:	ecbd 8b06 	vpop	{d8-d10}
 8013e96:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013e9a:	f001 bda2 	b.w	80159e2 <__math_oflow>
 8013e9e:	429c      	cmp	r4, r3
 8013ea0:	dbf2      	blt.n	8013e88 <__ieee754_pow+0x218>
 8013ea2:	4b0a      	ldr	r3, [pc, #40]	; (8013ecc <__ieee754_pow+0x25c>)
 8013ea4:	429c      	cmp	r4, r3
 8013ea6:	dd19      	ble.n	8013edc <__ieee754_pow+0x26c>
 8013ea8:	f1b9 0f00 	cmp.w	r9, #0
 8013eac:	dcef      	bgt.n	8013e8e <__ieee754_pow+0x21e>
 8013eae:	2000      	movs	r0, #0
 8013eb0:	b009      	add	sp, #36	; 0x24
 8013eb2:	ecbd 8b06 	vpop	{d8-d10}
 8013eb6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013eba:	f001 bd89 	b.w	80159d0 <__math_uflow>
 8013ebe:	bf00      	nop
 8013ec0:	fff00000 	.word	0xfff00000
 8013ec4:	7ff00000 	.word	0x7ff00000
 8013ec8:	433fffff 	.word	0x433fffff
 8013ecc:	3ff00000 	.word	0x3ff00000
 8013ed0:	3fefffff 	.word	0x3fefffff
 8013ed4:	3fe00000 	.word	0x3fe00000
 8013ed8:	41e00000 	.word	0x41e00000
 8013edc:	4b60      	ldr	r3, [pc, #384]	; (8014060 <__ieee754_pow+0x3f0>)
 8013ede:	2200      	movs	r2, #0
 8013ee0:	f7ec f9d2 	bl	8000288 <__aeabi_dsub>
 8013ee4:	a354      	add	r3, pc, #336	; (adr r3, 8014038 <__ieee754_pow+0x3c8>)
 8013ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013eea:	4604      	mov	r4, r0
 8013eec:	460d      	mov	r5, r1
 8013eee:	f7ec fb83 	bl	80005f8 <__aeabi_dmul>
 8013ef2:	a353      	add	r3, pc, #332	; (adr r3, 8014040 <__ieee754_pow+0x3d0>)
 8013ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ef8:	4606      	mov	r6, r0
 8013efa:	460f      	mov	r7, r1
 8013efc:	4620      	mov	r0, r4
 8013efe:	4629      	mov	r1, r5
 8013f00:	f7ec fb7a 	bl	80005f8 <__aeabi_dmul>
 8013f04:	4b57      	ldr	r3, [pc, #348]	; (8014064 <__ieee754_pow+0x3f4>)
 8013f06:	4682      	mov	sl, r0
 8013f08:	468b      	mov	fp, r1
 8013f0a:	2200      	movs	r2, #0
 8013f0c:	4620      	mov	r0, r4
 8013f0e:	4629      	mov	r1, r5
 8013f10:	f7ec fb72 	bl	80005f8 <__aeabi_dmul>
 8013f14:	4602      	mov	r2, r0
 8013f16:	460b      	mov	r3, r1
 8013f18:	a14b      	add	r1, pc, #300	; (adr r1, 8014048 <__ieee754_pow+0x3d8>)
 8013f1a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013f1e:	f7ec f9b3 	bl	8000288 <__aeabi_dsub>
 8013f22:	4622      	mov	r2, r4
 8013f24:	462b      	mov	r3, r5
 8013f26:	f7ec fb67 	bl	80005f8 <__aeabi_dmul>
 8013f2a:	4602      	mov	r2, r0
 8013f2c:	460b      	mov	r3, r1
 8013f2e:	2000      	movs	r0, #0
 8013f30:	494d      	ldr	r1, [pc, #308]	; (8014068 <__ieee754_pow+0x3f8>)
 8013f32:	f7ec f9a9 	bl	8000288 <__aeabi_dsub>
 8013f36:	4622      	mov	r2, r4
 8013f38:	4680      	mov	r8, r0
 8013f3a:	4689      	mov	r9, r1
 8013f3c:	462b      	mov	r3, r5
 8013f3e:	4620      	mov	r0, r4
 8013f40:	4629      	mov	r1, r5
 8013f42:	f7ec fb59 	bl	80005f8 <__aeabi_dmul>
 8013f46:	4602      	mov	r2, r0
 8013f48:	460b      	mov	r3, r1
 8013f4a:	4640      	mov	r0, r8
 8013f4c:	4649      	mov	r1, r9
 8013f4e:	f7ec fb53 	bl	80005f8 <__aeabi_dmul>
 8013f52:	a33f      	add	r3, pc, #252	; (adr r3, 8014050 <__ieee754_pow+0x3e0>)
 8013f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f58:	f7ec fb4e 	bl	80005f8 <__aeabi_dmul>
 8013f5c:	4602      	mov	r2, r0
 8013f5e:	460b      	mov	r3, r1
 8013f60:	4650      	mov	r0, sl
 8013f62:	4659      	mov	r1, fp
 8013f64:	f7ec f990 	bl	8000288 <__aeabi_dsub>
 8013f68:	4602      	mov	r2, r0
 8013f6a:	460b      	mov	r3, r1
 8013f6c:	4680      	mov	r8, r0
 8013f6e:	4689      	mov	r9, r1
 8013f70:	4630      	mov	r0, r6
 8013f72:	4639      	mov	r1, r7
 8013f74:	f7ec f98a 	bl	800028c <__adddf3>
 8013f78:	2000      	movs	r0, #0
 8013f7a:	4632      	mov	r2, r6
 8013f7c:	463b      	mov	r3, r7
 8013f7e:	4604      	mov	r4, r0
 8013f80:	460d      	mov	r5, r1
 8013f82:	f7ec f981 	bl	8000288 <__aeabi_dsub>
 8013f86:	4602      	mov	r2, r0
 8013f88:	460b      	mov	r3, r1
 8013f8a:	4640      	mov	r0, r8
 8013f8c:	4649      	mov	r1, r9
 8013f8e:	f7ec f97b 	bl	8000288 <__aeabi_dsub>
 8013f92:	9b04      	ldr	r3, [sp, #16]
 8013f94:	9a06      	ldr	r2, [sp, #24]
 8013f96:	3b01      	subs	r3, #1
 8013f98:	4313      	orrs	r3, r2
 8013f9a:	4682      	mov	sl, r0
 8013f9c:	468b      	mov	fp, r1
 8013f9e:	f040 81e7 	bne.w	8014370 <__ieee754_pow+0x700>
 8013fa2:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8014058 <__ieee754_pow+0x3e8>
 8013fa6:	eeb0 8a47 	vmov.f32	s16, s14
 8013faa:	eef0 8a67 	vmov.f32	s17, s15
 8013fae:	e9dd 6700 	ldrd	r6, r7, [sp]
 8013fb2:	2600      	movs	r6, #0
 8013fb4:	4632      	mov	r2, r6
 8013fb6:	463b      	mov	r3, r7
 8013fb8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013fbc:	f7ec f964 	bl	8000288 <__aeabi_dsub>
 8013fc0:	4622      	mov	r2, r4
 8013fc2:	462b      	mov	r3, r5
 8013fc4:	f7ec fb18 	bl	80005f8 <__aeabi_dmul>
 8013fc8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013fcc:	4680      	mov	r8, r0
 8013fce:	4689      	mov	r9, r1
 8013fd0:	4650      	mov	r0, sl
 8013fd2:	4659      	mov	r1, fp
 8013fd4:	f7ec fb10 	bl	80005f8 <__aeabi_dmul>
 8013fd8:	4602      	mov	r2, r0
 8013fda:	460b      	mov	r3, r1
 8013fdc:	4640      	mov	r0, r8
 8013fde:	4649      	mov	r1, r9
 8013fe0:	f7ec f954 	bl	800028c <__adddf3>
 8013fe4:	4632      	mov	r2, r6
 8013fe6:	463b      	mov	r3, r7
 8013fe8:	4680      	mov	r8, r0
 8013fea:	4689      	mov	r9, r1
 8013fec:	4620      	mov	r0, r4
 8013fee:	4629      	mov	r1, r5
 8013ff0:	f7ec fb02 	bl	80005f8 <__aeabi_dmul>
 8013ff4:	460b      	mov	r3, r1
 8013ff6:	4604      	mov	r4, r0
 8013ff8:	460d      	mov	r5, r1
 8013ffa:	4602      	mov	r2, r0
 8013ffc:	4649      	mov	r1, r9
 8013ffe:	4640      	mov	r0, r8
 8014000:	f7ec f944 	bl	800028c <__adddf3>
 8014004:	4b19      	ldr	r3, [pc, #100]	; (801406c <__ieee754_pow+0x3fc>)
 8014006:	4299      	cmp	r1, r3
 8014008:	ec45 4b19 	vmov	d9, r4, r5
 801400c:	4606      	mov	r6, r0
 801400e:	460f      	mov	r7, r1
 8014010:	468b      	mov	fp, r1
 8014012:	f340 82f1 	ble.w	80145f8 <__ieee754_pow+0x988>
 8014016:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 801401a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 801401e:	4303      	orrs	r3, r0
 8014020:	f000 81e4 	beq.w	80143ec <__ieee754_pow+0x77c>
 8014024:	ec51 0b18 	vmov	r0, r1, d8
 8014028:	2200      	movs	r2, #0
 801402a:	2300      	movs	r3, #0
 801402c:	f7ec fd56 	bl	8000adc <__aeabi_dcmplt>
 8014030:	3800      	subs	r0, #0
 8014032:	bf18      	it	ne
 8014034:	2001      	movne	r0, #1
 8014036:	e72b      	b.n	8013e90 <__ieee754_pow+0x220>
 8014038:	60000000 	.word	0x60000000
 801403c:	3ff71547 	.word	0x3ff71547
 8014040:	f85ddf44 	.word	0xf85ddf44
 8014044:	3e54ae0b 	.word	0x3e54ae0b
 8014048:	55555555 	.word	0x55555555
 801404c:	3fd55555 	.word	0x3fd55555
 8014050:	652b82fe 	.word	0x652b82fe
 8014054:	3ff71547 	.word	0x3ff71547
 8014058:	00000000 	.word	0x00000000
 801405c:	bff00000 	.word	0xbff00000
 8014060:	3ff00000 	.word	0x3ff00000
 8014064:	3fd00000 	.word	0x3fd00000
 8014068:	3fe00000 	.word	0x3fe00000
 801406c:	408fffff 	.word	0x408fffff
 8014070:	4bd5      	ldr	r3, [pc, #852]	; (80143c8 <__ieee754_pow+0x758>)
 8014072:	402b      	ands	r3, r5
 8014074:	2200      	movs	r2, #0
 8014076:	b92b      	cbnz	r3, 8014084 <__ieee754_pow+0x414>
 8014078:	4bd4      	ldr	r3, [pc, #848]	; (80143cc <__ieee754_pow+0x75c>)
 801407a:	f7ec fabd 	bl	80005f8 <__aeabi_dmul>
 801407e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8014082:	460c      	mov	r4, r1
 8014084:	1523      	asrs	r3, r4, #20
 8014086:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801408a:	4413      	add	r3, r2
 801408c:	9305      	str	r3, [sp, #20]
 801408e:	4bd0      	ldr	r3, [pc, #832]	; (80143d0 <__ieee754_pow+0x760>)
 8014090:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8014094:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8014098:	429c      	cmp	r4, r3
 801409a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801409e:	dd08      	ble.n	80140b2 <__ieee754_pow+0x442>
 80140a0:	4bcc      	ldr	r3, [pc, #816]	; (80143d4 <__ieee754_pow+0x764>)
 80140a2:	429c      	cmp	r4, r3
 80140a4:	f340 8162 	ble.w	801436c <__ieee754_pow+0x6fc>
 80140a8:	9b05      	ldr	r3, [sp, #20]
 80140aa:	3301      	adds	r3, #1
 80140ac:	9305      	str	r3, [sp, #20]
 80140ae:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80140b2:	2400      	movs	r4, #0
 80140b4:	00e3      	lsls	r3, r4, #3
 80140b6:	9307      	str	r3, [sp, #28]
 80140b8:	4bc7      	ldr	r3, [pc, #796]	; (80143d8 <__ieee754_pow+0x768>)
 80140ba:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80140be:	ed93 7b00 	vldr	d7, [r3]
 80140c2:	4629      	mov	r1, r5
 80140c4:	ec53 2b17 	vmov	r2, r3, d7
 80140c8:	eeb0 9a47 	vmov.f32	s18, s14
 80140cc:	eef0 9a67 	vmov.f32	s19, s15
 80140d0:	4682      	mov	sl, r0
 80140d2:	f7ec f8d9 	bl	8000288 <__aeabi_dsub>
 80140d6:	4652      	mov	r2, sl
 80140d8:	4606      	mov	r6, r0
 80140da:	460f      	mov	r7, r1
 80140dc:	462b      	mov	r3, r5
 80140de:	ec51 0b19 	vmov	r0, r1, d9
 80140e2:	f7ec f8d3 	bl	800028c <__adddf3>
 80140e6:	4602      	mov	r2, r0
 80140e8:	460b      	mov	r3, r1
 80140ea:	2000      	movs	r0, #0
 80140ec:	49bb      	ldr	r1, [pc, #748]	; (80143dc <__ieee754_pow+0x76c>)
 80140ee:	f7ec fbad 	bl	800084c <__aeabi_ddiv>
 80140f2:	ec41 0b1a 	vmov	d10, r0, r1
 80140f6:	4602      	mov	r2, r0
 80140f8:	460b      	mov	r3, r1
 80140fa:	4630      	mov	r0, r6
 80140fc:	4639      	mov	r1, r7
 80140fe:	f7ec fa7b 	bl	80005f8 <__aeabi_dmul>
 8014102:	2300      	movs	r3, #0
 8014104:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014108:	9302      	str	r3, [sp, #8]
 801410a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801410e:	46ab      	mov	fp, r5
 8014110:	106d      	asrs	r5, r5, #1
 8014112:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8014116:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 801411a:	ec41 0b18 	vmov	d8, r0, r1
 801411e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8014122:	2200      	movs	r2, #0
 8014124:	4640      	mov	r0, r8
 8014126:	4649      	mov	r1, r9
 8014128:	4614      	mov	r4, r2
 801412a:	461d      	mov	r5, r3
 801412c:	f7ec fa64 	bl	80005f8 <__aeabi_dmul>
 8014130:	4602      	mov	r2, r0
 8014132:	460b      	mov	r3, r1
 8014134:	4630      	mov	r0, r6
 8014136:	4639      	mov	r1, r7
 8014138:	f7ec f8a6 	bl	8000288 <__aeabi_dsub>
 801413c:	ec53 2b19 	vmov	r2, r3, d9
 8014140:	4606      	mov	r6, r0
 8014142:	460f      	mov	r7, r1
 8014144:	4620      	mov	r0, r4
 8014146:	4629      	mov	r1, r5
 8014148:	f7ec f89e 	bl	8000288 <__aeabi_dsub>
 801414c:	4602      	mov	r2, r0
 801414e:	460b      	mov	r3, r1
 8014150:	4650      	mov	r0, sl
 8014152:	4659      	mov	r1, fp
 8014154:	f7ec f898 	bl	8000288 <__aeabi_dsub>
 8014158:	4642      	mov	r2, r8
 801415a:	464b      	mov	r3, r9
 801415c:	f7ec fa4c 	bl	80005f8 <__aeabi_dmul>
 8014160:	4602      	mov	r2, r0
 8014162:	460b      	mov	r3, r1
 8014164:	4630      	mov	r0, r6
 8014166:	4639      	mov	r1, r7
 8014168:	f7ec f88e 	bl	8000288 <__aeabi_dsub>
 801416c:	ec53 2b1a 	vmov	r2, r3, d10
 8014170:	f7ec fa42 	bl	80005f8 <__aeabi_dmul>
 8014174:	ec53 2b18 	vmov	r2, r3, d8
 8014178:	ec41 0b19 	vmov	d9, r0, r1
 801417c:	ec51 0b18 	vmov	r0, r1, d8
 8014180:	f7ec fa3a 	bl	80005f8 <__aeabi_dmul>
 8014184:	a37c      	add	r3, pc, #496	; (adr r3, 8014378 <__ieee754_pow+0x708>)
 8014186:	e9d3 2300 	ldrd	r2, r3, [r3]
 801418a:	4604      	mov	r4, r0
 801418c:	460d      	mov	r5, r1
 801418e:	f7ec fa33 	bl	80005f8 <__aeabi_dmul>
 8014192:	a37b      	add	r3, pc, #492	; (adr r3, 8014380 <__ieee754_pow+0x710>)
 8014194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014198:	f7ec f878 	bl	800028c <__adddf3>
 801419c:	4622      	mov	r2, r4
 801419e:	462b      	mov	r3, r5
 80141a0:	f7ec fa2a 	bl	80005f8 <__aeabi_dmul>
 80141a4:	a378      	add	r3, pc, #480	; (adr r3, 8014388 <__ieee754_pow+0x718>)
 80141a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80141aa:	f7ec f86f 	bl	800028c <__adddf3>
 80141ae:	4622      	mov	r2, r4
 80141b0:	462b      	mov	r3, r5
 80141b2:	f7ec fa21 	bl	80005f8 <__aeabi_dmul>
 80141b6:	a376      	add	r3, pc, #472	; (adr r3, 8014390 <__ieee754_pow+0x720>)
 80141b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80141bc:	f7ec f866 	bl	800028c <__adddf3>
 80141c0:	4622      	mov	r2, r4
 80141c2:	462b      	mov	r3, r5
 80141c4:	f7ec fa18 	bl	80005f8 <__aeabi_dmul>
 80141c8:	a373      	add	r3, pc, #460	; (adr r3, 8014398 <__ieee754_pow+0x728>)
 80141ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80141ce:	f7ec f85d 	bl	800028c <__adddf3>
 80141d2:	4622      	mov	r2, r4
 80141d4:	462b      	mov	r3, r5
 80141d6:	f7ec fa0f 	bl	80005f8 <__aeabi_dmul>
 80141da:	a371      	add	r3, pc, #452	; (adr r3, 80143a0 <__ieee754_pow+0x730>)
 80141dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80141e0:	f7ec f854 	bl	800028c <__adddf3>
 80141e4:	4622      	mov	r2, r4
 80141e6:	4606      	mov	r6, r0
 80141e8:	460f      	mov	r7, r1
 80141ea:	462b      	mov	r3, r5
 80141ec:	4620      	mov	r0, r4
 80141ee:	4629      	mov	r1, r5
 80141f0:	f7ec fa02 	bl	80005f8 <__aeabi_dmul>
 80141f4:	4602      	mov	r2, r0
 80141f6:	460b      	mov	r3, r1
 80141f8:	4630      	mov	r0, r6
 80141fa:	4639      	mov	r1, r7
 80141fc:	f7ec f9fc 	bl	80005f8 <__aeabi_dmul>
 8014200:	4642      	mov	r2, r8
 8014202:	4604      	mov	r4, r0
 8014204:	460d      	mov	r5, r1
 8014206:	464b      	mov	r3, r9
 8014208:	ec51 0b18 	vmov	r0, r1, d8
 801420c:	f7ec f83e 	bl	800028c <__adddf3>
 8014210:	ec53 2b19 	vmov	r2, r3, d9
 8014214:	f7ec f9f0 	bl	80005f8 <__aeabi_dmul>
 8014218:	4622      	mov	r2, r4
 801421a:	462b      	mov	r3, r5
 801421c:	f7ec f836 	bl	800028c <__adddf3>
 8014220:	4642      	mov	r2, r8
 8014222:	4682      	mov	sl, r0
 8014224:	468b      	mov	fp, r1
 8014226:	464b      	mov	r3, r9
 8014228:	4640      	mov	r0, r8
 801422a:	4649      	mov	r1, r9
 801422c:	f7ec f9e4 	bl	80005f8 <__aeabi_dmul>
 8014230:	4b6b      	ldr	r3, [pc, #428]	; (80143e0 <__ieee754_pow+0x770>)
 8014232:	2200      	movs	r2, #0
 8014234:	4606      	mov	r6, r0
 8014236:	460f      	mov	r7, r1
 8014238:	f7ec f828 	bl	800028c <__adddf3>
 801423c:	4652      	mov	r2, sl
 801423e:	465b      	mov	r3, fp
 8014240:	f7ec f824 	bl	800028c <__adddf3>
 8014244:	2000      	movs	r0, #0
 8014246:	4604      	mov	r4, r0
 8014248:	460d      	mov	r5, r1
 801424a:	4602      	mov	r2, r0
 801424c:	460b      	mov	r3, r1
 801424e:	4640      	mov	r0, r8
 8014250:	4649      	mov	r1, r9
 8014252:	f7ec f9d1 	bl	80005f8 <__aeabi_dmul>
 8014256:	4b62      	ldr	r3, [pc, #392]	; (80143e0 <__ieee754_pow+0x770>)
 8014258:	4680      	mov	r8, r0
 801425a:	4689      	mov	r9, r1
 801425c:	2200      	movs	r2, #0
 801425e:	4620      	mov	r0, r4
 8014260:	4629      	mov	r1, r5
 8014262:	f7ec f811 	bl	8000288 <__aeabi_dsub>
 8014266:	4632      	mov	r2, r6
 8014268:	463b      	mov	r3, r7
 801426a:	f7ec f80d 	bl	8000288 <__aeabi_dsub>
 801426e:	4602      	mov	r2, r0
 8014270:	460b      	mov	r3, r1
 8014272:	4650      	mov	r0, sl
 8014274:	4659      	mov	r1, fp
 8014276:	f7ec f807 	bl	8000288 <__aeabi_dsub>
 801427a:	ec53 2b18 	vmov	r2, r3, d8
 801427e:	f7ec f9bb 	bl	80005f8 <__aeabi_dmul>
 8014282:	4622      	mov	r2, r4
 8014284:	4606      	mov	r6, r0
 8014286:	460f      	mov	r7, r1
 8014288:	462b      	mov	r3, r5
 801428a:	ec51 0b19 	vmov	r0, r1, d9
 801428e:	f7ec f9b3 	bl	80005f8 <__aeabi_dmul>
 8014292:	4602      	mov	r2, r0
 8014294:	460b      	mov	r3, r1
 8014296:	4630      	mov	r0, r6
 8014298:	4639      	mov	r1, r7
 801429a:	f7eb fff7 	bl	800028c <__adddf3>
 801429e:	4606      	mov	r6, r0
 80142a0:	460f      	mov	r7, r1
 80142a2:	4602      	mov	r2, r0
 80142a4:	460b      	mov	r3, r1
 80142a6:	4640      	mov	r0, r8
 80142a8:	4649      	mov	r1, r9
 80142aa:	f7eb ffef 	bl	800028c <__adddf3>
 80142ae:	a33e      	add	r3, pc, #248	; (adr r3, 80143a8 <__ieee754_pow+0x738>)
 80142b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80142b4:	2000      	movs	r0, #0
 80142b6:	4604      	mov	r4, r0
 80142b8:	460d      	mov	r5, r1
 80142ba:	f7ec f99d 	bl	80005f8 <__aeabi_dmul>
 80142be:	4642      	mov	r2, r8
 80142c0:	ec41 0b18 	vmov	d8, r0, r1
 80142c4:	464b      	mov	r3, r9
 80142c6:	4620      	mov	r0, r4
 80142c8:	4629      	mov	r1, r5
 80142ca:	f7eb ffdd 	bl	8000288 <__aeabi_dsub>
 80142ce:	4602      	mov	r2, r0
 80142d0:	460b      	mov	r3, r1
 80142d2:	4630      	mov	r0, r6
 80142d4:	4639      	mov	r1, r7
 80142d6:	f7eb ffd7 	bl	8000288 <__aeabi_dsub>
 80142da:	a335      	add	r3, pc, #212	; (adr r3, 80143b0 <__ieee754_pow+0x740>)
 80142dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80142e0:	f7ec f98a 	bl	80005f8 <__aeabi_dmul>
 80142e4:	a334      	add	r3, pc, #208	; (adr r3, 80143b8 <__ieee754_pow+0x748>)
 80142e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80142ea:	4606      	mov	r6, r0
 80142ec:	460f      	mov	r7, r1
 80142ee:	4620      	mov	r0, r4
 80142f0:	4629      	mov	r1, r5
 80142f2:	f7ec f981 	bl	80005f8 <__aeabi_dmul>
 80142f6:	4602      	mov	r2, r0
 80142f8:	460b      	mov	r3, r1
 80142fa:	4630      	mov	r0, r6
 80142fc:	4639      	mov	r1, r7
 80142fe:	f7eb ffc5 	bl	800028c <__adddf3>
 8014302:	9a07      	ldr	r2, [sp, #28]
 8014304:	4b37      	ldr	r3, [pc, #220]	; (80143e4 <__ieee754_pow+0x774>)
 8014306:	4413      	add	r3, r2
 8014308:	e9d3 2300 	ldrd	r2, r3, [r3]
 801430c:	f7eb ffbe 	bl	800028c <__adddf3>
 8014310:	4682      	mov	sl, r0
 8014312:	9805      	ldr	r0, [sp, #20]
 8014314:	468b      	mov	fp, r1
 8014316:	f7ec f905 	bl	8000524 <__aeabi_i2d>
 801431a:	9a07      	ldr	r2, [sp, #28]
 801431c:	4b32      	ldr	r3, [pc, #200]	; (80143e8 <__ieee754_pow+0x778>)
 801431e:	4413      	add	r3, r2
 8014320:	e9d3 8900 	ldrd	r8, r9, [r3]
 8014324:	4606      	mov	r6, r0
 8014326:	460f      	mov	r7, r1
 8014328:	4652      	mov	r2, sl
 801432a:	465b      	mov	r3, fp
 801432c:	ec51 0b18 	vmov	r0, r1, d8
 8014330:	f7eb ffac 	bl	800028c <__adddf3>
 8014334:	4642      	mov	r2, r8
 8014336:	464b      	mov	r3, r9
 8014338:	f7eb ffa8 	bl	800028c <__adddf3>
 801433c:	4632      	mov	r2, r6
 801433e:	463b      	mov	r3, r7
 8014340:	f7eb ffa4 	bl	800028c <__adddf3>
 8014344:	2000      	movs	r0, #0
 8014346:	4632      	mov	r2, r6
 8014348:	463b      	mov	r3, r7
 801434a:	4604      	mov	r4, r0
 801434c:	460d      	mov	r5, r1
 801434e:	f7eb ff9b 	bl	8000288 <__aeabi_dsub>
 8014352:	4642      	mov	r2, r8
 8014354:	464b      	mov	r3, r9
 8014356:	f7eb ff97 	bl	8000288 <__aeabi_dsub>
 801435a:	ec53 2b18 	vmov	r2, r3, d8
 801435e:	f7eb ff93 	bl	8000288 <__aeabi_dsub>
 8014362:	4602      	mov	r2, r0
 8014364:	460b      	mov	r3, r1
 8014366:	4650      	mov	r0, sl
 8014368:	4659      	mov	r1, fp
 801436a:	e610      	b.n	8013f8e <__ieee754_pow+0x31e>
 801436c:	2401      	movs	r4, #1
 801436e:	e6a1      	b.n	80140b4 <__ieee754_pow+0x444>
 8014370:	ed9f 7b13 	vldr	d7, [pc, #76]	; 80143c0 <__ieee754_pow+0x750>
 8014374:	e617      	b.n	8013fa6 <__ieee754_pow+0x336>
 8014376:	bf00      	nop
 8014378:	4a454eef 	.word	0x4a454eef
 801437c:	3fca7e28 	.word	0x3fca7e28
 8014380:	93c9db65 	.word	0x93c9db65
 8014384:	3fcd864a 	.word	0x3fcd864a
 8014388:	a91d4101 	.word	0xa91d4101
 801438c:	3fd17460 	.word	0x3fd17460
 8014390:	518f264d 	.word	0x518f264d
 8014394:	3fd55555 	.word	0x3fd55555
 8014398:	db6fabff 	.word	0xdb6fabff
 801439c:	3fdb6db6 	.word	0x3fdb6db6
 80143a0:	33333303 	.word	0x33333303
 80143a4:	3fe33333 	.word	0x3fe33333
 80143a8:	e0000000 	.word	0xe0000000
 80143ac:	3feec709 	.word	0x3feec709
 80143b0:	dc3a03fd 	.word	0xdc3a03fd
 80143b4:	3feec709 	.word	0x3feec709
 80143b8:	145b01f5 	.word	0x145b01f5
 80143bc:	be3e2fe0 	.word	0xbe3e2fe0
 80143c0:	00000000 	.word	0x00000000
 80143c4:	3ff00000 	.word	0x3ff00000
 80143c8:	7ff00000 	.word	0x7ff00000
 80143cc:	43400000 	.word	0x43400000
 80143d0:	0003988e 	.word	0x0003988e
 80143d4:	000bb679 	.word	0x000bb679
 80143d8:	08016460 	.word	0x08016460
 80143dc:	3ff00000 	.word	0x3ff00000
 80143e0:	40080000 	.word	0x40080000
 80143e4:	08016480 	.word	0x08016480
 80143e8:	08016470 	.word	0x08016470
 80143ec:	a3b5      	add	r3, pc, #724	; (adr r3, 80146c4 <__ieee754_pow+0xa54>)
 80143ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80143f2:	4640      	mov	r0, r8
 80143f4:	4649      	mov	r1, r9
 80143f6:	f7eb ff49 	bl	800028c <__adddf3>
 80143fa:	4622      	mov	r2, r4
 80143fc:	ec41 0b1a 	vmov	d10, r0, r1
 8014400:	462b      	mov	r3, r5
 8014402:	4630      	mov	r0, r6
 8014404:	4639      	mov	r1, r7
 8014406:	f7eb ff3f 	bl	8000288 <__aeabi_dsub>
 801440a:	4602      	mov	r2, r0
 801440c:	460b      	mov	r3, r1
 801440e:	ec51 0b1a 	vmov	r0, r1, d10
 8014412:	f7ec fb81 	bl	8000b18 <__aeabi_dcmpgt>
 8014416:	2800      	cmp	r0, #0
 8014418:	f47f ae04 	bne.w	8014024 <__ieee754_pow+0x3b4>
 801441c:	4aa4      	ldr	r2, [pc, #656]	; (80146b0 <__ieee754_pow+0xa40>)
 801441e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8014422:	4293      	cmp	r3, r2
 8014424:	f340 8108 	ble.w	8014638 <__ieee754_pow+0x9c8>
 8014428:	151b      	asrs	r3, r3, #20
 801442a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 801442e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8014432:	fa4a f303 	asr.w	r3, sl, r3
 8014436:	445b      	add	r3, fp
 8014438:	f3c3 520a 	ubfx	r2, r3, #20, #11
 801443c:	4e9d      	ldr	r6, [pc, #628]	; (80146b4 <__ieee754_pow+0xa44>)
 801443e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8014442:	4116      	asrs	r6, r2
 8014444:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8014448:	2000      	movs	r0, #0
 801444a:	ea23 0106 	bic.w	r1, r3, r6
 801444e:	f1c2 0214 	rsb	r2, r2, #20
 8014452:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8014456:	fa4a fa02 	asr.w	sl, sl, r2
 801445a:	f1bb 0f00 	cmp.w	fp, #0
 801445e:	4602      	mov	r2, r0
 8014460:	460b      	mov	r3, r1
 8014462:	4620      	mov	r0, r4
 8014464:	4629      	mov	r1, r5
 8014466:	bfb8      	it	lt
 8014468:	f1ca 0a00 	rsblt	sl, sl, #0
 801446c:	f7eb ff0c 	bl	8000288 <__aeabi_dsub>
 8014470:	ec41 0b19 	vmov	d9, r0, r1
 8014474:	4642      	mov	r2, r8
 8014476:	464b      	mov	r3, r9
 8014478:	ec51 0b19 	vmov	r0, r1, d9
 801447c:	f7eb ff06 	bl	800028c <__adddf3>
 8014480:	a37b      	add	r3, pc, #492	; (adr r3, 8014670 <__ieee754_pow+0xa00>)
 8014482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014486:	2000      	movs	r0, #0
 8014488:	4604      	mov	r4, r0
 801448a:	460d      	mov	r5, r1
 801448c:	f7ec f8b4 	bl	80005f8 <__aeabi_dmul>
 8014490:	ec53 2b19 	vmov	r2, r3, d9
 8014494:	4606      	mov	r6, r0
 8014496:	460f      	mov	r7, r1
 8014498:	4620      	mov	r0, r4
 801449a:	4629      	mov	r1, r5
 801449c:	f7eb fef4 	bl	8000288 <__aeabi_dsub>
 80144a0:	4602      	mov	r2, r0
 80144a2:	460b      	mov	r3, r1
 80144a4:	4640      	mov	r0, r8
 80144a6:	4649      	mov	r1, r9
 80144a8:	f7eb feee 	bl	8000288 <__aeabi_dsub>
 80144ac:	a372      	add	r3, pc, #456	; (adr r3, 8014678 <__ieee754_pow+0xa08>)
 80144ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80144b2:	f7ec f8a1 	bl	80005f8 <__aeabi_dmul>
 80144b6:	a372      	add	r3, pc, #456	; (adr r3, 8014680 <__ieee754_pow+0xa10>)
 80144b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80144bc:	4680      	mov	r8, r0
 80144be:	4689      	mov	r9, r1
 80144c0:	4620      	mov	r0, r4
 80144c2:	4629      	mov	r1, r5
 80144c4:	f7ec f898 	bl	80005f8 <__aeabi_dmul>
 80144c8:	4602      	mov	r2, r0
 80144ca:	460b      	mov	r3, r1
 80144cc:	4640      	mov	r0, r8
 80144ce:	4649      	mov	r1, r9
 80144d0:	f7eb fedc 	bl	800028c <__adddf3>
 80144d4:	4604      	mov	r4, r0
 80144d6:	460d      	mov	r5, r1
 80144d8:	4602      	mov	r2, r0
 80144da:	460b      	mov	r3, r1
 80144dc:	4630      	mov	r0, r6
 80144de:	4639      	mov	r1, r7
 80144e0:	f7eb fed4 	bl	800028c <__adddf3>
 80144e4:	4632      	mov	r2, r6
 80144e6:	463b      	mov	r3, r7
 80144e8:	4680      	mov	r8, r0
 80144ea:	4689      	mov	r9, r1
 80144ec:	f7eb fecc 	bl	8000288 <__aeabi_dsub>
 80144f0:	4602      	mov	r2, r0
 80144f2:	460b      	mov	r3, r1
 80144f4:	4620      	mov	r0, r4
 80144f6:	4629      	mov	r1, r5
 80144f8:	f7eb fec6 	bl	8000288 <__aeabi_dsub>
 80144fc:	4642      	mov	r2, r8
 80144fe:	4606      	mov	r6, r0
 8014500:	460f      	mov	r7, r1
 8014502:	464b      	mov	r3, r9
 8014504:	4640      	mov	r0, r8
 8014506:	4649      	mov	r1, r9
 8014508:	f7ec f876 	bl	80005f8 <__aeabi_dmul>
 801450c:	a35e      	add	r3, pc, #376	; (adr r3, 8014688 <__ieee754_pow+0xa18>)
 801450e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014512:	4604      	mov	r4, r0
 8014514:	460d      	mov	r5, r1
 8014516:	f7ec f86f 	bl	80005f8 <__aeabi_dmul>
 801451a:	a35d      	add	r3, pc, #372	; (adr r3, 8014690 <__ieee754_pow+0xa20>)
 801451c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014520:	f7eb feb2 	bl	8000288 <__aeabi_dsub>
 8014524:	4622      	mov	r2, r4
 8014526:	462b      	mov	r3, r5
 8014528:	f7ec f866 	bl	80005f8 <__aeabi_dmul>
 801452c:	a35a      	add	r3, pc, #360	; (adr r3, 8014698 <__ieee754_pow+0xa28>)
 801452e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014532:	f7eb feab 	bl	800028c <__adddf3>
 8014536:	4622      	mov	r2, r4
 8014538:	462b      	mov	r3, r5
 801453a:	f7ec f85d 	bl	80005f8 <__aeabi_dmul>
 801453e:	a358      	add	r3, pc, #352	; (adr r3, 80146a0 <__ieee754_pow+0xa30>)
 8014540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014544:	f7eb fea0 	bl	8000288 <__aeabi_dsub>
 8014548:	4622      	mov	r2, r4
 801454a:	462b      	mov	r3, r5
 801454c:	f7ec f854 	bl	80005f8 <__aeabi_dmul>
 8014550:	a355      	add	r3, pc, #340	; (adr r3, 80146a8 <__ieee754_pow+0xa38>)
 8014552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014556:	f7eb fe99 	bl	800028c <__adddf3>
 801455a:	4622      	mov	r2, r4
 801455c:	462b      	mov	r3, r5
 801455e:	f7ec f84b 	bl	80005f8 <__aeabi_dmul>
 8014562:	4602      	mov	r2, r0
 8014564:	460b      	mov	r3, r1
 8014566:	4640      	mov	r0, r8
 8014568:	4649      	mov	r1, r9
 801456a:	f7eb fe8d 	bl	8000288 <__aeabi_dsub>
 801456e:	4604      	mov	r4, r0
 8014570:	460d      	mov	r5, r1
 8014572:	4602      	mov	r2, r0
 8014574:	460b      	mov	r3, r1
 8014576:	4640      	mov	r0, r8
 8014578:	4649      	mov	r1, r9
 801457a:	f7ec f83d 	bl	80005f8 <__aeabi_dmul>
 801457e:	2200      	movs	r2, #0
 8014580:	ec41 0b19 	vmov	d9, r0, r1
 8014584:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8014588:	4620      	mov	r0, r4
 801458a:	4629      	mov	r1, r5
 801458c:	f7eb fe7c 	bl	8000288 <__aeabi_dsub>
 8014590:	4602      	mov	r2, r0
 8014592:	460b      	mov	r3, r1
 8014594:	ec51 0b19 	vmov	r0, r1, d9
 8014598:	f7ec f958 	bl	800084c <__aeabi_ddiv>
 801459c:	4632      	mov	r2, r6
 801459e:	4604      	mov	r4, r0
 80145a0:	460d      	mov	r5, r1
 80145a2:	463b      	mov	r3, r7
 80145a4:	4640      	mov	r0, r8
 80145a6:	4649      	mov	r1, r9
 80145a8:	f7ec f826 	bl	80005f8 <__aeabi_dmul>
 80145ac:	4632      	mov	r2, r6
 80145ae:	463b      	mov	r3, r7
 80145b0:	f7eb fe6c 	bl	800028c <__adddf3>
 80145b4:	4602      	mov	r2, r0
 80145b6:	460b      	mov	r3, r1
 80145b8:	4620      	mov	r0, r4
 80145ba:	4629      	mov	r1, r5
 80145bc:	f7eb fe64 	bl	8000288 <__aeabi_dsub>
 80145c0:	4642      	mov	r2, r8
 80145c2:	464b      	mov	r3, r9
 80145c4:	f7eb fe60 	bl	8000288 <__aeabi_dsub>
 80145c8:	460b      	mov	r3, r1
 80145ca:	4602      	mov	r2, r0
 80145cc:	493a      	ldr	r1, [pc, #232]	; (80146b8 <__ieee754_pow+0xa48>)
 80145ce:	2000      	movs	r0, #0
 80145d0:	f7eb fe5a 	bl	8000288 <__aeabi_dsub>
 80145d4:	ec41 0b10 	vmov	d0, r0, r1
 80145d8:	ee10 3a90 	vmov	r3, s1
 80145dc:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80145e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80145e4:	da2b      	bge.n	801463e <__ieee754_pow+0x9ce>
 80145e6:	4650      	mov	r0, sl
 80145e8:	f001 fa3a 	bl	8015a60 <scalbn>
 80145ec:	ec51 0b10 	vmov	r0, r1, d0
 80145f0:	ec53 2b18 	vmov	r2, r3, d8
 80145f4:	f7ff bbed 	b.w	8013dd2 <__ieee754_pow+0x162>
 80145f8:	4b30      	ldr	r3, [pc, #192]	; (80146bc <__ieee754_pow+0xa4c>)
 80145fa:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80145fe:	429e      	cmp	r6, r3
 8014600:	f77f af0c 	ble.w	801441c <__ieee754_pow+0x7ac>
 8014604:	4b2e      	ldr	r3, [pc, #184]	; (80146c0 <__ieee754_pow+0xa50>)
 8014606:	440b      	add	r3, r1
 8014608:	4303      	orrs	r3, r0
 801460a:	d009      	beq.n	8014620 <__ieee754_pow+0x9b0>
 801460c:	ec51 0b18 	vmov	r0, r1, d8
 8014610:	2200      	movs	r2, #0
 8014612:	2300      	movs	r3, #0
 8014614:	f7ec fa62 	bl	8000adc <__aeabi_dcmplt>
 8014618:	3800      	subs	r0, #0
 801461a:	bf18      	it	ne
 801461c:	2001      	movne	r0, #1
 801461e:	e447      	b.n	8013eb0 <__ieee754_pow+0x240>
 8014620:	4622      	mov	r2, r4
 8014622:	462b      	mov	r3, r5
 8014624:	f7eb fe30 	bl	8000288 <__aeabi_dsub>
 8014628:	4642      	mov	r2, r8
 801462a:	464b      	mov	r3, r9
 801462c:	f7ec fa6a 	bl	8000b04 <__aeabi_dcmpge>
 8014630:	2800      	cmp	r0, #0
 8014632:	f43f aef3 	beq.w	801441c <__ieee754_pow+0x7ac>
 8014636:	e7e9      	b.n	801460c <__ieee754_pow+0x99c>
 8014638:	f04f 0a00 	mov.w	sl, #0
 801463c:	e71a      	b.n	8014474 <__ieee754_pow+0x804>
 801463e:	ec51 0b10 	vmov	r0, r1, d0
 8014642:	4619      	mov	r1, r3
 8014644:	e7d4      	b.n	80145f0 <__ieee754_pow+0x980>
 8014646:	491c      	ldr	r1, [pc, #112]	; (80146b8 <__ieee754_pow+0xa48>)
 8014648:	2000      	movs	r0, #0
 801464a:	f7ff bb30 	b.w	8013cae <__ieee754_pow+0x3e>
 801464e:	2000      	movs	r0, #0
 8014650:	2100      	movs	r1, #0
 8014652:	f7ff bb2c 	b.w	8013cae <__ieee754_pow+0x3e>
 8014656:	4630      	mov	r0, r6
 8014658:	4639      	mov	r1, r7
 801465a:	f7ff bb28 	b.w	8013cae <__ieee754_pow+0x3e>
 801465e:	9204      	str	r2, [sp, #16]
 8014660:	f7ff bb7a 	b.w	8013d58 <__ieee754_pow+0xe8>
 8014664:	2300      	movs	r3, #0
 8014666:	f7ff bb64 	b.w	8013d32 <__ieee754_pow+0xc2>
 801466a:	bf00      	nop
 801466c:	f3af 8000 	nop.w
 8014670:	00000000 	.word	0x00000000
 8014674:	3fe62e43 	.word	0x3fe62e43
 8014678:	fefa39ef 	.word	0xfefa39ef
 801467c:	3fe62e42 	.word	0x3fe62e42
 8014680:	0ca86c39 	.word	0x0ca86c39
 8014684:	be205c61 	.word	0xbe205c61
 8014688:	72bea4d0 	.word	0x72bea4d0
 801468c:	3e663769 	.word	0x3e663769
 8014690:	c5d26bf1 	.word	0xc5d26bf1
 8014694:	3ebbbd41 	.word	0x3ebbbd41
 8014698:	af25de2c 	.word	0xaf25de2c
 801469c:	3f11566a 	.word	0x3f11566a
 80146a0:	16bebd93 	.word	0x16bebd93
 80146a4:	3f66c16c 	.word	0x3f66c16c
 80146a8:	5555553e 	.word	0x5555553e
 80146ac:	3fc55555 	.word	0x3fc55555
 80146b0:	3fe00000 	.word	0x3fe00000
 80146b4:	000fffff 	.word	0x000fffff
 80146b8:	3ff00000 	.word	0x3ff00000
 80146bc:	4090cbff 	.word	0x4090cbff
 80146c0:	3f6f3400 	.word	0x3f6f3400
 80146c4:	652b82fe 	.word	0x652b82fe
 80146c8:	3c971547 	.word	0x3c971547

080146cc <__ieee754_sqrt>:
 80146cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80146d0:	ec55 4b10 	vmov	r4, r5, d0
 80146d4:	4e55      	ldr	r6, [pc, #340]	; (801482c <__ieee754_sqrt+0x160>)
 80146d6:	43ae      	bics	r6, r5
 80146d8:	ee10 0a10 	vmov	r0, s0
 80146dc:	ee10 3a10 	vmov	r3, s0
 80146e0:	462a      	mov	r2, r5
 80146e2:	4629      	mov	r1, r5
 80146e4:	d110      	bne.n	8014708 <__ieee754_sqrt+0x3c>
 80146e6:	ee10 2a10 	vmov	r2, s0
 80146ea:	462b      	mov	r3, r5
 80146ec:	f7eb ff84 	bl	80005f8 <__aeabi_dmul>
 80146f0:	4602      	mov	r2, r0
 80146f2:	460b      	mov	r3, r1
 80146f4:	4620      	mov	r0, r4
 80146f6:	4629      	mov	r1, r5
 80146f8:	f7eb fdc8 	bl	800028c <__adddf3>
 80146fc:	4604      	mov	r4, r0
 80146fe:	460d      	mov	r5, r1
 8014700:	ec45 4b10 	vmov	d0, r4, r5
 8014704:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014708:	2d00      	cmp	r5, #0
 801470a:	dc10      	bgt.n	801472e <__ieee754_sqrt+0x62>
 801470c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8014710:	4330      	orrs	r0, r6
 8014712:	d0f5      	beq.n	8014700 <__ieee754_sqrt+0x34>
 8014714:	b15d      	cbz	r5, 801472e <__ieee754_sqrt+0x62>
 8014716:	ee10 2a10 	vmov	r2, s0
 801471a:	462b      	mov	r3, r5
 801471c:	ee10 0a10 	vmov	r0, s0
 8014720:	f7eb fdb2 	bl	8000288 <__aeabi_dsub>
 8014724:	4602      	mov	r2, r0
 8014726:	460b      	mov	r3, r1
 8014728:	f7ec f890 	bl	800084c <__aeabi_ddiv>
 801472c:	e7e6      	b.n	80146fc <__ieee754_sqrt+0x30>
 801472e:	1512      	asrs	r2, r2, #20
 8014730:	d074      	beq.n	801481c <__ieee754_sqrt+0x150>
 8014732:	07d4      	lsls	r4, r2, #31
 8014734:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8014738:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 801473c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8014740:	bf5e      	ittt	pl
 8014742:	0fda      	lsrpl	r2, r3, #31
 8014744:	005b      	lslpl	r3, r3, #1
 8014746:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 801474a:	2400      	movs	r4, #0
 801474c:	0fda      	lsrs	r2, r3, #31
 801474e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8014752:	107f      	asrs	r7, r7, #1
 8014754:	005b      	lsls	r3, r3, #1
 8014756:	2516      	movs	r5, #22
 8014758:	4620      	mov	r0, r4
 801475a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 801475e:	1886      	adds	r6, r0, r2
 8014760:	428e      	cmp	r6, r1
 8014762:	bfde      	ittt	le
 8014764:	1b89      	suble	r1, r1, r6
 8014766:	18b0      	addle	r0, r6, r2
 8014768:	18a4      	addle	r4, r4, r2
 801476a:	0049      	lsls	r1, r1, #1
 801476c:	3d01      	subs	r5, #1
 801476e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8014772:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8014776:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801477a:	d1f0      	bne.n	801475e <__ieee754_sqrt+0x92>
 801477c:	462a      	mov	r2, r5
 801477e:	f04f 0e20 	mov.w	lr, #32
 8014782:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8014786:	4281      	cmp	r1, r0
 8014788:	eb06 0c05 	add.w	ip, r6, r5
 801478c:	dc02      	bgt.n	8014794 <__ieee754_sqrt+0xc8>
 801478e:	d113      	bne.n	80147b8 <__ieee754_sqrt+0xec>
 8014790:	459c      	cmp	ip, r3
 8014792:	d811      	bhi.n	80147b8 <__ieee754_sqrt+0xec>
 8014794:	f1bc 0f00 	cmp.w	ip, #0
 8014798:	eb0c 0506 	add.w	r5, ip, r6
 801479c:	da43      	bge.n	8014826 <__ieee754_sqrt+0x15a>
 801479e:	2d00      	cmp	r5, #0
 80147a0:	db41      	blt.n	8014826 <__ieee754_sqrt+0x15a>
 80147a2:	f100 0801 	add.w	r8, r0, #1
 80147a6:	1a09      	subs	r1, r1, r0
 80147a8:	459c      	cmp	ip, r3
 80147aa:	bf88      	it	hi
 80147ac:	f101 31ff 	addhi.w	r1, r1, #4294967295
 80147b0:	eba3 030c 	sub.w	r3, r3, ip
 80147b4:	4432      	add	r2, r6
 80147b6:	4640      	mov	r0, r8
 80147b8:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 80147bc:	f1be 0e01 	subs.w	lr, lr, #1
 80147c0:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 80147c4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80147c8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80147cc:	d1db      	bne.n	8014786 <__ieee754_sqrt+0xba>
 80147ce:	430b      	orrs	r3, r1
 80147d0:	d006      	beq.n	80147e0 <__ieee754_sqrt+0x114>
 80147d2:	1c50      	adds	r0, r2, #1
 80147d4:	bf13      	iteet	ne
 80147d6:	3201      	addne	r2, #1
 80147d8:	3401      	addeq	r4, #1
 80147da:	4672      	moveq	r2, lr
 80147dc:	f022 0201 	bicne.w	r2, r2, #1
 80147e0:	1063      	asrs	r3, r4, #1
 80147e2:	0852      	lsrs	r2, r2, #1
 80147e4:	07e1      	lsls	r1, r4, #31
 80147e6:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80147ea:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80147ee:	bf48      	it	mi
 80147f0:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 80147f4:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 80147f8:	4614      	mov	r4, r2
 80147fa:	e781      	b.n	8014700 <__ieee754_sqrt+0x34>
 80147fc:	0ad9      	lsrs	r1, r3, #11
 80147fe:	3815      	subs	r0, #21
 8014800:	055b      	lsls	r3, r3, #21
 8014802:	2900      	cmp	r1, #0
 8014804:	d0fa      	beq.n	80147fc <__ieee754_sqrt+0x130>
 8014806:	02cd      	lsls	r5, r1, #11
 8014808:	d50a      	bpl.n	8014820 <__ieee754_sqrt+0x154>
 801480a:	f1c2 0420 	rsb	r4, r2, #32
 801480e:	fa23 f404 	lsr.w	r4, r3, r4
 8014812:	1e55      	subs	r5, r2, #1
 8014814:	4093      	lsls	r3, r2
 8014816:	4321      	orrs	r1, r4
 8014818:	1b42      	subs	r2, r0, r5
 801481a:	e78a      	b.n	8014732 <__ieee754_sqrt+0x66>
 801481c:	4610      	mov	r0, r2
 801481e:	e7f0      	b.n	8014802 <__ieee754_sqrt+0x136>
 8014820:	0049      	lsls	r1, r1, #1
 8014822:	3201      	adds	r2, #1
 8014824:	e7ef      	b.n	8014806 <__ieee754_sqrt+0x13a>
 8014826:	4680      	mov	r8, r0
 8014828:	e7bd      	b.n	80147a6 <__ieee754_sqrt+0xda>
 801482a:	bf00      	nop
 801482c:	7ff00000 	.word	0x7ff00000

08014830 <__ieee754_asinf>:
 8014830:	b538      	push	{r3, r4, r5, lr}
 8014832:	ee10 5a10 	vmov	r5, s0
 8014836:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 801483a:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 801483e:	ed2d 8b04 	vpush	{d8-d9}
 8014842:	d10c      	bne.n	801485e <__ieee754_asinf+0x2e>
 8014844:	eddf 7a5d 	vldr	s15, [pc, #372]	; 80149bc <__ieee754_asinf+0x18c>
 8014848:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 80149c0 <__ieee754_asinf+0x190>
 801484c:	ee60 7a27 	vmul.f32	s15, s0, s15
 8014850:	eee0 7a07 	vfma.f32	s15, s0, s14
 8014854:	eeb0 0a67 	vmov.f32	s0, s15
 8014858:	ecbd 8b04 	vpop	{d8-d9}
 801485c:	bd38      	pop	{r3, r4, r5, pc}
 801485e:	dd04      	ble.n	801486a <__ieee754_asinf+0x3a>
 8014860:	ee70 7a40 	vsub.f32	s15, s0, s0
 8014864:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8014868:	e7f6      	b.n	8014858 <__ieee754_asinf+0x28>
 801486a:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 801486e:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8014872:	da0b      	bge.n	801488c <__ieee754_asinf+0x5c>
 8014874:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 8014878:	da52      	bge.n	8014920 <__ieee754_asinf+0xf0>
 801487a:	eddf 7a52 	vldr	s15, [pc, #328]	; 80149c4 <__ieee754_asinf+0x194>
 801487e:	ee70 7a27 	vadd.f32	s15, s0, s15
 8014882:	eef4 7ae8 	vcmpe.f32	s15, s17
 8014886:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801488a:	dce5      	bgt.n	8014858 <__ieee754_asinf+0x28>
 801488c:	f001 fa42 	bl	8015d14 <fabsf>
 8014890:	ee38 0ac0 	vsub.f32	s0, s17, s0
 8014894:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 8014898:	ee20 8a08 	vmul.f32	s16, s0, s16
 801489c:	eddf 7a4a 	vldr	s15, [pc, #296]	; 80149c8 <__ieee754_asinf+0x198>
 80148a0:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 80149cc <__ieee754_asinf+0x19c>
 80148a4:	ed9f 9a4a 	vldr	s18, [pc, #296]	; 80149d0 <__ieee754_asinf+0x1a0>
 80148a8:	eea8 7a27 	vfma.f32	s14, s16, s15
 80148ac:	eddf 7a49 	vldr	s15, [pc, #292]	; 80149d4 <__ieee754_asinf+0x1a4>
 80148b0:	eee7 7a08 	vfma.f32	s15, s14, s16
 80148b4:	ed9f 7a48 	vldr	s14, [pc, #288]	; 80149d8 <__ieee754_asinf+0x1a8>
 80148b8:	eea7 7a88 	vfma.f32	s14, s15, s16
 80148bc:	eddf 7a47 	vldr	s15, [pc, #284]	; 80149dc <__ieee754_asinf+0x1ac>
 80148c0:	eee7 7a08 	vfma.f32	s15, s14, s16
 80148c4:	ed9f 7a46 	vldr	s14, [pc, #280]	; 80149e0 <__ieee754_asinf+0x1b0>
 80148c8:	eea7 9a88 	vfma.f32	s18, s15, s16
 80148cc:	eddf 7a45 	vldr	s15, [pc, #276]	; 80149e4 <__ieee754_asinf+0x1b4>
 80148d0:	eee8 7a07 	vfma.f32	s15, s16, s14
 80148d4:	ed9f 7a44 	vldr	s14, [pc, #272]	; 80149e8 <__ieee754_asinf+0x1b8>
 80148d8:	eea7 7a88 	vfma.f32	s14, s15, s16
 80148dc:	eddf 7a43 	vldr	s15, [pc, #268]	; 80149ec <__ieee754_asinf+0x1bc>
 80148e0:	eee7 7a08 	vfma.f32	s15, s14, s16
 80148e4:	eeb0 0a48 	vmov.f32	s0, s16
 80148e8:	eee7 8a88 	vfma.f32	s17, s15, s16
 80148ec:	f000 fd30 	bl	8015350 <__ieee754_sqrtf>
 80148f0:	4b3f      	ldr	r3, [pc, #252]	; (80149f0 <__ieee754_asinf+0x1c0>)
 80148f2:	ee29 9a08 	vmul.f32	s18, s18, s16
 80148f6:	429c      	cmp	r4, r3
 80148f8:	ee89 6a28 	vdiv.f32	s12, s18, s17
 80148fc:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8014900:	dd3d      	ble.n	801497e <__ieee754_asinf+0x14e>
 8014902:	eea0 0a06 	vfma.f32	s0, s0, s12
 8014906:	eddf 7a3b 	vldr	s15, [pc, #236]	; 80149f4 <__ieee754_asinf+0x1c4>
 801490a:	eee0 7a26 	vfma.f32	s15, s0, s13
 801490e:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 80149c0 <__ieee754_asinf+0x190>
 8014912:	ee30 0a67 	vsub.f32	s0, s0, s15
 8014916:	2d00      	cmp	r5, #0
 8014918:	bfd8      	it	le
 801491a:	eeb1 0a40 	vnegle.f32	s0, s0
 801491e:	e79b      	b.n	8014858 <__ieee754_asinf+0x28>
 8014920:	ee60 7a00 	vmul.f32	s15, s0, s0
 8014924:	eddf 6a28 	vldr	s13, [pc, #160]	; 80149c8 <__ieee754_asinf+0x198>
 8014928:	ed9f 7a28 	vldr	s14, [pc, #160]	; 80149cc <__ieee754_asinf+0x19c>
 801492c:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 80149e0 <__ieee754_asinf+0x1b0>
 8014930:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8014934:	eddf 6a27 	vldr	s13, [pc, #156]	; 80149d4 <__ieee754_asinf+0x1a4>
 8014938:	eee7 6a27 	vfma.f32	s13, s14, s15
 801493c:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80149d8 <__ieee754_asinf+0x1a8>
 8014940:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8014944:	eddf 6a25 	vldr	s13, [pc, #148]	; 80149dc <__ieee754_asinf+0x1ac>
 8014948:	eee7 6a27 	vfma.f32	s13, s14, s15
 801494c:	ed9f 7a20 	vldr	s14, [pc, #128]	; 80149d0 <__ieee754_asinf+0x1a0>
 8014950:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8014954:	eddf 6a23 	vldr	s13, [pc, #140]	; 80149e4 <__ieee754_asinf+0x1b4>
 8014958:	eee7 6a86 	vfma.f32	s13, s15, s12
 801495c:	ed9f 6a22 	vldr	s12, [pc, #136]	; 80149e8 <__ieee754_asinf+0x1b8>
 8014960:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8014964:	eddf 6a21 	vldr	s13, [pc, #132]	; 80149ec <__ieee754_asinf+0x1bc>
 8014968:	eee6 6a27 	vfma.f32	s13, s12, s15
 801496c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8014970:	eee6 8aa7 	vfma.f32	s17, s13, s15
 8014974:	eec7 7a28 	vdiv.f32	s15, s14, s17
 8014978:	eea0 0a27 	vfma.f32	s0, s0, s15
 801497c:	e76c      	b.n	8014858 <__ieee754_asinf+0x28>
 801497e:	ee10 3a10 	vmov	r3, s0
 8014982:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8014986:	f023 030f 	bic.w	r3, r3, #15
 801498a:	ee07 3a10 	vmov	s14, r3
 801498e:	eea7 8a47 	vfms.f32	s16, s14, s14
 8014992:	ee70 7a07 	vadd.f32	s15, s0, s14
 8014996:	ee30 0a00 	vadd.f32	s0, s0, s0
 801499a:	eec8 5a27 	vdiv.f32	s11, s16, s15
 801499e:	eddf 7a07 	vldr	s15, [pc, #28]	; 80149bc <__ieee754_asinf+0x18c>
 80149a2:	eee5 7ae6 	vfms.f32	s15, s11, s13
 80149a6:	eed0 7a06 	vfnms.f32	s15, s0, s12
 80149aa:	ed9f 0a13 	vldr	s0, [pc, #76]	; 80149f8 <__ieee754_asinf+0x1c8>
 80149ae:	eeb0 6a40 	vmov.f32	s12, s0
 80149b2:	eea7 6a66 	vfms.f32	s12, s14, s13
 80149b6:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80149ba:	e7aa      	b.n	8014912 <__ieee754_asinf+0xe2>
 80149bc:	b33bbd2e 	.word	0xb33bbd2e
 80149c0:	3fc90fdb 	.word	0x3fc90fdb
 80149c4:	7149f2ca 	.word	0x7149f2ca
 80149c8:	3811ef08 	.word	0x3811ef08
 80149cc:	3a4f7f04 	.word	0x3a4f7f04
 80149d0:	3e2aaaab 	.word	0x3e2aaaab
 80149d4:	bd241146 	.word	0xbd241146
 80149d8:	3e4e0aa8 	.word	0x3e4e0aa8
 80149dc:	bea6b090 	.word	0xbea6b090
 80149e0:	3d9dc62e 	.word	0x3d9dc62e
 80149e4:	bf303361 	.word	0xbf303361
 80149e8:	4001572d 	.word	0x4001572d
 80149ec:	c019d139 	.word	0xc019d139
 80149f0:	3f799999 	.word	0x3f799999
 80149f4:	333bbd2e 	.word	0x333bbd2e
 80149f8:	3f490fdb 	.word	0x3f490fdb

080149fc <__ieee754_atan2f>:
 80149fc:	ee10 2a90 	vmov	r2, s1
 8014a00:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8014a04:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8014a08:	b510      	push	{r4, lr}
 8014a0a:	eef0 7a40 	vmov.f32	s15, s0
 8014a0e:	dc06      	bgt.n	8014a1e <__ieee754_atan2f+0x22>
 8014a10:	ee10 0a10 	vmov	r0, s0
 8014a14:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8014a18:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8014a1c:	dd04      	ble.n	8014a28 <__ieee754_atan2f+0x2c>
 8014a1e:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8014a22:	eeb0 0a67 	vmov.f32	s0, s15
 8014a26:	bd10      	pop	{r4, pc}
 8014a28:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8014a2c:	d103      	bne.n	8014a36 <__ieee754_atan2f+0x3a>
 8014a2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014a32:	f001 b89b 	b.w	8015b6c <atanf>
 8014a36:	1794      	asrs	r4, r2, #30
 8014a38:	f004 0402 	and.w	r4, r4, #2
 8014a3c:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8014a40:	b943      	cbnz	r3, 8014a54 <__ieee754_atan2f+0x58>
 8014a42:	2c02      	cmp	r4, #2
 8014a44:	d05e      	beq.n	8014b04 <__ieee754_atan2f+0x108>
 8014a46:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8014b18 <__ieee754_atan2f+0x11c>
 8014a4a:	2c03      	cmp	r4, #3
 8014a4c:	bf08      	it	eq
 8014a4e:	eef0 7a47 	vmoveq.f32	s15, s14
 8014a52:	e7e6      	b.n	8014a22 <__ieee754_atan2f+0x26>
 8014a54:	b941      	cbnz	r1, 8014a68 <__ieee754_atan2f+0x6c>
 8014a56:	eddf 7a31 	vldr	s15, [pc, #196]	; 8014b1c <__ieee754_atan2f+0x120>
 8014a5a:	ed9f 0a31 	vldr	s0, [pc, #196]	; 8014b20 <__ieee754_atan2f+0x124>
 8014a5e:	2800      	cmp	r0, #0
 8014a60:	bfb8      	it	lt
 8014a62:	eef0 7a40 	vmovlt.f32	s15, s0
 8014a66:	e7dc      	b.n	8014a22 <__ieee754_atan2f+0x26>
 8014a68:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8014a6c:	d110      	bne.n	8014a90 <__ieee754_atan2f+0x94>
 8014a6e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8014a72:	f104 34ff 	add.w	r4, r4, #4294967295
 8014a76:	d107      	bne.n	8014a88 <__ieee754_atan2f+0x8c>
 8014a78:	2c02      	cmp	r4, #2
 8014a7a:	d846      	bhi.n	8014b0a <__ieee754_atan2f+0x10e>
 8014a7c:	4b29      	ldr	r3, [pc, #164]	; (8014b24 <__ieee754_atan2f+0x128>)
 8014a7e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8014a82:	edd4 7a00 	vldr	s15, [r4]
 8014a86:	e7cc      	b.n	8014a22 <__ieee754_atan2f+0x26>
 8014a88:	2c02      	cmp	r4, #2
 8014a8a:	d841      	bhi.n	8014b10 <__ieee754_atan2f+0x114>
 8014a8c:	4b26      	ldr	r3, [pc, #152]	; (8014b28 <__ieee754_atan2f+0x12c>)
 8014a8e:	e7f6      	b.n	8014a7e <__ieee754_atan2f+0x82>
 8014a90:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8014a94:	d0df      	beq.n	8014a56 <__ieee754_atan2f+0x5a>
 8014a96:	1a5b      	subs	r3, r3, r1
 8014a98:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 8014a9c:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8014aa0:	da1a      	bge.n	8014ad8 <__ieee754_atan2f+0xdc>
 8014aa2:	2a00      	cmp	r2, #0
 8014aa4:	da01      	bge.n	8014aaa <__ieee754_atan2f+0xae>
 8014aa6:	313c      	adds	r1, #60	; 0x3c
 8014aa8:	db19      	blt.n	8014ade <__ieee754_atan2f+0xe2>
 8014aaa:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8014aae:	f001 f931 	bl	8015d14 <fabsf>
 8014ab2:	f001 f85b 	bl	8015b6c <atanf>
 8014ab6:	eef0 7a40 	vmov.f32	s15, s0
 8014aba:	2c01      	cmp	r4, #1
 8014abc:	d012      	beq.n	8014ae4 <__ieee754_atan2f+0xe8>
 8014abe:	2c02      	cmp	r4, #2
 8014ac0:	d017      	beq.n	8014af2 <__ieee754_atan2f+0xf6>
 8014ac2:	2c00      	cmp	r4, #0
 8014ac4:	d0ad      	beq.n	8014a22 <__ieee754_atan2f+0x26>
 8014ac6:	ed9f 0a19 	vldr	s0, [pc, #100]	; 8014b2c <__ieee754_atan2f+0x130>
 8014aca:	ee77 7a80 	vadd.f32	s15, s15, s0
 8014ace:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8014b30 <__ieee754_atan2f+0x134>
 8014ad2:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8014ad6:	e7a4      	b.n	8014a22 <__ieee754_atan2f+0x26>
 8014ad8:	eddf 7a10 	vldr	s15, [pc, #64]	; 8014b1c <__ieee754_atan2f+0x120>
 8014adc:	e7ed      	b.n	8014aba <__ieee754_atan2f+0xbe>
 8014ade:	eddf 7a15 	vldr	s15, [pc, #84]	; 8014b34 <__ieee754_atan2f+0x138>
 8014ae2:	e7ea      	b.n	8014aba <__ieee754_atan2f+0xbe>
 8014ae4:	ee17 3a90 	vmov	r3, s15
 8014ae8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8014aec:	ee07 3a90 	vmov	s15, r3
 8014af0:	e797      	b.n	8014a22 <__ieee754_atan2f+0x26>
 8014af2:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8014b2c <__ieee754_atan2f+0x130>
 8014af6:	ee77 7a80 	vadd.f32	s15, s15, s0
 8014afa:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8014b30 <__ieee754_atan2f+0x134>
 8014afe:	ee70 7a67 	vsub.f32	s15, s0, s15
 8014b02:	e78e      	b.n	8014a22 <__ieee754_atan2f+0x26>
 8014b04:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8014b30 <__ieee754_atan2f+0x134>
 8014b08:	e78b      	b.n	8014a22 <__ieee754_atan2f+0x26>
 8014b0a:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8014b38 <__ieee754_atan2f+0x13c>
 8014b0e:	e788      	b.n	8014a22 <__ieee754_atan2f+0x26>
 8014b10:	eddf 7a08 	vldr	s15, [pc, #32]	; 8014b34 <__ieee754_atan2f+0x138>
 8014b14:	e785      	b.n	8014a22 <__ieee754_atan2f+0x26>
 8014b16:	bf00      	nop
 8014b18:	c0490fdb 	.word	0xc0490fdb
 8014b1c:	3fc90fdb 	.word	0x3fc90fdb
 8014b20:	bfc90fdb 	.word	0xbfc90fdb
 8014b24:	08016490 	.word	0x08016490
 8014b28:	0801649c 	.word	0x0801649c
 8014b2c:	33bbbd2e 	.word	0x33bbbd2e
 8014b30:	40490fdb 	.word	0x40490fdb
 8014b34:	00000000 	.word	0x00000000
 8014b38:	3f490fdb 	.word	0x3f490fdb

08014b3c <__ieee754_powf>:
 8014b3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014b40:	ee10 4a90 	vmov	r4, s1
 8014b44:	f034 4800 	bics.w	r8, r4, #2147483648	; 0x80000000
 8014b48:	ed2d 8b02 	vpush	{d8}
 8014b4c:	ee10 6a10 	vmov	r6, s0
 8014b50:	eeb0 8a40 	vmov.f32	s16, s0
 8014b54:	eef0 8a60 	vmov.f32	s17, s1
 8014b58:	d10c      	bne.n	8014b74 <__ieee754_powf+0x38>
 8014b5a:	f486 0680 	eor.w	r6, r6, #4194304	; 0x400000
 8014b5e:	0076      	lsls	r6, r6, #1
 8014b60:	f516 0f00 	cmn.w	r6, #8388608	; 0x800000
 8014b64:	f240 8296 	bls.w	8015094 <__ieee754_powf+0x558>
 8014b68:	ee38 0a28 	vadd.f32	s0, s16, s17
 8014b6c:	ecbd 8b02 	vpop	{d8}
 8014b70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014b74:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8014b78:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8014b7c:	dcf4      	bgt.n	8014b68 <__ieee754_powf+0x2c>
 8014b7e:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 8014b82:	dd08      	ble.n	8014b96 <__ieee754_powf+0x5a>
 8014b84:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
 8014b88:	d1ee      	bne.n	8014b68 <__ieee754_powf+0x2c>
 8014b8a:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 8014b8e:	0064      	lsls	r4, r4, #1
 8014b90:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 8014b94:	e7e6      	b.n	8014b64 <__ieee754_powf+0x28>
 8014b96:	2e00      	cmp	r6, #0
 8014b98:	da20      	bge.n	8014bdc <__ieee754_powf+0xa0>
 8014b9a:	f1b8 4f97 	cmp.w	r8, #1266679808	; 0x4b800000
 8014b9e:	da2d      	bge.n	8014bfc <__ieee754_powf+0xc0>
 8014ba0:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 8014ba4:	f2c0 827f 	blt.w	80150a6 <__ieee754_powf+0x56a>
 8014ba8:	ea4f 53e8 	mov.w	r3, r8, asr #23
 8014bac:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8014bb0:	fa48 f703 	asr.w	r7, r8, r3
 8014bb4:	fa07 f303 	lsl.w	r3, r7, r3
 8014bb8:	4543      	cmp	r3, r8
 8014bba:	f040 8274 	bne.w	80150a6 <__ieee754_powf+0x56a>
 8014bbe:	f007 0701 	and.w	r7, r7, #1
 8014bc2:	f1c7 0702 	rsb	r7, r7, #2
 8014bc6:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 8014bca:	d11f      	bne.n	8014c0c <__ieee754_powf+0xd0>
 8014bcc:	2c00      	cmp	r4, #0
 8014bce:	f280 8267 	bge.w	80150a0 <__ieee754_powf+0x564>
 8014bd2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8014bd6:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8014bda:	e7c7      	b.n	8014b6c <__ieee754_powf+0x30>
 8014bdc:	2700      	movs	r7, #0
 8014bde:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 8014be2:	d1f0      	bne.n	8014bc6 <__ieee754_powf+0x8a>
 8014be4:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 8014be8:	f000 8254 	beq.w	8015094 <__ieee754_powf+0x558>
 8014bec:	dd08      	ble.n	8014c00 <__ieee754_powf+0xc4>
 8014bee:	ed9f 0ac2 	vldr	s0, [pc, #776]	; 8014ef8 <__ieee754_powf+0x3bc>
 8014bf2:	2c00      	cmp	r4, #0
 8014bf4:	bfa8      	it	ge
 8014bf6:	eeb0 0a68 	vmovge.f32	s0, s17
 8014bfa:	e7b7      	b.n	8014b6c <__ieee754_powf+0x30>
 8014bfc:	2702      	movs	r7, #2
 8014bfe:	e7ee      	b.n	8014bde <__ieee754_powf+0xa2>
 8014c00:	2c00      	cmp	r4, #0
 8014c02:	f280 824a 	bge.w	801509a <__ieee754_powf+0x55e>
 8014c06:	eeb1 0a68 	vneg.f32	s0, s17
 8014c0a:	e7af      	b.n	8014b6c <__ieee754_powf+0x30>
 8014c0c:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 8014c10:	d102      	bne.n	8014c18 <__ieee754_powf+0xdc>
 8014c12:	ee28 0a08 	vmul.f32	s0, s16, s16
 8014c16:	e7a9      	b.n	8014b6c <__ieee754_powf+0x30>
 8014c18:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 8014c1c:	eeb0 0a48 	vmov.f32	s0, s16
 8014c20:	d107      	bne.n	8014c32 <__ieee754_powf+0xf6>
 8014c22:	2e00      	cmp	r6, #0
 8014c24:	db05      	blt.n	8014c32 <__ieee754_powf+0xf6>
 8014c26:	ecbd 8b02 	vpop	{d8}
 8014c2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014c2e:	f000 bb8f 	b.w	8015350 <__ieee754_sqrtf>
 8014c32:	f001 f86f 	bl	8015d14 <fabsf>
 8014c36:	b125      	cbz	r5, 8014c42 <__ieee754_powf+0x106>
 8014c38:	f026 4340 	bic.w	r3, r6, #3221225472	; 0xc0000000
 8014c3c:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8014c40:	d116      	bne.n	8014c70 <__ieee754_powf+0x134>
 8014c42:	2c00      	cmp	r4, #0
 8014c44:	bfbc      	itt	lt
 8014c46:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 8014c4a:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8014c4e:	2e00      	cmp	r6, #0
 8014c50:	da8c      	bge.n	8014b6c <__ieee754_powf+0x30>
 8014c52:	f1a5 557e 	sub.w	r5, r5, #1065353216	; 0x3f800000
 8014c56:	ea55 0307 	orrs.w	r3, r5, r7
 8014c5a:	d104      	bne.n	8014c66 <__ieee754_powf+0x12a>
 8014c5c:	ee70 7a40 	vsub.f32	s15, s0, s0
 8014c60:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8014c64:	e782      	b.n	8014b6c <__ieee754_powf+0x30>
 8014c66:	2f01      	cmp	r7, #1
 8014c68:	d180      	bne.n	8014b6c <__ieee754_powf+0x30>
 8014c6a:	eeb1 0a40 	vneg.f32	s0, s0
 8014c6e:	e77d      	b.n	8014b6c <__ieee754_powf+0x30>
 8014c70:	0ff0      	lsrs	r0, r6, #31
 8014c72:	3801      	subs	r0, #1
 8014c74:	ea57 0300 	orrs.w	r3, r7, r0
 8014c78:	d104      	bne.n	8014c84 <__ieee754_powf+0x148>
 8014c7a:	ee38 8a48 	vsub.f32	s16, s16, s16
 8014c7e:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8014c82:	e773      	b.n	8014b6c <__ieee754_powf+0x30>
 8014c84:	f1b8 4f9a 	cmp.w	r8, #1291845632	; 0x4d000000
 8014c88:	dd74      	ble.n	8014d74 <__ieee754_powf+0x238>
 8014c8a:	4b9c      	ldr	r3, [pc, #624]	; (8014efc <__ieee754_powf+0x3c0>)
 8014c8c:	429d      	cmp	r5, r3
 8014c8e:	dc08      	bgt.n	8014ca2 <__ieee754_powf+0x166>
 8014c90:	2c00      	cmp	r4, #0
 8014c92:	da0b      	bge.n	8014cac <__ieee754_powf+0x170>
 8014c94:	2000      	movs	r0, #0
 8014c96:	ecbd 8b02 	vpop	{d8}
 8014c9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014c9e:	f000 bec5 	b.w	8015a2c <__math_oflowf>
 8014ca2:	4b97      	ldr	r3, [pc, #604]	; (8014f00 <__ieee754_powf+0x3c4>)
 8014ca4:	429d      	cmp	r5, r3
 8014ca6:	dd08      	ble.n	8014cba <__ieee754_powf+0x17e>
 8014ca8:	2c00      	cmp	r4, #0
 8014caa:	dcf3      	bgt.n	8014c94 <__ieee754_powf+0x158>
 8014cac:	2000      	movs	r0, #0
 8014cae:	ecbd 8b02 	vpop	{d8}
 8014cb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014cb6:	f000 beb3 	b.w	8015a20 <__math_uflowf>
 8014cba:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8014cbe:	ee30 0a67 	vsub.f32	s0, s0, s15
 8014cc2:	eddf 6a90 	vldr	s13, [pc, #576]	; 8014f04 <__ieee754_powf+0x3c8>
 8014cc6:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8014cca:	eee0 6a67 	vfms.f32	s13, s0, s15
 8014cce:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8014cd2:	eee6 7ac0 	vfms.f32	s15, s13, s0
 8014cd6:	ee20 7a00 	vmul.f32	s14, s0, s0
 8014cda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014cde:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8014f08 <__ieee754_powf+0x3cc>
 8014ce2:	ee67 7a67 	vnmul.f32	s15, s14, s15
 8014ce6:	ed9f 7a89 	vldr	s14, [pc, #548]	; 8014f0c <__ieee754_powf+0x3d0>
 8014cea:	eee0 7a07 	vfma.f32	s15, s0, s14
 8014cee:	ed9f 7a88 	vldr	s14, [pc, #544]	; 8014f10 <__ieee754_powf+0x3d4>
 8014cf2:	eef0 6a67 	vmov.f32	s13, s15
 8014cf6:	eee0 6a07 	vfma.f32	s13, s0, s14
 8014cfa:	ee16 3a90 	vmov	r3, s13
 8014cfe:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8014d02:	f023 030f 	bic.w	r3, r3, #15
 8014d06:	ee00 3a90 	vmov	s1, r3
 8014d0a:	eee0 0a47 	vfms.f32	s1, s0, s14
 8014d0e:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8014d12:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 8014d16:	f024 040f 	bic.w	r4, r4, #15
 8014d1a:	ee07 4a10 	vmov	s14, r4
 8014d1e:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8014d22:	ee38 7ac7 	vsub.f32	s14, s17, s14
 8014d26:	ee07 3a90 	vmov	s15, r3
 8014d2a:	eee7 0a27 	vfma.f32	s1, s14, s15
 8014d2e:	3f01      	subs	r7, #1
 8014d30:	ea57 0200 	orrs.w	r2, r7, r0
 8014d34:	ee07 4a10 	vmov	s14, r4
 8014d38:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014d3c:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8014d40:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8014d44:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8014d48:	ee17 4a10 	vmov	r4, s14
 8014d4c:	bf08      	it	eq
 8014d4e:	eeb0 8a40 	vmoveq.f32	s16, s0
 8014d52:	2c00      	cmp	r4, #0
 8014d54:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8014d58:	f340 817e 	ble.w	8015058 <__ieee754_powf+0x51c>
 8014d5c:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 8014d60:	f340 80f8 	ble.w	8014f54 <__ieee754_powf+0x418>
 8014d64:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8014d68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014d6c:	bf4c      	ite	mi
 8014d6e:	2001      	movmi	r0, #1
 8014d70:	2000      	movpl	r0, #0
 8014d72:	e790      	b.n	8014c96 <__ieee754_powf+0x15a>
 8014d74:	f016 4fff 	tst.w	r6, #2139095040	; 0x7f800000
 8014d78:	bf01      	itttt	eq
 8014d7a:	eddf 7a66 	vldreq	s15, [pc, #408]	; 8014f14 <__ieee754_powf+0x3d8>
 8014d7e:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 8014d82:	f06f 0217 	mvneq.w	r2, #23
 8014d86:	ee17 5a90 	vmoveq	r5, s15
 8014d8a:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8014d8e:	bf18      	it	ne
 8014d90:	2200      	movne	r2, #0
 8014d92:	3b7f      	subs	r3, #127	; 0x7f
 8014d94:	4413      	add	r3, r2
 8014d96:	4a60      	ldr	r2, [pc, #384]	; (8014f18 <__ieee754_powf+0x3dc>)
 8014d98:	f3c5 0516 	ubfx	r5, r5, #0, #23
 8014d9c:	4295      	cmp	r5, r2
 8014d9e:	f045 517e 	orr.w	r1, r5, #1065353216	; 0x3f800000
 8014da2:	dd06      	ble.n	8014db2 <__ieee754_powf+0x276>
 8014da4:	4a5d      	ldr	r2, [pc, #372]	; (8014f1c <__ieee754_powf+0x3e0>)
 8014da6:	4295      	cmp	r5, r2
 8014da8:	f340 80a4 	ble.w	8014ef4 <__ieee754_powf+0x3b8>
 8014dac:	3301      	adds	r3, #1
 8014dae:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8014db2:	2500      	movs	r5, #0
 8014db4:	4a5a      	ldr	r2, [pc, #360]	; (8014f20 <__ieee754_powf+0x3e4>)
 8014db6:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 8014dba:	ee07 1a90 	vmov	s15, r1
 8014dbe:	ed92 7a00 	vldr	s14, [r2]
 8014dc2:	4a58      	ldr	r2, [pc, #352]	; (8014f24 <__ieee754_powf+0x3e8>)
 8014dc4:	ee37 6a27 	vadd.f32	s12, s14, s15
 8014dc8:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8014dcc:	eec5 6a86 	vdiv.f32	s13, s11, s12
 8014dd0:	1049      	asrs	r1, r1, #1
 8014dd2:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8014dd6:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 8014dda:	eb01 5145 	add.w	r1, r1, r5, lsl #21
 8014dde:	ee37 5ac7 	vsub.f32	s10, s15, s14
 8014de2:	ee06 1a10 	vmov	s12, r1
 8014de6:	ee65 4a26 	vmul.f32	s9, s10, s13
 8014dea:	ee36 7a47 	vsub.f32	s14, s12, s14
 8014dee:	ee14 6a90 	vmov	r6, s9
 8014df2:	4016      	ands	r6, r2
 8014df4:	ee05 6a90 	vmov	s11, r6
 8014df8:	eea5 5ac6 	vfms.f32	s10, s11, s12
 8014dfc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014e00:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8014f28 <__ieee754_powf+0x3ec>
 8014e04:	eea5 5ae7 	vfms.f32	s10, s11, s15
 8014e08:	ee64 7aa4 	vmul.f32	s15, s9, s9
 8014e0c:	ee25 6a26 	vmul.f32	s12, s10, s13
 8014e10:	eddf 6a46 	vldr	s13, [pc, #280]	; 8014f2c <__ieee754_powf+0x3f0>
 8014e14:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8014e18:	eddf 6a45 	vldr	s13, [pc, #276]	; 8014f30 <__ieee754_powf+0x3f4>
 8014e1c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8014e20:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8014f04 <__ieee754_powf+0x3c8>
 8014e24:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8014e28:	eddf 6a42 	vldr	s13, [pc, #264]	; 8014f34 <__ieee754_powf+0x3f8>
 8014e2c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8014e30:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8014f38 <__ieee754_powf+0x3fc>
 8014e34:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8014e38:	ee74 6aa5 	vadd.f32	s13, s9, s11
 8014e3c:	ee27 5aa7 	vmul.f32	s10, s15, s15
 8014e40:	ee66 6a86 	vmul.f32	s13, s13, s12
 8014e44:	eee5 6a07 	vfma.f32	s13, s10, s14
 8014e48:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 8014e4c:	eef0 7a45 	vmov.f32	s15, s10
 8014e50:	eee5 7aa5 	vfma.f32	s15, s11, s11
 8014e54:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8014e58:	ee17 1a90 	vmov	r1, s15
 8014e5c:	4011      	ands	r1, r2
 8014e5e:	ee07 1a90 	vmov	s15, r1
 8014e62:	ee37 7ac5 	vsub.f32	s14, s15, s10
 8014e66:	eea5 7ae5 	vfms.f32	s14, s11, s11
 8014e6a:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8014e6e:	ee27 7a24 	vmul.f32	s14, s14, s9
 8014e72:	eea6 7a27 	vfma.f32	s14, s12, s15
 8014e76:	eeb0 6a47 	vmov.f32	s12, s14
 8014e7a:	eea5 6aa7 	vfma.f32	s12, s11, s15
 8014e7e:	ee16 1a10 	vmov	r1, s12
 8014e82:	4011      	ands	r1, r2
 8014e84:	ee06 1a90 	vmov	s13, r1
 8014e88:	eee5 6ae7 	vfms.f32	s13, s11, s15
 8014e8c:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8014f3c <__ieee754_powf+0x400>
 8014e90:	eddf 5a2b 	vldr	s11, [pc, #172]	; 8014f40 <__ieee754_powf+0x404>
 8014e94:	ee37 7a66 	vsub.f32	s14, s14, s13
 8014e98:	ee06 1a10 	vmov	s12, r1
 8014e9c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8014ea0:	eddf 7a28 	vldr	s15, [pc, #160]	; 8014f44 <__ieee754_powf+0x408>
 8014ea4:	4928      	ldr	r1, [pc, #160]	; (8014f48 <__ieee754_powf+0x40c>)
 8014ea6:	eea6 7a27 	vfma.f32	s14, s12, s15
 8014eaa:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 8014eae:	edd1 7a00 	vldr	s15, [r1]
 8014eb2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8014eb6:	ee07 3a90 	vmov	s15, r3
 8014eba:	4b24      	ldr	r3, [pc, #144]	; (8014f4c <__ieee754_powf+0x410>)
 8014ebc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8014ec0:	eef0 7a47 	vmov.f32	s15, s14
 8014ec4:	eee6 7a25 	vfma.f32	s15, s12, s11
 8014ec8:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8014ecc:	edd5 0a00 	vldr	s1, [r5]
 8014ed0:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8014ed4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8014ed8:	ee17 3a90 	vmov	r3, s15
 8014edc:	4013      	ands	r3, r2
 8014ede:	ee07 3a90 	vmov	s15, r3
 8014ee2:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8014ee6:	ee76 6ae0 	vsub.f32	s13, s13, s1
 8014eea:	eee6 6a65 	vfms.f32	s13, s12, s11
 8014eee:	ee77 7a66 	vsub.f32	s15, s14, s13
 8014ef2:	e70e      	b.n	8014d12 <__ieee754_powf+0x1d6>
 8014ef4:	2501      	movs	r5, #1
 8014ef6:	e75d      	b.n	8014db4 <__ieee754_powf+0x278>
 8014ef8:	00000000 	.word	0x00000000
 8014efc:	3f7ffff3 	.word	0x3f7ffff3
 8014f00:	3f800007 	.word	0x3f800007
 8014f04:	3eaaaaab 	.word	0x3eaaaaab
 8014f08:	3fb8aa3b 	.word	0x3fb8aa3b
 8014f0c:	36eca570 	.word	0x36eca570
 8014f10:	3fb8aa00 	.word	0x3fb8aa00
 8014f14:	4b800000 	.word	0x4b800000
 8014f18:	001cc471 	.word	0x001cc471
 8014f1c:	005db3d6 	.word	0x005db3d6
 8014f20:	080164a8 	.word	0x080164a8
 8014f24:	fffff000 	.word	0xfffff000
 8014f28:	3e6c3255 	.word	0x3e6c3255
 8014f2c:	3e53f142 	.word	0x3e53f142
 8014f30:	3e8ba305 	.word	0x3e8ba305
 8014f34:	3edb6db7 	.word	0x3edb6db7
 8014f38:	3f19999a 	.word	0x3f19999a
 8014f3c:	3f76384f 	.word	0x3f76384f
 8014f40:	3f763800 	.word	0x3f763800
 8014f44:	369dc3a0 	.word	0x369dc3a0
 8014f48:	080164b8 	.word	0x080164b8
 8014f4c:	080164b0 	.word	0x080164b0
 8014f50:	3338aa3c 	.word	0x3338aa3c
 8014f54:	f040 8095 	bne.w	8015082 <__ieee754_powf+0x546>
 8014f58:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 8014f50 <__ieee754_powf+0x414>
 8014f5c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8014f60:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8014f64:	eef4 6ac7 	vcmpe.f32	s13, s14
 8014f68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014f6c:	f73f aefa 	bgt.w	8014d64 <__ieee754_powf+0x228>
 8014f70:	15db      	asrs	r3, r3, #23
 8014f72:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 8014f76:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8014f7a:	4103      	asrs	r3, r0
 8014f7c:	4423      	add	r3, r4
 8014f7e:	494b      	ldr	r1, [pc, #300]	; (80150ac <__ieee754_powf+0x570>)
 8014f80:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8014f84:	3a7f      	subs	r2, #127	; 0x7f
 8014f86:	4111      	asrs	r1, r2
 8014f88:	ea23 0101 	bic.w	r1, r3, r1
 8014f8c:	ee07 1a10 	vmov	s14, r1
 8014f90:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8014f94:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8014f98:	f1c2 0217 	rsb	r2, r2, #23
 8014f9c:	4110      	asrs	r0, r2
 8014f9e:	2c00      	cmp	r4, #0
 8014fa0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014fa4:	bfb8      	it	lt
 8014fa6:	4240      	neglt	r0, r0
 8014fa8:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8014fac:	ed9f 0a40 	vldr	s0, [pc, #256]	; 80150b0 <__ieee754_powf+0x574>
 8014fb0:	eddf 6a40 	vldr	s13, [pc, #256]	; 80150b4 <__ieee754_powf+0x578>
 8014fb4:	ee17 3a10 	vmov	r3, s14
 8014fb8:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8014fbc:	f023 030f 	bic.w	r3, r3, #15
 8014fc0:	ee07 3a10 	vmov	s14, r3
 8014fc4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014fc8:	ee27 0a00 	vmul.f32	s0, s14, s0
 8014fcc:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8014fd0:	eddf 7a39 	vldr	s15, [pc, #228]	; 80150b8 <__ieee754_powf+0x57c>
 8014fd4:	eea0 0aa7 	vfma.f32	s0, s1, s15
 8014fd8:	eef0 7a40 	vmov.f32	s15, s0
 8014fdc:	eee7 7a26 	vfma.f32	s15, s14, s13
 8014fe0:	eeb0 6a67 	vmov.f32	s12, s15
 8014fe4:	eea7 6a66 	vfms.f32	s12, s14, s13
 8014fe8:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8014fec:	ee30 0a46 	vsub.f32	s0, s0, s12
 8014ff0:	eddf 6a32 	vldr	s13, [pc, #200]	; 80150bc <__ieee754_powf+0x580>
 8014ff4:	ed9f 6a32 	vldr	s12, [pc, #200]	; 80150c0 <__ieee754_powf+0x584>
 8014ff8:	eee7 6a06 	vfma.f32	s13, s14, s12
 8014ffc:	ed9f 6a31 	vldr	s12, [pc, #196]	; 80150c4 <__ieee754_powf+0x588>
 8015000:	eea6 6a87 	vfma.f32	s12, s13, s14
 8015004:	eddf 6a30 	vldr	s13, [pc, #192]	; 80150c8 <__ieee754_powf+0x58c>
 8015008:	eee6 6a07 	vfma.f32	s13, s12, s14
 801500c:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 80150cc <__ieee754_powf+0x590>
 8015010:	eea6 6a87 	vfma.f32	s12, s13, s14
 8015014:	eef0 6a67 	vmov.f32	s13, s15
 8015018:	eee6 6a47 	vfms.f32	s13, s12, s14
 801501c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8015020:	ee27 6aa6 	vmul.f32	s12, s15, s13
 8015024:	ee76 6ac7 	vsub.f32	s13, s13, s14
 8015028:	eea7 0a80 	vfma.f32	s0, s15, s0
 801502c:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8015030:	ee37 0a40 	vsub.f32	s0, s14, s0
 8015034:	ee70 7a67 	vsub.f32	s15, s0, s15
 8015038:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801503c:	ee30 0a67 	vsub.f32	s0, s0, s15
 8015040:	ee10 3a10 	vmov	r3, s0
 8015044:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8015048:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801504c:	da1f      	bge.n	801508e <__ieee754_powf+0x552>
 801504e:	f000 febd 	bl	8015dcc <scalbnf>
 8015052:	ee20 0a08 	vmul.f32	s0, s0, s16
 8015056:	e589      	b.n	8014b6c <__ieee754_powf+0x30>
 8015058:	4a1d      	ldr	r2, [pc, #116]	; (80150d0 <__ieee754_powf+0x594>)
 801505a:	4293      	cmp	r3, r2
 801505c:	dd07      	ble.n	801506e <__ieee754_powf+0x532>
 801505e:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8015062:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015066:	bf4c      	ite	mi
 8015068:	2001      	movmi	r0, #1
 801506a:	2000      	movpl	r0, #0
 801506c:	e61f      	b.n	8014cae <__ieee754_powf+0x172>
 801506e:	d108      	bne.n	8015082 <__ieee754_powf+0x546>
 8015070:	ee37 7a67 	vsub.f32	s14, s14, s15
 8015074:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8015078:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801507c:	f6ff af78 	blt.w	8014f70 <__ieee754_powf+0x434>
 8015080:	e7ed      	b.n	801505e <__ieee754_powf+0x522>
 8015082:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 8015086:	f73f af73 	bgt.w	8014f70 <__ieee754_powf+0x434>
 801508a:	2000      	movs	r0, #0
 801508c:	e78c      	b.n	8014fa8 <__ieee754_powf+0x46c>
 801508e:	ee00 3a10 	vmov	s0, r3
 8015092:	e7de      	b.n	8015052 <__ieee754_powf+0x516>
 8015094:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8015098:	e568      	b.n	8014b6c <__ieee754_powf+0x30>
 801509a:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 80150d4 <__ieee754_powf+0x598>
 801509e:	e565      	b.n	8014b6c <__ieee754_powf+0x30>
 80150a0:	eeb0 0a48 	vmov.f32	s0, s16
 80150a4:	e562      	b.n	8014b6c <__ieee754_powf+0x30>
 80150a6:	2700      	movs	r7, #0
 80150a8:	e58d      	b.n	8014bc6 <__ieee754_powf+0x8a>
 80150aa:	bf00      	nop
 80150ac:	007fffff 	.word	0x007fffff
 80150b0:	35bfbe8c 	.word	0x35bfbe8c
 80150b4:	3f317200 	.word	0x3f317200
 80150b8:	3f317218 	.word	0x3f317218
 80150bc:	b5ddea0e 	.word	0xb5ddea0e
 80150c0:	3331bb4c 	.word	0x3331bb4c
 80150c4:	388ab355 	.word	0x388ab355
 80150c8:	bb360b61 	.word	0xbb360b61
 80150cc:	3e2aaaab 	.word	0x3e2aaaab
 80150d0:	43160000 	.word	0x43160000
 80150d4:	00000000 	.word	0x00000000

080150d8 <__ieee754_rem_pio2f>:
 80150d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80150da:	ee10 6a10 	vmov	r6, s0
 80150de:	4b8e      	ldr	r3, [pc, #568]	; (8015318 <__ieee754_rem_pio2f+0x240>)
 80150e0:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 80150e4:	429d      	cmp	r5, r3
 80150e6:	b087      	sub	sp, #28
 80150e8:	eef0 7a40 	vmov.f32	s15, s0
 80150ec:	4604      	mov	r4, r0
 80150ee:	dc05      	bgt.n	80150fc <__ieee754_rem_pio2f+0x24>
 80150f0:	2300      	movs	r3, #0
 80150f2:	ed80 0a00 	vstr	s0, [r0]
 80150f6:	6043      	str	r3, [r0, #4]
 80150f8:	2000      	movs	r0, #0
 80150fa:	e01a      	b.n	8015132 <__ieee754_rem_pio2f+0x5a>
 80150fc:	4b87      	ldr	r3, [pc, #540]	; (801531c <__ieee754_rem_pio2f+0x244>)
 80150fe:	429d      	cmp	r5, r3
 8015100:	dc46      	bgt.n	8015190 <__ieee754_rem_pio2f+0xb8>
 8015102:	2e00      	cmp	r6, #0
 8015104:	ed9f 0a86 	vldr	s0, [pc, #536]	; 8015320 <__ieee754_rem_pio2f+0x248>
 8015108:	4b86      	ldr	r3, [pc, #536]	; (8015324 <__ieee754_rem_pio2f+0x24c>)
 801510a:	f025 050f 	bic.w	r5, r5, #15
 801510e:	dd1f      	ble.n	8015150 <__ieee754_rem_pio2f+0x78>
 8015110:	429d      	cmp	r5, r3
 8015112:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8015116:	d00e      	beq.n	8015136 <__ieee754_rem_pio2f+0x5e>
 8015118:	ed9f 7a83 	vldr	s14, [pc, #524]	; 8015328 <__ieee754_rem_pio2f+0x250>
 801511c:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8015120:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8015124:	ed80 0a00 	vstr	s0, [r0]
 8015128:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801512c:	2001      	movs	r0, #1
 801512e:	edc4 7a01 	vstr	s15, [r4, #4]
 8015132:	b007      	add	sp, #28
 8015134:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015136:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 801532c <__ieee754_rem_pio2f+0x254>
 801513a:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8015330 <__ieee754_rem_pio2f+0x258>
 801513e:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8015142:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8015146:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801514a:	edc0 6a00 	vstr	s13, [r0]
 801514e:	e7eb      	b.n	8015128 <__ieee754_rem_pio2f+0x50>
 8015150:	429d      	cmp	r5, r3
 8015152:	ee77 7a80 	vadd.f32	s15, s15, s0
 8015156:	d00e      	beq.n	8015176 <__ieee754_rem_pio2f+0x9e>
 8015158:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8015328 <__ieee754_rem_pio2f+0x250>
 801515c:	ee37 0a87 	vadd.f32	s0, s15, s14
 8015160:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8015164:	ed80 0a00 	vstr	s0, [r0]
 8015168:	ee77 7a87 	vadd.f32	s15, s15, s14
 801516c:	f04f 30ff 	mov.w	r0, #4294967295
 8015170:	edc4 7a01 	vstr	s15, [r4, #4]
 8015174:	e7dd      	b.n	8015132 <__ieee754_rem_pio2f+0x5a>
 8015176:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 801532c <__ieee754_rem_pio2f+0x254>
 801517a:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8015330 <__ieee754_rem_pio2f+0x258>
 801517e:	ee77 7a80 	vadd.f32	s15, s15, s0
 8015182:	ee77 6a87 	vadd.f32	s13, s15, s14
 8015186:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801518a:	edc0 6a00 	vstr	s13, [r0]
 801518e:	e7eb      	b.n	8015168 <__ieee754_rem_pio2f+0x90>
 8015190:	4b68      	ldr	r3, [pc, #416]	; (8015334 <__ieee754_rem_pio2f+0x25c>)
 8015192:	429d      	cmp	r5, r3
 8015194:	dc72      	bgt.n	801527c <__ieee754_rem_pio2f+0x1a4>
 8015196:	f000 fdbd 	bl	8015d14 <fabsf>
 801519a:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8015338 <__ieee754_rem_pio2f+0x260>
 801519e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80151a2:	eee0 7a07 	vfma.f32	s15, s0, s14
 80151a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80151aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80151ae:	ee17 0a90 	vmov	r0, s15
 80151b2:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8015320 <__ieee754_rem_pio2f+0x248>
 80151b6:	eea7 0a67 	vfms.f32	s0, s14, s15
 80151ba:	281f      	cmp	r0, #31
 80151bc:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8015328 <__ieee754_rem_pio2f+0x250>
 80151c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80151c4:	eeb1 6a47 	vneg.f32	s12, s14
 80151c8:	ee70 6a67 	vsub.f32	s13, s0, s15
 80151cc:	ee16 2a90 	vmov	r2, s13
 80151d0:	dc1c      	bgt.n	801520c <__ieee754_rem_pio2f+0x134>
 80151d2:	495a      	ldr	r1, [pc, #360]	; (801533c <__ieee754_rem_pio2f+0x264>)
 80151d4:	1e47      	subs	r7, r0, #1
 80151d6:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 80151da:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 80151de:	428b      	cmp	r3, r1
 80151e0:	d014      	beq.n	801520c <__ieee754_rem_pio2f+0x134>
 80151e2:	6022      	str	r2, [r4, #0]
 80151e4:	ed94 7a00 	vldr	s14, [r4]
 80151e8:	ee30 0a47 	vsub.f32	s0, s0, s14
 80151ec:	2e00      	cmp	r6, #0
 80151ee:	ee30 0a67 	vsub.f32	s0, s0, s15
 80151f2:	ed84 0a01 	vstr	s0, [r4, #4]
 80151f6:	da9c      	bge.n	8015132 <__ieee754_rem_pio2f+0x5a>
 80151f8:	eeb1 7a47 	vneg.f32	s14, s14
 80151fc:	eeb1 0a40 	vneg.f32	s0, s0
 8015200:	ed84 7a00 	vstr	s14, [r4]
 8015204:	ed84 0a01 	vstr	s0, [r4, #4]
 8015208:	4240      	negs	r0, r0
 801520a:	e792      	b.n	8015132 <__ieee754_rem_pio2f+0x5a>
 801520c:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8015210:	15eb      	asrs	r3, r5, #23
 8015212:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 8015216:	2d08      	cmp	r5, #8
 8015218:	dde3      	ble.n	80151e2 <__ieee754_rem_pio2f+0x10a>
 801521a:	eddf 7a44 	vldr	s15, [pc, #272]	; 801532c <__ieee754_rem_pio2f+0x254>
 801521e:	eddf 5a44 	vldr	s11, [pc, #272]	; 8015330 <__ieee754_rem_pio2f+0x258>
 8015222:	eef0 6a40 	vmov.f32	s13, s0
 8015226:	eee6 6a27 	vfma.f32	s13, s12, s15
 801522a:	ee30 0a66 	vsub.f32	s0, s0, s13
 801522e:	eea6 0a27 	vfma.f32	s0, s12, s15
 8015232:	eef0 7a40 	vmov.f32	s15, s0
 8015236:	eed7 7a25 	vfnms.f32	s15, s14, s11
 801523a:	ee76 5ae7 	vsub.f32	s11, s13, s15
 801523e:	ee15 2a90 	vmov	r2, s11
 8015242:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8015246:	1a5b      	subs	r3, r3, r1
 8015248:	2b19      	cmp	r3, #25
 801524a:	dc04      	bgt.n	8015256 <__ieee754_rem_pio2f+0x17e>
 801524c:	edc4 5a00 	vstr	s11, [r4]
 8015250:	eeb0 0a66 	vmov.f32	s0, s13
 8015254:	e7c6      	b.n	80151e4 <__ieee754_rem_pio2f+0x10c>
 8015256:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8015340 <__ieee754_rem_pio2f+0x268>
 801525a:	eeb0 0a66 	vmov.f32	s0, s13
 801525e:	eea6 0a25 	vfma.f32	s0, s12, s11
 8015262:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8015266:	eddf 6a37 	vldr	s13, [pc, #220]	; 8015344 <__ieee754_rem_pio2f+0x26c>
 801526a:	eee6 7a25 	vfma.f32	s15, s12, s11
 801526e:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8015272:	ee30 7a67 	vsub.f32	s14, s0, s15
 8015276:	ed84 7a00 	vstr	s14, [r4]
 801527a:	e7b3      	b.n	80151e4 <__ieee754_rem_pio2f+0x10c>
 801527c:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8015280:	db06      	blt.n	8015290 <__ieee754_rem_pio2f+0x1b8>
 8015282:	ee70 7a40 	vsub.f32	s15, s0, s0
 8015286:	edc0 7a01 	vstr	s15, [r0, #4]
 801528a:	edc0 7a00 	vstr	s15, [r0]
 801528e:	e733      	b.n	80150f8 <__ieee754_rem_pio2f+0x20>
 8015290:	15ea      	asrs	r2, r5, #23
 8015292:	3a86      	subs	r2, #134	; 0x86
 8015294:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8015298:	ee07 3a90 	vmov	s15, r3
 801529c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80152a0:	eddf 6a29 	vldr	s13, [pc, #164]	; 8015348 <__ieee754_rem_pio2f+0x270>
 80152a4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80152a8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80152ac:	ed8d 7a03 	vstr	s14, [sp, #12]
 80152b0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80152b4:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80152b8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80152bc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80152c0:	ed8d 7a04 	vstr	s14, [sp, #16]
 80152c4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80152c8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80152cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80152d0:	edcd 7a05 	vstr	s15, [sp, #20]
 80152d4:	d11e      	bne.n	8015314 <__ieee754_rem_pio2f+0x23c>
 80152d6:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80152da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80152de:	bf14      	ite	ne
 80152e0:	2302      	movne	r3, #2
 80152e2:	2301      	moveq	r3, #1
 80152e4:	4919      	ldr	r1, [pc, #100]	; (801534c <__ieee754_rem_pio2f+0x274>)
 80152e6:	9101      	str	r1, [sp, #4]
 80152e8:	2102      	movs	r1, #2
 80152ea:	9100      	str	r1, [sp, #0]
 80152ec:	a803      	add	r0, sp, #12
 80152ee:	4621      	mov	r1, r4
 80152f0:	f000 f892 	bl	8015418 <__kernel_rem_pio2f>
 80152f4:	2e00      	cmp	r6, #0
 80152f6:	f6bf af1c 	bge.w	8015132 <__ieee754_rem_pio2f+0x5a>
 80152fa:	edd4 7a00 	vldr	s15, [r4]
 80152fe:	eef1 7a67 	vneg.f32	s15, s15
 8015302:	edc4 7a00 	vstr	s15, [r4]
 8015306:	edd4 7a01 	vldr	s15, [r4, #4]
 801530a:	eef1 7a67 	vneg.f32	s15, s15
 801530e:	edc4 7a01 	vstr	s15, [r4, #4]
 8015312:	e779      	b.n	8015208 <__ieee754_rem_pio2f+0x130>
 8015314:	2303      	movs	r3, #3
 8015316:	e7e5      	b.n	80152e4 <__ieee754_rem_pio2f+0x20c>
 8015318:	3f490fd8 	.word	0x3f490fd8
 801531c:	4016cbe3 	.word	0x4016cbe3
 8015320:	3fc90f80 	.word	0x3fc90f80
 8015324:	3fc90fd0 	.word	0x3fc90fd0
 8015328:	37354443 	.word	0x37354443
 801532c:	37354400 	.word	0x37354400
 8015330:	2e85a308 	.word	0x2e85a308
 8015334:	43490f80 	.word	0x43490f80
 8015338:	3f22f984 	.word	0x3f22f984
 801533c:	080164c0 	.word	0x080164c0
 8015340:	2e85a300 	.word	0x2e85a300
 8015344:	248d3132 	.word	0x248d3132
 8015348:	43800000 	.word	0x43800000
 801534c:	08016540 	.word	0x08016540

08015350 <__ieee754_sqrtf>:
 8015350:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8015354:	4770      	bx	lr
	...

08015358 <__kernel_cosf>:
 8015358:	ee10 3a10 	vmov	r3, s0
 801535c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8015360:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8015364:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8015368:	da05      	bge.n	8015376 <__kernel_cosf+0x1e>
 801536a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801536e:	ee17 2a90 	vmov	r2, s15
 8015372:	2a00      	cmp	r2, #0
 8015374:	d03d      	beq.n	80153f2 <__kernel_cosf+0x9a>
 8015376:	ee60 5a00 	vmul.f32	s11, s0, s0
 801537a:	eddf 7a1f 	vldr	s15, [pc, #124]	; 80153f8 <__kernel_cosf+0xa0>
 801537e:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80153fc <__kernel_cosf+0xa4>
 8015382:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8015400 <__kernel_cosf+0xa8>
 8015386:	4a1f      	ldr	r2, [pc, #124]	; (8015404 <__kernel_cosf+0xac>)
 8015388:	eea5 7aa7 	vfma.f32	s14, s11, s15
 801538c:	4293      	cmp	r3, r2
 801538e:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8015408 <__kernel_cosf+0xb0>
 8015392:	eee7 7a25 	vfma.f32	s15, s14, s11
 8015396:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 801540c <__kernel_cosf+0xb4>
 801539a:	eea7 7aa5 	vfma.f32	s14, s15, s11
 801539e:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8015410 <__kernel_cosf+0xb8>
 80153a2:	eee7 7a25 	vfma.f32	s15, s14, s11
 80153a6:	eeb0 7a66 	vmov.f32	s14, s13
 80153aa:	eea7 7aa5 	vfma.f32	s14, s15, s11
 80153ae:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80153b2:	ee65 7aa6 	vmul.f32	s15, s11, s13
 80153b6:	ee67 6a25 	vmul.f32	s13, s14, s11
 80153ba:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 80153be:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80153c2:	dc04      	bgt.n	80153ce <__kernel_cosf+0x76>
 80153c4:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80153c8:	ee36 0a47 	vsub.f32	s0, s12, s14
 80153cc:	4770      	bx	lr
 80153ce:	4a11      	ldr	r2, [pc, #68]	; (8015414 <__kernel_cosf+0xbc>)
 80153d0:	4293      	cmp	r3, r2
 80153d2:	bfda      	itte	le
 80153d4:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 80153d8:	ee06 3a90 	vmovle	s13, r3
 80153dc:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 80153e0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80153e4:	ee36 0a66 	vsub.f32	s0, s12, s13
 80153e8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80153ec:	ee30 0a67 	vsub.f32	s0, s0, s15
 80153f0:	4770      	bx	lr
 80153f2:	eeb0 0a46 	vmov.f32	s0, s12
 80153f6:	4770      	bx	lr
 80153f8:	ad47d74e 	.word	0xad47d74e
 80153fc:	310f74f6 	.word	0x310f74f6
 8015400:	3d2aaaab 	.word	0x3d2aaaab
 8015404:	3e999999 	.word	0x3e999999
 8015408:	b493f27c 	.word	0xb493f27c
 801540c:	37d00d01 	.word	0x37d00d01
 8015410:	bab60b61 	.word	0xbab60b61
 8015414:	3f480000 	.word	0x3f480000

08015418 <__kernel_rem_pio2f>:
 8015418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801541c:	ed2d 8b04 	vpush	{d8-d9}
 8015420:	b0d9      	sub	sp, #356	; 0x164
 8015422:	4688      	mov	r8, r1
 8015424:	9002      	str	r0, [sp, #8]
 8015426:	49bb      	ldr	r1, [pc, #748]	; (8015714 <__kernel_rem_pio2f+0x2fc>)
 8015428:	9866      	ldr	r0, [sp, #408]	; 0x198
 801542a:	9301      	str	r3, [sp, #4]
 801542c:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 8015430:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 8015434:	1e59      	subs	r1, r3, #1
 8015436:	1d13      	adds	r3, r2, #4
 8015438:	db27      	blt.n	801548a <__kernel_rem_pio2f+0x72>
 801543a:	f1b2 0b03 	subs.w	fp, r2, #3
 801543e:	bf48      	it	mi
 8015440:	f102 0b04 	addmi.w	fp, r2, #4
 8015444:	ea4f 00eb 	mov.w	r0, fp, asr #3
 8015448:	1c45      	adds	r5, r0, #1
 801544a:	00ec      	lsls	r4, r5, #3
 801544c:	1a47      	subs	r7, r0, r1
 801544e:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 8015724 <__kernel_rem_pio2f+0x30c>
 8015452:	9403      	str	r4, [sp, #12]
 8015454:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 8015458:	eb0a 0c01 	add.w	ip, sl, r1
 801545c:	ae1c      	add	r6, sp, #112	; 0x70
 801545e:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 8015462:	2400      	movs	r4, #0
 8015464:	4564      	cmp	r4, ip
 8015466:	dd12      	ble.n	801548e <__kernel_rem_pio2f+0x76>
 8015468:	9b01      	ldr	r3, [sp, #4]
 801546a:	ac1c      	add	r4, sp, #112	; 0x70
 801546c:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8015470:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 8015474:	f04f 0c00 	mov.w	ip, #0
 8015478:	45d4      	cmp	ip, sl
 801547a:	dc27      	bgt.n	80154cc <__kernel_rem_pio2f+0xb4>
 801547c:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8015480:	eddf 7aa8 	vldr	s15, [pc, #672]	; 8015724 <__kernel_rem_pio2f+0x30c>
 8015484:	4627      	mov	r7, r4
 8015486:	2600      	movs	r6, #0
 8015488:	e016      	b.n	80154b8 <__kernel_rem_pio2f+0xa0>
 801548a:	2000      	movs	r0, #0
 801548c:	e7dc      	b.n	8015448 <__kernel_rem_pio2f+0x30>
 801548e:	42e7      	cmn	r7, r4
 8015490:	bf5d      	ittte	pl
 8015492:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 8015496:	ee07 3a90 	vmovpl	s15, r3
 801549a:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 801549e:	eef0 7a47 	vmovmi.f32	s15, s14
 80154a2:	ece6 7a01 	vstmia	r6!, {s15}
 80154a6:	3401      	adds	r4, #1
 80154a8:	e7dc      	b.n	8015464 <__kernel_rem_pio2f+0x4c>
 80154aa:	ecf9 6a01 	vldmia	r9!, {s13}
 80154ae:	ed97 7a00 	vldr	s14, [r7]
 80154b2:	eee6 7a87 	vfma.f32	s15, s13, s14
 80154b6:	3601      	adds	r6, #1
 80154b8:	428e      	cmp	r6, r1
 80154ba:	f1a7 0704 	sub.w	r7, r7, #4
 80154be:	ddf4      	ble.n	80154aa <__kernel_rem_pio2f+0x92>
 80154c0:	eceb 7a01 	vstmia	fp!, {s15}
 80154c4:	f10c 0c01 	add.w	ip, ip, #1
 80154c8:	3404      	adds	r4, #4
 80154ca:	e7d5      	b.n	8015478 <__kernel_rem_pio2f+0x60>
 80154cc:	ab08      	add	r3, sp, #32
 80154ce:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 80154d2:	eddf 8a93 	vldr	s17, [pc, #588]	; 8015720 <__kernel_rem_pio2f+0x308>
 80154d6:	ed9f 9a91 	vldr	s18, [pc, #580]	; 801571c <__kernel_rem_pio2f+0x304>
 80154da:	9304      	str	r3, [sp, #16]
 80154dc:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 80154e0:	4656      	mov	r6, sl
 80154e2:	00b3      	lsls	r3, r6, #2
 80154e4:	9305      	str	r3, [sp, #20]
 80154e6:	ab58      	add	r3, sp, #352	; 0x160
 80154e8:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 80154ec:	ac08      	add	r4, sp, #32
 80154ee:	ab44      	add	r3, sp, #272	; 0x110
 80154f0:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 80154f4:	46a4      	mov	ip, r4
 80154f6:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 80154fa:	4637      	mov	r7, r6
 80154fc:	2f00      	cmp	r7, #0
 80154fe:	f1a0 0004 	sub.w	r0, r0, #4
 8015502:	dc4f      	bgt.n	80155a4 <__kernel_rem_pio2f+0x18c>
 8015504:	4628      	mov	r0, r5
 8015506:	e9cd 1206 	strd	r1, r2, [sp, #24]
 801550a:	f000 fc5f 	bl	8015dcc <scalbnf>
 801550e:	eeb0 8a40 	vmov.f32	s16, s0
 8015512:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8015516:	ee28 0a00 	vmul.f32	s0, s16, s0
 801551a:	f000 fc0f 	bl	8015d3c <floorf>
 801551e:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8015522:	eea0 8a67 	vfms.f32	s16, s0, s15
 8015526:	2d00      	cmp	r5, #0
 8015528:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 801552c:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8015530:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8015534:	ee17 9a90 	vmov	r9, s15
 8015538:	ee38 8a40 	vsub.f32	s16, s16, s0
 801553c:	dd44      	ble.n	80155c8 <__kernel_rem_pio2f+0x1b0>
 801553e:	f106 3cff 	add.w	ip, r6, #4294967295
 8015542:	ab08      	add	r3, sp, #32
 8015544:	f1c5 0e08 	rsb	lr, r5, #8
 8015548:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 801554c:	fa47 f00e 	asr.w	r0, r7, lr
 8015550:	4481      	add	r9, r0
 8015552:	fa00 f00e 	lsl.w	r0, r0, lr
 8015556:	1a3f      	subs	r7, r7, r0
 8015558:	f1c5 0007 	rsb	r0, r5, #7
 801555c:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 8015560:	4107      	asrs	r7, r0
 8015562:	2f00      	cmp	r7, #0
 8015564:	dd3f      	ble.n	80155e6 <__kernel_rem_pio2f+0x1ce>
 8015566:	f04f 0e00 	mov.w	lr, #0
 801556a:	f109 0901 	add.w	r9, r9, #1
 801556e:	4673      	mov	r3, lr
 8015570:	4576      	cmp	r6, lr
 8015572:	dc6b      	bgt.n	801564c <__kernel_rem_pio2f+0x234>
 8015574:	2d00      	cmp	r5, #0
 8015576:	dd04      	ble.n	8015582 <__kernel_rem_pio2f+0x16a>
 8015578:	2d01      	cmp	r5, #1
 801557a:	d078      	beq.n	801566e <__kernel_rem_pio2f+0x256>
 801557c:	2d02      	cmp	r5, #2
 801557e:	f000 8081 	beq.w	8015684 <__kernel_rem_pio2f+0x26c>
 8015582:	2f02      	cmp	r7, #2
 8015584:	d12f      	bne.n	80155e6 <__kernel_rem_pio2f+0x1ce>
 8015586:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801558a:	ee30 8a48 	vsub.f32	s16, s0, s16
 801558e:	b353      	cbz	r3, 80155e6 <__kernel_rem_pio2f+0x1ce>
 8015590:	4628      	mov	r0, r5
 8015592:	e9cd 1206 	strd	r1, r2, [sp, #24]
 8015596:	f000 fc19 	bl	8015dcc <scalbnf>
 801559a:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 801559e:	ee38 8a40 	vsub.f32	s16, s16, s0
 80155a2:	e020      	b.n	80155e6 <__kernel_rem_pio2f+0x1ce>
 80155a4:	ee60 7a28 	vmul.f32	s15, s0, s17
 80155a8:	3f01      	subs	r7, #1
 80155aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80155ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80155b2:	eea7 0ac9 	vfms.f32	s0, s15, s18
 80155b6:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80155ba:	ecac 0a01 	vstmia	ip!, {s0}
 80155be:	ed90 0a00 	vldr	s0, [r0]
 80155c2:	ee37 0a80 	vadd.f32	s0, s15, s0
 80155c6:	e799      	b.n	80154fc <__kernel_rem_pio2f+0xe4>
 80155c8:	d105      	bne.n	80155d6 <__kernel_rem_pio2f+0x1be>
 80155ca:	1e70      	subs	r0, r6, #1
 80155cc:	ab08      	add	r3, sp, #32
 80155ce:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 80155d2:	11ff      	asrs	r7, r7, #7
 80155d4:	e7c5      	b.n	8015562 <__kernel_rem_pio2f+0x14a>
 80155d6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80155da:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80155de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80155e2:	da31      	bge.n	8015648 <__kernel_rem_pio2f+0x230>
 80155e4:	2700      	movs	r7, #0
 80155e6:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80155ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80155ee:	f040 809b 	bne.w	8015728 <__kernel_rem_pio2f+0x310>
 80155f2:	1e74      	subs	r4, r6, #1
 80155f4:	46a4      	mov	ip, r4
 80155f6:	2000      	movs	r0, #0
 80155f8:	45d4      	cmp	ip, sl
 80155fa:	da4a      	bge.n	8015692 <__kernel_rem_pio2f+0x27a>
 80155fc:	2800      	cmp	r0, #0
 80155fe:	d07a      	beq.n	80156f6 <__kernel_rem_pio2f+0x2de>
 8015600:	ab08      	add	r3, sp, #32
 8015602:	3d08      	subs	r5, #8
 8015604:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8015608:	2b00      	cmp	r3, #0
 801560a:	f000 8081 	beq.w	8015710 <__kernel_rem_pio2f+0x2f8>
 801560e:	4628      	mov	r0, r5
 8015610:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8015614:	00a5      	lsls	r5, r4, #2
 8015616:	f000 fbd9 	bl	8015dcc <scalbnf>
 801561a:	aa44      	add	r2, sp, #272	; 0x110
 801561c:	1d2b      	adds	r3, r5, #4
 801561e:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8015720 <__kernel_rem_pio2f+0x308>
 8015622:	18d1      	adds	r1, r2, r3
 8015624:	4622      	mov	r2, r4
 8015626:	2a00      	cmp	r2, #0
 8015628:	f280 80ae 	bge.w	8015788 <__kernel_rem_pio2f+0x370>
 801562c:	4622      	mov	r2, r4
 801562e:	2a00      	cmp	r2, #0
 8015630:	f2c0 80cc 	blt.w	80157cc <__kernel_rem_pio2f+0x3b4>
 8015634:	a944      	add	r1, sp, #272	; 0x110
 8015636:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 801563a:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 8015718 <__kernel_rem_pio2f+0x300>
 801563e:	eddf 7a39 	vldr	s15, [pc, #228]	; 8015724 <__kernel_rem_pio2f+0x30c>
 8015642:	2000      	movs	r0, #0
 8015644:	1aa1      	subs	r1, r4, r2
 8015646:	e0b6      	b.n	80157b6 <__kernel_rem_pio2f+0x39e>
 8015648:	2702      	movs	r7, #2
 801564a:	e78c      	b.n	8015566 <__kernel_rem_pio2f+0x14e>
 801564c:	6820      	ldr	r0, [r4, #0]
 801564e:	b94b      	cbnz	r3, 8015664 <__kernel_rem_pio2f+0x24c>
 8015650:	b118      	cbz	r0, 801565a <__kernel_rem_pio2f+0x242>
 8015652:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8015656:	6020      	str	r0, [r4, #0]
 8015658:	2001      	movs	r0, #1
 801565a:	f10e 0e01 	add.w	lr, lr, #1
 801565e:	3404      	adds	r4, #4
 8015660:	4603      	mov	r3, r0
 8015662:	e785      	b.n	8015570 <__kernel_rem_pio2f+0x158>
 8015664:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 8015668:	6020      	str	r0, [r4, #0]
 801566a:	4618      	mov	r0, r3
 801566c:	e7f5      	b.n	801565a <__kernel_rem_pio2f+0x242>
 801566e:	1e74      	subs	r4, r6, #1
 8015670:	a808      	add	r0, sp, #32
 8015672:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8015676:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 801567a:	f10d 0c20 	add.w	ip, sp, #32
 801567e:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 8015682:	e77e      	b.n	8015582 <__kernel_rem_pio2f+0x16a>
 8015684:	1e74      	subs	r4, r6, #1
 8015686:	a808      	add	r0, sp, #32
 8015688:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 801568c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8015690:	e7f3      	b.n	801567a <__kernel_rem_pio2f+0x262>
 8015692:	ab08      	add	r3, sp, #32
 8015694:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8015698:	f10c 3cff 	add.w	ip, ip, #4294967295
 801569c:	4318      	orrs	r0, r3
 801569e:	e7ab      	b.n	80155f8 <__kernel_rem_pio2f+0x1e0>
 80156a0:	f10c 0c01 	add.w	ip, ip, #1
 80156a4:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 80156a8:	2c00      	cmp	r4, #0
 80156aa:	d0f9      	beq.n	80156a0 <__kernel_rem_pio2f+0x288>
 80156ac:	9b05      	ldr	r3, [sp, #20]
 80156ae:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 80156b2:	eb0d 0003 	add.w	r0, sp, r3
 80156b6:	9b01      	ldr	r3, [sp, #4]
 80156b8:	18f4      	adds	r4, r6, r3
 80156ba:	ab1c      	add	r3, sp, #112	; 0x70
 80156bc:	1c77      	adds	r7, r6, #1
 80156be:	384c      	subs	r0, #76	; 0x4c
 80156c0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80156c4:	4466      	add	r6, ip
 80156c6:	42be      	cmp	r6, r7
 80156c8:	f6ff af0b 	blt.w	80154e2 <__kernel_rem_pio2f+0xca>
 80156cc:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 80156d0:	f8dd e008 	ldr.w	lr, [sp, #8]
 80156d4:	ee07 3a90 	vmov	s15, r3
 80156d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80156dc:	f04f 0c00 	mov.w	ip, #0
 80156e0:	ece4 7a01 	vstmia	r4!, {s15}
 80156e4:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8015724 <__kernel_rem_pio2f+0x30c>
 80156e8:	46a1      	mov	r9, r4
 80156ea:	458c      	cmp	ip, r1
 80156ec:	dd07      	ble.n	80156fe <__kernel_rem_pio2f+0x2e6>
 80156ee:	ece0 7a01 	vstmia	r0!, {s15}
 80156f2:	3701      	adds	r7, #1
 80156f4:	e7e7      	b.n	80156c6 <__kernel_rem_pio2f+0x2ae>
 80156f6:	9804      	ldr	r0, [sp, #16]
 80156f8:	f04f 0c01 	mov.w	ip, #1
 80156fc:	e7d2      	b.n	80156a4 <__kernel_rem_pio2f+0x28c>
 80156fe:	ecfe 6a01 	vldmia	lr!, {s13}
 8015702:	ed39 7a01 	vldmdb	r9!, {s14}
 8015706:	f10c 0c01 	add.w	ip, ip, #1
 801570a:	eee6 7a87 	vfma.f32	s15, s13, s14
 801570e:	e7ec      	b.n	80156ea <__kernel_rem_pio2f+0x2d2>
 8015710:	3c01      	subs	r4, #1
 8015712:	e775      	b.n	8015600 <__kernel_rem_pio2f+0x1e8>
 8015714:	08016884 	.word	0x08016884
 8015718:	08016858 	.word	0x08016858
 801571c:	43800000 	.word	0x43800000
 8015720:	3b800000 	.word	0x3b800000
 8015724:	00000000 	.word	0x00000000
 8015728:	9b03      	ldr	r3, [sp, #12]
 801572a:	eeb0 0a48 	vmov.f32	s0, s16
 801572e:	1a98      	subs	r0, r3, r2
 8015730:	f000 fb4c 	bl	8015dcc <scalbnf>
 8015734:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 801571c <__kernel_rem_pio2f+0x304>
 8015738:	eeb4 0ac7 	vcmpe.f32	s0, s14
 801573c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015740:	db19      	blt.n	8015776 <__kernel_rem_pio2f+0x35e>
 8015742:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8015720 <__kernel_rem_pio2f+0x308>
 8015746:	ee60 7a27 	vmul.f32	s15, s0, s15
 801574a:	aa08      	add	r2, sp, #32
 801574c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8015750:	1c74      	adds	r4, r6, #1
 8015752:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015756:	3508      	adds	r5, #8
 8015758:	eea7 0ac7 	vfms.f32	s0, s15, s14
 801575c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8015760:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8015764:	ee10 3a10 	vmov	r3, s0
 8015768:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 801576c:	ee17 3a90 	vmov	r3, s15
 8015770:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8015774:	e74b      	b.n	801560e <__kernel_rem_pio2f+0x1f6>
 8015776:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801577a:	aa08      	add	r2, sp, #32
 801577c:	ee10 3a10 	vmov	r3, s0
 8015780:	4634      	mov	r4, r6
 8015782:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8015786:	e742      	b.n	801560e <__kernel_rem_pio2f+0x1f6>
 8015788:	a808      	add	r0, sp, #32
 801578a:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 801578e:	9001      	str	r0, [sp, #4]
 8015790:	ee07 0a90 	vmov	s15, r0
 8015794:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015798:	3a01      	subs	r2, #1
 801579a:	ee67 7a80 	vmul.f32	s15, s15, s0
 801579e:	ee20 0a07 	vmul.f32	s0, s0, s14
 80157a2:	ed61 7a01 	vstmdb	r1!, {s15}
 80157a6:	e73e      	b.n	8015626 <__kernel_rem_pio2f+0x20e>
 80157a8:	ecfc 6a01 	vldmia	ip!, {s13}
 80157ac:	ecb6 7a01 	vldmia	r6!, {s14}
 80157b0:	eee6 7a87 	vfma.f32	s15, s13, s14
 80157b4:	3001      	adds	r0, #1
 80157b6:	4550      	cmp	r0, sl
 80157b8:	dc01      	bgt.n	80157be <__kernel_rem_pio2f+0x3a6>
 80157ba:	4288      	cmp	r0, r1
 80157bc:	ddf4      	ble.n	80157a8 <__kernel_rem_pio2f+0x390>
 80157be:	a858      	add	r0, sp, #352	; 0x160
 80157c0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80157c4:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 80157c8:	3a01      	subs	r2, #1
 80157ca:	e730      	b.n	801562e <__kernel_rem_pio2f+0x216>
 80157cc:	9a66      	ldr	r2, [sp, #408]	; 0x198
 80157ce:	2a02      	cmp	r2, #2
 80157d0:	dc09      	bgt.n	80157e6 <__kernel_rem_pio2f+0x3ce>
 80157d2:	2a00      	cmp	r2, #0
 80157d4:	dc2a      	bgt.n	801582c <__kernel_rem_pio2f+0x414>
 80157d6:	d043      	beq.n	8015860 <__kernel_rem_pio2f+0x448>
 80157d8:	f009 0007 	and.w	r0, r9, #7
 80157dc:	b059      	add	sp, #356	; 0x164
 80157de:	ecbd 8b04 	vpop	{d8-d9}
 80157e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80157e6:	9b66      	ldr	r3, [sp, #408]	; 0x198
 80157e8:	2b03      	cmp	r3, #3
 80157ea:	d1f5      	bne.n	80157d8 <__kernel_rem_pio2f+0x3c0>
 80157ec:	ab30      	add	r3, sp, #192	; 0xc0
 80157ee:	442b      	add	r3, r5
 80157f0:	461a      	mov	r2, r3
 80157f2:	4619      	mov	r1, r3
 80157f4:	4620      	mov	r0, r4
 80157f6:	2800      	cmp	r0, #0
 80157f8:	f1a1 0104 	sub.w	r1, r1, #4
 80157fc:	dc51      	bgt.n	80158a2 <__kernel_rem_pio2f+0x48a>
 80157fe:	4621      	mov	r1, r4
 8015800:	2901      	cmp	r1, #1
 8015802:	f1a2 0204 	sub.w	r2, r2, #4
 8015806:	dc5c      	bgt.n	80158c2 <__kernel_rem_pio2f+0x4aa>
 8015808:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 8015724 <__kernel_rem_pio2f+0x30c>
 801580c:	3304      	adds	r3, #4
 801580e:	2c01      	cmp	r4, #1
 8015810:	dc67      	bgt.n	80158e2 <__kernel_rem_pio2f+0x4ca>
 8015812:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 8015816:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 801581a:	2f00      	cmp	r7, #0
 801581c:	d167      	bne.n	80158ee <__kernel_rem_pio2f+0x4d6>
 801581e:	edc8 6a00 	vstr	s13, [r8]
 8015822:	ed88 7a01 	vstr	s14, [r8, #4]
 8015826:	edc8 7a02 	vstr	s15, [r8, #8]
 801582a:	e7d5      	b.n	80157d8 <__kernel_rem_pio2f+0x3c0>
 801582c:	aa30      	add	r2, sp, #192	; 0xc0
 801582e:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 8015724 <__kernel_rem_pio2f+0x30c>
 8015832:	4413      	add	r3, r2
 8015834:	4622      	mov	r2, r4
 8015836:	2a00      	cmp	r2, #0
 8015838:	da24      	bge.n	8015884 <__kernel_rem_pio2f+0x46c>
 801583a:	b34f      	cbz	r7, 8015890 <__kernel_rem_pio2f+0x478>
 801583c:	eef1 7a47 	vneg.f32	s15, s14
 8015840:	edc8 7a00 	vstr	s15, [r8]
 8015844:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 8015848:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801584c:	aa31      	add	r2, sp, #196	; 0xc4
 801584e:	2301      	movs	r3, #1
 8015850:	429c      	cmp	r4, r3
 8015852:	da20      	bge.n	8015896 <__kernel_rem_pio2f+0x47e>
 8015854:	b10f      	cbz	r7, 801585a <__kernel_rem_pio2f+0x442>
 8015856:	eef1 7a67 	vneg.f32	s15, s15
 801585a:	edc8 7a01 	vstr	s15, [r8, #4]
 801585e:	e7bb      	b.n	80157d8 <__kernel_rem_pio2f+0x3c0>
 8015860:	aa30      	add	r2, sp, #192	; 0xc0
 8015862:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 8015724 <__kernel_rem_pio2f+0x30c>
 8015866:	4413      	add	r3, r2
 8015868:	2c00      	cmp	r4, #0
 801586a:	da05      	bge.n	8015878 <__kernel_rem_pio2f+0x460>
 801586c:	b10f      	cbz	r7, 8015872 <__kernel_rem_pio2f+0x45a>
 801586e:	eef1 7a67 	vneg.f32	s15, s15
 8015872:	edc8 7a00 	vstr	s15, [r8]
 8015876:	e7af      	b.n	80157d8 <__kernel_rem_pio2f+0x3c0>
 8015878:	ed33 7a01 	vldmdb	r3!, {s14}
 801587c:	3c01      	subs	r4, #1
 801587e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8015882:	e7f1      	b.n	8015868 <__kernel_rem_pio2f+0x450>
 8015884:	ed73 7a01 	vldmdb	r3!, {s15}
 8015888:	3a01      	subs	r2, #1
 801588a:	ee37 7a27 	vadd.f32	s14, s14, s15
 801588e:	e7d2      	b.n	8015836 <__kernel_rem_pio2f+0x41e>
 8015890:	eef0 7a47 	vmov.f32	s15, s14
 8015894:	e7d4      	b.n	8015840 <__kernel_rem_pio2f+0x428>
 8015896:	ecb2 7a01 	vldmia	r2!, {s14}
 801589a:	3301      	adds	r3, #1
 801589c:	ee77 7a87 	vadd.f32	s15, s15, s14
 80158a0:	e7d6      	b.n	8015850 <__kernel_rem_pio2f+0x438>
 80158a2:	edd1 7a00 	vldr	s15, [r1]
 80158a6:	edd1 6a01 	vldr	s13, [r1, #4]
 80158aa:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80158ae:	3801      	subs	r0, #1
 80158b0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80158b4:	ed81 7a00 	vstr	s14, [r1]
 80158b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80158bc:	edc1 7a01 	vstr	s15, [r1, #4]
 80158c0:	e799      	b.n	80157f6 <__kernel_rem_pio2f+0x3de>
 80158c2:	edd2 7a00 	vldr	s15, [r2]
 80158c6:	edd2 6a01 	vldr	s13, [r2, #4]
 80158ca:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80158ce:	3901      	subs	r1, #1
 80158d0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80158d4:	ed82 7a00 	vstr	s14, [r2]
 80158d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80158dc:	edc2 7a01 	vstr	s15, [r2, #4]
 80158e0:	e78e      	b.n	8015800 <__kernel_rem_pio2f+0x3e8>
 80158e2:	ed33 7a01 	vldmdb	r3!, {s14}
 80158e6:	3c01      	subs	r4, #1
 80158e8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80158ec:	e78f      	b.n	801580e <__kernel_rem_pio2f+0x3f6>
 80158ee:	eef1 6a66 	vneg.f32	s13, s13
 80158f2:	eeb1 7a47 	vneg.f32	s14, s14
 80158f6:	edc8 6a00 	vstr	s13, [r8]
 80158fa:	ed88 7a01 	vstr	s14, [r8, #4]
 80158fe:	eef1 7a67 	vneg.f32	s15, s15
 8015902:	e790      	b.n	8015826 <__kernel_rem_pio2f+0x40e>

08015904 <__kernel_sinf>:
 8015904:	ee10 3a10 	vmov	r3, s0
 8015908:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801590c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8015910:	da04      	bge.n	801591c <__kernel_sinf+0x18>
 8015912:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8015916:	ee17 3a90 	vmov	r3, s15
 801591a:	b35b      	cbz	r3, 8015974 <__kernel_sinf+0x70>
 801591c:	ee20 7a00 	vmul.f32	s14, s0, s0
 8015920:	eddf 7a15 	vldr	s15, [pc, #84]	; 8015978 <__kernel_sinf+0x74>
 8015924:	ed9f 6a15 	vldr	s12, [pc, #84]	; 801597c <__kernel_sinf+0x78>
 8015928:	eea7 6a27 	vfma.f32	s12, s14, s15
 801592c:	eddf 7a14 	vldr	s15, [pc, #80]	; 8015980 <__kernel_sinf+0x7c>
 8015930:	eee6 7a07 	vfma.f32	s15, s12, s14
 8015934:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8015984 <__kernel_sinf+0x80>
 8015938:	eea7 6a87 	vfma.f32	s12, s15, s14
 801593c:	eddf 7a12 	vldr	s15, [pc, #72]	; 8015988 <__kernel_sinf+0x84>
 8015940:	ee60 6a07 	vmul.f32	s13, s0, s14
 8015944:	eee6 7a07 	vfma.f32	s15, s12, s14
 8015948:	b930      	cbnz	r0, 8015958 <__kernel_sinf+0x54>
 801594a:	ed9f 6a10 	vldr	s12, [pc, #64]	; 801598c <__kernel_sinf+0x88>
 801594e:	eea7 6a27 	vfma.f32	s12, s14, s15
 8015952:	eea6 0a26 	vfma.f32	s0, s12, s13
 8015956:	4770      	bx	lr
 8015958:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 801595c:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8015960:	eee0 7a86 	vfma.f32	s15, s1, s12
 8015964:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8015968:	eddf 7a09 	vldr	s15, [pc, #36]	; 8015990 <__kernel_sinf+0x8c>
 801596c:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8015970:	ee30 0a60 	vsub.f32	s0, s0, s1
 8015974:	4770      	bx	lr
 8015976:	bf00      	nop
 8015978:	2f2ec9d3 	.word	0x2f2ec9d3
 801597c:	b2d72f34 	.word	0xb2d72f34
 8015980:	3638ef1b 	.word	0x3638ef1b
 8015984:	b9500d01 	.word	0xb9500d01
 8015988:	3c088889 	.word	0x3c088889
 801598c:	be2aaaab 	.word	0xbe2aaaab
 8015990:	3e2aaaab 	.word	0x3e2aaaab

08015994 <with_errno>:
 8015994:	b570      	push	{r4, r5, r6, lr}
 8015996:	4604      	mov	r4, r0
 8015998:	460d      	mov	r5, r1
 801599a:	4616      	mov	r6, r2
 801599c:	f7fb f916 	bl	8010bcc <__errno>
 80159a0:	4629      	mov	r1, r5
 80159a2:	6006      	str	r6, [r0, #0]
 80159a4:	4620      	mov	r0, r4
 80159a6:	bd70      	pop	{r4, r5, r6, pc}

080159a8 <xflow>:
 80159a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80159aa:	4614      	mov	r4, r2
 80159ac:	461d      	mov	r5, r3
 80159ae:	b108      	cbz	r0, 80159b4 <xflow+0xc>
 80159b0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80159b4:	e9cd 2300 	strd	r2, r3, [sp]
 80159b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80159bc:	4620      	mov	r0, r4
 80159be:	4629      	mov	r1, r5
 80159c0:	f7ea fe1a 	bl	80005f8 <__aeabi_dmul>
 80159c4:	2222      	movs	r2, #34	; 0x22
 80159c6:	b003      	add	sp, #12
 80159c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80159cc:	f7ff bfe2 	b.w	8015994 <with_errno>

080159d0 <__math_uflow>:
 80159d0:	b508      	push	{r3, lr}
 80159d2:	2200      	movs	r2, #0
 80159d4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80159d8:	f7ff ffe6 	bl	80159a8 <xflow>
 80159dc:	ec41 0b10 	vmov	d0, r0, r1
 80159e0:	bd08      	pop	{r3, pc}

080159e2 <__math_oflow>:
 80159e2:	b508      	push	{r3, lr}
 80159e4:	2200      	movs	r2, #0
 80159e6:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80159ea:	f7ff ffdd 	bl	80159a8 <xflow>
 80159ee:	ec41 0b10 	vmov	d0, r0, r1
 80159f2:	bd08      	pop	{r3, pc}

080159f4 <with_errnof>:
 80159f4:	b513      	push	{r0, r1, r4, lr}
 80159f6:	4604      	mov	r4, r0
 80159f8:	ed8d 0a01 	vstr	s0, [sp, #4]
 80159fc:	f7fb f8e6 	bl	8010bcc <__errno>
 8015a00:	ed9d 0a01 	vldr	s0, [sp, #4]
 8015a04:	6004      	str	r4, [r0, #0]
 8015a06:	b002      	add	sp, #8
 8015a08:	bd10      	pop	{r4, pc}

08015a0a <xflowf>:
 8015a0a:	b130      	cbz	r0, 8015a1a <xflowf+0x10>
 8015a0c:	eef1 7a40 	vneg.f32	s15, s0
 8015a10:	ee27 0a80 	vmul.f32	s0, s15, s0
 8015a14:	2022      	movs	r0, #34	; 0x22
 8015a16:	f7ff bfed 	b.w	80159f4 <with_errnof>
 8015a1a:	eef0 7a40 	vmov.f32	s15, s0
 8015a1e:	e7f7      	b.n	8015a10 <xflowf+0x6>

08015a20 <__math_uflowf>:
 8015a20:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8015a28 <__math_uflowf+0x8>
 8015a24:	f7ff bff1 	b.w	8015a0a <xflowf>
 8015a28:	10000000 	.word	0x10000000

08015a2c <__math_oflowf>:
 8015a2c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8015a34 <__math_oflowf+0x8>
 8015a30:	f7ff bfeb 	b.w	8015a0a <xflowf>
 8015a34:	70000000 	.word	0x70000000

08015a38 <fabs>:
 8015a38:	ec51 0b10 	vmov	r0, r1, d0
 8015a3c:	ee10 2a10 	vmov	r2, s0
 8015a40:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8015a44:	ec43 2b10 	vmov	d0, r2, r3
 8015a48:	4770      	bx	lr

08015a4a <finite>:
 8015a4a:	b082      	sub	sp, #8
 8015a4c:	ed8d 0b00 	vstr	d0, [sp]
 8015a50:	9801      	ldr	r0, [sp, #4]
 8015a52:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8015a56:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8015a5a:	0fc0      	lsrs	r0, r0, #31
 8015a5c:	b002      	add	sp, #8
 8015a5e:	4770      	bx	lr

08015a60 <scalbn>:
 8015a60:	b570      	push	{r4, r5, r6, lr}
 8015a62:	ec55 4b10 	vmov	r4, r5, d0
 8015a66:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8015a6a:	4606      	mov	r6, r0
 8015a6c:	462b      	mov	r3, r5
 8015a6e:	b99a      	cbnz	r2, 8015a98 <scalbn+0x38>
 8015a70:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8015a74:	4323      	orrs	r3, r4
 8015a76:	d036      	beq.n	8015ae6 <scalbn+0x86>
 8015a78:	4b39      	ldr	r3, [pc, #228]	; (8015b60 <scalbn+0x100>)
 8015a7a:	4629      	mov	r1, r5
 8015a7c:	ee10 0a10 	vmov	r0, s0
 8015a80:	2200      	movs	r2, #0
 8015a82:	f7ea fdb9 	bl	80005f8 <__aeabi_dmul>
 8015a86:	4b37      	ldr	r3, [pc, #220]	; (8015b64 <scalbn+0x104>)
 8015a88:	429e      	cmp	r6, r3
 8015a8a:	4604      	mov	r4, r0
 8015a8c:	460d      	mov	r5, r1
 8015a8e:	da10      	bge.n	8015ab2 <scalbn+0x52>
 8015a90:	a32b      	add	r3, pc, #172	; (adr r3, 8015b40 <scalbn+0xe0>)
 8015a92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a96:	e03a      	b.n	8015b0e <scalbn+0xae>
 8015a98:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8015a9c:	428a      	cmp	r2, r1
 8015a9e:	d10c      	bne.n	8015aba <scalbn+0x5a>
 8015aa0:	ee10 2a10 	vmov	r2, s0
 8015aa4:	4620      	mov	r0, r4
 8015aa6:	4629      	mov	r1, r5
 8015aa8:	f7ea fbf0 	bl	800028c <__adddf3>
 8015aac:	4604      	mov	r4, r0
 8015aae:	460d      	mov	r5, r1
 8015ab0:	e019      	b.n	8015ae6 <scalbn+0x86>
 8015ab2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8015ab6:	460b      	mov	r3, r1
 8015ab8:	3a36      	subs	r2, #54	; 0x36
 8015aba:	4432      	add	r2, r6
 8015abc:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8015ac0:	428a      	cmp	r2, r1
 8015ac2:	dd08      	ble.n	8015ad6 <scalbn+0x76>
 8015ac4:	2d00      	cmp	r5, #0
 8015ac6:	a120      	add	r1, pc, #128	; (adr r1, 8015b48 <scalbn+0xe8>)
 8015ac8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015acc:	da1c      	bge.n	8015b08 <scalbn+0xa8>
 8015ace:	a120      	add	r1, pc, #128	; (adr r1, 8015b50 <scalbn+0xf0>)
 8015ad0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015ad4:	e018      	b.n	8015b08 <scalbn+0xa8>
 8015ad6:	2a00      	cmp	r2, #0
 8015ad8:	dd08      	ble.n	8015aec <scalbn+0x8c>
 8015ada:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8015ade:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8015ae2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8015ae6:	ec45 4b10 	vmov	d0, r4, r5
 8015aea:	bd70      	pop	{r4, r5, r6, pc}
 8015aec:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8015af0:	da19      	bge.n	8015b26 <scalbn+0xc6>
 8015af2:	f24c 3350 	movw	r3, #50000	; 0xc350
 8015af6:	429e      	cmp	r6, r3
 8015af8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8015afc:	dd0a      	ble.n	8015b14 <scalbn+0xb4>
 8015afe:	a112      	add	r1, pc, #72	; (adr r1, 8015b48 <scalbn+0xe8>)
 8015b00:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015b04:	2b00      	cmp	r3, #0
 8015b06:	d1e2      	bne.n	8015ace <scalbn+0x6e>
 8015b08:	a30f      	add	r3, pc, #60	; (adr r3, 8015b48 <scalbn+0xe8>)
 8015b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b0e:	f7ea fd73 	bl	80005f8 <__aeabi_dmul>
 8015b12:	e7cb      	b.n	8015aac <scalbn+0x4c>
 8015b14:	a10a      	add	r1, pc, #40	; (adr r1, 8015b40 <scalbn+0xe0>)
 8015b16:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015b1a:	2b00      	cmp	r3, #0
 8015b1c:	d0b8      	beq.n	8015a90 <scalbn+0x30>
 8015b1e:	a10e      	add	r1, pc, #56	; (adr r1, 8015b58 <scalbn+0xf8>)
 8015b20:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015b24:	e7b4      	b.n	8015a90 <scalbn+0x30>
 8015b26:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8015b2a:	3236      	adds	r2, #54	; 0x36
 8015b2c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8015b30:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8015b34:	4620      	mov	r0, r4
 8015b36:	4b0c      	ldr	r3, [pc, #48]	; (8015b68 <scalbn+0x108>)
 8015b38:	2200      	movs	r2, #0
 8015b3a:	e7e8      	b.n	8015b0e <scalbn+0xae>
 8015b3c:	f3af 8000 	nop.w
 8015b40:	c2f8f359 	.word	0xc2f8f359
 8015b44:	01a56e1f 	.word	0x01a56e1f
 8015b48:	8800759c 	.word	0x8800759c
 8015b4c:	7e37e43c 	.word	0x7e37e43c
 8015b50:	8800759c 	.word	0x8800759c
 8015b54:	fe37e43c 	.word	0xfe37e43c
 8015b58:	c2f8f359 	.word	0xc2f8f359
 8015b5c:	81a56e1f 	.word	0x81a56e1f
 8015b60:	43500000 	.word	0x43500000
 8015b64:	ffff3cb0 	.word	0xffff3cb0
 8015b68:	3c900000 	.word	0x3c900000

08015b6c <atanf>:
 8015b6c:	b538      	push	{r3, r4, r5, lr}
 8015b6e:	ee10 5a10 	vmov	r5, s0
 8015b72:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8015b76:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 8015b7a:	eef0 7a40 	vmov.f32	s15, s0
 8015b7e:	db10      	blt.n	8015ba2 <atanf+0x36>
 8015b80:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8015b84:	dd04      	ble.n	8015b90 <atanf+0x24>
 8015b86:	ee70 7a00 	vadd.f32	s15, s0, s0
 8015b8a:	eeb0 0a67 	vmov.f32	s0, s15
 8015b8e:	bd38      	pop	{r3, r4, r5, pc}
 8015b90:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8015cc8 <atanf+0x15c>
 8015b94:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 8015ccc <atanf+0x160>
 8015b98:	2d00      	cmp	r5, #0
 8015b9a:	bfd8      	it	le
 8015b9c:	eef0 7a40 	vmovle.f32	s15, s0
 8015ba0:	e7f3      	b.n	8015b8a <atanf+0x1e>
 8015ba2:	4b4b      	ldr	r3, [pc, #300]	; (8015cd0 <atanf+0x164>)
 8015ba4:	429c      	cmp	r4, r3
 8015ba6:	dc10      	bgt.n	8015bca <atanf+0x5e>
 8015ba8:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8015bac:	da0a      	bge.n	8015bc4 <atanf+0x58>
 8015bae:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8015cd4 <atanf+0x168>
 8015bb2:	ee30 7a07 	vadd.f32	s14, s0, s14
 8015bb6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8015bba:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8015bbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015bc2:	dce2      	bgt.n	8015b8a <atanf+0x1e>
 8015bc4:	f04f 33ff 	mov.w	r3, #4294967295
 8015bc8:	e013      	b.n	8015bf2 <atanf+0x86>
 8015bca:	f000 f8a3 	bl	8015d14 <fabsf>
 8015bce:	4b42      	ldr	r3, [pc, #264]	; (8015cd8 <atanf+0x16c>)
 8015bd0:	429c      	cmp	r4, r3
 8015bd2:	dc4f      	bgt.n	8015c74 <atanf+0x108>
 8015bd4:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8015bd8:	429c      	cmp	r4, r3
 8015bda:	dc41      	bgt.n	8015c60 <atanf+0xf4>
 8015bdc:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8015be0:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8015be4:	eea0 7a27 	vfma.f32	s14, s0, s15
 8015be8:	2300      	movs	r3, #0
 8015bea:	ee30 0a27 	vadd.f32	s0, s0, s15
 8015bee:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8015bf2:	1c5a      	adds	r2, r3, #1
 8015bf4:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8015bf8:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8015cdc <atanf+0x170>
 8015bfc:	eddf 5a38 	vldr	s11, [pc, #224]	; 8015ce0 <atanf+0x174>
 8015c00:	ed9f 5a38 	vldr	s10, [pc, #224]	; 8015ce4 <atanf+0x178>
 8015c04:	ee66 6a06 	vmul.f32	s13, s12, s12
 8015c08:	eee6 5a87 	vfma.f32	s11, s13, s14
 8015c0c:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8015ce8 <atanf+0x17c>
 8015c10:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8015c14:	eddf 5a35 	vldr	s11, [pc, #212]	; 8015cec <atanf+0x180>
 8015c18:	eee7 5a26 	vfma.f32	s11, s14, s13
 8015c1c:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8015cf0 <atanf+0x184>
 8015c20:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8015c24:	eddf 5a33 	vldr	s11, [pc, #204]	; 8015cf4 <atanf+0x188>
 8015c28:	eee7 5a26 	vfma.f32	s11, s14, s13
 8015c2c:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8015cf8 <atanf+0x18c>
 8015c30:	eea6 5a87 	vfma.f32	s10, s13, s14
 8015c34:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8015cfc <atanf+0x190>
 8015c38:	eea5 7a26 	vfma.f32	s14, s10, s13
 8015c3c:	ed9f 5a30 	vldr	s10, [pc, #192]	; 8015d00 <atanf+0x194>
 8015c40:	eea7 5a26 	vfma.f32	s10, s14, s13
 8015c44:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8015d04 <atanf+0x198>
 8015c48:	eea5 7a26 	vfma.f32	s14, s10, s13
 8015c4c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8015c50:	eea5 7a86 	vfma.f32	s14, s11, s12
 8015c54:	ee27 7a87 	vmul.f32	s14, s15, s14
 8015c58:	d121      	bne.n	8015c9e <atanf+0x132>
 8015c5a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8015c5e:	e794      	b.n	8015b8a <atanf+0x1e>
 8015c60:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8015c64:	ee30 7a67 	vsub.f32	s14, s0, s15
 8015c68:	ee30 0a27 	vadd.f32	s0, s0, s15
 8015c6c:	2301      	movs	r3, #1
 8015c6e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8015c72:	e7be      	b.n	8015bf2 <atanf+0x86>
 8015c74:	4b24      	ldr	r3, [pc, #144]	; (8015d08 <atanf+0x19c>)
 8015c76:	429c      	cmp	r4, r3
 8015c78:	dc0b      	bgt.n	8015c92 <atanf+0x126>
 8015c7a:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8015c7e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8015c82:	eea0 7a27 	vfma.f32	s14, s0, s15
 8015c86:	2302      	movs	r3, #2
 8015c88:	ee70 6a67 	vsub.f32	s13, s0, s15
 8015c8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8015c90:	e7af      	b.n	8015bf2 <atanf+0x86>
 8015c92:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8015c96:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8015c9a:	2303      	movs	r3, #3
 8015c9c:	e7a9      	b.n	8015bf2 <atanf+0x86>
 8015c9e:	4a1b      	ldr	r2, [pc, #108]	; (8015d0c <atanf+0x1a0>)
 8015ca0:	491b      	ldr	r1, [pc, #108]	; (8015d10 <atanf+0x1a4>)
 8015ca2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8015ca6:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8015caa:	ed93 0a00 	vldr	s0, [r3]
 8015cae:	ee37 7a40 	vsub.f32	s14, s14, s0
 8015cb2:	ed92 0a00 	vldr	s0, [r2]
 8015cb6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015cba:	2d00      	cmp	r5, #0
 8015cbc:	ee70 7a67 	vsub.f32	s15, s0, s15
 8015cc0:	bfb8      	it	lt
 8015cc2:	eef1 7a67 	vneglt.f32	s15, s15
 8015cc6:	e760      	b.n	8015b8a <atanf+0x1e>
 8015cc8:	3fc90fdb 	.word	0x3fc90fdb
 8015ccc:	bfc90fdb 	.word	0xbfc90fdb
 8015cd0:	3edfffff 	.word	0x3edfffff
 8015cd4:	7149f2ca 	.word	0x7149f2ca
 8015cd8:	3f97ffff 	.word	0x3f97ffff
 8015cdc:	3c8569d7 	.word	0x3c8569d7
 8015ce0:	3d4bda59 	.word	0x3d4bda59
 8015ce4:	bd6ef16b 	.word	0xbd6ef16b
 8015ce8:	3d886b35 	.word	0x3d886b35
 8015cec:	3dba2e6e 	.word	0x3dba2e6e
 8015cf0:	3e124925 	.word	0x3e124925
 8015cf4:	3eaaaaab 	.word	0x3eaaaaab
 8015cf8:	bd15a221 	.word	0xbd15a221
 8015cfc:	bd9d8795 	.word	0xbd9d8795
 8015d00:	bde38e38 	.word	0xbde38e38
 8015d04:	be4ccccd 	.word	0xbe4ccccd
 8015d08:	401bffff 	.word	0x401bffff
 8015d0c:	08016890 	.word	0x08016890
 8015d10:	080168a0 	.word	0x080168a0

08015d14 <fabsf>:
 8015d14:	ee10 3a10 	vmov	r3, s0
 8015d18:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8015d1c:	ee00 3a10 	vmov	s0, r3
 8015d20:	4770      	bx	lr

08015d22 <finitef>:
 8015d22:	b082      	sub	sp, #8
 8015d24:	ed8d 0a01 	vstr	s0, [sp, #4]
 8015d28:	9801      	ldr	r0, [sp, #4]
 8015d2a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8015d2e:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8015d32:	bfac      	ite	ge
 8015d34:	2000      	movge	r0, #0
 8015d36:	2001      	movlt	r0, #1
 8015d38:	b002      	add	sp, #8
 8015d3a:	4770      	bx	lr

08015d3c <floorf>:
 8015d3c:	ee10 3a10 	vmov	r3, s0
 8015d40:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8015d44:	3a7f      	subs	r2, #127	; 0x7f
 8015d46:	2a16      	cmp	r2, #22
 8015d48:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8015d4c:	dc2a      	bgt.n	8015da4 <floorf+0x68>
 8015d4e:	2a00      	cmp	r2, #0
 8015d50:	da11      	bge.n	8015d76 <floorf+0x3a>
 8015d52:	eddf 7a18 	vldr	s15, [pc, #96]	; 8015db4 <floorf+0x78>
 8015d56:	ee30 0a27 	vadd.f32	s0, s0, s15
 8015d5a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8015d5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015d62:	dd05      	ble.n	8015d70 <floorf+0x34>
 8015d64:	2b00      	cmp	r3, #0
 8015d66:	da23      	bge.n	8015db0 <floorf+0x74>
 8015d68:	4a13      	ldr	r2, [pc, #76]	; (8015db8 <floorf+0x7c>)
 8015d6a:	2900      	cmp	r1, #0
 8015d6c:	bf18      	it	ne
 8015d6e:	4613      	movne	r3, r2
 8015d70:	ee00 3a10 	vmov	s0, r3
 8015d74:	4770      	bx	lr
 8015d76:	4911      	ldr	r1, [pc, #68]	; (8015dbc <floorf+0x80>)
 8015d78:	4111      	asrs	r1, r2
 8015d7a:	420b      	tst	r3, r1
 8015d7c:	d0fa      	beq.n	8015d74 <floorf+0x38>
 8015d7e:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8015db4 <floorf+0x78>
 8015d82:	ee30 0a27 	vadd.f32	s0, s0, s15
 8015d86:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8015d8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015d8e:	ddef      	ble.n	8015d70 <floorf+0x34>
 8015d90:	2b00      	cmp	r3, #0
 8015d92:	bfbe      	ittt	lt
 8015d94:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8015d98:	fa40 f202 	asrlt.w	r2, r0, r2
 8015d9c:	189b      	addlt	r3, r3, r2
 8015d9e:	ea23 0301 	bic.w	r3, r3, r1
 8015da2:	e7e5      	b.n	8015d70 <floorf+0x34>
 8015da4:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8015da8:	d3e4      	bcc.n	8015d74 <floorf+0x38>
 8015daa:	ee30 0a00 	vadd.f32	s0, s0, s0
 8015dae:	4770      	bx	lr
 8015db0:	2300      	movs	r3, #0
 8015db2:	e7dd      	b.n	8015d70 <floorf+0x34>
 8015db4:	7149f2ca 	.word	0x7149f2ca
 8015db8:	bf800000 	.word	0xbf800000
 8015dbc:	007fffff 	.word	0x007fffff

08015dc0 <nanf>:
 8015dc0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8015dc8 <nanf+0x8>
 8015dc4:	4770      	bx	lr
 8015dc6:	bf00      	nop
 8015dc8:	7fc00000 	.word	0x7fc00000

08015dcc <scalbnf>:
 8015dcc:	ee10 3a10 	vmov	r3, s0
 8015dd0:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8015dd4:	d025      	beq.n	8015e22 <scalbnf+0x56>
 8015dd6:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8015dda:	d302      	bcc.n	8015de2 <scalbnf+0x16>
 8015ddc:	ee30 0a00 	vadd.f32	s0, s0, s0
 8015de0:	4770      	bx	lr
 8015de2:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8015de6:	d122      	bne.n	8015e2e <scalbnf+0x62>
 8015de8:	4b2a      	ldr	r3, [pc, #168]	; (8015e94 <scalbnf+0xc8>)
 8015dea:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8015e98 <scalbnf+0xcc>
 8015dee:	4298      	cmp	r0, r3
 8015df0:	ee20 0a27 	vmul.f32	s0, s0, s15
 8015df4:	db16      	blt.n	8015e24 <scalbnf+0x58>
 8015df6:	ee10 3a10 	vmov	r3, s0
 8015dfa:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8015dfe:	3a19      	subs	r2, #25
 8015e00:	4402      	add	r2, r0
 8015e02:	2afe      	cmp	r2, #254	; 0xfe
 8015e04:	dd15      	ble.n	8015e32 <scalbnf+0x66>
 8015e06:	ee10 3a10 	vmov	r3, s0
 8015e0a:	eddf 7a24 	vldr	s15, [pc, #144]	; 8015e9c <scalbnf+0xd0>
 8015e0e:	eddf 6a24 	vldr	s13, [pc, #144]	; 8015ea0 <scalbnf+0xd4>
 8015e12:	2b00      	cmp	r3, #0
 8015e14:	eeb0 7a67 	vmov.f32	s14, s15
 8015e18:	bfb8      	it	lt
 8015e1a:	eef0 7a66 	vmovlt.f32	s15, s13
 8015e1e:	ee27 0a27 	vmul.f32	s0, s14, s15
 8015e22:	4770      	bx	lr
 8015e24:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8015ea4 <scalbnf+0xd8>
 8015e28:	ee20 0a27 	vmul.f32	s0, s0, s15
 8015e2c:	4770      	bx	lr
 8015e2e:	0dd2      	lsrs	r2, r2, #23
 8015e30:	e7e6      	b.n	8015e00 <scalbnf+0x34>
 8015e32:	2a00      	cmp	r2, #0
 8015e34:	dd06      	ble.n	8015e44 <scalbnf+0x78>
 8015e36:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8015e3a:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8015e3e:	ee00 3a10 	vmov	s0, r3
 8015e42:	4770      	bx	lr
 8015e44:	f112 0f16 	cmn.w	r2, #22
 8015e48:	da1a      	bge.n	8015e80 <scalbnf+0xb4>
 8015e4a:	f24c 3350 	movw	r3, #50000	; 0xc350
 8015e4e:	4298      	cmp	r0, r3
 8015e50:	ee10 3a10 	vmov	r3, s0
 8015e54:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8015e58:	dd0a      	ble.n	8015e70 <scalbnf+0xa4>
 8015e5a:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8015e9c <scalbnf+0xd0>
 8015e5e:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8015ea0 <scalbnf+0xd4>
 8015e62:	eef0 7a40 	vmov.f32	s15, s0
 8015e66:	2b00      	cmp	r3, #0
 8015e68:	bf18      	it	ne
 8015e6a:	eeb0 0a47 	vmovne.f32	s0, s14
 8015e6e:	e7db      	b.n	8015e28 <scalbnf+0x5c>
 8015e70:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8015ea4 <scalbnf+0xd8>
 8015e74:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8015ea8 <scalbnf+0xdc>
 8015e78:	eef0 7a40 	vmov.f32	s15, s0
 8015e7c:	2b00      	cmp	r3, #0
 8015e7e:	e7f3      	b.n	8015e68 <scalbnf+0x9c>
 8015e80:	3219      	adds	r2, #25
 8015e82:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8015e86:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8015e8a:	eddf 7a08 	vldr	s15, [pc, #32]	; 8015eac <scalbnf+0xe0>
 8015e8e:	ee07 3a10 	vmov	s14, r3
 8015e92:	e7c4      	b.n	8015e1e <scalbnf+0x52>
 8015e94:	ffff3cb0 	.word	0xffff3cb0
 8015e98:	4c000000 	.word	0x4c000000
 8015e9c:	7149f2ca 	.word	0x7149f2ca
 8015ea0:	f149f2ca 	.word	0xf149f2ca
 8015ea4:	0da24260 	.word	0x0da24260
 8015ea8:	8da24260 	.word	0x8da24260
 8015eac:	33000000 	.word	0x33000000

08015eb0 <_init>:
 8015eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015eb2:	bf00      	nop
 8015eb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015eb6:	bc08      	pop	{r3}
 8015eb8:	469e      	mov	lr, r3
 8015eba:	4770      	bx	lr

08015ebc <_fini>:
 8015ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015ebe:	bf00      	nop
 8015ec0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015ec2:	bc08      	pop	{r3}
 8015ec4:	469e      	mov	lr, r3
 8015ec6:	4770      	bx	lr
