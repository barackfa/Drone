
Dipterv_Drone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014010  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a78  080141a0  080141a0  000241a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014c18  08014c18  000301ec  2**0
                  CONTENTS
  4 .ARM          00000008  08014c18  08014c18  00024c18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014c20  08014c20  000301ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014c20  08014c20  00024c20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014c24  08014c24  00024c24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  08014c28  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000301ec  2**0
                  CONTENTS
 10 .bss          00004750  200001f0  200001f0  000301f0  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20004940  20004940  000301f0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000301ec  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001f992  00000000  00000000  0003021c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000401d  00000000  00000000  0004fbae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001bd0  00000000  00000000  00053bd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001a50  00000000  00000000  000557a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002509f  00000000  00000000  000571f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00020188  00000000  00000000  0007c28f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000de830  00000000  00000000  0009c417  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0017ac47  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008fc0  00000000  00000000  0017ac98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f0 	.word	0x200001f0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08014188 	.word	0x08014188

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f4 	.word	0x200001f4
 80001cc:	08014188 	.word	0x08014188

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b974 	b.w	8000f88 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468e      	mov	lr, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14d      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4694      	mov	ip, r2
 8000cca:	d969      	bls.n	8000da0 <__udivmoddi4+0xe8>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b152      	cbz	r2, 8000ce8 <__udivmoddi4+0x30>
 8000cd2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cd6:	f1c2 0120 	rsb	r1, r2, #32
 8000cda:	fa20 f101 	lsr.w	r1, r0, r1
 8000cde:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ce6:	4094      	lsls	r4, r2
 8000ce8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cec:	0c21      	lsrs	r1, r4, #16
 8000cee:	fbbe f6f8 	udiv	r6, lr, r8
 8000cf2:	fa1f f78c 	uxth.w	r7, ip
 8000cf6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cfa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cfe:	fb06 f107 	mul.w	r1, r6, r7
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d0e:	f080 811f 	bcs.w	8000f50 <__udivmoddi4+0x298>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 811c 	bls.w	8000f50 <__udivmoddi4+0x298>
 8000d18:	3e02      	subs	r6, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a5b      	subs	r3, r3, r1
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d24:	fb08 3310 	mls	r3, r8, r0, r3
 8000d28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d2c:	fb00 f707 	mul.w	r7, r0, r7
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	d90a      	bls.n	8000d4a <__udivmoddi4+0x92>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3c:	f080 810a 	bcs.w	8000f54 <__udivmoddi4+0x29c>
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	f240 8107 	bls.w	8000f54 <__udivmoddi4+0x29c>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4e:	1be4      	subs	r4, r4, r7
 8000d50:	2600      	movs	r6, #0
 8000d52:	b11d      	cbz	r5, 8000d5c <__udivmoddi4+0xa4>
 8000d54:	40d4      	lsrs	r4, r2
 8000d56:	2300      	movs	r3, #0
 8000d58:	e9c5 4300 	strd	r4, r3, [r5]
 8000d5c:	4631      	mov	r1, r6
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d909      	bls.n	8000d7a <__udivmoddi4+0xc2>
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	f000 80ef 	beq.w	8000f4a <__udivmoddi4+0x292>
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d72:	4630      	mov	r0, r6
 8000d74:	4631      	mov	r1, r6
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	fab3 f683 	clz	r6, r3
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	d14a      	bne.n	8000e18 <__udivmoddi4+0x160>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0xd4>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 80f9 	bhi.w	8000f7e <__udivmoddi4+0x2c6>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	469e      	mov	lr, r3
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d0e0      	beq.n	8000d5c <__udivmoddi4+0xa4>
 8000d9a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d9e:	e7dd      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000da0:	b902      	cbnz	r2, 8000da4 <__udivmoddi4+0xec>
 8000da2:	deff      	udf	#255	; 0xff
 8000da4:	fab2 f282 	clz	r2, r2
 8000da8:	2a00      	cmp	r2, #0
 8000daa:	f040 8092 	bne.w	8000ed2 <__udivmoddi4+0x21a>
 8000dae:	eba1 010c 	sub.w	r1, r1, ip
 8000db2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db6:	fa1f fe8c 	uxth.w	lr, ip
 8000dba:	2601      	movs	r6, #1
 8000dbc:	0c20      	lsrs	r0, r4, #16
 8000dbe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dc2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dc6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dca:	fb0e f003 	mul.w	r0, lr, r3
 8000dce:	4288      	cmp	r0, r1
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x12c>
 8000dd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x12a>
 8000ddc:	4288      	cmp	r0, r1
 8000dde:	f200 80cb 	bhi.w	8000f78 <__udivmoddi4+0x2c0>
 8000de2:	4643      	mov	r3, r8
 8000de4:	1a09      	subs	r1, r1, r0
 8000de6:	b2a4      	uxth	r4, r4
 8000de8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dec:	fb07 1110 	mls	r1, r7, r0, r1
 8000df0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000df4:	fb0e fe00 	mul.w	lr, lr, r0
 8000df8:	45a6      	cmp	lr, r4
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x156>
 8000dfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000e00:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e04:	d202      	bcs.n	8000e0c <__udivmoddi4+0x154>
 8000e06:	45a6      	cmp	lr, r4
 8000e08:	f200 80bb 	bhi.w	8000f82 <__udivmoddi4+0x2ca>
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	eba4 040e 	sub.w	r4, r4, lr
 8000e12:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e16:	e79c      	b.n	8000d52 <__udivmoddi4+0x9a>
 8000e18:	f1c6 0720 	rsb	r7, r6, #32
 8000e1c:	40b3      	lsls	r3, r6
 8000e1e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e22:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e26:	fa20 f407 	lsr.w	r4, r0, r7
 8000e2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	40f9      	lsrs	r1, r7
 8000e32:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e36:	fa00 f306 	lsl.w	r3, r0, r6
 8000e3a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e3e:	0c20      	lsrs	r0, r4, #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fb09 1118 	mls	r1, r9, r8, r1
 8000e48:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e4c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e50:	4288      	cmp	r0, r1
 8000e52:	fa02 f206 	lsl.w	r2, r2, r6
 8000e56:	d90b      	bls.n	8000e70 <__udivmoddi4+0x1b8>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e60:	f080 8088 	bcs.w	8000f74 <__udivmoddi4+0x2bc>
 8000e64:	4288      	cmp	r0, r1
 8000e66:	f240 8085 	bls.w	8000f74 <__udivmoddi4+0x2bc>
 8000e6a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e78:	fb09 1110 	mls	r1, r9, r0, r1
 8000e7c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e80:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e84:	458e      	cmp	lr, r1
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x1e2>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e90:	d26c      	bcs.n	8000f6c <__udivmoddi4+0x2b4>
 8000e92:	458e      	cmp	lr, r1
 8000e94:	d96a      	bls.n	8000f6c <__udivmoddi4+0x2b4>
 8000e96:	3802      	subs	r0, #2
 8000e98:	4461      	add	r1, ip
 8000e9a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e9e:	fba0 9402 	umull	r9, r4, r0, r2
 8000ea2:	eba1 010e 	sub.w	r1, r1, lr
 8000ea6:	42a1      	cmp	r1, r4
 8000ea8:	46c8      	mov	r8, r9
 8000eaa:	46a6      	mov	lr, r4
 8000eac:	d356      	bcc.n	8000f5c <__udivmoddi4+0x2a4>
 8000eae:	d053      	beq.n	8000f58 <__udivmoddi4+0x2a0>
 8000eb0:	b15d      	cbz	r5, 8000eca <__udivmoddi4+0x212>
 8000eb2:	ebb3 0208 	subs.w	r2, r3, r8
 8000eb6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eba:	fa01 f707 	lsl.w	r7, r1, r7
 8000ebe:	fa22 f306 	lsr.w	r3, r2, r6
 8000ec2:	40f1      	lsrs	r1, r6
 8000ec4:	431f      	orrs	r7, r3
 8000ec6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eca:	2600      	movs	r6, #0
 8000ecc:	4631      	mov	r1, r6
 8000ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed2:	f1c2 0320 	rsb	r3, r2, #32
 8000ed6:	40d8      	lsrs	r0, r3
 8000ed8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000edc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ee0:	4091      	lsls	r1, r2
 8000ee2:	4301      	orrs	r1, r0
 8000ee4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee8:	fa1f fe8c 	uxth.w	lr, ip
 8000eec:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ef0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ef4:	0c0b      	lsrs	r3, r1, #16
 8000ef6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000efa:	fb00 f60e 	mul.w	r6, r0, lr
 8000efe:	429e      	cmp	r6, r3
 8000f00:	fa04 f402 	lsl.w	r4, r4, r2
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x260>
 8000f06:	eb1c 0303 	adds.w	r3, ip, r3
 8000f0a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f0e:	d22f      	bcs.n	8000f70 <__udivmoddi4+0x2b8>
 8000f10:	429e      	cmp	r6, r3
 8000f12:	d92d      	bls.n	8000f70 <__udivmoddi4+0x2b8>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4463      	add	r3, ip
 8000f18:	1b9b      	subs	r3, r3, r6
 8000f1a:	b289      	uxth	r1, r1
 8000f1c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f20:	fb07 3316 	mls	r3, r7, r6, r3
 8000f24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f28:	fb06 f30e 	mul.w	r3, r6, lr
 8000f2c:	428b      	cmp	r3, r1
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x28a>
 8000f30:	eb1c 0101 	adds.w	r1, ip, r1
 8000f34:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f38:	d216      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d914      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3e:	3e02      	subs	r6, #2
 8000f40:	4461      	add	r1, ip
 8000f42:	1ac9      	subs	r1, r1, r3
 8000f44:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f48:	e738      	b.n	8000dbc <__udivmoddi4+0x104>
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e705      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e3      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6f8      	b.n	8000d4a <__udivmoddi4+0x92>
 8000f58:	454b      	cmp	r3, r9
 8000f5a:	d2a9      	bcs.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f5c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f60:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7a3      	b.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f68:	4646      	mov	r6, r8
 8000f6a:	e7ea      	b.n	8000f42 <__udivmoddi4+0x28a>
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	e794      	b.n	8000e9a <__udivmoddi4+0x1e2>
 8000f70:	4640      	mov	r0, r8
 8000f72:	e7d1      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f74:	46d0      	mov	r8, sl
 8000f76:	e77b      	b.n	8000e70 <__udivmoddi4+0x1b8>
 8000f78:	3b02      	subs	r3, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	e732      	b.n	8000de4 <__udivmoddi4+0x12c>
 8000f7e:	4630      	mov	r0, r6
 8000f80:	e709      	b.n	8000d96 <__udivmoddi4+0xde>
 8000f82:	4464      	add	r4, ip
 8000f84:	3802      	subs	r0, #2
 8000f86:	e742      	b.n	8000e0e <__udivmoddi4+0x156>

08000f88 <__aeabi_idiv0>:
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop

08000f8c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b085      	sub	sp, #20
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	60f8      	str	r0, [r7, #12]
 8000f94:	60b9      	str	r1, [r7, #8]
 8000f96:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	4a07      	ldr	r2, [pc, #28]	; (8000fb8 <vApplicationGetIdleTaskMemory+0x2c>)
 8000f9c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000f9e:	68bb      	ldr	r3, [r7, #8]
 8000fa0:	4a06      	ldr	r2, [pc, #24]	; (8000fbc <vApplicationGetIdleTaskMemory+0x30>)
 8000fa2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	2280      	movs	r2, #128	; 0x80
 8000fa8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000faa:	bf00      	nop
 8000fac:	3714      	adds	r7, #20
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	2000020c 	.word	0x2000020c
 8000fbc:	20000260 	.word	0x20000260

08000fc0 <FusionRadiansToDegrees>:
/**
 * @brief Converts radians to degrees.
 * @param radians Radians.
 * @return Degrees.
 */
static inline float FusionRadiansToDegrees(const float radians) {
 8000fc0:	b480      	push	{r7}
 8000fc2:	b083      	sub	sp, #12
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	ed87 0a01 	vstr	s0, [r7, #4]
    return radians * (180.0f / (float) M_PI);
 8000fca:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fce:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8000fe4 <FusionRadiansToDegrees+0x24>
 8000fd2:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8000fd6:	eeb0 0a67 	vmov.f32	s0, s15
 8000fda:	370c      	adds	r7, #12
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr
 8000fe4:	42652ee0 	.word	0x42652ee0

08000fe8 <FusionAsin>:
/**
 * @brief Returns the arc sine of the value.
 * @param value Value.
 * @return Arc sine of the value.
 */
static inline float FusionAsin(const float value) {
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	ed87 0a01 	vstr	s0, [r7, #4]
    if (value <= -1.0f) {
 8000ff2:	edd7 7a01 	vldr	s15, [r7, #4]
 8000ff6:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8000ffa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000ffe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001002:	d802      	bhi.n	800100a <FusionAsin+0x22>
        return (float) M_PI / -2.0f;
 8001004:	eddf 7a0c 	vldr	s15, [pc, #48]	; 8001038 <FusionAsin+0x50>
 8001008:	e011      	b.n	800102e <FusionAsin+0x46>
    }
    if (value >= 1.0f) {
 800100a:	edd7 7a01 	vldr	s15, [r7, #4]
 800100e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001012:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001016:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800101a:	db02      	blt.n	8001022 <FusionAsin+0x3a>
        return (float) M_PI / 2.0f;
 800101c:	eddf 7a07 	vldr	s15, [pc, #28]	; 800103c <FusionAsin+0x54>
 8001020:	e005      	b.n	800102e <FusionAsin+0x46>
    }
    return asinf(value);
 8001022:	ed97 0a01 	vldr	s0, [r7, #4]
 8001026:	f010 ff07 	bl	8011e38 <asinf>
 800102a:	eef0 7a40 	vmov.f32	s15, s0
}
 800102e:	eeb0 0a67 	vmov.f32	s0, s15
 8001032:	3708      	adds	r7, #8
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	bfc90fdb 	.word	0xbfc90fdb
 800103c:	3fc90fdb 	.word	0x3fc90fdb

08001040 <FusionVectorSubtract>:
 * @brief Returns vector B subtracted from vector A.
 * @param vectorA Vector A.
 * @param vectorB Vector B.
 * @return Vector B subtracted from vector A.
 */
static inline FusionVector FusionVectorSubtract(const FusionVector vectorA, const FusionVector vectorB) {
 8001040:	b480      	push	{r7}
 8001042:	b091      	sub	sp, #68	; 0x44
 8001044:	af00      	add	r7, sp, #0
 8001046:	eeb0 5a40 	vmov.f32	s10, s0
 800104a:	eef0 5a60 	vmov.f32	s11, s1
 800104e:	eeb0 6a41 	vmov.f32	s12, s2
 8001052:	eef0 6a61 	vmov.f32	s13, s3
 8001056:	eeb0 7a42 	vmov.f32	s14, s4
 800105a:	eef0 7a62 	vmov.f32	s15, s5
 800105e:	ed87 5a07 	vstr	s10, [r7, #28]
 8001062:	edc7 5a08 	vstr	s11, [r7, #32]
 8001066:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 800106a:	edc7 6a04 	vstr	s13, [r7, #16]
 800106e:	ed87 7a05 	vstr	s14, [r7, #20]
 8001072:	edc7 7a06 	vstr	s15, [r7, #24]
    const FusionVector result = {.axis = {
            .x = vectorA.axis.x - vectorB.axis.x,
 8001076:	ed97 7a07 	vldr	s14, [r7, #28]
 800107a:	edd7 7a04 	vldr	s15, [r7, #16]
 800107e:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8001082:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = vectorA.axis.y - vectorB.axis.y,
 8001086:	ed97 7a08 	vldr	s14, [r7, #32]
 800108a:	edd7 7a05 	vldr	s15, [r7, #20]
 800108e:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8001092:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = vectorA.axis.z - vectorB.axis.z,
 8001096:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800109a:	edd7 7a06 	vldr	s15, [r7, #24]
 800109e:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80010a2:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    }};
    return result;
 80010a6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80010aa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80010ae:	ca07      	ldmia	r2, {r0, r1, r2}
 80010b0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80010b4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80010b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80010b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80010ba:	ee06 1a90 	vmov	s13, r1
 80010be:	ee07 2a10 	vmov	s14, r2
 80010c2:	ee07 3a90 	vmov	s15, r3
}
 80010c6:	eeb0 0a66 	vmov.f32	s0, s13
 80010ca:	eef0 0a47 	vmov.f32	s1, s14
 80010ce:	eeb0 1a67 	vmov.f32	s2, s15
 80010d2:	3744      	adds	r7, #68	; 0x44
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr

080010dc <FusionVectorMultiplyScalar>:
 * @brief Returns the multiplication of a vector by a scalar.
 * @param vector Vector.
 * @param scalar Scalar.
 * @return Multiplication of a vector by a scalar.
 */
static inline FusionVector FusionVectorMultiplyScalar(const FusionVector vector, const float scalar) {
 80010dc:	b480      	push	{r7}
 80010de:	b08f      	sub	sp, #60	; 0x3c
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	eef0 6a40 	vmov.f32	s13, s0
 80010e6:	eeb0 7a60 	vmov.f32	s14, s1
 80010ea:	eef0 7a41 	vmov.f32	s15, s2
 80010ee:	edc7 1a04 	vstr	s3, [r7, #16]
 80010f2:	edc7 6a05 	vstr	s13, [r7, #20]
 80010f6:	ed87 7a06 	vstr	s14, [r7, #24]
 80010fa:	edc7 7a07 	vstr	s15, [r7, #28]
    const FusionVector result = {.axis = {
            .x = vector.axis.x * scalar,
 80010fe:	ed97 7a05 	vldr	s14, [r7, #20]
 8001102:	edd7 7a04 	vldr	s15, [r7, #16]
 8001106:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800110a:	edc7 7a08 	vstr	s15, [r7, #32]
            .y = vector.axis.y * scalar,
 800110e:	ed97 7a06 	vldr	s14, [r7, #24]
 8001112:	edd7 7a04 	vldr	s15, [r7, #16]
 8001116:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800111a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            .z = vector.axis.z * scalar,
 800111e:	ed97 7a07 	vldr	s14, [r7, #28]
 8001122:	edd7 7a04 	vldr	s15, [r7, #16]
 8001126:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800112a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    }};
    return result;
 800112e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001132:	f107 0220 	add.w	r2, r7, #32
 8001136:	ca07      	ldmia	r2, {r0, r1, r2}
 8001138:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800113c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800113e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001140:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001142:	ee06 1a90 	vmov	s13, r1
 8001146:	ee07 2a10 	vmov	s14, r2
 800114a:	ee07 3a90 	vmov	s15, r3
}
 800114e:	eeb0 0a66 	vmov.f32	s0, s13
 8001152:	eef0 0a47 	vmov.f32	s1, s14
 8001156:	eeb0 1a67 	vmov.f32	s2, s15
 800115a:	373c      	adds	r7, #60	; 0x3c
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr

08001164 <FusionMatrixMultiplyVector>:
 * @brief Returns the multiplication of a matrix with a vector.
 * @param matrix Matrix.
 * @param vector Vector.
 * @return Multiplication of a matrix with a vector.
 */
static inline FusionVector FusionMatrixMultiplyVector(const FusionMatrix matrix, const FusionVector vector) {
 8001164:	b084      	sub	sp, #16
 8001166:	b480      	push	{r7}
 8001168:	b08f      	sub	sp, #60	; 0x3c
 800116a:	af00      	add	r7, sp, #0
 800116c:	f107 0c40 	add.w	ip, r7, #64	; 0x40
 8001170:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 8001174:	eef0 6a40 	vmov.f32	s13, s0
 8001178:	eeb0 7a60 	vmov.f32	s14, s1
 800117c:	eef0 7a41 	vmov.f32	s15, s2
 8001180:	edc7 6a05 	vstr	s13, [r7, #20]
 8001184:	ed87 7a06 	vstr	s14, [r7, #24]
 8001188:	edc7 7a07 	vstr	s15, [r7, #28]
#define R matrix.element
    const FusionVector result = {.axis = {
            .x = R.xx * vector.axis.x + R.xy * vector.axis.y + R.xz * vector.axis.z,
 800118c:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001190:	edd7 7a05 	vldr	s15, [r7, #20]
 8001194:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001198:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 800119c:	edd7 7a06 	vldr	s15, [r7, #24]
 80011a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011a4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80011a8:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 80011ac:	edd7 7a07 	vldr	s15, [r7, #28]
 80011b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011b4:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80011b8:	edc7 7a08 	vstr	s15, [r7, #32]
            .y = R.yx * vector.axis.x + R.yy * vector.axis.y + R.yz * vector.axis.z,
 80011bc:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80011c0:	edd7 7a05 	vldr	s15, [r7, #20]
 80011c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011c8:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 80011cc:	edd7 7a06 	vldr	s15, [r7, #24]
 80011d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011d4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80011d8:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 80011dc:	edd7 7a07 	vldr	s15, [r7, #28]
 80011e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011e4:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80011e8:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            .z = R.zx * vector.axis.x + R.zy * vector.axis.y + R.zz * vector.axis.z,
 80011ec:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80011f0:	edd7 7a05 	vldr	s15, [r7, #20]
 80011f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011f8:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 80011fc:	edd7 7a06 	vldr	s15, [r7, #24]
 8001200:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001204:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001208:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 800120c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001210:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001214:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8001218:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    }};
    return result;
 800121c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001220:	f107 0220 	add.w	r2, r7, #32
 8001224:	ca07      	ldmia	r2, {r0, r1, r2}
 8001226:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800122a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800122c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800122e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001230:	ee06 1a90 	vmov	s13, r1
 8001234:	ee07 2a10 	vmov	s14, r2
 8001238:	ee07 3a90 	vmov	s15, r3
#undef R
}
 800123c:	eeb0 0a66 	vmov.f32	s0, s13
 8001240:	eef0 0a47 	vmov.f32	s1, s14
 8001244:	eeb0 1a67 	vmov.f32	s2, s15
 8001248:	373c      	adds	r7, #60	; 0x3c
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	b004      	add	sp, #16
 8001252:	4770      	bx	lr

08001254 <FusionQuaternionToMatrix>:
/**
 * @brief Converts a quaternion to a rotation matrix.
 * @param quaternion Quaternion.
 * @return Rotation matrix.
 */
static inline FusionMatrix FusionQuaternionToMatrix(const FusionQuaternion quaternion) {
 8001254:	b4b0      	push	{r4, r5, r7}
 8001256:	b097      	sub	sp, #92	; 0x5c
 8001258:	af00      	add	r7, sp, #0
 800125a:	6178      	str	r0, [r7, #20]
 800125c:	eeb0 6a40 	vmov.f32	s12, s0
 8001260:	eef0 6a60 	vmov.f32	s13, s1
 8001264:	eeb0 7a41 	vmov.f32	s14, s2
 8001268:	eef0 7a61 	vmov.f32	s15, s3
 800126c:	ed87 6a01 	vstr	s12, [r7, #4]
 8001270:	edc7 6a02 	vstr	s13, [r7, #8]
 8001274:	ed87 7a03 	vstr	s14, [r7, #12]
 8001278:	edc7 7a04 	vstr	s15, [r7, #16]
#define Q quaternion.element
    const float qwqw = Q.w * Q.w; // calculate common terms to avoid repeated operations
 800127c:	ed97 7a01 	vldr	s14, [r7, #4]
 8001280:	edd7 7a01 	vldr	s15, [r7, #4]
 8001284:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001288:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    const float qwqx = Q.w * Q.x;
 800128c:	ed97 7a01 	vldr	s14, [r7, #4]
 8001290:	edd7 7a02 	vldr	s15, [r7, #8]
 8001294:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001298:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    const float qwqy = Q.w * Q.y;
 800129c:	ed97 7a01 	vldr	s14, [r7, #4]
 80012a0:	edd7 7a03 	vldr	s15, [r7, #12]
 80012a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012a8:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    const float qwqz = Q.w * Q.z;
 80012ac:	ed97 7a01 	vldr	s14, [r7, #4]
 80012b0:	edd7 7a04 	vldr	s15, [r7, #16]
 80012b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012b8:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    const float qxqy = Q.x * Q.y;
 80012bc:	ed97 7a02 	vldr	s14, [r7, #8]
 80012c0:	edd7 7a03 	vldr	s15, [r7, #12]
 80012c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012c8:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    const float qxqz = Q.x * Q.z;
 80012cc:	ed97 7a02 	vldr	s14, [r7, #8]
 80012d0:	edd7 7a04 	vldr	s15, [r7, #16]
 80012d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012d8:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    const float qyqz = Q.y * Q.z;
 80012dc:	ed97 7a03 	vldr	s14, [r7, #12]
 80012e0:	edd7 7a04 	vldr	s15, [r7, #16]
 80012e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012e8:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    const FusionMatrix matrix = {.element = {
            .xx = 2.0f * (qwqw - 0.5f + Q.x * Q.x),
 80012ec:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80012f0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80012f4:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80012f8:	edd7 6a02 	vldr	s13, [r7, #8]
 80012fc:	edd7 7a02 	vldr	s15, [r7, #8]
 8001300:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001304:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001308:	ee77 7aa7 	vadd.f32	s15, s15, s15
    const FusionMatrix matrix = {.element = {
 800130c:	edc7 7a06 	vstr	s15, [r7, #24]
            .xy = 2.0f * (qxqy - qwqz),
 8001310:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8001314:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001318:	ee77 7a67 	vsub.f32	s15, s14, s15
 800131c:	ee77 7aa7 	vadd.f32	s15, s15, s15
    const FusionMatrix matrix = {.element = {
 8001320:	edc7 7a07 	vstr	s15, [r7, #28]
            .xz = 2.0f * (qxqz + qwqy),
 8001324:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001328:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800132c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001330:	ee77 7aa7 	vadd.f32	s15, s15, s15
    const FusionMatrix matrix = {.element = {
 8001334:	edc7 7a08 	vstr	s15, [r7, #32]
            .yx = 2.0f * (qxqy + qwqz),
 8001338:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 800133c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001340:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001344:	ee77 7aa7 	vadd.f32	s15, s15, s15
    const FusionMatrix matrix = {.element = {
 8001348:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            .yy = 2.0f * (qwqw - 0.5f + Q.y * Q.y),
 800134c:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001350:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001354:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001358:	edd7 6a03 	vldr	s13, [r7, #12]
 800135c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001360:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001364:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001368:	ee77 7aa7 	vadd.f32	s15, s15, s15
    const FusionMatrix matrix = {.element = {
 800136c:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .yz = 2.0f * (qyqz - qwqx),
 8001370:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8001374:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8001378:	ee77 7a67 	vsub.f32	s15, s14, s15
 800137c:	ee77 7aa7 	vadd.f32	s15, s15, s15
    const FusionMatrix matrix = {.element = {
 8001380:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .zx = 2.0f * (qxqz - qwqy),
 8001384:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001388:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800138c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001390:	ee77 7aa7 	vadd.f32	s15, s15, s15
    const FusionMatrix matrix = {.element = {
 8001394:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
            .zy = 2.0f * (qyqz + qwqx),
 8001398:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800139c:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80013a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013a4:	ee77 7aa7 	vadd.f32	s15, s15, s15
    const FusionMatrix matrix = {.element = {
 80013a8:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
            .zz = 2.0f * (qwqw - 0.5f + Q.z * Q.z),
 80013ac:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80013b0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80013b4:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80013b8:	edd7 6a04 	vldr	s13, [r7, #16]
 80013bc:	edd7 7a04 	vldr	s15, [r7, #16]
 80013c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013c8:	ee77 7aa7 	vadd.f32	s15, s15, s15
    const FusionMatrix matrix = {.element = {
 80013cc:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
    }};
    return matrix;
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	461d      	mov	r5, r3
 80013d4:	f107 0418 	add.w	r4, r7, #24
 80013d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013e0:	6823      	ldr	r3, [r4, #0]
 80013e2:	602b      	str	r3, [r5, #0]
#undef Q
}
 80013e4:	6978      	ldr	r0, [r7, #20]
 80013e6:	375c      	adds	r7, #92	; 0x5c
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bcb0      	pop	{r4, r5, r7}
 80013ec:	4770      	bx	lr

080013ee <FusionQuaternionToEuler>:
/**
 * @brief Converts a quaternion to ZYX Euler angles in degrees.
 * @param quaternion Quaternion.
 * @return Euler angles in degrees.
 */
static inline FusionEuler FusionQuaternionToEuler(const FusionQuaternion quaternion) {
 80013ee:	b580      	push	{r7, lr}
 80013f0:	b090      	sub	sp, #64	; 0x40
 80013f2:	af00      	add	r7, sp, #0
 80013f4:	eeb0 6a40 	vmov.f32	s12, s0
 80013f8:	eef0 6a60 	vmov.f32	s13, s1
 80013fc:	eeb0 7a41 	vmov.f32	s14, s2
 8001400:	eef0 7a61 	vmov.f32	s15, s3
 8001404:	ed87 6a04 	vstr	s12, [r7, #16]
 8001408:	edc7 6a05 	vstr	s13, [r7, #20]
 800140c:	ed87 7a06 	vstr	s14, [r7, #24]
 8001410:	edc7 7a07 	vstr	s15, [r7, #28]
#define Q quaternion.element
    const float halfMinusQySquared = 0.5f - Q.y * Q.y; // calculate common terms to avoid repeated operations
 8001414:	ed97 7a06 	vldr	s14, [r7, #24]
 8001418:	edd7 7a06 	vldr	s15, [r7, #24]
 800141c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001420:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001424:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001428:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    const FusionEuler euler = {.angle = {
            .roll = FusionRadiansToDegrees(atan2f(Q.w * Q.x + Q.y * Q.z, halfMinusQySquared - Q.x * Q.x)),
 800142c:	ed97 7a04 	vldr	s14, [r7, #16]
 8001430:	edd7 7a05 	vldr	s15, [r7, #20]
 8001434:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001438:	edd7 6a06 	vldr	s13, [r7, #24]
 800143c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001440:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001444:	ee77 6a27 	vadd.f32	s13, s14, s15
 8001448:	ed97 7a05 	vldr	s14, [r7, #20]
 800144c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001450:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001454:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8001458:	ee77 7a67 	vsub.f32	s15, s14, s15
 800145c:	eef0 0a67 	vmov.f32	s1, s15
 8001460:	eeb0 0a66 	vmov.f32	s0, s13
 8001464:	f010 fd14 	bl	8011e90 <atan2f>
 8001468:	eef0 7a40 	vmov.f32	s15, s0
 800146c:	eeb0 0a67 	vmov.f32	s0, s15
 8001470:	f7ff fda6 	bl	8000fc0 <FusionRadiansToDegrees>
 8001474:	eef0 7a40 	vmov.f32	s15, s0
    const FusionEuler euler = {.angle = {
 8001478:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            .pitch = FusionRadiansToDegrees(FusionAsin(2.0f * (Q.w * Q.y - Q.z * Q.x))),
 800147c:	ed97 7a04 	vldr	s14, [r7, #16]
 8001480:	edd7 7a06 	vldr	s15, [r7, #24]
 8001484:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001488:	edd7 6a07 	vldr	s13, [r7, #28]
 800148c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001490:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001494:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001498:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800149c:	eeb0 0a67 	vmov.f32	s0, s15
 80014a0:	f7ff fda2 	bl	8000fe8 <FusionAsin>
 80014a4:	eef0 7a40 	vmov.f32	s15, s0
 80014a8:	eeb0 0a67 	vmov.f32	s0, s15
 80014ac:	f7ff fd88 	bl	8000fc0 <FusionRadiansToDegrees>
 80014b0:	eef0 7a40 	vmov.f32	s15, s0
    const FusionEuler euler = {.angle = {
 80014b4:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .yaw = FusionRadiansToDegrees(atan2f(Q.w * Q.z + Q.x * Q.y, halfMinusQySquared - Q.z * Q.z)),
 80014b8:	ed97 7a04 	vldr	s14, [r7, #16]
 80014bc:	edd7 7a07 	vldr	s15, [r7, #28]
 80014c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014c4:	edd7 6a05 	vldr	s13, [r7, #20]
 80014c8:	edd7 7a06 	vldr	s15, [r7, #24]
 80014cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014d0:	ee77 6a27 	vadd.f32	s13, s14, s15
 80014d4:	ed97 7a07 	vldr	s14, [r7, #28]
 80014d8:	edd7 7a07 	vldr	s15, [r7, #28]
 80014dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014e0:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80014e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014e8:	eef0 0a67 	vmov.f32	s1, s15
 80014ec:	eeb0 0a66 	vmov.f32	s0, s13
 80014f0:	f010 fcce 	bl	8011e90 <atan2f>
 80014f4:	eef0 7a40 	vmov.f32	s15, s0
 80014f8:	eeb0 0a67 	vmov.f32	s0, s15
 80014fc:	f7ff fd60 	bl	8000fc0 <FusionRadiansToDegrees>
 8001500:	eef0 7a40 	vmov.f32	s15, s0
    const FusionEuler euler = {.angle = {
 8001504:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    }};
    return euler;
 8001508:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800150c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001510:	ca07      	ldmia	r2, {r0, r1, r2}
 8001512:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001516:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001518:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800151a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800151c:	ee06 1a90 	vmov	s13, r1
 8001520:	ee07 2a10 	vmov	s14, r2
 8001524:	ee07 3a90 	vmov	s15, r3
#undef Q
}
 8001528:	eeb0 0a66 	vmov.f32	s0, s13
 800152c:	eef0 0a47 	vmov.f32	s1, s14
 8001530:	eeb0 1a67 	vmov.f32	s2, s15
 8001534:	3740      	adds	r7, #64	; 0x40
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
	...

0800153c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800153c:	b5b0      	push	{r4, r5, r7, lr}
 800153e:	b096      	sub	sp, #88	; 0x58
 8001540:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001542:	f003 ff85 	bl	8005450 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001546:	f000 f899 	bl	800167c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800154a:	f000 fd7d 	bl	8002048 <MX_GPIO_Init>
  MX_DMA_Init();
 800154e:	f000 fd5b 	bl	8002008 <MX_DMA_Init>
  MX_TIM2_Init();
 8001552:	f000 fab3 	bl	8001abc <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8001556:	f000 fcd9 	bl	8001f0c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800155a:	f000 f9ef 	bl	800193c <MX_I2C1_Init>
  MX_I2C2_Init();
 800155e:	f000 fa1b 	bl	8001998 <MX_I2C2_Init>
  MX_I2C3_Init();
 8001562:	f000 fa47 	bl	80019f4 <MX_I2C3_Init>
  MX_TIM3_Init();
 8001566:	f000 fb19 	bl	8001b9c <MX_TIM3_Init>
  MX_TIM4_Init();
 800156a:	f000 fbc5 	bl	8001cf8 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 800156e:	f000 fca3 	bl	8001eb8 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8001572:	f000 fcf5 	bl	8001f60 <MX_USART3_UART_Init>
  MX_SPI2_Init();
 8001576:	f000 fa6b 	bl	8001a50 <MX_SPI2_Init>
  MX_USART6_UART_Init();
 800157a:	f000 fd1b 	bl	8001fb4 <MX_USART6_UART_Init>
  MX_ADC1_Init();
 800157e:	f000 f8e7 	bl	8001750 <MX_ADC1_Init>
  MX_ADC2_Init();
 8001582:	f000 f937 	bl	80017f4 <MX_ADC2_Init>
  MX_ADC3_Init();
 8001586:	f000 f987 	bl	8001898 <MX_ADC3_Init>
  MX_TIM6_Init();
 800158a:	f000 fc29 	bl	8001de0 <MX_TIM6_Init>
  MX_TIM7_Init();
 800158e:	f000 fc5d 	bl	8001e4c <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */




  __HAL_SPI_ENABLE(&hspi2);
 8001592:	4b30      	ldr	r3, [pc, #192]	; (8001654 <main+0x118>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	4b2e      	ldr	r3, [pc, #184]	; (8001654 <main+0x118>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80015a0:	601a      	str	r2, [r3, #0]
  HAL_TIM_PWM_Start  ( &htim3,  TIM_CHANNEL_1  );
 80015a2:	2100      	movs	r1, #0
 80015a4:	482c      	ldr	r0, [pc, #176]	; (8001658 <main+0x11c>)
 80015a6:	f007 faf9 	bl	8008b9c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start  ( &htim3,  TIM_CHANNEL_2  );
 80015aa:	2104      	movs	r1, #4
 80015ac:	482a      	ldr	r0, [pc, #168]	; (8001658 <main+0x11c>)
 80015ae:	f007 faf5 	bl	8008b9c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start  ( &htim3,  TIM_CHANNEL_3  );
 80015b2:	2108      	movs	r1, #8
 80015b4:	4828      	ldr	r0, [pc, #160]	; (8001658 <main+0x11c>)
 80015b6:	f007 faf1 	bl	8008b9c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start  ( &htim3,  TIM_CHANNEL_4  );
 80015ba:	210c      	movs	r1, #12
 80015bc:	4826      	ldr	r0, [pc, #152]	; (8001658 <main+0x11c>)
 80015be:	f007 faed 	bl	8008b9c <HAL_TIM_PWM_Start>
  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  telemetria_Queue = xQueueCreate( 19, 19*sizeof( float ) );
 80015c2:	2200      	movs	r2, #0
 80015c4:	214c      	movs	r1, #76	; 0x4c
 80015c6:	2013      	movs	r0, #19
 80015c8:	f00b fd86 	bl	800d0d8 <xQueueGenericCreate>
 80015cc:	4603      	mov	r3, r0
 80015ce:	4a23      	ldr	r2, [pc, #140]	; (800165c <main+0x120>)
 80015d0:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityBelowNormal, 0, 500);
 80015d2:	4b23      	ldr	r3, [pc, #140]	; (8001660 <main+0x124>)
 80015d4:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80015d8:	461d      	mov	r5, r3
 80015da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015de:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80015e2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80015e6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80015ea:	2100      	movs	r1, #0
 80015ec:	4618      	mov	r0, r3
 80015ee:	f00b fbf7 	bl	800cde0 <osThreadCreate>
 80015f2:	4603      	mov	r3, r0
 80015f4:	4a1b      	ldr	r2, [pc, #108]	; (8001664 <main+0x128>)
 80015f6:	6013      	str	r3, [r2, #0]

  /* definition and creation of Data_Reading */
  osThreadDef(Data_Reading, Start_Data_Reading, osPriorityNormal, 0, 600);
 80015f8:	4b1b      	ldr	r3, [pc, #108]	; (8001668 <main+0x12c>)
 80015fa:	f107 0420 	add.w	r4, r7, #32
 80015fe:	461d      	mov	r5, r3
 8001600:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001602:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001604:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001608:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Data_ReadingHandle = osThreadCreate(osThread(Data_Reading), NULL);
 800160c:	f107 0320 	add.w	r3, r7, #32
 8001610:	2100      	movs	r1, #0
 8001612:	4618      	mov	r0, r3
 8001614:	f00b fbe4 	bl	800cde0 <osThreadCreate>
 8001618:	4603      	mov	r3, r0
 800161a:	4a14      	ldr	r2, [pc, #80]	; (800166c <main+0x130>)
 800161c:	6013      	str	r3, [r2, #0]

  /* definition and creation of Control */
  osThreadDef(Control, Start_Control, osPriorityNormal, 0, 600);
 800161e:	4b14      	ldr	r3, [pc, #80]	; (8001670 <main+0x134>)
 8001620:	1d3c      	adds	r4, r7, #4
 8001622:	461d      	mov	r5, r3
 8001624:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001626:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001628:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800162c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ControlHandle = osThreadCreate(osThread(Control), NULL);
 8001630:	1d3b      	adds	r3, r7, #4
 8001632:	2100      	movs	r1, #0
 8001634:	4618      	mov	r0, r3
 8001636:	f00b fbd3 	bl	800cde0 <osThreadCreate>
 800163a:	4603      	mov	r3, r0
 800163c:	4a0d      	ldr	r2, [pc, #52]	; (8001674 <main+0x138>)
 800163e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001640:	f00b fbc7 	bl	800cdd2 <osKernelStart>

  while (1)
  {


	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 8001644:	2108      	movs	r1, #8
 8001646:	480c      	ldr	r0, [pc, #48]	; (8001678 <main+0x13c>)
 8001648:	f005 f8c3 	bl	80067d2 <HAL_GPIO_TogglePin>

	  HAL_Delay(3);
 800164c:	2003      	movs	r0, #3
 800164e:	f003 ff71 	bl	8005534 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 8001652:	e7f7      	b.n	8001644 <main+0x108>
 8001654:	20000634 	.word	0x20000634
 8001658:	200006d4 	.word	0x200006d4
 800165c:	20000bd0 	.word	0x20000bd0
 8001660:	080141c4 	.word	0x080141c4
 8001664:	20000964 	.word	0x20000964
 8001668:	080141e0 	.word	0x080141e0
 800166c:	20000968 	.word	0x20000968
 8001670:	080141fc 	.word	0x080141fc
 8001674:	2000096c 	.word	0x2000096c
 8001678:	40020400 	.word	0x40020400

0800167c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b094      	sub	sp, #80	; 0x50
 8001680:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001682:	f107 0320 	add.w	r3, r7, #32
 8001686:	2230      	movs	r2, #48	; 0x30
 8001688:	2100      	movs	r1, #0
 800168a:	4618      	mov	r0, r3
 800168c:	f00d fbfe 	bl	800ee8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001690:	f107 030c 	add.w	r3, r7, #12
 8001694:	2200      	movs	r2, #0
 8001696:	601a      	str	r2, [r3, #0]
 8001698:	605a      	str	r2, [r3, #4]
 800169a:	609a      	str	r2, [r3, #8]
 800169c:	60da      	str	r2, [r3, #12]
 800169e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80016a0:	2300      	movs	r3, #0
 80016a2:	60bb      	str	r3, [r7, #8]
 80016a4:	4b28      	ldr	r3, [pc, #160]	; (8001748 <SystemClock_Config+0xcc>)
 80016a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a8:	4a27      	ldr	r2, [pc, #156]	; (8001748 <SystemClock_Config+0xcc>)
 80016aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016ae:	6413      	str	r3, [r2, #64]	; 0x40
 80016b0:	4b25      	ldr	r3, [pc, #148]	; (8001748 <SystemClock_Config+0xcc>)
 80016b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016b8:	60bb      	str	r3, [r7, #8]
 80016ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80016bc:	2300      	movs	r3, #0
 80016be:	607b      	str	r3, [r7, #4]
 80016c0:	4b22      	ldr	r3, [pc, #136]	; (800174c <SystemClock_Config+0xd0>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a21      	ldr	r2, [pc, #132]	; (800174c <SystemClock_Config+0xd0>)
 80016c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016ca:	6013      	str	r3, [r2, #0]
 80016cc:	4b1f      	ldr	r3, [pc, #124]	; (800174c <SystemClock_Config+0xd0>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016d4:	607b      	str	r3, [r7, #4]
 80016d6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80016d8:	2301      	movs	r3, #1
 80016da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80016dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016e0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016e2:	2302      	movs	r3, #2
 80016e4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016e6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80016ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80016ec:	2304      	movs	r3, #4
 80016ee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80016f0:	23a8      	movs	r3, #168	; 0xa8
 80016f2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016f4:	2302      	movs	r3, #2
 80016f6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80016f8:	2304      	movs	r3, #4
 80016fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016fc:	f107 0320 	add.w	r3, r7, #32
 8001700:	4618      	mov	r0, r3
 8001702:	f006 f859 	bl	80077b8 <HAL_RCC_OscConfig>
 8001706:	4603      	mov	r3, r0
 8001708:	2b00      	cmp	r3, #0
 800170a:	d001      	beq.n	8001710 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800170c:	f002 f8fc 	bl	8003908 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001710:	230f      	movs	r3, #15
 8001712:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001714:	2302      	movs	r3, #2
 8001716:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001718:	2300      	movs	r3, #0
 800171a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800171c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001720:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001722:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001726:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001728:	f107 030c 	add.w	r3, r7, #12
 800172c:	2105      	movs	r1, #5
 800172e:	4618      	mov	r0, r3
 8001730:	f006 faba 	bl	8007ca8 <HAL_RCC_ClockConfig>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d001      	beq.n	800173e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800173a:	f002 f8e5 	bl	8003908 <Error_Handler>
  }
}
 800173e:	bf00      	nop
 8001740:	3750      	adds	r7, #80	; 0x50
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	40023800 	.word	0x40023800
 800174c:	40007000 	.word	0x40007000

08001750 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b084      	sub	sp, #16
 8001754:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001756:	463b      	mov	r3, r7
 8001758:	2200      	movs	r2, #0
 800175a:	601a      	str	r2, [r3, #0]
 800175c:	605a      	str	r2, [r3, #4]
 800175e:	609a      	str	r2, [r3, #8]
 8001760:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001762:	4b21      	ldr	r3, [pc, #132]	; (80017e8 <MX_ADC1_Init+0x98>)
 8001764:	4a21      	ldr	r2, [pc, #132]	; (80017ec <MX_ADC1_Init+0x9c>)
 8001766:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 8001768:	4b1f      	ldr	r3, [pc, #124]	; (80017e8 <MX_ADC1_Init+0x98>)
 800176a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800176e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001770:	4b1d      	ldr	r3, [pc, #116]	; (80017e8 <MX_ADC1_Init+0x98>)
 8001772:	2200      	movs	r2, #0
 8001774:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001776:	4b1c      	ldr	r3, [pc, #112]	; (80017e8 <MX_ADC1_Init+0x98>)
 8001778:	2200      	movs	r2, #0
 800177a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800177c:	4b1a      	ldr	r3, [pc, #104]	; (80017e8 <MX_ADC1_Init+0x98>)
 800177e:	2200      	movs	r2, #0
 8001780:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001782:	4b19      	ldr	r3, [pc, #100]	; (80017e8 <MX_ADC1_Init+0x98>)
 8001784:	2200      	movs	r2, #0
 8001786:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800178a:	4b17      	ldr	r3, [pc, #92]	; (80017e8 <MX_ADC1_Init+0x98>)
 800178c:	2200      	movs	r2, #0
 800178e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001790:	4b15      	ldr	r3, [pc, #84]	; (80017e8 <MX_ADC1_Init+0x98>)
 8001792:	4a17      	ldr	r2, [pc, #92]	; (80017f0 <MX_ADC1_Init+0xa0>)
 8001794:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001796:	4b14      	ldr	r3, [pc, #80]	; (80017e8 <MX_ADC1_Init+0x98>)
 8001798:	2200      	movs	r2, #0
 800179a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800179c:	4b12      	ldr	r3, [pc, #72]	; (80017e8 <MX_ADC1_Init+0x98>)
 800179e:	2201      	movs	r2, #1
 80017a0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80017a2:	4b11      	ldr	r3, [pc, #68]	; (80017e8 <MX_ADC1_Init+0x98>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80017aa:	4b0f      	ldr	r3, [pc, #60]	; (80017e8 <MX_ADC1_Init+0x98>)
 80017ac:	2201      	movs	r2, #1
 80017ae:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80017b0:	480d      	ldr	r0, [pc, #52]	; (80017e8 <MX_ADC1_Init+0x98>)
 80017b2:	f003 fee3 	bl	800557c <HAL_ADC_Init>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d001      	beq.n	80017c0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80017bc:	f002 f8a4 	bl	8003908 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80017c0:	2305      	movs	r3, #5
 80017c2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80017c4:	2301      	movs	r3, #1
 80017c6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80017c8:	2300      	movs	r3, #0
 80017ca:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017cc:	463b      	mov	r3, r7
 80017ce:	4619      	mov	r1, r3
 80017d0:	4805      	ldr	r0, [pc, #20]	; (80017e8 <MX_ADC1_Init+0x98>)
 80017d2:	f003 ff17 	bl	8005604 <HAL_ADC_ConfigChannel>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d001      	beq.n	80017e0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80017dc:	f002 f894 	bl	8003908 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80017e0:	bf00      	nop
 80017e2:	3710      	adds	r7, #16
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	20000460 	.word	0x20000460
 80017ec:	40012000 	.word	0x40012000
 80017f0:	0f000001 	.word	0x0f000001

080017f4 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b084      	sub	sp, #16
 80017f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80017fa:	463b      	mov	r3, r7
 80017fc:	2200      	movs	r2, #0
 80017fe:	601a      	str	r2, [r3, #0]
 8001800:	605a      	str	r2, [r3, #4]
 8001802:	609a      	str	r2, [r3, #8]
 8001804:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8001806:	4b21      	ldr	r3, [pc, #132]	; (800188c <MX_ADC2_Init+0x98>)
 8001808:	4a21      	ldr	r2, [pc, #132]	; (8001890 <MX_ADC2_Init+0x9c>)
 800180a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 800180c:	4b1f      	ldr	r3, [pc, #124]	; (800188c <MX_ADC2_Init+0x98>)
 800180e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001812:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001814:	4b1d      	ldr	r3, [pc, #116]	; (800188c <MX_ADC2_Init+0x98>)
 8001816:	2200      	movs	r2, #0
 8001818:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 800181a:	4b1c      	ldr	r3, [pc, #112]	; (800188c <MX_ADC2_Init+0x98>)
 800181c:	2200      	movs	r2, #0
 800181e:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001820:	4b1a      	ldr	r3, [pc, #104]	; (800188c <MX_ADC2_Init+0x98>)
 8001822:	2200      	movs	r2, #0
 8001824:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001826:	4b19      	ldr	r3, [pc, #100]	; (800188c <MX_ADC2_Init+0x98>)
 8001828:	2200      	movs	r2, #0
 800182a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800182e:	4b17      	ldr	r3, [pc, #92]	; (800188c <MX_ADC2_Init+0x98>)
 8001830:	2200      	movs	r2, #0
 8001832:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001834:	4b15      	ldr	r3, [pc, #84]	; (800188c <MX_ADC2_Init+0x98>)
 8001836:	4a17      	ldr	r2, [pc, #92]	; (8001894 <MX_ADC2_Init+0xa0>)
 8001838:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800183a:	4b14      	ldr	r3, [pc, #80]	; (800188c <MX_ADC2_Init+0x98>)
 800183c:	2200      	movs	r2, #0
 800183e:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8001840:	4b12      	ldr	r3, [pc, #72]	; (800188c <MX_ADC2_Init+0x98>)
 8001842:	2201      	movs	r2, #1
 8001844:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001846:	4b11      	ldr	r3, [pc, #68]	; (800188c <MX_ADC2_Init+0x98>)
 8001848:	2200      	movs	r2, #0
 800184a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800184e:	4b0f      	ldr	r3, [pc, #60]	; (800188c <MX_ADC2_Init+0x98>)
 8001850:	2201      	movs	r2, #1
 8001852:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001854:	480d      	ldr	r0, [pc, #52]	; (800188c <MX_ADC2_Init+0x98>)
 8001856:	f003 fe91 	bl	800557c <HAL_ADC_Init>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d001      	beq.n	8001864 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8001860:	f002 f852 	bl	8003908 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001864:	2304      	movs	r3, #4
 8001866:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001868:	2301      	movs	r3, #1
 800186a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800186c:	2300      	movs	r3, #0
 800186e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001870:	463b      	mov	r3, r7
 8001872:	4619      	mov	r1, r3
 8001874:	4805      	ldr	r0, [pc, #20]	; (800188c <MX_ADC2_Init+0x98>)
 8001876:	f003 fec5 	bl	8005604 <HAL_ADC_ConfigChannel>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d001      	beq.n	8001884 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8001880:	f002 f842 	bl	8003908 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001884:	bf00      	nop
 8001886:	3710      	adds	r7, #16
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}
 800188c:	200004a8 	.word	0x200004a8
 8001890:	40012100 	.word	0x40012100
 8001894:	0f000001 	.word	0x0f000001

08001898 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b084      	sub	sp, #16
 800189c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800189e:	463b      	mov	r3, r7
 80018a0:	2200      	movs	r2, #0
 80018a2:	601a      	str	r2, [r3, #0]
 80018a4:	605a      	str	r2, [r3, #4]
 80018a6:	609a      	str	r2, [r3, #8]
 80018a8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80018aa:	4b21      	ldr	r3, [pc, #132]	; (8001930 <MX_ADC3_Init+0x98>)
 80018ac:	4a21      	ldr	r2, [pc, #132]	; (8001934 <MX_ADC3_Init+0x9c>)
 80018ae:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 80018b0:	4b1f      	ldr	r3, [pc, #124]	; (8001930 <MX_ADC3_Init+0x98>)
 80018b2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80018b6:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80018b8:	4b1d      	ldr	r3, [pc, #116]	; (8001930 <MX_ADC3_Init+0x98>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 80018be:	4b1c      	ldr	r3, [pc, #112]	; (8001930 <MX_ADC3_Init+0x98>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80018c4:	4b1a      	ldr	r3, [pc, #104]	; (8001930 <MX_ADC3_Init+0x98>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80018ca:	4b19      	ldr	r3, [pc, #100]	; (8001930 <MX_ADC3_Init+0x98>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80018d2:	4b17      	ldr	r3, [pc, #92]	; (8001930 <MX_ADC3_Init+0x98>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80018d8:	4b15      	ldr	r3, [pc, #84]	; (8001930 <MX_ADC3_Init+0x98>)
 80018da:	4a17      	ldr	r2, [pc, #92]	; (8001938 <MX_ADC3_Init+0xa0>)
 80018dc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80018de:	4b14      	ldr	r3, [pc, #80]	; (8001930 <MX_ADC3_Init+0x98>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 80018e4:	4b12      	ldr	r3, [pc, #72]	; (8001930 <MX_ADC3_Init+0x98>)
 80018e6:	2201      	movs	r2, #1
 80018e8:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80018ea:	4b11      	ldr	r3, [pc, #68]	; (8001930 <MX_ADC3_Init+0x98>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80018f2:	4b0f      	ldr	r3, [pc, #60]	; (8001930 <MX_ADC3_Init+0x98>)
 80018f4:	2201      	movs	r2, #1
 80018f6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80018f8:	480d      	ldr	r0, [pc, #52]	; (8001930 <MX_ADC3_Init+0x98>)
 80018fa:	f003 fe3f 	bl	800557c <HAL_ADC_Init>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d001      	beq.n	8001908 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8001904:	f002 f800 	bl	8003908 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8001908:	230d      	movs	r3, #13
 800190a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800190c:	2301      	movs	r3, #1
 800190e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001910:	2300      	movs	r3, #0
 8001912:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001914:	463b      	mov	r3, r7
 8001916:	4619      	mov	r1, r3
 8001918:	4805      	ldr	r0, [pc, #20]	; (8001930 <MX_ADC3_Init+0x98>)
 800191a:	f003 fe73 	bl	8005604 <HAL_ADC_ConfigChannel>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d001      	beq.n	8001928 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8001924:	f001 fff0 	bl	8003908 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001928:	bf00      	nop
 800192a:	3710      	adds	r7, #16
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}
 8001930:	200004f0 	.word	0x200004f0
 8001934:	40012200 	.word	0x40012200
 8001938:	0f000001 	.word	0x0f000001

0800193c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001940:	4b12      	ldr	r3, [pc, #72]	; (800198c <MX_I2C1_Init+0x50>)
 8001942:	4a13      	ldr	r2, [pc, #76]	; (8001990 <MX_I2C1_Init+0x54>)
 8001944:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001946:	4b11      	ldr	r3, [pc, #68]	; (800198c <MX_I2C1_Init+0x50>)
 8001948:	4a12      	ldr	r2, [pc, #72]	; (8001994 <MX_I2C1_Init+0x58>)
 800194a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800194c:	4b0f      	ldr	r3, [pc, #60]	; (800198c <MX_I2C1_Init+0x50>)
 800194e:	2200      	movs	r2, #0
 8001950:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001952:	4b0e      	ldr	r3, [pc, #56]	; (800198c <MX_I2C1_Init+0x50>)
 8001954:	2200      	movs	r2, #0
 8001956:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001958:	4b0c      	ldr	r3, [pc, #48]	; (800198c <MX_I2C1_Init+0x50>)
 800195a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800195e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001960:	4b0a      	ldr	r3, [pc, #40]	; (800198c <MX_I2C1_Init+0x50>)
 8001962:	2200      	movs	r2, #0
 8001964:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001966:	4b09      	ldr	r3, [pc, #36]	; (800198c <MX_I2C1_Init+0x50>)
 8001968:	2200      	movs	r2, #0
 800196a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800196c:	4b07      	ldr	r3, [pc, #28]	; (800198c <MX_I2C1_Init+0x50>)
 800196e:	2200      	movs	r2, #0
 8001970:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001972:	4b06      	ldr	r3, [pc, #24]	; (800198c <MX_I2C1_Init+0x50>)
 8001974:	2200      	movs	r2, #0
 8001976:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001978:	4804      	ldr	r0, [pc, #16]	; (800198c <MX_I2C1_Init+0x50>)
 800197a:	f004 ff5d 	bl	8006838 <HAL_I2C_Init>
 800197e:	4603      	mov	r3, r0
 8001980:	2b00      	cmp	r3, #0
 8001982:	d001      	beq.n	8001988 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001984:	f001 ffc0 	bl	8003908 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001988:	bf00      	nop
 800198a:	bd80      	pop	{r7, pc}
 800198c:	20000538 	.word	0x20000538
 8001990:	40005400 	.word	0x40005400
 8001994:	00061a80 	.word	0x00061a80

08001998 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800199c:	4b12      	ldr	r3, [pc, #72]	; (80019e8 <MX_I2C2_Init+0x50>)
 800199e:	4a13      	ldr	r2, [pc, #76]	; (80019ec <MX_I2C2_Init+0x54>)
 80019a0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 80019a2:	4b11      	ldr	r3, [pc, #68]	; (80019e8 <MX_I2C2_Init+0x50>)
 80019a4:	4a12      	ldr	r2, [pc, #72]	; (80019f0 <MX_I2C2_Init+0x58>)
 80019a6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80019a8:	4b0f      	ldr	r3, [pc, #60]	; (80019e8 <MX_I2C2_Init+0x50>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80019ae:	4b0e      	ldr	r3, [pc, #56]	; (80019e8 <MX_I2C2_Init+0x50>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80019b4:	4b0c      	ldr	r3, [pc, #48]	; (80019e8 <MX_I2C2_Init+0x50>)
 80019b6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80019ba:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80019bc:	4b0a      	ldr	r3, [pc, #40]	; (80019e8 <MX_I2C2_Init+0x50>)
 80019be:	2200      	movs	r2, #0
 80019c0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80019c2:	4b09      	ldr	r3, [pc, #36]	; (80019e8 <MX_I2C2_Init+0x50>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80019c8:	4b07      	ldr	r3, [pc, #28]	; (80019e8 <MX_I2C2_Init+0x50>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80019ce:	4b06      	ldr	r3, [pc, #24]	; (80019e8 <MX_I2C2_Init+0x50>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80019d4:	4804      	ldr	r0, [pc, #16]	; (80019e8 <MX_I2C2_Init+0x50>)
 80019d6:	f004 ff2f 	bl	8006838 <HAL_I2C_Init>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d001      	beq.n	80019e4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80019e0:	f001 ff92 	bl	8003908 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80019e4:	bf00      	nop
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	2000058c 	.word	0x2000058c
 80019ec:	40005800 	.word	0x40005800
 80019f0:	00061a80 	.word	0x00061a80

080019f4 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80019f8:	4b12      	ldr	r3, [pc, #72]	; (8001a44 <MX_I2C3_Init+0x50>)
 80019fa:	4a13      	ldr	r2, [pc, #76]	; (8001a48 <MX_I2C3_Init+0x54>)
 80019fc:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 80019fe:	4b11      	ldr	r3, [pc, #68]	; (8001a44 <MX_I2C3_Init+0x50>)
 8001a00:	4a12      	ldr	r2, [pc, #72]	; (8001a4c <MX_I2C3_Init+0x58>)
 8001a02:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001a04:	4b0f      	ldr	r3, [pc, #60]	; (8001a44 <MX_I2C3_Init+0x50>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001a0a:	4b0e      	ldr	r3, [pc, #56]	; (8001a44 <MX_I2C3_Init+0x50>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a10:	4b0c      	ldr	r3, [pc, #48]	; (8001a44 <MX_I2C3_Init+0x50>)
 8001a12:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a16:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a18:	4b0a      	ldr	r3, [pc, #40]	; (8001a44 <MX_I2C3_Init+0x50>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001a1e:	4b09      	ldr	r3, [pc, #36]	; (8001a44 <MX_I2C3_Init+0x50>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a24:	4b07      	ldr	r3, [pc, #28]	; (8001a44 <MX_I2C3_Init+0x50>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a2a:	4b06      	ldr	r3, [pc, #24]	; (8001a44 <MX_I2C3_Init+0x50>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001a30:	4804      	ldr	r0, [pc, #16]	; (8001a44 <MX_I2C3_Init+0x50>)
 8001a32:	f004 ff01 	bl	8006838 <HAL_I2C_Init>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d001      	beq.n	8001a40 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001a3c:	f001 ff64 	bl	8003908 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001a40:	bf00      	nop
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	200005e0 	.word	0x200005e0
 8001a48:	40005c00 	.word	0x40005c00
 8001a4c:	00061a80 	.word	0x00061a80

08001a50 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001a54:	4b17      	ldr	r3, [pc, #92]	; (8001ab4 <MX_SPI2_Init+0x64>)
 8001a56:	4a18      	ldr	r2, [pc, #96]	; (8001ab8 <MX_SPI2_Init+0x68>)
 8001a58:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001a5a:	4b16      	ldr	r3, [pc, #88]	; (8001ab4 <MX_SPI2_Init+0x64>)
 8001a5c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001a60:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001a62:	4b14      	ldr	r3, [pc, #80]	; (8001ab4 <MX_SPI2_Init+0x64>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a68:	4b12      	ldr	r3, [pc, #72]	; (8001ab4 <MX_SPI2_Init+0x64>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a6e:	4b11      	ldr	r3, [pc, #68]	; (8001ab4 <MX_SPI2_Init+0x64>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a74:	4b0f      	ldr	r3, [pc, #60]	; (8001ab4 <MX_SPI2_Init+0x64>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001a7a:	4b0e      	ldr	r3, [pc, #56]	; (8001ab4 <MX_SPI2_Init+0x64>)
 8001a7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a80:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001a82:	4b0c      	ldr	r3, [pc, #48]	; (8001ab4 <MX_SPI2_Init+0x64>)
 8001a84:	2220      	movs	r2, #32
 8001a86:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a88:	4b0a      	ldr	r3, [pc, #40]	; (8001ab4 <MX_SPI2_Init+0x64>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a8e:	4b09      	ldr	r3, [pc, #36]	; (8001ab4 <MX_SPI2_Init+0x64>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a94:	4b07      	ldr	r3, [pc, #28]	; (8001ab4 <MX_SPI2_Init+0x64>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001a9a:	4b06      	ldr	r3, [pc, #24]	; (8001ab4 <MX_SPI2_Init+0x64>)
 8001a9c:	220a      	movs	r2, #10
 8001a9e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001aa0:	4804      	ldr	r0, [pc, #16]	; (8001ab4 <MX_SPI2_Init+0x64>)
 8001aa2:	f006 fb21 	bl	80080e8 <HAL_SPI_Init>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d001      	beq.n	8001ab0 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001aac:	f001 ff2c 	bl	8003908 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001ab0:	bf00      	nop
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	20000634 	.word	0x20000634
 8001ab8:	40003800 	.word	0x40003800

08001abc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b08a      	sub	sp, #40	; 0x28
 8001ac0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ac2:	f107 0318 	add.w	r3, r7, #24
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	601a      	str	r2, [r3, #0]
 8001aca:	605a      	str	r2, [r3, #4]
 8001acc:	609a      	str	r2, [r3, #8]
 8001ace:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ad0:	f107 0310 	add.w	r3, r7, #16
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	601a      	str	r2, [r3, #0]
 8001ad8:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001ada:	463b      	mov	r3, r7
 8001adc:	2200      	movs	r2, #0
 8001ade:	601a      	str	r2, [r3, #0]
 8001ae0:	605a      	str	r2, [r3, #4]
 8001ae2:	609a      	str	r2, [r3, #8]
 8001ae4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001ae6:	4b2c      	ldr	r3, [pc, #176]	; (8001b98 <MX_TIM2_Init+0xdc>)
 8001ae8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001aec:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 8001aee:	4b2a      	ldr	r3, [pc, #168]	; (8001b98 <MX_TIM2_Init+0xdc>)
 8001af0:	2253      	movs	r2, #83	; 0x53
 8001af2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001af4:	4b28      	ldr	r3, [pc, #160]	; (8001b98 <MX_TIM2_Init+0xdc>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8001afa:	4b27      	ldr	r3, [pc, #156]	; (8001b98 <MX_TIM2_Init+0xdc>)
 8001afc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001b00:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b02:	4b25      	ldr	r3, [pc, #148]	; (8001b98 <MX_TIM2_Init+0xdc>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b08:	4b23      	ldr	r3, [pc, #140]	; (8001b98 <MX_TIM2_Init+0xdc>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001b0e:	4822      	ldr	r0, [pc, #136]	; (8001b98 <MX_TIM2_Init+0xdc>)
 8001b10:	f006 ff2a 	bl	8008968 <HAL_TIM_Base_Init>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d001      	beq.n	8001b1e <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 8001b1a:	f001 fef5 	bl	8003908 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b22:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001b24:	f107 0318 	add.w	r3, r7, #24
 8001b28:	4619      	mov	r1, r3
 8001b2a:	481b      	ldr	r0, [pc, #108]	; (8001b98 <MX_TIM2_Init+0xdc>)
 8001b2c:	f007 fbbe 	bl	80092ac <HAL_TIM_ConfigClockSource>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d001      	beq.n	8001b3a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001b36:	f001 fee7 	bl	8003908 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001b3a:	4817      	ldr	r0, [pc, #92]	; (8001b98 <MX_TIM2_Init+0xdc>)
 8001b3c:	f007 f8f6 	bl	8008d2c <HAL_TIM_IC_Init>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d001      	beq.n	8001b4a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001b46:	f001 fedf 	bl	8003908 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b52:	f107 0310 	add.w	r3, r7, #16
 8001b56:	4619      	mov	r1, r3
 8001b58:	480f      	ldr	r0, [pc, #60]	; (8001b98 <MX_TIM2_Init+0xdc>)
 8001b5a:	f008 f9df 	bl	8009f1c <HAL_TIMEx_MasterConfigSynchronization>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d001      	beq.n	8001b68 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8001b64:	f001 fed0 	bl	8003908 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001b70:	2300      	movs	r3, #0
 8001b72:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001b74:	2300      	movs	r3, #0
 8001b76:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001b78:	463b      	mov	r3, r7
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	4806      	ldr	r0, [pc, #24]	; (8001b98 <MX_TIM2_Init+0xdc>)
 8001b80:	f007 fa35 	bl	8008fee <HAL_TIM_IC_ConfigChannel>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d001      	beq.n	8001b8e <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 8001b8a:	f001 febd 	bl	8003908 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001b8e:	bf00      	nop
 8001b90:	3728      	adds	r7, #40	; 0x28
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	2000068c 	.word	0x2000068c

08001b9c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b092      	sub	sp, #72	; 0x48
 8001ba0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ba2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	601a      	str	r2, [r3, #0]
 8001baa:	605a      	str	r2, [r3, #4]
 8001bac:	609a      	str	r2, [r3, #8]
 8001bae:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001bb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	601a      	str	r2, [r3, #0]
 8001bb8:	605a      	str	r2, [r3, #4]
 8001bba:	609a      	str	r2, [r3, #8]
 8001bbc:	60da      	str	r2, [r3, #12]
 8001bbe:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bc0:	f107 031c 	add.w	r3, r7, #28
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	601a      	str	r2, [r3, #0]
 8001bc8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001bca:	463b      	mov	r3, r7
 8001bcc:	2200      	movs	r2, #0
 8001bce:	601a      	str	r2, [r3, #0]
 8001bd0:	605a      	str	r2, [r3, #4]
 8001bd2:	609a      	str	r2, [r3, #8]
 8001bd4:	60da      	str	r2, [r3, #12]
 8001bd6:	611a      	str	r2, [r3, #16]
 8001bd8:	615a      	str	r2, [r3, #20]
 8001bda:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001bdc:	4b44      	ldr	r3, [pc, #272]	; (8001cf0 <MX_TIM3_Init+0x154>)
 8001bde:	4a45      	ldr	r2, [pc, #276]	; (8001cf4 <MX_TIM3_Init+0x158>)
 8001be0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7-1;
 8001be2:	4b43      	ldr	r3, [pc, #268]	; (8001cf0 <MX_TIM3_Init+0x154>)
 8001be4:	2206      	movs	r2, #6
 8001be6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001be8:	4b41      	ldr	r3, [pc, #260]	; (8001cf0 <MX_TIM3_Init+0x154>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8001bee:	4b40      	ldr	r3, [pc, #256]	; (8001cf0 <MX_TIM3_Init+0x154>)
 8001bf0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001bf4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bf6:	4b3e      	ldr	r3, [pc, #248]	; (8001cf0 <MX_TIM3_Init+0x154>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bfc:	4b3c      	ldr	r3, [pc, #240]	; (8001cf0 <MX_TIM3_Init+0x154>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001c02:	483b      	ldr	r0, [pc, #236]	; (8001cf0 <MX_TIM3_Init+0x154>)
 8001c04:	f006 feb0 	bl	8008968 <HAL_TIM_Base_Init>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d001      	beq.n	8001c12 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001c0e:	f001 fe7b 	bl	8003908 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c16:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001c18:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	4834      	ldr	r0, [pc, #208]	; (8001cf0 <MX_TIM3_Init+0x154>)
 8001c20:	f007 fb44 	bl	80092ac <HAL_TIM_ConfigClockSource>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d001      	beq.n	8001c2e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001c2a:	f001 fe6d 	bl	8003908 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001c2e:	4830      	ldr	r0, [pc, #192]	; (8001cf0 <MX_TIM3_Init+0x154>)
 8001c30:	f006 ff5a 	bl	8008ae8 <HAL_TIM_PWM_Init>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d001      	beq.n	8001c3e <MX_TIM3_Init+0xa2>
  {
    Error_Handler();
 8001c3a:	f001 fe65 	bl	8003908 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.InputTrigger = TIM_TS_ITR3;
 8001c42:	2330      	movs	r3, #48	; 0x30
 8001c44:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8001c46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	4828      	ldr	r0, [pc, #160]	; (8001cf0 <MX_TIM3_Init+0x154>)
 8001c4e:	f007 fbf4 	bl	800943a <HAL_TIM_SlaveConfigSynchro>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d001      	beq.n	8001c5c <MX_TIM3_Init+0xc0>
  {
    Error_Handler();
 8001c58:	f001 fe56 	bl	8003908 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c60:	2300      	movs	r3, #0
 8001c62:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001c64:	f107 031c 	add.w	r3, r7, #28
 8001c68:	4619      	mov	r1, r3
 8001c6a:	4821      	ldr	r0, [pc, #132]	; (8001cf0 <MX_TIM3_Init+0x154>)
 8001c6c:	f008 f956 	bl	8009f1c <HAL_TIMEx_MasterConfigSynchronization>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d001      	beq.n	8001c7a <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 8001c76:	f001 fe47 	bl	8003908 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c7a:	2360      	movs	r3, #96	; 0x60
 8001c7c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c82:	2300      	movs	r3, #0
 8001c84:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c86:	2300      	movs	r3, #0
 8001c88:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c8a:	463b      	mov	r3, r7
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	4619      	mov	r1, r3
 8001c90:	4817      	ldr	r0, [pc, #92]	; (8001cf0 <MX_TIM3_Init+0x154>)
 8001c92:	f007 fa49 	bl	8009128 <HAL_TIM_PWM_ConfigChannel>
 8001c96:	4603      	mov	r3, r0
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d001      	beq.n	8001ca0 <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 8001c9c:	f001 fe34 	bl	8003908 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001ca0:	463b      	mov	r3, r7
 8001ca2:	2204      	movs	r2, #4
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	4812      	ldr	r0, [pc, #72]	; (8001cf0 <MX_TIM3_Init+0x154>)
 8001ca8:	f007 fa3e 	bl	8009128 <HAL_TIM_PWM_ConfigChannel>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d001      	beq.n	8001cb6 <MX_TIM3_Init+0x11a>
  {
    Error_Handler();
 8001cb2:	f001 fe29 	bl	8003908 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001cb6:	463b      	mov	r3, r7
 8001cb8:	2208      	movs	r2, #8
 8001cba:	4619      	mov	r1, r3
 8001cbc:	480c      	ldr	r0, [pc, #48]	; (8001cf0 <MX_TIM3_Init+0x154>)
 8001cbe:	f007 fa33 	bl	8009128 <HAL_TIM_PWM_ConfigChannel>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d001      	beq.n	8001ccc <MX_TIM3_Init+0x130>
  {
    Error_Handler();
 8001cc8:	f001 fe1e 	bl	8003908 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001ccc:	463b      	mov	r3, r7
 8001cce:	220c      	movs	r2, #12
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	4807      	ldr	r0, [pc, #28]	; (8001cf0 <MX_TIM3_Init+0x154>)
 8001cd4:	f007 fa28 	bl	8009128 <HAL_TIM_PWM_ConfigChannel>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d001      	beq.n	8001ce2 <MX_TIM3_Init+0x146>
  {
    Error_Handler();
 8001cde:	f001 fe13 	bl	8003908 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001ce2:	4803      	ldr	r0, [pc, #12]	; (8001cf0 <MX_TIM3_Init+0x154>)
 8001ce4:	f002 f8bc 	bl	8003e60 <HAL_TIM_MspPostInit>

}
 8001ce8:	bf00      	nop
 8001cea:	3748      	adds	r7, #72	; 0x48
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	200006d4 	.word	0x200006d4
 8001cf4:	40000400 	.word	0x40000400

08001cf8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b08e      	sub	sp, #56	; 0x38
 8001cfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001cfe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d02:	2200      	movs	r2, #0
 8001d04:	601a      	str	r2, [r3, #0]
 8001d06:	605a      	str	r2, [r3, #4]
 8001d08:	609a      	str	r2, [r3, #8]
 8001d0a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d0c:	f107 0320 	add.w	r3, r7, #32
 8001d10:	2200      	movs	r2, #0
 8001d12:	601a      	str	r2, [r3, #0]
 8001d14:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d16:	1d3b      	adds	r3, r7, #4
 8001d18:	2200      	movs	r2, #0
 8001d1a:	601a      	str	r2, [r3, #0]
 8001d1c:	605a      	str	r2, [r3, #4]
 8001d1e:	609a      	str	r2, [r3, #8]
 8001d20:	60da      	str	r2, [r3, #12]
 8001d22:	611a      	str	r2, [r3, #16]
 8001d24:	615a      	str	r2, [r3, #20]
 8001d26:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001d28:	4b2b      	ldr	r3, [pc, #172]	; (8001dd8 <MX_TIM4_Init+0xe0>)
 8001d2a:	4a2c      	ldr	r2, [pc, #176]	; (8001ddc <MX_TIM4_Init+0xe4>)
 8001d2c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001d2e:	4b2a      	ldr	r3, [pc, #168]	; (8001dd8 <MX_TIM4_Init+0xe0>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d34:	4b28      	ldr	r3, [pc, #160]	; (8001dd8 <MX_TIM4_Init+0xe0>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001d3a:	4b27      	ldr	r3, [pc, #156]	; (8001dd8 <MX_TIM4_Init+0xe0>)
 8001d3c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d40:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d42:	4b25      	ldr	r3, [pc, #148]	; (8001dd8 <MX_TIM4_Init+0xe0>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d48:	4b23      	ldr	r3, [pc, #140]	; (8001dd8 <MX_TIM4_Init+0xe0>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001d4e:	4822      	ldr	r0, [pc, #136]	; (8001dd8 <MX_TIM4_Init+0xe0>)
 8001d50:	f006 fe0a 	bl	8008968 <HAL_TIM_Base_Init>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d001      	beq.n	8001d5e <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8001d5a:	f001 fdd5 	bl	8003908 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d62:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001d64:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d68:	4619      	mov	r1, r3
 8001d6a:	481b      	ldr	r0, [pc, #108]	; (8001dd8 <MX_TIM4_Init+0xe0>)
 8001d6c:	f007 fa9e 	bl	80092ac <HAL_TIM_ConfigClockSource>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d001      	beq.n	8001d7a <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8001d76:	f001 fdc7 	bl	8003908 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001d7a:	4817      	ldr	r0, [pc, #92]	; (8001dd8 <MX_TIM4_Init+0xe0>)
 8001d7c:	f006 feb4 	bl	8008ae8 <HAL_TIM_PWM_Init>
 8001d80:	4603      	mov	r3, r0
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d001      	beq.n	8001d8a <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001d86:	f001 fdbf 	bl	8003908 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001d92:	f107 0320 	add.w	r3, r7, #32
 8001d96:	4619      	mov	r1, r3
 8001d98:	480f      	ldr	r0, [pc, #60]	; (8001dd8 <MX_TIM4_Init+0xe0>)
 8001d9a:	f008 f8bf 	bl	8009f1c <HAL_TIMEx_MasterConfigSynchronization>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d001      	beq.n	8001da8 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001da4:	f001 fdb0 	bl	8003908 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001da8:	2360      	movs	r3, #96	; 0x60
 8001daa:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001dac:	2300      	movs	r3, #0
 8001dae:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001db0:	2300      	movs	r3, #0
 8001db2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001db4:	2300      	movs	r3, #0
 8001db6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001db8:	1d3b      	adds	r3, r7, #4
 8001dba:	2200      	movs	r2, #0
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	4806      	ldr	r0, [pc, #24]	; (8001dd8 <MX_TIM4_Init+0xe0>)
 8001dc0:	f007 f9b2 	bl	8009128 <HAL_TIM_PWM_ConfigChannel>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d001      	beq.n	8001dce <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8001dca:	f001 fd9d 	bl	8003908 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001dce:	bf00      	nop
 8001dd0:	3738      	adds	r7, #56	; 0x38
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	2000071c 	.word	0x2000071c
 8001ddc:	40000800 	.word	0x40000800

08001de0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b082      	sub	sp, #8
 8001de4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001de6:	463b      	mov	r3, r7
 8001de8:	2200      	movs	r2, #0
 8001dea:	601a      	str	r2, [r3, #0]
 8001dec:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001dee:	4b15      	ldr	r3, [pc, #84]	; (8001e44 <MX_TIM6_Init+0x64>)
 8001df0:	4a15      	ldr	r2, [pc, #84]	; (8001e48 <MX_TIM6_Init+0x68>)
 8001df2:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 84-1;
 8001df4:	4b13      	ldr	r3, [pc, #76]	; (8001e44 <MX_TIM6_Init+0x64>)
 8001df6:	2253      	movs	r2, #83	; 0x53
 8001df8:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dfa:	4b12      	ldr	r3, [pc, #72]	; (8001e44 <MX_TIM6_Init+0x64>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65000;
 8001e00:	4b10      	ldr	r3, [pc, #64]	; (8001e44 <MX_TIM6_Init+0x64>)
 8001e02:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 8001e06:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e08:	4b0e      	ldr	r3, [pc, #56]	; (8001e44 <MX_TIM6_Init+0x64>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001e0e:	480d      	ldr	r0, [pc, #52]	; (8001e44 <MX_TIM6_Init+0x64>)
 8001e10:	f006 fdaa 	bl	8008968 <HAL_TIM_Base_Init>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d001      	beq.n	8001e1e <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8001e1a:	f001 fd75 	bl	8003908 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e22:	2300      	movs	r3, #0
 8001e24:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001e26:	463b      	mov	r3, r7
 8001e28:	4619      	mov	r1, r3
 8001e2a:	4806      	ldr	r0, [pc, #24]	; (8001e44 <MX_TIM6_Init+0x64>)
 8001e2c:	f008 f876 	bl	8009f1c <HAL_TIMEx_MasterConfigSynchronization>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d001      	beq.n	8001e3a <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8001e36:	f001 fd67 	bl	8003908 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001e3a:	bf00      	nop
 8001e3c:	3708      	adds	r7, #8
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	20000764 	.word	0x20000764
 8001e48:	40001000 	.word	0x40001000

08001e4c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b082      	sub	sp, #8
 8001e50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e52:	463b      	mov	r3, r7
 8001e54:	2200      	movs	r2, #0
 8001e56:	601a      	str	r2, [r3, #0]
 8001e58:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001e5a:	4b15      	ldr	r3, [pc, #84]	; (8001eb0 <MX_TIM7_Init+0x64>)
 8001e5c:	4a15      	ldr	r2, [pc, #84]	; (8001eb4 <MX_TIM7_Init+0x68>)
 8001e5e:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 85-1;
 8001e60:	4b13      	ldr	r3, [pc, #76]	; (8001eb0 <MX_TIM7_Init+0x64>)
 8001e62:	2254      	movs	r2, #84	; 0x54
 8001e64:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e66:	4b12      	ldr	r3, [pc, #72]	; (8001eb0 <MX_TIM7_Init+0x64>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 10000-1;
 8001e6c:	4b10      	ldr	r3, [pc, #64]	; (8001eb0 <MX_TIM7_Init+0x64>)
 8001e6e:	f242 720f 	movw	r2, #9999	; 0x270f
 8001e72:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e74:	4b0e      	ldr	r3, [pc, #56]	; (8001eb0 <MX_TIM7_Init+0x64>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001e7a:	480d      	ldr	r0, [pc, #52]	; (8001eb0 <MX_TIM7_Init+0x64>)
 8001e7c:	f006 fd74 	bl	8008968 <HAL_TIM_Base_Init>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d001      	beq.n	8001e8a <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8001e86:	f001 fd3f 	bl	8003908 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001e92:	463b      	mov	r3, r7
 8001e94:	4619      	mov	r1, r3
 8001e96:	4806      	ldr	r0, [pc, #24]	; (8001eb0 <MX_TIM7_Init+0x64>)
 8001e98:	f008 f840 	bl	8009f1c <HAL_TIMEx_MasterConfigSynchronization>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d001      	beq.n	8001ea6 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8001ea2:	f001 fd31 	bl	8003908 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001ea6:	bf00      	nop
 8001ea8:	3708      	adds	r7, #8
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	200007ac 	.word	0x200007ac
 8001eb4:	40001400 	.word	0x40001400

08001eb8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001ebc:	4b10      	ldr	r3, [pc, #64]	; (8001f00 <MX_USART1_UART_Init+0x48>)
 8001ebe:	4a11      	ldr	r2, [pc, #68]	; (8001f04 <MX_USART1_UART_Init+0x4c>)
 8001ec0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 420000;
 8001ec2:	4b0f      	ldr	r3, [pc, #60]	; (8001f00 <MX_USART1_UART_Init+0x48>)
 8001ec4:	4a10      	ldr	r2, [pc, #64]	; (8001f08 <MX_USART1_UART_Init+0x50>)
 8001ec6:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001ec8:	4b0d      	ldr	r3, [pc, #52]	; (8001f00 <MX_USART1_UART_Init+0x48>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001ece:	4b0c      	ldr	r3, [pc, #48]	; (8001f00 <MX_USART1_UART_Init+0x48>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001ed4:	4b0a      	ldr	r3, [pc, #40]	; (8001f00 <MX_USART1_UART_Init+0x48>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001eda:	4b09      	ldr	r3, [pc, #36]	; (8001f00 <MX_USART1_UART_Init+0x48>)
 8001edc:	220c      	movs	r2, #12
 8001ede:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ee0:	4b07      	ldr	r3, [pc, #28]	; (8001f00 <MX_USART1_UART_Init+0x48>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ee6:	4b06      	ldr	r3, [pc, #24]	; (8001f00 <MX_USART1_UART_Init+0x48>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001eec:	4804      	ldr	r0, [pc, #16]	; (8001f00 <MX_USART1_UART_Init+0x48>)
 8001eee:	f008 f8a5 	bl	800a03c <HAL_UART_Init>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d001      	beq.n	8001efc <MX_USART1_UART_Init+0x44>
  {
    Error_Handler();
 8001ef8:	f001 fd06 	bl	8003908 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001efc:	bf00      	nop
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	200007f4 	.word	0x200007f4
 8001f04:	40011000 	.word	0x40011000
 8001f08:	000668a0 	.word	0x000668a0

08001f0c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001f10:	4b11      	ldr	r3, [pc, #68]	; (8001f58 <MX_USART2_UART_Init+0x4c>)
 8001f12:	4a12      	ldr	r2, [pc, #72]	; (8001f5c <MX_USART2_UART_Init+0x50>)
 8001f14:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001f16:	4b10      	ldr	r3, [pc, #64]	; (8001f58 <MX_USART2_UART_Init+0x4c>)
 8001f18:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f1c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001f1e:	4b0e      	ldr	r3, [pc, #56]	; (8001f58 <MX_USART2_UART_Init+0x4c>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001f24:	4b0c      	ldr	r3, [pc, #48]	; (8001f58 <MX_USART2_UART_Init+0x4c>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001f2a:	4b0b      	ldr	r3, [pc, #44]	; (8001f58 <MX_USART2_UART_Init+0x4c>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001f30:	4b09      	ldr	r3, [pc, #36]	; (8001f58 <MX_USART2_UART_Init+0x4c>)
 8001f32:	220c      	movs	r2, #12
 8001f34:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f36:	4b08      	ldr	r3, [pc, #32]	; (8001f58 <MX_USART2_UART_Init+0x4c>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f3c:	4b06      	ldr	r3, [pc, #24]	; (8001f58 <MX_USART2_UART_Init+0x4c>)
 8001f3e:	2200      	movs	r2, #0
 8001f40:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001f42:	4805      	ldr	r0, [pc, #20]	; (8001f58 <MX_USART2_UART_Init+0x4c>)
 8001f44:	f008 f87a 	bl	800a03c <HAL_UART_Init>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d001      	beq.n	8001f52 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001f4e:	f001 fcdb 	bl	8003908 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001f52:	bf00      	nop
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	20000838 	.word	0x20000838
 8001f5c:	40004400 	.word	0x40004400

08001f60 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001f64:	4b11      	ldr	r3, [pc, #68]	; (8001fac <MX_USART3_UART_Init+0x4c>)
 8001f66:	4a12      	ldr	r2, [pc, #72]	; (8001fb0 <MX_USART3_UART_Init+0x50>)
 8001f68:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001f6a:	4b10      	ldr	r3, [pc, #64]	; (8001fac <MX_USART3_UART_Init+0x4c>)
 8001f6c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f70:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001f72:	4b0e      	ldr	r3, [pc, #56]	; (8001fac <MX_USART3_UART_Init+0x4c>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001f78:	4b0c      	ldr	r3, [pc, #48]	; (8001fac <MX_USART3_UART_Init+0x4c>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001f7e:	4b0b      	ldr	r3, [pc, #44]	; (8001fac <MX_USART3_UART_Init+0x4c>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001f84:	4b09      	ldr	r3, [pc, #36]	; (8001fac <MX_USART3_UART_Init+0x4c>)
 8001f86:	220c      	movs	r2, #12
 8001f88:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f8a:	4b08      	ldr	r3, [pc, #32]	; (8001fac <MX_USART3_UART_Init+0x4c>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f90:	4b06      	ldr	r3, [pc, #24]	; (8001fac <MX_USART3_UART_Init+0x4c>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001f96:	4805      	ldr	r0, [pc, #20]	; (8001fac <MX_USART3_UART_Init+0x4c>)
 8001f98:	f008 f850 	bl	800a03c <HAL_UART_Init>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d001      	beq.n	8001fa6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001fa2:	f001 fcb1 	bl	8003908 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001fa6:	bf00      	nop
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	2000087c 	.word	0x2000087c
 8001fb0:	40004800 	.word	0x40004800

08001fb4 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001fb8:	4b11      	ldr	r3, [pc, #68]	; (8002000 <MX_USART6_UART_Init+0x4c>)
 8001fba:	4a12      	ldr	r2, [pc, #72]	; (8002004 <MX_USART6_UART_Init+0x50>)
 8001fbc:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001fbe:	4b10      	ldr	r3, [pc, #64]	; (8002000 <MX_USART6_UART_Init+0x4c>)
 8001fc0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001fc4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001fc6:	4b0e      	ldr	r3, [pc, #56]	; (8002000 <MX_USART6_UART_Init+0x4c>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001fcc:	4b0c      	ldr	r3, [pc, #48]	; (8002000 <MX_USART6_UART_Init+0x4c>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001fd2:	4b0b      	ldr	r3, [pc, #44]	; (8002000 <MX_USART6_UART_Init+0x4c>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001fd8:	4b09      	ldr	r3, [pc, #36]	; (8002000 <MX_USART6_UART_Init+0x4c>)
 8001fda:	220c      	movs	r2, #12
 8001fdc:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fde:	4b08      	ldr	r3, [pc, #32]	; (8002000 <MX_USART6_UART_Init+0x4c>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fe4:	4b06      	ldr	r3, [pc, #24]	; (8002000 <MX_USART6_UART_Init+0x4c>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001fea:	4805      	ldr	r0, [pc, #20]	; (8002000 <MX_USART6_UART_Init+0x4c>)
 8001fec:	f008 f826 	bl	800a03c <HAL_UART_Init>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d001      	beq.n	8001ffa <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001ff6:	f001 fc87 	bl	8003908 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001ffa:	bf00      	nop
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	200008c0 	.word	0x200008c0
 8002004:	40011400 	.word	0x40011400

08002008 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b082      	sub	sp, #8
 800200c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800200e:	2300      	movs	r3, #0
 8002010:	607b      	str	r3, [r7, #4]
 8002012:	4b0c      	ldr	r3, [pc, #48]	; (8002044 <MX_DMA_Init+0x3c>)
 8002014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002016:	4a0b      	ldr	r2, [pc, #44]	; (8002044 <MX_DMA_Init+0x3c>)
 8002018:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800201c:	6313      	str	r3, [r2, #48]	; 0x30
 800201e:	4b09      	ldr	r3, [pc, #36]	; (8002044 <MX_DMA_Init+0x3c>)
 8002020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002022:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002026:	607b      	str	r3, [r7, #4]
 8002028:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 800202a:	2200      	movs	r2, #0
 800202c:	2105      	movs	r1, #5
 800202e:	203a      	movs	r0, #58	; 0x3a
 8002030:	f003 fde1 	bl	8005bf6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8002034:	203a      	movs	r0, #58	; 0x3a
 8002036:	f003 fdfa 	bl	8005c2e <HAL_NVIC_EnableIRQ>

}
 800203a:	bf00      	nop
 800203c:	3708      	adds	r7, #8
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	40023800 	.word	0x40023800

08002048 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b08a      	sub	sp, #40	; 0x28
 800204c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800204e:	f107 0314 	add.w	r3, r7, #20
 8002052:	2200      	movs	r2, #0
 8002054:	601a      	str	r2, [r3, #0]
 8002056:	605a      	str	r2, [r3, #4]
 8002058:	609a      	str	r2, [r3, #8]
 800205a:	60da      	str	r2, [r3, #12]
 800205c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800205e:	2300      	movs	r3, #0
 8002060:	613b      	str	r3, [r7, #16]
 8002062:	4b6d      	ldr	r3, [pc, #436]	; (8002218 <MX_GPIO_Init+0x1d0>)
 8002064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002066:	4a6c      	ldr	r2, [pc, #432]	; (8002218 <MX_GPIO_Init+0x1d0>)
 8002068:	f043 0304 	orr.w	r3, r3, #4
 800206c:	6313      	str	r3, [r2, #48]	; 0x30
 800206e:	4b6a      	ldr	r3, [pc, #424]	; (8002218 <MX_GPIO_Init+0x1d0>)
 8002070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002072:	f003 0304 	and.w	r3, r3, #4
 8002076:	613b      	str	r3, [r7, #16]
 8002078:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800207a:	2300      	movs	r3, #0
 800207c:	60fb      	str	r3, [r7, #12]
 800207e:	4b66      	ldr	r3, [pc, #408]	; (8002218 <MX_GPIO_Init+0x1d0>)
 8002080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002082:	4a65      	ldr	r2, [pc, #404]	; (8002218 <MX_GPIO_Init+0x1d0>)
 8002084:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002088:	6313      	str	r3, [r2, #48]	; 0x30
 800208a:	4b63      	ldr	r3, [pc, #396]	; (8002218 <MX_GPIO_Init+0x1d0>)
 800208c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800208e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002092:	60fb      	str	r3, [r7, #12]
 8002094:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002096:	2300      	movs	r3, #0
 8002098:	60bb      	str	r3, [r7, #8]
 800209a:	4b5f      	ldr	r3, [pc, #380]	; (8002218 <MX_GPIO_Init+0x1d0>)
 800209c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800209e:	4a5e      	ldr	r2, [pc, #376]	; (8002218 <MX_GPIO_Init+0x1d0>)
 80020a0:	f043 0301 	orr.w	r3, r3, #1
 80020a4:	6313      	str	r3, [r2, #48]	; 0x30
 80020a6:	4b5c      	ldr	r3, [pc, #368]	; (8002218 <MX_GPIO_Init+0x1d0>)
 80020a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020aa:	f003 0301 	and.w	r3, r3, #1
 80020ae:	60bb      	str	r3, [r7, #8]
 80020b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020b2:	2300      	movs	r3, #0
 80020b4:	607b      	str	r3, [r7, #4]
 80020b6:	4b58      	ldr	r3, [pc, #352]	; (8002218 <MX_GPIO_Init+0x1d0>)
 80020b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ba:	4a57      	ldr	r2, [pc, #348]	; (8002218 <MX_GPIO_Init+0x1d0>)
 80020bc:	f043 0302 	orr.w	r3, r3, #2
 80020c0:	6313      	str	r3, [r2, #48]	; 0x30
 80020c2:	4b55      	ldr	r3, [pc, #340]	; (8002218 <MX_GPIO_Init+0x1d0>)
 80020c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c6:	f003 0302 	and.w	r3, r3, #2
 80020ca:	607b      	str	r3, [r7, #4]
 80020cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80020ce:	2300      	movs	r3, #0
 80020d0:	603b      	str	r3, [r7, #0]
 80020d2:	4b51      	ldr	r3, [pc, #324]	; (8002218 <MX_GPIO_Init+0x1d0>)
 80020d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d6:	4a50      	ldr	r2, [pc, #320]	; (8002218 <MX_GPIO_Init+0x1d0>)
 80020d8:	f043 0308 	orr.w	r3, r3, #8
 80020dc:	6313      	str	r3, [r2, #48]	; 0x30
 80020de:	4b4e      	ldr	r3, [pc, #312]	; (8002218 <MX_GPIO_Init+0x1d0>)
 80020e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e2:	f003 0308 	and.w	r3, r3, #8
 80020e6:	603b      	str	r3, [r7, #0]
 80020e8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TRIG_Pin|GNSS_RST_Pin, GPIO_PIN_RESET);
 80020ea:	2200      	movs	r2, #0
 80020ec:	f248 0102 	movw	r1, #32770	; 0x8002
 80020f0:	484a      	ldr	r0, [pc, #296]	; (800221c <MX_GPIO_Init+0x1d4>)
 80020f2:	f004 fb55 	bl	80067a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CS_GYRO_Pin|GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 80020f6:	2200      	movs	r2, #0
 80020f8:	f241 0118 	movw	r1, #4120	; 0x1018
 80020fc:	4848      	ldr	r0, [pc, #288]	; (8002220 <MX_GPIO_Init+0x1d8>)
 80020fe:	f004 fb4f 	bl	80067a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_ACC_GPIO_Port, CS_ACC_Pin, GPIO_PIN_RESET);
 8002102:	2200      	movs	r2, #0
 8002104:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002108:	4846      	ldr	r0, [pc, #280]	; (8002224 <MX_GPIO_Init+0x1dc>)
 800210a:	f004 fb49 	bl	80067a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 800210e:	2200      	movs	r2, #0
 8002110:	2104      	movs	r1, #4
 8002112:	4845      	ldr	r0, [pc, #276]	; (8002228 <MX_GPIO_Init+0x1e0>)
 8002114:	f004 fb44 	bl	80067a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : IT_MAGN_Pin BUTTON_Pin */
  GPIO_InitStruct.Pin = IT_MAGN_Pin|BUTTON_Pin;
 8002118:	f242 0301 	movw	r3, #8193	; 0x2001
 800211c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800211e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002122:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002124:	2300      	movs	r3, #0
 8002126:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002128:	f107 0314 	add.w	r3, r7, #20
 800212c:	4619      	mov	r1, r3
 800212e:	483d      	ldr	r0, [pc, #244]	; (8002224 <MX_GPIO_Init+0x1dc>)
 8002130:	f004 f99a 	bl	8006468 <HAL_GPIO_Init>

  /*Configure GPIO pins : TRIG_Pin GNSS_RST_Pin */
  GPIO_InitStruct.Pin = TRIG_Pin|GNSS_RST_Pin;
 8002134:	f248 0302 	movw	r3, #32770	; 0x8002
 8002138:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800213a:	2301      	movs	r3, #1
 800213c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800213e:	2300      	movs	r3, #0
 8002140:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002142:	2300      	movs	r3, #0
 8002144:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002146:	f107 0314 	add.w	r3, r7, #20
 800214a:	4619      	mov	r1, r3
 800214c:	4833      	ldr	r0, [pc, #204]	; (800221c <MX_GPIO_Init+0x1d4>)
 800214e:	f004 f98b 	bl	8006468 <HAL_GPIO_Init>

  /*Configure GPIO pin : IT_PRESS_Pin */
  GPIO_InitStruct.Pin = IT_PRESS_Pin;
 8002152:	2304      	movs	r3, #4
 8002154:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002156:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800215a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800215c:	2300      	movs	r3, #0
 800215e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IT_PRESS_GPIO_Port, &GPIO_InitStruct);
 8002160:	f107 0314 	add.w	r3, r7, #20
 8002164:	4619      	mov	r1, r3
 8002166:	482e      	ldr	r0, [pc, #184]	; (8002220 <MX_GPIO_Init+0x1d8>)
 8002168:	f004 f97e 	bl	8006468 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_GYRO_Pin PB3 PB4 */
  GPIO_InitStruct.Pin = CS_GYRO_Pin|GPIO_PIN_3|GPIO_PIN_4;
 800216c:	f241 0318 	movw	r3, #4120	; 0x1018
 8002170:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002172:	2301      	movs	r3, #1
 8002174:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002176:	2300      	movs	r3, #0
 8002178:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800217a:	2300      	movs	r3, #0
 800217c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800217e:	f107 0314 	add.w	r3, r7, #20
 8002182:	4619      	mov	r1, r3
 8002184:	4826      	ldr	r0, [pc, #152]	; (8002220 <MX_GPIO_Init+0x1d8>)
 8002186:	f004 f96f 	bl	8006468 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_ACC_Pin */
  GPIO_InitStruct.Pin = CS_ACC_Pin;
 800218a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800218e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002190:	2301      	movs	r3, #1
 8002192:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002194:	2300      	movs	r3, #0
 8002196:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002198:	2300      	movs	r3, #0
 800219a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CS_ACC_GPIO_Port, &GPIO_InitStruct);
 800219c:	f107 0314 	add.w	r3, r7, #20
 80021a0:	4619      	mov	r1, r3
 80021a2:	4820      	ldr	r0, [pc, #128]	; (8002224 <MX_GPIO_Init+0x1dc>)
 80021a4:	f004 f960 	bl	8006468 <HAL_GPIO_Init>

  /*Configure GPIO pins : IT_GYRO_Pin IT_ACC_Pin */
  GPIO_InitStruct.Pin = IT_GYRO_Pin|IT_ACC_Pin;
 80021a8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80021ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80021ae:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80021b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b4:	2300      	movs	r3, #0
 80021b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021b8:	f107 0314 	add.w	r3, r7, #20
 80021bc:	4619      	mov	r1, r3
 80021be:	4817      	ldr	r0, [pc, #92]	; (800221c <MX_GPIO_Init+0x1d4>)
 80021c0:	f004 f952 	bl	8006468 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80021c4:	2304      	movs	r3, #4
 80021c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021c8:	2301      	movs	r3, #1
 80021ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021cc:	2300      	movs	r3, #0
 80021ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021d0:	2300      	movs	r3, #0
 80021d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80021d4:	f107 0314 	add.w	r3, r7, #20
 80021d8:	4619      	mov	r1, r3
 80021da:	4813      	ldr	r0, [pc, #76]	; (8002228 <MX_GPIO_Init+0x1e0>)
 80021dc:	f004 f944 	bl	8006468 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 80021e0:	2200      	movs	r2, #0
 80021e2:	2105      	movs	r1, #5
 80021e4:	2006      	movs	r0, #6
 80021e6:	f003 fd06 	bl	8005bf6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80021ea:	2006      	movs	r0, #6
 80021ec:	f003 fd1f 	bl	8005c2e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 80021f0:	2200      	movs	r2, #0
 80021f2:	2105      	movs	r1, #5
 80021f4:	2008      	movs	r0, #8
 80021f6:	f003 fcfe 	bl	8005bf6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80021fa:	2008      	movs	r0, #8
 80021fc:	f003 fd17 	bl	8005c2e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8002200:	2200      	movs	r2, #0
 8002202:	2105      	movs	r1, #5
 8002204:	2028      	movs	r0, #40	; 0x28
 8002206:	f003 fcf6 	bl	8005bf6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800220a:	2028      	movs	r0, #40	; 0x28
 800220c:	f003 fd0f 	bl	8005c2e <HAL_NVIC_EnableIRQ>

}
 8002210:	bf00      	nop
 8002212:	3728      	adds	r7, #40	; 0x28
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}
 8002218:	40023800 	.word	0x40023800
 800221c:	40020000 	.word	0x40020000
 8002220:	40020400 	.word	0x40020400
 8002224:	40020800 	.word	0x40020800
 8002228:	40020c00 	.word	0x40020c00

0800222c <HAL_GPIO_EXTI_Callback>:

    return reversed;
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800222c:	b480      	push	{r7}
 800222e:	b083      	sub	sp, #12
 8002230:	af00      	add	r7, sp, #0
 8002232:	4603      	mov	r3, r0
 8002234:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == BUTTON_Pin) {
 8002236:	88fb      	ldrh	r3, [r7, #6]
 8002238:	2b01      	cmp	r3, #1
 800223a:	d11c      	bne.n	8002276 <HAL_GPIO_EXTI_Callback+0x4a>
		if(state == 4){state = 5;}
 800223c:	4b1a      	ldr	r3, [pc, #104]	; (80022a8 <HAL_GPIO_EXTI_Callback+0x7c>)
 800223e:	781b      	ldrb	r3, [r3, #0]
 8002240:	2b04      	cmp	r3, #4
 8002242:	d102      	bne.n	800224a <HAL_GPIO_EXTI_Callback+0x1e>
 8002244:	4b18      	ldr	r3, [pc, #96]	; (80022a8 <HAL_GPIO_EXTI_Callback+0x7c>)
 8002246:	2205      	movs	r2, #5
 8002248:	701a      	strb	r2, [r3, #0]
		if(state == 3){state = 4;}
 800224a:	4b17      	ldr	r3, [pc, #92]	; (80022a8 <HAL_GPIO_EXTI_Callback+0x7c>)
 800224c:	781b      	ldrb	r3, [r3, #0]
 800224e:	2b03      	cmp	r3, #3
 8002250:	d102      	bne.n	8002258 <HAL_GPIO_EXTI_Callback+0x2c>
 8002252:	4b15      	ldr	r3, [pc, #84]	; (80022a8 <HAL_GPIO_EXTI_Callback+0x7c>)
 8002254:	2204      	movs	r2, #4
 8002256:	701a      	strb	r2, [r3, #0]
		if(state == 2){state = 3;}
 8002258:	4b13      	ldr	r3, [pc, #76]	; (80022a8 <HAL_GPIO_EXTI_Callback+0x7c>)
 800225a:	781b      	ldrb	r3, [r3, #0]
 800225c:	2b02      	cmp	r3, #2
 800225e:	d102      	bne.n	8002266 <HAL_GPIO_EXTI_Callback+0x3a>
 8002260:	4b11      	ldr	r3, [pc, #68]	; (80022a8 <HAL_GPIO_EXTI_Callback+0x7c>)
 8002262:	2203      	movs	r2, #3
 8002264:	701a      	strb	r2, [r3, #0]
		if(state == 1){state = 2;}
 8002266:	4b10      	ldr	r3, [pc, #64]	; (80022a8 <HAL_GPIO_EXTI_Callback+0x7c>)
 8002268:	781b      	ldrb	r3, [r3, #0]
 800226a:	2b01      	cmp	r3, #1
 800226c:	d104      	bne.n	8002278 <HAL_GPIO_EXTI_Callback+0x4c>
 800226e:	4b0e      	ldr	r3, [pc, #56]	; (80022a8 <HAL_GPIO_EXTI_Callback+0x7c>)
 8002270:	2202      	movs	r2, #2
 8002272:	701a      	strb	r2, [r3, #0]
 8002274:	e000      	b.n	8002278 <HAL_GPIO_EXTI_Callback+0x4c>
	  } else {
	      __NOP();
 8002276:	bf00      	nop
	  }

	if(GPIO_Pin == IT_ACC_Pin) {
 8002278:	88fb      	ldrh	r3, [r7, #6]
 800227a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800227e:	d103      	bne.n	8002288 <HAL_GPIO_EXTI_Callback+0x5c>

	 readstart = 1;
 8002280:	4b0a      	ldr	r3, [pc, #40]	; (80022ac <HAL_GPIO_EXTI_Callback+0x80>)
 8002282:	2201      	movs	r2, #1
 8002284:	701a      	strb	r2, [r3, #0]
 8002286:	e000      	b.n	800228a <HAL_GPIO_EXTI_Callback+0x5e>
  } else {
      __NOP();
 8002288:	bf00      	nop
  }
  if(GPIO_Pin == IT_MAGN_Pin) {
 800228a:	88fb      	ldrh	r3, [r7, #6]
 800228c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002290:	d103      	bne.n	800229a <HAL_GPIO_EXTI_Callback+0x6e>
  	 //HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);

  	 billent = 1;
 8002292:	4b07      	ldr	r3, [pc, #28]	; (80022b0 <HAL_GPIO_EXTI_Callback+0x84>)
 8002294:	2201      	movs	r2, #1
 8002296:	701a      	strb	r2, [r3, #0]
    } else {
        __NOP();
    }
}
 8002298:	e000      	b.n	800229c <HAL_GPIO_EXTI_Callback+0x70>
        __NOP();
 800229a:	bf00      	nop
}
 800229c:	bf00      	nop
 800229e:	370c      	adds	r7, #12
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr
 80022a8:	20000009 	.word	0x20000009
 80022ac:	20000008 	.word	0x20000008
 80022b0:	20000a0c 	.word	0x20000a0c
 80022b4:	00000000 	.word	0x00000000

080022b8 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b082      	sub	sp, #8
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
	if (htim == &htim2 )
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	4a47      	ldr	r2, [pc, #284]	; (80023e0 <HAL_TIM_IC_CaptureCallback+0x128>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	f040 8083 	bne.w	80023d0 <HAL_TIM_IC_CaptureCallback+0x118>
	  {
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);
 80022ca:	2110      	movs	r1, #16
 80022cc:	4845      	ldr	r0, [pc, #276]	; (80023e4 <HAL_TIM_IC_CaptureCallback+0x12c>)
 80022ce:	f004 fa80 	bl	80067d2 <HAL_GPIO_TogglePin>
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // if the interrupt source is channel1
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	7f1b      	ldrb	r3, [r3, #28]
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d17a      	bne.n	80023d0 <HAL_TIM_IC_CaptureCallback+0x118>
		{
			if (Is_First_Captured==0) // if the first value is not captured
 80022da:	4b43      	ldr	r3, [pc, #268]	; (80023e8 <HAL_TIM_IC_CaptureCallback+0x130>)
 80022dc:	781b      	ldrb	r3, [r3, #0]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d11a      	bne.n	8002318 <HAL_TIM_IC_CaptureCallback+0x60>
			{
				IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 80022e2:	2100      	movs	r1, #0
 80022e4:	6878      	ldr	r0, [r7, #4]
 80022e6:	f007 f8eb 	bl	80094c0 <HAL_TIM_ReadCapturedValue>
 80022ea:	4603      	mov	r3, r0
 80022ec:	4a3f      	ldr	r2, [pc, #252]	; (80023ec <HAL_TIM_IC_CaptureCallback+0x134>)
 80022ee:	6013      	str	r3, [r2, #0]
				Is_First_Captured = 1;  // set the first captured as true
 80022f0:	4b3d      	ldr	r3, [pc, #244]	; (80023e8 <HAL_TIM_IC_CaptureCallback+0x130>)
 80022f2:	2201      	movs	r2, #1
 80022f4:	701a      	strb	r2, [r3, #0]
				// Now change the polarity to falling edge
				__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	6a1a      	ldr	r2, [r3, #32]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f022 020a 	bic.w	r2, r2, #10
 8002304:	621a      	str	r2, [r3, #32]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	6a1a      	ldr	r2, [r3, #32]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f042 0202 	orr.w	r2, r2, #2
 8002314:	621a      	str	r2, [r3, #32]
				__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
				//__HAL_TIM_DISABLE_IT(&htim2, TIM_IT_CC1);
			}
		}
	  }
}
 8002316:	e05b      	b.n	80023d0 <HAL_TIM_IC_CaptureCallback+0x118>
			else if (Is_First_Captured==1)   // if the first is already captured
 8002318:	4b33      	ldr	r3, [pc, #204]	; (80023e8 <HAL_TIM_IC_CaptureCallback+0x130>)
 800231a:	781b      	ldrb	r3, [r3, #0]
 800231c:	2b01      	cmp	r3, #1
 800231e:	d157      	bne.n	80023d0 <HAL_TIM_IC_CaptureCallback+0x118>
				IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
 8002320:	2100      	movs	r1, #0
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	f007 f8cc 	bl	80094c0 <HAL_TIM_ReadCapturedValue>
 8002328:	4603      	mov	r3, r0
 800232a:	4a31      	ldr	r2, [pc, #196]	; (80023f0 <HAL_TIM_IC_CaptureCallback+0x138>)
 800232c:	6013      	str	r3, [r2, #0]
				__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	2200      	movs	r2, #0
 8002334:	625a      	str	r2, [r3, #36]	; 0x24
				if (IC_Val2 > IC_Val1)
 8002336:	4b2e      	ldr	r3, [pc, #184]	; (80023f0 <HAL_TIM_IC_CaptureCallback+0x138>)
 8002338:	681a      	ldr	r2, [r3, #0]
 800233a:	4b2c      	ldr	r3, [pc, #176]	; (80023ec <HAL_TIM_IC_CaptureCallback+0x134>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	429a      	cmp	r2, r3
 8002340:	d907      	bls.n	8002352 <HAL_TIM_IC_CaptureCallback+0x9a>
					Difference = IC_Val2-IC_Val1;
 8002342:	4b2b      	ldr	r3, [pc, #172]	; (80023f0 <HAL_TIM_IC_CaptureCallback+0x138>)
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	4b29      	ldr	r3, [pc, #164]	; (80023ec <HAL_TIM_IC_CaptureCallback+0x134>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	1ad3      	subs	r3, r2, r3
 800234c:	4a29      	ldr	r2, [pc, #164]	; (80023f4 <HAL_TIM_IC_CaptureCallback+0x13c>)
 800234e:	6013      	str	r3, [r2, #0]
 8002350:	e00f      	b.n	8002372 <HAL_TIM_IC_CaptureCallback+0xba>
				else if (IC_Val1 > IC_Val2)
 8002352:	4b26      	ldr	r3, [pc, #152]	; (80023ec <HAL_TIM_IC_CaptureCallback+0x134>)
 8002354:	681a      	ldr	r2, [r3, #0]
 8002356:	4b26      	ldr	r3, [pc, #152]	; (80023f0 <HAL_TIM_IC_CaptureCallback+0x138>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	429a      	cmp	r2, r3
 800235c:	d909      	bls.n	8002372 <HAL_TIM_IC_CaptureCallback+0xba>
					Difference = (0xffff - IC_Val1) + IC_Val2;
 800235e:	4b24      	ldr	r3, [pc, #144]	; (80023f0 <HAL_TIM_IC_CaptureCallback+0x138>)
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	4b22      	ldr	r3, [pc, #136]	; (80023ec <HAL_TIM_IC_CaptureCallback+0x134>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	1ad3      	subs	r3, r2, r3
 8002368:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800236c:	33ff      	adds	r3, #255	; 0xff
 800236e:	4a21      	ldr	r2, [pc, #132]	; (80023f4 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8002370:	6013      	str	r3, [r2, #0]
				Distance = Difference * .34/2;
 8002372:	4b20      	ldr	r3, [pc, #128]	; (80023f4 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4618      	mov	r0, r3
 8002378:	f7fe f8c4 	bl	8000504 <__aeabi_ui2d>
 800237c:	a316      	add	r3, pc, #88	; (adr r3, 80023d8 <HAL_TIM_IC_CaptureCallback+0x120>)
 800237e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002382:	f7fe f939 	bl	80005f8 <__aeabi_dmul>
 8002386:	4602      	mov	r2, r0
 8002388:	460b      	mov	r3, r1
 800238a:	4610      	mov	r0, r2
 800238c:	4619      	mov	r1, r3
 800238e:	f04f 0200 	mov.w	r2, #0
 8002392:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002396:	f7fe fa59 	bl	800084c <__aeabi_ddiv>
 800239a:	4602      	mov	r2, r0
 800239c:	460b      	mov	r3, r1
 800239e:	4610      	mov	r0, r2
 80023a0:	4619      	mov	r1, r3
 80023a2:	f7fe fc01 	bl	8000ba8 <__aeabi_d2uiz>
 80023a6:	4603      	mov	r3, r0
 80023a8:	b2da      	uxtb	r2, r3
 80023aa:	4b13      	ldr	r3, [pc, #76]	; (80023f8 <HAL_TIM_IC_CaptureCallback+0x140>)
 80023ac:	701a      	strb	r2, [r3, #0]
				Is_First_Captured = 0; // set it back to false
 80023ae:	4b0e      	ldr	r3, [pc, #56]	; (80023e8 <HAL_TIM_IC_CaptureCallback+0x130>)
 80023b0:	2200      	movs	r2, #0
 80023b2:	701a      	strb	r2, [r3, #0]
				__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	6a1a      	ldr	r2, [r3, #32]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f022 020a 	bic.w	r2, r2, #10
 80023c2:	621a      	str	r2, [r3, #32]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	6a12      	ldr	r2, [r2, #32]
 80023ce:	621a      	str	r2, [r3, #32]
}
 80023d0:	bf00      	nop
 80023d2:	3708      	adds	r7, #8
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	5c28f5c3 	.word	0x5c28f5c3
 80023dc:	3fd5c28f 	.word	0x3fd5c28f
 80023e0:	2000068c 	.word	0x2000068c
 80023e4:	40020400 	.word	0x40020400
 80023e8:	20000b10 	.word	0x20000b10
 80023ec:	20000b04 	.word	0x20000b04
 80023f0:	20000b08 	.word	0x20000b08
 80023f4:	20000b0c 	.word	0x20000b0c
 80023f8:	20000b11 	.word	0x20000b11

080023fc <HAL_TIM_PeriodElapsedCallback>:

// Callback: timer has rolled over
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b083      	sub	sp, #12
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  // Check which version of the timer triggered this callback and toggle LED
  if (htim == &htim6 )
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	4a0b      	ldr	r2, [pc, #44]	; (8002434 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d10d      	bne.n	8002428 <HAL_TIM_PeriodElapsedCallback+0x2c>
  {
	  if(timerse == 1){timerse =0;}
 800240c:	4b0a      	ldr	r3, [pc, #40]	; (8002438 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800240e:	781b      	ldrb	r3, [r3, #0]
 8002410:	2b01      	cmp	r3, #1
 8002412:	d102      	bne.n	800241a <HAL_TIM_PeriodElapsedCallback+0x1e>
 8002414:	4b08      	ldr	r3, [pc, #32]	; (8002438 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8002416:	2200      	movs	r2, #0
 8002418:	701a      	strb	r2, [r3, #0]
	  if(timerse == 0){timerse =1;}
 800241a:	4b07      	ldr	r3, [pc, #28]	; (8002438 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800241c:	781b      	ldrb	r3, [r3, #0]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d102      	bne.n	8002428 <HAL_TIM_PeriodElapsedCallback+0x2c>
 8002422:	4b05      	ldr	r3, [pc, #20]	; (8002438 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8002424:	2201      	movs	r2, #1
 8002426:	701a      	strb	r2, [r3, #0]
  }
  if(htim == &htim7){

  }
}
 8002428:	bf00      	nop
 800242a:	370c      	adds	r7, #12
 800242c:	46bd      	mov	sp, r7
 800242e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002432:	4770      	bx	lr
 8002434:	20000764 	.word	0x20000764
 8002438:	20000b24 	.word	0x20000b24

0800243c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800243c:	b480      	push	{r7}
 800243e:	b083      	sub	sp, #12
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
	if(huart == &huart2){
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	4a06      	ldr	r2, [pc, #24]	; (8002460 <HAL_UART_TxCpltCallback+0x24>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d102      	bne.n	8002452 <HAL_UART_TxCpltCallback+0x16>
			telemetria_data_sent = 1;
 800244c:	4b05      	ldr	r3, [pc, #20]	; (8002464 <HAL_UART_TxCpltCallback+0x28>)
 800244e:	2201      	movs	r2, #1
 8002450:	701a      	strb	r2, [r3, #0]
	}
}
 8002452:	bf00      	nop
 8002454:	370c      	adds	r7, #12
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr
 800245e:	bf00      	nop
 8002460:	20000838 	.word	0x20000838
 8002464:	20000b13 	.word	0x20000b13

08002468 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002468:	b480      	push	{r7}
 800246a:	b083      	sub	sp, #12
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
	if(huart ==&huart1){
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	4a42      	ldr	r2, [pc, #264]	; (800257c <HAL_UART_RxCpltCallback+0x114>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d17b      	bne.n	8002570 <HAL_UART_RxCpltCallback+0x108>
		debug_i = __HAL_TIM_GET_COUNTER(&htim6);
 8002478:	4b41      	ldr	r3, [pc, #260]	; (8002580 <HAL_UART_RxCpltCallback+0x118>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800247e:	461a      	mov	r2, r3
 8002480:	4b40      	ldr	r3, [pc, #256]	; (8002584 <HAL_UART_RxCpltCallback+0x11c>)
 8002482:	601a      	str	r2, [r3, #0]
		if(debug_i < 100){
 8002484:	4b3f      	ldr	r3, [pc, #252]	; (8002584 <HAL_UART_RxCpltCallback+0x11c>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	2b63      	cmp	r3, #99	; 0x63
 800248a:	dc0d      	bgt.n	80024a8 <HAL_UART_RxCpltCallback+0x40>
			CRSF_debug[CRSF_i] = UART1_rxBuffer[0];
 800248c:	4b3e      	ldr	r3, [pc, #248]	; (8002588 <HAL_UART_RxCpltCallback+0x120>)
 800248e:	781b      	ldrb	r3, [r3, #0]
 8002490:	461a      	mov	r2, r3
 8002492:	4b3e      	ldr	r3, [pc, #248]	; (800258c <HAL_UART_RxCpltCallback+0x124>)
 8002494:	7819      	ldrb	r1, [r3, #0]
 8002496:	4b3e      	ldr	r3, [pc, #248]	; (8002590 <HAL_UART_RxCpltCallback+0x128>)
 8002498:	5499      	strb	r1, [r3, r2]
			CRSF_i++;
 800249a:	4b3b      	ldr	r3, [pc, #236]	; (8002588 <HAL_UART_RxCpltCallback+0x120>)
 800249c:	781b      	ldrb	r3, [r3, #0]
 800249e:	3301      	adds	r3, #1
 80024a0:	b2da      	uxtb	r2, r3
 80024a2:	4b39      	ldr	r3, [pc, #228]	; (8002588 <HAL_UART_RxCpltCallback+0x120>)
 80024a4:	701a      	strb	r2, [r3, #0]
 80024a6:	e05f      	b.n	8002568 <HAL_UART_RxCpltCallback+0x100>
		}
		else{
			if(CRSF_debug[2] == 0x16){
 80024a8:	4b39      	ldr	r3, [pc, #228]	; (8002590 <HAL_UART_RxCpltCallback+0x128>)
 80024aa:	789b      	ldrb	r3, [r3, #2]
 80024ac:	2b16      	cmp	r3, #22
 80024ae:	d154      	bne.n	800255a <HAL_UART_RxCpltCallback+0xf2>
				RX_roll = (((uint16_t)(CRSF_debug[4] & 0b00000111)) << 8) + (uint16_t)(CRSF_debug[3]);
 80024b0:	4b37      	ldr	r3, [pc, #220]	; (8002590 <HAL_UART_RxCpltCallback+0x128>)
 80024b2:	791b      	ldrb	r3, [r3, #4]
 80024b4:	021b      	lsls	r3, r3, #8
 80024b6:	b29b      	uxth	r3, r3
 80024b8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80024bc:	b29a      	uxth	r2, r3
 80024be:	4b34      	ldr	r3, [pc, #208]	; (8002590 <HAL_UART_RxCpltCallback+0x128>)
 80024c0:	78db      	ldrb	r3, [r3, #3]
 80024c2:	b29b      	uxth	r3, r3
 80024c4:	4413      	add	r3, r2
 80024c6:	b29a      	uxth	r2, r3
 80024c8:	4b32      	ldr	r3, [pc, #200]	; (8002594 <HAL_UART_RxCpltCallback+0x12c>)
 80024ca:	801a      	strh	r2, [r3, #0]
				RX_pitch = (((uint16_t)(CRSF_debug[5] & 0b00111111)) << 5) + (((uint16_t)(CRSF_debug[4] & 0b11111000)) >> 3);
 80024cc:	4b30      	ldr	r3, [pc, #192]	; (8002590 <HAL_UART_RxCpltCallback+0x128>)
 80024ce:	795b      	ldrb	r3, [r3, #5]
 80024d0:	015b      	lsls	r3, r3, #5
 80024d2:	b29b      	uxth	r3, r3
 80024d4:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80024d8:	b29a      	uxth	r2, r3
 80024da:	4b2d      	ldr	r3, [pc, #180]	; (8002590 <HAL_UART_RxCpltCallback+0x128>)
 80024dc:	791b      	ldrb	r3, [r3, #4]
 80024de:	08db      	lsrs	r3, r3, #3
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	b29b      	uxth	r3, r3
 80024e4:	4413      	add	r3, r2
 80024e6:	b29a      	uxth	r2, r3
 80024e8:	4b2b      	ldr	r3, [pc, #172]	; (8002598 <HAL_UART_RxCpltCallback+0x130>)
 80024ea:	801a      	strh	r2, [r3, #0]
				RX_throttle = (((uint16_t)(CRSF_debug[7] & 0b00000001)) << 10)+ (((uint16_t)(CRSF_debug[6])) << 2) + (((uint16_t)(CRSF_debug[5] & 0b11000000)) >> 6);
 80024ec:	4b28      	ldr	r3, [pc, #160]	; (8002590 <HAL_UART_RxCpltCallback+0x128>)
 80024ee:	79db      	ldrb	r3, [r3, #7]
 80024f0:	029b      	lsls	r3, r3, #10
 80024f2:	b29b      	uxth	r3, r3
 80024f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024f8:	b29a      	uxth	r2, r3
 80024fa:	4b25      	ldr	r3, [pc, #148]	; (8002590 <HAL_UART_RxCpltCallback+0x128>)
 80024fc:	799b      	ldrb	r3, [r3, #6]
 80024fe:	b29b      	uxth	r3, r3
 8002500:	009b      	lsls	r3, r3, #2
 8002502:	b29b      	uxth	r3, r3
 8002504:	4413      	add	r3, r2
 8002506:	b29a      	uxth	r2, r3
 8002508:	4b21      	ldr	r3, [pc, #132]	; (8002590 <HAL_UART_RxCpltCallback+0x128>)
 800250a:	795b      	ldrb	r3, [r3, #5]
 800250c:	099b      	lsrs	r3, r3, #6
 800250e:	b2db      	uxtb	r3, r3
 8002510:	b29b      	uxth	r3, r3
 8002512:	4413      	add	r3, r2
 8002514:	b29a      	uxth	r2, r3
 8002516:	4b21      	ldr	r3, [pc, #132]	; (800259c <HAL_UART_RxCpltCallback+0x134>)
 8002518:	801a      	strh	r2, [r3, #0]
				RX_yaw = (((uint16_t)(CRSF_debug[8] & 0b00001111)) << 7) + (((uint16_t)(CRSF_debug[7] & 0b11111110)) >> 1);
 800251a:	4b1d      	ldr	r3, [pc, #116]	; (8002590 <HAL_UART_RxCpltCallback+0x128>)
 800251c:	7a1b      	ldrb	r3, [r3, #8]
 800251e:	01db      	lsls	r3, r3, #7
 8002520:	b29b      	uxth	r3, r3
 8002522:	f403 63f0 	and.w	r3, r3, #1920	; 0x780
 8002526:	b29a      	uxth	r2, r3
 8002528:	4b19      	ldr	r3, [pc, #100]	; (8002590 <HAL_UART_RxCpltCallback+0x128>)
 800252a:	79db      	ldrb	r3, [r3, #7]
 800252c:	085b      	lsrs	r3, r3, #1
 800252e:	b2db      	uxtb	r3, r3
 8002530:	b29b      	uxth	r3, r3
 8002532:	4413      	add	r3, r2
 8002534:	b29a      	uxth	r2, r3
 8002536:	4b1a      	ldr	r3, [pc, #104]	; (80025a0 <HAL_UART_RxCpltCallback+0x138>)
 8002538:	801a      	strh	r2, [r3, #0]
				RX_arm = (((uint16_t)(CRSF_debug[9] & 0b01111111)) << 4) + (((uint16_t)(CRSF_debug[8] & 0b11110000)) >> 4);
 800253a:	4b15      	ldr	r3, [pc, #84]	; (8002590 <HAL_UART_RxCpltCallback+0x128>)
 800253c:	7a5b      	ldrb	r3, [r3, #9]
 800253e:	011b      	lsls	r3, r3, #4
 8002540:	b29b      	uxth	r3, r3
 8002542:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8002546:	b29a      	uxth	r2, r3
 8002548:	4b11      	ldr	r3, [pc, #68]	; (8002590 <HAL_UART_RxCpltCallback+0x128>)
 800254a:	7a1b      	ldrb	r3, [r3, #8]
 800254c:	091b      	lsrs	r3, r3, #4
 800254e:	b2db      	uxtb	r3, r3
 8002550:	b29b      	uxth	r3, r3
 8002552:	4413      	add	r3, r2
 8002554:	b29a      	uxth	r2, r3
 8002556:	4b13      	ldr	r3, [pc, #76]	; (80025a4 <HAL_UART_RxCpltCallback+0x13c>)
 8002558:	801a      	strh	r2, [r3, #0]
			}
			CRSF_debug[0] = UART1_rxBuffer[0];
 800255a:	4b0c      	ldr	r3, [pc, #48]	; (800258c <HAL_UART_RxCpltCallback+0x124>)
 800255c:	781a      	ldrb	r2, [r3, #0]
 800255e:	4b0c      	ldr	r3, [pc, #48]	; (8002590 <HAL_UART_RxCpltCallback+0x128>)
 8002560:	701a      	strb	r2, [r3, #0]
			CRSF_i = 1;
 8002562:	4b09      	ldr	r3, [pc, #36]	; (8002588 <HAL_UART_RxCpltCallback+0x120>)
 8002564:	2201      	movs	r2, #1
 8002566:	701a      	strb	r2, [r3, #0]
		}
		htim6.Instance->CNT = 0;
 8002568:	4b05      	ldr	r3, [pc, #20]	; (8002580 <HAL_UART_RxCpltCallback+0x118>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	2200      	movs	r2, #0
 800256e:	625a      	str	r2, [r3, #36]	; 0x24
//			HAL_UART_Receive_IT(&huart2, telem, 11);
//		}
//		else
//			HAL_UART_Receive_IT(&huart2, telem, 11);
	}
}
 8002570:	bf00      	nop
 8002572:	370c      	adds	r7, #12
 8002574:	46bd      	mov	sp, r7
 8002576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257a:	4770      	bx	lr
 800257c:	200007f4 	.word	0x200007f4
 8002580:	20000764 	.word	0x20000764
 8002584:	20000b20 	.word	0x20000b20
 8002588:	20000ba8 	.word	0x20000ba8
 800258c:	20000bac 	.word	0x20000bac
 8002590:	20000b68 	.word	0x20000b68
 8002594:	20000bae 	.word	0x20000bae
 8002598:	20000bb0 	.word	0x20000bb0
 800259c:	20000bb4 	.word	0x20000bb4
 80025a0:	20000bb2 	.word	0x20000bb2
 80025a4:	20000bb6 	.word	0x20000bb6

080025a8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80025a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80025ac:	b0fa      	sub	sp, #488	; 0x1e8
 80025ae:	af24      	add	r7, sp, #144	; 0x90
 80025b0:	67f8      	str	r0, [r7, #124]	; 0x7c
  /* USER CODE BEGIN 5 */
	uint8_t telemetria_data[140] = "HELLO WORLD \r\n";
 80025b2:	4bc1      	ldr	r3, [pc, #772]	; (80028b8 <StartDefaultTask+0x310>)
 80025b4:	f107 04cc 	add.w	r4, r7, #204	; 0xcc
 80025b8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80025ba:	c407      	stmia	r4!, {r0, r1, r2}
 80025bc:	8023      	strh	r3, [r4, #0]
 80025be:	3402      	adds	r4, #2
 80025c0:	0c1b      	lsrs	r3, r3, #16
 80025c2:	7023      	strb	r3, [r4, #0]
 80025c4:	f107 03db 	add.w	r3, r7, #219	; 0xdb
 80025c8:	227d      	movs	r2, #125	; 0x7d
 80025ca:	2100      	movs	r1, #0
 80025cc:	4618      	mov	r0, r3
 80025ce:	f00c fc5d 	bl	800ee8c <memset>


  /* Infinite loop */
  for(;;)
  {
	  if(uart_telemetria == 1){
 80025d2:	4bba      	ldr	r3, [pc, #744]	; (80028bc <StartDefaultTask+0x314>)
 80025d4:	781b      	ldrb	r3, [r3, #0]
 80025d6:	2b01      	cmp	r3, #1
 80025d8:	f040 8086 	bne.w	80026e8 <StartDefaultTask+0x140>
		  if(telem[0] == 'P'){
 80025dc:	4bb8      	ldr	r3, [pc, #736]	; (80028c0 <StartDefaultTask+0x318>)
 80025de:	781b      	ldrb	r3, [r3, #0]
 80025e0:	2b50      	cmp	r3, #80	; 0x50
 80025e2:	d13e      	bne.n	8002662 <StartDefaultTask+0xba>
			  telem_P = (float)(((uint32_t)telem[1]-48)*1000000+((uint32_t)telem[2]-48)*100000+((uint32_t)telem[3]-48)*10000+((uint32_t)telem[4]-48)*1000+((uint32_t)telem[5]-48)*100+((uint32_t)telem[6]-48)*10+((uint32_t)telem[7]-48))/100000;
 80025e4:	4bb6      	ldr	r3, [pc, #728]	; (80028c0 <StartDefaultTask+0x318>)
 80025e6:	785b      	ldrb	r3, [r3, #1]
 80025e8:	461a      	mov	r2, r3
 80025ea:	4bb6      	ldr	r3, [pc, #728]	; (80028c4 <StartDefaultTask+0x31c>)
 80025ec:	fb03 f202 	mul.w	r2, r3, r2
 80025f0:	4bb3      	ldr	r3, [pc, #716]	; (80028c0 <StartDefaultTask+0x318>)
 80025f2:	789b      	ldrb	r3, [r3, #2]
 80025f4:	4619      	mov	r1, r3
 80025f6:	4bb4      	ldr	r3, [pc, #720]	; (80028c8 <StartDefaultTask+0x320>)
 80025f8:	fb01 f303 	mul.w	r3, r1, r3
 80025fc:	441a      	add	r2, r3
 80025fe:	4bb0      	ldr	r3, [pc, #704]	; (80028c0 <StartDefaultTask+0x318>)
 8002600:	78db      	ldrb	r3, [r3, #3]
 8002602:	4619      	mov	r1, r3
 8002604:	f242 7310 	movw	r3, #10000	; 0x2710
 8002608:	fb01 f303 	mul.w	r3, r1, r3
 800260c:	441a      	add	r2, r3
 800260e:	4bac      	ldr	r3, [pc, #688]	; (80028c0 <StartDefaultTask+0x318>)
 8002610:	791b      	ldrb	r3, [r3, #4]
 8002612:	4619      	mov	r1, r3
 8002614:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002618:	fb01 f303 	mul.w	r3, r1, r3
 800261c:	441a      	add	r2, r3
 800261e:	4ba8      	ldr	r3, [pc, #672]	; (80028c0 <StartDefaultTask+0x318>)
 8002620:	795b      	ldrb	r3, [r3, #5]
 8002622:	4619      	mov	r1, r3
 8002624:	2364      	movs	r3, #100	; 0x64
 8002626:	fb01 f303 	mul.w	r3, r1, r3
 800262a:	441a      	add	r2, r3
 800262c:	4ba4      	ldr	r3, [pc, #656]	; (80028c0 <StartDefaultTask+0x318>)
 800262e:	799b      	ldrb	r3, [r3, #6]
 8002630:	4619      	mov	r1, r3
 8002632:	460b      	mov	r3, r1
 8002634:	009b      	lsls	r3, r3, #2
 8002636:	440b      	add	r3, r1
 8002638:	005b      	lsls	r3, r3, #1
 800263a:	4413      	add	r3, r2
 800263c:	4aa0      	ldr	r2, [pc, #640]	; (80028c0 <StartDefaultTask+0x318>)
 800263e:	79d2      	ldrb	r2, [r2, #7]
 8002640:	441a      	add	r2, r3
 8002642:	4ba2      	ldr	r3, [pc, #648]	; (80028cc <StartDefaultTask+0x324>)
 8002644:	4413      	add	r3, r2
 8002646:	ee07 3a90 	vmov	s15, r3
 800264a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800264e:	eddf 6aa0 	vldr	s13, [pc, #640]	; 80028d0 <StartDefaultTask+0x328>
 8002652:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002656:	4b9f      	ldr	r3, [pc, #636]	; (80028d4 <StartDefaultTask+0x32c>)
 8002658:	edc3 7a00 	vstr	s15, [r3]
			  new_P = 1;
 800265c:	4b9e      	ldr	r3, [pc, #632]	; (80028d8 <StartDefaultTask+0x330>)
 800265e:	2201      	movs	r2, #1
 8002660:	701a      	strb	r2, [r3, #0]
		  }
		  if(telem[0] == 'D'){
 8002662:	4b97      	ldr	r3, [pc, #604]	; (80028c0 <StartDefaultTask+0x318>)
 8002664:	781b      	ldrb	r3, [r3, #0]
 8002666:	2b44      	cmp	r3, #68	; 0x44
 8002668:	d13e      	bne.n	80026e8 <StartDefaultTask+0x140>
			  telem_D = (float)(((uint32_t)telem[1]-48)*1000000+((uint32_t)telem[2]-48)*100000+((uint32_t)telem[3]-48)*10000+((uint32_t)telem[4]-48)*1000+((uint32_t)telem[5]-48)*100+((uint32_t)telem[6]-48)*10+((uint32_t)telem[7]-48))/100000;
 800266a:	4b95      	ldr	r3, [pc, #596]	; (80028c0 <StartDefaultTask+0x318>)
 800266c:	785b      	ldrb	r3, [r3, #1]
 800266e:	461a      	mov	r2, r3
 8002670:	4b94      	ldr	r3, [pc, #592]	; (80028c4 <StartDefaultTask+0x31c>)
 8002672:	fb03 f202 	mul.w	r2, r3, r2
 8002676:	4b92      	ldr	r3, [pc, #584]	; (80028c0 <StartDefaultTask+0x318>)
 8002678:	789b      	ldrb	r3, [r3, #2]
 800267a:	4619      	mov	r1, r3
 800267c:	4b92      	ldr	r3, [pc, #584]	; (80028c8 <StartDefaultTask+0x320>)
 800267e:	fb01 f303 	mul.w	r3, r1, r3
 8002682:	441a      	add	r2, r3
 8002684:	4b8e      	ldr	r3, [pc, #568]	; (80028c0 <StartDefaultTask+0x318>)
 8002686:	78db      	ldrb	r3, [r3, #3]
 8002688:	4619      	mov	r1, r3
 800268a:	f242 7310 	movw	r3, #10000	; 0x2710
 800268e:	fb01 f303 	mul.w	r3, r1, r3
 8002692:	441a      	add	r2, r3
 8002694:	4b8a      	ldr	r3, [pc, #552]	; (80028c0 <StartDefaultTask+0x318>)
 8002696:	791b      	ldrb	r3, [r3, #4]
 8002698:	4619      	mov	r1, r3
 800269a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800269e:	fb01 f303 	mul.w	r3, r1, r3
 80026a2:	441a      	add	r2, r3
 80026a4:	4b86      	ldr	r3, [pc, #536]	; (80028c0 <StartDefaultTask+0x318>)
 80026a6:	795b      	ldrb	r3, [r3, #5]
 80026a8:	4619      	mov	r1, r3
 80026aa:	2364      	movs	r3, #100	; 0x64
 80026ac:	fb01 f303 	mul.w	r3, r1, r3
 80026b0:	441a      	add	r2, r3
 80026b2:	4b83      	ldr	r3, [pc, #524]	; (80028c0 <StartDefaultTask+0x318>)
 80026b4:	799b      	ldrb	r3, [r3, #6]
 80026b6:	4619      	mov	r1, r3
 80026b8:	460b      	mov	r3, r1
 80026ba:	009b      	lsls	r3, r3, #2
 80026bc:	440b      	add	r3, r1
 80026be:	005b      	lsls	r3, r3, #1
 80026c0:	4413      	add	r3, r2
 80026c2:	4a7f      	ldr	r2, [pc, #508]	; (80028c0 <StartDefaultTask+0x318>)
 80026c4:	79d2      	ldrb	r2, [r2, #7]
 80026c6:	441a      	add	r2, r3
 80026c8:	4b80      	ldr	r3, [pc, #512]	; (80028cc <StartDefaultTask+0x324>)
 80026ca:	4413      	add	r3, r2
 80026cc:	ee07 3a90 	vmov	s15, r3
 80026d0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80026d4:	eddf 6a7e 	vldr	s13, [pc, #504]	; 80028d0 <StartDefaultTask+0x328>
 80026d8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80026dc:	4b7f      	ldr	r3, [pc, #508]	; (80028dc <StartDefaultTask+0x334>)
 80026de:	edc3 7a00 	vstr	s15, [r3]
			  new_D = 1;
 80026e2:	4b7f      	ldr	r3, [pc, #508]	; (80028e0 <StartDefaultTask+0x338>)
 80026e4:	2201      	movs	r2, #1
 80026e6:	701a      	strb	r2, [r3, #0]
		  }
	  }
	  if (xQueueReceive(telemetria_Queue, (void*)&telemetria_send, 0) == pdTRUE){
 80026e8:	4b7e      	ldr	r3, [pc, #504]	; (80028e4 <StartDefaultTask+0x33c>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f107 0180 	add.w	r1, r7, #128	; 0x80
 80026f0:	2200      	movs	r2, #0
 80026f2:	4618      	mov	r0, r3
 80026f4:	f00a fe48 	bl	800d388 <xQueueReceive>
 80026f8:	4603      	mov	r3, r0
 80026fa:	2b01      	cmp	r3, #1
 80026fc:	f040 80fa 	bne.w	80028f4 <StartDefaultTask+0x34c>

		  if(telemetria_data_sent == 1){
 8002700:	4b79      	ldr	r3, [pc, #484]	; (80028e8 <StartDefaultTask+0x340>)
 8002702:	781b      	ldrb	r3, [r3, #0]
 8002704:	2b01      	cmp	r3, #1
 8002706:	f040 80f5 	bne.w	80028f4 <StartDefaultTask+0x34c>
//			  sprintf((char*)telemetria_data, "%2.2f, %2.2f, %2.2f, %3.2f, %3.2f, %3.2f, %4.1f, %4.1f, %4.1f, %3.1f, %3.1f, %3.1f, %3.1f\r\n", telemetria_send[0], telemetria_send[1], telemetria_send[2], telemetria_send[3], telemetria_send[4], telemetria_send[5], telemetria_send[6], telemetria_send[7], telemetria_send[8], telemetria_send[9], telemetria_send[10], telemetria_send[11], telemetria_send[12]); //%5.2f
			  sprintf((char*)telemetria_data, "%2.2f, %2.2f, %2.2f, %3.2f, %3.2f, %3.2f, %4.1f, %4.1f, %4.1f, %3.1f, %3.1f, %3.1f, %3.1f, %3.1f, %3.1f, %3.1f, %3.1f, %3.1f, %3.1f\r\n", telemetria_send[0], telemetria_send[1], telemetria_send[2], telemetria_send[3], telemetria_send[4], telemetria_send[5], telemetria_send[6], telemetria_send[7], telemetria_send[8], telemetria_send[9], telemetria_send[10], telemetria_send[11], telemetria_send[12],telemetria_send[13], telemetria_send[14], telemetria_send[15], telemetria_send[16], telemetria_send[17], telemetria_send[18]); //%5.2f
 800270a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800270e:	4618      	mov	r0, r3
 8002710:	f7fd ff1a 	bl	8000548 <__aeabi_f2d>
 8002714:	e9c7 011c 	strd	r0, r1, [r7, #112]	; 0x70
 8002718:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800271c:	4618      	mov	r0, r3
 800271e:	f7fd ff13 	bl	8000548 <__aeabi_f2d>
 8002722:	e9c7 011a 	strd	r0, r1, [r7, #104]	; 0x68
 8002726:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800272a:	4618      	mov	r0, r3
 800272c:	f7fd ff0c 	bl	8000548 <__aeabi_f2d>
 8002730:	e9c7 0118 	strd	r0, r1, [r7, #96]	; 0x60
 8002734:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002738:	4618      	mov	r0, r3
 800273a:	f7fd ff05 	bl	8000548 <__aeabi_f2d>
 800273e:	e9c7 0116 	strd	r0, r1, [r7, #88]	; 0x58
 8002742:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002746:	4618      	mov	r0, r3
 8002748:	f7fd fefe 	bl	8000548 <__aeabi_f2d>
 800274c:	e9c7 0114 	strd	r0, r1, [r7, #80]	; 0x50
 8002750:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002754:	4618      	mov	r0, r3
 8002756:	f7fd fef7 	bl	8000548 <__aeabi_f2d>
 800275a:	e9c7 0112 	strd	r0, r1, [r7, #72]	; 0x48
 800275e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002762:	4618      	mov	r0, r3
 8002764:	f7fd fef0 	bl	8000548 <__aeabi_f2d>
 8002768:	e9c7 0110 	strd	r0, r1, [r7, #64]	; 0x40
 800276c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002770:	4618      	mov	r0, r3
 8002772:	f7fd fee9 	bl	8000548 <__aeabi_f2d>
 8002776:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
 800277a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800277e:	4618      	mov	r0, r3
 8002780:	f7fd fee2 	bl	8000548 <__aeabi_f2d>
 8002784:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
 8002788:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800278c:	4618      	mov	r0, r3
 800278e:	f7fd fedb 	bl	8000548 <__aeabi_f2d>
 8002792:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
 8002796:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800279a:	4618      	mov	r0, r3
 800279c:	f7fd fed4 	bl	8000548 <__aeabi_f2d>
 80027a0:	e9c7 0108 	strd	r0, r1, [r7, #32]
 80027a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80027a8:	4618      	mov	r0, r3
 80027aa:	f7fd fecd 	bl	8000548 <__aeabi_f2d>
 80027ae:	e9c7 0106 	strd	r0, r1, [r7, #24]
 80027b2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80027b6:	4618      	mov	r0, r3
 80027b8:	f7fd fec6 	bl	8000548 <__aeabi_f2d>
 80027bc:	e9c7 0104 	strd	r0, r1, [r7, #16]
 80027c0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80027c4:	4618      	mov	r0, r3
 80027c6:	f7fd febf 	bl	8000548 <__aeabi_f2d>
 80027ca:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80027ce:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80027d2:	4618      	mov	r0, r3
 80027d4:	f7fd feb8 	bl	8000548 <__aeabi_f2d>
 80027d8:	e9c7 0100 	strd	r0, r1, [r7]
 80027dc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80027e0:	4618      	mov	r0, r3
 80027e2:	f7fd feb1 	bl	8000548 <__aeabi_f2d>
 80027e6:	4682      	mov	sl, r0
 80027e8:	468b      	mov	fp, r1
 80027ea:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80027ee:	4618      	mov	r0, r3
 80027f0:	f7fd feaa 	bl	8000548 <__aeabi_f2d>
 80027f4:	4680      	mov	r8, r0
 80027f6:	4689      	mov	r9, r1
 80027f8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80027fc:	4618      	mov	r0, r3
 80027fe:	f7fd fea3 	bl	8000548 <__aeabi_f2d>
 8002802:	4604      	mov	r4, r0
 8002804:	460d      	mov	r5, r1
 8002806:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800280a:	4618      	mov	r0, r3
 800280c:	f7fd fe9c 	bl	8000548 <__aeabi_f2d>
 8002810:	4602      	mov	r2, r0
 8002812:	460b      	mov	r3, r1
 8002814:	f107 00cc 	add.w	r0, r7, #204	; 0xcc
 8002818:	e9cd 2322 	strd	r2, r3, [sp, #136]	; 0x88
 800281c:	e9cd 4520 	strd	r4, r5, [sp, #128]	; 0x80
 8002820:	e9cd 891e 	strd	r8, r9, [sp, #120]	; 0x78
 8002824:	e9cd ab1c 	strd	sl, fp, [sp, #112]	; 0x70
 8002828:	ed97 7b00 	vldr	d7, [r7]
 800282c:	ed8d 7b1a 	vstr	d7, [sp, #104]	; 0x68
 8002830:	ed97 7b02 	vldr	d7, [r7, #8]
 8002834:	ed8d 7b18 	vstr	d7, [sp, #96]	; 0x60
 8002838:	ed97 7b04 	vldr	d7, [r7, #16]
 800283c:	ed8d 7b16 	vstr	d7, [sp, #88]	; 0x58
 8002840:	ed97 7b06 	vldr	d7, [r7, #24]
 8002844:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 8002848:	ed97 7b08 	vldr	d7, [r7, #32]
 800284c:	ed8d 7b12 	vstr	d7, [sp, #72]	; 0x48
 8002850:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8002854:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8002858:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 800285c:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8002860:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8002864:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8002868:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 800286c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8002870:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 8002874:	ed8d 7b08 	vstr	d7, [sp, #32]
 8002878:	ed97 7b14 	vldr	d7, [r7, #80]	; 0x50
 800287c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8002880:	ed97 7b16 	vldr	d7, [r7, #88]	; 0x58
 8002884:	ed8d 7b04 	vstr	d7, [sp, #16]
 8002888:	ed97 7b18 	vldr	d7, [r7, #96]	; 0x60
 800288c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8002890:	ed97 7b1a 	vldr	d7, [r7, #104]	; 0x68
 8002894:	ed8d 7b00 	vstr	d7, [sp]
 8002898:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800289c:	4913      	ldr	r1, [pc, #76]	; (80028ec <StartDefaultTask+0x344>)
 800289e:	f00c ff67 	bl	800f770 <siprintf>
			  HAL_UART_Transmit_IT(&huart2, telemetria_data, sizeof (telemetria_data));
 80028a2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80028a6:	228c      	movs	r2, #140	; 0x8c
 80028a8:	4619      	mov	r1, r3
 80028aa:	4811      	ldr	r0, [pc, #68]	; (80028f0 <StartDefaultTask+0x348>)
 80028ac:	f007 fc13 	bl	800a0d6 <HAL_UART_Transmit_IT>
			  telemetria_data_sent = 0;
 80028b0:	4b0d      	ldr	r3, [pc, #52]	; (80028e8 <StartDefaultTask+0x340>)
 80028b2:	2200      	movs	r2, #0
 80028b4:	701a      	strb	r2, [r3, #0]
 80028b6:	e01d      	b.n	80028f4 <StartDefaultTask+0x34c>
 80028b8:	080142a0 	.word	0x080142a0
 80028bc:	20000b12 	.word	0x20000b12
 80028c0:	20000000 	.word	0x20000000
 80028c4:	000f4240 	.word	0x000f4240
 80028c8:	000186a0 	.word	0x000186a0
 80028cc:	fcd232b0 	.word	0xfcd232b0
 80028d0:	47c35000 	.word	0x47c35000
 80028d4:	20000b14 	.word	0x20000b14
 80028d8:	20000b1c 	.word	0x20000b1c
 80028dc:	20000b18 	.word	0x20000b18
 80028e0:	20000b1d 	.word	0x20000b1d
 80028e4:	20000bd0 	.word	0x20000bd0
 80028e8:	20000b13 	.word	0x20000b13
 80028ec:	08014218 	.word	0x08014218
 80028f0:	20000838 	.word	0x20000838
		  }
	  }


	  osDelay(25);
 80028f4:	2019      	movs	r0, #25
 80028f6:	f00a fabf 	bl	800ce78 <osDelay>
	  if(uart_telemetria == 1){
 80028fa:	e66a      	b.n	80025d2 <StartDefaultTask+0x2a>

080028fc <Start_Data_Reading>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_Data_Reading */
void Start_Data_Reading(void const * argument)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b083      	sub	sp, #12
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_Data_Reading */

  /* USER CODE END Start_Data_Reading */
}
 8002904:	bf00      	nop
 8002906:	370c      	adds	r7, #12
 8002908:	46bd      	mov	sp, r7
 800290a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290e:	4770      	bx	lr

08002910 <Start_Control>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_Control */
void Start_Control(void const * argument)
{
 8002910:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002912:	f5ad 7d01 	sub.w	sp, sp, #516	; 0x204
 8002916:	af06      	add	r7, sp, #24
 8002918:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 800291c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002920:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN Start_Control */
	extern QueueHandle_t telemetria_Queue;

	//magnetometer calibration
	FusionVector magneto_offset = {-11.31, -3.64, 0.43};//{-11.8, -5.68, 3.08};
 8002922:	4a6a      	ldr	r2, [pc, #424]	; (8002acc <Start_Control+0x1bc>)
 8002924:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002928:	ca07      	ldmia	r2, {r0, r1, r2}
 800292a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	FusionMatrix magneto_transform = {1.015, 0.018, -0.002, 0.018, 1.015, -0.004, -0.002, -0.004, 0.972};
 800292e:	4b68      	ldr	r3, [pc, #416]	; (8002ad0 <Start_Control+0x1c0>)
 8002930:	f107 04ec 	add.w	r4, r7, #236	; 0xec
 8002934:	461d      	mov	r5, r3
 8002936:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002938:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800293a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800293c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800293e:	682b      	ldr	r3, [r5, #0]
 8002940:	6023      	str	r3, [r4, #0]
	FusionVector magneto_data;

	//pitch angle velocity control params
	float err_pitch = 0;
 8002942:	f04f 0300 	mov.w	r3, #0
 8002946:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
	float errd_pitch = 0;
 800294a:	f04f 0300 	mov.w	r3, #0
 800294e:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
	float prev_err_pitch = 0;
 8002952:	f04f 0300 	mov.w	r3, #0
 8002956:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
	float control_pitch = 0;
 800295a:	f04f 0300 	mov.w	r3, #0
 800295e:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
	float P_pitch = 16;//20;
 8002962:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 8002966:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
	float D_pitch = 0.1;
 800296a:	4b5a      	ldr	r3, [pc, #360]	; (8002ad4 <Start_Control+0x1c4>)
 800296c:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8

	//pitch angle control params
	float err_angle_pitch = 0;
 8002970:	f04f 0300 	mov.w	r3, #0
 8002974:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
	float errd_angle_pitch = 0;
 8002978:	f04f 0300 	mov.w	r3, #0
 800297c:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
	float prev_err_angle_pitch = 0;
 8002980:	f04f 0300 	mov.w	r3, #0
 8002984:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
	float angle_control_pitch = 0;
 8002988:	f04f 0300 	mov.w	r3, #0
 800298c:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
	float P_angle_pitch = 0.04;//0.04;
 8002990:	4b51      	ldr	r3, [pc, #324]	; (8002ad8 <Start_Control+0x1c8>)
 8002992:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
	float D_angle_pitch = 0.0001;
 8002996:	4b51      	ldr	r3, [pc, #324]	; (8002adc <Start_Control+0x1cc>)
 8002998:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194

	//roll angle velocity control params
	float err_roll = 0;
 800299c:	f04f 0300 	mov.w	r3, #0
 80029a0:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
	float errd_roll = 0;
 80029a4:	f04f 0300 	mov.w	r3, #0
 80029a8:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
	float prev_err_roll = 0;
 80029ac:	f04f 0300 	mov.w	r3, #0
 80029b0:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
	float control_roll = 0;
 80029b4:	f04f 0300 	mov.w	r3, #0
 80029b8:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
	float P_roll = 4;//5;
 80029bc:	f04f 4381 	mov.w	r3, #1082130432	; 0x40800000
 80029c0:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
	float D_roll = 0.1;
 80029c4:	4b43      	ldr	r3, [pc, #268]	; (8002ad4 <Start_Control+0x1c4>)
 80029c6:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180

	//roll angle control params
	float P_angle_roll = 0.2;//0.2;
 80029ca:	4b45      	ldr	r3, [pc, #276]	; (8002ae0 <Start_Control+0x1d0>)
 80029cc:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
	float D_angle_roll = 0.0001;
 80029d0:	4b42      	ldr	r3, [pc, #264]	; (8002adc <Start_Control+0x1cc>)
 80029d2:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
	float err_angle_roll = 0;
 80029d6:	f04f 0300 	mov.w	r3, #0
 80029da:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
	float errd_angle_roll = 0;
 80029de:	f04f 0300 	mov.w	r3, #0
 80029e2:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
	float prev_err_angle_roll = 0;
 80029e6:	f04f 0300 	mov.w	r3, #0
 80029ea:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
	float angle_control_roll = 0;
 80029ee:	f04f 0300 	mov.w	r3, #0
 80029f2:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c

	//yaw angle velocity control params
	float err_yaw = 0;
 80029f6:	f04f 0300 	mov.w	r3, #0
 80029fa:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
	float errd_yaw = 0;
 80029fe:	f04f 0300 	mov.w	r3, #0
 8002a02:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
	float prev_err_yaw = 0;
 8002a06:	f04f 0300 	mov.w	r3, #0
 8002a0a:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
	float control_yaw = 0;
 8002a0e:	f04f 0300 	mov.w	r3, #0
 8002a12:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
	float P_yaw = 20;
 8002a16:	4b33      	ldr	r3, [pc, #204]	; (8002ae4 <Start_Control+0x1d4>)
 8002a18:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
	float D_yaw = 0.1;
 8002a1c:	4b2d      	ldr	r3, [pc, #180]	; (8002ad4 <Start_Control+0x1c4>)
 8002a1e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc

	//yaw angle control params
	float P_angle_yaw = 0.8;
 8002a22:	4b31      	ldr	r3, [pc, #196]	; (8002ae8 <Start_Control+0x1d8>)
 8002a24:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
	float D_angle_yaw = 0.000;
 8002a28:	f04f 0300 	mov.w	r3, #0
 8002a2c:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
	float err_angle_yaw = 0;
 8002a30:	f04f 0300 	mov.w	r3, #0
 8002a34:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
	float errd_angle_yaw = 0;
 8002a38:	f04f 0300 	mov.w	r3, #0
 8002a3c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
	float prev_err_angle_yaw = 0;
 8002a40:	f04f 0300 	mov.w	r3, #0
 8002a44:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
	float angle_control_yaw = 0;
 8002a48:	f04f 0300 	mov.w	r3, #0
 8002a4c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c

	float yaw_angle = 0;
 8002a50:	f04f 0300 	mov.w	r3, #0
 8002a54:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
	float prev_euler_yaw = 0;
 8002a58:	f04f 0300 	mov.w	r3, #0
 8002a5c:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
	int n = 0;
 8002a60:	2300      	movs	r3, #0
 8002a62:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0



	//imu init function
	BMI088_Init(&imu, &hspi2, CS_ACC_GPIO_Port, CS_ACC_Pin, CS_GYRO_GPIO_Port, CS_GYRO_Pin);
 8002a66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a6a:	9301      	str	r3, [sp, #4]
 8002a6c:	4b1f      	ldr	r3, [pc, #124]	; (8002aec <Start_Control+0x1dc>)
 8002a6e:	9300      	str	r3, [sp, #0]
 8002a70:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a74:	4a1e      	ldr	r2, [pc, #120]	; (8002af0 <Start_Control+0x1e0>)
 8002a76:	491f      	ldr	r1, [pc, #124]	; (8002af4 <Start_Control+0x1e4>)
 8002a78:	481f      	ldr	r0, [pc, #124]	; (8002af8 <Start_Control+0x1e8>)
 8002a7a:	f001 fce5 	bl	8004448 <BMI088_Init>


	//bmp388 pressure sensor init
	bmp._hi2c = &hi2c2;
 8002a7e:	4b1f      	ldr	r3, [pc, #124]	; (8002afc <Start_Control+0x1ec>)
 8002a80:	4a1f      	ldr	r2, [pc, #124]	; (8002b00 <Start_Control+0x1f0>)
 8002a82:	601a      	str	r2, [r3, #0]


	BMP388_SetTempOS(&bmp, 0);
 8002a84:	2100      	movs	r1, #0
 8002a86:	481d      	ldr	r0, [pc, #116]	; (8002afc <Start_Control+0x1ec>)
 8002a88:	f002 f84f 	bl	8004b2a <BMP388_SetTempOS>
	HAL_Delay(10);
 8002a8c:	200a      	movs	r0, #10
 8002a8e:	f002 fd51 	bl	8005534 <HAL_Delay>
	BMP388_SetPressOS(&bmp, 0x03); //0 volt, de adatlap alapján 8x-nek megfelelő 0x03 beírva
 8002a92:	2103      	movs	r1, #3
 8002a94:	4819      	ldr	r0, [pc, #100]	; (8002afc <Start_Control+0x1ec>)
 8002a96:	f002 f868 	bl	8004b6a <BMP388_SetPressOS>
	HAL_Delay(10);
 8002a9a:	200a      	movs	r0, #10
 8002a9c:	f002 fd4a 	bl	8005534 <HAL_Delay>
	BMP388_SetIIRFilterCoeff(&bmp, 2);
 8002aa0:	2102      	movs	r1, #2
 8002aa2:	4816      	ldr	r0, [pc, #88]	; (8002afc <Start_Control+0x1ec>)
 8002aa4:	f002 f880 	bl	8004ba8 <BMP388_SetIIRFilterCoeff>
	HAL_Delay(10);
 8002aa8:	200a      	movs	r0, #10
 8002aaa:	f002 fd43 	bl	8005534 <HAL_Delay>
	BMP388_SetOutputDataRate(&bmp, 0x02);
 8002aae:	2102      	movs	r1, #2
 8002ab0:	4812      	ldr	r0, [pc, #72]	; (8002afc <Start_Control+0x1ec>)
 8002ab2:	f002 f890 	bl	8004bd6 <BMP388_SetOutputDataRate>
	HAL_Delay(10);
 8002ab6:	200a      	movs	r0, #10
 8002ab8:	f002 fd3c 	bl	8005534 <HAL_Delay>
	BMP388_Init(&bmp);
 8002abc:	480f      	ldr	r0, [pc, #60]	; (8002afc <Start_Control+0x1ec>)
 8002abe:	f001 ffb9 	bl	8004a34 <BMP388_Init>

	for(int i_init = 0; i_init<2000; i_init++ ){
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002ac8:	e077      	b.n	8002bba <Start_Control+0x2aa>
 8002aca:	bf00      	nop
 8002acc:	0801432c 	.word	0x0801432c
 8002ad0:	08014338 	.word	0x08014338
 8002ad4:	3dcccccd 	.word	0x3dcccccd
 8002ad8:	3d23d70a 	.word	0x3d23d70a
 8002adc:	38d1b717 	.word	0x38d1b717
 8002ae0:	3e4ccccd 	.word	0x3e4ccccd
 8002ae4:	41a00000 	.word	0x41a00000
 8002ae8:	3f4ccccd 	.word	0x3f4ccccd
 8002aec:	40020400 	.word	0x40020400
 8002af0:	40020800 	.word	0x40020800
 8002af4:	20000634 	.word	0x20000634
 8002af8:	20000970 	.word	0x20000970
 8002afc:	200009c0 	.word	0x200009c0
 8002b00:	2000058c 	.word	0x2000058c
	  BMP388_ReadRawPressTempTime(&bmp, &raw_press, &raw_temp, &raw_time);
 8002b04:	4bb8      	ldr	r3, [pc, #736]	; (8002de8 <Start_Control+0x4d8>)
 8002b06:	4ab9      	ldr	r2, [pc, #740]	; (8002dec <Start_Control+0x4dc>)
 8002b08:	49b9      	ldr	r1, [pc, #740]	; (8002df0 <Start_Control+0x4e0>)
 8002b0a:	48ba      	ldr	r0, [pc, #744]	; (8002df4 <Start_Control+0x4e4>)
 8002b0c:	f002 f878 	bl	8004c00 <BMP388_ReadRawPressTempTime>
	  BMP388_CompensateRawPressTemp(&bmp, raw_press, raw_temp, &press, &temp);
 8002b10:	4bb7      	ldr	r3, [pc, #732]	; (8002df0 <Start_Control+0x4e0>)
 8002b12:	6819      	ldr	r1, [r3, #0]
 8002b14:	4bb5      	ldr	r3, [pc, #724]	; (8002dec <Start_Control+0x4dc>)
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	4bb7      	ldr	r3, [pc, #732]	; (8002df8 <Start_Control+0x4e8>)
 8002b1a:	9300      	str	r3, [sp, #0]
 8002b1c:	4bb7      	ldr	r3, [pc, #732]	; (8002dfc <Start_Control+0x4ec>)
 8002b1e:	48b5      	ldr	r0, [pc, #724]	; (8002df4 <Start_Control+0x4e4>)
 8002b20:	f002 f89a 	bl	8004c58 <BMP388_CompensateRawPressTemp>
	  h0 += BMP388_FindAltitude(ground_pressure, press);
 8002b24:	4bb5      	ldr	r3, [pc, #724]	; (8002dfc <Start_Control+0x4ec>)
 8002b26:	edd3 7a00 	vldr	s15, [r3]
 8002b2a:	eef0 0a67 	vmov.f32	s1, s15
 8002b2e:	ed9f 0ab4 	vldr	s0, [pc, #720]	; 8002e00 <Start_Control+0x4f0>
 8002b32:	f002 f8b5 	bl	8004ca0 <BMP388_FindAltitude>
 8002b36:	eeb0 7a40 	vmov.f32	s14, s0
 8002b3a:	4bb2      	ldr	r3, [pc, #712]	; (8002e04 <Start_Control+0x4f4>)
 8002b3c:	edd3 7a00 	vldr	s15, [r3]
 8002b40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b44:	4baf      	ldr	r3, [pc, #700]	; (8002e04 <Start_Control+0x4f4>)
 8002b46:	edc3 7a00 	vstr	s15, [r3]
	  BMI088_ReadGyroscope(&imu);
 8002b4a:	48af      	ldr	r0, [pc, #700]	; (8002e08 <Start_Control+0x4f8>)
 8002b4c:	f001 fefa 	bl	8004944 <BMI088_ReadGyroscope>
	  gyro_offset_x_calc += imu.gyr_rps[0];
 8002b50:	4bad      	ldr	r3, [pc, #692]	; (8002e08 <Start_Control+0x4f8>)
 8002b52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b54:	4618      	mov	r0, r3
 8002b56:	f7fd fcf7 	bl	8000548 <__aeabi_f2d>
 8002b5a:	4bac      	ldr	r3, [pc, #688]	; (8002e0c <Start_Control+0x4fc>)
 8002b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b60:	f7fd fb94 	bl	800028c <__adddf3>
 8002b64:	4602      	mov	r2, r0
 8002b66:	460b      	mov	r3, r1
 8002b68:	49a8      	ldr	r1, [pc, #672]	; (8002e0c <Start_Control+0x4fc>)
 8002b6a:	e9c1 2300 	strd	r2, r3, [r1]
	  gyro_offset_y_calc += imu.gyr_rps[1];
 8002b6e:	4ba6      	ldr	r3, [pc, #664]	; (8002e08 <Start_Control+0x4f8>)
 8002b70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b72:	4618      	mov	r0, r3
 8002b74:	f7fd fce8 	bl	8000548 <__aeabi_f2d>
 8002b78:	4ba5      	ldr	r3, [pc, #660]	; (8002e10 <Start_Control+0x500>)
 8002b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b7e:	f7fd fb85 	bl	800028c <__adddf3>
 8002b82:	4602      	mov	r2, r0
 8002b84:	460b      	mov	r3, r1
 8002b86:	49a2      	ldr	r1, [pc, #648]	; (8002e10 <Start_Control+0x500>)
 8002b88:	e9c1 2300 	strd	r2, r3, [r1]
	  gyro_offset_z_calc += imu.gyr_rps[2];
 8002b8c:	4b9e      	ldr	r3, [pc, #632]	; (8002e08 <Start_Control+0x4f8>)
 8002b8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b90:	4618      	mov	r0, r3
 8002b92:	f7fd fcd9 	bl	8000548 <__aeabi_f2d>
 8002b96:	4b9f      	ldr	r3, [pc, #636]	; (8002e14 <Start_Control+0x504>)
 8002b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b9c:	f7fd fb76 	bl	800028c <__adddf3>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	460b      	mov	r3, r1
 8002ba4:	499b      	ldr	r1, [pc, #620]	; (8002e14 <Start_Control+0x504>)
 8002ba6:	e9c1 2300 	strd	r2, r3, [r1]
	  HAL_Delay(1);
 8002baa:	2001      	movs	r0, #1
 8002bac:	f002 fcc2 	bl	8005534 <HAL_Delay>
	for(int i_init = 0; i_init<2000; i_init++ ){
 8002bb0:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8002bb4:	3301      	adds	r3, #1
 8002bb6:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002bba:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8002bbe:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002bc2:	db9f      	blt.n	8002b04 <Start_Control+0x1f4>
	}
	h0 /= 2000;
 8002bc4:	4b8f      	ldr	r3, [pc, #572]	; (8002e04 <Start_Control+0x4f4>)
 8002bc6:	ed93 7a00 	vldr	s14, [r3]
 8002bca:	eddf 6a93 	vldr	s13, [pc, #588]	; 8002e18 <Start_Control+0x508>
 8002bce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002bd2:	4b8c      	ldr	r3, [pc, #560]	; (8002e04 <Start_Control+0x4f4>)
 8002bd4:	edc3 7a00 	vstr	s15, [r3]
	gyro_offset_x = gyro_offset_x_calc/2000;
 8002bd8:	4b8c      	ldr	r3, [pc, #560]	; (8002e0c <Start_Control+0x4fc>)
 8002bda:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002bde:	f04f 0200 	mov.w	r2, #0
 8002be2:	4b8e      	ldr	r3, [pc, #568]	; (8002e1c <Start_Control+0x50c>)
 8002be4:	f7fd fe32 	bl	800084c <__aeabi_ddiv>
 8002be8:	4602      	mov	r2, r0
 8002bea:	460b      	mov	r3, r1
 8002bec:	498c      	ldr	r1, [pc, #560]	; (8002e20 <Start_Control+0x510>)
 8002bee:	e9c1 2300 	strd	r2, r3, [r1]
	gyro_offset_y = gyro_offset_y_calc/2000;
 8002bf2:	4b87      	ldr	r3, [pc, #540]	; (8002e10 <Start_Control+0x500>)
 8002bf4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002bf8:	f04f 0200 	mov.w	r2, #0
 8002bfc:	4b87      	ldr	r3, [pc, #540]	; (8002e1c <Start_Control+0x50c>)
 8002bfe:	f7fd fe25 	bl	800084c <__aeabi_ddiv>
 8002c02:	4602      	mov	r2, r0
 8002c04:	460b      	mov	r3, r1
 8002c06:	4987      	ldr	r1, [pc, #540]	; (8002e24 <Start_Control+0x514>)
 8002c08:	e9c1 2300 	strd	r2, r3, [r1]
	gyro_offset_z = gyro_offset_z_calc/2000;
 8002c0c:	4b81      	ldr	r3, [pc, #516]	; (8002e14 <Start_Control+0x504>)
 8002c0e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002c12:	f04f 0200 	mov.w	r2, #0
 8002c16:	4b81      	ldr	r3, [pc, #516]	; (8002e1c <Start_Control+0x50c>)
 8002c18:	f7fd fe18 	bl	800084c <__aeabi_ddiv>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	460b      	mov	r3, r1
 8002c20:	4981      	ldr	r1, [pc, #516]	; (8002e28 <Start_Control+0x518>)
 8002c22:	e9c1 2300 	strd	r2, r3, [r1]


	uint8_t transmit_data[60] = "Hello Andris\r\n";
 8002c26:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8002c2a:	f5a3 75a2 	sub.w	r5, r3, #324	; 0x144
 8002c2e:	4b7f      	ldr	r3, [pc, #508]	; (8002e2c <Start_Control+0x51c>)
 8002c30:	462c      	mov	r4, r5
 8002c32:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002c34:	c407      	stmia	r4!, {r0, r1, r2}
 8002c36:	8023      	strh	r3, [r4, #0]
 8002c38:	3402      	adds	r4, #2
 8002c3a:	0c1b      	lsrs	r3, r3, #16
 8002c3c:	7023      	strb	r3, [r4, #0]
 8002c3e:	f105 030f 	add.w	r3, r5, #15
 8002c42:	222d      	movs	r2, #45	; 0x2d
 8002c44:	2100      	movs	r1, #0
 8002c46:	4618      	mov	r0, r3
 8002c48:	f00c f920 	bl	800ee8c <memset>
	float telemetria_float[19];



	q.SEq_1=1;
 8002c4c:	4b78      	ldr	r3, [pc, #480]	; (8002e30 <Start_Control+0x520>)
 8002c4e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002c52:	601a      	str	r2, [r3, #0]
	q.SEq_2=0;
 8002c54:	4b76      	ldr	r3, [pc, #472]	; (8002e30 <Start_Control+0x520>)
 8002c56:	f04f 0200 	mov.w	r2, #0
 8002c5a:	605a      	str	r2, [r3, #4]
	q.SEq_3=0;
 8002c5c:	4b74      	ldr	r3, [pc, #464]	; (8002e30 <Start_Control+0x520>)
 8002c5e:	f04f 0200 	mov.w	r2, #0
 8002c62:	609a      	str	r2, [r3, #8]
	q.SEq_4=0;
 8002c64:	4b72      	ldr	r3, [pc, #456]	; (8002e30 <Start_Control+0x520>)
 8002c66:	f04f 0200 	mov.w	r2, #0
 8002c6a:	60da      	str	r2, [r3, #12]

	w.w_bx=0;
 8002c6c:	4b71      	ldr	r3, [pc, #452]	; (8002e34 <Start_Control+0x524>)
 8002c6e:	f04f 0200 	mov.w	r2, #0
 8002c72:	601a      	str	r2, [r3, #0]
	w.w_by=0;
 8002c74:	4b6f      	ldr	r3, [pc, #444]	; (8002e34 <Start_Control+0x524>)
 8002c76:	f04f 0200 	mov.w	r2, #0
 8002c7a:	605a      	str	r2, [r3, #4]
	w.w_bz=0;
 8002c7c:	4b6d      	ldr	r3, [pc, #436]	; (8002e34 <Start_Control+0x524>)
 8002c7e:	f04f 0200 	mov.w	r2, #0
 8002c82:	609a      	str	r2, [r3, #8]



	HAL_TIM_Base_Start_IT(&htim6);
 8002c84:	486c      	ldr	r0, [pc, #432]	; (8002e38 <Start_Control+0x528>)
 8002c86:	f005 febf 	bl	8008a08 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim7);
 8002c8a:	486c      	ldr	r0, [pc, #432]	; (8002e3c <Start_Control+0x52c>)
 8002c8c:	f005 febc 	bl	8008a08 <HAL_TIM_Base_Start_IT>
	FusionAhrsInitialise(&ahrs);
 8002c90:	486b      	ldr	r0, [pc, #428]	; (8002e40 <Start_Control+0x530>)
 8002c92:	f009 f815 	bl	800bcc0 <FusionAhrsInitialise>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8002c96:	2200      	movs	r2, #0
 8002c98:	2108      	movs	r1, #8
 8002c9a:	486a      	ldr	r0, [pc, #424]	; (8002e44 <Start_Control+0x534>)
 8002c9c:	f003 fd80 	bl	80067a0 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8002ca0:	2064      	movs	r0, #100	; 0x64
 8002ca2:	f002 fc47 	bl	8005534 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	2108      	movs	r1, #8
 8002caa:	4866      	ldr	r0, [pc, #408]	; (8002e44 <Start_Control+0x534>)
 8002cac:	f003 fd78 	bl	80067a0 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8002cb0:	2064      	movs	r0, #100	; 0x64
 8002cb2:	f002 fc3f 	bl	8005534 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	2108      	movs	r1, #8
 8002cba:	4862      	ldr	r0, [pc, #392]	; (8002e44 <Start_Control+0x534>)
 8002cbc:	f003 fd70 	bl	80067a0 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8002cc0:	2064      	movs	r0, #100	; 0x64
 8002cc2:	f002 fc37 	bl	8005534 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	2108      	movs	r1, #8
 8002cca:	485e      	ldr	r0, [pc, #376]	; (8002e44 <Start_Control+0x534>)
 8002ccc:	f003 fd68 	bl	80067a0 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8002cd0:	2064      	movs	r0, #100	; 0x64
 8002cd2:	f002 fc2f 	bl	8005534 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	2108      	movs	r1, #8
 8002cda:	485a      	ldr	r0, [pc, #360]	; (8002e44 <Start_Control+0x534>)
 8002cdc:	f003 fd60 	bl	80067a0 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8002ce0:	2064      	movs	r0, #100	; 0x64
 8002ce2:	f002 fc27 	bl	8005534 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	2108      	movs	r1, #8
 8002cea:	4856      	ldr	r0, [pc, #344]	; (8002e44 <Start_Control+0x534>)
 8002cec:	f003 fd58 	bl	80067a0 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8002cf0:	2064      	movs	r0, #100	; 0x64
 8002cf2:	f002 fc1f 	bl	8005534 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	2108      	movs	r1, #8
 8002cfa:	4852      	ldr	r0, [pc, #328]	; (8002e44 <Start_Control+0x534>)
 8002cfc:	f003 fd50 	bl	80067a0 <HAL_GPIO_WritePin>

	HAL_UART_Receive_DMA(&huart1, UART1_rxBuffer, bytetoread);
 8002d00:	4b51      	ldr	r3, [pc, #324]	; (8002e48 <Start_Control+0x538>)
 8002d02:	781b      	ldrb	r3, [r3, #0]
 8002d04:	b29b      	uxth	r3, r3
 8002d06:	461a      	mov	r2, r3
 8002d08:	4950      	ldr	r1, [pc, #320]	; (8002e4c <Start_Control+0x53c>)
 8002d0a:	4851      	ldr	r0, [pc, #324]	; (8002e50 <Start_Control+0x540>)
 8002d0c:	f007 fa28 	bl	800a160 <HAL_UART_Receive_DMA>
	HAL_UART_Transmit_IT(&huart2, transmit_data, sizeof (transmit_data));
 8002d10:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002d14:	223c      	movs	r2, #60	; 0x3c
 8002d16:	4619      	mov	r1, r3
 8002d18:	484e      	ldr	r0, [pc, #312]	; (8002e54 <Start_Control+0x544>)
 8002d1a:	f007 f9dc 	bl	800a0d6 <HAL_UART_Transmit_IT>



	vTaskResume( defaultTaskHandle );
 8002d1e:	4b4e      	ldr	r3, [pc, #312]	; (8002e58 <Start_Control+0x548>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4618      	mov	r0, r3
 8002d24:	f00a ff1a 	bl	800db5c <vTaskResume>

  /* Infinite loop */
  for(;;)
  {

		  mytimer = __HAL_TIM_GET_COUNTER(&htim7);
 8002d28:	4b44      	ldr	r3, [pc, #272]	; (8002e3c <Start_Control+0x52c>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d2e:	461a      	mov	r2, r3
 8002d30:	4b4a      	ldr	r3, [pc, #296]	; (8002e5c <Start_Control+0x54c>)
 8002d32:	601a      	str	r2, [r3, #0]
		  htim7.Instance->CNT = 0;
 8002d34:	4b41      	ldr	r3, [pc, #260]	; (8002e3c <Start_Control+0x52c>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	625a      	str	r2, [r3, #36]	; 0x24


		  // magnetic field data in uT
		  magneto_data.axis.x = mag_data_y;
 8002d3c:	4b48      	ldr	r3, [pc, #288]	; (8002e60 <Start_Control+0x550>)
 8002d3e:	681a      	ldr	r2, [r3, #0]
 8002d40:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8002d44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002d48:	601a      	str	r2, [r3, #0]
		  magneto_data.axis.y = -mag_data_x;
 8002d4a:	4b46      	ldr	r3, [pc, #280]	; (8002e64 <Start_Control+0x554>)
 8002d4c:	edd3 7a00 	vldr	s15, [r3]
 8002d50:	eef1 7a67 	vneg.f32	s15, s15
 8002d54:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8002d58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002d5c:	edc3 7a01 	vstr	s15, [r3, #4]
		  magneto_data.axis.z = mag_data_z;
 8002d60:	4b41      	ldr	r3, [pc, #260]	; (8002e68 <Start_Control+0x558>)
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8002d68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002d6c:	609a      	str	r2, [r3, #8]


		  //read IMU
		  BMI088_ReadGyroscope(&imu);	// imu read 119 us
 8002d6e:	4826      	ldr	r0, [pc, #152]	; (8002e08 <Start_Control+0x4f8>)
 8002d70:	f001 fde8 	bl	8004944 <BMI088_ReadGyroscope>
		  BMI088_ReadAccelerometer(&imu);
 8002d74:	4824      	ldr	r0, [pc, #144]	; (8002e08 <Start_Control+0x4f8>)
 8002d76:	f001 fd71 	bl	800485c <BMI088_ReadAccelerometer>




		  gyro_x_degree = ((imu.gyr_rps[0]-gyro_offset_x)*57.29);
 8002d7a:	4b23      	ldr	r3, [pc, #140]	; (8002e08 <Start_Control+0x4f8>)
 8002d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f7fd fbe2 	bl	8000548 <__aeabi_f2d>
 8002d84:	4b26      	ldr	r3, [pc, #152]	; (8002e20 <Start_Control+0x510>)
 8002d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d8a:	f7fd fa7d 	bl	8000288 <__aeabi_dsub>
 8002d8e:	4602      	mov	r2, r0
 8002d90:	460b      	mov	r3, r1
 8002d92:	4610      	mov	r0, r2
 8002d94:	4619      	mov	r1, r3
 8002d96:	a312      	add	r3, pc, #72	; (adr r3, 8002de0 <Start_Control+0x4d0>)
 8002d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d9c:	f7fd fc2c 	bl	80005f8 <__aeabi_dmul>
 8002da0:	4602      	mov	r2, r0
 8002da2:	460b      	mov	r3, r1
 8002da4:	4610      	mov	r0, r2
 8002da6:	4619      	mov	r1, r3
 8002da8:	f7fd ff1e 	bl	8000be8 <__aeabi_d2f>
 8002dac:	4603      	mov	r3, r0
 8002dae:	4a2f      	ldr	r2, [pc, #188]	; (8002e6c <Start_Control+0x55c>)
 8002db0:	6013      	str	r3, [r2, #0]
		  gyro_y_degree = ((imu.gyr_rps[1]-gyro_offset_x)*57.29);
 8002db2:	4b15      	ldr	r3, [pc, #84]	; (8002e08 <Start_Control+0x4f8>)
 8002db4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002db6:	4618      	mov	r0, r3
 8002db8:	f7fd fbc6 	bl	8000548 <__aeabi_f2d>
 8002dbc:	4b18      	ldr	r3, [pc, #96]	; (8002e20 <Start_Control+0x510>)
 8002dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dc2:	f7fd fa61 	bl	8000288 <__aeabi_dsub>
 8002dc6:	4602      	mov	r2, r0
 8002dc8:	460b      	mov	r3, r1
 8002dca:	4610      	mov	r0, r2
 8002dcc:	4619      	mov	r1, r3
 8002dce:	a304      	add	r3, pc, #16	; (adr r3, 8002de0 <Start_Control+0x4d0>)
 8002dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dd4:	f7fd fc10 	bl	80005f8 <__aeabi_dmul>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	460b      	mov	r3, r1
 8002ddc:	e048      	b.n	8002e70 <Start_Control+0x560>
 8002dde:	bf00      	nop
 8002de0:	b851eb85 	.word	0xb851eb85
 8002de4:	404ca51e 	.word	0x404ca51e
 8002de8:	20000a18 	.word	0x20000a18
 8002dec:	20000a14 	.word	0x20000a14
 8002df0:	20000a10 	.word	0x20000a10
 8002df4:	200009c0 	.word	0x200009c0
 8002df8:	20000a20 	.word	0x20000a20
 8002dfc:	20000a1c 	.word	0x20000a1c
 8002e00:	47c5f400 	.word	0x47c5f400
 8002e04:	20000a24 	.word	0x20000a24
 8002e08:	20000970 	.word	0x20000970
 8002e0c:	20000b30 	.word	0x20000b30
 8002e10:	20000b38 	.word	0x20000b38
 8002e14:	20000b40 	.word	0x20000b40
 8002e18:	44fa0000 	.word	0x44fa0000
 8002e1c:	409f4000 	.word	0x409f4000
 8002e20:	20000b48 	.word	0x20000b48
 8002e24:	20000b50 	.word	0x20000b50
 8002e28:	20000b58 	.word	0x20000b58
 8002e2c:	0801435c 	.word	0x0801435c
 8002e30:	20000a34 	.word	0x20000a34
 8002e34:	20000a44 	.word	0x20000a44
 8002e38:	20000764 	.word	0x20000764
 8002e3c:	200007ac 	.word	0x200007ac
 8002e40:	20000a54 	.word	0x20000a54
 8002e44:	40020400 	.word	0x40020400
 8002e48:	2000000a 	.word	0x2000000a
 8002e4c:	20000bac 	.word	0x20000bac
 8002e50:	200007f4 	.word	0x200007f4
 8002e54:	20000838 	.word	0x20000838
 8002e58:	20000964 	.word	0x20000964
 8002e5c:	20000b28 	.word	0x20000b28
 8002e60:	20000a04 	.word	0x20000a04
 8002e64:	20000a00 	.word	0x20000a00
 8002e68:	20000a08 	.word	0x20000a08
 8002e6c:	20000a28 	.word	0x20000a28
 8002e70:	4610      	mov	r0, r2
 8002e72:	4619      	mov	r1, r3
 8002e74:	f7fd feb8 	bl	8000be8 <__aeabi_d2f>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	4adb      	ldr	r2, [pc, #876]	; (80031e8 <Start_Control+0x8d8>)
 8002e7c:	6013      	str	r3, [r2, #0]
		  gyro_z_degree = ((imu.gyr_rps[2]-gyro_offset_x)*57.29);
 8002e7e:	4bdb      	ldr	r3, [pc, #876]	; (80031ec <Start_Control+0x8dc>)
 8002e80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e82:	4618      	mov	r0, r3
 8002e84:	f7fd fb60 	bl	8000548 <__aeabi_f2d>
 8002e88:	4bd9      	ldr	r3, [pc, #868]	; (80031f0 <Start_Control+0x8e0>)
 8002e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e8e:	f7fd f9fb 	bl	8000288 <__aeabi_dsub>
 8002e92:	4602      	mov	r2, r0
 8002e94:	460b      	mov	r3, r1
 8002e96:	4610      	mov	r0, r2
 8002e98:	4619      	mov	r1, r3
 8002e9a:	a3cd      	add	r3, pc, #820	; (adr r3, 80031d0 <Start_Control+0x8c0>)
 8002e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ea0:	f7fd fbaa 	bl	80005f8 <__aeabi_dmul>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	460b      	mov	r3, r1
 8002ea8:	4610      	mov	r0, r2
 8002eaa:	4619      	mov	r1, r3
 8002eac:	f7fd fe9c 	bl	8000be8 <__aeabi_d2f>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	4ad0      	ldr	r2, [pc, #832]	; (80031f4 <Start_Control+0x8e4>)
 8002eb4:	6013      	str	r3, [r2, #0]


		  magneto_data = FusionVectorSubtract(magneto_data, magneto_offset);
 8002eb6:	ed97 5a44 	vldr	s10, [r7, #272]	; 0x110
 8002eba:	edd7 5a45 	vldr	s11, [r7, #276]	; 0x114
 8002ebe:	ed97 6a46 	vldr	s12, [r7, #280]	; 0x118
 8002ec2:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8002ec6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002eca:	edd3 6a00 	vldr	s13, [r3]
 8002ece:	ed93 7a01 	vldr	s14, [r3, #4]
 8002ed2:	edd3 7a02 	vldr	s15, [r3, #8]
 8002ed6:	eef0 1a45 	vmov.f32	s3, s10
 8002eda:	eeb0 2a65 	vmov.f32	s4, s11
 8002ede:	eef0 2a46 	vmov.f32	s5, s12
 8002ee2:	eeb0 0a66 	vmov.f32	s0, s13
 8002ee6:	eef0 0a47 	vmov.f32	s1, s14
 8002eea:	eeb0 1a67 	vmov.f32	s2, s15
 8002eee:	f7fe f8a7 	bl	8001040 <FusionVectorSubtract>
 8002ef2:	eef0 6a40 	vmov.f32	s13, s0
 8002ef6:	eeb0 7a60 	vmov.f32	s14, s1
 8002efa:	eef0 7a41 	vmov.f32	s15, s2
 8002efe:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8002f02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002f06:	edc3 6a00 	vstr	s13, [r3]
 8002f0a:	ed83 7a01 	vstr	s14, [r3, #4]
 8002f0e:	edc3 7a02 	vstr	s15, [r3, #8]

		  const FusionVector gyroscope = {gyro_x_degree, gyro_y_degree, gyro_z_degree};
 8002f12:	4bb9      	ldr	r3, [pc, #740]	; (80031f8 <Start_Control+0x8e8>)
 8002f14:	681a      	ldr	r2, [r3, #0]
 8002f16:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8002f1a:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002f1e:	601a      	str	r2, [r3, #0]
 8002f20:	4bb1      	ldr	r3, [pc, #708]	; (80031e8 <Start_Control+0x8d8>)
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8002f28:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002f2c:	605a      	str	r2, [r3, #4]
 8002f2e:	4bb1      	ldr	r3, [pc, #708]	; (80031f4 <Start_Control+0x8e4>)
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8002f36:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002f3a:	609a      	str	r2, [r3, #8]
		  const FusionVector accelerometer = {imu.acc_mps2[0]/9.81, imu.acc_mps2[1]/9.81, imu.acc_mps2[2]/9.81};
 8002f3c:	4bab      	ldr	r3, [pc, #684]	; (80031ec <Start_Control+0x8dc>)
 8002f3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f40:	4618      	mov	r0, r3
 8002f42:	f7fd fb01 	bl	8000548 <__aeabi_f2d>
 8002f46:	a3a4      	add	r3, pc, #656	; (adr r3, 80031d8 <Start_Control+0x8c8>)
 8002f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f4c:	f7fd fc7e 	bl	800084c <__aeabi_ddiv>
 8002f50:	4602      	mov	r2, r0
 8002f52:	460b      	mov	r3, r1
 8002f54:	4610      	mov	r0, r2
 8002f56:	4619      	mov	r1, r3
 8002f58:	f7fd fe46 	bl	8000be8 <__aeabi_d2f>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8002f62:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002f66:	601a      	str	r2, [r3, #0]
 8002f68:	4ba0      	ldr	r3, [pc, #640]	; (80031ec <Start_Control+0x8dc>)
 8002f6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f7fd faeb 	bl	8000548 <__aeabi_f2d>
 8002f72:	a399      	add	r3, pc, #612	; (adr r3, 80031d8 <Start_Control+0x8c8>)
 8002f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f78:	f7fd fc68 	bl	800084c <__aeabi_ddiv>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	460b      	mov	r3, r1
 8002f80:	4610      	mov	r0, r2
 8002f82:	4619      	mov	r1, r3
 8002f84:	f7fd fe30 	bl	8000be8 <__aeabi_d2f>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8002f8e:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002f92:	605a      	str	r2, [r3, #4]
 8002f94:	4b95      	ldr	r3, [pc, #596]	; (80031ec <Start_Control+0x8dc>)
 8002f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f7fd fad5 	bl	8000548 <__aeabi_f2d>
 8002f9e:	a38e      	add	r3, pc, #568	; (adr r3, 80031d8 <Start_Control+0x8c8>)
 8002fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fa4:	f7fd fc52 	bl	800084c <__aeabi_ddiv>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	460b      	mov	r3, r1
 8002fac:	4610      	mov	r0, r2
 8002fae:	4619      	mov	r1, r3
 8002fb0:	f7fd fe1a 	bl	8000be8 <__aeabi_d2f>
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8002fba:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002fbe:	609a      	str	r2, [r3, #8]
		  const FusionVector magnetometer = {magneto_data.axis.x, magneto_data.axis.y, magneto_data.axis.z};
 8002fc0:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8002fc4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8002fce:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002fd2:	601a      	str	r2, [r3, #0]
 8002fd4:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8002fd8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002fdc:	685a      	ldr	r2, [r3, #4]
 8002fde:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8002fe2:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002fe6:	605a      	str	r2, [r3, #4]
 8002fe8:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8002fec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002ff0:	689a      	ldr	r2, [r3, #8]
 8002ff2:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8002ff6:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002ffa:	609a      	str	r2, [r3, #8]


		  //no magnetometer AHRS
		  FusionAhrsUpdateNoMagnetometer(&ahrs, gyroscope, accelerometer, SAMPLE_PERIOD);
 8002ffc:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8003000:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003004:	ed93 5a00 	vldr	s10, [r3]
 8003008:	edd3 5a01 	vldr	s11, [r3, #4]
 800300c:	ed93 6a02 	vldr	s12, [r3, #8]
 8003010:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8003014:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003018:	edd3 6a00 	vldr	s13, [r3]
 800301c:	ed93 7a01 	vldr	s14, [r3, #4]
 8003020:	edd3 7a02 	vldr	s15, [r3, #8]
 8003024:	ed9f 3a75 	vldr	s6, [pc, #468]	; 80031fc <Start_Control+0x8ec>
 8003028:	eef0 1a45 	vmov.f32	s3, s10
 800302c:	eeb0 2a65 	vmov.f32	s4, s11
 8003030:	eef0 2a46 	vmov.f32	s5, s12
 8003034:	eeb0 0a66 	vmov.f32	s0, s13
 8003038:	eef0 0a47 	vmov.f32	s1, s14
 800303c:	eeb0 1a67 	vmov.f32	s2, s15
 8003040:	486f      	ldr	r0, [pc, #444]	; (8003200 <Start_Control+0x8f0>)
 8003042:	f009 fd9b 	bl	800cb7c <FusionAhrsUpdateNoMagnetometer>

		  //magnetometer AHRS
//		  FusionAhrsUpdate(&ahrs, gyroscope, accelerometer, magnetometer, SAMPLE_PERIOD);

		  euler = FusionQuaternionToEuler(FusionAhrsGetQuaternion(&ahrs));
 8003046:	486e      	ldr	r0, [pc, #440]	; (8003200 <Start_Control+0x8f0>)
 8003048:	f009 fdf2 	bl	800cc30 <FusionAhrsGetQuaternion>
 800304c:	eeb0 6a40 	vmov.f32	s12, s0
 8003050:	eef0 6a60 	vmov.f32	s13, s1
 8003054:	eeb0 7a41 	vmov.f32	s14, s2
 8003058:	eef0 7a61 	vmov.f32	s15, s3
 800305c:	ed87 6a47 	vstr	s12, [r7, #284]	; 0x11c
 8003060:	edc7 6a48 	vstr	s13, [r7, #288]	; 0x120
 8003064:	ed87 7a49 	vstr	s14, [r7, #292]	; 0x124
 8003068:	edc7 7a4a 	vstr	s15, [r7, #296]	; 0x128
 800306c:	ed97 6a47 	vldr	s12, [r7, #284]	; 0x11c
 8003070:	edd7 6a48 	vldr	s13, [r7, #288]	; 0x120
 8003074:	ed97 7a49 	vldr	s14, [r7, #292]	; 0x124
 8003078:	edd7 7a4a 	vldr	s15, [r7, #296]	; 0x128
 800307c:	eeb0 0a46 	vmov.f32	s0, s12
 8003080:	eef0 0a66 	vmov.f32	s1, s13
 8003084:	eeb0 1a47 	vmov.f32	s2, s14
 8003088:	eef0 1a67 	vmov.f32	s3, s15
 800308c:	f7fe f9af 	bl	80013ee <FusionQuaternionToEuler>
 8003090:	eef0 6a40 	vmov.f32	s13, s0
 8003094:	eeb0 7a60 	vmov.f32	s14, s1
 8003098:	eef0 7a41 	vmov.f32	s15, s2
 800309c:	4b59      	ldr	r3, [pc, #356]	; (8003204 <Start_Control+0x8f4>)
 800309e:	edc3 6a00 	vstr	s13, [r3]
 80030a2:	ed83 7a01 	vstr	s14, [r3, #4]
 80030a6:	edc3 7a02 	vstr	s15, [r3, #8]
		  // Rotation matrix from sensor frame to earth(NWU) frame
		  ERS = FusionQuaternionToMatrix(FusionAhrsGetQuaternion(&ahrs));
 80030aa:	4855      	ldr	r0, [pc, #340]	; (8003200 <Start_Control+0x8f0>)
 80030ac:	f009 fdc0 	bl	800cc30 <FusionAhrsGetQuaternion>
 80030b0:	eeb0 6a40 	vmov.f32	s12, s0
 80030b4:	eef0 6a60 	vmov.f32	s13, s1
 80030b8:	eeb0 7a41 	vmov.f32	s14, s2
 80030bc:	eef0 7a61 	vmov.f32	s15, s3
 80030c0:	ed87 6a4b 	vstr	s12, [r7, #300]	; 0x12c
 80030c4:	edc7 6a4c 	vstr	s13, [r7, #304]	; 0x130
 80030c8:	ed87 7a4d 	vstr	s14, [r7, #308]	; 0x134
 80030cc:	edc7 7a4e 	vstr	s15, [r7, #312]	; 0x138
 80030d0:	4c4d      	ldr	r4, [pc, #308]	; (8003208 <Start_Control+0x8f8>)
 80030d2:	463b      	mov	r3, r7
 80030d4:	ed97 6a4b 	vldr	s12, [r7, #300]	; 0x12c
 80030d8:	edd7 6a4c 	vldr	s13, [r7, #304]	; 0x130
 80030dc:	ed97 7a4d 	vldr	s14, [r7, #308]	; 0x134
 80030e0:	edd7 7a4e 	vldr	s15, [r7, #312]	; 0x138
 80030e4:	eeb0 0a46 	vmov.f32	s0, s12
 80030e8:	eef0 0a66 	vmov.f32	s1, s13
 80030ec:	eeb0 1a47 	vmov.f32	s2, s14
 80030f0:	eef0 1a67 	vmov.f32	s3, s15
 80030f4:	4618      	mov	r0, r3
 80030f6:	f7fe f8ad 	bl	8001254 <FusionQuaternionToMatrix>
 80030fa:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80030fe:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003102:	461d      	mov	r5, r3
 8003104:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003106:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003108:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800310a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800310c:	682b      	ldr	r3, [r5, #0]
 800310e:	6023      	str	r3, [r4, #0]
		  aE = FusionMatrixMultiplyVector(ERS, FusionVectorMultiplyScalar(accelerometer, 9.81));
 8003110:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8003114:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003118:	edd3 6a00 	vldr	s13, [r3]
 800311c:	ed93 7a01 	vldr	s14, [r3, #4]
 8003120:	edd3 7a02 	vldr	s15, [r3, #8]
 8003124:	eddf 1a39 	vldr	s3, [pc, #228]	; 800320c <Start_Control+0x8fc>
 8003128:	eeb0 0a66 	vmov.f32	s0, s13
 800312c:	eef0 0a47 	vmov.f32	s1, s14
 8003130:	eeb0 1a67 	vmov.f32	s2, s15
 8003134:	f7fd ffd2 	bl	80010dc <FusionVectorMultiplyScalar>
 8003138:	eef0 6a40 	vmov.f32	s13, s0
 800313c:	eeb0 7a60 	vmov.f32	s14, s1
 8003140:	eef0 7a41 	vmov.f32	s15, s2
 8003144:	edc7 6a4f 	vstr	s13, [r7, #316]	; 0x13c
 8003148:	ed87 7a50 	vstr	s14, [r7, #320]	; 0x140
 800314c:	edc7 7a51 	vstr	s15, [r7, #324]	; 0x144
 8003150:	edd7 6a4f 	vldr	s13, [r7, #316]	; 0x13c
 8003154:	ed97 7a50 	vldr	s14, [r7, #320]	; 0x140
 8003158:	edd7 7a51 	vldr	s15, [r7, #324]	; 0x144
 800315c:	4e2a      	ldr	r6, [pc, #168]	; (8003208 <Start_Control+0x8f8>)
 800315e:	466d      	mov	r5, sp
 8003160:	f106 0410 	add.w	r4, r6, #16
 8003164:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003166:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003168:	6823      	ldr	r3, [r4, #0]
 800316a:	602b      	str	r3, [r5, #0]
 800316c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8003170:	eeb0 0a66 	vmov.f32	s0, s13
 8003174:	eef0 0a47 	vmov.f32	s1, s14
 8003178:	eeb0 1a67 	vmov.f32	s2, s15
 800317c:	f7fd fff2 	bl	8001164 <FusionMatrixMultiplyVector>
 8003180:	eef0 6a40 	vmov.f32	s13, s0
 8003184:	eeb0 7a60 	vmov.f32	s14, s1
 8003188:	eef0 7a41 	vmov.f32	s15, s2
 800318c:	4b20      	ldr	r3, [pc, #128]	; (8003210 <Start_Control+0x900>)
 800318e:	edc3 6a00 	vstr	s13, [r3]
 8003192:	ed83 7a01 	vstr	s14, [r3, #4]
 8003196:	edc3 7a02 	vstr	s15, [r3, #8]
		  aE.axis.z -=9.85173;
 800319a:	4b1d      	ldr	r3, [pc, #116]	; (8003210 <Start_Control+0x900>)
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	4618      	mov	r0, r3
 80031a0:	f7fd f9d2 	bl	8000548 <__aeabi_f2d>
 80031a4:	a30e      	add	r3, pc, #56	; (adr r3, 80031e0 <Start_Control+0x8d0>)
 80031a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031aa:	f7fd f86d 	bl	8000288 <__aeabi_dsub>
 80031ae:	4602      	mov	r2, r0
 80031b0:	460b      	mov	r3, r1
 80031b2:	4610      	mov	r0, r2
 80031b4:	4619      	mov	r1, r3
 80031b6:	f7fd fd17 	bl	8000be8 <__aeabi_d2f>
 80031ba:	4603      	mov	r3, r0
 80031bc:	4a14      	ldr	r2, [pc, #80]	; (8003210 <Start_Control+0x900>)
 80031be:	6093      	str	r3, [r2, #8]



		  // calculate rotation around yaw axis
		  if(prev_euler_yaw > 170 && euler.angle.yaw < 0){
 80031c0:	edd7 7a71 	vldr	s15, [r7, #452]	; 0x1c4
 80031c4:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8003214 <Start_Control+0x904>
 80031c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031cc:	e024      	b.n	8003218 <Start_Control+0x908>
 80031ce:	bf00      	nop
 80031d0:	b851eb85 	.word	0xb851eb85
 80031d4:	404ca51e 	.word	0x404ca51e
 80031d8:	51eb851f 	.word	0x51eb851f
 80031dc:	40239eb8 	.word	0x40239eb8
 80031e0:	f45e0b4e 	.word	0xf45e0b4e
 80031e4:	4023b415 	.word	0x4023b415
 80031e8:	20000a2c 	.word	0x20000a2c
 80031ec:	20000970 	.word	0x20000970
 80031f0:	20000b48 	.word	0x20000b48
 80031f4:	20000a30 	.word	0x20000a30
 80031f8:	20000a28 	.word	0x20000a28
 80031fc:	3ba3d70a 	.word	0x3ba3d70a
 8003200:	20000a54 	.word	0x20000a54
 8003204:	20000ac8 	.word	0x20000ac8
 8003208:	20000ad4 	.word	0x20000ad4
 800320c:	411cf5c3 	.word	0x411cf5c3
 8003210:	20000af8 	.word	0x20000af8
 8003214:	432a0000 	.word	0x432a0000
 8003218:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800321c:	dd0c      	ble.n	8003238 <Start_Control+0x928>
 800321e:	4be2      	ldr	r3, [pc, #904]	; (80035a8 <Start_Control+0xc98>)
 8003220:	edd3 7a02 	vldr	s15, [r3, #8]
 8003224:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003228:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800322c:	d504      	bpl.n	8003238 <Start_Control+0x928>
			  n++;
 800322e:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8003232:	3301      	adds	r3, #1
 8003234:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
		  }
		  if(prev_euler_yaw < -170 && euler.angle.yaw > 0){
 8003238:	edd7 7a71 	vldr	s15, [r7, #452]	; 0x1c4
 800323c:	ed9f 7adb 	vldr	s14, [pc, #876]	; 80035ac <Start_Control+0xc9c>
 8003240:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003244:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003248:	d50c      	bpl.n	8003264 <Start_Control+0x954>
 800324a:	4bd7      	ldr	r3, [pc, #860]	; (80035a8 <Start_Control+0xc98>)
 800324c:	edd3 7a02 	vldr	s15, [r3, #8]
 8003250:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003254:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003258:	dd04      	ble.n	8003264 <Start_Control+0x954>
			  n--;
 800325a:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800325e:	3b01      	subs	r3, #1
 8003260:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
		  }
		  yaw_angle = euler.angle.yaw + n * 360.0;
 8003264:	4bd0      	ldr	r3, [pc, #832]	; (80035a8 <Start_Control+0xc98>)
 8003266:	689b      	ldr	r3, [r3, #8]
 8003268:	4618      	mov	r0, r3
 800326a:	f7fd f96d 	bl	8000548 <__aeabi_f2d>
 800326e:	4604      	mov	r4, r0
 8003270:	460d      	mov	r5, r1
 8003272:	f8d7 01c0 	ldr.w	r0, [r7, #448]	; 0x1c0
 8003276:	f7fd f955 	bl	8000524 <__aeabi_i2d>
 800327a:	f04f 0200 	mov.w	r2, #0
 800327e:	4bcc      	ldr	r3, [pc, #816]	; (80035b0 <Start_Control+0xca0>)
 8003280:	f7fd f9ba 	bl	80005f8 <__aeabi_dmul>
 8003284:	4602      	mov	r2, r0
 8003286:	460b      	mov	r3, r1
 8003288:	4620      	mov	r0, r4
 800328a:	4629      	mov	r1, r5
 800328c:	f7fc fffe 	bl	800028c <__adddf3>
 8003290:	4602      	mov	r2, r0
 8003292:	460b      	mov	r3, r1
 8003294:	4610      	mov	r0, r2
 8003296:	4619      	mov	r1, r3
 8003298:	f7fd fca6 	bl	8000be8 <__aeabi_d2f>
 800329c:	4603      	mov	r3, r0
 800329e:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
		  abs_yaw = yaw_angle;
 80032a2:	4ac4      	ldr	r2, [pc, #784]	; (80035b4 <Start_Control+0xca4>)
 80032a4:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80032a8:	6013      	str	r3, [r2, #0]
		  prev_euler_yaw = euler.angle.yaw;
 80032aa:	4bbf      	ldr	r3, [pc, #764]	; (80035a8 <Start_Control+0xc98>)
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4



		  M_throttle = CRSFtoDuty(RX_throttle);
 80032b2:	4bc1      	ldr	r3, [pc, #772]	; (80035b8 <Start_Control+0xca8>)
 80032b4:	881b      	ldrh	r3, [r3, #0]
 80032b6:	4618      	mov	r0, r3
 80032b8:	f002 f82e 	bl	8005318 <CRSFtoDuty>
 80032bc:	eef0 7a40 	vmov.f32	s15, s0
 80032c0:	4bbe      	ldr	r3, [pc, #760]	; (80035bc <Start_Control+0xcac>)
 80032c2:	edc3 7a00 	vstr	s15, [r3]
		  M_pitch = CRSFtoPitch(RX_pitch)*25;
 80032c6:	4bbe      	ldr	r3, [pc, #760]	; (80035c0 <Start_Control+0xcb0>)
 80032c8:	881b      	ldrh	r3, [r3, #0]
 80032ca:	4618      	mov	r0, r3
 80032cc:	f002 f866 	bl	800539c <CRSFtoPitch>
 80032d0:	eef0 7a40 	vmov.f32	s15, s0
 80032d4:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 80032d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80032dc:	4bb9      	ldr	r3, [pc, #740]	; (80035c4 <Start_Control+0xcb4>)
 80032de:	edc3 7a00 	vstr	s15, [r3]
		  M_roll = CRSFtoRoll(RX_roll)*15;
 80032e2:	4bb9      	ldr	r3, [pc, #740]	; (80035c8 <Start_Control+0xcb8>)
 80032e4:	881b      	ldrh	r3, [r3, #0]
 80032e6:	4618      	mov	r0, r3
 80032e8:	f002 f876 	bl	80053d8 <CRSFtoRoll>
 80032ec:	eef0 7a40 	vmov.f32	s15, s0
 80032f0:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 80032f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80032f8:	4bb4      	ldr	r3, [pc, #720]	; (80035cc <Start_Control+0xcbc>)
 80032fa:	edc3 7a00 	vstr	s15, [r3]
		  M_yaw += CRSFtoYaw(RX_yaw)*0.3;
 80032fe:	4bb4      	ldr	r3, [pc, #720]	; (80035d0 <Start_Control+0xcc0>)
 8003300:	881b      	ldrh	r3, [r3, #0]
 8003302:	4618      	mov	r0, r3
 8003304:	f002 f886 	bl	8005414 <CRSFtoYaw>
 8003308:	ee10 3a10 	vmov	r3, s0
 800330c:	4618      	mov	r0, r3
 800330e:	f7fd f91b 	bl	8000548 <__aeabi_f2d>
 8003312:	a3a3      	add	r3, pc, #652	; (adr r3, 80035a0 <Start_Control+0xc90>)
 8003314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003318:	f7fd f96e 	bl	80005f8 <__aeabi_dmul>
 800331c:	4602      	mov	r2, r0
 800331e:	460b      	mov	r3, r1
 8003320:	4614      	mov	r4, r2
 8003322:	461d      	mov	r5, r3
 8003324:	4bab      	ldr	r3, [pc, #684]	; (80035d4 <Start_Control+0xcc4>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4618      	mov	r0, r3
 800332a:	f7fd f90d 	bl	8000548 <__aeabi_f2d>
 800332e:	4602      	mov	r2, r0
 8003330:	460b      	mov	r3, r1
 8003332:	4620      	mov	r0, r4
 8003334:	4629      	mov	r1, r5
 8003336:	f7fc ffa9 	bl	800028c <__adddf3>
 800333a:	4602      	mov	r2, r0
 800333c:	460b      	mov	r3, r1
 800333e:	4610      	mov	r0, r2
 8003340:	4619      	mov	r1, r3
 8003342:	f7fd fc51 	bl	8000be8 <__aeabi_d2f>
 8003346:	4603      	mov	r3, r0
 8003348:	4aa2      	ldr	r2, [pc, #648]	; (80035d4 <Start_Control+0xcc4>)
 800334a:	6013      	str	r3, [r2, #0]

		  //pitch angle control
		  err_angle_pitch = M_pitch - euler.angle.pitch;
 800334c:	4b9d      	ldr	r3, [pc, #628]	; (80035c4 <Start_Control+0xcb4>)
 800334e:	ed93 7a00 	vldr	s14, [r3]
 8003352:	4b95      	ldr	r3, [pc, #596]	; (80035a8 <Start_Control+0xc98>)
 8003354:	edd3 7a01 	vldr	s15, [r3, #4]
 8003358:	ee77 7a67 	vsub.f32	s15, s14, s15
 800335c:	edc7 7a69 	vstr	s15, [r7, #420]	; 0x1a4
		  errd_angle_pitch = (err_angle_pitch - prev_err_angle_pitch)/SAMPLE_PERIOD;
 8003360:	ed97 7a69 	vldr	s14, [r7, #420]	; 0x1a4
 8003364:	edd7 7a78 	vldr	s15, [r7, #480]	; 0x1e0
 8003368:	ee37 7a67 	vsub.f32	s14, s14, s15
 800336c:	eddf 6a9a 	vldr	s13, [pc, #616]	; 80035d8 <Start_Control+0xcc8>
 8003370:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003374:	edc7 7a68 	vstr	s15, [r7, #416]	; 0x1a0
		  angle_control_pitch = P_angle_pitch * err_angle_pitch + D_angle_pitch * errd_angle_pitch;
 8003378:	ed97 7a66 	vldr	s14, [r7, #408]	; 0x198
 800337c:	edd7 7a69 	vldr	s15, [r7, #420]	; 0x1a4
 8003380:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003384:	edd7 6a65 	vldr	s13, [r7, #404]	; 0x194
 8003388:	edd7 7a68 	vldr	s15, [r7, #416]	; 0x1a0
 800338c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003390:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003394:	edc7 7a67 	vstr	s15, [r7, #412]	; 0x19c
		  prev_err_angle_pitch = err_angle_pitch;
 8003398:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800339c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
		  //debug_control1 = err_angle_pitch;

		  //pitch angle velocity control
		  err_pitch = angle_control_pitch - imu.gyr_rps[1];
 80033a0:	4b8e      	ldr	r3, [pc, #568]	; (80035dc <Start_Control+0xccc>)
 80033a2:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 80033a6:	ed97 7a67 	vldr	s14, [r7, #412]	; 0x19c
 80033aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80033ae:	edc7 7a6e 	vstr	s15, [r7, #440]	; 0x1b8
		  errd_pitch = (err_pitch - prev_err_pitch)/SAMPLE_PERIOD;
 80033b2:	ed97 7a6e 	vldr	s14, [r7, #440]	; 0x1b8
 80033b6:	edd7 7a79 	vldr	s15, [r7, #484]	; 0x1e4
 80033ba:	ee37 7a67 	vsub.f32	s14, s14, s15
 80033be:	eddf 6a86 	vldr	s13, [pc, #536]	; 80035d8 <Start_Control+0xcc8>
 80033c2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80033c6:	edc7 7a6d 	vstr	s15, [r7, #436]	; 0x1b4
		  prev_err_pitch = err_pitch;
 80033ca:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 80033ce:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
		  control_pitch = P_pitch * err_pitch + D_pitch * errd_pitch;
 80033d2:	ed97 7a6b 	vldr	s14, [r7, #428]	; 0x1ac
 80033d6:	edd7 7a6e 	vldr	s15, [r7, #440]	; 0x1b8
 80033da:	ee27 7a27 	vmul.f32	s14, s14, s15
 80033de:	edd7 6a6a 	vldr	s13, [r7, #424]	; 0x1a8
 80033e2:	edd7 7a6d 	vldr	s15, [r7, #436]	; 0x1b4
 80033e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80033ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033ee:	edc7 7a6c 	vstr	s15, [r7, #432]	; 0x1b0

		  //roll angle control
		  err_angle_roll = M_roll - euler.angle.roll;
 80033f2:	4b76      	ldr	r3, [pc, #472]	; (80035cc <Start_Control+0xcbc>)
 80033f4:	ed93 7a00 	vldr	s14, [r3]
 80033f8:	4b6b      	ldr	r3, [pc, #428]	; (80035a8 <Start_Control+0xc98>)
 80033fa:	edd3 7a00 	vldr	s15, [r3]
 80033fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003402:	edc7 7a5d 	vstr	s15, [r7, #372]	; 0x174
		  errd_angle_roll = (err_angle_roll - prev_err_angle_roll)/SAMPLE_PERIOD;
 8003406:	ed97 7a5d 	vldr	s14, [r7, #372]	; 0x174
 800340a:	edd7 7a76 	vldr	s15, [r7, #472]	; 0x1d8
 800340e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003412:	eddf 6a71 	vldr	s13, [pc, #452]	; 80035d8 <Start_Control+0xcc8>
 8003416:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800341a:	edc7 7a5c 	vstr	s15, [r7, #368]	; 0x170
		  angle_control_roll = P_angle_roll * err_angle_roll + D_angle_roll * errd_angle_roll;
 800341e:	ed97 7a5f 	vldr	s14, [r7, #380]	; 0x17c
 8003422:	edd7 7a5d 	vldr	s15, [r7, #372]	; 0x174
 8003426:	ee27 7a27 	vmul.f32	s14, s14, s15
 800342a:	edd7 6a5e 	vldr	s13, [r7, #376]	; 0x178
 800342e:	edd7 7a5c 	vldr	s15, [r7, #368]	; 0x170
 8003432:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003436:	ee77 7a27 	vadd.f32	s15, s14, s15
 800343a:	edc7 7a5b 	vstr	s15, [r7, #364]	; 0x16c
		  prev_err_angle_roll = err_angle_roll;
 800343e:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8003442:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
		  debug_control1 = err_angle_roll;
 8003446:	4a66      	ldr	r2, [pc, #408]	; (80035e0 <Start_Control+0xcd0>)
 8003448:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800344c:	6013      	str	r3, [r2, #0]


		  //roll angle velocity control
		  err_roll = angle_control_roll - imu.gyr_rps[0]; //M_roll
 800344e:	4b63      	ldr	r3, [pc, #396]	; (80035dc <Start_Control+0xccc>)
 8003450:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8003454:	ed97 7a5b 	vldr	s14, [r7, #364]	; 0x16c
 8003458:	ee77 7a67 	vsub.f32	s15, s14, s15
 800345c:	edc7 7a64 	vstr	s15, [r7, #400]	; 0x190
		  errd_roll = (err_roll - prev_err_roll)/SAMPLE_PERIOD;
 8003460:	ed97 7a64 	vldr	s14, [r7, #400]	; 0x190
 8003464:	edd7 7a77 	vldr	s15, [r7, #476]	; 0x1dc
 8003468:	ee37 7a67 	vsub.f32	s14, s14, s15
 800346c:	eddf 6a5a 	vldr	s13, [pc, #360]	; 80035d8 <Start_Control+0xcc8>
 8003470:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003474:	edc7 7a63 	vstr	s15, [r7, #396]	; 0x18c
		  prev_err_roll = err_roll;
 8003478:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800347c:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
		  control_roll = P_roll * err_roll + D_roll * errd_roll;
 8003480:	ed97 7a61 	vldr	s14, [r7, #388]	; 0x184
 8003484:	edd7 7a64 	vldr	s15, [r7, #400]	; 0x190
 8003488:	ee27 7a27 	vmul.f32	s14, s14, s15
 800348c:	edd7 6a60 	vldr	s13, [r7, #384]	; 0x180
 8003490:	edd7 7a63 	vldr	s15, [r7, #396]	; 0x18c
 8003494:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003498:	ee77 7a27 	vadd.f32	s15, s14, s15
 800349c:	edc7 7a62 	vstr	s15, [r7, #392]	; 0x188
		  debug_control2 = control_roll;
 80034a0:	4a50      	ldr	r2, [pc, #320]	; (80035e4 <Start_Control+0xcd4>)
 80034a2:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80034a6:	6013      	str	r3, [r2, #0]


		  //yaw angle control
//		  err_angle_yaw = M_yaw - euler.angle.yaw;
		  err_angle_yaw = M_yaw - yaw_angle;
 80034a8:	4b4a      	ldr	r3, [pc, #296]	; (80035d4 <Start_Control+0xcc4>)
 80034aa:	ed93 7a00 	vldr	s14, [r3]
 80034ae:	edd7 7a52 	vldr	s15, [r7, #328]	; 0x148
 80034b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80034b6:	edc7 7a55 	vstr	s15, [r7, #340]	; 0x154
		  errd_angle_yaw = (err_angle_yaw - prev_err_angle_yaw)/SAMPLE_PERIOD;
 80034ba:	ed97 7a55 	vldr	s14, [r7, #340]	; 0x154
 80034be:	edd7 7a72 	vldr	s15, [r7, #456]	; 0x1c8
 80034c2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80034c6:	eddf 6a44 	vldr	s13, [pc, #272]	; 80035d8 <Start_Control+0xcc8>
 80034ca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80034ce:	edc7 7a54 	vstr	s15, [r7, #336]	; 0x150
		  angle_control_yaw = P_angle_yaw * err_angle_yaw + D_angle_yaw * errd_angle_yaw;
 80034d2:	ed97 7a57 	vldr	s14, [r7, #348]	; 0x15c
 80034d6:	edd7 7a55 	vldr	s15, [r7, #340]	; 0x154
 80034da:	ee27 7a27 	vmul.f32	s14, s14, s15
 80034de:	edd7 6a56 	vldr	s13, [r7, #344]	; 0x158
 80034e2:	edd7 7a54 	vldr	s15, [r7, #336]	; 0x150
 80034e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80034ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034ee:	edc7 7a53 	vstr	s15, [r7, #332]	; 0x14c
		  prev_err_angle_yaw = err_angle_yaw;
 80034f2:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80034f6:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8



		  //yaw angle velocity control
		  err_yaw = angle_control_yaw - imu.gyr_rps[2]; //angle_control_yaw
 80034fa:	4b38      	ldr	r3, [pc, #224]	; (80035dc <Start_Control+0xccc>)
 80034fc:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8003500:	ed97 7a53 	vldr	s14, [r7, #332]	; 0x14c
 8003504:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003508:	edc7 7a5a 	vstr	s15, [r7, #360]	; 0x168
		  errd_yaw = (err_yaw - prev_err_yaw)/SAMPLE_PERIOD;
 800350c:	ed97 7a5a 	vldr	s14, [r7, #360]	; 0x168
 8003510:	edd7 7a75 	vldr	s15, [r7, #468]	; 0x1d4
 8003514:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003518:	eddf 6a2f 	vldr	s13, [pc, #188]	; 80035d8 <Start_Control+0xcc8>
 800351c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003520:	edc7 7a59 	vstr	s15, [r7, #356]	; 0x164
		  prev_err_yaw = err_yaw;
 8003524:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8003528:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
		  control_yaw = P_yaw * err_yaw + D_yaw * errd_yaw;
 800352c:	ed97 7a74 	vldr	s14, [r7, #464]	; 0x1d0
 8003530:	edd7 7a5a 	vldr	s15, [r7, #360]	; 0x168
 8003534:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003538:	edd7 6a73 	vldr	s13, [r7, #460]	; 0x1cc
 800353c:	edd7 7a59 	vldr	s15, [r7, #356]	; 0x164
 8003540:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003544:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003548:	edc7 7a58 	vstr	s15, [r7, #352]	; 0x160



		  if(RX_arm > 1000){
 800354c:	4b26      	ldr	r3, [pc, #152]	; (80035e8 <Start_Control+0xcd8>)
 800354e:	881b      	ldrh	r3, [r3, #0]
 8003550:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003554:	f240 80da 	bls.w	800370c <Start_Control+0xdfc>
			  uart_telemetria = 0;
 8003558:	4b24      	ldr	r3, [pc, #144]	; (80035ec <Start_Control+0xcdc>)
 800355a:	2200      	movs	r2, #0
 800355c:	701a      	strb	r2, [r3, #0]
//			  ref2 = (uint16_t)(M_throttle + control_yaw);
//			  ref3 = (uint16_t)(M_throttle - control_yaw);
//			  ref4 = (uint16_t)(M_throttle + control_yaw);

			  //all together
			  ref1 = (uint16_t)(M_throttle - control_yaw - control_pitch + control_roll);
 800355e:	4b17      	ldr	r3, [pc, #92]	; (80035bc <Start_Control+0xcac>)
 8003560:	ed93 7a00 	vldr	s14, [r3]
 8003564:	edd7 7a58 	vldr	s15, [r7, #352]	; 0x160
 8003568:	ee37 7a67 	vsub.f32	s14, s14, s15
 800356c:	edd7 7a6c 	vldr	s15, [r7, #432]	; 0x1b0
 8003570:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003574:	edd7 7a62 	vldr	s15, [r7, #392]	; 0x188
 8003578:	ee77 7a27 	vadd.f32	s15, s14, s15
 800357c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003580:	ee17 3a90 	vmov	r3, s15
 8003584:	b29a      	uxth	r2, r3
 8003586:	4b1a      	ldr	r3, [pc, #104]	; (80035f0 <Start_Control+0xce0>)
 8003588:	801a      	strh	r2, [r3, #0]
			  ref2 = (uint16_t)(M_throttle + control_yaw - control_pitch - control_roll);
 800358a:	4b0c      	ldr	r3, [pc, #48]	; (80035bc <Start_Control+0xcac>)
 800358c:	ed93 7a00 	vldr	s14, [r3]
 8003590:	edd7 7a58 	vldr	s15, [r7, #352]	; 0x160
 8003594:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003598:	e02c      	b.n	80035f4 <Start_Control+0xce4>
 800359a:	bf00      	nop
 800359c:	f3af 8000 	nop.w
 80035a0:	33333333 	.word	0x33333333
 80035a4:	3fd33333 	.word	0x3fd33333
 80035a8:	20000ac8 	.word	0x20000ac8
 80035ac:	c32a0000 	.word	0xc32a0000
 80035b0:	40768000 	.word	0x40768000
 80035b4:	20000a50 	.word	0x20000a50
 80035b8:	20000bb4 	.word	0x20000bb4
 80035bc:	20000bb8 	.word	0x20000bb8
 80035c0:	20000bb0 	.word	0x20000bb0
 80035c4:	20000bbc 	.word	0x20000bbc
 80035c8:	20000bae 	.word	0x20000bae
 80035cc:	20000bc0 	.word	0x20000bc0
 80035d0:	20000bb2 	.word	0x20000bb2
 80035d4:	20000bc4 	.word	0x20000bc4
 80035d8:	3ba3d70a 	.word	0x3ba3d70a
 80035dc:	20000970 	.word	0x20000970
 80035e0:	20000bc8 	.word	0x20000bc8
 80035e4:	20000bcc 	.word	0x20000bcc
 80035e8:	20000bb6 	.word	0x20000bb6
 80035ec:	20000b12 	.word	0x20000b12
 80035f0:	20000b60 	.word	0x20000b60
 80035f4:	edd7 7a6c 	vldr	s15, [r7, #432]	; 0x1b0
 80035f8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80035fc:	edd7 7a62 	vldr	s15, [r7, #392]	; 0x188
 8003600:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003604:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003608:	ee17 3a90 	vmov	r3, s15
 800360c:	b29a      	uxth	r2, r3
 800360e:	4bae      	ldr	r3, [pc, #696]	; (80038c8 <Start_Control+0xfb8>)
 8003610:	801a      	strh	r2, [r3, #0]
			  ref3 = (uint16_t)(M_throttle - control_yaw + control_pitch - control_roll);
 8003612:	4bae      	ldr	r3, [pc, #696]	; (80038cc <Start_Control+0xfbc>)
 8003614:	ed93 7a00 	vldr	s14, [r3]
 8003618:	edd7 7a58 	vldr	s15, [r7, #352]	; 0x160
 800361c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003620:	edd7 7a6c 	vldr	s15, [r7, #432]	; 0x1b0
 8003624:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003628:	edd7 7a62 	vldr	s15, [r7, #392]	; 0x188
 800362c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003630:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003634:	ee17 3a90 	vmov	r3, s15
 8003638:	b29a      	uxth	r2, r3
 800363a:	4ba5      	ldr	r3, [pc, #660]	; (80038d0 <Start_Control+0xfc0>)
 800363c:	801a      	strh	r2, [r3, #0]
			  ref4 = (uint16_t)(M_throttle + control_yaw + control_pitch + control_roll);
 800363e:	4ba3      	ldr	r3, [pc, #652]	; (80038cc <Start_Control+0xfbc>)
 8003640:	ed93 7a00 	vldr	s14, [r3]
 8003644:	edd7 7a58 	vldr	s15, [r7, #352]	; 0x160
 8003648:	ee37 7a27 	vadd.f32	s14, s14, s15
 800364c:	edd7 7a6c 	vldr	s15, [r7, #432]	; 0x1b0
 8003650:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003654:	edd7 7a62 	vldr	s15, [r7, #392]	; 0x188
 8003658:	ee77 7a27 	vadd.f32	s15, s14, s15
 800365c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003660:	ee17 3a90 	vmov	r3, s15
 8003664:	b29a      	uxth	r2, r3
 8003666:	4b9b      	ldr	r3, [pc, #620]	; (80038d4 <Start_Control+0xfc4>)
 8003668:	801a      	strh	r2, [r3, #0]
//			  ref1 = (uint16_t)(M_throttle);
//			  ref2 = (uint16_t)(M_throttle);
//			  ref3 = (uint16_t)(M_throttle);
//			  ref4 = (uint16_t)(M_throttle);

			  if(ref1<550) ref1 = 550;
 800366a:	4b9b      	ldr	r3, [pc, #620]	; (80038d8 <Start_Control+0xfc8>)
 800366c:	881b      	ldrh	r3, [r3, #0]
 800366e:	f240 2225 	movw	r2, #549	; 0x225
 8003672:	4293      	cmp	r3, r2
 8003674:	d803      	bhi.n	800367e <Start_Control+0xd6e>
 8003676:	4b98      	ldr	r3, [pc, #608]	; (80038d8 <Start_Control+0xfc8>)
 8003678:	f240 2226 	movw	r2, #550	; 0x226
 800367c:	801a      	strh	r2, [r3, #0]
			  if(ref2<550) ref2 = 550;
 800367e:	4b92      	ldr	r3, [pc, #584]	; (80038c8 <Start_Control+0xfb8>)
 8003680:	881b      	ldrh	r3, [r3, #0]
 8003682:	f240 2225 	movw	r2, #549	; 0x225
 8003686:	4293      	cmp	r3, r2
 8003688:	d803      	bhi.n	8003692 <Start_Control+0xd82>
 800368a:	4b8f      	ldr	r3, [pc, #572]	; (80038c8 <Start_Control+0xfb8>)
 800368c:	f240 2226 	movw	r2, #550	; 0x226
 8003690:	801a      	strh	r2, [r3, #0]
			  if(ref3<550) ref3 = 550;
 8003692:	4b8f      	ldr	r3, [pc, #572]	; (80038d0 <Start_Control+0xfc0>)
 8003694:	881b      	ldrh	r3, [r3, #0]
 8003696:	f240 2225 	movw	r2, #549	; 0x225
 800369a:	4293      	cmp	r3, r2
 800369c:	d803      	bhi.n	80036a6 <Start_Control+0xd96>
 800369e:	4b8c      	ldr	r3, [pc, #560]	; (80038d0 <Start_Control+0xfc0>)
 80036a0:	f240 2226 	movw	r2, #550	; 0x226
 80036a4:	801a      	strh	r2, [r3, #0]
			  if(ref4<550) ref4 = 550;
 80036a6:	4b8b      	ldr	r3, [pc, #556]	; (80038d4 <Start_Control+0xfc4>)
 80036a8:	881b      	ldrh	r3, [r3, #0]
 80036aa:	f240 2225 	movw	r2, #549	; 0x225
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d803      	bhi.n	80036ba <Start_Control+0xdaa>
 80036b2:	4b88      	ldr	r3, [pc, #544]	; (80038d4 <Start_Control+0xfc4>)
 80036b4:	f240 2226 	movw	r2, #550	; 0x226
 80036b8:	801a      	strh	r2, [r3, #0]

			  if(ref1>950) ref1 = 950;
 80036ba:	4b87      	ldr	r3, [pc, #540]	; (80038d8 <Start_Control+0xfc8>)
 80036bc:	881b      	ldrh	r3, [r3, #0]
 80036be:	f240 32b6 	movw	r2, #950	; 0x3b6
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d903      	bls.n	80036ce <Start_Control+0xdbe>
 80036c6:	4b84      	ldr	r3, [pc, #528]	; (80038d8 <Start_Control+0xfc8>)
 80036c8:	f240 32b6 	movw	r2, #950	; 0x3b6
 80036cc:	801a      	strh	r2, [r3, #0]
			  if(ref2>950) ref2 = 950;
 80036ce:	4b7e      	ldr	r3, [pc, #504]	; (80038c8 <Start_Control+0xfb8>)
 80036d0:	881b      	ldrh	r3, [r3, #0]
 80036d2:	f240 32b6 	movw	r2, #950	; 0x3b6
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d903      	bls.n	80036e2 <Start_Control+0xdd2>
 80036da:	4b7b      	ldr	r3, [pc, #492]	; (80038c8 <Start_Control+0xfb8>)
 80036dc:	f240 32b6 	movw	r2, #950	; 0x3b6
 80036e0:	801a      	strh	r2, [r3, #0]
			  if(ref3>950) ref3 = 950;
 80036e2:	4b7b      	ldr	r3, [pc, #492]	; (80038d0 <Start_Control+0xfc0>)
 80036e4:	881b      	ldrh	r3, [r3, #0]
 80036e6:	f240 32b6 	movw	r2, #950	; 0x3b6
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d903      	bls.n	80036f6 <Start_Control+0xde6>
 80036ee:	4b78      	ldr	r3, [pc, #480]	; (80038d0 <Start_Control+0xfc0>)
 80036f0:	f240 32b6 	movw	r2, #950	; 0x3b6
 80036f4:	801a      	strh	r2, [r3, #0]
			  if(ref4>950) ref4 = 950;
 80036f6:	4b77      	ldr	r3, [pc, #476]	; (80038d4 <Start_Control+0xfc4>)
 80036f8:	881b      	ldrh	r3, [r3, #0]
 80036fa:	f240 32b6 	movw	r2, #950	; 0x3b6
 80036fe:	4293      	cmp	r3, r2
 8003700:	d931      	bls.n	8003766 <Start_Control+0xe56>
 8003702:	4b74      	ldr	r3, [pc, #464]	; (80038d4 <Start_Control+0xfc4>)
 8003704:	f240 32b6 	movw	r2, #950	; 0x3b6
 8003708:	801a      	strh	r2, [r3, #0]
 800370a:	e02c      	b.n	8003766 <Start_Control+0xe56>


		  }
		  else{
			  uart_telemetria = 1;
 800370c:	4b73      	ldr	r3, [pc, #460]	; (80038dc <Start_Control+0xfcc>)
 800370e:	2201      	movs	r2, #1
 8003710:	701a      	strb	r2, [r3, #0]
			  if(new_P == 1){
 8003712:	4b73      	ldr	r3, [pc, #460]	; (80038e0 <Start_Control+0xfd0>)
 8003714:	781b      	ldrb	r3, [r3, #0]
 8003716:	2b01      	cmp	r3, #1
 8003718:	d106      	bne.n	8003728 <Start_Control+0xe18>
				  P_yaw = telem_P;
 800371a:	4b72      	ldr	r3, [pc, #456]	; (80038e4 <Start_Control+0xfd4>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
				  new_P = 0;
 8003722:	4b6f      	ldr	r3, [pc, #444]	; (80038e0 <Start_Control+0xfd0>)
 8003724:	2200      	movs	r2, #0
 8003726:	701a      	strb	r2, [r3, #0]
			  }
			  if(new_D == 1){
 8003728:	4b6f      	ldr	r3, [pc, #444]	; (80038e8 <Start_Control+0xfd8>)
 800372a:	781b      	ldrb	r3, [r3, #0]
 800372c:	2b01      	cmp	r3, #1
 800372e:	d106      	bne.n	800373e <Start_Control+0xe2e>
				  D_yaw = telem_D;
 8003730:	4b6e      	ldr	r3, [pc, #440]	; (80038ec <Start_Control+0xfdc>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
				  new_D = 0;
 8003738:	4b6b      	ldr	r3, [pc, #428]	; (80038e8 <Start_Control+0xfd8>)
 800373a:	2200      	movs	r2, #0
 800373c:	701a      	strb	r2, [r3, #0]
			  }
			  // yaw angle reference set to the AHRS calculated yaw angle, this is to prevent the angle offset during arm switch off state
			  M_yaw = yaw_angle;
 800373e:	4a6c      	ldr	r2, [pc, #432]	; (80038f0 <Start_Control+0xfe0>)
 8003740:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8003744:	6013      	str	r3, [r2, #0]

			  ref1 = 550;
 8003746:	4b64      	ldr	r3, [pc, #400]	; (80038d8 <Start_Control+0xfc8>)
 8003748:	f240 2226 	movw	r2, #550	; 0x226
 800374c:	801a      	strh	r2, [r3, #0]
			  ref2 = 550;
 800374e:	4b5e      	ldr	r3, [pc, #376]	; (80038c8 <Start_Control+0xfb8>)
 8003750:	f240 2226 	movw	r2, #550	; 0x226
 8003754:	801a      	strh	r2, [r3, #0]
			  ref3 = 550;
 8003756:	4b5e      	ldr	r3, [pc, #376]	; (80038d0 <Start_Control+0xfc0>)
 8003758:	f240 2226 	movw	r2, #550	; 0x226
 800375c:	801a      	strh	r2, [r3, #0]
			  ref4 = 550;
 800375e:	4b5d      	ldr	r3, [pc, #372]	; (80038d4 <Start_Control+0xfc4>)
 8003760:	f240 2226 	movw	r2, #550	; 0x226
 8003764:	801a      	strh	r2, [r3, #0]
		  }


		  //telemetria
		  telemetria_float[0] = accelerometer.axis.x;
 8003766:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 800376a:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800376e:	681a      	ldr	r2, [r3, #0]
 8003770:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8003774:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003778:	601a      	str	r2, [r3, #0]
		  telemetria_float[1] = accelerometer.axis.y;
 800377a:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 800377e:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003782:	685a      	ldr	r2, [r3, #4]
 8003784:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8003788:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800378c:	605a      	str	r2, [r3, #4]
		  telemetria_float[2] = accelerometer.axis.z;
 800378e:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8003792:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003796:	689a      	ldr	r2, [r3, #8]
 8003798:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 800379c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80037a0:	609a      	str	r2, [r3, #8]
		  telemetria_float[3] = gyroscope.axis.x;
 80037a2:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80037a6:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80037b0:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80037b4:	60da      	str	r2, [r3, #12]
		  telemetria_float[4] = gyroscope.axis.y;
 80037b6:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80037ba:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80037be:	685a      	ldr	r2, [r3, #4]
 80037c0:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80037c4:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80037c8:	611a      	str	r2, [r3, #16]
		  telemetria_float[5] = gyroscope.axis.z;
 80037ca:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80037ce:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80037d2:	689a      	ldr	r2, [r3, #8]
 80037d4:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80037d8:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80037dc:	615a      	str	r2, [r3, #20]
		  telemetria_float[6] = euler.angle.roll;
 80037de:	4b45      	ldr	r3, [pc, #276]	; (80038f4 <Start_Control+0xfe4>)
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80037e6:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80037ea:	619a      	str	r2, [r3, #24]
		  telemetria_float[7] = euler.angle.pitch;
 80037ec:	4b41      	ldr	r3, [pc, #260]	; (80038f4 <Start_Control+0xfe4>)
 80037ee:	685a      	ldr	r2, [r3, #4]
 80037f0:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80037f4:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80037f8:	61da      	str	r2, [r3, #28]
		  telemetria_float[8] = euler.angle.yaw;
 80037fa:	4b3e      	ldr	r3, [pc, #248]	; (80038f4 <Start_Control+0xfe4>)
 80037fc:	689a      	ldr	r2, [r3, #8]
 80037fe:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8003802:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003806:	621a      	str	r2, [r3, #32]
//		  telemetria_float[9] = (float)ref1;
//		  telemetria_float[10] = (float)ref2;
//		  telemetria_float[11] = (float)ref3;
//		  telemetria_float[12] = (float)ref4;
		  telemetria_float[9] = (float)M_roll;
 8003808:	4b3b      	ldr	r3, [pc, #236]	; (80038f8 <Start_Control+0xfe8>)
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8003810:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003814:	625a      	str	r2, [r3, #36]	; 0x24
		  telemetria_float[10] = (float)M_pitch;
 8003816:	4b39      	ldr	r3, [pc, #228]	; (80038fc <Start_Control+0xfec>)
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 800381e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003822:	629a      	str	r2, [r3, #40]	; 0x28
		  telemetria_float[11] = (float)M_yaw;
 8003824:	4b32      	ldr	r3, [pc, #200]	; (80038f0 <Start_Control+0xfe0>)
 8003826:	681a      	ldr	r2, [r3, #0]
 8003828:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 800382c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003830:	62da      	str	r2, [r3, #44]	; 0x2c
		  telemetria_float[12] = (float)M_throttle;
 8003832:	4b26      	ldr	r3, [pc, #152]	; (80038cc <Start_Control+0xfbc>)
 8003834:	681a      	ldr	r2, [r3, #0]
 8003836:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 800383a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800383e:	631a      	str	r2, [r3, #48]	; 0x30
		  telemetria_float[13] = (float)angle_control_roll;
 8003840:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8003844:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003848:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 800384c:	635a      	str	r2, [r3, #52]	; 0x34
		  telemetria_float[14] = (float)angle_control_pitch;
 800384e:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8003852:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003856:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800385a:	639a      	str	r2, [r3, #56]	; 0x38
		  telemetria_float[15] = (float)angle_control_yaw;
 800385c:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8003860:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003864:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8003868:	63da      	str	r2, [r3, #60]	; 0x3c
		  telemetria_float[16] = (float)control_roll;
 800386a:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 800386e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003872:	f8d7 2188 	ldr.w	r2, [r7, #392]	; 0x188
 8003876:	641a      	str	r2, [r3, #64]	; 0x40
		  telemetria_float[17] = (float)control_pitch;
 8003878:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 800387c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003880:	f8d7 21b0 	ldr.w	r2, [r7, #432]	; 0x1b0
 8003884:	645a      	str	r2, [r3, #68]	; 0x44
		  telemetria_float[18] = (float)control_yaw;
 8003886:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 800388a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800388e:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 8003892:	649a      	str	r2, [r3, #72]	; 0x48
		  xQueueSendToFront(telemetria_Queue, (void*)&telemetria_float, 0);
 8003894:	4b1a      	ldr	r3, [pc, #104]	; (8003900 <Start_Control+0xff0>)
 8003896:	6818      	ldr	r0, [r3, #0]
 8003898:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800389c:	2301      	movs	r3, #1
 800389e:	2200      	movs	r2, #0
 80038a0:	f009 fc74 	bl	800d18c <xQueueGenericSend>





		  set_duty_Oneshot42(&htim3, ref1, ref2, ref3, ref4);
 80038a4:	4b0c      	ldr	r3, [pc, #48]	; (80038d8 <Start_Control+0xfc8>)
 80038a6:	8819      	ldrh	r1, [r3, #0]
 80038a8:	4b07      	ldr	r3, [pc, #28]	; (80038c8 <Start_Control+0xfb8>)
 80038aa:	881a      	ldrh	r2, [r3, #0]
 80038ac:	4b08      	ldr	r3, [pc, #32]	; (80038d0 <Start_Control+0xfc0>)
 80038ae:	8818      	ldrh	r0, [r3, #0]
 80038b0:	4b08      	ldr	r3, [pc, #32]	; (80038d4 <Start_Control+0xfc4>)
 80038b2:	881b      	ldrh	r3, [r3, #0]
 80038b4:	9300      	str	r3, [sp, #0]
 80038b6:	4603      	mov	r3, r0
 80038b8:	4812      	ldr	r0, [pc, #72]	; (8003904 <Start_Control+0xff4>)
 80038ba:	f001 fd0a 	bl	80052d2 <set_duty_Oneshot42>
	osDelay(3);
 80038be:	2003      	movs	r0, #3
 80038c0:	f009 fada 	bl	800ce78 <osDelay>
  {
 80038c4:	f7ff ba30 	b.w	8002d28 <Start_Control+0x418>
 80038c8:	20000b62 	.word	0x20000b62
 80038cc:	20000bb8 	.word	0x20000bb8
 80038d0:	20000b64 	.word	0x20000b64
 80038d4:	20000b66 	.word	0x20000b66
 80038d8:	20000b60 	.word	0x20000b60
 80038dc:	20000b12 	.word	0x20000b12
 80038e0:	20000b1c 	.word	0x20000b1c
 80038e4:	20000b14 	.word	0x20000b14
 80038e8:	20000b1d 	.word	0x20000b1d
 80038ec:	20000b18 	.word	0x20000b18
 80038f0:	20000bc4 	.word	0x20000bc4
 80038f4:	20000ac8 	.word	0x20000ac8
 80038f8:	20000bc0 	.word	0x20000bc0
 80038fc:	20000bbc 	.word	0x20000bbc
 8003900:	20000bd0 	.word	0x20000bd0
 8003904:	200006d4 	.word	0x200006d4

08003908 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003908:	b480      	push	{r7}
 800390a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800390c:	b672      	cpsid	i
}
 800390e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003910:	e7fe      	b.n	8003910 <Error_Handler+0x8>
	...

08003914 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b082      	sub	sp, #8
 8003918:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800391a:	2300      	movs	r3, #0
 800391c:	607b      	str	r3, [r7, #4]
 800391e:	4b12      	ldr	r3, [pc, #72]	; (8003968 <HAL_MspInit+0x54>)
 8003920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003922:	4a11      	ldr	r2, [pc, #68]	; (8003968 <HAL_MspInit+0x54>)
 8003924:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003928:	6453      	str	r3, [r2, #68]	; 0x44
 800392a:	4b0f      	ldr	r3, [pc, #60]	; (8003968 <HAL_MspInit+0x54>)
 800392c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800392e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003932:	607b      	str	r3, [r7, #4]
 8003934:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003936:	2300      	movs	r3, #0
 8003938:	603b      	str	r3, [r7, #0]
 800393a:	4b0b      	ldr	r3, [pc, #44]	; (8003968 <HAL_MspInit+0x54>)
 800393c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800393e:	4a0a      	ldr	r2, [pc, #40]	; (8003968 <HAL_MspInit+0x54>)
 8003940:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003944:	6413      	str	r3, [r2, #64]	; 0x40
 8003946:	4b08      	ldr	r3, [pc, #32]	; (8003968 <HAL_MspInit+0x54>)
 8003948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800394a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800394e:	603b      	str	r3, [r7, #0]
 8003950:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003952:	2200      	movs	r2, #0
 8003954:	210f      	movs	r1, #15
 8003956:	f06f 0001 	mvn.w	r0, #1
 800395a:	f002 f94c 	bl	8005bf6 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800395e:	bf00      	nop
 8003960:	3708      	adds	r7, #8
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}
 8003966:	bf00      	nop
 8003968:	40023800 	.word	0x40023800

0800396c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b08e      	sub	sp, #56	; 0x38
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003974:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003978:	2200      	movs	r2, #0
 800397a:	601a      	str	r2, [r3, #0]
 800397c:	605a      	str	r2, [r3, #4]
 800397e:	609a      	str	r2, [r3, #8]
 8003980:	60da      	str	r2, [r3, #12]
 8003982:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a45      	ldr	r2, [pc, #276]	; (8003aa0 <HAL_ADC_MspInit+0x134>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d128      	bne.n	80039e0 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800398e:	2300      	movs	r3, #0
 8003990:	623b      	str	r3, [r7, #32]
 8003992:	4b44      	ldr	r3, [pc, #272]	; (8003aa4 <HAL_ADC_MspInit+0x138>)
 8003994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003996:	4a43      	ldr	r2, [pc, #268]	; (8003aa4 <HAL_ADC_MspInit+0x138>)
 8003998:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800399c:	6453      	str	r3, [r2, #68]	; 0x44
 800399e:	4b41      	ldr	r3, [pc, #260]	; (8003aa4 <HAL_ADC_MspInit+0x138>)
 80039a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039a6:	623b      	str	r3, [r7, #32]
 80039a8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039aa:	2300      	movs	r3, #0
 80039ac:	61fb      	str	r3, [r7, #28]
 80039ae:	4b3d      	ldr	r3, [pc, #244]	; (8003aa4 <HAL_ADC_MspInit+0x138>)
 80039b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039b2:	4a3c      	ldr	r2, [pc, #240]	; (8003aa4 <HAL_ADC_MspInit+0x138>)
 80039b4:	f043 0301 	orr.w	r3, r3, #1
 80039b8:	6313      	str	r3, [r2, #48]	; 0x30
 80039ba:	4b3a      	ldr	r3, [pc, #232]	; (8003aa4 <HAL_ADC_MspInit+0x138>)
 80039bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039be:	f003 0301 	and.w	r3, r3, #1
 80039c2:	61fb      	str	r3, [r7, #28]
 80039c4:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = CRNT_Pin;
 80039c6:	2320      	movs	r3, #32
 80039c8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80039ca:	2303      	movs	r3, #3
 80039cc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039ce:	2300      	movs	r3, #0
 80039d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CRNT_GPIO_Port, &GPIO_InitStruct);
 80039d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80039d6:	4619      	mov	r1, r3
 80039d8:	4833      	ldr	r0, [pc, #204]	; (8003aa8 <HAL_ADC_MspInit+0x13c>)
 80039da:	f002 fd45 	bl	8006468 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80039de:	e05a      	b.n	8003a96 <HAL_ADC_MspInit+0x12a>
  else if(hadc->Instance==ADC2)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a31      	ldr	r2, [pc, #196]	; (8003aac <HAL_ADC_MspInit+0x140>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d128      	bne.n	8003a3c <HAL_ADC_MspInit+0xd0>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80039ea:	2300      	movs	r3, #0
 80039ec:	61bb      	str	r3, [r7, #24]
 80039ee:	4b2d      	ldr	r3, [pc, #180]	; (8003aa4 <HAL_ADC_MspInit+0x138>)
 80039f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039f2:	4a2c      	ldr	r2, [pc, #176]	; (8003aa4 <HAL_ADC_MspInit+0x138>)
 80039f4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80039f8:	6453      	str	r3, [r2, #68]	; 0x44
 80039fa:	4b2a      	ldr	r3, [pc, #168]	; (8003aa4 <HAL_ADC_MspInit+0x138>)
 80039fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a02:	61bb      	str	r3, [r7, #24]
 8003a04:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a06:	2300      	movs	r3, #0
 8003a08:	617b      	str	r3, [r7, #20]
 8003a0a:	4b26      	ldr	r3, [pc, #152]	; (8003aa4 <HAL_ADC_MspInit+0x138>)
 8003a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a0e:	4a25      	ldr	r2, [pc, #148]	; (8003aa4 <HAL_ADC_MspInit+0x138>)
 8003a10:	f043 0301 	orr.w	r3, r3, #1
 8003a14:	6313      	str	r3, [r2, #48]	; 0x30
 8003a16:	4b23      	ldr	r3, [pc, #140]	; (8003aa4 <HAL_ADC_MspInit+0x138>)
 8003a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a1a:	f003 0301 	and.w	r3, r3, #1
 8003a1e:	617b      	str	r3, [r7, #20]
 8003a20:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003a22:	2310      	movs	r3, #16
 8003a24:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003a26:	2303      	movs	r3, #3
 8003a28:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a32:	4619      	mov	r1, r3
 8003a34:	481c      	ldr	r0, [pc, #112]	; (8003aa8 <HAL_ADC_MspInit+0x13c>)
 8003a36:	f002 fd17 	bl	8006468 <HAL_GPIO_Init>
}
 8003a3a:	e02c      	b.n	8003a96 <HAL_ADC_MspInit+0x12a>
  else if(hadc->Instance==ADC3)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a1b      	ldr	r2, [pc, #108]	; (8003ab0 <HAL_ADC_MspInit+0x144>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d127      	bne.n	8003a96 <HAL_ADC_MspInit+0x12a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8003a46:	2300      	movs	r3, #0
 8003a48:	613b      	str	r3, [r7, #16]
 8003a4a:	4b16      	ldr	r3, [pc, #88]	; (8003aa4 <HAL_ADC_MspInit+0x138>)
 8003a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a4e:	4a15      	ldr	r2, [pc, #84]	; (8003aa4 <HAL_ADC_MspInit+0x138>)
 8003a50:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003a54:	6453      	str	r3, [r2, #68]	; 0x44
 8003a56:	4b13      	ldr	r3, [pc, #76]	; (8003aa4 <HAL_ADC_MspInit+0x138>)
 8003a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a5e:	613b      	str	r3, [r7, #16]
 8003a60:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a62:	2300      	movs	r3, #0
 8003a64:	60fb      	str	r3, [r7, #12]
 8003a66:	4b0f      	ldr	r3, [pc, #60]	; (8003aa4 <HAL_ADC_MspInit+0x138>)
 8003a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a6a:	4a0e      	ldr	r2, [pc, #56]	; (8003aa4 <HAL_ADC_MspInit+0x138>)
 8003a6c:	f043 0304 	orr.w	r3, r3, #4
 8003a70:	6313      	str	r3, [r2, #48]	; 0x30
 8003a72:	4b0c      	ldr	r3, [pc, #48]	; (8003aa4 <HAL_ADC_MspInit+0x138>)
 8003a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a76:	f003 0304 	and.w	r3, r3, #4
 8003a7a:	60fb      	str	r3, [r7, #12]
 8003a7c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003a7e:	2308      	movs	r3, #8
 8003a80:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003a82:	2303      	movs	r3, #3
 8003a84:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a86:	2300      	movs	r3, #0
 8003a88:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a8e:	4619      	mov	r1, r3
 8003a90:	4808      	ldr	r0, [pc, #32]	; (8003ab4 <HAL_ADC_MspInit+0x148>)
 8003a92:	f002 fce9 	bl	8006468 <HAL_GPIO_Init>
}
 8003a96:	bf00      	nop
 8003a98:	3738      	adds	r7, #56	; 0x38
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd80      	pop	{r7, pc}
 8003a9e:	bf00      	nop
 8003aa0:	40012000 	.word	0x40012000
 8003aa4:	40023800 	.word	0x40023800
 8003aa8:	40020000 	.word	0x40020000
 8003aac:	40012100 	.word	0x40012100
 8003ab0:	40012200 	.word	0x40012200
 8003ab4:	40020800 	.word	0x40020800

08003ab8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b08e      	sub	sp, #56	; 0x38
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ac0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	601a      	str	r2, [r3, #0]
 8003ac8:	605a      	str	r2, [r3, #4]
 8003aca:	609a      	str	r2, [r3, #8]
 8003acc:	60da      	str	r2, [r3, #12]
 8003ace:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a5c      	ldr	r2, [pc, #368]	; (8003c48 <HAL_I2C_MspInit+0x190>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d12d      	bne.n	8003b36 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ada:	2300      	movs	r3, #0
 8003adc:	623b      	str	r3, [r7, #32]
 8003ade:	4b5b      	ldr	r3, [pc, #364]	; (8003c4c <HAL_I2C_MspInit+0x194>)
 8003ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ae2:	4a5a      	ldr	r2, [pc, #360]	; (8003c4c <HAL_I2C_MspInit+0x194>)
 8003ae4:	f043 0302 	orr.w	r3, r3, #2
 8003ae8:	6313      	str	r3, [r2, #48]	; 0x30
 8003aea:	4b58      	ldr	r3, [pc, #352]	; (8003c4c <HAL_I2C_MspInit+0x194>)
 8003aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aee:	f003 0302 	and.w	r3, r3, #2
 8003af2:	623b      	str	r3, [r7, #32]
 8003af4:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = MAGN_SCL_Pin|MAGN_SDA_Pin;
 8003af6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003afa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003afc:	2312      	movs	r3, #18
 8003afe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b00:	2300      	movs	r3, #0
 8003b02:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b04:	2303      	movs	r3, #3
 8003b06:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003b08:	2304      	movs	r3, #4
 8003b0a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b10:	4619      	mov	r1, r3
 8003b12:	484f      	ldr	r0, [pc, #316]	; (8003c50 <HAL_I2C_MspInit+0x198>)
 8003b14:	f002 fca8 	bl	8006468 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003b18:	2300      	movs	r3, #0
 8003b1a:	61fb      	str	r3, [r7, #28]
 8003b1c:	4b4b      	ldr	r3, [pc, #300]	; (8003c4c <HAL_I2C_MspInit+0x194>)
 8003b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b20:	4a4a      	ldr	r2, [pc, #296]	; (8003c4c <HAL_I2C_MspInit+0x194>)
 8003b22:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003b26:	6413      	str	r3, [r2, #64]	; 0x40
 8003b28:	4b48      	ldr	r3, [pc, #288]	; (8003c4c <HAL_I2C_MspInit+0x194>)
 8003b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b30:	61fb      	str	r3, [r7, #28]
 8003b32:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8003b34:	e083      	b.n	8003c3e <HAL_I2C_MspInit+0x186>
  else if(hi2c->Instance==I2C2)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a46      	ldr	r2, [pc, #280]	; (8003c54 <HAL_I2C_MspInit+0x19c>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d12d      	bne.n	8003b9c <HAL_I2C_MspInit+0xe4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b40:	2300      	movs	r3, #0
 8003b42:	61bb      	str	r3, [r7, #24]
 8003b44:	4b41      	ldr	r3, [pc, #260]	; (8003c4c <HAL_I2C_MspInit+0x194>)
 8003b46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b48:	4a40      	ldr	r2, [pc, #256]	; (8003c4c <HAL_I2C_MspInit+0x194>)
 8003b4a:	f043 0302 	orr.w	r3, r3, #2
 8003b4e:	6313      	str	r3, [r2, #48]	; 0x30
 8003b50:	4b3e      	ldr	r3, [pc, #248]	; (8003c4c <HAL_I2C_MspInit+0x194>)
 8003b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b54:	f003 0302 	and.w	r3, r3, #2
 8003b58:	61bb      	str	r3, [r7, #24]
 8003b5a:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = PRESS_SCL_Pin|PRESS_SDA_Pin;
 8003b5c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003b60:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003b62:	2312      	movs	r3, #18
 8003b64:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b66:	2300      	movs	r3, #0
 8003b68:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b6a:	2303      	movs	r3, #3
 8003b6c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003b6e:	2304      	movs	r3, #4
 8003b70:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b76:	4619      	mov	r1, r3
 8003b78:	4835      	ldr	r0, [pc, #212]	; (8003c50 <HAL_I2C_MspInit+0x198>)
 8003b7a:	f002 fc75 	bl	8006468 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003b7e:	2300      	movs	r3, #0
 8003b80:	617b      	str	r3, [r7, #20]
 8003b82:	4b32      	ldr	r3, [pc, #200]	; (8003c4c <HAL_I2C_MspInit+0x194>)
 8003b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b86:	4a31      	ldr	r2, [pc, #196]	; (8003c4c <HAL_I2C_MspInit+0x194>)
 8003b88:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003b8c:	6413      	str	r3, [r2, #64]	; 0x40
 8003b8e:	4b2f      	ldr	r3, [pc, #188]	; (8003c4c <HAL_I2C_MspInit+0x194>)
 8003b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b96:	617b      	str	r3, [r7, #20]
 8003b98:	697b      	ldr	r3, [r7, #20]
}
 8003b9a:	e050      	b.n	8003c3e <HAL_I2C_MspInit+0x186>
  else if(hi2c->Instance==I2C3)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a2d      	ldr	r2, [pc, #180]	; (8003c58 <HAL_I2C_MspInit+0x1a0>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d14b      	bne.n	8003c3e <HAL_I2C_MspInit+0x186>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	613b      	str	r3, [r7, #16]
 8003baa:	4b28      	ldr	r3, [pc, #160]	; (8003c4c <HAL_I2C_MspInit+0x194>)
 8003bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bae:	4a27      	ldr	r2, [pc, #156]	; (8003c4c <HAL_I2C_MspInit+0x194>)
 8003bb0:	f043 0304 	orr.w	r3, r3, #4
 8003bb4:	6313      	str	r3, [r2, #48]	; 0x30
 8003bb6:	4b25      	ldr	r3, [pc, #148]	; (8003c4c <HAL_I2C_MspInit+0x194>)
 8003bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bba:	f003 0304 	and.w	r3, r3, #4
 8003bbe:	613b      	str	r3, [r7, #16]
 8003bc0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	60fb      	str	r3, [r7, #12]
 8003bc6:	4b21      	ldr	r3, [pc, #132]	; (8003c4c <HAL_I2C_MspInit+0x194>)
 8003bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bca:	4a20      	ldr	r2, [pc, #128]	; (8003c4c <HAL_I2C_MspInit+0x194>)
 8003bcc:	f043 0301 	orr.w	r3, r3, #1
 8003bd0:	6313      	str	r3, [r2, #48]	; 0x30
 8003bd2:	4b1e      	ldr	r3, [pc, #120]	; (8003c4c <HAL_I2C_MspInit+0x194>)
 8003bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bd6:	f003 0301 	and.w	r3, r3, #1
 8003bda:	60fb      	str	r3, [r7, #12]
 8003bdc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003bde:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003be2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003be4:	2312      	movs	r3, #18
 8003be6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003be8:	2300      	movs	r3, #0
 8003bea:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003bec:	2303      	movs	r3, #3
 8003bee:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003bf0:	2304      	movs	r3, #4
 8003bf2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003bf4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003bf8:	4619      	mov	r1, r3
 8003bfa:	4818      	ldr	r0, [pc, #96]	; (8003c5c <HAL_I2C_MspInit+0x1a4>)
 8003bfc:	f002 fc34 	bl	8006468 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003c00:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003c04:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003c06:	2312      	movs	r3, #18
 8003c08:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c0e:	2303      	movs	r3, #3
 8003c10:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003c12:	2304      	movs	r3, #4
 8003c14:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c1a:	4619      	mov	r1, r3
 8003c1c:	4810      	ldr	r0, [pc, #64]	; (8003c60 <HAL_I2C_MspInit+0x1a8>)
 8003c1e:	f002 fc23 	bl	8006468 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8003c22:	2300      	movs	r3, #0
 8003c24:	60bb      	str	r3, [r7, #8]
 8003c26:	4b09      	ldr	r3, [pc, #36]	; (8003c4c <HAL_I2C_MspInit+0x194>)
 8003c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c2a:	4a08      	ldr	r2, [pc, #32]	; (8003c4c <HAL_I2C_MspInit+0x194>)
 8003c2c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003c30:	6413      	str	r3, [r2, #64]	; 0x40
 8003c32:	4b06      	ldr	r3, [pc, #24]	; (8003c4c <HAL_I2C_MspInit+0x194>)
 8003c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c36:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003c3a:	60bb      	str	r3, [r7, #8]
 8003c3c:	68bb      	ldr	r3, [r7, #8]
}
 8003c3e:	bf00      	nop
 8003c40:	3738      	adds	r7, #56	; 0x38
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd80      	pop	{r7, pc}
 8003c46:	bf00      	nop
 8003c48:	40005400 	.word	0x40005400
 8003c4c:	40023800 	.word	0x40023800
 8003c50:	40020400 	.word	0x40020400
 8003c54:	40005800 	.word	0x40005800
 8003c58:	40005c00 	.word	0x40005c00
 8003c5c:	40020800 	.word	0x40020800
 8003c60:	40020000 	.word	0x40020000

08003c64 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b08a      	sub	sp, #40	; 0x28
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c6c:	f107 0314 	add.w	r3, r7, #20
 8003c70:	2200      	movs	r2, #0
 8003c72:	601a      	str	r2, [r3, #0]
 8003c74:	605a      	str	r2, [r3, #4]
 8003c76:	609a      	str	r2, [r3, #8]
 8003c78:	60da      	str	r2, [r3, #12]
 8003c7a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a19      	ldr	r2, [pc, #100]	; (8003ce8 <HAL_SPI_MspInit+0x84>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d12c      	bne.n	8003ce0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003c86:	2300      	movs	r3, #0
 8003c88:	613b      	str	r3, [r7, #16]
 8003c8a:	4b18      	ldr	r3, [pc, #96]	; (8003cec <HAL_SPI_MspInit+0x88>)
 8003c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c8e:	4a17      	ldr	r2, [pc, #92]	; (8003cec <HAL_SPI_MspInit+0x88>)
 8003c90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c94:	6413      	str	r3, [r2, #64]	; 0x40
 8003c96:	4b15      	ldr	r3, [pc, #84]	; (8003cec <HAL_SPI_MspInit+0x88>)
 8003c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c9e:	613b      	str	r3, [r7, #16]
 8003ca0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	60fb      	str	r3, [r7, #12]
 8003ca6:	4b11      	ldr	r3, [pc, #68]	; (8003cec <HAL_SPI_MspInit+0x88>)
 8003ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003caa:	4a10      	ldr	r2, [pc, #64]	; (8003cec <HAL_SPI_MspInit+0x88>)
 8003cac:	f043 0302 	orr.w	r3, r3, #2
 8003cb0:	6313      	str	r3, [r2, #48]	; 0x30
 8003cb2:	4b0e      	ldr	r3, [pc, #56]	; (8003cec <HAL_SPI_MspInit+0x88>)
 8003cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cb6:	f003 0302 	and.w	r3, r3, #2
 8003cba:	60fb      	str	r3, [r7, #12]
 8003cbc:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = IMU_SCK_Pin|IMU_MISO_Pin|IMU_MOSI_Pin;
 8003cbe:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8003cc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cc4:	2302      	movs	r3, #2
 8003cc6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ccc:	2303      	movs	r3, #3
 8003cce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003cd0:	2305      	movs	r3, #5
 8003cd2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003cd4:	f107 0314 	add.w	r3, r7, #20
 8003cd8:	4619      	mov	r1, r3
 8003cda:	4805      	ldr	r0, [pc, #20]	; (8003cf0 <HAL_SPI_MspInit+0x8c>)
 8003cdc:	f002 fbc4 	bl	8006468 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8003ce0:	bf00      	nop
 8003ce2:	3728      	adds	r7, #40	; 0x28
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bd80      	pop	{r7, pc}
 8003ce8:	40003800 	.word	0x40003800
 8003cec:	40023800 	.word	0x40023800
 8003cf0:	40020400 	.word	0x40020400

08003cf4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b08e      	sub	sp, #56	; 0x38
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cfc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d00:	2200      	movs	r2, #0
 8003d02:	601a      	str	r2, [r3, #0]
 8003d04:	605a      	str	r2, [r3, #4]
 8003d06:	609a      	str	r2, [r3, #8]
 8003d08:	60da      	str	r2, [r3, #12]
 8003d0a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d14:	d134      	bne.n	8003d80 <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003d16:	2300      	movs	r3, #0
 8003d18:	623b      	str	r3, [r7, #32]
 8003d1a:	4b4b      	ldr	r3, [pc, #300]	; (8003e48 <HAL_TIM_Base_MspInit+0x154>)
 8003d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d1e:	4a4a      	ldr	r2, [pc, #296]	; (8003e48 <HAL_TIM_Base_MspInit+0x154>)
 8003d20:	f043 0301 	orr.w	r3, r3, #1
 8003d24:	6413      	str	r3, [r2, #64]	; 0x40
 8003d26:	4b48      	ldr	r3, [pc, #288]	; (8003e48 <HAL_TIM_Base_MspInit+0x154>)
 8003d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d2a:	f003 0301 	and.w	r3, r3, #1
 8003d2e:	623b      	str	r3, [r7, #32]
 8003d30:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d32:	2300      	movs	r3, #0
 8003d34:	61fb      	str	r3, [r7, #28]
 8003d36:	4b44      	ldr	r3, [pc, #272]	; (8003e48 <HAL_TIM_Base_MspInit+0x154>)
 8003d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d3a:	4a43      	ldr	r2, [pc, #268]	; (8003e48 <HAL_TIM_Base_MspInit+0x154>)
 8003d3c:	f043 0301 	orr.w	r3, r3, #1
 8003d40:	6313      	str	r3, [r2, #48]	; 0x30
 8003d42:	4b41      	ldr	r3, [pc, #260]	; (8003e48 <HAL_TIM_Base_MspInit+0x154>)
 8003d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d46:	f003 0301 	and.w	r3, r3, #1
 8003d4a:	61fb      	str	r3, [r7, #28]
 8003d4c:	69fb      	ldr	r3, [r7, #28]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = ECHO_Pin;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d52:	2302      	movs	r3, #2
 8003d54:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d56:	2300      	movs	r3, #0
 8003d58:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ECHO_GPIO_Port, &GPIO_InitStruct);
 8003d62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d66:	4619      	mov	r1, r3
 8003d68:	4838      	ldr	r0, [pc, #224]	; (8003e4c <HAL_TIM_Base_MspInit+0x158>)
 8003d6a:	f002 fb7d 	bl	8006468 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8003d6e:	2200      	movs	r2, #0
 8003d70:	2105      	movs	r1, #5
 8003d72:	201c      	movs	r0, #28
 8003d74:	f001 ff3f 	bl	8005bf6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003d78:	201c      	movs	r0, #28
 8003d7a:	f001 ff58 	bl	8005c2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8003d7e:	e05e      	b.n	8003e3e <HAL_TIM_Base_MspInit+0x14a>
  else if(htim_base->Instance==TIM3)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a32      	ldr	r2, [pc, #200]	; (8003e50 <HAL_TIM_Base_MspInit+0x15c>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d10e      	bne.n	8003da8 <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	61bb      	str	r3, [r7, #24]
 8003d8e:	4b2e      	ldr	r3, [pc, #184]	; (8003e48 <HAL_TIM_Base_MspInit+0x154>)
 8003d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d92:	4a2d      	ldr	r2, [pc, #180]	; (8003e48 <HAL_TIM_Base_MspInit+0x154>)
 8003d94:	f043 0302 	orr.w	r3, r3, #2
 8003d98:	6413      	str	r3, [r2, #64]	; 0x40
 8003d9a:	4b2b      	ldr	r3, [pc, #172]	; (8003e48 <HAL_TIM_Base_MspInit+0x154>)
 8003d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d9e:	f003 0302 	and.w	r3, r3, #2
 8003da2:	61bb      	str	r3, [r7, #24]
 8003da4:	69bb      	ldr	r3, [r7, #24]
}
 8003da6:	e04a      	b.n	8003e3e <HAL_TIM_Base_MspInit+0x14a>
  else if(htim_base->Instance==TIM4)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a29      	ldr	r2, [pc, #164]	; (8003e54 <HAL_TIM_Base_MspInit+0x160>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d10e      	bne.n	8003dd0 <HAL_TIM_Base_MspInit+0xdc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003db2:	2300      	movs	r3, #0
 8003db4:	617b      	str	r3, [r7, #20]
 8003db6:	4b24      	ldr	r3, [pc, #144]	; (8003e48 <HAL_TIM_Base_MspInit+0x154>)
 8003db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dba:	4a23      	ldr	r2, [pc, #140]	; (8003e48 <HAL_TIM_Base_MspInit+0x154>)
 8003dbc:	f043 0304 	orr.w	r3, r3, #4
 8003dc0:	6413      	str	r3, [r2, #64]	; 0x40
 8003dc2:	4b21      	ldr	r3, [pc, #132]	; (8003e48 <HAL_TIM_Base_MspInit+0x154>)
 8003dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc6:	f003 0304 	and.w	r3, r3, #4
 8003dca:	617b      	str	r3, [r7, #20]
 8003dcc:	697b      	ldr	r3, [r7, #20]
}
 8003dce:	e036      	b.n	8003e3e <HAL_TIM_Base_MspInit+0x14a>
  else if(htim_base->Instance==TIM6)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a20      	ldr	r2, [pc, #128]	; (8003e58 <HAL_TIM_Base_MspInit+0x164>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d116      	bne.n	8003e08 <HAL_TIM_Base_MspInit+0x114>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003dda:	2300      	movs	r3, #0
 8003ddc:	613b      	str	r3, [r7, #16]
 8003dde:	4b1a      	ldr	r3, [pc, #104]	; (8003e48 <HAL_TIM_Base_MspInit+0x154>)
 8003de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de2:	4a19      	ldr	r2, [pc, #100]	; (8003e48 <HAL_TIM_Base_MspInit+0x154>)
 8003de4:	f043 0310 	orr.w	r3, r3, #16
 8003de8:	6413      	str	r3, [r2, #64]	; 0x40
 8003dea:	4b17      	ldr	r3, [pc, #92]	; (8003e48 <HAL_TIM_Base_MspInit+0x154>)
 8003dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dee:	f003 0310 	and.w	r3, r3, #16
 8003df2:	613b      	str	r3, [r7, #16]
 8003df4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8003df6:	2200      	movs	r2, #0
 8003df8:	2105      	movs	r1, #5
 8003dfa:	2036      	movs	r0, #54	; 0x36
 8003dfc:	f001 fefb 	bl	8005bf6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003e00:	2036      	movs	r0, #54	; 0x36
 8003e02:	f001 ff14 	bl	8005c2e <HAL_NVIC_EnableIRQ>
}
 8003e06:	e01a      	b.n	8003e3e <HAL_TIM_Base_MspInit+0x14a>
  else if(htim_base->Instance==TIM7)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a13      	ldr	r2, [pc, #76]	; (8003e5c <HAL_TIM_Base_MspInit+0x168>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d115      	bne.n	8003e3e <HAL_TIM_Base_MspInit+0x14a>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003e12:	2300      	movs	r3, #0
 8003e14:	60fb      	str	r3, [r7, #12]
 8003e16:	4b0c      	ldr	r3, [pc, #48]	; (8003e48 <HAL_TIM_Base_MspInit+0x154>)
 8003e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e1a:	4a0b      	ldr	r2, [pc, #44]	; (8003e48 <HAL_TIM_Base_MspInit+0x154>)
 8003e1c:	f043 0320 	orr.w	r3, r3, #32
 8003e20:	6413      	str	r3, [r2, #64]	; 0x40
 8003e22:	4b09      	ldr	r3, [pc, #36]	; (8003e48 <HAL_TIM_Base_MspInit+0x154>)
 8003e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e26:	f003 0320 	and.w	r3, r3, #32
 8003e2a:	60fb      	str	r3, [r7, #12]
 8003e2c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 8003e2e:	2200      	movs	r2, #0
 8003e30:	2105      	movs	r1, #5
 8003e32:	2037      	movs	r0, #55	; 0x37
 8003e34:	f001 fedf 	bl	8005bf6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8003e38:	2037      	movs	r0, #55	; 0x37
 8003e3a:	f001 fef8 	bl	8005c2e <HAL_NVIC_EnableIRQ>
}
 8003e3e:	bf00      	nop
 8003e40:	3738      	adds	r7, #56	; 0x38
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}
 8003e46:	bf00      	nop
 8003e48:	40023800 	.word	0x40023800
 8003e4c:	40020000 	.word	0x40020000
 8003e50:	40000400 	.word	0x40000400
 8003e54:	40000800 	.word	0x40000800
 8003e58:	40001000 	.word	0x40001000
 8003e5c:	40001400 	.word	0x40001400

08003e60 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b08a      	sub	sp, #40	; 0x28
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e68:	f107 0314 	add.w	r3, r7, #20
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	601a      	str	r2, [r3, #0]
 8003e70:	605a      	str	r2, [r3, #4]
 8003e72:	609a      	str	r2, [r3, #8]
 8003e74:	60da      	str	r2, [r3, #12]
 8003e76:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a21      	ldr	r2, [pc, #132]	; (8003f04 <HAL_TIM_MspPostInit+0xa4>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d13b      	bne.n	8003efa <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e82:	2300      	movs	r3, #0
 8003e84:	613b      	str	r3, [r7, #16]
 8003e86:	4b20      	ldr	r3, [pc, #128]	; (8003f08 <HAL_TIM_MspPostInit+0xa8>)
 8003e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e8a:	4a1f      	ldr	r2, [pc, #124]	; (8003f08 <HAL_TIM_MspPostInit+0xa8>)
 8003e8c:	f043 0301 	orr.w	r3, r3, #1
 8003e90:	6313      	str	r3, [r2, #48]	; 0x30
 8003e92:	4b1d      	ldr	r3, [pc, #116]	; (8003f08 <HAL_TIM_MspPostInit+0xa8>)
 8003e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e96:	f003 0301 	and.w	r3, r3, #1
 8003e9a:	613b      	str	r3, [r7, #16]
 8003e9c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	60fb      	str	r3, [r7, #12]
 8003ea2:	4b19      	ldr	r3, [pc, #100]	; (8003f08 <HAL_TIM_MspPostInit+0xa8>)
 8003ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ea6:	4a18      	ldr	r2, [pc, #96]	; (8003f08 <HAL_TIM_MspPostInit+0xa8>)
 8003ea8:	f043 0302 	orr.w	r3, r3, #2
 8003eac:	6313      	str	r3, [r2, #48]	; 0x30
 8003eae:	4b16      	ldr	r3, [pc, #88]	; (8003f08 <HAL_TIM_MspPostInit+0xa8>)
 8003eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eb2:	f003 0302 	and.w	r3, r3, #2
 8003eb6:	60fb      	str	r3, [r7, #12]
 8003eb8:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = PWM1_Pin|PWM2_Pin;
 8003eba:	23c0      	movs	r3, #192	; 0xc0
 8003ebc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ebe:	2302      	movs	r3, #2
 8003ec0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003eca:	2302      	movs	r3, #2
 8003ecc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ece:	f107 0314 	add.w	r3, r7, #20
 8003ed2:	4619      	mov	r1, r3
 8003ed4:	480d      	ldr	r0, [pc, #52]	; (8003f0c <HAL_TIM_MspPostInit+0xac>)
 8003ed6:	f002 fac7 	bl	8006468 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PWM3_Pin|PWM4_Pin;
 8003eda:	2303      	movs	r3, #3
 8003edc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ede:	2302      	movs	r3, #2
 8003ee0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003eea:	2302      	movs	r3, #2
 8003eec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003eee:	f107 0314 	add.w	r3, r7, #20
 8003ef2:	4619      	mov	r1, r3
 8003ef4:	4806      	ldr	r0, [pc, #24]	; (8003f10 <HAL_TIM_MspPostInit+0xb0>)
 8003ef6:	f002 fab7 	bl	8006468 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003efa:	bf00      	nop
 8003efc:	3728      	adds	r7, #40	; 0x28
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd80      	pop	{r7, pc}
 8003f02:	bf00      	nop
 8003f04:	40000400 	.word	0x40000400
 8003f08:	40023800 	.word	0x40023800
 8003f0c:	40020000 	.word	0x40020000
 8003f10:	40020400 	.word	0x40020400

08003f14 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b090      	sub	sp, #64	; 0x40
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f1c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003f20:	2200      	movs	r2, #0
 8003f22:	601a      	str	r2, [r3, #0]
 8003f24:	605a      	str	r2, [r3, #4]
 8003f26:	609a      	str	r2, [r3, #8]
 8003f28:	60da      	str	r2, [r3, #12]
 8003f2a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a81      	ldr	r2, [pc, #516]	; (8004138 <HAL_UART_MspInit+0x224>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d15d      	bne.n	8003ff2 <HAL_UART_MspInit+0xde>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003f36:	2300      	movs	r3, #0
 8003f38:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f3a:	4b80      	ldr	r3, [pc, #512]	; (800413c <HAL_UART_MspInit+0x228>)
 8003f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f3e:	4a7f      	ldr	r2, [pc, #508]	; (800413c <HAL_UART_MspInit+0x228>)
 8003f40:	f043 0310 	orr.w	r3, r3, #16
 8003f44:	6453      	str	r3, [r2, #68]	; 0x44
 8003f46:	4b7d      	ldr	r3, [pc, #500]	; (800413c <HAL_UART_MspInit+0x228>)
 8003f48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f4a:	f003 0310 	and.w	r3, r3, #16
 8003f4e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f50:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f52:	2300      	movs	r3, #0
 8003f54:	627b      	str	r3, [r7, #36]	; 0x24
 8003f56:	4b79      	ldr	r3, [pc, #484]	; (800413c <HAL_UART_MspInit+0x228>)
 8003f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f5a:	4a78      	ldr	r2, [pc, #480]	; (800413c <HAL_UART_MspInit+0x228>)
 8003f5c:	f043 0301 	orr.w	r3, r3, #1
 8003f60:	6313      	str	r3, [r2, #48]	; 0x30
 8003f62:	4b76      	ldr	r3, [pc, #472]	; (800413c <HAL_UART_MspInit+0x228>)
 8003f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f66:	f003 0301 	and.w	r3, r3, #1
 8003f6a:	627b      	str	r3, [r7, #36]	; 0x24
 8003f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = RECEIVER_TX_Pin|RECEIVER_RX_Pin;
 8003f6e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003f72:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f74:	2302      	movs	r3, #2
 8003f76:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f7c:	2303      	movs	r3, #3
 8003f7e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003f80:	2307      	movs	r3, #7
 8003f82:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f84:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003f88:	4619      	mov	r1, r3
 8003f8a:	486d      	ldr	r0, [pc, #436]	; (8004140 <HAL_UART_MspInit+0x22c>)
 8003f8c:	f002 fa6c 	bl	8006468 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8003f90:	4b6c      	ldr	r3, [pc, #432]	; (8004144 <HAL_UART_MspInit+0x230>)
 8003f92:	4a6d      	ldr	r2, [pc, #436]	; (8004148 <HAL_UART_MspInit+0x234>)
 8003f94:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8003f96:	4b6b      	ldr	r3, [pc, #428]	; (8004144 <HAL_UART_MspInit+0x230>)
 8003f98:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003f9c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003f9e:	4b69      	ldr	r3, [pc, #420]	; (8004144 <HAL_UART_MspInit+0x230>)
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003fa4:	4b67      	ldr	r3, [pc, #412]	; (8004144 <HAL_UART_MspInit+0x230>)
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003faa:	4b66      	ldr	r3, [pc, #408]	; (8004144 <HAL_UART_MspInit+0x230>)
 8003fac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003fb0:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003fb2:	4b64      	ldr	r3, [pc, #400]	; (8004144 <HAL_UART_MspInit+0x230>)
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003fb8:	4b62      	ldr	r3, [pc, #392]	; (8004144 <HAL_UART_MspInit+0x230>)
 8003fba:	2200      	movs	r2, #0
 8003fbc:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8003fbe:	4b61      	ldr	r3, [pc, #388]	; (8004144 <HAL_UART_MspInit+0x230>)
 8003fc0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003fc4:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8003fc6:	4b5f      	ldr	r3, [pc, #380]	; (8004144 <HAL_UART_MspInit+0x230>)
 8003fc8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003fcc:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003fce:	4b5d      	ldr	r3, [pc, #372]	; (8004144 <HAL_UART_MspInit+0x230>)
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003fd4:	485b      	ldr	r0, [pc, #364]	; (8004144 <HAL_UART_MspInit+0x230>)
 8003fd6:	f001 fe45 	bl	8005c64 <HAL_DMA_Init>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d001      	beq.n	8003fe4 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 8003fe0:	f7ff fc92 	bl	8003908 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	4a57      	ldr	r2, [pc, #348]	; (8004144 <HAL_UART_MspInit+0x230>)
 8003fe8:	639a      	str	r2, [r3, #56]	; 0x38
 8003fea:	4a56      	ldr	r2, [pc, #344]	; (8004144 <HAL_UART_MspInit+0x230>)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8003ff0:	e09d      	b.n	800412e <HAL_UART_MspInit+0x21a>
  else if(huart->Instance==USART2)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a55      	ldr	r2, [pc, #340]	; (800414c <HAL_UART_MspInit+0x238>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d134      	bne.n	8004066 <HAL_UART_MspInit+0x152>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	623b      	str	r3, [r7, #32]
 8004000:	4b4e      	ldr	r3, [pc, #312]	; (800413c <HAL_UART_MspInit+0x228>)
 8004002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004004:	4a4d      	ldr	r2, [pc, #308]	; (800413c <HAL_UART_MspInit+0x228>)
 8004006:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800400a:	6413      	str	r3, [r2, #64]	; 0x40
 800400c:	4b4b      	ldr	r3, [pc, #300]	; (800413c <HAL_UART_MspInit+0x228>)
 800400e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004010:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004014:	623b      	str	r3, [r7, #32]
 8004016:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004018:	2300      	movs	r3, #0
 800401a:	61fb      	str	r3, [r7, #28]
 800401c:	4b47      	ldr	r3, [pc, #284]	; (800413c <HAL_UART_MspInit+0x228>)
 800401e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004020:	4a46      	ldr	r2, [pc, #280]	; (800413c <HAL_UART_MspInit+0x228>)
 8004022:	f043 0301 	orr.w	r3, r3, #1
 8004026:	6313      	str	r3, [r2, #48]	; 0x30
 8004028:	4b44      	ldr	r3, [pc, #272]	; (800413c <HAL_UART_MspInit+0x228>)
 800402a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800402c:	f003 0301 	and.w	r3, r3, #1
 8004030:	61fb      	str	r3, [r7, #28]
 8004032:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004034:	230c      	movs	r3, #12
 8004036:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004038:	2302      	movs	r3, #2
 800403a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800403c:	2300      	movs	r3, #0
 800403e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004040:	2303      	movs	r3, #3
 8004042:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004044:	2307      	movs	r3, #7
 8004046:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004048:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800404c:	4619      	mov	r1, r3
 800404e:	483c      	ldr	r0, [pc, #240]	; (8004140 <HAL_UART_MspInit+0x22c>)
 8004050:	f002 fa0a 	bl	8006468 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8004054:	2200      	movs	r2, #0
 8004056:	2105      	movs	r1, #5
 8004058:	2026      	movs	r0, #38	; 0x26
 800405a:	f001 fdcc 	bl	8005bf6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800405e:	2026      	movs	r0, #38	; 0x26
 8004060:	f001 fde5 	bl	8005c2e <HAL_NVIC_EnableIRQ>
}
 8004064:	e063      	b.n	800412e <HAL_UART_MspInit+0x21a>
  else if(huart->Instance==USART3)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a39      	ldr	r2, [pc, #228]	; (8004150 <HAL_UART_MspInit+0x23c>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d12d      	bne.n	80040cc <HAL_UART_MspInit+0x1b8>
    __HAL_RCC_USART3_CLK_ENABLE();
 8004070:	2300      	movs	r3, #0
 8004072:	61bb      	str	r3, [r7, #24]
 8004074:	4b31      	ldr	r3, [pc, #196]	; (800413c <HAL_UART_MspInit+0x228>)
 8004076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004078:	4a30      	ldr	r2, [pc, #192]	; (800413c <HAL_UART_MspInit+0x228>)
 800407a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800407e:	6413      	str	r3, [r2, #64]	; 0x40
 8004080:	4b2e      	ldr	r3, [pc, #184]	; (800413c <HAL_UART_MspInit+0x228>)
 8004082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004084:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004088:	61bb      	str	r3, [r7, #24]
 800408a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800408c:	2300      	movs	r3, #0
 800408e:	617b      	str	r3, [r7, #20]
 8004090:	4b2a      	ldr	r3, [pc, #168]	; (800413c <HAL_UART_MspInit+0x228>)
 8004092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004094:	4a29      	ldr	r2, [pc, #164]	; (800413c <HAL_UART_MspInit+0x228>)
 8004096:	f043 0304 	orr.w	r3, r3, #4
 800409a:	6313      	str	r3, [r2, #48]	; 0x30
 800409c:	4b27      	ldr	r3, [pc, #156]	; (800413c <HAL_UART_MspInit+0x228>)
 800409e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040a0:	f003 0304 	and.w	r3, r3, #4
 80040a4:	617b      	str	r3, [r7, #20]
 80040a6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GNSS_TX_Pin|GNSS_RX_Pin;
 80040a8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80040ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040ae:	2302      	movs	r3, #2
 80040b0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040b2:	2300      	movs	r3, #0
 80040b4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040b6:	2303      	movs	r3, #3
 80040b8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80040ba:	2307      	movs	r3, #7
 80040bc:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80040be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80040c2:	4619      	mov	r1, r3
 80040c4:	4823      	ldr	r0, [pc, #140]	; (8004154 <HAL_UART_MspInit+0x240>)
 80040c6:	f002 f9cf 	bl	8006468 <HAL_GPIO_Init>
}
 80040ca:	e030      	b.n	800412e <HAL_UART_MspInit+0x21a>
  else if(huart->Instance==USART6)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a21      	ldr	r2, [pc, #132]	; (8004158 <HAL_UART_MspInit+0x244>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d12b      	bne.n	800412e <HAL_UART_MspInit+0x21a>
    __HAL_RCC_USART6_CLK_ENABLE();
 80040d6:	2300      	movs	r3, #0
 80040d8:	613b      	str	r3, [r7, #16]
 80040da:	4b18      	ldr	r3, [pc, #96]	; (800413c <HAL_UART_MspInit+0x228>)
 80040dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040de:	4a17      	ldr	r2, [pc, #92]	; (800413c <HAL_UART_MspInit+0x228>)
 80040e0:	f043 0320 	orr.w	r3, r3, #32
 80040e4:	6453      	str	r3, [r2, #68]	; 0x44
 80040e6:	4b15      	ldr	r3, [pc, #84]	; (800413c <HAL_UART_MspInit+0x228>)
 80040e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040ea:	f003 0320 	and.w	r3, r3, #32
 80040ee:	613b      	str	r3, [r7, #16]
 80040f0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80040f2:	2300      	movs	r3, #0
 80040f4:	60fb      	str	r3, [r7, #12]
 80040f6:	4b11      	ldr	r3, [pc, #68]	; (800413c <HAL_UART_MspInit+0x228>)
 80040f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040fa:	4a10      	ldr	r2, [pc, #64]	; (800413c <HAL_UART_MspInit+0x228>)
 80040fc:	f043 0304 	orr.w	r3, r3, #4
 8004100:	6313      	str	r3, [r2, #48]	; 0x30
 8004102:	4b0e      	ldr	r3, [pc, #56]	; (800413c <HAL_UART_MspInit+0x228>)
 8004104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004106:	f003 0304 	and.w	r3, r3, #4
 800410a:	60fb      	str	r3, [r7, #12]
 800410c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800410e:	23c0      	movs	r3, #192	; 0xc0
 8004110:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004112:	2302      	movs	r3, #2
 8004114:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004116:	2300      	movs	r3, #0
 8004118:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800411a:	2303      	movs	r3, #3
 800411c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800411e:	2308      	movs	r3, #8
 8004120:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004122:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004126:	4619      	mov	r1, r3
 8004128:	480a      	ldr	r0, [pc, #40]	; (8004154 <HAL_UART_MspInit+0x240>)
 800412a:	f002 f99d 	bl	8006468 <HAL_GPIO_Init>
}
 800412e:	bf00      	nop
 8004130:	3740      	adds	r7, #64	; 0x40
 8004132:	46bd      	mov	sp, r7
 8004134:	bd80      	pop	{r7, pc}
 8004136:	bf00      	nop
 8004138:	40011000 	.word	0x40011000
 800413c:	40023800 	.word	0x40023800
 8004140:	40020000 	.word	0x40020000
 8004144:	20000904 	.word	0x20000904
 8004148:	40026440 	.word	0x40026440
 800414c:	40004400 	.word	0x40004400
 8004150:	40004800 	.word	0x40004800
 8004154:	40020800 	.word	0x40020800
 8004158:	40011400 	.word	0x40011400

0800415c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800415c:	b480      	push	{r7}
 800415e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004160:	e7fe      	b.n	8004160 <NMI_Handler+0x4>

08004162 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004162:	b480      	push	{r7}
 8004164:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004166:	e7fe      	b.n	8004166 <HardFault_Handler+0x4>

08004168 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004168:	b480      	push	{r7}
 800416a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800416c:	e7fe      	b.n	800416c <MemManage_Handler+0x4>

0800416e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800416e:	b480      	push	{r7}
 8004170:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004172:	e7fe      	b.n	8004172 <BusFault_Handler+0x4>

08004174 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004174:	b480      	push	{r7}
 8004176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004178:	e7fe      	b.n	8004178 <UsageFault_Handler+0x4>

0800417a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800417a:	b480      	push	{r7}
 800417c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800417e:	bf00      	nop
 8004180:	46bd      	mov	sp, r7
 8004182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004186:	4770      	bx	lr

08004188 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800418c:	f001 f9b2 	bl	80054f4 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8004190:	f00a f940 	bl	800e414 <xTaskGetSchedulerState>
 8004194:	4603      	mov	r3, r0
 8004196:	2b01      	cmp	r3, #1
 8004198:	d001      	beq.n	800419e <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800419a:	f00a fc05 	bl	800e9a8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800419e:	bf00      	nop
 80041a0:	bd80      	pop	{r7, pc}

080041a2 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80041a2:	b580      	push	{r7, lr}
 80041a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_Pin);
 80041a6:	2001      	movs	r0, #1
 80041a8:	f002 fb2e 	bl	8006808 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80041ac:	bf00      	nop
 80041ae:	bd80      	pop	{r7, pc}

080041b0 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IT_PRESS_Pin);
 80041b4:	2004      	movs	r0, #4
 80041b6:	f002 fb27 	bl	8006808 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80041ba:	bf00      	nop
 80041bc:	bd80      	pop	{r7, pc}
	...

080041c0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80041c4:	4802      	ldr	r0, [pc, #8]	; (80041d0 <TIM2_IRQHandler+0x10>)
 80041c6:	f004 fe0a 	bl	8008dde <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80041ca:	bf00      	nop
 80041cc:	bd80      	pop	{r7, pc}
 80041ce:	bf00      	nop
 80041d0:	2000068c 	.word	0x2000068c

080041d4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80041d8:	4802      	ldr	r0, [pc, #8]	; (80041e4 <USART2_IRQHandler+0x10>)
 80041da:	f005 fff1 	bl	800a1c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80041de:	bf00      	nop
 80041e0:	bd80      	pop	{r7, pc}
 80041e2:	bf00      	nop
 80041e4:	20000838 	.word	0x20000838

080041e8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IT_GYRO_Pin);
 80041ec:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80041f0:	f002 fb0a 	bl	8006808 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(IT_ACC_Pin);
 80041f4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80041f8:	f002 fb06 	bl	8006808 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(IT_MAGN_Pin);
 80041fc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004200:	f002 fb02 	bl	8006808 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004204:	bf00      	nop
 8004206:	bd80      	pop	{r7, pc}

08004208 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800420c:	4802      	ldr	r0, [pc, #8]	; (8004218 <TIM6_DAC_IRQHandler+0x10>)
 800420e:	f004 fde6 	bl	8008dde <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8004212:	bf00      	nop
 8004214:	bd80      	pop	{r7, pc}
 8004216:	bf00      	nop
 8004218:	20000764 	.word	0x20000764

0800421c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8004220:	4802      	ldr	r0, [pc, #8]	; (800422c <TIM7_IRQHandler+0x10>)
 8004222:	f004 fddc 	bl	8008dde <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8004226:	bf00      	nop
 8004228:	bd80      	pop	{r7, pc}
 800422a:	bf00      	nop
 800422c:	200007ac 	.word	0x200007ac

08004230 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8004234:	4802      	ldr	r0, [pc, #8]	; (8004240 <DMA2_Stream2_IRQHandler+0x10>)
 8004236:	f001 fead 	bl	8005f94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800423a:	bf00      	nop
 800423c:	bd80      	pop	{r7, pc}
 800423e:	bf00      	nop
 8004240:	20000904 	.word	0x20000904

08004244 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004244:	b480      	push	{r7}
 8004246:	af00      	add	r7, sp, #0
  return 1;
 8004248:	2301      	movs	r3, #1
}
 800424a:	4618      	mov	r0, r3
 800424c:	46bd      	mov	sp, r7
 800424e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004252:	4770      	bx	lr

08004254 <_kill>:

int _kill(int pid, int sig)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b082      	sub	sp, #8
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
 800425c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800425e:	f00a fddd 	bl	800ee1c <__errno>
 8004262:	4603      	mov	r3, r0
 8004264:	2216      	movs	r2, #22
 8004266:	601a      	str	r2, [r3, #0]
  return -1;
 8004268:	f04f 33ff 	mov.w	r3, #4294967295
}
 800426c:	4618      	mov	r0, r3
 800426e:	3708      	adds	r7, #8
 8004270:	46bd      	mov	sp, r7
 8004272:	bd80      	pop	{r7, pc}

08004274 <_exit>:

void _exit (int status)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b082      	sub	sp, #8
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800427c:	f04f 31ff 	mov.w	r1, #4294967295
 8004280:	6878      	ldr	r0, [r7, #4]
 8004282:	f7ff ffe7 	bl	8004254 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004286:	e7fe      	b.n	8004286 <_exit+0x12>

08004288 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b086      	sub	sp, #24
 800428c:	af00      	add	r7, sp, #0
 800428e:	60f8      	str	r0, [r7, #12]
 8004290:	60b9      	str	r1, [r7, #8]
 8004292:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004294:	2300      	movs	r3, #0
 8004296:	617b      	str	r3, [r7, #20]
 8004298:	e00a      	b.n	80042b0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800429a:	f3af 8000 	nop.w
 800429e:	4601      	mov	r1, r0
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	1c5a      	adds	r2, r3, #1
 80042a4:	60ba      	str	r2, [r7, #8]
 80042a6:	b2ca      	uxtb	r2, r1
 80042a8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	3301      	adds	r3, #1
 80042ae:	617b      	str	r3, [r7, #20]
 80042b0:	697a      	ldr	r2, [r7, #20]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	429a      	cmp	r2, r3
 80042b6:	dbf0      	blt.n	800429a <_read+0x12>
  }

  return len;
 80042b8:	687b      	ldr	r3, [r7, #4]
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	3718      	adds	r7, #24
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}

080042c2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80042c2:	b580      	push	{r7, lr}
 80042c4:	b086      	sub	sp, #24
 80042c6:	af00      	add	r7, sp, #0
 80042c8:	60f8      	str	r0, [r7, #12]
 80042ca:	60b9      	str	r1, [r7, #8]
 80042cc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80042ce:	2300      	movs	r3, #0
 80042d0:	617b      	str	r3, [r7, #20]
 80042d2:	e009      	b.n	80042e8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	1c5a      	adds	r2, r3, #1
 80042d8:	60ba      	str	r2, [r7, #8]
 80042da:	781b      	ldrb	r3, [r3, #0]
 80042dc:	4618      	mov	r0, r3
 80042de:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	3301      	adds	r3, #1
 80042e6:	617b      	str	r3, [r7, #20]
 80042e8:	697a      	ldr	r2, [r7, #20]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	429a      	cmp	r2, r3
 80042ee:	dbf1      	blt.n	80042d4 <_write+0x12>
  }
  return len;
 80042f0:	687b      	ldr	r3, [r7, #4]
}
 80042f2:	4618      	mov	r0, r3
 80042f4:	3718      	adds	r7, #24
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bd80      	pop	{r7, pc}

080042fa <_close>:

int _close(int file)
{
 80042fa:	b480      	push	{r7}
 80042fc:	b083      	sub	sp, #12
 80042fe:	af00      	add	r7, sp, #0
 8004300:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004302:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004306:	4618      	mov	r0, r3
 8004308:	370c      	adds	r7, #12
 800430a:	46bd      	mov	sp, r7
 800430c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004310:	4770      	bx	lr

08004312 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004312:	b480      	push	{r7}
 8004314:	b083      	sub	sp, #12
 8004316:	af00      	add	r7, sp, #0
 8004318:	6078      	str	r0, [r7, #4]
 800431a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004322:	605a      	str	r2, [r3, #4]
  return 0;
 8004324:	2300      	movs	r3, #0
}
 8004326:	4618      	mov	r0, r3
 8004328:	370c      	adds	r7, #12
 800432a:	46bd      	mov	sp, r7
 800432c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004330:	4770      	bx	lr

08004332 <_isatty>:

int _isatty(int file)
{
 8004332:	b480      	push	{r7}
 8004334:	b083      	sub	sp, #12
 8004336:	af00      	add	r7, sp, #0
 8004338:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800433a:	2301      	movs	r3, #1
}
 800433c:	4618      	mov	r0, r3
 800433e:	370c      	adds	r7, #12
 8004340:	46bd      	mov	sp, r7
 8004342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004346:	4770      	bx	lr

08004348 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004348:	b480      	push	{r7}
 800434a:	b085      	sub	sp, #20
 800434c:	af00      	add	r7, sp, #0
 800434e:	60f8      	str	r0, [r7, #12]
 8004350:	60b9      	str	r1, [r7, #8]
 8004352:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004354:	2300      	movs	r3, #0
}
 8004356:	4618      	mov	r0, r3
 8004358:	3714      	adds	r7, #20
 800435a:	46bd      	mov	sp, r7
 800435c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004360:	4770      	bx	lr
	...

08004364 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b086      	sub	sp, #24
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800436c:	4a14      	ldr	r2, [pc, #80]	; (80043c0 <_sbrk+0x5c>)
 800436e:	4b15      	ldr	r3, [pc, #84]	; (80043c4 <_sbrk+0x60>)
 8004370:	1ad3      	subs	r3, r2, r3
 8004372:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004378:	4b13      	ldr	r3, [pc, #76]	; (80043c8 <_sbrk+0x64>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d102      	bne.n	8004386 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004380:	4b11      	ldr	r3, [pc, #68]	; (80043c8 <_sbrk+0x64>)
 8004382:	4a12      	ldr	r2, [pc, #72]	; (80043cc <_sbrk+0x68>)
 8004384:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004386:	4b10      	ldr	r3, [pc, #64]	; (80043c8 <_sbrk+0x64>)
 8004388:	681a      	ldr	r2, [r3, #0]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	4413      	add	r3, r2
 800438e:	693a      	ldr	r2, [r7, #16]
 8004390:	429a      	cmp	r2, r3
 8004392:	d207      	bcs.n	80043a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004394:	f00a fd42 	bl	800ee1c <__errno>
 8004398:	4603      	mov	r3, r0
 800439a:	220c      	movs	r2, #12
 800439c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800439e:	f04f 33ff 	mov.w	r3, #4294967295
 80043a2:	e009      	b.n	80043b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80043a4:	4b08      	ldr	r3, [pc, #32]	; (80043c8 <_sbrk+0x64>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80043aa:	4b07      	ldr	r3, [pc, #28]	; (80043c8 <_sbrk+0x64>)
 80043ac:	681a      	ldr	r2, [r3, #0]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	4413      	add	r3, r2
 80043b2:	4a05      	ldr	r2, [pc, #20]	; (80043c8 <_sbrk+0x64>)
 80043b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80043b6:	68fb      	ldr	r3, [r7, #12]
}
 80043b8:	4618      	mov	r0, r3
 80043ba:	3718      	adds	r7, #24
 80043bc:	46bd      	mov	sp, r7
 80043be:	bd80      	pop	{r7, pc}
 80043c0:	20020000 	.word	0x20020000
 80043c4:	00000400 	.word	0x00000400
 80043c8:	20000bd4 	.word	0x20000bd4
 80043cc:	20004940 	.word	0x20004940

080043d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80043d0:	b480      	push	{r7}
 80043d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80043d4:	4b06      	ldr	r3, [pc, #24]	; (80043f0 <SystemInit+0x20>)
 80043d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043da:	4a05      	ldr	r2, [pc, #20]	; (80043f0 <SystemInit+0x20>)
 80043dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80043e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80043e4:	bf00      	nop
 80043e6:	46bd      	mov	sp, r7
 80043e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ec:	4770      	bx	lr
 80043ee:	bf00      	nop
 80043f0:	e000ed00 	.word	0xe000ed00

080043f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80043f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800442c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80043f8:	480d      	ldr	r0, [pc, #52]	; (8004430 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80043fa:	490e      	ldr	r1, [pc, #56]	; (8004434 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80043fc:	4a0e      	ldr	r2, [pc, #56]	; (8004438 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80043fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004400:	e002      	b.n	8004408 <LoopCopyDataInit>

08004402 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004402:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004404:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004406:	3304      	adds	r3, #4

08004408 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004408:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800440a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800440c:	d3f9      	bcc.n	8004402 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800440e:	4a0b      	ldr	r2, [pc, #44]	; (800443c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004410:	4c0b      	ldr	r4, [pc, #44]	; (8004440 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004412:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004414:	e001      	b.n	800441a <LoopFillZerobss>

08004416 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004416:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004418:	3204      	adds	r2, #4

0800441a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800441a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800441c:	d3fb      	bcc.n	8004416 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800441e:	f7ff ffd7 	bl	80043d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004422:	f00a fd01 	bl	800ee28 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004426:	f7fd f889 	bl	800153c <main>
  bx  lr    
 800442a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800442c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004430:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004434:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8004438:	08014c28 	.word	0x08014c28
  ldr r2, =_sbss
 800443c:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8004440:	20004940 	.word	0x20004940

08004444 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004444:	e7fe      	b.n	8004444 <ADC_IRQHandler>
	...

08004448 <BMI088_Init>:
 *
 */
uint8_t BMI088_Init(BMI088 *imu,
				 SPI_HandleTypeDef *spiHandle,
				 GPIO_TypeDef *csAccPinBank, uint16_t csAccPin,
				 GPIO_TypeDef *csGyrPinBank, uint16_t csGyrPin) {
 8004448:	b580      	push	{r7, lr}
 800444a:	b086      	sub	sp, #24
 800444c:	af00      	add	r7, sp, #0
 800444e:	60f8      	str	r0, [r7, #12]
 8004450:	60b9      	str	r1, [r7, #8]
 8004452:	607a      	str	r2, [r7, #4]
 8004454:	807b      	strh	r3, [r7, #2]

	/* Store interface parameters in struct */
	imu->spiHandle 		= spiHandle;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	68ba      	ldr	r2, [r7, #8]
 800445a:	601a      	str	r2, [r3, #0]
	imu->csAccPinBank 	= csAccPinBank;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	687a      	ldr	r2, [r7, #4]
 8004460:	605a      	str	r2, [r3, #4]
	imu->csAccPin 		= csAccPin;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	887a      	ldrh	r2, [r7, #2]
 8004466:	819a      	strh	r2, [r3, #12]
	imu->csGyrPinBank 	= csGyrPinBank;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	6a3a      	ldr	r2, [r7, #32]
 800446c:	609a      	str	r2, [r3, #8]
	imu->csGyrPin 		= csGyrPin;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004472:	81da      	strh	r2, [r3, #14]

	/* Clear DMA flags */
	imu->readingAcc = 0;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	2200      	movs	r2, #0
 8004478:	741a      	strb	r2, [r3, #16]
	imu->readingGyr = 0;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	2200      	movs	r2, #0
 800447e:	745a      	strb	r2, [r3, #17]

	uint8_t status = 0;
 8004480:	2300      	movs	r3, #0
 8004482:	75fb      	strb	r3, [r7, #23]
	/*
	 *
	 * ACCELEROMETER
	 *
	 */
	uint8_t chipID=2;
 8004484:	2302      	movs	r3, #2
 8004486:	75bb      	strb	r3, [r7, #22]
		}
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
		HAL_Delay(200);
	}*/
	/* Accelerometer requires rising edge on CSB at start-up to activate SPI */
	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_RESET);
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	6858      	ldr	r0, [r3, #4]
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	899b      	ldrh	r3, [r3, #12]
 8004490:	2200      	movs	r2, #0
 8004492:	4619      	mov	r1, r3
 8004494:	f002 f984 	bl	80067a0 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8004498:	2001      	movs	r0, #1
 800449a:	f001 f84b 	bl	8005534 <HAL_Delay>
	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_SET);
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	6858      	ldr	r0, [r3, #4]
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	899b      	ldrh	r3, [r3, #12]
 80044a6:	2201      	movs	r2, #1
 80044a8:	4619      	mov	r1, r3
 80044aa:	f002 f979 	bl	80067a0 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 80044ae:	2032      	movs	r0, #50	; 0x32
 80044b0:	f001 f840 	bl	8005534 <HAL_Delay>

	/* Perform accelerometer soft reset */
	status += BMI088_WriteAccRegister(imu, BMI_ACC_SOFTRESET, 0xB6);
 80044b4:	22b6      	movs	r2, #182	; 0xb6
 80044b6:	217e      	movs	r1, #126	; 0x7e
 80044b8:	68f8      	ldr	r0, [r7, #12]
 80044ba:	f000 f95b 	bl	8004774 <BMI088_WriteAccRegister>
 80044be:	4603      	mov	r3, r0
 80044c0:	461a      	mov	r2, r3
 80044c2:	7dfb      	ldrb	r3, [r7, #23]
 80044c4:	4413      	add	r3, r2
 80044c6:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(50);
 80044c8:	2032      	movs	r0, #50	; 0x32
 80044ca:	f001 f833 	bl	8005534 <HAL_Delay>

	/* Check chip ID */
	chipID=2;
 80044ce:	2302      	movs	r3, #2
 80044d0:	75bb      	strb	r3, [r7, #22]

	status += BMI088_ReadAccRegister(imu, BMI_ACC_CHIP_ID, &chipID);
 80044d2:	f107 0316 	add.w	r3, r7, #22
 80044d6:	461a      	mov	r2, r3
 80044d8:	2100      	movs	r1, #0
 80044da:	68f8      	ldr	r0, [r7, #12]
 80044dc:	f000 f8d0 	bl	8004680 <BMI088_ReadAccRegister>
 80044e0:	4603      	mov	r3, r0
 80044e2:	461a      	mov	r2, r3
 80044e4:	7dfb      	ldrb	r3, [r7, #23]
 80044e6:	4413      	add	r3, r2
 80044e8:	75fb      	strb	r3, [r7, #23]

	/*HAL_Delay(10);
	//status += BMI088_ReadAccRegister(imu, 0x02, &chipID); //0x02 ACC_ERR_REG return 0xFF ->fatal error
	status += BMI088_ReadAccRegister(imu, 0x02, &chipID);*/

	HAL_Delay(10);
 80044ea:	200a      	movs	r0, #10
 80044ec:	f001 f822 	bl	8005534 <HAL_Delay>

	/* Configure accelerometer  */

	status += BMI088_WriteAccRegister(imu, BMI_ACC_CONF, 0xA9); /* (0xA8 no oversampling, ODR = 100 Hz, BW = 40 Hz), 200 Hz no oversampling 0xA9, 0x99 200Hz OSR2  */
 80044f0:	22a9      	movs	r2, #169	; 0xa9
 80044f2:	2140      	movs	r1, #64	; 0x40
 80044f4:	68f8      	ldr	r0, [r7, #12]
 80044f6:	f000 f93d 	bl	8004774 <BMI088_WriteAccRegister>
 80044fa:	4603      	mov	r3, r0
 80044fc:	461a      	mov	r2, r3
 80044fe:	7dfb      	ldrb	r3, [r7, #23]
 8004500:	4413      	add	r3, r2
 8004502:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8004504:	200a      	movs	r0, #10
 8004506:	f001 f815 	bl	8005534 <HAL_Delay>


	status += BMI088_WriteAccRegister(imu, BMI_ACC_RANGE, 0x00); /* +- 3g range */
 800450a:	2200      	movs	r2, #0
 800450c:	2141      	movs	r1, #65	; 0x41
 800450e:	68f8      	ldr	r0, [r7, #12]
 8004510:	f000 f930 	bl	8004774 <BMI088_WriteAccRegister>
 8004514:	4603      	mov	r3, r0
 8004516:	461a      	mov	r2, r3
 8004518:	7dfb      	ldrb	r3, [r7, #23]
 800451a:	4413      	add	r3, r2
 800451c:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 800451e:	200a      	movs	r0, #10
 8004520:	f001 f808 	bl	8005534 <HAL_Delay>


	/* Enable accelerometer data ready interrupt */
	status += BMI088_WriteAccRegister(imu, BMI_INT1_IO_CONF, 0x0A); /* INT1 = push-pull output, active high */
 8004524:	220a      	movs	r2, #10
 8004526:	2153      	movs	r1, #83	; 0x53
 8004528:	68f8      	ldr	r0, [r7, #12]
 800452a:	f000 f923 	bl	8004774 <BMI088_WriteAccRegister>
 800452e:	4603      	mov	r3, r0
 8004530:	461a      	mov	r2, r3
 8004532:	7dfb      	ldrb	r3, [r7, #23]
 8004534:	4413      	add	r3, r2
 8004536:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8004538:	200a      	movs	r0, #10
 800453a:	f000 fffb 	bl	8005534 <HAL_Delay>

	status += BMI088_WriteAccRegister(imu, BMI_INT1_INT2_MAP_DATA, 0x04);//ACC INT -> INT1
 800453e:	2204      	movs	r2, #4
 8004540:	2158      	movs	r1, #88	; 0x58
 8004542:	68f8      	ldr	r0, [r7, #12]
 8004544:	f000 f916 	bl	8004774 <BMI088_WriteAccRegister>
 8004548:	4603      	mov	r3, r0
 800454a:	461a      	mov	r2, r3
 800454c:	7dfb      	ldrb	r3, [r7, #23]
 800454e:	4413      	add	r3, r2
 8004550:	75fb      	strb	r3, [r7, #23]

	HAL_Delay(10);
 8004552:	200a      	movs	r0, #10
 8004554:	f000 ffee 	bl	8005534 <HAL_Delay>

	/* Put accelerometer into active mode */
	status += BMI088_WriteAccRegister(imu, BMI_ACC_PWR_CONF, 0x00);
 8004558:	2200      	movs	r2, #0
 800455a:	217c      	movs	r1, #124	; 0x7c
 800455c:	68f8      	ldr	r0, [r7, #12]
 800455e:	f000 f909 	bl	8004774 <BMI088_WriteAccRegister>
 8004562:	4603      	mov	r3, r0
 8004564:	461a      	mov	r2, r3
 8004566:	7dfb      	ldrb	r3, [r7, #23]
 8004568:	4413      	add	r3, r2
 800456a:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 800456c:	200a      	movs	r0, #10
 800456e:	f000 ffe1 	bl	8005534 <HAL_Delay>

	/* Turn accelerometer on */
	status += BMI088_WriteAccRegister(imu, BMI_ACC_PWR_CTRL, 0x04);
 8004572:	2204      	movs	r2, #4
 8004574:	217d      	movs	r1, #125	; 0x7d
 8004576:	68f8      	ldr	r0, [r7, #12]
 8004578:	f000 f8fc 	bl	8004774 <BMI088_WriteAccRegister>
 800457c:	4603      	mov	r3, r0
 800457e:	461a      	mov	r2, r3
 8004580:	7dfb      	ldrb	r3, [r7, #23]
 8004582:	4413      	add	r3, r2
 8004584:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8004586:	200a      	movs	r0, #10
 8004588:	f000 ffd4 	bl	8005534 <HAL_Delay>

	/* Pre-compute accelerometer conversion constant (raw to m/s^2), 9.81 g-constant, 32768 normalize raw data, 2^(<0x41>+1)*1.5, <0x41> is the acc range register */
	imu->accConversion = 9.81f / 32768.0f * 2.0f * 1.5f; /* Datasheet page 27 */
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	4a3a      	ldr	r2, [pc, #232]	; (8004678 <BMI088_Init+0x230>)
 8004590:	631a      	str	r2, [r3, #48]	; 0x30
	
	/* Set accelerometer TX buffer for DMA */
	imu->accTxBuf[0] = BMI_ACC_DATA | 0x80;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	2292      	movs	r2, #146	; 0x92
 8004596:	749a      	strb	r2, [r3, #18]
	 *
	 * GYROSCOPE
	 *
	 */

	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_SET);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	6898      	ldr	r0, [r3, #8]
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	89db      	ldrh	r3, [r3, #14]
 80045a0:	2201      	movs	r2, #1
 80045a2:	4619      	mov	r1, r3
 80045a4:	f002 f8fc 	bl	80067a0 <HAL_GPIO_WritePin>

	/* Perform gyro soft reset */
	status += BMI088_WriteGyrRegister(imu, BMI_GYR_SOFTRESET, 0xB6);
 80045a8:	22b6      	movs	r2, #182	; 0xb6
 80045aa:	2114      	movs	r1, #20
 80045ac:	68f8      	ldr	r0, [r7, #12]
 80045ae:	f000 f91b 	bl	80047e8 <BMI088_WriteGyrRegister>
 80045b2:	4603      	mov	r3, r0
 80045b4:	461a      	mov	r2, r3
 80045b6:	7dfb      	ldrb	r3, [r7, #23]
 80045b8:	4413      	add	r3, r2
 80045ba:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(250);
 80045bc:	20fa      	movs	r0, #250	; 0xfa
 80045be:	f000 ffb9 	bl	8005534 <HAL_Delay>

	/* Check chip ID */
	status += BMI088_ReadGyrRegister(imu, BMI_GYR_CHIP_ID, &chipID);
 80045c2:	f107 0316 	add.w	r3, r7, #22
 80045c6:	461a      	mov	r2, r3
 80045c8:	2100      	movs	r1, #0
 80045ca:	68f8      	ldr	r0, [r7, #12]
 80045cc:	f000 f896 	bl	80046fc <BMI088_ReadGyrRegister>
 80045d0:	4603      	mov	r3, r0
 80045d2:	461a      	mov	r2, r3
 80045d4:	7dfb      	ldrb	r3, [r7, #23]
 80045d6:	4413      	add	r3, r2
 80045d8:	75fb      	strb	r3, [r7, #23]

		//return 0;

	}

	HAL_Delay(10);
 80045da:	200a      	movs	r0, #10
 80045dc:	f000 ffaa 	bl	8005534 <HAL_Delay>

	/* Configure gyroscope */
	status += BMI088_WriteGyrRegister(imu, BMI_GYR_RANGE, 0x01); /* +- 1000 deg/s */
 80045e0:	2201      	movs	r2, #1
 80045e2:	210f      	movs	r1, #15
 80045e4:	68f8      	ldr	r0, [r7, #12]
 80045e6:	f000 f8ff 	bl	80047e8 <BMI088_WriteGyrRegister>
 80045ea:	4603      	mov	r3, r0
 80045ec:	461a      	mov	r2, r3
 80045ee:	7dfb      	ldrb	r3, [r7, #23]
 80045f0:	4413      	add	r3, r2
 80045f2:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 80045f4:	200a      	movs	r0, #10
 80045f6:	f000 ff9d 	bl	8005534 <HAL_Delay>


	status += BMI088_WriteGyrRegister(imu, BMI_GYR_BANDWIDTH, 0x06); /* 0x07 ODR = 100 Hz, Filter bandwidth = 32 Hz, 0x06 BW = 64Hz ODR = 200 Hz, 0x04 ODR = 200Hz BW = 23Hz */
 80045fa:	2206      	movs	r2, #6
 80045fc:	2110      	movs	r1, #16
 80045fe:	68f8      	ldr	r0, [r7, #12]
 8004600:	f000 f8f2 	bl	80047e8 <BMI088_WriteGyrRegister>
 8004604:	4603      	mov	r3, r0
 8004606:	461a      	mov	r2, r3
 8004608:	7dfb      	ldrb	r3, [r7, #23]
 800460a:	4413      	add	r3, r2
 800460c:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 800460e:	200a      	movs	r0, #10
 8004610:	f000 ff90 	bl	8005534 <HAL_Delay>

	/* Enable gyroscope data ready interrupt */
	status += BMI088_WriteGyrRegister(imu, BMI_GYR_INT_CTRL, 0x80); /* New data interrupt enabled */
 8004614:	2280      	movs	r2, #128	; 0x80
 8004616:	2115      	movs	r1, #21
 8004618:	68f8      	ldr	r0, [r7, #12]
 800461a:	f000 f8e5 	bl	80047e8 <BMI088_WriteGyrRegister>
 800461e:	4603      	mov	r3, r0
 8004620:	461a      	mov	r2, r3
 8004622:	7dfb      	ldrb	r3, [r7, #23]
 8004624:	4413      	add	r3, r2
 8004626:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8004628:	200a      	movs	r0, #10
 800462a:	f000 ff83 	bl	8005534 <HAL_Delay>

	status += BMI088_WriteGyrRegister(imu, BMI_INT3_INT4_IO_CONF, 0x01); /* INT3 = push-pull, active high */
 800462e:	2201      	movs	r2, #1
 8004630:	2116      	movs	r1, #22
 8004632:	68f8      	ldr	r0, [r7, #12]
 8004634:	f000 f8d8 	bl	80047e8 <BMI088_WriteGyrRegister>
 8004638:	4603      	mov	r3, r0
 800463a:	461a      	mov	r2, r3
 800463c:	7dfb      	ldrb	r3, [r7, #23]
 800463e:	4413      	add	r3, r2
 8004640:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8004642:	200a      	movs	r0, #10
 8004644:	f000 ff76 	bl	8005534 <HAL_Delay>

	status += BMI088_WriteGyrRegister(imu, BMI_INT3_INT4_IO_MAP, 0x01); /* Data ready interrupt mapped to INT3 pin */
 8004648:	2201      	movs	r2, #1
 800464a:	2118      	movs	r1, #24
 800464c:	68f8      	ldr	r0, [r7, #12]
 800464e:	f000 f8cb 	bl	80047e8 <BMI088_WriteGyrRegister>
 8004652:	4603      	mov	r3, r0
 8004654:	461a      	mov	r2, r3
 8004656:	7dfb      	ldrb	r3, [r7, #23]
 8004658:	4413      	add	r3, r2
 800465a:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 800465c:	200a      	movs	r0, #10
 800465e:	f000 ff69 	bl	8005534 <HAL_Delay>

	/* Pre-compute gyroscope conversion constant (raw to rad/s) 0.017 °/s -> rad/s, 1000 the range, 32768 normalize the raw data*/
	imu->gyrConversion = 0.01745329251f * 1000.0f / 32768.0f; /* Datasheet page 39 */
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	4a05      	ldr	r2, [pc, #20]	; (800467c <BMI088_Init+0x234>)
 8004666:	635a      	str	r2, [r3, #52]	; 0x34
	
	/* Set gyroscope TX buffer for DMA */
	imu->gyrTxBuf[0] = BMI_GYR_DATA | 0x80;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	2282      	movs	r2, #130	; 0x82
 800466c:	769a      	strb	r2, [r3, #26]

	return status;
 800466e:	7dfb      	ldrb	r3, [r7, #23]

}
 8004670:	4618      	mov	r0, r3
 8004672:	3718      	adds	r7, #24
 8004674:	46bd      	mov	sp, r7
 8004676:	bd80      	pop	{r7, pc}
 8004678:	3a6b70a4 	.word	0x3a6b70a4
 800467c:	3a0ba058 	.word	0x3a0ba058

08004680 <BMI088_ReadAccRegister>:
 * LOW-LEVEL REGISTER FUNCTIONS
 *
 */

/* ACCELEROMETER READS ARE DIFFERENT TO GYROSCOPE READS. SEND ONE BYTE ADDRESS, READ ONE DUMMY BYTE, READ TRUE DATA !!! */
uint8_t BMI088_ReadAccRegister(BMI088 *imu, uint8_t regAddr, uint8_t *data) {
 8004680:	b580      	push	{r7, lr}
 8004682:	b088      	sub	sp, #32
 8004684:	af02      	add	r7, sp, #8
 8004686:	60f8      	str	r0, [r7, #12]
 8004688:	460b      	mov	r3, r1
 800468a:	607a      	str	r2, [r7, #4]
 800468c:	72fb      	strb	r3, [r7, #11]

	uint8_t txBuf[3] = {regAddr | 0x80, 0x00, 0x00};
 800468e:	7afb      	ldrb	r3, [r7, #11]
 8004690:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004694:	b2db      	uxtb	r3, r3
 8004696:	753b      	strb	r3, [r7, #20]
 8004698:	2300      	movs	r3, #0
 800469a:	757b      	strb	r3, [r7, #21]
 800469c:	2300      	movs	r3, #0
 800469e:	75bb      	strb	r3, [r7, #22]
	uint8_t rxBuf[3];

	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_RESET);
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	6858      	ldr	r0, [r3, #4]
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	899b      	ldrh	r3, [r3, #12]
 80046a8:	2200      	movs	r2, #0
 80046aa:	4619      	mov	r1, r3
 80046ac:	f002 f878 	bl	80067a0 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_TransmitReceive(imu->spiHandle, txBuf, rxBuf, 3, HAL_MAX_DELAY) == HAL_OK);
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	6818      	ldr	r0, [r3, #0]
 80046b4:	f107 0210 	add.w	r2, r7, #16
 80046b8:	f107 0114 	add.w	r1, r7, #20
 80046bc:	f04f 33ff 	mov.w	r3, #4294967295
 80046c0:	9300      	str	r3, [sp, #0]
 80046c2:	2303      	movs	r3, #3
 80046c4:	f003 fed5 	bl	8008472 <HAL_SPI_TransmitReceive>
 80046c8:	4603      	mov	r3, r0
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	bf0c      	ite	eq
 80046ce:	2301      	moveq	r3, #1
 80046d0:	2300      	movne	r3, #0
 80046d2:	b2db      	uxtb	r3, r3
 80046d4:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_SET);
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	6858      	ldr	r0, [r3, #4]
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	899b      	ldrh	r3, [r3, #12]
 80046de:	2201      	movs	r2, #1
 80046e0:	4619      	mov	r1, r3
 80046e2:	f002 f85d 	bl	80067a0 <HAL_GPIO_WritePin>

	if (status == 1) {
 80046e6:	7dfb      	ldrb	r3, [r7, #23]
 80046e8:	2b01      	cmp	r3, #1
 80046ea:	d102      	bne.n	80046f2 <BMI088_ReadAccRegister+0x72>

		*data = rxBuf[2];
 80046ec:	7cba      	ldrb	r2, [r7, #18]
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	701a      	strb	r2, [r3, #0]

	}

	return status;
 80046f2:	7dfb      	ldrb	r3, [r7, #23]

}
 80046f4:	4618      	mov	r0, r3
 80046f6:	3718      	adds	r7, #24
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bd80      	pop	{r7, pc}

080046fc <BMI088_ReadGyrRegister>:

uint8_t BMI088_ReadGyrRegister(BMI088 *imu, uint8_t regAddr, uint8_t *data) {
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b088      	sub	sp, #32
 8004700:	af02      	add	r7, sp, #8
 8004702:	60f8      	str	r0, [r7, #12]
 8004704:	460b      	mov	r3, r1
 8004706:	607a      	str	r2, [r7, #4]
 8004708:	72fb      	strb	r3, [r7, #11]

	uint8_t txBuf[2] = {regAddr | 0x80, 0x00}; //0x80
 800470a:	7afb      	ldrb	r3, [r7, #11]
 800470c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004710:	b2db      	uxtb	r3, r3
 8004712:	753b      	strb	r3, [r7, #20]
 8004714:	2300      	movs	r3, #0
 8004716:	757b      	strb	r3, [r7, #21]
	uint8_t rxBuf[2];

	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_RESET);
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	6898      	ldr	r0, [r3, #8]
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	89db      	ldrh	r3, [r3, #14]
 8004720:	2200      	movs	r2, #0
 8004722:	4619      	mov	r1, r3
 8004724:	f002 f83c 	bl	80067a0 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_TransmitReceive(imu->spiHandle, txBuf, rxBuf, 2, HAL_MAX_DELAY) == HAL_OK);
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	6818      	ldr	r0, [r3, #0]
 800472c:	f107 0210 	add.w	r2, r7, #16
 8004730:	f107 0114 	add.w	r1, r7, #20
 8004734:	f04f 33ff 	mov.w	r3, #4294967295
 8004738:	9300      	str	r3, [sp, #0]
 800473a:	2302      	movs	r3, #2
 800473c:	f003 fe99 	bl	8008472 <HAL_SPI_TransmitReceive>
 8004740:	4603      	mov	r3, r0
 8004742:	2b00      	cmp	r3, #0
 8004744:	bf0c      	ite	eq
 8004746:	2301      	moveq	r3, #1
 8004748:	2300      	movne	r3, #0
 800474a:	b2db      	uxtb	r3, r3
 800474c:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_SET);
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	6898      	ldr	r0, [r3, #8]
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	89db      	ldrh	r3, [r3, #14]
 8004756:	2201      	movs	r2, #1
 8004758:	4619      	mov	r1, r3
 800475a:	f002 f821 	bl	80067a0 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_RESET);
	uint8_t status = (HAL_SPI_TransmitReceive(imu->spiHandle, txBuf, rxBuf, 3, HAL_MAX_DELAY) == HAL_OK);
	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_SET);*/

	if (status == 1) {
 800475e:	7dfb      	ldrb	r3, [r7, #23]
 8004760:	2b01      	cmp	r3, #1
 8004762:	d102      	bne.n	800476a <BMI088_ReadGyrRegister+0x6e>

		*data = rxBuf[1];
 8004764:	7c7a      	ldrb	r2, [r7, #17]
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	701a      	strb	r2, [r3, #0]

	}

	return status;
 800476a:	7dfb      	ldrb	r3, [r7, #23]

}
 800476c:	4618      	mov	r0, r3
 800476e:	3718      	adds	r7, #24
 8004770:	46bd      	mov	sp, r7
 8004772:	bd80      	pop	{r7, pc}

08004774 <BMI088_WriteAccRegister>:

uint8_t BMI088_WriteAccRegister(BMI088 *imu, uint8_t regAddr, uint8_t data) {
 8004774:	b580      	push	{r7, lr}
 8004776:	b084      	sub	sp, #16
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
 800477c:	460b      	mov	r3, r1
 800477e:	70fb      	strb	r3, [r7, #3]
 8004780:	4613      	mov	r3, r2
 8004782:	70bb      	strb	r3, [r7, #2]

	uint8_t txBuf[2] = {regAddr, data};
 8004784:	78fb      	ldrb	r3, [r7, #3]
 8004786:	733b      	strb	r3, [r7, #12]
 8004788:	78bb      	ldrb	r3, [r7, #2]
 800478a:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_RESET);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6858      	ldr	r0, [r3, #4]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	899b      	ldrh	r3, [r3, #12]
 8004794:	2200      	movs	r2, #0
 8004796:	4619      	mov	r1, r3
 8004798:	f002 f802 	bl	80067a0 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_Transmit(imu->spiHandle, txBuf, 2, HAL_MAX_DELAY) == HAL_OK);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6818      	ldr	r0, [r3, #0]
 80047a0:	f107 010c 	add.w	r1, r7, #12
 80047a4:	f04f 33ff 	mov.w	r3, #4294967295
 80047a8:	2202      	movs	r2, #2
 80047aa:	f003 fd26 	bl	80081fa <HAL_SPI_Transmit>
 80047ae:	4603      	mov	r3, r0
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	bf0c      	ite	eq
 80047b4:	2301      	moveq	r3, #1
 80047b6:	2300      	movne	r3, #0
 80047b8:	b2db      	uxtb	r3, r3
 80047ba:	73fb      	strb	r3, [r7, #15]
	while(HAL_SPI_GetState(imu->spiHandle) != HAL_SPI_STATE_READY);
 80047bc:	bf00      	nop
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4618      	mov	r0, r3
 80047c4:	f003 fff7 	bl	80087b6 <HAL_SPI_GetState>
 80047c8:	4603      	mov	r3, r0
 80047ca:	2b01      	cmp	r3, #1
 80047cc:	d1f7      	bne.n	80047be <BMI088_WriteAccRegister+0x4a>
	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_SET);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6858      	ldr	r0, [r3, #4]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	899b      	ldrh	r3, [r3, #12]
 80047d6:	2201      	movs	r2, #1
 80047d8:	4619      	mov	r1, r3
 80047da:	f001 ffe1 	bl	80067a0 <HAL_GPIO_WritePin>

	return status;
 80047de:	7bfb      	ldrb	r3, [r7, #15]

}
 80047e0:	4618      	mov	r0, r3
 80047e2:	3710      	adds	r7, #16
 80047e4:	46bd      	mov	sp, r7
 80047e6:	bd80      	pop	{r7, pc}

080047e8 <BMI088_WriteGyrRegister>:

uint8_t BMI088_WriteGyrRegister(BMI088 *imu, uint8_t regAddr, uint8_t data) {
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b084      	sub	sp, #16
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
 80047f0:	460b      	mov	r3, r1
 80047f2:	70fb      	strb	r3, [r7, #3]
 80047f4:	4613      	mov	r3, r2
 80047f6:	70bb      	strb	r3, [r7, #2]

	uint8_t txBuf[2] = {regAddr, data};
 80047f8:	78fb      	ldrb	r3, [r7, #3]
 80047fa:	733b      	strb	r3, [r7, #12]
 80047fc:	78bb      	ldrb	r3, [r7, #2]
 80047fe:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_RESET);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6898      	ldr	r0, [r3, #8]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	89db      	ldrh	r3, [r3, #14]
 8004808:	2200      	movs	r2, #0
 800480a:	4619      	mov	r1, r3
 800480c:	f001 ffc8 	bl	80067a0 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_Transmit(imu->spiHandle, txBuf, 2, HAL_MAX_DELAY) == HAL_OK);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6818      	ldr	r0, [r3, #0]
 8004814:	f107 010c 	add.w	r1, r7, #12
 8004818:	f04f 33ff 	mov.w	r3, #4294967295
 800481c:	2202      	movs	r2, #2
 800481e:	f003 fcec 	bl	80081fa <HAL_SPI_Transmit>
 8004822:	4603      	mov	r3, r0
 8004824:	2b00      	cmp	r3, #0
 8004826:	bf0c      	ite	eq
 8004828:	2301      	moveq	r3, #1
 800482a:	2300      	movne	r3, #0
 800482c:	b2db      	uxtb	r3, r3
 800482e:	73fb      	strb	r3, [r7, #15]
	while(HAL_SPI_GetState(imu->spiHandle) != HAL_SPI_STATE_READY);
 8004830:	bf00      	nop
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4618      	mov	r0, r3
 8004838:	f003 ffbd 	bl	80087b6 <HAL_SPI_GetState>
 800483c:	4603      	mov	r3, r0
 800483e:	2b01      	cmp	r3, #1
 8004840:	d1f7      	bne.n	8004832 <BMI088_WriteGyrRegister+0x4a>
	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_SET);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6898      	ldr	r0, [r3, #8]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	89db      	ldrh	r3, [r3, #14]
 800484a:	2201      	movs	r2, #1
 800484c:	4619      	mov	r1, r3
 800484e:	f001 ffa7 	bl	80067a0 <HAL_GPIO_WritePin>

	return status;
 8004852:	7bfb      	ldrb	r3, [r7, #15]

}
 8004854:	4618      	mov	r0, r3
 8004856:	3710      	adds	r7, #16
 8004858:	46bd      	mov	sp, r7
 800485a:	bd80      	pop	{r7, pc}

0800485c <BMI088_ReadAccelerometer>:
/*
 *
 * POLLING
 *
 */
uint8_t BMI088_ReadAccelerometer(BMI088 *imu) {
 800485c:	b580      	push	{r7, lr}
 800485e:	b08a      	sub	sp, #40	; 0x28
 8004860:	af02      	add	r7, sp, #8
 8004862:	6078      	str	r0, [r7, #4]

	/* Read raw accelerometer data */
	uint8_t txBuf[8] = {(BMI_ACC_DATA | 0x80), 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}; /* Register addr, 1 byte dummy, 6 bytes data */
 8004864:	4a36      	ldr	r2, [pc, #216]	; (8004940 <BMI088_ReadAccelerometer+0xe4>)
 8004866:	f107 0310 	add.w	r3, r7, #16
 800486a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800486e:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t rxBuf[8];

	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_RESET);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6858      	ldr	r0, [r3, #4]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	899b      	ldrh	r3, [r3, #12]
 800487a:	2200      	movs	r2, #0
 800487c:	4619      	mov	r1, r3
 800487e:	f001 ff8f 	bl	80067a0 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_TransmitReceive(imu->spiHandle, txBuf, rxBuf, 8, HAL_MAX_DELAY) == HAL_OK);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6818      	ldr	r0, [r3, #0]
 8004886:	f107 0208 	add.w	r2, r7, #8
 800488a:	f107 0110 	add.w	r1, r7, #16
 800488e:	f04f 33ff 	mov.w	r3, #4294967295
 8004892:	9300      	str	r3, [sp, #0]
 8004894:	2308      	movs	r3, #8
 8004896:	f003 fdec 	bl	8008472 <HAL_SPI_TransmitReceive>
 800489a:	4603      	mov	r3, r0
 800489c:	2b00      	cmp	r3, #0
 800489e:	bf0c      	ite	eq
 80048a0:	2301      	moveq	r3, #1
 80048a2:	2300      	movne	r3, #0
 80048a4:	b2db      	uxtb	r3, r3
 80048a6:	77fb      	strb	r3, [r7, #31]
	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_SET);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6858      	ldr	r0, [r3, #4]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	899b      	ldrh	r3, [r3, #12]
 80048b0:	2201      	movs	r2, #1
 80048b2:	4619      	mov	r1, r3
 80048b4:	f001 ff74 	bl	80067a0 <HAL_GPIO_WritePin>

	/* Form signed 16-bit integers */
	int16_t accX = (int16_t) ((rxBuf[3] << 8) | rxBuf[2]);
 80048b8:	7afb      	ldrb	r3, [r7, #11]
 80048ba:	021b      	lsls	r3, r3, #8
 80048bc:	b21a      	sxth	r2, r3
 80048be:	7abb      	ldrb	r3, [r7, #10]
 80048c0:	b21b      	sxth	r3, r3
 80048c2:	4313      	orrs	r3, r2
 80048c4:	83bb      	strh	r3, [r7, #28]
	int16_t accY = (int16_t) ((rxBuf[5] << 8) | rxBuf[4]);
 80048c6:	7b7b      	ldrb	r3, [r7, #13]
 80048c8:	021b      	lsls	r3, r3, #8
 80048ca:	b21a      	sxth	r2, r3
 80048cc:	7b3b      	ldrb	r3, [r7, #12]
 80048ce:	b21b      	sxth	r3, r3
 80048d0:	4313      	orrs	r3, r2
 80048d2:	837b      	strh	r3, [r7, #26]
	int16_t accZ = (int16_t) ((rxBuf[7] << 8) | rxBuf[6]);
 80048d4:	7bfb      	ldrb	r3, [r7, #15]
 80048d6:	021b      	lsls	r3, r3, #8
 80048d8:	b21a      	sxth	r2, r3
 80048da:	7bbb      	ldrb	r3, [r7, #14]
 80048dc:	b21b      	sxth	r3, r3
 80048de:	4313      	orrs	r3, r2
 80048e0:	833b      	strh	r3, [r7, #24]

	/* Convert to m/s^2 */
	imu->acc_mps2[0] = imu->accConversion * accX;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 80048e8:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80048ec:	ee07 3a90 	vmov	s15, r3
 80048f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80048f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
	imu->acc_mps2[1] = imu->accConversion * accY;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8004904:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8004908:	ee07 3a90 	vmov	s15, r3
 800490c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004910:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
	imu->acc_mps2[2] = imu->accConversion * accZ;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8004920:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8004924:	ee07 3a90 	vmov	s15, r3
 8004928:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800492c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40

	return status;
 8004936:	7ffb      	ldrb	r3, [r7, #31]

}
 8004938:	4618      	mov	r0, r3
 800493a:	3720      	adds	r7, #32
 800493c:	46bd      	mov	sp, r7
 800493e:	bd80      	pop	{r7, pc}
 8004940:	08014398 	.word	0x08014398

08004944 <BMI088_ReadGyroscope>:

uint8_t BMI088_ReadGyroscope(BMI088 *imu) {
 8004944:	b580      	push	{r7, lr}
 8004946:	b08a      	sub	sp, #40	; 0x28
 8004948:	af02      	add	r7, sp, #8
 800494a:	6078      	str	r0, [r7, #4]

	/* Read raw gyroscope data */
	uint8_t txBuf[7] = {(BMI_GYR_DATA | 0x80), 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}; /* Register addr, 6 bytes data */
 800494c:	4a38      	ldr	r2, [pc, #224]	; (8004a30 <BMI088_ReadGyroscope+0xec>)
 800494e:	f107 0310 	add.w	r3, r7, #16
 8004952:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004956:	6018      	str	r0, [r3, #0]
 8004958:	3304      	adds	r3, #4
 800495a:	8019      	strh	r1, [r3, #0]
 800495c:	3302      	adds	r3, #2
 800495e:	0c0a      	lsrs	r2, r1, #16
 8004960:	701a      	strb	r2, [r3, #0]
	uint8_t rxBuf[7];

	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_RESET);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6898      	ldr	r0, [r3, #8]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	89db      	ldrh	r3, [r3, #14]
 800496a:	2200      	movs	r2, #0
 800496c:	4619      	mov	r1, r3
 800496e:	f001 ff17 	bl	80067a0 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_TransmitReceive(imu->spiHandle, txBuf, rxBuf, 7, HAL_MAX_DELAY) == HAL_OK);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6818      	ldr	r0, [r3, #0]
 8004976:	f107 0208 	add.w	r2, r7, #8
 800497a:	f107 0110 	add.w	r1, r7, #16
 800497e:	f04f 33ff 	mov.w	r3, #4294967295
 8004982:	9300      	str	r3, [sp, #0]
 8004984:	2307      	movs	r3, #7
 8004986:	f003 fd74 	bl	8008472 <HAL_SPI_TransmitReceive>
 800498a:	4603      	mov	r3, r0
 800498c:	2b00      	cmp	r3, #0
 800498e:	bf0c      	ite	eq
 8004990:	2301      	moveq	r3, #1
 8004992:	2300      	movne	r3, #0
 8004994:	b2db      	uxtb	r3, r3
 8004996:	77fb      	strb	r3, [r7, #31]
	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_SET);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6898      	ldr	r0, [r3, #8]
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	89db      	ldrh	r3, [r3, #14]
 80049a0:	2201      	movs	r2, #1
 80049a2:	4619      	mov	r1, r3
 80049a4:	f001 fefc 	bl	80067a0 <HAL_GPIO_WritePin>

	/* Form signed 16-bit integers */
	int16_t gyrX = (int16_t) ((rxBuf[2] << 8) | rxBuf[1]);
 80049a8:	7abb      	ldrb	r3, [r7, #10]
 80049aa:	021b      	lsls	r3, r3, #8
 80049ac:	b21a      	sxth	r2, r3
 80049ae:	7a7b      	ldrb	r3, [r7, #9]
 80049b0:	b21b      	sxth	r3, r3
 80049b2:	4313      	orrs	r3, r2
 80049b4:	83bb      	strh	r3, [r7, #28]
	int16_t gyrY = (int16_t) ((rxBuf[4] << 8) | rxBuf[3]);
 80049b6:	7b3b      	ldrb	r3, [r7, #12]
 80049b8:	021b      	lsls	r3, r3, #8
 80049ba:	b21a      	sxth	r2, r3
 80049bc:	7afb      	ldrb	r3, [r7, #11]
 80049be:	b21b      	sxth	r3, r3
 80049c0:	4313      	orrs	r3, r2
 80049c2:	837b      	strh	r3, [r7, #26]
	int16_t gyrZ = (int16_t) ((rxBuf[6] << 8) | rxBuf[5]);
 80049c4:	7bbb      	ldrb	r3, [r7, #14]
 80049c6:	021b      	lsls	r3, r3, #8
 80049c8:	b21a      	sxth	r2, r3
 80049ca:	7b7b      	ldrb	r3, [r7, #13]
 80049cc:	b21b      	sxth	r3, r3
 80049ce:	4313      	orrs	r3, r2
 80049d0:	833b      	strh	r3, [r7, #24]

	/* Convert to rad/s */
	imu->gyr_rps[0] = imu->gyrConversion * gyrX;//-0.0000661263;//-0.000220318;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 80049d8:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80049dc:	ee07 3a90 	vmov	s15, r3
 80049e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80049e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
	imu->gyr_rps[1] = imu->gyrConversion * gyrY;//-0.000491353;//-0.001161367;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 80049f4:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80049f8:	ee07 3a90 	vmov	s15, r3
 80049fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004a00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
	imu->gyr_rps[2] = imu->gyrConversion * gyrZ;//-0.002349043;//-0.002582031;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8004a10:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8004a14:	ee07 3a90 	vmov	s15, r3
 8004a18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004a1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c

	//own code line
	//if(status == 1) HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);
	return status;
 8004a26:	7ffb      	ldrb	r3, [r7, #31]

}
 8004a28:	4618      	mov	r0, r3
 8004a2a:	3720      	adds	r7, #32
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bd80      	pop	{r7, pc}
 8004a30:	080143a0 	.word	0x080143a0

08004a34 <BMP388_Init>:
 *
 *  @return Status of execution
 *  @retval = HAL_OK  		-> Success
 *  @retval != HAL_OK	  	-> Failure Info
 */
HAL_StatusTypeDef BMP388_Init(BMP388_HandleTypeDef *bmp){
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b084      	sub	sp, #16
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef rslt;
	uint8_t chip_id;

	// Read CHIP_ID byte
	rslt = BMP388_ReadBytes(bmp, CHIP_ID, &chip_id, 1);
 8004a3c:	f107 020e 	add.w	r2, r7, #14
 8004a40:	2301      	movs	r3, #1
 8004a42:	2100      	movs	r1, #0
 8004a44:	6878      	ldr	r0, [r7, #4]
 8004a46:	f000 fc08 	bl	800525a <BMP388_ReadBytes>
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	73fb      	strb	r3, [r7, #15]
	if(rslt == HAL_OK && chip_id == BMP388_CHIP_ID){
 8004a4e:	7bfb      	ldrb	r3, [r7, #15]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d12a      	bne.n	8004aaa <BMP388_Init+0x76>
 8004a54:	7bbb      	ldrb	r3, [r7, #14]
 8004a56:	2b50      	cmp	r3, #80	; 0x50
 8004a58:	d127      	bne.n	8004aaa <BMP388_Init+0x76>
		// using softreset command
		rslt = BMP388_SoftReset(bmp);
 8004a5a:	6878      	ldr	r0, [r7, #4]
 8004a5c:	f000 f962 	bl	8004d24 <BMP388_SoftReset>
 8004a60:	4603      	mov	r3, r0
 8004a62:	73fb      	strb	r3, [r7, #15]
		if(rslt == HAL_OK){
 8004a64:	7bfb      	ldrb	r3, [r7, #15]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d11d      	bne.n	8004aa6 <BMP388_Init+0x72>
			// get calibration data
			rslt = BMP388_GetCalibData(bmp);
 8004a6a:	6878      	ldr	r0, [r7, #4]
 8004a6c:	f000 f99a 	bl	8004da4 <BMP388_GetCalibData>
 8004a70:	4603      	mov	r3, r0
 8004a72:	73fb      	strb	r3, [r7, #15]
		if(rslt == HAL_OK){
 8004a74:	bf00      	nop
		}
	}
	else{
		return rslt;
	}
	uint8_t pwr_ctrl = BMP388_PWR_CTRL_PRESS_ON | BMP388_PWR_CTRL_TEMP_ON | BMP388_PWR_CTRL_MODE_NORMAL;
 8004a76:	2333      	movs	r3, #51	; 0x33
 8004a78:	737b      	strb	r3, [r7, #13]

	uint8_t oversampling = bmp->_oversampling;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	791b      	ldrb	r3, [r3, #4]
 8004a7e:	733b      	strb	r3, [r7, #12]
	uint8_t odr = bmp->_odr;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	799b      	ldrb	r3, [r3, #6]
 8004a84:	72fb      	strb	r3, [r7, #11]
	uint8_t filtercoeff = bmp->_filtercoeff;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	795b      	ldrb	r3, [r3, #5]
 8004a8a:	72bb      	strb	r3, [r7, #10]



	// Set OSR register
	rslt = BMP388_WriteBytes(bmp, OSR, &oversampling, 1);
 8004a8c:	f107 020c 	add.w	r2, r7, #12
 8004a90:	2301      	movs	r3, #1
 8004a92:	211c      	movs	r1, #28
 8004a94:	6878      	ldr	r0, [r7, #4]
 8004a96:	f000 fbfe 	bl	8005296 <BMP388_WriteBytes>
 8004a9a:	4603      	mov	r3, r0
 8004a9c:	73fb      	strb	r3, [r7, #15]
	if(rslt != HAL_OK){
 8004a9e:	7bfb      	ldrb	r3, [r7, #15]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d006      	beq.n	8004ab2 <BMP388_Init+0x7e>
 8004aa4:	e003      	b.n	8004aae <BMP388_Init+0x7a>
			return rslt;
 8004aa6:	7bfb      	ldrb	r3, [r7, #15]
 8004aa8:	e03b      	b.n	8004b22 <BMP388_Init+0xee>
		return rslt;
 8004aaa:	7bfb      	ldrb	r3, [r7, #15]
 8004aac:	e039      	b.n	8004b22 <BMP388_Init+0xee>
		return rslt;
 8004aae:	7bfb      	ldrb	r3, [r7, #15]
 8004ab0:	e037      	b.n	8004b22 <BMP388_Init+0xee>
	}
	// Set ODR register
	rslt = BMP388_WriteBytes(bmp, ODR, &odr, 1);
 8004ab2:	f107 020b 	add.w	r2, r7, #11
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	211d      	movs	r1, #29
 8004aba:	6878      	ldr	r0, [r7, #4]
 8004abc:	f000 fbeb 	bl	8005296 <BMP388_WriteBytes>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	73fb      	strb	r3, [r7, #15]
	if(rslt != HAL_OK){
 8004ac4:	7bfb      	ldrb	r3, [r7, #15]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d001      	beq.n	8004ace <BMP388_Init+0x9a>
		return rslt;
 8004aca:	7bfb      	ldrb	r3, [r7, #15]
 8004acc:	e029      	b.n	8004b22 <BMP388_Init+0xee>
	}
	// Set CONFIG register
	rslt = BMP388_WriteBytes(bmp, CONFIG, &filtercoeff, 1);
 8004ace:	f107 020a 	add.w	r2, r7, #10
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	211f      	movs	r1, #31
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	f000 fbdd 	bl	8005296 <BMP388_WriteBytes>
 8004adc:	4603      	mov	r3, r0
 8004ade:	73fb      	strb	r3, [r7, #15]
	if(rslt != HAL_OK){
 8004ae0:	7bfb      	ldrb	r3, [r7, #15]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d001      	beq.n	8004aea <BMP388_Init+0xb6>
		return rslt;
 8004ae6:	7bfb      	ldrb	r3, [r7, #15]
 8004ae8:	e01b      	b.n	8004b22 <BMP388_Init+0xee>
	}
	// Set PWR_CTRL register
	rslt = BMP388_WriteBytes(bmp, PWR_CTRL, &pwr_ctrl, 1);
 8004aea:	f107 020d 	add.w	r2, r7, #13
 8004aee:	2301      	movs	r3, #1
 8004af0:	211b      	movs	r1, #27
 8004af2:	6878      	ldr	r0, [r7, #4]
 8004af4:	f000 fbcf 	bl	8005296 <BMP388_WriteBytes>
 8004af8:	4603      	mov	r3, r0
 8004afa:	73fb      	strb	r3, [r7, #15]
	if(rslt != HAL_OK){
 8004afc:	7bfb      	ldrb	r3, [r7, #15]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d001      	beq.n	8004b06 <BMP388_Init+0xd2>
		return rslt;
 8004b02:	7bfb      	ldrb	r3, [r7, #15]
 8004b04:	e00d      	b.n	8004b22 <BMP388_Init+0xee>
	}

	rslt = BMP388_WriteBytes(bmp, INT_CTRL, 0x40, 1);
 8004b06:	2301      	movs	r3, #1
 8004b08:	2240      	movs	r2, #64	; 0x40
 8004b0a:	2119      	movs	r1, #25
 8004b0c:	6878      	ldr	r0, [r7, #4]
 8004b0e:	f000 fbc2 	bl	8005296 <BMP388_WriteBytes>
 8004b12:	4603      	mov	r3, r0
 8004b14:	73fb      	strb	r3, [r7, #15]
	if(rslt != HAL_OK){
 8004b16:	7bfb      	ldrb	r3, [r7, #15]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d001      	beq.n	8004b20 <BMP388_Init+0xec>
		return rslt;
 8004b1c:	7bfb      	ldrb	r3, [r7, #15]
 8004b1e:	e000      	b.n	8004b22 <BMP388_Init+0xee>
	}

	return rslt;
 8004b20:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	3710      	adds	r7, #16
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bd80      	pop	{r7, pc}

08004b2a <BMP388_SetTempOS>:
 *
 *  @return Status of execution
 *  @retval = HAL_OK  		-> Success
 *  @retval != HAL_OK	  	-> Wrong oversampling mode
 */
HAL_StatusTypeDef BMP388_SetTempOS(BMP388_HandleTypeDef *bmp, uint8_t oversample){
 8004b2a:	b480      	push	{r7}
 8004b2c:	b083      	sub	sp, #12
 8004b2e:	af00      	add	r7, sp, #0
 8004b30:	6078      	str	r0, [r7, #4]
 8004b32:	460b      	mov	r3, r1
 8004b34:	70fb      	strb	r3, [r7, #3]
	if(oversample > BMP388_OVERSAMPLING_32X){
 8004b36:	78fb      	ldrb	r3, [r7, #3]
 8004b38:	2b05      	cmp	r3, #5
 8004b3a:	d901      	bls.n	8004b40 <BMP388_SetTempOS+0x16>
		return HAL_ERROR;
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	e00e      	b.n	8004b5e <BMP388_SetTempOS+0x34>
	}
	bmp->_oversampling = (bmp->_oversampling & 0b11000111) | (oversample << 3); //& clear the temp OS bits and the | set the temp OS reg
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	791b      	ldrb	r3, [r3, #4]
 8004b44:	b25b      	sxtb	r3, r3
 8004b46:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8004b4a:	b25a      	sxtb	r2, r3
 8004b4c:	78fb      	ldrb	r3, [r7, #3]
 8004b4e:	00db      	lsls	r3, r3, #3
 8004b50:	b25b      	sxtb	r3, r3
 8004b52:	4313      	orrs	r3, r2
 8004b54:	b25b      	sxtb	r3, r3
 8004b56:	b2da      	uxtb	r2, r3
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	711a      	strb	r2, [r3, #4]
	return HAL_OK;
 8004b5c:	2300      	movs	r3, #0
}
 8004b5e:	4618      	mov	r0, r3
 8004b60:	370c      	adds	r7, #12
 8004b62:	46bd      	mov	sp, r7
 8004b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b68:	4770      	bx	lr

08004b6a <BMP388_SetPressOS>:
 *
 *  @return Status of execution
 *  @retval = HAL_OK  		-> Success
 *  @retval != HAL_OK	  	-> Wrong oversampling mode
 */
HAL_StatusTypeDef BMP388_SetPressOS(BMP388_HandleTypeDef *bmp, uint8_t oversample){
 8004b6a:	b480      	push	{r7}
 8004b6c:	b083      	sub	sp, #12
 8004b6e:	af00      	add	r7, sp, #0
 8004b70:	6078      	str	r0, [r7, #4]
 8004b72:	460b      	mov	r3, r1
 8004b74:	70fb      	strb	r3, [r7, #3]
	if(oversample > BMP388_OVERSAMPLING_32X){
 8004b76:	78fb      	ldrb	r3, [r7, #3]
 8004b78:	2b05      	cmp	r3, #5
 8004b7a:	d901      	bls.n	8004b80 <BMP388_SetPressOS+0x16>
		return HAL_ERROR;
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	e00d      	b.n	8004b9c <BMP388_SetPressOS+0x32>
	}
	bmp->_oversampling = (bmp->_oversampling & 0b11111000) | oversample; //& clear the press OS bits and the | set the press OS reg
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	791b      	ldrb	r3, [r3, #4]
 8004b84:	b25b      	sxtb	r3, r3
 8004b86:	f023 0307 	bic.w	r3, r3, #7
 8004b8a:	b25a      	sxtb	r2, r3
 8004b8c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004b90:	4313      	orrs	r3, r2
 8004b92:	b25b      	sxtb	r3, r3
 8004b94:	b2da      	uxtb	r2, r3
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	711a      	strb	r2, [r3, #4]
	return HAL_OK;
 8004b9a:	2300      	movs	r3, #0
}
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	370c      	adds	r7, #12
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba6:	4770      	bx	lr

08004ba8 <BMP388_SetIIRFilterCoeff>:
 *
 *  @return Status of execution
 *  @retval = HAL_OK  		-> Success
 *  @retval != HAL_OK	  	-> Wrong filter coefficient
 */
HAL_StatusTypeDef BMP388_SetIIRFilterCoeff(BMP388_HandleTypeDef *bmp, uint8_t filtercoeff){
 8004ba8:	b480      	push	{r7}
 8004baa:	b083      	sub	sp, #12
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
 8004bb0:	460b      	mov	r3, r1
 8004bb2:	70fb      	strb	r3, [r7, #3]
	if(filtercoeff > BMP3_IIR_FILTER_COEFF_127){
 8004bb4:	78fb      	ldrb	r3, [r7, #3]
 8004bb6:	2b07      	cmp	r3, #7
 8004bb8:	d901      	bls.n	8004bbe <BMP388_SetIIRFilterCoeff+0x16>
		return HAL_ERROR;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	e005      	b.n	8004bca <BMP388_SetIIRFilterCoeff+0x22>
	}
	bmp->_filtercoeff = filtercoeff << 1;
 8004bbe:	78fb      	ldrb	r3, [r7, #3]
 8004bc0:	005b      	lsls	r3, r3, #1
 8004bc2:	b2da      	uxtb	r2, r3
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	715a      	strb	r2, [r3, #5]
	return HAL_OK;
 8004bc8:	2300      	movs	r3, #0
}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	370c      	adds	r7, #12
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd4:	4770      	bx	lr

08004bd6 <BMP388_SetOutputDataRate>:
 *
 *  @return Status of execution
 *  @retval = HAL_OK  		-> Success
 *  @retval != HAL_OK	  	-> Wrong oversampling mode
 */
HAL_StatusTypeDef BMP388_SetOutputDataRate(BMP388_HandleTypeDef *bmp, uint8_t odr){
 8004bd6:	b480      	push	{r7}
 8004bd8:	b083      	sub	sp, #12
 8004bda:	af00      	add	r7, sp, #0
 8004bdc:	6078      	str	r0, [r7, #4]
 8004bde:	460b      	mov	r3, r1
 8004be0:	70fb      	strb	r3, [r7, #3]
	if(odr > BMP3_ODR_0_001_HZ){
 8004be2:	78fb      	ldrb	r3, [r7, #3]
 8004be4:	2b11      	cmp	r3, #17
 8004be6:	d901      	bls.n	8004bec <BMP388_SetOutputDataRate+0x16>
		return HAL_ERROR;
 8004be8:	2301      	movs	r3, #1
 8004bea:	e003      	b.n	8004bf4 <BMP388_SetOutputDataRate+0x1e>
	}
	bmp->_odr = odr;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	78fa      	ldrb	r2, [r7, #3]
 8004bf0:	719a      	strb	r2, [r3, #6]
	return HAL_OK;
 8004bf2:	2300      	movs	r3, #0
}
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	370c      	adds	r7, #12
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfe:	4770      	bx	lr

08004c00 <BMP388_ReadRawPressTempTime>:
 *
 *  @return Status of execution
 *  @retval = HAL_OK  		-> Success
 *  @retval != HAL_OK	  	-> Failure Info
 */
HAL_StatusTypeDef BMP388_ReadRawPressTempTime(BMP388_HandleTypeDef *bmp, uint32_t *raw_pressure, uint32_t *raw_temperature, uint32_t *time){
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b088      	sub	sp, #32
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	60f8      	str	r0, [r7, #12]
 8004c08:	60b9      	str	r1, [r7, #8]
 8004c0a:	607a      	str	r2, [r7, #4]
 8004c0c:	603b      	str	r3, [r7, #0]
	}*/

	uint8_t raw_data[11]; //registers in order 0x04 - 0x06 press data, 0x07 - 0x09 temp data, 0x0A and 0x0B reserved, 0x0C - 0x0E time data -> 11 byte
	// Get raw data for pressure and temperature
	//rslt = BMP388_ReadBytes(bmp, DATA_0, raw_data, 11);
	rslt = BMP388_ReadBytes(bmp, DATA_0, raw_data, 6);
 8004c0e:	f107 0214 	add.w	r2, r7, #20
 8004c12:	2306      	movs	r3, #6
 8004c14:	2104      	movs	r1, #4
 8004c16:	68f8      	ldr	r0, [r7, #12]
 8004c18:	f000 fb1f 	bl	800525a <BMP388_ReadBytes>
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	77fb      	strb	r3, [r7, #31]
	if(rslt != HAL_OK){
 8004c20:	7ffb      	ldrb	r3, [r7, #31]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d001      	beq.n	8004c2a <BMP388_ReadRawPressTempTime+0x2a>
		return rslt;
 8004c26:	7ffb      	ldrb	r3, [r7, #31]
 8004c28:	e012      	b.n	8004c50 <BMP388_ReadRawPressTempTime+0x50>
//	uint32_t data_xlsb;
//	uint32_t data_lsb;
//	uint32_t data_msb;

	// Parsing pressure data
	*raw_pressure = (uint32_t)raw_data[2] << 16 | (uint32_t)raw_data[1] << 8 | (uint32_t)raw_data[0];
 8004c2a:	7dbb      	ldrb	r3, [r7, #22]
 8004c2c:	041a      	lsls	r2, r3, #16
 8004c2e:	7d7b      	ldrb	r3, [r7, #21]
 8004c30:	021b      	lsls	r3, r3, #8
 8004c32:	4313      	orrs	r3, r2
 8004c34:	7d3a      	ldrb	r2, [r7, #20]
 8004c36:	431a      	orrs	r2, r3
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	601a      	str	r2, [r3, #0]

	// Parsing temperature data
	*raw_temperature = (uint32_t)raw_data[5] << 16 | (uint32_t)raw_data[4] << 8 | (uint32_t)raw_data[3];
 8004c3c:	7e7b      	ldrb	r3, [r7, #25]
 8004c3e:	041a      	lsls	r2, r3, #16
 8004c40:	7e3b      	ldrb	r3, [r7, #24]
 8004c42:	021b      	lsls	r3, r3, #8
 8004c44:	4313      	orrs	r3, r2
 8004c46:	7dfa      	ldrb	r2, [r7, #23]
 8004c48:	431a      	orrs	r2, r3
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	601a      	str	r2, [r3, #0]

	// Parsing time bytes
	//*time = (uint32_t)raw_data[10] << 16 | (uint32_t)raw_data[9] << 8 | (uint32_t)raw_data[8];


	return rslt;
 8004c4e:	7ffb      	ldrb	r3, [r7, #31]
}
 8004c50:	4618      	mov	r0, r3
 8004c52:	3720      	adds	r7, #32
 8004c54:	46bd      	mov	sp, r7
 8004c56:	bd80      	pop	{r7, pc}

08004c58 <BMP388_CompensateRawPressTemp>:
 *	@param[out]	temperature		: Pointer to the variable that contain temperature.
 *
 *  @return none
 */
void BMP388_CompensateRawPressTemp(BMP388_HandleTypeDef *bmp, uint32_t raw_pressure, uint32_t raw_temperature,
									  	  	  	  	  	  	  float *pressure, float *temperature){
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b086      	sub	sp, #24
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	60f8      	str	r0, [r7, #12]
 8004c60:	60b9      	str	r1, [r7, #8]
 8004c62:	607a      	str	r2, [r7, #4]
 8004c64:	603b      	str	r3, [r7, #0]
	float temp;
	float press;

	BMP388_CompensateTemp(bmp, raw_temperature, &temp);
 8004c66:	f107 0314 	add.w	r3, r7, #20
 8004c6a:	461a      	mov	r2, r3
 8004c6c:	6879      	ldr	r1, [r7, #4]
 8004c6e:	68f8      	ldr	r0, [r7, #12]
 8004c70:	f000 f9ec 	bl	800504c <BMP388_CompensateTemp>
	BMP388_CompensatePress(bmp, temp, raw_pressure, &press);
 8004c74:	edd7 7a05 	vldr	s15, [r7, #20]
 8004c78:	f107 0310 	add.w	r3, r7, #16
 8004c7c:	461a      	mov	r2, r3
 8004c7e:	68b9      	ldr	r1, [r7, #8]
 8004c80:	eeb0 0a67 	vmov.f32	s0, s15
 8004c84:	68f8      	ldr	r0, [r7, #12]
 8004c86:	f000 fa17 	bl	80050b8 <BMP388_CompensatePress>

	*pressure = press;
 8004c8a:	693a      	ldr	r2, [r7, #16]
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	601a      	str	r2, [r3, #0]
	*temperature = temp;
 8004c90:	697a      	ldr	r2, [r7, #20]
 8004c92:	6a3b      	ldr	r3, [r7, #32]
 8004c94:	601a      	str	r2, [r3, #0]
}
 8004c96:	bf00      	nop
 8004c98:	3718      	adds	r7, #24
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}
	...

08004ca0 <BMP388_FindAltitude>:
 *	@param[in] ground_pressure	: Pressure at ground
 *  @param[in] pressure			: Pressure that measured at flight.
 *
 *  @return Altitude
 */
float BMP388_FindAltitude(float ground_pressure, float pressure){
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b082      	sub	sp, #8
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	ed87 0a01 	vstr	s0, [r7, #4]
 8004caa:	edc7 0a00 	vstr	s1, [r7]

	// Note that using the equation from wikipedia can give bad results
	// at high altitude. See this thread for more information:
	//  http://forums.adafruit.com/viewtopic.php?f=22&t=58064

	return 44330.0 * (1.0 - pow(pressure / ground_pressure, 0.1903));
 8004cae:	ed97 7a00 	vldr	s14, [r7]
 8004cb2:	edd7 7a01 	vldr	s15, [r7, #4]
 8004cb6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004cba:	ee16 0a90 	vmov	r0, s13
 8004cbe:	f7fb fc43 	bl	8000548 <__aeabi_f2d>
 8004cc2:	4602      	mov	r2, r0
 8004cc4:	460b      	mov	r3, r1
 8004cc6:	ed9f 1b12 	vldr	d1, [pc, #72]	; 8004d10 <BMP388_FindAltitude+0x70>
 8004cca:	ec43 2b10 	vmov	d0, r2, r3
 8004cce:	f00d f843 	bl	8011d58 <pow>
 8004cd2:	ec53 2b10 	vmov	r2, r3, d0
 8004cd6:	f04f 0000 	mov.w	r0, #0
 8004cda:	4911      	ldr	r1, [pc, #68]	; (8004d20 <BMP388_FindAltitude+0x80>)
 8004cdc:	f7fb fad4 	bl	8000288 <__aeabi_dsub>
 8004ce0:	4602      	mov	r2, r0
 8004ce2:	460b      	mov	r3, r1
 8004ce4:	4610      	mov	r0, r2
 8004ce6:	4619      	mov	r1, r3
 8004ce8:	a30b      	add	r3, pc, #44	; (adr r3, 8004d18 <BMP388_FindAltitude+0x78>)
 8004cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cee:	f7fb fc83 	bl	80005f8 <__aeabi_dmul>
 8004cf2:	4602      	mov	r2, r0
 8004cf4:	460b      	mov	r3, r1
 8004cf6:	4610      	mov	r0, r2
 8004cf8:	4619      	mov	r1, r3
 8004cfa:	f7fb ff75 	bl	8000be8 <__aeabi_d2f>
 8004cfe:	4603      	mov	r3, r0
 8004d00:	ee07 3a90 	vmov	s15, r3
}
 8004d04:	eeb0 0a67 	vmov.f32	s0, s15
 8004d08:	3708      	adds	r7, #8
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bd80      	pop	{r7, pc}
 8004d0e:	bf00      	nop
 8004d10:	1a36e2eb 	.word	0x1a36e2eb
 8004d14:	3fc85bc0 	.word	0x3fc85bc0
 8004d18:	00000000 	.word	0x00000000
 8004d1c:	40e5a540 	.word	0x40e5a540
 8004d20:	3ff00000 	.word	0x3ff00000

08004d24 <BMP388_SoftReset>:
 *
 *  @return Status of execution
 *  @retval = HAL_OK  		-> Success
 *  @retval != HAL_OK	  	-> Failure Info
 */
HAL_StatusTypeDef BMP388_SoftReset(BMP388_HandleTypeDef *bmp){
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b084      	sub	sp, #16
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
	uint8_t rst_cmnd = BMP388_SOFTRESET;
 8004d2c:	23b6      	movs	r3, #182	; 0xb6
 8004d2e:	73bb      	strb	r3, [r7, #14]
    uint8_t cmd_err_status;

	HAL_StatusTypeDef rslt;

	// Reading STATUS reg to understand that the BMP388 is ready to receive command
	rslt = BMP388_ReadBytes(bmp, STATUS, &cmd_rdy_status, 1);
 8004d30:	f107 020d 	add.w	r2, r7, #13
 8004d34:	2301      	movs	r3, #1
 8004d36:	2103      	movs	r1, #3
 8004d38:	6878      	ldr	r0, [r7, #4]
 8004d3a:	f000 fa8e 	bl	800525a <BMP388_ReadBytes>
 8004d3e:	4603      	mov	r3, r0
 8004d40:	73fb      	strb	r3, [r7, #15]
	if((rslt == HAL_OK) && (cmd_rdy_status & BMP388_CMD_RDY)){
 8004d42:	7bfb      	ldrb	r3, [r7, #15]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d128      	bne.n	8004d9a <BMP388_SoftReset+0x76>
 8004d48:	7b7b      	ldrb	r3, [r7, #13]
 8004d4a:	f003 0310 	and.w	r3, r3, #16
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d023      	beq.n	8004d9a <BMP388_SoftReset+0x76>
		// Writing SOFTRESET command to CMD reg
		rslt = BMP388_WriteBytes(bmp, CMD, &rst_cmnd, 1);
 8004d52:	f107 020e 	add.w	r2, r7, #14
 8004d56:	2301      	movs	r3, #1
 8004d58:	217e      	movs	r1, #126	; 0x7e
 8004d5a:	6878      	ldr	r0, [r7, #4]
 8004d5c:	f000 fa9b 	bl	8005296 <BMP388_WriteBytes>
 8004d60:	4603      	mov	r3, r0
 8004d62:	73fb      	strb	r3, [r7, #15]
		if(rslt == HAL_OK){
 8004d64:	7bfb      	ldrb	r3, [r7, #15]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d115      	bne.n	8004d96 <BMP388_SoftReset+0x72>
			// 2 ms pause then check ERR reg
			HAL_Delay(2);
 8004d6a:	2002      	movs	r0, #2
 8004d6c:	f000 fbe2 	bl	8005534 <HAL_Delay>
			rslt = BMP388_ReadBytes(bmp, ERR_REG, &cmd_err_status, 1);
 8004d70:	f107 020c 	add.w	r2, r7, #12
 8004d74:	2301      	movs	r3, #1
 8004d76:	2102      	movs	r1, #2
 8004d78:	6878      	ldr	r0, [r7, #4]
 8004d7a:	f000 fa6e 	bl	800525a <BMP388_ReadBytes>
 8004d7e:	4603      	mov	r3, r0
 8004d80:	73fb      	strb	r3, [r7, #15]
			if((cmd_err_status & CMD) || (rslt != HAL_OK)){
 8004d82:	7b3b      	ldrb	r3, [r7, #12]
 8004d84:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d102      	bne.n	8004d92 <BMP388_SoftReset+0x6e>
 8004d8c:	7bfb      	ldrb	r3, [r7, #15]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d003      	beq.n	8004d9a <BMP388_SoftReset+0x76>
				return rslt;
 8004d92:	7bfb      	ldrb	r3, [r7, #15]
 8004d94:	e002      	b.n	8004d9c <BMP388_SoftReset+0x78>
			}
		}
		else{
			return rslt;
 8004d96:	7bfb      	ldrb	r3, [r7, #15]
 8004d98:	e000      	b.n	8004d9c <BMP388_SoftReset+0x78>
		}
	}

	return rslt;
 8004d9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	3710      	adds	r7, #16
 8004da0:	46bd      	mov	sp, r7
 8004da2:	bd80      	pop	{r7, pc}

08004da4 <BMP388_GetCalibData>:
 *
 *  @return Status of execution
 *  @retval = HAL_OK  		-> Success
 *  @retval != HAL_OK	  	-> Failure Info
 */
HAL_StatusTypeDef BMP388_GetCalibData(BMP388_HandleTypeDef *bmp){
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b090      	sub	sp, #64	; 0x40
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef rslt;
	uint8_t calib_buff[BMP388_CALIBDATA_LEN] = {0};
 8004dac:	2300      	movs	r3, #0
 8004dae:	60fb      	str	r3, [r7, #12]
 8004db0:	f107 0310 	add.w	r3, r7, #16
 8004db4:	2200      	movs	r2, #0
 8004db6:	601a      	str	r2, [r3, #0]
 8004db8:	605a      	str	r2, [r3, #4]
 8004dba:	609a      	str	r2, [r3, #8]
 8004dbc:	60da      	str	r2, [r3, #12]
 8004dbe:	741a      	strb	r2, [r3, #16]
	int8_t		raw_par_p8;
	int16_t		raw_par_p9;
	int8_t		raw_par_p10;
	int8_t		raw_par_p11;

	rslt = BMP388_ReadBytes(bmp, CALIB_DATA, calib_buff, BMP388_CALIBDATA_LEN);
 8004dc0:	f107 020c 	add.w	r2, r7, #12
 8004dc4:	2315      	movs	r3, #21
 8004dc6:	2131      	movs	r1, #49	; 0x31
 8004dc8:	6878      	ldr	r0, [r7, #4]
 8004dca:	f000 fa46 	bl	800525a <BMP388_ReadBytes>
 8004dce:	4603      	mov	r3, r0
 8004dd0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	float temp_var;
	if(rslt == HAL_OK){
 8004dd4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	f040 812f 	bne.w	800503c <BMP388_GetCalibData+0x298>
		// PAR_T1
		temp_var = 0.00390625f;
 8004dde:	f04f 536e 	mov.w	r3, #998244352	; 0x3b800000
 8004de2:	63bb      	str	r3, [r7, #56]	; 0x38
		raw_par_t1 = ((uint16_t)calib_buff[1] << 8) | (uint16_t)calib_buff[0];
 8004de4:	7b7b      	ldrb	r3, [r7, #13]
 8004de6:	021b      	lsls	r3, r3, #8
 8004de8:	b21a      	sxth	r2, r3
 8004dea:	7b3b      	ldrb	r3, [r7, #12]
 8004dec:	b21b      	sxth	r3, r3
 8004dee:	4313      	orrs	r3, r2
 8004df0:	b21b      	sxth	r3, r3
 8004df2:	86fb      	strh	r3, [r7, #54]	; 0x36
		bmp->_calib_data.par_t1 = (float)raw_par_t1 / temp_var;
 8004df4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004df6:	ee07 3a90 	vmov	s15, r3
 8004dfa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004dfe:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8004e02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	edc3 7a02 	vstr	s15, [r3, #8]
		// PAR_T2
		temp_var = 1073741824.f;
 8004e0c:	f04f 439d 	mov.w	r3, #1317011456	; 0x4e800000
 8004e10:	63bb      	str	r3, [r7, #56]	; 0x38
		raw_par_t2 = ((uint16_t)calib_buff[3] << 8) | (uint16_t)calib_buff[2];
 8004e12:	7bfb      	ldrb	r3, [r7, #15]
 8004e14:	021b      	lsls	r3, r3, #8
 8004e16:	b21a      	sxth	r2, r3
 8004e18:	7bbb      	ldrb	r3, [r7, #14]
 8004e1a:	b21b      	sxth	r3, r3
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	b21b      	sxth	r3, r3
 8004e20:	86bb      	strh	r3, [r7, #52]	; 0x34
		bmp->_calib_data.par_t2 = (float)raw_par_t2 / temp_var;
 8004e22:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004e24:	ee07 3a90 	vmov	s15, r3
 8004e28:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e2c:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8004e30:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	edc3 7a03 	vstr	s15, [r3, #12]
		// PAR_T3
		temp_var = 281474976710656.f;
 8004e3a:	f04f 43af 	mov.w	r3, #1468006400	; 0x57800000
 8004e3e:	63bb      	str	r3, [r7, #56]	; 0x38
		raw_par_t3 = calib_buff[4];
 8004e40:	7c3b      	ldrb	r3, [r7, #16]
 8004e42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		bmp->_calib_data.par_t3 = (float)raw_par_t3 / temp_var;
 8004e46:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004e4a:	ee07 3a90 	vmov	s15, r3
 8004e4e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004e52:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8004e56:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	edc3 7a04 	vstr	s15, [r3, #16]
		// PAR_P1
		temp_var = 1048576.f;
 8004e60:	f04f 4393 	mov.w	r3, #1233125376	; 0x49800000
 8004e64:	63bb      	str	r3, [r7, #56]	; 0x38
		raw_par_p1 = ((int16_t)calib_buff[6] << 8) | (int16_t)calib_buff[5];
 8004e66:	7cbb      	ldrb	r3, [r7, #18]
 8004e68:	021b      	lsls	r3, r3, #8
 8004e6a:	b21a      	sxth	r2, r3
 8004e6c:	7c7b      	ldrb	r3, [r7, #17]
 8004e6e:	b21b      	sxth	r3, r3
 8004e70:	4313      	orrs	r3, r2
 8004e72:	863b      	strh	r3, [r7, #48]	; 0x30
		bmp->_calib_data.par_p1 = ((float)raw_par_p1 - 16384) / temp_var;
 8004e74:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8004e78:	ee07 3a90 	vmov	s15, r3
 8004e7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004e80:	ed9f 7a71 	vldr	s14, [pc, #452]	; 8005048 <BMP388_GetCalibData+0x2a4>
 8004e84:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8004e88:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8004e8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	edc3 7a05 	vstr	s15, [r3, #20]
		// PAR_P2
		temp_var = 536870912.f;
 8004e96:	f04f 439c 	mov.w	r3, #1308622848	; 0x4e000000
 8004e9a:	63bb      	str	r3, [r7, #56]	; 0x38
		raw_par_p2 = ((int16_t)calib_buff[8] << 8) | (int16_t)calib_buff[7];
 8004e9c:	7d3b      	ldrb	r3, [r7, #20]
 8004e9e:	021b      	lsls	r3, r3, #8
 8004ea0:	b21a      	sxth	r2, r3
 8004ea2:	7cfb      	ldrb	r3, [r7, #19]
 8004ea4:	b21b      	sxth	r3, r3
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	85fb      	strh	r3, [r7, #46]	; 0x2e
		bmp->_calib_data.par_p2 = ((float)raw_par_p2 - 16384) / temp_var;
 8004eaa:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8004eae:	ee07 3a90 	vmov	s15, r3
 8004eb2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004eb6:	ed9f 7a64 	vldr	s14, [pc, #400]	; 8005048 <BMP388_GetCalibData+0x2a4>
 8004eba:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8004ebe:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8004ec2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	edc3 7a06 	vstr	s15, [r3, #24]
		// PAR_P3
		temp_var = 4294967296.f;
 8004ecc:	f04f 439f 	mov.w	r3, #1333788672	; 0x4f800000
 8004ed0:	63bb      	str	r3, [r7, #56]	; 0x38
		raw_par_p3 = (int8_t)calib_buff[9];
 8004ed2:	7d7b      	ldrb	r3, [r7, #21]
 8004ed4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
		bmp->_calib_data.par_p3 = (float)raw_par_p3 / temp_var;
 8004ed8:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 8004edc:	ee07 3a90 	vmov	s15, r3
 8004ee0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004ee4:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8004ee8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	edc3 7a07 	vstr	s15, [r3, #28]
		// PAR_P4
		temp_var = 137438953472.f;
 8004ef2:	f04f 43a4 	mov.w	r3, #1375731712	; 0x52000000
 8004ef6:	63bb      	str	r3, [r7, #56]	; 0x38
		raw_par_p4 = (int8_t)calib_buff[10];
 8004ef8:	7dbb      	ldrb	r3, [r7, #22]
 8004efa:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
		bmp->_calib_data.par_p4 = (float)raw_par_p4 / temp_var;
 8004efe:	f997 302c 	ldrsb.w	r3, [r7, #44]	; 0x2c
 8004f02:	ee07 3a90 	vmov	s15, r3
 8004f06:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004f0a:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8004f0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	edc3 7a08 	vstr	s15, [r3, #32]
		// PAR_P5
		temp_var = 0.125f;
 8004f18:	f04f 5378 	mov.w	r3, #1040187392	; 0x3e000000
 8004f1c:	63bb      	str	r3, [r7, #56]	; 0x38
		raw_par_p5 = ((uint16_t)calib_buff[12] << 8) | (uint16_t)calib_buff[11];
 8004f1e:	7e3b      	ldrb	r3, [r7, #24]
 8004f20:	021b      	lsls	r3, r3, #8
 8004f22:	b21a      	sxth	r2, r3
 8004f24:	7dfb      	ldrb	r3, [r7, #23]
 8004f26:	b21b      	sxth	r3, r3
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	b21b      	sxth	r3, r3
 8004f2c:	857b      	strh	r3, [r7, #42]	; 0x2a
		bmp->_calib_data.par_p5 = (float)raw_par_p5 / temp_var;
 8004f2e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004f30:	ee07 3a90 	vmov	s15, r3
 8004f34:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f38:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8004f3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
		// PAR_P6
		temp_var = 64.f;
 8004f46:	f04f 4385 	mov.w	r3, #1115684864	; 0x42800000
 8004f4a:	63bb      	str	r3, [r7, #56]	; 0x38
		raw_par_p6 = ((uint16_t)calib_buff[14] << 8) | (uint16_t)calib_buff[13];
 8004f4c:	7ebb      	ldrb	r3, [r7, #26]
 8004f4e:	021b      	lsls	r3, r3, #8
 8004f50:	b21a      	sxth	r2, r3
 8004f52:	7e7b      	ldrb	r3, [r7, #25]
 8004f54:	b21b      	sxth	r3, r3
 8004f56:	4313      	orrs	r3, r2
 8004f58:	b21b      	sxth	r3, r3
 8004f5a:	853b      	strh	r3, [r7, #40]	; 0x28
		bmp->_calib_data.par_p6 = (float)raw_par_p6 / temp_var;
 8004f5c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004f5e:	ee07 3a90 	vmov	s15, r3
 8004f62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f66:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8004f6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		// PAR_P7
		temp_var = 256.f;
 8004f74:	f04f 4387 	mov.w	r3, #1132462080	; 0x43800000
 8004f78:	63bb      	str	r3, [r7, #56]	; 0x38
		raw_par_p7 = (int8_t)calib_buff[15];
 8004f7a:	7efb      	ldrb	r3, [r7, #27]
 8004f7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		bmp->_calib_data.par_p7 = (float)raw_par_p7 / temp_var;
 8004f80:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004f84:	ee07 3a90 	vmov	s15, r3
 8004f88:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004f8c:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8004f90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
		// PAR_P8
		temp_var = 32768.f;
 8004f9a:	f04f 438e 	mov.w	r3, #1191182336	; 0x47000000
 8004f9e:	63bb      	str	r3, [r7, #56]	; 0x38
		raw_par_p8 = (int8_t)calib_buff[16];
 8004fa0:	7f3b      	ldrb	r3, [r7, #28]
 8004fa2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		bmp->_calib_data.par_p8 = (float)raw_par_p8 / temp_var;
 8004fa6:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
 8004faa:	ee07 3a90 	vmov	s15, r3
 8004fae:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004fb2:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8004fb6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
		// PAR_P9
		temp_var = 281474976710656.f;
 8004fc0:	f04f 43af 	mov.w	r3, #1468006400	; 0x57800000
 8004fc4:	63bb      	str	r3, [r7, #56]	; 0x38
		raw_par_p9 = ((int16_t)calib_buff[18] << 8) | (int16_t)calib_buff[17];
 8004fc6:	7fbb      	ldrb	r3, [r7, #30]
 8004fc8:	021b      	lsls	r3, r3, #8
 8004fca:	b21a      	sxth	r2, r3
 8004fcc:	7f7b      	ldrb	r3, [r7, #29]
 8004fce:	b21b      	sxth	r3, r3
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	84bb      	strh	r3, [r7, #36]	; 0x24
		bmp->_calib_data.par_p9 = (float)raw_par_p9 / temp_var;
 8004fd4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8004fd8:	ee07 3a90 	vmov	s15, r3
 8004fdc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004fe0:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8004fe4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
		// PAR_P10
		temp_var = 281474976710656.f;
 8004fee:	f04f 43af 	mov.w	r3, #1468006400	; 0x57800000
 8004ff2:	63bb      	str	r3, [r7, #56]	; 0x38
		raw_par_p10 = (int8_t)calib_buff[19];
 8004ff4:	7ffb      	ldrb	r3, [r7, #31]
 8004ff6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		bmp->_calib_data.par_p10 = (float)raw_par_p10 / temp_var;
 8004ffa:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8004ffe:	ee07 3a90 	vmov	s15, r3
 8005002:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8005006:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800500a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
		// PAR_P11
		temp_var = 36893488147419103232.f;
 8005014:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8005018:	63bb      	str	r3, [r7, #56]	; 0x38
		raw_par_p11 = (int8_t)calib_buff[20];
 800501a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800501e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		bmp->_calib_data.par_p11 = (float)raw_par_p11 / temp_var;
 8005022:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 8005026:	ee07 3a90 	vmov	s15, r3
 800502a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800502e:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8005032:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
	}
	return rslt;
 800503c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8005040:	4618      	mov	r0, r3
 8005042:	3740      	adds	r7, #64	; 0x40
 8005044:	46bd      	mov	sp, r7
 8005046:	bd80      	pop	{r7, pc}
 8005048:	46800000 	.word	0x46800000

0800504c <BMP388_CompensateTemp>:
 *
 *  @return Status of execution
 *  @retval = HAL_OK  		-> Success
 *  @retval != HAL_OK	  	-> Failure Info
 */
float BMP388_CompensateTemp(BMP388_HandleTypeDef *bmp, uint32_t raw_temp, float *temp){
 800504c:	b480      	push	{r7}
 800504e:	b087      	sub	sp, #28
 8005050:	af00      	add	r7, sp, #0
 8005052:	60f8      	str	r0, [r7, #12]
 8005054:	60b9      	str	r1, [r7, #8]
 8005056:	607a      	str	r2, [r7, #4]
    float partial_data1 = (float)(raw_temp - bmp->_calib_data.par_t1);;
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	ee07 3a90 	vmov	s15, r3
 800505e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	edd3 7a02 	vldr	s15, [r3, #8]
 8005068:	ee77 7a67 	vsub.f32	s15, s14, s15
 800506c:	edc7 7a05 	vstr	s15, [r7, #20]
    float partial_data2 = (float)(partial_data1 * bmp->_calib_data.par_t2);
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	edd3 7a03 	vldr	s15, [r3, #12]
 8005076:	ed97 7a05 	vldr	s14, [r7, #20]
 800507a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800507e:	edc7 7a04 	vstr	s15, [r7, #16]

    *temp = partial_data2 + (partial_data1 * partial_data1) * bmp->_calib_data.par_t3;
 8005082:	edd7 7a05 	vldr	s15, [r7, #20]
 8005086:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	edd3 7a04 	vldr	s15, [r3, #16]
 8005090:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005094:	edd7 7a04 	vldr	s15, [r7, #16]
 8005098:	ee77 7a27 	vadd.f32	s15, s14, s15
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	edc3 7a00 	vstr	s15, [r3]

    return *temp;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	ee07 3a90 	vmov	s15, r3
}
 80050aa:	eeb0 0a67 	vmov.f32	s0, s15
 80050ae:	371c      	adds	r7, #28
 80050b0:	46bd      	mov	sp, r7
 80050b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b6:	4770      	bx	lr

080050b8 <BMP388_CompensatePress>:
 *	@param[out] press		: Measured pressure in Pa
 *
 *  @return Status of execution
 *  @retval = press			: Compensated pressure value
 */
float BMP388_CompensatePress(BMP388_HandleTypeDef *bmp, float temp, uint32_t raw_press, float *press){
 80050b8:	b480      	push	{r7}
 80050ba:	b08b      	sub	sp, #44	; 0x2c
 80050bc:	af00      	add	r7, sp, #0
 80050be:	60f8      	str	r0, [r7, #12]
 80050c0:	ed87 0a02 	vstr	s0, [r7, #8]
 80050c4:	6079      	str	r1, [r7, #4]
 80050c6:	603a      	str	r2, [r7, #0]
    float partial_out1;
    float partial_out2;



    partial_data1 = bmp->_calib_data.par_p6 * temp;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80050ce:	ed97 7a02 	vldr	s14, [r7, #8]
 80050d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050d6:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    partial_data2 = bmp->_calib_data.par_p7 * (temp * temp);
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 80050e0:	edd7 7a02 	vldr	s15, [r7, #8]
 80050e4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80050e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050ec:	edc7 7a08 	vstr	s15, [r7, #32]
    partial_data3 = bmp->_calib_data.par_p8 * (temp * temp * temp);
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 80050f6:	edd7 7a02 	vldr	s15, [r7, #8]
 80050fa:	ee67 6aa7 	vmul.f32	s13, s15, s15
 80050fe:	edd7 7a02 	vldr	s15, [r7, #8]
 8005102:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005106:	ee67 7a27 	vmul.f32	s15, s14, s15
 800510a:	edc7 7a07 	vstr	s15, [r7, #28]
    partial_out1 = bmp->_calib_data.par_p5 + partial_data1 + partial_data2 + partial_data3;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8005114:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8005118:	ee37 7a27 	vadd.f32	s14, s14, s15
 800511c:	edd7 7a08 	vldr	s15, [r7, #32]
 8005120:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005124:	ed97 7a07 	vldr	s14, [r7, #28]
 8005128:	ee77 7a27 	vadd.f32	s15, s14, s15
 800512c:	edc7 7a06 	vstr	s15, [r7, #24]

    partial_data1 = bmp->_calib_data.par_p2 * temp;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	edd3 7a06 	vldr	s15, [r3, #24]
 8005136:	ed97 7a02 	vldr	s14, [r7, #8]
 800513a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800513e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    partial_data2 = bmp->_calib_data.par_p3 * (temp * temp);
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	ed93 7a07 	vldr	s14, [r3, #28]
 8005148:	edd7 7a02 	vldr	s15, [r7, #8]
 800514c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8005150:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005154:	edc7 7a08 	vstr	s15, [r7, #32]
    partial_data3 = bmp->_calib_data.par_p4 * (temp * temp * temp);
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	ed93 7a08 	vldr	s14, [r3, #32]
 800515e:	edd7 7a02 	vldr	s15, [r7, #8]
 8005162:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8005166:	edd7 7a02 	vldr	s15, [r7, #8]
 800516a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800516e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005172:	edc7 7a07 	vstr	s15, [r7, #28]
    partial_out2 = (float)raw_press * (bmp->_calib_data.par_p1 + partial_data1 + partial_data2 + partial_data3);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	ee07 3a90 	vmov	s15, r3
 800517c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	edd3 6a05 	vldr	s13, [r3, #20]
 8005186:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800518a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800518e:	edd7 7a08 	vldr	s15, [r7, #32]
 8005192:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8005196:	edd7 7a07 	vldr	s15, [r7, #28]
 800519a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800519e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051a2:	edc7 7a05 	vstr	s15, [r7, #20]

    partial_data1 = (float)raw_press * (float)raw_press;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	ee07 3a90 	vmov	s15, r3
 80051ac:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	ee07 3a90 	vmov	s15, r3
 80051b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051be:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    partial_data2 = bmp->_calib_data.par_p9 + bmp->_calib_data.par_p10 * temp;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 80051ce:	edd7 7a02 	vldr	s15, [r7, #8]
 80051d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80051d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80051da:	edc7 7a08 	vstr	s15, [r7, #32]
    partial_data3 = partial_data1 * partial_data2;
 80051de:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80051e2:	edd7 7a08 	vldr	s15, [r7, #32]
 80051e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051ea:	edc7 7a07 	vstr	s15, [r7, #28]
    partial_data4 = partial_data3 + ((float)raw_press * (float)raw_press * (float)raw_press) * bmp->_calib_data.par_p11;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	ee07 3a90 	vmov	s15, r3
 80051f4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	ee07 3a90 	vmov	s15, r3
 80051fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005202:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	ee07 3a90 	vmov	s15, r3
 800520c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005210:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 800521a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800521e:	ed97 7a07 	vldr	s14, [r7, #28]
 8005222:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005226:	edc7 7a04 	vstr	s15, [r7, #16]

    *press = partial_out1 + partial_out2 + partial_data4;
 800522a:	ed97 7a06 	vldr	s14, [r7, #24]
 800522e:	edd7 7a05 	vldr	s15, [r7, #20]
 8005232:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005236:	edd7 7a04 	vldr	s15, [r7, #16]
 800523a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	edc3 7a00 	vstr	s15, [r3]

    return *press;
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	ee07 3a90 	vmov	s15, r3
}
 800524c:	eeb0 0a67 	vmov.f32	s0, s15
 8005250:	372c      	adds	r7, #44	; 0x2c
 8005252:	46bd      	mov	sp, r7
 8005254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005258:	4770      	bx	lr

0800525a <BMP388_ReadBytes>:
 *
 *  @return Status of execution
 *  @retval = HAL_OK 		-> Success
 *  @retval != HAL_ERROR 	-> Failure Info
 */
HAL_StatusTypeDef BMP388_ReadBytes(BMP388_HandleTypeDef *bmp, BMP388_regs reg_addr, uint8_t *buff, uint8_t len){
 800525a:	b580      	push	{r7, lr}
 800525c:	b088      	sub	sp, #32
 800525e:	af04      	add	r7, sp, #16
 8005260:	60f8      	str	r0, [r7, #12]
 8005262:	607a      	str	r2, [r7, #4]
 8005264:	461a      	mov	r2, r3
 8005266:	460b      	mov	r3, r1
 8005268:	72fb      	strb	r3, [r7, #11]
 800526a:	4613      	mov	r3, r2
 800526c:	72bb      	strb	r3, [r7, #10]
	return HAL_I2C_Mem_Read(bmp->_hi2c, BMP388_ADDR << 1, reg_addr, I2C_MEMADD_SIZE_8BIT, buff, len, 100);
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	6818      	ldr	r0, [r3, #0]
 8005272:	7afb      	ldrb	r3, [r7, #11]
 8005274:	b29a      	uxth	r2, r3
 8005276:	7abb      	ldrb	r3, [r7, #10]
 8005278:	b29b      	uxth	r3, r3
 800527a:	2164      	movs	r1, #100	; 0x64
 800527c:	9102      	str	r1, [sp, #8]
 800527e:	9301      	str	r3, [sp, #4]
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	9300      	str	r3, [sp, #0]
 8005284:	2301      	movs	r3, #1
 8005286:	21ec      	movs	r1, #236	; 0xec
 8005288:	f001 fd14 	bl	8006cb4 <HAL_I2C_Mem_Read>
 800528c:	4603      	mov	r3, r0
}
 800528e:	4618      	mov	r0, r3
 8005290:	3710      	adds	r7, #16
 8005292:	46bd      	mov	sp, r7
 8005294:	bd80      	pop	{r7, pc}

08005296 <BMP388_WriteBytes>:
 *
 *  @return Status of execution
 *  @retval = HAL_OK 		-> Success
 *  @retval != HAL_ERROR 	-> Failure Info
 */
HAL_StatusTypeDef BMP388_WriteBytes(BMP388_HandleTypeDef *bmp, BMP388_regs reg_addr, uint8_t *buff, uint8_t len){
 8005296:	b580      	push	{r7, lr}
 8005298:	b088      	sub	sp, #32
 800529a:	af04      	add	r7, sp, #16
 800529c:	60f8      	str	r0, [r7, #12]
 800529e:	607a      	str	r2, [r7, #4]
 80052a0:	461a      	mov	r2, r3
 80052a2:	460b      	mov	r3, r1
 80052a4:	72fb      	strb	r3, [r7, #11]
 80052a6:	4613      	mov	r3, r2
 80052a8:	72bb      	strb	r3, [r7, #10]
	return HAL_I2C_Mem_Write(bmp->_hi2c, BMP388_ADDR << 1, reg_addr, I2C_MEMADD_SIZE_8BIT, buff, len, 100);
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	6818      	ldr	r0, [r3, #0]
 80052ae:	7afb      	ldrb	r3, [r7, #11]
 80052b0:	b29a      	uxth	r2, r3
 80052b2:	7abb      	ldrb	r3, [r7, #10]
 80052b4:	b29b      	uxth	r3, r3
 80052b6:	2164      	movs	r1, #100	; 0x64
 80052b8:	9102      	str	r1, [sp, #8]
 80052ba:	9301      	str	r3, [sp, #4]
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	9300      	str	r3, [sp, #0]
 80052c0:	2301      	movs	r3, #1
 80052c2:	21ec      	movs	r1, #236	; 0xec
 80052c4:	f001 fbfc 	bl	8006ac0 <HAL_I2C_Mem_Write>
 80052c8:	4603      	mov	r3, r0
}
 80052ca:	4618      	mov	r0, r3
 80052cc:	3710      	adds	r7, #16
 80052ce:	46bd      	mov	sp, r7
 80052d0:	bd80      	pop	{r7, pc}

080052d2 <set_duty_Oneshot42>:
#define P_yaw 5
#define D_yaw 0



void set_duty_Oneshot42(TIM_HandleTypeDef* const pwmHandle1, uint16_t ref_1, uint16_t ref_2, uint16_t ref_3, uint16_t ref_4){
 80052d2:	b480      	push	{r7}
 80052d4:	b085      	sub	sp, #20
 80052d6:	af00      	add	r7, sp, #0
 80052d8:	60f8      	str	r0, [r7, #12]
 80052da:	4608      	mov	r0, r1
 80052dc:	4611      	mov	r1, r2
 80052de:	461a      	mov	r2, r3
 80052e0:	4603      	mov	r3, r0
 80052e2:	817b      	strh	r3, [r7, #10]
 80052e4:	460b      	mov	r3, r1
 80052e6:	813b      	strh	r3, [r7, #8]
 80052e8:	4613      	mov	r3, r2
 80052ea:	80fb      	strh	r3, [r7, #6]
	// Multishot42 12 kHz PSC 7-1, ARR 1000-1 -> 1000 = 100%, 500 = stop, ?0 = -100%?
	pwmHandle1 -> Instance -> CCR1 = ref_1;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	897a      	ldrh	r2, [r7, #10]
 80052f2:	635a      	str	r2, [r3, #52]	; 0x34
	pwmHandle1 -> Instance -> CCR2 = ref_2;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	893a      	ldrh	r2, [r7, #8]
 80052fa:	639a      	str	r2, [r3, #56]	; 0x38
	pwmHandle1 -> Instance -> CCR3 = ref_3;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	88fa      	ldrh	r2, [r7, #6]
 8005302:	63da      	str	r2, [r3, #60]	; 0x3c
	pwmHandle1 -> Instance -> CCR4 = ref_4;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	8b3a      	ldrh	r2, [r7, #24]
 800530a:	641a      	str	r2, [r3, #64]	; 0x40
}
 800530c:	bf00      	nop
 800530e:	3714      	adds	r7, #20
 8005310:	46bd      	mov	sp, r7
 8005312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005316:	4770      	bx	lr

08005318 <CRSFtoDuty>:

float CRSFtoDuty(uint16_t CRSF_val){
 8005318:	b580      	push	{r7, lr}
 800531a:	b084      	sub	sp, #16
 800531c:	af00      	add	r7, sp, #0
 800531e:	4603      	mov	r3, r0
 8005320:	80fb      	strh	r3, [r7, #6]
	float Duty;
//	Duty = 550+((float)(CRSF_val-172))/4.1; // minimum duty 55% max duty 95%
	Duty = 550+((float)(CRSF_val-172))/4.1*0.4; //for safety reasons minimum duty 55% max duty 71%
 8005322:	88fb      	ldrh	r3, [r7, #6]
 8005324:	3bac      	subs	r3, #172	; 0xac
 8005326:	ee07 3a90 	vmov	s15, r3
 800532a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800532e:	ee17 0a90 	vmov	r0, s15
 8005332:	f7fb f909 	bl	8000548 <__aeabi_f2d>
 8005336:	a315      	add	r3, pc, #84	; (adr r3, 800538c <CRSFtoDuty+0x74>)
 8005338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800533c:	f7fb fa86 	bl	800084c <__aeabi_ddiv>
 8005340:	4602      	mov	r2, r0
 8005342:	460b      	mov	r3, r1
 8005344:	4610      	mov	r0, r2
 8005346:	4619      	mov	r1, r3
 8005348:	a312      	add	r3, pc, #72	; (adr r3, 8005394 <CRSFtoDuty+0x7c>)
 800534a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800534e:	f7fb f953 	bl	80005f8 <__aeabi_dmul>
 8005352:	4602      	mov	r2, r0
 8005354:	460b      	mov	r3, r1
 8005356:	4610      	mov	r0, r2
 8005358:	4619      	mov	r1, r3
 800535a:	f04f 0200 	mov.w	r2, #0
 800535e:	4b0a      	ldr	r3, [pc, #40]	; (8005388 <CRSFtoDuty+0x70>)
 8005360:	f7fa ff94 	bl	800028c <__adddf3>
 8005364:	4602      	mov	r2, r0
 8005366:	460b      	mov	r3, r1
 8005368:	4610      	mov	r0, r2
 800536a:	4619      	mov	r1, r3
 800536c:	f7fb fc3c 	bl	8000be8 <__aeabi_d2f>
 8005370:	4603      	mov	r3, r0
 8005372:	60fb      	str	r3, [r7, #12]
	return Duty;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	ee07 3a90 	vmov	s15, r3
}
 800537a:	eeb0 0a67 	vmov.f32	s0, s15
 800537e:	3710      	adds	r7, #16
 8005380:	46bd      	mov	sp, r7
 8005382:	bd80      	pop	{r7, pc}
 8005384:	f3af 8000 	nop.w
 8005388:	40813000 	.word	0x40813000
 800538c:	66666666 	.word	0x66666666
 8005390:	40106666 	.word	0x40106666
 8005394:	9999999a 	.word	0x9999999a
 8005398:	3fd99999 	.word	0x3fd99999

0800539c <CRSFtoPitch>:

float CRSFtoPitch(uint16_t CRSF_val){
 800539c:	b480      	push	{r7}
 800539e:	b085      	sub	sp, #20
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	4603      	mov	r3, r0
 80053a4:	80fb      	strh	r3, [r7, #6]
	float pitch;
	pitch = ((float)(CRSF_val-992))/820.0;
 80053a6:	88fb      	ldrh	r3, [r7, #6]
 80053a8:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 80053ac:	ee07 3a90 	vmov	s15, r3
 80053b0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80053b4:	eddf 6a07 	vldr	s13, [pc, #28]	; 80053d4 <CRSFtoPitch+0x38>
 80053b8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80053bc:	edc7 7a03 	vstr	s15, [r7, #12]
	return pitch;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	ee07 3a90 	vmov	s15, r3
}
 80053c6:	eeb0 0a67 	vmov.f32	s0, s15
 80053ca:	3714      	adds	r7, #20
 80053cc:	46bd      	mov	sp, r7
 80053ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d2:	4770      	bx	lr
 80053d4:	444d0000 	.word	0x444d0000

080053d8 <CRSFtoRoll>:

float CRSFtoRoll(uint16_t CRSF_val){
 80053d8:	b480      	push	{r7}
 80053da:	b085      	sub	sp, #20
 80053dc:	af00      	add	r7, sp, #0
 80053de:	4603      	mov	r3, r0
 80053e0:	80fb      	strh	r3, [r7, #6]
	float roll;
	roll = ((float)(CRSF_val-992))/820.0;
 80053e2:	88fb      	ldrh	r3, [r7, #6]
 80053e4:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 80053e8:	ee07 3a90 	vmov	s15, r3
 80053ec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80053f0:	eddf 6a07 	vldr	s13, [pc, #28]	; 8005410 <CRSFtoRoll+0x38>
 80053f4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80053f8:	edc7 7a03 	vstr	s15, [r7, #12]
	return roll;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	ee07 3a90 	vmov	s15, r3
}
 8005402:	eeb0 0a67 	vmov.f32	s0, s15
 8005406:	3714      	adds	r7, #20
 8005408:	46bd      	mov	sp, r7
 800540a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540e:	4770      	bx	lr
 8005410:	444d0000 	.word	0x444d0000

08005414 <CRSFtoYaw>:

float CRSFtoYaw(uint16_t CRSF_val){
 8005414:	b480      	push	{r7}
 8005416:	b085      	sub	sp, #20
 8005418:	af00      	add	r7, sp, #0
 800541a:	4603      	mov	r3, r0
 800541c:	80fb      	strh	r3, [r7, #6]
	float yaw;
	yaw = ((float)(CRSF_val-992))/820.0;
 800541e:	88fb      	ldrh	r3, [r7, #6]
 8005420:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 8005424:	ee07 3a90 	vmov	s15, r3
 8005428:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800542c:	eddf 6a07 	vldr	s13, [pc, #28]	; 800544c <CRSFtoYaw+0x38>
 8005430:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005434:	edc7 7a03 	vstr	s15, [r7, #12]
	return yaw;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	ee07 3a90 	vmov	s15, r3
}
 800543e:	eeb0 0a67 	vmov.f32	s0, s15
 8005442:	3714      	adds	r7, #20
 8005444:	46bd      	mov	sp, r7
 8005446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544a:	4770      	bx	lr
 800544c:	444d0000 	.word	0x444d0000

08005450 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005454:	4b0e      	ldr	r3, [pc, #56]	; (8005490 <HAL_Init+0x40>)
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4a0d      	ldr	r2, [pc, #52]	; (8005490 <HAL_Init+0x40>)
 800545a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800545e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005460:	4b0b      	ldr	r3, [pc, #44]	; (8005490 <HAL_Init+0x40>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a0a      	ldr	r2, [pc, #40]	; (8005490 <HAL_Init+0x40>)
 8005466:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800546a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800546c:	4b08      	ldr	r3, [pc, #32]	; (8005490 <HAL_Init+0x40>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a07      	ldr	r2, [pc, #28]	; (8005490 <HAL_Init+0x40>)
 8005472:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005476:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005478:	2003      	movs	r0, #3
 800547a:	f000 fbb1 	bl	8005be0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800547e:	200f      	movs	r0, #15
 8005480:	f000 f808 	bl	8005494 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005484:	f7fe fa46 	bl	8003914 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005488:	2300      	movs	r3, #0
}
 800548a:	4618      	mov	r0, r3
 800548c:	bd80      	pop	{r7, pc}
 800548e:	bf00      	nop
 8005490:	40023c00 	.word	0x40023c00

08005494 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b082      	sub	sp, #8
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800549c:	4b12      	ldr	r3, [pc, #72]	; (80054e8 <HAL_InitTick+0x54>)
 800549e:	681a      	ldr	r2, [r3, #0]
 80054a0:	4b12      	ldr	r3, [pc, #72]	; (80054ec <HAL_InitTick+0x58>)
 80054a2:	781b      	ldrb	r3, [r3, #0]
 80054a4:	4619      	mov	r1, r3
 80054a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80054aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80054ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80054b2:	4618      	mov	r0, r3
 80054b4:	f000 fbc9 	bl	8005c4a <HAL_SYSTICK_Config>
 80054b8:	4603      	mov	r3, r0
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d001      	beq.n	80054c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80054be:	2301      	movs	r3, #1
 80054c0:	e00e      	b.n	80054e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2b0f      	cmp	r3, #15
 80054c6:	d80a      	bhi.n	80054de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80054c8:	2200      	movs	r2, #0
 80054ca:	6879      	ldr	r1, [r7, #4]
 80054cc:	f04f 30ff 	mov.w	r0, #4294967295
 80054d0:	f000 fb91 	bl	8005bf6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80054d4:	4a06      	ldr	r2, [pc, #24]	; (80054f0 <HAL_InitTick+0x5c>)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80054da:	2300      	movs	r3, #0
 80054dc:	e000      	b.n	80054e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80054de:	2301      	movs	r3, #1
}
 80054e0:	4618      	mov	r0, r3
 80054e2:	3708      	adds	r7, #8
 80054e4:	46bd      	mov	sp, r7
 80054e6:	bd80      	pop	{r7, pc}
 80054e8:	2000000c 	.word	0x2000000c
 80054ec:	20000014 	.word	0x20000014
 80054f0:	20000010 	.word	0x20000010

080054f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80054f4:	b480      	push	{r7}
 80054f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80054f8:	4b06      	ldr	r3, [pc, #24]	; (8005514 <HAL_IncTick+0x20>)
 80054fa:	781b      	ldrb	r3, [r3, #0]
 80054fc:	461a      	mov	r2, r3
 80054fe:	4b06      	ldr	r3, [pc, #24]	; (8005518 <HAL_IncTick+0x24>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4413      	add	r3, r2
 8005504:	4a04      	ldr	r2, [pc, #16]	; (8005518 <HAL_IncTick+0x24>)
 8005506:	6013      	str	r3, [r2, #0]
}
 8005508:	bf00      	nop
 800550a:	46bd      	mov	sp, r7
 800550c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005510:	4770      	bx	lr
 8005512:	bf00      	nop
 8005514:	20000014 	.word	0x20000014
 8005518:	20000bd8 	.word	0x20000bd8

0800551c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800551c:	b480      	push	{r7}
 800551e:	af00      	add	r7, sp, #0
  return uwTick;
 8005520:	4b03      	ldr	r3, [pc, #12]	; (8005530 <HAL_GetTick+0x14>)
 8005522:	681b      	ldr	r3, [r3, #0]
}
 8005524:	4618      	mov	r0, r3
 8005526:	46bd      	mov	sp, r7
 8005528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552c:	4770      	bx	lr
 800552e:	bf00      	nop
 8005530:	20000bd8 	.word	0x20000bd8

08005534 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b084      	sub	sp, #16
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800553c:	f7ff ffee 	bl	800551c <HAL_GetTick>
 8005540:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	f1b3 3fff 	cmp.w	r3, #4294967295
 800554c:	d005      	beq.n	800555a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800554e:	4b0a      	ldr	r3, [pc, #40]	; (8005578 <HAL_Delay+0x44>)
 8005550:	781b      	ldrb	r3, [r3, #0]
 8005552:	461a      	mov	r2, r3
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	4413      	add	r3, r2
 8005558:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800555a:	bf00      	nop
 800555c:	f7ff ffde 	bl	800551c <HAL_GetTick>
 8005560:	4602      	mov	r2, r0
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	1ad3      	subs	r3, r2, r3
 8005566:	68fa      	ldr	r2, [r7, #12]
 8005568:	429a      	cmp	r2, r3
 800556a:	d8f7      	bhi.n	800555c <HAL_Delay+0x28>
  {
  }
}
 800556c:	bf00      	nop
 800556e:	bf00      	nop
 8005570:	3710      	adds	r7, #16
 8005572:	46bd      	mov	sp, r7
 8005574:	bd80      	pop	{r7, pc}
 8005576:	bf00      	nop
 8005578:	20000014 	.word	0x20000014

0800557c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b084      	sub	sp, #16
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005584:	2300      	movs	r3, #0
 8005586:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d101      	bne.n	8005592 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800558e:	2301      	movs	r3, #1
 8005590:	e033      	b.n	80055fa <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005596:	2b00      	cmp	r3, #0
 8005598:	d109      	bne.n	80055ae <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800559a:	6878      	ldr	r0, [r7, #4]
 800559c:	f7fe f9e6 	bl	800396c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2200      	movs	r2, #0
 80055a4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2200      	movs	r2, #0
 80055aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055b2:	f003 0310 	and.w	r3, r3, #16
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d118      	bne.n	80055ec <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055be:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80055c2:	f023 0302 	bic.w	r3, r3, #2
 80055c6:	f043 0202 	orr.w	r2, r3, #2
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80055ce:	6878      	ldr	r0, [r7, #4]
 80055d0:	f000 f93a 	bl	8005848 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2200      	movs	r2, #0
 80055d8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055de:	f023 0303 	bic.w	r3, r3, #3
 80055e2:	f043 0201 	orr.w	r2, r3, #1
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	641a      	str	r2, [r3, #64]	; 0x40
 80055ea:	e001      	b.n	80055f0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80055ec:	2301      	movs	r3, #1
 80055ee:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2200      	movs	r2, #0
 80055f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80055f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80055fa:	4618      	mov	r0, r3
 80055fc:	3710      	adds	r7, #16
 80055fe:	46bd      	mov	sp, r7
 8005600:	bd80      	pop	{r7, pc}
	...

08005604 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005604:	b480      	push	{r7}
 8005606:	b085      	sub	sp, #20
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
 800560c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800560e:	2300      	movs	r3, #0
 8005610:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005618:	2b01      	cmp	r3, #1
 800561a:	d101      	bne.n	8005620 <HAL_ADC_ConfigChannel+0x1c>
 800561c:	2302      	movs	r3, #2
 800561e:	e105      	b.n	800582c <HAL_ADC_ConfigChannel+0x228>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2201      	movs	r2, #1
 8005624:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	2b09      	cmp	r3, #9
 800562e:	d925      	bls.n	800567c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	68d9      	ldr	r1, [r3, #12]
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	b29b      	uxth	r3, r3
 800563c:	461a      	mov	r2, r3
 800563e:	4613      	mov	r3, r2
 8005640:	005b      	lsls	r3, r3, #1
 8005642:	4413      	add	r3, r2
 8005644:	3b1e      	subs	r3, #30
 8005646:	2207      	movs	r2, #7
 8005648:	fa02 f303 	lsl.w	r3, r2, r3
 800564c:	43da      	mvns	r2, r3
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	400a      	ands	r2, r1
 8005654:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	68d9      	ldr	r1, [r3, #12]
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	689a      	ldr	r2, [r3, #8]
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	b29b      	uxth	r3, r3
 8005666:	4618      	mov	r0, r3
 8005668:	4603      	mov	r3, r0
 800566a:	005b      	lsls	r3, r3, #1
 800566c:	4403      	add	r3, r0
 800566e:	3b1e      	subs	r3, #30
 8005670:	409a      	lsls	r2, r3
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	430a      	orrs	r2, r1
 8005678:	60da      	str	r2, [r3, #12]
 800567a:	e022      	b.n	80056c2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	6919      	ldr	r1, [r3, #16]
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	b29b      	uxth	r3, r3
 8005688:	461a      	mov	r2, r3
 800568a:	4613      	mov	r3, r2
 800568c:	005b      	lsls	r3, r3, #1
 800568e:	4413      	add	r3, r2
 8005690:	2207      	movs	r2, #7
 8005692:	fa02 f303 	lsl.w	r3, r2, r3
 8005696:	43da      	mvns	r2, r3
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	400a      	ands	r2, r1
 800569e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	6919      	ldr	r1, [r3, #16]
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	689a      	ldr	r2, [r3, #8]
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	b29b      	uxth	r3, r3
 80056b0:	4618      	mov	r0, r3
 80056b2:	4603      	mov	r3, r0
 80056b4:	005b      	lsls	r3, r3, #1
 80056b6:	4403      	add	r3, r0
 80056b8:	409a      	lsls	r2, r3
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	430a      	orrs	r2, r1
 80056c0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	685b      	ldr	r3, [r3, #4]
 80056c6:	2b06      	cmp	r3, #6
 80056c8:	d824      	bhi.n	8005714 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	685a      	ldr	r2, [r3, #4]
 80056d4:	4613      	mov	r3, r2
 80056d6:	009b      	lsls	r3, r3, #2
 80056d8:	4413      	add	r3, r2
 80056da:	3b05      	subs	r3, #5
 80056dc:	221f      	movs	r2, #31
 80056de:	fa02 f303 	lsl.w	r3, r2, r3
 80056e2:	43da      	mvns	r2, r3
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	400a      	ands	r2, r1
 80056ea:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	b29b      	uxth	r3, r3
 80056f8:	4618      	mov	r0, r3
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	685a      	ldr	r2, [r3, #4]
 80056fe:	4613      	mov	r3, r2
 8005700:	009b      	lsls	r3, r3, #2
 8005702:	4413      	add	r3, r2
 8005704:	3b05      	subs	r3, #5
 8005706:	fa00 f203 	lsl.w	r2, r0, r3
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	430a      	orrs	r2, r1
 8005710:	635a      	str	r2, [r3, #52]	; 0x34
 8005712:	e04c      	b.n	80057ae <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	685b      	ldr	r3, [r3, #4]
 8005718:	2b0c      	cmp	r3, #12
 800571a:	d824      	bhi.n	8005766 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	685a      	ldr	r2, [r3, #4]
 8005726:	4613      	mov	r3, r2
 8005728:	009b      	lsls	r3, r3, #2
 800572a:	4413      	add	r3, r2
 800572c:	3b23      	subs	r3, #35	; 0x23
 800572e:	221f      	movs	r2, #31
 8005730:	fa02 f303 	lsl.w	r3, r2, r3
 8005734:	43da      	mvns	r2, r3
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	400a      	ands	r2, r1
 800573c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	b29b      	uxth	r3, r3
 800574a:	4618      	mov	r0, r3
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	685a      	ldr	r2, [r3, #4]
 8005750:	4613      	mov	r3, r2
 8005752:	009b      	lsls	r3, r3, #2
 8005754:	4413      	add	r3, r2
 8005756:	3b23      	subs	r3, #35	; 0x23
 8005758:	fa00 f203 	lsl.w	r2, r0, r3
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	430a      	orrs	r2, r1
 8005762:	631a      	str	r2, [r3, #48]	; 0x30
 8005764:	e023      	b.n	80057ae <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	685a      	ldr	r2, [r3, #4]
 8005770:	4613      	mov	r3, r2
 8005772:	009b      	lsls	r3, r3, #2
 8005774:	4413      	add	r3, r2
 8005776:	3b41      	subs	r3, #65	; 0x41
 8005778:	221f      	movs	r2, #31
 800577a:	fa02 f303 	lsl.w	r3, r2, r3
 800577e:	43da      	mvns	r2, r3
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	400a      	ands	r2, r1
 8005786:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	b29b      	uxth	r3, r3
 8005794:	4618      	mov	r0, r3
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	685a      	ldr	r2, [r3, #4]
 800579a:	4613      	mov	r3, r2
 800579c:	009b      	lsls	r3, r3, #2
 800579e:	4413      	add	r3, r2
 80057a0:	3b41      	subs	r3, #65	; 0x41
 80057a2:	fa00 f203 	lsl.w	r2, r0, r3
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	430a      	orrs	r2, r1
 80057ac:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80057ae:	4b22      	ldr	r3, [pc, #136]	; (8005838 <HAL_ADC_ConfigChannel+0x234>)
 80057b0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4a21      	ldr	r2, [pc, #132]	; (800583c <HAL_ADC_ConfigChannel+0x238>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d109      	bne.n	80057d0 <HAL_ADC_ConfigChannel+0x1cc>
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	2b12      	cmp	r3, #18
 80057c2:	d105      	bne.n	80057d0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	685b      	ldr	r3, [r3, #4]
 80057c8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4a19      	ldr	r2, [pc, #100]	; (800583c <HAL_ADC_ConfigChannel+0x238>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d123      	bne.n	8005822 <HAL_ADC_ConfigChannel+0x21e>
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	2b10      	cmp	r3, #16
 80057e0:	d003      	beq.n	80057ea <HAL_ADC_ConfigChannel+0x1e6>
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	2b11      	cmp	r3, #17
 80057e8:	d11b      	bne.n	8005822 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	685b      	ldr	r3, [r3, #4]
 80057ee:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	2b10      	cmp	r3, #16
 80057fc:	d111      	bne.n	8005822 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80057fe:	4b10      	ldr	r3, [pc, #64]	; (8005840 <HAL_ADC_ConfigChannel+0x23c>)
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	4a10      	ldr	r2, [pc, #64]	; (8005844 <HAL_ADC_ConfigChannel+0x240>)
 8005804:	fba2 2303 	umull	r2, r3, r2, r3
 8005808:	0c9a      	lsrs	r2, r3, #18
 800580a:	4613      	mov	r3, r2
 800580c:	009b      	lsls	r3, r3, #2
 800580e:	4413      	add	r3, r2
 8005810:	005b      	lsls	r3, r3, #1
 8005812:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005814:	e002      	b.n	800581c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8005816:	68bb      	ldr	r3, [r7, #8]
 8005818:	3b01      	subs	r3, #1
 800581a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d1f9      	bne.n	8005816 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2200      	movs	r2, #0
 8005826:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800582a:	2300      	movs	r3, #0
}
 800582c:	4618      	mov	r0, r3
 800582e:	3714      	adds	r7, #20
 8005830:	46bd      	mov	sp, r7
 8005832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005836:	4770      	bx	lr
 8005838:	40012300 	.word	0x40012300
 800583c:	40012000 	.word	0x40012000
 8005840:	2000000c 	.word	0x2000000c
 8005844:	431bde83 	.word	0x431bde83

08005848 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005848:	b480      	push	{r7}
 800584a:	b085      	sub	sp, #20
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005850:	4b79      	ldr	r3, [pc, #484]	; (8005a38 <ADC_Init+0x1f0>)
 8005852:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	685b      	ldr	r3, [r3, #4]
 8005858:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	685a      	ldr	r2, [r3, #4]
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	685b      	ldr	r3, [r3, #4]
 8005868:	431a      	orrs	r2, r3
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	685a      	ldr	r2, [r3, #4]
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800587c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	6859      	ldr	r1, [r3, #4]
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	691b      	ldr	r3, [r3, #16]
 8005888:	021a      	lsls	r2, r3, #8
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	430a      	orrs	r2, r1
 8005890:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	685a      	ldr	r2, [r3, #4]
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80058a0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	6859      	ldr	r1, [r3, #4]
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	689a      	ldr	r2, [r3, #8]
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	430a      	orrs	r2, r1
 80058b2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	689a      	ldr	r2, [r3, #8]
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80058c2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	6899      	ldr	r1, [r3, #8]
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	68da      	ldr	r2, [r3, #12]
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	430a      	orrs	r2, r1
 80058d4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058da:	4a58      	ldr	r2, [pc, #352]	; (8005a3c <ADC_Init+0x1f4>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d022      	beq.n	8005926 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	689a      	ldr	r2, [r3, #8]
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80058ee:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	6899      	ldr	r1, [r3, #8]
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	430a      	orrs	r2, r1
 8005900:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	689a      	ldr	r2, [r3, #8]
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005910:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	6899      	ldr	r1, [r3, #8]
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	430a      	orrs	r2, r1
 8005922:	609a      	str	r2, [r3, #8]
 8005924:	e00f      	b.n	8005946 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	689a      	ldr	r2, [r3, #8]
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005934:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	689a      	ldr	r2, [r3, #8]
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005944:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	689a      	ldr	r2, [r3, #8]
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f022 0202 	bic.w	r2, r2, #2
 8005954:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	6899      	ldr	r1, [r3, #8]
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	7e1b      	ldrb	r3, [r3, #24]
 8005960:	005a      	lsls	r2, r3, #1
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	430a      	orrs	r2, r1
 8005968:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d01b      	beq.n	80059ac <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	685a      	ldr	r2, [r3, #4]
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005982:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	685a      	ldr	r2, [r3, #4]
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8005992:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	6859      	ldr	r1, [r3, #4]
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800599e:	3b01      	subs	r3, #1
 80059a0:	035a      	lsls	r2, r3, #13
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	430a      	orrs	r2, r1
 80059a8:	605a      	str	r2, [r3, #4]
 80059aa:	e007      	b.n	80059bc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	685a      	ldr	r2, [r3, #4]
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80059ba:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80059ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	69db      	ldr	r3, [r3, #28]
 80059d6:	3b01      	subs	r3, #1
 80059d8:	051a      	lsls	r2, r3, #20
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	430a      	orrs	r2, r1
 80059e0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	689a      	ldr	r2, [r3, #8]
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80059f0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	6899      	ldr	r1, [r3, #8]
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80059fe:	025a      	lsls	r2, r3, #9
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	430a      	orrs	r2, r1
 8005a06:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	689a      	ldr	r2, [r3, #8]
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a16:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	6899      	ldr	r1, [r3, #8]
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	695b      	ldr	r3, [r3, #20]
 8005a22:	029a      	lsls	r2, r3, #10
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	430a      	orrs	r2, r1
 8005a2a:	609a      	str	r2, [r3, #8]
}
 8005a2c:	bf00      	nop
 8005a2e:	3714      	adds	r7, #20
 8005a30:	46bd      	mov	sp, r7
 8005a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a36:	4770      	bx	lr
 8005a38:	40012300 	.word	0x40012300
 8005a3c:	0f000001 	.word	0x0f000001

08005a40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005a40:	b480      	push	{r7}
 8005a42:	b085      	sub	sp, #20
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	f003 0307 	and.w	r3, r3, #7
 8005a4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005a50:	4b0c      	ldr	r3, [pc, #48]	; (8005a84 <__NVIC_SetPriorityGrouping+0x44>)
 8005a52:	68db      	ldr	r3, [r3, #12]
 8005a54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005a56:	68ba      	ldr	r2, [r7, #8]
 8005a58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005a5c:	4013      	ands	r3, r2
 8005a5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005a64:	68bb      	ldr	r3, [r7, #8]
 8005a66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005a68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005a6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005a72:	4a04      	ldr	r2, [pc, #16]	; (8005a84 <__NVIC_SetPriorityGrouping+0x44>)
 8005a74:	68bb      	ldr	r3, [r7, #8]
 8005a76:	60d3      	str	r3, [r2, #12]
}
 8005a78:	bf00      	nop
 8005a7a:	3714      	adds	r7, #20
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a82:	4770      	bx	lr
 8005a84:	e000ed00 	.word	0xe000ed00

08005a88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005a88:	b480      	push	{r7}
 8005a8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005a8c:	4b04      	ldr	r3, [pc, #16]	; (8005aa0 <__NVIC_GetPriorityGrouping+0x18>)
 8005a8e:	68db      	ldr	r3, [r3, #12]
 8005a90:	0a1b      	lsrs	r3, r3, #8
 8005a92:	f003 0307 	and.w	r3, r3, #7
}
 8005a96:	4618      	mov	r0, r3
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9e:	4770      	bx	lr
 8005aa0:	e000ed00 	.word	0xe000ed00

08005aa4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	b083      	sub	sp, #12
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	4603      	mov	r3, r0
 8005aac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005aae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	db0b      	blt.n	8005ace <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005ab6:	79fb      	ldrb	r3, [r7, #7]
 8005ab8:	f003 021f 	and.w	r2, r3, #31
 8005abc:	4907      	ldr	r1, [pc, #28]	; (8005adc <__NVIC_EnableIRQ+0x38>)
 8005abe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ac2:	095b      	lsrs	r3, r3, #5
 8005ac4:	2001      	movs	r0, #1
 8005ac6:	fa00 f202 	lsl.w	r2, r0, r2
 8005aca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005ace:	bf00      	nop
 8005ad0:	370c      	adds	r7, #12
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad8:	4770      	bx	lr
 8005ada:	bf00      	nop
 8005adc:	e000e100 	.word	0xe000e100

08005ae0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	b083      	sub	sp, #12
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	4603      	mov	r3, r0
 8005ae8:	6039      	str	r1, [r7, #0]
 8005aea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005aec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	db0a      	blt.n	8005b0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	b2da      	uxtb	r2, r3
 8005af8:	490c      	ldr	r1, [pc, #48]	; (8005b2c <__NVIC_SetPriority+0x4c>)
 8005afa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005afe:	0112      	lsls	r2, r2, #4
 8005b00:	b2d2      	uxtb	r2, r2
 8005b02:	440b      	add	r3, r1
 8005b04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005b08:	e00a      	b.n	8005b20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	b2da      	uxtb	r2, r3
 8005b0e:	4908      	ldr	r1, [pc, #32]	; (8005b30 <__NVIC_SetPriority+0x50>)
 8005b10:	79fb      	ldrb	r3, [r7, #7]
 8005b12:	f003 030f 	and.w	r3, r3, #15
 8005b16:	3b04      	subs	r3, #4
 8005b18:	0112      	lsls	r2, r2, #4
 8005b1a:	b2d2      	uxtb	r2, r2
 8005b1c:	440b      	add	r3, r1
 8005b1e:	761a      	strb	r2, [r3, #24]
}
 8005b20:	bf00      	nop
 8005b22:	370c      	adds	r7, #12
 8005b24:	46bd      	mov	sp, r7
 8005b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2a:	4770      	bx	lr
 8005b2c:	e000e100 	.word	0xe000e100
 8005b30:	e000ed00 	.word	0xe000ed00

08005b34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005b34:	b480      	push	{r7}
 8005b36:	b089      	sub	sp, #36	; 0x24
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	60f8      	str	r0, [r7, #12]
 8005b3c:	60b9      	str	r1, [r7, #8]
 8005b3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	f003 0307 	and.w	r3, r3, #7
 8005b46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005b48:	69fb      	ldr	r3, [r7, #28]
 8005b4a:	f1c3 0307 	rsb	r3, r3, #7
 8005b4e:	2b04      	cmp	r3, #4
 8005b50:	bf28      	it	cs
 8005b52:	2304      	movcs	r3, #4
 8005b54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005b56:	69fb      	ldr	r3, [r7, #28]
 8005b58:	3304      	adds	r3, #4
 8005b5a:	2b06      	cmp	r3, #6
 8005b5c:	d902      	bls.n	8005b64 <NVIC_EncodePriority+0x30>
 8005b5e:	69fb      	ldr	r3, [r7, #28]
 8005b60:	3b03      	subs	r3, #3
 8005b62:	e000      	b.n	8005b66 <NVIC_EncodePriority+0x32>
 8005b64:	2300      	movs	r3, #0
 8005b66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005b68:	f04f 32ff 	mov.w	r2, #4294967295
 8005b6c:	69bb      	ldr	r3, [r7, #24]
 8005b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8005b72:	43da      	mvns	r2, r3
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	401a      	ands	r2, r3
 8005b78:	697b      	ldr	r3, [r7, #20]
 8005b7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005b7c:	f04f 31ff 	mov.w	r1, #4294967295
 8005b80:	697b      	ldr	r3, [r7, #20]
 8005b82:	fa01 f303 	lsl.w	r3, r1, r3
 8005b86:	43d9      	mvns	r1, r3
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005b8c:	4313      	orrs	r3, r2
         );
}
 8005b8e:	4618      	mov	r0, r3
 8005b90:	3724      	adds	r7, #36	; 0x24
 8005b92:	46bd      	mov	sp, r7
 8005b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b98:	4770      	bx	lr
	...

08005b9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b082      	sub	sp, #8
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	3b01      	subs	r3, #1
 8005ba8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005bac:	d301      	bcc.n	8005bb2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005bae:	2301      	movs	r3, #1
 8005bb0:	e00f      	b.n	8005bd2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005bb2:	4a0a      	ldr	r2, [pc, #40]	; (8005bdc <SysTick_Config+0x40>)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	3b01      	subs	r3, #1
 8005bb8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005bba:	210f      	movs	r1, #15
 8005bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8005bc0:	f7ff ff8e 	bl	8005ae0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005bc4:	4b05      	ldr	r3, [pc, #20]	; (8005bdc <SysTick_Config+0x40>)
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005bca:	4b04      	ldr	r3, [pc, #16]	; (8005bdc <SysTick_Config+0x40>)
 8005bcc:	2207      	movs	r2, #7
 8005bce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005bd0:	2300      	movs	r3, #0
}
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	3708      	adds	r7, #8
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	bd80      	pop	{r7, pc}
 8005bda:	bf00      	nop
 8005bdc:	e000e010 	.word	0xe000e010

08005be0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b082      	sub	sp, #8
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005be8:	6878      	ldr	r0, [r7, #4]
 8005bea:	f7ff ff29 	bl	8005a40 <__NVIC_SetPriorityGrouping>
}
 8005bee:	bf00      	nop
 8005bf0:	3708      	adds	r7, #8
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bd80      	pop	{r7, pc}

08005bf6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005bf6:	b580      	push	{r7, lr}
 8005bf8:	b086      	sub	sp, #24
 8005bfa:	af00      	add	r7, sp, #0
 8005bfc:	4603      	mov	r3, r0
 8005bfe:	60b9      	str	r1, [r7, #8]
 8005c00:	607a      	str	r2, [r7, #4]
 8005c02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005c04:	2300      	movs	r3, #0
 8005c06:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005c08:	f7ff ff3e 	bl	8005a88 <__NVIC_GetPriorityGrouping>
 8005c0c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005c0e:	687a      	ldr	r2, [r7, #4]
 8005c10:	68b9      	ldr	r1, [r7, #8]
 8005c12:	6978      	ldr	r0, [r7, #20]
 8005c14:	f7ff ff8e 	bl	8005b34 <NVIC_EncodePriority>
 8005c18:	4602      	mov	r2, r0
 8005c1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005c1e:	4611      	mov	r1, r2
 8005c20:	4618      	mov	r0, r3
 8005c22:	f7ff ff5d 	bl	8005ae0 <__NVIC_SetPriority>
}
 8005c26:	bf00      	nop
 8005c28:	3718      	adds	r7, #24
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	bd80      	pop	{r7, pc}

08005c2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005c2e:	b580      	push	{r7, lr}
 8005c30:	b082      	sub	sp, #8
 8005c32:	af00      	add	r7, sp, #0
 8005c34:	4603      	mov	r3, r0
 8005c36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005c38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	f7ff ff31 	bl	8005aa4 <__NVIC_EnableIRQ>
}
 8005c42:	bf00      	nop
 8005c44:	3708      	adds	r7, #8
 8005c46:	46bd      	mov	sp, r7
 8005c48:	bd80      	pop	{r7, pc}

08005c4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005c4a:	b580      	push	{r7, lr}
 8005c4c:	b082      	sub	sp, #8
 8005c4e:	af00      	add	r7, sp, #0
 8005c50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005c52:	6878      	ldr	r0, [r7, #4]
 8005c54:	f7ff ffa2 	bl	8005b9c <SysTick_Config>
 8005c58:	4603      	mov	r3, r0
}
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	3708      	adds	r7, #8
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	bd80      	pop	{r7, pc}
	...

08005c64 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b086      	sub	sp, #24
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005c70:	f7ff fc54 	bl	800551c <HAL_GetTick>
 8005c74:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d101      	bne.n	8005c80 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	e099      	b.n	8005db4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2202      	movs	r2, #2
 8005c84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	681a      	ldr	r2, [r3, #0]
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f022 0201 	bic.w	r2, r2, #1
 8005c9e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005ca0:	e00f      	b.n	8005cc2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005ca2:	f7ff fc3b 	bl	800551c <HAL_GetTick>
 8005ca6:	4602      	mov	r2, r0
 8005ca8:	693b      	ldr	r3, [r7, #16]
 8005caa:	1ad3      	subs	r3, r2, r3
 8005cac:	2b05      	cmp	r3, #5
 8005cae:	d908      	bls.n	8005cc2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2220      	movs	r2, #32
 8005cb4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2203      	movs	r2, #3
 8005cba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005cbe:	2303      	movs	r3, #3
 8005cc0:	e078      	b.n	8005db4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f003 0301 	and.w	r3, r3, #1
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d1e8      	bne.n	8005ca2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005cd8:	697a      	ldr	r2, [r7, #20]
 8005cda:	4b38      	ldr	r3, [pc, #224]	; (8005dbc <HAL_DMA_Init+0x158>)
 8005cdc:	4013      	ands	r3, r2
 8005cde:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	685a      	ldr	r2, [r3, #4]
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	689b      	ldr	r3, [r3, #8]
 8005ce8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005cee:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	691b      	ldr	r3, [r3, #16]
 8005cf4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005cfa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	699b      	ldr	r3, [r3, #24]
 8005d00:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005d06:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6a1b      	ldr	r3, [r3, #32]
 8005d0c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005d0e:	697a      	ldr	r2, [r7, #20]
 8005d10:	4313      	orrs	r3, r2
 8005d12:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d18:	2b04      	cmp	r3, #4
 8005d1a:	d107      	bne.n	8005d2c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d24:	4313      	orrs	r3, r2
 8005d26:	697a      	ldr	r2, [r7, #20]
 8005d28:	4313      	orrs	r3, r2
 8005d2a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	697a      	ldr	r2, [r7, #20]
 8005d32:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	695b      	ldr	r3, [r3, #20]
 8005d3a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005d3c:	697b      	ldr	r3, [r7, #20]
 8005d3e:	f023 0307 	bic.w	r3, r3, #7
 8005d42:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d48:	697a      	ldr	r2, [r7, #20]
 8005d4a:	4313      	orrs	r3, r2
 8005d4c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d52:	2b04      	cmp	r3, #4
 8005d54:	d117      	bne.n	8005d86 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d5a:	697a      	ldr	r2, [r7, #20]
 8005d5c:	4313      	orrs	r3, r2
 8005d5e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d00e      	beq.n	8005d86 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005d68:	6878      	ldr	r0, [r7, #4]
 8005d6a:	f000 fb01 	bl	8006370 <DMA_CheckFifoParam>
 8005d6e:	4603      	mov	r3, r0
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d008      	beq.n	8005d86 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2240      	movs	r2, #64	; 0x40
 8005d78:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2201      	movs	r2, #1
 8005d7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005d82:	2301      	movs	r3, #1
 8005d84:	e016      	b.n	8005db4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	697a      	ldr	r2, [r7, #20]
 8005d8c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	f000 fab8 	bl	8006304 <DMA_CalcBaseAndBitshift>
 8005d94:	4603      	mov	r3, r0
 8005d96:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d9c:	223f      	movs	r2, #63	; 0x3f
 8005d9e:	409a      	lsls	r2, r3
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2200      	movs	r2, #0
 8005da8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2201      	movs	r2, #1
 8005dae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005db2:	2300      	movs	r3, #0
}
 8005db4:	4618      	mov	r0, r3
 8005db6:	3718      	adds	r7, #24
 8005db8:	46bd      	mov	sp, r7
 8005dba:	bd80      	pop	{r7, pc}
 8005dbc:	f010803f 	.word	0xf010803f

08005dc0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b086      	sub	sp, #24
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	60f8      	str	r0, [r7, #12]
 8005dc8:	60b9      	str	r1, [r7, #8]
 8005dca:	607a      	str	r2, [r7, #4]
 8005dcc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005dce:	2300      	movs	r3, #0
 8005dd0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005dd6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005dde:	2b01      	cmp	r3, #1
 8005de0:	d101      	bne.n	8005de6 <HAL_DMA_Start_IT+0x26>
 8005de2:	2302      	movs	r3, #2
 8005de4:	e040      	b.n	8005e68 <HAL_DMA_Start_IT+0xa8>
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	2201      	movs	r2, #1
 8005dea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005df4:	b2db      	uxtb	r3, r3
 8005df6:	2b01      	cmp	r3, #1
 8005df8:	d12f      	bne.n	8005e5a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	2202      	movs	r2, #2
 8005dfe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	2200      	movs	r2, #0
 8005e06:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	687a      	ldr	r2, [r7, #4]
 8005e0c:	68b9      	ldr	r1, [r7, #8]
 8005e0e:	68f8      	ldr	r0, [r7, #12]
 8005e10:	f000 fa4a 	bl	80062a8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e18:	223f      	movs	r2, #63	; 0x3f
 8005e1a:	409a      	lsls	r2, r3
 8005e1c:	693b      	ldr	r3, [r7, #16]
 8005e1e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	681a      	ldr	r2, [r3, #0]
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f042 0216 	orr.w	r2, r2, #22
 8005e2e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d007      	beq.n	8005e48 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	681a      	ldr	r2, [r3, #0]
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f042 0208 	orr.w	r2, r2, #8
 8005e46:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	681a      	ldr	r2, [r3, #0]
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f042 0201 	orr.w	r2, r2, #1
 8005e56:	601a      	str	r2, [r3, #0]
 8005e58:	e005      	b.n	8005e66 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005e62:	2302      	movs	r3, #2
 8005e64:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005e66:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e68:	4618      	mov	r0, r3
 8005e6a:	3718      	adds	r7, #24
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	bd80      	pop	{r7, pc}

08005e70 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b084      	sub	sp, #16
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e7c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005e7e:	f7ff fb4d 	bl	800551c <HAL_GetTick>
 8005e82:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005e8a:	b2db      	uxtb	r3, r3
 8005e8c:	2b02      	cmp	r3, #2
 8005e8e:	d008      	beq.n	8005ea2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2280      	movs	r2, #128	; 0x80
 8005e94:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2200      	movs	r2, #0
 8005e9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005e9e:	2301      	movs	r3, #1
 8005ea0:	e052      	b.n	8005f48 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	681a      	ldr	r2, [r3, #0]
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f022 0216 	bic.w	r2, r2, #22
 8005eb0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	695a      	ldr	r2, [r3, #20]
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005ec0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d103      	bne.n	8005ed2 <HAL_DMA_Abort+0x62>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d007      	beq.n	8005ee2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	681a      	ldr	r2, [r3, #0]
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f022 0208 	bic.w	r2, r2, #8
 8005ee0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	681a      	ldr	r2, [r3, #0]
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f022 0201 	bic.w	r2, r2, #1
 8005ef0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005ef2:	e013      	b.n	8005f1c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005ef4:	f7ff fb12 	bl	800551c <HAL_GetTick>
 8005ef8:	4602      	mov	r2, r0
 8005efa:	68bb      	ldr	r3, [r7, #8]
 8005efc:	1ad3      	subs	r3, r2, r3
 8005efe:	2b05      	cmp	r3, #5
 8005f00:	d90c      	bls.n	8005f1c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2220      	movs	r2, #32
 8005f06:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2203      	movs	r2, #3
 8005f0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2200      	movs	r2, #0
 8005f14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8005f18:	2303      	movs	r3, #3
 8005f1a:	e015      	b.n	8005f48 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f003 0301 	and.w	r3, r3, #1
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d1e4      	bne.n	8005ef4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f2e:	223f      	movs	r2, #63	; 0x3f
 8005f30:	409a      	lsls	r2, r3
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2201      	movs	r2, #1
 8005f3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2200      	movs	r2, #0
 8005f42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8005f46:	2300      	movs	r3, #0
}
 8005f48:	4618      	mov	r0, r3
 8005f4a:	3710      	adds	r7, #16
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	bd80      	pop	{r7, pc}

08005f50 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005f50:	b480      	push	{r7}
 8005f52:	b083      	sub	sp, #12
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005f5e:	b2db      	uxtb	r3, r3
 8005f60:	2b02      	cmp	r3, #2
 8005f62:	d004      	beq.n	8005f6e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2280      	movs	r2, #128	; 0x80
 8005f68:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	e00c      	b.n	8005f88 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2205      	movs	r2, #5
 8005f72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	681a      	ldr	r2, [r3, #0]
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f022 0201 	bic.w	r2, r2, #1
 8005f84:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005f86:	2300      	movs	r3, #0
}
 8005f88:	4618      	mov	r0, r3
 8005f8a:	370c      	adds	r7, #12
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f92:	4770      	bx	lr

08005f94 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b086      	sub	sp, #24
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005fa0:	4b8e      	ldr	r3, [pc, #568]	; (80061dc <HAL_DMA_IRQHandler+0x248>)
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4a8e      	ldr	r2, [pc, #568]	; (80061e0 <HAL_DMA_IRQHandler+0x24c>)
 8005fa6:	fba2 2303 	umull	r2, r3, r2, r3
 8005faa:	0a9b      	lsrs	r3, r3, #10
 8005fac:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fb2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005fb4:	693b      	ldr	r3, [r7, #16]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fbe:	2208      	movs	r2, #8
 8005fc0:	409a      	lsls	r2, r3
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	4013      	ands	r3, r2
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d01a      	beq.n	8006000 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f003 0304 	and.w	r3, r3, #4
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d013      	beq.n	8006000 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	681a      	ldr	r2, [r3, #0]
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f022 0204 	bic.w	r2, r2, #4
 8005fe6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fec:	2208      	movs	r2, #8
 8005fee:	409a      	lsls	r2, r3
 8005ff0:	693b      	ldr	r3, [r7, #16]
 8005ff2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ff8:	f043 0201 	orr.w	r2, r3, #1
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006004:	2201      	movs	r2, #1
 8006006:	409a      	lsls	r2, r3
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	4013      	ands	r3, r2
 800600c:	2b00      	cmp	r3, #0
 800600e:	d012      	beq.n	8006036 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	695b      	ldr	r3, [r3, #20]
 8006016:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800601a:	2b00      	cmp	r3, #0
 800601c:	d00b      	beq.n	8006036 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006022:	2201      	movs	r2, #1
 8006024:	409a      	lsls	r2, r3
 8006026:	693b      	ldr	r3, [r7, #16]
 8006028:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800602e:	f043 0202 	orr.w	r2, r3, #2
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800603a:	2204      	movs	r2, #4
 800603c:	409a      	lsls	r2, r3
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	4013      	ands	r3, r2
 8006042:	2b00      	cmp	r3, #0
 8006044:	d012      	beq.n	800606c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f003 0302 	and.w	r3, r3, #2
 8006050:	2b00      	cmp	r3, #0
 8006052:	d00b      	beq.n	800606c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006058:	2204      	movs	r2, #4
 800605a:	409a      	lsls	r2, r3
 800605c:	693b      	ldr	r3, [r7, #16]
 800605e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006064:	f043 0204 	orr.w	r2, r3, #4
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006070:	2210      	movs	r2, #16
 8006072:	409a      	lsls	r2, r3
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	4013      	ands	r3, r2
 8006078:	2b00      	cmp	r3, #0
 800607a:	d043      	beq.n	8006104 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f003 0308 	and.w	r3, r3, #8
 8006086:	2b00      	cmp	r3, #0
 8006088:	d03c      	beq.n	8006104 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800608e:	2210      	movs	r2, #16
 8006090:	409a      	lsls	r2, r3
 8006092:	693b      	ldr	r3, [r7, #16]
 8006094:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d018      	beq.n	80060d6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d108      	bne.n	80060c4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d024      	beq.n	8006104 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060be:	6878      	ldr	r0, [r7, #4]
 80060c0:	4798      	blx	r3
 80060c2:	e01f      	b.n	8006104 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d01b      	beq.n	8006104 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80060d0:	6878      	ldr	r0, [r7, #4]
 80060d2:	4798      	blx	r3
 80060d4:	e016      	b.n	8006104 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d107      	bne.n	80060f4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	681a      	ldr	r2, [r3, #0]
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f022 0208 	bic.w	r2, r2, #8
 80060f2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d003      	beq.n	8006104 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006100:	6878      	ldr	r0, [r7, #4]
 8006102:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006108:	2220      	movs	r2, #32
 800610a:	409a      	lsls	r2, r3
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	4013      	ands	r3, r2
 8006110:	2b00      	cmp	r3, #0
 8006112:	f000 808f 	beq.w	8006234 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f003 0310 	and.w	r3, r3, #16
 8006120:	2b00      	cmp	r3, #0
 8006122:	f000 8087 	beq.w	8006234 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800612a:	2220      	movs	r2, #32
 800612c:	409a      	lsls	r2, r3
 800612e:	693b      	ldr	r3, [r7, #16]
 8006130:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006138:	b2db      	uxtb	r3, r3
 800613a:	2b05      	cmp	r3, #5
 800613c:	d136      	bne.n	80061ac <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	681a      	ldr	r2, [r3, #0]
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f022 0216 	bic.w	r2, r2, #22
 800614c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	695a      	ldr	r2, [r3, #20]
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800615c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006162:	2b00      	cmp	r3, #0
 8006164:	d103      	bne.n	800616e <HAL_DMA_IRQHandler+0x1da>
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800616a:	2b00      	cmp	r3, #0
 800616c:	d007      	beq.n	800617e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	681a      	ldr	r2, [r3, #0]
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f022 0208 	bic.w	r2, r2, #8
 800617c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006182:	223f      	movs	r2, #63	; 0x3f
 8006184:	409a      	lsls	r2, r3
 8006186:	693b      	ldr	r3, [r7, #16]
 8006188:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2201      	movs	r2, #1
 800618e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2200      	movs	r2, #0
 8006196:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d07e      	beq.n	80062a0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061a6:	6878      	ldr	r0, [r7, #4]
 80061a8:	4798      	blx	r3
        }
        return;
 80061aa:	e079      	b.n	80062a0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d01d      	beq.n	80061f6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d10d      	bne.n	80061e4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d031      	beq.n	8006234 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061d4:	6878      	ldr	r0, [r7, #4]
 80061d6:	4798      	blx	r3
 80061d8:	e02c      	b.n	8006234 <HAL_DMA_IRQHandler+0x2a0>
 80061da:	bf00      	nop
 80061dc:	2000000c 	.word	0x2000000c
 80061e0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d023      	beq.n	8006234 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061f0:	6878      	ldr	r0, [r7, #4]
 80061f2:	4798      	blx	r3
 80061f4:	e01e      	b.n	8006234 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006200:	2b00      	cmp	r3, #0
 8006202:	d10f      	bne.n	8006224 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	681a      	ldr	r2, [r3, #0]
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f022 0210 	bic.w	r2, r2, #16
 8006212:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2201      	movs	r2, #1
 8006218:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2200      	movs	r2, #0
 8006220:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006228:	2b00      	cmp	r3, #0
 800622a:	d003      	beq.n	8006234 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006230:	6878      	ldr	r0, [r7, #4]
 8006232:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006238:	2b00      	cmp	r3, #0
 800623a:	d032      	beq.n	80062a2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006240:	f003 0301 	and.w	r3, r3, #1
 8006244:	2b00      	cmp	r3, #0
 8006246:	d022      	beq.n	800628e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2205      	movs	r2, #5
 800624c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	681a      	ldr	r2, [r3, #0]
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f022 0201 	bic.w	r2, r2, #1
 800625e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006260:	68bb      	ldr	r3, [r7, #8]
 8006262:	3301      	adds	r3, #1
 8006264:	60bb      	str	r3, [r7, #8]
 8006266:	697a      	ldr	r2, [r7, #20]
 8006268:	429a      	cmp	r2, r3
 800626a:	d307      	bcc.n	800627c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f003 0301 	and.w	r3, r3, #1
 8006276:	2b00      	cmp	r3, #0
 8006278:	d1f2      	bne.n	8006260 <HAL_DMA_IRQHandler+0x2cc>
 800627a:	e000      	b.n	800627e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800627c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2201      	movs	r2, #1
 8006282:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2200      	movs	r2, #0
 800628a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006292:	2b00      	cmp	r3, #0
 8006294:	d005      	beq.n	80062a2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800629a:	6878      	ldr	r0, [r7, #4]
 800629c:	4798      	blx	r3
 800629e:	e000      	b.n	80062a2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80062a0:	bf00      	nop
    }
  }
}
 80062a2:	3718      	adds	r7, #24
 80062a4:	46bd      	mov	sp, r7
 80062a6:	bd80      	pop	{r7, pc}

080062a8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80062a8:	b480      	push	{r7}
 80062aa:	b085      	sub	sp, #20
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	60f8      	str	r0, [r7, #12]
 80062b0:	60b9      	str	r1, [r7, #8]
 80062b2:	607a      	str	r2, [r7, #4]
 80062b4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	681a      	ldr	r2, [r3, #0]
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80062c4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	683a      	ldr	r2, [r7, #0]
 80062cc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	689b      	ldr	r3, [r3, #8]
 80062d2:	2b40      	cmp	r3, #64	; 0x40
 80062d4:	d108      	bne.n	80062e8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	687a      	ldr	r2, [r7, #4]
 80062dc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	68ba      	ldr	r2, [r7, #8]
 80062e4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80062e6:	e007      	b.n	80062f8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	68ba      	ldr	r2, [r7, #8]
 80062ee:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	687a      	ldr	r2, [r7, #4]
 80062f6:	60da      	str	r2, [r3, #12]
}
 80062f8:	bf00      	nop
 80062fa:	3714      	adds	r7, #20
 80062fc:	46bd      	mov	sp, r7
 80062fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006302:	4770      	bx	lr

08006304 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006304:	b480      	push	{r7}
 8006306:	b085      	sub	sp, #20
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	b2db      	uxtb	r3, r3
 8006312:	3b10      	subs	r3, #16
 8006314:	4a14      	ldr	r2, [pc, #80]	; (8006368 <DMA_CalcBaseAndBitshift+0x64>)
 8006316:	fba2 2303 	umull	r2, r3, r2, r3
 800631a:	091b      	lsrs	r3, r3, #4
 800631c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800631e:	4a13      	ldr	r2, [pc, #76]	; (800636c <DMA_CalcBaseAndBitshift+0x68>)
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	4413      	add	r3, r2
 8006324:	781b      	ldrb	r3, [r3, #0]
 8006326:	461a      	mov	r2, r3
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	2b03      	cmp	r3, #3
 8006330:	d909      	bls.n	8006346 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800633a:	f023 0303 	bic.w	r3, r3, #3
 800633e:	1d1a      	adds	r2, r3, #4
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	659a      	str	r2, [r3, #88]	; 0x58
 8006344:	e007      	b.n	8006356 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800634e:	f023 0303 	bic.w	r3, r3, #3
 8006352:	687a      	ldr	r2, [r7, #4]
 8006354:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800635a:	4618      	mov	r0, r3
 800635c:	3714      	adds	r7, #20
 800635e:	46bd      	mov	sp, r7
 8006360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006364:	4770      	bx	lr
 8006366:	bf00      	nop
 8006368:	aaaaaaab 	.word	0xaaaaaaab
 800636c:	080143e0 	.word	0x080143e0

08006370 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006370:	b480      	push	{r7}
 8006372:	b085      	sub	sp, #20
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006378:	2300      	movs	r3, #0
 800637a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006380:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	699b      	ldr	r3, [r3, #24]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d11f      	bne.n	80063ca <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800638a:	68bb      	ldr	r3, [r7, #8]
 800638c:	2b03      	cmp	r3, #3
 800638e:	d856      	bhi.n	800643e <DMA_CheckFifoParam+0xce>
 8006390:	a201      	add	r2, pc, #4	; (adr r2, 8006398 <DMA_CheckFifoParam+0x28>)
 8006392:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006396:	bf00      	nop
 8006398:	080063a9 	.word	0x080063a9
 800639c:	080063bb 	.word	0x080063bb
 80063a0:	080063a9 	.word	0x080063a9
 80063a4:	0800643f 	.word	0x0800643f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d046      	beq.n	8006442 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80063b4:	2301      	movs	r3, #1
 80063b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80063b8:	e043      	b.n	8006442 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063be:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80063c2:	d140      	bne.n	8006446 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80063c4:	2301      	movs	r3, #1
 80063c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80063c8:	e03d      	b.n	8006446 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	699b      	ldr	r3, [r3, #24]
 80063ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063d2:	d121      	bne.n	8006418 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	2b03      	cmp	r3, #3
 80063d8:	d837      	bhi.n	800644a <DMA_CheckFifoParam+0xda>
 80063da:	a201      	add	r2, pc, #4	; (adr r2, 80063e0 <DMA_CheckFifoParam+0x70>)
 80063dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063e0:	080063f1 	.word	0x080063f1
 80063e4:	080063f7 	.word	0x080063f7
 80063e8:	080063f1 	.word	0x080063f1
 80063ec:	08006409 	.word	0x08006409
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80063f0:	2301      	movs	r3, #1
 80063f2:	73fb      	strb	r3, [r7, #15]
      break;
 80063f4:	e030      	b.n	8006458 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d025      	beq.n	800644e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8006402:	2301      	movs	r3, #1
 8006404:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006406:	e022      	b.n	800644e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800640c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006410:	d11f      	bne.n	8006452 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8006412:	2301      	movs	r3, #1
 8006414:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006416:	e01c      	b.n	8006452 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006418:	68bb      	ldr	r3, [r7, #8]
 800641a:	2b02      	cmp	r3, #2
 800641c:	d903      	bls.n	8006426 <DMA_CheckFifoParam+0xb6>
 800641e:	68bb      	ldr	r3, [r7, #8]
 8006420:	2b03      	cmp	r3, #3
 8006422:	d003      	beq.n	800642c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006424:	e018      	b.n	8006458 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8006426:	2301      	movs	r3, #1
 8006428:	73fb      	strb	r3, [r7, #15]
      break;
 800642a:	e015      	b.n	8006458 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006430:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006434:	2b00      	cmp	r3, #0
 8006436:	d00e      	beq.n	8006456 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006438:	2301      	movs	r3, #1
 800643a:	73fb      	strb	r3, [r7, #15]
      break;
 800643c:	e00b      	b.n	8006456 <DMA_CheckFifoParam+0xe6>
      break;
 800643e:	bf00      	nop
 8006440:	e00a      	b.n	8006458 <DMA_CheckFifoParam+0xe8>
      break;
 8006442:	bf00      	nop
 8006444:	e008      	b.n	8006458 <DMA_CheckFifoParam+0xe8>
      break;
 8006446:	bf00      	nop
 8006448:	e006      	b.n	8006458 <DMA_CheckFifoParam+0xe8>
      break;
 800644a:	bf00      	nop
 800644c:	e004      	b.n	8006458 <DMA_CheckFifoParam+0xe8>
      break;
 800644e:	bf00      	nop
 8006450:	e002      	b.n	8006458 <DMA_CheckFifoParam+0xe8>
      break;   
 8006452:	bf00      	nop
 8006454:	e000      	b.n	8006458 <DMA_CheckFifoParam+0xe8>
      break;
 8006456:	bf00      	nop
    }
  } 
  
  return status; 
 8006458:	7bfb      	ldrb	r3, [r7, #15]
}
 800645a:	4618      	mov	r0, r3
 800645c:	3714      	adds	r7, #20
 800645e:	46bd      	mov	sp, r7
 8006460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006464:	4770      	bx	lr
 8006466:	bf00      	nop

08006468 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006468:	b480      	push	{r7}
 800646a:	b089      	sub	sp, #36	; 0x24
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
 8006470:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006472:	2300      	movs	r3, #0
 8006474:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006476:	2300      	movs	r3, #0
 8006478:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800647a:	2300      	movs	r3, #0
 800647c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800647e:	2300      	movs	r3, #0
 8006480:	61fb      	str	r3, [r7, #28]
 8006482:	e16b      	b.n	800675c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006484:	2201      	movs	r2, #1
 8006486:	69fb      	ldr	r3, [r7, #28]
 8006488:	fa02 f303 	lsl.w	r3, r2, r3
 800648c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	697a      	ldr	r2, [r7, #20]
 8006494:	4013      	ands	r3, r2
 8006496:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006498:	693a      	ldr	r2, [r7, #16]
 800649a:	697b      	ldr	r3, [r7, #20]
 800649c:	429a      	cmp	r2, r3
 800649e:	f040 815a 	bne.w	8006756 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	685b      	ldr	r3, [r3, #4]
 80064a6:	f003 0303 	and.w	r3, r3, #3
 80064aa:	2b01      	cmp	r3, #1
 80064ac:	d005      	beq.n	80064ba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	685b      	ldr	r3, [r3, #4]
 80064b2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80064b6:	2b02      	cmp	r3, #2
 80064b8:	d130      	bne.n	800651c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	689b      	ldr	r3, [r3, #8]
 80064be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80064c0:	69fb      	ldr	r3, [r7, #28]
 80064c2:	005b      	lsls	r3, r3, #1
 80064c4:	2203      	movs	r2, #3
 80064c6:	fa02 f303 	lsl.w	r3, r2, r3
 80064ca:	43db      	mvns	r3, r3
 80064cc:	69ba      	ldr	r2, [r7, #24]
 80064ce:	4013      	ands	r3, r2
 80064d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	68da      	ldr	r2, [r3, #12]
 80064d6:	69fb      	ldr	r3, [r7, #28]
 80064d8:	005b      	lsls	r3, r3, #1
 80064da:	fa02 f303 	lsl.w	r3, r2, r3
 80064de:	69ba      	ldr	r2, [r7, #24]
 80064e0:	4313      	orrs	r3, r2
 80064e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	69ba      	ldr	r2, [r7, #24]
 80064e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	685b      	ldr	r3, [r3, #4]
 80064ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80064f0:	2201      	movs	r2, #1
 80064f2:	69fb      	ldr	r3, [r7, #28]
 80064f4:	fa02 f303 	lsl.w	r3, r2, r3
 80064f8:	43db      	mvns	r3, r3
 80064fa:	69ba      	ldr	r2, [r7, #24]
 80064fc:	4013      	ands	r3, r2
 80064fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	685b      	ldr	r3, [r3, #4]
 8006504:	091b      	lsrs	r3, r3, #4
 8006506:	f003 0201 	and.w	r2, r3, #1
 800650a:	69fb      	ldr	r3, [r7, #28]
 800650c:	fa02 f303 	lsl.w	r3, r2, r3
 8006510:	69ba      	ldr	r2, [r7, #24]
 8006512:	4313      	orrs	r3, r2
 8006514:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	69ba      	ldr	r2, [r7, #24]
 800651a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	685b      	ldr	r3, [r3, #4]
 8006520:	f003 0303 	and.w	r3, r3, #3
 8006524:	2b03      	cmp	r3, #3
 8006526:	d017      	beq.n	8006558 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	68db      	ldr	r3, [r3, #12]
 800652c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800652e:	69fb      	ldr	r3, [r7, #28]
 8006530:	005b      	lsls	r3, r3, #1
 8006532:	2203      	movs	r2, #3
 8006534:	fa02 f303 	lsl.w	r3, r2, r3
 8006538:	43db      	mvns	r3, r3
 800653a:	69ba      	ldr	r2, [r7, #24]
 800653c:	4013      	ands	r3, r2
 800653e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	689a      	ldr	r2, [r3, #8]
 8006544:	69fb      	ldr	r3, [r7, #28]
 8006546:	005b      	lsls	r3, r3, #1
 8006548:	fa02 f303 	lsl.w	r3, r2, r3
 800654c:	69ba      	ldr	r2, [r7, #24]
 800654e:	4313      	orrs	r3, r2
 8006550:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	69ba      	ldr	r2, [r7, #24]
 8006556:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	685b      	ldr	r3, [r3, #4]
 800655c:	f003 0303 	and.w	r3, r3, #3
 8006560:	2b02      	cmp	r3, #2
 8006562:	d123      	bne.n	80065ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006564:	69fb      	ldr	r3, [r7, #28]
 8006566:	08da      	lsrs	r2, r3, #3
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	3208      	adds	r2, #8
 800656c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006570:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006572:	69fb      	ldr	r3, [r7, #28]
 8006574:	f003 0307 	and.w	r3, r3, #7
 8006578:	009b      	lsls	r3, r3, #2
 800657a:	220f      	movs	r2, #15
 800657c:	fa02 f303 	lsl.w	r3, r2, r3
 8006580:	43db      	mvns	r3, r3
 8006582:	69ba      	ldr	r2, [r7, #24]
 8006584:	4013      	ands	r3, r2
 8006586:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	691a      	ldr	r2, [r3, #16]
 800658c:	69fb      	ldr	r3, [r7, #28]
 800658e:	f003 0307 	and.w	r3, r3, #7
 8006592:	009b      	lsls	r3, r3, #2
 8006594:	fa02 f303 	lsl.w	r3, r2, r3
 8006598:	69ba      	ldr	r2, [r7, #24]
 800659a:	4313      	orrs	r3, r2
 800659c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800659e:	69fb      	ldr	r3, [r7, #28]
 80065a0:	08da      	lsrs	r2, r3, #3
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	3208      	adds	r2, #8
 80065a6:	69b9      	ldr	r1, [r7, #24]
 80065a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80065b2:	69fb      	ldr	r3, [r7, #28]
 80065b4:	005b      	lsls	r3, r3, #1
 80065b6:	2203      	movs	r2, #3
 80065b8:	fa02 f303 	lsl.w	r3, r2, r3
 80065bc:	43db      	mvns	r3, r3
 80065be:	69ba      	ldr	r2, [r7, #24]
 80065c0:	4013      	ands	r3, r2
 80065c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	685b      	ldr	r3, [r3, #4]
 80065c8:	f003 0203 	and.w	r2, r3, #3
 80065cc:	69fb      	ldr	r3, [r7, #28]
 80065ce:	005b      	lsls	r3, r3, #1
 80065d0:	fa02 f303 	lsl.w	r3, r2, r3
 80065d4:	69ba      	ldr	r2, [r7, #24]
 80065d6:	4313      	orrs	r3, r2
 80065d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	69ba      	ldr	r2, [r7, #24]
 80065de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	685b      	ldr	r3, [r3, #4]
 80065e4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	f000 80b4 	beq.w	8006756 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80065ee:	2300      	movs	r3, #0
 80065f0:	60fb      	str	r3, [r7, #12]
 80065f2:	4b60      	ldr	r3, [pc, #384]	; (8006774 <HAL_GPIO_Init+0x30c>)
 80065f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065f6:	4a5f      	ldr	r2, [pc, #380]	; (8006774 <HAL_GPIO_Init+0x30c>)
 80065f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80065fc:	6453      	str	r3, [r2, #68]	; 0x44
 80065fe:	4b5d      	ldr	r3, [pc, #372]	; (8006774 <HAL_GPIO_Init+0x30c>)
 8006600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006602:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006606:	60fb      	str	r3, [r7, #12]
 8006608:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800660a:	4a5b      	ldr	r2, [pc, #364]	; (8006778 <HAL_GPIO_Init+0x310>)
 800660c:	69fb      	ldr	r3, [r7, #28]
 800660e:	089b      	lsrs	r3, r3, #2
 8006610:	3302      	adds	r3, #2
 8006612:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006616:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006618:	69fb      	ldr	r3, [r7, #28]
 800661a:	f003 0303 	and.w	r3, r3, #3
 800661e:	009b      	lsls	r3, r3, #2
 8006620:	220f      	movs	r2, #15
 8006622:	fa02 f303 	lsl.w	r3, r2, r3
 8006626:	43db      	mvns	r3, r3
 8006628:	69ba      	ldr	r2, [r7, #24]
 800662a:	4013      	ands	r3, r2
 800662c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	4a52      	ldr	r2, [pc, #328]	; (800677c <HAL_GPIO_Init+0x314>)
 8006632:	4293      	cmp	r3, r2
 8006634:	d02b      	beq.n	800668e <HAL_GPIO_Init+0x226>
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	4a51      	ldr	r2, [pc, #324]	; (8006780 <HAL_GPIO_Init+0x318>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d025      	beq.n	800668a <HAL_GPIO_Init+0x222>
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	4a50      	ldr	r2, [pc, #320]	; (8006784 <HAL_GPIO_Init+0x31c>)
 8006642:	4293      	cmp	r3, r2
 8006644:	d01f      	beq.n	8006686 <HAL_GPIO_Init+0x21e>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	4a4f      	ldr	r2, [pc, #316]	; (8006788 <HAL_GPIO_Init+0x320>)
 800664a:	4293      	cmp	r3, r2
 800664c:	d019      	beq.n	8006682 <HAL_GPIO_Init+0x21a>
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	4a4e      	ldr	r2, [pc, #312]	; (800678c <HAL_GPIO_Init+0x324>)
 8006652:	4293      	cmp	r3, r2
 8006654:	d013      	beq.n	800667e <HAL_GPIO_Init+0x216>
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	4a4d      	ldr	r2, [pc, #308]	; (8006790 <HAL_GPIO_Init+0x328>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d00d      	beq.n	800667a <HAL_GPIO_Init+0x212>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	4a4c      	ldr	r2, [pc, #304]	; (8006794 <HAL_GPIO_Init+0x32c>)
 8006662:	4293      	cmp	r3, r2
 8006664:	d007      	beq.n	8006676 <HAL_GPIO_Init+0x20e>
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	4a4b      	ldr	r2, [pc, #300]	; (8006798 <HAL_GPIO_Init+0x330>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d101      	bne.n	8006672 <HAL_GPIO_Init+0x20a>
 800666e:	2307      	movs	r3, #7
 8006670:	e00e      	b.n	8006690 <HAL_GPIO_Init+0x228>
 8006672:	2308      	movs	r3, #8
 8006674:	e00c      	b.n	8006690 <HAL_GPIO_Init+0x228>
 8006676:	2306      	movs	r3, #6
 8006678:	e00a      	b.n	8006690 <HAL_GPIO_Init+0x228>
 800667a:	2305      	movs	r3, #5
 800667c:	e008      	b.n	8006690 <HAL_GPIO_Init+0x228>
 800667e:	2304      	movs	r3, #4
 8006680:	e006      	b.n	8006690 <HAL_GPIO_Init+0x228>
 8006682:	2303      	movs	r3, #3
 8006684:	e004      	b.n	8006690 <HAL_GPIO_Init+0x228>
 8006686:	2302      	movs	r3, #2
 8006688:	e002      	b.n	8006690 <HAL_GPIO_Init+0x228>
 800668a:	2301      	movs	r3, #1
 800668c:	e000      	b.n	8006690 <HAL_GPIO_Init+0x228>
 800668e:	2300      	movs	r3, #0
 8006690:	69fa      	ldr	r2, [r7, #28]
 8006692:	f002 0203 	and.w	r2, r2, #3
 8006696:	0092      	lsls	r2, r2, #2
 8006698:	4093      	lsls	r3, r2
 800669a:	69ba      	ldr	r2, [r7, #24]
 800669c:	4313      	orrs	r3, r2
 800669e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80066a0:	4935      	ldr	r1, [pc, #212]	; (8006778 <HAL_GPIO_Init+0x310>)
 80066a2:	69fb      	ldr	r3, [r7, #28]
 80066a4:	089b      	lsrs	r3, r3, #2
 80066a6:	3302      	adds	r3, #2
 80066a8:	69ba      	ldr	r2, [r7, #24]
 80066aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80066ae:	4b3b      	ldr	r3, [pc, #236]	; (800679c <HAL_GPIO_Init+0x334>)
 80066b0:	689b      	ldr	r3, [r3, #8]
 80066b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80066b4:	693b      	ldr	r3, [r7, #16]
 80066b6:	43db      	mvns	r3, r3
 80066b8:	69ba      	ldr	r2, [r7, #24]
 80066ba:	4013      	ands	r3, r2
 80066bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	685b      	ldr	r3, [r3, #4]
 80066c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d003      	beq.n	80066d2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80066ca:	69ba      	ldr	r2, [r7, #24]
 80066cc:	693b      	ldr	r3, [r7, #16]
 80066ce:	4313      	orrs	r3, r2
 80066d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80066d2:	4a32      	ldr	r2, [pc, #200]	; (800679c <HAL_GPIO_Init+0x334>)
 80066d4:	69bb      	ldr	r3, [r7, #24]
 80066d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80066d8:	4b30      	ldr	r3, [pc, #192]	; (800679c <HAL_GPIO_Init+0x334>)
 80066da:	68db      	ldr	r3, [r3, #12]
 80066dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80066de:	693b      	ldr	r3, [r7, #16]
 80066e0:	43db      	mvns	r3, r3
 80066e2:	69ba      	ldr	r2, [r7, #24]
 80066e4:	4013      	ands	r3, r2
 80066e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	685b      	ldr	r3, [r3, #4]
 80066ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d003      	beq.n	80066fc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80066f4:	69ba      	ldr	r2, [r7, #24]
 80066f6:	693b      	ldr	r3, [r7, #16]
 80066f8:	4313      	orrs	r3, r2
 80066fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80066fc:	4a27      	ldr	r2, [pc, #156]	; (800679c <HAL_GPIO_Init+0x334>)
 80066fe:	69bb      	ldr	r3, [r7, #24]
 8006700:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006702:	4b26      	ldr	r3, [pc, #152]	; (800679c <HAL_GPIO_Init+0x334>)
 8006704:	685b      	ldr	r3, [r3, #4]
 8006706:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006708:	693b      	ldr	r3, [r7, #16]
 800670a:	43db      	mvns	r3, r3
 800670c:	69ba      	ldr	r2, [r7, #24]
 800670e:	4013      	ands	r3, r2
 8006710:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	685b      	ldr	r3, [r3, #4]
 8006716:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800671a:	2b00      	cmp	r3, #0
 800671c:	d003      	beq.n	8006726 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800671e:	69ba      	ldr	r2, [r7, #24]
 8006720:	693b      	ldr	r3, [r7, #16]
 8006722:	4313      	orrs	r3, r2
 8006724:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006726:	4a1d      	ldr	r2, [pc, #116]	; (800679c <HAL_GPIO_Init+0x334>)
 8006728:	69bb      	ldr	r3, [r7, #24]
 800672a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800672c:	4b1b      	ldr	r3, [pc, #108]	; (800679c <HAL_GPIO_Init+0x334>)
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006732:	693b      	ldr	r3, [r7, #16]
 8006734:	43db      	mvns	r3, r3
 8006736:	69ba      	ldr	r2, [r7, #24]
 8006738:	4013      	ands	r3, r2
 800673a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	685b      	ldr	r3, [r3, #4]
 8006740:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006744:	2b00      	cmp	r3, #0
 8006746:	d003      	beq.n	8006750 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8006748:	69ba      	ldr	r2, [r7, #24]
 800674a:	693b      	ldr	r3, [r7, #16]
 800674c:	4313      	orrs	r3, r2
 800674e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006750:	4a12      	ldr	r2, [pc, #72]	; (800679c <HAL_GPIO_Init+0x334>)
 8006752:	69bb      	ldr	r3, [r7, #24]
 8006754:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006756:	69fb      	ldr	r3, [r7, #28]
 8006758:	3301      	adds	r3, #1
 800675a:	61fb      	str	r3, [r7, #28]
 800675c:	69fb      	ldr	r3, [r7, #28]
 800675e:	2b0f      	cmp	r3, #15
 8006760:	f67f ae90 	bls.w	8006484 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006764:	bf00      	nop
 8006766:	bf00      	nop
 8006768:	3724      	adds	r7, #36	; 0x24
 800676a:	46bd      	mov	sp, r7
 800676c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006770:	4770      	bx	lr
 8006772:	bf00      	nop
 8006774:	40023800 	.word	0x40023800
 8006778:	40013800 	.word	0x40013800
 800677c:	40020000 	.word	0x40020000
 8006780:	40020400 	.word	0x40020400
 8006784:	40020800 	.word	0x40020800
 8006788:	40020c00 	.word	0x40020c00
 800678c:	40021000 	.word	0x40021000
 8006790:	40021400 	.word	0x40021400
 8006794:	40021800 	.word	0x40021800
 8006798:	40021c00 	.word	0x40021c00
 800679c:	40013c00 	.word	0x40013c00

080067a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80067a0:	b480      	push	{r7}
 80067a2:	b083      	sub	sp, #12
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
 80067a8:	460b      	mov	r3, r1
 80067aa:	807b      	strh	r3, [r7, #2]
 80067ac:	4613      	mov	r3, r2
 80067ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80067b0:	787b      	ldrb	r3, [r7, #1]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d003      	beq.n	80067be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80067b6:	887a      	ldrh	r2, [r7, #2]
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80067bc:	e003      	b.n	80067c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80067be:	887b      	ldrh	r3, [r7, #2]
 80067c0:	041a      	lsls	r2, r3, #16
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	619a      	str	r2, [r3, #24]
}
 80067c6:	bf00      	nop
 80067c8:	370c      	adds	r7, #12
 80067ca:	46bd      	mov	sp, r7
 80067cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d0:	4770      	bx	lr

080067d2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80067d2:	b480      	push	{r7}
 80067d4:	b085      	sub	sp, #20
 80067d6:	af00      	add	r7, sp, #0
 80067d8:	6078      	str	r0, [r7, #4]
 80067da:	460b      	mov	r3, r1
 80067dc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	695b      	ldr	r3, [r3, #20]
 80067e2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80067e4:	887a      	ldrh	r2, [r7, #2]
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	4013      	ands	r3, r2
 80067ea:	041a      	lsls	r2, r3, #16
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	43d9      	mvns	r1, r3
 80067f0:	887b      	ldrh	r3, [r7, #2]
 80067f2:	400b      	ands	r3, r1
 80067f4:	431a      	orrs	r2, r3
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	619a      	str	r2, [r3, #24]
}
 80067fa:	bf00      	nop
 80067fc:	3714      	adds	r7, #20
 80067fe:	46bd      	mov	sp, r7
 8006800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006804:	4770      	bx	lr
	...

08006808 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006808:	b580      	push	{r7, lr}
 800680a:	b082      	sub	sp, #8
 800680c:	af00      	add	r7, sp, #0
 800680e:	4603      	mov	r3, r0
 8006810:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8006812:	4b08      	ldr	r3, [pc, #32]	; (8006834 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006814:	695a      	ldr	r2, [r3, #20]
 8006816:	88fb      	ldrh	r3, [r7, #6]
 8006818:	4013      	ands	r3, r2
 800681a:	2b00      	cmp	r3, #0
 800681c:	d006      	beq.n	800682c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800681e:	4a05      	ldr	r2, [pc, #20]	; (8006834 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006820:	88fb      	ldrh	r3, [r7, #6]
 8006822:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006824:	88fb      	ldrh	r3, [r7, #6]
 8006826:	4618      	mov	r0, r3
 8006828:	f7fb fd00 	bl	800222c <HAL_GPIO_EXTI_Callback>
  }
}
 800682c:	bf00      	nop
 800682e:	3708      	adds	r7, #8
 8006830:	46bd      	mov	sp, r7
 8006832:	bd80      	pop	{r7, pc}
 8006834:	40013c00 	.word	0x40013c00

08006838 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006838:	b580      	push	{r7, lr}
 800683a:	b084      	sub	sp, #16
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d101      	bne.n	800684a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006846:	2301      	movs	r3, #1
 8006848:	e12b      	b.n	8006aa2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006850:	b2db      	uxtb	r3, r3
 8006852:	2b00      	cmp	r3, #0
 8006854:	d106      	bne.n	8006864 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2200      	movs	r2, #0
 800685a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800685e:	6878      	ldr	r0, [r7, #4]
 8006860:	f7fd f92a 	bl	8003ab8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2224      	movs	r2, #36	; 0x24
 8006868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	681a      	ldr	r2, [r3, #0]
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f022 0201 	bic.w	r2, r2, #1
 800687a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	681a      	ldr	r2, [r3, #0]
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800688a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	681a      	ldr	r2, [r3, #0]
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800689a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800689c:	f001 fbfc 	bl	8008098 <HAL_RCC_GetPCLK1Freq>
 80068a0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	685b      	ldr	r3, [r3, #4]
 80068a6:	4a81      	ldr	r2, [pc, #516]	; (8006aac <HAL_I2C_Init+0x274>)
 80068a8:	4293      	cmp	r3, r2
 80068aa:	d807      	bhi.n	80068bc <HAL_I2C_Init+0x84>
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	4a80      	ldr	r2, [pc, #512]	; (8006ab0 <HAL_I2C_Init+0x278>)
 80068b0:	4293      	cmp	r3, r2
 80068b2:	bf94      	ite	ls
 80068b4:	2301      	movls	r3, #1
 80068b6:	2300      	movhi	r3, #0
 80068b8:	b2db      	uxtb	r3, r3
 80068ba:	e006      	b.n	80068ca <HAL_I2C_Init+0x92>
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	4a7d      	ldr	r2, [pc, #500]	; (8006ab4 <HAL_I2C_Init+0x27c>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	bf94      	ite	ls
 80068c4:	2301      	movls	r3, #1
 80068c6:	2300      	movhi	r3, #0
 80068c8:	b2db      	uxtb	r3, r3
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d001      	beq.n	80068d2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80068ce:	2301      	movs	r3, #1
 80068d0:	e0e7      	b.n	8006aa2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	4a78      	ldr	r2, [pc, #480]	; (8006ab8 <HAL_I2C_Init+0x280>)
 80068d6:	fba2 2303 	umull	r2, r3, r2, r3
 80068da:	0c9b      	lsrs	r3, r3, #18
 80068dc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	685b      	ldr	r3, [r3, #4]
 80068e4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	68ba      	ldr	r2, [r7, #8]
 80068ee:	430a      	orrs	r2, r1
 80068f0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	6a1b      	ldr	r3, [r3, #32]
 80068f8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	685b      	ldr	r3, [r3, #4]
 8006900:	4a6a      	ldr	r2, [pc, #424]	; (8006aac <HAL_I2C_Init+0x274>)
 8006902:	4293      	cmp	r3, r2
 8006904:	d802      	bhi.n	800690c <HAL_I2C_Init+0xd4>
 8006906:	68bb      	ldr	r3, [r7, #8]
 8006908:	3301      	adds	r3, #1
 800690a:	e009      	b.n	8006920 <HAL_I2C_Init+0xe8>
 800690c:	68bb      	ldr	r3, [r7, #8]
 800690e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006912:	fb02 f303 	mul.w	r3, r2, r3
 8006916:	4a69      	ldr	r2, [pc, #420]	; (8006abc <HAL_I2C_Init+0x284>)
 8006918:	fba2 2303 	umull	r2, r3, r2, r3
 800691c:	099b      	lsrs	r3, r3, #6
 800691e:	3301      	adds	r3, #1
 8006920:	687a      	ldr	r2, [r7, #4]
 8006922:	6812      	ldr	r2, [r2, #0]
 8006924:	430b      	orrs	r3, r1
 8006926:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	69db      	ldr	r3, [r3, #28]
 800692e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006932:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	685b      	ldr	r3, [r3, #4]
 800693a:	495c      	ldr	r1, [pc, #368]	; (8006aac <HAL_I2C_Init+0x274>)
 800693c:	428b      	cmp	r3, r1
 800693e:	d819      	bhi.n	8006974 <HAL_I2C_Init+0x13c>
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	1e59      	subs	r1, r3, #1
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	685b      	ldr	r3, [r3, #4]
 8006948:	005b      	lsls	r3, r3, #1
 800694a:	fbb1 f3f3 	udiv	r3, r1, r3
 800694e:	1c59      	adds	r1, r3, #1
 8006950:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006954:	400b      	ands	r3, r1
 8006956:	2b00      	cmp	r3, #0
 8006958:	d00a      	beq.n	8006970 <HAL_I2C_Init+0x138>
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	1e59      	subs	r1, r3, #1
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	685b      	ldr	r3, [r3, #4]
 8006962:	005b      	lsls	r3, r3, #1
 8006964:	fbb1 f3f3 	udiv	r3, r1, r3
 8006968:	3301      	adds	r3, #1
 800696a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800696e:	e051      	b.n	8006a14 <HAL_I2C_Init+0x1dc>
 8006970:	2304      	movs	r3, #4
 8006972:	e04f      	b.n	8006a14 <HAL_I2C_Init+0x1dc>
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	689b      	ldr	r3, [r3, #8]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d111      	bne.n	80069a0 <HAL_I2C_Init+0x168>
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	1e58      	subs	r0, r3, #1
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	6859      	ldr	r1, [r3, #4]
 8006984:	460b      	mov	r3, r1
 8006986:	005b      	lsls	r3, r3, #1
 8006988:	440b      	add	r3, r1
 800698a:	fbb0 f3f3 	udiv	r3, r0, r3
 800698e:	3301      	adds	r3, #1
 8006990:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006994:	2b00      	cmp	r3, #0
 8006996:	bf0c      	ite	eq
 8006998:	2301      	moveq	r3, #1
 800699a:	2300      	movne	r3, #0
 800699c:	b2db      	uxtb	r3, r3
 800699e:	e012      	b.n	80069c6 <HAL_I2C_Init+0x18e>
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	1e58      	subs	r0, r3, #1
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	6859      	ldr	r1, [r3, #4]
 80069a8:	460b      	mov	r3, r1
 80069aa:	009b      	lsls	r3, r3, #2
 80069ac:	440b      	add	r3, r1
 80069ae:	0099      	lsls	r1, r3, #2
 80069b0:	440b      	add	r3, r1
 80069b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80069b6:	3301      	adds	r3, #1
 80069b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80069bc:	2b00      	cmp	r3, #0
 80069be:	bf0c      	ite	eq
 80069c0:	2301      	moveq	r3, #1
 80069c2:	2300      	movne	r3, #0
 80069c4:	b2db      	uxtb	r3, r3
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d001      	beq.n	80069ce <HAL_I2C_Init+0x196>
 80069ca:	2301      	movs	r3, #1
 80069cc:	e022      	b.n	8006a14 <HAL_I2C_Init+0x1dc>
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	689b      	ldr	r3, [r3, #8]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d10e      	bne.n	80069f4 <HAL_I2C_Init+0x1bc>
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	1e58      	subs	r0, r3, #1
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6859      	ldr	r1, [r3, #4]
 80069de:	460b      	mov	r3, r1
 80069e0:	005b      	lsls	r3, r3, #1
 80069e2:	440b      	add	r3, r1
 80069e4:	fbb0 f3f3 	udiv	r3, r0, r3
 80069e8:	3301      	adds	r3, #1
 80069ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80069ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069f2:	e00f      	b.n	8006a14 <HAL_I2C_Init+0x1dc>
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	1e58      	subs	r0, r3, #1
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	6859      	ldr	r1, [r3, #4]
 80069fc:	460b      	mov	r3, r1
 80069fe:	009b      	lsls	r3, r3, #2
 8006a00:	440b      	add	r3, r1
 8006a02:	0099      	lsls	r1, r3, #2
 8006a04:	440b      	add	r3, r1
 8006a06:	fbb0 f3f3 	udiv	r3, r0, r3
 8006a0a:	3301      	adds	r3, #1
 8006a0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a10:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006a14:	6879      	ldr	r1, [r7, #4]
 8006a16:	6809      	ldr	r1, [r1, #0]
 8006a18:	4313      	orrs	r3, r2
 8006a1a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	69da      	ldr	r2, [r3, #28]
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6a1b      	ldr	r3, [r3, #32]
 8006a2e:	431a      	orrs	r2, r3
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	430a      	orrs	r2, r1
 8006a36:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	689b      	ldr	r3, [r3, #8]
 8006a3e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006a42:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006a46:	687a      	ldr	r2, [r7, #4]
 8006a48:	6911      	ldr	r1, [r2, #16]
 8006a4a:	687a      	ldr	r2, [r7, #4]
 8006a4c:	68d2      	ldr	r2, [r2, #12]
 8006a4e:	4311      	orrs	r1, r2
 8006a50:	687a      	ldr	r2, [r7, #4]
 8006a52:	6812      	ldr	r2, [r2, #0]
 8006a54:	430b      	orrs	r3, r1
 8006a56:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	68db      	ldr	r3, [r3, #12]
 8006a5e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	695a      	ldr	r2, [r3, #20]
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	699b      	ldr	r3, [r3, #24]
 8006a6a:	431a      	orrs	r2, r3
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	430a      	orrs	r2, r1
 8006a72:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	681a      	ldr	r2, [r3, #0]
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f042 0201 	orr.w	r2, r2, #1
 8006a82:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2200      	movs	r2, #0
 8006a88:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2220      	movs	r2, #32
 8006a8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	2200      	movs	r2, #0
 8006a96:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006aa0:	2300      	movs	r3, #0
}
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	3710      	adds	r7, #16
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	bd80      	pop	{r7, pc}
 8006aaa:	bf00      	nop
 8006aac:	000186a0 	.word	0x000186a0
 8006ab0:	001e847f 	.word	0x001e847f
 8006ab4:	003d08ff 	.word	0x003d08ff
 8006ab8:	431bde83 	.word	0x431bde83
 8006abc:	10624dd3 	.word	0x10624dd3

08006ac0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b088      	sub	sp, #32
 8006ac4:	af02      	add	r7, sp, #8
 8006ac6:	60f8      	str	r0, [r7, #12]
 8006ac8:	4608      	mov	r0, r1
 8006aca:	4611      	mov	r1, r2
 8006acc:	461a      	mov	r2, r3
 8006ace:	4603      	mov	r3, r0
 8006ad0:	817b      	strh	r3, [r7, #10]
 8006ad2:	460b      	mov	r3, r1
 8006ad4:	813b      	strh	r3, [r7, #8]
 8006ad6:	4613      	mov	r3, r2
 8006ad8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006ada:	f7fe fd1f 	bl	800551c <HAL_GetTick>
 8006ade:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ae6:	b2db      	uxtb	r3, r3
 8006ae8:	2b20      	cmp	r3, #32
 8006aea:	f040 80d9 	bne.w	8006ca0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006aee:	697b      	ldr	r3, [r7, #20]
 8006af0:	9300      	str	r3, [sp, #0]
 8006af2:	2319      	movs	r3, #25
 8006af4:	2201      	movs	r2, #1
 8006af6:	496d      	ldr	r1, [pc, #436]	; (8006cac <HAL_I2C_Mem_Write+0x1ec>)
 8006af8:	68f8      	ldr	r0, [r7, #12]
 8006afa:	f000 fc7f 	bl	80073fc <I2C_WaitOnFlagUntilTimeout>
 8006afe:	4603      	mov	r3, r0
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d001      	beq.n	8006b08 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8006b04:	2302      	movs	r3, #2
 8006b06:	e0cc      	b.n	8006ca2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b0e:	2b01      	cmp	r3, #1
 8006b10:	d101      	bne.n	8006b16 <HAL_I2C_Mem_Write+0x56>
 8006b12:	2302      	movs	r3, #2
 8006b14:	e0c5      	b.n	8006ca2 <HAL_I2C_Mem_Write+0x1e2>
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	2201      	movs	r2, #1
 8006b1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f003 0301 	and.w	r3, r3, #1
 8006b28:	2b01      	cmp	r3, #1
 8006b2a:	d007      	beq.n	8006b3c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	681a      	ldr	r2, [r3, #0]
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f042 0201 	orr.w	r2, r2, #1
 8006b3a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	681a      	ldr	r2, [r3, #0]
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006b4a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	2221      	movs	r2, #33	; 0x21
 8006b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	2240      	movs	r2, #64	; 0x40
 8006b58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	2200      	movs	r2, #0
 8006b60:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	6a3a      	ldr	r2, [r7, #32]
 8006b66:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006b6c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b72:	b29a      	uxth	r2, r3
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	4a4d      	ldr	r2, [pc, #308]	; (8006cb0 <HAL_I2C_Mem_Write+0x1f0>)
 8006b7c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006b7e:	88f8      	ldrh	r0, [r7, #6]
 8006b80:	893a      	ldrh	r2, [r7, #8]
 8006b82:	8979      	ldrh	r1, [r7, #10]
 8006b84:	697b      	ldr	r3, [r7, #20]
 8006b86:	9301      	str	r3, [sp, #4]
 8006b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b8a:	9300      	str	r3, [sp, #0]
 8006b8c:	4603      	mov	r3, r0
 8006b8e:	68f8      	ldr	r0, [r7, #12]
 8006b90:	f000 fab6 	bl	8007100 <I2C_RequestMemoryWrite>
 8006b94:	4603      	mov	r3, r0
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d052      	beq.n	8006c40 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8006b9a:	2301      	movs	r3, #1
 8006b9c:	e081      	b.n	8006ca2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006b9e:	697a      	ldr	r2, [r7, #20]
 8006ba0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006ba2:	68f8      	ldr	r0, [r7, #12]
 8006ba4:	f000 fd00 	bl	80075a8 <I2C_WaitOnTXEFlagUntilTimeout>
 8006ba8:	4603      	mov	r3, r0
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d00d      	beq.n	8006bca <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bb2:	2b04      	cmp	r3, #4
 8006bb4:	d107      	bne.n	8006bc6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	681a      	ldr	r2, [r3, #0]
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006bc4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006bc6:	2301      	movs	r3, #1
 8006bc8:	e06b      	b.n	8006ca2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bce:	781a      	ldrb	r2, [r3, #0]
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bda:	1c5a      	adds	r2, r3, #1
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006be4:	3b01      	subs	r3, #1
 8006be6:	b29a      	uxth	r2, r3
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bf0:	b29b      	uxth	r3, r3
 8006bf2:	3b01      	subs	r3, #1
 8006bf4:	b29a      	uxth	r2, r3
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	695b      	ldr	r3, [r3, #20]
 8006c00:	f003 0304 	and.w	r3, r3, #4
 8006c04:	2b04      	cmp	r3, #4
 8006c06:	d11b      	bne.n	8006c40 <HAL_I2C_Mem_Write+0x180>
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d017      	beq.n	8006c40 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c14:	781a      	ldrb	r2, [r3, #0]
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c20:	1c5a      	adds	r2, r3, #1
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c2a:	3b01      	subs	r3, #1
 8006c2c:	b29a      	uxth	r2, r3
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c36:	b29b      	uxth	r3, r3
 8006c38:	3b01      	subs	r3, #1
 8006c3a:	b29a      	uxth	r2, r3
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d1aa      	bne.n	8006b9e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006c48:	697a      	ldr	r2, [r7, #20]
 8006c4a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006c4c:	68f8      	ldr	r0, [r7, #12]
 8006c4e:	f000 fcec 	bl	800762a <I2C_WaitOnBTFFlagUntilTimeout>
 8006c52:	4603      	mov	r3, r0
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d00d      	beq.n	8006c74 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c5c:	2b04      	cmp	r3, #4
 8006c5e:	d107      	bne.n	8006c70 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	681a      	ldr	r2, [r3, #0]
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c6e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006c70:	2301      	movs	r3, #1
 8006c72:	e016      	b.n	8006ca2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	681a      	ldr	r2, [r3, #0]
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c82:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	2220      	movs	r2, #32
 8006c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	2200      	movs	r2, #0
 8006c90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	2200      	movs	r2, #0
 8006c98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	e000      	b.n	8006ca2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006ca0:	2302      	movs	r3, #2
  }
}
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	3718      	adds	r7, #24
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	bd80      	pop	{r7, pc}
 8006caa:	bf00      	nop
 8006cac:	00100002 	.word	0x00100002
 8006cb0:	ffff0000 	.word	0xffff0000

08006cb4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b08c      	sub	sp, #48	; 0x30
 8006cb8:	af02      	add	r7, sp, #8
 8006cba:	60f8      	str	r0, [r7, #12]
 8006cbc:	4608      	mov	r0, r1
 8006cbe:	4611      	mov	r1, r2
 8006cc0:	461a      	mov	r2, r3
 8006cc2:	4603      	mov	r3, r0
 8006cc4:	817b      	strh	r3, [r7, #10]
 8006cc6:	460b      	mov	r3, r1
 8006cc8:	813b      	strh	r3, [r7, #8]
 8006cca:	4613      	mov	r3, r2
 8006ccc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006cce:	f7fe fc25 	bl	800551c <HAL_GetTick>
 8006cd2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cda:	b2db      	uxtb	r3, r3
 8006cdc:	2b20      	cmp	r3, #32
 8006cde:	f040 8208 	bne.w	80070f2 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ce4:	9300      	str	r3, [sp, #0]
 8006ce6:	2319      	movs	r3, #25
 8006ce8:	2201      	movs	r2, #1
 8006cea:	497b      	ldr	r1, [pc, #492]	; (8006ed8 <HAL_I2C_Mem_Read+0x224>)
 8006cec:	68f8      	ldr	r0, [r7, #12]
 8006cee:	f000 fb85 	bl	80073fc <I2C_WaitOnFlagUntilTimeout>
 8006cf2:	4603      	mov	r3, r0
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d001      	beq.n	8006cfc <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8006cf8:	2302      	movs	r3, #2
 8006cfa:	e1fb      	b.n	80070f4 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d02:	2b01      	cmp	r3, #1
 8006d04:	d101      	bne.n	8006d0a <HAL_I2C_Mem_Read+0x56>
 8006d06:	2302      	movs	r3, #2
 8006d08:	e1f4      	b.n	80070f4 <HAL_I2C_Mem_Read+0x440>
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	2201      	movs	r2, #1
 8006d0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f003 0301 	and.w	r3, r3, #1
 8006d1c:	2b01      	cmp	r3, #1
 8006d1e:	d007      	beq.n	8006d30 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	681a      	ldr	r2, [r3, #0]
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f042 0201 	orr.w	r2, r2, #1
 8006d2e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	681a      	ldr	r2, [r3, #0]
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006d3e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	2222      	movs	r2, #34	; 0x22
 8006d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	2240      	movs	r2, #64	; 0x40
 8006d4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	2200      	movs	r2, #0
 8006d54:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d5a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8006d60:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d66:	b29a      	uxth	r2, r3
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	4a5b      	ldr	r2, [pc, #364]	; (8006edc <HAL_I2C_Mem_Read+0x228>)
 8006d70:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006d72:	88f8      	ldrh	r0, [r7, #6]
 8006d74:	893a      	ldrh	r2, [r7, #8]
 8006d76:	8979      	ldrh	r1, [r7, #10]
 8006d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d7a:	9301      	str	r3, [sp, #4]
 8006d7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d7e:	9300      	str	r3, [sp, #0]
 8006d80:	4603      	mov	r3, r0
 8006d82:	68f8      	ldr	r0, [r7, #12]
 8006d84:	f000 fa52 	bl	800722c <I2C_RequestMemoryRead>
 8006d88:	4603      	mov	r3, r0
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d001      	beq.n	8006d92 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8006d8e:	2301      	movs	r3, #1
 8006d90:	e1b0      	b.n	80070f4 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d113      	bne.n	8006dc2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	623b      	str	r3, [r7, #32]
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	695b      	ldr	r3, [r3, #20]
 8006da4:	623b      	str	r3, [r7, #32]
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	699b      	ldr	r3, [r3, #24]
 8006dac:	623b      	str	r3, [r7, #32]
 8006dae:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	681a      	ldr	r2, [r3, #0]
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006dbe:	601a      	str	r2, [r3, #0]
 8006dc0:	e184      	b.n	80070cc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006dc6:	2b01      	cmp	r3, #1
 8006dc8:	d11b      	bne.n	8006e02 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	681a      	ldr	r2, [r3, #0]
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006dd8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006dda:	2300      	movs	r3, #0
 8006ddc:	61fb      	str	r3, [r7, #28]
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	695b      	ldr	r3, [r3, #20]
 8006de4:	61fb      	str	r3, [r7, #28]
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	699b      	ldr	r3, [r3, #24]
 8006dec:	61fb      	str	r3, [r7, #28]
 8006dee:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	681a      	ldr	r2, [r3, #0]
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006dfe:	601a      	str	r2, [r3, #0]
 8006e00:	e164      	b.n	80070cc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e06:	2b02      	cmp	r3, #2
 8006e08:	d11b      	bne.n	8006e42 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	681a      	ldr	r2, [r3, #0]
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e18:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	681a      	ldr	r2, [r3, #0]
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006e28:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	61bb      	str	r3, [r7, #24]
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	695b      	ldr	r3, [r3, #20]
 8006e34:	61bb      	str	r3, [r7, #24]
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	699b      	ldr	r3, [r3, #24]
 8006e3c:	61bb      	str	r3, [r7, #24]
 8006e3e:	69bb      	ldr	r3, [r7, #24]
 8006e40:	e144      	b.n	80070cc <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006e42:	2300      	movs	r3, #0
 8006e44:	617b      	str	r3, [r7, #20]
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	695b      	ldr	r3, [r3, #20]
 8006e4c:	617b      	str	r3, [r7, #20]
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	699b      	ldr	r3, [r3, #24]
 8006e54:	617b      	str	r3, [r7, #20]
 8006e56:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006e58:	e138      	b.n	80070cc <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e5e:	2b03      	cmp	r3, #3
 8006e60:	f200 80f1 	bhi.w	8007046 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e68:	2b01      	cmp	r3, #1
 8006e6a:	d123      	bne.n	8006eb4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006e6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e6e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006e70:	68f8      	ldr	r0, [r7, #12]
 8006e72:	f000 fc1b 	bl	80076ac <I2C_WaitOnRXNEFlagUntilTimeout>
 8006e76:	4603      	mov	r3, r0
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d001      	beq.n	8006e80 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006e7c:	2301      	movs	r3, #1
 8006e7e:	e139      	b.n	80070f4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	691a      	ldr	r2, [r3, #16]
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e8a:	b2d2      	uxtb	r2, r2
 8006e8c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e92:	1c5a      	adds	r2, r3, #1
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e9c:	3b01      	subs	r3, #1
 8006e9e:	b29a      	uxth	r2, r3
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ea8:	b29b      	uxth	r3, r3
 8006eaa:	3b01      	subs	r3, #1
 8006eac:	b29a      	uxth	r2, r3
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006eb2:	e10b      	b.n	80070cc <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006eb8:	2b02      	cmp	r3, #2
 8006eba:	d14e      	bne.n	8006f5a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ebe:	9300      	str	r3, [sp, #0]
 8006ec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	4906      	ldr	r1, [pc, #24]	; (8006ee0 <HAL_I2C_Mem_Read+0x22c>)
 8006ec6:	68f8      	ldr	r0, [r7, #12]
 8006ec8:	f000 fa98 	bl	80073fc <I2C_WaitOnFlagUntilTimeout>
 8006ecc:	4603      	mov	r3, r0
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d008      	beq.n	8006ee4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8006ed2:	2301      	movs	r3, #1
 8006ed4:	e10e      	b.n	80070f4 <HAL_I2C_Mem_Read+0x440>
 8006ed6:	bf00      	nop
 8006ed8:	00100002 	.word	0x00100002
 8006edc:	ffff0000 	.word	0xffff0000
 8006ee0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	681a      	ldr	r2, [r3, #0]
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006ef2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	691a      	ldr	r2, [r3, #16]
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006efe:	b2d2      	uxtb	r2, r2
 8006f00:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f06:	1c5a      	adds	r2, r3, #1
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f10:	3b01      	subs	r3, #1
 8006f12:	b29a      	uxth	r2, r3
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f1c:	b29b      	uxth	r3, r3
 8006f1e:	3b01      	subs	r3, #1
 8006f20:	b29a      	uxth	r2, r3
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	691a      	ldr	r2, [r3, #16]
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f30:	b2d2      	uxtb	r2, r2
 8006f32:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f38:	1c5a      	adds	r2, r3, #1
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f42:	3b01      	subs	r3, #1
 8006f44:	b29a      	uxth	r2, r3
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f4e:	b29b      	uxth	r3, r3
 8006f50:	3b01      	subs	r3, #1
 8006f52:	b29a      	uxth	r2, r3
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006f58:	e0b8      	b.n	80070cc <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f5c:	9300      	str	r3, [sp, #0]
 8006f5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f60:	2200      	movs	r2, #0
 8006f62:	4966      	ldr	r1, [pc, #408]	; (80070fc <HAL_I2C_Mem_Read+0x448>)
 8006f64:	68f8      	ldr	r0, [r7, #12]
 8006f66:	f000 fa49 	bl	80073fc <I2C_WaitOnFlagUntilTimeout>
 8006f6a:	4603      	mov	r3, r0
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d001      	beq.n	8006f74 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006f70:	2301      	movs	r3, #1
 8006f72:	e0bf      	b.n	80070f4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	681a      	ldr	r2, [r3, #0]
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f82:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	691a      	ldr	r2, [r3, #16]
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f8e:	b2d2      	uxtb	r2, r2
 8006f90:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f96:	1c5a      	adds	r2, r3, #1
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006fa0:	3b01      	subs	r3, #1
 8006fa2:	b29a      	uxth	r2, r3
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fac:	b29b      	uxth	r3, r3
 8006fae:	3b01      	subs	r3, #1
 8006fb0:	b29a      	uxth	r2, r3
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fb8:	9300      	str	r3, [sp, #0]
 8006fba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	494f      	ldr	r1, [pc, #316]	; (80070fc <HAL_I2C_Mem_Read+0x448>)
 8006fc0:	68f8      	ldr	r0, [r7, #12]
 8006fc2:	f000 fa1b 	bl	80073fc <I2C_WaitOnFlagUntilTimeout>
 8006fc6:	4603      	mov	r3, r0
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d001      	beq.n	8006fd0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006fcc:	2301      	movs	r3, #1
 8006fce:	e091      	b.n	80070f4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	681a      	ldr	r2, [r3, #0]
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006fde:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	691a      	ldr	r2, [r3, #16]
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fea:	b2d2      	uxtb	r2, r2
 8006fec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ff2:	1c5a      	adds	r2, r3, #1
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ffc:	3b01      	subs	r3, #1
 8006ffe:	b29a      	uxth	r2, r3
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007008:	b29b      	uxth	r3, r3
 800700a:	3b01      	subs	r3, #1
 800700c:	b29a      	uxth	r2, r3
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	691a      	ldr	r2, [r3, #16]
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800701c:	b2d2      	uxtb	r2, r2
 800701e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007024:	1c5a      	adds	r2, r3, #1
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800702e:	3b01      	subs	r3, #1
 8007030:	b29a      	uxth	r2, r3
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800703a:	b29b      	uxth	r3, r3
 800703c:	3b01      	subs	r3, #1
 800703e:	b29a      	uxth	r2, r3
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007044:	e042      	b.n	80070cc <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007046:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007048:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800704a:	68f8      	ldr	r0, [r7, #12]
 800704c:	f000 fb2e 	bl	80076ac <I2C_WaitOnRXNEFlagUntilTimeout>
 8007050:	4603      	mov	r3, r0
 8007052:	2b00      	cmp	r3, #0
 8007054:	d001      	beq.n	800705a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8007056:	2301      	movs	r3, #1
 8007058:	e04c      	b.n	80070f4 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	691a      	ldr	r2, [r3, #16]
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007064:	b2d2      	uxtb	r2, r2
 8007066:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800706c:	1c5a      	adds	r2, r3, #1
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007076:	3b01      	subs	r3, #1
 8007078:	b29a      	uxth	r2, r3
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007082:	b29b      	uxth	r3, r3
 8007084:	3b01      	subs	r3, #1
 8007086:	b29a      	uxth	r2, r3
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	695b      	ldr	r3, [r3, #20]
 8007092:	f003 0304 	and.w	r3, r3, #4
 8007096:	2b04      	cmp	r3, #4
 8007098:	d118      	bne.n	80070cc <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	691a      	ldr	r2, [r3, #16]
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070a4:	b2d2      	uxtb	r2, r2
 80070a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070ac:	1c5a      	adds	r2, r3, #1
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80070b6:	3b01      	subs	r3, #1
 80070b8:	b29a      	uxth	r2, r3
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070c2:	b29b      	uxth	r3, r3
 80070c4:	3b01      	subs	r3, #1
 80070c6:	b29a      	uxth	r2, r3
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	f47f aec2 	bne.w	8006e5a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	2220      	movs	r2, #32
 80070da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	2200      	movs	r2, #0
 80070e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	2200      	movs	r2, #0
 80070ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80070ee:	2300      	movs	r3, #0
 80070f0:	e000      	b.n	80070f4 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80070f2:	2302      	movs	r3, #2
  }
}
 80070f4:	4618      	mov	r0, r3
 80070f6:	3728      	adds	r7, #40	; 0x28
 80070f8:	46bd      	mov	sp, r7
 80070fa:	bd80      	pop	{r7, pc}
 80070fc:	00010004 	.word	0x00010004

08007100 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007100:	b580      	push	{r7, lr}
 8007102:	b088      	sub	sp, #32
 8007104:	af02      	add	r7, sp, #8
 8007106:	60f8      	str	r0, [r7, #12]
 8007108:	4608      	mov	r0, r1
 800710a:	4611      	mov	r1, r2
 800710c:	461a      	mov	r2, r3
 800710e:	4603      	mov	r3, r0
 8007110:	817b      	strh	r3, [r7, #10]
 8007112:	460b      	mov	r3, r1
 8007114:	813b      	strh	r3, [r7, #8]
 8007116:	4613      	mov	r3, r2
 8007118:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	681a      	ldr	r2, [r3, #0]
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007128:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800712a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800712c:	9300      	str	r3, [sp, #0]
 800712e:	6a3b      	ldr	r3, [r7, #32]
 8007130:	2200      	movs	r2, #0
 8007132:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007136:	68f8      	ldr	r0, [r7, #12]
 8007138:	f000 f960 	bl	80073fc <I2C_WaitOnFlagUntilTimeout>
 800713c:	4603      	mov	r3, r0
 800713e:	2b00      	cmp	r3, #0
 8007140:	d00d      	beq.n	800715e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800714c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007150:	d103      	bne.n	800715a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007158:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800715a:	2303      	movs	r3, #3
 800715c:	e05f      	b.n	800721e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800715e:	897b      	ldrh	r3, [r7, #10]
 8007160:	b2db      	uxtb	r3, r3
 8007162:	461a      	mov	r2, r3
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800716c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800716e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007170:	6a3a      	ldr	r2, [r7, #32]
 8007172:	492d      	ldr	r1, [pc, #180]	; (8007228 <I2C_RequestMemoryWrite+0x128>)
 8007174:	68f8      	ldr	r0, [r7, #12]
 8007176:	f000 f998 	bl	80074aa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800717a:	4603      	mov	r3, r0
 800717c:	2b00      	cmp	r3, #0
 800717e:	d001      	beq.n	8007184 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8007180:	2301      	movs	r3, #1
 8007182:	e04c      	b.n	800721e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007184:	2300      	movs	r3, #0
 8007186:	617b      	str	r3, [r7, #20]
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	695b      	ldr	r3, [r3, #20]
 800718e:	617b      	str	r3, [r7, #20]
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	699b      	ldr	r3, [r3, #24]
 8007196:	617b      	str	r3, [r7, #20]
 8007198:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800719a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800719c:	6a39      	ldr	r1, [r7, #32]
 800719e:	68f8      	ldr	r0, [r7, #12]
 80071a0:	f000 fa02 	bl	80075a8 <I2C_WaitOnTXEFlagUntilTimeout>
 80071a4:	4603      	mov	r3, r0
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d00d      	beq.n	80071c6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071ae:	2b04      	cmp	r3, #4
 80071b0:	d107      	bne.n	80071c2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	681a      	ldr	r2, [r3, #0]
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80071c0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80071c2:	2301      	movs	r3, #1
 80071c4:	e02b      	b.n	800721e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80071c6:	88fb      	ldrh	r3, [r7, #6]
 80071c8:	2b01      	cmp	r3, #1
 80071ca:	d105      	bne.n	80071d8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80071cc:	893b      	ldrh	r3, [r7, #8]
 80071ce:	b2da      	uxtb	r2, r3
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	611a      	str	r2, [r3, #16]
 80071d6:	e021      	b.n	800721c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80071d8:	893b      	ldrh	r3, [r7, #8]
 80071da:	0a1b      	lsrs	r3, r3, #8
 80071dc:	b29b      	uxth	r3, r3
 80071de:	b2da      	uxtb	r2, r3
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80071e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071e8:	6a39      	ldr	r1, [r7, #32]
 80071ea:	68f8      	ldr	r0, [r7, #12]
 80071ec:	f000 f9dc 	bl	80075a8 <I2C_WaitOnTXEFlagUntilTimeout>
 80071f0:	4603      	mov	r3, r0
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d00d      	beq.n	8007212 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071fa:	2b04      	cmp	r3, #4
 80071fc:	d107      	bne.n	800720e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	681a      	ldr	r2, [r3, #0]
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800720c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800720e:	2301      	movs	r3, #1
 8007210:	e005      	b.n	800721e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007212:	893b      	ldrh	r3, [r7, #8]
 8007214:	b2da      	uxtb	r2, r3
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800721c:	2300      	movs	r3, #0
}
 800721e:	4618      	mov	r0, r3
 8007220:	3718      	adds	r7, #24
 8007222:	46bd      	mov	sp, r7
 8007224:	bd80      	pop	{r7, pc}
 8007226:	bf00      	nop
 8007228:	00010002 	.word	0x00010002

0800722c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800722c:	b580      	push	{r7, lr}
 800722e:	b088      	sub	sp, #32
 8007230:	af02      	add	r7, sp, #8
 8007232:	60f8      	str	r0, [r7, #12]
 8007234:	4608      	mov	r0, r1
 8007236:	4611      	mov	r1, r2
 8007238:	461a      	mov	r2, r3
 800723a:	4603      	mov	r3, r0
 800723c:	817b      	strh	r3, [r7, #10]
 800723e:	460b      	mov	r3, r1
 8007240:	813b      	strh	r3, [r7, #8]
 8007242:	4613      	mov	r3, r2
 8007244:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	681a      	ldr	r2, [r3, #0]
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007254:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	681a      	ldr	r2, [r3, #0]
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007264:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007268:	9300      	str	r3, [sp, #0]
 800726a:	6a3b      	ldr	r3, [r7, #32]
 800726c:	2200      	movs	r2, #0
 800726e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007272:	68f8      	ldr	r0, [r7, #12]
 8007274:	f000 f8c2 	bl	80073fc <I2C_WaitOnFlagUntilTimeout>
 8007278:	4603      	mov	r3, r0
 800727a:	2b00      	cmp	r3, #0
 800727c:	d00d      	beq.n	800729a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007288:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800728c:	d103      	bne.n	8007296 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007294:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007296:	2303      	movs	r3, #3
 8007298:	e0aa      	b.n	80073f0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800729a:	897b      	ldrh	r3, [r7, #10]
 800729c:	b2db      	uxtb	r3, r3
 800729e:	461a      	mov	r2, r3
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80072a8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80072aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072ac:	6a3a      	ldr	r2, [r7, #32]
 80072ae:	4952      	ldr	r1, [pc, #328]	; (80073f8 <I2C_RequestMemoryRead+0x1cc>)
 80072b0:	68f8      	ldr	r0, [r7, #12]
 80072b2:	f000 f8fa 	bl	80074aa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80072b6:	4603      	mov	r3, r0
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d001      	beq.n	80072c0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80072bc:	2301      	movs	r3, #1
 80072be:	e097      	b.n	80073f0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80072c0:	2300      	movs	r3, #0
 80072c2:	617b      	str	r3, [r7, #20]
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	695b      	ldr	r3, [r3, #20]
 80072ca:	617b      	str	r3, [r7, #20]
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	699b      	ldr	r3, [r3, #24]
 80072d2:	617b      	str	r3, [r7, #20]
 80072d4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80072d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072d8:	6a39      	ldr	r1, [r7, #32]
 80072da:	68f8      	ldr	r0, [r7, #12]
 80072dc:	f000 f964 	bl	80075a8 <I2C_WaitOnTXEFlagUntilTimeout>
 80072e0:	4603      	mov	r3, r0
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d00d      	beq.n	8007302 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072ea:	2b04      	cmp	r3, #4
 80072ec:	d107      	bne.n	80072fe <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	681a      	ldr	r2, [r3, #0]
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80072fc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80072fe:	2301      	movs	r3, #1
 8007300:	e076      	b.n	80073f0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007302:	88fb      	ldrh	r3, [r7, #6]
 8007304:	2b01      	cmp	r3, #1
 8007306:	d105      	bne.n	8007314 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007308:	893b      	ldrh	r3, [r7, #8]
 800730a:	b2da      	uxtb	r2, r3
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	611a      	str	r2, [r3, #16]
 8007312:	e021      	b.n	8007358 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007314:	893b      	ldrh	r3, [r7, #8]
 8007316:	0a1b      	lsrs	r3, r3, #8
 8007318:	b29b      	uxth	r3, r3
 800731a:	b2da      	uxtb	r2, r3
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007322:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007324:	6a39      	ldr	r1, [r7, #32]
 8007326:	68f8      	ldr	r0, [r7, #12]
 8007328:	f000 f93e 	bl	80075a8 <I2C_WaitOnTXEFlagUntilTimeout>
 800732c:	4603      	mov	r3, r0
 800732e:	2b00      	cmp	r3, #0
 8007330:	d00d      	beq.n	800734e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007336:	2b04      	cmp	r3, #4
 8007338:	d107      	bne.n	800734a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	681a      	ldr	r2, [r3, #0]
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007348:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800734a:	2301      	movs	r3, #1
 800734c:	e050      	b.n	80073f0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800734e:	893b      	ldrh	r3, [r7, #8]
 8007350:	b2da      	uxtb	r2, r3
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007358:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800735a:	6a39      	ldr	r1, [r7, #32]
 800735c:	68f8      	ldr	r0, [r7, #12]
 800735e:	f000 f923 	bl	80075a8 <I2C_WaitOnTXEFlagUntilTimeout>
 8007362:	4603      	mov	r3, r0
 8007364:	2b00      	cmp	r3, #0
 8007366:	d00d      	beq.n	8007384 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800736c:	2b04      	cmp	r3, #4
 800736e:	d107      	bne.n	8007380 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	681a      	ldr	r2, [r3, #0]
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800737e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007380:	2301      	movs	r3, #1
 8007382:	e035      	b.n	80073f0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	681a      	ldr	r2, [r3, #0]
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007392:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007396:	9300      	str	r3, [sp, #0]
 8007398:	6a3b      	ldr	r3, [r7, #32]
 800739a:	2200      	movs	r2, #0
 800739c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80073a0:	68f8      	ldr	r0, [r7, #12]
 80073a2:	f000 f82b 	bl	80073fc <I2C_WaitOnFlagUntilTimeout>
 80073a6:	4603      	mov	r3, r0
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d00d      	beq.n	80073c8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80073ba:	d103      	bne.n	80073c4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80073c2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80073c4:	2303      	movs	r3, #3
 80073c6:	e013      	b.n	80073f0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80073c8:	897b      	ldrh	r3, [r7, #10]
 80073ca:	b2db      	uxtb	r3, r3
 80073cc:	f043 0301 	orr.w	r3, r3, #1
 80073d0:	b2da      	uxtb	r2, r3
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80073d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073da:	6a3a      	ldr	r2, [r7, #32]
 80073dc:	4906      	ldr	r1, [pc, #24]	; (80073f8 <I2C_RequestMemoryRead+0x1cc>)
 80073de:	68f8      	ldr	r0, [r7, #12]
 80073e0:	f000 f863 	bl	80074aa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80073e4:	4603      	mov	r3, r0
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d001      	beq.n	80073ee <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80073ea:	2301      	movs	r3, #1
 80073ec:	e000      	b.n	80073f0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80073ee:	2300      	movs	r3, #0
}
 80073f0:	4618      	mov	r0, r3
 80073f2:	3718      	adds	r7, #24
 80073f4:	46bd      	mov	sp, r7
 80073f6:	bd80      	pop	{r7, pc}
 80073f8:	00010002 	.word	0x00010002

080073fc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b084      	sub	sp, #16
 8007400:	af00      	add	r7, sp, #0
 8007402:	60f8      	str	r0, [r7, #12]
 8007404:	60b9      	str	r1, [r7, #8]
 8007406:	603b      	str	r3, [r7, #0]
 8007408:	4613      	mov	r3, r2
 800740a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800740c:	e025      	b.n	800745a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007414:	d021      	beq.n	800745a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007416:	f7fe f881 	bl	800551c <HAL_GetTick>
 800741a:	4602      	mov	r2, r0
 800741c:	69bb      	ldr	r3, [r7, #24]
 800741e:	1ad3      	subs	r3, r2, r3
 8007420:	683a      	ldr	r2, [r7, #0]
 8007422:	429a      	cmp	r2, r3
 8007424:	d302      	bcc.n	800742c <I2C_WaitOnFlagUntilTimeout+0x30>
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d116      	bne.n	800745a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	2200      	movs	r2, #0
 8007430:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	2220      	movs	r2, #32
 8007436:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	2200      	movs	r2, #0
 800743e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007446:	f043 0220 	orr.w	r2, r3, #32
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	2200      	movs	r2, #0
 8007452:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007456:	2301      	movs	r3, #1
 8007458:	e023      	b.n	80074a2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800745a:	68bb      	ldr	r3, [r7, #8]
 800745c:	0c1b      	lsrs	r3, r3, #16
 800745e:	b2db      	uxtb	r3, r3
 8007460:	2b01      	cmp	r3, #1
 8007462:	d10d      	bne.n	8007480 <I2C_WaitOnFlagUntilTimeout+0x84>
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	695b      	ldr	r3, [r3, #20]
 800746a:	43da      	mvns	r2, r3
 800746c:	68bb      	ldr	r3, [r7, #8]
 800746e:	4013      	ands	r3, r2
 8007470:	b29b      	uxth	r3, r3
 8007472:	2b00      	cmp	r3, #0
 8007474:	bf0c      	ite	eq
 8007476:	2301      	moveq	r3, #1
 8007478:	2300      	movne	r3, #0
 800747a:	b2db      	uxtb	r3, r3
 800747c:	461a      	mov	r2, r3
 800747e:	e00c      	b.n	800749a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	699b      	ldr	r3, [r3, #24]
 8007486:	43da      	mvns	r2, r3
 8007488:	68bb      	ldr	r3, [r7, #8]
 800748a:	4013      	ands	r3, r2
 800748c:	b29b      	uxth	r3, r3
 800748e:	2b00      	cmp	r3, #0
 8007490:	bf0c      	ite	eq
 8007492:	2301      	moveq	r3, #1
 8007494:	2300      	movne	r3, #0
 8007496:	b2db      	uxtb	r3, r3
 8007498:	461a      	mov	r2, r3
 800749a:	79fb      	ldrb	r3, [r7, #7]
 800749c:	429a      	cmp	r2, r3
 800749e:	d0b6      	beq.n	800740e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80074a0:	2300      	movs	r3, #0
}
 80074a2:	4618      	mov	r0, r3
 80074a4:	3710      	adds	r7, #16
 80074a6:	46bd      	mov	sp, r7
 80074a8:	bd80      	pop	{r7, pc}

080074aa <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80074aa:	b580      	push	{r7, lr}
 80074ac:	b084      	sub	sp, #16
 80074ae:	af00      	add	r7, sp, #0
 80074b0:	60f8      	str	r0, [r7, #12]
 80074b2:	60b9      	str	r1, [r7, #8]
 80074b4:	607a      	str	r2, [r7, #4]
 80074b6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80074b8:	e051      	b.n	800755e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	695b      	ldr	r3, [r3, #20]
 80074c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80074c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80074c8:	d123      	bne.n	8007512 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	681a      	ldr	r2, [r3, #0]
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80074d8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80074e2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	2200      	movs	r2, #0
 80074e8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	2220      	movs	r2, #32
 80074ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	2200      	movs	r2, #0
 80074f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074fe:	f043 0204 	orr.w	r2, r3, #4
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	2200      	movs	r2, #0
 800750a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800750e:	2301      	movs	r3, #1
 8007510:	e046      	b.n	80075a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007518:	d021      	beq.n	800755e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800751a:	f7fd ffff 	bl	800551c <HAL_GetTick>
 800751e:	4602      	mov	r2, r0
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	1ad3      	subs	r3, r2, r3
 8007524:	687a      	ldr	r2, [r7, #4]
 8007526:	429a      	cmp	r2, r3
 8007528:	d302      	bcc.n	8007530 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d116      	bne.n	800755e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	2200      	movs	r2, #0
 8007534:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	2220      	movs	r2, #32
 800753a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	2200      	movs	r2, #0
 8007542:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800754a:	f043 0220 	orr.w	r2, r3, #32
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	2200      	movs	r2, #0
 8007556:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800755a:	2301      	movs	r3, #1
 800755c:	e020      	b.n	80075a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800755e:	68bb      	ldr	r3, [r7, #8]
 8007560:	0c1b      	lsrs	r3, r3, #16
 8007562:	b2db      	uxtb	r3, r3
 8007564:	2b01      	cmp	r3, #1
 8007566:	d10c      	bne.n	8007582 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	695b      	ldr	r3, [r3, #20]
 800756e:	43da      	mvns	r2, r3
 8007570:	68bb      	ldr	r3, [r7, #8]
 8007572:	4013      	ands	r3, r2
 8007574:	b29b      	uxth	r3, r3
 8007576:	2b00      	cmp	r3, #0
 8007578:	bf14      	ite	ne
 800757a:	2301      	movne	r3, #1
 800757c:	2300      	moveq	r3, #0
 800757e:	b2db      	uxtb	r3, r3
 8007580:	e00b      	b.n	800759a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	699b      	ldr	r3, [r3, #24]
 8007588:	43da      	mvns	r2, r3
 800758a:	68bb      	ldr	r3, [r7, #8]
 800758c:	4013      	ands	r3, r2
 800758e:	b29b      	uxth	r3, r3
 8007590:	2b00      	cmp	r3, #0
 8007592:	bf14      	ite	ne
 8007594:	2301      	movne	r3, #1
 8007596:	2300      	moveq	r3, #0
 8007598:	b2db      	uxtb	r3, r3
 800759a:	2b00      	cmp	r3, #0
 800759c:	d18d      	bne.n	80074ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800759e:	2300      	movs	r3, #0
}
 80075a0:	4618      	mov	r0, r3
 80075a2:	3710      	adds	r7, #16
 80075a4:	46bd      	mov	sp, r7
 80075a6:	bd80      	pop	{r7, pc}

080075a8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b084      	sub	sp, #16
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	60f8      	str	r0, [r7, #12]
 80075b0:	60b9      	str	r1, [r7, #8]
 80075b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80075b4:	e02d      	b.n	8007612 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80075b6:	68f8      	ldr	r0, [r7, #12]
 80075b8:	f000 f8ce 	bl	8007758 <I2C_IsAcknowledgeFailed>
 80075bc:	4603      	mov	r3, r0
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d001      	beq.n	80075c6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80075c2:	2301      	movs	r3, #1
 80075c4:	e02d      	b.n	8007622 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80075c6:	68bb      	ldr	r3, [r7, #8]
 80075c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075cc:	d021      	beq.n	8007612 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80075ce:	f7fd ffa5 	bl	800551c <HAL_GetTick>
 80075d2:	4602      	mov	r2, r0
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	1ad3      	subs	r3, r2, r3
 80075d8:	68ba      	ldr	r2, [r7, #8]
 80075da:	429a      	cmp	r2, r3
 80075dc:	d302      	bcc.n	80075e4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80075de:	68bb      	ldr	r3, [r7, #8]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d116      	bne.n	8007612 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	2200      	movs	r2, #0
 80075e8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	2220      	movs	r2, #32
 80075ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	2200      	movs	r2, #0
 80075f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075fe:	f043 0220 	orr.w	r2, r3, #32
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	2200      	movs	r2, #0
 800760a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800760e:	2301      	movs	r3, #1
 8007610:	e007      	b.n	8007622 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	695b      	ldr	r3, [r3, #20]
 8007618:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800761c:	2b80      	cmp	r3, #128	; 0x80
 800761e:	d1ca      	bne.n	80075b6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007620:	2300      	movs	r3, #0
}
 8007622:	4618      	mov	r0, r3
 8007624:	3710      	adds	r7, #16
 8007626:	46bd      	mov	sp, r7
 8007628:	bd80      	pop	{r7, pc}

0800762a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800762a:	b580      	push	{r7, lr}
 800762c:	b084      	sub	sp, #16
 800762e:	af00      	add	r7, sp, #0
 8007630:	60f8      	str	r0, [r7, #12]
 8007632:	60b9      	str	r1, [r7, #8]
 8007634:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007636:	e02d      	b.n	8007694 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007638:	68f8      	ldr	r0, [r7, #12]
 800763a:	f000 f88d 	bl	8007758 <I2C_IsAcknowledgeFailed>
 800763e:	4603      	mov	r3, r0
 8007640:	2b00      	cmp	r3, #0
 8007642:	d001      	beq.n	8007648 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007644:	2301      	movs	r3, #1
 8007646:	e02d      	b.n	80076a4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007648:	68bb      	ldr	r3, [r7, #8]
 800764a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800764e:	d021      	beq.n	8007694 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007650:	f7fd ff64 	bl	800551c <HAL_GetTick>
 8007654:	4602      	mov	r2, r0
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	1ad3      	subs	r3, r2, r3
 800765a:	68ba      	ldr	r2, [r7, #8]
 800765c:	429a      	cmp	r2, r3
 800765e:	d302      	bcc.n	8007666 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007660:	68bb      	ldr	r3, [r7, #8]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d116      	bne.n	8007694 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	2200      	movs	r2, #0
 800766a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	2220      	movs	r2, #32
 8007670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	2200      	movs	r2, #0
 8007678:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007680:	f043 0220 	orr.w	r2, r3, #32
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	2200      	movs	r2, #0
 800768c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007690:	2301      	movs	r3, #1
 8007692:	e007      	b.n	80076a4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	695b      	ldr	r3, [r3, #20]
 800769a:	f003 0304 	and.w	r3, r3, #4
 800769e:	2b04      	cmp	r3, #4
 80076a0:	d1ca      	bne.n	8007638 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80076a2:	2300      	movs	r3, #0
}
 80076a4:	4618      	mov	r0, r3
 80076a6:	3710      	adds	r7, #16
 80076a8:	46bd      	mov	sp, r7
 80076aa:	bd80      	pop	{r7, pc}

080076ac <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b084      	sub	sp, #16
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	60f8      	str	r0, [r7, #12]
 80076b4:	60b9      	str	r1, [r7, #8]
 80076b6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80076b8:	e042      	b.n	8007740 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	695b      	ldr	r3, [r3, #20]
 80076c0:	f003 0310 	and.w	r3, r3, #16
 80076c4:	2b10      	cmp	r3, #16
 80076c6:	d119      	bne.n	80076fc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	f06f 0210 	mvn.w	r2, #16
 80076d0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	2200      	movs	r2, #0
 80076d6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	2220      	movs	r2, #32
 80076dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	2200      	movs	r2, #0
 80076e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	2200      	movs	r2, #0
 80076f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80076f8:	2301      	movs	r3, #1
 80076fa:	e029      	b.n	8007750 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80076fc:	f7fd ff0e 	bl	800551c <HAL_GetTick>
 8007700:	4602      	mov	r2, r0
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	1ad3      	subs	r3, r2, r3
 8007706:	68ba      	ldr	r2, [r7, #8]
 8007708:	429a      	cmp	r2, r3
 800770a:	d302      	bcc.n	8007712 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800770c:	68bb      	ldr	r3, [r7, #8]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d116      	bne.n	8007740 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	2200      	movs	r2, #0
 8007716:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	2220      	movs	r2, #32
 800771c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	2200      	movs	r2, #0
 8007724:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800772c:	f043 0220 	orr.w	r2, r3, #32
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	2200      	movs	r2, #0
 8007738:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800773c:	2301      	movs	r3, #1
 800773e:	e007      	b.n	8007750 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	695b      	ldr	r3, [r3, #20]
 8007746:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800774a:	2b40      	cmp	r3, #64	; 0x40
 800774c:	d1b5      	bne.n	80076ba <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800774e:	2300      	movs	r3, #0
}
 8007750:	4618      	mov	r0, r3
 8007752:	3710      	adds	r7, #16
 8007754:	46bd      	mov	sp, r7
 8007756:	bd80      	pop	{r7, pc}

08007758 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007758:	b480      	push	{r7}
 800775a:	b083      	sub	sp, #12
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	695b      	ldr	r3, [r3, #20]
 8007766:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800776a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800776e:	d11b      	bne.n	80077a8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007778:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	2200      	movs	r2, #0
 800777e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2220      	movs	r2, #32
 8007784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2200      	movs	r2, #0
 800778c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007794:	f043 0204 	orr.w	r2, r3, #4
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2200      	movs	r2, #0
 80077a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80077a4:	2301      	movs	r3, #1
 80077a6:	e000      	b.n	80077aa <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80077a8:	2300      	movs	r3, #0
}
 80077aa:	4618      	mov	r0, r3
 80077ac:	370c      	adds	r7, #12
 80077ae:	46bd      	mov	sp, r7
 80077b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b4:	4770      	bx	lr
	...

080077b8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b086      	sub	sp, #24
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d101      	bne.n	80077ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80077c6:	2301      	movs	r3, #1
 80077c8:	e267      	b.n	8007c9a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	f003 0301 	and.w	r3, r3, #1
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d075      	beq.n	80078c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80077d6:	4b88      	ldr	r3, [pc, #544]	; (80079f8 <HAL_RCC_OscConfig+0x240>)
 80077d8:	689b      	ldr	r3, [r3, #8]
 80077da:	f003 030c 	and.w	r3, r3, #12
 80077de:	2b04      	cmp	r3, #4
 80077e0:	d00c      	beq.n	80077fc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80077e2:	4b85      	ldr	r3, [pc, #532]	; (80079f8 <HAL_RCC_OscConfig+0x240>)
 80077e4:	689b      	ldr	r3, [r3, #8]
 80077e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80077ea:	2b08      	cmp	r3, #8
 80077ec:	d112      	bne.n	8007814 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80077ee:	4b82      	ldr	r3, [pc, #520]	; (80079f8 <HAL_RCC_OscConfig+0x240>)
 80077f0:	685b      	ldr	r3, [r3, #4]
 80077f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80077f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80077fa:	d10b      	bne.n	8007814 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80077fc:	4b7e      	ldr	r3, [pc, #504]	; (80079f8 <HAL_RCC_OscConfig+0x240>)
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007804:	2b00      	cmp	r3, #0
 8007806:	d05b      	beq.n	80078c0 <HAL_RCC_OscConfig+0x108>
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	685b      	ldr	r3, [r3, #4]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d157      	bne.n	80078c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007810:	2301      	movs	r3, #1
 8007812:	e242      	b.n	8007c9a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	685b      	ldr	r3, [r3, #4]
 8007818:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800781c:	d106      	bne.n	800782c <HAL_RCC_OscConfig+0x74>
 800781e:	4b76      	ldr	r3, [pc, #472]	; (80079f8 <HAL_RCC_OscConfig+0x240>)
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	4a75      	ldr	r2, [pc, #468]	; (80079f8 <HAL_RCC_OscConfig+0x240>)
 8007824:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007828:	6013      	str	r3, [r2, #0]
 800782a:	e01d      	b.n	8007868 <HAL_RCC_OscConfig+0xb0>
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	685b      	ldr	r3, [r3, #4]
 8007830:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007834:	d10c      	bne.n	8007850 <HAL_RCC_OscConfig+0x98>
 8007836:	4b70      	ldr	r3, [pc, #448]	; (80079f8 <HAL_RCC_OscConfig+0x240>)
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	4a6f      	ldr	r2, [pc, #444]	; (80079f8 <HAL_RCC_OscConfig+0x240>)
 800783c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007840:	6013      	str	r3, [r2, #0]
 8007842:	4b6d      	ldr	r3, [pc, #436]	; (80079f8 <HAL_RCC_OscConfig+0x240>)
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	4a6c      	ldr	r2, [pc, #432]	; (80079f8 <HAL_RCC_OscConfig+0x240>)
 8007848:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800784c:	6013      	str	r3, [r2, #0]
 800784e:	e00b      	b.n	8007868 <HAL_RCC_OscConfig+0xb0>
 8007850:	4b69      	ldr	r3, [pc, #420]	; (80079f8 <HAL_RCC_OscConfig+0x240>)
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	4a68      	ldr	r2, [pc, #416]	; (80079f8 <HAL_RCC_OscConfig+0x240>)
 8007856:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800785a:	6013      	str	r3, [r2, #0]
 800785c:	4b66      	ldr	r3, [pc, #408]	; (80079f8 <HAL_RCC_OscConfig+0x240>)
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	4a65      	ldr	r2, [pc, #404]	; (80079f8 <HAL_RCC_OscConfig+0x240>)
 8007862:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007866:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	685b      	ldr	r3, [r3, #4]
 800786c:	2b00      	cmp	r3, #0
 800786e:	d013      	beq.n	8007898 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007870:	f7fd fe54 	bl	800551c <HAL_GetTick>
 8007874:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007876:	e008      	b.n	800788a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007878:	f7fd fe50 	bl	800551c <HAL_GetTick>
 800787c:	4602      	mov	r2, r0
 800787e:	693b      	ldr	r3, [r7, #16]
 8007880:	1ad3      	subs	r3, r2, r3
 8007882:	2b64      	cmp	r3, #100	; 0x64
 8007884:	d901      	bls.n	800788a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007886:	2303      	movs	r3, #3
 8007888:	e207      	b.n	8007c9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800788a:	4b5b      	ldr	r3, [pc, #364]	; (80079f8 <HAL_RCC_OscConfig+0x240>)
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007892:	2b00      	cmp	r3, #0
 8007894:	d0f0      	beq.n	8007878 <HAL_RCC_OscConfig+0xc0>
 8007896:	e014      	b.n	80078c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007898:	f7fd fe40 	bl	800551c <HAL_GetTick>
 800789c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800789e:	e008      	b.n	80078b2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80078a0:	f7fd fe3c 	bl	800551c <HAL_GetTick>
 80078a4:	4602      	mov	r2, r0
 80078a6:	693b      	ldr	r3, [r7, #16]
 80078a8:	1ad3      	subs	r3, r2, r3
 80078aa:	2b64      	cmp	r3, #100	; 0x64
 80078ac:	d901      	bls.n	80078b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80078ae:	2303      	movs	r3, #3
 80078b0:	e1f3      	b.n	8007c9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80078b2:	4b51      	ldr	r3, [pc, #324]	; (80079f8 <HAL_RCC_OscConfig+0x240>)
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d1f0      	bne.n	80078a0 <HAL_RCC_OscConfig+0xe8>
 80078be:	e000      	b.n	80078c2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80078c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	f003 0302 	and.w	r3, r3, #2
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d063      	beq.n	8007996 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80078ce:	4b4a      	ldr	r3, [pc, #296]	; (80079f8 <HAL_RCC_OscConfig+0x240>)
 80078d0:	689b      	ldr	r3, [r3, #8]
 80078d2:	f003 030c 	and.w	r3, r3, #12
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d00b      	beq.n	80078f2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80078da:	4b47      	ldr	r3, [pc, #284]	; (80079f8 <HAL_RCC_OscConfig+0x240>)
 80078dc:	689b      	ldr	r3, [r3, #8]
 80078de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80078e2:	2b08      	cmp	r3, #8
 80078e4:	d11c      	bne.n	8007920 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80078e6:	4b44      	ldr	r3, [pc, #272]	; (80079f8 <HAL_RCC_OscConfig+0x240>)
 80078e8:	685b      	ldr	r3, [r3, #4]
 80078ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d116      	bne.n	8007920 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80078f2:	4b41      	ldr	r3, [pc, #260]	; (80079f8 <HAL_RCC_OscConfig+0x240>)
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	f003 0302 	and.w	r3, r3, #2
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d005      	beq.n	800790a <HAL_RCC_OscConfig+0x152>
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	68db      	ldr	r3, [r3, #12]
 8007902:	2b01      	cmp	r3, #1
 8007904:	d001      	beq.n	800790a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007906:	2301      	movs	r3, #1
 8007908:	e1c7      	b.n	8007c9a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800790a:	4b3b      	ldr	r3, [pc, #236]	; (80079f8 <HAL_RCC_OscConfig+0x240>)
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	691b      	ldr	r3, [r3, #16]
 8007916:	00db      	lsls	r3, r3, #3
 8007918:	4937      	ldr	r1, [pc, #220]	; (80079f8 <HAL_RCC_OscConfig+0x240>)
 800791a:	4313      	orrs	r3, r2
 800791c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800791e:	e03a      	b.n	8007996 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	68db      	ldr	r3, [r3, #12]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d020      	beq.n	800796a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007928:	4b34      	ldr	r3, [pc, #208]	; (80079fc <HAL_RCC_OscConfig+0x244>)
 800792a:	2201      	movs	r2, #1
 800792c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800792e:	f7fd fdf5 	bl	800551c <HAL_GetTick>
 8007932:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007934:	e008      	b.n	8007948 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007936:	f7fd fdf1 	bl	800551c <HAL_GetTick>
 800793a:	4602      	mov	r2, r0
 800793c:	693b      	ldr	r3, [r7, #16]
 800793e:	1ad3      	subs	r3, r2, r3
 8007940:	2b02      	cmp	r3, #2
 8007942:	d901      	bls.n	8007948 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007944:	2303      	movs	r3, #3
 8007946:	e1a8      	b.n	8007c9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007948:	4b2b      	ldr	r3, [pc, #172]	; (80079f8 <HAL_RCC_OscConfig+0x240>)
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	f003 0302 	and.w	r3, r3, #2
 8007950:	2b00      	cmp	r3, #0
 8007952:	d0f0      	beq.n	8007936 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007954:	4b28      	ldr	r3, [pc, #160]	; (80079f8 <HAL_RCC_OscConfig+0x240>)
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	691b      	ldr	r3, [r3, #16]
 8007960:	00db      	lsls	r3, r3, #3
 8007962:	4925      	ldr	r1, [pc, #148]	; (80079f8 <HAL_RCC_OscConfig+0x240>)
 8007964:	4313      	orrs	r3, r2
 8007966:	600b      	str	r3, [r1, #0]
 8007968:	e015      	b.n	8007996 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800796a:	4b24      	ldr	r3, [pc, #144]	; (80079fc <HAL_RCC_OscConfig+0x244>)
 800796c:	2200      	movs	r2, #0
 800796e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007970:	f7fd fdd4 	bl	800551c <HAL_GetTick>
 8007974:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007976:	e008      	b.n	800798a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007978:	f7fd fdd0 	bl	800551c <HAL_GetTick>
 800797c:	4602      	mov	r2, r0
 800797e:	693b      	ldr	r3, [r7, #16]
 8007980:	1ad3      	subs	r3, r2, r3
 8007982:	2b02      	cmp	r3, #2
 8007984:	d901      	bls.n	800798a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007986:	2303      	movs	r3, #3
 8007988:	e187      	b.n	8007c9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800798a:	4b1b      	ldr	r3, [pc, #108]	; (80079f8 <HAL_RCC_OscConfig+0x240>)
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	f003 0302 	and.w	r3, r3, #2
 8007992:	2b00      	cmp	r3, #0
 8007994:	d1f0      	bne.n	8007978 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	f003 0308 	and.w	r3, r3, #8
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d036      	beq.n	8007a10 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	695b      	ldr	r3, [r3, #20]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d016      	beq.n	80079d8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80079aa:	4b15      	ldr	r3, [pc, #84]	; (8007a00 <HAL_RCC_OscConfig+0x248>)
 80079ac:	2201      	movs	r2, #1
 80079ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80079b0:	f7fd fdb4 	bl	800551c <HAL_GetTick>
 80079b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80079b6:	e008      	b.n	80079ca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80079b8:	f7fd fdb0 	bl	800551c <HAL_GetTick>
 80079bc:	4602      	mov	r2, r0
 80079be:	693b      	ldr	r3, [r7, #16]
 80079c0:	1ad3      	subs	r3, r2, r3
 80079c2:	2b02      	cmp	r3, #2
 80079c4:	d901      	bls.n	80079ca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80079c6:	2303      	movs	r3, #3
 80079c8:	e167      	b.n	8007c9a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80079ca:	4b0b      	ldr	r3, [pc, #44]	; (80079f8 <HAL_RCC_OscConfig+0x240>)
 80079cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80079ce:	f003 0302 	and.w	r3, r3, #2
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d0f0      	beq.n	80079b8 <HAL_RCC_OscConfig+0x200>
 80079d6:	e01b      	b.n	8007a10 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80079d8:	4b09      	ldr	r3, [pc, #36]	; (8007a00 <HAL_RCC_OscConfig+0x248>)
 80079da:	2200      	movs	r2, #0
 80079dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80079de:	f7fd fd9d 	bl	800551c <HAL_GetTick>
 80079e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80079e4:	e00e      	b.n	8007a04 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80079e6:	f7fd fd99 	bl	800551c <HAL_GetTick>
 80079ea:	4602      	mov	r2, r0
 80079ec:	693b      	ldr	r3, [r7, #16]
 80079ee:	1ad3      	subs	r3, r2, r3
 80079f0:	2b02      	cmp	r3, #2
 80079f2:	d907      	bls.n	8007a04 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80079f4:	2303      	movs	r3, #3
 80079f6:	e150      	b.n	8007c9a <HAL_RCC_OscConfig+0x4e2>
 80079f8:	40023800 	.word	0x40023800
 80079fc:	42470000 	.word	0x42470000
 8007a00:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007a04:	4b88      	ldr	r3, [pc, #544]	; (8007c28 <HAL_RCC_OscConfig+0x470>)
 8007a06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a08:	f003 0302 	and.w	r3, r3, #2
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d1ea      	bne.n	80079e6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	f003 0304 	and.w	r3, r3, #4
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	f000 8097 	beq.w	8007b4c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007a1e:	2300      	movs	r3, #0
 8007a20:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007a22:	4b81      	ldr	r3, [pc, #516]	; (8007c28 <HAL_RCC_OscConfig+0x470>)
 8007a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d10f      	bne.n	8007a4e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007a2e:	2300      	movs	r3, #0
 8007a30:	60bb      	str	r3, [r7, #8]
 8007a32:	4b7d      	ldr	r3, [pc, #500]	; (8007c28 <HAL_RCC_OscConfig+0x470>)
 8007a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a36:	4a7c      	ldr	r2, [pc, #496]	; (8007c28 <HAL_RCC_OscConfig+0x470>)
 8007a38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007a3c:	6413      	str	r3, [r2, #64]	; 0x40
 8007a3e:	4b7a      	ldr	r3, [pc, #488]	; (8007c28 <HAL_RCC_OscConfig+0x470>)
 8007a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a46:	60bb      	str	r3, [r7, #8]
 8007a48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007a4a:	2301      	movs	r3, #1
 8007a4c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007a4e:	4b77      	ldr	r3, [pc, #476]	; (8007c2c <HAL_RCC_OscConfig+0x474>)
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d118      	bne.n	8007a8c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007a5a:	4b74      	ldr	r3, [pc, #464]	; (8007c2c <HAL_RCC_OscConfig+0x474>)
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	4a73      	ldr	r2, [pc, #460]	; (8007c2c <HAL_RCC_OscConfig+0x474>)
 8007a60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007a64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007a66:	f7fd fd59 	bl	800551c <HAL_GetTick>
 8007a6a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007a6c:	e008      	b.n	8007a80 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007a6e:	f7fd fd55 	bl	800551c <HAL_GetTick>
 8007a72:	4602      	mov	r2, r0
 8007a74:	693b      	ldr	r3, [r7, #16]
 8007a76:	1ad3      	subs	r3, r2, r3
 8007a78:	2b02      	cmp	r3, #2
 8007a7a:	d901      	bls.n	8007a80 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007a7c:	2303      	movs	r3, #3
 8007a7e:	e10c      	b.n	8007c9a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007a80:	4b6a      	ldr	r3, [pc, #424]	; (8007c2c <HAL_RCC_OscConfig+0x474>)
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d0f0      	beq.n	8007a6e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	689b      	ldr	r3, [r3, #8]
 8007a90:	2b01      	cmp	r3, #1
 8007a92:	d106      	bne.n	8007aa2 <HAL_RCC_OscConfig+0x2ea>
 8007a94:	4b64      	ldr	r3, [pc, #400]	; (8007c28 <HAL_RCC_OscConfig+0x470>)
 8007a96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a98:	4a63      	ldr	r2, [pc, #396]	; (8007c28 <HAL_RCC_OscConfig+0x470>)
 8007a9a:	f043 0301 	orr.w	r3, r3, #1
 8007a9e:	6713      	str	r3, [r2, #112]	; 0x70
 8007aa0:	e01c      	b.n	8007adc <HAL_RCC_OscConfig+0x324>
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	689b      	ldr	r3, [r3, #8]
 8007aa6:	2b05      	cmp	r3, #5
 8007aa8:	d10c      	bne.n	8007ac4 <HAL_RCC_OscConfig+0x30c>
 8007aaa:	4b5f      	ldr	r3, [pc, #380]	; (8007c28 <HAL_RCC_OscConfig+0x470>)
 8007aac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007aae:	4a5e      	ldr	r2, [pc, #376]	; (8007c28 <HAL_RCC_OscConfig+0x470>)
 8007ab0:	f043 0304 	orr.w	r3, r3, #4
 8007ab4:	6713      	str	r3, [r2, #112]	; 0x70
 8007ab6:	4b5c      	ldr	r3, [pc, #368]	; (8007c28 <HAL_RCC_OscConfig+0x470>)
 8007ab8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007aba:	4a5b      	ldr	r2, [pc, #364]	; (8007c28 <HAL_RCC_OscConfig+0x470>)
 8007abc:	f043 0301 	orr.w	r3, r3, #1
 8007ac0:	6713      	str	r3, [r2, #112]	; 0x70
 8007ac2:	e00b      	b.n	8007adc <HAL_RCC_OscConfig+0x324>
 8007ac4:	4b58      	ldr	r3, [pc, #352]	; (8007c28 <HAL_RCC_OscConfig+0x470>)
 8007ac6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ac8:	4a57      	ldr	r2, [pc, #348]	; (8007c28 <HAL_RCC_OscConfig+0x470>)
 8007aca:	f023 0301 	bic.w	r3, r3, #1
 8007ace:	6713      	str	r3, [r2, #112]	; 0x70
 8007ad0:	4b55      	ldr	r3, [pc, #340]	; (8007c28 <HAL_RCC_OscConfig+0x470>)
 8007ad2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ad4:	4a54      	ldr	r2, [pc, #336]	; (8007c28 <HAL_RCC_OscConfig+0x470>)
 8007ad6:	f023 0304 	bic.w	r3, r3, #4
 8007ada:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	689b      	ldr	r3, [r3, #8]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d015      	beq.n	8007b10 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ae4:	f7fd fd1a 	bl	800551c <HAL_GetTick>
 8007ae8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007aea:	e00a      	b.n	8007b02 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007aec:	f7fd fd16 	bl	800551c <HAL_GetTick>
 8007af0:	4602      	mov	r2, r0
 8007af2:	693b      	ldr	r3, [r7, #16]
 8007af4:	1ad3      	subs	r3, r2, r3
 8007af6:	f241 3288 	movw	r2, #5000	; 0x1388
 8007afa:	4293      	cmp	r3, r2
 8007afc:	d901      	bls.n	8007b02 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007afe:	2303      	movs	r3, #3
 8007b00:	e0cb      	b.n	8007c9a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007b02:	4b49      	ldr	r3, [pc, #292]	; (8007c28 <HAL_RCC_OscConfig+0x470>)
 8007b04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b06:	f003 0302 	and.w	r3, r3, #2
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d0ee      	beq.n	8007aec <HAL_RCC_OscConfig+0x334>
 8007b0e:	e014      	b.n	8007b3a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007b10:	f7fd fd04 	bl	800551c <HAL_GetTick>
 8007b14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007b16:	e00a      	b.n	8007b2e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007b18:	f7fd fd00 	bl	800551c <HAL_GetTick>
 8007b1c:	4602      	mov	r2, r0
 8007b1e:	693b      	ldr	r3, [r7, #16]
 8007b20:	1ad3      	subs	r3, r2, r3
 8007b22:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b26:	4293      	cmp	r3, r2
 8007b28:	d901      	bls.n	8007b2e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007b2a:	2303      	movs	r3, #3
 8007b2c:	e0b5      	b.n	8007c9a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007b2e:	4b3e      	ldr	r3, [pc, #248]	; (8007c28 <HAL_RCC_OscConfig+0x470>)
 8007b30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b32:	f003 0302 	and.w	r3, r3, #2
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d1ee      	bne.n	8007b18 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007b3a:	7dfb      	ldrb	r3, [r7, #23]
 8007b3c:	2b01      	cmp	r3, #1
 8007b3e:	d105      	bne.n	8007b4c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007b40:	4b39      	ldr	r3, [pc, #228]	; (8007c28 <HAL_RCC_OscConfig+0x470>)
 8007b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b44:	4a38      	ldr	r2, [pc, #224]	; (8007c28 <HAL_RCC_OscConfig+0x470>)
 8007b46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007b4a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	699b      	ldr	r3, [r3, #24]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	f000 80a1 	beq.w	8007c98 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007b56:	4b34      	ldr	r3, [pc, #208]	; (8007c28 <HAL_RCC_OscConfig+0x470>)
 8007b58:	689b      	ldr	r3, [r3, #8]
 8007b5a:	f003 030c 	and.w	r3, r3, #12
 8007b5e:	2b08      	cmp	r3, #8
 8007b60:	d05c      	beq.n	8007c1c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	699b      	ldr	r3, [r3, #24]
 8007b66:	2b02      	cmp	r3, #2
 8007b68:	d141      	bne.n	8007bee <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007b6a:	4b31      	ldr	r3, [pc, #196]	; (8007c30 <HAL_RCC_OscConfig+0x478>)
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007b70:	f7fd fcd4 	bl	800551c <HAL_GetTick>
 8007b74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007b76:	e008      	b.n	8007b8a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007b78:	f7fd fcd0 	bl	800551c <HAL_GetTick>
 8007b7c:	4602      	mov	r2, r0
 8007b7e:	693b      	ldr	r3, [r7, #16]
 8007b80:	1ad3      	subs	r3, r2, r3
 8007b82:	2b02      	cmp	r3, #2
 8007b84:	d901      	bls.n	8007b8a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007b86:	2303      	movs	r3, #3
 8007b88:	e087      	b.n	8007c9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007b8a:	4b27      	ldr	r3, [pc, #156]	; (8007c28 <HAL_RCC_OscConfig+0x470>)
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d1f0      	bne.n	8007b78 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	69da      	ldr	r2, [r3, #28]
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	6a1b      	ldr	r3, [r3, #32]
 8007b9e:	431a      	orrs	r2, r3
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ba4:	019b      	lsls	r3, r3, #6
 8007ba6:	431a      	orrs	r2, r3
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bac:	085b      	lsrs	r3, r3, #1
 8007bae:	3b01      	subs	r3, #1
 8007bb0:	041b      	lsls	r3, r3, #16
 8007bb2:	431a      	orrs	r2, r3
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bb8:	061b      	lsls	r3, r3, #24
 8007bba:	491b      	ldr	r1, [pc, #108]	; (8007c28 <HAL_RCC_OscConfig+0x470>)
 8007bbc:	4313      	orrs	r3, r2
 8007bbe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007bc0:	4b1b      	ldr	r3, [pc, #108]	; (8007c30 <HAL_RCC_OscConfig+0x478>)
 8007bc2:	2201      	movs	r2, #1
 8007bc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007bc6:	f7fd fca9 	bl	800551c <HAL_GetTick>
 8007bca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007bcc:	e008      	b.n	8007be0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007bce:	f7fd fca5 	bl	800551c <HAL_GetTick>
 8007bd2:	4602      	mov	r2, r0
 8007bd4:	693b      	ldr	r3, [r7, #16]
 8007bd6:	1ad3      	subs	r3, r2, r3
 8007bd8:	2b02      	cmp	r3, #2
 8007bda:	d901      	bls.n	8007be0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007bdc:	2303      	movs	r3, #3
 8007bde:	e05c      	b.n	8007c9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007be0:	4b11      	ldr	r3, [pc, #68]	; (8007c28 <HAL_RCC_OscConfig+0x470>)
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d0f0      	beq.n	8007bce <HAL_RCC_OscConfig+0x416>
 8007bec:	e054      	b.n	8007c98 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007bee:	4b10      	ldr	r3, [pc, #64]	; (8007c30 <HAL_RCC_OscConfig+0x478>)
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007bf4:	f7fd fc92 	bl	800551c <HAL_GetTick>
 8007bf8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007bfa:	e008      	b.n	8007c0e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007bfc:	f7fd fc8e 	bl	800551c <HAL_GetTick>
 8007c00:	4602      	mov	r2, r0
 8007c02:	693b      	ldr	r3, [r7, #16]
 8007c04:	1ad3      	subs	r3, r2, r3
 8007c06:	2b02      	cmp	r3, #2
 8007c08:	d901      	bls.n	8007c0e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007c0a:	2303      	movs	r3, #3
 8007c0c:	e045      	b.n	8007c9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007c0e:	4b06      	ldr	r3, [pc, #24]	; (8007c28 <HAL_RCC_OscConfig+0x470>)
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d1f0      	bne.n	8007bfc <HAL_RCC_OscConfig+0x444>
 8007c1a:	e03d      	b.n	8007c98 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	699b      	ldr	r3, [r3, #24]
 8007c20:	2b01      	cmp	r3, #1
 8007c22:	d107      	bne.n	8007c34 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007c24:	2301      	movs	r3, #1
 8007c26:	e038      	b.n	8007c9a <HAL_RCC_OscConfig+0x4e2>
 8007c28:	40023800 	.word	0x40023800
 8007c2c:	40007000 	.word	0x40007000
 8007c30:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007c34:	4b1b      	ldr	r3, [pc, #108]	; (8007ca4 <HAL_RCC_OscConfig+0x4ec>)
 8007c36:	685b      	ldr	r3, [r3, #4]
 8007c38:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	699b      	ldr	r3, [r3, #24]
 8007c3e:	2b01      	cmp	r3, #1
 8007c40:	d028      	beq.n	8007c94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007c4c:	429a      	cmp	r2, r3
 8007c4e:	d121      	bne.n	8007c94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007c5a:	429a      	cmp	r2, r3
 8007c5c:	d11a      	bne.n	8007c94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007c5e:	68fa      	ldr	r2, [r7, #12]
 8007c60:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007c64:	4013      	ands	r3, r2
 8007c66:	687a      	ldr	r2, [r7, #4]
 8007c68:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007c6a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007c6c:	4293      	cmp	r3, r2
 8007c6e:	d111      	bne.n	8007c94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c7a:	085b      	lsrs	r3, r3, #1
 8007c7c:	3b01      	subs	r3, #1
 8007c7e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007c80:	429a      	cmp	r2, r3
 8007c82:	d107      	bne.n	8007c94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c8e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007c90:	429a      	cmp	r2, r3
 8007c92:	d001      	beq.n	8007c98 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8007c94:	2301      	movs	r3, #1
 8007c96:	e000      	b.n	8007c9a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007c98:	2300      	movs	r3, #0
}
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	3718      	adds	r7, #24
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	bd80      	pop	{r7, pc}
 8007ca2:	bf00      	nop
 8007ca4:	40023800 	.word	0x40023800

08007ca8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b084      	sub	sp, #16
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
 8007cb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d101      	bne.n	8007cbc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007cb8:	2301      	movs	r3, #1
 8007cba:	e0cc      	b.n	8007e56 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007cbc:	4b68      	ldr	r3, [pc, #416]	; (8007e60 <HAL_RCC_ClockConfig+0x1b8>)
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	f003 0307 	and.w	r3, r3, #7
 8007cc4:	683a      	ldr	r2, [r7, #0]
 8007cc6:	429a      	cmp	r2, r3
 8007cc8:	d90c      	bls.n	8007ce4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007cca:	4b65      	ldr	r3, [pc, #404]	; (8007e60 <HAL_RCC_ClockConfig+0x1b8>)
 8007ccc:	683a      	ldr	r2, [r7, #0]
 8007cce:	b2d2      	uxtb	r2, r2
 8007cd0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007cd2:	4b63      	ldr	r3, [pc, #396]	; (8007e60 <HAL_RCC_ClockConfig+0x1b8>)
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	f003 0307 	and.w	r3, r3, #7
 8007cda:	683a      	ldr	r2, [r7, #0]
 8007cdc:	429a      	cmp	r2, r3
 8007cde:	d001      	beq.n	8007ce4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007ce0:	2301      	movs	r3, #1
 8007ce2:	e0b8      	b.n	8007e56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	f003 0302 	and.w	r3, r3, #2
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d020      	beq.n	8007d32 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	f003 0304 	and.w	r3, r3, #4
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d005      	beq.n	8007d08 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007cfc:	4b59      	ldr	r3, [pc, #356]	; (8007e64 <HAL_RCC_ClockConfig+0x1bc>)
 8007cfe:	689b      	ldr	r3, [r3, #8]
 8007d00:	4a58      	ldr	r2, [pc, #352]	; (8007e64 <HAL_RCC_ClockConfig+0x1bc>)
 8007d02:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007d06:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	f003 0308 	and.w	r3, r3, #8
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d005      	beq.n	8007d20 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007d14:	4b53      	ldr	r3, [pc, #332]	; (8007e64 <HAL_RCC_ClockConfig+0x1bc>)
 8007d16:	689b      	ldr	r3, [r3, #8]
 8007d18:	4a52      	ldr	r2, [pc, #328]	; (8007e64 <HAL_RCC_ClockConfig+0x1bc>)
 8007d1a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007d1e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007d20:	4b50      	ldr	r3, [pc, #320]	; (8007e64 <HAL_RCC_ClockConfig+0x1bc>)
 8007d22:	689b      	ldr	r3, [r3, #8]
 8007d24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	689b      	ldr	r3, [r3, #8]
 8007d2c:	494d      	ldr	r1, [pc, #308]	; (8007e64 <HAL_RCC_ClockConfig+0x1bc>)
 8007d2e:	4313      	orrs	r3, r2
 8007d30:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	f003 0301 	and.w	r3, r3, #1
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d044      	beq.n	8007dc8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	685b      	ldr	r3, [r3, #4]
 8007d42:	2b01      	cmp	r3, #1
 8007d44:	d107      	bne.n	8007d56 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007d46:	4b47      	ldr	r3, [pc, #284]	; (8007e64 <HAL_RCC_ClockConfig+0x1bc>)
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d119      	bne.n	8007d86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007d52:	2301      	movs	r3, #1
 8007d54:	e07f      	b.n	8007e56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	685b      	ldr	r3, [r3, #4]
 8007d5a:	2b02      	cmp	r3, #2
 8007d5c:	d003      	beq.n	8007d66 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007d62:	2b03      	cmp	r3, #3
 8007d64:	d107      	bne.n	8007d76 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007d66:	4b3f      	ldr	r3, [pc, #252]	; (8007e64 <HAL_RCC_ClockConfig+0x1bc>)
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d109      	bne.n	8007d86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007d72:	2301      	movs	r3, #1
 8007d74:	e06f      	b.n	8007e56 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007d76:	4b3b      	ldr	r3, [pc, #236]	; (8007e64 <HAL_RCC_ClockConfig+0x1bc>)
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	f003 0302 	and.w	r3, r3, #2
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d101      	bne.n	8007d86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007d82:	2301      	movs	r3, #1
 8007d84:	e067      	b.n	8007e56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007d86:	4b37      	ldr	r3, [pc, #220]	; (8007e64 <HAL_RCC_ClockConfig+0x1bc>)
 8007d88:	689b      	ldr	r3, [r3, #8]
 8007d8a:	f023 0203 	bic.w	r2, r3, #3
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	685b      	ldr	r3, [r3, #4]
 8007d92:	4934      	ldr	r1, [pc, #208]	; (8007e64 <HAL_RCC_ClockConfig+0x1bc>)
 8007d94:	4313      	orrs	r3, r2
 8007d96:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007d98:	f7fd fbc0 	bl	800551c <HAL_GetTick>
 8007d9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007d9e:	e00a      	b.n	8007db6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007da0:	f7fd fbbc 	bl	800551c <HAL_GetTick>
 8007da4:	4602      	mov	r2, r0
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	1ad3      	subs	r3, r2, r3
 8007daa:	f241 3288 	movw	r2, #5000	; 0x1388
 8007dae:	4293      	cmp	r3, r2
 8007db0:	d901      	bls.n	8007db6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007db2:	2303      	movs	r3, #3
 8007db4:	e04f      	b.n	8007e56 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007db6:	4b2b      	ldr	r3, [pc, #172]	; (8007e64 <HAL_RCC_ClockConfig+0x1bc>)
 8007db8:	689b      	ldr	r3, [r3, #8]
 8007dba:	f003 020c 	and.w	r2, r3, #12
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	685b      	ldr	r3, [r3, #4]
 8007dc2:	009b      	lsls	r3, r3, #2
 8007dc4:	429a      	cmp	r2, r3
 8007dc6:	d1eb      	bne.n	8007da0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007dc8:	4b25      	ldr	r3, [pc, #148]	; (8007e60 <HAL_RCC_ClockConfig+0x1b8>)
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f003 0307 	and.w	r3, r3, #7
 8007dd0:	683a      	ldr	r2, [r7, #0]
 8007dd2:	429a      	cmp	r2, r3
 8007dd4:	d20c      	bcs.n	8007df0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007dd6:	4b22      	ldr	r3, [pc, #136]	; (8007e60 <HAL_RCC_ClockConfig+0x1b8>)
 8007dd8:	683a      	ldr	r2, [r7, #0]
 8007dda:	b2d2      	uxtb	r2, r2
 8007ddc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007dde:	4b20      	ldr	r3, [pc, #128]	; (8007e60 <HAL_RCC_ClockConfig+0x1b8>)
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	f003 0307 	and.w	r3, r3, #7
 8007de6:	683a      	ldr	r2, [r7, #0]
 8007de8:	429a      	cmp	r2, r3
 8007dea:	d001      	beq.n	8007df0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007dec:	2301      	movs	r3, #1
 8007dee:	e032      	b.n	8007e56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	f003 0304 	and.w	r3, r3, #4
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d008      	beq.n	8007e0e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007dfc:	4b19      	ldr	r3, [pc, #100]	; (8007e64 <HAL_RCC_ClockConfig+0x1bc>)
 8007dfe:	689b      	ldr	r3, [r3, #8]
 8007e00:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	68db      	ldr	r3, [r3, #12]
 8007e08:	4916      	ldr	r1, [pc, #88]	; (8007e64 <HAL_RCC_ClockConfig+0x1bc>)
 8007e0a:	4313      	orrs	r3, r2
 8007e0c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	f003 0308 	and.w	r3, r3, #8
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d009      	beq.n	8007e2e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007e1a:	4b12      	ldr	r3, [pc, #72]	; (8007e64 <HAL_RCC_ClockConfig+0x1bc>)
 8007e1c:	689b      	ldr	r3, [r3, #8]
 8007e1e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	691b      	ldr	r3, [r3, #16]
 8007e26:	00db      	lsls	r3, r3, #3
 8007e28:	490e      	ldr	r1, [pc, #56]	; (8007e64 <HAL_RCC_ClockConfig+0x1bc>)
 8007e2a:	4313      	orrs	r3, r2
 8007e2c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007e2e:	f000 f821 	bl	8007e74 <HAL_RCC_GetSysClockFreq>
 8007e32:	4602      	mov	r2, r0
 8007e34:	4b0b      	ldr	r3, [pc, #44]	; (8007e64 <HAL_RCC_ClockConfig+0x1bc>)
 8007e36:	689b      	ldr	r3, [r3, #8]
 8007e38:	091b      	lsrs	r3, r3, #4
 8007e3a:	f003 030f 	and.w	r3, r3, #15
 8007e3e:	490a      	ldr	r1, [pc, #40]	; (8007e68 <HAL_RCC_ClockConfig+0x1c0>)
 8007e40:	5ccb      	ldrb	r3, [r1, r3]
 8007e42:	fa22 f303 	lsr.w	r3, r2, r3
 8007e46:	4a09      	ldr	r2, [pc, #36]	; (8007e6c <HAL_RCC_ClockConfig+0x1c4>)
 8007e48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007e4a:	4b09      	ldr	r3, [pc, #36]	; (8007e70 <HAL_RCC_ClockConfig+0x1c8>)
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	4618      	mov	r0, r3
 8007e50:	f7fd fb20 	bl	8005494 <HAL_InitTick>

  return HAL_OK;
 8007e54:	2300      	movs	r3, #0
}
 8007e56:	4618      	mov	r0, r3
 8007e58:	3710      	adds	r7, #16
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	bd80      	pop	{r7, pc}
 8007e5e:	bf00      	nop
 8007e60:	40023c00 	.word	0x40023c00
 8007e64:	40023800 	.word	0x40023800
 8007e68:	080143c8 	.word	0x080143c8
 8007e6c:	2000000c 	.word	0x2000000c
 8007e70:	20000010 	.word	0x20000010

08007e74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007e74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007e78:	b094      	sub	sp, #80	; 0x50
 8007e7a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	647b      	str	r3, [r7, #68]	; 0x44
 8007e80:	2300      	movs	r3, #0
 8007e82:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007e84:	2300      	movs	r3, #0
 8007e86:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8007e88:	2300      	movs	r3, #0
 8007e8a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007e8c:	4b79      	ldr	r3, [pc, #484]	; (8008074 <HAL_RCC_GetSysClockFreq+0x200>)
 8007e8e:	689b      	ldr	r3, [r3, #8]
 8007e90:	f003 030c 	and.w	r3, r3, #12
 8007e94:	2b08      	cmp	r3, #8
 8007e96:	d00d      	beq.n	8007eb4 <HAL_RCC_GetSysClockFreq+0x40>
 8007e98:	2b08      	cmp	r3, #8
 8007e9a:	f200 80e1 	bhi.w	8008060 <HAL_RCC_GetSysClockFreq+0x1ec>
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d002      	beq.n	8007ea8 <HAL_RCC_GetSysClockFreq+0x34>
 8007ea2:	2b04      	cmp	r3, #4
 8007ea4:	d003      	beq.n	8007eae <HAL_RCC_GetSysClockFreq+0x3a>
 8007ea6:	e0db      	b.n	8008060 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007ea8:	4b73      	ldr	r3, [pc, #460]	; (8008078 <HAL_RCC_GetSysClockFreq+0x204>)
 8007eaa:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8007eac:	e0db      	b.n	8008066 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007eae:	4b73      	ldr	r3, [pc, #460]	; (800807c <HAL_RCC_GetSysClockFreq+0x208>)
 8007eb0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007eb2:	e0d8      	b.n	8008066 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007eb4:	4b6f      	ldr	r3, [pc, #444]	; (8008074 <HAL_RCC_GetSysClockFreq+0x200>)
 8007eb6:	685b      	ldr	r3, [r3, #4]
 8007eb8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007ebc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007ebe:	4b6d      	ldr	r3, [pc, #436]	; (8008074 <HAL_RCC_GetSysClockFreq+0x200>)
 8007ec0:	685b      	ldr	r3, [r3, #4]
 8007ec2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d063      	beq.n	8007f92 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007eca:	4b6a      	ldr	r3, [pc, #424]	; (8008074 <HAL_RCC_GetSysClockFreq+0x200>)
 8007ecc:	685b      	ldr	r3, [r3, #4]
 8007ece:	099b      	lsrs	r3, r3, #6
 8007ed0:	2200      	movs	r2, #0
 8007ed2:	63bb      	str	r3, [r7, #56]	; 0x38
 8007ed4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8007ed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ed8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007edc:	633b      	str	r3, [r7, #48]	; 0x30
 8007ede:	2300      	movs	r3, #0
 8007ee0:	637b      	str	r3, [r7, #52]	; 0x34
 8007ee2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8007ee6:	4622      	mov	r2, r4
 8007ee8:	462b      	mov	r3, r5
 8007eea:	f04f 0000 	mov.w	r0, #0
 8007eee:	f04f 0100 	mov.w	r1, #0
 8007ef2:	0159      	lsls	r1, r3, #5
 8007ef4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007ef8:	0150      	lsls	r0, r2, #5
 8007efa:	4602      	mov	r2, r0
 8007efc:	460b      	mov	r3, r1
 8007efe:	4621      	mov	r1, r4
 8007f00:	1a51      	subs	r1, r2, r1
 8007f02:	6139      	str	r1, [r7, #16]
 8007f04:	4629      	mov	r1, r5
 8007f06:	eb63 0301 	sbc.w	r3, r3, r1
 8007f0a:	617b      	str	r3, [r7, #20]
 8007f0c:	f04f 0200 	mov.w	r2, #0
 8007f10:	f04f 0300 	mov.w	r3, #0
 8007f14:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007f18:	4659      	mov	r1, fp
 8007f1a:	018b      	lsls	r3, r1, #6
 8007f1c:	4651      	mov	r1, sl
 8007f1e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007f22:	4651      	mov	r1, sl
 8007f24:	018a      	lsls	r2, r1, #6
 8007f26:	4651      	mov	r1, sl
 8007f28:	ebb2 0801 	subs.w	r8, r2, r1
 8007f2c:	4659      	mov	r1, fp
 8007f2e:	eb63 0901 	sbc.w	r9, r3, r1
 8007f32:	f04f 0200 	mov.w	r2, #0
 8007f36:	f04f 0300 	mov.w	r3, #0
 8007f3a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007f3e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007f42:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007f46:	4690      	mov	r8, r2
 8007f48:	4699      	mov	r9, r3
 8007f4a:	4623      	mov	r3, r4
 8007f4c:	eb18 0303 	adds.w	r3, r8, r3
 8007f50:	60bb      	str	r3, [r7, #8]
 8007f52:	462b      	mov	r3, r5
 8007f54:	eb49 0303 	adc.w	r3, r9, r3
 8007f58:	60fb      	str	r3, [r7, #12]
 8007f5a:	f04f 0200 	mov.w	r2, #0
 8007f5e:	f04f 0300 	mov.w	r3, #0
 8007f62:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007f66:	4629      	mov	r1, r5
 8007f68:	024b      	lsls	r3, r1, #9
 8007f6a:	4621      	mov	r1, r4
 8007f6c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007f70:	4621      	mov	r1, r4
 8007f72:	024a      	lsls	r2, r1, #9
 8007f74:	4610      	mov	r0, r2
 8007f76:	4619      	mov	r1, r3
 8007f78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8007f7e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007f80:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007f84:	f7f8 fe80 	bl	8000c88 <__aeabi_uldivmod>
 8007f88:	4602      	mov	r2, r0
 8007f8a:	460b      	mov	r3, r1
 8007f8c:	4613      	mov	r3, r2
 8007f8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007f90:	e058      	b.n	8008044 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007f92:	4b38      	ldr	r3, [pc, #224]	; (8008074 <HAL_RCC_GetSysClockFreq+0x200>)
 8007f94:	685b      	ldr	r3, [r3, #4]
 8007f96:	099b      	lsrs	r3, r3, #6
 8007f98:	2200      	movs	r2, #0
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	4611      	mov	r1, r2
 8007f9e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007fa2:	623b      	str	r3, [r7, #32]
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	627b      	str	r3, [r7, #36]	; 0x24
 8007fa8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007fac:	4642      	mov	r2, r8
 8007fae:	464b      	mov	r3, r9
 8007fb0:	f04f 0000 	mov.w	r0, #0
 8007fb4:	f04f 0100 	mov.w	r1, #0
 8007fb8:	0159      	lsls	r1, r3, #5
 8007fba:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007fbe:	0150      	lsls	r0, r2, #5
 8007fc0:	4602      	mov	r2, r0
 8007fc2:	460b      	mov	r3, r1
 8007fc4:	4641      	mov	r1, r8
 8007fc6:	ebb2 0a01 	subs.w	sl, r2, r1
 8007fca:	4649      	mov	r1, r9
 8007fcc:	eb63 0b01 	sbc.w	fp, r3, r1
 8007fd0:	f04f 0200 	mov.w	r2, #0
 8007fd4:	f04f 0300 	mov.w	r3, #0
 8007fd8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007fdc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007fe0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007fe4:	ebb2 040a 	subs.w	r4, r2, sl
 8007fe8:	eb63 050b 	sbc.w	r5, r3, fp
 8007fec:	f04f 0200 	mov.w	r2, #0
 8007ff0:	f04f 0300 	mov.w	r3, #0
 8007ff4:	00eb      	lsls	r3, r5, #3
 8007ff6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007ffa:	00e2      	lsls	r2, r4, #3
 8007ffc:	4614      	mov	r4, r2
 8007ffe:	461d      	mov	r5, r3
 8008000:	4643      	mov	r3, r8
 8008002:	18e3      	adds	r3, r4, r3
 8008004:	603b      	str	r3, [r7, #0]
 8008006:	464b      	mov	r3, r9
 8008008:	eb45 0303 	adc.w	r3, r5, r3
 800800c:	607b      	str	r3, [r7, #4]
 800800e:	f04f 0200 	mov.w	r2, #0
 8008012:	f04f 0300 	mov.w	r3, #0
 8008016:	e9d7 4500 	ldrd	r4, r5, [r7]
 800801a:	4629      	mov	r1, r5
 800801c:	028b      	lsls	r3, r1, #10
 800801e:	4621      	mov	r1, r4
 8008020:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008024:	4621      	mov	r1, r4
 8008026:	028a      	lsls	r2, r1, #10
 8008028:	4610      	mov	r0, r2
 800802a:	4619      	mov	r1, r3
 800802c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800802e:	2200      	movs	r2, #0
 8008030:	61bb      	str	r3, [r7, #24]
 8008032:	61fa      	str	r2, [r7, #28]
 8008034:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008038:	f7f8 fe26 	bl	8000c88 <__aeabi_uldivmod>
 800803c:	4602      	mov	r2, r0
 800803e:	460b      	mov	r3, r1
 8008040:	4613      	mov	r3, r2
 8008042:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008044:	4b0b      	ldr	r3, [pc, #44]	; (8008074 <HAL_RCC_GetSysClockFreq+0x200>)
 8008046:	685b      	ldr	r3, [r3, #4]
 8008048:	0c1b      	lsrs	r3, r3, #16
 800804a:	f003 0303 	and.w	r3, r3, #3
 800804e:	3301      	adds	r3, #1
 8008050:	005b      	lsls	r3, r3, #1
 8008052:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8008054:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008056:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008058:	fbb2 f3f3 	udiv	r3, r2, r3
 800805c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800805e:	e002      	b.n	8008066 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008060:	4b05      	ldr	r3, [pc, #20]	; (8008078 <HAL_RCC_GetSysClockFreq+0x204>)
 8008062:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008064:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008066:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8008068:	4618      	mov	r0, r3
 800806a:	3750      	adds	r7, #80	; 0x50
 800806c:	46bd      	mov	sp, r7
 800806e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008072:	bf00      	nop
 8008074:	40023800 	.word	0x40023800
 8008078:	00f42400 	.word	0x00f42400
 800807c:	007a1200 	.word	0x007a1200

08008080 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008080:	b480      	push	{r7}
 8008082:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008084:	4b03      	ldr	r3, [pc, #12]	; (8008094 <HAL_RCC_GetHCLKFreq+0x14>)
 8008086:	681b      	ldr	r3, [r3, #0]
}
 8008088:	4618      	mov	r0, r3
 800808a:	46bd      	mov	sp, r7
 800808c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008090:	4770      	bx	lr
 8008092:	bf00      	nop
 8008094:	2000000c 	.word	0x2000000c

08008098 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008098:	b580      	push	{r7, lr}
 800809a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800809c:	f7ff fff0 	bl	8008080 <HAL_RCC_GetHCLKFreq>
 80080a0:	4602      	mov	r2, r0
 80080a2:	4b05      	ldr	r3, [pc, #20]	; (80080b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80080a4:	689b      	ldr	r3, [r3, #8]
 80080a6:	0a9b      	lsrs	r3, r3, #10
 80080a8:	f003 0307 	and.w	r3, r3, #7
 80080ac:	4903      	ldr	r1, [pc, #12]	; (80080bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80080ae:	5ccb      	ldrb	r3, [r1, r3]
 80080b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80080b4:	4618      	mov	r0, r3
 80080b6:	bd80      	pop	{r7, pc}
 80080b8:	40023800 	.word	0x40023800
 80080bc:	080143d8 	.word	0x080143d8

080080c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80080c0:	b580      	push	{r7, lr}
 80080c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80080c4:	f7ff ffdc 	bl	8008080 <HAL_RCC_GetHCLKFreq>
 80080c8:	4602      	mov	r2, r0
 80080ca:	4b05      	ldr	r3, [pc, #20]	; (80080e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80080cc:	689b      	ldr	r3, [r3, #8]
 80080ce:	0b5b      	lsrs	r3, r3, #13
 80080d0:	f003 0307 	and.w	r3, r3, #7
 80080d4:	4903      	ldr	r1, [pc, #12]	; (80080e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80080d6:	5ccb      	ldrb	r3, [r1, r3]
 80080d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80080dc:	4618      	mov	r0, r3
 80080de:	bd80      	pop	{r7, pc}
 80080e0:	40023800 	.word	0x40023800
 80080e4:	080143d8 	.word	0x080143d8

080080e8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b082      	sub	sp, #8
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d101      	bne.n	80080fa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80080f6:	2301      	movs	r3, #1
 80080f8:	e07b      	b.n	80081f2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d108      	bne.n	8008114 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	685b      	ldr	r3, [r3, #4]
 8008106:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800810a:	d009      	beq.n	8008120 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	2200      	movs	r2, #0
 8008110:	61da      	str	r2, [r3, #28]
 8008112:	e005      	b.n	8008120 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2200      	movs	r2, #0
 8008118:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	2200      	movs	r2, #0
 800811e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	2200      	movs	r2, #0
 8008124:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800812c:	b2db      	uxtb	r3, r3
 800812e:	2b00      	cmp	r3, #0
 8008130:	d106      	bne.n	8008140 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	2200      	movs	r2, #0
 8008136:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800813a:	6878      	ldr	r0, [r7, #4]
 800813c:	f7fb fd92 	bl	8003c64 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	2202      	movs	r2, #2
 8008144:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	681a      	ldr	r2, [r3, #0]
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008156:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	685b      	ldr	r3, [r3, #4]
 800815c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	689b      	ldr	r3, [r3, #8]
 8008164:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008168:	431a      	orrs	r2, r3
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	68db      	ldr	r3, [r3, #12]
 800816e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008172:	431a      	orrs	r2, r3
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	691b      	ldr	r3, [r3, #16]
 8008178:	f003 0302 	and.w	r3, r3, #2
 800817c:	431a      	orrs	r2, r3
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	695b      	ldr	r3, [r3, #20]
 8008182:	f003 0301 	and.w	r3, r3, #1
 8008186:	431a      	orrs	r2, r3
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	699b      	ldr	r3, [r3, #24]
 800818c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008190:	431a      	orrs	r2, r3
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	69db      	ldr	r3, [r3, #28]
 8008196:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800819a:	431a      	orrs	r2, r3
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	6a1b      	ldr	r3, [r3, #32]
 80081a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081a4:	ea42 0103 	orr.w	r1, r2, r3
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081ac:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	430a      	orrs	r2, r1
 80081b6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	699b      	ldr	r3, [r3, #24]
 80081bc:	0c1b      	lsrs	r3, r3, #16
 80081be:	f003 0104 	and.w	r1, r3, #4
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081c6:	f003 0210 	and.w	r2, r3, #16
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	430a      	orrs	r2, r1
 80081d0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	69da      	ldr	r2, [r3, #28]
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80081e0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	2200      	movs	r2, #0
 80081e6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	2201      	movs	r2, #1
 80081ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80081f0:	2300      	movs	r3, #0
}
 80081f2:	4618      	mov	r0, r3
 80081f4:	3708      	adds	r7, #8
 80081f6:	46bd      	mov	sp, r7
 80081f8:	bd80      	pop	{r7, pc}

080081fa <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80081fa:	b580      	push	{r7, lr}
 80081fc:	b088      	sub	sp, #32
 80081fe:	af00      	add	r7, sp, #0
 8008200:	60f8      	str	r0, [r7, #12]
 8008202:	60b9      	str	r1, [r7, #8]
 8008204:	603b      	str	r3, [r7, #0]
 8008206:	4613      	mov	r3, r2
 8008208:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800820a:	2300      	movs	r3, #0
 800820c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008214:	2b01      	cmp	r3, #1
 8008216:	d101      	bne.n	800821c <HAL_SPI_Transmit+0x22>
 8008218:	2302      	movs	r3, #2
 800821a:	e126      	b.n	800846a <HAL_SPI_Transmit+0x270>
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	2201      	movs	r2, #1
 8008220:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008224:	f7fd f97a 	bl	800551c <HAL_GetTick>
 8008228:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800822a:	88fb      	ldrh	r3, [r7, #6]
 800822c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008234:	b2db      	uxtb	r3, r3
 8008236:	2b01      	cmp	r3, #1
 8008238:	d002      	beq.n	8008240 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800823a:	2302      	movs	r3, #2
 800823c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800823e:	e10b      	b.n	8008458 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8008240:	68bb      	ldr	r3, [r7, #8]
 8008242:	2b00      	cmp	r3, #0
 8008244:	d002      	beq.n	800824c <HAL_SPI_Transmit+0x52>
 8008246:	88fb      	ldrh	r3, [r7, #6]
 8008248:	2b00      	cmp	r3, #0
 800824a:	d102      	bne.n	8008252 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800824c:	2301      	movs	r3, #1
 800824e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008250:	e102      	b.n	8008458 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	2203      	movs	r2, #3
 8008256:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	2200      	movs	r2, #0
 800825e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	68ba      	ldr	r2, [r7, #8]
 8008264:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	88fa      	ldrh	r2, [r7, #6]
 800826a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	88fa      	ldrh	r2, [r7, #6]
 8008270:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	2200      	movs	r2, #0
 8008276:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	2200      	movs	r2, #0
 800827c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	2200      	movs	r2, #0
 8008282:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	2200      	movs	r2, #0
 8008288:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	2200      	movs	r2, #0
 800828e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	689b      	ldr	r3, [r3, #8]
 8008294:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008298:	d10f      	bne.n	80082ba <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	681a      	ldr	r2, [r3, #0]
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80082a8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	681a      	ldr	r2, [r3, #0]
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80082b8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082c4:	2b40      	cmp	r3, #64	; 0x40
 80082c6:	d007      	beq.n	80082d8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	681a      	ldr	r2, [r3, #0]
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80082d6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	68db      	ldr	r3, [r3, #12]
 80082dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80082e0:	d14b      	bne.n	800837a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	685b      	ldr	r3, [r3, #4]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d002      	beq.n	80082f0 <HAL_SPI_Transmit+0xf6>
 80082ea:	8afb      	ldrh	r3, [r7, #22]
 80082ec:	2b01      	cmp	r3, #1
 80082ee:	d13e      	bne.n	800836e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082f4:	881a      	ldrh	r2, [r3, #0]
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008300:	1c9a      	adds	r2, r3, #2
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800830a:	b29b      	uxth	r3, r3
 800830c:	3b01      	subs	r3, #1
 800830e:	b29a      	uxth	r2, r3
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008314:	e02b      	b.n	800836e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	689b      	ldr	r3, [r3, #8]
 800831c:	f003 0302 	and.w	r3, r3, #2
 8008320:	2b02      	cmp	r3, #2
 8008322:	d112      	bne.n	800834a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008328:	881a      	ldrh	r2, [r3, #0]
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008334:	1c9a      	adds	r2, r3, #2
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800833e:	b29b      	uxth	r3, r3
 8008340:	3b01      	subs	r3, #1
 8008342:	b29a      	uxth	r2, r3
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	86da      	strh	r2, [r3, #54]	; 0x36
 8008348:	e011      	b.n	800836e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800834a:	f7fd f8e7 	bl	800551c <HAL_GetTick>
 800834e:	4602      	mov	r2, r0
 8008350:	69bb      	ldr	r3, [r7, #24]
 8008352:	1ad3      	subs	r3, r2, r3
 8008354:	683a      	ldr	r2, [r7, #0]
 8008356:	429a      	cmp	r2, r3
 8008358:	d803      	bhi.n	8008362 <HAL_SPI_Transmit+0x168>
 800835a:	683b      	ldr	r3, [r7, #0]
 800835c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008360:	d102      	bne.n	8008368 <HAL_SPI_Transmit+0x16e>
 8008362:	683b      	ldr	r3, [r7, #0]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d102      	bne.n	800836e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8008368:	2303      	movs	r3, #3
 800836a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800836c:	e074      	b.n	8008458 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008372:	b29b      	uxth	r3, r3
 8008374:	2b00      	cmp	r3, #0
 8008376:	d1ce      	bne.n	8008316 <HAL_SPI_Transmit+0x11c>
 8008378:	e04c      	b.n	8008414 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	685b      	ldr	r3, [r3, #4]
 800837e:	2b00      	cmp	r3, #0
 8008380:	d002      	beq.n	8008388 <HAL_SPI_Transmit+0x18e>
 8008382:	8afb      	ldrh	r3, [r7, #22]
 8008384:	2b01      	cmp	r3, #1
 8008386:	d140      	bne.n	800840a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	330c      	adds	r3, #12
 8008392:	7812      	ldrb	r2, [r2, #0]
 8008394:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800839a:	1c5a      	adds	r2, r3, #1
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80083a4:	b29b      	uxth	r3, r3
 80083a6:	3b01      	subs	r3, #1
 80083a8:	b29a      	uxth	r2, r3
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80083ae:	e02c      	b.n	800840a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	689b      	ldr	r3, [r3, #8]
 80083b6:	f003 0302 	and.w	r3, r3, #2
 80083ba:	2b02      	cmp	r3, #2
 80083bc:	d113      	bne.n	80083e6 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	330c      	adds	r3, #12
 80083c8:	7812      	ldrb	r2, [r2, #0]
 80083ca:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083d0:	1c5a      	adds	r2, r3, #1
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80083da:	b29b      	uxth	r3, r3
 80083dc:	3b01      	subs	r3, #1
 80083de:	b29a      	uxth	r2, r3
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	86da      	strh	r2, [r3, #54]	; 0x36
 80083e4:	e011      	b.n	800840a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80083e6:	f7fd f899 	bl	800551c <HAL_GetTick>
 80083ea:	4602      	mov	r2, r0
 80083ec:	69bb      	ldr	r3, [r7, #24]
 80083ee:	1ad3      	subs	r3, r2, r3
 80083f0:	683a      	ldr	r2, [r7, #0]
 80083f2:	429a      	cmp	r2, r3
 80083f4:	d803      	bhi.n	80083fe <HAL_SPI_Transmit+0x204>
 80083f6:	683b      	ldr	r3, [r7, #0]
 80083f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083fc:	d102      	bne.n	8008404 <HAL_SPI_Transmit+0x20a>
 80083fe:	683b      	ldr	r3, [r7, #0]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d102      	bne.n	800840a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8008404:	2303      	movs	r3, #3
 8008406:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008408:	e026      	b.n	8008458 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800840e:	b29b      	uxth	r3, r3
 8008410:	2b00      	cmp	r3, #0
 8008412:	d1cd      	bne.n	80083b0 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008414:	69ba      	ldr	r2, [r7, #24]
 8008416:	6839      	ldr	r1, [r7, #0]
 8008418:	68f8      	ldr	r0, [r7, #12]
 800841a:	f000 fa63 	bl	80088e4 <SPI_EndRxTxTransaction>
 800841e:	4603      	mov	r3, r0
 8008420:	2b00      	cmp	r3, #0
 8008422:	d002      	beq.n	800842a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	2220      	movs	r2, #32
 8008428:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	689b      	ldr	r3, [r3, #8]
 800842e:	2b00      	cmp	r3, #0
 8008430:	d10a      	bne.n	8008448 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008432:	2300      	movs	r3, #0
 8008434:	613b      	str	r3, [r7, #16]
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	68db      	ldr	r3, [r3, #12]
 800843c:	613b      	str	r3, [r7, #16]
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	689b      	ldr	r3, [r3, #8]
 8008444:	613b      	str	r3, [r7, #16]
 8008446:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800844c:	2b00      	cmp	r3, #0
 800844e:	d002      	beq.n	8008456 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8008450:	2301      	movs	r3, #1
 8008452:	77fb      	strb	r3, [r7, #31]
 8008454:	e000      	b.n	8008458 <HAL_SPI_Transmit+0x25e>
  }

error:
 8008456:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	2201      	movs	r2, #1
 800845c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	2200      	movs	r2, #0
 8008464:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008468:	7ffb      	ldrb	r3, [r7, #31]
}
 800846a:	4618      	mov	r0, r3
 800846c:	3720      	adds	r7, #32
 800846e:	46bd      	mov	sp, r7
 8008470:	bd80      	pop	{r7, pc}

08008472 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008472:	b580      	push	{r7, lr}
 8008474:	b08c      	sub	sp, #48	; 0x30
 8008476:	af00      	add	r7, sp, #0
 8008478:	60f8      	str	r0, [r7, #12]
 800847a:	60b9      	str	r1, [r7, #8]
 800847c:	607a      	str	r2, [r7, #4]
 800847e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008480:	2301      	movs	r3, #1
 8008482:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008484:	2300      	movs	r3, #0
 8008486:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008490:	2b01      	cmp	r3, #1
 8008492:	d101      	bne.n	8008498 <HAL_SPI_TransmitReceive+0x26>
 8008494:	2302      	movs	r3, #2
 8008496:	e18a      	b.n	80087ae <HAL_SPI_TransmitReceive+0x33c>
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	2201      	movs	r2, #1
 800849c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80084a0:	f7fd f83c 	bl	800551c <HAL_GetTick>
 80084a4:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80084ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	685b      	ldr	r3, [r3, #4]
 80084b4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80084b6:	887b      	ldrh	r3, [r7, #2]
 80084b8:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80084ba:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80084be:	2b01      	cmp	r3, #1
 80084c0:	d00f      	beq.n	80084e2 <HAL_SPI_TransmitReceive+0x70>
 80084c2:	69fb      	ldr	r3, [r7, #28]
 80084c4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80084c8:	d107      	bne.n	80084da <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	689b      	ldr	r3, [r3, #8]
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d103      	bne.n	80084da <HAL_SPI_TransmitReceive+0x68>
 80084d2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80084d6:	2b04      	cmp	r3, #4
 80084d8:	d003      	beq.n	80084e2 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80084da:	2302      	movs	r3, #2
 80084dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80084e0:	e15b      	b.n	800879a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80084e2:	68bb      	ldr	r3, [r7, #8]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d005      	beq.n	80084f4 <HAL_SPI_TransmitReceive+0x82>
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d002      	beq.n	80084f4 <HAL_SPI_TransmitReceive+0x82>
 80084ee:	887b      	ldrh	r3, [r7, #2]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d103      	bne.n	80084fc <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80084f4:	2301      	movs	r3, #1
 80084f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80084fa:	e14e      	b.n	800879a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008502:	b2db      	uxtb	r3, r3
 8008504:	2b04      	cmp	r3, #4
 8008506:	d003      	beq.n	8008510 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	2205      	movs	r2, #5
 800850c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	2200      	movs	r2, #0
 8008514:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	687a      	ldr	r2, [r7, #4]
 800851a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	887a      	ldrh	r2, [r7, #2]
 8008520:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	887a      	ldrh	r2, [r7, #2]
 8008526:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	68ba      	ldr	r2, [r7, #8]
 800852c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	887a      	ldrh	r2, [r7, #2]
 8008532:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	887a      	ldrh	r2, [r7, #2]
 8008538:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	2200      	movs	r2, #0
 800853e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	2200      	movs	r2, #0
 8008544:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008550:	2b40      	cmp	r3, #64	; 0x40
 8008552:	d007      	beq.n	8008564 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	681a      	ldr	r2, [r3, #0]
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008562:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	68db      	ldr	r3, [r3, #12]
 8008568:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800856c:	d178      	bne.n	8008660 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	685b      	ldr	r3, [r3, #4]
 8008572:	2b00      	cmp	r3, #0
 8008574:	d002      	beq.n	800857c <HAL_SPI_TransmitReceive+0x10a>
 8008576:	8b7b      	ldrh	r3, [r7, #26]
 8008578:	2b01      	cmp	r3, #1
 800857a:	d166      	bne.n	800864a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008580:	881a      	ldrh	r2, [r3, #0]
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800858c:	1c9a      	adds	r2, r3, #2
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008596:	b29b      	uxth	r3, r3
 8008598:	3b01      	subs	r3, #1
 800859a:	b29a      	uxth	r2, r3
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80085a0:	e053      	b.n	800864a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	689b      	ldr	r3, [r3, #8]
 80085a8:	f003 0302 	and.w	r3, r3, #2
 80085ac:	2b02      	cmp	r3, #2
 80085ae:	d11b      	bne.n	80085e8 <HAL_SPI_TransmitReceive+0x176>
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80085b4:	b29b      	uxth	r3, r3
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d016      	beq.n	80085e8 <HAL_SPI_TransmitReceive+0x176>
 80085ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085bc:	2b01      	cmp	r3, #1
 80085be:	d113      	bne.n	80085e8 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085c4:	881a      	ldrh	r2, [r3, #0]
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085d0:	1c9a      	adds	r2, r3, #2
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80085da:	b29b      	uxth	r3, r3
 80085dc:	3b01      	subs	r3, #1
 80085de:	b29a      	uxth	r2, r3
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80085e4:	2300      	movs	r3, #0
 80085e6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	689b      	ldr	r3, [r3, #8]
 80085ee:	f003 0301 	and.w	r3, r3, #1
 80085f2:	2b01      	cmp	r3, #1
 80085f4:	d119      	bne.n	800862a <HAL_SPI_TransmitReceive+0x1b8>
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80085fa:	b29b      	uxth	r3, r3
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d014      	beq.n	800862a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	68da      	ldr	r2, [r3, #12]
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800860a:	b292      	uxth	r2, r2
 800860c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008612:	1c9a      	adds	r2, r3, #2
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800861c:	b29b      	uxth	r3, r3
 800861e:	3b01      	subs	r3, #1
 8008620:	b29a      	uxth	r2, r3
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008626:	2301      	movs	r3, #1
 8008628:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800862a:	f7fc ff77 	bl	800551c <HAL_GetTick>
 800862e:	4602      	mov	r2, r0
 8008630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008632:	1ad3      	subs	r3, r2, r3
 8008634:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008636:	429a      	cmp	r2, r3
 8008638:	d807      	bhi.n	800864a <HAL_SPI_TransmitReceive+0x1d8>
 800863a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800863c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008640:	d003      	beq.n	800864a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8008642:	2303      	movs	r3, #3
 8008644:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008648:	e0a7      	b.n	800879a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800864e:	b29b      	uxth	r3, r3
 8008650:	2b00      	cmp	r3, #0
 8008652:	d1a6      	bne.n	80085a2 <HAL_SPI_TransmitReceive+0x130>
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008658:	b29b      	uxth	r3, r3
 800865a:	2b00      	cmp	r3, #0
 800865c:	d1a1      	bne.n	80085a2 <HAL_SPI_TransmitReceive+0x130>
 800865e:	e07c      	b.n	800875a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	685b      	ldr	r3, [r3, #4]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d002      	beq.n	800866e <HAL_SPI_TransmitReceive+0x1fc>
 8008668:	8b7b      	ldrh	r3, [r7, #26]
 800866a:	2b01      	cmp	r3, #1
 800866c:	d16b      	bne.n	8008746 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	330c      	adds	r3, #12
 8008678:	7812      	ldrb	r2, [r2, #0]
 800867a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008680:	1c5a      	adds	r2, r3, #1
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800868a:	b29b      	uxth	r3, r3
 800868c:	3b01      	subs	r3, #1
 800868e:	b29a      	uxth	r2, r3
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008694:	e057      	b.n	8008746 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	689b      	ldr	r3, [r3, #8]
 800869c:	f003 0302 	and.w	r3, r3, #2
 80086a0:	2b02      	cmp	r3, #2
 80086a2:	d11c      	bne.n	80086de <HAL_SPI_TransmitReceive+0x26c>
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80086a8:	b29b      	uxth	r3, r3
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d017      	beq.n	80086de <HAL_SPI_TransmitReceive+0x26c>
 80086ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086b0:	2b01      	cmp	r3, #1
 80086b2:	d114      	bne.n	80086de <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	330c      	adds	r3, #12
 80086be:	7812      	ldrb	r2, [r2, #0]
 80086c0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086c6:	1c5a      	adds	r2, r3, #1
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80086d0:	b29b      	uxth	r3, r3
 80086d2:	3b01      	subs	r3, #1
 80086d4:	b29a      	uxth	r2, r3
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80086da:	2300      	movs	r3, #0
 80086dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	689b      	ldr	r3, [r3, #8]
 80086e4:	f003 0301 	and.w	r3, r3, #1
 80086e8:	2b01      	cmp	r3, #1
 80086ea:	d119      	bne.n	8008720 <HAL_SPI_TransmitReceive+0x2ae>
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80086f0:	b29b      	uxth	r3, r3
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d014      	beq.n	8008720 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	68da      	ldr	r2, [r3, #12]
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008700:	b2d2      	uxtb	r2, r2
 8008702:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008708:	1c5a      	adds	r2, r3, #1
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008712:	b29b      	uxth	r3, r3
 8008714:	3b01      	subs	r3, #1
 8008716:	b29a      	uxth	r2, r3
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800871c:	2301      	movs	r3, #1
 800871e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008720:	f7fc fefc 	bl	800551c <HAL_GetTick>
 8008724:	4602      	mov	r2, r0
 8008726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008728:	1ad3      	subs	r3, r2, r3
 800872a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800872c:	429a      	cmp	r2, r3
 800872e:	d803      	bhi.n	8008738 <HAL_SPI_TransmitReceive+0x2c6>
 8008730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008732:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008736:	d102      	bne.n	800873e <HAL_SPI_TransmitReceive+0x2cc>
 8008738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800873a:	2b00      	cmp	r3, #0
 800873c:	d103      	bne.n	8008746 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800873e:	2303      	movs	r3, #3
 8008740:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008744:	e029      	b.n	800879a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800874a:	b29b      	uxth	r3, r3
 800874c:	2b00      	cmp	r3, #0
 800874e:	d1a2      	bne.n	8008696 <HAL_SPI_TransmitReceive+0x224>
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008754:	b29b      	uxth	r3, r3
 8008756:	2b00      	cmp	r3, #0
 8008758:	d19d      	bne.n	8008696 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800875a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800875c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800875e:	68f8      	ldr	r0, [r7, #12]
 8008760:	f000 f8c0 	bl	80088e4 <SPI_EndRxTxTransaction>
 8008764:	4603      	mov	r3, r0
 8008766:	2b00      	cmp	r3, #0
 8008768:	d006      	beq.n	8008778 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800876a:	2301      	movs	r3, #1
 800876c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	2220      	movs	r2, #32
 8008774:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8008776:	e010      	b.n	800879a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	689b      	ldr	r3, [r3, #8]
 800877c:	2b00      	cmp	r3, #0
 800877e:	d10b      	bne.n	8008798 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008780:	2300      	movs	r3, #0
 8008782:	617b      	str	r3, [r7, #20]
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	68db      	ldr	r3, [r3, #12]
 800878a:	617b      	str	r3, [r7, #20]
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	689b      	ldr	r3, [r3, #8]
 8008792:	617b      	str	r3, [r7, #20]
 8008794:	697b      	ldr	r3, [r7, #20]
 8008796:	e000      	b.n	800879a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8008798:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	2201      	movs	r2, #1
 800879e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	2200      	movs	r2, #0
 80087a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80087aa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80087ae:	4618      	mov	r0, r3
 80087b0:	3730      	adds	r7, #48	; 0x30
 80087b2:	46bd      	mov	sp, r7
 80087b4:	bd80      	pop	{r7, pc}

080087b6 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80087b6:	b480      	push	{r7}
 80087b8:	b083      	sub	sp, #12
 80087ba:	af00      	add	r7, sp, #0
 80087bc:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80087c4:	b2db      	uxtb	r3, r3
}
 80087c6:	4618      	mov	r0, r3
 80087c8:	370c      	adds	r7, #12
 80087ca:	46bd      	mov	sp, r7
 80087cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d0:	4770      	bx	lr
	...

080087d4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80087d4:	b580      	push	{r7, lr}
 80087d6:	b088      	sub	sp, #32
 80087d8:	af00      	add	r7, sp, #0
 80087da:	60f8      	str	r0, [r7, #12]
 80087dc:	60b9      	str	r1, [r7, #8]
 80087de:	603b      	str	r3, [r7, #0]
 80087e0:	4613      	mov	r3, r2
 80087e2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80087e4:	f7fc fe9a 	bl	800551c <HAL_GetTick>
 80087e8:	4602      	mov	r2, r0
 80087ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087ec:	1a9b      	subs	r3, r3, r2
 80087ee:	683a      	ldr	r2, [r7, #0]
 80087f0:	4413      	add	r3, r2
 80087f2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80087f4:	f7fc fe92 	bl	800551c <HAL_GetTick>
 80087f8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80087fa:	4b39      	ldr	r3, [pc, #228]	; (80088e0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	015b      	lsls	r3, r3, #5
 8008800:	0d1b      	lsrs	r3, r3, #20
 8008802:	69fa      	ldr	r2, [r7, #28]
 8008804:	fb02 f303 	mul.w	r3, r2, r3
 8008808:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800880a:	e054      	b.n	80088b6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800880c:	683b      	ldr	r3, [r7, #0]
 800880e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008812:	d050      	beq.n	80088b6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008814:	f7fc fe82 	bl	800551c <HAL_GetTick>
 8008818:	4602      	mov	r2, r0
 800881a:	69bb      	ldr	r3, [r7, #24]
 800881c:	1ad3      	subs	r3, r2, r3
 800881e:	69fa      	ldr	r2, [r7, #28]
 8008820:	429a      	cmp	r2, r3
 8008822:	d902      	bls.n	800882a <SPI_WaitFlagStateUntilTimeout+0x56>
 8008824:	69fb      	ldr	r3, [r7, #28]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d13d      	bne.n	80088a6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	685a      	ldr	r2, [r3, #4]
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008838:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	685b      	ldr	r3, [r3, #4]
 800883e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008842:	d111      	bne.n	8008868 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	689b      	ldr	r3, [r3, #8]
 8008848:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800884c:	d004      	beq.n	8008858 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	689b      	ldr	r3, [r3, #8]
 8008852:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008856:	d107      	bne.n	8008868 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	681a      	ldr	r2, [r3, #0]
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008866:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800886c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008870:	d10f      	bne.n	8008892 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	681a      	ldr	r2, [r3, #0]
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008880:	601a      	str	r2, [r3, #0]
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	681a      	ldr	r2, [r3, #0]
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008890:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	2201      	movs	r2, #1
 8008896:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	2200      	movs	r2, #0
 800889e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80088a2:	2303      	movs	r3, #3
 80088a4:	e017      	b.n	80088d6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80088a6:	697b      	ldr	r3, [r7, #20]
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d101      	bne.n	80088b0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80088ac:	2300      	movs	r3, #0
 80088ae:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80088b0:	697b      	ldr	r3, [r7, #20]
 80088b2:	3b01      	subs	r3, #1
 80088b4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	689a      	ldr	r2, [r3, #8]
 80088bc:	68bb      	ldr	r3, [r7, #8]
 80088be:	4013      	ands	r3, r2
 80088c0:	68ba      	ldr	r2, [r7, #8]
 80088c2:	429a      	cmp	r2, r3
 80088c4:	bf0c      	ite	eq
 80088c6:	2301      	moveq	r3, #1
 80088c8:	2300      	movne	r3, #0
 80088ca:	b2db      	uxtb	r3, r3
 80088cc:	461a      	mov	r2, r3
 80088ce:	79fb      	ldrb	r3, [r7, #7]
 80088d0:	429a      	cmp	r2, r3
 80088d2:	d19b      	bne.n	800880c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80088d4:	2300      	movs	r3, #0
}
 80088d6:	4618      	mov	r0, r3
 80088d8:	3720      	adds	r7, #32
 80088da:	46bd      	mov	sp, r7
 80088dc:	bd80      	pop	{r7, pc}
 80088de:	bf00      	nop
 80088e0:	2000000c 	.word	0x2000000c

080088e4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80088e4:	b580      	push	{r7, lr}
 80088e6:	b088      	sub	sp, #32
 80088e8:	af02      	add	r7, sp, #8
 80088ea:	60f8      	str	r0, [r7, #12]
 80088ec:	60b9      	str	r1, [r7, #8]
 80088ee:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80088f0:	4b1b      	ldr	r3, [pc, #108]	; (8008960 <SPI_EndRxTxTransaction+0x7c>)
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	4a1b      	ldr	r2, [pc, #108]	; (8008964 <SPI_EndRxTxTransaction+0x80>)
 80088f6:	fba2 2303 	umull	r2, r3, r2, r3
 80088fa:	0d5b      	lsrs	r3, r3, #21
 80088fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008900:	fb02 f303 	mul.w	r3, r2, r3
 8008904:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	685b      	ldr	r3, [r3, #4]
 800890a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800890e:	d112      	bne.n	8008936 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	9300      	str	r3, [sp, #0]
 8008914:	68bb      	ldr	r3, [r7, #8]
 8008916:	2200      	movs	r2, #0
 8008918:	2180      	movs	r1, #128	; 0x80
 800891a:	68f8      	ldr	r0, [r7, #12]
 800891c:	f7ff ff5a 	bl	80087d4 <SPI_WaitFlagStateUntilTimeout>
 8008920:	4603      	mov	r3, r0
 8008922:	2b00      	cmp	r3, #0
 8008924:	d016      	beq.n	8008954 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800892a:	f043 0220 	orr.w	r2, r3, #32
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008932:	2303      	movs	r3, #3
 8008934:	e00f      	b.n	8008956 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008936:	697b      	ldr	r3, [r7, #20]
 8008938:	2b00      	cmp	r3, #0
 800893a:	d00a      	beq.n	8008952 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800893c:	697b      	ldr	r3, [r7, #20]
 800893e:	3b01      	subs	r3, #1
 8008940:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	689b      	ldr	r3, [r3, #8]
 8008948:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800894c:	2b80      	cmp	r3, #128	; 0x80
 800894e:	d0f2      	beq.n	8008936 <SPI_EndRxTxTransaction+0x52>
 8008950:	e000      	b.n	8008954 <SPI_EndRxTxTransaction+0x70>
        break;
 8008952:	bf00      	nop
  }

  return HAL_OK;
 8008954:	2300      	movs	r3, #0
}
 8008956:	4618      	mov	r0, r3
 8008958:	3718      	adds	r7, #24
 800895a:	46bd      	mov	sp, r7
 800895c:	bd80      	pop	{r7, pc}
 800895e:	bf00      	nop
 8008960:	2000000c 	.word	0x2000000c
 8008964:	165e9f81 	.word	0x165e9f81

08008968 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008968:	b580      	push	{r7, lr}
 800896a:	b082      	sub	sp, #8
 800896c:	af00      	add	r7, sp, #0
 800896e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d101      	bne.n	800897a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008976:	2301      	movs	r3, #1
 8008978:	e041      	b.n	80089fe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008980:	b2db      	uxtb	r3, r3
 8008982:	2b00      	cmp	r3, #0
 8008984:	d106      	bne.n	8008994 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	2200      	movs	r2, #0
 800898a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800898e:	6878      	ldr	r0, [r7, #4]
 8008990:	f7fb f9b0 	bl	8003cf4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	2202      	movs	r2, #2
 8008998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681a      	ldr	r2, [r3, #0]
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	3304      	adds	r3, #4
 80089a4:	4619      	mov	r1, r3
 80089a6:	4610      	mov	r0, r2
 80089a8:	f000 fdec 	bl	8009584 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	2201      	movs	r2, #1
 80089b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	2201      	movs	r2, #1
 80089b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	2201      	movs	r2, #1
 80089c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	2201      	movs	r2, #1
 80089c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	2201      	movs	r2, #1
 80089d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	2201      	movs	r2, #1
 80089d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	2201      	movs	r2, #1
 80089e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	2201      	movs	r2, #1
 80089e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	2201      	movs	r2, #1
 80089f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	2201      	movs	r2, #1
 80089f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80089fc:	2300      	movs	r3, #0
}
 80089fe:	4618      	mov	r0, r3
 8008a00:	3708      	adds	r7, #8
 8008a02:	46bd      	mov	sp, r7
 8008a04:	bd80      	pop	{r7, pc}
	...

08008a08 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008a08:	b480      	push	{r7}
 8008a0a:	b085      	sub	sp, #20
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a16:	b2db      	uxtb	r3, r3
 8008a18:	2b01      	cmp	r3, #1
 8008a1a:	d001      	beq.n	8008a20 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008a1c:	2301      	movs	r3, #1
 8008a1e:	e04e      	b.n	8008abe <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	2202      	movs	r2, #2
 8008a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	68da      	ldr	r2, [r3, #12]
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	f042 0201 	orr.w	r2, r2, #1
 8008a36:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	4a23      	ldr	r2, [pc, #140]	; (8008acc <HAL_TIM_Base_Start_IT+0xc4>)
 8008a3e:	4293      	cmp	r3, r2
 8008a40:	d022      	beq.n	8008a88 <HAL_TIM_Base_Start_IT+0x80>
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a4a:	d01d      	beq.n	8008a88 <HAL_TIM_Base_Start_IT+0x80>
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	4a1f      	ldr	r2, [pc, #124]	; (8008ad0 <HAL_TIM_Base_Start_IT+0xc8>)
 8008a52:	4293      	cmp	r3, r2
 8008a54:	d018      	beq.n	8008a88 <HAL_TIM_Base_Start_IT+0x80>
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	4a1e      	ldr	r2, [pc, #120]	; (8008ad4 <HAL_TIM_Base_Start_IT+0xcc>)
 8008a5c:	4293      	cmp	r3, r2
 8008a5e:	d013      	beq.n	8008a88 <HAL_TIM_Base_Start_IT+0x80>
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	4a1c      	ldr	r2, [pc, #112]	; (8008ad8 <HAL_TIM_Base_Start_IT+0xd0>)
 8008a66:	4293      	cmp	r3, r2
 8008a68:	d00e      	beq.n	8008a88 <HAL_TIM_Base_Start_IT+0x80>
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	4a1b      	ldr	r2, [pc, #108]	; (8008adc <HAL_TIM_Base_Start_IT+0xd4>)
 8008a70:	4293      	cmp	r3, r2
 8008a72:	d009      	beq.n	8008a88 <HAL_TIM_Base_Start_IT+0x80>
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	4a19      	ldr	r2, [pc, #100]	; (8008ae0 <HAL_TIM_Base_Start_IT+0xd8>)
 8008a7a:	4293      	cmp	r3, r2
 8008a7c:	d004      	beq.n	8008a88 <HAL_TIM_Base_Start_IT+0x80>
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	4a18      	ldr	r2, [pc, #96]	; (8008ae4 <HAL_TIM_Base_Start_IT+0xdc>)
 8008a84:	4293      	cmp	r3, r2
 8008a86:	d111      	bne.n	8008aac <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	689b      	ldr	r3, [r3, #8]
 8008a8e:	f003 0307 	and.w	r3, r3, #7
 8008a92:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	2b06      	cmp	r3, #6
 8008a98:	d010      	beq.n	8008abc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	681a      	ldr	r2, [r3, #0]
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	f042 0201 	orr.w	r2, r2, #1
 8008aa8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008aaa:	e007      	b.n	8008abc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	681a      	ldr	r2, [r3, #0]
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	f042 0201 	orr.w	r2, r2, #1
 8008aba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008abc:	2300      	movs	r3, #0
}
 8008abe:	4618      	mov	r0, r3
 8008ac0:	3714      	adds	r7, #20
 8008ac2:	46bd      	mov	sp, r7
 8008ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac8:	4770      	bx	lr
 8008aca:	bf00      	nop
 8008acc:	40010000 	.word	0x40010000
 8008ad0:	40000400 	.word	0x40000400
 8008ad4:	40000800 	.word	0x40000800
 8008ad8:	40000c00 	.word	0x40000c00
 8008adc:	40010400 	.word	0x40010400
 8008ae0:	40014000 	.word	0x40014000
 8008ae4:	40001800 	.word	0x40001800

08008ae8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	b082      	sub	sp, #8
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d101      	bne.n	8008afa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008af6:	2301      	movs	r3, #1
 8008af8:	e041      	b.n	8008b7e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b00:	b2db      	uxtb	r3, r3
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d106      	bne.n	8008b14 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	2200      	movs	r2, #0
 8008b0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008b0e:	6878      	ldr	r0, [r7, #4]
 8008b10:	f000 f839 	bl	8008b86 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	2202      	movs	r2, #2
 8008b18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681a      	ldr	r2, [r3, #0]
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	3304      	adds	r3, #4
 8008b24:	4619      	mov	r1, r3
 8008b26:	4610      	mov	r0, r2
 8008b28:	f000 fd2c 	bl	8009584 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	2201      	movs	r2, #1
 8008b30:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	2201      	movs	r2, #1
 8008b38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	2201      	movs	r2, #1
 8008b40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	2201      	movs	r2, #1
 8008b48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	2201      	movs	r2, #1
 8008b50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	2201      	movs	r2, #1
 8008b58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	2201      	movs	r2, #1
 8008b60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	2201      	movs	r2, #1
 8008b68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	2201      	movs	r2, #1
 8008b70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	2201      	movs	r2, #1
 8008b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008b7c:	2300      	movs	r3, #0
}
 8008b7e:	4618      	mov	r0, r3
 8008b80:	3708      	adds	r7, #8
 8008b82:	46bd      	mov	sp, r7
 8008b84:	bd80      	pop	{r7, pc}

08008b86 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008b86:	b480      	push	{r7}
 8008b88:	b083      	sub	sp, #12
 8008b8a:	af00      	add	r7, sp, #0
 8008b8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008b8e:	bf00      	nop
 8008b90:	370c      	adds	r7, #12
 8008b92:	46bd      	mov	sp, r7
 8008b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b98:	4770      	bx	lr
	...

08008b9c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008b9c:	b580      	push	{r7, lr}
 8008b9e:	b084      	sub	sp, #16
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	6078      	str	r0, [r7, #4]
 8008ba4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008ba6:	683b      	ldr	r3, [r7, #0]
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d109      	bne.n	8008bc0 <HAL_TIM_PWM_Start+0x24>
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008bb2:	b2db      	uxtb	r3, r3
 8008bb4:	2b01      	cmp	r3, #1
 8008bb6:	bf14      	ite	ne
 8008bb8:	2301      	movne	r3, #1
 8008bba:	2300      	moveq	r3, #0
 8008bbc:	b2db      	uxtb	r3, r3
 8008bbe:	e022      	b.n	8008c06 <HAL_TIM_PWM_Start+0x6a>
 8008bc0:	683b      	ldr	r3, [r7, #0]
 8008bc2:	2b04      	cmp	r3, #4
 8008bc4:	d109      	bne.n	8008bda <HAL_TIM_PWM_Start+0x3e>
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008bcc:	b2db      	uxtb	r3, r3
 8008bce:	2b01      	cmp	r3, #1
 8008bd0:	bf14      	ite	ne
 8008bd2:	2301      	movne	r3, #1
 8008bd4:	2300      	moveq	r3, #0
 8008bd6:	b2db      	uxtb	r3, r3
 8008bd8:	e015      	b.n	8008c06 <HAL_TIM_PWM_Start+0x6a>
 8008bda:	683b      	ldr	r3, [r7, #0]
 8008bdc:	2b08      	cmp	r3, #8
 8008bde:	d109      	bne.n	8008bf4 <HAL_TIM_PWM_Start+0x58>
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008be6:	b2db      	uxtb	r3, r3
 8008be8:	2b01      	cmp	r3, #1
 8008bea:	bf14      	ite	ne
 8008bec:	2301      	movne	r3, #1
 8008bee:	2300      	moveq	r3, #0
 8008bf0:	b2db      	uxtb	r3, r3
 8008bf2:	e008      	b.n	8008c06 <HAL_TIM_PWM_Start+0x6a>
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008bfa:	b2db      	uxtb	r3, r3
 8008bfc:	2b01      	cmp	r3, #1
 8008bfe:	bf14      	ite	ne
 8008c00:	2301      	movne	r3, #1
 8008c02:	2300      	moveq	r3, #0
 8008c04:	b2db      	uxtb	r3, r3
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d001      	beq.n	8008c0e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8008c0a:	2301      	movs	r3, #1
 8008c0c:	e07c      	b.n	8008d08 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008c0e:	683b      	ldr	r3, [r7, #0]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d104      	bne.n	8008c1e <HAL_TIM_PWM_Start+0x82>
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	2202      	movs	r2, #2
 8008c18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008c1c:	e013      	b.n	8008c46 <HAL_TIM_PWM_Start+0xaa>
 8008c1e:	683b      	ldr	r3, [r7, #0]
 8008c20:	2b04      	cmp	r3, #4
 8008c22:	d104      	bne.n	8008c2e <HAL_TIM_PWM_Start+0x92>
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	2202      	movs	r2, #2
 8008c28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008c2c:	e00b      	b.n	8008c46 <HAL_TIM_PWM_Start+0xaa>
 8008c2e:	683b      	ldr	r3, [r7, #0]
 8008c30:	2b08      	cmp	r3, #8
 8008c32:	d104      	bne.n	8008c3e <HAL_TIM_PWM_Start+0xa2>
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	2202      	movs	r2, #2
 8008c38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008c3c:	e003      	b.n	8008c46 <HAL_TIM_PWM_Start+0xaa>
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	2202      	movs	r2, #2
 8008c42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	2201      	movs	r2, #1
 8008c4c:	6839      	ldr	r1, [r7, #0]
 8008c4e:	4618      	mov	r0, r3
 8008c50:	f001 f93e 	bl	8009ed0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	4a2d      	ldr	r2, [pc, #180]	; (8008d10 <HAL_TIM_PWM_Start+0x174>)
 8008c5a:	4293      	cmp	r3, r2
 8008c5c:	d004      	beq.n	8008c68 <HAL_TIM_PWM_Start+0xcc>
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	4a2c      	ldr	r2, [pc, #176]	; (8008d14 <HAL_TIM_PWM_Start+0x178>)
 8008c64:	4293      	cmp	r3, r2
 8008c66:	d101      	bne.n	8008c6c <HAL_TIM_PWM_Start+0xd0>
 8008c68:	2301      	movs	r3, #1
 8008c6a:	e000      	b.n	8008c6e <HAL_TIM_PWM_Start+0xd2>
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d007      	beq.n	8008c82 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008c80:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	4a22      	ldr	r2, [pc, #136]	; (8008d10 <HAL_TIM_PWM_Start+0x174>)
 8008c88:	4293      	cmp	r3, r2
 8008c8a:	d022      	beq.n	8008cd2 <HAL_TIM_PWM_Start+0x136>
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c94:	d01d      	beq.n	8008cd2 <HAL_TIM_PWM_Start+0x136>
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	4a1f      	ldr	r2, [pc, #124]	; (8008d18 <HAL_TIM_PWM_Start+0x17c>)
 8008c9c:	4293      	cmp	r3, r2
 8008c9e:	d018      	beq.n	8008cd2 <HAL_TIM_PWM_Start+0x136>
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	4a1d      	ldr	r2, [pc, #116]	; (8008d1c <HAL_TIM_PWM_Start+0x180>)
 8008ca6:	4293      	cmp	r3, r2
 8008ca8:	d013      	beq.n	8008cd2 <HAL_TIM_PWM_Start+0x136>
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	4a1c      	ldr	r2, [pc, #112]	; (8008d20 <HAL_TIM_PWM_Start+0x184>)
 8008cb0:	4293      	cmp	r3, r2
 8008cb2:	d00e      	beq.n	8008cd2 <HAL_TIM_PWM_Start+0x136>
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	4a16      	ldr	r2, [pc, #88]	; (8008d14 <HAL_TIM_PWM_Start+0x178>)
 8008cba:	4293      	cmp	r3, r2
 8008cbc:	d009      	beq.n	8008cd2 <HAL_TIM_PWM_Start+0x136>
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	4a18      	ldr	r2, [pc, #96]	; (8008d24 <HAL_TIM_PWM_Start+0x188>)
 8008cc4:	4293      	cmp	r3, r2
 8008cc6:	d004      	beq.n	8008cd2 <HAL_TIM_PWM_Start+0x136>
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	4a16      	ldr	r2, [pc, #88]	; (8008d28 <HAL_TIM_PWM_Start+0x18c>)
 8008cce:	4293      	cmp	r3, r2
 8008cd0:	d111      	bne.n	8008cf6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	689b      	ldr	r3, [r3, #8]
 8008cd8:	f003 0307 	and.w	r3, r3, #7
 8008cdc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	2b06      	cmp	r3, #6
 8008ce2:	d010      	beq.n	8008d06 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	681a      	ldr	r2, [r3, #0]
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	f042 0201 	orr.w	r2, r2, #1
 8008cf2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008cf4:	e007      	b.n	8008d06 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	681a      	ldr	r2, [r3, #0]
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	f042 0201 	orr.w	r2, r2, #1
 8008d04:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008d06:	2300      	movs	r3, #0
}
 8008d08:	4618      	mov	r0, r3
 8008d0a:	3710      	adds	r7, #16
 8008d0c:	46bd      	mov	sp, r7
 8008d0e:	bd80      	pop	{r7, pc}
 8008d10:	40010000 	.word	0x40010000
 8008d14:	40010400 	.word	0x40010400
 8008d18:	40000400 	.word	0x40000400
 8008d1c:	40000800 	.word	0x40000800
 8008d20:	40000c00 	.word	0x40000c00
 8008d24:	40014000 	.word	0x40014000
 8008d28:	40001800 	.word	0x40001800

08008d2c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8008d2c:	b580      	push	{r7, lr}
 8008d2e:	b082      	sub	sp, #8
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d101      	bne.n	8008d3e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8008d3a:	2301      	movs	r3, #1
 8008d3c:	e041      	b.n	8008dc2 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d44:	b2db      	uxtb	r3, r3
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d106      	bne.n	8008d58 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	2200      	movs	r2, #0
 8008d4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8008d52:	6878      	ldr	r0, [r7, #4]
 8008d54:	f000 f839 	bl	8008dca <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	2202      	movs	r2, #2
 8008d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681a      	ldr	r2, [r3, #0]
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	3304      	adds	r3, #4
 8008d68:	4619      	mov	r1, r3
 8008d6a:	4610      	mov	r0, r2
 8008d6c:	f000 fc0a 	bl	8009584 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	2201      	movs	r2, #1
 8008d74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	2201      	movs	r2, #1
 8008d7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	2201      	movs	r2, #1
 8008d84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	2201      	movs	r2, #1
 8008d8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	2201      	movs	r2, #1
 8008d94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	2201      	movs	r2, #1
 8008d9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	2201      	movs	r2, #1
 8008da4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	2201      	movs	r2, #1
 8008dac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	2201      	movs	r2, #1
 8008db4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	2201      	movs	r2, #1
 8008dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008dc0:	2300      	movs	r3, #0
}
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	3708      	adds	r7, #8
 8008dc6:	46bd      	mov	sp, r7
 8008dc8:	bd80      	pop	{r7, pc}

08008dca <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8008dca:	b480      	push	{r7}
 8008dcc:	b083      	sub	sp, #12
 8008dce:	af00      	add	r7, sp, #0
 8008dd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8008dd2:	bf00      	nop
 8008dd4:	370c      	adds	r7, #12
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ddc:	4770      	bx	lr

08008dde <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008dde:	b580      	push	{r7, lr}
 8008de0:	b082      	sub	sp, #8
 8008de2:	af00      	add	r7, sp, #0
 8008de4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	691b      	ldr	r3, [r3, #16]
 8008dec:	f003 0302 	and.w	r3, r3, #2
 8008df0:	2b02      	cmp	r3, #2
 8008df2:	d122      	bne.n	8008e3a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	68db      	ldr	r3, [r3, #12]
 8008dfa:	f003 0302 	and.w	r3, r3, #2
 8008dfe:	2b02      	cmp	r3, #2
 8008e00:	d11b      	bne.n	8008e3a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	f06f 0202 	mvn.w	r2, #2
 8008e0a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	2201      	movs	r2, #1
 8008e10:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	699b      	ldr	r3, [r3, #24]
 8008e18:	f003 0303 	and.w	r3, r3, #3
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d003      	beq.n	8008e28 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008e20:	6878      	ldr	r0, [r7, #4]
 8008e22:	f7f9 fa49 	bl	80022b8 <HAL_TIM_IC_CaptureCallback>
 8008e26:	e005      	b.n	8008e34 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e28:	6878      	ldr	r0, [r7, #4]
 8008e2a:	f000 fb8d 	bl	8009548 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e2e:	6878      	ldr	r0, [r7, #4]
 8008e30:	f000 fb94 	bl	800955c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	2200      	movs	r2, #0
 8008e38:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	691b      	ldr	r3, [r3, #16]
 8008e40:	f003 0304 	and.w	r3, r3, #4
 8008e44:	2b04      	cmp	r3, #4
 8008e46:	d122      	bne.n	8008e8e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	68db      	ldr	r3, [r3, #12]
 8008e4e:	f003 0304 	and.w	r3, r3, #4
 8008e52:	2b04      	cmp	r3, #4
 8008e54:	d11b      	bne.n	8008e8e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	f06f 0204 	mvn.w	r2, #4
 8008e5e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	2202      	movs	r2, #2
 8008e64:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	699b      	ldr	r3, [r3, #24]
 8008e6c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d003      	beq.n	8008e7c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008e74:	6878      	ldr	r0, [r7, #4]
 8008e76:	f7f9 fa1f 	bl	80022b8 <HAL_TIM_IC_CaptureCallback>
 8008e7a:	e005      	b.n	8008e88 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e7c:	6878      	ldr	r0, [r7, #4]
 8008e7e:	f000 fb63 	bl	8009548 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e82:	6878      	ldr	r0, [r7, #4]
 8008e84:	f000 fb6a 	bl	800955c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	691b      	ldr	r3, [r3, #16]
 8008e94:	f003 0308 	and.w	r3, r3, #8
 8008e98:	2b08      	cmp	r3, #8
 8008e9a:	d122      	bne.n	8008ee2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	68db      	ldr	r3, [r3, #12]
 8008ea2:	f003 0308 	and.w	r3, r3, #8
 8008ea6:	2b08      	cmp	r3, #8
 8008ea8:	d11b      	bne.n	8008ee2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	f06f 0208 	mvn.w	r2, #8
 8008eb2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	2204      	movs	r2, #4
 8008eb8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	69db      	ldr	r3, [r3, #28]
 8008ec0:	f003 0303 	and.w	r3, r3, #3
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d003      	beq.n	8008ed0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008ec8:	6878      	ldr	r0, [r7, #4]
 8008eca:	f7f9 f9f5 	bl	80022b8 <HAL_TIM_IC_CaptureCallback>
 8008ece:	e005      	b.n	8008edc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008ed0:	6878      	ldr	r0, [r7, #4]
 8008ed2:	f000 fb39 	bl	8009548 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ed6:	6878      	ldr	r0, [r7, #4]
 8008ed8:	f000 fb40 	bl	800955c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	2200      	movs	r2, #0
 8008ee0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	691b      	ldr	r3, [r3, #16]
 8008ee8:	f003 0310 	and.w	r3, r3, #16
 8008eec:	2b10      	cmp	r3, #16
 8008eee:	d122      	bne.n	8008f36 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	68db      	ldr	r3, [r3, #12]
 8008ef6:	f003 0310 	and.w	r3, r3, #16
 8008efa:	2b10      	cmp	r3, #16
 8008efc:	d11b      	bne.n	8008f36 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	f06f 0210 	mvn.w	r2, #16
 8008f06:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	2208      	movs	r2, #8
 8008f0c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	69db      	ldr	r3, [r3, #28]
 8008f14:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d003      	beq.n	8008f24 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008f1c:	6878      	ldr	r0, [r7, #4]
 8008f1e:	f7f9 f9cb 	bl	80022b8 <HAL_TIM_IC_CaptureCallback>
 8008f22:	e005      	b.n	8008f30 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f24:	6878      	ldr	r0, [r7, #4]
 8008f26:	f000 fb0f 	bl	8009548 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f2a:	6878      	ldr	r0, [r7, #4]
 8008f2c:	f000 fb16 	bl	800955c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	2200      	movs	r2, #0
 8008f34:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	691b      	ldr	r3, [r3, #16]
 8008f3c:	f003 0301 	and.w	r3, r3, #1
 8008f40:	2b01      	cmp	r3, #1
 8008f42:	d10e      	bne.n	8008f62 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	68db      	ldr	r3, [r3, #12]
 8008f4a:	f003 0301 	and.w	r3, r3, #1
 8008f4e:	2b01      	cmp	r3, #1
 8008f50:	d107      	bne.n	8008f62 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	f06f 0201 	mvn.w	r2, #1
 8008f5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008f5c:	6878      	ldr	r0, [r7, #4]
 8008f5e:	f7f9 fa4d 	bl	80023fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	691b      	ldr	r3, [r3, #16]
 8008f68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f6c:	2b80      	cmp	r3, #128	; 0x80
 8008f6e:	d10e      	bne.n	8008f8e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	68db      	ldr	r3, [r3, #12]
 8008f76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f7a:	2b80      	cmp	r3, #128	; 0x80
 8008f7c:	d107      	bne.n	8008f8e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008f86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008f88:	6878      	ldr	r0, [r7, #4]
 8008f8a:	f001 f84d 	bl	800a028 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	691b      	ldr	r3, [r3, #16]
 8008f94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f98:	2b40      	cmp	r3, #64	; 0x40
 8008f9a:	d10e      	bne.n	8008fba <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	68db      	ldr	r3, [r3, #12]
 8008fa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fa6:	2b40      	cmp	r3, #64	; 0x40
 8008fa8:	d107      	bne.n	8008fba <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008fb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008fb4:	6878      	ldr	r0, [r7, #4]
 8008fb6:	f000 fadb 	bl	8009570 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	691b      	ldr	r3, [r3, #16]
 8008fc0:	f003 0320 	and.w	r3, r3, #32
 8008fc4:	2b20      	cmp	r3, #32
 8008fc6:	d10e      	bne.n	8008fe6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	68db      	ldr	r3, [r3, #12]
 8008fce:	f003 0320 	and.w	r3, r3, #32
 8008fd2:	2b20      	cmp	r3, #32
 8008fd4:	d107      	bne.n	8008fe6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	f06f 0220 	mvn.w	r2, #32
 8008fde:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008fe0:	6878      	ldr	r0, [r7, #4]
 8008fe2:	f001 f817 	bl	800a014 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008fe6:	bf00      	nop
 8008fe8:	3708      	adds	r7, #8
 8008fea:	46bd      	mov	sp, r7
 8008fec:	bd80      	pop	{r7, pc}

08008fee <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8008fee:	b580      	push	{r7, lr}
 8008ff0:	b086      	sub	sp, #24
 8008ff2:	af00      	add	r7, sp, #0
 8008ff4:	60f8      	str	r0, [r7, #12]
 8008ff6:	60b9      	str	r1, [r7, #8]
 8008ff8:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009004:	2b01      	cmp	r3, #1
 8009006:	d101      	bne.n	800900c <HAL_TIM_IC_ConfigChannel+0x1e>
 8009008:	2302      	movs	r3, #2
 800900a:	e088      	b.n	800911e <HAL_TIM_IC_ConfigChannel+0x130>
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	2201      	movs	r2, #1
 8009010:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	2b00      	cmp	r3, #0
 8009018:	d11b      	bne.n	8009052 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	6818      	ldr	r0, [r3, #0]
 800901e:	68bb      	ldr	r3, [r7, #8]
 8009020:	6819      	ldr	r1, [r3, #0]
 8009022:	68bb      	ldr	r3, [r7, #8]
 8009024:	685a      	ldr	r2, [r3, #4]
 8009026:	68bb      	ldr	r3, [r7, #8]
 8009028:	68db      	ldr	r3, [r3, #12]
 800902a:	f000 fd8d 	bl	8009b48 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	699a      	ldr	r2, [r3, #24]
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	f022 020c 	bic.w	r2, r2, #12
 800903c:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	6999      	ldr	r1, [r3, #24]
 8009044:	68bb      	ldr	r3, [r7, #8]
 8009046:	689a      	ldr	r2, [r3, #8]
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	430a      	orrs	r2, r1
 800904e:	619a      	str	r2, [r3, #24]
 8009050:	e060      	b.n	8009114 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	2b04      	cmp	r3, #4
 8009056:	d11c      	bne.n	8009092 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	6818      	ldr	r0, [r3, #0]
 800905c:	68bb      	ldr	r3, [r7, #8]
 800905e:	6819      	ldr	r1, [r3, #0]
 8009060:	68bb      	ldr	r3, [r7, #8]
 8009062:	685a      	ldr	r2, [r3, #4]
 8009064:	68bb      	ldr	r3, [r7, #8]
 8009066:	68db      	ldr	r3, [r3, #12]
 8009068:	f000 fe11 	bl	8009c8e <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	699a      	ldr	r2, [r3, #24]
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800907a:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	6999      	ldr	r1, [r3, #24]
 8009082:	68bb      	ldr	r3, [r7, #8]
 8009084:	689b      	ldr	r3, [r3, #8]
 8009086:	021a      	lsls	r2, r3, #8
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	430a      	orrs	r2, r1
 800908e:	619a      	str	r2, [r3, #24]
 8009090:	e040      	b.n	8009114 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	2b08      	cmp	r3, #8
 8009096:	d11b      	bne.n	80090d0 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	6818      	ldr	r0, [r3, #0]
 800909c:	68bb      	ldr	r3, [r7, #8]
 800909e:	6819      	ldr	r1, [r3, #0]
 80090a0:	68bb      	ldr	r3, [r7, #8]
 80090a2:	685a      	ldr	r2, [r3, #4]
 80090a4:	68bb      	ldr	r3, [r7, #8]
 80090a6:	68db      	ldr	r3, [r3, #12]
 80090a8:	f000 fe5e 	bl	8009d68 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	69da      	ldr	r2, [r3, #28]
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	f022 020c 	bic.w	r2, r2, #12
 80090ba:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	69d9      	ldr	r1, [r3, #28]
 80090c2:	68bb      	ldr	r3, [r7, #8]
 80090c4:	689a      	ldr	r2, [r3, #8]
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	430a      	orrs	r2, r1
 80090cc:	61da      	str	r2, [r3, #28]
 80090ce:	e021      	b.n	8009114 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	2b0c      	cmp	r3, #12
 80090d4:	d11c      	bne.n	8009110 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	6818      	ldr	r0, [r3, #0]
 80090da:	68bb      	ldr	r3, [r7, #8]
 80090dc:	6819      	ldr	r1, [r3, #0]
 80090de:	68bb      	ldr	r3, [r7, #8]
 80090e0:	685a      	ldr	r2, [r3, #4]
 80090e2:	68bb      	ldr	r3, [r7, #8]
 80090e4:	68db      	ldr	r3, [r3, #12]
 80090e6:	f000 fe7b 	bl	8009de0 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	69da      	ldr	r2, [r3, #28]
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80090f8:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	69d9      	ldr	r1, [r3, #28]
 8009100:	68bb      	ldr	r3, [r7, #8]
 8009102:	689b      	ldr	r3, [r3, #8]
 8009104:	021a      	lsls	r2, r3, #8
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	430a      	orrs	r2, r1
 800910c:	61da      	str	r2, [r3, #28]
 800910e:	e001      	b.n	8009114 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8009110:	2301      	movs	r3, #1
 8009112:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	2200      	movs	r2, #0
 8009118:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800911c:	7dfb      	ldrb	r3, [r7, #23]
}
 800911e:	4618      	mov	r0, r3
 8009120:	3718      	adds	r7, #24
 8009122:	46bd      	mov	sp, r7
 8009124:	bd80      	pop	{r7, pc}
	...

08009128 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009128:	b580      	push	{r7, lr}
 800912a:	b086      	sub	sp, #24
 800912c:	af00      	add	r7, sp, #0
 800912e:	60f8      	str	r0, [r7, #12]
 8009130:	60b9      	str	r1, [r7, #8]
 8009132:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009134:	2300      	movs	r3, #0
 8009136:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800913e:	2b01      	cmp	r3, #1
 8009140:	d101      	bne.n	8009146 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009142:	2302      	movs	r3, #2
 8009144:	e0ae      	b.n	80092a4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	2201      	movs	r2, #1
 800914a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	2b0c      	cmp	r3, #12
 8009152:	f200 809f 	bhi.w	8009294 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8009156:	a201      	add	r2, pc, #4	; (adr r2, 800915c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800915c:	08009191 	.word	0x08009191
 8009160:	08009295 	.word	0x08009295
 8009164:	08009295 	.word	0x08009295
 8009168:	08009295 	.word	0x08009295
 800916c:	080091d1 	.word	0x080091d1
 8009170:	08009295 	.word	0x08009295
 8009174:	08009295 	.word	0x08009295
 8009178:	08009295 	.word	0x08009295
 800917c:	08009213 	.word	0x08009213
 8009180:	08009295 	.word	0x08009295
 8009184:	08009295 	.word	0x08009295
 8009188:	08009295 	.word	0x08009295
 800918c:	08009253 	.word	0x08009253
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	68b9      	ldr	r1, [r7, #8]
 8009196:	4618      	mov	r0, r3
 8009198:	f000 fa94 	bl	80096c4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	699a      	ldr	r2, [r3, #24]
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	f042 0208 	orr.w	r2, r2, #8
 80091aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	699a      	ldr	r2, [r3, #24]
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	f022 0204 	bic.w	r2, r2, #4
 80091ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	6999      	ldr	r1, [r3, #24]
 80091c2:	68bb      	ldr	r3, [r7, #8]
 80091c4:	691a      	ldr	r2, [r3, #16]
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	430a      	orrs	r2, r1
 80091cc:	619a      	str	r2, [r3, #24]
      break;
 80091ce:	e064      	b.n	800929a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	68b9      	ldr	r1, [r7, #8]
 80091d6:	4618      	mov	r0, r3
 80091d8:	f000 fae4 	bl	80097a4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	699a      	ldr	r2, [r3, #24]
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80091ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	699a      	ldr	r2, [r3, #24]
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80091fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	6999      	ldr	r1, [r3, #24]
 8009202:	68bb      	ldr	r3, [r7, #8]
 8009204:	691b      	ldr	r3, [r3, #16]
 8009206:	021a      	lsls	r2, r3, #8
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	430a      	orrs	r2, r1
 800920e:	619a      	str	r2, [r3, #24]
      break;
 8009210:	e043      	b.n	800929a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	68b9      	ldr	r1, [r7, #8]
 8009218:	4618      	mov	r0, r3
 800921a:	f000 fb39 	bl	8009890 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	69da      	ldr	r2, [r3, #28]
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	f042 0208 	orr.w	r2, r2, #8
 800922c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	69da      	ldr	r2, [r3, #28]
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	f022 0204 	bic.w	r2, r2, #4
 800923c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	69d9      	ldr	r1, [r3, #28]
 8009244:	68bb      	ldr	r3, [r7, #8]
 8009246:	691a      	ldr	r2, [r3, #16]
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	430a      	orrs	r2, r1
 800924e:	61da      	str	r2, [r3, #28]
      break;
 8009250:	e023      	b.n	800929a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	68b9      	ldr	r1, [r7, #8]
 8009258:	4618      	mov	r0, r3
 800925a:	f000 fb8d 	bl	8009978 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	69da      	ldr	r2, [r3, #28]
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800926c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	69da      	ldr	r2, [r3, #28]
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800927c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	69d9      	ldr	r1, [r3, #28]
 8009284:	68bb      	ldr	r3, [r7, #8]
 8009286:	691b      	ldr	r3, [r3, #16]
 8009288:	021a      	lsls	r2, r3, #8
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	430a      	orrs	r2, r1
 8009290:	61da      	str	r2, [r3, #28]
      break;
 8009292:	e002      	b.n	800929a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8009294:	2301      	movs	r3, #1
 8009296:	75fb      	strb	r3, [r7, #23]
      break;
 8009298:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	2200      	movs	r2, #0
 800929e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80092a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80092a4:	4618      	mov	r0, r3
 80092a6:	3718      	adds	r7, #24
 80092a8:	46bd      	mov	sp, r7
 80092aa:	bd80      	pop	{r7, pc}

080092ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80092ac:	b580      	push	{r7, lr}
 80092ae:	b084      	sub	sp, #16
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	6078      	str	r0, [r7, #4]
 80092b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80092b6:	2300      	movs	r3, #0
 80092b8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80092c0:	2b01      	cmp	r3, #1
 80092c2:	d101      	bne.n	80092c8 <HAL_TIM_ConfigClockSource+0x1c>
 80092c4:	2302      	movs	r3, #2
 80092c6:	e0b4      	b.n	8009432 <HAL_TIM_ConfigClockSource+0x186>
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	2201      	movs	r2, #1
 80092cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	2202      	movs	r2, #2
 80092d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	689b      	ldr	r3, [r3, #8]
 80092de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80092e0:	68bb      	ldr	r3, [r7, #8]
 80092e2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80092e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80092e8:	68bb      	ldr	r3, [r7, #8]
 80092ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80092ee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	68ba      	ldr	r2, [r7, #8]
 80092f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80092f8:	683b      	ldr	r3, [r7, #0]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009300:	d03e      	beq.n	8009380 <HAL_TIM_ConfigClockSource+0xd4>
 8009302:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009306:	f200 8087 	bhi.w	8009418 <HAL_TIM_ConfigClockSource+0x16c>
 800930a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800930e:	f000 8086 	beq.w	800941e <HAL_TIM_ConfigClockSource+0x172>
 8009312:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009316:	d87f      	bhi.n	8009418 <HAL_TIM_ConfigClockSource+0x16c>
 8009318:	2b70      	cmp	r3, #112	; 0x70
 800931a:	d01a      	beq.n	8009352 <HAL_TIM_ConfigClockSource+0xa6>
 800931c:	2b70      	cmp	r3, #112	; 0x70
 800931e:	d87b      	bhi.n	8009418 <HAL_TIM_ConfigClockSource+0x16c>
 8009320:	2b60      	cmp	r3, #96	; 0x60
 8009322:	d050      	beq.n	80093c6 <HAL_TIM_ConfigClockSource+0x11a>
 8009324:	2b60      	cmp	r3, #96	; 0x60
 8009326:	d877      	bhi.n	8009418 <HAL_TIM_ConfigClockSource+0x16c>
 8009328:	2b50      	cmp	r3, #80	; 0x50
 800932a:	d03c      	beq.n	80093a6 <HAL_TIM_ConfigClockSource+0xfa>
 800932c:	2b50      	cmp	r3, #80	; 0x50
 800932e:	d873      	bhi.n	8009418 <HAL_TIM_ConfigClockSource+0x16c>
 8009330:	2b40      	cmp	r3, #64	; 0x40
 8009332:	d058      	beq.n	80093e6 <HAL_TIM_ConfigClockSource+0x13a>
 8009334:	2b40      	cmp	r3, #64	; 0x40
 8009336:	d86f      	bhi.n	8009418 <HAL_TIM_ConfigClockSource+0x16c>
 8009338:	2b30      	cmp	r3, #48	; 0x30
 800933a:	d064      	beq.n	8009406 <HAL_TIM_ConfigClockSource+0x15a>
 800933c:	2b30      	cmp	r3, #48	; 0x30
 800933e:	d86b      	bhi.n	8009418 <HAL_TIM_ConfigClockSource+0x16c>
 8009340:	2b20      	cmp	r3, #32
 8009342:	d060      	beq.n	8009406 <HAL_TIM_ConfigClockSource+0x15a>
 8009344:	2b20      	cmp	r3, #32
 8009346:	d867      	bhi.n	8009418 <HAL_TIM_ConfigClockSource+0x16c>
 8009348:	2b00      	cmp	r3, #0
 800934a:	d05c      	beq.n	8009406 <HAL_TIM_ConfigClockSource+0x15a>
 800934c:	2b10      	cmp	r3, #16
 800934e:	d05a      	beq.n	8009406 <HAL_TIM_ConfigClockSource+0x15a>
 8009350:	e062      	b.n	8009418 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	6818      	ldr	r0, [r3, #0]
 8009356:	683b      	ldr	r3, [r7, #0]
 8009358:	6899      	ldr	r1, [r3, #8]
 800935a:	683b      	ldr	r3, [r7, #0]
 800935c:	685a      	ldr	r2, [r3, #4]
 800935e:	683b      	ldr	r3, [r7, #0]
 8009360:	68db      	ldr	r3, [r3, #12]
 8009362:	f000 fd95 	bl	8009e90 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	689b      	ldr	r3, [r3, #8]
 800936c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800936e:	68bb      	ldr	r3, [r7, #8]
 8009370:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009374:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	68ba      	ldr	r2, [r7, #8]
 800937c:	609a      	str	r2, [r3, #8]
      break;
 800937e:	e04f      	b.n	8009420 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	6818      	ldr	r0, [r3, #0]
 8009384:	683b      	ldr	r3, [r7, #0]
 8009386:	6899      	ldr	r1, [r3, #8]
 8009388:	683b      	ldr	r3, [r7, #0]
 800938a:	685a      	ldr	r2, [r3, #4]
 800938c:	683b      	ldr	r3, [r7, #0]
 800938e:	68db      	ldr	r3, [r3, #12]
 8009390:	f000 fd7e 	bl	8009e90 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	689a      	ldr	r2, [r3, #8]
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80093a2:	609a      	str	r2, [r3, #8]
      break;
 80093a4:	e03c      	b.n	8009420 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	6818      	ldr	r0, [r3, #0]
 80093aa:	683b      	ldr	r3, [r7, #0]
 80093ac:	6859      	ldr	r1, [r3, #4]
 80093ae:	683b      	ldr	r3, [r7, #0]
 80093b0:	68db      	ldr	r3, [r3, #12]
 80093b2:	461a      	mov	r2, r3
 80093b4:	f000 fc3c 	bl	8009c30 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	2150      	movs	r1, #80	; 0x50
 80093be:	4618      	mov	r0, r3
 80093c0:	f000 fd4b 	bl	8009e5a <TIM_ITRx_SetConfig>
      break;
 80093c4:	e02c      	b.n	8009420 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	6818      	ldr	r0, [r3, #0]
 80093ca:	683b      	ldr	r3, [r7, #0]
 80093cc:	6859      	ldr	r1, [r3, #4]
 80093ce:	683b      	ldr	r3, [r7, #0]
 80093d0:	68db      	ldr	r3, [r3, #12]
 80093d2:	461a      	mov	r2, r3
 80093d4:	f000 fc98 	bl	8009d08 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	2160      	movs	r1, #96	; 0x60
 80093de:	4618      	mov	r0, r3
 80093e0:	f000 fd3b 	bl	8009e5a <TIM_ITRx_SetConfig>
      break;
 80093e4:	e01c      	b.n	8009420 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	6818      	ldr	r0, [r3, #0]
 80093ea:	683b      	ldr	r3, [r7, #0]
 80093ec:	6859      	ldr	r1, [r3, #4]
 80093ee:	683b      	ldr	r3, [r7, #0]
 80093f0:	68db      	ldr	r3, [r3, #12]
 80093f2:	461a      	mov	r2, r3
 80093f4:	f000 fc1c 	bl	8009c30 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	2140      	movs	r1, #64	; 0x40
 80093fe:	4618      	mov	r0, r3
 8009400:	f000 fd2b 	bl	8009e5a <TIM_ITRx_SetConfig>
      break;
 8009404:	e00c      	b.n	8009420 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681a      	ldr	r2, [r3, #0]
 800940a:	683b      	ldr	r3, [r7, #0]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	4619      	mov	r1, r3
 8009410:	4610      	mov	r0, r2
 8009412:	f000 fd22 	bl	8009e5a <TIM_ITRx_SetConfig>
      break;
 8009416:	e003      	b.n	8009420 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009418:	2301      	movs	r3, #1
 800941a:	73fb      	strb	r3, [r7, #15]
      break;
 800941c:	e000      	b.n	8009420 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800941e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	2201      	movs	r2, #1
 8009424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	2200      	movs	r2, #0
 800942c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009430:	7bfb      	ldrb	r3, [r7, #15]
}
 8009432:	4618      	mov	r0, r3
 8009434:	3710      	adds	r7, #16
 8009436:	46bd      	mov	sp, r7
 8009438:	bd80      	pop	{r7, pc}

0800943a <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800943a:	b580      	push	{r7, lr}
 800943c:	b082      	sub	sp, #8
 800943e:	af00      	add	r7, sp, #0
 8009440:	6078      	str	r0, [r7, #4]
 8009442:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800944a:	2b01      	cmp	r3, #1
 800944c:	d101      	bne.n	8009452 <HAL_TIM_SlaveConfigSynchro+0x18>
 800944e:	2302      	movs	r3, #2
 8009450:	e031      	b.n	80094b6 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	2201      	movs	r2, #1
 8009456:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	2202      	movs	r2, #2
 800945e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8009462:	6839      	ldr	r1, [r7, #0]
 8009464:	6878      	ldr	r0, [r7, #4]
 8009466:	f000 fadd 	bl	8009a24 <TIM_SlaveTimer_SetConfig>
 800946a:	4603      	mov	r3, r0
 800946c:	2b00      	cmp	r3, #0
 800946e:	d009      	beq.n	8009484 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	2201      	movs	r2, #1
 8009474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	2200      	movs	r2, #0
 800947c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8009480:	2301      	movs	r3, #1
 8009482:	e018      	b.n	80094b6 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	68da      	ldr	r2, [r3, #12]
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009492:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	68da      	ldr	r2, [r3, #12]
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80094a2:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	2201      	movs	r2, #1
 80094a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	2200      	movs	r2, #0
 80094b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80094b4:	2300      	movs	r3, #0
}
 80094b6:	4618      	mov	r0, r3
 80094b8:	3708      	adds	r7, #8
 80094ba:	46bd      	mov	sp, r7
 80094bc:	bd80      	pop	{r7, pc}
	...

080094c0 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80094c0:	b480      	push	{r7}
 80094c2:	b085      	sub	sp, #20
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	6078      	str	r0, [r7, #4]
 80094c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80094ca:	2300      	movs	r3, #0
 80094cc:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80094ce:	683b      	ldr	r3, [r7, #0]
 80094d0:	2b0c      	cmp	r3, #12
 80094d2:	d831      	bhi.n	8009538 <HAL_TIM_ReadCapturedValue+0x78>
 80094d4:	a201      	add	r2, pc, #4	; (adr r2, 80094dc <HAL_TIM_ReadCapturedValue+0x1c>)
 80094d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094da:	bf00      	nop
 80094dc:	08009511 	.word	0x08009511
 80094e0:	08009539 	.word	0x08009539
 80094e4:	08009539 	.word	0x08009539
 80094e8:	08009539 	.word	0x08009539
 80094ec:	0800951b 	.word	0x0800951b
 80094f0:	08009539 	.word	0x08009539
 80094f4:	08009539 	.word	0x08009539
 80094f8:	08009539 	.word	0x08009539
 80094fc:	08009525 	.word	0x08009525
 8009500:	08009539 	.word	0x08009539
 8009504:	08009539 	.word	0x08009539
 8009508:	08009539 	.word	0x08009539
 800950c:	0800952f 	.word	0x0800952f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009516:	60fb      	str	r3, [r7, #12]

      break;
 8009518:	e00f      	b.n	800953a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009520:	60fb      	str	r3, [r7, #12]

      break;
 8009522:	e00a      	b.n	800953a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800952a:	60fb      	str	r3, [r7, #12]

      break;
 800952c:	e005      	b.n	800953a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009534:	60fb      	str	r3, [r7, #12]

      break;
 8009536:	e000      	b.n	800953a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8009538:	bf00      	nop
  }

  return tmpreg;
 800953a:	68fb      	ldr	r3, [r7, #12]
}
 800953c:	4618      	mov	r0, r3
 800953e:	3714      	adds	r7, #20
 8009540:	46bd      	mov	sp, r7
 8009542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009546:	4770      	bx	lr

08009548 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009548:	b480      	push	{r7}
 800954a:	b083      	sub	sp, #12
 800954c:	af00      	add	r7, sp, #0
 800954e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009550:	bf00      	nop
 8009552:	370c      	adds	r7, #12
 8009554:	46bd      	mov	sp, r7
 8009556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800955a:	4770      	bx	lr

0800955c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800955c:	b480      	push	{r7}
 800955e:	b083      	sub	sp, #12
 8009560:	af00      	add	r7, sp, #0
 8009562:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009564:	bf00      	nop
 8009566:	370c      	adds	r7, #12
 8009568:	46bd      	mov	sp, r7
 800956a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800956e:	4770      	bx	lr

08009570 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009570:	b480      	push	{r7}
 8009572:	b083      	sub	sp, #12
 8009574:	af00      	add	r7, sp, #0
 8009576:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009578:	bf00      	nop
 800957a:	370c      	adds	r7, #12
 800957c:	46bd      	mov	sp, r7
 800957e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009582:	4770      	bx	lr

08009584 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009584:	b480      	push	{r7}
 8009586:	b085      	sub	sp, #20
 8009588:	af00      	add	r7, sp, #0
 800958a:	6078      	str	r0, [r7, #4]
 800958c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	4a40      	ldr	r2, [pc, #256]	; (8009698 <TIM_Base_SetConfig+0x114>)
 8009598:	4293      	cmp	r3, r2
 800959a:	d013      	beq.n	80095c4 <TIM_Base_SetConfig+0x40>
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80095a2:	d00f      	beq.n	80095c4 <TIM_Base_SetConfig+0x40>
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	4a3d      	ldr	r2, [pc, #244]	; (800969c <TIM_Base_SetConfig+0x118>)
 80095a8:	4293      	cmp	r3, r2
 80095aa:	d00b      	beq.n	80095c4 <TIM_Base_SetConfig+0x40>
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	4a3c      	ldr	r2, [pc, #240]	; (80096a0 <TIM_Base_SetConfig+0x11c>)
 80095b0:	4293      	cmp	r3, r2
 80095b2:	d007      	beq.n	80095c4 <TIM_Base_SetConfig+0x40>
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	4a3b      	ldr	r2, [pc, #236]	; (80096a4 <TIM_Base_SetConfig+0x120>)
 80095b8:	4293      	cmp	r3, r2
 80095ba:	d003      	beq.n	80095c4 <TIM_Base_SetConfig+0x40>
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	4a3a      	ldr	r2, [pc, #232]	; (80096a8 <TIM_Base_SetConfig+0x124>)
 80095c0:	4293      	cmp	r3, r2
 80095c2:	d108      	bne.n	80095d6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80095ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80095cc:	683b      	ldr	r3, [r7, #0]
 80095ce:	685b      	ldr	r3, [r3, #4]
 80095d0:	68fa      	ldr	r2, [r7, #12]
 80095d2:	4313      	orrs	r3, r2
 80095d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	4a2f      	ldr	r2, [pc, #188]	; (8009698 <TIM_Base_SetConfig+0x114>)
 80095da:	4293      	cmp	r3, r2
 80095dc:	d02b      	beq.n	8009636 <TIM_Base_SetConfig+0xb2>
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80095e4:	d027      	beq.n	8009636 <TIM_Base_SetConfig+0xb2>
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	4a2c      	ldr	r2, [pc, #176]	; (800969c <TIM_Base_SetConfig+0x118>)
 80095ea:	4293      	cmp	r3, r2
 80095ec:	d023      	beq.n	8009636 <TIM_Base_SetConfig+0xb2>
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	4a2b      	ldr	r2, [pc, #172]	; (80096a0 <TIM_Base_SetConfig+0x11c>)
 80095f2:	4293      	cmp	r3, r2
 80095f4:	d01f      	beq.n	8009636 <TIM_Base_SetConfig+0xb2>
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	4a2a      	ldr	r2, [pc, #168]	; (80096a4 <TIM_Base_SetConfig+0x120>)
 80095fa:	4293      	cmp	r3, r2
 80095fc:	d01b      	beq.n	8009636 <TIM_Base_SetConfig+0xb2>
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	4a29      	ldr	r2, [pc, #164]	; (80096a8 <TIM_Base_SetConfig+0x124>)
 8009602:	4293      	cmp	r3, r2
 8009604:	d017      	beq.n	8009636 <TIM_Base_SetConfig+0xb2>
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	4a28      	ldr	r2, [pc, #160]	; (80096ac <TIM_Base_SetConfig+0x128>)
 800960a:	4293      	cmp	r3, r2
 800960c:	d013      	beq.n	8009636 <TIM_Base_SetConfig+0xb2>
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	4a27      	ldr	r2, [pc, #156]	; (80096b0 <TIM_Base_SetConfig+0x12c>)
 8009612:	4293      	cmp	r3, r2
 8009614:	d00f      	beq.n	8009636 <TIM_Base_SetConfig+0xb2>
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	4a26      	ldr	r2, [pc, #152]	; (80096b4 <TIM_Base_SetConfig+0x130>)
 800961a:	4293      	cmp	r3, r2
 800961c:	d00b      	beq.n	8009636 <TIM_Base_SetConfig+0xb2>
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	4a25      	ldr	r2, [pc, #148]	; (80096b8 <TIM_Base_SetConfig+0x134>)
 8009622:	4293      	cmp	r3, r2
 8009624:	d007      	beq.n	8009636 <TIM_Base_SetConfig+0xb2>
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	4a24      	ldr	r2, [pc, #144]	; (80096bc <TIM_Base_SetConfig+0x138>)
 800962a:	4293      	cmp	r3, r2
 800962c:	d003      	beq.n	8009636 <TIM_Base_SetConfig+0xb2>
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	4a23      	ldr	r2, [pc, #140]	; (80096c0 <TIM_Base_SetConfig+0x13c>)
 8009632:	4293      	cmp	r3, r2
 8009634:	d108      	bne.n	8009648 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800963c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800963e:	683b      	ldr	r3, [r7, #0]
 8009640:	68db      	ldr	r3, [r3, #12]
 8009642:	68fa      	ldr	r2, [r7, #12]
 8009644:	4313      	orrs	r3, r2
 8009646:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800964e:	683b      	ldr	r3, [r7, #0]
 8009650:	695b      	ldr	r3, [r3, #20]
 8009652:	4313      	orrs	r3, r2
 8009654:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	68fa      	ldr	r2, [r7, #12]
 800965a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800965c:	683b      	ldr	r3, [r7, #0]
 800965e:	689a      	ldr	r2, [r3, #8]
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009664:	683b      	ldr	r3, [r7, #0]
 8009666:	681a      	ldr	r2, [r3, #0]
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	4a0a      	ldr	r2, [pc, #40]	; (8009698 <TIM_Base_SetConfig+0x114>)
 8009670:	4293      	cmp	r3, r2
 8009672:	d003      	beq.n	800967c <TIM_Base_SetConfig+0xf8>
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	4a0c      	ldr	r2, [pc, #48]	; (80096a8 <TIM_Base_SetConfig+0x124>)
 8009678:	4293      	cmp	r3, r2
 800967a:	d103      	bne.n	8009684 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800967c:	683b      	ldr	r3, [r7, #0]
 800967e:	691a      	ldr	r2, [r3, #16]
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	2201      	movs	r2, #1
 8009688:	615a      	str	r2, [r3, #20]
}
 800968a:	bf00      	nop
 800968c:	3714      	adds	r7, #20
 800968e:	46bd      	mov	sp, r7
 8009690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009694:	4770      	bx	lr
 8009696:	bf00      	nop
 8009698:	40010000 	.word	0x40010000
 800969c:	40000400 	.word	0x40000400
 80096a0:	40000800 	.word	0x40000800
 80096a4:	40000c00 	.word	0x40000c00
 80096a8:	40010400 	.word	0x40010400
 80096ac:	40014000 	.word	0x40014000
 80096b0:	40014400 	.word	0x40014400
 80096b4:	40014800 	.word	0x40014800
 80096b8:	40001800 	.word	0x40001800
 80096bc:	40001c00 	.word	0x40001c00
 80096c0:	40002000 	.word	0x40002000

080096c4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80096c4:	b480      	push	{r7}
 80096c6:	b087      	sub	sp, #28
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	6078      	str	r0, [r7, #4]
 80096cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	6a1b      	ldr	r3, [r3, #32]
 80096d2:	f023 0201 	bic.w	r2, r3, #1
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	6a1b      	ldr	r3, [r3, #32]
 80096de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	685b      	ldr	r3, [r3, #4]
 80096e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	699b      	ldr	r3, [r3, #24]
 80096ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80096f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	f023 0303 	bic.w	r3, r3, #3
 80096fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80096fc:	683b      	ldr	r3, [r7, #0]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	68fa      	ldr	r2, [r7, #12]
 8009702:	4313      	orrs	r3, r2
 8009704:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009706:	697b      	ldr	r3, [r7, #20]
 8009708:	f023 0302 	bic.w	r3, r3, #2
 800970c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800970e:	683b      	ldr	r3, [r7, #0]
 8009710:	689b      	ldr	r3, [r3, #8]
 8009712:	697a      	ldr	r2, [r7, #20]
 8009714:	4313      	orrs	r3, r2
 8009716:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	4a20      	ldr	r2, [pc, #128]	; (800979c <TIM_OC1_SetConfig+0xd8>)
 800971c:	4293      	cmp	r3, r2
 800971e:	d003      	beq.n	8009728 <TIM_OC1_SetConfig+0x64>
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	4a1f      	ldr	r2, [pc, #124]	; (80097a0 <TIM_OC1_SetConfig+0xdc>)
 8009724:	4293      	cmp	r3, r2
 8009726:	d10c      	bne.n	8009742 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009728:	697b      	ldr	r3, [r7, #20]
 800972a:	f023 0308 	bic.w	r3, r3, #8
 800972e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009730:	683b      	ldr	r3, [r7, #0]
 8009732:	68db      	ldr	r3, [r3, #12]
 8009734:	697a      	ldr	r2, [r7, #20]
 8009736:	4313      	orrs	r3, r2
 8009738:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800973a:	697b      	ldr	r3, [r7, #20]
 800973c:	f023 0304 	bic.w	r3, r3, #4
 8009740:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	4a15      	ldr	r2, [pc, #84]	; (800979c <TIM_OC1_SetConfig+0xd8>)
 8009746:	4293      	cmp	r3, r2
 8009748:	d003      	beq.n	8009752 <TIM_OC1_SetConfig+0x8e>
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	4a14      	ldr	r2, [pc, #80]	; (80097a0 <TIM_OC1_SetConfig+0xdc>)
 800974e:	4293      	cmp	r3, r2
 8009750:	d111      	bne.n	8009776 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009752:	693b      	ldr	r3, [r7, #16]
 8009754:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009758:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800975a:	693b      	ldr	r3, [r7, #16]
 800975c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009760:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009762:	683b      	ldr	r3, [r7, #0]
 8009764:	695b      	ldr	r3, [r3, #20]
 8009766:	693a      	ldr	r2, [r7, #16]
 8009768:	4313      	orrs	r3, r2
 800976a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800976c:	683b      	ldr	r3, [r7, #0]
 800976e:	699b      	ldr	r3, [r3, #24]
 8009770:	693a      	ldr	r2, [r7, #16]
 8009772:	4313      	orrs	r3, r2
 8009774:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	693a      	ldr	r2, [r7, #16]
 800977a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	68fa      	ldr	r2, [r7, #12]
 8009780:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009782:	683b      	ldr	r3, [r7, #0]
 8009784:	685a      	ldr	r2, [r3, #4]
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	697a      	ldr	r2, [r7, #20]
 800978e:	621a      	str	r2, [r3, #32]
}
 8009790:	bf00      	nop
 8009792:	371c      	adds	r7, #28
 8009794:	46bd      	mov	sp, r7
 8009796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800979a:	4770      	bx	lr
 800979c:	40010000 	.word	0x40010000
 80097a0:	40010400 	.word	0x40010400

080097a4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80097a4:	b480      	push	{r7}
 80097a6:	b087      	sub	sp, #28
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	6078      	str	r0, [r7, #4]
 80097ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	6a1b      	ldr	r3, [r3, #32]
 80097b2:	f023 0210 	bic.w	r2, r3, #16
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	6a1b      	ldr	r3, [r3, #32]
 80097be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	685b      	ldr	r3, [r3, #4]
 80097c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	699b      	ldr	r3, [r3, #24]
 80097ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80097d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80097da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80097dc:	683b      	ldr	r3, [r7, #0]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	021b      	lsls	r3, r3, #8
 80097e2:	68fa      	ldr	r2, [r7, #12]
 80097e4:	4313      	orrs	r3, r2
 80097e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80097e8:	697b      	ldr	r3, [r7, #20]
 80097ea:	f023 0320 	bic.w	r3, r3, #32
 80097ee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80097f0:	683b      	ldr	r3, [r7, #0]
 80097f2:	689b      	ldr	r3, [r3, #8]
 80097f4:	011b      	lsls	r3, r3, #4
 80097f6:	697a      	ldr	r2, [r7, #20]
 80097f8:	4313      	orrs	r3, r2
 80097fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	4a22      	ldr	r2, [pc, #136]	; (8009888 <TIM_OC2_SetConfig+0xe4>)
 8009800:	4293      	cmp	r3, r2
 8009802:	d003      	beq.n	800980c <TIM_OC2_SetConfig+0x68>
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	4a21      	ldr	r2, [pc, #132]	; (800988c <TIM_OC2_SetConfig+0xe8>)
 8009808:	4293      	cmp	r3, r2
 800980a:	d10d      	bne.n	8009828 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800980c:	697b      	ldr	r3, [r7, #20]
 800980e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009812:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009814:	683b      	ldr	r3, [r7, #0]
 8009816:	68db      	ldr	r3, [r3, #12]
 8009818:	011b      	lsls	r3, r3, #4
 800981a:	697a      	ldr	r2, [r7, #20]
 800981c:	4313      	orrs	r3, r2
 800981e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009820:	697b      	ldr	r3, [r7, #20]
 8009822:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009826:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	4a17      	ldr	r2, [pc, #92]	; (8009888 <TIM_OC2_SetConfig+0xe4>)
 800982c:	4293      	cmp	r3, r2
 800982e:	d003      	beq.n	8009838 <TIM_OC2_SetConfig+0x94>
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	4a16      	ldr	r2, [pc, #88]	; (800988c <TIM_OC2_SetConfig+0xe8>)
 8009834:	4293      	cmp	r3, r2
 8009836:	d113      	bne.n	8009860 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009838:	693b      	ldr	r3, [r7, #16]
 800983a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800983e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009840:	693b      	ldr	r3, [r7, #16]
 8009842:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009846:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009848:	683b      	ldr	r3, [r7, #0]
 800984a:	695b      	ldr	r3, [r3, #20]
 800984c:	009b      	lsls	r3, r3, #2
 800984e:	693a      	ldr	r2, [r7, #16]
 8009850:	4313      	orrs	r3, r2
 8009852:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009854:	683b      	ldr	r3, [r7, #0]
 8009856:	699b      	ldr	r3, [r3, #24]
 8009858:	009b      	lsls	r3, r3, #2
 800985a:	693a      	ldr	r2, [r7, #16]
 800985c:	4313      	orrs	r3, r2
 800985e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	693a      	ldr	r2, [r7, #16]
 8009864:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	68fa      	ldr	r2, [r7, #12]
 800986a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800986c:	683b      	ldr	r3, [r7, #0]
 800986e:	685a      	ldr	r2, [r3, #4]
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	697a      	ldr	r2, [r7, #20]
 8009878:	621a      	str	r2, [r3, #32]
}
 800987a:	bf00      	nop
 800987c:	371c      	adds	r7, #28
 800987e:	46bd      	mov	sp, r7
 8009880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009884:	4770      	bx	lr
 8009886:	bf00      	nop
 8009888:	40010000 	.word	0x40010000
 800988c:	40010400 	.word	0x40010400

08009890 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009890:	b480      	push	{r7}
 8009892:	b087      	sub	sp, #28
 8009894:	af00      	add	r7, sp, #0
 8009896:	6078      	str	r0, [r7, #4]
 8009898:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	6a1b      	ldr	r3, [r3, #32]
 800989e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	6a1b      	ldr	r3, [r3, #32]
 80098aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	685b      	ldr	r3, [r3, #4]
 80098b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	69db      	ldr	r3, [r3, #28]
 80098b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80098be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	f023 0303 	bic.w	r3, r3, #3
 80098c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80098c8:	683b      	ldr	r3, [r7, #0]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	68fa      	ldr	r2, [r7, #12]
 80098ce:	4313      	orrs	r3, r2
 80098d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80098d2:	697b      	ldr	r3, [r7, #20]
 80098d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80098d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80098da:	683b      	ldr	r3, [r7, #0]
 80098dc:	689b      	ldr	r3, [r3, #8]
 80098de:	021b      	lsls	r3, r3, #8
 80098e0:	697a      	ldr	r2, [r7, #20]
 80098e2:	4313      	orrs	r3, r2
 80098e4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	4a21      	ldr	r2, [pc, #132]	; (8009970 <TIM_OC3_SetConfig+0xe0>)
 80098ea:	4293      	cmp	r3, r2
 80098ec:	d003      	beq.n	80098f6 <TIM_OC3_SetConfig+0x66>
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	4a20      	ldr	r2, [pc, #128]	; (8009974 <TIM_OC3_SetConfig+0xe4>)
 80098f2:	4293      	cmp	r3, r2
 80098f4:	d10d      	bne.n	8009912 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80098f6:	697b      	ldr	r3, [r7, #20]
 80098f8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80098fc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80098fe:	683b      	ldr	r3, [r7, #0]
 8009900:	68db      	ldr	r3, [r3, #12]
 8009902:	021b      	lsls	r3, r3, #8
 8009904:	697a      	ldr	r2, [r7, #20]
 8009906:	4313      	orrs	r3, r2
 8009908:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800990a:	697b      	ldr	r3, [r7, #20]
 800990c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009910:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	4a16      	ldr	r2, [pc, #88]	; (8009970 <TIM_OC3_SetConfig+0xe0>)
 8009916:	4293      	cmp	r3, r2
 8009918:	d003      	beq.n	8009922 <TIM_OC3_SetConfig+0x92>
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	4a15      	ldr	r2, [pc, #84]	; (8009974 <TIM_OC3_SetConfig+0xe4>)
 800991e:	4293      	cmp	r3, r2
 8009920:	d113      	bne.n	800994a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009922:	693b      	ldr	r3, [r7, #16]
 8009924:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009928:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800992a:	693b      	ldr	r3, [r7, #16]
 800992c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009930:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009932:	683b      	ldr	r3, [r7, #0]
 8009934:	695b      	ldr	r3, [r3, #20]
 8009936:	011b      	lsls	r3, r3, #4
 8009938:	693a      	ldr	r2, [r7, #16]
 800993a:	4313      	orrs	r3, r2
 800993c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800993e:	683b      	ldr	r3, [r7, #0]
 8009940:	699b      	ldr	r3, [r3, #24]
 8009942:	011b      	lsls	r3, r3, #4
 8009944:	693a      	ldr	r2, [r7, #16]
 8009946:	4313      	orrs	r3, r2
 8009948:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	693a      	ldr	r2, [r7, #16]
 800994e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	68fa      	ldr	r2, [r7, #12]
 8009954:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009956:	683b      	ldr	r3, [r7, #0]
 8009958:	685a      	ldr	r2, [r3, #4]
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	697a      	ldr	r2, [r7, #20]
 8009962:	621a      	str	r2, [r3, #32]
}
 8009964:	bf00      	nop
 8009966:	371c      	adds	r7, #28
 8009968:	46bd      	mov	sp, r7
 800996a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800996e:	4770      	bx	lr
 8009970:	40010000 	.word	0x40010000
 8009974:	40010400 	.word	0x40010400

08009978 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009978:	b480      	push	{r7}
 800997a:	b087      	sub	sp, #28
 800997c:	af00      	add	r7, sp, #0
 800997e:	6078      	str	r0, [r7, #4]
 8009980:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	6a1b      	ldr	r3, [r3, #32]
 8009986:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	6a1b      	ldr	r3, [r3, #32]
 8009992:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	685b      	ldr	r3, [r3, #4]
 8009998:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	69db      	ldr	r3, [r3, #28]
 800999e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80099a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80099ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80099b0:	683b      	ldr	r3, [r7, #0]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	021b      	lsls	r3, r3, #8
 80099b6:	68fa      	ldr	r2, [r7, #12]
 80099b8:	4313      	orrs	r3, r2
 80099ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80099bc:	693b      	ldr	r3, [r7, #16]
 80099be:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80099c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80099c4:	683b      	ldr	r3, [r7, #0]
 80099c6:	689b      	ldr	r3, [r3, #8]
 80099c8:	031b      	lsls	r3, r3, #12
 80099ca:	693a      	ldr	r2, [r7, #16]
 80099cc:	4313      	orrs	r3, r2
 80099ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	4a12      	ldr	r2, [pc, #72]	; (8009a1c <TIM_OC4_SetConfig+0xa4>)
 80099d4:	4293      	cmp	r3, r2
 80099d6:	d003      	beq.n	80099e0 <TIM_OC4_SetConfig+0x68>
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	4a11      	ldr	r2, [pc, #68]	; (8009a20 <TIM_OC4_SetConfig+0xa8>)
 80099dc:	4293      	cmp	r3, r2
 80099de:	d109      	bne.n	80099f4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80099e0:	697b      	ldr	r3, [r7, #20]
 80099e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80099e6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80099e8:	683b      	ldr	r3, [r7, #0]
 80099ea:	695b      	ldr	r3, [r3, #20]
 80099ec:	019b      	lsls	r3, r3, #6
 80099ee:	697a      	ldr	r2, [r7, #20]
 80099f0:	4313      	orrs	r3, r2
 80099f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	697a      	ldr	r2, [r7, #20]
 80099f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	68fa      	ldr	r2, [r7, #12]
 80099fe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009a00:	683b      	ldr	r3, [r7, #0]
 8009a02:	685a      	ldr	r2, [r3, #4]
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	693a      	ldr	r2, [r7, #16]
 8009a0c:	621a      	str	r2, [r3, #32]
}
 8009a0e:	bf00      	nop
 8009a10:	371c      	adds	r7, #28
 8009a12:	46bd      	mov	sp, r7
 8009a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a18:	4770      	bx	lr
 8009a1a:	bf00      	nop
 8009a1c:	40010000 	.word	0x40010000
 8009a20:	40010400 	.word	0x40010400

08009a24 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8009a24:	b580      	push	{r7, lr}
 8009a26:	b086      	sub	sp, #24
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	6078      	str	r0, [r7, #4]
 8009a2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009a2e:	2300      	movs	r3, #0
 8009a30:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	689b      	ldr	r3, [r3, #8]
 8009a38:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009a3a:	693b      	ldr	r3, [r7, #16]
 8009a3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a40:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8009a42:	683b      	ldr	r3, [r7, #0]
 8009a44:	685b      	ldr	r3, [r3, #4]
 8009a46:	693a      	ldr	r2, [r7, #16]
 8009a48:	4313      	orrs	r3, r2
 8009a4a:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8009a4c:	693b      	ldr	r3, [r7, #16]
 8009a4e:	f023 0307 	bic.w	r3, r3, #7
 8009a52:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8009a54:	683b      	ldr	r3, [r7, #0]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	693a      	ldr	r2, [r7, #16]
 8009a5a:	4313      	orrs	r3, r2
 8009a5c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	693a      	ldr	r2, [r7, #16]
 8009a64:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8009a66:	683b      	ldr	r3, [r7, #0]
 8009a68:	685b      	ldr	r3, [r3, #4]
 8009a6a:	2b70      	cmp	r3, #112	; 0x70
 8009a6c:	d01a      	beq.n	8009aa4 <TIM_SlaveTimer_SetConfig+0x80>
 8009a6e:	2b70      	cmp	r3, #112	; 0x70
 8009a70:	d860      	bhi.n	8009b34 <TIM_SlaveTimer_SetConfig+0x110>
 8009a72:	2b60      	cmp	r3, #96	; 0x60
 8009a74:	d054      	beq.n	8009b20 <TIM_SlaveTimer_SetConfig+0xfc>
 8009a76:	2b60      	cmp	r3, #96	; 0x60
 8009a78:	d85c      	bhi.n	8009b34 <TIM_SlaveTimer_SetConfig+0x110>
 8009a7a:	2b50      	cmp	r3, #80	; 0x50
 8009a7c:	d046      	beq.n	8009b0c <TIM_SlaveTimer_SetConfig+0xe8>
 8009a7e:	2b50      	cmp	r3, #80	; 0x50
 8009a80:	d858      	bhi.n	8009b34 <TIM_SlaveTimer_SetConfig+0x110>
 8009a82:	2b40      	cmp	r3, #64	; 0x40
 8009a84:	d019      	beq.n	8009aba <TIM_SlaveTimer_SetConfig+0x96>
 8009a86:	2b40      	cmp	r3, #64	; 0x40
 8009a88:	d854      	bhi.n	8009b34 <TIM_SlaveTimer_SetConfig+0x110>
 8009a8a:	2b30      	cmp	r3, #48	; 0x30
 8009a8c:	d055      	beq.n	8009b3a <TIM_SlaveTimer_SetConfig+0x116>
 8009a8e:	2b30      	cmp	r3, #48	; 0x30
 8009a90:	d850      	bhi.n	8009b34 <TIM_SlaveTimer_SetConfig+0x110>
 8009a92:	2b20      	cmp	r3, #32
 8009a94:	d051      	beq.n	8009b3a <TIM_SlaveTimer_SetConfig+0x116>
 8009a96:	2b20      	cmp	r3, #32
 8009a98:	d84c      	bhi.n	8009b34 <TIM_SlaveTimer_SetConfig+0x110>
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d04d      	beq.n	8009b3a <TIM_SlaveTimer_SetConfig+0x116>
 8009a9e:	2b10      	cmp	r3, #16
 8009aa0:	d04b      	beq.n	8009b3a <TIM_SlaveTimer_SetConfig+0x116>
 8009aa2:	e047      	b.n	8009b34 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	6818      	ldr	r0, [r3, #0]
 8009aa8:	683b      	ldr	r3, [r7, #0]
 8009aaa:	68d9      	ldr	r1, [r3, #12]
 8009aac:	683b      	ldr	r3, [r7, #0]
 8009aae:	689a      	ldr	r2, [r3, #8]
 8009ab0:	683b      	ldr	r3, [r7, #0]
 8009ab2:	691b      	ldr	r3, [r3, #16]
 8009ab4:	f000 f9ec 	bl	8009e90 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8009ab8:	e040      	b.n	8009b3c <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8009aba:	683b      	ldr	r3, [r7, #0]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	2b05      	cmp	r3, #5
 8009ac0:	d101      	bne.n	8009ac6 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8009ac2:	2301      	movs	r3, #1
 8009ac4:	e03b      	b.n	8009b3e <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	6a1b      	ldr	r3, [r3, #32]
 8009acc:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	6a1a      	ldr	r2, [r3, #32]
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	f022 0201 	bic.w	r2, r2, #1
 8009adc:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	699b      	ldr	r3, [r3, #24]
 8009ae4:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009ae6:	68bb      	ldr	r3, [r7, #8]
 8009ae8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009aec:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8009aee:	683b      	ldr	r3, [r7, #0]
 8009af0:	691b      	ldr	r3, [r3, #16]
 8009af2:	011b      	lsls	r3, r3, #4
 8009af4:	68ba      	ldr	r2, [r7, #8]
 8009af6:	4313      	orrs	r3, r2
 8009af8:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	68ba      	ldr	r2, [r7, #8]
 8009b00:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	68fa      	ldr	r2, [r7, #12]
 8009b08:	621a      	str	r2, [r3, #32]
      break;
 8009b0a:	e017      	b.n	8009b3c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	6818      	ldr	r0, [r3, #0]
 8009b10:	683b      	ldr	r3, [r7, #0]
 8009b12:	6899      	ldr	r1, [r3, #8]
 8009b14:	683b      	ldr	r3, [r7, #0]
 8009b16:	691b      	ldr	r3, [r3, #16]
 8009b18:	461a      	mov	r2, r3
 8009b1a:	f000 f889 	bl	8009c30 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8009b1e:	e00d      	b.n	8009b3c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	6818      	ldr	r0, [r3, #0]
 8009b24:	683b      	ldr	r3, [r7, #0]
 8009b26:	6899      	ldr	r1, [r3, #8]
 8009b28:	683b      	ldr	r3, [r7, #0]
 8009b2a:	691b      	ldr	r3, [r3, #16]
 8009b2c:	461a      	mov	r2, r3
 8009b2e:	f000 f8eb 	bl	8009d08 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8009b32:	e003      	b.n	8009b3c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8009b34:	2301      	movs	r3, #1
 8009b36:	75fb      	strb	r3, [r7, #23]
      break;
 8009b38:	e000      	b.n	8009b3c <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8009b3a:	bf00      	nop
  }

  return status;
 8009b3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b3e:	4618      	mov	r0, r3
 8009b40:	3718      	adds	r7, #24
 8009b42:	46bd      	mov	sp, r7
 8009b44:	bd80      	pop	{r7, pc}
	...

08009b48 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8009b48:	b480      	push	{r7}
 8009b4a:	b087      	sub	sp, #28
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	60f8      	str	r0, [r7, #12]
 8009b50:	60b9      	str	r1, [r7, #8]
 8009b52:	607a      	str	r2, [r7, #4]
 8009b54:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	6a1b      	ldr	r3, [r3, #32]
 8009b5a:	f023 0201 	bic.w	r2, r3, #1
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	699b      	ldr	r3, [r3, #24]
 8009b66:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	6a1b      	ldr	r3, [r3, #32]
 8009b6c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	4a28      	ldr	r2, [pc, #160]	; (8009c14 <TIM_TI1_SetConfig+0xcc>)
 8009b72:	4293      	cmp	r3, r2
 8009b74:	d01b      	beq.n	8009bae <TIM_TI1_SetConfig+0x66>
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b7c:	d017      	beq.n	8009bae <TIM_TI1_SetConfig+0x66>
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	4a25      	ldr	r2, [pc, #148]	; (8009c18 <TIM_TI1_SetConfig+0xd0>)
 8009b82:	4293      	cmp	r3, r2
 8009b84:	d013      	beq.n	8009bae <TIM_TI1_SetConfig+0x66>
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	4a24      	ldr	r2, [pc, #144]	; (8009c1c <TIM_TI1_SetConfig+0xd4>)
 8009b8a:	4293      	cmp	r3, r2
 8009b8c:	d00f      	beq.n	8009bae <TIM_TI1_SetConfig+0x66>
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	4a23      	ldr	r2, [pc, #140]	; (8009c20 <TIM_TI1_SetConfig+0xd8>)
 8009b92:	4293      	cmp	r3, r2
 8009b94:	d00b      	beq.n	8009bae <TIM_TI1_SetConfig+0x66>
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	4a22      	ldr	r2, [pc, #136]	; (8009c24 <TIM_TI1_SetConfig+0xdc>)
 8009b9a:	4293      	cmp	r3, r2
 8009b9c:	d007      	beq.n	8009bae <TIM_TI1_SetConfig+0x66>
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	4a21      	ldr	r2, [pc, #132]	; (8009c28 <TIM_TI1_SetConfig+0xe0>)
 8009ba2:	4293      	cmp	r3, r2
 8009ba4:	d003      	beq.n	8009bae <TIM_TI1_SetConfig+0x66>
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	4a20      	ldr	r2, [pc, #128]	; (8009c2c <TIM_TI1_SetConfig+0xe4>)
 8009baa:	4293      	cmp	r3, r2
 8009bac:	d101      	bne.n	8009bb2 <TIM_TI1_SetConfig+0x6a>
 8009bae:	2301      	movs	r3, #1
 8009bb0:	e000      	b.n	8009bb4 <TIM_TI1_SetConfig+0x6c>
 8009bb2:	2300      	movs	r3, #0
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d008      	beq.n	8009bca <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8009bb8:	697b      	ldr	r3, [r7, #20]
 8009bba:	f023 0303 	bic.w	r3, r3, #3
 8009bbe:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8009bc0:	697a      	ldr	r2, [r7, #20]
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	4313      	orrs	r3, r2
 8009bc6:	617b      	str	r3, [r7, #20]
 8009bc8:	e003      	b.n	8009bd2 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8009bca:	697b      	ldr	r3, [r7, #20]
 8009bcc:	f043 0301 	orr.w	r3, r3, #1
 8009bd0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009bd2:	697b      	ldr	r3, [r7, #20]
 8009bd4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009bd8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8009bda:	683b      	ldr	r3, [r7, #0]
 8009bdc:	011b      	lsls	r3, r3, #4
 8009bde:	b2db      	uxtb	r3, r3
 8009be0:	697a      	ldr	r2, [r7, #20]
 8009be2:	4313      	orrs	r3, r2
 8009be4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009be6:	693b      	ldr	r3, [r7, #16]
 8009be8:	f023 030a 	bic.w	r3, r3, #10
 8009bec:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8009bee:	68bb      	ldr	r3, [r7, #8]
 8009bf0:	f003 030a 	and.w	r3, r3, #10
 8009bf4:	693a      	ldr	r2, [r7, #16]
 8009bf6:	4313      	orrs	r3, r2
 8009bf8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	697a      	ldr	r2, [r7, #20]
 8009bfe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	693a      	ldr	r2, [r7, #16]
 8009c04:	621a      	str	r2, [r3, #32]
}
 8009c06:	bf00      	nop
 8009c08:	371c      	adds	r7, #28
 8009c0a:	46bd      	mov	sp, r7
 8009c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c10:	4770      	bx	lr
 8009c12:	bf00      	nop
 8009c14:	40010000 	.word	0x40010000
 8009c18:	40000400 	.word	0x40000400
 8009c1c:	40000800 	.word	0x40000800
 8009c20:	40000c00 	.word	0x40000c00
 8009c24:	40010400 	.word	0x40010400
 8009c28:	40014000 	.word	0x40014000
 8009c2c:	40001800 	.word	0x40001800

08009c30 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009c30:	b480      	push	{r7}
 8009c32:	b087      	sub	sp, #28
 8009c34:	af00      	add	r7, sp, #0
 8009c36:	60f8      	str	r0, [r7, #12]
 8009c38:	60b9      	str	r1, [r7, #8]
 8009c3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	6a1b      	ldr	r3, [r3, #32]
 8009c40:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	6a1b      	ldr	r3, [r3, #32]
 8009c46:	f023 0201 	bic.w	r2, r3, #1
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	699b      	ldr	r3, [r3, #24]
 8009c52:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009c54:	693b      	ldr	r3, [r7, #16]
 8009c56:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009c5a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	011b      	lsls	r3, r3, #4
 8009c60:	693a      	ldr	r2, [r7, #16]
 8009c62:	4313      	orrs	r3, r2
 8009c64:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009c66:	697b      	ldr	r3, [r7, #20]
 8009c68:	f023 030a 	bic.w	r3, r3, #10
 8009c6c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009c6e:	697a      	ldr	r2, [r7, #20]
 8009c70:	68bb      	ldr	r3, [r7, #8]
 8009c72:	4313      	orrs	r3, r2
 8009c74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	693a      	ldr	r2, [r7, #16]
 8009c7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	697a      	ldr	r2, [r7, #20]
 8009c80:	621a      	str	r2, [r3, #32]
}
 8009c82:	bf00      	nop
 8009c84:	371c      	adds	r7, #28
 8009c86:	46bd      	mov	sp, r7
 8009c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c8c:	4770      	bx	lr

08009c8e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009c8e:	b480      	push	{r7}
 8009c90:	b087      	sub	sp, #28
 8009c92:	af00      	add	r7, sp, #0
 8009c94:	60f8      	str	r0, [r7, #12]
 8009c96:	60b9      	str	r1, [r7, #8]
 8009c98:	607a      	str	r2, [r7, #4]
 8009c9a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	6a1b      	ldr	r3, [r3, #32]
 8009ca0:	f023 0210 	bic.w	r2, r3, #16
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	699b      	ldr	r3, [r3, #24]
 8009cac:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	6a1b      	ldr	r3, [r3, #32]
 8009cb2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8009cb4:	697b      	ldr	r3, [r7, #20]
 8009cb6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009cba:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	021b      	lsls	r3, r3, #8
 8009cc0:	697a      	ldr	r2, [r7, #20]
 8009cc2:	4313      	orrs	r3, r2
 8009cc4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009cc6:	697b      	ldr	r3, [r7, #20]
 8009cc8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009ccc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8009cce:	683b      	ldr	r3, [r7, #0]
 8009cd0:	031b      	lsls	r3, r3, #12
 8009cd2:	b29b      	uxth	r3, r3
 8009cd4:	697a      	ldr	r2, [r7, #20]
 8009cd6:	4313      	orrs	r3, r2
 8009cd8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009cda:	693b      	ldr	r3, [r7, #16]
 8009cdc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009ce0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8009ce2:	68bb      	ldr	r3, [r7, #8]
 8009ce4:	011b      	lsls	r3, r3, #4
 8009ce6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8009cea:	693a      	ldr	r2, [r7, #16]
 8009cec:	4313      	orrs	r3, r2
 8009cee:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	697a      	ldr	r2, [r7, #20]
 8009cf4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	693a      	ldr	r2, [r7, #16]
 8009cfa:	621a      	str	r2, [r3, #32]
}
 8009cfc:	bf00      	nop
 8009cfe:	371c      	adds	r7, #28
 8009d00:	46bd      	mov	sp, r7
 8009d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d06:	4770      	bx	lr

08009d08 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009d08:	b480      	push	{r7}
 8009d0a:	b087      	sub	sp, #28
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	60f8      	str	r0, [r7, #12]
 8009d10:	60b9      	str	r1, [r7, #8]
 8009d12:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	6a1b      	ldr	r3, [r3, #32]
 8009d18:	f023 0210 	bic.w	r2, r3, #16
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	699b      	ldr	r3, [r3, #24]
 8009d24:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	6a1b      	ldr	r3, [r3, #32]
 8009d2a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009d2c:	697b      	ldr	r3, [r7, #20]
 8009d2e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009d32:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	031b      	lsls	r3, r3, #12
 8009d38:	697a      	ldr	r2, [r7, #20]
 8009d3a:	4313      	orrs	r3, r2
 8009d3c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009d3e:	693b      	ldr	r3, [r7, #16]
 8009d40:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009d44:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009d46:	68bb      	ldr	r3, [r7, #8]
 8009d48:	011b      	lsls	r3, r3, #4
 8009d4a:	693a      	ldr	r2, [r7, #16]
 8009d4c:	4313      	orrs	r3, r2
 8009d4e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	697a      	ldr	r2, [r7, #20]
 8009d54:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	693a      	ldr	r2, [r7, #16]
 8009d5a:	621a      	str	r2, [r3, #32]
}
 8009d5c:	bf00      	nop
 8009d5e:	371c      	adds	r7, #28
 8009d60:	46bd      	mov	sp, r7
 8009d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d66:	4770      	bx	lr

08009d68 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009d68:	b480      	push	{r7}
 8009d6a:	b087      	sub	sp, #28
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	60f8      	str	r0, [r7, #12]
 8009d70:	60b9      	str	r1, [r7, #8]
 8009d72:	607a      	str	r2, [r7, #4]
 8009d74:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	6a1b      	ldr	r3, [r3, #32]
 8009d7a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	69db      	ldr	r3, [r3, #28]
 8009d86:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	6a1b      	ldr	r3, [r3, #32]
 8009d8c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8009d8e:	697b      	ldr	r3, [r7, #20]
 8009d90:	f023 0303 	bic.w	r3, r3, #3
 8009d94:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8009d96:	697a      	ldr	r2, [r7, #20]
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	4313      	orrs	r3, r2
 8009d9c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8009d9e:	697b      	ldr	r3, [r7, #20]
 8009da0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009da4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8009da6:	683b      	ldr	r3, [r7, #0]
 8009da8:	011b      	lsls	r3, r3, #4
 8009daa:	b2db      	uxtb	r3, r3
 8009dac:	697a      	ldr	r2, [r7, #20]
 8009dae:	4313      	orrs	r3, r2
 8009db0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8009db2:	693b      	ldr	r3, [r7, #16]
 8009db4:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8009db8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8009dba:	68bb      	ldr	r3, [r7, #8]
 8009dbc:	021b      	lsls	r3, r3, #8
 8009dbe:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8009dc2:	693a      	ldr	r2, [r7, #16]
 8009dc4:	4313      	orrs	r3, r2
 8009dc6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	697a      	ldr	r2, [r7, #20]
 8009dcc:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	693a      	ldr	r2, [r7, #16]
 8009dd2:	621a      	str	r2, [r3, #32]
}
 8009dd4:	bf00      	nop
 8009dd6:	371c      	adds	r7, #28
 8009dd8:	46bd      	mov	sp, r7
 8009dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dde:	4770      	bx	lr

08009de0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009de0:	b480      	push	{r7}
 8009de2:	b087      	sub	sp, #28
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	60f8      	str	r0, [r7, #12]
 8009de8:	60b9      	str	r1, [r7, #8]
 8009dea:	607a      	str	r2, [r7, #4]
 8009dec:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	6a1b      	ldr	r3, [r3, #32]
 8009df2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	69db      	ldr	r3, [r3, #28]
 8009dfe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	6a1b      	ldr	r3, [r3, #32]
 8009e04:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8009e06:	697b      	ldr	r3, [r7, #20]
 8009e08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009e0c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	021b      	lsls	r3, r3, #8
 8009e12:	697a      	ldr	r2, [r7, #20]
 8009e14:	4313      	orrs	r3, r2
 8009e16:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8009e18:	697b      	ldr	r3, [r7, #20]
 8009e1a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009e1e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8009e20:	683b      	ldr	r3, [r7, #0]
 8009e22:	031b      	lsls	r3, r3, #12
 8009e24:	b29b      	uxth	r3, r3
 8009e26:	697a      	ldr	r2, [r7, #20]
 8009e28:	4313      	orrs	r3, r2
 8009e2a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8009e2c:	693b      	ldr	r3, [r7, #16]
 8009e2e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8009e32:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8009e34:	68bb      	ldr	r3, [r7, #8]
 8009e36:	031b      	lsls	r3, r3, #12
 8009e38:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8009e3c:	693a      	ldr	r2, [r7, #16]
 8009e3e:	4313      	orrs	r3, r2
 8009e40:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	697a      	ldr	r2, [r7, #20]
 8009e46:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	693a      	ldr	r2, [r7, #16]
 8009e4c:	621a      	str	r2, [r3, #32]
}
 8009e4e:	bf00      	nop
 8009e50:	371c      	adds	r7, #28
 8009e52:	46bd      	mov	sp, r7
 8009e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e58:	4770      	bx	lr

08009e5a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009e5a:	b480      	push	{r7}
 8009e5c:	b085      	sub	sp, #20
 8009e5e:	af00      	add	r7, sp, #0
 8009e60:	6078      	str	r0, [r7, #4]
 8009e62:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	689b      	ldr	r3, [r3, #8]
 8009e68:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e70:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009e72:	683a      	ldr	r2, [r7, #0]
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	4313      	orrs	r3, r2
 8009e78:	f043 0307 	orr.w	r3, r3, #7
 8009e7c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	68fa      	ldr	r2, [r7, #12]
 8009e82:	609a      	str	r2, [r3, #8]
}
 8009e84:	bf00      	nop
 8009e86:	3714      	adds	r7, #20
 8009e88:	46bd      	mov	sp, r7
 8009e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e8e:	4770      	bx	lr

08009e90 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009e90:	b480      	push	{r7}
 8009e92:	b087      	sub	sp, #28
 8009e94:	af00      	add	r7, sp, #0
 8009e96:	60f8      	str	r0, [r7, #12]
 8009e98:	60b9      	str	r1, [r7, #8]
 8009e9a:	607a      	str	r2, [r7, #4]
 8009e9c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	689b      	ldr	r3, [r3, #8]
 8009ea2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009ea4:	697b      	ldr	r3, [r7, #20]
 8009ea6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009eaa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009eac:	683b      	ldr	r3, [r7, #0]
 8009eae:	021a      	lsls	r2, r3, #8
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	431a      	orrs	r2, r3
 8009eb4:	68bb      	ldr	r3, [r7, #8]
 8009eb6:	4313      	orrs	r3, r2
 8009eb8:	697a      	ldr	r2, [r7, #20]
 8009eba:	4313      	orrs	r3, r2
 8009ebc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	697a      	ldr	r2, [r7, #20]
 8009ec2:	609a      	str	r2, [r3, #8]
}
 8009ec4:	bf00      	nop
 8009ec6:	371c      	adds	r7, #28
 8009ec8:	46bd      	mov	sp, r7
 8009eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ece:	4770      	bx	lr

08009ed0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009ed0:	b480      	push	{r7}
 8009ed2:	b087      	sub	sp, #28
 8009ed4:	af00      	add	r7, sp, #0
 8009ed6:	60f8      	str	r0, [r7, #12]
 8009ed8:	60b9      	str	r1, [r7, #8]
 8009eda:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009edc:	68bb      	ldr	r3, [r7, #8]
 8009ede:	f003 031f 	and.w	r3, r3, #31
 8009ee2:	2201      	movs	r2, #1
 8009ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8009ee8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	6a1a      	ldr	r2, [r3, #32]
 8009eee:	697b      	ldr	r3, [r7, #20]
 8009ef0:	43db      	mvns	r3, r3
 8009ef2:	401a      	ands	r2, r3
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	6a1a      	ldr	r2, [r3, #32]
 8009efc:	68bb      	ldr	r3, [r7, #8]
 8009efe:	f003 031f 	and.w	r3, r3, #31
 8009f02:	6879      	ldr	r1, [r7, #4]
 8009f04:	fa01 f303 	lsl.w	r3, r1, r3
 8009f08:	431a      	orrs	r2, r3
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	621a      	str	r2, [r3, #32]
}
 8009f0e:	bf00      	nop
 8009f10:	371c      	adds	r7, #28
 8009f12:	46bd      	mov	sp, r7
 8009f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f18:	4770      	bx	lr
	...

08009f1c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009f1c:	b480      	push	{r7}
 8009f1e:	b085      	sub	sp, #20
 8009f20:	af00      	add	r7, sp, #0
 8009f22:	6078      	str	r0, [r7, #4]
 8009f24:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009f2c:	2b01      	cmp	r3, #1
 8009f2e:	d101      	bne.n	8009f34 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009f30:	2302      	movs	r3, #2
 8009f32:	e05a      	b.n	8009fea <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	2201      	movs	r2, #1
 8009f38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	2202      	movs	r2, #2
 8009f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	685b      	ldr	r3, [r3, #4]
 8009f4a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	689b      	ldr	r3, [r3, #8]
 8009f52:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f5a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009f5c:	683b      	ldr	r3, [r7, #0]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	68fa      	ldr	r2, [r7, #12]
 8009f62:	4313      	orrs	r3, r2
 8009f64:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	68fa      	ldr	r2, [r7, #12]
 8009f6c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	4a21      	ldr	r2, [pc, #132]	; (8009ff8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009f74:	4293      	cmp	r3, r2
 8009f76:	d022      	beq.n	8009fbe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f80:	d01d      	beq.n	8009fbe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	4a1d      	ldr	r2, [pc, #116]	; (8009ffc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009f88:	4293      	cmp	r3, r2
 8009f8a:	d018      	beq.n	8009fbe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	4a1b      	ldr	r2, [pc, #108]	; (800a000 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8009f92:	4293      	cmp	r3, r2
 8009f94:	d013      	beq.n	8009fbe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	4a1a      	ldr	r2, [pc, #104]	; (800a004 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009f9c:	4293      	cmp	r3, r2
 8009f9e:	d00e      	beq.n	8009fbe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	4a18      	ldr	r2, [pc, #96]	; (800a008 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009fa6:	4293      	cmp	r3, r2
 8009fa8:	d009      	beq.n	8009fbe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	4a17      	ldr	r2, [pc, #92]	; (800a00c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009fb0:	4293      	cmp	r3, r2
 8009fb2:	d004      	beq.n	8009fbe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	4a15      	ldr	r2, [pc, #84]	; (800a010 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009fba:	4293      	cmp	r3, r2
 8009fbc:	d10c      	bne.n	8009fd8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009fbe:	68bb      	ldr	r3, [r7, #8]
 8009fc0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009fc4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009fc6:	683b      	ldr	r3, [r7, #0]
 8009fc8:	685b      	ldr	r3, [r3, #4]
 8009fca:	68ba      	ldr	r2, [r7, #8]
 8009fcc:	4313      	orrs	r3, r2
 8009fce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	68ba      	ldr	r2, [r7, #8]
 8009fd6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	2201      	movs	r2, #1
 8009fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	2200      	movs	r2, #0
 8009fe4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009fe8:	2300      	movs	r3, #0
}
 8009fea:	4618      	mov	r0, r3
 8009fec:	3714      	adds	r7, #20
 8009fee:	46bd      	mov	sp, r7
 8009ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff4:	4770      	bx	lr
 8009ff6:	bf00      	nop
 8009ff8:	40010000 	.word	0x40010000
 8009ffc:	40000400 	.word	0x40000400
 800a000:	40000800 	.word	0x40000800
 800a004:	40000c00 	.word	0x40000c00
 800a008:	40010400 	.word	0x40010400
 800a00c:	40014000 	.word	0x40014000
 800a010:	40001800 	.word	0x40001800

0800a014 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a014:	b480      	push	{r7}
 800a016:	b083      	sub	sp, #12
 800a018:	af00      	add	r7, sp, #0
 800a01a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a01c:	bf00      	nop
 800a01e:	370c      	adds	r7, #12
 800a020:	46bd      	mov	sp, r7
 800a022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a026:	4770      	bx	lr

0800a028 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a028:	b480      	push	{r7}
 800a02a:	b083      	sub	sp, #12
 800a02c:	af00      	add	r7, sp, #0
 800a02e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a030:	bf00      	nop
 800a032:	370c      	adds	r7, #12
 800a034:	46bd      	mov	sp, r7
 800a036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a03a:	4770      	bx	lr

0800a03c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a03c:	b580      	push	{r7, lr}
 800a03e:	b082      	sub	sp, #8
 800a040:	af00      	add	r7, sp, #0
 800a042:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	2b00      	cmp	r3, #0
 800a048:	d101      	bne.n	800a04e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a04a:	2301      	movs	r3, #1
 800a04c:	e03f      	b.n	800a0ce <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a054:	b2db      	uxtb	r3, r3
 800a056:	2b00      	cmp	r3, #0
 800a058:	d106      	bne.n	800a068 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	2200      	movs	r2, #0
 800a05e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a062:	6878      	ldr	r0, [r7, #4]
 800a064:	f7f9 ff56 	bl	8003f14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	2224      	movs	r2, #36	; 0x24
 800a06c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	68da      	ldr	r2, [r3, #12]
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a07e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a080:	6878      	ldr	r0, [r7, #4]
 800a082:	f000 fea3 	bl	800adcc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	691a      	ldr	r2, [r3, #16]
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a094:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	695a      	ldr	r2, [r3, #20]
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a0a4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	68da      	ldr	r2, [r3, #12]
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a0b4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	2200      	movs	r2, #0
 800a0ba:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	2220      	movs	r2, #32
 800a0c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	2220      	movs	r2, #32
 800a0c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800a0cc:	2300      	movs	r3, #0
}
 800a0ce:	4618      	mov	r0, r3
 800a0d0:	3708      	adds	r7, #8
 800a0d2:	46bd      	mov	sp, r7
 800a0d4:	bd80      	pop	{r7, pc}

0800a0d6 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800a0d6:	b480      	push	{r7}
 800a0d8:	b085      	sub	sp, #20
 800a0da:	af00      	add	r7, sp, #0
 800a0dc:	60f8      	str	r0, [r7, #12]
 800a0de:	60b9      	str	r1, [r7, #8]
 800a0e0:	4613      	mov	r3, r2
 800a0e2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a0ea:	b2db      	uxtb	r3, r3
 800a0ec:	2b20      	cmp	r3, #32
 800a0ee:	d130      	bne.n	800a152 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800a0f0:	68bb      	ldr	r3, [r7, #8]
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d002      	beq.n	800a0fc <HAL_UART_Transmit_IT+0x26>
 800a0f6:	88fb      	ldrh	r3, [r7, #6]
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d101      	bne.n	800a100 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800a0fc:	2301      	movs	r3, #1
 800a0fe:	e029      	b.n	800a154 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a106:	2b01      	cmp	r3, #1
 800a108:	d101      	bne.n	800a10e <HAL_UART_Transmit_IT+0x38>
 800a10a:	2302      	movs	r3, #2
 800a10c:	e022      	b.n	800a154 <HAL_UART_Transmit_IT+0x7e>
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	2201      	movs	r2, #1
 800a112:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	68ba      	ldr	r2, [r7, #8]
 800a11a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	88fa      	ldrh	r2, [r7, #6]
 800a120:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	88fa      	ldrh	r2, [r7, #6]
 800a126:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	2200      	movs	r2, #0
 800a12c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	2221      	movs	r2, #33	; 0x21
 800a132:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	2200      	movs	r2, #0
 800a13a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	68da      	ldr	r2, [r3, #12]
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a14c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800a14e:	2300      	movs	r3, #0
 800a150:	e000      	b.n	800a154 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800a152:	2302      	movs	r3, #2
  }
}
 800a154:	4618      	mov	r0, r3
 800a156:	3714      	adds	r7, #20
 800a158:	46bd      	mov	sp, r7
 800a15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a15e:	4770      	bx	lr

0800a160 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a160:	b580      	push	{r7, lr}
 800a162:	b084      	sub	sp, #16
 800a164:	af00      	add	r7, sp, #0
 800a166:	60f8      	str	r0, [r7, #12]
 800a168:	60b9      	str	r1, [r7, #8]
 800a16a:	4613      	mov	r3, r2
 800a16c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a174:	b2db      	uxtb	r3, r3
 800a176:	2b20      	cmp	r3, #32
 800a178:	d11d      	bne.n	800a1b6 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800a17a:	68bb      	ldr	r3, [r7, #8]
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d002      	beq.n	800a186 <HAL_UART_Receive_DMA+0x26>
 800a180:	88fb      	ldrh	r3, [r7, #6]
 800a182:	2b00      	cmp	r3, #0
 800a184:	d101      	bne.n	800a18a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800a186:	2301      	movs	r3, #1
 800a188:	e016      	b.n	800a1b8 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a190:	2b01      	cmp	r3, #1
 800a192:	d101      	bne.n	800a198 <HAL_UART_Receive_DMA+0x38>
 800a194:	2302      	movs	r3, #2
 800a196:	e00f      	b.n	800a1b8 <HAL_UART_Receive_DMA+0x58>
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	2201      	movs	r2, #1
 800a19c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	2200      	movs	r2, #0
 800a1a4:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800a1a6:	88fb      	ldrh	r3, [r7, #6]
 800a1a8:	461a      	mov	r2, r3
 800a1aa:	68b9      	ldr	r1, [r7, #8]
 800a1ac:	68f8      	ldr	r0, [r7, #12]
 800a1ae:	f000 fbad 	bl	800a90c <UART_Start_Receive_DMA>
 800a1b2:	4603      	mov	r3, r0
 800a1b4:	e000      	b.n	800a1b8 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800a1b6:	2302      	movs	r3, #2
  }
}
 800a1b8:	4618      	mov	r0, r3
 800a1ba:	3710      	adds	r7, #16
 800a1bc:	46bd      	mov	sp, r7
 800a1be:	bd80      	pop	{r7, pc}

0800a1c0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a1c0:	b580      	push	{r7, lr}
 800a1c2:	b0ba      	sub	sp, #232	; 0xe8
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	68db      	ldr	r3, [r3, #12]
 800a1d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	695b      	ldr	r3, [r3, #20]
 800a1e2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800a1e6:	2300      	movs	r3, #0
 800a1e8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800a1ec:	2300      	movs	r3, #0
 800a1ee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800a1f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a1f6:	f003 030f 	and.w	r3, r3, #15
 800a1fa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800a1fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a202:	2b00      	cmp	r3, #0
 800a204:	d10f      	bne.n	800a226 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a206:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a20a:	f003 0320 	and.w	r3, r3, #32
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d009      	beq.n	800a226 <HAL_UART_IRQHandler+0x66>
 800a212:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a216:	f003 0320 	and.w	r3, r3, #32
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d003      	beq.n	800a226 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800a21e:	6878      	ldr	r0, [r7, #4]
 800a220:	f000 fd19 	bl	800ac56 <UART_Receive_IT>
      return;
 800a224:	e256      	b.n	800a6d4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800a226:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	f000 80de 	beq.w	800a3ec <HAL_UART_IRQHandler+0x22c>
 800a230:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a234:	f003 0301 	and.w	r3, r3, #1
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d106      	bne.n	800a24a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800a23c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a240:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800a244:	2b00      	cmp	r3, #0
 800a246:	f000 80d1 	beq.w	800a3ec <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800a24a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a24e:	f003 0301 	and.w	r3, r3, #1
 800a252:	2b00      	cmp	r3, #0
 800a254:	d00b      	beq.n	800a26e <HAL_UART_IRQHandler+0xae>
 800a256:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a25a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d005      	beq.n	800a26e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a266:	f043 0201 	orr.w	r2, r3, #1
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a26e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a272:	f003 0304 	and.w	r3, r3, #4
 800a276:	2b00      	cmp	r3, #0
 800a278:	d00b      	beq.n	800a292 <HAL_UART_IRQHandler+0xd2>
 800a27a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a27e:	f003 0301 	and.w	r3, r3, #1
 800a282:	2b00      	cmp	r3, #0
 800a284:	d005      	beq.n	800a292 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a28a:	f043 0202 	orr.w	r2, r3, #2
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a292:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a296:	f003 0302 	and.w	r3, r3, #2
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d00b      	beq.n	800a2b6 <HAL_UART_IRQHandler+0xf6>
 800a29e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a2a2:	f003 0301 	and.w	r3, r3, #1
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d005      	beq.n	800a2b6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2ae:	f043 0204 	orr.w	r2, r3, #4
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800a2b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a2ba:	f003 0308 	and.w	r3, r3, #8
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d011      	beq.n	800a2e6 <HAL_UART_IRQHandler+0x126>
 800a2c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a2c6:	f003 0320 	and.w	r3, r3, #32
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d105      	bne.n	800a2da <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800a2ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a2d2:	f003 0301 	and.w	r3, r3, #1
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d005      	beq.n	800a2e6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2de:	f043 0208 	orr.w	r2, r3, #8
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	f000 81ed 	beq.w	800a6ca <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a2f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a2f4:	f003 0320 	and.w	r3, r3, #32
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d008      	beq.n	800a30e <HAL_UART_IRQHandler+0x14e>
 800a2fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a300:	f003 0320 	and.w	r3, r3, #32
 800a304:	2b00      	cmp	r3, #0
 800a306:	d002      	beq.n	800a30e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800a308:	6878      	ldr	r0, [r7, #4]
 800a30a:	f000 fca4 	bl	800ac56 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	695b      	ldr	r3, [r3, #20]
 800a314:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a318:	2b40      	cmp	r3, #64	; 0x40
 800a31a:	bf0c      	ite	eq
 800a31c:	2301      	moveq	r3, #1
 800a31e:	2300      	movne	r3, #0
 800a320:	b2db      	uxtb	r3, r3
 800a322:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a32a:	f003 0308 	and.w	r3, r3, #8
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d103      	bne.n	800a33a <HAL_UART_IRQHandler+0x17a>
 800a332:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a336:	2b00      	cmp	r3, #0
 800a338:	d04f      	beq.n	800a3da <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a33a:	6878      	ldr	r0, [r7, #4]
 800a33c:	f000 fbac 	bl	800aa98 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	695b      	ldr	r3, [r3, #20]
 800a346:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a34a:	2b40      	cmp	r3, #64	; 0x40
 800a34c:	d141      	bne.n	800a3d2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	3314      	adds	r3, #20
 800a354:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a358:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a35c:	e853 3f00 	ldrex	r3, [r3]
 800a360:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800a364:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a368:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a36c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	3314      	adds	r3, #20
 800a376:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a37a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800a37e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a382:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800a386:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a38a:	e841 2300 	strex	r3, r2, [r1]
 800a38e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800a392:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a396:	2b00      	cmp	r3, #0
 800a398:	d1d9      	bne.n	800a34e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d013      	beq.n	800a3ca <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3a6:	4a7d      	ldr	r2, [pc, #500]	; (800a59c <HAL_UART_IRQHandler+0x3dc>)
 800a3a8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3ae:	4618      	mov	r0, r3
 800a3b0:	f7fb fdce 	bl	8005f50 <HAL_DMA_Abort_IT>
 800a3b4:	4603      	mov	r3, r0
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d016      	beq.n	800a3e8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a3c0:	687a      	ldr	r2, [r7, #4]
 800a3c2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a3c4:	4610      	mov	r0, r2
 800a3c6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a3c8:	e00e      	b.n	800a3e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a3ca:	6878      	ldr	r0, [r7, #4]
 800a3cc:	f000 f990 	bl	800a6f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a3d0:	e00a      	b.n	800a3e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a3d2:	6878      	ldr	r0, [r7, #4]
 800a3d4:	f000 f98c 	bl	800a6f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a3d8:	e006      	b.n	800a3e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a3da:	6878      	ldr	r0, [r7, #4]
 800a3dc:	f000 f988 	bl	800a6f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	2200      	movs	r2, #0
 800a3e4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800a3e6:	e170      	b.n	800a6ca <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a3e8:	bf00      	nop
    return;
 800a3ea:	e16e      	b.n	800a6ca <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3f0:	2b01      	cmp	r3, #1
 800a3f2:	f040 814a 	bne.w	800a68a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800a3f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a3fa:	f003 0310 	and.w	r3, r3, #16
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	f000 8143 	beq.w	800a68a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800a404:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a408:	f003 0310 	and.w	r3, r3, #16
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	f000 813c 	beq.w	800a68a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a412:	2300      	movs	r3, #0
 800a414:	60bb      	str	r3, [r7, #8]
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	60bb      	str	r3, [r7, #8]
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	685b      	ldr	r3, [r3, #4]
 800a424:	60bb      	str	r3, [r7, #8]
 800a426:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	695b      	ldr	r3, [r3, #20]
 800a42e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a432:	2b40      	cmp	r3, #64	; 0x40
 800a434:	f040 80b4 	bne.w	800a5a0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	685b      	ldr	r3, [r3, #4]
 800a440:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a444:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800a448:	2b00      	cmp	r3, #0
 800a44a:	f000 8140 	beq.w	800a6ce <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a452:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a456:	429a      	cmp	r2, r3
 800a458:	f080 8139 	bcs.w	800a6ce <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a462:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a468:	69db      	ldr	r3, [r3, #28]
 800a46a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a46e:	f000 8088 	beq.w	800a582 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	330c      	adds	r3, #12
 800a478:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a47c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a480:	e853 3f00 	ldrex	r3, [r3]
 800a484:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800a488:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a48c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a490:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	330c      	adds	r3, #12
 800a49a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800a49e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a4a2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4a6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800a4aa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a4ae:	e841 2300 	strex	r3, r2, [r1]
 800a4b2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800a4b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d1d9      	bne.n	800a472 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	3314      	adds	r3, #20
 800a4c4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a4c8:	e853 3f00 	ldrex	r3, [r3]
 800a4cc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a4ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a4d0:	f023 0301 	bic.w	r3, r3, #1
 800a4d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	3314      	adds	r3, #20
 800a4de:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a4e2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800a4e6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4e8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a4ea:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a4ee:	e841 2300 	strex	r3, r2, [r1]
 800a4f2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a4f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d1e1      	bne.n	800a4be <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	3314      	adds	r3, #20
 800a500:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a502:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a504:	e853 3f00 	ldrex	r3, [r3]
 800a508:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a50a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a50c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a510:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	3314      	adds	r3, #20
 800a51a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a51e:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a520:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a522:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a524:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a526:	e841 2300 	strex	r3, r2, [r1]
 800a52a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a52c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d1e3      	bne.n	800a4fa <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	2220      	movs	r2, #32
 800a536:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	2200      	movs	r2, #0
 800a53e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	330c      	adds	r3, #12
 800a546:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a548:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a54a:	e853 3f00 	ldrex	r3, [r3]
 800a54e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a550:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a552:	f023 0310 	bic.w	r3, r3, #16
 800a556:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	330c      	adds	r3, #12
 800a560:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800a564:	65ba      	str	r2, [r7, #88]	; 0x58
 800a566:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a568:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a56a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a56c:	e841 2300 	strex	r3, r2, [r1]
 800a570:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a572:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a574:	2b00      	cmp	r3, #0
 800a576:	d1e3      	bne.n	800a540 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a57c:	4618      	mov	r0, r3
 800a57e:	f7fb fc77 	bl	8005e70 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a58a:	b29b      	uxth	r3, r3
 800a58c:	1ad3      	subs	r3, r2, r3
 800a58e:	b29b      	uxth	r3, r3
 800a590:	4619      	mov	r1, r3
 800a592:	6878      	ldr	r0, [r7, #4]
 800a594:	f000 f8b6 	bl	800a704 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a598:	e099      	b.n	800a6ce <HAL_UART_IRQHandler+0x50e>
 800a59a:	bf00      	nop
 800a59c:	0800ab5f 	.word	0x0800ab5f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a5a8:	b29b      	uxth	r3, r3
 800a5aa:	1ad3      	subs	r3, r2, r3
 800a5ac:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a5b4:	b29b      	uxth	r3, r3
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	f000 808b 	beq.w	800a6d2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800a5bc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	f000 8086 	beq.w	800a6d2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	330c      	adds	r3, #12
 800a5cc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5d0:	e853 3f00 	ldrex	r3, [r3]
 800a5d4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a5d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5d8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a5dc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	330c      	adds	r3, #12
 800a5e6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800a5ea:	647a      	str	r2, [r7, #68]	; 0x44
 800a5ec:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5ee:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a5f0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a5f2:	e841 2300 	strex	r3, r2, [r1]
 800a5f6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a5f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d1e3      	bne.n	800a5c6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	3314      	adds	r3, #20
 800a604:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a608:	e853 3f00 	ldrex	r3, [r3]
 800a60c:	623b      	str	r3, [r7, #32]
   return(result);
 800a60e:	6a3b      	ldr	r3, [r7, #32]
 800a610:	f023 0301 	bic.w	r3, r3, #1
 800a614:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	3314      	adds	r3, #20
 800a61e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a622:	633a      	str	r2, [r7, #48]	; 0x30
 800a624:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a626:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a628:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a62a:	e841 2300 	strex	r3, r2, [r1]
 800a62e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a632:	2b00      	cmp	r3, #0
 800a634:	d1e3      	bne.n	800a5fe <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	2220      	movs	r2, #32
 800a63a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	2200      	movs	r2, #0
 800a642:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	330c      	adds	r3, #12
 800a64a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a64c:	693b      	ldr	r3, [r7, #16]
 800a64e:	e853 3f00 	ldrex	r3, [r3]
 800a652:	60fb      	str	r3, [r7, #12]
   return(result);
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	f023 0310 	bic.w	r3, r3, #16
 800a65a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	330c      	adds	r3, #12
 800a664:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800a668:	61fa      	str	r2, [r7, #28]
 800a66a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a66c:	69b9      	ldr	r1, [r7, #24]
 800a66e:	69fa      	ldr	r2, [r7, #28]
 800a670:	e841 2300 	strex	r3, r2, [r1]
 800a674:	617b      	str	r3, [r7, #20]
   return(result);
 800a676:	697b      	ldr	r3, [r7, #20]
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d1e3      	bne.n	800a644 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a67c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a680:	4619      	mov	r1, r3
 800a682:	6878      	ldr	r0, [r7, #4]
 800a684:	f000 f83e 	bl	800a704 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a688:	e023      	b.n	800a6d2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a68a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a68e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a692:	2b00      	cmp	r3, #0
 800a694:	d009      	beq.n	800a6aa <HAL_UART_IRQHandler+0x4ea>
 800a696:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a69a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d003      	beq.n	800a6aa <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800a6a2:	6878      	ldr	r0, [r7, #4]
 800a6a4:	f000 fa6f 	bl	800ab86 <UART_Transmit_IT>
    return;
 800a6a8:	e014      	b.n	800a6d4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a6aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a6ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d00e      	beq.n	800a6d4 <HAL_UART_IRQHandler+0x514>
 800a6b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a6ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d008      	beq.n	800a6d4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800a6c2:	6878      	ldr	r0, [r7, #4]
 800a6c4:	f000 faaf 	bl	800ac26 <UART_EndTransmit_IT>
    return;
 800a6c8:	e004      	b.n	800a6d4 <HAL_UART_IRQHandler+0x514>
    return;
 800a6ca:	bf00      	nop
 800a6cc:	e002      	b.n	800a6d4 <HAL_UART_IRQHandler+0x514>
      return;
 800a6ce:	bf00      	nop
 800a6d0:	e000      	b.n	800a6d4 <HAL_UART_IRQHandler+0x514>
      return;
 800a6d2:	bf00      	nop
  }
}
 800a6d4:	37e8      	adds	r7, #232	; 0xe8
 800a6d6:	46bd      	mov	sp, r7
 800a6d8:	bd80      	pop	{r7, pc}
 800a6da:	bf00      	nop

0800a6dc <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a6dc:	b480      	push	{r7}
 800a6de:	b083      	sub	sp, #12
 800a6e0:	af00      	add	r7, sp, #0
 800a6e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800a6e4:	bf00      	nop
 800a6e6:	370c      	adds	r7, #12
 800a6e8:	46bd      	mov	sp, r7
 800a6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ee:	4770      	bx	lr

0800a6f0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a6f0:	b480      	push	{r7}
 800a6f2:	b083      	sub	sp, #12
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800a6f8:	bf00      	nop
 800a6fa:	370c      	adds	r7, #12
 800a6fc:	46bd      	mov	sp, r7
 800a6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a702:	4770      	bx	lr

0800a704 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a704:	b480      	push	{r7}
 800a706:	b083      	sub	sp, #12
 800a708:	af00      	add	r7, sp, #0
 800a70a:	6078      	str	r0, [r7, #4]
 800a70c:	460b      	mov	r3, r1
 800a70e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a710:	bf00      	nop
 800a712:	370c      	adds	r7, #12
 800a714:	46bd      	mov	sp, r7
 800a716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a71a:	4770      	bx	lr

0800a71c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a71c:	b580      	push	{r7, lr}
 800a71e:	b09c      	sub	sp, #112	; 0x70
 800a720:	af00      	add	r7, sp, #0
 800a722:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a728:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a734:	2b00      	cmp	r3, #0
 800a736:	d172      	bne.n	800a81e <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800a738:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a73a:	2200      	movs	r2, #0
 800a73c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a73e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	330c      	adds	r3, #12
 800a744:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a746:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a748:	e853 3f00 	ldrex	r3, [r3]
 800a74c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a74e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a750:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a754:	66bb      	str	r3, [r7, #104]	; 0x68
 800a756:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	330c      	adds	r3, #12
 800a75c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a75e:	65ba      	str	r2, [r7, #88]	; 0x58
 800a760:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a762:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a764:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a766:	e841 2300 	strex	r3, r2, [r1]
 800a76a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a76c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d1e5      	bne.n	800a73e <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a772:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	3314      	adds	r3, #20
 800a778:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a77a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a77c:	e853 3f00 	ldrex	r3, [r3]
 800a780:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a782:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a784:	f023 0301 	bic.w	r3, r3, #1
 800a788:	667b      	str	r3, [r7, #100]	; 0x64
 800a78a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	3314      	adds	r3, #20
 800a790:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a792:	647a      	str	r2, [r7, #68]	; 0x44
 800a794:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a796:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a798:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a79a:	e841 2300 	strex	r3, r2, [r1]
 800a79e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a7a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d1e5      	bne.n	800a772 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a7a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	3314      	adds	r3, #20
 800a7ac:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7b0:	e853 3f00 	ldrex	r3, [r3]
 800a7b4:	623b      	str	r3, [r7, #32]
   return(result);
 800a7b6:	6a3b      	ldr	r3, [r7, #32]
 800a7b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a7bc:	663b      	str	r3, [r7, #96]	; 0x60
 800a7be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	3314      	adds	r3, #20
 800a7c4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a7c6:	633a      	str	r2, [r7, #48]	; 0x30
 800a7c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a7cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a7ce:	e841 2300 	strex	r3, r2, [r1]
 800a7d2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a7d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d1e5      	bne.n	800a7a6 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a7da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a7dc:	2220      	movs	r2, #32
 800a7de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a7e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a7e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7e6:	2b01      	cmp	r3, #1
 800a7e8:	d119      	bne.n	800a81e <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a7ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	330c      	adds	r3, #12
 800a7f0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7f2:	693b      	ldr	r3, [r7, #16]
 800a7f4:	e853 3f00 	ldrex	r3, [r3]
 800a7f8:	60fb      	str	r3, [r7, #12]
   return(result);
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	f023 0310 	bic.w	r3, r3, #16
 800a800:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a802:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	330c      	adds	r3, #12
 800a808:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a80a:	61fa      	str	r2, [r7, #28]
 800a80c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a80e:	69b9      	ldr	r1, [r7, #24]
 800a810:	69fa      	ldr	r2, [r7, #28]
 800a812:	e841 2300 	strex	r3, r2, [r1]
 800a816:	617b      	str	r3, [r7, #20]
   return(result);
 800a818:	697b      	ldr	r3, [r7, #20]
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d1e5      	bne.n	800a7ea <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a81e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a822:	2b01      	cmp	r3, #1
 800a824:	d106      	bne.n	800a834 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a826:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a828:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a82a:	4619      	mov	r1, r3
 800a82c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a82e:	f7ff ff69 	bl	800a704 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a832:	e002      	b.n	800a83a <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800a834:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a836:	f7f7 fe17 	bl	8002468 <HAL_UART_RxCpltCallback>
}
 800a83a:	bf00      	nop
 800a83c:	3770      	adds	r7, #112	; 0x70
 800a83e:	46bd      	mov	sp, r7
 800a840:	bd80      	pop	{r7, pc}

0800a842 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a842:	b580      	push	{r7, lr}
 800a844:	b084      	sub	sp, #16
 800a846:	af00      	add	r7, sp, #0
 800a848:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a84e:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a854:	2b01      	cmp	r3, #1
 800a856:	d108      	bne.n	800a86a <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a85c:	085b      	lsrs	r3, r3, #1
 800a85e:	b29b      	uxth	r3, r3
 800a860:	4619      	mov	r1, r3
 800a862:	68f8      	ldr	r0, [r7, #12]
 800a864:	f7ff ff4e 	bl	800a704 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a868:	e002      	b.n	800a870 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800a86a:	68f8      	ldr	r0, [r7, #12]
 800a86c:	f7ff ff36 	bl	800a6dc <HAL_UART_RxHalfCpltCallback>
}
 800a870:	bf00      	nop
 800a872:	3710      	adds	r7, #16
 800a874:	46bd      	mov	sp, r7
 800a876:	bd80      	pop	{r7, pc}

0800a878 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a878:	b580      	push	{r7, lr}
 800a87a:	b084      	sub	sp, #16
 800a87c:	af00      	add	r7, sp, #0
 800a87e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800a880:	2300      	movs	r3, #0
 800a882:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a888:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800a88a:	68bb      	ldr	r3, [r7, #8]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	695b      	ldr	r3, [r3, #20]
 800a890:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a894:	2b80      	cmp	r3, #128	; 0x80
 800a896:	bf0c      	ite	eq
 800a898:	2301      	moveq	r3, #1
 800a89a:	2300      	movne	r3, #0
 800a89c:	b2db      	uxtb	r3, r3
 800a89e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800a8a0:	68bb      	ldr	r3, [r7, #8]
 800a8a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a8a6:	b2db      	uxtb	r3, r3
 800a8a8:	2b21      	cmp	r3, #33	; 0x21
 800a8aa:	d108      	bne.n	800a8be <UART_DMAError+0x46>
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d005      	beq.n	800a8be <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800a8b2:	68bb      	ldr	r3, [r7, #8]
 800a8b4:	2200      	movs	r2, #0
 800a8b6:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800a8b8:	68b8      	ldr	r0, [r7, #8]
 800a8ba:	f000 f8c5 	bl	800aa48 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a8be:	68bb      	ldr	r3, [r7, #8]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	695b      	ldr	r3, [r3, #20]
 800a8c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a8c8:	2b40      	cmp	r3, #64	; 0x40
 800a8ca:	bf0c      	ite	eq
 800a8cc:	2301      	moveq	r3, #1
 800a8ce:	2300      	movne	r3, #0
 800a8d0:	b2db      	uxtb	r3, r3
 800a8d2:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800a8d4:	68bb      	ldr	r3, [r7, #8]
 800a8d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a8da:	b2db      	uxtb	r3, r3
 800a8dc:	2b22      	cmp	r3, #34	; 0x22
 800a8de:	d108      	bne.n	800a8f2 <UART_DMAError+0x7a>
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d005      	beq.n	800a8f2 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800a8e6:	68bb      	ldr	r3, [r7, #8]
 800a8e8:	2200      	movs	r2, #0
 800a8ea:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800a8ec:	68b8      	ldr	r0, [r7, #8]
 800a8ee:	f000 f8d3 	bl	800aa98 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a8f2:	68bb      	ldr	r3, [r7, #8]
 800a8f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8f6:	f043 0210 	orr.w	r2, r3, #16
 800a8fa:	68bb      	ldr	r3, [r7, #8]
 800a8fc:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a8fe:	68b8      	ldr	r0, [r7, #8]
 800a900:	f7ff fef6 	bl	800a6f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a904:	bf00      	nop
 800a906:	3710      	adds	r7, #16
 800a908:	46bd      	mov	sp, r7
 800a90a:	bd80      	pop	{r7, pc}

0800a90c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a90c:	b580      	push	{r7, lr}
 800a90e:	b098      	sub	sp, #96	; 0x60
 800a910:	af00      	add	r7, sp, #0
 800a912:	60f8      	str	r0, [r7, #12]
 800a914:	60b9      	str	r1, [r7, #8]
 800a916:	4613      	mov	r3, r2
 800a918:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800a91a:	68ba      	ldr	r2, [r7, #8]
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	88fa      	ldrh	r2, [r7, #6]
 800a924:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	2200      	movs	r2, #0
 800a92a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	2222      	movs	r2, #34	; 0x22
 800a930:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a938:	4a40      	ldr	r2, [pc, #256]	; (800aa3c <UART_Start_Receive_DMA+0x130>)
 800a93a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a940:	4a3f      	ldr	r2, [pc, #252]	; (800aa40 <UART_Start_Receive_DMA+0x134>)
 800a942:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a948:	4a3e      	ldr	r2, [pc, #248]	; (800aa44 <UART_Start_Receive_DMA+0x138>)
 800a94a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a950:	2200      	movs	r2, #0
 800a952:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800a954:	f107 0308 	add.w	r3, r7, #8
 800a958:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	3304      	adds	r3, #4
 800a964:	4619      	mov	r1, r3
 800a966:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a968:	681a      	ldr	r2, [r3, #0]
 800a96a:	88fb      	ldrh	r3, [r7, #6]
 800a96c:	f7fb fa28 	bl	8005dc0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800a970:	2300      	movs	r3, #0
 800a972:	613b      	str	r3, [r7, #16]
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	613b      	str	r3, [r7, #16]
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	685b      	ldr	r3, [r3, #4]
 800a982:	613b      	str	r3, [r7, #16]
 800a984:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	2200      	movs	r2, #0
 800a98a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	691b      	ldr	r3, [r3, #16]
 800a992:	2b00      	cmp	r3, #0
 800a994:	d019      	beq.n	800a9ca <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	330c      	adds	r3, #12
 800a99c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a99e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a9a0:	e853 3f00 	ldrex	r3, [r3]
 800a9a4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a9a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a9a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a9ac:	65bb      	str	r3, [r7, #88]	; 0x58
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	330c      	adds	r3, #12
 800a9b4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a9b6:	64fa      	str	r2, [r7, #76]	; 0x4c
 800a9b8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9ba:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800a9bc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a9be:	e841 2300 	strex	r3, r2, [r1]
 800a9c2:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800a9c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d1e5      	bne.n	800a996 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	3314      	adds	r3, #20
 800a9d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9d4:	e853 3f00 	ldrex	r3, [r3]
 800a9d8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a9da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9dc:	f043 0301 	orr.w	r3, r3, #1
 800a9e0:	657b      	str	r3, [r7, #84]	; 0x54
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	3314      	adds	r3, #20
 800a9e8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a9ea:	63ba      	str	r2, [r7, #56]	; 0x38
 800a9ec:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9ee:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a9f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a9f2:	e841 2300 	strex	r3, r2, [r1]
 800a9f6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a9f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d1e5      	bne.n	800a9ca <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	3314      	adds	r3, #20
 800aa04:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa06:	69bb      	ldr	r3, [r7, #24]
 800aa08:	e853 3f00 	ldrex	r3, [r3]
 800aa0c:	617b      	str	r3, [r7, #20]
   return(result);
 800aa0e:	697b      	ldr	r3, [r7, #20]
 800aa10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa14:	653b      	str	r3, [r7, #80]	; 0x50
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	3314      	adds	r3, #20
 800aa1c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800aa1e:	627a      	str	r2, [r7, #36]	; 0x24
 800aa20:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa22:	6a39      	ldr	r1, [r7, #32]
 800aa24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa26:	e841 2300 	strex	r3, r2, [r1]
 800aa2a:	61fb      	str	r3, [r7, #28]
   return(result);
 800aa2c:	69fb      	ldr	r3, [r7, #28]
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d1e5      	bne.n	800a9fe <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800aa32:	2300      	movs	r3, #0
}
 800aa34:	4618      	mov	r0, r3
 800aa36:	3760      	adds	r7, #96	; 0x60
 800aa38:	46bd      	mov	sp, r7
 800aa3a:	bd80      	pop	{r7, pc}
 800aa3c:	0800a71d 	.word	0x0800a71d
 800aa40:	0800a843 	.word	0x0800a843
 800aa44:	0800a879 	.word	0x0800a879

0800aa48 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800aa48:	b480      	push	{r7}
 800aa4a:	b089      	sub	sp, #36	; 0x24
 800aa4c:	af00      	add	r7, sp, #0
 800aa4e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	330c      	adds	r3, #12
 800aa56:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	e853 3f00 	ldrex	r3, [r3]
 800aa5e:	60bb      	str	r3, [r7, #8]
   return(result);
 800aa60:	68bb      	ldr	r3, [r7, #8]
 800aa62:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800aa66:	61fb      	str	r3, [r7, #28]
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	330c      	adds	r3, #12
 800aa6e:	69fa      	ldr	r2, [r7, #28]
 800aa70:	61ba      	str	r2, [r7, #24]
 800aa72:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa74:	6979      	ldr	r1, [r7, #20]
 800aa76:	69ba      	ldr	r2, [r7, #24]
 800aa78:	e841 2300 	strex	r3, r2, [r1]
 800aa7c:	613b      	str	r3, [r7, #16]
   return(result);
 800aa7e:	693b      	ldr	r3, [r7, #16]
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d1e5      	bne.n	800aa50 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	2220      	movs	r2, #32
 800aa88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800aa8c:	bf00      	nop
 800aa8e:	3724      	adds	r7, #36	; 0x24
 800aa90:	46bd      	mov	sp, r7
 800aa92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa96:	4770      	bx	lr

0800aa98 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800aa98:	b480      	push	{r7}
 800aa9a:	b095      	sub	sp, #84	; 0x54
 800aa9c:	af00      	add	r7, sp, #0
 800aa9e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	330c      	adds	r3, #12
 800aaa6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aaa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aaaa:	e853 3f00 	ldrex	r3, [r3]
 800aaae:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800aab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aab2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800aab6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	330c      	adds	r3, #12
 800aabe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800aac0:	643a      	str	r2, [r7, #64]	; 0x40
 800aac2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aac4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800aac6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800aac8:	e841 2300 	strex	r3, r2, [r1]
 800aacc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800aace:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d1e5      	bne.n	800aaa0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	3314      	adds	r3, #20
 800aada:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aadc:	6a3b      	ldr	r3, [r7, #32]
 800aade:	e853 3f00 	ldrex	r3, [r3]
 800aae2:	61fb      	str	r3, [r7, #28]
   return(result);
 800aae4:	69fb      	ldr	r3, [r7, #28]
 800aae6:	f023 0301 	bic.w	r3, r3, #1
 800aaea:	64bb      	str	r3, [r7, #72]	; 0x48
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	3314      	adds	r3, #20
 800aaf2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800aaf4:	62fa      	str	r2, [r7, #44]	; 0x2c
 800aaf6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aaf8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800aafa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aafc:	e841 2300 	strex	r3, r2, [r1]
 800ab00:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ab02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d1e5      	bne.n	800aad4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab0c:	2b01      	cmp	r3, #1
 800ab0e:	d119      	bne.n	800ab44 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	330c      	adds	r3, #12
 800ab16:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	e853 3f00 	ldrex	r3, [r3]
 800ab1e:	60bb      	str	r3, [r7, #8]
   return(result);
 800ab20:	68bb      	ldr	r3, [r7, #8]
 800ab22:	f023 0310 	bic.w	r3, r3, #16
 800ab26:	647b      	str	r3, [r7, #68]	; 0x44
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	330c      	adds	r3, #12
 800ab2e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ab30:	61ba      	str	r2, [r7, #24]
 800ab32:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab34:	6979      	ldr	r1, [r7, #20]
 800ab36:	69ba      	ldr	r2, [r7, #24]
 800ab38:	e841 2300 	strex	r3, r2, [r1]
 800ab3c:	613b      	str	r3, [r7, #16]
   return(result);
 800ab3e:	693b      	ldr	r3, [r7, #16]
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d1e5      	bne.n	800ab10 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	2220      	movs	r2, #32
 800ab48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	2200      	movs	r2, #0
 800ab50:	631a      	str	r2, [r3, #48]	; 0x30
}
 800ab52:	bf00      	nop
 800ab54:	3754      	adds	r7, #84	; 0x54
 800ab56:	46bd      	mov	sp, r7
 800ab58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab5c:	4770      	bx	lr

0800ab5e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ab5e:	b580      	push	{r7, lr}
 800ab60:	b084      	sub	sp, #16
 800ab62:	af00      	add	r7, sp, #0
 800ab64:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab6a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	2200      	movs	r2, #0
 800ab70:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	2200      	movs	r2, #0
 800ab76:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ab78:	68f8      	ldr	r0, [r7, #12]
 800ab7a:	f7ff fdb9 	bl	800a6f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ab7e:	bf00      	nop
 800ab80:	3710      	adds	r7, #16
 800ab82:	46bd      	mov	sp, r7
 800ab84:	bd80      	pop	{r7, pc}

0800ab86 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800ab86:	b480      	push	{r7}
 800ab88:	b085      	sub	sp, #20
 800ab8a:	af00      	add	r7, sp, #0
 800ab8c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ab94:	b2db      	uxtb	r3, r3
 800ab96:	2b21      	cmp	r3, #33	; 0x21
 800ab98:	d13e      	bne.n	800ac18 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	689b      	ldr	r3, [r3, #8]
 800ab9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aba2:	d114      	bne.n	800abce <UART_Transmit_IT+0x48>
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	691b      	ldr	r3, [r3, #16]
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d110      	bne.n	800abce <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	6a1b      	ldr	r3, [r3, #32]
 800abb0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	881b      	ldrh	r3, [r3, #0]
 800abb6:	461a      	mov	r2, r3
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800abc0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	6a1b      	ldr	r3, [r3, #32]
 800abc6:	1c9a      	adds	r2, r3, #2
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	621a      	str	r2, [r3, #32]
 800abcc:	e008      	b.n	800abe0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	6a1b      	ldr	r3, [r3, #32]
 800abd2:	1c59      	adds	r1, r3, #1
 800abd4:	687a      	ldr	r2, [r7, #4]
 800abd6:	6211      	str	r1, [r2, #32]
 800abd8:	781a      	ldrb	r2, [r3, #0]
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800abe4:	b29b      	uxth	r3, r3
 800abe6:	3b01      	subs	r3, #1
 800abe8:	b29b      	uxth	r3, r3
 800abea:	687a      	ldr	r2, [r7, #4]
 800abec:	4619      	mov	r1, r3
 800abee:	84d1      	strh	r1, [r2, #38]	; 0x26
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d10f      	bne.n	800ac14 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	68da      	ldr	r2, [r3, #12]
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ac02:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	68da      	ldr	r2, [r3, #12]
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ac12:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800ac14:	2300      	movs	r3, #0
 800ac16:	e000      	b.n	800ac1a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800ac18:	2302      	movs	r3, #2
  }
}
 800ac1a:	4618      	mov	r0, r3
 800ac1c:	3714      	adds	r7, #20
 800ac1e:	46bd      	mov	sp, r7
 800ac20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac24:	4770      	bx	lr

0800ac26 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ac26:	b580      	push	{r7, lr}
 800ac28:	b082      	sub	sp, #8
 800ac2a:	af00      	add	r7, sp, #0
 800ac2c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	68da      	ldr	r2, [r3, #12]
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ac3c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	2220      	movs	r2, #32
 800ac42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ac46:	6878      	ldr	r0, [r7, #4]
 800ac48:	f7f7 fbf8 	bl	800243c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800ac4c:	2300      	movs	r3, #0
}
 800ac4e:	4618      	mov	r0, r3
 800ac50:	3708      	adds	r7, #8
 800ac52:	46bd      	mov	sp, r7
 800ac54:	bd80      	pop	{r7, pc}

0800ac56 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800ac56:	b580      	push	{r7, lr}
 800ac58:	b08c      	sub	sp, #48	; 0x30
 800ac5a:	af00      	add	r7, sp, #0
 800ac5c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ac64:	b2db      	uxtb	r3, r3
 800ac66:	2b22      	cmp	r3, #34	; 0x22
 800ac68:	f040 80ab 	bne.w	800adc2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	689b      	ldr	r3, [r3, #8]
 800ac70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ac74:	d117      	bne.n	800aca6 <UART_Receive_IT+0x50>
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	691b      	ldr	r3, [r3, #16]
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d113      	bne.n	800aca6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800ac7e:	2300      	movs	r3, #0
 800ac80:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac86:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	685b      	ldr	r3, [r3, #4]
 800ac8e:	b29b      	uxth	r3, r3
 800ac90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac94:	b29a      	uxth	r2, r3
 800ac96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac98:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac9e:	1c9a      	adds	r2, r3, #2
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	629a      	str	r2, [r3, #40]	; 0x28
 800aca4:	e026      	b.n	800acf4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acaa:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800acac:	2300      	movs	r3, #0
 800acae:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	689b      	ldr	r3, [r3, #8]
 800acb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800acb8:	d007      	beq.n	800acca <UART_Receive_IT+0x74>
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	689b      	ldr	r3, [r3, #8]
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d10a      	bne.n	800acd8 <UART_Receive_IT+0x82>
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	691b      	ldr	r3, [r3, #16]
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d106      	bne.n	800acd8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	685b      	ldr	r3, [r3, #4]
 800acd0:	b2da      	uxtb	r2, r3
 800acd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acd4:	701a      	strb	r2, [r3, #0]
 800acd6:	e008      	b.n	800acea <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	685b      	ldr	r3, [r3, #4]
 800acde:	b2db      	uxtb	r3, r3
 800ace0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ace4:	b2da      	uxtb	r2, r3
 800ace6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ace8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acee:	1c5a      	adds	r2, r3, #1
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800acf8:	b29b      	uxth	r3, r3
 800acfa:	3b01      	subs	r3, #1
 800acfc:	b29b      	uxth	r3, r3
 800acfe:	687a      	ldr	r2, [r7, #4]
 800ad00:	4619      	mov	r1, r3
 800ad02:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d15a      	bne.n	800adbe <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	68da      	ldr	r2, [r3, #12]
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	f022 0220 	bic.w	r2, r2, #32
 800ad16:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	68da      	ldr	r2, [r3, #12]
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ad26:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	695a      	ldr	r2, [r3, #20]
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	f022 0201 	bic.w	r2, r2, #1
 800ad36:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	2220      	movs	r2, #32
 800ad3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad44:	2b01      	cmp	r3, #1
 800ad46:	d135      	bne.n	800adb4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	2200      	movs	r2, #0
 800ad4c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	330c      	adds	r3, #12
 800ad54:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad56:	697b      	ldr	r3, [r7, #20]
 800ad58:	e853 3f00 	ldrex	r3, [r3]
 800ad5c:	613b      	str	r3, [r7, #16]
   return(result);
 800ad5e:	693b      	ldr	r3, [r7, #16]
 800ad60:	f023 0310 	bic.w	r3, r3, #16
 800ad64:	627b      	str	r3, [r7, #36]	; 0x24
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	330c      	adds	r3, #12
 800ad6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ad6e:	623a      	str	r2, [r7, #32]
 800ad70:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad72:	69f9      	ldr	r1, [r7, #28]
 800ad74:	6a3a      	ldr	r2, [r7, #32]
 800ad76:	e841 2300 	strex	r3, r2, [r1]
 800ad7a:	61bb      	str	r3, [r7, #24]
   return(result);
 800ad7c:	69bb      	ldr	r3, [r7, #24]
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d1e5      	bne.n	800ad4e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	f003 0310 	and.w	r3, r3, #16
 800ad8c:	2b10      	cmp	r3, #16
 800ad8e:	d10a      	bne.n	800ada6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800ad90:	2300      	movs	r3, #0
 800ad92:	60fb      	str	r3, [r7, #12]
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	60fb      	str	r3, [r7, #12]
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	685b      	ldr	r3, [r3, #4]
 800ada2:	60fb      	str	r3, [r7, #12]
 800ada4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800adaa:	4619      	mov	r1, r3
 800adac:	6878      	ldr	r0, [r7, #4]
 800adae:	f7ff fca9 	bl	800a704 <HAL_UARTEx_RxEventCallback>
 800adb2:	e002      	b.n	800adba <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800adb4:	6878      	ldr	r0, [r7, #4]
 800adb6:	f7f7 fb57 	bl	8002468 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800adba:	2300      	movs	r3, #0
 800adbc:	e002      	b.n	800adc4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800adbe:	2300      	movs	r3, #0
 800adc0:	e000      	b.n	800adc4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800adc2:	2302      	movs	r3, #2
  }
}
 800adc4:	4618      	mov	r0, r3
 800adc6:	3730      	adds	r7, #48	; 0x30
 800adc8:	46bd      	mov	sp, r7
 800adca:	bd80      	pop	{r7, pc}

0800adcc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800adcc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800add0:	b0c0      	sub	sp, #256	; 0x100
 800add2:	af00      	add	r7, sp, #0
 800add4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800add8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	691b      	ldr	r3, [r3, #16]
 800ade0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800ade4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ade8:	68d9      	ldr	r1, [r3, #12]
 800adea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800adee:	681a      	ldr	r2, [r3, #0]
 800adf0:	ea40 0301 	orr.w	r3, r0, r1
 800adf4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800adf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800adfa:	689a      	ldr	r2, [r3, #8]
 800adfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ae00:	691b      	ldr	r3, [r3, #16]
 800ae02:	431a      	orrs	r2, r3
 800ae04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ae08:	695b      	ldr	r3, [r3, #20]
 800ae0a:	431a      	orrs	r2, r3
 800ae0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ae10:	69db      	ldr	r3, [r3, #28]
 800ae12:	4313      	orrs	r3, r2
 800ae14:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800ae18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	68db      	ldr	r3, [r3, #12]
 800ae20:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800ae24:	f021 010c 	bic.w	r1, r1, #12
 800ae28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ae2c:	681a      	ldr	r2, [r3, #0]
 800ae2e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800ae32:	430b      	orrs	r3, r1
 800ae34:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800ae36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	695b      	ldr	r3, [r3, #20]
 800ae3e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800ae42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ae46:	6999      	ldr	r1, [r3, #24]
 800ae48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ae4c:	681a      	ldr	r2, [r3, #0]
 800ae4e:	ea40 0301 	orr.w	r3, r0, r1
 800ae52:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800ae54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ae58:	681a      	ldr	r2, [r3, #0]
 800ae5a:	4b8f      	ldr	r3, [pc, #572]	; (800b098 <UART_SetConfig+0x2cc>)
 800ae5c:	429a      	cmp	r2, r3
 800ae5e:	d005      	beq.n	800ae6c <UART_SetConfig+0xa0>
 800ae60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ae64:	681a      	ldr	r2, [r3, #0]
 800ae66:	4b8d      	ldr	r3, [pc, #564]	; (800b09c <UART_SetConfig+0x2d0>)
 800ae68:	429a      	cmp	r2, r3
 800ae6a:	d104      	bne.n	800ae76 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800ae6c:	f7fd f928 	bl	80080c0 <HAL_RCC_GetPCLK2Freq>
 800ae70:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800ae74:	e003      	b.n	800ae7e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800ae76:	f7fd f90f 	bl	8008098 <HAL_RCC_GetPCLK1Freq>
 800ae7a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ae7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ae82:	69db      	ldr	r3, [r3, #28]
 800ae84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ae88:	f040 810c 	bne.w	800b0a4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800ae8c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ae90:	2200      	movs	r2, #0
 800ae92:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800ae96:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800ae9a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800ae9e:	4622      	mov	r2, r4
 800aea0:	462b      	mov	r3, r5
 800aea2:	1891      	adds	r1, r2, r2
 800aea4:	65b9      	str	r1, [r7, #88]	; 0x58
 800aea6:	415b      	adcs	r3, r3
 800aea8:	65fb      	str	r3, [r7, #92]	; 0x5c
 800aeaa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800aeae:	4621      	mov	r1, r4
 800aeb0:	eb12 0801 	adds.w	r8, r2, r1
 800aeb4:	4629      	mov	r1, r5
 800aeb6:	eb43 0901 	adc.w	r9, r3, r1
 800aeba:	f04f 0200 	mov.w	r2, #0
 800aebe:	f04f 0300 	mov.w	r3, #0
 800aec2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800aec6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800aeca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800aece:	4690      	mov	r8, r2
 800aed0:	4699      	mov	r9, r3
 800aed2:	4623      	mov	r3, r4
 800aed4:	eb18 0303 	adds.w	r3, r8, r3
 800aed8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800aedc:	462b      	mov	r3, r5
 800aede:	eb49 0303 	adc.w	r3, r9, r3
 800aee2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800aee6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aeea:	685b      	ldr	r3, [r3, #4]
 800aeec:	2200      	movs	r2, #0
 800aeee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800aef2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800aef6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800aefa:	460b      	mov	r3, r1
 800aefc:	18db      	adds	r3, r3, r3
 800aefe:	653b      	str	r3, [r7, #80]	; 0x50
 800af00:	4613      	mov	r3, r2
 800af02:	eb42 0303 	adc.w	r3, r2, r3
 800af06:	657b      	str	r3, [r7, #84]	; 0x54
 800af08:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800af0c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800af10:	f7f5 feba 	bl	8000c88 <__aeabi_uldivmod>
 800af14:	4602      	mov	r2, r0
 800af16:	460b      	mov	r3, r1
 800af18:	4b61      	ldr	r3, [pc, #388]	; (800b0a0 <UART_SetConfig+0x2d4>)
 800af1a:	fba3 2302 	umull	r2, r3, r3, r2
 800af1e:	095b      	lsrs	r3, r3, #5
 800af20:	011c      	lsls	r4, r3, #4
 800af22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800af26:	2200      	movs	r2, #0
 800af28:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800af2c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800af30:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800af34:	4642      	mov	r2, r8
 800af36:	464b      	mov	r3, r9
 800af38:	1891      	adds	r1, r2, r2
 800af3a:	64b9      	str	r1, [r7, #72]	; 0x48
 800af3c:	415b      	adcs	r3, r3
 800af3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800af40:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800af44:	4641      	mov	r1, r8
 800af46:	eb12 0a01 	adds.w	sl, r2, r1
 800af4a:	4649      	mov	r1, r9
 800af4c:	eb43 0b01 	adc.w	fp, r3, r1
 800af50:	f04f 0200 	mov.w	r2, #0
 800af54:	f04f 0300 	mov.w	r3, #0
 800af58:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800af5c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800af60:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800af64:	4692      	mov	sl, r2
 800af66:	469b      	mov	fp, r3
 800af68:	4643      	mov	r3, r8
 800af6a:	eb1a 0303 	adds.w	r3, sl, r3
 800af6e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800af72:	464b      	mov	r3, r9
 800af74:	eb4b 0303 	adc.w	r3, fp, r3
 800af78:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800af7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af80:	685b      	ldr	r3, [r3, #4]
 800af82:	2200      	movs	r2, #0
 800af84:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800af88:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800af8c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800af90:	460b      	mov	r3, r1
 800af92:	18db      	adds	r3, r3, r3
 800af94:	643b      	str	r3, [r7, #64]	; 0x40
 800af96:	4613      	mov	r3, r2
 800af98:	eb42 0303 	adc.w	r3, r2, r3
 800af9c:	647b      	str	r3, [r7, #68]	; 0x44
 800af9e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800afa2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800afa6:	f7f5 fe6f 	bl	8000c88 <__aeabi_uldivmod>
 800afaa:	4602      	mov	r2, r0
 800afac:	460b      	mov	r3, r1
 800afae:	4611      	mov	r1, r2
 800afb0:	4b3b      	ldr	r3, [pc, #236]	; (800b0a0 <UART_SetConfig+0x2d4>)
 800afb2:	fba3 2301 	umull	r2, r3, r3, r1
 800afb6:	095b      	lsrs	r3, r3, #5
 800afb8:	2264      	movs	r2, #100	; 0x64
 800afba:	fb02 f303 	mul.w	r3, r2, r3
 800afbe:	1acb      	subs	r3, r1, r3
 800afc0:	00db      	lsls	r3, r3, #3
 800afc2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800afc6:	4b36      	ldr	r3, [pc, #216]	; (800b0a0 <UART_SetConfig+0x2d4>)
 800afc8:	fba3 2302 	umull	r2, r3, r3, r2
 800afcc:	095b      	lsrs	r3, r3, #5
 800afce:	005b      	lsls	r3, r3, #1
 800afd0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800afd4:	441c      	add	r4, r3
 800afd6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800afda:	2200      	movs	r2, #0
 800afdc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800afe0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800afe4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800afe8:	4642      	mov	r2, r8
 800afea:	464b      	mov	r3, r9
 800afec:	1891      	adds	r1, r2, r2
 800afee:	63b9      	str	r1, [r7, #56]	; 0x38
 800aff0:	415b      	adcs	r3, r3
 800aff2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aff4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800aff8:	4641      	mov	r1, r8
 800affa:	1851      	adds	r1, r2, r1
 800affc:	6339      	str	r1, [r7, #48]	; 0x30
 800affe:	4649      	mov	r1, r9
 800b000:	414b      	adcs	r3, r1
 800b002:	637b      	str	r3, [r7, #52]	; 0x34
 800b004:	f04f 0200 	mov.w	r2, #0
 800b008:	f04f 0300 	mov.w	r3, #0
 800b00c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800b010:	4659      	mov	r1, fp
 800b012:	00cb      	lsls	r3, r1, #3
 800b014:	4651      	mov	r1, sl
 800b016:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b01a:	4651      	mov	r1, sl
 800b01c:	00ca      	lsls	r2, r1, #3
 800b01e:	4610      	mov	r0, r2
 800b020:	4619      	mov	r1, r3
 800b022:	4603      	mov	r3, r0
 800b024:	4642      	mov	r2, r8
 800b026:	189b      	adds	r3, r3, r2
 800b028:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b02c:	464b      	mov	r3, r9
 800b02e:	460a      	mov	r2, r1
 800b030:	eb42 0303 	adc.w	r3, r2, r3
 800b034:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b038:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b03c:	685b      	ldr	r3, [r3, #4]
 800b03e:	2200      	movs	r2, #0
 800b040:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b044:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800b048:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800b04c:	460b      	mov	r3, r1
 800b04e:	18db      	adds	r3, r3, r3
 800b050:	62bb      	str	r3, [r7, #40]	; 0x28
 800b052:	4613      	mov	r3, r2
 800b054:	eb42 0303 	adc.w	r3, r2, r3
 800b058:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b05a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800b05e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800b062:	f7f5 fe11 	bl	8000c88 <__aeabi_uldivmod>
 800b066:	4602      	mov	r2, r0
 800b068:	460b      	mov	r3, r1
 800b06a:	4b0d      	ldr	r3, [pc, #52]	; (800b0a0 <UART_SetConfig+0x2d4>)
 800b06c:	fba3 1302 	umull	r1, r3, r3, r2
 800b070:	095b      	lsrs	r3, r3, #5
 800b072:	2164      	movs	r1, #100	; 0x64
 800b074:	fb01 f303 	mul.w	r3, r1, r3
 800b078:	1ad3      	subs	r3, r2, r3
 800b07a:	00db      	lsls	r3, r3, #3
 800b07c:	3332      	adds	r3, #50	; 0x32
 800b07e:	4a08      	ldr	r2, [pc, #32]	; (800b0a0 <UART_SetConfig+0x2d4>)
 800b080:	fba2 2303 	umull	r2, r3, r2, r3
 800b084:	095b      	lsrs	r3, r3, #5
 800b086:	f003 0207 	and.w	r2, r3, #7
 800b08a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	4422      	add	r2, r4
 800b092:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800b094:	e105      	b.n	800b2a2 <UART_SetConfig+0x4d6>
 800b096:	bf00      	nop
 800b098:	40011000 	.word	0x40011000
 800b09c:	40011400 	.word	0x40011400
 800b0a0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b0a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b0a8:	2200      	movs	r2, #0
 800b0aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b0ae:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b0b2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800b0b6:	4642      	mov	r2, r8
 800b0b8:	464b      	mov	r3, r9
 800b0ba:	1891      	adds	r1, r2, r2
 800b0bc:	6239      	str	r1, [r7, #32]
 800b0be:	415b      	adcs	r3, r3
 800b0c0:	627b      	str	r3, [r7, #36]	; 0x24
 800b0c2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b0c6:	4641      	mov	r1, r8
 800b0c8:	1854      	adds	r4, r2, r1
 800b0ca:	4649      	mov	r1, r9
 800b0cc:	eb43 0501 	adc.w	r5, r3, r1
 800b0d0:	f04f 0200 	mov.w	r2, #0
 800b0d4:	f04f 0300 	mov.w	r3, #0
 800b0d8:	00eb      	lsls	r3, r5, #3
 800b0da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b0de:	00e2      	lsls	r2, r4, #3
 800b0e0:	4614      	mov	r4, r2
 800b0e2:	461d      	mov	r5, r3
 800b0e4:	4643      	mov	r3, r8
 800b0e6:	18e3      	adds	r3, r4, r3
 800b0e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b0ec:	464b      	mov	r3, r9
 800b0ee:	eb45 0303 	adc.w	r3, r5, r3
 800b0f2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b0f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b0fa:	685b      	ldr	r3, [r3, #4]
 800b0fc:	2200      	movs	r2, #0
 800b0fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b102:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b106:	f04f 0200 	mov.w	r2, #0
 800b10a:	f04f 0300 	mov.w	r3, #0
 800b10e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800b112:	4629      	mov	r1, r5
 800b114:	008b      	lsls	r3, r1, #2
 800b116:	4621      	mov	r1, r4
 800b118:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b11c:	4621      	mov	r1, r4
 800b11e:	008a      	lsls	r2, r1, #2
 800b120:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800b124:	f7f5 fdb0 	bl	8000c88 <__aeabi_uldivmod>
 800b128:	4602      	mov	r2, r0
 800b12a:	460b      	mov	r3, r1
 800b12c:	4b60      	ldr	r3, [pc, #384]	; (800b2b0 <UART_SetConfig+0x4e4>)
 800b12e:	fba3 2302 	umull	r2, r3, r3, r2
 800b132:	095b      	lsrs	r3, r3, #5
 800b134:	011c      	lsls	r4, r3, #4
 800b136:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b13a:	2200      	movs	r2, #0
 800b13c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b140:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800b144:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800b148:	4642      	mov	r2, r8
 800b14a:	464b      	mov	r3, r9
 800b14c:	1891      	adds	r1, r2, r2
 800b14e:	61b9      	str	r1, [r7, #24]
 800b150:	415b      	adcs	r3, r3
 800b152:	61fb      	str	r3, [r7, #28]
 800b154:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b158:	4641      	mov	r1, r8
 800b15a:	1851      	adds	r1, r2, r1
 800b15c:	6139      	str	r1, [r7, #16]
 800b15e:	4649      	mov	r1, r9
 800b160:	414b      	adcs	r3, r1
 800b162:	617b      	str	r3, [r7, #20]
 800b164:	f04f 0200 	mov.w	r2, #0
 800b168:	f04f 0300 	mov.w	r3, #0
 800b16c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800b170:	4659      	mov	r1, fp
 800b172:	00cb      	lsls	r3, r1, #3
 800b174:	4651      	mov	r1, sl
 800b176:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b17a:	4651      	mov	r1, sl
 800b17c:	00ca      	lsls	r2, r1, #3
 800b17e:	4610      	mov	r0, r2
 800b180:	4619      	mov	r1, r3
 800b182:	4603      	mov	r3, r0
 800b184:	4642      	mov	r2, r8
 800b186:	189b      	adds	r3, r3, r2
 800b188:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b18c:	464b      	mov	r3, r9
 800b18e:	460a      	mov	r2, r1
 800b190:	eb42 0303 	adc.w	r3, r2, r3
 800b194:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b198:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b19c:	685b      	ldr	r3, [r3, #4]
 800b19e:	2200      	movs	r2, #0
 800b1a0:	67bb      	str	r3, [r7, #120]	; 0x78
 800b1a2:	67fa      	str	r2, [r7, #124]	; 0x7c
 800b1a4:	f04f 0200 	mov.w	r2, #0
 800b1a8:	f04f 0300 	mov.w	r3, #0
 800b1ac:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800b1b0:	4649      	mov	r1, r9
 800b1b2:	008b      	lsls	r3, r1, #2
 800b1b4:	4641      	mov	r1, r8
 800b1b6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b1ba:	4641      	mov	r1, r8
 800b1bc:	008a      	lsls	r2, r1, #2
 800b1be:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800b1c2:	f7f5 fd61 	bl	8000c88 <__aeabi_uldivmod>
 800b1c6:	4602      	mov	r2, r0
 800b1c8:	460b      	mov	r3, r1
 800b1ca:	4b39      	ldr	r3, [pc, #228]	; (800b2b0 <UART_SetConfig+0x4e4>)
 800b1cc:	fba3 1302 	umull	r1, r3, r3, r2
 800b1d0:	095b      	lsrs	r3, r3, #5
 800b1d2:	2164      	movs	r1, #100	; 0x64
 800b1d4:	fb01 f303 	mul.w	r3, r1, r3
 800b1d8:	1ad3      	subs	r3, r2, r3
 800b1da:	011b      	lsls	r3, r3, #4
 800b1dc:	3332      	adds	r3, #50	; 0x32
 800b1de:	4a34      	ldr	r2, [pc, #208]	; (800b2b0 <UART_SetConfig+0x4e4>)
 800b1e0:	fba2 2303 	umull	r2, r3, r2, r3
 800b1e4:	095b      	lsrs	r3, r3, #5
 800b1e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b1ea:	441c      	add	r4, r3
 800b1ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b1f0:	2200      	movs	r2, #0
 800b1f2:	673b      	str	r3, [r7, #112]	; 0x70
 800b1f4:	677a      	str	r2, [r7, #116]	; 0x74
 800b1f6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800b1fa:	4642      	mov	r2, r8
 800b1fc:	464b      	mov	r3, r9
 800b1fe:	1891      	adds	r1, r2, r2
 800b200:	60b9      	str	r1, [r7, #8]
 800b202:	415b      	adcs	r3, r3
 800b204:	60fb      	str	r3, [r7, #12]
 800b206:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b20a:	4641      	mov	r1, r8
 800b20c:	1851      	adds	r1, r2, r1
 800b20e:	6039      	str	r1, [r7, #0]
 800b210:	4649      	mov	r1, r9
 800b212:	414b      	adcs	r3, r1
 800b214:	607b      	str	r3, [r7, #4]
 800b216:	f04f 0200 	mov.w	r2, #0
 800b21a:	f04f 0300 	mov.w	r3, #0
 800b21e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800b222:	4659      	mov	r1, fp
 800b224:	00cb      	lsls	r3, r1, #3
 800b226:	4651      	mov	r1, sl
 800b228:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b22c:	4651      	mov	r1, sl
 800b22e:	00ca      	lsls	r2, r1, #3
 800b230:	4610      	mov	r0, r2
 800b232:	4619      	mov	r1, r3
 800b234:	4603      	mov	r3, r0
 800b236:	4642      	mov	r2, r8
 800b238:	189b      	adds	r3, r3, r2
 800b23a:	66bb      	str	r3, [r7, #104]	; 0x68
 800b23c:	464b      	mov	r3, r9
 800b23e:	460a      	mov	r2, r1
 800b240:	eb42 0303 	adc.w	r3, r2, r3
 800b244:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b246:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b24a:	685b      	ldr	r3, [r3, #4]
 800b24c:	2200      	movs	r2, #0
 800b24e:	663b      	str	r3, [r7, #96]	; 0x60
 800b250:	667a      	str	r2, [r7, #100]	; 0x64
 800b252:	f04f 0200 	mov.w	r2, #0
 800b256:	f04f 0300 	mov.w	r3, #0
 800b25a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800b25e:	4649      	mov	r1, r9
 800b260:	008b      	lsls	r3, r1, #2
 800b262:	4641      	mov	r1, r8
 800b264:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b268:	4641      	mov	r1, r8
 800b26a:	008a      	lsls	r2, r1, #2
 800b26c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800b270:	f7f5 fd0a 	bl	8000c88 <__aeabi_uldivmod>
 800b274:	4602      	mov	r2, r0
 800b276:	460b      	mov	r3, r1
 800b278:	4b0d      	ldr	r3, [pc, #52]	; (800b2b0 <UART_SetConfig+0x4e4>)
 800b27a:	fba3 1302 	umull	r1, r3, r3, r2
 800b27e:	095b      	lsrs	r3, r3, #5
 800b280:	2164      	movs	r1, #100	; 0x64
 800b282:	fb01 f303 	mul.w	r3, r1, r3
 800b286:	1ad3      	subs	r3, r2, r3
 800b288:	011b      	lsls	r3, r3, #4
 800b28a:	3332      	adds	r3, #50	; 0x32
 800b28c:	4a08      	ldr	r2, [pc, #32]	; (800b2b0 <UART_SetConfig+0x4e4>)
 800b28e:	fba2 2303 	umull	r2, r3, r2, r3
 800b292:	095b      	lsrs	r3, r3, #5
 800b294:	f003 020f 	and.w	r2, r3, #15
 800b298:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	4422      	add	r2, r4
 800b2a0:	609a      	str	r2, [r3, #8]
}
 800b2a2:	bf00      	nop
 800b2a4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800b2a8:	46bd      	mov	sp, r7
 800b2aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b2ae:	bf00      	nop
 800b2b0:	51eb851f 	.word	0x51eb851f

0800b2b4 <FusionDegreesToRadians>:
/**
 * @brief Converts degrees to radians.
 * @param degrees Degrees.
 * @return Radians.
 */
static inline float FusionDegreesToRadians(const float degrees) {
 800b2b4:	b480      	push	{r7}
 800b2b6:	b083      	sub	sp, #12
 800b2b8:	af00      	add	r7, sp, #0
 800b2ba:	ed87 0a01 	vstr	s0, [r7, #4]
    return degrees * ((float) M_PI / 180.0f);
 800b2be:	edd7 7a01 	vldr	s15, [r7, #4]
 800b2c2:	ed9f 7a05 	vldr	s14, [pc, #20]	; 800b2d8 <FusionDegreesToRadians+0x24>
 800b2c6:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800b2ca:	eeb0 0a67 	vmov.f32	s0, s15
 800b2ce:	370c      	adds	r7, #12
 800b2d0:	46bd      	mov	sp, r7
 800b2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d6:	4770      	bx	lr
 800b2d8:	3c8efa35 	.word	0x3c8efa35

0800b2dc <FusionFastInverseSqrt>:
 * @brief Calculates the reciprocal of the square root.
 * See https://pizer.wordpress.com/2008/10/12/fast-inverse-square-root/
 * @param x Operand.
 * @return Reciprocal of the square root of x.
 */
static inline float FusionFastInverseSqrt(const float x) {
 800b2dc:	b480      	push	{r7}
 800b2de:	b085      	sub	sp, #20
 800b2e0:	af00      	add	r7, sp, #0
 800b2e2:	ed87 0a01 	vstr	s0, [r7, #4]
    typedef union {
        float f;
        int32_t i;
    } Union32;

    Union32 union32 = {.f = x};
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	60fb      	str	r3, [r7, #12]
    union32.i = 0x5F1F1412 - (union32.i >> 1);
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	105a      	asrs	r2, r3, #1
 800b2ee:	4b10      	ldr	r3, [pc, #64]	; (800b330 <FusionFastInverseSqrt+0x54>)
 800b2f0:	1a9b      	subs	r3, r3, r2
 800b2f2:	60fb      	str	r3, [r7, #12]
    return union32.f * (1.69000231f - 0.714158168f * x * union32.f * union32.f);
 800b2f4:	ed97 7a03 	vldr	s14, [r7, #12]
 800b2f8:	edd7 7a01 	vldr	s15, [r7, #4]
 800b2fc:	eddf 6a0d 	vldr	s13, [pc, #52]	; 800b334 <FusionFastInverseSqrt+0x58>
 800b300:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800b304:	edd7 7a03 	vldr	s15, [r7, #12]
 800b308:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800b30c:	edd7 7a03 	vldr	s15, [r7, #12]
 800b310:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b314:	eddf 6a08 	vldr	s13, [pc, #32]	; 800b338 <FusionFastInverseSqrt+0x5c>
 800b318:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800b31c:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 800b320:	eeb0 0a67 	vmov.f32	s0, s15
 800b324:	3714      	adds	r7, #20
 800b326:	46bd      	mov	sp, r7
 800b328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b32c:	4770      	bx	lr
 800b32e:	bf00      	nop
 800b330:	5f1f1412 	.word	0x5f1f1412
 800b334:	3f36d312 	.word	0x3f36d312
 800b338:	3fd851ff 	.word	0x3fd851ff

0800b33c <FusionVectorIsZero>:
/**
 * @brief Returns true if the vector is zero.
 * @param vector Vector.
 * @return True if the vector is zero.
 */
static inline bool FusionVectorIsZero(const FusionVector vector) {
 800b33c:	b480      	push	{r7}
 800b33e:	b085      	sub	sp, #20
 800b340:	af00      	add	r7, sp, #0
 800b342:	eef0 6a40 	vmov.f32	s13, s0
 800b346:	eeb0 7a60 	vmov.f32	s14, s1
 800b34a:	eef0 7a41 	vmov.f32	s15, s2
 800b34e:	edc7 6a01 	vstr	s13, [r7, #4]
 800b352:	ed87 7a02 	vstr	s14, [r7, #8]
 800b356:	edc7 7a03 	vstr	s15, [r7, #12]
    return (vector.axis.x == 0.0f) && (vector.axis.y == 0.0f) && (vector.axis.z == 0.0f);
 800b35a:	edd7 7a01 	vldr	s15, [r7, #4]
 800b35e:	eef5 7a40 	vcmp.f32	s15, #0.0
 800b362:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b366:	d10f      	bne.n	800b388 <FusionVectorIsZero+0x4c>
 800b368:	edd7 7a02 	vldr	s15, [r7, #8]
 800b36c:	eef5 7a40 	vcmp.f32	s15, #0.0
 800b370:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b374:	d108      	bne.n	800b388 <FusionVectorIsZero+0x4c>
 800b376:	edd7 7a03 	vldr	s15, [r7, #12]
 800b37a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800b37e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b382:	d101      	bne.n	800b388 <FusionVectorIsZero+0x4c>
 800b384:	2301      	movs	r3, #1
 800b386:	e000      	b.n	800b38a <FusionVectorIsZero+0x4e>
 800b388:	2300      	movs	r3, #0
 800b38a:	f003 0301 	and.w	r3, r3, #1
 800b38e:	b2db      	uxtb	r3, r3
}
 800b390:	4618      	mov	r0, r3
 800b392:	3714      	adds	r7, #20
 800b394:	46bd      	mov	sp, r7
 800b396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b39a:	4770      	bx	lr

0800b39c <FusionVectorAdd>:
 * @brief Returns the sum of two vectors.
 * @param vectorA Vector A.
 * @param vectorB Vector B.
 * @return Sum of two vectors.
 */
static inline FusionVector FusionVectorAdd(const FusionVector vectorA, const FusionVector vectorB) {
 800b39c:	b480      	push	{r7}
 800b39e:	b091      	sub	sp, #68	; 0x44
 800b3a0:	af00      	add	r7, sp, #0
 800b3a2:	eeb0 5a40 	vmov.f32	s10, s0
 800b3a6:	eef0 5a60 	vmov.f32	s11, s1
 800b3aa:	eeb0 6a41 	vmov.f32	s12, s2
 800b3ae:	eef0 6a61 	vmov.f32	s13, s3
 800b3b2:	eeb0 7a42 	vmov.f32	s14, s4
 800b3b6:	eef0 7a62 	vmov.f32	s15, s5
 800b3ba:	ed87 5a07 	vstr	s10, [r7, #28]
 800b3be:	edc7 5a08 	vstr	s11, [r7, #32]
 800b3c2:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 800b3c6:	edc7 6a04 	vstr	s13, [r7, #16]
 800b3ca:	ed87 7a05 	vstr	s14, [r7, #20]
 800b3ce:	edc7 7a06 	vstr	s15, [r7, #24]
    const FusionVector result = {.axis = {
            .x = vectorA.axis.x + vectorB.axis.x,
 800b3d2:	ed97 7a07 	vldr	s14, [r7, #28]
 800b3d6:	edd7 7a04 	vldr	s15, [r7, #16]
 800b3da:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800b3de:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = vectorA.axis.y + vectorB.axis.y,
 800b3e2:	ed97 7a08 	vldr	s14, [r7, #32]
 800b3e6:	edd7 7a05 	vldr	s15, [r7, #20]
 800b3ea:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800b3ee:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = vectorA.axis.z + vectorB.axis.z,
 800b3f2:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800b3f6:	edd7 7a06 	vldr	s15, [r7, #24]
 800b3fa:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800b3fe:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    }};
    return result;
 800b402:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800b406:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800b40a:	ca07      	ldmia	r2, {r0, r1, r2}
 800b40c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800b410:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b412:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b414:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b416:	ee06 1a90 	vmov	s13, r1
 800b41a:	ee07 2a10 	vmov	s14, r2
 800b41e:	ee07 3a90 	vmov	s15, r3
}
 800b422:	eeb0 0a66 	vmov.f32	s0, s13
 800b426:	eef0 0a47 	vmov.f32	s1, s14
 800b42a:	eeb0 1a67 	vmov.f32	s2, s15
 800b42e:	3744      	adds	r7, #68	; 0x44
 800b430:	46bd      	mov	sp, r7
 800b432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b436:	4770      	bx	lr

0800b438 <FusionVectorSum>:
/**
 * @brief Returns the sum of the elements.
 * @param vector Vector.
 * @return Sum of the elements.
 */
static inline float FusionVectorSum(const FusionVector vector) {
 800b438:	b480      	push	{r7}
 800b43a:	b085      	sub	sp, #20
 800b43c:	af00      	add	r7, sp, #0
 800b43e:	eef0 6a40 	vmov.f32	s13, s0
 800b442:	eeb0 7a60 	vmov.f32	s14, s1
 800b446:	eef0 7a41 	vmov.f32	s15, s2
 800b44a:	edc7 6a01 	vstr	s13, [r7, #4]
 800b44e:	ed87 7a02 	vstr	s14, [r7, #8]
 800b452:	edc7 7a03 	vstr	s15, [r7, #12]
    return vector.axis.x + vector.axis.y + vector.axis.z;
 800b456:	ed97 7a01 	vldr	s14, [r7, #4]
 800b45a:	edd7 7a02 	vldr	s15, [r7, #8]
 800b45e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b462:	edd7 7a03 	vldr	s15, [r7, #12]
 800b466:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 800b46a:	eeb0 0a67 	vmov.f32	s0, s15
 800b46e:	3714      	adds	r7, #20
 800b470:	46bd      	mov	sp, r7
 800b472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b476:	4770      	bx	lr

0800b478 <FusionVectorMultiplyScalar>:
 * @brief Returns the multiplication of a vector by a scalar.
 * @param vector Vector.
 * @param scalar Scalar.
 * @return Multiplication of a vector by a scalar.
 */
static inline FusionVector FusionVectorMultiplyScalar(const FusionVector vector, const float scalar) {
 800b478:	b480      	push	{r7}
 800b47a:	b08f      	sub	sp, #60	; 0x3c
 800b47c:	af00      	add	r7, sp, #0
 800b47e:	eef0 6a40 	vmov.f32	s13, s0
 800b482:	eeb0 7a60 	vmov.f32	s14, s1
 800b486:	eef0 7a41 	vmov.f32	s15, s2
 800b48a:	edc7 1a04 	vstr	s3, [r7, #16]
 800b48e:	edc7 6a05 	vstr	s13, [r7, #20]
 800b492:	ed87 7a06 	vstr	s14, [r7, #24]
 800b496:	edc7 7a07 	vstr	s15, [r7, #28]
    const FusionVector result = {.axis = {
            .x = vector.axis.x * scalar,
 800b49a:	ed97 7a05 	vldr	s14, [r7, #20]
 800b49e:	edd7 7a04 	vldr	s15, [r7, #16]
 800b4a2:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800b4a6:	edc7 7a08 	vstr	s15, [r7, #32]
            .y = vector.axis.y * scalar,
 800b4aa:	ed97 7a06 	vldr	s14, [r7, #24]
 800b4ae:	edd7 7a04 	vldr	s15, [r7, #16]
 800b4b2:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800b4b6:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            .z = vector.axis.z * scalar,
 800b4ba:	ed97 7a07 	vldr	s14, [r7, #28]
 800b4be:	edd7 7a04 	vldr	s15, [r7, #16]
 800b4c2:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800b4c6:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    }};
    return result;
 800b4ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b4ce:	f107 0220 	add.w	r2, r7, #32
 800b4d2:	ca07      	ldmia	r2, {r0, r1, r2}
 800b4d4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800b4d8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b4da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b4dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4de:	ee06 1a90 	vmov	s13, r1
 800b4e2:	ee07 2a10 	vmov	s14, r2
 800b4e6:	ee07 3a90 	vmov	s15, r3
}
 800b4ea:	eeb0 0a66 	vmov.f32	s0, s13
 800b4ee:	eef0 0a47 	vmov.f32	s1, s14
 800b4f2:	eeb0 1a67 	vmov.f32	s2, s15
 800b4f6:	373c      	adds	r7, #60	; 0x3c
 800b4f8:	46bd      	mov	sp, r7
 800b4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4fe:	4770      	bx	lr

0800b500 <FusionVectorHadamardProduct>:
 * @brief Calculates the Hadamard product (element-wise multiplication).
 * @param vectorA Vector A.
 * @param vectorB Vector B.
 * @return Hadamard product.
 */
static inline FusionVector FusionVectorHadamardProduct(const FusionVector vectorA, const FusionVector vectorB) {
 800b500:	b480      	push	{r7}
 800b502:	b091      	sub	sp, #68	; 0x44
 800b504:	af00      	add	r7, sp, #0
 800b506:	eeb0 5a40 	vmov.f32	s10, s0
 800b50a:	eef0 5a60 	vmov.f32	s11, s1
 800b50e:	eeb0 6a41 	vmov.f32	s12, s2
 800b512:	eef0 6a61 	vmov.f32	s13, s3
 800b516:	eeb0 7a42 	vmov.f32	s14, s4
 800b51a:	eef0 7a62 	vmov.f32	s15, s5
 800b51e:	ed87 5a07 	vstr	s10, [r7, #28]
 800b522:	edc7 5a08 	vstr	s11, [r7, #32]
 800b526:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 800b52a:	edc7 6a04 	vstr	s13, [r7, #16]
 800b52e:	ed87 7a05 	vstr	s14, [r7, #20]
 800b532:	edc7 7a06 	vstr	s15, [r7, #24]
    const FusionVector result = {.axis = {
            .x = vectorA.axis.x * vectorB.axis.x,
 800b536:	ed97 7a07 	vldr	s14, [r7, #28]
 800b53a:	edd7 7a04 	vldr	s15, [r7, #16]
 800b53e:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800b542:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = vectorA.axis.y * vectorB.axis.y,
 800b546:	ed97 7a08 	vldr	s14, [r7, #32]
 800b54a:	edd7 7a05 	vldr	s15, [r7, #20]
 800b54e:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800b552:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = vectorA.axis.z * vectorB.axis.z,
 800b556:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800b55a:	edd7 7a06 	vldr	s15, [r7, #24]
 800b55e:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800b562:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    }};
    return result;
 800b566:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800b56a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800b56e:	ca07      	ldmia	r2, {r0, r1, r2}
 800b570:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800b574:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b576:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b578:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b57a:	ee06 1a90 	vmov	s13, r1
 800b57e:	ee07 2a10 	vmov	s14, r2
 800b582:	ee07 3a90 	vmov	s15, r3
}
 800b586:	eeb0 0a66 	vmov.f32	s0, s13
 800b58a:	eef0 0a47 	vmov.f32	s1, s14
 800b58e:	eeb0 1a67 	vmov.f32	s2, s15
 800b592:	3744      	adds	r7, #68	; 0x44
 800b594:	46bd      	mov	sp, r7
 800b596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b59a:	4770      	bx	lr

0800b59c <FusionVectorCrossProduct>:
 * @brief Returns the cross product.
 * @param vectorA Vector A.
 * @param vectorB Vector B.
 * @return Cross product.
 */
static inline FusionVector FusionVectorCrossProduct(const FusionVector vectorA, const FusionVector vectorB) {
 800b59c:	b480      	push	{r7}
 800b59e:	b091      	sub	sp, #68	; 0x44
 800b5a0:	af00      	add	r7, sp, #0
 800b5a2:	eeb0 5a40 	vmov.f32	s10, s0
 800b5a6:	eef0 5a60 	vmov.f32	s11, s1
 800b5aa:	eeb0 6a41 	vmov.f32	s12, s2
 800b5ae:	eef0 6a61 	vmov.f32	s13, s3
 800b5b2:	eeb0 7a42 	vmov.f32	s14, s4
 800b5b6:	eef0 7a62 	vmov.f32	s15, s5
 800b5ba:	ed87 5a07 	vstr	s10, [r7, #28]
 800b5be:	edc7 5a08 	vstr	s11, [r7, #32]
 800b5c2:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 800b5c6:	edc7 6a04 	vstr	s13, [r7, #16]
 800b5ca:	ed87 7a05 	vstr	s14, [r7, #20]
 800b5ce:	edc7 7a06 	vstr	s15, [r7, #24]
#define A vectorA.axis
#define B vectorB.axis
    const FusionVector result = {.axis = {
            .x = A.y * B.z - A.z * B.y,
 800b5d2:	ed97 7a08 	vldr	s14, [r7, #32]
 800b5d6:	edd7 7a06 	vldr	s15, [r7, #24]
 800b5da:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b5de:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800b5e2:	edd7 7a05 	vldr	s15, [r7, #20]
 800b5e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b5ea:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800b5ee:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = A.z * B.x - A.x * B.z,
 800b5f2:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800b5f6:	edd7 7a04 	vldr	s15, [r7, #16]
 800b5fa:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b5fe:	edd7 6a07 	vldr	s13, [r7, #28]
 800b602:	edd7 7a06 	vldr	s15, [r7, #24]
 800b606:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b60a:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800b60e:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = A.x * B.y - A.y * B.x,
 800b612:	ed97 7a07 	vldr	s14, [r7, #28]
 800b616:	edd7 7a05 	vldr	s15, [r7, #20]
 800b61a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b61e:	edd7 6a08 	vldr	s13, [r7, #32]
 800b622:	edd7 7a04 	vldr	s15, [r7, #16]
 800b626:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b62a:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800b62e:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    }};
    return result;
 800b632:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800b636:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800b63a:	ca07      	ldmia	r2, {r0, r1, r2}
 800b63c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800b640:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b642:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b644:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b646:	ee06 1a90 	vmov	s13, r1
 800b64a:	ee07 2a10 	vmov	s14, r2
 800b64e:	ee07 3a90 	vmov	s15, r3
#undef A
#undef B
}
 800b652:	eeb0 0a66 	vmov.f32	s0, s13
 800b656:	eef0 0a47 	vmov.f32	s1, s14
 800b65a:	eeb0 1a67 	vmov.f32	s2, s15
 800b65e:	3744      	adds	r7, #68	; 0x44
 800b660:	46bd      	mov	sp, r7
 800b662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b666:	4770      	bx	lr

0800b668 <FusionVectorDotProduct>:
 * @brief Returns the dot product.
 * @param vectorA Vector A.
 * @param vectorB Vector B.
 * @return Dot product.
 */
static inline float FusionVectorDotProduct(const FusionVector vectorA, const FusionVector vectorB) {
 800b668:	b580      	push	{r7, lr}
 800b66a:	b08a      	sub	sp, #40	; 0x28
 800b66c:	af00      	add	r7, sp, #0
 800b66e:	eeb0 5a40 	vmov.f32	s10, s0
 800b672:	eef0 5a60 	vmov.f32	s11, s1
 800b676:	eeb0 6a41 	vmov.f32	s12, s2
 800b67a:	eef0 6a61 	vmov.f32	s13, s3
 800b67e:	eeb0 7a42 	vmov.f32	s14, s4
 800b682:	eef0 7a62 	vmov.f32	s15, s5
 800b686:	ed87 5a03 	vstr	s10, [r7, #12]
 800b68a:	edc7 5a04 	vstr	s11, [r7, #16]
 800b68e:	ed87 6a05 	vstr	s12, [r7, #20]
 800b692:	edc7 6a00 	vstr	s13, [r7]
 800b696:	ed87 7a01 	vstr	s14, [r7, #4]
 800b69a:	edc7 7a02 	vstr	s15, [r7, #8]
    return FusionVectorSum(FusionVectorHadamardProduct(vectorA, vectorB));
 800b69e:	ed97 5a00 	vldr	s10, [r7]
 800b6a2:	edd7 5a01 	vldr	s11, [r7, #4]
 800b6a6:	ed97 6a02 	vldr	s12, [r7, #8]
 800b6aa:	edd7 6a03 	vldr	s13, [r7, #12]
 800b6ae:	ed97 7a04 	vldr	s14, [r7, #16]
 800b6b2:	edd7 7a05 	vldr	s15, [r7, #20]
 800b6b6:	eef0 1a45 	vmov.f32	s3, s10
 800b6ba:	eeb0 2a65 	vmov.f32	s4, s11
 800b6be:	eef0 2a46 	vmov.f32	s5, s12
 800b6c2:	eeb0 0a66 	vmov.f32	s0, s13
 800b6c6:	eef0 0a47 	vmov.f32	s1, s14
 800b6ca:	eeb0 1a67 	vmov.f32	s2, s15
 800b6ce:	f7ff ff17 	bl	800b500 <FusionVectorHadamardProduct>
 800b6d2:	eef0 6a40 	vmov.f32	s13, s0
 800b6d6:	eeb0 7a60 	vmov.f32	s14, s1
 800b6da:	eef0 7a41 	vmov.f32	s15, s2
 800b6de:	edc7 6a07 	vstr	s13, [r7, #28]
 800b6e2:	ed87 7a08 	vstr	s14, [r7, #32]
 800b6e6:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 800b6ea:	edd7 6a07 	vldr	s13, [r7, #28]
 800b6ee:	ed97 7a08 	vldr	s14, [r7, #32]
 800b6f2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800b6f6:	eeb0 0a66 	vmov.f32	s0, s13
 800b6fa:	eef0 0a47 	vmov.f32	s1, s14
 800b6fe:	eeb0 1a67 	vmov.f32	s2, s15
 800b702:	f7ff fe99 	bl	800b438 <FusionVectorSum>
 800b706:	eef0 7a40 	vmov.f32	s15, s0
}
 800b70a:	eeb0 0a67 	vmov.f32	s0, s15
 800b70e:	3728      	adds	r7, #40	; 0x28
 800b710:	46bd      	mov	sp, r7
 800b712:	bd80      	pop	{r7, pc}

0800b714 <FusionVectorMagnitudeSquared>:
/**
 * @brief Returns the vector magnitude squared.
 * @param vector Vector.
 * @return Vector magnitude squared.
 */
static inline float FusionVectorMagnitudeSquared(const FusionVector vector) {
 800b714:	b580      	push	{r7, lr}
 800b716:	b088      	sub	sp, #32
 800b718:	af00      	add	r7, sp, #0
 800b71a:	eef0 6a40 	vmov.f32	s13, s0
 800b71e:	eeb0 7a60 	vmov.f32	s14, s1
 800b722:	eef0 7a41 	vmov.f32	s15, s2
 800b726:	edc7 6a01 	vstr	s13, [r7, #4]
 800b72a:	ed87 7a02 	vstr	s14, [r7, #8]
 800b72e:	edc7 7a03 	vstr	s15, [r7, #12]
    return FusionVectorSum(FusionVectorHadamardProduct(vector, vector));
 800b732:	ed97 5a01 	vldr	s10, [r7, #4]
 800b736:	edd7 5a02 	vldr	s11, [r7, #8]
 800b73a:	ed97 6a03 	vldr	s12, [r7, #12]
 800b73e:	edd7 6a01 	vldr	s13, [r7, #4]
 800b742:	ed97 7a02 	vldr	s14, [r7, #8]
 800b746:	edd7 7a03 	vldr	s15, [r7, #12]
 800b74a:	eef0 1a45 	vmov.f32	s3, s10
 800b74e:	eeb0 2a65 	vmov.f32	s4, s11
 800b752:	eef0 2a46 	vmov.f32	s5, s12
 800b756:	eeb0 0a66 	vmov.f32	s0, s13
 800b75a:	eef0 0a47 	vmov.f32	s1, s14
 800b75e:	eeb0 1a67 	vmov.f32	s2, s15
 800b762:	f7ff fecd 	bl	800b500 <FusionVectorHadamardProduct>
 800b766:	eef0 6a40 	vmov.f32	s13, s0
 800b76a:	eeb0 7a60 	vmov.f32	s14, s1
 800b76e:	eef0 7a41 	vmov.f32	s15, s2
 800b772:	edc7 6a05 	vstr	s13, [r7, #20]
 800b776:	ed87 7a06 	vstr	s14, [r7, #24]
 800b77a:	edc7 7a07 	vstr	s15, [r7, #28]
 800b77e:	edd7 6a05 	vldr	s13, [r7, #20]
 800b782:	ed97 7a06 	vldr	s14, [r7, #24]
 800b786:	edd7 7a07 	vldr	s15, [r7, #28]
 800b78a:	eeb0 0a66 	vmov.f32	s0, s13
 800b78e:	eef0 0a47 	vmov.f32	s1, s14
 800b792:	eeb0 1a67 	vmov.f32	s2, s15
 800b796:	f7ff fe4f 	bl	800b438 <FusionVectorSum>
 800b79a:	eef0 7a40 	vmov.f32	s15, s0
}
 800b79e:	eeb0 0a67 	vmov.f32	s0, s15
 800b7a2:	3720      	adds	r7, #32
 800b7a4:	46bd      	mov	sp, r7
 800b7a6:	bd80      	pop	{r7, pc}

0800b7a8 <FusionVectorNormalise>:
/**
 * @brief Returns the normalised vector.
 * @param vector Vector.
 * @return Normalised vector.
 */
static inline FusionVector FusionVectorNormalise(const FusionVector vector) {
 800b7a8:	b580      	push	{r7, lr}
 800b7aa:	b08c      	sub	sp, #48	; 0x30
 800b7ac:	af00      	add	r7, sp, #0
 800b7ae:	eef0 6a40 	vmov.f32	s13, s0
 800b7b2:	eeb0 7a60 	vmov.f32	s14, s1
 800b7b6:	eef0 7a41 	vmov.f32	s15, s2
 800b7ba:	edc7 6a05 	vstr	s13, [r7, #20]
 800b7be:	ed87 7a06 	vstr	s14, [r7, #24]
 800b7c2:	edc7 7a07 	vstr	s15, [r7, #28]
#ifdef FUSION_USE_NORMAL_SQRT
    const float magnitudeReciprocal = 1.0f / sqrtf(FusionVectorMagnitudeSquared(vector));
#else
    const float magnitudeReciprocal = FusionFastInverseSqrt(FusionVectorMagnitudeSquared(vector));
 800b7c6:	edd7 6a05 	vldr	s13, [r7, #20]
 800b7ca:	ed97 7a06 	vldr	s14, [r7, #24]
 800b7ce:	edd7 7a07 	vldr	s15, [r7, #28]
 800b7d2:	eeb0 0a66 	vmov.f32	s0, s13
 800b7d6:	eef0 0a47 	vmov.f32	s1, s14
 800b7da:	eeb0 1a67 	vmov.f32	s2, s15
 800b7de:	f7ff ff99 	bl	800b714 <FusionVectorMagnitudeSquared>
 800b7e2:	eef0 7a40 	vmov.f32	s15, s0
 800b7e6:	eeb0 0a67 	vmov.f32	s0, s15
 800b7ea:	f7ff fd77 	bl	800b2dc <FusionFastInverseSqrt>
 800b7ee:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
#endif
    return FusionVectorMultiplyScalar(vector, magnitudeReciprocal);
 800b7f2:	edd7 6a05 	vldr	s13, [r7, #20]
 800b7f6:	ed97 7a06 	vldr	s14, [r7, #24]
 800b7fa:	edd7 7a07 	vldr	s15, [r7, #28]
 800b7fe:	edd7 1a0b 	vldr	s3, [r7, #44]	; 0x2c
 800b802:	eeb0 0a66 	vmov.f32	s0, s13
 800b806:	eef0 0a47 	vmov.f32	s1, s14
 800b80a:	eeb0 1a67 	vmov.f32	s2, s15
 800b80e:	f7ff fe33 	bl	800b478 <FusionVectorMultiplyScalar>
 800b812:	eef0 6a40 	vmov.f32	s13, s0
 800b816:	eeb0 7a60 	vmov.f32	s14, s1
 800b81a:	eef0 7a41 	vmov.f32	s15, s2
 800b81e:	edc7 6a08 	vstr	s13, [r7, #32]
 800b822:	ed87 7a09 	vstr	s14, [r7, #36]	; 0x24
 800b826:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 800b82a:	6a39      	ldr	r1, [r7, #32]
 800b82c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b82e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b830:	ee06 1a90 	vmov	s13, r1
 800b834:	ee07 2a10 	vmov	s14, r2
 800b838:	ee07 3a90 	vmov	s15, r3
}
 800b83c:	eeb0 0a66 	vmov.f32	s0, s13
 800b840:	eef0 0a47 	vmov.f32	s1, s14
 800b844:	eeb0 1a67 	vmov.f32	s2, s15
 800b848:	3730      	adds	r7, #48	; 0x30
 800b84a:	46bd      	mov	sp, r7
 800b84c:	bd80      	pop	{r7, pc}

0800b84e <FusionQuaternionAdd>:
 * @brief Returns the sum of two quaternions.
 * @param quaternionA Quaternion A.
 * @param quaternionB Quaternion B.
 * @return Sum of two quaternions.
 */
static inline FusionQuaternion FusionQuaternionAdd(const FusionQuaternion quaternionA, const FusionQuaternion quaternionB) {
 800b84e:	b490      	push	{r4, r7}
 800b850:	b094      	sub	sp, #80	; 0x50
 800b852:	af00      	add	r7, sp, #0
 800b854:	eeb0 4a40 	vmov.f32	s8, s0
 800b858:	eef0 4a60 	vmov.f32	s9, s1
 800b85c:	eeb0 5a41 	vmov.f32	s10, s2
 800b860:	eef0 5a61 	vmov.f32	s11, s3
 800b864:	eeb0 6a42 	vmov.f32	s12, s4
 800b868:	eef0 6a62 	vmov.f32	s13, s5
 800b86c:	eeb0 7a43 	vmov.f32	s14, s6
 800b870:	eef0 7a63 	vmov.f32	s15, s7
 800b874:	ed87 4a08 	vstr	s8, [r7, #32]
 800b878:	edc7 4a09 	vstr	s9, [r7, #36]	; 0x24
 800b87c:	ed87 5a0a 	vstr	s10, [r7, #40]	; 0x28
 800b880:	edc7 5a0b 	vstr	s11, [r7, #44]	; 0x2c
 800b884:	ed87 6a04 	vstr	s12, [r7, #16]
 800b888:	edc7 6a05 	vstr	s13, [r7, #20]
 800b88c:	ed87 7a06 	vstr	s14, [r7, #24]
 800b890:	edc7 7a07 	vstr	s15, [r7, #28]
    const FusionQuaternion result = {.element = {
            .w = quaternionA.element.w + quaternionB.element.w,
 800b894:	ed97 7a08 	vldr	s14, [r7, #32]
 800b898:	edd7 7a04 	vldr	s15, [r7, #16]
 800b89c:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 800b8a0:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
            .x = quaternionA.element.x + quaternionB.element.x,
 800b8a4:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800b8a8:	edd7 7a05 	vldr	s15, [r7, #20]
 800b8ac:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 800b8b0:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
            .y = quaternionA.element.y + quaternionB.element.y,
 800b8b4:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b8b8:	edd7 7a06 	vldr	s15, [r7, #24]
 800b8bc:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 800b8c0:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
            .z = quaternionA.element.z + quaternionB.element.z,
 800b8c4:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800b8c8:	edd7 7a07 	vldr	s15, [r7, #28]
 800b8cc:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 800b8d0:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    }};
    return result;
 800b8d4:	f107 0440 	add.w	r4, r7, #64	; 0x40
 800b8d8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b8dc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b8de:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800b8e2:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800b8e4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b8e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b8e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b8ea:	ee06 0a10 	vmov	s12, r0
 800b8ee:	ee06 1a90 	vmov	s13, r1
 800b8f2:	ee07 2a10 	vmov	s14, r2
 800b8f6:	ee07 3a90 	vmov	s15, r3
}
 800b8fa:	eeb0 0a46 	vmov.f32	s0, s12
 800b8fe:	eef0 0a66 	vmov.f32	s1, s13
 800b902:	eeb0 1a47 	vmov.f32	s2, s14
 800b906:	eef0 1a67 	vmov.f32	s3, s15
 800b90a:	3750      	adds	r7, #80	; 0x50
 800b90c:	46bd      	mov	sp, r7
 800b90e:	bc90      	pop	{r4, r7}
 800b910:	4770      	bx	lr

0800b912 <FusionQuaternionMultiply>:
 * @brief Returns the multiplication of two quaternions.
 * @param quaternionA Quaternion A (to be post-multiplied).
 * @param quaternionB Quaternion B (to be pre-multiplied).
 * @return Multiplication of two quaternions.
 */
static inline FusionQuaternion FusionQuaternionMultiply(const FusionQuaternion quaternionA, const FusionQuaternion quaternionB) {
 800b912:	b490      	push	{r4, r7}
 800b914:	b094      	sub	sp, #80	; 0x50
 800b916:	af00      	add	r7, sp, #0
 800b918:	eeb0 4a40 	vmov.f32	s8, s0
 800b91c:	eef0 4a60 	vmov.f32	s9, s1
 800b920:	eeb0 5a41 	vmov.f32	s10, s2
 800b924:	eef0 5a61 	vmov.f32	s11, s3
 800b928:	eeb0 6a42 	vmov.f32	s12, s4
 800b92c:	eef0 6a62 	vmov.f32	s13, s5
 800b930:	eeb0 7a43 	vmov.f32	s14, s6
 800b934:	eef0 7a63 	vmov.f32	s15, s7
 800b938:	ed87 4a08 	vstr	s8, [r7, #32]
 800b93c:	edc7 4a09 	vstr	s9, [r7, #36]	; 0x24
 800b940:	ed87 5a0a 	vstr	s10, [r7, #40]	; 0x28
 800b944:	edc7 5a0b 	vstr	s11, [r7, #44]	; 0x2c
 800b948:	ed87 6a04 	vstr	s12, [r7, #16]
 800b94c:	edc7 6a05 	vstr	s13, [r7, #20]
 800b950:	ed87 7a06 	vstr	s14, [r7, #24]
 800b954:	edc7 7a07 	vstr	s15, [r7, #28]
#define A quaternionA.element
#define B quaternionB.element
    const FusionQuaternion result = {.element = {
            .w = A.w * B.w - A.x * B.x - A.y * B.y - A.z * B.z,
 800b958:	ed97 7a08 	vldr	s14, [r7, #32]
 800b95c:	edd7 7a04 	vldr	s15, [r7, #16]
 800b960:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b964:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800b968:	edd7 7a05 	vldr	s15, [r7, #20]
 800b96c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b970:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b974:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800b978:	edd7 7a06 	vldr	s15, [r7, #24]
 800b97c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b980:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b984:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800b988:	edd7 7a07 	vldr	s15, [r7, #28]
 800b98c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b990:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 800b994:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
            .x = A.w * B.x + A.x * B.w + A.y * B.z - A.z * B.y,
 800b998:	ed97 7a08 	vldr	s14, [r7, #32]
 800b99c:	edd7 7a05 	vldr	s15, [r7, #20]
 800b9a0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b9a4:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800b9a8:	edd7 7a04 	vldr	s15, [r7, #16]
 800b9ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b9b0:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b9b4:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800b9b8:	edd7 7a07 	vldr	s15, [r7, #28]
 800b9bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b9c0:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b9c4:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800b9c8:	edd7 7a06 	vldr	s15, [r7, #24]
 800b9cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b9d0:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 800b9d4:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
            .y = A.w * B.y - A.x * B.z + A.y * B.w + A.z * B.x,
 800b9d8:	ed97 7a08 	vldr	s14, [r7, #32]
 800b9dc:	edd7 7a06 	vldr	s15, [r7, #24]
 800b9e0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b9e4:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800b9e8:	edd7 7a07 	vldr	s15, [r7, #28]
 800b9ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b9f0:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b9f4:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800b9f8:	edd7 7a04 	vldr	s15, [r7, #16]
 800b9fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ba00:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ba04:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800ba08:	edd7 7a05 	vldr	s15, [r7, #20]
 800ba0c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ba10:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 800ba14:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
            .z = A.w * B.z + A.x * B.y - A.y * B.x + A.z * B.w,
 800ba18:	ed97 7a08 	vldr	s14, [r7, #32]
 800ba1c:	edd7 7a07 	vldr	s15, [r7, #28]
 800ba20:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ba24:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800ba28:	edd7 7a06 	vldr	s15, [r7, #24]
 800ba2c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ba30:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ba34:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800ba38:	edd7 7a05 	vldr	s15, [r7, #20]
 800ba3c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ba40:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ba44:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800ba48:	edd7 7a04 	vldr	s15, [r7, #16]
 800ba4c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ba50:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 800ba54:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    }};
    return result;
 800ba58:	f107 0440 	add.w	r4, r7, #64	; 0x40
 800ba5c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ba60:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ba62:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800ba66:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800ba68:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ba6a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ba6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba6e:	ee06 0a10 	vmov	s12, r0
 800ba72:	ee06 1a90 	vmov	s13, r1
 800ba76:	ee07 2a10 	vmov	s14, r2
 800ba7a:	ee07 3a90 	vmov	s15, r3
#undef A
#undef B
}
 800ba7e:	eeb0 0a46 	vmov.f32	s0, s12
 800ba82:	eef0 0a66 	vmov.f32	s1, s13
 800ba86:	eeb0 1a47 	vmov.f32	s2, s14
 800ba8a:	eef0 1a67 	vmov.f32	s3, s15
 800ba8e:	3750      	adds	r7, #80	; 0x50
 800ba90:	46bd      	mov	sp, r7
 800ba92:	bc90      	pop	{r4, r7}
 800ba94:	4770      	bx	lr

0800ba96 <FusionQuaternionMultiplyVector>:
 * multiplied by the vector.
 * @param quaternion Quaternion.
 * @param vector Vector.
 * @return Multiplication of a quaternion with a vector.
 */
static inline FusionQuaternion FusionQuaternionMultiplyVector(const FusionQuaternion quaternion, const FusionVector vector) {
 800ba96:	b490      	push	{r4, r7}
 800ba98:	b094      	sub	sp, #80	; 0x50
 800ba9a:	af00      	add	r7, sp, #0
 800ba9c:	eef0 4a40 	vmov.f32	s9, s0
 800baa0:	eeb0 5a60 	vmov.f32	s10, s1
 800baa4:	eef0 5a41 	vmov.f32	s11, s2
 800baa8:	eeb0 6a61 	vmov.f32	s12, s3
 800baac:	eef0 6a42 	vmov.f32	s13, s4
 800bab0:	eeb0 7a62 	vmov.f32	s14, s5
 800bab4:	eef0 7a43 	vmov.f32	s15, s6
 800bab8:	edc7 4a08 	vstr	s9, [r7, #32]
 800babc:	ed87 5a09 	vstr	s10, [r7, #36]	; 0x24
 800bac0:	edc7 5a0a 	vstr	s11, [r7, #40]	; 0x28
 800bac4:	ed87 6a0b 	vstr	s12, [r7, #44]	; 0x2c
 800bac8:	edc7 6a05 	vstr	s13, [r7, #20]
 800bacc:	ed87 7a06 	vstr	s14, [r7, #24]
 800bad0:	edc7 7a07 	vstr	s15, [r7, #28]
#define Q quaternion.element
#define V vector.axis
    const FusionQuaternion result = {.element = {
            .w = -Q.x * V.x - Q.y * V.y - Q.z * V.z,
 800bad4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800bad8:	eeb1 7a67 	vneg.f32	s14, s15
 800badc:	edd7 7a05 	vldr	s15, [r7, #20]
 800bae0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bae4:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800bae8:	edd7 7a06 	vldr	s15, [r7, #24]
 800baec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800baf0:	ee37 7a67 	vsub.f32	s14, s14, s15
 800baf4:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800baf8:	edd7 7a07 	vldr	s15, [r7, #28]
 800bafc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800bb00:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 800bb04:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
            .x = Q.w * V.x + Q.y * V.z - Q.z * V.y,
 800bb08:	ed97 7a08 	vldr	s14, [r7, #32]
 800bb0c:	edd7 7a05 	vldr	s15, [r7, #20]
 800bb10:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bb14:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800bb18:	edd7 7a07 	vldr	s15, [r7, #28]
 800bb1c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800bb20:	ee37 7a27 	vadd.f32	s14, s14, s15
 800bb24:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800bb28:	edd7 7a06 	vldr	s15, [r7, #24]
 800bb2c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800bb30:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 800bb34:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
            .y = Q.w * V.y - Q.x * V.z + Q.z * V.x,
 800bb38:	ed97 7a08 	vldr	s14, [r7, #32]
 800bb3c:	edd7 7a06 	vldr	s15, [r7, #24]
 800bb40:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bb44:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800bb48:	edd7 7a07 	vldr	s15, [r7, #28]
 800bb4c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800bb50:	ee37 7a67 	vsub.f32	s14, s14, s15
 800bb54:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800bb58:	edd7 7a05 	vldr	s15, [r7, #20]
 800bb5c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800bb60:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 800bb64:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
            .z = Q.w * V.z + Q.x * V.y - Q.y * V.x,
 800bb68:	ed97 7a08 	vldr	s14, [r7, #32]
 800bb6c:	edd7 7a07 	vldr	s15, [r7, #28]
 800bb70:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bb74:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800bb78:	edd7 7a06 	vldr	s15, [r7, #24]
 800bb7c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800bb80:	ee37 7a27 	vadd.f32	s14, s14, s15
 800bb84:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800bb88:	edd7 7a05 	vldr	s15, [r7, #20]
 800bb8c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800bb90:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 800bb94:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    }};
    return result;
 800bb98:	f107 0440 	add.w	r4, r7, #64	; 0x40
 800bb9c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800bba0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800bba2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800bba6:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800bba8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bbaa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bbac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bbae:	ee06 0a10 	vmov	s12, r0
 800bbb2:	ee06 1a90 	vmov	s13, r1
 800bbb6:	ee07 2a10 	vmov	s14, r2
 800bbba:	ee07 3a90 	vmov	s15, r3
#undef Q
#undef V
}
 800bbbe:	eeb0 0a46 	vmov.f32	s0, s12
 800bbc2:	eef0 0a66 	vmov.f32	s1, s13
 800bbc6:	eeb0 1a47 	vmov.f32	s2, s14
 800bbca:	eef0 1a67 	vmov.f32	s3, s15
 800bbce:	3750      	adds	r7, #80	; 0x50
 800bbd0:	46bd      	mov	sp, r7
 800bbd2:	bc90      	pop	{r4, r7}
 800bbd4:	4770      	bx	lr

0800bbd6 <FusionQuaternionNormalise>:
/**
 * @brief Returns the normalised quaternion.
 * @param quaternion Quaternion.
 * @return Normalised quaternion.
 */
static inline FusionQuaternion FusionQuaternionNormalise(const FusionQuaternion quaternion) {
 800bbd6:	b590      	push	{r4, r7, lr}
 800bbd8:	b093      	sub	sp, #76	; 0x4c
 800bbda:	af00      	add	r7, sp, #0
 800bbdc:	eeb0 6a40 	vmov.f32	s12, s0
 800bbe0:	eef0 6a60 	vmov.f32	s13, s1
 800bbe4:	eeb0 7a41 	vmov.f32	s14, s2
 800bbe8:	eef0 7a61 	vmov.f32	s15, s3
 800bbec:	ed87 6a04 	vstr	s12, [r7, #16]
 800bbf0:	edc7 6a05 	vstr	s13, [r7, #20]
 800bbf4:	ed87 7a06 	vstr	s14, [r7, #24]
 800bbf8:	edc7 7a07 	vstr	s15, [r7, #28]
#define Q quaternion.element
#ifdef FUSION_USE_NORMAL_SQRT
    const float magnitudeReciprocal = 1.0f / sqrtf(Q.w * Q.w + Q.x * Q.x + Q.y * Q.y + Q.z * Q.z);
#else
    const float magnitudeReciprocal = FusionFastInverseSqrt(Q.w * Q.w + Q.x * Q.x + Q.y * Q.y + Q.z * Q.z);
 800bbfc:	ed97 7a04 	vldr	s14, [r7, #16]
 800bc00:	edd7 7a04 	vldr	s15, [r7, #16]
 800bc04:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bc08:	edd7 6a05 	vldr	s13, [r7, #20]
 800bc0c:	edd7 7a05 	vldr	s15, [r7, #20]
 800bc10:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800bc14:	ee37 7a27 	vadd.f32	s14, s14, s15
 800bc18:	edd7 6a06 	vldr	s13, [r7, #24]
 800bc1c:	edd7 7a06 	vldr	s15, [r7, #24]
 800bc20:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800bc24:	ee37 7a27 	vadd.f32	s14, s14, s15
 800bc28:	edd7 6a07 	vldr	s13, [r7, #28]
 800bc2c:	edd7 7a07 	vldr	s15, [r7, #28]
 800bc30:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800bc34:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bc38:	eeb0 0a67 	vmov.f32	s0, s15
 800bc3c:	f7ff fb4e 	bl	800b2dc <FusionFastInverseSqrt>
 800bc40:	ed87 0a11 	vstr	s0, [r7, #68]	; 0x44
#endif
    const FusionQuaternion result = {.element = {
            .w = Q.w * magnitudeReciprocal,
 800bc44:	ed97 7a04 	vldr	s14, [r7, #16]
 800bc48:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800bc4c:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 800bc50:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            .x = Q.x * magnitudeReciprocal,
 800bc54:	ed97 7a05 	vldr	s14, [r7, #20]
 800bc58:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800bc5c:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 800bc60:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = Q.y * magnitudeReciprocal,
 800bc64:	ed97 7a06 	vldr	s14, [r7, #24]
 800bc68:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800bc6c:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 800bc70:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = Q.z * magnitudeReciprocal,
 800bc74:	ed97 7a07 	vldr	s14, [r7, #28]
 800bc78:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800bc7c:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 800bc80:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    }};
    return result;
 800bc84:	f107 0434 	add.w	r4, r7, #52	; 0x34
 800bc88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bc8c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800bc8e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800bc92:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800bc94:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800bc96:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800bc98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bc9a:	ee06 0a10 	vmov	s12, r0
 800bc9e:	ee06 1a90 	vmov	s13, r1
 800bca2:	ee07 2a10 	vmov	s14, r2
 800bca6:	ee07 3a90 	vmov	s15, r3
#undef Q
}
 800bcaa:	eeb0 0a46 	vmov.f32	s0, s12
 800bcae:	eef0 0a66 	vmov.f32	s1, s13
 800bcb2:	eeb0 1a47 	vmov.f32	s2, s14
 800bcb6:	eef0 1a67 	vmov.f32	s3, s15
 800bcba:	374c      	adds	r7, #76	; 0x4c
 800bcbc:	46bd      	mov	sp, r7
 800bcbe:	bd90      	pop	{r4, r7, pc}

0800bcc0 <FusionAhrsInitialise>:

/**
 * @brief Initialises the AHRS algorithm structure.
 * @param ahrs AHRS algorithm structure.
 */
void FusionAhrsInitialise(FusionAhrs *const ahrs) {
 800bcc0:	b5b0      	push	{r4, r5, r7, lr}
 800bcc2:	b088      	sub	sp, #32
 800bcc4:	af00      	add	r7, sp, #0
 800bcc6:	6078      	str	r0, [r7, #4]
    const FusionAhrsSettings settings = {
 800bcc8:	4b0b      	ldr	r3, [pc, #44]	; (800bcf8 <FusionAhrsInitialise+0x38>)
 800bcca:	f107 0408 	add.w	r4, r7, #8
 800bcce:	461d      	mov	r5, r3
 800bcd0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bcd2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bcd4:	e895 0003 	ldmia.w	r5, {r0, r1}
 800bcd8:	e884 0003 	stmia.w	r4, {r0, r1}
            .gyroscopeRange = 0.0f,
            .accelerationRejection = 90.0f,
            .magneticRejection = 90.0f,
            .recoveryTriggerPeriod = 0,
    };
    FusionAhrsSetSettings(ahrs, &settings);
 800bcdc:	f107 0308 	add.w	r3, r7, #8
 800bce0:	4619      	mov	r1, r3
 800bce2:	6878      	ldr	r0, [r7, #4]
 800bce4:	f000 f86e 	bl	800bdc4 <FusionAhrsSetSettings>
    FusionAhrsReset(ahrs);
 800bce8:	6878      	ldr	r0, [r7, #4]
 800bcea:	f000 f807 	bl	800bcfc <FusionAhrsReset>
}
 800bcee:	bf00      	nop
 800bcf0:	3720      	adds	r7, #32
 800bcf2:	46bd      	mov	sp, r7
 800bcf4:	bdb0      	pop	{r4, r5, r7, pc}
 800bcf6:	bf00      	nop
 800bcf8:	080143a8 	.word	0x080143a8

0800bcfc <FusionAhrsReset>:
/**
 * @brief Resets the AHRS algorithm.  This is equivalent to reinitialising the
 * algorithm while maintaining the current settings.
 * @param ahrs AHRS algorithm structure.
 */
void FusionAhrsReset(FusionAhrs *const ahrs) {
 800bcfc:	b480      	push	{r7}
 800bcfe:	b091      	sub	sp, #68	; 0x44
 800bd00:	af00      	add	r7, sp, #0
 800bd02:	6078      	str	r0, [r7, #4]
    ahrs->quaternion = FUSION_IDENTITY_QUATERNION;
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800bd0a:	619a      	str	r2, [r3, #24]
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	f04f 0200 	mov.w	r2, #0
 800bd12:	61da      	str	r2, [r3, #28]
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	f04f 0200 	mov.w	r2, #0
 800bd1a:	621a      	str	r2, [r3, #32]
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	f04f 0200 	mov.w	r2, #0
 800bd22:	625a      	str	r2, [r3, #36]	; 0x24
    ahrs->accelerometer = FUSION_VECTOR_ZERO;
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	f04f 0200 	mov.w	r2, #0
 800bd2a:	629a      	str	r2, [r3, #40]	; 0x28
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	f04f 0200 	mov.w	r2, #0
 800bd32:	62da      	str	r2, [r3, #44]	; 0x2c
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	f04f 0200 	mov.w	r2, #0
 800bd3a:	631a      	str	r2, [r3, #48]	; 0x30
    ahrs->initialising = true;
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	2201      	movs	r2, #1
 800bd40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    ahrs->rampedGain = INITIAL_GAIN;
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	4a1e      	ldr	r2, [pc, #120]	; (800bdc0 <FusionAhrsReset+0xc4>)
 800bd48:	639a      	str	r2, [r3, #56]	; 0x38
    ahrs->angularRateRecovery = false;
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	2200      	movs	r2, #0
 800bd4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    ahrs->halfAccelerometerFeedback = FUSION_VECTOR_ZERO;
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	f04f 0200 	mov.w	r2, #0
 800bd58:	645a      	str	r2, [r3, #68]	; 0x44
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	f04f 0200 	mov.w	r2, #0
 800bd60:	649a      	str	r2, [r3, #72]	; 0x48
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	f04f 0200 	mov.w	r2, #0
 800bd68:	64da      	str	r2, [r3, #76]	; 0x4c
    ahrs->halfMagnetometerFeedback = FUSION_VECTOR_ZERO;
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	f04f 0200 	mov.w	r2, #0
 800bd70:	651a      	str	r2, [r3, #80]	; 0x50
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	f04f 0200 	mov.w	r2, #0
 800bd78:	655a      	str	r2, [r3, #84]	; 0x54
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	f04f 0200 	mov.w	r2, #0
 800bd80:	659a      	str	r2, [r3, #88]	; 0x58
    ahrs->accelerometerIgnored = false;
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	2200      	movs	r2, #0
 800bd86:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
    ahrs->accelerationRecoveryTrigger = 0;
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	2200      	movs	r2, #0
 800bd8e:	661a      	str	r2, [r3, #96]	; 0x60
    ahrs->accelerationRecoveryTimeout = ahrs->settings.recoveryTriggerPeriod;
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	695b      	ldr	r3, [r3, #20]
 800bd94:	461a      	mov	r2, r3
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	665a      	str	r2, [r3, #100]	; 0x64
    ahrs->magnetometerIgnored = false;
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	2200      	movs	r2, #0
 800bd9e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    ahrs->magneticRecoveryTrigger = 0;
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	2200      	movs	r2, #0
 800bda6:	66da      	str	r2, [r3, #108]	; 0x6c
    ahrs->magneticRecoveryTimeout = ahrs->settings.recoveryTriggerPeriod;
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	695b      	ldr	r3, [r3, #20]
 800bdac:	461a      	mov	r2, r3
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	671a      	str	r2, [r3, #112]	; 0x70
}
 800bdb2:	bf00      	nop
 800bdb4:	3744      	adds	r7, #68	; 0x44
 800bdb6:	46bd      	mov	sp, r7
 800bdb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdbc:	4770      	bx	lr
 800bdbe:	bf00      	nop
 800bdc0:	41200000 	.word	0x41200000

0800bdc4 <FusionAhrsSetSettings>:
/**
 * @brief Sets the AHRS algorithm settings.
 * @param ahrs AHRS algorithm structure.
 * @param settings Settings.
 */
void FusionAhrsSetSettings(FusionAhrs *const ahrs, const FusionAhrsSettings *const settings) {
 800bdc4:	b580      	push	{r7, lr}
 800bdc6:	b082      	sub	sp, #8
 800bdc8:	af00      	add	r7, sp, #0
 800bdca:	6078      	str	r0, [r7, #4]
 800bdcc:	6039      	str	r1, [r7, #0]
    ahrs->settings.convention = settings->convention;
 800bdce:	683b      	ldr	r3, [r7, #0]
 800bdd0:	781a      	ldrb	r2, [r3, #0]
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	701a      	strb	r2, [r3, #0]
    ahrs->settings.gain = settings->gain;
 800bdd6:	683b      	ldr	r3, [r7, #0]
 800bdd8:	685a      	ldr	r2, [r3, #4]
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	605a      	str	r2, [r3, #4]
    ahrs->settings.gyroscopeRange = settings->gyroscopeRange == 0.0f ? FLT_MAX : 0.98f * settings->gyroscopeRange;
 800bdde:	683b      	ldr	r3, [r7, #0]
 800bde0:	edd3 7a02 	vldr	s15, [r3, #8]
 800bde4:	eef5 7a40 	vcmp.f32	s15, #0.0
 800bde8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bdec:	d007      	beq.n	800bdfe <FusionAhrsSetSettings+0x3a>
 800bdee:	683b      	ldr	r3, [r7, #0]
 800bdf0:	edd3 7a02 	vldr	s15, [r3, #8]
 800bdf4:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 800bf28 <FusionAhrsSetSettings+0x164>
 800bdf8:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bdfc:	e001      	b.n	800be02 <FusionAhrsSetSettings+0x3e>
 800bdfe:	eddf 7a4b 	vldr	s15, [pc, #300]	; 800bf2c <FusionAhrsSetSettings+0x168>
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	edc3 7a02 	vstr	s15, [r3, #8]
    ahrs->settings.accelerationRejection = settings->accelerationRejection == 0.0f ? FLT_MAX : powf(0.5f * sinf(FusionDegreesToRadians(settings->accelerationRejection)), 2);
 800be08:	683b      	ldr	r3, [r7, #0]
 800be0a:	edd3 7a03 	vldr	s15, [r3, #12]
 800be0e:	eef5 7a40 	vcmp.f32	s15, #0.0
 800be12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be16:	d01b      	beq.n	800be50 <FusionAhrsSetSettings+0x8c>
 800be18:	683b      	ldr	r3, [r7, #0]
 800be1a:	edd3 7a03 	vldr	s15, [r3, #12]
 800be1e:	eeb0 0a67 	vmov.f32	s0, s15
 800be22:	f7ff fa47 	bl	800b2b4 <FusionDegreesToRadians>
 800be26:	eef0 7a40 	vmov.f32	s15, s0
 800be2a:	eeb0 0a67 	vmov.f32	s0, s15
 800be2e:	f005 ff4d 	bl	8011ccc <sinf>
 800be32:	eef0 7a40 	vmov.f32	s15, s0
 800be36:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800be3a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800be3e:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 800be42:	eeb0 0a67 	vmov.f32	s0, s15
 800be46:	f006 f825 	bl	8011e94 <powf>
 800be4a:	eef0 7a40 	vmov.f32	s15, s0
 800be4e:	e001      	b.n	800be54 <FusionAhrsSetSettings+0x90>
 800be50:	eddf 7a36 	vldr	s15, [pc, #216]	; 800bf2c <FusionAhrsSetSettings+0x168>
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	edc3 7a03 	vstr	s15, [r3, #12]
    ahrs->settings.magneticRejection = settings->magneticRejection == 0.0f ? FLT_MAX : powf(0.5f * sinf(FusionDegreesToRadians(settings->magneticRejection)), 2);
 800be5a:	683b      	ldr	r3, [r7, #0]
 800be5c:	edd3 7a04 	vldr	s15, [r3, #16]
 800be60:	eef5 7a40 	vcmp.f32	s15, #0.0
 800be64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be68:	d01b      	beq.n	800bea2 <FusionAhrsSetSettings+0xde>
 800be6a:	683b      	ldr	r3, [r7, #0]
 800be6c:	edd3 7a04 	vldr	s15, [r3, #16]
 800be70:	eeb0 0a67 	vmov.f32	s0, s15
 800be74:	f7ff fa1e 	bl	800b2b4 <FusionDegreesToRadians>
 800be78:	eef0 7a40 	vmov.f32	s15, s0
 800be7c:	eeb0 0a67 	vmov.f32	s0, s15
 800be80:	f005 ff24 	bl	8011ccc <sinf>
 800be84:	eef0 7a40 	vmov.f32	s15, s0
 800be88:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800be8c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800be90:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 800be94:	eeb0 0a67 	vmov.f32	s0, s15
 800be98:	f005 fffc 	bl	8011e94 <powf>
 800be9c:	eef0 7a40 	vmov.f32	s15, s0
 800bea0:	e001      	b.n	800bea6 <FusionAhrsSetSettings+0xe2>
 800bea2:	eddf 7a22 	vldr	s15, [pc, #136]	; 800bf2c <FusionAhrsSetSettings+0x168>
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	edc3 7a04 	vstr	s15, [r3, #16]
    ahrs->settings.recoveryTriggerPeriod = settings->recoveryTriggerPeriod;
 800beac:	683b      	ldr	r3, [r7, #0]
 800beae:	695a      	ldr	r2, [r3, #20]
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	615a      	str	r2, [r3, #20]
    ahrs->accelerationRecoveryTimeout = ahrs->settings.recoveryTriggerPeriod;
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	695b      	ldr	r3, [r3, #20]
 800beb8:	461a      	mov	r2, r3
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	665a      	str	r2, [r3, #100]	; 0x64
    ahrs->magneticRecoveryTimeout = ahrs->settings.recoveryTriggerPeriod;
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	695b      	ldr	r3, [r3, #20]
 800bec2:	461a      	mov	r2, r3
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	671a      	str	r2, [r3, #112]	; 0x70
    if ((settings->gain == 0.0f) || (settings->recoveryTriggerPeriod == 0)) { // disable acceleration and magnetic rejection features if gain is zero
 800bec8:	683b      	ldr	r3, [r7, #0]
 800beca:	edd3 7a01 	vldr	s15, [r3, #4]
 800bece:	eef5 7a40 	vcmp.f32	s15, #0.0
 800bed2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bed6:	d003      	beq.n	800bee0 <FusionAhrsSetSettings+0x11c>
 800bed8:	683b      	ldr	r3, [r7, #0]
 800beda:	695b      	ldr	r3, [r3, #20]
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d105      	bne.n	800beec <FusionAhrsSetSettings+0x128>
        ahrs->settings.accelerationRejection = FLT_MAX;
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	4a13      	ldr	r2, [pc, #76]	; (800bf30 <FusionAhrsSetSettings+0x16c>)
 800bee4:	60da      	str	r2, [r3, #12]
        ahrs->settings.magneticRejection = FLT_MAX;
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	4a11      	ldr	r2, [pc, #68]	; (800bf30 <FusionAhrsSetSettings+0x16c>)
 800beea:	611a      	str	r2, [r3, #16]
    }
    if (ahrs->initialising == false) {
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800bef2:	f083 0301 	eor.w	r3, r3, #1
 800bef6:	b2db      	uxtb	r3, r3
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d003      	beq.n	800bf04 <FusionAhrsSetSettings+0x140>
        ahrs->rampedGain = ahrs->settings.gain;
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	685a      	ldr	r2, [r3, #4]
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	639a      	str	r2, [r3, #56]	; 0x38
    }
    ahrs->rampedGainStep = (INITIAL_GAIN - ahrs->settings.gain) / INITIALISATION_PERIOD;
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	edd3 7a01 	vldr	s15, [r3, #4]
 800bf0a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800bf0e:	ee37 7a67 	vsub.f32	s14, s14, s15
 800bf12:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 800bf16:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
}
 800bf20:	bf00      	nop
 800bf22:	3708      	adds	r7, #8
 800bf24:	46bd      	mov	sp, r7
 800bf26:	bd80      	pop	{r7, pc}
 800bf28:	3f7ae148 	.word	0x3f7ae148
 800bf2c:	7f7fffff 	.word	0x7f7fffff
 800bf30:	7f7fffff 	.word	0x7f7fffff

0800bf34 <FusionAhrsUpdate>:
 * @param gyroscope Gyroscope measurement in degrees per second.
 * @param accelerometer Accelerometer measurement in g.
 * @param magnetometer Magnetometer measurement in arbitrary units.
 * @param deltaTime Delta time in seconds.
 */
void FusionAhrsUpdate(FusionAhrs *const ahrs, const FusionVector gyroscope, const FusionVector accelerometer, const FusionVector magnetometer, const float deltaTime) {
 800bf34:	b590      	push	{r4, r7, lr}
 800bf36:	b0bf      	sub	sp, #252	; 0xfc
 800bf38:	af00      	add	r7, sp, #0
 800bf3a:	62f8      	str	r0, [r7, #44]	; 0x2c
 800bf3c:	eeb0 5a61 	vmov.f32	s10, s3
 800bf40:	eef0 5a42 	vmov.f32	s11, s4
 800bf44:	eeb0 6a62 	vmov.f32	s12, s5
 800bf48:	eef0 6a43 	vmov.f32	s13, s6
 800bf4c:	eeb0 7a63 	vmov.f32	s14, s7
 800bf50:	eef0 7a44 	vmov.f32	s15, s8
 800bf54:	edc7 4a01 	vstr	s9, [r7, #4]
 800bf58:	ed87 0a08 	vstr	s0, [r7, #32]
 800bf5c:	edc7 0a09 	vstr	s1, [r7, #36]	; 0x24
 800bf60:	ed87 1a0a 	vstr	s2, [r7, #40]	; 0x28
 800bf64:	ed87 5a05 	vstr	s10, [r7, #20]
 800bf68:	edc7 5a06 	vstr	s11, [r7, #24]
 800bf6c:	ed87 6a07 	vstr	s12, [r7, #28]
 800bf70:	edc7 6a02 	vstr	s13, [r7, #8]
 800bf74:	ed87 7a03 	vstr	s14, [r7, #12]
 800bf78:	edc7 7a04 	vstr	s15, [r7, #16]
#define Q ahrs->quaternion.element

    // Store accelerometer
    ahrs->accelerometer = accelerometer;
 800bf7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf7e:	3328      	adds	r3, #40	; 0x28
 800bf80:	f107 0214 	add.w	r2, r7, #20
 800bf84:	ca07      	ldmia	r2, {r0, r1, r2}
 800bf86:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    // Reinitialise if gyroscope range exceeded
    if ((fabs(gyroscope.axis.x) > ahrs->settings.gyroscopeRange) || (fabs(gyroscope.axis.y) > ahrs->settings.gyroscopeRange) || (fabs(gyroscope.axis.z) > ahrs->settings.gyroscopeRange)) {
 800bf8a:	edd7 7a08 	vldr	s15, [r7, #32]
 800bf8e:	eeb0 7ae7 	vabs.f32	s14, s15
 800bf92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf94:	edd3 7a02 	vldr	s15, [r3, #8]
 800bf98:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800bf9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bfa0:	dc17      	bgt.n	800bfd2 <FusionAhrsUpdate+0x9e>
 800bfa2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800bfa6:	eeb0 7ae7 	vabs.f32	s14, s15
 800bfaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfac:	edd3 7a02 	vldr	s15, [r3, #8]
 800bfb0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800bfb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bfb8:	dc0b      	bgt.n	800bfd2 <FusionAhrsUpdate+0x9e>
 800bfba:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bfbe:	eeb0 7ae7 	vabs.f32	s14, s15
 800bfc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfc4:	edd3 7a02 	vldr	s15, [r3, #8]
 800bfc8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800bfcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bfd0:	dd15      	ble.n	800bffe <FusionAhrsUpdate+0xca>
        const FusionQuaternion quaternion = ahrs->quaternion;
 800bfd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfd4:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 800bfd8:	3318      	adds	r3, #24
 800bfda:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800bfdc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        FusionAhrsReset(ahrs);
 800bfe0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bfe2:	f7ff fe8b 	bl	800bcfc <FusionAhrsReset>
        ahrs->quaternion = quaternion;
 800bfe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfe8:	f103 0418 	add.w	r4, r3, #24
 800bfec:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800bff0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800bff2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        ahrs->angularRateRecovery = true;
 800bff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bff8:	2201      	movs	r2, #1
 800bffa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    }

    // Ramp down gain during initialisation
    if (ahrs->initialising == true) {
 800bffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c000:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c004:	2b00      	cmp	r3, #0
 800c006:	d02d      	beq.n	800c064 <FusionAhrsUpdate+0x130>
        ahrs->rampedGain -= ahrs->rampedGainStep * deltaTime;
 800c008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c00a:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 800c00e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c010:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 800c014:	edd7 7a01 	vldr	s15, [r7, #4]
 800c018:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c01c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c022:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
        if ((ahrs->rampedGain < ahrs->settings.gain) || (ahrs->settings.gain == 0.0f)) {
 800c026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c028:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 800c02c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c02e:	edd3 7a01 	vldr	s15, [r3, #4]
 800c032:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c036:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c03a:	d407      	bmi.n	800c04c <FusionAhrsUpdate+0x118>
 800c03c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c03e:	edd3 7a01 	vldr	s15, [r3, #4]
 800c042:	eef5 7a40 	vcmp.f32	s15, #0.0
 800c046:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c04a:	d10b      	bne.n	800c064 <FusionAhrsUpdate+0x130>
            ahrs->rampedGain = ahrs->settings.gain;
 800c04c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c04e:	685a      	ldr	r2, [r3, #4]
 800c050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c052:	639a      	str	r2, [r3, #56]	; 0x38
            ahrs->initialising = false;
 800c054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c056:	2200      	movs	r2, #0
 800c058:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
            ahrs->angularRateRecovery = false;
 800c05c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c05e:	2200      	movs	r2, #0
 800c060:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        }
    }

    // Calculate direction of gravity indicated by algorithm
    const FusionVector halfGravity = HalfGravity(ahrs);
 800c064:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c066:	f000 faf4 	bl	800c652 <HalfGravity>
 800c06a:	eef0 6a40 	vmov.f32	s13, s0
 800c06e:	eeb0 7a60 	vmov.f32	s14, s1
 800c072:	eef0 7a41 	vmov.f32	s15, s2
 800c076:	edc7 6a25 	vstr	s13, [r7, #148]	; 0x94
 800c07a:	ed87 7a26 	vstr	s14, [r7, #152]	; 0x98
 800c07e:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c

    // Calculate accelerometer feedback
    FusionVector halfAccelerometerFeedback = FUSION_VECTOR_ZERO;
 800c082:	f04f 0300 	mov.w	r3, #0
 800c086:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800c08a:	f04f 0300 	mov.w	r3, #0
 800c08e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800c092:	f04f 0300 	mov.w	r3, #0
 800c096:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    ahrs->accelerometerIgnored = true;
 800c09a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c09c:	2201      	movs	r2, #1
 800c09e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
    if (FusionVectorIsZero(accelerometer) == false) {
 800c0a2:	edd7 6a05 	vldr	s13, [r7, #20]
 800c0a6:	ed97 7a06 	vldr	s14, [r7, #24]
 800c0aa:	edd7 7a07 	vldr	s15, [r7, #28]
 800c0ae:	eeb0 0a66 	vmov.f32	s0, s13
 800c0b2:	eef0 0a47 	vmov.f32	s1, s14
 800c0b6:	eeb0 1a67 	vmov.f32	s2, s15
 800c0ba:	f7ff f93f 	bl	800b33c <FusionVectorIsZero>
 800c0be:	4603      	mov	r3, r0
 800c0c0:	f083 0301 	eor.w	r3, r3, #1
 800c0c4:	b2db      	uxtb	r3, r3
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	f000 809c 	beq.w	800c204 <FusionAhrsUpdate+0x2d0>

        // Calculate accelerometer feedback scaled by 0.5
        ahrs->halfAccelerometerFeedback = Feedback(FusionVectorNormalise(accelerometer), halfGravity);
 800c0cc:	edd7 6a05 	vldr	s13, [r7, #20]
 800c0d0:	ed97 7a06 	vldr	s14, [r7, #24]
 800c0d4:	edd7 7a07 	vldr	s15, [r7, #28]
 800c0d8:	eeb0 0a66 	vmov.f32	s0, s13
 800c0dc:	eef0 0a47 	vmov.f32	s1, s14
 800c0e0:	eeb0 1a67 	vmov.f32	s2, s15
 800c0e4:	f7ff fb60 	bl	800b7a8 <FusionVectorNormalise>
 800c0e8:	eef0 6a40 	vmov.f32	s13, s0
 800c0ec:	eeb0 7a60 	vmov.f32	s14, s1
 800c0f0:	eef0 7a41 	vmov.f32	s15, s2
 800c0f4:	edc7 6a28 	vstr	s13, [r7, #160]	; 0xa0
 800c0f8:	ed87 7a29 	vstr	s14, [r7, #164]	; 0xa4
 800c0fc:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
 800c100:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 800c102:	ed97 5a25 	vldr	s10, [r7, #148]	; 0x94
 800c106:	edd7 5a26 	vldr	s11, [r7, #152]	; 0x98
 800c10a:	ed97 6a27 	vldr	s12, [r7, #156]	; 0x9c
 800c10e:	edd7 6a28 	vldr	s13, [r7, #160]	; 0xa0
 800c112:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 800c116:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800c11a:	eef0 1a45 	vmov.f32	s3, s10
 800c11e:	eeb0 2a65 	vmov.f32	s4, s11
 800c122:	eef0 2a46 	vmov.f32	s5, s12
 800c126:	eeb0 0a66 	vmov.f32	s0, s13
 800c12a:	eef0 0a47 	vmov.f32	s1, s14
 800c12e:	eeb0 1a67 	vmov.f32	s2, s15
 800c132:	f000 fc55 	bl	800c9e0 <Feedback>
 800c136:	eef0 6a40 	vmov.f32	s13, s0
 800c13a:	eeb0 7a60 	vmov.f32	s14, s1
 800c13e:	eef0 7a41 	vmov.f32	s15, s2
 800c142:	edc4 6a11 	vstr	s13, [r4, #68]	; 0x44
 800c146:	ed84 7a12 	vstr	s14, [r4, #72]	; 0x48
 800c14a:	edc4 7a13 	vstr	s15, [r4, #76]	; 0x4c

        // Don't ignore accelerometer if acceleration error below threshold
        if ((ahrs->initialising == true) || ((FusionVectorMagnitudeSquared(ahrs->halfAccelerometerFeedback) <= ahrs->settings.accelerationRejection))) {
 800c14e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c150:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c154:	2b00      	cmp	r3, #0
 800c156:	d118      	bne.n	800c18a <FusionAhrsUpdate+0x256>
 800c158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c15a:	edd3 6a11 	vldr	s13, [r3, #68]	; 0x44
 800c15e:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 800c162:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 800c166:	eeb0 0a66 	vmov.f32	s0, s13
 800c16a:	eef0 0a47 	vmov.f32	s1, s14
 800c16e:	eeb0 1a67 	vmov.f32	s2, s15
 800c172:	f7ff facf 	bl	800b714 <FusionVectorMagnitudeSquared>
 800c176:	eeb0 7a40 	vmov.f32	s14, s0
 800c17a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c17c:	edd3 7a03 	vldr	s15, [r3, #12]
 800c180:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c184:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c188:	d80a      	bhi.n	800c1a0 <FusionAhrsUpdate+0x26c>
            ahrs->accelerometerIgnored = false;
 800c18a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c18c:	2200      	movs	r2, #0
 800c18e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
            ahrs->accelerationRecoveryTrigger -= 9;
 800c192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c194:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c196:	f1a3 0209 	sub.w	r2, r3, #9
 800c19a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c19c:	661a      	str	r2, [r3, #96]	; 0x60
 800c19e:	e004      	b.n	800c1aa <FusionAhrsUpdate+0x276>
        } else {
            ahrs->accelerationRecoveryTrigger += 1;
 800c1a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c1a4:	1c5a      	adds	r2, r3, #1
 800c1a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1a8:	661a      	str	r2, [r3, #96]	; 0x60
        }

        // Don't ignore accelerometer during acceleration recovery
        if (ahrs->accelerationRecoveryTrigger > ahrs->accelerationRecoveryTimeout) {
 800c1aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1ac:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800c1ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c1b2:	429a      	cmp	r2, r3
 800c1b4:	dd07      	ble.n	800c1c6 <FusionAhrsUpdate+0x292>
            ahrs->accelerationRecoveryTimeout = 0;
 800c1b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1b8:	2200      	movs	r2, #0
 800c1ba:	665a      	str	r2, [r3, #100]	; 0x64
            ahrs->accelerometerIgnored = false;
 800c1bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1be:	2200      	movs	r2, #0
 800c1c0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 800c1c4:	e004      	b.n	800c1d0 <FusionAhrsUpdate+0x29c>
        } else {
            ahrs->accelerationRecoveryTimeout = ahrs->settings.recoveryTriggerPeriod;
 800c1c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1c8:	695b      	ldr	r3, [r3, #20]
 800c1ca:	461a      	mov	r2, r3
 800c1cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1ce:	665a      	str	r2, [r3, #100]	; 0x64
        }
        ahrs->accelerationRecoveryTrigger = Clamp(ahrs->accelerationRecoveryTrigger, 0, ahrs->settings.recoveryTriggerPeriod);
 800c1d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1d2:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800c1d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1d6:	695b      	ldr	r3, [r3, #20]
 800c1d8:	461a      	mov	r2, r3
 800c1da:	2100      	movs	r1, #0
 800c1dc:	f000 fcb5 	bl	800cb4a <Clamp>
 800c1e0:	4602      	mov	r2, r0
 800c1e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1e4:	661a      	str	r2, [r3, #96]	; 0x60

        // Apply accelerometer feedback
        if (ahrs->accelerometerIgnored == false) {
 800c1e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1e8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800c1ec:	f083 0301 	eor.w	r3, r3, #1
 800c1f0:	b2db      	uxtb	r3, r3
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	d006      	beq.n	800c204 <FusionAhrsUpdate+0x2d0>
            halfAccelerometerFeedback = ahrs->halfAccelerometerFeedback;
 800c1f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c1f8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800c1fc:	3244      	adds	r2, #68	; 0x44
 800c1fe:	ca07      	ldmia	r2, {r0, r1, r2}
 800c200:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        }
    }

    // Calculate magnetometer feedback
    FusionVector halfMagnetometerFeedback = FUSION_VECTOR_ZERO;
 800c204:	f04f 0300 	mov.w	r3, #0
 800c208:	673b      	str	r3, [r7, #112]	; 0x70
 800c20a:	f04f 0300 	mov.w	r3, #0
 800c20e:	677b      	str	r3, [r7, #116]	; 0x74
 800c210:	f04f 0300 	mov.w	r3, #0
 800c214:	67bb      	str	r3, [r7, #120]	; 0x78
    ahrs->magnetometerIgnored = false;
 800c216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c218:	2200      	movs	r2, #0
 800c21a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    if (FusionVectorIsZero(magnetometer) == false) {
 800c21e:	edd7 6a02 	vldr	s13, [r7, #8]
 800c222:	ed97 7a03 	vldr	s14, [r7, #12]
 800c226:	edd7 7a04 	vldr	s15, [r7, #16]
 800c22a:	eeb0 0a66 	vmov.f32	s0, s13
 800c22e:	eef0 0a47 	vmov.f32	s1, s14
 800c232:	eeb0 1a67 	vmov.f32	s2, s15
 800c236:	f7ff f881 	bl	800b33c <FusionVectorIsZero>
 800c23a:	4603      	mov	r3, r0
 800c23c:	f083 0301 	eor.w	r3, r3, #1
 800c240:	b2db      	uxtb	r3, r3
 800c242:	2b00      	cmp	r3, #0
 800c244:	f000 80d1 	beq.w	800c3ea <FusionAhrsUpdate+0x4b6>

        // Calculate direction of magnetic field indicated by algorithm
        const FusionVector halfMagnetic = HalfMagnetic(ahrs);
 800c248:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c24a:	f000 fabf 	bl	800c7cc <HalfMagnetic>
 800c24e:	eef0 6a40 	vmov.f32	s13, s0
 800c252:	eeb0 7a60 	vmov.f32	s14, s1
 800c256:	eef0 7a41 	vmov.f32	s15, s2
 800c25a:	edc7 6a0c 	vstr	s13, [r7, #48]	; 0x30
 800c25e:	ed87 7a0d 	vstr	s14, [r7, #52]	; 0x34
 800c262:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38

        // Calculate magnetometer feedback scaled by 0.5
        ahrs->halfMagnetometerFeedback = Feedback(FusionVectorNormalise(FusionVectorCrossProduct(halfGravity, magnetometer)), halfMagnetic);
 800c266:	ed97 5a02 	vldr	s10, [r7, #8]
 800c26a:	edd7 5a03 	vldr	s11, [r7, #12]
 800c26e:	ed97 6a04 	vldr	s12, [r7, #16]
 800c272:	edd7 6a25 	vldr	s13, [r7, #148]	; 0x94
 800c276:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800c27a:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800c27e:	eef0 1a45 	vmov.f32	s3, s10
 800c282:	eeb0 2a65 	vmov.f32	s4, s11
 800c286:	eef0 2a46 	vmov.f32	s5, s12
 800c28a:	eeb0 0a66 	vmov.f32	s0, s13
 800c28e:	eef0 0a47 	vmov.f32	s1, s14
 800c292:	eeb0 1a67 	vmov.f32	s2, s15
 800c296:	f7ff f981 	bl	800b59c <FusionVectorCrossProduct>
 800c29a:	eef0 6a40 	vmov.f32	s13, s0
 800c29e:	eeb0 7a60 	vmov.f32	s14, s1
 800c2a2:	eef0 7a41 	vmov.f32	s15, s2
 800c2a6:	edc7 6a2b 	vstr	s13, [r7, #172]	; 0xac
 800c2aa:	ed87 7a2c 	vstr	s14, [r7, #176]	; 0xb0
 800c2ae:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
 800c2b2:	edd7 6a2b 	vldr	s13, [r7, #172]	; 0xac
 800c2b6:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 800c2ba:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 800c2be:	eeb0 0a66 	vmov.f32	s0, s13
 800c2c2:	eef0 0a47 	vmov.f32	s1, s14
 800c2c6:	eeb0 1a67 	vmov.f32	s2, s15
 800c2ca:	f7ff fa6d 	bl	800b7a8 <FusionVectorNormalise>
 800c2ce:	eef0 6a40 	vmov.f32	s13, s0
 800c2d2:	eeb0 7a60 	vmov.f32	s14, s1
 800c2d6:	eef0 7a41 	vmov.f32	s15, s2
 800c2da:	edc7 6a2e 	vstr	s13, [r7, #184]	; 0xb8
 800c2de:	ed87 7a2f 	vstr	s14, [r7, #188]	; 0xbc
 800c2e2:	edc7 7a30 	vstr	s15, [r7, #192]	; 0xc0
 800c2e6:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 800c2e8:	ed97 5a0c 	vldr	s10, [r7, #48]	; 0x30
 800c2ec:	edd7 5a0d 	vldr	s11, [r7, #52]	; 0x34
 800c2f0:	ed97 6a0e 	vldr	s12, [r7, #56]	; 0x38
 800c2f4:	edd7 6a2e 	vldr	s13, [r7, #184]	; 0xb8
 800c2f8:	ed97 7a2f 	vldr	s14, [r7, #188]	; 0xbc
 800c2fc:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 800c300:	eef0 1a45 	vmov.f32	s3, s10
 800c304:	eeb0 2a65 	vmov.f32	s4, s11
 800c308:	eef0 2a46 	vmov.f32	s5, s12
 800c30c:	eeb0 0a66 	vmov.f32	s0, s13
 800c310:	eef0 0a47 	vmov.f32	s1, s14
 800c314:	eeb0 1a67 	vmov.f32	s2, s15
 800c318:	f000 fb62 	bl	800c9e0 <Feedback>
 800c31c:	eef0 6a40 	vmov.f32	s13, s0
 800c320:	eeb0 7a60 	vmov.f32	s14, s1
 800c324:	eef0 7a41 	vmov.f32	s15, s2
 800c328:	edc4 6a14 	vstr	s13, [r4, #80]	; 0x50
 800c32c:	ed84 7a15 	vstr	s14, [r4, #84]	; 0x54
 800c330:	edc4 7a16 	vstr	s15, [r4, #88]	; 0x58

        // Don't ignore magnetometer if magnetic error below threshold
        if ((ahrs->initialising == true) || ((FusionVectorMagnitudeSquared(ahrs->halfMagnetometerFeedback) <= ahrs->settings.magneticRejection))) {
 800c334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c336:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d118      	bne.n	800c370 <FusionAhrsUpdate+0x43c>
 800c33e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c340:	edd3 6a14 	vldr	s13, [r3, #80]	; 0x50
 800c344:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 800c348:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800c34c:	eeb0 0a66 	vmov.f32	s0, s13
 800c350:	eef0 0a47 	vmov.f32	s1, s14
 800c354:	eeb0 1a67 	vmov.f32	s2, s15
 800c358:	f7ff f9dc 	bl	800b714 <FusionVectorMagnitudeSquared>
 800c35c:	eeb0 7a40 	vmov.f32	s14, s0
 800c360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c362:	edd3 7a04 	vldr	s15, [r3, #16]
 800c366:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c36a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c36e:	d80a      	bhi.n	800c386 <FusionAhrsUpdate+0x452>
            ahrs->magnetometerIgnored = false;
 800c370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c372:	2200      	movs	r2, #0
 800c374:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
            ahrs->magneticRecoveryTrigger -= 9;
 800c378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c37a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c37c:	f1a3 0209 	sub.w	r2, r3, #9
 800c380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c382:	66da      	str	r2, [r3, #108]	; 0x6c
 800c384:	e004      	b.n	800c390 <FusionAhrsUpdate+0x45c>
        } else {
            ahrs->magneticRecoveryTrigger += 1;
 800c386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c388:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c38a:	1c5a      	adds	r2, r3, #1
 800c38c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c38e:	66da      	str	r2, [r3, #108]	; 0x6c
        }

        // Don't ignore magnetometer during magnetic recovery
        if (ahrs->magneticRecoveryTrigger > ahrs->magneticRecoveryTimeout) {
 800c390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c392:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800c394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c396:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c398:	429a      	cmp	r2, r3
 800c39a:	dd07      	ble.n	800c3ac <FusionAhrsUpdate+0x478>
            ahrs->magneticRecoveryTimeout = 0;
 800c39c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c39e:	2200      	movs	r2, #0
 800c3a0:	671a      	str	r2, [r3, #112]	; 0x70
            ahrs->magnetometerIgnored = false;
 800c3a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3a4:	2200      	movs	r2, #0
 800c3a6:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 800c3aa:	e004      	b.n	800c3b6 <FusionAhrsUpdate+0x482>
        } else {
            ahrs->magneticRecoveryTimeout = ahrs->settings.recoveryTriggerPeriod;
 800c3ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3ae:	695b      	ldr	r3, [r3, #20]
 800c3b0:	461a      	mov	r2, r3
 800c3b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3b4:	671a      	str	r2, [r3, #112]	; 0x70
        }
        ahrs->magneticRecoveryTrigger = Clamp(ahrs->magneticRecoveryTrigger, 0, ahrs->settings.recoveryTriggerPeriod);
 800c3b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3b8:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800c3ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3bc:	695b      	ldr	r3, [r3, #20]
 800c3be:	461a      	mov	r2, r3
 800c3c0:	2100      	movs	r1, #0
 800c3c2:	f000 fbc2 	bl	800cb4a <Clamp>
 800c3c6:	4602      	mov	r2, r0
 800c3c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3ca:	66da      	str	r2, [r3, #108]	; 0x6c

        // Apply magnetometer feedback
        if (ahrs->magnetometerIgnored == false) {
 800c3cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3ce:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800c3d2:	f083 0301 	eor.w	r3, r3, #1
 800c3d6:	b2db      	uxtb	r3, r3
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d006      	beq.n	800c3ea <FusionAhrsUpdate+0x4b6>
            halfMagnetometerFeedback = ahrs->halfMagnetometerFeedback;
 800c3dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c3de:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800c3e2:	3250      	adds	r2, #80	; 0x50
 800c3e4:	ca07      	ldmia	r2, {r0, r1, r2}
 800c3e6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        }
    }

    // Convert gyroscope to radians per second scaled by 0.5
    const FusionVector halfGyroscope = FusionVectorMultiplyScalar(gyroscope, FusionDegreesToRadians(0.5f));
 800c3ea:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 800c3ee:	f7fe ff61 	bl	800b2b4 <FusionDegreesToRadians>
 800c3f2:	eeb0 6a40 	vmov.f32	s12, s0
 800c3f6:	edd7 6a08 	vldr	s13, [r7, #32]
 800c3fa:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800c3fe:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c402:	eef0 1a46 	vmov.f32	s3, s12
 800c406:	eeb0 0a66 	vmov.f32	s0, s13
 800c40a:	eef0 0a47 	vmov.f32	s1, s14
 800c40e:	eeb0 1a67 	vmov.f32	s2, s15
 800c412:	f7ff f831 	bl	800b478 <FusionVectorMultiplyScalar>
 800c416:	eef0 6a40 	vmov.f32	s13, s0
 800c41a:	eeb0 7a60 	vmov.f32	s14, s1
 800c41e:	eef0 7a41 	vmov.f32	s15, s2
 800c422:	edc7 6a16 	vstr	s13, [r7, #88]	; 0x58
 800c426:	ed87 7a17 	vstr	s14, [r7, #92]	; 0x5c
 800c42a:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60

    // Apply feedback to gyroscope
    const FusionVector adjustedHalfGyroscope = FusionVectorAdd(halfGyroscope, FusionVectorMultiplyScalar(FusionVectorAdd(halfAccelerometerFeedback, halfMagnetometerFeedback), ahrs->rampedGain));
 800c42e:	ed97 5a1c 	vldr	s10, [r7, #112]	; 0x70
 800c432:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 800c436:	ed97 6a1e 	vldr	s12, [r7, #120]	; 0x78
 800c43a:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 800c43e:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 800c442:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 800c446:	eef0 1a45 	vmov.f32	s3, s10
 800c44a:	eeb0 2a65 	vmov.f32	s4, s11
 800c44e:	eef0 2a46 	vmov.f32	s5, s12
 800c452:	eeb0 0a66 	vmov.f32	s0, s13
 800c456:	eef0 0a47 	vmov.f32	s1, s14
 800c45a:	eeb0 1a67 	vmov.f32	s2, s15
 800c45e:	f7fe ff9d 	bl	800b39c <FusionVectorAdd>
 800c462:	eef0 6a40 	vmov.f32	s13, s0
 800c466:	eeb0 7a60 	vmov.f32	s14, s1
 800c46a:	eef0 7a41 	vmov.f32	s15, s2
 800c46e:	edc7 6a31 	vstr	s13, [r7, #196]	; 0xc4
 800c472:	ed87 7a32 	vstr	s14, [r7, #200]	; 0xc8
 800c476:	edc7 7a33 	vstr	s15, [r7, #204]	; 0xcc
 800c47a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c47c:	ed93 6a0e 	vldr	s12, [r3, #56]	; 0x38
 800c480:	edd7 6a31 	vldr	s13, [r7, #196]	; 0xc4
 800c484:	ed97 7a32 	vldr	s14, [r7, #200]	; 0xc8
 800c488:	edd7 7a33 	vldr	s15, [r7, #204]	; 0xcc
 800c48c:	eef0 1a46 	vmov.f32	s3, s12
 800c490:	eeb0 0a66 	vmov.f32	s0, s13
 800c494:	eef0 0a47 	vmov.f32	s1, s14
 800c498:	eeb0 1a67 	vmov.f32	s2, s15
 800c49c:	f7fe ffec 	bl	800b478 <FusionVectorMultiplyScalar>
 800c4a0:	eef0 6a40 	vmov.f32	s13, s0
 800c4a4:	eeb0 7a60 	vmov.f32	s14, s1
 800c4a8:	eef0 7a41 	vmov.f32	s15, s2
 800c4ac:	edc7 6a34 	vstr	s13, [r7, #208]	; 0xd0
 800c4b0:	ed87 7a35 	vstr	s14, [r7, #212]	; 0xd4
 800c4b4:	edc7 7a36 	vstr	s15, [r7, #216]	; 0xd8
 800c4b8:	ed97 5a34 	vldr	s10, [r7, #208]	; 0xd0
 800c4bc:	edd7 5a35 	vldr	s11, [r7, #212]	; 0xd4
 800c4c0:	ed97 6a36 	vldr	s12, [r7, #216]	; 0xd8
 800c4c4:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 800c4c8:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800c4cc:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800c4d0:	eef0 1a45 	vmov.f32	s3, s10
 800c4d4:	eeb0 2a65 	vmov.f32	s4, s11
 800c4d8:	eef0 2a46 	vmov.f32	s5, s12
 800c4dc:	eeb0 0a66 	vmov.f32	s0, s13
 800c4e0:	eef0 0a47 	vmov.f32	s1, s14
 800c4e4:	eeb0 1a67 	vmov.f32	s2, s15
 800c4e8:	f7fe ff58 	bl	800b39c <FusionVectorAdd>
 800c4ec:	eef0 6a40 	vmov.f32	s13, s0
 800c4f0:	eeb0 7a60 	vmov.f32	s14, s1
 800c4f4:	eef0 7a41 	vmov.f32	s15, s2
 800c4f8:	edc7 6a13 	vstr	s13, [r7, #76]	; 0x4c
 800c4fc:	ed87 7a14 	vstr	s14, [r7, #80]	; 0x50
 800c500:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

    // Integrate rate of change of quaternion
    ahrs->quaternion = FusionQuaternionAdd(ahrs->quaternion, FusionQuaternionMultiplyVector(ahrs->quaternion, FusionVectorMultiplyScalar(adjustedHalfGyroscope, deltaTime)));
 800c504:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 800c508:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800c50c:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800c510:	edd7 1a01 	vldr	s3, [r7, #4]
 800c514:	eeb0 0a66 	vmov.f32	s0, s13
 800c518:	eef0 0a47 	vmov.f32	s1, s14
 800c51c:	eeb0 1a67 	vmov.f32	s2, s15
 800c520:	f7fe ffaa 	bl	800b478 <FusionVectorMultiplyScalar>
 800c524:	eef0 6a40 	vmov.f32	s13, s0
 800c528:	eeb0 7a60 	vmov.f32	s14, s1
 800c52c:	eef0 7a41 	vmov.f32	s15, s2
 800c530:	edc7 6a37 	vstr	s13, [r7, #220]	; 0xdc
 800c534:	ed87 7a38 	vstr	s14, [r7, #224]	; 0xe0
 800c538:	edc7 7a39 	vstr	s15, [r7, #228]	; 0xe4
 800c53c:	edd7 4a37 	vldr	s9, [r7, #220]	; 0xdc
 800c540:	ed97 5a38 	vldr	s10, [r7, #224]	; 0xe0
 800c544:	edd7 5a39 	vldr	s11, [r7, #228]	; 0xe4
 800c548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c54a:	ed93 6a06 	vldr	s12, [r3, #24]
 800c54e:	edd3 6a07 	vldr	s13, [r3, #28]
 800c552:	ed93 7a08 	vldr	s14, [r3, #32]
 800c556:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800c55a:	eeb0 2a64 	vmov.f32	s4, s9
 800c55e:	eef0 2a45 	vmov.f32	s5, s10
 800c562:	eeb0 3a65 	vmov.f32	s6, s11
 800c566:	eeb0 0a46 	vmov.f32	s0, s12
 800c56a:	eef0 0a66 	vmov.f32	s1, s13
 800c56e:	eeb0 1a47 	vmov.f32	s2, s14
 800c572:	eef0 1a67 	vmov.f32	s3, s15
 800c576:	f7ff fa8e 	bl	800ba96 <FusionQuaternionMultiplyVector>
 800c57a:	eeb0 6a40 	vmov.f32	s12, s0
 800c57e:	eef0 6a60 	vmov.f32	s13, s1
 800c582:	eeb0 7a41 	vmov.f32	s14, s2
 800c586:	eef0 7a61 	vmov.f32	s15, s3
 800c58a:	ed87 6a3a 	vstr	s12, [r7, #232]	; 0xe8
 800c58e:	edc7 6a3b 	vstr	s13, [r7, #236]	; 0xec
 800c592:	ed87 7a3c 	vstr	s14, [r7, #240]	; 0xf0
 800c596:	edc7 7a3d 	vstr	s15, [r7, #244]	; 0xf4
 800c59a:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 800c59c:	ed97 4a3a 	vldr	s8, [r7, #232]	; 0xe8
 800c5a0:	edd7 4a3b 	vldr	s9, [r7, #236]	; 0xec
 800c5a4:	ed97 5a3c 	vldr	s10, [r7, #240]	; 0xf0
 800c5a8:	edd7 5a3d 	vldr	s11, [r7, #244]	; 0xf4
 800c5ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5ae:	ed93 6a06 	vldr	s12, [r3, #24]
 800c5b2:	edd3 6a07 	vldr	s13, [r3, #28]
 800c5b6:	ed93 7a08 	vldr	s14, [r3, #32]
 800c5ba:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800c5be:	eeb0 2a44 	vmov.f32	s4, s8
 800c5c2:	eef0 2a64 	vmov.f32	s5, s9
 800c5c6:	eeb0 3a45 	vmov.f32	s6, s10
 800c5ca:	eef0 3a65 	vmov.f32	s7, s11
 800c5ce:	eeb0 0a46 	vmov.f32	s0, s12
 800c5d2:	eef0 0a66 	vmov.f32	s1, s13
 800c5d6:	eeb0 1a47 	vmov.f32	s2, s14
 800c5da:	eef0 1a67 	vmov.f32	s3, s15
 800c5de:	f7ff f936 	bl	800b84e <FusionQuaternionAdd>
 800c5e2:	eeb0 6a40 	vmov.f32	s12, s0
 800c5e6:	eef0 6a60 	vmov.f32	s13, s1
 800c5ea:	eeb0 7a41 	vmov.f32	s14, s2
 800c5ee:	eef0 7a61 	vmov.f32	s15, s3
 800c5f2:	ed84 6a06 	vstr	s12, [r4, #24]
 800c5f6:	edc4 6a07 	vstr	s13, [r4, #28]
 800c5fa:	ed84 7a08 	vstr	s14, [r4, #32]
 800c5fe:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24

    // Normalise quaternion
    ahrs->quaternion = FusionQuaternionNormalise(ahrs->quaternion);
 800c602:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 800c604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c606:	ed93 6a06 	vldr	s12, [r3, #24]
 800c60a:	edd3 6a07 	vldr	s13, [r3, #28]
 800c60e:	ed93 7a08 	vldr	s14, [r3, #32]
 800c612:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800c616:	eeb0 0a46 	vmov.f32	s0, s12
 800c61a:	eef0 0a66 	vmov.f32	s1, s13
 800c61e:	eeb0 1a47 	vmov.f32	s2, s14
 800c622:	eef0 1a67 	vmov.f32	s3, s15
 800c626:	f7ff fad6 	bl	800bbd6 <FusionQuaternionNormalise>
 800c62a:	eeb0 6a40 	vmov.f32	s12, s0
 800c62e:	eef0 6a60 	vmov.f32	s13, s1
 800c632:	eeb0 7a41 	vmov.f32	s14, s2
 800c636:	eef0 7a61 	vmov.f32	s15, s3
 800c63a:	ed84 6a06 	vstr	s12, [r4, #24]
 800c63e:	edc4 6a07 	vstr	s13, [r4, #28]
 800c642:	ed84 7a08 	vstr	s14, [r4, #32]
 800c646:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
#undef Q
}
 800c64a:	bf00      	nop
 800c64c:	37fc      	adds	r7, #252	; 0xfc
 800c64e:	46bd      	mov	sp, r7
 800c650:	bd90      	pop	{r4, r7, pc}

0800c652 <HalfGravity>:
/**
 * @brief Returns the direction of gravity scaled by 0.5.
 * @param ahrs AHRS algorithm structure.
 * @return Direction of gravity scaled by 0.5.
 */
static inline FusionVector HalfGravity(const FusionAhrs *const ahrs) {
 800c652:	b480      	push	{r7}
 800c654:	b093      	sub	sp, #76	; 0x4c
 800c656:	af00      	add	r7, sp, #0
 800c658:	6178      	str	r0, [r7, #20]
#define Q ahrs->quaternion.element
    switch (ahrs->settings.convention) {
 800c65a:	697b      	ldr	r3, [r7, #20]
 800c65c:	781b      	ldrb	r3, [r3, #0]
 800c65e:	2b01      	cmp	r3, #1
 800c660:	dc02      	bgt.n	800c668 <HalfGravity+0x16>
 800c662:	2b00      	cmp	r3, #0
 800c664:	da03      	bge.n	800c66e <HalfGravity+0x1c>
 800c666:	e094      	b.n	800c792 <HalfGravity+0x140>
 800c668:	2b02      	cmp	r3, #2
 800c66a:	d048      	beq.n	800c6fe <HalfGravity+0xac>
 800c66c:	e091      	b.n	800c792 <HalfGravity+0x140>
        case FusionConventionNwu:
        case FusionConventionEnu: {
            const FusionVector halfGravity = {.axis = {
                    .x = Q.x * Q.z - Q.w * Q.y,
 800c66e:	697b      	ldr	r3, [r7, #20]
 800c670:	ed93 7a07 	vldr	s14, [r3, #28]
 800c674:	697b      	ldr	r3, [r7, #20]
 800c676:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800c67a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c67e:	697b      	ldr	r3, [r7, #20]
 800c680:	edd3 6a06 	vldr	s13, [r3, #24]
 800c684:	697b      	ldr	r3, [r7, #20]
 800c686:	edd3 7a08 	vldr	s15, [r3, #32]
 800c68a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c68e:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfGravity = {.axis = {
 800c692:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                    .y = Q.y * Q.z + Q.w * Q.x,
 800c696:	697b      	ldr	r3, [r7, #20]
 800c698:	ed93 7a08 	vldr	s14, [r3, #32]
 800c69c:	697b      	ldr	r3, [r7, #20]
 800c69e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800c6a2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c6a6:	697b      	ldr	r3, [r7, #20]
 800c6a8:	edd3 6a06 	vldr	s13, [r3, #24]
 800c6ac:	697b      	ldr	r3, [r7, #20]
 800c6ae:	edd3 7a07 	vldr	s15, [r3, #28]
 800c6b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c6b6:	ee77 7a27 	vadd.f32	s15, s14, s15
            const FusionVector halfGravity = {.axis = {
 800c6ba:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
                    .z = Q.w * Q.w - 0.5f + Q.z * Q.z,
 800c6be:	697b      	ldr	r3, [r7, #20]
 800c6c0:	ed93 7a06 	vldr	s14, [r3, #24]
 800c6c4:	697b      	ldr	r3, [r7, #20]
 800c6c6:	edd3 7a06 	vldr	s15, [r3, #24]
 800c6ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c6ce:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800c6d2:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800c6d6:	697b      	ldr	r3, [r7, #20]
 800c6d8:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 800c6dc:	697b      	ldr	r3, [r7, #20]
 800c6de:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800c6e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c6e6:	ee77 7a27 	vadd.f32	s15, s14, s15
            const FusionVector halfGravity = {.axis = {
 800c6ea:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            }}; // third column of transposed rotation matrix scaled by 0.5
            return halfGravity;
 800c6ee:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800c6f2:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800c6f6:	ca07      	ldmia	r2, {r0, r1, r2}
 800c6f8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800c6fc:	e052      	b.n	800c7a4 <HalfGravity+0x152>
        }
        case FusionConventionNed: {
            const FusionVector halfGravity = {.axis = {
                    .x = Q.w * Q.y - Q.x * Q.z,
 800c6fe:	697b      	ldr	r3, [r7, #20]
 800c700:	ed93 7a06 	vldr	s14, [r3, #24]
 800c704:	697b      	ldr	r3, [r7, #20]
 800c706:	edd3 7a08 	vldr	s15, [r3, #32]
 800c70a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c70e:	697b      	ldr	r3, [r7, #20]
 800c710:	edd3 6a07 	vldr	s13, [r3, #28]
 800c714:	697b      	ldr	r3, [r7, #20]
 800c716:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800c71a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c71e:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfGravity = {.axis = {
 800c722:	edc7 7a06 	vstr	s15, [r7, #24]
                    .y = -1.0f * (Q.y * Q.z + Q.w * Q.x),
 800c726:	697b      	ldr	r3, [r7, #20]
 800c728:	ed93 7a08 	vldr	s14, [r3, #32]
 800c72c:	697b      	ldr	r3, [r7, #20]
 800c72e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800c732:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c736:	697b      	ldr	r3, [r7, #20]
 800c738:	edd3 6a06 	vldr	s13, [r3, #24]
 800c73c:	697b      	ldr	r3, [r7, #20]
 800c73e:	edd3 7a07 	vldr	s15, [r3, #28]
 800c742:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c746:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c74a:	eef1 7a67 	vneg.f32	s15, s15
            const FusionVector halfGravity = {.axis = {
 800c74e:	edc7 7a07 	vstr	s15, [r7, #28]
                    .z = 0.5f - Q.w * Q.w - Q.z * Q.z,
 800c752:	697b      	ldr	r3, [r7, #20]
 800c754:	ed93 7a06 	vldr	s14, [r3, #24]
 800c758:	697b      	ldr	r3, [r7, #20]
 800c75a:	edd3 7a06 	vldr	s15, [r3, #24]
 800c75e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c762:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800c766:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c76a:	697b      	ldr	r3, [r7, #20]
 800c76c:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 800c770:	697b      	ldr	r3, [r7, #20]
 800c772:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800c776:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c77a:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfGravity = {.axis = {
 800c77e:	edc7 7a08 	vstr	s15, [r7, #32]
            }}; // third column of transposed rotation matrix scaled by -0.5
            return halfGravity;
 800c782:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800c786:	f107 0218 	add.w	r2, r7, #24
 800c78a:	ca07      	ldmia	r2, {r0, r1, r2}
 800c78c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800c790:	e008      	b.n	800c7a4 <HalfGravity+0x152>
        }
    }
    return FUSION_VECTOR_ZERO; // avoid compiler warning
 800c792:	f04f 0300 	mov.w	r3, #0
 800c796:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c798:	f04f 0300 	mov.w	r3, #0
 800c79c:	643b      	str	r3, [r7, #64]	; 0x40
 800c79e:	f04f 0300 	mov.w	r3, #0
 800c7a2:	647b      	str	r3, [r7, #68]	; 0x44
#undef Q
}
 800c7a4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c7a6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c7a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c7aa:	ee06 1a90 	vmov	s13, r1
 800c7ae:	ee07 2a10 	vmov	s14, r2
 800c7b2:	ee07 3a90 	vmov	s15, r3
 800c7b6:	eeb0 0a66 	vmov.f32	s0, s13
 800c7ba:	eef0 0a47 	vmov.f32	s1, s14
 800c7be:	eeb0 1a67 	vmov.f32	s2, s15
 800c7c2:	374c      	adds	r7, #76	; 0x4c
 800c7c4:	46bd      	mov	sp, r7
 800c7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ca:	4770      	bx	lr

0800c7cc <HalfMagnetic>:
/**
 * @brief Returns the direction of the magnetic field scaled by 0.5.
 * @param ahrs AHRS algorithm structure.
 * @return Direction of the magnetic field scaled by 0.5.
 */
static inline FusionVector HalfMagnetic(const FusionAhrs *const ahrs) {
 800c7cc:	b480      	push	{r7}
 800c7ce:	b097      	sub	sp, #92	; 0x5c
 800c7d0:	af00      	add	r7, sp, #0
 800c7d2:	6178      	str	r0, [r7, #20]
#define Q ahrs->quaternion.element
    switch (ahrs->settings.convention) {
 800c7d4:	697b      	ldr	r3, [r7, #20]
 800c7d6:	781b      	ldrb	r3, [r3, #0]
 800c7d8:	2b02      	cmp	r3, #2
 800c7da:	f000 809a 	beq.w	800c912 <HalfMagnetic+0x146>
 800c7de:	2b02      	cmp	r3, #2
 800c7e0:	f300 80e1 	bgt.w	800c9a6 <HalfMagnetic+0x1da>
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d002      	beq.n	800c7ee <HalfMagnetic+0x22>
 800c7e8:	2b01      	cmp	r3, #1
 800c7ea:	d048      	beq.n	800c87e <HalfMagnetic+0xb2>
 800c7ec:	e0db      	b.n	800c9a6 <HalfMagnetic+0x1da>
        case FusionConventionNwu: {
            const FusionVector halfMagnetic = {.axis = {
                    .x = Q.x * Q.y + Q.w * Q.z,
 800c7ee:	697b      	ldr	r3, [r7, #20]
 800c7f0:	ed93 7a07 	vldr	s14, [r3, #28]
 800c7f4:	697b      	ldr	r3, [r7, #20]
 800c7f6:	edd3 7a08 	vldr	s15, [r3, #32]
 800c7fa:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c7fe:	697b      	ldr	r3, [r7, #20]
 800c800:	edd3 6a06 	vldr	s13, [r3, #24]
 800c804:	697b      	ldr	r3, [r7, #20]
 800c806:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800c80a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c80e:	ee77 7a27 	vadd.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 800c812:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
                    .y = Q.w * Q.w - 0.5f + Q.y * Q.y,
 800c816:	697b      	ldr	r3, [r7, #20]
 800c818:	ed93 7a06 	vldr	s14, [r3, #24]
 800c81c:	697b      	ldr	r3, [r7, #20]
 800c81e:	edd3 7a06 	vldr	s15, [r3, #24]
 800c822:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c826:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800c82a:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800c82e:	697b      	ldr	r3, [r7, #20]
 800c830:	edd3 6a08 	vldr	s13, [r3, #32]
 800c834:	697b      	ldr	r3, [r7, #20]
 800c836:	edd3 7a08 	vldr	s15, [r3, #32]
 800c83a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c83e:	ee77 7a27 	vadd.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 800c842:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
                    .z = Q.y * Q.z - Q.w * Q.x,
 800c846:	697b      	ldr	r3, [r7, #20]
 800c848:	ed93 7a08 	vldr	s14, [r3, #32]
 800c84c:	697b      	ldr	r3, [r7, #20]
 800c84e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800c852:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c856:	697b      	ldr	r3, [r7, #20]
 800c858:	edd3 6a06 	vldr	s13, [r3, #24]
 800c85c:	697b      	ldr	r3, [r7, #20]
 800c85e:	edd3 7a07 	vldr	s15, [r3, #28]
 800c862:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c866:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 800c86a:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
            }}; // second column of transposed rotation matrix scaled by 0.5
            return halfMagnetic;
 800c86e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800c872:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800c876:	ca07      	ldmia	r2, {r0, r1, r2}
 800c878:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800c87c:	e09c      	b.n	800c9b8 <HalfMagnetic+0x1ec>
        }
        case FusionConventionEnu: {
            const FusionVector halfMagnetic = {.axis = {
                    .x = 0.5f - Q.w * Q.w - Q.x * Q.x,
 800c87e:	697b      	ldr	r3, [r7, #20]
 800c880:	ed93 7a06 	vldr	s14, [r3, #24]
 800c884:	697b      	ldr	r3, [r7, #20]
 800c886:	edd3 7a06 	vldr	s15, [r3, #24]
 800c88a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c88e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800c892:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c896:	697b      	ldr	r3, [r7, #20]
 800c898:	edd3 6a07 	vldr	s13, [r3, #28]
 800c89c:	697b      	ldr	r3, [r7, #20]
 800c89e:	edd3 7a07 	vldr	s15, [r3, #28]
 800c8a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c8a6:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 800c8aa:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
                    .y = Q.w * Q.z - Q.x * Q.y,
 800c8ae:	697b      	ldr	r3, [r7, #20]
 800c8b0:	ed93 7a06 	vldr	s14, [r3, #24]
 800c8b4:	697b      	ldr	r3, [r7, #20]
 800c8b6:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800c8ba:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c8be:	697b      	ldr	r3, [r7, #20]
 800c8c0:	edd3 6a07 	vldr	s13, [r3, #28]
 800c8c4:	697b      	ldr	r3, [r7, #20]
 800c8c6:	edd3 7a08 	vldr	s15, [r3, #32]
 800c8ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c8ce:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 800c8d2:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
                    .z = -1.0f * (Q.x * Q.z + Q.w * Q.y),
 800c8d6:	697b      	ldr	r3, [r7, #20]
 800c8d8:	ed93 7a07 	vldr	s14, [r3, #28]
 800c8dc:	697b      	ldr	r3, [r7, #20]
 800c8de:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800c8e2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c8e6:	697b      	ldr	r3, [r7, #20]
 800c8e8:	edd3 6a06 	vldr	s13, [r3, #24]
 800c8ec:	697b      	ldr	r3, [r7, #20]
 800c8ee:	edd3 7a08 	vldr	s15, [r3, #32]
 800c8f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c8f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c8fa:	eef1 7a67 	vneg.f32	s15, s15
            const FusionVector halfMagnetic = {.axis = {
 800c8fe:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
            }}; // first column of transposed rotation matrix scaled by -0.5
            return halfMagnetic;
 800c902:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800c906:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800c90a:	ca07      	ldmia	r2, {r0, r1, r2}
 800c90c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800c910:	e052      	b.n	800c9b8 <HalfMagnetic+0x1ec>
        }
        case FusionConventionNed: {
            const FusionVector halfMagnetic = {.axis = {
                    .x = -1.0f * (Q.x * Q.y + Q.w * Q.z),
 800c912:	697b      	ldr	r3, [r7, #20]
 800c914:	ed93 7a07 	vldr	s14, [r3, #28]
 800c918:	697b      	ldr	r3, [r7, #20]
 800c91a:	edd3 7a08 	vldr	s15, [r3, #32]
 800c91e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c922:	697b      	ldr	r3, [r7, #20]
 800c924:	edd3 6a06 	vldr	s13, [r3, #24]
 800c928:	697b      	ldr	r3, [r7, #20]
 800c92a:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800c92e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c932:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c936:	eef1 7a67 	vneg.f32	s15, s15
            const FusionVector halfMagnetic = {.axis = {
 800c93a:	edc7 7a07 	vstr	s15, [r7, #28]
                    .y = 0.5f - Q.w * Q.w - Q.y * Q.y,
 800c93e:	697b      	ldr	r3, [r7, #20]
 800c940:	ed93 7a06 	vldr	s14, [r3, #24]
 800c944:	697b      	ldr	r3, [r7, #20]
 800c946:	edd3 7a06 	vldr	s15, [r3, #24]
 800c94a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c94e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800c952:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c956:	697b      	ldr	r3, [r7, #20]
 800c958:	edd3 6a08 	vldr	s13, [r3, #32]
 800c95c:	697b      	ldr	r3, [r7, #20]
 800c95e:	edd3 7a08 	vldr	s15, [r3, #32]
 800c962:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c966:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 800c96a:	edc7 7a08 	vstr	s15, [r7, #32]
                    .z = Q.w * Q.x - Q.y * Q.z,
 800c96e:	697b      	ldr	r3, [r7, #20]
 800c970:	ed93 7a06 	vldr	s14, [r3, #24]
 800c974:	697b      	ldr	r3, [r7, #20]
 800c976:	edd3 7a07 	vldr	s15, [r3, #28]
 800c97a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c97e:	697b      	ldr	r3, [r7, #20]
 800c980:	edd3 6a08 	vldr	s13, [r3, #32]
 800c984:	697b      	ldr	r3, [r7, #20]
 800c986:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800c98a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c98e:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 800c992:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            }}; // second column of transposed rotation matrix scaled by -0.5
            return halfMagnetic;
 800c996:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800c99a:	f107 021c 	add.w	r2, r7, #28
 800c99e:	ca07      	ldmia	r2, {r0, r1, r2}
 800c9a0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800c9a4:	e008      	b.n	800c9b8 <HalfMagnetic+0x1ec>
        }
    }
    return FUSION_VECTOR_ZERO; // avoid compiler warning
 800c9a6:	f04f 0300 	mov.w	r3, #0
 800c9aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c9ac:	f04f 0300 	mov.w	r3, #0
 800c9b0:	653b      	str	r3, [r7, #80]	; 0x50
 800c9b2:	f04f 0300 	mov.w	r3, #0
 800c9b6:	657b      	str	r3, [r7, #84]	; 0x54
#undef Q
}
 800c9b8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800c9ba:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c9bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c9be:	ee06 1a90 	vmov	s13, r1
 800c9c2:	ee07 2a10 	vmov	s14, r2
 800c9c6:	ee07 3a90 	vmov	s15, r3
 800c9ca:	eeb0 0a66 	vmov.f32	s0, s13
 800c9ce:	eef0 0a47 	vmov.f32	s1, s14
 800c9d2:	eeb0 1a67 	vmov.f32	s2, s15
 800c9d6:	375c      	adds	r7, #92	; 0x5c
 800c9d8:	46bd      	mov	sp, r7
 800c9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9de:	4770      	bx	lr

0800c9e0 <Feedback>:
 * @brief Returns the feedback.
 * @param sensor Sensor.
 * @param reference Reference.
 * @return Feedback.
 */
static inline FusionVector Feedback(const FusionVector sensor, const FusionVector reference) {
 800c9e0:	b580      	push	{r7, lr}
 800c9e2:	b090      	sub	sp, #64	; 0x40
 800c9e4:	af00      	add	r7, sp, #0
 800c9e6:	eeb0 5a40 	vmov.f32	s10, s0
 800c9ea:	eef0 5a60 	vmov.f32	s11, s1
 800c9ee:	eeb0 6a41 	vmov.f32	s12, s2
 800c9f2:	eef0 6a61 	vmov.f32	s13, s3
 800c9f6:	eeb0 7a42 	vmov.f32	s14, s4
 800c9fa:	eef0 7a62 	vmov.f32	s15, s5
 800c9fe:	ed87 5a07 	vstr	s10, [r7, #28]
 800ca02:	edc7 5a08 	vstr	s11, [r7, #32]
 800ca06:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 800ca0a:	edc7 6a04 	vstr	s13, [r7, #16]
 800ca0e:	ed87 7a05 	vstr	s14, [r7, #20]
 800ca12:	edc7 7a06 	vstr	s15, [r7, #24]
    if (FusionVectorDotProduct(sensor, reference) < 0.0f) { // if error is >90 degrees
 800ca16:	ed97 5a04 	vldr	s10, [r7, #16]
 800ca1a:	edd7 5a05 	vldr	s11, [r7, #20]
 800ca1e:	ed97 6a06 	vldr	s12, [r7, #24]
 800ca22:	edd7 6a07 	vldr	s13, [r7, #28]
 800ca26:	ed97 7a08 	vldr	s14, [r7, #32]
 800ca2a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800ca2e:	eef0 1a45 	vmov.f32	s3, s10
 800ca32:	eeb0 2a65 	vmov.f32	s4, s11
 800ca36:	eef0 2a46 	vmov.f32	s5, s12
 800ca3a:	eeb0 0a66 	vmov.f32	s0, s13
 800ca3e:	eef0 0a47 	vmov.f32	s1, s14
 800ca42:	eeb0 1a67 	vmov.f32	s2, s15
 800ca46:	f7fe fe0f 	bl	800b668 <FusionVectorDotProduct>
 800ca4a:	eef0 7a40 	vmov.f32	s15, s0
 800ca4e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800ca52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca56:	d540      	bpl.n	800cada <Feedback+0xfa>
        return FusionVectorNormalise(FusionVectorCrossProduct(sensor, reference));
 800ca58:	ed97 5a04 	vldr	s10, [r7, #16]
 800ca5c:	edd7 5a05 	vldr	s11, [r7, #20]
 800ca60:	ed97 6a06 	vldr	s12, [r7, #24]
 800ca64:	edd7 6a07 	vldr	s13, [r7, #28]
 800ca68:	ed97 7a08 	vldr	s14, [r7, #32]
 800ca6c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800ca70:	eef0 1a45 	vmov.f32	s3, s10
 800ca74:	eeb0 2a65 	vmov.f32	s4, s11
 800ca78:	eef0 2a46 	vmov.f32	s5, s12
 800ca7c:	eeb0 0a66 	vmov.f32	s0, s13
 800ca80:	eef0 0a47 	vmov.f32	s1, s14
 800ca84:	eeb0 1a67 	vmov.f32	s2, s15
 800ca88:	f7fe fd88 	bl	800b59c <FusionVectorCrossProduct>
 800ca8c:	eef0 6a40 	vmov.f32	s13, s0
 800ca90:	eeb0 7a60 	vmov.f32	s14, s1
 800ca94:	eef0 7a41 	vmov.f32	s15, s2
 800ca98:	edc7 6a0d 	vstr	s13, [r7, #52]	; 0x34
 800ca9c:	ed87 7a0e 	vstr	s14, [r7, #56]	; 0x38
 800caa0:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
 800caa4:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 800caa8:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800caac:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800cab0:	eeb0 0a66 	vmov.f32	s0, s13
 800cab4:	eef0 0a47 	vmov.f32	s1, s14
 800cab8:	eeb0 1a67 	vmov.f32	s2, s15
 800cabc:	f7fe fe74 	bl	800b7a8 <FusionVectorNormalise>
 800cac0:	eef0 6a40 	vmov.f32	s13, s0
 800cac4:	eeb0 7a60 	vmov.f32	s14, s1
 800cac8:	eef0 7a41 	vmov.f32	s15, s2
 800cacc:	edc7 6a0a 	vstr	s13, [r7, #40]	; 0x28
 800cad0:	ed87 7a0b 	vstr	s14, [r7, #44]	; 0x2c
 800cad4:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 800cad8:	e025      	b.n	800cb26 <Feedback+0x146>
    }
    return FusionVectorCrossProduct(sensor, reference);
 800cada:	ed97 5a04 	vldr	s10, [r7, #16]
 800cade:	edd7 5a05 	vldr	s11, [r7, #20]
 800cae2:	ed97 6a06 	vldr	s12, [r7, #24]
 800cae6:	edd7 6a07 	vldr	s13, [r7, #28]
 800caea:	ed97 7a08 	vldr	s14, [r7, #32]
 800caee:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800caf2:	eef0 1a45 	vmov.f32	s3, s10
 800caf6:	eeb0 2a65 	vmov.f32	s4, s11
 800cafa:	eef0 2a46 	vmov.f32	s5, s12
 800cafe:	eeb0 0a66 	vmov.f32	s0, s13
 800cb02:	eef0 0a47 	vmov.f32	s1, s14
 800cb06:	eeb0 1a67 	vmov.f32	s2, s15
 800cb0a:	f7fe fd47 	bl	800b59c <FusionVectorCrossProduct>
 800cb0e:	eef0 6a40 	vmov.f32	s13, s0
 800cb12:	eeb0 7a60 	vmov.f32	s14, s1
 800cb16:	eef0 7a41 	vmov.f32	s15, s2
 800cb1a:	edc7 6a0a 	vstr	s13, [r7, #40]	; 0x28
 800cb1e:	ed87 7a0b 	vstr	s14, [r7, #44]	; 0x2c
 800cb22:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
}
 800cb26:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cb28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cb2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb2c:	ee06 1a90 	vmov	s13, r1
 800cb30:	ee07 2a10 	vmov	s14, r2
 800cb34:	ee07 3a90 	vmov	s15, r3
 800cb38:	eeb0 0a66 	vmov.f32	s0, s13
 800cb3c:	eef0 0a47 	vmov.f32	s1, s14
 800cb40:	eeb0 1a67 	vmov.f32	s2, s15
 800cb44:	3740      	adds	r7, #64	; 0x40
 800cb46:	46bd      	mov	sp, r7
 800cb48:	bd80      	pop	{r7, pc}

0800cb4a <Clamp>:
 * @param value Value.
 * @param min Minimum value.
 * @param max Maximum value.
 * @return Value limited to maximum and minimum.
 */
static inline int Clamp(const int value, const int min, const int max) {
 800cb4a:	b480      	push	{r7}
 800cb4c:	b085      	sub	sp, #20
 800cb4e:	af00      	add	r7, sp, #0
 800cb50:	60f8      	str	r0, [r7, #12]
 800cb52:	60b9      	str	r1, [r7, #8]
 800cb54:	607a      	str	r2, [r7, #4]
    if (value < min) {
 800cb56:	68fa      	ldr	r2, [r7, #12]
 800cb58:	68bb      	ldr	r3, [r7, #8]
 800cb5a:	429a      	cmp	r2, r3
 800cb5c:	da01      	bge.n	800cb62 <Clamp+0x18>
        return min;
 800cb5e:	68bb      	ldr	r3, [r7, #8]
 800cb60:	e006      	b.n	800cb70 <Clamp+0x26>
    }
    if (value > max) {
 800cb62:	68fa      	ldr	r2, [r7, #12]
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	429a      	cmp	r2, r3
 800cb68:	dd01      	ble.n	800cb6e <Clamp+0x24>
        return max;
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	e000      	b.n	800cb70 <Clamp+0x26>
    }
    return value;
 800cb6e:	68fb      	ldr	r3, [r7, #12]
}
 800cb70:	4618      	mov	r0, r3
 800cb72:	3714      	adds	r7, #20
 800cb74:	46bd      	mov	sp, r7
 800cb76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb7a:	4770      	bx	lr

0800cb7c <FusionAhrsUpdateNoMagnetometer>:
 * @param ahrs AHRS algorithm structure.
 * @param gyroscope Gyroscope measurement in degrees per second.
 * @param accelerometer Accelerometer measurement in g.
 * @param deltaTime Delta time in seconds.
 */
void FusionAhrsUpdateNoMagnetometer(FusionAhrs *const ahrs, const FusionVector gyroscope, const FusionVector accelerometer, const float deltaTime) {
 800cb7c:	b580      	push	{r7, lr}
 800cb7e:	b08c      	sub	sp, #48	; 0x30
 800cb80:	af00      	add	r7, sp, #0
 800cb82:	61f8      	str	r0, [r7, #28]
 800cb84:	eeb0 5a40 	vmov.f32	s10, s0
 800cb88:	eef0 5a60 	vmov.f32	s11, s1
 800cb8c:	eeb0 6a41 	vmov.f32	s12, s2
 800cb90:	eef0 6a61 	vmov.f32	s13, s3
 800cb94:	eeb0 7a42 	vmov.f32	s14, s4
 800cb98:	eef0 7a62 	vmov.f32	s15, s5
 800cb9c:	ed87 3a00 	vstr	s6, [r7]
 800cba0:	ed87 5a04 	vstr	s10, [r7, #16]
 800cba4:	edc7 5a05 	vstr	s11, [r7, #20]
 800cba8:	ed87 6a06 	vstr	s12, [r7, #24]
 800cbac:	edc7 6a01 	vstr	s13, [r7, #4]
 800cbb0:	ed87 7a02 	vstr	s14, [r7, #8]
 800cbb4:	edc7 7a03 	vstr	s15, [r7, #12]

    // Update AHRS algorithm
    FusionAhrsUpdate(ahrs, gyroscope, accelerometer, FUSION_VECTOR_ZERO, deltaTime);
 800cbb8:	f04f 0300 	mov.w	r3, #0
 800cbbc:	627b      	str	r3, [r7, #36]	; 0x24
 800cbbe:	f04f 0300 	mov.w	r3, #0
 800cbc2:	62bb      	str	r3, [r7, #40]	; 0x28
 800cbc4:	f04f 0300 	mov.w	r3, #0
 800cbc8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cbca:	ed97 3a09 	vldr	s6, [r7, #36]	; 0x24
 800cbce:	edd7 3a0a 	vldr	s7, [r7, #40]	; 0x28
 800cbd2:	ed97 4a0b 	vldr	s8, [r7, #44]	; 0x2c
 800cbd6:	ed97 5a01 	vldr	s10, [r7, #4]
 800cbda:	edd7 5a02 	vldr	s11, [r7, #8]
 800cbde:	ed97 6a03 	vldr	s12, [r7, #12]
 800cbe2:	edd7 6a04 	vldr	s13, [r7, #16]
 800cbe6:	ed97 7a05 	vldr	s14, [r7, #20]
 800cbea:	edd7 7a06 	vldr	s15, [r7, #24]
 800cbee:	edd7 4a00 	vldr	s9, [r7]
 800cbf2:	eef0 1a45 	vmov.f32	s3, s10
 800cbf6:	eeb0 2a65 	vmov.f32	s4, s11
 800cbfa:	eef0 2a46 	vmov.f32	s5, s12
 800cbfe:	eeb0 0a66 	vmov.f32	s0, s13
 800cc02:	eef0 0a47 	vmov.f32	s1, s14
 800cc06:	eeb0 1a67 	vmov.f32	s2, s15
 800cc0a:	69f8      	ldr	r0, [r7, #28]
 800cc0c:	f7ff f992 	bl	800bf34 <FusionAhrsUpdate>

    // Zero heading during initialisation
    if (ahrs->initialising == true) {
 800cc10:	69fb      	ldr	r3, [r7, #28]
 800cc12:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d004      	beq.n	800cc24 <FusionAhrsUpdateNoMagnetometer+0xa8>
        FusionAhrsSetHeading(ahrs, 0.0f);
 800cc1a:	ed9f 0a04 	vldr	s0, [pc, #16]	; 800cc2c <FusionAhrsUpdateNoMagnetometer+0xb0>
 800cc1e:	69f8      	ldr	r0, [r7, #28]
 800cc20:	f000 f829 	bl	800cc76 <FusionAhrsSetHeading>
    }
}
 800cc24:	bf00      	nop
 800cc26:	3730      	adds	r7, #48	; 0x30
 800cc28:	46bd      	mov	sp, r7
 800cc2a:	bd80      	pop	{r7, pc}
 800cc2c:	00000000 	.word	0x00000000

0800cc30 <FusionAhrsGetQuaternion>:
/**
 * @brief Returns the quaternion describing the sensor relative to the Earth.
 * @param ahrs AHRS algorithm structure.
 * @return Quaternion describing the sensor relative to the Earth.
 */
FusionQuaternion FusionAhrsGetQuaternion(const FusionAhrs *const ahrs) {
 800cc30:	b490      	push	{r4, r7}
 800cc32:	b08a      	sub	sp, #40	; 0x28
 800cc34:	af00      	add	r7, sp, #0
 800cc36:	6178      	str	r0, [r7, #20]
    return ahrs->quaternion;
 800cc38:	697b      	ldr	r3, [r7, #20]
 800cc3a:	f107 0418 	add.w	r4, r7, #24
 800cc3e:	3318      	adds	r3, #24
 800cc40:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800cc42:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800cc46:	69b8      	ldr	r0, [r7, #24]
 800cc48:	69f9      	ldr	r1, [r7, #28]
 800cc4a:	6a3a      	ldr	r2, [r7, #32]
 800cc4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc4e:	ee06 0a10 	vmov	s12, r0
 800cc52:	ee06 1a90 	vmov	s13, r1
 800cc56:	ee07 2a10 	vmov	s14, r2
 800cc5a:	ee07 3a90 	vmov	s15, r3
}
 800cc5e:	eeb0 0a46 	vmov.f32	s0, s12
 800cc62:	eef0 0a66 	vmov.f32	s1, s13
 800cc66:	eeb0 1a47 	vmov.f32	s2, s14
 800cc6a:	eef0 1a67 	vmov.f32	s3, s15
 800cc6e:	3728      	adds	r7, #40	; 0x28
 800cc70:	46bd      	mov	sp, r7
 800cc72:	bc90      	pop	{r4, r7}
 800cc74:	4770      	bx	lr

0800cc76 <FusionAhrsSetHeading>:
 * algorithm.  This function can be used to reset drift in heading when the AHRS
 * algorithm is being used without a magnetometer.
 * @param ahrs AHRS algorithm structure.
 * @param heading Heading angle in degrees.
 */
void FusionAhrsSetHeading(FusionAhrs *const ahrs, const float heading) {
 800cc76:	b590      	push	{r4, r7, lr}
 800cc78:	b089      	sub	sp, #36	; 0x24
 800cc7a:	af00      	add	r7, sp, #0
 800cc7c:	6078      	str	r0, [r7, #4]
 800cc7e:	ed87 0a00 	vstr	s0, [r7]
#define Q ahrs->quaternion.element
    const float yaw = atan2f(Q.w * Q.z + Q.x * Q.y, 0.5f - Q.y * Q.y - Q.z * Q.z);
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	ed93 7a06 	vldr	s14, [r3, #24]
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800cc8e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	edd3 6a07 	vldr	s13, [r3, #28]
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	edd3 7a08 	vldr	s15, [r3, #32]
 800cc9e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800cca2:	ee37 6a27 	vadd.f32	s12, s14, s15
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	ed93 7a08 	vldr	s14, [r3, #32]
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	edd3 7a08 	vldr	s15, [r3, #32]
 800ccb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ccb6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800ccba:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800ccca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ccce:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ccd2:	eef0 0a67 	vmov.f32	s1, s15
 800ccd6:	eeb0 0a46 	vmov.f32	s0, s12
 800ccda:	f005 f8d9 	bl	8011e90 <atan2f>
 800ccde:	ed87 0a07 	vstr	s0, [r7, #28]
    const float halfYawMinusHeading = 0.5f * (yaw - FusionDegreesToRadians(heading));
 800cce2:	ed97 0a00 	vldr	s0, [r7]
 800cce6:	f7fe fae5 	bl	800b2b4 <FusionDegreesToRadians>
 800ccea:	eeb0 7a40 	vmov.f32	s14, s0
 800ccee:	edd7 7a07 	vldr	s15, [r7, #28]
 800ccf2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ccf6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800ccfa:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ccfe:	edc7 7a06 	vstr	s15, [r7, #24]
    const FusionQuaternion rotation = {.element = {
            .w = cosf(halfYawMinusHeading),
 800cd02:	ed97 0a06 	vldr	s0, [r7, #24]
 800cd06:	f004 ff9d 	bl	8011c44 <cosf>
 800cd0a:	eef0 7a40 	vmov.f32	s15, s0
    const FusionQuaternion rotation = {.element = {
 800cd0e:	edc7 7a02 	vstr	s15, [r7, #8]
 800cd12:	f04f 0300 	mov.w	r3, #0
 800cd16:	60fb      	str	r3, [r7, #12]
 800cd18:	f04f 0300 	mov.w	r3, #0
 800cd1c:	613b      	str	r3, [r7, #16]
            .x = 0.0f,
            .y = 0.0f,
            .z = -1.0f * sinf(halfYawMinusHeading),
 800cd1e:	ed97 0a06 	vldr	s0, [r7, #24]
 800cd22:	f004 ffd3 	bl	8011ccc <sinf>
 800cd26:	eef0 7a40 	vmov.f32	s15, s0
 800cd2a:	eef1 7a67 	vneg.f32	s15, s15
    const FusionQuaternion rotation = {.element = {
 800cd2e:	edc7 7a05 	vstr	s15, [r7, #20]
    }};
    ahrs->quaternion = FusionQuaternionMultiply(rotation, ahrs->quaternion);
 800cd32:	687c      	ldr	r4, [r7, #4]
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	ed93 4a06 	vldr	s8, [r3, #24]
 800cd3a:	edd3 4a07 	vldr	s9, [r3, #28]
 800cd3e:	ed93 5a08 	vldr	s10, [r3, #32]
 800cd42:	edd3 5a09 	vldr	s11, [r3, #36]	; 0x24
 800cd46:	ed97 6a02 	vldr	s12, [r7, #8]
 800cd4a:	edd7 6a03 	vldr	s13, [r7, #12]
 800cd4e:	ed97 7a04 	vldr	s14, [r7, #16]
 800cd52:	edd7 7a05 	vldr	s15, [r7, #20]
 800cd56:	eeb0 2a44 	vmov.f32	s4, s8
 800cd5a:	eef0 2a64 	vmov.f32	s5, s9
 800cd5e:	eeb0 3a45 	vmov.f32	s6, s10
 800cd62:	eef0 3a65 	vmov.f32	s7, s11
 800cd66:	eeb0 0a46 	vmov.f32	s0, s12
 800cd6a:	eef0 0a66 	vmov.f32	s1, s13
 800cd6e:	eeb0 1a47 	vmov.f32	s2, s14
 800cd72:	eef0 1a67 	vmov.f32	s3, s15
 800cd76:	f7fe fdcc 	bl	800b912 <FusionQuaternionMultiply>
 800cd7a:	eeb0 6a40 	vmov.f32	s12, s0
 800cd7e:	eef0 6a60 	vmov.f32	s13, s1
 800cd82:	eeb0 7a41 	vmov.f32	s14, s2
 800cd86:	eef0 7a61 	vmov.f32	s15, s3
 800cd8a:	ed84 6a06 	vstr	s12, [r4, #24]
 800cd8e:	edc4 6a07 	vstr	s13, [r4, #28]
 800cd92:	ed84 7a08 	vstr	s14, [r4, #32]
 800cd96:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
#undef Q
}
 800cd9a:	bf00      	nop
 800cd9c:	3724      	adds	r7, #36	; 0x24
 800cd9e:	46bd      	mov	sp, r7
 800cda0:	bd90      	pop	{r4, r7, pc}

0800cda2 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800cda2:	b480      	push	{r7}
 800cda4:	b085      	sub	sp, #20
 800cda6:	af00      	add	r7, sp, #0
 800cda8:	4603      	mov	r3, r0
 800cdaa:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800cdac:	2300      	movs	r3, #0
 800cdae:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800cdb0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800cdb4:	2b84      	cmp	r3, #132	; 0x84
 800cdb6:	d005      	beq.n	800cdc4 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800cdb8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800cdbc:	68fb      	ldr	r3, [r7, #12]
 800cdbe:	4413      	add	r3, r2
 800cdc0:	3303      	adds	r3, #3
 800cdc2:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800cdc4:	68fb      	ldr	r3, [r7, #12]
}
 800cdc6:	4618      	mov	r0, r3
 800cdc8:	3714      	adds	r7, #20
 800cdca:	46bd      	mov	sp, r7
 800cdcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdd0:	4770      	bx	lr

0800cdd2 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800cdd2:	b580      	push	{r7, lr}
 800cdd4:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800cdd6:	f000 ff1f 	bl	800dc18 <vTaskStartScheduler>
  
  return osOK;
 800cdda:	2300      	movs	r3, #0
}
 800cddc:	4618      	mov	r0, r3
 800cdde:	bd80      	pop	{r7, pc}

0800cde0 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800cde0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cde2:	b089      	sub	sp, #36	; 0x24
 800cde4:	af04      	add	r7, sp, #16
 800cde6:	6078      	str	r0, [r7, #4]
 800cde8:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	695b      	ldr	r3, [r3, #20]
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	d020      	beq.n	800ce34 <osThreadCreate+0x54>
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	699b      	ldr	r3, [r3, #24]
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d01c      	beq.n	800ce34 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	685c      	ldr	r4, [r3, #4]
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	681d      	ldr	r5, [r3, #0]
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	691e      	ldr	r6, [r3, #16]
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800ce0c:	4618      	mov	r0, r3
 800ce0e:	f7ff ffc8 	bl	800cda2 <makeFreeRtosPriority>
 800ce12:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	695b      	ldr	r3, [r3, #20]
 800ce18:	687a      	ldr	r2, [r7, #4]
 800ce1a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ce1c:	9202      	str	r2, [sp, #8]
 800ce1e:	9301      	str	r3, [sp, #4]
 800ce20:	9100      	str	r1, [sp, #0]
 800ce22:	683b      	ldr	r3, [r7, #0]
 800ce24:	4632      	mov	r2, r6
 800ce26:	4629      	mov	r1, r5
 800ce28:	4620      	mov	r0, r4
 800ce2a:	f000 fc9d 	bl	800d768 <xTaskCreateStatic>
 800ce2e:	4603      	mov	r3, r0
 800ce30:	60fb      	str	r3, [r7, #12]
 800ce32:	e01c      	b.n	800ce6e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	685c      	ldr	r4, [r3, #4]
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ce40:	b29e      	uxth	r6, r3
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800ce48:	4618      	mov	r0, r3
 800ce4a:	f7ff ffaa 	bl	800cda2 <makeFreeRtosPriority>
 800ce4e:	4602      	mov	r2, r0
 800ce50:	f107 030c 	add.w	r3, r7, #12
 800ce54:	9301      	str	r3, [sp, #4]
 800ce56:	9200      	str	r2, [sp, #0]
 800ce58:	683b      	ldr	r3, [r7, #0]
 800ce5a:	4632      	mov	r2, r6
 800ce5c:	4629      	mov	r1, r5
 800ce5e:	4620      	mov	r0, r4
 800ce60:	f000 fcdf 	bl	800d822 <xTaskCreate>
 800ce64:	4603      	mov	r3, r0
 800ce66:	2b01      	cmp	r3, #1
 800ce68:	d001      	beq.n	800ce6e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800ce6a:	2300      	movs	r3, #0
 800ce6c:	e000      	b.n	800ce70 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800ce6e:	68fb      	ldr	r3, [r7, #12]
}
 800ce70:	4618      	mov	r0, r3
 800ce72:	3714      	adds	r7, #20
 800ce74:	46bd      	mov	sp, r7
 800ce76:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ce78 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800ce78:	b580      	push	{r7, lr}
 800ce7a:	b084      	sub	sp, #16
 800ce7c:	af00      	add	r7, sp, #0
 800ce7e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800ce84:	68fb      	ldr	r3, [r7, #12]
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	d001      	beq.n	800ce8e <osDelay+0x16>
 800ce8a:	68fb      	ldr	r3, [r7, #12]
 800ce8c:	e000      	b.n	800ce90 <osDelay+0x18>
 800ce8e:	2301      	movs	r3, #1
 800ce90:	4618      	mov	r0, r3
 800ce92:	f000 fdfd 	bl	800da90 <vTaskDelay>
  
  return osOK;
 800ce96:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800ce98:	4618      	mov	r0, r3
 800ce9a:	3710      	adds	r7, #16
 800ce9c:	46bd      	mov	sp, r7
 800ce9e:	bd80      	pop	{r7, pc}

0800cea0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800cea0:	b480      	push	{r7}
 800cea2:	b083      	sub	sp, #12
 800cea4:	af00      	add	r7, sp, #0
 800cea6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	f103 0208 	add.w	r2, r3, #8
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	f04f 32ff 	mov.w	r2, #4294967295
 800ceb8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	f103 0208 	add.w	r2, r3, #8
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	f103 0208 	add.w	r2, r3, #8
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	2200      	movs	r2, #0
 800ced2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800ced4:	bf00      	nop
 800ced6:	370c      	adds	r7, #12
 800ced8:	46bd      	mov	sp, r7
 800ceda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cede:	4770      	bx	lr

0800cee0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800cee0:	b480      	push	{r7}
 800cee2:	b083      	sub	sp, #12
 800cee4:	af00      	add	r7, sp, #0
 800cee6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	2200      	movs	r2, #0
 800ceec:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800ceee:	bf00      	nop
 800cef0:	370c      	adds	r7, #12
 800cef2:	46bd      	mov	sp, r7
 800cef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cef8:	4770      	bx	lr

0800cefa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800cefa:	b480      	push	{r7}
 800cefc:	b085      	sub	sp, #20
 800cefe:	af00      	add	r7, sp, #0
 800cf00:	6078      	str	r0, [r7, #4]
 800cf02:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	685b      	ldr	r3, [r3, #4]
 800cf08:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800cf0a:	683b      	ldr	r3, [r7, #0]
 800cf0c:	68fa      	ldr	r2, [r7, #12]
 800cf0e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800cf10:	68fb      	ldr	r3, [r7, #12]
 800cf12:	689a      	ldr	r2, [r3, #8]
 800cf14:	683b      	ldr	r3, [r7, #0]
 800cf16:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800cf18:	68fb      	ldr	r3, [r7, #12]
 800cf1a:	689b      	ldr	r3, [r3, #8]
 800cf1c:	683a      	ldr	r2, [r7, #0]
 800cf1e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800cf20:	68fb      	ldr	r3, [r7, #12]
 800cf22:	683a      	ldr	r2, [r7, #0]
 800cf24:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800cf26:	683b      	ldr	r3, [r7, #0]
 800cf28:	687a      	ldr	r2, [r7, #4]
 800cf2a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	681b      	ldr	r3, [r3, #0]
 800cf30:	1c5a      	adds	r2, r3, #1
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	601a      	str	r2, [r3, #0]
}
 800cf36:	bf00      	nop
 800cf38:	3714      	adds	r7, #20
 800cf3a:	46bd      	mov	sp, r7
 800cf3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf40:	4770      	bx	lr

0800cf42 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800cf42:	b480      	push	{r7}
 800cf44:	b085      	sub	sp, #20
 800cf46:	af00      	add	r7, sp, #0
 800cf48:	6078      	str	r0, [r7, #4]
 800cf4a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800cf4c:	683b      	ldr	r3, [r7, #0]
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800cf52:	68bb      	ldr	r3, [r7, #8]
 800cf54:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf58:	d103      	bne.n	800cf62 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	691b      	ldr	r3, [r3, #16]
 800cf5e:	60fb      	str	r3, [r7, #12]
 800cf60:	e00c      	b.n	800cf7c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	3308      	adds	r3, #8
 800cf66:	60fb      	str	r3, [r7, #12]
 800cf68:	e002      	b.n	800cf70 <vListInsert+0x2e>
 800cf6a:	68fb      	ldr	r3, [r7, #12]
 800cf6c:	685b      	ldr	r3, [r3, #4]
 800cf6e:	60fb      	str	r3, [r7, #12]
 800cf70:	68fb      	ldr	r3, [r7, #12]
 800cf72:	685b      	ldr	r3, [r3, #4]
 800cf74:	681b      	ldr	r3, [r3, #0]
 800cf76:	68ba      	ldr	r2, [r7, #8]
 800cf78:	429a      	cmp	r2, r3
 800cf7a:	d2f6      	bcs.n	800cf6a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800cf7c:	68fb      	ldr	r3, [r7, #12]
 800cf7e:	685a      	ldr	r2, [r3, #4]
 800cf80:	683b      	ldr	r3, [r7, #0]
 800cf82:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800cf84:	683b      	ldr	r3, [r7, #0]
 800cf86:	685b      	ldr	r3, [r3, #4]
 800cf88:	683a      	ldr	r2, [r7, #0]
 800cf8a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800cf8c:	683b      	ldr	r3, [r7, #0]
 800cf8e:	68fa      	ldr	r2, [r7, #12]
 800cf90:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800cf92:	68fb      	ldr	r3, [r7, #12]
 800cf94:	683a      	ldr	r2, [r7, #0]
 800cf96:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800cf98:	683b      	ldr	r3, [r7, #0]
 800cf9a:	687a      	ldr	r2, [r7, #4]
 800cf9c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	681b      	ldr	r3, [r3, #0]
 800cfa2:	1c5a      	adds	r2, r3, #1
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	601a      	str	r2, [r3, #0]
}
 800cfa8:	bf00      	nop
 800cfaa:	3714      	adds	r7, #20
 800cfac:	46bd      	mov	sp, r7
 800cfae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfb2:	4770      	bx	lr

0800cfb4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800cfb4:	b480      	push	{r7}
 800cfb6:	b085      	sub	sp, #20
 800cfb8:	af00      	add	r7, sp, #0
 800cfba:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	691b      	ldr	r3, [r3, #16]
 800cfc0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	685b      	ldr	r3, [r3, #4]
 800cfc6:	687a      	ldr	r2, [r7, #4]
 800cfc8:	6892      	ldr	r2, [r2, #8]
 800cfca:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	689b      	ldr	r3, [r3, #8]
 800cfd0:	687a      	ldr	r2, [r7, #4]
 800cfd2:	6852      	ldr	r2, [r2, #4]
 800cfd4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800cfd6:	68fb      	ldr	r3, [r7, #12]
 800cfd8:	685b      	ldr	r3, [r3, #4]
 800cfda:	687a      	ldr	r2, [r7, #4]
 800cfdc:	429a      	cmp	r2, r3
 800cfde:	d103      	bne.n	800cfe8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	689a      	ldr	r2, [r3, #8]
 800cfe4:	68fb      	ldr	r3, [r7, #12]
 800cfe6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	2200      	movs	r2, #0
 800cfec:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800cfee:	68fb      	ldr	r3, [r7, #12]
 800cff0:	681b      	ldr	r3, [r3, #0]
 800cff2:	1e5a      	subs	r2, r3, #1
 800cff4:	68fb      	ldr	r3, [r7, #12]
 800cff6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800cff8:	68fb      	ldr	r3, [r7, #12]
 800cffa:	681b      	ldr	r3, [r3, #0]
}
 800cffc:	4618      	mov	r0, r3
 800cffe:	3714      	adds	r7, #20
 800d000:	46bd      	mov	sp, r7
 800d002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d006:	4770      	bx	lr

0800d008 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800d008:	b580      	push	{r7, lr}
 800d00a:	b084      	sub	sp, #16
 800d00c:	af00      	add	r7, sp, #0
 800d00e:	6078      	str	r0, [r7, #4]
 800d010:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d016:	68fb      	ldr	r3, [r7, #12]
 800d018:	2b00      	cmp	r3, #0
 800d01a:	d10a      	bne.n	800d032 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800d01c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d020:	f383 8811 	msr	BASEPRI, r3
 800d024:	f3bf 8f6f 	isb	sy
 800d028:	f3bf 8f4f 	dsb	sy
 800d02c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800d02e:	bf00      	nop
 800d030:	e7fe      	b.n	800d030 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800d032:	f001 fc27 	bl	800e884 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d036:	68fb      	ldr	r3, [r7, #12]
 800d038:	681a      	ldr	r2, [r3, #0]
 800d03a:	68fb      	ldr	r3, [r7, #12]
 800d03c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d03e:	68f9      	ldr	r1, [r7, #12]
 800d040:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d042:	fb01 f303 	mul.w	r3, r1, r3
 800d046:	441a      	add	r2, r3
 800d048:	68fb      	ldr	r3, [r7, #12]
 800d04a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d04c:	68fb      	ldr	r3, [r7, #12]
 800d04e:	2200      	movs	r2, #0
 800d050:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800d052:	68fb      	ldr	r3, [r7, #12]
 800d054:	681a      	ldr	r2, [r3, #0]
 800d056:	68fb      	ldr	r3, [r7, #12]
 800d058:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d05a:	68fb      	ldr	r3, [r7, #12]
 800d05c:	681a      	ldr	r2, [r3, #0]
 800d05e:	68fb      	ldr	r3, [r7, #12]
 800d060:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d062:	3b01      	subs	r3, #1
 800d064:	68f9      	ldr	r1, [r7, #12]
 800d066:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d068:	fb01 f303 	mul.w	r3, r1, r3
 800d06c:	441a      	add	r2, r3
 800d06e:	68fb      	ldr	r3, [r7, #12]
 800d070:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800d072:	68fb      	ldr	r3, [r7, #12]
 800d074:	22ff      	movs	r2, #255	; 0xff
 800d076:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800d07a:	68fb      	ldr	r3, [r7, #12]
 800d07c:	22ff      	movs	r2, #255	; 0xff
 800d07e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800d082:	683b      	ldr	r3, [r7, #0]
 800d084:	2b00      	cmp	r3, #0
 800d086:	d114      	bne.n	800d0b2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d088:	68fb      	ldr	r3, [r7, #12]
 800d08a:	691b      	ldr	r3, [r3, #16]
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d01a      	beq.n	800d0c6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d090:	68fb      	ldr	r3, [r7, #12]
 800d092:	3310      	adds	r3, #16
 800d094:	4618      	mov	r0, r3
 800d096:	f001 f801 	bl	800e09c <xTaskRemoveFromEventList>
 800d09a:	4603      	mov	r3, r0
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d012      	beq.n	800d0c6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800d0a0:	4b0c      	ldr	r3, [pc, #48]	; (800d0d4 <xQueueGenericReset+0xcc>)
 800d0a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d0a6:	601a      	str	r2, [r3, #0]
 800d0a8:	f3bf 8f4f 	dsb	sy
 800d0ac:	f3bf 8f6f 	isb	sy
 800d0b0:	e009      	b.n	800d0c6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800d0b2:	68fb      	ldr	r3, [r7, #12]
 800d0b4:	3310      	adds	r3, #16
 800d0b6:	4618      	mov	r0, r3
 800d0b8:	f7ff fef2 	bl	800cea0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800d0bc:	68fb      	ldr	r3, [r7, #12]
 800d0be:	3324      	adds	r3, #36	; 0x24
 800d0c0:	4618      	mov	r0, r3
 800d0c2:	f7ff feed 	bl	800cea0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800d0c6:	f001 fc0d 	bl	800e8e4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800d0ca:	2301      	movs	r3, #1
}
 800d0cc:	4618      	mov	r0, r3
 800d0ce:	3710      	adds	r7, #16
 800d0d0:	46bd      	mov	sp, r7
 800d0d2:	bd80      	pop	{r7, pc}
 800d0d4:	e000ed04 	.word	0xe000ed04

0800d0d8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800d0d8:	b580      	push	{r7, lr}
 800d0da:	b08a      	sub	sp, #40	; 0x28
 800d0dc:	af02      	add	r7, sp, #8
 800d0de:	60f8      	str	r0, [r7, #12]
 800d0e0:	60b9      	str	r1, [r7, #8]
 800d0e2:	4613      	mov	r3, r2
 800d0e4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d0e6:	68fb      	ldr	r3, [r7, #12]
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d10a      	bne.n	800d102 <xQueueGenericCreate+0x2a>
	__asm volatile
 800d0ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0f0:	f383 8811 	msr	BASEPRI, r3
 800d0f4:	f3bf 8f6f 	isb	sy
 800d0f8:	f3bf 8f4f 	dsb	sy
 800d0fc:	613b      	str	r3, [r7, #16]
}
 800d0fe:	bf00      	nop
 800d100:	e7fe      	b.n	800d100 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d102:	68fb      	ldr	r3, [r7, #12]
 800d104:	68ba      	ldr	r2, [r7, #8]
 800d106:	fb02 f303 	mul.w	r3, r2, r3
 800d10a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800d10c:	69fb      	ldr	r3, [r7, #28]
 800d10e:	3348      	adds	r3, #72	; 0x48
 800d110:	4618      	mov	r0, r3
 800d112:	f001 fc99 	bl	800ea48 <pvPortMalloc>
 800d116:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800d118:	69bb      	ldr	r3, [r7, #24]
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	d011      	beq.n	800d142 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800d11e:	69bb      	ldr	r3, [r7, #24]
 800d120:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d122:	697b      	ldr	r3, [r7, #20]
 800d124:	3348      	adds	r3, #72	; 0x48
 800d126:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800d128:	69bb      	ldr	r3, [r7, #24]
 800d12a:	2200      	movs	r2, #0
 800d12c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d130:	79fa      	ldrb	r2, [r7, #7]
 800d132:	69bb      	ldr	r3, [r7, #24]
 800d134:	9300      	str	r3, [sp, #0]
 800d136:	4613      	mov	r3, r2
 800d138:	697a      	ldr	r2, [r7, #20]
 800d13a:	68b9      	ldr	r1, [r7, #8]
 800d13c:	68f8      	ldr	r0, [r7, #12]
 800d13e:	f000 f805 	bl	800d14c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d142:	69bb      	ldr	r3, [r7, #24]
	}
 800d144:	4618      	mov	r0, r3
 800d146:	3720      	adds	r7, #32
 800d148:	46bd      	mov	sp, r7
 800d14a:	bd80      	pop	{r7, pc}

0800d14c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800d14c:	b580      	push	{r7, lr}
 800d14e:	b084      	sub	sp, #16
 800d150:	af00      	add	r7, sp, #0
 800d152:	60f8      	str	r0, [r7, #12]
 800d154:	60b9      	str	r1, [r7, #8]
 800d156:	607a      	str	r2, [r7, #4]
 800d158:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800d15a:	68bb      	ldr	r3, [r7, #8]
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d103      	bne.n	800d168 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d160:	69bb      	ldr	r3, [r7, #24]
 800d162:	69ba      	ldr	r2, [r7, #24]
 800d164:	601a      	str	r2, [r3, #0]
 800d166:	e002      	b.n	800d16e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800d168:	69bb      	ldr	r3, [r7, #24]
 800d16a:	687a      	ldr	r2, [r7, #4]
 800d16c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800d16e:	69bb      	ldr	r3, [r7, #24]
 800d170:	68fa      	ldr	r2, [r7, #12]
 800d172:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800d174:	69bb      	ldr	r3, [r7, #24]
 800d176:	68ba      	ldr	r2, [r7, #8]
 800d178:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d17a:	2101      	movs	r1, #1
 800d17c:	69b8      	ldr	r0, [r7, #24]
 800d17e:	f7ff ff43 	bl	800d008 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800d182:	bf00      	nop
 800d184:	3710      	adds	r7, #16
 800d186:	46bd      	mov	sp, r7
 800d188:	bd80      	pop	{r7, pc}
	...

0800d18c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800d18c:	b580      	push	{r7, lr}
 800d18e:	b08e      	sub	sp, #56	; 0x38
 800d190:	af00      	add	r7, sp, #0
 800d192:	60f8      	str	r0, [r7, #12]
 800d194:	60b9      	str	r1, [r7, #8]
 800d196:	607a      	str	r2, [r7, #4]
 800d198:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d19a:	2300      	movs	r3, #0
 800d19c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d19e:	68fb      	ldr	r3, [r7, #12]
 800d1a0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d1a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d10a      	bne.n	800d1be <xQueueGenericSend+0x32>
	__asm volatile
 800d1a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1ac:	f383 8811 	msr	BASEPRI, r3
 800d1b0:	f3bf 8f6f 	isb	sy
 800d1b4:	f3bf 8f4f 	dsb	sy
 800d1b8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d1ba:	bf00      	nop
 800d1bc:	e7fe      	b.n	800d1bc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d1be:	68bb      	ldr	r3, [r7, #8]
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	d103      	bne.n	800d1cc <xQueueGenericSend+0x40>
 800d1c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	d101      	bne.n	800d1d0 <xQueueGenericSend+0x44>
 800d1cc:	2301      	movs	r3, #1
 800d1ce:	e000      	b.n	800d1d2 <xQueueGenericSend+0x46>
 800d1d0:	2300      	movs	r3, #0
 800d1d2:	2b00      	cmp	r3, #0
 800d1d4:	d10a      	bne.n	800d1ec <xQueueGenericSend+0x60>
	__asm volatile
 800d1d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1da:	f383 8811 	msr	BASEPRI, r3
 800d1de:	f3bf 8f6f 	isb	sy
 800d1e2:	f3bf 8f4f 	dsb	sy
 800d1e6:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d1e8:	bf00      	nop
 800d1ea:	e7fe      	b.n	800d1ea <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d1ec:	683b      	ldr	r3, [r7, #0]
 800d1ee:	2b02      	cmp	r3, #2
 800d1f0:	d103      	bne.n	800d1fa <xQueueGenericSend+0x6e>
 800d1f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d1f6:	2b01      	cmp	r3, #1
 800d1f8:	d101      	bne.n	800d1fe <xQueueGenericSend+0x72>
 800d1fa:	2301      	movs	r3, #1
 800d1fc:	e000      	b.n	800d200 <xQueueGenericSend+0x74>
 800d1fe:	2300      	movs	r3, #0
 800d200:	2b00      	cmp	r3, #0
 800d202:	d10a      	bne.n	800d21a <xQueueGenericSend+0x8e>
	__asm volatile
 800d204:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d208:	f383 8811 	msr	BASEPRI, r3
 800d20c:	f3bf 8f6f 	isb	sy
 800d210:	f3bf 8f4f 	dsb	sy
 800d214:	623b      	str	r3, [r7, #32]
}
 800d216:	bf00      	nop
 800d218:	e7fe      	b.n	800d218 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d21a:	f001 f8fb 	bl	800e414 <xTaskGetSchedulerState>
 800d21e:	4603      	mov	r3, r0
 800d220:	2b00      	cmp	r3, #0
 800d222:	d102      	bne.n	800d22a <xQueueGenericSend+0x9e>
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	2b00      	cmp	r3, #0
 800d228:	d101      	bne.n	800d22e <xQueueGenericSend+0xa2>
 800d22a:	2301      	movs	r3, #1
 800d22c:	e000      	b.n	800d230 <xQueueGenericSend+0xa4>
 800d22e:	2300      	movs	r3, #0
 800d230:	2b00      	cmp	r3, #0
 800d232:	d10a      	bne.n	800d24a <xQueueGenericSend+0xbe>
	__asm volatile
 800d234:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d238:	f383 8811 	msr	BASEPRI, r3
 800d23c:	f3bf 8f6f 	isb	sy
 800d240:	f3bf 8f4f 	dsb	sy
 800d244:	61fb      	str	r3, [r7, #28]
}
 800d246:	bf00      	nop
 800d248:	e7fe      	b.n	800d248 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d24a:	f001 fb1b 	bl	800e884 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d24e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d250:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d254:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d256:	429a      	cmp	r2, r3
 800d258:	d302      	bcc.n	800d260 <xQueueGenericSend+0xd4>
 800d25a:	683b      	ldr	r3, [r7, #0]
 800d25c:	2b02      	cmp	r3, #2
 800d25e:	d129      	bne.n	800d2b4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d260:	683a      	ldr	r2, [r7, #0]
 800d262:	68b9      	ldr	r1, [r7, #8]
 800d264:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d266:	f000 f96f 	bl	800d548 <prvCopyDataToQueue>
 800d26a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d26c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d26e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d270:	2b00      	cmp	r3, #0
 800d272:	d010      	beq.n	800d296 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d276:	3324      	adds	r3, #36	; 0x24
 800d278:	4618      	mov	r0, r3
 800d27a:	f000 ff0f 	bl	800e09c <xTaskRemoveFromEventList>
 800d27e:	4603      	mov	r3, r0
 800d280:	2b00      	cmp	r3, #0
 800d282:	d013      	beq.n	800d2ac <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800d284:	4b3f      	ldr	r3, [pc, #252]	; (800d384 <xQueueGenericSend+0x1f8>)
 800d286:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d28a:	601a      	str	r2, [r3, #0]
 800d28c:	f3bf 8f4f 	dsb	sy
 800d290:	f3bf 8f6f 	isb	sy
 800d294:	e00a      	b.n	800d2ac <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800d296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d007      	beq.n	800d2ac <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800d29c:	4b39      	ldr	r3, [pc, #228]	; (800d384 <xQueueGenericSend+0x1f8>)
 800d29e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d2a2:	601a      	str	r2, [r3, #0]
 800d2a4:	f3bf 8f4f 	dsb	sy
 800d2a8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800d2ac:	f001 fb1a 	bl	800e8e4 <vPortExitCritical>
				return pdPASS;
 800d2b0:	2301      	movs	r3, #1
 800d2b2:	e063      	b.n	800d37c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	d103      	bne.n	800d2c2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d2ba:	f001 fb13 	bl	800e8e4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800d2be:	2300      	movs	r3, #0
 800d2c0:	e05c      	b.n	800d37c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d2c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d106      	bne.n	800d2d6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d2c8:	f107 0314 	add.w	r3, r7, #20
 800d2cc:	4618      	mov	r0, r3
 800d2ce:	f000 ff47 	bl	800e160 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d2d2:	2301      	movs	r3, #1
 800d2d4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d2d6:	f001 fb05 	bl	800e8e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d2da:	f000 fcfd 	bl	800dcd8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d2de:	f001 fad1 	bl	800e884 <vPortEnterCritical>
 800d2e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d2e8:	b25b      	sxtb	r3, r3
 800d2ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d2ee:	d103      	bne.n	800d2f8 <xQueueGenericSend+0x16c>
 800d2f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2f2:	2200      	movs	r2, #0
 800d2f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d2f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d2fe:	b25b      	sxtb	r3, r3
 800d300:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d304:	d103      	bne.n	800d30e <xQueueGenericSend+0x182>
 800d306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d308:	2200      	movs	r2, #0
 800d30a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d30e:	f001 fae9 	bl	800e8e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d312:	1d3a      	adds	r2, r7, #4
 800d314:	f107 0314 	add.w	r3, r7, #20
 800d318:	4611      	mov	r1, r2
 800d31a:	4618      	mov	r0, r3
 800d31c:	f000 ff36 	bl	800e18c <xTaskCheckForTimeOut>
 800d320:	4603      	mov	r3, r0
 800d322:	2b00      	cmp	r3, #0
 800d324:	d124      	bne.n	800d370 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d326:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d328:	f000 fa06 	bl	800d738 <prvIsQueueFull>
 800d32c:	4603      	mov	r3, r0
 800d32e:	2b00      	cmp	r3, #0
 800d330:	d018      	beq.n	800d364 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d334:	3310      	adds	r3, #16
 800d336:	687a      	ldr	r2, [r7, #4]
 800d338:	4611      	mov	r1, r2
 800d33a:	4618      	mov	r0, r3
 800d33c:	f000 fe8a 	bl	800e054 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800d340:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d342:	f000 f991 	bl	800d668 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800d346:	f000 fcd5 	bl	800dcf4 <xTaskResumeAll>
 800d34a:	4603      	mov	r3, r0
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	f47f af7c 	bne.w	800d24a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800d352:	4b0c      	ldr	r3, [pc, #48]	; (800d384 <xQueueGenericSend+0x1f8>)
 800d354:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d358:	601a      	str	r2, [r3, #0]
 800d35a:	f3bf 8f4f 	dsb	sy
 800d35e:	f3bf 8f6f 	isb	sy
 800d362:	e772      	b.n	800d24a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d364:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d366:	f000 f97f 	bl	800d668 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d36a:	f000 fcc3 	bl	800dcf4 <xTaskResumeAll>
 800d36e:	e76c      	b.n	800d24a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800d370:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d372:	f000 f979 	bl	800d668 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d376:	f000 fcbd 	bl	800dcf4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800d37a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800d37c:	4618      	mov	r0, r3
 800d37e:	3738      	adds	r7, #56	; 0x38
 800d380:	46bd      	mov	sp, r7
 800d382:	bd80      	pop	{r7, pc}
 800d384:	e000ed04 	.word	0xe000ed04

0800d388 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d388:	b580      	push	{r7, lr}
 800d38a:	b08c      	sub	sp, #48	; 0x30
 800d38c:	af00      	add	r7, sp, #0
 800d38e:	60f8      	str	r0, [r7, #12]
 800d390:	60b9      	str	r1, [r7, #8]
 800d392:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d394:	2300      	movs	r3, #0
 800d396:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d39c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d10a      	bne.n	800d3b8 <xQueueReceive+0x30>
	__asm volatile
 800d3a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3a6:	f383 8811 	msr	BASEPRI, r3
 800d3aa:	f3bf 8f6f 	isb	sy
 800d3ae:	f3bf 8f4f 	dsb	sy
 800d3b2:	623b      	str	r3, [r7, #32]
}
 800d3b4:	bf00      	nop
 800d3b6:	e7fe      	b.n	800d3b6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d3b8:	68bb      	ldr	r3, [r7, #8]
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	d103      	bne.n	800d3c6 <xQueueReceive+0x3e>
 800d3be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	d101      	bne.n	800d3ca <xQueueReceive+0x42>
 800d3c6:	2301      	movs	r3, #1
 800d3c8:	e000      	b.n	800d3cc <xQueueReceive+0x44>
 800d3ca:	2300      	movs	r3, #0
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	d10a      	bne.n	800d3e6 <xQueueReceive+0x5e>
	__asm volatile
 800d3d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3d4:	f383 8811 	msr	BASEPRI, r3
 800d3d8:	f3bf 8f6f 	isb	sy
 800d3dc:	f3bf 8f4f 	dsb	sy
 800d3e0:	61fb      	str	r3, [r7, #28]
}
 800d3e2:	bf00      	nop
 800d3e4:	e7fe      	b.n	800d3e4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d3e6:	f001 f815 	bl	800e414 <xTaskGetSchedulerState>
 800d3ea:	4603      	mov	r3, r0
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d102      	bne.n	800d3f6 <xQueueReceive+0x6e>
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	d101      	bne.n	800d3fa <xQueueReceive+0x72>
 800d3f6:	2301      	movs	r3, #1
 800d3f8:	e000      	b.n	800d3fc <xQueueReceive+0x74>
 800d3fa:	2300      	movs	r3, #0
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d10a      	bne.n	800d416 <xQueueReceive+0x8e>
	__asm volatile
 800d400:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d404:	f383 8811 	msr	BASEPRI, r3
 800d408:	f3bf 8f6f 	isb	sy
 800d40c:	f3bf 8f4f 	dsb	sy
 800d410:	61bb      	str	r3, [r7, #24]
}
 800d412:	bf00      	nop
 800d414:	e7fe      	b.n	800d414 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d416:	f001 fa35 	bl	800e884 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d41a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d41c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d41e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d422:	2b00      	cmp	r3, #0
 800d424:	d01f      	beq.n	800d466 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d426:	68b9      	ldr	r1, [r7, #8]
 800d428:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d42a:	f000 f8f7 	bl	800d61c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d42e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d430:	1e5a      	subs	r2, r3, #1
 800d432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d434:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d438:	691b      	ldr	r3, [r3, #16]
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	d00f      	beq.n	800d45e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d43e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d440:	3310      	adds	r3, #16
 800d442:	4618      	mov	r0, r3
 800d444:	f000 fe2a 	bl	800e09c <xTaskRemoveFromEventList>
 800d448:	4603      	mov	r3, r0
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	d007      	beq.n	800d45e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d44e:	4b3d      	ldr	r3, [pc, #244]	; (800d544 <xQueueReceive+0x1bc>)
 800d450:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d454:	601a      	str	r2, [r3, #0]
 800d456:	f3bf 8f4f 	dsb	sy
 800d45a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d45e:	f001 fa41 	bl	800e8e4 <vPortExitCritical>
				return pdPASS;
 800d462:	2301      	movs	r3, #1
 800d464:	e069      	b.n	800d53a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d103      	bne.n	800d474 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d46c:	f001 fa3a 	bl	800e8e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d470:	2300      	movs	r3, #0
 800d472:	e062      	b.n	800d53a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d476:	2b00      	cmp	r3, #0
 800d478:	d106      	bne.n	800d488 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d47a:	f107 0310 	add.w	r3, r7, #16
 800d47e:	4618      	mov	r0, r3
 800d480:	f000 fe6e 	bl	800e160 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d484:	2301      	movs	r3, #1
 800d486:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d488:	f001 fa2c 	bl	800e8e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d48c:	f000 fc24 	bl	800dcd8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d490:	f001 f9f8 	bl	800e884 <vPortEnterCritical>
 800d494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d496:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d49a:	b25b      	sxtb	r3, r3
 800d49c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d4a0:	d103      	bne.n	800d4aa <xQueueReceive+0x122>
 800d4a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4a4:	2200      	movs	r2, #0
 800d4a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d4aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d4b0:	b25b      	sxtb	r3, r3
 800d4b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d4b6:	d103      	bne.n	800d4c0 <xQueueReceive+0x138>
 800d4b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4ba:	2200      	movs	r2, #0
 800d4bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d4c0:	f001 fa10 	bl	800e8e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d4c4:	1d3a      	adds	r2, r7, #4
 800d4c6:	f107 0310 	add.w	r3, r7, #16
 800d4ca:	4611      	mov	r1, r2
 800d4cc:	4618      	mov	r0, r3
 800d4ce:	f000 fe5d 	bl	800e18c <xTaskCheckForTimeOut>
 800d4d2:	4603      	mov	r3, r0
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	d123      	bne.n	800d520 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d4d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d4da:	f000 f917 	bl	800d70c <prvIsQueueEmpty>
 800d4de:	4603      	mov	r3, r0
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	d017      	beq.n	800d514 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d4e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4e6:	3324      	adds	r3, #36	; 0x24
 800d4e8:	687a      	ldr	r2, [r7, #4]
 800d4ea:	4611      	mov	r1, r2
 800d4ec:	4618      	mov	r0, r3
 800d4ee:	f000 fdb1 	bl	800e054 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d4f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d4f4:	f000 f8b8 	bl	800d668 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d4f8:	f000 fbfc 	bl	800dcf4 <xTaskResumeAll>
 800d4fc:	4603      	mov	r3, r0
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d189      	bne.n	800d416 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800d502:	4b10      	ldr	r3, [pc, #64]	; (800d544 <xQueueReceive+0x1bc>)
 800d504:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d508:	601a      	str	r2, [r3, #0]
 800d50a:	f3bf 8f4f 	dsb	sy
 800d50e:	f3bf 8f6f 	isb	sy
 800d512:	e780      	b.n	800d416 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d514:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d516:	f000 f8a7 	bl	800d668 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d51a:	f000 fbeb 	bl	800dcf4 <xTaskResumeAll>
 800d51e:	e77a      	b.n	800d416 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d520:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d522:	f000 f8a1 	bl	800d668 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d526:	f000 fbe5 	bl	800dcf4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d52a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d52c:	f000 f8ee 	bl	800d70c <prvIsQueueEmpty>
 800d530:	4603      	mov	r3, r0
 800d532:	2b00      	cmp	r3, #0
 800d534:	f43f af6f 	beq.w	800d416 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d538:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d53a:	4618      	mov	r0, r3
 800d53c:	3730      	adds	r7, #48	; 0x30
 800d53e:	46bd      	mov	sp, r7
 800d540:	bd80      	pop	{r7, pc}
 800d542:	bf00      	nop
 800d544:	e000ed04 	.word	0xe000ed04

0800d548 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d548:	b580      	push	{r7, lr}
 800d54a:	b086      	sub	sp, #24
 800d54c:	af00      	add	r7, sp, #0
 800d54e:	60f8      	str	r0, [r7, #12]
 800d550:	60b9      	str	r1, [r7, #8]
 800d552:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d554:	2300      	movs	r3, #0
 800d556:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d558:	68fb      	ldr	r3, [r7, #12]
 800d55a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d55c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d55e:	68fb      	ldr	r3, [r7, #12]
 800d560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d562:	2b00      	cmp	r3, #0
 800d564:	d10d      	bne.n	800d582 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d566:	68fb      	ldr	r3, [r7, #12]
 800d568:	681b      	ldr	r3, [r3, #0]
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	d14d      	bne.n	800d60a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d56e:	68fb      	ldr	r3, [r7, #12]
 800d570:	689b      	ldr	r3, [r3, #8]
 800d572:	4618      	mov	r0, r3
 800d574:	f000 ff6c 	bl	800e450 <xTaskPriorityDisinherit>
 800d578:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d57a:	68fb      	ldr	r3, [r7, #12]
 800d57c:	2200      	movs	r2, #0
 800d57e:	609a      	str	r2, [r3, #8]
 800d580:	e043      	b.n	800d60a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	2b00      	cmp	r3, #0
 800d586:	d119      	bne.n	800d5bc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d588:	68fb      	ldr	r3, [r7, #12]
 800d58a:	6858      	ldr	r0, [r3, #4]
 800d58c:	68fb      	ldr	r3, [r7, #12]
 800d58e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d590:	461a      	mov	r2, r3
 800d592:	68b9      	ldr	r1, [r7, #8]
 800d594:	f001 fc6c 	bl	800ee70 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d598:	68fb      	ldr	r3, [r7, #12]
 800d59a:	685a      	ldr	r2, [r3, #4]
 800d59c:	68fb      	ldr	r3, [r7, #12]
 800d59e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5a0:	441a      	add	r2, r3
 800d5a2:	68fb      	ldr	r3, [r7, #12]
 800d5a4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d5a6:	68fb      	ldr	r3, [r7, #12]
 800d5a8:	685a      	ldr	r2, [r3, #4]
 800d5aa:	68fb      	ldr	r3, [r7, #12]
 800d5ac:	689b      	ldr	r3, [r3, #8]
 800d5ae:	429a      	cmp	r2, r3
 800d5b0:	d32b      	bcc.n	800d60a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d5b2:	68fb      	ldr	r3, [r7, #12]
 800d5b4:	681a      	ldr	r2, [r3, #0]
 800d5b6:	68fb      	ldr	r3, [r7, #12]
 800d5b8:	605a      	str	r2, [r3, #4]
 800d5ba:	e026      	b.n	800d60a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d5bc:	68fb      	ldr	r3, [r7, #12]
 800d5be:	68d8      	ldr	r0, [r3, #12]
 800d5c0:	68fb      	ldr	r3, [r7, #12]
 800d5c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5c4:	461a      	mov	r2, r3
 800d5c6:	68b9      	ldr	r1, [r7, #8]
 800d5c8:	f001 fc52 	bl	800ee70 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d5cc:	68fb      	ldr	r3, [r7, #12]
 800d5ce:	68da      	ldr	r2, [r3, #12]
 800d5d0:	68fb      	ldr	r3, [r7, #12]
 800d5d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5d4:	425b      	negs	r3, r3
 800d5d6:	441a      	add	r2, r3
 800d5d8:	68fb      	ldr	r3, [r7, #12]
 800d5da:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d5dc:	68fb      	ldr	r3, [r7, #12]
 800d5de:	68da      	ldr	r2, [r3, #12]
 800d5e0:	68fb      	ldr	r3, [r7, #12]
 800d5e2:	681b      	ldr	r3, [r3, #0]
 800d5e4:	429a      	cmp	r2, r3
 800d5e6:	d207      	bcs.n	800d5f8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d5e8:	68fb      	ldr	r3, [r7, #12]
 800d5ea:	689a      	ldr	r2, [r3, #8]
 800d5ec:	68fb      	ldr	r3, [r7, #12]
 800d5ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5f0:	425b      	negs	r3, r3
 800d5f2:	441a      	add	r2, r3
 800d5f4:	68fb      	ldr	r3, [r7, #12]
 800d5f6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	2b02      	cmp	r3, #2
 800d5fc:	d105      	bne.n	800d60a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d5fe:	693b      	ldr	r3, [r7, #16]
 800d600:	2b00      	cmp	r3, #0
 800d602:	d002      	beq.n	800d60a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d604:	693b      	ldr	r3, [r7, #16]
 800d606:	3b01      	subs	r3, #1
 800d608:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d60a:	693b      	ldr	r3, [r7, #16]
 800d60c:	1c5a      	adds	r2, r3, #1
 800d60e:	68fb      	ldr	r3, [r7, #12]
 800d610:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800d612:	697b      	ldr	r3, [r7, #20]
}
 800d614:	4618      	mov	r0, r3
 800d616:	3718      	adds	r7, #24
 800d618:	46bd      	mov	sp, r7
 800d61a:	bd80      	pop	{r7, pc}

0800d61c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d61c:	b580      	push	{r7, lr}
 800d61e:	b082      	sub	sp, #8
 800d620:	af00      	add	r7, sp, #0
 800d622:	6078      	str	r0, [r7, #4]
 800d624:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	d018      	beq.n	800d660 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	68da      	ldr	r2, [r3, #12]
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d636:	441a      	add	r2, r3
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	68da      	ldr	r2, [r3, #12]
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	689b      	ldr	r3, [r3, #8]
 800d644:	429a      	cmp	r2, r3
 800d646:	d303      	bcc.n	800d650 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	681a      	ldr	r2, [r3, #0]
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	68d9      	ldr	r1, [r3, #12]
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d658:	461a      	mov	r2, r3
 800d65a:	6838      	ldr	r0, [r7, #0]
 800d65c:	f001 fc08 	bl	800ee70 <memcpy>
	}
}
 800d660:	bf00      	nop
 800d662:	3708      	adds	r7, #8
 800d664:	46bd      	mov	sp, r7
 800d666:	bd80      	pop	{r7, pc}

0800d668 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d668:	b580      	push	{r7, lr}
 800d66a:	b084      	sub	sp, #16
 800d66c:	af00      	add	r7, sp, #0
 800d66e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d670:	f001 f908 	bl	800e884 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d67a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d67c:	e011      	b.n	800d6a2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d682:	2b00      	cmp	r3, #0
 800d684:	d012      	beq.n	800d6ac <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	3324      	adds	r3, #36	; 0x24
 800d68a:	4618      	mov	r0, r3
 800d68c:	f000 fd06 	bl	800e09c <xTaskRemoveFromEventList>
 800d690:	4603      	mov	r3, r0
 800d692:	2b00      	cmp	r3, #0
 800d694:	d001      	beq.n	800d69a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d696:	f000 fddb 	bl	800e250 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d69a:	7bfb      	ldrb	r3, [r7, #15]
 800d69c:	3b01      	subs	r3, #1
 800d69e:	b2db      	uxtb	r3, r3
 800d6a0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d6a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	dce9      	bgt.n	800d67e <prvUnlockQueue+0x16>
 800d6aa:	e000      	b.n	800d6ae <prvUnlockQueue+0x46>
					break;
 800d6ac:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	22ff      	movs	r2, #255	; 0xff
 800d6b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800d6b6:	f001 f915 	bl	800e8e4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d6ba:	f001 f8e3 	bl	800e884 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d6c4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d6c6:	e011      	b.n	800d6ec <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	691b      	ldr	r3, [r3, #16]
 800d6cc:	2b00      	cmp	r3, #0
 800d6ce:	d012      	beq.n	800d6f6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	3310      	adds	r3, #16
 800d6d4:	4618      	mov	r0, r3
 800d6d6:	f000 fce1 	bl	800e09c <xTaskRemoveFromEventList>
 800d6da:	4603      	mov	r3, r0
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	d001      	beq.n	800d6e4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d6e0:	f000 fdb6 	bl	800e250 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d6e4:	7bbb      	ldrb	r3, [r7, #14]
 800d6e6:	3b01      	subs	r3, #1
 800d6e8:	b2db      	uxtb	r3, r3
 800d6ea:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d6ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	dce9      	bgt.n	800d6c8 <prvUnlockQueue+0x60>
 800d6f4:	e000      	b.n	800d6f8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d6f6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	22ff      	movs	r2, #255	; 0xff
 800d6fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800d700:	f001 f8f0 	bl	800e8e4 <vPortExitCritical>
}
 800d704:	bf00      	nop
 800d706:	3710      	adds	r7, #16
 800d708:	46bd      	mov	sp, r7
 800d70a:	bd80      	pop	{r7, pc}

0800d70c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d70c:	b580      	push	{r7, lr}
 800d70e:	b084      	sub	sp, #16
 800d710:	af00      	add	r7, sp, #0
 800d712:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d714:	f001 f8b6 	bl	800e884 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d102      	bne.n	800d726 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d720:	2301      	movs	r3, #1
 800d722:	60fb      	str	r3, [r7, #12]
 800d724:	e001      	b.n	800d72a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d726:	2300      	movs	r3, #0
 800d728:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d72a:	f001 f8db 	bl	800e8e4 <vPortExitCritical>

	return xReturn;
 800d72e:	68fb      	ldr	r3, [r7, #12]
}
 800d730:	4618      	mov	r0, r3
 800d732:	3710      	adds	r7, #16
 800d734:	46bd      	mov	sp, r7
 800d736:	bd80      	pop	{r7, pc}

0800d738 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d738:	b580      	push	{r7, lr}
 800d73a:	b084      	sub	sp, #16
 800d73c:	af00      	add	r7, sp, #0
 800d73e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d740:	f001 f8a0 	bl	800e884 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d74c:	429a      	cmp	r2, r3
 800d74e:	d102      	bne.n	800d756 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d750:	2301      	movs	r3, #1
 800d752:	60fb      	str	r3, [r7, #12]
 800d754:	e001      	b.n	800d75a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d756:	2300      	movs	r3, #0
 800d758:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d75a:	f001 f8c3 	bl	800e8e4 <vPortExitCritical>

	return xReturn;
 800d75e:	68fb      	ldr	r3, [r7, #12]
}
 800d760:	4618      	mov	r0, r3
 800d762:	3710      	adds	r7, #16
 800d764:	46bd      	mov	sp, r7
 800d766:	bd80      	pop	{r7, pc}

0800d768 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d768:	b580      	push	{r7, lr}
 800d76a:	b08e      	sub	sp, #56	; 0x38
 800d76c:	af04      	add	r7, sp, #16
 800d76e:	60f8      	str	r0, [r7, #12]
 800d770:	60b9      	str	r1, [r7, #8]
 800d772:	607a      	str	r2, [r7, #4]
 800d774:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d776:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d778:	2b00      	cmp	r3, #0
 800d77a:	d10a      	bne.n	800d792 <xTaskCreateStatic+0x2a>
	__asm volatile
 800d77c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d780:	f383 8811 	msr	BASEPRI, r3
 800d784:	f3bf 8f6f 	isb	sy
 800d788:	f3bf 8f4f 	dsb	sy
 800d78c:	623b      	str	r3, [r7, #32]
}
 800d78e:	bf00      	nop
 800d790:	e7fe      	b.n	800d790 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800d792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d794:	2b00      	cmp	r3, #0
 800d796:	d10a      	bne.n	800d7ae <xTaskCreateStatic+0x46>
	__asm volatile
 800d798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d79c:	f383 8811 	msr	BASEPRI, r3
 800d7a0:	f3bf 8f6f 	isb	sy
 800d7a4:	f3bf 8f4f 	dsb	sy
 800d7a8:	61fb      	str	r3, [r7, #28]
}
 800d7aa:	bf00      	nop
 800d7ac:	e7fe      	b.n	800d7ac <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d7ae:	2354      	movs	r3, #84	; 0x54
 800d7b0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d7b2:	693b      	ldr	r3, [r7, #16]
 800d7b4:	2b54      	cmp	r3, #84	; 0x54
 800d7b6:	d00a      	beq.n	800d7ce <xTaskCreateStatic+0x66>
	__asm volatile
 800d7b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7bc:	f383 8811 	msr	BASEPRI, r3
 800d7c0:	f3bf 8f6f 	isb	sy
 800d7c4:	f3bf 8f4f 	dsb	sy
 800d7c8:	61bb      	str	r3, [r7, #24]
}
 800d7ca:	bf00      	nop
 800d7cc:	e7fe      	b.n	800d7cc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d7ce:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d7d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	d01e      	beq.n	800d814 <xTaskCreateStatic+0xac>
 800d7d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	d01b      	beq.n	800d814 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d7dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7de:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d7e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d7e4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d7e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7e8:	2202      	movs	r2, #2
 800d7ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d7ee:	2300      	movs	r3, #0
 800d7f0:	9303      	str	r3, [sp, #12]
 800d7f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7f4:	9302      	str	r3, [sp, #8]
 800d7f6:	f107 0314 	add.w	r3, r7, #20
 800d7fa:	9301      	str	r3, [sp, #4]
 800d7fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7fe:	9300      	str	r3, [sp, #0]
 800d800:	683b      	ldr	r3, [r7, #0]
 800d802:	687a      	ldr	r2, [r7, #4]
 800d804:	68b9      	ldr	r1, [r7, #8]
 800d806:	68f8      	ldr	r0, [r7, #12]
 800d808:	f000 f850 	bl	800d8ac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d80c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d80e:	f000 f8d5 	bl	800d9bc <prvAddNewTaskToReadyList>
 800d812:	e001      	b.n	800d818 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800d814:	2300      	movs	r3, #0
 800d816:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d818:	697b      	ldr	r3, [r7, #20]
	}
 800d81a:	4618      	mov	r0, r3
 800d81c:	3728      	adds	r7, #40	; 0x28
 800d81e:	46bd      	mov	sp, r7
 800d820:	bd80      	pop	{r7, pc}

0800d822 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d822:	b580      	push	{r7, lr}
 800d824:	b08c      	sub	sp, #48	; 0x30
 800d826:	af04      	add	r7, sp, #16
 800d828:	60f8      	str	r0, [r7, #12]
 800d82a:	60b9      	str	r1, [r7, #8]
 800d82c:	603b      	str	r3, [r7, #0]
 800d82e:	4613      	mov	r3, r2
 800d830:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d832:	88fb      	ldrh	r3, [r7, #6]
 800d834:	009b      	lsls	r3, r3, #2
 800d836:	4618      	mov	r0, r3
 800d838:	f001 f906 	bl	800ea48 <pvPortMalloc>
 800d83c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d83e:	697b      	ldr	r3, [r7, #20]
 800d840:	2b00      	cmp	r3, #0
 800d842:	d00e      	beq.n	800d862 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d844:	2054      	movs	r0, #84	; 0x54
 800d846:	f001 f8ff 	bl	800ea48 <pvPortMalloc>
 800d84a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d84c:	69fb      	ldr	r3, [r7, #28]
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d003      	beq.n	800d85a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d852:	69fb      	ldr	r3, [r7, #28]
 800d854:	697a      	ldr	r2, [r7, #20]
 800d856:	631a      	str	r2, [r3, #48]	; 0x30
 800d858:	e005      	b.n	800d866 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d85a:	6978      	ldr	r0, [r7, #20]
 800d85c:	f001 f9c0 	bl	800ebe0 <vPortFree>
 800d860:	e001      	b.n	800d866 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d862:	2300      	movs	r3, #0
 800d864:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d866:	69fb      	ldr	r3, [r7, #28]
 800d868:	2b00      	cmp	r3, #0
 800d86a:	d017      	beq.n	800d89c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d86c:	69fb      	ldr	r3, [r7, #28]
 800d86e:	2200      	movs	r2, #0
 800d870:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d874:	88fa      	ldrh	r2, [r7, #6]
 800d876:	2300      	movs	r3, #0
 800d878:	9303      	str	r3, [sp, #12]
 800d87a:	69fb      	ldr	r3, [r7, #28]
 800d87c:	9302      	str	r3, [sp, #8]
 800d87e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d880:	9301      	str	r3, [sp, #4]
 800d882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d884:	9300      	str	r3, [sp, #0]
 800d886:	683b      	ldr	r3, [r7, #0]
 800d888:	68b9      	ldr	r1, [r7, #8]
 800d88a:	68f8      	ldr	r0, [r7, #12]
 800d88c:	f000 f80e 	bl	800d8ac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d890:	69f8      	ldr	r0, [r7, #28]
 800d892:	f000 f893 	bl	800d9bc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d896:	2301      	movs	r3, #1
 800d898:	61bb      	str	r3, [r7, #24]
 800d89a:	e002      	b.n	800d8a2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d89c:	f04f 33ff 	mov.w	r3, #4294967295
 800d8a0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d8a2:	69bb      	ldr	r3, [r7, #24]
	}
 800d8a4:	4618      	mov	r0, r3
 800d8a6:	3720      	adds	r7, #32
 800d8a8:	46bd      	mov	sp, r7
 800d8aa:	bd80      	pop	{r7, pc}

0800d8ac <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d8ac:	b580      	push	{r7, lr}
 800d8ae:	b088      	sub	sp, #32
 800d8b0:	af00      	add	r7, sp, #0
 800d8b2:	60f8      	str	r0, [r7, #12]
 800d8b4:	60b9      	str	r1, [r7, #8]
 800d8b6:	607a      	str	r2, [r7, #4]
 800d8b8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d8ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800d8c4:	3b01      	subs	r3, #1
 800d8c6:	009b      	lsls	r3, r3, #2
 800d8c8:	4413      	add	r3, r2
 800d8ca:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d8cc:	69bb      	ldr	r3, [r7, #24]
 800d8ce:	f023 0307 	bic.w	r3, r3, #7
 800d8d2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d8d4:	69bb      	ldr	r3, [r7, #24]
 800d8d6:	f003 0307 	and.w	r3, r3, #7
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	d00a      	beq.n	800d8f4 <prvInitialiseNewTask+0x48>
	__asm volatile
 800d8de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8e2:	f383 8811 	msr	BASEPRI, r3
 800d8e6:	f3bf 8f6f 	isb	sy
 800d8ea:	f3bf 8f4f 	dsb	sy
 800d8ee:	617b      	str	r3, [r7, #20]
}
 800d8f0:	bf00      	nop
 800d8f2:	e7fe      	b.n	800d8f2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d8f4:	68bb      	ldr	r3, [r7, #8]
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	d01f      	beq.n	800d93a <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d8fa:	2300      	movs	r3, #0
 800d8fc:	61fb      	str	r3, [r7, #28]
 800d8fe:	e012      	b.n	800d926 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d900:	68ba      	ldr	r2, [r7, #8]
 800d902:	69fb      	ldr	r3, [r7, #28]
 800d904:	4413      	add	r3, r2
 800d906:	7819      	ldrb	r1, [r3, #0]
 800d908:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d90a:	69fb      	ldr	r3, [r7, #28]
 800d90c:	4413      	add	r3, r2
 800d90e:	3334      	adds	r3, #52	; 0x34
 800d910:	460a      	mov	r2, r1
 800d912:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d914:	68ba      	ldr	r2, [r7, #8]
 800d916:	69fb      	ldr	r3, [r7, #28]
 800d918:	4413      	add	r3, r2
 800d91a:	781b      	ldrb	r3, [r3, #0]
 800d91c:	2b00      	cmp	r3, #0
 800d91e:	d006      	beq.n	800d92e <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d920:	69fb      	ldr	r3, [r7, #28]
 800d922:	3301      	adds	r3, #1
 800d924:	61fb      	str	r3, [r7, #28]
 800d926:	69fb      	ldr	r3, [r7, #28]
 800d928:	2b0f      	cmp	r3, #15
 800d92a:	d9e9      	bls.n	800d900 <prvInitialiseNewTask+0x54>
 800d92c:	e000      	b.n	800d930 <prvInitialiseNewTask+0x84>
			{
				break;
 800d92e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d932:	2200      	movs	r2, #0
 800d934:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d938:	e003      	b.n	800d942 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d93a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d93c:	2200      	movs	r2, #0
 800d93e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d944:	2b06      	cmp	r3, #6
 800d946:	d901      	bls.n	800d94c <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d948:	2306      	movs	r3, #6
 800d94a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d94c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d94e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d950:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d954:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d956:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800d958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d95a:	2200      	movs	r2, #0
 800d95c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d95e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d960:	3304      	adds	r3, #4
 800d962:	4618      	mov	r0, r3
 800d964:	f7ff fabc 	bl	800cee0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d96a:	3318      	adds	r3, #24
 800d96c:	4618      	mov	r0, r3
 800d96e:	f7ff fab7 	bl	800cee0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d974:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d976:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d97a:	f1c3 0207 	rsb	r2, r3, #7
 800d97e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d980:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d984:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d986:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d98a:	2200      	movs	r2, #0
 800d98c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d98e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d990:	2200      	movs	r2, #0
 800d992:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d996:	683a      	ldr	r2, [r7, #0]
 800d998:	68f9      	ldr	r1, [r7, #12]
 800d99a:	69b8      	ldr	r0, [r7, #24]
 800d99c:	f000 fe44 	bl	800e628 <pxPortInitialiseStack>
 800d9a0:	4602      	mov	r2, r0
 800d9a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9a4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d9a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	d002      	beq.n	800d9b2 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d9ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d9b0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d9b2:	bf00      	nop
 800d9b4:	3720      	adds	r7, #32
 800d9b6:	46bd      	mov	sp, r7
 800d9b8:	bd80      	pop	{r7, pc}
	...

0800d9bc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d9bc:	b580      	push	{r7, lr}
 800d9be:	b082      	sub	sp, #8
 800d9c0:	af00      	add	r7, sp, #0
 800d9c2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d9c4:	f000 ff5e 	bl	800e884 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d9c8:	4b2a      	ldr	r3, [pc, #168]	; (800da74 <prvAddNewTaskToReadyList+0xb8>)
 800d9ca:	681b      	ldr	r3, [r3, #0]
 800d9cc:	3301      	adds	r3, #1
 800d9ce:	4a29      	ldr	r2, [pc, #164]	; (800da74 <prvAddNewTaskToReadyList+0xb8>)
 800d9d0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d9d2:	4b29      	ldr	r3, [pc, #164]	; (800da78 <prvAddNewTaskToReadyList+0xbc>)
 800d9d4:	681b      	ldr	r3, [r3, #0]
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	d109      	bne.n	800d9ee <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d9da:	4a27      	ldr	r2, [pc, #156]	; (800da78 <prvAddNewTaskToReadyList+0xbc>)
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d9e0:	4b24      	ldr	r3, [pc, #144]	; (800da74 <prvAddNewTaskToReadyList+0xb8>)
 800d9e2:	681b      	ldr	r3, [r3, #0]
 800d9e4:	2b01      	cmp	r3, #1
 800d9e6:	d110      	bne.n	800da0a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d9e8:	f000 fc56 	bl	800e298 <prvInitialiseTaskLists>
 800d9ec:	e00d      	b.n	800da0a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d9ee:	4b23      	ldr	r3, [pc, #140]	; (800da7c <prvAddNewTaskToReadyList+0xc0>)
 800d9f0:	681b      	ldr	r3, [r3, #0]
 800d9f2:	2b00      	cmp	r3, #0
 800d9f4:	d109      	bne.n	800da0a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d9f6:	4b20      	ldr	r3, [pc, #128]	; (800da78 <prvAddNewTaskToReadyList+0xbc>)
 800d9f8:	681b      	ldr	r3, [r3, #0]
 800d9fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da00:	429a      	cmp	r2, r3
 800da02:	d802      	bhi.n	800da0a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800da04:	4a1c      	ldr	r2, [pc, #112]	; (800da78 <prvAddNewTaskToReadyList+0xbc>)
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800da0a:	4b1d      	ldr	r3, [pc, #116]	; (800da80 <prvAddNewTaskToReadyList+0xc4>)
 800da0c:	681b      	ldr	r3, [r3, #0]
 800da0e:	3301      	adds	r3, #1
 800da10:	4a1b      	ldr	r2, [pc, #108]	; (800da80 <prvAddNewTaskToReadyList+0xc4>)
 800da12:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da18:	2201      	movs	r2, #1
 800da1a:	409a      	lsls	r2, r3
 800da1c:	4b19      	ldr	r3, [pc, #100]	; (800da84 <prvAddNewTaskToReadyList+0xc8>)
 800da1e:	681b      	ldr	r3, [r3, #0]
 800da20:	4313      	orrs	r3, r2
 800da22:	4a18      	ldr	r2, [pc, #96]	; (800da84 <prvAddNewTaskToReadyList+0xc8>)
 800da24:	6013      	str	r3, [r2, #0]
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da2a:	4613      	mov	r3, r2
 800da2c:	009b      	lsls	r3, r3, #2
 800da2e:	4413      	add	r3, r2
 800da30:	009b      	lsls	r3, r3, #2
 800da32:	4a15      	ldr	r2, [pc, #84]	; (800da88 <prvAddNewTaskToReadyList+0xcc>)
 800da34:	441a      	add	r2, r3
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	3304      	adds	r3, #4
 800da3a:	4619      	mov	r1, r3
 800da3c:	4610      	mov	r0, r2
 800da3e:	f7ff fa5c 	bl	800cefa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800da42:	f000 ff4f 	bl	800e8e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800da46:	4b0d      	ldr	r3, [pc, #52]	; (800da7c <prvAddNewTaskToReadyList+0xc0>)
 800da48:	681b      	ldr	r3, [r3, #0]
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	d00e      	beq.n	800da6c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800da4e:	4b0a      	ldr	r3, [pc, #40]	; (800da78 <prvAddNewTaskToReadyList+0xbc>)
 800da50:	681b      	ldr	r3, [r3, #0]
 800da52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da58:	429a      	cmp	r2, r3
 800da5a:	d207      	bcs.n	800da6c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800da5c:	4b0b      	ldr	r3, [pc, #44]	; (800da8c <prvAddNewTaskToReadyList+0xd0>)
 800da5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800da62:	601a      	str	r2, [r3, #0]
 800da64:	f3bf 8f4f 	dsb	sy
 800da68:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800da6c:	bf00      	nop
 800da6e:	3708      	adds	r7, #8
 800da70:	46bd      	mov	sp, r7
 800da72:	bd80      	pop	{r7, pc}
 800da74:	20000cdc 	.word	0x20000cdc
 800da78:	20000bdc 	.word	0x20000bdc
 800da7c:	20000ce8 	.word	0x20000ce8
 800da80:	20000cf8 	.word	0x20000cf8
 800da84:	20000ce4 	.word	0x20000ce4
 800da88:	20000be0 	.word	0x20000be0
 800da8c:	e000ed04 	.word	0xe000ed04

0800da90 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800da90:	b580      	push	{r7, lr}
 800da92:	b084      	sub	sp, #16
 800da94:	af00      	add	r7, sp, #0
 800da96:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800da98:	2300      	movs	r3, #0
 800da9a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	d017      	beq.n	800dad2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800daa2:	4b13      	ldr	r3, [pc, #76]	; (800daf0 <vTaskDelay+0x60>)
 800daa4:	681b      	ldr	r3, [r3, #0]
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	d00a      	beq.n	800dac0 <vTaskDelay+0x30>
	__asm volatile
 800daaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800daae:	f383 8811 	msr	BASEPRI, r3
 800dab2:	f3bf 8f6f 	isb	sy
 800dab6:	f3bf 8f4f 	dsb	sy
 800daba:	60bb      	str	r3, [r7, #8]
}
 800dabc:	bf00      	nop
 800dabe:	e7fe      	b.n	800dabe <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800dac0:	f000 f90a 	bl	800dcd8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800dac4:	2100      	movs	r1, #0
 800dac6:	6878      	ldr	r0, [r7, #4]
 800dac8:	f000 fd48 	bl	800e55c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800dacc:	f000 f912 	bl	800dcf4 <xTaskResumeAll>
 800dad0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800dad2:	68fb      	ldr	r3, [r7, #12]
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	d107      	bne.n	800dae8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800dad8:	4b06      	ldr	r3, [pc, #24]	; (800daf4 <vTaskDelay+0x64>)
 800dada:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dade:	601a      	str	r2, [r3, #0]
 800dae0:	f3bf 8f4f 	dsb	sy
 800dae4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800dae8:	bf00      	nop
 800daea:	3710      	adds	r7, #16
 800daec:	46bd      	mov	sp, r7
 800daee:	bd80      	pop	{r7, pc}
 800daf0:	20000d04 	.word	0x20000d04
 800daf4:	e000ed04 	.word	0xe000ed04

0800daf8 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 800daf8:	b480      	push	{r7}
 800dafa:	b087      	sub	sp, #28
 800dafc:	af00      	add	r7, sp, #0
 800dafe:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 800db00:	2300      	movs	r3, #0
 800db02:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	d10a      	bne.n	800db24 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 800db0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db12:	f383 8811 	msr	BASEPRI, r3
 800db16:	f3bf 8f6f 	isb	sy
 800db1a:	f3bf 8f4f 	dsb	sy
 800db1e:	60fb      	str	r3, [r7, #12]
}
 800db20:	bf00      	nop
 800db22:	e7fe      	b.n	800db22 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800db24:	693b      	ldr	r3, [r7, #16]
 800db26:	695b      	ldr	r3, [r3, #20]
 800db28:	4a0a      	ldr	r2, [pc, #40]	; (800db54 <prvTaskIsTaskSuspended+0x5c>)
 800db2a:	4293      	cmp	r3, r2
 800db2c:	d10a      	bne.n	800db44 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800db2e:	693b      	ldr	r3, [r7, #16]
 800db30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db32:	4a09      	ldr	r2, [pc, #36]	; (800db58 <prvTaskIsTaskSuspended+0x60>)
 800db34:	4293      	cmp	r3, r2
 800db36:	d005      	beq.n	800db44 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 800db38:	693b      	ldr	r3, [r7, #16]
 800db3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	d101      	bne.n	800db44 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 800db40:	2301      	movs	r3, #1
 800db42:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800db44:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800db46:	4618      	mov	r0, r3
 800db48:	371c      	adds	r7, #28
 800db4a:	46bd      	mov	sp, r7
 800db4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db50:	4770      	bx	lr
 800db52:	bf00      	nop
 800db54:	20000cc8 	.word	0x20000cc8
 800db58:	20000c9c 	.word	0x20000c9c

0800db5c <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 800db5c:	b580      	push	{r7, lr}
 800db5e:	b084      	sub	sp, #16
 800db60:	af00      	add	r7, sp, #0
 800db62:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	d10a      	bne.n	800db84 <vTaskResume+0x28>
	__asm volatile
 800db6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db72:	f383 8811 	msr	BASEPRI, r3
 800db76:	f3bf 8f6f 	isb	sy
 800db7a:	f3bf 8f4f 	dsb	sy
 800db7e:	60bb      	str	r3, [r7, #8]
}
 800db80:	bf00      	nop
 800db82:	e7fe      	b.n	800db82 <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 800db84:	4b20      	ldr	r3, [pc, #128]	; (800dc08 <vTaskResume+0xac>)
 800db86:	681b      	ldr	r3, [r3, #0]
 800db88:	68fa      	ldr	r2, [r7, #12]
 800db8a:	429a      	cmp	r2, r3
 800db8c:	d037      	beq.n	800dbfe <vTaskResume+0xa2>
 800db8e:	68fb      	ldr	r3, [r7, #12]
 800db90:	2b00      	cmp	r3, #0
 800db92:	d034      	beq.n	800dbfe <vTaskResume+0xa2>
		{
			taskENTER_CRITICAL();
 800db94:	f000 fe76 	bl	800e884 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800db98:	68f8      	ldr	r0, [r7, #12]
 800db9a:	f7ff ffad 	bl	800daf8 <prvTaskIsTaskSuspended>
 800db9e:	4603      	mov	r3, r0
 800dba0:	2b00      	cmp	r3, #0
 800dba2:	d02a      	beq.n	800dbfa <vTaskResume+0x9e>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 800dba4:	68fb      	ldr	r3, [r7, #12]
 800dba6:	3304      	adds	r3, #4
 800dba8:	4618      	mov	r0, r3
 800dbaa:	f7ff fa03 	bl	800cfb4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800dbae:	68fb      	ldr	r3, [r7, #12]
 800dbb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbb2:	2201      	movs	r2, #1
 800dbb4:	409a      	lsls	r2, r3
 800dbb6:	4b15      	ldr	r3, [pc, #84]	; (800dc0c <vTaskResume+0xb0>)
 800dbb8:	681b      	ldr	r3, [r3, #0]
 800dbba:	4313      	orrs	r3, r2
 800dbbc:	4a13      	ldr	r2, [pc, #76]	; (800dc0c <vTaskResume+0xb0>)
 800dbbe:	6013      	str	r3, [r2, #0]
 800dbc0:	68fb      	ldr	r3, [r7, #12]
 800dbc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dbc4:	4613      	mov	r3, r2
 800dbc6:	009b      	lsls	r3, r3, #2
 800dbc8:	4413      	add	r3, r2
 800dbca:	009b      	lsls	r3, r3, #2
 800dbcc:	4a10      	ldr	r2, [pc, #64]	; (800dc10 <vTaskResume+0xb4>)
 800dbce:	441a      	add	r2, r3
 800dbd0:	68fb      	ldr	r3, [r7, #12]
 800dbd2:	3304      	adds	r3, #4
 800dbd4:	4619      	mov	r1, r3
 800dbd6:	4610      	mov	r0, r2
 800dbd8:	f7ff f98f 	bl	800cefa <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800dbdc:	68fb      	ldr	r3, [r7, #12]
 800dbde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dbe0:	4b09      	ldr	r3, [pc, #36]	; (800dc08 <vTaskResume+0xac>)
 800dbe2:	681b      	ldr	r3, [r3, #0]
 800dbe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbe6:	429a      	cmp	r2, r3
 800dbe8:	d307      	bcc.n	800dbfa <vTaskResume+0x9e>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 800dbea:	4b0a      	ldr	r3, [pc, #40]	; (800dc14 <vTaskResume+0xb8>)
 800dbec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dbf0:	601a      	str	r2, [r3, #0]
 800dbf2:	f3bf 8f4f 	dsb	sy
 800dbf6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 800dbfa:	f000 fe73 	bl	800e8e4 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800dbfe:	bf00      	nop
 800dc00:	3710      	adds	r7, #16
 800dc02:	46bd      	mov	sp, r7
 800dc04:	bd80      	pop	{r7, pc}
 800dc06:	bf00      	nop
 800dc08:	20000bdc 	.word	0x20000bdc
 800dc0c:	20000ce4 	.word	0x20000ce4
 800dc10:	20000be0 	.word	0x20000be0
 800dc14:	e000ed04 	.word	0xe000ed04

0800dc18 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800dc18:	b580      	push	{r7, lr}
 800dc1a:	b08a      	sub	sp, #40	; 0x28
 800dc1c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800dc1e:	2300      	movs	r3, #0
 800dc20:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800dc22:	2300      	movs	r3, #0
 800dc24:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800dc26:	463a      	mov	r2, r7
 800dc28:	1d39      	adds	r1, r7, #4
 800dc2a:	f107 0308 	add.w	r3, r7, #8
 800dc2e:	4618      	mov	r0, r3
 800dc30:	f7f3 f9ac 	bl	8000f8c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800dc34:	6839      	ldr	r1, [r7, #0]
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	68ba      	ldr	r2, [r7, #8]
 800dc3a:	9202      	str	r2, [sp, #8]
 800dc3c:	9301      	str	r3, [sp, #4]
 800dc3e:	2300      	movs	r3, #0
 800dc40:	9300      	str	r3, [sp, #0]
 800dc42:	2300      	movs	r3, #0
 800dc44:	460a      	mov	r2, r1
 800dc46:	491e      	ldr	r1, [pc, #120]	; (800dcc0 <vTaskStartScheduler+0xa8>)
 800dc48:	481e      	ldr	r0, [pc, #120]	; (800dcc4 <vTaskStartScheduler+0xac>)
 800dc4a:	f7ff fd8d 	bl	800d768 <xTaskCreateStatic>
 800dc4e:	4603      	mov	r3, r0
 800dc50:	4a1d      	ldr	r2, [pc, #116]	; (800dcc8 <vTaskStartScheduler+0xb0>)
 800dc52:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800dc54:	4b1c      	ldr	r3, [pc, #112]	; (800dcc8 <vTaskStartScheduler+0xb0>)
 800dc56:	681b      	ldr	r3, [r3, #0]
 800dc58:	2b00      	cmp	r3, #0
 800dc5a:	d002      	beq.n	800dc62 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800dc5c:	2301      	movs	r3, #1
 800dc5e:	617b      	str	r3, [r7, #20]
 800dc60:	e001      	b.n	800dc66 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800dc62:	2300      	movs	r3, #0
 800dc64:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800dc66:	697b      	ldr	r3, [r7, #20]
 800dc68:	2b01      	cmp	r3, #1
 800dc6a:	d116      	bne.n	800dc9a <vTaskStartScheduler+0x82>
	__asm volatile
 800dc6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc70:	f383 8811 	msr	BASEPRI, r3
 800dc74:	f3bf 8f6f 	isb	sy
 800dc78:	f3bf 8f4f 	dsb	sy
 800dc7c:	613b      	str	r3, [r7, #16]
}
 800dc7e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800dc80:	4b12      	ldr	r3, [pc, #72]	; (800dccc <vTaskStartScheduler+0xb4>)
 800dc82:	f04f 32ff 	mov.w	r2, #4294967295
 800dc86:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800dc88:	4b11      	ldr	r3, [pc, #68]	; (800dcd0 <vTaskStartScheduler+0xb8>)
 800dc8a:	2201      	movs	r2, #1
 800dc8c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800dc8e:	4b11      	ldr	r3, [pc, #68]	; (800dcd4 <vTaskStartScheduler+0xbc>)
 800dc90:	2200      	movs	r2, #0
 800dc92:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800dc94:	f000 fd54 	bl	800e740 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800dc98:	e00e      	b.n	800dcb8 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800dc9a:	697b      	ldr	r3, [r7, #20]
 800dc9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dca0:	d10a      	bne.n	800dcb8 <vTaskStartScheduler+0xa0>
	__asm volatile
 800dca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dca6:	f383 8811 	msr	BASEPRI, r3
 800dcaa:	f3bf 8f6f 	isb	sy
 800dcae:	f3bf 8f4f 	dsb	sy
 800dcb2:	60fb      	str	r3, [r7, #12]
}
 800dcb4:	bf00      	nop
 800dcb6:	e7fe      	b.n	800dcb6 <vTaskStartScheduler+0x9e>
}
 800dcb8:	bf00      	nop
 800dcba:	3718      	adds	r7, #24
 800dcbc:	46bd      	mov	sp, r7
 800dcbe:	bd80      	pop	{r7, pc}
 800dcc0:	080143c0 	.word	0x080143c0
 800dcc4:	0800e269 	.word	0x0800e269
 800dcc8:	20000d00 	.word	0x20000d00
 800dccc:	20000cfc 	.word	0x20000cfc
 800dcd0:	20000ce8 	.word	0x20000ce8
 800dcd4:	20000ce0 	.word	0x20000ce0

0800dcd8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800dcd8:	b480      	push	{r7}
 800dcda:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800dcdc:	4b04      	ldr	r3, [pc, #16]	; (800dcf0 <vTaskSuspendAll+0x18>)
 800dcde:	681b      	ldr	r3, [r3, #0]
 800dce0:	3301      	adds	r3, #1
 800dce2:	4a03      	ldr	r2, [pc, #12]	; (800dcf0 <vTaskSuspendAll+0x18>)
 800dce4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800dce6:	bf00      	nop
 800dce8:	46bd      	mov	sp, r7
 800dcea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcee:	4770      	bx	lr
 800dcf0:	20000d04 	.word	0x20000d04

0800dcf4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800dcf4:	b580      	push	{r7, lr}
 800dcf6:	b084      	sub	sp, #16
 800dcf8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800dcfa:	2300      	movs	r3, #0
 800dcfc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800dcfe:	2300      	movs	r3, #0
 800dd00:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800dd02:	4b41      	ldr	r3, [pc, #260]	; (800de08 <xTaskResumeAll+0x114>)
 800dd04:	681b      	ldr	r3, [r3, #0]
 800dd06:	2b00      	cmp	r3, #0
 800dd08:	d10a      	bne.n	800dd20 <xTaskResumeAll+0x2c>
	__asm volatile
 800dd0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd0e:	f383 8811 	msr	BASEPRI, r3
 800dd12:	f3bf 8f6f 	isb	sy
 800dd16:	f3bf 8f4f 	dsb	sy
 800dd1a:	603b      	str	r3, [r7, #0]
}
 800dd1c:	bf00      	nop
 800dd1e:	e7fe      	b.n	800dd1e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800dd20:	f000 fdb0 	bl	800e884 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800dd24:	4b38      	ldr	r3, [pc, #224]	; (800de08 <xTaskResumeAll+0x114>)
 800dd26:	681b      	ldr	r3, [r3, #0]
 800dd28:	3b01      	subs	r3, #1
 800dd2a:	4a37      	ldr	r2, [pc, #220]	; (800de08 <xTaskResumeAll+0x114>)
 800dd2c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dd2e:	4b36      	ldr	r3, [pc, #216]	; (800de08 <xTaskResumeAll+0x114>)
 800dd30:	681b      	ldr	r3, [r3, #0]
 800dd32:	2b00      	cmp	r3, #0
 800dd34:	d161      	bne.n	800ddfa <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800dd36:	4b35      	ldr	r3, [pc, #212]	; (800de0c <xTaskResumeAll+0x118>)
 800dd38:	681b      	ldr	r3, [r3, #0]
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	d05d      	beq.n	800ddfa <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800dd3e:	e02e      	b.n	800dd9e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dd40:	4b33      	ldr	r3, [pc, #204]	; (800de10 <xTaskResumeAll+0x11c>)
 800dd42:	68db      	ldr	r3, [r3, #12]
 800dd44:	68db      	ldr	r3, [r3, #12]
 800dd46:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800dd48:	68fb      	ldr	r3, [r7, #12]
 800dd4a:	3318      	adds	r3, #24
 800dd4c:	4618      	mov	r0, r3
 800dd4e:	f7ff f931 	bl	800cfb4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dd52:	68fb      	ldr	r3, [r7, #12]
 800dd54:	3304      	adds	r3, #4
 800dd56:	4618      	mov	r0, r3
 800dd58:	f7ff f92c 	bl	800cfb4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800dd5c:	68fb      	ldr	r3, [r7, #12]
 800dd5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd60:	2201      	movs	r2, #1
 800dd62:	409a      	lsls	r2, r3
 800dd64:	4b2b      	ldr	r3, [pc, #172]	; (800de14 <xTaskResumeAll+0x120>)
 800dd66:	681b      	ldr	r3, [r3, #0]
 800dd68:	4313      	orrs	r3, r2
 800dd6a:	4a2a      	ldr	r2, [pc, #168]	; (800de14 <xTaskResumeAll+0x120>)
 800dd6c:	6013      	str	r3, [r2, #0]
 800dd6e:	68fb      	ldr	r3, [r7, #12]
 800dd70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd72:	4613      	mov	r3, r2
 800dd74:	009b      	lsls	r3, r3, #2
 800dd76:	4413      	add	r3, r2
 800dd78:	009b      	lsls	r3, r3, #2
 800dd7a:	4a27      	ldr	r2, [pc, #156]	; (800de18 <xTaskResumeAll+0x124>)
 800dd7c:	441a      	add	r2, r3
 800dd7e:	68fb      	ldr	r3, [r7, #12]
 800dd80:	3304      	adds	r3, #4
 800dd82:	4619      	mov	r1, r3
 800dd84:	4610      	mov	r0, r2
 800dd86:	f7ff f8b8 	bl	800cefa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800dd8a:	68fb      	ldr	r3, [r7, #12]
 800dd8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd8e:	4b23      	ldr	r3, [pc, #140]	; (800de1c <xTaskResumeAll+0x128>)
 800dd90:	681b      	ldr	r3, [r3, #0]
 800dd92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd94:	429a      	cmp	r2, r3
 800dd96:	d302      	bcc.n	800dd9e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800dd98:	4b21      	ldr	r3, [pc, #132]	; (800de20 <xTaskResumeAll+0x12c>)
 800dd9a:	2201      	movs	r2, #1
 800dd9c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800dd9e:	4b1c      	ldr	r3, [pc, #112]	; (800de10 <xTaskResumeAll+0x11c>)
 800dda0:	681b      	ldr	r3, [r3, #0]
 800dda2:	2b00      	cmp	r3, #0
 800dda4:	d1cc      	bne.n	800dd40 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800dda6:	68fb      	ldr	r3, [r7, #12]
 800dda8:	2b00      	cmp	r3, #0
 800ddaa:	d001      	beq.n	800ddb0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ddac:	f000 fb12 	bl	800e3d4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800ddb0:	4b1c      	ldr	r3, [pc, #112]	; (800de24 <xTaskResumeAll+0x130>)
 800ddb2:	681b      	ldr	r3, [r3, #0]
 800ddb4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	d010      	beq.n	800ddde <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ddbc:	f000 f836 	bl	800de2c <xTaskIncrementTick>
 800ddc0:	4603      	mov	r3, r0
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	d002      	beq.n	800ddcc <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800ddc6:	4b16      	ldr	r3, [pc, #88]	; (800de20 <xTaskResumeAll+0x12c>)
 800ddc8:	2201      	movs	r2, #1
 800ddca:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	3b01      	subs	r3, #1
 800ddd0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	2b00      	cmp	r3, #0
 800ddd6:	d1f1      	bne.n	800ddbc <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800ddd8:	4b12      	ldr	r3, [pc, #72]	; (800de24 <xTaskResumeAll+0x130>)
 800ddda:	2200      	movs	r2, #0
 800dddc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ddde:	4b10      	ldr	r3, [pc, #64]	; (800de20 <xTaskResumeAll+0x12c>)
 800dde0:	681b      	ldr	r3, [r3, #0]
 800dde2:	2b00      	cmp	r3, #0
 800dde4:	d009      	beq.n	800ddfa <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800dde6:	2301      	movs	r3, #1
 800dde8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ddea:	4b0f      	ldr	r3, [pc, #60]	; (800de28 <xTaskResumeAll+0x134>)
 800ddec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ddf0:	601a      	str	r2, [r3, #0]
 800ddf2:	f3bf 8f4f 	dsb	sy
 800ddf6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ddfa:	f000 fd73 	bl	800e8e4 <vPortExitCritical>

	return xAlreadyYielded;
 800ddfe:	68bb      	ldr	r3, [r7, #8]
}
 800de00:	4618      	mov	r0, r3
 800de02:	3710      	adds	r7, #16
 800de04:	46bd      	mov	sp, r7
 800de06:	bd80      	pop	{r7, pc}
 800de08:	20000d04 	.word	0x20000d04
 800de0c:	20000cdc 	.word	0x20000cdc
 800de10:	20000c9c 	.word	0x20000c9c
 800de14:	20000ce4 	.word	0x20000ce4
 800de18:	20000be0 	.word	0x20000be0
 800de1c:	20000bdc 	.word	0x20000bdc
 800de20:	20000cf0 	.word	0x20000cf0
 800de24:	20000cec 	.word	0x20000cec
 800de28:	e000ed04 	.word	0xe000ed04

0800de2c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800de2c:	b580      	push	{r7, lr}
 800de2e:	b086      	sub	sp, #24
 800de30:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800de32:	2300      	movs	r3, #0
 800de34:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800de36:	4b4e      	ldr	r3, [pc, #312]	; (800df70 <xTaskIncrementTick+0x144>)
 800de38:	681b      	ldr	r3, [r3, #0]
 800de3a:	2b00      	cmp	r3, #0
 800de3c:	f040 808e 	bne.w	800df5c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800de40:	4b4c      	ldr	r3, [pc, #304]	; (800df74 <xTaskIncrementTick+0x148>)
 800de42:	681b      	ldr	r3, [r3, #0]
 800de44:	3301      	adds	r3, #1
 800de46:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800de48:	4a4a      	ldr	r2, [pc, #296]	; (800df74 <xTaskIncrementTick+0x148>)
 800de4a:	693b      	ldr	r3, [r7, #16]
 800de4c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800de4e:	693b      	ldr	r3, [r7, #16]
 800de50:	2b00      	cmp	r3, #0
 800de52:	d120      	bne.n	800de96 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800de54:	4b48      	ldr	r3, [pc, #288]	; (800df78 <xTaskIncrementTick+0x14c>)
 800de56:	681b      	ldr	r3, [r3, #0]
 800de58:	681b      	ldr	r3, [r3, #0]
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	d00a      	beq.n	800de74 <xTaskIncrementTick+0x48>
	__asm volatile
 800de5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de62:	f383 8811 	msr	BASEPRI, r3
 800de66:	f3bf 8f6f 	isb	sy
 800de6a:	f3bf 8f4f 	dsb	sy
 800de6e:	603b      	str	r3, [r7, #0]
}
 800de70:	bf00      	nop
 800de72:	e7fe      	b.n	800de72 <xTaskIncrementTick+0x46>
 800de74:	4b40      	ldr	r3, [pc, #256]	; (800df78 <xTaskIncrementTick+0x14c>)
 800de76:	681b      	ldr	r3, [r3, #0]
 800de78:	60fb      	str	r3, [r7, #12]
 800de7a:	4b40      	ldr	r3, [pc, #256]	; (800df7c <xTaskIncrementTick+0x150>)
 800de7c:	681b      	ldr	r3, [r3, #0]
 800de7e:	4a3e      	ldr	r2, [pc, #248]	; (800df78 <xTaskIncrementTick+0x14c>)
 800de80:	6013      	str	r3, [r2, #0]
 800de82:	4a3e      	ldr	r2, [pc, #248]	; (800df7c <xTaskIncrementTick+0x150>)
 800de84:	68fb      	ldr	r3, [r7, #12]
 800de86:	6013      	str	r3, [r2, #0]
 800de88:	4b3d      	ldr	r3, [pc, #244]	; (800df80 <xTaskIncrementTick+0x154>)
 800de8a:	681b      	ldr	r3, [r3, #0]
 800de8c:	3301      	adds	r3, #1
 800de8e:	4a3c      	ldr	r2, [pc, #240]	; (800df80 <xTaskIncrementTick+0x154>)
 800de90:	6013      	str	r3, [r2, #0]
 800de92:	f000 fa9f 	bl	800e3d4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800de96:	4b3b      	ldr	r3, [pc, #236]	; (800df84 <xTaskIncrementTick+0x158>)
 800de98:	681b      	ldr	r3, [r3, #0]
 800de9a:	693a      	ldr	r2, [r7, #16]
 800de9c:	429a      	cmp	r2, r3
 800de9e:	d348      	bcc.n	800df32 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dea0:	4b35      	ldr	r3, [pc, #212]	; (800df78 <xTaskIncrementTick+0x14c>)
 800dea2:	681b      	ldr	r3, [r3, #0]
 800dea4:	681b      	ldr	r3, [r3, #0]
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	d104      	bne.n	800deb4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800deaa:	4b36      	ldr	r3, [pc, #216]	; (800df84 <xTaskIncrementTick+0x158>)
 800deac:	f04f 32ff 	mov.w	r2, #4294967295
 800deb0:	601a      	str	r2, [r3, #0]
					break;
 800deb2:	e03e      	b.n	800df32 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800deb4:	4b30      	ldr	r3, [pc, #192]	; (800df78 <xTaskIncrementTick+0x14c>)
 800deb6:	681b      	ldr	r3, [r3, #0]
 800deb8:	68db      	ldr	r3, [r3, #12]
 800deba:	68db      	ldr	r3, [r3, #12]
 800debc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800debe:	68bb      	ldr	r3, [r7, #8]
 800dec0:	685b      	ldr	r3, [r3, #4]
 800dec2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800dec4:	693a      	ldr	r2, [r7, #16]
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	429a      	cmp	r2, r3
 800deca:	d203      	bcs.n	800ded4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800decc:	4a2d      	ldr	r2, [pc, #180]	; (800df84 <xTaskIncrementTick+0x158>)
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ded2:	e02e      	b.n	800df32 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ded4:	68bb      	ldr	r3, [r7, #8]
 800ded6:	3304      	adds	r3, #4
 800ded8:	4618      	mov	r0, r3
 800deda:	f7ff f86b 	bl	800cfb4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800dede:	68bb      	ldr	r3, [r7, #8]
 800dee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dee2:	2b00      	cmp	r3, #0
 800dee4:	d004      	beq.n	800def0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800dee6:	68bb      	ldr	r3, [r7, #8]
 800dee8:	3318      	adds	r3, #24
 800deea:	4618      	mov	r0, r3
 800deec:	f7ff f862 	bl	800cfb4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800def0:	68bb      	ldr	r3, [r7, #8]
 800def2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800def4:	2201      	movs	r2, #1
 800def6:	409a      	lsls	r2, r3
 800def8:	4b23      	ldr	r3, [pc, #140]	; (800df88 <xTaskIncrementTick+0x15c>)
 800defa:	681b      	ldr	r3, [r3, #0]
 800defc:	4313      	orrs	r3, r2
 800defe:	4a22      	ldr	r2, [pc, #136]	; (800df88 <xTaskIncrementTick+0x15c>)
 800df00:	6013      	str	r3, [r2, #0]
 800df02:	68bb      	ldr	r3, [r7, #8]
 800df04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df06:	4613      	mov	r3, r2
 800df08:	009b      	lsls	r3, r3, #2
 800df0a:	4413      	add	r3, r2
 800df0c:	009b      	lsls	r3, r3, #2
 800df0e:	4a1f      	ldr	r2, [pc, #124]	; (800df8c <xTaskIncrementTick+0x160>)
 800df10:	441a      	add	r2, r3
 800df12:	68bb      	ldr	r3, [r7, #8]
 800df14:	3304      	adds	r3, #4
 800df16:	4619      	mov	r1, r3
 800df18:	4610      	mov	r0, r2
 800df1a:	f7fe ffee 	bl	800cefa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800df1e:	68bb      	ldr	r3, [r7, #8]
 800df20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df22:	4b1b      	ldr	r3, [pc, #108]	; (800df90 <xTaskIncrementTick+0x164>)
 800df24:	681b      	ldr	r3, [r3, #0]
 800df26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df28:	429a      	cmp	r2, r3
 800df2a:	d3b9      	bcc.n	800dea0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800df2c:	2301      	movs	r3, #1
 800df2e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800df30:	e7b6      	b.n	800dea0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800df32:	4b17      	ldr	r3, [pc, #92]	; (800df90 <xTaskIncrementTick+0x164>)
 800df34:	681b      	ldr	r3, [r3, #0]
 800df36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df38:	4914      	ldr	r1, [pc, #80]	; (800df8c <xTaskIncrementTick+0x160>)
 800df3a:	4613      	mov	r3, r2
 800df3c:	009b      	lsls	r3, r3, #2
 800df3e:	4413      	add	r3, r2
 800df40:	009b      	lsls	r3, r3, #2
 800df42:	440b      	add	r3, r1
 800df44:	681b      	ldr	r3, [r3, #0]
 800df46:	2b01      	cmp	r3, #1
 800df48:	d901      	bls.n	800df4e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800df4a:	2301      	movs	r3, #1
 800df4c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800df4e:	4b11      	ldr	r3, [pc, #68]	; (800df94 <xTaskIncrementTick+0x168>)
 800df50:	681b      	ldr	r3, [r3, #0]
 800df52:	2b00      	cmp	r3, #0
 800df54:	d007      	beq.n	800df66 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800df56:	2301      	movs	r3, #1
 800df58:	617b      	str	r3, [r7, #20]
 800df5a:	e004      	b.n	800df66 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800df5c:	4b0e      	ldr	r3, [pc, #56]	; (800df98 <xTaskIncrementTick+0x16c>)
 800df5e:	681b      	ldr	r3, [r3, #0]
 800df60:	3301      	adds	r3, #1
 800df62:	4a0d      	ldr	r2, [pc, #52]	; (800df98 <xTaskIncrementTick+0x16c>)
 800df64:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800df66:	697b      	ldr	r3, [r7, #20]
}
 800df68:	4618      	mov	r0, r3
 800df6a:	3718      	adds	r7, #24
 800df6c:	46bd      	mov	sp, r7
 800df6e:	bd80      	pop	{r7, pc}
 800df70:	20000d04 	.word	0x20000d04
 800df74:	20000ce0 	.word	0x20000ce0
 800df78:	20000c94 	.word	0x20000c94
 800df7c:	20000c98 	.word	0x20000c98
 800df80:	20000cf4 	.word	0x20000cf4
 800df84:	20000cfc 	.word	0x20000cfc
 800df88:	20000ce4 	.word	0x20000ce4
 800df8c:	20000be0 	.word	0x20000be0
 800df90:	20000bdc 	.word	0x20000bdc
 800df94:	20000cf0 	.word	0x20000cf0
 800df98:	20000cec 	.word	0x20000cec

0800df9c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800df9c:	b480      	push	{r7}
 800df9e:	b087      	sub	sp, #28
 800dfa0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800dfa2:	4b27      	ldr	r3, [pc, #156]	; (800e040 <vTaskSwitchContext+0xa4>)
 800dfa4:	681b      	ldr	r3, [r3, #0]
 800dfa6:	2b00      	cmp	r3, #0
 800dfa8:	d003      	beq.n	800dfb2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800dfaa:	4b26      	ldr	r3, [pc, #152]	; (800e044 <vTaskSwitchContext+0xa8>)
 800dfac:	2201      	movs	r2, #1
 800dfae:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800dfb0:	e03f      	b.n	800e032 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800dfb2:	4b24      	ldr	r3, [pc, #144]	; (800e044 <vTaskSwitchContext+0xa8>)
 800dfb4:	2200      	movs	r2, #0
 800dfb6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dfb8:	4b23      	ldr	r3, [pc, #140]	; (800e048 <vTaskSwitchContext+0xac>)
 800dfba:	681b      	ldr	r3, [r3, #0]
 800dfbc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800dfbe:	68fb      	ldr	r3, [r7, #12]
 800dfc0:	fab3 f383 	clz	r3, r3
 800dfc4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800dfc6:	7afb      	ldrb	r3, [r7, #11]
 800dfc8:	f1c3 031f 	rsb	r3, r3, #31
 800dfcc:	617b      	str	r3, [r7, #20]
 800dfce:	491f      	ldr	r1, [pc, #124]	; (800e04c <vTaskSwitchContext+0xb0>)
 800dfd0:	697a      	ldr	r2, [r7, #20]
 800dfd2:	4613      	mov	r3, r2
 800dfd4:	009b      	lsls	r3, r3, #2
 800dfd6:	4413      	add	r3, r2
 800dfd8:	009b      	lsls	r3, r3, #2
 800dfda:	440b      	add	r3, r1
 800dfdc:	681b      	ldr	r3, [r3, #0]
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	d10a      	bne.n	800dff8 <vTaskSwitchContext+0x5c>
	__asm volatile
 800dfe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfe6:	f383 8811 	msr	BASEPRI, r3
 800dfea:	f3bf 8f6f 	isb	sy
 800dfee:	f3bf 8f4f 	dsb	sy
 800dff2:	607b      	str	r3, [r7, #4]
}
 800dff4:	bf00      	nop
 800dff6:	e7fe      	b.n	800dff6 <vTaskSwitchContext+0x5a>
 800dff8:	697a      	ldr	r2, [r7, #20]
 800dffa:	4613      	mov	r3, r2
 800dffc:	009b      	lsls	r3, r3, #2
 800dffe:	4413      	add	r3, r2
 800e000:	009b      	lsls	r3, r3, #2
 800e002:	4a12      	ldr	r2, [pc, #72]	; (800e04c <vTaskSwitchContext+0xb0>)
 800e004:	4413      	add	r3, r2
 800e006:	613b      	str	r3, [r7, #16]
 800e008:	693b      	ldr	r3, [r7, #16]
 800e00a:	685b      	ldr	r3, [r3, #4]
 800e00c:	685a      	ldr	r2, [r3, #4]
 800e00e:	693b      	ldr	r3, [r7, #16]
 800e010:	605a      	str	r2, [r3, #4]
 800e012:	693b      	ldr	r3, [r7, #16]
 800e014:	685a      	ldr	r2, [r3, #4]
 800e016:	693b      	ldr	r3, [r7, #16]
 800e018:	3308      	adds	r3, #8
 800e01a:	429a      	cmp	r2, r3
 800e01c:	d104      	bne.n	800e028 <vTaskSwitchContext+0x8c>
 800e01e:	693b      	ldr	r3, [r7, #16]
 800e020:	685b      	ldr	r3, [r3, #4]
 800e022:	685a      	ldr	r2, [r3, #4]
 800e024:	693b      	ldr	r3, [r7, #16]
 800e026:	605a      	str	r2, [r3, #4]
 800e028:	693b      	ldr	r3, [r7, #16]
 800e02a:	685b      	ldr	r3, [r3, #4]
 800e02c:	68db      	ldr	r3, [r3, #12]
 800e02e:	4a08      	ldr	r2, [pc, #32]	; (800e050 <vTaskSwitchContext+0xb4>)
 800e030:	6013      	str	r3, [r2, #0]
}
 800e032:	bf00      	nop
 800e034:	371c      	adds	r7, #28
 800e036:	46bd      	mov	sp, r7
 800e038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e03c:	4770      	bx	lr
 800e03e:	bf00      	nop
 800e040:	20000d04 	.word	0x20000d04
 800e044:	20000cf0 	.word	0x20000cf0
 800e048:	20000ce4 	.word	0x20000ce4
 800e04c:	20000be0 	.word	0x20000be0
 800e050:	20000bdc 	.word	0x20000bdc

0800e054 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e054:	b580      	push	{r7, lr}
 800e056:	b084      	sub	sp, #16
 800e058:	af00      	add	r7, sp, #0
 800e05a:	6078      	str	r0, [r7, #4]
 800e05c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	2b00      	cmp	r3, #0
 800e062:	d10a      	bne.n	800e07a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800e064:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e068:	f383 8811 	msr	BASEPRI, r3
 800e06c:	f3bf 8f6f 	isb	sy
 800e070:	f3bf 8f4f 	dsb	sy
 800e074:	60fb      	str	r3, [r7, #12]
}
 800e076:	bf00      	nop
 800e078:	e7fe      	b.n	800e078 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e07a:	4b07      	ldr	r3, [pc, #28]	; (800e098 <vTaskPlaceOnEventList+0x44>)
 800e07c:	681b      	ldr	r3, [r3, #0]
 800e07e:	3318      	adds	r3, #24
 800e080:	4619      	mov	r1, r3
 800e082:	6878      	ldr	r0, [r7, #4]
 800e084:	f7fe ff5d 	bl	800cf42 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e088:	2101      	movs	r1, #1
 800e08a:	6838      	ldr	r0, [r7, #0]
 800e08c:	f000 fa66 	bl	800e55c <prvAddCurrentTaskToDelayedList>
}
 800e090:	bf00      	nop
 800e092:	3710      	adds	r7, #16
 800e094:	46bd      	mov	sp, r7
 800e096:	bd80      	pop	{r7, pc}
 800e098:	20000bdc 	.word	0x20000bdc

0800e09c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e09c:	b580      	push	{r7, lr}
 800e09e:	b086      	sub	sp, #24
 800e0a0:	af00      	add	r7, sp, #0
 800e0a2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	68db      	ldr	r3, [r3, #12]
 800e0a8:	68db      	ldr	r3, [r3, #12]
 800e0aa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e0ac:	693b      	ldr	r3, [r7, #16]
 800e0ae:	2b00      	cmp	r3, #0
 800e0b0:	d10a      	bne.n	800e0c8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800e0b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0b6:	f383 8811 	msr	BASEPRI, r3
 800e0ba:	f3bf 8f6f 	isb	sy
 800e0be:	f3bf 8f4f 	dsb	sy
 800e0c2:	60fb      	str	r3, [r7, #12]
}
 800e0c4:	bf00      	nop
 800e0c6:	e7fe      	b.n	800e0c6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e0c8:	693b      	ldr	r3, [r7, #16]
 800e0ca:	3318      	adds	r3, #24
 800e0cc:	4618      	mov	r0, r3
 800e0ce:	f7fe ff71 	bl	800cfb4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e0d2:	4b1d      	ldr	r3, [pc, #116]	; (800e148 <xTaskRemoveFromEventList+0xac>)
 800e0d4:	681b      	ldr	r3, [r3, #0]
 800e0d6:	2b00      	cmp	r3, #0
 800e0d8:	d11c      	bne.n	800e114 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e0da:	693b      	ldr	r3, [r7, #16]
 800e0dc:	3304      	adds	r3, #4
 800e0de:	4618      	mov	r0, r3
 800e0e0:	f7fe ff68 	bl	800cfb4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e0e4:	693b      	ldr	r3, [r7, #16]
 800e0e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0e8:	2201      	movs	r2, #1
 800e0ea:	409a      	lsls	r2, r3
 800e0ec:	4b17      	ldr	r3, [pc, #92]	; (800e14c <xTaskRemoveFromEventList+0xb0>)
 800e0ee:	681b      	ldr	r3, [r3, #0]
 800e0f0:	4313      	orrs	r3, r2
 800e0f2:	4a16      	ldr	r2, [pc, #88]	; (800e14c <xTaskRemoveFromEventList+0xb0>)
 800e0f4:	6013      	str	r3, [r2, #0]
 800e0f6:	693b      	ldr	r3, [r7, #16]
 800e0f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e0fa:	4613      	mov	r3, r2
 800e0fc:	009b      	lsls	r3, r3, #2
 800e0fe:	4413      	add	r3, r2
 800e100:	009b      	lsls	r3, r3, #2
 800e102:	4a13      	ldr	r2, [pc, #76]	; (800e150 <xTaskRemoveFromEventList+0xb4>)
 800e104:	441a      	add	r2, r3
 800e106:	693b      	ldr	r3, [r7, #16]
 800e108:	3304      	adds	r3, #4
 800e10a:	4619      	mov	r1, r3
 800e10c:	4610      	mov	r0, r2
 800e10e:	f7fe fef4 	bl	800cefa <vListInsertEnd>
 800e112:	e005      	b.n	800e120 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e114:	693b      	ldr	r3, [r7, #16]
 800e116:	3318      	adds	r3, #24
 800e118:	4619      	mov	r1, r3
 800e11a:	480e      	ldr	r0, [pc, #56]	; (800e154 <xTaskRemoveFromEventList+0xb8>)
 800e11c:	f7fe feed 	bl	800cefa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e120:	693b      	ldr	r3, [r7, #16]
 800e122:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e124:	4b0c      	ldr	r3, [pc, #48]	; (800e158 <xTaskRemoveFromEventList+0xbc>)
 800e126:	681b      	ldr	r3, [r3, #0]
 800e128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e12a:	429a      	cmp	r2, r3
 800e12c:	d905      	bls.n	800e13a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e12e:	2301      	movs	r3, #1
 800e130:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e132:	4b0a      	ldr	r3, [pc, #40]	; (800e15c <xTaskRemoveFromEventList+0xc0>)
 800e134:	2201      	movs	r2, #1
 800e136:	601a      	str	r2, [r3, #0]
 800e138:	e001      	b.n	800e13e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800e13a:	2300      	movs	r3, #0
 800e13c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e13e:	697b      	ldr	r3, [r7, #20]
}
 800e140:	4618      	mov	r0, r3
 800e142:	3718      	adds	r7, #24
 800e144:	46bd      	mov	sp, r7
 800e146:	bd80      	pop	{r7, pc}
 800e148:	20000d04 	.word	0x20000d04
 800e14c:	20000ce4 	.word	0x20000ce4
 800e150:	20000be0 	.word	0x20000be0
 800e154:	20000c9c 	.word	0x20000c9c
 800e158:	20000bdc 	.word	0x20000bdc
 800e15c:	20000cf0 	.word	0x20000cf0

0800e160 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e160:	b480      	push	{r7}
 800e162:	b083      	sub	sp, #12
 800e164:	af00      	add	r7, sp, #0
 800e166:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e168:	4b06      	ldr	r3, [pc, #24]	; (800e184 <vTaskInternalSetTimeOutState+0x24>)
 800e16a:	681a      	ldr	r2, [r3, #0]
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e170:	4b05      	ldr	r3, [pc, #20]	; (800e188 <vTaskInternalSetTimeOutState+0x28>)
 800e172:	681a      	ldr	r2, [r3, #0]
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	605a      	str	r2, [r3, #4]
}
 800e178:	bf00      	nop
 800e17a:	370c      	adds	r7, #12
 800e17c:	46bd      	mov	sp, r7
 800e17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e182:	4770      	bx	lr
 800e184:	20000cf4 	.word	0x20000cf4
 800e188:	20000ce0 	.word	0x20000ce0

0800e18c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e18c:	b580      	push	{r7, lr}
 800e18e:	b088      	sub	sp, #32
 800e190:	af00      	add	r7, sp, #0
 800e192:	6078      	str	r0, [r7, #4]
 800e194:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	2b00      	cmp	r3, #0
 800e19a:	d10a      	bne.n	800e1b2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800e19c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1a0:	f383 8811 	msr	BASEPRI, r3
 800e1a4:	f3bf 8f6f 	isb	sy
 800e1a8:	f3bf 8f4f 	dsb	sy
 800e1ac:	613b      	str	r3, [r7, #16]
}
 800e1ae:	bf00      	nop
 800e1b0:	e7fe      	b.n	800e1b0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800e1b2:	683b      	ldr	r3, [r7, #0]
 800e1b4:	2b00      	cmp	r3, #0
 800e1b6:	d10a      	bne.n	800e1ce <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800e1b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1bc:	f383 8811 	msr	BASEPRI, r3
 800e1c0:	f3bf 8f6f 	isb	sy
 800e1c4:	f3bf 8f4f 	dsb	sy
 800e1c8:	60fb      	str	r3, [r7, #12]
}
 800e1ca:	bf00      	nop
 800e1cc:	e7fe      	b.n	800e1cc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800e1ce:	f000 fb59 	bl	800e884 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e1d2:	4b1d      	ldr	r3, [pc, #116]	; (800e248 <xTaskCheckForTimeOut+0xbc>)
 800e1d4:	681b      	ldr	r3, [r3, #0]
 800e1d6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	685b      	ldr	r3, [r3, #4]
 800e1dc:	69ba      	ldr	r2, [r7, #24]
 800e1de:	1ad3      	subs	r3, r2, r3
 800e1e0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e1e2:	683b      	ldr	r3, [r7, #0]
 800e1e4:	681b      	ldr	r3, [r3, #0]
 800e1e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e1ea:	d102      	bne.n	800e1f2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e1ec:	2300      	movs	r3, #0
 800e1ee:	61fb      	str	r3, [r7, #28]
 800e1f0:	e023      	b.n	800e23a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	681a      	ldr	r2, [r3, #0]
 800e1f6:	4b15      	ldr	r3, [pc, #84]	; (800e24c <xTaskCheckForTimeOut+0xc0>)
 800e1f8:	681b      	ldr	r3, [r3, #0]
 800e1fa:	429a      	cmp	r2, r3
 800e1fc:	d007      	beq.n	800e20e <xTaskCheckForTimeOut+0x82>
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	685b      	ldr	r3, [r3, #4]
 800e202:	69ba      	ldr	r2, [r7, #24]
 800e204:	429a      	cmp	r2, r3
 800e206:	d302      	bcc.n	800e20e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e208:	2301      	movs	r3, #1
 800e20a:	61fb      	str	r3, [r7, #28]
 800e20c:	e015      	b.n	800e23a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e20e:	683b      	ldr	r3, [r7, #0]
 800e210:	681b      	ldr	r3, [r3, #0]
 800e212:	697a      	ldr	r2, [r7, #20]
 800e214:	429a      	cmp	r2, r3
 800e216:	d20b      	bcs.n	800e230 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e218:	683b      	ldr	r3, [r7, #0]
 800e21a:	681a      	ldr	r2, [r3, #0]
 800e21c:	697b      	ldr	r3, [r7, #20]
 800e21e:	1ad2      	subs	r2, r2, r3
 800e220:	683b      	ldr	r3, [r7, #0]
 800e222:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e224:	6878      	ldr	r0, [r7, #4]
 800e226:	f7ff ff9b 	bl	800e160 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e22a:	2300      	movs	r3, #0
 800e22c:	61fb      	str	r3, [r7, #28]
 800e22e:	e004      	b.n	800e23a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800e230:	683b      	ldr	r3, [r7, #0]
 800e232:	2200      	movs	r2, #0
 800e234:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e236:	2301      	movs	r3, #1
 800e238:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e23a:	f000 fb53 	bl	800e8e4 <vPortExitCritical>

	return xReturn;
 800e23e:	69fb      	ldr	r3, [r7, #28]
}
 800e240:	4618      	mov	r0, r3
 800e242:	3720      	adds	r7, #32
 800e244:	46bd      	mov	sp, r7
 800e246:	bd80      	pop	{r7, pc}
 800e248:	20000ce0 	.word	0x20000ce0
 800e24c:	20000cf4 	.word	0x20000cf4

0800e250 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e250:	b480      	push	{r7}
 800e252:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e254:	4b03      	ldr	r3, [pc, #12]	; (800e264 <vTaskMissedYield+0x14>)
 800e256:	2201      	movs	r2, #1
 800e258:	601a      	str	r2, [r3, #0]
}
 800e25a:	bf00      	nop
 800e25c:	46bd      	mov	sp, r7
 800e25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e262:	4770      	bx	lr
 800e264:	20000cf0 	.word	0x20000cf0

0800e268 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e268:	b580      	push	{r7, lr}
 800e26a:	b082      	sub	sp, #8
 800e26c:	af00      	add	r7, sp, #0
 800e26e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e270:	f000 f852 	bl	800e318 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e274:	4b06      	ldr	r3, [pc, #24]	; (800e290 <prvIdleTask+0x28>)
 800e276:	681b      	ldr	r3, [r3, #0]
 800e278:	2b01      	cmp	r3, #1
 800e27a:	d9f9      	bls.n	800e270 <prvIdleTask+0x8>
			{
				taskYIELD();
 800e27c:	4b05      	ldr	r3, [pc, #20]	; (800e294 <prvIdleTask+0x2c>)
 800e27e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e282:	601a      	str	r2, [r3, #0]
 800e284:	f3bf 8f4f 	dsb	sy
 800e288:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800e28c:	e7f0      	b.n	800e270 <prvIdleTask+0x8>
 800e28e:	bf00      	nop
 800e290:	20000be0 	.word	0x20000be0
 800e294:	e000ed04 	.word	0xe000ed04

0800e298 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e298:	b580      	push	{r7, lr}
 800e29a:	b082      	sub	sp, #8
 800e29c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e29e:	2300      	movs	r3, #0
 800e2a0:	607b      	str	r3, [r7, #4]
 800e2a2:	e00c      	b.n	800e2be <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e2a4:	687a      	ldr	r2, [r7, #4]
 800e2a6:	4613      	mov	r3, r2
 800e2a8:	009b      	lsls	r3, r3, #2
 800e2aa:	4413      	add	r3, r2
 800e2ac:	009b      	lsls	r3, r3, #2
 800e2ae:	4a12      	ldr	r2, [pc, #72]	; (800e2f8 <prvInitialiseTaskLists+0x60>)
 800e2b0:	4413      	add	r3, r2
 800e2b2:	4618      	mov	r0, r3
 800e2b4:	f7fe fdf4 	bl	800cea0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	3301      	adds	r3, #1
 800e2bc:	607b      	str	r3, [r7, #4]
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	2b06      	cmp	r3, #6
 800e2c2:	d9ef      	bls.n	800e2a4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e2c4:	480d      	ldr	r0, [pc, #52]	; (800e2fc <prvInitialiseTaskLists+0x64>)
 800e2c6:	f7fe fdeb 	bl	800cea0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e2ca:	480d      	ldr	r0, [pc, #52]	; (800e300 <prvInitialiseTaskLists+0x68>)
 800e2cc:	f7fe fde8 	bl	800cea0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e2d0:	480c      	ldr	r0, [pc, #48]	; (800e304 <prvInitialiseTaskLists+0x6c>)
 800e2d2:	f7fe fde5 	bl	800cea0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e2d6:	480c      	ldr	r0, [pc, #48]	; (800e308 <prvInitialiseTaskLists+0x70>)
 800e2d8:	f7fe fde2 	bl	800cea0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e2dc:	480b      	ldr	r0, [pc, #44]	; (800e30c <prvInitialiseTaskLists+0x74>)
 800e2de:	f7fe fddf 	bl	800cea0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e2e2:	4b0b      	ldr	r3, [pc, #44]	; (800e310 <prvInitialiseTaskLists+0x78>)
 800e2e4:	4a05      	ldr	r2, [pc, #20]	; (800e2fc <prvInitialiseTaskLists+0x64>)
 800e2e6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e2e8:	4b0a      	ldr	r3, [pc, #40]	; (800e314 <prvInitialiseTaskLists+0x7c>)
 800e2ea:	4a05      	ldr	r2, [pc, #20]	; (800e300 <prvInitialiseTaskLists+0x68>)
 800e2ec:	601a      	str	r2, [r3, #0]
}
 800e2ee:	bf00      	nop
 800e2f0:	3708      	adds	r7, #8
 800e2f2:	46bd      	mov	sp, r7
 800e2f4:	bd80      	pop	{r7, pc}
 800e2f6:	bf00      	nop
 800e2f8:	20000be0 	.word	0x20000be0
 800e2fc:	20000c6c 	.word	0x20000c6c
 800e300:	20000c80 	.word	0x20000c80
 800e304:	20000c9c 	.word	0x20000c9c
 800e308:	20000cb0 	.word	0x20000cb0
 800e30c:	20000cc8 	.word	0x20000cc8
 800e310:	20000c94 	.word	0x20000c94
 800e314:	20000c98 	.word	0x20000c98

0800e318 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e318:	b580      	push	{r7, lr}
 800e31a:	b082      	sub	sp, #8
 800e31c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e31e:	e019      	b.n	800e354 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e320:	f000 fab0 	bl	800e884 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e324:	4b10      	ldr	r3, [pc, #64]	; (800e368 <prvCheckTasksWaitingTermination+0x50>)
 800e326:	68db      	ldr	r3, [r3, #12]
 800e328:	68db      	ldr	r3, [r3, #12]
 800e32a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	3304      	adds	r3, #4
 800e330:	4618      	mov	r0, r3
 800e332:	f7fe fe3f 	bl	800cfb4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e336:	4b0d      	ldr	r3, [pc, #52]	; (800e36c <prvCheckTasksWaitingTermination+0x54>)
 800e338:	681b      	ldr	r3, [r3, #0]
 800e33a:	3b01      	subs	r3, #1
 800e33c:	4a0b      	ldr	r2, [pc, #44]	; (800e36c <prvCheckTasksWaitingTermination+0x54>)
 800e33e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e340:	4b0b      	ldr	r3, [pc, #44]	; (800e370 <prvCheckTasksWaitingTermination+0x58>)
 800e342:	681b      	ldr	r3, [r3, #0]
 800e344:	3b01      	subs	r3, #1
 800e346:	4a0a      	ldr	r2, [pc, #40]	; (800e370 <prvCheckTasksWaitingTermination+0x58>)
 800e348:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e34a:	f000 facb 	bl	800e8e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e34e:	6878      	ldr	r0, [r7, #4]
 800e350:	f000 f810 	bl	800e374 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e354:	4b06      	ldr	r3, [pc, #24]	; (800e370 <prvCheckTasksWaitingTermination+0x58>)
 800e356:	681b      	ldr	r3, [r3, #0]
 800e358:	2b00      	cmp	r3, #0
 800e35a:	d1e1      	bne.n	800e320 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e35c:	bf00      	nop
 800e35e:	bf00      	nop
 800e360:	3708      	adds	r7, #8
 800e362:	46bd      	mov	sp, r7
 800e364:	bd80      	pop	{r7, pc}
 800e366:	bf00      	nop
 800e368:	20000cb0 	.word	0x20000cb0
 800e36c:	20000cdc 	.word	0x20000cdc
 800e370:	20000cc4 	.word	0x20000cc4

0800e374 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e374:	b580      	push	{r7, lr}
 800e376:	b084      	sub	sp, #16
 800e378:	af00      	add	r7, sp, #0
 800e37a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e382:	2b00      	cmp	r3, #0
 800e384:	d108      	bne.n	800e398 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e38a:	4618      	mov	r0, r3
 800e38c:	f000 fc28 	bl	800ebe0 <vPortFree>
				vPortFree( pxTCB );
 800e390:	6878      	ldr	r0, [r7, #4]
 800e392:	f000 fc25 	bl	800ebe0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e396:	e018      	b.n	800e3ca <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e39e:	2b01      	cmp	r3, #1
 800e3a0:	d103      	bne.n	800e3aa <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800e3a2:	6878      	ldr	r0, [r7, #4]
 800e3a4:	f000 fc1c 	bl	800ebe0 <vPortFree>
	}
 800e3a8:	e00f      	b.n	800e3ca <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e3b0:	2b02      	cmp	r3, #2
 800e3b2:	d00a      	beq.n	800e3ca <prvDeleteTCB+0x56>
	__asm volatile
 800e3b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3b8:	f383 8811 	msr	BASEPRI, r3
 800e3bc:	f3bf 8f6f 	isb	sy
 800e3c0:	f3bf 8f4f 	dsb	sy
 800e3c4:	60fb      	str	r3, [r7, #12]
}
 800e3c6:	bf00      	nop
 800e3c8:	e7fe      	b.n	800e3c8 <prvDeleteTCB+0x54>
	}
 800e3ca:	bf00      	nop
 800e3cc:	3710      	adds	r7, #16
 800e3ce:	46bd      	mov	sp, r7
 800e3d0:	bd80      	pop	{r7, pc}
	...

0800e3d4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e3d4:	b480      	push	{r7}
 800e3d6:	b083      	sub	sp, #12
 800e3d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e3da:	4b0c      	ldr	r3, [pc, #48]	; (800e40c <prvResetNextTaskUnblockTime+0x38>)
 800e3dc:	681b      	ldr	r3, [r3, #0]
 800e3de:	681b      	ldr	r3, [r3, #0]
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	d104      	bne.n	800e3ee <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e3e4:	4b0a      	ldr	r3, [pc, #40]	; (800e410 <prvResetNextTaskUnblockTime+0x3c>)
 800e3e6:	f04f 32ff 	mov.w	r2, #4294967295
 800e3ea:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e3ec:	e008      	b.n	800e400 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e3ee:	4b07      	ldr	r3, [pc, #28]	; (800e40c <prvResetNextTaskUnblockTime+0x38>)
 800e3f0:	681b      	ldr	r3, [r3, #0]
 800e3f2:	68db      	ldr	r3, [r3, #12]
 800e3f4:	68db      	ldr	r3, [r3, #12]
 800e3f6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	685b      	ldr	r3, [r3, #4]
 800e3fc:	4a04      	ldr	r2, [pc, #16]	; (800e410 <prvResetNextTaskUnblockTime+0x3c>)
 800e3fe:	6013      	str	r3, [r2, #0]
}
 800e400:	bf00      	nop
 800e402:	370c      	adds	r7, #12
 800e404:	46bd      	mov	sp, r7
 800e406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e40a:	4770      	bx	lr
 800e40c:	20000c94 	.word	0x20000c94
 800e410:	20000cfc 	.word	0x20000cfc

0800e414 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e414:	b480      	push	{r7}
 800e416:	b083      	sub	sp, #12
 800e418:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e41a:	4b0b      	ldr	r3, [pc, #44]	; (800e448 <xTaskGetSchedulerState+0x34>)
 800e41c:	681b      	ldr	r3, [r3, #0]
 800e41e:	2b00      	cmp	r3, #0
 800e420:	d102      	bne.n	800e428 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e422:	2301      	movs	r3, #1
 800e424:	607b      	str	r3, [r7, #4]
 800e426:	e008      	b.n	800e43a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e428:	4b08      	ldr	r3, [pc, #32]	; (800e44c <xTaskGetSchedulerState+0x38>)
 800e42a:	681b      	ldr	r3, [r3, #0]
 800e42c:	2b00      	cmp	r3, #0
 800e42e:	d102      	bne.n	800e436 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e430:	2302      	movs	r3, #2
 800e432:	607b      	str	r3, [r7, #4]
 800e434:	e001      	b.n	800e43a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e436:	2300      	movs	r3, #0
 800e438:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e43a:	687b      	ldr	r3, [r7, #4]
	}
 800e43c:	4618      	mov	r0, r3
 800e43e:	370c      	adds	r7, #12
 800e440:	46bd      	mov	sp, r7
 800e442:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e446:	4770      	bx	lr
 800e448:	20000ce8 	.word	0x20000ce8
 800e44c:	20000d04 	.word	0x20000d04

0800e450 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e450:	b580      	push	{r7, lr}
 800e452:	b086      	sub	sp, #24
 800e454:	af00      	add	r7, sp, #0
 800e456:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e45c:	2300      	movs	r3, #0
 800e45e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	2b00      	cmp	r3, #0
 800e464:	d06e      	beq.n	800e544 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e466:	4b3a      	ldr	r3, [pc, #232]	; (800e550 <xTaskPriorityDisinherit+0x100>)
 800e468:	681b      	ldr	r3, [r3, #0]
 800e46a:	693a      	ldr	r2, [r7, #16]
 800e46c:	429a      	cmp	r2, r3
 800e46e:	d00a      	beq.n	800e486 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800e470:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e474:	f383 8811 	msr	BASEPRI, r3
 800e478:	f3bf 8f6f 	isb	sy
 800e47c:	f3bf 8f4f 	dsb	sy
 800e480:	60fb      	str	r3, [r7, #12]
}
 800e482:	bf00      	nop
 800e484:	e7fe      	b.n	800e484 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800e486:	693b      	ldr	r3, [r7, #16]
 800e488:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e48a:	2b00      	cmp	r3, #0
 800e48c:	d10a      	bne.n	800e4a4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800e48e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e492:	f383 8811 	msr	BASEPRI, r3
 800e496:	f3bf 8f6f 	isb	sy
 800e49a:	f3bf 8f4f 	dsb	sy
 800e49e:	60bb      	str	r3, [r7, #8]
}
 800e4a0:	bf00      	nop
 800e4a2:	e7fe      	b.n	800e4a2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800e4a4:	693b      	ldr	r3, [r7, #16]
 800e4a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e4a8:	1e5a      	subs	r2, r3, #1
 800e4aa:	693b      	ldr	r3, [r7, #16]
 800e4ac:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e4ae:	693b      	ldr	r3, [r7, #16]
 800e4b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e4b2:	693b      	ldr	r3, [r7, #16]
 800e4b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e4b6:	429a      	cmp	r2, r3
 800e4b8:	d044      	beq.n	800e544 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e4ba:	693b      	ldr	r3, [r7, #16]
 800e4bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e4be:	2b00      	cmp	r3, #0
 800e4c0:	d140      	bne.n	800e544 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e4c2:	693b      	ldr	r3, [r7, #16]
 800e4c4:	3304      	adds	r3, #4
 800e4c6:	4618      	mov	r0, r3
 800e4c8:	f7fe fd74 	bl	800cfb4 <uxListRemove>
 800e4cc:	4603      	mov	r3, r0
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	d115      	bne.n	800e4fe <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800e4d2:	693b      	ldr	r3, [r7, #16]
 800e4d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e4d6:	491f      	ldr	r1, [pc, #124]	; (800e554 <xTaskPriorityDisinherit+0x104>)
 800e4d8:	4613      	mov	r3, r2
 800e4da:	009b      	lsls	r3, r3, #2
 800e4dc:	4413      	add	r3, r2
 800e4de:	009b      	lsls	r3, r3, #2
 800e4e0:	440b      	add	r3, r1
 800e4e2:	681b      	ldr	r3, [r3, #0]
 800e4e4:	2b00      	cmp	r3, #0
 800e4e6:	d10a      	bne.n	800e4fe <xTaskPriorityDisinherit+0xae>
 800e4e8:	693b      	ldr	r3, [r7, #16]
 800e4ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e4ec:	2201      	movs	r2, #1
 800e4ee:	fa02 f303 	lsl.w	r3, r2, r3
 800e4f2:	43da      	mvns	r2, r3
 800e4f4:	4b18      	ldr	r3, [pc, #96]	; (800e558 <xTaskPriorityDisinherit+0x108>)
 800e4f6:	681b      	ldr	r3, [r3, #0]
 800e4f8:	4013      	ands	r3, r2
 800e4fa:	4a17      	ldr	r2, [pc, #92]	; (800e558 <xTaskPriorityDisinherit+0x108>)
 800e4fc:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e4fe:	693b      	ldr	r3, [r7, #16]
 800e500:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e502:	693b      	ldr	r3, [r7, #16]
 800e504:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e506:	693b      	ldr	r3, [r7, #16]
 800e508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e50a:	f1c3 0207 	rsb	r2, r3, #7
 800e50e:	693b      	ldr	r3, [r7, #16]
 800e510:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e512:	693b      	ldr	r3, [r7, #16]
 800e514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e516:	2201      	movs	r2, #1
 800e518:	409a      	lsls	r2, r3
 800e51a:	4b0f      	ldr	r3, [pc, #60]	; (800e558 <xTaskPriorityDisinherit+0x108>)
 800e51c:	681b      	ldr	r3, [r3, #0]
 800e51e:	4313      	orrs	r3, r2
 800e520:	4a0d      	ldr	r2, [pc, #52]	; (800e558 <xTaskPriorityDisinherit+0x108>)
 800e522:	6013      	str	r3, [r2, #0]
 800e524:	693b      	ldr	r3, [r7, #16]
 800e526:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e528:	4613      	mov	r3, r2
 800e52a:	009b      	lsls	r3, r3, #2
 800e52c:	4413      	add	r3, r2
 800e52e:	009b      	lsls	r3, r3, #2
 800e530:	4a08      	ldr	r2, [pc, #32]	; (800e554 <xTaskPriorityDisinherit+0x104>)
 800e532:	441a      	add	r2, r3
 800e534:	693b      	ldr	r3, [r7, #16]
 800e536:	3304      	adds	r3, #4
 800e538:	4619      	mov	r1, r3
 800e53a:	4610      	mov	r0, r2
 800e53c:	f7fe fcdd 	bl	800cefa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e540:	2301      	movs	r3, #1
 800e542:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e544:	697b      	ldr	r3, [r7, #20]
	}
 800e546:	4618      	mov	r0, r3
 800e548:	3718      	adds	r7, #24
 800e54a:	46bd      	mov	sp, r7
 800e54c:	bd80      	pop	{r7, pc}
 800e54e:	bf00      	nop
 800e550:	20000bdc 	.word	0x20000bdc
 800e554:	20000be0 	.word	0x20000be0
 800e558:	20000ce4 	.word	0x20000ce4

0800e55c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e55c:	b580      	push	{r7, lr}
 800e55e:	b084      	sub	sp, #16
 800e560:	af00      	add	r7, sp, #0
 800e562:	6078      	str	r0, [r7, #4]
 800e564:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e566:	4b29      	ldr	r3, [pc, #164]	; (800e60c <prvAddCurrentTaskToDelayedList+0xb0>)
 800e568:	681b      	ldr	r3, [r3, #0]
 800e56a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e56c:	4b28      	ldr	r3, [pc, #160]	; (800e610 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e56e:	681b      	ldr	r3, [r3, #0]
 800e570:	3304      	adds	r3, #4
 800e572:	4618      	mov	r0, r3
 800e574:	f7fe fd1e 	bl	800cfb4 <uxListRemove>
 800e578:	4603      	mov	r3, r0
 800e57a:	2b00      	cmp	r3, #0
 800e57c:	d10b      	bne.n	800e596 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800e57e:	4b24      	ldr	r3, [pc, #144]	; (800e610 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e580:	681b      	ldr	r3, [r3, #0]
 800e582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e584:	2201      	movs	r2, #1
 800e586:	fa02 f303 	lsl.w	r3, r2, r3
 800e58a:	43da      	mvns	r2, r3
 800e58c:	4b21      	ldr	r3, [pc, #132]	; (800e614 <prvAddCurrentTaskToDelayedList+0xb8>)
 800e58e:	681b      	ldr	r3, [r3, #0]
 800e590:	4013      	ands	r3, r2
 800e592:	4a20      	ldr	r2, [pc, #128]	; (800e614 <prvAddCurrentTaskToDelayedList+0xb8>)
 800e594:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e59c:	d10a      	bne.n	800e5b4 <prvAddCurrentTaskToDelayedList+0x58>
 800e59e:	683b      	ldr	r3, [r7, #0]
 800e5a0:	2b00      	cmp	r3, #0
 800e5a2:	d007      	beq.n	800e5b4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e5a4:	4b1a      	ldr	r3, [pc, #104]	; (800e610 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e5a6:	681b      	ldr	r3, [r3, #0]
 800e5a8:	3304      	adds	r3, #4
 800e5aa:	4619      	mov	r1, r3
 800e5ac:	481a      	ldr	r0, [pc, #104]	; (800e618 <prvAddCurrentTaskToDelayedList+0xbc>)
 800e5ae:	f7fe fca4 	bl	800cefa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e5b2:	e026      	b.n	800e602 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e5b4:	68fa      	ldr	r2, [r7, #12]
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	4413      	add	r3, r2
 800e5ba:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e5bc:	4b14      	ldr	r3, [pc, #80]	; (800e610 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e5be:	681b      	ldr	r3, [r3, #0]
 800e5c0:	68ba      	ldr	r2, [r7, #8]
 800e5c2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e5c4:	68ba      	ldr	r2, [r7, #8]
 800e5c6:	68fb      	ldr	r3, [r7, #12]
 800e5c8:	429a      	cmp	r2, r3
 800e5ca:	d209      	bcs.n	800e5e0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e5cc:	4b13      	ldr	r3, [pc, #76]	; (800e61c <prvAddCurrentTaskToDelayedList+0xc0>)
 800e5ce:	681a      	ldr	r2, [r3, #0]
 800e5d0:	4b0f      	ldr	r3, [pc, #60]	; (800e610 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e5d2:	681b      	ldr	r3, [r3, #0]
 800e5d4:	3304      	adds	r3, #4
 800e5d6:	4619      	mov	r1, r3
 800e5d8:	4610      	mov	r0, r2
 800e5da:	f7fe fcb2 	bl	800cf42 <vListInsert>
}
 800e5de:	e010      	b.n	800e602 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e5e0:	4b0f      	ldr	r3, [pc, #60]	; (800e620 <prvAddCurrentTaskToDelayedList+0xc4>)
 800e5e2:	681a      	ldr	r2, [r3, #0]
 800e5e4:	4b0a      	ldr	r3, [pc, #40]	; (800e610 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e5e6:	681b      	ldr	r3, [r3, #0]
 800e5e8:	3304      	adds	r3, #4
 800e5ea:	4619      	mov	r1, r3
 800e5ec:	4610      	mov	r0, r2
 800e5ee:	f7fe fca8 	bl	800cf42 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e5f2:	4b0c      	ldr	r3, [pc, #48]	; (800e624 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e5f4:	681b      	ldr	r3, [r3, #0]
 800e5f6:	68ba      	ldr	r2, [r7, #8]
 800e5f8:	429a      	cmp	r2, r3
 800e5fa:	d202      	bcs.n	800e602 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800e5fc:	4a09      	ldr	r2, [pc, #36]	; (800e624 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e5fe:	68bb      	ldr	r3, [r7, #8]
 800e600:	6013      	str	r3, [r2, #0]
}
 800e602:	bf00      	nop
 800e604:	3710      	adds	r7, #16
 800e606:	46bd      	mov	sp, r7
 800e608:	bd80      	pop	{r7, pc}
 800e60a:	bf00      	nop
 800e60c:	20000ce0 	.word	0x20000ce0
 800e610:	20000bdc 	.word	0x20000bdc
 800e614:	20000ce4 	.word	0x20000ce4
 800e618:	20000cc8 	.word	0x20000cc8
 800e61c:	20000c98 	.word	0x20000c98
 800e620:	20000c94 	.word	0x20000c94
 800e624:	20000cfc 	.word	0x20000cfc

0800e628 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e628:	b480      	push	{r7}
 800e62a:	b085      	sub	sp, #20
 800e62c:	af00      	add	r7, sp, #0
 800e62e:	60f8      	str	r0, [r7, #12]
 800e630:	60b9      	str	r1, [r7, #8]
 800e632:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e634:	68fb      	ldr	r3, [r7, #12]
 800e636:	3b04      	subs	r3, #4
 800e638:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e63a:	68fb      	ldr	r3, [r7, #12]
 800e63c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800e640:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e642:	68fb      	ldr	r3, [r7, #12]
 800e644:	3b04      	subs	r3, #4
 800e646:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e648:	68bb      	ldr	r3, [r7, #8]
 800e64a:	f023 0201 	bic.w	r2, r3, #1
 800e64e:	68fb      	ldr	r3, [r7, #12]
 800e650:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e652:	68fb      	ldr	r3, [r7, #12]
 800e654:	3b04      	subs	r3, #4
 800e656:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e658:	4a0c      	ldr	r2, [pc, #48]	; (800e68c <pxPortInitialiseStack+0x64>)
 800e65a:	68fb      	ldr	r3, [r7, #12]
 800e65c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e65e:	68fb      	ldr	r3, [r7, #12]
 800e660:	3b14      	subs	r3, #20
 800e662:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e664:	687a      	ldr	r2, [r7, #4]
 800e666:	68fb      	ldr	r3, [r7, #12]
 800e668:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e66a:	68fb      	ldr	r3, [r7, #12]
 800e66c:	3b04      	subs	r3, #4
 800e66e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e670:	68fb      	ldr	r3, [r7, #12]
 800e672:	f06f 0202 	mvn.w	r2, #2
 800e676:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e678:	68fb      	ldr	r3, [r7, #12]
 800e67a:	3b20      	subs	r3, #32
 800e67c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e67e:	68fb      	ldr	r3, [r7, #12]
}
 800e680:	4618      	mov	r0, r3
 800e682:	3714      	adds	r7, #20
 800e684:	46bd      	mov	sp, r7
 800e686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e68a:	4770      	bx	lr
 800e68c:	0800e691 	.word	0x0800e691

0800e690 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e690:	b480      	push	{r7}
 800e692:	b085      	sub	sp, #20
 800e694:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e696:	2300      	movs	r3, #0
 800e698:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e69a:	4b12      	ldr	r3, [pc, #72]	; (800e6e4 <prvTaskExitError+0x54>)
 800e69c:	681b      	ldr	r3, [r3, #0]
 800e69e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e6a2:	d00a      	beq.n	800e6ba <prvTaskExitError+0x2a>
	__asm volatile
 800e6a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6a8:	f383 8811 	msr	BASEPRI, r3
 800e6ac:	f3bf 8f6f 	isb	sy
 800e6b0:	f3bf 8f4f 	dsb	sy
 800e6b4:	60fb      	str	r3, [r7, #12]
}
 800e6b6:	bf00      	nop
 800e6b8:	e7fe      	b.n	800e6b8 <prvTaskExitError+0x28>
	__asm volatile
 800e6ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6be:	f383 8811 	msr	BASEPRI, r3
 800e6c2:	f3bf 8f6f 	isb	sy
 800e6c6:	f3bf 8f4f 	dsb	sy
 800e6ca:	60bb      	str	r3, [r7, #8]
}
 800e6cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e6ce:	bf00      	nop
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	2b00      	cmp	r3, #0
 800e6d4:	d0fc      	beq.n	800e6d0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e6d6:	bf00      	nop
 800e6d8:	bf00      	nop
 800e6da:	3714      	adds	r7, #20
 800e6dc:	46bd      	mov	sp, r7
 800e6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6e2:	4770      	bx	lr
 800e6e4:	20000018 	.word	0x20000018
	...

0800e6f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e6f0:	4b07      	ldr	r3, [pc, #28]	; (800e710 <pxCurrentTCBConst2>)
 800e6f2:	6819      	ldr	r1, [r3, #0]
 800e6f4:	6808      	ldr	r0, [r1, #0]
 800e6f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6fa:	f380 8809 	msr	PSP, r0
 800e6fe:	f3bf 8f6f 	isb	sy
 800e702:	f04f 0000 	mov.w	r0, #0
 800e706:	f380 8811 	msr	BASEPRI, r0
 800e70a:	4770      	bx	lr
 800e70c:	f3af 8000 	nop.w

0800e710 <pxCurrentTCBConst2>:
 800e710:	20000bdc 	.word	0x20000bdc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e714:	bf00      	nop
 800e716:	bf00      	nop

0800e718 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e718:	4808      	ldr	r0, [pc, #32]	; (800e73c <prvPortStartFirstTask+0x24>)
 800e71a:	6800      	ldr	r0, [r0, #0]
 800e71c:	6800      	ldr	r0, [r0, #0]
 800e71e:	f380 8808 	msr	MSP, r0
 800e722:	f04f 0000 	mov.w	r0, #0
 800e726:	f380 8814 	msr	CONTROL, r0
 800e72a:	b662      	cpsie	i
 800e72c:	b661      	cpsie	f
 800e72e:	f3bf 8f4f 	dsb	sy
 800e732:	f3bf 8f6f 	isb	sy
 800e736:	df00      	svc	0
 800e738:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e73a:	bf00      	nop
 800e73c:	e000ed08 	.word	0xe000ed08

0800e740 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e740:	b580      	push	{r7, lr}
 800e742:	b086      	sub	sp, #24
 800e744:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e746:	4b46      	ldr	r3, [pc, #280]	; (800e860 <xPortStartScheduler+0x120>)
 800e748:	681b      	ldr	r3, [r3, #0]
 800e74a:	4a46      	ldr	r2, [pc, #280]	; (800e864 <xPortStartScheduler+0x124>)
 800e74c:	4293      	cmp	r3, r2
 800e74e:	d10a      	bne.n	800e766 <xPortStartScheduler+0x26>
	__asm volatile
 800e750:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e754:	f383 8811 	msr	BASEPRI, r3
 800e758:	f3bf 8f6f 	isb	sy
 800e75c:	f3bf 8f4f 	dsb	sy
 800e760:	613b      	str	r3, [r7, #16]
}
 800e762:	bf00      	nop
 800e764:	e7fe      	b.n	800e764 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e766:	4b3e      	ldr	r3, [pc, #248]	; (800e860 <xPortStartScheduler+0x120>)
 800e768:	681b      	ldr	r3, [r3, #0]
 800e76a:	4a3f      	ldr	r2, [pc, #252]	; (800e868 <xPortStartScheduler+0x128>)
 800e76c:	4293      	cmp	r3, r2
 800e76e:	d10a      	bne.n	800e786 <xPortStartScheduler+0x46>
	__asm volatile
 800e770:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e774:	f383 8811 	msr	BASEPRI, r3
 800e778:	f3bf 8f6f 	isb	sy
 800e77c:	f3bf 8f4f 	dsb	sy
 800e780:	60fb      	str	r3, [r7, #12]
}
 800e782:	bf00      	nop
 800e784:	e7fe      	b.n	800e784 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e786:	4b39      	ldr	r3, [pc, #228]	; (800e86c <xPortStartScheduler+0x12c>)
 800e788:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e78a:	697b      	ldr	r3, [r7, #20]
 800e78c:	781b      	ldrb	r3, [r3, #0]
 800e78e:	b2db      	uxtb	r3, r3
 800e790:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e792:	697b      	ldr	r3, [r7, #20]
 800e794:	22ff      	movs	r2, #255	; 0xff
 800e796:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e798:	697b      	ldr	r3, [r7, #20]
 800e79a:	781b      	ldrb	r3, [r3, #0]
 800e79c:	b2db      	uxtb	r3, r3
 800e79e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e7a0:	78fb      	ldrb	r3, [r7, #3]
 800e7a2:	b2db      	uxtb	r3, r3
 800e7a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800e7a8:	b2da      	uxtb	r2, r3
 800e7aa:	4b31      	ldr	r3, [pc, #196]	; (800e870 <xPortStartScheduler+0x130>)
 800e7ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e7ae:	4b31      	ldr	r3, [pc, #196]	; (800e874 <xPortStartScheduler+0x134>)
 800e7b0:	2207      	movs	r2, #7
 800e7b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e7b4:	e009      	b.n	800e7ca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800e7b6:	4b2f      	ldr	r3, [pc, #188]	; (800e874 <xPortStartScheduler+0x134>)
 800e7b8:	681b      	ldr	r3, [r3, #0]
 800e7ba:	3b01      	subs	r3, #1
 800e7bc:	4a2d      	ldr	r2, [pc, #180]	; (800e874 <xPortStartScheduler+0x134>)
 800e7be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e7c0:	78fb      	ldrb	r3, [r7, #3]
 800e7c2:	b2db      	uxtb	r3, r3
 800e7c4:	005b      	lsls	r3, r3, #1
 800e7c6:	b2db      	uxtb	r3, r3
 800e7c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e7ca:	78fb      	ldrb	r3, [r7, #3]
 800e7cc:	b2db      	uxtb	r3, r3
 800e7ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e7d2:	2b80      	cmp	r3, #128	; 0x80
 800e7d4:	d0ef      	beq.n	800e7b6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e7d6:	4b27      	ldr	r3, [pc, #156]	; (800e874 <xPortStartScheduler+0x134>)
 800e7d8:	681b      	ldr	r3, [r3, #0]
 800e7da:	f1c3 0307 	rsb	r3, r3, #7
 800e7de:	2b04      	cmp	r3, #4
 800e7e0:	d00a      	beq.n	800e7f8 <xPortStartScheduler+0xb8>
	__asm volatile
 800e7e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7e6:	f383 8811 	msr	BASEPRI, r3
 800e7ea:	f3bf 8f6f 	isb	sy
 800e7ee:	f3bf 8f4f 	dsb	sy
 800e7f2:	60bb      	str	r3, [r7, #8]
}
 800e7f4:	bf00      	nop
 800e7f6:	e7fe      	b.n	800e7f6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e7f8:	4b1e      	ldr	r3, [pc, #120]	; (800e874 <xPortStartScheduler+0x134>)
 800e7fa:	681b      	ldr	r3, [r3, #0]
 800e7fc:	021b      	lsls	r3, r3, #8
 800e7fe:	4a1d      	ldr	r2, [pc, #116]	; (800e874 <xPortStartScheduler+0x134>)
 800e800:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e802:	4b1c      	ldr	r3, [pc, #112]	; (800e874 <xPortStartScheduler+0x134>)
 800e804:	681b      	ldr	r3, [r3, #0]
 800e806:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e80a:	4a1a      	ldr	r2, [pc, #104]	; (800e874 <xPortStartScheduler+0x134>)
 800e80c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	b2da      	uxtb	r2, r3
 800e812:	697b      	ldr	r3, [r7, #20]
 800e814:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e816:	4b18      	ldr	r3, [pc, #96]	; (800e878 <xPortStartScheduler+0x138>)
 800e818:	681b      	ldr	r3, [r3, #0]
 800e81a:	4a17      	ldr	r2, [pc, #92]	; (800e878 <xPortStartScheduler+0x138>)
 800e81c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e820:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e822:	4b15      	ldr	r3, [pc, #84]	; (800e878 <xPortStartScheduler+0x138>)
 800e824:	681b      	ldr	r3, [r3, #0]
 800e826:	4a14      	ldr	r2, [pc, #80]	; (800e878 <xPortStartScheduler+0x138>)
 800e828:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800e82c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e82e:	f000 f8dd 	bl	800e9ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e832:	4b12      	ldr	r3, [pc, #72]	; (800e87c <xPortStartScheduler+0x13c>)
 800e834:	2200      	movs	r2, #0
 800e836:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e838:	f000 f8fc 	bl	800ea34 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e83c:	4b10      	ldr	r3, [pc, #64]	; (800e880 <xPortStartScheduler+0x140>)
 800e83e:	681b      	ldr	r3, [r3, #0]
 800e840:	4a0f      	ldr	r2, [pc, #60]	; (800e880 <xPortStartScheduler+0x140>)
 800e842:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800e846:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e848:	f7ff ff66 	bl	800e718 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e84c:	f7ff fba6 	bl	800df9c <vTaskSwitchContext>
	prvTaskExitError();
 800e850:	f7ff ff1e 	bl	800e690 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e854:	2300      	movs	r3, #0
}
 800e856:	4618      	mov	r0, r3
 800e858:	3718      	adds	r7, #24
 800e85a:	46bd      	mov	sp, r7
 800e85c:	bd80      	pop	{r7, pc}
 800e85e:	bf00      	nop
 800e860:	e000ed00 	.word	0xe000ed00
 800e864:	410fc271 	.word	0x410fc271
 800e868:	410fc270 	.word	0x410fc270
 800e86c:	e000e400 	.word	0xe000e400
 800e870:	20000d08 	.word	0x20000d08
 800e874:	20000d0c 	.word	0x20000d0c
 800e878:	e000ed20 	.word	0xe000ed20
 800e87c:	20000018 	.word	0x20000018
 800e880:	e000ef34 	.word	0xe000ef34

0800e884 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e884:	b480      	push	{r7}
 800e886:	b083      	sub	sp, #12
 800e888:	af00      	add	r7, sp, #0
	__asm volatile
 800e88a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e88e:	f383 8811 	msr	BASEPRI, r3
 800e892:	f3bf 8f6f 	isb	sy
 800e896:	f3bf 8f4f 	dsb	sy
 800e89a:	607b      	str	r3, [r7, #4]
}
 800e89c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e89e:	4b0f      	ldr	r3, [pc, #60]	; (800e8dc <vPortEnterCritical+0x58>)
 800e8a0:	681b      	ldr	r3, [r3, #0]
 800e8a2:	3301      	adds	r3, #1
 800e8a4:	4a0d      	ldr	r2, [pc, #52]	; (800e8dc <vPortEnterCritical+0x58>)
 800e8a6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e8a8:	4b0c      	ldr	r3, [pc, #48]	; (800e8dc <vPortEnterCritical+0x58>)
 800e8aa:	681b      	ldr	r3, [r3, #0]
 800e8ac:	2b01      	cmp	r3, #1
 800e8ae:	d10f      	bne.n	800e8d0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e8b0:	4b0b      	ldr	r3, [pc, #44]	; (800e8e0 <vPortEnterCritical+0x5c>)
 800e8b2:	681b      	ldr	r3, [r3, #0]
 800e8b4:	b2db      	uxtb	r3, r3
 800e8b6:	2b00      	cmp	r3, #0
 800e8b8:	d00a      	beq.n	800e8d0 <vPortEnterCritical+0x4c>
	__asm volatile
 800e8ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8be:	f383 8811 	msr	BASEPRI, r3
 800e8c2:	f3bf 8f6f 	isb	sy
 800e8c6:	f3bf 8f4f 	dsb	sy
 800e8ca:	603b      	str	r3, [r7, #0]
}
 800e8cc:	bf00      	nop
 800e8ce:	e7fe      	b.n	800e8ce <vPortEnterCritical+0x4a>
	}
}
 800e8d0:	bf00      	nop
 800e8d2:	370c      	adds	r7, #12
 800e8d4:	46bd      	mov	sp, r7
 800e8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8da:	4770      	bx	lr
 800e8dc:	20000018 	.word	0x20000018
 800e8e0:	e000ed04 	.word	0xe000ed04

0800e8e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e8e4:	b480      	push	{r7}
 800e8e6:	b083      	sub	sp, #12
 800e8e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e8ea:	4b12      	ldr	r3, [pc, #72]	; (800e934 <vPortExitCritical+0x50>)
 800e8ec:	681b      	ldr	r3, [r3, #0]
 800e8ee:	2b00      	cmp	r3, #0
 800e8f0:	d10a      	bne.n	800e908 <vPortExitCritical+0x24>
	__asm volatile
 800e8f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8f6:	f383 8811 	msr	BASEPRI, r3
 800e8fa:	f3bf 8f6f 	isb	sy
 800e8fe:	f3bf 8f4f 	dsb	sy
 800e902:	607b      	str	r3, [r7, #4]
}
 800e904:	bf00      	nop
 800e906:	e7fe      	b.n	800e906 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800e908:	4b0a      	ldr	r3, [pc, #40]	; (800e934 <vPortExitCritical+0x50>)
 800e90a:	681b      	ldr	r3, [r3, #0]
 800e90c:	3b01      	subs	r3, #1
 800e90e:	4a09      	ldr	r2, [pc, #36]	; (800e934 <vPortExitCritical+0x50>)
 800e910:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e912:	4b08      	ldr	r3, [pc, #32]	; (800e934 <vPortExitCritical+0x50>)
 800e914:	681b      	ldr	r3, [r3, #0]
 800e916:	2b00      	cmp	r3, #0
 800e918:	d105      	bne.n	800e926 <vPortExitCritical+0x42>
 800e91a:	2300      	movs	r3, #0
 800e91c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800e91e:	683b      	ldr	r3, [r7, #0]
 800e920:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800e924:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800e926:	bf00      	nop
 800e928:	370c      	adds	r7, #12
 800e92a:	46bd      	mov	sp, r7
 800e92c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e930:	4770      	bx	lr
 800e932:	bf00      	nop
 800e934:	20000018 	.word	0x20000018
	...

0800e940 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e940:	f3ef 8009 	mrs	r0, PSP
 800e944:	f3bf 8f6f 	isb	sy
 800e948:	4b15      	ldr	r3, [pc, #84]	; (800e9a0 <pxCurrentTCBConst>)
 800e94a:	681a      	ldr	r2, [r3, #0]
 800e94c:	f01e 0f10 	tst.w	lr, #16
 800e950:	bf08      	it	eq
 800e952:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e956:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e95a:	6010      	str	r0, [r2, #0]
 800e95c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e960:	f04f 0050 	mov.w	r0, #80	; 0x50
 800e964:	f380 8811 	msr	BASEPRI, r0
 800e968:	f3bf 8f4f 	dsb	sy
 800e96c:	f3bf 8f6f 	isb	sy
 800e970:	f7ff fb14 	bl	800df9c <vTaskSwitchContext>
 800e974:	f04f 0000 	mov.w	r0, #0
 800e978:	f380 8811 	msr	BASEPRI, r0
 800e97c:	bc09      	pop	{r0, r3}
 800e97e:	6819      	ldr	r1, [r3, #0]
 800e980:	6808      	ldr	r0, [r1, #0]
 800e982:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e986:	f01e 0f10 	tst.w	lr, #16
 800e98a:	bf08      	it	eq
 800e98c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e990:	f380 8809 	msr	PSP, r0
 800e994:	f3bf 8f6f 	isb	sy
 800e998:	4770      	bx	lr
 800e99a:	bf00      	nop
 800e99c:	f3af 8000 	nop.w

0800e9a0 <pxCurrentTCBConst>:
 800e9a0:	20000bdc 	.word	0x20000bdc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e9a4:	bf00      	nop
 800e9a6:	bf00      	nop

0800e9a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e9a8:	b580      	push	{r7, lr}
 800e9aa:	b082      	sub	sp, #8
 800e9ac:	af00      	add	r7, sp, #0
	__asm volatile
 800e9ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9b2:	f383 8811 	msr	BASEPRI, r3
 800e9b6:	f3bf 8f6f 	isb	sy
 800e9ba:	f3bf 8f4f 	dsb	sy
 800e9be:	607b      	str	r3, [r7, #4]
}
 800e9c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e9c2:	f7ff fa33 	bl	800de2c <xTaskIncrementTick>
 800e9c6:	4603      	mov	r3, r0
 800e9c8:	2b00      	cmp	r3, #0
 800e9ca:	d003      	beq.n	800e9d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e9cc:	4b06      	ldr	r3, [pc, #24]	; (800e9e8 <xPortSysTickHandler+0x40>)
 800e9ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e9d2:	601a      	str	r2, [r3, #0]
 800e9d4:	2300      	movs	r3, #0
 800e9d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e9d8:	683b      	ldr	r3, [r7, #0]
 800e9da:	f383 8811 	msr	BASEPRI, r3
}
 800e9de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e9e0:	bf00      	nop
 800e9e2:	3708      	adds	r7, #8
 800e9e4:	46bd      	mov	sp, r7
 800e9e6:	bd80      	pop	{r7, pc}
 800e9e8:	e000ed04 	.word	0xe000ed04

0800e9ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e9ec:	b480      	push	{r7}
 800e9ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e9f0:	4b0b      	ldr	r3, [pc, #44]	; (800ea20 <vPortSetupTimerInterrupt+0x34>)
 800e9f2:	2200      	movs	r2, #0
 800e9f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e9f6:	4b0b      	ldr	r3, [pc, #44]	; (800ea24 <vPortSetupTimerInterrupt+0x38>)
 800e9f8:	2200      	movs	r2, #0
 800e9fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e9fc:	4b0a      	ldr	r3, [pc, #40]	; (800ea28 <vPortSetupTimerInterrupt+0x3c>)
 800e9fe:	681b      	ldr	r3, [r3, #0]
 800ea00:	4a0a      	ldr	r2, [pc, #40]	; (800ea2c <vPortSetupTimerInterrupt+0x40>)
 800ea02:	fba2 2303 	umull	r2, r3, r2, r3
 800ea06:	099b      	lsrs	r3, r3, #6
 800ea08:	4a09      	ldr	r2, [pc, #36]	; (800ea30 <vPortSetupTimerInterrupt+0x44>)
 800ea0a:	3b01      	subs	r3, #1
 800ea0c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ea0e:	4b04      	ldr	r3, [pc, #16]	; (800ea20 <vPortSetupTimerInterrupt+0x34>)
 800ea10:	2207      	movs	r2, #7
 800ea12:	601a      	str	r2, [r3, #0]
}
 800ea14:	bf00      	nop
 800ea16:	46bd      	mov	sp, r7
 800ea18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea1c:	4770      	bx	lr
 800ea1e:	bf00      	nop
 800ea20:	e000e010 	.word	0xe000e010
 800ea24:	e000e018 	.word	0xe000e018
 800ea28:	2000000c 	.word	0x2000000c
 800ea2c:	10624dd3 	.word	0x10624dd3
 800ea30:	e000e014 	.word	0xe000e014

0800ea34 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ea34:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800ea44 <vPortEnableVFP+0x10>
 800ea38:	6801      	ldr	r1, [r0, #0]
 800ea3a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800ea3e:	6001      	str	r1, [r0, #0]
 800ea40:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ea42:	bf00      	nop
 800ea44:	e000ed88 	.word	0xe000ed88

0800ea48 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ea48:	b580      	push	{r7, lr}
 800ea4a:	b08a      	sub	sp, #40	; 0x28
 800ea4c:	af00      	add	r7, sp, #0
 800ea4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ea50:	2300      	movs	r3, #0
 800ea52:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ea54:	f7ff f940 	bl	800dcd8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ea58:	4b5b      	ldr	r3, [pc, #364]	; (800ebc8 <pvPortMalloc+0x180>)
 800ea5a:	681b      	ldr	r3, [r3, #0]
 800ea5c:	2b00      	cmp	r3, #0
 800ea5e:	d101      	bne.n	800ea64 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ea60:	f000 f920 	bl	800eca4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ea64:	4b59      	ldr	r3, [pc, #356]	; (800ebcc <pvPortMalloc+0x184>)
 800ea66:	681a      	ldr	r2, [r3, #0]
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	4013      	ands	r3, r2
 800ea6c:	2b00      	cmp	r3, #0
 800ea6e:	f040 8093 	bne.w	800eb98 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	2b00      	cmp	r3, #0
 800ea76:	d01d      	beq.n	800eab4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800ea78:	2208      	movs	r2, #8
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	4413      	add	r3, r2
 800ea7e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	f003 0307 	and.w	r3, r3, #7
 800ea86:	2b00      	cmp	r3, #0
 800ea88:	d014      	beq.n	800eab4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	f023 0307 	bic.w	r3, r3, #7
 800ea90:	3308      	adds	r3, #8
 800ea92:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	f003 0307 	and.w	r3, r3, #7
 800ea9a:	2b00      	cmp	r3, #0
 800ea9c:	d00a      	beq.n	800eab4 <pvPortMalloc+0x6c>
	__asm volatile
 800ea9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eaa2:	f383 8811 	msr	BASEPRI, r3
 800eaa6:	f3bf 8f6f 	isb	sy
 800eaaa:	f3bf 8f4f 	dsb	sy
 800eaae:	617b      	str	r3, [r7, #20]
}
 800eab0:	bf00      	nop
 800eab2:	e7fe      	b.n	800eab2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	2b00      	cmp	r3, #0
 800eab8:	d06e      	beq.n	800eb98 <pvPortMalloc+0x150>
 800eaba:	4b45      	ldr	r3, [pc, #276]	; (800ebd0 <pvPortMalloc+0x188>)
 800eabc:	681b      	ldr	r3, [r3, #0]
 800eabe:	687a      	ldr	r2, [r7, #4]
 800eac0:	429a      	cmp	r2, r3
 800eac2:	d869      	bhi.n	800eb98 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800eac4:	4b43      	ldr	r3, [pc, #268]	; (800ebd4 <pvPortMalloc+0x18c>)
 800eac6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800eac8:	4b42      	ldr	r3, [pc, #264]	; (800ebd4 <pvPortMalloc+0x18c>)
 800eaca:	681b      	ldr	r3, [r3, #0]
 800eacc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800eace:	e004      	b.n	800eada <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800ead0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ead2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ead4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ead6:	681b      	ldr	r3, [r3, #0]
 800ead8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800eada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eadc:	685b      	ldr	r3, [r3, #4]
 800eade:	687a      	ldr	r2, [r7, #4]
 800eae0:	429a      	cmp	r2, r3
 800eae2:	d903      	bls.n	800eaec <pvPortMalloc+0xa4>
 800eae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eae6:	681b      	ldr	r3, [r3, #0]
 800eae8:	2b00      	cmp	r3, #0
 800eaea:	d1f1      	bne.n	800ead0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800eaec:	4b36      	ldr	r3, [pc, #216]	; (800ebc8 <pvPortMalloc+0x180>)
 800eaee:	681b      	ldr	r3, [r3, #0]
 800eaf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eaf2:	429a      	cmp	r2, r3
 800eaf4:	d050      	beq.n	800eb98 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800eaf6:	6a3b      	ldr	r3, [r7, #32]
 800eaf8:	681b      	ldr	r3, [r3, #0]
 800eafa:	2208      	movs	r2, #8
 800eafc:	4413      	add	r3, r2
 800eafe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800eb00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb02:	681a      	ldr	r2, [r3, #0]
 800eb04:	6a3b      	ldr	r3, [r7, #32]
 800eb06:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800eb08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb0a:	685a      	ldr	r2, [r3, #4]
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	1ad2      	subs	r2, r2, r3
 800eb10:	2308      	movs	r3, #8
 800eb12:	005b      	lsls	r3, r3, #1
 800eb14:	429a      	cmp	r2, r3
 800eb16:	d91f      	bls.n	800eb58 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800eb18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	4413      	add	r3, r2
 800eb1e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800eb20:	69bb      	ldr	r3, [r7, #24]
 800eb22:	f003 0307 	and.w	r3, r3, #7
 800eb26:	2b00      	cmp	r3, #0
 800eb28:	d00a      	beq.n	800eb40 <pvPortMalloc+0xf8>
	__asm volatile
 800eb2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb2e:	f383 8811 	msr	BASEPRI, r3
 800eb32:	f3bf 8f6f 	isb	sy
 800eb36:	f3bf 8f4f 	dsb	sy
 800eb3a:	613b      	str	r3, [r7, #16]
}
 800eb3c:	bf00      	nop
 800eb3e:	e7fe      	b.n	800eb3e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800eb40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb42:	685a      	ldr	r2, [r3, #4]
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	1ad2      	subs	r2, r2, r3
 800eb48:	69bb      	ldr	r3, [r7, #24]
 800eb4a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800eb4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb4e:	687a      	ldr	r2, [r7, #4]
 800eb50:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800eb52:	69b8      	ldr	r0, [r7, #24]
 800eb54:	f000 f908 	bl	800ed68 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800eb58:	4b1d      	ldr	r3, [pc, #116]	; (800ebd0 <pvPortMalloc+0x188>)
 800eb5a:	681a      	ldr	r2, [r3, #0]
 800eb5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb5e:	685b      	ldr	r3, [r3, #4]
 800eb60:	1ad3      	subs	r3, r2, r3
 800eb62:	4a1b      	ldr	r2, [pc, #108]	; (800ebd0 <pvPortMalloc+0x188>)
 800eb64:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800eb66:	4b1a      	ldr	r3, [pc, #104]	; (800ebd0 <pvPortMalloc+0x188>)
 800eb68:	681a      	ldr	r2, [r3, #0]
 800eb6a:	4b1b      	ldr	r3, [pc, #108]	; (800ebd8 <pvPortMalloc+0x190>)
 800eb6c:	681b      	ldr	r3, [r3, #0]
 800eb6e:	429a      	cmp	r2, r3
 800eb70:	d203      	bcs.n	800eb7a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800eb72:	4b17      	ldr	r3, [pc, #92]	; (800ebd0 <pvPortMalloc+0x188>)
 800eb74:	681b      	ldr	r3, [r3, #0]
 800eb76:	4a18      	ldr	r2, [pc, #96]	; (800ebd8 <pvPortMalloc+0x190>)
 800eb78:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800eb7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb7c:	685a      	ldr	r2, [r3, #4]
 800eb7e:	4b13      	ldr	r3, [pc, #76]	; (800ebcc <pvPortMalloc+0x184>)
 800eb80:	681b      	ldr	r3, [r3, #0]
 800eb82:	431a      	orrs	r2, r3
 800eb84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb86:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800eb88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb8a:	2200      	movs	r2, #0
 800eb8c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800eb8e:	4b13      	ldr	r3, [pc, #76]	; (800ebdc <pvPortMalloc+0x194>)
 800eb90:	681b      	ldr	r3, [r3, #0]
 800eb92:	3301      	adds	r3, #1
 800eb94:	4a11      	ldr	r2, [pc, #68]	; (800ebdc <pvPortMalloc+0x194>)
 800eb96:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800eb98:	f7ff f8ac 	bl	800dcf4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800eb9c:	69fb      	ldr	r3, [r7, #28]
 800eb9e:	f003 0307 	and.w	r3, r3, #7
 800eba2:	2b00      	cmp	r3, #0
 800eba4:	d00a      	beq.n	800ebbc <pvPortMalloc+0x174>
	__asm volatile
 800eba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebaa:	f383 8811 	msr	BASEPRI, r3
 800ebae:	f3bf 8f6f 	isb	sy
 800ebb2:	f3bf 8f4f 	dsb	sy
 800ebb6:	60fb      	str	r3, [r7, #12]
}
 800ebb8:	bf00      	nop
 800ebba:	e7fe      	b.n	800ebba <pvPortMalloc+0x172>
	return pvReturn;
 800ebbc:	69fb      	ldr	r3, [r7, #28]
}
 800ebbe:	4618      	mov	r0, r3
 800ebc0:	3728      	adds	r7, #40	; 0x28
 800ebc2:	46bd      	mov	sp, r7
 800ebc4:	bd80      	pop	{r7, pc}
 800ebc6:	bf00      	nop
 800ebc8:	20004918 	.word	0x20004918
 800ebcc:	2000492c 	.word	0x2000492c
 800ebd0:	2000491c 	.word	0x2000491c
 800ebd4:	20004910 	.word	0x20004910
 800ebd8:	20004920 	.word	0x20004920
 800ebdc:	20004924 	.word	0x20004924

0800ebe0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ebe0:	b580      	push	{r7, lr}
 800ebe2:	b086      	sub	sp, #24
 800ebe4:	af00      	add	r7, sp, #0
 800ebe6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	2b00      	cmp	r3, #0
 800ebf0:	d04d      	beq.n	800ec8e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ebf2:	2308      	movs	r3, #8
 800ebf4:	425b      	negs	r3, r3
 800ebf6:	697a      	ldr	r2, [r7, #20]
 800ebf8:	4413      	add	r3, r2
 800ebfa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ebfc:	697b      	ldr	r3, [r7, #20]
 800ebfe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ec00:	693b      	ldr	r3, [r7, #16]
 800ec02:	685a      	ldr	r2, [r3, #4]
 800ec04:	4b24      	ldr	r3, [pc, #144]	; (800ec98 <vPortFree+0xb8>)
 800ec06:	681b      	ldr	r3, [r3, #0]
 800ec08:	4013      	ands	r3, r2
 800ec0a:	2b00      	cmp	r3, #0
 800ec0c:	d10a      	bne.n	800ec24 <vPortFree+0x44>
	__asm volatile
 800ec0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec12:	f383 8811 	msr	BASEPRI, r3
 800ec16:	f3bf 8f6f 	isb	sy
 800ec1a:	f3bf 8f4f 	dsb	sy
 800ec1e:	60fb      	str	r3, [r7, #12]
}
 800ec20:	bf00      	nop
 800ec22:	e7fe      	b.n	800ec22 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ec24:	693b      	ldr	r3, [r7, #16]
 800ec26:	681b      	ldr	r3, [r3, #0]
 800ec28:	2b00      	cmp	r3, #0
 800ec2a:	d00a      	beq.n	800ec42 <vPortFree+0x62>
	__asm volatile
 800ec2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec30:	f383 8811 	msr	BASEPRI, r3
 800ec34:	f3bf 8f6f 	isb	sy
 800ec38:	f3bf 8f4f 	dsb	sy
 800ec3c:	60bb      	str	r3, [r7, #8]
}
 800ec3e:	bf00      	nop
 800ec40:	e7fe      	b.n	800ec40 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ec42:	693b      	ldr	r3, [r7, #16]
 800ec44:	685a      	ldr	r2, [r3, #4]
 800ec46:	4b14      	ldr	r3, [pc, #80]	; (800ec98 <vPortFree+0xb8>)
 800ec48:	681b      	ldr	r3, [r3, #0]
 800ec4a:	4013      	ands	r3, r2
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	d01e      	beq.n	800ec8e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ec50:	693b      	ldr	r3, [r7, #16]
 800ec52:	681b      	ldr	r3, [r3, #0]
 800ec54:	2b00      	cmp	r3, #0
 800ec56:	d11a      	bne.n	800ec8e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ec58:	693b      	ldr	r3, [r7, #16]
 800ec5a:	685a      	ldr	r2, [r3, #4]
 800ec5c:	4b0e      	ldr	r3, [pc, #56]	; (800ec98 <vPortFree+0xb8>)
 800ec5e:	681b      	ldr	r3, [r3, #0]
 800ec60:	43db      	mvns	r3, r3
 800ec62:	401a      	ands	r2, r3
 800ec64:	693b      	ldr	r3, [r7, #16]
 800ec66:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ec68:	f7ff f836 	bl	800dcd8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ec6c:	693b      	ldr	r3, [r7, #16]
 800ec6e:	685a      	ldr	r2, [r3, #4]
 800ec70:	4b0a      	ldr	r3, [pc, #40]	; (800ec9c <vPortFree+0xbc>)
 800ec72:	681b      	ldr	r3, [r3, #0]
 800ec74:	4413      	add	r3, r2
 800ec76:	4a09      	ldr	r2, [pc, #36]	; (800ec9c <vPortFree+0xbc>)
 800ec78:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ec7a:	6938      	ldr	r0, [r7, #16]
 800ec7c:	f000 f874 	bl	800ed68 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ec80:	4b07      	ldr	r3, [pc, #28]	; (800eca0 <vPortFree+0xc0>)
 800ec82:	681b      	ldr	r3, [r3, #0]
 800ec84:	3301      	adds	r3, #1
 800ec86:	4a06      	ldr	r2, [pc, #24]	; (800eca0 <vPortFree+0xc0>)
 800ec88:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ec8a:	f7ff f833 	bl	800dcf4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ec8e:	bf00      	nop
 800ec90:	3718      	adds	r7, #24
 800ec92:	46bd      	mov	sp, r7
 800ec94:	bd80      	pop	{r7, pc}
 800ec96:	bf00      	nop
 800ec98:	2000492c 	.word	0x2000492c
 800ec9c:	2000491c 	.word	0x2000491c
 800eca0:	20004928 	.word	0x20004928

0800eca4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800eca4:	b480      	push	{r7}
 800eca6:	b085      	sub	sp, #20
 800eca8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ecaa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800ecae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ecb0:	4b27      	ldr	r3, [pc, #156]	; (800ed50 <prvHeapInit+0xac>)
 800ecb2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ecb4:	68fb      	ldr	r3, [r7, #12]
 800ecb6:	f003 0307 	and.w	r3, r3, #7
 800ecba:	2b00      	cmp	r3, #0
 800ecbc:	d00c      	beq.n	800ecd8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ecbe:	68fb      	ldr	r3, [r7, #12]
 800ecc0:	3307      	adds	r3, #7
 800ecc2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ecc4:	68fb      	ldr	r3, [r7, #12]
 800ecc6:	f023 0307 	bic.w	r3, r3, #7
 800ecca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800eccc:	68ba      	ldr	r2, [r7, #8]
 800ecce:	68fb      	ldr	r3, [r7, #12]
 800ecd0:	1ad3      	subs	r3, r2, r3
 800ecd2:	4a1f      	ldr	r2, [pc, #124]	; (800ed50 <prvHeapInit+0xac>)
 800ecd4:	4413      	add	r3, r2
 800ecd6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ecd8:	68fb      	ldr	r3, [r7, #12]
 800ecda:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ecdc:	4a1d      	ldr	r2, [pc, #116]	; (800ed54 <prvHeapInit+0xb0>)
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ece2:	4b1c      	ldr	r3, [pc, #112]	; (800ed54 <prvHeapInit+0xb0>)
 800ece4:	2200      	movs	r2, #0
 800ece6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	68ba      	ldr	r2, [r7, #8]
 800ecec:	4413      	add	r3, r2
 800ecee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ecf0:	2208      	movs	r2, #8
 800ecf2:	68fb      	ldr	r3, [r7, #12]
 800ecf4:	1a9b      	subs	r3, r3, r2
 800ecf6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ecf8:	68fb      	ldr	r3, [r7, #12]
 800ecfa:	f023 0307 	bic.w	r3, r3, #7
 800ecfe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ed00:	68fb      	ldr	r3, [r7, #12]
 800ed02:	4a15      	ldr	r2, [pc, #84]	; (800ed58 <prvHeapInit+0xb4>)
 800ed04:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ed06:	4b14      	ldr	r3, [pc, #80]	; (800ed58 <prvHeapInit+0xb4>)
 800ed08:	681b      	ldr	r3, [r3, #0]
 800ed0a:	2200      	movs	r2, #0
 800ed0c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ed0e:	4b12      	ldr	r3, [pc, #72]	; (800ed58 <prvHeapInit+0xb4>)
 800ed10:	681b      	ldr	r3, [r3, #0]
 800ed12:	2200      	movs	r2, #0
 800ed14:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ed1a:	683b      	ldr	r3, [r7, #0]
 800ed1c:	68fa      	ldr	r2, [r7, #12]
 800ed1e:	1ad2      	subs	r2, r2, r3
 800ed20:	683b      	ldr	r3, [r7, #0]
 800ed22:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ed24:	4b0c      	ldr	r3, [pc, #48]	; (800ed58 <prvHeapInit+0xb4>)
 800ed26:	681a      	ldr	r2, [r3, #0]
 800ed28:	683b      	ldr	r3, [r7, #0]
 800ed2a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ed2c:	683b      	ldr	r3, [r7, #0]
 800ed2e:	685b      	ldr	r3, [r3, #4]
 800ed30:	4a0a      	ldr	r2, [pc, #40]	; (800ed5c <prvHeapInit+0xb8>)
 800ed32:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ed34:	683b      	ldr	r3, [r7, #0]
 800ed36:	685b      	ldr	r3, [r3, #4]
 800ed38:	4a09      	ldr	r2, [pc, #36]	; (800ed60 <prvHeapInit+0xbc>)
 800ed3a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ed3c:	4b09      	ldr	r3, [pc, #36]	; (800ed64 <prvHeapInit+0xc0>)
 800ed3e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ed42:	601a      	str	r2, [r3, #0]
}
 800ed44:	bf00      	nop
 800ed46:	3714      	adds	r7, #20
 800ed48:	46bd      	mov	sp, r7
 800ed4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed4e:	4770      	bx	lr
 800ed50:	20000d10 	.word	0x20000d10
 800ed54:	20004910 	.word	0x20004910
 800ed58:	20004918 	.word	0x20004918
 800ed5c:	20004920 	.word	0x20004920
 800ed60:	2000491c 	.word	0x2000491c
 800ed64:	2000492c 	.word	0x2000492c

0800ed68 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ed68:	b480      	push	{r7}
 800ed6a:	b085      	sub	sp, #20
 800ed6c:	af00      	add	r7, sp, #0
 800ed6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ed70:	4b28      	ldr	r3, [pc, #160]	; (800ee14 <prvInsertBlockIntoFreeList+0xac>)
 800ed72:	60fb      	str	r3, [r7, #12]
 800ed74:	e002      	b.n	800ed7c <prvInsertBlockIntoFreeList+0x14>
 800ed76:	68fb      	ldr	r3, [r7, #12]
 800ed78:	681b      	ldr	r3, [r3, #0]
 800ed7a:	60fb      	str	r3, [r7, #12]
 800ed7c:	68fb      	ldr	r3, [r7, #12]
 800ed7e:	681b      	ldr	r3, [r3, #0]
 800ed80:	687a      	ldr	r2, [r7, #4]
 800ed82:	429a      	cmp	r2, r3
 800ed84:	d8f7      	bhi.n	800ed76 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ed86:	68fb      	ldr	r3, [r7, #12]
 800ed88:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ed8a:	68fb      	ldr	r3, [r7, #12]
 800ed8c:	685b      	ldr	r3, [r3, #4]
 800ed8e:	68ba      	ldr	r2, [r7, #8]
 800ed90:	4413      	add	r3, r2
 800ed92:	687a      	ldr	r2, [r7, #4]
 800ed94:	429a      	cmp	r2, r3
 800ed96:	d108      	bne.n	800edaa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ed98:	68fb      	ldr	r3, [r7, #12]
 800ed9a:	685a      	ldr	r2, [r3, #4]
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	685b      	ldr	r3, [r3, #4]
 800eda0:	441a      	add	r2, r3
 800eda2:	68fb      	ldr	r3, [r7, #12]
 800eda4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800eda6:	68fb      	ldr	r3, [r7, #12]
 800eda8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	685b      	ldr	r3, [r3, #4]
 800edb2:	68ba      	ldr	r2, [r7, #8]
 800edb4:	441a      	add	r2, r3
 800edb6:	68fb      	ldr	r3, [r7, #12]
 800edb8:	681b      	ldr	r3, [r3, #0]
 800edba:	429a      	cmp	r2, r3
 800edbc:	d118      	bne.n	800edf0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800edbe:	68fb      	ldr	r3, [r7, #12]
 800edc0:	681a      	ldr	r2, [r3, #0]
 800edc2:	4b15      	ldr	r3, [pc, #84]	; (800ee18 <prvInsertBlockIntoFreeList+0xb0>)
 800edc4:	681b      	ldr	r3, [r3, #0]
 800edc6:	429a      	cmp	r2, r3
 800edc8:	d00d      	beq.n	800ede6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	685a      	ldr	r2, [r3, #4]
 800edce:	68fb      	ldr	r3, [r7, #12]
 800edd0:	681b      	ldr	r3, [r3, #0]
 800edd2:	685b      	ldr	r3, [r3, #4]
 800edd4:	441a      	add	r2, r3
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800edda:	68fb      	ldr	r3, [r7, #12]
 800eddc:	681b      	ldr	r3, [r3, #0]
 800edde:	681a      	ldr	r2, [r3, #0]
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	601a      	str	r2, [r3, #0]
 800ede4:	e008      	b.n	800edf8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ede6:	4b0c      	ldr	r3, [pc, #48]	; (800ee18 <prvInsertBlockIntoFreeList+0xb0>)
 800ede8:	681a      	ldr	r2, [r3, #0]
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	601a      	str	r2, [r3, #0]
 800edee:	e003      	b.n	800edf8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800edf0:	68fb      	ldr	r3, [r7, #12]
 800edf2:	681a      	ldr	r2, [r3, #0]
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800edf8:	68fa      	ldr	r2, [r7, #12]
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	429a      	cmp	r2, r3
 800edfe:	d002      	beq.n	800ee06 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ee00:	68fb      	ldr	r3, [r7, #12]
 800ee02:	687a      	ldr	r2, [r7, #4]
 800ee04:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ee06:	bf00      	nop
 800ee08:	3714      	adds	r7, #20
 800ee0a:	46bd      	mov	sp, r7
 800ee0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee10:	4770      	bx	lr
 800ee12:	bf00      	nop
 800ee14:	20004910 	.word	0x20004910
 800ee18:	20004918 	.word	0x20004918

0800ee1c <__errno>:
 800ee1c:	4b01      	ldr	r3, [pc, #4]	; (800ee24 <__errno+0x8>)
 800ee1e:	6818      	ldr	r0, [r3, #0]
 800ee20:	4770      	bx	lr
 800ee22:	bf00      	nop
 800ee24:	2000001c 	.word	0x2000001c

0800ee28 <__libc_init_array>:
 800ee28:	b570      	push	{r4, r5, r6, lr}
 800ee2a:	4d0d      	ldr	r5, [pc, #52]	; (800ee60 <__libc_init_array+0x38>)
 800ee2c:	4c0d      	ldr	r4, [pc, #52]	; (800ee64 <__libc_init_array+0x3c>)
 800ee2e:	1b64      	subs	r4, r4, r5
 800ee30:	10a4      	asrs	r4, r4, #2
 800ee32:	2600      	movs	r6, #0
 800ee34:	42a6      	cmp	r6, r4
 800ee36:	d109      	bne.n	800ee4c <__libc_init_array+0x24>
 800ee38:	4d0b      	ldr	r5, [pc, #44]	; (800ee68 <__libc_init_array+0x40>)
 800ee3a:	4c0c      	ldr	r4, [pc, #48]	; (800ee6c <__libc_init_array+0x44>)
 800ee3c:	f005 f9a4 	bl	8014188 <_init>
 800ee40:	1b64      	subs	r4, r4, r5
 800ee42:	10a4      	asrs	r4, r4, #2
 800ee44:	2600      	movs	r6, #0
 800ee46:	42a6      	cmp	r6, r4
 800ee48:	d105      	bne.n	800ee56 <__libc_init_array+0x2e>
 800ee4a:	bd70      	pop	{r4, r5, r6, pc}
 800ee4c:	f855 3b04 	ldr.w	r3, [r5], #4
 800ee50:	4798      	blx	r3
 800ee52:	3601      	adds	r6, #1
 800ee54:	e7ee      	b.n	800ee34 <__libc_init_array+0xc>
 800ee56:	f855 3b04 	ldr.w	r3, [r5], #4
 800ee5a:	4798      	blx	r3
 800ee5c:	3601      	adds	r6, #1
 800ee5e:	e7f2      	b.n	800ee46 <__libc_init_array+0x1e>
 800ee60:	08014c20 	.word	0x08014c20
 800ee64:	08014c20 	.word	0x08014c20
 800ee68:	08014c20 	.word	0x08014c20
 800ee6c:	08014c24 	.word	0x08014c24

0800ee70 <memcpy>:
 800ee70:	440a      	add	r2, r1
 800ee72:	4291      	cmp	r1, r2
 800ee74:	f100 33ff 	add.w	r3, r0, #4294967295
 800ee78:	d100      	bne.n	800ee7c <memcpy+0xc>
 800ee7a:	4770      	bx	lr
 800ee7c:	b510      	push	{r4, lr}
 800ee7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ee82:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ee86:	4291      	cmp	r1, r2
 800ee88:	d1f9      	bne.n	800ee7e <memcpy+0xe>
 800ee8a:	bd10      	pop	{r4, pc}

0800ee8c <memset>:
 800ee8c:	4402      	add	r2, r0
 800ee8e:	4603      	mov	r3, r0
 800ee90:	4293      	cmp	r3, r2
 800ee92:	d100      	bne.n	800ee96 <memset+0xa>
 800ee94:	4770      	bx	lr
 800ee96:	f803 1b01 	strb.w	r1, [r3], #1
 800ee9a:	e7f9      	b.n	800ee90 <memset+0x4>

0800ee9c <__cvt>:
 800ee9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800eea0:	ec55 4b10 	vmov	r4, r5, d0
 800eea4:	2d00      	cmp	r5, #0
 800eea6:	460e      	mov	r6, r1
 800eea8:	4619      	mov	r1, r3
 800eeaa:	462b      	mov	r3, r5
 800eeac:	bfbb      	ittet	lt
 800eeae:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800eeb2:	461d      	movlt	r5, r3
 800eeb4:	2300      	movge	r3, #0
 800eeb6:	232d      	movlt	r3, #45	; 0x2d
 800eeb8:	700b      	strb	r3, [r1, #0]
 800eeba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800eebc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800eec0:	4691      	mov	r9, r2
 800eec2:	f023 0820 	bic.w	r8, r3, #32
 800eec6:	bfbc      	itt	lt
 800eec8:	4622      	movlt	r2, r4
 800eeca:	4614      	movlt	r4, r2
 800eecc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800eed0:	d005      	beq.n	800eede <__cvt+0x42>
 800eed2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800eed6:	d100      	bne.n	800eeda <__cvt+0x3e>
 800eed8:	3601      	adds	r6, #1
 800eeda:	2102      	movs	r1, #2
 800eedc:	e000      	b.n	800eee0 <__cvt+0x44>
 800eede:	2103      	movs	r1, #3
 800eee0:	ab03      	add	r3, sp, #12
 800eee2:	9301      	str	r3, [sp, #4]
 800eee4:	ab02      	add	r3, sp, #8
 800eee6:	9300      	str	r3, [sp, #0]
 800eee8:	ec45 4b10 	vmov	d0, r4, r5
 800eeec:	4653      	mov	r3, sl
 800eeee:	4632      	mov	r2, r6
 800eef0:	f000 fcea 	bl	800f8c8 <_dtoa_r>
 800eef4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800eef8:	4607      	mov	r7, r0
 800eefa:	d102      	bne.n	800ef02 <__cvt+0x66>
 800eefc:	f019 0f01 	tst.w	r9, #1
 800ef00:	d022      	beq.n	800ef48 <__cvt+0xac>
 800ef02:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ef06:	eb07 0906 	add.w	r9, r7, r6
 800ef0a:	d110      	bne.n	800ef2e <__cvt+0x92>
 800ef0c:	783b      	ldrb	r3, [r7, #0]
 800ef0e:	2b30      	cmp	r3, #48	; 0x30
 800ef10:	d10a      	bne.n	800ef28 <__cvt+0x8c>
 800ef12:	2200      	movs	r2, #0
 800ef14:	2300      	movs	r3, #0
 800ef16:	4620      	mov	r0, r4
 800ef18:	4629      	mov	r1, r5
 800ef1a:	f7f1 fdd5 	bl	8000ac8 <__aeabi_dcmpeq>
 800ef1e:	b918      	cbnz	r0, 800ef28 <__cvt+0x8c>
 800ef20:	f1c6 0601 	rsb	r6, r6, #1
 800ef24:	f8ca 6000 	str.w	r6, [sl]
 800ef28:	f8da 3000 	ldr.w	r3, [sl]
 800ef2c:	4499      	add	r9, r3
 800ef2e:	2200      	movs	r2, #0
 800ef30:	2300      	movs	r3, #0
 800ef32:	4620      	mov	r0, r4
 800ef34:	4629      	mov	r1, r5
 800ef36:	f7f1 fdc7 	bl	8000ac8 <__aeabi_dcmpeq>
 800ef3a:	b108      	cbz	r0, 800ef40 <__cvt+0xa4>
 800ef3c:	f8cd 900c 	str.w	r9, [sp, #12]
 800ef40:	2230      	movs	r2, #48	; 0x30
 800ef42:	9b03      	ldr	r3, [sp, #12]
 800ef44:	454b      	cmp	r3, r9
 800ef46:	d307      	bcc.n	800ef58 <__cvt+0xbc>
 800ef48:	9b03      	ldr	r3, [sp, #12]
 800ef4a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ef4c:	1bdb      	subs	r3, r3, r7
 800ef4e:	4638      	mov	r0, r7
 800ef50:	6013      	str	r3, [r2, #0]
 800ef52:	b004      	add	sp, #16
 800ef54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ef58:	1c59      	adds	r1, r3, #1
 800ef5a:	9103      	str	r1, [sp, #12]
 800ef5c:	701a      	strb	r2, [r3, #0]
 800ef5e:	e7f0      	b.n	800ef42 <__cvt+0xa6>

0800ef60 <__exponent>:
 800ef60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ef62:	4603      	mov	r3, r0
 800ef64:	2900      	cmp	r1, #0
 800ef66:	bfb8      	it	lt
 800ef68:	4249      	neglt	r1, r1
 800ef6a:	f803 2b02 	strb.w	r2, [r3], #2
 800ef6e:	bfb4      	ite	lt
 800ef70:	222d      	movlt	r2, #45	; 0x2d
 800ef72:	222b      	movge	r2, #43	; 0x2b
 800ef74:	2909      	cmp	r1, #9
 800ef76:	7042      	strb	r2, [r0, #1]
 800ef78:	dd2a      	ble.n	800efd0 <__exponent+0x70>
 800ef7a:	f10d 0407 	add.w	r4, sp, #7
 800ef7e:	46a4      	mov	ip, r4
 800ef80:	270a      	movs	r7, #10
 800ef82:	46a6      	mov	lr, r4
 800ef84:	460a      	mov	r2, r1
 800ef86:	fb91 f6f7 	sdiv	r6, r1, r7
 800ef8a:	fb07 1516 	mls	r5, r7, r6, r1
 800ef8e:	3530      	adds	r5, #48	; 0x30
 800ef90:	2a63      	cmp	r2, #99	; 0x63
 800ef92:	f104 34ff 	add.w	r4, r4, #4294967295
 800ef96:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800ef9a:	4631      	mov	r1, r6
 800ef9c:	dcf1      	bgt.n	800ef82 <__exponent+0x22>
 800ef9e:	3130      	adds	r1, #48	; 0x30
 800efa0:	f1ae 0502 	sub.w	r5, lr, #2
 800efa4:	f804 1c01 	strb.w	r1, [r4, #-1]
 800efa8:	1c44      	adds	r4, r0, #1
 800efaa:	4629      	mov	r1, r5
 800efac:	4561      	cmp	r1, ip
 800efae:	d30a      	bcc.n	800efc6 <__exponent+0x66>
 800efb0:	f10d 0209 	add.w	r2, sp, #9
 800efb4:	eba2 020e 	sub.w	r2, r2, lr
 800efb8:	4565      	cmp	r5, ip
 800efba:	bf88      	it	hi
 800efbc:	2200      	movhi	r2, #0
 800efbe:	4413      	add	r3, r2
 800efc0:	1a18      	subs	r0, r3, r0
 800efc2:	b003      	add	sp, #12
 800efc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800efc6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800efca:	f804 2f01 	strb.w	r2, [r4, #1]!
 800efce:	e7ed      	b.n	800efac <__exponent+0x4c>
 800efd0:	2330      	movs	r3, #48	; 0x30
 800efd2:	3130      	adds	r1, #48	; 0x30
 800efd4:	7083      	strb	r3, [r0, #2]
 800efd6:	70c1      	strb	r1, [r0, #3]
 800efd8:	1d03      	adds	r3, r0, #4
 800efda:	e7f1      	b.n	800efc0 <__exponent+0x60>

0800efdc <_printf_float>:
 800efdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800efe0:	ed2d 8b02 	vpush	{d8}
 800efe4:	b08d      	sub	sp, #52	; 0x34
 800efe6:	460c      	mov	r4, r1
 800efe8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800efec:	4616      	mov	r6, r2
 800efee:	461f      	mov	r7, r3
 800eff0:	4605      	mov	r5, r0
 800eff2:	f001 fa57 	bl	80104a4 <_localeconv_r>
 800eff6:	f8d0 a000 	ldr.w	sl, [r0]
 800effa:	4650      	mov	r0, sl
 800effc:	f7f1 f8e8 	bl	80001d0 <strlen>
 800f000:	2300      	movs	r3, #0
 800f002:	930a      	str	r3, [sp, #40]	; 0x28
 800f004:	6823      	ldr	r3, [r4, #0]
 800f006:	9305      	str	r3, [sp, #20]
 800f008:	f8d8 3000 	ldr.w	r3, [r8]
 800f00c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800f010:	3307      	adds	r3, #7
 800f012:	f023 0307 	bic.w	r3, r3, #7
 800f016:	f103 0208 	add.w	r2, r3, #8
 800f01a:	f8c8 2000 	str.w	r2, [r8]
 800f01e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f022:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800f026:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800f02a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800f02e:	9307      	str	r3, [sp, #28]
 800f030:	f8cd 8018 	str.w	r8, [sp, #24]
 800f034:	ee08 0a10 	vmov	s16, r0
 800f038:	4b9f      	ldr	r3, [pc, #636]	; (800f2b8 <_printf_float+0x2dc>)
 800f03a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f03e:	f04f 32ff 	mov.w	r2, #4294967295
 800f042:	f7f1 fd73 	bl	8000b2c <__aeabi_dcmpun>
 800f046:	bb88      	cbnz	r0, 800f0ac <_printf_float+0xd0>
 800f048:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f04c:	4b9a      	ldr	r3, [pc, #616]	; (800f2b8 <_printf_float+0x2dc>)
 800f04e:	f04f 32ff 	mov.w	r2, #4294967295
 800f052:	f7f1 fd4d 	bl	8000af0 <__aeabi_dcmple>
 800f056:	bb48      	cbnz	r0, 800f0ac <_printf_float+0xd0>
 800f058:	2200      	movs	r2, #0
 800f05a:	2300      	movs	r3, #0
 800f05c:	4640      	mov	r0, r8
 800f05e:	4649      	mov	r1, r9
 800f060:	f7f1 fd3c 	bl	8000adc <__aeabi_dcmplt>
 800f064:	b110      	cbz	r0, 800f06c <_printf_float+0x90>
 800f066:	232d      	movs	r3, #45	; 0x2d
 800f068:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f06c:	4b93      	ldr	r3, [pc, #588]	; (800f2bc <_printf_float+0x2e0>)
 800f06e:	4894      	ldr	r0, [pc, #592]	; (800f2c0 <_printf_float+0x2e4>)
 800f070:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800f074:	bf94      	ite	ls
 800f076:	4698      	movls	r8, r3
 800f078:	4680      	movhi	r8, r0
 800f07a:	2303      	movs	r3, #3
 800f07c:	6123      	str	r3, [r4, #16]
 800f07e:	9b05      	ldr	r3, [sp, #20]
 800f080:	f023 0204 	bic.w	r2, r3, #4
 800f084:	6022      	str	r2, [r4, #0]
 800f086:	f04f 0900 	mov.w	r9, #0
 800f08a:	9700      	str	r7, [sp, #0]
 800f08c:	4633      	mov	r3, r6
 800f08e:	aa0b      	add	r2, sp, #44	; 0x2c
 800f090:	4621      	mov	r1, r4
 800f092:	4628      	mov	r0, r5
 800f094:	f000 f9d8 	bl	800f448 <_printf_common>
 800f098:	3001      	adds	r0, #1
 800f09a:	f040 8090 	bne.w	800f1be <_printf_float+0x1e2>
 800f09e:	f04f 30ff 	mov.w	r0, #4294967295
 800f0a2:	b00d      	add	sp, #52	; 0x34
 800f0a4:	ecbd 8b02 	vpop	{d8}
 800f0a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f0ac:	4642      	mov	r2, r8
 800f0ae:	464b      	mov	r3, r9
 800f0b0:	4640      	mov	r0, r8
 800f0b2:	4649      	mov	r1, r9
 800f0b4:	f7f1 fd3a 	bl	8000b2c <__aeabi_dcmpun>
 800f0b8:	b140      	cbz	r0, 800f0cc <_printf_float+0xf0>
 800f0ba:	464b      	mov	r3, r9
 800f0bc:	2b00      	cmp	r3, #0
 800f0be:	bfbc      	itt	lt
 800f0c0:	232d      	movlt	r3, #45	; 0x2d
 800f0c2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800f0c6:	487f      	ldr	r0, [pc, #508]	; (800f2c4 <_printf_float+0x2e8>)
 800f0c8:	4b7f      	ldr	r3, [pc, #508]	; (800f2c8 <_printf_float+0x2ec>)
 800f0ca:	e7d1      	b.n	800f070 <_printf_float+0x94>
 800f0cc:	6863      	ldr	r3, [r4, #4]
 800f0ce:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800f0d2:	9206      	str	r2, [sp, #24]
 800f0d4:	1c5a      	adds	r2, r3, #1
 800f0d6:	d13f      	bne.n	800f158 <_printf_float+0x17c>
 800f0d8:	2306      	movs	r3, #6
 800f0da:	6063      	str	r3, [r4, #4]
 800f0dc:	9b05      	ldr	r3, [sp, #20]
 800f0de:	6861      	ldr	r1, [r4, #4]
 800f0e0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800f0e4:	2300      	movs	r3, #0
 800f0e6:	9303      	str	r3, [sp, #12]
 800f0e8:	ab0a      	add	r3, sp, #40	; 0x28
 800f0ea:	e9cd b301 	strd	fp, r3, [sp, #4]
 800f0ee:	ab09      	add	r3, sp, #36	; 0x24
 800f0f0:	ec49 8b10 	vmov	d0, r8, r9
 800f0f4:	9300      	str	r3, [sp, #0]
 800f0f6:	6022      	str	r2, [r4, #0]
 800f0f8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800f0fc:	4628      	mov	r0, r5
 800f0fe:	f7ff fecd 	bl	800ee9c <__cvt>
 800f102:	9b06      	ldr	r3, [sp, #24]
 800f104:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f106:	2b47      	cmp	r3, #71	; 0x47
 800f108:	4680      	mov	r8, r0
 800f10a:	d108      	bne.n	800f11e <_printf_float+0x142>
 800f10c:	1cc8      	adds	r0, r1, #3
 800f10e:	db02      	blt.n	800f116 <_printf_float+0x13a>
 800f110:	6863      	ldr	r3, [r4, #4]
 800f112:	4299      	cmp	r1, r3
 800f114:	dd41      	ble.n	800f19a <_printf_float+0x1be>
 800f116:	f1ab 0b02 	sub.w	fp, fp, #2
 800f11a:	fa5f fb8b 	uxtb.w	fp, fp
 800f11e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f122:	d820      	bhi.n	800f166 <_printf_float+0x18a>
 800f124:	3901      	subs	r1, #1
 800f126:	465a      	mov	r2, fp
 800f128:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800f12c:	9109      	str	r1, [sp, #36]	; 0x24
 800f12e:	f7ff ff17 	bl	800ef60 <__exponent>
 800f132:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f134:	1813      	adds	r3, r2, r0
 800f136:	2a01      	cmp	r2, #1
 800f138:	4681      	mov	r9, r0
 800f13a:	6123      	str	r3, [r4, #16]
 800f13c:	dc02      	bgt.n	800f144 <_printf_float+0x168>
 800f13e:	6822      	ldr	r2, [r4, #0]
 800f140:	07d2      	lsls	r2, r2, #31
 800f142:	d501      	bpl.n	800f148 <_printf_float+0x16c>
 800f144:	3301      	adds	r3, #1
 800f146:	6123      	str	r3, [r4, #16]
 800f148:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800f14c:	2b00      	cmp	r3, #0
 800f14e:	d09c      	beq.n	800f08a <_printf_float+0xae>
 800f150:	232d      	movs	r3, #45	; 0x2d
 800f152:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f156:	e798      	b.n	800f08a <_printf_float+0xae>
 800f158:	9a06      	ldr	r2, [sp, #24]
 800f15a:	2a47      	cmp	r2, #71	; 0x47
 800f15c:	d1be      	bne.n	800f0dc <_printf_float+0x100>
 800f15e:	2b00      	cmp	r3, #0
 800f160:	d1bc      	bne.n	800f0dc <_printf_float+0x100>
 800f162:	2301      	movs	r3, #1
 800f164:	e7b9      	b.n	800f0da <_printf_float+0xfe>
 800f166:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800f16a:	d118      	bne.n	800f19e <_printf_float+0x1c2>
 800f16c:	2900      	cmp	r1, #0
 800f16e:	6863      	ldr	r3, [r4, #4]
 800f170:	dd0b      	ble.n	800f18a <_printf_float+0x1ae>
 800f172:	6121      	str	r1, [r4, #16]
 800f174:	b913      	cbnz	r3, 800f17c <_printf_float+0x1a0>
 800f176:	6822      	ldr	r2, [r4, #0]
 800f178:	07d0      	lsls	r0, r2, #31
 800f17a:	d502      	bpl.n	800f182 <_printf_float+0x1a6>
 800f17c:	3301      	adds	r3, #1
 800f17e:	440b      	add	r3, r1
 800f180:	6123      	str	r3, [r4, #16]
 800f182:	65a1      	str	r1, [r4, #88]	; 0x58
 800f184:	f04f 0900 	mov.w	r9, #0
 800f188:	e7de      	b.n	800f148 <_printf_float+0x16c>
 800f18a:	b913      	cbnz	r3, 800f192 <_printf_float+0x1b6>
 800f18c:	6822      	ldr	r2, [r4, #0]
 800f18e:	07d2      	lsls	r2, r2, #31
 800f190:	d501      	bpl.n	800f196 <_printf_float+0x1ba>
 800f192:	3302      	adds	r3, #2
 800f194:	e7f4      	b.n	800f180 <_printf_float+0x1a4>
 800f196:	2301      	movs	r3, #1
 800f198:	e7f2      	b.n	800f180 <_printf_float+0x1a4>
 800f19a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800f19e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f1a0:	4299      	cmp	r1, r3
 800f1a2:	db05      	blt.n	800f1b0 <_printf_float+0x1d4>
 800f1a4:	6823      	ldr	r3, [r4, #0]
 800f1a6:	6121      	str	r1, [r4, #16]
 800f1a8:	07d8      	lsls	r0, r3, #31
 800f1aa:	d5ea      	bpl.n	800f182 <_printf_float+0x1a6>
 800f1ac:	1c4b      	adds	r3, r1, #1
 800f1ae:	e7e7      	b.n	800f180 <_printf_float+0x1a4>
 800f1b0:	2900      	cmp	r1, #0
 800f1b2:	bfd4      	ite	le
 800f1b4:	f1c1 0202 	rsble	r2, r1, #2
 800f1b8:	2201      	movgt	r2, #1
 800f1ba:	4413      	add	r3, r2
 800f1bc:	e7e0      	b.n	800f180 <_printf_float+0x1a4>
 800f1be:	6823      	ldr	r3, [r4, #0]
 800f1c0:	055a      	lsls	r2, r3, #21
 800f1c2:	d407      	bmi.n	800f1d4 <_printf_float+0x1f8>
 800f1c4:	6923      	ldr	r3, [r4, #16]
 800f1c6:	4642      	mov	r2, r8
 800f1c8:	4631      	mov	r1, r6
 800f1ca:	4628      	mov	r0, r5
 800f1cc:	47b8      	blx	r7
 800f1ce:	3001      	adds	r0, #1
 800f1d0:	d12c      	bne.n	800f22c <_printf_float+0x250>
 800f1d2:	e764      	b.n	800f09e <_printf_float+0xc2>
 800f1d4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f1d8:	f240 80e0 	bls.w	800f39c <_printf_float+0x3c0>
 800f1dc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f1e0:	2200      	movs	r2, #0
 800f1e2:	2300      	movs	r3, #0
 800f1e4:	f7f1 fc70 	bl	8000ac8 <__aeabi_dcmpeq>
 800f1e8:	2800      	cmp	r0, #0
 800f1ea:	d034      	beq.n	800f256 <_printf_float+0x27a>
 800f1ec:	4a37      	ldr	r2, [pc, #220]	; (800f2cc <_printf_float+0x2f0>)
 800f1ee:	2301      	movs	r3, #1
 800f1f0:	4631      	mov	r1, r6
 800f1f2:	4628      	mov	r0, r5
 800f1f4:	47b8      	blx	r7
 800f1f6:	3001      	adds	r0, #1
 800f1f8:	f43f af51 	beq.w	800f09e <_printf_float+0xc2>
 800f1fc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f200:	429a      	cmp	r2, r3
 800f202:	db02      	blt.n	800f20a <_printf_float+0x22e>
 800f204:	6823      	ldr	r3, [r4, #0]
 800f206:	07d8      	lsls	r0, r3, #31
 800f208:	d510      	bpl.n	800f22c <_printf_float+0x250>
 800f20a:	ee18 3a10 	vmov	r3, s16
 800f20e:	4652      	mov	r2, sl
 800f210:	4631      	mov	r1, r6
 800f212:	4628      	mov	r0, r5
 800f214:	47b8      	blx	r7
 800f216:	3001      	adds	r0, #1
 800f218:	f43f af41 	beq.w	800f09e <_printf_float+0xc2>
 800f21c:	f04f 0800 	mov.w	r8, #0
 800f220:	f104 091a 	add.w	r9, r4, #26
 800f224:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f226:	3b01      	subs	r3, #1
 800f228:	4543      	cmp	r3, r8
 800f22a:	dc09      	bgt.n	800f240 <_printf_float+0x264>
 800f22c:	6823      	ldr	r3, [r4, #0]
 800f22e:	079b      	lsls	r3, r3, #30
 800f230:	f100 8105 	bmi.w	800f43e <_printf_float+0x462>
 800f234:	68e0      	ldr	r0, [r4, #12]
 800f236:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f238:	4298      	cmp	r0, r3
 800f23a:	bfb8      	it	lt
 800f23c:	4618      	movlt	r0, r3
 800f23e:	e730      	b.n	800f0a2 <_printf_float+0xc6>
 800f240:	2301      	movs	r3, #1
 800f242:	464a      	mov	r2, r9
 800f244:	4631      	mov	r1, r6
 800f246:	4628      	mov	r0, r5
 800f248:	47b8      	blx	r7
 800f24a:	3001      	adds	r0, #1
 800f24c:	f43f af27 	beq.w	800f09e <_printf_float+0xc2>
 800f250:	f108 0801 	add.w	r8, r8, #1
 800f254:	e7e6      	b.n	800f224 <_printf_float+0x248>
 800f256:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f258:	2b00      	cmp	r3, #0
 800f25a:	dc39      	bgt.n	800f2d0 <_printf_float+0x2f4>
 800f25c:	4a1b      	ldr	r2, [pc, #108]	; (800f2cc <_printf_float+0x2f0>)
 800f25e:	2301      	movs	r3, #1
 800f260:	4631      	mov	r1, r6
 800f262:	4628      	mov	r0, r5
 800f264:	47b8      	blx	r7
 800f266:	3001      	adds	r0, #1
 800f268:	f43f af19 	beq.w	800f09e <_printf_float+0xc2>
 800f26c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f270:	4313      	orrs	r3, r2
 800f272:	d102      	bne.n	800f27a <_printf_float+0x29e>
 800f274:	6823      	ldr	r3, [r4, #0]
 800f276:	07d9      	lsls	r1, r3, #31
 800f278:	d5d8      	bpl.n	800f22c <_printf_float+0x250>
 800f27a:	ee18 3a10 	vmov	r3, s16
 800f27e:	4652      	mov	r2, sl
 800f280:	4631      	mov	r1, r6
 800f282:	4628      	mov	r0, r5
 800f284:	47b8      	blx	r7
 800f286:	3001      	adds	r0, #1
 800f288:	f43f af09 	beq.w	800f09e <_printf_float+0xc2>
 800f28c:	f04f 0900 	mov.w	r9, #0
 800f290:	f104 0a1a 	add.w	sl, r4, #26
 800f294:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f296:	425b      	negs	r3, r3
 800f298:	454b      	cmp	r3, r9
 800f29a:	dc01      	bgt.n	800f2a0 <_printf_float+0x2c4>
 800f29c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f29e:	e792      	b.n	800f1c6 <_printf_float+0x1ea>
 800f2a0:	2301      	movs	r3, #1
 800f2a2:	4652      	mov	r2, sl
 800f2a4:	4631      	mov	r1, r6
 800f2a6:	4628      	mov	r0, r5
 800f2a8:	47b8      	blx	r7
 800f2aa:	3001      	adds	r0, #1
 800f2ac:	f43f aef7 	beq.w	800f09e <_printf_float+0xc2>
 800f2b0:	f109 0901 	add.w	r9, r9, #1
 800f2b4:	e7ee      	b.n	800f294 <_printf_float+0x2b8>
 800f2b6:	bf00      	nop
 800f2b8:	7fefffff 	.word	0x7fefffff
 800f2bc:	080143ec 	.word	0x080143ec
 800f2c0:	080143f0 	.word	0x080143f0
 800f2c4:	080143f8 	.word	0x080143f8
 800f2c8:	080143f4 	.word	0x080143f4
 800f2cc:	080143fc 	.word	0x080143fc
 800f2d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f2d2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f2d4:	429a      	cmp	r2, r3
 800f2d6:	bfa8      	it	ge
 800f2d8:	461a      	movge	r2, r3
 800f2da:	2a00      	cmp	r2, #0
 800f2dc:	4691      	mov	r9, r2
 800f2de:	dc37      	bgt.n	800f350 <_printf_float+0x374>
 800f2e0:	f04f 0b00 	mov.w	fp, #0
 800f2e4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f2e8:	f104 021a 	add.w	r2, r4, #26
 800f2ec:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f2ee:	9305      	str	r3, [sp, #20]
 800f2f0:	eba3 0309 	sub.w	r3, r3, r9
 800f2f4:	455b      	cmp	r3, fp
 800f2f6:	dc33      	bgt.n	800f360 <_printf_float+0x384>
 800f2f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f2fc:	429a      	cmp	r2, r3
 800f2fe:	db3b      	blt.n	800f378 <_printf_float+0x39c>
 800f300:	6823      	ldr	r3, [r4, #0]
 800f302:	07da      	lsls	r2, r3, #31
 800f304:	d438      	bmi.n	800f378 <_printf_float+0x39c>
 800f306:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f308:	9a05      	ldr	r2, [sp, #20]
 800f30a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f30c:	1a9a      	subs	r2, r3, r2
 800f30e:	eba3 0901 	sub.w	r9, r3, r1
 800f312:	4591      	cmp	r9, r2
 800f314:	bfa8      	it	ge
 800f316:	4691      	movge	r9, r2
 800f318:	f1b9 0f00 	cmp.w	r9, #0
 800f31c:	dc35      	bgt.n	800f38a <_printf_float+0x3ae>
 800f31e:	f04f 0800 	mov.w	r8, #0
 800f322:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f326:	f104 0a1a 	add.w	sl, r4, #26
 800f32a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f32e:	1a9b      	subs	r3, r3, r2
 800f330:	eba3 0309 	sub.w	r3, r3, r9
 800f334:	4543      	cmp	r3, r8
 800f336:	f77f af79 	ble.w	800f22c <_printf_float+0x250>
 800f33a:	2301      	movs	r3, #1
 800f33c:	4652      	mov	r2, sl
 800f33e:	4631      	mov	r1, r6
 800f340:	4628      	mov	r0, r5
 800f342:	47b8      	blx	r7
 800f344:	3001      	adds	r0, #1
 800f346:	f43f aeaa 	beq.w	800f09e <_printf_float+0xc2>
 800f34a:	f108 0801 	add.w	r8, r8, #1
 800f34e:	e7ec      	b.n	800f32a <_printf_float+0x34e>
 800f350:	4613      	mov	r3, r2
 800f352:	4631      	mov	r1, r6
 800f354:	4642      	mov	r2, r8
 800f356:	4628      	mov	r0, r5
 800f358:	47b8      	blx	r7
 800f35a:	3001      	adds	r0, #1
 800f35c:	d1c0      	bne.n	800f2e0 <_printf_float+0x304>
 800f35e:	e69e      	b.n	800f09e <_printf_float+0xc2>
 800f360:	2301      	movs	r3, #1
 800f362:	4631      	mov	r1, r6
 800f364:	4628      	mov	r0, r5
 800f366:	9205      	str	r2, [sp, #20]
 800f368:	47b8      	blx	r7
 800f36a:	3001      	adds	r0, #1
 800f36c:	f43f ae97 	beq.w	800f09e <_printf_float+0xc2>
 800f370:	9a05      	ldr	r2, [sp, #20]
 800f372:	f10b 0b01 	add.w	fp, fp, #1
 800f376:	e7b9      	b.n	800f2ec <_printf_float+0x310>
 800f378:	ee18 3a10 	vmov	r3, s16
 800f37c:	4652      	mov	r2, sl
 800f37e:	4631      	mov	r1, r6
 800f380:	4628      	mov	r0, r5
 800f382:	47b8      	blx	r7
 800f384:	3001      	adds	r0, #1
 800f386:	d1be      	bne.n	800f306 <_printf_float+0x32a>
 800f388:	e689      	b.n	800f09e <_printf_float+0xc2>
 800f38a:	9a05      	ldr	r2, [sp, #20]
 800f38c:	464b      	mov	r3, r9
 800f38e:	4442      	add	r2, r8
 800f390:	4631      	mov	r1, r6
 800f392:	4628      	mov	r0, r5
 800f394:	47b8      	blx	r7
 800f396:	3001      	adds	r0, #1
 800f398:	d1c1      	bne.n	800f31e <_printf_float+0x342>
 800f39a:	e680      	b.n	800f09e <_printf_float+0xc2>
 800f39c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f39e:	2a01      	cmp	r2, #1
 800f3a0:	dc01      	bgt.n	800f3a6 <_printf_float+0x3ca>
 800f3a2:	07db      	lsls	r3, r3, #31
 800f3a4:	d538      	bpl.n	800f418 <_printf_float+0x43c>
 800f3a6:	2301      	movs	r3, #1
 800f3a8:	4642      	mov	r2, r8
 800f3aa:	4631      	mov	r1, r6
 800f3ac:	4628      	mov	r0, r5
 800f3ae:	47b8      	blx	r7
 800f3b0:	3001      	adds	r0, #1
 800f3b2:	f43f ae74 	beq.w	800f09e <_printf_float+0xc2>
 800f3b6:	ee18 3a10 	vmov	r3, s16
 800f3ba:	4652      	mov	r2, sl
 800f3bc:	4631      	mov	r1, r6
 800f3be:	4628      	mov	r0, r5
 800f3c0:	47b8      	blx	r7
 800f3c2:	3001      	adds	r0, #1
 800f3c4:	f43f ae6b 	beq.w	800f09e <_printf_float+0xc2>
 800f3c8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f3cc:	2200      	movs	r2, #0
 800f3ce:	2300      	movs	r3, #0
 800f3d0:	f7f1 fb7a 	bl	8000ac8 <__aeabi_dcmpeq>
 800f3d4:	b9d8      	cbnz	r0, 800f40e <_printf_float+0x432>
 800f3d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f3d8:	f108 0201 	add.w	r2, r8, #1
 800f3dc:	3b01      	subs	r3, #1
 800f3de:	4631      	mov	r1, r6
 800f3e0:	4628      	mov	r0, r5
 800f3e2:	47b8      	blx	r7
 800f3e4:	3001      	adds	r0, #1
 800f3e6:	d10e      	bne.n	800f406 <_printf_float+0x42a>
 800f3e8:	e659      	b.n	800f09e <_printf_float+0xc2>
 800f3ea:	2301      	movs	r3, #1
 800f3ec:	4652      	mov	r2, sl
 800f3ee:	4631      	mov	r1, r6
 800f3f0:	4628      	mov	r0, r5
 800f3f2:	47b8      	blx	r7
 800f3f4:	3001      	adds	r0, #1
 800f3f6:	f43f ae52 	beq.w	800f09e <_printf_float+0xc2>
 800f3fa:	f108 0801 	add.w	r8, r8, #1
 800f3fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f400:	3b01      	subs	r3, #1
 800f402:	4543      	cmp	r3, r8
 800f404:	dcf1      	bgt.n	800f3ea <_printf_float+0x40e>
 800f406:	464b      	mov	r3, r9
 800f408:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800f40c:	e6dc      	b.n	800f1c8 <_printf_float+0x1ec>
 800f40e:	f04f 0800 	mov.w	r8, #0
 800f412:	f104 0a1a 	add.w	sl, r4, #26
 800f416:	e7f2      	b.n	800f3fe <_printf_float+0x422>
 800f418:	2301      	movs	r3, #1
 800f41a:	4642      	mov	r2, r8
 800f41c:	e7df      	b.n	800f3de <_printf_float+0x402>
 800f41e:	2301      	movs	r3, #1
 800f420:	464a      	mov	r2, r9
 800f422:	4631      	mov	r1, r6
 800f424:	4628      	mov	r0, r5
 800f426:	47b8      	blx	r7
 800f428:	3001      	adds	r0, #1
 800f42a:	f43f ae38 	beq.w	800f09e <_printf_float+0xc2>
 800f42e:	f108 0801 	add.w	r8, r8, #1
 800f432:	68e3      	ldr	r3, [r4, #12]
 800f434:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f436:	1a5b      	subs	r3, r3, r1
 800f438:	4543      	cmp	r3, r8
 800f43a:	dcf0      	bgt.n	800f41e <_printf_float+0x442>
 800f43c:	e6fa      	b.n	800f234 <_printf_float+0x258>
 800f43e:	f04f 0800 	mov.w	r8, #0
 800f442:	f104 0919 	add.w	r9, r4, #25
 800f446:	e7f4      	b.n	800f432 <_printf_float+0x456>

0800f448 <_printf_common>:
 800f448:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f44c:	4616      	mov	r6, r2
 800f44e:	4699      	mov	r9, r3
 800f450:	688a      	ldr	r2, [r1, #8]
 800f452:	690b      	ldr	r3, [r1, #16]
 800f454:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f458:	4293      	cmp	r3, r2
 800f45a:	bfb8      	it	lt
 800f45c:	4613      	movlt	r3, r2
 800f45e:	6033      	str	r3, [r6, #0]
 800f460:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f464:	4607      	mov	r7, r0
 800f466:	460c      	mov	r4, r1
 800f468:	b10a      	cbz	r2, 800f46e <_printf_common+0x26>
 800f46a:	3301      	adds	r3, #1
 800f46c:	6033      	str	r3, [r6, #0]
 800f46e:	6823      	ldr	r3, [r4, #0]
 800f470:	0699      	lsls	r1, r3, #26
 800f472:	bf42      	ittt	mi
 800f474:	6833      	ldrmi	r3, [r6, #0]
 800f476:	3302      	addmi	r3, #2
 800f478:	6033      	strmi	r3, [r6, #0]
 800f47a:	6825      	ldr	r5, [r4, #0]
 800f47c:	f015 0506 	ands.w	r5, r5, #6
 800f480:	d106      	bne.n	800f490 <_printf_common+0x48>
 800f482:	f104 0a19 	add.w	sl, r4, #25
 800f486:	68e3      	ldr	r3, [r4, #12]
 800f488:	6832      	ldr	r2, [r6, #0]
 800f48a:	1a9b      	subs	r3, r3, r2
 800f48c:	42ab      	cmp	r3, r5
 800f48e:	dc26      	bgt.n	800f4de <_printf_common+0x96>
 800f490:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f494:	1e13      	subs	r3, r2, #0
 800f496:	6822      	ldr	r2, [r4, #0]
 800f498:	bf18      	it	ne
 800f49a:	2301      	movne	r3, #1
 800f49c:	0692      	lsls	r2, r2, #26
 800f49e:	d42b      	bmi.n	800f4f8 <_printf_common+0xb0>
 800f4a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f4a4:	4649      	mov	r1, r9
 800f4a6:	4638      	mov	r0, r7
 800f4a8:	47c0      	blx	r8
 800f4aa:	3001      	adds	r0, #1
 800f4ac:	d01e      	beq.n	800f4ec <_printf_common+0xa4>
 800f4ae:	6823      	ldr	r3, [r4, #0]
 800f4b0:	68e5      	ldr	r5, [r4, #12]
 800f4b2:	6832      	ldr	r2, [r6, #0]
 800f4b4:	f003 0306 	and.w	r3, r3, #6
 800f4b8:	2b04      	cmp	r3, #4
 800f4ba:	bf08      	it	eq
 800f4bc:	1aad      	subeq	r5, r5, r2
 800f4be:	68a3      	ldr	r3, [r4, #8]
 800f4c0:	6922      	ldr	r2, [r4, #16]
 800f4c2:	bf0c      	ite	eq
 800f4c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f4c8:	2500      	movne	r5, #0
 800f4ca:	4293      	cmp	r3, r2
 800f4cc:	bfc4      	itt	gt
 800f4ce:	1a9b      	subgt	r3, r3, r2
 800f4d0:	18ed      	addgt	r5, r5, r3
 800f4d2:	2600      	movs	r6, #0
 800f4d4:	341a      	adds	r4, #26
 800f4d6:	42b5      	cmp	r5, r6
 800f4d8:	d11a      	bne.n	800f510 <_printf_common+0xc8>
 800f4da:	2000      	movs	r0, #0
 800f4dc:	e008      	b.n	800f4f0 <_printf_common+0xa8>
 800f4de:	2301      	movs	r3, #1
 800f4e0:	4652      	mov	r2, sl
 800f4e2:	4649      	mov	r1, r9
 800f4e4:	4638      	mov	r0, r7
 800f4e6:	47c0      	blx	r8
 800f4e8:	3001      	adds	r0, #1
 800f4ea:	d103      	bne.n	800f4f4 <_printf_common+0xac>
 800f4ec:	f04f 30ff 	mov.w	r0, #4294967295
 800f4f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f4f4:	3501      	adds	r5, #1
 800f4f6:	e7c6      	b.n	800f486 <_printf_common+0x3e>
 800f4f8:	18e1      	adds	r1, r4, r3
 800f4fa:	1c5a      	adds	r2, r3, #1
 800f4fc:	2030      	movs	r0, #48	; 0x30
 800f4fe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f502:	4422      	add	r2, r4
 800f504:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f508:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f50c:	3302      	adds	r3, #2
 800f50e:	e7c7      	b.n	800f4a0 <_printf_common+0x58>
 800f510:	2301      	movs	r3, #1
 800f512:	4622      	mov	r2, r4
 800f514:	4649      	mov	r1, r9
 800f516:	4638      	mov	r0, r7
 800f518:	47c0      	blx	r8
 800f51a:	3001      	adds	r0, #1
 800f51c:	d0e6      	beq.n	800f4ec <_printf_common+0xa4>
 800f51e:	3601      	adds	r6, #1
 800f520:	e7d9      	b.n	800f4d6 <_printf_common+0x8e>
	...

0800f524 <_printf_i>:
 800f524:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f528:	7e0f      	ldrb	r7, [r1, #24]
 800f52a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f52c:	2f78      	cmp	r7, #120	; 0x78
 800f52e:	4691      	mov	r9, r2
 800f530:	4680      	mov	r8, r0
 800f532:	460c      	mov	r4, r1
 800f534:	469a      	mov	sl, r3
 800f536:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f53a:	d807      	bhi.n	800f54c <_printf_i+0x28>
 800f53c:	2f62      	cmp	r7, #98	; 0x62
 800f53e:	d80a      	bhi.n	800f556 <_printf_i+0x32>
 800f540:	2f00      	cmp	r7, #0
 800f542:	f000 80d8 	beq.w	800f6f6 <_printf_i+0x1d2>
 800f546:	2f58      	cmp	r7, #88	; 0x58
 800f548:	f000 80a3 	beq.w	800f692 <_printf_i+0x16e>
 800f54c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f550:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f554:	e03a      	b.n	800f5cc <_printf_i+0xa8>
 800f556:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f55a:	2b15      	cmp	r3, #21
 800f55c:	d8f6      	bhi.n	800f54c <_printf_i+0x28>
 800f55e:	a101      	add	r1, pc, #4	; (adr r1, 800f564 <_printf_i+0x40>)
 800f560:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f564:	0800f5bd 	.word	0x0800f5bd
 800f568:	0800f5d1 	.word	0x0800f5d1
 800f56c:	0800f54d 	.word	0x0800f54d
 800f570:	0800f54d 	.word	0x0800f54d
 800f574:	0800f54d 	.word	0x0800f54d
 800f578:	0800f54d 	.word	0x0800f54d
 800f57c:	0800f5d1 	.word	0x0800f5d1
 800f580:	0800f54d 	.word	0x0800f54d
 800f584:	0800f54d 	.word	0x0800f54d
 800f588:	0800f54d 	.word	0x0800f54d
 800f58c:	0800f54d 	.word	0x0800f54d
 800f590:	0800f6dd 	.word	0x0800f6dd
 800f594:	0800f601 	.word	0x0800f601
 800f598:	0800f6bf 	.word	0x0800f6bf
 800f59c:	0800f54d 	.word	0x0800f54d
 800f5a0:	0800f54d 	.word	0x0800f54d
 800f5a4:	0800f6ff 	.word	0x0800f6ff
 800f5a8:	0800f54d 	.word	0x0800f54d
 800f5ac:	0800f601 	.word	0x0800f601
 800f5b0:	0800f54d 	.word	0x0800f54d
 800f5b4:	0800f54d 	.word	0x0800f54d
 800f5b8:	0800f6c7 	.word	0x0800f6c7
 800f5bc:	682b      	ldr	r3, [r5, #0]
 800f5be:	1d1a      	adds	r2, r3, #4
 800f5c0:	681b      	ldr	r3, [r3, #0]
 800f5c2:	602a      	str	r2, [r5, #0]
 800f5c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f5c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f5cc:	2301      	movs	r3, #1
 800f5ce:	e0a3      	b.n	800f718 <_printf_i+0x1f4>
 800f5d0:	6820      	ldr	r0, [r4, #0]
 800f5d2:	6829      	ldr	r1, [r5, #0]
 800f5d4:	0606      	lsls	r6, r0, #24
 800f5d6:	f101 0304 	add.w	r3, r1, #4
 800f5da:	d50a      	bpl.n	800f5f2 <_printf_i+0xce>
 800f5dc:	680e      	ldr	r6, [r1, #0]
 800f5de:	602b      	str	r3, [r5, #0]
 800f5e0:	2e00      	cmp	r6, #0
 800f5e2:	da03      	bge.n	800f5ec <_printf_i+0xc8>
 800f5e4:	232d      	movs	r3, #45	; 0x2d
 800f5e6:	4276      	negs	r6, r6
 800f5e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f5ec:	485e      	ldr	r0, [pc, #376]	; (800f768 <_printf_i+0x244>)
 800f5ee:	230a      	movs	r3, #10
 800f5f0:	e019      	b.n	800f626 <_printf_i+0x102>
 800f5f2:	680e      	ldr	r6, [r1, #0]
 800f5f4:	602b      	str	r3, [r5, #0]
 800f5f6:	f010 0f40 	tst.w	r0, #64	; 0x40
 800f5fa:	bf18      	it	ne
 800f5fc:	b236      	sxthne	r6, r6
 800f5fe:	e7ef      	b.n	800f5e0 <_printf_i+0xbc>
 800f600:	682b      	ldr	r3, [r5, #0]
 800f602:	6820      	ldr	r0, [r4, #0]
 800f604:	1d19      	adds	r1, r3, #4
 800f606:	6029      	str	r1, [r5, #0]
 800f608:	0601      	lsls	r1, r0, #24
 800f60a:	d501      	bpl.n	800f610 <_printf_i+0xec>
 800f60c:	681e      	ldr	r6, [r3, #0]
 800f60e:	e002      	b.n	800f616 <_printf_i+0xf2>
 800f610:	0646      	lsls	r6, r0, #25
 800f612:	d5fb      	bpl.n	800f60c <_printf_i+0xe8>
 800f614:	881e      	ldrh	r6, [r3, #0]
 800f616:	4854      	ldr	r0, [pc, #336]	; (800f768 <_printf_i+0x244>)
 800f618:	2f6f      	cmp	r7, #111	; 0x6f
 800f61a:	bf0c      	ite	eq
 800f61c:	2308      	moveq	r3, #8
 800f61e:	230a      	movne	r3, #10
 800f620:	2100      	movs	r1, #0
 800f622:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f626:	6865      	ldr	r5, [r4, #4]
 800f628:	60a5      	str	r5, [r4, #8]
 800f62a:	2d00      	cmp	r5, #0
 800f62c:	bfa2      	ittt	ge
 800f62e:	6821      	ldrge	r1, [r4, #0]
 800f630:	f021 0104 	bicge.w	r1, r1, #4
 800f634:	6021      	strge	r1, [r4, #0]
 800f636:	b90e      	cbnz	r6, 800f63c <_printf_i+0x118>
 800f638:	2d00      	cmp	r5, #0
 800f63a:	d04d      	beq.n	800f6d8 <_printf_i+0x1b4>
 800f63c:	4615      	mov	r5, r2
 800f63e:	fbb6 f1f3 	udiv	r1, r6, r3
 800f642:	fb03 6711 	mls	r7, r3, r1, r6
 800f646:	5dc7      	ldrb	r7, [r0, r7]
 800f648:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f64c:	4637      	mov	r7, r6
 800f64e:	42bb      	cmp	r3, r7
 800f650:	460e      	mov	r6, r1
 800f652:	d9f4      	bls.n	800f63e <_printf_i+0x11a>
 800f654:	2b08      	cmp	r3, #8
 800f656:	d10b      	bne.n	800f670 <_printf_i+0x14c>
 800f658:	6823      	ldr	r3, [r4, #0]
 800f65a:	07de      	lsls	r6, r3, #31
 800f65c:	d508      	bpl.n	800f670 <_printf_i+0x14c>
 800f65e:	6923      	ldr	r3, [r4, #16]
 800f660:	6861      	ldr	r1, [r4, #4]
 800f662:	4299      	cmp	r1, r3
 800f664:	bfde      	ittt	le
 800f666:	2330      	movle	r3, #48	; 0x30
 800f668:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f66c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f670:	1b52      	subs	r2, r2, r5
 800f672:	6122      	str	r2, [r4, #16]
 800f674:	f8cd a000 	str.w	sl, [sp]
 800f678:	464b      	mov	r3, r9
 800f67a:	aa03      	add	r2, sp, #12
 800f67c:	4621      	mov	r1, r4
 800f67e:	4640      	mov	r0, r8
 800f680:	f7ff fee2 	bl	800f448 <_printf_common>
 800f684:	3001      	adds	r0, #1
 800f686:	d14c      	bne.n	800f722 <_printf_i+0x1fe>
 800f688:	f04f 30ff 	mov.w	r0, #4294967295
 800f68c:	b004      	add	sp, #16
 800f68e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f692:	4835      	ldr	r0, [pc, #212]	; (800f768 <_printf_i+0x244>)
 800f694:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800f698:	6829      	ldr	r1, [r5, #0]
 800f69a:	6823      	ldr	r3, [r4, #0]
 800f69c:	f851 6b04 	ldr.w	r6, [r1], #4
 800f6a0:	6029      	str	r1, [r5, #0]
 800f6a2:	061d      	lsls	r5, r3, #24
 800f6a4:	d514      	bpl.n	800f6d0 <_printf_i+0x1ac>
 800f6a6:	07df      	lsls	r7, r3, #31
 800f6a8:	bf44      	itt	mi
 800f6aa:	f043 0320 	orrmi.w	r3, r3, #32
 800f6ae:	6023      	strmi	r3, [r4, #0]
 800f6b0:	b91e      	cbnz	r6, 800f6ba <_printf_i+0x196>
 800f6b2:	6823      	ldr	r3, [r4, #0]
 800f6b4:	f023 0320 	bic.w	r3, r3, #32
 800f6b8:	6023      	str	r3, [r4, #0]
 800f6ba:	2310      	movs	r3, #16
 800f6bc:	e7b0      	b.n	800f620 <_printf_i+0xfc>
 800f6be:	6823      	ldr	r3, [r4, #0]
 800f6c0:	f043 0320 	orr.w	r3, r3, #32
 800f6c4:	6023      	str	r3, [r4, #0]
 800f6c6:	2378      	movs	r3, #120	; 0x78
 800f6c8:	4828      	ldr	r0, [pc, #160]	; (800f76c <_printf_i+0x248>)
 800f6ca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f6ce:	e7e3      	b.n	800f698 <_printf_i+0x174>
 800f6d0:	0659      	lsls	r1, r3, #25
 800f6d2:	bf48      	it	mi
 800f6d4:	b2b6      	uxthmi	r6, r6
 800f6d6:	e7e6      	b.n	800f6a6 <_printf_i+0x182>
 800f6d8:	4615      	mov	r5, r2
 800f6da:	e7bb      	b.n	800f654 <_printf_i+0x130>
 800f6dc:	682b      	ldr	r3, [r5, #0]
 800f6de:	6826      	ldr	r6, [r4, #0]
 800f6e0:	6961      	ldr	r1, [r4, #20]
 800f6e2:	1d18      	adds	r0, r3, #4
 800f6e4:	6028      	str	r0, [r5, #0]
 800f6e6:	0635      	lsls	r5, r6, #24
 800f6e8:	681b      	ldr	r3, [r3, #0]
 800f6ea:	d501      	bpl.n	800f6f0 <_printf_i+0x1cc>
 800f6ec:	6019      	str	r1, [r3, #0]
 800f6ee:	e002      	b.n	800f6f6 <_printf_i+0x1d2>
 800f6f0:	0670      	lsls	r0, r6, #25
 800f6f2:	d5fb      	bpl.n	800f6ec <_printf_i+0x1c8>
 800f6f4:	8019      	strh	r1, [r3, #0]
 800f6f6:	2300      	movs	r3, #0
 800f6f8:	6123      	str	r3, [r4, #16]
 800f6fa:	4615      	mov	r5, r2
 800f6fc:	e7ba      	b.n	800f674 <_printf_i+0x150>
 800f6fe:	682b      	ldr	r3, [r5, #0]
 800f700:	1d1a      	adds	r2, r3, #4
 800f702:	602a      	str	r2, [r5, #0]
 800f704:	681d      	ldr	r5, [r3, #0]
 800f706:	6862      	ldr	r2, [r4, #4]
 800f708:	2100      	movs	r1, #0
 800f70a:	4628      	mov	r0, r5
 800f70c:	f7f0 fd68 	bl	80001e0 <memchr>
 800f710:	b108      	cbz	r0, 800f716 <_printf_i+0x1f2>
 800f712:	1b40      	subs	r0, r0, r5
 800f714:	6060      	str	r0, [r4, #4]
 800f716:	6863      	ldr	r3, [r4, #4]
 800f718:	6123      	str	r3, [r4, #16]
 800f71a:	2300      	movs	r3, #0
 800f71c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f720:	e7a8      	b.n	800f674 <_printf_i+0x150>
 800f722:	6923      	ldr	r3, [r4, #16]
 800f724:	462a      	mov	r2, r5
 800f726:	4649      	mov	r1, r9
 800f728:	4640      	mov	r0, r8
 800f72a:	47d0      	blx	sl
 800f72c:	3001      	adds	r0, #1
 800f72e:	d0ab      	beq.n	800f688 <_printf_i+0x164>
 800f730:	6823      	ldr	r3, [r4, #0]
 800f732:	079b      	lsls	r3, r3, #30
 800f734:	d413      	bmi.n	800f75e <_printf_i+0x23a>
 800f736:	68e0      	ldr	r0, [r4, #12]
 800f738:	9b03      	ldr	r3, [sp, #12]
 800f73a:	4298      	cmp	r0, r3
 800f73c:	bfb8      	it	lt
 800f73e:	4618      	movlt	r0, r3
 800f740:	e7a4      	b.n	800f68c <_printf_i+0x168>
 800f742:	2301      	movs	r3, #1
 800f744:	4632      	mov	r2, r6
 800f746:	4649      	mov	r1, r9
 800f748:	4640      	mov	r0, r8
 800f74a:	47d0      	blx	sl
 800f74c:	3001      	adds	r0, #1
 800f74e:	d09b      	beq.n	800f688 <_printf_i+0x164>
 800f750:	3501      	adds	r5, #1
 800f752:	68e3      	ldr	r3, [r4, #12]
 800f754:	9903      	ldr	r1, [sp, #12]
 800f756:	1a5b      	subs	r3, r3, r1
 800f758:	42ab      	cmp	r3, r5
 800f75a:	dcf2      	bgt.n	800f742 <_printf_i+0x21e>
 800f75c:	e7eb      	b.n	800f736 <_printf_i+0x212>
 800f75e:	2500      	movs	r5, #0
 800f760:	f104 0619 	add.w	r6, r4, #25
 800f764:	e7f5      	b.n	800f752 <_printf_i+0x22e>
 800f766:	bf00      	nop
 800f768:	080143fe 	.word	0x080143fe
 800f76c:	0801440f 	.word	0x0801440f

0800f770 <siprintf>:
 800f770:	b40e      	push	{r1, r2, r3}
 800f772:	b500      	push	{lr}
 800f774:	b09c      	sub	sp, #112	; 0x70
 800f776:	ab1d      	add	r3, sp, #116	; 0x74
 800f778:	9002      	str	r0, [sp, #8]
 800f77a:	9006      	str	r0, [sp, #24]
 800f77c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f780:	4809      	ldr	r0, [pc, #36]	; (800f7a8 <siprintf+0x38>)
 800f782:	9107      	str	r1, [sp, #28]
 800f784:	9104      	str	r1, [sp, #16]
 800f786:	4909      	ldr	r1, [pc, #36]	; (800f7ac <siprintf+0x3c>)
 800f788:	f853 2b04 	ldr.w	r2, [r3], #4
 800f78c:	9105      	str	r1, [sp, #20]
 800f78e:	6800      	ldr	r0, [r0, #0]
 800f790:	9301      	str	r3, [sp, #4]
 800f792:	a902      	add	r1, sp, #8
 800f794:	f001 fb68 	bl	8010e68 <_svfiprintf_r>
 800f798:	9b02      	ldr	r3, [sp, #8]
 800f79a:	2200      	movs	r2, #0
 800f79c:	701a      	strb	r2, [r3, #0]
 800f79e:	b01c      	add	sp, #112	; 0x70
 800f7a0:	f85d eb04 	ldr.w	lr, [sp], #4
 800f7a4:	b003      	add	sp, #12
 800f7a6:	4770      	bx	lr
 800f7a8:	2000001c 	.word	0x2000001c
 800f7ac:	ffff0208 	.word	0xffff0208

0800f7b0 <quorem>:
 800f7b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f7b4:	6903      	ldr	r3, [r0, #16]
 800f7b6:	690c      	ldr	r4, [r1, #16]
 800f7b8:	42a3      	cmp	r3, r4
 800f7ba:	4607      	mov	r7, r0
 800f7bc:	f2c0 8081 	blt.w	800f8c2 <quorem+0x112>
 800f7c0:	3c01      	subs	r4, #1
 800f7c2:	f101 0814 	add.w	r8, r1, #20
 800f7c6:	f100 0514 	add.w	r5, r0, #20
 800f7ca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f7ce:	9301      	str	r3, [sp, #4]
 800f7d0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800f7d4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f7d8:	3301      	adds	r3, #1
 800f7da:	429a      	cmp	r2, r3
 800f7dc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800f7e0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800f7e4:	fbb2 f6f3 	udiv	r6, r2, r3
 800f7e8:	d331      	bcc.n	800f84e <quorem+0x9e>
 800f7ea:	f04f 0e00 	mov.w	lr, #0
 800f7ee:	4640      	mov	r0, r8
 800f7f0:	46ac      	mov	ip, r5
 800f7f2:	46f2      	mov	sl, lr
 800f7f4:	f850 2b04 	ldr.w	r2, [r0], #4
 800f7f8:	b293      	uxth	r3, r2
 800f7fa:	fb06 e303 	mla	r3, r6, r3, lr
 800f7fe:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800f802:	b29b      	uxth	r3, r3
 800f804:	ebaa 0303 	sub.w	r3, sl, r3
 800f808:	f8dc a000 	ldr.w	sl, [ip]
 800f80c:	0c12      	lsrs	r2, r2, #16
 800f80e:	fa13 f38a 	uxtah	r3, r3, sl
 800f812:	fb06 e202 	mla	r2, r6, r2, lr
 800f816:	9300      	str	r3, [sp, #0]
 800f818:	9b00      	ldr	r3, [sp, #0]
 800f81a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800f81e:	b292      	uxth	r2, r2
 800f820:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800f824:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f828:	f8bd 3000 	ldrh.w	r3, [sp]
 800f82c:	4581      	cmp	r9, r0
 800f82e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f832:	f84c 3b04 	str.w	r3, [ip], #4
 800f836:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800f83a:	d2db      	bcs.n	800f7f4 <quorem+0x44>
 800f83c:	f855 300b 	ldr.w	r3, [r5, fp]
 800f840:	b92b      	cbnz	r3, 800f84e <quorem+0x9e>
 800f842:	9b01      	ldr	r3, [sp, #4]
 800f844:	3b04      	subs	r3, #4
 800f846:	429d      	cmp	r5, r3
 800f848:	461a      	mov	r2, r3
 800f84a:	d32e      	bcc.n	800f8aa <quorem+0xfa>
 800f84c:	613c      	str	r4, [r7, #16]
 800f84e:	4638      	mov	r0, r7
 800f850:	f001 f8b6 	bl	80109c0 <__mcmp>
 800f854:	2800      	cmp	r0, #0
 800f856:	db24      	blt.n	800f8a2 <quorem+0xf2>
 800f858:	3601      	adds	r6, #1
 800f85a:	4628      	mov	r0, r5
 800f85c:	f04f 0c00 	mov.w	ip, #0
 800f860:	f858 2b04 	ldr.w	r2, [r8], #4
 800f864:	f8d0 e000 	ldr.w	lr, [r0]
 800f868:	b293      	uxth	r3, r2
 800f86a:	ebac 0303 	sub.w	r3, ip, r3
 800f86e:	0c12      	lsrs	r2, r2, #16
 800f870:	fa13 f38e 	uxtah	r3, r3, lr
 800f874:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800f878:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f87c:	b29b      	uxth	r3, r3
 800f87e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f882:	45c1      	cmp	r9, r8
 800f884:	f840 3b04 	str.w	r3, [r0], #4
 800f888:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800f88c:	d2e8      	bcs.n	800f860 <quorem+0xb0>
 800f88e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f892:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f896:	b922      	cbnz	r2, 800f8a2 <quorem+0xf2>
 800f898:	3b04      	subs	r3, #4
 800f89a:	429d      	cmp	r5, r3
 800f89c:	461a      	mov	r2, r3
 800f89e:	d30a      	bcc.n	800f8b6 <quorem+0x106>
 800f8a0:	613c      	str	r4, [r7, #16]
 800f8a2:	4630      	mov	r0, r6
 800f8a4:	b003      	add	sp, #12
 800f8a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f8aa:	6812      	ldr	r2, [r2, #0]
 800f8ac:	3b04      	subs	r3, #4
 800f8ae:	2a00      	cmp	r2, #0
 800f8b0:	d1cc      	bne.n	800f84c <quorem+0x9c>
 800f8b2:	3c01      	subs	r4, #1
 800f8b4:	e7c7      	b.n	800f846 <quorem+0x96>
 800f8b6:	6812      	ldr	r2, [r2, #0]
 800f8b8:	3b04      	subs	r3, #4
 800f8ba:	2a00      	cmp	r2, #0
 800f8bc:	d1f0      	bne.n	800f8a0 <quorem+0xf0>
 800f8be:	3c01      	subs	r4, #1
 800f8c0:	e7eb      	b.n	800f89a <quorem+0xea>
 800f8c2:	2000      	movs	r0, #0
 800f8c4:	e7ee      	b.n	800f8a4 <quorem+0xf4>
	...

0800f8c8 <_dtoa_r>:
 800f8c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f8cc:	ed2d 8b04 	vpush	{d8-d9}
 800f8d0:	ec57 6b10 	vmov	r6, r7, d0
 800f8d4:	b093      	sub	sp, #76	; 0x4c
 800f8d6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800f8d8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800f8dc:	9106      	str	r1, [sp, #24]
 800f8de:	ee10 aa10 	vmov	sl, s0
 800f8e2:	4604      	mov	r4, r0
 800f8e4:	9209      	str	r2, [sp, #36]	; 0x24
 800f8e6:	930c      	str	r3, [sp, #48]	; 0x30
 800f8e8:	46bb      	mov	fp, r7
 800f8ea:	b975      	cbnz	r5, 800f90a <_dtoa_r+0x42>
 800f8ec:	2010      	movs	r0, #16
 800f8ee:	f000 fddd 	bl	80104ac <malloc>
 800f8f2:	4602      	mov	r2, r0
 800f8f4:	6260      	str	r0, [r4, #36]	; 0x24
 800f8f6:	b920      	cbnz	r0, 800f902 <_dtoa_r+0x3a>
 800f8f8:	4ba7      	ldr	r3, [pc, #668]	; (800fb98 <_dtoa_r+0x2d0>)
 800f8fa:	21ea      	movs	r1, #234	; 0xea
 800f8fc:	48a7      	ldr	r0, [pc, #668]	; (800fb9c <_dtoa_r+0x2d4>)
 800f8fe:	f001 fbc3 	bl	8011088 <__assert_func>
 800f902:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800f906:	6005      	str	r5, [r0, #0]
 800f908:	60c5      	str	r5, [r0, #12]
 800f90a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f90c:	6819      	ldr	r1, [r3, #0]
 800f90e:	b151      	cbz	r1, 800f926 <_dtoa_r+0x5e>
 800f910:	685a      	ldr	r2, [r3, #4]
 800f912:	604a      	str	r2, [r1, #4]
 800f914:	2301      	movs	r3, #1
 800f916:	4093      	lsls	r3, r2
 800f918:	608b      	str	r3, [r1, #8]
 800f91a:	4620      	mov	r0, r4
 800f91c:	f000 fe0e 	bl	801053c <_Bfree>
 800f920:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f922:	2200      	movs	r2, #0
 800f924:	601a      	str	r2, [r3, #0]
 800f926:	1e3b      	subs	r3, r7, #0
 800f928:	bfaa      	itet	ge
 800f92a:	2300      	movge	r3, #0
 800f92c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800f930:	f8c8 3000 	strge.w	r3, [r8]
 800f934:	4b9a      	ldr	r3, [pc, #616]	; (800fba0 <_dtoa_r+0x2d8>)
 800f936:	bfbc      	itt	lt
 800f938:	2201      	movlt	r2, #1
 800f93a:	f8c8 2000 	strlt.w	r2, [r8]
 800f93e:	ea33 030b 	bics.w	r3, r3, fp
 800f942:	d11b      	bne.n	800f97c <_dtoa_r+0xb4>
 800f944:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f946:	f242 730f 	movw	r3, #9999	; 0x270f
 800f94a:	6013      	str	r3, [r2, #0]
 800f94c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f950:	4333      	orrs	r3, r6
 800f952:	f000 8592 	beq.w	801047a <_dtoa_r+0xbb2>
 800f956:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f958:	b963      	cbnz	r3, 800f974 <_dtoa_r+0xac>
 800f95a:	4b92      	ldr	r3, [pc, #584]	; (800fba4 <_dtoa_r+0x2dc>)
 800f95c:	e022      	b.n	800f9a4 <_dtoa_r+0xdc>
 800f95e:	4b92      	ldr	r3, [pc, #584]	; (800fba8 <_dtoa_r+0x2e0>)
 800f960:	9301      	str	r3, [sp, #4]
 800f962:	3308      	adds	r3, #8
 800f964:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800f966:	6013      	str	r3, [r2, #0]
 800f968:	9801      	ldr	r0, [sp, #4]
 800f96a:	b013      	add	sp, #76	; 0x4c
 800f96c:	ecbd 8b04 	vpop	{d8-d9}
 800f970:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f974:	4b8b      	ldr	r3, [pc, #556]	; (800fba4 <_dtoa_r+0x2dc>)
 800f976:	9301      	str	r3, [sp, #4]
 800f978:	3303      	adds	r3, #3
 800f97a:	e7f3      	b.n	800f964 <_dtoa_r+0x9c>
 800f97c:	2200      	movs	r2, #0
 800f97e:	2300      	movs	r3, #0
 800f980:	4650      	mov	r0, sl
 800f982:	4659      	mov	r1, fp
 800f984:	f7f1 f8a0 	bl	8000ac8 <__aeabi_dcmpeq>
 800f988:	ec4b ab19 	vmov	d9, sl, fp
 800f98c:	4680      	mov	r8, r0
 800f98e:	b158      	cbz	r0, 800f9a8 <_dtoa_r+0xe0>
 800f990:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f992:	2301      	movs	r3, #1
 800f994:	6013      	str	r3, [r2, #0]
 800f996:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f998:	2b00      	cmp	r3, #0
 800f99a:	f000 856b 	beq.w	8010474 <_dtoa_r+0xbac>
 800f99e:	4883      	ldr	r0, [pc, #524]	; (800fbac <_dtoa_r+0x2e4>)
 800f9a0:	6018      	str	r0, [r3, #0]
 800f9a2:	1e43      	subs	r3, r0, #1
 800f9a4:	9301      	str	r3, [sp, #4]
 800f9a6:	e7df      	b.n	800f968 <_dtoa_r+0xa0>
 800f9a8:	ec4b ab10 	vmov	d0, sl, fp
 800f9ac:	aa10      	add	r2, sp, #64	; 0x40
 800f9ae:	a911      	add	r1, sp, #68	; 0x44
 800f9b0:	4620      	mov	r0, r4
 800f9b2:	f001 f8ab 	bl	8010b0c <__d2b>
 800f9b6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800f9ba:	ee08 0a10 	vmov	s16, r0
 800f9be:	2d00      	cmp	r5, #0
 800f9c0:	f000 8084 	beq.w	800facc <_dtoa_r+0x204>
 800f9c4:	ee19 3a90 	vmov	r3, s19
 800f9c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f9cc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800f9d0:	4656      	mov	r6, sl
 800f9d2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800f9d6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800f9da:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800f9de:	4b74      	ldr	r3, [pc, #464]	; (800fbb0 <_dtoa_r+0x2e8>)
 800f9e0:	2200      	movs	r2, #0
 800f9e2:	4630      	mov	r0, r6
 800f9e4:	4639      	mov	r1, r7
 800f9e6:	f7f0 fc4f 	bl	8000288 <__aeabi_dsub>
 800f9ea:	a365      	add	r3, pc, #404	; (adr r3, 800fb80 <_dtoa_r+0x2b8>)
 800f9ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9f0:	f7f0 fe02 	bl	80005f8 <__aeabi_dmul>
 800f9f4:	a364      	add	r3, pc, #400	; (adr r3, 800fb88 <_dtoa_r+0x2c0>)
 800f9f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9fa:	f7f0 fc47 	bl	800028c <__adddf3>
 800f9fe:	4606      	mov	r6, r0
 800fa00:	4628      	mov	r0, r5
 800fa02:	460f      	mov	r7, r1
 800fa04:	f7f0 fd8e 	bl	8000524 <__aeabi_i2d>
 800fa08:	a361      	add	r3, pc, #388	; (adr r3, 800fb90 <_dtoa_r+0x2c8>)
 800fa0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa0e:	f7f0 fdf3 	bl	80005f8 <__aeabi_dmul>
 800fa12:	4602      	mov	r2, r0
 800fa14:	460b      	mov	r3, r1
 800fa16:	4630      	mov	r0, r6
 800fa18:	4639      	mov	r1, r7
 800fa1a:	f7f0 fc37 	bl	800028c <__adddf3>
 800fa1e:	4606      	mov	r6, r0
 800fa20:	460f      	mov	r7, r1
 800fa22:	f7f1 f899 	bl	8000b58 <__aeabi_d2iz>
 800fa26:	2200      	movs	r2, #0
 800fa28:	9000      	str	r0, [sp, #0]
 800fa2a:	2300      	movs	r3, #0
 800fa2c:	4630      	mov	r0, r6
 800fa2e:	4639      	mov	r1, r7
 800fa30:	f7f1 f854 	bl	8000adc <__aeabi_dcmplt>
 800fa34:	b150      	cbz	r0, 800fa4c <_dtoa_r+0x184>
 800fa36:	9800      	ldr	r0, [sp, #0]
 800fa38:	f7f0 fd74 	bl	8000524 <__aeabi_i2d>
 800fa3c:	4632      	mov	r2, r6
 800fa3e:	463b      	mov	r3, r7
 800fa40:	f7f1 f842 	bl	8000ac8 <__aeabi_dcmpeq>
 800fa44:	b910      	cbnz	r0, 800fa4c <_dtoa_r+0x184>
 800fa46:	9b00      	ldr	r3, [sp, #0]
 800fa48:	3b01      	subs	r3, #1
 800fa4a:	9300      	str	r3, [sp, #0]
 800fa4c:	9b00      	ldr	r3, [sp, #0]
 800fa4e:	2b16      	cmp	r3, #22
 800fa50:	d85a      	bhi.n	800fb08 <_dtoa_r+0x240>
 800fa52:	9a00      	ldr	r2, [sp, #0]
 800fa54:	4b57      	ldr	r3, [pc, #348]	; (800fbb4 <_dtoa_r+0x2ec>)
 800fa56:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fa5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa5e:	ec51 0b19 	vmov	r0, r1, d9
 800fa62:	f7f1 f83b 	bl	8000adc <__aeabi_dcmplt>
 800fa66:	2800      	cmp	r0, #0
 800fa68:	d050      	beq.n	800fb0c <_dtoa_r+0x244>
 800fa6a:	9b00      	ldr	r3, [sp, #0]
 800fa6c:	3b01      	subs	r3, #1
 800fa6e:	9300      	str	r3, [sp, #0]
 800fa70:	2300      	movs	r3, #0
 800fa72:	930b      	str	r3, [sp, #44]	; 0x2c
 800fa74:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800fa76:	1b5d      	subs	r5, r3, r5
 800fa78:	1e6b      	subs	r3, r5, #1
 800fa7a:	9305      	str	r3, [sp, #20]
 800fa7c:	bf45      	ittet	mi
 800fa7e:	f1c5 0301 	rsbmi	r3, r5, #1
 800fa82:	9304      	strmi	r3, [sp, #16]
 800fa84:	2300      	movpl	r3, #0
 800fa86:	2300      	movmi	r3, #0
 800fa88:	bf4c      	ite	mi
 800fa8a:	9305      	strmi	r3, [sp, #20]
 800fa8c:	9304      	strpl	r3, [sp, #16]
 800fa8e:	9b00      	ldr	r3, [sp, #0]
 800fa90:	2b00      	cmp	r3, #0
 800fa92:	db3d      	blt.n	800fb10 <_dtoa_r+0x248>
 800fa94:	9b05      	ldr	r3, [sp, #20]
 800fa96:	9a00      	ldr	r2, [sp, #0]
 800fa98:	920a      	str	r2, [sp, #40]	; 0x28
 800fa9a:	4413      	add	r3, r2
 800fa9c:	9305      	str	r3, [sp, #20]
 800fa9e:	2300      	movs	r3, #0
 800faa0:	9307      	str	r3, [sp, #28]
 800faa2:	9b06      	ldr	r3, [sp, #24]
 800faa4:	2b09      	cmp	r3, #9
 800faa6:	f200 8089 	bhi.w	800fbbc <_dtoa_r+0x2f4>
 800faaa:	2b05      	cmp	r3, #5
 800faac:	bfc4      	itt	gt
 800faae:	3b04      	subgt	r3, #4
 800fab0:	9306      	strgt	r3, [sp, #24]
 800fab2:	9b06      	ldr	r3, [sp, #24]
 800fab4:	f1a3 0302 	sub.w	r3, r3, #2
 800fab8:	bfcc      	ite	gt
 800faba:	2500      	movgt	r5, #0
 800fabc:	2501      	movle	r5, #1
 800fabe:	2b03      	cmp	r3, #3
 800fac0:	f200 8087 	bhi.w	800fbd2 <_dtoa_r+0x30a>
 800fac4:	e8df f003 	tbb	[pc, r3]
 800fac8:	59383a2d 	.word	0x59383a2d
 800facc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800fad0:	441d      	add	r5, r3
 800fad2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800fad6:	2b20      	cmp	r3, #32
 800fad8:	bfc1      	itttt	gt
 800fada:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800fade:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800fae2:	fa0b f303 	lslgt.w	r3, fp, r3
 800fae6:	fa26 f000 	lsrgt.w	r0, r6, r0
 800faea:	bfda      	itte	le
 800faec:	f1c3 0320 	rsble	r3, r3, #32
 800faf0:	fa06 f003 	lslle.w	r0, r6, r3
 800faf4:	4318      	orrgt	r0, r3
 800faf6:	f7f0 fd05 	bl	8000504 <__aeabi_ui2d>
 800fafa:	2301      	movs	r3, #1
 800fafc:	4606      	mov	r6, r0
 800fafe:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800fb02:	3d01      	subs	r5, #1
 800fb04:	930e      	str	r3, [sp, #56]	; 0x38
 800fb06:	e76a      	b.n	800f9de <_dtoa_r+0x116>
 800fb08:	2301      	movs	r3, #1
 800fb0a:	e7b2      	b.n	800fa72 <_dtoa_r+0x1aa>
 800fb0c:	900b      	str	r0, [sp, #44]	; 0x2c
 800fb0e:	e7b1      	b.n	800fa74 <_dtoa_r+0x1ac>
 800fb10:	9b04      	ldr	r3, [sp, #16]
 800fb12:	9a00      	ldr	r2, [sp, #0]
 800fb14:	1a9b      	subs	r3, r3, r2
 800fb16:	9304      	str	r3, [sp, #16]
 800fb18:	4253      	negs	r3, r2
 800fb1a:	9307      	str	r3, [sp, #28]
 800fb1c:	2300      	movs	r3, #0
 800fb1e:	930a      	str	r3, [sp, #40]	; 0x28
 800fb20:	e7bf      	b.n	800faa2 <_dtoa_r+0x1da>
 800fb22:	2300      	movs	r3, #0
 800fb24:	9308      	str	r3, [sp, #32]
 800fb26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fb28:	2b00      	cmp	r3, #0
 800fb2a:	dc55      	bgt.n	800fbd8 <_dtoa_r+0x310>
 800fb2c:	2301      	movs	r3, #1
 800fb2e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800fb32:	461a      	mov	r2, r3
 800fb34:	9209      	str	r2, [sp, #36]	; 0x24
 800fb36:	e00c      	b.n	800fb52 <_dtoa_r+0x28a>
 800fb38:	2301      	movs	r3, #1
 800fb3a:	e7f3      	b.n	800fb24 <_dtoa_r+0x25c>
 800fb3c:	2300      	movs	r3, #0
 800fb3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fb40:	9308      	str	r3, [sp, #32]
 800fb42:	9b00      	ldr	r3, [sp, #0]
 800fb44:	4413      	add	r3, r2
 800fb46:	9302      	str	r3, [sp, #8]
 800fb48:	3301      	adds	r3, #1
 800fb4a:	2b01      	cmp	r3, #1
 800fb4c:	9303      	str	r3, [sp, #12]
 800fb4e:	bfb8      	it	lt
 800fb50:	2301      	movlt	r3, #1
 800fb52:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800fb54:	2200      	movs	r2, #0
 800fb56:	6042      	str	r2, [r0, #4]
 800fb58:	2204      	movs	r2, #4
 800fb5a:	f102 0614 	add.w	r6, r2, #20
 800fb5e:	429e      	cmp	r6, r3
 800fb60:	6841      	ldr	r1, [r0, #4]
 800fb62:	d93d      	bls.n	800fbe0 <_dtoa_r+0x318>
 800fb64:	4620      	mov	r0, r4
 800fb66:	f000 fca9 	bl	80104bc <_Balloc>
 800fb6a:	9001      	str	r0, [sp, #4]
 800fb6c:	2800      	cmp	r0, #0
 800fb6e:	d13b      	bne.n	800fbe8 <_dtoa_r+0x320>
 800fb70:	4b11      	ldr	r3, [pc, #68]	; (800fbb8 <_dtoa_r+0x2f0>)
 800fb72:	4602      	mov	r2, r0
 800fb74:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800fb78:	e6c0      	b.n	800f8fc <_dtoa_r+0x34>
 800fb7a:	2301      	movs	r3, #1
 800fb7c:	e7df      	b.n	800fb3e <_dtoa_r+0x276>
 800fb7e:	bf00      	nop
 800fb80:	636f4361 	.word	0x636f4361
 800fb84:	3fd287a7 	.word	0x3fd287a7
 800fb88:	8b60c8b3 	.word	0x8b60c8b3
 800fb8c:	3fc68a28 	.word	0x3fc68a28
 800fb90:	509f79fb 	.word	0x509f79fb
 800fb94:	3fd34413 	.word	0x3fd34413
 800fb98:	0801442d 	.word	0x0801442d
 800fb9c:	08014444 	.word	0x08014444
 800fba0:	7ff00000 	.word	0x7ff00000
 800fba4:	08014429 	.word	0x08014429
 800fba8:	08014420 	.word	0x08014420
 800fbac:	080143fd 	.word	0x080143fd
 800fbb0:	3ff80000 	.word	0x3ff80000
 800fbb4:	08014538 	.word	0x08014538
 800fbb8:	0801449f 	.word	0x0801449f
 800fbbc:	2501      	movs	r5, #1
 800fbbe:	2300      	movs	r3, #0
 800fbc0:	9306      	str	r3, [sp, #24]
 800fbc2:	9508      	str	r5, [sp, #32]
 800fbc4:	f04f 33ff 	mov.w	r3, #4294967295
 800fbc8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800fbcc:	2200      	movs	r2, #0
 800fbce:	2312      	movs	r3, #18
 800fbd0:	e7b0      	b.n	800fb34 <_dtoa_r+0x26c>
 800fbd2:	2301      	movs	r3, #1
 800fbd4:	9308      	str	r3, [sp, #32]
 800fbd6:	e7f5      	b.n	800fbc4 <_dtoa_r+0x2fc>
 800fbd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fbda:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800fbde:	e7b8      	b.n	800fb52 <_dtoa_r+0x28a>
 800fbe0:	3101      	adds	r1, #1
 800fbe2:	6041      	str	r1, [r0, #4]
 800fbe4:	0052      	lsls	r2, r2, #1
 800fbe6:	e7b8      	b.n	800fb5a <_dtoa_r+0x292>
 800fbe8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fbea:	9a01      	ldr	r2, [sp, #4]
 800fbec:	601a      	str	r2, [r3, #0]
 800fbee:	9b03      	ldr	r3, [sp, #12]
 800fbf0:	2b0e      	cmp	r3, #14
 800fbf2:	f200 809d 	bhi.w	800fd30 <_dtoa_r+0x468>
 800fbf6:	2d00      	cmp	r5, #0
 800fbf8:	f000 809a 	beq.w	800fd30 <_dtoa_r+0x468>
 800fbfc:	9b00      	ldr	r3, [sp, #0]
 800fbfe:	2b00      	cmp	r3, #0
 800fc00:	dd32      	ble.n	800fc68 <_dtoa_r+0x3a0>
 800fc02:	4ab7      	ldr	r2, [pc, #732]	; (800fee0 <_dtoa_r+0x618>)
 800fc04:	f003 030f 	and.w	r3, r3, #15
 800fc08:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800fc0c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800fc10:	9b00      	ldr	r3, [sp, #0]
 800fc12:	05d8      	lsls	r0, r3, #23
 800fc14:	ea4f 1723 	mov.w	r7, r3, asr #4
 800fc18:	d516      	bpl.n	800fc48 <_dtoa_r+0x380>
 800fc1a:	4bb2      	ldr	r3, [pc, #712]	; (800fee4 <_dtoa_r+0x61c>)
 800fc1c:	ec51 0b19 	vmov	r0, r1, d9
 800fc20:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800fc24:	f7f0 fe12 	bl	800084c <__aeabi_ddiv>
 800fc28:	f007 070f 	and.w	r7, r7, #15
 800fc2c:	4682      	mov	sl, r0
 800fc2e:	468b      	mov	fp, r1
 800fc30:	2503      	movs	r5, #3
 800fc32:	4eac      	ldr	r6, [pc, #688]	; (800fee4 <_dtoa_r+0x61c>)
 800fc34:	b957      	cbnz	r7, 800fc4c <_dtoa_r+0x384>
 800fc36:	4642      	mov	r2, r8
 800fc38:	464b      	mov	r3, r9
 800fc3a:	4650      	mov	r0, sl
 800fc3c:	4659      	mov	r1, fp
 800fc3e:	f7f0 fe05 	bl	800084c <__aeabi_ddiv>
 800fc42:	4682      	mov	sl, r0
 800fc44:	468b      	mov	fp, r1
 800fc46:	e028      	b.n	800fc9a <_dtoa_r+0x3d2>
 800fc48:	2502      	movs	r5, #2
 800fc4a:	e7f2      	b.n	800fc32 <_dtoa_r+0x36a>
 800fc4c:	07f9      	lsls	r1, r7, #31
 800fc4e:	d508      	bpl.n	800fc62 <_dtoa_r+0x39a>
 800fc50:	4640      	mov	r0, r8
 800fc52:	4649      	mov	r1, r9
 800fc54:	e9d6 2300 	ldrd	r2, r3, [r6]
 800fc58:	f7f0 fcce 	bl	80005f8 <__aeabi_dmul>
 800fc5c:	3501      	adds	r5, #1
 800fc5e:	4680      	mov	r8, r0
 800fc60:	4689      	mov	r9, r1
 800fc62:	107f      	asrs	r7, r7, #1
 800fc64:	3608      	adds	r6, #8
 800fc66:	e7e5      	b.n	800fc34 <_dtoa_r+0x36c>
 800fc68:	f000 809b 	beq.w	800fda2 <_dtoa_r+0x4da>
 800fc6c:	9b00      	ldr	r3, [sp, #0]
 800fc6e:	4f9d      	ldr	r7, [pc, #628]	; (800fee4 <_dtoa_r+0x61c>)
 800fc70:	425e      	negs	r6, r3
 800fc72:	4b9b      	ldr	r3, [pc, #620]	; (800fee0 <_dtoa_r+0x618>)
 800fc74:	f006 020f 	and.w	r2, r6, #15
 800fc78:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fc7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc80:	ec51 0b19 	vmov	r0, r1, d9
 800fc84:	f7f0 fcb8 	bl	80005f8 <__aeabi_dmul>
 800fc88:	1136      	asrs	r6, r6, #4
 800fc8a:	4682      	mov	sl, r0
 800fc8c:	468b      	mov	fp, r1
 800fc8e:	2300      	movs	r3, #0
 800fc90:	2502      	movs	r5, #2
 800fc92:	2e00      	cmp	r6, #0
 800fc94:	d17a      	bne.n	800fd8c <_dtoa_r+0x4c4>
 800fc96:	2b00      	cmp	r3, #0
 800fc98:	d1d3      	bne.n	800fc42 <_dtoa_r+0x37a>
 800fc9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fc9c:	2b00      	cmp	r3, #0
 800fc9e:	f000 8082 	beq.w	800fda6 <_dtoa_r+0x4de>
 800fca2:	4b91      	ldr	r3, [pc, #580]	; (800fee8 <_dtoa_r+0x620>)
 800fca4:	2200      	movs	r2, #0
 800fca6:	4650      	mov	r0, sl
 800fca8:	4659      	mov	r1, fp
 800fcaa:	f7f0 ff17 	bl	8000adc <__aeabi_dcmplt>
 800fcae:	2800      	cmp	r0, #0
 800fcb0:	d079      	beq.n	800fda6 <_dtoa_r+0x4de>
 800fcb2:	9b03      	ldr	r3, [sp, #12]
 800fcb4:	2b00      	cmp	r3, #0
 800fcb6:	d076      	beq.n	800fda6 <_dtoa_r+0x4de>
 800fcb8:	9b02      	ldr	r3, [sp, #8]
 800fcba:	2b00      	cmp	r3, #0
 800fcbc:	dd36      	ble.n	800fd2c <_dtoa_r+0x464>
 800fcbe:	9b00      	ldr	r3, [sp, #0]
 800fcc0:	4650      	mov	r0, sl
 800fcc2:	4659      	mov	r1, fp
 800fcc4:	1e5f      	subs	r7, r3, #1
 800fcc6:	2200      	movs	r2, #0
 800fcc8:	4b88      	ldr	r3, [pc, #544]	; (800feec <_dtoa_r+0x624>)
 800fcca:	f7f0 fc95 	bl	80005f8 <__aeabi_dmul>
 800fcce:	9e02      	ldr	r6, [sp, #8]
 800fcd0:	4682      	mov	sl, r0
 800fcd2:	468b      	mov	fp, r1
 800fcd4:	3501      	adds	r5, #1
 800fcd6:	4628      	mov	r0, r5
 800fcd8:	f7f0 fc24 	bl	8000524 <__aeabi_i2d>
 800fcdc:	4652      	mov	r2, sl
 800fcde:	465b      	mov	r3, fp
 800fce0:	f7f0 fc8a 	bl	80005f8 <__aeabi_dmul>
 800fce4:	4b82      	ldr	r3, [pc, #520]	; (800fef0 <_dtoa_r+0x628>)
 800fce6:	2200      	movs	r2, #0
 800fce8:	f7f0 fad0 	bl	800028c <__adddf3>
 800fcec:	46d0      	mov	r8, sl
 800fcee:	46d9      	mov	r9, fp
 800fcf0:	4682      	mov	sl, r0
 800fcf2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800fcf6:	2e00      	cmp	r6, #0
 800fcf8:	d158      	bne.n	800fdac <_dtoa_r+0x4e4>
 800fcfa:	4b7e      	ldr	r3, [pc, #504]	; (800fef4 <_dtoa_r+0x62c>)
 800fcfc:	2200      	movs	r2, #0
 800fcfe:	4640      	mov	r0, r8
 800fd00:	4649      	mov	r1, r9
 800fd02:	f7f0 fac1 	bl	8000288 <__aeabi_dsub>
 800fd06:	4652      	mov	r2, sl
 800fd08:	465b      	mov	r3, fp
 800fd0a:	4680      	mov	r8, r0
 800fd0c:	4689      	mov	r9, r1
 800fd0e:	f7f0 ff03 	bl	8000b18 <__aeabi_dcmpgt>
 800fd12:	2800      	cmp	r0, #0
 800fd14:	f040 8295 	bne.w	8010242 <_dtoa_r+0x97a>
 800fd18:	4652      	mov	r2, sl
 800fd1a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800fd1e:	4640      	mov	r0, r8
 800fd20:	4649      	mov	r1, r9
 800fd22:	f7f0 fedb 	bl	8000adc <__aeabi_dcmplt>
 800fd26:	2800      	cmp	r0, #0
 800fd28:	f040 8289 	bne.w	801023e <_dtoa_r+0x976>
 800fd2c:	ec5b ab19 	vmov	sl, fp, d9
 800fd30:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800fd32:	2b00      	cmp	r3, #0
 800fd34:	f2c0 8148 	blt.w	800ffc8 <_dtoa_r+0x700>
 800fd38:	9a00      	ldr	r2, [sp, #0]
 800fd3a:	2a0e      	cmp	r2, #14
 800fd3c:	f300 8144 	bgt.w	800ffc8 <_dtoa_r+0x700>
 800fd40:	4b67      	ldr	r3, [pc, #412]	; (800fee0 <_dtoa_r+0x618>)
 800fd42:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fd46:	e9d3 8900 	ldrd	r8, r9, [r3]
 800fd4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fd4c:	2b00      	cmp	r3, #0
 800fd4e:	f280 80d5 	bge.w	800fefc <_dtoa_r+0x634>
 800fd52:	9b03      	ldr	r3, [sp, #12]
 800fd54:	2b00      	cmp	r3, #0
 800fd56:	f300 80d1 	bgt.w	800fefc <_dtoa_r+0x634>
 800fd5a:	f040 826f 	bne.w	801023c <_dtoa_r+0x974>
 800fd5e:	4b65      	ldr	r3, [pc, #404]	; (800fef4 <_dtoa_r+0x62c>)
 800fd60:	2200      	movs	r2, #0
 800fd62:	4640      	mov	r0, r8
 800fd64:	4649      	mov	r1, r9
 800fd66:	f7f0 fc47 	bl	80005f8 <__aeabi_dmul>
 800fd6a:	4652      	mov	r2, sl
 800fd6c:	465b      	mov	r3, fp
 800fd6e:	f7f0 fec9 	bl	8000b04 <__aeabi_dcmpge>
 800fd72:	9e03      	ldr	r6, [sp, #12]
 800fd74:	4637      	mov	r7, r6
 800fd76:	2800      	cmp	r0, #0
 800fd78:	f040 8245 	bne.w	8010206 <_dtoa_r+0x93e>
 800fd7c:	9d01      	ldr	r5, [sp, #4]
 800fd7e:	2331      	movs	r3, #49	; 0x31
 800fd80:	f805 3b01 	strb.w	r3, [r5], #1
 800fd84:	9b00      	ldr	r3, [sp, #0]
 800fd86:	3301      	adds	r3, #1
 800fd88:	9300      	str	r3, [sp, #0]
 800fd8a:	e240      	b.n	801020e <_dtoa_r+0x946>
 800fd8c:	07f2      	lsls	r2, r6, #31
 800fd8e:	d505      	bpl.n	800fd9c <_dtoa_r+0x4d4>
 800fd90:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fd94:	f7f0 fc30 	bl	80005f8 <__aeabi_dmul>
 800fd98:	3501      	adds	r5, #1
 800fd9a:	2301      	movs	r3, #1
 800fd9c:	1076      	asrs	r6, r6, #1
 800fd9e:	3708      	adds	r7, #8
 800fda0:	e777      	b.n	800fc92 <_dtoa_r+0x3ca>
 800fda2:	2502      	movs	r5, #2
 800fda4:	e779      	b.n	800fc9a <_dtoa_r+0x3d2>
 800fda6:	9f00      	ldr	r7, [sp, #0]
 800fda8:	9e03      	ldr	r6, [sp, #12]
 800fdaa:	e794      	b.n	800fcd6 <_dtoa_r+0x40e>
 800fdac:	9901      	ldr	r1, [sp, #4]
 800fdae:	4b4c      	ldr	r3, [pc, #304]	; (800fee0 <_dtoa_r+0x618>)
 800fdb0:	4431      	add	r1, r6
 800fdb2:	910d      	str	r1, [sp, #52]	; 0x34
 800fdb4:	9908      	ldr	r1, [sp, #32]
 800fdb6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800fdba:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800fdbe:	2900      	cmp	r1, #0
 800fdc0:	d043      	beq.n	800fe4a <_dtoa_r+0x582>
 800fdc2:	494d      	ldr	r1, [pc, #308]	; (800fef8 <_dtoa_r+0x630>)
 800fdc4:	2000      	movs	r0, #0
 800fdc6:	f7f0 fd41 	bl	800084c <__aeabi_ddiv>
 800fdca:	4652      	mov	r2, sl
 800fdcc:	465b      	mov	r3, fp
 800fdce:	f7f0 fa5b 	bl	8000288 <__aeabi_dsub>
 800fdd2:	9d01      	ldr	r5, [sp, #4]
 800fdd4:	4682      	mov	sl, r0
 800fdd6:	468b      	mov	fp, r1
 800fdd8:	4649      	mov	r1, r9
 800fdda:	4640      	mov	r0, r8
 800fddc:	f7f0 febc 	bl	8000b58 <__aeabi_d2iz>
 800fde0:	4606      	mov	r6, r0
 800fde2:	f7f0 fb9f 	bl	8000524 <__aeabi_i2d>
 800fde6:	4602      	mov	r2, r0
 800fde8:	460b      	mov	r3, r1
 800fdea:	4640      	mov	r0, r8
 800fdec:	4649      	mov	r1, r9
 800fdee:	f7f0 fa4b 	bl	8000288 <__aeabi_dsub>
 800fdf2:	3630      	adds	r6, #48	; 0x30
 800fdf4:	f805 6b01 	strb.w	r6, [r5], #1
 800fdf8:	4652      	mov	r2, sl
 800fdfa:	465b      	mov	r3, fp
 800fdfc:	4680      	mov	r8, r0
 800fdfe:	4689      	mov	r9, r1
 800fe00:	f7f0 fe6c 	bl	8000adc <__aeabi_dcmplt>
 800fe04:	2800      	cmp	r0, #0
 800fe06:	d163      	bne.n	800fed0 <_dtoa_r+0x608>
 800fe08:	4642      	mov	r2, r8
 800fe0a:	464b      	mov	r3, r9
 800fe0c:	4936      	ldr	r1, [pc, #216]	; (800fee8 <_dtoa_r+0x620>)
 800fe0e:	2000      	movs	r0, #0
 800fe10:	f7f0 fa3a 	bl	8000288 <__aeabi_dsub>
 800fe14:	4652      	mov	r2, sl
 800fe16:	465b      	mov	r3, fp
 800fe18:	f7f0 fe60 	bl	8000adc <__aeabi_dcmplt>
 800fe1c:	2800      	cmp	r0, #0
 800fe1e:	f040 80b5 	bne.w	800ff8c <_dtoa_r+0x6c4>
 800fe22:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fe24:	429d      	cmp	r5, r3
 800fe26:	d081      	beq.n	800fd2c <_dtoa_r+0x464>
 800fe28:	4b30      	ldr	r3, [pc, #192]	; (800feec <_dtoa_r+0x624>)
 800fe2a:	2200      	movs	r2, #0
 800fe2c:	4650      	mov	r0, sl
 800fe2e:	4659      	mov	r1, fp
 800fe30:	f7f0 fbe2 	bl	80005f8 <__aeabi_dmul>
 800fe34:	4b2d      	ldr	r3, [pc, #180]	; (800feec <_dtoa_r+0x624>)
 800fe36:	4682      	mov	sl, r0
 800fe38:	468b      	mov	fp, r1
 800fe3a:	4640      	mov	r0, r8
 800fe3c:	4649      	mov	r1, r9
 800fe3e:	2200      	movs	r2, #0
 800fe40:	f7f0 fbda 	bl	80005f8 <__aeabi_dmul>
 800fe44:	4680      	mov	r8, r0
 800fe46:	4689      	mov	r9, r1
 800fe48:	e7c6      	b.n	800fdd8 <_dtoa_r+0x510>
 800fe4a:	4650      	mov	r0, sl
 800fe4c:	4659      	mov	r1, fp
 800fe4e:	f7f0 fbd3 	bl	80005f8 <__aeabi_dmul>
 800fe52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fe54:	9d01      	ldr	r5, [sp, #4]
 800fe56:	930f      	str	r3, [sp, #60]	; 0x3c
 800fe58:	4682      	mov	sl, r0
 800fe5a:	468b      	mov	fp, r1
 800fe5c:	4649      	mov	r1, r9
 800fe5e:	4640      	mov	r0, r8
 800fe60:	f7f0 fe7a 	bl	8000b58 <__aeabi_d2iz>
 800fe64:	4606      	mov	r6, r0
 800fe66:	f7f0 fb5d 	bl	8000524 <__aeabi_i2d>
 800fe6a:	3630      	adds	r6, #48	; 0x30
 800fe6c:	4602      	mov	r2, r0
 800fe6e:	460b      	mov	r3, r1
 800fe70:	4640      	mov	r0, r8
 800fe72:	4649      	mov	r1, r9
 800fe74:	f7f0 fa08 	bl	8000288 <__aeabi_dsub>
 800fe78:	f805 6b01 	strb.w	r6, [r5], #1
 800fe7c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fe7e:	429d      	cmp	r5, r3
 800fe80:	4680      	mov	r8, r0
 800fe82:	4689      	mov	r9, r1
 800fe84:	f04f 0200 	mov.w	r2, #0
 800fe88:	d124      	bne.n	800fed4 <_dtoa_r+0x60c>
 800fe8a:	4b1b      	ldr	r3, [pc, #108]	; (800fef8 <_dtoa_r+0x630>)
 800fe8c:	4650      	mov	r0, sl
 800fe8e:	4659      	mov	r1, fp
 800fe90:	f7f0 f9fc 	bl	800028c <__adddf3>
 800fe94:	4602      	mov	r2, r0
 800fe96:	460b      	mov	r3, r1
 800fe98:	4640      	mov	r0, r8
 800fe9a:	4649      	mov	r1, r9
 800fe9c:	f7f0 fe3c 	bl	8000b18 <__aeabi_dcmpgt>
 800fea0:	2800      	cmp	r0, #0
 800fea2:	d173      	bne.n	800ff8c <_dtoa_r+0x6c4>
 800fea4:	4652      	mov	r2, sl
 800fea6:	465b      	mov	r3, fp
 800fea8:	4913      	ldr	r1, [pc, #76]	; (800fef8 <_dtoa_r+0x630>)
 800feaa:	2000      	movs	r0, #0
 800feac:	f7f0 f9ec 	bl	8000288 <__aeabi_dsub>
 800feb0:	4602      	mov	r2, r0
 800feb2:	460b      	mov	r3, r1
 800feb4:	4640      	mov	r0, r8
 800feb6:	4649      	mov	r1, r9
 800feb8:	f7f0 fe10 	bl	8000adc <__aeabi_dcmplt>
 800febc:	2800      	cmp	r0, #0
 800febe:	f43f af35 	beq.w	800fd2c <_dtoa_r+0x464>
 800fec2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800fec4:	1e6b      	subs	r3, r5, #1
 800fec6:	930f      	str	r3, [sp, #60]	; 0x3c
 800fec8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800fecc:	2b30      	cmp	r3, #48	; 0x30
 800fece:	d0f8      	beq.n	800fec2 <_dtoa_r+0x5fa>
 800fed0:	9700      	str	r7, [sp, #0]
 800fed2:	e049      	b.n	800ff68 <_dtoa_r+0x6a0>
 800fed4:	4b05      	ldr	r3, [pc, #20]	; (800feec <_dtoa_r+0x624>)
 800fed6:	f7f0 fb8f 	bl	80005f8 <__aeabi_dmul>
 800feda:	4680      	mov	r8, r0
 800fedc:	4689      	mov	r9, r1
 800fede:	e7bd      	b.n	800fe5c <_dtoa_r+0x594>
 800fee0:	08014538 	.word	0x08014538
 800fee4:	08014510 	.word	0x08014510
 800fee8:	3ff00000 	.word	0x3ff00000
 800feec:	40240000 	.word	0x40240000
 800fef0:	401c0000 	.word	0x401c0000
 800fef4:	40140000 	.word	0x40140000
 800fef8:	3fe00000 	.word	0x3fe00000
 800fefc:	9d01      	ldr	r5, [sp, #4]
 800fefe:	4656      	mov	r6, sl
 800ff00:	465f      	mov	r7, fp
 800ff02:	4642      	mov	r2, r8
 800ff04:	464b      	mov	r3, r9
 800ff06:	4630      	mov	r0, r6
 800ff08:	4639      	mov	r1, r7
 800ff0a:	f7f0 fc9f 	bl	800084c <__aeabi_ddiv>
 800ff0e:	f7f0 fe23 	bl	8000b58 <__aeabi_d2iz>
 800ff12:	4682      	mov	sl, r0
 800ff14:	f7f0 fb06 	bl	8000524 <__aeabi_i2d>
 800ff18:	4642      	mov	r2, r8
 800ff1a:	464b      	mov	r3, r9
 800ff1c:	f7f0 fb6c 	bl	80005f8 <__aeabi_dmul>
 800ff20:	4602      	mov	r2, r0
 800ff22:	460b      	mov	r3, r1
 800ff24:	4630      	mov	r0, r6
 800ff26:	4639      	mov	r1, r7
 800ff28:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800ff2c:	f7f0 f9ac 	bl	8000288 <__aeabi_dsub>
 800ff30:	f805 6b01 	strb.w	r6, [r5], #1
 800ff34:	9e01      	ldr	r6, [sp, #4]
 800ff36:	9f03      	ldr	r7, [sp, #12]
 800ff38:	1bae      	subs	r6, r5, r6
 800ff3a:	42b7      	cmp	r7, r6
 800ff3c:	4602      	mov	r2, r0
 800ff3e:	460b      	mov	r3, r1
 800ff40:	d135      	bne.n	800ffae <_dtoa_r+0x6e6>
 800ff42:	f7f0 f9a3 	bl	800028c <__adddf3>
 800ff46:	4642      	mov	r2, r8
 800ff48:	464b      	mov	r3, r9
 800ff4a:	4606      	mov	r6, r0
 800ff4c:	460f      	mov	r7, r1
 800ff4e:	f7f0 fde3 	bl	8000b18 <__aeabi_dcmpgt>
 800ff52:	b9d0      	cbnz	r0, 800ff8a <_dtoa_r+0x6c2>
 800ff54:	4642      	mov	r2, r8
 800ff56:	464b      	mov	r3, r9
 800ff58:	4630      	mov	r0, r6
 800ff5a:	4639      	mov	r1, r7
 800ff5c:	f7f0 fdb4 	bl	8000ac8 <__aeabi_dcmpeq>
 800ff60:	b110      	cbz	r0, 800ff68 <_dtoa_r+0x6a0>
 800ff62:	f01a 0f01 	tst.w	sl, #1
 800ff66:	d110      	bne.n	800ff8a <_dtoa_r+0x6c2>
 800ff68:	4620      	mov	r0, r4
 800ff6a:	ee18 1a10 	vmov	r1, s16
 800ff6e:	f000 fae5 	bl	801053c <_Bfree>
 800ff72:	2300      	movs	r3, #0
 800ff74:	9800      	ldr	r0, [sp, #0]
 800ff76:	702b      	strb	r3, [r5, #0]
 800ff78:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ff7a:	3001      	adds	r0, #1
 800ff7c:	6018      	str	r0, [r3, #0]
 800ff7e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ff80:	2b00      	cmp	r3, #0
 800ff82:	f43f acf1 	beq.w	800f968 <_dtoa_r+0xa0>
 800ff86:	601d      	str	r5, [r3, #0]
 800ff88:	e4ee      	b.n	800f968 <_dtoa_r+0xa0>
 800ff8a:	9f00      	ldr	r7, [sp, #0]
 800ff8c:	462b      	mov	r3, r5
 800ff8e:	461d      	mov	r5, r3
 800ff90:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ff94:	2a39      	cmp	r2, #57	; 0x39
 800ff96:	d106      	bne.n	800ffa6 <_dtoa_r+0x6de>
 800ff98:	9a01      	ldr	r2, [sp, #4]
 800ff9a:	429a      	cmp	r2, r3
 800ff9c:	d1f7      	bne.n	800ff8e <_dtoa_r+0x6c6>
 800ff9e:	9901      	ldr	r1, [sp, #4]
 800ffa0:	2230      	movs	r2, #48	; 0x30
 800ffa2:	3701      	adds	r7, #1
 800ffa4:	700a      	strb	r2, [r1, #0]
 800ffa6:	781a      	ldrb	r2, [r3, #0]
 800ffa8:	3201      	adds	r2, #1
 800ffaa:	701a      	strb	r2, [r3, #0]
 800ffac:	e790      	b.n	800fed0 <_dtoa_r+0x608>
 800ffae:	4ba6      	ldr	r3, [pc, #664]	; (8010248 <_dtoa_r+0x980>)
 800ffb0:	2200      	movs	r2, #0
 800ffb2:	f7f0 fb21 	bl	80005f8 <__aeabi_dmul>
 800ffb6:	2200      	movs	r2, #0
 800ffb8:	2300      	movs	r3, #0
 800ffba:	4606      	mov	r6, r0
 800ffbc:	460f      	mov	r7, r1
 800ffbe:	f7f0 fd83 	bl	8000ac8 <__aeabi_dcmpeq>
 800ffc2:	2800      	cmp	r0, #0
 800ffc4:	d09d      	beq.n	800ff02 <_dtoa_r+0x63a>
 800ffc6:	e7cf      	b.n	800ff68 <_dtoa_r+0x6a0>
 800ffc8:	9a08      	ldr	r2, [sp, #32]
 800ffca:	2a00      	cmp	r2, #0
 800ffcc:	f000 80d7 	beq.w	801017e <_dtoa_r+0x8b6>
 800ffd0:	9a06      	ldr	r2, [sp, #24]
 800ffd2:	2a01      	cmp	r2, #1
 800ffd4:	f300 80ba 	bgt.w	801014c <_dtoa_r+0x884>
 800ffd8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ffda:	2a00      	cmp	r2, #0
 800ffdc:	f000 80b2 	beq.w	8010144 <_dtoa_r+0x87c>
 800ffe0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ffe4:	9e07      	ldr	r6, [sp, #28]
 800ffe6:	9d04      	ldr	r5, [sp, #16]
 800ffe8:	9a04      	ldr	r2, [sp, #16]
 800ffea:	441a      	add	r2, r3
 800ffec:	9204      	str	r2, [sp, #16]
 800ffee:	9a05      	ldr	r2, [sp, #20]
 800fff0:	2101      	movs	r1, #1
 800fff2:	441a      	add	r2, r3
 800fff4:	4620      	mov	r0, r4
 800fff6:	9205      	str	r2, [sp, #20]
 800fff8:	f000 fb58 	bl	80106ac <__i2b>
 800fffc:	4607      	mov	r7, r0
 800fffe:	2d00      	cmp	r5, #0
 8010000:	dd0c      	ble.n	801001c <_dtoa_r+0x754>
 8010002:	9b05      	ldr	r3, [sp, #20]
 8010004:	2b00      	cmp	r3, #0
 8010006:	dd09      	ble.n	801001c <_dtoa_r+0x754>
 8010008:	42ab      	cmp	r3, r5
 801000a:	9a04      	ldr	r2, [sp, #16]
 801000c:	bfa8      	it	ge
 801000e:	462b      	movge	r3, r5
 8010010:	1ad2      	subs	r2, r2, r3
 8010012:	9204      	str	r2, [sp, #16]
 8010014:	9a05      	ldr	r2, [sp, #20]
 8010016:	1aed      	subs	r5, r5, r3
 8010018:	1ad3      	subs	r3, r2, r3
 801001a:	9305      	str	r3, [sp, #20]
 801001c:	9b07      	ldr	r3, [sp, #28]
 801001e:	b31b      	cbz	r3, 8010068 <_dtoa_r+0x7a0>
 8010020:	9b08      	ldr	r3, [sp, #32]
 8010022:	2b00      	cmp	r3, #0
 8010024:	f000 80af 	beq.w	8010186 <_dtoa_r+0x8be>
 8010028:	2e00      	cmp	r6, #0
 801002a:	dd13      	ble.n	8010054 <_dtoa_r+0x78c>
 801002c:	4639      	mov	r1, r7
 801002e:	4632      	mov	r2, r6
 8010030:	4620      	mov	r0, r4
 8010032:	f000 fbfb 	bl	801082c <__pow5mult>
 8010036:	ee18 2a10 	vmov	r2, s16
 801003a:	4601      	mov	r1, r0
 801003c:	4607      	mov	r7, r0
 801003e:	4620      	mov	r0, r4
 8010040:	f000 fb4a 	bl	80106d8 <__multiply>
 8010044:	ee18 1a10 	vmov	r1, s16
 8010048:	4680      	mov	r8, r0
 801004a:	4620      	mov	r0, r4
 801004c:	f000 fa76 	bl	801053c <_Bfree>
 8010050:	ee08 8a10 	vmov	s16, r8
 8010054:	9b07      	ldr	r3, [sp, #28]
 8010056:	1b9a      	subs	r2, r3, r6
 8010058:	d006      	beq.n	8010068 <_dtoa_r+0x7a0>
 801005a:	ee18 1a10 	vmov	r1, s16
 801005e:	4620      	mov	r0, r4
 8010060:	f000 fbe4 	bl	801082c <__pow5mult>
 8010064:	ee08 0a10 	vmov	s16, r0
 8010068:	2101      	movs	r1, #1
 801006a:	4620      	mov	r0, r4
 801006c:	f000 fb1e 	bl	80106ac <__i2b>
 8010070:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010072:	2b00      	cmp	r3, #0
 8010074:	4606      	mov	r6, r0
 8010076:	f340 8088 	ble.w	801018a <_dtoa_r+0x8c2>
 801007a:	461a      	mov	r2, r3
 801007c:	4601      	mov	r1, r0
 801007e:	4620      	mov	r0, r4
 8010080:	f000 fbd4 	bl	801082c <__pow5mult>
 8010084:	9b06      	ldr	r3, [sp, #24]
 8010086:	2b01      	cmp	r3, #1
 8010088:	4606      	mov	r6, r0
 801008a:	f340 8081 	ble.w	8010190 <_dtoa_r+0x8c8>
 801008e:	f04f 0800 	mov.w	r8, #0
 8010092:	6933      	ldr	r3, [r6, #16]
 8010094:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8010098:	6918      	ldr	r0, [r3, #16]
 801009a:	f000 fab7 	bl	801060c <__hi0bits>
 801009e:	f1c0 0020 	rsb	r0, r0, #32
 80100a2:	9b05      	ldr	r3, [sp, #20]
 80100a4:	4418      	add	r0, r3
 80100a6:	f010 001f 	ands.w	r0, r0, #31
 80100aa:	f000 8092 	beq.w	80101d2 <_dtoa_r+0x90a>
 80100ae:	f1c0 0320 	rsb	r3, r0, #32
 80100b2:	2b04      	cmp	r3, #4
 80100b4:	f340 808a 	ble.w	80101cc <_dtoa_r+0x904>
 80100b8:	f1c0 001c 	rsb	r0, r0, #28
 80100bc:	9b04      	ldr	r3, [sp, #16]
 80100be:	4403      	add	r3, r0
 80100c0:	9304      	str	r3, [sp, #16]
 80100c2:	9b05      	ldr	r3, [sp, #20]
 80100c4:	4403      	add	r3, r0
 80100c6:	4405      	add	r5, r0
 80100c8:	9305      	str	r3, [sp, #20]
 80100ca:	9b04      	ldr	r3, [sp, #16]
 80100cc:	2b00      	cmp	r3, #0
 80100ce:	dd07      	ble.n	80100e0 <_dtoa_r+0x818>
 80100d0:	ee18 1a10 	vmov	r1, s16
 80100d4:	461a      	mov	r2, r3
 80100d6:	4620      	mov	r0, r4
 80100d8:	f000 fc02 	bl	80108e0 <__lshift>
 80100dc:	ee08 0a10 	vmov	s16, r0
 80100e0:	9b05      	ldr	r3, [sp, #20]
 80100e2:	2b00      	cmp	r3, #0
 80100e4:	dd05      	ble.n	80100f2 <_dtoa_r+0x82a>
 80100e6:	4631      	mov	r1, r6
 80100e8:	461a      	mov	r2, r3
 80100ea:	4620      	mov	r0, r4
 80100ec:	f000 fbf8 	bl	80108e0 <__lshift>
 80100f0:	4606      	mov	r6, r0
 80100f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80100f4:	2b00      	cmp	r3, #0
 80100f6:	d06e      	beq.n	80101d6 <_dtoa_r+0x90e>
 80100f8:	ee18 0a10 	vmov	r0, s16
 80100fc:	4631      	mov	r1, r6
 80100fe:	f000 fc5f 	bl	80109c0 <__mcmp>
 8010102:	2800      	cmp	r0, #0
 8010104:	da67      	bge.n	80101d6 <_dtoa_r+0x90e>
 8010106:	9b00      	ldr	r3, [sp, #0]
 8010108:	3b01      	subs	r3, #1
 801010a:	ee18 1a10 	vmov	r1, s16
 801010e:	9300      	str	r3, [sp, #0]
 8010110:	220a      	movs	r2, #10
 8010112:	2300      	movs	r3, #0
 8010114:	4620      	mov	r0, r4
 8010116:	f000 fa33 	bl	8010580 <__multadd>
 801011a:	9b08      	ldr	r3, [sp, #32]
 801011c:	ee08 0a10 	vmov	s16, r0
 8010120:	2b00      	cmp	r3, #0
 8010122:	f000 81b1 	beq.w	8010488 <_dtoa_r+0xbc0>
 8010126:	2300      	movs	r3, #0
 8010128:	4639      	mov	r1, r7
 801012a:	220a      	movs	r2, #10
 801012c:	4620      	mov	r0, r4
 801012e:	f000 fa27 	bl	8010580 <__multadd>
 8010132:	9b02      	ldr	r3, [sp, #8]
 8010134:	2b00      	cmp	r3, #0
 8010136:	4607      	mov	r7, r0
 8010138:	f300 808e 	bgt.w	8010258 <_dtoa_r+0x990>
 801013c:	9b06      	ldr	r3, [sp, #24]
 801013e:	2b02      	cmp	r3, #2
 8010140:	dc51      	bgt.n	80101e6 <_dtoa_r+0x91e>
 8010142:	e089      	b.n	8010258 <_dtoa_r+0x990>
 8010144:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010146:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801014a:	e74b      	b.n	800ffe4 <_dtoa_r+0x71c>
 801014c:	9b03      	ldr	r3, [sp, #12]
 801014e:	1e5e      	subs	r6, r3, #1
 8010150:	9b07      	ldr	r3, [sp, #28]
 8010152:	42b3      	cmp	r3, r6
 8010154:	bfbf      	itttt	lt
 8010156:	9b07      	ldrlt	r3, [sp, #28]
 8010158:	9607      	strlt	r6, [sp, #28]
 801015a:	1af2      	sublt	r2, r6, r3
 801015c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 801015e:	bfb6      	itet	lt
 8010160:	189b      	addlt	r3, r3, r2
 8010162:	1b9e      	subge	r6, r3, r6
 8010164:	930a      	strlt	r3, [sp, #40]	; 0x28
 8010166:	9b03      	ldr	r3, [sp, #12]
 8010168:	bfb8      	it	lt
 801016a:	2600      	movlt	r6, #0
 801016c:	2b00      	cmp	r3, #0
 801016e:	bfb7      	itett	lt
 8010170:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8010174:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8010178:	1a9d      	sublt	r5, r3, r2
 801017a:	2300      	movlt	r3, #0
 801017c:	e734      	b.n	800ffe8 <_dtoa_r+0x720>
 801017e:	9e07      	ldr	r6, [sp, #28]
 8010180:	9d04      	ldr	r5, [sp, #16]
 8010182:	9f08      	ldr	r7, [sp, #32]
 8010184:	e73b      	b.n	800fffe <_dtoa_r+0x736>
 8010186:	9a07      	ldr	r2, [sp, #28]
 8010188:	e767      	b.n	801005a <_dtoa_r+0x792>
 801018a:	9b06      	ldr	r3, [sp, #24]
 801018c:	2b01      	cmp	r3, #1
 801018e:	dc18      	bgt.n	80101c2 <_dtoa_r+0x8fa>
 8010190:	f1ba 0f00 	cmp.w	sl, #0
 8010194:	d115      	bne.n	80101c2 <_dtoa_r+0x8fa>
 8010196:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801019a:	b993      	cbnz	r3, 80101c2 <_dtoa_r+0x8fa>
 801019c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80101a0:	0d1b      	lsrs	r3, r3, #20
 80101a2:	051b      	lsls	r3, r3, #20
 80101a4:	b183      	cbz	r3, 80101c8 <_dtoa_r+0x900>
 80101a6:	9b04      	ldr	r3, [sp, #16]
 80101a8:	3301      	adds	r3, #1
 80101aa:	9304      	str	r3, [sp, #16]
 80101ac:	9b05      	ldr	r3, [sp, #20]
 80101ae:	3301      	adds	r3, #1
 80101b0:	9305      	str	r3, [sp, #20]
 80101b2:	f04f 0801 	mov.w	r8, #1
 80101b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80101b8:	2b00      	cmp	r3, #0
 80101ba:	f47f af6a 	bne.w	8010092 <_dtoa_r+0x7ca>
 80101be:	2001      	movs	r0, #1
 80101c0:	e76f      	b.n	80100a2 <_dtoa_r+0x7da>
 80101c2:	f04f 0800 	mov.w	r8, #0
 80101c6:	e7f6      	b.n	80101b6 <_dtoa_r+0x8ee>
 80101c8:	4698      	mov	r8, r3
 80101ca:	e7f4      	b.n	80101b6 <_dtoa_r+0x8ee>
 80101cc:	f43f af7d 	beq.w	80100ca <_dtoa_r+0x802>
 80101d0:	4618      	mov	r0, r3
 80101d2:	301c      	adds	r0, #28
 80101d4:	e772      	b.n	80100bc <_dtoa_r+0x7f4>
 80101d6:	9b03      	ldr	r3, [sp, #12]
 80101d8:	2b00      	cmp	r3, #0
 80101da:	dc37      	bgt.n	801024c <_dtoa_r+0x984>
 80101dc:	9b06      	ldr	r3, [sp, #24]
 80101de:	2b02      	cmp	r3, #2
 80101e0:	dd34      	ble.n	801024c <_dtoa_r+0x984>
 80101e2:	9b03      	ldr	r3, [sp, #12]
 80101e4:	9302      	str	r3, [sp, #8]
 80101e6:	9b02      	ldr	r3, [sp, #8]
 80101e8:	b96b      	cbnz	r3, 8010206 <_dtoa_r+0x93e>
 80101ea:	4631      	mov	r1, r6
 80101ec:	2205      	movs	r2, #5
 80101ee:	4620      	mov	r0, r4
 80101f0:	f000 f9c6 	bl	8010580 <__multadd>
 80101f4:	4601      	mov	r1, r0
 80101f6:	4606      	mov	r6, r0
 80101f8:	ee18 0a10 	vmov	r0, s16
 80101fc:	f000 fbe0 	bl	80109c0 <__mcmp>
 8010200:	2800      	cmp	r0, #0
 8010202:	f73f adbb 	bgt.w	800fd7c <_dtoa_r+0x4b4>
 8010206:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010208:	9d01      	ldr	r5, [sp, #4]
 801020a:	43db      	mvns	r3, r3
 801020c:	9300      	str	r3, [sp, #0]
 801020e:	f04f 0800 	mov.w	r8, #0
 8010212:	4631      	mov	r1, r6
 8010214:	4620      	mov	r0, r4
 8010216:	f000 f991 	bl	801053c <_Bfree>
 801021a:	2f00      	cmp	r7, #0
 801021c:	f43f aea4 	beq.w	800ff68 <_dtoa_r+0x6a0>
 8010220:	f1b8 0f00 	cmp.w	r8, #0
 8010224:	d005      	beq.n	8010232 <_dtoa_r+0x96a>
 8010226:	45b8      	cmp	r8, r7
 8010228:	d003      	beq.n	8010232 <_dtoa_r+0x96a>
 801022a:	4641      	mov	r1, r8
 801022c:	4620      	mov	r0, r4
 801022e:	f000 f985 	bl	801053c <_Bfree>
 8010232:	4639      	mov	r1, r7
 8010234:	4620      	mov	r0, r4
 8010236:	f000 f981 	bl	801053c <_Bfree>
 801023a:	e695      	b.n	800ff68 <_dtoa_r+0x6a0>
 801023c:	2600      	movs	r6, #0
 801023e:	4637      	mov	r7, r6
 8010240:	e7e1      	b.n	8010206 <_dtoa_r+0x93e>
 8010242:	9700      	str	r7, [sp, #0]
 8010244:	4637      	mov	r7, r6
 8010246:	e599      	b.n	800fd7c <_dtoa_r+0x4b4>
 8010248:	40240000 	.word	0x40240000
 801024c:	9b08      	ldr	r3, [sp, #32]
 801024e:	2b00      	cmp	r3, #0
 8010250:	f000 80ca 	beq.w	80103e8 <_dtoa_r+0xb20>
 8010254:	9b03      	ldr	r3, [sp, #12]
 8010256:	9302      	str	r3, [sp, #8]
 8010258:	2d00      	cmp	r5, #0
 801025a:	dd05      	ble.n	8010268 <_dtoa_r+0x9a0>
 801025c:	4639      	mov	r1, r7
 801025e:	462a      	mov	r2, r5
 8010260:	4620      	mov	r0, r4
 8010262:	f000 fb3d 	bl	80108e0 <__lshift>
 8010266:	4607      	mov	r7, r0
 8010268:	f1b8 0f00 	cmp.w	r8, #0
 801026c:	d05b      	beq.n	8010326 <_dtoa_r+0xa5e>
 801026e:	6879      	ldr	r1, [r7, #4]
 8010270:	4620      	mov	r0, r4
 8010272:	f000 f923 	bl	80104bc <_Balloc>
 8010276:	4605      	mov	r5, r0
 8010278:	b928      	cbnz	r0, 8010286 <_dtoa_r+0x9be>
 801027a:	4b87      	ldr	r3, [pc, #540]	; (8010498 <_dtoa_r+0xbd0>)
 801027c:	4602      	mov	r2, r0
 801027e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8010282:	f7ff bb3b 	b.w	800f8fc <_dtoa_r+0x34>
 8010286:	693a      	ldr	r2, [r7, #16]
 8010288:	3202      	adds	r2, #2
 801028a:	0092      	lsls	r2, r2, #2
 801028c:	f107 010c 	add.w	r1, r7, #12
 8010290:	300c      	adds	r0, #12
 8010292:	f7fe fded 	bl	800ee70 <memcpy>
 8010296:	2201      	movs	r2, #1
 8010298:	4629      	mov	r1, r5
 801029a:	4620      	mov	r0, r4
 801029c:	f000 fb20 	bl	80108e0 <__lshift>
 80102a0:	9b01      	ldr	r3, [sp, #4]
 80102a2:	f103 0901 	add.w	r9, r3, #1
 80102a6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80102aa:	4413      	add	r3, r2
 80102ac:	9305      	str	r3, [sp, #20]
 80102ae:	f00a 0301 	and.w	r3, sl, #1
 80102b2:	46b8      	mov	r8, r7
 80102b4:	9304      	str	r3, [sp, #16]
 80102b6:	4607      	mov	r7, r0
 80102b8:	4631      	mov	r1, r6
 80102ba:	ee18 0a10 	vmov	r0, s16
 80102be:	f7ff fa77 	bl	800f7b0 <quorem>
 80102c2:	4641      	mov	r1, r8
 80102c4:	9002      	str	r0, [sp, #8]
 80102c6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80102ca:	ee18 0a10 	vmov	r0, s16
 80102ce:	f000 fb77 	bl	80109c0 <__mcmp>
 80102d2:	463a      	mov	r2, r7
 80102d4:	9003      	str	r0, [sp, #12]
 80102d6:	4631      	mov	r1, r6
 80102d8:	4620      	mov	r0, r4
 80102da:	f000 fb8d 	bl	80109f8 <__mdiff>
 80102de:	68c2      	ldr	r2, [r0, #12]
 80102e0:	f109 3bff 	add.w	fp, r9, #4294967295
 80102e4:	4605      	mov	r5, r0
 80102e6:	bb02      	cbnz	r2, 801032a <_dtoa_r+0xa62>
 80102e8:	4601      	mov	r1, r0
 80102ea:	ee18 0a10 	vmov	r0, s16
 80102ee:	f000 fb67 	bl	80109c0 <__mcmp>
 80102f2:	4602      	mov	r2, r0
 80102f4:	4629      	mov	r1, r5
 80102f6:	4620      	mov	r0, r4
 80102f8:	9207      	str	r2, [sp, #28]
 80102fa:	f000 f91f 	bl	801053c <_Bfree>
 80102fe:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8010302:	ea43 0102 	orr.w	r1, r3, r2
 8010306:	9b04      	ldr	r3, [sp, #16]
 8010308:	430b      	orrs	r3, r1
 801030a:	464d      	mov	r5, r9
 801030c:	d10f      	bne.n	801032e <_dtoa_r+0xa66>
 801030e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8010312:	d02a      	beq.n	801036a <_dtoa_r+0xaa2>
 8010314:	9b03      	ldr	r3, [sp, #12]
 8010316:	2b00      	cmp	r3, #0
 8010318:	dd02      	ble.n	8010320 <_dtoa_r+0xa58>
 801031a:	9b02      	ldr	r3, [sp, #8]
 801031c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8010320:	f88b a000 	strb.w	sl, [fp]
 8010324:	e775      	b.n	8010212 <_dtoa_r+0x94a>
 8010326:	4638      	mov	r0, r7
 8010328:	e7ba      	b.n	80102a0 <_dtoa_r+0x9d8>
 801032a:	2201      	movs	r2, #1
 801032c:	e7e2      	b.n	80102f4 <_dtoa_r+0xa2c>
 801032e:	9b03      	ldr	r3, [sp, #12]
 8010330:	2b00      	cmp	r3, #0
 8010332:	db04      	blt.n	801033e <_dtoa_r+0xa76>
 8010334:	9906      	ldr	r1, [sp, #24]
 8010336:	430b      	orrs	r3, r1
 8010338:	9904      	ldr	r1, [sp, #16]
 801033a:	430b      	orrs	r3, r1
 801033c:	d122      	bne.n	8010384 <_dtoa_r+0xabc>
 801033e:	2a00      	cmp	r2, #0
 8010340:	ddee      	ble.n	8010320 <_dtoa_r+0xa58>
 8010342:	ee18 1a10 	vmov	r1, s16
 8010346:	2201      	movs	r2, #1
 8010348:	4620      	mov	r0, r4
 801034a:	f000 fac9 	bl	80108e0 <__lshift>
 801034e:	4631      	mov	r1, r6
 8010350:	ee08 0a10 	vmov	s16, r0
 8010354:	f000 fb34 	bl	80109c0 <__mcmp>
 8010358:	2800      	cmp	r0, #0
 801035a:	dc03      	bgt.n	8010364 <_dtoa_r+0xa9c>
 801035c:	d1e0      	bne.n	8010320 <_dtoa_r+0xa58>
 801035e:	f01a 0f01 	tst.w	sl, #1
 8010362:	d0dd      	beq.n	8010320 <_dtoa_r+0xa58>
 8010364:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8010368:	d1d7      	bne.n	801031a <_dtoa_r+0xa52>
 801036a:	2339      	movs	r3, #57	; 0x39
 801036c:	f88b 3000 	strb.w	r3, [fp]
 8010370:	462b      	mov	r3, r5
 8010372:	461d      	mov	r5, r3
 8010374:	3b01      	subs	r3, #1
 8010376:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801037a:	2a39      	cmp	r2, #57	; 0x39
 801037c:	d071      	beq.n	8010462 <_dtoa_r+0xb9a>
 801037e:	3201      	adds	r2, #1
 8010380:	701a      	strb	r2, [r3, #0]
 8010382:	e746      	b.n	8010212 <_dtoa_r+0x94a>
 8010384:	2a00      	cmp	r2, #0
 8010386:	dd07      	ble.n	8010398 <_dtoa_r+0xad0>
 8010388:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801038c:	d0ed      	beq.n	801036a <_dtoa_r+0xaa2>
 801038e:	f10a 0301 	add.w	r3, sl, #1
 8010392:	f88b 3000 	strb.w	r3, [fp]
 8010396:	e73c      	b.n	8010212 <_dtoa_r+0x94a>
 8010398:	9b05      	ldr	r3, [sp, #20]
 801039a:	f809 ac01 	strb.w	sl, [r9, #-1]
 801039e:	4599      	cmp	r9, r3
 80103a0:	d047      	beq.n	8010432 <_dtoa_r+0xb6a>
 80103a2:	ee18 1a10 	vmov	r1, s16
 80103a6:	2300      	movs	r3, #0
 80103a8:	220a      	movs	r2, #10
 80103aa:	4620      	mov	r0, r4
 80103ac:	f000 f8e8 	bl	8010580 <__multadd>
 80103b0:	45b8      	cmp	r8, r7
 80103b2:	ee08 0a10 	vmov	s16, r0
 80103b6:	f04f 0300 	mov.w	r3, #0
 80103ba:	f04f 020a 	mov.w	r2, #10
 80103be:	4641      	mov	r1, r8
 80103c0:	4620      	mov	r0, r4
 80103c2:	d106      	bne.n	80103d2 <_dtoa_r+0xb0a>
 80103c4:	f000 f8dc 	bl	8010580 <__multadd>
 80103c8:	4680      	mov	r8, r0
 80103ca:	4607      	mov	r7, r0
 80103cc:	f109 0901 	add.w	r9, r9, #1
 80103d0:	e772      	b.n	80102b8 <_dtoa_r+0x9f0>
 80103d2:	f000 f8d5 	bl	8010580 <__multadd>
 80103d6:	4639      	mov	r1, r7
 80103d8:	4680      	mov	r8, r0
 80103da:	2300      	movs	r3, #0
 80103dc:	220a      	movs	r2, #10
 80103de:	4620      	mov	r0, r4
 80103e0:	f000 f8ce 	bl	8010580 <__multadd>
 80103e4:	4607      	mov	r7, r0
 80103e6:	e7f1      	b.n	80103cc <_dtoa_r+0xb04>
 80103e8:	9b03      	ldr	r3, [sp, #12]
 80103ea:	9302      	str	r3, [sp, #8]
 80103ec:	9d01      	ldr	r5, [sp, #4]
 80103ee:	ee18 0a10 	vmov	r0, s16
 80103f2:	4631      	mov	r1, r6
 80103f4:	f7ff f9dc 	bl	800f7b0 <quorem>
 80103f8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80103fc:	9b01      	ldr	r3, [sp, #4]
 80103fe:	f805 ab01 	strb.w	sl, [r5], #1
 8010402:	1aea      	subs	r2, r5, r3
 8010404:	9b02      	ldr	r3, [sp, #8]
 8010406:	4293      	cmp	r3, r2
 8010408:	dd09      	ble.n	801041e <_dtoa_r+0xb56>
 801040a:	ee18 1a10 	vmov	r1, s16
 801040e:	2300      	movs	r3, #0
 8010410:	220a      	movs	r2, #10
 8010412:	4620      	mov	r0, r4
 8010414:	f000 f8b4 	bl	8010580 <__multadd>
 8010418:	ee08 0a10 	vmov	s16, r0
 801041c:	e7e7      	b.n	80103ee <_dtoa_r+0xb26>
 801041e:	9b02      	ldr	r3, [sp, #8]
 8010420:	2b00      	cmp	r3, #0
 8010422:	bfc8      	it	gt
 8010424:	461d      	movgt	r5, r3
 8010426:	9b01      	ldr	r3, [sp, #4]
 8010428:	bfd8      	it	le
 801042a:	2501      	movle	r5, #1
 801042c:	441d      	add	r5, r3
 801042e:	f04f 0800 	mov.w	r8, #0
 8010432:	ee18 1a10 	vmov	r1, s16
 8010436:	2201      	movs	r2, #1
 8010438:	4620      	mov	r0, r4
 801043a:	f000 fa51 	bl	80108e0 <__lshift>
 801043e:	4631      	mov	r1, r6
 8010440:	ee08 0a10 	vmov	s16, r0
 8010444:	f000 fabc 	bl	80109c0 <__mcmp>
 8010448:	2800      	cmp	r0, #0
 801044a:	dc91      	bgt.n	8010370 <_dtoa_r+0xaa8>
 801044c:	d102      	bne.n	8010454 <_dtoa_r+0xb8c>
 801044e:	f01a 0f01 	tst.w	sl, #1
 8010452:	d18d      	bne.n	8010370 <_dtoa_r+0xaa8>
 8010454:	462b      	mov	r3, r5
 8010456:	461d      	mov	r5, r3
 8010458:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801045c:	2a30      	cmp	r2, #48	; 0x30
 801045e:	d0fa      	beq.n	8010456 <_dtoa_r+0xb8e>
 8010460:	e6d7      	b.n	8010212 <_dtoa_r+0x94a>
 8010462:	9a01      	ldr	r2, [sp, #4]
 8010464:	429a      	cmp	r2, r3
 8010466:	d184      	bne.n	8010372 <_dtoa_r+0xaaa>
 8010468:	9b00      	ldr	r3, [sp, #0]
 801046a:	3301      	adds	r3, #1
 801046c:	9300      	str	r3, [sp, #0]
 801046e:	2331      	movs	r3, #49	; 0x31
 8010470:	7013      	strb	r3, [r2, #0]
 8010472:	e6ce      	b.n	8010212 <_dtoa_r+0x94a>
 8010474:	4b09      	ldr	r3, [pc, #36]	; (801049c <_dtoa_r+0xbd4>)
 8010476:	f7ff ba95 	b.w	800f9a4 <_dtoa_r+0xdc>
 801047a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801047c:	2b00      	cmp	r3, #0
 801047e:	f47f aa6e 	bne.w	800f95e <_dtoa_r+0x96>
 8010482:	4b07      	ldr	r3, [pc, #28]	; (80104a0 <_dtoa_r+0xbd8>)
 8010484:	f7ff ba8e 	b.w	800f9a4 <_dtoa_r+0xdc>
 8010488:	9b02      	ldr	r3, [sp, #8]
 801048a:	2b00      	cmp	r3, #0
 801048c:	dcae      	bgt.n	80103ec <_dtoa_r+0xb24>
 801048e:	9b06      	ldr	r3, [sp, #24]
 8010490:	2b02      	cmp	r3, #2
 8010492:	f73f aea8 	bgt.w	80101e6 <_dtoa_r+0x91e>
 8010496:	e7a9      	b.n	80103ec <_dtoa_r+0xb24>
 8010498:	0801449f 	.word	0x0801449f
 801049c:	080143fc 	.word	0x080143fc
 80104a0:	08014420 	.word	0x08014420

080104a4 <_localeconv_r>:
 80104a4:	4800      	ldr	r0, [pc, #0]	; (80104a8 <_localeconv_r+0x4>)
 80104a6:	4770      	bx	lr
 80104a8:	20000170 	.word	0x20000170

080104ac <malloc>:
 80104ac:	4b02      	ldr	r3, [pc, #8]	; (80104b8 <malloc+0xc>)
 80104ae:	4601      	mov	r1, r0
 80104b0:	6818      	ldr	r0, [r3, #0]
 80104b2:	f000 bc09 	b.w	8010cc8 <_malloc_r>
 80104b6:	bf00      	nop
 80104b8:	2000001c 	.word	0x2000001c

080104bc <_Balloc>:
 80104bc:	b570      	push	{r4, r5, r6, lr}
 80104be:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80104c0:	4604      	mov	r4, r0
 80104c2:	460d      	mov	r5, r1
 80104c4:	b976      	cbnz	r6, 80104e4 <_Balloc+0x28>
 80104c6:	2010      	movs	r0, #16
 80104c8:	f7ff fff0 	bl	80104ac <malloc>
 80104cc:	4602      	mov	r2, r0
 80104ce:	6260      	str	r0, [r4, #36]	; 0x24
 80104d0:	b920      	cbnz	r0, 80104dc <_Balloc+0x20>
 80104d2:	4b18      	ldr	r3, [pc, #96]	; (8010534 <_Balloc+0x78>)
 80104d4:	4818      	ldr	r0, [pc, #96]	; (8010538 <_Balloc+0x7c>)
 80104d6:	2166      	movs	r1, #102	; 0x66
 80104d8:	f000 fdd6 	bl	8011088 <__assert_func>
 80104dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80104e0:	6006      	str	r6, [r0, #0]
 80104e2:	60c6      	str	r6, [r0, #12]
 80104e4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80104e6:	68f3      	ldr	r3, [r6, #12]
 80104e8:	b183      	cbz	r3, 801050c <_Balloc+0x50>
 80104ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80104ec:	68db      	ldr	r3, [r3, #12]
 80104ee:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80104f2:	b9b8      	cbnz	r0, 8010524 <_Balloc+0x68>
 80104f4:	2101      	movs	r1, #1
 80104f6:	fa01 f605 	lsl.w	r6, r1, r5
 80104fa:	1d72      	adds	r2, r6, #5
 80104fc:	0092      	lsls	r2, r2, #2
 80104fe:	4620      	mov	r0, r4
 8010500:	f000 fb60 	bl	8010bc4 <_calloc_r>
 8010504:	b160      	cbz	r0, 8010520 <_Balloc+0x64>
 8010506:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801050a:	e00e      	b.n	801052a <_Balloc+0x6e>
 801050c:	2221      	movs	r2, #33	; 0x21
 801050e:	2104      	movs	r1, #4
 8010510:	4620      	mov	r0, r4
 8010512:	f000 fb57 	bl	8010bc4 <_calloc_r>
 8010516:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010518:	60f0      	str	r0, [r6, #12]
 801051a:	68db      	ldr	r3, [r3, #12]
 801051c:	2b00      	cmp	r3, #0
 801051e:	d1e4      	bne.n	80104ea <_Balloc+0x2e>
 8010520:	2000      	movs	r0, #0
 8010522:	bd70      	pop	{r4, r5, r6, pc}
 8010524:	6802      	ldr	r2, [r0, #0]
 8010526:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801052a:	2300      	movs	r3, #0
 801052c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010530:	e7f7      	b.n	8010522 <_Balloc+0x66>
 8010532:	bf00      	nop
 8010534:	0801442d 	.word	0x0801442d
 8010538:	080144b0 	.word	0x080144b0

0801053c <_Bfree>:
 801053c:	b570      	push	{r4, r5, r6, lr}
 801053e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010540:	4605      	mov	r5, r0
 8010542:	460c      	mov	r4, r1
 8010544:	b976      	cbnz	r6, 8010564 <_Bfree+0x28>
 8010546:	2010      	movs	r0, #16
 8010548:	f7ff ffb0 	bl	80104ac <malloc>
 801054c:	4602      	mov	r2, r0
 801054e:	6268      	str	r0, [r5, #36]	; 0x24
 8010550:	b920      	cbnz	r0, 801055c <_Bfree+0x20>
 8010552:	4b09      	ldr	r3, [pc, #36]	; (8010578 <_Bfree+0x3c>)
 8010554:	4809      	ldr	r0, [pc, #36]	; (801057c <_Bfree+0x40>)
 8010556:	218a      	movs	r1, #138	; 0x8a
 8010558:	f000 fd96 	bl	8011088 <__assert_func>
 801055c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010560:	6006      	str	r6, [r0, #0]
 8010562:	60c6      	str	r6, [r0, #12]
 8010564:	b13c      	cbz	r4, 8010576 <_Bfree+0x3a>
 8010566:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8010568:	6862      	ldr	r2, [r4, #4]
 801056a:	68db      	ldr	r3, [r3, #12]
 801056c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010570:	6021      	str	r1, [r4, #0]
 8010572:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8010576:	bd70      	pop	{r4, r5, r6, pc}
 8010578:	0801442d 	.word	0x0801442d
 801057c:	080144b0 	.word	0x080144b0

08010580 <__multadd>:
 8010580:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010584:	690d      	ldr	r5, [r1, #16]
 8010586:	4607      	mov	r7, r0
 8010588:	460c      	mov	r4, r1
 801058a:	461e      	mov	r6, r3
 801058c:	f101 0c14 	add.w	ip, r1, #20
 8010590:	2000      	movs	r0, #0
 8010592:	f8dc 3000 	ldr.w	r3, [ip]
 8010596:	b299      	uxth	r1, r3
 8010598:	fb02 6101 	mla	r1, r2, r1, r6
 801059c:	0c1e      	lsrs	r6, r3, #16
 801059e:	0c0b      	lsrs	r3, r1, #16
 80105a0:	fb02 3306 	mla	r3, r2, r6, r3
 80105a4:	b289      	uxth	r1, r1
 80105a6:	3001      	adds	r0, #1
 80105a8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80105ac:	4285      	cmp	r5, r0
 80105ae:	f84c 1b04 	str.w	r1, [ip], #4
 80105b2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80105b6:	dcec      	bgt.n	8010592 <__multadd+0x12>
 80105b8:	b30e      	cbz	r6, 80105fe <__multadd+0x7e>
 80105ba:	68a3      	ldr	r3, [r4, #8]
 80105bc:	42ab      	cmp	r3, r5
 80105be:	dc19      	bgt.n	80105f4 <__multadd+0x74>
 80105c0:	6861      	ldr	r1, [r4, #4]
 80105c2:	4638      	mov	r0, r7
 80105c4:	3101      	adds	r1, #1
 80105c6:	f7ff ff79 	bl	80104bc <_Balloc>
 80105ca:	4680      	mov	r8, r0
 80105cc:	b928      	cbnz	r0, 80105da <__multadd+0x5a>
 80105ce:	4602      	mov	r2, r0
 80105d0:	4b0c      	ldr	r3, [pc, #48]	; (8010604 <__multadd+0x84>)
 80105d2:	480d      	ldr	r0, [pc, #52]	; (8010608 <__multadd+0x88>)
 80105d4:	21b5      	movs	r1, #181	; 0xb5
 80105d6:	f000 fd57 	bl	8011088 <__assert_func>
 80105da:	6922      	ldr	r2, [r4, #16]
 80105dc:	3202      	adds	r2, #2
 80105de:	f104 010c 	add.w	r1, r4, #12
 80105e2:	0092      	lsls	r2, r2, #2
 80105e4:	300c      	adds	r0, #12
 80105e6:	f7fe fc43 	bl	800ee70 <memcpy>
 80105ea:	4621      	mov	r1, r4
 80105ec:	4638      	mov	r0, r7
 80105ee:	f7ff ffa5 	bl	801053c <_Bfree>
 80105f2:	4644      	mov	r4, r8
 80105f4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80105f8:	3501      	adds	r5, #1
 80105fa:	615e      	str	r6, [r3, #20]
 80105fc:	6125      	str	r5, [r4, #16]
 80105fe:	4620      	mov	r0, r4
 8010600:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010604:	0801449f 	.word	0x0801449f
 8010608:	080144b0 	.word	0x080144b0

0801060c <__hi0bits>:
 801060c:	0c03      	lsrs	r3, r0, #16
 801060e:	041b      	lsls	r3, r3, #16
 8010610:	b9d3      	cbnz	r3, 8010648 <__hi0bits+0x3c>
 8010612:	0400      	lsls	r0, r0, #16
 8010614:	2310      	movs	r3, #16
 8010616:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801061a:	bf04      	itt	eq
 801061c:	0200      	lsleq	r0, r0, #8
 801061e:	3308      	addeq	r3, #8
 8010620:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8010624:	bf04      	itt	eq
 8010626:	0100      	lsleq	r0, r0, #4
 8010628:	3304      	addeq	r3, #4
 801062a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801062e:	bf04      	itt	eq
 8010630:	0080      	lsleq	r0, r0, #2
 8010632:	3302      	addeq	r3, #2
 8010634:	2800      	cmp	r0, #0
 8010636:	db05      	blt.n	8010644 <__hi0bits+0x38>
 8010638:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801063c:	f103 0301 	add.w	r3, r3, #1
 8010640:	bf08      	it	eq
 8010642:	2320      	moveq	r3, #32
 8010644:	4618      	mov	r0, r3
 8010646:	4770      	bx	lr
 8010648:	2300      	movs	r3, #0
 801064a:	e7e4      	b.n	8010616 <__hi0bits+0xa>

0801064c <__lo0bits>:
 801064c:	6803      	ldr	r3, [r0, #0]
 801064e:	f013 0207 	ands.w	r2, r3, #7
 8010652:	4601      	mov	r1, r0
 8010654:	d00b      	beq.n	801066e <__lo0bits+0x22>
 8010656:	07da      	lsls	r2, r3, #31
 8010658:	d423      	bmi.n	80106a2 <__lo0bits+0x56>
 801065a:	0798      	lsls	r0, r3, #30
 801065c:	bf49      	itett	mi
 801065e:	085b      	lsrmi	r3, r3, #1
 8010660:	089b      	lsrpl	r3, r3, #2
 8010662:	2001      	movmi	r0, #1
 8010664:	600b      	strmi	r3, [r1, #0]
 8010666:	bf5c      	itt	pl
 8010668:	600b      	strpl	r3, [r1, #0]
 801066a:	2002      	movpl	r0, #2
 801066c:	4770      	bx	lr
 801066e:	b298      	uxth	r0, r3
 8010670:	b9a8      	cbnz	r0, 801069e <__lo0bits+0x52>
 8010672:	0c1b      	lsrs	r3, r3, #16
 8010674:	2010      	movs	r0, #16
 8010676:	b2da      	uxtb	r2, r3
 8010678:	b90a      	cbnz	r2, 801067e <__lo0bits+0x32>
 801067a:	3008      	adds	r0, #8
 801067c:	0a1b      	lsrs	r3, r3, #8
 801067e:	071a      	lsls	r2, r3, #28
 8010680:	bf04      	itt	eq
 8010682:	091b      	lsreq	r3, r3, #4
 8010684:	3004      	addeq	r0, #4
 8010686:	079a      	lsls	r2, r3, #30
 8010688:	bf04      	itt	eq
 801068a:	089b      	lsreq	r3, r3, #2
 801068c:	3002      	addeq	r0, #2
 801068e:	07da      	lsls	r2, r3, #31
 8010690:	d403      	bmi.n	801069a <__lo0bits+0x4e>
 8010692:	085b      	lsrs	r3, r3, #1
 8010694:	f100 0001 	add.w	r0, r0, #1
 8010698:	d005      	beq.n	80106a6 <__lo0bits+0x5a>
 801069a:	600b      	str	r3, [r1, #0]
 801069c:	4770      	bx	lr
 801069e:	4610      	mov	r0, r2
 80106a0:	e7e9      	b.n	8010676 <__lo0bits+0x2a>
 80106a2:	2000      	movs	r0, #0
 80106a4:	4770      	bx	lr
 80106a6:	2020      	movs	r0, #32
 80106a8:	4770      	bx	lr
	...

080106ac <__i2b>:
 80106ac:	b510      	push	{r4, lr}
 80106ae:	460c      	mov	r4, r1
 80106b0:	2101      	movs	r1, #1
 80106b2:	f7ff ff03 	bl	80104bc <_Balloc>
 80106b6:	4602      	mov	r2, r0
 80106b8:	b928      	cbnz	r0, 80106c6 <__i2b+0x1a>
 80106ba:	4b05      	ldr	r3, [pc, #20]	; (80106d0 <__i2b+0x24>)
 80106bc:	4805      	ldr	r0, [pc, #20]	; (80106d4 <__i2b+0x28>)
 80106be:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80106c2:	f000 fce1 	bl	8011088 <__assert_func>
 80106c6:	2301      	movs	r3, #1
 80106c8:	6144      	str	r4, [r0, #20]
 80106ca:	6103      	str	r3, [r0, #16]
 80106cc:	bd10      	pop	{r4, pc}
 80106ce:	bf00      	nop
 80106d0:	0801449f 	.word	0x0801449f
 80106d4:	080144b0 	.word	0x080144b0

080106d8 <__multiply>:
 80106d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80106dc:	4691      	mov	r9, r2
 80106de:	690a      	ldr	r2, [r1, #16]
 80106e0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80106e4:	429a      	cmp	r2, r3
 80106e6:	bfb8      	it	lt
 80106e8:	460b      	movlt	r3, r1
 80106ea:	460c      	mov	r4, r1
 80106ec:	bfbc      	itt	lt
 80106ee:	464c      	movlt	r4, r9
 80106f0:	4699      	movlt	r9, r3
 80106f2:	6927      	ldr	r7, [r4, #16]
 80106f4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80106f8:	68a3      	ldr	r3, [r4, #8]
 80106fa:	6861      	ldr	r1, [r4, #4]
 80106fc:	eb07 060a 	add.w	r6, r7, sl
 8010700:	42b3      	cmp	r3, r6
 8010702:	b085      	sub	sp, #20
 8010704:	bfb8      	it	lt
 8010706:	3101      	addlt	r1, #1
 8010708:	f7ff fed8 	bl	80104bc <_Balloc>
 801070c:	b930      	cbnz	r0, 801071c <__multiply+0x44>
 801070e:	4602      	mov	r2, r0
 8010710:	4b44      	ldr	r3, [pc, #272]	; (8010824 <__multiply+0x14c>)
 8010712:	4845      	ldr	r0, [pc, #276]	; (8010828 <__multiply+0x150>)
 8010714:	f240 115d 	movw	r1, #349	; 0x15d
 8010718:	f000 fcb6 	bl	8011088 <__assert_func>
 801071c:	f100 0514 	add.w	r5, r0, #20
 8010720:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8010724:	462b      	mov	r3, r5
 8010726:	2200      	movs	r2, #0
 8010728:	4543      	cmp	r3, r8
 801072a:	d321      	bcc.n	8010770 <__multiply+0x98>
 801072c:	f104 0314 	add.w	r3, r4, #20
 8010730:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8010734:	f109 0314 	add.w	r3, r9, #20
 8010738:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801073c:	9202      	str	r2, [sp, #8]
 801073e:	1b3a      	subs	r2, r7, r4
 8010740:	3a15      	subs	r2, #21
 8010742:	f022 0203 	bic.w	r2, r2, #3
 8010746:	3204      	adds	r2, #4
 8010748:	f104 0115 	add.w	r1, r4, #21
 801074c:	428f      	cmp	r7, r1
 801074e:	bf38      	it	cc
 8010750:	2204      	movcc	r2, #4
 8010752:	9201      	str	r2, [sp, #4]
 8010754:	9a02      	ldr	r2, [sp, #8]
 8010756:	9303      	str	r3, [sp, #12]
 8010758:	429a      	cmp	r2, r3
 801075a:	d80c      	bhi.n	8010776 <__multiply+0x9e>
 801075c:	2e00      	cmp	r6, #0
 801075e:	dd03      	ble.n	8010768 <__multiply+0x90>
 8010760:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8010764:	2b00      	cmp	r3, #0
 8010766:	d05a      	beq.n	801081e <__multiply+0x146>
 8010768:	6106      	str	r6, [r0, #16]
 801076a:	b005      	add	sp, #20
 801076c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010770:	f843 2b04 	str.w	r2, [r3], #4
 8010774:	e7d8      	b.n	8010728 <__multiply+0x50>
 8010776:	f8b3 a000 	ldrh.w	sl, [r3]
 801077a:	f1ba 0f00 	cmp.w	sl, #0
 801077e:	d024      	beq.n	80107ca <__multiply+0xf2>
 8010780:	f104 0e14 	add.w	lr, r4, #20
 8010784:	46a9      	mov	r9, r5
 8010786:	f04f 0c00 	mov.w	ip, #0
 801078a:	f85e 2b04 	ldr.w	r2, [lr], #4
 801078e:	f8d9 1000 	ldr.w	r1, [r9]
 8010792:	fa1f fb82 	uxth.w	fp, r2
 8010796:	b289      	uxth	r1, r1
 8010798:	fb0a 110b 	mla	r1, sl, fp, r1
 801079c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80107a0:	f8d9 2000 	ldr.w	r2, [r9]
 80107a4:	4461      	add	r1, ip
 80107a6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80107aa:	fb0a c20b 	mla	r2, sl, fp, ip
 80107ae:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80107b2:	b289      	uxth	r1, r1
 80107b4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80107b8:	4577      	cmp	r7, lr
 80107ba:	f849 1b04 	str.w	r1, [r9], #4
 80107be:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80107c2:	d8e2      	bhi.n	801078a <__multiply+0xb2>
 80107c4:	9a01      	ldr	r2, [sp, #4]
 80107c6:	f845 c002 	str.w	ip, [r5, r2]
 80107ca:	9a03      	ldr	r2, [sp, #12]
 80107cc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80107d0:	3304      	adds	r3, #4
 80107d2:	f1b9 0f00 	cmp.w	r9, #0
 80107d6:	d020      	beq.n	801081a <__multiply+0x142>
 80107d8:	6829      	ldr	r1, [r5, #0]
 80107da:	f104 0c14 	add.w	ip, r4, #20
 80107de:	46ae      	mov	lr, r5
 80107e0:	f04f 0a00 	mov.w	sl, #0
 80107e4:	f8bc b000 	ldrh.w	fp, [ip]
 80107e8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80107ec:	fb09 220b 	mla	r2, r9, fp, r2
 80107f0:	4492      	add	sl, r2
 80107f2:	b289      	uxth	r1, r1
 80107f4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80107f8:	f84e 1b04 	str.w	r1, [lr], #4
 80107fc:	f85c 2b04 	ldr.w	r2, [ip], #4
 8010800:	f8be 1000 	ldrh.w	r1, [lr]
 8010804:	0c12      	lsrs	r2, r2, #16
 8010806:	fb09 1102 	mla	r1, r9, r2, r1
 801080a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 801080e:	4567      	cmp	r7, ip
 8010810:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8010814:	d8e6      	bhi.n	80107e4 <__multiply+0x10c>
 8010816:	9a01      	ldr	r2, [sp, #4]
 8010818:	50a9      	str	r1, [r5, r2]
 801081a:	3504      	adds	r5, #4
 801081c:	e79a      	b.n	8010754 <__multiply+0x7c>
 801081e:	3e01      	subs	r6, #1
 8010820:	e79c      	b.n	801075c <__multiply+0x84>
 8010822:	bf00      	nop
 8010824:	0801449f 	.word	0x0801449f
 8010828:	080144b0 	.word	0x080144b0

0801082c <__pow5mult>:
 801082c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010830:	4615      	mov	r5, r2
 8010832:	f012 0203 	ands.w	r2, r2, #3
 8010836:	4606      	mov	r6, r0
 8010838:	460f      	mov	r7, r1
 801083a:	d007      	beq.n	801084c <__pow5mult+0x20>
 801083c:	4c25      	ldr	r4, [pc, #148]	; (80108d4 <__pow5mult+0xa8>)
 801083e:	3a01      	subs	r2, #1
 8010840:	2300      	movs	r3, #0
 8010842:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010846:	f7ff fe9b 	bl	8010580 <__multadd>
 801084a:	4607      	mov	r7, r0
 801084c:	10ad      	asrs	r5, r5, #2
 801084e:	d03d      	beq.n	80108cc <__pow5mult+0xa0>
 8010850:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8010852:	b97c      	cbnz	r4, 8010874 <__pow5mult+0x48>
 8010854:	2010      	movs	r0, #16
 8010856:	f7ff fe29 	bl	80104ac <malloc>
 801085a:	4602      	mov	r2, r0
 801085c:	6270      	str	r0, [r6, #36]	; 0x24
 801085e:	b928      	cbnz	r0, 801086c <__pow5mult+0x40>
 8010860:	4b1d      	ldr	r3, [pc, #116]	; (80108d8 <__pow5mult+0xac>)
 8010862:	481e      	ldr	r0, [pc, #120]	; (80108dc <__pow5mult+0xb0>)
 8010864:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8010868:	f000 fc0e 	bl	8011088 <__assert_func>
 801086c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010870:	6004      	str	r4, [r0, #0]
 8010872:	60c4      	str	r4, [r0, #12]
 8010874:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8010878:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801087c:	b94c      	cbnz	r4, 8010892 <__pow5mult+0x66>
 801087e:	f240 2171 	movw	r1, #625	; 0x271
 8010882:	4630      	mov	r0, r6
 8010884:	f7ff ff12 	bl	80106ac <__i2b>
 8010888:	2300      	movs	r3, #0
 801088a:	f8c8 0008 	str.w	r0, [r8, #8]
 801088e:	4604      	mov	r4, r0
 8010890:	6003      	str	r3, [r0, #0]
 8010892:	f04f 0900 	mov.w	r9, #0
 8010896:	07eb      	lsls	r3, r5, #31
 8010898:	d50a      	bpl.n	80108b0 <__pow5mult+0x84>
 801089a:	4639      	mov	r1, r7
 801089c:	4622      	mov	r2, r4
 801089e:	4630      	mov	r0, r6
 80108a0:	f7ff ff1a 	bl	80106d8 <__multiply>
 80108a4:	4639      	mov	r1, r7
 80108a6:	4680      	mov	r8, r0
 80108a8:	4630      	mov	r0, r6
 80108aa:	f7ff fe47 	bl	801053c <_Bfree>
 80108ae:	4647      	mov	r7, r8
 80108b0:	106d      	asrs	r5, r5, #1
 80108b2:	d00b      	beq.n	80108cc <__pow5mult+0xa0>
 80108b4:	6820      	ldr	r0, [r4, #0]
 80108b6:	b938      	cbnz	r0, 80108c8 <__pow5mult+0x9c>
 80108b8:	4622      	mov	r2, r4
 80108ba:	4621      	mov	r1, r4
 80108bc:	4630      	mov	r0, r6
 80108be:	f7ff ff0b 	bl	80106d8 <__multiply>
 80108c2:	6020      	str	r0, [r4, #0]
 80108c4:	f8c0 9000 	str.w	r9, [r0]
 80108c8:	4604      	mov	r4, r0
 80108ca:	e7e4      	b.n	8010896 <__pow5mult+0x6a>
 80108cc:	4638      	mov	r0, r7
 80108ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80108d2:	bf00      	nop
 80108d4:	08014600 	.word	0x08014600
 80108d8:	0801442d 	.word	0x0801442d
 80108dc:	080144b0 	.word	0x080144b0

080108e0 <__lshift>:
 80108e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80108e4:	460c      	mov	r4, r1
 80108e6:	6849      	ldr	r1, [r1, #4]
 80108e8:	6923      	ldr	r3, [r4, #16]
 80108ea:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80108ee:	68a3      	ldr	r3, [r4, #8]
 80108f0:	4607      	mov	r7, r0
 80108f2:	4691      	mov	r9, r2
 80108f4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80108f8:	f108 0601 	add.w	r6, r8, #1
 80108fc:	42b3      	cmp	r3, r6
 80108fe:	db0b      	blt.n	8010918 <__lshift+0x38>
 8010900:	4638      	mov	r0, r7
 8010902:	f7ff fddb 	bl	80104bc <_Balloc>
 8010906:	4605      	mov	r5, r0
 8010908:	b948      	cbnz	r0, 801091e <__lshift+0x3e>
 801090a:	4602      	mov	r2, r0
 801090c:	4b2a      	ldr	r3, [pc, #168]	; (80109b8 <__lshift+0xd8>)
 801090e:	482b      	ldr	r0, [pc, #172]	; (80109bc <__lshift+0xdc>)
 8010910:	f240 11d9 	movw	r1, #473	; 0x1d9
 8010914:	f000 fbb8 	bl	8011088 <__assert_func>
 8010918:	3101      	adds	r1, #1
 801091a:	005b      	lsls	r3, r3, #1
 801091c:	e7ee      	b.n	80108fc <__lshift+0x1c>
 801091e:	2300      	movs	r3, #0
 8010920:	f100 0114 	add.w	r1, r0, #20
 8010924:	f100 0210 	add.w	r2, r0, #16
 8010928:	4618      	mov	r0, r3
 801092a:	4553      	cmp	r3, sl
 801092c:	db37      	blt.n	801099e <__lshift+0xbe>
 801092e:	6920      	ldr	r0, [r4, #16]
 8010930:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010934:	f104 0314 	add.w	r3, r4, #20
 8010938:	f019 091f 	ands.w	r9, r9, #31
 801093c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010940:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8010944:	d02f      	beq.n	80109a6 <__lshift+0xc6>
 8010946:	f1c9 0e20 	rsb	lr, r9, #32
 801094a:	468a      	mov	sl, r1
 801094c:	f04f 0c00 	mov.w	ip, #0
 8010950:	681a      	ldr	r2, [r3, #0]
 8010952:	fa02 f209 	lsl.w	r2, r2, r9
 8010956:	ea42 020c 	orr.w	r2, r2, ip
 801095a:	f84a 2b04 	str.w	r2, [sl], #4
 801095e:	f853 2b04 	ldr.w	r2, [r3], #4
 8010962:	4298      	cmp	r0, r3
 8010964:	fa22 fc0e 	lsr.w	ip, r2, lr
 8010968:	d8f2      	bhi.n	8010950 <__lshift+0x70>
 801096a:	1b03      	subs	r3, r0, r4
 801096c:	3b15      	subs	r3, #21
 801096e:	f023 0303 	bic.w	r3, r3, #3
 8010972:	3304      	adds	r3, #4
 8010974:	f104 0215 	add.w	r2, r4, #21
 8010978:	4290      	cmp	r0, r2
 801097a:	bf38      	it	cc
 801097c:	2304      	movcc	r3, #4
 801097e:	f841 c003 	str.w	ip, [r1, r3]
 8010982:	f1bc 0f00 	cmp.w	ip, #0
 8010986:	d001      	beq.n	801098c <__lshift+0xac>
 8010988:	f108 0602 	add.w	r6, r8, #2
 801098c:	3e01      	subs	r6, #1
 801098e:	4638      	mov	r0, r7
 8010990:	612e      	str	r6, [r5, #16]
 8010992:	4621      	mov	r1, r4
 8010994:	f7ff fdd2 	bl	801053c <_Bfree>
 8010998:	4628      	mov	r0, r5
 801099a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801099e:	f842 0f04 	str.w	r0, [r2, #4]!
 80109a2:	3301      	adds	r3, #1
 80109a4:	e7c1      	b.n	801092a <__lshift+0x4a>
 80109a6:	3904      	subs	r1, #4
 80109a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80109ac:	f841 2f04 	str.w	r2, [r1, #4]!
 80109b0:	4298      	cmp	r0, r3
 80109b2:	d8f9      	bhi.n	80109a8 <__lshift+0xc8>
 80109b4:	e7ea      	b.n	801098c <__lshift+0xac>
 80109b6:	bf00      	nop
 80109b8:	0801449f 	.word	0x0801449f
 80109bc:	080144b0 	.word	0x080144b0

080109c0 <__mcmp>:
 80109c0:	b530      	push	{r4, r5, lr}
 80109c2:	6902      	ldr	r2, [r0, #16]
 80109c4:	690c      	ldr	r4, [r1, #16]
 80109c6:	1b12      	subs	r2, r2, r4
 80109c8:	d10e      	bne.n	80109e8 <__mcmp+0x28>
 80109ca:	f100 0314 	add.w	r3, r0, #20
 80109ce:	3114      	adds	r1, #20
 80109d0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80109d4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80109d8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80109dc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80109e0:	42a5      	cmp	r5, r4
 80109e2:	d003      	beq.n	80109ec <__mcmp+0x2c>
 80109e4:	d305      	bcc.n	80109f2 <__mcmp+0x32>
 80109e6:	2201      	movs	r2, #1
 80109e8:	4610      	mov	r0, r2
 80109ea:	bd30      	pop	{r4, r5, pc}
 80109ec:	4283      	cmp	r3, r0
 80109ee:	d3f3      	bcc.n	80109d8 <__mcmp+0x18>
 80109f0:	e7fa      	b.n	80109e8 <__mcmp+0x28>
 80109f2:	f04f 32ff 	mov.w	r2, #4294967295
 80109f6:	e7f7      	b.n	80109e8 <__mcmp+0x28>

080109f8 <__mdiff>:
 80109f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80109fc:	460c      	mov	r4, r1
 80109fe:	4606      	mov	r6, r0
 8010a00:	4611      	mov	r1, r2
 8010a02:	4620      	mov	r0, r4
 8010a04:	4690      	mov	r8, r2
 8010a06:	f7ff ffdb 	bl	80109c0 <__mcmp>
 8010a0a:	1e05      	subs	r5, r0, #0
 8010a0c:	d110      	bne.n	8010a30 <__mdiff+0x38>
 8010a0e:	4629      	mov	r1, r5
 8010a10:	4630      	mov	r0, r6
 8010a12:	f7ff fd53 	bl	80104bc <_Balloc>
 8010a16:	b930      	cbnz	r0, 8010a26 <__mdiff+0x2e>
 8010a18:	4b3a      	ldr	r3, [pc, #232]	; (8010b04 <__mdiff+0x10c>)
 8010a1a:	4602      	mov	r2, r0
 8010a1c:	f240 2132 	movw	r1, #562	; 0x232
 8010a20:	4839      	ldr	r0, [pc, #228]	; (8010b08 <__mdiff+0x110>)
 8010a22:	f000 fb31 	bl	8011088 <__assert_func>
 8010a26:	2301      	movs	r3, #1
 8010a28:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010a2c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a30:	bfa4      	itt	ge
 8010a32:	4643      	movge	r3, r8
 8010a34:	46a0      	movge	r8, r4
 8010a36:	4630      	mov	r0, r6
 8010a38:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8010a3c:	bfa6      	itte	ge
 8010a3e:	461c      	movge	r4, r3
 8010a40:	2500      	movge	r5, #0
 8010a42:	2501      	movlt	r5, #1
 8010a44:	f7ff fd3a 	bl	80104bc <_Balloc>
 8010a48:	b920      	cbnz	r0, 8010a54 <__mdiff+0x5c>
 8010a4a:	4b2e      	ldr	r3, [pc, #184]	; (8010b04 <__mdiff+0x10c>)
 8010a4c:	4602      	mov	r2, r0
 8010a4e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8010a52:	e7e5      	b.n	8010a20 <__mdiff+0x28>
 8010a54:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8010a58:	6926      	ldr	r6, [r4, #16]
 8010a5a:	60c5      	str	r5, [r0, #12]
 8010a5c:	f104 0914 	add.w	r9, r4, #20
 8010a60:	f108 0514 	add.w	r5, r8, #20
 8010a64:	f100 0e14 	add.w	lr, r0, #20
 8010a68:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8010a6c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8010a70:	f108 0210 	add.w	r2, r8, #16
 8010a74:	46f2      	mov	sl, lr
 8010a76:	2100      	movs	r1, #0
 8010a78:	f859 3b04 	ldr.w	r3, [r9], #4
 8010a7c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8010a80:	fa1f f883 	uxth.w	r8, r3
 8010a84:	fa11 f18b 	uxtah	r1, r1, fp
 8010a88:	0c1b      	lsrs	r3, r3, #16
 8010a8a:	eba1 0808 	sub.w	r8, r1, r8
 8010a8e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8010a92:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8010a96:	fa1f f888 	uxth.w	r8, r8
 8010a9a:	1419      	asrs	r1, r3, #16
 8010a9c:	454e      	cmp	r6, r9
 8010a9e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8010aa2:	f84a 3b04 	str.w	r3, [sl], #4
 8010aa6:	d8e7      	bhi.n	8010a78 <__mdiff+0x80>
 8010aa8:	1b33      	subs	r3, r6, r4
 8010aaa:	3b15      	subs	r3, #21
 8010aac:	f023 0303 	bic.w	r3, r3, #3
 8010ab0:	3304      	adds	r3, #4
 8010ab2:	3415      	adds	r4, #21
 8010ab4:	42a6      	cmp	r6, r4
 8010ab6:	bf38      	it	cc
 8010ab8:	2304      	movcc	r3, #4
 8010aba:	441d      	add	r5, r3
 8010abc:	4473      	add	r3, lr
 8010abe:	469e      	mov	lr, r3
 8010ac0:	462e      	mov	r6, r5
 8010ac2:	4566      	cmp	r6, ip
 8010ac4:	d30e      	bcc.n	8010ae4 <__mdiff+0xec>
 8010ac6:	f10c 0203 	add.w	r2, ip, #3
 8010aca:	1b52      	subs	r2, r2, r5
 8010acc:	f022 0203 	bic.w	r2, r2, #3
 8010ad0:	3d03      	subs	r5, #3
 8010ad2:	45ac      	cmp	ip, r5
 8010ad4:	bf38      	it	cc
 8010ad6:	2200      	movcc	r2, #0
 8010ad8:	441a      	add	r2, r3
 8010ada:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8010ade:	b17b      	cbz	r3, 8010b00 <__mdiff+0x108>
 8010ae0:	6107      	str	r7, [r0, #16]
 8010ae2:	e7a3      	b.n	8010a2c <__mdiff+0x34>
 8010ae4:	f856 8b04 	ldr.w	r8, [r6], #4
 8010ae8:	fa11 f288 	uxtah	r2, r1, r8
 8010aec:	1414      	asrs	r4, r2, #16
 8010aee:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8010af2:	b292      	uxth	r2, r2
 8010af4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8010af8:	f84e 2b04 	str.w	r2, [lr], #4
 8010afc:	1421      	asrs	r1, r4, #16
 8010afe:	e7e0      	b.n	8010ac2 <__mdiff+0xca>
 8010b00:	3f01      	subs	r7, #1
 8010b02:	e7ea      	b.n	8010ada <__mdiff+0xe2>
 8010b04:	0801449f 	.word	0x0801449f
 8010b08:	080144b0 	.word	0x080144b0

08010b0c <__d2b>:
 8010b0c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010b10:	4689      	mov	r9, r1
 8010b12:	2101      	movs	r1, #1
 8010b14:	ec57 6b10 	vmov	r6, r7, d0
 8010b18:	4690      	mov	r8, r2
 8010b1a:	f7ff fccf 	bl	80104bc <_Balloc>
 8010b1e:	4604      	mov	r4, r0
 8010b20:	b930      	cbnz	r0, 8010b30 <__d2b+0x24>
 8010b22:	4602      	mov	r2, r0
 8010b24:	4b25      	ldr	r3, [pc, #148]	; (8010bbc <__d2b+0xb0>)
 8010b26:	4826      	ldr	r0, [pc, #152]	; (8010bc0 <__d2b+0xb4>)
 8010b28:	f240 310a 	movw	r1, #778	; 0x30a
 8010b2c:	f000 faac 	bl	8011088 <__assert_func>
 8010b30:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8010b34:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8010b38:	bb35      	cbnz	r5, 8010b88 <__d2b+0x7c>
 8010b3a:	2e00      	cmp	r6, #0
 8010b3c:	9301      	str	r3, [sp, #4]
 8010b3e:	d028      	beq.n	8010b92 <__d2b+0x86>
 8010b40:	4668      	mov	r0, sp
 8010b42:	9600      	str	r6, [sp, #0]
 8010b44:	f7ff fd82 	bl	801064c <__lo0bits>
 8010b48:	9900      	ldr	r1, [sp, #0]
 8010b4a:	b300      	cbz	r0, 8010b8e <__d2b+0x82>
 8010b4c:	9a01      	ldr	r2, [sp, #4]
 8010b4e:	f1c0 0320 	rsb	r3, r0, #32
 8010b52:	fa02 f303 	lsl.w	r3, r2, r3
 8010b56:	430b      	orrs	r3, r1
 8010b58:	40c2      	lsrs	r2, r0
 8010b5a:	6163      	str	r3, [r4, #20]
 8010b5c:	9201      	str	r2, [sp, #4]
 8010b5e:	9b01      	ldr	r3, [sp, #4]
 8010b60:	61a3      	str	r3, [r4, #24]
 8010b62:	2b00      	cmp	r3, #0
 8010b64:	bf14      	ite	ne
 8010b66:	2202      	movne	r2, #2
 8010b68:	2201      	moveq	r2, #1
 8010b6a:	6122      	str	r2, [r4, #16]
 8010b6c:	b1d5      	cbz	r5, 8010ba4 <__d2b+0x98>
 8010b6e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8010b72:	4405      	add	r5, r0
 8010b74:	f8c9 5000 	str.w	r5, [r9]
 8010b78:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8010b7c:	f8c8 0000 	str.w	r0, [r8]
 8010b80:	4620      	mov	r0, r4
 8010b82:	b003      	add	sp, #12
 8010b84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010b88:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010b8c:	e7d5      	b.n	8010b3a <__d2b+0x2e>
 8010b8e:	6161      	str	r1, [r4, #20]
 8010b90:	e7e5      	b.n	8010b5e <__d2b+0x52>
 8010b92:	a801      	add	r0, sp, #4
 8010b94:	f7ff fd5a 	bl	801064c <__lo0bits>
 8010b98:	9b01      	ldr	r3, [sp, #4]
 8010b9a:	6163      	str	r3, [r4, #20]
 8010b9c:	2201      	movs	r2, #1
 8010b9e:	6122      	str	r2, [r4, #16]
 8010ba0:	3020      	adds	r0, #32
 8010ba2:	e7e3      	b.n	8010b6c <__d2b+0x60>
 8010ba4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010ba8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8010bac:	f8c9 0000 	str.w	r0, [r9]
 8010bb0:	6918      	ldr	r0, [r3, #16]
 8010bb2:	f7ff fd2b 	bl	801060c <__hi0bits>
 8010bb6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8010bba:	e7df      	b.n	8010b7c <__d2b+0x70>
 8010bbc:	0801449f 	.word	0x0801449f
 8010bc0:	080144b0 	.word	0x080144b0

08010bc4 <_calloc_r>:
 8010bc4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010bc6:	fba1 2402 	umull	r2, r4, r1, r2
 8010bca:	b94c      	cbnz	r4, 8010be0 <_calloc_r+0x1c>
 8010bcc:	4611      	mov	r1, r2
 8010bce:	9201      	str	r2, [sp, #4]
 8010bd0:	f000 f87a 	bl	8010cc8 <_malloc_r>
 8010bd4:	9a01      	ldr	r2, [sp, #4]
 8010bd6:	4605      	mov	r5, r0
 8010bd8:	b930      	cbnz	r0, 8010be8 <_calloc_r+0x24>
 8010bda:	4628      	mov	r0, r5
 8010bdc:	b003      	add	sp, #12
 8010bde:	bd30      	pop	{r4, r5, pc}
 8010be0:	220c      	movs	r2, #12
 8010be2:	6002      	str	r2, [r0, #0]
 8010be4:	2500      	movs	r5, #0
 8010be6:	e7f8      	b.n	8010bda <_calloc_r+0x16>
 8010be8:	4621      	mov	r1, r4
 8010bea:	f7fe f94f 	bl	800ee8c <memset>
 8010bee:	e7f4      	b.n	8010bda <_calloc_r+0x16>

08010bf0 <_free_r>:
 8010bf0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010bf2:	2900      	cmp	r1, #0
 8010bf4:	d044      	beq.n	8010c80 <_free_r+0x90>
 8010bf6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010bfa:	9001      	str	r0, [sp, #4]
 8010bfc:	2b00      	cmp	r3, #0
 8010bfe:	f1a1 0404 	sub.w	r4, r1, #4
 8010c02:	bfb8      	it	lt
 8010c04:	18e4      	addlt	r4, r4, r3
 8010c06:	f000 fa9b 	bl	8011140 <__malloc_lock>
 8010c0a:	4a1e      	ldr	r2, [pc, #120]	; (8010c84 <_free_r+0x94>)
 8010c0c:	9801      	ldr	r0, [sp, #4]
 8010c0e:	6813      	ldr	r3, [r2, #0]
 8010c10:	b933      	cbnz	r3, 8010c20 <_free_r+0x30>
 8010c12:	6063      	str	r3, [r4, #4]
 8010c14:	6014      	str	r4, [r2, #0]
 8010c16:	b003      	add	sp, #12
 8010c18:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010c1c:	f000 ba96 	b.w	801114c <__malloc_unlock>
 8010c20:	42a3      	cmp	r3, r4
 8010c22:	d908      	bls.n	8010c36 <_free_r+0x46>
 8010c24:	6825      	ldr	r5, [r4, #0]
 8010c26:	1961      	adds	r1, r4, r5
 8010c28:	428b      	cmp	r3, r1
 8010c2a:	bf01      	itttt	eq
 8010c2c:	6819      	ldreq	r1, [r3, #0]
 8010c2e:	685b      	ldreq	r3, [r3, #4]
 8010c30:	1949      	addeq	r1, r1, r5
 8010c32:	6021      	streq	r1, [r4, #0]
 8010c34:	e7ed      	b.n	8010c12 <_free_r+0x22>
 8010c36:	461a      	mov	r2, r3
 8010c38:	685b      	ldr	r3, [r3, #4]
 8010c3a:	b10b      	cbz	r3, 8010c40 <_free_r+0x50>
 8010c3c:	42a3      	cmp	r3, r4
 8010c3e:	d9fa      	bls.n	8010c36 <_free_r+0x46>
 8010c40:	6811      	ldr	r1, [r2, #0]
 8010c42:	1855      	adds	r5, r2, r1
 8010c44:	42a5      	cmp	r5, r4
 8010c46:	d10b      	bne.n	8010c60 <_free_r+0x70>
 8010c48:	6824      	ldr	r4, [r4, #0]
 8010c4a:	4421      	add	r1, r4
 8010c4c:	1854      	adds	r4, r2, r1
 8010c4e:	42a3      	cmp	r3, r4
 8010c50:	6011      	str	r1, [r2, #0]
 8010c52:	d1e0      	bne.n	8010c16 <_free_r+0x26>
 8010c54:	681c      	ldr	r4, [r3, #0]
 8010c56:	685b      	ldr	r3, [r3, #4]
 8010c58:	6053      	str	r3, [r2, #4]
 8010c5a:	4421      	add	r1, r4
 8010c5c:	6011      	str	r1, [r2, #0]
 8010c5e:	e7da      	b.n	8010c16 <_free_r+0x26>
 8010c60:	d902      	bls.n	8010c68 <_free_r+0x78>
 8010c62:	230c      	movs	r3, #12
 8010c64:	6003      	str	r3, [r0, #0]
 8010c66:	e7d6      	b.n	8010c16 <_free_r+0x26>
 8010c68:	6825      	ldr	r5, [r4, #0]
 8010c6a:	1961      	adds	r1, r4, r5
 8010c6c:	428b      	cmp	r3, r1
 8010c6e:	bf04      	itt	eq
 8010c70:	6819      	ldreq	r1, [r3, #0]
 8010c72:	685b      	ldreq	r3, [r3, #4]
 8010c74:	6063      	str	r3, [r4, #4]
 8010c76:	bf04      	itt	eq
 8010c78:	1949      	addeq	r1, r1, r5
 8010c7a:	6021      	streq	r1, [r4, #0]
 8010c7c:	6054      	str	r4, [r2, #4]
 8010c7e:	e7ca      	b.n	8010c16 <_free_r+0x26>
 8010c80:	b003      	add	sp, #12
 8010c82:	bd30      	pop	{r4, r5, pc}
 8010c84:	20004930 	.word	0x20004930

08010c88 <sbrk_aligned>:
 8010c88:	b570      	push	{r4, r5, r6, lr}
 8010c8a:	4e0e      	ldr	r6, [pc, #56]	; (8010cc4 <sbrk_aligned+0x3c>)
 8010c8c:	460c      	mov	r4, r1
 8010c8e:	6831      	ldr	r1, [r6, #0]
 8010c90:	4605      	mov	r5, r0
 8010c92:	b911      	cbnz	r1, 8010c9a <sbrk_aligned+0x12>
 8010c94:	f000 f9e8 	bl	8011068 <_sbrk_r>
 8010c98:	6030      	str	r0, [r6, #0]
 8010c9a:	4621      	mov	r1, r4
 8010c9c:	4628      	mov	r0, r5
 8010c9e:	f000 f9e3 	bl	8011068 <_sbrk_r>
 8010ca2:	1c43      	adds	r3, r0, #1
 8010ca4:	d00a      	beq.n	8010cbc <sbrk_aligned+0x34>
 8010ca6:	1cc4      	adds	r4, r0, #3
 8010ca8:	f024 0403 	bic.w	r4, r4, #3
 8010cac:	42a0      	cmp	r0, r4
 8010cae:	d007      	beq.n	8010cc0 <sbrk_aligned+0x38>
 8010cb0:	1a21      	subs	r1, r4, r0
 8010cb2:	4628      	mov	r0, r5
 8010cb4:	f000 f9d8 	bl	8011068 <_sbrk_r>
 8010cb8:	3001      	adds	r0, #1
 8010cba:	d101      	bne.n	8010cc0 <sbrk_aligned+0x38>
 8010cbc:	f04f 34ff 	mov.w	r4, #4294967295
 8010cc0:	4620      	mov	r0, r4
 8010cc2:	bd70      	pop	{r4, r5, r6, pc}
 8010cc4:	20004934 	.word	0x20004934

08010cc8 <_malloc_r>:
 8010cc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010ccc:	1ccd      	adds	r5, r1, #3
 8010cce:	f025 0503 	bic.w	r5, r5, #3
 8010cd2:	3508      	adds	r5, #8
 8010cd4:	2d0c      	cmp	r5, #12
 8010cd6:	bf38      	it	cc
 8010cd8:	250c      	movcc	r5, #12
 8010cda:	2d00      	cmp	r5, #0
 8010cdc:	4607      	mov	r7, r0
 8010cde:	db01      	blt.n	8010ce4 <_malloc_r+0x1c>
 8010ce0:	42a9      	cmp	r1, r5
 8010ce2:	d905      	bls.n	8010cf0 <_malloc_r+0x28>
 8010ce4:	230c      	movs	r3, #12
 8010ce6:	603b      	str	r3, [r7, #0]
 8010ce8:	2600      	movs	r6, #0
 8010cea:	4630      	mov	r0, r6
 8010cec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010cf0:	4e2e      	ldr	r6, [pc, #184]	; (8010dac <_malloc_r+0xe4>)
 8010cf2:	f000 fa25 	bl	8011140 <__malloc_lock>
 8010cf6:	6833      	ldr	r3, [r6, #0]
 8010cf8:	461c      	mov	r4, r3
 8010cfa:	bb34      	cbnz	r4, 8010d4a <_malloc_r+0x82>
 8010cfc:	4629      	mov	r1, r5
 8010cfe:	4638      	mov	r0, r7
 8010d00:	f7ff ffc2 	bl	8010c88 <sbrk_aligned>
 8010d04:	1c43      	adds	r3, r0, #1
 8010d06:	4604      	mov	r4, r0
 8010d08:	d14d      	bne.n	8010da6 <_malloc_r+0xde>
 8010d0a:	6834      	ldr	r4, [r6, #0]
 8010d0c:	4626      	mov	r6, r4
 8010d0e:	2e00      	cmp	r6, #0
 8010d10:	d140      	bne.n	8010d94 <_malloc_r+0xcc>
 8010d12:	6823      	ldr	r3, [r4, #0]
 8010d14:	4631      	mov	r1, r6
 8010d16:	4638      	mov	r0, r7
 8010d18:	eb04 0803 	add.w	r8, r4, r3
 8010d1c:	f000 f9a4 	bl	8011068 <_sbrk_r>
 8010d20:	4580      	cmp	r8, r0
 8010d22:	d13a      	bne.n	8010d9a <_malloc_r+0xd2>
 8010d24:	6821      	ldr	r1, [r4, #0]
 8010d26:	3503      	adds	r5, #3
 8010d28:	1a6d      	subs	r5, r5, r1
 8010d2a:	f025 0503 	bic.w	r5, r5, #3
 8010d2e:	3508      	adds	r5, #8
 8010d30:	2d0c      	cmp	r5, #12
 8010d32:	bf38      	it	cc
 8010d34:	250c      	movcc	r5, #12
 8010d36:	4629      	mov	r1, r5
 8010d38:	4638      	mov	r0, r7
 8010d3a:	f7ff ffa5 	bl	8010c88 <sbrk_aligned>
 8010d3e:	3001      	adds	r0, #1
 8010d40:	d02b      	beq.n	8010d9a <_malloc_r+0xd2>
 8010d42:	6823      	ldr	r3, [r4, #0]
 8010d44:	442b      	add	r3, r5
 8010d46:	6023      	str	r3, [r4, #0]
 8010d48:	e00e      	b.n	8010d68 <_malloc_r+0xa0>
 8010d4a:	6822      	ldr	r2, [r4, #0]
 8010d4c:	1b52      	subs	r2, r2, r5
 8010d4e:	d41e      	bmi.n	8010d8e <_malloc_r+0xc6>
 8010d50:	2a0b      	cmp	r2, #11
 8010d52:	d916      	bls.n	8010d82 <_malloc_r+0xba>
 8010d54:	1961      	adds	r1, r4, r5
 8010d56:	42a3      	cmp	r3, r4
 8010d58:	6025      	str	r5, [r4, #0]
 8010d5a:	bf18      	it	ne
 8010d5c:	6059      	strne	r1, [r3, #4]
 8010d5e:	6863      	ldr	r3, [r4, #4]
 8010d60:	bf08      	it	eq
 8010d62:	6031      	streq	r1, [r6, #0]
 8010d64:	5162      	str	r2, [r4, r5]
 8010d66:	604b      	str	r3, [r1, #4]
 8010d68:	4638      	mov	r0, r7
 8010d6a:	f104 060b 	add.w	r6, r4, #11
 8010d6e:	f000 f9ed 	bl	801114c <__malloc_unlock>
 8010d72:	f026 0607 	bic.w	r6, r6, #7
 8010d76:	1d23      	adds	r3, r4, #4
 8010d78:	1af2      	subs	r2, r6, r3
 8010d7a:	d0b6      	beq.n	8010cea <_malloc_r+0x22>
 8010d7c:	1b9b      	subs	r3, r3, r6
 8010d7e:	50a3      	str	r3, [r4, r2]
 8010d80:	e7b3      	b.n	8010cea <_malloc_r+0x22>
 8010d82:	6862      	ldr	r2, [r4, #4]
 8010d84:	42a3      	cmp	r3, r4
 8010d86:	bf0c      	ite	eq
 8010d88:	6032      	streq	r2, [r6, #0]
 8010d8a:	605a      	strne	r2, [r3, #4]
 8010d8c:	e7ec      	b.n	8010d68 <_malloc_r+0xa0>
 8010d8e:	4623      	mov	r3, r4
 8010d90:	6864      	ldr	r4, [r4, #4]
 8010d92:	e7b2      	b.n	8010cfa <_malloc_r+0x32>
 8010d94:	4634      	mov	r4, r6
 8010d96:	6876      	ldr	r6, [r6, #4]
 8010d98:	e7b9      	b.n	8010d0e <_malloc_r+0x46>
 8010d9a:	230c      	movs	r3, #12
 8010d9c:	603b      	str	r3, [r7, #0]
 8010d9e:	4638      	mov	r0, r7
 8010da0:	f000 f9d4 	bl	801114c <__malloc_unlock>
 8010da4:	e7a1      	b.n	8010cea <_malloc_r+0x22>
 8010da6:	6025      	str	r5, [r4, #0]
 8010da8:	e7de      	b.n	8010d68 <_malloc_r+0xa0>
 8010daa:	bf00      	nop
 8010dac:	20004930 	.word	0x20004930

08010db0 <__ssputs_r>:
 8010db0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010db4:	688e      	ldr	r6, [r1, #8]
 8010db6:	429e      	cmp	r6, r3
 8010db8:	4682      	mov	sl, r0
 8010dba:	460c      	mov	r4, r1
 8010dbc:	4690      	mov	r8, r2
 8010dbe:	461f      	mov	r7, r3
 8010dc0:	d838      	bhi.n	8010e34 <__ssputs_r+0x84>
 8010dc2:	898a      	ldrh	r2, [r1, #12]
 8010dc4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010dc8:	d032      	beq.n	8010e30 <__ssputs_r+0x80>
 8010dca:	6825      	ldr	r5, [r4, #0]
 8010dcc:	6909      	ldr	r1, [r1, #16]
 8010dce:	eba5 0901 	sub.w	r9, r5, r1
 8010dd2:	6965      	ldr	r5, [r4, #20]
 8010dd4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010dd8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010ddc:	3301      	adds	r3, #1
 8010dde:	444b      	add	r3, r9
 8010de0:	106d      	asrs	r5, r5, #1
 8010de2:	429d      	cmp	r5, r3
 8010de4:	bf38      	it	cc
 8010de6:	461d      	movcc	r5, r3
 8010de8:	0553      	lsls	r3, r2, #21
 8010dea:	d531      	bpl.n	8010e50 <__ssputs_r+0xa0>
 8010dec:	4629      	mov	r1, r5
 8010dee:	f7ff ff6b 	bl	8010cc8 <_malloc_r>
 8010df2:	4606      	mov	r6, r0
 8010df4:	b950      	cbnz	r0, 8010e0c <__ssputs_r+0x5c>
 8010df6:	230c      	movs	r3, #12
 8010df8:	f8ca 3000 	str.w	r3, [sl]
 8010dfc:	89a3      	ldrh	r3, [r4, #12]
 8010dfe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010e02:	81a3      	strh	r3, [r4, #12]
 8010e04:	f04f 30ff 	mov.w	r0, #4294967295
 8010e08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010e0c:	6921      	ldr	r1, [r4, #16]
 8010e0e:	464a      	mov	r2, r9
 8010e10:	f7fe f82e 	bl	800ee70 <memcpy>
 8010e14:	89a3      	ldrh	r3, [r4, #12]
 8010e16:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010e1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010e1e:	81a3      	strh	r3, [r4, #12]
 8010e20:	6126      	str	r6, [r4, #16]
 8010e22:	6165      	str	r5, [r4, #20]
 8010e24:	444e      	add	r6, r9
 8010e26:	eba5 0509 	sub.w	r5, r5, r9
 8010e2a:	6026      	str	r6, [r4, #0]
 8010e2c:	60a5      	str	r5, [r4, #8]
 8010e2e:	463e      	mov	r6, r7
 8010e30:	42be      	cmp	r6, r7
 8010e32:	d900      	bls.n	8010e36 <__ssputs_r+0x86>
 8010e34:	463e      	mov	r6, r7
 8010e36:	6820      	ldr	r0, [r4, #0]
 8010e38:	4632      	mov	r2, r6
 8010e3a:	4641      	mov	r1, r8
 8010e3c:	f000 f966 	bl	801110c <memmove>
 8010e40:	68a3      	ldr	r3, [r4, #8]
 8010e42:	1b9b      	subs	r3, r3, r6
 8010e44:	60a3      	str	r3, [r4, #8]
 8010e46:	6823      	ldr	r3, [r4, #0]
 8010e48:	4433      	add	r3, r6
 8010e4a:	6023      	str	r3, [r4, #0]
 8010e4c:	2000      	movs	r0, #0
 8010e4e:	e7db      	b.n	8010e08 <__ssputs_r+0x58>
 8010e50:	462a      	mov	r2, r5
 8010e52:	f000 f981 	bl	8011158 <_realloc_r>
 8010e56:	4606      	mov	r6, r0
 8010e58:	2800      	cmp	r0, #0
 8010e5a:	d1e1      	bne.n	8010e20 <__ssputs_r+0x70>
 8010e5c:	6921      	ldr	r1, [r4, #16]
 8010e5e:	4650      	mov	r0, sl
 8010e60:	f7ff fec6 	bl	8010bf0 <_free_r>
 8010e64:	e7c7      	b.n	8010df6 <__ssputs_r+0x46>
	...

08010e68 <_svfiprintf_r>:
 8010e68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e6c:	4698      	mov	r8, r3
 8010e6e:	898b      	ldrh	r3, [r1, #12]
 8010e70:	061b      	lsls	r3, r3, #24
 8010e72:	b09d      	sub	sp, #116	; 0x74
 8010e74:	4607      	mov	r7, r0
 8010e76:	460d      	mov	r5, r1
 8010e78:	4614      	mov	r4, r2
 8010e7a:	d50e      	bpl.n	8010e9a <_svfiprintf_r+0x32>
 8010e7c:	690b      	ldr	r3, [r1, #16]
 8010e7e:	b963      	cbnz	r3, 8010e9a <_svfiprintf_r+0x32>
 8010e80:	2140      	movs	r1, #64	; 0x40
 8010e82:	f7ff ff21 	bl	8010cc8 <_malloc_r>
 8010e86:	6028      	str	r0, [r5, #0]
 8010e88:	6128      	str	r0, [r5, #16]
 8010e8a:	b920      	cbnz	r0, 8010e96 <_svfiprintf_r+0x2e>
 8010e8c:	230c      	movs	r3, #12
 8010e8e:	603b      	str	r3, [r7, #0]
 8010e90:	f04f 30ff 	mov.w	r0, #4294967295
 8010e94:	e0d1      	b.n	801103a <_svfiprintf_r+0x1d2>
 8010e96:	2340      	movs	r3, #64	; 0x40
 8010e98:	616b      	str	r3, [r5, #20]
 8010e9a:	2300      	movs	r3, #0
 8010e9c:	9309      	str	r3, [sp, #36]	; 0x24
 8010e9e:	2320      	movs	r3, #32
 8010ea0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010ea4:	f8cd 800c 	str.w	r8, [sp, #12]
 8010ea8:	2330      	movs	r3, #48	; 0x30
 8010eaa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8011054 <_svfiprintf_r+0x1ec>
 8010eae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010eb2:	f04f 0901 	mov.w	r9, #1
 8010eb6:	4623      	mov	r3, r4
 8010eb8:	469a      	mov	sl, r3
 8010eba:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010ebe:	b10a      	cbz	r2, 8010ec4 <_svfiprintf_r+0x5c>
 8010ec0:	2a25      	cmp	r2, #37	; 0x25
 8010ec2:	d1f9      	bne.n	8010eb8 <_svfiprintf_r+0x50>
 8010ec4:	ebba 0b04 	subs.w	fp, sl, r4
 8010ec8:	d00b      	beq.n	8010ee2 <_svfiprintf_r+0x7a>
 8010eca:	465b      	mov	r3, fp
 8010ecc:	4622      	mov	r2, r4
 8010ece:	4629      	mov	r1, r5
 8010ed0:	4638      	mov	r0, r7
 8010ed2:	f7ff ff6d 	bl	8010db0 <__ssputs_r>
 8010ed6:	3001      	adds	r0, #1
 8010ed8:	f000 80aa 	beq.w	8011030 <_svfiprintf_r+0x1c8>
 8010edc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010ede:	445a      	add	r2, fp
 8010ee0:	9209      	str	r2, [sp, #36]	; 0x24
 8010ee2:	f89a 3000 	ldrb.w	r3, [sl]
 8010ee6:	2b00      	cmp	r3, #0
 8010ee8:	f000 80a2 	beq.w	8011030 <_svfiprintf_r+0x1c8>
 8010eec:	2300      	movs	r3, #0
 8010eee:	f04f 32ff 	mov.w	r2, #4294967295
 8010ef2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010ef6:	f10a 0a01 	add.w	sl, sl, #1
 8010efa:	9304      	str	r3, [sp, #16]
 8010efc:	9307      	str	r3, [sp, #28]
 8010efe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010f02:	931a      	str	r3, [sp, #104]	; 0x68
 8010f04:	4654      	mov	r4, sl
 8010f06:	2205      	movs	r2, #5
 8010f08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010f0c:	4851      	ldr	r0, [pc, #324]	; (8011054 <_svfiprintf_r+0x1ec>)
 8010f0e:	f7ef f967 	bl	80001e0 <memchr>
 8010f12:	9a04      	ldr	r2, [sp, #16]
 8010f14:	b9d8      	cbnz	r0, 8010f4e <_svfiprintf_r+0xe6>
 8010f16:	06d0      	lsls	r0, r2, #27
 8010f18:	bf44      	itt	mi
 8010f1a:	2320      	movmi	r3, #32
 8010f1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010f20:	0711      	lsls	r1, r2, #28
 8010f22:	bf44      	itt	mi
 8010f24:	232b      	movmi	r3, #43	; 0x2b
 8010f26:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010f2a:	f89a 3000 	ldrb.w	r3, [sl]
 8010f2e:	2b2a      	cmp	r3, #42	; 0x2a
 8010f30:	d015      	beq.n	8010f5e <_svfiprintf_r+0xf6>
 8010f32:	9a07      	ldr	r2, [sp, #28]
 8010f34:	4654      	mov	r4, sl
 8010f36:	2000      	movs	r0, #0
 8010f38:	f04f 0c0a 	mov.w	ip, #10
 8010f3c:	4621      	mov	r1, r4
 8010f3e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010f42:	3b30      	subs	r3, #48	; 0x30
 8010f44:	2b09      	cmp	r3, #9
 8010f46:	d94e      	bls.n	8010fe6 <_svfiprintf_r+0x17e>
 8010f48:	b1b0      	cbz	r0, 8010f78 <_svfiprintf_r+0x110>
 8010f4a:	9207      	str	r2, [sp, #28]
 8010f4c:	e014      	b.n	8010f78 <_svfiprintf_r+0x110>
 8010f4e:	eba0 0308 	sub.w	r3, r0, r8
 8010f52:	fa09 f303 	lsl.w	r3, r9, r3
 8010f56:	4313      	orrs	r3, r2
 8010f58:	9304      	str	r3, [sp, #16]
 8010f5a:	46a2      	mov	sl, r4
 8010f5c:	e7d2      	b.n	8010f04 <_svfiprintf_r+0x9c>
 8010f5e:	9b03      	ldr	r3, [sp, #12]
 8010f60:	1d19      	adds	r1, r3, #4
 8010f62:	681b      	ldr	r3, [r3, #0]
 8010f64:	9103      	str	r1, [sp, #12]
 8010f66:	2b00      	cmp	r3, #0
 8010f68:	bfbb      	ittet	lt
 8010f6a:	425b      	neglt	r3, r3
 8010f6c:	f042 0202 	orrlt.w	r2, r2, #2
 8010f70:	9307      	strge	r3, [sp, #28]
 8010f72:	9307      	strlt	r3, [sp, #28]
 8010f74:	bfb8      	it	lt
 8010f76:	9204      	strlt	r2, [sp, #16]
 8010f78:	7823      	ldrb	r3, [r4, #0]
 8010f7a:	2b2e      	cmp	r3, #46	; 0x2e
 8010f7c:	d10c      	bne.n	8010f98 <_svfiprintf_r+0x130>
 8010f7e:	7863      	ldrb	r3, [r4, #1]
 8010f80:	2b2a      	cmp	r3, #42	; 0x2a
 8010f82:	d135      	bne.n	8010ff0 <_svfiprintf_r+0x188>
 8010f84:	9b03      	ldr	r3, [sp, #12]
 8010f86:	1d1a      	adds	r2, r3, #4
 8010f88:	681b      	ldr	r3, [r3, #0]
 8010f8a:	9203      	str	r2, [sp, #12]
 8010f8c:	2b00      	cmp	r3, #0
 8010f8e:	bfb8      	it	lt
 8010f90:	f04f 33ff 	movlt.w	r3, #4294967295
 8010f94:	3402      	adds	r4, #2
 8010f96:	9305      	str	r3, [sp, #20]
 8010f98:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8011064 <_svfiprintf_r+0x1fc>
 8010f9c:	7821      	ldrb	r1, [r4, #0]
 8010f9e:	2203      	movs	r2, #3
 8010fa0:	4650      	mov	r0, sl
 8010fa2:	f7ef f91d 	bl	80001e0 <memchr>
 8010fa6:	b140      	cbz	r0, 8010fba <_svfiprintf_r+0x152>
 8010fa8:	2340      	movs	r3, #64	; 0x40
 8010faa:	eba0 000a 	sub.w	r0, r0, sl
 8010fae:	fa03 f000 	lsl.w	r0, r3, r0
 8010fb2:	9b04      	ldr	r3, [sp, #16]
 8010fb4:	4303      	orrs	r3, r0
 8010fb6:	3401      	adds	r4, #1
 8010fb8:	9304      	str	r3, [sp, #16]
 8010fba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010fbe:	4826      	ldr	r0, [pc, #152]	; (8011058 <_svfiprintf_r+0x1f0>)
 8010fc0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010fc4:	2206      	movs	r2, #6
 8010fc6:	f7ef f90b 	bl	80001e0 <memchr>
 8010fca:	2800      	cmp	r0, #0
 8010fcc:	d038      	beq.n	8011040 <_svfiprintf_r+0x1d8>
 8010fce:	4b23      	ldr	r3, [pc, #140]	; (801105c <_svfiprintf_r+0x1f4>)
 8010fd0:	bb1b      	cbnz	r3, 801101a <_svfiprintf_r+0x1b2>
 8010fd2:	9b03      	ldr	r3, [sp, #12]
 8010fd4:	3307      	adds	r3, #7
 8010fd6:	f023 0307 	bic.w	r3, r3, #7
 8010fda:	3308      	adds	r3, #8
 8010fdc:	9303      	str	r3, [sp, #12]
 8010fde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010fe0:	4433      	add	r3, r6
 8010fe2:	9309      	str	r3, [sp, #36]	; 0x24
 8010fe4:	e767      	b.n	8010eb6 <_svfiprintf_r+0x4e>
 8010fe6:	fb0c 3202 	mla	r2, ip, r2, r3
 8010fea:	460c      	mov	r4, r1
 8010fec:	2001      	movs	r0, #1
 8010fee:	e7a5      	b.n	8010f3c <_svfiprintf_r+0xd4>
 8010ff0:	2300      	movs	r3, #0
 8010ff2:	3401      	adds	r4, #1
 8010ff4:	9305      	str	r3, [sp, #20]
 8010ff6:	4619      	mov	r1, r3
 8010ff8:	f04f 0c0a 	mov.w	ip, #10
 8010ffc:	4620      	mov	r0, r4
 8010ffe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011002:	3a30      	subs	r2, #48	; 0x30
 8011004:	2a09      	cmp	r2, #9
 8011006:	d903      	bls.n	8011010 <_svfiprintf_r+0x1a8>
 8011008:	2b00      	cmp	r3, #0
 801100a:	d0c5      	beq.n	8010f98 <_svfiprintf_r+0x130>
 801100c:	9105      	str	r1, [sp, #20]
 801100e:	e7c3      	b.n	8010f98 <_svfiprintf_r+0x130>
 8011010:	fb0c 2101 	mla	r1, ip, r1, r2
 8011014:	4604      	mov	r4, r0
 8011016:	2301      	movs	r3, #1
 8011018:	e7f0      	b.n	8010ffc <_svfiprintf_r+0x194>
 801101a:	ab03      	add	r3, sp, #12
 801101c:	9300      	str	r3, [sp, #0]
 801101e:	462a      	mov	r2, r5
 8011020:	4b0f      	ldr	r3, [pc, #60]	; (8011060 <_svfiprintf_r+0x1f8>)
 8011022:	a904      	add	r1, sp, #16
 8011024:	4638      	mov	r0, r7
 8011026:	f7fd ffd9 	bl	800efdc <_printf_float>
 801102a:	1c42      	adds	r2, r0, #1
 801102c:	4606      	mov	r6, r0
 801102e:	d1d6      	bne.n	8010fde <_svfiprintf_r+0x176>
 8011030:	89ab      	ldrh	r3, [r5, #12]
 8011032:	065b      	lsls	r3, r3, #25
 8011034:	f53f af2c 	bmi.w	8010e90 <_svfiprintf_r+0x28>
 8011038:	9809      	ldr	r0, [sp, #36]	; 0x24
 801103a:	b01d      	add	sp, #116	; 0x74
 801103c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011040:	ab03      	add	r3, sp, #12
 8011042:	9300      	str	r3, [sp, #0]
 8011044:	462a      	mov	r2, r5
 8011046:	4b06      	ldr	r3, [pc, #24]	; (8011060 <_svfiprintf_r+0x1f8>)
 8011048:	a904      	add	r1, sp, #16
 801104a:	4638      	mov	r0, r7
 801104c:	f7fe fa6a 	bl	800f524 <_printf_i>
 8011050:	e7eb      	b.n	801102a <_svfiprintf_r+0x1c2>
 8011052:	bf00      	nop
 8011054:	0801460c 	.word	0x0801460c
 8011058:	08014616 	.word	0x08014616
 801105c:	0800efdd 	.word	0x0800efdd
 8011060:	08010db1 	.word	0x08010db1
 8011064:	08014612 	.word	0x08014612

08011068 <_sbrk_r>:
 8011068:	b538      	push	{r3, r4, r5, lr}
 801106a:	4d06      	ldr	r5, [pc, #24]	; (8011084 <_sbrk_r+0x1c>)
 801106c:	2300      	movs	r3, #0
 801106e:	4604      	mov	r4, r0
 8011070:	4608      	mov	r0, r1
 8011072:	602b      	str	r3, [r5, #0]
 8011074:	f7f3 f976 	bl	8004364 <_sbrk>
 8011078:	1c43      	adds	r3, r0, #1
 801107a:	d102      	bne.n	8011082 <_sbrk_r+0x1a>
 801107c:	682b      	ldr	r3, [r5, #0]
 801107e:	b103      	cbz	r3, 8011082 <_sbrk_r+0x1a>
 8011080:	6023      	str	r3, [r4, #0]
 8011082:	bd38      	pop	{r3, r4, r5, pc}
 8011084:	20004938 	.word	0x20004938

08011088 <__assert_func>:
 8011088:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801108a:	4614      	mov	r4, r2
 801108c:	461a      	mov	r2, r3
 801108e:	4b09      	ldr	r3, [pc, #36]	; (80110b4 <__assert_func+0x2c>)
 8011090:	681b      	ldr	r3, [r3, #0]
 8011092:	4605      	mov	r5, r0
 8011094:	68d8      	ldr	r0, [r3, #12]
 8011096:	b14c      	cbz	r4, 80110ac <__assert_func+0x24>
 8011098:	4b07      	ldr	r3, [pc, #28]	; (80110b8 <__assert_func+0x30>)
 801109a:	9100      	str	r1, [sp, #0]
 801109c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80110a0:	4906      	ldr	r1, [pc, #24]	; (80110bc <__assert_func+0x34>)
 80110a2:	462b      	mov	r3, r5
 80110a4:	f000 f80e 	bl	80110c4 <fiprintf>
 80110a8:	f000 faac 	bl	8011604 <abort>
 80110ac:	4b04      	ldr	r3, [pc, #16]	; (80110c0 <__assert_func+0x38>)
 80110ae:	461c      	mov	r4, r3
 80110b0:	e7f3      	b.n	801109a <__assert_func+0x12>
 80110b2:	bf00      	nop
 80110b4:	2000001c 	.word	0x2000001c
 80110b8:	0801461d 	.word	0x0801461d
 80110bc:	0801462a 	.word	0x0801462a
 80110c0:	08014658 	.word	0x08014658

080110c4 <fiprintf>:
 80110c4:	b40e      	push	{r1, r2, r3}
 80110c6:	b503      	push	{r0, r1, lr}
 80110c8:	4601      	mov	r1, r0
 80110ca:	ab03      	add	r3, sp, #12
 80110cc:	4805      	ldr	r0, [pc, #20]	; (80110e4 <fiprintf+0x20>)
 80110ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80110d2:	6800      	ldr	r0, [r0, #0]
 80110d4:	9301      	str	r3, [sp, #4]
 80110d6:	f000 f897 	bl	8011208 <_vfiprintf_r>
 80110da:	b002      	add	sp, #8
 80110dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80110e0:	b003      	add	sp, #12
 80110e2:	4770      	bx	lr
 80110e4:	2000001c 	.word	0x2000001c

080110e8 <__ascii_mbtowc>:
 80110e8:	b082      	sub	sp, #8
 80110ea:	b901      	cbnz	r1, 80110ee <__ascii_mbtowc+0x6>
 80110ec:	a901      	add	r1, sp, #4
 80110ee:	b142      	cbz	r2, 8011102 <__ascii_mbtowc+0x1a>
 80110f0:	b14b      	cbz	r3, 8011106 <__ascii_mbtowc+0x1e>
 80110f2:	7813      	ldrb	r3, [r2, #0]
 80110f4:	600b      	str	r3, [r1, #0]
 80110f6:	7812      	ldrb	r2, [r2, #0]
 80110f8:	1e10      	subs	r0, r2, #0
 80110fa:	bf18      	it	ne
 80110fc:	2001      	movne	r0, #1
 80110fe:	b002      	add	sp, #8
 8011100:	4770      	bx	lr
 8011102:	4610      	mov	r0, r2
 8011104:	e7fb      	b.n	80110fe <__ascii_mbtowc+0x16>
 8011106:	f06f 0001 	mvn.w	r0, #1
 801110a:	e7f8      	b.n	80110fe <__ascii_mbtowc+0x16>

0801110c <memmove>:
 801110c:	4288      	cmp	r0, r1
 801110e:	b510      	push	{r4, lr}
 8011110:	eb01 0402 	add.w	r4, r1, r2
 8011114:	d902      	bls.n	801111c <memmove+0x10>
 8011116:	4284      	cmp	r4, r0
 8011118:	4623      	mov	r3, r4
 801111a:	d807      	bhi.n	801112c <memmove+0x20>
 801111c:	1e43      	subs	r3, r0, #1
 801111e:	42a1      	cmp	r1, r4
 8011120:	d008      	beq.n	8011134 <memmove+0x28>
 8011122:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011126:	f803 2f01 	strb.w	r2, [r3, #1]!
 801112a:	e7f8      	b.n	801111e <memmove+0x12>
 801112c:	4402      	add	r2, r0
 801112e:	4601      	mov	r1, r0
 8011130:	428a      	cmp	r2, r1
 8011132:	d100      	bne.n	8011136 <memmove+0x2a>
 8011134:	bd10      	pop	{r4, pc}
 8011136:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801113a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801113e:	e7f7      	b.n	8011130 <memmove+0x24>

08011140 <__malloc_lock>:
 8011140:	4801      	ldr	r0, [pc, #4]	; (8011148 <__malloc_lock+0x8>)
 8011142:	f000 bc1f 	b.w	8011984 <__retarget_lock_acquire_recursive>
 8011146:	bf00      	nop
 8011148:	2000493c 	.word	0x2000493c

0801114c <__malloc_unlock>:
 801114c:	4801      	ldr	r0, [pc, #4]	; (8011154 <__malloc_unlock+0x8>)
 801114e:	f000 bc1a 	b.w	8011986 <__retarget_lock_release_recursive>
 8011152:	bf00      	nop
 8011154:	2000493c 	.word	0x2000493c

08011158 <_realloc_r>:
 8011158:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801115c:	4680      	mov	r8, r0
 801115e:	4614      	mov	r4, r2
 8011160:	460e      	mov	r6, r1
 8011162:	b921      	cbnz	r1, 801116e <_realloc_r+0x16>
 8011164:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011168:	4611      	mov	r1, r2
 801116a:	f7ff bdad 	b.w	8010cc8 <_malloc_r>
 801116e:	b92a      	cbnz	r2, 801117c <_realloc_r+0x24>
 8011170:	f7ff fd3e 	bl	8010bf0 <_free_r>
 8011174:	4625      	mov	r5, r4
 8011176:	4628      	mov	r0, r5
 8011178:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801117c:	f000 fc6a 	bl	8011a54 <_malloc_usable_size_r>
 8011180:	4284      	cmp	r4, r0
 8011182:	4607      	mov	r7, r0
 8011184:	d802      	bhi.n	801118c <_realloc_r+0x34>
 8011186:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801118a:	d812      	bhi.n	80111b2 <_realloc_r+0x5a>
 801118c:	4621      	mov	r1, r4
 801118e:	4640      	mov	r0, r8
 8011190:	f7ff fd9a 	bl	8010cc8 <_malloc_r>
 8011194:	4605      	mov	r5, r0
 8011196:	2800      	cmp	r0, #0
 8011198:	d0ed      	beq.n	8011176 <_realloc_r+0x1e>
 801119a:	42bc      	cmp	r4, r7
 801119c:	4622      	mov	r2, r4
 801119e:	4631      	mov	r1, r6
 80111a0:	bf28      	it	cs
 80111a2:	463a      	movcs	r2, r7
 80111a4:	f7fd fe64 	bl	800ee70 <memcpy>
 80111a8:	4631      	mov	r1, r6
 80111aa:	4640      	mov	r0, r8
 80111ac:	f7ff fd20 	bl	8010bf0 <_free_r>
 80111b0:	e7e1      	b.n	8011176 <_realloc_r+0x1e>
 80111b2:	4635      	mov	r5, r6
 80111b4:	e7df      	b.n	8011176 <_realloc_r+0x1e>

080111b6 <__sfputc_r>:
 80111b6:	6893      	ldr	r3, [r2, #8]
 80111b8:	3b01      	subs	r3, #1
 80111ba:	2b00      	cmp	r3, #0
 80111bc:	b410      	push	{r4}
 80111be:	6093      	str	r3, [r2, #8]
 80111c0:	da08      	bge.n	80111d4 <__sfputc_r+0x1e>
 80111c2:	6994      	ldr	r4, [r2, #24]
 80111c4:	42a3      	cmp	r3, r4
 80111c6:	db01      	blt.n	80111cc <__sfputc_r+0x16>
 80111c8:	290a      	cmp	r1, #10
 80111ca:	d103      	bne.n	80111d4 <__sfputc_r+0x1e>
 80111cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80111d0:	f000 b94a 	b.w	8011468 <__swbuf_r>
 80111d4:	6813      	ldr	r3, [r2, #0]
 80111d6:	1c58      	adds	r0, r3, #1
 80111d8:	6010      	str	r0, [r2, #0]
 80111da:	7019      	strb	r1, [r3, #0]
 80111dc:	4608      	mov	r0, r1
 80111de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80111e2:	4770      	bx	lr

080111e4 <__sfputs_r>:
 80111e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80111e6:	4606      	mov	r6, r0
 80111e8:	460f      	mov	r7, r1
 80111ea:	4614      	mov	r4, r2
 80111ec:	18d5      	adds	r5, r2, r3
 80111ee:	42ac      	cmp	r4, r5
 80111f0:	d101      	bne.n	80111f6 <__sfputs_r+0x12>
 80111f2:	2000      	movs	r0, #0
 80111f4:	e007      	b.n	8011206 <__sfputs_r+0x22>
 80111f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80111fa:	463a      	mov	r2, r7
 80111fc:	4630      	mov	r0, r6
 80111fe:	f7ff ffda 	bl	80111b6 <__sfputc_r>
 8011202:	1c43      	adds	r3, r0, #1
 8011204:	d1f3      	bne.n	80111ee <__sfputs_r+0xa>
 8011206:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08011208 <_vfiprintf_r>:
 8011208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801120c:	460d      	mov	r5, r1
 801120e:	b09d      	sub	sp, #116	; 0x74
 8011210:	4614      	mov	r4, r2
 8011212:	4698      	mov	r8, r3
 8011214:	4606      	mov	r6, r0
 8011216:	b118      	cbz	r0, 8011220 <_vfiprintf_r+0x18>
 8011218:	6983      	ldr	r3, [r0, #24]
 801121a:	b90b      	cbnz	r3, 8011220 <_vfiprintf_r+0x18>
 801121c:	f000 fb14 	bl	8011848 <__sinit>
 8011220:	4b89      	ldr	r3, [pc, #548]	; (8011448 <_vfiprintf_r+0x240>)
 8011222:	429d      	cmp	r5, r3
 8011224:	d11b      	bne.n	801125e <_vfiprintf_r+0x56>
 8011226:	6875      	ldr	r5, [r6, #4]
 8011228:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801122a:	07d9      	lsls	r1, r3, #31
 801122c:	d405      	bmi.n	801123a <_vfiprintf_r+0x32>
 801122e:	89ab      	ldrh	r3, [r5, #12]
 8011230:	059a      	lsls	r2, r3, #22
 8011232:	d402      	bmi.n	801123a <_vfiprintf_r+0x32>
 8011234:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011236:	f000 fba5 	bl	8011984 <__retarget_lock_acquire_recursive>
 801123a:	89ab      	ldrh	r3, [r5, #12]
 801123c:	071b      	lsls	r3, r3, #28
 801123e:	d501      	bpl.n	8011244 <_vfiprintf_r+0x3c>
 8011240:	692b      	ldr	r3, [r5, #16]
 8011242:	b9eb      	cbnz	r3, 8011280 <_vfiprintf_r+0x78>
 8011244:	4629      	mov	r1, r5
 8011246:	4630      	mov	r0, r6
 8011248:	f000 f96e 	bl	8011528 <__swsetup_r>
 801124c:	b1c0      	cbz	r0, 8011280 <_vfiprintf_r+0x78>
 801124e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011250:	07dc      	lsls	r4, r3, #31
 8011252:	d50e      	bpl.n	8011272 <_vfiprintf_r+0x6a>
 8011254:	f04f 30ff 	mov.w	r0, #4294967295
 8011258:	b01d      	add	sp, #116	; 0x74
 801125a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801125e:	4b7b      	ldr	r3, [pc, #492]	; (801144c <_vfiprintf_r+0x244>)
 8011260:	429d      	cmp	r5, r3
 8011262:	d101      	bne.n	8011268 <_vfiprintf_r+0x60>
 8011264:	68b5      	ldr	r5, [r6, #8]
 8011266:	e7df      	b.n	8011228 <_vfiprintf_r+0x20>
 8011268:	4b79      	ldr	r3, [pc, #484]	; (8011450 <_vfiprintf_r+0x248>)
 801126a:	429d      	cmp	r5, r3
 801126c:	bf08      	it	eq
 801126e:	68f5      	ldreq	r5, [r6, #12]
 8011270:	e7da      	b.n	8011228 <_vfiprintf_r+0x20>
 8011272:	89ab      	ldrh	r3, [r5, #12]
 8011274:	0598      	lsls	r0, r3, #22
 8011276:	d4ed      	bmi.n	8011254 <_vfiprintf_r+0x4c>
 8011278:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801127a:	f000 fb84 	bl	8011986 <__retarget_lock_release_recursive>
 801127e:	e7e9      	b.n	8011254 <_vfiprintf_r+0x4c>
 8011280:	2300      	movs	r3, #0
 8011282:	9309      	str	r3, [sp, #36]	; 0x24
 8011284:	2320      	movs	r3, #32
 8011286:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801128a:	f8cd 800c 	str.w	r8, [sp, #12]
 801128e:	2330      	movs	r3, #48	; 0x30
 8011290:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8011454 <_vfiprintf_r+0x24c>
 8011294:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011298:	f04f 0901 	mov.w	r9, #1
 801129c:	4623      	mov	r3, r4
 801129e:	469a      	mov	sl, r3
 80112a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80112a4:	b10a      	cbz	r2, 80112aa <_vfiprintf_r+0xa2>
 80112a6:	2a25      	cmp	r2, #37	; 0x25
 80112a8:	d1f9      	bne.n	801129e <_vfiprintf_r+0x96>
 80112aa:	ebba 0b04 	subs.w	fp, sl, r4
 80112ae:	d00b      	beq.n	80112c8 <_vfiprintf_r+0xc0>
 80112b0:	465b      	mov	r3, fp
 80112b2:	4622      	mov	r2, r4
 80112b4:	4629      	mov	r1, r5
 80112b6:	4630      	mov	r0, r6
 80112b8:	f7ff ff94 	bl	80111e4 <__sfputs_r>
 80112bc:	3001      	adds	r0, #1
 80112be:	f000 80aa 	beq.w	8011416 <_vfiprintf_r+0x20e>
 80112c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80112c4:	445a      	add	r2, fp
 80112c6:	9209      	str	r2, [sp, #36]	; 0x24
 80112c8:	f89a 3000 	ldrb.w	r3, [sl]
 80112cc:	2b00      	cmp	r3, #0
 80112ce:	f000 80a2 	beq.w	8011416 <_vfiprintf_r+0x20e>
 80112d2:	2300      	movs	r3, #0
 80112d4:	f04f 32ff 	mov.w	r2, #4294967295
 80112d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80112dc:	f10a 0a01 	add.w	sl, sl, #1
 80112e0:	9304      	str	r3, [sp, #16]
 80112e2:	9307      	str	r3, [sp, #28]
 80112e4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80112e8:	931a      	str	r3, [sp, #104]	; 0x68
 80112ea:	4654      	mov	r4, sl
 80112ec:	2205      	movs	r2, #5
 80112ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80112f2:	4858      	ldr	r0, [pc, #352]	; (8011454 <_vfiprintf_r+0x24c>)
 80112f4:	f7ee ff74 	bl	80001e0 <memchr>
 80112f8:	9a04      	ldr	r2, [sp, #16]
 80112fa:	b9d8      	cbnz	r0, 8011334 <_vfiprintf_r+0x12c>
 80112fc:	06d1      	lsls	r1, r2, #27
 80112fe:	bf44      	itt	mi
 8011300:	2320      	movmi	r3, #32
 8011302:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011306:	0713      	lsls	r3, r2, #28
 8011308:	bf44      	itt	mi
 801130a:	232b      	movmi	r3, #43	; 0x2b
 801130c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011310:	f89a 3000 	ldrb.w	r3, [sl]
 8011314:	2b2a      	cmp	r3, #42	; 0x2a
 8011316:	d015      	beq.n	8011344 <_vfiprintf_r+0x13c>
 8011318:	9a07      	ldr	r2, [sp, #28]
 801131a:	4654      	mov	r4, sl
 801131c:	2000      	movs	r0, #0
 801131e:	f04f 0c0a 	mov.w	ip, #10
 8011322:	4621      	mov	r1, r4
 8011324:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011328:	3b30      	subs	r3, #48	; 0x30
 801132a:	2b09      	cmp	r3, #9
 801132c:	d94e      	bls.n	80113cc <_vfiprintf_r+0x1c4>
 801132e:	b1b0      	cbz	r0, 801135e <_vfiprintf_r+0x156>
 8011330:	9207      	str	r2, [sp, #28]
 8011332:	e014      	b.n	801135e <_vfiprintf_r+0x156>
 8011334:	eba0 0308 	sub.w	r3, r0, r8
 8011338:	fa09 f303 	lsl.w	r3, r9, r3
 801133c:	4313      	orrs	r3, r2
 801133e:	9304      	str	r3, [sp, #16]
 8011340:	46a2      	mov	sl, r4
 8011342:	e7d2      	b.n	80112ea <_vfiprintf_r+0xe2>
 8011344:	9b03      	ldr	r3, [sp, #12]
 8011346:	1d19      	adds	r1, r3, #4
 8011348:	681b      	ldr	r3, [r3, #0]
 801134a:	9103      	str	r1, [sp, #12]
 801134c:	2b00      	cmp	r3, #0
 801134e:	bfbb      	ittet	lt
 8011350:	425b      	neglt	r3, r3
 8011352:	f042 0202 	orrlt.w	r2, r2, #2
 8011356:	9307      	strge	r3, [sp, #28]
 8011358:	9307      	strlt	r3, [sp, #28]
 801135a:	bfb8      	it	lt
 801135c:	9204      	strlt	r2, [sp, #16]
 801135e:	7823      	ldrb	r3, [r4, #0]
 8011360:	2b2e      	cmp	r3, #46	; 0x2e
 8011362:	d10c      	bne.n	801137e <_vfiprintf_r+0x176>
 8011364:	7863      	ldrb	r3, [r4, #1]
 8011366:	2b2a      	cmp	r3, #42	; 0x2a
 8011368:	d135      	bne.n	80113d6 <_vfiprintf_r+0x1ce>
 801136a:	9b03      	ldr	r3, [sp, #12]
 801136c:	1d1a      	adds	r2, r3, #4
 801136e:	681b      	ldr	r3, [r3, #0]
 8011370:	9203      	str	r2, [sp, #12]
 8011372:	2b00      	cmp	r3, #0
 8011374:	bfb8      	it	lt
 8011376:	f04f 33ff 	movlt.w	r3, #4294967295
 801137a:	3402      	adds	r4, #2
 801137c:	9305      	str	r3, [sp, #20]
 801137e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8011464 <_vfiprintf_r+0x25c>
 8011382:	7821      	ldrb	r1, [r4, #0]
 8011384:	2203      	movs	r2, #3
 8011386:	4650      	mov	r0, sl
 8011388:	f7ee ff2a 	bl	80001e0 <memchr>
 801138c:	b140      	cbz	r0, 80113a0 <_vfiprintf_r+0x198>
 801138e:	2340      	movs	r3, #64	; 0x40
 8011390:	eba0 000a 	sub.w	r0, r0, sl
 8011394:	fa03 f000 	lsl.w	r0, r3, r0
 8011398:	9b04      	ldr	r3, [sp, #16]
 801139a:	4303      	orrs	r3, r0
 801139c:	3401      	adds	r4, #1
 801139e:	9304      	str	r3, [sp, #16]
 80113a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80113a4:	482c      	ldr	r0, [pc, #176]	; (8011458 <_vfiprintf_r+0x250>)
 80113a6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80113aa:	2206      	movs	r2, #6
 80113ac:	f7ee ff18 	bl	80001e0 <memchr>
 80113b0:	2800      	cmp	r0, #0
 80113b2:	d03f      	beq.n	8011434 <_vfiprintf_r+0x22c>
 80113b4:	4b29      	ldr	r3, [pc, #164]	; (801145c <_vfiprintf_r+0x254>)
 80113b6:	bb1b      	cbnz	r3, 8011400 <_vfiprintf_r+0x1f8>
 80113b8:	9b03      	ldr	r3, [sp, #12]
 80113ba:	3307      	adds	r3, #7
 80113bc:	f023 0307 	bic.w	r3, r3, #7
 80113c0:	3308      	adds	r3, #8
 80113c2:	9303      	str	r3, [sp, #12]
 80113c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80113c6:	443b      	add	r3, r7
 80113c8:	9309      	str	r3, [sp, #36]	; 0x24
 80113ca:	e767      	b.n	801129c <_vfiprintf_r+0x94>
 80113cc:	fb0c 3202 	mla	r2, ip, r2, r3
 80113d0:	460c      	mov	r4, r1
 80113d2:	2001      	movs	r0, #1
 80113d4:	e7a5      	b.n	8011322 <_vfiprintf_r+0x11a>
 80113d6:	2300      	movs	r3, #0
 80113d8:	3401      	adds	r4, #1
 80113da:	9305      	str	r3, [sp, #20]
 80113dc:	4619      	mov	r1, r3
 80113de:	f04f 0c0a 	mov.w	ip, #10
 80113e2:	4620      	mov	r0, r4
 80113e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80113e8:	3a30      	subs	r2, #48	; 0x30
 80113ea:	2a09      	cmp	r2, #9
 80113ec:	d903      	bls.n	80113f6 <_vfiprintf_r+0x1ee>
 80113ee:	2b00      	cmp	r3, #0
 80113f0:	d0c5      	beq.n	801137e <_vfiprintf_r+0x176>
 80113f2:	9105      	str	r1, [sp, #20]
 80113f4:	e7c3      	b.n	801137e <_vfiprintf_r+0x176>
 80113f6:	fb0c 2101 	mla	r1, ip, r1, r2
 80113fa:	4604      	mov	r4, r0
 80113fc:	2301      	movs	r3, #1
 80113fe:	e7f0      	b.n	80113e2 <_vfiprintf_r+0x1da>
 8011400:	ab03      	add	r3, sp, #12
 8011402:	9300      	str	r3, [sp, #0]
 8011404:	462a      	mov	r2, r5
 8011406:	4b16      	ldr	r3, [pc, #88]	; (8011460 <_vfiprintf_r+0x258>)
 8011408:	a904      	add	r1, sp, #16
 801140a:	4630      	mov	r0, r6
 801140c:	f7fd fde6 	bl	800efdc <_printf_float>
 8011410:	4607      	mov	r7, r0
 8011412:	1c78      	adds	r0, r7, #1
 8011414:	d1d6      	bne.n	80113c4 <_vfiprintf_r+0x1bc>
 8011416:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011418:	07d9      	lsls	r1, r3, #31
 801141a:	d405      	bmi.n	8011428 <_vfiprintf_r+0x220>
 801141c:	89ab      	ldrh	r3, [r5, #12]
 801141e:	059a      	lsls	r2, r3, #22
 8011420:	d402      	bmi.n	8011428 <_vfiprintf_r+0x220>
 8011422:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011424:	f000 faaf 	bl	8011986 <__retarget_lock_release_recursive>
 8011428:	89ab      	ldrh	r3, [r5, #12]
 801142a:	065b      	lsls	r3, r3, #25
 801142c:	f53f af12 	bmi.w	8011254 <_vfiprintf_r+0x4c>
 8011430:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011432:	e711      	b.n	8011258 <_vfiprintf_r+0x50>
 8011434:	ab03      	add	r3, sp, #12
 8011436:	9300      	str	r3, [sp, #0]
 8011438:	462a      	mov	r2, r5
 801143a:	4b09      	ldr	r3, [pc, #36]	; (8011460 <_vfiprintf_r+0x258>)
 801143c:	a904      	add	r1, sp, #16
 801143e:	4630      	mov	r0, r6
 8011440:	f7fe f870 	bl	800f524 <_printf_i>
 8011444:	e7e4      	b.n	8011410 <_vfiprintf_r+0x208>
 8011446:	bf00      	nop
 8011448:	08014784 	.word	0x08014784
 801144c:	080147a4 	.word	0x080147a4
 8011450:	08014764 	.word	0x08014764
 8011454:	0801460c 	.word	0x0801460c
 8011458:	08014616 	.word	0x08014616
 801145c:	0800efdd 	.word	0x0800efdd
 8011460:	080111e5 	.word	0x080111e5
 8011464:	08014612 	.word	0x08014612

08011468 <__swbuf_r>:
 8011468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801146a:	460e      	mov	r6, r1
 801146c:	4614      	mov	r4, r2
 801146e:	4605      	mov	r5, r0
 8011470:	b118      	cbz	r0, 801147a <__swbuf_r+0x12>
 8011472:	6983      	ldr	r3, [r0, #24]
 8011474:	b90b      	cbnz	r3, 801147a <__swbuf_r+0x12>
 8011476:	f000 f9e7 	bl	8011848 <__sinit>
 801147a:	4b21      	ldr	r3, [pc, #132]	; (8011500 <__swbuf_r+0x98>)
 801147c:	429c      	cmp	r4, r3
 801147e:	d12b      	bne.n	80114d8 <__swbuf_r+0x70>
 8011480:	686c      	ldr	r4, [r5, #4]
 8011482:	69a3      	ldr	r3, [r4, #24]
 8011484:	60a3      	str	r3, [r4, #8]
 8011486:	89a3      	ldrh	r3, [r4, #12]
 8011488:	071a      	lsls	r2, r3, #28
 801148a:	d52f      	bpl.n	80114ec <__swbuf_r+0x84>
 801148c:	6923      	ldr	r3, [r4, #16]
 801148e:	b36b      	cbz	r3, 80114ec <__swbuf_r+0x84>
 8011490:	6923      	ldr	r3, [r4, #16]
 8011492:	6820      	ldr	r0, [r4, #0]
 8011494:	1ac0      	subs	r0, r0, r3
 8011496:	6963      	ldr	r3, [r4, #20]
 8011498:	b2f6      	uxtb	r6, r6
 801149a:	4283      	cmp	r3, r0
 801149c:	4637      	mov	r7, r6
 801149e:	dc04      	bgt.n	80114aa <__swbuf_r+0x42>
 80114a0:	4621      	mov	r1, r4
 80114a2:	4628      	mov	r0, r5
 80114a4:	f000 f93c 	bl	8011720 <_fflush_r>
 80114a8:	bb30      	cbnz	r0, 80114f8 <__swbuf_r+0x90>
 80114aa:	68a3      	ldr	r3, [r4, #8]
 80114ac:	3b01      	subs	r3, #1
 80114ae:	60a3      	str	r3, [r4, #8]
 80114b0:	6823      	ldr	r3, [r4, #0]
 80114b2:	1c5a      	adds	r2, r3, #1
 80114b4:	6022      	str	r2, [r4, #0]
 80114b6:	701e      	strb	r6, [r3, #0]
 80114b8:	6963      	ldr	r3, [r4, #20]
 80114ba:	3001      	adds	r0, #1
 80114bc:	4283      	cmp	r3, r0
 80114be:	d004      	beq.n	80114ca <__swbuf_r+0x62>
 80114c0:	89a3      	ldrh	r3, [r4, #12]
 80114c2:	07db      	lsls	r3, r3, #31
 80114c4:	d506      	bpl.n	80114d4 <__swbuf_r+0x6c>
 80114c6:	2e0a      	cmp	r6, #10
 80114c8:	d104      	bne.n	80114d4 <__swbuf_r+0x6c>
 80114ca:	4621      	mov	r1, r4
 80114cc:	4628      	mov	r0, r5
 80114ce:	f000 f927 	bl	8011720 <_fflush_r>
 80114d2:	b988      	cbnz	r0, 80114f8 <__swbuf_r+0x90>
 80114d4:	4638      	mov	r0, r7
 80114d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80114d8:	4b0a      	ldr	r3, [pc, #40]	; (8011504 <__swbuf_r+0x9c>)
 80114da:	429c      	cmp	r4, r3
 80114dc:	d101      	bne.n	80114e2 <__swbuf_r+0x7a>
 80114de:	68ac      	ldr	r4, [r5, #8]
 80114e0:	e7cf      	b.n	8011482 <__swbuf_r+0x1a>
 80114e2:	4b09      	ldr	r3, [pc, #36]	; (8011508 <__swbuf_r+0xa0>)
 80114e4:	429c      	cmp	r4, r3
 80114e6:	bf08      	it	eq
 80114e8:	68ec      	ldreq	r4, [r5, #12]
 80114ea:	e7ca      	b.n	8011482 <__swbuf_r+0x1a>
 80114ec:	4621      	mov	r1, r4
 80114ee:	4628      	mov	r0, r5
 80114f0:	f000 f81a 	bl	8011528 <__swsetup_r>
 80114f4:	2800      	cmp	r0, #0
 80114f6:	d0cb      	beq.n	8011490 <__swbuf_r+0x28>
 80114f8:	f04f 37ff 	mov.w	r7, #4294967295
 80114fc:	e7ea      	b.n	80114d4 <__swbuf_r+0x6c>
 80114fe:	bf00      	nop
 8011500:	08014784 	.word	0x08014784
 8011504:	080147a4 	.word	0x080147a4
 8011508:	08014764 	.word	0x08014764

0801150c <__ascii_wctomb>:
 801150c:	b149      	cbz	r1, 8011522 <__ascii_wctomb+0x16>
 801150e:	2aff      	cmp	r2, #255	; 0xff
 8011510:	bf85      	ittet	hi
 8011512:	238a      	movhi	r3, #138	; 0x8a
 8011514:	6003      	strhi	r3, [r0, #0]
 8011516:	700a      	strbls	r2, [r1, #0]
 8011518:	f04f 30ff 	movhi.w	r0, #4294967295
 801151c:	bf98      	it	ls
 801151e:	2001      	movls	r0, #1
 8011520:	4770      	bx	lr
 8011522:	4608      	mov	r0, r1
 8011524:	4770      	bx	lr
	...

08011528 <__swsetup_r>:
 8011528:	4b32      	ldr	r3, [pc, #200]	; (80115f4 <__swsetup_r+0xcc>)
 801152a:	b570      	push	{r4, r5, r6, lr}
 801152c:	681d      	ldr	r5, [r3, #0]
 801152e:	4606      	mov	r6, r0
 8011530:	460c      	mov	r4, r1
 8011532:	b125      	cbz	r5, 801153e <__swsetup_r+0x16>
 8011534:	69ab      	ldr	r3, [r5, #24]
 8011536:	b913      	cbnz	r3, 801153e <__swsetup_r+0x16>
 8011538:	4628      	mov	r0, r5
 801153a:	f000 f985 	bl	8011848 <__sinit>
 801153e:	4b2e      	ldr	r3, [pc, #184]	; (80115f8 <__swsetup_r+0xd0>)
 8011540:	429c      	cmp	r4, r3
 8011542:	d10f      	bne.n	8011564 <__swsetup_r+0x3c>
 8011544:	686c      	ldr	r4, [r5, #4]
 8011546:	89a3      	ldrh	r3, [r4, #12]
 8011548:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801154c:	0719      	lsls	r1, r3, #28
 801154e:	d42c      	bmi.n	80115aa <__swsetup_r+0x82>
 8011550:	06dd      	lsls	r5, r3, #27
 8011552:	d411      	bmi.n	8011578 <__swsetup_r+0x50>
 8011554:	2309      	movs	r3, #9
 8011556:	6033      	str	r3, [r6, #0]
 8011558:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801155c:	81a3      	strh	r3, [r4, #12]
 801155e:	f04f 30ff 	mov.w	r0, #4294967295
 8011562:	e03e      	b.n	80115e2 <__swsetup_r+0xba>
 8011564:	4b25      	ldr	r3, [pc, #148]	; (80115fc <__swsetup_r+0xd4>)
 8011566:	429c      	cmp	r4, r3
 8011568:	d101      	bne.n	801156e <__swsetup_r+0x46>
 801156a:	68ac      	ldr	r4, [r5, #8]
 801156c:	e7eb      	b.n	8011546 <__swsetup_r+0x1e>
 801156e:	4b24      	ldr	r3, [pc, #144]	; (8011600 <__swsetup_r+0xd8>)
 8011570:	429c      	cmp	r4, r3
 8011572:	bf08      	it	eq
 8011574:	68ec      	ldreq	r4, [r5, #12]
 8011576:	e7e6      	b.n	8011546 <__swsetup_r+0x1e>
 8011578:	0758      	lsls	r0, r3, #29
 801157a:	d512      	bpl.n	80115a2 <__swsetup_r+0x7a>
 801157c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801157e:	b141      	cbz	r1, 8011592 <__swsetup_r+0x6a>
 8011580:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011584:	4299      	cmp	r1, r3
 8011586:	d002      	beq.n	801158e <__swsetup_r+0x66>
 8011588:	4630      	mov	r0, r6
 801158a:	f7ff fb31 	bl	8010bf0 <_free_r>
 801158e:	2300      	movs	r3, #0
 8011590:	6363      	str	r3, [r4, #52]	; 0x34
 8011592:	89a3      	ldrh	r3, [r4, #12]
 8011594:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011598:	81a3      	strh	r3, [r4, #12]
 801159a:	2300      	movs	r3, #0
 801159c:	6063      	str	r3, [r4, #4]
 801159e:	6923      	ldr	r3, [r4, #16]
 80115a0:	6023      	str	r3, [r4, #0]
 80115a2:	89a3      	ldrh	r3, [r4, #12]
 80115a4:	f043 0308 	orr.w	r3, r3, #8
 80115a8:	81a3      	strh	r3, [r4, #12]
 80115aa:	6923      	ldr	r3, [r4, #16]
 80115ac:	b94b      	cbnz	r3, 80115c2 <__swsetup_r+0x9a>
 80115ae:	89a3      	ldrh	r3, [r4, #12]
 80115b0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80115b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80115b8:	d003      	beq.n	80115c2 <__swsetup_r+0x9a>
 80115ba:	4621      	mov	r1, r4
 80115bc:	4630      	mov	r0, r6
 80115be:	f000 fa09 	bl	80119d4 <__smakebuf_r>
 80115c2:	89a0      	ldrh	r0, [r4, #12]
 80115c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80115c8:	f010 0301 	ands.w	r3, r0, #1
 80115cc:	d00a      	beq.n	80115e4 <__swsetup_r+0xbc>
 80115ce:	2300      	movs	r3, #0
 80115d0:	60a3      	str	r3, [r4, #8]
 80115d2:	6963      	ldr	r3, [r4, #20]
 80115d4:	425b      	negs	r3, r3
 80115d6:	61a3      	str	r3, [r4, #24]
 80115d8:	6923      	ldr	r3, [r4, #16]
 80115da:	b943      	cbnz	r3, 80115ee <__swsetup_r+0xc6>
 80115dc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80115e0:	d1ba      	bne.n	8011558 <__swsetup_r+0x30>
 80115e2:	bd70      	pop	{r4, r5, r6, pc}
 80115e4:	0781      	lsls	r1, r0, #30
 80115e6:	bf58      	it	pl
 80115e8:	6963      	ldrpl	r3, [r4, #20]
 80115ea:	60a3      	str	r3, [r4, #8]
 80115ec:	e7f4      	b.n	80115d8 <__swsetup_r+0xb0>
 80115ee:	2000      	movs	r0, #0
 80115f0:	e7f7      	b.n	80115e2 <__swsetup_r+0xba>
 80115f2:	bf00      	nop
 80115f4:	2000001c 	.word	0x2000001c
 80115f8:	08014784 	.word	0x08014784
 80115fc:	080147a4 	.word	0x080147a4
 8011600:	08014764 	.word	0x08014764

08011604 <abort>:
 8011604:	b508      	push	{r3, lr}
 8011606:	2006      	movs	r0, #6
 8011608:	f000 fa54 	bl	8011ab4 <raise>
 801160c:	2001      	movs	r0, #1
 801160e:	f7f2 fe31 	bl	8004274 <_exit>
	...

08011614 <__sflush_r>:
 8011614:	898a      	ldrh	r2, [r1, #12]
 8011616:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801161a:	4605      	mov	r5, r0
 801161c:	0710      	lsls	r0, r2, #28
 801161e:	460c      	mov	r4, r1
 8011620:	d458      	bmi.n	80116d4 <__sflush_r+0xc0>
 8011622:	684b      	ldr	r3, [r1, #4]
 8011624:	2b00      	cmp	r3, #0
 8011626:	dc05      	bgt.n	8011634 <__sflush_r+0x20>
 8011628:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801162a:	2b00      	cmp	r3, #0
 801162c:	dc02      	bgt.n	8011634 <__sflush_r+0x20>
 801162e:	2000      	movs	r0, #0
 8011630:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011634:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011636:	2e00      	cmp	r6, #0
 8011638:	d0f9      	beq.n	801162e <__sflush_r+0x1a>
 801163a:	2300      	movs	r3, #0
 801163c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011640:	682f      	ldr	r7, [r5, #0]
 8011642:	602b      	str	r3, [r5, #0]
 8011644:	d032      	beq.n	80116ac <__sflush_r+0x98>
 8011646:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011648:	89a3      	ldrh	r3, [r4, #12]
 801164a:	075a      	lsls	r2, r3, #29
 801164c:	d505      	bpl.n	801165a <__sflush_r+0x46>
 801164e:	6863      	ldr	r3, [r4, #4]
 8011650:	1ac0      	subs	r0, r0, r3
 8011652:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011654:	b10b      	cbz	r3, 801165a <__sflush_r+0x46>
 8011656:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011658:	1ac0      	subs	r0, r0, r3
 801165a:	2300      	movs	r3, #0
 801165c:	4602      	mov	r2, r0
 801165e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011660:	6a21      	ldr	r1, [r4, #32]
 8011662:	4628      	mov	r0, r5
 8011664:	47b0      	blx	r6
 8011666:	1c43      	adds	r3, r0, #1
 8011668:	89a3      	ldrh	r3, [r4, #12]
 801166a:	d106      	bne.n	801167a <__sflush_r+0x66>
 801166c:	6829      	ldr	r1, [r5, #0]
 801166e:	291d      	cmp	r1, #29
 8011670:	d82c      	bhi.n	80116cc <__sflush_r+0xb8>
 8011672:	4a2a      	ldr	r2, [pc, #168]	; (801171c <__sflush_r+0x108>)
 8011674:	40ca      	lsrs	r2, r1
 8011676:	07d6      	lsls	r6, r2, #31
 8011678:	d528      	bpl.n	80116cc <__sflush_r+0xb8>
 801167a:	2200      	movs	r2, #0
 801167c:	6062      	str	r2, [r4, #4]
 801167e:	04d9      	lsls	r1, r3, #19
 8011680:	6922      	ldr	r2, [r4, #16]
 8011682:	6022      	str	r2, [r4, #0]
 8011684:	d504      	bpl.n	8011690 <__sflush_r+0x7c>
 8011686:	1c42      	adds	r2, r0, #1
 8011688:	d101      	bne.n	801168e <__sflush_r+0x7a>
 801168a:	682b      	ldr	r3, [r5, #0]
 801168c:	b903      	cbnz	r3, 8011690 <__sflush_r+0x7c>
 801168e:	6560      	str	r0, [r4, #84]	; 0x54
 8011690:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011692:	602f      	str	r7, [r5, #0]
 8011694:	2900      	cmp	r1, #0
 8011696:	d0ca      	beq.n	801162e <__sflush_r+0x1a>
 8011698:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801169c:	4299      	cmp	r1, r3
 801169e:	d002      	beq.n	80116a6 <__sflush_r+0x92>
 80116a0:	4628      	mov	r0, r5
 80116a2:	f7ff faa5 	bl	8010bf0 <_free_r>
 80116a6:	2000      	movs	r0, #0
 80116a8:	6360      	str	r0, [r4, #52]	; 0x34
 80116aa:	e7c1      	b.n	8011630 <__sflush_r+0x1c>
 80116ac:	6a21      	ldr	r1, [r4, #32]
 80116ae:	2301      	movs	r3, #1
 80116b0:	4628      	mov	r0, r5
 80116b2:	47b0      	blx	r6
 80116b4:	1c41      	adds	r1, r0, #1
 80116b6:	d1c7      	bne.n	8011648 <__sflush_r+0x34>
 80116b8:	682b      	ldr	r3, [r5, #0]
 80116ba:	2b00      	cmp	r3, #0
 80116bc:	d0c4      	beq.n	8011648 <__sflush_r+0x34>
 80116be:	2b1d      	cmp	r3, #29
 80116c0:	d001      	beq.n	80116c6 <__sflush_r+0xb2>
 80116c2:	2b16      	cmp	r3, #22
 80116c4:	d101      	bne.n	80116ca <__sflush_r+0xb6>
 80116c6:	602f      	str	r7, [r5, #0]
 80116c8:	e7b1      	b.n	801162e <__sflush_r+0x1a>
 80116ca:	89a3      	ldrh	r3, [r4, #12]
 80116cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80116d0:	81a3      	strh	r3, [r4, #12]
 80116d2:	e7ad      	b.n	8011630 <__sflush_r+0x1c>
 80116d4:	690f      	ldr	r7, [r1, #16]
 80116d6:	2f00      	cmp	r7, #0
 80116d8:	d0a9      	beq.n	801162e <__sflush_r+0x1a>
 80116da:	0793      	lsls	r3, r2, #30
 80116dc:	680e      	ldr	r6, [r1, #0]
 80116de:	bf08      	it	eq
 80116e0:	694b      	ldreq	r3, [r1, #20]
 80116e2:	600f      	str	r7, [r1, #0]
 80116e4:	bf18      	it	ne
 80116e6:	2300      	movne	r3, #0
 80116e8:	eba6 0807 	sub.w	r8, r6, r7
 80116ec:	608b      	str	r3, [r1, #8]
 80116ee:	f1b8 0f00 	cmp.w	r8, #0
 80116f2:	dd9c      	ble.n	801162e <__sflush_r+0x1a>
 80116f4:	6a21      	ldr	r1, [r4, #32]
 80116f6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80116f8:	4643      	mov	r3, r8
 80116fa:	463a      	mov	r2, r7
 80116fc:	4628      	mov	r0, r5
 80116fe:	47b0      	blx	r6
 8011700:	2800      	cmp	r0, #0
 8011702:	dc06      	bgt.n	8011712 <__sflush_r+0xfe>
 8011704:	89a3      	ldrh	r3, [r4, #12]
 8011706:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801170a:	81a3      	strh	r3, [r4, #12]
 801170c:	f04f 30ff 	mov.w	r0, #4294967295
 8011710:	e78e      	b.n	8011630 <__sflush_r+0x1c>
 8011712:	4407      	add	r7, r0
 8011714:	eba8 0800 	sub.w	r8, r8, r0
 8011718:	e7e9      	b.n	80116ee <__sflush_r+0xda>
 801171a:	bf00      	nop
 801171c:	20400001 	.word	0x20400001

08011720 <_fflush_r>:
 8011720:	b538      	push	{r3, r4, r5, lr}
 8011722:	690b      	ldr	r3, [r1, #16]
 8011724:	4605      	mov	r5, r0
 8011726:	460c      	mov	r4, r1
 8011728:	b913      	cbnz	r3, 8011730 <_fflush_r+0x10>
 801172a:	2500      	movs	r5, #0
 801172c:	4628      	mov	r0, r5
 801172e:	bd38      	pop	{r3, r4, r5, pc}
 8011730:	b118      	cbz	r0, 801173a <_fflush_r+0x1a>
 8011732:	6983      	ldr	r3, [r0, #24]
 8011734:	b90b      	cbnz	r3, 801173a <_fflush_r+0x1a>
 8011736:	f000 f887 	bl	8011848 <__sinit>
 801173a:	4b14      	ldr	r3, [pc, #80]	; (801178c <_fflush_r+0x6c>)
 801173c:	429c      	cmp	r4, r3
 801173e:	d11b      	bne.n	8011778 <_fflush_r+0x58>
 8011740:	686c      	ldr	r4, [r5, #4]
 8011742:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011746:	2b00      	cmp	r3, #0
 8011748:	d0ef      	beq.n	801172a <_fflush_r+0xa>
 801174a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801174c:	07d0      	lsls	r0, r2, #31
 801174e:	d404      	bmi.n	801175a <_fflush_r+0x3a>
 8011750:	0599      	lsls	r1, r3, #22
 8011752:	d402      	bmi.n	801175a <_fflush_r+0x3a>
 8011754:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011756:	f000 f915 	bl	8011984 <__retarget_lock_acquire_recursive>
 801175a:	4628      	mov	r0, r5
 801175c:	4621      	mov	r1, r4
 801175e:	f7ff ff59 	bl	8011614 <__sflush_r>
 8011762:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011764:	07da      	lsls	r2, r3, #31
 8011766:	4605      	mov	r5, r0
 8011768:	d4e0      	bmi.n	801172c <_fflush_r+0xc>
 801176a:	89a3      	ldrh	r3, [r4, #12]
 801176c:	059b      	lsls	r3, r3, #22
 801176e:	d4dd      	bmi.n	801172c <_fflush_r+0xc>
 8011770:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011772:	f000 f908 	bl	8011986 <__retarget_lock_release_recursive>
 8011776:	e7d9      	b.n	801172c <_fflush_r+0xc>
 8011778:	4b05      	ldr	r3, [pc, #20]	; (8011790 <_fflush_r+0x70>)
 801177a:	429c      	cmp	r4, r3
 801177c:	d101      	bne.n	8011782 <_fflush_r+0x62>
 801177e:	68ac      	ldr	r4, [r5, #8]
 8011780:	e7df      	b.n	8011742 <_fflush_r+0x22>
 8011782:	4b04      	ldr	r3, [pc, #16]	; (8011794 <_fflush_r+0x74>)
 8011784:	429c      	cmp	r4, r3
 8011786:	bf08      	it	eq
 8011788:	68ec      	ldreq	r4, [r5, #12]
 801178a:	e7da      	b.n	8011742 <_fflush_r+0x22>
 801178c:	08014784 	.word	0x08014784
 8011790:	080147a4 	.word	0x080147a4
 8011794:	08014764 	.word	0x08014764

08011798 <std>:
 8011798:	2300      	movs	r3, #0
 801179a:	b510      	push	{r4, lr}
 801179c:	4604      	mov	r4, r0
 801179e:	e9c0 3300 	strd	r3, r3, [r0]
 80117a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80117a6:	6083      	str	r3, [r0, #8]
 80117a8:	8181      	strh	r1, [r0, #12]
 80117aa:	6643      	str	r3, [r0, #100]	; 0x64
 80117ac:	81c2      	strh	r2, [r0, #14]
 80117ae:	6183      	str	r3, [r0, #24]
 80117b0:	4619      	mov	r1, r3
 80117b2:	2208      	movs	r2, #8
 80117b4:	305c      	adds	r0, #92	; 0x5c
 80117b6:	f7fd fb69 	bl	800ee8c <memset>
 80117ba:	4b05      	ldr	r3, [pc, #20]	; (80117d0 <std+0x38>)
 80117bc:	6263      	str	r3, [r4, #36]	; 0x24
 80117be:	4b05      	ldr	r3, [pc, #20]	; (80117d4 <std+0x3c>)
 80117c0:	62a3      	str	r3, [r4, #40]	; 0x28
 80117c2:	4b05      	ldr	r3, [pc, #20]	; (80117d8 <std+0x40>)
 80117c4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80117c6:	4b05      	ldr	r3, [pc, #20]	; (80117dc <std+0x44>)
 80117c8:	6224      	str	r4, [r4, #32]
 80117ca:	6323      	str	r3, [r4, #48]	; 0x30
 80117cc:	bd10      	pop	{r4, pc}
 80117ce:	bf00      	nop
 80117d0:	08011aed 	.word	0x08011aed
 80117d4:	08011b0f 	.word	0x08011b0f
 80117d8:	08011b47 	.word	0x08011b47
 80117dc:	08011b6b 	.word	0x08011b6b

080117e0 <_cleanup_r>:
 80117e0:	4901      	ldr	r1, [pc, #4]	; (80117e8 <_cleanup_r+0x8>)
 80117e2:	f000 b8af 	b.w	8011944 <_fwalk_reent>
 80117e6:	bf00      	nop
 80117e8:	08011721 	.word	0x08011721

080117ec <__sfmoreglue>:
 80117ec:	b570      	push	{r4, r5, r6, lr}
 80117ee:	2268      	movs	r2, #104	; 0x68
 80117f0:	1e4d      	subs	r5, r1, #1
 80117f2:	4355      	muls	r5, r2
 80117f4:	460e      	mov	r6, r1
 80117f6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80117fa:	f7ff fa65 	bl	8010cc8 <_malloc_r>
 80117fe:	4604      	mov	r4, r0
 8011800:	b140      	cbz	r0, 8011814 <__sfmoreglue+0x28>
 8011802:	2100      	movs	r1, #0
 8011804:	e9c0 1600 	strd	r1, r6, [r0]
 8011808:	300c      	adds	r0, #12
 801180a:	60a0      	str	r0, [r4, #8]
 801180c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8011810:	f7fd fb3c 	bl	800ee8c <memset>
 8011814:	4620      	mov	r0, r4
 8011816:	bd70      	pop	{r4, r5, r6, pc}

08011818 <__sfp_lock_acquire>:
 8011818:	4801      	ldr	r0, [pc, #4]	; (8011820 <__sfp_lock_acquire+0x8>)
 801181a:	f000 b8b3 	b.w	8011984 <__retarget_lock_acquire_recursive>
 801181e:	bf00      	nop
 8011820:	2000493d 	.word	0x2000493d

08011824 <__sfp_lock_release>:
 8011824:	4801      	ldr	r0, [pc, #4]	; (801182c <__sfp_lock_release+0x8>)
 8011826:	f000 b8ae 	b.w	8011986 <__retarget_lock_release_recursive>
 801182a:	bf00      	nop
 801182c:	2000493d 	.word	0x2000493d

08011830 <__sinit_lock_acquire>:
 8011830:	4801      	ldr	r0, [pc, #4]	; (8011838 <__sinit_lock_acquire+0x8>)
 8011832:	f000 b8a7 	b.w	8011984 <__retarget_lock_acquire_recursive>
 8011836:	bf00      	nop
 8011838:	2000493e 	.word	0x2000493e

0801183c <__sinit_lock_release>:
 801183c:	4801      	ldr	r0, [pc, #4]	; (8011844 <__sinit_lock_release+0x8>)
 801183e:	f000 b8a2 	b.w	8011986 <__retarget_lock_release_recursive>
 8011842:	bf00      	nop
 8011844:	2000493e 	.word	0x2000493e

08011848 <__sinit>:
 8011848:	b510      	push	{r4, lr}
 801184a:	4604      	mov	r4, r0
 801184c:	f7ff fff0 	bl	8011830 <__sinit_lock_acquire>
 8011850:	69a3      	ldr	r3, [r4, #24]
 8011852:	b11b      	cbz	r3, 801185c <__sinit+0x14>
 8011854:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011858:	f7ff bff0 	b.w	801183c <__sinit_lock_release>
 801185c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8011860:	6523      	str	r3, [r4, #80]	; 0x50
 8011862:	4b13      	ldr	r3, [pc, #76]	; (80118b0 <__sinit+0x68>)
 8011864:	4a13      	ldr	r2, [pc, #76]	; (80118b4 <__sinit+0x6c>)
 8011866:	681b      	ldr	r3, [r3, #0]
 8011868:	62a2      	str	r2, [r4, #40]	; 0x28
 801186a:	42a3      	cmp	r3, r4
 801186c:	bf04      	itt	eq
 801186e:	2301      	moveq	r3, #1
 8011870:	61a3      	streq	r3, [r4, #24]
 8011872:	4620      	mov	r0, r4
 8011874:	f000 f820 	bl	80118b8 <__sfp>
 8011878:	6060      	str	r0, [r4, #4]
 801187a:	4620      	mov	r0, r4
 801187c:	f000 f81c 	bl	80118b8 <__sfp>
 8011880:	60a0      	str	r0, [r4, #8]
 8011882:	4620      	mov	r0, r4
 8011884:	f000 f818 	bl	80118b8 <__sfp>
 8011888:	2200      	movs	r2, #0
 801188a:	60e0      	str	r0, [r4, #12]
 801188c:	2104      	movs	r1, #4
 801188e:	6860      	ldr	r0, [r4, #4]
 8011890:	f7ff ff82 	bl	8011798 <std>
 8011894:	68a0      	ldr	r0, [r4, #8]
 8011896:	2201      	movs	r2, #1
 8011898:	2109      	movs	r1, #9
 801189a:	f7ff ff7d 	bl	8011798 <std>
 801189e:	68e0      	ldr	r0, [r4, #12]
 80118a0:	2202      	movs	r2, #2
 80118a2:	2112      	movs	r1, #18
 80118a4:	f7ff ff78 	bl	8011798 <std>
 80118a8:	2301      	movs	r3, #1
 80118aa:	61a3      	str	r3, [r4, #24]
 80118ac:	e7d2      	b.n	8011854 <__sinit+0xc>
 80118ae:	bf00      	nop
 80118b0:	080143e8 	.word	0x080143e8
 80118b4:	080117e1 	.word	0x080117e1

080118b8 <__sfp>:
 80118b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80118ba:	4607      	mov	r7, r0
 80118bc:	f7ff ffac 	bl	8011818 <__sfp_lock_acquire>
 80118c0:	4b1e      	ldr	r3, [pc, #120]	; (801193c <__sfp+0x84>)
 80118c2:	681e      	ldr	r6, [r3, #0]
 80118c4:	69b3      	ldr	r3, [r6, #24]
 80118c6:	b913      	cbnz	r3, 80118ce <__sfp+0x16>
 80118c8:	4630      	mov	r0, r6
 80118ca:	f7ff ffbd 	bl	8011848 <__sinit>
 80118ce:	3648      	adds	r6, #72	; 0x48
 80118d0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80118d4:	3b01      	subs	r3, #1
 80118d6:	d503      	bpl.n	80118e0 <__sfp+0x28>
 80118d8:	6833      	ldr	r3, [r6, #0]
 80118da:	b30b      	cbz	r3, 8011920 <__sfp+0x68>
 80118dc:	6836      	ldr	r6, [r6, #0]
 80118de:	e7f7      	b.n	80118d0 <__sfp+0x18>
 80118e0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80118e4:	b9d5      	cbnz	r5, 801191c <__sfp+0x64>
 80118e6:	4b16      	ldr	r3, [pc, #88]	; (8011940 <__sfp+0x88>)
 80118e8:	60e3      	str	r3, [r4, #12]
 80118ea:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80118ee:	6665      	str	r5, [r4, #100]	; 0x64
 80118f0:	f000 f847 	bl	8011982 <__retarget_lock_init_recursive>
 80118f4:	f7ff ff96 	bl	8011824 <__sfp_lock_release>
 80118f8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80118fc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8011900:	6025      	str	r5, [r4, #0]
 8011902:	61a5      	str	r5, [r4, #24]
 8011904:	2208      	movs	r2, #8
 8011906:	4629      	mov	r1, r5
 8011908:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801190c:	f7fd fabe 	bl	800ee8c <memset>
 8011910:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8011914:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8011918:	4620      	mov	r0, r4
 801191a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801191c:	3468      	adds	r4, #104	; 0x68
 801191e:	e7d9      	b.n	80118d4 <__sfp+0x1c>
 8011920:	2104      	movs	r1, #4
 8011922:	4638      	mov	r0, r7
 8011924:	f7ff ff62 	bl	80117ec <__sfmoreglue>
 8011928:	4604      	mov	r4, r0
 801192a:	6030      	str	r0, [r6, #0]
 801192c:	2800      	cmp	r0, #0
 801192e:	d1d5      	bne.n	80118dc <__sfp+0x24>
 8011930:	f7ff ff78 	bl	8011824 <__sfp_lock_release>
 8011934:	230c      	movs	r3, #12
 8011936:	603b      	str	r3, [r7, #0]
 8011938:	e7ee      	b.n	8011918 <__sfp+0x60>
 801193a:	bf00      	nop
 801193c:	080143e8 	.word	0x080143e8
 8011940:	ffff0001 	.word	0xffff0001

08011944 <_fwalk_reent>:
 8011944:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011948:	4606      	mov	r6, r0
 801194a:	4688      	mov	r8, r1
 801194c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011950:	2700      	movs	r7, #0
 8011952:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011956:	f1b9 0901 	subs.w	r9, r9, #1
 801195a:	d505      	bpl.n	8011968 <_fwalk_reent+0x24>
 801195c:	6824      	ldr	r4, [r4, #0]
 801195e:	2c00      	cmp	r4, #0
 8011960:	d1f7      	bne.n	8011952 <_fwalk_reent+0xe>
 8011962:	4638      	mov	r0, r7
 8011964:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011968:	89ab      	ldrh	r3, [r5, #12]
 801196a:	2b01      	cmp	r3, #1
 801196c:	d907      	bls.n	801197e <_fwalk_reent+0x3a>
 801196e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011972:	3301      	adds	r3, #1
 8011974:	d003      	beq.n	801197e <_fwalk_reent+0x3a>
 8011976:	4629      	mov	r1, r5
 8011978:	4630      	mov	r0, r6
 801197a:	47c0      	blx	r8
 801197c:	4307      	orrs	r7, r0
 801197e:	3568      	adds	r5, #104	; 0x68
 8011980:	e7e9      	b.n	8011956 <_fwalk_reent+0x12>

08011982 <__retarget_lock_init_recursive>:
 8011982:	4770      	bx	lr

08011984 <__retarget_lock_acquire_recursive>:
 8011984:	4770      	bx	lr

08011986 <__retarget_lock_release_recursive>:
 8011986:	4770      	bx	lr

08011988 <__swhatbuf_r>:
 8011988:	b570      	push	{r4, r5, r6, lr}
 801198a:	460e      	mov	r6, r1
 801198c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011990:	2900      	cmp	r1, #0
 8011992:	b096      	sub	sp, #88	; 0x58
 8011994:	4614      	mov	r4, r2
 8011996:	461d      	mov	r5, r3
 8011998:	da08      	bge.n	80119ac <__swhatbuf_r+0x24>
 801199a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801199e:	2200      	movs	r2, #0
 80119a0:	602a      	str	r2, [r5, #0]
 80119a2:	061a      	lsls	r2, r3, #24
 80119a4:	d410      	bmi.n	80119c8 <__swhatbuf_r+0x40>
 80119a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80119aa:	e00e      	b.n	80119ca <__swhatbuf_r+0x42>
 80119ac:	466a      	mov	r2, sp
 80119ae:	f000 f903 	bl	8011bb8 <_fstat_r>
 80119b2:	2800      	cmp	r0, #0
 80119b4:	dbf1      	blt.n	801199a <__swhatbuf_r+0x12>
 80119b6:	9a01      	ldr	r2, [sp, #4]
 80119b8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80119bc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80119c0:	425a      	negs	r2, r3
 80119c2:	415a      	adcs	r2, r3
 80119c4:	602a      	str	r2, [r5, #0]
 80119c6:	e7ee      	b.n	80119a6 <__swhatbuf_r+0x1e>
 80119c8:	2340      	movs	r3, #64	; 0x40
 80119ca:	2000      	movs	r0, #0
 80119cc:	6023      	str	r3, [r4, #0]
 80119ce:	b016      	add	sp, #88	; 0x58
 80119d0:	bd70      	pop	{r4, r5, r6, pc}
	...

080119d4 <__smakebuf_r>:
 80119d4:	898b      	ldrh	r3, [r1, #12]
 80119d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80119d8:	079d      	lsls	r5, r3, #30
 80119da:	4606      	mov	r6, r0
 80119dc:	460c      	mov	r4, r1
 80119de:	d507      	bpl.n	80119f0 <__smakebuf_r+0x1c>
 80119e0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80119e4:	6023      	str	r3, [r4, #0]
 80119e6:	6123      	str	r3, [r4, #16]
 80119e8:	2301      	movs	r3, #1
 80119ea:	6163      	str	r3, [r4, #20]
 80119ec:	b002      	add	sp, #8
 80119ee:	bd70      	pop	{r4, r5, r6, pc}
 80119f0:	ab01      	add	r3, sp, #4
 80119f2:	466a      	mov	r2, sp
 80119f4:	f7ff ffc8 	bl	8011988 <__swhatbuf_r>
 80119f8:	9900      	ldr	r1, [sp, #0]
 80119fa:	4605      	mov	r5, r0
 80119fc:	4630      	mov	r0, r6
 80119fe:	f7ff f963 	bl	8010cc8 <_malloc_r>
 8011a02:	b948      	cbnz	r0, 8011a18 <__smakebuf_r+0x44>
 8011a04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011a08:	059a      	lsls	r2, r3, #22
 8011a0a:	d4ef      	bmi.n	80119ec <__smakebuf_r+0x18>
 8011a0c:	f023 0303 	bic.w	r3, r3, #3
 8011a10:	f043 0302 	orr.w	r3, r3, #2
 8011a14:	81a3      	strh	r3, [r4, #12]
 8011a16:	e7e3      	b.n	80119e0 <__smakebuf_r+0xc>
 8011a18:	4b0d      	ldr	r3, [pc, #52]	; (8011a50 <__smakebuf_r+0x7c>)
 8011a1a:	62b3      	str	r3, [r6, #40]	; 0x28
 8011a1c:	89a3      	ldrh	r3, [r4, #12]
 8011a1e:	6020      	str	r0, [r4, #0]
 8011a20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011a24:	81a3      	strh	r3, [r4, #12]
 8011a26:	9b00      	ldr	r3, [sp, #0]
 8011a28:	6163      	str	r3, [r4, #20]
 8011a2a:	9b01      	ldr	r3, [sp, #4]
 8011a2c:	6120      	str	r0, [r4, #16]
 8011a2e:	b15b      	cbz	r3, 8011a48 <__smakebuf_r+0x74>
 8011a30:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011a34:	4630      	mov	r0, r6
 8011a36:	f000 f8d1 	bl	8011bdc <_isatty_r>
 8011a3a:	b128      	cbz	r0, 8011a48 <__smakebuf_r+0x74>
 8011a3c:	89a3      	ldrh	r3, [r4, #12]
 8011a3e:	f023 0303 	bic.w	r3, r3, #3
 8011a42:	f043 0301 	orr.w	r3, r3, #1
 8011a46:	81a3      	strh	r3, [r4, #12]
 8011a48:	89a0      	ldrh	r0, [r4, #12]
 8011a4a:	4305      	orrs	r5, r0
 8011a4c:	81a5      	strh	r5, [r4, #12]
 8011a4e:	e7cd      	b.n	80119ec <__smakebuf_r+0x18>
 8011a50:	080117e1 	.word	0x080117e1

08011a54 <_malloc_usable_size_r>:
 8011a54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011a58:	1f18      	subs	r0, r3, #4
 8011a5a:	2b00      	cmp	r3, #0
 8011a5c:	bfbc      	itt	lt
 8011a5e:	580b      	ldrlt	r3, [r1, r0]
 8011a60:	18c0      	addlt	r0, r0, r3
 8011a62:	4770      	bx	lr

08011a64 <_raise_r>:
 8011a64:	291f      	cmp	r1, #31
 8011a66:	b538      	push	{r3, r4, r5, lr}
 8011a68:	4604      	mov	r4, r0
 8011a6a:	460d      	mov	r5, r1
 8011a6c:	d904      	bls.n	8011a78 <_raise_r+0x14>
 8011a6e:	2316      	movs	r3, #22
 8011a70:	6003      	str	r3, [r0, #0]
 8011a72:	f04f 30ff 	mov.w	r0, #4294967295
 8011a76:	bd38      	pop	{r3, r4, r5, pc}
 8011a78:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8011a7a:	b112      	cbz	r2, 8011a82 <_raise_r+0x1e>
 8011a7c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011a80:	b94b      	cbnz	r3, 8011a96 <_raise_r+0x32>
 8011a82:	4620      	mov	r0, r4
 8011a84:	f000 f830 	bl	8011ae8 <_getpid_r>
 8011a88:	462a      	mov	r2, r5
 8011a8a:	4601      	mov	r1, r0
 8011a8c:	4620      	mov	r0, r4
 8011a8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011a92:	f000 b817 	b.w	8011ac4 <_kill_r>
 8011a96:	2b01      	cmp	r3, #1
 8011a98:	d00a      	beq.n	8011ab0 <_raise_r+0x4c>
 8011a9a:	1c59      	adds	r1, r3, #1
 8011a9c:	d103      	bne.n	8011aa6 <_raise_r+0x42>
 8011a9e:	2316      	movs	r3, #22
 8011aa0:	6003      	str	r3, [r0, #0]
 8011aa2:	2001      	movs	r0, #1
 8011aa4:	e7e7      	b.n	8011a76 <_raise_r+0x12>
 8011aa6:	2400      	movs	r4, #0
 8011aa8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011aac:	4628      	mov	r0, r5
 8011aae:	4798      	blx	r3
 8011ab0:	2000      	movs	r0, #0
 8011ab2:	e7e0      	b.n	8011a76 <_raise_r+0x12>

08011ab4 <raise>:
 8011ab4:	4b02      	ldr	r3, [pc, #8]	; (8011ac0 <raise+0xc>)
 8011ab6:	4601      	mov	r1, r0
 8011ab8:	6818      	ldr	r0, [r3, #0]
 8011aba:	f7ff bfd3 	b.w	8011a64 <_raise_r>
 8011abe:	bf00      	nop
 8011ac0:	2000001c 	.word	0x2000001c

08011ac4 <_kill_r>:
 8011ac4:	b538      	push	{r3, r4, r5, lr}
 8011ac6:	4d07      	ldr	r5, [pc, #28]	; (8011ae4 <_kill_r+0x20>)
 8011ac8:	2300      	movs	r3, #0
 8011aca:	4604      	mov	r4, r0
 8011acc:	4608      	mov	r0, r1
 8011ace:	4611      	mov	r1, r2
 8011ad0:	602b      	str	r3, [r5, #0]
 8011ad2:	f7f2 fbbf 	bl	8004254 <_kill>
 8011ad6:	1c43      	adds	r3, r0, #1
 8011ad8:	d102      	bne.n	8011ae0 <_kill_r+0x1c>
 8011ada:	682b      	ldr	r3, [r5, #0]
 8011adc:	b103      	cbz	r3, 8011ae0 <_kill_r+0x1c>
 8011ade:	6023      	str	r3, [r4, #0]
 8011ae0:	bd38      	pop	{r3, r4, r5, pc}
 8011ae2:	bf00      	nop
 8011ae4:	20004938 	.word	0x20004938

08011ae8 <_getpid_r>:
 8011ae8:	f7f2 bbac 	b.w	8004244 <_getpid>

08011aec <__sread>:
 8011aec:	b510      	push	{r4, lr}
 8011aee:	460c      	mov	r4, r1
 8011af0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011af4:	f000 f894 	bl	8011c20 <_read_r>
 8011af8:	2800      	cmp	r0, #0
 8011afa:	bfab      	itete	ge
 8011afc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8011afe:	89a3      	ldrhlt	r3, [r4, #12]
 8011b00:	181b      	addge	r3, r3, r0
 8011b02:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011b06:	bfac      	ite	ge
 8011b08:	6563      	strge	r3, [r4, #84]	; 0x54
 8011b0a:	81a3      	strhlt	r3, [r4, #12]
 8011b0c:	bd10      	pop	{r4, pc}

08011b0e <__swrite>:
 8011b0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011b12:	461f      	mov	r7, r3
 8011b14:	898b      	ldrh	r3, [r1, #12]
 8011b16:	05db      	lsls	r3, r3, #23
 8011b18:	4605      	mov	r5, r0
 8011b1a:	460c      	mov	r4, r1
 8011b1c:	4616      	mov	r6, r2
 8011b1e:	d505      	bpl.n	8011b2c <__swrite+0x1e>
 8011b20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011b24:	2302      	movs	r3, #2
 8011b26:	2200      	movs	r2, #0
 8011b28:	f000 f868 	bl	8011bfc <_lseek_r>
 8011b2c:	89a3      	ldrh	r3, [r4, #12]
 8011b2e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011b32:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011b36:	81a3      	strh	r3, [r4, #12]
 8011b38:	4632      	mov	r2, r6
 8011b3a:	463b      	mov	r3, r7
 8011b3c:	4628      	mov	r0, r5
 8011b3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011b42:	f000 b817 	b.w	8011b74 <_write_r>

08011b46 <__sseek>:
 8011b46:	b510      	push	{r4, lr}
 8011b48:	460c      	mov	r4, r1
 8011b4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011b4e:	f000 f855 	bl	8011bfc <_lseek_r>
 8011b52:	1c43      	adds	r3, r0, #1
 8011b54:	89a3      	ldrh	r3, [r4, #12]
 8011b56:	bf15      	itete	ne
 8011b58:	6560      	strne	r0, [r4, #84]	; 0x54
 8011b5a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8011b5e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011b62:	81a3      	strheq	r3, [r4, #12]
 8011b64:	bf18      	it	ne
 8011b66:	81a3      	strhne	r3, [r4, #12]
 8011b68:	bd10      	pop	{r4, pc}

08011b6a <__sclose>:
 8011b6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011b6e:	f000 b813 	b.w	8011b98 <_close_r>
	...

08011b74 <_write_r>:
 8011b74:	b538      	push	{r3, r4, r5, lr}
 8011b76:	4d07      	ldr	r5, [pc, #28]	; (8011b94 <_write_r+0x20>)
 8011b78:	4604      	mov	r4, r0
 8011b7a:	4608      	mov	r0, r1
 8011b7c:	4611      	mov	r1, r2
 8011b7e:	2200      	movs	r2, #0
 8011b80:	602a      	str	r2, [r5, #0]
 8011b82:	461a      	mov	r2, r3
 8011b84:	f7f2 fb9d 	bl	80042c2 <_write>
 8011b88:	1c43      	adds	r3, r0, #1
 8011b8a:	d102      	bne.n	8011b92 <_write_r+0x1e>
 8011b8c:	682b      	ldr	r3, [r5, #0]
 8011b8e:	b103      	cbz	r3, 8011b92 <_write_r+0x1e>
 8011b90:	6023      	str	r3, [r4, #0]
 8011b92:	bd38      	pop	{r3, r4, r5, pc}
 8011b94:	20004938 	.word	0x20004938

08011b98 <_close_r>:
 8011b98:	b538      	push	{r3, r4, r5, lr}
 8011b9a:	4d06      	ldr	r5, [pc, #24]	; (8011bb4 <_close_r+0x1c>)
 8011b9c:	2300      	movs	r3, #0
 8011b9e:	4604      	mov	r4, r0
 8011ba0:	4608      	mov	r0, r1
 8011ba2:	602b      	str	r3, [r5, #0]
 8011ba4:	f7f2 fba9 	bl	80042fa <_close>
 8011ba8:	1c43      	adds	r3, r0, #1
 8011baa:	d102      	bne.n	8011bb2 <_close_r+0x1a>
 8011bac:	682b      	ldr	r3, [r5, #0]
 8011bae:	b103      	cbz	r3, 8011bb2 <_close_r+0x1a>
 8011bb0:	6023      	str	r3, [r4, #0]
 8011bb2:	bd38      	pop	{r3, r4, r5, pc}
 8011bb4:	20004938 	.word	0x20004938

08011bb8 <_fstat_r>:
 8011bb8:	b538      	push	{r3, r4, r5, lr}
 8011bba:	4d07      	ldr	r5, [pc, #28]	; (8011bd8 <_fstat_r+0x20>)
 8011bbc:	2300      	movs	r3, #0
 8011bbe:	4604      	mov	r4, r0
 8011bc0:	4608      	mov	r0, r1
 8011bc2:	4611      	mov	r1, r2
 8011bc4:	602b      	str	r3, [r5, #0]
 8011bc6:	f7f2 fba4 	bl	8004312 <_fstat>
 8011bca:	1c43      	adds	r3, r0, #1
 8011bcc:	d102      	bne.n	8011bd4 <_fstat_r+0x1c>
 8011bce:	682b      	ldr	r3, [r5, #0]
 8011bd0:	b103      	cbz	r3, 8011bd4 <_fstat_r+0x1c>
 8011bd2:	6023      	str	r3, [r4, #0]
 8011bd4:	bd38      	pop	{r3, r4, r5, pc}
 8011bd6:	bf00      	nop
 8011bd8:	20004938 	.word	0x20004938

08011bdc <_isatty_r>:
 8011bdc:	b538      	push	{r3, r4, r5, lr}
 8011bde:	4d06      	ldr	r5, [pc, #24]	; (8011bf8 <_isatty_r+0x1c>)
 8011be0:	2300      	movs	r3, #0
 8011be2:	4604      	mov	r4, r0
 8011be4:	4608      	mov	r0, r1
 8011be6:	602b      	str	r3, [r5, #0]
 8011be8:	f7f2 fba3 	bl	8004332 <_isatty>
 8011bec:	1c43      	adds	r3, r0, #1
 8011bee:	d102      	bne.n	8011bf6 <_isatty_r+0x1a>
 8011bf0:	682b      	ldr	r3, [r5, #0]
 8011bf2:	b103      	cbz	r3, 8011bf6 <_isatty_r+0x1a>
 8011bf4:	6023      	str	r3, [r4, #0]
 8011bf6:	bd38      	pop	{r3, r4, r5, pc}
 8011bf8:	20004938 	.word	0x20004938

08011bfc <_lseek_r>:
 8011bfc:	b538      	push	{r3, r4, r5, lr}
 8011bfe:	4d07      	ldr	r5, [pc, #28]	; (8011c1c <_lseek_r+0x20>)
 8011c00:	4604      	mov	r4, r0
 8011c02:	4608      	mov	r0, r1
 8011c04:	4611      	mov	r1, r2
 8011c06:	2200      	movs	r2, #0
 8011c08:	602a      	str	r2, [r5, #0]
 8011c0a:	461a      	mov	r2, r3
 8011c0c:	f7f2 fb9c 	bl	8004348 <_lseek>
 8011c10:	1c43      	adds	r3, r0, #1
 8011c12:	d102      	bne.n	8011c1a <_lseek_r+0x1e>
 8011c14:	682b      	ldr	r3, [r5, #0]
 8011c16:	b103      	cbz	r3, 8011c1a <_lseek_r+0x1e>
 8011c18:	6023      	str	r3, [r4, #0]
 8011c1a:	bd38      	pop	{r3, r4, r5, pc}
 8011c1c:	20004938 	.word	0x20004938

08011c20 <_read_r>:
 8011c20:	b538      	push	{r3, r4, r5, lr}
 8011c22:	4d07      	ldr	r5, [pc, #28]	; (8011c40 <_read_r+0x20>)
 8011c24:	4604      	mov	r4, r0
 8011c26:	4608      	mov	r0, r1
 8011c28:	4611      	mov	r1, r2
 8011c2a:	2200      	movs	r2, #0
 8011c2c:	602a      	str	r2, [r5, #0]
 8011c2e:	461a      	mov	r2, r3
 8011c30:	f7f2 fb2a 	bl	8004288 <_read>
 8011c34:	1c43      	adds	r3, r0, #1
 8011c36:	d102      	bne.n	8011c3e <_read_r+0x1e>
 8011c38:	682b      	ldr	r3, [r5, #0]
 8011c3a:	b103      	cbz	r3, 8011c3e <_read_r+0x1e>
 8011c3c:	6023      	str	r3, [r4, #0]
 8011c3e:	bd38      	pop	{r3, r4, r5, pc}
 8011c40:	20004938 	.word	0x20004938

08011c44 <cosf>:
 8011c44:	ee10 3a10 	vmov	r3, s0
 8011c48:	b507      	push	{r0, r1, r2, lr}
 8011c4a:	4a1e      	ldr	r2, [pc, #120]	; (8011cc4 <cosf+0x80>)
 8011c4c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8011c50:	4293      	cmp	r3, r2
 8011c52:	dc06      	bgt.n	8011c62 <cosf+0x1e>
 8011c54:	eddf 0a1c 	vldr	s1, [pc, #112]	; 8011cc8 <cosf+0x84>
 8011c58:	b003      	add	sp, #12
 8011c5a:	f85d eb04 	ldr.w	lr, [sp], #4
 8011c5e:	f001 bce7 	b.w	8013630 <__kernel_cosf>
 8011c62:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8011c66:	db04      	blt.n	8011c72 <cosf+0x2e>
 8011c68:	ee30 0a40 	vsub.f32	s0, s0, s0
 8011c6c:	b003      	add	sp, #12
 8011c6e:	f85d fb04 	ldr.w	pc, [sp], #4
 8011c72:	4668      	mov	r0, sp
 8011c74:	f001 fb9c 	bl	80133b0 <__ieee754_rem_pio2f>
 8011c78:	f000 0003 	and.w	r0, r0, #3
 8011c7c:	2801      	cmp	r0, #1
 8011c7e:	d009      	beq.n	8011c94 <cosf+0x50>
 8011c80:	2802      	cmp	r0, #2
 8011c82:	d010      	beq.n	8011ca6 <cosf+0x62>
 8011c84:	b9b0      	cbnz	r0, 8011cb4 <cosf+0x70>
 8011c86:	eddd 0a01 	vldr	s1, [sp, #4]
 8011c8a:	ed9d 0a00 	vldr	s0, [sp]
 8011c8e:	f001 fccf 	bl	8013630 <__kernel_cosf>
 8011c92:	e7eb      	b.n	8011c6c <cosf+0x28>
 8011c94:	eddd 0a01 	vldr	s1, [sp, #4]
 8011c98:	ed9d 0a00 	vldr	s0, [sp]
 8011c9c:	f001 ff9e 	bl	8013bdc <__kernel_sinf>
 8011ca0:	eeb1 0a40 	vneg.f32	s0, s0
 8011ca4:	e7e2      	b.n	8011c6c <cosf+0x28>
 8011ca6:	eddd 0a01 	vldr	s1, [sp, #4]
 8011caa:	ed9d 0a00 	vldr	s0, [sp]
 8011cae:	f001 fcbf 	bl	8013630 <__kernel_cosf>
 8011cb2:	e7f5      	b.n	8011ca0 <cosf+0x5c>
 8011cb4:	eddd 0a01 	vldr	s1, [sp, #4]
 8011cb8:	ed9d 0a00 	vldr	s0, [sp]
 8011cbc:	2001      	movs	r0, #1
 8011cbe:	f001 ff8d 	bl	8013bdc <__kernel_sinf>
 8011cc2:	e7d3      	b.n	8011c6c <cosf+0x28>
 8011cc4:	3f490fd8 	.word	0x3f490fd8
 8011cc8:	00000000 	.word	0x00000000

08011ccc <sinf>:
 8011ccc:	ee10 3a10 	vmov	r3, s0
 8011cd0:	b507      	push	{r0, r1, r2, lr}
 8011cd2:	4a1f      	ldr	r2, [pc, #124]	; (8011d50 <sinf+0x84>)
 8011cd4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8011cd8:	4293      	cmp	r3, r2
 8011cda:	dc07      	bgt.n	8011cec <sinf+0x20>
 8011cdc:	eddf 0a1d 	vldr	s1, [pc, #116]	; 8011d54 <sinf+0x88>
 8011ce0:	2000      	movs	r0, #0
 8011ce2:	b003      	add	sp, #12
 8011ce4:	f85d eb04 	ldr.w	lr, [sp], #4
 8011ce8:	f001 bf78 	b.w	8013bdc <__kernel_sinf>
 8011cec:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8011cf0:	db04      	blt.n	8011cfc <sinf+0x30>
 8011cf2:	ee30 0a40 	vsub.f32	s0, s0, s0
 8011cf6:	b003      	add	sp, #12
 8011cf8:	f85d fb04 	ldr.w	pc, [sp], #4
 8011cfc:	4668      	mov	r0, sp
 8011cfe:	f001 fb57 	bl	80133b0 <__ieee754_rem_pio2f>
 8011d02:	f000 0003 	and.w	r0, r0, #3
 8011d06:	2801      	cmp	r0, #1
 8011d08:	d00a      	beq.n	8011d20 <sinf+0x54>
 8011d0a:	2802      	cmp	r0, #2
 8011d0c:	d00f      	beq.n	8011d2e <sinf+0x62>
 8011d0e:	b9c0      	cbnz	r0, 8011d42 <sinf+0x76>
 8011d10:	eddd 0a01 	vldr	s1, [sp, #4]
 8011d14:	ed9d 0a00 	vldr	s0, [sp]
 8011d18:	2001      	movs	r0, #1
 8011d1a:	f001 ff5f 	bl	8013bdc <__kernel_sinf>
 8011d1e:	e7ea      	b.n	8011cf6 <sinf+0x2a>
 8011d20:	eddd 0a01 	vldr	s1, [sp, #4]
 8011d24:	ed9d 0a00 	vldr	s0, [sp]
 8011d28:	f001 fc82 	bl	8013630 <__kernel_cosf>
 8011d2c:	e7e3      	b.n	8011cf6 <sinf+0x2a>
 8011d2e:	eddd 0a01 	vldr	s1, [sp, #4]
 8011d32:	ed9d 0a00 	vldr	s0, [sp]
 8011d36:	2001      	movs	r0, #1
 8011d38:	f001 ff50 	bl	8013bdc <__kernel_sinf>
 8011d3c:	eeb1 0a40 	vneg.f32	s0, s0
 8011d40:	e7d9      	b.n	8011cf6 <sinf+0x2a>
 8011d42:	eddd 0a01 	vldr	s1, [sp, #4]
 8011d46:	ed9d 0a00 	vldr	s0, [sp]
 8011d4a:	f001 fc71 	bl	8013630 <__kernel_cosf>
 8011d4e:	e7f5      	b.n	8011d3c <sinf+0x70>
 8011d50:	3f490fd8 	.word	0x3f490fd8
 8011d54:	00000000 	.word	0x00000000

08011d58 <pow>:
 8011d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011d5a:	ed2d 8b02 	vpush	{d8}
 8011d5e:	eeb0 8a40 	vmov.f32	s16, s0
 8011d62:	eef0 8a60 	vmov.f32	s17, s1
 8011d66:	ec55 4b11 	vmov	r4, r5, d1
 8011d6a:	f000 f8ed 	bl	8011f48 <__ieee754_pow>
 8011d6e:	4622      	mov	r2, r4
 8011d70:	462b      	mov	r3, r5
 8011d72:	4620      	mov	r0, r4
 8011d74:	4629      	mov	r1, r5
 8011d76:	ec57 6b10 	vmov	r6, r7, d0
 8011d7a:	f7ee fed7 	bl	8000b2c <__aeabi_dcmpun>
 8011d7e:	2800      	cmp	r0, #0
 8011d80:	d13b      	bne.n	8011dfa <pow+0xa2>
 8011d82:	ec51 0b18 	vmov	r0, r1, d8
 8011d86:	2200      	movs	r2, #0
 8011d88:	2300      	movs	r3, #0
 8011d8a:	f7ee fe9d 	bl	8000ac8 <__aeabi_dcmpeq>
 8011d8e:	b1b8      	cbz	r0, 8011dc0 <pow+0x68>
 8011d90:	2200      	movs	r2, #0
 8011d92:	2300      	movs	r3, #0
 8011d94:	4620      	mov	r0, r4
 8011d96:	4629      	mov	r1, r5
 8011d98:	f7ee fe96 	bl	8000ac8 <__aeabi_dcmpeq>
 8011d9c:	2800      	cmp	r0, #0
 8011d9e:	d146      	bne.n	8011e2e <pow+0xd6>
 8011da0:	ec45 4b10 	vmov	d0, r4, r5
 8011da4:	f001 ffbd 	bl	8013d22 <finite>
 8011da8:	b338      	cbz	r0, 8011dfa <pow+0xa2>
 8011daa:	2200      	movs	r2, #0
 8011dac:	2300      	movs	r3, #0
 8011dae:	4620      	mov	r0, r4
 8011db0:	4629      	mov	r1, r5
 8011db2:	f7ee fe93 	bl	8000adc <__aeabi_dcmplt>
 8011db6:	b300      	cbz	r0, 8011dfa <pow+0xa2>
 8011db8:	f7fd f830 	bl	800ee1c <__errno>
 8011dbc:	2322      	movs	r3, #34	; 0x22
 8011dbe:	e01b      	b.n	8011df8 <pow+0xa0>
 8011dc0:	ec47 6b10 	vmov	d0, r6, r7
 8011dc4:	f001 ffad 	bl	8013d22 <finite>
 8011dc8:	b9e0      	cbnz	r0, 8011e04 <pow+0xac>
 8011dca:	eeb0 0a48 	vmov.f32	s0, s16
 8011dce:	eef0 0a68 	vmov.f32	s1, s17
 8011dd2:	f001 ffa6 	bl	8013d22 <finite>
 8011dd6:	b1a8      	cbz	r0, 8011e04 <pow+0xac>
 8011dd8:	ec45 4b10 	vmov	d0, r4, r5
 8011ddc:	f001 ffa1 	bl	8013d22 <finite>
 8011de0:	b180      	cbz	r0, 8011e04 <pow+0xac>
 8011de2:	4632      	mov	r2, r6
 8011de4:	463b      	mov	r3, r7
 8011de6:	4630      	mov	r0, r6
 8011de8:	4639      	mov	r1, r7
 8011dea:	f7ee fe9f 	bl	8000b2c <__aeabi_dcmpun>
 8011dee:	2800      	cmp	r0, #0
 8011df0:	d0e2      	beq.n	8011db8 <pow+0x60>
 8011df2:	f7fd f813 	bl	800ee1c <__errno>
 8011df6:	2321      	movs	r3, #33	; 0x21
 8011df8:	6003      	str	r3, [r0, #0]
 8011dfa:	ecbd 8b02 	vpop	{d8}
 8011dfe:	ec47 6b10 	vmov	d0, r6, r7
 8011e02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011e04:	2200      	movs	r2, #0
 8011e06:	2300      	movs	r3, #0
 8011e08:	4630      	mov	r0, r6
 8011e0a:	4639      	mov	r1, r7
 8011e0c:	f7ee fe5c 	bl	8000ac8 <__aeabi_dcmpeq>
 8011e10:	2800      	cmp	r0, #0
 8011e12:	d0f2      	beq.n	8011dfa <pow+0xa2>
 8011e14:	eeb0 0a48 	vmov.f32	s0, s16
 8011e18:	eef0 0a68 	vmov.f32	s1, s17
 8011e1c:	f001 ff81 	bl	8013d22 <finite>
 8011e20:	2800      	cmp	r0, #0
 8011e22:	d0ea      	beq.n	8011dfa <pow+0xa2>
 8011e24:	ec45 4b10 	vmov	d0, r4, r5
 8011e28:	f001 ff7b 	bl	8013d22 <finite>
 8011e2c:	e7c3      	b.n	8011db6 <pow+0x5e>
 8011e2e:	4f01      	ldr	r7, [pc, #4]	; (8011e34 <pow+0xdc>)
 8011e30:	2600      	movs	r6, #0
 8011e32:	e7e2      	b.n	8011dfa <pow+0xa2>
 8011e34:	3ff00000 	.word	0x3ff00000

08011e38 <asinf>:
 8011e38:	b508      	push	{r3, lr}
 8011e3a:	ed2d 8b02 	vpush	{d8}
 8011e3e:	eeb0 8a40 	vmov.f32	s16, s0
 8011e42:	f000 fe61 	bl	8012b08 <__ieee754_asinf>
 8011e46:	eeb4 8a48 	vcmp.f32	s16, s16
 8011e4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e4e:	eef0 8a40 	vmov.f32	s17, s0
 8011e52:	d615      	bvs.n	8011e80 <asinf+0x48>
 8011e54:	eeb0 0a48 	vmov.f32	s0, s16
 8011e58:	f002 f8c8 	bl	8013fec <fabsf>
 8011e5c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8011e60:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8011e64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e68:	dd0a      	ble.n	8011e80 <asinf+0x48>
 8011e6a:	f7fc ffd7 	bl	800ee1c <__errno>
 8011e6e:	ecbd 8b02 	vpop	{d8}
 8011e72:	2321      	movs	r3, #33	; 0x21
 8011e74:	6003      	str	r3, [r0, #0]
 8011e76:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8011e7a:	4804      	ldr	r0, [pc, #16]	; (8011e8c <asinf+0x54>)
 8011e7c:	f002 b90c 	b.w	8014098 <nanf>
 8011e80:	eeb0 0a68 	vmov.f32	s0, s17
 8011e84:	ecbd 8b02 	vpop	{d8}
 8011e88:	bd08      	pop	{r3, pc}
 8011e8a:	bf00      	nop
 8011e8c:	08014658 	.word	0x08014658

08011e90 <atan2f>:
 8011e90:	f000 bf20 	b.w	8012cd4 <__ieee754_atan2f>

08011e94 <powf>:
 8011e94:	b508      	push	{r3, lr}
 8011e96:	ed2d 8b04 	vpush	{d8-d9}
 8011e9a:	eeb0 8a60 	vmov.f32	s16, s1
 8011e9e:	eeb0 9a40 	vmov.f32	s18, s0
 8011ea2:	f000 ffb7 	bl	8012e14 <__ieee754_powf>
 8011ea6:	eeb4 8a48 	vcmp.f32	s16, s16
 8011eaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011eae:	eef0 8a40 	vmov.f32	s17, s0
 8011eb2:	d63e      	bvs.n	8011f32 <powf+0x9e>
 8011eb4:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8011eb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ebc:	d112      	bne.n	8011ee4 <powf+0x50>
 8011ebe:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8011ec2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ec6:	d039      	beq.n	8011f3c <powf+0xa8>
 8011ec8:	eeb0 0a48 	vmov.f32	s0, s16
 8011ecc:	f002 f895 	bl	8013ffa <finitef>
 8011ed0:	b378      	cbz	r0, 8011f32 <powf+0x9e>
 8011ed2:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8011ed6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011eda:	d52a      	bpl.n	8011f32 <powf+0x9e>
 8011edc:	f7fc ff9e 	bl	800ee1c <__errno>
 8011ee0:	2322      	movs	r3, #34	; 0x22
 8011ee2:	e014      	b.n	8011f0e <powf+0x7a>
 8011ee4:	f002 f889 	bl	8013ffa <finitef>
 8011ee8:	b998      	cbnz	r0, 8011f12 <powf+0x7e>
 8011eea:	eeb0 0a49 	vmov.f32	s0, s18
 8011eee:	f002 f884 	bl	8013ffa <finitef>
 8011ef2:	b170      	cbz	r0, 8011f12 <powf+0x7e>
 8011ef4:	eeb0 0a48 	vmov.f32	s0, s16
 8011ef8:	f002 f87f 	bl	8013ffa <finitef>
 8011efc:	b148      	cbz	r0, 8011f12 <powf+0x7e>
 8011efe:	eef4 8a68 	vcmp.f32	s17, s17
 8011f02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f06:	d7e9      	bvc.n	8011edc <powf+0x48>
 8011f08:	f7fc ff88 	bl	800ee1c <__errno>
 8011f0c:	2321      	movs	r3, #33	; 0x21
 8011f0e:	6003      	str	r3, [r0, #0]
 8011f10:	e00f      	b.n	8011f32 <powf+0x9e>
 8011f12:	eef5 8a40 	vcmp.f32	s17, #0.0
 8011f16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f1a:	d10a      	bne.n	8011f32 <powf+0x9e>
 8011f1c:	eeb0 0a49 	vmov.f32	s0, s18
 8011f20:	f002 f86b 	bl	8013ffa <finitef>
 8011f24:	b128      	cbz	r0, 8011f32 <powf+0x9e>
 8011f26:	eeb0 0a48 	vmov.f32	s0, s16
 8011f2a:	f002 f866 	bl	8013ffa <finitef>
 8011f2e:	2800      	cmp	r0, #0
 8011f30:	d1d4      	bne.n	8011edc <powf+0x48>
 8011f32:	eeb0 0a68 	vmov.f32	s0, s17
 8011f36:	ecbd 8b04 	vpop	{d8-d9}
 8011f3a:	bd08      	pop	{r3, pc}
 8011f3c:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8011f40:	e7f7      	b.n	8011f32 <powf+0x9e>
 8011f42:	0000      	movs	r0, r0
 8011f44:	0000      	movs	r0, r0
	...

08011f48 <__ieee754_pow>:
 8011f48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f4c:	ed2d 8b06 	vpush	{d8-d10}
 8011f50:	b089      	sub	sp, #36	; 0x24
 8011f52:	ed8d 1b00 	vstr	d1, [sp]
 8011f56:	e9dd 2900 	ldrd	r2, r9, [sp]
 8011f5a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8011f5e:	ea58 0102 	orrs.w	r1, r8, r2
 8011f62:	ec57 6b10 	vmov	r6, r7, d0
 8011f66:	d115      	bne.n	8011f94 <__ieee754_pow+0x4c>
 8011f68:	19b3      	adds	r3, r6, r6
 8011f6a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8011f6e:	4152      	adcs	r2, r2
 8011f70:	4299      	cmp	r1, r3
 8011f72:	4b89      	ldr	r3, [pc, #548]	; (8012198 <__ieee754_pow+0x250>)
 8011f74:	4193      	sbcs	r3, r2
 8011f76:	f080 84d2 	bcs.w	801291e <__ieee754_pow+0x9d6>
 8011f7a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011f7e:	4630      	mov	r0, r6
 8011f80:	4639      	mov	r1, r7
 8011f82:	f7ee f983 	bl	800028c <__adddf3>
 8011f86:	ec41 0b10 	vmov	d0, r0, r1
 8011f8a:	b009      	add	sp, #36	; 0x24
 8011f8c:	ecbd 8b06 	vpop	{d8-d10}
 8011f90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f94:	4b81      	ldr	r3, [pc, #516]	; (801219c <__ieee754_pow+0x254>)
 8011f96:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8011f9a:	429c      	cmp	r4, r3
 8011f9c:	ee10 aa10 	vmov	sl, s0
 8011fa0:	463d      	mov	r5, r7
 8011fa2:	dc06      	bgt.n	8011fb2 <__ieee754_pow+0x6a>
 8011fa4:	d101      	bne.n	8011faa <__ieee754_pow+0x62>
 8011fa6:	2e00      	cmp	r6, #0
 8011fa8:	d1e7      	bne.n	8011f7a <__ieee754_pow+0x32>
 8011faa:	4598      	cmp	r8, r3
 8011fac:	dc01      	bgt.n	8011fb2 <__ieee754_pow+0x6a>
 8011fae:	d10f      	bne.n	8011fd0 <__ieee754_pow+0x88>
 8011fb0:	b172      	cbz	r2, 8011fd0 <__ieee754_pow+0x88>
 8011fb2:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8011fb6:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8011fba:	ea55 050a 	orrs.w	r5, r5, sl
 8011fbe:	d1dc      	bne.n	8011f7a <__ieee754_pow+0x32>
 8011fc0:	e9dd 3200 	ldrd	r3, r2, [sp]
 8011fc4:	18db      	adds	r3, r3, r3
 8011fc6:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8011fca:	4152      	adcs	r2, r2
 8011fcc:	429d      	cmp	r5, r3
 8011fce:	e7d0      	b.n	8011f72 <__ieee754_pow+0x2a>
 8011fd0:	2d00      	cmp	r5, #0
 8011fd2:	da3b      	bge.n	801204c <__ieee754_pow+0x104>
 8011fd4:	4b72      	ldr	r3, [pc, #456]	; (80121a0 <__ieee754_pow+0x258>)
 8011fd6:	4598      	cmp	r8, r3
 8011fd8:	dc51      	bgt.n	801207e <__ieee754_pow+0x136>
 8011fda:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8011fde:	4598      	cmp	r8, r3
 8011fe0:	f340 84ac 	ble.w	801293c <__ieee754_pow+0x9f4>
 8011fe4:	ea4f 5328 	mov.w	r3, r8, asr #20
 8011fe8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8011fec:	2b14      	cmp	r3, #20
 8011fee:	dd0f      	ble.n	8012010 <__ieee754_pow+0xc8>
 8011ff0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8011ff4:	fa22 f103 	lsr.w	r1, r2, r3
 8011ff8:	fa01 f303 	lsl.w	r3, r1, r3
 8011ffc:	4293      	cmp	r3, r2
 8011ffe:	f040 849d 	bne.w	801293c <__ieee754_pow+0x9f4>
 8012002:	f001 0101 	and.w	r1, r1, #1
 8012006:	f1c1 0302 	rsb	r3, r1, #2
 801200a:	9304      	str	r3, [sp, #16]
 801200c:	b182      	cbz	r2, 8012030 <__ieee754_pow+0xe8>
 801200e:	e05f      	b.n	80120d0 <__ieee754_pow+0x188>
 8012010:	2a00      	cmp	r2, #0
 8012012:	d15b      	bne.n	80120cc <__ieee754_pow+0x184>
 8012014:	f1c3 0314 	rsb	r3, r3, #20
 8012018:	fa48 f103 	asr.w	r1, r8, r3
 801201c:	fa01 f303 	lsl.w	r3, r1, r3
 8012020:	4543      	cmp	r3, r8
 8012022:	f040 8488 	bne.w	8012936 <__ieee754_pow+0x9ee>
 8012026:	f001 0101 	and.w	r1, r1, #1
 801202a:	f1c1 0302 	rsb	r3, r1, #2
 801202e:	9304      	str	r3, [sp, #16]
 8012030:	4b5c      	ldr	r3, [pc, #368]	; (80121a4 <__ieee754_pow+0x25c>)
 8012032:	4598      	cmp	r8, r3
 8012034:	d132      	bne.n	801209c <__ieee754_pow+0x154>
 8012036:	f1b9 0f00 	cmp.w	r9, #0
 801203a:	f280 8478 	bge.w	801292e <__ieee754_pow+0x9e6>
 801203e:	4959      	ldr	r1, [pc, #356]	; (80121a4 <__ieee754_pow+0x25c>)
 8012040:	4632      	mov	r2, r6
 8012042:	463b      	mov	r3, r7
 8012044:	2000      	movs	r0, #0
 8012046:	f7ee fc01 	bl	800084c <__aeabi_ddiv>
 801204a:	e79c      	b.n	8011f86 <__ieee754_pow+0x3e>
 801204c:	2300      	movs	r3, #0
 801204e:	9304      	str	r3, [sp, #16]
 8012050:	2a00      	cmp	r2, #0
 8012052:	d13d      	bne.n	80120d0 <__ieee754_pow+0x188>
 8012054:	4b51      	ldr	r3, [pc, #324]	; (801219c <__ieee754_pow+0x254>)
 8012056:	4598      	cmp	r8, r3
 8012058:	d1ea      	bne.n	8012030 <__ieee754_pow+0xe8>
 801205a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 801205e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8012062:	ea53 030a 	orrs.w	r3, r3, sl
 8012066:	f000 845a 	beq.w	801291e <__ieee754_pow+0x9d6>
 801206a:	4b4f      	ldr	r3, [pc, #316]	; (80121a8 <__ieee754_pow+0x260>)
 801206c:	429c      	cmp	r4, r3
 801206e:	dd08      	ble.n	8012082 <__ieee754_pow+0x13a>
 8012070:	f1b9 0f00 	cmp.w	r9, #0
 8012074:	f2c0 8457 	blt.w	8012926 <__ieee754_pow+0x9de>
 8012078:	e9dd 0100 	ldrd	r0, r1, [sp]
 801207c:	e783      	b.n	8011f86 <__ieee754_pow+0x3e>
 801207e:	2302      	movs	r3, #2
 8012080:	e7e5      	b.n	801204e <__ieee754_pow+0x106>
 8012082:	f1b9 0f00 	cmp.w	r9, #0
 8012086:	f04f 0000 	mov.w	r0, #0
 801208a:	f04f 0100 	mov.w	r1, #0
 801208e:	f6bf af7a 	bge.w	8011f86 <__ieee754_pow+0x3e>
 8012092:	e9dd 0300 	ldrd	r0, r3, [sp]
 8012096:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801209a:	e774      	b.n	8011f86 <__ieee754_pow+0x3e>
 801209c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80120a0:	d106      	bne.n	80120b0 <__ieee754_pow+0x168>
 80120a2:	4632      	mov	r2, r6
 80120a4:	463b      	mov	r3, r7
 80120a6:	4630      	mov	r0, r6
 80120a8:	4639      	mov	r1, r7
 80120aa:	f7ee faa5 	bl	80005f8 <__aeabi_dmul>
 80120ae:	e76a      	b.n	8011f86 <__ieee754_pow+0x3e>
 80120b0:	4b3e      	ldr	r3, [pc, #248]	; (80121ac <__ieee754_pow+0x264>)
 80120b2:	4599      	cmp	r9, r3
 80120b4:	d10c      	bne.n	80120d0 <__ieee754_pow+0x188>
 80120b6:	2d00      	cmp	r5, #0
 80120b8:	db0a      	blt.n	80120d0 <__ieee754_pow+0x188>
 80120ba:	ec47 6b10 	vmov	d0, r6, r7
 80120be:	b009      	add	sp, #36	; 0x24
 80120c0:	ecbd 8b06 	vpop	{d8-d10}
 80120c4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80120c8:	f000 bc6c 	b.w	80129a4 <__ieee754_sqrt>
 80120cc:	2300      	movs	r3, #0
 80120ce:	9304      	str	r3, [sp, #16]
 80120d0:	ec47 6b10 	vmov	d0, r6, r7
 80120d4:	f001 fe1c 	bl	8013d10 <fabs>
 80120d8:	ec51 0b10 	vmov	r0, r1, d0
 80120dc:	f1ba 0f00 	cmp.w	sl, #0
 80120e0:	d129      	bne.n	8012136 <__ieee754_pow+0x1ee>
 80120e2:	b124      	cbz	r4, 80120ee <__ieee754_pow+0x1a6>
 80120e4:	4b2f      	ldr	r3, [pc, #188]	; (80121a4 <__ieee754_pow+0x25c>)
 80120e6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80120ea:	429a      	cmp	r2, r3
 80120ec:	d123      	bne.n	8012136 <__ieee754_pow+0x1ee>
 80120ee:	f1b9 0f00 	cmp.w	r9, #0
 80120f2:	da05      	bge.n	8012100 <__ieee754_pow+0x1b8>
 80120f4:	4602      	mov	r2, r0
 80120f6:	460b      	mov	r3, r1
 80120f8:	2000      	movs	r0, #0
 80120fa:	492a      	ldr	r1, [pc, #168]	; (80121a4 <__ieee754_pow+0x25c>)
 80120fc:	f7ee fba6 	bl	800084c <__aeabi_ddiv>
 8012100:	2d00      	cmp	r5, #0
 8012102:	f6bf af40 	bge.w	8011f86 <__ieee754_pow+0x3e>
 8012106:	9b04      	ldr	r3, [sp, #16]
 8012108:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801210c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8012110:	4323      	orrs	r3, r4
 8012112:	d108      	bne.n	8012126 <__ieee754_pow+0x1de>
 8012114:	4602      	mov	r2, r0
 8012116:	460b      	mov	r3, r1
 8012118:	4610      	mov	r0, r2
 801211a:	4619      	mov	r1, r3
 801211c:	f7ee f8b4 	bl	8000288 <__aeabi_dsub>
 8012120:	4602      	mov	r2, r0
 8012122:	460b      	mov	r3, r1
 8012124:	e78f      	b.n	8012046 <__ieee754_pow+0xfe>
 8012126:	9b04      	ldr	r3, [sp, #16]
 8012128:	2b01      	cmp	r3, #1
 801212a:	f47f af2c 	bne.w	8011f86 <__ieee754_pow+0x3e>
 801212e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012132:	4619      	mov	r1, r3
 8012134:	e727      	b.n	8011f86 <__ieee754_pow+0x3e>
 8012136:	0feb      	lsrs	r3, r5, #31
 8012138:	3b01      	subs	r3, #1
 801213a:	9306      	str	r3, [sp, #24]
 801213c:	9a06      	ldr	r2, [sp, #24]
 801213e:	9b04      	ldr	r3, [sp, #16]
 8012140:	4313      	orrs	r3, r2
 8012142:	d102      	bne.n	801214a <__ieee754_pow+0x202>
 8012144:	4632      	mov	r2, r6
 8012146:	463b      	mov	r3, r7
 8012148:	e7e6      	b.n	8012118 <__ieee754_pow+0x1d0>
 801214a:	4b19      	ldr	r3, [pc, #100]	; (80121b0 <__ieee754_pow+0x268>)
 801214c:	4598      	cmp	r8, r3
 801214e:	f340 80fb 	ble.w	8012348 <__ieee754_pow+0x400>
 8012152:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8012156:	4598      	cmp	r8, r3
 8012158:	4b13      	ldr	r3, [pc, #76]	; (80121a8 <__ieee754_pow+0x260>)
 801215a:	dd0c      	ble.n	8012176 <__ieee754_pow+0x22e>
 801215c:	429c      	cmp	r4, r3
 801215e:	dc0f      	bgt.n	8012180 <__ieee754_pow+0x238>
 8012160:	f1b9 0f00 	cmp.w	r9, #0
 8012164:	da0f      	bge.n	8012186 <__ieee754_pow+0x23e>
 8012166:	2000      	movs	r0, #0
 8012168:	b009      	add	sp, #36	; 0x24
 801216a:	ecbd 8b06 	vpop	{d8-d10}
 801216e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012172:	f001 bda2 	b.w	8013cba <__math_oflow>
 8012176:	429c      	cmp	r4, r3
 8012178:	dbf2      	blt.n	8012160 <__ieee754_pow+0x218>
 801217a:	4b0a      	ldr	r3, [pc, #40]	; (80121a4 <__ieee754_pow+0x25c>)
 801217c:	429c      	cmp	r4, r3
 801217e:	dd19      	ble.n	80121b4 <__ieee754_pow+0x26c>
 8012180:	f1b9 0f00 	cmp.w	r9, #0
 8012184:	dcef      	bgt.n	8012166 <__ieee754_pow+0x21e>
 8012186:	2000      	movs	r0, #0
 8012188:	b009      	add	sp, #36	; 0x24
 801218a:	ecbd 8b06 	vpop	{d8-d10}
 801218e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012192:	f001 bd89 	b.w	8013ca8 <__math_uflow>
 8012196:	bf00      	nop
 8012198:	fff00000 	.word	0xfff00000
 801219c:	7ff00000 	.word	0x7ff00000
 80121a0:	433fffff 	.word	0x433fffff
 80121a4:	3ff00000 	.word	0x3ff00000
 80121a8:	3fefffff 	.word	0x3fefffff
 80121ac:	3fe00000 	.word	0x3fe00000
 80121b0:	41e00000 	.word	0x41e00000
 80121b4:	4b60      	ldr	r3, [pc, #384]	; (8012338 <__ieee754_pow+0x3f0>)
 80121b6:	2200      	movs	r2, #0
 80121b8:	f7ee f866 	bl	8000288 <__aeabi_dsub>
 80121bc:	a354      	add	r3, pc, #336	; (adr r3, 8012310 <__ieee754_pow+0x3c8>)
 80121be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121c2:	4604      	mov	r4, r0
 80121c4:	460d      	mov	r5, r1
 80121c6:	f7ee fa17 	bl	80005f8 <__aeabi_dmul>
 80121ca:	a353      	add	r3, pc, #332	; (adr r3, 8012318 <__ieee754_pow+0x3d0>)
 80121cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121d0:	4606      	mov	r6, r0
 80121d2:	460f      	mov	r7, r1
 80121d4:	4620      	mov	r0, r4
 80121d6:	4629      	mov	r1, r5
 80121d8:	f7ee fa0e 	bl	80005f8 <__aeabi_dmul>
 80121dc:	4b57      	ldr	r3, [pc, #348]	; (801233c <__ieee754_pow+0x3f4>)
 80121de:	4682      	mov	sl, r0
 80121e0:	468b      	mov	fp, r1
 80121e2:	2200      	movs	r2, #0
 80121e4:	4620      	mov	r0, r4
 80121e6:	4629      	mov	r1, r5
 80121e8:	f7ee fa06 	bl	80005f8 <__aeabi_dmul>
 80121ec:	4602      	mov	r2, r0
 80121ee:	460b      	mov	r3, r1
 80121f0:	a14b      	add	r1, pc, #300	; (adr r1, 8012320 <__ieee754_pow+0x3d8>)
 80121f2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80121f6:	f7ee f847 	bl	8000288 <__aeabi_dsub>
 80121fa:	4622      	mov	r2, r4
 80121fc:	462b      	mov	r3, r5
 80121fe:	f7ee f9fb 	bl	80005f8 <__aeabi_dmul>
 8012202:	4602      	mov	r2, r0
 8012204:	460b      	mov	r3, r1
 8012206:	2000      	movs	r0, #0
 8012208:	494d      	ldr	r1, [pc, #308]	; (8012340 <__ieee754_pow+0x3f8>)
 801220a:	f7ee f83d 	bl	8000288 <__aeabi_dsub>
 801220e:	4622      	mov	r2, r4
 8012210:	4680      	mov	r8, r0
 8012212:	4689      	mov	r9, r1
 8012214:	462b      	mov	r3, r5
 8012216:	4620      	mov	r0, r4
 8012218:	4629      	mov	r1, r5
 801221a:	f7ee f9ed 	bl	80005f8 <__aeabi_dmul>
 801221e:	4602      	mov	r2, r0
 8012220:	460b      	mov	r3, r1
 8012222:	4640      	mov	r0, r8
 8012224:	4649      	mov	r1, r9
 8012226:	f7ee f9e7 	bl	80005f8 <__aeabi_dmul>
 801222a:	a33f      	add	r3, pc, #252	; (adr r3, 8012328 <__ieee754_pow+0x3e0>)
 801222c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012230:	f7ee f9e2 	bl	80005f8 <__aeabi_dmul>
 8012234:	4602      	mov	r2, r0
 8012236:	460b      	mov	r3, r1
 8012238:	4650      	mov	r0, sl
 801223a:	4659      	mov	r1, fp
 801223c:	f7ee f824 	bl	8000288 <__aeabi_dsub>
 8012240:	4602      	mov	r2, r0
 8012242:	460b      	mov	r3, r1
 8012244:	4680      	mov	r8, r0
 8012246:	4689      	mov	r9, r1
 8012248:	4630      	mov	r0, r6
 801224a:	4639      	mov	r1, r7
 801224c:	f7ee f81e 	bl	800028c <__adddf3>
 8012250:	2000      	movs	r0, #0
 8012252:	4632      	mov	r2, r6
 8012254:	463b      	mov	r3, r7
 8012256:	4604      	mov	r4, r0
 8012258:	460d      	mov	r5, r1
 801225a:	f7ee f815 	bl	8000288 <__aeabi_dsub>
 801225e:	4602      	mov	r2, r0
 8012260:	460b      	mov	r3, r1
 8012262:	4640      	mov	r0, r8
 8012264:	4649      	mov	r1, r9
 8012266:	f7ee f80f 	bl	8000288 <__aeabi_dsub>
 801226a:	9b04      	ldr	r3, [sp, #16]
 801226c:	9a06      	ldr	r2, [sp, #24]
 801226e:	3b01      	subs	r3, #1
 8012270:	4313      	orrs	r3, r2
 8012272:	4682      	mov	sl, r0
 8012274:	468b      	mov	fp, r1
 8012276:	f040 81e7 	bne.w	8012648 <__ieee754_pow+0x700>
 801227a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8012330 <__ieee754_pow+0x3e8>
 801227e:	eeb0 8a47 	vmov.f32	s16, s14
 8012282:	eef0 8a67 	vmov.f32	s17, s15
 8012286:	e9dd 6700 	ldrd	r6, r7, [sp]
 801228a:	2600      	movs	r6, #0
 801228c:	4632      	mov	r2, r6
 801228e:	463b      	mov	r3, r7
 8012290:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012294:	f7ed fff8 	bl	8000288 <__aeabi_dsub>
 8012298:	4622      	mov	r2, r4
 801229a:	462b      	mov	r3, r5
 801229c:	f7ee f9ac 	bl	80005f8 <__aeabi_dmul>
 80122a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80122a4:	4680      	mov	r8, r0
 80122a6:	4689      	mov	r9, r1
 80122a8:	4650      	mov	r0, sl
 80122aa:	4659      	mov	r1, fp
 80122ac:	f7ee f9a4 	bl	80005f8 <__aeabi_dmul>
 80122b0:	4602      	mov	r2, r0
 80122b2:	460b      	mov	r3, r1
 80122b4:	4640      	mov	r0, r8
 80122b6:	4649      	mov	r1, r9
 80122b8:	f7ed ffe8 	bl	800028c <__adddf3>
 80122bc:	4632      	mov	r2, r6
 80122be:	463b      	mov	r3, r7
 80122c0:	4680      	mov	r8, r0
 80122c2:	4689      	mov	r9, r1
 80122c4:	4620      	mov	r0, r4
 80122c6:	4629      	mov	r1, r5
 80122c8:	f7ee f996 	bl	80005f8 <__aeabi_dmul>
 80122cc:	460b      	mov	r3, r1
 80122ce:	4604      	mov	r4, r0
 80122d0:	460d      	mov	r5, r1
 80122d2:	4602      	mov	r2, r0
 80122d4:	4649      	mov	r1, r9
 80122d6:	4640      	mov	r0, r8
 80122d8:	f7ed ffd8 	bl	800028c <__adddf3>
 80122dc:	4b19      	ldr	r3, [pc, #100]	; (8012344 <__ieee754_pow+0x3fc>)
 80122de:	4299      	cmp	r1, r3
 80122e0:	ec45 4b19 	vmov	d9, r4, r5
 80122e4:	4606      	mov	r6, r0
 80122e6:	460f      	mov	r7, r1
 80122e8:	468b      	mov	fp, r1
 80122ea:	f340 82f1 	ble.w	80128d0 <__ieee754_pow+0x988>
 80122ee:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80122f2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80122f6:	4303      	orrs	r3, r0
 80122f8:	f000 81e4 	beq.w	80126c4 <__ieee754_pow+0x77c>
 80122fc:	ec51 0b18 	vmov	r0, r1, d8
 8012300:	2200      	movs	r2, #0
 8012302:	2300      	movs	r3, #0
 8012304:	f7ee fbea 	bl	8000adc <__aeabi_dcmplt>
 8012308:	3800      	subs	r0, #0
 801230a:	bf18      	it	ne
 801230c:	2001      	movne	r0, #1
 801230e:	e72b      	b.n	8012168 <__ieee754_pow+0x220>
 8012310:	60000000 	.word	0x60000000
 8012314:	3ff71547 	.word	0x3ff71547
 8012318:	f85ddf44 	.word	0xf85ddf44
 801231c:	3e54ae0b 	.word	0x3e54ae0b
 8012320:	55555555 	.word	0x55555555
 8012324:	3fd55555 	.word	0x3fd55555
 8012328:	652b82fe 	.word	0x652b82fe
 801232c:	3ff71547 	.word	0x3ff71547
 8012330:	00000000 	.word	0x00000000
 8012334:	bff00000 	.word	0xbff00000
 8012338:	3ff00000 	.word	0x3ff00000
 801233c:	3fd00000 	.word	0x3fd00000
 8012340:	3fe00000 	.word	0x3fe00000
 8012344:	408fffff 	.word	0x408fffff
 8012348:	4bd5      	ldr	r3, [pc, #852]	; (80126a0 <__ieee754_pow+0x758>)
 801234a:	402b      	ands	r3, r5
 801234c:	2200      	movs	r2, #0
 801234e:	b92b      	cbnz	r3, 801235c <__ieee754_pow+0x414>
 8012350:	4bd4      	ldr	r3, [pc, #848]	; (80126a4 <__ieee754_pow+0x75c>)
 8012352:	f7ee f951 	bl	80005f8 <__aeabi_dmul>
 8012356:	f06f 0234 	mvn.w	r2, #52	; 0x34
 801235a:	460c      	mov	r4, r1
 801235c:	1523      	asrs	r3, r4, #20
 801235e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8012362:	4413      	add	r3, r2
 8012364:	9305      	str	r3, [sp, #20]
 8012366:	4bd0      	ldr	r3, [pc, #832]	; (80126a8 <__ieee754_pow+0x760>)
 8012368:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801236c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8012370:	429c      	cmp	r4, r3
 8012372:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8012376:	dd08      	ble.n	801238a <__ieee754_pow+0x442>
 8012378:	4bcc      	ldr	r3, [pc, #816]	; (80126ac <__ieee754_pow+0x764>)
 801237a:	429c      	cmp	r4, r3
 801237c:	f340 8162 	ble.w	8012644 <__ieee754_pow+0x6fc>
 8012380:	9b05      	ldr	r3, [sp, #20]
 8012382:	3301      	adds	r3, #1
 8012384:	9305      	str	r3, [sp, #20]
 8012386:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 801238a:	2400      	movs	r4, #0
 801238c:	00e3      	lsls	r3, r4, #3
 801238e:	9307      	str	r3, [sp, #28]
 8012390:	4bc7      	ldr	r3, [pc, #796]	; (80126b0 <__ieee754_pow+0x768>)
 8012392:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8012396:	ed93 7b00 	vldr	d7, [r3]
 801239a:	4629      	mov	r1, r5
 801239c:	ec53 2b17 	vmov	r2, r3, d7
 80123a0:	eeb0 9a47 	vmov.f32	s18, s14
 80123a4:	eef0 9a67 	vmov.f32	s19, s15
 80123a8:	4682      	mov	sl, r0
 80123aa:	f7ed ff6d 	bl	8000288 <__aeabi_dsub>
 80123ae:	4652      	mov	r2, sl
 80123b0:	4606      	mov	r6, r0
 80123b2:	460f      	mov	r7, r1
 80123b4:	462b      	mov	r3, r5
 80123b6:	ec51 0b19 	vmov	r0, r1, d9
 80123ba:	f7ed ff67 	bl	800028c <__adddf3>
 80123be:	4602      	mov	r2, r0
 80123c0:	460b      	mov	r3, r1
 80123c2:	2000      	movs	r0, #0
 80123c4:	49bb      	ldr	r1, [pc, #748]	; (80126b4 <__ieee754_pow+0x76c>)
 80123c6:	f7ee fa41 	bl	800084c <__aeabi_ddiv>
 80123ca:	ec41 0b1a 	vmov	d10, r0, r1
 80123ce:	4602      	mov	r2, r0
 80123d0:	460b      	mov	r3, r1
 80123d2:	4630      	mov	r0, r6
 80123d4:	4639      	mov	r1, r7
 80123d6:	f7ee f90f 	bl	80005f8 <__aeabi_dmul>
 80123da:	2300      	movs	r3, #0
 80123dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80123e0:	9302      	str	r3, [sp, #8]
 80123e2:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80123e6:	46ab      	mov	fp, r5
 80123e8:	106d      	asrs	r5, r5, #1
 80123ea:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80123ee:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80123f2:	ec41 0b18 	vmov	d8, r0, r1
 80123f6:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 80123fa:	2200      	movs	r2, #0
 80123fc:	4640      	mov	r0, r8
 80123fe:	4649      	mov	r1, r9
 8012400:	4614      	mov	r4, r2
 8012402:	461d      	mov	r5, r3
 8012404:	f7ee f8f8 	bl	80005f8 <__aeabi_dmul>
 8012408:	4602      	mov	r2, r0
 801240a:	460b      	mov	r3, r1
 801240c:	4630      	mov	r0, r6
 801240e:	4639      	mov	r1, r7
 8012410:	f7ed ff3a 	bl	8000288 <__aeabi_dsub>
 8012414:	ec53 2b19 	vmov	r2, r3, d9
 8012418:	4606      	mov	r6, r0
 801241a:	460f      	mov	r7, r1
 801241c:	4620      	mov	r0, r4
 801241e:	4629      	mov	r1, r5
 8012420:	f7ed ff32 	bl	8000288 <__aeabi_dsub>
 8012424:	4602      	mov	r2, r0
 8012426:	460b      	mov	r3, r1
 8012428:	4650      	mov	r0, sl
 801242a:	4659      	mov	r1, fp
 801242c:	f7ed ff2c 	bl	8000288 <__aeabi_dsub>
 8012430:	4642      	mov	r2, r8
 8012432:	464b      	mov	r3, r9
 8012434:	f7ee f8e0 	bl	80005f8 <__aeabi_dmul>
 8012438:	4602      	mov	r2, r0
 801243a:	460b      	mov	r3, r1
 801243c:	4630      	mov	r0, r6
 801243e:	4639      	mov	r1, r7
 8012440:	f7ed ff22 	bl	8000288 <__aeabi_dsub>
 8012444:	ec53 2b1a 	vmov	r2, r3, d10
 8012448:	f7ee f8d6 	bl	80005f8 <__aeabi_dmul>
 801244c:	ec53 2b18 	vmov	r2, r3, d8
 8012450:	ec41 0b19 	vmov	d9, r0, r1
 8012454:	ec51 0b18 	vmov	r0, r1, d8
 8012458:	f7ee f8ce 	bl	80005f8 <__aeabi_dmul>
 801245c:	a37c      	add	r3, pc, #496	; (adr r3, 8012650 <__ieee754_pow+0x708>)
 801245e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012462:	4604      	mov	r4, r0
 8012464:	460d      	mov	r5, r1
 8012466:	f7ee f8c7 	bl	80005f8 <__aeabi_dmul>
 801246a:	a37b      	add	r3, pc, #492	; (adr r3, 8012658 <__ieee754_pow+0x710>)
 801246c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012470:	f7ed ff0c 	bl	800028c <__adddf3>
 8012474:	4622      	mov	r2, r4
 8012476:	462b      	mov	r3, r5
 8012478:	f7ee f8be 	bl	80005f8 <__aeabi_dmul>
 801247c:	a378      	add	r3, pc, #480	; (adr r3, 8012660 <__ieee754_pow+0x718>)
 801247e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012482:	f7ed ff03 	bl	800028c <__adddf3>
 8012486:	4622      	mov	r2, r4
 8012488:	462b      	mov	r3, r5
 801248a:	f7ee f8b5 	bl	80005f8 <__aeabi_dmul>
 801248e:	a376      	add	r3, pc, #472	; (adr r3, 8012668 <__ieee754_pow+0x720>)
 8012490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012494:	f7ed fefa 	bl	800028c <__adddf3>
 8012498:	4622      	mov	r2, r4
 801249a:	462b      	mov	r3, r5
 801249c:	f7ee f8ac 	bl	80005f8 <__aeabi_dmul>
 80124a0:	a373      	add	r3, pc, #460	; (adr r3, 8012670 <__ieee754_pow+0x728>)
 80124a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124a6:	f7ed fef1 	bl	800028c <__adddf3>
 80124aa:	4622      	mov	r2, r4
 80124ac:	462b      	mov	r3, r5
 80124ae:	f7ee f8a3 	bl	80005f8 <__aeabi_dmul>
 80124b2:	a371      	add	r3, pc, #452	; (adr r3, 8012678 <__ieee754_pow+0x730>)
 80124b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124b8:	f7ed fee8 	bl	800028c <__adddf3>
 80124bc:	4622      	mov	r2, r4
 80124be:	4606      	mov	r6, r0
 80124c0:	460f      	mov	r7, r1
 80124c2:	462b      	mov	r3, r5
 80124c4:	4620      	mov	r0, r4
 80124c6:	4629      	mov	r1, r5
 80124c8:	f7ee f896 	bl	80005f8 <__aeabi_dmul>
 80124cc:	4602      	mov	r2, r0
 80124ce:	460b      	mov	r3, r1
 80124d0:	4630      	mov	r0, r6
 80124d2:	4639      	mov	r1, r7
 80124d4:	f7ee f890 	bl	80005f8 <__aeabi_dmul>
 80124d8:	4642      	mov	r2, r8
 80124da:	4604      	mov	r4, r0
 80124dc:	460d      	mov	r5, r1
 80124de:	464b      	mov	r3, r9
 80124e0:	ec51 0b18 	vmov	r0, r1, d8
 80124e4:	f7ed fed2 	bl	800028c <__adddf3>
 80124e8:	ec53 2b19 	vmov	r2, r3, d9
 80124ec:	f7ee f884 	bl	80005f8 <__aeabi_dmul>
 80124f0:	4622      	mov	r2, r4
 80124f2:	462b      	mov	r3, r5
 80124f4:	f7ed feca 	bl	800028c <__adddf3>
 80124f8:	4642      	mov	r2, r8
 80124fa:	4682      	mov	sl, r0
 80124fc:	468b      	mov	fp, r1
 80124fe:	464b      	mov	r3, r9
 8012500:	4640      	mov	r0, r8
 8012502:	4649      	mov	r1, r9
 8012504:	f7ee f878 	bl	80005f8 <__aeabi_dmul>
 8012508:	4b6b      	ldr	r3, [pc, #428]	; (80126b8 <__ieee754_pow+0x770>)
 801250a:	2200      	movs	r2, #0
 801250c:	4606      	mov	r6, r0
 801250e:	460f      	mov	r7, r1
 8012510:	f7ed febc 	bl	800028c <__adddf3>
 8012514:	4652      	mov	r2, sl
 8012516:	465b      	mov	r3, fp
 8012518:	f7ed feb8 	bl	800028c <__adddf3>
 801251c:	2000      	movs	r0, #0
 801251e:	4604      	mov	r4, r0
 8012520:	460d      	mov	r5, r1
 8012522:	4602      	mov	r2, r0
 8012524:	460b      	mov	r3, r1
 8012526:	4640      	mov	r0, r8
 8012528:	4649      	mov	r1, r9
 801252a:	f7ee f865 	bl	80005f8 <__aeabi_dmul>
 801252e:	4b62      	ldr	r3, [pc, #392]	; (80126b8 <__ieee754_pow+0x770>)
 8012530:	4680      	mov	r8, r0
 8012532:	4689      	mov	r9, r1
 8012534:	2200      	movs	r2, #0
 8012536:	4620      	mov	r0, r4
 8012538:	4629      	mov	r1, r5
 801253a:	f7ed fea5 	bl	8000288 <__aeabi_dsub>
 801253e:	4632      	mov	r2, r6
 8012540:	463b      	mov	r3, r7
 8012542:	f7ed fea1 	bl	8000288 <__aeabi_dsub>
 8012546:	4602      	mov	r2, r0
 8012548:	460b      	mov	r3, r1
 801254a:	4650      	mov	r0, sl
 801254c:	4659      	mov	r1, fp
 801254e:	f7ed fe9b 	bl	8000288 <__aeabi_dsub>
 8012552:	ec53 2b18 	vmov	r2, r3, d8
 8012556:	f7ee f84f 	bl	80005f8 <__aeabi_dmul>
 801255a:	4622      	mov	r2, r4
 801255c:	4606      	mov	r6, r0
 801255e:	460f      	mov	r7, r1
 8012560:	462b      	mov	r3, r5
 8012562:	ec51 0b19 	vmov	r0, r1, d9
 8012566:	f7ee f847 	bl	80005f8 <__aeabi_dmul>
 801256a:	4602      	mov	r2, r0
 801256c:	460b      	mov	r3, r1
 801256e:	4630      	mov	r0, r6
 8012570:	4639      	mov	r1, r7
 8012572:	f7ed fe8b 	bl	800028c <__adddf3>
 8012576:	4606      	mov	r6, r0
 8012578:	460f      	mov	r7, r1
 801257a:	4602      	mov	r2, r0
 801257c:	460b      	mov	r3, r1
 801257e:	4640      	mov	r0, r8
 8012580:	4649      	mov	r1, r9
 8012582:	f7ed fe83 	bl	800028c <__adddf3>
 8012586:	a33e      	add	r3, pc, #248	; (adr r3, 8012680 <__ieee754_pow+0x738>)
 8012588:	e9d3 2300 	ldrd	r2, r3, [r3]
 801258c:	2000      	movs	r0, #0
 801258e:	4604      	mov	r4, r0
 8012590:	460d      	mov	r5, r1
 8012592:	f7ee f831 	bl	80005f8 <__aeabi_dmul>
 8012596:	4642      	mov	r2, r8
 8012598:	ec41 0b18 	vmov	d8, r0, r1
 801259c:	464b      	mov	r3, r9
 801259e:	4620      	mov	r0, r4
 80125a0:	4629      	mov	r1, r5
 80125a2:	f7ed fe71 	bl	8000288 <__aeabi_dsub>
 80125a6:	4602      	mov	r2, r0
 80125a8:	460b      	mov	r3, r1
 80125aa:	4630      	mov	r0, r6
 80125ac:	4639      	mov	r1, r7
 80125ae:	f7ed fe6b 	bl	8000288 <__aeabi_dsub>
 80125b2:	a335      	add	r3, pc, #212	; (adr r3, 8012688 <__ieee754_pow+0x740>)
 80125b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125b8:	f7ee f81e 	bl	80005f8 <__aeabi_dmul>
 80125bc:	a334      	add	r3, pc, #208	; (adr r3, 8012690 <__ieee754_pow+0x748>)
 80125be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125c2:	4606      	mov	r6, r0
 80125c4:	460f      	mov	r7, r1
 80125c6:	4620      	mov	r0, r4
 80125c8:	4629      	mov	r1, r5
 80125ca:	f7ee f815 	bl	80005f8 <__aeabi_dmul>
 80125ce:	4602      	mov	r2, r0
 80125d0:	460b      	mov	r3, r1
 80125d2:	4630      	mov	r0, r6
 80125d4:	4639      	mov	r1, r7
 80125d6:	f7ed fe59 	bl	800028c <__adddf3>
 80125da:	9a07      	ldr	r2, [sp, #28]
 80125dc:	4b37      	ldr	r3, [pc, #220]	; (80126bc <__ieee754_pow+0x774>)
 80125de:	4413      	add	r3, r2
 80125e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125e4:	f7ed fe52 	bl	800028c <__adddf3>
 80125e8:	4682      	mov	sl, r0
 80125ea:	9805      	ldr	r0, [sp, #20]
 80125ec:	468b      	mov	fp, r1
 80125ee:	f7ed ff99 	bl	8000524 <__aeabi_i2d>
 80125f2:	9a07      	ldr	r2, [sp, #28]
 80125f4:	4b32      	ldr	r3, [pc, #200]	; (80126c0 <__ieee754_pow+0x778>)
 80125f6:	4413      	add	r3, r2
 80125f8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80125fc:	4606      	mov	r6, r0
 80125fe:	460f      	mov	r7, r1
 8012600:	4652      	mov	r2, sl
 8012602:	465b      	mov	r3, fp
 8012604:	ec51 0b18 	vmov	r0, r1, d8
 8012608:	f7ed fe40 	bl	800028c <__adddf3>
 801260c:	4642      	mov	r2, r8
 801260e:	464b      	mov	r3, r9
 8012610:	f7ed fe3c 	bl	800028c <__adddf3>
 8012614:	4632      	mov	r2, r6
 8012616:	463b      	mov	r3, r7
 8012618:	f7ed fe38 	bl	800028c <__adddf3>
 801261c:	2000      	movs	r0, #0
 801261e:	4632      	mov	r2, r6
 8012620:	463b      	mov	r3, r7
 8012622:	4604      	mov	r4, r0
 8012624:	460d      	mov	r5, r1
 8012626:	f7ed fe2f 	bl	8000288 <__aeabi_dsub>
 801262a:	4642      	mov	r2, r8
 801262c:	464b      	mov	r3, r9
 801262e:	f7ed fe2b 	bl	8000288 <__aeabi_dsub>
 8012632:	ec53 2b18 	vmov	r2, r3, d8
 8012636:	f7ed fe27 	bl	8000288 <__aeabi_dsub>
 801263a:	4602      	mov	r2, r0
 801263c:	460b      	mov	r3, r1
 801263e:	4650      	mov	r0, sl
 8012640:	4659      	mov	r1, fp
 8012642:	e610      	b.n	8012266 <__ieee754_pow+0x31e>
 8012644:	2401      	movs	r4, #1
 8012646:	e6a1      	b.n	801238c <__ieee754_pow+0x444>
 8012648:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8012698 <__ieee754_pow+0x750>
 801264c:	e617      	b.n	801227e <__ieee754_pow+0x336>
 801264e:	bf00      	nop
 8012650:	4a454eef 	.word	0x4a454eef
 8012654:	3fca7e28 	.word	0x3fca7e28
 8012658:	93c9db65 	.word	0x93c9db65
 801265c:	3fcd864a 	.word	0x3fcd864a
 8012660:	a91d4101 	.word	0xa91d4101
 8012664:	3fd17460 	.word	0x3fd17460
 8012668:	518f264d 	.word	0x518f264d
 801266c:	3fd55555 	.word	0x3fd55555
 8012670:	db6fabff 	.word	0xdb6fabff
 8012674:	3fdb6db6 	.word	0x3fdb6db6
 8012678:	33333303 	.word	0x33333303
 801267c:	3fe33333 	.word	0x3fe33333
 8012680:	e0000000 	.word	0xe0000000
 8012684:	3feec709 	.word	0x3feec709
 8012688:	dc3a03fd 	.word	0xdc3a03fd
 801268c:	3feec709 	.word	0x3feec709
 8012690:	145b01f5 	.word	0x145b01f5
 8012694:	be3e2fe0 	.word	0xbe3e2fe0
 8012698:	00000000 	.word	0x00000000
 801269c:	3ff00000 	.word	0x3ff00000
 80126a0:	7ff00000 	.word	0x7ff00000
 80126a4:	43400000 	.word	0x43400000
 80126a8:	0003988e 	.word	0x0003988e
 80126ac:	000bb679 	.word	0x000bb679
 80126b0:	080147c8 	.word	0x080147c8
 80126b4:	3ff00000 	.word	0x3ff00000
 80126b8:	40080000 	.word	0x40080000
 80126bc:	080147e8 	.word	0x080147e8
 80126c0:	080147d8 	.word	0x080147d8
 80126c4:	a3b5      	add	r3, pc, #724	; (adr r3, 801299c <__ieee754_pow+0xa54>)
 80126c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126ca:	4640      	mov	r0, r8
 80126cc:	4649      	mov	r1, r9
 80126ce:	f7ed fddd 	bl	800028c <__adddf3>
 80126d2:	4622      	mov	r2, r4
 80126d4:	ec41 0b1a 	vmov	d10, r0, r1
 80126d8:	462b      	mov	r3, r5
 80126da:	4630      	mov	r0, r6
 80126dc:	4639      	mov	r1, r7
 80126de:	f7ed fdd3 	bl	8000288 <__aeabi_dsub>
 80126e2:	4602      	mov	r2, r0
 80126e4:	460b      	mov	r3, r1
 80126e6:	ec51 0b1a 	vmov	r0, r1, d10
 80126ea:	f7ee fa15 	bl	8000b18 <__aeabi_dcmpgt>
 80126ee:	2800      	cmp	r0, #0
 80126f0:	f47f ae04 	bne.w	80122fc <__ieee754_pow+0x3b4>
 80126f4:	4aa4      	ldr	r2, [pc, #656]	; (8012988 <__ieee754_pow+0xa40>)
 80126f6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80126fa:	4293      	cmp	r3, r2
 80126fc:	f340 8108 	ble.w	8012910 <__ieee754_pow+0x9c8>
 8012700:	151b      	asrs	r3, r3, #20
 8012702:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8012706:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 801270a:	fa4a f303 	asr.w	r3, sl, r3
 801270e:	445b      	add	r3, fp
 8012710:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8012714:	4e9d      	ldr	r6, [pc, #628]	; (801298c <__ieee754_pow+0xa44>)
 8012716:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 801271a:	4116      	asrs	r6, r2
 801271c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8012720:	2000      	movs	r0, #0
 8012722:	ea23 0106 	bic.w	r1, r3, r6
 8012726:	f1c2 0214 	rsb	r2, r2, #20
 801272a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 801272e:	fa4a fa02 	asr.w	sl, sl, r2
 8012732:	f1bb 0f00 	cmp.w	fp, #0
 8012736:	4602      	mov	r2, r0
 8012738:	460b      	mov	r3, r1
 801273a:	4620      	mov	r0, r4
 801273c:	4629      	mov	r1, r5
 801273e:	bfb8      	it	lt
 8012740:	f1ca 0a00 	rsblt	sl, sl, #0
 8012744:	f7ed fda0 	bl	8000288 <__aeabi_dsub>
 8012748:	ec41 0b19 	vmov	d9, r0, r1
 801274c:	4642      	mov	r2, r8
 801274e:	464b      	mov	r3, r9
 8012750:	ec51 0b19 	vmov	r0, r1, d9
 8012754:	f7ed fd9a 	bl	800028c <__adddf3>
 8012758:	a37b      	add	r3, pc, #492	; (adr r3, 8012948 <__ieee754_pow+0xa00>)
 801275a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801275e:	2000      	movs	r0, #0
 8012760:	4604      	mov	r4, r0
 8012762:	460d      	mov	r5, r1
 8012764:	f7ed ff48 	bl	80005f8 <__aeabi_dmul>
 8012768:	ec53 2b19 	vmov	r2, r3, d9
 801276c:	4606      	mov	r6, r0
 801276e:	460f      	mov	r7, r1
 8012770:	4620      	mov	r0, r4
 8012772:	4629      	mov	r1, r5
 8012774:	f7ed fd88 	bl	8000288 <__aeabi_dsub>
 8012778:	4602      	mov	r2, r0
 801277a:	460b      	mov	r3, r1
 801277c:	4640      	mov	r0, r8
 801277e:	4649      	mov	r1, r9
 8012780:	f7ed fd82 	bl	8000288 <__aeabi_dsub>
 8012784:	a372      	add	r3, pc, #456	; (adr r3, 8012950 <__ieee754_pow+0xa08>)
 8012786:	e9d3 2300 	ldrd	r2, r3, [r3]
 801278a:	f7ed ff35 	bl	80005f8 <__aeabi_dmul>
 801278e:	a372      	add	r3, pc, #456	; (adr r3, 8012958 <__ieee754_pow+0xa10>)
 8012790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012794:	4680      	mov	r8, r0
 8012796:	4689      	mov	r9, r1
 8012798:	4620      	mov	r0, r4
 801279a:	4629      	mov	r1, r5
 801279c:	f7ed ff2c 	bl	80005f8 <__aeabi_dmul>
 80127a0:	4602      	mov	r2, r0
 80127a2:	460b      	mov	r3, r1
 80127a4:	4640      	mov	r0, r8
 80127a6:	4649      	mov	r1, r9
 80127a8:	f7ed fd70 	bl	800028c <__adddf3>
 80127ac:	4604      	mov	r4, r0
 80127ae:	460d      	mov	r5, r1
 80127b0:	4602      	mov	r2, r0
 80127b2:	460b      	mov	r3, r1
 80127b4:	4630      	mov	r0, r6
 80127b6:	4639      	mov	r1, r7
 80127b8:	f7ed fd68 	bl	800028c <__adddf3>
 80127bc:	4632      	mov	r2, r6
 80127be:	463b      	mov	r3, r7
 80127c0:	4680      	mov	r8, r0
 80127c2:	4689      	mov	r9, r1
 80127c4:	f7ed fd60 	bl	8000288 <__aeabi_dsub>
 80127c8:	4602      	mov	r2, r0
 80127ca:	460b      	mov	r3, r1
 80127cc:	4620      	mov	r0, r4
 80127ce:	4629      	mov	r1, r5
 80127d0:	f7ed fd5a 	bl	8000288 <__aeabi_dsub>
 80127d4:	4642      	mov	r2, r8
 80127d6:	4606      	mov	r6, r0
 80127d8:	460f      	mov	r7, r1
 80127da:	464b      	mov	r3, r9
 80127dc:	4640      	mov	r0, r8
 80127de:	4649      	mov	r1, r9
 80127e0:	f7ed ff0a 	bl	80005f8 <__aeabi_dmul>
 80127e4:	a35e      	add	r3, pc, #376	; (adr r3, 8012960 <__ieee754_pow+0xa18>)
 80127e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127ea:	4604      	mov	r4, r0
 80127ec:	460d      	mov	r5, r1
 80127ee:	f7ed ff03 	bl	80005f8 <__aeabi_dmul>
 80127f2:	a35d      	add	r3, pc, #372	; (adr r3, 8012968 <__ieee754_pow+0xa20>)
 80127f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127f8:	f7ed fd46 	bl	8000288 <__aeabi_dsub>
 80127fc:	4622      	mov	r2, r4
 80127fe:	462b      	mov	r3, r5
 8012800:	f7ed fefa 	bl	80005f8 <__aeabi_dmul>
 8012804:	a35a      	add	r3, pc, #360	; (adr r3, 8012970 <__ieee754_pow+0xa28>)
 8012806:	e9d3 2300 	ldrd	r2, r3, [r3]
 801280a:	f7ed fd3f 	bl	800028c <__adddf3>
 801280e:	4622      	mov	r2, r4
 8012810:	462b      	mov	r3, r5
 8012812:	f7ed fef1 	bl	80005f8 <__aeabi_dmul>
 8012816:	a358      	add	r3, pc, #352	; (adr r3, 8012978 <__ieee754_pow+0xa30>)
 8012818:	e9d3 2300 	ldrd	r2, r3, [r3]
 801281c:	f7ed fd34 	bl	8000288 <__aeabi_dsub>
 8012820:	4622      	mov	r2, r4
 8012822:	462b      	mov	r3, r5
 8012824:	f7ed fee8 	bl	80005f8 <__aeabi_dmul>
 8012828:	a355      	add	r3, pc, #340	; (adr r3, 8012980 <__ieee754_pow+0xa38>)
 801282a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801282e:	f7ed fd2d 	bl	800028c <__adddf3>
 8012832:	4622      	mov	r2, r4
 8012834:	462b      	mov	r3, r5
 8012836:	f7ed fedf 	bl	80005f8 <__aeabi_dmul>
 801283a:	4602      	mov	r2, r0
 801283c:	460b      	mov	r3, r1
 801283e:	4640      	mov	r0, r8
 8012840:	4649      	mov	r1, r9
 8012842:	f7ed fd21 	bl	8000288 <__aeabi_dsub>
 8012846:	4604      	mov	r4, r0
 8012848:	460d      	mov	r5, r1
 801284a:	4602      	mov	r2, r0
 801284c:	460b      	mov	r3, r1
 801284e:	4640      	mov	r0, r8
 8012850:	4649      	mov	r1, r9
 8012852:	f7ed fed1 	bl	80005f8 <__aeabi_dmul>
 8012856:	2200      	movs	r2, #0
 8012858:	ec41 0b19 	vmov	d9, r0, r1
 801285c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8012860:	4620      	mov	r0, r4
 8012862:	4629      	mov	r1, r5
 8012864:	f7ed fd10 	bl	8000288 <__aeabi_dsub>
 8012868:	4602      	mov	r2, r0
 801286a:	460b      	mov	r3, r1
 801286c:	ec51 0b19 	vmov	r0, r1, d9
 8012870:	f7ed ffec 	bl	800084c <__aeabi_ddiv>
 8012874:	4632      	mov	r2, r6
 8012876:	4604      	mov	r4, r0
 8012878:	460d      	mov	r5, r1
 801287a:	463b      	mov	r3, r7
 801287c:	4640      	mov	r0, r8
 801287e:	4649      	mov	r1, r9
 8012880:	f7ed feba 	bl	80005f8 <__aeabi_dmul>
 8012884:	4632      	mov	r2, r6
 8012886:	463b      	mov	r3, r7
 8012888:	f7ed fd00 	bl	800028c <__adddf3>
 801288c:	4602      	mov	r2, r0
 801288e:	460b      	mov	r3, r1
 8012890:	4620      	mov	r0, r4
 8012892:	4629      	mov	r1, r5
 8012894:	f7ed fcf8 	bl	8000288 <__aeabi_dsub>
 8012898:	4642      	mov	r2, r8
 801289a:	464b      	mov	r3, r9
 801289c:	f7ed fcf4 	bl	8000288 <__aeabi_dsub>
 80128a0:	460b      	mov	r3, r1
 80128a2:	4602      	mov	r2, r0
 80128a4:	493a      	ldr	r1, [pc, #232]	; (8012990 <__ieee754_pow+0xa48>)
 80128a6:	2000      	movs	r0, #0
 80128a8:	f7ed fcee 	bl	8000288 <__aeabi_dsub>
 80128ac:	ec41 0b10 	vmov	d0, r0, r1
 80128b0:	ee10 3a90 	vmov	r3, s1
 80128b4:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80128b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80128bc:	da2b      	bge.n	8012916 <__ieee754_pow+0x9ce>
 80128be:	4650      	mov	r0, sl
 80128c0:	f001 fa3a 	bl	8013d38 <scalbn>
 80128c4:	ec51 0b10 	vmov	r0, r1, d0
 80128c8:	ec53 2b18 	vmov	r2, r3, d8
 80128cc:	f7ff bbed 	b.w	80120aa <__ieee754_pow+0x162>
 80128d0:	4b30      	ldr	r3, [pc, #192]	; (8012994 <__ieee754_pow+0xa4c>)
 80128d2:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80128d6:	429e      	cmp	r6, r3
 80128d8:	f77f af0c 	ble.w	80126f4 <__ieee754_pow+0x7ac>
 80128dc:	4b2e      	ldr	r3, [pc, #184]	; (8012998 <__ieee754_pow+0xa50>)
 80128de:	440b      	add	r3, r1
 80128e0:	4303      	orrs	r3, r0
 80128e2:	d009      	beq.n	80128f8 <__ieee754_pow+0x9b0>
 80128e4:	ec51 0b18 	vmov	r0, r1, d8
 80128e8:	2200      	movs	r2, #0
 80128ea:	2300      	movs	r3, #0
 80128ec:	f7ee f8f6 	bl	8000adc <__aeabi_dcmplt>
 80128f0:	3800      	subs	r0, #0
 80128f2:	bf18      	it	ne
 80128f4:	2001      	movne	r0, #1
 80128f6:	e447      	b.n	8012188 <__ieee754_pow+0x240>
 80128f8:	4622      	mov	r2, r4
 80128fa:	462b      	mov	r3, r5
 80128fc:	f7ed fcc4 	bl	8000288 <__aeabi_dsub>
 8012900:	4642      	mov	r2, r8
 8012902:	464b      	mov	r3, r9
 8012904:	f7ee f8fe 	bl	8000b04 <__aeabi_dcmpge>
 8012908:	2800      	cmp	r0, #0
 801290a:	f43f aef3 	beq.w	80126f4 <__ieee754_pow+0x7ac>
 801290e:	e7e9      	b.n	80128e4 <__ieee754_pow+0x99c>
 8012910:	f04f 0a00 	mov.w	sl, #0
 8012914:	e71a      	b.n	801274c <__ieee754_pow+0x804>
 8012916:	ec51 0b10 	vmov	r0, r1, d0
 801291a:	4619      	mov	r1, r3
 801291c:	e7d4      	b.n	80128c8 <__ieee754_pow+0x980>
 801291e:	491c      	ldr	r1, [pc, #112]	; (8012990 <__ieee754_pow+0xa48>)
 8012920:	2000      	movs	r0, #0
 8012922:	f7ff bb30 	b.w	8011f86 <__ieee754_pow+0x3e>
 8012926:	2000      	movs	r0, #0
 8012928:	2100      	movs	r1, #0
 801292a:	f7ff bb2c 	b.w	8011f86 <__ieee754_pow+0x3e>
 801292e:	4630      	mov	r0, r6
 8012930:	4639      	mov	r1, r7
 8012932:	f7ff bb28 	b.w	8011f86 <__ieee754_pow+0x3e>
 8012936:	9204      	str	r2, [sp, #16]
 8012938:	f7ff bb7a 	b.w	8012030 <__ieee754_pow+0xe8>
 801293c:	2300      	movs	r3, #0
 801293e:	f7ff bb64 	b.w	801200a <__ieee754_pow+0xc2>
 8012942:	bf00      	nop
 8012944:	f3af 8000 	nop.w
 8012948:	00000000 	.word	0x00000000
 801294c:	3fe62e43 	.word	0x3fe62e43
 8012950:	fefa39ef 	.word	0xfefa39ef
 8012954:	3fe62e42 	.word	0x3fe62e42
 8012958:	0ca86c39 	.word	0x0ca86c39
 801295c:	be205c61 	.word	0xbe205c61
 8012960:	72bea4d0 	.word	0x72bea4d0
 8012964:	3e663769 	.word	0x3e663769
 8012968:	c5d26bf1 	.word	0xc5d26bf1
 801296c:	3ebbbd41 	.word	0x3ebbbd41
 8012970:	af25de2c 	.word	0xaf25de2c
 8012974:	3f11566a 	.word	0x3f11566a
 8012978:	16bebd93 	.word	0x16bebd93
 801297c:	3f66c16c 	.word	0x3f66c16c
 8012980:	5555553e 	.word	0x5555553e
 8012984:	3fc55555 	.word	0x3fc55555
 8012988:	3fe00000 	.word	0x3fe00000
 801298c:	000fffff 	.word	0x000fffff
 8012990:	3ff00000 	.word	0x3ff00000
 8012994:	4090cbff 	.word	0x4090cbff
 8012998:	3f6f3400 	.word	0x3f6f3400
 801299c:	652b82fe 	.word	0x652b82fe
 80129a0:	3c971547 	.word	0x3c971547

080129a4 <__ieee754_sqrt>:
 80129a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80129a8:	ec55 4b10 	vmov	r4, r5, d0
 80129ac:	4e55      	ldr	r6, [pc, #340]	; (8012b04 <__ieee754_sqrt+0x160>)
 80129ae:	43ae      	bics	r6, r5
 80129b0:	ee10 0a10 	vmov	r0, s0
 80129b4:	ee10 3a10 	vmov	r3, s0
 80129b8:	462a      	mov	r2, r5
 80129ba:	4629      	mov	r1, r5
 80129bc:	d110      	bne.n	80129e0 <__ieee754_sqrt+0x3c>
 80129be:	ee10 2a10 	vmov	r2, s0
 80129c2:	462b      	mov	r3, r5
 80129c4:	f7ed fe18 	bl	80005f8 <__aeabi_dmul>
 80129c8:	4602      	mov	r2, r0
 80129ca:	460b      	mov	r3, r1
 80129cc:	4620      	mov	r0, r4
 80129ce:	4629      	mov	r1, r5
 80129d0:	f7ed fc5c 	bl	800028c <__adddf3>
 80129d4:	4604      	mov	r4, r0
 80129d6:	460d      	mov	r5, r1
 80129d8:	ec45 4b10 	vmov	d0, r4, r5
 80129dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80129e0:	2d00      	cmp	r5, #0
 80129e2:	dc10      	bgt.n	8012a06 <__ieee754_sqrt+0x62>
 80129e4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80129e8:	4330      	orrs	r0, r6
 80129ea:	d0f5      	beq.n	80129d8 <__ieee754_sqrt+0x34>
 80129ec:	b15d      	cbz	r5, 8012a06 <__ieee754_sqrt+0x62>
 80129ee:	ee10 2a10 	vmov	r2, s0
 80129f2:	462b      	mov	r3, r5
 80129f4:	ee10 0a10 	vmov	r0, s0
 80129f8:	f7ed fc46 	bl	8000288 <__aeabi_dsub>
 80129fc:	4602      	mov	r2, r0
 80129fe:	460b      	mov	r3, r1
 8012a00:	f7ed ff24 	bl	800084c <__aeabi_ddiv>
 8012a04:	e7e6      	b.n	80129d4 <__ieee754_sqrt+0x30>
 8012a06:	1512      	asrs	r2, r2, #20
 8012a08:	d074      	beq.n	8012af4 <__ieee754_sqrt+0x150>
 8012a0a:	07d4      	lsls	r4, r2, #31
 8012a0c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8012a10:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8012a14:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8012a18:	bf5e      	ittt	pl
 8012a1a:	0fda      	lsrpl	r2, r3, #31
 8012a1c:	005b      	lslpl	r3, r3, #1
 8012a1e:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8012a22:	2400      	movs	r4, #0
 8012a24:	0fda      	lsrs	r2, r3, #31
 8012a26:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8012a2a:	107f      	asrs	r7, r7, #1
 8012a2c:	005b      	lsls	r3, r3, #1
 8012a2e:	2516      	movs	r5, #22
 8012a30:	4620      	mov	r0, r4
 8012a32:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8012a36:	1886      	adds	r6, r0, r2
 8012a38:	428e      	cmp	r6, r1
 8012a3a:	bfde      	ittt	le
 8012a3c:	1b89      	suble	r1, r1, r6
 8012a3e:	18b0      	addle	r0, r6, r2
 8012a40:	18a4      	addle	r4, r4, r2
 8012a42:	0049      	lsls	r1, r1, #1
 8012a44:	3d01      	subs	r5, #1
 8012a46:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8012a4a:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8012a4e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8012a52:	d1f0      	bne.n	8012a36 <__ieee754_sqrt+0x92>
 8012a54:	462a      	mov	r2, r5
 8012a56:	f04f 0e20 	mov.w	lr, #32
 8012a5a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8012a5e:	4281      	cmp	r1, r0
 8012a60:	eb06 0c05 	add.w	ip, r6, r5
 8012a64:	dc02      	bgt.n	8012a6c <__ieee754_sqrt+0xc8>
 8012a66:	d113      	bne.n	8012a90 <__ieee754_sqrt+0xec>
 8012a68:	459c      	cmp	ip, r3
 8012a6a:	d811      	bhi.n	8012a90 <__ieee754_sqrt+0xec>
 8012a6c:	f1bc 0f00 	cmp.w	ip, #0
 8012a70:	eb0c 0506 	add.w	r5, ip, r6
 8012a74:	da43      	bge.n	8012afe <__ieee754_sqrt+0x15a>
 8012a76:	2d00      	cmp	r5, #0
 8012a78:	db41      	blt.n	8012afe <__ieee754_sqrt+0x15a>
 8012a7a:	f100 0801 	add.w	r8, r0, #1
 8012a7e:	1a09      	subs	r1, r1, r0
 8012a80:	459c      	cmp	ip, r3
 8012a82:	bf88      	it	hi
 8012a84:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8012a88:	eba3 030c 	sub.w	r3, r3, ip
 8012a8c:	4432      	add	r2, r6
 8012a8e:	4640      	mov	r0, r8
 8012a90:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8012a94:	f1be 0e01 	subs.w	lr, lr, #1
 8012a98:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8012a9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8012aa0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8012aa4:	d1db      	bne.n	8012a5e <__ieee754_sqrt+0xba>
 8012aa6:	430b      	orrs	r3, r1
 8012aa8:	d006      	beq.n	8012ab8 <__ieee754_sqrt+0x114>
 8012aaa:	1c50      	adds	r0, r2, #1
 8012aac:	bf13      	iteet	ne
 8012aae:	3201      	addne	r2, #1
 8012ab0:	3401      	addeq	r4, #1
 8012ab2:	4672      	moveq	r2, lr
 8012ab4:	f022 0201 	bicne.w	r2, r2, #1
 8012ab8:	1063      	asrs	r3, r4, #1
 8012aba:	0852      	lsrs	r2, r2, #1
 8012abc:	07e1      	lsls	r1, r4, #31
 8012abe:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8012ac2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8012ac6:	bf48      	it	mi
 8012ac8:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8012acc:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8012ad0:	4614      	mov	r4, r2
 8012ad2:	e781      	b.n	80129d8 <__ieee754_sqrt+0x34>
 8012ad4:	0ad9      	lsrs	r1, r3, #11
 8012ad6:	3815      	subs	r0, #21
 8012ad8:	055b      	lsls	r3, r3, #21
 8012ada:	2900      	cmp	r1, #0
 8012adc:	d0fa      	beq.n	8012ad4 <__ieee754_sqrt+0x130>
 8012ade:	02cd      	lsls	r5, r1, #11
 8012ae0:	d50a      	bpl.n	8012af8 <__ieee754_sqrt+0x154>
 8012ae2:	f1c2 0420 	rsb	r4, r2, #32
 8012ae6:	fa23 f404 	lsr.w	r4, r3, r4
 8012aea:	1e55      	subs	r5, r2, #1
 8012aec:	4093      	lsls	r3, r2
 8012aee:	4321      	orrs	r1, r4
 8012af0:	1b42      	subs	r2, r0, r5
 8012af2:	e78a      	b.n	8012a0a <__ieee754_sqrt+0x66>
 8012af4:	4610      	mov	r0, r2
 8012af6:	e7f0      	b.n	8012ada <__ieee754_sqrt+0x136>
 8012af8:	0049      	lsls	r1, r1, #1
 8012afa:	3201      	adds	r2, #1
 8012afc:	e7ef      	b.n	8012ade <__ieee754_sqrt+0x13a>
 8012afe:	4680      	mov	r8, r0
 8012b00:	e7bd      	b.n	8012a7e <__ieee754_sqrt+0xda>
 8012b02:	bf00      	nop
 8012b04:	7ff00000 	.word	0x7ff00000

08012b08 <__ieee754_asinf>:
 8012b08:	b538      	push	{r3, r4, r5, lr}
 8012b0a:	ee10 5a10 	vmov	r5, s0
 8012b0e:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8012b12:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8012b16:	ed2d 8b04 	vpush	{d8-d9}
 8012b1a:	d10c      	bne.n	8012b36 <__ieee754_asinf+0x2e>
 8012b1c:	eddf 7a5d 	vldr	s15, [pc, #372]	; 8012c94 <__ieee754_asinf+0x18c>
 8012b20:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8012c98 <__ieee754_asinf+0x190>
 8012b24:	ee60 7a27 	vmul.f32	s15, s0, s15
 8012b28:	eee0 7a07 	vfma.f32	s15, s0, s14
 8012b2c:	eeb0 0a67 	vmov.f32	s0, s15
 8012b30:	ecbd 8b04 	vpop	{d8-d9}
 8012b34:	bd38      	pop	{r3, r4, r5, pc}
 8012b36:	dd04      	ble.n	8012b42 <__ieee754_asinf+0x3a>
 8012b38:	ee70 7a40 	vsub.f32	s15, s0, s0
 8012b3c:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8012b40:	e7f6      	b.n	8012b30 <__ieee754_asinf+0x28>
 8012b42:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 8012b46:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8012b4a:	da0b      	bge.n	8012b64 <__ieee754_asinf+0x5c>
 8012b4c:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 8012b50:	da52      	bge.n	8012bf8 <__ieee754_asinf+0xf0>
 8012b52:	eddf 7a52 	vldr	s15, [pc, #328]	; 8012c9c <__ieee754_asinf+0x194>
 8012b56:	ee70 7a27 	vadd.f32	s15, s0, s15
 8012b5a:	eef4 7ae8 	vcmpe.f32	s15, s17
 8012b5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b62:	dce5      	bgt.n	8012b30 <__ieee754_asinf+0x28>
 8012b64:	f001 fa42 	bl	8013fec <fabsf>
 8012b68:	ee38 0ac0 	vsub.f32	s0, s17, s0
 8012b6c:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 8012b70:	ee20 8a08 	vmul.f32	s16, s0, s16
 8012b74:	eddf 7a4a 	vldr	s15, [pc, #296]	; 8012ca0 <__ieee754_asinf+0x198>
 8012b78:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8012ca4 <__ieee754_asinf+0x19c>
 8012b7c:	ed9f 9a4a 	vldr	s18, [pc, #296]	; 8012ca8 <__ieee754_asinf+0x1a0>
 8012b80:	eea8 7a27 	vfma.f32	s14, s16, s15
 8012b84:	eddf 7a49 	vldr	s15, [pc, #292]	; 8012cac <__ieee754_asinf+0x1a4>
 8012b88:	eee7 7a08 	vfma.f32	s15, s14, s16
 8012b8c:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8012cb0 <__ieee754_asinf+0x1a8>
 8012b90:	eea7 7a88 	vfma.f32	s14, s15, s16
 8012b94:	eddf 7a47 	vldr	s15, [pc, #284]	; 8012cb4 <__ieee754_asinf+0x1ac>
 8012b98:	eee7 7a08 	vfma.f32	s15, s14, s16
 8012b9c:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8012cb8 <__ieee754_asinf+0x1b0>
 8012ba0:	eea7 9a88 	vfma.f32	s18, s15, s16
 8012ba4:	eddf 7a45 	vldr	s15, [pc, #276]	; 8012cbc <__ieee754_asinf+0x1b4>
 8012ba8:	eee8 7a07 	vfma.f32	s15, s16, s14
 8012bac:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8012cc0 <__ieee754_asinf+0x1b8>
 8012bb0:	eea7 7a88 	vfma.f32	s14, s15, s16
 8012bb4:	eddf 7a43 	vldr	s15, [pc, #268]	; 8012cc4 <__ieee754_asinf+0x1bc>
 8012bb8:	eee7 7a08 	vfma.f32	s15, s14, s16
 8012bbc:	eeb0 0a48 	vmov.f32	s0, s16
 8012bc0:	eee7 8a88 	vfma.f32	s17, s15, s16
 8012bc4:	f000 fd30 	bl	8013628 <__ieee754_sqrtf>
 8012bc8:	4b3f      	ldr	r3, [pc, #252]	; (8012cc8 <__ieee754_asinf+0x1c0>)
 8012bca:	ee29 9a08 	vmul.f32	s18, s18, s16
 8012bce:	429c      	cmp	r4, r3
 8012bd0:	ee89 6a28 	vdiv.f32	s12, s18, s17
 8012bd4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8012bd8:	dd3d      	ble.n	8012c56 <__ieee754_asinf+0x14e>
 8012bda:	eea0 0a06 	vfma.f32	s0, s0, s12
 8012bde:	eddf 7a3b 	vldr	s15, [pc, #236]	; 8012ccc <__ieee754_asinf+0x1c4>
 8012be2:	eee0 7a26 	vfma.f32	s15, s0, s13
 8012be6:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8012c98 <__ieee754_asinf+0x190>
 8012bea:	ee30 0a67 	vsub.f32	s0, s0, s15
 8012bee:	2d00      	cmp	r5, #0
 8012bf0:	bfd8      	it	le
 8012bf2:	eeb1 0a40 	vnegle.f32	s0, s0
 8012bf6:	e79b      	b.n	8012b30 <__ieee754_asinf+0x28>
 8012bf8:	ee60 7a00 	vmul.f32	s15, s0, s0
 8012bfc:	eddf 6a28 	vldr	s13, [pc, #160]	; 8012ca0 <__ieee754_asinf+0x198>
 8012c00:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8012ca4 <__ieee754_asinf+0x19c>
 8012c04:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 8012cb8 <__ieee754_asinf+0x1b0>
 8012c08:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8012c0c:	eddf 6a27 	vldr	s13, [pc, #156]	; 8012cac <__ieee754_asinf+0x1a4>
 8012c10:	eee7 6a27 	vfma.f32	s13, s14, s15
 8012c14:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8012cb0 <__ieee754_asinf+0x1a8>
 8012c18:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8012c1c:	eddf 6a25 	vldr	s13, [pc, #148]	; 8012cb4 <__ieee754_asinf+0x1ac>
 8012c20:	eee7 6a27 	vfma.f32	s13, s14, s15
 8012c24:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8012ca8 <__ieee754_asinf+0x1a0>
 8012c28:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8012c2c:	eddf 6a23 	vldr	s13, [pc, #140]	; 8012cbc <__ieee754_asinf+0x1b4>
 8012c30:	eee7 6a86 	vfma.f32	s13, s15, s12
 8012c34:	ed9f 6a22 	vldr	s12, [pc, #136]	; 8012cc0 <__ieee754_asinf+0x1b8>
 8012c38:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8012c3c:	eddf 6a21 	vldr	s13, [pc, #132]	; 8012cc4 <__ieee754_asinf+0x1bc>
 8012c40:	eee6 6a27 	vfma.f32	s13, s12, s15
 8012c44:	ee27 7a27 	vmul.f32	s14, s14, s15
 8012c48:	eee6 8aa7 	vfma.f32	s17, s13, s15
 8012c4c:	eec7 7a28 	vdiv.f32	s15, s14, s17
 8012c50:	eea0 0a27 	vfma.f32	s0, s0, s15
 8012c54:	e76c      	b.n	8012b30 <__ieee754_asinf+0x28>
 8012c56:	ee10 3a10 	vmov	r3, s0
 8012c5a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8012c5e:	f023 030f 	bic.w	r3, r3, #15
 8012c62:	ee07 3a10 	vmov	s14, r3
 8012c66:	eea7 8a47 	vfms.f32	s16, s14, s14
 8012c6a:	ee70 7a07 	vadd.f32	s15, s0, s14
 8012c6e:	ee30 0a00 	vadd.f32	s0, s0, s0
 8012c72:	eec8 5a27 	vdiv.f32	s11, s16, s15
 8012c76:	eddf 7a07 	vldr	s15, [pc, #28]	; 8012c94 <__ieee754_asinf+0x18c>
 8012c7a:	eee5 7ae6 	vfms.f32	s15, s11, s13
 8012c7e:	eed0 7a06 	vfnms.f32	s15, s0, s12
 8012c82:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8012cd0 <__ieee754_asinf+0x1c8>
 8012c86:	eeb0 6a40 	vmov.f32	s12, s0
 8012c8a:	eea7 6a66 	vfms.f32	s12, s14, s13
 8012c8e:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8012c92:	e7aa      	b.n	8012bea <__ieee754_asinf+0xe2>
 8012c94:	b33bbd2e 	.word	0xb33bbd2e
 8012c98:	3fc90fdb 	.word	0x3fc90fdb
 8012c9c:	7149f2ca 	.word	0x7149f2ca
 8012ca0:	3811ef08 	.word	0x3811ef08
 8012ca4:	3a4f7f04 	.word	0x3a4f7f04
 8012ca8:	3e2aaaab 	.word	0x3e2aaaab
 8012cac:	bd241146 	.word	0xbd241146
 8012cb0:	3e4e0aa8 	.word	0x3e4e0aa8
 8012cb4:	bea6b090 	.word	0xbea6b090
 8012cb8:	3d9dc62e 	.word	0x3d9dc62e
 8012cbc:	bf303361 	.word	0xbf303361
 8012cc0:	4001572d 	.word	0x4001572d
 8012cc4:	c019d139 	.word	0xc019d139
 8012cc8:	3f799999 	.word	0x3f799999
 8012ccc:	333bbd2e 	.word	0x333bbd2e
 8012cd0:	3f490fdb 	.word	0x3f490fdb

08012cd4 <__ieee754_atan2f>:
 8012cd4:	ee10 2a90 	vmov	r2, s1
 8012cd8:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8012cdc:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8012ce0:	b510      	push	{r4, lr}
 8012ce2:	eef0 7a40 	vmov.f32	s15, s0
 8012ce6:	dc06      	bgt.n	8012cf6 <__ieee754_atan2f+0x22>
 8012ce8:	ee10 0a10 	vmov	r0, s0
 8012cec:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8012cf0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8012cf4:	dd04      	ble.n	8012d00 <__ieee754_atan2f+0x2c>
 8012cf6:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8012cfa:	eeb0 0a67 	vmov.f32	s0, s15
 8012cfe:	bd10      	pop	{r4, pc}
 8012d00:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8012d04:	d103      	bne.n	8012d0e <__ieee754_atan2f+0x3a>
 8012d06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012d0a:	f001 b89b 	b.w	8013e44 <atanf>
 8012d0e:	1794      	asrs	r4, r2, #30
 8012d10:	f004 0402 	and.w	r4, r4, #2
 8012d14:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8012d18:	b943      	cbnz	r3, 8012d2c <__ieee754_atan2f+0x58>
 8012d1a:	2c02      	cmp	r4, #2
 8012d1c:	d05e      	beq.n	8012ddc <__ieee754_atan2f+0x108>
 8012d1e:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8012df0 <__ieee754_atan2f+0x11c>
 8012d22:	2c03      	cmp	r4, #3
 8012d24:	bf08      	it	eq
 8012d26:	eef0 7a47 	vmoveq.f32	s15, s14
 8012d2a:	e7e6      	b.n	8012cfa <__ieee754_atan2f+0x26>
 8012d2c:	b941      	cbnz	r1, 8012d40 <__ieee754_atan2f+0x6c>
 8012d2e:	eddf 7a31 	vldr	s15, [pc, #196]	; 8012df4 <__ieee754_atan2f+0x120>
 8012d32:	ed9f 0a31 	vldr	s0, [pc, #196]	; 8012df8 <__ieee754_atan2f+0x124>
 8012d36:	2800      	cmp	r0, #0
 8012d38:	bfb8      	it	lt
 8012d3a:	eef0 7a40 	vmovlt.f32	s15, s0
 8012d3e:	e7dc      	b.n	8012cfa <__ieee754_atan2f+0x26>
 8012d40:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8012d44:	d110      	bne.n	8012d68 <__ieee754_atan2f+0x94>
 8012d46:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8012d4a:	f104 34ff 	add.w	r4, r4, #4294967295
 8012d4e:	d107      	bne.n	8012d60 <__ieee754_atan2f+0x8c>
 8012d50:	2c02      	cmp	r4, #2
 8012d52:	d846      	bhi.n	8012de2 <__ieee754_atan2f+0x10e>
 8012d54:	4b29      	ldr	r3, [pc, #164]	; (8012dfc <__ieee754_atan2f+0x128>)
 8012d56:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8012d5a:	edd4 7a00 	vldr	s15, [r4]
 8012d5e:	e7cc      	b.n	8012cfa <__ieee754_atan2f+0x26>
 8012d60:	2c02      	cmp	r4, #2
 8012d62:	d841      	bhi.n	8012de8 <__ieee754_atan2f+0x114>
 8012d64:	4b26      	ldr	r3, [pc, #152]	; (8012e00 <__ieee754_atan2f+0x12c>)
 8012d66:	e7f6      	b.n	8012d56 <__ieee754_atan2f+0x82>
 8012d68:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8012d6c:	d0df      	beq.n	8012d2e <__ieee754_atan2f+0x5a>
 8012d6e:	1a5b      	subs	r3, r3, r1
 8012d70:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 8012d74:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8012d78:	da1a      	bge.n	8012db0 <__ieee754_atan2f+0xdc>
 8012d7a:	2a00      	cmp	r2, #0
 8012d7c:	da01      	bge.n	8012d82 <__ieee754_atan2f+0xae>
 8012d7e:	313c      	adds	r1, #60	; 0x3c
 8012d80:	db19      	blt.n	8012db6 <__ieee754_atan2f+0xe2>
 8012d82:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8012d86:	f001 f931 	bl	8013fec <fabsf>
 8012d8a:	f001 f85b 	bl	8013e44 <atanf>
 8012d8e:	eef0 7a40 	vmov.f32	s15, s0
 8012d92:	2c01      	cmp	r4, #1
 8012d94:	d012      	beq.n	8012dbc <__ieee754_atan2f+0xe8>
 8012d96:	2c02      	cmp	r4, #2
 8012d98:	d017      	beq.n	8012dca <__ieee754_atan2f+0xf6>
 8012d9a:	2c00      	cmp	r4, #0
 8012d9c:	d0ad      	beq.n	8012cfa <__ieee754_atan2f+0x26>
 8012d9e:	ed9f 0a19 	vldr	s0, [pc, #100]	; 8012e04 <__ieee754_atan2f+0x130>
 8012da2:	ee77 7a80 	vadd.f32	s15, s15, s0
 8012da6:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8012e08 <__ieee754_atan2f+0x134>
 8012daa:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8012dae:	e7a4      	b.n	8012cfa <__ieee754_atan2f+0x26>
 8012db0:	eddf 7a10 	vldr	s15, [pc, #64]	; 8012df4 <__ieee754_atan2f+0x120>
 8012db4:	e7ed      	b.n	8012d92 <__ieee754_atan2f+0xbe>
 8012db6:	eddf 7a15 	vldr	s15, [pc, #84]	; 8012e0c <__ieee754_atan2f+0x138>
 8012dba:	e7ea      	b.n	8012d92 <__ieee754_atan2f+0xbe>
 8012dbc:	ee17 3a90 	vmov	r3, s15
 8012dc0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8012dc4:	ee07 3a90 	vmov	s15, r3
 8012dc8:	e797      	b.n	8012cfa <__ieee754_atan2f+0x26>
 8012dca:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8012e04 <__ieee754_atan2f+0x130>
 8012dce:	ee77 7a80 	vadd.f32	s15, s15, s0
 8012dd2:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8012e08 <__ieee754_atan2f+0x134>
 8012dd6:	ee70 7a67 	vsub.f32	s15, s0, s15
 8012dda:	e78e      	b.n	8012cfa <__ieee754_atan2f+0x26>
 8012ddc:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8012e08 <__ieee754_atan2f+0x134>
 8012de0:	e78b      	b.n	8012cfa <__ieee754_atan2f+0x26>
 8012de2:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8012e10 <__ieee754_atan2f+0x13c>
 8012de6:	e788      	b.n	8012cfa <__ieee754_atan2f+0x26>
 8012de8:	eddf 7a08 	vldr	s15, [pc, #32]	; 8012e0c <__ieee754_atan2f+0x138>
 8012dec:	e785      	b.n	8012cfa <__ieee754_atan2f+0x26>
 8012dee:	bf00      	nop
 8012df0:	c0490fdb 	.word	0xc0490fdb
 8012df4:	3fc90fdb 	.word	0x3fc90fdb
 8012df8:	bfc90fdb 	.word	0xbfc90fdb
 8012dfc:	080147f8 	.word	0x080147f8
 8012e00:	08014804 	.word	0x08014804
 8012e04:	33bbbd2e 	.word	0x33bbbd2e
 8012e08:	40490fdb 	.word	0x40490fdb
 8012e0c:	00000000 	.word	0x00000000
 8012e10:	3f490fdb 	.word	0x3f490fdb

08012e14 <__ieee754_powf>:
 8012e14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012e18:	ee10 4a90 	vmov	r4, s1
 8012e1c:	f034 4800 	bics.w	r8, r4, #2147483648	; 0x80000000
 8012e20:	ed2d 8b02 	vpush	{d8}
 8012e24:	ee10 6a10 	vmov	r6, s0
 8012e28:	eeb0 8a40 	vmov.f32	s16, s0
 8012e2c:	eef0 8a60 	vmov.f32	s17, s1
 8012e30:	d10c      	bne.n	8012e4c <__ieee754_powf+0x38>
 8012e32:	f486 0680 	eor.w	r6, r6, #4194304	; 0x400000
 8012e36:	0076      	lsls	r6, r6, #1
 8012e38:	f516 0f00 	cmn.w	r6, #8388608	; 0x800000
 8012e3c:	f240 8296 	bls.w	801336c <__ieee754_powf+0x558>
 8012e40:	ee38 0a28 	vadd.f32	s0, s16, s17
 8012e44:	ecbd 8b02 	vpop	{d8}
 8012e48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012e4c:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8012e50:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8012e54:	dcf4      	bgt.n	8012e40 <__ieee754_powf+0x2c>
 8012e56:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 8012e5a:	dd08      	ble.n	8012e6e <__ieee754_powf+0x5a>
 8012e5c:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
 8012e60:	d1ee      	bne.n	8012e40 <__ieee754_powf+0x2c>
 8012e62:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 8012e66:	0064      	lsls	r4, r4, #1
 8012e68:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 8012e6c:	e7e6      	b.n	8012e3c <__ieee754_powf+0x28>
 8012e6e:	2e00      	cmp	r6, #0
 8012e70:	da20      	bge.n	8012eb4 <__ieee754_powf+0xa0>
 8012e72:	f1b8 4f97 	cmp.w	r8, #1266679808	; 0x4b800000
 8012e76:	da2d      	bge.n	8012ed4 <__ieee754_powf+0xc0>
 8012e78:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 8012e7c:	f2c0 827f 	blt.w	801337e <__ieee754_powf+0x56a>
 8012e80:	ea4f 53e8 	mov.w	r3, r8, asr #23
 8012e84:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8012e88:	fa48 f703 	asr.w	r7, r8, r3
 8012e8c:	fa07 f303 	lsl.w	r3, r7, r3
 8012e90:	4543      	cmp	r3, r8
 8012e92:	f040 8274 	bne.w	801337e <__ieee754_powf+0x56a>
 8012e96:	f007 0701 	and.w	r7, r7, #1
 8012e9a:	f1c7 0702 	rsb	r7, r7, #2
 8012e9e:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 8012ea2:	d11f      	bne.n	8012ee4 <__ieee754_powf+0xd0>
 8012ea4:	2c00      	cmp	r4, #0
 8012ea6:	f280 8267 	bge.w	8013378 <__ieee754_powf+0x564>
 8012eaa:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8012eae:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8012eb2:	e7c7      	b.n	8012e44 <__ieee754_powf+0x30>
 8012eb4:	2700      	movs	r7, #0
 8012eb6:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 8012eba:	d1f0      	bne.n	8012e9e <__ieee754_powf+0x8a>
 8012ebc:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 8012ec0:	f000 8254 	beq.w	801336c <__ieee754_powf+0x558>
 8012ec4:	dd08      	ble.n	8012ed8 <__ieee754_powf+0xc4>
 8012ec6:	ed9f 0ac2 	vldr	s0, [pc, #776]	; 80131d0 <__ieee754_powf+0x3bc>
 8012eca:	2c00      	cmp	r4, #0
 8012ecc:	bfa8      	it	ge
 8012ece:	eeb0 0a68 	vmovge.f32	s0, s17
 8012ed2:	e7b7      	b.n	8012e44 <__ieee754_powf+0x30>
 8012ed4:	2702      	movs	r7, #2
 8012ed6:	e7ee      	b.n	8012eb6 <__ieee754_powf+0xa2>
 8012ed8:	2c00      	cmp	r4, #0
 8012eda:	f280 824a 	bge.w	8013372 <__ieee754_powf+0x55e>
 8012ede:	eeb1 0a68 	vneg.f32	s0, s17
 8012ee2:	e7af      	b.n	8012e44 <__ieee754_powf+0x30>
 8012ee4:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 8012ee8:	d102      	bne.n	8012ef0 <__ieee754_powf+0xdc>
 8012eea:	ee28 0a08 	vmul.f32	s0, s16, s16
 8012eee:	e7a9      	b.n	8012e44 <__ieee754_powf+0x30>
 8012ef0:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 8012ef4:	eeb0 0a48 	vmov.f32	s0, s16
 8012ef8:	d107      	bne.n	8012f0a <__ieee754_powf+0xf6>
 8012efa:	2e00      	cmp	r6, #0
 8012efc:	db05      	blt.n	8012f0a <__ieee754_powf+0xf6>
 8012efe:	ecbd 8b02 	vpop	{d8}
 8012f02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012f06:	f000 bb8f 	b.w	8013628 <__ieee754_sqrtf>
 8012f0a:	f001 f86f 	bl	8013fec <fabsf>
 8012f0e:	b125      	cbz	r5, 8012f1a <__ieee754_powf+0x106>
 8012f10:	f026 4340 	bic.w	r3, r6, #3221225472	; 0xc0000000
 8012f14:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8012f18:	d116      	bne.n	8012f48 <__ieee754_powf+0x134>
 8012f1a:	2c00      	cmp	r4, #0
 8012f1c:	bfbc      	itt	lt
 8012f1e:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 8012f22:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8012f26:	2e00      	cmp	r6, #0
 8012f28:	da8c      	bge.n	8012e44 <__ieee754_powf+0x30>
 8012f2a:	f1a5 557e 	sub.w	r5, r5, #1065353216	; 0x3f800000
 8012f2e:	ea55 0307 	orrs.w	r3, r5, r7
 8012f32:	d104      	bne.n	8012f3e <__ieee754_powf+0x12a>
 8012f34:	ee70 7a40 	vsub.f32	s15, s0, s0
 8012f38:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8012f3c:	e782      	b.n	8012e44 <__ieee754_powf+0x30>
 8012f3e:	2f01      	cmp	r7, #1
 8012f40:	d180      	bne.n	8012e44 <__ieee754_powf+0x30>
 8012f42:	eeb1 0a40 	vneg.f32	s0, s0
 8012f46:	e77d      	b.n	8012e44 <__ieee754_powf+0x30>
 8012f48:	0ff0      	lsrs	r0, r6, #31
 8012f4a:	3801      	subs	r0, #1
 8012f4c:	ea57 0300 	orrs.w	r3, r7, r0
 8012f50:	d104      	bne.n	8012f5c <__ieee754_powf+0x148>
 8012f52:	ee38 8a48 	vsub.f32	s16, s16, s16
 8012f56:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8012f5a:	e773      	b.n	8012e44 <__ieee754_powf+0x30>
 8012f5c:	f1b8 4f9a 	cmp.w	r8, #1291845632	; 0x4d000000
 8012f60:	dd74      	ble.n	801304c <__ieee754_powf+0x238>
 8012f62:	4b9c      	ldr	r3, [pc, #624]	; (80131d4 <__ieee754_powf+0x3c0>)
 8012f64:	429d      	cmp	r5, r3
 8012f66:	dc08      	bgt.n	8012f7a <__ieee754_powf+0x166>
 8012f68:	2c00      	cmp	r4, #0
 8012f6a:	da0b      	bge.n	8012f84 <__ieee754_powf+0x170>
 8012f6c:	2000      	movs	r0, #0
 8012f6e:	ecbd 8b02 	vpop	{d8}
 8012f72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012f76:	f000 bec5 	b.w	8013d04 <__math_oflowf>
 8012f7a:	4b97      	ldr	r3, [pc, #604]	; (80131d8 <__ieee754_powf+0x3c4>)
 8012f7c:	429d      	cmp	r5, r3
 8012f7e:	dd08      	ble.n	8012f92 <__ieee754_powf+0x17e>
 8012f80:	2c00      	cmp	r4, #0
 8012f82:	dcf3      	bgt.n	8012f6c <__ieee754_powf+0x158>
 8012f84:	2000      	movs	r0, #0
 8012f86:	ecbd 8b02 	vpop	{d8}
 8012f8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012f8e:	f000 beb3 	b.w	8013cf8 <__math_uflowf>
 8012f92:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8012f96:	ee30 0a67 	vsub.f32	s0, s0, s15
 8012f9a:	eddf 6a90 	vldr	s13, [pc, #576]	; 80131dc <__ieee754_powf+0x3c8>
 8012f9e:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8012fa2:	eee0 6a67 	vfms.f32	s13, s0, s15
 8012fa6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8012faa:	eee6 7ac0 	vfms.f32	s15, s13, s0
 8012fae:	ee20 7a00 	vmul.f32	s14, s0, s0
 8012fb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012fb6:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 80131e0 <__ieee754_powf+0x3cc>
 8012fba:	ee67 7a67 	vnmul.f32	s15, s14, s15
 8012fbe:	ed9f 7a89 	vldr	s14, [pc, #548]	; 80131e4 <__ieee754_powf+0x3d0>
 8012fc2:	eee0 7a07 	vfma.f32	s15, s0, s14
 8012fc6:	ed9f 7a88 	vldr	s14, [pc, #544]	; 80131e8 <__ieee754_powf+0x3d4>
 8012fca:	eef0 6a67 	vmov.f32	s13, s15
 8012fce:	eee0 6a07 	vfma.f32	s13, s0, s14
 8012fd2:	ee16 3a90 	vmov	r3, s13
 8012fd6:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8012fda:	f023 030f 	bic.w	r3, r3, #15
 8012fde:	ee00 3a90 	vmov	s1, r3
 8012fe2:	eee0 0a47 	vfms.f32	s1, s0, s14
 8012fe6:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8012fea:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 8012fee:	f024 040f 	bic.w	r4, r4, #15
 8012ff2:	ee07 4a10 	vmov	s14, r4
 8012ff6:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8012ffa:	ee38 7ac7 	vsub.f32	s14, s17, s14
 8012ffe:	ee07 3a90 	vmov	s15, r3
 8013002:	eee7 0a27 	vfma.f32	s1, s14, s15
 8013006:	3f01      	subs	r7, #1
 8013008:	ea57 0200 	orrs.w	r2, r7, r0
 801300c:	ee07 4a10 	vmov	s14, r4
 8013010:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013014:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8013018:	ee30 7aa7 	vadd.f32	s14, s1, s15
 801301c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8013020:	ee17 4a10 	vmov	r4, s14
 8013024:	bf08      	it	eq
 8013026:	eeb0 8a40 	vmoveq.f32	s16, s0
 801302a:	2c00      	cmp	r4, #0
 801302c:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8013030:	f340 817e 	ble.w	8013330 <__ieee754_powf+0x51c>
 8013034:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 8013038:	f340 80f8 	ble.w	801322c <__ieee754_powf+0x418>
 801303c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8013040:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013044:	bf4c      	ite	mi
 8013046:	2001      	movmi	r0, #1
 8013048:	2000      	movpl	r0, #0
 801304a:	e790      	b.n	8012f6e <__ieee754_powf+0x15a>
 801304c:	f016 4fff 	tst.w	r6, #2139095040	; 0x7f800000
 8013050:	bf01      	itttt	eq
 8013052:	eddf 7a66 	vldreq	s15, [pc, #408]	; 80131ec <__ieee754_powf+0x3d8>
 8013056:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 801305a:	f06f 0217 	mvneq.w	r2, #23
 801305e:	ee17 5a90 	vmoveq	r5, s15
 8013062:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8013066:	bf18      	it	ne
 8013068:	2200      	movne	r2, #0
 801306a:	3b7f      	subs	r3, #127	; 0x7f
 801306c:	4413      	add	r3, r2
 801306e:	4a60      	ldr	r2, [pc, #384]	; (80131f0 <__ieee754_powf+0x3dc>)
 8013070:	f3c5 0516 	ubfx	r5, r5, #0, #23
 8013074:	4295      	cmp	r5, r2
 8013076:	f045 517e 	orr.w	r1, r5, #1065353216	; 0x3f800000
 801307a:	dd06      	ble.n	801308a <__ieee754_powf+0x276>
 801307c:	4a5d      	ldr	r2, [pc, #372]	; (80131f4 <__ieee754_powf+0x3e0>)
 801307e:	4295      	cmp	r5, r2
 8013080:	f340 80a4 	ble.w	80131cc <__ieee754_powf+0x3b8>
 8013084:	3301      	adds	r3, #1
 8013086:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 801308a:	2500      	movs	r5, #0
 801308c:	4a5a      	ldr	r2, [pc, #360]	; (80131f8 <__ieee754_powf+0x3e4>)
 801308e:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 8013092:	ee07 1a90 	vmov	s15, r1
 8013096:	ed92 7a00 	vldr	s14, [r2]
 801309a:	4a58      	ldr	r2, [pc, #352]	; (80131fc <__ieee754_powf+0x3e8>)
 801309c:	ee37 6a27 	vadd.f32	s12, s14, s15
 80130a0:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 80130a4:	eec5 6a86 	vdiv.f32	s13, s11, s12
 80130a8:	1049      	asrs	r1, r1, #1
 80130aa:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 80130ae:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 80130b2:	eb01 5145 	add.w	r1, r1, r5, lsl #21
 80130b6:	ee37 5ac7 	vsub.f32	s10, s15, s14
 80130ba:	ee06 1a10 	vmov	s12, r1
 80130be:	ee65 4a26 	vmul.f32	s9, s10, s13
 80130c2:	ee36 7a47 	vsub.f32	s14, s12, s14
 80130c6:	ee14 6a90 	vmov	r6, s9
 80130ca:	4016      	ands	r6, r2
 80130cc:	ee05 6a90 	vmov	s11, r6
 80130d0:	eea5 5ac6 	vfms.f32	s10, s11, s12
 80130d4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80130d8:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8013200 <__ieee754_powf+0x3ec>
 80130dc:	eea5 5ae7 	vfms.f32	s10, s11, s15
 80130e0:	ee64 7aa4 	vmul.f32	s15, s9, s9
 80130e4:	ee25 6a26 	vmul.f32	s12, s10, s13
 80130e8:	eddf 6a46 	vldr	s13, [pc, #280]	; 8013204 <__ieee754_powf+0x3f0>
 80130ec:	eea7 7aa6 	vfma.f32	s14, s15, s13
 80130f0:	eddf 6a45 	vldr	s13, [pc, #276]	; 8013208 <__ieee754_powf+0x3f4>
 80130f4:	eee7 6a27 	vfma.f32	s13, s14, s15
 80130f8:	ed9f 7a38 	vldr	s14, [pc, #224]	; 80131dc <__ieee754_powf+0x3c8>
 80130fc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8013100:	eddf 6a42 	vldr	s13, [pc, #264]	; 801320c <__ieee754_powf+0x3f8>
 8013104:	eee7 6a27 	vfma.f32	s13, s14, s15
 8013108:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8013210 <__ieee754_powf+0x3fc>
 801310c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8013110:	ee74 6aa5 	vadd.f32	s13, s9, s11
 8013114:	ee27 5aa7 	vmul.f32	s10, s15, s15
 8013118:	ee66 6a86 	vmul.f32	s13, s13, s12
 801311c:	eee5 6a07 	vfma.f32	s13, s10, s14
 8013120:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 8013124:	eef0 7a45 	vmov.f32	s15, s10
 8013128:	eee5 7aa5 	vfma.f32	s15, s11, s11
 801312c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013130:	ee17 1a90 	vmov	r1, s15
 8013134:	4011      	ands	r1, r2
 8013136:	ee07 1a90 	vmov	s15, r1
 801313a:	ee37 7ac5 	vsub.f32	s14, s15, s10
 801313e:	eea5 7ae5 	vfms.f32	s14, s11, s11
 8013142:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8013146:	ee27 7a24 	vmul.f32	s14, s14, s9
 801314a:	eea6 7a27 	vfma.f32	s14, s12, s15
 801314e:	eeb0 6a47 	vmov.f32	s12, s14
 8013152:	eea5 6aa7 	vfma.f32	s12, s11, s15
 8013156:	ee16 1a10 	vmov	r1, s12
 801315a:	4011      	ands	r1, r2
 801315c:	ee06 1a90 	vmov	s13, r1
 8013160:	eee5 6ae7 	vfms.f32	s13, s11, s15
 8013164:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8013214 <__ieee754_powf+0x400>
 8013168:	eddf 5a2b 	vldr	s11, [pc, #172]	; 8013218 <__ieee754_powf+0x404>
 801316c:	ee37 7a66 	vsub.f32	s14, s14, s13
 8013170:	ee06 1a10 	vmov	s12, r1
 8013174:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013178:	eddf 7a28 	vldr	s15, [pc, #160]	; 801321c <__ieee754_powf+0x408>
 801317c:	4928      	ldr	r1, [pc, #160]	; (8013220 <__ieee754_powf+0x40c>)
 801317e:	eea6 7a27 	vfma.f32	s14, s12, s15
 8013182:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 8013186:	edd1 7a00 	vldr	s15, [r1]
 801318a:	ee37 7a27 	vadd.f32	s14, s14, s15
 801318e:	ee07 3a90 	vmov	s15, r3
 8013192:	4b24      	ldr	r3, [pc, #144]	; (8013224 <__ieee754_powf+0x410>)
 8013194:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8013198:	eef0 7a47 	vmov.f32	s15, s14
 801319c:	eee6 7a25 	vfma.f32	s15, s12, s11
 80131a0:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 80131a4:	edd5 0a00 	vldr	s1, [r5]
 80131a8:	ee77 7aa0 	vadd.f32	s15, s15, s1
 80131ac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80131b0:	ee17 3a90 	vmov	r3, s15
 80131b4:	4013      	ands	r3, r2
 80131b6:	ee07 3a90 	vmov	s15, r3
 80131ba:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80131be:	ee76 6ae0 	vsub.f32	s13, s13, s1
 80131c2:	eee6 6a65 	vfms.f32	s13, s12, s11
 80131c6:	ee77 7a66 	vsub.f32	s15, s14, s13
 80131ca:	e70e      	b.n	8012fea <__ieee754_powf+0x1d6>
 80131cc:	2501      	movs	r5, #1
 80131ce:	e75d      	b.n	801308c <__ieee754_powf+0x278>
 80131d0:	00000000 	.word	0x00000000
 80131d4:	3f7ffff3 	.word	0x3f7ffff3
 80131d8:	3f800007 	.word	0x3f800007
 80131dc:	3eaaaaab 	.word	0x3eaaaaab
 80131e0:	3fb8aa3b 	.word	0x3fb8aa3b
 80131e4:	36eca570 	.word	0x36eca570
 80131e8:	3fb8aa00 	.word	0x3fb8aa00
 80131ec:	4b800000 	.word	0x4b800000
 80131f0:	001cc471 	.word	0x001cc471
 80131f4:	005db3d6 	.word	0x005db3d6
 80131f8:	08014810 	.word	0x08014810
 80131fc:	fffff000 	.word	0xfffff000
 8013200:	3e6c3255 	.word	0x3e6c3255
 8013204:	3e53f142 	.word	0x3e53f142
 8013208:	3e8ba305 	.word	0x3e8ba305
 801320c:	3edb6db7 	.word	0x3edb6db7
 8013210:	3f19999a 	.word	0x3f19999a
 8013214:	3f76384f 	.word	0x3f76384f
 8013218:	3f763800 	.word	0x3f763800
 801321c:	369dc3a0 	.word	0x369dc3a0
 8013220:	08014820 	.word	0x08014820
 8013224:	08014818 	.word	0x08014818
 8013228:	3338aa3c 	.word	0x3338aa3c
 801322c:	f040 8095 	bne.w	801335a <__ieee754_powf+0x546>
 8013230:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 8013228 <__ieee754_powf+0x414>
 8013234:	ee37 7a67 	vsub.f32	s14, s14, s15
 8013238:	ee70 6aa6 	vadd.f32	s13, s1, s13
 801323c:	eef4 6ac7 	vcmpe.f32	s13, s14
 8013240:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013244:	f73f aefa 	bgt.w	801303c <__ieee754_powf+0x228>
 8013248:	15db      	asrs	r3, r3, #23
 801324a:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 801324e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8013252:	4103      	asrs	r3, r0
 8013254:	4423      	add	r3, r4
 8013256:	494b      	ldr	r1, [pc, #300]	; (8013384 <__ieee754_powf+0x570>)
 8013258:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801325c:	3a7f      	subs	r2, #127	; 0x7f
 801325e:	4111      	asrs	r1, r2
 8013260:	ea23 0101 	bic.w	r1, r3, r1
 8013264:	ee07 1a10 	vmov	s14, r1
 8013268:	f3c3 0016 	ubfx	r0, r3, #0, #23
 801326c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8013270:	f1c2 0217 	rsb	r2, r2, #23
 8013274:	4110      	asrs	r0, r2
 8013276:	2c00      	cmp	r4, #0
 8013278:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801327c:	bfb8      	it	lt
 801327e:	4240      	neglt	r0, r0
 8013280:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8013284:	ed9f 0a40 	vldr	s0, [pc, #256]	; 8013388 <__ieee754_powf+0x574>
 8013288:	eddf 6a40 	vldr	s13, [pc, #256]	; 801338c <__ieee754_powf+0x578>
 801328c:	ee17 3a10 	vmov	r3, s14
 8013290:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8013294:	f023 030f 	bic.w	r3, r3, #15
 8013298:	ee07 3a10 	vmov	s14, r3
 801329c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80132a0:	ee27 0a00 	vmul.f32	s0, s14, s0
 80132a4:	ee70 0ae7 	vsub.f32	s1, s1, s15
 80132a8:	eddf 7a39 	vldr	s15, [pc, #228]	; 8013390 <__ieee754_powf+0x57c>
 80132ac:	eea0 0aa7 	vfma.f32	s0, s1, s15
 80132b0:	eef0 7a40 	vmov.f32	s15, s0
 80132b4:	eee7 7a26 	vfma.f32	s15, s14, s13
 80132b8:	eeb0 6a67 	vmov.f32	s12, s15
 80132bc:	eea7 6a66 	vfms.f32	s12, s14, s13
 80132c0:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80132c4:	ee30 0a46 	vsub.f32	s0, s0, s12
 80132c8:	eddf 6a32 	vldr	s13, [pc, #200]	; 8013394 <__ieee754_powf+0x580>
 80132cc:	ed9f 6a32 	vldr	s12, [pc, #200]	; 8013398 <__ieee754_powf+0x584>
 80132d0:	eee7 6a06 	vfma.f32	s13, s14, s12
 80132d4:	ed9f 6a31 	vldr	s12, [pc, #196]	; 801339c <__ieee754_powf+0x588>
 80132d8:	eea6 6a87 	vfma.f32	s12, s13, s14
 80132dc:	eddf 6a30 	vldr	s13, [pc, #192]	; 80133a0 <__ieee754_powf+0x58c>
 80132e0:	eee6 6a07 	vfma.f32	s13, s12, s14
 80132e4:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 80133a4 <__ieee754_powf+0x590>
 80132e8:	eea6 6a87 	vfma.f32	s12, s13, s14
 80132ec:	eef0 6a67 	vmov.f32	s13, s15
 80132f0:	eee6 6a47 	vfms.f32	s13, s12, s14
 80132f4:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80132f8:	ee27 6aa6 	vmul.f32	s12, s15, s13
 80132fc:	ee76 6ac7 	vsub.f32	s13, s13, s14
 8013300:	eea7 0a80 	vfma.f32	s0, s15, s0
 8013304:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8013308:	ee37 0a40 	vsub.f32	s0, s14, s0
 801330c:	ee70 7a67 	vsub.f32	s15, s0, s15
 8013310:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8013314:	ee30 0a67 	vsub.f32	s0, s0, s15
 8013318:	ee10 3a10 	vmov	r3, s0
 801331c:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8013320:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8013324:	da1f      	bge.n	8013366 <__ieee754_powf+0x552>
 8013326:	f000 febd 	bl	80140a4 <scalbnf>
 801332a:	ee20 0a08 	vmul.f32	s0, s0, s16
 801332e:	e589      	b.n	8012e44 <__ieee754_powf+0x30>
 8013330:	4a1d      	ldr	r2, [pc, #116]	; (80133a8 <__ieee754_powf+0x594>)
 8013332:	4293      	cmp	r3, r2
 8013334:	dd07      	ble.n	8013346 <__ieee754_powf+0x532>
 8013336:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801333a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801333e:	bf4c      	ite	mi
 8013340:	2001      	movmi	r0, #1
 8013342:	2000      	movpl	r0, #0
 8013344:	e61f      	b.n	8012f86 <__ieee754_powf+0x172>
 8013346:	d108      	bne.n	801335a <__ieee754_powf+0x546>
 8013348:	ee37 7a67 	vsub.f32	s14, s14, s15
 801334c:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8013350:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013354:	f6ff af78 	blt.w	8013248 <__ieee754_powf+0x434>
 8013358:	e7ed      	b.n	8013336 <__ieee754_powf+0x522>
 801335a:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 801335e:	f73f af73 	bgt.w	8013248 <__ieee754_powf+0x434>
 8013362:	2000      	movs	r0, #0
 8013364:	e78c      	b.n	8013280 <__ieee754_powf+0x46c>
 8013366:	ee00 3a10 	vmov	s0, r3
 801336a:	e7de      	b.n	801332a <__ieee754_powf+0x516>
 801336c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8013370:	e568      	b.n	8012e44 <__ieee754_powf+0x30>
 8013372:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 80133ac <__ieee754_powf+0x598>
 8013376:	e565      	b.n	8012e44 <__ieee754_powf+0x30>
 8013378:	eeb0 0a48 	vmov.f32	s0, s16
 801337c:	e562      	b.n	8012e44 <__ieee754_powf+0x30>
 801337e:	2700      	movs	r7, #0
 8013380:	e58d      	b.n	8012e9e <__ieee754_powf+0x8a>
 8013382:	bf00      	nop
 8013384:	007fffff 	.word	0x007fffff
 8013388:	35bfbe8c 	.word	0x35bfbe8c
 801338c:	3f317200 	.word	0x3f317200
 8013390:	3f317218 	.word	0x3f317218
 8013394:	b5ddea0e 	.word	0xb5ddea0e
 8013398:	3331bb4c 	.word	0x3331bb4c
 801339c:	388ab355 	.word	0x388ab355
 80133a0:	bb360b61 	.word	0xbb360b61
 80133a4:	3e2aaaab 	.word	0x3e2aaaab
 80133a8:	43160000 	.word	0x43160000
 80133ac:	00000000 	.word	0x00000000

080133b0 <__ieee754_rem_pio2f>:
 80133b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80133b2:	ee10 6a10 	vmov	r6, s0
 80133b6:	4b8e      	ldr	r3, [pc, #568]	; (80135f0 <__ieee754_rem_pio2f+0x240>)
 80133b8:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 80133bc:	429d      	cmp	r5, r3
 80133be:	b087      	sub	sp, #28
 80133c0:	eef0 7a40 	vmov.f32	s15, s0
 80133c4:	4604      	mov	r4, r0
 80133c6:	dc05      	bgt.n	80133d4 <__ieee754_rem_pio2f+0x24>
 80133c8:	2300      	movs	r3, #0
 80133ca:	ed80 0a00 	vstr	s0, [r0]
 80133ce:	6043      	str	r3, [r0, #4]
 80133d0:	2000      	movs	r0, #0
 80133d2:	e01a      	b.n	801340a <__ieee754_rem_pio2f+0x5a>
 80133d4:	4b87      	ldr	r3, [pc, #540]	; (80135f4 <__ieee754_rem_pio2f+0x244>)
 80133d6:	429d      	cmp	r5, r3
 80133d8:	dc46      	bgt.n	8013468 <__ieee754_rem_pio2f+0xb8>
 80133da:	2e00      	cmp	r6, #0
 80133dc:	ed9f 0a86 	vldr	s0, [pc, #536]	; 80135f8 <__ieee754_rem_pio2f+0x248>
 80133e0:	4b86      	ldr	r3, [pc, #536]	; (80135fc <__ieee754_rem_pio2f+0x24c>)
 80133e2:	f025 050f 	bic.w	r5, r5, #15
 80133e6:	dd1f      	ble.n	8013428 <__ieee754_rem_pio2f+0x78>
 80133e8:	429d      	cmp	r5, r3
 80133ea:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80133ee:	d00e      	beq.n	801340e <__ieee754_rem_pio2f+0x5e>
 80133f0:	ed9f 7a83 	vldr	s14, [pc, #524]	; 8013600 <__ieee754_rem_pio2f+0x250>
 80133f4:	ee37 0ac7 	vsub.f32	s0, s15, s14
 80133f8:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80133fc:	ed80 0a00 	vstr	s0, [r0]
 8013400:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013404:	2001      	movs	r0, #1
 8013406:	edc4 7a01 	vstr	s15, [r4, #4]
 801340a:	b007      	add	sp, #28
 801340c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801340e:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 8013604 <__ieee754_rem_pio2f+0x254>
 8013412:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8013608 <__ieee754_rem_pio2f+0x258>
 8013416:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801341a:	ee77 6ac7 	vsub.f32	s13, s15, s14
 801341e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8013422:	edc0 6a00 	vstr	s13, [r0]
 8013426:	e7eb      	b.n	8013400 <__ieee754_rem_pio2f+0x50>
 8013428:	429d      	cmp	r5, r3
 801342a:	ee77 7a80 	vadd.f32	s15, s15, s0
 801342e:	d00e      	beq.n	801344e <__ieee754_rem_pio2f+0x9e>
 8013430:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8013600 <__ieee754_rem_pio2f+0x250>
 8013434:	ee37 0a87 	vadd.f32	s0, s15, s14
 8013438:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801343c:	ed80 0a00 	vstr	s0, [r0]
 8013440:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013444:	f04f 30ff 	mov.w	r0, #4294967295
 8013448:	edc4 7a01 	vstr	s15, [r4, #4]
 801344c:	e7dd      	b.n	801340a <__ieee754_rem_pio2f+0x5a>
 801344e:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 8013604 <__ieee754_rem_pio2f+0x254>
 8013452:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8013608 <__ieee754_rem_pio2f+0x258>
 8013456:	ee77 7a80 	vadd.f32	s15, s15, s0
 801345a:	ee77 6a87 	vadd.f32	s13, s15, s14
 801345e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8013462:	edc0 6a00 	vstr	s13, [r0]
 8013466:	e7eb      	b.n	8013440 <__ieee754_rem_pio2f+0x90>
 8013468:	4b68      	ldr	r3, [pc, #416]	; (801360c <__ieee754_rem_pio2f+0x25c>)
 801346a:	429d      	cmp	r5, r3
 801346c:	dc72      	bgt.n	8013554 <__ieee754_rem_pio2f+0x1a4>
 801346e:	f000 fdbd 	bl	8013fec <fabsf>
 8013472:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8013610 <__ieee754_rem_pio2f+0x260>
 8013476:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801347a:	eee0 7a07 	vfma.f32	s15, s0, s14
 801347e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013482:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8013486:	ee17 0a90 	vmov	r0, s15
 801348a:	eddf 7a5b 	vldr	s15, [pc, #364]	; 80135f8 <__ieee754_rem_pio2f+0x248>
 801348e:	eea7 0a67 	vfms.f32	s0, s14, s15
 8013492:	281f      	cmp	r0, #31
 8013494:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8013600 <__ieee754_rem_pio2f+0x250>
 8013498:	ee67 7a27 	vmul.f32	s15, s14, s15
 801349c:	eeb1 6a47 	vneg.f32	s12, s14
 80134a0:	ee70 6a67 	vsub.f32	s13, s0, s15
 80134a4:	ee16 2a90 	vmov	r2, s13
 80134a8:	dc1c      	bgt.n	80134e4 <__ieee754_rem_pio2f+0x134>
 80134aa:	495a      	ldr	r1, [pc, #360]	; (8013614 <__ieee754_rem_pio2f+0x264>)
 80134ac:	1e47      	subs	r7, r0, #1
 80134ae:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 80134b2:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 80134b6:	428b      	cmp	r3, r1
 80134b8:	d014      	beq.n	80134e4 <__ieee754_rem_pio2f+0x134>
 80134ba:	6022      	str	r2, [r4, #0]
 80134bc:	ed94 7a00 	vldr	s14, [r4]
 80134c0:	ee30 0a47 	vsub.f32	s0, s0, s14
 80134c4:	2e00      	cmp	r6, #0
 80134c6:	ee30 0a67 	vsub.f32	s0, s0, s15
 80134ca:	ed84 0a01 	vstr	s0, [r4, #4]
 80134ce:	da9c      	bge.n	801340a <__ieee754_rem_pio2f+0x5a>
 80134d0:	eeb1 7a47 	vneg.f32	s14, s14
 80134d4:	eeb1 0a40 	vneg.f32	s0, s0
 80134d8:	ed84 7a00 	vstr	s14, [r4]
 80134dc:	ed84 0a01 	vstr	s0, [r4, #4]
 80134e0:	4240      	negs	r0, r0
 80134e2:	e792      	b.n	801340a <__ieee754_rem_pio2f+0x5a>
 80134e4:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80134e8:	15eb      	asrs	r3, r5, #23
 80134ea:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 80134ee:	2d08      	cmp	r5, #8
 80134f0:	dde3      	ble.n	80134ba <__ieee754_rem_pio2f+0x10a>
 80134f2:	eddf 7a44 	vldr	s15, [pc, #272]	; 8013604 <__ieee754_rem_pio2f+0x254>
 80134f6:	eddf 5a44 	vldr	s11, [pc, #272]	; 8013608 <__ieee754_rem_pio2f+0x258>
 80134fa:	eef0 6a40 	vmov.f32	s13, s0
 80134fe:	eee6 6a27 	vfma.f32	s13, s12, s15
 8013502:	ee30 0a66 	vsub.f32	s0, s0, s13
 8013506:	eea6 0a27 	vfma.f32	s0, s12, s15
 801350a:	eef0 7a40 	vmov.f32	s15, s0
 801350e:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8013512:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8013516:	ee15 2a90 	vmov	r2, s11
 801351a:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 801351e:	1a5b      	subs	r3, r3, r1
 8013520:	2b19      	cmp	r3, #25
 8013522:	dc04      	bgt.n	801352e <__ieee754_rem_pio2f+0x17e>
 8013524:	edc4 5a00 	vstr	s11, [r4]
 8013528:	eeb0 0a66 	vmov.f32	s0, s13
 801352c:	e7c6      	b.n	80134bc <__ieee754_rem_pio2f+0x10c>
 801352e:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8013618 <__ieee754_rem_pio2f+0x268>
 8013532:	eeb0 0a66 	vmov.f32	s0, s13
 8013536:	eea6 0a25 	vfma.f32	s0, s12, s11
 801353a:	ee76 7ac0 	vsub.f32	s15, s13, s0
 801353e:	eddf 6a37 	vldr	s13, [pc, #220]	; 801361c <__ieee754_rem_pio2f+0x26c>
 8013542:	eee6 7a25 	vfma.f32	s15, s12, s11
 8013546:	eed7 7a26 	vfnms.f32	s15, s14, s13
 801354a:	ee30 7a67 	vsub.f32	s14, s0, s15
 801354e:	ed84 7a00 	vstr	s14, [r4]
 8013552:	e7b3      	b.n	80134bc <__ieee754_rem_pio2f+0x10c>
 8013554:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8013558:	db06      	blt.n	8013568 <__ieee754_rem_pio2f+0x1b8>
 801355a:	ee70 7a40 	vsub.f32	s15, s0, s0
 801355e:	edc0 7a01 	vstr	s15, [r0, #4]
 8013562:	edc0 7a00 	vstr	s15, [r0]
 8013566:	e733      	b.n	80133d0 <__ieee754_rem_pio2f+0x20>
 8013568:	15ea      	asrs	r2, r5, #23
 801356a:	3a86      	subs	r2, #134	; 0x86
 801356c:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8013570:	ee07 3a90 	vmov	s15, r3
 8013574:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8013578:	eddf 6a29 	vldr	s13, [pc, #164]	; 8013620 <__ieee754_rem_pio2f+0x270>
 801357c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8013580:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013584:	ed8d 7a03 	vstr	s14, [sp, #12]
 8013588:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801358c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8013590:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8013594:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013598:	ed8d 7a04 	vstr	s14, [sp, #16]
 801359c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80135a0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80135a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80135a8:	edcd 7a05 	vstr	s15, [sp, #20]
 80135ac:	d11e      	bne.n	80135ec <__ieee754_rem_pio2f+0x23c>
 80135ae:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80135b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80135b6:	bf14      	ite	ne
 80135b8:	2302      	movne	r3, #2
 80135ba:	2301      	moveq	r3, #1
 80135bc:	4919      	ldr	r1, [pc, #100]	; (8013624 <__ieee754_rem_pio2f+0x274>)
 80135be:	9101      	str	r1, [sp, #4]
 80135c0:	2102      	movs	r1, #2
 80135c2:	9100      	str	r1, [sp, #0]
 80135c4:	a803      	add	r0, sp, #12
 80135c6:	4621      	mov	r1, r4
 80135c8:	f000 f892 	bl	80136f0 <__kernel_rem_pio2f>
 80135cc:	2e00      	cmp	r6, #0
 80135ce:	f6bf af1c 	bge.w	801340a <__ieee754_rem_pio2f+0x5a>
 80135d2:	edd4 7a00 	vldr	s15, [r4]
 80135d6:	eef1 7a67 	vneg.f32	s15, s15
 80135da:	edc4 7a00 	vstr	s15, [r4]
 80135de:	edd4 7a01 	vldr	s15, [r4, #4]
 80135e2:	eef1 7a67 	vneg.f32	s15, s15
 80135e6:	edc4 7a01 	vstr	s15, [r4, #4]
 80135ea:	e779      	b.n	80134e0 <__ieee754_rem_pio2f+0x130>
 80135ec:	2303      	movs	r3, #3
 80135ee:	e7e5      	b.n	80135bc <__ieee754_rem_pio2f+0x20c>
 80135f0:	3f490fd8 	.word	0x3f490fd8
 80135f4:	4016cbe3 	.word	0x4016cbe3
 80135f8:	3fc90f80 	.word	0x3fc90f80
 80135fc:	3fc90fd0 	.word	0x3fc90fd0
 8013600:	37354443 	.word	0x37354443
 8013604:	37354400 	.word	0x37354400
 8013608:	2e85a308 	.word	0x2e85a308
 801360c:	43490f80 	.word	0x43490f80
 8013610:	3f22f984 	.word	0x3f22f984
 8013614:	08014828 	.word	0x08014828
 8013618:	2e85a300 	.word	0x2e85a300
 801361c:	248d3132 	.word	0x248d3132
 8013620:	43800000 	.word	0x43800000
 8013624:	080148a8 	.word	0x080148a8

08013628 <__ieee754_sqrtf>:
 8013628:	eeb1 0ac0 	vsqrt.f32	s0, s0
 801362c:	4770      	bx	lr
	...

08013630 <__kernel_cosf>:
 8013630:	ee10 3a10 	vmov	r3, s0
 8013634:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8013638:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 801363c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8013640:	da05      	bge.n	801364e <__kernel_cosf+0x1e>
 8013642:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8013646:	ee17 2a90 	vmov	r2, s15
 801364a:	2a00      	cmp	r2, #0
 801364c:	d03d      	beq.n	80136ca <__kernel_cosf+0x9a>
 801364e:	ee60 5a00 	vmul.f32	s11, s0, s0
 8013652:	eddf 7a1f 	vldr	s15, [pc, #124]	; 80136d0 <__kernel_cosf+0xa0>
 8013656:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80136d4 <__kernel_cosf+0xa4>
 801365a:	eddf 6a1f 	vldr	s13, [pc, #124]	; 80136d8 <__kernel_cosf+0xa8>
 801365e:	4a1f      	ldr	r2, [pc, #124]	; (80136dc <__kernel_cosf+0xac>)
 8013660:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8013664:	4293      	cmp	r3, r2
 8013666:	eddf 7a1e 	vldr	s15, [pc, #120]	; 80136e0 <__kernel_cosf+0xb0>
 801366a:	eee7 7a25 	vfma.f32	s15, s14, s11
 801366e:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80136e4 <__kernel_cosf+0xb4>
 8013672:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8013676:	eddf 7a1c 	vldr	s15, [pc, #112]	; 80136e8 <__kernel_cosf+0xb8>
 801367a:	eee7 7a25 	vfma.f32	s15, s14, s11
 801367e:	eeb0 7a66 	vmov.f32	s14, s13
 8013682:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8013686:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 801368a:	ee65 7aa6 	vmul.f32	s15, s11, s13
 801368e:	ee67 6a25 	vmul.f32	s13, s14, s11
 8013692:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 8013696:	eea5 7aa6 	vfma.f32	s14, s11, s13
 801369a:	dc04      	bgt.n	80136a6 <__kernel_cosf+0x76>
 801369c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80136a0:	ee36 0a47 	vsub.f32	s0, s12, s14
 80136a4:	4770      	bx	lr
 80136a6:	4a11      	ldr	r2, [pc, #68]	; (80136ec <__kernel_cosf+0xbc>)
 80136a8:	4293      	cmp	r3, r2
 80136aa:	bfda      	itte	le
 80136ac:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 80136b0:	ee06 3a90 	vmovle	s13, r3
 80136b4:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 80136b8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80136bc:	ee36 0a66 	vsub.f32	s0, s12, s13
 80136c0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80136c4:	ee30 0a67 	vsub.f32	s0, s0, s15
 80136c8:	4770      	bx	lr
 80136ca:	eeb0 0a46 	vmov.f32	s0, s12
 80136ce:	4770      	bx	lr
 80136d0:	ad47d74e 	.word	0xad47d74e
 80136d4:	310f74f6 	.word	0x310f74f6
 80136d8:	3d2aaaab 	.word	0x3d2aaaab
 80136dc:	3e999999 	.word	0x3e999999
 80136e0:	b493f27c 	.word	0xb493f27c
 80136e4:	37d00d01 	.word	0x37d00d01
 80136e8:	bab60b61 	.word	0xbab60b61
 80136ec:	3f480000 	.word	0x3f480000

080136f0 <__kernel_rem_pio2f>:
 80136f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80136f4:	ed2d 8b04 	vpush	{d8-d9}
 80136f8:	b0d9      	sub	sp, #356	; 0x164
 80136fa:	4688      	mov	r8, r1
 80136fc:	9002      	str	r0, [sp, #8]
 80136fe:	49bb      	ldr	r1, [pc, #748]	; (80139ec <__kernel_rem_pio2f+0x2fc>)
 8013700:	9866      	ldr	r0, [sp, #408]	; 0x198
 8013702:	9301      	str	r3, [sp, #4]
 8013704:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 8013708:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 801370c:	1e59      	subs	r1, r3, #1
 801370e:	1d13      	adds	r3, r2, #4
 8013710:	db27      	blt.n	8013762 <__kernel_rem_pio2f+0x72>
 8013712:	f1b2 0b03 	subs.w	fp, r2, #3
 8013716:	bf48      	it	mi
 8013718:	f102 0b04 	addmi.w	fp, r2, #4
 801371c:	ea4f 00eb 	mov.w	r0, fp, asr #3
 8013720:	1c45      	adds	r5, r0, #1
 8013722:	00ec      	lsls	r4, r5, #3
 8013724:	1a47      	subs	r7, r0, r1
 8013726:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 80139fc <__kernel_rem_pio2f+0x30c>
 801372a:	9403      	str	r4, [sp, #12]
 801372c:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 8013730:	eb0a 0c01 	add.w	ip, sl, r1
 8013734:	ae1c      	add	r6, sp, #112	; 0x70
 8013736:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 801373a:	2400      	movs	r4, #0
 801373c:	4564      	cmp	r4, ip
 801373e:	dd12      	ble.n	8013766 <__kernel_rem_pio2f+0x76>
 8013740:	9b01      	ldr	r3, [sp, #4]
 8013742:	ac1c      	add	r4, sp, #112	; 0x70
 8013744:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8013748:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 801374c:	f04f 0c00 	mov.w	ip, #0
 8013750:	45d4      	cmp	ip, sl
 8013752:	dc27      	bgt.n	80137a4 <__kernel_rem_pio2f+0xb4>
 8013754:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8013758:	eddf 7aa8 	vldr	s15, [pc, #672]	; 80139fc <__kernel_rem_pio2f+0x30c>
 801375c:	4627      	mov	r7, r4
 801375e:	2600      	movs	r6, #0
 8013760:	e016      	b.n	8013790 <__kernel_rem_pio2f+0xa0>
 8013762:	2000      	movs	r0, #0
 8013764:	e7dc      	b.n	8013720 <__kernel_rem_pio2f+0x30>
 8013766:	42e7      	cmn	r7, r4
 8013768:	bf5d      	ittte	pl
 801376a:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 801376e:	ee07 3a90 	vmovpl	s15, r3
 8013772:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8013776:	eef0 7a47 	vmovmi.f32	s15, s14
 801377a:	ece6 7a01 	vstmia	r6!, {s15}
 801377e:	3401      	adds	r4, #1
 8013780:	e7dc      	b.n	801373c <__kernel_rem_pio2f+0x4c>
 8013782:	ecf9 6a01 	vldmia	r9!, {s13}
 8013786:	ed97 7a00 	vldr	s14, [r7]
 801378a:	eee6 7a87 	vfma.f32	s15, s13, s14
 801378e:	3601      	adds	r6, #1
 8013790:	428e      	cmp	r6, r1
 8013792:	f1a7 0704 	sub.w	r7, r7, #4
 8013796:	ddf4      	ble.n	8013782 <__kernel_rem_pio2f+0x92>
 8013798:	eceb 7a01 	vstmia	fp!, {s15}
 801379c:	f10c 0c01 	add.w	ip, ip, #1
 80137a0:	3404      	adds	r4, #4
 80137a2:	e7d5      	b.n	8013750 <__kernel_rem_pio2f+0x60>
 80137a4:	ab08      	add	r3, sp, #32
 80137a6:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 80137aa:	eddf 8a93 	vldr	s17, [pc, #588]	; 80139f8 <__kernel_rem_pio2f+0x308>
 80137ae:	ed9f 9a91 	vldr	s18, [pc, #580]	; 80139f4 <__kernel_rem_pio2f+0x304>
 80137b2:	9304      	str	r3, [sp, #16]
 80137b4:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 80137b8:	4656      	mov	r6, sl
 80137ba:	00b3      	lsls	r3, r6, #2
 80137bc:	9305      	str	r3, [sp, #20]
 80137be:	ab58      	add	r3, sp, #352	; 0x160
 80137c0:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 80137c4:	ac08      	add	r4, sp, #32
 80137c6:	ab44      	add	r3, sp, #272	; 0x110
 80137c8:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 80137cc:	46a4      	mov	ip, r4
 80137ce:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 80137d2:	4637      	mov	r7, r6
 80137d4:	2f00      	cmp	r7, #0
 80137d6:	f1a0 0004 	sub.w	r0, r0, #4
 80137da:	dc4f      	bgt.n	801387c <__kernel_rem_pio2f+0x18c>
 80137dc:	4628      	mov	r0, r5
 80137de:	e9cd 1206 	strd	r1, r2, [sp, #24]
 80137e2:	f000 fc5f 	bl	80140a4 <scalbnf>
 80137e6:	eeb0 8a40 	vmov.f32	s16, s0
 80137ea:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 80137ee:	ee28 0a00 	vmul.f32	s0, s16, s0
 80137f2:	f000 fc0f 	bl	8014014 <floorf>
 80137f6:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 80137fa:	eea0 8a67 	vfms.f32	s16, s0, s15
 80137fe:	2d00      	cmp	r5, #0
 8013800:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8013804:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8013808:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 801380c:	ee17 9a90 	vmov	r9, s15
 8013810:	ee38 8a40 	vsub.f32	s16, s16, s0
 8013814:	dd44      	ble.n	80138a0 <__kernel_rem_pio2f+0x1b0>
 8013816:	f106 3cff 	add.w	ip, r6, #4294967295
 801381a:	ab08      	add	r3, sp, #32
 801381c:	f1c5 0e08 	rsb	lr, r5, #8
 8013820:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 8013824:	fa47 f00e 	asr.w	r0, r7, lr
 8013828:	4481      	add	r9, r0
 801382a:	fa00 f00e 	lsl.w	r0, r0, lr
 801382e:	1a3f      	subs	r7, r7, r0
 8013830:	f1c5 0007 	rsb	r0, r5, #7
 8013834:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 8013838:	4107      	asrs	r7, r0
 801383a:	2f00      	cmp	r7, #0
 801383c:	dd3f      	ble.n	80138be <__kernel_rem_pio2f+0x1ce>
 801383e:	f04f 0e00 	mov.w	lr, #0
 8013842:	f109 0901 	add.w	r9, r9, #1
 8013846:	4673      	mov	r3, lr
 8013848:	4576      	cmp	r6, lr
 801384a:	dc6b      	bgt.n	8013924 <__kernel_rem_pio2f+0x234>
 801384c:	2d00      	cmp	r5, #0
 801384e:	dd04      	ble.n	801385a <__kernel_rem_pio2f+0x16a>
 8013850:	2d01      	cmp	r5, #1
 8013852:	d078      	beq.n	8013946 <__kernel_rem_pio2f+0x256>
 8013854:	2d02      	cmp	r5, #2
 8013856:	f000 8081 	beq.w	801395c <__kernel_rem_pio2f+0x26c>
 801385a:	2f02      	cmp	r7, #2
 801385c:	d12f      	bne.n	80138be <__kernel_rem_pio2f+0x1ce>
 801385e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8013862:	ee30 8a48 	vsub.f32	s16, s0, s16
 8013866:	b353      	cbz	r3, 80138be <__kernel_rem_pio2f+0x1ce>
 8013868:	4628      	mov	r0, r5
 801386a:	e9cd 1206 	strd	r1, r2, [sp, #24]
 801386e:	f000 fc19 	bl	80140a4 <scalbnf>
 8013872:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8013876:	ee38 8a40 	vsub.f32	s16, s16, s0
 801387a:	e020      	b.n	80138be <__kernel_rem_pio2f+0x1ce>
 801387c:	ee60 7a28 	vmul.f32	s15, s0, s17
 8013880:	3f01      	subs	r7, #1
 8013882:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013886:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801388a:	eea7 0ac9 	vfms.f32	s0, s15, s18
 801388e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8013892:	ecac 0a01 	vstmia	ip!, {s0}
 8013896:	ed90 0a00 	vldr	s0, [r0]
 801389a:	ee37 0a80 	vadd.f32	s0, s15, s0
 801389e:	e799      	b.n	80137d4 <__kernel_rem_pio2f+0xe4>
 80138a0:	d105      	bne.n	80138ae <__kernel_rem_pio2f+0x1be>
 80138a2:	1e70      	subs	r0, r6, #1
 80138a4:	ab08      	add	r3, sp, #32
 80138a6:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 80138aa:	11ff      	asrs	r7, r7, #7
 80138ac:	e7c5      	b.n	801383a <__kernel_rem_pio2f+0x14a>
 80138ae:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80138b2:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80138b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80138ba:	da31      	bge.n	8013920 <__kernel_rem_pio2f+0x230>
 80138bc:	2700      	movs	r7, #0
 80138be:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80138c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80138c6:	f040 809b 	bne.w	8013a00 <__kernel_rem_pio2f+0x310>
 80138ca:	1e74      	subs	r4, r6, #1
 80138cc:	46a4      	mov	ip, r4
 80138ce:	2000      	movs	r0, #0
 80138d0:	45d4      	cmp	ip, sl
 80138d2:	da4a      	bge.n	801396a <__kernel_rem_pio2f+0x27a>
 80138d4:	2800      	cmp	r0, #0
 80138d6:	d07a      	beq.n	80139ce <__kernel_rem_pio2f+0x2de>
 80138d8:	ab08      	add	r3, sp, #32
 80138da:	3d08      	subs	r5, #8
 80138dc:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80138e0:	2b00      	cmp	r3, #0
 80138e2:	f000 8081 	beq.w	80139e8 <__kernel_rem_pio2f+0x2f8>
 80138e6:	4628      	mov	r0, r5
 80138e8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80138ec:	00a5      	lsls	r5, r4, #2
 80138ee:	f000 fbd9 	bl	80140a4 <scalbnf>
 80138f2:	aa44      	add	r2, sp, #272	; 0x110
 80138f4:	1d2b      	adds	r3, r5, #4
 80138f6:	ed9f 7a40 	vldr	s14, [pc, #256]	; 80139f8 <__kernel_rem_pio2f+0x308>
 80138fa:	18d1      	adds	r1, r2, r3
 80138fc:	4622      	mov	r2, r4
 80138fe:	2a00      	cmp	r2, #0
 8013900:	f280 80ae 	bge.w	8013a60 <__kernel_rem_pio2f+0x370>
 8013904:	4622      	mov	r2, r4
 8013906:	2a00      	cmp	r2, #0
 8013908:	f2c0 80cc 	blt.w	8013aa4 <__kernel_rem_pio2f+0x3b4>
 801390c:	a944      	add	r1, sp, #272	; 0x110
 801390e:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 8013912:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 80139f0 <__kernel_rem_pio2f+0x300>
 8013916:	eddf 7a39 	vldr	s15, [pc, #228]	; 80139fc <__kernel_rem_pio2f+0x30c>
 801391a:	2000      	movs	r0, #0
 801391c:	1aa1      	subs	r1, r4, r2
 801391e:	e0b6      	b.n	8013a8e <__kernel_rem_pio2f+0x39e>
 8013920:	2702      	movs	r7, #2
 8013922:	e78c      	b.n	801383e <__kernel_rem_pio2f+0x14e>
 8013924:	6820      	ldr	r0, [r4, #0]
 8013926:	b94b      	cbnz	r3, 801393c <__kernel_rem_pio2f+0x24c>
 8013928:	b118      	cbz	r0, 8013932 <__kernel_rem_pio2f+0x242>
 801392a:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 801392e:	6020      	str	r0, [r4, #0]
 8013930:	2001      	movs	r0, #1
 8013932:	f10e 0e01 	add.w	lr, lr, #1
 8013936:	3404      	adds	r4, #4
 8013938:	4603      	mov	r3, r0
 801393a:	e785      	b.n	8013848 <__kernel_rem_pio2f+0x158>
 801393c:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 8013940:	6020      	str	r0, [r4, #0]
 8013942:	4618      	mov	r0, r3
 8013944:	e7f5      	b.n	8013932 <__kernel_rem_pio2f+0x242>
 8013946:	1e74      	subs	r4, r6, #1
 8013948:	a808      	add	r0, sp, #32
 801394a:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 801394e:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8013952:	f10d 0c20 	add.w	ip, sp, #32
 8013956:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 801395a:	e77e      	b.n	801385a <__kernel_rem_pio2f+0x16a>
 801395c:	1e74      	subs	r4, r6, #1
 801395e:	a808      	add	r0, sp, #32
 8013960:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8013964:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8013968:	e7f3      	b.n	8013952 <__kernel_rem_pio2f+0x262>
 801396a:	ab08      	add	r3, sp, #32
 801396c:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8013970:	f10c 3cff 	add.w	ip, ip, #4294967295
 8013974:	4318      	orrs	r0, r3
 8013976:	e7ab      	b.n	80138d0 <__kernel_rem_pio2f+0x1e0>
 8013978:	f10c 0c01 	add.w	ip, ip, #1
 801397c:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 8013980:	2c00      	cmp	r4, #0
 8013982:	d0f9      	beq.n	8013978 <__kernel_rem_pio2f+0x288>
 8013984:	9b05      	ldr	r3, [sp, #20]
 8013986:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 801398a:	eb0d 0003 	add.w	r0, sp, r3
 801398e:	9b01      	ldr	r3, [sp, #4]
 8013990:	18f4      	adds	r4, r6, r3
 8013992:	ab1c      	add	r3, sp, #112	; 0x70
 8013994:	1c77      	adds	r7, r6, #1
 8013996:	384c      	subs	r0, #76	; 0x4c
 8013998:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801399c:	4466      	add	r6, ip
 801399e:	42be      	cmp	r6, r7
 80139a0:	f6ff af0b 	blt.w	80137ba <__kernel_rem_pio2f+0xca>
 80139a4:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 80139a8:	f8dd e008 	ldr.w	lr, [sp, #8]
 80139ac:	ee07 3a90 	vmov	s15, r3
 80139b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80139b4:	f04f 0c00 	mov.w	ip, #0
 80139b8:	ece4 7a01 	vstmia	r4!, {s15}
 80139bc:	eddf 7a0f 	vldr	s15, [pc, #60]	; 80139fc <__kernel_rem_pio2f+0x30c>
 80139c0:	46a1      	mov	r9, r4
 80139c2:	458c      	cmp	ip, r1
 80139c4:	dd07      	ble.n	80139d6 <__kernel_rem_pio2f+0x2e6>
 80139c6:	ece0 7a01 	vstmia	r0!, {s15}
 80139ca:	3701      	adds	r7, #1
 80139cc:	e7e7      	b.n	801399e <__kernel_rem_pio2f+0x2ae>
 80139ce:	9804      	ldr	r0, [sp, #16]
 80139d0:	f04f 0c01 	mov.w	ip, #1
 80139d4:	e7d2      	b.n	801397c <__kernel_rem_pio2f+0x28c>
 80139d6:	ecfe 6a01 	vldmia	lr!, {s13}
 80139da:	ed39 7a01 	vldmdb	r9!, {s14}
 80139de:	f10c 0c01 	add.w	ip, ip, #1
 80139e2:	eee6 7a87 	vfma.f32	s15, s13, s14
 80139e6:	e7ec      	b.n	80139c2 <__kernel_rem_pio2f+0x2d2>
 80139e8:	3c01      	subs	r4, #1
 80139ea:	e775      	b.n	80138d8 <__kernel_rem_pio2f+0x1e8>
 80139ec:	08014bec 	.word	0x08014bec
 80139f0:	08014bc0 	.word	0x08014bc0
 80139f4:	43800000 	.word	0x43800000
 80139f8:	3b800000 	.word	0x3b800000
 80139fc:	00000000 	.word	0x00000000
 8013a00:	9b03      	ldr	r3, [sp, #12]
 8013a02:	eeb0 0a48 	vmov.f32	s0, s16
 8013a06:	1a98      	subs	r0, r3, r2
 8013a08:	f000 fb4c 	bl	80140a4 <scalbnf>
 8013a0c:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 80139f4 <__kernel_rem_pio2f+0x304>
 8013a10:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8013a14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013a18:	db19      	blt.n	8013a4e <__kernel_rem_pio2f+0x35e>
 8013a1a:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 80139f8 <__kernel_rem_pio2f+0x308>
 8013a1e:	ee60 7a27 	vmul.f32	s15, s0, s15
 8013a22:	aa08      	add	r2, sp, #32
 8013a24:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013a28:	1c74      	adds	r4, r6, #1
 8013a2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013a2e:	3508      	adds	r5, #8
 8013a30:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8013a34:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013a38:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8013a3c:	ee10 3a10 	vmov	r3, s0
 8013a40:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8013a44:	ee17 3a90 	vmov	r3, s15
 8013a48:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8013a4c:	e74b      	b.n	80138e6 <__kernel_rem_pio2f+0x1f6>
 8013a4e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8013a52:	aa08      	add	r2, sp, #32
 8013a54:	ee10 3a10 	vmov	r3, s0
 8013a58:	4634      	mov	r4, r6
 8013a5a:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8013a5e:	e742      	b.n	80138e6 <__kernel_rem_pio2f+0x1f6>
 8013a60:	a808      	add	r0, sp, #32
 8013a62:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 8013a66:	9001      	str	r0, [sp, #4]
 8013a68:	ee07 0a90 	vmov	s15, r0
 8013a6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013a70:	3a01      	subs	r2, #1
 8013a72:	ee67 7a80 	vmul.f32	s15, s15, s0
 8013a76:	ee20 0a07 	vmul.f32	s0, s0, s14
 8013a7a:	ed61 7a01 	vstmdb	r1!, {s15}
 8013a7e:	e73e      	b.n	80138fe <__kernel_rem_pio2f+0x20e>
 8013a80:	ecfc 6a01 	vldmia	ip!, {s13}
 8013a84:	ecb6 7a01 	vldmia	r6!, {s14}
 8013a88:	eee6 7a87 	vfma.f32	s15, s13, s14
 8013a8c:	3001      	adds	r0, #1
 8013a8e:	4550      	cmp	r0, sl
 8013a90:	dc01      	bgt.n	8013a96 <__kernel_rem_pio2f+0x3a6>
 8013a92:	4288      	cmp	r0, r1
 8013a94:	ddf4      	ble.n	8013a80 <__kernel_rem_pio2f+0x390>
 8013a96:	a858      	add	r0, sp, #352	; 0x160
 8013a98:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8013a9c:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 8013aa0:	3a01      	subs	r2, #1
 8013aa2:	e730      	b.n	8013906 <__kernel_rem_pio2f+0x216>
 8013aa4:	9a66      	ldr	r2, [sp, #408]	; 0x198
 8013aa6:	2a02      	cmp	r2, #2
 8013aa8:	dc09      	bgt.n	8013abe <__kernel_rem_pio2f+0x3ce>
 8013aaa:	2a00      	cmp	r2, #0
 8013aac:	dc2a      	bgt.n	8013b04 <__kernel_rem_pio2f+0x414>
 8013aae:	d043      	beq.n	8013b38 <__kernel_rem_pio2f+0x448>
 8013ab0:	f009 0007 	and.w	r0, r9, #7
 8013ab4:	b059      	add	sp, #356	; 0x164
 8013ab6:	ecbd 8b04 	vpop	{d8-d9}
 8013aba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013abe:	9b66      	ldr	r3, [sp, #408]	; 0x198
 8013ac0:	2b03      	cmp	r3, #3
 8013ac2:	d1f5      	bne.n	8013ab0 <__kernel_rem_pio2f+0x3c0>
 8013ac4:	ab30      	add	r3, sp, #192	; 0xc0
 8013ac6:	442b      	add	r3, r5
 8013ac8:	461a      	mov	r2, r3
 8013aca:	4619      	mov	r1, r3
 8013acc:	4620      	mov	r0, r4
 8013ace:	2800      	cmp	r0, #0
 8013ad0:	f1a1 0104 	sub.w	r1, r1, #4
 8013ad4:	dc51      	bgt.n	8013b7a <__kernel_rem_pio2f+0x48a>
 8013ad6:	4621      	mov	r1, r4
 8013ad8:	2901      	cmp	r1, #1
 8013ada:	f1a2 0204 	sub.w	r2, r2, #4
 8013ade:	dc5c      	bgt.n	8013b9a <__kernel_rem_pio2f+0x4aa>
 8013ae0:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 80139fc <__kernel_rem_pio2f+0x30c>
 8013ae4:	3304      	adds	r3, #4
 8013ae6:	2c01      	cmp	r4, #1
 8013ae8:	dc67      	bgt.n	8013bba <__kernel_rem_pio2f+0x4ca>
 8013aea:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 8013aee:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 8013af2:	2f00      	cmp	r7, #0
 8013af4:	d167      	bne.n	8013bc6 <__kernel_rem_pio2f+0x4d6>
 8013af6:	edc8 6a00 	vstr	s13, [r8]
 8013afa:	ed88 7a01 	vstr	s14, [r8, #4]
 8013afe:	edc8 7a02 	vstr	s15, [r8, #8]
 8013b02:	e7d5      	b.n	8013ab0 <__kernel_rem_pio2f+0x3c0>
 8013b04:	aa30      	add	r2, sp, #192	; 0xc0
 8013b06:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 80139fc <__kernel_rem_pio2f+0x30c>
 8013b0a:	4413      	add	r3, r2
 8013b0c:	4622      	mov	r2, r4
 8013b0e:	2a00      	cmp	r2, #0
 8013b10:	da24      	bge.n	8013b5c <__kernel_rem_pio2f+0x46c>
 8013b12:	b34f      	cbz	r7, 8013b68 <__kernel_rem_pio2f+0x478>
 8013b14:	eef1 7a47 	vneg.f32	s15, s14
 8013b18:	edc8 7a00 	vstr	s15, [r8]
 8013b1c:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 8013b20:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013b24:	aa31      	add	r2, sp, #196	; 0xc4
 8013b26:	2301      	movs	r3, #1
 8013b28:	429c      	cmp	r4, r3
 8013b2a:	da20      	bge.n	8013b6e <__kernel_rem_pio2f+0x47e>
 8013b2c:	b10f      	cbz	r7, 8013b32 <__kernel_rem_pio2f+0x442>
 8013b2e:	eef1 7a67 	vneg.f32	s15, s15
 8013b32:	edc8 7a01 	vstr	s15, [r8, #4]
 8013b36:	e7bb      	b.n	8013ab0 <__kernel_rem_pio2f+0x3c0>
 8013b38:	aa30      	add	r2, sp, #192	; 0xc0
 8013b3a:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 80139fc <__kernel_rem_pio2f+0x30c>
 8013b3e:	4413      	add	r3, r2
 8013b40:	2c00      	cmp	r4, #0
 8013b42:	da05      	bge.n	8013b50 <__kernel_rem_pio2f+0x460>
 8013b44:	b10f      	cbz	r7, 8013b4a <__kernel_rem_pio2f+0x45a>
 8013b46:	eef1 7a67 	vneg.f32	s15, s15
 8013b4a:	edc8 7a00 	vstr	s15, [r8]
 8013b4e:	e7af      	b.n	8013ab0 <__kernel_rem_pio2f+0x3c0>
 8013b50:	ed33 7a01 	vldmdb	r3!, {s14}
 8013b54:	3c01      	subs	r4, #1
 8013b56:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013b5a:	e7f1      	b.n	8013b40 <__kernel_rem_pio2f+0x450>
 8013b5c:	ed73 7a01 	vldmdb	r3!, {s15}
 8013b60:	3a01      	subs	r2, #1
 8013b62:	ee37 7a27 	vadd.f32	s14, s14, s15
 8013b66:	e7d2      	b.n	8013b0e <__kernel_rem_pio2f+0x41e>
 8013b68:	eef0 7a47 	vmov.f32	s15, s14
 8013b6c:	e7d4      	b.n	8013b18 <__kernel_rem_pio2f+0x428>
 8013b6e:	ecb2 7a01 	vldmia	r2!, {s14}
 8013b72:	3301      	adds	r3, #1
 8013b74:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013b78:	e7d6      	b.n	8013b28 <__kernel_rem_pio2f+0x438>
 8013b7a:	edd1 7a00 	vldr	s15, [r1]
 8013b7e:	edd1 6a01 	vldr	s13, [r1, #4]
 8013b82:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8013b86:	3801      	subs	r0, #1
 8013b88:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013b8c:	ed81 7a00 	vstr	s14, [r1]
 8013b90:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013b94:	edc1 7a01 	vstr	s15, [r1, #4]
 8013b98:	e799      	b.n	8013ace <__kernel_rem_pio2f+0x3de>
 8013b9a:	edd2 7a00 	vldr	s15, [r2]
 8013b9e:	edd2 6a01 	vldr	s13, [r2, #4]
 8013ba2:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8013ba6:	3901      	subs	r1, #1
 8013ba8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013bac:	ed82 7a00 	vstr	s14, [r2]
 8013bb0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013bb4:	edc2 7a01 	vstr	s15, [r2, #4]
 8013bb8:	e78e      	b.n	8013ad8 <__kernel_rem_pio2f+0x3e8>
 8013bba:	ed33 7a01 	vldmdb	r3!, {s14}
 8013bbe:	3c01      	subs	r4, #1
 8013bc0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013bc4:	e78f      	b.n	8013ae6 <__kernel_rem_pio2f+0x3f6>
 8013bc6:	eef1 6a66 	vneg.f32	s13, s13
 8013bca:	eeb1 7a47 	vneg.f32	s14, s14
 8013bce:	edc8 6a00 	vstr	s13, [r8]
 8013bd2:	ed88 7a01 	vstr	s14, [r8, #4]
 8013bd6:	eef1 7a67 	vneg.f32	s15, s15
 8013bda:	e790      	b.n	8013afe <__kernel_rem_pio2f+0x40e>

08013bdc <__kernel_sinf>:
 8013bdc:	ee10 3a10 	vmov	r3, s0
 8013be0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8013be4:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8013be8:	da04      	bge.n	8013bf4 <__kernel_sinf+0x18>
 8013bea:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8013bee:	ee17 3a90 	vmov	r3, s15
 8013bf2:	b35b      	cbz	r3, 8013c4c <__kernel_sinf+0x70>
 8013bf4:	ee20 7a00 	vmul.f32	s14, s0, s0
 8013bf8:	eddf 7a15 	vldr	s15, [pc, #84]	; 8013c50 <__kernel_sinf+0x74>
 8013bfc:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8013c54 <__kernel_sinf+0x78>
 8013c00:	eea7 6a27 	vfma.f32	s12, s14, s15
 8013c04:	eddf 7a14 	vldr	s15, [pc, #80]	; 8013c58 <__kernel_sinf+0x7c>
 8013c08:	eee6 7a07 	vfma.f32	s15, s12, s14
 8013c0c:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8013c5c <__kernel_sinf+0x80>
 8013c10:	eea7 6a87 	vfma.f32	s12, s15, s14
 8013c14:	eddf 7a12 	vldr	s15, [pc, #72]	; 8013c60 <__kernel_sinf+0x84>
 8013c18:	ee60 6a07 	vmul.f32	s13, s0, s14
 8013c1c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8013c20:	b930      	cbnz	r0, 8013c30 <__kernel_sinf+0x54>
 8013c22:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8013c64 <__kernel_sinf+0x88>
 8013c26:	eea7 6a27 	vfma.f32	s12, s14, s15
 8013c2a:	eea6 0a26 	vfma.f32	s0, s12, s13
 8013c2e:	4770      	bx	lr
 8013c30:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8013c34:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8013c38:	eee0 7a86 	vfma.f32	s15, s1, s12
 8013c3c:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8013c40:	eddf 7a09 	vldr	s15, [pc, #36]	; 8013c68 <__kernel_sinf+0x8c>
 8013c44:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8013c48:	ee30 0a60 	vsub.f32	s0, s0, s1
 8013c4c:	4770      	bx	lr
 8013c4e:	bf00      	nop
 8013c50:	2f2ec9d3 	.word	0x2f2ec9d3
 8013c54:	b2d72f34 	.word	0xb2d72f34
 8013c58:	3638ef1b 	.word	0x3638ef1b
 8013c5c:	b9500d01 	.word	0xb9500d01
 8013c60:	3c088889 	.word	0x3c088889
 8013c64:	be2aaaab 	.word	0xbe2aaaab
 8013c68:	3e2aaaab 	.word	0x3e2aaaab

08013c6c <with_errno>:
 8013c6c:	b570      	push	{r4, r5, r6, lr}
 8013c6e:	4604      	mov	r4, r0
 8013c70:	460d      	mov	r5, r1
 8013c72:	4616      	mov	r6, r2
 8013c74:	f7fb f8d2 	bl	800ee1c <__errno>
 8013c78:	4629      	mov	r1, r5
 8013c7a:	6006      	str	r6, [r0, #0]
 8013c7c:	4620      	mov	r0, r4
 8013c7e:	bd70      	pop	{r4, r5, r6, pc}

08013c80 <xflow>:
 8013c80:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013c82:	4614      	mov	r4, r2
 8013c84:	461d      	mov	r5, r3
 8013c86:	b108      	cbz	r0, 8013c8c <xflow+0xc>
 8013c88:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8013c8c:	e9cd 2300 	strd	r2, r3, [sp]
 8013c90:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013c94:	4620      	mov	r0, r4
 8013c96:	4629      	mov	r1, r5
 8013c98:	f7ec fcae 	bl	80005f8 <__aeabi_dmul>
 8013c9c:	2222      	movs	r2, #34	; 0x22
 8013c9e:	b003      	add	sp, #12
 8013ca0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013ca4:	f7ff bfe2 	b.w	8013c6c <with_errno>

08013ca8 <__math_uflow>:
 8013ca8:	b508      	push	{r3, lr}
 8013caa:	2200      	movs	r2, #0
 8013cac:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8013cb0:	f7ff ffe6 	bl	8013c80 <xflow>
 8013cb4:	ec41 0b10 	vmov	d0, r0, r1
 8013cb8:	bd08      	pop	{r3, pc}

08013cba <__math_oflow>:
 8013cba:	b508      	push	{r3, lr}
 8013cbc:	2200      	movs	r2, #0
 8013cbe:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8013cc2:	f7ff ffdd 	bl	8013c80 <xflow>
 8013cc6:	ec41 0b10 	vmov	d0, r0, r1
 8013cca:	bd08      	pop	{r3, pc}

08013ccc <with_errnof>:
 8013ccc:	b513      	push	{r0, r1, r4, lr}
 8013cce:	4604      	mov	r4, r0
 8013cd0:	ed8d 0a01 	vstr	s0, [sp, #4]
 8013cd4:	f7fb f8a2 	bl	800ee1c <__errno>
 8013cd8:	ed9d 0a01 	vldr	s0, [sp, #4]
 8013cdc:	6004      	str	r4, [r0, #0]
 8013cde:	b002      	add	sp, #8
 8013ce0:	bd10      	pop	{r4, pc}

08013ce2 <xflowf>:
 8013ce2:	b130      	cbz	r0, 8013cf2 <xflowf+0x10>
 8013ce4:	eef1 7a40 	vneg.f32	s15, s0
 8013ce8:	ee27 0a80 	vmul.f32	s0, s15, s0
 8013cec:	2022      	movs	r0, #34	; 0x22
 8013cee:	f7ff bfed 	b.w	8013ccc <with_errnof>
 8013cf2:	eef0 7a40 	vmov.f32	s15, s0
 8013cf6:	e7f7      	b.n	8013ce8 <xflowf+0x6>

08013cf8 <__math_uflowf>:
 8013cf8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8013d00 <__math_uflowf+0x8>
 8013cfc:	f7ff bff1 	b.w	8013ce2 <xflowf>
 8013d00:	10000000 	.word	0x10000000

08013d04 <__math_oflowf>:
 8013d04:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8013d0c <__math_oflowf+0x8>
 8013d08:	f7ff bfeb 	b.w	8013ce2 <xflowf>
 8013d0c:	70000000 	.word	0x70000000

08013d10 <fabs>:
 8013d10:	ec51 0b10 	vmov	r0, r1, d0
 8013d14:	ee10 2a10 	vmov	r2, s0
 8013d18:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8013d1c:	ec43 2b10 	vmov	d0, r2, r3
 8013d20:	4770      	bx	lr

08013d22 <finite>:
 8013d22:	b082      	sub	sp, #8
 8013d24:	ed8d 0b00 	vstr	d0, [sp]
 8013d28:	9801      	ldr	r0, [sp, #4]
 8013d2a:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8013d2e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8013d32:	0fc0      	lsrs	r0, r0, #31
 8013d34:	b002      	add	sp, #8
 8013d36:	4770      	bx	lr

08013d38 <scalbn>:
 8013d38:	b570      	push	{r4, r5, r6, lr}
 8013d3a:	ec55 4b10 	vmov	r4, r5, d0
 8013d3e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8013d42:	4606      	mov	r6, r0
 8013d44:	462b      	mov	r3, r5
 8013d46:	b99a      	cbnz	r2, 8013d70 <scalbn+0x38>
 8013d48:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8013d4c:	4323      	orrs	r3, r4
 8013d4e:	d036      	beq.n	8013dbe <scalbn+0x86>
 8013d50:	4b39      	ldr	r3, [pc, #228]	; (8013e38 <scalbn+0x100>)
 8013d52:	4629      	mov	r1, r5
 8013d54:	ee10 0a10 	vmov	r0, s0
 8013d58:	2200      	movs	r2, #0
 8013d5a:	f7ec fc4d 	bl	80005f8 <__aeabi_dmul>
 8013d5e:	4b37      	ldr	r3, [pc, #220]	; (8013e3c <scalbn+0x104>)
 8013d60:	429e      	cmp	r6, r3
 8013d62:	4604      	mov	r4, r0
 8013d64:	460d      	mov	r5, r1
 8013d66:	da10      	bge.n	8013d8a <scalbn+0x52>
 8013d68:	a32b      	add	r3, pc, #172	; (adr r3, 8013e18 <scalbn+0xe0>)
 8013d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d6e:	e03a      	b.n	8013de6 <scalbn+0xae>
 8013d70:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8013d74:	428a      	cmp	r2, r1
 8013d76:	d10c      	bne.n	8013d92 <scalbn+0x5a>
 8013d78:	ee10 2a10 	vmov	r2, s0
 8013d7c:	4620      	mov	r0, r4
 8013d7e:	4629      	mov	r1, r5
 8013d80:	f7ec fa84 	bl	800028c <__adddf3>
 8013d84:	4604      	mov	r4, r0
 8013d86:	460d      	mov	r5, r1
 8013d88:	e019      	b.n	8013dbe <scalbn+0x86>
 8013d8a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8013d8e:	460b      	mov	r3, r1
 8013d90:	3a36      	subs	r2, #54	; 0x36
 8013d92:	4432      	add	r2, r6
 8013d94:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8013d98:	428a      	cmp	r2, r1
 8013d9a:	dd08      	ble.n	8013dae <scalbn+0x76>
 8013d9c:	2d00      	cmp	r5, #0
 8013d9e:	a120      	add	r1, pc, #128	; (adr r1, 8013e20 <scalbn+0xe8>)
 8013da0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013da4:	da1c      	bge.n	8013de0 <scalbn+0xa8>
 8013da6:	a120      	add	r1, pc, #128	; (adr r1, 8013e28 <scalbn+0xf0>)
 8013da8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013dac:	e018      	b.n	8013de0 <scalbn+0xa8>
 8013dae:	2a00      	cmp	r2, #0
 8013db0:	dd08      	ble.n	8013dc4 <scalbn+0x8c>
 8013db2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8013db6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8013dba:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8013dbe:	ec45 4b10 	vmov	d0, r4, r5
 8013dc2:	bd70      	pop	{r4, r5, r6, pc}
 8013dc4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8013dc8:	da19      	bge.n	8013dfe <scalbn+0xc6>
 8013dca:	f24c 3350 	movw	r3, #50000	; 0xc350
 8013dce:	429e      	cmp	r6, r3
 8013dd0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8013dd4:	dd0a      	ble.n	8013dec <scalbn+0xb4>
 8013dd6:	a112      	add	r1, pc, #72	; (adr r1, 8013e20 <scalbn+0xe8>)
 8013dd8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013ddc:	2b00      	cmp	r3, #0
 8013dde:	d1e2      	bne.n	8013da6 <scalbn+0x6e>
 8013de0:	a30f      	add	r3, pc, #60	; (adr r3, 8013e20 <scalbn+0xe8>)
 8013de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013de6:	f7ec fc07 	bl	80005f8 <__aeabi_dmul>
 8013dea:	e7cb      	b.n	8013d84 <scalbn+0x4c>
 8013dec:	a10a      	add	r1, pc, #40	; (adr r1, 8013e18 <scalbn+0xe0>)
 8013dee:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013df2:	2b00      	cmp	r3, #0
 8013df4:	d0b8      	beq.n	8013d68 <scalbn+0x30>
 8013df6:	a10e      	add	r1, pc, #56	; (adr r1, 8013e30 <scalbn+0xf8>)
 8013df8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013dfc:	e7b4      	b.n	8013d68 <scalbn+0x30>
 8013dfe:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8013e02:	3236      	adds	r2, #54	; 0x36
 8013e04:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8013e08:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8013e0c:	4620      	mov	r0, r4
 8013e0e:	4b0c      	ldr	r3, [pc, #48]	; (8013e40 <scalbn+0x108>)
 8013e10:	2200      	movs	r2, #0
 8013e12:	e7e8      	b.n	8013de6 <scalbn+0xae>
 8013e14:	f3af 8000 	nop.w
 8013e18:	c2f8f359 	.word	0xc2f8f359
 8013e1c:	01a56e1f 	.word	0x01a56e1f
 8013e20:	8800759c 	.word	0x8800759c
 8013e24:	7e37e43c 	.word	0x7e37e43c
 8013e28:	8800759c 	.word	0x8800759c
 8013e2c:	fe37e43c 	.word	0xfe37e43c
 8013e30:	c2f8f359 	.word	0xc2f8f359
 8013e34:	81a56e1f 	.word	0x81a56e1f
 8013e38:	43500000 	.word	0x43500000
 8013e3c:	ffff3cb0 	.word	0xffff3cb0
 8013e40:	3c900000 	.word	0x3c900000

08013e44 <atanf>:
 8013e44:	b538      	push	{r3, r4, r5, lr}
 8013e46:	ee10 5a10 	vmov	r5, s0
 8013e4a:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8013e4e:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 8013e52:	eef0 7a40 	vmov.f32	s15, s0
 8013e56:	db10      	blt.n	8013e7a <atanf+0x36>
 8013e58:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8013e5c:	dd04      	ble.n	8013e68 <atanf+0x24>
 8013e5e:	ee70 7a00 	vadd.f32	s15, s0, s0
 8013e62:	eeb0 0a67 	vmov.f32	s0, s15
 8013e66:	bd38      	pop	{r3, r4, r5, pc}
 8013e68:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8013fa0 <atanf+0x15c>
 8013e6c:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 8013fa4 <atanf+0x160>
 8013e70:	2d00      	cmp	r5, #0
 8013e72:	bfd8      	it	le
 8013e74:	eef0 7a40 	vmovle.f32	s15, s0
 8013e78:	e7f3      	b.n	8013e62 <atanf+0x1e>
 8013e7a:	4b4b      	ldr	r3, [pc, #300]	; (8013fa8 <atanf+0x164>)
 8013e7c:	429c      	cmp	r4, r3
 8013e7e:	dc10      	bgt.n	8013ea2 <atanf+0x5e>
 8013e80:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8013e84:	da0a      	bge.n	8013e9c <atanf+0x58>
 8013e86:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8013fac <atanf+0x168>
 8013e8a:	ee30 7a07 	vadd.f32	s14, s0, s14
 8013e8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8013e92:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8013e96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e9a:	dce2      	bgt.n	8013e62 <atanf+0x1e>
 8013e9c:	f04f 33ff 	mov.w	r3, #4294967295
 8013ea0:	e013      	b.n	8013eca <atanf+0x86>
 8013ea2:	f000 f8a3 	bl	8013fec <fabsf>
 8013ea6:	4b42      	ldr	r3, [pc, #264]	; (8013fb0 <atanf+0x16c>)
 8013ea8:	429c      	cmp	r4, r3
 8013eaa:	dc4f      	bgt.n	8013f4c <atanf+0x108>
 8013eac:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8013eb0:	429c      	cmp	r4, r3
 8013eb2:	dc41      	bgt.n	8013f38 <atanf+0xf4>
 8013eb4:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8013eb8:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8013ebc:	eea0 7a27 	vfma.f32	s14, s0, s15
 8013ec0:	2300      	movs	r3, #0
 8013ec2:	ee30 0a27 	vadd.f32	s0, s0, s15
 8013ec6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8013eca:	1c5a      	adds	r2, r3, #1
 8013ecc:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8013ed0:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8013fb4 <atanf+0x170>
 8013ed4:	eddf 5a38 	vldr	s11, [pc, #224]	; 8013fb8 <atanf+0x174>
 8013ed8:	ed9f 5a38 	vldr	s10, [pc, #224]	; 8013fbc <atanf+0x178>
 8013edc:	ee66 6a06 	vmul.f32	s13, s12, s12
 8013ee0:	eee6 5a87 	vfma.f32	s11, s13, s14
 8013ee4:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8013fc0 <atanf+0x17c>
 8013ee8:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8013eec:	eddf 5a35 	vldr	s11, [pc, #212]	; 8013fc4 <atanf+0x180>
 8013ef0:	eee7 5a26 	vfma.f32	s11, s14, s13
 8013ef4:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8013fc8 <atanf+0x184>
 8013ef8:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8013efc:	eddf 5a33 	vldr	s11, [pc, #204]	; 8013fcc <atanf+0x188>
 8013f00:	eee7 5a26 	vfma.f32	s11, s14, s13
 8013f04:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8013fd0 <atanf+0x18c>
 8013f08:	eea6 5a87 	vfma.f32	s10, s13, s14
 8013f0c:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8013fd4 <atanf+0x190>
 8013f10:	eea5 7a26 	vfma.f32	s14, s10, s13
 8013f14:	ed9f 5a30 	vldr	s10, [pc, #192]	; 8013fd8 <atanf+0x194>
 8013f18:	eea7 5a26 	vfma.f32	s10, s14, s13
 8013f1c:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8013fdc <atanf+0x198>
 8013f20:	eea5 7a26 	vfma.f32	s14, s10, s13
 8013f24:	ee27 7a26 	vmul.f32	s14, s14, s13
 8013f28:	eea5 7a86 	vfma.f32	s14, s11, s12
 8013f2c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8013f30:	d121      	bne.n	8013f76 <atanf+0x132>
 8013f32:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013f36:	e794      	b.n	8013e62 <atanf+0x1e>
 8013f38:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8013f3c:	ee30 7a67 	vsub.f32	s14, s0, s15
 8013f40:	ee30 0a27 	vadd.f32	s0, s0, s15
 8013f44:	2301      	movs	r3, #1
 8013f46:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8013f4a:	e7be      	b.n	8013eca <atanf+0x86>
 8013f4c:	4b24      	ldr	r3, [pc, #144]	; (8013fe0 <atanf+0x19c>)
 8013f4e:	429c      	cmp	r4, r3
 8013f50:	dc0b      	bgt.n	8013f6a <atanf+0x126>
 8013f52:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8013f56:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8013f5a:	eea0 7a27 	vfma.f32	s14, s0, s15
 8013f5e:	2302      	movs	r3, #2
 8013f60:	ee70 6a67 	vsub.f32	s13, s0, s15
 8013f64:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013f68:	e7af      	b.n	8013eca <atanf+0x86>
 8013f6a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8013f6e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8013f72:	2303      	movs	r3, #3
 8013f74:	e7a9      	b.n	8013eca <atanf+0x86>
 8013f76:	4a1b      	ldr	r2, [pc, #108]	; (8013fe4 <atanf+0x1a0>)
 8013f78:	491b      	ldr	r1, [pc, #108]	; (8013fe8 <atanf+0x1a4>)
 8013f7a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8013f7e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8013f82:	ed93 0a00 	vldr	s0, [r3]
 8013f86:	ee37 7a40 	vsub.f32	s14, s14, s0
 8013f8a:	ed92 0a00 	vldr	s0, [r2]
 8013f8e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013f92:	2d00      	cmp	r5, #0
 8013f94:	ee70 7a67 	vsub.f32	s15, s0, s15
 8013f98:	bfb8      	it	lt
 8013f9a:	eef1 7a67 	vneglt.f32	s15, s15
 8013f9e:	e760      	b.n	8013e62 <atanf+0x1e>
 8013fa0:	3fc90fdb 	.word	0x3fc90fdb
 8013fa4:	bfc90fdb 	.word	0xbfc90fdb
 8013fa8:	3edfffff 	.word	0x3edfffff
 8013fac:	7149f2ca 	.word	0x7149f2ca
 8013fb0:	3f97ffff 	.word	0x3f97ffff
 8013fb4:	3c8569d7 	.word	0x3c8569d7
 8013fb8:	3d4bda59 	.word	0x3d4bda59
 8013fbc:	bd6ef16b 	.word	0xbd6ef16b
 8013fc0:	3d886b35 	.word	0x3d886b35
 8013fc4:	3dba2e6e 	.word	0x3dba2e6e
 8013fc8:	3e124925 	.word	0x3e124925
 8013fcc:	3eaaaaab 	.word	0x3eaaaaab
 8013fd0:	bd15a221 	.word	0xbd15a221
 8013fd4:	bd9d8795 	.word	0xbd9d8795
 8013fd8:	bde38e38 	.word	0xbde38e38
 8013fdc:	be4ccccd 	.word	0xbe4ccccd
 8013fe0:	401bffff 	.word	0x401bffff
 8013fe4:	08014bf8 	.word	0x08014bf8
 8013fe8:	08014c08 	.word	0x08014c08

08013fec <fabsf>:
 8013fec:	ee10 3a10 	vmov	r3, s0
 8013ff0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8013ff4:	ee00 3a10 	vmov	s0, r3
 8013ff8:	4770      	bx	lr

08013ffa <finitef>:
 8013ffa:	b082      	sub	sp, #8
 8013ffc:	ed8d 0a01 	vstr	s0, [sp, #4]
 8014000:	9801      	ldr	r0, [sp, #4]
 8014002:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8014006:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 801400a:	bfac      	ite	ge
 801400c:	2000      	movge	r0, #0
 801400e:	2001      	movlt	r0, #1
 8014010:	b002      	add	sp, #8
 8014012:	4770      	bx	lr

08014014 <floorf>:
 8014014:	ee10 3a10 	vmov	r3, s0
 8014018:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801401c:	3a7f      	subs	r2, #127	; 0x7f
 801401e:	2a16      	cmp	r2, #22
 8014020:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8014024:	dc2a      	bgt.n	801407c <floorf+0x68>
 8014026:	2a00      	cmp	r2, #0
 8014028:	da11      	bge.n	801404e <floorf+0x3a>
 801402a:	eddf 7a18 	vldr	s15, [pc, #96]	; 801408c <floorf+0x78>
 801402e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8014032:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8014036:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801403a:	dd05      	ble.n	8014048 <floorf+0x34>
 801403c:	2b00      	cmp	r3, #0
 801403e:	da23      	bge.n	8014088 <floorf+0x74>
 8014040:	4a13      	ldr	r2, [pc, #76]	; (8014090 <floorf+0x7c>)
 8014042:	2900      	cmp	r1, #0
 8014044:	bf18      	it	ne
 8014046:	4613      	movne	r3, r2
 8014048:	ee00 3a10 	vmov	s0, r3
 801404c:	4770      	bx	lr
 801404e:	4911      	ldr	r1, [pc, #68]	; (8014094 <floorf+0x80>)
 8014050:	4111      	asrs	r1, r2
 8014052:	420b      	tst	r3, r1
 8014054:	d0fa      	beq.n	801404c <floorf+0x38>
 8014056:	eddf 7a0d 	vldr	s15, [pc, #52]	; 801408c <floorf+0x78>
 801405a:	ee30 0a27 	vadd.f32	s0, s0, s15
 801405e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8014062:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014066:	ddef      	ble.n	8014048 <floorf+0x34>
 8014068:	2b00      	cmp	r3, #0
 801406a:	bfbe      	ittt	lt
 801406c:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8014070:	fa40 f202 	asrlt.w	r2, r0, r2
 8014074:	189b      	addlt	r3, r3, r2
 8014076:	ea23 0301 	bic.w	r3, r3, r1
 801407a:	e7e5      	b.n	8014048 <floorf+0x34>
 801407c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8014080:	d3e4      	bcc.n	801404c <floorf+0x38>
 8014082:	ee30 0a00 	vadd.f32	s0, s0, s0
 8014086:	4770      	bx	lr
 8014088:	2300      	movs	r3, #0
 801408a:	e7dd      	b.n	8014048 <floorf+0x34>
 801408c:	7149f2ca 	.word	0x7149f2ca
 8014090:	bf800000 	.word	0xbf800000
 8014094:	007fffff 	.word	0x007fffff

08014098 <nanf>:
 8014098:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80140a0 <nanf+0x8>
 801409c:	4770      	bx	lr
 801409e:	bf00      	nop
 80140a0:	7fc00000 	.word	0x7fc00000

080140a4 <scalbnf>:
 80140a4:	ee10 3a10 	vmov	r3, s0
 80140a8:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 80140ac:	d025      	beq.n	80140fa <scalbnf+0x56>
 80140ae:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 80140b2:	d302      	bcc.n	80140ba <scalbnf+0x16>
 80140b4:	ee30 0a00 	vadd.f32	s0, s0, s0
 80140b8:	4770      	bx	lr
 80140ba:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 80140be:	d122      	bne.n	8014106 <scalbnf+0x62>
 80140c0:	4b2a      	ldr	r3, [pc, #168]	; (801416c <scalbnf+0xc8>)
 80140c2:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8014170 <scalbnf+0xcc>
 80140c6:	4298      	cmp	r0, r3
 80140c8:	ee20 0a27 	vmul.f32	s0, s0, s15
 80140cc:	db16      	blt.n	80140fc <scalbnf+0x58>
 80140ce:	ee10 3a10 	vmov	r3, s0
 80140d2:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80140d6:	3a19      	subs	r2, #25
 80140d8:	4402      	add	r2, r0
 80140da:	2afe      	cmp	r2, #254	; 0xfe
 80140dc:	dd15      	ble.n	801410a <scalbnf+0x66>
 80140de:	ee10 3a10 	vmov	r3, s0
 80140e2:	eddf 7a24 	vldr	s15, [pc, #144]	; 8014174 <scalbnf+0xd0>
 80140e6:	eddf 6a24 	vldr	s13, [pc, #144]	; 8014178 <scalbnf+0xd4>
 80140ea:	2b00      	cmp	r3, #0
 80140ec:	eeb0 7a67 	vmov.f32	s14, s15
 80140f0:	bfb8      	it	lt
 80140f2:	eef0 7a66 	vmovlt.f32	s15, s13
 80140f6:	ee27 0a27 	vmul.f32	s0, s14, s15
 80140fa:	4770      	bx	lr
 80140fc:	eddf 7a1f 	vldr	s15, [pc, #124]	; 801417c <scalbnf+0xd8>
 8014100:	ee20 0a27 	vmul.f32	s0, s0, s15
 8014104:	4770      	bx	lr
 8014106:	0dd2      	lsrs	r2, r2, #23
 8014108:	e7e6      	b.n	80140d8 <scalbnf+0x34>
 801410a:	2a00      	cmp	r2, #0
 801410c:	dd06      	ble.n	801411c <scalbnf+0x78>
 801410e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8014112:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8014116:	ee00 3a10 	vmov	s0, r3
 801411a:	4770      	bx	lr
 801411c:	f112 0f16 	cmn.w	r2, #22
 8014120:	da1a      	bge.n	8014158 <scalbnf+0xb4>
 8014122:	f24c 3350 	movw	r3, #50000	; 0xc350
 8014126:	4298      	cmp	r0, r3
 8014128:	ee10 3a10 	vmov	r3, s0
 801412c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8014130:	dd0a      	ble.n	8014148 <scalbnf+0xa4>
 8014132:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8014174 <scalbnf+0xd0>
 8014136:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8014178 <scalbnf+0xd4>
 801413a:	eef0 7a40 	vmov.f32	s15, s0
 801413e:	2b00      	cmp	r3, #0
 8014140:	bf18      	it	ne
 8014142:	eeb0 0a47 	vmovne.f32	s0, s14
 8014146:	e7db      	b.n	8014100 <scalbnf+0x5c>
 8014148:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 801417c <scalbnf+0xd8>
 801414c:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8014180 <scalbnf+0xdc>
 8014150:	eef0 7a40 	vmov.f32	s15, s0
 8014154:	2b00      	cmp	r3, #0
 8014156:	e7f3      	b.n	8014140 <scalbnf+0x9c>
 8014158:	3219      	adds	r2, #25
 801415a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801415e:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8014162:	eddf 7a08 	vldr	s15, [pc, #32]	; 8014184 <scalbnf+0xe0>
 8014166:	ee07 3a10 	vmov	s14, r3
 801416a:	e7c4      	b.n	80140f6 <scalbnf+0x52>
 801416c:	ffff3cb0 	.word	0xffff3cb0
 8014170:	4c000000 	.word	0x4c000000
 8014174:	7149f2ca 	.word	0x7149f2ca
 8014178:	f149f2ca 	.word	0xf149f2ca
 801417c:	0da24260 	.word	0x0da24260
 8014180:	8da24260 	.word	0x8da24260
 8014184:	33000000 	.word	0x33000000

08014188 <_init>:
 8014188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801418a:	bf00      	nop
 801418c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801418e:	bc08      	pop	{r3}
 8014190:	469e      	mov	lr, r3
 8014192:	4770      	bx	lr

08014194 <_fini>:
 8014194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014196:	bf00      	nop
 8014198:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801419a:	bc08      	pop	{r3}
 801419c:	469e      	mov	lr, r3
 801419e:	4770      	bx	lr
